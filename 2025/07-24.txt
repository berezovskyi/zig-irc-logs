1753336304
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: yes, 100% that really does suck that's where I'll use `const Self = @This();` for generic/comptime structs https://srctree.gr.ht/repo/verse/blob/src/template/page.zig#L8

1753336536
grayhatter!~grayhatte@user/grayhatter
wanted to pass along some feedback from a friend who I "tricked" into trying my new dmenu thing

1753336551
grayhatter!~grayhatte@user/grayhatter
<friend> tbh, the experience of checking this out and building it has me sold on zig

1753336681
grayhatter!~grayhatte@user/grayhatter
he was very pleased that `git clone [repo]`  `zig build run`  and `zig build -p $HOME` gave him a perfectly working app with no extra work required

1753337299
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: kudos to you for keeping it `zig build` and not doing crazy crap like I see other projects doing sometimes

1753337324
triallax!~triallax@lacerte/triallax
crap like? :)

1753337334
triallax!~triallax@lacerte/triallax
(my tingly senses are saying "makefiles")

1753337374
andrewrk!~andrewrk@mail.ziglang.org
yeah sure makefiles, which notably is a dependency on multiple third party projects that are not available on all platforms

1753337388
andrewrk!~andrewrk@mail.ziglang.org
or perhaps, a third party package manager that was made before zig build had fetch capability

1753337428
andrewrk!~andrewrk@mail.ziglang.org
for example: https://github.com/zigimg/zigimg/ has gyro.zzz and zig.mod. i'll never depend on this even for hobby projects due to that

1753340509
grayhatter!~grayhatte@user/grayhatter
this one is simple enough, (just a single dep on wayland bindings), but it's quite nice that zig build will fetch deps and just build it's world itself

1753340558
grayhatter!~grayhatte@user/grayhatter
I also apprecate that deps are specified in the root build, and not in random files where ever someone feels like that day *[stares at go]*

1753340670
andrewrk!~andrewrk@mail.ziglang.org
not sure what you mean, I guess I've been out of it for long enough that I don't know what Go does

1753340696
grayhatter!~grayhatte@user/grayhatter
anyways, I really do enjoy writing zig, this isn't the first time I've written some app, and found myself staring at it, already launched, but still waiting for it to launch/load

1753340782
grayhatter!~grayhatte@user/grayhatter
andrewrk: I'm bothered by go's need to use the fully qualified name in the import section at the file level

1753340938
grayhatter!~grayhatte@user/grayhatter
import (  "github.com/ProtonMail/go-crypto/openpgp" )

1753341049
torque!~tachyon@user/torque
it's just java for a younger generation

1753341082
grayhatter!~grayhatte@user/grayhatter
maybe? 

1753341117
grayhatter!~grayhatte@user/grayhatter
I think I see what you mean... but I have a hard time agreeing, mostly because I would willingly work in go, but wouldn't willingly work in java

1753341334
andrewrk!~andrewrk@mail.ziglang.org
it's true. go is eating java's lunch

1753341383
neurocyte!~neurocyte@user/neurocyte
java is the new cobol

1753341418
grayhatter!~grayhatte@user/grayhatter
nothing of value was lost?

1753341702
andrewrk!~andrewrk@mail.ziglang.org
just look at kubernetes. that's basically java

1753342182
grayhatter!~grayhatte@user/grayhatter
speaking of kubernetes and horrifying build scripts a friend was just mentioning this to me the other day https://github.com/kubernetes/kubernetes/pull/99561

1753342296
grayhatter!~grayhatte@user/grayhatter
just think andrewrk, one day someone might remove a build.zig support which results in a -147,768 diff

1753342339
grayhatter!~grayhatte@user/grayhatter
"what's gonin' on in here?" > The diff you're trying to view is too large. We only load the first 3000 changed files. 

1753342344
grayhatter!~grayhatte@user/grayhatter
"oh lord"

1753342630
andrewrk!~andrewrk@mail.ziglang.org
jesus christapastafarian

1753342672
grayhatter!~grayhatte@user/grayhatter
I must not be holding it right because according to sloc there's only 44k lines of source code here

1753342694
grayhatter!~grayhatte@user/grayhatter
I refuse to believe that removing bazel deleted 75% of the repo

1753343190
ifreund!2940d10f8b@user/ifreund
what the hell?

1753343225
ifreund!2940d10f8b@user/ifreund
I guess there was a bunch of vendored code or something?

1753343361
grayhatter!~grayhatte@user/grayhatter
ahh, that's better

1753343382
grayhatter!~grayhatte@user/grayhatter
scc reports 3,504,211 lines of go

1753343484
ifreund!2940d10f8b@user/ifreund
now that fits my impression of kubernetes much better

1753343820
grayhatter!~grayhatte@user/grayhatter
ifreund: according the the diff, the only thing removed was BUILD files

1753344064
ifreund!2940d10f8b@user/ifreund
crazy

1753371727
rvrb!~rvrb@156.146.51.228
I've personally been fighting the urge to attempt moving Godot's SCons builds over to build.zig a la All Your Codebase

1753372204
rvrb!~rvrb@156.146.51.228
don't get me started on Kubernetes.. specifically Helm. Helm has to be the absolute worst piece of software engineering I have seen in my lifetime. I get angry even thinking about the time I wasted with that piece of junk and that was like 7 or 8 years ago now

1753376244
grayhatter!~grayhatte@user/grayhatter
are the stdlib docs broken?

1753376374
grayhatter!~grayhatte@user/grayhatter
ahh, unfortunate https://github.com/ziglang/zig/issues/24565

1753388824
andrewrk!~andrewrk@mail.ziglang.org
my bad, I'll look at it in a bit

1753388871
andrewrk!~andrewrk@mail.ziglang.org
rvrb: I briefly tried to use that when I worked at OkCupid and was tasked with moving all our stuff from happy little computers in a data center, to Kubernetes in the cloud. I hated it

1753389677
rvrb!~rvrb@156.146.51.228
templating yaml with jinja, what could go wrong? the fact that it won adoption within the Kubernetes community says everything in my opinion

1753389897
rvrb!~rvrb@156.146.51.228
I wish CoreOS Fleet, or something like it, was more successful. I used Nomad at my last position and was much happier with it than Kubernetes

1753390213
rvrb!~rvrb@156.146.51.228
the language I want to create is rooted in my hatred for all of these devops nightmares and a desire in and belief in there being a better way

1753391782
bblack!~bblack@wikimedia/bblack-WMF
if I want to copy a file from my source tree into a testing.TmpDir during test{} ... is there some reliable/canonical way to reference those source pathnames?

1753391873
bblack!~bblack@wikimedia/bblack-WMF
or alternatively: is there a way to setup test data in .zig-cache from build.zig using b.addWriteFiles(), and then get the pathname of that writefiles directory from inside a zig test{} block?

1753391971
bblack!~bblack@wikimedia/bblack-WMF
the latter would be better actually, it would save some work on subsequent runs to have it cached properly, instead of redoing things on every test block with a fresh testing.TmpDir

1753392159
bblack!~bblack@wikimedia/bblack-WMF
I guess the reason it's difficult is that test{} blocks should be runnable from "zig test foo.zig" even in a subdirectory and without necessarily build.zig support, either.

1753392272
bblack!~bblack@wikimedia/bblack-WMF
@embedFile() is enough for many such cases.  but if the code being tested is supposed to do file i/o on its own and that's part of what you want to test with your testdata/ contents...

1753392506
bblack!~bblack@wikimedia/bblack-WMF
maybe another way of stating things: I want the pathname @embedFile() would load, rather than the contents of that pathname.

1753392656
rvrb!~rvrb@156.146.51.228
I don't follow exactly what you are trying to do, but perhaps you can use b.addOptions with the path? https://ziglang.org/documentation/0.14.1/std/#std.Build.addOptions

1753392730
bblack!~bblack@wikimedia/bblack-WMF
rvrb: yeah I played with that idea a bit.  It's tricky, because addWriteFiles() stuff ends up giving you a lazy path, and then you need to resolve it to a string for addOptions, and I could find a way to get the deps right to make that happen in time.

1753392774
bblack!~bblack@wikimedia/bblack-WMF
but also, while build.zig would give me better caching, it would mean "zig test foo.zig" will never work reliably, these tests would require running through 'zig build test', so it's kind of wierd.

1753392810
bblack!~bblack@wikimedia/bblack-WMF
(but maybe that's the best tradeoff, if I can make it resolve the lazypath in time to set the option string in an importable module)

1753392855
rvrb!~rvrb@156.146.51.228
it sounds like your tests are parameterized by something, and I don't understand what the parameter is

1753392863
bblack!~bblack@wikimedia/bblack-WMF
of course if I assume I have to run the test via "zig build test"... I'm guessing "zig build" is always run from the root of the source tree anyways, in which case I could just do the naive thing and specify source-root-relative pathnames as strings right in my test.

1753392919
bblack!~bblack@wikimedia/bblack-WMF
yeah there's a number of testdata files (small databases) that various test{} blocks need to load and then execute a bunch of operations against the data from a given database, etc.

1753392969
bblack!~bblack@wikimedia/bblack-WMF
but part of the code under test is the part that opens the file and parses it from disk, using a 3rd-party C library to do so.  So I can't just hand it embedFile data or some kind of stdlib i/o streaming object or whatever.  It needs to be the *pathname* of those testdata/foo files.

1753393125
rvrb!~rvrb@156.146.51.228
so the parameter is the location of the test data; and you're saying that data is not committed at a fixed location in your repository or something?

1753393198
bblack!~bblack@wikimedia/bblack-WMF
it is, but I'm leery of just referencing the relative path directly, e.g. using literally "./src/foo/testdata/bar".  Because in almost all build systems, only the build system actually knows where the source root directory is at any given time

1753393226
bblack!~bblack@wikimedia/bblack-WMF
I mean, as a trivial example, I'd assume the path would be wrong if someone did "cd src; zig build test --build-file ../build.zig"

1753393254
bblack!~bblack@wikimedia/bblack-WMF
usually with other complex build systems, there's some way to tell your tests something about the source root or relative path prefix or whatever

1753393325
bblack!~bblack@wikimedia/bblack-WMF
@embedFile() knows how to resolve the source-relative pathname correctly, but it does it as an interior step on the way to just loading up the file's contents for you.

1753393348
bblack!~bblack@wikimedia/bblack-WMF
nothing seems to provide such resolution canonically, that I've found yet, at just a pathname level

1753393764
bblack!~bblack@wikimedia/bblack-WMF
I can see why though.  I mean, there's a lot of footguns there if you were using such pathnames in normal runtime code.

1753393789
bblack!~bblack@wikimedia/bblack-WMF
but in test{} context to reference source tree test files, that seems ok

1753394223
rvrb!~rvrb@156.146.51.228
I don't know if you're right or wrong about the relative path thing, but have you tried it?

1753394292
rvrb!~rvrb@156.146.51.228
regardless, if you want to avoid that, I think `b.addOptions()` with `b.path("./testdata")` and `LazyPath.getPath` (I guess that is deprecated and you need getPath3) would work to make sure you see the path as the build system sees it

1753394342
rvrb!~rvrb@156.146.51.228
I would personally not want that since it could mean that the location of the source code can invalidate the build cache I think

1753394383
bblack!~bblack@wikimedia/bblack-WMF
plus it means the affected test{} blocks will only work with "zig build test", not "zig test"

1753394450
bblack!~bblack@wikimedia/bblack-WMF
but yeah, it might be a reasonable option all things considered.  I just found the missing piece of the puzzle on that path: Step.Options has a specific .addOptionPath() for this, whereas I was trying to feed .getPath() (which wants to resolve the lazy path immediately) into a regular .addOption as a string before

1753394540
rvrb!~rvrb@156.146.51.228
oh, yeah, that looks like what you want. as far as the `zig test` I think what you want is just add test filtering and embrace the build system

1753394579
rvrb!~rvrb@156.146.51.228
something simple like https://ziggit.dev/t/how-to-filter-test-using-test-filter-test-name-in-conjunction-with-build-zig/5609/4

1753395305
bblack!~bblack@wikimedia/bblack-WMF
yeah I think that's what I'll end up doing, thanks :)

1753395329
bblack!~bblack@wikimedia/bblack-WMF
[side note: I did try the --build-file ../build.zig thing, it does break relative paths]

1753400259
rvrb!~rvrb@156.146.51.228
is there any pattern for 'dynamically sized types', other than passing around a `bytes: [*]u8` and a struct for the header like `PacketHeader`, `header: PacketHeader = @bitCast(bytes[0..@sizeOf(Header)])` etc

1753400610
rvrb!~rvrb@156.146.51.228
I was thinking maybe some tomfoolery with @fieldParentPtr() but I think that might be a questionable decision

