1753747570
clevor!sid649024@id-649024.hampstead.irccloud.com
My idea is to always allocate a copy of the value and let the optimizer alias the two copies if it can prove it is safe to do so.

1753765339
rvrb!~rvrb@156.146.51.228
ifreund: I thought you should know I ended up using the name you came up with; structured slice

1753771529
ifreund!2940d10f8b@user/ifreund
rvrb: neat!

1753782589
sskras!sid542048@id-542048.tinside.irccloud.com
hello

1753782694
sskras!sid542048@id-542048.tinside.irccloud.com
I remember some discussion (probably related to bootstrapping) where someone (possible andrewrk) mentioned the idea of writing a compiler/translator in an interpreted language.

1753782727
sskras!sid542048@id-542048.tinside.irccloud.com
I would like to reread it, but now fail to find the discussion.

1753782817
sskras!sid542048@id-542048.tinside.irccloud.com
Has anyone any hints/pointers about that? :)

1753782920
ifreund!2940d10f8b@user/ifreund
sskras: https://ziggit.dev/t/what-would-second-implementation-of-zig-need-to-compile-bootstrap-zig/10103

1753783528
sskras!sid542048@id-542048.tinside.irccloud.com
ifreund: oh thank you! So it was on ziggit.dev, while I was mistakenly digging through GitHub :)

1753792520
tsujp!497e1f7b6a@sourcehut/user/tsujp
squeek502: thanks mate

1753794506
contrafunctor!~contrafun@79.127.146.162
I'm wondering what the tradeoffs between the DoD pattern of allocating a syntax tree in an array and using indices vs just using a bump allocator.

1753794506
contrafunctor!~contrafun@79.127.146.162
It seems like using a bump allocator gets a lot of the benefits (locality, fast allocation) and additionally gives the option of having different-sized allocations for different ast nodes. The one downside I can see is that you can't have a separate array for tags. But I don't see many people using this option.

1753794606
bblack!~bblack@wikimedia/bblack-WMF
bear with me, as I'm not even sure yet what the end of my current debugging rabbithole is, but: has anyone seen an issue before where, if your code returns invalid memory (e.g. returning an item from the local stack), it works fine in a Debug build but then crashes out in all the Release modes?  It just seemed odd to me that Debug would fail to fail on things that crash Release.

1753794639
bblack!~bblack@wikimedia/bblack-WMF
I'm starting to question my sanity :)

1753794812
bblack!~bblack@wikimedia/bblack-WMF
(at first I wondered if the Debug difference was the native x86_64 backend vs llvm, but even Debug+llvm does it)

1753795273
bblack!~bblack@wikimedia/bblack-WMF
actually, testing all 4 release modes and explicitly switching between native x86_64 and using llvm+lld: Debug doesn't crash with either backend, all the Release modes don't crash my code with native, but do crash with llvm.  To be clear, I'm pretty sure my code is actually-buggy and should crash.

1753795331
bblack!~bblack@wikimedia/bblack-WMF
I'm guessing both x86_64 backend (all modes) and llvm+Debug just happen to preserve the stack frames in a way that hides my bug.

1753795541
bblack!~bblack@wikimedia/bblack-WMF
it was just kind of surprising to be committing along for weeks only using Debug, and then switch to Release* and find I had made a mistake way back in my commit history that wasn't being caught.

1753796496
ifreund!2940d10f8b@user/ifreund
bblack: yes, that happens

1753796549
ifreund!2940d10f8b@user/ifreund
blame the optimizations which assuming you haven't done anything as silly as dereference a pointer to invalid memory

1753796607
ifreund!2940d10f8b@user/ifreund
there aren't runtime safety checks for that kind of memory error yet, valgrind probably would have caught it though

1753796634
ifreund!2940d10f8b@user/ifreund
contrafunctor: one advantage is that indexes can be smaller than pointers

1753796670
ifreund!2940d10f8b@user/ifreund
making memory layouts as compact as possible is a big part of DoD

1753796768
contrafunctor!~contrafun@79.127.146.162
ifreund: gotcha, makes sense

1753797068
hadronized!~hadronize@2001:41d0:a:fe76::1
contrafunctor: nice nick üòè

1753804061
rvrb!~rvrb@156.146.51.228
contrafunctor: if you haven‚Äôt seen it already https://www.hytradboi.com/2025/05c72e39-c07e-41bc-ac40-85e8308f2917-programming-without-pointers

1753804266
rvrb!~rvrb@156.146.51.228
also, https://www.youtube.com/watch?v=KOZcJwGdQok

1753804380
rvrb!~rvrb@156.146.51.228
woops, they DCed

1753823733
lemons!~doggie@user/doggie-:49517
tired coder moment but whats that inbuilt called which gets the amount of unset bits on the left side

1753823864
fleischie!~fleischie@vm069.de
lemons: @clz() ?

1753823874
lemons!~doggie@user/doggie-:49517
yeah its that, thanks

1753823892
fleischie!~fleischie@vm069.de
np

1753824339
andrewrk!~andrewrk@mail.ziglang.org
we're all been there

1753824486
andrewrk!~andrewrk@mail.ziglang.org
just one more hour of coding, I swear, and then I'll do my chores

1753824579
rvrb!~rvrb@156.146.51.228
literally me right now

1753830177
lemons!~doggie@user/doggie-:49517
egh.. i really need to finish setting up kakoune

1753830186
lemons!~doggie@user/doggie-:49517
vsc is so annoying to work with

1753830329
andrewrk!~andrewrk@mail.ziglang.org
vim gang

1753831587
lemons!~doggie@user/doggie-:49517
andrewrk: kakoune is vim based :)

1753831617
andrewrk!~andrewrk@mail.ziglang.org
do you mean it shares code with vim?

1753831628
andrewrk!~andrewrk@mail.ziglang.org
or more like, "based on a true story"

1753831628
lemons!~doggie@user/doggie-:49517
(ok not really, it just started as a reimplementation, but it sounds better if i say it like that)  

1753831675
lemons!~doggie@user/doggie-:49517
"I have been working, for the last 5 years, on a new modal editor called Kakoune. It first started as a reimplementation of Vim (the most popular vi clone) whose source code is quite dated. But, I soon realized that we could improve a lot on vi editing model."

1753831772
lemons!~doggie@user/doggie-:49517
so "based on a true story"

1753831779
lemons!~doggie@user/doggie-:49517
:)

1753831845
andrewrk!~andrewrk@mail.ziglang.org
sounds intriguiging 

1753831859
andrewrk!~andrewrk@mail.ziglang.org
although I happen to know that it is TUI based and I don't like TUIs

1753831925
lemons!~doggie@user/doggie-:49517
what do you use vim in then?

1753831994
andrewrk!~andrewrk@mail.ziglang.org
a terminal

1753832012
andrewrk!~andrewrk@mail.ziglang.org
it's not ideal

1753832031
andrewrk!~andrewrk@mail.ziglang.org
I have a lot of complaints about vim

1753832061
andrewrk!~andrewrk@mail.ziglang.org
I mean who wouldn't, after using it for 15+ years

1753832107
lemons!~doggie@user/doggie-:49517
tbh at that point you'd find complaints for anything, software or not

1753832232
lemons!~doggie@user/doggie-:49517
i've mostly been using vsc for everything (i say mostly because you can't do college-mandated winforms in it), mostly from indoctrination

1753832287
lemons!~doggie@user/doggie-:49517
squat in an engine whose only (maintained) highlighter/lsp plugin is vsc exclusive

