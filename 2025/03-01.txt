1740789207
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
think this might do it, have to try it out https://github.com/ZigEmbeddedGroup/serial/blob/master/src/serial.zig

1740789838
braewoods!~braewoods@user/braewoods
stealth_, what are you trying to accomplish?

1740789926
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, My computer case has a cup+gpu display on it. I am on linux and they don't provide any software for it, so I want to write one in Zig. I already have in python thats working. 

1740789960
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://antec.com/product/case/flux-pro

1740789982
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
* cup+gpu temperature display

1740790014
braewoods!~braewoods@user/braewoods
So what's the interface?

1740790053
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lsusb: "Bus 003 Device 003: ID 2022:0522 Љ Љ"

1740790056
braewoods!~braewoods@user/braewoods
These usually require either raw USB, HID, or serial port.

1740790068
braewoods!~braewoods@user/braewoods
it'd be better to check dmesg actually. Could you paste the log?

1740790072
braewoods!~braewoods@user/braewoods
paste bin it that is.

1740790134
braewoods!~braewoods@user/braewoods
dmesg to see what the kernel detects it as.

1740790167
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I can't find the dmesg

1740790190
braewoods!~braewoods@user/braewoods
Really.. it's literally just the dmesg command.

1740790211
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya i got too many firewall logs

1740790222
braewoods!~braewoods@user/braewoods
@_@

1740790247
braewoods!~braewoods@user/braewoods
You could try checking after a reboot.

1740790266
braewoods!~braewoods@user/braewoods
It should show up if you can grab it early enough.

1740790296
braewoods!~braewoods@user/braewoods
Otherwise, you can probe /sys... it's just a bit of a hassle to navigate.

1740790317
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
kde info center gives me https://bpa.st/XZ2Q

1740790337
braewoods!~braewoods@user/braewoods
Doesn't help.

1740790398
braewoods!~braewoods@user/braewoods
... how do you manage with python then?

1740790429
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
someone had already written one

1740790445
braewoods!~braewoods@user/braewoods
... which is? turing smart screen project?

1740790490
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well its uploaded like so https://github.com/pyusb/pyusb/blob/master/docs/tutorial.rst#lets-get-it-started

1740790515
braewoods!~braewoods@user/braewoods
? but that's not specific to your hardware at all?

1740790523
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it doesn't matter how you get the cup/gpu current info, that's the library you use to upload to usb device. 

1740790548
braewoods!~braewoods@user/braewoods
has anyone even reverse engineering the device's protocol?

1740790551
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you just give it idVendor/idProduct

1740790552
braewoods!~braewoods@user/braewoods
engineered*

1740790623
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
see this zig project has venderid as well https://github.com/ZigEmbeddedGroup/serial/blob/master/src/serial.zig#L342

1740790630
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so maybe that will do it?

1740790689
braewoods!~braewoods@user/braewoods
How can you be sure? You're not giving me the impression that you understand yet how your hardware actually interfaces to the system through the kernel.

1740790709
braewoods!~braewoods@user/braewoods
Yes, it uses USB, but that doesn't tell you what kernel API is needed.

1740790734
braewoods!~braewoods@user/braewoods
pyusb is for RAW usb only.

1740790747
braewoods!~braewoods@user/braewoods
Serial is for emulated serial ports and the like.

1740790760
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I dono, its am new to working with hardware as well. I been putting it off to too long, why I got into Zig so I can do low level hardware stuff.

1740790789
braewoods!~braewoods@user/braewoods
Ok. Next time say that sooner. I thought you had a working example already by the way you spoke. -_-

1740790810
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
once the connection is established, I think you just send it info though bytes.

1740790867
braewoods!~braewoods@user/braewoods
Anyway, easiest place to start is to check the kernel log when the hardware is connected... but since it's an internal connection, you probably have to reboot to get that information. Unless you feel like risking a hotplug?

1740790899
braewoods!~braewoods@user/braewoods
I can't give you any direction without knowing what kernel APIs and thereby what libraries to suggest.

1740790935
braewoods!~braewoods@user/braewoods
And for the record, I'm mainly a C developer, but that shouldn't matter for the moment.

1740790945
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can't find it in kernel log as well, what does it normally look line? 

1740790951
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
look like?

1740790975
braewoods!~braewoods@user/braewoods
It varies. It's why I wanted to see it for myself.

1740790985
braewoods!~braewoods@user/braewoods
But here's what it might look like for HID.

1740790990
braewoods!~braewoods@user/braewoods
[    6.148792] hid-generic 0003:048D:5702.0001: hiddev0,hidraw0: USB HID v1.12 Device [ITE Tech. Inc. ITE Device] on usb-0000:01:00.0-3/input0

1740791012
braewoods!~braewoods@user/braewoods
This is the RGB controller interface from my motherboard.

1740791051
braewoods!~braewoods@user/braewoods
Let me try a USB serial port.

1740791141
braewoods!~braewoods@user/braewoods
stealth_, https://dpaste.com/DA2WJACZH

1740791179
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nothing comes up when i type usb in kernel log so its wierd. 

1740791220
braewoods!~braewoods@user/braewoods
quite possibly it got overwritten due to too much information.

1740791231
braewoods!~braewoods@user/braewoods
hence the suggestion to grab it after a reboot

1740791252
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok will reboot

1740791431
braewoods!~braewoods@user/braewoods
stealth_, think you can paste it to a paste bin now?

1740791470
braewoods!~braewoods@user/braewoods
Huh. ARCH derivative. Interesting.

1740791525
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
too much stuff

1740791538
braewoods!~braewoods@user/braewoods
Oh. Meh.

1740791542
braewoods!~braewoods@user/braewoods
Hm.

1740791558
braewoods!~braewoods@user/braewoods
Ok, we'll try /sys method then.

1740791572
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
let me see if i can narrow it down

1740791680
braewoods!~braewoods@user/braewoods
Unfortunately it's a bit difficult to rely on lsusb for this as it usually emphasizes the address over the port.

1740791726
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I see, can you socket to connect? I read you can't but can't be sure. 

1740791728
braewoods!~braewoods@user/braewoods
USB devices are connected to a certain BUS at a specific PORT but their ADDRESS is variable depending on many factors.

1740791764
braewoods!~braewoods@user/braewoods
So we'll have to go digging manually to find the right one.

1740791788
braewoods!~braewoods@user/braewoods
Go into /sys/bus/usb/devices

1740791813
braewoods!~braewoods@user/braewoods
Use lsusb as a guide.

1740791825
braewoods!~braewoods@user/braewoods
The BUS number it gives will help tell you which set of devices to look at.

1740791856
braewoods!~braewoods@user/braewoods
the ones starting with a number sequence are the ones we're looking at.

1740791881
braewoods!~braewoods@user/braewoods
-0 is the entry for a HUB.

1740791881
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
alright

1740791889
braewoods!~braewoods@user/braewoods
port 0 is always the HUB.

1740791907
braewoods!~braewoods@user/braewoods
so if it's bus 3 like you showed earlier...

1740791913
braewoods!~braewoods@user/braewoods
3- something

1740792000
braewoods!~braewoods@user/braewoods
each of these device directories should have a idVendor and idProduct file you can read to get their respective values.

1740792064
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, think i found it, but it also converts to hex and what not

1740792068
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so it gets confusing. 

1740792075
braewoods!~braewoods@user/braewoods
that's normal for these IDs.

1740792086
braewoods!~braewoods@user/braewoods
It would be even weirder if it was in base 10.

1740792116
braewoods!~braewoods@user/braewoods
after all the vendor and product id are 16 bit unsigned integers.

1740792146
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok, there might be 2, lets just assume i found it... 

1740792271
braewoods!~braewoods@user/braewoods
ok. try changing into the device directory and pastebin the output of find.

1740792300
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure what  you mean. 

1740792322
braewoods!~braewoods@user/braewoods
Which directory do you think is the matching device?

1740792341
braewoods!~braewoods@user/braewoods
By checking the device heirarchy we can find out what kernel drivers are attached to the device.

1740792382
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
something like /sys/bus/usb/devices/usb12/ /sys/bus/usb/devices/usb11/

1740792411
braewoods!~braewoods@user/braewoods
No, that's not correct? Those entries are for HUBs on my system.

1740792431
braewoods!~braewoods@user/braewoods
Earlier you said this...

1740792432
braewoods!~braewoods@user/braewoods
<stealth_> lsusb: "Bus 003 Device 003: ID 2022:0522 Љ Љ"

1740792441
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya

1740792449
braewoods!~braewoods@user/braewoods
Now that I think about it, how did you know this is the right USB device for your screen?

1740792474
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it found like 34 files that matched the idvendor search

1740792493
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cause thats the one the pyusb used 

1740792496
braewoods!~braewoods@user/braewoods
I'll write a quick script to help out. Moment.

1740792508
braewoods!~braewoods@user/braewoods
... I see.

1740792508
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
when written to it, the display does change. 

1740792544
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
someone else already created this in python so they must have figured it out already. 

1740792565
braewoods!~braewoods@user/braewoods
But that python example is just some generic example?

1740792592
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
let me see if i can find the actual script

1740792660
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is a fork of original but it has nvidia support https://github.com/teslar0ssa/antec_flux_pro_display_service/blob/feature/add-nvidia-gpu-temp-support/antec_display_service.py#L165-L166

1740792704
braewoods!~braewoods@user/braewoods
I see.

1740792722
braewoods!~braewoods@user/braewoods
This is raw USB most likely then.

1740792727
braewoods!~braewoods@user/braewoods
But let's confirm first.

1740792934
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i found the logs

1740792997
braewoods!~braewoods@user/braewoods
stealth_, https://dpaste.com/G9SA33WXK

1740793005
braewoods!~braewoods@user/braewoods
this should do the work.

1740793013
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://bpa.st/EATA

1740793053
braewoods!~braewoods@user/braewoods
Huh. If that's literally all it is, then it requires something like libusb.

1740793081
braewoods!~braewoods@user/braewoods
it's a C library but Zig likely has some kind of wrapper.

1740793189
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmmm what about the one i liked previously? 

1740793204
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/ZigEmbeddedGroup/serial/tree/master

1740793272
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, this is what your script output: "/sys/bus/usb/devices/3-10"

1740793313
torque!~tachyon@user/torque
you should be able to just find the device you want in `/dev/serial/by-id` on linux

1740793318
torque!~tachyon@user/torque
and that name will be stable

1740793325
torque!~tachyon@user/torque
usually has a serial number baked into it

1740793371
torque!~tachyon@user/torque
oh, uh, this is assuming the device is a serial device

1740793376
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is no /dev/serial folder on my linux, 

1740793389
torque!~tachyon@user/torque
yeah I guess it's not then

1740793399
braewoods!~braewoods@user/braewoods
stealth_, try using find on /sys/bus/usb/devices/3-10 then

1740793403
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
kernel 6.13.5-2-cachyos (64-bit)

1740793412
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
alright

1740793428
braewoods!~braewoods@user/braewoods
my script just reads the 2 files and prints any matches to the expected ones.

1740793442
torque!~tachyon@user/torque
anyway if you want to look it up by pid/vid, you could copy the pyserial code that does that

1740793447
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, ya t found the folder with stuff. 

1740793467
braewoods!~braewoods@user/braewoods
can you pastebin the list of files under it?

1740793481
torque!~tachyon@user/torque
I haven't mucked around with much stuff in sys but when I did to disable touchscreen input on a laptop, the device path was not consistent between reboots

1740793482
braewoods!~braewoods@user/braewoods
it'll tell you what kernel APIs you need to use to send / receive payloads.

1740793538
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
give me a sec, i have to install tree

1740793593
braewoods!~braewoods@user/braewoods
torque, in my experience writing userspace drivers for USB stuff... serial numbers are hit or miss. vendors don't use them consistently. it was often easier to rely on the bus and port values due to their consistency being independent of vendor choices.

1740793639
braewoods!~braewoods@user/braewoods
it's based on their physical connection to the system. it'll be consistent as long as they don't change the port in use.

1740793676
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, https://bpa.st/3T5A

1740793690
torque!~tachyon@user/torque
sounds like you know more than me on the topic

1740793744
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
good to learn these kind of stuff from someone with real hand experience ;) 

1740793752
braewoods!~braewoods@user/braewoods
maybe. it may be way more reliable for regular devices. just that a ton of cheap random stuff tends to not use serial numbers properly.

1740793753
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I got lucky :D

1740793793
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
wait this tee output is garbage. 

1740793817
braewoods!~braewoods@user/braewoods
There's nothing attached to the device other than generic USB stuff.

1740793826
braewoods!~braewoods@user/braewoods
No HID or serial.

1740793836
braewoods!~braewoods@user/braewoods
Yea, you have to use raw USB. libusb or its equivalent.

1740793858
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, this looks about right https://bpa.st/Z3IA

1740793928
braewoods!~braewoods@user/braewoods
stealth_, you have to use the correct kernel APIs. you can't use a serial library for this.

1740793956
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, o i c

1740793983
braewoods!~braewoods@user/braewoods
libusb is an abstraction library for platform specific raw USB stuff.

1740793997
braewoods!~braewoods@user/braewoods
It's essentially mandatory.

1740794013
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i do have it installed

1740794024
braewoods!~braewoods@user/braewoods
But how to use it from Zig is another matter.

1740794044
braewoods!~braewoods@user/braewoods
It's a C library as I said due to most kernel APIs being C APIs.

1740794046
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is stuff like this normally hard in zig? 

1740794078
braewoods!~braewoods@user/braewoods
No idea? You'd normally look for a wrapper or something that describes the C library API for Zig to use.

1740794094
torque!~tachyon@user/torque
low-level USB stuff is kind of annoying in most languages, I think

1740794097
braewoods!~braewoods@user/braewoods
The difficulty of accessing random C APIs is variable.

1740794127
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, that pyusb i was talking about.. its hooked into libusb.so as well. 

1740794131
braewoods!~braewoods@user/braewoods
Did someone else already do the work to make it available to X language? If so, it's likely a trivial matter.

1740794146
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i just looked at its source. it uses ctypes for the binding. 

1740794173
torque!~tachyon@user/torque
there are build wrappers for libusb for zig but idk about bindings

1740794202
braewoods!~braewoods@user/braewoods
Yea, you should ask someone more familiar with Zig. I'm more of a C developer.

1740794257
torque!~tachyon@user/torque
I built libusb into a zig project previously, but it was for a driver that was already written in c that I was just compiling into my zig program, so I wasn't trying to use libusb myself

1740794267
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am sure there is something already written for it.. i even found a C header wrapper for nvidia. this libusb is more important for people. 

1740794301
braewoods!~braewoods@user/braewoods
Interesting.

1740794322
braewoods!~braewoods@user/braewoods
stealth_, looks like your hardware is a trivial case, if this python example is all it supports...

1740794350
braewoods!~braewoods@user/braewoods
I thought it might be a more difficult situation where you needed a whole drawing library and theme engine.

1740794361
braewoods!~braewoods@user/braewoods
A lot of these displays are software controlled 100%.

1740794386
braewoods!~braewoods@user/braewoods
Instead it just takes some values to update the display apparently?

1740794403
braewoods!~braewoods@user/braewoods
If it supports more, the only way to know is to packet sniff the windows software.

1740794422
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, https://github.com/jaywonchung/nvml-zig

1740794453
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, goal was to learn how to do it in zig.

1740794510
braewoods!~braewoods@user/braewoods
stealth_, is this your first actual language?

1740794521
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
from what i can tell it just takes in bytes of couple of float type. 1 for cup an 1 for gpu. 

1740794531
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, no, i am pro in python :D

1740794555
braewoods!~braewoods@user/braewoods
So why not stick to python? Despite how slow it is, this isn't exactly a high performance task.

1740794596
braewoods!~braewoods@user/braewoods
It appears to just take some values, do some conversions, and format a string to feed to this device.

1740794613
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i want to learn a low level language. i been meaning to for a long time. i want to do low level hardware stuff.

1740794672
braewoods!~braewoods@user/braewoods
Plenty of "lower level" languages but... it can be a very different world. I've been using C as my primary language since 2008 or so.

1740794695
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
plus i am into async/io_uring stuff and zig seems to have really good library for io_uring

1740794752
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that awesome, i don't mind the C syntax but i really didn't want to deal with the weird stuff and knowing me i would blow out all the low level hardware i play around with, so need something safer and doesn't let me make stupid mistakes. 

1740794794
braewoods!~braewoods@user/braewoods
let me just say it right now. there's no such thing as a programming language that can prevent "stupid mistakes". it can only reduce them.

1740794816
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats good enough :D

1740794888
braewoods!~braewoods@user/braewoods
Part of why I stuck with C is how stable it is. It's a great foundation for long term code projects.

1740794910
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, thank you btw for helping me out with this usb stuff, what i learned today i am sure will come in handy.

1740794972
braewoods!~braewoods@user/braewoods
APIs can change in ways that may require major refactoring in the future. It's one reason I am wary of newer languages.

1740794987
braewoods!~braewoods@user/braewoods
Python has gone through this before.

1740794995
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I see. It has been around for ages so it must have many good things about it. Like always with time things change... you either change with the time or turn to dust. 

1740795013
braewoods!~braewoods@user/braewoods
Not all change is a good thing.

1740795074
braewoods!~braewoods@user/braewoods
But I've seen perfectly functioning software have to be discarded because it was deemed too much work to update it for modern APIs.

1740795099
braewoods!~braewoods@user/braewoods
RIP some of my favorite GTK1 and GTK2 programs.

1740795133
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
true, with zig I find that its true successor to C

1740795224
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I see. I have never coded those so cant tell much about it.

1740795375
braewoods!~braewoods@user/braewoods
Me either. I also did packaging work so I know a fair bit because of that.

1740795419
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o right packaging, now that must have been challenging...

1740795618
braewoods!~braewoods@user/braewoods
It wasn't that bad I thought? Certainly ARCH is easier to follow than the monstrosity that is Debian packaging.

1740795660
braewoods!~braewoods@user/braewoods
Unless that's the whole point? It varies with distribution.

1740795689
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
haha... aww i see. 

1740795715
braewoods!~braewoods@user/braewoods
ARCH's build system is just a bunch of shell scripts at the end of the day.

1740795729
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Have you checked out cachyos? I think they have got it wrong when it comes to distros.

1740795753
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
*they have got it right*

1740795761
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
my typing sometimes.. 

1740795776
braewoods!~braewoods@user/braewoods
No. I use Linux Mint primarily. I haven't touched ARCH in years.

1740795778
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://cachyos.org/

1740795842
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nice, I started off using Linux mint, then used Manjaro because I was working on liburing/io_uring stuff and wanted to test out the new features being added. Now I am using Cachy. Totally worth it.

1740795887
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I really do like mint though, too bad they didn't move over to rolling release! they had a real chance and they said no.

1740795946
braewoods!~braewoods@user/braewoods
stealth_, you do realize rolling release isn't for everyone?

1740795955
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
with build.zig is there a way to pass LDFLAGS/LDLIBS like you would in a makefile for c

1740795982
braewoods!~braewoods@user/braewoods
it's fine if you want to go with it, but it has its own risks being on less tested software.

1740796021
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, I thought so, but then changed my mind :), even if I run a server I might use the rolling release and have it load balance between update.

1740796049
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you should give it a try, https://cachyos.org/ see for yourself. 

1740796066
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
like the equivalent of -L/foo and -lfoo to gcc. how do I do that in zig

1740796097
braewoods!~braewoods@user/braewoods
slondr, you can try using environment variables but that's for everything.

1740796116
braewoods!~braewoods@user/braewoods
stealth_, i manage a bunch of PCs for people less technical than myself. that's why i'm using it really. i've adapted my needs to fit the distribution.

1740796187
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
braewoods, makes sense. I used mint on my mom's computer and just switched over to cachy if not I would have had to build her a new system.

1740796243
braewoods!~braewoods@user/braewoods
stealth_, though i admit it feels kinda weird to use LM on my workstation rig, a ryzen 7 5750G with 64GB of ECC RAM. @_@

1740796252
braewoods!~braewoods@user/braewoods
I can run VMs and containers with ease.

1740796330
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nice... i switched over to Linux a long time ago, totally worth it. I do have win for gaming but other than that its still slow as hell.

1740796387
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
Maybe `linkSystemLibrary`?

1740796400
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
But I think I'm missing the equivalent of LFLAGS

1740796481
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
slondr, you trying to include libc by any change? 

1740796560
torque!~tachyon@user/torque
you would probably need to make an option that takes a string argument

1740796569
torque!~tachyon@user/torque
you could name it whatever you want

1740796590
torque!~tachyon@user/torque
but the zig build system itself does not have special concessions for C concepts like LDFLAGS

1740796599
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
stealth_ no I already do that, I'm trying to link a different C library

1740796626
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
which is not in the system search path but I know the directory

1740796651
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
It looks like there is a "search prefix" option to the zig command-line utility? which is not quite what I want

1740796669
torque!~tachyon@user/torque
see https://ziglang.org/documentation/master/std/#std.Build.option

1740796692
torque!~tachyon@user/torque
this lets you add command-line parameters to `zig build` in your build.zig

1740796763
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i noticed earlier when you are including C library you have to build it with build.zig, can't just run it, give weird errors.

1740796806
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, is there anything like libusb for zig? 

1740796807
braewoods!~braewoods@user/braewoods
... So you can't just link to the system library? @_@

1740796853
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I had included some .h maybe I am wrong, but that's what it seemed like. 

1740796987
torque!~tachyon@user/torque
slondr looking at this maybe you want https://ziglang.org/documentation/master/std/#std.Build.Module.addLibraryPath though embedding stuff about your own filesystem into the build process is obviously nonportable

1740797039
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
oh was addLibPath renamed to addLibraryPath? I see a lot of references to the former on the internet but it doesn't seem to exist

1740797193
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
addLibraryPath doesn't seem to like absolute paths

1740797673
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
found this https://github.com/ssttevee/zig-libusb

1740797712
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
ok ok so constructing a LazyPath with an absolute path and passing that to addLibraryPath may have worked

1740797852
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
Never mind it did not work, it compiles but crashed on execution saying it can't find the library 

1740798001
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
slondr, maybe this this build file a look for reference https://github.com/jaywonchung/nvml-zig/blob/master/build.zig

1740798110
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
oh it actually did work I just forgot to un-comment-out the line in my build.zig lol

1740798144
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cheers 

1740799609
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Super Good Zig Tutorials https://www.youtube.com/@Code-Guild 

1740803845
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
ok how can I convert a [*:0]const u8 to a [*c]u8

1740804614
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
Actually, shouldn't zig be translating it for me...

1740804659
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
I think I'm hitting this problem, which was supposedly fixed years ago: https://github.com/ziglang/zig/issues/9126

1740804812
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
slondr, do you have a code snipped I can try out? 

1740804818
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
snippet *

1740804930
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
Hmm not easily, but I think this would reproduce trying to pass any zig string literal to a cImport'd C function that takes a `char *`

1740804936
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
notably not a `const char *`

1740805067
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
slondr, just try to reproduce a simple function to see if what you are trying to do even works in zig before trying to play with C imported function

1740805106
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
well the thing is what I am trying to do is call a C imported function

1740805116
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
that's the part that isn't working

1740805204
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
Hmm ok it worked when I constCast and ptrCast'd the string literal

1740805246
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm.. well keep at it, your will figure it out ;)

1740805322
slondr!cf9f9e8f44@2a03:6000:1812:100::10b6
very odd imo that code in translate-c added in Zig 0.9 seems like it should have handled it for me. but oh well I'm unblocked now

1740806001
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure what you were trying to do, wrote this up https://bpa.st/7P4A

1740807699
mountaingoat!~mountaing@user/mountaingoat
is there a SYCL for 2025?

1740811102
LAC-Tech!~lewis@granite-phrase.bnr.la
don't suppose there's some hacky way to run code on a panic, is there? (my terminal ends up in a messed up state due to being stuck in raw mode. (failing this, I'll make my own hacky assert functions/unreachables that return an err code, I guess).

1740815916
torque!~tachyon@user/torque
you can override the default panic handler

1740815930
torque!~tachyon@user/torque
this is what libvaxis does for cleaning up the terminal state on panic

1740817891
LAC-Tech!~lewis@granite-phrase.bnr.la
I did not know that

1740820826
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm trying to convert this waf build to zig build: https://github.com/Stazed/ntk-unofficial/blob/master/wscript

1740820869
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
conf.check_cfg(package='x11', uselib_store='X11', args="--cflags --libs", mandatory=True)

1740820905
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
lib.linkSystemLibrary("x11");

1740821022
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
conf.check(header_name='unistd.h', define_name='HAVE_UNISTD_H', mandatory=False)

1740821033
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Not sure how to do that in zig

1740866668
blurrycat!~blurrycat@user/blurrycat
mountaingoat: asked Loris on a stream this week and he said likely not this year no

1740870620
blurrycat!~blurrycat@user/blurrycat
I'm parsing a .zon file into a struct that has some []const u8 fields with default values. 

1740870693
blurrycat!~blurrycat@user/blurrycat
(sorry pressed enter by mistake) Calling std.zon.parse.free(alloc, mystruct); segfaults when using default values, so I'm wondering if I can selectively free the values there

1740870717
blurrycat!~blurrycat@user/blurrycat
(and I do understand why freeing those values segfaults, I'm just not exactly clear on how to avoid that here)

1740870776
blurrycat!~blurrycat@user/blurrycat
(For context this is used to load a config file at runtime and populate with default values if they are not specified by the user or if no config file is found)

1740870883
blurrycat!~blurrycat@user/blurrycat
Or should I make a `ZonConfig` struct that has all its fields as optionals and then have my actual `Config` struct only reference the slices in that `ZonConfig`, then only free the populated fields in `ZonConfig` instead of `Config`?

1740870894
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
you could default them to nothing and pass the parsed struct to a validate function?

1740870913
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
which then sets the strings if needed (with allocated strings, which is a bit annoying)

1740870922
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
but then they could be freed without the segfault

1740870948
blurrycat!~blurrycat@user/blurrycat
Yeah I guess allocating everything could be a solution but I would rather prefer not too if possible, startup time is kinda important in my case :/

1740871177
blurrycat!~blurrycat@user/blurrycat
But then again my program is short lived so I could just no care about deallocating anything and let the OS cleanup on exit

1740871346
blurrycat!~blurrycat@user/blurrycat
Or I guess I could use an arena for the config and free the arena at the end which would do what I wanted in the first place, I'll see.

1740871517
blurrycat!~blurrycat@user/blurrycat
Yes this seems to be working fine, GPA doesn't seem to complain about leaks. o/

1740872263
mountaingoat!~mountaing@user/mountaingoat
blurrycat: thanks

