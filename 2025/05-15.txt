1747293671
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
I'm not fond of boilerplate so I always were macro-heavy coder (which also made me stop liking rust), but zig's comptime is something truly amazing (even though on surface level it's similar to many lisps)

1747296774
triallax!f378378b91@lacerte/triallax
xlii: i don't know many lisps beyond like clojure and a little bit of scheme, but even on the surface level i don't really think they're too similar

1747296792
triallax!f378378b91@lacerte/triallax
zig's comptime is probably closest to c++ templates

1747298058
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
So Clojure I believe is on the lighter side, but there are few that differentiate execution phases (especially those which are partially/completely compilable). Fennel is a very good example, but Janet has the same. In others (e.g. CL, elisp) you need to mentally track execution time to not have the effects during execution time.

1747298191
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
Outside of Lisps, Elixir has also very clear separation of phases, but I'm highly critical about it - I feel about it like I felt about PHP long time ago: all the training wheels, no bike.

1747300381
triallax!f378378b91@lacerte/triallax
i was talking less about that and more about the high-level idea of macros vs. comptime i suppose

1747300395
triallax!f378378b91@lacerte/triallax
because they're fundamentally different thing

1747301271
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
how?

1747301407
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
unless there's something I didn't grok, comptime is a phase potentially linked with partial compilation, I don't see it any different from Go's (non-trivial, like wire) generators

1747301459
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
probably if I'd use Go's Jennifer (https://github.com/dave/jennifer) and squint hard enough I could call it comptime too :P

1747301469
triallax!f378378b91@lacerte/triallax
that's not macros though

1747301540
triallax!f378378b91@lacerte/triallax
macros involve manipulating some code into another bit of code

1747301561
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
IMO that might be about macro definition itself.

1747301623
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
Because many languages call macros things that aren't necessarily macros but phase-specific code generation and not something like M4.

1747301650
triallax!f378378b91@lacerte/triallax
sure, i'm talking about macros in the context of lisps

1747301658
triallax!f378378b91@lacerte/triallax
and rust

1747301662
triallax!f378378b91@lacerte/triallax
which was what was brought up initially

1747301711
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
Yeah, so in Lisp you have 2 stages of executions. I've seen two types of macro unwinding: on use and on call.

1747301779
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
Fennel has on use, Emacs' elisp has it controllable by file-local marker, can't remember what Clojure does though

1747301934
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
Clojure has on use (during compilation). And yet Zig's comptime is different because it's much more consistent with non-comptime code.

1747302028
triallax!f378378b91@lacerte/triallax
i think we're just talking about different things here

1747302132
triallax!f378378b91@lacerte/triallax
i only meant that zig's comptime can't do syntactic transformations and such like macros can

1747302181
lemons!~doggie@user/doggie-:49517
triallax: technically yeah it can, just pass it a comptime string

1747302198
triallax!f378378b91@lacerte/triallax
but then it's not operating on the ast directly :)

1747302205
triallax!f378378b91@lacerte/triallax
but of course you can do that yes

1747302321
triallax!f378378b91@lacerte/triallax
well i suppose it doesn't have to be the ast, i think in rust you can have macros operating on tokens

1747302393
lemons!~doggie@user/doggie-:49517
i do wonder, it wont happen because hidden control flow/only one way to do things/whatever i forgor but IF zig did have macros, what other arguments would rust still have going for it

1747302426
lemons!~doggie@user/doggie-:49517
memory safety sure but i doubt many care for it to that extent

1747302469
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
it's not about memory safety, it's about hollow productivity and implied logic safety

1747302504
lemons!~doggie@user/doggie-:49517
xlii: hollow productivity?

1747302507
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
it's funny but many times the topic comes in, people inflate code quality with "safe" whereas "safe" is only about memory safe, ergo marketing

1747302531
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
yeah, that's something I noticed many moons ago, Rust is awfully unproductive language, but then it feels productive

1747302541
triallax!f378378b91@lacerte/triallax
i have not written much rust but i admit oftentimes it feels like a drag managing memory in zig

1747302555
triallax!f378378b91@lacerte/triallax
i'm planning on using rust for my next project and seeing how it fares

1747302581
lemons!~doggie@user/doggie-:49517
xlii: oh i thought you're defending rust 

1747302590
lemons!~doggie@user/doggie-:49517
aig makes sense then

1747302599
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
you figure out at some point that you need to add data into your flow which changes all the interfaces, you cannot really do this automatically because sometimes you copy sometimes you borrow

1747302636
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
and there's this "I spent 2 days to implement this, look at all that code", but it's only between Rust compiler and the code, there's no value added

1747302735
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
I had opportunity to oversee Rust monorepo. I've noticed that there were ~800 Currency definitions, some were strings, some were unicode, some were more complex - took 3 weeks to get to a "single definition that compiles"

1747302888
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
so yeah, I'd rather zig (and go, go is nice, too)

1747303046
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
triallax: wait till you get into armwrestle with borrow checker

1747303072
triallax!f378378b91@lacerte/triallax
i've worked with a rust project already so i have a rough idea

1747303078
triallax!f378378b91@lacerte/triallax
but i've not done _too_ much

1747303102
triallax!f378378b91@lacerte/triallax
i'm more proficient at zig now i'd say

1747303116
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
it's all about project size, on small scale everything is viable, 1 person project, small codebase etc.

1747303120
triallax!f378378b91@lacerte/triallax
after using it in a small but not trivial side project

1747303318
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
start was harsh for me too, IMO documentation is lacking in some areas

1747303373
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
getting zon dependency in the module took me 3 hours of search for the first time :|

1747303388
triallax!f378378b91@lacerte/triallax
oh hah, that's unfortunate

1747303397
triallax!f378378b91@lacerte/triallax
i think there are a bunch of papercuts i'm facing

1747303408
triallax!f378378b91@lacerte/triallax
one of them being some things in the stdlib being a little too limited

1747303430
triallax!f378378b91@lacerte/triallax
for instance, i'm going to have to rewrite some code using std.process.Child because i can't pass in my own fds for io

1747303483
triallax!f378378b91@lacerte/triallax
having to rerun zig build after fixing a couple errors to see new ones is another

1747303502
triallax!f378378b91@lacerte/triallax
wouldn't have been as bad if zls showed more errors

1747303520
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
Are you using "check" step?

1747303532
triallax!f378378b91@lacerte/triallax
what's that?

1747303548
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
so, zls will use "zig build" if it won't find "zig build check"

1747303593
triallax!f378378b91@lacerte/triallax
https://zigtools.org/zls/guides/build-on-save/

1747303594
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
since some code can be comptime (like tests) this code won't be checked for errors, if you create check code it will show you exact errors you are experiencing 

1747303599
triallax!f378378b91@lacerte/triallax
okay i'm definitely trying this

1747303605
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
let me show you some code

1747303689
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
https://zigbin.io/125be7

1747303778
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
so that's what I use, but you can have more if you want - on one distraction I'm running system external utility and has some zls errors appear from that

1747303839
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
oh, and another thing - zls starts persistent watch/compile process - if you add new module or file you need to restart it

1747304229
triallax!f378378b91@lacerte/triallax
i got it working

1747304241
triallax!f378378b91@lacerte/triallax
it's beter than nothing, but it still has the same problem with not showing all errors at once

1747305301
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
I'd look into step setup, because if you have a A->B->C->Check process you won't see B,C errors if A fails.

1747326652
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
how to get rid of the `runtime value contains reference to comptime var` here?  https://bpa.st/26BAA   the resulting Model is being used as  `comptime model: Model` elsewhere

1747326813
Gliptic!~glip@2a01:4f8:c012:91f3::1
netvor: 404

1747326839
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
https://bpa.st/26BA  sorry i added extraA :)

1747326944
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
i think i did sommething similar elsewhere and just copying to a const like `const final_alts = alts;` (where alts was a similar array var) was enough

1747326990
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
but i can't wrap my head around it .. isn't the returning statement equivalent ..?

1747327025
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
(hmmm... come to think about it, no .. i think i might be answering my own question )

1747327052
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
(also what i did there was i returned `&final_alts`)

1747327433
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
ok so `replacing the `break :b buf[0..len]` with `const final_buf = buf; break :b final_buf[0..len];` helped, but i do feel it's still a bit verbose

1747328356
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
ok, so in the code I see that header_specs is comptime and you're using it to create slice-const slice

1747328491
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
yep, it's a utility func to help define Model properly

1747328508
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
also buf is only available in inner scope, so what you get is addressing straight to comptime header_specs

1747328553
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
well i'm addressing into an anonymous stack, right?  (stack of the anonymous block)

1747328566
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
when you create `const final_buf` you're ensuring memory on the stack, that's why (I believe it works)

1747328581
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
yeah, but when stack ends then... ;-) 

1747328598
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
`var buf..` is already on the (same) stack

1747328610
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
yeah, more i think about it it should not work :D

1747328685
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
even with final_buff .. i'm still just passing out pointer to stack.  feels "dirty".  it ends up working "only" because i only use this at comptime

1747328698
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
that's if i understand correctly

1747328714
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
with the end of the scope buf is dropped from the stack, however it's still possible to address original comptime but its in comptime only

1747328810
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
as far as I know (feel free to correct me when I'm wrong) stack ownership is on the topmost user, so that's not that bad

1747328811
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
my understanding is, sure, all the .name's in the `header_specs` are guarranteed to live "forever" but the buf itself is not, yet it somehow "magically" becomes ok, since 

1747328822
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
...since i only use it in comptime

1747328851
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
probably it depends on ModelHeaderSpec definition

1747328868
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
because structure might exist in comptime, but fields aren't guaranteed to be comptime

1747328920
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
ModelHeaderSpec is just `struct { required: bool, primary_key: bool, name: []const u8}`

1747328929
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
ok, so name is NOT comptime

1747328947
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
i don't think comptime can be a field-specific thing

1747328962
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
it's not even property of a type

1747328973
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
the struct is just a struct

1747329069
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
but nevermind, it's not a big deal, i was kinda hoping to see how a seasoned Zig developer would write such code, since i feel it's rather common thing so there could be a less verbose way

1747329130
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
struct yeah, but it's about if the value is going to be available or not

1747329210
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
you can't have only part of the struct available, right? it's all or nothing  (save for `undefined`, of course)

1747329212
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
there's nothing that guarantees that this field will be available

1747329256
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
if you mean there's nothing that guarrantees that the pointer in that field will be valid, then yes

1747329309
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
let me try to pull this code in some sandbox, I want to check something

1747329370
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
sure... i'm pretty sure it can be minimalized.   it's just in this particular case i'm doing almost the same thing 3 times, so it illustrates how "finnicky" it feels :)

1747329564
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
IDK, smart complexity < simple repetition

1747329699
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
i do agree to that

1747329711
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
https://zigbin.io/346bdf

1747329776
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
so I added comptime keyword and it compiles (had to backfill) - its explicit way of saying "those bytes will exist and we can refer to them" 

1747329835
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
well i didn't think `comptime` exists for field names, i guess i was wrong

1747329943
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
but i still don't see how this has much to do with the .name.  the message i posted was about returning ref to a non-const thing, which was `buf` not its values

1747329968
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
you can have comptime code marker, I was wondering if it gets embedded in final code if it's non effectful (was thinking about doing some extra compile time checks) 

1747330029
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
well sure for this case setting name to "" does not make much sense, so i wonder what are the real use cases (ok, i don't need to wonder i can see the docs :))

1747330177
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
think about what created memory blocks and it should be clearer

1747330246
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
this is []const u8, so this is fat-pointer to some memory, how can you guarantee that it will exist? 

1747330328
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
generally i can't, but if it's a string literal then compiler can guarrantee it.  iow, in some contexts it's guarranteed

1747330331
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
in runime, you need to have some address and attach it to the struct, but when you're compiling things are't that simple

1747330376
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
this guarantees that some pointer will always exist

1747330451
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
tbh i kinda lost the thread here...

1747330453
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
I understand comptime as in promise that "the value is ALWAYS known at the compilation time"

1747330522
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
if you don't set the default value then it might not be known 

1747332359
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
can i mute std.log.err() logging speicfically in test?  i want to test a case where my function returns an error but also logs using std.log.err(),  but the presence of something in stderr fails the test

1747332434
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
log scopes?

1747332547
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
that'd be my first idea - I _think_ you could have a comptime switch

1747333173
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
builtin.is_test

1747333545
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
IIUC that would still require me to specify std_options or add if's everywhere i call log?

1747333594
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
(btw i don't work for Volkswagen :D)

1747334386
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
I didn't get very deep into logging scopes setup but I think those can be configured in build.zig and scopes are disabled by default.

1747334413
xlii!~xlii@83.9.204.7.ipv4.supernova.orange.pl
So if you use scope - nothing will be logged unless you define them. It's a good practice anyway, because often you don't want to have vomit log.

1747334808
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
seems like a rabbit hole for another day..  so far, i guess i'll stick with wrapping std.log.err in a local fn that checks builtin.is_test

1747334884
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
it's not a library i'm writing (at least not yet), so logging is not a big deal

1747335054
netvor!~netvor@2a00:ca8:a1f:cd0:d932:13a6:64c5:552c
the irony is that i do tend to use std.log.warn a lot in tests when printf-debugging :D

1747335276
grayhatter!~grayhatte@user/grayhatter
netvor: no, the only place `std_options` is read is root.zig

1747335290
grayhatter!~grayhatte@user/grayhatter
or main.zig, or whatever your entry file is named

