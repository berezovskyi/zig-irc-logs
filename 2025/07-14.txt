1752451432
mountaingoat!~mountaing@user/mountaingoat
this function coloring business is just unproductive pendantic stubbornness. people should be celebrating a solution that achieves flexible IO WHILE removing language keywords. my only concern is how big the Io interface maay potentially grow

1752452234
Profpatsch!~Profpatsc@user/Profpatsch
andrewrk: Ah, and I guess for testing you will use a pre-built compatible --release=fast build of the compiler to build a debug executable? i.e. not rebuild the compiler in release mode every time

1752452424
rvrb!~rvrb@156.146.51.228
ok, I'm not sure if this adds anything to the discussion, but I got it out of my system. https://tristanpemble.com/the-color-doesnt-matter/

1752454998
LAC-Tech!~lewis@granite-phrase.bnr.la
rvrb: there's a few browser extensions that can block sites or limit you to a certain number of minutes per day. i used it to cure my reddit addiction, might work for HN :)

1752456346
kenrap!~kenrap@user/kenrap
how do I share the same C imports between files?

1752456630
kenrap!~kenrap@user/kenrap
Nvm, rubberduck'd it.

1752460627
lf94!~lf94@user/lf94
I have no idea what to change in my current zig code x_x

1752460667
lf94!~lf94@user/lf94
in other news good job on making IO just like how Haskell does it :D

1752462629
torque!~tachyon@user/torque
if you have nothing to change it sounds like it's perfect. congraturaisins

1752465721
andrewrk!~andrewrk@mail.ziglang.org
rvrb: aha so you are Tristan Pemble!

1752466474
andrewrk!~andrewrk@mail.ziglang.org
lf94: doesn't haskell basically make you return a value that requests I/O operations? point being it's actually pure functions

1752466485
andrewrk!~andrewrk@mail.ziglang.org
this is not a monad, this is just an interface

1752467195
rvrb!~rvrb@156.146.51.228
hah, yes that's me

1752468153
rvrb!~rvrb@156.146.51.228
I probably would have used my real name but I've had this one on here for a while now

1752473550
grayhatter!~grayhatte@user/grayhatter
ifreund: does your zig-wayland-scanner binary compile and execute every build, or does it cache the output?

1752475813
ifreund!2940d10f8b@user/ifreund
grayhatter: it's all properly cacheed

1752475843
grayhatter!~grayhatte@user/grayhatter
ditto when using `-fincremental`?

1752475849
ifreund!2940d10f8b@user/ifreund
haven't tried

1752475925
grayhatter!~grayhatte@user/grayhatter
hmmm, ok, thank you! :)

1752475938
ifreund!2940d10f8b@user/ifreund
no problem :)

1752493704
Profpatsch!~Profpatsc@user/Profpatsch
I did a naive build of zig, but when trying to recompile with the naive one, I get: /home/philip/kot/zig/zig/doc/langref/verbose_cimport_flag.zig:1:11: error: C import unavailable; Zig compiler built without LLVM extensions

1752493727
Profpatsch!~Profpatsc@user/Profpatsch
So I need to pass some flags and recompile? Which flags are those exactly? -Duse-llvm?

1752493760
Profpatsch!~Profpatsc@user/Profpatsch
Maybe I can disable all tests? But I only see flags for selectively disabling some

1752493816
Profpatsch!~Profpatsc@user/Profpatsch
I tried -Dtests-filter= but that seems to be a no-op

1752493978
Profpatsch!~Profpatsc@user/Profpatsch
I’m trying this now: zig build -Dtest-filter=NONEXISTENT -Dtest-target-filter=NONEXISTENT -Denable-llvm=true -Duse-llvm=true -Dstatic-llvm=true

1752494035
Profpatsch!~Profpatsc@user/Profpatsch
Can I disable doctests somehow?

1752494489
ifreund!2940d10f8b@user/ifreund
Profpatsch: -Dno-langref iirc

1752494539
ifreund!2940d10f8b@user/ifreund
also you only need -Denable-llvm to build a compiler with LLVM extensions

1752494553
ifreund!2940d10f8b@user/ifreund
see zig build --help

1752494610
Profpatsch!~Profpatsc@user/Profpatsch
ifreund: yes but I need llvm extensions to build zig, no?

1752494617
Profpatsch!~Profpatsc@user/Profpatsch
Otherwise the C import does not work

1752494621
Profpatsch!~Profpatsc@user/Profpatsch
>  ld.lld: undefined symbol: std::__throw_system_error(int)

1752494623
Profpatsch!~Profpatsc@user/Profpatsch
hmmm

1752494728
ifreund!2940d10f8b@user/ifreund
perhaps this page is useful to you as well: https://github.com/ziglang/zig/wiki/Contributing

1752494829
Profpatsch!~Profpatsc@user/Profpatsch
Ah, I was only reading README.md

1752494901
ifreund!2940d10f8b@user/ifreund
that page is linked from the readme :)

1752494942
Profpatsch!~Profpatsc@user/Profpatsch
well, skimming, as one does :)

1752495424
Profpatsch!~Profpatsc@user/Profpatsch
Is there common cache invalidation problems when switching build options? Which cache directories should I delete?

1752495460
ifreund!2940d10f8b@user/ifreund
no

1752495469
Profpatsch!~Profpatsc@user/Profpatsch
I’m getting errors like

1752495471
Profpatsch!~Profpatsc@user/Profpatsch
error: undefined symbol: _ZSt25__throw_bad_function_callv

1752495473
Profpatsch!~Profpatsc@user/Profpatsch
    note: referenced by /nix/store/igxg4cq4sb90y2qi9n53cdcbf54mnxz8-clang-20.1.6-lib/lib/libclangCodeGen.a

1752495486
Profpatsch!~Profpatsc@user/Profpatsch
Which looks to me like clang wants to link against static libc++?

1752495498
Profpatsch!~Profpatsc@user/Profpatsch
But I said Dstatic-llvm=false

1752495504
ifreund!2940d10f8b@user/ifreund
unless you are hacking on the compiler caching code the cache should be pretty reliable

1752495530
Profpatsch!~Profpatsc@user/Profpatsch
the zig build-exe command contains -DLLVM_BUILD_STATIC

1752495565
ifreund!2940d10f8b@user/ifreund
If you really want to wipe cache there are two caches: ./zig-cache and ~/.cache/zig (modified by some XDG_ env var)

1752495605
ifreund!2940d10f8b@user/ifreund
Profpatsch: are you using cmake? that's a different story

1752495610
Profpatsch!~Profpatsc@user/Profpatsch
No, I’m using zig

1752495625
Profpatsch!~Profpatsc@user/Profpatsch
I’m using a nightly binary from ~3 days ago

1752495634
Profpatsch!~Profpatsc@user/Profpatsch
with zig build -Dtest-filter=NONEXISTENT -Dtest-target-filter=NONEXISTENT -Denable-llvm=true -Dstatic-llvm=false

1752495642
Profpatsch!~Profpatsc@user/Profpatsch
(in the zig source dir)

1752495657
Profpatsch!~Profpatsc@user/Profpatsch
Maybe the build script was cached and not properly invalidated

1752495684
ifreund!2940d10f8b@user/ifreund
note also that static-llvm does not necessarily mean static clang or lld

1752495694
ifreund!2940d10f8b@user/ifreund
there are 3 separate libraries

1752495746
ifreund!2940d10f8b@user/ifreund
I don't know if there's any nix specific stuff required, I don't use nix myself

1752495796
Profpatsch!~Profpatsc@user/Profpatsch
Oh you know why? I didn’t pass -Dconfig_h and that means it adds the static flags to the llvm build

1752496551
Profpatsch!~Profpatsc@user/Profpatsch
Okay, that gets me from 250 to 100 linking errors. 

1752496564
Profpatsch!~Profpatsc@user/Profpatsch
I think the remaining ones have something to do with me using the wrong libstdc++

1752497988
ifreund!2940d10f8b@user/ifreund
Profpatsch: if you follow the instructions on the wiki for build zig word for word you should have no problems really...

1752502537
Profpatsch!~Profpatsc@user/Profpatsch
Okay, I basically restarted the bootstrap, and now I’m getting the same errors during stage3 build

1752502542
Profpatsch!~Profpatsc@user/Profpatsch
cd /home/philip/kot/zig/zig && /home/philip/kot/zig/zig/build/zig2 build --prefix /home/philip/kot/zig/zig/build/stage3 --zig-lib-dir /home/philip/kot/zig/zig/lib -Dversion-string=0.15.0-dev.936+fc2c1883b -Dtarget=native -Dcpu=native -Denable-llvm -Dconfig_h=/home/philip/kot/zig/zig/build/config.h -Dno-langref -Doptimize=Debug

1752502551
Profpatsch!~Profpatsc@user/Profpatsch
error: undefined symbol: _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc

1752502553
Profpatsch!~Profpatsc@user/Profpatsch
    note: referenced by /home/philip/kot/zig/zig/build/zigcpp/libzigcpp.a(zig_llvm.cpp.o):.text

1752502738
Profpatsch!~Profpatsc@user/Profpatsch
Question: I have just figured out that libstdc++ (gcc) !== libc++ (clang) ((wtf)); is it okay/required to build against the gcc libstdc++? Because I tried using an environment that’s as much “llvm” as possible (no references to gcc in any env, no global library paths)

1752502809
bblack!~bblack@wikimedia/bblack-WMF
stdc++ is not very std :)

1752502882
Profpatsch!~Profpatsc@user/Profpatsch
bblack: what do you mean?

1752502885
ifreund!2940d10f8b@user/ifreund
Profpatsch: both should work, but everything you link must be built against the same version of the same one

1752502901
Profpatsch!~Profpatsc@user/Profpatsch
(I’m not a c++ person, so I’m discovering this stuff as I go sorry for the noise)

1752502941
Profpatsch!~Profpatsc@user/Profpatsch
ifreund: yes, I am suspecting that things are building against one and linking against the other, so I guess I’ll try and strace the build next

1752503013
Profpatsch!~Profpatsc@user/Profpatsch
I saw that the config.h script that was autogenerated had set ZIG_SYSTEM_LIBCXX to "stdc++", so I replaced that with "c++" and am currently rebuilding stage3

1752503502
Profpatsch!~Profpatsc@user/Profpatsch
Oh, i think I figured it out; the llvm I’m using was built against gcc libstdc++, so I’ll have to do that as well … quite obvious once you think about it :P

1752506331
triallax!~triallax@lacerte/triallax
Profpatsch: hey, fancy seeing you here :)

1752508675
Profpatsch!~Profpatsc@user/Profpatsch
:)

1752511977
sskras!sid542048@id-542048.tinside.irccloud.com
hello chan

1752512021
sskras!sid542048@id-542048.tinside.irccloud.com
https://despairlabs.com/blog/posts/2025-07-10-an-openzfs-bug-and-the-humans-that-made-it/

1752512024
sskras!sid542048@id-542048.tinside.irccloud.com
(not to generate the flame, just the curiosity

1752512044
sskras!sid542048@id-542048.tinside.irccloud.com
would Zig catch the thinko?

1752512141
Gliptic!~glip@2a01:4f8:c012:91f3::1
how could it?

1752512177
sskras!sid542048@id-542048.tinside.irccloud.com
ah, I see now

1752512179
Gliptic!~glip@2a01:4f8:c012:91f3::1
I guess in theory it could see that the final value of psize isn't used

1752512191
Gliptic!~glip@2a01:4f8:c012:91f3::1
but that's not something it errors on now

1752512273
sskras!sid542048@id-542048.tinside.irccloud.com
both types are uint64_t, so the answer is clear to me now

1752512276
sskras!sid542048@id-542048.tinside.irccloud.com
Gliptic: thanks for the summary 

1752512312
Gliptic!~glip@2a01:4f8:c012:91f3::1
something like the rust solution could work in zig too

1752513152
sskras!sid542048@id-542048.tinside.irccloud.com
cool, I realized this too upon getting back to definition of asize and the return value

1752513204
andrewrk!~andrewrk@mail.ziglang.org
sskras: pure speculation, but I think a more idiomatic zig style would be not using variables, which tends to make this kind of thinko less likely

1752513221
andrewrk!~andrewrk@mail.ziglang.org
also https://ziglang.org/devlog/2024/#2024-11-04

1752513712
sskras!sid542048@id-542048.tinside.irccloud.com
andrewrk: thanks for the tip

1752514294
sskras!sid542048@id-542048.tinside.irccloud.com
BTW, would it be feasible to add a warning about the final value of a var being left unused?

1752514305
sskras!sid542048@id-542048.tinside.irccloud.com
I guess in many cases at compile time it's hard to know whether the var is going to be used past a specific point point.

1752515565
andrewrk!~andrewrk@mail.ziglang.org
that's why you should use const

1752515573
andrewrk!~andrewrk@mail.ziglang.org
actually that's a great point, unused variable might have caught this one

1752519653
andrewrk!~andrewrk@mail.ziglang.org
sskras: https://andrewkelley.me/post/openzfs-bug-ported-zig.html

1752520341
sskras!sid542048@id-542048.tinside.irccloud.com
oh!

1752520671
sskras!sid542048@id-542048.tinside.irccloud.com
andrewrk: thanks, that's impressive

1752521055
rvrb!~rvrb@156.146.51.228
I lol'd; > I couldn't do it before getting bored, so I ported the code to Zig instead

1752521153
andrewrk!~andrewrk@mail.ziglang.org
only took about 5 seconds for that to happen :P

1752521452
rvrb!~rvrb@156.146.51.228
at first I was thinking it was slightly disingenuous since the C programmer would have done `var`; but the flipside of that is if they had declared all of those as var, they would have gotten yelled at about unnecessary `var` and then `cols` would suddenly stick out as peculiar

1752521528
andrewrk!~andrewrk@mail.ziglang.org
yeah, I feel that I'm justified with this port because I've stuck to my guns despite all the haters hatin 

1752521611
rvrb!~rvrb@156.146.51.228
I mean, it is impressive how much vitriol the unused variable error creates

1752521637
rvrb!~rvrb@156.146.51.228
this is a great example of why

1752521654
rvrb!~rvrb@156.146.51.228
(why it is a good choice)

1752521802
andrewrk!~andrewrk@mail.ziglang.org
yeah tbh I don't care two shits about someone's rough prototype. I care about established projects not being buggy, and being able to survive major reworkings intact

1752522252
bblack!~bblack@wikimedia/bblack-WMF
FWIW, I love the unused const and unmutated var errors

1752522295
rvrb!~rvrb@156.146.51.228
I wrote a blog post earlier this year I never published because it seemed like it added nothing to discourse and just stoked language wars. but part of why I am so enamored with Zig at the moment is the level of respect it lends me, yet at the same time, maintains conviction when I am definitely fucking something up.

1752522314
rvrb!~rvrb@156.146.51.228
in the unused var case; the developer being lazy.

1752522320
rvrb!~rvrb@156.146.51.228
 pretty much every time I'm like fuck you let me do it, I look into it and realize I was wrong

1752522405
rvrb!~rvrb@156.146.51.228
so I think people getting upset about it feel like the check is like, disrespecting their agency or whatever, but the language is just saying "trust me, this is a huge source of bugs"

1752522553
andrewrk!~andrewrk@mail.ziglang.org
the way I see it, it's more about respecting your collaborators (including your future self)

1752522567
andrewrk!~andrewrk@mail.ziglang.org
I simply never want to look at zig code and wonder whether a variable is used or not

1752522618
rvrb!~rvrb@156.146.51.228
yeah that makes sense, it does lift an unnecessary mental burden of understanding code

1752528206
andrewrk!~andrewrk@mail.ziglang.org
ifreund: every month or so I wake up, and think, "crap! I still haven't solved the global decls referencing each other problem yet" and then I remember that mlugg did it already

1752528231
andrewrk!~andrewrk@mail.ziglang.org
that's like my new "forgot my homework, going to school in my underwear" dream now

1752528251
meidam!~meidam@user/meidam
:O

1752528281
meidam!~meidam@user/meidam
Sounds like something that would make you wake up with a cold sweat

1752528663
grayhatter!~grayhatte@user/grayhatter
andrewrk: if you like knowing if a variable is used, or not, you might like verse

1752528762
grayhatter!~grayhatte@user/grayhatter
rvrb: I find writing blog posts that I never publish very healthy, I've started committing them to the git repo, but leaving them in draft state so they'll exist if I want to link to them, but they never get "published"

1752528810
grayhatter!~grayhatte@user/grayhatter
writing doesn't have to always advance the discorse, sometimes it's more than enough to rehash what's existing

1752531390
rvrb!~rvrb@156.146.51.228
yeah, the process of writing can be therapeutic, and was in this case

1752532286
rvrb!~rvrb@156.146.51.228
I am pleased with this library name, given my displeasure for having to have written it https://github.com/gdzig/oopz

1752533342
andrewrk!~andrewrk@mail.ziglang.org
lol

1752534182
LAC-Tech!~lewis@granite-phrase.bnr.la
I always thought OO got a bad rap because of how C++ implements. Keep in mind C++ implements all programming badly, including functional, imperative and well... just anythin

1752534629
rvrb!~rvrb@156.146.51.228
it is what it is, I try not to be dogmatic about these things, but it's definitely an accident to be using it in Zig

1752534690
rvrb!~rvrb@156.146.51.228
I just wanted to discourage usage of OOP for anything but binding interop

1752534711
rvrb!~rvrb@156.146.51.228
I would be sad if I enabled anything else

1752535840
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
rvrb: that is a great name

1752536858
LAC-Tech!~lewis@granite-phrase.bnr.la
rvrb: yeah I feel like OO and systems programming don't go well together. It's very much something that needs a GC.

1752536880
LAC-Tech!~lewis@granite-phrase.bnr.la
I'm not even sure about closures without a GC tbh

1752537320
LAC-Tech!~lewis@granite-phrase.bnr.la
speaking of which - I'd love there to be a scripting language renaissance. systems languages have really stepped up with Zig etc. But we're still stuck on Python/Ruby/JS etc

