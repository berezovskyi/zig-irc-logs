1736726668
raceready!uid684861@user/raceready
wow, so all that and it's just  a `ret`

1736726678
raceready!uid684861@user/raceready
https://godbolt.org/z/addE4dKPv

1736726695
raceready!uid684861@user/raceready
is that because I'm not doing anything with anything

1736726775
raceready!uid684861@user/raceready
nevermind, put in a debug statement and now it's producing assembly

1736726821
andrewrk!~andrewrk@mail.ziglang.org
typically you'll need to connect your input to your output somehow to observe a useful result 

1736727415
raceready!uid684861@user/raceready
Y'all are probably going to think this is either stupid or funny.  I decided to give Zig a look because I got tired of Rust not letting me do the simplest of things without having to go through a boat load of ceremony.  I was just brushing up on some algorithms when I came across a linked list exercise.

1736727441
raceready!uid684861@user/raceready
Anyone ever try to create a linked list in Rust from scratch?

1736727695
andrewrk!~andrewrk@mail.ziglang.org
for me it was a font cache

1736728831
raceready!uid684861@user/raceready
Is 0.14 going to be a significant upgrade from 0.13, or will the resources for 0.13 be okay to use for learning?

1736728942
grayhatter!~grayhatte@user/grayhatter
raceready: every version tick is very mildly annoying... some namespace changes, minor API improvements... but anything you learn now, will be useful likely forever

1736728965
raceready!uid684861@user/raceready
rgr

1736728973
grayhatter!~grayhatte@user/grayhatter
very-mildly, if you're more comfortable with `sed -i` than I am, you'll have no problems with it

1736728976
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Upgrading is easy as long as you're using a pre-built toolchain

1736739180
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
IIRC there's even `zig` command for in-place upgrading the codebase

1736748718
reykjalin!7e28cf3a41@user/reykjalin
andrewrk: related to the discussion above re: minimizing amounts of undefined state: is there a way to heap allocate and initialize in the same statement? I’ve been doing `const s = try allocator.create(Struct); s.* = .{ … };` and this discussion made me wonder if there’s a way to do that without first creating a pointer to undefined data

1736748795
reykjalin!7e28cf3a41@user/reykjalin
I’d find it a bit unintuitive if this was possible since the allocation can fail, but it’d be pretty neat to be able to just eliminate the possibility of undefined state there 

1736754402
andrewrk!~andrewrk@mail.ziglang.org
reykjalin: the API used to work that way but I found it better this way since it allows constructing internal references

1736772125
reykjalin!7e28cf3a41@user/reykjalin
ah gotcha, that makes sense, thank you!

1736790651
grayhatter!~grayhatte@user/grayhatter
didn't  `--summary all` used to print test count? or am I imagining that?

1736800699
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: still does

1736800729
andrewrk!~andrewrk@mail.ziglang.org
Build Summary: 5/5 steps succeeded; 4/4 tests passed

1736801797
grayhatter!~grayhatte@user/grayhatter
andrewrk: yeah, but only if it finds the tests https://gr.ht/i/tests-missing.png 

1736801823
grayhatter!~grayhatte@user/grayhatter
zig build test, with 0 tests should probably be a compile error, no?

1736801877
andrewrk!~andrewrk@mail.ziglang.org
that screenshot indicates that it found tests but skipped them because they were aready run before and passed

1736801886
andrewrk!~andrewrk@mail.ziglang.org
since unit tests are deterministic they are cacheable

1736801965
grayhatter!~grayhatte@user/grayhatter
oh, so the answer is it sometimes prints the number of tests

1736801967
andrewrk!~andrewrk@mail.ziglang.org
the idea of keeping running unit tests many times with slight variations is called "fuzzing" and is handled separately (with --fuzz option) but that feature is not quite ready for primetime

1736803192
Earnestly!~earnest@user/earnestly
That will be amazing

