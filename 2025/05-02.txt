1746144209
grayhatter!~grayhatte@user/grayhatter
clevor: it's funnier on issues, less funny on PRs, if that helps

1746144221
grayhatter!~grayhatte@user/grayhatter
it's also a 4 year old thread... so it's not even funny

1746144542
clevor!sid649024@id-649024.hampstead.irccloud.com
Looks like it has been deleted already ðŸ˜³

1746144950
grayhatter!~grayhatte@user/grayhatter
might I suggest next time, seeking positive attention, instead of just creating spam?

1746144982
clevor!sid649024@id-649024.hampstead.irccloud.com
This was a problem when I was on a forum a few years ago.

1746145004
grayhatter!~grayhatte@user/grayhatter
you creating spam was a problem... and you're still doing it?

1746145025
clevor!sid649024@id-649024.hampstead.irccloud.com
Less so

1746145086
clevor!sid649024@id-649024.hampstead.irccloud.com
The problem is that I don't fully think through the consequences of my actions, and instead act relatively impulsively.

1746145130
grayhatter!~grayhatte@user/grayhatter
that's obvious... you should stop doing that

1746145173
grayhatter!~grayhatte@user/grayhatter
consider doing things that improve the world around you, instead of just creating spam, or annoying people

1746145210
clevor!sid649024@id-649024.hampstead.irccloud.com
Okay

1746145503
Drixtan!~Drixtan@user/Drixtan
that's one of the most straight forward, yet honest discussion I've seen for a long time, great job guys

1746173621
daurnimator!~daurnimat@vultr.daurnimator.com
Has anyone hit the test failure "error: 'sort.test.sort' failed" in zig 0.14.0?

1746173630
daurnimator!~daurnimat@vultr.daurnimator.com
logs: https://gist.github.com/daurnimator/cc1cc4caaf52cc5e4c18e898eff714c8

1746184961
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how do I get the right type for this c union? https://git.sr.ht/~flower/zjasmnotes/tree/nsm_all_zig/item/src/nsm/nsm.zig#L261

1746184979
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
argv: ?[*]?[*]c.lo_arg

1746184989
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://liblo.sourceforge.net/docs/unionlo__arg.html

1746185039
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
In c you would do: &argv[n]->t, for strings according to the doc

1746190381
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/nsm_all_zig/item/src/nsm/nsm.zig#L267

1746190407
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
: error: type '?[*]cimport.lo_arg' does not support field access

1746190502
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
error: type '[*]cimport.lo_arg' does not support field access

1746190516
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
const name = std.mem.span(argv.?[0].?.s)

1746190981
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
need some help on this showstopper

1746192205
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
argv.?[0].?[0].s; 

1746192210
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm

1746192242
clevor!sid649024@id-649024.hampstead.irccloud.com
argv.?[0] is of type ?[*]c.lo_arg

1746192287
clevor!sid649024@id-649024.hampstead.irccloud.com
s/c/cimport/

1746192549
clevor!sid649024@id-649024.hampstead.irccloud.com
Maybe the type of argv can be a union between ?[*]?*cimport.io_arg and ?[*]?[*]cimport.io_arg depending on the underlying type.

1746193243
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
pfew, quite a puzzle

1746193470
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 argv.?[0].?[0].s; this gives me a u8 it seems, I want a []const u8 at the end

1746194318
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nah this is beyond my capabilities atm

1746195049
Gliptic!~glip@2a01:4f8:c012:91f3::1
flower_: what two things do you need to make a []const u8?

1746195194
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: the length and a pointer?

1746195224
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, and if you have a [*]const u8, how do you get a []const u8 from that?

1746195394
Gliptic!~glip@2a01:4f8:c012:91f3::1
ok, nvm, this lo_arg is weird(ish)

1746195418
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's no []const u8 to be found without doing conversion in code

1746195450
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
"indexing an element and dereferencing that"

1746195469
Gliptic!~glip@2a01:4f8:c012:91f3::1
.s is indeed just a single character

1746195525
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
"Standard C, NULL terminated string."

1746195527
Gliptic!~glip@2a01:4f8:c012:91f3::1
so what elements is the []const u8 supposed to be made out of

1746195570
Gliptic!~glip@2a01:4f8:c012:91f3::1
that doesn't make sense

1746195580
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://liblo.sourceforge.net/docs/unionlo__arg.html#a15bbcf8284d75ad441b5cde7218548f6

1746195596
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's what I'm reading too

1746195618
Gliptic!~glip@2a01:4f8:c012:91f3::1
so they have a union that contains the first character, and the rest is supposed to follow after that?

1746195626
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's not legal

1746195688
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
"strings and symbols which must be read with &argv[n]->t."

1746195697
Gliptic!~glip@2a01:4f8:c012:91f3::1
but that's not .s

1746195706
Gliptic!~glip@2a01:4f8:c012:91f3::1
and also, t is a lo_timetag

1746195712
Gliptic!~glip@2a01:4f8:c012:91f3::1
that doesn't.. seem correct?

1746195726
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
t stands for type I guess

1746195744
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
&argv[n]->s

1746195749
Gliptic!~glip@2a01:4f8:c012:91f3::1
ok, "t is the type character"

1746195760
Gliptic!~glip@2a01:4f8:c012:91f3::1
smart to write it like that when "t" is also an existing field :P

1746195778
Gliptic!~glip@2a01:4f8:c012:91f3::1
but no

1746195785
Gliptic!~glip@2a01:4f8:c012:91f3::1
it really is that silly

1746195802
Gliptic!~glip@2a01:4f8:c012:91f3::1
you're supposed to interpret the pointer to that .s as a null-terminated string

1746195894
Gliptic!~glip@2a01:4f8:c012:91f3::1
which is undefined behaviour in C, I'm pretty sure

1746195962
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
liblo is used by quite some serious projects ... pure data for instance IIRC

1746196186
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
LO_STRING =    's',

1746196224
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://liblo.sourceforge.net/docs/lo__osc__types_8h_source.html

1746196388
Gliptic!~glip@2a01:4f8:c012:91f3::1
should be using flexible arrays, but maybe it predates them

1746196410
Gliptic!~glip@2a01:4f8:c012:91f3::1
either way, you got your u8

1746196440
Gliptic!~glip@2a01:4f8:c012:91f3::1
now you need a zero-terminated pointer to that u8

1746196589
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I need the address of that u8? Using a &?

1746196594
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1746196600
Gliptic!~glip@2a01:4f8:c012:91f3::1
just like it tells you to do in C

1746196738
Gliptic!~glip@2a01:4f8:c012:91f3::1
that will give you a *u8 though

1746196759
Gliptic!~glip@2a01:4f8:c012:91f3::1
and you probably want a [*:0]const u8

1746196997
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I've the pointer, now I need the length?

1746197023
Gliptic!~glip@2a01:4f8:c012:91f3::1
you wrote std.mem.span already, I missed that above

1746197054
Gliptic!~glip@2a01:4f8:c012:91f3::1
span will find the length on its own

1746197087
Gliptic!~glip@2a01:4f8:c012:91f3::1
so the only thing you're missing is that you have the wrong pointer type

1746197257
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
the type of argv? argv: ?[*]?*c.lo_arg or argv: ?[*]?[*]c.lo_arg,

1746197315
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, the type after doing & on that u8

1746197340
Gliptic!~glip@2a01:4f8:c012:91f3::1
std.mem.span, "Takes a sentinel-terminated pointer"

1746197380
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm

1746197431
Gliptic!~glip@2a01:4f8:c012:91f3::1
and this is where the unsoundness comes in

1746197467
Gliptic!~glip@2a01:4f8:c012:91f3::1
if they had done "char s[];" or even "char s[1];", you wouldn't need this step

1746197504
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
Hey guys.. I'm working on a research project and implementing my parser along what you have in std.zig. I noticed a potential bug: https://github.com/ziglang/zig/blob/master/lib/std/zig/Parse.zig#L81 seems off by one, because the node index should be self.nodes.len-1 to address the last reserved node. I'm trying to confirm with a small test and

1746197504
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
would open a PR if I manage.

1746197612
Gliptic!~glip@2a01:4f8:c012:91f3::1
JanBessai: hm, yeah, I suppose it works anyway, just leaves a lot of zombie nodes

1746197721
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
I guess the if shouldn't be there if that was the intention

1746197789
Gliptic!~glip@2a01:4f8:c012:91f3::1
the resize is untested then, unless there are other resizes

1746197844
Gliptic!~glip@2a01:4f8:c012:91f3::1
can't have been the intention

1746197863
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
is there a way to see test coverage? If the branch was never covered, I guess it is not intentional

1746197883
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't see how that branch could ever be taken

1746197907
Gliptic!~glip@2a01:4f8:c012:91f3::1
and if it is, it's breaking the node at p.nodes.len - 1

1746197947
Gliptic!~glip@2a01:4f8:c012:91f3::1
unreserveNode(reserveNode(...)) should clearly leave it in the same state, unreserveNode is used in defers for instance

1746197949
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
well - if someone explicitly passes in self.nodes.len + 1 to hard-unreserve the last one

1746197972
Gliptic!~glip@2a01:4f8:c012:91f3::1
yeah, they pass in self.nodes.len + 1 when they meant self.nodes.len :P

1746197984
Gliptic!~glip@2a01:4f8:c012:91f3::1
possible that there could be bugs like that, I suppose

1746198030
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
I agree with the unreserveNode(reserveNode(...)) condition - I'd write a test with that and open a PR

1746198101
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's only two calls to unreserveNode in the whole repo, two errdefer

1746198122
Gliptic!~glip@2a01:4f8:c012:91f3::1
branch could never have been taken

1746198140
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
yup that is a good hint

1746198153
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
(errdefer is also where I'd expect it to be called)

1746198210
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: that unsoundness is to be resolved with converting a *u8 to a [*:0]const u8?

1746198228
Gliptic!~glip@2a01:4f8:c012:91f3::1
flower_: well, not "resolved" as such :P

1746198236
Gliptic!~glip@2a01:4f8:c012:91f3::1
but it would make it compile and probably work

1746198269
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
that's my aim (and then I'll break something in my house)

1746198288
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
heh

1746198333
Gliptic!~glip@2a01:4f8:c012:91f3::1
I suggest breaking out some ice cubes from an ice cube tray

1746198360
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
good one

1746198384
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
and now the std library will help me making the convertion? :)

1746198406
Gliptic!~glip@2a01:4f8:c012:91f3::1
span should work on [*:0]const u8, yes

1746198431
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
yes, but how to get [*:0]const u8

1746198454
Gliptic!~glip@2a01:4f8:c012:91f3::1
how do you convert pointers between each other?

1746198457
Gliptic!~glip@2a01:4f8:c012:91f3::1
usually

1746198501
Gliptic!~glip@2a01:4f8:c012:91f3::1
ice cubes are kind of cast, so it should be called an ice cube cast

1746198561
clevor!sid649024@id-649024.hampstead.irccloud.com
@ptrCast

1746198580
Gliptic!~glip@2a01:4f8:c012:91f3::1
ssshhh

1746198608
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I was only doubting about the uppercase C

1746200841
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok that part compiles, thank you very much Gliptic 

1746200887
Gliptic!~glip@2a01:4f8:c012:91f3::1
sure

1746200922
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ACTION opted for doing laundry instead of fiddling with ice cubes

1746201873
clevor!sid649024@id-649024.hampstead.irccloud.com
flower_: An ice cube tray would be [10]enum {Empty, Ice, Water}

1746203077
JanBessai!~JB@dynamic-176-003-001-085.176.3.pool.telefonica.de
Gliptic PR is out https://github.com/ziglang/zig/pull/23744

1746203592
Gliptic!~glip@2a01:4f8:c012:91f3::1
cool, I'm just a random guy here though

1746203625
Gliptic!~glip@2a01:4f8:c012:91f3::1
but I see there's a reviewer assigned

1746204223
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
clevor: ah shut up for now. ;) 

1746206133
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
build.zig for neovim was merged today: https://github.com/neovim/neovim/pull/28344

1746207488
andrewrk!~andrewrk@mail.ziglang.org
neat

1746208229
lemons!~doggie@user/doggie-:49517
rockorager: does that mean we now compile zig code to write zig code to compile zig code  

1746208353
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
well it's still written in c and lua

1746213080
grayhatter!~grayhatte@user/grayhatter
> Yes, that can still be a problem, for now. We will see which project (neovim or zig) will abandon zerover first (or ever).

1746213085
grayhatter!~grayhatte@user/grayhatter
lmao

1746213143
grayhatter!~grayhatte@user/grayhatter
soon, neovim drops zig, because it released v1.0 and thus is no longer compatable with the zerover4lyf goals of neovim

1746218097
triallax!f378378b91@lacerte/triallax
hi, i'm wondering if here's a shlex equivalent in the stdlib? i can't seem to find it but maybe i'm missing something

1746218161
Gliptic!~glip@2a01:4f8:c012:91f3::1
shlex being?

1746218166
triallax!f378378b91@lacerte/triallax
or well, i don't want all of shlex, i just want splitting

1746218170
triallax!f378378b91@lacerte/triallax
Gliptic: https://docs.python.org/3/library/shlex.html

1746218224
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
triallax: std.mem.split* is probably where you want to look

1746218238
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
there are a lot of variations

1746218252
triallax!f378378b91@lacerte/triallax
that was my first thought, but shlex.split doesn't merely split on characters

1746218261
triallax!f378378b91@lacerte/triallax
e.g. it handles quoting

1746218272
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah, nothing in std that handles quoting or balanced parens, etc

1746218278
triallax!f378378b91@lacerte/triallax
right

1746218344
triallax!f378378b91@lacerte/triallax
ok honestly i'm not quite sure i'm doing this specific thing in zig anyway, it's a script that makes much more sense to be in python so i will just rewrite it

1746221980
andrewrk!~andrewrk@mail.ziglang.org
triallax: are you sure you want the tool to implement an ad hoc syntax? maybe it would be better to accept args in a more structured way

1746223418
triallax!f378378b91@lacerte/triallax
andrewrk: maybe? i'm not sure

1746223421
triallax!f378378b91@lacerte/triallax
i'll give a bit of context

1746223539
triallax!f378378b91@lacerte/triallax
i'm basically writing a golden testing tool for a zig project of mine (an awk implementation), and how i'm currently doing it in a test i can specify arguments to pass to the command something like this

1746223545
triallax!f378378b91@lacerte/triallax
#-args: a b c d

1746223568
triallax!f378378b91@lacerte/triallax
i _could_ make that something like a json array instead

1746223600
triallax!f378378b91@lacerte/triallax
but i've already remade the script in python which as i mentioned is more suitable anyway so using shlex is fine and is nicer to read

1746226349
Earnestly!~earnest@user/earnestly
triallax: You can't really use json for this, arguments (if you mean argv?) are structured as nul delimited strings

1746226368
Earnestly!~earnest@user/earnestly
And by "string" I mean any sequence of bytes, including invalid UTF-8, ruling out json

1746226380
triallax!f378378b91@lacerte/triallax
for my use case that's not really relevant

1746226525
triallax!f378378b91@lacerte/triallax
as in, i don't expect to need to pass invalid utf-8

1746226533
Earnestly!~earnest@user/earnestly
triallax: It shouldn't be too difficult to implement sh-style quoting, but keep in mind that \ is a quote, so a sequence like '\'' is equivalent to '"'"'

1746226559
triallax!f378378b91@lacerte/triallax
i've done it in python with shlex.split already :)

1746226574
Earnestly!~earnest@user/earnestly
You also don't need to worry about quote balancing

1746226586
Earnestly!~earnest@user/earnestly
(by sh-style, I mean posix sh)

1746226676
Earnestly!~earnest@user/earnestly
Iow, a tokeniser would only need to keep track of whether you're in a quoted state or not (and the type of quote) and if you end in a quoted state then it wasn't terminated

1746226715
Earnestly!~earnest@user/earnestly
As an aside, literal quotes have the nice feature of being actually literal, there is no escape mechanism to worry about

