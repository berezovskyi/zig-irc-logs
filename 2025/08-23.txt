1755907272
salamonca!~salamonca@user/salamonca
the definition of "better" depends on what qualities you are looking for in a vehicle, which vary from person to person.

1755907273
grayhatter!~grayhatte@user/grayhatter
but for genai from a LLM, I think the titanic is likely a better analogy

1755907354
grayhatter!~grayhatte@user/grayhatter
salamonca: right, that's the point I'm making... LLMs will give you low quality code, very quickly. Personally I'd rather have high quality code

1755907510
salamonca!~salamonca@user/salamonca
grayhatter: you have to babysit it for sure, be responsible.  You can arrive at high quality code using AI and your own skill.  LLMS are getting better and better everyday as well.  It would be a mistake to completely ignore then technology.

1755907821
grayhatter!~grayhatte@user/grayhatter
I can arrive at high quality code without using random noise from an LLM, and it's less bothersome. I don't see value I'm supposed to get using LLM generated code, using LLM generated code degrades every metric I care about. But I've already strayed farther into off-topic than I want to... I'm gonna continue to ignore the technology as much as I'm able given so far I've only seen it's effects be a net

1755907823
grayhatter!~grayhatte@user/grayhatter
negatitve when it comes to software

1755907954
salamonca!~salamonca@user/salamonca
people are going to do what they want, which is cool.  Im just giving my perspective.  The world will not bend to my will, I've learned.

1755908040
andrewrk!~andrewrk@mail.ziglang.org
this "getting left in the dust" rhetoric is pure propaganda being fed to you by AI companies. please don't uncritically regurgitate that crap here

1755908065
andrewrk!~andrewrk@mail.ziglang.org
they're trying to sell you something you don't need, so they have to scare you

1755908082
grayhatter!~grayhatte@user/grayhatter
^ this. Selling or shilling snake oil is unethical

1755908102
andrewrk!~andrewrk@mail.ziglang.org
also, don't be a sucker

1755908167
salamonca!~salamonca@user/salamonca
so it comes to verbal abuse because you disagree.  Not cool.

1755908223
andrewrk!~andrewrk@mail.ziglang.org
even if the world embraces AI coding, the zig community meanwhile will be cultivating cold, hard programming skills, the ones producing the actual good work that gets trained on. Zig project aims higher than the median

1755908277
grayhatter!~grayhatte@user/grayhatter
not all passionate language counts as verbal abuse

1755908350
grayhatter!~grayhatte@user/grayhatter
likewise, disagreement can feel uncomfortable, but that doesn't make it abuse either 

1755908390
salamonca!~salamonca@user/salamonca
You are making assumptions that I am some gullible rube falling for a gimic.  This is certainly not the case.  I resisted AI as long as I could in the environment I am in.  I do not like it, but thats the reality people need to face.  I can't afford to bury my head in the dirt and pretend AI doesn't exist.

1755908427
andrewrk!~andrewrk@mail.ziglang.org
anyway like I said, you have a choice: you can embrace this IRC channel's philosophy of doing the coding ourselves, or find a different community with different values

1755908439
salamonca!~salamonca@user/salamonca
Anyway, Im not just some random kid who was born yesterday.

1755908499
salamonca!~salamonca@user/salamonca
No diversity of thought here eh?

1755908506
grayhatter!~grayhatte@user/grayhatter
You're advocating it pretty strongly for someone that claims not to like it

1755908508
salamonca!~salamonca@user/salamonca
just comply or LEAVE?

1755908519
salamonca!~salamonca@user/salamonca
bullies

1755908526
andrewrk!~andrewrk@mail.ziglang.org
that's right. no corpo propaganda here

1755908567
grayhatter!~grayhatte@user/grayhatter
healthy communities enforce social norms, and exclude those that can't follow them

1755908598
salamonca!~salamonca@user/salamonca
living in the real world is not a social norm.

1755908658
grayhatter!~grayhatte@user/grayhatter
advocating for writing code the correct way, and taking pride in writing high quality code yourself, is a social norm

1755908773
salamonca!~salamonca@user/salamonca
grayhatter: using AI as a development tool does not equate to writing code incorrectly, or not taking pride in your work.  Let's be reasonable here.

1755908825
grayhatter!~grayhatte@user/grayhatter
but I'd encourage you to engage with the core idea, instead of just arguing and deflecting. Many people use and enjoy zig because it enables writing high quality code. Something worthy of taking pride in. If you use code generated for you by something else, that's not something you can reasonably take pride in.

1755908856
grayhatter!~grayhatte@user/grayhatter
I don't take pride in code written by someone else. I don't claim credit for the idea or the code because I reviewed it

1755908884
salamonca!~salamonca@user/salamonca
what is specific to zig that enables writing high quality code over another language? 

1755908902
salamonca!~salamonca@user/salamonca
sounds like propaganda.

1755908938
grayhatter!~grayhatte@user/grayhatter
your question sounds like a bad faith trap, so I'm having a hard time writing a reply that wouldn't be wasted

1755908958
salamonca!~salamonca@user/salamonca
your answer sounds like deflection.

1755908959
grayhatter!~grayhatte@user/grayhatter
do you want to ask it differently? Or are you just trying to argue?

1755909018
grayhatter!~grayhatte@user/grayhatter
FUD is a helluva drug

1755909041
andrewrk!~andrewrk@mail.ziglang.org
to clarify: the specific issue here is spreading that "you will be left in the dust" rhetoric and not retracting it

1755909134
grayhatter!~grayhatte@user/grayhatter
I think you're not allowed double down on FUD based propaganda is a good policy

1755909380
Affliction!affliction@idlerpg/player/affliction
Right then, just installed 0.15.1, time to try updating this relatively simple program before I commit to doing anything bigger.

1755909395
Affliction!affliction@idlerpg/player/affliction
If I can't figure out reading from stdin and writing to stdout, I'm probably doomed regardless :D

1755909454
andrewrk!~andrewrk@mail.ziglang.org
Affliction: https://ziglang.org/download/0.15.1/release-notes.html#Upgrading-stdiogetStdOutwriterprint

1755909467
Affliction!affliction@idlerpg/player/affliction
yeah, reading through that now

1755909472
grayhatter!~grayhatte@user/grayhatter
Affliction: you could pretend you're writing haskell, then doing any IO would be expected to barely work

1755909482
Affliction!affliction@idlerpg/player/affliction
heh

1755909485
andrewrk!~andrewrk@mail.ziglang.org
plenty of stdin examples to grep for in the zig repo

1755909568
Affliction!affliction@idlerpg/player/affliction
Any special considerations with non-blocking stdin?

1755909686
andrewrk!~andrewrk@mail.ziglang.org
non-blocking? I don't think previous reader impls supported that 

1755909692
grayhatter!~grayhatte@user/grayhatter
does reader have a non-blocking api?

1755909705
Affliction!affliction@idlerpg/player/affliction
one sec, what was I doing...

1755909757
Affliction!affliction@idlerpg/player/affliction
hm, termios on the fd, then using .read() like normal. Seems to work, but if that's not supported then now's a good time to catch that

1755909761
grayhatter!~grayhatte@user/grayhatter
I don't think any reader did? I've had to impelement non-blocking read 3 different times

1755909766
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: that will be the main benefit of introducing std.Io

1755909777
andrewrk!~andrewrk@mail.ziglang.org
then the same code will support blocking or non-blocking

1755909886
grayhatter!~grayhatte@user/grayhatter
I assume I'll still have implement something lower level myself for a few uses

1755909906
Affliction!affliction@idlerpg/player/affliction
I vaguely recall using std.posix.poll() but I'm guessing I refactored that out to block on read with a timeout instead

1755909976
Affliction!affliction@idlerpg/player/affliction
Right, I guess I'll try refactor it into doing it the right way, even if this appeared to work in 0.14

1755909977
grayhatter!~grayhatte@user/grayhatter
hmmm.... maybe not, I was assuming I wanted a tight loop because I wanted to avoid the overhead of a future, but thinking deeper, it's possible that the overhead isn't going to be significant

1755909995
grayhatter!~grayhatte@user/grayhatter
Affliction: what do you do when it would have blocked?

1755910049
Affliction!affliction@idlerpg/player/affliction
grayhatter: run another pass through the main loop. It's a CLI game

1755910198
grayhatter!~grayhatte@user/grayhatter
I'm looking forward to std.Io, it'll be so nice to have a simple non-blocking read + timer api

1755910206
Affliction!affliction@idlerpg/player/affliction
I'm not too concerned about stdout blocking and breaking framerate, but since there probably won't be 10 keystrokes/sec, I do need non-blocking stdin

1755910272
Affliction!affliction@idlerpg/player/affliction
naturally I could drop down to POSIX, but, I figure this would be good practice for the new I/O model, especially since I'm only reading and writing in one place

1755910273
grayhatter!~grayhatte@user/grayhatter
ahh, 100ms timeout

1755910290
andrewrk!~andrewrk@mail.ziglang.org
Affliction: note the new I/O model isn't rolled out yet - only some API changes to Reader/Writer

1755910291
grayhatter!~grayhatte@user/grayhatter
I wasn't happy with that latency in my shell either 

1755910296
Affliction!affliction@idlerpg/player/affliction
ah

1755910314
andrewrk!~andrewrk@mail.ziglang.org
I'm trying to get rid of the legacy stuff but there's sooooo much stuff that depends on it

1755910322
Affliction!affliction@idlerpg/player/affliction
fair enough

1755910342
andrewrk!~andrewrk@mail.ziglang.org
currently rewriting lzma, lzma2, and xz, having a "fun" time

1755910371
andrewrk!~andrewrk@mail.ziglang.org
previous contributer coded them to require having both reader and writer as inputs, rather than properly maintaining state and supporting streaming :-/

1755910387
grayhatter!~grayhatte@user/grayhatter
the intrusive thoughts are trying to convince me to make a joke.... instead, I'll ask about my PR

1755910404
andrewrk!~andrewrk@mail.ziglang.org
mm you've been sitting on that one for a while now

1755910447
triallax!~triallax@lacerte/triallax
i've been considering maybe having a stab at improving the performance of the assembly generated by the self-hosted x86 backend

1755910455
grayhatter!~grayhatte@user/grayhatter
wait... I could have sworn I had a PR for that fork bug :<

1755910462
triallax!~triallax@lacerte/triallax
i don't know if that's something that would be super difficult, i have only surface level knowledge of assembly

1755910486
triallax!~triallax@lacerte/triallax
and a high-level grasp of compilers but not much beyond that

1755910513
Affliction!affliction@idlerpg/player/affliction
Well, I'll go ahead and throw this non-blocking fd at Reader, with the understanding this is probably UB, see what happens, and go from there

1755910516
grayhatter!~grayhatte@user/grayhatter
#24376 found it (I was using search wrong)

1755910568
Affliction!affliction@idlerpg/player/affliction
Worst case scenario, drop down to os.posix, that code will look pretty similar. Not losing portability, already depending on termios.

1755910599
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: done, you have no more open PRs

1755910664
grayhatter!~grayhatte@user/grayhatter
I think I agree with the std.testing close/wontfix, I thought it was a solution to work around another bug, but that comptime bug has been fixed already

1755910745
grayhatter!~grayhatte@user/grayhatter
lol, rip benevolence :D

1755911243
grayhatter!~grayhatte@user/grayhatter
andrewrk: https://github.com/ziglang/zig/pull/24376/commits/b8be525fdc95229dec7178fa271f921b8718e1b4 might be a less contorversial commit. It's not a super urgent bug, (not sure how much longer memoryaccessor.zig will actually live) but it does prevent writing a init.d compatable daemon

1755911312
andrewrk!~andrewrk@mail.ziglang.org
climbing the wrong mountain

1755911325
andrewrk!~andrewrk@mail.ziglang.org
the correct direction to go on this one is down

1755911537
grayhatter!~grayhatte@user/grayhatter
I don't disagree, I just don't know enough about that stack to walk down, but also not walk off a cliff, and I'd like to compile my daemon in ReleaseSafe.... and I'm impatient :P

1755911555
grayhatter!~grayhatte@user/grayhatter
the latter being the RCA

1755911642
grayhatter!~grayhatte@user/grayhatter
I'd rather have std.Io, so currently, I guess; no [meaningful] notes

1755912586
Affliction!affliction@idlerpg/player/affliction
y'know, for a tiny program that only actually reads and writes to the outside world in 4 places, there's a lot of readers and writers in here.. No idea how you stayed sane porting the compiler and standard lib :V

1755912665
Affliction!affliction@idlerpg/player/affliction
on the plus side, the compiler is now complaining about my GeneralPurposeAllocator being unused, so that's another win

1755912959
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: https://github.com/ziglang/zig/pull/24960

1755912992
grayhatter!~grayhatte@user/grayhatter
<3

1755913008
torque!~tachyon@user/torque
<andrewrk> currently rewriting lzma, lzma2, and xz, having a "fun" time <-- HAVE YOU TRIED SLAPPING AN LLM ON IT

1755913021
torque!~tachyon@user/torque
sorry, disappointed I missed the earlier conversation

1755913049
grayhatter!~grayhatte@user/grayhatter
hey, look, torque made the joke I was afraid to :D

1755913093
torque!~tachyon@user/torque
anyway, if you don't plug yourself into the slop generator, here's the dust you will be left in: the dust of churning out prodigious amounts of garbage.

1755913094
grayhatter!~grayhatte@user/grayhatter
and the bug in benevolence got fixed, win-win

1755913123
torque!~tachyon@user/torque
I've known a lot of people who produce a lot of work, but it's very slipshod and causes problems. And of course it's hard for people who do precise work to keep up with shit. unsurprisingly

1755913138
torque!~tachyon@user/torque
it's cool how LLMs act as a fulcrum in the wrong direction

1755913162
andrewrk!~andrewrk@mail.ziglang.org
I asked an LLM the relationship between lzma, lzma2, and xz, and it incorrectly said that xz supported both lzma2 and lzma, while the spec clearly states, "Thus, the plain LZMA will not be supported in this file format."

1755913257
torque!~tachyon@user/torque
maybe the spec had a whoopsie due to not having fact checked it with chat gpt before they published it

1755913326
andrewrk!~andrewrk@mail.ziglang.org
dark humor

1755913347
andrewrk!~andrewrk@mail.ziglang.org
(source: https://tukaani.org/xz/xz-file-format-1.2.1.txt)

1755913365
grayhatter!~grayhatte@user/grayhatter
I've been pondering the idea, (haven't figure out the conclusion I'm circling yet) but every time I talk to people about code review. Almost all of them freely admit they never do code review. Many agreeing it can easily be harder to review code than to write it. On the flip side, LLMs apologists say it can output good if you review it carefully, something that's harder than writing it? 

1755913403
grayhatter!~grayhatte@user/grayhatter
I don't understand... how does anyone fall for this game?

1755913490
torque!~tachyon@user/torque
I spend several hours a week on code review. Most of it for projects I don't contribute to directly

1755913491
grayhatter!~grayhatte@user/grayhatter
andrewrk: just to confirm, you **are** planning to add in the xz ssh backdoor as a stdlib_options right?

1755913529
andrewrk!~andrewrk@mail.ziglang.org
lol I forgot about that

1755913531
andrewrk!~andrewrk@mail.ziglang.org
would be pretty funny ngl

1755913532
grayhatter!~grayhatte@user/grayhatter
otherwise I worry zig just wont be able to keep up with the velocity of modern develoment, and will be left in the dust

1755913537
torque!~tachyon@user/torque
I think it's very important to do so (we have a "all MRs must have at least one reviewer approval before merge" policy at work, but it's good to avoid getting in the habit of rubber stamping things)

1755913586
grayhatter!~grayhatte@user/grayhatter
doesn't the tls have references to heartbleed? seems only fitting at least one test for xz get's a nod to the discovery

1755913594
torque!~tachyon@user/torque
I can understand being heads down for a period of time if you're working on something big (I spent this week rewriting a bunch of crap, but still had time to look at 5 or 6 other merge requests) 

1755913630
torque!~tachyon@user/torque
frankly anyone who says they don't do any code review is either working completely by themselves, lying, or in a dysfunctional environment

1755913661
torque!~tachyon@user/torque
Even when you're focusing on something, it's often important to be able to pull yourself out for a bit so you don't get complete tunnel vision

1755913721
grayhatter!~grayhatte@user/grayhatter
torque: I just had a conversation about it the other day, and a month ago, the earlier one was complaining the code in their corp repo was mostly trash code, followed by him admitting he mostly rubberstamps PRs

1755913724
andrewrk!~andrewrk@mail.ziglang.org
even reviewing one's own code is productive. I usually find issues when I look at my own diffs

1755913734
grayhatter!~grayhatte@user/grayhatter
> why_would_other_devs_do_this_meme.png

1755913768
torque!~tachyon@user/torque
the bigger problem I have is that now that I can't write zig for work, it's harder to write it for fun because it makes going back to C++ that much more painful

1755913803
grayhatter!~grayhatte@user/grayhatter
the recent one evolved into a conversation about how actually doing code review comes at personal cost, because it's not a valued metric at the company :/

1755913821
andrewrk!~andrewrk@mail.ziglang.org
torque: I'll keep trying to make it harder and harder for your employer to ignore zig

1755913857
grayhatter!~grayhatte@user/grayhatter
I mean, if your company doesn't really do code reviews... what's stopping you from using zig now? :P

1755913879
torque!~tachyon@user/torque
I need to upload various icons and iguanas to slack so I can do reactions to all my posts complaining about C++

1755913928
torque!~tachyon@user/torque
I got to write zig at my previous job for about 18 months and it was a blast

1755913968
grayhatter!~grayhatte@user/grayhatter
I've taken to fully reading `git diff` before committing, from the mental mode of what would I get roasted for in this diff. I've caught **so** many issues that way

1755914022
torque!~tachyon@user/torque
I hand stage all my commits in a GUI because I'm very persnickety about this and it's still easy to accidentally include stuff I don't want to

1755914026
grayhatter!~grayhatte@user/grayhatter
the shift from "how do I expect this code to work" to "what will their roast be" is unreasonably effective

1755914149
torque!~tachyon@user/torque
haha

1755917574
Affliction!affliction@idlerpg/player/affliction
Oh, if anyone was wondering; File.read() works on a nonblocking fd as before (and, appears to do what I expect, though I'll use std.posix.read if this is not guaranteed), Io.Reader returns EndOfStream.

1755917703
Affliction!affliction@idlerpg/player/affliction
It is kinda neat having a nontrivial program not use an allocator at all though. Previously used it pretty much only for flexible buffers, but fixed buffers work with std.Io quite nicely.

1755917752
andrewrk!~andrewrk@mail.ziglang.org
Affliction: File.read() was not changed, so that makes sense

1755917772
andrewrk!~andrewrk@mail.ziglang.org
the new thing is std.fs.File.Reader

1755917801
Affliction!affliction@idlerpg/player/affliction
makes sense

1755917819
Affliction!affliction@idlerpg/player/affliction
wait was that Io.Reader or File.Reader...

1755917846
Affliction!affliction@idlerpg/player/affliction
ah well, either way, I'll wait until the rest of it's figured out before using them

1755917874
Affliction!affliction@idlerpg/player/affliction
The writer path works quite nicely, and that's where I was using allocators previously.

1755918302
hasel!~hasel@user/hasel
Reader.stream cannot be used between two sockets, right?

1755918341
andrewrk!~andrewrk@mail.ziglang.org
Affliction: std.Io.Reader is the interface that could be any kind of stream; std.fs.File.Reader is a struct that implements std.Io.Reader for files

1755918375
andrewrk!~andrewrk@mail.ziglang.org
hasel: why not?

1755918492
hasel!~hasel@user/hasel
i was writing something earlier that used it to copy between two sockets and i got a weird stacktrace that went all the way down to std.os.linux. i can’t remember the exact error, not near my right now 

1755918542
hasel!~hasel@user/hasel
i was looking at the release notes and it says that it falls back on read+write if it can’t do sendfile, so it didn’t make sense to me why i got that error now

1755918565
hasel!~hasel@user/hasel
you can ignore this for now ill come back later with a stacktrace

1755918796
andrewrk!~andrewrk@mail.ziglang.org
hasel: I'll take a look

1755919200
hasel!~hasel@user/hasel
i would ignore me if i were you but thanks anyway

1755919252
hasel!~hasel@user/hasel
i have started learning zig this week and it has been a pleasure, really fun language you guys made

1755919548
andrewrk!~andrewrk@mail.ziglang.org
cheers, happy hacking

1755921173
Affliction!affliction@idlerpg/player/affliction
bah, I forgot to flush :(

1755944041
ledx!~thomas@user/ledx
slightly off topic, but after upgrading to zig 0.15 I get this error in neovim: "LSP[zls][Warning] zig standard library directory could not be resolved" – anyone else getting that and/or knows what the problem is? is it just to early?

1755954899
hasel!~hasel@user/hasel
ledx: i think zls haven’t released a stable version compatible with 0.15 yet. i am building zls from master since i had been using zig 0.15-dev before and it works correctly

1755956676
archdark!~archdarky@user/archdark
hi im creating a simple PCX decoder but im not using any compile time size detection and im getting this error:  https://zigbin.io/dc710f  should i use the normal struct? cause packed is the one for binary files right?

1755956717
ifreund!2940d10f8b@user/ifreund
archdark: unless you need bit-aligned fields you probably want extern struct there

1755956757
ifreund!2940d10f8b@user/ifreund
packed struct are for bit-packing inside an integer

1755956791
archdark!~archdarky@user/archdark
i see.. i thought that extern is just used for exposing structs to C  

1755956801
triallax!~triallax@lacerte/triallax
extern structs still have padding no?

1755956822
ifreund!2940d10f8b@user/ifreund
triallax: not necessarily

1755956838
ifreund!2940d10f8b@user/ifreund
you can write a comptime assert that there is no padding

1755956857
ifreund!2940d10f8b@user/ifreund
they only have padding if the field order/alignment requires it

1755956858
triallax!~triallax@lacerte/triallax
in this case wouldn't there be padding e.g. before xmin

1755956871
ifreund!2940d10f8b@user/ifreund
no

1755956900
ifreund!2940d10f8b@user/ifreund
the align of the struct as a whole is 2

1755956908
triallax!~triallax@lacerte/triallax
wait, right

1755956924
ifreund!2940d10f8b@user/ifreund
you can also set field alignment with align() if needed

1755956943
triallax!~triallax@lacerte/triallax
so the idea is that packed structs are only necessary for bit-level packing?

1755957105
ifreund!2940d10f8b@user/ifreund
packed structs are really integers not structs

1755957118
ifreund!2940d10f8b@user/ifreund
and have a misleading name

1755957123
ifreund!2940d10f8b@user/ifreund
due to historical reasons

1755957123
archdark!~archdarky@user/archdark
i see.. equivalent to:  __attribute__((packed))

1755957133
triallax!~triallax@lacerte/triallax
i see

1755957563
archdark!~archdarky@user/archdark
thanks ifreund 

1755957636
ifreund!2940d10f8b@user/ifreund
no problem :)

1755957699
triallax!~triallax@lacerte/triallax
irrespective of all that

1755957705
triallax!~triallax@lacerte/triallax
is there a reason why packed structs can't contain arrays?

1755957945
ifreund!2940d10f8b@user/ifreund
triallax: it would require more language complexity that is immediately obvious due to alignment and the existence of pointers

1755957958
ifreund!2940d10f8b@user/ifreund
an array that is not byte-aligned is a very different beast

1755963070
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: I'd like to get https://github.com/ziglang/zig/pull/24930 merged and put into zig-bootstrap because my laptop update script currently takes an hour to run instead of a minute.

1755967769
neurocyte!~neurocyte@user/neurocyte
can anyone tell me what this format string does? "{;+/}" It was used to format std.Uri objects with zig-0.14, but it's no longer supported in zig-0.15 and I'm not sure what to replace it with. (this is from libvaxis)

1755968118
nilsj2!~Thunderbi@user/nilsj2
Is it possible to std.fmt.bufPrint with a sentinel 0?

1755968143
chmod222!~chmod222@user/chmod222
neurocyte: the part between the {} used to be passed as a parameter into the .format() function, and std.Uri uses that

1755968154
chmod222!~chmod222@user/chmod222
https://github.com/ziglang/zig/blob/0.14.0/lib/std/Uri.zig#L297

1755968157
chmod222!~chmod222@user/chmod222
This is what it did with it

1755968161
triallax!~triallax@lacerte/triallax
nilsj2: bufPrintZ?

1755968182
nilsj2!~Thunderbi@user/nilsj2
triallax: Thanks!

1755968203
chmod222!~chmod222@user/chmod222
From what I can tell, "{;+/}" tells std.Uri to print the scheme, authority and path

1755968212
chmod222!~chmod222@user/chmod222
so scheme://auth/path

1755968454
chmod222!~chmod222@user/chmod222
Therefore, if you want to be lazy, "{}://{}{}" with uri.scheme, uri.host, uri.path

1755968860
neurocyte!~neurocyte@user/neurocyte
chmod222: ah, thanks! I think I get it now. I will replace it with std.Uri.fmt with appropriate flags.

1755969987
nilsj2!~Thunderbi@user/nilsj2
Now in 0.15.x zig env outputs a zig struct instead of json, but I can't find anything about it in release notes?

1755970057
nilsj2!~Thunderbi@user/nilsj2
I was using it for a shell script that opened the langref, is there a better solution?

1755970080
triallax!~triallax@lacerte/triallax
it seems to be ZON

1755970206
triallax!~triallax@lacerte/triallax
seems like it was changed in 0fb7a0a94bf6f9e329008d8b5b819a8d1d7124b0

1755978336
andrewrk!~andrewrk@mail.ziglang.org
neurocyte: upgrade to {f} with https://ziglang.org/documentation/0.15.1/std/#std.Uri.fmt

1755978390
andrewrk!~andrewrk@mail.ziglang.org
.{ u.fmt(.{.scheme = true, .authority = true, .path = true }) }

1755982510
ledx!~thomas@user/ledx
hasel: makes sense. thanks!

