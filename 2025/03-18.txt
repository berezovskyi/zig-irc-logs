1742256149
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
whats equivalent of `offsetof` in zig? 

1742256192
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nm, this search is really bad https://ziglang.org/documentation/0.14.0/std/#

1742268396
ashie!~ashie@user/ashie
tsujp: my friend uses tracy with zig (https://github.com/FalsePattern/zig-tracy)

1742268414
grayhatter!~grayhatte@user/grayhatter
I actually like the zig stdlib search thingy

1742268436
grayhatter!~grayhatte@user/grayhatter
it does have a few weak points, for sure

1742269032
torque!~tachyon@user/torque
builtins aren't in the stdlib docs, for one

1742269214
runxiyu!runxiyu@lindenii/maintainer/runxiyu
https://ziglang.org/documentation/master/std/ isn't usable without javascript

1742269216
tusf!cb6c78d75e@user/TUSF
builtins aren't technically part of the standard library, so...

1742269252
grayhatter!~grayhatte@user/grayhatter
I'm not even sure if you get credit for being technically correct on that one

1742269276
tusf!cb6c78d75e@user/TUSF
And yeah, someone should make an autodoc that's friendly to clients that don't run JS.

1742269292
grayhatter!~grayhatte@user/grayhatter
you are, ofcourse... but then I get to roast s

1742269304
grayhatter!~grayhatte@user/grayhatter
roast zig for not having builtin docs 

1742269346
grayhatter!~grayhatte@user/grayhatter
tusf: they have... it's called `grep /usr/lib/zig/std`

1742269355
torque!~tachyon@user/torque
I know they aren't, the point was it's funny to ask about `@offsetOf` and then immediately complain that the stdlib search is bad

1742269430
tusf!cb6c78d75e@user/TUSF
It's @fieldParentPtr() btw, in case anyone is still wondering.

1742269453
tusf!cb6c78d75e@user/TUSF
(at least, I assume that's what they want?)

1742269491
grayhatter!~grayhatte@user/grayhatter
tusf: I assumed they meant https://ziglang.org/documentation/master/#offsetOf

1742269547
tusf!cb6c78d75e@user/TUSF
Yeah, but afaiu, offsetof in C is usually used to accomplish what @fieldParentPtr() is for.

1742269580
grayhatter!~grayhatte@user/grayhatter
no?

1742269602
grayhatter!~grayhatte@user/grayhatter
I'm pretty sure @fieldParentPtr is the inverse of @offsetOf

1742269701
grayhatter!~grayhatte@user/grayhatter
offsetOf should be exclusively postive usize (it's comptime_int, because comptime), just like in C

1742269716
tusf!cb6c78d75e@user/TUSF
Yeah, I mean that offsetof is usually used to construct the "container_of" macro, which is the equivalent of @fieldParentPtr

1742269727
grayhatter!~grayhatte@user/grayhatter
do you have an example where you can get C offsetOf to be negative?

1742269802
grayhatter!~grayhatte@user/grayhatter
oh, you meant, you assume that he *should* use @fieldParentPtr() because it's strictly better in almost all cases/uses for c's offsetof

1742269808
grayhatter!~grayhatte@user/grayhatter
I probably agree with that

1742269848
tusf!cb6c78d75e@user/TUSF
Right. Not that it's a direct equivalent, but that it's probably what they want anyways.

1742269891
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well the search couldn't find it, so i wasted a bunch of time online, they realized it was already in stdlib

1742269989
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am guessing this is how you use it? https://zigbin.io/c23cd8 line: 28

1742269992
tusf!cb6c78d75e@user/TUSF
Yeah, it's probably non-obvious to newcomers that the builtins are all documented in the Language Reference, rather than the stdlib docs: https://ziglang.org/documentation/0.14.0/

1742270049
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also how to you get it to look inside "ptr" like, i want `@offsetOf(ioUring, "ptr.ring_fd")` but doesn't seem to work!

1742270127
tusf!cb6c78d75e@user/TUSF
Probably `@offsetOf(ioUring,"ptr") + @offsetOf(c.io_uring, "ring_fd")`

1742270136
grayhatter!~grayhatte@user/grayhatter
is zigbin open source?

1742270211
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i get the same error `no field named 'ring_fd'` that field is inside `ptr`

1742270216
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
which is a C struct 

1742270302
tusf!cb6c78d75e@user/TUSF
I mean, so c.io_uring doesn't have that field?

1742270321
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it does

1742270347
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/axboe/liburing/blob/master/src/include/liburing.h#L122-L133

1742270675
tusf!cb6c78d75e@user/TUSF
stealth_: What are you trying exactly that's returning that error?

1742270735
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
tusf, https://zigbin.io/4a168f

1742270769
grayhatter!~grayhatte@user/grayhatter
how did zigbin become the default suggestion we all use?

1742270800
tusf!cb6c78d75e@user/TUSF
stealth_: Oh, yeah, you didn't do what I said. The second @offsetOf should have the type of `c.io_uring`

1742270809
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, i started using it since you guys were using it.

1742270842
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
tusf, o, that is so weird :p i though it was a typo

1742270852
tusf!cb6c78d75e@user/TUSF
grathatter: Good question. I assume someone just started posting it on reddit or discord, and others followed suit? Probably because there wasn't a code bin that supported Zig syntax yet?

1742270856
grayhatter!~grayhatte@user/grayhatter
I'll pay for hosting on DO if anyone wants to make a MIT version of it in zig

1742270868
grayhatter!~grayhatte@user/grayhatter
bonus points if you use verse as part of the backend

1742270895
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i like the zigbin syntax its nice. 

1742270910
grayhatter!~grayhatte@user/grayhatter
I will eventually, but I don't need another project just this moment, already have too many

1742270912
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
tust thanks, that code is working

1742270981
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, why don't you just ask the person that created/maintains zigbin? 

1742271029
grayhatter!~grayhatte@user/grayhatter
stealth_: who is that?

1742271097
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I believe it's cryptocode

1742271133
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well there you go, must be someone from the zig community 

1742271183
grayhatter!~grayhatte@user/grayhatter
lol, this came up in in my recon for zigbin, you might be interested in this stealth_ https://zig.news/vedant-pandey/creating-safer-zig-bindings-for-liburing-24gc

1742271188
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
one thing they need to do is fix that cursor, it took me few visits the sites to actually see it

1742271291
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looks like they are going to endup reinventing the wheel, liburing already exists, just need to include it and you have full access to it.

1742271527
grayhatter!~grayhatte@user/grayhatter
... you're importing python so that you can pipe operations into it's async functionalitiy, and you're think they're re-inventing the wheel?

1742271594
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i already wrote a library in python that uses async/await and it works directly with liburing+io_uring and its not reinventing the wheel thats actual progress

1742271618
grayhatter!~grayhatte@user/grayhatter
you and I use progress very differently

1742271623
grayhatter!~grayhatte@user/grayhatter
use the word

1742271675
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
liburing/io_uring has no concept or async/await though.

1742271701
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
like C doesn't i mean. 

1742271721
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it works more like callback

1742271747
grayhatter!~grayhatte@user/grayhatter
I feel like you're missing the forest for the trees here

1742271779
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what exactly are you saying? 

1742271959
grayhatter!~grayhatte@user/grayhatter
it's not important, I'm just being too much of a graybeard, yelling at you kids to get off my lawn

1742272031
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have already been wrapping liburing or like 5years now! every time i have used different tech/tools so i can get the best performance out of it.

1742272052
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
finally i am on zigs door step, and i think this will be the last for that project.

1742272256
grayhatter!~grayhatte@user/grayhatter
Given you're plugging zig into python. Do you expect you'll get better perf? than just using python?

1742272395
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well liburing project just a wrapper so that wont be much when it comes to performance, but it give me that safety, portability and all the other things zig provides.

1742272423
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
on the other hand if i move my other project "shakti" over to zig, thats when you will see real performance difference.

1742272473
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe like 2-100x faster than pythons asyncio library.

1742272960
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Lest say you create an io_uring server in zig and it can do 100,000 request per second. Save server in python you would be lucky to get 5,000! The way to get faster speed is to get zig to do all the hard work and end result shows up in python.

1742274406
bblack!~bblack@wikimedia/bblack-WMF
personally I can't stand the async/await paradigm.  I'd much rather use callbacks.

1742274482
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you need more experience with async/await once you "get it" you really "get it." i do like the callback but you run into callback-hell in complex program soon.

1742275811
torque!~tachyon@user/torque
sadly, callbacks Suck Ass

1742275847
torque!~tachyon@user/torque
I'm begging you not to say nice things about callbacks

1742275886
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well its ok in small scale, like you have a event listener and you do callback on few events.

1742275906
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you have a web server, framework, ... its hell. 

1742275917
torque!~tachyon@user/torque
<grayhatter> how did zigbin become the default suggestion we all use? <-- it's easy to use and has zig in the name. simple as that

1742275940
torque!~tachyon@user/torque
i don't really care if the service i use exclusively for sharing code snippets on irc is open source, tbh

1742276030
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/d95fa4 i am not sure why the ring.ring_fd and such data isn't being updated!

1742276035
torque!~tachyon@user/torque
the interface is about 99% less junk-filled than most pastebins which is nice

1742277328
grayhatter!~grayhatte@user/grayhatter
I do

1742277440
grayhatter!~grayhatte@user/grayhatter
it's not a perfect heuristic, but FOSS is not only generally higher quailty code, but also tends to trend more towards the ethical side of behavior generally

1742277471
grayhatter!~grayhatte@user/grayhatter
cruelty free software, basically 

1742277642
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, that raw.zig in https://github.com/vedant-pandey/liburing-zig/tree/main/src is that auto generated code from zig? does it include the whole C liburing in it? 

1742277674
grayhatter!~grayhatte@user/grayhatter
stealth_: I'm pretty sure they just autogenerated zig from C headers/c source

1742277697
grayhatter!~grayhatte@user/grayhatter
I noticed that afterwards, I wouldn't have mentioned it if I knew it was so low effort

1742277750
grayhatter!~grayhatte@user/grayhatter
bblack: I'm with you, I'd much rather deal with callbacks than async

1742277755
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i don't get why they are redoing those struct again! i figure they are new to liburing so they don't get it, i have seen many ppl do this approach over the years. 

1742277766
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
after they play around with it for a week or so, they quit. 

1742277917
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
anyways does anyone wana look at https://zigbin.io/d95fa4 not sure why the class info doesn't get updated, even though you see io_uring init function passing. 

1742277951
grayhatter!~grayhatte@user/grayhatter
I would jump in and help with the roast myself, but then again, my attention for one project seems to be a month or two... barely better than a week

1742278047
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there has already been many zig liburing projects out there though. I have seen some myself, the results were too surprising.

1742278074
grayhatter!~grayhatte@user/grayhatter
Yeah, I feel the same way

1742278086
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/Cloudef/zig-aio

1742278090
grayhatter!~grayhatte@user/grayhatter
I was interested in yours up until I found out you were just wrapping python

1742278156
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well you don't really need liburing since you already have io_uring in stdlib!

1742278194
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
liburing is just a front interface for backend io_uring... you guys already have one in stdlib... can't ask for anything more

1742278933
torque!~tachyon@user/torque
it's kind of off topic so these will be my last toughts on the matter, but FOSS being generally higher quality is a nonsense heuristic compared to "does it do what I want". zigbin is easier to use, has a cleaner interface, and works better than pretty much every other pastebin I've seen used in here

1742279041
torque!~tachyon@user/torque
since it is for publicly distributing code snippets anyway, at that point code quality doesn't matter; I'm not interacting with the code, i'm interacting with its interface

1742282109
grayhatter!~grayhatte@user/grayhatter
most code does what I want, the bonus is when it also dosen't do anything toxic along side it... but that aside, who you talk about, and who you support with your attention matters. Small decisions matter, people contributing to FOSS deserve attention, people and project who dont, deserve to be shunned

1742282138
grayhatter!~grayhatte@user/grayhatter
if it doesn't bother me personally, I don't have to care about it, seems like a bad argument for other off topic reasons

1742282158
grayhatter!~grayhatte@user/grayhatter
but night y'all

1742282162
grayhatter!~grayhatte@user/grayhatter
ACTION &

1742311825
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`error: type '?*cimport.struct__object' does not support field access return c.Py_BuildValue("i", self.ptr.ring_fd.*);`

1742311856
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
same thing without the .* as well, 

1742312937
torque!~tachyon@user/torque
it's an optional pointer, you have to unwrap the optional

1742313003
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i think the problem might be in c you do `{Py_tp_new, PyType_GenericNew}` in zig i have done `c.PyType_Slot{ .slot = c.Py_tp_new, .pfunc = c.PyType_GenericNew }` and its giving me errors, its probably a macro

1742313047
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since the class is not creating __new__ none of the fields are being accessible!

1742313156
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/dcfe16

1742313478
grayhatter!~grayhatte@user/grayhatter
stealth_: bruh, you gotta learn to read errors instead of asking IRC to read them for you

1742313571
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it doesn't make sense to me, maybe over time it will, once i figure out what it means... why i am asking here.

1742313604
grayhatter!~grayhatte@user/grayhatter
you're not asking though, you're feeding code and errors into IRC without asking questions, expecting IRC to do all the understanding work for you

1742313665
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats my ways of asking?

1742313667
grayhatter!~grayhatte@user/grayhatter
if you'd asked a question that showed what you did understand, vs what you didn't it'd be really easy to help you

1742313694
bblack!~bblack@wikimedia/bblack-WMF
one of the nicest side-benefits of working in an all-open-source ecosystem, is that the worst case the answers are in the upstream source code, and diving for the answers there is almost always a great way to further your own knowledge and future skills.

1742313737
grayhatter!~grayhatte@user/grayhatter
stealth_: then ask an LLM instead? LLMs don't get tired of answering the same question over and over

1742313767
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
they will just say go talk to zig guys, it works fine in c!

1742313768
bblack!~bblack@wikimedia/bblack-WMF
e.g. I don't regularly contribute patches to the linux kernel, but I keep a checkout of it on my laptop just because it's handy when I have questions about the kernel's exacty behavior or interfaces.

1742313788
bblack!~bblack@wikimedia/bblack-WMF
ditto for any major programming language implementations I use

1742313804
grayhatter!~grayhatte@user/grayhatter
the first problem you had is better for a python support channel, the latter error is something that's super easy to answer, if you phrase the question in a way that shows you've tried to think about it at all

1742313839
grayhatter!~grayhatte@user/grayhatter
but then, if you made the attempt to re-phrase the error in a question using what you already understood, I assume you'd already have the answer

1742313841
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
#python is mostly filled with ppl that know python, not c/cpython 

1742313875
grayhatter!~grayhatte@user/grayhatter
stealth_: #zig is filled with people who know zig more than python... and you're hitting python specific issues, not zig specific

1742313899
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
man, early in the morning.. you are giving me hard time. 

1742313966
grayhatter!~grayhatte@user/grayhatter
stealth_: bruh, early in the morning, your farming the thinking part of your project out to IRC

1742314012
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, if thinking could have solved the problem it would have been solved long time ago. 

1742314023
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
clearly its me not know what the error even talking about.

1742314025
grayhatter!~grayhatte@user/grayhatter
what a wild thing to say

1742314040
grayhatter!~grayhatte@user/grayhatter
then ask a question about the error, instead of pasting code and the error and waiting

1742314076
grayhatter!~grayhatte@user/grayhatter
what does this error mean [error] would have been so much better.

1742314121
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
the link i pasted to code implies that! why else would i have done that? thats normally how ppl on irc ask questions

1742314127
grayhatter!~grayhatte@user/grayhatter
but what that error is saying is so obvious to me, I find it near impossible to believe that you couldn't understand it enough to try something

1742314140
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its easy to show code/error vs wording some weird question

1742314189
grayhatter!~grayhatte@user/grayhatter
stealth_: no, it's not normally how people ask on IRC. Normally the first thing people do is ask if they're allowed to ask questions. Then they post a small segment of the error that's only the actual issues 1/2 the time. Then after being prompted for src code, do they share a paste.

1742314205
grayhatter!~grayhatte@user/grayhatter
> its easy to show code/error vs wording some weird question

1742314219
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
forget it.

1742314248
grayhatter!~grayhatte@user/grayhatter
I know, that's literally what I'm complaining about! It's easier to just post the error, than try to re-phrase it yourself. That's literally why I say you haven't done any of the thinking part

1742314273
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
please, if you can't help me, let someone else do it...

1742314287
grayhatter!~grayhatte@user/grayhatter
almost everyone here wants to help you, very few want to do all of the work for you

1742314337
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this isn't helping me, i been on irc for 10+years, i don't know what this is.

1742314349
grayhatter!~grayhatte@user/grayhatter
what do you think it's saying?

1742314429
grayhatter!~grayhatte@user/grayhatter
what does the error say you're supposed to provide?

1742314471
meidam!~meidam@user/meidam
Seems to me that it says that the type is wrong

1742321535
bw!sid2730@user/betawaffle
Was there a collective decision to start putting the std imports near the bottom of files?

1742321563
bw!sid2730@user/betawaffle
Like is there a github discussion where I can get the background on that?

1742322227
grayhatter!~grayhatte@user/grayhatter
bw: there's no collective decision, you're welcome to place them anywhere

1742322323
grayhatter!~grayhatte@user/grayhatter
there's a trend, to sort "root" names by significance, which puts default things like import std at the bottom. But that's just a choice. You should do what you think makes sense. Do you want imports to be top of the file, or do you want code/main() to be at the top?

1742324315
SultansOfCode!~SultansOf@user/SultansOfCode
How to cast i32 to u32? I want the negative values to become the bigger part of the u32

1742324329
SultansOfCode!~SultansOf@user/SultansOfCode
A real direct cast/interpretation

1742324350
SultansOfCode!~SultansOf@user/SultansOfCode
@as(u32, @intCast(i32value)) triggers error when i32Value < 0

1742324350
grayhatter!~grayhatte@user/grayhatter
ideally, you'd use @intCast() because it's safer, but if I understand what you mean, @bitCast()

1742324388
SultansOfCode!~SultansOf@user/SultansOfCode
I want -1 to become 4294967295

1742324395
Gliptic!~glip@2a01:4f8:c012:91f3::1
then @bitCast

1742324400
SultansOfCode!~SultansOf@user/SultansOfCode
Thanks

1742324402
grayhatter!~grayhatte@user/grayhatter
if you're SURE that you want the sign bit, to be the most significant; @bitCast() but that's often not what you really want, so @intCast should be your default

1742326176
torque!~tachyon@user/torque
<stealth_> https://zigbin.io/dcfe16 <-- I strongly encourage you to read the entire langref from top to bottom (https://ziglang.org/documentation/0.14.0/) since this covers more or less all of the features of the language. since you have written some zig, I think you have enough context to understand what is in there

1742326209
torque!~tachyon@user/torque
many of the things you are looking for are explicitly mentioned in there, such as https://ziglang.org/documentation/0.14.0/#constCast

1742326327
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, already got that figured out @constCast(@ptrCast(&c.PyType_GenericNew)) for some reason can't access the data in struct ptr, not sure why

1742326337
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is no errors

1742326412
torque!~tachyon@user/torque
my recommendation still holds because if you actually read the documentation, you will have knowledge of features/functions you can reach for when you encounter an error rather than faceplating

1742326460
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i remember stuff i have worked on, if i just read it i wont remember it.

1742326482
torque!~tachyon@user/torque
I doubt that

1742326496
grayhatter!~grayhatte@user/grayhatter
but you will remember where to look for the answer

1742326523
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
everyone is different

1742326531
torque!~tachyon@user/torque
but with regards to accessing data, I have no clue without context

1742326546
grayhatter!~grayhatte@user/grayhatter
people are much more alike then they are different

1742326743
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, https://zigbin.io/d95fa4 i use the `io_uring_queue_init()` to initialize, and as you can see at the bottom the fd 3 is created in io_uring, but that fd doesn't show in python side!

1742326797
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
all the struct fields show up as 0

1742326874
torque!~tachyon@user/torque
this snippet is extrmely incomplete. nowhere do you create an instance of `ioUring` these are only types, there's no logic

1742327015
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, everything to do with that class is there. but here is root.zig https://zigbin.io/30a410

1742327103
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have another file to do with version! i am sure you don't care to look at that :p

1742327169
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, this is uring.zig file https://zigbin.io/4072f7

1742327202
torque!~tachyon@user/torque
I still see no initialization of the `ioUring` object

1742327272
torque!~tachyon@user/torque
oh ok so you're using it in uring.zig

1742327273
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
root.zig file line: 35+

1742327314
torque!~tachyon@user/torque
no, line 35 only creates an object using the spec

1742327330
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there are 2 ways in python 1.stack 2.heap, i am using the heap.

1742327332
torque!~tachyon@user/torque
which merely allocates something the size of ioUring, it doesn't actually do anything with it

1742327357
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
as far as i know this is how you go about it

1742327370
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i thought it was weird at first as well. 

1742327375
torque!~tachyon@user/torque
then in uring.zig, you're doing everything on local stack pointers (`var ring`) instead of setting anything on `self` which is presumably the memory actually shared with python

1742327395
torque!~tachyon@user/torque
you're explicitly discarding self in thos methods. you probably want to ask yourself why the hell you're doing that

1742327436
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python the whole package is module, so even if its a function self is passed into it.

1742327440
grayhatter!~grayhatte@user/grayhatter
it's easier to ask IRC 

1742327458
torque!~tachyon@user/torque
ok, but how does the memory get from the uring backend to python

1742327464
torque!~tachyon@user/torque
you have nothing in this code that connects the two

1742327468
torque!~tachyon@user/torque
so you need to figure that out

1742327498
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
the memory for the io_uring.ptr is set by io_uring itself.

1742327515
torque!~tachyon@user/torque
yes, and where are you setting that in memory that is accessible to the python interpreter

1742327521
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
io_uring_queue_exit will free that memory they set

1742327550
torque!~tachyon@user/torque
that doesn't answer the question

1742327567
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono, this is first time i am using python capi as well.

1742327584
torque!~tachyon@user/torque
then you need to figure it out. as grayhatter said earlier this is not a zig question at this point

1742327601
torque!~tachyon@user/torque
I find it hard to believe that nobody in #python is familiar with the python c api

1742327630
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there might be some, but they second they look at zig code, they wont answer, i have asked there before

1742327758
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you know what i am missing you are welcome to point me in that direction.

1742327852
grayhatter!~grayhatte@user/grayhatter
that's why it's helpful to be able to describe things generically, or abstractly, then you can ask questions that will get answers that will get you closer, even if they don't know zig code. Instead of just throwing code at people 

1742327876
torque!~tachyon@user/torque
I don't know the python API. but looking at the code when you call `PyArg_ParseTuple` and pass in `&ring`, you're actually getting a copy of the structure frmo the python side rather than a reference to it. so changes you make are only reflected in your local copy and are not reflected on the python side of things

1742327898
torque!~tachyon@user/torque
that's a hypothesis but I believe it is consistent with the facts

1742327921
torque!~tachyon@user/torque
you'd need to do more research to figure it out, and also the correct way to hand it

1742327963
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
alright, will look into it, why i am only with few basic function so i get the initial process right.

1742327964
torque!~tachyon@user/torque
handle it

1742327968
Gliptic!~glip@2a01:4f8:c012:91f3::1
isn't `ring` supposed to be a *PyObject

1742327993
Gliptic!~glip@2a01:4f8:c012:91f3::1
and ParseTuple would be passed a **PyObject, so that it can assign it

1742327999
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't see how it could work otherwise

1742328074
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can try switching things around. 

1742328099
Gliptic!~glip@2a01:4f8:c012:91f3::1
` In the following description, the quoted form is the format unit; the entry in (round) parentheses is the Python object type that matches the format unit; and the entry in [square] brackets is the type of the C variable(s) whose address should be passed. (Use the "&" operator to pass a variable's address.)`

1742328108
Gliptic!~glip@2a01:4f8:c012:91f3::1
`"O" (object) [PyObject *]`

1742328123
Gliptic!~glip@2a01:4f8:c012:91f3::1
thus, the address of a PyObject* should be passed for the "O" format string

1742328132
grayhatter!~grayhatte@user/grayhatter
Gliptic: you should join #python

1742328147
grayhatter!~grayhatte@user/grayhatter
they clearly could use your help

1742328152
Gliptic!~glip@2a01:4f8:c012:91f3::1
so ring should be a `*PyObject`

1742328158
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
alright

1742328165
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: I wish stealth_ would just RTFM

1742328176
Gliptic!~glip@2a01:4f8:c012:91f3::1
took me 5 seconds to google this

1742328181
torque!~tachyon@user/torque
apparently it is not possible to learn by reading

1742328188
torque!~tachyon@user/torque
we established this earlier

1742328215
grayhatter!~grayhatte@user/grayhatter
Gliptic: he won't as long as you'll do it for him

1742328231
Gliptic!~glip@2a01:4f8:c012:91f3::1
I suppose

1742328236
Gliptic!~glip@2a01:4f8:c012:91f3::1
but abuse doesn't seem to help

1742328255
torque!~tachyon@user/torque
I support both the carrot and the stick, simultaneously

1742328278
grayhatter!~grayhatte@user/grayhatter
torque is probably the most reasonable one here

1742328283
torque!~tachyon@user/torque
anyway I selfishly help people because I usually learn from it so bwa ha ha

1742328289
Gliptic!~glip@2a01:4f8:c012:91f3::1
torque: ditto

1742328292
grayhatter!~grayhatte@user/grayhatter
^ same

1742328324
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
setting ring to PyObject makes the io_uring_queue_init() error no field named 'ptr' in struct

1742328342
torque!~tachyon@user/torque
good luck

1742328343
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: did I at any point tell you to "set ring to PyObject"

1742328350
grayhatter!~grayhatte@user/grayhatter
Gliptic: it's not abuse to refuse to help unless the demand that you have to try to do some of the work too is met 

1742328354
Gliptic!~glip@2a01:4f8:c012:91f3::1
like, can you read the chat

1742328363
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
<Gliptic> so ring should be a `*PyObject`

1742328371
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, and is that PyObject it says there?

1742328377
Gliptic!~glip@2a01:4f8:c012:91f3::1
also

1742328423
Gliptic!~glip@2a01:4f8:c012:91f3::1
when it is a *PyObject, you cannot just pretend it's some iouring thing

1742328429
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well the PyArg_ParseTuple only checks if the argument passed is the right type. 

1742328436
Gliptic!~glip@2a01:4f8:c012:91f3::1
you're gonna have to _do_ something to get it to be a uring thing, right?

1742328458
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: it doesn't in fact do that, because ParseTuple takes a vararg

1742328497
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, have you changed your ring to a *PyObject and passed &ring to ParseTuple now? then you can deal with the other errors you get from that

1742328518
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, so you are saying pass the * PyObject to the PyArg_ParseTuple and pass something to the ...init()

1742328523
Gliptic!~glip@2a01:4f8:c012:91f3::1
no

1742328526
grayhatter!~grayhatte@user/grayhatter
the worst part, is this isn't even about how to use the zig C api

1742328531
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm saying pass a **PyObject to ParseTuple

1742328533
grayhatter!~grayhatte@user/grayhatter
this is just straight python support

1742328541
Gliptic!~glip@2a01:4f8:c012:91f3::1
by doing &ring, where ring is a *PyObject

1742328568
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya. 

1742328597
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well at least i am typing code in zig ;)

1742328719
Gliptic!~glip@2a01:4f8:c012:91f3::1
now you can look at the other parameters you pass to PyArg_ParseTuple and see what types those should be

1742328762
Gliptic!~glip@2a01:4f8:c012:91f3::1
http://web.mit.edu/people/amliu/vrut/python/ext/parseTuple.html

1742328770
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, any idea how to get the ptr field out of ring pyobject? 

1742328792
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm not gonna google more python API things

1742328844
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i couldn't have written that code if i did 0 research/reading.. 

1742328934
torque!~tachyon@user/torque
ok i cant help it. you can probably just ptrcast it but for pete's sake look up some c examples or something to reference. python is not something obscure there are no examples for. hell, ask for a c example in #python and figure out how to translate it to zig, if they aren't willing to work with zig

1742328941
grayhatter!~grayhatte@user/grayhatter
lmao

1742328946
grayhatter!~grayhatte@user/grayhatter
be strong torque 

1742328956
torque!~tachyon@user/torque
i have a sneaking suspicion that perhaps that wasn't why you didn't manage to get help from #python tho

1742328963
grayhatter!~grayhatte@user/grayhatter
resist the urge to help everyone

1742328977
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, you ptr cast it, I could figure that out from the earlier code

1742328981
grayhatter!~grayhatte@user/grayhatter
torque: lol, I thought the same thing but didn't wanna say that :D

1742328994
Gliptic!~glip@2a01:4f8:c012:91f3::1
but you should use O! in the format string to have it type check the object

1742329026
grayhatter!~grayhatte@user/grayhatter
( torque if you couldn't tell, I'm saying it to myself much than to you :D )

1742329054
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in #python ppl normally talk about things they know! and that python, not cpython or c, its way above 99.9% of the ppl on there.

1742329176
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, how are you suppose to get/reference struct ptr from the pyobject?

1742329189
grayhatter!~grayhatte@user/grayhatter
ACTION *stares at Gliptic*

1742329190
Gliptic!~glip@2a01:4f8:c012:91f3::1
but why male models?

1742329235
grayhatter!~grayhatte@user/grayhatter
https://gr.ht/i/blink.gif

1742329246
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: did you not somewhere else in the program create the uring thing and passed it as a *PyObject?

1742329255
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, just do whatever you did there but in reverse

1742329291
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you talking about @ptrCast() ? 

1742329341
Gliptic!~glip@2a01:4f8:c012:91f3::1
https://youtu.be/ecW16rLCgiI?t=58

1742329411
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: yes, ptr cast refers to @ptrCast()

1742329421
Gliptic!~glip@2a01:4f8:c012:91f3::1
and so does ptrcast

1742329469
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
are you telling me to do `var r: ioUring = @ptrCast(ring);` and pass `r.ptr` to the init function ? 

1742329537
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, almost

1742329550
Gliptic!~glip@2a01:4f8:c012:91f3::1
you keep dropping * for some reason

1742329555
bblack!~bblack@wikimedia/bblack-WMF
var r: *IoUring = @ptrCast(something); // sounds closer to what you maybe want

1742329689
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this code does compile https://zigbin.io/27de06 

1742329764
Gliptic!~glip@2a01:4f8:c012:91f3::1
now, what if the passed argument is _not_ a *ioUring?

1742329808
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well that code does compile but when i run, will coredump secretly

1742329818
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
io_uring is probably crying in the background. 

1742329841
Gliptic!~glip@2a01:4f8:c012:91f3::1
you should do something simpler that doesn't involve actual calls to uring

1742329850
Gliptic!~glip@2a01:4f8:c012:91f3::1
get the python API stuff working first

1742329908
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its just a simple init/exit

1742329948
Gliptic!~glip@2a01:4f8:c012:91f3::1
of course I have no idea how you created this ioUring object and got it into python in the first place

1742329979
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/d95fa4 https://zigbin.io/30a410 https://zigbin.io/4072f7

1742330067
Gliptic!~glip@2a01:4f8:c012:91f3::1
.offset = @offsetOf(ioUring, "ptr") + @offsetOf(c.io_uring, "flags"),???

1742330069
Gliptic!~glip@2a01:4f8:c012:91f3::1
what?

1742330079
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
someone here told me that

1742330085
Gliptic!~glip@2a01:4f8:c012:91f3::1
this doesn't make sense even if it made any sense

1742330100
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono, just a noob here

1742330106
Gliptic!~glip@2a01:4f8:c012:91f3::1
ptr is a.. pointer

1742330115
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, this is why I told you to learn C

1742330125
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya

1742330150
Gliptic!~glip@2a01:4f8:c012:91f3::1
there is _nothing_ at _any_ offset after the ptr member

1742330168
Gliptic!~glip@2a01:4f8:c012:91f3::1
oh wait, ptr isn't a pointer?

1742330182
torque!~tachyon@user/torque
it's not a pointer lol

1742330186
Gliptic!~glip@2a01:4f8:c012:91f3::1
then it might make sense, just totally confusing

1742330204
torque!~tachyon@user/torque
its a io_uring c type which I assume is a struct but who knows

1742330204
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its `ptr: c.io_uring` so its c.io_uring so its calling/using the c struct 

1742330237
torque!~tachyon@user/torque
it turns out that when binding a c api (liburing) to a c api (cpython), knowledge of c might be important. ok im done with the sarcastic comments

1742330251
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
the c struct is here https://github.com/axboe/liburing/blob/master/src/include/liburing.h#L122-L133

1742330299
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this would have been real easy with C,  yes but I DON'T WANT TO LEARN C :) or do this in C, just zig is fine.

1742330322
torque!~tachyon@user/torque
<Gliptic> get the python API stuff working first

1742330326
torque!~tachyon@user/torque
going to second this good advice

1742330383
torque!~tachyon@user/torque
write something that creates a python object in zig that just has an int field or something simple with no external dependencies. then initialize it, make sure that things are correctly crossing the zig/python boundary

1742330402
torque!~tachyon@user/torque
this will make it generally simpler for you to diagnose problems than having liburing in the mix

1742330416
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, check that the int reads the same from zig and python etc.

1742330474
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
all that will work fine, the problem will still be c struct being pass from zig to python

1742330489
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you can think of what i am doing as the basic example for that.

1742330489
Gliptic!~glip@2a01:4f8:c012:91f3::1
do it with a c struct

1742330499
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not very basic

1742330512
blurrycat!~blurrycat@user/blurrycat
throwing io_uring in the mix makes it anything but basic

1742330519
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
c.io_uring is calling the c struct though. 

1742330522
torque!~tachyon@user/torque
you haven't really understood your problem very well at all if that's your summary of it

1742330550
torque!~tachyon@user/torque
your problem is generally getting a PyObject on the zig side and manipulating it and seeing those changes back on the python side

1742330586
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
true

1742330644
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is `.offset = @offsetOf(ioUring, "ptr") + @offsetOf(c.io_uring, "flags"),` is legit code or not? i am confused with that one. 

1742330672
Gliptic!~glip@2a01:4f8:c012:91f3::1
as ptr is of type c.io_uring, it seems to make sense, you should just rename it so that the name makes sense

1742330759
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
alright

1742330776
torque!~tachyon@user/torque
can you explain your understanding of what it's doing?

1742330784
torque!~tachyon@user/torque
what confuses you about it

1742330828
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
just what Gliptic said as it being odd. 

1742330842
Gliptic!~glip@2a01:4f8:c012:91f3::1
it being odd kind of hinged on it being a pointer

1742330860
torque!~tachyon@user/torque
I mean it seems like you don't understand what it's doing

1742330862
Gliptic!~glip@2a01:4f8:c012:91f3::1
but still

1742330868
Gliptic!~glip@2a01:4f8:c012:91f3::1
what torque asked is salient

1742330913
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can just change `ptr: * c.io_uring` 

1742330918
Gliptic!~glip@2a01:4f8:c012:91f3::1
the docs also have great things like `tp_basicsize must be a multiple of _Alignof(PyObject)`

1742330932
Gliptic!~glip@2a01:4f8:c012:91f3::1
although, I think that's guaranteed

1742330932
torque!~tachyon@user/torque
if necessary, I will ask someone to institute a rule against asking help with vibe coding in here, since if you can't explain what you think your code is doing, you can't ask reasonable questions about it

1742330956
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: you can just? why do you think you can do that?

1742330976
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, turn it into pointer 

1742330992
Gliptic!~glip@2a01:4f8:c012:91f3::1
can you explain why I thought it was wrong if `ptr` actually was a pointer?

1742331008
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i wasn't sure how the basic should be like, why i was trying it out like i did. 

1742331311
bblack!~bblack@wikimedia/bblack-WMF
grrr I think some debian-unstable update to llvm/clang/etc broke building zig from source

1742331330
bblack!~bblack@wikimedia/bblack-WMF
I haven't tracked it down yet

1742331362
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i probably just forgot to put the * in

1742331383
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: ?? you understand that it _is_ wrong if `ptr` _is_ a pointer?

1742331384
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i named it ptr since it should be a pointer as io_uring manages the memory. 

1742331475
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but i don't manage that memory! i am so confusing. 

1742331484
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
confused *

1742331583
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, if ptr is a pointer, you're gonna have to scrap all your PyMemberDef as they make no sense

1742331633
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i don't mind as long as it works. 

1742331664
Gliptic!~glip@2a01:4f8:c012:91f3::1
which is why I said you should simplify it

1742331739
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
for me this is a simple code, let me just work on it see where it gets me... 

1742331812
Gliptic!~glip@2a01:4f8:c012:91f3::1
is it simple code if you don't know how it works and it segfaults

1742332551
jemius!~jemius@200116b82d5b6600baeb2b7c4b23e0bf.dip.versatel-1u1.de
is there a deeper reason behind a struct's methods only being visible on an instance when the method takes 'self' as a parameter?

1742332575
jemius!~jemius@200116b82d5b6600baeb2b7c4b23e0bf.dip.versatel-1u1.de
I suppose it's so the programmer doesn't accidentally believe the method does stuff on the instance, like changing data there

1742332661
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
to be precise, it's about taking the self type, not about the parameter being named 'self'

1742332681
Gliptic!~glip@2a01:4f8:c012:91f3::1
jemius: if you don't have an instance to the struct, how are you supposed to call methods on it?

1742332726
jemius!~jemius@200116b82d5b6600baeb2b7c4b23e0bf.dip.versatel-1u1.de
Gliptic: through the declaration

1742332736
Gliptic!~glip@2a01:4f8:c012:91f3::1
but they are?

1742332804
Gliptic!~glip@2a01:4f8:c012:91f3::1
or do you mean why you can't do: foo.bar() when bar _doesn't_ take a first parameter of type Foo?

1742332878
jemius!~jemius@200116b82d5b6600baeb2b7c4b23e0bf.dip.versatel-1u1.de
Gliptic: solving this execrise should answer it: https://codeberg.org/ziglings/exercises/src/branch/main/exercises/065_builtins2.zig#L73

1742332890
Gliptic!~glip@2a01:4f8:c012:91f3::1
so yes, that's like calling some function with bar(foo) when it takes no parameters

1742333101
bblack!~bblack@wikimedia/bblack-WMF
if anyone else runs into issues building zig on debian-unstable: it's something that went wrong with the latest clang/llvm/etc package updates to versions 1:19.1.7-3 .  Apparently downgrading back to 1:19.1.7-1+b1 makes everything work again.  that's as far as I got.

1742333131
torque!~tachyon@user/torque
the main reason imo is just consistent behavior: method-like calls need to be passed a self object or pointer as the first parameter

1742333149
bblack!~bblack@wikimedia/bblack-WMF
(was segfaulting down in libllvm when building stage3 from zig2)

1742333163
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
Foo.bar() are arguably method-style calls as well

1742333185
torque!~tachyon@user/torque
you can always access functions declared in a struct through the struct type, i.e. `foo.bar()` is equivalent to `Foo.bar(foo)` (with some minor caveats, like if bar takes a pointer instead of the object directly)

1742333210
torque!~tachyon@user/torque
that's not a method-style call, it's simply calling a function in a namespace

1742333240
torque!~tachyon@user/torque
you could argue that `.` being both the namespace and member access operators adds confusion, but I deplore `::` and htink that zig made the right choice here

1742333272
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
yes, but my point is we're dangerously close to debating semantics here,

1742333603
torque!~tachyon@user/torque
generally disagree

1742333625
torque!~tachyon@user/torque
the distinction between a type and an object of that type is a critical distinction to make

1742333675
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
to me that clashes with your dislike of `::`

1742333772
torque!~tachyon@user/torque
I don't think so. `::` is a distinction reserved for namespaces, which zig does not explicitly have (instead, aggregate types are implicitly namespaces)

1742333813
torque!~tachyon@user/torque
I don't think distinguishing from a namespace (a struct with no fields but with decls) and a type (a struct with fields and maybe or maybe not decls) is a useful distinction

1742333905
torque!~tachyon@user/torque
(in ancient history zig did have an actual namespace keyword and I think it is good that it is gone)

1742333924
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
and yet we want the ergonomy of referring to both types and instances via `.` while being a bit pedantic about the distinction

1742333995
torque!~tachyon@user/torque
a type wouldn't really be a first class compile-time object otherwise. and as I claimed earlier, I think distinguishing between a type and an instance is critical (i.e. you have to know what you're operating on in the first place)

1742334003
torque!~tachyon@user/torque
I don't think the distinction is pedantic, in other words

1742334022
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
ok im seeing that this isn't a useful discussion to be having, im already bikeshedding and philosophizing

1742335865
grayhatter!~grayhatte@user/grayhatter
Gliptic> oh wait, ptr isn't a pointer? <- lol, I did the EXACT same thing, in the same order too

1742335960
grayhatter!~grayhatte@user/grayhatter
bblack: debugging debian * llvm sounds awful... good luck

1742336122
grayhatter!~grayhatte@user/grayhatter
I'm with torque, I think the simplicity of how namespaces work is drastically more valuable than what you could get by having a different operator for namespace functions vs methods

1742336194
grayhatter!~grayhatte@user/grayhatter
there's nothing wrong with calling `Namespace.someMethod(@as(*Namespace, some_opaque), ...);` so why pretend like methods are different? 

1742336262
grayhatter!~grayhatte@user/grayhatter
Plus, the compiler already does classify them differently, so that `some_type.function()` is an error if function isn't a method, so there's no loss of specificity 

1742336471
grayhatter!~grayhatte@user/grayhatter
and for what it's worth... I also don't disagree with tranzystorekk's take either. He's right about how it is optional ambiguity. There's a world where that ambiguity doesn't exist... but I just happen to like the ease of never needing to remember if I want `::` or `.`, beacuse `::` is uglier than \t 

1742336473
grayhatter!~grayhatte@user/grayhatter
:P

1742336597
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
i also stand by having a unified . operator in the end :D

1742339830
bw!sid2730@user/betawaffle
How is it that zig has such phenomenal implementations in its standard library? I don’t think I’ve seen a language that does low-level json parsing right except for zig

1742339972
SultansOfCode!~SultansOf@user/SultansOfCode
There is a way to convert a [*c]u8 to something that {s} can print?

1742340055
torque!~tachyon@user/torque
if it's properly zero terminated you can use `std.mem.span` to turn it into a sentinel terminated slice

1742340085
torque!~tachyon@user/torque
(or `std.mem.sliceTo` but that one is less purpose-built)

1742340205
SultansOfCode!~SultansOf@user/SultansOfCode
Thanks, lemme try

1742340943
SultansOfCode!~SultansOf@user/SultansOfCode
torque: it works, but still a "pointer" it seems, so anything that goes to that original address, mess up with the result

1742341002
torque!~tachyon@user/torque
yes, slices are pointers

1742341025
torque!~tachyon@user/torque
you have to explicitly copy it with `allocator.dupe` or similar if you don't want it to be a reference to the original data

1742341031
grayhatter!~grayhatte@user/grayhatter
slices are a pointer (with a built in length)

1742341096
grayhatter!~grayhatte@user/grayhatter
oh, sorry, I was confused about the original question

1742341629
SultansOfCode!~SultansOf@user/SultansOfCode
gpa_allocator.dupe(u8, std.mem.span(fileName)) returns []u8 and I need it to be [*:0]u8

1742341669
grayhatter!~grayhatte@user/grayhatter
SultansOfCode: dupeZ

1742341673
SultansOfCode!~SultansOf@user/SultansOfCode
And dupeZ gives me error

1742341677
grayhatter!~grayhatte@user/grayhatter
what's the error?

1742341677
cancername!~cancernam@user/cancername
which?

1742341695
SultansOfCode!~SultansOf@user/SultansOfCode
error: type '[*:0]u8' does not support field access \n if (slice.len == 0 and std.meta.sentinel(Slice) == null) return &[0]u8{};

1742341708
SultansOfCode!~SultansOf@user/SultansOfCode
On slice.len

1742341743
cancername!~cancernam@user/cancername
`[*:0]u8` isn't a slice because it only has a terminator, not a length

1742341744
grayhatter!~grayhatte@user/grayhatter
why do you have slice.len and sentinel(Slice)?

1742341766
SultansOfCode!~SultansOf@user/SultansOfCode
I don't

1742341770
SultansOfCode!~SultansOf@user/SultansOfCode
This code is from std.mem

1742341786
SultansOfCode!~SultansOf@user/SultansOfCode
C:\ProgramData\chocolatey\lib\zig\tools\zig-windows-x86_64-0.13.0\lib\std\mem.zig:4117:14: error: type '[*:0]u8' does not support field access

1742341787
SultansOfCode!~SultansOf@user/SultansOfCode
    if (slice.len == 0 and std.meta.sentinel(Slice) == null) return &[0]u8{};

1742341787
SultansOfCode!~SultansOf@user/SultansOfCode
        ~~~~~^~~~

1742341795
cancername!~cancernam@user/cancername
you can convert to `[:0]u8` by calling `std.mem.span`, or slicing with the length if you have it

1742341802
grayhatter!~grayhatte@user/grayhatter
what happened to your call to std.mem.span()?

1742341817
SultansOfCode!~SultansOf@user/SultansOfCode
romFileName = try gpa_allocator.dupeZ(u8, std.mem.span(fileName));

1742341826
SultansOfCode!~SultansOf@user/SultansOfCode
romFileName is [*:0]u8

1742341833
grayhatter!~grayhatte@user/grayhatter
where did you get [*:0]u8? I thought you had a [*c]u8?

1742341845
SultansOfCode!~SultansOf@user/SultansOfCode
fileName is [*c]u8 from raylib

1742341943
torque!~tachyon@user/torque
romFileName should be `[:0]u8` not `[*:0]u8`. if you need the many pointer, access it with `romFileName.ptr`

1742341987
torque!~tachyon@user/torque
but this sounds completely different from the question you originally asked

1742341989
grayhatter!~grayhatte@user/grayhatter
the order you're describing it doesn't make sense to me

1742342008
grayhatter!~grayhatte@user/grayhatter
^ 100% what torque said, you must be omitting important details

1742342045
grayhatter!~grayhatte@user/grayhatter
or I guess it's equally likely I need more caffeine 

1742342232
SultansOfCode23!~SultansOf@user/SultansOfCode
Sorry, power failure due to storm

1742342255
torque!~tachyon@user/torque
you can't call `sliceAsBytes` on a many pointer

1742342265
SultansOfCode23!~SultansOf@user/SultansOfCode
Well, there is a function from raylib that returns [*c]u8 and other functions (wrappers) expect argument to be [*:0]u8

1742342268
grayhatter!~grayhatte@user/grayhatter
SultansOfCode23: depending on what the last thing you saw, you omitting some important details

1742342272
torque!~tachyon@user/torque
go back and study the difference between [*:0]u8 and [:0]u8

1742342287
SultansOfCode23!~SultansOf@user/SultansOfCode
I know the diffs

1742342327
grayhatter!~grayhatte@user/grayhatter
SultansOfCode23: then you just need to learn how to convert between them, which you have already... so what's missing?

