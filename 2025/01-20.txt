1737357499
textyash!~textyash@user/textyash
learning zig from zig.guide. I'm completing the fizz buzz exercise:

1737357499
textyash!~textyash@user/textyash
```zig

1737357500
textyash!~textyash@user/textyash
pub fn fbSwitch(limit: u16) !void {

1737357500
textyash!~textyash@user/textyash
    const stdout = std.io.getStdOut().writer();

1737357501
textyash!~textyash@user/textyash
    var num: u16 = 1;

1737357501
textyash!~textyash@user/textyash
    while (num <= limit) : (num += 1) {

1737357502
textyash!~textyash@user/textyash
        stdout.print("{d} {s}", .{ num, switch (num) {

1737357502
textyash!~textyash@user/textyash
            num % 3 == 0 => "b",

1737357503
textyash!~textyash@user/textyash
            num % 5 == 0 => "f",

1737357503
textyash!~textyash@user/textyash
            num % 3 == 0 and num % 5 == 0 => "fb",

1737357504
textyash!~textyash@user/textyash
            else => "",

1737357504
textyash!~textyash@user/textyash
        } });

1737357505
textyash!~textyash@user/textyash
    }

1737357505
textyash!~textyash@user/textyash
}

1737357506
textyash!~textyash@user/textyash
```

1737357506
textyash!~textyash@user/textyash
I get this error:

1737357507
textyash!~textyash@user/textyash
error: unable to evaluate comptime expression

1737357507
textyash!~textyash@user/textyash
            num % 3 == 0 => "b",

1737357524
textyash!~textyash@user/textyash
\`\`\`

1737357525
textyash!~textyash@user/textyash
testing code block

1737357525
textyash!~textyash@user/textyash
\`\`\`

1737357863
torque!~tachyon@user/torque
switch prongs aren't boolean expressions

1737357909
torque!~tachyon@user/torque
I mean, technically you could use one there, but as the error indicates, the value of the switch prong has to evaluate at compile time

1737357920
torque!~tachyon@user/torque
whereas your num is only known at runtime

1737362540
Zorgatone!~Zorgatone@user/Zorgatone
Hey hello everyone, I'm new to the channel and Zig in general. For anyone online with a few minutes available to chat, I was wondering, on which project are you currently using zig?

1737362593
stag1e!~stag1e@user/stag1e
`.{}` < what does the dot stand for in this construct?

1737362630
Zorgatone!~Zorgatone@user/Zorgatone
Should be a struct initializer, seems like an anonimous struct literal (empty tuple)

1737362658
Affliction!affliction@idlerpg/player/affliction
"I'm not naming the struct's name, you figure it out", more or less.

1737362706
Affliction!affliction@idlerpg/player/affliction
Zorgatone: haven't committed to using it on anything more than a few thousand lines yet, and probably won't until 1.0, mostly just toy projects.

1737362732
stag1e!~stag1e@user/stag1e
I'm just wondering why we cannot write { ... } directly and need to add a dot in front. I suppose it is an indication that the type needs to be inferred

1737362741
Affliction!affliction@idlerpg/player/affliction
recently been using it to learn opengl

1737362752
Zorgatone!~Zorgatone@user/Zorgatone
I first heard about Zig and started to learn about it when Bun came out, it's a very interesting language

1737362882
Zorgatone!~Zorgatone@user/Zorgatone
Affliction: nice, I have books for opengl and wanted to learn ig, but they use C or C++. I know C and a bit of C++ but I would try again to learn OpenGL on a newer language like Zig, it seems a nice idea

1737363548
Affliction!affliction@idlerpg/player/affliction
stag1e: my wild speculation? To simplify parsing, .{ ... } (or Type { ... }) unambiguously will represent a struct literal, whereas { ... } also represents a scope block. This is someone who actually knows' cue to correct me.

1737365567
textyash!~textyash@user/textyash
torque so what's wrong with num being known only at runtime? Have I missed reading something?

1737365621
textyash!~textyash@user/textyash
The answers on zig.guide for the fizzbuzz post don't discuss about comptime or runtime. Their answers don't have this error.

1737365852
Zorgatone!~Zorgatone@user/Zorgatone
if you variabile is var, not const, specify the type and how many bytes (ie. var myInt: i32 = 10)

1737365868
Zorgatone!~Zorgatone@user/Zorgatone
otherwise it's inferred as comptime_int

1737366025
Zorgatone!~Zorgatone@user/Zorgatone
https://zig.guide/language-basics/comptime

1737383247
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
textyash: https://ziglang.org/documentation/master/#switch here it does specifically say switch expressions must be comptime known 

1737383266
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I don’t know the reasoning, but it is in the documentation, at least

1737384849
Pistahh!~Pistahh@user/pistahh
bwbuhse: it is usually because compilers build a jump table and they can only do it if they know each input during compilation

1737384865
Pistahh!~Pistahh@user/pistahh
https://en.wikipedia.org/wiki/Branch_table

1737385260
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
makes sense! thanks

1737392770
In3f4bl3!~dv0@user/In3f4bl3
There's any real jobs using zig?

1737393879
constxd!~constxd@user/constxd
no

1737393905
torque!~tachyon@user/torque
bun and tigerbeetle are both developed by real companies

1737393928
torque!~tachyon@user/torque
but in general zig is kind of immature for that

1737393975
torque!~tachyon@user/torque
there are probably other startups using zig, but big companies likely not

1737393980
grayhatter!~grayhatte@user/grayhatter
I've seen a few zig projects that when released, thank their employer for permission, so I think there's a lot more than just bun & tigerbeetle

1737394023
torque!~tachyon@user/torque
that doesn't really sound like they were being paid to write zig, as much as they had a shitty intellectual property clause in their contract

1737394049
torque!~tachyon@user/torque
since most companies don't open source their code, it's hard to estimate just from publically visible stuff

1737394127
torque!~tachyon@user/torque
I wrote zig at my last job, but that was one-off ground tooling for a satellite mission that would not need to see ongoing maintenance after mission completion

1737394152
torque!~tachyon@user/torque
one of the bigger challenges with zig is the amount of stdlib (and, to a lesser extent, language churn)

1737396177
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I've been trying to get our architect into Zig and maybe convice him to let us try some stuff out in it but he's busy

1737396182
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
He did say he wants to try Zig, though

1737397154
grayhatter!~grayhatte@user/grayhatter
bwbuhse: perhaps this is a chance to improve your "engineering" skills, and attempt to invoke the sunk cost fallacy? :D

1737398656
coleman!~coleman@static.87.86.161.5.clients.your-server.de
I can only speak for myself, but if I see Zig on your blog, it's a plus.

1737398676
coleman!~coleman@static.87.86.161.5.clients.your-server.de
and it will be a plus for cool places to work

1737398883
coleman!~coleman@static.87.86.161.5.clients.your-server.de
if I'm interpreting grayhatter correctly, doing try to sell some big-bang rewrite, or even a greenfield project. go rogue with something tiny. 

1737398921
coleman!~coleman@static.87.86.161.5.clients.your-server.de
working code usually wins

1737399891
dsal!sid13060@id-13060.lymington.irccloud.com
Is there anything in the stdlib that represents dates and times?  I can find time_t like stuff, but I want to parse a date and don't want to use libc.

1737399937
ifreund!2940d10f8b@user/ifreund
dsal: theres no datetime stuff in the std but there are several pure-zig implementations floating around on the web

1737399971
ifreund!2940d10f8b@user/ifreund
related: https://github.com/ziglang/zig/issues/8396

1737400059
ifreund!2940d10f8b@user/ifreund
I'm not sure shipping the timezone data files with the zig standard library makes sense

1737400127
ifreund!2940d10f8b@user/ifreund
It feels like a similar situation to zig intentionally avoiding shipping unicode data files

1737400173
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, date and time is one of those things that people feel that they understand but definitely do not.

1737400222
dsal!sid13060@id-13060.lymington.irccloud.com
And knwoledge of tzdata is something that would probably break normal people.

1737400255
ifreund!2940d10f8b@user/ifreund
hah

1737400261
dsal!sid13060@id-13060.lymington.irccloud.com
I could just ignore that these things are time and shove them all into a struct with numeric fields… I guess except there are timezone offsets in these logfiles and now I have to start adjusting times and dates.

1737400274
coleman!~coleman@static.87.86.161.5.clients.your-server.de
I worked with a guy who lived his life by UTC clocks. he was not a happy man.

1737400281
ifreund!2940d10f8b@user/ifreund
yeah timezones changing is not something a lot of software is written to handle...

1737400307
dsal!sid13060@id-13060.lymington.irccloud.com
I live in a timezone that's pretty far off from most of my coworkers and also doesn't observe Daylight Saving Time, so I might as well use UTC.

1737400310
ifreund!2940d10f8b@user/ifreund
and it doesn't happen often enough for the edge cases it creates to see any kind of proper testing, stuff just breaks

1737400393
motiejus!~motiejus@88.223.107.21
I didn't aim to a "zig company", but anecdotally out of the past 3 jobs I had over the last decade all 3 had zig and I was paid to write zig in 2 of them. Only 1 of the 3 is public about it.

1737400401
coleman!~coleman@static.87.86.161.5.clients.your-server.de
question: does any Zig package embed a database/table of Unicode stuff?

1737400432
dsal!sid13060@id-13060.lymington.irccloud.com
How do I go about using a package?  e.g., assuming https://github.com/nektro/zig-time is reasonable (from zigistry), what do I do to start using it?

1737400569
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
dsal: this package does not support the standard zig package manager, opting for zigmod instead. I've never used zigmod so I can't help you there - I would use a library I wrote instead

1737400579
ifreund!2940d10f8b@user/ifreund
dsal: that one doesn't have a build.zig.zon manifest file so it might be a bit awkward to use

1737400588
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
https://github.com/rockorager/zeit

1737400590
dsal!sid13060@id-13060.lymington.irccloud.com
Ah, OK. 

1737400593
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
zig-time also doesn't do timezones

1737400594
ifreund!2940d10f8b@user/ifreund
here's docs on the manifest file: https://github.com/ziglang/zig/blob/master/doc/build.zig.zon.md

1737400616
ifreund!2940d10f8b@user/ifreund
I bet rockorager's code is pretty good, I'd use that

1737400621
dsal!sid13060@id-13060.lymington.irccloud.com
Awesome, thanks.

1737400625
dsal!sid13060@id-13060.lymington.irccloud.com
yeah, good name, too.  heh

1737400669
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah man, that name was the motivation I needed to actually publish it instead of just something I used

1737400718
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Over at Raku we bake in a rather crazy amount of stuff. Our C build is extremely esoteric. I think a comptime-driven table of some of these Unicode things might be a nice way to get Zig in the mix https://github.com/MoarVM/MoarVM/blob/main/src/strings/unicode_gen.h

1737400748
ifreund!2940d10f8b@user/ifreund
datumzeit would be a bit funnier as a play on the english datetime

1737400759
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
oooh nice

1737400761
coleman!~coleman@static.87.86.161.5.clients.your-server.de
if there is prior art I'd like to study it

1737400776
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
coleman: codeberg.org/atman/zg

1737400795
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
The ghostty codebase also does a comptime unicode table

1737400796
grayhatter!~grayhatte@user/grayhatter
uber uses zig too IIRC

1737400806
grayhatter!~grayhatte@user/grayhatter
uber is pretty big, isn't it?

1737400826
ifreund!2940d10f8b@user/ifreund
iirc uber uses the zig toolchain and not so much the zig language

1737400827
coleman!~coleman@static.87.86.161.5.clients.your-server.de
appreciate the tips 😎

1737400854
grayhatter!~grayhatte@user/grayhatter
ifreund: shhhh, that small detail completely refutes my point... best not to point it out :P

1737400929
ifreund!2940d10f8b@user/ifreund
even funnier (to me at least) would be dattelzeit

1737400941
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
what is dattel?

1737400941
ifreund!2940d10f8b@user/ifreund
(dattel = date the food)

1737400955
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
date the food?

1737400963
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Is that like an expiration date on food packaging?

1737400964
ifreund!2940d10f8b@user/ifreund
so dattelzeit is like time to eat dates

1737400969
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ohhhh

1737400979
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
haha that is a good one

1737401109
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
ghostty's approach to this has some, downsides, https://github.com/ghostty-org/ghostty/discussions/3218

1737401209
ifreund!2940d10f8b@user/ifreund
tranzystorekk: oh interesting, that's a limitation/bug of the zig build system not ghostty's design choice though

1737401240
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
maybe, but we have to patch the allocator in void nonetheless

1737401300
ifreund!2940d10f8b@user/ifreund
the correct fix would be to patch zig's std.Build code to separate libc configuration for the build host and the target

1737401311
ifreund!2940d10f8b@user/ifreund
right now std.Build conflates the two, leading to that issue

1737401439
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
sounds like a non-trivial patch, i should probably report it on zig's issues first

1737401700
ifreund!2940d10f8b@user/ifreund
Yes, that would be a good start

1737401733
ifreund!2940d10f8b@user/ifreund
feel free to ping me here when you do and I can add any clarifications I think are relevant

1737402126
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
ifreund: https://github.com/ziglang/zig/issues/22559

1737402580
ifreund!2940d10f8b@user/ifreund
dropped a comment :)

1737402688
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
thanks!

1737403457
dsal!sid13060@id-13060.lymington.irccloud.com
I'm kind of cargo-culting here, but I did the `zig fetch` thing to get zeit into my project, but I don't know how to get my source able to import it.  I'm assuming I have to reference it from my build file, but I don't know how.  Can someone show me an example?

1737404005
dsal!sid13060@id-13060.lymington.irccloud.com
I found a blog post that describes the mechanism, but it apparently has changed since whenever this was written.

1737404117
andrewrk!~andrewrk@mail.ziglang.org
dsal: so you edited your build.zig.zon to include the dependency?

1737404147
andrewrk!~andrewrk@mail.ziglang.org
next step is to call https://ziglang.org/documentation/master/std/#std.Build.dependency in your build.zig script

1737404152
dsal!sid13060@id-13060.lymington.irccloud.com
The blog post I found suggested it'd be something like `exe.addModule("zeit", zeit.module("zeit"));` but the compiler tells me `addModules` doesn't exist.

1737404222
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
exe.root_module.addImport("zeit", zeit.module("zeit"));

1737404309
dsal!sid13060@id-13060.lymington.irccloud.com
Hmm...  This one fails with thread 116723782 panic: unable to find artifact 'zeit' – I feel like I'm doing something else wrong.

1737404390
dsal!sid13060@id-13060.lymington.irccloud.com
Perhaps this definition of `zeit` is also incorrect.  It's something like const zeit = b.dependency("zeit", .{.target = target, .optimize = optimize, });

1737404906
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
looks correct

1737404951
dsal!sid13060@id-13060.lymington.irccloud.com
Is there something other than the `zig fetch --save` that I need to do?  It made something sensible looking in the .zon file, but I don't have a mental model for this build system.

1737405090
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
dsal: https://github.com/rockorager/comlink/blob/2993fd2b730098ce2050c53b68c66bb6a98e41da/build.zig#L40-L64

1737405134
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
unable to find artifact makes me think you are trying to link to a library?

1737405139
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Do you have your build.zig available somewhere?

1737405149
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
When you use a zig module you don't need to link to it

1737405212
dsal!sid13060@id-13060.lymington.irccloud.com
Oh yeah, that's it.  The thing I found suggested I also needed to add the link.  So now I just need to figure out how to use this thing.  :)

1737405225
dsal!sid13060@id-13060.lymington.irccloud.com
Thanks!

1737405255
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
The readme covers most use cases ;)

1737405427
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah.  I still haven't quite learned how to read zig docs, but I started on something simpler which is basically just printing out a unix timestamp.

1737408343
grayhatter!~grayhatte@user/grayhatter
can equivilant anonymous contiainers within the same namespace be unique?

1737408500
grayhatter!~grayhatte@user/grayhatter
i.e. now that zig refuses to cast one container type to a matching one, a few APIs have become needlessly hard to use. The case I just had to rewrite was `std.io.poll(..., enum{ srv }, ...);` would be nice if I could use `enum {srv}` in the 3 places I need it instead of defining a new type

1737408542
grayhatter!~grayhatte@user/grayhatter
but this also required I refactor a bunch of tests in another project too

1737408922
dsal!sid13060@id-13060.lymington.irccloud.com
My test fails on windows because the strftime %Z thing is different there because obviously.  I guess I'll just remove that.

1737409110
torque!~tachyon@user/torque
what is wrong with writing `const whatevername = enum {srv};`?

1737409167
torque!~tachyon@user/torque
the way to make a type unique is to bind it to a name

1737409293
dsal!sid13060@id-13060.lymington.irccloud.com
Now that I am not using libc, I can still not cross compile to FreeBSD because of some other reason I don't actually care enough about to investigate.  heh

1737409515
andrewrk!~andrewrk@mail.ziglang.org
dsal: https://github.com/ziglang/zig/blob/b9198b708f8accb41fdb3f11bf635d63fbff461d/lib/std/Target.zig#L703

1737409527
andrewrk!~andrewrk@mail.ziglang.org
libc is always linked when targeting freebsd

1737409564
andrewrk!~andrewrk@mail.ziglang.org
I didn't know this before, but it turns out freebsd does actually have a stable syscall ABI other than libc, so, with some work to enhance the std lib, that setting can be changed to be the other way

1737409586
dsal!sid13060@id-13060.lymington.irccloud.com
The error I got when trying to compile was:  error: ld.lld: undefined symbol: environ [long stack]

1737409618
dsal!sid13060@id-13060.lymington.irccloud.com
It's not critical, I just have a TrueNAS box and wondered if I could drop something onto it with low effort.  I don't actually need anything.

1737411310
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
zig on watchos POG

