1744276942
ismael!~ismael@sourcemage/ismael
 /quit

1744277224
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm any insight on when to use directEnumArray vs EnumMap? They both look the same honestly, except the latter has a bunch of convenience methods associated with it

1744277612
tsujp!497e1f7b6a@sourcehut/user/tsujp
actually it looks like enummap can keep the backing array dense since it creates an Indexer

1744277665
tsujp!497e1f7b6a@sourcehut/user/tsujp
but that's probably only useful if one has a large enum tag type which is also sparse, if one is using an enum literal it doesn't look like any advantage is offered

1744300339
lemons!~doggie@user/doggie-:49517
does a hashmap init.. hm ok let me word

1744300384
lemons!~doggie@user/doggie-:49517
so im doing a coordinate map for tile-bound collision, 255*255*10 tiles or so

1744300431
lemons!~doggie@user/doggie-:49517
hash is x + y*maxx + z*maxx*maxy, my question is will it init space for the entire map or will it only use as much as needed

1744300460
lemons!~doggie@user/doggie-:49517
as needed.. egh i mean will i have half a map inited if i only have one entry 

1744300474
lemons!~doggie@user/doggie-:49517
or is it a hashtree or such

1744300494
grayhatter!~grayhatte@user/grayhatter
lemons: have you read the docs for std.HashMap yet?

1744300540
lemons!~doggie@user/doggie-:49517
if you mean the pub fn HashMap descriptor, yes

1744300547
lemons!~doggie@user/doggie-:49517
otherwise, no

1744300604
grayhatter!~grayhatte@user/grayhatter
which part of "It provides fast operations (lookup, insertion, deletion) with quite high load factors (up to 80% by default) for low memory usage." confusing?

1744300638
lemons!~doggie@user/doggie-:49517
didnt catch the last four words

1744300646
lemons!~doggie@user/doggie-:49517
thanks ig

1744300670
grayhatter!~grayhatte@user/grayhatter
the hash map will grow in size to stay close to 80% load

1744300678
grayhatter!~grayhatte@user/grayhatter
IIRC it doesn't shrink itself 

1744300711
grayhatter!~grayhatte@user/grayhatter
there's also the `max_load_percentage: u64` configuration flag too

1744300757
grayhatter!~grayhatte@user/grayhatter
unrelated... I'm also now considering, it's very odd to store a "percentage" into a u64

1744300776
grayhatter!~grayhatte@user/grayhatter
u7 would have been better but, such is life

1744300923
lemons!~doggie@user/doggie-:49517
such it is

1744300968
lemons!~doggie@user/doggie-:49517
btw there a hasher for u32s?

1744300985
lemons!~doggie@user/doggie-:49517
or u64.. tbh either works

1744301062
grayhatter!~grayhatte@user/grayhatter
yes, 1 second, have to look it up

1744301198
grayhatter!~grayhatte@user/grayhatter
I've been using https://ziglang.org/documentation/master/std/#std.hash.uint32

1744301295
grayhatter!~grayhatte@user/grayhatter
huh there's more in here than I remember https://ziglang.org/documentation/master/std/#std.hash

1744301319
grayhatter!~grayhatte@user/grayhatter
most seem to have a hash u32 with a default seed

1744302176
lemons!~doggie@user/doggie-:49517
thx

1744302306
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
i guess i was greedy with the arrays :)

1744302327
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
oops, ^^ wrong window, sorry... :D

1744319622
Cuboid!~Cuboidigo@user/Cuboidigon
how would i pass an allocator as a function argument

1744319711
Cuboid!~Cuboidigo@user/Cuboidigon
like what type would i put in the function definition to do that

1744319733
grayhatter!~grayhatte@user/grayhatter
allocator: std.mem.Allocator,

1744319777
grayhatter!~grayhatte@user/grayhatter
that's a super common example you can find nearly anywhere... so was the question deeper than that?

1744319824
Cuboid!~Cuboidigo@user/Cuboidigon
thanks

1744319839
Cuboid!~Cuboidigo@user/Cuboidigon
and no it wasnt

1744320221
clevor!sid649024@id-649024.hampstead.irccloud.com
In Zig, why do some builtin functions start with a lowercase letter, yet others start with an uppercase letter, like `@typeInfo` and `@TypeOf`?

1744320405
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
generally anything that starts with a capital letter is a type

1744320413
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
@TypeOf return a type "type"

1744320422
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
@This() returns a type

1744320448
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
@typeInfo returns a tagged union

1744320787
clevor!sid649024@id-649024.hampstead.irccloud.com
Okay

