1745979622
norineko!~norineko@user/norineko
 160

1745979623
norineko!~norineko@user/norineko
60

1745979625
norineko!~norineko@user/norineko
60

1745979627
norineko!~norineko@user/norineko
60

1745979629
norineko!~norineko@user/norineko
60

1745981441
norineko!~norineko@user/norineko
fff

1745981480
norineko!~norineko@user/norineko
sorry about that, trying to use a vt100 with the senpai irc client is not a good idea

1745981562
Drixtan!~Drixtan@user/Drixtan
comlink?

1745999114
lemons!~doggie@user/doggie-:49517
whats the proper way to compare structs

1745999144
lemons!~doggie@user/doggie-:49517
OH nevermind 

1745999160
lemons!~doggie@user/doggie-:49517
misread std.meta.eql as std.mem.eql

1745999828
sunflr!~sunflr@user/sunflr
what's std.meta.sql for?

1746008502
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how do I handle the content of a read file? Line by line?

1746008587
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
split the content based on \n?

1746008624
Affliction!affliction@idlerpg/player/affliction
if you've loaded the whole file, pretty much that, yeah.

1746008647
Affliction!affliction@idlerpg/player/affliction
Might also want to strip off \r just in case it uses DOS/Windows style endings

1746008721
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ah they use a while loop for it: https://ziggit.dev/t/split-the-line-by-delimiter-to-get-spesific-column-in-csv-file/6217

1746008981
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I also looked quickly at split functions, there is not a splitN it seems, like https://pkg.go.dev/bytes#SplitN or https://pkg.go.dev/bytes#Cut

1746009148
Gliptic!~glip@2a01:4f8:c012:91f3::1
flower_, you can do SplitN with tokenize, a for(0..N-1) and .rest()

1746009168
Gliptic!~glip@2a01:4f8:c012:91f3::1
although it's not hard writing your own version

1746009177
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ah

1746011425
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: What Nix shell/flake do you use to build Zig using cmake? I made my own, and I am getting a bunch of undefined symbols like `std::_V2::system_category()` when linking the stage 3 executable. Here is the flake I use, which is just a modified version of my Rust programming one. https://usercontent.irccloud-cdn.com/file/yP0BDOGQ/flake.nix

1746011545
clevor!sid649024@id-649024.hampstead.irccloud.com
I am having the problem because I can't build using my current Zig compiler from commit d038676a1f46ecab2bd095d3503ab05bcd8de58c to 8facd99d41b1290f9b29ec22c9dcce680d972810. I am trying again using commit 8e79fc64cddf6832e4446b20d282084ae69f93ae.

1746011989
bw!sid2730@user/betawaffle
is it a good or bad idea to use a zero-length array field at the end of a struct to indicate extra runtime-sized data after the struct?

1746012032
bw!sid2730@user/betawaffle
(obviously i would also document it)

1746012059
clevor!sid649024@id-649024.hampstead.irccloud.com
It looks like the cause of my first problem was the Nixpkgs LLVM libraries.

1746012059
bw!sid2730@user/betawaffle
but i'm curious if that will be misunderstood by the compiler, or if it's ok

1746012093
bw!sid2730@user/betawaffle
an example of a misunderstanding would be to give me a bogus address if i try to take the address of that field

1746012141
bw!sid2730@user/betawaffle
kinda wish i could have something like `opaque` at the end of a struct to explicitly specify this, but w/e

1746012321
ifreund!2940d10f8b@user/ifreund
bw: you can also just have a function that takes a pointer to the struct and returns a pointer to your extra data

1746012377
ifreund!2940d10f8b@user/ifreund
I question whether sharing a allocation for the struct and the extra data is really worth the additional complexity though

1746012408
bw!sid2730@user/betawaffle
true, and i want to have that as well, i guess one concern i have is that if the type of the trailer demands some alignment, and i want the struct to have a size that i guess covers the padding if that padding is necessary? not sure what i want tbh

1746012424
bw!sid2730@user/betawaffle
ifreund: usually it isn't, but sometimes it is

1746012438
bw!sid2730@user/betawaffle
example being MultiArrayList kinda

1746012445
bw!sid2730@user/betawaffle
but that's a bit different too

1746012458
ifreund!2940d10f8b@user/ifreund
I don't see how multi array list is related tbh

1746012485
ifreund!2940d10f8b@user/ifreund
as for alignment, you can set the alignment of any of the normal fields of the struct to ensure sufficient padding/whatnot

1746012486
bw!sid2730@user/betawaffle
well it essentially has multiple distinct things in a single allocation

1746012489
bw!sid2730@user/betawaffle
but yeah, idk

1746012504
Gliptic!~glip@2a01:4f8:c012:91f3::1
so does ArrayList in that case

1746012521
ifreund!2940d10f8b@user/ifreund
bw: the single allocation isn't the important part of MultiArrayList, it's the SoA data layout

1746012541
bw!sid2730@user/betawaffle
actually a better example is the IndexHeader in array_hash_map or whatever it's called

1746012572
ifreund!2940d10f8b@user/ifreund
it would probably give better perf for some allocators/workloads to use separate allocations for the separate arrays in multi array list even

1746012587
ifreund!2940d10f8b@user/ifreund
but nobody's done the work to benchmark that yet afaik

1746012593
bw!sid2730@user/betawaffle
like, other code should treat it like opaque, in that it should only use it though a pointer, and it shouldn't make assumptions about its size

1746012647
bw!sid2730@user/betawaffle
ifreund: yeah maybe, but at least semantically they all have the same allocation lifetime, so it makes at least some sense to do them all at once

1746012659
bw!sid2730@user/betawaffle
and the sizes are all related

1746012739
bw!sid2730@user/betawaffle
right now i'm exploring some ideas for a new programming language, and one thing i want to be able to express is stuff like trailing data and struct-of-arrays as first-class

1746012806
bw!sid2730@user/betawaffle
i'm thinking it'll be more like a data description language than general purpose programming, but we'll see

1746012861
bw!sid2730@user/betawaffle
like, you describe existing data (file formats, memory layouts, etc), not necessarily only greenfield data

1746012881
clevor!sid649024@id-649024.hampstead.irccloud.com
Looks like this is the patch I need to jump from d038676a to 8e79fc64. https://www.irccloud.com/pastebin/nVLSPkfI/zig-memmove-mismatch.patch

1746012897
bw!sid2730@user/betawaffle
and then it would have first-class facilities for generating code in languages of choice based on that description

1746012904
clevor!sid649024@id-649024.hampstead.irccloud.com
I haven't fully built it so far, but it hasn't errored yet.

1746021587
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
has there been any discussion anywhere for some type safety around std.time seconds/fractional seconds?

1746021632
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I was thinking something like pub fn Second(comptime T: type) type { return enum(T) { _ } } so you can still define different bit sizes, but still get the type safety

1746021689
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
It might make it way more annoying to *deal* with timestamps, but you wouldn't have to consult the source or docs to find out if a particular 64 is micro, nano, millis, seconds, etc

1746021701
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
s/64/u64

1746022113
clevor!sid649024@id-649024.hampstead.irccloud.com
You probably should use a dedicated time library.

1746022213
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
There are a lot of time constructs in std.time, and having a "common" time type would be pretty beneficial IMO

1746022230
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I mean, even beyond second durations

1746022270
clevor!sid649024@id-649024.hampstead.irccloud.com
It would, but IDK what *the* time library is.

1746022820
bblack!~bblack@wikimedia/bblack-WMF
the concept of time and durations is a huge rabbithole when you get into all the edge cases.  it's easy to get lost in trying to build ~perfect abstractions.

1746022839
bblack!~bblack@wikimedia/bblack-WMF
but basic type safety about units, yes, that would be helpful I think

1746033363
andrewrk!~andrewrk@mail.ziglang.org
clevor: https://gist.github.com/andrewrk/18d9935bcc63bc38d6ac8ddd0135dfc6

1746033412
andrewrk!~andrewrk@mail.ziglang.org
basically just nix-shell -p cmake ninja and a workaround for https://github.com/NixOS/nixpkgs/issues/18995

1746035522
clevor!sid649024@id-649024.hampstead.irccloud.com
hardeningDisable bit me once when compiling GCC4TI.

1746039967
lemons!~doggie@user/doggie-:49517
ugh.. at a point where ive done all the code i can* in zig, and need to resume working on engine-side

1746040008
Gliptic!~glip@2a01:4f8:c012:91f3::1
this is when you start rewriting the engine in zig

1746040021
lemons!~doggie@user/doggie-:49517
which would probably be fine if i didnt have to jump through wine+ hoops 

1746040085
lemons!~doggie@user/doggie-:49517
Gliptic: someday

1746040088
lemons!~doggie@user/doggie-:49517
not today

1746044897
ledx!~thomas@user/ledx
I need some advice on how to compare two slices/arrays of structs. I'm playing with a json parser, and currently I tried comparing the tokens returned from my scan function with a hard coded array of the expected tokens. I've copied the interesting code into this paste: https://0x0.st/84zB.zig

1746045310
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ledx: I don't have access to your scan function, so if I replace that with another hardcoded string and ignore the scan I get the tests to pass

1746045321
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I suspect your scan function is returning bad memory or something

1746046331
ledx!~thomas@user/ledx
rockorager: could be! I find it strange that the error from expectEqualSlices gives seemingly equal values for expected and "found this" – also, would you mind sharing your scan function? I struggle with arrays/slices/pointers and using correct types. If I try to implement it using an array I get this error:  error: expected type '[]main.Token', found '*const [1]main.Token'

1746046571
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I didn't make a scan function, I just did a const tokens = [_]Token{...}

1746046645
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
do you have your scan function public anywhere?

1746046647
ledx!~thomas@user/ledx
ah, so then you compare two arrays, don't you?

1746046664
ekaitz!~Ekaitz@46.6.5.164
hi! does anyone have an example of std.http.WebSocket?

1746046665
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Slices (using &tokens)

1746046678
ledx!~thomas@user/ledx
rockorager: not yet, but give me a second :)

1746046929
ledx!~thomas@user/ledx
rockorager: https://0x0.st/84zy.zig

1746046975
ledx!~thomas@user/ledx
or, if you want all the code there's still some parts missing

1746047037
ledx!~thomas@user/ledx
it's quite messy (other experiments) so I just wanted to keep it focused in the paste, but I can dump it somewhere if that helps

1746047038
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
yeah would be easier with all

1746047042
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Iterator

1746047151
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
oh i guess string too

1746047152
ledx!~thomas@user/ledx
https://0x0.st/84zt.zig unfiltered

1746047235
ledx!~thomas@user/ledx
there's a commented out test there too

1746047297
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
oh ok

1746047324
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
it's saying they aren't equal because the literal.? ptrs are not the same

1746047331
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
If you do std.testing.expectEqualDeep it will work

1746047600
ledx!~thomas@user/ledx
rockorager: aah, thanks!

1746047672
ledx!~thomas@user/ledx
so, with just expectEqualSlices it wouldn't compare the value if literal, and instead check if they point to the same memory address?

1746047700
ledx!~thomas@user/ledx
s/if literal/of literal/

1746047811
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah, equalSlices doesn't deeply compare the items in the slice

1746048265
andrewrk!~andrewrk@mail.ziglang.org
ifreund: happy to report that I have deleted std.RingBuffer in my wrangle-writer-buffering branch

1746048287
andrewrk!~andrewrk@mail.ziglang.org
I'm pretty sure that 100% of all ring buffer usage should be replaced with either BufferedReader or BufferedWriter

1746053721
clevor!sid649024@id-649024.hampstead.irccloud.com
As far as self-hosting goes, I think the next goal (aside from what is currently happening) should be writing just enough of the intrinsics to be able to compile the self-hosted Zig compiler using the self-hosted Zig compiler.

1746054080
andrewrk!~andrewrk@mail.ziglang.org
clevor: zig has been able to self-host for several years now

1746054903
clevor!sid649024@id-649024.hampstead.irccloud.com
I get errors on the x86_64 backend about __extendftf2

1746054930
clevor!sid649024@id-649024.hampstead.irccloud.com
I had meant self-host without LLVM at all.

1746057349
andrewrk!~andrewrk@mail.ziglang.org
clevor: https://github.com/ziglang/zig/blob/9f7c8b8b1bafe91bf5035c06f72de967a92f6a6c/src/target.zig#L329

1746057368
andrewrk!~andrewrk@mail.ziglang.org
x86 backend is perfectly capable of building compiler_rt

