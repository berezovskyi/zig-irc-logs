1757117986
torque!~tachyon@user/torque
<grayhatter> does anyone recall any conversations/issues around return types as function paramaters? <-- I think you're looking for https://github.com/ziglang/zig/issues/16313

1757118003
torque!~tachyon@user/torque
unforch one of the proposals that got nuked without comment

1757118038
torque!~tachyon@user/torque
having function be able to buy into RLS type information like builtins can would be nice but I've never felt desperate for it

1757118141
torque!~tachyon@user/torque
it's one of those things where it's a weird zone of whether `const something = myFunc(MyType, ...);` is better or worse than `const something: MyType = myFunc(...);`

1757118406
andrewrk!~andrewrk@mail.ziglang.org
torque: too much language complexity for very little gain. imagine explaining that language feature to newbies

1757118997
torque!~tachyon@user/torque
conceptually it's pretty much the same thing as builtin behavior so I'm not sure it would require any additional explanation

1757119013
torque!~tachyon@user/torque
however, I do agree that I don't think it offers a big gain

1757119126
andrewrk!~andrewrk@mail.ziglang.org
oops, got this mixed up with a different proposal where somebody wanted something similar but inside an expression

1757134876
grayhatter!~grayhatte@user/grayhatter
anyone think there's a chance a pr adding http.Status{ enhance_your_calm = 420 } would be accepted?

1757135219
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: instant merge

1757135294
grayhatter!~grayhatte@user/grayhatter
<3

1757135310
grayhatter!~grayhatte@user/grayhatter
pr incoming (I actually want this for srctree too)

1757135405
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: I have to take it back, someone using autocomplete could make a bad choice over a more standardized value

1757135427
andrewrk!~andrewrk@mail.ziglang.org
too_many_requests is probably a better alternative in all cases

1757135443
grayhatter!~grayhatte@user/grayhatter
</3

1757135471
grayhatter!~grayhatte@user/grayhatter
I actually disagree it's better in all cases; are you interested in the reasons?

1757135472
andrewrk!~andrewrk@mail.ziglang.org
plus I don't want to be accused of playing favorites when I say "no" to the next silly one someone PRs

1757135475
andrewrk!~andrewrk@mail.ziglang.org
yes I am

1757135582
andrewrk!~andrewrk@mail.ziglang.org
also you don't need anything added to the std lib right? just do @enumFromInt(420)

1757135787
grayhatter!~grayhatte@user/grayhatter
because I plan to use it for the AI bots abusing my srctree instance, and I don't want them to slow down, I want them to chill the fuck out and act normal. There's no rate limit that I would accept from someone abusing resources; Thus, a non-standard client error code is more approprate. The problem (requesting agent is a POS) isn't covered by the current set. Sending a non-standard error code makes

1757135789
grayhatter!~grayhatte@user/grayhatter
it more complicated for automated scripts to be able to just continue (the current set ignores 404 errors) but there is a chance that 420 will cause the script to exit, or some other behavior from the abuse. Thus making it harder to continue abusing systems... But, and this is the important part, it's funny. Gallows humor is the cure to the psychic damage incurred by constantly fighting with abuse. 

1757135950
andrewrk!~andrewrk@mail.ziglang.org
I mean if your acceptable number of requests is zero, 1 > 0, so too_many_requests still applies

1757136048
grayhatter!~grayhatte@user/grayhatter
TIL, http.Status.phrase() exists, time to delete some code from verse :)

1757136142
grayhatter!~grayhatte@user/grayhatter
according to RFC6585 "The 429 status code indicates that the user has sent too many requests in a given amount of time ("rate limiting")."

1757136145
grayhatter!~grayhatte@user/grayhatter
https://datatracker.ietf.org/doc/html/rfc6585#section-4

1757136197
grayhatter!~grayhatte@user/grayhatter
It might be misleading to call this a rate limit, because there's no rate that I would accept requests from this client. It also says 429 must not be cached, which isn't the behavior I want from misbehaving clients, I want them to cache the error page, and go away

1757136262
grayhatter!~grayhatte@user/grayhatter
I can try to out pedant you more, but I'm only doing it because I find it amusing :D I think the "no, because part of the core reason is because it's silly" is more than good enough for me 

1757136284
andrewrk!~andrewrk@mail.ziglang.org
well that and you can use @enumFromInt

1757136311
andrewrk!~andrewrk@mail.ziglang.org
and the respond functions take an optional reason

1757136318
grayhatter!~grayhatte@user/grayhatter
lol yeah, that too

1757136322
andrewrk!~andrewrk@mail.ziglang.org
looks like I handled this case already, you can have exactly what you want with no std changes

1757136398
grayhatter!~grayhatte@user/grayhatter
I mean, I can't use `frame.sendDefaultErrorPage(.enhance_your_calm);` but I'll live

1757136591
grayhatter!~grayhatte@user/grayhatter
`grep [common abuse string] | sed s/[IPADDR]/p | sort | uniq | wc -l` => 735 ...I'm not sure I like this brave new AI based world

1757137045
grayhatter!~grayhatte@user/grayhatter
in case you change your mind (I "love" that I can do this) https://github.com/ziglang/zig/commit/cca7f955c7e39c3c08e33be94a399698cb40301d

1757138130
andrewrk!~andrewrk@mail.ziglang.org
tbh it should be 420 blaze it

1757138333
grayhatter!~grayhatte@user/grayhatter
let's be honest, for some of these bots 419 HCF is the only reasonable response code :P

1757138379
andrewrk!~andrewrk@mail.ziglang.org
High Fructose Cornsyrup?

1757138410
grayhatter!~grayhatte@user/grayhatter
https://en.wikipedia.org/wiki/Halt_and_Catch_Fire_(computing)

1757138468
andrewrk!~andrewrk@mail.ziglang.org
aha

1757139313
torque!~tachyon@user/torque
sometimes you have to ask yourself, what fun is it not to play favorites

1757139328
torque!~tachyon@user/torque
what good is it to have power if you can't capriciously abuse it

1757139363
andrewrk!~andrewrk@mail.ziglang.org
if you can't capriciously abuse it, do you truly have power? ðŸ¤”

1757139388
torque!~tachyon@user/torque
truly food for thought

1757139597
torque!~tachyon@user/torque
I read some post about people serving gzip bombs to scrapers, I wonder if that actually accomplishes anything

1757139720
grayhatter!~grayhatte@user/grayhatter
it most often doesn't, tarpitting is the most effective if you're looking for offensive options

1757139787
jan0sch!~jan0sch@user/jan0sch
They're easy to circumvent but for the dumb ones they could work. Makes me remember when nearly 30 years ago at university someone from computer graphics rendered a huge (gigabytes) bitmap, gzipped it and setup a website with all the "free xxx" keywords to serve it. :-)

1757139829
grayhatter!~grayhatte@user/grayhatter
also, gzip bombs *can* kill systems; so you better be very confident in your target identification system, because you're much more likely to kill the system of a real user instead of a scraper

1757140022
grayhatter!~grayhatte@user/grayhatter
the best advice I have is ban the IP address, and move on to more important things

1757140144
grayhatter!~grayhatte@user/grayhatter
the time you spend trying to stop people from being annoying is just a DoS on your brain, preventing you from making good shit people enjoy instead (I give this advice in hope that I'll learn to follow it too, I still keep tweaking benevolence every time I see something) 

1757140197
andrewrk!~andrewrk@mail.ziglang.org
100%

1757140203
andrewrk!~andrewrk@mail.ziglang.org
people don't appreciate this fact enough

1757140471
jan0sch!~jan0sch@user/jan0sch
yes, definitely, forgetting it myself also way too often

1757140653
andrewrk!~andrewrk@mail.ziglang.org
"if you gaze for long into an abyss, the abyss gazes also into you"

1757140673
grayhatter!~grayhatte@user/grayhatter
I.... I've written that article too

1757140745
grayhatter!~grayhatte@user/grayhatter
the trick that helped me was framing it as a DoS attack on my attention, now it's become motivation to make more dope shit, because I'll be damned if I let them trick me into wasting time on what *they* want me to do!

1757141457
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: I forgot to concede that I agree with your logic, 429 is more likely the hostile client to retry than an alternative for the reasons you mentioned

1757141475
andrewrk!~andrewrk@mail.ziglang.org
doesn't change my stance on the patch tho

1757143991
grayhatter!~grayhatte@user/grayhatter
I disagee? resent? regret? that 420 isn't what RFCs choose for "rate limited", separately, I disagree that the stdlib should follow RFCs. But agree with your decision that without either, @enumFromInt(420) is (currently) the correct thing for stdlib to do

1757144038
grayhatter!~grayhatte@user/grayhatter
the correct solution to code not doing what you want it to do, should be to write more code, not alter the language [or stdlib]

1757144098
grayhatter!~grayhatte@user/grayhatter
the first few question marks should be in brackets, because I don't know which word I wanted to use there

1757160135
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
i'm confused, i just moved to 0.15.1 and started upgrading code,  first just by trying where zig build points me.  first place is wher i try to write json to a buffer (which i then write to file later, at once)

1757160229
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
so previously i was passing arraylist writer to `std.json.writeStream(writer, .{});`  but writeStream is gone.  it looks like std.json wants me to just instantiate Stringify, to which i need to pass a buffer writer, right?

1757160269
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
but the other thing is that ArrayList.writer() is deprecated now so what is a correct way to create writer for such situation? 

1757160613
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
oh wait is it Writer.fixed()   i was looking for something starting with .init :/

1757161017
ifreund!2940d10f8b@user/ifreund
netvor: you might be looking for std.Io.Writer.Allocating

1757161045
ifreund!2940d10f8b@user/ifreund
that's generally what one wants to replace ArrayList.writer() with

1757161352
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
it's a fixed buffer, i was kind of abusing the arraylist.   i'm now looking at `var my_buf: [SIZE]u8 = undefined; const w = std.Io.Writer.fixed(&my_buf);`.  then pass w to std.json.Stringify, and after doing the json stuff and opening a file, do `fh.writeAll(my_buf[0..w.end])`  .. but .writeAll is deprecated as well

1757161543
ifreund!2940d10f8b@user/ifreund
with a fixed buffer Writer.fixed is indeed correct

1757161574
ifreund!2940d10f8b@user/ifreund
File.writeAll() is replaced by File.writer()

1757161592
ifreund!2940d10f8b@user/ifreund
if you are writing to a file perhaps you don't need the fixed buffer intermediary though

1757161694
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
then how do i deal with problems with incomplete file?  some other process is watching the json so i wanted to minimize chance for syntax errors

1757161727
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
btw don't you mean replaced by File.write()?  that one seems to have the right signature

1757161965
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
or is it `try fh.writer(buf).interface.flush();` ?

1757162030
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
(i mean `buf[0..w.end]` ofc)

1757162049
ifreund!2940d10f8b@user/ifreund
if you are doing synchronization between processes you need to lock the file

1757162175
ifreund!2940d10f8b@user/ifreund
or like write to a different file then rename or whatever

1757162190
ifreund!2940d10f8b@user/ifreund
what you seem to have been doing before was inherently racy

1757162259
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
ik was ok with just minimizing the raciness this way for now :)

1757162366
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
i do need to work this out with smaller examples.   for now the point is how to write a string to a file.

1757162367
ifreund!2940d10f8b@user/ifreund
well if you don't care that it's racy, just write directly to the File.Writer with the same buffer size you had before

1757162387
ifreund!2940d10f8b@user/ifreund
it will be as efficient in terms of write syscalls as before

1757162489
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
ok, so, is it the case that the write will be done only after the buffer is full (or flush is called)?   i need to wrap my head around buffers

1757162700
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
it does look like to get the file writer i need to sys.fs.cwd().createFile first, which beats the purpose (i wanted to not do that until i have the full json)

1757162796
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
ofc doing the two-file thing would solve that; i intuitively wanted to avoid a renaming safety  rabbit hole

1757162894
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
(ok Dir.rename() seems fine, no real rabbit hole)

1757167618
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
ok, finally nailed it.  https://bpa.st/3KGQ   the `&fw.interface` part got me for a while, i was instead creating `var fw = fh.writer(&buf).interface`, and passing pointer to it to the formatter but then calling `fw.flush()` on it failed

1757167820
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
oh i get it, `var fw = fh.writer(&buf).interface;`  leaves the FileWriter in something like "anonymous stack const"

1757167959
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
i think i made that mistake in the past with getStdout, trying to pass stuff around.  it left me scratching my head for hours but yeah, gotta be careful

1757180760
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
btw i just found std.fs.Dir.atomicFile() and it seems to do exactly what i need: create a temp file and only rename it into place once done writing

1757182358
JetpackJackson!739e7f3d14@user/JetpackJackson
is there a way to read a really large file line by line into an arraylist in 0.15 without allocating a huge amount of memory?

1757182745
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: you just described the Io.Reader interface. Create a reader with a buffer the size of the longest line, and you have what you asked for

1757182747
andrewrk!~andrewrk@mail.ziglang.org
JetpackJackson: you seem to want conflicting things, do you want the file in an array list or not?

1757182783
JetpackJackson!739e7f3d14@user/JetpackJackson
i do want it in an arraylist so i can go through the lines of the file

1757182808
grayhatter!~grayhatte@user/grayhatter
oh, you want every line loaded into memory in an Arraylist([]const u8)?

1757182821
andrewrk!~andrewrk@mail.ziglang.org
you can go through the lines without an ArrayList

1757182870
JetpackJackson!739e7f3d14@user/JetpackJackson
its a list of birds thats really long so i dont wanna try and load/display all at once since its gonna be in a gui that the user scrolls through

1757182887
grayhatter!~grayhatte@user/grayhatter
I guess you could calculate the start..end position for every line in the file and put that in an ArrayList(struct{ start: usize, end: usize }); But... I suspect you're trying to solve that problem with the wrong tool

1757182890
JetpackJackson!739e7f3d14@user/JetpackJackson
im trying to replicate my android app in zig+qt basically

1757182910
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: how long is really long?

1757182947
JetpackJackson!739e7f3d14@user/JetpackJackson
err 10985 lines according to `wc -l`

1757182948
grayhatter!~grayhatte@user/grayhatter
for 10x the number of birds I can imagine exist, I would still probably load that into memory

1757182982
JetpackJackson!739e7f3d14@user/JetpackJackson
so its ok to do a readToEndAlloc?

1757182993
grayhatter!~grayhatte@user/grayhatter
the non-shared components of your qt library is probably 2-4x that, are you sure you care about the list of birds?

1757183003
JetpackJackson!739e7f3d14@user/JetpackJackson
i just feel like i keep reaching for that when its not the best idea lol

1757183005
JetpackJackson!739e7f3d14@user/JetpackJackson
ah true

1757183008
Gliptic!~glip@2a01:4f8:c012:91f3::1
so that's what, < 1 MB?

1757183022
JetpackJackson!739e7f3d14@user/JetpackJackson
yeah

1757183068
grayhatter!~grayhatte@user/grayhatter
I mean, hyperoptimization is fun, so go for it if you really want to... but just so it's clear, it doesn't matter, load the whole thing into memory, and yolo :D

1757183068
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
btw if you don't have a line limit then whatever solution that tries to avoid reading a lot into memory may need to account for that .. the whole file might be one huge line anyway

1757183099
JetpackJackson!739e7f3d14@user/JetpackJackson
ah ok

1757183165
grayhatter!~grayhatte@user/grayhatter
if you're working with multi GB files, mmap'ing the file can help the system a lot if it ever reaches memory pressure, but I wouldn't spend much time until it's >100M

1757183179
JetpackJackson!739e7f3d14@user/JetpackJackson
oh ok thanks

1757183203
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
grayhatter: btw can you imagine there's, like, 10 trillion birds?

1757183205
JetpackJackson!739e7f3d14@user/JetpackJackson
man im so rusty i gotta remember how to read the lines of the file 

1757183230
netvor!~netvor@2a00:ca8:a1f:cd0:dbfc:7ba9:de8d:e0d2
becausei can, i guess, and my life is harder for it :D

1757183243
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: I don't think mmap is a good suggestion here

1757183272
grayhatter!~grayhatte@user/grayhatter
I think I'm gonna start recommending writing sub-optimial code intentionally, so that you have a reason to force yourself to learn how to profile and optimize your code using realy data instead of just intuition

1757183299
JetpackJackson!739e7f3d14@user/JetpackJackson
now how do i get an arraylist out of my lump of file content

1757183351
andrewrk!~andrewrk@mail.ziglang.org
JetpackJackson: here's a suggestion: load the whole file into a big string because you want all the bytes in memory. then, use std.mem.split to find lines and add to an array list, not slices, but offsets into the big string where each line starts

1757183363
grayhatter!~grayhatte@user/grayhatter
andrewrk: I agree, mmap is a bad choice here, (I did suggest read the file into memory) but because I don't know the usage pattern of the app, I'm gonna assume someone random lookups, and I already mentioned it only helps with huge files, and memory pressure

1757183387
JetpackJackson!739e7f3d14@user/JetpackJackson
andrewrk: oh ok ill try that

1757183389
JetpackJackson!739e7f3d14@user/JetpackJackson
thanks!

1757183469
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: ^ that's 1337 way of writing the code. A bit more complex of a pattern, but once you understand it (and why it's better) you'll default to writing much better code

1757183482
andrewrk!~andrewrk@mail.ziglang.org
so then you have 2 allocations: total bird names len + \n per bird, and 4 bytes per bird to help you implement a scrollbar

1757183494
andrewrk!~andrewrk@mail.ziglang.org
instead of N allocations per bird

1757183509
JetpackJackson!739e7f3d14@user/JetpackJackson
ohh ok

1757183859
andrewrk!~andrewrk@mail.ziglang.org
I'm assuming your data is read-only

1757183866
JetpackJackson!739e7f3d14@user/JetpackJackson
yeah

1757189710
grayhatter!~grayhatte@user/grayhatter
I wonder.... so somewhat obviously, you could sort the indexes instead of the strings, but I don't have a mental model/heuristic to predict when or if that's actually better than sorting the strings given what I assume will be more branch/memory-preload misses

1757192124
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Zig is good.

1757196709
JetpackJackson!739e7f3d14@user/JetpackJackson
https://zigbin.io/4f89ac alright i got to here with my qt app, but when i close the window, it says that it terminated unexpectedly, which i traced to the buttons not getting deleted at the end. but if i do defer qpushbutton.QDelete(button) i get no errors when closing but also no buttons are displayed at all. how can i tweak my code on the zig side to properly cleanup the buttons at the end?

1757196887
torque!~tachyon@user/torque
I mean if you're making 10k buttons in a loop, you have to store them all in a slice or an ArrayList or something and then delete them after the loop

1757196973
torque!~tachyon@user/torque
I don't know about the other qt memory management stuff but deleting the url in the loop is probably creating a dangling pointer as well

1757197027
torque!~tachyon@user/torque
(also while you're deleting the url itself you are not freeing the raw string you alloc to create it)

1757197116
torque!~tachyon@user/torque
normally in zig you could use an arena to clean up all resources after the fact but it doesn't appear the qt functions take an allocator, so that's not really an option

1757200345
JetpackJackson!739e7f3d14@user/JetpackJackson
Oh ok

1757200363
JetpackJackson!739e7f3d14@user/JetpackJackson
I just don't know where to clean the stuff up without it being too early

1757200440
JetpackJackson!739e7f3d14@user/JetpackJackson
Huh weird when I remove the defer qurl stuff it doesnt run at all

1757200543
JetpackJackson!739e7f3d14@user/JetpackJackson
And if they're temp buttons I can't remove them after the loop since its not like I can call button9876 directly

1757200653
JetpackJackson!739e7f3d14@user/JetpackJackson
Ok did a test with one button and got it to display with the defer

1757201191
andrewrk!~andrewrk@mail.ziglang.org
oh wow somebody made qt6 bindings?

1757201435
JetpackJackson!739e7f3d14@user/JetpackJackson
Yeah

1757201580
JetpackJackson!739e7f3d14@user/JetpackJackson
I'm just stumped cause I did this in jetpack compose where it would only load stuff that was in the viewport 

1757201593
JetpackJackson!739e7f3d14@user/JetpackJackson
And idk how to replicate that in qt 

1757201641
JetpackJackson!739e7f3d14@user/JetpackJackson
If I remove the loop it works nice but it only has one bird lol

