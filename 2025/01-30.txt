1738201634
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ngl, zig build system is sick af. `b.Dependency(..).path(..)` is op

1738201681
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: hey! btw your uploaded next-zig is working great for me so far, thanks again

1738201708
ezzieyguywuf!~Unknown@user/ezzieyguywuf
(I haven't actually _drawn_ anything yet, but that's more a me-issue)

1738204373
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I'm a bit confused from https://github.com/Snektron/vulkan-zig/tree/master, "vulkan-zig has as of yet no functionality for selecting feature levels and extensions when generating bindings. ", and yet in the example I see both a feature level and extensions being specified https://github.com/Snektron/vulkan-zig/blob/1fd5a6e217dfcc7e4406d449924a1feb1ecffbb9/examples/graphics_context.zig#L20-L22

1738218365
dsal!sid13060@id-13060.lymington.irccloud.com
I'm doing a `inline for (@typeInfo((T)).Struct.fields) |field| {` across a struct to print out the fields.  I want a different format for one field, or to just skip that field.  Obvious things don't seem to work.

1738219348
torque!~tachyon@user/torque
`if (std.mem.eql(u8, "field_to_skip", field.name)) continue;`

1738219408
dsal!sid13060@id-13060.lymington.irccloud.com
Huh.  I tried that…

1738219453
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, it says "comptime control flow inside runtime block"

1738220633
torque!~tachyon@user/torque
`if (comptime std.mem.eql(u8, "field_to_skip", field.name)) continue;`

1738221449
dsal!sid13060@id-13060.lymington.irccloud.com
Oh nice, I tried sticking the `comptime` before the `if`

1738221531
torque!~tachyon@user/torque
I would expect that to work also, tbh, but it gave you an error?

1738221593
dsal!sid13060@id-13060.lymington.irccloud.com
Well, I thought so, but it must've been something else.

1738221698
dsal!sid13060@id-13060.lymington.irccloud.com
Well, I've got this thing mostly working in any case.  Learned a bunch of junk, but I don't like some of the code.

1738221751
dsal!sid13060@id-13060.lymington.irccloud.com
Finding my way around zig docs is a bit of disorienting still, but I can click through to src and usually figure out what I'm doing enough that things appear to work.

1738226265
tsujp!497e1f7b6a@sourcehut/user/tsujp
cheers ifreund

1738227486
zenomat!36eb415140@user/zenomat
hey, I have been reading up on the discussion about moving away from llvm, but I couldn't quite crystalize what that would mean for cross-compilation. in my understanding the heavylifting of cross compilation is handled by llvm. would that mean, that the zig compiler would then have to implement each target individually? further, in that discussion it is also mentioned, that the cc and c-translate functionality will be moved to a seperate project. how would t

1738227487
zenomat!36eb415140@user/zenomat
hat influence c interop? would that now require external tooling?

1738227517
zenomat!36eb415140@user/zenomat
i'd be very thankful, if someone has pointers on where I could find more information or enlighten me

1738229946
ifreund!2940d10f8b@user/ifreund
zenomat: it will still be possible to use llvm, the only difference is that it will not be linked into the zig executable

1738229948
ifreund!2940d10f8b@user/ifreund
see https://github.com/ziglang/zig/issues/16270

1738229992
ifreund!2940d10f8b@user/ifreund
note that there's tons of misinformation about this from people who don't understand what is proposed or what they are talking about

1738230040
zenomat!36eb415140@user/zenomat
yeah, i read that and got that. but that would require extra tooling, right? so `zig build -Dtarget=x86_64-windows` wouldn't just work out of the box, if the zig compiler doesn't include a windows backend?

1738230055
zenomat!36eb415140@user/zenomat
i get the misinformation, and I don't quite get it myself, so I am asking here

1738230215
ifreund!2940d10f8b@user/ifreund
zenomat: nothing will regress

1738230220
ifreund!2940d10f8b@user/ifreund
the mechanism will just be different

1738230231
ifreund!2940d10f8b@user/ifreund
https://github.com/ziglang/zig/issues/16270#issuecomment-1616115039

1738230585
zenomat!36eb415140@user/zenomat
ah ok, that comment clarifies a lot, thank you^^

1738243954
MimiValsi!~MimiValsi@user/MimiValsi
hey, quick question. Messing around with Zig, and used this function "try file.getEndPos();" to get the file size. 

1738244012
MimiValsi!~MimiValsi@user/MimiValsi
and the return value of the function, wanted to put on a array like: "const buf: [size]u8 = undefined;" but got a compile error saying that it can't evaluation "size" as comptime.

1738244020
avallee!uid686632@user/avallee
I'm a bit confused about the relationship between zig and libc. There are some parts of libc that I would like to use, but they are exposed under `std.posix` nor `std.os.linux`. I also don't want to link against a particular system libc, but rather use the musl shipped with zig (I have no need to consider anything that is not x86_64/linux). My understanding is that the bundled libc is essentially exposed through std/c/linux.zig, and I cannot @cImport 

1738244020
avallee!uid686632@user/avallee
its headers directly. Essentially I guess it is built separately and statically linked, so that the exported symbols are resolved.

1738244032
MimiValsi!~MimiValsi@user/MimiValsi
Is there any way, without using allocs to create an array with that value?

1738244116
avallee!uid686632@user/avallee
So um, to use some part of libc not yet mapped by zig, I guess I could either link against an external libc, or just use extern symbols from the bundled musl and cross fingers

1738244123
MimiValsi!~MimiValsi@user/MimiValsi
evaluate* comptime expression

1738244203
hadronized!~hadronize@2001:41d0:a:fe76::1
MimiValsi: you need to allocate for that and you can’t allocate at comptime

1738244244
hadronized!~hadronize@2001:41d0:a:fe76::1
you can create a big array on the stack, and compare the size of the file with it; if it’s shorter, you can put your data in it and use a slice, but if it’s bigger, then it won’t fit

1738244247
avallee!uid686632@user/avallee
I guess the TLDR is: I need some symbols of the bundled musl that are not exposed by zig, but since I cannot find how to cImport the bundled headers of musl, it seems fragile that I declare them myself

1738244269
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
MimiValsi is the file contents provided at comptime?

1738244272
hadronized!~hadronize@2001:41d0:a:fe76::1
avallee: linkLibC() doesn’t work?

1738244278
hadronized!~hadronize@2001:41d0:a:fe76::1
ah you need musl

1738244287
hadronized!~hadronize@2001:41d0:a:fe76::1
I know there should be a target for it though

1738244320
hadronized!~hadronize@2001:41d0:a:fe76::1
if it’s fully covered by std.c / std.posix, I guess you have to link against it manually yeah

1738244326
hadronized!~hadronize@2001:41d0:a:fe76::1
not*

1738244373
MimiValsi!~MimiValsi@user/MimiValsi
handronized: Didn't thought about that approach... thx

1738244376
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m more and more considering using Zig instead of Rust nowadays (yeah, not even kidding…)

1738244392
hadronized!~hadronize@2001:41d0:a:fe76::1
MimiValsi: it’s risky though because you usually do not want to have to depend on a specific stack size

1738244393
MimiValsi!~MimiValsi@user/MimiValsi
rockorager: I don't think so. When using "try" does it make comptime?

1738244403
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s not the try

1738244406
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s the Allocator

1738244437
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Provided at comptime meaning it's a static file, probably included in your repo (eg...data, or something)

1738244463
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
If it's provided at comptime you can @embedFile and get the length available as a comptime value, but if it has to be read from the filesystem you can't do that at comptime

1738244490
MimiValsi!~MimiValsi@user/MimiValsi
Haven't tried with allocator yet. For the moment was thinking using only the stack. Like creating an array with sufficient memory, copy file content to that array and iterate over to check each byte.

1738244534
avallee!uid686632@user/avallee
@hadronized: well there's the question of linking and the question of declaring, so I guess I have 2 questions yes. My understanding is that std.posix delegates to std.os.linux which in turns declares externals symbols from a musl bundled with zig. in that case, I shouldn't have to add any additional linking to my build, I just want to use some symbols that are not exposed yet

1738244575
MimiValsi!~MimiValsi@user/MimiValsi
The files that I need to read, will be on a different folder with the same root folder

1738244592
hadronized!~hadronize@2001:41d0:a:fe76::1
avallee: I’m not very good at musl interaction, so I can’t really help; just out of curiosity, what is the use case for using musl here for you?

1738244607
hadronized!~hadronize@2001:41d0:a:fe76::1
Windows?

1738244645
avallee!uid686632@user/avallee
essentially I want to use statfs(), and some O_ flags that are not exposed by zig

1738244660
avallee!uid686632@user/avallee
there flags and symbols are present is glibc/musl though

1738244671
avallee!uid686632@user/avallee
these*

1738245051
avallee!uid686632@user/avallee
my impression, but I can be wrong, is that zig exposes does not reimplement a libc, but rather uses a bundled one for each target. On Linux, that is musl. std.posix delegates to std.os.linux which delegates to its bundled libc through extern symbols. I guess that these symbols are resolved by linking with a fat object of musl. my issue is that there are some symbols from that object that I want to use but are not declared in std.os.linux. if I was able 

1738245051
avallee!uid686632@user/avallee
to include the headers of that bundled musl I could declare them, but otherwise I would have to copy myself the externs in my code, and that seems fragile.

1738245088
avallee!uid686632@user/avallee
or maybe I don't understand how zig does this and I'm completely wrong :-) just starting

1738245185
hadronized!~hadronize@2001:41d0:a:fe76::1
I thought std.posix was just a full Zig reimplementation of libc

1738245191
hadronized!~hadronize@2001:41d0:a:fe76::1
I might be wrong with the assumption there

1738245330
Earnestly!~earnest@user/earnestly
Yes, the mingling of libc, c api, unix api, posix api will be confusing

1738246140
avallee!uid686632@user/avallee
oh well after relooking at the code I think you're right

1738246399
avallee!uid686632@user/avallee
I just want to use some symbols from libc not available in std, and I would like no dynamic linking or dependency above zIg, then what's the easiest way?

1738251159
torque!~tachyon@user/torque
define the additional stuff you need in your zig code and then use it

1738251173
torque!~tachyon@user/torque
you can also upstream it to the std library, though that's a slower process

1738251207
torque!~tachyon@user/torque
the zig libc bindings are not exhaustive, there's stuff missing. what's implemented is largely things that people needed and therefore wrote bindings for

1738251225
torque!~tachyon@user/torque
there's nothing particularly magical about the bindings either

1738256924
grayhatter!~grayhatte@user/grayhatter
do the pending release notes exist anywhere? I'm looking for the replacement of @setCold()

1738257128
ifreund!2940d10f8b@user/ifreund
grayhatter: @branchHint()

1738257171
ifreund!2940d10f8b@user/ifreund
also, I can highly recommend `git log -SsetCold` for questions like this

1738257208
phaleth!~phaleth@user/phaleth
release notes are in this PR's comments https://github.com/ziglang/zig/pull/21214

1738257297
grayhatter!~grayhatte@user/grayhatter
lol, I read every single @builtin and missed branchHint :<... stupid brain

1738257305
grayhatter!~grayhatte@user/grayhatter
thank you ifreund & phaleth 

1738258945
grayhatter!~grayhatte@user/grayhatter
note: pointer type child '[]u8' cannot cast into pointer type child '[]const u8'

1738258952
grayhatter!~grayhatte@user/grayhatter
note: mutable '[]const u8' would allow illegal const pointers stored to type '[]u8'

1738259018
grayhatter!~grayhatte@user/grayhatter
can anyone make this error make sense?

1738261001
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: your type is *[]u8 ?

1738261021
grayhatter!~grayhatte@user/grayhatter
[][]u8 can't cast into [][]const u8

1738261038
Gliptic!~glip@2a01:4f8:c012:91f3::1
[]const []const u8

1738261090
grayhatter!~grayhatte@user/grayhatter
Gliptic: are you suggesting I mark them both slices as const?

1738261091
Gliptic!~glip@2a01:4f8:c012:91f3::1
otherwise you can write a []const u8 into it that can be accessed as a []u8

1738261097
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1738261106
grayhatter!~grayhatte@user/grayhatter
but... it can't be

1738261135
Gliptic!~glip@2a01:4f8:c012:91f3::1
or just []const []u8

1738261147
grayhatter!~grayhatte@user/grayhatter
[][]const u8, is a slice that holds []const u8

1738261186
grayhatter!~grayhatte@user/grayhatter
a slice holding []const u8 can't be accessed as a []u8 (unless I cast it)

1738261197
grayhatter!~grayhatte@user/grayhatter
or am I missing something

1738261269
Gliptic!~glip@2a01:4f8:c012:91f3::1
but the slice was originally a slice of []u8

1738261353
grayhatter!~grayhatte@user/grayhatter
oh

1738261380
grayhatter!~grayhatte@user/grayhatter
the compiler can't figure out it stops being a [][]u8 at that point

1738261477
grayhatter!~grayhatte@user/grayhatter
it doesn't want the [][]u8 to be seen as a [][]const u8, because something might still hold a reference to the original [][]u8, and through some magic somehow, that would smuggle a []const u8 into a []u8...

1738261509
dsal!sid13060@id-13060.lymington.irccloud.com
Can I coerce a struct to a similarly shaped other struct?

1738261518
dsal!sid13060@id-13060.lymington.irccloud.com
Or cast I guess…

1738261533
grayhatter!~grayhatte@user/grayhatter
dsal: not anymore... :<

1738261566
grayhatter!~grayhatte@user/grayhatter
dsal: you can't cast it safely, unless your sure the memory/struct layout is identical, and can never change

1738261579
grayhatter!~grayhatte@user/grayhatter
if you're sure the layout is identical, then you could cast it, yes

1738261593
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, it's all my code.  How does the cast work?

1738261601
grayhatter!~grayhatte@user/grayhatter
Gliptic: thank you for explaining it to me :)

1738261615
dsal!sid13060@id-13060.lymington.irccloud.com
I guess I could just name this thing and make it the same struct.

1738261625
grayhatter!~grayhatte@user/grayhatter
@as(*NewType, @ptrCast(&old_type));

1738261634
grayhatter!~grayhatte@user/grayhatter
dsal: that would be the "correct" way to go about it

1738261650
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, I'll just give up and do the right thing.  heh

1738261683
grayhatter!~grayhatte@user/grayhatter
dsal: lol, yeah, that is one of the most annoying features of zig... it constantly refuses to let me give into my bad habits

1738261689
grayhatter!~grayhatte@user/grayhatter
:D

1738261923
dsal!sid13060@id-13060.lymington.irccloud.com
These are logically different things that have the same shape and I can share a bunch of the code.  I'm trying to remove some duplication in this thing now that I have it working.

1738261945
dsal!sid13060@id-13060.lymington.irccloud.com
I'm confident nobody will ever use it, but it's at least teaching me stuff.

1738262020
grayhatter!~grayhatte@user/grayhatter
dsal: will you use it?

1738262045
dsal!sid13060@id-13060.lymington.irccloud.com
I desperately wanted monoids or at least a functional interface to maps yesterday, but just handing me the pointer is nice.  I do think it's slightly weird that there's no default values, but not too bad.

1738262083
dsal!sid13060@id-13060.lymington.irccloud.com
I'm not sure if I'll use it.  It's a GoPro telemetry stream parser.  I wrote one in Haskell and have a bunch of stuff using that.  I doubt I'll rewrite my entire suite, but this has been pretty nice.

1738262137
dsal!sid13060@id-13060.lymington.irccloud.com
GoPro published one in C and it's pretty much unusable.  I couldn't even use the code as a reference and it didn't work with many samples I had.  Both my Haskell and zig implementations are a fraction of the size and do more as far as I can figure out.

1738262196
dsal!sid13060@id-13060.lymington.irccloud.com
The zig is almost exactly twice as many lines of code as the Haskell.  That's not bad.

1738262219
grayhatter!~grayhatte@user/grayhatter
dsal: what's the binary size difference?

1738262223
dsal!sid13060@id-13060.lymington.irccloud.com
heh

1738262369
dsal!sid13060@id-13060.lymington.irccloud.com
The "program" that I have is roughly the same for each.  Just parse low level stuff, extract higher level stuff out of that, and print it out.  I've not built the haskell bin in a bit, but I'll give that a go and see what it looks like.  The zig bin is 156kB, so it's got to beat that.

1738262401
grayhatter!~grayhatte@user/grayhatter
dsal: is that a debug build, or a release build?

1738262420
dsal!sid13060@id-13060.lymington.irccloud.com
I just did a release for an unfair comparison.

1738262436
dsal!sid13060@id-13060.lymington.irccloud.com
1.7MB for regular debug

1738262523
dsal!sid13060@id-13060.lymington.irccloud.com
26MB for the Haskell bin

1738262531
grayhatter!~grayhatte@user/grayhatter
riiight

1738262541
grayhatter!~grayhatte@user/grayhatter
lol

1738262561
dsal!sid13060@id-13060.lymington.irccloud.com
Also takes a bit longer to build…

1738262569
glguy!glguy@libera/staff/glguy
you could run that on a computer with 10mb and it would be the difference between it starting or not!

1738262608
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, it's a little unfortunate how overprovisioned everything is these days.

1738262643
dsal!sid13060@id-13060.lymington.irccloud.com
2x line count between a very high level language and a very low level language is pretty great, though.

1738263737
dsal!sid13060@id-13060.lymington.irccloud.com
I still can't quite figure out how this library thing is supposed to work.  My library basically has two files, a lower level one and a higher level one.  It looks like I have to pick which one I make documentation for.

1738264693
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
dsal: you can have one import the other and docs should be generated for both

1738264702
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
it depends on how you want the api structured

1738264780
dsal!sid13060@id-13060.lymington.irccloud.com
It does a bit, but doesn't show the functions from the imported module.

1738264829
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
are they marked pub?

1738264847
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
https://github.com/rockorager/zeit/blob/main/src/zeit.zig

1738264853
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
you can see there where I mark some imports pub

1738264860
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
and zeit.zig is my root_source_file

1738265068
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, i can find them if i dig around, but feels a bit hidden.  I guess I don't know what the Right Way to show this would be.  I'm providing documentation for the higher level layer of the library which requires you to have done stuff in the lower level parts that you can click into.

1738267181
avallee!uid686632@user/avallee
7:26 PM <grayhatter> dsal: you can't cast it safely, unless your sure the memory/struct layout is identical, and can never change

1738267183
avallee!uid686632@user/avallee
side question, is that legal in zig ? does it not interfere with aliasing rules ? does zig have defined strict aliasing like C? are they the same ?

1738273831
dsal!sid13060@id-13060.lymington.irccloud.com
I don't have a great intuition for optional.  Is this a pointer?

1738273856
dsal!sid13060@id-13060.lymington.irccloud.com
Or maybe, how is it encoded?  What's the size?

1738274227
grayhatter!~grayhatte@user/grayhatter
dsal: @sizeOf(?bool) == 2

