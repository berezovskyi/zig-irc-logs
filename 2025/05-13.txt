1747126657
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
error: expected type '?*cimport.struct_lo_address_', found '?*cimport.struct_lo_address_'

1747126692
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm strange

1747126824
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://zigbin.io/94f52b

1747126922
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
probably zig imports lo and that c file also include lo ... ?

1747128910
cancername!~cancernam@user/cancername
flower_: do you have several different C imports?

1747128943
cancername!~cancernam@user/cancername
the same struct from a different @cImport will be incompatible, I believe

1747128964
cancername!~cancernam@user/cancername
you might have to do @cImport({@cInclude(...); @cInclude(...);})

1747129232
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
cancername: something like that probably. But your example is the way I have it

1747129240
cancername!~cancernam@user/cancername
hmm

1747129244
cancername!~cancernam@user/cancername
can I see the code?

1747129288
cancername!~cancernam@user/cancername
because there are definitely two @cImport s somewhere

1747129642
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
cancername: sure, but give me 15min or so ... 

1747130873
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
cancername: https://git.sr.ht/~jasm/jasmlabels-private-with-log

1747130892
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/less_OOP/item/nsm_custom.h#L1

1747130909
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/less_OOP/item/nsm_zig_helpers.h#L3

1747130937
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/less_OOP/item/src/nsm.zig#L12

1747131016
cancername!~cancernam@user/cancername
flower_: you're @cImporting both from clientslist.zig and nsm.zig, those @cImports will be separate namespaces, whose structs will not be equivalent. you can cImport everything in one zig file, then access the c import that way.

1747131069
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
cancername: I see, thx. 

1747131081
cancername!~cancernam@user/cancername
there's a plan of making this better by generating the cimport with the build system, but it's not here yet

1747131110
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ah cool

1747131200
fkobi!~user@user/fkobi
hello

1747131216
fkobi!~user@user/fkobi
can I update my project's modules in a handy way?

1747131264
cancername!~cancernam@user/cancername
fkobi: zig fetch --save <URL> ?

1747131281
cancername!~cancernam@user/cancername
that should update if, for example, the git branch has had new commits on t

1747131330
fkobi!~user@user/fkobi
so just downloading each module again?

1747131340
fkobi!~user@user/fkobi
is there no such thing as "apt update"?

1747131342
cancername!~cancernam@user/cancername
yes

1747131352
cancername!~cancernam@user/cancername
no

1747131355
cancername!~cancernam@user/cancername
should be plenty fas

1747131366
fkobi!~user@user/fkobi
I see

1747131368
cancername!~cancernam@user/cancername
post any issues you may encounter here

1747131373
cancername!~cancernam@user/cancername
fkobi: what would you suggest?

1747131384
cancername!~cancernam@user/cancername
you gotta check for updates, so you're redownloading anyway

1747131546
fkobi!~user@user/fkobi
I think it would be good do do a thing as `zig fetch --update` that will update live repositories

1747131579
fkobi!~user@user/fkobi
like dynamically remove the commit hash from the saved url and update it with the latest

1747131615
fkobi!~user@user/fkobi
I have managed to update two modules with no trouble

1747131688
fkobi!~user@user/fkobi
maybe I'll open a bug on `zig fetch --update` someday

1747131696
fkobi!~user@user/fkobi
regardless, thanks for the help!

1747135184
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
cancername: I think it was related to calling c functions from different c files (which have the same library included). Make a struct using one c file and using that scruct in a call to a other c file.

1747135199
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
something like that

1747135608
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
merging those file into one seems to solve it

1747137032
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: that idea about a tool making a zig wrapper for a c library. You said it was impossible to know which zig type would be needed, as c doesn't expose enough information about it. I was wondering, are those 'from this c to this zig type' conversion possibilities limited? If so, such a tool could be interactive and let the user choose from certain options. 

1747137124
ifreund!2940d10f8b@user/ifreund
flower_: this tool exists and you are using it, it is called zig translate-c

1747137163
ifreund!2940d10f8b@user/ifreund
interactively choosing proper pointer type for every [*c] pointer would be terrible UX, expect hundreds to thousands of pointers in many real-world cases

1747137196
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ifreund: but translate -c converts to c specific types like [*c], which you shouldn't use in a wrapper afaik

1747137199
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm ok

1747137240
ifreund!2940d10f8b@user/ifreund
translate-c could be taught to read additional type annotations in the C header

1747137262
ifreund!2940d10f8b@user/ifreund
and we could add our own __attribute__(many-pointer) or whatever things

1747137300
ifreund!2940d10f8b@user/ifreund
if translate-c had the necessary information, it wouldn't need to output [*c] pointers

1747137344
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
interesting thoughts, all though beyond my scope of expertise

1747137345
ifreund!2940d10f8b@user/ifreund
related: https://github.com/ziglang/zig/issues/20654#issuecomment-2378041731

1747137448
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
using c in zig, is more complicated then I thought it was. I can imagine people decide to just write the whole thing in c then. 

1747137477
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
but as said before, I'm not a skilled c programmer and new to Zig / manual memory management

1747137655
Gliptic!~glip@2a01:4f8:c012:91f3::1
there are other systems of non-standard C annotations that could be used too. Microsoft uses something, I forget what it's called

1747137680
Gliptic!~glip@2a01:4f8:c012:91f3::1
SAL annotations 

1747137705
Gliptic!~glip@2a01:4f8:c012:91f3::1
seems to be MS proprietary

1747138754
xlii!~xlii@83.9.221.118.ipv4.supernova.orange.pl
^^ C is C and zig is zig. I've done dozen of integration of a single C file-library with dozen hosts and zig made usage easiest of the bunch.

1747138940
xlii!~xlii@83.9.221.118.ipv4.supernova.orange.pl
But in the end it's leaky abstraction all the way till the bottom 

1747152200
grayhatter!~grayhatte@user/grayhatter
re: fkobi's question, I suspect that's part of zig's syntatic sriracha a reasonable developer would never just blindly update all their repos, you have to review the change log when migrating/upgrading versions

1747152210
grayhatter!~grayhatte@user/grayhatter
IMO: if you don't you're a bad engineer 

1747153404
grayhatter!~grayhatte@user/grayhatter
god I love working in zig

1747154454
bblack!~bblack@wikimedia/bblack-WMF
re: translate-c some pages up: it would be nice if there was a non-optional variant of [*c] (many-item-ness still unknown, but can't be null), which translate-c used when the non-null attribute was present on a C pointer.

1747154464
bblack!~bblack@wikimedia/bblack-WMF
non-null attributes have been around and useful for a while in the C world.

1747154506
grayhatter!~grayhatte@user/grayhatter
bblack: would that be nice?

1747154550
bblack!~bblack@wikimedia/bblack-WMF
well, maybe, depending on your POV.  It could also be a lie, because the header says non-null but the library code does in fact return nulls :)

1747154562
grayhatter!~grayhatte@user/grayhatter
that's why I'm asking

1747154594
grayhatter!~grayhatte@user/grayhatter
I didn't think any flavor of C enforced anything like that, and that stepping on that landmine would ruin my day

1747154662
bblack!~bblack@wikimedia/bblack-WMF
AFAIK the modern gcc/clang implementations enforce non-null attributes (and "returns_nonnull" for retvals), and catch mistakes, and optimize around it, etc.

1747154675
bblack!~bblack@wikimedia/bblack-WMF
but nothing's going to stop a header and an implementation differing in behavior after-the-fact.

1747154763
grayhatter!~grayhatte@user/grayhatter
it's a 2 cycle check that the branch predictor will love... I'll trade a flavor of [*c] that's trivial to reason about for that every day of the week :D

1747154775
grayhatter!~grayhatte@user/grayhatter
s/flavor/implementation

1747154785
norineko!~norineko@user/norineko
how does json parsing work with tagged unions? based on my reading of the source, it's { "<union tag>": { "field1": val } }?

1747154817
grayhatter!~grayhatte@user/grayhatter
does json *work* with tagged unions?

1747154820
grayhatter!~grayhatte@user/grayhatter
that's cool!

1747154861
norineko!~norineko@user/norineko
apparently it only works with tagged unions, and not with untagged

1747154864
norineko!~norineko@user/norineko
which makes sense.

1747155136
norineko!~norineko@user/norineko
writing custom parsers seems a little tricky, but I think it should be possible to make a json parse function that uses inner tags i.e { type: "tag", field1: val1, ...}

1747155266
norineko!~norineko@user/norineko
first requires parsing it as an object, and then checking for a "type" tag, and then getting the fields from the object based on that type?

