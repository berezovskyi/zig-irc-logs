1743305911
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
If a C function has memset() inside it and that function is used in zig, the moment that reference is lost that memory is gone right? even if you do `@ptrFromInt()`

1743306151
grayhatter!~grayhatte@user/grayhatter
there's no way to make those words make sense in that order

1743306169
grayhatter!~grayhatte@user/grayhatter
memset has nothing to do with how long memory exists

1743306219
grayhatter!~grayhatte@user/grayhatter
you also shouldn't be using ptrFromInt nor intFromPtr

1743306251
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o right, why was i under the impression that memset was local memory!

1743306371
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, i am thinking of changing it, even though i like the idea of making so python doesn't get access to pointer, for some reason i can't recreate the pointer from @ptrFromInt()

1743306458
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it keeps loosing ring_fd! so weird.

1743309337
anjan!f328a705f9@2a03:6000:1812:100::f
Hi, I am developing this program: https://git.sr.ht/~anjan/honeybee The problem is that when I build it, one of the libraries has an absolute reference to the snikket-sdk library https://paste.sr.ht/~anjan/1804ed5d38d82f1dce63f7de8febc44fcb1a2eb5

1743309383
anjan!f328a705f9@2a03:6000:1812:100::f
Im not familiar with the zig build system but I need to remove this absolute reference and I wish libsnikket.so was like libpulse.so.0 

1743309410
anjan!f328a705f9@2a03:6000:1812:100::f
does anyone know if I am just using the zig build system incorrectly?

1743309475
grayhatter!~grayhatte@user/grayhatter
anjan: I can't see the source, sr.ht is blocked

1743309490
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: the sr.ht paste link?

1743309502
grayhatter!~grayhatte@user/grayhatter
the source, not the paste

1743309527
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://git.sr.ht/~anjan/honeybee/tree/main/item/build.zig

1743309531
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, ^

1743309542
grayhatter!~grayhatte@user/grayhatter
stealth_: sr.ht is blocked

1743309559
grayhatter!~grayhatte@user/grayhatter
> making sure you're not a bot

1743309565
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, https://zigbin.io/d8f5ca

1743309633
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
anjan, you don't need both lib.linkLibC(); lib.linkSystemLibrary("c"); first is enough.

1743309684
anjan!f328a705f9@2a03:6000:1812:100::f
stealth_: done

1743309744
grayhatter!~grayhatte@user/grayhatter
anjan: I'm guessing /usr/lib/libsnikket.so is the output of pkg-config for it?

1743309757
grayhatter!~grayhatte@user/grayhatter
where libpulse is just libpulse.so.0

1743309793
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: https://zigbin.io/4cb5e3

1743309835
grayhatter!~grayhatte@user/grayhatter
yeah, I saw that... like I said already the paste link worked

1743309885
anjan!f328a705f9@2a03:6000:1812:100::f
Im not sure how to check what the pkg-config is or what you mean grayhatter 

1743309965
grayhatter!~grayhatte@user/grayhatter
`pkg-config --libs snikket`

1743309969
grayhatter!~grayhatte@user/grayhatter
I assume

1743310038
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: https://paste.sr.ht/~anjan/9a00c19cc1dd44309c74705e8cd2fea43f0ca3e1

1743310041
grayhatter!~grayhatte@user/grayhatter
which package provides snikket?

1743310092
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: https://paste.sr.ht/~anjan/9a00c19cc1dd44309c74705e8cd2fea43f0ca3e1

1743310098
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: https://pkgs.alpinelinux.org/package/edge/testing/x86_64/snikket-sdk

1743310318
grayhatter!~grayhatte@user/grayhatter
anjan: try `pkg-config --libs libpulse`

1743310330
grayhatter!~grayhatte@user/grayhatter
I assume it'll say -lpulse -pthread

1743310343
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: thats what it says on my machine

1743310441
grayhatter!~grayhatte@user/grayhatter
I assume if you create and provide a snikket.pc file (as an example from pulse audio https://github.com/pulseaudio/pulseaudio/blob/master/libpulse-simple.pc.in ) I assume it'll stop using the absolute dir for it

1743310498
grayhatter!~grayhatte@user/grayhatter
I think there's a way to specific a lib path in build.zig, but I don't know it off the top of my head, so would need to play around a bit to figure it out... but the build env you're describing is a bit too complex for me to invest in tonight

1743310539
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: where should I save this file?

1743310551
anjan!f328a705f9@2a03:6000:1812:100::f
I guess I can check where it is on my file path

1743310553
anjan!f328a705f9@2a03:6000:1812:100::f
thanks

1743310577
grayhatter!~grayhatte@user/grayhatter
https://pkgs.alpinelinux.org/contents?name=pulseaudio-dev&repo=community&branch=edge&arch=x86 according to this /usr/lib/pkgconfig/libsnikket.pc ?

1743310603
grayhatter!~grayhatte@user/grayhatter
or something like that? I'm half guessing from how pulse works but snikket isn't

1743310617
grayhatter!~grayhatte@user/grayhatter
it's been years since I've needed to touch pkg-config files :)

1743310972
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: I got `pkg-config --libs libsnikket` to output -lsnikket

1743310988
grayhatter!~grayhatte@user/grayhatter
did that fix your absolute path?

1743310990
anjan!f328a705f9@2a03:6000:1812:100::f
but it still does absolute path

1743310997
anjan!f328a705f9@2a03:6000:1812:100::f
ziglang does

1743311001
anjan!f328a705f9@2a03:6000:1812:100::f
could it be cache?

1743311013
anjan!f328a705f9@2a03:6000:1812:100::f
i rm'd .zig-cache and zig-out

1743311016
grayhatter!~grayhatte@user/grayhatter
yes, it'll cache very agressively 

1743311108
anjan!f328a705f9@2a03:6000:1812:100::f
grayhatter: rm -rf ~/.cache/zig still gives me absolute path

1743315009
mountaingoat!~mountaing@user/mountaingoat
is there a more direct way to capture the payload of a tagged union without a switch capture?

1743315377
mountaingoat!~mountaing@user/mountaingoat
nvm, got it to work with a switch

1743315816
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/986b52 why does line: 33 not show ring_fd as 3 ? 

1743326672
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_, do you see something wrong with line 20?

1743326860
Gliptic!~glip@2a01:4f8:c012:91f3::1
oh, he left

1743334389
tsujp!497e1f7b6a@sourcehut/user/tsujp
blurrycat: yeah it was the network stuff. zig-tracy by default sets tracy option TRACY_NO_EXIT to 1 so tracy will refuse to exit until all data is sent to the server

1743334590
tsujp!497e1f7b6a@sourcehut/user/tsujp
how does one add a c macro to a zig package? (specifically https://github.com/FalsePattern/zig-tracy/blob/master/build.zig). I am trying to set TRACY_VERBOSE but doing   tracy.module("tracy").addCMacro("TRACY_VERBOSE", "1");  in my build.zig appears to do nothing

1743334791
yataro!~yataro@user/yataro
related ziggit topic: https://ziggit.dev/t/build-system-how-to-add-c-macro-def-to-build-zig-zon-dependency/9199

1743335795
tsujp!497e1f7b6a@sourcehut/user/tsujp
ill give that a shot, cheers

1743344350
bw!sid2730@user/betawaffle
is it possible to do some kind of comptime assert that a function doesn't accidentally use any stack space?

1743344543
bw!sid2730@user/betawaffle
like if i'm writing a naked function, for example, and i'm only doing inline asm, or inline "calling" other functions that also only do inline asm

1743350258
blurrycat!~blurrycat@user/blurrycat
tsujp: glad you could figure it out, I'm not too surprised that running in a container screws with networking :/

1743352567
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
is there a example how to work with string, changing them at runtime?

1743352620
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
argghh I did read about strings in zig and I want to smash my laptop

1743352970
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
should I use a allocator or a [100]u8 or [100] const u8

1743353004
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
and how do I assign a new value to a string variable?

1743353463
phaleth!~phaleth@user/phaleth
using @memcpy

1743353673
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
so what is described here: https://nofmal.github.io/zig-with-example/string-handling/

1743353755
phaleth!~phaleth@user/phaleth
that's some old zig there

1743353954
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
link to better guides or examples are welcome ;)

1743354153
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 38 why does not print `3` any ideas? https://zigbin.io/f787f9

1743354437
phaleth!~phaleth@user/phaleth
flower_: it depends on what you want to do, as zig doesn't have built-in string type might as well look around for a lib

1743354549
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/JakubSzark/zig-string

1743354693
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
flower_: I wouldn’t use a library. strings are a slice of bytes. a slice of bytes is a pointer and a length. treat all strings as pointers to memory and you will be pretty well off

1743354742
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ie if you want to modify it, it can’t be []const u8. if you want to add to it, you need a bigger len and probably a new allocation

1743354936
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
rockorager: ok thx

1743355011
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
rockorager: so slices, not arrays

1743355157
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that pointer stuff has been trolling me for few days now :(

1743355178
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
generally yes. there’s no reason it can’t be backed by an array but most people are using slices to represent strings because they can be arbitrary length

1743356336
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: line 25, do you see anything strange about it?

1743356615
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, i saw andrew do it on his stream :p

1743356631
Gliptic!~glip@2a01:4f8:c012:91f3::1
that line?

1743356637
Gliptic!~glip@2a01:4f8:c012:91f3::1
is that the strange thing about it?

1743356642
Gliptic!~glip@2a01:4f8:c012:91f3::1
I think there is something else

1743356681
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i have tried casing into "ring.ptr" should i be trying something else? 

1743356681
Gliptic!~glip@2a01:4f8:c012:91f3::1
I doubt andrew was doing this

1743356704
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: what is the lifetime of io_uring?

1743356734
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you do &io_uring, how long is that pointer valid for?

1743356746
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
from init to exit

1743356755
Gliptic!~glip@2a01:4f8:c012:91f3::1
what does that mean?

1743356777
Gliptic!~glip@2a01:4f8:c012:91f3::1
how is the variable io_uring kept alive "[until] exit"?

1743356781
Gliptic!~glip@2a01:4f8:c012:91f3::1
magic?

1743356807
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, well the `ring.ptr` is stored in `Ring` struct

1743356813
Gliptic!~glip@2a01:4f8:c012:91f3::1
and?

1743356817
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 3

1743356825
Gliptic!~glip@2a01:4f8:c012:91f3::1
how is that relevant?

1743356835
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so i should be able to call that Ring.ptr all over the place to get the ring info? 

1743356835
Gliptic!~glip@2a01:4f8:c012:91f3::1
remember, this isn't python

1743356842
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya why i get confused. 

1743356859
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in cython this stuff is handled automatically 

1743356870
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, can you answer the question, how is io_uring, a local variable, kept alive after queneInit returns?

1743356896
Gliptic!~glip@2a01:4f8:c012:91f3::1
what is generally the lifetime of local variables?

1743356940
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is that whats going on its local? i think i tried passing directly to `io_uring_queue_init(entries, ring.ptr)`

1743356959
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, obviously it's a local variable, you made it one

1743356984
Gliptic!~glip@2a01:4f8:c012:91f3::1
so how long is it valid?

1743356989
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well local variable should expire on function exit, but isn't that a pointer to C memory space and since i am passing that pointer to ring.ptr it should be kept alive? 

1743357001
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: there's no such thing as "kept alive"

1743357016
Gliptic!~glip@2a01:4f8:c012:91f3::1
a local variable is invalid after you leave the scope it's declared in, period

1743357040
Gliptic!~glip@2a01:4f8:c012:91f3::1
something you would have known if you learnt C

1743357061
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see, i have tried many things, this is the last iteration of tried i did before asking here.

1743357081
blurrycat!~blurrycat@user/blurrycat
stealth_: https://www.openmymind.net/learning_zig/stack_memory/

1743357131
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i can try passing `ring.ptr` directly since thats where its suppose to hold the pointer

1743357154
Gliptic!~glip@2a01:4f8:c012:91f3::1
what does that mean, passing `ring.ptr` directly?

1743357179
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 9, unless thats considered local as well? 

1743357201
Gliptic!~glip@2a01:4f8:c012:91f3::1
do you not know what local variables are?

1743357217
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i get confused, since i don't have much experience with it 

1743357250
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also that `ring` comes from outside the function, or suppose to at least.

1743357253
Gliptic!~glip@2a01:4f8:c012:91f3::1
I still don't know what you mean with passing `ring.ptr` directly

1743357274
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, line: 3 to old the ptr

1743357277
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
to hold*

1743357289
Gliptic!~glip@2a01:4f8:c012:91f3::1
hold the pointer to what?

1743357296
Gliptic!~glip@2a01:4f8:c012:91f3::1
what will it point to?

1743357328
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`io_uring_queue_init(entires, ring)` creates memset internally and assigns it to `ring`

1743357336
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you want the variable io_uring to have a longer lifetime, where would you put it?

1743357357
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: but `ring` is not a c.io_uring

1743357381
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/axboe/liburing/blob/master/src/setup.c#L309

1743357409
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: they called the variable ring, but your ring is something else

1743357413
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`ring.ptr` -> `?*c.io_uring`

1743357426
Gliptic!~glip@2a01:4f8:c012:91f3::1
ring.ptr is a _pointer_, yes

1743357443
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not a io_uring

1743357455
Gliptic!~glip@2a01:4f8:c012:91f3::1
where do you put the c.io_uring that you want it to point to?

1743357483
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you mean the local variable? sure i screwed it up, since all this was getting confusing. 

1743357498
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, I don't mean the local variable, because it can't be a local variable

1743357511
Gliptic!~glip@2a01:4f8:c012:91f3::1
but where would you put it so that it lives longer than a local variable

1743357546
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i figure in zig you assign it to local variable then pass that pointer to ring.ptr so safe keeping. like a temp passing of values

1743357560
Gliptic!~glip@2a01:4f8:c012:91f3::1
you figure?

1743357579
Gliptic!~glip@2a01:4f8:c012:91f3::1
but the local variable goes out of scope

1743357592
Gliptic!~glip@2a01:4f8:c012:91f3::1
what is the pointer pointing it after that?

1743357598
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well the goal is for Ring struct to hold on the pointer, while C keep the actual memory 

1743357623
Gliptic!~glip@2a01:4f8:c012:91f3::1
C doesn't keep the memory of c.io_uring

1743357638
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am talking about link with memset 

1743357639
Gliptic!~glip@2a01:4f8:c012:91f3::1
you've declared such a variable in zig

1743357651
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't care about that, I'm talking about c.io_uring itself

1743357679
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you want to have a pointer to c.io_uring, you need to store it somewhere

1743357692
Gliptic!~glip@2a01:4f8:c012:91f3::1
so where would you store it?

1743357695
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok, thanks for your input, let me try and fix the code, after we can talk about it if its still a mess. 

1743357773
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python i have `ring = liburing.io_uring()` which calls that `fn queueInit()` function, so `ring` would be `Ring struct` so reference in python to `ring` should keep that ptr in it. 

1743357804
Gliptic!~glip@2a01:4f8:c012:91f3::1
again, I'm not talking about `ptr`, I'm talking about what that pointer is pointing to

1743357824
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its somewhere in memory

1743357854
Gliptic!~glip@2a01:4f8:c012:91f3::1
it better be somewhere very specific in memory

1743357870
Gliptic!~glip@2a01:4f8:c012:91f3::1
in memory that is kept alive at least until queueExit

1743357891
Gliptic!~glip@2a01:4f8:c012:91f3::1
so is there somewhere you could put it so that it is kept alive until then?

1743357934
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i told you in Ring struct 

1743357951
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
the Ring.ptr is suppose to hold on to the pointer

1743357955
Gliptic!~glip@2a01:4f8:c012:91f3::1
ok, so you're going to put a c.io_uring in the Ring struct?

1743357973
Gliptic!~glip@2a01:4f8:c012:91f3::1
again, _not_ the pointer I'm talking about

1743357984
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 3

1743357988
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's a pointer

1743357992
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not a c.io_uring

1743357999
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
at least thats what i think i am doing. unless you tell me its wrong!?

1743358018
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm telling you that you need to have a c.io_uring somewhere

1743358025
Gliptic!~glip@2a01:4f8:c012:91f3::1
it cannot be a local variable like it is now

1743358031
Gliptic!~glip@2a01:4f8:c012:91f3::1
so what do you make it instead?

1743358052
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you are telling me i need to give it heap memory? 

1743358061
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm asking you

1743358077
Gliptic!~glip@2a01:4f8:c012:91f3::1
heap memory would work, but would be unnecessary

1743358089
Gliptic!~glip@2a01:4f8:c012:91f3::1
but perhaps you already have somewhere you could put it?

1743358089
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono! don't think i should do that, cause i have already tried that. 

1743358139
Gliptic!~glip@2a01:4f8:c012:91f3::1
do you perhaps have a struct that is kept alive until queueExit?

1743358151
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
see before i had https://zigbin.io/0a2462 but i removed it (same problem) but i am not suppose to manage the memory io_uring is suppose to manage the memory. 

1743358184
Gliptic!~glip@2a01:4f8:c012:91f3::1
io_uring is not managing the memory of where its stored

1743358189
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes `Ring` struct should stay alive even after init/exit since its python object as well, it will be gc's after.

1743358209
Gliptic!~glip@2a01:4f8:c012:91f3::1
but this older code is more correct, probably

1743358219
Gliptic!~glip@2a01:4f8:c012:91f3::1
so it's sad you regress it

1743358231
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: yes, so put c.io_uring... in Ring?

1743358239
Gliptic!~glip@2a01:4f8:c012:91f3::1
perhaps then you don't even need `ptr`

1743358272
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but prt is c.io_uring though.

1743358276
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not

1743358285
Gliptic!~glip@2a01:4f8:c012:91f3::1
it has `*` in front of it

1743358316
Gliptic!~glip@2a01:4f8:c012:91f3::1
I remember you used to have a `ptr` that _wasn't_ a pointer

1743358322
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't know why you changed that

1743358340
Gliptic!~glip@2a01:4f8:c012:91f3::1
problem is you change random things, not knowing what they do

1743358344
Gliptic!~glip@2a01:4f8:c012:91f3::1
so you keep adding issues

1743358357
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i had an argument about it with liburing guys and they said ring is manage by io_uring itself.

1743358380
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i shouldn't be assigning it memory

1743358381
Gliptic!~glip@2a01:4f8:c012:91f3::1
you misinterpreted that

1743358395
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not managing the memory of _c.io_uring itself_

1743358432
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: if you can't assign it memory, how would you call io_uring_queue_init at all?

1743358453
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i thought managing python reference was bad, this pointer stuff is worst. 

1743358473
Gliptic!~glip@2a01:4f8:c012:91f3::1
because you don't understand what a pointer is

1743358475
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic,  cause inside io_uring_queue_init they memset it.

1743358485
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/axboe/liburing/blob/master/src/setup.c#L309

1743358490
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: that's irrelevant, to call io_uring_queue_init you need a pointer to a io_uring, right?

1743358504
Gliptic!~glip@2a01:4f8:c012:91f3::1
so if you can't "manage the memory of io_uring", how do you get a pointer to one?

1743358547
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: yes, what does memset do?

1743358583
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
sets the memory to be size of ring

1743358589
Gliptic!~glip@2a01:4f8:c012:91f3::1
nope

1743358596
Gliptic!~glip@2a01:4f8:c012:91f3::1
don't guess

1743358605
Gliptic!~glip@2a01:4f8:c012:91f3::1
look things up if you don't know

1743358627
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe i am wording it differently 

1743358637
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm pretty sure that's not it

1743358656
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
"memset - fill memory with a constant byte"

1743358661
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1743358663
Gliptic!~glip@2a01:4f8:c012:91f3::1
fill _memory_

1743358671
Gliptic!~glip@2a01:4f8:c012:91f3::1
so it requires valid memory to call it

1743358692
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so its just 0'ing the memory i give it?

1743358695
Gliptic!~glip@2a01:4f8:c012:91f3::1
so to call io_uring_queue_init you need to allocate memory for a io_uring

1743358698
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1743358714
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
darn it!!!

1743358788
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is why i hate C why would they name a function memset, if it just 0

1743358794
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
s the damn memory.

1743358806
Gliptic!~glip@2a01:4f8:c012:91f3::1
you can pass something else than 0

1743358814
Gliptic!~glip@2a01:4f8:c012:91f3::1
it sets memory, that's all

1743358862
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's of course no way it could allocate memory for a pointer you've already passed in

1743358863
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
man, golangs tls is *fast*

1743358876
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
IIRC it's all handwritten assembly

1743362398
grayhatter!~grayhatte@user/grayhatter
their TLS is not handwritten ASM, I've referenced the go code when I was building my tls lib

1743362419
grayhatter!~grayhatte@user/grayhatter
I would believe that their crypto is hand written asm, that does strike me as the kinda thing golang would do

1743362615
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ah ok

1743362625
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
you have a tls lib??

1743362646
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
55% of my server is in montgomeryLoop 

1743362664
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
s/server/proxy

1743362764
grayhatter!~grayhatte@user/grayhatter
rockorager: I needed some crypto algs that weren't available in the stdlib version for srctree, it's used to be better than the stdlib version, but when I tested it recently, I think the stdlib version is now better than mine

1743362894
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I’m using ianic/tls.zig because it provides a nonblock handshake functionality

1743362908
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I haven’t benched it vs stdlib, but he does have a pr to upstream it already

1743362908
grayhatter!~grayhatte@user/grayhatter
that said, I'm not really happy with it in it's current state... I still have plans to improve the stdlib verison, but I don't have the attention span to work on it while all the attention is on the compiler

1743362968
grayhatter!~grayhatte@user/grayhatter
is it that PR still open?

1743363005
grayhatter!~grayhatte@user/grayhatter
I remember having to stop myself from commenting on some of the issues I had with one of the TLS prs because it wasn't done yet

1743363026
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
yeah

1743363032
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
it was opened not too long ago

1743363040
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
not at a computer so can’t look for it now

1743363059
grayhatter!~grayhatte@user/grayhatter
you don't need to, I was just wondering if you knew off the top of you head, I can search too :)

1743363081
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ianic is the author 

1743363145
grayhatter!~grayhatte@user/grayhatter
https://github.com/ziglang/zig/pull/23005

1743363263
grayhatter!~grayhatte@user/grayhatter
oof

1743363268
grayhatter!~grayhatte@user/grayhatter
I'm not sure how I feel about this PR either

1743365835
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, by just having https://zigbin.io/1145d3 i don't even need to manage Ring's memory, seems like python does it.

1743367147
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
This is excellent zig documentation!!! https://ziglang.org/documentation/master/std/#std.mem.zeroes how all the function doc should be.

1743369564
andrewrk!~andrewrk@mail.ziglang.org
bw: for naked functions specifically I think there's an old issue open for that. I think that kinda just needs to be in the language

1743369591
bw!sid2730@user/betawaffle
Yeah

1743369872
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_, seems?

1743369904
andrewrk!~andrewrk@mail.ziglang.org
flower_: what kind of strings are you working with? what's the application?

1743370186
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, python does assign the memory but it does it after io_uring_queue_init is called, so its null till then. total pain to deal with since someone would try and access fields before that and get segfault. I am actually rewriting it so the memory gets manually assigned when __new__ is called.

1743370278
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_, I don't think python assigns any memory

1743370290
Gliptic!~glip@2a01:4f8:c012:91f3::1
except the object header

1743370318
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, well it does, cause i confirmed that ring_fd being filled from init to exit. 

1743370322
Gliptic!~glip@2a01:4f8:c012:91f3::1
at least to anything specific (non-zero)

1743370339
Gliptic!~glip@2a01:4f8:c012:91f3::1
what would it assign it to?

1743370344
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
3

1743370350
Gliptic!~glip@2a01:4f8:c012:91f3::1
?

1743370363
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats ring_fd == 3;

1743370381
Gliptic!~glip@2a01:4f8:c012:91f3::1
why would _python_ assign 3 to ring_fd

1743370387
Gliptic!~glip@2a01:4f8:c012:91f3::1
isn't your code doing that

1743370391
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
python itself uses fd 1, 2 for thread and other usage, so 3 would be the first free fd it can assign. 

1743370432
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ring_fd is assigned by io_uring_queue_ini function

1743370445
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, so not assigned by python

1743370515
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well no, by the memory space is menaged by python, io_uring_queue_init assigns ring_fd to 3, and later when i check what the ring_fd is in io_uring_queue_exit it says 3, so python is keeping that data.

1743370620
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, https://docs.python.org/3/c-api/memory.html

1743370623
Gliptic!~glip@2a01:4f8:c012:91f3::1
you told python to allocate @sizeOf(Ring), so the fields in Ring are allocated by python, yes

1743370704
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i didn't tell it, does it automatically 

1743370715
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, you definitely did

1743370722
Gliptic!~glip@2a01:4f8:c012:91f3::1
in basicsize, no?

1743370755
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, defined it in struct, but it doesn't actually give it memory till io_uring_queue_init passes the data! so its dynamic. 

1743370755
Gliptic!~glip@2a01:4f8:c012:91f3::1
otherwise it would not have any idea how much to allocate

1743370764
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's not the case

1743370798
Gliptic!~glip@2a01:4f8:c012:91f3::1
you seem to still be confused about how this works

1743370837
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, i don't like the magic stuff it doing... i would range just manually assign/free memory. 

1743370847
Gliptic!~glip@2a01:4f8:c012:91f3::1
the memory is allocated before io_uring_queue_init, or it wouldn't be possible to call that function

1743370864
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not magic, it allocates basicsize bytes

1743370882
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you think that, but in my test it fails.

1743370893
Gliptic!~glip@2a01:4f8:c012:91f3::1
probably because you broke something else

1743370937
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no, i just uncommented std.debug.print and it starting failing.  

1743370951
Gliptic!~glip@2a01:4f8:c012:91f3::1
that suggests you're doing something illegal

1743370991
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono, i am just going to manually manage memory.

1743371052
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is why i never wanted to give python memory management, it does weird stuff like this.

1743371056
Gliptic!~glip@2a01:4f8:c012:91f3::1
what, are you going to define custom memory allocators for your python type?

1743371082
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no, object is managed by python but everything io_uring is managed by zig. 

1743371120
Gliptic!~glip@2a01:4f8:c012:91f3::1
so you're telling python to allocate a *c.io_uring instead?

1743371129
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/1047bb line: 3 is managed by zig. 

1743371136
Gliptic!~glip@2a01:4f8:c012:91f3::1
and heap allocating a c.io_uring in zig?

1743371157
Gliptic!~glip@2a01:4f8:c012:91f3::1
why would that work better?

1743371172
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, its seems like a better option, before i did it inside __init__ and now i am going to do in in __new__ method. 

1743371175
Gliptic!~glip@2a01:4f8:c012:91f3::1
you're still trusting python to allocate the object for you

1743371219
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya object part is fine, nothing i can do about that.

1743371224
Gliptic!~glip@2a01:4f8:c012:91f3::1
whatever it is that's going wrong, I'm pretty sure it's not python allocating X bytes instead of Y bytes

1743371254
Gliptic!~glip@2a01:4f8:c012:91f3::1
unless you're telling it to allocate the wrong number of bytes 

1743371310
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
as i said if assigned to python it does it automatically, by from my test i think it does it dynamically as well.

1743371328
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
probably some kind of optimization! who knows. 

1743371408
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't know what that means

1743371433
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
let me code the new function and test it, i will let u know. 

