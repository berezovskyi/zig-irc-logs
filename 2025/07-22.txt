1753156429
kenrap!~kenrap@user/kenrap
Is it possible to destruct arrays in the for loop value capture expression when iterating a 2D array?

1753159036
andrewrk!~andrewrk@mail.ziglang.org
kenrap: no

1753159556
kenrap!~kenrap@user/kenrap
andrewrk: not a good design choice?

1753159586
andrewrk!~andrewrk@mail.ziglang.org
sorry, what's the question?

1753159623
kenrap!~kenrap@user/kenrap
with regards to the for loop destructuring

1753159830
kenrap!~kenrap@user/kenrap
I guess I was asking a rhetorical question, don't mind it.

1753188567
leon-p!1b22ab9492@user/leon-p
has anyone used Dir.copyFile() to copy files onto an exFAT fs? Fails with error.FileLocksNotSupported for me, however the trace shows openat failing with OPNOTSUPP "the path argument names a socket" (it does not?) and strace shows something comepletely different: an invalid madvise where the advice arg is 0xffffffff...

1753192328
leon-p!1b22ab9492@user/leon-p
starting to wonder if the mtp FUSE implementation of gvfs-mtp is just kinda messed up...

1753192430
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
I regret to inform you that, as far as I can tell, every implementation of MTP is messed up.

1753193840
sg94!~sg94@dhcp-146-135-113-97.gobrightspeed.net
was there ever a good reason for MTP over mass storage? i remember it being a weird pain since forever.

1753193986
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
You can't mount a fat32 filesystem (or most others, for that matter) from multiple systems simultanously without corrupting it.

1753193988
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
So for something like a phone, to need to rig it so that when plugged in to USB, the phone unmounts the filesystem so that the USB host can mount it.

1753194025
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
This is, it turns out, a huge pain in the ass with lots of nasty edge cases and fun failure states, so they replaced it with MTP, which is also a huge pain in the ass with lots of nasty edge cases and fun failure states, but different ones.

1753194118
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
(and is at least unlikely to completely destroy the filesystem when it goes wrong)

1753194265
leon-p!1b22ab9492@user/leon-p
ok, this is really cursed: the filemanager can copy files over just fine, but in the shell cp can't, touch doesn't work and shell redirection also can't create files on that fs...

1753194309
leon-p!1b22ab9492@user/leon-p
I think I'll resort to turning it off and just plugging the SD card into my laptop...

1753194435
ifreund!2940d10f8b@user/ifreund
I was recently amazed to see MTP work perfectly on a friends windows laptop

1753194477
ifreund!2940d10f8b@user/ifreund
I've always just used workarounds that avoid MTP on linux

1753194600
leon-p!1b22ab9492@user/leon-p
see, it works pretty fine in the file manager when drag'n'dropping some music over, but it's a bit annoying to manually remember which albums I already have on the phone and which are not yet synced. also the sd-card is exFAT, which doesn't support some characters in filenames like ':' which is unfortunately somewhat common in song titles. So this is me trying to find a nicer, automatic solution to getting my music on my phone. Typical syncing things (rsync, sy

1753194600
leon-p!1b22ab9492@user/leon-p
ncthing, ...) do not support auto-renaming to appease exFAT, so I am not writing my own thing...

1753194632
leon-p!1b22ab9492@user/leon-p
s/not/now/

1753194647
leon-p!1b22ab9492@user/leon-p
at least I am trying, apparently FUSE does not like me...

1753196427
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
ifreund: frankly that would amaze me as well, because last time I encountered MTP I couldn't get it working on any OS, although it failed differently on all of them

1753197578
triallax!~triallax@lacerte/triallax
i've had mtp working before on linux

1753197707
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
Witchcraft!

1753203914
Profpatsch!~Profpatsc@user/Profpatsch
Is commenting on github issues disabled for some people? I am trying to add a comment but on submit it greys out and my text gets thrown away

1753204072
Profpatsch!~Profpatsc@user/Profpatsch
Anyway, hereâ€™s my comment on the bitfields issue, which I am unable to submit: https://gist.github.com/Profpatsch/1d5d90e730afaf45f9ed502327c975d3

1753208437
Profpatsch!~Profpatsc@user/Profpatsch
    var argsz = [_:0][*c]u8{@constCast("hi")};

1753208462
Profpatsch!~Profpatsc@user/Profpatsch
is this @constCast the best way to remove the const from the string?

1753210650
andrewrk!~andrewrk@mail.ziglang.org
you can't just pray the gay away

1753220964
LAC-Tech!~lewis@granite-phrase.bnr.la
I feel like std.BoundedArray just exists because of the decision to not throw errors on failed allocations in ArrayList

1753221037
LAC-Tech!~lewis@granite-phrase.bnr.la
ie I used BoundedArray when shooting over the capacity is 1) not allowed 2) should not crash the program. it just happens to be stack memory backed.

1753221056
LAC-Tech!~lewis@granite-phrase.bnr.la
mabye I'll just write my own arraylist (w/ blackjack and hookers) like tigerbeetle does. I guess it's easy enough

1753221755
bblack!~bblack@wikimedia/bblack-WMF
LAC-Tech: what do you mean about ArrayList "not throw errors on failed allocations"? AFAIK it does in fact return an error on failed allocations.

1753222431
bblack!~bblack@wikimedia/bblack-WMF
maybe what you actually want is a bounded heap allocator to use with ArrayList?

1753222455
bblack!~bblack@wikimedia/bblack-WMF
(if you want BoundedArray behavior, but in heap)

1753222727
LAC-Tech!~lewis@granite-phrase.bnr.la
bblack: my mistake, appendAssumeCapacity is what I mean. it won't retun an error saying "you've over shot"

1753222753
LAC-Tech!~lewis@granite-phrase.bnr.la
so there's three scenarios, right? append and allocate if we overshoot. append and panic if we overshoot. append and return an error if we overshoot

1753223741
bblack!~bblack@wikimedia/bblack-WMF
LAC-Tech: right, ArrayList.append gives you option 1 (allocating append, will only error if allocator fails).  ArrayList.appendAssumeCapacity sorta gives you option two, I guess (although I'd argue that's not what that interface is meant for - it's meant for cases where you actually do know you've preallocated said capacity).  option 3 is boundedarray, but it's stack not heap.

1753223812
bblack!~bblack@wikimedia/bblack-WMF
you could make a variant of boundedarray that uses heap for storage and allocates once at the start.  but it seems to me like the more-general way to solve this would be ArrayList using a bounded allocator.

1753223878
bblack!~bblack@wikimedia/bblack-WMF
arguably if you got the design changes just-perfect, arraylist itself could use a fixed stack buffer or a bounded heap allocator and cover all these possible use-cases in one file.

1753223918
bblack!~bblack@wikimedia/bblack-WMF
(or... you could implement a bounded allocator that uses stack storage.  that might be even more-generalized)

1753224127
bblack!~bblack@wikimedia/bblack-WMF
FixedBufferAllocator? I think you could feed it a stack or heap slice as buffer storage from a lower-level allocator, then use it as your arraylist allocator to throw an allocation error when you go over the intended capacity/size.

1753224165
LAC-Tech!~lewis@granite-phrase.bnr.la
bblack: I feel like ArrayListUnmanaged and BoundedArray probably want to be one struct

1753224201
bblack!~bblack@wikimedia/bblack-WMF
probably

1753224224
LAC-Tech!~lewis@granite-phrase.bnr.la
appendWithAllocator, appendSafe, appendUnsafe 

1753224233
bblack!~bblack@wikimedia/bblack-WMF
but if the ergonomics aren't terrible, I feel like ALU can already do BA's job, by feeding it a FixedBufferAllocator (heap or stack)

1753224368
LAC-Tech!~lewis@granite-phrase.bnr.la
I feel like FBA ergonomics are terrible though :D

1753224372
LAC-Tech!~lewis@granite-phrase.bnr.la
or at least in this case

1753224378
LAC-Tech!~lewis@granite-phrase.bnr.la
anyway I'll yap less and write my own

1753224533
bblack!~bblack@wikimedia/bblack-WMF
var buf: [@sizeOf(Foo) * 128]u8; const fba_128_foos = std.FixedBufferAllocator.init(&buf).allocator(); var list: std.ArrayListUnamanged(Foo) = .empty; try list.append(fba_128_foos, foo);

1753224538
bblack!~bblack@wikimedia/bblack-WMF
^ something along those sorts of lines?

1753224592
bblack!~bblack@wikimedia/bblack-WMF
alignment issues need sorting, but still

1753224646
bblack!~bblack@wikimedia/bblack-WMF
it really needs to be more like: "var buf: [128]Foo;" and then some casting/alignment magic in the setup.

1753224654
LAC-Tech!~lewis@granite-phrase.bnr.la
yeah it's sort of awful to make a sort of pseudo allocator for a thing that really requires one allocation, or really just a slice, just to fit ArrayList's API

1753224808
bblack!~bblack@wikimedia/bblack-WMF
oh wait, BoundedArray doesn't have to be on the stack

1753224900
bblack!~bblack@wikimedia/bblack-WMF
const MyBAType = std.BoundedArray(Foo, 128); const heap_ba = alloc.create(MyBAType);

1753228389
andrewrk!~andrewrk@mail.ziglang.org
LAC-Tech: I don't like BoundedArray either

