1752106834
triallax!~triallax@lacerte/triallax
ok, it was clear that wasn't really making any progress, so after even more mucking around to get the specific bad ir, the failing pass, etc. now i have a reduced bitcode repro

1752106940
triallax!~triallax@lacerte/triallax
https://bpa.st/2ECQ

1752107001
triallax!~triallax@lacerte/triallax
llvm-as reduced.ll; opt -passes=loop-simplifycfg -disable-output reduced.bc

1752107003
triallax!~triallax@lacerte/triallax
this should do the trick

1752107109
LAC-Tech!~lewis@granite-phrase.bnr.la
I am REALLY liking zig recently. I've always sort of liked it, but 0.14 really has been a big jump

1752107201
Drixtan!~Drixtan@user/Drixtan
before zig, my life was dark and boring, now, I am happy to get out of the bed in the morning, I enjoy life and I stopped thinking about suicide - thank you Zig, you are a real life safer!

1752107594
andrewrk!~andrewrk@mail.ziglang.org
Drixtan: that's amazing. thank you for sharing

1752107624
andrewrk!~andrewrk@mail.ziglang.org
I hope you can ride that high into a sustainably healthier mental state

1752107810
Drixtan!~Drixtan@user/Drixtan
I feel bad now, I was just kidding, I was exagerating to a point I thought that would be obvious but yea, we never know - so I am sorry to have messing around with that topic, I shouldn't have. LIke, I really like Zig, but I am not in a bad state of mind. Zig gives me joy still

1752107876
andrewrk!~andrewrk@mail.ziglang.org
I considered that you might be kidding but in the chance that you were sincere I wanted to give you a warmer reply

1752107890
Drixtan!~Drixtan@user/Drixtan
yeah, we never know "these days", so my bad

1752109276
triallax!~triallax@lacerte/triallax
unsure where to report this, my guess is it's an llvm bug but i can't say

1752109313
andrewrk!~andrewrk@mail.ziglang.org
triallax: ah I missed your reduction until now. taking a look

1752109334
triallax!~triallax@lacerte/triallax
no worries, thanks for bearing with me

1752109404
andrewrk!~andrewrk@mail.ziglang.org
what's the command to trigger the crash?

1752109414
triallax!~triallax@lacerte/triallax
i sent that as well, a sec

1752109421
triallax!~triallax@lacerte/triallax
llvm-as reduced.ll; opt -passes=loop-simplifycfg -disable-output reduced.bc

1752109425
andrewrk!~andrewrk@mail.ziglang.org
ah

1752109470
andrewrk!~andrewrk@mail.ziglang.org
nice, I can reproduce it

1752109532
andrewrk!~andrewrk@mail.ziglang.org
fairly certain this is an llvm bug because it's not hitting any assertions, it's crashing

1752109590
andrewrk!~andrewrk@mail.ziglang.org
we can also track this bug in zig issue tracker tho

1752109602
triallax!~triallax@lacerte/triallax
i don't mind reporting to both

1752109607
triallax!~triallax@lacerte/triallax
but i don't have a zig reproducer

1752109620
andrewrk!~andrewrk@mail.ziglang.org
that's fine, it's fairly obvious that labeled switch continue can produce this pattern

1752109640
triallax!~triallax@lacerte/triallax
right

1752109873
triallax!~triallax@lacerte/triallax
that being said though

1752109879
triallax!~triallax@lacerte/triallax
my project is open-source

1752109889
triallax!~triallax@lacerte/triallax
so i can post a link i suppose

1752110649
andrewrk!~andrewrk@mail.ziglang.org
thanks!

1752110858
triallax!~triallax@lacerte/triallax
ok, llvm issue filed as wel

1752110871
andrewrk!~andrewrk@mail.ziglang.org
let's see what they say

1752113737
andrewrk!~andrewrk@mail.ziglang.org
bombs away! https://github.com/ziglang/zig/pull/24329 set to auto-merge

1752113780
rvrb!~rvrb@156.146.51.228
oo, exciting

1752113799
triallax!~triallax@lacerte/triallax
nice, i was just seeing that earlier oday

1752113810
triallax!~triallax@lacerte/triallax
happy to see Reader and Writer get an overhaul

1752113868
andrewrk!~andrewrk@mail.ziglang.org
I don't think this is the final resting state for those APIs but I'm positive that this is a lot closer to it

1752113902
andrewrk!~andrewrk@mail.ziglang.org
it's really nice how many things become non-generic after these changes

1752114049
triallax!~triallax@lacerte/triallax
having all readers and writers be buffered now is an interesting choice

1752114079
rvrb!~rvrb@156.146.51.228
what's the next step toward 'Io as an interface' after this PR merges?

1752114130
rvrb!~rvrb@156.146.51.228
restricted function types?

1752114725
grayhatter!~grayhatte@user/grayhatter
I really like the `{f}` change

1752115004
LAC-Tech!~lewis@granite-phrase.bnr.la
I'm most looking forward to the fast debug builds.

1752115015
grayhatter!~grayhatte@user/grayhatter
andrewrk: any chance you'll publish a "dev-preview" tag so my friends buliding my zig projects will hate me a bit less when I start moving my apis over to the new api

1752115034
grayhatter!~grayhatte@user/grayhatter
start moving my repos*

1752115117
grayhatter!~grayhatte@user/grayhatter
rip automerge

1752115990
andrewrk!~andrewrk@mail.ziglang.org
not a chance

1752116010
andrewrk!~andrewrk@mail.ziglang.org
stick with a tagged release if you want stability

1752116013
grayhatter!~grayhatte@user/grayhatter
also rip friendships :D

1752116669
andrewrk!~andrewrk@mail.ziglang.org
rvrb: yes I think so

1752119938
blackbeard420!blackbeard@2600:3c03::f03c:91ff:fe92:3f2a
for std.os.linux.execve, whats the best way to go about passing a [_][]const u8 array to argv which expects a [*:null]const ?[*:0]const u8? in the C version i pass a `char *[] = {"arg1", "arg2", NULL}`

1752120820
blackbeard420!blackbeard@2600:3c03::f03c:91ff:fe92:3f2a
tried something like: `const args = [_][]const u8{"-p", "60", &[_] u8{0}};` with no luck yet

1752121995
grayhatter!~grayhatte@user/grayhatter
blackbeard420: deconstruct the array types, it'll be easier to make sure you're doing it correctly

1752122046
grayhatter!~grayhatte@user/grayhatter
`[*:0]const u8` is `[:0]const u8` without a length, (so anything with a length will also work)

1752122172
grayhatter!~grayhatte@user/grayhatter
as for the `[*:null] const` part, that's just another array, with the last item being a null, because null is meaningful in zig, you have to include the ? on the subtype, which is just `?[:0]const u8`

1752122265
grayhatter!~grayhatte@user/grayhatter
try `[_:null]const ?[*:0]const u8{"arg", null};`

1752122330
grayhatter!~grayhatte@user/grayhatter
I don't actually remember if that'll work as is, because I've forgotten the semantics around the sentinel for arrays

1752124402
torque!~tachyon@user/torque
I mean if you can use literals, the compiler can coerce: `const foo: [*:null] const ?[*:0]const u8 = &.{"arg1", "arg2", null};` should just workâ„¢

1752124485
torque!~tachyon@user/torque
if you actually have a prepackaged [_][]const u8 that you need to coerce into this form, you have to go through and duplicate each inner element to add the 0-sentinel

1752124636
torque!~tachyon@user/torque
actually looking at the assembly, it will put the null sentinel in for you automagically so you can just do `const foo: [*:null]const ?[*:0]const u8 = &.{"arg1", "arg2"};` apparently

1752142740
netvor_!~netvor@2a00:ca8:a1f:cd0:83aa:e03e:8213:76ab
is there something in std that, given a struct type, would help me create a tagged union which can hold a pointer to one of the fields?  in a similar spirit to std.meta.FieldEnum()

1752143090
netvor_!~netvor@2a00:ca8:a1f:cd0:83aa:e03e:8213:76ab
i mean, i can do it by hand;  at this point i just need to figure out how to make it a *tagged* union  https://bpa.st/MLMQ

1752143242
ifreund!2940d10f8b@user/ifreund
netvor_: set tag_type

1752143275
netvor_!~netvor@2a00:ca8:a1f:cd0:83aa:e03e:8213:76ab
thanks!

1752149729
blackbeard420!blackbeard@2600:3c03::f03c:91ff:fe92:3f2a
grayhatter torque : much appreciated! was able to use `const foo: [*:null]const ?[*:0]const u8 = &.{arg1, arg2};` and its working good

1752149749
bblack!~bblack@wikimedia/bblack-WMF
blackbeard420: FWIW, what I did in one place where I already had separate args like your situation, ended up looking like this: posix.execveZ(helper_path, &[_:null]?[*:0]const u8{ helper_path, dbg, lm, rfp, wtp, null }, std.c.environ)

1752149918
bblack!~bblack@wikimedia/bblack-WMF
in another related case, I had to deal with a more-general problem, where I had as input (from elsewhere in my program) a set of arguments that could be of varying length, that start out stored in a more-Zig-native-ish type of: 

1752149927
bblack!~bblack@wikimedia/bblack-WMF
args: [][:0]const u8 = &.{}, // This is basically execve() args, but in slice form

1752150045
bblack!~bblack@wikimedia/bblack-WMF
and then I had a conversion function that took an allocator and converted such a thing to the form execve wants: https://zigbin.io/a2b493

1752150078
bblack!~bblack@wikimedia/bblack-WMF
only one allocation there since the original used :0, you'd have to do more if it didn't and/or you didn't want to alias the original per-arg storage.

1752150245
blackbeard420!blackbeard@2600:3c03::f03c:91ff:fe92:3f2a
interesting thanks! yeah in this case i know the number of args im passing so no allocation needed but ill keep that in mind for the future

1752185055
triallax!~triallax@lacerte/triallax
trivial question, but how do people mark out sections of their code with comments?

1752185092
palanix!~palanix@2a02:3100:5834:a000:aa7e:c2da:d749:eb0b
Usually a plugin for your editor or you use multiline editing

1752185117
triallax!~triallax@lacerte/triallax
i more meant what comment format you use

1752185129
triallax!~triallax@lacerte/triallax
plugin integration is not required

1752185256
grayhatter!~grayhatte@user/grayhatter
triallax: I don't understand the question

1752185277
triallax!~triallax@lacerte/triallax
you have two sections of a method, and you want to visually separate them using a comment, what style do you use

1752185278
grayhatter!~grayhatte@user/grayhatter
/ is the only comment

1752185282
grayhatter!~grayhatte@user/grayhatter
//

1752185291
triallax!~triallax@lacerte/triallax
i know the comment syntax

1752185308
triallax!~triallax@lacerte/triallax
i mean like

1752185325
triallax!~triallax@lacerte/triallax
...

1752185333
triallax!~triallax@lacerte/triallax
/ ------------ SECTION 2 -------------

1752185335
triallax!~triallax@lacerte/triallax
...

1752185337
triallax!~triallax@lacerte/triallax
but better

1752185345
triallax!~triallax@lacerte/triallax
well i guess that's not super bad tbh

1752185378
grayhatter!~grayhatte@user/grayhatter
I don't do anything like that

1752185396
triallax!~triallax@lacerte/triallax
fair enough

1752185435
grayhatter!~grayhatte@user/grayhatter
huge blocks of comments like that is often a sign of low quality code

1752185527
grayhatter!~grayhatte@user/grayhatter
Ideally the code will speak for itself, if you find you need code needs a lot of vertical space, why not create a 2nd file?

1752185554
triallax!~triallax@lacerte/triallax
this is a big enum, i don't want to nor need to split it over 2 files

1752185556
triallax!~triallax@lacerte/triallax
so not actual code per se

1752185559
grayhatter!~grayhatte@user/grayhatter
if you find your code needs*

1752185621
grayhatter!~grayhatte@user/grayhatter
why do you have 1 enum with multiple sections, instead of > 1 enum?

1752185644
triallax!~triallax@lacerte/triallax
it's a vm opcode enum, it doesn't make sense to split it

1752185974
grayhatter!~grayhatte@user/grayhatter
I don't know enough about the enum, but I wouldn't add comments in an attempt to fix something that's currently unweildly, I'd fix it so I wouldn't want to add comments... if it's just a huge list of opcodes, I'd hope I wouldn't need to commonly read through the whole thing that adding big comments does anything

1752186071
grayhatter!~grayhatte@user/grayhatter
but thinking about it, I'm not sure if that's advice you'd wanna take... I interact with code very differently from a lot of people (dysleixic-ish), so maybe it's advice to avoid and someone else has something more useful

1752187091
andrewrk!~andrewrk@mail.ziglang.org
triallax: I don't do that anymore, I use namespaces instead to separate concepts

1752187117
andrewrk!~andrewrk@mail.ziglang.org
big enum eh? is that the opcodes for your VM?

1752187121
triallax!~triallax@lacerte/triallax
yes

1752187134
triallax!~triallax@lacerte/triallax
i'm figuring maybe explicit sections aren't really important

1752187141
triallax!~triallax@lacerte/triallax
just add whitespace between groups of similar opcodes

1752187167
andrewrk!~andrewrk@mail.ziglang.org
idk how many you have but we use all 256 tags of the u8 in ZIR and don't do any of those section things: https://github.com/ziglang/zig/blob/0.14.1/lib/std/zig/Zir.zig#L159

1752187191
triallax!~triallax@lacerte/triallax
honestly not that bad

1752187204
triallax!~triallax@lacerte/triallax
i don't have that many, maybe ~80

1752187258
triallax!~triallax@lacerte/triallax
actually maybe i should see what the zig compiler does to run comptime stuff

1752187268
andrewrk!~andrewrk@mail.ziglang.org
looks like your llvm report got confirmed, that's nice

1752187269
triallax!~triallax@lacerte/triallax
could find some interesting ideas i could borrow

1752187278
triallax!~triallax@lacerte/triallax
yea

1752187964
andrewrk!~andrewrk@mail.ziglang.org
how does git not have a command that stages all unstaged files that don't have merge markers in them

1752187983
triallax!~triallax@lacerte/triallax
now that you mention it

1752187996
triallax!~triallax@lacerte/triallax
thankfully that's probably pretty easy to script

1752190094
grayhatter!~grayhatte@user/grayhatter
andrewrk: git diff --check?

1752190436
grayhatter!~grayhatte@user/grayhatter
nevermind, I assumed inversing this would be easier than it appears to be

1752191358
ezzieyguywuf!~Unknown@user/ezzieyguywuf
just watched a keynote jonathan blow did about jai. the language seems similarish to zig. does anyone know if one was inspired by the other? or did they just organically develop with similarish things?

1752191613
andrewrk!~andrewrk@mail.ziglang.org
what makes it seem similar to zig?

