1761620080
JetpackJackson!739e7f3d14@user/JetpackJackson
I'm late to the party and I haven't watched the full video yet, but nice hair andrewrk 

1761620385
andrewrk!~andrewrk@mail.ziglang.org
thank you. it's already back to normal now

1761624787
mattnite!~mattnite@172.103.236.154
sad

1761654427
mimivals1!~mimivalsi@user/MimiValsi
Does any1 know a resource that explains the buffer from std.Io.Reader and Writer? I can't still graps why when using std.net.Stream and need to read the stream, I call the `reader` method with a buffer and it returns me std.Io.Reader. Inside that reader I need to pass a second buffer to fill the incoming info. Why? The seconde buffer I understand, it's straighforward. It's used to fill the incoming

1761654429
mimivals1!~mimivalsi@user/MimiValsi
stream but the first buffer I don't understand.

1761657430
tavish!~tavish@2405:6580:b320:1400:c6bc:d332:1ec2:db4d
quick question, should I expect zls to autocomplete cImports?

1761658288
andrewrk!~andrewrk@mail.ziglang.org
tavish: I don't think any ZLS devs hang out here

1761658369
andrewrk!~andrewrk@mail.ziglang.org
I can tell you however, after the https://github.com/ziglang/zig/issues/20630 migration is complete, there will be no meaningful difference between translated C source files and other zig source files, so I would expect it to behave the same for both

1761659000
tavish!~tavish@2405:6580:b320:1400:c6bc:d332:1ec2:db4d
andrewrk: thanks for the reply and your work on zig! first day of learning zig, so it's not at all a big deal for me. Figuring out how to use miniaudio from zig right now.

1761659236
andrewrk!~andrewrk@mail.ziglang.org
cool

1761659294
andrewrk!~andrewrk@mail.ziglang.org
here's an example of using ffmpeg and pulseaudio: https://codeberg.org/andrewrk/groovebasin/src/branch/main/player/root.zig

1761660251
tlewin!~tlewin@user/tlewin
Hi, I'm writing a backgammon engine in Zig. genMoves generates all possible moves, but I also need to check move validity and if any valid moves exist. If I pass a callback to genMoves as comptime, will the compiler specialize it or add runtime overhead?

1761660469
ifreund!2940d10f8b@user/ifreund
grayhatter: glad zig-wayland's been useful to you, out of curiosity what are you using it for?

1761660574
andrewrk!~andrewrk@mail.ziglang.org
tlewin: it specializes

1761660680
tlewin!~tlewin@user/tlewin
andrewrk Thank you very much! I tried to create some toy examples to check the asm, but I suck at it

1761662051
andrewrk!~andrewrk@mail.ziglang.org
tlewin: happy hacking

1761662125
tlewin!~tlewin@user/tlewin
andrewrk Thanks! My experience with Zig has been fantastic so far! I just ported 10k lines from Rust to Zig and I am really having a good time

1761662317
ifreund!2940d10f8b@user/ifreund
:)

1761670534
tavish!~tavish@2405:6580:b320:1400:c6bc:d332:1ec2:db4d
got a sine wave playing using zig! that was way easier than I though.. I came to zig because I couldn't get dlang working with it for some reason (also had just began using it)

1761672498
andrewrk!~andrewrk@mail.ziglang.org
tavish: nice, what audio API did you use?

1761674044
tavish!~tavish@2405:6580:b320:1400:c6bc:d332:1ec2:db4d
andrewrk: I'm using miniaudio, seems like at least pulseaudio works, possibly jack ("pw-jacl bin") might be working too, but not sure/

1761680760
grayhatter!~grayhatte@user/grayhatter
ifreund: I'm using it in charcoal https://srctree.gr.ht/repo/charcoal . It's just a dead simple drawing toolkit that I made because I wanted something easier for zmenu (dmenu/wofi replacement), and now for zigamp (a winamp spiritual clone)

1761680834
grayhatter!~grayhatte@user/grayhatter
I say spiritual because it's just a frontend, currently mpd, later (hopefully) groovebasin

1761681439
grayhatter!~grayhatte@user/grayhatter
video is probably a better example/description https://gr.ht/v/zigamp.mp4

1761682908
grayhatter!~grayhatte@user/grayhatter
can there *please* be a consistant formatting rule/requirment for the location of feilds vs decls in containers in 0.16?

1761683002
grayhatter!~grayhatte@user/grayhatter
I care less about *what* exactly that rule is (although I have opinions, obviously :P ) just that it exists so I can mentally scan/seek for it instead of having to skim the whole file?

1761683620
bblack!~bblack@wikimedia/bblack-WMF
I guess I never looked up what the official rule is, but what has seemed to be true is that all the fields have to be in one uninterrupted block.  there can be decls before or after them, but not in the middle of them.

1761683649
bblack!~bblack@wikimedia/bblack-WMF
it seems like a reasonable-yet-flexible approach.  If it had to be stricter than that, I'd go with "they all have to be at the top before any decls"

1761683678
bblack!~bblack@wikimedia/bblack-WMF
(but I bet someone else would make the opposite argument, these things get fiesty!)

1761683725
grayhatter!~grayhatte@user/grayhatter
the new std.Io branch has them on line 576 inbetween pub structs (on both sides) below private imports, and pub imports

1761683803
grayhatter!~grayhatte@user/grayhatter
I admit, this is a bad example, but it's the example that was annoying because I skimmed for it, couldn't find it where I'd assumed, so started looking for pub const Io = struct{} or something like that, and the catalyst for the request

1761683816
bblack!~bblack@wikimedia/bblack-WMF
I heard it was fashionable a while back to put boilerplate std imports at bottom of a file?

1761683875
bblack!~bblack@wikimedia/bblack-WMF
but I could see pub imports of related files or module bits at the top for clarity.  they probably have more meaning to a consumer of the file than the fields.

1761684551
grayhatter!~grayhatte@user/grayhatter
the rule I'd adopted that I feel stack ranks what I'm searching for first, is 1) pub imports from "child" directories and files, 2) "boilerplate" sections that are important content [e.g. `const Io = @This();`] 3) stuct fields 4) everything else 5) imports that are non-pub

1761684604
grayhatter!~grayhatte@user/grayhatter
I haven't decided if `pub structs` or `pub fn(@This(), [...])` go above the other

1761684673
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: if you're talking about Io.zig that's to avoid git conflicts with master branch

1761684718
andrewrk!~andrewrk@mail.ziglang.org
this branch survived writergate with minimal conflicts in Io.zig

1761684768
grayhatter!~grayhatte@user/grayhatter
andrewrk: I assumed it was a bad example, I knew there was a reason. But even if there wasn't, it's still in an expermental branch, so shouldn't be subject to exptations for quality

1761684790
grayhatter!~grayhatte@user/grayhatter
"quality" is the wrong word here, but I don't know the better one

1761684910
grayhatter!~grayhatte@user/grayhatter
does git rerere not work as well as the current method of just "not moving literally every line around making everyone life harder?"

1761684920
grayhatter!~grayhatte@user/grayhatter
(only the first half was a real question)

1761684947
andrewrk!~andrewrk@mail.ziglang.org
idk but I'm frying much bigger fish rn

1761685035
grayhatter!~grayhatte@user/grayhatter
it's not important, was just a sidebar curiosity; good luck and thanks for all the fish :D

1761685240
andrewrk!~andrewrk@mail.ziglang.org
:)

1761687813
ifreund!2940d10f8b@user/ifreund
grayhatter: neat :)

