1758332500
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
finally had the time to get libvaxis updated for 0.15.1 ðŸ’ª

1758341865
torque!~tachyon@user/torque
nice

1758346754
andrewrk!~andrewrk@mail.ziglang.org
nice

1758346780
andrewrk!~andrewrk@mail.ziglang.org
there's a good reward coming for keeping up to date, I promise

1758350479
deevus!~deevus@7wdf1tt0vhfbrrrfm74p.ip6.superloop.au
Iâ€™m still working on getting gdzig upgraded to 0.15.1. 

1758372724
rhizoome!ganwell@user/rhizoome
maybe on this PR I only need a little hint to be able to complete it or it might already be ok: https://github.com/ziglang/zig/pull/25095#issuecomment-3258829793

1758379553
ezzieyguywuf!~Unknown@user/ezzieyguywuf
.:17:14:54:. < grayhatter> I don't think you need to import C for this, I'd try to see if you could make it exclusively zig <- I'mm 100% down for this, I'll let you know how it goes

1758379881
ezzieyguywuf!~Unknown@user/ezzieyguywuf
lol it was easier than I thought https://github.com/ezzieyguywuf/zig-ethernet/commit/577c704243b2c1cab00ad49a01ecbe03a6f90281

1758388627
longlonglongint!~longlongl@user/longlonglongint
how do i handle MAP_FAILED with translate-c

1758388649
longlonglongint!~longlongl@user/longlonglongint
it says "type 'usize' cannot represent integer value '-1'"

1758388651
longlonglongint!~longlongl@user/longlonglongint
it says type 'usize' cannot represent integer value '-1'

1758388662
longlonglongint!~longlongl@user/longlonglongint
it sent twice for some reason

1758389074
torque!~tachyon@user/torque
sounds like more bad typing issues

1758389128
torque!~tachyon@user/torque
but I don't know what MAP_FAILED is so I can't really help more

1758389193
andrewrk!~andrewrk@mail.ziglang.org
longlonglongint: -1 isize bitcasted to usize is std.math.maxInt(usize)

1758389931
longlonglongint!~longlongl@user/longlonglongint
its happening with translate-c (@cInclude specifically)

1758389965
longlonglongint!~longlongl@user/longlonglongint
if (u8ptr == MAP_FAILED)

1758389992
longlonglongint!~longlongl@user/longlonglongint
for some reason MAP_FAILED is defined as ((void *)-1)

1758390446
grayhatter!~grayhatte@user/grayhatter
ezzieyguywuf: don't forget the build.zig

1758396751
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: The reward is that other people using up-to-date Zig compilers can use your library.

1758397196
longlonglongint!~longlongl@user/longlonglongint
getting access to the new async stuff is pretty nice though

1758398170
longlonglongint!~longlongl@user/longlonglongint
apparently the issue im having is already on github https://github.com/ziglang/zig/issues/18543

1758404231
lemons!~doggie@user/doggie-:49517
ech.. i dont like the recent arraylist change, seems like a downgrade in dx

1758404399
andrewrk!~andrewrk@mail.ziglang.org
lemons: which change are you referring to?

1758404427
andrewrk!~andrewrk@mail.ziglang.org
making the default one the one without Allocator field?

1758404467
lemons!~doggie@user/doggie-:49517
yeah, but arent the managed versions being deprecated completely and not just de-defaulted?

1758404522
lemons!~doggie@user/doggie-:49517
yeah ok they indeed are

1758404635
lemons!~doggie@user/doggie-:49517
well, any case point is i dont like them

1758404899
andrewrk!~andrewrk@mail.ziglang.org
have you tried the "reserve first" pattern? https://matklad.github.io/2025/08/16/reserve-first.html

1758404907
andrewrk!~andrewrk@mail.ziglang.org
you might like it

1758405356
lemons!~doggie@user/doggie-:49517
the two main reasons being (besides your routine "ugh i dont want to pass alloc every time"), being 1. unmanaged deinit() takes a pointer so my previous pattern of const list = funcThatReturnList(); defer list.deinit() no longer works

1758405430
lemons!~doggie@user/doggie-:49517
and the other being that i fear passing alloc every time eventually desensitizes the programmer to it, as been so far (that ive noticed/remember at least) any time something took an alloc field it simutaneously implied "hey, defer cleanup for this"

1758405433
andrewrk!~andrewrk@mail.ziglang.org
ah, for that pattern, I recommend passing a mutable array list as a parameter and strictly appending to it, rather than returning an array list as the return value

1758405474
andrewrk!~andrewrk@mail.ziglang.org
in general I've found it to be more helpful for the caller to own the array list. they may want to store multiple results in the same list and track indexes

1758405509
lemons!~doggie@user/doggie-:49517
hm.. i'll try that, thanks

1758405520
andrewrk!~andrewrk@mail.ziglang.org
so, I hate to say it, but that friction you feel is guiding you towards a different style of programming. one might say, reducing the number of ways of doing things closer to 1

1758405632
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm not seeing how that's leading you to pass in the arraylist. You're going to have to pass in the allocator (or assume in the function which one to use) to append anyway, so you could just skip the pass arraylist step and create the arraylist in the function as before

1758405686
lemons!~doggie@user/doggie-:49517
Gliptic: i was gonna say it works for me but i did just realize i'm actually juggling two allocators here, so that alloc field would still be needed here

1758405705
andrewrk!~andrewrk@mail.ziglang.org
Gliptic: the part about appending, not clearing

1758405765
Gliptic!~glip@2a01:4f8:c012:91f3::1
clearing? I didn't mention clearing

1758405791
andrewrk!~andrewrk@mail.ziglang.org
I mentioned appending, which is something you can do when you pass a mutable array list

1758405809
Gliptic!~glip@2a01:4f8:c012:91f3::1
but only if you know the allocator

1758405811
andrewrk!~andrewrk@mail.ziglang.org
oh also remembered another benefit. it lets the caller reuse an array list on subsequent calls, avoiding allocations

1758405826
Gliptic!~glip@2a01:4f8:c012:91f3::1
and you can also create a new array list and return it if you have the allocator

1758405890
Gliptic!~glip@2a01:4f8:c012:91f3::1
(not arguing against passing in the array list, just that it's not any easier than returning a new arraylist)

1758405922
lemons!~doggie@user/doggie-:49517
to me so far the idea of passing a list in does sound like an improvement, but only the managed version. dedicating two separate variables of a function feels excessive

1758405922
andrewrk!~andrewrk@mail.ziglang.org
I'm not making an ergonomics argument, but rather an argument that it is more flexible for the caller

1758405940
Gliptic!~glip@2a01:4f8:c012:91f3::1
sure

1758405963
lemons!~doggie@user/doggie-:49517
do mind im already the type of person to overengineer functions so it does somewhat matter to me that i now have 5-arg functions

