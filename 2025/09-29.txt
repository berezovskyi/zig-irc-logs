1759115485
longlonglongint!~longlongl@user/longlonglongint
i found an occurance of an inline function not doing anything under -Doptimize=ReleaseFast

1759115502
longlonglongint!~longlongl@user/longlonglongint
i fixed it by just making it not inline since i made it inline on accident to begin with though

1759115515
longlonglongint!~longlongl@user/longlonglongint
is this fair game for the compiler or is it a bug

1759115559
longlonglongint!~longlongl@user/longlonglongint
for reference the function calls another function which scrambles a byte for each byte in a slice

1759116711
clevor!sid649024@id-649024.hampstead.irccloud.com
Was the output different when you removed `inline`?

1759116733
clevor!sid649024@id-649024.hampstead.irccloud.com
wait

1759116761
clevor!sid649024@id-649024.hampstead.irccloud.com
longlonglongint: Could this be caused by having IB in the code?

1759116953
longlonglongint!~longlongl@user/longlonglongint
what does IB stand for

1759116956
longlonglongint!~longlongl@user/longlonglongint
implicit behavior

1759116987
longlonglongint!~longlongl@user/longlonglongint
the output was different when i removed inline though

1759117031
longlonglongint!~longlongl@user/longlonglongint
i have buf: [32]u8 = @splat('a')

1759117087
longlonglongint!~longlongl@user/longlonglongint
and then in an infinite loop i have state.scramble(nonce (undefined), &buf) and then writer.write(&buf)

1759117192
longlonglongint!~longlongl@user/longlonglongint
when compiled with -Doptimize=ReleaseFast it prints a bunch of 'a's when the function is inline and seemingly properly scrambled bytes when its not inline

1759117210
longlonglongint!~longlongl@user/longlonglongint
when its just the default debug build it works with and without inline

1759117299
clevor!sid649024@id-649024.hampstead.irccloud.com
Illegal behavior

1759117370
longlonglongint!~longlongl@user/longlonglongint
i dont *think* theres any illegal behavior but i could be wrong

1759117389
longlonglongint!~longlongl@user/longlonglongint
is using a variable initialized with undefined illegal behavior

1759117412
clevor!sid649024@id-649024.hampstead.irccloud.com
I think so

1759117449
clevor!sid649024@id-649024.hampstead.irccloud.com
May I please see the code? I'll look at it tomorrow morning.

1759117487
longlonglongint!~longlongl@user/longlonglongint
should i upload it to github or something or is there a file sharing website typically used on here

1759118288
longlonglongint!~longlongl@user/longlonglongint
https://github.com/DiarrheaMcgee/buggedcode

1759128446
mimivals1!~mimivalsi@user/MimiValsi
just for clarification, to communicate with Unix socket, e.g. postgresql (.s.PGSQL.5432), do I use std.net.connectUnixSocket() or std.os.linux / std.posix()?

1759132988
Affliction!affliction@idlerpg/player/affliction
mimivals1: std.os.linux exposes the syscalls, std.posix exposes the posix C API and requires libc, std.net.connectUnixSocket exposes a higher level API, which I'd favor if it does what I need.

1759133541
mimivals1!~mimivalsi@user/MimiValsi
hmm, seems logic. thx

1759158201
ezzieyguywuf!~Unknown@user/ezzieyguywuf
is there a stable way to have my CI get/download the latest nigthly build of zig

1759158514
hadronized!~hadronize@2001:41d0:a:fe76::1
it probably depends no the CI provider you use

1759158566
hadronized!~hadronize@2001:41d0:a:fe76::1
you can probably download the binaries directly from the official sources

1759158576
hadronized!~hadronize@2001:41d0:a:fe76::1
if it’s not already provided by your CI

1759158663
Gliptic!~glip@2a01:4f8:c012:91f3::1
e.g. there is this https://github.com/mlugg/setup-zig

1759158684
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't expect it's a lot of code

1759159037
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I tried setu-zig, it failed lol. I was just curious if there's a url that always points to the latest nigthly build, I can just curl it myself

1759159118
ezzieyguywuf!~Unknown@user/ezzieyguywuf
this is the failure https://github.com/ezzieyguywuf/zcad/actions/runs/18101323115/job/51504760145#step:7:2 e.g. it tried to pull a URL that no longer exists it seems

1759159140
ezzieyguywuf!~Unknown@user/ezzieyguywuf
(although 503 means maybe smthn wrong server-side?!)

1759159268
Gliptic!~glip@2a01:4f8:c012:91f3::1
https://ziglang.org/builds/ doesn't do directory listing any more

1759159281
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh, so that explains the 503

1759159321
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh no the 503 was from this mirror Attempting mirror: https://zig.nekos.space/zig

1759159361
Gliptic!~glip@2a01:4f8:c012:91f3::1
503 is a server side error

1759159369
Gliptic!~glip@2a01:4f8:c012:91f3::1
https://ziglang.org/builds/ is 403

1759159377
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yea

1759159573
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hm I think from https://github.com/ziglang/www.ziglang.org/blob/main/assets/download/index.json I should be able to find a /master endpoint somewhere

1759159672
Gliptic!~glip@2a01:4f8:c012:91f3::1
`master` there is 15.1, not actually master?

1759159719
Gliptic!~glip@2a01:4f8:c012:91f3::1
so that's not what's used on the /download/ page afaict?

1759160324
ezzieyguywuf!~Unknown@user/ezzieyguywuf
rats

1759160331
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yea I think you're right

1759160659
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ok, I bet I want master-ci from setup-zig, which (i think) does what I was just about to do, which is pull from the latest green ci run on github.com/ziglang/zig

1759160755
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yarg https://github.com/ezzieyguywuf/zcad/actions/runs/18102692370/job/51509453403

1759162390
ezzieyguywuf!~Unknown@user/ezzieyguywuf
checking live I think master is what I want https://ziglang.org/download/index.json

1759162423
Gliptic!~glip@2a01:4f8:c012:91f3::1
I guess there's some step in the site deploy that overwrites it

1759162713
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yea, I can't be arsed to find where in the ziglang.org repo, but this flow should work for me. I'll be sure to try mirrors first per https://ziglang.org/download/community-mirrors/

1759163116
bblack!~bblack@wikimedia/bblack-WMF
Affliction: std.posix doesn't require libc.  basically it uses "std.posix.system" as the system layer, and if you happen to be linking libc, that will alias "std.c" (but if you're not linking libc, it could be std.os.linux directly)

1759163195
bblack!~bblack@wikimedia/bblack-WMF
https://github.com/ziglang/zig/blob/master/lib/std/posix.zig#L33

1759166848
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: is zig-wayland intended to track zig nightly or just the latest release?

1759166889
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah nvm https://codeberg.org/ifreund/zig-wayland/pulls/95

1759170592
qwerasd!~Qwerasd@user/qwerasd
Is this a miscompilation, or expected behavior that's just REALLY unintuitive? https://gist.github.com/qwerasd205/3c7a121f47fec4e81f38da9c64b2f9fd

1759171233
mimivals1!~mimivalsi@user/MimiValsi
you can always use -| saturating Subtraction notation :P

1759171273
mimivals1!~mimivalsi@user/MimiValsi
Well, I mean you're trying to subtract 0 from a u8

1759171421
mimivals1!~mimivalsi@user/MimiValsi
qwerasd: if you try the -| and for the 2nd wtf() test, everything pass :o

1759171586
mimivals1!~mimivalsi@user/MimiValsi
Does anyone ever worked with "Stream" from std.net.connectUnixSocket? I can't grasp, why isn't an "interface" in Reader struct just like Writer... Tried different methods and old got garbage return. I may be doing somethin wrong though...

1759171592
mimivals1!~mimivalsi@user/MimiValsi
https://gist.github.com/MimiValsi/b53904b2c71f53d0f8634408f6ac1d32

1759171653
qwerasd!~Qwerasd@user/qwerasd
I got an answer on the Discord-- it's because both sides of the subtraction are comptime known, so even if that branch won't be taken the value inside of it will be computed which results in the underflow.

1759171655
mimivals1!~mimivalsi@user/MimiValsi
I have no idea if the socket even receives something from me. I saw that I can use wireshark to check and I still don't know how to use it properly ^^

1759171705
mimivals1!~mimivalsi@user/MimiValsi
qwerasd: yes, when using "inline" before a function or a loop, it will be valuated on compile-time

1759171716
mimivals1!~mimivalsi@user/MimiValsi
evaluated*

1759171818
mimivals1!~mimivalsi@user/MimiValsi
nvm, wireshark does not allow sniff unix sockets. shame

1759174652
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I've been toying with the idea of doing a zig kernel/os just for fun/science. but then I think it may be _actually_ helpful to try making a link distro with a zig package manager - kind of like gentoo where everything is build from source, but meticulously migrating any packages build system to build.zig so that the package manager can just be zig

1759175277
clevor!sid649024@id-649024.hampstead.irccloud.com
longlonglongint: idk

1759176078
longlonglongint!~longlongl@user/longlonglongint
lol its fine

1759180975
squeek502_!~squeek502@user/squeek502
longlonglongint, yes, using a variable that's undefined is illegal behavior: https://ziglang.org/documentation/master/#undefined

1759180981
squeek502_!~squeek502@user/squeek502
> Translated into English, undefined means "Not a meaningful value. Using this value would be a bug. The value will be unused, or overwritten before being used."

1759181273
longlonglongint!~longlongl@user/longlonglongint
i was unaware the compiler was allowed to omit code using it

1759181365
longlonglongint!~longlongl@user/longlonglongint
as far as undefined goes im pretty sure i know what it is but in that particular scenario it was fine

1759181404
longlonglongint!~longlongl@user/longlonglongint
i was just initializing a nonce with undefined for a test to make sure my RNG was actually doing something

1759183136
squeek502_!~squeek502@user/squeek502
longlonglongint, i'd say that `undefined` is the wrong tool for the job if your intention is really 'i don't care what this value happens to be'

1759183155
squeek502_!~squeek502@user/squeek502
if you're going to use it, you must initialize it

1759183703
clevor!sid649024@id-649024.hampstead.irccloud.com
Speaking of undefined, is this valid despite being true for every possible value? `var a: u8 = undefined; _ = &a; std.debug.assert(a == a);`

1759183788
clevor!sid649024@id-649024.hampstead.irccloud.com
s/valid/IB/

1759184048
longlonglongint!~longlongl@user/longlonglongint
seems like that would work 100% of the time for non floating point values

1759184060
longlonglongint!~longlongl@user/longlonglongint
but i could be wrong

1759185267
rvrb!~rvrb@156.146.51.229
this is how I think of it, and maybe I am wrong.. but at risk of stating an obvious tautology: undefined is undefined. by definition, doing anything with it is undefined behavior

1759185275
rvrb!~rvrb@156.146.51.229
your code would compile, and it would probably never fail, but it is still UB, because you are operating on an undefined value. the language makes absolutely no guarantee about what happens with it

1759185304
clevor!sid649024@id-649024.hampstead.irccloud.com
I know that it is IB, but I like to imagine it isn't.

1759185712
rvrb!~rvrb@156.146.51.229
well I'd say it's not IB but it is UB

1759186143
andrewrk!~andrewrk@mail.ziglang.org
clevor: that's a good question that is answered indirectly by https://ziglang.org/documentation/0.15.1/#undefined

1759186216
andrewrk!~andrewrk@mail.ziglang.org
to answer directly: the expression `a == a` where a is undefined, produces the value undefined

1759186223
clevor!sid649024@id-649024.hampstead.irccloud.com
Okay

1759186239
andrewrk!~andrewrk@mail.ziglang.org
as a reminder, if (undefined) is illegal, which makes assert() invoke illegal behavior

1759186305
clevor!sid649024@id-649024.hampstead.irccloud.com
👍

1759186478
rvrb!~rvrb@156.146.51.229
is there a difference between IB and UB, and if so what is it? I took IB as UB that is protected from occurring by the compiler yelling at you

1759186555
clevor!sid649024@id-649024.hampstead.irccloud.com
Also, are runtime stack traces in ReleaseSafe supposed to be equivalent to in Debug mode when hitting unreachable, for example?

1759186613
bblack!~bblack@wikimedia/bblack-WMF
IIRC UB is more of a C term, and Zig defines these things all as IB, it's just that some IB is safety-checked and some is not.

1759186672
rvrb!~rvrb@156.146.51.229
ok so I was reading IB as checked and UB as unchecked

1759186680
bblack!~bblack@wikimedia/bblack-WMF
I guess, looking at the docs, the ones that aren't safety-checked are "Unchecked Illegal Behavior"

1759186686
bblack!~bblack@wikimedia/bblack-WMF
UIB :)

1759186708
bblack!~bblack@wikimedia/bblack-WMF
but for me anyways, I read "UB" as Undefined Behavior from the C world.

1759186736
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/2402

1759186751
rvrb!~rvrb@156.146.51.229
I swear to god there's always an issue

1759186756
rvrb!~rvrb@156.146.51.229
incredible

1759189181
lemons!~doggie@user/doggie-:49517
how large is the stack, roughly?

1759189195
lemons!~doggie@user/doggie-:49517
can i get away with statically allocating a buffer of 73 u64s

1759189453
andrewrk!~andrewrk@mail.ziglang.org
when you are the application, you get to choose, with some caveats depending on target

1759189473
andrewrk!~andrewrk@mail.ziglang.org
when you are a library, you technically can still choose but your stack requirements are a liability as a dependency

1759189664
longlonglongint!~longlongl@user/longlonglongint
you probably can in your scenario though if its not an embedded program or anything

1759189682
longlonglongint!~longlongl@user/longlonglongint
but experience is the best teacher

1759189771
lemons!~doggie@user/doggie-:49517
longlonglongint: thankfully no, just a dll supplement

