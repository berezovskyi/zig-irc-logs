1741221734
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
just noticed.. 0.14... \o/  :smiling_face_with_tear:

1741223298
SultansOfCode!~SultansOf@user/SultansOfCode
How to expose files from resources folder to the src/main.zig file to use the @embedFile through the build.zig?

1741224550
grayhatter!~grayhatte@user/grayhatter
SultansOfCode: I'm not confident I understand what you're asking, but as a wild guess https://ziglang.org/documentation/master/std/#std.Build.Module.addAnonymousImport

1741225261
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
most of the help document out there for zig doesn't mention how to actually structure your project other than main.zig

1741225338
grayhatter!~grayhatte@user/grayhatter
stealth_: that's because the answer is however you'd like... did you have something specific in mind?

1741225389
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, i figure thats what SultansOfCode is asking, maybe they have file in resources folder and they want to embed/inclue/import it? 

1741225464
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
don’t fight the system on this one, just put it in src/

1741225474
SultansOfCode!~SultansOf@user/SultansOfCode
I want to embed it as an []u8. Isn't addAnonymousImport for @import?

1741225499
SultansOfCode!~SultansOf@user/SultansOfCode
rockorager: but it is a true type font

1741225534
grayhatter!~grayhatte@user/grayhatter
I have html files that I @embedFile in templates/ and the rest in src/

1741225580
grayhatter!~grayhatte@user/grayhatter
it isn't fighting the build system to tell the build system where the files are

1741225581
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
can you just do "@import("my_file")" ? what if that same name exists? 

1741225621
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/ghostty-org/ghostty/tree/main/src/font/res

1741225648
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I mean, you can have ttf under src/

1741225686
SultansOfCode!~SultansOf@user/SultansOfCode
Makes no sense to have it there, among the .zig files

1741225699
grayhatter!~grayhatte@user/grayhatter
well... ttf is a resource, not code source

1741225887
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o i c, you just `module = @import("directory/module.zig");`

1741225963
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i take it "src" works as current working directory. 

1741225989
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
src is just an arbitrary path where the entry point happens to be

1741226005
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
most people do src/main.zig but it could just be ./main.zig also

1741226047
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o i c, i saw some online project like that was confusing. 

1741226170
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am trying to include a C library, i am working with https://github.com/axboe/liburing 1. want to create a zig library, and 2. make it importable from python  

1741226194
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I already have a python project https://github.com/yostealth/liburing just want to try and convert it to using Zig. 

1741226491
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Its kind of like a test zig project. There is a function that doesn't work with cython it been a bug for many years now, i wonder if zig will fix/catch it and then to benchmark cython vs zig. If zig wins, i will move that and other projects over to zig, if it loses, you will probably never see me here again :P

1741226650
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
are tabs now prohibited in multi-line string literals?  i had some test data with tabs embedded, now i get `error: string literal contains invalid byte: '\t'`.   any ideas on how to work around it?  \t does not work (it's taken as 2 bytes).

1741226692
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
i can't see anything in release notes or new docs..

1741226943
grayhatter!~grayhatte@user/grayhatter
netvor: re-read the docs for multiline string literals again

1741226960
grayhatter!~grayhatte@user/grayhatter
\t never turned into a [tab] char, it was always backslash, letter_t

1741226965
grayhatter!~grayhatte@user/grayhatter
that's how they work

1741227027
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
yeah i know :)

1741227036
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
does not answer my question

1741227073
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
i might have something, though .. https://ziggit.dev/t/tabs-in-string-literals-how-to/8265/5A

1741227249
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
netvor, you are using sing ' you need to use "\t"

1741227268
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
single*

1741227376
grayhatter!~grayhatte@user/grayhatter
oh netvor sorry, I misunderstood

1741227378
grayhatter!~grayhatte@user/grayhatter
https://zig.godbolt.org/z/b4a5fYjbv

1741227380
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
well as mentioned here, escapes never worked in multi-line literals, (i wrote my q as if i thought they were :D)

1741227388
grayhatter!~grayhatte@user/grayhatter
thatsweird.mp4

1741227452
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/#Multiline-String-Literals doesn't mention tabs being illegal... feels like a bug netvor do you wanna open an issue

1741227501
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
i'll give it a try

1741227665
torque!~tachyon@user/torque
I think I may have seen an issue for this before

1741227727
torque!~tachyon@user/torque
https://github.com/ziglang/zig/pull/21459

1741227795
grayhatter!~grayhatte@user/grayhatter
https://github.com/ziglang/zig/issues/20900 links to https://github.com/ziglang/zig-spec/issues/38 

1741227809
grayhatter!~grayhatte@user/grayhatter
zig fmt may not mangle multi line string literals, and therefore the control character TAB are rejected by the grammar inside multi-line string literals.

1741227992
grayhatter!~grayhatte@user/grayhatter
the rational on this issue is too hard for my smol-brain tonight to understand

1741228118
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
i don't even grok the sentence :D

1741228132
torque!~tachyon@user/torque
I suspect the rationale is mainly Andrew's vendetta against tabs

1741228149
grayhatter!~grayhatte@user/grayhatter
netvor: \\ multi line\n\\string liter\n ++ "with \t" ++\n

1741228179
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
yeah i also hate tabs for indenting etc.  but this is string literal, it's literally "not code" :D

1741228181
grayhatter!~grayhatte@user/grayhatter
netvor: let me know if you need a realy multiline paste to make it work

1741228216
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
whats up with this rood.zig ? 

1741228217
grayhatter!~grayhatte@user/grayhatter
it's fucking stupid that you can have a \t in a string literal, but not a mulitline string literal 

1741228273
grayhatter!~grayhatte@user/grayhatter
I apprecate the meme at the end though... it's one of my favorites 

1741228344
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
unfortunataly any non-trivial syntax beats the point for me, since my code just has the tab in the middle... (intentionally, as part of test case) https://bpa.st/SZTA

1741228365
torque!~tachyon@user/torque
the compiler accepts other valid utf-8 whitespace in the string literal

1741228399
grayhatter!~grayhatte@user/grayhatter
yeah, I'm now considering the markdown test cases, I need to write... but have to uglyify them

1741228411
torque!~tachyon@user/torque
it doesn't really seem that there's any good reason to reject tabs specifically, though 

1741228426
grayhatter!~grayhatte@user/grayhatter
torque: yes there is... check the meme photo

1741228531
grayhatter!~grayhatte@user/grayhatter
it's collateral damage, tabs mostly exist in other languages, nearly every example is some other source code... and the point is to kill any lanugage that uses tabs

1741228545
grayhatter!~grayhatte@user/grayhatter
big lord farquaad energy 

1741228659
torque!~tachyon@user/torque
I guess ascii control codes are generally rejected

1741228849
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
ftr, i'm not opening the issue, if anyone wants to please go ahead (i guess it would make sense for \t specifically)

1741228901
torque!~tachyon@user/torque
It's not a bug, it's an intentional decision

1741228907
torque!~tachyon@user/torque
if anything it is a documentation issue

1741229029
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
nah it's fine, i mean if it was never meant to be allowed then there's no need to specifically mention it

1741229046
netvor!~netvor@2a00:ca8:a1f:cd0:126a:8799:2bce:b855
i'll just use @embedFile()

1741230687
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
easy way to convert 9 to 0.9 ? 

1741230795
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nm i am being dumb

1741231082
torque!~tachyon@user/torque
divide by 10

1741231093
torque!~tachyon@user/torque
multiply by 0.1

1741231278
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, i was overthinking it like there was some `@floatFromIntToDecimal()`, bah.. delusion ended after going can't i just `int*.1`

1741232295
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmmm.. its actually easy to get info from C to zig, was able to get to get basic define value. its so strict with the types! lol i love it. 

1741235291
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure why this is not working: https://bpa.st/WPZA `error: ld.lld: undefined symbol`

1741235514
grayhatter!~grayhatte@user/grayhatter
stealth_: your build.zig doesn't link liburing

1741235551
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, I am just running this: `zig run -I . src/main.zig -lc` what else do I have to do? 

1741235605
grayhatter!~grayhatte@user/grayhatter
stealth_: have you tried `zig run --help` to see if it doesn't have your answer?

1741235994
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, tried -dynamic -static linker, no luck 

1741236022
grayhatter!~grayhatte@user/grayhatter
try `zig run --help | grep Link`

1741236026
grayhatter!~grayhatte@user/grayhatter
notice the uppercase L

1741236174
debling!~debling@user/debling
hey stealth_, i tested here and it worked, with -I you told zig where to find the library, but you also need to tell the linker about it, i ran your code like this:  `zig run test.zig -lc $(pkg-config --cflags liburing) $(pkg-config --libs-only-l liburing)`

1741236267
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
debling, thanks, will try it out. i am new to this, normally as you can see ctypes does this for me, even with other wrappers, they build using setuptools. 

1741236329
debling!~debling@user/debling
nice, let me know if it works, the pkg-config will generate the flags for you as long as the liburing is installed in your system

1741236412
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
debling, o nice it does work. i just have to figure out what it is actually doing! for now i am using the system liburing to test out, later i might include my own since not everyone might have it installed. 

1741236443
debling!~debling@user/debling
if you plan on turning your code as project, with a build.zig file, Andrew Kelley has a example setting up SDL https://github.com/andrewrk/sdl-zig-demo/blob/master/build.zig#L16

1741236559
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
debling, sure, i will bookmark it go through it. I already have a project for Python https://github.com/yostealth/liburing if zig improves that project I might include build.zig as well, so it can be 2 in 1 project!

1741236995
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Zig doesn't really need liburing library since it already has io_uring in the std. But it gives a good playground to play with new features before adding those features to zigs io_uring library.

1741237176
debling!~debling@user/debling
oh I see, you have a specif version compiled in your system and want to use that, Zig follows the same cli as C compilers in this case, you can put -I<directory to find the header> -L<directory to find the compiled library> -l<name of the library without the prefix lib>

1741237254
debling!~debling@user/debling
if you evaluate the pkgs-config commands by themselfs, you will see that it produces flags like that, only difference is that its pointing to your system libraries, and the -L (uppercase one) is not needed since the system libraries are already in the path of the linker

1741237900
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
debling, it should compile to whatever version users has, but i am only use this way to test though, later i will include liburing since users system version might be outdated or removed by the package-manager. 

1741237989
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i was looking at andrews code, maybe i need to use the build.zig to link properly, i been running it without build.zig. 

1741238107
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there we go, if i just run `zig build run` it works, i just needed to add `exe.linkSystemLibrary("liburing"); exe.linkLibC();` into build.zig

1741244772
wooster0!~wooster0@user/wooster0
is there anything I can do when I'm apparently shadow banned from all ziglang repos on GitHub? can't star repos, post comments, react, etc. only on ziglang repos.

1741249414
viscous24!c57c638cd7@user/viscous24
whats reccomened way to sort array of strings:

1741249418
viscous24!c57c638cd7@user/viscous24
        std.mem.sort([]const u8, completions.items, {}, std.sort.asc(u8));

1741249425
viscous24!c57c638cd7@user/viscous24
does not seem to work

1741249763
GreaseMonkey!greaser@user/greasemonkey
for 0.14.0, shoutouts to using `.no_llvm = true` in addExecutable and running `zig build -fincremental --watch run`

1741251051
blurrycat!~blurrycat@user/blurrycat
viscous24: for strings I think you need to define your own sorting function, you can just use std.mem.order in the function to compare

1741251198
viscous24!c57c638cd7@user/viscous24
blurrycat: yes defining lessthan method and using that helped. simpler solution would be better :D

1741251200
viscous24!c57c638cd7@user/viscous24
    fn lessThan(_: void, lhs: []const u8, rhs: []const u8) bool {        return std.mem.order(u8, lhs, rhs) == .lt;    }

1741251224
viscous24!c57c638cd7@user/viscous24
strings in general are bit rough in Zig :) (especially when coming from Rust)

1741262486
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
hm, i switched briefly from zig 0.14 to 0.13 in my project to do some chores, but zig keeps fetching the wrong version of libvaxis 0.5.1 with the wrong url for the zg dependency

1741262632
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
oh, nvm, i have an old version of zf in my deps for some reason

1741278534
blurrycat!~blurrycat@user/blurrycat
Can we ignore fields when @import()-ing a .zon file?

1741278595
grayhatter!~grayhatte@user/grayhatter
viscous24: strings are actually really easy in zig if you stop thinking of them as strings, and think of them as bytes instead

1741278630
blurrycat!~blurrycat@user/blurrycat
Nevermind, https://github.com/ziglang/zig/pull/22907

1741278667
grayhatter!~grayhatte@user/grayhatter
the analogy would be something like, it's really hard to move grain around using this flat bed truck. Then I started putting the grain into boxes and palets, then it became easier. 

1741278737
grayhatter!~grayhatte@user/grayhatter
zig intentionally doesn't prescribe any specific string handling api, because there's different ways any software might want to interact with them, and it's a mistake to lead someone down the wrong path :)

1741278826
viscous24!c57c638cd7@user/viscous24
grayhatter: I agree, for any non trivial case, its better to handle them as bytes

1741279377
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is zig slow on runtime? I can run a python C function it takes 13ms same thing in zig takes 43ms. It seem like zig takes >40ms no matter if you run anything or not

1741279524
Gliptic!~glip@2a01:4f8:c012:91f3::1
13ms for a function that does nothing??

1741279583
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you are talking about python? it takes 11-12ms if i run nothing, but takes 13ms with a function, this is python.

1741279609
Gliptic!~glip@2a01:4f8:c012:91f3::1
it doesn't take 11ms to run an empty C function from python

1741279620
Gliptic!~glip@2a01:4f8:c012:91f3::1
are you talking about some other unit?

1741279621
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in zig it takes 44ms if i run main  with nothing in it. takes about same with c/print function.

1741279632
Gliptic!~glip@2a01:4f8:c012:91f3::1
oh wait, you mean running a _process_?

1741279670
Gliptic!~glip@2a01:4f8:c012:91f3::1
how is python involved here

1741279682
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in zig running ./myfile.so

1741279734
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its something i am comparing with since python does have a runtime expense, zig/other compiled language aren't suppose to have that since they are already compiled.

1741279884
Gliptic!~glip@2a01:4f8:c012:91f3::1
what do you mean ./myfile.so, .so is a shared object, not an executable

1741279959
torque!~tachyon@user/torque
if you're using `zig run`, that has a bunch of compiler overhead. build an executable and run that directly instead

1741279964
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you know the file that gets built in `zig-out/bin/myfile` and yes i have even tried the ReleaseFast as well

1741280032
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
just running from zig-out directly 

1741280110
torque!~tachyon@user/torque
how are you timing it?

1741280159
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
my editor has a timing and i also use time

1741280286
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://www.youtube.com/watch?v=3fWx5BOiUiY zig is overall good, but it might have bit of issue at start up and uses more memory 

1741280312
Gliptic!~glip@2a01:4f8:c012:91f3::1
it really doesn't

1741280344
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you can check out that video link

1741280363
torque!~tachyon@user/torque
more memory than what

1741280374
torque!~tachyon@user/torque
I shall not be watching some youtube video about this

1741280374
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
other language 

1741280421
torque!~tachyon@user/torque
"other language" is very vague but a "hello world" executable in zig will not use more memory than python unless you've done something very wrong

1741280441
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i just wanted to make a note of it, since zig is still under heavy development its totally understandable to wait until everything on the plate is done to do optimization 

1741280456
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no, i am not an idiot. 

1741280459
Gliptic!~glip@2a01:4f8:c012:91f3::1
but this thing is not a problem, you're doing something wrong

1741280478
Gliptic!~glip@2a01:4f8:c012:91f3::1
what exactly would it be doing at startup of an empty program

1741280480
torque!~tachyon@user/torque
I don't thinik I called you an idiot, but your numbers do not make sense based on the info you've presented

1741280482
Gliptic!~glip@2a01:4f8:c012:91f3::1
that differs from C

1741280508
Gliptic!~glip@2a01:4f8:c012:91f3::1
I built "pub fn main() void {}" and ran it, runtime is <1ms

1741280702
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://bpa.st/BTTQ

1741280811
Gliptic!~glip@2a01:4f8:c012:91f3::1
so it's not an empty program

1741280900
grayhatter!~grayhatte@user/grayhatter
stealth_: is your editor vscode?

1741280908
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, no, its sublimetext

1741280927
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
vscode is a spyware

1741280937
grayhatter!~grayhatte@user/grayhatter
sublime text, which heavily used python, is able to "test" python faster that it's able to test a non-python binary?

1741280977
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its has nothing to do with sublime or python.

1741281021
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am just showing you the timing result i noticed. 

1741281085
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you watch the video link above, you will noticed zig does have some issues that needs to be addressed, its something for devs to look into once the langue is feature rich. 

1741281100
grayhatter!~grayhatte@user/grayhatter
stealth_: well, I agree with Gliptic and torque, that some of the software you're using is introducing measurment error... So normally that's when you start removing as many systems from the test harness as possible. have you tried comparing your zig dynamically linked zig test program to python, using poop?

1741281112
torque!~tachyon@user/torque
compltely unrelated but this is a very nonsense way of computing a version number

1741281131
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: still <1ms on my machine

1741281133
torque!~tachyon@user/torque
you're not calling it at least

1741281185
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, if what you are saying is true then it means there is some kind of slow down with how zig includes C library

1741281197
grayhatter!~grayhatte@user/grayhatter
lol, torque I've seen worse ways of computing a version number

1741281197
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: no, I'm running your code

1741281212
Gliptic!~glip@2a01:4f8:c012:91f3::1
also, what, f16

1741281225
Gliptic!~glip@2a01:4f8:c012:91f3::1
this isn't ML

1741281255
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i been wrapping C libring to zig, so some of the code is from that, 

1741281262
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
library*

1741281348
torque!~tachyon@user/torque
i would strongly suggest trying to run this outside of sublime. how are you even running it in sublime? what is sublime doing to run it

1741281350
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Is there something like `b.supportsNativeBackend()` that I can use to return a bool for if the native backend is supported on the given target?

1741281403
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I basically want to have all my tests set to use the native backend when possible, but not create 3 lines of code if it already exists in std.Build

1741281475
torque!~tachyon@user/torque
afaik the compiler stdlib tests all just check the backend and return SkipZigTest if the test doesn't support that backend

1741281494
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
No I want my build script to set .use_llvm

1741281513
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
.use_llvm = !b.supportsNativeBackend(),

1741281519
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Something to that effect

1741281522
torque!~tachyon@user/torque
ah

1741281608
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I guess I can do .use_llvm = target.result.cpu.arch == .x86_64

1741281620
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
But then I'll have to change it the next time another backend is added

1741281637
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
s/==/!=

1741281643
torque!~tachyon@user/torque
well, the problem is there are a few backends in various states of usability

1741281652
torque!~tachyon@user/torque
so it's not quite as trivial as "does a backend exist for this arch"

1741281678
torque!~tachyon@user/torque
so you'd have to do something specific to your project anyway, for the time being

1741281729
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Hmm

1741281748
torque!~tachyon@user/torque
this would maybe make sense as a stdlib api if an appropriate heuristic for "usable" was decided on, (e.g. passing sufficient test coverage, but then list would still generally need to be manually maintained)

1741281753
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I am using ziglua as a dep, and each iteration of `zig build test` fetches the packages again

1741281791
torque!~tachyon@user/torque
I think someone noted this behavior when fetching packages that use old-style hashes? there may have been more

1741281840
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya so,... i think the slow down it from it running zig build run or something, there is overhead on the build. 

1741281864
torque!~tachyon@user/torque
<torque> if you're using `zig run`, that has a bunch of compiler overhead. build an executable and run that directly instead

1741281867
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, its `zig build run` overhead.

1741281872
torque!~tachyon@user/torque
zig build run is the same story

1741281884
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya you go it

1741281895
grayhatter!~grayhatte@user/grayhatter
> stealth_ | just running from zig-out directly 

1741281900
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
torque: not the hash, I just updated to the latest ziglua which has updated hashes for zig 0.14

1741281923
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i would run it twice! 1 for compile and another for just running the code.. so figure it wasn't doing the "build" but i guess it does some kind of file hash checking or something? 

1741281924
grayhatter!~grayhatte@user/grayhatter
stealth_: so, you weren't running it from zig-out directly? Then what did this mean?

1741281959
torque!~tachyon@user/torque
hmm, it doesn't have transitive dependencies that have old style hashes?

1741281978
torque!~tachyon@user/torque
I didn't notice this problem while updating stuff last night. maybe try clearing your global cache if you haven't?

1741282001
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how do you do that?

1741282030
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
torque: oh but it is fetching lua tarballs

1741282034
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Which don't have a hash

1741282040
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
well, a build.zig.zon hash

1741282057
torque!~tachyon@user/torque
they should have a hash in build.zig.zon, yeah

1741282093
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yeah you can replicate directly in the ziglua repo

1741282102
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Just running zig build test fetches the tarballs each time

1741282139
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/natecraddock/ziglua/blob/main/build.zig.zon

1741282139
torque!~tachyon@user/torque
yeah those can be updated to the new hash style

1741282143
torque!~tachyon@user/torque
not sure why they weren't

1741282152
torque!~tachyon@user/torque
I guess an oversight in the upgrade

1741282155
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
How do you do that?

1741282166
torque!~tachyon@user/torque
comment out the hash lines and run `zig build`

1741282175
torque!~tachyon@user/torque
probably zig fetch --save or whatever would work too

1741282183
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
ah

1741282206
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://bpa.st/ALXA

1741282217
dumbmf!~dumbmf@syn-104-034-072-172.res.spectrum.com
Hey, I don't know if this is the right place to ask, but does anyone have a working link to the Zig Discord? https://discord.com/invite/zig doesn't seem to work for me

1741282279
torque!~tachyon@user/torque
<stealth_> how do you do that? <-- ./zig-out/bin/main (or whatever your executable is named)

1741282285
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
forgot to include direct https://bpa.st/SXXQ so this is better

1741282309
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
yep that did it

1741282313
torque!~tachyon@user/torque
the compiler has to do a bunch of cache checks to see if it needs to rebuild your sources which involves a bunch of fs access

1741282332
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
dumbmf: https://discord.gg/8EzP3Jxb

1741282339
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, ya looks like it, https://bpa.st/SXXQ include running directly

1741282351
torque!~tachyon@user/torque
heresy to ask for a discord link in irc :V

1741282558
grayhatter!~grayhatte@user/grayhatter
stealth_: what's the python code?

1741282578
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, https://bpa.st/BTTQ bottom part

1741282609
grayhatter!~grayhatte@user/grayhatter
interesting

1741282632
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
do tell 

1741282700
grayhatter!~grayhatte@user/grayhatter
I'm kinda impressed with python's ctypes lib. I wouldn't have predicted it'd be so fast

1741282749
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, its not, we concluded the subject with https://bpa.st/SXXQ 

1741282801
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cython is nice to get something up and running real quick! in this case it gave me a change to compare the zig/ctypes version, if i do advanced stuff... ctype will crap out. 

1741282818
grayhatter!~grayhatte@user/grayhatter
stealth_: just to give you some heruistics though, I have a web framework with nearly no optimizations that's able to parse a full HTTP request for a static file, (including badly written if/else routing) and return that data, which is measured in microseconds. So if you're able to measure something simpler than an HTTP request, and are getting ms you're doing something wrong instead

1741282859
dumbmf!~dumbmf@syn-104-034-072-172.res.spectrum.com
rockorager: Thanks!

1741282866
grayhatter!~grayhatte@user/grayhatter
in ReleaseSafe

1741282948
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, just running empty python file will land you in ms range. python is runtime language. 

1741282978
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
after it runs you can have servers and what not... and you can do thousands of hits per seconds. 

1741283015
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
empty python file run `[Finished in 12ms]`

1741283038
grayhatter!~grayhatte@user/grayhatter
stealth_: I know. My point was, if you're running something in zig, and getting perf in ms, and it's slower than python, you're doing the measurment wrong. You should have seen ms in zig, and thought "huh, what am I missing, this should be microseconds"

1741283103
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, we already figured out what was going on... it was running `zig build run` that was taking up time

1741283186
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, ya, i was kind of freaking out cause i am planning on using zig to do low level hardware control that can run in microseconds. 

1741287945
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure why ghostty is using gtk should just use dvui

1741288718
andrewrk!~andrewrk@mail.ziglang.org
you're really not sure?

1741288731
andrewrk!~andrewrk@mail.ziglang.org
I bet you could easily guess first try

1741288821
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i am sure it uses gtk, has resize window issues, i am not sure why dvui wasn't considered.

1741288883
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since both are zig projects. 

1741289100
andrewrk!~andrewrk@mail.ziglang.org
what's your guess as to why it is using gtk?

1741289217
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm.. maybe dev didn't know about dvui?

1741289538
dumbmf!~dumbmf@syn-104-034-072-172.res.spectrum.com
stealth_: One thing that I remember hearing in a podcast from Mitchell was that a big emphasis of the project was having "native" UI. Projects like Wezterm and Kitty already support multiple platforms, but they don't have a native look and feel. At a quick glance dvui doesn't seem to focus on that

1741289650
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
ghostty is also about 2 months older than dvui

1741289704
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its a terminal though! how can it even look like native ui? you are free to make it look however you want on all the systems it will look the same.

1741289723
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Window decorations

1741289739
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
GUI widgets such as context menus

1741289742
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
alerts

1741289743
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
etc

1741289796
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm.. maybe color could match the system, other things could have been custom

1741289854
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
you must be a window manager user :)

1741289930
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure what that means, but fact is gtk on my system isn't the best. cachyos arch kde defaults to using QT. 

1741290421
fleischie!~fleischie@vm069.de
Sorry if I'm interrupting, but since when is it convention to put the @import() calls at the bottom of the file? Especially with the `zig init` files?

1741290465
grayhatter!~grayhatte@user/grayhatter
fleischie: at some point between 0.13 and 0.14 I've been doing it for months because it's so much better layout

1741290528
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
fleischie, unlike C zig isn't top down coding language

1741290553
fleischie!~fleischie@vm069.de
OK. I might not have been paying attention, but the first time I saw this was not a week ago in Andrew's Programming Without Pointers talk, and now it's consensus it seems.

1741290558
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I haven't boarded this train yet...

1741290587
andrewrk!~andrewrk@mail.ziglang.org
fleischie: it's something people have been trying, there's no general consensus yet 

1741290590
grayhatter!~grayhatte@user/grayhatter
rockorager: for a reason, or simply because you're not used to it

1741290613
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
not used to it, I'm not sure if I like it

1741290641
andrewrk!~andrewrk@mail.ziglang.org
for a talk it's important to put the important stuff at the top, talk slides are not intended to be a trend setter...

1741290688
grayhatter!~grayhatte@user/grayhatter
andrewrk: to be fair... the same applies to code, the least important thing shouldn't be the first thing you see

1741290730
fleischie!~fleischie@vm069.de
It's at least something to think about.

1741290735
fleischie!~fleischie@vm069.de
Nice that both versions work.

1741290776
andrewrk!~andrewrk@mail.ziglang.org
arguably, a glance at the set of dependencies used in a given file is key to understanding the logic within

1741290811
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
import and std at the top seems nice, i would second that.

1741290904
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python some ppl put import inside functions! it was so annoying to debug.

1741290931
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
can you put @import() inside function in zig as well?

1741290962
fleischie!~fleischie@vm069.de
Only one way to find out. :O

1741290976
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nooooo please no.

1741290977
grayhatter!~grayhatte@user/grayhatter
stealth_: unlike python @import is comptime only, so yes, but it doesn't share the same downsides

1741290995
fleischie!~fleischie@vm069.de
Yes, you can put @import() into functions.

1741291045
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
:( darn who's idea was this??? is hell to debug now

1741291131
dsal!sid13060@id-13060.lymington.irccloud.com
Getting close…  https://github.com/NixOS/nixpkgs/pull/387154#pullrequestreview-2665248647

1741291254
grayhatter!~grayhatte@user/grayhatter
stealth_: how does it make it harder to debug? is it just you don't like searching through code for strings, or don't like reading stack traces?

1741291494
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, before i figure out whats causing the problem, i first look at what files/modules are being imported, normally this would be on top and this helps grasp what the file/module is about. If import are inside function and inside if statement, it just complicates things since its so unorganized, before i though i had to deal with 2 other modules now it might be 4

1741291542
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you just endup spending more time since you have go through the whole code or search for import (which you normally don't think about)

1741291624
grayhatter!~grayhatte@user/grayhatter
depth first debugging?

1741291741
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
? more like if the compiler error couldn't pinpoint the problem to solve, you go through the code...

1741291797
grayhatter!~grayhatte@user/grayhatter
years in python, and year in zig I've literally never had the problem you're describing

1741291850
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
after you go through 1000's of line of code, you go this mofo just imported a 3rd party library inside a function that didn't get properly installed...

1741291852
grayhatter!~grayhatte@user/grayhatter
either I have a stack trace, and thus line numbers. Or it's a different bug, and I don't care what imports exist because I don't know where the bug is yet, so why would I start looking at a lib?

1741291875
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya you might be right, this might not be a zig issue, but who knows...

1741291888
grayhatter!~grayhatte@user/grayhatter
stealth_: yeah, like I already said... import is comptime only, so what you're describing is impossible in zig

1741291991
grayhatter!~grayhatte@user/grayhatter
but also, I've had that problem in python, and I've never not gotten a stack trace that points to the runtime failed import

1741292043
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
python by itself isn't bad at all, the error reporting is excellent and easy to deal with, now try to mix python with ffi, its pure hell to debug.

1741292182
grayhatter!~grayhatte@user/grayhatter
do you mean import, or are you talking about loading a dynamic shared library at runtime? 

1741292322
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
having import inside function can lead to lot of wasted time debugging. But having to deal with a bug inside compiled library for example is hell. you don't know if its pythons GC issue, C issue, ffi issue...

1741292387
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
segfault in python! what do you do as a python coder?

1741292497
grayhatter!~grayhatte@user/grayhatter
same thing I do in literally every language. start with printf, untill it becomes the tinyest bit non-trivial, and throw it into a debugger

1741292575
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i had to deal with a bug where the event loop would randomly fail and segfault, there isn't enough print statement that would fix that. 

1741292668
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, the bug still exists, if you feel the need to take a crack at it: https://github.com/YoSTEALTH/Liburing/blob/master/test/queue/get_cqe_test.py#L25-L42

1741292715
grayhatter!~grayhatte@user/grayhatter
which statement asserts?

1741292797
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
the test above passes, so the bug is with `io_uring_peek_batch_cqe` or how `cqe` is being handled by io_uring_peek_batch_cqe

1741293043
grayhatter!~grayhatte@user/grayhatter
does it segv the test runner and crash, or does python assert?

1741293093
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it will randomly segfault when you run that test, so the test never passes, you have uncomment line: 25

1741293153
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
python will assert and pass lets say 10 cqe, and crash, or 100 and crash

1741293582
grayhatter!~grayhatte@user/grayhatter
you know an assert is different from a segv right?

1741293654
grayhatter!~grayhatte@user/grayhatter
also, I'm pretty sure you're using this api wrong. uring_for_each_cqe takes `struct io_uring_cqe *cqe` where io_uring_peek_batch_cqe takes `struct io_uring_cqe **cqe_ptrs`

1741293676
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
only reason i am adding that assert is because its a test function

1741293700
grayhatter!~grayhatte@user/grayhatter
maybe python does some magic I've forgotten about but that concludes this nerdsnipe... good luck with your api

1741293716
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well they have different functions, the batch function is suppose to give you batch results, vs for loop that give you 1 result at a time. 

1741293775
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is how zig solves it (as far as i know) to bypass the whole batch/seen functions https://ziglang.org/documentation/master/std/#std.os.linux.IoUring.copy_cqes

1741296576
dumbmf!~dumbmf@syn-104-034-072-172.res.spectrum.com
I'm playing around with --fuzz, and after the fuzzer crashes, it just hangs. Is that intentional?

1741296616
dumbmf!~dumbmf@syn-104-034-072-172.res.spectrum.com
Also, in the release note, I see the function is called fuzzInput, but on master and 0.14.0 I see it's just called fuzz. Was it renamed?

1741303581
andrewrk!~andrewrk@mail.ziglang.org
dumbmf: https://github.com/ziglang/zig/pull/22862

1741304948
dumbmf!~dumbmf@syn-104-034-072-172.res.spectrum.com
Thanks 🙏

