1745114668
clevor!sid649024@id-649024.hampstead.irccloud.com
What exactly does the 'none' ABI mean in x86_64-linux-none?

1745117069
grayhatter!~grayhatte@user/grayhatter
the third in the target triple ABI is extra rules for the platform, gnu (libc), muslc (libc), etc or sometimes arch specific endings, like [something]hf when you have a hardware ALU that supports floats 

1745117108
grayhatter!~grayhatte@user/grayhatter
none in zig, means no extra libc rules IIRC

1745117127
grayhatter!~grayhatte@user/grayhatter
there was an issue discussing the move to a target quad

1745117149
clevor!sid649024@id-649024.hampstead.irccloud.com
I was kind of expecting this issue to be closed lol https://github.com/ziglang/zig-bootstrap/issues/216

1745117245
grayhatter!~grayhatte@user/grayhatter
this one https://github.com/ziglang/zig/issues/20690

1745117508
grayhatter!~grayhatte@user/grayhatter
lol, I do love reading some of the issues

1745117524
grayhatter!~grayhatte@user/grayhatter
there's often some gold hidden there

1745117532
grayhatter!~grayhatte@user/grayhatter
> I don't think switch on pointers is heavily relied upon in the wild; my source for this is that it's pretty much completely broken on the LLVM backend right now!

1745132074
sewn!~sewn@2602:fa87:6:107::a
when the zig compiler translates c to zig and encounters an error that doesn't appear when compiled as c, is the error the codes fault or the compilers fault?

1745135767
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
one can't have uncommented code from a other language in zig it seems, as the lsp complains about invalid byte '\t'

1745136318
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
can one pass a zig struct to a c function? Or is it better to create a c struct and use that in zig?

1745136452
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
later might be better, from what i know zig struct are different(optimized)

1745136541
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok, yeah different memory layout or something

1745136595
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
funny, i just got that byte \t error myself!

1745136612
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
within commented code. 

1745136662
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
yeah, that kinda sucks actually

1745137801
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ACTION finds him writing c now, lol

1745137865
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
why even bother with c if you are using zig? 

1745138125
Affliction!affliction@idlerpg/player/affliction
https://ziglang.org/documentation/master/#extern-struct

1745138143
Affliction!affliction@idlerpg/player/affliction
naturally you still have to match your field order and types

1745138247
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm using a c header file library

1745138294
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Affliction: thx

1745138357
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
here the struct is written in c: https://pedropark99.github.io/zig-book/Chapters/14-zig-c-interop.html

1745138374
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
So I can either go that way or write a extern-struct in zig, right?

1745138589
Affliction!affliction@idlerpg/player/affliction
If it already exists in your header, might as well use it. Less error prone, especially if it gets changed in the future.

1745138620
Affliction!affliction@idlerpg/player/affliction
But, if not, then yeah, I'd use an "extern struct"

1745138695
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
For me it's also a bit of a learning process, to see how one does this exchange with c and what is the best way to do it. 

1745138722
Affliction!affliction@idlerpg/player/affliction
sure, might be worth trying both for the learning process

1745138726
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Will first make it work, then try both ways I guess and post for feedback

1745138878
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
at the end of the day I'd like to pass a const void * (or ?*anyopaque) to this method of the c library: https://liblo.sourceforge.net/docs/group__liblolowlevel.html#ga56c5f1d587c215c27e92e6436e12b1a3

1745138898
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
which is a struct

1745138942
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
like this: https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L648

1745138948
Affliction!affliction@idlerpg/player/affliction
ah, user_data? If that's something the C code never looks at, then yeah, it can be a pointer to a zig struct

1745138967
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L157

1745138998
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ah ok, hm

1745139047
Affliction!affliction@idlerpg/player/affliction
not familiar with that specific lib, but generally code like that just stores the pointer and passes it back to you somehow

1745139054
Affliction!affliction@idlerpg/player/affliction
and never actually looks at it

1745139111
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
indeed

1745139130
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
that would be 'self' in zig I guess

1745139157
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
where self is a pointer to the struct

1745139180
Affliction!affliction@idlerpg/player/affliction
Right, your wrapper will have to sort that out though.

1745139223
Affliction!affliction@idlerpg/player/affliction
Could be a pointer to a fixed or unsized array too. Naturally not a slice, since that's a {.ptr, .len} pair.

1745140176
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Affliction: It stores userdata: https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L405

1745140208
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
and passes it to the callback which the user has set:

1745140210
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L487

1745140223
Affliction!affliction@idlerpg/player/affliction
Yeah, naturally it has to remember the pointer somewhere, heh

1745140233
Affliction!affliction@idlerpg/player/affliction
Just, as long as it never derefs it

1745140233
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L401

1745140279
Affliction!affliction@idlerpg/player/affliction
It's a fairly common pattern in libraries that involve asynchronus events

1745140327
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok, thx, let's see if I can make it to work with a Zig struct

1745140856
Affliction!affliction@idlerpg/player/affliction
I have a similar example from glfw: https://bpa.st/SJ4ASDPLQPFLK5TZPUBMOAYIME

1745140929
Affliction!affliction@idlerpg/player/affliction
(Naturally, if you have threading involved, you'll have to lock as necessary.)

1745144518
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Affliction: yeah I was wondering how you cast user_data to the right struct type: https://bpa.st/SJ4ASDPLQPFLK5TZPUBMOAYIME#1L17-L17

1745144629
Affliction!affliction@idlerpg/player/affliction
ick, those function names heh. That was some of the earliest zig code I wrote, before I picked up the style :)

1745145546
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
How do I cast ?*anyopaque to my zig struct?

1745146551
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 var nsm = @ptrCast(userdata)*NsmClient;

1745146565
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 error: @ptrCast must have a known result type

1745146993
Affliction!affliction@idlerpg/player/affliction
var nsm: *MyType = ...;

1745147030
Affliction!affliction@idlerpg/player/affliction
(might want to verify the pointer isn't null at the same time, or use ?*MyType if it's ok being null of course)

1745148189
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
vvar nsm: *NsmClient = userdata.?;

1745148200
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
error: expected type '*nsm.nsm.NsmClient', found '*anyopaque'

1745148575
Affliction!affliction@idlerpg/player/affliction
yes, you'll need a @ptrCast around userdata.?

1745148625
Affliction!affliction@idlerpg/player/affliction
and that might need an @alignCast too, since the compiler doesn't know the pointer is already aligned

1745149325
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
flower_: you can directly cast ?*anyopaque without the unwrap

1745149344
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
const nsm: *NsmClient = @ptrCast(@alignCast(userdata));

1745149351
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
where userdata is of type ?*anyopaque

1745149379
Affliction!affliction@idlerpg/player/affliction
rockorager: interesting, I take it that panics if userdata is null?

1745149388
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Unlike other types, ?*anyopaque is the same size as *anyopaque

1745149389
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah

1745149397
Affliction!affliction@idlerpg/player/affliction
good to know

1745149952
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://zigbin.io/c47696

1745149994
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Could be also something more fundamental related to pointer

1745149997
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/zig-struct-to-liblo-method/item/src/main.zig#L102

1745150068
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/zig-struct-to-liblo-method/item/src/nsm/nsm.zig#L197

1745150103
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/zig-struct-to-liblo-method/item/src/nsm/nsm.zig#L160

1745152080
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ah wait ...

1745152424
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok, small oversight, seems to work now

1745152574
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
thx

1745159882
ovf!sid19068@id-19068.hampstead.irccloud.com
is this expected? $ zig cc -target x86_64-linux-gnu.2.12  -dumpmachine → zig: error: version '.2.12' in target triple 'x86_64-unknown-linux-gnu.2.12' is invalid

1745159944
ovf!sid19068@id-19068.hampstead.irccloud.com
i'd probably expect the .2.12 to be silently ignored for -dumpmachine

1745162651
clevor!sid649024@id-649024.hampstead.irccloud.com
I can't wait for Zig 2.0 to come out so I can target individual humans using -Dtarget=dna-andrew_kelley-musl

1745162861
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: When I said Zig failed to compile on a recent master commit, that was actually using the latest zig-bootstrap.

1745165122
cancername!~cancernam@user/cancername
I've caught a panic using the built-in fuzzer. How can I determine the input that caused it?

1745166032
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 const userdata: ?*anyopaque = @ptrCast(&nsm_client);

1745166036
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
seems to work as well

1745166152
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/zig-struct-to-liblo-method/item/src/main.zig#L82

1745166230
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/zig-struct-to-liblo-method/item/src/nsm/nsm.zig#L189

1745168080
bw!sid2730@user/betawaffle
What is the purpose of an AutoArrayHashMap*(void, void)?

1745168113
bw!sid2730@user/betawaffle
Does it still store an index, just no keys and values?

1745168502
grayhatter!~grayhatte@user/grayhatter
bw: I don't think it does serve a purpose? the array would be empty IIRC?

1745168530
bw!sid2730@user/betawaffle
I think it works if you use adapters

1745168537
grayhatter!~grayhatte@user/grayhatter
empty meaning array len == 0, so it wouldn't have an index?

1745168557
bw!sid2730@user/betawaffle
It looks like it’s used in some of the zig std library in places

1745168569
grayhatter!~grayhatte@user/grayhatter
I'd have to go back and read the definition, but I don't think the index is kept seperate like that

1745168828
bw!sid2730@user/betawaffle
It looks like it works, but it would still be better if the index part of it could just be used on its own

1745169386
grayhatter!~grayhatte@user/grayhatter
bw: yeah, you're right, in stdlib (link/Dwarf.zig) it looks like it's just being used as an "exists" index

1745169442
bw!sid2730@user/betawaffle
The llvm builder uses it too

1745169443
grayhatter!~grayhatte@user/grayhatter
it's kinda weird though, seems like it would be better to make `array_hash_map.IndexHeader` pub instead

1745169457
bw!sid2730@user/betawaffle
Yeah that’s what I was thinking

1745169484
bw!sid2730@user/betawaffle
It seems like a useful primitive

1745169485
grayhatter!~grayhatte@user/grayhatter
more explicit rather than it's current "dark magic"

1745169556
grayhatter!~grayhatte@user/grayhatter
> Large Commits have some content hidden by default. Use the searchbox below for content that may be hidden.

1745169591
grayhatter!~grayhatte@user/grayhatter
I guess if you're scanning looking for unspecificed anomlys, you can get fucked instead?

1745169596
grayhatter!~grayhatte@user/grayhatter
thanks github :<

1745169660
grayhatter!~grayhatte@user/grayhatter
unspecified anomalies*

1745170145
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, remember that problematic segfault i was talking about? https://github.com/YoSTEALTH/Liburing/blob/master/test/queue/get_cqe_test.py#L25-L42 in cython it fails 100% of the time, in zig it fails ruffly 30% of the time https://zigbin.io/9e0330

1745170172
grayhatter!~grayhatte@user/grayhatter
that's cute

1745170182
grayhatter!~grayhatte@user/grayhatter
have you tried passing a pointer to a pointer instead of just a pointer?

1745170201
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have tried few combinations, yes. 

1745170259
grayhatter!~grayhatte@user/grayhatter
well, you're still doing something wrong if it's still segv

1745170286
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
have also tried setting `ptr: ?[*]*c.io_uring_cqe` as `ptr: ?[*]c.io_uring_cqe` and `ptr: ?*c.io_uring_cqe`

1745170320
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also `ptr: ?[*]?[*].io_uring_cqe`

1745170339
grayhatter!~grayhatte@user/grayhatter
I didn't even try to read the full thing, so might be totally wrong because I'm just pattern matching... but I'm pretty `ptr: ?[*]*c.io_uring_cqe,` should be ptr: ?[*]?*c.io_uring_cqe,`

1745170357
grayhatter!~grayhatte@user/grayhatter
maybe ideally `ptr: ?[*:null]?*c.io_uring_cqe`,

1745170390
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can try those combination as well, sometimes it says i can't field access so its a pain to change all the code. 

1745170422
grayhatter!~grayhatte@user/grayhatter
stealth_: that's why it's important to read and understand the API and lib docs... so you don't have to just guess and check many times until you get lucky

1745170501
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, funny you should say that cause even their latest release had wrong return type mentioned, so not everything has docs, so lately there are, before there wasn't.

1745170513
grayhatter!~grayhatte@user/grayhatter
their?

1745170516
grayhatter!~grayhatte@user/grayhatter
liburing?

1745170524
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya

1745170553
grayhatter!~grayhatte@user/grayhatter
to be fair, when I say docs, I also mean header files, because as you just said... you can't always trust the docs

1745170627
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there isn't much to it really just `unsigned io_uring_peek_batch_cqe(struct io_uring *ring, struct io_uring_cqe **cqes, unsigned count);`

1745170644
grayhatter!~grayhatte@user/grayhatter
oh

1745170652
grayhatter!~grayhatte@user/grayhatter
is count the number of **ceqs?

1745170679
grayhatter!~grayhatte@user/grayhatter
then it wouldn't be `[*:null]?*c.io_uring_cqe`

1745170710
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no, "returns up to count request completions in cqe_ptrs belonging to the ring param"

1745170716
grayhatter!~grayhatte@user/grayhatter
it would be (effectively) `[count]*c.io_uring_cqe`

1745170750
Gliptic!~glip@2a01:4f8:c012:91f3::1
if in doubt, read the liburing C source (kind of depends on knowing C though)

1745170755
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure if you have liburing installed you can do `man io_uring_peek_batch_cqe`

1745170769
grayhatter!~grayhatte@user/grayhatter
lmao

1745170781
grayhatter!~grayhatte@user/grayhatter
I just read line 93,97

1745170810
grayhatter!~grayhatte@user/grayhatter
🍿

1745170819
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
did i miss something? 

1745170822
Gliptic!~glip@2a01:4f8:c012:91f3::1
uh

1745170897
Gliptic!~glip@2a01:4f8:c012:91f3::1
&cqe.ptr

1745170922
grayhatter!~grayhatte@user/grayhatter
I lack the words to describe how wrong this is

1745170948
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well in other functions it takes cqe.ptr, for this one it needs to be &cqe.ptr or else doesn't compile. 

1745170982
grayhatter!~grayhatte@user/grayhatter
it's ***wild*** to me this only crashes 30% of the time

1745171003
Gliptic!~glip@2a01:4f8:c012:91f3::1
> On success io_uring_peek_cqe(3) returns 0 and the cqe_ptr parameter is filled in.

1745171034
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm

1745171059
Gliptic!~glip@2a01:4f8:c012:91f3::1
sorry, I meant: On success io_uring_peek_batch_cqe(3)

1745171061
Gliptic!~glip@2a01:4f8:c012:91f3::1
       returns the number of completions filled in.

1745171082
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o right you got me confused as well, thats peek_cqe, lol

1745171093
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya it should return how many got completed. 

1745171093
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, how many of those can it "fill in"?

1745171097
Gliptic!~glip@2a01:4f8:c012:91f3::1
in your case

1745171150
grayhatter!~grayhatte@user/grayhatter
goddamnit Gliptic.... this is *your* fault!

1745171152
Gliptic!~glip@2a01:4f8:c012:91f3::1
the thing is that the non-batch might make more sense

1745171159
Gliptic!~glip@2a01:4f8:c012:91f3::1
sorry

1745171177
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well batch is suppose to make things faster. 

1745171195
grayhatter!~grayhatte@user/grayhatter
stealth_: make `ptr: ?[*]*c.io_uring_cqe,` -> `ptr: [50]*c.io_uring_cqe` and make count == 50;

1745171200
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_, how big of a batch have you made space for?

1745171210
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so you are not syscalling to check if new entry is available. 

1745171216
Gliptic!~glip@2a01:4f8:c012:91f3::1
in &cqe.ptr

1745171228
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
batch can be as big as initial entries 

1745171250
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so whatever your submit, in this case i am testing with 300-900 entries

1745171296
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_, so, answer the question, how many did you allocate space for?

1745171321
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, well the memory for cqe is handled by io_uring will you call io_uring_advance to clear cqe 

1745171338
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, i didn't ^ io_uring does it

1745171348
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, io_uring definitely didn't

1745171374
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats how its suppose to work. 

1745171375
grayhatter!~grayhatte@user/grayhatter
stealth_: that's not what the api suggests

1745171385
Gliptic!~glip@2a01:4f8:c012:91f3::1
cqe.ptr is _your code_

1745171390
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you are only pointing to io_uring memory that stores the cqe

1745171397
Gliptic!~glip@2a01:4f8:c012:91f3::1
I do not

1745171417
Gliptic!~glip@2a01:4f8:c012:91f3::1
cqe.ptr is not stored in any io_uring memory

1745171449
grayhatter!~grayhatte@user/grayhatter
lol, good luck with your c.io_uring debugging Gliptic I'm going back to zig :P

1745171452
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well the batch function might be special that you need to allocate your own memory!

1745171478
Gliptic!~glip@2a01:4f8:c012:91f3::1
might be?

1745171489
Gliptic!~glip@2a01:4f8:c012:91f3::1
do you not know what you need to do to call the function?

1745171502
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's nothing special here

1745171515
Gliptic!~glip@2a01:4f8:c012:91f3::1
this is a bog-standard C API

1745171542
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i don't come from C background so i don't know such things. 

1745171635
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, how do you expect it to work?

1745171656
grayhatter!~grayhatte@user/grayhatter
Gliptic: he expects you to tell him so he doesn't have to "know such things"

1745171661
Gliptic!~glip@2a01:4f8:c012:91f3::1
you pass it a pointer to something _you_ control

1745171684
Gliptic!~glip@2a01:4f8:c012:91f3::1
what do you expect the API to do?

1745171696
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't understand what your mental model is

1745171707
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i was told by io_uring dev that it controls the memory! 

1745171714
Gliptic!~glip@2a01:4f8:c012:91f3::1
that doesn't mean anything

1745171726
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's just words

1745171754
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that leads me to lot of confusion since there weren't a lot of docs when i starting using this.

1745171787
Gliptic!~glip@2a01:4f8:c012:91f3::1
where do you expect the API to store the events it returns?

1745171812
Gliptic!~glip@2a01:4f8:c012:91f3::1
tell me the zig expression that you would use to access event number, say, 2

1745171817
Gliptic!~glip@2a01:4f8:c012:91f3::1
after calling this function

1745171838
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well thats true, i actually had an argument about it where i was like i assign memory and pass it and was told not to do that cause all memory is already managed.

1745171877
Gliptic!~glip@2a01:4f8:c012:91f3::1
io_uring doesn't manage memory that you yourself allocate in zig, does it?

1745171891
Gliptic!~glip@2a01:4f8:c012:91f3::1
it doesn't reach out and snatch it from your hands

1745171917
Gliptic!~glip@2a01:4f8:c012:91f3::1
who allocates the memory for the field cqe.ptr?

1745171930
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its suppose to manage entries memory, you read those return entries then you say i have io_uring_seen it so let io_uring to clear that memory. 

1745171951
Gliptic!~glip@2a01:4f8:c012:91f3::1
what expression do you use to access event number 2 that the function returned?

1745172067
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looking at example https://github.com/axboe/liburing/blob/master/examples/io_uring-udp.c#L332 it does make it clear you pass it memory

1745172305
Gliptic!~glip@2a01:4f8:c012:91f3::1
of course you have to pass it memory, either way

1745172468
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looks like it, thanks Gliptic, that example wasn't there when i was dealing with this issue few years ago and no one mentioned passing it memory!

1745172497
Gliptic!~glip@2a01:4f8:c012:91f3::1
a pointer is always to memory

1745172537
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya i was under the impressing that io_uring managed the entries memory. 

1745172772
Gliptic!~glip@2a01:4f8:c012:91f3::1
but it physically cannot do that

1745172780
Gliptic!~glip@2a01:4f8:c012:91f3::1
you pass it a pointer

1745172849
Gliptic!~glip@2a01:4f8:c012:91f3::1
this is the kind of thing you need to understand, that a function cannot magically manage memory that is in your code and you are passing to it

1745172920
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i 100% agree with you, i was told otherwise so it leads to confusion and bugs. 

1745172960
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe they were thinking of something else! and gave me wrong info, who knows.. 

1745173075
Gliptic!~glip@2a01:4f8:c012:91f3::1
you were probably not told otherwise

1745173127
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i been bitching about this issues for a long time https://github.com/axboe/liburing/issues/1159 and no one mentioned assigning memory

1745173219
grayhatter!~grayhatte@user/grayhatter
lol

1745173228
grayhatter!~grayhatte@user/grayhatter
> Looking at your earlier segfaults, are you sure it isn't some random memory issues you are seeing?

1745173235
grayhatter!~grayhatte@user/grayhatter
>  but they do look like use-after-free issues, or double frees.

1745173244
grayhatter!~grayhatte@user/grayhatter
if only someone had mentioned a memory issue

1745173286
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
*assigning memory*

1745173358
grayhatter!~grayhatte@user/grayhatter
you seem to think that means something different from everyone else would understand it to mean

1745173383
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
probably, everyone is different, i am as different as they come.

1745173518
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python you don't give anything memory and i was told io_uring handles all the memory! i just took it as fact.

1745173547
Gliptic!~glip@2a01:4f8:c012:91f3::1
*cough* learn C

1745173920
grayhatter!~grayhatte@user/grayhatter
stealth_: handles all memory, and manages it's own memory are two very different things

1745173998
grayhatter!~grayhatte@user/grayhatter
`**cqe_array{ *cqe, *cqe, *cqe, *cqe }` you manage and own **cqe_array, where io_uring owns each *cqe

1745174048
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, i see, you are probably right.

1745174049
grayhatter!~grayhatte@user/grayhatter
"I took it as fact" here translates closely to, I didn't understand, and made no effort too

1745174084
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if i made no effort i would have quit 4years ago 

1745174091
grayhatter!~grayhatte@user/grayhatter
you're required to use C if you want to interface with liburing, and you've bragged about not knowing C in this channel

1745174152
grayhatter!~grayhatte@user/grayhatter
counter point, if you made any level of effort to learn C across 4 years, you would have picked up a lot of understanding such that you would know c

1745174227
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
c give me the creeps, i don't wana bother with it since i am learning zig now. 

1745174252
grayhatter!~grayhatte@user/grayhatter
you think all the time you spent across 4 years is what's important, but I'd say most of that time was wasted, because you're still completely stumped by basic memory concepts

1745174278
grayhatter!~grayhatte@user/grayhatter
those are the same memory concepts you need to understand in order to write correct zig code too 

1745174302
grayhatter!~grayhatte@user/grayhatter
> c give me the creeps

1745174327
grayhatter!~grayhatte@user/grayhatter
> c give me the creeps, i don't wana bother with it since i am learning zig now.

1745174338
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
where else will i get to learn "handles all memory, and manages it's own memory are two very different things" this comes from experience, not something you can read somewhere. 

1745174356
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i didn't have anyone to teach me, just random stuff i picked up off the net/ppl, so on.. 

1745174361
grayhatter!~grayhatte@user/grayhatter
see, still braging about your ignorance to C... where you're trying to use 2 different C libs to do what you want... you're using more C than zig at this point

1745174387
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i don't wana code in C is what i mean. 

1745174402
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i don't mind dealing with it. 

1745174461
grayhatter!~grayhatte@user/grayhatter
the semantic difference between "manages memory" and "handles all memory" is insignificant when you willfully understand neither

1745174532
grayhatter!~grayhatte@user/grayhatter
the memory ownership model of a library isn't disposable information, is important to understand **exactly** where the boundries are if you want to use the library correctly... that's something most people pickup within 3mo of using C or zig

1745174548
grayhatter!~grayhatte@user/grayhatter
assuming they make the effort to actually learn

1745174576
grayhatter!~grayhatte@user/grayhatter
and I never had anyone one teach me anything about C, I taught myself everything I know too, so that's not a great excuse

1745174592
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i spent most of the time learning ctypes, cffi, cython, ... all that took a lot of time. 

1745174603
grayhatter!~grayhatte@user/grayhatter
also, half a dozen people have spent hours here in #zig trying to help teach you python, c, zig, and memory management... so it's not even a true excuse 

1745174608
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how many language do you speak? 

1745174651
grayhatter!~grayhatte@user/grayhatter
depends on who you ask, I'd say many, but there are some people who'd say I can't even really speak english

1745174722
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok so english is your main language, so u when you read stuff you understanding it setting differences, for me its like the 5th language so i don't always pick up on those details. 

1745174793
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
settle differences*

1745174838
grayhatter!~grayhatte@user/grayhatter
subtle differences*

1745174900
grayhatter!~grayhatte@user/grayhatter
but; that excuse is also not convincing, because how you describe it is much less important than if you understand how memory ownership, and how well you understand it

1745174922
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am slowly learning it. 

1745174926
grayhatter!~grayhatte@user/grayhatter
for the record, you don't have to convince me... I don't care if you want to understand C or not

1745174939
bw!sid2730@user/betawaffle
You really need to learn about memory and pointers

1745174958
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i found these nice videos: https://www.youtube.com/@calder-ty/videos

1745174969
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i will have to go though those again. 

1745174977
bw!sid2730@user/betawaffle
Trying to use a C library without that knowledge is a bad idea

1745175030
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i do know it, but i don't talk all nerdy about it

1745175039
bw!sid2730@user/betawaffle
lol

1745175153
grayhatter!~grayhatte@user/grayhatter
but my effort and tolerance for helping you ends at about the same amount of effort you put in... I'm only pointing it out so that you can see how other people (perhaps only me) see your participation... you keep making excuses, and then the same mistakes over and over... eventually you're gonna burn out, or piss off everyone willing to help you

1745175205
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, you are probably right, i have had many burn outs.

1745175213
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
anyways, lets continue this later... i have go do some sanding/staining, i am building(wood) a small computer table/rack.

1745175233
grayhatter!~grayhatte@user/grayhatter
but if you're just gonna keep making excuses for why you shouldn't have to put in the effort, you're gonna have a bad time

1745175240
grayhatter!~grayhatte@user/grayhatter
good luck with your table staining 

1745176436
Gliptic!~glip@2a01:4f8:c012:91f3::1
"Finally!!! after 2 whole months of dealing with segfault, solution was to use different Liburing functions?!" <- lol, use the function that returns one event instead of several? wonder what the problem can be

1745176495
torque!~tachyon@user/torque
what a story arc, folks

1745176715
grayhatter!~grayhatte@user/grayhatter
admittedly, I'm basking in the being proven right part of it

1745176753
grayhatter!~grayhatte@user/grayhatter
Gliptic: literally impossible to tell :P

1745177395
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
one can't do a typedef for a function signature in Zig is it? https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L149

1745177439
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
can one have a function signature as function argument like here? https://github.com/jackaudio/new-session-manager/blob/master/extras/nsm.h/nsm.h#L402

1745177451
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
or how would you do something like this in Zig

1745177816
grayhatter!~grayhatte@user/grayhatter
flower_: types are first class in zig

1745177860
grayhatter!~grayhatte@user/grayhatter
I just wrote a "rule function type" for verse https://srctree.gr.ht/repo/verse/blob/src/bot-detection.zig#L59 

1745177948
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: I see, interesting, hm let's see

1745177963
grayhatter!~grayhatte@user/grayhatter
depending on where you want to use it

1745177977
grayhatter!~grayhatte@user/grayhatter
you might want `*const fn (args) returnType;`

1745178107
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: is that just a nice paste website or is your code so clean? ;)

1745178143
grayhatter!~grayhatte@user/grayhatter
flower_: which one makes me look better? that's my answer! :D

1745178211
grayhatter!~grayhatte@user/grayhatter
thankfully, I just split this file out into a few instead, so this file is new enough that it's still clean

1745178258
grayhatter!~grayhatte@user/grayhatter
everything else is from srctree, which is a git host rather than just a paste site (but it does support pastes as well)

1745179092
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok seems to work: 

1745179093
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/setCallbacksZig/item/src/main.zig#L83

1745179114
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/setCallbacksZig/item/src/nsm/nsm.zig#L73

1745179169
h4kor!~h4kor@user/h4kor
anyone got tips on testing a tcp server implementation (using posix sockets)? 

1745179960
lolok!~lolok@user/lolok
netcat is a nice tool

1745180160
h4kor!~h4kor@user/h4kor
I'm looking for a way to test it automatically using zig tests. 

1745180217
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm passing here user_data (?*anyopaque) to a c library, but I could probably just store it in my wrapper struct in Zig: https://git.sr.ht/~flower/zjasmnotes/tree/setCallbacksZig/item/src/nsm/nsm.zig#L107

1745180217
h4kor!~h4kor@user/h4kor
I could build in one level of abstraction and only test the logic using readers and writers.

1745180299
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm I see no benefit, let's just pass the user_data around

1745180306
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
for now

1745181700
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, solution for the past 4-5years has already been to process 1 event at a time, most of the library out there do the same as well. Just that batch processing cqe has its own advantages like dealing with all the completed events at once before proceeding to adding new events.

1745181800
Gliptic!~glip@2a01:4f8:c012:91f3::1
I think you missed my point, but I shan't belabour it

1745182137
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, you are quoting from my post, well it uses for loop so it still works like batch but its more low level. there is nothing wrong with dealing with 1 event at a time either (if you code it in a way it doesn't syscall) 

1745182801
Gliptic!~glip@2a01:4f8:c012:91f3::1
my point: if A works and B doesn't, you look at what is different between A and B. In this case returning one event vs returning many

1745183133
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its easy to say that now, since we already know what is causing the bug, before it wasn't so obvious, in python it would randomly segfault. it took a lot of time just to narrow it down.

1745183243
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also that example someone must have written it after i was talking about it cause others probably had the same issues dealing with it. 

1745183853
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
zig just makes a copy of the cqes to deal with the issue also `io_uring_for_each_cqe` is better option. i just wanted to find a solution since i was more curious about the bug. https://github.com/axboe/liburing/issues/103#issuecomment-686665007

1745184309
Gliptic!~glip@2a01:4f8:c012:91f3::1
copying the values wouldn't solve your issue

1745184812
Gliptic!~glip@2a01:4f8:c012:91f3::1
your issue has nothing to do with that, so I wonder if you understand what the issue was at all

1745188660
clevor!sid649024@id-649024.hampstead.irccloud.com
I was thinking about making a config.zig import that can have a fallback if it doesn't exist, but then I just realized a JSON file at runtime would suffice. Stuff like name, location, etc.

1745188908
grayhatter!~grayhatte@user/grayhatter
clevor: "am I a joke to you?" -- .zon format, probably

1745188930
clevor!sid649024@id-649024.hampstead.irccloud.com
Good idea

1745188964
clevor!sid649024@id-649024.hampstead.irccloud.com
Would it be config.zon, or config.zig.zon?

1745189057
grayhatter!~grayhatte@user/grayhatter
I'd think you'd want `config.zon`

1745189081
grayhatter!~grayhatte@user/grayhatter
IIUC build.zig.zon is just named that way because it's a zon file not for `build` but specifically for the build.zig file 

1745189117
clevor!sid649024@id-649024.hampstead.irccloud.com
Because it

1745189119
clevor!sid649024@id-649024.hampstead.irccloud.com
oops

1745189144
clevor!sid649024@id-649024.hampstead.irccloud.com
Because it may or may not exist, I can't import it :p

1745189146
grayhatter!~grayhatte@user/grayhatter
I give it a non-zero chance that andrewrk will notice one day, and rename it from build.zig.zon, to build.zon

1745189162
grayhatter!~grayhatte@user/grayhatter
> just build.zon, it's cleaner

1745189177
clevor!sid649024@id-649024.hampstead.irccloud.com
less confusing too

1745189240
grayhatter!~grayhatte@user/grayhatter
oh, I thought you were gonna read and parse at runtime

1745189265
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/std/#std.zon.parse.fromSlice

1745189336
clevor!sid649024@id-649024.hampstead.irccloud.com
Parsing at comptime or build time is preferable, and runtime is only if necessary.

1745189436
clevor!sid649024@id-649024.hampstead.irccloud.com
I want a not-so-hacky way to import it if it exists, and import a different file if it doesn't exist, all at build time.

1745189545
clevor!sid649024@id-649024.hampstead.irccloud.com
Thinking about it a bit more, I should do it at runtime.

