1745455539
lemons!~doggie@user/doggie-:49517
huh

1745455555
lemons!~doggie@user/doggie-:49517
so riir is "rewrite it in rust"

1745455571
lemons!~doggie@user/doggie-:49517
does that mean the zig equivalent is rizz

1745455780
andrewrk!~andrewrk@mail.ziglang.org
https://kristoff.it/blog/maintain-it-with-zig/

1745456230
lemons!~doggie@user/doggie-:49517
andrewrk: the c footgun hyperlink in that page 404s 

1745456234
lemons!~doggie@user/doggie-:49517
https://dustri.org/b/my-favourite-c-footgun.html

1745456245
lemons!~doggie@user/doggie-:49517
oh thats not yours

1745456249
lemons!~doggie@user/doggie-:49517
fuck i need sleep

1745459663
mojo_jojo!~tokamak@user/mojo-jojo:74093
huzza... took a bit of debugging but finally managed to get here... (turns out it was a network issue)

1745461534
clevor!sid649024@id-649024.hampstead.irccloud.com
I got a 404 too.

1745462426
clevor!sid649024@id-649024.hampstead.irccloud.com
https://web.archive.org/web/20221204215803/https://dustri.org/b/my-favourite-c-footgun.html

1745462906
clevor!sid649024@id-649024.hampstead.irccloud.com
I pinged Loris Cro on Discord about it.

1745464017
clevor!sid649024@id-649024.hampstead.irccloud.com
What's the biggest Zig footgun?

1745465986
mojo_jojo!~tokamak@user/mojo-jojo:74093
(bare in mind ive just started om tbe journey) footgun: semicolans.... have been spoiled by go and my auto pairs plugins...

1745469524
tomengland!~tomenglan@user/tomengland
is there an easy way to build to windows from arm mac, i can just use mingw64 in command line but how do i do it via zig?

1745469885
scajanus!~scajanus@user/scajanus
tomengland: have you seen https://zig.guide/build-system/cross-compilation/

1745470656
tomengland!~tomenglan@user/tomengland
let me try thank you!

1745471077
tomengland!~tomenglan@user/tomengland
hmm, trying to build with raylib, i need to play with it more. 

1745476271
lemons!~doggie@user/doggie-:49517
whats the "proper" way to do struct padding for externs

1745476307
lemons!~doggie@user/doggie-:49517
i currently have .{ type, junk1, junk2, junk3, data } but i assume thats not how its done

1745476364
lemons!~doggie@user/doggie-:49517
junk defined like other fields i mean

1745476409
yataro!~yataro@user/yataro
wdym padding 

1745476421
yataro!~yataro@user/yataro
if you want c abi you use "extern struct"

1745476617
lemons!~doggie@user/doggie-:49517
yataro: the struct in c code is defined as { ByondValueType type; u1c junk1, junk2, junk3; //!< padding */ ByondValueData data; }

1745476688
lemons!~doggie@user/doggie-:49517
trying to recreate it in zig but the only reference to what i need to do is translatec code (which doesnt understand these as junk)

1745476984
yataro!~yataro@user/yataro
"which doesnt understand these as junk" what is the exact problem with translate-c?

1745477202
lemons!~doggie@user/doggie-:49517
yataro: none..? im not using translatec, writing the header translation by hand and want to know if theres any syntax for extern struct padding

1745477227
lemons!~doggie@user/doggie-:49517
also gtg, shoot a memo w/ response

1745483510
clevor!sid649024@id-649024.hampstead.irccloud.com
I would say `_: u1c, _: u1c, _: u1c`, but IDK if that is valid in a(n extern) struct decl.

1745484044
yataro!~yataro@user/yataro
clevor: `_` is a valid field name so no, it will not work

1745484794
lemons!~doggie@user/doggie-:49517
^

1745484800
lemons!~doggie@user/doggie-:49517
tried that already

1745484854
Gliptic!~glip@2a01:4f8:c012:91f3::1
lemons, set default values for your junk?

1745484866
lemons!~doggie@user/doggie-:49517
set to undefined already

1745484874
Gliptic!~glip@2a01:4f8:c012:91f3::1
so what's the problem

1745484902
lemons!~doggie@user/doggie-:49517
not really a "problem",  just wanted to know if theres a proper way to do junk fields 

1745484933
lemons!~doggie@user/doggie-:49517
having junk1, junk2, junk3 feels like a newbie-ism

1745484952
Gliptic!~glip@2a01:4f8:c012:91f3::1
in C I've used like _dummy0, _dummy1, etc.

1745484978
Gliptic!~glip@2a01:4f8:c012:91f3::1
or _reserved0

1745484997
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's no "proper" way

1745485009
lemons!~doggie@user/doggie-:49517
kk

1745485529
yataro!~yataro@user/yataro
sometimes you can set alignment to avoid dummy fields, but it depends on the struct layout 

1745488470
lemons!~doggie@user/doggie-:49517
there any way to conditionally import from this file and not the other if building for tests?

1745488509
lemons!~doggie@user/doggie-:49517
theres modules but i dont wanna have "import("byondapi")" and "import("byondapi_raw")"

1745488558
lemons!~doggie@user/doggie-:49517
hol on nvm i got it

1745488572
lemons!~doggie@user/doggie-:49517
thanks for being my duck

1745488597
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
quack quack

1745489657
clevor!sid649024@id-649024.hampstead.irccloud.com
lemons: builtin.is_test might be what you need in this case.

1745489686
lemons!~doggie@user/doggie-:49517
clevor: that.. actually does make it cleaner

1745489688
lemons!~doggie@user/doggie-:49517
thanks

1745489762
lemons!~doggie@user/doggie-:49517
is that a new version thing? cant see it myself

1745489796
clevor!sid649024@id-649024.hampstead.irccloud.com
I mean @import("builtin").is_test https://ziglang.org/documentation/master/#Detecting-Test-Build

1745489879
lemons!~doggie@user/doggie-:49517
oh wth import(builtin) isnt eql to import(std).builtin

1745490482
clevor!sid649024@id-649024.hampstead.irccloud.com
idk

1745491835
bw!sid2730@user/betawaffle
has anyone done a study of... not entirely sure how to describe this, but programmer intent vs. a programming language's ability to convey that intent?

1745491877
lemons!~doggie@user/doggie-:49517
bw: what would it study

1745491887
bw!sid2730@user/betawaffle
(ignoring comments, because that's not a very interesting question)

1745491893
bw!sid2730@user/betawaffle
like umm

1745491929
lemons!~doggie@user/doggie-:49517
capabilities of the languages, code size, amending of intent depending on the language?

1745491939
bw!sid2730@user/betawaffle
programmer is trying to do X, and the only way to express that in the language is to do Y (which happens to do X in the process)

1745491953
lemons!~doggie@user/doggie-:49517
readiblity by expert vs layman?

1745491962
bw!sid2730@user/betawaffle
i think expert is fine

1745492021
bw!sid2730@user/betawaffle
like basically a language has some set of primitives that it supports, and anything you want to do has to be expressed in terms of those primitives

1745492022
lemons!~doggie@user/doggie-:49517
bw: ik what you mean by intent, im asking what would the study actually measure and in pursuit of what hypothesis

1745492043
bw!sid2730@user/betawaffle
yeah, i'm trying to figure that out too lol, sort of a brain dump

1745492050
lemons!~doggie@user/doggie-:49517
fair lol

1745492066
bw!sid2730@user/betawaffle
let me try to give a concrete example

1745492079
lemons!~doggie@user/doggie-:49517
it would probably be interesting to see how/if the former changes depending on the latter

1745492092
lemons!~doggie@user/doggie-:49517
in complexity i mean

1745492111
bw!sid2730@user/betawaffle
ok well something pretty simple, i guess, storage of a number

1745492118
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
abstractions are precisely that, abstract

1745492123
lemons!~doggie@user/doggie-:49517
would something like python inherently have less ambitious projects or such

1745492136
bw!sid2730@user/betawaffle
let's imagine the programmer knows the range of some number in their algorithm

1745492158
bw!sid2730@user/betawaffle
but the language just has fixed-range integer types (e.g. u32, u64, etc)

1745492193
bw!sid2730@user/betawaffle
the best the programmer can do is to perform checks on the value range, anywhere they are concerned it might not match their expectation

1745492212
bw!sid2730@user/betawaffle
a smart compiler can derive some information from those checks, maybe

1745492222
bw!sid2730@user/betawaffle
but that's like best-effort at most

1745492249
bw!sid2730@user/betawaffle
what if a language just allowed you to express that directly

1745492278
bw!sid2730@user/betawaffle
what other units of "programmer intent" could be useful to express in a language

1745492296
bw!sid2730@user/betawaffle
useful in many senses, potentially

1745492307
bw!sid2730@user/betawaffle
like optimizations, readability, ...

1745492331
bw!sid2730@user/betawaffle
but also, at what point do those expressions of intent actually cause harm

1745492339
lemons!~doggie@user/doggie-:49517
so youre asking what new potential constructs a language might have based on common abstractions to existing problems

1745492351
bw!sid2730@user/betawaffle
by making something harder to read, slower to compile (needlessly), etc

1745492368
bw!sid2730@user/betawaffle
lemons: yeah, definitely one goal of my questions

1745492372
lemons!~doggie@user/doggie-:49517
bw: any abstraction causes harm

1745492382
bw!sid2730@user/betawaffle
depending on the context, yes

1745492392
lemons!~doggie@user/doggie-:49517
programming inherently is a tug of war between reusability and performance

1745492412
bw!sid2730@user/betawaffle
but some have a reasonable benefit of a trade off, where others are maybe just needless

1745492478
bw!sid2730@user/betawaffle
i feel like if intent is clear enough, reusability can be improved without necessarily hurting performance (of output, not compilation)

1745492524
bw!sid2730@user/betawaffle
let me give a more complicated example

1745492559
lemons!~doggie@user/doggie-:49517
say, for generics, either the compiler generates code that doubles the size taken (by that function), or inlines checks in it, hurting performance

1745492574
lemons!~doggie@user/doggie-:49517
additionally one way or the other its a perf loss on the compile time itself

1745492588
bw!sid2730@user/betawaffle
imagine in a language you could define the grammar of eg. JSON, without dictating anything about how a user of JSON actually uses JSON

1745492615
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
derived from Hyrum's Law (https://www.hyrumslaw.com/) any intent-conveying constructs will be eventually driven obsolete by some exotic use-case

1745492633
bw!sid2730@user/betawaffle
like you could make a json parsing/encoding library but allow the user to do whatever they want without constraining them to eg. streaming or pre-decode...

1745492847
bw!sid2730@user/betawaffle
and i guess another direction i'm thinking about here is how as a systems programmer, i don't like abstraction

1745492852
bw!sid2730@user/betawaffle
i want to know what's going on

1745492880
lemons!~doggie@user/doggie-:49517
bw: you're still operating within abstraction

1745492899
bw!sid2730@user/betawaffle
i want a clear boundary between "i care about what this does" and "do whatever, as long as it accomplishes my intent"

1745492908
bw!sid2730@user/betawaffle
true, we always are

1745492949
bw!sid2730@user/betawaffle
but like there can be a difference between an opaque abstraction and a transparent one

1745493037
lemons!~doggie@user/doggie-:49517
wdym

1745493060
bw!sid2730@user/betawaffle
like there are abstractions whose goal is to limit what you have to think about, vs. abstractions that try to hide something for the purpose of implementation flexibility

1745493088
bw!sid2730@user/betawaffle
like "don't think about this if you don't need to" vs. "don't think about this, i might change it whenever i feel like"

1745493149
scajanus!~scajanus@user/scajanus
I don't think it is that clear cut, abstractions may achieve those things but they are not necessarily one or the other (and often, both)

1745493162
bw!sid2730@user/betawaffle
that's true too

1745493203
lemons!~doggie@user/doggie-:49517
is there even an example that doesnt to both of these simutaneously?

1745493207
lemons!~doggie@user/doggie-:49517
*do

1745493277
bw!sid2730@user/betawaffle
well, i think it's more about which is the dominant one

1745493611
scajanus!~scajanus@user/scajanus
going back to the original question, I think you need to narrow it down quite a bit and the answer is still going to be "it depends". It comes down to if the design patterns the language enables are a good fit for the problem at hand or not; and some of that is cultural as well.

1745493668
scajanus!~scajanus@user/scajanus
you could use an OO language without the object oriented features, or build a whole class system from scratch in some language that doesn't have it

1745493759
mojo_jojo!~tokamak@user/mojo-jojo:74093
hey folks, have started learning zig. am an intermideate developer... primarily worked in golang. My current plan is to go through ziglings, then read and record the std library, then attempt to solve exercism zig track, and finally attempt the free exercersise of codecrafters for zig... would you recommend any modification or different paths? also its my first time using irc and irssi, just excited about 

1745493765
mojo_jojo!~tokamak@user/mojo-jojo:74093
it!!!

1745494116
lemons!~doggie@user/doggie-:49517
mojo_jojo: gl! and idk i ujst jumped into a proj myself

1745496232
clevor!sid649024@id-649024.hampstead.irccloud.com
I think a clear division of wanting something to heppen in one specific way vs only caring about the result is Rust's map higher-order function vs for loops.

1745496299
clevor!sid649024@id-649024.hampstead.irccloud.com
In theory, the compiler should be able to parallelize the map invocation, but it doesn't.

1745496403
bw!sid2730@user/betawaffle
yeah

1745496425
clevor!sid649024@id-649024.hampstead.irccloud.com
In Haskell, you can choose to use Haskell, or use the C FFI.

1745496714
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: In the Zig docs, `5...100` in a switch statement means `5≤x≤100`. Can I use that inclusive range in a for loop, or do I have to use `5..101`?

1745496803
clevor!sid649024@id-649024.hampstead.irccloud.com
Aww, no.

1745496922
clevor!sid649024@id-649024.hampstead.irccloud.com
So `..` can't be used in switch statements and `...` is exclusive to switch statements.

1745497139
bw!sid2730@user/betawaffle
can an argument be implicitly comptime if its type is comptime-only? like if i do `fn something(foo: type) u32 {}` is it the same as if i did `comptime foo: type`?

1745497176
clevor!sid649024@id-649024.hampstead.irccloud.com
IIRC it is a compile error if it isn't marked comptime.

1745497196
bw!sid2730@user/betawaffle
according to compiler explorer, it is not a compile error :D

1745497230
clevor!sid649024@id-649024.hampstead.irccloud.com
Oh

1745497250
bw!sid2730@user/betawaffle
so my next question is... is a "function body type" (e.g. `fn () T`) an implicit comptime argument or not?

1745511989
lemons!~doggie@user/doggie-:49517
guhhhhh how do i import a dummy export file

1745512074
lemons!~doggie@user/doggie-:49517
context: im trying to run tests in a dll, zig build builds the thing as if it was a dll (all the exports are exported.. duh), but the issue is the dll was designed to run by the byond game engine - not manually

1745512098
lemons!~doggie@user/doggie-:49517
so theres a bunch of externs in there which *compile* fine, but when running tests magically break

1745512140
lemons!~doggie@user/doggie-:49517
(note the tests themselves dont use the extern stuff; ive made sure of that)

1745512193
lemons!~doggie@user/doggie-:49517
ive made a dummy export file which has stubs for all the fns but now im wondering how to actually sub the lib for it 

1745512403
lemons!~doggie@user/doggie-:49517
*import the exports for the externs to import properly

1745520692
lemons!~doggie@user/doggie-:49517
hmm is there a way to signal to the compiler to scan all included files and not just the ones used

1745520726
lemons!~doggie@user/doggie-:49517
or some alternate way i could implement a separate root_test.zig

1745520810
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
lemons: std.testing.refAllDecls will reference everything in a given file

1745521040
lemons!~doggie@user/doggie-:49517
ok that didnt help somehow

1745521072
lemons!~doggie@user/doggie-:49517
tests still arent being picked up even after doing a   const can_pass = std.testing.refAllDecls(@import("collision/can_pass.zig"));

1745521098
lemons!~doggie@user/doggie-:49517
(some tests are directly contained in that file)

1745521111
Gliptic!~glip@2a01:4f8:c012:91f3::1
and where are you doing that

1745521135
Gliptic!~glip@2a01:4f8:c012:91f3::1
it must be in a test

1745521161
lemons!~doggie@user/doggie-:49517
im to import tests in a test block?

1745521197
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1745521238
Gliptic!~glip@2a01:4f8:c012:91f3::1
but recommendation is not to rely on refAllDecls, but import sub-modules in a test block

1745521330
lemons!~doggie@user/doggie-:49517
wdym

1745521349
lemons!~doggie@user/doggie-:49517
@import() files individually?

1745521482
grayhatter!~grayhatte@user/grayhatter
lemons: const thing = @import("thing.zig"); test { _ = &thing; }

1745521528
grayhatter!~grayhatte@user/grayhatter
^ this is required if thing.zig has tests that you want to run

1745521551
grayhatter!~grayhatte@user/grayhatter
zig is very good at excluding test cases

1745521605
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
FWIW, I do add refAllDecls in some cases in library code because I want to be sure that everything compiles even if I didn't test it

1745521660
grayhatter!~grayhatte@user/grayhatter
rockorager: that's why I do it

1745521678
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I even have a test to make sure that all files in a directory have a test named "refAllDecls" haha

1745521685
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
So that i don't forget to add it to new files

1745521696
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
https://github.com/rockorager/libvaxis/blob/6a07aa7e3745d32af79c6cd86f4871910b5e6060/src/vxfw/vxfw.zig#L522-L569

1745521728
grayhatter!~grayhatte@user/grayhatter
I stopped doing that once I added all the files in `examples/` to `zig build test`

1745521735
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
(or that contributors don't forget - mostly this is for CI to help me on PRs)

1745521745
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Oh that's a good idea

1745521752
grayhatter!~grayhatte@user/grayhatter
rockorager: that's horrifying

1745521783
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah it is

1745521790
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
parse the zig file and find the test names

1745521795
lemons!~doggie@user/doggie-:49517
honestly i'd rather it just reuse root.zig but that one crashes with a linker issue if not ran through the engine it was built for

1745521801
lemons!~doggie@user/doggie-:49517
tests included

1745521905
lemons!~doggie@user/doggie-:49517
ughhhhh why must tests not run in its own isolated vacuum

1745522055
grayhatter!~grayhatte@user/grayhatter
lemons: they pretty much do, what do you mean?

1745522141
lemons!~doggie@user/doggie-:49517
grayhatter: exports still export and that happening causes my dll to be built with reliance on extern shit (which i cant* provide)

1745522199
grayhatter!~grayhatte@user/grayhatter
exports still export, and that causes the dll to build with an extern dependency

1745522201
lemons!~doggie@user/doggie-:49517
and thus crashes whenever i try to run it

1745522230
grayhatter!~grayhatte@user/grayhatter
I don't understand why you think tests are connected to that

1745522252
grayhatter!~grayhatte@user/grayhatter
is your code published anywhere?

1745522271
lemons!~doggie@user/doggie-:49517
https://github.com/sanguina-ss13/sanguina-lib iirc

1745522277
lemons!~doggie@user/doggie-:49517
tho i didnt push some changes so wait a sec

1745522289
Gliptic!~glip@2a01:4f8:c012:91f3::1
`a`

1745522406
grayhatter!~grayhatte@user/grayhatter
`hhhhh`

1745522425
grayhatter!~grayhatte@user/grayhatter
> get fucked future me!

1745522436
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't understand why exporting things make anything crash

1745522460
lemons!~doggie@user/doggie-:49517
Gliptic: heres b

1745522467
Gliptic!~glip@2a01:4f8:c012:91f3::1
`b`

1745522495
lemons!~doggie@user/doggie-:49517
zig build test to error on symbol cantprovides

1745522569
lemons!~doggie@user/doggie-:49517
grayhatter: in my defense the commits clump together too much random shit to be labeled sanely

1745522591
grayhatter!~grayhatte@user/grayhatter
> in my defense [describes something way way worse]

1745522608
grayhatter!~grayhatte@user/grayhatter
> I know I punched him, but in my defense, I killed him before that

1745522624
lemons!~doggie@user/doggie-:49517
:3

1745522657
grayhatter!~grayhatte@user/grayhatter
lemons: there's no tests in root.zig so I don't know why it's crashing when you try to run tests

1745522680
Gliptic!~glip@2a01:4f8:c012:91f3::1
he's running tests in collision/can_pass.zig

1745522686
lemons!~doggie@user/doggie-:49517
^

1745522695
Gliptic!~glip@2a01:4f8:c012:91f3::1
but still, why does that crash

1745522717
grayhatter!~grayhatte@user/grayhatter
he's not

1745522723
grayhatter!~grayhatte@user/grayhatter
unless you mean with `zig test`

1745522735
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: well, that code isn't pushed

1745522743
Gliptic!~glip@2a01:4f8:c012:91f3::1
I just hacked his computer

1745522745
Gliptic!~glip@2a01:4f8:c012:91f3::1
reading it now

1745522757
lemons!~doggie@user/doggie-:49517
grayhatter: so in short, the exported fns make heavy use of the byondapi c.. api; most of the functions there are marked extern and to be provided by, well byond (when it runs said dll)

1745522769
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, extern, not export

1745522773
Gliptic!~glip@2a01:4f8:c012:91f3::1
that makes 200% more sense

1745522787
Gliptic!~glip@2a01:4f8:c012:91f3::1
although it should still fail at link time

1745522790
lemons!~doggie@user/doggie-:49517
im running it by hand- bruh i did say extern 

1745522803
grayhatter!~grayhatte@user/grayhatter
you're running **what** by hand?

1745522807
Gliptic!~glip@2a01:4f8:c012:91f3::1
you did not

1745522829
lemons!~doggie@user/doggie-:49517
im running it by "zig build test"

1745522834
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's not "by hand"

1745522843
lemons!~doggie@user/doggie-:49517
shhhhhh take the meaning not the wording

1745522849
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't know what it means

1745522860
Gliptic!~glip@2a01:4f8:c012:91f3::1
what could be less "by hand" than that

1745522906
lemons!~doggie@user/doggie-:49517
so anyways how fix

1745522913
grayhatter!~grayhatte@user/grayhatter
Gliptic: pushing to github CI?

1745522948
Gliptic!~glip@2a01:4f8:c012:91f3::1
CI/actions doesn't seem to be set up

1745522956
grayhatter!~grayhatte@user/grayhatter
lemons: you have yet to describe the actual error/issue, and previously you said export when you meant to say extern, two very different concepts

1745522993
grayhatter!~grayhatte@user/grayhatter
but sadly, I'm not a mind reader, and unlike Gliptic, I haven't hacked your computer yet...

1745522994
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you're not linking a .dll that provides necessary symbols, why don't you get a linker error

1745523066
lemons!~doggie@user/doggie-:49517
grayhatter: the issue is, when running the zig build test command, i get spammed with "error: ld.lld: undefined symbol: ByondValue_SetStr"

1745523068
Gliptic!~glip@2a01:4f8:c012:91f3::1
and no, "it crashes" doesn't effectively communicate that `zig build test` gives you a linker error if that's the case

1745523076
Gliptic!~glip@2a01:4f8:c012:91f3::1
ok, so that was the case

1745523077
lemons!~doggie@user/doggie-:49517
i want to not be spammed with these

1745523097
grayhatter!~grayhatte@user/grayhatter
you're running a test that calls into the dll, https://github.com/Sanguina-SS13/sanguina-lib/blob/master/src/collision/can_pass.zig#L147

1745523107
Gliptic!~glip@2a01:4f8:c012:91f3::1
so don't call any code that relies on that library

1745523108
grayhatter!~grayhatte@user/grayhatter
what did you expect to happen if you don't provide the dll?

1745523118
Gliptic!~glip@2a01:4f8:c012:91f3::1
or reference

1745523148
Gliptic!~glip@2a01:4f8:c012:91f3::1
using refAllDecls is kind of counter to that goal

1745523152
lemons!~doggie@user/doggie-:49517
grayhatter: getNumber constructs the struct by hand without relying on extern functions

1745523187
lemons!~doggie@user/doggie-:49517
do note there is a separation between _byondapi_raw.zig (the extern fns file) and _byondapi.zig (my wrapper around it)

1745523198
grayhatter!~grayhatte@user/grayhatter
oh, that's so much worse than I thought

1745523219
grayhatter!~grayhatte@user/grayhatter
I assumed bapi didn't mean 2 different things

1745523233
lemons!~doggie@user/doggie-:49517
i made it so you dont access the raw header by hand

1745523254
lemons!~doggie@user/doggie-:49517
so no, to the end user it doesnt

1745523264
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: and you probably haven't seen test_dummy.zig yet

1745523279
lemons!~doggie@user/doggie-:49517
yeah that was my attempt at providing these externs

1745523289
lemons!~doggie@user/doggie-:49517
only issue: i have no idea what im doing

1745523341
grayhatter!~grayhatte@user/grayhatter
so... what error is preventing you from running the tests?

1745523415
lemons!~doggie@user/doggie-:49517
the.. one i've listed before?

1745523462
grayhatter!~grayhatte@user/grayhatter
how long ago? I haven't memorized all of #zig yet

1745523473
lemons!~doggie@user/doggie-:49517
given these dont specifically say *where* the linker error occurs, my conjecture is that the exports in root.zig are still exporting the functions that DO make heavy use of the extern fns

1745523511
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you get "spammed" with `undefined symbol: ByondValue_SetStr` it means you're referencing a function that uses that, indirectly or via refAllDecls

1745523543
lemons!~doggie@user/doggie-:49517
so much i've figured yes

1745523561
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you don't want the exports to happen, don't reference the model with the exports

1745523565
grayhatter!~grayhatte@user/grayhatter
you can't use refAllDecls, if you're not gonna provide the extern decls

1745523571
Gliptic!~glip@2a01:4f8:c012:91f3::1
*module

1745523600
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm guessing exports will happen as soon as the module is loaded

1745523616
grayhatter!~grayhatte@user/grayhatter
`pub extern fn` means I promise this function will exist before you need it

1745523634
grayhatter!~grayhatte@user/grayhatter
then you run test { _ = giveMeAllFunctions() }

1745523646
lemons!~doggie@user/doggie-:49517
Gliptic: "if you dont want the expo..." that's what i was trying to do with root_test.zig yes

1745523668
Gliptic!~glip@2a01:4f8:c012:91f3::1
lemons: refAllDecls is... not how do you do that

1745523693
lemons!~doggie@user/doggie-:49517
as ive said, no clue what im doing

1745523738
lemons!~doggie@user/doggie-:49517
frankly at this point i just want to move on to debugging tests instead of debugging the test runner 

1745523781
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you have tests only in can_pass.zig and find_free_space.zig, why do you do refAllDecls

1745523797
grayhatter!~grayhatte@user/grayhatter
lemons: have you tried running just test "main" { try std.testing.expect(true); }

1745523800
grayhatter!~grayhatte@user/grayhatter
with nothing else?

1745523829
Gliptic!~glip@2a01:4f8:c012:91f3::1
in fact, I can only find tests in can_pass.zig

1745523842
Gliptic!~glip@2a01:4f8:c012:91f3::1
so, why all the complications?

1745523847
Gliptic!~glip@2a01:4f8:c012:91f3::1
import the module with the tests, done

1745523865
lemons!~doggie@user/doggie-:49517
Gliptic: oh yeah i didnt finish the find_free_floor ones did i

1745523876
grayhatter!~grayhatte@user/grayhatter
lol

1745523879
lemons!~doggie@user/doggie-:49517
was supposed to have some too 

1745523880
grayhatter!~grayhatte@user/grayhatter
good luck Gliptic 

1745523917
Gliptic!~glip@2a01:4f8:c012:91f3::1
lemons: I logged off from your computer (after deleting all traces), so I can't tell

1745523939
lemons!~doggie@user/doggie-:49517
as for why im not *just* including the files by hand, i dont want to run into a scenario where some test doesnt run because i forgot about it

1745523977
Gliptic!~glip@2a01:4f8:c012:91f3::1
this isn't accomplishing that either

1745523998
grayhatter!~grayhatte@user/grayhatter
strictly speaking, that's better then being completely unable to run tests

1745524000
Gliptic!~glip@2a01:4f8:c012:91f3::1
but you can't have it both reference all modules and not reference all modules

1745524051
lemons!~doggie@user/doggie-:49517
right

1745524059
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you do _ = @import("collision/can_pass.zig"); does it build?

1745524062
grayhatter!~grayhatte@user/grayhatter
you're also trying to run tests without providing **required** external libs... 

1745524066
lemons!~doggie@user/doggie-:49517
if i do it in where

1745524080
Gliptic!~glip@2a01:4f8:c012:91f3::1
in the test block

1745524083
grayhatter!~grayhatte@user/grayhatter
also, you shouldn't use global/_global.zig

1745524090
Gliptic!~glip@2a01:4f8:c012:91f3::1
called "fuck"

1745524110
grayhatter!~grayhatte@user/grayhatter
it's global.zig and @import("global/core.zig");

1745524129
lemons!~doggie@user/doggie-:49517
grayhatter: **the libs are provided by the game engine im building this dll for, i dont have a file for them**

1745524154
Gliptic!~glip@2a01:4f8:c012:91f3::1
how do you plan to build it then

1745524174
lemons!~doggie@user/doggie-:49517
externs i mean

1745524176
lemons!~doggie@user/doggie-:49517
fuck

1745524178
grayhatter!~grayhatte@user/grayhatter
Gliptic: dynamic lib loading is common in games

1745524188
grayhatter!~grayhatte@user/grayhatter
game engines*

1745524195
grayhatter!~grayhatte@user/grayhatter
:vomit:

1745524211
lemons!~doggie@user/doggie-:49517
what i have on hand is byondapi.h, and nothing else

1745524212
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: yes, but the exports in his lib depends on externs from this other lib, so how will he build his lib without the .lib or whatever for the other lib

1745524228
grayhatter!~grayhatte@user/grayhatter
Gliptic: the same way you build any lib?

1745524247
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: but he can't when he can't link the externs

1745524253
lemons!~doggie@user/doggie-:49517
everything else is provided when  call_ext("my_cool_library", "my_cool_function")(args)

1745524260
lemons!~doggie@user/doggie-:49517
*when i

1745524268
lemons!~doggie@user/doggie-:49517
**from inside the game engine

1745524291
grayhatter!~grayhatte@user/grayhatter
https://srctree.gr.ht/repo/obZig-plugin/blob/src/obs/frontend.zig obs loads the plugin, which already has these references available 

1745524387
lemons!~doggie@user/doggie-:49517
well anyways i take it there isnt some magic "crawl through the codebase and include all tests (+ whatever they rely on)" i could (ab)use

1745524422
grayhatter!~grayhatte@user/grayhatter
lemons: no, not the way you need to write your code

1745524454
lemons!~doggie@user/doggie-:49517
how do you suggest i *should* write my code then

1745524566
grayhatter!~grayhatte@user/grayhatter
I suggest you write a test for each function you want to test and in root.zig you write const thing = @import("thing.zig"); test "root" { _ = &thing; }

1745524600
grayhatter!~grayhatte@user/grayhatter
which is exactly what I said nearly an hour ago

1745524638
lemons!~doggie@user/doggie-:49517
i guess

1745524688
grayhatter!~grayhatte@user/grayhatter
you're writing a lib where you don't get to control the build system, you have to write code that follows their rules

1745524700
grayhatter!~grayhatte@user/grayhatter
which means you have to write a testing system that *also* follows those rules

1745536026
SultansOfCode!~SultansOf@user/SultansOfCode
My function receives an anytype argument, how can I save it into a variable to use later?

1745537009
bblack!~bblack@wikimedia/bblack-WMF
SultansOfCode: it depends a lot on what "to use later" means, specifically.  generally anytype is more of a compile-time feature.  at runtime, the types are known based on what type actually arrived, and you can do conditionals on the type to handle different cases (or use it with other anytype-accepting functions)

1745537059
bblack!~bblack@wikimedia/bblack-WMF
or you could think of "anytype" as a generic programming construct that will result in multiple specialized versions of the function as/if neccesary when compiled.

1745537065
bblack!~bblack@wikimedia/bblack-WMF
https://ziglang.org/documentation/master/#Function-Parameter-Type-Inference

1745537126
bblack!~bblack@wikimedia/bblack-WMF
there is no RTTI in zig, to be clear.

1745537244
bblack!~bblack@wikimedia/bblack-WMF
using their example from the link, if you declare: fn addFortyTwo(x: anytype) @TypeOf(x) { return x + 42; }

1745537346
bblack!~bblack@wikimedia/bblack-WMF
and your code ends up calling it from somewhere with a u64 argument, and somewhere else with an i32 argument, things end up working out as-if you had defined two separate functions: "addFortyTwo_u64(x: u64) u64 { return x + 42; }" and "addFortyTwo_i32(x: i32) i32 { return x + 42; }"

1745537483
SultansOfCode!~SultansOf@user/SultansOfCode
bblack: I am making a game and I have a scene manager, with transitions. When I want to switch between scenes, I pass the new scene I want and an .{ .arg0: ..., .arg1: ... } that is the new scene initialization parameters to the SceneManager.transition

1745537497
SultansOfCode!~SultansOf@user/SultansOfCode
When it fades out, it unloads previous scene and initializes the newq scene

1745537507
SultansOfCode!~SultansOf@user/SultansOfCode
I want to pass this saved argument to the new scene's initialization

