1738461393
coleman!~coleman@static.87.86.161.5.clients.your-server.de
What's this @ syntax mean? https://github.com/ziglang/zig/pull/22458/files#diff-ab7384310a623b1845d2013b68374070ab590b1cc82d786e188fadc3f70ccda5R13

1738461416
coleman!~coleman@static.87.86.161.5.clients.your-server.de
is it just to turn "5" into a valid module identifier ?

1738461488
grayhatter!~grayhatte@user/grayhatter
coleman: yeah pretty much that, you can use it anywhere, where it makes sense to use a name/word/token that's otherwise not allowed there

1738461580
coleman!~coleman@static.87.86.161.5.clients.your-server.de
That's cool. Perhaps a source of mischief.

1738462135
dsal!sid13060@id-13060.lymington.irccloud.com
Does anyone have an example of MultiArrayList?  I'm having an annoying time with it.  In particular, I'm kind of surprised I can't iterate it.

1738462137
torque!~tachyon@user/torque
the technical term, in theory, is stropping https://en.wikipedia.org/wiki/Stropping_(syntax)

1738462293
torque!~tachyon@user/torque
you can iterate over the items

1738462315
torque!~tachyon@user/torque
for (mar.items(.field_a), mar.items(.field_b) |a, b| {...}

1738462322
torque!~tachyon@user/torque
er, plus a ) I left out

1738462337
dsal!sid13060@id-13060.lymington.irccloud.com
I want all the fields.  It says there's .slice() which isn't iterable.

1738462384
torque!~tachyon@user/torque
if you want all the fields then you iterate over them with a compound for like above (you can use .slice first and then call .items on that which I guess may be more efficient)

1738462435
torque!~tachyon@user/torque
the whole point of multiarraylist is that it stores each field in an array

1738462465
torque!~tachyon@user/torque
you could write an iterator function over it if you wanted, but at that point you'd probably be better with with an array of structs design than an soa design

1738462465
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, I just want to treat it like a regular array list.

1738462484
torque!~tachyon@user/torque
better off with

1738462502
grayhatter!~grayhatte@user/grayhatter
dsal: then why are you using a multi array list?

1738462515
dsal!sid13060@id-13060.lymington.irccloud.com
Presumably it's a more efficient memory layout.

1738462539
grayhatter!~grayhatte@user/grayhatter
do you know that it does, or are you assuming it might?

1738462549
dsal!sid13060@id-13060.lymington.irccloud.com
The latter.

1738462569
grayhatter!~grayhatte@user/grayhatter
switch back to a normal array list

1738462578
dsal!sid13060@id-13060.lymington.irccloud.com
heh, then I won't learn anything.  :)

1738462581
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
if your usage pattern is to iterate and access multiple fields on the type you might be better off with a standard arraylist

1738462592
grayhatter!~grayhatte@user/grayhatter
it's faster, and more space efficent for a few uses cases but slower for others

1738462624
grayhatter!~grayhatte@user/grayhatter
dsal: did you watch ark's video on data orieted design?

1738462650
grayhatter!~grayhatte@user/grayhatter
data oriented design?

1738462674
dsal!sid13060@id-13060.lymington.irccloud.com
I'm also having trouble calling deinitâ€¦    `var r = std.MultiArrayList(T){};  errdefer r.deinit(alloc);` complains that I'm discarding a pointer to a const thing.

1738462685
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, that talk is how I found out about this hting.

1738462694
dsal!sid13060@id-13060.lymington.irccloud.com
I'm poking around in various areas I don't understand.

1738462704
grayhatter!~grayhatte@user/grayhatter
does how you want to access your data match that usage closely? 

1738462720
Affliction!affliction@idlerpg/player/affliction
Yeah, MultiArrayList is more for "I have a bunch of fields, but most of my loops only look at one or a few fields." Gets better cache locality (and eliminates padding overhead)

1738462799
dsal!sid13060@id-13060.lymington.irccloud.com
I figure the padding overhead is potentially a problem, but I'm mostly just trying to figure out how things work.

1738462820
torque!~tachyon@user/torque
how many items are you expecting to put in this array????

1738462830
torque!~tachyon@user/torque
gigabytes worth of memory?

1738462838
grayhatter!~grayhatte@user/grayhatter
dsal: multiarraylist is actually probably slower for how you're using it

1738462867
dsal!sid13060@id-13060.lymington.irccloud.com
I don't have a good estimate at the moment.  It's something like 10Hz of telemetry from video streams.

1738462879
Affliction!affliction@idlerpg/player/affliction
Though trading off time for memory might still be valid, if you really do have a huge array and your structs have lots of padding.

1738462899
mischief!~mischief@2601:646:100:1688::c0ca:c01a
coleman: a source of me?

1738462899
dsal!sid13060@id-13060.lymington.irccloud.com
I'm not really concerned about faster or slower at the moment.  It's more like "how could I use this?" and not "is this the right thing?"

1738462924
coleman!~coleman@static.87.86.161.5.clients.your-server.de
:-P

1738462959
grayhatter!~grayhatte@user/grayhatter
dsal: I mean, you could write code without using any `var`s not sure I'd agree that's a good way to learn something

1738463020
grayhatter!~grayhatte@user/grayhatter
but, if you paste your code somewhere, it'd be easier to take a look at it, and offer suggestions on how to iterate it

1738463060
dsal!sid13060@id-13060.lymington.irccloud.com
I'm iterating it with 0..len and get.  Right now, I'm a bit confused by why I can't deinit in the example above.

1738463085
torque!~tachyon@user/torque
if you posted the actual error message rather than the cliffs notes, it would probably help

1738463094
grayhatter!~grayhatte@user/grayhatter
^ this

1738463104
dsal!sid13060@id-13060.lymington.irccloud.com
src/gpmf-to-kml.zig:23:20: error: expected type '*multi_array_list.MultiArrayList(tstream.GPSReading)', found '*const multi_array_list.MultiArrayList(tstream.GPSReading)'

1738463116
grayhatter!~grayhatte@user/grayhatter
you can't get a const discard from deinit

1738463143
dsal!sid13060@id-13060.lymington.irccloud.com
I believe the message, I just don't know where the const is coming from.

1738463158
torque!~tachyon@user/torque
seems like you declared it `const` rather than `var`, somewhere

1738463171
grayhatter!~grayhatte@user/grayhatter
the error you have isn't possible from the code you've described

1738463176
dsal!sid13060@id-13060.lymington.irccloud.com
`        var r = std.MultiArrayList(GPSReading){};   errdefer r.deinit(alloc);`

1738463180
grayhatter!~grayhatte@user/grayhatter
which is why I'm looking for a paste

1738463182
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, that's why I find it confusing.

1738463238
torque!~tachyon@user/torque
you're using 0.13?

1738463255
dsal!sid13060@id-13060.lymington.irccloud.com
OK, I think I figured it out.  I've got two of these things and have been getting alternating errors between them.  Was looking at the wrong one for this error message.  *sigh*

1738463260
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, this is 0.13.0

1738463268
grayhatter!~grayhatte@user/grayhatter
lol

1738463272
grayhatter!~grayhatte@user/grayhatter
been there

1738463294
grayhatter!~grayhatte@user/grayhatter
still happy to quack at you :D

1738463335
dsal!sid13060@id-13060.lymington.irccloud.com
haha.  Sorry.  I think I've figured out all the various dumb things here.  Now I can move on to deciding whether this is a good idea in the first place.

1738463869
dsal!sid13060@id-13060.lymington.irccloud.com
Cool, now I'm using both.  Regular ArrayList is certainly easier.

1738478114
dsal!sid13060@id-13060.lymington.irccloud.com
I came up with this XML encoding thing where I have a Tag type that has a couple functions for start and I'd defer the end.  I was nesting scopes to let me build out stuff within these tags.  I'm trying out cursor and it not only picked up on my pattern and my weird names for XML tags ("immediate" for a tag that's auto-closed with a fmt string and args), but it also knew I was writing KML and automatically prepared blocks for me.

1738478119
dsal!sid13060@id-13060.lymington.irccloud.com
Kind of dark magic.

1738478198
dsal!sid13060@id-13060.lymington.irccloud.com
(though I really wish I had closures and could write `{ defer block("thing", .{})(); immediate("foo", "bar"); }` to get  `<thing><foo>bar</foo></thing>`

1738478232
dsal!sid13060@id-13060.lymington.irccloud.com
I have to do the tag container in three lines.

1738478878
dsal!sid13060@id-13060.lymington.irccloud.com
I did end up only using a couple fields from that MultiArrayList, so that's neat.  I don't know if it helped, but I've learned a ton of zig today between this all the weird reflection stuff for building arbitraries for property testing.

1738483944
tsujp!497e1f7b6a@sourcehut/user/tsujp
zig doesn't have modular exponentiation on big ints in stdlib right?

1738485380
tsujp!497e1f7b6a@sourcehut/user/tsujp
its weird I see bits of this stuff in stdlib but nothing that (to me) looks like fast exponentiation _with_ a modulo.. so I guess I need to implement it myself

1738488815
sskras!sid542048@id-542048.tinside.irccloud.com
hello channel

1738488896
sskras!sid542048@id-542048.tinside.irccloud.com
what should I import if any to follow this example: https://stackoverflow.com/questions/13098620/using-stat-to-check-if-a-file-is-executable-in-c/13098645#13098645 , please?

1738488964
sskras!sid542048@id-542048.tinside.irccloud.com
I mean the stat(2) call.

1738494587
tsujp!497e1f7b6a@sourcehut/user/tsujp
how is function llpow in https://ziglang.org/documentation/master/std/#src/std/math/big/int.zig checking "Square the result if the current bit is zero", I don't see any such check it just does it

1738496273
tsujp!497e1f7b6a@sourcehut/user/tsujp
okay so 0.01391700ms crude benchmark to do correct modular exponentiation for 0xff to the power of 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff modulo that same number

1738496287
tsujp!497e1f7b6a@sourcehut/user/tsujp
where that big hex is a u256's max value

1738496896
tsujp!497e1f7b6a@sourcehut/user/tsujp
stdlib crypto.ff.Modulus with side_channels_mitigations set to .none takes 0.21ms about 15 times slower, and it can't even do a real modulus u256 because of _something_

1738496907
tsujp!497e1f7b6a@sourcehut/user/tsujp
these are crude benchmarks I might add but.. neat..?

1738518003
reykjalin!7e28cf3a41@user/reykjalin
can I add a function to a type I've aliased? I'm working on a text editor and have a struct `Range` to represent two arbitrary points in the text. This is effectively a selection so I've aliased this type as a `Selection`: `const Selection = Range;`. While the underlying data is precisely the same there's a semantic difference so I was wondering if there's a way to add a function to `Selection` that doesn't exist in `Range` without making a new struct?

1738518040
torque!~tachyon@user/torque
no

1738518049
reykjalin!7e28cf3a41@user/reykjalin
all right, good to know, thanks!

1738518970
hadronized!~hadronize@2001:41d0:a:fe76::1
reykjalin: you can still make that a free function, though, no?

1738519065
reykjalin!7e28cf3a41@user/reykjalin
oh yeah, absolutely. I can even put it in the `Range` struct. It was mostly a thought of the interfaces making semantic sense. For example, if a `Selection` is empty it's basically a cursor, so `isCursor` makes sense. But an arbitrary `Range` isn't necessarily a `Selection` so it doesn't really make sense for a `Range` to have an `isCursor` method. Instead I'd call that `isEmpty`.

1738519083
reykjalin!7e28cf3a41@user/reykjalin
Again; semantic differences that would be nice to express in the types themselves, but not really a big deal

1738519142
reykjalin!7e28cf3a41@user/reykjalin
an you're also right in that I could make a free standing function like `isSelectionACursor(a: Selection, b: Selection)` and that would make just as much sense, even if it's a little more verbose

1738519148
reykjalin!7e28cf3a41@user/reykjalin
s/an/and

1738529045
avallee!uid686632@user/avallee
I'm working with an API that requires some specific error handling. That involves checking the return code + some bookkeeping. Basically every call to this API has to follow the same boilerplate. In C I could write a macro to wrap my calls to this API, but what would be the idiomatic way in Zig?

1738529184
avallee!uid686632@user/avallee
I would like to not have to write a specific input preparation & error handling for each function of the API of course

1738530286
grayhatter!~grayhatte@user/grayhatter
avallee: that's hard to answer in the generic, do you have example c code to look at? 

1738530310
grayhatter!~grayhatte@user/grayhatter
otherwise std.posix wraps a number of C APIs, and that sounds close to what you're describing

1738530479
grayhatter!~grayhatte@user/grayhatter
there's probably a way to write a comptime function to generate this boilerplate for you, but again, would need an example of what bookkeeping you need to write/manage

1738531355
avallee!uid686632@user/avallee
 I've just seen @call that seems promising, as well as any type for the args. Essentially I just need to perform some actions before calling the function a and some after. essentially swapping endianness before and error checking after

1738531679
avallee!uid686632@user/avallee
okay I managed to do it with @call, anytype and a type param... that was shockingly easy

