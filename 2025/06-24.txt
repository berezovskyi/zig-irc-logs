1750731360
kkHAIKE!~kkHAIKE@222.191.254.54
andrewrk: The [SIMD TodoList](https://github.com/ziglang/zig/issues/903#issuecomment-459508820) hasnâ€™t been updated for a long time. Is there a more recent version available somewhere?

1750731450
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
kiedtl: I guess I more meant, why use it instead of .pos

1750736209
kiedtl!~cot@kisslinux/kiedtl
Ah. Could be oversight? stdlib does have redundant methods sometimes

1750741575
torque!~tachyon@user/torque
if you look at the source, `getPos` is defined for the SeekableStream interface

1750741615
torque!~tachyon@user/torque
if you're just using a bare FixedBufferStream then you can access .pos directly

1750770073
kkHAIKE!~kkHAIKE@114.225.48.21
?

1750771235
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
torque: ah, thanks. I looked at the source of getPos itself but that was it ðŸ˜…

1750792348
andrewrk!~andrewrk@mail.ziglang.org
norineko: re: table driven tests: this is exactly what I was referring to earlier when I said it's generally better to have each case be a different function call rather than in a loop

1750794725
norineko!~norineko@user/norineko
Yeah the solution I came up with was to just catch errors and print the inputs to the test function. Mainly because this is just a sniff test to ensure that my program can handle some known passing/failing inputs

1750794789
norineko!~norineko@user/norineko
codegen is also much nicer than I originally expected because I can just import the file that contains the table and parse the results directly.

1750795081
andrewrk!~andrewrk@mail.ziglang.org
well you don't need to catch errors and print the inputs if you do my suggestion

1750795097
andrewrk!~andrewrk@mail.ziglang.org
that's why it's nice!

1750795119
andrewrk!~andrewrk@mail.ziglang.org
btw are you a japanese speaker?

1750795248
norineko!~norineko@user/norineko
sadly no, I tried to study it but my brain is too full of mandarin and I kept getting things crossed with the kanji or the grammar

1750796257
norineko!~norineko@user/norineko
andrewrk: I guess I'm a little confused about what you mean with each case be a different function call? like rather than for(tests) |t| try testFunc(t) do try testFunc(case1); try testFunc(case2)...?

1750796360
andrewrk!~andrewrk@mail.ziglang.org
yes, for example: https://github.com/ziglang/zig/blob/0.14.1/lib/std/zig/parser_test.zig

1750796393
andrewrk!~andrewrk@mail.ziglang.org
or https://github.com/ziglang/zig/blob/0.14.1/lib/std/math/sqrt.zig#L65-L77

1750796425
andrewrk!~andrewrk@mail.ziglang.org
if a test fails the stack trace will point to it

1750796455
norineko!~norineko@user/norineko
ah, so manually unrolling the test cases. I think it's good in the case where tests are not e.x cartesian product or permutations

1750800622
andrewrk!~andrewrk@mail.ziglang.org
in such case, fuzzing is probably a better approach

