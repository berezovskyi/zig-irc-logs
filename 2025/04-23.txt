1745394298
sunflr!~sunflr@user/sunflr
how can i pass a value by reference to a function i made and use the referenced value for another function inside my function?

1745394438
lemons!~doggie@user/doggie-:49517
sunflr: funkykong(&some_stuff_we_care_about)

1745394571
lemons!~doggie@user/doggie-:49517
on that note, can someone look over my root and tell me why my tests scream about a missing module

1745394584
lemons!~doggie@user/doggie-:49517
https://github.com/sanguina-ss13/sanguina-lib

1745394793
lemons!~doggie@user/doggie-:49517
also ig just how to run tests in general

1745397437
lemons!~doggie@user/doggie-:49517
necro from earlier cuz i lost connection for a bit n dk if i got an answer; why do my tests not run when doing zig test build.zig, and comp error when ran manually

1745397451
lemons!~doggie@user/doggie-:49517
https://github.com/sanguina-ss13/sanguina-lib 

1745397682
Gliptic!~glip@2a01:4f8:c012:91f3::1
what error?

1745397724
Gliptic!~glip@2a01:4f8:c012:91f3::1
also, zig test build.zig would try to run tests that are in build.zig, of which there are none

1745397775
Gliptic!~glip@2a01:4f8:c012:91f3::1
you have defined the test step to run the tests, so "zig build test"

1745399507
lemons!~doggie@user/doggie-:49517
Gliptic: oh

1745400020
lemons!~doggie@user/doggie-:49517
another question then, if i have an union of two structs, is there any convenient way of casting these structs into said union

1745400047
lemons!~doggie@user/doggie-:49517
besides NewUnion{ .Thing = casted }

1745403110
sunflr!~sunflr@user/sunflr
if i do something like fn myFn(bwa: *u8) { myFnTwo(bwa) } will the function inside myFn look like myFnTwo(&bwa)?

1745403339
Gliptic!~glip@2a01:4f8:c012:91f3::1
lemons, that's not a cast, it's creating the union value. And you can shorten it a bit to .{ .Thing = ... } when the type is known from context

1745403375
Gliptic!~glip@2a01:4f8:c012:91f3::1
but otherwise there's no redundant information there, so it can't be any shorter

1745403763
lemons!~doggie@user/doggie-:49517
Gliptic: missed a message, what did ya say

1745403998
sunflr!~sunflr@user/sunflr
> lemons, that's not a cast, it's creating the union value. And you can shorten it a bit to .{ .Thing = ... } when the type is known from context

1745404003
sunflr!~sunflr@user/sunflr
quoting

1745404022
lemons!~doggie@user/doggie-:49517
sunflr: ah, aig. also cheers

1745404370
lemons!~doggie@user/doggie-:49517
bloody hell the internet here sucks

1745404416
lemons!~doggie@user/doggie-:49517
ok, how do i mem.eql unions

1745404433
lemons!~doggie@user/doggie-:49517
*(extern) structs containing (untagged) unions

1745404478
lemons!~doggie@user/doggie-:49517
im trying to expectEqualSlices but it doesnt like the data i pass to it one bit

1745404826
lemons!~doggie@user/doggie-:49517
exact type be damned but the faulty part of it is 

1745404829
lemons!~doggie@user/doggie-:49517
pub const CByondValue = extern struct {

1745404831
lemons!~doggie@user/doggie-:49517
    type: ByondValueType,

1745404833
lemons!~doggie@user/doggie-:49517
    junk1: u1c = undefined,

1745404836
clevor!sid649024@id-649024.hampstead.irccloud.com
sunflr: I would assume so since LLVM is probably smart enough to inline it. If it doesn't, you can slap `inline` in there.

1745404836
lemons!~doggie@user/doggie-:49517
    junk2: u1c = undefined,

1745404837
lemons!~doggie@user/doggie-:49517
    junk3: u1c = undefined,

1745404839
lemons!~doggie@user/doggie-:49517
    data: extern union {

1745404841
lemons!~doggie@user/doggie-:49517
        ref: u4c,

1745404843
lemons!~doggie@user/doggie-:49517
        num: f32,

1745404845
lemons!~doggie@user/doggie-:49517
    },

1745404847
lemons!~doggie@user/doggie-:49517
};

1745404863
clevor!sid649024@id-649024.hampstead.irccloud.com
It's probably best to use a pastebin for that.

1745404870
lemons!~doggie@user/doggie-:49517
fair

1745404887
sunflr!~sunflr@user/sunflr
clevor: i was just quoting Gliptic but ic

1745404917
clevor!sid649024@id-649024.hampstead.irccloud.com
It was the myFn question.

1745404956
sunflr!~sunflr@user/sunflr
a

1745404979
sunflr!~sunflr@user/sunflr
uhh

1745404992
sunflr!~sunflr@user/sunflr
right

1745405054
sunflr!~sunflr@user/sunflr
i think it said there was an error whether i put the ampersand in myFnTwo like myFnTwo(&bwa)

1745405059
sunflr!~sunflr@user/sunflr
inside of myFn

1745405084
sunflr!~sunflr@user/sunflr
i think i'm really tired

1745405135
Gliptic!~glip@2a01:4f8:c012:91f3::1
sunflr, if bwa is *u8, what would the type of &bwa be?

1745405174
sunflr!~sunflr@user/sunflr
uhhhhh

1745405187
sunflr!~sunflr@user/sunflr
last time i tried that it said *const *u8 i think

1745405199
Gliptic!~glip@2a01:4f8:c012:91f3::1
correct

1745405221
Gliptic!~glip@2a01:4f8:c012:91f3::1
and what's the type of the parameter of myFnTwo?

1745405227
sunflr!~sunflr@user/sunflr
so it's referencing a pointer then

1745405231
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1745405244
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's a pointer to const pointer to u8

1745405254
sunflr!~sunflr@user/sunflr
ah

1745405284
sunflr!~sunflr@user/sunflr
maybe some other error happened at first but i didn't get that bwa was already a pointer

1745405291
sunflr!~sunflr@user/sunflr
because myFnTwo is a function

1745405298
sunflr!~sunflr@user/sunflr
just nevermind

1745405381
Gliptic!~glip@2a01:4f8:c012:91f3::1
that bwa is already a pointer isn't an error

1745405402
Gliptic!~glip@2a01:4f8:c012:91f3::1
pointers to pointers are perfectly legitimate

1745405424
sunflr!~sunflr@user/sunflr
the function wasn't happy with that i mean

1745405442
Gliptic!~glip@2a01:4f8:c012:91f3::1
sure, the function doesn't take a pointer to pointer

1745412077
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Build error with a c library: https://zigbin.io/7b00e7

1745412103
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://liblo.sourceforge.net/docs/group__liblo.html#gaa4a314562b09e2fd00749a5d0b4d0955

1745412140
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/osc/item/src/osc.zig#L202

1745412155
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
error: ld.lld: undefined symbol: lo_send_from

1745412181
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, what about the linking to that library and does the version you use have that function

1745412213
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
disabling the c.lo_send_from lines makes it build

1745412309
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
yes that function exists:  has quit [Ping timeout: 252

1745412309
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
          seconds]

1745412320
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://zigbin.io/c72087

1745412340
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
yes that function exists ^

1745412390
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
c macro related? 

1745412471
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/radarsat1/liblo/blob/master/lo/lo_macros.h

1745412887
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm, did my irc messages came through or was I offline for a bit? https://zigbin.io/bd114b

1745413533
clevor!sid649024@id-649024.hampstead.irccloud.com
https://usercontent.irccloud-cdn.com/file/ypUgDjP9/Screenshot_20250423-090523_IRCCloud.png

1745414203
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok

1745414302
clevor!sid649024@id-649024.hampstead.irccloud.com
Nothing from "fair" to "build error with a c library:"

1745414360
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
everything is there

1745414411
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
(fyi: compiler gains:  https://hachyderm.io/@danderson/114384629213485347)

1745415115
clevor!sid649024@id-649024.hampstead.irccloud.com
The link in that post is broken for me.

1745415303
clevor!sid649024@id-649024.hampstead.irccloud.com
I wonder what a language without unchecked illegal behavior would look like, whether some checks are at compile time or not.

1745415871
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I do link to that library: https://git.sr.ht/~flower/zsamples/tree/osc/item/build.zig#L53

1745416409
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
one would expect it is something with the macro defined for lo_send_from ...

1745419378
Gliptic!~glip@2a01:4f8:c012:91f3::1
flower_, but that macro calls _internal and that's not what the error complains about

1745419392
Gliptic!~glip@2a01:4f8:c012:91f3::1
how does the generated zig binding look like?

1745419533
Gliptic!~glip@2a01:4f8:c012:91f3::1
also, you would typically omit the "lib" in the library name, I don't know if it works with it there

1745420354
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: the naming is not the problem I think (liblo)

1745420639
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: how do I find the generated zig binding exactly?

1745420672
Gliptic!~glip@2a01:4f8:c012:91f3::1
go to definition in an editor with lsp support is easiest

1745420704
Gliptic!~glip@2a01:4f8:c012:91f3::1
I guess you can search for the name in .zig-cache too

1745420908
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: https://zigbin.io/4062ad

1745420948
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
pub extern fn lo_send_from_internal(targ: lo_address, from: lo_server, file: [*c]const u8, line: c_int, ts: lo_timetag, path: [*c]const u8, types: [*c]const u8, ...) c_int;

1745420950
Gliptic!~glip@2a01:4f8:c012:91f3::1
lo_send_from is a regular extern

1745420989
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
pub extern fn lo_send_from(targ: lo_address, from: lo_server, ts: lo_timetag, path: [*c]const u8, @"type": [*c]const u8, ...) c_int;

1745421038
Gliptic!~glip@2a01:4f8:c012:91f3::1
so whatever liblo.so/a you're linking with doesn't seem to have "lo_send_from"

1745421172
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
that's very unlikely, as other c libraries use it as well on my system, without problems

1745421550
Gliptic!~glip@2a01:4f8:c012:91f3::1
yeah, well, either that or it's not actually linking to it

1745421663
Gliptic!~glip@2a01:4f8:c012:91f3::1
`nm -gD /usr/lib/liblo.so`

1745422244
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: It builds when I add those lo_send_from functions to a c header file and call those instead

1745423400
cancername!~cancernam@user/cancername
Hi! I'd like to get my package version from inside build.zig. To do that, I want to import the package manifest. Does that exist in the build system already, or do I need to parse it?

1745423689
Gliptic!~glip@2a01:4f8:c012:91f3::1
flower_: uh, how does the binding look then?

1745424510
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 pub extern fn lo_send_from(targ: lo_address, from: lo_server, ts: lo_timetag, path: [*c]const u8, @"type": [*c]const u8, ...) c_int;

1745424929
clevor!sid649024@id-649024.hampstead.irccloud.com
Does Zig support varargs?

1745425019
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I just discovered my company will pay me $25 per hour, up to 20 hours to volunteer for eligible nonprofits...Zig Software Foundation is eligible 🤔

1745425085
clevor!sid649024@id-649024.hampstead.irccloud.com
Nice

1745425411
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/osc/item/mod.h

1745425453
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/osc/item/src/osc.zig#L167

1745425460
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
compiles .. hm

1745425515
grayhatter!~grayhatte@user/grayhatter
rockorager: that's dope

1745425538
grayhatter!~grayhatte@user/grayhatter
so, which issues are you gonna fix first?

1745426030
grayhatter!~grayhatte@user/grayhatter
oh

1745426132
grayhatter!~grayhatte@user/grayhatter
rockorager: fix this please?! https://github.com/ziglang/zig/issues/2473 

1745426507
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
what's the company? If that's public?

1745426599
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Solventum

1745426637
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
they are lucky

1745426648
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
to have you ;)

1745427465
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
grayhatter: i don't even know how to begin to solve that one

1745427487
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Like - what do you do if an error is in two different error sets?

1745427502
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
the semantics of switch change then

1745427554
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
You'd almost have to say that any error which is in multiple named sets must be handled explicitly, and then in that particular switch it is removed from the named sets

1745427608
grayhatter!~grayhatte@user/grayhatter
rockorager: that's a good question to add to that issue

1745427642
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Good point, i'll add it

1745427648
grayhatter!~grayhatte@user/grayhatter
rockorager: what happens when you write switch (err) { error.A => {}, error.A => {} }

1745427674
grayhatter!~grayhatte@user/grayhatter
that's a compile error, so that's probably what it should keep being

1745427697
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah i agree

1745427754
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Allocator.Error is going to show up in a ton of named sets I imagine

1745427787
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I guess if you just didn't deal with it the ecosystem would naturally move towards unique error sets, and then combine them with more common error sets

1745427809
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
TlsError = UniqueToTls || CommonErrors;

1745427874
grayhatter!~grayhatte@user/grayhatter
yeah, that's a case where I'd say you're holding it wrong... it's also something I do a lot

1745427897
grayhatter!~grayhatte@user/grayhatter
but I do it because I don't often write groups, because I can't *use* groups, so they're currently extra work

1745427982
grayhatter!~grayhatte@user/grayhatter
Right now, I'd love to have groups for verse. currently errors map closely to http response codes, but it'd be nice to have >1 error name per http code

1745442177
SultansOfCode!~SultansOf@user/SultansOfCode
Is it possible to simulate "interfaces"? I wanna a function that receives an object as argument and call its update() function, no matter the object type, only that it has the update function

1745442292
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
SultansOfCode: you have a few options. you can have the type be `anytype` in teh signature and that will work. If you know all of the implementations at comptime, it's probably best to use a tagged union then a switch + inline else

1745442526
SultansOfCode!~SultansOf@user/SultansOfCode
Back to switch and inline else? x.x

1745442573
SultansOfCode!~SultansOf@user/SultansOfCode
anytype didn't work

1745442600
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
are your signatures the same?

1745442640
SultansOfCode!~SultansOf@user/SultansOfCode
https://zigbin.io/3d0e29

1745442687
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
pub fn update(self: A) void

1745442727
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Those aren't members of an instance o A, B, or C...they are just namespaced to them

1745442783
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
https://zigbin.io/993b6a

1745442783
SultansOfCode!~SultansOf@user/SultansOfCode
Hmmmmm, thanks. Makes sense

1745442822
SultansOfCode!~SultansOf@user/SultansOfCode
Otherwise the update function would need to be @TypeOf(o).update();

1745442826
SultansOfCode!~SultansOf@user/SultansOfCode
Totally makes sense

1745442855
SultansOfCode!~SultansOf@user/SultansOfCode
Like "static" functions

1745442900
SultansOfCode!~SultansOf@user/SultansOfCode
Now the other part: there is a way to make a varaible accept any type? I want: var x: something; that will accept: x = A{}; x = B{}; x = C{}; then callUpdate(x)

1745442908
SultansOfCode!~SultansOf@user/SultansOfCode
Or x.update() directly

1745442974
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
tagged union, or Vtable

1745442999
SultansOfCode!~SultansOf@user/SultansOfCode
Tagged union sucks, because would require me to add a new entry every time I create a new type

1745443010
SultansOfCode!~SultansOf@user/SultansOfCode
And in two places, the enum and the union

1745443018
SultansOfCode!~SultansOf@user/SultansOfCode
Lemme read about the vtables in zig

1745443036
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Look at the Allocator implementations

1745444799
SultansOfCode!~SultansOf@user/SultansOfCode
There is a way to compare unions?

1745444818
andrewrk!~andrewrk@mail.ziglang.org
not in the language

1745444837
SultansOfCode!~SultansOf@user/SultansOfCode
Like, if (x != target) { ... }, where x is the union and target another union of the same type

1745444890
SultansOfCode!~SultansOf@user/SultansOfCode
No way to get the active field of x and target?

1745445694
andrewrk!~andrewrk@mail.ziglang.org
if it's a tagged union you can coerce to its tag type

1745446151
lemons!~doggie@user/doggie-:49517
will there *be* a way to compare unions?

1745446165
lemons!~doggie@user/doggie-:49517
am having issues with that myself

1745446200
lemons!~doggie@user/doggie-:49517
need to check a c api struct for eql and std.mem.eql does NOT like the embedded union

1745446258
lemons!~doggie@user/doggie-:49517
ooooh you cant compare because if its a lower-sized union you're comparing uninitialized memory right?

1745446264
lemons!~doggie@user/doggie-:49517
makes sense

1745446369
lemons!~doggie@user/doggie-:49517
hrm, in that case does expectEqualSlices have some way to pass in a custom comparator fn

1745446411
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
lemons: those functions just return an error if it’s not equal. you can implement your own equality that returns an error

1745446419
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
and that will fail the test

1745446446
lemons!~doggie@user/doggie-:49517
yeah but they prettify it dont they

1745446476
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
if you are testing you should at least know one of the union members though

1745446554
lemons!~doggie@user/doggie-:49517
rockorager: i do know which type, which is why im asking for custom comparator fns

1745446618
lemons!~doggie@user/doggie-:49517
my exact situation is having two array slices of.. some 3 or 4 layers of struct? with the inner most one being an extern and having that problematic union

1745446642
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ah, I was in tagged union workd

1745446646
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
world *

1745446649
lemons!~doggie@user/doggie-:49517
i do know* which union type im using so thats helpful

1745446852
lemons!~doggie@user/doggie-:49517
*(im running off of conjecture because nothing is documented, but given .{type, _, data(ref|num) } ; if .type is .Number, then the union contains a f32, otherwise ref. the asterisk is because the types are completely undocumented and obtained through trial an derror, and, while MOST variables use .Number, some engine-specific vars use.. fuck if i know what type!)

1745446974
lemons!~doggie@user/doggie-:49517
(the ref contains 0x3F which *looks* like some internal integer value (.Number is 0x2A), but its also used for random weird stuff which doesnt seem like it should use an int)

1745447080
lemons!~doggie@user/doggie-:49517
by the way can i quickly complain how stupid it is that we've reverse-engineered ref types going up to 0x54, yet half of the values inbetween we didnt

1745447106
lemons!~doggie@user/doggie-:49517
so we just have giant blobs of mystery types 

1745450445
reykjalin!7e28cf3a41@user/reykjalin
SultansOfCode: have you read through this? https://zig.news/kristoff/easy-interfaces-with-zig-0100-2hc5 . the approach described there does use tagged unions, but at least you can see some examples to work from 

