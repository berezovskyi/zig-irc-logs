1748054569
grayhatter!~grayhatte@user/grayhatter
> error: all fuzz workers crashed

1748054705
grayhatter!~grayhatte@user/grayhatter
I get the sense that fuzzing with cached data is gonna be a bit more involed then I expected

1748075485
lxsameer!~lxsameer@Serene/lxsameer
hey folks, I want to use zig to cross compile a program (I haven't started yet). What build system is recommended for zig ?

1748075544
lxsameer!~lxsameer@Serene/lxsameer
and I have very little knowledge about zig the language

1748075772
sunflr!~sunflr@user/sunflr
lxsameer: if you're this new i strongly recommend learning by using https://ziglings.org first

1748075829
sunflr!~sunflr@user/sunflr
this'll make you learn the essencials

1748075879
sunflr!~sunflr@user/sunflr
essentials*

1748075923
lxsameer!~lxsameer@Serene/lxsameer
sunflr: for sure, I'm reading that at the moment, but it seems that zig has a build system of its own, my project is not in zig at all, should I still go with zigs build system or something like Meson?

1748076014
sunflr!~sunflr@user/sunflr
lxsameer: is it written it C, C++ or something else?

1748076024
sunflr!~sunflr@user/sunflr
in*

1748076028
lxsameer!~lxsameer@Serene/lxsameer
sunflr: C with Guile 

1748076085
sunflr!~sunflr@user/sunflr
yeah Zig can build it then

1748076150
sunflr!~sunflr@user/sunflr
not sure how to do that myself exactly

1748076207
lxsameer!~lxsameer@Serene/lxsameer
great thank you

1748077304
norineko!~norineko@user/norineko
lxsameer: https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html might be a good starting point for using zig to cross compile

1748077700
lxsameer!~lxsameer@Serene/lxsameer
cheers

1748077772
lxsameer!~lxsameer@Serene/lxsameer
btw, does zig provides any library like how clang provides libclang to link into my program to utilize zig?

1748078270
squeek502!~squeek502@user/squeek502
lxsameer, depends what parts of libclang you want, if you want AST-related stuff that's exposed in the `std.zig` namespace within the standard library: https://ziglang.org/documentation/master/std/#std.zig

1748078402
lxsameer!~lxsameer@Serene/lxsameer
squeek502: I need clang to be linked in my program to compile C and llvm code, I was like since zig already has a great cross compiling features, why not using zig directly and linking it to my binary instead of clang, that's ofcourse if zig has a libclang equivlent library

1748078477
squeek502!~squeek502@user/squeek502
no, there is no equivalent, i recommend reading the post linked above to see how much work zig puts in to nice cross-compiling (see the Under the Hood section)

1748078501
lxsameer!~lxsameer@Serene/lxsameer
squeek502: I read that, and it is impressive 

1748104693
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i hope it's not tooo off topic but what do you use for viewing dumps et al. on Linux?  i have no other low level language experience than zig and now i'm trying to be a bit more mindful about how i use memory so i want to look at memory dumps (by dumps i mean i use FBA and then just write fba[0..fba.end_index])  i tried to find something and every app i tried is kinda tedious.  there does not seem to

1748104695
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
be "the best one"

1748104748
grayhatter!~grayhatte@user/grayhatter
netvor: xxd

1748104758
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
to be clear i just want to put the data in front of my face and reason about it for a while. no need to edit, etc.  and i just wanted to try something a bit more comfy than `hd -c | less -SR` or `:r!xxd`

1748104774
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
ok, that's what i was afraid of :D

1748104799
grayhatter!~grayhatte@user/grayhatter
netvor: there's a reason that xxd is the default

1748104830
grayhatter!~grayhatte@user/grayhatter
that's not gonna make you more mindful of memory though

1748104832
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i never used it, i used hd -C every time.  i guess i should use it more to be able to appreciate it

1748104866
grayhatter!~grayhatte@user/grayhatter
what is hd

1748104882
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
sorry i mean /usr/bin/hexdump

1748104932
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i think it's just symlinked to hd or something on debian,  i think it's better known as hexdump

1748104945
grayhatter!~grayhatte@user/grayhatter
I've literally never used hexdump

1748104967
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
I've literally never used xxd

1748104969
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
:D

1748104999
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
I'm aware of it, though.. it comes up very often as recommendation

1748105029
grayhatter!~grayhatte@user/grayhatter
netvor: raw inspecting bin blobs is not exactly the most effective means of going about it

1748105056
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
why not?  i feel that at least initially i need to do it

1748105114
grayhatter!~grayhatte@user/grayhatter
why do you have that feeling?

1748105194
grayhatter!~grayhatte@user/grayhatter
the only time I reach for xxd, is when I know what I'm looking for, and want to verify it's where I expect it to be, within the blob I expect

1748105248
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i find it hard to internalize the fact that slices are are rather "expensive".  eg. in my case, i had about a million CSV plaintext lines, each just few dozens of bytes.  i took a lot of time to write a parser that does one pass, and minimizes copying.   turns out the memory footprint is still about 10x the file size

1748105268
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i mean .. i *knew* it's not going to be efficient

1748105289
grayhatter!~grayhatte@user/grayhatter
netvor: source code?

1748105338
grayhatter!~grayhatte@user/grayhatter
slices aren't expensive, so I suspect there's something else missing from the way you're looking at the code

1748105365
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
but seeing the line in the binary file, and then seeing it dwarfed by the array of my slices next to it is a whole another experience

1748105393
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
("but" as following up my previous comment, slow typer here :D)

1748105459
grayhatter!~grayhatte@user/grayhatter
netvor: do you watch youtube videos?

1748105472
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
sure

1748105482
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
got recommendation?

1748105498
grayhatter!~grayhatte@user/grayhatter
ben eater

1748105512
grayhatter!~grayhatte@user/grayhatter
specifically the series about wozmon

1748105521
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
ah i know the name, seen a few videos.  excellent channel

1748105600
grayhatter!~grayhatte@user/grayhatter
so, imagine that you might want to run your code on a 6502, every byte you request might be the very last byte the system can give you

1748105638
grayhatter!~grayhatte@user/grayhatter
wanting not to waste memory, is part of the reason I don't normally write code that uses 10x the needed space

1748105684
grayhatter!~grayhatte@user/grayhatter
if you published the source code somewhere I can take a look, and point out the source that you should be able to identify as needless space

1748105851
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i mean i don't want to waste your time, the code is a holy mess, you're probably going to see 1000 things that are kinda based on YAGNI's or wrong in weird random ways i'm aware of, and then misleading comments.  

1748105889
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
but i can share it if you don't mind, just a sec :)

1748105894
grayhatter!~grayhatte@user/grayhatter
I don't buy into the DRY or YAGNI memes

1748105907
grayhatter!~grayhatte@user/grayhatter
the misleading comments is a crime though :D

1748105936
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
DRY i know is overrated 1000 times.   YAGNI is my weakness though.

1748105980
grayhatter!~grayhatte@user/grayhatter
YAGNI is a bad meme... yak shaving is valuable 

1748105990
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
eg. there's a non-trivial amount of code to store primary keys (table specific) which are joined fields.  that's before i realized all i need it a file and a line index (the data is pretty static)

1748106080
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
also i made the whole thing to be format-agnostic, ie. everything is just []const u8 on that abstraction level, but i forgot why :D  (most of the fields end up really empty or tiny enums) :D

1748106110
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
nevermind, less yapping more showing

1748106283
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
darn "Sum of file sizes exceeds size limit when syntax highlighting applied (516kB > 512kB)" :D

1748106360
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
https://bpa.st/766A

1748106417
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
here's rougly what i use for creating the dump  https://bpa.st/ROPQ

1748106445
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
generally it's a csv parser for a GTFS lookup utility i'm working on

1748106538
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
eg. one thing i realized that lots of fields are empty or one of `0`, `1` so i don't need to store those million times

1748106607
grayhatter!~grayhatte@user/grayhatter
you didn't realize that alloc 1024 ^ 2 * 1000 would be a lot of memory?

1748106612
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
eg. here's stop_times_10L.txt (the file would normally have almost a million lines, this is 10-line trim)  https://bpa.st/C6RA

1748106653
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i think that alloc is kinda pointless, it's just for testing

1748106676
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
(i got 1g because i was testing it on the big version of the file)

1748106713
Gliptic!~glip@2a01:4f8:c012:91f3::1
oh, GTFS, I helped a friend with that stuff a few years ago

1748106961
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
there's two  implementations, the second one is the one where i decided that to avoid copying on escape, i'm storing data from the line as array of slices to the original data (which i then group into cells).   ofc it's a massive waste of time if i'm  actually storing even the empty tokens, and also using slices everywhere

1748106981
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
s/of time/of memory/

1748107369
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
...so i kinda see many ways i could improve it but i want to keep the memory dumps in front of my eyes as i'm moving on

1748108495
lemons!~doggie@user/doggie-:49517
> the code is a holy mess

1748108511
lemons!~doggie@user/doggie-:49517
netvor: dw you're still doing better than me

1748108518
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
LOL :D

1748108539
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
it's unbearable, i'm actually cleaning it up now locally

1748108583
lemons!~doggie@user/doggie-:49517
grayhatter can probably atest for it but i had some two extra folders for [the feature that i was currently coding] with dead code

1748108586
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i hope grayhatter  is ok :D

1748108604
lemons!~doggie@user/doggie-:49517
also the commit history..

1748108633
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i hope they did not go insane by reading my code :D

1748108660
lemons!~doggie@user/doggie-:49517
picked up a habit from a friend where all the commit names are something along the lines of "penis" or "aa gugugaga"

1748108683
lemons!~doggie@user/doggie-:49517
or whatever i considered funny at that moment

1748108721
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
then the commit history is also kind of history of you growing up, right?  :'-) 

1748108816
lemons!~doggie@user/doggie-:49517
i guess yeah

1748109041
lemons!~doggie@user/doggie-:49517
doesnt make reviewing old code any easier though

1748109710
torque!~tachyon@user/torque
unfortunately, even in professional contexts people are often terrible about commit messages

1748109782
torque!~tachyon@user/torque
it doesn't help that a lot of companies turn their external tools for documenting bugs/work tickets into the source of truth for why a change was made, which adds a layer of indirection to figuring out why something was done

1748109788
triallax!f378378b91@lacerte/triallax
lemons: why extra folders instead of a wip branch or something?

1748109855
lemons!~doggie@user/doggie-:49517
triallax: i was writing collision stuff and had a change of heart on how the files should be organized + a mental breakdown because "this code sucks wtf me" two times

1748109864
lemons!~doggie@user/doggie-:49517
and didnt delete the old stuff

1748109875
triallax!f378378b91@lacerte/triallax
isn't that what a wip branch is for?

1748109907
lemons!~doggie@user/doggie-:49517
yeah true

1748109937
lemons!~doggie@user/doggie-:49517
the couple attempts of using branches for my own stuff never went too smoothly so i think i just stopped considering them

1748109946
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i think i would do the same thing as lemons .. i would most probably[tm] clean it up before committing, to be fair to myself

1748109969
lemons!~doggie@user/doggie-:49517
(not smoothly as in i clumped everything above the sun onto said branch and got myself into kewl merge conflicts later down the line)

1748110007
lemons!~doggie@user/doggie-:49517
netvor: yeah but i also treat commits more as a once-in-a-while "hey save whatever i've done so far" rather than actual categorization

1748110030
lemons!~doggie@user/doggie-:49517
so half the stuff is unfinished and with a bunch of other random changes

1748110057
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
nowadays i tend to create `egg` branch where i produce extensive amount of disorganized code with borderline useless commit mesages (yeah just "game saves").  eventually (after years) i clean it up and start behaving

1748111388
triallax!f378378b91@lacerte/triallax
i don't have great git hygiene either but it's gettin better

1748111409
triallax!f378378b91@lacerte/triallax
i used to put a lot of my unfinished stuff in stash and that was awful and dumb

1748111417
triallax!f378378b91@lacerte/triallax
now i use branches at least

1748111511
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
stash is just branch but worse (horribly worse), i'm glad i realized it long time ago

1748111523
triallax!f378378b91@lacerte/triallax
it has its uses

1748111536
triallax!f378378b91@lacerte/triallax
i have autostash enabled and it's pretty great

1748119047
GreaseMonkey!greaser@user/greasemonkey
stash is quite useful if you're trying to pull code while you're working on something and it won't come through

1748119079
GreaseMonkey!greaser@user/greasemonkey
but yeah outside of that it gets stale fast

1748119373
dutchie!~dutchie@user/dutchie
jujutsu <3

1748121568
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
btw i cleaned up the code slighly and added readme https://git.sr.ht/~netvor/zig-gtfs :)  the parser i was talking earlier about with grayhatter is now src/csv1.zig (and src/perf.zig is a test utility just to run both implementations and rougly save used mem as dumps) .. but i will improve it a lot soon-ish

1748121705
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
oh i mean src/csv2.zig ..  (oh and i know it's broken, it does not even pass own tests :D)

1748123603
GreaseMonkey!greaser@user/greasemonkey
netvor: just a heads up, for unit tests you probably want to use std.testing.allocator as your allocator, it can also catch memory leaks

1748124015
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
i'm aware of it but i never end up using it.  most code i write is simple cli where leaks are not really a thing  (i mean i would not call them "leaks" :D)

1748124146
netvor!~netvor@2a00:ca8:a1f:cd0:2c65:6cc1:caca:16ec
even in these tests i don't know how i would use it, i don't have any real .deinit code.  at this point it's not clear if/how it would be needed

