1760589042
halloy8765!~halloy876@user/tiaf25
ping

1760589394
andrewrk!~andrewrk@mail.ziglang.org
hello

1760609654
lemons!~doggie@user/doggie-:49517
Affliction: i am here now

1760609748
Affliction!affliction@idlerpg/player/affliction
lemons: std.mem.indexOfSlice gets you the bit up to the sentinel, and, missed the bit above where you ask about scopes so I guess you've figured that bit out

1760609810
Affliction!affliction@idlerpg/player/affliction
but yeah, for "is there a version of std.log which works/can be customized to work per-module?" I guess, as you were looking, scope + custom handler that dispatches based on the scope

1760609839
lemons!~doggie@user/doggie-:49517
Affliction: ah yeah, scopes still feel weird to not have comptime guarantees and for the sentinel i just std.mem.indexOfScalar and alloc.dupe(u8, string[0..index])

1760609864
Affliction!affliction@idlerpg/player/affliction
er

1760609866
Affliction!affliction@idlerpg/player/affliction
indexOfSentinel*

1760609876
Affliction!affliction@idlerpg/player/affliction
indexOfSlice doesn't exist, thanks brain

1760609890
lemons!~doggie@user/doggie-:49517
hah, dw it happens

1760609927
Affliction!affliction@idlerpg/player/affliction
indexOfScalar, kinda feels a bit less idiomatic, but I guess it'd work if the sentinel is always eg, 0

1760609963
lemons!~doggie@user/doggie-:49517
brb

1760610075
lemons!~doggie@user/doggie-:49517
baack~

1760610129
lemons!~doggie@user/doggie-:49517
baaack~

1760610173
lemons!~doggie@user/doggie-:49517
Affliction: wouldnt indexOfSentinel run on that same "if the sentinel is always 0" assumption though?

1760610210
Affliction!affliction@idlerpg/player/affliction
lemons: It'd use whatever the sentinel type of the slice is

1760610220
Affliction!affliction@idlerpg/player/affliction
assuming your slice is actually sentinel-terminated

1760610245
lemons!~doggie@user/doggie-:49517
ahh yeah that code runs before the sentinel reinterpret

1760610273
lemons!~doggie@user/doggie-:49517
i could swap the alloc.alloc() for allocZ but i dont want more breakage than im already experiencing

1760610334
lemons!~doggie@user/doggie-:49517
for some reason a (if x != y) branch is being skipped and breaking on the no-workaround code

1760610348
lemons!~doggie@user/doggie-:49517
despite the debugger showing x and y are indeed unequal

1760610394
lemons!~doggie@user/doggie-:49517
ill nuke zig-out and recompile i guess

1760610589
lemons!~doggie@user/doggie-:49517
nnope

1760611059
lemons!~doggie@user/doggie-:49517
Affliction: https://www.zigfiddle.dev/?KAy45VQt110

1760611095
lemons!~doggie@user/doggie-:49517
its returning on line 21 and skipping the if clause.. and yet the debugger shows the two being utterly different!

1760611127
lemons!~doggie@user/doggie-:49517
index of 0xC, len of 0x18

1760611188
lemons!~doggie@user/doggie-:49517
(and similarly the variables in the branch are uninitialized as well)

1760611237
Affliction!affliction@idlerpg/player/affliction
hm

1760611294
lemons!~doggie@user/doggie-:49517
if i didnt know any better i'd blame windbg but ive already had two language bugs happen while doing this project

1760611330
lemons!~doggie@user/doggie-:49517
on the side of zig, extern structs erroneusly insert padding, on the engine's, Byond_ToString returns the wrong buffer length

1760611361
lemons!~doggie@user/doggie-:49517
(what im trying to fix rn actually)

1760611372
Affliction!affliction@idlerpg/player/affliction
lemons: why not realloc, incidentally?

1760611411
Affliction!affliction@idlerpg/player/affliction
likely more efficient than duping and freeing the old one; likely wont' copy memory.

1760611433
Ayo!~Ayo@45.142.232.203
debug.runtime_safety is marked as deprecated, what's the alternative?

1760611440
lemons!~doggie@user/doggie-:49517
Affliction: didnt hear of realloc so didnt use it

1760611467
Affliction!affliction@idlerpg/player/affliction
https://ziglang.org/documentation/0.13.0/std/#std.mem.Allocator.realloc

1760611579
lemons!~doggie@user/doggie-:49517
Affliction: <3

1760611862
lemons!~doggie@user/doggie-:49517
this is fubar

1760612788
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: Here's an instance of the debouncing bug occuring. I can't reliably reproduce it. https://usercontent.irccloud-cdn.com/file/lGFySkMS/zig-compressed.mp4

1760613250
lemons!~doggie@user/doggie-:49517
Affliction: got it fixed!

1760613267
lemons!~doggie@user/doggie-:49517
still not sure what was causing it though

1760636018
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
sometimes i will have a code like `std.debug.print("query: {any}, len: {any}\n", .{ query, len });` in python it will cause segfault! any idea why it does that? if i just comment out the print there is no more segfault. 

1760636355
grayhatter!~grayhatte@user/grayhatter
stealth_: what is a segfault?

1760636379
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
segmentation fault

1760636442
grayhatter!~grayhatte@user/grayhatter
no, I'm asking you to describe what it means

1760636457
grayhatter!~grayhatte@user/grayhatter
what does a segfault mean

1760636476
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it crashes the software and coredumps 

1760636544
grayhatter!~grayhatte@user/grayhatter
technically, that's an incorrect definition, that's just the default behavior... but what triggers that crash and core dumb? is your software doing it, or is it something else? and if it's something else, what is that thing?

1760636567
grayhatter!~grayhatte@user/grayhatter
coredump*

1760636585
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its that print statement that causes it, but not in all cases, but sometimes it does, why i am asking why it would do that. 

1760636694
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/69568f line: 7 will cause it, why i find weird, cause it should just print that statement into std.output

1760636718
grayhatter!~grayhatte@user/grayhatter
if you understood the "actor" that causes/starts the segfault, what section of code makes the crash and coredump happen, then you would understand why that line triggers that code to segv and coredump

1760636790
grayhatter!~grayhatte@user/grayhatter
asked another way; does std.debug.print() call panic() or crash() itself, or does some other code call panic()/crash() for you?

1760636826
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm no, just commenting out that line will work with no crash.

1760636874
grayhatter!~grayhatte@user/grayhatter
yes, you've said that already... and because I know what casuse a segv, I can predict and explain why it happens... why it happens is what I'm trying to teach you

1760636909
grayhatter!~grayhatte@user/grayhatter
you need to understand what causes a segv if you want to be able to fix your zig code without asking someone else to help you every single time you see a segv

1760636970
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this happens in python side, if i run the code first time it will crash the software, second time it runs fine with no crash! normally such things happen cause of memory leak.

1760637046
grayhatter!~grayhatte@user/grayhatter
memory leaks don't cause segfaults, malfunctioning code causes memory leaks, and segfaults, but they are different defects

1760637066
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python you can do `print('something', flush=True)` is there anything like that zig/print? it might be not be flushing on time

1760637161
grayhatter!~grayhatte@user/grayhatter
that's a poor guess about what is causing it. Zig and python work very differently so it's likely a mistake to compare how python's print() works, with how zig's std.debug.print() works... I'd recommend you spend more time trying to understand and answer the questions I've already asked

1760637210
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
are you saying my print format is wrong? 

1760637243
grayhatter!~grayhatte@user/grayhatter
no, I'm saying you don't know what a seg fault is, and what triggers it

1760637264
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well clearly, i come from python where i don't have to deal with such things.

1760637279
grayhatter!~grayhatte@user/grayhatter
your code does something wrong, and something different is responding to that wrong thing with a seg fault

1760637305
grayhatter!~grayhatte@user/grayhatter
what is that different thing, and does it care about your print statement? or does it create a seg fault for a different reason?

1760637398
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
just tested again, just that print line causes it.

1760637403
clevor!sid649024@id-649024.hampstead.irccloud.com
Try printing the address of `query` with `{*}`.

1760637420
grayhatter!~grayhatte@user/grayhatter
clevor: ***sigh!***

1760637431
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
clevor, same problem 

1760637439
clevor!sid649024@id-649024.hampstead.irccloud.com
nvm

1760637532
grayhatter!~grayhatte@user/grayhatter
I probably shouldn't sigh that much, because I considered that to be the exact perfect hint myself... I just also assumed it wouldn't work as a hint

1760637542
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i split the code into 1 for len and 1 for query, both causes the same problem, so just having that print statement there cause

1760637683
grayhatter!~grayhatte@user/grayhatter
@ptrCast(@constCast())... I doubt this code could be correct

1760637705
Gliptic!~glip@2a01:4f8:c012:91f3::1
so query is a slice to const?

1760637713
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if i take the constCast it will not compile and get compile error

1760637719
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: you don't say

1760637727
grayhatter!~grayhatte@user/grayhatter
lol

1760637752
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
query is struct 

1760637761
Gliptic!~glip@2a01:4f8:c012:91f3::1
query is a struct?

1760637767
Gliptic!~glip@2a01:4f8:c012:91f3::1
that you're doing [index] on?

1760637770
Gliptic!~glip@2a01:4f8:c012:91f3::1
how does that work?

1760637787
grayhatter!~grayhatte@user/grayhatter
Gliptic: I had the same question, check your dms

1760637789
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its a multiarray pointer c struct 

1760637835
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/73d62d

1760637854
Gliptic!~glip@2a01:4f8:c012:91f3::1
so it's not a struct, it's a multipointer

1760637903
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/1c8192

1760638125
grayhatter!~grayhatte@user/grayhatter
you're very hard to figure out stealth_ , because I've never met someone so motivated to build stuff, but so resistant to learning about how the stuff actually works

1760638205
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, thanks! i agree i am totally weird, nothing can be done about it, i learn differently vs others i suppose. 

1760638529
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looking through the print source code leads me to: https://ziglang.org/documentation/master/std/#std.Progress.lockStderrWriter looks like print in zig is writing to stderr in python normal print is written to stdout, only error is written to stderr

1760638644
lemons!~doggie@user/doggie-:49517
egh.. i think i've an error with my importBitfield function

1760638677
lemons!~doggie@user/doggie-:49517
i store three floats engine-side, read their values and cast into a u72

1760638689
lemons!~doggie@user/doggie-:49517
but i think im doing it incorrectly, either order-wise or endianness-wise

1760638727
grayhatter!~grayhatte@user/grayhatter
stealth_: that's has nothing to do with your segv

1760638763
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, probably it was just a guess. 

1760638871
grayhatter!~grayhatte@user/grayhatter
I know, which is why so many people suggest using investigation instead of random guesses

1760638942
lemons!~doggie@user/doggie-:49517
grayhatter: you could just tell him

1760638949
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not much to work with since its just 1 line, but i suppose you could go through the coredump with dbg or w/e it called. 

1760638982
grayhatter!~grayhatte@user/grayhatter
lemons: but then I would have to give him the answer every single time there's a segv he didn't expect

1760638995
lemons!~doggie@user/doggie-:49517
i dont think the knowledge of what causes a sigseg will immediately correlate with how to fix it anyways

1760639016
grayhatter!~grayhatte@user/grayhatter
I'd rather teach him how to investigate the bug, so that I can spend my time on *interesting* problems instead of boring segv's

1760639045
grayhatter!~grayhatte@user/grayhatter
no, but it will teach him what to look at instead of guessing it has something to do with stdout vs stderr

1760639091
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
at this point i am most likely to just ignore it and move on to coding other stuff, i was more curious why it was doing that vs it being an actual problem it happened in few different functions as well. 

1760639094
lemons!~doggie@user/doggie-:49517
all im *sayiiin* is that you've been trying to explain this concept for the past (academic) hour 

1760639378
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: there's like a bunch of things wrong in your snippet, but I don't know if there's any point highlighting them

1760639441
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, point away, always welcome on how to improve coding. 

1760639532
Gliptic!~glip@2a01:4f8:c012:91f3::1
first, what does PyType_FromSpec do?

1760639562
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its c function from cPython capi

1760639566
Gliptic!~glip@2a01:4f8:c012:91f3::1
that does what

1760639582
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://docs.python.org/3/c-api/type.html#c.PyType_FromSpec

1760639594
Gliptic!~glip@2a01:4f8:c012:91f3::1
and after you've read that, what would you say it does

1760639774
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
 Gliptic, https://zigbin.io/ec3e61 i am still working on it

1760639837
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, I don't want to see more of the code to be honest

1760639861
Gliptic!~glip@2a01:4f8:c012:91f3::1
we could focus on this place, this one line, `const cls = c.PyType_FromSpec(@constCast(&Class)) orelse return null;`

1760639863
Gliptic!~glip@2a01:4f8:c012:91f3::1
could we?

1760639888
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am not really good at talking, i am more code oriented 

1760639889
grayhatter!~grayhatte@user/grayhatter
Gliptic: fools errand, but good luck

1760639890
Gliptic!~glip@2a01:4f8:c012:91f3::1
if you don't know what PyType_FromSpec does, even vaguely..

1760639946
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it build the python class based on the spec given

1760639960
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: and every time you call this, you want to build a new python class?

1760639996
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, ya! but it would be nice to cache it but i haven't figured that out yet. 

1760640005
Gliptic!~glip@2a01:4f8:c012:91f3::1
it would be "nice"?

1760640033
Gliptic!~glip@2a01:4f8:c012:91f3::1
but fine, that's not the biggest problem

1760640042
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am learning cPython api, just like i am learning zig... do maybe a function already exists, i dono

1760640073
Gliptic!~glip@2a01:4f8:c012:91f3::1
who's freeing the arrays that all these cqe.io_uring_cqe are pointing to?

1760640108
Gliptic!~glip@2a01:4f8:c012:91f3::1
this __getitem__ creates a new Cqe object, with a io_uring_cqe that points into the array of the other Cqe object

1760640122
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you call another function like io_uring_cqee_seen or io_uring_cqe_advance

1760640152
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
python obj is handled by python garbage collector 

1760640167
Gliptic!~glip@2a01:4f8:c012:91f3::1
python garbage collector doesn't handle the memory for these io_uring_cqe

1760640168
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
obj = class = Cqe

1760640171
Gliptic!~glip@2a01:4f8:c012:91f3::1
we've been through this

1760640200
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes, Cqe.io_uring_cqe is handled by those function i mentioned by io_uring

1760640215
Gliptic!~glip@2a01:4f8:c012:91f3::1
you have "a", you do "b = a[1]" or whatever, now you have two objects "a" and "b", both have io_uring_cqe pointing into the same array

1760640248
Gliptic!~glip@2a01:4f8:c012:91f3::1
except b has a pointer to the second element from a

1760640252
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes but these are pointers 

1760640321
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you are reusing the same class over and over, but internally array gets updated with new content 

1760640321
Gliptic!~glip@2a01:4f8:c012:91f3::1
these are pointers, yes, why do you point that out?

1760640400
Gliptic!~glip@2a01:4f8:c012:91f3::1
what's even setting io_uring_cqe

1760640409
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
usage looks something like this: https://zigbin.io/faa8fd

1760640455
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cqe = io_uring_cqe(ring) is created once, but its used over and over , so only array into internally changes and its managed by io_uring 

1760640559
lemons!~doggie@user/doggie-:49517
how would i go about bitcasting a f32 into a u72

1760640572
Gliptic!~glip@2a01:4f8:c012:91f3::1
what's setting io_uring_cqe and ring?

1760640700
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
another class https://zigbin.io/2c9d75 once i finish this project and upload you can go through it, that way you can see the whole thing in action.

1760640742
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's a different class, I'm talking about Cqe.ring and Cqe.io_uring_cqe

1760640791
Gliptic!~glip@2a01:4f8:c012:91f3::1
how are they initialized

1760640827
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, https://zigbin.io/faa8fd line: 2-3 

1760640839
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: that's not zig

1760640858
Gliptic!~glip@2a01:4f8:c012:91f3::1
and they do not set Cqe.ring and Cqe.io_uring_cqe

1760640864
Gliptic!~glip@2a01:4f8:c012:91f3::1
Cqe.ring and Cqe.io_uring_cqe are not even available from python

1760640880
Gliptic!~glip@2a01:4f8:c012:91f3::1
do you understand what I'm asking

1760640974
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, https://zigbin.io/ec3e61 line: 31-32 is that what you are asking?

1760641021
Gliptic!~glip@2a01:4f8:c012:91f3::1
no

1760641035
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i c, sorry, i don't really know what you are asking/getting at. 

1760641049
Gliptic!~glip@2a01:4f8:c012:91f3::1
the struct Cqe has fields ring and io_uring_cqe, right?

1760641056
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes

1760641062
Gliptic!~glip@2a01:4f8:c012:91f3::1
what is initializing those fields?

1760641168
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ring is initialized  when `ring = io_uring()`is called and memory for ring is set there. and io_uring_cqe is created inside __getitem__ method. 

1760641211
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well __getime__ is more like a alias class. 

1760641238
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, it's not

1760641248
Gliptic!~glip@2a01:4f8:c012:91f3::1
neither of those things are true

1760641274
Gliptic!~glip@2a01:4f8:c012:91f3::1
the cqe.io_uring_cqe initialized in __getitem__ is irrelevant, because it's not getting there

1760641280
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok i explained it badly 

1760641282
Gliptic!~glip@2a01:4f8:c012:91f3::1
it crashes before, right?

1760641306
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no, it works fine... it only crashes when i have `std.debug.print()` in it. 

1760641336
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
which i only write to debug. 

1760641336
Gliptic!~glip@2a01:4f8:c012:91f3::1
just because it runs doesn't mean it works

1760641363
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have a test that checks for data. 

1760641369
Gliptic!~glip@2a01:4f8:c012:91f3::1
so where is Cqe.io_uring_cqe initialized?

1760641378
Gliptic!~glip@2a01:4f8:c012:91f3::1
line 33 is irrevelant

1760641383
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/28af2d

1760641384
Gliptic!~glip@2a01:4f8:c012:91f3::1
you already have a Cqe object at that point

1760641396
Gliptic!~glip@2a01:4f8:c012:91f3::1
what does this have to do with anything

1760641408
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't care whether tests pass or whatever

1760641412
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that test passes to i know it works. 

1760641469
Gliptic!~glip@2a01:4f8:c012:91f3::1
if the code is fine, you should be able to tell me where Cqe.io_uring_cqe and Cqe.ring are initialized

1760641496
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i think i don't get what exactly you are asking for specifically 

1760641501
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's very simple

1760641510
Gliptic!~glip@2a01:4f8:c012:91f3::1
there are two fields, where are they set

1760641517
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't know how to make it any simpler

1760641665
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
are you asking in term is what creates the python class __init__? or you talking about memory being set? or the data io_uring populates into io_uring_cqe? 

1760641687
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't see why you're asking whether I mean something completely different from what I asked

1760641708
Gliptic!~glip@2a01:4f8:c012:91f3::1
the _literal_ field io_uring_cqe that's inside the Cqe struct

1760641725
Gliptic!~glip@2a01:4f8:c012:91f3::1
__getitem__ sets io_uring_cqe for the _new_ object, which is irrelevant

1760641726
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/ec3e61 you talking about line: 15 ? 

1760641738
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm talking about that field, yes

1760641741
Gliptic!~glip@2a01:4f8:c012:91f3::1
what's setting that

1760641747
Gliptic!~glip@2a01:4f8:c012:91f3::1
except line 33

1760641796
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its memory/data is handled by io_uring backend. 

1760641799
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, it's not

1760641808
Gliptic!~glip@2a01:4f8:c012:91f3::1
io_uring doesn't know _anything_ about your Cqe struct

1760641829
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but i pass it to io_uring thus it knows and it populates it. 

1760641832
Gliptic!~glip@2a01:4f8:c012:91f3::1
how do you figure io_uring would randomly set a field in _your_ struct

1760641850
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: you're passing what to io_uring?

1760641873
Gliptic!~glip@2a01:4f8:c012:91f3::1
where is that done?

1760641898
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/28af2d line: 23 where `cqe` is being passed to io_uring backend to populate 

1760641907
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's python

1760641911
Gliptic!~glip@2a01:4f8:c012:91f3::1
we're talking about zig

1760641920
Gliptic!~glip@2a01:4f8:c012:91f3::1
as I already explained, these fields aren't available in python

1760642004
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/9939b1

1760642092
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 12 is where that python zig passes to c function, then io_uring populates those array

1760642135
Gliptic!~glip@2a01:4f8:c012:91f3::1
so before that io_uring_wait_cqe_nr is called, these fields are uninitialized?

1760642161
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's not a good idea

1760642165
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
for cqe? yes i don't managed that memory, but for ring i create memory. 

1760642225
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is another case where i do manage cqe memory but i haven't written those function yet.

1760642458
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cqe = completion queue entry, so you don't need to manage anything till the ask is finished.

1760642509
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
task*

1760643584
clevor!sid649024@id-649024.hampstead.irccloud.com
Yay, a viable repro of the infinite rebuilding bug. https://github.com/ziglang/zig/issues/25605

1760643807
clevor!sid649024@id-649024.hampstead.irccloud.com
s/viable/reproducible/

1760643853
Gliptic!~glip@2a01:4f8:c012:91f3::1
a reproducible repro

1760644314
lemons!~doggie@user/doggie-:49517
how do i cast f32 to u72

1760644356
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lemons, @intFromFloat()

1760644367
lemons!~doggie@user/doggie-:49517
stealth_: bitcast

1760644373
lemons!~doggie@user/doggie-:49517
..shouldve made that clear, ech.

1760644395
Gliptic!~glip@2a01:4f8:c012:91f3::1
f32 has 32 bits, u72 has 72 bits, how do you expect bitcast to work?

1760644482
lemons!~doggie@user/doggie-:49517
Gliptic: look, i just need to populate the upper, middle and lower 24 bits (three diff floats) with the mantissa + sign

1760644492
lemons!~doggie@user/doggie-:49517
ive the code for the shifts, just not the casts

1760644500
Gliptic!~glip@2a01:4f8:c012:91f3::1
so bitcast to u32 and do whatever you want

1760644609
lemons!~doggie@user/doggie-:49517
Gliptic: so @as(u72, @intCast(@as(u32, @bitCast(float)))) ?

1760644627
Gliptic!~glip@2a01:4f8:c012:91f3::1
I don't know, is that what you want to do?

1760644673
lemons!~doggie@user/doggie-:49517
i dont know, im asking you

1760644683
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, I don't know what you want to do

1760644683
lemons!~doggie@user/doggie-:49517
you know what i want to do

1760644699
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's no canonical 32 bits to 72 bits conversion

1760644718
Gliptic!~glip@2a01:4f8:c012:91f3::1
@intCast will fill the upper bits with zero

1760644726
Gliptic!~glip@2a01:4f8:c012:91f3::1
so if that's what you want to do..

1760644756
lemons!~doggie@user/doggie-:49517
MSB?

1760644770
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes

1760644776
Gliptic!~glip@2a01:4f8:c012:91f3::1
bit 32..71

1760644780
lemons!~doggie@user/doggie-:49517
then yeah it works

1760645639
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there way to format string without using print stm? e.g "something {}".format(23)

1760645676
clevor!sid649024@id-649024.hampstead.irccloud.com
In Python, or Zig?

1760645683
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
zig

1760645699
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i know you can use ++ but it can get very tedious

1760645726
clevor!sid649024@id-649024.hampstead.irccloud.com
`std.fmt.format` or `std.Io.Writer.print`

1760645737
lemons!~doggie@user/doggie-:49517
clevor: format is deprecated isnt it?

1760645748
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thanks. 

1760645754
clevor!sid649024@id-649024.hampstead.irccloud.com
It doesn't say it is.

1760645756
lemons!~doggie@user/doggie-:49517
regardless stealth_ print is not your issue

1760645785
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
?

1760645798
clevor!sid649024@id-649024.hampstead.irccloud.com
Oh

1760645802
lemons!~doggie@user/doggie-:49517
clevor: "Deprecated in favor of- yeah

1760645831
lemons!~doggie@user/doggie-:49517
allocPrint does what i need anyways so :shrug:

1760645837
clevor!sid649024@id-649024.hampstead.irccloud.com
Autodocs has a bug where it displays `pub` decls from tests.

1760646197
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so what should i use? if not std.fmt.format ? 

1760646320
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: you cannot, in fact, use ++

1760646376
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i was trying to avoid that. 

1760646448
Gliptic!~glip@2a01:4f8:c012:91f3::1
don't avoid it, try it

1760646675
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
Just curious ... what type of projects are people most using zig for and has anyone got anywhere with zig gamedev

1760646784
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you can write the code, don't think there is a limit to what you can do with zig.

1760647193
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
No doubt from me

1760647225
Gliptic!~glip@2a01:4f8:c012:91f3::1
you can't launch a 90 kg stone projectile over 300 meters

1760647240
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
Just curious what people end up doing with it (like do you get many gamedevs drawn to it, the compile times are appealing)

1760647276
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
We have the '50 game engines 5 games' joke in rust

1760647308
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lol

1760647310
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
Attracts people (like me) who want to make engines, but I do think the compile times hurt when you're trying to focus on behaviour 

1760647322
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
When you're working on engine/tools code it's great

1760647462
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
1 good thing is you can port your game to any system/os without much issues unlike other languages.

1760647608
lemons!~doggie@user/doggie-:49517
davros1: i use zig for a game supplementary (dll for a cpp game engine)

1760647619
lemons!~doggie@user/doggie-:49517
writing collision and rendering in it

1760647640
lemons!~doggie@user/doggie-:49517
soo... 51 game engines 

1760647823
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
bet there are ppl out here they spent like 10year writing game engine in C++ than rust came around and they spend 10years writing it in Rust, and now they are thinking Zig?!

1760647887
lemons!~doggie@user/doggie-:49517
stealth_: rust 1.0 was in 2015.. so i guess its possible?

1760647906
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
mhmm

1760647924
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i saw 1 guys on the net who was doing that

1760651022
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
error: root source file struct 'fmt' has no member named 'bufPrintSentinel' https://ziglang.org/documentation/master/std/#std.fmt

1760651370
grayhatter!~grayhatte@user/grayhatter
davros1: you've heard of mach right?

1760652523
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
grayhatter, 'the mach kernel', NeXT ?

1760652532
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
And probably things before and after NeXT

1760652541
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
I dont know much about it ,I've just heard the term.

1760652601
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
stealth_, well I've been using rust 10 years on and off (not continuously) and I'm spending dangerous amounts of time lurking here lol

1760653151
grayhatter!~grayhatte@user/grayhatter
https://machengine.org/

1760653156
grayhatter!~grayhatte@user/grayhatter
davros1: ^

1760653243
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
davros1, i kept thinking of learning rust for the past 10 years but never got into it something seems off about it.

1760653413
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
Its certainly a marmite language and has a steep learning curve

1760653454
davros1!~davros2@2a01:4b00:f01b:3e00:d8d4:1b46:1f45:f49d
grayhatter, hah ok different mach

1760653706
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i don't think rust is rewarding, results aren't really there, when it comes to speed or safe or whatever... like it super hyped up

1760653852
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
with zig my project went from 6second + compile time to 1-2second (0.2 second with caching) that right there saves me lots of time.

1760654909
clevor!sid649024@id-649024.hampstead.irccloud.com
I accidentally found another reliable repro :/

1760656944
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is also https://github.com/david-vanderson/dvui could be used for games as well.

