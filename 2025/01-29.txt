1738111691
grayhatter!~grayhatte@user/grayhatter
dsal: std.meta doesn't compare strings, dutchie already gave you the answer in std.mem... but what exactly works?

1738111732
dsal!sid13060@id-13060.lymington.irccloud.com
I mean std.mem works.  I'm using std.meta elsewhere for something that looks kind of stringish

1738111783
grayhatter!~grayhatte@user/grayhatter
std.meta.eql is similar to python's "is" operator

1738112058
grayhatter!~grayhatte@user/grayhatter
where calling it eql is a bit misleading

1738112117
dsal!sid13060@id-13060.lymington.irccloud.com
I haven't made sense of why std.meta works in the cases it does.  I might have to make something a little more specific.

1738112130
dsal!sid13060@id-13060.lymington.irccloud.com
Maybe intern these strings or something.

1738112155
grayhatter!~grayhatte@user/grayhatter
dsal: by chance, are the strings known at comptime?

1738112196
dsal!sid13060@id-13060.lymington.irccloud.com
The ones I'm checking against are.  I can make most of the useful set be known, but fundamentally they're values I'm finding in a telemetry stream I don't have control over.

1738112214
dsal!sid13060@id-13060.lymington.irccloud.com
It's got these chunk identifier things:  `pub const FourCC = [4]u8;`

1738112282
dsal!sid13060@id-13060.lymington.irccloud.com
I'm not even sure that's the best modeling, but I've got a couple layers here.  Something sort of like a lexer and something more like a parser.  The latter doesn't really need to all theoretically possible ones.  So I could, e.g., have a comptime known set that i reference when parsing or just make a new one if I can't find something.  Or just register it and do both.

1738113682
ezzieyguywuf!~Unknown@user/ezzieyguywuf
so e.g. if I const wl = @cImport({@cInclude("wayland-client.h")}); I end up with  code like wl.wl_display_connect(null); Is there a way to tell the importer/translator to remove the `wl_` prefix from names?

1738114231
torque!~tachyon@user/torque
no

1738114273
torque!~tachyon@user/torque
but you could use zig bindings

1738114275
torque!~tachyon@user/torque
https://codeberg.org/ifreund/zig-wayland

1738114640
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah, I considered doing this

1738114685
ezzieyguywuf!~Unknown@user/ezzieyguywuf
it says "zig 0.13.0" though and I'm using 0.14.0 - generally I'm pretty suspicious of most zig libraries and stuff in the wild rn

1738114701
ezzieyguywuf!~Unknown@user/ezzieyguywuf
except for like, obviously high class things

1738114965
triallax!f378378b91@lacerte/triallax
might be worth noting that these bindings are by a zig team member, and used by river (itself probably the most well-known zig project out there)

1738114968
triallax!f378378b91@lacerte/triallax
make of that what you will

1738114980
torque!~tachyon@user/torque
most high quality libraries stick with the release versioning rather than trying to chase master so I can see the conflict there

1738115019
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
there is also a next-zig branch in zig-Wayland

1738115295
ezzieyguywuf!~Unknown@user/ezzieyguywuf
triallax: definitely good to know

1738115372
ezzieyguywuf!~Unknown@user/ezzieyguywuf
TIL that river is a thing, I'm just starting to  dip the toes into wayland (with sway) I may want to check it out :-D

1738115388
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
What would the procedure be to fork zig and create some syntax modifications?

1738115392
triallax!f378378b91@lacerte/triallax
river is also by the same person for the record

1738115428
torque!~tachyon@user/torque
step one: fork zig. step two: make the changes you want

1738115440
torque!~tachyon@user/torque
or is this something you would want to upstream

1738115461
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
No I just want to implement i++/i-- hehe

1738115469
torque!~tachyon@user/torque
why tho

1738115511
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
It's quite useful to use it

1738115527
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah, that's why I missed the next-zig branch it's not on the github mirror lol

1738115556
torque!~tachyon@user/torque
I don't think i++ is that useful

1738115561
ezzieyguywuf!~Unknown@user/ezzieyguywuf
same

1738115590
ezzieyguywuf!~Unknown@user/ezzieyguywuf
i++ saves one character from i+=1, and the latter reads more naturally

1738115603
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
There's also the ++i/--i variant

1738115616
ezzieyguywuf!~Unknown@user/ezzieyguywuf
not to mention the nuance of `++i` vs `i++`, in c++ at least

1738115620
triallax!f378378b91@lacerte/triallax
i'm firmly convinced that increment/decrement as an expression was a mistake

1738115709
torque!~tachyon@user/torque
the best kind of mistake is the one you can keep making over and over

1738115793
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
What would be a mistake is if it worked like this: i++++++ to add 5 xD

1738115812
ezzieyguywuf!~Unknown@user/ezzieyguywuf
lawd

1738115816
grayhatter!~grayhatte@user/grayhatter
triallax: keep going, eventually you'll get to the core truth, which is: it was a mistake to ever teach sand how to do math

1738115820
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
On it's own, i++ is.. fine, tbh

1738116039
grayhatter!~grayhatte@user/grayhatter
dsal: the compiler figured out the strings were the same, and gave you a duplicate pointer. std.meta wasn't comparing the strings, it was comparing the address the compiler placed them... there be dragons in the code you were using

1738116089
grayhatter!~grayhatte@user/grayhatter
std.meta.eql probably shouldn't exist

1738116386
grayhatter!~grayhatte@user/grayhatter
I wonder... what use case am I missing?

1738116457
torque!~tachyon@user/torque
it's useful for comparing structs

1738116490
torque!~tachyon@user/torque
and various other things that don't have an == operator

1738116784
grayhatter!~grayhatte@user/grayhatter
unless the structs have pointers, and the deref'd value is equal

1738116845
grayhatter!~grayhatte@user/grayhatter
in that case, it feels misleading

1738116899
grayhatter!~grayhatte@user/grayhatter
there's a question left that feels a bit deeper, but I can't articulate it... I'll have to give it more thought

1738116915
torque!~tachyon@user/torque
to a certain extent it's a matter of understand how it works

1738116934
torque!~tachyon@user/torque
it may make sense to have an equalDeep function like testing does

1738117015
ezzieyguywuf!~Unknown@user/ezzieyguywuf
are y'all aware of any similarly high calibar vulkan bindings in zig or nah?

1738118280
ezzieyguywuf!~Unknown@user/ezzieyguywuf
nah, zig-wayland seems rly nice, and maybe with zig 0.13.0 it is, but zig-next branch doesn't rly seem ready

1738118318
ezzieyguywuf!~Unknown@user/ezzieyguywuf
it's fine, I probably need to do things the hard way a bit anyway since I don't rly know wayland

1738120899
ezzieyguywuf!~Unknown@user/ezzieyguywuf
what is the difference between `anyopaque` and `*anyopaque`? I see e.g. this generated by the translator: `global: ?*const fn (?*anyopaque, ?*struct_wl_registry, u32, [*c]const u8, u32) callconv(.c) void`

1738121682
torque!~tachyon@user/torque
`anyopaque` cannot exist without a pointer qualifier

1738121707
torque!~tachyon@user/torque
as a type, it's equivalent to C `void*`

1738121751
torque!~tachyon@user/torque
to be clear `?*anyopaque` is equivalent to c `void *`

1738121812
ezzieyguywuf!~Unknown@user/ezzieyguywuf
"it's equivalent" do you mean `anyopaque` or `*anyopaque`?

1738121843
torque!~tachyon@user/torque
I clarified in my third statement

1738121851
ezzieyguywuf!~Unknown@user/ezzieyguywuf
also separate question: is it possible to get an address to a function in a struct instance to pass to another function?

1738121856
ezzieyguywuf!~Unknown@user/ezzieyguywuf
torque: ah so you did, thanks

1738121926
torque!~tachyon@user/torque
`anyopaque` itself is of unknown size, so it can't be used directly. a pointer always has a known size, so `*anyopaque` can be used to point to some memory that doesn't have a type associated with it. However, like all other pointers in zig, it cannot be `null`, so you need to add the optional, i.e. `?*anyopaque` to get the semantics of c `void *`

1738122011
ezzieyguywuf!~Unknown@user/ezzieyguywuf
makes sense!

1738122015
ezzieyguywuf!~Unknown@user/ezzieyguywuf
thanks!

1738122022
torque!~tachyon@user/torque
if I've understood your question correctly, struct instances do not contain functions (though you could define a struct with fields holding functin pointers). "methods" are just decls within the struct's namespace and can be accessed directly through the struct type

1738122068
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah, so I'm asking if I can get an address to a method then

1738122071
torque!~tachyon@user/torque
so you could get a function pointer with `@TypeOf(my_struct).function_name`, but there is no way to get a bound function

1738122304
ElGatoPanzon!~ElGatoPan@static.46.89.161.5.clients.your-server.de
Trying to get a working errorformat for vim and "zig build test" output, it's kind of coming along https://i.ibb.co/rKztKP25/Screenshot-select-area-20250128214454.png

1738122326
ezzieyguywuf!~Unknown@user/ezzieyguywuf
the problem I'm trying to solve is creating a similar `handleRegistry` function in zig https://gitlab.com/amini-allight/wayland-vulkan-example/-/blob/master/src/main.c?ref_type=heads#L139-156 , I'd like to avoid using global state to do for example the `compositor =...` portion of it, so I thought I could create a struct with `compositor` as a member variable, and a `handleRegistry` method, and then use 

1738122332
ezzieyguywuf!~Unknown@user/ezzieyguywuf
that method in registryListener struct (which expects a function pointer) https://gitlab.com/amini-allight/wayland-vulkan-example/-/blob/master/src/main.c?ref_type=heads#L86-88

1738122359
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I supposed I could break this out into a separate zig file (which is just a struct itself right?) but I'm not really sure if that solves my problem

1738122573
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I don't really understand how zig-wayland does it. in their example, they pass in a struct which is where the state gets stored https://codeberg.org/ifreund/zig-wayland/src/branch/master/example/hello/hello.zig#L19-L25, but the only definition I see for `setListener` is here https://codeberg.org/ifreund/zig-wayland/src/branch/master/src/scanner.zig#L653-L662 and I don't understand how that corresponds 

1738122579
ezzieyguywuf!~Unknown@user/ezzieyguywuf
to the example

1738122625
ezzieyguywuf!~Unknown@user/ezzieyguywuf
especially since in the example it seems to take 3 parameters but in scanner.zig it seems to take 4 lol

1738122675
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hmm maybe the first parameter is Self...

1738125348
torque!~tachyon@user/torque
trying to understand the generated code is probably a bit of a challenge

1738125368
torque!~tachyon@user/torque
the first parameter is indeed `registry`

1738125419
torque!~tachyon@user/torque
the actual magic is probably moreso in the addDispatcher function

1738126610
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I thought the same

1738127006
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah hah https://wayland.freedesktop.org/docs/html/apb.html#:~:text=A%20dispatcher%20is,function%20calling%20systems.

1738127032
ezzieyguywuf!~Unknown@user/ezzieyguywuf
(that link only works in chrome, in case you're in a a different browser here's the relevant part): "A dispatcher is a function that handles the emitting of callbacks in client code. For programs directly using the C library, this is done by using libffi to call function pointers. When binding to languages other than C, dispatchers provide a way to abstract the function calling process to be friendlier 

1738127038
ezzieyguywuf!~Unknown@user/ezzieyguywuf
to other function calling systems.

1738127041
ezzieyguywuf!~Unknown@user/ezzieyguywuf
"

1738136331
tsujp!497e1f7b6a@sourcehut/user/tsujp
what's the story with zig and its tree sitter (if any) grammar, the ones I can see are no longer maintained and the zig emacs mode has borked fontification which results in frustrating code editing experiences, especially while typing since its indentation rules do not match what `zig fmt` wants

1738136375
tsujp!497e1f7b6a@sourcehut/user/tsujp
the tree-sitter grammar _probably_ still is close enough, especially if it's been authored well, but in general going for a tree-sitter first, and regexp second approach would be better here imho

1738136403
tsujp!497e1f7b6a@sourcehut/user/tsujp
neovim etc etc all support tree-sitter so that approach first is more portable for other editors. I'll happily contribute to this but idk what the status quo is right now

1738139416
ifreund!2940d10f8b@user/ifreund
ezzieyguywuf: https://github.com/Snektron/vulkan-zig

1738139443
ifreund!2940d10f8b@user/ifreund
as for zig-waylands next-zig branch, it isn't officially supported

1738139489
ifreund!2940d10f8b@user/ifreund
that said, I will be cleaning it up and testing all my stuff against zig master in the next few days to check for regressions before 0.14.0

1738159085
tsujp!497e1f7b6a@sourcehut/user/tsujp
test is a namespace right? can I merge into that namespace a function so I can call it without having to @import?

1738159145
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
testing is a namespace, and no you can’t merge into it

1738159184
tsujp!497e1f7b6a@sourcehut/user/tsujp
big rogies, cheers

1738159192
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
you *could* merge it into your thing using ‘usingnamespace’ but that pattern is generally frowned upon. makes readability harder

1738159213
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
and probably compiler complexity?

1738159254
tsujp!497e1f7b6a@sourcehut/user/tsujp
my motivation here is just abstracting scaffolding of some logic before each unit test. Trying to de-duplicate a few lines of var = try ... in each test

1738160691
ksynwa!~ksynwa@49.36.209.119
What is the suggested way of moving a file from one directory to another? std.fs.Dir.rename(Absolute)?

1738160842
ifreund!2940d10f8b@user/ifreund
rename(2) is indeed the syscall for that on unixy systems

1738161549
tsujp!497e1f7b6a@sourcehut/user/tsujp
is the httpz author here? if so, how come you're using a while loop and not a labelled switch for your ztl vm?

1738161569
tsujp!497e1f7b6a@sourcehut/user/tsujp
also, what's the best way to do string literal to []const u8 at comptime?

1738161623
ifreund!2940d10f8b@user/ifreund
@as([]const u8, "foo")

1738161784
tsujp!497e1f7b6a@sourcehut/user/tsujp
oh sorry, a string literal of hex bytes

1738162432
ifreund!2940d10f8b@user/ifreund
std.fmt.hexToBytes?

1738163304
tsujp!497e1f7b6a@sourcehut/user/tsujp
i was trying this before and I get  array literal requires address-of operator (&) to coerce to slice type '[]const u8'

1738163316
tsujp!497e1f7b6a@sourcehut/user/tsujp
so im making a small reproduction in godbolt but it works there.. what

1738163697
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh hi ifreund! thanks for your message. I'm happy to help you test, I've already been digging into things a bit e.g. it seems that the parameters for Scanner.create() have changed so the sample build.zig in the example dir no longer works as shown

1738163715
ezzieyguywuf!~Unknown@user/ezzieyguywuf
this would be a better use of my time than e.g. writing my own client using the wire protocol directly lol

1738163839
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: you think I'd be better off using/tracking Snektron's project?

1738163878
ifreund!2940d10f8b@user/ifreund
ezzieyguywuf: the change to Scanner.create() was unnecessary and has been reverted on master

1738163884
ifreund!2940d10f8b@user/ifreund
next-zig is just out of date

1738163902
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: oh nice! I thought I looked for that, must have missed it

1738163909
ifreund!2940d10f8b@user/ifreund
I haven't used vulkan-zig myself, but Snektron very much knows what they are doing

1738163910
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ahhhh next-zig is out of date, got it

1738163919
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: I'll def give it a go then

1738163924
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm i cant run tests on godbolt

1738163948
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah, but that's for vulkan, I'm looking at wayland rn

1738164086
tsujp!497e1f7b6a@sourcehut/user/tsujp
ifreund: https://zig.godbolt.org/z/fePh9Wax8 im doing this but if you run that locally so the test executes it should complain as mine does

1738164197
tsujp!497e1f7b6a@sourcehut/user/tsujp
oh i didnt call my hex to bytes lol

1738164233
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I can't get the idea of writing my own wayland client out of my head though lol

1738164241
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah there now it fails

1738164248
torque!~tachyon@user/torque
tests don't return a value so why do you have `return false` there

1738164281
ezzieyguywuf!~Unknown@user/ezzieyguywuf
but then I dunno if it would work with e.g. https://registry.khronos.org/vulkan/specs/latest/man/html/VkWaylandSurfaceCreateInfoKHR.html

1738164296
tsujp!497e1f7b6a@sourcehut/user/tsujp
torque: i wanted to see if godbolt was going to execute them by putting known garbage in the test

1738164395
torque!~tachyon@user/torque
anyway, your hex to bytes function returns an array, which cannot coerce to a slice. you have to do `&htb("aa")` to get a pointer to the array, which is coercible

1738164536
tsujp!497e1f7b6a@sourcehut/user/tsujp
torque: https://zig.godbolt.org/z/67Ehn684W i need to mark the return type as an error union or can I catch unreachable? mostly asking about the best approach here

1738164559
tsujp!497e1f7b6a@sourcehut/user/tsujp
its just meant to be a simple comptime utility to avoid doing literally this &.{ 0x01, 0x02, 0x03 }   and so on

1738164559
ifreund!2940d10f8b@user/ifreund
ezzieyguywuf: pushed a relatively untested update to next-zig

1738164581
ifreund!2940d10f8b@user/ifreund
if you want to use mesa's WSI you do indeed need to use libwayland

1738164602
torque!~tachyon@user/torque
if you're running the function at comptime `catch unreachable` is fine and will cause a compile error on invalid input

1738164654
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah actually im not _really_ running it at comptime since the tests execute at runtime

1738164664
tsujp!497e1f7b6a@sourcehut/user/tsujp
all i want is the string inlined, ugh this is way harder than it should be

1738164739
tsujp!497e1f7b6a@sourcehut/user/tsujp
inline fn doesn't work either

1738164826
tsujp!497e1f7b6a@sourcehut/user/tsujp
all I want to do is this:    foo("015f3322");     instead of having to do    foo(&.{ 0x01, 0x5f, 0x33, 0x22 });   as you can imagine I want to pass more data etc and the seocnd form is way too verbose

1738165471
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: I'll give it a whirl thanks

1738165482
ezzieyguywuf!~Unknown@user/ezzieyguywuf
what is WSI?

1738166174
ifreund!2940d10f8b@user/ifreund
ezzieyguywuf: window system integration

1738166180
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: ah, thank you.

1738166181
ifreund!2940d10f8b@user/ifreund
i.e. VkWayland stuff

1738166191
ezzieyguywuf!~Unknown@user/ezzieyguywuf
👍

1738166219
ifreund!2940d10f8b@user/ifreund
it's possible to do all the wayland bits manually, but it would be a lot of boring work for no real benefit

1738166231
ezzieyguywuf!~Unknown@user/ezzieyguywuf
fax

1738166311
tsujp!497e1f7b6a@sourcehut/user/tsujp
well ive been trying for 6 hours and nothing works so either im really dumb today or this is impossible

1738166349
ifreund!2940d10f8b@user/ifreund
tsujp: it shouldn't be very hard...

1738166622
ifreund!2940d10f8b@user/ifreund
tsujp: something like this should work: https://0x0.st/88BL.txt

1738166625
ifreund!2940d10f8b@user/ifreund
(untested)

1738166897
freshcoffee!~fresh@user/freshcoffee
you can still have your error... `fn htb(comptime bytes: []const u8) ![bytes.len / 2]u8 {` and `const data = &(try htb("040506"));`

1738166906
hadronized!~hadronize@2001:41d0:a:fe76::1
when is zig 0.14 supposed to release?

1738166922
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: tsujp: it does at least compile now https://zig.godbolt.org/z/78e8EMWxv

1738166937
tsujp!497e1f7b6a@sourcehut/user/tsujp
ifreund: it doesnt work, it reaches the compile error.. very perplexing because I too think this should be easy but im obviously missing something

1738166973
hadronized!~hadronize@2001:41d0:a:fe76::1
https://github.com/ziglang/zig/milestone/20 assuming this needs to reach 100% to have a stable 0.14, probably in a long time :(

1738166973
grayhatter!~grayhatte@user/grayhatter
hadronized: when it's ready; is the correct answer... but the cannon answer is sometime mid/late feb

1738166984
grayhatter!~grayhatte@user/grayhatter
the news pages says 17th

1738167062
ezzieyguywuf!~Unknown@user/ezzieyguywuf
freshcoffee: with that it finally works! 

1738167063
ezzieyguywuf!~Unknown@user/ezzieyguywuf
tsujp: https://zig.godbolt.org/z/jb4W9nha1

1738167116
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yo that's dope af `Got: { 4, 5, 6, ab, 8, 16, aa, ff }`

1738167182
hadronized!~hadronize@2001:41d0:a:fe76::1
ah I should read the news page more often, thank you grayhatter 

1738167192
tsujp!497e1f7b6a@sourcehut/user/tsujp
its a shame the callsite can't be cleaner

1738167256
ezzieyguywuf!~Unknown@user/ezzieyguywuf
tsujp: wdym?

1738167269
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh bc &(try ...)

1738167272
ezzieyguywuf!~Unknown@user/ezzieyguywuf
nah it's fine

1738167279
freshcoffee!~fresh@user/freshcoffee
yeah for that you need to do ifreund's way... handle the comptime error inside htb()

1738167287
tsujp!497e1f7b6a@sourcehut/user/tsujp
well its my understanding that if we're passing this in and it's comptime known we might have been able to avoid &(try ...) at the callsite

1738167306
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah but ifreund's doesn't work either, I tried something similar earlier and I don't know why

1738167320
tsujp!497e1f7b6a@sourcehut/user/tsujp
is this a compiler bug in zig, or am __i__ doing something wrong is mainly what I want to know now

1738167357
ezzieyguywuf!~Unknown@user/ezzieyguywuf
you can drop the &(try ...) and instead leave it as try... and then `try foo.doit(&data)`, that cleans it up

1738167444
tsujp!497e1f7b6a@sourcehut/user/tsujp
sure but why can't a compiler error be surfaced from htb to avoid needing it at the call site

1738167676
ezzieyguywuf!~Unknown@user/ezzieyguywuf
if I replace @compilerError(...) with std.debug.print it works

1738167707
freshcoffee!~fresh@user/freshcoffee
yeah or something like `@panic("hexToBytes failed")`

1738167720
ezzieyguywuf!~Unknown@user/ezzieyguywuf
https://zig.godbolt.org/z/x8rP6GrEc

1738167727
ezzieyguywuf!~Unknown@user/ezzieyguywuf
not sure _why_ @compilerError doesn't work though...

1738167862
tsujp!497e1f7b6a@sourcehut/user/tsujp
omg so this might be a bug and im not just insane...?

1738167984
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yea I guess @compilerError just isn't needed here https://zig.godbolt.org/z/ooTroa89v

1738167990
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I don't know enough to say if it's a bug or not

1738168020
freshcoffee!~fresh@user/freshcoffee
i think it's because even though the fn has a comptime param, it's not guaranteed to be callled _AT_ comptime. to do that, we need uglier syntax,

1738168022
ezzieyguywuf!~Unknown@user/ezzieyguywuf
but changing the return type to allow an error and then `try std.fmt.hexToBytes` seems to Just Work™

1738168030
freshcoffee!~fresh@user/freshcoffee
`const data = &comptime htb("040506");`

1738168036
ezzieyguywuf!~Unknown@user/ezzieyguywuf
🤔

1738168041
ezzieyguywuf!~Unknown@user/ezzieyguywuf
maybe comptime fn?

1738168098
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh that's not a thing

1738168118
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah afaik a "comptime function" is one which takes a comptime parameter

1738168159
tsujp!497e1f7b6a@sourcehut/user/tsujp
im definitely not experienced enough that what im about to say carries weight but this _feels_ like maybe a bug

1738168174
hadronized!~hadronize@2001:41d0:a:fe76::1
is there an idiom to convert between packed structs and integers?

1738168186
tsujp!497e1f7b6a@sourcehut/user/tsujp
more likely user error but idk, gotta leave it with `try` at the callsite then, doesn't seem possible

1738168212
hadronized!~hadronize@2001:41d0:a:fe76::1
for instance, if I have a bitset (packed structs full of bool), should I have a method pair from / to int, or should I just assume the caller will do a @bitCast with the right amount of bits?

1738168223
freshcoffee!~fresh@user/freshcoffee
hhah oh wow check this

1738168253
tsujp!497e1f7b6a@sourcehut/user/tsujp
@compileError being reached means the semantic analysis is reaching it but it shouldn't be as far sa I'm aware

1738168257
ezzieyguywuf!~Unknown@user/ezzieyguywuf
chiggidychiggidychiggidy check

1738168270
freshcoffee!~fresh@user/freshcoffee
where's the godbolt share button... lol

1738168279
tsujp!497e1f7b6a@sourcehut/user/tsujp
top right

1738168305
freshcoffee!~fresh@user/freshcoffee
https://zig.godbolt.org/z/zs7czvb7W

1738168358
tsujp!497e1f7b6a@sourcehut/user/tsujp
insane

1738168377
freshcoffee!~fresh@user/freshcoffee
2 things. mark fn as inline, then make its body all comptime.

1738168383
ezzieyguywuf!~Unknown@user/ezzieyguywuf
tsujp: I don't think it's a bug just requires a few more comptimes https://zig.godbolt.org/z/jTPTYhq7E

1738168387
tsujp!497e1f7b6a@sourcehut/user/tsujp
MAYBE that comptime block is needed because hexToBytes doesn't have any comptime parameters and it wasn't being analysed as such?

1738168397
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ahhh or that lol nice one freshcoffee 

1738168433
ezzieyguywuf!~Unknown@user/ezzieyguywuf
tsujp: I imagine that any one thing _not_ being comptime pollutes the analysis since now it must assume anything can be un-comptime

1738168437
ezzieyguywuf!~Unknown@user/ezzieyguywuf
this makes logical sense to me

1738168460
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yooo I'm so glad you did this excercise tsujp I learned a lot about comptime today :)

1738168474
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah hangon, is it because the zig compiler didnt analyse hexToBytes here as comptime because only one of its parameters was? `comptime bytes` is marked as such, but `var buf` isn't _explicitly_ comptime and in both cases where you two mark `var buf` as comptime (either by surrounding everything in a block, or `comptime var`) it then works

1738168484
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah ezzieyguywuf

1738168494
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmmmmmmmmmmmmmmmm maybe we learned someting here

1738168516
freshcoffee!~fresh@user/freshcoffee
the compiler gave me a hint as to the comptime body... first did `_ = comptime std.fmt.hexToBytes()` then it complained `buf` was not comptime known.

1738168530
tsujp!497e1f7b6a@sourcehut/user/tsujp
zig compiler on trunk will only analyse a called function as comptime if ALL of its parameters are explicitly marked comptime

1738168546
tsujp!497e1f7b6a@sourcehut/user/tsujp
i dont recall getting such hint, lemme retry

1738168608
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I don't remember that hint either

1738168616
ezzieyguywuf!~Unknown@user/ezzieyguywuf
also I'm only half paying attention I'm supposed to be working lol

1738168797
tsujp!497e1f7b6a@sourcehut/user/tsujp
hey guys

1738168813
tsujp!497e1f7b6a@sourcehut/user/tsujp
look at this.... ezzieyguywuf freshcoffee https://zig.godbolt.org/z/z4W8aYPcG

1738168906
ezzieyguywuf!~Unknown@user/ezzieyguywuf
that certainly works but probably provides less helpful error messages (or at least looks like it `Program terminated with signal: SIGSEGV

1738168925
ezzieyguywuf!~Unknown@user/ezzieyguywuf
`) when there's an error converting, e.g. if you provide an odd number of characters or a non-hex character

1738168961
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah that one is runtime it looks like

1738168972
tsujp!497e1f7b6a@sourcehut/user/tsujp
i cant reproduce this hint, too much spaghetti in my mind now too

1738168986
tsujp!497e1f7b6a@sourcehut/user/tsujp
but hey we got a runtime AND comptime version of this... (the runtime one kinda silly tho)

1738168992
freshcoffee!~fresh@user/freshcoffee
yeah it'll bury the most likely error... not passing proper string

1738169005
tsujp!497e1f7b6a@sourcehut/user/tsujp
this was meant to be a "simple" "quick" function many hours ago ;)

1738169038
ezzieyguywuf!~Unknown@user/ezzieyguywuf
dude I went down such a rabit hole last night with wayland lol, never ended up creating a window (yet)

1738169059
ezzieyguywuf!~Unknown@user/ezzieyguywuf
but honestly I'm glad to be working on personal projects, ever since I started working as a software engineer a few years ago I completely stopped

1738169079
freshcoffee!~fresh@user/freshcoffee
oh actually the unreachable is not bad.

1738169084
freshcoffee!~fresh@user/freshcoffee
for the error report.

1738169104
ezzieyguywuf!~Unknown@user/ezzieyguywuf
it's not _bad_

1738169108
ezzieyguywuf!~Unknown@user/ezzieyguywuf
but I don't like the SIGSEV

1738169111
ezzieyguywuf!~Unknown@user/ezzieyguywuf
it's sloppy\

1738169140
tsujp!497e1f7b6a@sourcehut/user/tsujp
i go on so many side quests, and im probably way too hard headed in just giving up earlier but idk

1738169140
freshcoffee!~fresh@user/freshcoffee
oh hah i didn't even notice. I thought it was just a caught error. yah yuck

1738169166
ezzieyguywuf!~Unknown@user/ezzieyguywuf
🤮

1738169168
tsujp!497e1f7b6a@sourcehut/user/tsujp
btw ifreund and torque we solved it now lmao (closure)

1738169185
ezzieyguywuf!~Unknown@user/ezzieyguywuf
(no, there are no closures in zig)

1738169210
tsujp!497e1f7b6a@sourcehut/user/tsujp
get out

1738169218
freshcoffee!~fresh@user/freshcoffee
oh btw we can have cake and eat it too. leave the unreachable, and the inline/comptime body.

1738169249
freshcoffee!~fresh@user/freshcoffee
https://zig.godbolt.org/z/574ors4Tc

1738169252
freshcoffee!~fresh@user/freshcoffee
no segv

1738169323
tsujp!497e1f7b6a@sourcehut/user/tsujp
actually cooked

1738169426
tsujp!497e1f7b6a@sourcehut/user/tsujp
is this a "we did it, reddit!" moment?

1738170134
grayhatter!~grayhatte@user/grayhatter
tsujp: is this godbolt link supposed to be a closure?

1738170343
ezzieyguywuf!~Unknown@user/ezzieyguywuf
lol no

1738170913
grayhatter!~grayhatte@user/grayhatter
where is the closure?

1738171242
tsujp!497e1f7b6a@sourcehut/user/tsujp
guys i meant closure as in the english definition of the word lmao

1738171272
tsujp!497e1f7b6a@sourcehut/user/tsujp
i said "get out" cos i thought you were doing a hectic pun in response (because zig doesnt have closures)

1738174875
ezzieyguywuf!~Unknown@user/ezzieyguywuf
lol I was

1738176238
Secondary!~Secondary@user/Secondary
Hi, is there something like @fieldParentPtr but for optionals? For example, if I have and optional `opt: ?i32` and use take its address `&opt.?` (which is a *i32) how can I get a *?i32 from this?

1738178148
hadronized!~hadronize@2001:41d0:a:fe76::1
Secondary: I guess it should be the same?

1738178162
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m saying that just because it’s the same in Rust, but I guess Zig should do the same optimization here

1738178315
hadronized!~hadronize@2001:41d0:a:fe76::1
https://zigbin.io/70d7a3

1738178317
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s the same

1738179163
Secondary!~Secondary@user/Secondary
hmm, this is not quite what I was looking for. More specifically, I have a `const S = struct { a: ?i32 }`, I pass the value to a function `const my_s = S { .a = 42 }; f(&my_s.a.?, cb)` eventually `cb` will be called `cb(self: *i32)` and inside `cb` I need to get a pointer back to the struct: `cb(self: *i32) { const container: *S =

1738179163
Secondary!~Secondary@user/Secondary
@fieldParentPtr("a", self); }` but it doesn't work complaining that `self` is not a `*?i32`

1738180061
freshcoffee!~fresh@user/freshcoffee
can you preserve the optional? ie. `f(&my_s.a, cb)`

1738180340
Secondary!~Secondary@user/Secondary
I guess I could change the signature of callbacks to be `*const fn Cb(user_data: *?T) void` but to me it seems like a suboptimal solution since it doesn't reflect the intent in the type (something that Zig is very good at)

1738180559
Secondary!~Secondary@user/Secondary
And further more, now all my inner fields that are passed to the callback will have to change their type to be optionals, something that is entirely unnecessary.

1738186229
dsal!sid13060@id-13060.lymington.irccloud.com
I've been working in 0.13.0.  How can I find out what's changing in 0.14.0?

1738186239
dsal!sid13060@id-13060.lymington.irccloud.com
Or perhaps, is there an easy way for me to work in 0.14.0 in nix?

1738187185
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I have a conundrum, possibly a compiler bug

1738187198
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
If it's not a bug, my question changes to "how do I properly do this?"

1738187244
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
https://zigbin.io/1f1755

1738187266
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Trying to intrusively init an optional works in Debug/ReleaseSafe but *not* in ReleaseFast

1738187324
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
A workaround is to have the optional be a ?*Bar, but I don't *need* to heap allocate that struct except to get around this

1738187479
ifreund!2940d10f8b@user/ifreund
rockorager: you need `foo.bar = @as(Bar, undefined);`

1738187489
ifreund!2940d10f8b@user/ifreund
otherwise the bit for the ? is undefined as well

1738187497
ifreund!2940d10f8b@user/ifreund
you want the ? bit defined but the Bar part undefined

1738187611
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ifreund: wonderful, thank you

1738187702
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Why is the behavior different?

1738187757
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
In a safe build, I would have expected that .? referencing an undefined optional would be caught?

1738187796
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I assume the entire underlying ?Bar is set to undefined...so then when I deref it with &foo.bar.? I would have though it would trigger safety checks

1738187812
ifreund!2940d10f8b@user/ifreund
undefined doesn't have perfect safety checks

1738187825
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Ah, ok

1738187899
ifreund!2940d10f8b@user/ifreund
https://github.com/ziglang/zig/issues/63

1738188179
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
> 63 wow

1738188417
ifreund!2940d10f8b@user/ifreund
tsujp: here's how to make it reutrn a slice if you're curious: https://zig.godbolt.org/z/8KTjed1br

1738188455
ifreund!2940d10f8b@user/ifreund
it currently needs a lame copy at comptime due to an arbitrary restriction enforced by the compiler that is planned to be removed

1738193132
freshcoffee!~fresh@user/freshcoffee
this workaround seems to avoid the comptime copy: https://zig.godbolt.org/z/M89s43Eqs

1738193161
freshcoffee!~fresh@user/freshcoffee
or maybe it still does copy

1738193535
grayhatter!~grayhatte@user/grayhatter
are you guys just playing around with the compiler? or actually trying to use this code for something?

1738193544
grayhatter!~grayhatte@user/grayhatter
if it's the latter? **why?!**

1738193633
grayhatter!~grayhatte@user/grayhatter
Secondary: you might not be able to do that because, IIRC, ?type doesn't have a defined memory layout. What outcome are you going for?

1738193719
grayhatter!~grayhatte@user/grayhatter
i.e. why didn't `@fieldParentPtr("a", &opt)` work for you?

1738194090
grayhatter!~grayhatte@user/grayhatter
Secondary: ahh, sorry, had to read your example multiple times to actually understand what you meant. `&(opt) != &(opt.?)` so if you pass `&(opt.?)` to the callback, you're not passing the pointer that would work with @fieldParentPtr

