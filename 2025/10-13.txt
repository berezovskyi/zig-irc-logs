1760315764
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have code like https://zigbin.io/033c74 it doesn't raise error but segfaults

1760315801
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can see the error-1 and 2 to i know it works till than, then its segfault on return -1;

1760316100
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is what the whole function looks like: https://zigbin.io/93bce0 sorry for the clutter sill working on it. 

1760317225
deevus!~deevus@123.51.31.231
Zig 0.15.2 is out

1760317257
deevus!~deevus@123.51.31.231
What are the headlines?

1760317299
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nice, any new changes in 0.15.2 or is it more of a bug fixes? 

1760317430
deevus!~deevus@123.51.31.231
Not sure as there are no release notes for it yet, and it isn't published as a release on GitHub

1760317470
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
do you know what hash is being used? it doesn't matched for me 

1760317485
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`Q3siOVXUmmo25iP5QZpPztyf4A/CtOm50JrsxDaGf0pJfA3ADy/4SJPsljbA9+SupZlawYCJRR2R8z2abkmVCQ==`

1760317535
deevus!~deevus@123.51.31.231
Apart from "0.15.2 is released", I know nothing.

1760317583
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i downloaded "zig-x86_64-linux-0.15.2.tar.xz" that hash doesn't pass

1760320832
torque!~tachyon@user/torque
it's a bugfix release

1760320847
torque!~tachyon@user/torque
mostly focused on writergate-related fixes

1760320886
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nice, bug fixes are welcome as well :)

1760320907
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have upgraded since hash didn't match. 

1760321038
torque!~tachyon@user/torque
the minisign signature is valid for me

1760321382
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i tried this: https://zigbin.io/2398e7

1760321712
torque!~tachyon@user/torque
you don't need to use `-p`, minisign will automatically look for <filename>.minisig

1760321807
torque!~tachyon@user/torque
based on the error message, do you actually have zig's minisign.pub?

1760321839
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have `zig-x86_64-linux-0.15.2.tar.xz.minisig` 

1760321846
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
and `zig-x86_64-linux-0.15.2.tar.xz`

1760321892
torque!~tachyon@user/torque
you need the pubkey that is at the top of https://ziglang.org/download/ i.e. RWSGOq2NVecA2UPNdBUZykf1CCb147pkmdtYxgb3Ti+JO/wCYvhbAb/U

1760321907
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
simple md5/sha* would have been better, i just wana confirm that download isn't corrupt

1760321910
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i tried that as well.

1760321915
torque!~tachyon@user/torque
you can specify that on the command line or you can save it to a file named `minisign.pub`

1760321936
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/826a24

1760321941
torque!~tachyon@user/torque
however, if you save it to a file, it needs a line with the contents `untrusted comment:`

1760321968
torque!~tachyon@user/torque
you need `-P`, not `-p`

1760322007
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there we go, its working. :D

1760322030
torque!~tachyon@user/torque
you can confirm that the download isn't corrupt simply by extracting it. however, it's much better to verify the signature

1760322055
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya. 

1760322200
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i also use https://pypi.org/project/ziglang/#history wondering if they will update that as well. 

1760322694
torque!~tachyon@user/torque
afaik that's just updated manually so it will probably be updated eventually 

1760322737
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see, makes sense.

1760327635
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, if you have some free time can you look at https://zigbin.io/93bce0 i am not sure why line: 33-36 will segfault

1760327705
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am guessing it has something to do with line: 28-29

1760332189
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looks like i found the flaw you can't exit out of `if (std.heap.c_allocator.alloc(C.iovec, self.len)) |loop| { ... }` block, so not sure if this is a bug of a feature!

1760332204
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
* of a feature!

1760333607
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ha! so in zig you can't exit within a for loop? i had to break and return... what a weird way to find this feature out. 

1760335182
torque!~tachyon@user/torque
you can definitely `return` inside of a for loop. a segfault is either a miscompilation or something weird going on in your code

1760336089
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well it started working soon as i started using break, out of for loop and return

1760336230
andrewrk!~andrewrk@mail.ziglang.org
remember what I said: don't work around problems. work to understand them

1760336278
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can only read the error message i get to understand going wrong. 

1760336610
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this code work: https://zigbin.io/d1d770 line: 33 + is where i have to do that break thing. 

1760336750
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
WHY!!! zig is trolling me. same code replaced break with return -1; now all of a sudden is working!!!

1760337134
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i think i found the actual bug, line: 35 if i move it at the end of the for loop i get segfault, if i move it to where it is now, no segfault. So it must be when .free() gets called something goes wrong.

1760337308
andrewrk!~andrewrk@mail.ziglang.org
test your hypothesis

1760337396
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes now its working with return -1;, i am glad i am use return inside for loop as well.

1760338714
daurnimator!~daurnimat@vultr.daurnimator.com
0.15.2 is not listed on https://github.com/ziglang/zig/releases ?

1760339169
andrewrk!~andrewrk@mail.ziglang.org
proprietary github metadata is deprecated, please use git tags

1760340579
daurnimator!~daurnimat@vultr.daurnimator.com
okay. Generally github hide tags if you've ever made a github release

1760340594
daurnimator!~daurnimat@vultr.daurnimator.com
I also subscribed to releases; on the assumption they would be there in future.

1760340637
daurnimator!~daurnimat@vultr.daurnimator.com
It might still be nice to post a github release with a body that just has link back to e.g. the release on the zig website

1760340728
Amun-Ra!~amun-ra@retro.rocks
at least small info to switch tag tab in the last release

1760341174
torque!~tachyon@user/torque
<stealth_> i think i found the actual bug, line: 35 if i move it at the end of the for loop i get segfault, if i move it to where it is now, no segfault

1760341189
torque!~tachyon@user/torque
there's a very obvious explanation for this which I hope you understand

1760341286
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, not sure what you are getting at, but it was more to do with python. in zig you think panic will exit the program and memory will be freed but since there is python it will still call that __free__ method to release that memory.

1760341308
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/fc9b4b

1760341580
torque!~tachyon@user/torque
yes, the point is that the way you're constructing the Iovec object, when you return early you're leaving some of its memory undefined

1760341648
torque!~tachyon@user/torque
the python garbage collector will always try to free it yeah but the point is that reordering the logic prevents you from letting the caller get undefined memory in the first place (actually not true, if your allocation fails you will have the same problem)

1760341818
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i was assigning `self.iovec = loop.ptr;` at the end so it wasn't getting memory at all but __free__ was still trying to .free() without memory being assigned, thus segfault.

1760341871
torque!~tachyon@user/torque
the problem is that you set self.len before you set self.iovec and your free function depends on self.len to determine if self.iovec has actually been initialized and needs to be freed

1760341887
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes that too 

1760341895
torque!~tachyon@user/torque
it would probably be better to restructure the logic so that the entire object gets set or not at all

1760341994
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/38c19a this is what i am working on atm

1760342033
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
wait that's got bug, 

1760342153
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am still coding so this should be bit better https://zigbin.io/6091be

1760343514
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://ziglang.org/download/

1760343529
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://ziggit.dev/t/zig-0-15-2-released/12466/4

1760343554
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
0.15.2 still not listed I think.

1760343632
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lol its magic! that 0.15.2 release comes and goes...

1760343833
squeek502!~squeek502@user/squeek502
will likely be fixed when the next tarballs are done building, https://github.com/ziglang/www.ziglang.org/commit/cb8bbd23a025e08b99149cd5bddbddad06aa07e7 should be the fix i believe

1760344738
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
hm, with 0.15.2 my project is getting stuck building dwp/gbp

1760344933
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
https://codeberg.org/tranzystorekk/zioom this one

1760344955
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
got to 20 minutes spinning on the dwp/gbp stage

1760354759
stealth__!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there a way to prevent overflow in struct? something that has c_uint field 

1760356447
stealth__!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nm, its cpython function that allows overflows, so lame.

1760381221
andrewrk!~andrewrk@mail.ziglang.org
squeek502: figured it out, I corrected the template but the CI job was already running and had a checkout of the old template. it's all solvable, just needs some time and attention put into completing automation of the release process

1760381239
andrewrk!~andrewrk@mail.ziglang.org
and we're kinda in the middle of migrating away from github so one thing at a time

1760382630
clevor!sid649024@id-649024.hampstead.irccloud.com
This appears to be a frontend regression. https://github.com/ziglang/zig/issues/25555

1760387809
lemons!~doggie@user/doggie-:49517
is there some option i can pass in my build.zig so that zig build test prints out that dopaminurgic "21/21 tests passed" on success? 

1760391199
grayhatter!~grayhatte@user/grayhatter
lemons: https://github.com/ziglang/zig/issues/15635

1760391813
clevor!sid649024@id-649024.hampstead.irccloud.com
lemons: `--summary all`

1760391843
lemons!~doggie@user/doggie-:49517
clevor: yeah, gray's issue shown as well. (cheers) any way i can code that into build.zig?

1760391858
lemons!~doggie@user/doggie-:49517
theres addArg() but that doesnt seem to recognize summary

1760391869
clevor!sid649024@id-649024.hampstead.irccloud.com
Why does `std.testing.failing_allocator` still exist in master when `std.mem.Allocator.failing` exists?

1760391891
lemons!~doggie@user/doggie-:49517
run_test_sanlib.addArg("--summary all");

1760391901
lemons!~doggie@user/doggie-:49517
panics on build

1760391914
clevor!sid649024@id-649024.hampstead.irccloud.com
I mean when running `zig build`

1760391976
lemons!~doggie@user/doggie-:49517
yeah, i get that, but i dont want to do that every time and would rather the build step append that for me

1760391986
clevor!sid649024@id-649024.hampstead.irccloud.com
Oh

1760392003
lemons!~doggie@user/doggie-:49517
zig build test rolls off the keys much better than zig build test --summary all y'see

1760392085
clevor!sid649024@id-649024.hampstead.irccloud.com
It looks like your only options are patching Zig or making a script/alias that does that for you.

1760392534
lemons!~doggie@user/doggie-:49517
;-;

1760397634
squeek502!~squeek502@user/squeek502
clevor, `std.testing.failing_allocator` and `std.mem.Allocator.failing` are different, `std.testing.failing_allocator` won't invoke illegal behavior on resize/remap/free but `Allocating.failing` will

1760397642
clevor!sid649024@id-649024.hampstead.irccloud.com
Okay

1760397785
squeek502!~squeek502@user/squeek502
context: https://github.com/ziglang/zig/pull/25100

