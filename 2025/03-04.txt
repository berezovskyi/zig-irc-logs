1741097914
QuasarRyan!~QuasarRya@user/QuasarRyan
Is zig suitable for beginners or programmers who use low-level programming languages like C?

1741098065
ifreund!2940d10f8b@user/ifreund
Zig will be a lot easier to learn if you already understand C

1741098433
QuasarRyan!~QuasarRya@user/QuasarRyan
So as a very first beginner, I'd better choose C as the first low-level programming language. right?

1741098446
QuasarRyan!~QuasarRya@user/QuasarRyan
instead of zig

1741098732
ifreund!2940d10f8b@user/ifreund
QuasarRyan: you can choose either, people have certainly learned zig as their first low level language before

1741098775
ifreund!2940d10f8b@user/ifreund
the hard part won't be learning the language-specifc syntax and stuff, it will be learning the fundamentals of how a computer works at a lower level

1741098792
ifreund!2940d10f8b@user/ifreund
e.g. memory management

1741099191
bblack!~bblack@wikimedia/bblack-WMF
Zig is a whole lot more ergonomic than C for sure, and has all the low-level power and then some.  But yeah, starting with C you have decades of existing code and practices and so-on to draw on as you learn.

1741099238
bblack!~bblack@wikimedia/bblack-WMF
so, I'd say the learning curve might be slightly-steeper starting with Zig first.  But then you get to avoid picking up all the ugly/braindead patterns that C effectively forces you into :)

1741099273
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I learned zig coming from go and I honestly think it would be easier to learn zig instead of C. Go at least gave me *some* idea of pointers vs values so I had that going for me

1741099307
bblack!~bblack@wikimedia/bblack-WMF
These past few weeks I've been multitasking between a Zig project (porting legacy code from C) and a project that is still C (for $reasons), and as a veteran C programmer... now that I'm getting into C, it's really painful to work in C anymore, because I know what I'm missing.

1741099313
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The largest hurdle will be that some blog posts are old and won't compile anymore - so you won't be sure if you are doing something wrong, or if the code is out of date

1741099342
bblack!~bblack@wikimedia/bblack-WMF
err, I meant to say: "now that I'm getting into Zig, it's really painful to work in C anymore"

1741099377
ifreund!2940d10f8b@user/ifreund
yeah, Zig really does make all of C's pain points more evident

1741099475
QuasarRyan!~QuasarRya@user/QuasarRyan
Is there any book or tutorials of Computer Science/Operating System that use Zig as its sample code?

1741099481
QuasarRyan!~QuasarRya@user/QuasarRyan
Haven

1741099491
QuasarRyan!~QuasarRya@user/QuasarRyan
Haven't seen any.

1741099529
meidam!~meidam@user/meidam
I'd guess that's the language is too young for that. But haven't checked

1741099570
bblack!~bblack@wikimedia/bblack-WMF
I don't know of an OS, but there's a few larger projects out there to stare at for examples and insight

1741099592
bblack!~bblack@wikimedia/bblack-WMF
although honestly, the best example is the zig repo itself, the implementation of stdlib and the zig parser, etc.

1741099718
bblack!~bblack@wikimedia/bblack-WMF
https://github.com/topics/zig

1741099792
ifreund!2940d10f8b@user/ifreund
my take is that you probably want to learn C as well even if you do learn zig as C is the lingua franca of systems programming

1741099812
ifreund!2940d10f8b@user/ifreund
all major operating systems have their system interfaces defined in C

1741099834
ifreund!2940d10f8b@user/ifreund
and you will need to be able to read and understand C code sooner or later when doing systems programming

1741099864
flowerinthenight!~flowerint@user/flowerinthenight
Any word on whether 0.14.0 will be delayed (again) or not? https://ziglang.org/news/0.14.0-delayed/

1741099895
ifreund!2940d10f8b@user/ifreund
flowerinthenight: https://ziglang.org/devlog/2025/

1741099927
flowerinthenight!~flowerint@user/flowerinthenight
Ah, nice. Thanks, ifreund.

1741099943
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I think that build.zig.zon issue is going to prevent ghostty from moving to 0.14.0

1741100022
bblack!~bblack@wikimedia/bblack-WMF
the change to the hash format thing?

1741100046
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
No, ghostty has dependencies located within the project

1741100063
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
And there is apparently an issue with build.zig.zon requiring them to be outside the project directory

1741100089
bblack!~bblack@wikimedia/bblack-WMF
ah https://github.com/ziglang/zig/issues/23076

1741100104
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah that one, thanks

1741100123
ifreund!2940d10f8b@user/ifreund
rockorager: I've never understood why people do that rather than just directly creating modules

1741100144
ifreund!2940d10f8b@user/ifreund
for example: https://codeberg.org/river/river/src/commit/543697847f2167152ae25f775f39541591b8d020/build.zig#L153

1741100179
ifreund!2940d10f8b@user/ifreund
the package manager/build.zig.zon only makes sense if you're using it to fetch remote dependencies no?

1741100215
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
ifreund: vendored c deps

1741100216
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/ghostty-org/ghostty/blob/fd6e4fd615cd11b9486080aab97c01ba5029c70e/build.zig.zon#L59-L77

1741100241
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
These don't necessarily need to be brought in this way

1741100426
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'm not sure if there is a good way around adding those as modules without the build.zig.zon way?

1741100473
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I mean, we could add all of those ./pkg/* directors to allyourcodebase

1741100482
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
s/directors/directories

1741101379
ifreund!2940d10f8b@user/ifreund
rockorager: I would do this the same way I handle the vendored "micro deps" in river, just like I linked above

1741101432
ifreund!2940d10f8b@user/ifreund
there's no need for the indirection through build.zig.zon

1741101457
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Which line is the microdeps?

1741101461
ifreund!2940d10f8b@user/ifreund
just b.createModule() and you're done

1741101472
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
What do you set as the root source for create module?

1741101476
ifreund!2940d10f8b@user/ifreund
the line I linked? did it not show up properly for you?

1741101485
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
It did - but that was a .zig file

1741101522
ifreund!2940d10f8b@user/ifreund
maybe I missed something, from poking around in ./pkg it seemed like it was just zig bindings for C libariers?

1741101560
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah, not all

1741101561
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/ghostty-org/ghostty/tree/main/pkg/libpng

1741101655
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I admit I am pretty naive in a lot of the ghostty build.zig, and in general the zig build system so I might be massively missing something

1741102040
ifreund!2940d10f8b@user/ifreund
there's no hard blocker to that libpng example, there's nothing stopping you from doing @import("pkg/libpng/build.zig") from the root build.zig

1741102076
ifreund!2940d10f8b@user/ifreund
It definitely makes a better argument for the convenience/consistency of using the build.zig.zon indirection though even if it is not strictly necessary

1741102120
ifreund!2940d10f8b@user/ifreund
to be clear, I think this bug should definitely be fixed, but it's definitely something that can be worked around as well

1741102132
torque!~tachyon@user/torque
especially since zon can now be parsed by the stdlib, it's much nicer to have it as a declarative manifest of all dependencies, whether from the network or on disk

1741102178
torque!~tachyon@user/torque
I think you lose a lot by jamming stuff directly in build.zig tbh

1741102366
ifreund!2940d10f8b@user/ifreund
torque: I only recommend jamming stuff directly in build.zig when you are the upstream

1741102393
ifreund!2940d10f8b@user/ifreund
which seems to be the case for this ghostty code as well

1741102428
torque!~tachyon@user/torque
ghostty is also a library, afaik

1741103093
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
*will be* a library

1741116267
bblack!~bblack@wikimedia/bblack-WMF
I know I can @ptrCast() as a workaround, but I'm puzzled at why Zig doesn't auto-cast ptr-to-optional-foo to a ptr-to-foo.

1741116298
bblack!~bblack@wikimedia/bblack-WMF
I mean I guess I shouldn't puzzle at that, it makes sense on the reading side of things (don't want to read a null when non-null was expected)

1741116478
bblack!~bblack@wikimedia/bblack-WMF
I guess it's just about finding the right pattern...

1741116738
andrewrk!~andrewrk@mail.ziglang.org
ifreund: rockorager: sorry about the package path thing, it was a recent regression I caused. castholm submitted a fix that is set for landing before the release tag

1741116766
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
awesome, and no worries

1741116811
bblack!~bblack@wikimedia/bblack-WMF
https://zigbin.io/164c12

1741116848
bblack!~bblack@wikimedia/bblack-WMF
^ this is what I'm blabbering about.  I have a function with an out-pointer to a non-optional, and I want to be able to have it conditionally replace that null...

1741116872
bblack!~bblack@wikimedia/bblack-WMF
there seems to be no way outside of @ptrCast().  Using "&out_str.?" leads to a different error path.

1741117042
bblack!~bblack@wikimedia/bblack-WMF
(or I make a wrapper I guess, that takes a pointer-to-optional and handles the ptrcast.  I was just hoping there was an idiomatic way to handle this that I'm missing)

1741117478
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
bblack: https://zigbin.io/0d6246

1741117520
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
You don't actually have to check if out.* != null for this to work

1741117529
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I don't know the usecase though, so maybe you only want to set it if it's null

1741117548
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The point being, you are passing a pointer to an optional, so the argument is *?[]const u8

1741117818
bblack!~bblack@wikimedia/bblack-WMF
yeah the missing bit is that do_a_thing() is an interface I'm already using lots of other places, where the argument really is a pointer to a non-optional.

1741117834
bblack!~bblack@wikimedia/bblack-WMF
so I have to make a separate wrapper or a copy or whatever of do_a_thing() based on whether out it optional or not

1741117847
bblack!~bblack@wikimedia/bblack-WMF
s/out it/out is/

1741117893
bblack!~bblack@wikimedia/bblack-WMF
(or refactor those other use-cases to use an optional, either way)

1741117903
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
why not have var opt_str: []const u8 = "";

1741117931
bblack!~bblack@wikimedia/bblack-WMF
because in this use-case an empty string is a legal value different from null :/

1741117959
bblack!~bblack@wikimedia/bblack-WMF
and the write to out.* is allocated memory, while the ="" doesn't need freeing later.

1741118004
bblack!~bblack@wikimedia/bblack-WMF
I'm just gonna go back and refactor everything around this though.  It's too messy as-is.

1741118020
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
yeah, this doesn't seem to be a good way to do it

1741118027
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Again - I don't really know what you are trying to do though

1741118156
bblack!~bblack@wikimedia/bblack-WMF
yeah, I'm avoiding pasting all my other horrible messy code.  I'm like 1/3 of the way through porting a ~20K LOC codebase from C->Zig, it's all in a messy state right now :)

1741118199
bblack!~bblack@wikimedia/bblack-WMF
one file or interface at a time, so it goes!

1741118232
bblack!~bblack@wikimedia/bblack-WMF
once it's all at least .zig files, then I can go clean up the design better.  For now it's very rough.

