1744070915
squeek502_!~squeek502@user/squeek502
netvor, that behavior is platform specific currently: https://github.com/ziglang/zig/issues/16738

1744071605
drbeco!~beco@user/beco
hey there

1744101626
nicefries!~nicefries@user/nicefries
zig/src/Compilation.zig:4942 tells that "aro does not support compiling C objects yet", but when calling aro as seperate executable it is able to compile a c file. can anybody explain this?

1744102190
yataro!~yataro@user/yataro
nicefries: how do you compile c file with arocc?

1744102760
nicefries!~nicefries@user/nicefries
yataro: oh, it doesnt work. ty

1744103434
tsujp!497e1f7b6a@sourcehut/user/tsujp
for an enumw with a tag type of u8 is there any practical difference in having it NOT be exhaustive (beyond switching on it), im talking memory consumption etc

1744103464
tsujp!497e1f7b6a@sourcehut/user/tsujp
256 maximum fields, and filling it up say 200 / 256 seems like it'd have basically 0 impact

1744103468
tsujp!497e1f7b6a@sourcehut/user/tsujp
including if it was sparse too

1744103822
tsujp!497e1f7b6a@sourcehut/user/tsujp
also i swear there was a builtin or std.math function that returns the largest value an integer of N bits can hold, so if you give it a u8 it'd return 255 and so forth

1744103926
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah std.math.maxInt -- as usual it comes to me only after i ask in IRC even if I was trying to remember for some time before doing so hahaha

1744104224
squeek502_!~squeek502@user/squeek502
tsujp, i believe an enum with a specified tag type will have the same bit size as the tag, exhaustive vs non-exhaustive doesn't affect that

1744104497
tsujp!497e1f7b6a@sourcehut/user/tsujp
squeek502_: if that's true i assume the exhaustive-ness of the enum is mostly for compiling (switch semantics, compiler warnings about not handling all enum fields etc)

1744104552
tsujp!497e1f7b6a@sourcehut/user/tsujp
anyone on zig 0.14.0 able to do destructure tuples from a function? im getting a syntax error at the comma with the example copied directly from the 0.14.0 docs

1744104581
squeek502_!~squeek502@user/squeek502
yep, see the language reference: https://ziglang.org/documentation/0.14.0/#Non-exhaustive-enum

1744104591
tsujp!497e1f7b6a@sourcehut/user/tsujp
open the 0.14.0 docs, ctrl+f for: destructuring_return_value.zig    (there's no anchor i can link directly to) and you get expected ';' after declaration

1744104626
tsujp!497e1f7b6a@sourcehut/user/tsujp
squeek502_: ah yeh knew that part was just wondering about "lower" (which I think you answered now)

1744104786
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm the destructure works in godbolt.. wat.. im using release zig 0.14.0 

1744104837
squeek502_!~squeek502@user/squeek502
tsujp, compiles for me with 0.14.0

1744104979
tsujp!497e1f7b6a@sourcehut/user/tsujp
oh hang on.. you cannot destructure at the top level of a module only inside a block or another function? squeek502_

1744105045
squeek502_!~squeek502@user/squeek502
tsujp, seems like it, yeah

1744105084
squeek502_!~squeek502@user/squeek502
langref says "A destructuring expression may only appear within a block (i.e. not at container scope)"

1744105092
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah that's annoying, im constructing an enum and an array of structs from a comptime list 

1744105110
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah derp i missed that

1744105166
tsujp!497e1f7b6a@sourcehut/user/tsujp
i wonder why that limitation is.. maybe some kind of combinatorial explosion if it was at the container level and the programmer did something funky idk

1744105225
tsujp!497e1f7b6a@sourcehut/user/tsujp
or because at container level you can access it as a field on the file struct when importing it elsewhere anyway..?

1744105269
squeek502_!~squeek502@user/squeek502
instead of destructuring, you could return a struct type with the enum and array of structs as decls, then you can do `const Foo = makeFoo();` and then you'd have `Foo.Enum` and `Foo.array_of_struct`

1744105307
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah that's what I mean and will do, and I assume that's why the limitation on container-level destructuring exists since you can just do that

1744105359
squeek502_!~squeek502@user/squeek502
destructuring with `pub`, etc seems like it could get pretty messy as well

1744105382
tsujp!497e1f7b6a@sourcehut/user/tsujp
i imagine it is a footgun thing

