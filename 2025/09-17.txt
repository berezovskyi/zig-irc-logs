1758067716
grayhatter!~grayhatte@user/grayhatter
I was gonna suggest file.close should flush the writer, but it took me a moment to realize that close() isn't a part of File.Writer 

1758081778
deevus!~sh@116.255.12.163
rvrb: yo

1758103715
netvor!~netvor@2a00:ca8:a1f:cd0:f0de:c682:4a49:b13a
yo

1758118537
smallfoot-!~smallfoot@user/smallfoot-
can someone edit the table in this article to change {{Maybe}} to {{Yes}} or {{No}} https://en.wikipedia.org/wiki/Control_flow#Loop_system_cross-reference_table

1758124263
gog!~ada@user/meow/gog
the layout engine is very complex and has executable code

1758124266
gog!~ada@user/meow/gog
re: pdf

1758124273
gog!~ada@user/meow/gog
ditto the fonts

1758124290
gog!~ada@user/meow/gog
probably best to bind to poppler

1758129484
tryug!~Guest51@user/tryug
Hello , I was wondering if I can get the compiler to error when using snake case for functions or when I do not start types with uppercase ?

1758130305
grayhatter!~grayhatte@user/grayhatter
tryug: no the compiler doesn't enforce case styling rules

1758130568
tryug!~Guest51@user/tryug
grayhatter: Oh, okay ... thanks !

1758130580
tryug!~Guest51@user/tryug
I will just be careful then

1758133229
ezzieyguywuf!~Unknown@user/ezzieyguywuf
what's a good way to do https://pastebin.com/u99Q2a0X this in zig? this is what I have so far https://pastebin.com/2L3fjT6D, I'm just not sure e.g. what to do with the socket file descriptor when I get it from c slash I'm also not sure if I should be using strerror like I am or something else. for context, I'm reading https://book.systemsapproach.org/direct/ethernet.html#access-protocol and thought it'd 

1758133235
ezzieyguywuf!~Unknown@user/ezzieyguywuf
be neat to do some low-level ethernet stuff (for science)

1758133851
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh I guess I can use std.posix.socket

1758137169
realguy!~realguy@user/realguy
ezzieyguywuf: yes you can use std.posix.socket depends what you want to do. But in genera you can do lot's of stuff with a socket. e.g list on an address or connect to a remote host. Look here https://www.man7.org/linux/man-pages/man2/socket.2.html

1758137271
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yup, found that at "man socket", I'm now tryna figure out ioctl

1758137308
ezzieyguywuf!~Unknown@user/ezzieyguywuf
it's extremely straightforward to do c stuff in zig, the only challenging part is e.g. figuring out that std.posix.socket already exists so I probably don't want to use std.c.socket directly (right?)

1758138192
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ahhhh incremental builds are so fast!

1758140980
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
smallfoot-: done, i added mentions in the wiki table how numeric loop can be emulated with range and that break and continue are deep nested

1758141904
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
now all the 3 people yearly who visit that article will be well informed on zig loops :P

1758142453
rosewood!fb9edd32ba@user/rosewood
Does zig have a wrapper for io_uring_prep_read_multishot in std.os.linux.IoUring?

1758144348
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I'm confused about std.posix.ioctl, why is the third argument a usize, shouldn't it be a pointer?

1758144386
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I guess maybe I need to convert the pointer to a usize?

1758147242
ezzieyguywuf!~Unknown@user/ezzieyguywuf
why can't I do this? `src/main.zig:39:20: error: packed structs cannot contain fields of type '[6]u8'`

1758147392
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh, it's just not an allowed field type https://ziglang.org/documentation/master/#packed-struct

1758147609
geemili!d3fc6e6a8a@user/geemili
ezzieyguywuf: If the type you're decoding isn't backed by an integer, you should consider using an `extern struct` with `align(1)` instead

1758148017
noam!81879d1ffa@2a03:6000:1812:100::dfc
ahahaha compiling the zig compiler uses more than 16G of disk space? O_O

1758148050
noam!81879d1ffa@2a03:6000:1812:100::dfc
I thiiiink the ccache config Gentoo uses for system compilations just flat-out _cannot_ handle the giant blob of C that Zig emits lol

1758148078
bblack!~bblack@wikimedia/bblack-WMF
you don't need ccache with Zig anyways, it does its own, better compilation caching

1758148086
noam!81879d1ffa@2a03:6000:1812:100::dfc
bblack: That's not true

1758148093
noam!81879d1ffa@2a03:6000:1812:100::dfc
That caching does not affect compiling the compiler C file at all

1758148107
noam!81879d1ffa@2a03:6000:1812:100::dfc
That only applies to compiling Zig files

1758148143
noam!81879d1ffa@2a03:6000:1812:100::dfc
That said, ccache on the Zig compiler is totally useless because, AFAIK, that caching is file-wide, and you'll _never_ get a cache hit with how the C backend works at the moment

1758148159
noam!81879d1ffa@2a03:6000:1812:100::dfc
Which - actually, that's a problem with Zig=>C compilation entirely right now, I think :/

1758148175
bblack!~bblack@wikimedia/bblack-WMF
ah, I thought you were referring to caching the result of translate-c or @cImport, the other way

1758148178
bblack!~bblack@wikimedia/bblack-WMF
I misread, sorry :)

1758148178
noam!81879d1ffa@2a03:6000:1812:100::dfc
Yeah :)

1758148181
noam!81879d1ffa@2a03:6000:1812:100::dfc
No, you're good

1758148255
noam!81879d1ffa@2a03:6000:1812:100::dfc
I try to emphasize, when certain, "hey, that idea is wrong, here's why," apologies if it comes across as harsh :)

1758148274
noam!81879d1ffa@2a03:6000:1812:100::dfc
(bonus: when I'm wrong about why it's wrong, I've laid out clear logic, and it's easy to explain to me :)

1758148430
noam!81879d1ffa@2a03:6000:1812:100::dfc
Hyyypothetically, I wonder how hard it'd be to get the C backend to emit one .c file per Zig file, rather than one per root-source-file / translation unit / not sure what term zig uses here

1758148444
noam!81879d1ffa@2a03:6000:1812:100::dfc
One .c file per module might make more sense

1758148452
noam!81879d1ffa@2a03:6000:1812:100::dfc
You'd have to generate headers

1758148458
noam!81879d1ffa@2a03:6000:1812:100::dfc
and then generate includes for each one you need

1758148467
noam!81879d1ffa@2a03:6000:1812:100::dfc
But it should be feasible

1758148480
noam!81879d1ffa@2a03:6000:1812:100::dfc
Could also make it faster, since that'd be parallelizable

1758148514
noam!81879d1ffa@2a03:6000:1812:100::dfc
First you do a serial step where you split, then a parallel but blocking step of scanning to decide externs and assigning to headers, then you can do parallel generation of headers and source files

1758148526
noam!81879d1ffa@2a03:6000:1812:100::dfc
Shouldn't be a huge amount of code either, I think?

