1751674000
smlavine!~smlavine@sourcehut/user/smlavine
Excited about the new IO API changes. The current reader/writer API combined with GenericWriter etc. felt very convoluted to me and was hard to wrap my head around with the limited documentation. I think the non-genericism of the new API will be more straightforward and easier to comprehend and compose

1751675974
StopNGo!~StopNGo@p4fe1de8c.dip0.t-ipconnect.de
clevor: Sure, that's also on dict.cc, but kurzweilig is the opposite of langweilig and Weile is actually an old fashined (mostly ossified into some set phrases) word for, as well as cognate of, 'while' (as in, 'a (long) while'). So, Langeweile (boredom) is basically what you get when stuff just draaaaaags out and doesn't seem like it would ever end, whereas kurzweilig refers to how it was (I've had

1751675976
StopNGo!~StopNGo@p4fe1de8c.dip0.t-ipconnect.de
this insight minutes ago when I set out to start this reply) somewhat *engaging*, keeping you entertained (yeah), but, rather ... he didn't rip that many jokes or put up silly music, it was just not boring. :)

1751676158
StopNGo!~StopNGo@p4fe1de8c.dip0.t-ipconnect.de
Entertaining, to me, is more like a big show or performance, whereas kurzweilig I wanted to use because it's more (another refound thought) "time flies when you're having fun", it was just generally interesting to hear all this and the demonstrations he did (even though half of them hit already-filed bugs. :D *) (*I don't mind! :) )

1751679782
mortmann!~mortmann@p57b29dca.dip0.t-ipconnect.de
i cannot compile a c program using zig cc, that uses -lresolv for b64_btop. i could use "zig cc test.c /usr/lib/libresolv.so.2" instead of "zig cc test.c -lresolv" but this looks more like a workaround. see also https://pastebin.com/C1h9yewt . after grepping the zig github issues i got https://github.com/ziglang/zig/issues/12628 but its closed as resolved. tested with zig 0.14.0 here.

1751679810
mortmann!~mortmann@p57b29dca.dip0.t-ipconnect.de
s/b64_btop/b64_ntop

1751687913
StopNGo!~StopNGo@p4fe1de8c.dip0.t-ipconnect.de
Huh, I didn't know one could just list shared object files on the command line as input files. (Sorry, no clue in relation to your question, but if you're blocked on this, you might wish to just test a recent dev (master) build in the meantime.)

1751710358
KieranXD!~kieran@user/KieranXD
hi

1751716593
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
What is a good way to implement localization (supporting multiple languages) in Zig? I've no experience with this.

1751722662
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
flower_: ghostty uses gettext to do this for linux, it seemed like the best approach

1751722749
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/ghostty-org/ghostty/blob/main/src/os/i18n.zig

1751723180
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 rockorager: did read about it indeed, will look at it thx!

1751723206
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
rockorager: linux only?

1751724181
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'm not sure how it works on macos

1751724284
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Oh looks like it's not implemented for mac yet

1751725517
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Linux is my main target, but crossplatform is nice

1751737931
rvrb!~rvrb@156.146.51.228
the IO changes are pretty cool. I've thought about "Zig, but with algebraic effects" for IO, and this feels way more natural to the language design by achieving a lot of the same goals using explicit control flow

1751741764
jack_rabbit!~knusbaum@2601:240:8401:3d50::ce3b
Hello! I have a multi-part question. 1. Is there any standard "end of file" error, such that with a std.io.AnyReader I could distinguish between an EOF and another type of error? 2. If so, how can I determine the existence of such an error type except for asking on IRC? (I wasn't able to figure this out from the docs)

1751743202
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
unfortunately the docs are not polished, so a lot of things you need to infer e.g. by going to the source

1751743381
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
in this case GenericReader has a standard Error error set, and NoEofError, which is Error + error.EndOfStream

1751743523
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
there are a few read* methods in it that return NoEofError, like readNoEof

1751744980
jack_rabbit!~knusbaum@2601:240:8401:3d50::ce3b
tranzystorekk, Thanks for the info.

1751754604
lf94!~lf94@user/lf94
Hi. I need help migrating this to the latest Zig release. The version it uses is 0.11. https://github.com/lf94/summonscript/tree/main/4_viewer I cannot emphasize how much I appreciate the help.

1751754633
lf94!~lf94@user/lf94
I need the help because my time is so constrained there's no time to look for the relevant broken pieces x_x

1751757884
rvrb!~rvrb@156.146.51.228
I am trying to find somewhere that entertains what the `std.Io` interface looks like, even if it's purely hypothetical. is there a branch, PR, gist or chat log where I can read about it? I've found clues in issues like #6025: async/await/suspend/resume, #23446: stackless coroutines, #23367: restricted function types, which all seem like pieces of

1751757884
rvrb!~rvrb@156.146.51.228
the bigger picture, but I'm not finding where to read more about the bigger picture. maybe there is not a place, yet

1751758160
rvrb!~rvrb@156.146.51.228
I have found it. someone on Discord pointed me toward https://github.com/ziglang/zig/blob/async-await-demo/lib/std/Io.zig

