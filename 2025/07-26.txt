1753488481
andrewrk!~andrewrk@mail.ziglang.org
naturally, I messed up the expression, but hopefully you get the idea

1753488507
rvrb!~rvrb@156.146.51.228
I do, I mostly wasn't sure if reordering the fields was principle of least surprise

1753488528
triallax!~triallax@lacerte/triallax
i mean field order in zig is undefined anyway for normal structs no?

1753488543
rvrb!~rvrb@156.146.51.228
I'm stuck on my original ABI usecase ;)

1753488546
triallax!~triallax@lacerte/triallax
oh

1753488549
triallax!~triallax@lacerte/triallax
never mind me then

1753488559
rvrb!~rvrb@156.146.51.228
no, you're right and I am wrong, but it's nagging me in the back of my mind

1753489723
andrewrk!~andrewrk@mail.ziglang.org
maybe it could be interesting to also accept an extern struct as the input and generate one that has well-defined memory layout

1753489785
andrewrk!~andrewrk@mail.ziglang.org
by accepting an extern struct, you accomplish 2 things: 1. ensure that the field types used in the input struct have well-defined memory layout, and 2. communicate to the data structure the intent to use well-defined memory layout rather than auto

1753491355
Urpe!~Urpe@user/Urpe
How come there's several red flags and in the talk section of Zig's wiki page, there's complaints that the article is poorly sourced and doesn't meet notability criterion? https://en.wikipedia.org/wiki/Zig_(programming_language)

1753491384
Urpe!~Urpe@user/Urpe
https://en.wikipedia.org/wiki/Talk:Zig_(programming_language)

1753491465
Urpe!~Urpe@user/Urpe
some articles refer to it as an 'llvm wrapper'

1753491910
squeek502!~squeek502@user/squeek502
Urpe, those comments on the talk page are from 2021

1753491936
Urpe!~Urpe@user/Urpe
squeek502, has the fundamental language design changed since then?

1753491943
andrewrk!~andrewrk@mail.ziglang.org
are you using "red flag" metaphorically, or is that a wikipedia concept I don't know about?

1753491979
squeek502!~squeek502@user/squeek502
Urpe, this is probably relevant: https://github.com/ziglang/zig/issues/16270

1753492047
clevor!sid649024@id-649024.hampstead.irccloud.com
Urpe: There's always the V page. https://en.wikipedia.org/wiki/V_(programming_language)

1753492112
andrewrk!~andrewrk@mail.ziglang.org
given that zig has backends that LLVM doesn't have, and also has a C frontend, you could argue that in fact LLVM is a Zig frontend ðŸ˜Ž

1753492143
clevor!sid649024@id-649024.hampstead.irccloud.com
More like a Zig backend

1753492191
Urpe!~Urpe@user/Urpe
ok but besides type safety what problems does it solve that others like rust don't then?

1753492211
andrewrk!~andrewrk@mail.ziglang.org
Urpe: be honest, why are you here :)

1753492256
andrewrk!~andrewrk@mail.ziglang.org
there's honey in this beehive but you can't have it that easily

1753492270
Urpe!~Urpe@user/Urpe
andrewrk, because I keep seeing veiled adverts for Zig in other channels like 'I use Zig and <mainstream language>' that just seems out of place

1753492277
Urpe!~Urpe@user/Urpe
so I looked it up and it lead me here

1753492314
andrewrk!~andrewrk@mail.ziglang.org
I see. Well, you are in the wrong place for learning about why you should or shouldn't use zig. This chat room is for people who already decided they want to use zig, and they want to learn or collaborate

1753492363
Urpe!~Urpe@user/Urpe
ok got it, cool. bye

1753492523
rvrb!~rvrb@156.146.51.228
it impresses me how coolly you deflect the flamebait. it concerns me to think how much practice it took to get you there

1753492597
andrewrk!~andrewrk@mail.ziglang.org
lol

1753492622
triallax!~triallax@lacerte/triallax
if it were me the kickhammer would probably have been out by now

1753492635
andrewrk!~andrewrk@mail.ziglang.org
I have my bad days

1753492657
andrewrk!~andrewrk@mail.ziglang.org
but today is a good day

1753492704
andrewrk!~andrewrk@mail.ziglang.org
this async i/o stuff has me pumped up

1753492729
triallax!~triallax@lacerte/triallax
it's looking great but lord am i not looking forward to the migration :D

1753492758
rvrb!~rvrb@156.146.51.228
I kind of love those grinds. what's a better test of editor skills?

1753492782
andrewrk!~andrewrk@mail.ziglang.org
nobody pays the cost of breaking changes more than me @_@

1753492785
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I was just admiring how you handled that too haha

1753492798
andrewrk!~andrewrk@mail.ziglang.org
zig repo is north of 500,000 LOC at this point

1753492805
Affliction!affliction@idlerpg/player/affliction
From what I've seen, it'll either be amazing or a disaster. Either way, I'm here for it.

1753492813
andrewrk!~andrewrk@mail.ziglang.org
Affliction: that's the spirit!

1753492815
rvrb!~rvrb@156.146.51.228
(I actually laughed out loud at the LLVM is a Zig frontend comment)

1753492940
triallax!~triallax@lacerte/triallax
andrewrk: ahahaha fair

1753492949
Affliction!affliction@idlerpg/player/affliction
I mean, I've used zig as a C compiler, especially on windows where the "real" ones are irritating.

1753492966
Affliction!affliction@idlerpg/player/affliction
Zig being an LLVM frontend is just one of its great features!

1753492976
triallax!~triallax@lacerte/triallax
my codebase is only 11k sloc and i'm feeling mortified already

1753493031
triallax!~triallax@lacerte/triallax
but well that's the kind of stuff i signed up for with with a 0.x language so not complaining

1753493060
Affliction!affliction@idlerpg/player/affliction
Yeah

1753493089
Affliction!affliction@idlerpg/player/affliction
I'm just hoping it helps me get over my weird mental block around async in other languages

1753493092
andrewrk!~andrewrk@mail.ziglang.org
feel free to bug me when you're upgrading if the release notes are lacking upgrade instructions for a particular compile error or code pattern

1753493116
andrewrk!~andrewrk@mail.ziglang.org
I've been typing up release notes in each breaking PR and I'll consolidate them in the official release notes html page later

1753493124
triallax!~triallax@lacerte/triallax
will do

1753493141
andrewrk!~andrewrk@mail.ziglang.org
but I can do this upgrade with my eyes closed at this point, so, happy to help

1753493149
triallax!~triallax@lacerte/triallax
!!!

1753493169
triallax!~triallax@lacerte/triallax
i can sense the tedium you've had to go through

1753493196
meidam!~meidam@user/meidam
There are public release notes for the changes that have happened in the master branch already?

1753493233
andrewrk!~andrewrk@mail.ziglang.org
meidam: https://github.com/ziglang/zig/pulls?q=is%3Apr+label%3A%22release+notes%22+is%3Aclosed+sort%3Aupdated-desc+label%3Abreaking

1753493253
meidam!~meidam@user/meidam
Nice, thanks

1753493608
meidam!~meidam@user/meidam
I don't really know how I can do formatted printing now to stdout the same way that we could before writergate. And it feels a wrong to use std.debug.print when it's the output you want the user to see in a cli tool

1753493684
meidam!~meidam@user/meidam
since it prints to stderr

1753493776
andrewrk!~andrewrk@mail.ziglang.org
what were you doing before, and what kind of information are you printing?

1753493822
andrewrk!~andrewrk@mail.ziglang.org
afk for supper

1753493875
meidam!~meidam@user/meidam
I have a client for an obscure internet protocol that runs in a loop asking for input. What I print is like, help information, the pages you visit, and a list of pages you just visited (history)

1753493964
meidam!~meidam@user/meidam
did it with the std.io.getStdOut().writer().print("", .{})

1753494020
meidam!~meidam@user/meidam
I've just changed it all to std.debug.print now until I figure out something better. It's not a project that I have released to the public yet

1753494850
meidam!~meidam@user/meidam
Looks like there is a panic in the master std documentation currently btw. Or at least there is for me https://ziglang.org/documentation/master/std/

1753494870
andrewrk!~andrewrk@mail.ziglang.org
meidam: I think stderr is the appropriate place for help information and most other CLI tool outputs. stdout is more for, well, outputs. think cat, grep, ls, etc

1753494903
triallax!~triallax@lacerte/triallax
meidam: https://github.com/ziglang/zig/issues/24565

1753494920
meidam!~meidam@user/meidam
Hmmm, but what about a webpage? I'd call that an output

1753494932
andrewrk!~andrewrk@mail.ziglang.org
like, html? yeah that should be stdout

1753494981
meidam!~meidam@user/meidam
In this case it's text/gemini, but yeah

1753495017
meidam!~meidam@user/meidam
Would I maybe use the stdout from std.fs.File.stdout() to write to?

1753495046
meidam!~meidam@user/meidam
Like how I get the input from std.fs.File.stdin() post writergate?

1753495081
meidam!~meidam@user/meidam
triallax: Okay, cool

1753495162
andrewrk!~andrewrk@mail.ziglang.org
meidam: added you a section in https://github.com/ziglang/zig/pull/24329 (search for "std.io.getStdOut().writer().print()")

1753495200
meidam!~meidam@user/meidam
Sorry, I already know about the std.fs.File.stdout().writeAll() from the new hello world in the docs. Just forgot. I was interested in doing it with formatting like with std.debug.print

1753495208
meidam!~meidam@user/meidam
Okay, I'll take a look

1753495222
andrewrk!~andrewrk@mail.ziglang.org
I believe I addressed your use case

1753495251
meidam!~meidam@user/meidam
Hmm, okay I skimmed that page already, but I'll read it more closely. I probably missed something

1753495280
meidam!~meidam@user/meidam
Ah, there it is. Thanks

1753495326
meidam!~meidam@user/meidam
And I looked at things right around there... I just went past it...

1753495445
meidam!~meidam@user/meidam
That flush. It it something that you have to do after every print? Or just once at the end of the main function?

1753495466
triallax!~triallax@lacerte/triallax
latter

1753495468
triallax!~triallax@lacerte/triallax
or like on exit

1753495475
meidam!~meidam@user/meidam
Okay, cool

1753495481
triallax!~triallax@lacerte/triallax
if you do it after every print that mostly defeats the purpose of buffering

1753495626
triallax!~triallax@lacerte/triallax
but also it depends on context

1753495655
triallax!~triallax@lacerte/triallax
the general idea is you flush if you want something shown to the user immediately

1753496474
rvrb!~rvrb@156.146.51.228
andrewrk and triallax: ok I pushed up the resize function. I gave up on two things: resizing with Allocator.remap/resize/reallocate - I could do this, but didn't seem worth the complexity. sounds simple on the surface, but surprisingly complex with growing/shrinking different fields at same time. I just allocate new memory.

1753496534
rvrb!~rvrb@156.146.51.228
second thing was extern struct support - I didn't know what to do about pointer alignment. afaict I would just have to always do align(1)? I think not solvable otherwise because the pointer alignment is comptime and calculating its actual alignment would be runtime due to being runtime length

1753496580
rvrb!~rvrb@156.146.51.228
renamed the types and stuff too.. https://github.com/tristanpemble/zig-restruct

1753496712
rvrb!~rvrb@156.146.51.228
trialliax let me know what name you prefer and I can add you to the acknowledgement

1753496722
rvrb!~rvrb@156.146.51.228
oops, triallax

1753497953
triallax!~triallax@lacerte/triallax
rvrb: i've not done much to warrant crediting

1753497958
triallax!~triallax@lacerte/triallax
but if you insist, it's Celeste

1753498091
rvrb!~rvrb@156.146.51.228
hah, yeah I mean it's a like 200 line utility class, but I wouldn't have done it without the convo the three of us had and it makes me happier to add your names than to not

1753498138
triallax!~triallax@lacerte/triallax
triallax/celeste would do it

1753498152
triallax!~triallax@lacerte/triallax
oh well you pushed it, that's fine then

1753498241
rvrb!~rvrb@156.146.51.228
there I just changed it to your IRC names. maybe a young person will be inspired to join IRC instead of Discord.

1753498275
triallax!~triallax@lacerte/triallax
oh i just realised you're the author of zvm

1753498286
triallax!~triallax@lacerte/triallax
i use that since zig isn't properly packaged for my distro :)

1753498286
rvrb!~rvrb@156.146.51.228
nope

1753498293
rvrb!~rvrb@156.146.51.228
wrong guy!

1753498297
rvrb!~rvrb@156.146.51.228
or person.

1753498302
triallax!~triallax@lacerte/triallax
wah

1753498304
triallax!~triallax@lacerte/triallax
ok you're right

1753498311
triallax!~triallax@lacerte/triallax
i got confused by similar first names

1753498314
triallax!~triallax@lacerte/triallax
oops!

1753498325
triallax!~triallax@lacerte/triallax
identical* even

1753498342
rvrb!~rvrb@156.146.51.228
another Tristan writing Zig? blasphemy

1753498383
triallax!~triallax@lacerte/triallax
anyway this utility is really cool, i think it fixes a use case that was a little painful in zig before

1753498389
triallax!~triallax@lacerte/triallax
thanks for your work!

1753551791
rvrb!~rvrb@156.146.51.228
I am writing a blog post covering Zig's collection data types and leading up to the concept of ResizableStruct and the thought occurred to me - array backed/stack allocated resizable struct?

1753551969
rvrb!~rvrb@156.146.51.228
I don't know if it has a real world use case

1753552021
andrewrk!~andrewrk@mail.ziglang.org
not sure what you're proposing

1753552143
rvrb!~rvrb@156.146.51.228
`fn BoundedResizableStruct(comptime Layout: struct, comptime buffer_capacity: usize)`

1753552213
rvrb!~rvrb@156.146.51.228
I was just covering arrays, multi-item pointers, slices, then touching on what a VLA is and why Zig doesn't have it; and it occurred to me that there's a stack equivalent of what I built. I just don't know if it's worth building

1753552527
torque!~tachyon@user/torque
you could just use a FixedBufferAllocator backed by an array on the stack, though I guess that doesn't permit comptime checking of sizes

1753552584
rvrb!~rvrb@156.146.51.228
yes, I think that's right - there's probably not really a case you would want that where you're not using a fixed buffer allocator

1753558573
andrewrk!~andrewrk@mail.ziglang.org
I see, the idea is that you provide a buffer rather than an allocator 

1753561406
ovf!sid19068@id-19068.hampstead.irccloud.com
is it expected that the output is different between`zig cc -target aarch64-macos -dumpmachine` and `zig cc -target aarch64-macos -dumpmachine foo.c` (resp. `aarch64-unknown-macos` and `aarch64-apple-macosx13.0.0-unknown` for me)? i don't see the same with clang

1753561452
ovf!sid19068@id-19068.hampstead.irccloud.com
(alternatively: perhaps i'm abusing -dumpmachine. what's a good way to ask zig cc (or any c compiler) what it is currently targetting?)

1753561486
andrewrk!~andrewrk@mail.ziglang.org
`zig build-obj --show-builtin` (optionally with a `-target` parameter as well)

1753562105
ovf!sid19068@id-19068.hampstead.irccloud.com
thanks! that's useful. it's very tempting to fully outsource the cross c toolchain maintenance to you. doesn't really have much to do with zig itself, but for some reason nobody else cares about this and you guys do.

1753563196
rvrb!~rvrb@156.146.51.228
https://tristanpemble.com/resizable-structs-in-zig/

1753563210
rvrb!~rvrb@156.146.51.228
looking for read or two before I post on Ziggit

1753564030
torque!~tachyon@user/torque
at the end when you show the backing implementation, it is missing the `client` field. is this intentional?

1753564195
torque!~tachyon@user/torque
I believe that's intended to be a simplified demo, but I think it would be interesting to show the full type

1753564434
rvrb!~rvrb@156.146.51.228
If I understand correctly, yes it is intentional - all of the data is contiguously stored behind the pointer

1753564550
torque!~tachyon@user/torque
to be more clear as to my question, in the example, you have `const Connection = ResizableStruct(struct { client: Client, host: ... });` but when you describe what this gets resolved to you just show `const Connection = struct { ptr: [*]u8, lens: struct { host: usize, ... } };`

1753564578
rvrb!~rvrb@156.146.51.228
yeah; we don't need to store the lengths of client because it's comptime known. only the arrays would need to be on that lens struct

1753564592
rvrb!~rvrb@156.146.51.228
the actual client value would be stored at the beginning of the data referenced at the ptr

1753564601
torque!~tachyon@user/torque
sure, but you presumably also have to store offsets somewhere

1753564618
rvrb!~rvrb@156.146.51.228
no - they are calculated by the values and the comptime known lengths of the elements and fields

1753564623
rvrb!~rvrb@156.146.51.228
by the length values*

1753564638
torque!~tachyon@user/torque
do you not allow interleaved variable length and fixed-length fields?

1753564650
torque!~tachyon@user/torque
I guess you can reorder it so that all of the variable length data is at the end

1753564658
rvrb!~rvrb@156.146.51.228
I ran out of steam by the end (writing is hard!), eating lunch now. but I may try to add simplifiedc implementation for the four methods in that example

1753564670
rvrb!~rvrb@156.146.51.228
it does allow interleaving

1753564700
torque!~tachyon@user/torque
no worries

1753564714
rvrb!~rvrb@156.146.51.228
right now the implementation expects the struct to be layout = .auto and will sort the fields by alignment (like MultiArrayList) - the data behind the pointer does not have a defined layout

1753564729
torque!~tachyon@user/torque
I think the explanation of why the resultant struct can be so minimal could be embellished

1753564739
rvrb!~rvrb@156.146.51.228
yeah that makes sense, thank you

1753564750
torque!~tachyon@user/torque
not sure I understand the "sort by alignment"

1753564764
torque!~tachyon@user/torque
oh, nevermind

1753564771
torque!~tachyon@user/torque
yeah I get it now. interesting

1753564778
rvrb!~rvrb@156.146.51.228
I greatly appreciate you taking the time to give feedback :)

1753564832
torque!~tachyon@user/torque
it's definitely not intuitive to me that you need so little runtime information (just one usize per dynamic field) to represent any possible ResizableStruct

1753564836
torque!~tachyon@user/torque
it's a cool result though

1753565396
andrewrk!~andrewrk@mail.ziglang.org
if you think about it, it's a generalization of a slice

1753565440
andrewrk!~andrewrk@mail.ziglang.org
a slice has 0 struct fields and 1 dynamically sized field

1753565516
andrewrk!~andrewrk@mail.ziglang.org
1 usize per dynamic field -> slice is ptr and length :)

1753565730
torque!~tachyon@user/torque
yeah that's a good way to think about it

1753565790
rvrb!~rvrb@156.146.51.228
andrewrk: yeah it is - I was hoping to leave that conclusion to the reader through the way I sequence the article. I'm wondering if there's a language syntax sugar that could be created around it

1753565803
rvrb!~rvrb@156.146.51.228
torque: I updated the article with more information

1753565842
rvrb!~rvrb@156.146.51.228
that `isResizableArray` to check if something is an implementation of a generic is something I had wanted to do before and didn't realize how to do it until this

1753565910
torque!~tachyon@user/torque
yeah I noticed that

1753565939
torque!~tachyon@user/torque
in the past I have used a non-pub enum declaration to tag generic types in a way that is easy to check

1753565970
rvrb!~rvrb@156.146.51.228
yep I've done the same, but it never sat well, because what if a type implemented that decl exactly?

1753565973
torque!~tachyon@user/torque
your function is a very clean way to do it though

1753566005
rvrb!~rvrb@156.146.51.228
I didn't like it for an API that could potentially see std

1753566007
torque!~tachyon@user/torque
well, by making it non-pub, it is unique to the file it is in

1753566025
rvrb!~rvrb@156.146.51.228
oh maybe I don't understand your approach. I was thinking `@hasDecl(T, MySecretTag)`

1753566053
rvrb!~rvrb@156.146.51.228
ok, posted; https://ziggit.dev/t/resizable-structs-in-zig/11198

1753566164
rvrb!~rvrb@156.146.51.228
I'll post on HN but I know all I am gonna get is "Rust does xyz" and "look at all the hoops you have to jump through just to not use a VLA" etc

1753566175
rvrb!~rvrb@156.146.51.228
sigh

1753566177
torque!~tachyon@user/torque
ah I meant like `const TypeTag = enum { foo };` and then `pub fn Generic(comptime T: type) type { return struct { const type_tag: TypeTag = .foo }; }`, so you check both @hasDecl and equality with the tag (or just check tag equality and let the compiler handle the fallout)

1753566201
rvrb!~rvrb@156.146.51.228
ohh that's cool

1753566252
torque!~tachyon@user/torque
I don't think it works any better than your approach tho

1753566268
rvrb!~rvrb@156.146.51.228
yeah, in theory I am exposing the Element decl as a public API

1753566342
andrewrk!~andrewrk@mail.ziglang.org
really nicely laid out blog post rvrb

1753566350
rvrb!~rvrb@156.146.51.228
thanks!

1753566413
andrewrk!~andrewrk@mail.ziglang.org
I can think of another column in "The problem": resizable

1753566443
andrewrk!~andrewrk@mail.ziglang.org
ArrayList: elements=same, size=runtime, resizable=yes

1753566453
andrewrk!~andrewrk@mail.ziglang.org
MultiArrayList: elements=different, size=runtime, resizable=yes

1753566507
andrewrk!~andrewrk@mail.ziglang.org
only applicable with a runtime size

1753566658
rvrb!~rvrb@156.146.51.228
yeah, let me see if I can include that without having too many threads to connect

1753566894
rvrb!~rvrb@156.146.51.228
mm I'm not sure I can add it without muddying that thread I wanted to connect from multi-ptr -> slice -> this thing; even though this thing is more like a MultiArrayList than a slice, it's a concept the average person isn't very familiar with

1753566974
andrewrk!~andrewrk@mail.ziglang.org
yeah I'm not suggesting to change it, it's perfect as is

1753567058
rvrb!~rvrb@156.146.51.228
you'll see how I arrived at that Buffered version of it now, though

1753567065
rvrb!~rvrb@156.146.51.228
sorry -- Bounded

1753567076
rvrb!~rvrb@156.146.51.228
thinking in terms of those tables

1753574123
rvrb!~rvrb@156.146.51.228
ok, I am certain this channel is sick of hearing about this shit at this point but I'm just daydreaming how such a thing might be supported at a language level: https://zigbin.io/c719cb

