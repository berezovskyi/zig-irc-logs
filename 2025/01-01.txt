1735723882
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
is there sth that can be done to warn when zig silently reinterprets u64 as usize?

1735723935
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
i.e. when you put a u64 in a place in code where a usize is expected, like in a range for a for loop

1735741552
ifreund!2940d10f8b@user/ifreund
tranzystorekk: nope, the answer is to add CI for a 32bit target if you care about supporting a 32bit target

1735741641
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
so it's by design, and not a limitation/missing lint/etc.?

1735741742
ifreund!2940d10f8b@user/ifreund
yes

1735741778
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
cause im aware in practice distros like void are the only sources of "missing CI" for more rare targets, but this seems like something fairly straightforward to detect

1735750310
jemius!~imperator@200116b82db22e00f68b7c9103239a31.dip.versatel-1u1.de
Happy New Year

1735750319
jemius!~imperator@200116b82db22e00f68b7c9103239a31.dip.versatel-1u1.de
https://ziglang.org/documentation/master/std/#std.net  <- where are the UDP sockets hiding?

1735751160
grayhatter!~grayhatte@user/grayhatter
jemius: the stdlib API for network sockets is what I'd describe as "odd", what are you trying to do? Listen on a UDP port? or connect to?

1735751248
jemius!~imperator@200116b82db22e00f68b7c9103239a31.dip.versatel-1u1.de
grayhatter, currently I'm just browsing the stdlib doc and a few things don't seem to make sense to me. But yes, listening on a UDP port would be a start

1735751276
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/std/#std.net.Address.listen

1735751309
grayhatter!~grayhatte@user/grayhatter
notice the namespace is std.net.Address, i.e. you'd create an "Address" and then use that to do stuff

1735751332
grayhatter!~grayhatte@user/grayhatter
which... it's not wrong... it's just... odd

1735751355
Gliptic!~glip@2a01:4f8:c012:91f3::1
you doing use listen on UDP

1735751370
Gliptic!~glip@2a01:4f8:c012:91f3::1
s/doing/don't

1735751375
Gliptic!~glip@2a01:4f8:c012:91f3::1
just bind

1735751482
Gliptic!~glip@2a01:4f8:c012:91f3::1
afaik, the zig sockets follow the posix C socket api pretty closely

1735751650
grayhatter!~grayhatte@user/grayhatter
bah, thank you Gliptic, that just shows how often I use UDP

1735751664
grayhatter!~grayhatte@user/grayhatter
follow up question, does windows network claim to be posix?

1735751791
Gliptic!~glip@2a01:4f8:c012:91f3::1
not quite, e.g. types differ, sockets aren't `int` for instance

1735751878
grayhatter!~grayhatte@user/grayhatter
asking because I'm reading https://ziglang.org/documentation/master/std/#std.posix.bind and didn't expect to see windows in side posix

1735751914
torque!~tachyon@user/torque
this is because the posix abstraction is currently weird

1735751922
torque!~tachyon@user/torque
and due for an overhaul

1735751930
torque!~tachyon@user/torque
I think there are open issue(s) about it

