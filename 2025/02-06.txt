1738810327
grayhatter!~grayhatte@user/grayhatter
using 0b format, what's the code for "flip the 5th bit of value"

1738810335
grayhatter!~grayhatte@user/grayhatter
this is a retorical question

1738810425
grayhatter!~grayhatte@user/grayhatter
rhetorical* I already have passing tests, I'm just wondering how bad my ability to parse is

1738811584
torque!~tachyon@user/torque
value ^ 0b10000?

1738811593
torque!~tachyon@user/torque
not sure I understood the question

1738811606
grayhatter!~grayhatte@user/grayhatter
that's how I understood the question too

1738811610
grayhatter!~grayhatte@user/grayhatter
I figured out why

1738811643
torque!~tachyon@user/torque
oh yeah that will do bad things to 0 bits earlier

1738811644
grayhatter!~grayhatte@user/grayhatter
in my head, ordinal numbers are 1 indexed

1738811647
torque!~tachyon@user/torque
so it needs more masking

1738811682
grayhatter!~grayhatte@user/grayhatter
the test data wants 0b10_0000 not 0b1_0000

1738811695
torque!~tachyon@user/torque
that's absolutely not the "fifth bit"

1738811781
torque!~tachyon@user/torque
I would maybe accept bit index 5

1738811782
grayhatter!~grayhatte@user/grayhatter
torque: https://gr.ht/i/thank-you.gif

1738811929
grayhatter!~grayhatte@user/grayhatter
in another location it does say `bit 5` and previously it had said `bit 0`

1738811967
grayhatter!~grayhatte@user/grayhatter
so, I guess that's what I get for implementing this out of order

1738812177
torque!~tachyon@user/torque
i guess if you think of it in terms of shifts, `1 << 5` is indeed 0b10_0000, but I still don't think I would call that the fifth bit

1738812317
grayhatter!~grayhatte@user/grayhatter
I've implemented a number of specs... I'm actually ok with them using whatever numbers they want

1738812339
grayhatter!~grayhatte@user/grayhatter
they provide clear, unambigious test vectors

1738812392
grayhatter!~grayhatte@user/grayhatter
they could have called this bit 3, and I would have been like, witaf, but I would have been able to figure it out pretty quickly

1738812446
torque!~tachyon@user/torque
most of the stuff I've worked with has diagrams showing the indexing convention used

1738853083
netvor!~netvor@2a00:ca8:a1f:cd0:985c:dc6d:f6ac:dc41
how to convert a float to integer?  @trunc() just gives back float

1738853132
taylan!~someone@user/taylan
netvor: See casting in the manual.

1738853139
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
@intFromFloat

1738853154
netvor!~netvor@2a00:ca8:a1f:cd0:985c:dc6d:f6ac:dc41
ah i see, @intFromFloat(@trunc(my_float))

1738853157
netvor!~netvor@2a00:ca8:a1f:cd0:985c:dc6d:f6ac:dc41
thanks :)

1738854394
reykjalin!7e28cf3a41@user/reykjalin
I don’t think you need @trunc

1738871713
LAC-Tech!~lewis@granite-phrase.bnr.la
netvor: yeah definitely try it wihout @trunc, just using @intFromFloat

1738871794
netvor!~netvor@2a00:ca8:a1f:cd0:985c:dc6d:f6ac:dc41
sure i've already removed @trunc, i've actually removed it already, thanks :)

1738871827
netvor!~netvor@2a00:ca8:a1f:cd0:985c:dc6d:f6ac:dc41
i meant to write, "i've misread the doc..." (editing mistake :D)

1738873232
LAC-Tech!~lewis@granite-phrase.bnr.la
zig lifehack: always visit a specific version of the documentation, eg https://ziglang.org/documentation/0.13.0/std/ that way, you don't have to wait for it to load all the time

1738873282
ifreund!2940d10f8b@user/ifreund
or use the local copy from your zig installation

1738873399
LAC-Tech!~lewis@granite-phrase.bnr.la
yeah that's probably easier. I still for the life of me don't understand the "run the documentation generator in wasm against the full zig source code" approach.

1738874868
andrewrk!~andrewrk@mail.ziglang.org
I'm pretty happy with the decision

1738874900
andrewrk!~andrewrk@mail.ziglang.org
it also shares code with the fuzzer web interface. once that's ready for beta testing I think the vision will start to become clear

1738875046
grayhatter!~grayhatte@user/grayhatter
would be super cool if https://localhost.ziglang.org/documentation/master/std/#A;std resolved to 127.0.0.1 making it easy to share URLs to docs is pretty important

1738875254
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Is there any way to modify the environment such that later calls to std.process.getEnvMap will see the change?

1738875281
grayhatter!~grayhatte@user/grayhatter
rockorager: short answer, no, long answer, that's an insane question

1738875289
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I suspect not, but I'm using ghostty as a library and can make the change to pass my own env, but if I don't need to that is even better

1738875319
grayhatter!~grayhatte@user/grayhatter
not because there's anything wrong with the question, but because we're stuck with insane decisions made in the long long ago, and no one likes them anymore

1738875369
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Hmm ok

1738875391
grayhatter!~grayhatte@user/grayhatter
rockorager: you should avoid using the system env except in limited cases

1738875430
dsal!sid13060@id-13060.lymington.irccloud.com
heh, I didn't read the "env" in that sentence.  Still checks out.  Avoid computers.

1738875440
grayhatter!~grayhatte@user/grayhatter
sometimes sys env is the only reasonable option, but if there is ever a different option, use that instead... future you will *never* thank you for using sys env when you didn't absolutely have to

1738875465
grayhatter!~grayhatte@user/grayhatter
dsal: lol, my favorite quote for when something breaks has become

1738875480
grayhatter!~grayhatte@user/grayhatter
> It was a mistake to teach sand to do math

1738875522
dsal!sid13060@id-13060.lymington.irccloud.com
heh.  Yeah.

1738875854
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I hate terminals

1738875966
LAC-Tech!~lewis@granite-phrase.bnr.la
rockorager: lmao, I'm just trying to get tui stuff working in zig and I feel your pain

1738876024
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
`ls` gets the size of the terminal by looking at $COLUMNS

1738876043
grayhatter!~grayhatte@user/grayhatter
rockorager: I was happier not knowing that

1738876048
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
which is set by *the shell*, not by *the terminal*, so if you launched `ls` *without* a shell it has no clue what size the terminal is

1738876129
grayhatter!~grayhatte@user/grayhatter
wait no

1738876139
grayhatter!~grayhatte@user/grayhatter
my shell doesn't set COLUMNS, and my ls works

1738876232
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
echo $COLUMNS does nothing for you?

1738876237
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
what shell do you have?

1738876251
grayhatter!~grayhatte@user/grayhatter
hsh

1738876261
grayhatter!~grayhatte@user/grayhatter
it's one I wrote to learn zig

1738876300
grayhatter!~grayhatte@user/grayhatter
empty string

1738876312
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
but does ls wrap at the correct spot?

1738876317
grayhatter!~grayhatte@user/grayhatter
yes

1738876330
grayhatter!~grayhatte@user/grayhatter
I tried it in a narrow, and full screen window to check

1738876346
ifreund!2940d10f8b@user/ifreund
rockorager: libc's setenv modifies the global environ variable... its not good form to do this though as its completly broken in the presence of threads

1738876367
ifreund!2940d10f8b@user/ifreund
you will still see loads of C code using it though

1738876389
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
grayhatter: hmm strange

1738876403
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I was able to modify the env that ghostty pulls before it spawns the command so I'm all good

1738876512
grayhatter!~grayhatte@user/grayhatter
ghostty shouldn't be modifying the env... does it?

1738876579
grayhatter!~grayhatte@user/grayhatter
oh, I guess if ghostty is just gonna execv then it fine :thinking:

1738876682
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah it adds a bunch of stuff, removes some

1738877768
reykjalin!7e28cf3a41@user/reykjalin
> rockorager: I hate terminals

1738877778
reykjalin!7e28cf3a41@user/reykjalin
I feel like there is a conflict of interest of some sort here

1738877790
reykjalin!7e28cf3a41@user/reykjalin
don’t tell vaxis

1738878524
LAC-Tech!~lewis@granite-phrase.bnr.la
"warning: TODO unable to translate variadic function, demoted to extern" oh I did not know this was a thing with the C interop

1738884483
cryptocode!~zy@user/zy
The missing defer discussed on Zulip reminded me I'd love the ability to mark free/close/unlock/deinit/etc functions such that it's a requirement to use defer, errdefer or nodefer to call it.

1738884484
cryptocode!~zy@user/zy
Then I'd never forget to (err)defer, because it's a compile error. In the relatively rare cases you're not deferring these functions, `nodefer m.unlock()` is used. 

1738884488
cryptocode!~zy@user/zy
Curious if something like this has been considered? This would not be issue #782 (cleanup functions), rather it just makes not doing `(err)defer unlock` a very explicit choice to catch bugs.

