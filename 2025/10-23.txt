1761180392
grayhatter!~grayhatte@user/grayhatter
ezzieyguywuf: because they want to do some extra magic they couldn't figure out how to do with in the build.zig?

1761180702
grayhatter!~grayhatte@user/grayhatter
but their discord is probably a better place to ask that question

1761183774
ezzieyguywuf!~Unknown@user/ezzieyguywuf
yea probs, thanks

1761184221
Comstar!~Comstar@user/Comstar
how's everyone doing today

1761187180
clevor!sid649024@id-649024.hampstead.irccloud.com
As an argument to a system command, I have to prepend and append a string to a LazyPath's output and pass it as an argument. Would this require modifying the build system to accept prefixes in LazyPath?

1761187593
clevor!sid649024@id-649024.hampstead.irccloud.com
The repos are https://codeberg.org/clevor/hello-ce and github.com/myclevorname/zig/tree/ez80. Run `nix develop github:myclevorname/ce-programs`

1761195815
daurnimator!~daurnimat@vultr.daurnimator.com
hmm, ncdu might be broken with 0.15.2? https://gitlab.archlinux.org/archlinux/packaging/packages/ncdu/-/issues/3#note_342986

1761203031
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am trying to create `parseArgs` line: 19 to handle line: 13, not sure how to unpack `variable` on line: 21 to pass to c function

1761203037
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/663018

1761203277
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is how cimport converts c functions `pub extern fn PyArg_ParseTuple([*c]PyObject, [*c]const u8, ...) c_int;`

1761203294
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`...` ? not sure whats that and how to catch and pass to it.

1761211843
mimivals1!~mimivalsi@user/MimiValsi
What would be a zig way or zig std way to init a struct? Like I need a pointer to a struct, Foo, should the function, inside Foo struct, have a `mem.Allocator` field? Or just return Foo, and let the user create a pointer with `allocator.create()`?

1761212626
Ayo!~Ayo@45.142.232.203
mimivals1: In general, just return Foo directly. Taking an allocator and returning *Foo is still useful if the init function needs to know the final address of the struct, e.g. when it's added to some global list or has interior pointers

1761213647
mimivals1!~mimivalsi@user/MimiValsi
Atm this function will init another one with null option. I don't think on alloc those

1761213663
mimivals1!~mimivalsi@user/MimiValsi
Ayo: thx for the tip

1761214564
clevor!sid649024@id-649024.hampstead.irccloud.com
Ah, it looks like I want addDecoratedLazyPath.

1761214625
clevor!sid649024@id-649024.hampstead.irccloud.com
Wait, it only supports directories :/

1761214675
clevor!sid649024@id-649024.hampstead.irccloud.com
addDecoratedFileArg*

1761228034
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
was @unpack removed?

1761228145
ifreund!2940d10f8b@user/ifreund
stealth_: what makes you think @unpack has ever existed in Zig?

1761228195
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ifreund, search assist shows zig use to have @unpack at some point! maybe it was renamed to something else?

1761228249
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
example code: https://zigbin.io/f0e39d

1761228495
ifreund!2940d10f8b@user/ifreund
stealth_: are you saying that an LLM hallucinated it? It has never existed

1761228535
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ifreund, i pretty much garbage code using llm, i never use it but it shows up when i do search 

1761228574
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am pretty much looking for something that can do this `myfunc(@unpack(.{1, 2, 3})); // Unpacking for function call` does zig not have it? maybe a different name?

1761228592
ifreund!2940d10f8b@user/ifreund
you're probably looking for @call()

1761228607
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i c, let me look into it

1761228901
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ifreund, that actually worked like a charm, thanks :D

1761229171
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I used to dislike that you can't re-use variable names in Zig like in Rust, but last week I had a bug in C from doing that (accidentally) and just now I was reading about Gleam and it said how you *can* re-use variable names but I don't want to anymore lmao

1761229257
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
good call, its commonly done in python and probably leads to lots of bugs and wastes time debugging.

1761229409
dutchie!~dutchie@user/dutchie
Python variable scope is a mess

1761229426
dutchie!~dutchie@user/dutchie
python

1761229428
dutchie!~dutchie@user/dutchie
whoops

1761229551
dutchie!~dutchie@user/dutchie
only modules, classes and functions have their own scope. this means that e.g. for loop variables leak not only into the scope following the loop, as is somewhat well-known, but also *before* the loop

1761229565
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well since its reference based, var can be anything at any point. when i was first learning python i thought it was so cool, later as i developed more you realize its not a good feature.

1761229565
dutchie!~dutchie@user/dutchie
(you get an UnboundLocalError, but the variable still "exists")

1761229590
dutchie!~dutchie@user/dutchie
also with foo as bar: 

1761229619
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, i just noticed the other day that for loop `i` can't be accessed outside of scope! i had gotten to that bad habit.

1761229667
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
^ in zig

1761229682
dutchie!~dutchie@user/dutchie
(oh, I guess lambdas and comprehensions create scopes too. but the surprising thing is that for and with *don't*)

1761229727
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lambda was the worst feature thing that was added to python, lol

1761229777
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it never belonged in python, someone submitted it and i think Guido accepted it

1761229793
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
later realized it was a bad call

1761229944
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i would still use something like python over c though, c is like king of mess.

1761230187
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I kind of like C tbh (even though it's got so many footguns)

1761230200
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
but also that's what I write professionaly so maybe it's Stockholm syndrome at this point

1761230356
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
agree with it being stockholm syndrome :P well it was really good when it was first created though, but it never got fixed but went into another mess with c++

1761230373
bblack!~bblack@wikimedia/bblack-WMF
yeah I was a captive of C for many years, I feel you :)

1761230377
bblack!~bblack@wikimedia/bblack-WMF
Zig is setting me free, finally

1761230432
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
using zig now i can truly say its a true successor to c

1761232684
erock!8a023a9e4a@pico/erock
agreed, pretty excited about learning zig, it's been a lot of fun

1761232738
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
:D

1761232770
erock!8a023a9e4a@pico/erock
i especially like the payload capture with if/else/catch

1761232930
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
too many things to like but ya i like it as well, you don't have to do an external try/catch block. having it in if/for/... seems natural.

1761233161
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
catch + switch is very neat as well

1761235003
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
finding one of those gems is so exiting https://ziglang.org/documentation/master/std/#std.math.maxInt

1761243619
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
stealth_: I'd never thought about single-bit two's complement before looking at that link lol

1761243882
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
bwbuhse, i am sure what you said is funny but i am not getting it :P

1761243912
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
that maxInt of i1 is 0 because signed 1 is -1, that's all :)

1761243983
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
since the most-significant bit also represents if a number is signed, and it's a single bit, so the *only* bit is the most significant bit

1761243983
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ah, ya, that's a gotcha one. 

1761243999
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is also minInt

1761244405
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i wonder why anyone would use i0/u0, maybe as void? then again whats the difference between i0 vs u0! lol

1761248720
Amun-Ra!~amun-ra@retro.rocks
and i1? ;)

1761249053
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`minInt(i1)` // `-1`       `maxInt(i1)` // `0`

1761249130
grayhatter!~grayhatte@user/grayhatter
i1 + u31

1761249159
grayhatter!~grayhatte@user/grayhatter
or i1 + u63 if you prefer 

1761249179
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but with u0 or i0 its all 0, minInt maxInt

1761249940
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it might be cool to replace `u0` and `i0` to `z` for zero

1761250068
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://ziglang.org/documentation/0.15.2/#Zero-Bit-Types

1761250389
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok, `z` is a bad idea maybe `z0`! good thing i am not a language creator. lol

