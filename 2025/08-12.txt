1754958896
hardliner66!~hardliner@2a02:8388:1849:a800:ec93:95b5:ea0:6573
Hi. I'm currently trying to update a project of mine to the newest zig version. In the original code I had helper functions to format and print to stdout and stderr but they don't compile anymore. does anyone have a small example on how to get that working again?

1754958914
hardliner66!~hardliner@2a02:8388:1849:a800:ec93:95b5:ea0:6573
This is the old code I had: https://paste.rs/Yz6XI.txt

1754959063
andrewrk!~andrewrk@mail.ziglang.org
hardliner66: check out the upgrade guide: https://github.com/ziglang/zig/pull/24329

1754959068
andrewrk!~andrewrk@mail.ziglang.org
(this will also go into the release notes)

1754959302
hardliner66!~hardliner@2a02:8388:1849:a800:ec93:95b5:ea0:6573
omg, thanks so much. it compiles now. now I just need to fix everything else :D

1754959563
hardliner66!~hardliner@2a02:8388:1849:a800:ec93:95b5:ea0:6573
nice, everything works again ^^

1754959943
Drixtan!~Drixtan@user/Drixtan
andrewrk, the 2 footguns for the 'format' aka: "Introducing a format method to a struct caused a bug if there was formatting code somewhere that prints with {} and then starts rendering differently.

1754959943
Drixtan!~Drixtan@user/Drixtan
 

1754959944
Drixtan!~Drixtan@user/Drixtan
Removing a format method to a struct caused a bug if there was formatting code somewhere that prints with {} and is now changed without notice.

1754959953
Drixtan!~Drixtan@user/Drixtan
is so incomprehensible to me

1754960052
andrewrk!~andrewrk@mail.ziglang.org
Drixtan: before, when you add or remove `format` method, it would change your print statements elsewhere. now, it doesn't

1754960244
Drixtan!~Drixtan@user/Drixtan
elsewhere = at another site than the {} <-- designed one for example?

1754960275
Drixtan!~Drixtan@user/Drixtan
so using an {f} assign a format site for the format function explicitly ?

1754960304
Drixtan!~Drixtan@user/Drixtan
did I summarize it correctly?

1754960327
andrewrk!~andrewrk@mail.ziglang.org
I'm not sure, since it wasn't a complete sentence

1754960767
hardliner66!~hardliner@2a02:8388:1849:a800:ec93:95b5:ea0:6573
I do have another question. a library I'm trying to use isn't on the newest version, so while trying to update it I found that its using "usingnamespace", which was removed. Is there an alternative to it or do I need find a different solution?

1754960822
andrewrk!~andrewrk@mail.ziglang.org
there are a number of solutions listed here: https://github.com/ziglang/zig/issues/20663

1754960837
andrewrk!~andrewrk@mail.ziglang.org
look for the header "Use Cases" in the OP

1754960907
hardliner66!~hardliner@2a02:8388:1849:a800:ec93:95b5:ea0:6573
thanks again :D

1754960952
Drixtan!~Drixtan@user/Drixtan
what I meant is, when someone is trying to format, he is placing "formating sites", like those {}

1754960980
Drixtan!~Drixtan@user/Drixtan
and using a {f} explicitly define a formating site for the usage of a format function, that could be custom for instance.

1754961029
Drixtan!~Drixtan@user/Drixtan
wihtout the "f" in the {f} format site, the site isn't explicitly designed for a format function, so if the format function was introducing other formating sites like {} <- that could cause issues

1754961037
andrewrk!~andrewrk@mail.ziglang.org
yes that's right

1754961088
Drixtan!~Drixtan@user/Drixtan
alright, thank you 

1755007919
tsujp!497e1f7b6a@sourcehut/user/tsujp
is there a nice way to have a function accept a struct argument, and to pass arguments to that function where missing struct fields have their default value?

1755007951
tsujp!497e1f7b6a@sourcehut/user/tsujp
kind of like a decl literal (or literally lol) but at "call time" instead of "declaration time"

1755008540
tsujp!497e1f7b6a@sourcehut/user/tsujp
Oh hangon sorry there _are_ defaults like that but I am trying to do it in combination with a decl_literal

1755009254
tsujp!497e1f7b6a@sourcehut/user/tsujp
Doesn't look like this is possible by default, if I understand things correctly here

1755009319
tsujp!497e1f7b6a@sourcehut/user/tsujp
foobar(.default);    works with a decl literal, but imagine I want .default but to only override 1 or 2 fields on it:  foobar(.default{ .a = 1, .b = 2 });    without having to create an entirely new decl literal in the struct, and without having to specify all the other fields I wnat to use the default values for

1755009339
tsujp!497e1f7b6a@sourcehut/user/tsujp
the default use only appears to work for _non-decl literals_

1755009403
ifreund!2940d10f8b@user/ifreund
just give all the fields default values

1755009408
ifreund!2940d10f8b@user/ifreund
.{}

1755010603
tsujp!497e1f7b6a@sourcehut/user/tsujp
in this case default values don't work, they only make sense on the named default which is the one I want to sometimes override

1755011969
ifreund!2940d10f8b@user/ifreund
tsujp: you could also have foobar(.default) and foobar(.nondefault(.{ .a = 1 }))

1755011981
ifreund!2940d10f8b@user/ifreund
decl literals work for functions too

1755012015
ifreund!2940d10f8b@user/ifreund
zig is quite flexible here, I'm sure you can figure out how to express the thing you have in your head eventually :)

1755012106
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah so i could have a decl literal _function_ and pass in what is effectively an anonymous struct and then reify that into a concrete type

1755012120
tsujp!497e1f7b6a@sourcehut/user/tsujp
i.e. custom logic (which is fine), I was going that route now

1755012162
tsujp!497e1f7b6a@sourcehut/user/tsujp
ifreund: forgot to tag ^

1755012270
tsujp!497e1f7b6a@sourcehut/user/tsujp
Also this is only really to help with tests, but because there won't be any use of the decl literal outside of test {} blocks zig won't compile that decl literal on the struct into a release build will it?

1755012349
ifreund!2940d10f8b@user/ifreund
nothing special about decl literals with regards to what is compiled or not

1755017954
fleischie!~fleischie@vm069.de
Really excited for the async/IO rewrite from Andrew's talk recently.

1755017978
fleischie!~fleischie@vm069.de
I for one enjoy rewriting my app based on the changed stdlib.

1755017983
fleischie!~fleischie@vm069.de
And I mean this candidly.

1755018208
Earnestly!~earnest@user/earnestly
Oh yes, the other "git with bug reports/issues/stuff" tool was radicle. I had forgotten until it showed up again

1755018222
Earnestly!~earnest@user/earnestly
cf. fossil discussion

1755020903
tsujp!497e1f7b6a@sourcehut/user/tsujp
Earnestly: sounds interesting, more context?

1755020908
tsujp!497e1f7b6a@sourcehut/user/tsujp
fleischie: me too tbh

1755020957
tsujp!497e1f7b6a@sourcehut/user/tsujp
I'm trying to reify a struct field at comptime and getting: dereference of '*const *const [1]u8' exceeds bounds of containing decl of type '[1]u8'

1755020996
tsujp!497e1f7b6a@sourcehut/user/tsujp
A bit heavy handed but I have a htb function which does comptime string to bytes conversion and I'm trying to change the field on the struct by doing:   new_fields[i].@"type" = *const [1]u8;     new_fields[i].default_value_ptr = @ptrCast(&htb(f.defaultValue().?));

1755021028
tsujp!497e1f7b6a@sourcehut/user/tsujp
I can post a real MVP snippet tomorrow, just about to collapse into bed so asking now as a hail mary lol

1755023153
andrewrk!~andrewrk@mail.ziglang.org
I'm going to try fossil in a side project

1755023285
tsujp!497e1f7b6a@sourcehut/user/tsujp
it doesn't look like this is possible? I can easily create a struct as a type but trying to create a struct with concrete values at comptime doesn't seem to work at all

1755023720
ifreund!2940d10f8b@user/ifreund
fossil doesn't support rebasing :/

1755023734
ifreund!2940d10f8b@user/ifreund
I bounced off of it pretty hard last time I tried

1755024287
andrewrk!~andrewrk@mail.ziglang.org
ah, that might be a showstopper

1755024295
andrewrk!~andrewrk@mail.ziglang.org
for zig that's a load bearing feature with how we handle zig1.wasm

1755024324
andrewrk!~andrewrk@mail.ziglang.org
I was thinking about making a project that introduces issue tracking into the low-level git storage model

1755024329
ifreund!2940d10f8b@user/ifreund
fossil has no history rewriting at all

1755024366
andrewrk!~andrewrk@mail.ziglang.org
ideally I could convince sourcehut, codeberg, et all, to adopt such a model

1755024395
ifreund!2940d10f8b@user/ifreund
I think git-bug does that? https://github.com/git-bug/git-bug

1755024409
ifreund!2940d10f8b@user/ifreund
I also seem to recall linking you this before

1755024409
andrewrk!~andrewrk@mail.ziglang.org
is it good tho?

1755024438
ifreund!2940d10f8b@user/ifreund
I haven't tested it. It seems pretty well thought out though

1755024598
andrewrk!~andrewrk@mail.ziglang.org
unless i'm missing something there's no demo

1755024711
andrewrk!~andrewrk@mail.ziglang.org
ah they have a CLI, TUI and a WIP web UI

1755024741
andrewrk!~andrewrk@mail.ziglang.org
I'm curious how they handled authentication in an internet-facing web ui

1755024766
andrewrk!~andrewrk@mail.ziglang.org
well, since it's basically the same idea I want to do, I'll try it out

1755025071
andrewrk!~andrewrk@mail.ziglang.org
still, my point is that these alternative code forges missed an opportunity to store their issues in git rather than their own db

1755025098
andrewrk!~andrewrk@mail.ziglang.org
you don't need that vendor lock in when you're not profit like codeberg

1755025188
ifreund!2940d10f8b@user/ifreund
I mean, codeberg is working on forgejo federation which gets rid of vendor lock as well

1755025200
bblack!~bblack@wikimedia/bblack-WMF
yeah what we really need is some solution to become the standard way to do so, maybe even upstreamed into git, at least the standards for how the data is stored

1755025222
ifreund!2940d10f8b@user/ifreund
but yeah, I'm not coming up with any real downsides for using git as the database

1755025233
bblack!~bblack@wikimedia/bblack-WMF
there could many UIs, there just needs one way that the bugs/etc issues are stored in git

1755025603
bblack!~bblack@wikimedia/bblack-WMF
https://github.com/git-bug/git-bug/blob/trunk/doc/design/data-model.md does seem like they put some thought into it!

1755026383
tsujp!497e1f7b6a@sourcehut/user/tsujp
keeping with git means I still get to use the beauty that is magit

1755030774
AmandaC!~m-yt727s@cloud.camnet.site
Hrm. with std.json can I specify in my struct that it's okay if a field is missing? Making it nullable doesn't seem to have worked for that

1755030784
AmandaC!~m-yt727s@cloud.camnet.site
or do I have to manually decode stuff

1755036152
hadronized!~hadronize@2001:41d0:a:fe76::1
AmandaC: what should the field be set to if it’s missing?

1755036154
hadronized!~hadronize@2001:41d0:a:fe76::1
undefined memory?

1755036176
hadronized!~hadronize@2001:41d0:a:fe76::1
usually, other languages use defaults for taht

1755036178
hadronized!~hadronize@2001:41d0:a:fe76::1
that

1755036191
hadronized!~hadronize@2001:41d0:a:fe76::1
I haven’t checked what std.json has for that matter though

1755036286
AmandaC!~m-yt727s@cloud.camnet.site
hadronized: in this case null since I'm passing a nullable value

1755036312
hadronized!~hadronize@2001:41d0:a:fe76::1
so the type should be ?T then?

1755036342
AmandaC!~m-yt727s@cloud.camnet.site
Though I realized I can just catch the MissingField and silently ignore it.

1755036383
AmandaC!~m-yt727s@cloud.camnet.site
At least for this specific case

1755036449
AmandaC!~m-yt727s@cloud.camnet.site
( I'm polling an rpc-like endpoint waiting for dads to be filled out. The "data" field is apparently just missing until the data is filled out )

1755036473
AmandaC!~m-yt727s@cloud.camnet.site
I was expecting it to be null, not missing entirely

1755038178
bblack!~bblack@wikimedia/bblack-WMF
tsujp: yeah but then you have to endure the pain of emacs ;)

1755038699
rvrb!~rvrb@156.146.51.228
Radicle is a true peer-to-peer protocol. It doesn’t use nor depend on any blockchain or cryptocurrency. Radworks, the organization that has been financing Radicle is organized around the RAD token which is a governance token on Ethereum.

1755038701
rvrb!~rvrb@156.146.51.228
hard pass

