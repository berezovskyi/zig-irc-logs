1746058044
clevor!sid649024@id-649024.hampstead.irccloud.com
Huh

1746058152
clevor!sid649024@id-649024.hampstead.irccloud.com
Maybe a rebuild will fix it.

1746060136
clevor!sid649024@id-649024.hampstead.irccloud.com
https://gist.github.com/myclevorname/e813ebe2bad5c82994f2ca5c0d65b376

1746060779
clevor!sid649024@id-649024.hampstead.irccloud.com
ü§¶ I need to read

1746061957
andrewrk!~andrewrk@mail.ziglang.org
what was the issue?

1746062069
clevor!sid649024@id-649024.hampstead.irccloud.com
Building the doctests cause an undefined symbol error for some reason. The solution is to pass `-Dno-langref`.

1746064186
andrewrk!~andrewrk@mail.ziglang.org
-Dno-lib will do that and also not give you a copy of lib/

1746079800
earthshaker!~earthshak@user/earthshaker
whats up fellow ziglings

1746079808
earthshaker!~earthshak@user/earthshaker
i'm feeling rather ziggy today

1746083606
ifreund!2940d10f8b@user/ifreund
andrewrk: very nice!

1746087204
sunflr!~sunflr@user/sunflr
xD

1746095409
clevor!sid649024@id-649024.hampstead.irccloud.com
r/fellowziglings

1746101100
mountaingoat!~mountaing@user/mountaingoat
how do i debug `zig build` crashing? "error: the following build command crashed: ..."

1746101114
mountaingoat!~mountaing@user/mountaingoat
doing a zig build test and zig test ... works fine

1746103266
sunflr!~sunflr@user/sunflr
that's because zig build test runs tests that you make yourself mountaingoat. Although, i'm not sure how to debug the build script itself failing? Maybe you can upload what it says to 0x0?

1746104315
mountaingoat!~mountaing@user/mountaingoat
sunflr: it's the binary built by zig build that's broken, crashes with: Illegal instruction (core dumped), but a direct zig test invocation works fine. probably something with armv7a. will search the github issues

1746104374
sunflr!~sunflr@user/sunflr
oh you're on arm? I guess that could be the cause

1746104389
sunflr!~sunflr@user/sunflr
wait

1746104400
sunflr!~sunflr@user/sunflr
mountaingoat: which kernel version are you using?

1746104437
mountaingoat!~mountaing@user/mountaingoat
6.12.25-1-rpi #1 SMP Sat Apr 26 07:42:19 MDT 2025 armv7l GNU/Linux

1746104508
sunflr!~sunflr@user/sunflr
ok well i'm not running on arm myself so i'm not sure i can help

1746105928
ifreund!2940d10f8b@user/ifreund
mountaingoat: run the command it said crashed in a debugger?

1746105946
ifreund!2940d10f8b@user/ifreund
you may need to remove the --listen arg at the end

1746106124
mountaingoat!~mountaing@user/mountaingoat
https://pastebin.com/9hjewFvJ

1746106132
mountaingoat!~mountaing@user/mountaingoat
ifreund: ^

1746106165
mountaingoat!~mountaing@user/mountaingoat
using zig-linux-armv7a-0.14.0

1746106301
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
andrewrk: just a thought on the IO branch...it should be possible to have a std.testing.io impl that can detect leaked file descriptors. I have someething like that for the io stuff I'm working on and that would be a huge nice to have in std

1746118606
andrewrk!~andrewrk@mail.ziglang.org
rockorager: yeah! I had the same thought

1746118613
andrewrk!~andrewrk@mail.ziglang.org
also I was hoping we could compare notes

1746118624
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
would be happy to

1746118637
andrewrk!~andrewrk@mail.ziglang.org
unfortunately this reader/writer interface work is taking a long time but as you can imagine it's a pretty important piece of the puzzle

1746118659
andrewrk!~andrewrk@mail.ziglang.org
already had to rewrite http and zstd

1746118709
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah that makes sense

1746118724
andrewrk!~andrewrk@mail.ziglang.org
turns out though, the reason behind https://github.com/ziglang/zig/issues/19231 was lack of buffered reader / buffered writer as the standard interface

1746118835
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
are the writergate and io branches one in the same?

1746119863
bw!sid2730@user/betawaffle
I asked a question a few weeks ago and I didn‚Äôt really get an answer. Just read something in llvm docs that reminded me of the question. It specifies that ‚Äúallocated objects‚Äù can‚Äôt wrap around the address space, including the address after the end of the object. To me that suggests that it‚Äôs impossible to use the last byte of the address space in code that flows through llvm, for example, a slice that includes the byte at 2^64-1 would cause 

1746119863
bw!sid2730@user/betawaffle
undefined behavior (potentially) because llvm is allowed to assume `slice.ptr + slice.len` doesn‚Äôt wrap around to zero. Though I suppose zig also agrees since `+` assumes no wrapping and `+%` isn‚Äôt allowed for pointers.

1746120001
bw!sid2730@user/betawaffle
So my question I guess is‚Ä¶ is that last byte really never used on any architecture? Isn‚Äôt that sometimes the address of a reset vector or something?

1746120067
bw!sid2730@user/betawaffle
If it is used, did llvm just decide you‚Äôre not allowed to use llvm for that code?

1746120189
bw!sid2730@user/betawaffle
Obviously the no wrapping assumption is useful for optimizations, but I figure there‚Äôd be as escape hatch like allowing zero pointers to be valid (not considered null)

1746120341
grayhatter!~grayhatte@user/grayhatter
bw: your question doesn't make sense the way you asked it

1746120357
bw!sid2730@user/betawaffle
How so?

1746120390
grayhatter!~grayhatte@user/grayhatter
are you expecting a pointer + length, where it wraps around to be zero to be a valid memory access?

1746120426
bw!sid2730@user/betawaffle
No, but llvm says ptr + len must not wrap

1746120438
bw!sid2730@user/betawaffle
Or you get undefined behavior

1746120452
grayhatter!~grayhatte@user/grayhatter
yes, do you want it to wrap? or do you expect that wrapping to be valid?

1746120500
bw!sid2730@user/betawaffle
I don‚Äôt care if it wraps, I‚Äôm interested in the implication that accessing the last byte in the address space isn‚Äôt possible

1746120543
bw!sid2730@user/betawaffle
Because doing so requires telling llvm about an allocation where pointer + length would wrap

1746120570
grayhatter!~grayhatte@user/grayhatter
speaking about modern arch with a MMU, accessing the last byte in the address space isn't possible for a number reasons. But for an embedded device, accessing the last byte *is* valid, and is' possible... your question isn't about the last byte, it's about accessing the last byte + 1

1746120633
bw!sid2730@user/betawaffle
No, llvm specifically says ‚Äúno allocated object may cross the unsigned address space boundary (including the pointer after the end of the object)‚Äù

1746120643
grayhatter!~grayhatte@user/grayhatter
access 1 byte, at PTR_MAX; or ptr_max[0..1]; is a valid instruction

1746120652
bw!sid2730@user/betawaffle
The pointer past the end of the object part

1746120665
grayhatter!~grayhatte@user/grayhatter
do you want to access 1 bytes at that address?

1746120671
grayhatter!~grayhatte@user/grayhatter
s/1/2

1746120693
bw!sid2730@user/betawaffle
Read what I quoted

1746120695
grayhatter!~grayhatte@user/grayhatter
because ptr[0..2] is address 0xffff and address 0x0000

1746120716
grayhatter!~grayhatte@user/grayhatter
bw: I understand what you're quoting, I'm asking about why you consider that statement to be confusing?

1746120730
bw!sid2730@user/betawaffle
It‚Äôs not confusing at all

1746120744
grayhatter!~grayhatte@user/grayhatter
then I don't know what your question actually is?

1746120766
bw!sid2730@user/betawaffle
It‚Äôs effectively saying llvm is allowed to optimize under the assumption that ptr + len doesn‚Äôt wrap

1746120804
bw!sid2730@user/betawaffle
Imagine the following, let‚Äôs say you have a for loop over that slice

1746120849
Gliptic!~glip@2a01:4f8:c012:91f3::1
does sound like llvm doesn't support it, indeed

1746120860
bw!sid2730@user/betawaffle
And llvm decides to use an end pointer instead of a length

1746120877
bw!sid2730@user/betawaffle
Since that can save some instructions

1746120888
grayhatter!~grayhatte@user/grayhatter
I'm assuming what LLVM is stating, the edge case where you access the some block of memory, and then increment the ptr, where that increment would make the pointer have a value of 0x0000, is undefined, and they don't account for that edge case

1746120891
bw!sid2730@user/betawaffle
But that end pointer could wrap

1746120964
bw!sid2730@user/betawaffle
So‚Ä¶ it‚Äôs allowed to do a bounds check using the end pointer, rather than the index and length

1746120987
grayhatter!~grayhatte@user/grayhatter
bw, you've just described for (0..) |i| if (list_of_u8[i] or true) continue;

1746120989
bw!sid2730@user/betawaffle
Which is valid, but only if that end pointer can‚Äôt wrap

1746121019
grayhatter!~grayhatte@user/grayhatter
that being the pathological example for behavior that's obviouly valid otherwise

1746121059
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, for (-8..0) |i| { ... end_ptr[i] .. } [not actual code]

1746121068
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's an actual transformation that llvm can do

1746121084
bw!sid2730@user/betawaffle
Exactly

1746121124
bw!sid2730@user/betawaffle
Which works for everything except the last byte in the address space

1746121131
grayhatter!~grayhatte@user/grayhatter
for (0..) |_| { ptr += 1; if (ptr == null) break; }

1746121132
Gliptic!~glip@2a01:4f8:c012:91f3::1
because it allows the end condition to be e.g. a inc reg; jnz <loop>

1746121151
grayhatter!~grayhatte@user/grayhatter
llvm will assume that if ptr == null is impossible because of that rule

1746121154
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: that obviously is not legal

1746121205
Gliptic!~glip@2a01:4f8:c012:91f3::1
but even if you never create this wrapping pointer yourself, llvm might produce it after transformations

1746121216
grayhatter!~grayhatte@user/grayhatter
Gliptic: duh, but human readable, and machine readable are differen things, I needed an example where it's easy to parse how both will see the emitted code

1746121240
bw!sid2730@user/betawaffle
Gliptic, my thinking is that you can use the last byte in practice, but only in very specific ways you know llvm isn‚Äôt going to do silly things

1746121284
grayhatter!~grayhatte@user/grayhatter
there are plenty of examples where you could write code, that would result in code that wraps, LLVM will ignore the edge case where that wrapping happens

1746121300
grayhatter!~grayhatte@user/grayhatter
the exact specifics aren't defined in that rule/statement.

1746121338
grayhatter!~grayhatte@user/grayhatter
bw: you should assume LLVM will do whatever it can to ruin your program

1746121362
bw!sid2730@user/betawaffle
grayhatter: yeah that‚Äôs the point of my question lol

1746121393
grayhatter!~grayhatte@user/grayhatter
LLVM used to be the compiler you used because gcc would use optimizations that were user hostile... now LLVM is just as bad, if not worse than gcc, when it comes to abusing UB to emit buggy code

1746121429
bw!sid2730@user/betawaffle
I feel like this is an interesting example tho

1746121458
bw!sid2730@user/betawaffle
The optimizations are correct and beneficial in practically all code

1746121465
grayhatter!~grayhatte@user/grayhatter
all of them are interesting, because they're all edge cases that could have unpredictable sideeffects 

1746121506
grayhatter!~grayhatte@user/grayhatter
pointers never wrap feels like a useful rule to have when writing a compiler though

1746121531
bw!sid2730@user/betawaffle
And wrapping around the address space is even fine in some cases, just not like less than comparisons

1746121597
Gliptic!~glip@2a01:4f8:c012:91f3::1
I mean, technically this wrapping isn't even a problem in the actual machine code generated

1746121606
bw!sid2730@user/betawaffle
Like it‚Äôs fine to wrap as long as you wrap back before trying to use the value

1746121639
grayhatter!~grayhatte@user/grayhatter
if you say pointers never wrap, you can apply that rule to how you access the memory. Like my null check example above. If you can say this value will always be greater than null, you can omit null checks in the body

1746121647
Gliptic!~glip@2a01:4f8:c012:91f3::1
unless there's more transformations that are like "ok, this never wraps, so I can transform it into this other thing that assumes it doesn't wrap"

1746121654
bw!sid2730@user/betawaffle
Gliptic: unless you use the wrong jump instruction with your bounds check

1746121713
grayhatter!~grayhatte@user/grayhatter
bw: "it's fine to wrap, as long as you wrap back" uh... I think that's explicitly disallowed by that LLVM line?

1746121755
bw!sid2730@user/betawaffle
grayhatter, true, in llvm it‚Äôs bad, but on most actual architectures it‚Äôs fine

1746121767
grayhatter!~grayhatte@user/grayhatter
LLVM pointers never wrap, so if you write code that depends on it wrapping forwards and back, LLVM says, you're on your own, good luck bruv

1746121858
grayhatter!~grayhatte@user/grayhatter
LLVM will also helpfully dectect that undefined wrapping, and then delete a bunch of extra code that would have been useful, but for that UB it found

1746121859
bw!sid2730@user/betawaffle
Oh also you‚Äôre not allowed to have an allocation that covers the whole address space (or even more than half of it)

1746121883
grayhatter!~grayhatte@user/grayhatter
that's an interesting rule

1746121913
bw!sid2730@user/betawaffle
It‚Äôs to support signed offsets lol

1746121933
grayhatter!~grayhatte@user/grayhatter
I *knew* it had something to do with the sign bit :D

1746121984
bw!sid2730@user/betawaffle
Anyway‚Ä¶ just pointing out there are definitely pitfalls if you want to write a kernel and don‚Äôt consider some of these things

1746122024
bw!sid2730@user/betawaffle
Because only this little part of the documentation will tell you it‚Äôs a problem

1746122085
bw!sid2730@user/betawaffle
Like there‚Äôs nothing inherently wrong with wanting to use the whole address space, except for the fact that llvm explicitly assumes you won‚Äôt ever do that

1746122132
bw!sid2730@user/betawaffle
And on an embedded platform that might be actually meaningful

1746122190
grayhatter!~grayhatte@user/grayhatter
seems like a mistake to allow your embedded kernel to have ptrs that wrap 

1746122217
grayhatter!~grayhatte@user/grayhatter
I can't think of a single target where both the higest, and lowest ptrs are valid in the same context where wrapping would be useful

1746122218
bw!sid2730@user/betawaffle
But they don‚Äôt wrap, they only wrap in llvm‚Äôs weird world

1746122275
bw!sid2730@user/betawaffle
I feel like I need a diagram for you

1746122311
bw!sid2730@user/betawaffle
The key point is that LLVM requires the pointer past the end to not wrap

1746122333
bw!sid2730@user/betawaffle
Which is different from saying the allocation itself doesn‚Äôt wrap

1746122445
bw!sid2730@user/betawaffle
Like‚Ä¶ imagine a simplified example where the address space is 256 bytes, pointers are 8 bits, and you want to iterate over slice[0..255]

1746122470
bw!sid2730@user/betawaffle
llvm will not emit code that works

1746122504
bw!sid2730@user/betawaffle
But a human could write code in assembly to do the right thing

1746122569
bw!sid2730@user/betawaffle
Granted‚Ä¶ the slice‚Äôs length in this scenario would be 0 lol

1746122628
bw!sid2730@user/betawaffle
(would wrap to zero)

1746122645
andrewrk!~andrewrk@mail.ziglang.org
rockorager: there's wrangle-writer-buffering (reader/writer interface) and async-await-demo

1746122657
andrewrk!~andrewrk@mail.ziglang.org
the latter is waiting for the former to be complete

1746122685
andrewrk!~andrewrk@mail.ziglang.org
331 files changed, 25837 insertions(+), 29942 deletions(-)

1746122709
clevor!sid649024@id-649024.hampstead.irccloud.com
That looks like a jacobly-sized PR.

1746122841
andrewrk!~andrewrk@mail.ziglang.org
tests not even compiling yet, let alone passing üò∞

1746122919
clevor!sid649024@id-649024.hampstead.irccloud.com
I meant in size

1746122946
andrewrk!~andrewrk@mail.ziglang.org
I know 

1746122997
andrewrk!~andrewrk@mail.ziglang.org
at some point here I'm going to do a stream, blog post, talk or something like this to explain why this is worth all the effort, demo the results, and solicit help getting it across the finish line

1746123067
clevor!sid649024@id-649024.hampstead.irccloud.com
Having a whole I/O interface and passing it around vaguely reminds me of Haskell's IO monad.

1746123172
andrewrk!~andrewrk@mail.ziglang.org
it's not lazy though

1746123180
andrewrk!~andrewrk@mail.ziglang.org
it's merely an interface

1746123183
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's a bit different, in Haskell you're actually _returning_ the computation that will be running

1746123227
clevor!sid649024@id-649024.hampstead.irccloud.com
FWIW I haven't seen the wrangle-writer-buffering PR yet.

1746123266
andrewrk!~andrewrk@mail.ziglang.org
I haven't opened a PR because I don't have anything to demo yet

1746123689
grayhatter!~grayhatte@user/grayhatter
bw: it wont wrap, and ptr + length will never wrap

1746123738
grayhatter!~grayhatte@user/grayhatter
ptr + length != ptr + length - 1

1746123805
bw!sid2730@user/betawaffle
grayhatter: that‚Äôs only true in the case of the last byte in the address space not being part of the slice

1746123812
grayhatter!~grayhatte@user/grayhatter
bw: that doesn't imply that ptr + length - 1 can never be the last address, but I guess it might feel like that?

1746123872
bw!sid2730@user/betawaffle
Well, in my example length is 256, which doesn‚Äôt fit in 8 bits

1746123887
bw!sid2730@user/betawaffle
So by definition it would have to wrap

1746123925
grayhatter!~grayhatte@user/grayhatter
in your example the length is 255 bytes though?

1746123950
bw!sid2730@user/betawaffle
You‚Äôre right it was a typo sorry

1746124011
bw!sid2730@user/betawaffle
Let‚Äôs do an example that‚Äôs a bit less weird‚Ä¶ back to 64 bit address space, still a 256 byte slice, but at the end of the address space

1746124037
bw!sid2730@user/betawaffle
So ptr + len - 1 would be 2^64-1

1746124056
bw!sid2730@user/betawaffle
(which is already undefined behavior)

1746124073
grayhatter!~grayhatte@user/grayhatter
I don't think it is

1746124074
bw!sid2730@user/betawaffle
Because ptr + len wraps

1746124107
bw!sid2730@user/betawaffle
grayhatter: unfortunately for you, llvm will operate as though it is

1746124121
grayhatter!~grayhatte@user/grayhatter
bw: I mean more... I think you're wrong

1746124130
grayhatter!~grayhatte@user/grayhatter
do you have a link to the LLVM docs you're citing?

1746124148
bw!sid2730@user/betawaffle
https://llvm.org/docs/LangRef.html#allocatedobjects

1746124208
bw!sid2730@user/betawaffle
But let‚Äôs just make sure we‚Äôre on the same page that ptr + len wraps, since len is 256 and ptr is 2^64-256

1746124348
grayhatter!~grayhatte@user/grayhatter
yes, `ptr = ptr + object_size` would wrap

1746124369
grayhatter!~grayhatte@user/grayhatter
> no allocated object may cross the unsigned address space boundary (including the pointer after the end of the object),

1746124421
grayhatter!~grayhatte@user/grayhatter
so for any object, ptr_of_object must never wrap, and ptr_of_object += one_object; must never wrap

1746124425
grayhatter!~grayhatte@user/grayhatter
right?

1746124452
grayhatter!~grayhatte@user/grayhatter
if ptr_of_object + one_object == 0x00, that doesn't wrap

1746124774
grayhatter!~grayhatte@user/grayhatter
reading it explicitly, I get the sense the intent is "LLVM is allowed to assume that `ptr` and `ptr += 1` will never require two load instructions (one for the end of the memory space, and a second for the beginning of the memory space) to "construct" an object

1746124909
grayhatter!~grayhatte@user/grayhatter
I can imagine a case where you try to load the high 32bits from the end of the address space, and and the low 32bits from the begininning of the address space, to fill a 64bit register. And LLVM asserts that is invalid, and it's allowed to assume that it can always load the full 64bits from the given pointer

1746125005
grayhatter!~grayhatte@user/grayhatter
and, this is specifically about allocated objects. So I think this only applies to kernels which provide an alloc* API

1746125047
grayhatter!~grayhatte@user/grayhatter
> your alloc* implementation may not use alignments where the object itself could wrap

1746128178
bw!sid2730@user/betawaffle
grayhatter: it‚Äôs also for stack allocations and globals, so basically anything in memory

1746128321
bw!sid2730@user/betawaffle
ptr_of_object + one_object exactly what they mean by the pointer after the end

1746128343
bw!sid2730@user/betawaffle
And in your example of it being zero, that means it wrapped

1746128361
bw!sid2730@user/betawaffle
Which is undefined behavior according to llvm

1746128456
bw!sid2730@user/betawaffle
‚Äúallocated object is a region of memory‚Äù

1746128561
bw!sid2730@user/betawaffle
And the pointer after the end is exactly what `slice.ptr + slice.len` gives you (or one more in the case of a sentinel terminated slice)

1746129769
grayhatter!~grayhatte@user/grayhatter
 bw> And in your example of it being zero, that means it wrapped 

1746129793
grayhatter!~grayhatte@user/grayhatter
I disagree with your interpretation 

1746129818
bw!sid2730@user/betawaffle
Well, that‚Äôs concerning :)

1746129951
grayhatter!~grayhatte@user/grayhatter
it doesn't say "no pointer" can't wrap, is says "no object" can wrap

1746130009
grayhatter!~grayhatte@user/grayhatter
including the pointer at the end after the object

1746130038
grayhatter!~grayhatte@user/grayhatter
because the use the word "the" instead of "a" it's abmigious if they mean "any pointer", or "the pointer of the following object"

1746130167
grayhatter!~grayhatte@user/grayhatter
but it's possible I'm mistaken... but if I am, that's on LLVM because there are a number of ways to express what you think it means that are more clear

1746130193
grayhatter!~grayhatte@user/grayhatter
does #llvm exist? you could ask there too

1746132454
bw!sid2730@user/betawaffle
I mean it doesn‚Äôt seem ambiguous to me at all

1746132476
bw!sid2730@user/betawaffle
I‚Äôm not sure I understand the ambiguity you‚Äôre referring to

1746132513
bw!sid2730@user/betawaffle
They define what they mean by an object

1746132586
bw!sid2730@user/betawaffle
It‚Äôs simply a region of memory returned by some allocation mechanism (stack allocation, a heap allocation function, or a compile-time allocation of a global)

1746132720
bw!sid2730@user/betawaffle
There‚Äôs no other kind of memory, all memory is ‚Äúallocated‚Äù in the sense they are talking about here (though don‚Äôt confuse that with me saying that all memory is valid or whatnot)

1746132755
bw!sid2730@user/betawaffle
A pointer is‚Ä¶ pointing to memory, they define that as such too

1746133357
grayhatter!~grayhatte@user/grayhatter
> all memory is ‚Äúallocated‚Äù in the sense they are talking about here

1746133361
grayhatter!~grayhatte@user/grayhatter
no, that's incorrect

1746133660
grayhatter!~grayhatte@user/grayhatter
inttoptr is an example of a memory address not reserved by an alloc function

1746133689
grayhatter!~grayhatte@user/grayhatter
err... I guess I should say "memory space"

1746134251
grayhatter!~grayhatte@user/grayhatter
ok, just spent a few minutes trying to understand gep, and I'm back at the place the *last* time I spent time with it; which is that I'm just not smart to understand the semantics of gep

1746134378
grayhatter!~grayhatte@user/grayhatter
I don't understand why LLVM authors would write it this way, when the behavior you describe is easier to phrase as "allocated object must be well aligned, addresses must never wrap, and a the following object must never wrap"

1746134464
grayhatter!~grayhatte@user/grayhatter
I assume because there's some other permissiable behavior, but I can't see it, so I'm now at "pointers can never wrap" and the rest is undefined

1746135085
bw!sid2730@user/betawaffle
grayhatter: oh I definitely agree they worded everything way more complicated than I think is necessary

1746135124
bw!sid2730@user/betawaffle
And yeah gep is so poorly understood they made a FAQ for it

1746135244
bw!sid2730@user/betawaffle
I think it‚Äôs because they are math majors

1746143620
clevor!sid649024@id-649024.hampstead.irccloud.com
I'm considering pressing 'Comment' lol https://usercontent.irccloud-cdn.com/file/I7unq61P/Screenshot_20250501-195312_Firefox.png

