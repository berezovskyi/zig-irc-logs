1760486403
Xe!~Xe@perl/impostor/xe
perfect, thanks <3

1760487554
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, <stealth_> andrew would you mind upgrading https://pypi.org/project/ziglang/#history to 0.15.2 when you get a chance, thanks

1760487575
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure if you saw that message. 

1760491011
andrewrk!~andrewrk@mail.ziglang.org
I am not the maintainer

1760491067
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o!, it has your name/username as maintainer :p but its cool, whoever does it will do it i suppose!

1760491324
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how do i go about getting line: 42 working? getting error https://zigbin.io/5cb5a6

1760491563
squeek502!~squeek502@user/squeek502
stealth_, `&q[i]`

1760491648
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
squeek502, getting https://zigbin.io/07e604

1760491730
squeek502!~squeek502@user/squeek502
probably `@ptrCast(&q[i])` then, you have a pointer to a single item and are sticking it into a pointer to an unknown number of items, so you need to be explicit about wanting that to happen

1760491762
squeek502!~squeek502@user/squeek502
(see the note in that error)

1760491862
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see, it does work, i suppose it will take more experience to full grasp how these work.

1760491972
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thans squeek502 

1760491976
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thanks*

1760491985
squeek502!~squeek502@user/squeek502
i think i've linked it before, but i can't recommend enough getting a good understanding of the different pointer types in zig: https://ziglang.org/documentation/master/#Pointers

1760492059
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have read it but its hard to get grasp of it till i have actual experience using it.

1760492126
squeek502!~squeek502@user/squeek502
might be worth noting that in typical zig code that doesn't interact with C, many-item pointers are quite rarely used

1760492137
squeek502!~squeek502@user/squeek502
it's almost always single-item pointers or slices

1760492191
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i c, i do want to get good at access C code since lots of drivers and what not out there are written in C

1760492360
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since i am passing this obj to python, new object is created every time index is accessed, is there anything in zig that makes this easy like cache or should i implement it manually. 

1760492467
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python since its reference based it wouldn't create new object but i am thinking something like @functools.lru_cache

1760496400
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what type do you use for function when only `return null;` 

1760496483
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/891e06

1760496703
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since its inline function goal is to use it as `return errorNULL(...);` so i use something like `?i8` it effects the function from which its being return that doesn't have i8 as return type.

1760497051
Drixtan!~Drixtan@user/Drixtan
why are you even returning something here?

1760497121
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in other function i can do `return errorNull(T, msg);` and it should return null;

1760497192
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Drixtan, example usage: https://zigbin.io/a19a7d

1760497272
Drixtan!~Drixtan@user/Drixtan
https://zig.fly.dev/p/HQXwElEhmaR 

1760497355
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
?void give me error cause the __getitem__ isn't returning void part but if i code like so it works: `pub inline fn errorNull(exception: *c.PyObject, msg: [*]const u8) ?*c.PyObject {`

1760497422
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it limits to only function that has ?c.PyObject as return. was wondering if i can just return null; using ? would have been more flexible 

1760497796
squeek502!~squeek502@user/squeek502
stealth_, could do something like this: https://zigbin.io/ae6bbc

1760497831
squeek502!~squeek502@user/squeek502
btw would probably be good to express `msg` as `[*:0]const u8` assuming it needs to be NUL-terminated

1760498033
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
squeek502, o, now i have to provide it with the return type as well. 

1760498043
squeek502!~squeek502@user/squeek502
yep

1760498100
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
error: expected type 'type', found '@TypeOf(null)' return e.errorNull(null, c.PyExc_IndexError, "index out of range");

1760498693
squeek502!~squeek502@user/squeek502
stealth_, usage would be something like `errorNull(*c.PyObject, c.PyExc_IndexError, "index out of range");` when the function you're calling it from returns `?*c.PyObject`

1760498736
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
squeek502, o, well that unique let me try it out. 

1760498814
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`e.errorNull(?*c.PyObject,` this works. 

1760498872
squeek502!~squeek502@user/squeek502
did you modify what i sent? that would make the return type of my version of `errorNull` into `??*c.PyObject`

1760498949
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
squeek502, this is what i am trying out https://zigbin.io/4d12b2

1760498973
squeek502!~squeek502@user/squeek502
note that my version had `errorNull` return `?T`

1760498984
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o

1760499010
squeek502!~squeek502@user/squeek502
doesn't really matter, up to you which you like better

1760499033
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that works as well, true. i am not sure how happy i am about this. 

1760499058
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it would have been better just to define it can return null and not worry about all these other type defines. 

1760499261
squeek502!~squeek502@user/squeek502
you can't really create an instance of an optional type without knowing the payload's type

1760499409
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i c, if it was normal function i can understand that part but since this is inline function i dono. 

1760499988
squeek502!~squeek502@user/squeek502
stealth_, in theory you might be able to use `null` as the return type like so: https://zigbin.io/0051da but that currently crashes the compiler

1760499997
squeek502!~squeek502@user/squeek502
will open an issue, not sure if that's intended to work or not though

1760500181
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
squeek502, ya, line: 11 is one of the things i tried as well, since you can use `void` when you are not returning nothing, why not allow null!

1760500229
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
inline fn returnNull() @typeOf(null) {

1760500297
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/e632bf maybe something like that 

1760500488
squeek502!~squeek502@user/squeek502
stealth_, @TypeOf(null) actually does work, this compiles and runs: https://zigbin.io/1d050c

1760500581
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, lol i was using small t vs large TypeOf

1760500647
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
@TypeOf should be changed to @typeOf, no? to keep consistence with naming

1760500683
squeek502!~squeek502@user/squeek502
@TypeOf returns a type, so it's TitleCase

1760500738
squeek502!~squeek502@user/squeek502
from https://ziglang.org/documentation/master/#Names: "If x is callable, and x's return type is type, then x should be TitleCase."

1760500819
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i c, i am sure it will confuse new users for a while.

1760501099
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
now that you said it, me looking at builtin function names makes more sense. thanks. 

1760516650
Franciman!~Franciman@mx1.fracta.dev
hi, what's a good resource to get started with zig?

1760516679
Franciman!~Franciman@mx1.fracta.dev
the language reference? Or there is something else too?

1760516686
mimivals1!~mimivalsi@user/MimiValsi
ziglings

1760516706
mimivals1!~mimivalsi@user/MimiValsi
https://codeberg.org/ziglings/exercises/

1760516723
ifreund!2940d10f8b@user/ifreund
do read the language reference as well, but ziglings is indeed good

1760516727
Franciman!~Franciman@mx1.fracta.dev
great! thanks

1760529330
lemons!~doggie@user/doggie-:49517
how do std.log scopes work? specifically how do i define them

1760529355
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
std.log.scoped(.enum_literal)

1760529371
lemons!~doggie@user/doggie-:49517
i assume it takes an arbitrary enum value but just doing that makes std_options.log_scope_levels complain

1760529387
lemons!~doggie@user/doggie-:49517
er, if i try to set that option

1760529468
lemons!~doggie@user/doggie-:49517
rockorager: do i define that .enum_literal anywhere?

1760529480
lemons!~doggie@user/doggie-:49517
or just type verbatim

1760529510
lemons!~doggie@user/doggie-:49517
previously i've tried doing std.log.scoped(LogLevel.thing)

1760529661
clevor!sid649024@id-649024.hampstead.irccloud.com
std.log.scoped(.library)

1760529701
lemons!~doggie@user/doggie-:49517
..yes do i have to define .library anywhere or just type it

1760529723
clevor!sid649024@id-649024.hampstead.irccloud.com
Just type it

1760529843
lemons!~doggie@user/doggie-:49517
oh alright

1760568116
lemons!~doggie@user/doggie-:49517
whats the function that gives me the string up until sentinel? ive been given a wrongly-sized buffer len and need to reallocate up until null term

1760568129
lemons!~doggie@user/doggie-:49517
er, up until as in a sentinel-terminated slice

1760568755
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, are you still planning on rewriting io_uring library? 

