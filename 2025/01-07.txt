1736222694
dmj`!sid72307@id-72307.hampstead.irccloud.com
andrewrk: what are your thoughts on Haskell

1736228030
mountaingoat!~mountaing@user/mountaingoat
anybody have some tips on how to pass std.math.Complex(f32) to a C ABI expecting float complex? actually i'm struggling to define the function type in Zig for starters

1736229351
rudynotfound!~rudynotfo@user/rudynotfound
If you want to pass a std.math.Complex(f32) from Zig to a C function that expects a complex number, you'll need to do a bit of setup.

1736229351
rudynotfound!~rudynotfo@user/rudynotfound
First, you should define a simple struct in Zig that matches what C expects for complex numbers. This struct will have two fields: one for the real part and one for the imaginary part, both as f32.

1736229352
rudynotfound!~rudynotfo@user/rudynotfound
Next, you’ll declare your C function in Zig, specifying that it takes this new struct as an argument.

1736229352
rudynotfound!~rudynotfo@user/rudynotfound
To convert a std.math.Complex(f32) to your C-compatible struct, you’ll write a small function that extracts the real and imaginary parts from the Zig complex number and puts them into your struct.

1736229353
rudynotfound!~rudynotfo@user/rudynotfound
When you’re ready to call the C function, just use your conversion function to turn your Zig complex number into the right format and pass it along.

1736229353
rudynotfound!~rudynotfo@user/rudynotfound
This way, you can smoothly hand off complex numbers between Zig and C without any issues!

1736229366
rudynotfound!~rudynotfo@user/rudynotfound
enjoy :3

1736229373
rudynotfound!~rudynotfo@user/rudynotfound
mountaingoat

1736231911
torque!~tachyon@user/torque
feels like llm voice in here, for some reason

1736235924
dmj`!sid72307@id-72307.hampstead.irccloud.com
torque: yea, he was def some chat gpt bs 

1736256229
rudynotfound!~rudynotfo@user/rudynotfound
andrewrk can i talk to you in PM/DM?

1736256235
rudynotfound!~rudynotfo@user/rudynotfound
if you are ok with that

1736259291
ifreund!2940d10f8b@user/ifreund
yeah, LLM bs is not welcome here

1736259304
ifreund!2940d10f8b@user/ifreund
its also completely inaccurate of course

1736259418
ifreund!2940d10f8b@user/ifreund
mountaingoat: see https://github.com/ziglang/zig/issues/8465

1736261986
ifreund!2940d10f8b@user/ifreund
rudynotfound: to be clear, LLM spam as you shared ~8 hours ago is not welcome in this channel

1736262134
rudynotfound!~rudynotfo@user/rudynotfound
no actually it had an error like could not send in this nick/channel and i thought message was not sent , im using IRC after a very long time and i never knew it actually sent it when i registered my account the error was gone , it was not an LLM spam but it was me and my 2 braincells actually figuring out what went wrong

1736262162
rudynotfound!~rudynotfo@user/rudynotfound
ifreund

1736262174
rudynotfound!~rudynotfo@user/rudynotfound
'=D

1736262367
Earnestly!~earnest@user/earnestly
rudynotfound: You'll probably because to tell the llm not to capitalise and punctuate its responses perfectly in order to match the normal way you type

1736262376
Earnestly!~earnest@user/earnestly
probably because? probably need*

1736262461
rudynotfound!~rudynotfo@user/rudynotfound
when did i use LLM?

1736262505
Earnestly!~earnest@user/earnestly
Oh not saying you did, just that if you do, make sure to make it match your normal typing style

1736262520
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
about 8 hous ago, you connected, posted few very suspicious messages and left immediately

1736262568
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
suspicious := typical LLM tone, spelling, and innacuracy

1736262726
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
and just in case anyone missed Earnestly 's sarcasm, no please don't post LLM

1736262957
rudynotfound!~rudynotfo@user/rudynotfound
netvor hmm actually somebody sent a problem , i may be wrong with some stuff but thats just my own learning and notes, my tone online is like LLM too lol

1736263074
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
maybe you should sue OpenAI for stealing your likeness then :D

1736263077
rudynotfound!~rudynotfo@user/rudynotfound
its not just online but in real life

1736263084
rudynotfound!~rudynotfo@user/rudynotfound
no im serious

1736263094
rudynotfound!~rudynotfo@user/rudynotfound
im not making any excuses

1736263130
rudynotfound!~rudynotfo@user/rudynotfound
its also not always OpenAI

1736263132
rudynotfound!~rudynotfo@user/rudynotfound
:)

1736263156
Gliptic!~glip@2a01:4f8:c012:91f3::1
but your tone and typography is completely different now

1736263196
rudynotfound!~rudynotfo@user/rudynotfound
yes it is when im sending big messages and my own notes

1736263282
rudynotfound!~rudynotfo@user/rudynotfound
LLMs are made to be pretty straight forward with their explainations too , One of my friend works at OpenAI and he told that when training models , they input straight forward grammar, nothing special

1736263398
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
sorry, no offense, but i get the vibe that you're a 11 year old trying to BS a group of adults (after trying to impress someone with "your notes" using LLM) :D

1736263448
Gliptic!~glip@2a01:4f8:c012:91f3::1
it seems suspicious to suddenly acquire good spelling, grammar and typography only when you write your notes

1736263479
Gliptic!~glip@2a01:4f8:c012:91f3::1
and who writes down an answer in a text file and pastes it into IRC

1736263482
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
also having notes that seem tailored to the question posted earlier

1736263506
rudynotfound!~rudynotfo@user/rudynotfound
I learnt zig from many youtube videos and used LLM to make them straight forward for everyone to understand

1736263515
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
question posted like 30s *before* connecting

1736263554
Gliptic!~glip@2a01:4f8:c012:91f3::1
netvor, no, they were connected, only identified after

1736263610
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
ok, my bad then (weechat tells me they "joined", after the q was posted)

1736263628
Gliptic!~glip@2a01:4f8:c012:91f3::1
weird, my weechat says identified

1736263635
Gliptic!~glip@2a01:4f8:c012:91f3::1
and changed host

1736263653
ifreund!2940d10f8b@user/ifreund
this is enough energy spent on this

1736263671
ifreund!2940d10f8b@user/ifreund
rudynotfound: do not use LLMs to send messages in this channel in the future

1736263688
ifreund!2940d10f8b@user/ifreund
I'm not interested in arguing with you over whether or not you have in the past

1736263699
rudynotfound!~rudynotfo@user/rudynotfound
Sorry falling to the floor by a fit of laughter after you said that a 11 year old uses IRC and knows the zig language

1736263706
rudynotfound!~rudynotfo@user/rudynotfound
copy that

1736263724
rudynotfound!~rudynotfo@user/rudynotfound
i will rewrite my notes

1736263776
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
nevermind, let's put this to rest.  `topic_iter.next();`

1736263818
rudynotfound!~rudynotfo@user/rudynotfound
*flips the pancake of topic , its cooking*

1736263836
rudynotfound!~rudynotfo@user/rudynotfound
im also not an 11 year old , im a 13 year old

1736263864
rudynotfound!~rudynotfo@user/rudynotfound
but i did not use IRC since like 2023 or something

1736263918
ifreund!2940d10f8b@user/ifreund
actually, I don't see any indication that rudynotfound's presence here will be a net positive for the zig community

1736264373
Gliptic!~glip@2a01:4f8:c012:91f3::1
my friend works at OpenAI is the new my dad works for steam

1736264466
Earnestly!~earnest@user/earnestly
ifreund: A difficult question, but what might be the most significant benefit you gained from tigerbeetle that was transferable to river?

1736264483
Earnestly!~earnest@user/earnestly
A technique, method, etc.

1736264657
ifreund!2940d10f8b@user/ifreund
Earnestly: working on tigerbeetle made me appreciate assertions much more

1736264672
ifreund!2940d10f8b@user/ifreund
which has directly made river more robust

1736264742
Earnestly!~earnest@user/earnestly
Do you use any post-assertations?

1736264743
ifreund!2940d10f8b@user/ifreund
assertions are one of the best tools we have for finding out where our mental model does not match the reality of the codebase

1736264761
ifreund!2940d10f8b@user/ifreund
and whene our mental model does not match reality, we have bugs

1736264851
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
but you need to have a good mental model first, in order to be able to make meaningful assertions, right?

1736264868
Earnestly!~earnest@user/earnestly
It's part of Hoare's triple, contracts. You have a pre-condition, which typically are assertions about the input state, then your command, and then assertations about the output state. I've never seen assertions placed at the end of a function before

1736264871
ifreund!2940d10f8b@user/ifreund
Earnestly: river's not quite as assertion heavy as tigerbeetle yet, I'm not sure if I have post assertions

1736264886
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
i mean i tried to learn this from tiger style but i always struggle to come up with good assertions

1736264888
ifreund!2940d10f8b@user/ifreund
netvor: you need a good mental model in order to write code I'd say :P

1736264890
Earnestly!~earnest@user/earnestly
assert(some state); command; assert(some state)

1736264914
Earnestly!~earnest@user/earnestly
It's a bit cumbersome maybe (ada provides pre/post assertions as part of the type signature)

1736264966
ifreund!2940d10f8b@user/ifreund
I think I've mostly used post assertions after loops in river

1736264987
Earnestly!~earnest@user/earnestly
https://0x0.st/oHlS.txt

1736264993
Earnestly!~earnest@user/earnestly
Nice

1736265001
ifreund!2940d10f8b@user/ifreund
in Zig it can also be convienient to write `defer assert(foo)` at the tops of functions

1736265009
Earnestly!~earnest@user/earnestly
A bit like https://0x0.st/8iDG.txt

1736265023
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
maybe it's like TDD but fo my brain... i can't figure out assertions => i'm just not ready for this :D

1736265026
Earnestly!~earnest@user/earnestly
I was just about to ask if you could combine asserts with defer, that would make it much easier

1736265055
Earnestly!~earnest@user/earnestly
netvor: You don't have to over think it, e.g. you can assert that an input integer is within some bound

1736265065
ifreund!2940d10f8b@user/ifreund
netvor: I'd recommend asking yourself the following question: "What do I know to be true at this moment in the code that the compiler does not check for me?"

1736265084
Earnestly!~earnest@user/earnestly
Or that it is exists. I tend to find most bugs with inputs come in the form of three things: 1) MAX, 2) MIN, 3) Empty

1736265084
ifreund!2940d10f8b@user/ifreund
any answers you come up with can be written as assertions

1736265106
Earnestly!~earnest@user/earnestly
So if you can account for the max, min, and empty condition for inputs, it usually works (maybe not logic)

1736265151
Earnestly!~earnest@user/earnestly
https://en.wikipedia.org/wiki/Hoare_logic fwiw

1736265272
Earnestly!~earnest@user/earnestly
ifreund: I kind of like erlang's let it crash approach, it makes a lot of sense esp. toctou races. However I also know that most failures in software were from un/recoverable errors so I wonder how reasonable it would be to almost replace error checking with assertions, esp. when then the assertions are checking state rather than "conditional paths"

1736265306
Earnestly!~earnest@user/earnestly
Iow, if statements for multiple valid branches, assertions for "file not found"

1736265313
ifreund!2940d10f8b@user/ifreund
Earnestly: error handling and assertions are fundamentally different concepts

1736265328
ifreund!2940d10f8b@user/ifreund
assertions catch programming mistakes, not runtime errors

1736265328
Earnestly!~earnest@user/earnestly
Kind of, I mean replacing if(!thing) error with assert(thing)

1736265333
netvor!~netvor@2a00:ca8:a1f:cd0:e2a3:2886:3821:1fc2
nice... btw this week i tried to implement a task pool for my server by wrapping std.Thread.Pool and kinda got stuck.... turns out i don't *really* know what i'm doing.   but i think i'm getting there, slowly... :D

1736265343
ifreund!2940d10f8b@user/ifreund
and there is no way to safely handle a programming mistake other than crashing

1736265358
Earnestly!~earnest@user/earnestly
This is what I think too, and how Curiosity was designed

1736265367
ifreund!2940d10f8b@user/ifreund
crashing can also be the right way to handle some error that are not programming mistakes

1736265393
Earnestly!~earnest@user/earnestly
(Curiosity was power cycled 7 times a day anyway, just in case)

1736265413
ifreund!2940d10f8b@user/ifreund
tigerbeetle for example panics on some read(2)/write(2) errors and relies on the consensus protocol to recover when it is restarted

1736265430
Earnestly!~earnest@user/earnestly
I think this is the way

1736265440
ifreund!2940d10f8b@user/ifreund
this is not the same thing as an assertion though, and confusing them is a common misconception

1736265450
Earnestly!~earnest@user/earnestly
Well

1736265481
Earnestly!~earnest@user/earnestly
They share aspects, in the notion of a hoare triple, the idea being to crash if the input and output states don't match expectation

1736265510
Earnestly!~earnest@user/earnestly
Rather than using an if statement to check the state only to crash on the alt branch

1736265556
Earnestly!~earnest@user/earnestly
E.g. if(thing) {success} else {crash} vs. assert(thing); success. Otoh, the assert approach is less structured in the "Structured Programming" sense, so I'm torn.

1736265563
ifreund!2940d10f8b@user/ifreund
the difference is that if there are no bugs in your code, all assertions can be removed without affecting the behavior of the program

1736265575
Earnestly!~earnest@user/earnestly
Yeah that is a good point actually

1736265588
Earnestly!~earnest@user/earnestly
You just reminded me of C's NDEBUG macro

1736265613
ifreund!2940d10f8b@user/ifreund
C's assert is terribly footgunny

1736265632
ifreund!2940d10f8b@user/ifreund
at least the normal implementation is

1736265647
ifreund!2940d10f8b@user/ifreund
it can be done correctly like zig's assert using __builtin_unreachable();

1736265652
Earnestly!~earnest@user/earnestly
Yeah, I've typically seen people use their own (mostly to avoid NDEBUG though)

1736265677
Earnestly!~earnest@user/earnestly
Or iirc SDL's case to compile it away to nothing if disabled

1736265716
Earnestly!~earnest@user/earnestly
Hm, thanks though, esp. defer assert()

1736287726
hadronized!~hadronize@2001:41d0:a:fe76::1
is there some documentation explaining how Zig can cast a packed struct into a uN with N whatever?

1736287737
hadronized!~hadronize@2001:41d0:a:fe76::1
like u8, with five / six fields

1736287753
hadronized!~hadronize@2001:41d0:a:fe76::1
is it like, first field is first bit, second bit is second bit, etc., in a big-endian way?

1736287949
hadronized!~hadronize@2001:41d0:a:fe76::1
ah, the doc of packed struct mentions it, nevermind

1736290046
quinq!~user@user/quinq
Hello :)

1736290076
hadronized!~hadronize@2001:41d0:a:fe76::1
hello there

1736290091
quinq!~user@user/quinq
I have zero notion of zig, but I have a software sources that I would like to build statically

1736290102
quinq!~user@user/quinq
Is it something that can be done?

1736290124
quinq!~user@user/quinq
Is there some documentation where I could see how to do that?

1736290258
hadronized!~hadronize@2001:41d0:a:fe76::1
what are the sources written in? do you have anything software programming knowledge?

1736290293
hadronized!~hadronize@2001:41d0:a:fe76::1
any* sorry

1736290316
quinq!~user@user/quinq
Yeah sorry, that's missing a bit of context

1736290325
quinq!~user@user/quinq
It's written in Zig (that's ncdu, git://g.blicky.net/ncdu.git/)

1736290334
quinq!~user@user/quinq
And I know C

1736290393
hadronized!~hadronize@2001:41d0:a:fe76::1
if you have zig installed, usually, just cd into the cloned repository and just run zig build

1736290401
hadronized!~hadronize@2001:41d0:a:fe76::1
the binary should be output into zig-output/…

1736290452
quinq!~user@user/quinq
Sure, I have an executable :)

1736290464
quinq!~user@user/quinq
But it's dinamically linked

1736290469
quinq!~user@user/quinq
*dynamically

1736290483
quinq!~user@user/quinq
I'm trying to generate a static one

1736290538
quinq!~user@user/quinq
Well, not trying to much yet, first I wanted to know if that's possible with Zig, and if that's documented somewhere

1736292780
quinq!~user@user/quinq
I could find this .linkage member in the addExecutable structure, and could set it to ".static"

1736292803
quinq!~user@user/quinq
Still not entirely there though, now it complains that “using shared libraries requires dynamic linking” (obviously)

