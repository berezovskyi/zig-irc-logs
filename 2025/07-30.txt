1753835024
triallax!~triallax@lacerte/triallax
andrewrk: i use helix whose editing model is very similar to kakoune's, and yeah having come from neovim before that i can say it's pretty intertsing

1753835029
triallax!~triallax@lacerte/triallax
interesting

1753835033
triallax!~triallax@lacerte/triallax
can't type

1753835053
triallax!~triallax@lacerte/triallax
possibly looking to switch editors though but not sure what to yet

1753835655
triallax!~triallax@lacerte/triallax
(yes this is an invitation to hear some suggestions :D)

1753835661
triallax!~triallax@lacerte/triallax
(but no vscode pls)

1753838510
rvrb!~rvrb@156.146.51.228
very happy with Zed, personally. extremely responsive. Zig + Zed + Ghostty on Linux is my favorite development environment I've ever had

1753838565
rvrb!~rvrb@156.146.51.228
and I hear the vim mode is pretty good if that's your thing

1753838890
mortmann!~mortmann@p5dcb2e33.dip0.t-ipconnect.de
last time i checked fonts were too blurry with zed. i am still in love with bitmap fonts like terminus. i dont know why i am so fixated on fonts when i think about development environment. limits my options here. or i should try harder and get used to it?

1753838941
rvrb!~rvrb@156.146.51.228
which distro? I think they fixed it, or I found a fix, but I remember it being total ass when I first installed it on Linux. it definitely favortes high DPI displays. I am using it right now on a 1440p monitor on Linux and it's fine

1753838964
rvrb!~rvrb@156.146.51.228
I am pretty particular about text, too; though I am currently shopping for a 30" 4k to replace this one

1753839084
rvrb!~rvrb@156.146.51.228
I took screenshots to show you default vs my config; how do people share screenshots these days?

1753839330
triallax!~triallax@lacerte/triallax
maybe i'll give zed a try, but it integrates llms which i'm not really a fan of

1753839349
rvrb!~rvrb@156.146.51.228
triallax: you can completely turn that off now https://zed.dev/blog/disable-ai-features

1753839374
triallax!~triallax@lacerte/triallax
i saw that, but i dislike that it's there at all

1753839378
rvrb!~rvrb@156.146.51.228
fair

1753839422
triallax!~triallax@lacerte/triallax
i'm installing it now but it's not packaged for my distro so as a flatpak, hopefully that doesn't make system integration worse (unlikely but i'll see)

1753839436
rvrb!~rvrb@156.146.51.228
I am pretty sure I use it as a flatpak

1753839449
triallax!~triallax@lacerte/triallax
can it use system toolchains just fine?

1753839455
mortmann!~mortmann@p5dcb2e33.dip0.t-ipconnect.de
arch of course ;) 1440p here too. was a bad decision (learning opportunity :P) because its hard to avoid scaling factor that is not integer. i test zed from time to time. fonts got much better recently. looks promising. then again, i can perfectly stay with vim to the end of my life. still intersted in trying out new kids on the block. i mean, what zig does to C... could a new editor do to vim.

1753839476
rvrb!~rvrb@156.146.51.228
hm, curious, I guess I don't

1753839499
triallax!~triallax@lacerte/triallax
that's typically the problem i have with any flatpak dev tools

1753839510
triallax!~triallax@lacerte/triallax
wonderful

1753839512
triallax!~triallax@lacerte/triallax
it segfaults

1753839529
rvrb!~rvrb@156.146.51.228
lol

1753839567
rvrb!~rvrb@156.146.51.228
I'm on Fedora Silverblue and I definitely didn't install an RPM so I have no idea how I have this installed right now

1753839573
triallax!~triallax@lacerte/triallax
somewhat funny since it's in rust :D

1753839599
mortmann!~mortmann@p5dcb2e33.dip0.t-ipconnect.de
rvrb: sharing via imgur ?

1753839634
triallax!~triallax@lacerte/triallax
ok preview version works

1753839639
rvrb!~rvrb@156.146.51.228
commented out is without JetBrains Mono, uncommented is with JetBrains Mono settings https://imgur.com/a/Qmnx0Kc

1753839704
rvrb!~rvrb@156.146.51.228
it's not incredible but I'm fine with it

1753839785
rvrb!~rvrb@156.146.51.228
oh, sorry for light mode, I know I am in the minority there

1753840066
triallax!~triallax@lacerte/triallax
i've also had my eyes on kate

1753840076
triallax!~triallax@lacerte/triallax
i liked it quite a bit when i gave it a try

1753840123
triallax!~triallax@lacerte/triallax
plus it's packaged for my distro so no sandboxing pains

1753841064
triallax!~triallax@lacerte/triallax
omg

1753841087
triallax!~triallax@lacerte/triallax
https://0x0.st/s/_aJZIVBWOCDJiTBEzNaJYg/8R4j.png

1753841091
triallax!~triallax@lacerte/triallax
this is really cool

1753841101
triallax!~triallax@lacerte/triallax
font isn't great but i can fix that

1753841313
smlavine!~smlavine@sourcehut/user/smlavine
Hello -- what is the state of the art right now for building cross-OS and accessible GUI programs?

1753841636
andrewrk!~andrewrk@mail.ziglang.org
smlavine: I haven't checked in on the answer to that question in a while so I'm curious too. Last I checked ~10 years ago it was Qt, GTK, or web tech

1753841645
squeek502!~squeek502@user/squeek502
smlavine, written in zig i'm only aware of https://github.com/capy-ui/capy

1753841671
clevor!sid649024@id-649024.hampstead.irccloud.com
There's DVUI too.

1753841741
andrewrk!~andrewrk@mail.ziglang.org
it's rather annoying that you can't have "native" widgets without infecting your program's address space with C++

1753851906
cnx!~cnx@tem.loang.net
is there a way to iterate over function declarations in a container?

1753854305
rvrb!~rvrb@156.146.51.228
@typeInfo(MyType).@"struct".decls to get the decls on a struct, see https://ziglang.org/documentation/master/std/#std.builtin.Type.Struct

1753854489
rvrb!~rvrb@156.146.51.228
Declaration just has name - from there I think you have to @typeInfo(@TypeOf(@field(MyType, decl.name))) to get the Type of the decl, and then skip any that are not == .@"fn"

1753854523
rvrb!~rvrb@156.146.51.228
I don't know if there's a shorter way to do it; check https://ziglang.org/documentation/master/std/#std.meta

1753856685
cnx!~cnx@tem.loang.net
thanks, turns out i was supplying the variable instead of its type to @field

1753859772
LAC-Tech!~lewis@granite-phrase.bnr.la
what's the ziggy thing to do when you're writing tests but also have a bunch of code you want to use inside your tests. test_utils.zig? just shove a bunch of constants and functions only used in your tests in your source files?

1753860135
andrewrk!~andrewrk@mail.ziglang.org
foo.zig, foo/test.zig

1753860158
andrewrk!~andrewrk@mail.ziglang.org
"utils" is never ziggy

1753862832
Affliction!affliction@idlerpg/player/affliction
ACTION nudges data_value_context_manager_misc_utils.zig further under the desk

1753870064
afiw!~afiw@user/afiw
hello! i have a quick question about build.zig: what's the difference between .link_libc = true in b.createModule, and exe.linkLibc() after doing b.addExecutable()? is one preferable to the other?

1753870310
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
afiw: the function does the same, i.e. sets root_module.link_libc = true

1753870357
afiw!~afiw@user/afiw
tranzystorekk: thanks!

1753885288
zuki!~zuki@user/zuki
is there a way of not having to deal with the unused var error its quite destracting when just trying to experiment with zig.

1753885388
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
zuki: `_ = your_unused_var;`

1753885399
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
But other than that, no

1753885453
zuki!~zuki@user/zuki
ah that sucks.

1753885478
neurocyte!~neurocyte@user/neurocyte
zuki: most editors can quick fix them for you by automatically adding the discard (and removing it again later)

1753885519
neurocyte!~neurocyte@user/neurocyte
you'll need your editor setup to use zls for that

1753885542
zuki!~zuki@user/zuki
neurocyte I saw people doing that when I looked it up why does zig have this feature if people just use zls to remove it because it sucks?

1753885748
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
Because when you're not just experimenting it is basically always a bug

1753886017
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah it’s actually a good feature

1753886058
hadronized!~hadronize@2001:41d0:a:fe76::1
I wish there was a way to actually force a return value to be explicitly passed to a specific function (I had a proposal about that a long time ago, similar to linear resources, but much simpler), so that we could compiler-guided resource management

1753886115
hadronized!~hadronize@2001:41d0:a:fe76::1
not using the return of a function often lies a bug, and just to reflect on what you said, prototypes written quickly often end up as-is in production, causing various kinds of mayhems 

1753886233
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
zig could add something to disable the unused var errors en masse, but it would defeat the idea at the core i guess

1753886271
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
 I think it'd be nice if some things, like unused var errors, weren't errors in Debug builds, but I haven't thought about the implications of that literally whatsoever

1753886278
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
so I just discard and move on with my day

1753886330
neurocyte!~neurocyte@user/neurocyte
at a software engineering company the only step between proof-of-concept and minimum-viable-product is a management decision

1753886346
neurocyte!~neurocyte@user/neurocyte
there is no come-back-later-and-do-it-properly step

1753886360
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
I'm scrolling through Andrew's mastodon cause I remember a post that jabs at people who dont like the unused var error in a very direct, funny language

1753886379
hadronized!~hadronize@2001:41d0:a:fe76::1
ah I agree, those should be warnings

1753886447
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
found it https://mastodon.social/@andrewrk/112362751644363647

1753886451
hadronized!~hadronize@2001:41d0:a:fe76::1
neurocyte: haha, that is so true

1753886484
hadronized!~hadronize@2001:41d0:a:fe76::1
> I hate reading your code

1753886489
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
lmao at the reply from mvu

1753886492
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
Where I work we've turned on unused-var errors for C/++ (and possibly other languages my team doesn't work on) since a while ago.

1753886496
hadronized!~hadronize@2001:41d0:a:fe76::1
I somehow relate to that a bit…

1753886510
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
And yeah you 100% cannot trust management not to look at a quickly slapped-together prototype and go "push to prod lol"

1753886529
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
ToxicFrog: same mostly I think

1753886569
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
but also if I do `fd Makefile | wc -l` the answer is 1807, so I have no clue what's what lmao

1753886829
rvrb!~rvrb@156.146.51.228
neurocyte: damn, I have never thought about it that way, but that is the best way to put it

1753887022
hadronized!~hadronize@2001:41d0:a:fe76::1
does anyone whether there is on-going effort to fix UAF, especially not related to allocators, like putting something on a function stack frame and returning its address? I reckon having a runtime mechanism that actually tracks stack frame / scopes, and tag pointers / addresses with them to know whether they are still around at use would be able to panic if not, but the last time I tried, Zig was not

1753887024
hadronized!~hadronize@2001:41d0:a:fe76::1
able to detect that

1753887218
zuki!~zuki@user/zuki
I don't really like the idea of a lang being build around forcing the lowest common denominator to write better code rather then make the experience of writing good code nicer and easier.

1753887241
hadronized!~hadronize@2001:41d0:a:fe76::1
errors happen

1753887294
ToxicFrog!~ToxicFrog@173-206-142-16.cpe.distributel.net
Why not both?

1753887376
zuki!~zuki@user/zuki
getting errors preventing compilation because I tried to test something while not fully complete, drives me nuts, its destracts me from actually focusing on getting stuff implemented.

1753887399
rvrb!~rvrb@156.146.51.228
zuki: the people who live with this language every day have found the way things are done quite satisfactory. you've already done well trying to understand the decision first. spend some more time with Zig while keeping an open mind, and you may come to appreciate that design. in the end it's ok if the language is not for you

1753887467
zuki!~zuki@user/zuki
rvrb you know that's completely fair.

1753887500
rvrb!~rvrb@156.146.51.228
when prototyping I use zls with source.fixAll = true, which manages it for me. I think I saw the idea to tweak the behavior slightly such that in Debug builds, the build fails but the binary is still produced, and then runtime panics when encountering the unused variable

1753887519
rvrb!~rvrb@156.146.51.228
I kind of like that idea since it lets you sit with a watch/rebuild loop and stub functions out before they are used

1753887654
zuki!~zuki@user/zuki
Oh I mean if you still use zls to fix it for you then it really seems like it should be able to be excluded from at least the debug builds.

1753887655
zuki!~zuki@user/zuki
A language server being used to workaround language features seems like a case of just bad design.

1753887764
rvrb!~rvrb@156.146.51.228
is failing with an unclosed bracket bad design despite your IDE autoclosing it when you insert an open bracket?

1753887790
grayhatter!~grayhatte@user/grayhatter
so... sorry, I know I'm really late to answer, but.... LAC-Tech> what's the benefit in writing "const Self = @This();"? < but basically nothing. It's the style that I see most people seem to use so it's just convention at this point.

1753887926
rvrb!~rvrb@156.146.51.228
anecdotally, believe me, I hated it at first, too. over time, it changes the way you approach building in a way that I think makes you a stronger developer. you build algorithms up from functioning pieces instead of imaginary ones

1753887962
grayhatter!~grayhatte@user/grayhatter
I can not stand zls's desired to "fix" all... unused variables are an error for a reason, you can use _ = something_usued; when writing but having your lsp magically introduce bugs for you is so odd

1753887999
hadronized!~hadronize@2001:41d0:a:fe76::1
how does it work, btw? is there a list of things it can fix somewhere? I never actualyl used that

1753888053
ifreund!2940d10f8b@user/ifreund
zuki: I don't use any language server with zig fwiw and still love the unused variable errors

1753888071
ifreund!2940d10f8b@user/ifreund
they have stopped me from writing many bugs over the many years I've been writing zig

1753888078
grayhatter!~grayhatte@user/grayhatter
^ same

1753888092
ifreund!2940d10f8b@user/ifreund
I find them just as helpful when prototyping as when writing "finished" code

1753888108
grayhatter!~grayhatte@user/grayhatter
well, I'm not sure stopped me from writing them, but it's 100% stopped me from forgetting about them before committing 

1753888111
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: how do you do stuff like listing references? ctags?

1753888112
ifreund!2940d10f8b@user/ifreund
if anything, I am more likely to write the kind of bug they catch while prototyping as am I thinking less

1753888117
hadronized!~hadronize@2001:41d0:a:fe76::1
or documentation

1753888120
zuki!~zuki@user/zuki
rvrb

1753888121
zuki!~zuki@user/zuki
> replying to

1753888121
ifreund!2940d10f8b@user/ifreund
hadronized: grep

1753888121
zuki!~zuki@user/zuki
> is failing with an unclosed bracket bad design despite your IDE autoclosing it when you insert an open bracket?

1753888122
zuki!~zuki@user/zuki
I don't use a IDE, and thats note really comparable, the compiler failing because you made a typo is fine but FORCING failure just because you shouldn't have something in release, and then having a lang server tell the compiler its fine with a comment is really silly.

1753888133
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: does it work well cross-projects?

1753888153
grayhatter!~grayhatte@user/grayhatter
zuki: which error is fixed by a comment?

1753888172
hadronized!~hadronize@2001:41d0:a:fe76::1
I tend to lean that way, btw, ifreund, since most LSPs I use (for instance at work) are terribly slow on our codebases

1753888173
ifreund!2940d10f8b@user/ifreund
hadronized: are you asking if one can grep across multiple directories at once?

1753888182
zuki!~zuki@user/zuki
the unused var one

1753888182
zuki!~zuki@user/zuki
_ = varname is effectively just a comment

1753888183
hadronized!~hadronize@2001:41d0:a:fe76::1
so I often just slap a :grep in Kakoune and finds stuff way quicker haha

1753888201
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: more like, how do you deal with stuff coming from the std, for instance?

1753888208
hadronized!~hadronize@2001:41d0:a:fe76::1
it’s not in your project directory, is it?

1753888225
rvrb!~rvrb@156.146.51.228
you have entered someone else's home and told them it is silly and has bad design. I'll repeat myself, keep an open mind, live in it a little, and try to imagine the people who built this programming language might know something you don't

1753888229
grayhatter!~grayhatte@user/grayhatter
zuki: I disagree that it's reasonable to call a variable assignment a comment

1753888252
ifreund!2940d10f8b@user/ifreund
I have a local checkout of the zig repo that I peruse with my editor when I need to understand something in the std or compiler

1753888256
grayhatter!~grayhatte@user/grayhatter
it used to bother me too, but then exactly like rvrb said... I got over it

1753888288
grayhatter!~grayhatte@user/grayhatter
I hated `for/while () |capture|` but then I got used to seeing `|thing|` it my code and stopped caring

1753888297
ifreund!2940d10f8b@user/ifreund
I don't think I've ever wanted to look for something across e.g. both river and the standard library at the same time

1753888298
rvrb!~rvrb@156.146.51.228
what you may appreciate is not necessarily that you have to add `_ = foo` when prototyping, but the absolute design conviction of the language to not support bad practices

1753888334
hadronized!~hadronize@2001:41d0:a:fe76::1
also, correct me if I’m wrong, but the syntax _ = stuff; is pretty unique to Zig, so it should be easy to grep through everything that is ignored like that and ensure it’s not a bug, right?

1753888367
hadronized!~hadronize@2001:41d0:a:fe76::1
ifreund: ah that makes sense

1753888373
zuki!~zuki@user/zuki
hadronized

1753888374
zuki!~zuki@user/zuki
I think that syntax is also in go

1753888382
hadronized!~hadronize@2001:41d0:a:fe76::1
the ignore syntax?

1753888385
zuki!~zuki@user/zuki
yea

1753888394
rvrb!~rvrb@156.146.51.228
and, objectively, an unused variable is an error; if there is a disagreement there, then we are at an impasse, and you need to spend some more time with software before I think you will understand.

1753888427
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, my point was that grepping for ^\w*_ = should show you everywhere you do that

1753888443
hadronized!~hadronize@2001:41d0:a:fe76::1
rvrb: I think it’s not really an error

1753888443
zuki!~zuki@user/zuki
rvrb

1753888444
zuki!~zuki@user/zuki
I just don't think there is much value to having it stop compilation rather then give a warning.

1753888461
rvrb!~rvrb@156.146.51.228
warnings get released

1753888466
hadronized!~hadronize@2001:41d0:a:fe76::1
when implementing an interface’s function, you might not need to use its arguments, so you will have to ignore them explicitly

1753888479
grayhatter!~grayhatte@user/grayhatter
rvrb: I don't agree that it's always an error. it's an error is zig; but it may not be an error in [other language]

1753888497
grayhatter!~grayhatte@user/grayhatter
zuki: it probably would be a warning; but there are no warnings allowed in zig

1753888506
rvrb!~rvrb@156.146.51.228
this is devolving, I've made my case, I don't really have much more to add

1753888516
grayhatter!~grayhatte@user/grayhatter
-Werror -Wall is required :D

1753888637
grayhatter!~grayhatte@user/grayhatter
zuki: I'll echo what rvrb and ifreund have already said one last time, because I also agree with it. But I'd very much encourage you to try what the 3 of us have said, and see if you can tollerate it long enough to decide if you actually like it more than it bothers you. All of us agree that it can feel annoying, but IMO it's well worth it for the bugs it prevents

1753888682
rvrb!~rvrb@156.146.51.228
actually, I do want to say on warnings. do you ever avoid doing laundry for longer than you should, and end up with a much bigger chore than you had originally? failing instead of warning is the kind of culture this language has of shaping you into a stronger developer by forcing you not to procrastinate. at first it hurts, then you start realizing

1753888682
rvrb!~rvrb@156.146.51.228
doing your laundry more frequently makes you move faster, then you wonder why you were ever doing it that way before

1753888696
grayhatter!~grayhatte@user/grayhatter
it doesn't feel like it has much value, until it helps fix and improve some code you've written... then it value makes up for it's annoyance

1753888714
grayhatter!~grayhatte@user/grayhatter
you've found the annoyance part, but haven't used it long enough to find the valuable part

1753888720
hadronized!~hadronize@2001:41d0:a:fe76::1
that reminds me I should do some laundry today :D

1753888728
rvrb!~rvrb@156.146.51.228
yes.. me too.

1753888784
zuki!~zuki@user/zuki
I just don't follow because I just deal with all my warnings, so its just the same as the unused var warning but 100% more anoying because it interputs me rather then adding to my todo list before I commit.

1753888835
grayhatter!~grayhatte@user/grayhatter
completely unrelated, does the new Io interface provide any promises about the buffer lifetime?

1753888890
hadronized!~hadronize@2001:41d0:a:fe76::1
zuki: is it really a blocker to have to just mark the unusused arguments as such with a _ = …; and then remove them once you started using them?

1753888892
grayhatter!~grayhatte@user/grayhatter
hypothetically, could I use the buffer provided by Io to place data that I still need to calculate a checksum on?

1753889087
rvrb!~rvrb@156.146.51.228
grayhatter: I think andrewrk (are there other core devs here?) would need to answer definitively, but I know I've seen talk about the buffer being useful for features like compression, and I feel like you could slice a piece of the buffer for calculating the checksum incrementally as it moves

1753889143
rvrb!~rvrb@156.146.51.228
I think I may have even read that as an explicit use-case somewhere

1753889172
rvrb!~rvrb@156.146.51.228
I just don't know about the lifetime

1753889386
grayhatter!~grayhatte@user/grayhatter
yeah, I'm reading writableSliceGreedy() and it does call vtable.drain and asserts internally so I'm wondering if I'm missing some assumption here

1753889703
grayhatter!~grayhatte@user/grayhatter
seems like it's already an expected use by using `writableSliceGreedyPreserve` instead

1753890162
bblack!~bblack@wikimedia/bblack-WMF
yeah the API is... expansive and interesting

1753890191
bblack!~bblack@wikimedia/bblack-WMF
it seems like it may take a little while for some of it to stabilize, there's so many potential use-cases and edge-cases to think of

1753890912
bblack!~bblack@wikimedia/bblack-WMF
const line = stdin.takeDelimiterExclusive('\n') is way nicer than fgets()

1753902313
meator!~meator@user/meator
Hey. I'm trying to use Zig as a powerful C/C++ cross compiler. I'm trying to compile for x86_64-macos. I'm facing issues with missing install_name_tool. Can Zig do anything about that, or will I have to look elsewhere?

1753903117
andrewrk!~andrewrk@mail.ziglang.org
meator: out of scope

1753903192
meator!~meator@user/meator
So I am expected to have tools like these already when cross compiling to macos from a non-macos host?

1753903326
meator!~meator@user/meator
CMake requires install_name_tool for building C/C++ code it seems.

1753903349
braewoods!~braewoods@user/braewoods
meator, cross-compilers are an advanced construct. most compilers compile for the same target as the host. unless it's officially supported or documented, you should assume that it's not supported.

1753903379
braewoods!~braewoods@user/braewoods
One of the few cross-compilers I've ever used was mingw based gcc / clang.

1753903400
andrewrk!~andrewrk@mail.ziglang.org
meator: you don't need install_name_tool when targeting non-macos. why are you trying to use it?

1753903417
meator!~meator@user/meator
I am targeting macos.

1753903457
braewoods!~braewoods@user/braewoods
meator, sounds like the build system doesn't support cross-compiling.

1753903462
andrewrk!~andrewrk@mail.ziglang.org
sorry, I read your comment above backwards

1753903462
meator!~meator@user/meator
s/CMake requires install_name_tool for building C/C++ code it seems./CMake requires install_name_tool for building C/C++ code it seems (for macos targets).

1753903488
andrewrk!~andrewrk@mail.ziglang.org
well, if the project was using zig build system instead of cmake, it would work fine

1753903496
andrewrk!~andrewrk@mail.ziglang.org
take it up with cmake, or don't use cmake

1753903502
braewoods!~braewoods@user/braewoods
... yea, it's trying to run a macos exclusive tool which obviously won't be available on a cross-compiling host.

1753903535
andrewrk!~andrewrk@mail.ziglang.org
generally, it's best to avoid system dependenices such as install_name_tool

1753903541
andrewrk!~andrewrk@mail.ziglang.org
what does that even do?

1753903560
braewoods!~braewoods@user/braewoods
cross-compiling tends to fall apart if it requires anything exclusive to the target, or needs to bootstrap itself.

1753903568
meator!~meator@user/meator
I'm not rewriting BoringSSL's build system.

1753903615
braewoods!~braewoods@user/braewoods
meator, it doesn't sound like cross compilation is even supported for this particular combination.

1753903666
meator!~meator@user/meator
It seems that CMake itself requires install_name_tool, it is not BoringSSL's fault: https://0x0.st/8R6J.txt

1753903674
meator!~meator@user/meator
This error was triggered by `enable_language(C)`

1753903695
andrewrk!~andrewrk@mail.ziglang.org
I suspect you have failed to tell CMake that you are cross compiling

1753903751
meator!~meator@user/meator
If CMake wanted to build for host, it wouldn't ask for install_name_tool.

1753903777
andrewrk!~andrewrk@mail.ziglang.org
did you pass -DCMAKE_CROSSCOMPILING=True 

1753903863
meator!~meator@user/meator
It's a bit more complicated. My primary build system is Meson. My project has BoringSSL as its dependency. I use Meson's CMake "translation layer" to be able to depend on BoringSSL. BoringSSL gets build alongside my project.

1753903892
meator!~meator@user/meator
Meson is informed that it's cross compiling. It should convey all important info to CMake when it invokes it to configure BoringSSL.

1753903983
andrewrk!~andrewrk@mail.ziglang.org
sounds complicated. idk what you expect from zig here

1753903992
rvrb!~rvrb@156.146.51.228
meator: rethink what you said. if CMake knew it wasn't building on macOS, it wouldn't ask for install_name_tool, which only exists on macos, and would not exist when cross compiling

1753905046
meator!~meator@user/meator
I learned about install_name_tool's existence when CMake complained that it can't find it.

1753905057
meator!~meator@user/meator
Here's a project capable of reproducing the issue: https://gist.github.com/meator/93fad97c9ec91302873eabe0ec60efa9

1753905103
meator!~meator@user/meator
cmake -DCMAKE_TOOLCHAIN_FILE=toolchain-macos.cmake -B build -S .

1753905195
meator!~meator@user/meator
With a toolchain file, CMake should be aware that it's cross compiling. -DCMAKE_CROSSCOMPILING=True does nothing.

1753905870
meator!~meator@user/meator
braewoods: The table for 'x86_64-macos' is all green and given that Zig is based on LLVM, I think that this cross configuration is supported. https://ziglang.org/download/0.14.0/release-notes.html#Support-Table

1753905872
blackbeard420!~blackbear@45.33.85.133
This is a cmake problem but don't you need 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)'? I remember something a long them lines when I sadly had to use cmake to cross compile to mac long ago

1753905932
andrewrk!~andrewrk@mail.ziglang.org
meator: if you want something to change you need to be able to express it in terms of how you want zig's behavior to change, without mentioning cmake or meson or some third party

1753905960
andrewrk!~andrewrk@mail.ziglang.org
"when zig is invoked with .... it currently does .... but I want it to instead .... "

1753906086
meator!~meator@user/meator
I was lead to believe that Zig bundles an advanced cross compilation system which does not require a sysroot for supported architectures (of which there are plenty of). I thought that I could compile for anything with only Zig installed (I know, this is a naïve assumption, but I wanted to try anyway).

1753906129
blackbeard420!~blackbear@45.33.85.133
your cmake toolchain file is the issue here

1753906149
lemons!~doggie@user/doggie-:49517
i assume not but just to make sure, is there any inbuilt for handling "var1=hi;car2=42;cat3=pettable" strings?

1753906159
clevor!sid649024@id-649024.hampstead.irccloud.com
Is August 1st still the target 0.15.0 release date?

1753906168
lemons!~doggie@user/doggie-:49517
well, std, not inbuilt

1753906168
meator!~meator@user/meator
blackbeard420: Adding `set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)` on top of toolchain-macos.cmake doesn't change the error.

1753906187
andrewrk!~andrewrk@mail.ziglang.org
lemons: std.mem.splitScalar

1753906199
andrewrk!~andrewrk@mail.ziglang.org
clevor: https://github.com/ziglang/zig/milestone/28

1753906221
clevor!sid649024@id-649024.hampstead.irccloud.com
👍

1753906225
lemons!~doggie@user/doggie-:49517
andrewrk: yeah that was my fallback, just wanted to make sure before handrolling

1753906226
blackbeard420!~blackbear@45.33.85.133
There's more to set then just that glancing at cmake docs, cmakes channel will likely be a lot more helpful 

1753906231
lemons!~doggie@user/doggie-:49517
cheers

1753906252
andrewrk!~andrewrk@mail.ziglang.org
lemons: what's handrolling about it? I feel like it's a pretty ideal API for this use case

1753906279
andrewrk!~andrewrk@mail.ziglang.org
oh is this supposed to be the URI standard?

1753906289
andrewrk!~andrewrk@mail.ziglang.org
std.Uri

1753906303
lemons!~doggie@user/doggie-:49517
application/x-www-form-urlencoded yeah

1753906338
lemons!~doggie@user/doggie-:49517
ah ill check that, thanks

1753906443
meator!~meator@user/meator
I wondered whether install_name_tool is/could be/should be a part of the extra cross tools provided by Zig (such as dlltool, lib, ranlib, objcopy, rc).

1753906464
andrewrk!~andrewrk@mail.ziglang.org
out of scope. it's stupid utility anyway, just tell the compiler/linker the correct library name up front

1753906472
meator!~meator@user/meator
Since it seems to be an elementary dependency for compiling C code for macos targets.

1753906476
andrewrk!~andrewrk@mail.ziglang.org
it's not

1753906582
meator!~meator@user/meator
CMake thinks it is. And CMake has been doing cross compilation before Zig even existed.

1753906595
meator!~meator@user/meator
But you're probably right, this is unrelated to Zig.

1753906601
meator!~meator@user/meator
Strange issue.

1753906764
andrewrk!~andrewrk@mail.ziglang.org
cmake sucks at cross compilation

1753906773
andrewrk!~andrewrk@mail.ziglang.org
case in point: your exact situation

1753906788
andrewrk!~andrewrk@mail.ziglang.org
you wouldn't be having this problem with the zig build system

1753906839
andrewrk!~andrewrk@mail.ziglang.org
why are you making a dynamic library anyway

1753906878
andrewrk!~andrewrk@mail.ziglang.org
the 90s called, they want their dynamic libraries back :P

1753906938
meator!~meator@user/meator
I am not! I'm only trying to compile a simple `int main() {}` (as shown in my paste). CMake wants it, I don't.

1753906941
lemons!~doggie@user/doggie-:49517
im doing a dynamic library ;-;

1753906986
andrewrk!~andrewrk@mail.ziglang.org
well, install_name_tool is for dynamic libraries

1753907009
andrewrk!~andrewrk@mail.ziglang.org
wait you're trying to compile a simple int main() {} with cmake and meson involved??

1753907033
meator!~meator@user/meator
My minimal reproducible example only includes CMake.

1753907056
andrewrk!~andrewrk@mail.ziglang.org
skip the middle man: `zig build-exe main.c -target aarch64-macos`

1753907164
meator!~meator@user/meator
And the real thing I'm trying to build also doesn't build dynamic libraries (but its build system is much more complicated, so I would understand if it for some reason wanted install_name_tool, but install_name_tool is requested by plain enable_language(C)).

1753907378
andrewrk!~andrewrk@mail.ziglang.org
if that were true then https://github.com/ziglang/zig-bootstrap/blob/master/build would not work, but it does work

1753908433
lemons!~doggie@user/doggie-:49517
hh how do you insert KV pairs into an anytype struct

1753908501
lemons!~doggie@user/doggie-:49517
or to avoid XY, ive decided to handroll that parsing after all (for raisins), and want to populate a provided template with the found keys/values

1753908637
lemons!~doggie@user/doggie-:49517
https://www.zigfiddle.dev/?ymRv2ANsGsU

1753908831
meator!~meator@user/meator
Thanks for your help! I now know where the issue lies (but not how to solve it yet).

1753909135
blackbeard420!~blackbear@45.33.85.133
meator dumb fix but it worked on my system with by just putting a empty file called install_name_tool lol. so cmake wants it for no reason

1753909158
blackbeard420!~blackbear@45.33.85.133
literally did sudo touch /usr/bin/install_name_tool

1753909661
meator!~meator@user/meator
blackbeard420: But what if it has a purpose or something? A build system shouldn't request binaries from host when it won't use them.

1753909718
meator!~meator@user/meator
But if it works... I did something similar to you and now I have a new problem: Zig doesn't seem to bundle appleframeworks. Is that the case?

1753909738
blackbeard420!~blackbear@45.33.85.133
Cmake is kinda shit, so it's not too surprising but cmake does expect you to have the Mac sdk which provides that. It's for dynamic libraries as far as I can tell

1753909755
blackbeard420!~blackbear@45.33.85.133
You need an apple dev account for that zig can't bundle it

1753909863
meator!~meator@user/meator
Ok, good to know.

1753910085
meator!~meator@user/meator
That complicates things a bit to be honest.

