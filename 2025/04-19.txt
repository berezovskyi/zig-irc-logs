1745020854
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
const std = @import("std");

1745020854
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
const expect = std.testing.expect;

1745020854
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
test "struct update with ellipsis in Zig 0.14" {

1745020854
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    const Point = struct {

1745020855
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
        x: i32,

1745020855
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
        y: i32,

1745020856
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    };

1745020857
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    const p1 = Point{.x = 1,.y = 2};

1745020857
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    

1745020858
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    const p2 = Point{

1745020858
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
       .x = 3,

1745020859
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
       ...p1,

1745020859
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    };

1745020860
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    try expect(p2.x == 3);

1745020861
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
    try expect(p2.y == 2);

1745020861
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
}

1745020885
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
vegetabledog, use https://zigbin.io/ next time.

1745020894
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
 Does zig support Struct Update Syntax?

1745020954
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
some ai code

1745021108
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
stealth_ i'm newbee for zig. 

1745021145
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
vegetabledog, well you don't past code into irc chat like that, you use https://zigbin.io/ to past code and share the link here.

1745021255
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
https://zigbin.io/26a309

1745021256
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
https://zigbin.io/26a309/run

1745021256
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
https://zigbin.io/26a309/raw

1745021265
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
like this？

1745021281
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
vegetabledog, https://codeberg.org/ziglings/exercises https://www.youtube.com/@dudethebuilder/videos

1745021335
torque!~tachyon@user/torque
that code is not valid, to remove your suspense

1745021479
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
So AI is wrong?

1745022084
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
AI is not good at zig

1745022243
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
well thanks

1745022465
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
to do what you are trying you would need to do like this:

1745022475
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
var p2 = p1;

1745022478
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
p2.x = 3;

1745022579
torque!~tachyon@user/torque
<rockorager> AI is not good

1745022581
torque!~tachyon@user/torque
fixed this for you

1745022666
grayhatter!~grayhatte@user/grayhatter
^ this

1745022715
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i don't get how you are suppose to learn to code if ai is coding for you!

1745022743
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Generally I don't use it for coding, but I do use it as a better search - it works well for that

1745022766
grayhatter!~grayhatte@user/grayhatter
I actually suspect AI will always be problematic when trying to generate zig code. Zig requires a level of attention to detail that other languages don't, so code that would work in one language, will introduce subtle bugs you won't be able to fix

1745022805
grayhatter!~grayhatte@user/grayhatter
I find myself unable to tolerate being lied to, so I don't think I'm a good user for AI search

1745022901
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
last time i use ai to see what zig code it was outputting it was all older syntax! thus more problems/confusing

1745022932
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
I'm just learning the Zig language

1745022968
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
Let AI assist me

1745023070
grayhatter!~grayhatte@user/grayhatter
vegetabledog: I'd suggest not letting AI teach you... "struct update with ellipsis in Zig 0.14" isn't a thing

1745023145
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
Okay, I have a deep feeling now

1745023183
grayhatter!~grayhatte@user/grayhatter
`...` isn't a valid... operator[?] in a struct{} block

1745023189
grayhatter!~grayhatte@user/grayhatter
I'm not even sure what it's trying to do

1745023215
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe it saying "add your code here ... " ? 

1745023241
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
Struct Update Syntax like rust.....

1745023306
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i ran into this video today thought it was well made: https://www.youtube.com/watch?v=TCcPqhRaJqc

1745023418
grayhatter!~grayhatte@user/grayhatter
vegetabledog: zig doesn't do automagic code generation like that

1745023424
grayhatter!~grayhatte@user/grayhatter
intentionally so

1745023482
grayhatter!~grayhatte@user/grayhatter
you have to be explicit about what you want

1745023504
grayhatter!~grayhatte@user/grayhatter
`.y = p1.y,` would work though

1745024091
vegetabledog!~vegetable@2409:8a00:7910:23a0:8d85:f1bf:b17a:b25e
ok thanks

1745025605
torque!~tachyon@user/torque
fwiw it's easy to write a function that works something like `const p2 = updateStruct(Point, p1, .{.x = 3})`

1745025614
torque!~tachyon@user/torque
and I have in fact done so before

1745025629
torque!~tachyon@user/torque
doesn't seem to warrant a language feature

1745026050
grayhatter!~grayhatte@user/grayhatter
I just define the struct

1745026101
grayhatter!~grayhatte@user/grayhatter
const p2: Point = .{ .x = 3 , .y = p1.y };

1745026113
grayhatter!~grayhatte@user/grayhatter
why make it more complicated than that?

1745026160
grayhatter!~grayhatte@user/grayhatter
inb4 > I have 1000 fields in my struct

1745026183
grayhatter!~grayhatte@user/grayhatter
1) you're holding it wrong, 2) `const p2 = p1; p2.x = 3;`

1745026223
grayhatter!~grayhatte@user/grayhatter
err, techinally you'd need s/const/var/

1745026576
torque!~tachyon@user/torque
yes the problem with 2 is that you need var instead of const

1745028660
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: Do you have a neurotypical brain?

1745030275
andrewrk!~andrewrk@mail.ziglang.org
¯\_(ツ)_/¯

1745036996
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
should line 11:13 be moved outside of function? https://zigbin.io/e65a3b

1745037241
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
or a way to cache it, maybe its comptime in zig! since those function always return the same value

1745037345
grayhatter!~grayhatte@user/grayhatter
does the python api allow that?

1745037402
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 14 is what creates the object `PyObject_CallObject` so cls, arg should be the same value, it seem pointless to call them every time the function is called

1745037427
grayhatter!~grayhatte@user/grayhatter
what does PyTuple_Pack() return?

1745037449
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
pyobject

1745037473
grayhatter!~grayhatte@user/grayhatter
does pyobject promise comptime semantics?

1745037528
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
probably not!?

1745037552
grayhatter!~grayhatte@user/grayhatter
what about PyLong_FromLong? 

1745037566
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
those all return pyobject

1745037573
grayhatter!~grayhatte@user/grayhatter
right

1745037582
grayhatter!~grayhatte@user/grayhatter
I knew that when I asked

1745037584
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but pyobject is the same, so should be able to reuse them over and over

1745037608
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if zig function calls it every time python might create a new pyobject very time. 

1745037609
grayhatter!~grayhatte@user/grayhatter
why do you think they're the same?

1745037631
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cause the return value is the same. 

1745037672
grayhatter!~grayhatte@user/grayhatter
so, you think python creates a new object every time, but the object is the same?

1745037694
grayhatter!~grayhatte@user/grayhatter
you see how those two statments directly contridict each other?

1745037781
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it creates a new object since zig function is calling the Py* function it doesn't need to call it every time, why i am asking if there is away to cache/reuse.

1745037817
grayhatter!~grayhatte@user/grayhatter
I'd be interested to know if it even compiles if you make both of thoes calls comptime const... I don't think it'll even compile

1745037857
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya don't think it does, i am asking since i am curious how zig deals with such cases. 

1745037947
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in JIT compiler it would cases those values.

1745037984
grayhatter!~grayhatte@user/grayhatter
stealth_: zig doesn't provide a comptime allocator, and all (most?) of those functions alloc... so zig doesn't handle those cases. It'd be up to you to implement it however you want. But given python wants to GC the tuple, etc, I don't think you could implement them at comptime even if you wanted to

1745037993
grayhatter!~grayhatte@user/grayhatter
you're using the python API, so your bound to it's rules

1745038038
grayhatter!~grayhatte@user/grayhatter
stealth_: you're using the python API, all the zig code will be called after the JIT python compiles

1745038045
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, these function do not get GC'ed since its C function not Python functions

1745038088
grayhatter!~grayhatte@user/grayhatter
PyTuple_Pack() { ...     _PyObject_GC_TRACK(result);     return (PyObject *)result; }

1745038099
grayhatter!~grayhatte@user/grayhatter
no... they're ref counted GC

1745038115
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm

1745038129
grayhatter!~grayhatte@user/grayhatter
why did you think they wouldn't be GC'd?

1745038205
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
can't believe they did that.

1745038238
grayhatter!~grayhatte@user/grayhatter
this is exactly how I'd expect it to work

1745038255
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
can you like me to the code you pasted

1745038261
grayhatter!~grayhatte@user/grayhatter
python is written in C, what code did you think did the garbage collection

1745038292
grayhatter!~grayhatte@user/grayhatter
no?

1745038326
grayhatter!~grayhatte@user/grayhatter
google search for `PyTuple_Pack` and click on the first github link it's named `cpython/Objects/tupleobject.c at main`

1745038350
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
found it

1745038410
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so all pyobject would be recounted, what a pain.

1745038418
grayhatter!~grayhatte@user/grayhatter
lol

1745038424
grayhatter!~grayhatte@user/grayhatter
welcome to how python works

1745038480
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i should get in habit of reading C source

1745038484
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thanks

1745038495
grayhatter!~grayhatte@user/grayhatter
<3

1745047008
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
Why do I get an `error: Network error 'StreamTooLong'` running this: https://zigbin.io/777357 ?

1745047502
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
I posted the wrong error, this is the one I get: `Unexpected status: http.Status(682)`

1745047626
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
phaebz, don't know anything about the code, just looking at it, why is line: 22, 23 there? doesn't .send() nothing close the connection?

1745047698
h4kor!~h4kor@user/h4kor
maybe the server is responding with a non-standard status code?

1745047951
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
stealth_: I used these two lines from the most recent code examples I could find online.

1745048004
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
But you pointed me to the right spot: If I put a .wait() between .send() and .finish(), the file gets downloaded alright.

1745048439
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
Thanks! One question remains: I am seeing this stacktrace in the program stdout https://0x0.st/8OpW.txt

1745048513
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
Might also be stderr; in either case the stack trace gets printed, but the program runs and produces output as expected.

1745048708
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that api is weird, rather then .send maybe it should have been .sendHeader maybe less confusing as to what it is sending.

1745048992
phaebz!bdffc84e6f@2a03:6000:1812:100::2f0
HTTP is weird ;) this API has also changed a few times in Zig during 0.12, 0.13 and 0.14, that is to be expected. It will get a rework eventually.

1745049082
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ah, its nice that zig gives you all the parser and such right out of the box like that, saves a lot of time. 

1745049513
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
the reason it might be closing the connection is because it might be using http/1.0 by default which adds "connection: close"

1745050171
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
not a very usefull compiler message, at least not for me: https://zigbin.io/b4a79c

1745050365
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm trying to learn to work with heap memory: https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L28

1745050394
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I guess here it fails somewhere: https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L118

1745051139
torque!~tachyon@user/torque
zig build -freference-trace might get you a more useful error message from the compiler

1745052078
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
thx, it goes wrong here:

1745052079
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L43

1745052094
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L90

1745052134
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://zigbin.io/b7a6df

1745052153
torque!~tachyon@user/torque
`allocator.free(b.deinit(allocator));` is definitely wrong

1745052156
torque!~tachyon@user/torque
do you know why

1745052221
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ouch looks bad

1745052288
Gliptic!~glip@2a01:4f8:c012:91f3::1
how does that even compile

1745052296
Gliptic!~glip@2a01:4f8:c012:91f3::1
or wait, I guess it doesn't

1745052301
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L43

1745052335
Gliptic!~glip@2a01:4f8:c012:91f3::1
why are you calling both free and destroy

1745052372
Gliptic!~glip@2a01:4f8:c012:91f3::1
oh, Button is allocated on the heap?

1745052396
Gliptic!~glip@2a01:4f8:c012:91f3::1
that seems unnecessary

1745052412
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ah, that sort of comments I'm waiting for

1745052425
Gliptic!~glip@2a01:4f8:c012:91f3::1
generally it's not recommended to have .deinit free the memory of self

1745052446
Gliptic!~glip@2a01:4f8:c012:91f3::1
Button should not assume it's itself allocated in a certain way

1745052455
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok, hm

1745052536
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
so you don't need to allocate memory for Button. But do you return a pointer to Button (how?)?

1745052601
Gliptic!~glip@2a01:4f8:c012:91f3::1
where?

1745052612
Gliptic!~glip@2a01:4f8:c012:91f3::1
Button.init can just return a Button

1745052630
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
init, ok

1745052641
Gliptic!~glip@2a01:4f8:c012:91f3::1
you can do allocator.dupe instead of Allocator.dupe(allocator, 

1745052834
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok

1745052885
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I've a array full of Buttons, I need to change values, so I need a pointer. Do I make a [size]*Button?

1745052909
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
or do you pass a pointer to that array in a for loop for example?

1745052915
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, [size]Button

1745052923
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L117

1745052960
Gliptic!~glip@2a01:4f8:c012:91f3::1
for (buttons) |*button|

1745053180
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
for (&buttons) |*button| ?

1745053316
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I think so

1745053322
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
it builds now: https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig

1745053499
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
we don't have to allocate for struct because we have a fixed array with those structs? 

1745053539
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
so the compiler knows up front how much memory that needs?

1745053845
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
When should this self be a pointer and when not? https://git.sr.ht/~flower/zsamples/tree/develop/item/src/main.zig#L36

1745055024
Gliptic!~glip@2a01:4f8:c012:91f3::1
you only need a pointer if you need to modify self, so deinit rarely needs it

1745055064
Gliptic!~glip@2a01:4f8:c012:91f3::1
and using *Button means you can't call deinit on a read only Button

1745055454
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I see

1745057861
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
comment contains invalid byte: '\t'

1745057863
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm

1745068633
bw!sid2730@user/betawaffle
how is zig expected to behave if a slice ends at the maximum address, e.g. slice.ptr +% slice.len == 0

1745070119
Gliptic!~glip@2a01:4f8:c012:91f3::1
bw, normally? if that's actually valid memory space

1745070156
bw!sid2730@user/betawaffle
yeah, i know typically it would be in kernel space, but suppose i'm writing a kernel

1745070174
bw!sid2730@user/betawaffle
or on an embedded platform where i need to use that space

1745070182
bw!sid2730@user/betawaffle
(or both)

1745070220
bw!sid2730@user/betawaffle
is it something I just shouldn't worry about?

1745070243
bw!sid2730@user/betawaffle
like what if i'm writing a library

1745070273
bw!sid2730@user/betawaffle
and the caller legitimately gives me a slice like that (because in their use-case it makes sense)

1745070315
bw!sid2730@user/betawaffle
from zen: "Edge cases matter."

1745071350
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm not sure exactly what you're worried about not working

1745075825
lemons!~doggie@user/doggie-:49517
can i chain asserts

1745075848
lemons!~doggie@user/doggie-:49517
more specifically, i have blackbox_var.callOne().callTwo() 

1745075896
lemons!~doggie@user/doggie-:49517
both of these call api functions and return a diff blackbox

1745075955
lemons!~doggie@user/doggie-:49517
and one thing i can deduce from it is that after such a function, a particular var on it will be set to some predetermined value

1745076009
lemons!~doggie@user/doggie-:49517
in simpler terms, if i have two contradicting asserts one after another will the compiler pick up on it

1745076027
lemons!~doggie@user/doggie-:49517
f.e assert(value == False); assert(value == True);

1745076139
Gliptic!~glip@2a01:4f8:c012:91f3::1
what do you mean "pick up on it"?

1745076163
Gliptic!~glip@2a01:4f8:c012:91f3::1
are you asking whether it can figure out that it's impossible at compile at?

1745076170
Gliptic!~glip@2a01:4f8:c012:91f3::1
*compile time

1745076227
lemons!~doggie@user/doggie-:49517
yes

1745076282
Gliptic!~glip@2a01:4f8:c012:91f3::1
then no, it won't give a compile time error for that

1745076296
lemons!~doggie@user/doggie-:49517
sad

1745079136
bblack!~bblack@wikimedia/bblack-WMF
lemons: even just a plain assert(false) will compile, but then fail at runtime

1745079238
bblack!~bblack@wikimedia/bblack-WMF
ditto for an exe that just has an @panic() statement as the body of main.  It will compile, but won't get far running.

1745079275
bblack!~bblack@wikimedia/bblack-WMF
(or just "unreachable;" as the body of main())

