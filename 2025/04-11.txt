1744363715
lemons!~doggie@user/doggie-:49517
can someone help an idiot, my c api wrapper keeps throwing wrong type errors on build and im not smart enuogh to tell where to put pointers and where not

1744363727
lemons!~doggie@user/doggie-:49517
https://bpa.st/Q5TA

1744363735
lemons!~doggie@user/doggie-:49517
https://bpa.st/WXCA

1744363808
lemons!~doggie@user/doggie-:49517
on that note is there a oneliner for if(!thing()) crash()

1744363821
lemons!~doggie@user/doggie-:49517
i assumed orelse but that doesnt seem to compile

1744363996
yataro!~yataro@user/yataro
what kind of error you get? it's kinda cumbersome to test your code cuz complete picture is missing. if you provide complete source and context it would help a lot

1744364088
lemons!~doggie@user/doggie-:49517
yeh hol on ill push it to the repo

1744364103
lemons!~doggie@user/doggie-:49517
do mind theres a bunch of unincluded shit laying around tho

1744364276
lemons!~doggie@user/doggie-:49517
...ok give me a sec ctually, login pain

1744364358
yataro!~yataro@user/yataro
no sweat 

1744365342
lemons!~doggie@user/doggie-:49517
yataro: https://github.com/sanguina-ss13/sanguina-lib

1744365418
lemons!~doggie@user/doggie-:49517
specifically the map_gen stuff you can ignore

1744365429
lemons!~doggie@user/doggie-:49517
rn just trying to get _byondapi.zig to behave

1744367234
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how do I convert a c string ?[*:0]const u8 to a slice? 

1744367318
yataro!~yataro@user/yataro
lemons: there's a lot more... i started looking into this, but stopped after a while, there's too much to fix... see this (unifinished) review https://bpa.st/VLCQ 

1744367402
yataro!~yataro@user/yataro
flower_: first check if there is a string becuase this pointer is nullable (optional) then use std.mem.span

1744367416
lemons!~doggie@user/doggie-:49517
yataro: no worries, and thanks

1744367426
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I get two c strings in a function and I want to combine both to a filepath name: https://git.sr.ht/~flower/zjasmnotes/tree/compile_with_original_nsm_h/item/src/main.zig#L45

1744367482
Gliptic!~glip@2a01:4f8:c012:91f3::1
flower_, ++ on slices only works at comptime

1744367588
yataro!~yataro@user/yataro
lemons: if i understood you correctly, the initial problem you mentioned was about `list` slice, & can coerce array to pointer but for slice you use .ptr field

1744367663
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: I see, so how to do it at runtime?

1744367818
Gliptic!~glip@2a01:4f8:c012:91f3::1
there are a few ways, one is using ArrayList and appendSlice

1744367868
lemons!~doggie@user/doggie-:49517
yataro: yeh, aight. btw in these functions do i keep self: *ByondValue and ret=*ByondValue ? or change these to refular values or wuh

1744367873
lemons!~doggie@user/doggie-:49517
*regular

1744367911
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok will fiddle with ArrayList

1744367920
lemons!~doggie@user/doggie-:49517
the intent is to be able to chain these ala value.readVar().asref() 

1744368097
tsujp!497e1f7b6a@sourcehut/user/tsujp
how does one set the type of a struct field to "a function" while not being too specific about said function arguments as one instance of the struct might have that field set to a function which has xyz args, and another instance abc args etc

1744368167
yataro!~yataro@user/yataro
lemons: to mutate these values you need pointer to mutable. if this is your goal, just keep it that way

1744368218
lemons!~doggie@user/doggie-:49517
aight, cool

1744368378
yataro!~yataro@user/yataro
tsujp: you can use anyopaque pointer and cast it to right function type (depending on what?). also see https://github.com/chung-leong/zigft if you want parameter binding  

1744368510
yataro!~yataro@user/yataro
if you have limited number of functions you can call this way, consider using tagged union 

1744368748
tsujp!497e1f7b6a@sourcehut/user/tsujp
how would that work with the tagged union approach?

1744368942
yataro!~yataro@user/yataro
union (enum) { fn1: *fn(a: u8, b: usize) void, fn2: *fn(c: bool, d: u16) void };

1744368956
yataro!~yataro@user/yataro
then you can switch(...) on it 

1744369158
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm lemme think about how i want to do this

1744369198
tsujp!497e1f7b6a@sourcehut/user/tsujp
im constructing a bunch of _stuff_ (currently an enum, and a table) from comptime definitions here: https://github.com/tsujp/zevem/blob/master/src/lib/opcode.zig#L43

1744369207
lemons!~doggie@user/doggie-:49517
and to chop down a float into a packed struct?

1744369222
tsujp!497e1f7b6a@sourcehut/user/tsujp
need to add some functions to that for specific entries, thinking about how best to do this

1744369225
lemons!~doggie@user/doggie-:49517
wait i can just define the struct as a u4 cant i

1744369238
lemons!~doggie@user/doggie-:49517
nop nvm

1744370501
tsujp!497e1f7b6a@sourcehut/user/tsujp
hangon, test filters are applied to the build step name and not the test name in source?

1744370717
tsujp!497e1f7b6a@sourcehut/user/tsujp
yeah.. hmmm.. is there no nice way to only run a test of a specific name i.e. in source code:  test "foo" { ... }   without putting that test in its own module and having to add a build step etc etc

1744370809
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
can a std.ArrayList be passed to a C function?

1744370975
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
that c function expects ?*anyopaque

1744370998
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
or that zig wrapper function

1744371033
Gliptic!~glip@2a01:4f8:c012:91f3::1
not directly

1744371130
Gliptic!~glip@2a01:4f8:c012:91f3::1
I suppose if you just concatenate a known set of slices, you can use allocPrint and get only a plain slice back

1744371398
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah this test API is annoying me now

1744371419
tsujp!497e1f7b6a@sourcehut/user/tsujp
cannot print fully qualified test names so i can't even determine what filter to use to run a single test

1744373896
tsujp!497e1f7b6a@sourcehut/user/tsujp
so tests are meant to be filtered by their fully qualified name but it appears they are only filtered by their base name if this is the right location: https://github.com/jacobly0/zig/blob/8b77d48e4551917ab72ee4f76ef3993b818a0823/test/src/Cases.zig#L556

1744373903
tsujp!497e1f7b6a@sourcehut/user/tsujp
that also matches what is going on at my end

1744374871
lemons!~doggie@user/doggie-:49517
are packed structs supposed to be annoying dipshits to work with

1744374906
lemons!~doggie@user/doggie-:49517
ive heard that theyre what you should use for bitfields but any time i try to they just get in the way

1744375119
lemons!~doggie@user/doggie-:49517
cant cast into them easily, checking multiple things at once is annoying, arbitrary fields are an utter nogo

1744375134
lemons!~doggie@user/doggie-:49517
general dumbness all things considered

1744375264
ifreund!2940d10f8b@user/ifreund
you're probably holding it wrong :P

1744375281
ifreund!2940d10f8b@user/ifreund
bitcasting between integers and packed structs is easy

1744375353
ifreund!2940d10f8b@user/ifreund
you can also use == to compare packed struct values for equality

1744375388
lemons!~doggie@user/doggie-:49517
hm, how would one cast a float into one then?

1744375403
ifreund!2940d10f8b@user/ifreund
bitcast

1744375495
lemons!~doggie@user/doggie-:49517
bitcast asserts size overlap no? i'd have to do some uhhh @bitcast(@as(u4, @intfromfloat(float))) wouldnt i?

1744375523
lemons!~doggie@user/doggie-:49517
or can i bitcast directly

1744375525
ifreund!2940d10f8b@user/ifreund
you can only bitcast between things of the same size yes

1744375540
ifreund!2940d10f8b@user/ifreund
bitcasting a f64 to a u4 is nonsense

1744375557
lemons!~doggie@user/doggie-:49517
yeah ik, api dumbness

1744375563
ifreund!2940d10f8b@user/ifreund
you can bitcast it to a u64 or a packed struct backed by a u64

1744375587
lemons!~doggie@user/doggie-:49517
i get u24 out of it which zig at least doesnt fight you on

1744375720
lemons!~doggie@user/doggie-:49517
cant imagine doing that in rust or such

1744375797
lemons!~doggie@user/doggie-:49517
ill just swap it with a u24 and f2i directly ig

1744375995
lemons!~doggie@user/doggie-:49517
dont assume something like a collision bitfield is doable with these tho?

1744376238
lemons!~doggie@user/doggie-:49517
    return @bitCast(@as(u24, @truncate(@as(u32, @intFromFloat(f)))));

1744376241
lemons!~doggie@user/doggie-:49517
ewww.

1744379218
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmmmmmm actually the test filter does work as expected... VERY curious... it appears to break when certain kinds of nesting are used, I'll try and get a reproduction to file a bug report if it is indeed a bug

1744379947
tsujp!497e1f7b6a@sourcehut/user/tsujp
using a function pointer doesn't (appear) to tie the function pointer to a particular _named_ function but rather one that implements the same parameter type arguments and return type

1744379979
tsujp!497e1f7b6a@sourcehut/user/tsujp
is there a way to have a pointer to an actual named function that is idiomatic, or is the only real way to cast with anyopaque pointer (which feels like a potential footgun)

1744385448
Gliptic!~glip@2a01:4f8:c012:91f3::1
tsujp: if it's a specific named function, why do you need a function pointer at all?

1744392581
lemons!~doggie@user/doggie-:49517
rq, how do i bitshift "either left or right"

1744392607
lemons!~doggie@user/doggie-:49517
if() the signness?

1744396721
smlavine!~smlavine@sourcehut/user/smlavine
Hello -- is there a reason a FreeBSD release is not available for 0.14.0?

1744397041
andrewrk!~andrewrk@mail.ziglang.org
smlavine: sorry, I didn't get around to it yet

1744397138
andrewrk!~andrewrk@mail.ziglang.org
pull request merging stream starting soon: https://www.twitch.tv/andrewrok

1744397309
andrewrk!~andrewrk@mail.ziglang.org
smlavine: alexrp is working on adding cross compilation support for freebsd which will make it start being automatically populated with every CI commit instead of manually on releases only

1744398239
smlavine!~smlavine@sourcehut/user/smlavine
andrewrk: Thanks :)

1744400265
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
can i check if a type has a certain const declaration, and perhaps access the value?  ie. `const Foo = struct { const HEADERS = &.{"foo", "bar"};` .. in a function with `comptime T: type` parameter i want to check that the given type has the HEADER const

1744400296
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
i tried using @typeInfo(..).@"struct".decls but it's empty

1744400543
grayhatter!~grayhatte@user/grayhatter
netvor: you can check, but it's empty because HEADERS isn't pub, which means nothing outside of Foo is allowed to know it exists

1744400578
grayhatter!~grayhatte@user/grayhatter
IIRC @hasDecl() will return a more helpful error if it's non-pub

1744400662
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
neat, thanks!

1744405862
SultansOfCode!~SultansOf@user/SultansOfCode
There is a way to round f32 to some decimal places? Like, I want to round it to 1 decimal place. So 0.402 becomes 0.4

1744406488
grayhatter!~grayhatte@user/grayhatter
SultansOfCode: for printing? otherwise when would a lossy number be helpful?

1744406540
grayhatter!~grayhatte@user/grayhatter
@trunc(number * 10.0) / 10.0

1744406614
grayhatter!~grayhatte@user/grayhatter
if it's for printing std.fmt has docs

