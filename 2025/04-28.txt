1745801067
clevor!sid649024@id-649024.hampstead.irccloud.com
I am running the Windows tests on NixOS via `winePackages.full`, and Wine asks me to let it install wine-mono. Selecting either Install or Cancel eventually causes the Windows tests to fail. How do I work around this?

1745801080
clevor!sid649024@id-649024.hampstead.irccloud.com
While still running the Windows tests

1745804492
andrewrk!~andrewrk@mail.ziglang.org
clevor: -fno-wine

1745804587
clevor!sid649024@id-649024.hampstead.irccloud.com
Aww

1745804650
andrewrk!~andrewrk@mail.ziglang.org
oh, well, yeah that wouldn't still run the Windows tests

1745806897
grayhatter!~grayhatte@user/grayhatter
clevor: why does it fail?

1745807208
clevor!sid649024@id-649024.hampstead.irccloud.com
When I press Install, I see no network activity.

1745807244
clevor!sid649024@id-649024.hampstead.irccloud.com
When I press Cancel, the test fails and the log says fixme and other stuff.

1745807253
clevor!sid649024@id-649024.hampstead.irccloud.com
Sounds like a Wine bug :(

1745807289
clevor!sid649024@id-649024.hampstead.irccloud.com
Let me run it againâ€¦

1745807505
grayhatter!~grayhatte@user/grayhatter
maybe install wine-mono before starting the tests?

1745807518
clevor!sid649024@id-649024.hampstead.irccloud.com
That isn't on NixOS.

1745807547
grayhatter!~grayhatte@user/grayhatter
... you're punking me right?

1745807586
clevor!sid649024@id-649024.hampstead.irccloud.com
I'm somewhat sure.

1745807604
grayhatter!~grayhatte@user/grayhatter
it's either not availble on nixos, and then you'd be required to skip the tests

1745807635
grayhatter!~grayhatte@user/grayhatter
or it is available, and you just have to figure out how to install

1745807968
andrewrk!~andrewrk@mail.ziglang.org
clevor: the only wine package I have is wineWowPackages.base

1745807970
andrewrk!~andrewrk@mail.ziglang.org
(on nixos)

1745808173
clevor!sid649024@id-649024.hampstead.irccloud.com
Hmm

1745808184
clevor!sid649024@id-649024.hampstead.irccloud.com
I will look into it tomorrow.

1745808238
clevor!sid649024@id-649024.hampstead.irccloud.com
https://github.com/ziglang/zig/wiki/Development-with-nix is outdated by the way

1745808488
andrewrk!~andrewrk@mail.ziglang.org
clevor: thanks for letting me know. deleted

1745811249
grayhatter!~grayhatte@user/grayhatter
will anything be able to override @setRuntimeSafety?

1745811361
grayhatter!~grayhatte@user/grayhatter
i.e. is the plan for @setRuntimeSafety (then eventually @optimizeFor()) to always have the highest precedence?

1745812955
andrewrk!~andrewrk@mail.ziglang.org
correct

1745814263
earthshaker!~earthshak@user/earthshaker
hey y'all does anyone know of some good zig resources on how to build an HTTP server from scratch

1745814761
grayhatter!~grayhatte@user/grayhatter
earthshaker: you could look at `std.http`

1745814796
grayhatter!~grayhatte@user/grayhatter
and I think I saw a guide... but honestly, I'd just find a good generic low level guide, and traslate that code into zig myself

1745814802
earthshaker!~earthshak@user/earthshaker
grayhatter: thanks brother I'll dig into that. I'm coming from rust as a background

1745814806
grayhatter!~grayhatte@user/grayhatter
you could try to implement it from the RFC if you wanted to go hardcore

1745814823
earthshaker!~earthshak@user/earthshaker
grayhatter: well now I gotta go hardcore

1745814857
grayhatter!~grayhatte@user/grayhatter
if you wanna implement http/2, and release it under MIT, I'd be very interested

1745814891
grayhatter!~grayhatte@user/grayhatter
I find myself in need of an http/2 lib for the framework I'm working on :)

1745814914
earthshaker!~earthshak@user/earthshaker
grayhatter: can't promise anything right now but that sounds like a fun little project

1745814990
andrewrk!~andrewrk@mail.ziglang.org
fwiw I'm rewriting std.http right now

1745815007
andrewrk!~andrewrk@mail.ziglang.org
and it'll feel a lot different when combined with the new std.Io stuff

1745816556
grayhatter!~grayhatte@user/grayhatter
andrewrk: I think you mentioned somewhere you're not impressed with ASLR as a mitigation, any chance you wrote down a why somewhere I could read up on?

1745819667
sunflr!~sunflr@user/sunflr
how can i add all values from a [4]u8 array into a u32 variable?

1745819702
sunflr!~sunflr@user/sunflr
adding array variables together just causes integer overflow lol

1745820098
grayhatter!~grayhatte@user/grayhatter
var a: u32 = 0; for (list_of_u8) |uint| a += uint;

1745820160
grayhatter!~grayhatte@user/grayhatter
var a: u32 = a[0] + a[1] + a[2] + @as(u32, a[3]); might work too?

1745820186
grayhatter!~grayhatte@user/grayhatter
meant to write `var b` there, but meh :D

1745820358
grayhatter!~grayhatte@user/grayhatter
I guess, I'm probably supposed to recommend const b: u32 = @reduce(.add, vect_of_u8);

1745820378
grayhatter!~grayhatte@user/grayhatter
the docs say `.Add` but I'm hopful that's a type

1745820382
grayhatter!~grayhatte@user/grayhatter
typo*

1745820446
squeek502!~squeek502@user/squeek502
grayhatter, anything in a test block in the language reference cannot contain a typo, they are compiled to make sure

1745821256
grayhatter!~grayhatte@user/grayhatter
is there a reason https://github.com/ziglang/zig/blob/fc55c1b7a1b62f0ffa4de5dfcfba03c84feb1ca5/lib/std/builtin.zig#L92 aren't lower cased? 

1745821450
sunflr!~sunflr@user/sunflr
oh

1745821458
sunflr!~sunflr@user/sunflr
huh

1745821464
andrewrk!~andrewrk@mail.ziglang.org
sunflr: perhaps you are interested in @bitCast or std.mem.readInt

1745821513
sunflr!~sunflr@user/sunflr
i just had the variable i was adding the values to set to undefined but setting it to 0 made it work X3

1745821523
sunflr!~sunflr@user/sunflr
but it did have a u32 type

1745821535
sunflr!~sunflr@user/sunflr
weird

1745821555
sunflr!~sunflr@user/sunflr
why does that work?

1745821567
grayhatter!~grayhatte@user/grayhatter
var b: u32 = (u8_0 + u8_1 + u8_2);

1745821575
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: re: ASLR: it complicates executables, linkers, and operating systems, and does not gain much in exchange. applying ASLR to vulnerable programs does not make them invulnerable, it only makes the attacker have to repeat the attack X number of times before succeeding where X is small enough to not matter realistically

1745821586
grayhatter!~grayhatte@user/grayhatter
typeOf(left side) == u32; typeOf(rightSide) == u8

1745821644
sunflr!~sunflr@user/sunflr
should i have my variables always be 0 at start then?

1745821646
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: re: ReduceOp style: that enum was created before the style guide

1745821683
grayhatter!~grayhatte@user/grayhatter
andrewrk: I recall there being a mass migration to the lowercase style, just wondering if this was skipped intentionally or not?

1745821818
andrewrk!~andrewrk@mail.ziglang.org
 there was no mass migration

1745821946
grayhatter!~grayhatte@user/grayhatter
andrewrk: re ASLR; X is also large enough to trigger IDS or other monitoring systems. (Without asserting that it's worth the complexity)

1745822394
andrewrk!~andrewrk@mail.ziglang.org
grayhatter: that's a great point. I hadn't considered that

1745822506
squeek502!~squeek502@user/squeek502
sunflr, if you haven't already read it: https://ziglang.org/documentation/master/#undefined

1745824425
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
earthshaker: https://www.openmymind.net/TCP-Server-In-Zig-Part-1-Single-Threaded/

1745824504
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I would guess this is the guide grayhatter saw but also using any guide like he said is just as good

1745834005
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
How about doing Gui applications with Zig? There is dvui if you like imgui, there is capy, which hasn't been updated for 3 months ... Makes you wonder if Zig is a good fit for desktop applications with a Gui. 

1745834300
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
There are also FLTK bindings

1745836638
ifreund!2940d10f8b@user/ifreund
I'd go with dvui, if you dont want to link a C framework like gtk

1745836653
ifreund!2940d10f8b@user/ifreund
it seems the most mature of the pure zig options

1745836697
ifreund!2940d10f8b@user/ifreund
zig as a language is more ergonomic for GUI stuff than C, the ecosystem isnt anywhere near as mature yet though of course

1745837083
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I see, I'll try dvui and maybe also fiddle with fltk bindings

1745838279
bw!sid2730@user/betawaffle
weird... am i reading the spec correctly, does json allow unescaped delete (0x7F) in strings?

1745838342
bw!sid2730@user/betawaffle
it says control characters have to be escaped, but it only mentions 0x00 - 0x1F

1745838366
bw!sid2730@user/betawaffle
and 0x7F is included in the range of "unescaped" characters

1745839954
Gliptic!~glip@2a01:4f8:c012:91f3::1
where are you reading that control characters have to be escaped?

1745840019
Gliptic!~glip@2a01:4f8:c012:91f3::1
all code points from 32 and up except \ and " seem to be allowed unescaped in strings

1745840128
Gliptic!~glip@2a01:4f8:c012:91f3::1
oh yeah, that's 0x1f is below 32

1745859802
bw!sid2730@user/betawaffle
Can a program easily discover how much stack space it was given by the operating system?

1745859818
bw!sid2730@user/betawaffle
And/or the bounds of the stack

1745860263
ashie!~ashie@user/ashie
is it possible to create arrays/slices at compile time and return them from a function?

1745860988
ifreund!2940d10f8b@user/ifreund
yes, note that's it's ok to return a dangling pointer to the stack at comptime (but not runtime of course)

1745861044
bblack!~bblack@wikimedia/bblack-WMF
the Slice docs ( https://ziglang.org/documentation/master/#Slices ) say: "The difference between an array and a slice is that the array's length is part of the type and known at compile-time, whereas the slice's length is known at runtime"

1745861075
bblack!~bblack@wikimedia/bblack-WMF
so I wouldn't think you can have a comptime-known slice len? but maybe the docs are just simplifying for the common case there.

1745861113
bblack!~bblack@wikimedia/bblack-WMF
hmmm now I want to go try a slice in a comptime block

1745861115
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Yeah you don't really have comptime slices, they are all arrays that then coerce to slices

1745861162
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
string literals for example are typed like *const [7:0]u8

1745861351
ifreund!2940d10f8b@user/ifreund
you can totally use slices at comptime

1745861392
ifreund!2940d10f8b@user/ifreund
it would be more accurate to say that an arrays lenght must always be comptime known while a slices may be runtime known

1745861434
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
The *result* of a comptime block that assigns a list of items would only be an array though, right?

1745861439
ifreund!2940d10f8b@user/ifreund
a slice's lenght is only comptime known in a comptime context (e.g. comptime {})

1745861460
ifreund!2940d10f8b@user/ifreund
rockorager: not if you use a type annotation to make it a slice

1745861468
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Ah ok

1745861482
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
const abc: []const Foo = comptime {...};

