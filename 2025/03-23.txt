1742693103
torque!~tachyon@user/torque
what would you even expect that to do

1742693122
torque!~tachyon@user/torque
act like an assignment expression?

1742693142
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
sure

1742693147
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Would it be const or var

1742693188
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I don't think it's worth it

1742693262
torque!~tachyon@user/torque
when would you use it

1742693320
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
something like https://zigbin.io/77e309

1742693854
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Meh, I don't think it's worth the confusion

1742693860
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
what scope is "res" in?

1742693866
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I assume the outer scope

1742693885
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
stealth_: are you aware of the 3rd if variety?

1742693910
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
:= is very popular is python (maybe other language as well)

1742693915
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
if (function_that_can_fail) |return_value| { .. success path .. } else |err| { err path}

1742693951
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
image.png

1742693952
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Woops

1742693955
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://ziglang.org/documentation/master/#if

1742693970
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
see the if error union example

1742693974
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, ya, i tried to use that and it seems you can only use `res` inside {}

1742694104
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i suppose if zig adds `res :=` then `res` can be inside {} scope as well. 

1742694154
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://zigbin.io/96521b

1742694230
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`if (fallibleAdd(1, 2) == 3)`

1742694265
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ohh I see, you do a comparison

1742694372
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
wait i am confusing, so if statement in that case doesn't have to be bool? 

1742694548
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
No it doesn't

1742694581
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i should try this, seems like this way might be way better then := features :D

1742694582
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
if (<fallible function>) |<result or void> { ... } else |err| { error branch }

1742694620
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
That's the pattern, but if is also an expression so you can just break out of it with the result value like in my paste up there

1742694809
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
when i write actual zig function this might come in handy, since i am calling C functions, don't think i can use this since those C function return int values.

1742694974
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, https://zigbin.io/3a5d39 no right? 

1742695004
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'm not sure what you are asking?

1742695037
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cant use your if () result else error with that code.

1742695104
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Ah I see, no you can't since there isn't an error union, just an int

1742695134
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
bummer but rockorager thanks for your input learned something neat today ;) 

1742695175
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
np

1742697469
grayhatter!~grayhatte@user/grayhatter
stealth_: that's not how you'd write that

1742697523
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
?

1742697709
grayhatter!~grayhatte@user/grayhatter
https://zigbin.io/7e6b22

1742697743
grayhatter!~grayhatte@user/grayhatter
this is how you write zig code that isn't trash and unmaintainable

1742697806
grayhatter!~grayhatte@user/grayhatter
use the language features to prevent bugs, in this case, you can't handle the error wrong, you can't lose track of the error, etc

1742697831
grayhatter!~grayhatte@user/grayhatter
in case it's not obvious, I made up the type, no idea what they should be 

1742697942
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i might do that if i were writing this also as a zig library, currently its just zig being language translator between C and python.

1742697959
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i wana do what i have time for, if i do both at same time it will take up too much time.

1742697962
grayhatter!~grayhatte@user/grayhatter
yeah... because you think it'll help solve your typing issues

1742697969
grayhatter!~grayhatte@user/grayhatter
it won't if you just ignore zig's type system

1742698061
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
whats wrong with https://zigbin.io/1db268 its just in 1 function 

1742698075
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
and error is passed down to python side to handle

1742698141
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in your way i would have to handle error on zig side! which would be bad if the code is being run on python side. 

1742698181
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
stealth_: I wouldn't define res as a var up there, it's only used as a return from that function

1742698185
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
just do const res = ...

1742698188
grayhatter!~grayhatte@user/grayhatter
self is unused, and should be deleted, res should be const, and the types look shady as well

1742698225
grayhatter!~grayhatte@user/grayhatter
what does this look like in python?

1742698240
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, o right i had done then, maybe i moved it up there, i am still restructuring the code/project as i learn new things.

1742698295
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in this case the function isn't a method so self is not needed. python package is based on class so even normal function they call it method. 

1742698326
grayhatter!~grayhatte@user/grayhatter
stealth_: I doubt python doesn't have a way to call bare functions

1742698338
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
stealth_: you can ignore the param in the signature: fn foo(_: u32) void

1742698351
grayhatter!~grayhatte@user/grayhatter
rockorager: lol, I was just typing that

1742698368
zulc22!~Sadie-znc@user/zulc22
i'm kind of a beginner, is constructing the generalpurposeallocator something that one would expect to be done whenever an allocator is needed?

1742698374
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
No

1742698398
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
If your function needs to allocate, accept an allocator

1742698410
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, o nice, that might be handy :)

1742698424
grayhatter!~grayhatte@user/grayhatter
zulc22: generally you'd construct it once, and then pass that allocator around as you need it

1742698450
grayhatter!~grayhatte@user/grayhatter
it's often the boilerplate at the top of main()

1742698485
grayhatter!~grayhatte@user/grayhatter
but like rockorager said, if you're making a libraray, or writing lib functions, and need to alloc, your function should accept an allocator

1742698527
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I generally describe the allocator I want as the param name, one of "gpa" or "arena"

1742698543
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
If my param is named arena, it means I'm not tracking allocations nicely

1742698544
grayhatter!~grayhatte@user/grayhatter
rockorager: -_-

1742698553
grayhatter!~grayhatte@user/grayhatter
horrifying

1742698571
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Hey man, sometimes you expect an arena

1742698583
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
std.json.parseFromSliceLeaky

1742698623
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The signature calls it an allocator, the doc comment tells you they recommend you use an arena

1742698631
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I just call the param an arena

1742698691
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
These are typically not library functions though

1742698735
grayhatter!~grayhatte@user/grayhatter
if only there was a way to track allocations, and optionally have your allocator know at comptime if free is a nop, thus not leaking anything, but still being very performant ignoring the call to free 

1742698750
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
As in: a server I am working on creates an arena per request. As a note to anyone reading the code, the allocator is always called an arena for functions in this pipeline so that no one is confused where the cleanup happens

1742698780
grayhatter!~grayhatte@user/grayhatter
libraries shouldn't know what kind of allocator they get

1742698787
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
And when I read my own code, if arena is in the signature I know that i don't need to be checking how i'm freeing things

1742698801
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
tell that to stdlib

1742698803
grayhatter!~grayhatte@user/grayhatter
^ that's why I call it horrifying 

1742698830
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
If you pass a gpa to std.json.parseFromSliceLeaky you are going to have a bad time

1742698845
grayhatter!~grayhatte@user/grayhatter
rockorager: tell me when stdlib PRs get comments or merged and I'll start talking to stdlib again

1742698845
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The name of the param is helpful

1742698872
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Naming a param "alloc" when I want an arena is not helpful

1742698885
grayhatter!~grayhatte@user/grayhatter
demanding an arena is bad form

1742698890
grayhatter!~grayhatte@user/grayhatter
I don't disagree with you

1742698896
grayhatter!~grayhatte@user/grayhatter
I just disagree that's ever reasonable to do

1742698899
grayhatter!~grayhatte@user/grayhatter
(for a library)

1742698922
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Hm, I don't necessarily agree

1742698937
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I think there are times you want to supply an arena to a function

1742698953
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
And not have that function do it's own arena handling

1742698960
grayhatter!~grayhatte@user/grayhatter
std.json.*Leaky, is leaky because it can be more performant, right?

1742699008
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Maybe, but I assume it's because tracking all of the allocations is a nightmare

1742699016
grayhatter!~grayhatte@user/grayhatter
jesus

1742699018
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Read the code for the non leaky version

1742699035
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/std/#std.json.static.parseFromTokenSource

1742699042
grayhatter!~grayhatte@user/grayhatter
that's gross

1742699064
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yeah, it just wraps leaky

1742699072
grayhatter!~grayhatte@user/grayhatter
this is still bad code

1742699110
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I think it's more performant by far

1742699113
grayhatter!~grayhatte@user/grayhatter
it should check if the allocator it's passed is an arena type, and create an arena IFF it's not

1742699131
grayhatter!~grayhatte@user/grayhatter
that way there's just a single API

1742699144
grayhatter!~grayhatte@user/grayhatter
I guess you can't do that with the allocator vtable

1742699177
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I don't see why this is bad code

1742699188
grayhatter!~grayhatte@user/grayhatter
one obvious way to do things

1742699201
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
1. it works, 2. it is probably faster than the alternative

1742699204
grayhatter!~grayhatte@user/grayhatter
memory is a resource (with you shouldn't be careless with it being implied)

1742699221
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
syscalls are also a resource

1742699226
grayhatter!~grayhatte@user/grayhatter
it works, and it's faster

1742699235
grayhatter!~grayhatte@user/grayhatter
I hate the line must always go up, meme

1742699246
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
You have to balance asking for memory and reallocating an array from a json struct every time you parse a new '['

1742699250
grayhatter!~grayhatte@user/grayhatter
syscalls are not a resource, they can't be exasusted

1742699262
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
syscalls take time and time is a resource

1742699267
grayhatter!~grayhatte@user/grayhatter
there you go

1742699281
grayhatter!~grayhatte@user/grayhatter
cpu cycles are a resource

1742699313
grayhatter!~grayhatte@user/grayhatter
for the record I don't mean to assert this is *bad* code

1742699318
grayhatter!~grayhatte@user/grayhatter
just that it's not good code

1742699327
grayhatter!~grayhatte@user/grayhatter
good code would be fast, and not leak

1742699679
grayhatter!~grayhatte@user/grayhatter
if it's gonna create it's own arena anyways, it should just always create an arena, I don't think there's any perf benifit to the extra api complexity here

1742699729
grayhatter!~grayhatte@user/grayhatter
but I can't tell, because the code is too hard to follow in the stdlib docs, and I'm trying not to get nerd sniped on something tonight :D

1742700056
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I've used both apis in different scenarios

1742700093
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Sometimes I have an arena already available so i'll go into the *Leaky version directly

1742700390
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I have to say, if you asked me a month ago if I'd rather write a server in go or zig I would have said go

1742700402
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
My answer today is zig

1742700425
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
With the caveat that I have a TLS proxy in front of it

1742700835
grayhatter!~grayhatte@user/grayhatter
my answer was never go

1742700854
grayhatter!~grayhatte@user/grayhatter
also part of why I'm writing verse

1742701601
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
what's verse?

1742704197
grayhatter!~grayhatte@user/grayhatter
rockorager: flask, but in zig

1742704266
grayhatter!~grayhatte@user/grayhatter
an easy to prototype framework that copies the patterns from flask that I enjoy, like blueprints and such (and ignores the ones I can't stand)

1742715072
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there a quick way to rest struct field to 0? i tried `ring.ring = {};` doesn't seemed to have worked.

1742715429
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm nm that does work, not sure why it wasn't working, glitch 

1742715565
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nm it doesn't work, err.. something is being cached. 

1742731953
bw!sid2730@user/betawaffle
does .always_tail currently *actually* guarantee what it says, and if so, what must be true for it to succeed?

1742733217
jemius!~jemius@2001:16b8:3d0f:600:dbe6:8629:820c:d09c
Why is there an "inline" keyword for for-loops? Couldn't it just work to write "comptime for" as  with functions?

1742733535
Gliptic!~glip@2a01:4f8:c012:91f3::1
inline doesn't mean it's just run at comptime, it means every iteration is unrolled inline

1742733596
Gliptic!~glip@2a01:4f8:c012:91f3::1
in fact, it doesn't mean it's run at comptime at all

1742734607
jemius!~jemius@2001:16b8:3d0f:600:dbe6:8629:820c:d09c
Then I fail to see why this for-loop needs to be inline:

1742734610
jemius!~jemius@2001:16b8:3d0f:600:dbe6:8629:820c:d09c
https://codeberg.org/ziglings/exercises/src/branch/main/exercises/071_comptime6.zig#L43

1742734929
taylan!~taylan@user/taylan
jemius: field info won't exist at run-time, I think

1742734942
Domo!~too@gw1.nor.fi
since I don't know I just speculate the type info is known only/better when unrolling the loop compile time? and it is just 3 times...

1742735052
taylan!~taylan@user/taylan
unlike in, say, Java, where info about types (classes) is carried into the run-time, I assume Zig doesn't keep *any* of it in the compile output, so reflection is not possible at run-time

1742735061
taylan!~taylan@user/taylan
(someone correct me if I'm wrong)

1742735123
taylan!~taylan@user/taylan
I suppose you could still have non-inline for at comptime, but the body of the loop must then contain only comptime expressions as well, and `print' in your example is run-time, I believe

1742735189
ifreund!2940d10f8b@user/ifreund
The real answer is that you can't `print()` at comptime as you can't make syscalls at comptime

1742735372
jemius!~jemius@2001:16b8:3d0f:600:dbe6:8629:820c:d09c
but the print function is still there. Wether inlined or not

1742735465
ifreund!2940d10f8b@user/ifreund
the body of an inline for loop isn't run at comptime

1742735486
ifreund!2940d10f8b@user/ifreund
the body of a for loop in a comptime block is

1742735526
ifreund!2940d10f8b@user/ifreund
the compiler will compile that inline for loop into 3 runtime calls to the print function

1742735546
ifreund!2940d10f8b@user/ifreund
there will be no loop at runtime

1742736399
jemius!~jemius@2001:16b8:3d0f:600:dbe6:8629:820c:d09c
Can I be sure that something like `var num: u8 = 'A'` will always have the same value on all systems? AFAIU, Zig does not enforce UTF-8. So characters and strings could be encoded in anything

1742736899
ifreund!2940d10f8b@user/ifreund
jemius: zig source code must be utf-8 encoded

1742736973
ifreund!2940d10f8b@user/ifreund
It's therefore impossible to put something that's not utf-8 in a string literal

1742737037
ifreund!2940d10f8b@user/ifreund
https://ziglang.org/documentation/master/#toc-String-Literals-and-Unicode-Code-Point-Literals

1742737235
Gliptic!~glip@2a01:4f8:c012:91f3::1
jemius: taylan is right, zig won't let StructField exist at runtime because it contains fields of type `type` and `comptime_int`

1742746379
grayhatter!~grayhatte@user/grayhatter
jemius: it can help to think of comptime less of writing code that will run, and more like code that will generate other/more/different code

1742748145
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i noticed there are zig based os out there, don't they need drivers?

1742748255
grayhatter!~grayhatte@user/grayhatter
stealth_: they do have drivers

1742748268
grayhatter!~grayhatte@user/grayhatter
a "driver" is just code that interacts directly with some hardware

1742748309
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well ya don't you need specialized driver to access advanced features. 

1742748333
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
are those have to be written in zig as well? 

1742748369
grayhatter!~grayhatte@user/grayhatter
I think you asked "do you need code that supports advanced features, to support advanced features?" 

1742748401
grayhatter!~grayhatte@user/grayhatter
yes, if you want to support advanced features, you need code that supports those features.... 

1742748439
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok how about something basic like hard drive, will it know the different between sata, nvme, ... 

1742748479
Gliptic!~glip@2a01:4f8:c012:91f3::1
https://wiki.osdev.org/Getting_Started

1742748516
TheFox!~TheFox@user/TheFox
Hi

1742748541
Gliptic!~glip@2a01:4f8:c012:91f3::1
e.g. nvme https://wiki.osdev.org/NVMe

1742748672
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, thanks so pretty much all that has to be coded. 

1742748681
grayhatter!~grayhatte@user/grayhatter
hello TheFox 

1742750521
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
Is there something more in-depth about alignment and how Zig enforces it? I've got a bit of C code that I'm interfacing with that accesses a field on a struct pointer, but the field access fails with `panic: member access within misaligned address 0xec for type 'Client' (aka 'struct Client'), which requires 8 byte alignment` inside that C function.

1742750562
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
Imagine me being a "did stuff with C and C++ multiple years ago and since then has lived in crayon colord garbage collected Go wonderland so doesn't know the first thing about these basics" person

1742750592
grayhatter!~grayhatte@user/grayhatter
farhaven: is that struct marked as `extern`?

1742750613
grayhatter!~grayhatte@user/grayhatter
> crayon colord

1742750624
grayhatter!~grayhatte@user/grayhatter
that's amazing, I'll be stealing that description

1742750666
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
It's a field on another struct that is `@extern` and allocated in C-land, yeah

1742750698
grayhatter!~grayhatte@user/grayhatter
to answer directly, there is some docs about alignment, but they lack clear descriptions/examples

1742750737
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
I'll take anything I can get :)

1742750757
grayhatter!~grayhatte@user/grayhatter
what is client?

1742750766
grayhatter!~grayhatte@user/grayhatter
is it a ptr, or a nested struct?

1742750778
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
farhaven, https://www.youtube.com/watch?v=FNUKAT-yQWE

1742750823
grayhatter!~grayhatte@user/grayhatter
farhaven: you've read https://ziglang.org/documentation/master/#Alignment already right?

1742750861
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
I ... don't think I have. I distincly remember looking for something like that but not finding it in the 0.14.0 docs

1742750977
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
Thanks. https://gist.github.com/farhaven/d05ff41ec630385b04b6d5797f45ab6a is roughly what the (I think) relevant parts of the code look like

1742751020
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
TL;DR: I've got a struct that contains a pointer to another struct that I'm passing to a "cleanup" type function that's implemented in C. All allocation happens in C, and all the types are in a C-header.

1742751034
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
And that C cleanup function then bails

1742751057
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
I'll spend some time perusing those docs and watching the video, thanks folks :)

1742751129
grayhatter!~grayhatte@user/grayhatter
farhaven: @extern is different from extern

1742751139
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/#extern-struct

1742751300
grayhatter!~grayhatte@user/grayhatter
farhaven: that's weird, I wouldn't have expected that error, if it's exactly as you described, you might have found a compiler bug

1742751310
grayhatter!~grayhatte@user/grayhatter
someone smarter than me would have to comment

1742751335
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
Heh, wouldn't surprise me, I have a habit of using things _just_ wrong enough to break them in exciting ways :D 

1742751411
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
farhaven, since there was bit of confusion there should do it https://www.youtube.com/watch?v=mJs2E7mkhx4 :D

1742751448
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
I _think_ using @extern instead of plain `extern "c" var ....` did me dirty there.

1742751474
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
OK, I think all of this means I really need to actually do some reading/learning before stabbing around at things at more or less random :D

1742751482
grayhatter!~grayhatte@user/grayhatter
stealth_: it's not actually an issue with extern struct, I thought it was a zig struct, but this is already a c struct, so it should have the alignment C expects

1742751552
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, ya but your initial comment was right about using `extern`, e.g: `pub const cStruct = extern struct {`

1742751583
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
Yeah actually using regular `extern` instead of the builtin seems to do the trick

1742751590
farhaven!63d4b20b0e@2a03:6000:1812:100::12e8
Thanks for the clue bat :)

1742766118
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have a struct field like `iovec: *c.iovec,};` clearly this should be a pointer, later i run this code in python and somehow now the field like `iovec.iov_base` has memory assigned to it vs giving me a segfault. 

1742767036
grayhatter!~grayhatte@user/grayhatter
just because the pointer doesn't segv, doesn't mean it's valid memory

1742767121
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i can even assign value to it! this is the kinda of crap i hate, language shouldn't allow you to do that. 

1742767143
grayhatter!~grayhatte@user/grayhatter
stealth_: are you using undefined anywhere?

1742767179
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, not in this case its just a struct 

1742767192
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its probably the C under the hood that doing these things. 

1742767211
grayhatter!~grayhatte@user/grayhatter
> language shouldn't allow you to do that.  

1742767221
grayhatter!~grayhatte@user/grayhatter
why didn't someone stop me?!

1742767313
grayhatter!~grayhatte@user/grayhatter
the way you're describing your code doesn't make sense

1742767365
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i can't tell if its the python assigning memory cause its using heap setting or it actually is not assigning and randomly accessing memory space. 

1742767403
grayhatter!~grayhatte@user/grayhatter
zig code doesn't do anything random. you're missing something

1742767404
Gliptic!~glip@2a01:4f8:c012:91f3::1
what is python supposed to be assigning to it

1742767461
Gliptic!~glip@2a01:4f8:c012:91f3::1
you specify a constructor function afaik

1742767495
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well is it doing that cause Py_TPFLAGS_HEAPTYPE is set automatically?

1742767496
grayhatter!~grayhatte@user/grayhatter
ACTION sprays Gliptic with a water bottle https://gr.ht/i/no.png

1742767507
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: I didn't google it!

1742767526
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: doing what?

1742767533
Gliptic!~glip@2a01:4f8:c012:91f3::1
magically assigning things?

1742767554
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if only zig has working async/await i could have dropped this in seconds. 

1742767642
grayhatter!~grayhatte@user/grayhatter
lol, stealth_ nah

1742767662
grayhatter!~grayhatte@user/grayhatter
you're doing this because you want to, not because it's the only option

1742767705
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, https://zigbin.io/edc54c i can totally use that Iovec in python side. read/write (without c.Py_READONLY being set)

1742767706
grayhatter!~grayhatte@user/grayhatter
you've already rejected other suggestions because you don't want to, (or because you don't have time)

1742767730
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, you are just saying random stuff.

1742767748
grayhatter!~grayhatte@user/grayhatter
lol, ME? I'm saying random stuff?

1742767763
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: and?

1742767800
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, thats what i am saying its hard to tell if python is actually assigning memory or randomly accessing pointer memory.

1742767809
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its not zig's fault btw. 

1742767811
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: first of all, this code makes no sense

1742767830
Gliptic!~glip@2a01:4f8:c012:91f3::1
you've set the offset to @offsetOf(Iovec, "iovec") + @offsetOf(c.iovec, "iov_base")

1742767834
Gliptic!~glip@2a01:4f8:c012:91f3::1
that's an offset to nothing

1742767858
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i was told here thats how  you do offset 

1742767868
Gliptic!~glip@2a01:4f8:c012:91f3::1
this is in fact what I _thought_ you were doing a few days ago, when you had a member called "ptr" that wasn't a pointer

1742767885
Gliptic!~glip@2a01:4f8:c012:91f3::1
and now you're _actually_ doing that nonsensical thing

1742767905
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: you were told to do that when the struct looking completely different

1742767912
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i get that i haven't given the pointer memory but once i do can't you access that with offset the same way? 

1742767913
grayhatter!~grayhatte@user/grayhatter
Gliptic: at least it's not called ptr anymore :P

1742767913
Gliptic!~glip@2a01:4f8:c012:91f3::1
*looked

1742767934
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: yes, what a switcheroo

1742767945
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: it doesn't matter whether you "give the pointer memory"

1742767958
Gliptic!~glip@2a01:4f8:c012:91f3::1
the offset is not magically going to _follow_ a pointer

1742767969
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how am i suppose to know that? 

1742767982
Gliptic!~glip@2a01:4f8:c012:91f3::1
by knowing what the offset _means_

1742767994
Gliptic!~glip@2a01:4f8:c012:91f3::1
why you're doing anything

1742768062
grayhatter!~grayhatte@user/grayhatter
stealth_: you're supposed to know that, because it's how memory pointers work... you need to understand exactly where the memory is if you want to write correct zig code

1742768077
grayhatter!~grayhatte@user/grayhatter
you shouldn't be doing

1742768096
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: like, what is python going to do with the offset you set for the member?

1742768097
grayhatter!~grayhatte@user/grayhatter
should be *using* offset, if you don't know what the offset is, and why

1742768100
Gliptic!~glip@2a01:4f8:c012:91f3::1
can you express that in zig code

1742768161
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, well i am wondering i should switch from passing pointer to python and have it use int instead and use @ptrFromInt on zig side to prevent memory leak.

1742768205
grayhatter!~grayhatte@user/grayhatter
now who's just saying random things

1742768275
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
why it might be valid solution since zig offer that features and it will prevent python from assigning/gc's

1742768308
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
as far as python know it just int

1742768314
grayhatter!~grayhatte@user/grayhatter
Gliptic: _technically_ you could get that offset to be correct... in a few cases

1742768366
grayhatter!~grayhatte@user/grayhatter
not with the types as written in this paste... but it's possible 

1742768378
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: I mean, if you somehow allocate the c.iovec thing together with the Iovec, yes

1742768387
Gliptic!~glip@2a01:4f8:c012:91f3::1
but python is not gonna do that

1742768415
Gliptic!~glip@2a01:4f8:c012:91f3::1
but then the pointer is uh.. pointless

1742768428
grayhatter!~grayhatte@user/grayhatter
Gliptic: lol, that's what I was thinking alloc(u8, sizeOf(Iovec) + sizeOf(c.iovec))

1742768449
grayhatter!~grayhatte@user/grayhatter
#typesafety

1742769787
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: yeah, what you asked doesn't make sense btw

1742769876
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, i am going to try it out 

1742769901
Gliptic!~glip@2a01:4f8:c012:91f3::1
I wouldn't, it sounds nonsensical

1742769911
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i made the backup of the project so if it doesn't work i can just delete and restore what i have currently :)

1742769913
Gliptic!~glip@2a01:4f8:c012:91f3::1
first thing is that "int" cannot store a pointer

1742769924
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://ziglang.org/documentation/master/#ptrFromInt

1742769929
Gliptic!~glip@2a01:4f8:c012:91f3::1
but maybe you mean usize

1742769945
Gliptic!~glip@2a01:4f8:c012:91f3::1
and why would you do that anyway

1742769954
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ptrFromInt <- ends with int

1742769973
Gliptic!~glip@2a01:4f8:c012:91f3::1
also, you should learn git

1742770060
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i start using git later once i have initial code structure and working.

1742770147
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its just wastes time when you are still in early coding stage.

1742770178
Gliptic!~glip@2a01:4f8:c012:91f3::1
it doesn't if you need to go back to an earlier version

1742770845
grayhatter!~grayhatte@user/grayhatter
git absouletly does not waste time unless you're holding it **very** wrong

