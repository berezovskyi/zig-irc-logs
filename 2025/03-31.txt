1743379522
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, it was way too much pain in the ass to try and provide __new__ memory it ended up being me having to manage python object memory! and i don't want to do that.

1743379531
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so here is what i ended up with https://zigbin.io/5696ee

1743382750
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
when ppl banket memset to 0 not knowing that 0 is valid file descriptor.

1743383996
grayhatter!~grayhatte@user/grayhatter
I assume most people who use memset, know C, and I suspect most people who know c have heard of stdin

1743384090
grayhatter!~grayhatte@user/grayhatter
of course I also default assume that people who write code want to know how or why it works... but more and more I meet people who don't want to know how stuff works

1743384111
grayhatter!~grayhatte@user/grayhatter
which is always super weird to me

1743384256
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what kind of stuff?

1743386387
grayhatter!~grayhatte@user/grayhatter
literally everything

1743386478
grayhatter!~grayhatte@user/grayhatter
e.g. I've learned not to ask the question: "how can you not want to know how [thing] works" anytime someone says something similar to "I don't care why, I just want [thing]"

1743386885
grayhatter!~grayhatte@user/grayhatter
as a specific example, you think python async is cool, how can you not want to know how python does it's async context switching? how can you not want to know how memory addressing works? how can you not want to know where stack memory comes from, or goes after a return?

1743386943
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
my time is limited in this world, i don't have time to learn all that

1743386981
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
at the end of the day its just human knowledge and its garbage, lol

1743387229
grayhatter!~grayhatte@user/grayhatter
my time is limited so I can't do that, and in the end nothing matters... 

1743387304
grayhatter!~grayhatte@user/grayhatter
well if nothing matters, then you can do whatever you want, or if time is limited why are you even writing a python zig liburing libraray anyways? isn't there better things to do?

1743387323
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you want to learn something, learn from nature, there is true knowledge and wisdom.

1743387523
grayhatter!~grayhatte@user/grayhatter
stealth_: so the only knowledge worth knowing is the knowlege you care about? If it doesn't come from nature, it doesn't count as "true knowledge"

1743387546
grayhatter!~grayhatte@user/grayhatter
weird take, but whatever

1743397403
Yinameah!e74173ad36@user/Yinameah
quit

1743401813
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there an easy to find out if pointer is actually set or not? currently i am doing `if (@intFromPtr(sqe.ptr) != 0)` is that how you are suppose to check? 

1743402087
andrewrk!~andrewrk@mail.ziglang.org
stealth_: please reed every langref section that has the word "pointer" in it

1743402249
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, `@intFromPtr(sqe.ptr)` way works for me, other way would be to use `?` and catch null that way, i am wondering of what the best practice is. 

1743402303
andrewrk!~andrewrk@mail.ziglang.org
if the pointer does not have ? in front of it, it is illegal to observe 0 stored in there

1743402386
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well there is nothing stored in that pointer, its the pointer address thats 0, since the pointer hasn't been assigned yet. 

1743402848
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok, i just change it to using ? and catching that null that way. thanks

1743407625
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line:22 is segfaults https://zigbin.io/cb52a1 first time trying to pass an struct as object.

1743408628
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_, what type of value does the format string "O" expect?

1743408646
Gliptic!~glip@2a01:4f8:c012:91f3::1
and what type of value is `sqe`

1743408677
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Gliptic, PyObject, well sqe is Sqe but its also PyObject since i give it that. 

1743408690
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, not PyObject

1743408705
Gliptic!~glip@2a01:4f8:c012:91f3::1
also, even if that was the case, Sqe is not PyObject

1743408715
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/7f7d0f

1743408731
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, that's Sqe, not PyObject

1743408742
Gliptic!~glip@2a01:4f8:c012:91f3::1
and O does not expect `PyObject`

1743408781
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o

1743408786
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o ic 

1743408838
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
was trying this code but clearly error https://zigbin.io/caedb9

1743408879
Gliptic!~glip@2a01:4f8:c012:91f3::1
clearly, so how do you allocate a python object?

1743408911
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you mean giving it memory? 

1743408924
Gliptic!~glip@2a01:4f8:c012:91f3::1
same thing

1743408956
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i already give Sqe.ptr memory

1743408969
Gliptic!~glip@2a01:4f8:c012:91f3::1
that has nothing to do with Sqe

1743408972
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in this case it get ptr directly from io_uring

1743408979
Gliptic!~glip@2a01:4f8:c012:91f3::1
how do you allocate Sqe such that python can handle it?

1743409007
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so far i been passing int, ... using Py_BuildValue 

1743409035
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not really sure i would have to do research into that one. 

1743437391
siaal!~Siaal@user/Siaal
hh7

1743437393
siaal!~Siaal@user/Siaal
h4

1743437395
siaal!~Siaal@user/Siaal
whoops

1743437428
taylan!~taylan@user/taylan
does anyone have an explanation for the different results for foo1 and foo2 defined at the bottom here? https://godbolt.org/z/43jT8afEs  they both essentially implement `v.isPtr()`

1743439737
grayhatter!~grayhatte@user/grayhatter
taylan: on a superficial glance it looks like the compiler figured out that ieee.sign: u1 and ieee.exp: u11 is ieee.compilermagic: u12, and is able to test both at once, where in foo1 the two bits next to eachother are compared in seperate instructions

1743439951
grayhatter!~grayhatte@user/grayhatter
that's some pretty deep compiler lore, that clang will group sequencial bits together, IFF they're ordered that way in the statement 

1743441674
taylan!~taylan@user/taylan
someone on Discord actually pointed out that isPtr can simply be implemented as: `const s: i64 = @bitCast(v); return s > 0x7FF8_0000_0000_0000;`

1743441696
taylan!~taylan@user/taylan
I wish the optimizer were able to apply such tricks

1743442857
grayhatter!~grayhatte@user/grayhatter
that hyper optimization is the kind that'll bite you if you're not careful

1743442909
grayhatter!~grayhatte@user/grayhatter
it's a cute bit stuffing trick though

1743444812
taylan!~taylan@user/taylan
NaN packing is already as nasty as a trick as it gets, and I'm going all-in by using a packing scheme that makes literally every single unused bit pattern available, so... :P

1743444844
taylan!~taylan@user/taylan
see here if curious: https://git.tkammer.de/zisp/tree/src/zisp/value.zig

1743446341
grayhatter!~grayhatte@user/grayhatter
taylan: if you add a ! to your // they'll become doc comments, and you can get generated docs

1743450992
bw!sid2730@user/betawaffle
A defer will prevent tail call optimization, right?

1743451060
Gliptic!~glip@2a01:4f8:c012:91f3::1
hard to see how it couldn't

1743455615
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there no way to cast one type to another in zig? i tried @as() but it seem to only work for same type/value

1743455898
Gliptic!~glip@2a01:4f8:c012:91f3::1
@as is not a cast, there are many cast built-ins

1743456013
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
do you know of anything can can convert Struct to PyObject?

1743456055
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, that doesn't make any sense

1743456057
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since struct first field is ob_base python should consider it to be object.

1743456079
Gliptic!~glip@2a01:4f8:c012:91f3::1
I know of something that can convert a *Sqe to a *PyObject

1743456093
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o..

1743456094
Gliptic!~glip@2a01:4f8:c012:91f3::1
although you don't need any cast to do that

1743456116
Gliptic!~glip@2a01:4f8:c012:91f3::1
Sqe literally contains a PyObject, right?

1743456127
Gliptic!~glip@2a01:4f8:c012:91f3::1
so how would you obtain a *PyObject to that?

1743456148
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
pyobject is pretty much C struct with first field being PyObject then its pythons object.

1743456197
Gliptic!~glip@2a01:4f8:c012:91f3::1
how do you get a pointer to that PyObject field?

1743456215
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you talking about @prtCast? i have already tried that 

1743456246
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, I literally just said you don't need a cast

1743456289
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its confusing, what exactly are you asking ? or can you point me to do so i can read about it? 

1743456370
blurrycat!~blurrycat@user/blurrycat
stealth_: https://www.openmymind.net/learning_zig/pointers/

1743456466
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i cant just send pointer through, it doesn't work.

1743456619
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: I'm asking how do you get a pointer to the field of type PyObject in your struct?

1743456758
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's only one field that has type PyObject, right?

1743456764
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/1fa604

1743456794
Gliptic!~glip@2a01:4f8:c012:91f3::1
you're trying to return a local variable again...

1743456806
APic!apic@apic.name
;=P

1743456810
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well its a fake code, to show what i am trying to do

1743456812
Gliptic!~glip@2a01:4f8:c012:91f3::1
did you not find out how to allocate a Sqe as a python object?

1743456826
Gliptic!~glip@2a01:4f8:c012:91f3::1
you said last night that you were going to research that

1743456843
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i normally use Py_BuildValue and that didn't seem to work

1743456851
Gliptic!~glip@2a01:4f8:c012:91f3::1
of course it doesn't work

1743456860
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya didn't find anything and wasted a lot of time today as well 

1743456877
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm guessing I can find it in one minute of googling, but I'm not going to do it

1743456901
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe you know what you are looking for, i don't.

1743456915
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm looking for how to allocate a python object in C

1743456968
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well this is suppose to be function call, that you call e.g: `sqe = io_uring_get_sqe(ring)` it should't have any `free(sqe)` later.

1743457016
Gliptic!~glip@2a01:4f8:c012:91f3::1
Sqe is supposed to be a python object, no?

1743457022
Gliptic!~glip@2a01:4f8:c012:91f3::1
so it better be allocated like any python object

1743457042
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its not that simple, i dont think

1743457047
Gliptic!~glip@2a01:4f8:c012:91f3::1
of course it is

1743457063
Gliptic!~glip@2a01:4f8:c012:91f3::1
you want a python object, you allocate a python object, you initialize that python object

1743457069
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's literally PyObject_New

1743457076
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/205f5f this should be whole class/function on sqe

1743457089
Gliptic!~glip@2a01:4f8:c012:91f3::1
and?

1743457111
Gliptic!~glip@2a01:4f8:c012:91f3::1
you want to return a python object without returning a python object

1743457114
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i tried PyObject_New as well! and those don't work nicely with zig. 

1743457115
Gliptic!~glip@2a01:4f8:c012:91f3::1
nobody can help you with that

1743457128
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: that's why you need to learn C so you can see what that macro does

1743457140
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am not coding in c here.. 

1743457144
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes you are

1743457148
APic!apic@apic.name
;=P

1743457156
Gliptic!~glip@2a01:4f8:c012:91f3::1
you need to know C to use the python C API

1743457165
Gliptic!~glip@2a01:4f8:c012:91f3::1
as we've been telling you for days

1743457202
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well today is the last day i can work on this full time and i feel like i wasted a month on learning zig that i haven't really learn much of

1743457204
Gliptic!~glip@2a01:4f8:c012:91f3::1
like, have you even looked for examples of how to use the python C API from zig?

1743457236
blurrycat!~blurrycat@user/blurrycat
stealth_: this would have been a lot easier if you had listened to all the advice that was given to you here

1743457247
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure where this example is, but most of the code i find online doesn't even work in new zig. 

1743457341
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
even if i was coding this in C i would have this project done! cause example/online doc.. so on.. it just works.

1743457350
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
zig is different most of those codes you see doesn't work.

1743457369
Gliptic!~glip@2a01:4f8:c012:91f3::1
very few of your problems had anything to do with zig

1743457445
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
anyways if you look at that code https://zigbin.io/205f5f in C you would just call line:43 as object type and it would be done in 5 seconds.

1743457513
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
all you so is call `sqe = io_uring_sqe(); sqe.ptr = io_uring_get_sqe(ring);` return that object and done.

1743457514
Gliptic!~glip@2a01:4f8:c012:91f3::1
#define PyObject_New(type, typeobj) ((type *)_PyObject_New(typeobj))

1743457520
Gliptic!~glip@2a01:4f8:c012:91f3::1
wow, such macro

1743457559
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am not looking at it as macro! i am looking at it as normal function.

1743457567
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not a normal function

1743457570
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
like normal ppl who use this would do.

1743457571
Gliptic!~glip@2a01:4f8:c012:91f3::1
either way, it's trivial

1743457580
Gliptic!~glip@2a01:4f8:c012:91f3::1
it only does a cast

1743457597
Gliptic!~glip@2a01:4f8:c012:91f3::1
you should not have any trouble calling this from zig

1743457645
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i can't call use PyObject_New i tried that many times, unless you mean i need to assign that as function and call it in zig

1743457679
Gliptic!~glip@2a01:4f8:c012:91f3::1
you can't use the function you're supposed to be using?

1743457724
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
give me a sec, let me code it and see what it says.

1743457725
Gliptic!~glip@2a01:4f8:c012:91f3::1
you could also call the class object itself

1743457834
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
pub const PyObject_New = @compileError("unable to translate C expr: unexpected token ')'");

1743457950
Gliptic!~glip@2a01:4f8:c012:91f3::1
look at the macro

1743458084
Gliptic!~glip@2a01:4f8:c012:91f3::1
are you going to give up because zig can't autoconvert it for you?

1743458148
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i have to give up on it anyways, since i been saying i don't have much time to work on it...

1743462108
grayhatter!~grayhatte@user/grayhatter
<stealth_> maybe you know what you are looking for, i don't.

1743462147
grayhatter!~grayhatte@user/grayhatter
I wonder if there's a connection here between this, and everyone telling you to read about the various aspects and systems, and documentation

1743462237
grayhatter!~grayhatte@user/grayhatter
<stealth_> [...] i feel like i wasted a month on learning zig that i haven't really learn much of 

1743462275
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, you gota stop twisting my words. 

1743462282
grayhatter!~grayhatte@user/grayhatter
I can't even...

1743462290
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i clearly didn't say that.

1743462323
grayhatter!~grayhatte@user/grayhatter
you said both... they're direct quotes

1743462336
ToxicFrog!~ToxicFrog@172-97-143-36.cpe.distributel.net
They're still on my screen.

1743462388
grayhatter!~grayhatte@user/grayhatter
I would say same to what ToxicFrog said, but where else would I have copied them from if not from IRC history

1743462424
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i meant like... if i had only learned zig i would have learnt more 

1743462440
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since i was learning capi and such, i didn't get a chance to learn zig more.

1743462493
grayhatter!~grayhatte@user/grayhatter
ahh, yeah, well... that is the downside to always refusing to read the stuff people suggest you to read

1743462564
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how is reading more about zig going to fix it can't deal with c marco problem?

1743462610
grayhatter!~grayhatte@user/grayhatter
lol, ok dude

1743462622
grayhatter!~grayhatte@user/grayhatter
nevermind, I take it back

1743462776
grayhatter!~grayhatte@user/grayhatter
Gliptic: I have to say, I'm a bit surprised that the zig translator couldn't auto convert this macro

1743462918
Drixtan!~Drixtan@user/Drixtan
O_O I've just learnt about that zig translate-c, grayhatter, thank you.

1743463036
grayhatter!~grayhatte@user/grayhatter
Drixtan: <3

1743463712
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how to do `(type *)` in zig? even in cython you can do <type*>

1743464916
torque!~tachyon@user/torque
@ptrCast 

1743464999
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
someone told me that doesn't type cast

1743465030
torque!~tachyon@user/torque
may i recommend you read the documentation https://ziglang.org/documentation/0.14.0/#ptrCast

1743465040
torque!~tachyon@user/torque
for old times sake

1743465071
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe they were talking about @as()

1743465111
torque!~tachyon@user/torque
there's also documentation for that https://ziglang.org/documentation/0.14.0/#as

1743465133
torque!~tachyon@user/torque
and indeed, it says it does "type coercion" which is somewhat different

