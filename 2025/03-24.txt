1742780830
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there simple function like `allocatorFunction(myStruct)` ? 

1742781304
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am thinking like malloc/free does anything like that exist in zig? seems like i have to pass this allocator around!

1742781515
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is this the only way? https://pedropark99.github.io/zig-book/Chapters/01-memory.html#the-create-and-destroy-methods

1742781523
grayhatter!~grayhatte@user/grayhatter
depending on python's memory model you probably need to use c_allocator

1742781540
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am setting memory in zig

1742781562
grayhatter!~grayhatte@user/grayhatter
if you don't need to use the c_allocator, then you can do whatever you'd like

1742781578
grayhatter!~grayhatte@user/grayhatter
I doubt setting is word you mean

1742781682
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
goal is to do something like this https://zigbin.io/354ac5 

1742781732
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Python only knows/works with `Ring` struct, zig deals with `IoUring` struct and sets/frees the memory

1742783319
torque!~tachyon@user/torque
there's not a global allocator in zig like malloc in c, though you could mimic it if you really wanted to

1742783346
torque!~tachyon@user/torque
but zig's allocator situation is way better than c so that would kind of defeat the point imo

1742783390
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well it might be way better but there is no example showing how actually to use it and online docs are pretty bad. 

1742783401
torque!~tachyon@user/torque
how to use what

1742783404
grayhatter!~grayhatte@user/grayhatter
torque: nah, he's only using zig as a thin wrapper for c + python

1742783408
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am one of those ppl that learn from looking at code vs reading about how it works.

1742783419
grayhatter!~grayhatte@user/grayhatter
and he's low on time, and has a really hard time understanding memory semantics

1742783427
torque!~tachyon@user/torque
good thing the standard library is open source so you can look at it

1742783429
torque!~tachyon@user/torque
and it is code

1742783434
grayhatter!~grayhatte@user/grayhatter
the expedient choice is c_allocator

1742783521
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looks like c_allocator is struct/class/object

1742783587
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also reading source isn't a good way to learn how to use something, just shows how it is being built.

1742783601
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have like maybe end of this month to play around with zig after that i wont have much time

1742783606
grayhatter!~grayhatte@user/grayhatter
> I learn best by reading the source

1742783619
torque!~tachyon@user/torque
<stealth_> i am one of those ppl that learn from looking at code <stealth_> also reading source isn't a good way to learn how to use something,

1742783621
torque!~tachyon@user/torque
which one is it

1742783622
grayhatter!~grayhatte@user/grayhatter
> reading the source is the worst way to learn sommething

1742783626
torque!~tachyon@user/torque
you can't have it both ways

1742783634
grayhatter!~grayhatte@user/grayhatter
is this real life .gif?

1742783670
torque!~tachyon@user/torque
the std lib is one of the best ways to learn zig currently, since it's the largest zig codebase currently available, to my knowledge

1742783670
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
code as an example code, not source code.

1742783674
torque!~tachyon@user/torque
and for the most part it is decent

1742783680
grayhatter!~grayhatte@user/grayhatter
I'm glad you saw that too torque...

1742783684
torque!~tachyon@user/torque
you're making a distinction without a difference

1742783699
grayhatter!~grayhatte@user/grayhatter
torque: there's a difference there

1742783718
torque!~tachyon@user/torque
God helps those who help themselves, etc.

1742783727
grayhatter!~grayhatte@user/grayhatter
he can ctrl + c, ctrl + v examples, which is harder to do with stdlib

1742783735
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you want to learn how to drive a car, are you going to look at engine drawing? man 

1742783739
torque!~tachyon@user/torque
pehraps you should try asking chatgpt then

1742783773
torque!~tachyon@user/torque
your metaphor would be much more apt if I had suggestd you read the compiler internals to learn the language

1742783779
torque!~tachyon@user/torque
please go back to the metaphor store and try again

1742783780
grayhatter!~grayhatte@user/grayhatter
that's what I said a long time ago

1742783782
grayhatter!~grayhatte@user/grayhatter
https://www.google.com/search?q=help+vampire

1742783846
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
are you ppl even trying to help or just constant criticize them for not knowing?

1742783858
torque!~tachyon@user/torque
you are not getting criticized for not knowing

1742783867
grayhatter!~grayhatte@user/grayhatter
I was chatting about something totally unrelated with a friend today and mentioned this to him. I was a lot less convinced until I read the fandom wiki, and was like... damn, it's a lot closer than I remember it being

1742783868
torque!~tachyon@user/torque
you are getting criticized for refusing to even try to learn on your own

1742783875
grayhatter!~grayhatte@user/grayhatter
^this

1742783895
grayhatter!~grayhatte@user/grayhatter
people here have been bending over backwards to help you understand something unrelated to zig

1742783897
torque!~tachyon@user/torque
you are getting criticized for rejecting useful knowledge pathways with glib responses, and being self-contradictary about it

1742783955
torque!~tachyon@user/torque
when someone asks a question in here I don't know the answer to, I usually look at either the langref or the stdlib

1742783971
torque!~tachyon@user/torque
there's an age-old saying about catching a man a fish vs teaching a man to fish

1742783974
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i do that and search online

1742783989
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
can't find the answer then i ask here, and i get read this or that comments. 

1742783996
torque!~tachyon@user/torque
and yet you seem to obstinately reject the latter approach quite frequently

1742784004
grayhatter!~grayhatte@user/grayhatter
no you don't

1742784031
grayhatter!~grayhatte@user/grayhatter
you've told both torque and myself that you don't/can't/have/won't read the langref

1742784063
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://ziglang.org/documentation/master/std/#std.heap.c_allocator this is whats there to read about

1742784080
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what the heck is that? i am suppose to figure out how to use that from that?

1742784159
grayhatter!~grayhatte@user/grayhatter
stealth_: that's stdlib docs, not the langref

1742784196
torque!~tachyon@user/torque
you would probably benefit from reading https://ziglang.org/documentation/0.14.0/#Memory

1742784197
grayhatter!~grayhatte@user/grayhatter
does anything like malloc/free exist in zig?

1742784206
grayhatter!~grayhatte@user/grayhatter
yes c_allocator

1742784217
grayhatter!~grayhatte@user/grayhatter
> For an allocator that directly calls malloc/free, see raw_c_allocator.

1742784252
grayhatter!~grayhatte@user/grayhatter
well what is this? `c_allocator: Allocator`, click on Allocator

1742784255
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
malloc/free is a function call this is not even a function

1742784257
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/std/#std.mem.Allocator

1742784260
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its noting alike 

1742784269
grayhatter!~grayhatte@user/grayhatter
lol

1742784278
grayhatter!~grayhatte@user/grayhatter
this is the behavior you're getting roasted for

1742784294
grayhatter!~grayhatte@user/grayhatter
> I've tried nothing, and I'm all out of ideas

1742784322
torque!~tachyon@user/torque
didn't you have code, like a week ago, that was using an allocator?

1742784335
torque!~tachyon@user/torque
how did you write that without understanding the `std.mem.Allocator` interface?

1742784348
grayhatter!~grayhatte@user/grayhatter
torque: write? uhhh.

1742784352
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i don't have context for things like allocator other the melloc/free 

1742784354
torque!~tachyon@user/torque
I'm not trying to be mean, I'm actually confused

1742784355
grayhatter!~grayhatte@user/grayhatter
ctrl + c, ctrl + v

1742784367
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no i haven't written anything with allocator yet 

1742784475
torque!~tachyon@user/torque
hmmm.... I could be misremembering but I seem to recall you were allocating a struct to pass from zig to python

1742784552
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
python assigns the memory itself for stuff like struct and what not, i want to remove control from python and have zig assign/manage pointers, since C is really bad and allows memory leak

1742784611
torque!~tachyon@user/torque
yes, I see I was conflating this with some other stuff posted recently, my apologies

1742784687
torque!~tachyon@user/torque
anyway, the recommendation generally stands: you should read the langref section on memory, as linked. allocators in zig are accessed through the `std.mem.Allocator` interface (which is what `std.heap.c_allocator` is)

1742784690
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is just made up code but goal is to do something like this https://zigbin.io/feb6ac

1742784706
torque!~tachyon@user/torque
since structs in zig can have methods, the allocator interface is a struct with methods

1742784713
grayhatter!~grayhatte@user/grayhatter
> i want to remove control from python and have zig assign/manage pointers, since C is really bad and allows memory leak

1742784722
grayhatter!~grayhatte@user/grayhatter
C actually has no memory leaks

1742784733
grayhatter!~grayhatte@user/grayhatter
it's people writing bad code that causes memory leaks

1742784741
torque!~tachyon@user/torque
zig will not manage pointers for you just like c will not

1742784743
grayhatter!~grayhatte@user/grayhatter
you can leak memory in zig, just as easily

1742784746
torque!~tachyon@user/torque
yep

1742784763
grayhatter!~grayhatte@user/grayhatter
and, you're using the c api for a lot of things, which means you also have to live with all the down sides of C too

1742784777
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ok well C is too perfect for me to use it.

1742784789
torque!~tachyon@user/torque
anyway, you can call `try std.heap.c_allocator.create(MyType)` to allocate a single copy of a type

1742784791
grayhatter!~grayhatte@user/grayhatter
ACTION nods

1742784802
torque!~tachyon@user/torque
which is, essentially a namespaced function

1742784837
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
see that would have saved us hrs of back of forth. cause there is no way docs mention .create like that. 

1742784845
torque!~tachyon@user/torque
you should be able to determine the things you need to know to free memory as well based on what we said in here

1742784858
torque!~tachyon@user/torque
 <grayhatter> https://ziglang.org/documentation/master/std/#std.mem.Allocator

1742784859
grayhatter!~grayhatte@user/grayhatter
given how you plan to use python, you might have to go through python's c-api for memory

1742784874
torque!~tachyon@user/torque
please try reading the docs

1742784880
torque!~tachyon@user/torque
it is right there on that page

1742784892
grayhatter!~grayhatte@user/grayhatter
stealth_: you literally linked to  https://pedropark99.github.io/zig-book/Chapters/01-memory.html#the-create-and-destroy-methods at the start of the conversation

1742784901
grayhatter!~grayhatte@user/grayhatter
how much of it did you read?

1742784906
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so struct in zig is like class in python? 

1742784932
torque!~tachyon@user/torque
please read the langref

1742784937
grayhatter!~grayhatte@user/grayhatter
^ this

1742784952
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
stealth_: have you used io_uring_prep_msg_ring_cqe_flags?

1742784969
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i been doing a TONE of reading, my eyes feel like its going to pop out.

1742784977
grayhatter!~grayhatte@user/grayhatter
rockorager: https://gr.ht/i/no.png

1742785021
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
? stealth_ clearly knows a lot about io_uring and I'm having an issue with it

1742785031
torque!~tachyon@user/torque
a struct in zig is just a data structure, but they act as a namespace and can have declarations, such as functions, in them as well

1742785037
grayhatter!~grayhatte@user/grayhatter
oh, well in that case, don't ask to ask, just ask

1742785067
torque!~tachyon@user/torque
there is no concept of inheritance or much of the other functionality associated with classes in python

1742785097
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I get EINVAL any time I attempt to set the CQE flags (I am emulating what liburing does using prep_rw)

1742785116
grayhatter!~grayhatte@user/grayhatter
the only thing they really share is . to access both members and decls

1742785136
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
If I don't set the CQE flags, the msg_ring SQE works as expected

1742785138
torque!~tachyon@user/torque
the functions in a struct can take an instance of that struct as the first argument, which, at a conceptual level, can be considered similar to the way that python methods work

1742785150
torque!~tachyon@user/torque
however, there are a lot of differences in the details

1742785225
grayhatter!~grayhatte@user/grayhatter
rockorager: are you sure sqe is valid, as well as the flags? also what flags are you setting?

1742785261
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, what flag are you setting? 

1742785287
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I tried 0b1000_0000 and also F_NOTIF

1742785301
grayhatter!~grayhatte@user/grayhatter
> Currently there are no valid flag modifiers, this field must contain 0.

1742785302
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I am sure the sqe is valid, if I comment out the line setting those flags it works as expected

1742785306
grayhatter!~grayhatte@user/grayhatter
these docs are horrible

1742785323
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
That is specific to the flags to modify the request

1742785334
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I am talking abotu the flags to put on the receiving loops CQE

1742785345
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, these are the only flags you can set for sqe https://github.com/axboe/liburing/blob/master/src/include/liburing/io_uring.h#L133-L146

1742785382
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'm not setting the SQE flags

1742785402
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/axboe/liburing/blob/master/src/include/liburing/io_uring.h#L120-L128 these

1742785412
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://man7.org/linux/man-pages/man3/io_uring_prep_msg_ring_cqe_flags.3.html

1742785417
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The third paragraph in DESCRIPTION

1742785450
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, that

1742785467
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
So the *cqe_flags version sets the file_index field on the SQE to those flags

1742785494
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
In zig, this is called "splice_fd_in", but that field is a union in liburing - it's the same one

1742785515
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I thought I could set "anything" on it and it would passthrough

1742785515
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
io_uring is really good when it comes to what it returns as error codes, the only issue would be you are giving it some wrong value somewhere. 

1742785561
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Hm

1742785591
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
do you have code ?

1742785604
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Let me push a branch

1742785611
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'm modifying libxev to use this

1742785634
grayhatter!~grayhatte@user/grayhatter
it bothers me that github calls io_uring_sqe a class

1742785659
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its a struct

1742785666
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
in python i have it as class

1742785683
grayhatter!~grayhatte@user/grayhatter
I know... that's why it bothers me that github calls it a class... 

1742785701
torque!~tachyon@user/torque
theres literally no difference btween c and c++

1742785721
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/rockorager/libxev/commit/dc094e6fc4381e87187ba74b236a3a7817e0eb3c

1742785822
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I might change the API to not accept that `code`, I can use that to distinguish the receiver

1742785831
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i wrong the socket test code for liburing but i haven't tested the msg_ring yet

1742785842
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
ok

1742785853
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
wrote*

1742785864
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I just learned about this feature today

1742785868
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
It's pretty amazing

1742785897
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya there are lots of features, i haven't even touched yet, some are super amazing 

1742785988
grayhatter!~grayhatte@user/grayhatter
rockorager: how did you calculate this offset is correct?

1742786005
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
in zig its an extern struct

1742786028
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/axboe/liburing/blob/9cafb728ac75978b9a3bf952580271f8e636ffd8/src/include/liburing/io_uring.h#L30

1742786039
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
The field after personality is this field

1742786041
grayhatter!~grayhatte@user/grayhatter
but zig.io_uring_sqe  != c.io_uring_sqe

1742786042
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
That's how I calculated it

1742786054
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it sucks i am still a noob with zig or else i would have properly helped. 

1742786107
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
grayhatter: std.os.linux.io_uring_sqe is extern

1742786157
grayhatter!~grayhatte@user/grayhatter
so that's why *you're* using splice_fd_in

1742786174
grayhatter!~grayhatte@user/grayhatter
but I don't see flags there

1742786256
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Huh?

1742786266
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Oh I see

1742786267
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
One second

1742786335
grayhatter!~grayhatte@user/grayhatter
https://man7.org/linux/man-pages/man3/io_uring_sqe_set_flags.3.html

1742786346
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I am emulating this function: https://github.com/axboe/liburing/blob/9cafb728ac75978b9a3bf952580271f8e636ffd8/src/include/liburing.h#L1210-L1217

1742786352
grayhatter!~grayhatte@user/grayhatter
F_NOTIF isn't in the list of permissable flags for SQE

1742786364
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I am not setting the flags for the SQE

1742786369
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I am setting flags for the CQE

1742786370
grayhatter!~grayhatte@user/grayhatter
uh

1742786379
grayhatter!~grayhatte@user/grayhatter
no?

1742786397
grayhatter!~grayhatte@user/grayhatter
                sqe.splice_fd_in = linux.IORING_CQE_F_NOTIF;

1742786431
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
These are flags to pass through to the completion

1742786437
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
They are not the flags for the SQE to use

1742786442
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Look at the function in liburing

1742786445
grayhatter!~grayhatte@user/grayhatter
if you have cqe, but it's named sqe, your code is nonsalavgeable, and I can't help you

1742786462
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Did you read the manpage?

1742786484
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
This is an SQE to put a CQE into another loop. You can set the flags on *that* CQE with that function in liburing

1742786499
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
That function puts those flags into the file_index field, which in zig is splice_fd_in

1742786509
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
These are flags that are passed to the CQE that go to the other loop

1742786514
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
*not* flags for this SQE

1742786520
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
he is talking about these flags https://github.com/axboe/liburing/blob/9cafb728ac75978b9a3bf952580271f8e636ffd8/src/include/liburing/io_uring.h#L443-L467

1742786581
grayhatter!~grayhatte@user/grayhatter
yes, I've followed what you said

1742786582
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
AFAICT, I am doing exactly what liburing is doing

1742786598
grayhatter!~grayhatte@user/grayhatter
https://man7.org/linux/man-pages/man3/io_uring_sqe_set_flags.3.html

1742786641
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, have you looked at example/test codes ?

1742786645
grayhatter!~grayhatte@user/grayhatter
explain why I should think what you're doing is correct, when F_NOTIF is not on this list, and the error is INVAL param, which is what I'd expect if F_NOTIF wasn't allowed

1742786676
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, that one is to set SQE flags, not CQE

1742786765
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
sqe = submission queue entry, cqe = completion queue entry.

1742786804
grayhatter!~grayhatte@user/grayhatter
ok, well I'm totally lost here, I'm gonna assume I'm smol brain to understand tonight, good luck rockorager I'd apprecate if you'd tag me when you figure it out

1742786840
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, when i want to learn how to use something i normally go through their example/test codes, you can do a search for `IORING_CQE_F_NOTIF` and it should pull up all the example/test codes

1742786895
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
https://github.com/axboe/liburing/blob/9cafb728ac75978b9a3bf952580271f8e636ffd8/test/msg-ring-flags.c#L65

1742786919
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
They use 0x42

1742786921
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'll try that

1742786976
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
on your local option of liburing do a search for IORING_CQE_F_NOTIF and you will find many example that might help you better

1742786993
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
local copy*

1742787078
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'll try that

1742787079
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Thanks

1742787082
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
0x42 didn't work :/

1742787133
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://github.com/axboe/liburing/blob/9cafb728ac75978b9a3bf952580271f8e636ffd8/examples/proxy.c#L1640-L1649

1742787454
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Oh there is a flag I have to set

1742787528
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you mean IORING_SEND_ZC_REPORT_USAGE

1742787558
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
IORING_MSG_RING_FLAGS_PASS

1742787560
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Yep, that worked

1742787656
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
IORING_OP_* I mean

1742787684
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
grayhatter: pinging you the answer. I needed to set the flag IORING_OP_MSG_RING_PASS on the SQE in addition to my custom flags

1742788145
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its nice to see zig community liking io_uring

1742788351
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I'm not sure if bun uses it, but both ghostty and tigerbeetle heavily use it

1742788392
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, once async/await gets implemented again, thats when it will really shine. 

1742788429
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have till then to get good at zig :D

1742788753
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
whats up with this code, does this person type code on their cell phone or something! lol https://github.com/mitchellh/libxev/blob/main/src/watcher/async.zig

1742789005
grayhatter!~grayhatte@user/grayhatter
talking smack about the author of libxev is wild

1742789045
grayhatter!~grayhatte@user/grayhatter
rockorager: thanks for the follow up :)

1742789064
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
I watched couple of his interview he seems cool, but that coding style though!

1742789120
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
bet if i coded like that you would be telling me to read about coding style syntax or something. 

1742789128
grayhatter!~grayhatte@user/grayhatter
no?

1742789143
grayhatter!~grayhatte@user/grayhatter
this is above average formatting

1742789214
grayhatter!~grayhatte@user/grayhatter
I disagree that 80 cols is enough I have my warning line at 96, try really hard to stay under it but I'll go to 120 if I feel really strongly it's better as 1 line

1742789231
grayhatter!~grayhatte@user/grayhatter
trying to keep width below 80 is actually good form

1742789246
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i use to have it 100 but with zig its up to 120 since it explicit 

1742789258
grayhatter!~grayhatte@user/grayhatter
a few of the comments break 80c, but shrug

1742789276
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am surprised zig coding format is ok with it. 

1742789296
grayhatter!~grayhatte@user/grayhatter
301 is a good example of what should be 1 line

1742789304
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i copied and pasted and ran zig format on it, no change!

1742789343
grayhatter!~grayhatte@user/grayhatter
yeah, see that's the nice thing about git, you can use hooks to have it auto format your code before committing it

1742789394
grayhatter!~grayhatte@user/grayhatter
I'd also bet his vim will run zig fmt on save as well

1742789465
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its too narrow, hard to read 

1742789468
grayhatter!~grayhatte@user/grayhatter
I really apprecate the comments in his vimrc too, more people should do this

1742789485
grayhatter!~grayhatte@user/grayhatter
stealth_: become better, then it'll be easier to read

1742789510
grayhatter!~grayhatte@user/grayhatter
(yeah, it doesn't map perfectly to how I scan code either)

1742789521
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there isn't a different between function header vs body, it gets confusing to read like that. 

1742789543
grayhatter!~grayhatte@user/grayhatter
I can't read code in [some common coding style]

1742789571
grayhatter!~grayhatte@user/grayhatter
is like saying "I can't understand what they're saying because of their accent"

1742789596
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
people coded like that back in the day cause they had 800x600 display monitors. 

1742789612
grayhatter!~grayhatte@user/grayhatter
chances are, you actually can, you just have to pay a little attention

1742789615
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
why linux had that 80 line rule (not sure if linux still has that)

1742789628
grayhatter!~grayhatte@user/grayhatter
stealth_: do you know why linux has that rule?

1742789655
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cause of small display monitor 

1742789659
grayhatter!~grayhatte@user/grayhatter
no

1742789659
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
back in the day 

1742789668
grayhatter!~grayhatte@user/grayhatter
because it forces you to write better code 

1742789687
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you mean in small chunks? 

1742789697
grayhatter!~grayhatte@user/grayhatter
80 being a common monitor width is why it's 80, instead of 70, or 90

1742789708
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono, have you looked at linux code? they are anything but better code. 

1742789718
grayhatter!~grayhatte@user/grayhatter
but that rule is nice because it makes it impossible to write deeply nested code

1742789746
grayhatter!~grayhatte@user/grayhatter
or obvious when you're doing something else dumb

1742789775
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well they added that rule cause ppl with wider monitor added longer line and it pissed of ppl with shitty monitors 

1742789777
grayhatter!~grayhatte@user/grayhatter
if it's not easy to write code within 80char, it's because you're writing bad code

1742789824
grayhatter!~grayhatte@user/grayhatter
it's much more likely that rule exists today because it's much eaiser to email code patches if you obey that rule

1742789843
grayhatter!~grayhatte@user/grayhatter
but it *still* exists because it does result in better code

1742789851
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
na, they just got used to it and a bug turned into a feature! lol 

1742789863
grayhatter!~grayhatte@user/grayhatter
if you say so

1742789878
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
at least that my take on it

1742790158
grayhatter!~grayhatte@user/grayhatter
> but all right-thinking people know that (a) K&R are right and (b) K&R are right.

1742790209
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
of course they are right! lol

1742790259
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
programmers are left brain thinkers.

1742790462
grayhatter!~grayhatte@user/grayhatter
andrewrk: any plans to write the K&R book for zig? even if the answer is just eventually someday?

1742793557
torque!~tachyon@user/torque
I think Loris is working on a zig book

1742793904
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Top 5 Fastest Programming Languages: https://www.youtube.com/watch?v=pSvSXBorw4A

1742794759
grayhatter!~grayhatte@user/grayhatter
micro benchmarks?

1742794817
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its a well done process to figure out the best, took over a year and anyone could submit faster code 

1742794829
grayhatter!~grayhatte@user/grayhatter
topic speed: options Java, C, Rust, Zig

1742794841
grayhatter!~grayhatte@user/grayhatter
well you can throw this whole video away because asm isn't first

1742794864
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
they even had ppl submit asm

1742794875
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but it didn't even make it to top 5

1742794890
grayhatter!~grayhatte@user/grayhatter
you get how that's not possible, right?

1742794919
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its cause no one could code it better! there is nothing more to it

1742794966
grayhatter!~grayhatte@user/grayhatter
so, your take away is that, Zig can generate faster asm then asm?

1742794982
grayhatter!~grayhatte@user/grayhatter
and not, they didn't have someone good enough at asm?

1742795026
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
technically asm would be faster! but someone needs to code that fast code without that what can it do? 

1742795033
grayhatter!~grayhatte@user/grayhatter
I can't tell if this guy is an LLM or not

1742795069
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
big time rust followers are real salty with the result 

1742795108
grayhatter!~grayhatte@user/grayhatter
I can't comment on the rust community without breaking channel rules

1742795130
grayhatter!~grayhatte@user/grayhatter
besides, I'm trying to grow as a person and start slightly fewer flamewars

1742795137
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am talking about ppl on youtube 

1742795146
grayhatter!~grayhatte@user/grayhatter
so was I

1742795245
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i had a good hunch zig would be fast in the future but didn't know it was already #1

1742795472
grayhatter!~grayhatte@user/grayhatter
oh

1742795481
grayhatter!~grayhatte@user/grayhatter
because zig is threaded, but asm isn't

1742795492
grayhatter!~grayhatte@user/grayhatter
yeah, it's a "cute" test

1742795515
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
zig didn't just win it was almost 2x faster than #2

1742796038
tsujp!497e1f7b6a@sourcehut/user/tsujp
bblack: ah i was very close the other day, I was doing:     var debug_allocator: std.heap.DebugAllocator = .init;

1742796057
tsujp!497e1f7b6a@sourcehut/user/tsujp
missing the (.{}) on the type information

1742796090
tsujp!497e1f7b6a@sourcehut/user/tsujp
Probably forgetting something but not used to "initialising" in the explicit type annotation part

1742797761
grayhatter!~grayhatte@user/grayhatter
how do I sort/find `zig targets` again?

1742797919
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, https://ziglang.org/documentation/master/#Compile-Variables

1742797946
grayhatter!~grayhatte@user/grayhatter
no, I need target triples

1742797988
grayhatter!~grayhatte@user/grayhatter
I know it's aarch64, but I haven't memorized exactly which is the magic one I want for a raspi

1742798500
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`zig build -Dtarget=aarch64-linux-gnu`

1742798632
grayhatter!~grayhatte@user/grayhatter
stealth_: 1) I know it's not gnu 2) I'm asking what the trick is to search through the list

1742798801
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am trying that ai gpt searches, lol they are pretty useless so far https://duckduckgo.com/?q=DuckDuckGo+AI+Chat&ia=chat&duckai=1

1742798816
tsujp!497e1f7b6a@sourcehut/user/tsujp
grayhatter: programmatically? i don't know; otherwise why not use grep (although that would require a source checkout of the zig version in-use of course)

1742798904
grayhatter!~grayhatte@user/grayhatter
tsujp: that's what I went with  using zig targets | grep aarch => `"aarch64"\n  "aarch64_be"\n  [...] .aarch64 = .{` what's inside these braces?

1742798990
tsujp!497e1f7b6a@sourcehut/user/tsujp
grayhatter: are yours actually redacted? mine are fully expanded on release 0.14.0

1742798995
tsujp!497e1f7b6a@sourcehut/user/tsujp
lemme paste, sec

1742799082
squeek502!~squeek502@user/squeek502
grayhatter, dumb solution i usually go with: `zig targets > targets.json` and then use my editor to search

1742799090
tsujp!497e1f7b6a@sourcehut/user/tsujp
holy crap 23,000 lines of output

1742799112
tsujp!497e1f7b6a@sourcehut/user/tsujp
grayhatter: https://gist.github.com/tsujp/4763e355890c6b7858e51da6bf4b073d

1742799181
grayhatter!~grayhatte@user/grayhatter
tsujp: https://gr.ht/i/tmp.png

1742799204
grayhatter!~grayhatte@user/grayhatter
squeek502: I would have messed around with `jq` but = .{ is zon not json

1742799255
tsujp!497e1f7b6a@sourcehut/user/tsujp
grayhatter: yeah if you want context lines pass -C (capital c) to grep with a number and it'll include N lines before and after, can also do B and A for before and after 

1742799257
grayhatter!~grayhatte@user/grayhatter
also, I hate json just enough to be unwilling to invest the time to actually learn jq

1742799260
squeek502!~squeek502@user/squeek502
oh is it zon now?

1742799261
tsujp!497e1f7b6a@sourcehut/user/tsujp
grayhatter: inside of aarch64: https://gist.github.com/tsujp/4763e355890c6b7858e51da6bf4b073d#file-gistfile1-txt-L3627

1742799271
grayhatter!~grayhatte@user/grayhatter
squeek502: I'm assuming?

1742799277
squeek502!~squeek502@user/squeek502
yep: https://github.com/ziglang/zig/pull/22939

1742799287
squeek502!~squeek502@user/squeek502
`zig targets > target.zon` then :)

1742799294
grayhatter!~grayhatte@user/grayhatter
lol :P

1742799301
grayhatter!~grayhatte@user/grayhatter
super helpful, thanks  :D

1742799333
grayhatter!~grayhatte@user/grayhatter
| less also exists too... but I was hoping someone had a trick/alias I could one line

1742799347
grayhatter!~grayhatte@user/grayhatter
or... you know zig targets might have some secrets to make this easy

1742799544
grayhatter!~grayhatte@user/grayhatter
weird, zig init doesn't generate a build.zig.zon file with a fingerprint

1742800049
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
run it again

1742800141
grayhatter!~grayhatte@user/grayhatter
ahh, you're right stealth_, I deleted the line because it also had a comment, good catch :)

1742800188
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
:)

1742800335
tsujp!497e1f7b6a@sourcehut/user/tsujp
i imagine there's an algorithm to display the target tree with common ancestors de-duplicated for a more compact display

1742800358
tsujp!497e1f7b6a@sourcehut/user/tsujp
since a lot of the information in the output (for me at least) is duplicated between adjacent nodes

1742800509
grayhatter!~grayhatte@user/grayhatter
someone needs to create an extlib for zig

1742800542
grayhatter!~grayhatte@user/grayhatter
there's a bunch of stuff I think should exist, but I don't think have a chance, nor do they belong in stdlib

1742800605
grayhatter!~grayhatte@user/grayhatter
things that also are hard to justify existing on their own

1742800640
tsujp!497e1f7b6a@sourcehut/user/tsujp
such as?

1742800703
grayhatter!~grayhatte@user/grayhatter
stuff like this https://srctree.gr.ht/repo/gpio

1742800774
grayhatter!~grayhatte@user/grayhatter
I have a bunch of VC lights connected to a relay on my raspi gpio. My next step is to alias these pins to human readable names so a can loop over arg to see what I should do with them

1742800838
grayhatter!~grayhatte@user/grayhatter
I also have underglow lights on the same system, which I have set to turn on and turn off during work hours, so I need to calculate the local timezone offset delta from UTC

1742800964
grayhatter!~grayhatte@user/grayhatter
I don't want to go searching for a add a dependency just to parse a zone info file

1742801010
grayhatter!~grayhatte@user/grayhatter
I'd like to know I can trust some community managed extlib and use `const ext = @import("ext");` and `const tzinfo = ext.tzinfo;` 

1742801245
grayhatter!~grayhatte@user/grayhatter
another example, a lot of RFCs

1742806845
blurrycat!~blurrycat@user/blurrycat
grayhatter: https://ziggit.dev/t/zq-command-line-zon-processor/8722

1742808836
ifreund!2940d10f8b@user/ifreund
someone should write a zon to json tool

1742810753
Earnestly!~earnest@user/earnestly
Although you might have to consider it an error if attempting to convert non-utf8 data, unless you can come up with a way to represent it. There is the fq(1) tool which might be a useful test bed for this

1742810791
Earnestly!~earnest@user/earnestly
(fq converts various formats to json so that you can then use jq to manipulate it before converting back)

1742816641
TheFox!~TheFox@user/TheFox
Hi

1742817246
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
grayhatter there is tzinfo parsing in the stdlib

1742817261
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I yoinked it for my time lib but it’s still in std

1742831774
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Woo, finally got around to updating my projects to zig 0.14

1742834866
grayhatter!~grayhatte@user/grayhatter
rockorager: oh, interesting

1742834887
grayhatter!~grayhatte@user/grayhatter
I missed it because it's called tz in std instead of std.time and has 0 documentation

1742834905
grayhatter!~grayhatte@user/grayhatter
strictly speaking, less useful than I'd have hoped

1742834910
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
feel free to copy the from zeit

1742834927
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
You can get zeit pretty minimal if you only want local time on linux

1742835156
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
rockorager, where you just adding that ring within ring feature for someone that needs it or do you actually have usecase for it? 

1742835165
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I have a use case for it

1742835186
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o nice, like ... 

1742835236
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also are you using it with futex2 ? 

1742835245
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
I have a server. it accepts connections then gives those off to threads to handle the work. The threads have their own io_uring to allow other async io work within a request

1742835294
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
This way, I can directly wakeup the worker threads via their io_uring instead of a threadpool or condition, etc

1742835332
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, it neat, there are lots of combination setup you can do with it. 

1742835333
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
No, not using futex2 - I am designing it such that each thread waits on copy_cqes

1742835432
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its neat. I haven't had the chance to play around with these features yet, just dealing with bugs and new implementation

1742835446
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
It's a really nice pattern

1742835462
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
It feels like using go channels in a way

1742835526
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have never coded in go so can't tell, i am not really a "programmer" i just do this for hobby and use in stuff i do . 

1742836495
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe after adding the whole network features io_uring can go into gpu :D :D :D

1742842150
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure why i am getting this error, i am not returning error! https://zigbin.io/27513d

1742842212
Gliptic!~glip@2a01:4f8:c012:91f3::1
yes, you are, that's what `try` does

1742842228
Gliptic!~glip@2a01:4f8:c012:91f3::1
try and catch are too different things

1742842234
Gliptic!~glip@2a01:4f8:c012:91f3::1
*two

1742842235
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
aren't i catching it and returning null ?

1742842241
Gliptic!~glip@2a01:4f8:c012:91f3::1
no, you are doing try

1742842248
Gliptic!~glip@2a01:4f8:c012:91f3::1
then separately you're doing catch

1742842252
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
hmm

1742842260
Gliptic!~glip@2a01:4f8:c012:91f3::1
there's no try-catch construct

1742842288
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how should i go about it

1742842295
Gliptic!~glip@2a01:4f8:c012:91f3::1
remove try

1742842304
Gliptic!~glip@2a01:4f8:c012:91f3::1
if it's catch you want to do

1742842312
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see

1742843364
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there are example that show `const ptr: *i32 = @ptrFromInt(0xdeadbee0);` shouldn't it be `u32`? since pointer is in `usize`

1742843390
grayhatter!~grayhatte@user/grayhatter
if only there was some sort of reference for the language that would explain these things

1742843473
grayhatter!~grayhatte@user/grayhatter
stealth_: usize is the number bits for your machine architecture

1742843490
grayhatter!~grayhatte@user/grayhatter
u32 is the number of bits of information at that pointer_address

1742843530
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, i am reading it as unsigned size is that wrong? 

1742843531
grayhatter!~grayhatte@user/grayhatter
e.g. the address for a us mail PO Box is [some very long address] even though there's only one letter in the box itself

1742843574
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono, i live in Canada

1742843600
grayhatter!~grayhatte@user/grayhatter
so the full type `*i32` which is the information for the 2 different subtypes is `*` and `i32`

1742843666
grayhatter!~grayhatte@user/grayhatter
`*` means pointer to memory, which is **NOT** usize, but has the same semantics as `usize` so it's always correct the same amount of information to swap between the two

1742843685
grayhatter!~grayhatte@user/grayhatter
and then there's 32 bits of data stored at that `*` memory address

1742843698
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am asking why it is `i32` and not `u32`

1742843704
Gliptic!~glip@2a01:4f8:c012:91f3::1
ACTION ponders a parachute analogy

1742843710
grayhatter!~grayhatte@user/grayhatter
it's `i32` because the most significant bit is if it's positive or a negative number

1742843724
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: because the example wanted a i32?

1742843736
Gliptic!~glip@2a01:4f8:c012:91f3::1
why should it be u32?

1742843771
grayhatter!~grayhatte@user/grayhatter
Gliptic: I'm fine with this because pointers are actually a zig thing, and he asked a question which clearly demonstrates an attempt at understanding it on his own

1742843782
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
since usize should be "unsigned size" and you saying i32 wouldn't it cause it to return wrong info. 

1742843792
Gliptic!~glip@2a01:4f8:c012:91f3::1
stealth_: but i32 has nothing to do with usize

1742843794
grayhatter!~grayhatte@user/grayhatter
stealth_: `*` is usize

1742843804
grayhatter!~grayhatte@user/grayhatter
`i32` is signed 32 bits

1742843812
Gliptic!~glip@2a01:4f8:c012:91f3::1
you can have a pointer to _any_ type

1742843825
grayhatter!~grayhatte@user/grayhatter
stealth_: consider *OtherType

1742843827
Gliptic!~glip@2a01:4f8:c012:91f3::1
they picked i32

1742843829
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, so "`*` is usize" i didn't know that.

1742843834
grayhatter!~grayhatte@user/grayhatter
is OtherType signed, or unsigned?

1742843855
grayhatter!~grayhatte@user/grayhatter
or is it impossible to tell?

1742843868
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i dono its all new to me

1742843876
grayhatter!~grayhatte@user/grayhatter
guessing is fine

1742845387
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
why https://zigbin.io/166b34

1742845421
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it should be `io_uring.ring_fd` but same error

1742845470
grayhatter!~grayhatte@user/grayhatter
stealth_: explain what you think the error says, and I'll give you the answer

1742845532
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, said it can't assign value to struct fields

1742845549
grayhatter!~grayhatte@user/grayhatter
no, that's not what the error says

1742845568
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats my understanding of it

1742845579
grayhatter!~grayhatte@user/grayhatter
right, I'm telling you you read it wrong

1742845593
grayhatter!~grayhatte@user/grayhatter
does that error say anything about assignemnt?

1742845622
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well it can't access the field

1742845628
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so it can't assign the value

1742845635
grayhatter!~grayhatte@user/grayhatter
exactly

1742845650
grayhatter!~grayhatte@user/grayhatter
why can't you access the field you know exists somewhere in there?

1742845652
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
but what does can't access field even mean, i gave the struct the memory and told it 1 create 1 struct.

1742845661
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no clue

1742845676
grayhatter!~grayhatte@user/grayhatter
yeah, your code looks mostly right, but you're missing a step

1742845708
grayhatter!~grayhatte@user/grayhatter
stealth_: no clue <- is the type of the thing the type you want it to be? or is it the wrong type?

1742845720
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i event tried var io_uring so its not mutable issue

1742845762
grayhatter!~grayhatte@user/grayhatter
yeah, it has nothing to do with mutability, it's a type issue, you're expecting a different type from the code you have

1742845783
grayhatter!~grayhatte@user/grayhatter
if you read the error, it even tells you zig thinks it's the wrong type

1742845877
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if i change the code to `const io_uring: c.io_uring` its error as well

1742845886
grayhatter!~grayhatte@user/grayhatter
as another clue, the code block on line 9 isnt' the way you want to do that

1742845960
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i had used try before and to fix that i changed, if you are thinking of that. 

1742845988
grayhatter!~grayhatte@user/grayhatter
yeah try mean if error return error, but you're not allowed to return an error from that function, so you have to do something different with the error

1742846012
grayhatter!~grayhatte@user/grayhatter
zig has a keyword for exactly what you want to do

1742846049
grayhatter!~grayhatte@user/grayhatter
the code you had before was more correct, you just used too many keywords

1742846100
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so `io_uring` in this case is both struct and error type, so i just need to convert it to 1 type? 

1742846128
grayhatter!~grayhatte@user/grayhatter
in other words, because that function can't return an error, you're not allowed to use try, but you can use the other error handling keywords

1742846161
grayhatter!~grayhatte@user/grayhatter
stealth_: that's exactly correct, you need to completely strip off the error type, so all you have left is the struct part. Then it'll work

1742846255
grayhatter!~grayhatte@user/grayhatter
well... then it'll compile, not sure if it'll work :D

1742846578
bw!sid2730@user/betawaffle
Does std.zig.* have anything for generating code from an ast?

1742846623
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, seems like such a hack, but ya it does compile and it does randomly error out, so its not there yet. 

1742846661
grayhatter!~grayhatte@user/grayhatter
which part seems like a hack?

1742846706
grayhatter!~grayhatte@user/grayhatter
bw: do you mean zig code, or something different?

1742846728
bw!sid2730@user/betawaffle
I mean generating zig code

1742846761
bw!sid2730@user/betawaffle
Like if I wanted to build up a switch statement and then dump it somewhere

1742846767
grayhatter!~grayhatte@user/grayhatter
bw: err, I meant to ask machine code from zig code

1742846798
bw!sid2730@user/betawaffle
Not machine code, code for humans

1742846802
grayhatter!~grayhatte@user/grayhatter
oh, you're asking if you can use std.zig.ast, to output something to a code.zig

1742846840
bw!sid2730@user/betawaffle
Yup

1742846862
grayhatter!~grayhatte@user/grayhatter
did you read the docs yet? https://ziglang.org/documentation/master/std/#std.zig.Ast.render looks like what you're asking for

1742846891
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, wrote something like this https://zigbin.io/89c575 sure it must have flaws, i will get back to fixing that once i figure out how to free the memory first

1742846891
bw!sid2730@user/betawaffle
Yeah I think that’s what I want

1742846940
grayhatter!~grayhatte@user/grayhatter
stealth_: I'm pretty positive that's not going to work the way you want

1742846990
grayhatter!~grayhatte@user/grayhatter
this is closer to what you're trying to do https://zigbin.io/f23223

1742847074
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, that looks cool, its new syntax for me. 

1742847094
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
let me try

1742847325
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, so this seems to work https://zigbin.io/ec1917

1742847393
grayhatter!~grayhatte@user/grayhatter
I have no idea what self.id is supposed to be, but I'd assume you want @intFromPtr(io_uring.ptr) 

1742847528
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i will know which one works after i get the free part done and actual test it in python side

1742847531
grayhatter!~grayhatte@user/grayhatter
just had to double check, it's the same thing

1742847534
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it might still be buggy 

1742847601
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well the goal is only to pass ptr as int to python, so as long as python knows, its just a object with id: usize field. this way C/Python wont mess with pointer data

1742848618
ikke!~kevin@alpine/developer/ikke
I'm debugging a build failure of ghostty on aarch64, but I have a hard time finding out what even is failing (the build output is rather terse, to be honest): https://tpaste.us/8BrO Any idea what is going wrong? I already tried all kinds of --verbose* options, but they just print commands, without any actual error messages

1742848654
ikke!~kevin@alpine/developer/ikke
This is the build script: https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/testing/ghostty/APKBUILD

1742848692
ikke!~kevin@alpine/developer/ikke
(zig 0.14.0)

1742848747
ikke!~kevin@alpine/developer/ikke
Already tried nuking ~/.cache/zig, to no avail

1742849943
andrewrk!~andrewrk@mail.ziglang.org
ikke: was anything printed above the build summary?

1742850001
ikke!~kevin@alpine/developer/ikke
https://tpaste.us/r58Q 

1742850080
ikke!~kevin@alpine/developer/ikke
This was with --verbose-cc and --verbose-lld enabled: https://tpaste.us/waqX

1742850136
ifreund!2940d10f8b@user/ifreund
you can copy that command that terminated unexpectedly, remove the --listen arg at the end, and run it manually

1742850148
ifreund!2940d10f8b@user/ifreund
it might be segfaulting for example

1742850165
ifreund!2940d10f8b@user/ifreund
in which case running it in gdb could be very helpful

1742850296
ikke!~kevin@alpine/developer/ikke
ifreund: indeed a segfault

1742850340
ikke!~kevin@alpine/developer/ikke
failed.show_face.run

1742850474
ikke!~kevin@alpine/developer/ikke
I have a coredump, but need to obtain debug symbols, hold on

1742851974
ifreund!2940d10f8b@user/ifreund
ikke: I'll be off to bed pretty soon, but please do open an issue with the stack trace when you get it :)

1742851990
ikke!~kevin@alpine/developer/ikke
ifreund: it's late for me as well

1742852084
ikke!~kevin@alpine/developer/ikke
waiting for zig to finish building

1742852323
andrewrk!~andrewrk@mail.ziglang.org
ikke: if the compiler is crashing, then a debug build of the compiler will yield a much more useful report

1742852339
ikke!~kevin@alpine/developer/ikke
andrewrk: you mean gcc?

1742852424
Gliptic!~glip@2a01:4f8:c012:91f3::1
you seem to be using `zig clang`, not gcc

1742852685
andrewrk!~andrewrk@mail.ziglang.org
ikke: your second paste reveals the following: error: the following command terminated unexpectedly: /usr/bin/zig build-exe ...

1742852709
andrewrk!~andrewrk@mail.ziglang.org
"terminated unexpectedly" means it crashed, in other words, it is a bug. the command is the zig compiler. I'm saying you will get a better bug report if you use a debug build of zig instead 

1742852798
ikke!~kevin@alpine/developer/ikke
andrewrk: you mean with CMAKE_BUILD_TYPE set to Debug?

1742853125
andrewrk!~andrewrk@mail.ziglang.org
yes, that's one way to do it

1742853195
squeek502!~squeek502@user/squeek502
ikke, if you have a stage3 compiler built, then it'll be faster to use the command from "Building from source after making local changes" here: https://github.com/ziglang/zig/wiki/Contributing#editing-source-code

1742853203
andrewrk!~andrewrk@mail.ziglang.org
if you plan on making changes to the source, then I would instead recommend to follow the tips here: https://github.com/ziglang/zig/wiki/Contributing#editing-source-code

1742853212
andrewrk!~andrewrk@mail.ziglang.org
squeek502: nice quickdraw :D

1742853221
squeek502!~squeek502@user/squeek502
:)

1742856458
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/30a5d0 zig mem error 

1742856482
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
line: 7 - 9 probably did it

1742856631
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i try the same trick here and it works fine https://zigbin.io/015597

1742858515
squeek502!~squeek502@user/squeek502
stealth_, free expects a slice (it needs to know the length)

1742858553
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
squeek502, o i c, i ended up change the code to using create/destroy, seems to have worked!

1742858853
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
even after you destroy() you can still access/modify ? 

1742859061
squeek502!~squeek502@user/squeek502
you can, but it's a use-after-free bug

1742859093
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that sucks, why would zig allow that? 

1742859136
squeek502!~squeek502@user/squeek502
because it's not feasible to detect it without something like rust's borrow checker or a runtime checker like valgrind which incurs a heavy performance penalty

1742859207
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it would at least be safe it all the data was erased.

1742859287
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
or better would be switch the pointer to null or something.

1742859457
squeek502!~squeek502@user/squeek502
with @ptrFromInt, you can always get a pointer to an arbitrary memory location and then attempt to access memory at that location in whatever way you want, so unsafety is always possible

1742859564
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that would be intentional, its common so someone to use a variable after it was deleted.

1742859674
squeek502!~squeek502@user/squeek502
right, i'm just saying that use-after-free will always be possible in zig, it's up to the programmer to figure out how best to avoid it

1742859826
squeek502!~squeek502@user/squeek502
it's possible zig will try to provide more tools to detect use-after-free, though

1742859880
squeek502!~squeek502@user/squeek502
some relevant issues: https://github.com/ziglang/zig/issues/2301 https://github.com/ziglang/zig/issues/3180

1742860044
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see, at least its a knows issue and looking/thinking of a solution... it would such if zig turns into other C and all this flaws running around.

1742860123
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
programming language should assume programmers are idiots! but give them options to unlock unsafe options vs making it default.

1742860733
Earnestly!~earnest@user/earnestly
stealth_: Ada has been here since the 80s

