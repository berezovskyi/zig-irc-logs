1742860906
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Earnestly, alright, not sure what the point is. for a modern programming language it needs to solve current problems.

1742860949
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
when C first came out it was perfect language cause it solved the problems of that time! after 50years it has fallen down.

1742860972
Earnestly!~earnest@user/earnestly
stealth_: The point is that no one actually cares about these programming ideals, because if they did they would have used Ada. Is vs. Ought: they care about solving things using tools they know, which is often just what they learned first. That's it.

1742861016
Earnestly!~earnest@user/earnestly
(There is no point in discussing this, nothing will change based on it)

1742861093
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if this Ada was such a good language it would have made a comeback... there are clearly issues, maybe something as simple as it being not fast enough! who knows.. 

1742861162
Earnestly!~earnest@user/earnestly
Yes, "who knows" indeed

1742861291
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Well i clearly don't, first time i heard of it. Most of the programming language out there are just syntax sugar, nothing really offering anything new/different. If you just want pretty code you can use Python its easy/slow/but nice to use/code in.

1742861343
Earnestly!~earnest@user/earnestly
Stop worrying about these topics

1742861386
Earnestly!~earnest@user/earnestly
Implement data structures perhaps, if you don't have an immediate use for zig as a vehicle to learn "algorithms + data structures = programs"

1742861463
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am learning zig, just started. i am planning on using it in low level hardware code, like cnc, ...

1742861522
Earnestly!~earnest@user/earnestly
Have you attempted to write a gcode interpreter (and possibly simulator, including 3d visualisation of tool pathing)

1742861579
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
no, that stuff is already done, i am not really talking about gcode, more like controlling/monitoring device 

1742861592
Earnestly!~earnest@user/earnestly
It doesn't matter if it has been done, do it again

1742861645
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well only if i find the need for it or else i am not planning on wasting my life :p i already have too much things on the plate

1742861697
Earnestly!~earnest@user/earnestly
If you weren't interested in wasting your life you probably wouldn't be opining on the philosophy of programming in #zig

1742861778
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that wouldn't be waste of life if it helps get closer to sophiy 

1742861802
Earnestly!~earnest@user/earnestly
nn

1742862189
torque!~tachyon@user/torque
<stealth_> i see, at least its a knows issue and looking/thinking of a solution... it would such if zig turns into other C and all this flaws running around.

1742862202
torque!~tachyon@user/torque
bad news for you

1742862224
torque!~tachyon@user/torque
this is an intentional design choice of the language

1742862288
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
beggars can't be choosers.

1742862362
andrewrk!~andrewrk@mail.ziglang.org
are y'all being nice to each other?

1742862385
torque!~tachyon@user/torque
hard to say

1742862406
andrewrk!~andrewrk@mail.ziglang.org
please try

1742862487
torque!~tachyon@user/torque
very well

1742863696
grayhatter!~grayhatte@user/grayhatter
> programming language should assume programmers are idiots!

1742863724
grayhatter!~grayhatte@user/grayhatter
uh... this sounds like a toxic relationship 

1742863730
grayhatter!~grayhatte@user/grayhatter
no thank you?

1742863767
grayhatter!~grayhatte@user/grayhatter
I'm not even sure I agree with torque, I don't think it's an intentional design choice. Zig makes it very easy to figure out when you're doing something wrong

1742864015
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, what if your code runs on hardware and every time you have a bug it blows up your hardware that cost tons of $ ?

1742864025
grayhatter!~grayhatte@user/grayhatter
zig's design choice was more along the lines, of never taking the resposnibility you how you should write your code

1742864037
grayhatter!~grayhatte@user/grayhatter
stealth_: is that real, or something you made up?

1742864071
grayhatter!~grayhatte@user/grayhatter
err... never taking the resposnibility of telling you, how you need to write your code

1742864103
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, few months ago my system blew up.. took my main drive and backup drive with it cause of bad kernel code somewhere, that must have kept spilling my drive till it burnt out.

1742864135
grayhatter!~grayhatte@user/grayhatter
stealth_: I'm going to assume it's just something you made up, but if you created some hardware, where when you run code, it doesn't like, it self destructs... that would be malware

1742864154
grayhatter!~grayhatte@user/grayhatter
and in some cases, might already be illegal in most places

1742864210
grayhatter!~grayhatte@user/grayhatter
stealth_: that's a really interesting story, but how did you prove it was faulty kernel code?

1742864215
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i am just saying... things like that does happen. ppl just blame it on faulty drive or whatever, never assume it could be a bug.

1742864244
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
kernel/software/distro, who knows.. it was one of those cause it took both my drives.

1742864255
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if it was just 1 could say it was just a bad drive. 

1742864272
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
when is the last time you heard someone lose their main/backup drive at same time? 

1742864276
grayhatter!~grayhatte@user/grayhatter
how did you prove it though?

1742864282
grayhatter!~grayhatte@user/grayhatter
oh, I hear about that all the time

1742864350
grayhatter!~grayhatte@user/grayhatter
about 4-8 times per year, I have a friend complain about some sort of simultaneous drive failue that takes out mulitple drives

1742864437
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well its most likely caused by some bad driver that doesn't account for certain cases, ... so having language be a bit more strict can help prevent such things.

1742864478
grayhatter!~grayhatte@user/grayhatter
generally, when assigning blame, and recommendation changes. I like to know the full root cause analysis

1742864524
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i have couple of dead drive if you wana go at it! :p 

1742864544
grayhatter!~grayhatte@user/grayhatter
stealth_: it's considered bad form to just make up random things and say "that must be the most likely cause" 

1742864562
grayhatter!~grayhatte@user/grayhatter
it's even worse if you then say and then say everything else everywhere for everything has to change because of it

1742864577
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it like erased partition table (or whatever) and nvme even has backup partition and took that out as well. 

1742864619
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am just giving you an example of how software can effect hardware.

1742864684
grayhatter!~grayhatte@user/grayhatter
except... you're also wrong to blame software for that

1742864713
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
software controls hardware 

1742864754
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
as i said if 1 drive died, i wouldn't blame software, but since both drive died at same time

1742864806
grayhatter!~grayhatte@user/grayhatter
all modern, reasonable file systems use journaling. so if you had 2 drives die, because of some kernel fault, that means the hardware too some garbage instruction, and overwrote data in mulitple places... That's not a driver/software failure, that's a firmware failure... but I also don't believe it happened as simply as your describing 

1742864846
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
anyways, https://zigbin.io/00a729 do you see any flaws in line: 11 & 34, that init function keeps randomly crashing give me "SystemError: <class 'liburing.io_uring'> returned NULL without setting an exception"

1742864846
torque!~tachyon@user/torque
my reply was more terse than strictly necessary, but manual memory management is definitely an intentional design choice of zig

1742864861
grayhatter!~grayhatte@user/grayhatter
you also didn't describe any steps you would have taken to prove it was a software failure 

1742864901
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i don't want to waste your time talking about it. 

1742864919
grayhatter!~grayhatte@user/grayhatter
torque: nah, I agree, but memory allocation isn't a defect of C

1742864937
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
firmware is also software

1742864993
grayhatter!~grayhatte@user/grayhatter
torque: you never directly answer any questions phrased remotely like "have you stopped breaking the law?"

1742865100
grayhatter!~grayhatte@user/grayhatter
that's the part I was objecting to, not the fact that zig has a pleasant memory management API

1742865196
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also what happens if you are driving a vehicle and you have a bug in your software! it can be so dangerous.

1742865231
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you see those tesla cars keep crashing like crazy cause of bugs. 

1742865243
grayhatter!~grayhatte@user/grayhatter
lmao

1742865255
grayhatter!~grayhatte@user/grayhatter
yes, memory saftey is why tesla cars crash

1742865282
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am talking bugs in general, could be anything

1742866988
torque!~tachyon@user/torque
I would answer with "I never started"

1742877415
grayhatter!~grayhatte@user/grayhatter
have I mentioned lately how much I enjoy writing zig?

1742890545
tsujp!497e1f7b6a@sourcehut/user/tsujp
zig gud

1742892525
tsujp!497e1f7b6a@sourcehut/user/tsujp
if addModule makes a module public in a packages module list what is the purpose of installArtifact? Is installArtifact to actually _consume_ (i.e. use) said public module?

1742893501
tsujp!497e1f7b6a@sourcehut/user/tsujp
Ah forgot, creating an installArtifact actually adds the thing to the list of stuff to install thus the zig build system will actually emit it

1742904495
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nothing really available for Arduino uno projects right? Zig might be a better language to learn the new generation then c++

1742910573
Earnestly!~earnest@user/earnestly
(Depends on your goals, everything uses C++ (even javascript doesn't really come close to the amount of long tail C++ code exists out there, running industrial equipment, weapons platforms, etc, etc.))

1742921238
blurrycat!~blurrycat@user/blurrycat
Does Zig change the permissions of the files it extracts from archives in build.zig.zon? I have a library there where I have different permissions on some files depending on whether I look into the folder I myself extracted from the .tar.gz, or if I look into ~/.cache/zig/p/

1742921275
blurrycat!~blurrycat@user/blurrycat
some files are supposed to be 0755 but they're 0644 instead in the zig cache

1742921298
blurrycat!~blurrycat@user/blurrycat
(This is a C library I have in my build.zig.zon)

1742921734
blurrycat!~blurrycat@user/blurrycat
https://github.com/ziglang/zig/issues/17463 this looks like it answers my question, Zig does change the permissions of the files it extracts from archives in build.zig.zon

1742921813
blurrycat!~blurrycat@user/blurrycat
this breaks tests in the C library (libgit2) unfortunately

1742927843
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, you know how you mentioned .prt yesterday? is that specific to allocators or anything like array

1742927915
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
.ptr*

1742928789
bblack!~bblack@wikimedia/bblack-WMF
stealth_: .ptr is for Slices, specifically.  a true slice type like "var foo: []u8", you can use foo.ptr (which is a [*]u8 many-item pointer to the storage the slice refs) and foo.len (usize slice element count)

1742928842
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
bblack, i see, thanks for your input

1742929294
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is there a way to find out what field something has like e.g .len  in python you can do dir(something) 

1742929406
bblack!~bblack@wikimedia/bblack-WMF
there's some type introspection stuff to iterate fields of a struct, etc.

1742929429
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o right. 

1742929432
bblack!~bblack@wikimedia/bblack-WMF
https://ziglang.org/documentation/master/#Type  @Type @typeInfo ETC

1742929438
bblack!~bblack@wikimedia/bblack-WMF
oops capslock :)

1742929479
bblack!~bblack@wikimedia/bblack-WMF
there's some stdlib helpers as well in https://ziglang.org/documentation/master/std/#std.meta

1742929518
bblack!~bblack@wikimedia/bblack-WMF
std.meta.fieldInfo, std.meta.fieldNames, etc..

1742929537
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thanks

1742933691
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if i have something like `const hello = [_]MyStruct{` and i do `hello.ptr` it is not considered array/slice? but if i do `a = hello[0..]; a.ptr` that works.

1742933893
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
why give .ptr only if its a slice? you can still do `hello.len` even if its just a struct array

1742933926
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
like is there something special that happens with slice to allow for .ptr ? 

1742934572
blurrycat!~blurrycat@user/blurrycat
any reason why we have std.os.linux.geteuid but not std.posix.geteuid?

1742934762
blurrycat!~blurrycat@user/blurrycat
stealth_: a slice is actually a many-items pointer that also tracks its length, hence the .ptr field

1742934910
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
blurrycat, ah

1742935057
blurrycat!~blurrycat@user/blurrycat
in your example, `hello` is an array (`[_]MyStruct`), `a` is a slice (`[]MyStruct`), and `a.ptr` is a many-items pointer (`[*]MyStruct`)

1742935064
blurrycat!~blurrycat@user/blurrycat
someone correct me if I'm wrong

1742935106
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
think u got it right

1742935140
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
one of the frustrating thing is most of the online docs/video,.. use old syntax and get very confusing. 

1742935199
blurrycat!~blurrycat@user/blurrycat
stealth_: the language reference is always up to date for the version you ask for, it's a very valuable resource

1742935241
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
so ppl here keeps saying :)

1742935273
blurrycat!~blurrycat@user/blurrycat
it's quite likely there's a reason for that ;)

1742936398
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
will read is eventually, i am in that coding mode, so don't want spend time reading, i did spend like a week reading/exercise/video but didn't really language ref. its not my learning style. 

1742936413
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o well its not a big deal will get the eventually. 

1742936461
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i also found out why the init function kept crashing, for every other function/method you return null/object but they for some reason made __init__ return 0/-1

