1759277713
deevus!~deevus@123.51.31.231
rvrb it's not exactly what you describe but have you seen https://lightpanda.io/ ?

1759277713
deevus!~deevus@123.51.31.231
Built with Zig too

1759282405
rvrb!~rvrb@156.146.51.229
Funnily that seems like the exact opposite; just the JavaScript engine and nothing else

1759283672
donpdonp!~donp@donp.org
deevus: thx for that link. good for browsing the source of a modern zig project.

1759283728
andrewrk!~andrewrk@mail.ziglang.org
long time no see donpdonp

1759283815
donpdonp!~donp@donp.org
andrewrk: /me hat tip. i was digging through long forgotten projects and thought id freshen up zootdeck to the 0.15 standard.

1759284419
JetpackJackson!739e7f3d14@user/JetpackJackson
It makes me happy to look at other people's zig code

1759285042
clevor!sid649024@id-649024.hampstead.irccloud.com
It is meant for AI workloads and web scraping, and that makes me uncomfortable.

1759285401
andrewrk!~andrewrk@mail.ziglang.org
me too, although, web scraping in general I would say is user-empowering 

1759285437
JetpackJackson!739e7f3d14@user/JetpackJackson
I meant in general but yeah seeing that it was for ai made me close the tab

1759286655
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hot dog, The Great std.debug Refactor fixed the websocket.zig thing! 🎉🎉🎉

1759286871
deevus!~deevus@123.51.31.231
They are looking for Zig programmers, for whatever that's worth. 

1759286898
deevus!~deevus@123.51.31.231
I don't have a fundamental with AI personally. Depends how it is used. 

1759286913
deevus!~deevus@123.51.31.231
Claude Sonnet 4.5 is actually not bad at Zig

1759286994
deevus!~deevus@123.51.31.231
rvrb One of the core developers of lightpanda did the writergate considered harmful blog post. 

1759287032
deevus!~deevus@123.51.31.231
Sorry, it was "Is Zig's New Writer Unsafe?"

1759287079
ezzieyguywuf!~Unknown@user/ezzieyguywuf
can someone explain to me the no LLM policy for e.g. bug reports and stuff? I don't understand "We are makers, not consumers"

1759287849
kenrap!~kenrap@user/kenrap
(I take it to mean, "put actual thought into what you do, don't do it mindlessly and blindly")

1759288306
andrewrk!~andrewrk@mail.ziglang.org
to outsource programming to an LLM is to give up your makership over the code, and to instead be a consumer of output being fed to you by someone else, with intentions misaligned with yours and those of the end user

1759288348
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: I think the concept of AI is cool, but Replika tried to guilt-trip me into using it more.  There is this diary feature where it summarizes what you talked about, but says it missed you if you don't use it for a day. My experience with Replika made me so uncomfortable that my brain considers distancing myself from AI safer.

1759288442
clevor!sid649024@id-649024.hampstead.irccloud.com
What kind of friend shares their diary with someone else when said diary could really be a tool to maniupulate?

1759288512
andrewrk!~andrewrk@mail.ziglang.org
it's not good to give tech companies access to your private diary

1759288578
clevor!sid649024@id-649024.hampstead.irccloud.com
No, it was the AI's "private" diary.

1759288593
clevor!sid649024@id-649024.hampstead.irccloud.com
which is even worse

1759288674
andrewrk!~andrewrk@mail.ziglang.org
the code we write is eligible for being training data for LLMs. LLM output is not. think about that for a moment. that is what "we are makers, not consumers" means

1759288885
ezzieyguywuf!~Unknown@user/ezzieyguywuf
i see

1759288887
ezzieyguywuf!~Unknown@user/ezzieyguywuf
thanks for elaborating

1759292777
longlonglongint!~longlongl@user/longlonglongint
is there any way to initialize a []u8 with a string literal or am i gonna have to memcpy it from a [_:0]const u8

1759293233
squeek502!~squeek502@user/squeek502
longlonglongint, string literals live in the data section of the binary, so it must be const since you can't mutate those bytes, so a string literal will coerce to `[]const u8` but not `[]u8`

1759293250
longlonglongint!~longlongl@user/longlonglongint
dang

1759293265
squeek502!~squeek502@user/squeek502
you might be looking for `Allocator.dupe` if you need it to be mutable

1759293408
squeek502!~squeek502@user/squeek502
or you can get a mutable array by doing `var foo = "string literal".*` and then get a []u8 from that: `var bar: []u8 = &foo;`

1759293507
longlonglongint!~longlongl@user/longlonglongint
wow

1759293511
longlonglongint!~longlongl@user/longlonglongint
that looks kinda funny syntax wise

1759293537
longlonglongint!~longlongl@user/longlonglongint
a hundred lines of \\ and then a .*;

1759346029
hadronized!~hadronize@2001:41d0:a:fe76::1
I sometimes wonder whether it would be a good or bad thing to have unnamed function syntax (without captures, of course)

1759346077
hadronized!~hadronize@2001:41d0:a:fe76::1
I often feel that a function taking a fn(i32) i32 should be able to be called with foo(fn(x: i32) i32 { return x + 1; })

1759346153
hadronized!~hadronize@2001:41d0:a:fe76::1
not having to deal about captures would still make such a syntax a net benefit over the current situation where you have to define a function just to be called one, or to use the annonymous struct trick (which IIRC doesn’t work all the time or something something?)

1759346352
andrewrk!~andrewrk@mail.ziglang.org
it irks me when people say "doesn't work" with no further details

1759346799
hadronized!~hadronize@2001:41d0:a:fe76::1
I don’t have much info on that unfortunately, because I never faced issues with those, but I remember people stating that it’s scoped only to comptime 

1759346810
hadronized!~hadronize@2001:41d0:a:fe76::1
(hence the something something)

1759346862
hadronized!~hadronize@2001:41d0:a:fe76::1
is the idea of unnamed functions itching you too, andrewrk? I completely understand you don’t want closures; I don’t want either, captures make everything so much harder to understand

1759346873
hadronized!~hadronize@2001:41d0:a:fe76::1
but I only see good things about unnamed functions

1759346895
torque!~tachyon@user/torque
what is good about unnamed functions?

1759346900
hadronized!~hadronize@2001:41d0:a:fe76::1
besides, maybe, turning APIs a bit too much on the « function as values » side, which I could understand is weird

1759346910
hadronized!~hadronize@2001:41d0:a:fe76::1
torque: not having to define functions for a single call site

1759346917
hadronized!~hadronize@2001:41d0:a:fe76::1
or use a confusing trick with a struct

1759346921
torque!~tachyon@user/torque
your example above would be much more readable if you had `fn increment(x: i32) i32...` and called `foo(increment)`

1759346940
hadronized!~hadronize@2001:41d0:a:fe76::1
torque: I’m thinking about some common operations like sortBy

1759346956
hadronized!~hadronize@2001:41d0:a:fe76::1
where you might want to pass a function which implementation might be required only once

1759346966
torque!~tachyon@user/torque
calling it a "trick" is somewhat disingenuous, since it's a standard syntactic construct

1759346993
hadronized!~hadronize@2001:41d0:a:fe76::1
I mean trick in the sense that it requires a struct, to implement a single function call, which is not very natural to think about

1759347005
torque!~tachyon@user/torque
I'd argue that even in that case, naming the function makes sense

1759347017
hadronized!~hadronize@2001:41d0:a:fe76::1
hm

1759347030
hadronized!~hadronize@2001:41d0:a:fe76::1
it might be a bias I have regarding functional programming for sure

1759347044
hadronized!~hadronize@2001:41d0:a:fe76::1
I’m interested in all opinions on the matter, because I often feel that I could use unnamed functions

1759347076
torque!~tachyon@user/torque
I'll agree that `struct { fn foo(...) {...} }.foo` is not particularly obvious if you're not familiar with the language

1759347097
hadronized!~hadronize@2001:41d0:a:fe76::1
torque: maybe you do know; where is that construct not allowed?

1759347110
hadronized!~hadronize@2001:41d0:a:fe76::1
I read that this struct-based approach doesn’t apply in some situations

1759347114
hadronized!~hadronize@2001:41d0:a:fe76::1
but I do not recall which ones

1759347161
torque!~tachyon@user/torque
I have no clue, I'd expect it to work pretty much everywhere

1759347259
hadronized!~hadronize@2001:41d0:a:fe76::1
okay, fair enough

1759347262
torque!~tachyon@user/torque
though normally you'd be better off just defining the function within the file scope unless it needs to close over some comptime values. Unfortunately, supported or not, anonymous functions seem to imply capturing semantics

1759347280
torque!~tachyon@user/torque
since that's how they work in pretty much all dynamic languages

1759347300
hadronized!~hadronize@2001:41d0:a:fe76::1
comptime semantics?

1759347372
torque!~tachyon@user/torque
what I mean is that if anonymous function declarations existed, I would expect them to be able to capture runtime values, like C++ lambdas. otherwise they're just a normal function

1759347399
hadronized!~hadronize@2001:41d0:a:fe76::1
even with the syntax I suggested?

1759347399
torque!~tachyon@user/torque
I'm not advocating for the feature, I think c++ lambdas are really overused because c++ is a poorly designed mess

1759347421
hadronized!~hadronize@2001:41d0:a:fe76::1
yeah, coming from Rust — which has closures with captures and move semantics — I think it should not be in Zig

1759347427
hadronized!~hadronize@2001:41d0:a:fe76::1
because it’s overly complicating things for sure

1759347452
hadronized!~hadronize@2001:41d0:a:fe76::1
but having a fn() {} syntax instead

1759347469
hadronized!~hadronize@2001:41d0:a:fe76::1
I see your point about capturing and I would feel the same if we re-used the capture syntax for ifs and while

1759347473
hadronized!~hadronize@2001:41d0:a:fe76::1
(and switch)

1759347479
torque!~tachyon@user/torque
I mean, your syntax is just a normal function declaration, except without a name, and jammed into somewhere that one would not normally expect to find a function call

1759347490
torque!~tachyon@user/torque
er, normally expect to find a function definition

1759347505
hadronized!~hadronize@2001:41d0:a:fe76::1
it somehow makes sense to me though

1759347533
hadronized!~hadronize@2001:41d0:a:fe76::1
a bit the same way we can return anonymous types with return struct {}

1759347562
hadronized!~hadronize@2001:41d0:a:fe76::1
I remember reading a (somewhat) related discussion about why function are not already anonymous and assigned to const, like the rest of the language

1759348341
torque!~tachyon@user/torque
probably the famous #1717 (https://github.com/ziglang/zig/issues/1717)

1759348727
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am still trying to port over to 0.15.1+ without usingnamespace https://zigbin.io/a114ac

1759348842
torque!~tachyon@user/torque
is there a conceptual problem you're having?

1759348903
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well i tried to port it to using `addTranslateC` for local library it "works" (i think) but for system library don't think it does work cause how do i include "Python.h" for example?

1759348969
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
something along the line of https://zigbin.io/1013bc but it fails to build

1759349368
torque!~tachyon@user/torque
I mean, the simple solution is to bind it to a name `pub const includes = @cImport(...)` and then use that name `const c = @import("./c.zig").includes;` or whatever

1759349416
lemons!~doggie@user/doggie-:49517
just joined, what was the question?

1759349418
lemons!~doggie@user/doggie-:49517
curious

1759349443
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ya, i did that as well but i still get compiler errors with that as well. 

1759349509
torque!~tachyon@user/torque
I haven't what are the compiler errors

1759349520
torque!~tachyon@user/torque
I am good at typing

1759349665
torque!~tachyon@user/torque
I haven't really looked into the translate-c build system integration, but afaik it is not yet at the point where it can cover all translate-c use cases

1759349690
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/4f1188

1759349733
torque!~tachyon@user/torque
otherwise https://github.com/ziglang/zig/issues/20630 would be closed

1759349779
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
not sure why they removed `usingnamespace` without fully being able to cover all use-cases!

1759349833
torque!~tachyon@user/torque
that error message is completely useless. try running the command that it said failed without `--listen=-` at the end and see if it gives you a useful error

1759349874
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how do i do that?

1759349875
andrewrk!~andrewrk@mail.ziglang.org
stealth_: you have a use case not listed here? https://github.com/ziglang/zig/issues/20663

1759349918
torque!~tachyon@user/torque
I recommend literally copying and pasting the command into your shell

1759349979
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, i dono, i have https://zigbin.io/a114ac which i would use as `const c = @import("c.zig");` and now i can't even build trying to move it over to using `addTranslateC`

1759349981
torque!~tachyon@user/torque
I think the use-case is covered but there's an unrelated (or at least different) problem you're encountering

1759350006
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that could be

1759350078
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, `zig build -fincremental -freference-trace=7 --summary all` this is what i run

1759350104
torque!~tachyon@user/torque
have you tried without `-fincremental`

1759350124
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes, let me try again

1759350126
torque!~tachyon@user/torque
also, the command I was referring to was the one that actually failed, i.e. `~/Downloads/zig-x86_64-linux-0.16.0-dev.457+f90510b08/zig build-lib -freference-trace=7 -I/usr/include/python3.13 -luring-ffi -ODebug -I ~/Liburing/Python/Liburing/lib/liburing/src/include -L ~/Liburing/Python/Liburing/lib/liburing -Mroot=~/Liburing/Python/Liburing/src/liburing/root.zig -lc --cache-dir .zig-cache

1759350128
torque!~tachyon@user/torque
--global-cache-dir ~/.cache/zig --name uring -dynamic --zig-lib-dir ~/Downloads/zig-x86_64-linux-0.16.0-dev.457+f90510b08/lib/ -fincremental --listen=-`

1759350159
torque!~tachyon@user/torque
you know, the one right below the `error: the following command exited with error code 1:` message

1759350178
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is a lot of message let me post it

1759350245
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/280c7e it goes on and on but i cut if off to only bottom error so you can read it. 

1759350267
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ran it with only `zig build --summary all`

1759350499
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
this is the error i get when i try to use `addTranslateC` way https://zigbin.io/afafff the error isn't helpful to whats wrong with it so i can solve it. 

1759350503
ezzieyguywuf!~Unknown@user/ezzieyguywuf
my package manager's llvm was too old to build zig, so I downloaded the latest release tarball and extracted to /opt and I'm trying to build zig with that. I invoked cmake with e.g. -DCMAKE_C_COMPILER=/opt/llvm-21.1.2/bin/clang and I had to tell it to use lld too, but I'm still struggling with the last step, e.g. using zig2 to build the stage3 zig. the failures are link-time, e.g. "error: ld.lld: 

1759350509
ezzieyguywuf!~Unknown@user/ezzieyguywuf
undefined symbol: operator new(unsigned long)" - is there documentation on how I should do this? or is the cmake supposed to Just Work and maybe I'm holding it wrong?

1759350568
andrewrk!~andrewrk@mail.ziglang.org
stealth_: the solution is trivial. pub const c = @cImport(...);

1759350578
rhizoome!ganwell@user/rhizoome
ezzieyguywuf: you could look what zig-bootstrap does: https://github.com/ziglang/zig-bootstrap

1759350583
andrewrk!~andrewrk@mail.ziglang.org
on the other side, const c = @import("c.zig").c;

1759350604
ezzieyguywuf!~Unknown@user/ezzieyguywuf
rhizoome: I'll take a look thanks

1759350619
andrewrk!~andrewrk@mail.ziglang.org
rhizoome: that's not generally the best starting point for building zig from source. the best starting point is https://github.com/ziglang/zig/wiki/Building-Zig-From-Source

1759350632
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, that was the first thing i tried and it was erroring out big time. 

1759350679
andrewrk!~andrewrk@mail.ziglang.org
stealth_: please remember to always include error messages when you ask for help and mention that something "doesn't work" (or in this case "erroring out big time")

1759350679
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, this is what i get when i tried it https://zigbin.io/280c7e

1759350732
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hah, this must be my problem "compiled with the same gcc or clang version above" due to precompiled llvm 🤦

1759350742
andrewrk!~andrewrk@mail.ziglang.org
stealth_: this is completely unrelated to usingnamespace

1759350743
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I was trying to avoid building llvm, but obvs I'll just have to do that

1759350758
andrewrk!~andrewrk@mail.ziglang.org
stealth_: this is due to https://github.com/ziglang/zig/pull/24497

1759350767
rhizoome!ganwell@user/rhizoome
ezzieyguywuf: oh, sorry I thought you where building llvm. Yes in that case follow andrews link,

1759350768
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, i have tried both is what i am saying and both gives me errors

1759350807
ezzieyguywuf!~Unknown@user/ezzieyguywuf
rhizoome: I'm gonna have to build llvm since my package manager's is too old, so the like you provided will be helpful

1759350878
andrewrk!~andrewrk@mail.ziglang.org
ezzieyguywuf: I disagree, you shouldn't start there for building llvm

1759350917
rhizoome!ganwell@user/rhizoome
ezzieyguywuf: in my distro I take the package definition of llvm and increase the version number and let the distros build-system build llvm

1759350931
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ezzieyguywuf, did you now watch that video i linked the other day? why you trying to compile? you can have zig download/install/running in < 5min. 

1759350974
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ezzieyguywuf, https://www.youtube.com/watch?v=MMtvGA1YhW4

1759350982
ezzieyguywuf!~Unknown@user/ezzieyguywuf
andrewrk: I found https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#posix from the link you shared

1759351015
ezzieyguywuf!~Unknown@user/ezzieyguywuf
stealth_: I watched the video, but I want a newer version of zig.

1759351058
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ezzieyguywuf, just use the "master"

1759351063
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://ziglang.org/download/

1759351079
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I want newer than that lol

1759351091
andrewrk!~andrewrk@mail.ziglang.org
ezzieyguywuf: yes that wiki link is a good place to start

1759351093
ezzieyguywuf!~Unknown@user/ezzieyguywuf
anyway, I also want to contribute to zig, so I need to be able to build it

1759351100
ezzieyguywuf!~Unknown@user/ezzieyguywuf
andrewrk: thanks

1759351141
andrewrk!~andrewrk@mail.ziglang.org
this has highest likelihood of succeeding without problems and if you do hit a problem it should be easy to diagnose

1759351162
ezzieyguywuf!~Unknown@user/ezzieyguywuf
sg I'll post in here if I run into a problem

1759351172
andrewrk!~andrewrk@mail.ziglang.org
👍

1759351177
torque!~tachyon@user/torque
stealth_, the issue that Andrew linked is that the translate-c backend changed from llvm to arocc in recently. Have you tried actually building with 0.15.1 instead of a random version of 0.16-dev?

1759351219
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, yes, tried 0.15.1 as well but moved to dev to see if would fix the mess

1759351232
andrewrk!~andrewrk@mail.ziglang.org
stealth_: more specifically you are hitting https://github.com/ziglang/zig/issues/25431

1759351264
andrewrk!~andrewrk@mail.ziglang.org
I don't think you tried the simple usingnamespace fix combined with 0.15.1

1759351311
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have

1759351358
andrewrk!~andrewrk@mail.ziglang.org
more specifically, I don't think you got this output: https://zigbin.io/280c7e

1759351399
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
give me a sec let me try it will 0.15.1

1759351406
andrewrk!~andrewrk@mail.ziglang.org
common mistake people make is trying too many things at once

1759351419
andrewrk!~andrewrk@mail.ziglang.org
this is why torque helpfully suggested sticking with 0.15.1 when asking for help

1759351720
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, so tried it with 0.15.1 at first i was getting error it had to do with `callconv(.C)` so changed it to `callconv(.c)`, so no more error and it did compile! :D

1759351797
andrewrk!~andrewrk@mail.ziglang.org
nice. I suggest to stick with tagged versions unless you want to help out with zig development

1759351798
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if the build give you proper error message you can quickly fix the mess, but with 0.16.0-dev it wasn't giving the same error message.

1759351823
andrewrk!~andrewrk@mail.ziglang.org
(also when upgrading it's handy to do 1 version at a time)

1759351849
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
true, will do. you probably right, i might have tried too many things.

1759351916
ezzieyguywuf!~Unknown@user/ezzieyguywuf
any reason not to try with llvm 21.1.2?

1759351948
andrewrk!~andrewrk@mail.ziglang.org
recommended to use tip of release/21.x

1759351964
ezzieyguywuf!~Unknown@user/ezzieyguywuf
k

1759351988
ezzieyguywuf!~Unknown@user/ezzieyguywuf
https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#posix this mentioned 20.x which is why I was looking elsewhere

1759352024
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
`.use_llvm = false,` works as well! does that mean llvm has close to being removed from zig? 

1759352220
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/download/0.15.1/release-notes.html#x86-Backend

1759352225
ezzieyguywuf!~Unknown@user/ezzieyguywuf
stealth_: for the x86_64 backend, this switched to the self-hosted backend in 0.15.1 https://ziglang.org/download/0.15.1/release-notes.html#x86-Backend

1759352232
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah, yea what andrewrk said lol

1759352312
rhizoome!ganwell@user/rhizoome
ezzieyguywuf: the readme will tell you the current llvm version. the wiki might diverge.

1759352338
ezzieyguywuf!~Unknown@user/ezzieyguywuf
👍

1759352358
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
andrewrk, man that's freaking awesome!!! congratulations, that's a huge accomplishment.

1759352384
andrewrk!~andrewrk@mail.ziglang.org
thank you, kudos to jacobly (not currently present) for the bulk of the work on that backend

1759352436
ezzieyguywuf!~Unknown@user/ezzieyguywuf
stealth_: your name looks familiar, where you ever active in #gentoo-chat?

1759352473
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ezzieyguywuf, no, i was mostly on #python for many years (hardly on it nowadays)

1759352502
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ah nvm then

1759353083
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how would you make this ``.root_source_file = b.path("Python.h")`` use system `/usr/include/python3.13/Python.h` ?

1759353171
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i like the `b.addTranslateC()` way, since its more robust, wondering if i can still use it. 

1759356537
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
fyi, this looks like its working `b.addTranslateC( .{ .root_source_file = .{ .cwd_relative = "/usr/include/python3.13/Python.h" }` not sure if its a good idea to hard-code header like that.  

1759360031
ezzieyguywuf!~Unknown@user/ezzieyguywuf
zig build remarkably quickly

1759360038
ezzieyguywuf!~Unknown@user/ezzieyguywuf
specially compared to llvm lol

1759361527
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what llvm? already forgotten. I am moving my python library to use zig back-end and also using zig as compiler.

1759361575
ezzieyguywuf!~Unknown@user/ezzieyguywuf
what std.compress.flate.Container is most analagous to the old default e.g. prior to the new parameter in std.compress.flate.Compress.init()

1759362007
deevus!~deevus@123.51.31.231
ezzieyguywuf Zig uses the self-hosted backend in debug mode only I believe

1759362022
deevus!~deevus@123.51.31.231
Release builds will be slower and using LLVM

1759362078
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hm, i didn't find any references to std.lib.compress.flate.Compress.container, at least using zls and some grepping

1759362154
ezzieyguywuf!~Unknown@user/ezzieyguywuf
deevus: I'm doing a release build, per https://github.com/ziglang/zig/wiki/Contributing#editing-source-code

1759362172
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I thought it was pretty fast lol, though admittedly the last part, linking stage3 or w/e, did take a bit

1759362201
deevus!~deevus@123.51.31.231
Ah, when you said "zig build" I thought you meant building a zig project, not zig itself

1759362278
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh nvm I found where it's used

1759362295
ezzieyguywuf!~Unknown@user/ezzieyguywuf
deevus: ah yea I meant to say "builds" but then I guess that's still ambiguous lol

1759362332
deevus!~deevus@123.51.31.231
All good!

1759362383
ezzieyguywuf!~Unknown@user/ezzieyguywuf
k found it, the old code stored this in .hasher, and the default came from std.compress.flate.Compress.Options, and it defaults to raw

