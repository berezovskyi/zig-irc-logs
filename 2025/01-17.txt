1737077400
raceready!uid684861@user/raceready
good evening all

1737081173
raceready!uid684861@user/raceready
The other night I asked if zig has an official package registry site like crates.io, and the response was 'no'.  Are there any plans for one?

1737081753
reykjalin!7e28cf3a41@user/reykjalin
I doubt it. the zig build system can operate with a URL to a zip or git url+hash. I fully expect that to be the primary way to ‚Äúdistribute‚Äù libraries and packages, if you can even call that ‚Äúdistributing‚Äù

1737081808
reykjalin!7e28cf3a41@user/reykjalin
you just `zig fetch [--save] <url>` to download a package for your project

1737081957
raceready!uid684861@user/raceready
it's more about discovery

1737081971
raceready!uid684861@user/raceready
and what packages the community are actually using

1737082033
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ziglist.org is pretty good

1737082092
raceready!uid684861@user/raceready
and having a trusted source.  being able to fetch from something like GitHub is fine, but the author of a widely used package can decide one day that they just want to take it down, causing some pretty serious harm to projects relying on that package.

1737082216
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I think zig is not trying to solve that problem

1737082297
raceready!uid684861@user/raceready
I guess I should have phrased that as, "does the Zig Foundation" have any plans to do so? If it does and hasn't started the project yet, I'd like to volunteer some time towards it.

1737084004
andrewrk!~andrewrk@mail.ziglang.org
no there are explicitly no plans for it, the plan is to rely on decentralization

1737084062
andrewrk!~andrewrk@mail.ziglang.org
if you're concerned about package fetching uptime, that problem is also a problem with a centralized solution, and in both cases the solution is mirrors

1737084076
andrewrk!~andrewrk@mail.ziglang.org
arguably decentralization addresses that use case more robustly

1737084124
andrewrk!~andrewrk@mail.ziglang.org
personally I don't really get what the fuss is about a package being taken down, it's extremely unlikely that there are no copies available on the internet. that kind of outage is usually resolved within minutes

1737084155
andrewrk!~andrewrk@mail.ziglang.org
and it's a compile-time outage you know? it's not like the users of your software are going to notice

1737084591
daxodev!~daxodev@user/daxodev
should it be relatively "easy" to stepthrouh (with gdb) a coredump generated for a zig program?

1737084591
daxodev!~daxodev@user/daxodev
I'm new to zig and doing ziglings and `gdb /path/to/dump` says it's "not a core dump: file format not recognized"

1737084592
daxodev!~daxodev@user/daxodev
more the bad line of code I'm trying to learn from (`instructions[i + 1] - 0;`) and other details in this pastie: https://gitlab.com/-/snippets/4795939#setup

1737086296
andrewrk!~andrewrk@mail.ziglang.org
I would expect that to work. there's another thing you can try however, which is to use zig's x86 backend along with jacobly's lldb fork: https://github.com/jacobly0/llvm-project/tree/lldb-zig

1737086314
andrewrk!~andrewrk@mail.ziglang.org
this uses custom dwarf that is unsupported by mainstream gdb or lldb, hence the fork

1737086344
andrewrk!~andrewrk@mail.ziglang.org
a bit annoying to compile the lldb fork from source, but in exchange it works really well when debugging zig code

1737087883
raceready!uid684861@user/raceready
a foundation supported registry doesn't have to be the only source of truth, but you have to admit that a central repository does help a community find packages and keep track of what direction the community is going in for a given functionality.  

1737088124
daxodev!~daxodev@user/daxodev
thanks I'll try that. I'm guessing those wiki instructions are what I should use (the `z80` branch?) https://github.com/jacobly0/llvm-project/wiki (slowly building now...)

1737088205
daxodev!~daxodev@user/daxodev
wrt "use zig's x86 backend" I think this is my default since I'm on an x86 machine. but LMK if you actually meant I should recompile zig too, or be zig-building my sample-code in a special way.

1737088271
raceready!uid684861@user/raceready
I think also with what you said about there's always copies on the internet, it's hard to buy support for organizations without a trusted platform.

1737088432
torque!~tachyon@user/torque
if you're interested in building a registry, go build it, imo

1737088446
andrewrk!~andrewrk@mail.ziglang.org
it was, and is, an explicit goal to avoid the existence of a platform (which can be abused) by carefully creating a technology that is designed to not depend on one

1737088498
torque!~tachyon@user/torque
there are several package aggregators that exist, like mentioned above, that I think mostly use tags on github

1737088505
andrewrk!~andrewrk@mail.ziglang.org
javascript has an entire VC funded for profit company, NPM inc., why? for what purpose? we don't need to extract profit from a zig package platform. that functionality can exist for free, without the existence of a business

1737088549
andrewrk!~andrewrk@mail.ziglang.org
oh look at that, they got bought by microsoft

1737088554
torque!~tachyon@user/torque
running a package index that actually hosts things is tremendously expensive

1737088566
raceready!uid684861@user/raceready
I've purposely stayed away from Javascript so I don't have any experience with npm

1737088589
raceready!uid684861@user/raceready
Most of my experience has been with nuget, maven, and crates.io

1737088623
raceready!uid684861@user/raceready
I don't know that any of those are for profit registries

1737088623
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
go doesn‚Äôt really have a centralized package repository (yes they host mirrors but that isn‚Äôt an index) and discoverability has never been brought up as an issue

1737088626
andrewrk!~andrewrk@mail.ziglang.org
looks like crates.io is funded by the rust foundation. as I understand it, it's quite expensive. that's ZSF money that we instead spend on paying contributors

1737088632
raceready!uid684861@user/raceready
go has pkg.go.dev

1737088657
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
has anyone ever used that for discovery?

1737088673
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
it‚Äôs great for docs but not for finding libraries

1737088673
raceready!uid684861@user/raceready
I did when first starting out in Go

1737088696
andrewrk!~andrewrk@mail.ziglang.org
I think third parties will do just fine. this one is not half bad: https://zigistry.dev/

1737088786
raceready!uid684861@user/raceready
zigistry.dev has the same issue though. if that developer decides to delete the repo than anyone depending on it is crap out of luck the next time they want to build.

1737088801
raceready!uid684861@user/raceready
I guess it's not an issue if the answer is to always develop everything you need

1737088811
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
zigistry isn‚Äôt a host

1737088865
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I think you are describing two separate problems: reliable hosting and package discoverability

1737088975
raceready!uid684861@user/raceready
I believe the two go hand in hand.  Discoverability definitely helps with onboarding to the ecosystem, while hosting provides benefits for both security and

1737088982
raceready!uid684861@user/raceready
doh hit enter too fast

1737089290
andrewrk!~andrewrk@mail.ziglang.org
if I were designing a registry, I would base it on tracking the "skill level" of users. and then those users' public repositories would be tracked, and their dependencies scored based on how frequently they were used multiplied by how skilled the users are rated. skill would be measured by follower count multiplied by skill of the follower. then furthermore users could override skill level for any other person on the site to adjust their personal weights

1737089329
andrewrk!~andrewrk@mail.ziglang.org
then you end up with a set of packages that are actually used, sorted by how popular they are among skilled users

1737089356
andrewrk!~andrewrk@mail.ziglang.org
and then sure, why not, the registry can mirror packages that are beyond some threshold of popularity

1737089384
raceready!uid684861@user/raceready
assuming your not joking, I think that would actually be pretty awesome.  What if zigs registry had a mechanism to grade the quality of the code and contributions per developer?

1737089404
raceready!uid684861@user/raceready
and that was readily available as a stat per package

1737089458
raceready!uid684861@user/raceready
and packages that didn't meet a threshold would have a period to get up to par before being removed or put into a "closed" state

1737089461
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
wait you get scored based on the skill of the users of your library? üëÄ

1737089469
raceready!uid684861@user/raceready
not the users, the contributors

1737089475
andrewrk!~andrewrk@mail.ziglang.org
yeah that's the idea

1737089487
raceready!uid684861@user/raceready
oh you did say users

1737089491
raceready!uid684861@user/raceready
I read that too fast

1737089506
andrewrk!~andrewrk@mail.ziglang.org
I'm describing a system that can be implemented using only package metadata, and does not rely on any subjective measurement such as "code quality"

1737089535
andrewrk!~andrewrk@mail.ziglang.org
I'm not going to build this though, I have a million other things I'd rather spend time on first

1737090162
grayhatter!~grayhatte@user/grayhatter
if I were to build a registry, it wouldn't have any gameifacation, just a bunch of named and trusted mods/ops that tried to maintain the health of the system, and could make recommendations, similar to steams currators

1737090369
grayhatter!~grayhatte@user/grayhatter
popularity isn't a good proxy metric for skill

1737115188
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/news/what-to-expect-from-release-month/

1737115238
stag1e!~stag1e@user/stag1e
Nice! Zig is really interesting, I'm currently learning it :) 

1737115553
tsujp!497e1f7b6a@sourcehut/user/tsujp
TRAMP is grinding my gears, I'm tempted to try write a module using Zig instead... considering using ssh to simply reach the remote host but then wireguard direct p2p afterwards for better speed

1737115579
tsujp!497e1f7b6a@sourcehut/user/tsujp
probably only ssh at the start since this is potentially a famous "much harder than it sounds" problem

1737127849
ezzieyguywuf!~Unknown@user/ezzieyguywuf
looking for some help with https://github.com/ghostty-org/ghostty/discussions/5151, if this is an actual bug and someone points me in the right general direction I'm happy to take a stab at a PR

1737127865
ezzieyguywuf!~Unknown@user/ezzieyguywuf
"right general direction" = "where in the code might this be coming from"

1737128246
ifreund!2940d10f8b@user/ifreund
ezzieyguywuf: I think you'd have more luck in a ghostty-specific channel

1737129153
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
ezzieyguywuf: #ghostty 

1737129915
grayhatter!~grayhatte@user/grayhatter
andrewrk: because I'm assuming you hear this less often I'm in no rush for zig 1.0 to come out. Not just because I think the ver0 meme is cute/funny, but because I'm already very happy with the language, it's more than stable enough to be used anywhere I might want, and I'm very willing to wait, to make sure Zig is as good as it gets

1737129984
grayhatter!~grayhatte@user/grayhatter
I'm still gonna complain about the stdlib api, because complaining is just in my nature, but I'm **very** happy with all parts of it's devel: no notes (no real notes)

1737130086
grayhatter!~grayhatte@user/grayhatter
thank you, and everyone involved, again, for zig!

1737130484
reykjalin!7e28cf3a41@user/reykjalin
I‚Äôll second that I‚Äôm happy to wait. I haven‚Äôt had any issues with 0.13 and I‚Äôd be happy to wait for a long time before 1.0 is tagged if it means a better language :)

1737130876
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Are there any examples of what needs to be done for the 0.13 -> 0.14 upgrade? I see my build.zig isn't happy anymore, at the very least.

1737132380
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: ü§¶ lol ofc, I dunno why I thought this would be the right spot

1737132468
ezzieyguywuf!~Unknown@user/ezzieyguywuf
+1 to grayhatter and reykjalin . I've been using 0.14.whatever though, maybe I should just use 0.13?

1737132582
grayhatter!~grayhatte@user/grayhatter
on my todo list for today is checking out 0.14, and updating all my projects/libs

1737132606
grayhatter!~grayhatte@user/grayhatter
ezzieyguywuf: I wouldn't downgrade if you're already using 0.14-ish

1737134423
ezzieyguywuf!~Unknown@user/ezzieyguywuf
that's good enough for me üòÅ

1737134591
grayhatter!~grayhatte@user/grayhatter
does anyone have any good debugging resources for packed struct layouts?

1737135018
netvor!~netvor@2a00:ca8:a1f:cd0:dce7:80e6:98e5:873f
re: 1.0, we can wait, and if it's taking too long .. well, we'll just wait faster! :D

1737135098
ifreund!2940d10f8b@user/ifreund
grayhatter: I mean, gdb and other worthwhile debuggers can show you the raw memory

1737135114
ifreund!2940d10f8b@user/ifreund
otherwise, maybe read the docs for packed structs carefully?

1737135162
ifreund!2940d10f8b@user/ifreund
you could also add comptime asserts about the layout to confirm your understanding

1737135179
ifreund!2940d10f8b@user/ifreund
(or show you where it is wrong)

1737135319
grayhatter!~grayhatte@user/grayhatter
ifreund: that's what I'm doing currently in the test

1737135417
grayhatter!~grayhatte@user/grayhatter
netvor: "If I'm not back in 5 minutes......... just wait longer!" :D

1737135432
ifreund!2940d10f8b@user/ifreund
grayhatter: maybe put the struct and the test in a pastebin? :P

1737135499
grayhatter!~grayhatte@user/grayhatter
oh, sorry, I figured it out, first, I wrote 0b100_0001 when I needed to write 0b1000_0001 which tripped me up, but the second part was me being too fancy with my struct packing and ignoring byte order

1737135626
grayhatter!~grayhatte@user/grayhatter
Related: I know Zig isn't big on syntatic sugar, but having `packed (.endianess) struct {...}` would be amazing. I wrote a packed struct forgetting that my system is u64_little, but I need u16_big, well technically u16_network but....

1737135671
grayhatter!~grayhatte@user/grayhatter
or maybe what I want is `packed struct(u8, u8) {...}`

1737135733
ifreund!2940d10f8b@user/ifreund
I think that's equivelent to https://github.com/ziglang/zig/issues/18796

1737135862
grayhatter!~grayhatte@user/grayhatter
not quite, I don't want ints to have endianess

1737135930
ifreund!2940d10f8b@user/ifreund
packed structs are more or less ints

1737135931
grayhatter!~grayhatte@user/grayhatter
I want a packed struct, where the compiler will accept a packing order, that ignores host/target endianess

1737136090
grayhatter!~grayhatte@user/grayhatter
ignores is probably the wrong word. But in my case, host endianness is irrelevant to me. I need to pack in it byte order.

1737136112
grayhatter!~grayhatte@user/grayhatter
need to pack it in *network* byte order

1737136118
grayhatter!~grayhatte@user/grayhatter
which I suspect is common

1737136220
ifreund!2940d10f8b@user/ifreund
I understand what you want, I'm saying that what you want is equivalent to the rejected proposal I linked since packed struct are defined in terms of a backing integer type

1737136221
grayhatter!~grayhatte@user/grayhatter
using a slightly different argument "Zig programmers should not be punished for using structured data." 

1737136257
grayhatter!~grayhatte@user/grayhatter
I better read both issues again, I skimmed because neither seemed to mention packed structs

1737136272
ifreund!2940d10f8b@user/ifreund
I doubt they mention packed struct

1737136301
ifreund!2940d10f8b@user/ifreund
that doesn't change the fact that packed structs are defined based on a backing integer type

1737136315
ifreund!2940d10f8b@user/ifreund
and byte order of a packed struct matches the byte order of the backing int

1737136332
ifreund!2940d10f8b@user/ifreund
i.e. always native endian, since integer types are always native endian

1737136353
grayhatter!~grayhatte@user/grayhatter
this is what I'm doing now https://gr.ht/i/packed_struct.png

1737136365
interpunct!cc60843162@user/interpunct
could you do @byteswap on a @bitcast of the struct before sending it to the network on systems that don‚Äôt have the right endianness?

1737136450
grayhatter!~grayhatte@user/grayhatter
interpunct: I *can* and that's what I'm doing... but ideally, I could provide a few more details when defining the packed struct, to get exactly the memory layout I need to write it out where I want

1737136497
grayhatter!~grayhatte@user/grayhatter
and I get that packed structs are based on the int backing them... but given I can just reorder my fields and get the exact same behavior... why not make that easier on the programmer?

1737136513
ifreund!2940d10f8b@user/ifreund
because it makes the language larger and more complex

1737136530
ifreund!2940d10f8b@user/ifreund
(I'm just parroting the reasoning for why the proposal I linked was closed)

1737136543
grayhatter!~grayhatte@user/grayhatter
:/

1737136742
interpunct!cc60843162@user/interpunct
i _personally_ think that it is easier to not reason about endian-ness in the type and only in the cases it‚Äôs needed to send somewhere.

1737136822
interpunct!cc60843162@user/interpunct
and also that it might make it a little harder to read code if you need to know the endianness of a type instead of it being explicitly cast where needed

1737136955
grayhatter!~grayhatte@user/grayhatter
IMO writing `for (0..N) Thing[N] = packed struct (u8) {}` is not better than writing `Thing = packed struct (u8, u8, N) {...}` Especially given how many more times you'd have to write ThingN throughout the code base. I *get* that it's more explicit, but because that also applies to slices `slice = .{ .ptr = ptr, .len = length };` I think the additional complexity might be worth it.

1737137000
grayhatter!~grayhatte@user/grayhatter
*shrug*

1737137052
grayhatter!~grayhatte@user/grayhatter
seems like an easy way to prevent unintentionally omitting a @byteSwap() somewhere down the line, which is 100% the kinda thing I'd do

1737137308
interpunct!cc60843162@user/interpunct
i think the way i‚Äôd solve it is having like a T.packToNetworkBytes and T.unpackFromNetworkBytes or something like that and use those instead but i do see what ur saying.

1737137434
interpunct!cc60843162@user/interpunct
or even have like a fn (anytype) []const u8

1737145334
andrewrk!~andrewrk@mail.ziglang.org
thanks grayhatter

1737146782
andrewrk!~andrewrk@mail.ziglang.org
I'm reconsidering endianness in integer primitive types. I think they make a lot of sense

1737146799
andrewrk!~andrewrk@mail.ziglang.org
that would address the packed struct use case since you would simply choose the endianness of your backing integer

1737146836
andrewrk!~andrewrk@mail.ziglang.org
we have these integer types that have a well-defined memory layout... that is precisely backwards from the intended memory layout sometimes

1737146857
andrewrk!~andrewrk@mail.ziglang.org
why not just be able to specify the actual memory layout

1737147024
ifreund!2940d10f8b@user/ifreund
they would be handy for a lot of protocols and file formats

1737152519
Smithx10!sid243404@id-243404.helmsley.irccloud.com
@andrewrk  has incremental compilation helped as much as you expected?  

1737152865
andrewrk!~andrewrk@mail.ziglang.org
it's been pretty handy to get instant compile errors. it's not really working for codegen yet so I can't say

1737157914
grayhatter!~grayhatte@user/grayhatter
andrewrk: you wrote the stdlib websocket api yeah?

1737157984
grayhatter!~grayhatte@user/grayhatter
the payload length I'm getting from firefox differs from the RFC, seems to specify right?

1737158003
andrewrk!~andrewrk@mail.ziglang.org
don't think there is any std lib websocket api

1737158048
andrewrk!~andrewrk@mail.ziglang.org
oh look at that

1737158074
andrewrk!~andrewrk@mail.ziglang.org
oh yeah I made this

1737158093
grayhatter!~grayhatte@user/grayhatter
I swear you told me, you wrot.... oh thank god, I thought I was losing my mind

1737158106
andrewrk!~andrewrk@mail.ziglang.org
sorry, I forgot lol

1737158123
andrewrk!~andrewrk@mail.ziglang.org
ah yeah this is the minimal impl that autodocs depends on

1737158123
grayhatter!~grayhatte@user/grayhatter
I was so confused, because it looks like code you'd write

1737158135
grayhatter!~grayhatte@user/grayhatter
and for fuzzing IIRC

1737158150
andrewrk!~andrewrk@mail.ziglang.org
right yeah

1737158171
andrewrk!~andrewrk@mail.ziglang.org
gotta run, I have japanese tutoring lessons on friday afternoons

1737158228
grayhatter!~grayhatte@user/grayhatter
have fun, or good luck... not sure which applies more

