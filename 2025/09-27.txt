1758938836
ezzieyguywuf!~Unknown@user/ezzieyguywuf
in 0.15.1 std.ArrayList is now the same as std.ArrayListUnmanaged right?

1758938845
ezzieyguywuf!~Unknown@user/ezzieyguywuf
andrewrk: awesome!!

1758938962
ezzieyguywuf!~Unknown@user/ezzieyguywuf
nvm I found `/// Deprecated; use `ArrayList`.

1758938985
ezzieyguywuf!~Unknown@user/ezzieyguywuf
although interestingly I don't see that rendered here: https://ziglang.org/documentation/master/std/#std.ArrayList

1758939015
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh lol I clicked on ArrayListUnmanaged and it navigated to ArrayList

1758939020
ezzieyguywuf!~Unknown@user/ezzieyguywuf
that's....a lil confusing

1758939955
andrewrk!~andrewrk@mail.ziglang.org
well, it is an alias

1758940653
janAkali!~janAkali@user/janAkali
hello, I'm using `zig cc` to cross-compile some Nim code and after updating Zig to 0.14.1 it seems format of `zig targets`Â  have changed, it's no longer valid json =(

1758940682
janAkali!~janAkali@user/janAkali
`zig targets | jq '.'` results in `jq: parse error: Invalid numeric literal at line 1, column 2`

1758940738
janAkali!~janAkali@user/janAkali
and I can't find any info in documentation how am I supposed to read 20000 lines output of `zig target` now

1758942300
clevor!sid649024@id-649024.hampstead.irccloud.com
janAkali: It's ZON now.

1758942409
janAkali!~janAkali@user/janAkali
yeah I've found about it from this pull request: https://github.com/ziglang/zig/pull/22939

1758942428
janAkali!~janAkali@user/janAkali
unfortunate that this is the only place it's mentioned

1758942464
janAkali!~janAkali@user/janAkali
I expected to see something in changelog or in docs

1758947366
clevor!sid649024@id-649024.hampstead.irccloud.com
andrewrk: check this out heh https://usercontent.irccloud-cdn.com/file/AMqN6T1s/Screenshot_20250927_002837.jpg

1758963149
cdrmack!~cdrmack@193.28.84.189
hello o/, I struggle to compile zig 15.1 on FreeBSD 14.3 and decided to finally ask for some help after going through multiple sites trying to find the answer - I've followed the steps from the GitHub but it didn't works - cmake passes but make fails complaining it cannot find libzstd (even though it's installed and in the search path)

1758963163
cdrmack!~cdrmack@193.28.84.189
I saw somewhere that Andrew said it's bug in the llvm where config doesn't report some dependencies, work-around for this 

1758963163
cdrmack!~cdrmack@193.28.84.189
<cdrmack> one is to run cmake with `-DZIG_STATIC_STD=ON` but now  stage3 fails, linker cannot find symbol `backtrace`

1758963236
cdrmack!~cdrmack@193.28.84.189
I've found that backtrace is not part of libc on FreeBSD and according to backtrace(3) it's in execinfo but didn't manage to make it work

1758966876
getz!~getz@user/getz
cdrmack: use ports, 0.15.1 is not commited to ports but you can use this https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=289011

1758967641
cdrmack!~cdrmack@193.28.84.189
@getz, thanks - I was actually able to finally compile it locally with `cmake .. -DZIG_STATIC_ZSTD=ON -G Ninja` and without `-DZIG_STATIC_LLVM=ON`

1758987371
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I'm a little confused by https://ziglang.org/documentation/master/std/#std.Thread.Condition <- why are both a `predicate` and a `c.signal()/c.wait()` needed? it seems that they do the same thing

1758987579
ezzieyguywuf!~Unknown@user/ezzieyguywuf
oh, I guess probs for the same reason as https://docs.python.org/3/library/threading.html#condition-objects

1759015830
johnjaye!~pi@syn-035-146-235-019.res.spectrum.com
question. zig does not directly support variable number of arguments in functions?

1759015854
johnjaye!~pi@syn-035-146-235-019.res.spectrum.com
the documentation says you can use external c variadics but there's no direct syntax i see for this

1759015882
lemons!~doggie@user/doggie-:49517
johnjaye: theres anytype which lets you do a struct of anything, but other than that, not that im aware of

1759015886
johnjaye!~pi@syn-035-146-235-019.res.spectrum.com
e.g. fn sum(...) { add args}. sum(1,2,3); // equals 6

1759015898
lemons!~doggie@user/doggie-:49517
as for c variadics, no earthly clue

1759015918
johnjaye!~pi@syn-035-146-235-019.res.spectrum.com
so to emulate it you'd need a struct with a member which was an array of indefinite size maybe?

1759016005
lemons!~doggie@user/doggie-:49517
johnjaye: depending on what exactly you need, you can take a look at how std.debug.print() does it

1759016024
johnjaye!~pi@syn-035-146-235-019.res.spectrum.com
ok thanks

1759016972
Affliction!affliction@idlerpg/player/affliction
which uses anytype, and the format string defines what types should be within that anonymous struct

1759017186
Affliction!affliction@idlerpg/player/affliction
With zig being in flux, don't be afraid to look at how the standard lib does things. It's not nearly as scary as C++'s, heh

