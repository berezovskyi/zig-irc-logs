1737591577
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
andrewrk: thanks!

1737609828
dsal!sid13060@id-13060.lymington.irccloud.com
OK, I'm kind of dumb.  I can't figure out how to initialize this thing:  `const vs: []Value = []Value{v};`  That tells me I need a `&` which gives me a different type.

1737610423
andrewrk!~andrewrk@mail.ziglang.org
dsal: looks like you want a reference, so you need to decide where the memory will be stored. are you trying to make an anonymous global const?

1737610488
dsal!sid13060@id-13060.lymington.irccloud.com
Right, I think I just figured that out.  I have an API that is parsing stuff and sometimes returns more than one thing, so I just need to write this function that can take a thing and put it in a single element slice.  The cases that deal with more than one I'd expect to be more complicated.

1737610498
dsal!sid13060@id-13060.lymington.irccloud.com
I got gc mindset.

1737610617
andrewrk!~andrewrk@mail.ziglang.org
you can keep gc mindset if you want by using arena allocators

1737610634
andrewrk!~andrewrk@mail.ziglang.org
I mean you still have to free the arena but you get a lot of bang for your buck that way :)

1737610655
andrewrk!~andrewrk@mail.ziglang.org
it's a nice exercise when learning zig to write a parser that uses one arena to store the parsed result

1737610706
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, that's almost exactly what I'm doing.

1737610718
dsal!sid13060@id-13060.lymington.irccloud.com
Except for the "arena" detail.

1737612846
dsal!sid13060@id-13060.lymington.irccloud.com
Well that's a sad error:  `unable to resolve inferred error set` â€“ now I have to know stuff.

1737613013
andrewrk!~andrewrk@mail.ziglang.org
hmm too bad ctrl+f on the langref doesn't match anything for that error, that would be handy to add

1737613047
andrewrk!~andrewrk@mail.ziglang.org
anyway you probably have a indirectly recursive function in which case you need an explicit error set

1737613081
andrewrk!~andrewrk@mail.ziglang.org
if you just want to get unblocked you could use `anyerror`, or you can try to start working on error set hygiene

1737613169
dsal!sid13060@id-13060.lymington.irccloud.com
Oh cool.  Thanks.  Yeah, I was trying to figure out how to build out that set.

1737613644
dsal!sid13060@id-13060.lymington.irccloud.com
Is there something in stdlib that can parse IEEE754 from a reader?

1737613651
dsal!sid13060@id-13060.lymington.irccloud.com
(i.e., read floats and stuff)

1737613950
dsal!sid13060@id-13060.lymington.irccloud.com
Oh wait, does `readBits` do that?

1737613998
dsal!sid13060@id-13060.lymington.irccloud.com
Doesn't look like it.

1737615038
andrewrk!~andrewrk@mail.ziglang.org
should be @bitCast on a read int

1737616198
dsal!sid13060@id-13060.lymington.irccloud.com
Oh cool.

1737617232
dsal!sid13060@id-13060.lymington.irccloud.com
My debug print isn't printing very much.  Is there something I can do that will make it print more?  This is a big recursive structure.

1737617259
dsal!sid13060@id-13060.lymington.irccloud.com
I guess the Right Thing to do is just make a JSON output or something.

1737618843
dsal!sid13060@id-13060.lymington.irccloud.com
oh nice, the built-in JSON stuff lets me know I didn't do enough.

1737645926
Zorgatone!~Zorgatone@user/Zorgatone
Any suggestions for saving an 2-dimensional array of RGB values (pixels) to an image file format with Zig?

1737645960
Passerby!~Passerby@user/Passerby
if its a image it has a knowen width and height right?

1737646009
Zorgatone!~Zorgatone@user/Zorgatone
I am making the image, I want to save it maybe png or jpg

1737646035
Earnestly!~earnest@user/earnestly
The return of the netpbm .ppm/.pfm format

1737646150
Passerby!~Passerby@user/Passerby
would likly just grab zigimg or something to do it

1737646194
Zorgatone!~Zorgatone@user/Zorgatone
I was thinking either a simple format like the one you mentioned or a good maintained zig implementation for common formats

1737646215
Zorgatone!~Zorgatone@user/Zorgatone
https://netpbm.sourceforge.net this should be the website for ppm/pfm if I'm not mistaken

1737646220
Passerby!~Passerby@user/Passerby
its one of those things that is a bit of a pain due to the langauge being not all that mature yet

1737646287
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
+1 for zigimg

1737646302
Zorgatone!~Zorgatone@user/Zorgatone
I just need to render noise on an image for debugging, probably .ppm/.pfm is more than enough

1737646303
Earnestly!~earnest@user/earnestly
The beauty of netbpm type formats is that you don't need an implementation

1737646311
Zorgatone!~Zorgatone@user/Zorgatone
yes exactly

1737646326
Earnestly!~earnest@user/earnestly
tradeoffs include size, since no compression

1737646338
Zorgatone!~Zorgatone@user/Zorgatone
not a problem

1737646446
Passerby!~Passerby@user/Passerby
yeah if size does not matter ppm and tga are very simple formats

1737646552
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I just want zigimg to get jpeg support ;_;

1737646553
Earnestly!~earnest@user/earnestly
And if it's just black and white noise, then pgm is literally just 0s and 1s in a grid

1737646568
Earnestly!~earnest@user/earnestly
bwbuhse: You must know about cjpegli if you don't already

1737646584
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
bwbuhse: I think it works with jpeg, even though the readme doesn't have a checkbox there

1737646633
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
rockorager: could just be the commit I'm using then still doesn't have it https://codeberg.org/bwbuhse/beanbag/issues/6#issuecomment-2560327

1737646637
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I'll have to take a look later

1737646695
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Earnestly: I did not know about it

1737646696
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
thanks

1737646937
triallax!f378378b91@lacerte/triallax
hi folks, i have a question about string struct fields and ownership

1737647012
triallax!f378378b91@lacerte/triallax
if i have a string field that should be allocated and "owned" by the struct (not sure if that's the correct way to use the term but i hope you understand my point)

1737647058
triallax!f378378b91@lacerte/triallax
sometimes when initialising a value of that struct, the string passed in is already allocated and ownership is transferred over to the struct, while sometimes it should be duped using the allocator

1737647069
triallax!f378378b91@lacerte/triallax
what's the idiomatic way to enforce this? or should the `init` function or whatever just always copy?

1737647138
Passerby!~Passerby@user/Passerby
how big of a string is it

1737647156
triallax!f378378b91@lacerte/triallax
it's a general question, so i don't really have a specific answer

1737647159
triallax!f378378b91@lacerte/triallax
other than perhaps "not very big"

1737647221
Passerby!~Passerby@user/Passerby
i would just have anything that assigns it just dup it with the allocator

1737647232
triallax!f378378b91@lacerte/triallax
mhm

1737647247
Passerby!~Passerby@user/Passerby
if it was huge would be different

1737647289
triallax!f378378b91@lacerte/triallax
right, what's the naming convention for initialiser and destructor functions?

1737647298
triallax!f378378b91@lacerte/triallax
i've seen init and deinit around

1737647300
Zorgatone!~Zorgatone@user/Zorgatone
To create a file or overwrite an existing one, do I need to do statFile, createFile then openFileW ?

1737647345
Passerby!~Passerby@user/Passerby
triallax i am pretty new to zig, but from the std library seems to be init and deinit

1737647373
dutchie!~dutchie@user/dutchie
Zorgatone: stb_image is an easy way to do it, see https://git.sr.ht/~jshholland/raytrazig/tree/master/item/src/main.zig#L3 and https://git.sr.ht/~jshholland/raytrazig/tree/master/item/build.zig for how I did it when I was messing around with raytracing

1737647400
Zorgatone!~Zorgatone@user/Zorgatone
dutchie: thanks

1737647401
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
init and deinit are the typical names

1737647416
dutchie!~dutchie@user/dutchie
Zorgatone: you can just createFile and then call .writer() on it, it'll create a new file or truncate an old one then give you an open file to write to

1737647436
Zorgatone!~Zorgatone@user/Zorgatone
Ah I see

1737647438
Zorgatone!~Zorgatone@user/Zorgatone
ty

1737647474
dutchie!~dutchie@user/dutchie
there are some options you can pass in to have it act in different ways if the file already exists

1737647496
dutchie!~dutchie@user/dutchie
https://ziglang.org/documentation/master/std/#std.fs.File.CreateFlags

1737647578
dutchie!~dutchie@user/dutchie
(now I look at it, that raytrazig repo is quite old Zig, maybe I should get round to updating it... perhaps when 0.14 comes out)

1737648198
Zorgatone!~Zorgatone@user/Zorgatone
on the general purpose allocator, should I call gpa.deinit() at the end of main?

1737648214
triallax!f378378b91@lacerte/triallax
probably yeah

1737648218
triallax!f378378b91@lacerte/triallax
better to do it with defer

1737648268
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I need duckduckgo to add a !zig bang

1737648281
Zorgatone!~Zorgatone@user/Zorgatone
ok, so I am doing var gpa = std.heap.GeneralPurposeAllocator(.{}){}; const allocator = gpa.allocator(); defer { _ = gpa.deinit(); }

1737648299
triallax!f378378b91@lacerte/triallax
it does report leaks when runtime safety is on though

1737648301
triallax!f378378b91@lacerte/triallax
nice in debug mode

1737648305
triallax!f378378b91@lacerte/triallax
not sure if you'd want that in ReleaseSafe?

1737648352
dutchie!~dutchie@user/dutchie
I tend to `defer std.debug.assert(gpa.deinit() == .ok)` but I'm not entirely sure that isn't just superstition

1737648379
Zorgatone!~Zorgatone@user/Zorgatone
ah nice, good idea

1737650203
Zorgatone!~Zorgatone@user/Zorgatone
Can I have an array of slices?

1737651305
Passerby!~Passerby@user/Passerby
why could you not have a array of slices

1737651339
Passerby!~Passerby@user/Passerby
just keep in mind when getting rid of it, you need to free those slices 1 by 1

1737652062
dutchie!~dutchie@user/dutchie
it's also further than it might intuitively seem from [20][40]T to [][]T

1737652262
Passerby!~Passerby@user/Passerby
yeah for easy i would likly always just do it as `[][]T`

1737652403
Passerby!~Passerby@user/Passerby
also often just avoid structures like that where it makes sense, like if its just repersenting a grid with a known width i would just use []T and do the math to convert a 2d coord to a 1d index as needed

1737653109
triallax!f378378b91@lacerte/triallax
is storing allocator in structs to be used for freeing in deinit okay?

1737653132
triallax!f378378b91@lacerte/triallax
i know at least the standard ArrayList does just that

1737653766
triallax!f378378b91@lacerte/triallax
that seems like it might be mildly painful in my specfic case, the struct i'm looking at may have hundreds, possibly thousands, of values

1737653770
triallax!f378378b91@lacerte/triallax
and it's small on its own

1737653895
triallax!f378378b91@lacerte/triallax
hm, never mind, it wasn't as small as i had expected

1737653903
triallax!f378378b91@lacerte/triallax
still, i'm interested in knowing the answer to that question

1737657627
dsal!sid13060@id-13060.lymington.irccloud.com
Are we able to have anonymous functions / closures?  Because I was able to type some up, but the compiler got mad at me for trying to use htem.

1737657784
Passerby!~Passerby@user/Passerby
not directly

1737657790
hadronized!~hadronize@2001:41d0:a:fe76::1
dsal: you can have closures; you just need to implement them manually

1737657797
hadronized!~hadronize@2001:41d0:a:fe76::1
and I think the struct trick only works at comptime

1737657801
Passerby!~Passerby@user/Passerby
the inner one will not get scope from the outer like other langauges

1737657807
Passerby!~Passerby@user/Passerby
you can work around using 1 of 2 tricks

1737657821
Passerby!~Passerby@user/Passerby
yeah struct one for comptime

1737657838
Passerby!~Passerby@user/Passerby
or passing a context along like some std lib functions do

1737657855
hadronized!~hadronize@2001:41d0:a:fe76::1
itâ€™s a bit weird that this is not added to Zig, at least lambda (closures are another beast)

1737657889
Passerby!~Passerby@user/Passerby
zig is a low level one, and it would raise the question of what comes from the outer scope and how that is allocated

1737657907
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, I don't need a full closure with escape analysis and stuff.  I just need enough of  a function to construct a different thing in each switch branch.

1737657910
hadronized!~hadronize@2001:41d0:a:fe76::1
Passerby: what?

1737657911
Passerby!~Passerby@user/Passerby
like C++ can do it but has some strange syntax to deal with how the closure is done

1737657927
hadronized!~hadronize@2001:41d0:a:fe76::1
lambdas (not closures) do have those implications

1737657941
hadronized!~hadronize@2001:41d0:a:fe76::1
having lambdas would simplify a lot many usecases

1737657949
hadronized!~hadronize@2001:41d0:a:fe76::1
and you could have closures with comptime

1737657954
hadronized!~hadronize@2001:41d0:a:fe76::1
do not*

1737657961
Passerby!~Passerby@user/Passerby
yeah in your case its not complicated you more or less just want short hand for regular functions you can do in line

1737657977
dsal!sid13060@id-13060.lymington.irccloud.com
I think the full scope of the term "closure" is blurry in my head.  I want access to enclosing parameters, but I'm not like, taking them anywhere.

1737657982
hadronized!~hadronize@2001:41d0:a:fe76::1
most of the stuff I need (and I actually do in Rust) is passing filter / map functions

1737657993
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, this is that sort of thing.

1737657994
hadronized!~hadronize@2001:41d0:a:fe76::1
which do not require capturing most of the time

1737658008
hadronized!~hadronize@2001:41d0:a:fe76::1
dsal: closure is actually a good name

1737658039
hadronized!~hadronize@2001:41d0:a:fe76::1
but it was invented for functions returning functions, that would require to capture some part of its stack to Â« close the function Â» with it

1737658051
hadronized!~hadronize@2001:41d0:a:fe76::1
when passing as argument, the name is weird

1737658062
hadronized!~hadronize@2001:41d0:a:fe76::1
but basically, closure = unnamed function + context

1737658099
hadronized!~hadronize@2001:41d0:a:fe76::1
struct { foo:Â fn(i32) i32 }

1737658110
hadronized!~hadronize@2001:41d0:a:fe76::1
why not reusing that syntax for lambdas?

1737658125
hadronized!~hadronize@2001:41d0:a:fe76::1
fn(x: i32) i32 { â€¦ }

1737658145
hadronized!~hadronize@2001:41d0:a:fe76::1
or maybe the | | one, like |x: i32| i32 { â€¦ }

1737658179
hadronized!~hadronize@2001:41d0:a:fe76::1
(the latter would be closer to what Rust does, btw, so might be nice for people coming from Rust?)

1737658181
dsal!sid13060@id-13060.lymington.irccloud.com
This is the syntax I used:  `'b' => replicated(alloc, 1, ss, rpt, fn () anyerror!Value{return .{ .b = try input.readByteSigned() }}),`

1737658205
Passerby!~Passerby@user/Passerby
really would just do the regular fn syntax

1737658221
Passerby!~Passerby@user/Passerby
or the `||` the arrow syntax reminds me of other langs too much

1737658244
dsal!sid13060@id-13060.lymington.irccloud.com
It doesn't need to be special, but it _could_ be special.

1737658287
Passerby!~Passerby@user/Passerby
but yeah with it was easier both for passing functions into something for sorting or mapping

1737658311
Passerby!~Passerby@user/Passerby
but also just wish closures were easier, decorator pattern can be very nice for stuff like loggers or middleware

1737658577
dsal!sid13060@id-13060.lymington.irccloud.com
It's kind of nice to have AI things for these refactors since I just typed up a bunch of this stuff and want to transform it into a bunch of named helper functions by a pattern, add a parameter, and replace all the call sites.

1737658679
Passerby!~Passerby@user/Passerby
actaully similar but not quite the same thing, but anyone know if a good way to more or less evaulate and bake in the comptime args of a function

1737658682
Passerby!~Passerby@user/Passerby
like say i got 

1737658733
Passerby!~Passerby@user/Passerby
`fn (comptime T: type, lhs: T, rhs: T) T` and i want `fn (lhs: i32, rhs: i32) i32`

1737660273
andrewrk!~andrewrk@mail.ziglang.org
dsal: my strategy is to be good at vim. I can make some intricate transformations extremely quickly with vim macros for example

1737660301
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, I used to do that kind of stuff a lot, and probably would've been faster than arguing with an LLM.

1737660334
Passerby!~Passerby@user/Passerby
i have never found llms to be good for anything but single line completion 

1737660372
Passerby!~Passerby@user/Passerby
even then its wrong like 70% of the time, but it only takes me a fraction of a second to notice that and press tab and use it or just move on with what i was already doing

1737660385
dsal!sid13060@id-13060.lymington.irccloud.com
I can occasionally get some data transformations being useful.  I'm doing that right now asking it to format a wad of unreadable text for me.

1737660389
Passerby!~Passerby@user/Passerby
aside from that its just being good and vim and having good refactoring tools

1737660405
dsal!sid13060@id-13060.lymington.irccloud.com
That's the primary thing I find useful:  Take a thing I understand and format it in a way that's easier to read that I also understand.

1737660441
Passerby!~Passerby@user/Passerby
also limitations are almost never how fast i can write or modify code

1737660477
dsal!sid13060@id-13060.lymington.irccloud.com
I'm sure it took me longer to argue with it than it would've taken me to do the tedious updates.  But it was at least a little less boring.

1737660559
Passerby!~Passerby@user/Passerby
yeah i am guilty of that, automating a process that only has like 20 iterations because well doing it by hand is boring finding some abomination of zsh and piped commands is less so

1737660710
ifreund!2940d10f8b@user/ifreund
https://xkcd.com/1205/

1737660739
Passerby!~Passerby@user/Passerby
yeah but that only accounts for time, not for my happiness during the process

1737660818
ifreund!2940d10f8b@user/ifreund
perhaps the other one is more applicable then :D

1737660821
ifreund!2940d10f8b@user/ifreund
one sec

1737660830
ifreund!2940d10f8b@user/ifreund
https://xkcd.com/1319/

1737660858
Passerby!~Passerby@user/Passerby
much better

1737660881
dsal!sid13060@id-13060.lymington.irccloud.com
I get really slow when work gets boring/repetitive.

1737660902
Passerby!~Passerby@user/Passerby
yeah i get distracted really easily when things get repetitive 

1737660914
Passerby!~Passerby@user/Passerby
why i am here and not doing my job right now

1737660980
andrewrk!~andrewrk@mail.ziglang.org
because while you need your job to put food on the table, learning zig and playing with your side project is the true investment in your future career and happiness

1737660993
andrewrk!~andrewrk@mail.ziglang.org
and your subconscious mind knows this

1737661047
Passerby!~Passerby@user/Passerby
its just a really interesting langauge 

1737661143
Passerby!~Passerby@user/Passerby
i feel it has worked around the footguns in a lot of other langauges while not adding all that much complexity

1737661178
andrewrk!~andrewrk@mail.ziglang.org
ifreund: according to this chart it's worth spending roughly half a day trying to automate the zig release process more

1737661184
andrewrk!~andrewrk@mail.ziglang.org
:D

1737661211
andrewrk!~andrewrk@mail.ziglang.org
missing factors however: other people enjoying the fruits of your labor

1737661249
andrewrk!~andrewrk@mail.ziglang.org
and also quality of the routine: does the automation prevent mistakes

1737661300
Passerby!~Passerby@user/Passerby
well you get a lot of gains there, some of the tooling i put in at work sure time spent vs how much me and my co workers use it per day its not worth it

1737661311
Passerby!~Passerby@user/Passerby
but there has not been a mistake in this part of the worlflow for years now

1737661452
ifreund!2940d10f8b@user/ifreund
yeah the table is definitely an oversimplification, but it is nice as a starting point to make it easier to reason about

1737662700
grayhatter!~grayhatte@user/grayhatter
andrewrk: there's an xkcd for that as well https://xkcd.com/519/

1737662811
Passerby!~Passerby@user/Passerby
grayhatter: i feel that one as a dropout that managed to have a hobby i spent way too much time at turn into a fairly decent job by accident 

1737663383
d76d5!~d76d5@user/d76d5
I wish that were true today, now every high schooler is expected to know perl to get a job

1737663438
Passerby!~Passerby@user/Passerby
are they though, when interviewing people its pretty hard to find someone that actually knows how things work instead of just high level framworks

1737664548
dsal!sid13060@id-13060.lymington.irccloud.com
I can't seem to handle `error.EndOfStream` specifically, presumably because my function is `anyerror!X`.  Is there a sensible way to do this without discovering/defining an error set?

1737664592
Passerby!~Passerby@user/Passerby
Not sure what best implementation would look like in Zig, but is there plans for any out of the box benchmarking support?

1737664645
dsal!sid13060@id-13060.lymington.irccloud.com
Oh wait, if I read the error, I can see that it's dumping out a big set that doesn't include `EndOfStream` even though that's the error I get.

1737664734
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, turns out reading the error message solves a lot of problems.

1737665511
andrewrk!~andrewrk@mail.ziglang.org
Passerby: here's the (closed) issue for that: https://github.com/ziglang/zig/issues/1010

1737665524
andrewrk!~andrewrk@mail.ziglang.org
that said I could see the testing API helping to write benchmarks and the build system aggregating them somehow

1737665546
andrewrk!~andrewrk@mail.ziglang.org
that would be a toolchain enhancement however, not a language modification

1737665578
Passerby!~Passerby@user/Passerby
thanks, yeah i assumed it would be toolchain not langauge its self. if existing ones i am fairly fond of Go's approach

1737665664
Passerby!~Passerby@user/Passerby
guess its not a problem in zig since there is no runtime, but it was important in Go since it was harder to measure things externally and only measure that part i care about

1737666489
dsal!sid13060@id-13060.lymington.irccloud.com
Well, now my problem is that the json I'm spitting out is too deep for jq.  It's probably right.

1737666928
grayhatter!~grayhatte@user/grayhatter
if the json you're outputting is too deep for jq... it's probably *wrong*

1737667080
dsal!sid13060@id-13060.lymington.irccloud.com
That's not impossible, but I can't use that to judge it at this point.  I'm just parsing this telemetry blob into a recursive type and don't actually know how recursive it gets.  I might be nesting somewhere I don't need to be, but at the very least I'm getting through the whole thing without misunderstanding pieces.

1737667087
grayhatter!~grayhatte@user/grayhatter
oh, 256 seems a bit conservitive to me, funny enough I was just talking to a friend about what a reasonable json depth is, and we both came up with 400

1737667111
dsal!sid13060@id-13060.lymington.irccloud.com
This is just a slightly better debug printing at this point.

1737667114
grayhatter!~grayhatte@user/grayhatter
dsal: my point closer to, you shouldn't be using json for this

1737667135
dsal!sid13060@id-13060.lymington.irccloud.com
I picked json because the default thing was truncating and I couldn't see past the top of my parse.

1737667146
dsal!sid13060@id-13060.lymington.irccloud.com
If I use JSON for this at all, it'll be something I hand-roll.

1737667170
Passerby!~Passerby@user/Passerby
i have never had json with depth near 256

1737667187
Passerby!~Passerby@user/Passerby
feel if it was ever getting close i would be woundering if this is the tool for the job or i am just shoehorning it in there

1737667257
dsal!sid13060@id-13060.lymington.irccloud.com
Definitely the latter.  "I want to see this structure" is my current level.

1737667289
Passerby!~Passerby@user/Passerby
what type of data is hitting a depth like this?

1737667319
grayhatter!~grayhatte@user/grayhatter
whatever it is you're fighting with, I wish you luck because it sounds awful

1737667441
dsal!sid13060@id-13060.lymington.irccloud.com
Haha.  This is telemetry data encoded into GoPro video files.  It can nest, but I might also have a bug.

1737667603
dsal!sid13060@id-13060.lymington.irccloud.com
The nice thing is that whatever this thing is doing, it's doing it pretty quickly.

1737668766
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Does anyone know of any C/C++ project that 1) use Meson, and 2) build and link a Zig compilation unit?

1737669075
coleman!~coleman@static.87.86.161.5.clients.your-server.de
I think I'll try this to create an object https://mesonbuild.com/Custom-build-targets.html

1737676514
dsal!sid13060@id-13060.lymington.irccloud.com
Is there something like StaticStringMap but for different key types?  I want a u8, so it could be like, a slice or something, I guess.

