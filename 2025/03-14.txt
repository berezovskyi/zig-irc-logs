1741910426
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
see like this: https://zigbin.io/9abb22

1741910431
Maarrk!~Maarrk@user/Maarrk
I didn't understand the *formatting* of your message

1741910439
Maarrk!~Maarrk@user/Maarrk
ah, that's clearer

1741910531
Maarrk!~Maarrk@user/Maarrk
Is the last brace is supposed to be at the line start?

1741910560
sp2!uid197664@user/meow/sp2
IMHO this is a bug and should be reported on the issue tracker

1741910600
torque!~tachyon@user/torque
you have to add a comma after the multiline string

1741910604
torque!~tachyon@user/torque
this is working as designed

1741910697
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
torque, comma, where? can you use that snippet to show what you mean 

1741910709
sp2!uid197664@user/meow/sp2
that's a good point! although I'm inclined to still think there's a bug here, considering that adding a comment also splits up the struct into a multiline format

1741910729
sp2!uid197664@user/meow/sp2
https://zigbin.io/85a16c

1741910944
torque!~tachyon@user/torque
the trailing comment forcing multiline layout is also not a bug

1741910948
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
right that "," does work, but https://codeberg.org/ziglings/exercises/src/branch/main/exercises/007_strings2.zig#L21 shows to add `;` at the end

1741910973
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
for some reason codeberg seems to remove \\ in that code. 

1741910976
torque!~tachyon@user/torque
since you can't have the closing brace etc after the comment on the same line, so having a comment after a field necessitates newlines in the struct

1741910991
torque!~tachyon@user/torque
if the struct has to have newlines, it should be formatted multiline for consistency

1741911045
torque!~tachyon@user/torque
stealth_, that is because in that example the multiline string is a variable, not a field in a struct

1741911062
Maarrk!~Maarrk@user/Maarrk
And also I think the \\ aren't in the code because it's the exercise for you to add them?

1741911063
torque!~tachyon@user/torque
commas are used to delimit struct fields, semicolons are used to end statements/expressions

1741911065
sp2!uid197664@user/meow/sp2
yeah, I agree with that! but in that case, wouldn't the struct containing a multiline string (and therefore interior newlines) require *the struct* to be formatted multiline?

1741911087
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
people normally don't add `,` at the end of the struct fiend though

1741911126
torque!~tachyon@user/torque
what are you arguing here? adding a comma after the last field value in a struct is exactly how you tell the formatter you want it to be multi-line instead of single line

1741911128
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Maarrk, o right, i had already finished it so why my code had it :D

1741911178
torque!~tachyon@user/torque
sp2, yeah formatting is a bit weird around multiline strings

1741911188
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
isn't is suppose to be `;` that denotes end of multi-line? 

1741911211
sp2!uid197664@user/meow/sp2
i'm arguing that this formatting https://zigbin.io/a03368 is a bug

1741911234
sp2!uid197664@user/meow/sp2
stealth_: it's not marking the end of the multiline string, it's marking the end of the surrounding statement/struct field

1741911236
torque!~tachyon@user/torque
sorry, the arguing remark was in response to stealth_

1741911272
torque!~tachyon@user/torque
I'm not sure I'd call it a bug as much as an unrealized feature

1741911312
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, so different rule for const/var declaration vs when its in struct(in this case)

1741911317
sp2!uid197664@user/meow/sp2
yeah, it's just an oversight and calling it a bug is a little strong, but it should probably be on the issue tracker still

1741911415
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also you literally have to add `,` on a new line or else it wont format properly 

1741911429
torque!~tachyon@user/torque
yes because if it is on the same line as \\ it become part of the string

1741911431
Maarrk!~Maarrk@user/Maarrk
no, what's the bug? if you place either the comma `,` or the semicolon `;` add the end of a line that starts with double backslash `\\` it's just the last character in that string

1741911437
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ahh

1741911519
Maarrk!~Maarrk@user/Maarrk
the only inconsistency here that I agree with is that a single comment triggers the whole struct into multiline without a trailing comma, but a multiline string does not

1741911543
Maarrk!~Maarrk@user/Maarrk
but probably there's a perspective where it's a feature

1741911573
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
also there is no compiler error when you don't have `,` at the end, so it can get confusing.

1741911607
Maarrk!~Maarrk@user/Maarrk
but the code is valid with and without the `,` at the end (which lets use use it to tell the formatter what to do)

1741911660
Maarrk!~Maarrk@user/Maarrk
stealth_ do you have format on save?

1741911678
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
Maarrk, no, i run it when code gest messy 

1741911686
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
*gets

1741911775
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can normally do `ctrl+b` to build, but if i press `ctrl+shift+b` i get a drop down with multiple options build, run, format, ... 

1741911831
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
well it literally remembers what i chose last and runs it for `ctrl+b`

1741911862
Maarrk!~Maarrk@user/Maarrk
this sounds similar to VS Code, is it that?

1741911875
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lol no, i use sublimetext

1741911934
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
you couldn't pay me enough to use vscode spyware.

1741911985
Maarrk!~Maarrk@user/Maarrk
OK, I won't pretend to know anything about sublime. inb4 I'm not on vscode either. Back on topic, I found that format on save really makes me understand how the formatter "thinks", and it's easy to experiment with adding or removing a token

1741912352
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what do you mean by token?

1741912649
Maarrk!~Maarrk@user/Maarrk
here: a comma or a semicolon (poor choice of word on my part)

1741912726
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
cool

1741912844
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
does zig have a good way to get linux kernel version info? 

1741915721
grayhatter!~grayhatte@user/grayhatter
stealth_: https://ziglang.org/documentation/master/std/#std.os.linux.uname

1741918828
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, thanks. 

1741920524
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
does zig not have anything like lru_cache? 

1741920603
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
trying to do something like https://github.com/YoSTEALTH/Liburing/blob/master/src/liburing/version.py maybe use `uname` but don't like the idea of it hitting that syscall multiple time.

1741921417
grayhatter!~grayhatte@user/grayhatter
stealth_: that's the syscall you're worried about?

1741921469
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
grayhatter, it will be syscall and a parse

1741921494
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am not really worried about it, just how i do things ;)

1741921497
grayhatter!~grayhatte@user/grayhatter
yes it will, are you hitting it thousands of times a second?

1741921611
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
maybe i will use zig to get the data once and parse it, then use rest of the code as it, maybe thats a better options.

1741921622
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
*as s

1741921625
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
*as is

1741921693
grayhatter!~grayhatte@user/grayhatter
now I have to know

1741921704
grayhatter!~grayhatte@user/grayhatter
how many times could you possibly need to get the kernel version?

1741921728
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
ideally you should only get it once and rest should be cached.

1741921732
grayhatter!~grayhatte@user/grayhatter
no

1741921745
grayhatter!~grayhatte@user/grayhatter
how many times would you call the function you wanted to wrap in a cache?

1741921781
grayhatter!~grayhatte@user/grayhatter
say you wrote your own cache, how many times would you get the kernel verison from the cache?

1741921802
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if you want to know the use-case https://github.com/YoSTEALTH/Liburing/blob/master/test/socket/getsockname_test.py#L5

1741921851
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i have it all over the test, but same function i also use in other project as well, and who know if ppl that use the library will use it or not. 

1741921923
grayhatter!~grayhatte@user/grayhatter
you know it's bad code to skip a test, instead of fixing the code, right?

1741921983
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i can't fix what they don't have, like it check if you have x linux version, if you dont' have it, should skip the test or else you have major problem.

1741922020
grayhatter!~grayhatte@user/grayhatter
what does "i can't fix what they don't have" mean?

1741922128
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
search for `IORING_TIMEOUT_UPDATE` https://ziglang.org/documentation/master/std/#src/std/os/linux.zig

1741922160
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
see how it mentions linux 5.11 and such? if you are linux 4 you can use those function/features

1741922208
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
* if you are on linux 4 you can't use those function/features 

1741922223
grayhatter!~grayhatte@user/grayhatter
but you're skipping 6.11?

1741922246
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes, i am currently on 6.13 so there are few features being added all the time. 

1741922283
grayhatter!~grayhatte@user/grayhatter
but if it was added 5.11, why are you skipping 6.11?

1741922325
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
that was an example man... the one i am skipping is linux 6.11 feature.

1741922372
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
here some of the test skip 5.11 https://github.com/YoSTEALTH/Liburing/blob/master/test/os/unlink_test.py

1741922435
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
as in that feature is available in linux 5.11+ so skip if its < that

1741922443
grayhatter!~grayhatte@user/grayhatter
why would you give me an example for one version, but then link to another version? Why would you only skip 6.11, instead of everything before it? Why would you skip testing, instead of writing a test that works on every version, and degrades correctly if the kernel is older? Why is iouring not backwards compatable so that you don't even need to do version checks?

1741922475
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats how stuff works in linux

1741922483
grayhatter!~grayhatte@user/grayhatter
no it's not?

1741922509
grayhatter!~grayhatte@user/grayhatter
that might be how iouring works, but in linux, if you set a feature flag that's not supported by the kernel, it still mostly works

1741922525
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
if they kept backwards compatible, why would they bother with any other linux version? you would use linux 1.0 for rest of your life!

1741922582
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thats how it works with everything in linux, nothing to do with io_uring.

1741922631
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
here you see statx wasn't added into linux till 5.6 https://github.com/YoSTEALTH/Liburing/blob/master/test/lib/statx_define_test.py 

1741922638
grayhatter!~grayhatte@user/grayhatter
"you would use linux 1.0 the rest of your life" uh... what? bruh... u good? that's not how backwards compatibility works

1741922715
grayhatter!~grayhatte@user/grayhatter
but nevermind, I got my answer, there was no real reason, it was just something that worked

1741922806
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
just use zig and try to use a feature your linux doesn't support, you will figure it out if it doesn't crash your code the flag would be set to 0 and it wouldn't do anything.

1741922964
grayhatter!~grayhatte@user/grayhatter
it does sound like facebook code to just crash out of no where when a bitwise feature flag is unsupported

1741923020
grayhatter!~grayhatte@user/grayhatter
not even unsupported, but unknown

1741923051
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see, couldn't say much, never worked for them.

1741923191
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
fyi you still have to add future feature flag (just like how zig does it as well) even if your system doesn't support it. Lets say you are linux 5, if you use x feature it wont work but you can download new kernel and upgrade to linux 6, now all of that software/code starts working! you didn't have to recompile that code.

1741923496
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
could you imagine if you had to recompile all 2000+ software you are using on linux every time you graded your kernel?

1741942118
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
any examples available of creating pkg-config .pc files with the zig build system? https://github.com/Stazed/ntk-unofficial/blob/master/wscript#L454

1741945225
ifreund!2940d10f8b@user/ifreund
https://codeberg.org/river/river/src/commit/543697847f2167152ae25f775f39541591b8d020/build.zig#L242

1741945489
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
merci, I'll have a look

1741961715
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how can one use zig build install as root?

1741961928
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
sudo zig build install?

1741962086
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
then it doesn't know the zig command afaik

1741962137
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
at least on my system

1741962243
meidam!~meidam@user/meidam
You installed zig to the user instead of system wide, flower_?

1741962274
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
meidam: yep.

1741962309
meidam!~meidam@user/meidam
That's probably why

1741963271
fkobi!~user@user/fkobi
test

1741963293
fkobi!~user@user/fkobi
ok, so registration is required for sending messages

1741963295
fkobi!~user@user/fkobi
hello everyone

1741963306
ifreund!2940d10f8b@user/ifreund
welcome :)

1741963312
fkobi!~user@user/fkobi
I am completly new to Zig

1741963332
fkobi!~user@user/fkobi
I would like to run a shell command in my test

1741963365
fkobi!~user@user/fkobi
should I use std.process.execv for that?

1741963979
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Networking Q: std.net.tcpConnectToHost continues on error.ConnectionRefused, and returns other errors

1741964007
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
If a host has ipv6 and ipv4, but only listens to <port> on one of them, you will get an error.NetworkUnreachable

1741964016
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
So - I wonder if std should also continue on that error?

1741964034
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
But I don't know enough about what else can cause that error ... might cause other issues?

1741964042
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
For now I hve just reimplemented the function

1741969180
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
is there a language-wide preference on ordering of positional argumens, specifically allocator?   it seems that in stdlib most functions tend to put allocators first, but initially when i was learning Zig i somehow picked up the opposite convention (allocator last), i don't know how

1741969282
grayhatter!~grayhatte@user/grayhatter
netvor in absense of any other rule, order by importance, how much of the function could you do without that argument?

1741969307
grayhatter!~grayhatte@user/grayhatter
for most functions that need to alloc, the answer is nearly nothing, so alloc gets to go first

1741969315
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
umm, nice rule of thumb

1741969322
grayhatter!~grayhatte@user/grayhatter
the lastest arg should be almost optional

1741969343
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
yeah that clearly solves `options: Options` at least :)

1741969382
grayhatter!~grayhatte@user/grayhatter
then, there's the follow on advice which is, if you can write your funciton without alloc, you should, which means it almost always gets listed first

1741969463
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
i think for now i'll try to switch towards alloc first, it seems like it is much more common -- also it makes more sense given what you wrote

1741969501
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
ie. to make it more obvious that there is an allocator needed

1741969543
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
although i also saw someone using alloc prefix for that, eg. allocInstallDirString(allocator...)

1741974868
grayhatter!~grayhatte@user/grayhatter
netvor: that's a sin

1741974987
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
yeah world is full of sinners, what can we do... :D

1741974995
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
(i'm probably one of them :D)

1741975150
bblack!~bblack@wikimedia/bblack-WMF
speaking of allocators, and the recent GPA -> SmpAllocator thing, etc.... 

1741975174
bblack!~bblack@wikimedia/bblack-WMF
it seems like if one sticks to the idiomatic model of Zig, where all allocations happen with explicit allocators passed-down as needs be.

1741975220
bblack!~bblack@wikimedia/bblack-WMF
and that threads are explicitly spawned with e.g. std.Thread.spawn() (or even libc/pthread stuff, either way), and they have start functions with can also instantiate allocators....

1741975271
bblack!~bblack@wikimedia/bblack-WMF
if you can avoid having an allocated thing being freed by a different thread than the one that created it, you don't ever really need an SMP allocator.

1741975316
bblack!~bblack@wikimedia/bblack-WMF
you just spin up the first allocator in main and pass it around, and when you reach a Thread.spawn(), the start func of each new thread begins without any passed-in allocator and creates a local one for the thread to pass down within itself, etc.

1741975342
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
what do you mean by "GPA -> SmpAllocator thing"?   from 0.13 to 0.14 i replaced GPA with DebugAllocator (not that i remember what the release notes said exactly)

1741975343
grayhatter!~grayhatte@user/grayhatter
bblack: so, that thread specific allocator would call into the main allocator?

1741975377
grayhatter!~grayhatte@user/grayhatter
what makes that main allocator thread safe?

1741975409
bblack!~bblack@wikimedia/bblack-WMF
grayhatter: no, every thread gets a distinct, separate allocator instance (e.g. the pageallocator or another one that is independently backed by such)

1741975435
bblack!~bblack@wikimedia/bblack-WMF
that doesn't allow for cross-thread memory management, but it also means all allocators can blithely operate in single-threaded mode.

1741975502
bblack!~bblack@wikimedia/bblack-WMF
personally, I like the constraint that the thread that allocates a foo must be the one that frees it.  But imagine there is software I don't personally work on that doesn't fit that mold.

1741975509
grayhatter!~grayhatte@user/grayhatter
bblack: so every thread would mmap every time it needs to alloc?

1741975540
bblack!~bblack@wikimedia/bblack-WMF
if you just used the page_allocator directly, yeah, that would be the result.

1741975569
bblack!~bblack@wikimedia/bblack-WMF
or you can use an instanced allocator that's backed by page_allocator and is smarter locally, like DebugAllocator with its size bins, etc

1741975632
grayhatter!~grayhatte@user/grayhatter
so these threads wouldn't be able to share memory?

1741975638
bblack!~bblack@wikimedia/bblack-WMF
why not?

1741975654
bblack!~bblack@wikimedia/bblack-WMF
threads share an address space

1741975680
bblack!~bblack@wikimedia/bblack-WMF
they just can't /manage/ each others' memory (e.g. alloc objA in thread 1, free it in thread 2)

1741975733
grayhatter!~grayhatte@user/grayhatter
the producer/consumer pattern is pretty common

1741975762
grayhatter!~grayhatte@user/grayhatter
/shrug

1741975764
bblack!~bblack@wikimedia/bblack-WMF
yeah I get that.  it's not common for me though :)

1741976015
bblack!~bblack@wikimedia/bblack-WMF
I do this now with DebugAllocator in single-thread mode, and it works nicely for me.

1741976030
bblack!~bblack@wikimedia/bblack-WMF
but it'd be nice to have an option of a heavily-optimized allocator that's built for single-threaded use.

1741976474
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
If you unwrapp an error unions value, how does the if-else know what is error and what is value? I suppose 'if' always greps a value, and else is left for all errors?

1741976477
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
https://codeberg.org/ziglings/exercises/src/branch/main/exercises/033_iferror.zig

1741976506
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
Or are "err" and "value" standardized terms?

1741976742
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
IIUC, given foo is of error union type, in `if (foo) |a| { ...; } else |b| { ...; }`  .. `a` will always be of the main type, `b` will always be of the error type

1741976765
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
but i don't actually use this syntax at all, somehow I missed it

1741976769
grayhatter!~grayhatte@user/grayhatter
just like `if (maybe_null) |value| {...}` is a null check `if (maybe_error) |not_error| {} else |error_case| {}` is an error check, the captures don't matter

1741976863
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
i think if at all, i'd use something like `cosnt value = foo catch |err| switch (err) ...`

1741976872
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
s/sn/ns/

1741976892
grayhatter!~grayhatte@user/grayhatter
if a function return type is `ErrorKind!RealType` is syntatic sugar for NewType union(enum) { error: ErrorKind, real: RealType }; so the if uses that sugar similar to switch on a tagged union, but with extra correctness checks :)

1741977601
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
so roughly as expected

1741977648
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
so roughly as expected

1741977657
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
ups ^^'

1741977742
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
What do I do tpyically if I can only initialize a few, but not all, values of a struct? Is there a mechanism to define default values? In C, everything you don't explicitly set is 0

1741978023
grayhatter!~grayhatte@user/grayhatter
jemius: the "correct" answer is, you rewrite your code so you can

1741978056
grayhatter!~grayhatte@user/grayhatter
there are some cases where that answer is stupid, in thoes cases, you can use `undefined`

1741978186
grayhatter!~grayhatte@user/grayhatter
you can set them to 0 as well if that's your thing. But zig doesn't provide a default, and requires explicit values because it will prevent bugs that hard to find

1741978299
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
I mean, it's quite common for example to allocate a buffer of structs and then you fill it step by step, with many entries being undefined still

1741978406
grayhatter!~grayhatte@user/grayhatter
[10]?Struct = @splat(null);

1741978450
grayhatter!~grayhatte@user/grayhatter
or there's the len/capacity pattern 

1741978555
grayhatter!~grayhatte@user/grayhatter
var buffer: [10]Struct = undefined; var in_use: []Struct = buffer[0..10]; in_use.len = 0; in_use_capacity = 10; in_use.len = 1; in_use[0] = .{};

1741978624
grayhatter!~grayhatte@user/grayhatter
(that's how ArrayList works if you wanted to read a better example than just that)

1741978887
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
grayhatter: I see, thx

1741979143
grayhatter!~grayhatte@user/grayhatter
jemius: did you get an option that'll work?

1741979276
jemius!~jemius@2001:16b8:3de0:fb00:9e5c:a51b:1886:e470
grayhatter: I'm for now just learning, not really trying to solve anything "real"

1741980202
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
oh @splat() is nice, i need to use it more

1741980210
torque!~tachyon@user/torque
<jemius> What do I do tpyically if I can only initialize a few, but not all, values of a struct? Is there a mechanism to define default values?

1741980212
torque!~tachyon@user/torque
https://ziglang.org/documentation/0.14.0/#Default-Field-Values

1741980227
torque!~tachyon@user/torque
of course this only works if you yourself are defining the struct

1741980283
torque!~tachyon@user/torque
there's no magic default that makes sense (c zero-filling things is a lazy decision and can easily lead to bugs), so you have to pick based on your context

1741980618
grayhatter!~grayhatte@user/grayhatter
c only fills 0 on int types, which I think is fine

1741980630
grayhatter!~grayhatte@user/grayhatter
or numeric types?

1741980632
grayhatter!~grayhatte@user/grayhatter
something like that

1741980696
torque!~tachyon@user/torque
do you consider pointers to be numeric types

1741980935
torque!~tachyon@user/torque
or nested structs, or arrays? I mean, technically, in c, everything is a numeric type, or a collection thereof

1741980952
torque!~tachyon@user/torque
afaik the c behavior is more akin to just `memset(0)` than anyhting reasonable

1741981596
grayhatter!~grayhatte@user/grayhatter
torque: do I consider them? or does the c spec?

1741981608
grayhatter!~grayhatte@user/grayhatter
I don't, but I don't recall what the c spec specifies 

1741981636
grayhatter!~grayhatte@user/grayhatter
I would assume no, but then you're right that in C, everything is a usize if you stare at it long enough

1741981673
torque!~tachyon@user/torque
the point was that everything gets zeroed

1741981707
torque!~tachyon@user/torque
calling poiinters and nested structs "numeric types" is a contortion regardless of what the spec says

1741981723
torque!~tachyon@user/torque
so I was generally disagreeing with your statement that the behavior is "fine"

1741993112
Domo!~too@gw1.nor.fi
when we wrote C code for Amiga in 1990's and did not zero ( = 0;) global vars in code those got values that were in memory at that time ;/

1741996279
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
can't really wrap my head around this error:  src/subcommands/wish.zig:142:88: error: expected type 'core.Ini', found 'core.Ini'  ... i mean... :D

1741996450
grayhatter!~grayhatte@user/grayhatter
needs more context

1741996464
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
ok, i _think_ i know: broken imports.   i added 2 modules as path,  while one of them depends on the other via url

1741996479
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
so i effectively end up with 2 versions of the same module in the tree

1741996519
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
ie. zig is smart enough that core.Ini != core.Ini

1741996531
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
s/that/to know that/

1741996593
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
ahh, confirmed

1741996650
andrewrk!~andrewrk@mail.ziglang.org
netvor: this is why "fingerprint" was added to the build manifest. it's not used yet but it will give you an error when you have 2 conflicting versions in your tree, then you can decide how to resolve that conflict (select a winner, or duplicate packages, the latter of which you are seeing)

1741996702
netvor!~netvor@2a00:ca8:a1f:cd0:e564:58b3:3095:d92b
ah, nice.

