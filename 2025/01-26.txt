1737851106
grayhatter!~grayhatte@user/grayhatter
> silverlight

1737851113
grayhatter!~grayhatte@user/grayhatter
now there's a name I haven't heard in a long time

1737886699
mountaingoat!~mountaing@user/mountaingoat
i'm just gonna say it. zig test <foo> 2>&1 | cat to see test names is insane. somebody explain to me the fetish of hiding any identifiable information about running a TEST. i have a test (one of 98) hanging in a deadlock and i've spent 30 minutes trying to figure out which one it is

1737886767
mountaingoat!~mountaing@user/mountaingoat
my only explanation is that zig test is designed with the mindest that **all your tests pass**, which is the least useful approach when you're actually testing something

1737907597
Synon!~mkejji@user/Synon
Hey there quick question: if I have a []u8 and I've ensured (at runtime) that its length is > 6, is there a way I can store it as a [6]u8?

1737907631
Synon!~mkejji@user/Synon
Like, I have an std.ArrayList([6]u8) and I want to append a [6]u8 taken from 6 bytes of a []u8.

1737907676
Synon!~mkejji@user/Synon
For now the only way I found was `list.append(.{ raw[index], raw[index + 1], raw[index + 2], ... });`

1737907694
Synon!~mkejji@user/Synon
it's horrible but it compiles :D

1737907703
Synon!~mkejji@user/Synon
(and works as expected)

1737907721
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
you want to put the array in the list, or you want to put 6 bytes of list into an array?

1737907736
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
oh nevermind I see

1737907778
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
@memcpy(&array, raw[index..index+6])

1737907810
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
then append the array to the list

1737907855
Synon!~mkejji@user/Synon
oh

1737907875
Synon!~mkejji@user/Synon
thanks

1737909647
torque!~tachyon@user/torque
you should be able to do `list.append(raw[index..][0..6].*)`

1737909692
torque!~tachyon@user/torque
slicing with comptime known bounds creates a pointer to an array, which you can simply dereference to get an array

1737911533
grayhatter!~grayhatte@user/grayhatter
is there a way to set a tagged union within a nested inline for?

1737911631
grayhatter!~grayhatte@user/grayhatter
e.g. Thing union(EnumName) = {...}; inline for (@typeInfo(Thing).Union.fields) |u| { inline for (@typeInfo(u.type).Enum.fields) |e| { ... } }

1737912024
Gliptic!~glip@2a01:4f8:c012:91f3::1
grayhatter: define "set" (the first statement doesn't look like zig code)

1737912082
grayhatter!~grayhatte@user/grayhatter
Gliptic: yeah, sorry, omitted too much code

1737912140
grayhatter!~grayhatte@user/grayhatter
in the nested for I'd like to set @field(source, "name") = .{ u = @enumFromInt(e.value) };

1737912212
grayhatter!~grayhatte@user/grayhatter
let me paste a more complete example

1737912574
Gliptic!~glip@2a01:4f8:c012:91f3::1
the tagged union options are just fields, no? if you want to set a field by name, you'd do @field(source, "name") = the value of the field;, not anything with @enumFromInt

1737912613
grayhatter!~grayhatte@user/grayhatter
the answer is @unionInit()

1737914326
Synon!~mkejji@user/Synon
torque: thanks that worked too

1737914413
Synon!~mkejji@user/Synon
torque: but are the 6 bytes going to be statically assigned still?

1737914648
torque!~tachyon@user/torque
yes, because arrays are value types, so it's a copy

1737915584
Synon!~mkejji@user/Synon
great thanks!

1737919759
Synon!~mkejji@user/Synon
Can anyone point me to some example or tutorial for a TCP client? The most I could find is this that shows how to write but I don't know how to read a response back

1737919762
Synon!~mkejji@user/Synon
(https://cookbook.ziglang.cc/04-02-tcp-client.html)

1737920893
Earnestly!~earnest@user/earnestly
Doesn't seem to be abstractions over recvfrom(2) so you'll likely have to call it directly via the std.c ot std.posix, I suppose

1737921092
torque!~tachyon@user/torque
tcp abstraction is https://ziglang.org/documentation/0.13.0/std/#std.net.Stream

1737921128
torque!~tachyon@user/torque
you can see read and write methods there

1737921863
Earnestly!~earnest@user/earnestly
Ah, was looking for 'recv'

1737928312
Synon!~mkejji@user/Synon
Thanks torque

