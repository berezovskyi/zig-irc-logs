1760149253
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i should be able to write this without error: return if (self.iovec) |iovec| iovec.len else 0;

1760149272
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
getting ""error: type '[*]cimport.struct_iovec' does not support field access""

1760149305
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
wait i am dumb

1760158493
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
how to convert isize to usize @intCast() doesn't seem to work. 

1760159191
clevor!sid649024@id-649024.hampstead.irccloud.com
`@bitCast` works, but wrapping occurs,

1760159193
clevor!sid649024@id-649024.hampstead.irccloud.com
.*

1760159298
squeek502!~squeek502@user/squeek502
stealth_, intCast does work: https://zigbin.io/a6ac87

1760159335
clevor!sid649024@id-649024.hampstead.irccloud.com
Not on negative integers.

1760159367
clevor!sid649024@id-649024.hampstead.irccloud.com
Unless you want wrapping

1760159393
squeek502!~squeek502@user/squeek502
right, it'll invoke illegal behavior (checked in safe modes) if the value is negative

1760159448
squeek502!~squeek502@user/squeek502
`@intCast` is an option if you know the value will fit in a usize, though

1760159704
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, it does work, i was using it in a `for (0.. length)` it was giving me error

1760159898
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
it had to do with formatting error, but it was so vague, thanks u guys. 

1760159919
clevor!sid649024@id-649024.hampstead.irccloud.com
np

1760186514
erock!8a023a9e4a@pico/erock
https://bun.com/blog/bun-v1.3

1760187388
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
looks nice, bun seems like a handy project.

1760189524
erock!8a023a9e4a@pico/erock
it might be time for me to finally start using it

1760204131
rvrb!~rvrb@156.146.51.228
if I have to use node, I use bun. but I just try never to put myself in situations where I need to use node.

1760205655
rvrb!~rvrb@156.146.51.228
this idea of a zig subcommand that downloads and compiles zig from any git tree makes me want it like yesterday: https://ziggit.dev/t/introducing-zv-a-blazing-fast-zig-version-manager-project-starter/12315/23

1760205807
rvrb!~rvrb@156.146.51.228
I've been messing with the SPIR-V backend and have hit a wall which can only be solved by an outstanding contributed PR, and it would be incredible to just redirect to that branch and move on

1760210665
rvrb!~rvrb@156.146.51.228
is it possible to get @sizeOf() for a different target?

1760210744
rvrb!~rvrb@156.146.51.228
let me ask the question I am actually asking, can @Vector(2, f32) end up being different sizes between CPU and SPIR-V

1760210935
rvrb!~rvrb@156.146.51.228
I think the answer is that the alignment can differ, which means the @sizeOf(ContainingStruct) can change if not using extern struct

1760211021
rvrb!~rvrb@156.146.51.228
and then to answer my original @sizeOf() question - no not really because @sizeOf(T) where T is not a well defined layout can change between different compilations 

1760211083
synaps3!~bob@user/synaps3
hello, how do i start with zig ? Is there a way without compilation ? I downloaded bootstrap but it seems I have to compile it. Are there binaries anywhere ?

1760211174
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
synaps3, https://www.youtube.com/watch?v=MMtvGA1YhW4

1760211306
synaps3!~bob@user/synaps3
om i missed the other platforms part lol

1760211503
synaps3!~bob@user/synaps3
it's working thanks!

1760221377
clevor!sid649024@id-649024.hampstead.irccloud.com
If I were to format a sha256 digest with `"{b64}"`, would the result always be 44 bytes long?

1760221684
grayhatter!~grayhatte@user/grayhatter
clevor... uh, no?

1760221704
grayhatter!~grayhatte@user/grayhatter
sha256 is not 22 bytes long

1760221733
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, b64 isn't hex?

1760221736
grayhatter!~grayhatte@user/grayhatter
oh, base64, then yes, base64 is deterministic

1760221839
clevor!sid649024@id-649024.hampstead.irccloud.com
Nice

1760221866
grayhatter!~grayhatte@user/grayhatter
b64 encoding is always input.len * 3/4

1760221882
clevor!sid649024@id-649024.hampstead.irccloud.com
yay

1760221882
grayhatter!~grayhatte@user/grayhatter
round up

1760221925
grayhatter!~grayhatte@user/grayhatter
well.... technically, you *could* omit the padding == but not every parser will tolerate that 

1760221992
Affliction!affliction@idlerpg/player/affliction
ACTION added a nasty hack to python code years ago to try appending = then == if the base64 decode errored.

1760222014
grayhatter!~grayhatte@user/grayhatter
Affliction: that's arguably how you should do it

1760222026
Affliction!affliction@idlerpg/player/affliction
Though I later learned after writing my own implementation, the b64 string should always be a multiple of 4 chars

1760222030
grayhatter!~grayhatte@user/grayhatter
I'm mad now reading the wiki article about b64 >PIn addition, allowing padless decoding by definition allows multiple strings to decode into the same set of bytes, which can be a security risk

1760222040
grayhatter!~grayhatte@user/grayhatter
uh.... no? HOW?

1760222062
Affliction!affliction@idlerpg/player/affliction
each char is 6 bits

1760222082
Affliction!affliction@idlerpg/player/affliction
so, to get byte alignment, you need 4 chars

1760222083
Gliptic!~glip@2a01:4f8:c012:91f3::1
they mean a prefix of some string can be decoded as a different string I think

1760222114
Gliptic!~glip@2a01:4f8:c012:91f3::1
which is nothing like what they said I guess

1760222137
grayhatter!~grayhatte@user/grayhatter
either your encoded string % 4 == 0, or it doesn't, and you append 1-3 = to padd it

1760222172
Affliction!affliction@idlerpg/player/affliction
You shold only need one or two =s, if length % 4 == 1, you only have 6 bits of the last byte. That'll be invalid.

1760222205
grayhatter!~grayhatte@user/grayhatter
Gliptic: I have been burned too many times by trying to read it (correctly) the way you did... but I now avoid reading it like that because they could be implying that there's a decoder out there that will just make stuff up, and insert whatever it wants resulting in different strings

1760222294
grayhatter!~grayhatte@user/grayhatter
Affliction said what I was thinking, if you treat padding as null, you might return the high 6 valid bits, and undefined for the 2 low bits

1760222305
Affliction!affliction@idlerpg/player/affliction
right

1760222328
Affliction!affliction@idlerpg/player/affliction
In theory an encoder and decoder could agree on those last 2 bits, but that would Technically not be base64

1760222341
Affliction!affliction@idlerpg/player/affliction
and, to clarify, that's a multiple of 4 chars with padding

1760222358
grayhatter!~grayhatte@user/grayhatter
base64 is not encryption, so it doesn't belong anywhere near security measures

1760222374
grayhatter!~grayhatte@user/grayhatter
^ I have had to explain this **way** too many times

1760222394
grayhatter!~grayhatte@user/grayhatter
I die inside a little bit everytime I heard base64 encrypted

1760222422
Affliction!affliction@idlerpg/player/affliction
"ok, we'll use ascii armor then. It's called armoring so it must be safe!"

1760222505
Gliptic!~glip@2a01:4f8:c012:91f3::1
I prefer rot26 for serious encryption

1760222528
Affliction!affliction@idlerpg/player/affliction
rot26? nah, all the serious folks are on rot39 now

1760222548
Gliptic!~glip@2a01:4f8:c012:91f3::1
rot13 is a bit too weak, so taking a leaf from triple-des I double it

1760222589
Gliptic!~glip@2a01:4f8:c012:91f3::1
hm, good point, there's a reason DES was done three times

1760222590
grayhatter!~grayhatte@user/grayhatter
double rot13 is how I used to tell if I should respect the security analyst I was talking to

1760222601
Gliptic!~glip@2a01:4f8:c012:91f3::1
to increase the key size, so rot39 should have a better key size

1760222645
Affliction!affliction@idlerpg/player/affliction
I should try write an ascii85 implementation one of these days

1760222668
Affliction!affliction@idlerpg/player/affliction
...but then it's largely similar to base64 afaik, just instead of shifting and masking, you have to multiply and divide

1760222714
Gliptic!~glip@2a01:4f8:c012:91f3::1
I re-invented ascii85 once

1760222763
Gliptic!~glip@2a01:4f8:c012:91f3::1
the nice thing about base85 is that it's the optimal base for X chars encoding Y bytes (5 -> 4), 85^5 is quite close to 256^4

1760222834
Affliction!affliction@idlerpg/player/affliction
huh, TIL

1760222882
Gliptic!~glip@2a01:4f8:c012:91f3::1
well, optimal in a certain range of available characters

1760222890
Gliptic!~glip@2a01:4f8:c012:91f3::1
of course base64 and base128 are better

1760222900
Affliction!affliction@idlerpg/player/affliction
here I figured that was just the number of printables that could pass through systems perfectly with various constraints

1760222935
Affliction!affliction@idlerpg/player/affliction
base128 would inevitably involve null or non-ASCII though

1760222977
Affliction!affliction@idlerpg/player/affliction
Though there are the higher ones that optimize for unicode codepoints; https://github.com/qntm/base32768

1760223464
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Today I learned Alpine/edge packages zig 0.15.1 https://pkgs.alpinelinux.org/packages?name=zig

1760223499
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
im getting nightmares thinking about packaging llvm 20

1760223517
coleman!~coleman@static.87.86.161.5.clients.your-server.de
did you have to do that?

1760223532
coleman!~coleman@static.87.86.161.5.clients.your-server.de
If so, thank you for your service.

1760223560
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
we still **have** to do that over at void

1760224873
grayhatter!~grayhatte@user/grayhatter
coleman: funny enough, I learned the other night myself, I had to do a custom install for Arch, and was about to do the same, but then `apk upgrade` reminded me why Alpine is such a nice distro

1760224964
coleman!~coleman@static.87.86.161.5.clients.your-server.de
Well, I was setting up CI on sourcehut. And I was thinking, "Okay, how do I find or run a mirror to be polite to everyone's bandwidth?" And then I was like Oh I bet Alpine has this.

1760225000
coleman!~coleman@static.87.86.161.5.clients.your-server.de
I don't even use Alpine or Musl, but right now I'm content to just keep it building on there while I ramp up. Eventually I'll need to build on everything.

1760225352
Affliction!affliction@idlerpg/player/affliction
grayhatter: In other news, I've done absolutely nothing with that standard library diff rss concept over the last 2 weekends!

1760225373
Affliction!affliction@idlerpg/player/affliction
well, I read a bunch of docs, but haven't done anything with them

1760225425
grayhatter!~grayhatte@user/grayhatter
Affliction: lol, reading docs is progress, and progress is progress

