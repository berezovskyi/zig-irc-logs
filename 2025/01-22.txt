1737504469
andrewrk!~andrewrk@mail.ziglang.org
NickH: question from somebody on zsf.zulipchat.com - do you know if anything is blocking packages for other architectures than amd64?

1737504504
NickH!~NickH@2405:6581:d4e0:1600:2b46:79a:7e70:a4bc
I do not. But I am not the right person to ask.

1737506963
grayhatter!~grayhatte@user/grayhatter
I find myself needing to invent a DSL, does anyone have any reading recs for writing an AST?

1737507999
fabled!fabled@user/fabled
grayhatter: what are you trying to do with an AST, more specifically? I have more interest than experience but can try to field a question or two

1737508291
grayhatter!~grayhatte@user/grayhatter
I'm looking for the mininmum set of understands and common assumptions needed so that I can ask somewhat intelligent questions

1737508345
grayhatter!~grayhatte@user/grayhatter
understandings*

1737508547
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
grayhatter: have you written a math parser to ast with the shunting yard algorithm?

1737508551
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
https://en.m.wikipedia.org/wiki/Shunting_yard_algorithm

1737508587
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I donâ€™t know how well it works for a full language but it worked really well to create an ast for a search string 

1737508671
fabled!fabled@user/fabled
grayhatter: I haven't personally worked through this whole book but I hear it's well regarded, and this section matches with what I cobbled together from random .edu slide deck pdfs - https://craftinginterpreters.com/parsing-expressions.html

1737508699
grayhatter!~grayhatte@user/grayhatter
rockorager: I haven't, this looks much closer to what I want

1737508818
grayhatter!~grayhatte@user/grayhatter
oooh, this looks good too, thank you fabled 

1737513020
dsal!sid13060@id-13060.lymington.irccloud.com
Can I initialize a `[4]u8` with a literal string?

1737513088
grayhatter!~grayhatte@user/grayhatter
dsal: yes "abcd".*

1737513192
dsal!sid13060@id-13060.lymington.irccloud.com
Huh.  How do I know this?  :)

1737513228
grayhatter!~grayhatte@user/grayhatter
dsal: are you asking how you *would* know this? otherwise I don't understand the question 

1737513270
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah.  I think that's probably right.  I'm trying to write a parser for a binary data format and it's got a four byte string identifier type used throughout it.  I would not have discovered that syntax.

1737513426
grayhatter!~grayhatte@user/grayhatter
you probably would eventually, once you figured out that "string" is just a pointer to some different memory location that you don't know about. Then once you realize that "string" isn't [6:0]u8, but instead it's a pointer to it, e.g. *const [:0]const u8, then from that, you get used to some_var.* to access the bytes at that ptr address

1737513458
dsal!sid13060@id-13060.lymington.irccloud.com
Makes sense.  I kind of learn backwards.

1737513479
grayhatter!~grayhatte@user/grayhatter
I'm sure what I've just said will make someone mad enough to correct me with an "um actually" because I've technically said something slightly wrong

1737513520
dsal!sid13060@id-13060.lymington.irccloud.com
I think English descriptions of technology are always slightly wrong.  Or not useful.

1737513522
grayhatter!~grayhatte@user/grayhatter
but thinking of "string" as local memory, has always frustrated me, and thinking of it as a "magic pointer" somewhere else makes it behave like I'd expect it to

1737513547
grayhatter!~grayhatte@user/grayhatter
dsal: what's your primary language?

1737513554
dsal!sid13060@id-13060.lymington.irccloud.com
Haskell mostly.

1737513565
grayhatter!~grayhatte@user/grayhatter
ahh, yeah, I totally get that

1737513580
grayhatter!~grayhatte@user/grayhatter
I actually had a similar thought just a few hours ago

1737513590
grayhatter!~grayhatte@user/grayhatter
I read the quote 

1737513593
grayhatter!~grayhatte@user/grayhatter
> The stack pointer was chosen to run "downhill"

1737513619
grayhatter!~grayhatte@user/grayhatter
and mentioned to a friend how that's the only description of a stack ptr that I think isn't confusing or misleading

1737513660
torque!~tachyon@user/torque
were you looking to get corrected, or was that just a glib statement

1737513676
dsal!sid13060@id-13060.lymington.irccloud.com
Wrong answers are more useful to me at this point.  :)

1737513681
grayhatter!~grayhatte@user/grayhatter
I'm never gonna say grows downward again

1737513774
grayhatter!~grayhatte@user/grayhatter
torque: being glib; I personally find slightly incorrect heuristics to be more helpful, which makes them "technically incorect" the worst kind of incorrect, thus, you'll get corrected on the internet for saying them

1737513790
torque!~tachyon@user/torque
only point of note I would make is that "string" is actually `*const [6:0]u8` i.e. a pointer to an array. this is useful to know because pointers to arrays can implicitly coerce to slices, which is why `const mystr: []const u8 = "string"` works without additional syntax

1737513820
torque!~tachyon@user/torque
and of course if you dereference it, you get an array

1737513851
grayhatter!~grayhatte@user/grayhatter
[6:0]u8 is a pointer type, so my desciption is wrong-ish, but if you think of it that way, something that IMO inutitively should work [4]u8 = "ABCD" but doesn't, it makes sense why

1737513864
torque!~tachyon@user/torque
[6:0]u8 is not a pointer type

1737513870
torque!~tachyon@user/torque
it is an array

1737513961
grayhatter!~grayhatte@user/grayhatter
I don't think I've ever "seen" *const [6:0]u8` I've only seen `[6:0]u8`

1737513983
grayhatter!~grayhatte@user/grayhatter
^ this wasn't meant as a description of reality, just my inability to read... I think

1737514024
torque!~tachyon@user/torque
@TypeOf("string")

1737514037
grayhatter!~grayhatte@user/grayhatter
^^ this wasn't meant as a description of reality, just my inability to read... I think

1737514070
torque!~tachyon@user/torque
very well, carry on

1737514116
dsal!sid13060@id-13060.lymington.irccloud.com
Ugh.  This formatter is putting a large struct on a single line.

1737514130
torque!~tachyon@user/torque
add a comma after the last member

1737514134
dsal!sid13060@id-13060.lymington.irccloud.com
I stuck a comment in the middle to thwart it.

1737514136
dsal!sid13060@id-13060.lymington.irccloud.com
ah

1737514151
dsal!sid13060@id-13060.lymington.irccloud.com
Oh weird, adding the comment did that

1737514170
torque!~tachyon@user/torque
generally, the formatter lets the user choose to have things be one line or multiline by whether or not there is a trailing comma

1737514179
grayhatter!~grayhatte@user/grayhatter
/ zig-fmt: off

1737514188
grayhatter!~grayhatte@user/grayhatter
I think... or something like that

1737514201
dsal!sid13060@id-13060.lymington.irccloud.com
I'm kind of delighted it allowed me to define this structure just about the same way I did in Haskell.  It's a recursive sum type.  This is going to be fun.

1737514204
grayhatter!~grayhatte@user/grayhatter
you can also add linebreaks to *some* arrays without the trailing

1737514209
grayhatter!~grayhatte@user/grayhatter
I don't know the rules for that though

1737514245
dsal!sid13060@id-13060.lymington.irccloud.com
The formatter has generally not been offensive.

1737514250
grayhatter!~grayhatte@user/grayhatter
without the trailing comma

1737514264
dsal!sid13060@id-13060.lymington.irccloud.com
I've worked in some languages/companies where the standard format is just awful and nobody should have to see it.

1737514268
andrewrk!~andrewrk@mail.ziglang.org
I'm aware of a couple offensive things, will get around to it eventually if no contributors step up

1737514274
grayhatter!~grayhatte@user/grayhatter
I really like zig fmt exists, there's only one thing I hate about it

1737514558
grayhatter!~grayhatte@user/grayhatter
dsal: depending on what you're trying to do, you might be able to use "some array" ++ []u8{ more of the array } to trick the formatter into doing what you want

1737514627
grayhatter!~grayhatte@user/grayhatter
that's a trick I wish I knew about before, when adding "binary" vectors for a test I was writing :)

1737514719
grayhatter!~grayhatte@user/grayhatter
andrewrk: I've also been enjoying infected mushroom... perhaps all zig releases need "suggested listening notes" paired with them :D

1737514725
andrewrk!~andrewrk@mail.ziglang.org
ha

1737515035
grayhatter!~grayhatte@user/grayhatter
0.14.0 pairs really well with a stout IPA, and Saeed -- Infected Mushroom

1737515493
andrewrk!~andrewrk@mail.ziglang.org
great song

1737526266
dsal!sid13060@id-13060.lymington.irccloud.com
How do I pass a Reader to a function?  I see some examples using `anytype` which seems a little odd.  I just want to read some bytes.

1737526339
grayhatter!~grayhatte@user/grayhatter
dsal: you could specifiy the single reader you know is possible, but if you don't know, or don't care what flavor of reader it is, you would accept std.io.AnyReader

1737526392
glguy!glguy@libera/staff/glguy
You can turn your reader into an AnyReader with .any() (I added that to my aoc program :) )

1737526510
dsal!sid13060@id-13060.lymington.irccloud.com
Oh nice.  You just solved my next problem.

1737526632
tsujp!497e1f7b6a@sourcehut/user/tsujp
battling with whether or not to use comptime to generate a big enum versus just having it literally in source, the latter is clearer with better grepablity so probably going to do that

1737526644
tsujp!497e1f7b6a@sourcehut/user/tsujp
even though the former already works and is very cool (I have name templating, custom ranges etc)

1737526685
grayhatter!~grayhatte@user/grayhatter
commit the comptime generator

1737526724
grayhatter!~grayhatte@user/grayhatter
it would be trivial to delete that, and replace it with the generated enum. It would not be trivial to re-write the generator from just an enum

1737526852
tsujp!497e1f7b6a@sourcehut/user/tsujp
grayhatter: this is said functionality: https://github.com/tsujp/zevem/blob/master/src/main.zig#L9-L65

1737537151
tsujp!497e1f7b6a@sourcehut/user/tsujp
is there a way to force the zig formatter to align a bunch of inline comments in a specific region?

1737537202
tsujp!497e1f7b6a@sourcehut/user/tsujp
imagine an enum, its fields are of varying length, you've got a comment on the same line as each of those fields, you want those comments lined up instead of ragged due to the literal enum field names not all being the same length

1737537461
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah basically i want this but for comments in a region, but if the code was aligned it solves the comments too https://github.com/ziglang/zig/issues/17145

1737586543
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Can I change where an install step puts an executable? https://blinry.org/tiny-linux/ I was just copying this because it's neat but with Zig for the init was wondering if I can have build.zig automatically put it into zig-out/initramfs/bin/ instead

1737586688
andrewrk!~andrewrk@mail.ziglang.org
bwbuhse: yes you can. there is -p/--prefix for changing the main parent directory of the installation, and you can also adjust the relative path for any particular artifact

1737587411
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
andrewrk: yeah, I knew about -p I just meant if I could code it into the build.zig. How do you adjust the relative path?

1737588060
andrewrk!~andrewrk@mail.ziglang.org
bwbuhse: there's a bunch of example code here that adjusts the relative paths: https://codeberg.org/andrewrk/groovebasin/src/commit/9022521c445c2ba398f2f646aa24241ecd1a715a/build.zig#L128-L180

