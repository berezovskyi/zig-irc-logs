1744442162
mountaingoat!~mountaing@user/mountaingoat
how do you run zig test with a module (fetched with zig fetch) again?

1744447647
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how do I catch a err twice in a switch? https://git.sr.ht/~flower/zjasmnotes/tree/develop/item/src/main.zig#L50

1744447692
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
based on the err, I want to create a file and catch that err as well

1744451772
o0x1eef!~user@user/o0x1eef
smlavine: Might be useful to you, it was created around the time 0.14.0 was released so is more or less the same https://git.hardenedbsd.org/hardenedbsd/ports/-/tree/hardenedbsd/main/lang/zig-devel

1744451836
o0x1eef!~user@user/o0x1eef
Alternatively nudge the maintainer of the zig port to update, there's nothing that stops it from working afaik

1744476570
grayhatter!~grayhatte@user/grayhatter
flower_: I can't get past the sr.ht bot detection, do you have a different link?

1744478923
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: hm: https://git.sr.ht/~flower/zjasmnotes

1744479032
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm open for any advise, as it is my first zig project. Felt a little better today.

1744479600
smlavine!~smlavine@sourcehut/user/smlavine
o0x1eef: I saw Andrew tried to build for FreeBSD on stream yesterday and it failed, so I'm not sure

1744479608
smlavine!~smlavine@sourcehut/user/smlavine
I don't have a pressing need though

1744479774
grayhatter!~grayhatte@user/grayhatter
flower_: if I can't get past sr.ht's bot detection, do you think sending me another sr.ht link will work?

1744479792
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: ah really? Other browser?

1744479810
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: if nothing helps, sure I may be able to put it on codeberg

1744479814
grayhatter!~grayhatte@user/grayhatter
I don't have another browser

1744479833
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
sudo apt install anotherbrowser

1744479835
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
;)

1744479864
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok will upload it to codeberg

1744479896
grayhatter!~grayhatte@user/grayhatter
`sudo: apt: command not found`

1744479988
grayhatter!~grayhatte@user/grayhatter
but to be fair, I only ran that command beacuse I knew apt didn't exist... helping fix zig code is something I do because it's easy to helpful, I have no interest in adopting homework for it

1744480027
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: https://codeberg.org/avlap/zjasmnotes

1744480124
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/src/main.zig#L53

1744480267
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
project is not in compile state atm, just added some pseudo code

1744480277
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
maybe the develop branch is

1744480291
grayhatter!~grayhatte@user/grayhatter
flower_: this function looks pretty rough..... I'd probably write this backwards from the way you have, and use createFile(..., .{ .truncate = false });

1744480370
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: I write rough code I guess ;) First make it work. 

1744480374
grayhatter!~grayhatte@user/grayhatter
is this an api you're trying to duplicate?

1744480384
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
not duplicate, but use

1744480401
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I use a c header file

1744480409
grayhatter!~grayhatte@user/grayhatter
I assume save_file_path can never be null?

1744480437
grayhatter!~grayhatte@user/grayhatter
then declare it without the ?[*:0] without the ?

1744480485
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I think it needs that type

1744480504
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/src/main.zig#L292

1744480558
grayhatter!~grayhatte@user/grayhatter
C doesn't have the concept of nullable

1744480570
grayhatter!~grayhatte@user/grayhatter
it doesn't have it the way zig does

1744480595
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok, I'll look at it, see if it compiles without

1744480596
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
thx

1744480659
grayhatter!~grayhatte@user/grayhatter
calling nsmOpen where save_file_path is null makes no sense. So unless there's an API spec somewhere that says it might be null, then simpler code is better... you're also discarding the error on line 43 with save_file_path.?

1744480708
grayhatter!~grayhatte@user/grayhatter
`?[*:0]const u8` is better than `[*:0]const u8` IFF it actaully can be null, and you check if it's null

1744480732
grayhatter!~grayhatte@user/grayhatter
safe_file_path.? isn't a null check, it's just saying yolo!

1744480919
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: https://zigbin.io/c6dd88

1744481002
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm wait

1744481036
grayhatter!~grayhatte@user/grayhatter
yeah, because you're using the c api, `[*c]u8` is prefered over `?[*:0]u8`

1744481110
grayhatter!~grayhatte@user/grayhatter
also, going by just the nsm.h file in your repo, I'm not sure you should save to the file you opened

1744481209
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: I've read somewhere that you shouldn't use the c in [*c] directly

1744481249
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
in a github issue, answered by a zig core member IIRC

1744481324
grayhatter!~grayhatte@user/grayhatter
I'd love that cite if you have it

1744481349
grayhatter!~grayhatte@user/grayhatter
interfacing directly with C is why `*c` exists

1744481376
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: https://github.com/ziglang/zig/issues/11630#issuecomment-1123237243

1744481379
grayhatter!~grayhatte@user/grayhatter
it is correct that if you can use anything *other* than `*c` you should

1744481413
grayhatter!~grayhatte@user/grayhatter
but you're creating a c API function, accepting *c pointers... if this isn't where you'd want to use them, then *c shouldn't exist

1744481497
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I understood it as: leave that to translate-c

1744481505
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
but didn't dive into it

1744481538
grayhatter!~grayhatte@user/grayhatter
flower_: it comes from https://github.com/ziglang/zig/issues/2984 I disagree with andrewrk on this, and will continue to use it until he comes to his senses, or removes *c

1744481559
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/ziglang/zig/issues/2984#issuecomment-523937651

1744481562
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
indeed

1744481610
grayhatter!~grayhatte@user/grayhatter
`[*c]` is more correct than `?[*:0]` because `?[*:0]` implies that it might be null, and when working with c code, it's often a promise that will never happen

1744481659
grayhatter!~grayhatte@user/grayhatter
a similar function, https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/NSM/nsm.h#L473 likewise doesn't do a null check

1744481726
grayhatter!~grayhatte@user/grayhatter
of course it also alloc's to duplicate the string, when it might return if the file exists... so clearly it has bugs https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/NSM/nsm.h#L475 

1744481862
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
you mean bugs in nsm.h?

1744481875
torque!~tachyon@user/torque
disagree that [*c] is ever more correct than a properly defined type

1744481917
torque!~tachyon@user/torque
of course all pointers in C can be null. the zig bindings can simply remove the optional qualifier from that if they are willing to make that promise to zig code

1744481944
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
this should do a null check right? https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/NSM/nsm.h#L473

1744481951
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm also new to C, heh

1744481958
torque!~tachyon@user/torque
claiming that "it's often a promise that will never happen" is such ridiculously bad advice I can't even comprehend it

1744481979
torque!~tachyon@user/torque
this is exactly why there are so many problems with null pointer dereferences in c codebases

1744482019
grayhatter!~grayhatte@user/grayhatter
torque: the answer to "can save_file_path be null" is abmigious, *c maintains that ambiguity. where ?[*:0] implies it might be, and requires a reall null check, where [*:0] implies it can't be null, and requires no check. 

1744482052
torque!~tachyon@user/torque
[*c] always requires a null check. it's not "ambiguous"

1744482068
torque!~tachyon@user/torque
please do not give advice to people that will cause bugs and crashes

1744482072
grayhatter!~grayhatte@user/grayhatter
using [*c] mantains that waring of "hey, there's sketchy stuff going on" where ?[*:0] says, you need to null check

1744482093
torque!~tachyon@user/torque
it turns out you do need to null check pointers that can be null. using the type system to enforce this is good

1744482108
torque!~tachyon@user/torque
this is, like, the whole point of optional being part of the type

1744482122
grayhatter!~grayhatte@user/grayhatter
torque: as written, if compiled without safety checks, this will segv, or it'll panic if compile with safety checks. I'm not giving advice that will meaningfully change the behavior of this program

1744482156
grayhatter!~grayhatte@user/grayhatter
please don't strawman my point

1744482180
torque!~tachyon@user/torque
you are actively giving advice that may cause programs to misbehave at runtime for no reason

1744482184
grayhatter!~grayhatte@user/grayhatter
this open() callback, makes no sense if save_file_path is null

1744482206
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
doing the check twice, is that sane or overdo? https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/src/main.zig#L68

1744482216
torque!~tachyon@user/torque
I get a 404 on all of these links

1744482243
grayhatter!~grayhatte@user/grayhatter
torque: you do?

1744482252
grayhatter!~grayhatte@user/grayhatter
logged out?

1744482274
torque!~tachyon@user/torque
yes, I am not logged in to codeberg

1744482279
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm

1744482289
grayhatter!~grayhatte@user/grayhatter
codeberg seems to have the same issues that sr.ht has

1744482308
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
fixed?

1744482320
torque!~tachyon@user/torque
yea

1744482342
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
repo was public, general visibility settings I suppose

1744482454
torque!~tachyon@user/torque
I would probably nest the createFile call directly in the first switch FileNotFound error clause to avoid having to make a boolean var but you can't get around needing to handle the possible errors from the readFile and createFile calls separately

1744482537
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
yeah that was the original question, a bit unsatisfying isn't it?

1744482692
grayhatter!~grayhatte@user/grayhatter
flower_: this is how I'd write this https://zigbin.io/09744c

1744482730
grayhatter!~grayhatte@user/grayhatter
I *think* this will address torque's issues, and should always behave predictably no matter how bad new session manager behaves

1744482826
grayhatter!~grayhatte@user/grayhatter
oh, you also need `path_slice_g = path_buf_g[0..];` as well

1744482879
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: interesting, also line 11 and 12, hm

1744482895
grayhatter!~grayhatte@user/grayhatter
I think the default path size is 2048, not 255

1744482932
grayhatter!~grayhatte@user/grayhatter
might be better to alloc.dupe(path) instead if you don't trust nsmd

1744482942
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: but you also use that: var file_not_found = false;

1744482953
grayhatter!~grayhatte@user/grayhatter
flower_: I didn't rewrite that part

1744482957
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I feel that the language should be able to handle this better

1744482966
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
or that I should handle this better :)

1744482993
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
it's the path name, 255

1744483061
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Max filename length255 bytes

1744483068
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://en.wikipedia.org/wiki/Ext4

1744483097
grayhatter!~grayhatte@user/grayhatter
https://zigbin.io/cf1dc5

1744483115
grayhatter!~grayhatte@user/grayhatter
flower_: a path != filename

1744483164
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm

1744483182
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I see

1744483250
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: your code doesn't do the same as mine I think. I want to create a file, if it already exists, read it to a buffer.

1744483301
grayhatter!~grayhatte@user/grayhatter
>  The client MUST choose one of the four strategies below to save, so that every file in the session can be traced back to a client and, vice versa, a client name.ID can be used to look up all its files. (For example to clean up the session dir)

1744483314
grayhatter!~grayhatte@user/grayhatter
flower_: in what way doesn't it do what yours did?

1744483323
grayhatter!~grayhatte@user/grayhatter
https://new-session-manager.jackaudio.org/api/index.html#server-to-client-control-messages-open

1744483360
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: you know your stuff ...

1744483389
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: yours just tries to create a file, right?

1744483430
grayhatter!~grayhatte@user/grayhatter
your client doesn't follow this, but the nsm docs don't prescribe a clear behavior, even though they seem to have one in mind

1744483467
grayhatter!~grayhatte@user/grayhatter
flower_: > Creates, opens, or overwrites a file with write access

1744483470
grayhatter!~grayhatte@user/grayhatter
https://ziglang.org/documentation/master/std/#std.fs.Dir.createFile

1744483481
grayhatter!~grayhatte@user/grayhatter
> you know your stuff ... 

1744483488
grayhatter!~grayhatte@user/grayhatter
sometimes, torque disagrees :P

1744483504
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
" If a project exists at the path, the client MUST immediately open it. "

1744483556
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: I mean, the fact that you seems to know nsm

1744483671
grayhatter!~grayhatte@user/grayhatter
flower_: what is you nsm client gonna do?

1744483714
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: it's basically just a zig / nsm.h / c in zig test. Store session notes.

1744483724
grayhatter!~grayhatte@user/grayhatter
notes, like text?

1744483730
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
yep

1744483731
grayhatter!~grayhatte@user/grayhatter
or notes like abcd

1744483738
grayhatter!~grayhatte@user/grayhatter
f#

1744483750
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
no text 

1744483781
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
A short description about the session.

1744483805
grayhatter!~grayhatte@user/grayhatter
if it were me, I'd use `save_path` as a folder of notes, and create a directory, that way you can have multiple note types. day0.txt, and day1.md, etc

1744483856
grayhatter!~grayhatte@user/grayhatter
unless you feel strongly that it should be a flat file, in which case, you can just open the file

1744483862
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
my plan is to ignore the api in this case and make a general session notes file, without ID suffix. Each client opens that file.

1744483866
blurrycat!~blurrycat@user/blurrycat
gotta be logged in for sr.ht links to work properly, otherwise you hit their llm honeypot 

1744483875
grayhatter!~grayhatte@user/grayhatter
when using createFile, be sure you specify .truncate = false

1744483889
grayhatter!~grayhatte@user/grayhatter
.truncate = true will delete the file

1744483917
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm yeah this is how jackpatch is doing it as well

1744483942
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
you've read it into memory right?

1744483951
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
the content of the file

1744483961
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
e.g. I did, you didn't as far as I could see

1744483969
grayhatter!~grayhatte@user/grayhatter
flower_: you could also use https://ziglang.org/documentation/master/std/#std.fs.Dir.statFile, and call createFile if statFile() falied. and then open it directly after creating it

1744483985
grayhatter!~grayhatte@user/grayhatter
flower_: I think you also didn't read the memory?

1744483999
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: that has a potential racecondition IIRC

1744484028
grayhatter!~grayhatte@user/grayhatter
flower_: another reason to create a directory

1744484036
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I read the file here: https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/src/main.zig#L54

1744484059
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I want to have general session information in the session dir itself

1744484079
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
so that if you use ranger or nnn you don't have to move to a dir to read the notes

1744484095
blurrycat!~blurrycat@user/blurrycat
grayhatter: on linux PATH_MAX is usually 4096

1744484117
blurrycat!~blurrycat@user/blurrycat
anyway you can use std.fs.max_path_bytes which will give you the correct value for the platform

1744484143
grayhatter!~grayhatte@user/grayhatter
https://zigbin.io/c50113

1744484162
grayhatter!~grayhatte@user/grayhatter
flower_: you're correct, I omitted the read

1744484268
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: this looks cleaner for sure

1744484287
grayhatter!~grayhatte@user/grayhatter
flower_: I also wrote this to be very terse, because you asked if the language could do it more clearly. 

1744484346
grayhatter!~grayhatte@user/grayhatter
if I was writing this, I would use statFile() catch FileNotFound => createFile(); and only open the file after that was successful

1744484351
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
most of the time I'm already in euphoria when it works, heheh

1744484371
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: I think there is a potential race condition

1744484401
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
someone else noted that and I think they are right

1744484426
grayhatter!~grayhatte@user/grayhatter
flower_: there's always a potential race condition when using multiprocessing and file IO on linux.... you'll never see it

1744484497
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: is that really true? I think in Go you could let one goroutine handle that file IO

1744484527
grayhatter!~grayhatte@user/grayhatter
flower_: what do you mean when you say "potential race condition"

1744484555
grayhatter!~grayhatte@user/grayhatter
because I'd think using a go coroutine would introduce *more* race conditions, not fewer

1744484593
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: that the file is created / removed at the same time/ after you checked it with stat

1744484626
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: the idea of goroutines in Go is that you can use it to avoid race conditions (using channels)

1744484646
grayhatter!~grayhatte@user/grayhatter
bah.... unreachable in stdlib is so triggering

1744484665
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: e.g. as alternative to mutexes

1744484716
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
lightweight threads they call them, goroutines. I wonder if the new zig IO also gets 'lightweight threads aka coroutine"

1744484733
grayhatter!~grayhatte@user/grayhatter
flower_: so read success, and the file exists, and the inbetween statFile(), the file that did exist, was deleted... which would mean the openFile() call would fail... and you want to continue from there?

1744484807
blurrycat!~blurrycat@user/blurrycat
Why would you want to stat and create if it doesn't exist? Doesn't createFile already handles this?

1744484813
grayhatter!~grayhatte@user/grayhatter
you have a file/directory, that was valid for a split second, but is now invalid... that seems like a good place to return an error, instead of trying again for seemingly forever

1744484874
blurrycat!~blurrycat@user/blurrycat
(sorry if this has already been answered, I haven't read the entire discussion)

1744484917
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
why is it a good idea (if it is) to use @splat here? https://codeberg.org/avlap/zjasmnotes/src/branch/nsm-optional-gui/src/main.zig#L29

1744484947
grayhatter!~grayhatte@user/grayhatter
blurrycat: yes, it does, but for this specific case you don't know if the path is a file, or a directory, you also don't want to destroy data, you also should check if you're allowed to read and write the file, because the nsm docs state you have to save contents. If any of these aren't what you expect, you should report an error. instead of just continuing. If the file doesn't exist, then you have to

1744484949
grayhatter!~grayhatte@user/grayhatter
create the file. Writing it stat, create if doesn't exist, makes the code easier to read, and mentally prove to be correct

1744484976
grayhatter!~grayhatte@user/grayhatter
you'll notice using createFile(..., .{.truncate = false}); is what I suggested first

1744484987
blurrycat!~blurrycat@user/blurrycat
hm ok I see, that's annoying

1744485009
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: you know if it's a file or dir, you're the one who decides (in client)

1744485022
grayhatter!~grayhatte@user/grayhatter
but I've recently lost data because createFile() default .truncate == true

1744485046
grayhatter!~grayhatte@user/grayhatter
yes, yes, user error, you're a much better coder than I am, clearly... but I'm still mad about it

1744485050
blurrycat!~blurrycat@user/blurrycat
yeah the .truncate = false bit is what I had in mind 

1744485092
grayhatter!~grayhatte@user/grayhatter
flower_: you don't know, actually

1744485105
grayhatter!~grayhatte@user/grayhatter
jack doesn't promise not to reuse client_name.client_id

1744485117
blurrycat!~blurrycat@user/blurrycat
I once ran `rm -rf something *` (yes with the space) in my home so I don't think I'm qualified to judge anybody's skills

1744485165
grayhatter!~grayhatte@user/grayhatter
blurrycat: humans make mistakes, good enginers write that make unrecoverable mistakes harder to make

1744485171
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
grayhatter: client_id comes from the NSM server, not bullet proof maybe, I agree

1744485187
grayhatter!~grayhatte@user/grayhatter
knowing the latter is the only requirment for making any comments :)

1744485219
grayhatter!~grayhatte@user/grayhatter
flower_: you're also worried about a race condition there too, which implies that you doen't actually know if you're allowed to own the suppiled path

1744485236
grayhatter!~grayhatte@user/grayhatter
because if you owned it the way you'd need to, to know if it's a file or directory, the race condition would be impossible

1744485264
grayhatter!~grayhatte@user/grayhatter
you also might decide one day to switch between directory and to/from a file, or vice versa

1744486060
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
statFile() catch FileNotFound => createFile(); 

1744486109
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
you mean: catch |err| here, right? If you then want to createFile file in that switch on err, you've the same problem, can't handle err twice

1744486238
grayhatter!~grayhatte@user/grayhatter
flower_: yes, that suggestion is invalid zig for a number of reasons, that's just one of them

1744486256
grayhatter!~grayhatte@user/grayhatter
you'll need to add more than just the `catch |err| switch (err)`

1744486292
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
such as? :)

1744486322
grayhatter!~grayhatte@user/grayhatter
nah, I've gotta leave for a bit, can't write the error handling code for you

1744486346
grayhatter!~grayhatte@user/grayhatter
I might be able to help more when I get back, or maybe you can talk blurrycat into writing it for you while I'm gone

1744486384
blurrycat!~blurrycat@user/blurrycat
I'm drunk as hell, aint no way I'm writing any code tonight

1744486409
grayhatter!~grayhatte@user/grayhatter
https://en.wikipedia.org/wiki/Ballmer_Peak

1744486414
grayhatter!~grayhatte@user/grayhatter
https://xkcd.com/323/

1744486433
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok, thx for your help

1744486445
blurrycat!~blurrycat@user/blurrycat
hahaha

1744486511
grayhatter!~grayhatte@user/grayhatter
my friend published a paper about this, he was able to prove it was effective in FPS games

1744497181
clevor!sid649024@id-649024.hampstead.irccloud.com
blurrycat: Name kind of checks out.

