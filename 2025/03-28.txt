1743120574
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
https://zigbin.io/6bde45 is there no way to write if in single line like that? do i need to use multiple if statement?

1743121301
torque!~tachyon@user/torque
you need to unwrap the optional

1743121326
torque!~tachyon@user/torque
https://ziglang.org/documentation/0.14.0/#Optionals

1743121386
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
thanks

1743139058
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
does zig have a keyword like pass in python?

1743139692
torque!~tachyon@user/torque
why would it need one?

1743139737
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i suppose it doesn't?

1743139772
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
there is no concept of pass/skip in zig?

1743139773
torque!~tachyon@user/torque
pass is only necessary in python due to the syntactic indentation requiring constructs to have some sort of body

1743139806
torque!~tachyon@user/torque
you skip something by omitting it

1743139829
torque!~tachyon@user/torque
the closest equivalent to `pass` would just be `{}`

1743139869
torque!~tachyon@user/torque
I'd ask you to provide a situation in which you think `pass` would have any sort of meaning in zig

1743139915
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i see, well i was thinking of writing something outside of `if` block then realized it can't be done anyways cause it has this `|something|` and that value can only be used within { ... } ?

1743139966
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
its no a big deal i suppose i just have to get used to writing zig's way

1743157416
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm trying to use fp's zig-tracy (https://github.com/FalsePattern/zig-tracy), adding it to build.zig.zon and getting a very strange error when I attempt to compile

1743157458
tsujp!497e1f7b6a@sourcehut/user/tsujp
https://bpa.st/HQPA

1743158052
tsujp!497e1f7b6a@sourcehut/user/tsujp
it looks like this is a syscall issue? I'm doing this in a fedora 42 container using zig 0.14.0 downloaded from official releases

1743158723
tsujp!497e1f7b6a@sourcehut/user/tsujp
installing zig 0.14.0 on macOS host and trying there it works fine, so yeah it's something to do with the bind mount and/or podman vm and/or container runtime 

1743164903
tsujp!497e1f7b6a@sourcehut/user/tsujp
right it's a problem with libkrun. vfkit doesn't have that issue

1743169738
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm its extremely annoying that `zig build --help` will try and build the project instead of spitting out help info, especially since theres a build error in this case meaning "haha, no command info for you!"

1743169756
tsujp!497e1f7b6a@sourcehut/user/tsujp
especially still because this looks to be zig's fault from this issue: https://github.com/ziglang/zig/issues/5123

1743186035
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm well this sucks, basically cannot use zig with overlay-fs because it relies on getdents64(2) to read the type of file, even though there's no requirement that a filesystem implement such

1743186661
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
what exactly are you having? i know getdents64(2) wasn't added into io_uring cause it has some flaws in it.

1743186704
tsujp!497e1f7b6a@sourcehut/user/tsujp
stealth_: this: https://ziggit.dev/t/getting-error-about-illegal-file-type-unknown-when-fetching-dependencies/7585

1743186726
tsujp!497e1f7b6a@sourcehut/user/tsujp
i am in a container which is using fuse-overlayfs and the zig cache dir being on the fuse-overlayfs filesystem results in that error

1743186735
tsujp!497e1f7b6a@sourcehut/user/tsujp
if I force the zig cache dir into virtiofs then its fine

1743187004
tsujp!497e1f7b6a@sourcehut/user/tsujp
also, is https://github.com/FalsePattern/zig-tracy working for anyone on zig 0.14.0? it builds but the build hangs indefinitely

1743187420
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
with that form link, one of the flaws in testing is they keep using `/tmp` dir to test their code, there are some function that doesn't work with `/tmp` cause its linked to ram! and ram doesn't block like normal drive does.

1743191072
blurrycat!~blurrycat@user/blurrycat
tsujp: what are you running that hangs indefinitely? I'm able to build and run the example in the repo with zig 0.14.0 on macOS here

1743191991
jemius!~jemius@2001:16b8:3dad:6900:91ef:9ae8:c0dc:5879
Zig's compiler has a frontend, written in Zig, and a backend which sometimes still is LLVM, and for well supported plattforms is another Zig backend, is that correct?

1743192020
jemius!~jemius@2001:16b8:3dad:6900:91ef:9ae8:c0dc:5879
So if someone wanted to port Zig to an exotic new microcontroller architecture (as an example), he'd have to write a new backend or port the existing backend?

1743192094
grayhatter!~grayhatte@user/grayhatter
jemius: there's a backend for x86_64

1743192144
grayhatter!~grayhatte@user/grayhatter
everything else is LLVM, and even x86_64 still runs on LLVM 

1743192185
jemius!~jemius@2001:16b8:3dad:6900:91ef:9ae8:c0dc:5879
The only new languages I ever heard of that isn't on top of LLVM are Go and Hare ^^'

1743192229
grayhatter!~grayhatte@user/grayhatter
the 2nd half, is less a question, more a statement of the two options. If you wanted to run zig on a novel ISA, you'd have write a new backend for it, or port an existing backend to work with the way zig uses LLVM... which is just a longer way of saying some sort of backend would have to be exist, and would have to be connected

1743192237
grayhatter!~grayhatte@user/grayhatter
which... I mean... yeah, obviously?

1743195362
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
do you guys tend to use std.debug.assert ?  i find myself using just `if ... unreachable; // explanation`; i guess it's easier to read in the trace.  i wonder if there are any downsides

1743195400
grayhatter!~grayhatte@user/grayhatter
unreachable is a promise to the compiler that you've actually proved it's unreachable

1743195426
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
but std.debug.assert is just wrapped unreachable, right?  last time i checked

1743195433
grayhatter!~grayhatte@user/grayhatter
if you're incorrect about if it's unreachable, the compiler will emit asm that will ruin your program

1743195470
grayhatter!~grayhatte@user/grayhatter
it's for that reason I no longer use debug assert anywhere, and don't use unreachable in library code

1743195514
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
the body of assert() is "if (!ok) unreachable;"

1743195530
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
why the distinction between library or non-library, though?

1743195534
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
So it'll generate same code i presume

1743195547
blurrycat!~blurrycat@user/blurrycat
netvor: I like my libraries to not crash my program personally 

1743195552
grayhatter!~grayhatte@user/grayhatter
^ this is why

1743195608
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
rockorager: i think argument could be made that std.debug.assert communicates intent more clearly, but i just find it sooo much easier when the top line in the stack trace contains my `// explanation` part

1743195615
blurrycat!~blurrycat@user/blurrycat
maybe a debug assert that just doesn't get compiled in release modes would be useful for libraries though

1743195617
grayhatter!~grayhatte@user/grayhatter
I have different rules for bin and libs, I expect libs to be a bit more robust, then mostly I use `comptime unreachable` and `unreachable` for code sections that I haven't implemented yet

1743195656
grayhatter!~grayhatte@user/grayhatter
blurrycat: that's why I don't use assert anywhere

1743195671
grayhatter!~grayhatte@user/grayhatter
unreachable has harmful effects in release modes too

1743195691
grayhatter!~grayhatte@user/grayhatter
"everyone" assumes assert() is a noop in release modes, but that's incorrect in zig

1743195708
blurrycat!~blurrycat@user/blurrycat
yeah but I don't see why we can't have one that does that

1743195717
grayhatter!~grayhatte@user/grayhatter
assert() in zig release fast/small has side effects on code

1743195728
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
grayhatter: but doesn't following that policy mean that you end up with more error unions?  (not saying it's a bad thing)  i assume that in some places where i would use `unreachable` you use `return error.SomeHelpfulName`

1743195800
grayhatter!~grayhatte@user/grayhatter
netvor: in some places, yes, but in others when I don't wanna muck around with existing errors, introduce a new one, or whatever goal. I'll rewrite the code block so that it can't error 

1743195822
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
maybe it's a taste that will change for me over time, but i just found that when i don't need to do i/o or allocations, etc.  i tend to be happy when there are less `!`s

1743195834
grayhatter!~grayhatte@user/grayhatter
OH

1743195863
grayhatter!~grayhatte@user/grayhatter
yeah most places where I had `call() catch unreachable` is now `call() catch @panic("OOM")`

1743195897
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
oh i completely forgot that @panic() exists :D

1743195994
grayhatter!~grayhatte@user/grayhatter
https://gist.github.com/GrayHatter/2e711deab5af5e09e3de25b0ac596ed4

1743196038
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
oh that's nice, thanks

1743196050
blurrycat!~blurrycat@user/blurrycat
leanred this trick the other day on Loris' stream and it's just awesome 

1743196051
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
i didn't even know about `errdefer |err|`

1743196103
grayhatter!~grayhatte@user/grayhatter
lol, I almost said basically that blurrycat... I wanted to say, blurrycat knows where I got this idea :D

1743196132
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
else => unreachable ;)

1743196145
grayhatter!~grayhatte@user/grayhatter
rockorager: good idea

1743196157
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
Or just errdefer @panic("OOM")

1743196158
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
i'm not gonna lie, in my CLI utilities i tend to use eve `if (something_cannot_be_parsed) die("i don't like this thing");` where die() amounts to `std.log.err(); std.process.exit(3);`

1743196159
grayhatter!~grayhatte@user/grayhatter
updated 

1743196168
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
s/eve/even/

1743196216
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
it's kind of "evil" to quit but if i can guarrantee i can do it early enough (eg. when just parsing arguments or config files) i guess it's ok

1743196222
blurrycat!~blurrycat@user/blurrycat
netvor: yeah in executables my opinion is do whatever you like

1743196336
grayhatter!~grayhatte@user/grayhatter
netvor: the correct way to do that is `fn usage(err: ?anyerror) noreturn { ... }`

1743196349
grayhatter!~grayhatte@user/grayhatter
for some values of correct

1743196388
grayhatter!~grayhatte@user/grayhatter
exact same behavior, non-user-hostile, no evil introduced

1743196388
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
yeah i basically do something like that

1743196629
andrewrk!~andrewrk@mail.ziglang.org
going live in about 30m on the topic of async/await https://www.twitch.tv/andrewrok

1743196664
lemmi!~lemmi@user/lemmi
oooh

1743196774
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
nice async/await :D :D :D can't wait.

1743196833
grayhatter!~grayhatte@user/grayhatter
inb4 the new plan is to hook python and use python to do all the async/await code for zig

1743196871
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
lol shut it.. i had no other option since zig didn't have it! 

1743196892
grayhatter!~grayhatte@user/grayhatter
yeah, it's literally impossible for there to be other options

1743196901
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i starting learning zig thinking it had async/await since there are lots of example online of zig having async/await.

1743196916
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
wat! twitch has suspended my account :'(   "Your Twitch account kelduben has been permanently suspended"  apparently i've done some "illegal activity" (of not being logged in for several months?)

1743196948
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
"If you wish to appeal this suspension, please sign in to appeals.twitch.tv" .. lol, i can't sign in

1743196954
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
nevermind, it's OT here :)

1743196982
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
u can still watch without having an account, i don't have twitch account either.

1743197049
netvor!~netvor@2a00:ca8:a1f:cd0:324a:a321:e0a2:5571
ah, thanks.  i'll try to recover the account but good to know..

1743201563
Earnestly!~earnest@user/earnestly
(What andrewrk is discussing now, is exactly why Ada added tasks into the language. Because they determined the biggest problem with threading is lack of agreement of API across libraries/modules)

