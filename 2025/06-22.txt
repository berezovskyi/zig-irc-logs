1750553536
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: you still stuck?

1750555905
grayhatter!~grayhatte@user/grayhatter
does anyone know if there's a reason try has a higher associtivity than catch?

1750556459
torque!~tachyon@user/torque
that doesn't sound like something that comes up very often

1750556488
JetpackJackson!739e7f3d14@user/JetpackJackson
Yeah

1750556522
JetpackJackson!739e7f3d14@user/JetpackJackson
Stopped at 530 ish cause I had to do stuff irl

1750556536
grayhatter!~grayhatte@user/grayhatter
does anyone know off hand why was https://github.com/ziglang/zig/issues/2473 unaccepted?

1750556543
torque!~tachyon@user/torque
try isn't even listed in the operator precedence table in the langref

1750556552
grayhatter!~grayhatte@user/grayhatter
torque: I thought it was?

1750556588
grayhatter!~grayhatte@user/grayhatter
oh, interesting, catch is, but try isn't

1750556591
torque!~tachyon@user/torque
I thought it was too

1750556609
torque!~tachyon@user/torque
I assume the precedence is similar to the other unary operators

1750556647
grayhatter!~grayhatte@user/grayhatter
well, it's above `& ^ | orelse catch` because `try bigErrorSet() catch error.SmallErr;` doesn't work

1750556700
torque!~tachyon@user/torque
that's basically redundant with `bigErrorSet() catch return error.SmallErr;`, so it doesn't seem like this is a major problem

1750556748
torque!~tachyon@user/torque
but it does seem like it would be helpful if documented

1750556957
grayhatter!~grayhatte@user/grayhatter
torque: right, that's what I normally do, but with try it's 3 characters shorter :D

1750557086
grayhatter!~grayhatte@user/grayhatter
context, I'm playing around with things like `var thing: SomeType = try .initErrors();` which *does* work. but `var thing: SomeType = .initErrors() catch {};` does not

1750557116
torque!~tachyon@user/torque
yes, I think this is something that should be fixed

1750557139
torque!~tachyon@user/torque
but the implementation of `try .declLiteral()` is special-cased by sema

1750557159
torque!~tachyon@user/torque
and the catch variant was not implemented with the feature for some reason 

1750557235
grayhatter!~grayhatte@user/grayhatter
I assume because it's more work to do correctly

1750557243
grayhatter!~grayhatte@user/grayhatter
try is a much simpler construct

1750557271
squeek502!~squeek502@user/squeek502
grayhatter/torque this accepted proposal might be relevant to `try` precedence: https://github.com/ziglang/zig/issues/114 (it was accepted before the `try` keyword existed though (afaict it was named `%return` at that time), so unclear how it fits in)

1750557280
grayhatter!~grayhatte@user/grayhatter
I assume it's much more resonable to special case in the meantime

1750557342
squeek502!~squeek502@user/squeek502
(the most relevant comment on that issue is https://github.com/ziglang/zig/issues/114#issuecomment-302235077 btw)

1750557408
torque!~tachyon@user/torque
https://github.com/ziglang/zig/issues/21289

1750557507
grayhatter!~grayhatte@user/grayhatter
oh, wow... I knew the issue had to exist, but didn't expect wontfix

1750557515
grayhatter!~grayhatte@user/grayhatter
that's very disappointing 

1750557556
torque!~tachyon@user/torque
I think this stance is very unfortunate since it breaks the principle of least surprise

1750557579
grayhatter!~grayhatte@user/grayhatter
there's been a lot of changes to zig that I disagree with

1750557639
grayhatter!~grayhatte@user/grayhatter
and not in the "I like my way better, but that's also reasonable"... but more in a, "you're optimizing to make the compiler behave, and not write a language people enjoy" kinda way

1750557705
grayhatter!~grayhatte@user/grayhatter
I'm sure it's sample bias, but it feels like it's happening more often, not less

1750557775
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: sorry, got nerd sniped by my own thing; I need more details about where your stuck, I looked at your code but nothing jumps out to me as wrong, so I'm missing something

1750557867
torque!~tachyon@user/torque
I think the problem was, given a wordle-style 5-character word, like "chunk" and someone inputs "luser", how to check that "u" is in the solution but at a different position than in the input

1750558006
torque!~tachyon@user/torque
frankly with 5 character words or whatever, it would be simple enough to just iterate over the solution for each character of the input

1750558081
JetpackJackson!739e7f3d14@user/JetpackJackson
grayhatter: yeah I'm still stuck (my client is being weird)

1750558261
grayhatter!~grayhatte@user/grayhatter
I agree with torque, check if (letter at position i is correct) { state = green } else if (std.mem.count(u8, answer, guess[i..][0..1])) { state = yellow } else { state = gray } 

1750558324
grayhatter!~grayhatte@user/grayhatter
I guess maybe I should have said  { state[i] = green }

1750558353
grayhatter!~grayhatte@user/grayhatter
but understanding what I meant to say is a task I usually leave to the compiler :D

1750558720
grayhatter!~grayhatte@user/grayhatter
this is probably how I'd write this https://zigbin.io/8fdb36

1750559159
JetpackJackson!739e7f3d14@user/JetpackJackson
I forgot I set the game to accept higher lengths than 5 but I never grabbed a word list for them

1750559173
JetpackJackson!739e7f3d14@user/JetpackJackson
I'll try that out tmrw, thanks grayhatter 

1750559272
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: I was assuming it'd be more than 5 given your code, which is why I wrote it that way (and not a different way I was considering) there's no reason you couldn't have colors be any length, (but each array has to be the same length in the for loop, so make sure you slice correctly :) )

1750559296
JetpackJackson!739e7f3d14@user/JetpackJackson
Alright cool beans

1750559304
JetpackJackson!739e7f3d14@user/JetpackJackson
Thanks again very much

1750559315
grayhatter!~grayhatte@user/grayhatter
cheers dude, good luck :)

1750559337
JetpackJackson!739e7f3d14@user/JetpackJackson
Thanks :)

1750559430
grayhatter!~grayhatte@user/grayhatter
>  I don't think there's any reason that try should ever be more ergonomic than catch, since handling errors locally if able when you have maximum context should always be preferred to passing the problem up to your caller.

1750559473
grayhatter!~grayhatte@user/grayhatter
criminially underrated observation

1750562986
clevor!sid649024@id-649024.hampstead.irccloud.com
grayhatter: That's a TODO I need to do for narser before I consider it ready to use as a library :p

1750563576
clevor!sid649024@id-649024.hampstead.irccloud.com
And also coming up with specific error sets for different functions.

1750596691
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://cs.opensource.google/go/go/+/refs/tags/go1.24.4:src/os/file_unix.go;l=27

1750596703
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm uses stat

1750596727
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
then a racecondition is possible right?

1750596971
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Looks like zig doesn't use stat: https://ziglang.org/documentation/master/std/#std.posix.renameZ

1750600601
fornex!~fornex@2a02:8070:b84:643c::b9c
Did zig change anything about how cpu features are specified between 0.13.0 and 0.14.0? With 0.13.0 I was able to make the compiler emit FPU instructions for a Cortex M4, but the same flags (`-mcpu cortex_m4+vfp4`) now only emit calls to `__aeabi_fmul`. You can see it in this godbolt example (https://godbolt.org/z/7McWTW9xo) when you switch between the two compiler versions I mentioned.

1750602059
JetpackJackson_!~JetpackJa@user/JetpackJackson
grayhatter: i tried adapting your code to my code and i still end up with that bug, idk if im holding it wrong or smth: https://zigbin.io/527691

1750603648
fornex!~fornex@2a02:8070:b84:643c::b9c
Using build-exe with `--verbose-link` I was able to find out that Zig 0.14.0 has the linker flag `-float-abi=soft` added, whereas Zig 0.13.0 did not specify that. Is there a "high-level" way to control this flag via the build system? Or do I somehow have the add the `-float-abi=hard` flag manually?

1750604177
fornex!~fornex@2a02:8070:b84:643c::b9c
Okay, I got it. I needed to change my abi from `eabi` to `eabihf`. Not sure why it worked in Zig 0.13.0 though. `eabihf` already existed back then but the float-abi flag was not generated.

1750604370
ifreund!2940d10f8b@user/ifreund
nice, seems like that may have been a bug in 0.13

1750615995
JetpackJackson!739e7f3d14@user/JetpackJackson
hmm i tried to look at a wordle that someone else did in zig and it has the same issue as mine

1750616003
JetpackJackson!739e7f3d14@user/JetpackJackson
so im really stumped at this point

1750616071
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: write a zig test to verify the smallest action you need the code to take

1750616103
JetpackJackson!739e7f3d14@user/JetpackJackson
wdym, like input or smth?

1750616172
JetpackJackson!739e7f3d14@user/JetpackJackson
cause like im testing it with the solution "block" and the guesses "bloom" and "bosom" to test whether the yellow letters are right

1750616367
Gliptic!~glip@2a01:4f8:c012:91f3::1
I'm guessing bloom works and bosom doesn't?

1750616384
Gliptic!~glip@2a01:4f8:c012:91f3::1
or well, maybe not

1750616387
JetpackJackson!739e7f3d14@user/JetpackJackson
no neither work

1750616392
JetpackJackson!739e7f3d14@user/JetpackJackson
both have extra yellow

1750616393
Gliptic!~glip@2a01:4f8:c012:91f3::1
because of the repeated o

1750616416
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: https://zigbin.io/001ece

1750616431
grayhatter!~grayhatte@user/grayhatter
you'll have to write checkGuess yourself

1750616455
JetpackJackson!739e7f3d14@user/JetpackJackson
alright ill try that

1750616635
Gliptic!~glip@2a01:4f8:c012:91f3::1
so when you check the second o, `blo[o]m`, what state is the first `o` in?

1750616678
Gliptic!~glip@2a01:4f8:c012:91f3::1
because I'm guessing the second `o` turns yellow, right?

1750616764
JetpackJackson!739e7f3d14@user/JetpackJackson
the first one is green

1750616802
Gliptic!~glip@2a01:4f8:c012:91f3::1
if its state is green, why do you count it as a "correct letter but wrong position" for the second `o`?

1750616882
JetpackJackson!739e7f3d14@user/JetpackJackson
because the code for yellows is messed up

1750618287
grayhatter!~grayhatte@user/grayhatter
JetpackJackson: what should the output be for answer "bloom" guess "ooooo"

1750618315
JetpackJackson!739e7f3d14@user/JetpackJackson
i guess it would be gray gray green green gray

1750618332
grayhatter!~grayhatte@user/grayhatter
writing a zig test for that answer will help figure out what the checkGuess function needs to do

1750618417
JetpackJackson!739e7f3d14@user/JetpackJackson
a separate test or should i put it all together

1750618750
JetpackJackson!739e7f3d14@user/JetpackJackson
hmm ok it partly works and partly doesnt

1750618855
JetpackJackson!739e7f3d14@user/JetpackJackson
https://zigbin.io/abc555

1750619578
JetpackJackson!739e7f3d14@user/JetpackJackson
im so close but i just cant figure out what code will make it work the way i want

1750621277
torque!~tachyon@user/torque
it sounds like there's no way to do this with a one-pass strategy, since a green that occurs at the end of the word may invalidate yellows that come earlier

1750621399
torque!~tachyon@user/torque
so you should check for all exact matches first, keeping track of letters that exact matched (e.g. by discarding them), then go back and check for incorrectly placed or incorrect letters

1750621462
torque!~tachyon@user/torque
one way you could do this is by creating a mutable copy of the solution string and replacing each exact match character with '\x00' or some other sentinel, which would prevent it from being matched out of place a second time on the second iteration

1750621489
torque!~tachyon@user/torque
also I will slightly self-correct and say "no simple way to do this with a one-pass strategy"

1750622604
grayhatter!~grayhatte@user/grayhatter
torque: you can one pass it, but that code is ugly

1750622620
grayhatter!~grayhatte@user/grayhatter
2 passes wouldnt' be meaningfully slower, not for any word length

1750623104
JetpackJackson!739e7f3d14@user/JetpackJackson
torque: re sentinel values, i tried to start doing that but it was being weird but ill try again

1750627056
norineko!~norineko@user/norineko
with zls, I get no code actions available. Is this a misconfiguration on my end? I'm using nvim + zls/zig nightly

1750627702
norineko!~norineko@user/norineko
oh, i am silly, there was a syntax error in the file I was trying to work on

