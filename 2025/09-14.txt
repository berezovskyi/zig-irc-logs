1757851101
phoooo!~phoooo@62.57.111.103.static.user.ono.com
Hello! Do you know if there is any program out there that allows you to define linker scripts in Zon format?

1757851133
phoooo!~phoooo@62.57.111.103.static.user.ono.com
Even if it is just a simple transpiler-ish thing

1757851381
phoooo!~phoooo@62.57.111.103.static.user.ono.com
Seems like there are plans to do so? (https://github.com/ziglang/zig/issues/25069)

1757851436
phoooo!~phoooo@62.57.111.103.static.user.ono.com
Anyway, if anyone knows of any “unofficial” way to do this, please let me know :o)

1757868673
phoooo!~phoooo@62.57.111.103.static.user.ono.com
Found this too https://github.com/markfirmware/zig-vector-table/blob/c69f04caf843d9b7977980a5230f3ced415003dc/build.zig#L118-L202

1757868709
phoooo!~phoooo@62.57.111.103.static.user.ono.com
Not what I want, but maybe I can adapt it a bit

1757885518
Shorden!~user@user/Shorden
I'd like to sanity check some reasoning behind a PR to avoid wasting anyone's time (except the IRC folks haha): BPF encodes 64-bit immediates in instructions as `imm64 = (next_imm << 32) | imm` (i.e. combining 2 32-bit immediates from 2 instructions). In std.os.linux.bpf.ld_imm_impl{1,2} a 64 bit immediate is split into an upper half `@as(i32, @intCast(@as(u32, @truncate(imm))))` and a lower half `@as(i32, @intCast(@as(u32, 

1757885518
Shorden!~user@user/Shorden
@truncate(imm >> 32))))`. But my understanding is that @bitCast should be used instead of @intCast here because not all u32 values are representable as i32s. This seems pretty simple to me, but I wanted to make sure I wasn't missing something here. Thanks!

