1736987766
raceready!uid684861@user/raceready
good evening all

1736988824
raceready!uid684861@user/raceready
is there a way to make `zig build` less verbose on failures?  I've tried --summary failures and --prominent-compile-errors, but it's still quite a lot to wade through.

1737001453
andrewrk!~andrewrk@mail.ziglang.org
raceready: strange question. you want less information when troubleshooting?

1737001514
andrewrk!~andrewrk@mail.ziglang.org
and you don't want compile errors?

1737001591
andrewrk!~andrewrk@mail.ziglang.org
netvor: packed struct, like enum, is just an integer with a fancy hat. if you want the integer to take up less space, you could explicitly override the alignment, or you could break the integer into more than one which each have the desired size and alignment

1737002729
netvor!~netvor@2a00:ca8:a1f:cd0:dce7:80e6:98e5:873f
i wasn't talking about packed struct, my example wasy `const Thing = union(enum(u4))` .  one of the members is u128 -- that corresponds to the 16 `ff` bytes in the dump

1737002751
netvor!~netvor@2a00:ca8:a1f:cd0:dce7:80e6:98e5:873f
but the tag itself is u8, yet it takes 16 bytes as well

1737002766
netvor!~netvor@2a00:ca8:a1f:cd0:dce7:80e6:98e5:873f
(i mean u4)

1737007240
tsujp!497e1f7b6a@sourcehut/user/tsujp
am i missing something obvious or can you not pass more than 1 argument for the templated string to std.fmt.comptimePrint?

1737007286
tsujp!497e1f7b6a@sourcehut/user/tsujp
i.e. std.fmt.comptimePrint("i want {} and {} bar", .{foo}, .{bar})    is invalid, so its not possible to template more than once?

1737007727
torque!~tachyon@user/torque
std.fmt.comptimePrint("i want {} and {} bar", .{foo, bar})

1737007757
torque!~tachyon@user/torque
the second argument is a tuple of values

1737028903
mountaingoat!~mountaing@user/mountaingoat
@typeName() will return a different result depending on how something is run / imported (e.g. zig test src/core/<file>.zig vs zig test src/<top-level file>.zig) ... is there a way to get a stable and unique runtime identifier for a type? i need to map comptime types to runtime identifiers

1737028976
mountaingoat!~mountaing@user/mountaingoat
it looks like @typeId() would be roughly what i want (i don't necessarily need a string)

1737029004
ifreund!2940d10f8b@user/ifreund
there's a way to hack @typeId() that works in status quo zig

1737029011
ifreund!2940d10f8b@user/ifreund
iirc it's mentioned in the @typeId() issue

1737029066
ifreund!2940d10f8b@user/ifreund
netvor: the thing you are missing about container layout is that padding out to a muliple of the alignment is necessary

1737029088
mountaingoat!~mountaing@user/mountaingoat
ok, i'll take a look. i might just also have users define a type name getter i can query at comptime

1737029098
ifreund!2940d10f8b@user/ifreund
consider how an array of your test struct would need to be laid out such that each item in the array has the necessary 16 byte alignment

1737029345
ifreund!2940d10f8b@user/ifreund
mountaingoat: here's a link https://github.com/ziglang/zig/issues/19858#issuecomment-2369861301

1737029378
mountaingoat!~mountaing@user/mountaingoat
thanks ifreund

