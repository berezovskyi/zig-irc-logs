1739065501
ezzieyguywuf!~Unknown@user/ezzieyguywuf
ifreund: ahh ok, that makes more sense, the link from https://zig.news/michalz/fast-multi-platform-simd-math-library-in-zig-2adn was broken, I guess that was the original repo

1739065561
ezzieyguywuf!~Unknown@user/ezzieyguywuf
grayhatter: I'm very cautious about adding dependencies

1739065581
ezzieyguywuf!~Unknown@user/ezzieyguywuf
but like I said above, I don't rly want to implement this matrix maths on my own lol.

1739065630
ezzieyguywuf!~Unknown@user/ezzieyguywuf
and I know number of commits or lines of code aren't great metrics, but in the absense of anything better they serve some sort of useful(ish) purpose

1739065637
ezzieyguywuf!~Unknown@user/ezzieyguywuf
poirpose. lol.

1739065860
grayhatter!~grayhatte@user/grayhatter
ezzieyguywuf: and more commits is better?

1739065906
ezzieyguywuf!~Unknown@user/ezzieyguywuf
*shrug* commits over some time period suggests some amount of activity

1739065919
grayhatter!~grayhatte@user/grayhatter
right

1739065943
grayhatter!~grayhatte@user/grayhatter
that's my argument though, few commits is actually a stronger sign of quailty 

1739065966
grayhatter!~grayhatte@user/grayhatter
would you rather use a library that needs 1000 attempts to get something right? or 10 attempts?

1739066063
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I'd rather use a library that will fix bugs

1739066080
ezzieyguywuf!~Unknown@user/ezzieyguywuf
honestly I'd rather not use any dependencies lol but rolling your own for everything is quite a drag

1739066151
grayhatter!~grayhatte@user/grayhatter
unless you care about quality, then rolling your own is the only way to get anything good

1739066167
grayhatter!~grayhatte@user/grayhatter
ezzieyguywuf: I'd rather a library that doesn't have bugs

1739066177
ezzieyguywuf!~Unknown@user/ezzieyguywuf
bugs are inevitable

1739066193
grayhatter!~grayhatte@user/grayhatter
nah

1739066217
grayhatter!~grayhatte@user/grayhatter
that's a lie people tell themselves so that they can feel better about making mistakes

1739066257
grayhatter!~grayhatte@user/grayhatter
it's not possible to write code without making mistakes, it **is** possible to ship code without bugs

1739066264
grayhatter!~grayhatte@user/grayhatter
not all mistakes are bugs

1739067381
ezzieyguywuf!~Unknown@user/ezzieyguywuf
I'm just gonna use zmath 😁

1739067821
grayhatter!~grayhatte@user/grayhatter
let me know if you find a bug in the math library... I'd be very interested to find out

1739123634
vimproved!~vimproved@user/vimproved
thank you for getting the runtime page support PR merged :) i've been following it for a while and i'm excited to finally be able to use my asahi macbook pro for zig

1739125832
lf94-!~lf94@user/lf94
zig borrow checker when

1739125906
taylan!~taylan@user/taylan
NEVARRRRR

1739125907
grayhatter!~grayhatte@user/grayhatter
lf94-: probably never?

1739125929
lf94!~lf94@user/lf94
grayhatter: not with that attitude!

1739126004
taylan!~taylan@user/taylan
I'll have implemented a portable VM, byte-code compiler, AOT native compiler, and JIT in my toy lisp implementation, that I haven't even started implementing yet, before zig gets a borrow checker

1739126022
grayhatter!~grayhatte@user/grayhatter
lf94: that's kinda the point... I can't imagine I'd enjoy zig if it added borrowing semantics 

1739126042
lf94!~lf94@user/lf94
I'd like to see it done ad-hoc like how TypeScript adds types to JS ad-hoc

1739126063
lf94!~lf94@user/lf94
Zig needs to be simpler

1739126470
grayhatter!~grayhatte@user/grayhatter
lol, yeah, TS is an *improvement* to js

1739126490
grayhatter!~grayhatte@user/grayhatter
just like how type annotations in python reduce bugs instead of increasing them :P

1739126792
ifreund!2940d10f8b@user/ifreund
lf94: that sounds like static analysis rather than a language change

1739126795
lf94!~lf94@user/lf94
I mean in Zig you can use techniques to statically alloc everything and all memory usage is constant

1739126810
lf94!~lf94@user/lf94
But it'd be nice to have a small document emphasizing those techniques

1739126813
ifreund!2940d10f8b@user/ifreund
which is already possible to do as a third party project

1739126818
lf94!~lf94@user/lf94
Yea! Exactly

1739126835
lf94!~lf94@user/lf94
I'm not advocating it as part of core zig

1739126845
lf94!~lf94@user/lf94
I think Zig should be as simple as it possibly can be

1739126874
ifreund!2940d10f8b@user/ifreund
https://github.com/ityonemo/clr

1739126883
ifreund!2940d10f8b@user/ifreund
^ proof of concept

1739127047
lf94!~lf94@user/lf94
Ayyy, beauty.

1739127059
lf94!~lf94@user/lf94
> done by analyzing zig's "AIR" intermediate representation

1739127061
lf94!~lf94@user/lf94
> Elixir

1739127064
lf94!~lf94@user/lf94
Like this is so cool

1739127076
lf94!~lf94@user/lf94
It's cool because it's completely orthogonal to Zig

1739127080
lf94!~lf94@user/lf94
Yet "we can do it"

1739127090
lf94!~lf94@user/lf94
Compare this to Rust, where it's deeply embedded

1739127771
ifreund!2940d10f8b@user/ifreund
I mean, its not the same thing as a borrow checker

1739127786
ifreund!2940d10f8b@user/ifreund
it doesn't give hard 100% guarantees

1739127806
ifreund!2940d10f8b@user/ifreund
its comparable to Rust's Miri project if I'm not mistaken

1739129583
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
Can you have a pointer with len = 0?

1739129592
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
s/pointer/slice/

1739129655
lf94!~lf94@user/lf94
Sure why not

1739129657
torque!~tachyon@user/torque
sure, why not

1739129661
torque!~tachyon@user/torque
lol

1739129708
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
I wasn’t sure what the pointer field of the slice would be then (or if in that case it just doesn’t matter) ¯\_(ツ)_/¯ 

1739129709
coleman!~coleman@static.87.86.161.5.clients.your-server.de
pointer version of one hand clapping 

1739129750
torque!~tachyon@user/torque
I believe that somewhere (maybe in the langref?) there's a note saying that 0 length slices do not have to have a vaild pointer

1739129762
bwbuhse!~The_Buhs@user/The-Buhs/x-5080862
ah cool

1739143365
LAC-Tech!~lewis@granite-phrase.bnr.la
"sure, why not" is the zig motto for everything. except when it comes to formatting

1739143546
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: and a lot of other things

1739143557
grayhatter!~grayhatte@user/grayhatter
var vs const is another obvious example

1739143614
grayhatter!~grayhatte@user/grayhatter
I consider that 0 length pointer thing to be a bug

1739143627
grayhatter!~grayhatte@user/grayhatter
but what are you gonna do

1739143687
andrewrk!~andrewrk@mail.ziglang.org
???

1739143691
andrewrk!~andrewrk@mail.ziglang.org
"sure, why not" is the motto of c++

1739143707
andrewrk!~andrewrk@mail.ziglang.org
I say "no" to 99% of people's ideas

1739143723
grayhatter!~grayhatte@user/grayhatter
andrewrk: I thought the motto of c++ was "it seemed like a good idea at the time"

1739143733
andrewrk!~andrewrk@mail.ziglang.org
ha

1739143737
andrewrk!~andrewrk@mail.ziglang.org
that's even better

1739143782
LAC-Tech!~lewis@granite-phrase.bnr.la
andrewrk: my frame of reference is rust I guess. and "sure, why not" can be a good thing. 13 bit unsigned integer? sure, why not.

1739143830
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: the normal advice when getting out of an abusive relationship is not to compare you healthy relationship to your toxic ex

1739143854
LAC-Tech!~lewis@granite-phrase.bnr.la
LOL. that won't work on me grayhatter. I'm a Zig VS Rust fence sitter and always will be. they're both great.

1739143973
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: you're welcome to bury your head in the sand if you'd like... but I'd actually encourage curosity and exploration of what good engineering actually is

1739144022
andrewrk!~andrewrk@mail.ziglang.org
hey now, be nice

1739144023
LAC-Tech!~lewis@granite-phrase.bnr.la
easy. good engineering is what I personally like, bad engineering is what other people who are wrong like. ie I have the same definitions as everyone else

1739144032
grayhatter!~grayhatte@user/grayhatter
> While for-loops are simple constructs in most programming languages, they pose a real challenge in Rust and require a lot of features to be implemented properly - iterators, lang-item, type inference… After weeks of work, they are finally complete and available in gccrs.

1739144090
grayhatter!~grayhatte@user/grayhatter
rust is a very powerful language, but it violates an imporant axiom of good engineering "as simple as possible and no simpler"

1739144093
LAC-Tech!~lewis@granite-phrase.bnr.la
go to the rust discord grayhatter, they're nice folks, they'd be up for it :)

1739144116
andrewrk!~andrewrk@mail.ziglang.org
LAC-Tech: it's just funny that you say this literally while I'm going through all the proposals tagged 0.14.0 and closing a good portion of them with no comment 

1739144120
andrewrk!~andrewrk@mail.ziglang.org
haha

1739144134
grayhatter!~grayhatte@user/grayhatter
andrewrk: you should have a form comment

1739144146
andrewrk!~andrewrk@mail.ziglang.org
counterpoint: please don't go into the rust discord and evangelize zig

1739144159
torque!~tachyon@user/torque
sounds like a perfect time to start creating new proposals

1739144160
andrewrk!~andrewrk@mail.ziglang.org
that's frankly intolerable behavior

1739144163
grayhatter!~grayhatte@user/grayhatter
there's nothing quite as cutting as empty nack from someone respected

1739144184
grayhatter!~grayhatte@user/grayhatter
torque: lmao 100%

1739144212
andrewrk!~andrewrk@mail.ziglang.org
torque: you sickos love torturing me

1739144243
torque!~tachyon@user/torque
bwa ha ha

1739144278
grayhatter!~grayhatte@user/grayhatter
andrewrk: if you'd prefer, we can necrobump some of the drama filled threads?

1739144291
LAC-Tech!~lewis@granite-phrase.bnr.la
andrewrk: not suggesting brigading! but a lot of the compiler people are there, and they have a good handle on the tradeoffs/decisions

1739144305
LAC-Tech!~lewis@granite-phrase.bnr.la
and yeah I get the feeling zig is crystalising

1739144364
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: the problem with that is people in the rust discord want to enjoy and work on rust, feilding constant complaints from someone whos' not actually interested is just soul crushing

1739144398
LAC-Tech!~lewis@granite-phrase.bnr.la
grayhatter: yeah true. I just can't say enough good things about that place though. 

1739144416
grayhatter!~grayhatte@user/grayhatter
I know enough about rust to know that I will never be able to enjoy the language... likely just a personal issue, but I lack the ability to tollerate when some software tells me I can't do something that I know, infact, I can do

1739144459
LAC-Tech!~lewis@granite-phrase.bnr.la
perfectly understandable, and I know what you mean

1739144481
grayhatter!~grayhatte@user/grayhatter
rust stops me from writing code I know is correct, zig stops me from writing code it knows is wrong... 

1739144505
LAC-Tech!~lewis@granite-phrase.bnr.la
like some things zig does are not my favourite thing, but also zig does a lot of things that no one else is doing, and I want those things, and they outweigh the things it doesn't have. so you make a pragmatic choice

1739144521
LAC-Tech!~lewis@granite-phrase.bnr.la
the important thing is no one is using C++ anymore.

1739144536
andrewrk!~andrewrk@mail.ziglang.org
hahaha so true

1739144543
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: that's exactly the point isn't it? the reason zig is good, is because it enables you to write code, it doesn't try to get in your way

1739144584
grayhatter!~grayhatte@user/grayhatter
but

1739144594
grayhatter!~grayhatte@user/grayhatter
speaking of language proposals

1739144627
grayhatter!~grayhatte@user/grayhatter
andrewrk: can I convince you to change the rule and require that slices with len = 0 when coming from a valid slice, have a valid pointer?

1739144651
andrewrk!~andrewrk@mail.ziglang.org
not now, trying to fix bugs for the release

1739144668
andrewrk!~andrewrk@mail.ziglang.org
early in the release cycle is a great time for those kind of discussions

1739144680
grayhatter!~grayhatte@user/grayhatter
andrewrk: I didn't mean now, I meant, it's a lanugage proposal, and the wiki says you need to convice a core dev to open those issues for you

1739144709
grayhatter!~grayhatte@user/grayhatter
andrewrk: I'll bring it up again, with a better example argument after 0.14 ships and stuff chills out for a few weeks

1739144712
andrewrk!~andrewrk@mail.ziglang.org
yeah I'm saying I'm not interested in such discussions at the moment

1739144734
LAC-Tech!~lewis@granite-phrase.bnr.la
on the topic of things I think Zig can already do - has anyone made their own little Future/Promise thing? I've been thinking a bit of how it might look in zig. No async/await of course but no issue for me, never cared much for it.

1739144745
grayhatter!~grayhatte@user/grayhatter
*after* it chills out, like after a down time week or two

1739144780
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: would the promise run in a background thread?

1739144830
grayhatter!~grayhatte@user/grayhatter
also

1739144832
LAC-Tech!~lewis@granite-phrase.bnr.la
grayhatter: I sort of want to do it based on arbitrary callbacks

1739144846
grayhatter!~grayhatte@user/grayhatter
the more async code I have to interact with, the more I hate async as a concept

1739144847
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
have you tried libxev?

1739144852
LAC-Tech!~lewis@granite-phrase.bnr.la
when the call back fires, resolve. how and when the callback fires is not part of the Promise

1739144860
grayhatter!~grayhatte@user/grayhatter
zigbee2mqtt sends message out of order because of async/await

1739144877
grayhatter!~grayhatte@user/grayhatter
made me wanna throw my computer out the window

1739144891
LAC-Tech!~lewis@granite-phrase.bnr.la
rockorager: I'm making my own deterministic async run time because Joran is a terrible person who constantly nerd snipes me without even trying

1739144897
LAC-Tech!~lewis@granite-phrase.bnr.la
so libxev isn't really appropriate

1739144899
grayhatter!~grayhatte@user/grayhatter
when the callback fires? huh... how would that work?

1739144908
torque!~tachyon@user/torque
async code with proper coroutines is a lot easier to deal with than callback hell

1739144925
torque!~tachyon@user/torque
this is why I am still holding out hope for zig async even though it is a Hard Problem

1739144944
grayhatter!~grayhatte@user/grayhatter
torque: I'm on the oppisite side... I'm hoping it never comes back

1739144958
torque!~tachyon@user/torque
blaming message order on "async/await" makes no sense

1739144965
LAC-Tech!~lewis@granite-phrase.bnr.la
torque: honestly I'd rather languages just give you the tools to do async, rather than locking you into a thing. like the rust poll based stuff is great, but a bit of a miss for some kinds of async

1739144976
torque!~tachyon@user/torque
it's trivially easy to order things in asynchronous code by using queues or similar

1739144990
grayhatter!~grayhatte@user/grayhatter
people who can't write their own async shouldn't be allowed to use it

1739144997
torque!~tachyon@user/torque
?????????

1739145020
torque!~tachyon@user/torque
in general all of the synchronization structures that multithreaded code uses are useful for async code and are usually a lot easier to implement

1739145031
grayhatter!~grayhatte@user/grayhatter
^ that was said a bit tounge in cheek

1739145079
torque!~tachyon@user/torque
the tremendous value add for async/await as language-level integration is that, like `try`, they show you, upon reading, where asynchronous behavior can occur

1739145082
grayhatter!~grayhatte@user/grayhatter
torque: if you pack stuff into node's async, does it guarentee it will be written in the same order?

1739145087
grayhatter!~grayhatte@user/grayhatter
or is it free to reorder?

1739145091
torque!~tachyon@user/torque
zig would be much weaker without opinionated error handling

1739145107
torque!~tachyon@user/torque
even though you could just let the user do it themselves

1739145161
torque!~tachyon@user/torque
grayhatter, uh, I think that question is too vague to answer reasonably

1739145170
torque!~tachyon@user/torque
it depends on how the code is written

1739145179
LAC-Tech!~lewis@granite-phrase.bnr.la
grayhatter: pretty sure it's comletely non-deterministic with JS. though node in particular, couldn't say

1739145191
LAC-Tech!~lewis@granite-phrase.bnr.la
if you want the order you use monadic chaining

1739145221
grayhatter!~grayhatte@user/grayhatter
LAC-Tech: I know it is

1739145248
torque!~tachyon@user/torque
if you have something like (pseudo code) `for (my array) |item| { await socket.write(item) }` then the items will be written one at a time to the socket. there is no nondeterminism there any more than a synchronous socket write owuld have

1739145269
grayhatter!~grayhatte@user/grayhatter
I know for a fact messages are reaching node (zigbee2mqtt) in the correct order, and then half of the messages leave z2m in the correct order, buth the *one* that I care about is sent in reverse order

1739145286
LAC-Tech!~lewis@granite-phrase.bnr.la
is that guaranteed or jsut a happy coincidence?

1739145315
grayhatter!~grayhatte@user/grayhatter
torque: that's not what SO says

1739145359
grayhatter!~grayhatte@user/grayhatter
but if what happens if you call `socket.write()` and await on them all somewhere else?

1739145375
torque!~tachyon@user/torque
what happens if you spawn a bunch of threads all writing to the same socket?

1739145383
torque!~tachyon@user/torque
of course you can write it to be nondeterministic

1739145394
torque!~tachyon@user/torque
you're attacking a strawman

1739145406
grayhatter!~grayhatte@user/grayhatter
> node 

1739145409
grayhatter!~grayhatte@user/grayhatter
> spawning threads

1739145433
torque!~tachyon@user/torque
imagine, if you will, that languages besides javascript exist

1739145444
grayhatter!~grayhatte@user/grayhatter
parse error unexpected token `spawn thread` in language node

1739145469
grayhatter!~grayhatte@user/grayhatter
torque: there are only two languages, js and rust... the internet knows this

1739145479
torque!~tachyon@user/torque
you've somehow turned your crusade against asynchronous code into hating javascript, which.... I will under no circumstances defend

1739145489
LAC-Tech!~lewis@granite-phrase.bnr.la
https://nodejs.org/api/worker_threads.html sorry to burst your bubble :)

1739145495
torque!~tachyon@user/torque
i, too, hate javasccript. let us join hands and be at peace

1739145497
grayhatter!~grayhatte@user/grayhatter
lol, I can hate both of them equally :D

1739145545
torque!~tachyon@user/torque
async/await-style constructs make it a lot easier to write sychronous-style code than callback hell does anyway

1739145567
LAC-Tech!~lewis@granite-phrase.bnr.la
you don't need syntax sugar for it. you just need flatMap/then/bind whatever you want to call it

1739145573
LAC-Tech!~lewis@granite-phrase.bnr.la
which is what I want to try in Zig

