1761100641
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
when i write `std.debug.print("hello", .{});` it outputs `hello%` is that normal? to add % at the end?

1761101055
qbasiq!~qbasiq@2602:43:496:f800:3d21:c09e:2890:1cc3
is your prompt '%'? You don't have a newline at the end of "hello"...

1761101085
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
yes it goes away if i add `\n` 

1761101176
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
is that a terminal thing causing that effect?

1761101249
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
o, its a terminal thing! lol i was like wtf. i never noticed it since in python print() auto adds that \n at the end.

1761101761
qbasiq!~qbasiq@2602:43:496:f800:3d21:c09e:2890:1cc3
yep. python's print has a default arg end='\n' as a convenience. zig's print is more like c-style printf and requires you to write it explicitly

1761101786
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
good to know thanks qbasiq 

1761101800
qbasiq!~qbasiq@2602:43:496:f800:3d21:c09e:2890:1cc3
happy hacking

1761109078
metheflea!efca19d76b@user/MeTheFlea
stealth_: depending on why you're printing, `std.log.debug` will add the newline after for you

1761124625
sskras!sid542048@id-542048.tinside.irccloud.com
metheflea: how so? I thought the idea is to avoid hidden (implicit) control, and the "depending" sounds exactly like that.

1761124834
metheflea!efca19d76b@user/MeTheFlea
sskras: i meant more like if you were printing for debug messages you should use `std.log.debug` because it does stuff like prefix the message with [debug] and add a newline

1761124834
metheflea!efca19d76b@user/MeTheFlea
but if you were printing stuff to setup data in a buffer or whatever then no extra things is what you need, so then `std.debug.print` makes sense

1761124834
metheflea!efca19d76b@user/MeTheFlea
that's what i meant by "depending", depending on your use case, using the func that adds the newline is maybe nicer

1761124937
metheflea!efca19d76b@user/MeTheFlea
`std.log.debug` will always add the newline, no hidden control there

1761125006
sskras!sid542048@id-542048.tinside.irccloud.com
ah, OK, in essence these were two separate statements, not one (like I interpreted it originally)

1761128015
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
metheflea, I see, I was testing it in std.debug.print

1761128593
hemisputnik!~hemisputn@user/hemisputnik
is there a way to contribute a bugfix to the zig compiler without needing to register a github account?

1761128787
ifreund!2940d10f8b@user/ifreund
hemisputnik: things are in the process of migrating to codeberg actually: https://codeberg.org/ziglang/zig

1761128845
hemisputnik!~hemisputn@user/hemisputnik
ifreund: this is perfect, thanks! does it mean i can just open a PR there, or not yet?

1761128966
ifreund!2940d10f8b@user/ifreund
hemisputnik: I'm not 100% sure of the current preference, but if your options are sending a bugfix on codeberg or not sending a bugfix I'd take the former

1761129037
hemisputnik!~hemisputn@user/hemisputnik
fair enough

1761130357
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
codeberg needs better theme, its too blue! and fonts are small

1761130482
tranzystorekk!86175ff574@voidlinux/maintainer/tranzystorekk
theres the forgejo_dark theme with more pastely browns/reds/oranges

1761130517
ifreund!2940d10f8b@user/ifreund
I quite like the default blue, but luckily for you it's easy to change

1761130580
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
where exactly do you change it as someone just visiting the site? 

1761130620
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
i am looking at https://codeberg.org/ziglang/zig

1761130693
stealth_!~stealth_@216-197-160-97.regn.static.sasknet.sk.ca
apparently blue light is not really good for your eyes.

1761135594
clevor!sid649024@id-649024.hampstead.irccloud.com
How do I get the current target given a Sema?

1761138674
bblack!~bblack@wikimedia/bblack-WMF
does Zig offer any metadata about a target's use of various pointer bits, yet?  (e.g. to know at comptime that the most-significant 2 bits of a pointer can be re-used for some magic metadata by user code or whatever, if they're masked to zero when used as a pointer)

1761142115
erock!8a023a9e4a@pico/erock
I’m curious, how would the new std.Io impact libraries like libxev?

1761142199
bblack!~bblack@wikimedia/bblack-WMF
my assumption is that once std.Io is fully-baked and supports multiple models (Evented, Threaded) on lots of arches, it would replace the need for something like libxev, at least in new code.

1761142628
bblack!~bblack@wikimedia/bblack-WMF
std.Io is such an ambitious idea in general, it scares me a little, to be honest.  It will be one of the killer features of Zig if it's succesful in its aims.  But since I can't fathom successfully designing such a thing myself, it's hard for me to see the path forward for myself :)

1761164983
clevor!sid649024@id-649024.hampstead.irccloud.com
For now, I got the target of the root module as a workaround for now.

1761164991
clevor!sid649024@id-649024.hampstead.irccloud.com
s/For now, //

1761168135
reykjalin!7e28cf3a41@user/reykjalin
it’s possible libxev will just become an implementation of the std.Io interface if they’re doing something different from the implementations shipped in std 

1761176440
ezzieyguywuf!~Unknown@user/ezzieyguywuf
any particular reason that none of the recommended installation options for bun isn't `zig build install`? https://github.com/oven-sh/bun?tab=readme-ov-file#install

