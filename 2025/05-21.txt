1747820806
dutchie!~dutchie@user/dutchie
does zig specify order of evaluation for operator/function arguments?

1747826273
Affliction!affliction@idlerpg/player/affliction
Is it possible to ignore unknown fields when @import'ing .zon files?

1747826959
Affliction!affliction@idlerpg/player/affliction
Pretty much, I'm generating types based on data in a .zon, but I need 2 passes to really get the format I want to use at runtime. Pretty much, first pass extracts keys, builds the enum. Second pass builds an EnumArray containing the actual data (which includes inirectly, a reference to the enum)

1747828886
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
what am I missing? I more or less copied the myLogFn from the example in the std library, but the formatting of the log messages doesn't match that function.

1747828889
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/logging/item/src/logging.zig

1747828914
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/logging/item/src/clientslist.zig#L21

1747828956
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
it looks like the defaultLog function is doing the formatting: https://ziglang.org/documentation/master/std/#std.log.defaultLog

1747829053
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/logging/item/src/logging.zig#L5

1747830014
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
 pub const std_options = std.Options{

1747830037
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
instead of: pub const std_options = .{ ... }

1747830062
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Not updated documentation?

1747830231
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
And putting that line in main.zig does the trick for me

1747835585
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
"Invalidates element pointers to the removed element, if any."

1747835619
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://ziglang.org/documentation/master/std/#std.array_list.ArrayListAligned.pop

1747835628
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
What does that mean exactly?

1747835676
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nullify ... hm

1747836263
clevor!sid649024@id-649024.hampstead.irccloud.com
flower_: If you have a pointer to the last element, pop the last element, and push different element, said pointer now points to something else.

1747837236
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: so my tool is working, thx for the support. It would be nice if you could have a look at some code parts at some point, to avoid taking mistakes with me in my zig programming journey... 

1747837269
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Like how I've my init and deinit functions: https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/develop/item/src/clientslist.zig#L154

1747837278
clevor!sid649024@id-649024.hampstead.irccloud.com
flower_: RE the pop question: https://zigbin.io/c52a45

1747837307
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how I handle a ArrayList: https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/develop/item/src/clientslist.zig#L193

1747837361
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
how I splat this buf and if that makes sense: https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/develop/item/src/clientslist.zig#L457

1747837424
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
and maybe manual memory management in general. It seems to work, so I think I slowly getting that into my brain

1747837467
clevor!sid649024@id-649024.hampstead.irccloud.com
Instead of `while (self.client_list.pop() != null) {}`, try `self.client_list.shrinkAndFree();` or `self.client_list.shrinkRetainingCapacity();`

1747837489
clevor!sid649024@id-649024.hampstead.irccloud.com
0 as the parameter to both*

1747837656
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
self.client_list.shrinkRetainingCapacity(); is what I was looking for indeed

1747837711
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I had this in one function first actually, but that failed at runtime: https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/develop/item/src/clientslist.zig#L596

1747837741
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
So I did split it up and it worked

1747837967
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
clevor: self.client_list.shrinkRetainingCapacity(); is not doing what I want I think. I want to remove the items, but keep the capacity of the arraylist the same

1747838345
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
rockorager: Is this a good way to get all the values from the queue (libvaxis queue.zig)? https://git.sr.ht/~jasm/jasmlabels-private-with-log/tree/develop/item/src/main.zig#L112

1747840691
clevor!sid649024@id-649024.hampstead.irccloud.com
flower: How so? shrinkRetainingCapacity doesn't change the capacity.

1747841268
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
clevor: ah

1747841463
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
clevor: thx

1747847944
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
flower_: yeah

1747848020
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
rockorager: merci

1747850093
rockorager!~rockorage@2600:3c06::f03c:94ff:fea6:1f08
anyone know of a zlib implementation in zig that can take in a custom dictionary?

1747852478
grayhatter!~grayhatte@user/grayhatter
andrewrk: re https://github.com/ziglang/zig/issues/23372 I feel like this should be a compiler bug, thoughts?

1747853124
grayhatter!~grayhatte@user/grayhatter
sorry, I meant to link to the last comment, not just the issue itself.

1747853199
grayhatter!~grayhatte@user/grayhatter
in v0.13.0 zig would unwrap a nullable, if it knew it was never null at comptime. It no longer does that.

1747866710
norineko!~norineko@user/norineko
I keep waffling on making a struct type comptime-generated or not. If I did, I would avoid needing an allocator, and the size of the arrays will be comptime known in my program...

1747869293
grayhatter!~grayhatte@user/grayhatter
norineko: you're waffleing about if you should write better code?

1747869321
grayhatter!~grayhatte@user/grayhatter
if you can write code that doesn't heap alloc, you'd better have a damn good reason not to

