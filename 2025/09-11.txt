1757553164
noam!81879d1ffa@2a03:6000:1812:100::dfc
andrewrk: did you end up getting a comptime allocator running earlier? :D

1757554607
andrewrk!~andrewrk@mail.ziglang.org
yeah I updated the example in https://github.com/ziglang/zig/issues/1291. it works

1757554826
noam!81879d1ffa@2a03:6000:1812:100::dfc
andrewrk: Silly question, stack memory at comptime becomes a global var?

1757554917
andrewrk!~andrewrk@mail.ziglang.org
global const

1757554921
andrewrk!~andrewrk@mail.ziglang.org
.cdata

1757554928
andrewrk!~andrewrk@mail.ziglang.org
err, .rodata

1757555229
noam!81879d1ffa@2a03:6000:1812:100::dfc
stack memory at comptime becomes a global const in rodata?

1757555249
noam!81879d1ffa@2a03:6000:1812:100::dfc
Always,a nd then linker GCs anything unused?

1757555607
andrewrk!~andrewrk@mail.ziglang.org
correct

1757555631
andrewrk!~andrewrk@mail.ziglang.org
more specifically you will get a compile error if you try to reference comptime mutable memory at runtime

1757555642
andrewrk!~andrewrk@mail.ziglang.org
so to avoid the error you must copy the data into a const

1757555651
andrewrk!~andrewrk@mail.ziglang.org
or a var

1757555965
noam!81879d1ffa@2a03:6000:1812:100::dfc
huh.

1757563153
rvrb!~rvrb@156.146.51.230
Oh, thatâ€™s what that error means

1757593949
clevor!sid649024@id-649024.hampstead.irccloud.com
When adding a new OS in std.Target, what if the C `float` is not an IEEE 754 floating-point number? GCC4TI defines `float` as a custom 10-byte value.

1757594030
clevor!sid649024@id-649024.hampstead.irccloud.com
wait

1757594964
clevor!sid649024@id-649024.hampstead.irccloud.com
> The Sierra C compiler has been modified by Texas Instruments to support the TI BCD floating-point format, removing all other previously supported floating-point formats and coprocessors, except for an IEEE format which is used in special cases and exists only in the compiler, not on the TI-89 / TI-92 Plus.

1757594968
clevor!sid649024@id-649024.hampstead.irccloud.com
ah

1757601342
fleischie!~fleischie@vm069.de
Does someone here think it's a bad idea to reuse the same buffer for both an `std.fs.File.stdin().reader()` and an `std.fs.File.stdout().writer()`?

1757601378
fleischie!~fleischie@vm069.de
Even if I promise to only read/write to it sequentially and flush after writing?

1757603624
ifreund!2940d10f8b@user/ifreund
it's probably a bad idea, it's possible if you know what you're doing, but if you know what you're doing you probably have done enough programming to want to avoid writing code that's full of land mines

1757607357
fleischie!~fleischie@vm069.de
No, I wouldn't even pretend to know what I'm doing. Especially with the new IO interface.

1757607411
fleischie!~fleischie@vm069.de
My script uses the stdout-writer to print something (with a flush) and then ask for a "y/N" via the stdin-reader.

1757607427
fleischie!~fleischie@vm069.de
It works for my case and I don't intend on expanding it for now.

1757607452
fleischie!~fleischie@vm069.de
But I'll learn that I should not do it like that. ðŸ˜…

1757616502
winter!~winter@user/winter
o/ - is there a way to dynamically link a libc? can't figure out if it's an option in target, an obj, or an exe, if so

1757617023
winter!~winter@user/winter
i'd think that linkSystemLibrary, manually specifying a libc soname, would be fine, but that short circuts to link_libc, which afaict is purely zig's copy of musl at least on Linux?

1757617072
winter!~winter@user/winter
i want to use either dynamic musl or dynamic glibc, i'm fine with compiling multiple binaries per libc ofc

1757617092
winter!~winter@user/winter
(tl;dr: i want dlopen to work :))

1757617105
winter!~winter@user/winter
s/tl;dr/context

1757617525
winter!~winter@user/winter
huh ok ig linkage has different types depending on the struct :)

1757618155
winter!~winter@user/winter
hm, okay, doesn't do what i want it to do... :-/

1757625458
noam!81879d1ffa@2a03:6000:1812:100::dfc
> if you know what you're doing, but if you know what you're doing you probably have done enough programming to want to avoid writing code that's full of land mines

1757625461
noam!81879d1ffa@2a03:6000:1812:100::dfc
ACTION glances at my code

1757625467
noam!81879d1ffa@2a03:6000:1812:100::dfc
ifreund: bold assumption :D

1757628153
companion_cube!~simon@user/meow/companion-cube:68572
As you get more experience, you just make more advanced land mines ðŸ™ƒ 

1757628575
noam!81879d1ffa@2a03:6000:1812:100::dfc
I build land mines, and then I leave detailed signs with their locations and how to avoid triggering them :P

1757628592
noam!81879d1ffa@2a03:6000:1812:100::dfc
"This cache is the fastest in the world, as long as you don't have any keys that contain a 0xFF byte /j

1757629770
AmandaC!~m-yt727s@cloud.camnet.site
eventually the landmines are just remote triggers for LOICs

