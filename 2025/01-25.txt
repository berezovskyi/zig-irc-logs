1737763614
coleman!~coleman@static.87.86.161.5.clients.your-server.de
okay I have officially forgotten my password for my win10 vm; sorry bud

1737763630
coleman!~coleman@static.87.86.161.5.clients.your-server.de
i'll rebuild it ...later

1737765680
dsal!sid13060@id-13060.lymington.irccloud.com
I've got my builds running/testing on Windows with Github CI.  i.e., I don't know if it works, but it doesn't fail.  (Actually, a test using zeit did fail on Windows, so I believe it's doing something).

1737766107
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
dsal: I need vt output for it, good idea though

1737766125
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Someone volunteered on discord, they will test it out tomorrow - thanks

1737779141
ezzieyguywuf!~Unknown@user/ezzieyguywuf
"The pub in front of a top level declaration makes the declaration available to reference from a different file than the one it is declared in." what counts as a declaration? can/should I put `pub` in front of variables that I want to export?

1737780090
ezzieyguywuf!~Unknown@user/ezzieyguywuf
hah nvm https://www.reddit.com/r/Zig/comments/13v6q2z/struct_fields_are_always_public_by_design/

1737780261
squeek502!~squeek502@user/squeek502
ezzieyguywuf, the grammar might be helpful: https://ziglang.org/documentation/master/#Grammar (fields are separate from decls, test decls and comptime decls can't have pub)

1737780289
ezzieyguywuf!~Unknown@user/ezzieyguywuf
squeek502: ah, this is indeed helpful thanks

1737796869
tsujp!497e1f7b6a@sourcehut/user/tsujp
labelled switches aren't on 0.13.0 are they?

1737797004
tsujp!497e1f7b6a@sourcehut/user/tsujp
would a labelled switch over a _slice_ help with performance of dispatch or is it only over an _array_ (comptime known length) where dispatch performance is optimised?

1737798558
tsujp!497e1f7b6a@sourcehut/user/tsujp
is there a download mirror near south korea for zig 0.14.0 from the 20th? all the ones I find (including official) are sub 20 kbps

1737798579
tsujp!497e1f7b6a@sourcehut/user/tsujp
and its not my connection which is gigabit

1737801129
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm I can't check if a type is a struct at comptime on latest dev

1737801252
tsujp!497e1f7b6a@sourcehut/user/tsujp
it's no longer .Struct but .struct and @"struct" aren't working, we have to construct the enum value from Type ourselves?

1737801464
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah it's now:  .@"struct"  derp

1737805901
Secondary!~Secondary@user/Secondary
Hello! I would like to make proposal for std.

1737805902
Secondary!~Secondary@user/Secondary
I am working on a serializer using Zig's type system and would like to support std.BoundedArray(T, C) as a first-class data type (i.e. it has special treatment when serialized).

1737805902
Secondary!~Secondary@user/Secondary
The problem is that it is rather awkward to detect if the given type is an instance of std.BoundedArray: https://pastebin.com/yUU9n0TL

1737805903
Secondary!~Secondary@user/Secondary
I propose exposing the type constructor's paramters as const declarations: https://pastebin.com/1sWBXcqg

1737806853
tsujp!497e1f7b6a@sourcehut/user/tsujp
i have an enum whose tag is a u8 but who doesn't occupy all 256 possible values, i have a switch over these. I need to provide input to the function containing this switch as a []const u8  but only switch over my named enum tags, all other unnamed tags in u8 should be errors

1737806900
tsujp!497e1f7b6a@sourcehut/user/tsujp
switch (@as(MyEnum, @enumFromInt(inputArray[idx])))    isn't working, the compiler complains about the expected type

1737807031
tsujp!497e1f7b6a@sourcehut/user/tsujp
oh hangon, i think its because im using a labelled switch and continue passes that as a value to the switch statement so I need this at each and every continue

1737807032
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmmmmmmmm

1737810169
tsujp!497e1f7b6a@sourcehut/user/tsujp
given an enum Foo(u8) with tags Lorem, Ipsum I can do [_]Foo{ .Lorem, .Ipsum }  but I also want to do [_]Foo{ .Lorem, 0x01, .Ipsum }   I thought Zig would be able to infer if I did &.{ .Lorem, 0x01, .Ipsum }  but it cant

1737810207
tsujp!497e1f7b6a@sourcehut/user/tsujp
the enum is marked as exhaustive and 0x01 is within the size of a u8

1737810229
tsujp!497e1f7b6a@sourcehut/user/tsujp
I want to do this so I don't have to manually translate enum tag names in array literals when I am writing tests for a function, is this not possible currently?

1737818243
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm given a slice of u8s can I cast that into a single uint?

1737818287
Secondary!~Secondary@user/Secondary
std.mem.readInt

1737818396
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah, forgot to look at the dedicated stdlib docs, many thanks

1737818402
tsujp!497e1f7b6a@sourcehut/user/tsujp
i was on the overall docs page only

1737818793
tsujp!497e1f7b6a@sourcehut/user/tsujp
hmm must be comptime known, uh oh

1737819089
Secondary!~Secondary@user/Secondary
std.mem.readVarInt

1737819109
Secondary!~Secondary@user/Secondary
But you'll have to provide a big enough type (i.e. u64) to capture all possible values

1737819415
tsujp!497e1f7b6a@sourcehut/user/tsujp
im reading a u256 from a slice of 32 elements of a []const u8

1737819476
Secondary!~Secondary@user/Secondary
oh, so what's the problem with readInt()?

1737819524
tsujp!497e1f7b6a@sourcehut/user/tsujp
readVarInt worked, readInt fails with     error: expected type '*const [32]u8', found '[]const u8'     for the exact same code that readVarInt works for

1737819541
Secondary!~Secondary@user/Secondary
you need to @ptrCast it

1737819703
tsujp!497e1f7b6a@sourcehut/user/tsujp
ah is readVarInt actually constructing a new value from the given slice (looking at its source code snippet) whereas readInt attempts to re-interpret it?

1737819722
tsujp!497e1f7b6a@sourcehut/user/tsujp
and u256 requires a pointer by default hence the need to manually ptrCast?

1737819836
tsujp!497e1f7b6a@sourcehut/user/tsujp
oh the ptrCast is on the slice hmmm

1737819925
tsujp!497e1f7b6a@sourcehut/user/tsujp
ptrCast can cause undetectable illegal behaviour though 

1737819966
Secondary!~Secondary@user/Secondary
Yeah, but you said you know you have a 32-element []const u8

1737819973
ifreund!2940d10f8b@user/ifreund
tsujp: no need to pointer cast here, do foo[0..32]

1737819994
ifreund!2940d10f8b@user/ifreund
slicing with comptime-known indexes gives you a pointer to array

1737820020
ifreund!2940d10f8b@user/ifreund
if you don't know for sure that foo.len is >= 32 then you have to check that first of course

1737820060
ifreund!2940d10f8b@user/ifreund
using the slice syntax will give you a safety check failure if you get it wrong though

1737820068
tsujp!497e1f7b6a@sourcehut/user/tsujp
ifreund: i dont have comptime known indices, the exact line is:   const foo = std.mem.readInt(u256, @ptrCast(rom[(self.ip + 1)..(self.ip + 32)]), .big);

1737820084
ifreund!2940d10f8b@user/ifreund
tsujp: foo[x..][0..32]

1737820207
tsujp!497e1f7b6a@sourcehut/user/tsujp
ifreund ah slice by length

1737820647
tsujp!497e1f7b6a@sourcehut/user/tsujp
and now:   std.mem.readInt(u256, (rom[self.ip + 1..][0..32]), .big);

1737835921
netvor!~netvor@2a00:ca8:a1f:cd0:fd0f:51e2:e61e:771b
is there an easy way to format an unsigned value to bits without knowing the width?   eg. for u8 I can specify fmt "{b:0>8}"   but what if i want to always use the bit size of the type?

1737835995
netvor!~netvor@2a00:ca8:a1f:cd0:fd0f:51e2:e61e:771b
i know i could compute the fmt string during comptime but i'm not sure if i can even allocate

1737836946
Gliptic!~glip@2a01:4f8:c012:91f3::1
netvor, there's https://ziglang.org/documentation/master/std/#std.fmt.comptimePrint and you can concatenate slices in comptime with ++

1737837023
netvor!~netvor@2a00:ca8:a1f:cd0:fd0f:51e2:e61e:771b
ah, i think comptimePrint is exactly what I was looking for, thanks

1737840745
grayhatter!~grayhatte@user/grayhatter
I have a question... what's Zig's position on "ideomatic zig" libraries? I'm writing an MQTT lib, and the spec demands a number of behaviors in violation of writing a robust implementation. Should zig code prefer to be robust,  or should it error when the behavior is otherwise unexpected?

1737841048
torque!~tachyon@user/torque
what behaviors are at odd with "robustness" in your opinion

1737841061
dsal!sid13060@id-13060.lymington.irccloud.com
I was thinking about writing an mqtt library, but it seems like someone made one that at least looks somewhat good.  What kinds of things are you concerned would… what they said ^

1737841072
torque!~tachyon@user/torque
I would say that a library following a standard should... follow the standard

1737841352
grayhatter!~grayhatte@user/grayhatter
> if all 7 reserved bits are not 0, it's a protocol error. [close the connection]

1737841380
grayhatter!~grayhatte@user/grayhatter
dsal: who made one already?

1737841387
grayhatter!~grayhatte@user/grayhatter
I looked, but couldn't find any

1737841401
dsal!sid13060@id-13060.lymington.irccloud.com
I was looking at this one:  https://github.com/karlseguin/mqttz

1737841463
dsal!sid13060@id-13060.lymington.irccloud.com
If someone sends an invalid packet in 3.x you'd generally close the connection.  It's slightly better as of 5 (which has been a while), but in any case, if you receive invalid data, you are free to hang up.  That's not a bad thing.

1737841488
grayhatter!~grayhatte@user/grayhatter
in 5, it's a protocol error, and you MUST close the connection

1737841504
grayhatter!~grayhatte@user/grayhatter
if it said MAY, I'd have no problem with it

1737841536
dsal!sid13060@id-13060.lymington.irccloud.com
Why would you not want to close the connection?

1737841566
dsal!sid13060@id-13060.lymington.irccloud.com
(It's been a while since I've been deep in the protocol – turns out, if you do a decent implementation, you don't have to work on it anymore)

1737841569
grayhatter!~grayhatte@user/grayhatter
why would I not want to give up when recovery is possible?

1737841581
dsal!sid13060@id-13060.lymington.irccloud.com
How is recovery possible?

1737841662
grayhatter!~grayhatte@user/grayhatter
if a reserved bit is set, MQTT5 calls that a protocol error, but that bit is meaningless otherwise. it doesn't change the behavior

1737841706
dsal!sid13060@id-13060.lymington.irccloud.com
If a client isn't compliant with the protocol in this way, then can you trust other things it's saying?  It seems pretty clear, though.  If the protocol says to do a thing, then you need to argue with the protocol folks.

1737841765
grayhatter!~grayhatte@user/grayhatter
or, I could use the smart things they suggest, and ignore the dumb ones

1737841766
Earnestly!~earnest@user/earnestly
grayhatter: (Learn from Postel, don't try to recover)

1737841782
grayhatter!~grayhatte@user/grayhatter
Earnestly: citation needed

1737841784
dsal!sid13060@id-13060.lymington.irccloud.com
Heh, that's a funny way to learn form Postel.

1737841807
Earnestly!~earnest@user/earnestly
dsal: That he was wrong, so don't do it

1737841809
dsal!sid13060@id-13060.lymington.irccloud.com
I do think he got us here, but also was wrong.

1737841811
dsal!sid13060@id-13060.lymington.irccloud.com
yeah.

1737841828
grayhatter!~grayhatte@user/grayhatter
> Where a Packet is too large to send, the Server MUST discard it without sending it and then behave as if it had completed sending that Application Message

1737841830
Earnestly!~earnest@user/earnestly
That's the lesson, you always return an error, you never try to accomodate

1737841883
Earnestly!~earnest@user/earnestly
grayhatter: You also have to implement it according to the spec, even if it has seemingly crazy requirements like that

1737841900
Earnestly!~earnest@user/earnestly
There might be a reason why that works

1737841902
grayhatter!~grayhatte@user/grayhatter
sure, when a meaningless reserved bit is set, that's a protocol error, but if a QoS message is undeliverable, pretend it worked

1737841926
dsal!sid13060@id-13060.lymington.irccloud.com
^ that's one area where my client and/or broker are somewhat non-compliant.  I have a bug open for honoring limitations, but I haven't actually bothered to care.

1737841930
Earnestly!~earnest@user/earnestly
Yeah that seems weird but it might be part of the model. A bit of two general's problem where the solution is literally to just spam messages

1737841939
grayhatter!~grayhatte@user/grayhatter
Earnestly: yeah, no... I don't have to do stupid things just because someone wrote them down

1737841957
Earnestly!~earnest@user/earnestly
grayhatter: You do if you want to follow the spec, in fact you must. Use a different protocol if you disagree

1737841980
dsal!sid13060@id-13060.lymington.irccloud.com
Well, if a particular bit must be a particular value, then if it's a different value, the client is incorrect.  But if a client says it can't take a packet larger than a particular size and a different client sends one, then any actual error would have to be out of band.

1737841982
Earnestly!~earnest@user/earnestly
Don't break protocols because you don't like it, better the devil you know - people can deal with oddness, incompatible behaviour is death

1737842006
grayhatter!~grayhatte@user/grayhatter
or, I could write a server, that ignores that statement, and informs the calling application that it's packet was undeliverable, which may be an error state

1737842044
dsal!sid13060@id-13060.lymington.irccloud.com
How do you inform the calling application that the packet is undeliverable?  And what it's only partially undeliverable?

1737842087
grayhatter!~grayhatte@user/grayhatter
dsal: I haven't given that enough thought to decide what the "safe" way to break from the spec will be

1737842101
Earnestly!~earnest@user/earnestly
You assume you understand MQTT's model better than the authors

1737842102
dsal!sid13060@id-13060.lymington.irccloud.com
e.g., I send images through mqtt and some clients can take them and some can't.

1737842148
grayhatter!~grayhatte@user/grayhatter
Earnestly: that's not what I assume, no

1737842148
dsal!sid13060@id-13060.lymington.irccloud.com
It's pubsub and you can send QoS 2 to clients that aren't connected and have asked for messages to be no larger than like, 100 bytes.  It's a weird edge case.

1737842443
Earnestly!~earnest@user/earnestly
dsal: I remember old hackers would just read the RFC, find anything that states 'MAY' or 'SHOULD' and just hammered those until something broke

1737842531
grayhatter!~grayhatte@user/grayhatter
what does the server do when it's required to disconnect due to a protocol error, does it hold onto the session state for the client to reconnect with?

1737842630
dsal!sid13060@id-13060.lymington.irccloud.com
Yeah, I think those are different layers.  Kind of sucks when the disconnect is happening because the client can't deal with a message, but keeps reattaching to the same session.  The session should eventually expire.

1737842675
grayhatter!~grayhatte@user/grayhatter
My point is more... there's plenty of unspecified behavor in the spec, which leaves answers to the various implementations. Which is good, my question is. What is more idomatic zig? to return an error when there's ambiguity? or to continue as normal, only making the requried decisions?

1737842678
dsal!sid13060@id-13060.lymington.irccloud.com
Part of the reason I ended up writing my own broker is because I kept hitting weird bugs in mosquitto that were annoying and difficult to diagnose/fix.

1737842710
grayhatter!~grayhatte@user/grayhatter
dsal: being annoyed at mosquitto is why I'm writing a mqtt lib myself :D

1737842714
dsal!sid13060@id-13060.lymington.irccloud.com
If the spec says to disconnect, but doesn't say to destroy the session, is there ambiguity?

1737842767
grayhatter!~grayhatte@user/grayhatter
dsal: yes, because if the client is sending bad data, and you're disconnecting because you assume the client has become corrupted... why would you permit that client to continue using a session that you have reason to believe is corrupted?

1737842795
grayhatter!~grayhatte@user/grayhatter
it doesn't say I *can't* destroy the session

1737842802
dsal!sid13060@id-13060.lymington.irccloud.com
The session is built around things I think are sensible.  The client can make a mistake after that and need to be restarted.

1737842861
grayhatter!~grayhatte@user/grayhatter
dsal: actually, that's incorrect

1737842886
dsal!sid13060@id-13060.lymington.irccloud.com
Sure, you can do that and the client can know that.  I've learned about some weird edge cases I misunderstood after years of having mine deployed.  Like I kind of misunderstood the message expiry interval for a long time.  There's a case that I wanted to use it for, but another valid case I didn't pick up on for quite a while.

1737842901
dsal!sid13060@id-13060.lymington.irccloud.com
What is incorrect?

1737842928
grayhatter!~grayhatte@user/grayhatter
> If the sender is compliant with this specification it will not send Malformed Packets or cause Protocol Errors.

1737842944
grayhatter!~grayhatte@user/grayhatter
I client is *not* allowed to make a mistake, if it's compliant with the spec

1737843005
dsal!sid13060@id-13060.lymington.irccloud.com
OK, well, you can decide to interpret that as the client always having been wrong up to the point of that mistake if you want.  You can't rescind the messages you relayed for it, though.  You can decide its subscriptions are no longer valid and that it shouldn't receive messages.

1737843025
grayhatter!~grayhatte@user/grayhatter
there's a lot of wierd things in the MQTT spec, it's a bit *too* opinionated for my tastes, but otherwise, I really like that it's so simple

1737843213
dsal!sid13060@id-13060.lymington.irccloud.com
5 was so much better than 3 that they basically solved every concern I have.  I use like, most of it.  I built an RPC library that let me negotiate replication of an application's database over mqtt so I could backfill messages that I'm subscribed to.

1737843214
grayhatter!~grayhatte@user/grayhatter
I would apprecate a bit more flexability, where the server "SHOULD" disconnect, on a protocol error, instead of MUST. There are places where I think a disconnection is the only reasonable outcome, and others where it shouldn't matter

1737843251
dsal!sid13060@id-13060.lymington.irccloud.com
Is there a practical difference?  Anything that's not a MUST is a different kind of ambiguity.

1737843339
grayhatter!~grayhatte@user/grayhatter
> It is a Protocol Error to include the Reason String more than once.

1737843413
grayhatter!~grayhatte@user/grayhatter
^ that's just the closest one to my cursor. I could gladly handle a number of duplicated properties. but I'm not allowed to

1737843567
dsal!sid13060@id-13060.lymington.irccloud.com
You can, but if you allow that, then every client needs to figure out what to do with being given two reasons that something didn't work.

1737843573
grayhatter!~grayhatte@user/grayhatter
wildcard_subscription_available must be 0 or 1, if it's >1 that's a protocol error, and I must disconnect... that means I can't implement an additional wildcard, like * which resolves to numbers, or strings, etc. that would be a backwards compatiable extention that wouldn't break any clients that don't ask for it.. but the spec says nah, that's broken, sorry bub

1737843799
dsal!sid13060@id-13060.lymington.irccloud.com
Getting topic matching right was pretty fun.  That whole subtree mechanism was some of my favorite code.

1737843821
grayhatter!~grayhatte@user/grayhatter
IMO, the correct way to write this would be > a sender must not send [...] and not specify that the reciver must disconnect when you could otherwise safely ignore the high bits

1737843892
grayhatter!~grayhatte@user/grayhatter
¯\_(ツ)_/¯

1737843954
grayhatter!~grayhatte@user/grayhatter
should **zig** code be more eger to return an error, or more eger to ignore undefined data?

1737844612
dsal!sid13060@id-13060.lymington.irccloud.com
This isn't a programming language question.

1737845923
grayhatter!~grayhatte@user/grayhatter
yes it is?

1737846074
grayhatter!~grayhatte@user/grayhatter
in the worst case, it's similar to other stylistic questions, like "no else after return"

1737846342
Earnestly!~earnest@user/earnestly
There's plenty of prior literature you can read on either high-availability or high-safety programming (including time sensitive code execution, both in terms of real-time or resilience to timing analysis). NASA did a good talk on code design for Curiosity (which I cannot find anymore, annoyingly) which discussed the error handling being essentially Erlang. Armstrong is also very good on this

1737846413
Earnestly!~earnest@user/earnestly
The general consensus, if tl;dr is to error out quickly and hard. Never try to recover from bad state, never try to accomodate api misuse, and complete abandom postel's idea of "conservative in what you send, liberal in what you accept".

1737846433
Earnestly!~earnest@user/earnestly
(Curiosity was rebooted 7 times per day just in case)

1737846499
Earnestly!~earnest@user/earnestly
And tangentally related, never to "look before you leap"; ask for forgiveness instead. Prevents a whole class of TOCTOU. Erlang's "let it crash" approach.

1737846566
ifreund!2940d10f8b@user/ifreund
100% agree

1737846662
ifreund!2940d10f8b@user/ifreund
the old philosophy of strict senders and loose receivers that was intended to achieve maximum compatibility/interoperability has proven again and again that the main result is massive security holes

1737846665
grayhatter!~grayhatte@user/grayhatter
> reboot 7 times per day

1737846669
grayhatter!~grayhatte@user/grayhatter
that's bad engineering

1737846710
Gliptic!~glip@2a01:4f8:c012:91f3::1
security holes and random deviations from standards that you have to deal with forever

1737846713
grayhatter!~grayhatte@user/grayhatter
I would be embarrased to unironically suggest anything like this to anyone, with the exception of being in a triage state

1737846748
grayhatter!~grayhatte@user/grayhatter
ifreund: do you have a citation for that?

1737846781
grayhatter!~grayhatte@user/grayhatter
given what I know of security, that's a non-sequitur 

1737847122
Earnestly!~earnest@user/earnestly
grayhatter: Do you know why Curiosity was rebooted 7 times a day?

1737847213
grayhatter!~grayhatte@user/grayhatter
lol

1737847229
grayhatter!~grayhatte@user/grayhatter
nasa.gov descibes it as a warm reset, not a reboot

1737847239
Earnestly!~earnest@user/earnestly
grayhatter: It was rebooted because on Mars they were concerned about radiation flipping bits, despite using radhardened cpus

1737847249
grayhatter!~grayhatte@user/grayhatter
both are very different, so I wonder what you're talking about?

1737847315
grayhatter!~grayhatte@user/grayhatter
Earnestly: do you have a citation for the claim it's rebooted 7 times a day?

1737847317
Earnestly!~earnest@user/earnestly
spacex's rockets use a different approach, which is a load of commodity hardware using paxos consensus iirc

1737847322
grayhatter!~grayhatte@user/grayhatter
I can't find anything like that

1737847372
torque!~tachyon@user/torque
single event upsets are a bitch

1737847392
torque!~tachyon@user/torque
it is hard to write software on top of hardware that might choke weirdly

1737847567
grayhatter!~grayhatte@user/grayhatter
I've gotta grab some food, so it'll take a while to respond, but I'm very curious to read something from nasa about why curiosty is rebooted 7x daily?

1737847646
glguy!glguy@libera/staff/glguy
The Apollo missions had redundant systems that we restarted regularly due to cosmic ray interference and they kept detailed logs about when that would happen

1737847785
Earnestly!~earnest@user/earnestly
I wish I could find that talk about. It was given by the lead programmer for the error handling subsystem. It was a fairly informal setting, not very well lit. She talked about how much of the code was generated via python, also expressed a bit of bemusement at some of the subsystems being done in C++ (despite it being heavily crippled C++) - this talk is on youtube, about the vision system.

1737847815
Earnestly!~earnest@user/earnestly
About 15 or so programmers just ask specific questions about the codebase and design

1737847984
Earnestly!~earnest@user/earnestly
There's also a small chance that it might have been about opportunity, if anyone else tries to find it

1737848966
Earnestly!~earnest@user/earnestly
torque: Yeah, I'm probably still unwilling to really internalise the meaning of amstrong saying you need two computers to have a reliable system (or more) just because my single computer is usually reliable

1737849072
glguy!glguy@libera/staff/glguy
(VSauce sound) or is it?

1737849092
Earnestly!~earnest@user/earnestly
May have found it, but it's an old caltech video, silverlight...

