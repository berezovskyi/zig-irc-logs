1761955551
torque!~tachyon@user/torque
default parameters is a form of polymorphism and it is also less flexible than using a struct because function arguments must be ordered

1761955642
torque!~tachyon@user/torque
I mean your complaint is effectively just a problem with the tooling being immature. The actual null hypothesis would be why add a new language feature when an existing language feature (structs with default fields) covers the use case

1761955674
torque!~tachyon@user/torque
so really you would need to argue for default parameters

1761982268
siaal!~Siaal@user/Siaal
they're a widely used and accepted form of polymorphism that show up often in the stdlib

1761982321
siaal!~Siaal@user/Siaal
re function arguments, i guess i've conflated default parameters and keyword parameters (with defaults)

1761982354
siaal!~Siaal@user/Siaal
which seem like a sane enough idea to me but admittedly i haven't checked to see if there's a rationale behind no keyword args

1761982463
siaal!~Siaal@user/Siaal
maybe the problem could be solved through tooling, but i'm not sure it *should* be solved through tooling

1761982534
siaal!~Siaal@user/Siaal
it lowers the grepability of the code and creates somehat arbitrary hurdles to jump through, when keyword arguments seem like an intuitive solution to the problem

1761982779
siaal!~Siaal@user/Siaal
i'll admit it's probably not a high priority feature, it just struck me as strange to go so far to implement keyword paramters with defaults, yet stop before implementing keyword parameters with defaults

