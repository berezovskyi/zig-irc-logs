1761955551
torque!~tachyon@user/torque
default parameters is a form of polymorphism and it is also less flexible than using a struct because function arguments must be ordered

1761955642
torque!~tachyon@user/torque
I mean your complaint is effectively just a problem with the tooling being immature. The actual null hypothesis would be why add a new language feature when an existing language feature (structs with default fields) covers the use case

1761955674
torque!~tachyon@user/torque
so really you would need to argue for default parameters

1761982268
siaal!~Siaal@user/Siaal
they're a widely used and accepted form of polymorphism that show up often in the stdlib

1761982321
siaal!~Siaal@user/Siaal
re function arguments, i guess i've conflated default parameters and keyword parameters (with defaults)

1761982354
siaal!~Siaal@user/Siaal
which seem like a sane enough idea to me but admittedly i haven't checked to see if there's a rationale behind no keyword args

1761982463
siaal!~Siaal@user/Siaal
maybe the problem could be solved through tooling, but i'm not sure it *should* be solved through tooling

1761982534
siaal!~Siaal@user/Siaal
it lowers the grepability of the code and creates somehat arbitrary hurdles to jump through, when keyword arguments seem like an intuitive solution to the problem

1761982779
siaal!~Siaal@user/Siaal
i'll admit it's probably not a high priority feature, it just struck me as strange to go so far to implement keyword paramters with defaults, yet stop before implementing keyword parameters with defaults

1761983504
torque!~tachyon@user/torque
I guess from my perspective structs are already a required language feature, and default field values provide a nice quality of life. The fact that these can be used to simulate named function arguments and default function arguments is more coincidental than intentional, though convenient (the same thing works in C, though of course there are no default struct field values there unless you really

1761983506
torque!~tachyon@user/torque
like the value 0)

1761983555
torque!~tachyon@user/torque
I agree that they are very slightly worse for certain things than if named arguments or default values were integrated directly into function signatures

1761983608
torque!~tachyon@user/torque
(I generally think having obj-c/swift style argument naming at callsites is quite good for readability and I wish more languages did it)

1761983697
torque!~tachyon@user/torque
but the balance for design is that adding a new feature to the language doesn't actually get you functionality that doesn't already exist and it adds additional complexity to the language

1761983757
torque!~tachyon@user/torque
one of the things I appreciate about zig's design is that it is fairly ruthless in its evaluation of adding language features, even though there are some things I would make different decisions on

1761984570
Travelan!~travelan@user/travelan
What’s wrong with structs as config-style default parameters anyway? Why make the language more complex when there is a perfectly fine construct available in the language? In the end the only difference is a bit of syntactic sugar that doesn’t even save much keystrokes.

1761988780
siaal!~Siaal@user/Siaal
the only difference *for writing* is some syntactic sugar

1761988798
siaal!~Siaal@user/Siaal
the problem, that i mentioned earlier, is i think the readability suffers

1761988837
siaal!~Siaal@user/Siaal
structs work as a hack, but the 'obvious' way to do it in my mind is to implement the thing, not rely on workarounds

1761988865
siaal!~Siaal@user/Siaal
though like torque said, i guess i'm at odds with zig's ruthless culling mentality

1761992340
mortmann!~mortmann@p5dcb2066.dip0.t-ipconnect.de
cant we remove old school function parameters from the language? instead we call each function with a struct. but we do f() instead of f{} to make it a function call. we would end up with less structure nesting, think of f(a, b, .{.c = d}) becomes f(x = a, y = b, c = d) and it would look like named parameters. nah, ive got no clue what im talking about ;)

1761995851
Gliptic!~glip@2a01:4f8:c012:91f3::1
mortman, that's what makes sense to me, then you can define methods in function parameters and why wouldn't you want that!

1761997024
mortmann!~mortmann@p5dcb2066.dip0.t-ipconnect.de
i knew my idea was bad. i book it under helloween idea.

1761997309
Gliptic!~glip@2a01:4f8:c012:91f3::1
it's not really a bad idea to be honest

1761997322
Gliptic!~glip@2a01:4f8:c012:91f3::1
for some language

1761997482
Gliptic!~glip@2a01:4f8:c012:91f3::1
if the syntax was designed around it

1762002982
ezzieyguywuf!~Unknown@user/ezzieyguywuf
zig c-interop is so nice. I was missing pubsub from okredis, so I "just" pulled in the hiredis c library, scared up a build.zig to build it, and badabing I have everything I need

