1744017092
nicefries!~canispeak@user/nicefries
zig/src/Compilation.zig:4942 tells that "aro does not support compiling C objects yet", but when calling aro as seperate executable it is able to compile a c file. why is that?

1744019264
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
In Go you've the option to build with -race, which enables checking for raceconditions. Is there something similar for Zig?

1744019364
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
Gliptic: ok, so I've that address misallignment issue in a dependency. What do you advise me to do? Can I ignore it for the time being?

1744019393
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I might post the issue on ziggit maybe later, see if other people can track down the issue

1744022495
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm but a allignment problem could also be a translate-c issue one would think ...

1744023123
nicefries!~canispeak@user/nicefries
@flower_, when you have a allignment problem: just push a word on the stack and you will be fine again

1744023193
nicefries!~canispeak@user/nicefries
*push 8 bytes on the stack

1744023368
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: that's sounds simple and complex at the same time :)

1744023405
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I'm new to manual memory management, I know what the stack is more or less now.

1744023432
nicefries!~canispeak@user/nicefries
flower_: what are you dealing with?

1744023552
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: https://zigbin.io/89f0dc

1744023605
Sam9!~Sam9@user/Sam9
Hi, I'm building zig from source to try to fix a problem I have. The build completed but I don't have a stage4 folder, only stage3. @see https://github.com/ziglang/zig/wiki/Contributing

1744023620
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: https://git.sr.ht/~flower/zjasmnotes/tree/edit_nsm_header

1744023698
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: I've to set -fno-sanitize flag for the nsm c dependency to make it run without crashing

1744023791
nicefries!~canispeak@user/nicefries
flower_: 8 byte allignment sounds weird, what target are you compiling for? amd64-linux?

1744023820
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: yes

1744023989
nicefries!~canispeak@user/nicefries
flower_: what is lo.h? its not in your project directory

1744024033
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: https://git.sr.ht/~flower/zjasmnotes/tree/edit_nsm_header/item/build.zig#L61

1744024053
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/radarsat1/liblo

1744024110
Sam9!~Sam9@user/Sam9
Is the following from ChatGPT true or a hallucination?

1744024111
Sam9!~Sam9@user/Sam9
ðŸ”„ In newer versions (Zig 0.12+), the build process was simplified, and stage4 was removed.

1744024111
Sam9!~Sam9@user/Sam9
Now:

1744024111
Sam9!~Sam9@user/Sam9
stage3 is the final compiler.

1744024134
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ask ChatGPT?

1744024144
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
;)

1744024208
Sam9!~Sam9@user/Sam9
that may end up in an endless loop. If someone else knows that would be great!

1744024239
ThinkT510!~ThinkT510@sortix/contributor/ThinkT510
you could read the changelogs, grep may be your friend

1744024391
nicefries!~canispeak@user/nicefries
Sam9: stage3 is the final zig compiler (source: https://github.com/ziglang/zig/wiki/Building-Zig-From-Source#instructions)

1744024478
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: https://liblo.sourceforge.net/docs/unionlo__arg.html

1744024481
nicefries!~canispeak@user/nicefries
flower_: your project does build wiht the nsm_h.zig and the zigbin output is a runtime error, corrent? 

1744024526
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: no it uses NSM/nsm_zig.h and NSM/nsm.c

1744024532
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: yes, runtime error

1744024588
Sam9!~Sam9@user/Sam9
nicefries thanks!

1744024979
nicefries!~canispeak@user/nicefries
flower_: what compilation error do you get if you dont use -fno-sanitize?

1744025021
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: none, but then I got that crash at runtime, if I use -fno-sanitize I don't get that crash

1744025266
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: I had to split up the original nsm.h to nsm_zig.h and nsm.c to make it compile

1744025298
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: the original is here: https://git.sr.ht/~flower/zjasmnotes/tree/edit_nsm_header/item/nsm.h

1744025331
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I think this was a problem: https://git.sr.ht/~flower/zjasmnotes/tree/edit_nsm_header/item/nsm.h#L158

1744025457
nicefries!~canispeak@user/nicefries
flower_: that define is alright, it just disables 'unused symbol' compiler warnings and make the symbol static to the compilation unit

1744025518
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: and there was some doubt about this type, whether it should be out_msg: ?*?[*:0]u8 or ?[*]?[*:0]u8

1744025532
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://git.sr.ht/~flower/zjasmnotes/tree/edit_nsm_header/item/src/main.zig#L42

1744025752
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: build errors when building with the original nsm.h file: https://zigbin.io/d9d3ab

1744025903
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: line of build error https://zigbin.io/163ea9

1744025912
nicefries!~canispeak@user/nicefries
flower_: out_msg should be ?[*]?[*:0]u8 because both ptr are many "item pointer"

1744026006
Gliptic!~glip@2a01:4f8:c012:91f3::1
problem was zig translate-c didn't translate the code correctly, and this nsm library is badly implemented

1744026045
Gliptic!~glip@2a01:4f8:c012:91f3::1
having all functions static in a header is silly

1744026151
Gliptic!~glip@2a01:4f8:c012:91f3::1
why is why I told flower_ to split it into a .c and .h like normal C libs

1744026164
Gliptic!~glip@2a01:4f8:c012:91f3::1
*which

1744026173
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
can confirm

1744026227
nicefries!~canispeak@user/nicefries
could you give me a link to the nsm repo?

1744026335
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: my repo which links to nsm.h or where the source is hosted?

1744026354
nicefries!~canispeak@user/nicefries
flower_: where the source is hosted

1744026367
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: https://github.com/jackaudio/new-session-manager/tree/master/extras/nsm.h

1744026527
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
hm I expected this tool to include nsm.h, but it doesn't, it has it's own (similar functions), from the same author of nsm.h:  https://github.com/jackaudio/new-session-manager/blob/master/src/jackpatch.c

1744026655
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
here is a project that seems to use nsm.h: https://github.com/jpcima/adljack/tree/master/thirdparty/nonlib

1744026695
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/jpcima/adljack/blob/master/sources/jackmain.h#L10

1744026718
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/jpcima/adljack/blob/master/sources/jackmain.cc

1744026810
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
https://github.com/jpcima/adljack/blob/master/sources/jackmain.cc#L283

1744028264
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: do you have a hypothesis about the problem here?

1744028409
nicefries!~canispeak@user/nicefries
flower_: still reading

1744028622
nicefries!~canispeak@user/nicefries
flower_: is it possible to get a .zip or .tar of your git repo?

1744028686
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: sure, will see

1744028862
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: with .zig-cache and zig-out?

1744028998
nicefries!~canispeak@user/nicefries
flower_: its okay, i dont need it. i forgot i dont have liblo installed

1744029028
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
ok

1744029149
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
thx for looking at it, amazing actually heheh

1744029285
nicefries!~canispeak@user/nicefries
flower_: https://zigbin.io/705064

1744029326
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: will do

1744030276
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: no successs so far it seems: https://git.sr.ht/~flower/zjasmnotes/commit/02944104226e22d7fe7815d9b118ada7d285f3f7

1744030288
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I've edited the nsm.c file

1744030435
nicefries!~canispeak@user/nicefries
flower_: the changes were meant for https://zigbin.io/d9d3ab, u used nsm.h in here right?

1744030492
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: I see, will apply it to nsm.h

1744030618
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: yep, fixes it: https://git.sr.ht/~flower/zjasmnotes/commit/43d5914e434750d5e695b64ef96a5b39348b5637

1744030643
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
the compile errors that is with nsm.h

1744030790
nicefries!~canispeak@user/nicefries
compiler is happy, but you still get the runtime error?

1744030812
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: no runtime errors indeed ...

1744030839
nicefries!~canispeak@user/nicefries
no misallignment problems anymore?

1744030849
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: it doesn't seems so ...

1744030863
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
cool

1744030918
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: so that's fixed with this? :)

1744031028
nicefries!~canispeak@user/nicefries
there is no misallignment, it was just a type mismatch that is possible in c, but not in zig

1744031136
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: I see, hm but zig should be able to handle line 4 isn't it? https://zigbin.io/705064

1744031161
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
as it is legal c code afaik

1744031203
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
not that I'm a c coder but ... I've seen it before ...

1744031257
nicefries!~canispeak@user/nicefries
its legal c because * could be a pointer or a many-item-pointer (with unkown size). in zig you have different types for that: * is a single-item pointer, [*] is a many-item-pointer (with unkown size)

1744031345
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
I see. So while zig interacts closely with c, you might have to adjust c code now and then to make the compiler happy

1744031757
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
nicefries: thanks a lot. Working with liblo, nsm and jack is a major reason for me to learn zig and I was a bit in dispair by this issue I encountered.

1744031842
nicefries!~canispeak@user/nicefries
flower_: you're welcome

1744031874
flower_!~archie@83-81-123-193.cable.dynamic.v4.ziggo.nl
you made my day, heheh

1744034703
nicefries!~nicefries@user/nicefries
zig/src/Compilation.zig:4942 tells that "aro does not support compiling C objects yet", but when calling aro as seperate executable it is able to compile a c file. can anybody explain this?

1744042633
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
i'm working on this toy project using  https://github.com/Not-Nik/raylib-zig, there's almost no code, but `zig build run` takes 15-20 seconds every time.  ..  is there something i could do to speed it up? here's my build.zig   https://bpa.st/FVSQ

1744043170
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
netvor: is there a particular step that's taking most the time?

1744043240
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
IE if the deps are not on the latest hash version, they will be re-fetched every build. raylib-zig is on the latest hash version but I'm not sure how that interacts with pulling in upstream raylib (the C lib)

1744045957
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
rockorager: i don't know how to profile which step takes how much time; by eyeballing it looks like some fetch

1744045976
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
My guess is it's fetching that C lib every build then

1744046008
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
I'm not sure a how to tell the zig cache to not do that - maybe if you point to a http + tarball instead of a git+http?

1744046021
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Someone else here probably knows how to do that

1744046069
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
btw here's my build.zig.zon https://bpa.st/7KTA 

1744046099
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
not sure if that helps to see if it's latest hash version

1744046114
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
i'll try to re-fetch it

1744046134
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
or as you say, use tarball

1744046544
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
so just re-fetching it helped, for now.  is seems as if there was some problem in their build.zig that was causing it which was fixed, although looking at git log does not suggest that

1744046564
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
anyway i'll get back to hacking on squares and circles, thanks :)

1744046611
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Oh you maybe were on an older hash of raylib-zig that didn't have the updated hash. I just looked at the master branch on github

1744046866
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
btw the branch is called `devel` at least the one they suggest using for the fetch in their readme

1744046898
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
which does make me a bit nervous but then hey it's raylib :)

1744047769
Cuboid!~Cuboidigo@user/Cuboidigon
what is the way to format an error when printing?

1744048085
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
you mean something like `const foo = 2; std.log.err("fooo={d}", .{foo}");` ?  Cuboid 

1744048105
Cuboid!~Cuboidigo@user/Cuboidigon
yeah

1744048122
Cuboid!~Cuboidigo@user/Cuboidigon
i think

1744048135
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
still not sure what the question is, though :)

1744048148
Cuboid!~Cuboidigo@user/Cuboidigon
what would go in the brackets when printing out an error with std.debug.print

1744048158
Cuboid!~Cuboidigo@user/Cuboidigon
like for strings it would be {s}

1744048182
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
for full doc i always just read std/fmt.zig directly

1744048207
Gliptic!~glip@2a01:4f8:c012:91f3::1
{!} IIRC

1744048210
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
https://ziglang.org/documentation/master/std/#src/std/fmt.zig

1744048225
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
ahh yeah `!` :)

1744048271
Gliptic!~glip@2a01:4f8:c012:91f3::1
hm, really for error union, not sure it works for the error itself

1744048326
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
not sure what is the difference but i always use `{!}` in `catch |e| .. ` situations

1744048328
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
Just {} for an error

1744048345
Cuboid!~Cuboidigo@user/Cuboidigon
'!' works

1744048351
rockorager!~rockorage@172-234-192-125.ip.linodeusercontent.com
catch |err| std.log.err("err={}", .{err}

1744048358
Gliptic!~glip@2a01:4f8:c012:91f3::1
yeah, anything inside {} would error

1744048376
Gliptic!~glip@2a01:4f8:c012:91f3::1
if (actual_fmt.len != 0) invalidFmtError(fmt, value);

1744049119
Cuboid!~Cuboidigo@user/Cuboidigon
is it possible to see if a path to something is a directory or a file?

1744050308
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
eg. std.fs.openFileAbsolute  and then take .metadata() on the returned File object

1744050326
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
IIRC the metadata has .kind 

1744050356
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
but i don't think it resolves symlinks so if `.kind == .symlink` it could point to either

1744050426
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
.. https://ziglang.org/documentation/master/std/#std.fs.File

1744051233
Cuboid!~Cuboidigo@user/Cuboidigon
and that would work if the path was to a directory instead of a file

1744054934
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
https://bpa.st/CKBA .. openFileAbsolute actually opens dir just as well as file, and the Kind is resolved, ie. on my machine `/bin` is a symlink but Kind is .directory

1744054999
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
i suppose the .symlink value is there for other API (or maybe could appear there for a broken symlink as in)

1744055008
netvor!~netvor@2a00:ca8:a1f:cd0:41e0:84d1:9ac4:27ee
.. as in find(1)

