1590883205
pixelherodev
Is there an idiomatic way to sort an ArrayList?

1590883235
pixelherodev
Without needing to allocate a new one

1590883264
pixelherodev
Huh, there's a std.sort?

1590883296
gonz_
Yeah, I don't think the ArrayList holds on to any pointer to any significant element, so you can sort the `array_list.items`, I think...?

1590883303
pixelherodev
Yeah exactly

1590883308
pixelherodev
It definitely doesn't hold on to anything

1590883323
pixelherodev
Wasn't arrare (pun, not typo ;) there was a slice sorter at all

1590883494
pixelherodev
n * log(n) vs pow(n,2)... I know math even if I don't know formal programming, and log n is obviously smaller than N, so std.sort.sort is probably the best option?

1590883605
gonz_
I've never even bothered checking which sorts we had in the standard library

1590883608
gonz_
I have used it, though

1590883639
pixelherodev
Yeah, std.sort.sort is probably the best opion

1590883642
pixelherodev
option

1590884203
pixelherodev
Hmm, the sort is going to be painful

1590884210
pixelherodev
It's not as straightforward as I'd like

1590884220
pixelherodev
It might be easier to just add local labels first and sort those instead

1590884232
pixelherodev
Labels currently consist of "name", "block", and "offset" (within the block)

1590884245
pixelherodev
Items within the same block should be sorted by offset, but if the block is different the sort is meaningless

1590884266
pixelherodev
The important part is that labels with the same block should be next to each other...

1590886099
pixelherodev
Ohh! I can use the block address!

1590886125
pixelherodev
That'll sort blocks with each other, but with a few tweaks it should be sufficiently efficient

1590886200
pixelherodev
That makes labelLess as simple as `return @ptrToInt(lhs.Block) < @ptrToInt(rhs.Block) or (lhs.Block == rhs.Block and lhs.Offset < rhs.Offset);return @ptrToInt(lhs.Block) < @ptrToInt(rhs.Block) or (lhs.Block == rhs.Block and lhs.Offset < rhs.Offset);`

1590886204
pixelherodev
Whoops

1590886208
pixelherodev
double paste dammit

1590886213
pixelherodev
`return @ptrToInt(lhs.Block) < @ptrToInt(rhs.Block) or (lhs.Block == rhs.Block and lhs.Offset < rhs.Offset);`

1590886687
pixelherodev
Unidiomatic Zig 101:

1590886701
pixelherodev
const Label = @typeInfo(Thor).Struct.fields[1].field_type.Label;

1590886741
pixelherodev
The type is private, but @typeInfo gives fields, and there's a field of the private type... which is now public.

1590886744
pixelherodev
:P

1590887272
pixelherodev
ohhhhhh crap this won't work

1590887294
pixelherodev
Blocks are being stored by

1590887300
pixelherodev
so pointers are

1590887315
pixelherodev
hmm, labels should probably just be removed on usage then? that should fix this...

1590887644
pixelherodev
Yayyy, thinkg work now!

1590887646
pixelherodev
things*

1590890512
squeek502
andrewrk, any reason not to have a link to the google sheets graphs in the gotta-go-fast readme?

1590893138
andrewrk
squeek502, nope! good point

1590894880
pixelherodev
andrewrk: did you rewrite my graph generator in Zig yet? If not, want me to do it/

1590894882
pixelherodev
?

1590897706
daurnimator
Hey I'm thinking of looking at an allocator again today

1590897718
daurnimator
Maybe stream it...

1590897989
pixelherodev
Anyone interested in a stream on stage2 work from someone who has... noticably less experience with it than Andrew does? :P

1590898001
pixelherodev
I'm thinking I might do that at some point tomorrow if anyone's interested

1590898003
pixelherodev
...today.

1590898005
pixelherodev
It's midnight.

1590911295
scientes
how do i generate a ZigValue for a 0 sentinel?

1590911314
scientes
I just want to generate "[:0]const u8"

1590911325
pixelherodev
Generate?

1590911328
scientes
in stage1

1590911436
scientes
ahh there is a special

1590911445
scientes
for_zero_byte()

1590911449
pixelherodev
Ohh

1590911452
pixelherodev
you meant within the compiler :)

1590911460
pixelherodev
ZigValue should've tipped me off :P

1590912304
eleanor-nb
Heyo. CMake is struggling to build master. It displays the following errors:

1590912315
eleanor-nb
CMake Error: CMake was unable to find a build program corresponding to "Unix Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.CMake Error: CMAKE_C_COMPILER not set, after EnableLanguageCMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage

1590912328
pixelherodev
What system are you on?

1590912330
scientes
eleanor-nb, you don't have make installed

1590912344
scientes
that is what that is saying

1590912346
pixelherodev
scientes: yes, but that might not be the underlying issue :)

1590912364
pixelherodev
eleanor-nb: are you on Linux? Windows? Mac?

1590912374
eleanor-nb
Huh. So I don't. Weird.

1590912393
pixelherodev
You can also use Ninja, that's what I do :)

1590912426
eleanor-nb
pixelherodev: linux-aarch64. Specifically, Manjaro ARM on Pinebook Pro. It came with clang and LLVM libs, so I assumed it had make as well.

1590912432
pixelherodev
Ahh, neat

1590912435
pixelherodev
Yeah, that's odd

1590912452
pixelherodev
Can't wait until they're back in stock...

1590912499
eleanor-nb
Have they run out already? :')

1590912530
pixelherodev
Yeah :(

1590912534
pixelherodev
I would have placed the order

1590912538
pixelherodev
but my bank said "Uh"

1590912543
pixelherodev
"You never spend money"

1590912546
pixelherodev
"Are you okay?"

1590912551
pixelherodev
And I was all like

1590912583
pixelherodev
"Sheesh I'm fine" and Pine was like, "uh... yeah they're gone now," and I pulled an Anakin

1590912591
pixelherodev
The shouting NOOOO thing

1590912599
pixelherodev
Not the child murdering

1590912649
pixelherodev
... wait whoops this isn't the Discord. ... yeahhhhhh

1590912682
eleanor-nb
Honestly, you're not missing all that much. It's...fine, I guess, but it's not really fundamentally different from the experience on any other laptop. Except it's weak. Very weak.

1590912772
pixelherodev
Except it's metallic instead of this cheap plastic, so it's more durable; it's easier to hack, as the project is much more open; the performance won't be noticably different to me, as anything important I do over SSH;...

1590912834
eleanor-nb
Oh yeah, you have that compile farm, don't you? Then yes, it fits your use case perfectly '=(

1590912864
pixelherodev
Not really a compile farm

1590912867
pixelherodev
It's an old PC :P

1590912900
eleanor-nb
Language is use ;)

1590912903
pixelherodev
`ssh pixelpc grep name /proc/cpuinfo|head -n1` -> `model name : Intel(R) Core(TM) i5-3470 CPU @ 3.20GHz`

1590912906
pixelherodev
True

1590912996
pixelherodev
I might offer to open it up for compilation (for Zig only) for anyone else who needs it on a first-come basis if I can make sure I know what I'm doing enough that security isn't an issue

1590913132
pixelherodev
It's really nothing special, but if it's helpful for people with even older hardware, I'd love to be able to make life easier

1590913143
pixelherodev
I know the pain of trying to develop on a Celeron all too well

1590913148
pixelherodev
:(

1590913211
eleanor-nb
Ew.

1590913226
pixelherodev
Yeah.

1590913237
scientes
more like a celery-on

1590913249
eleanor-nb
Celery on, CPU off.

1590913250
pixelherodev
An assembler on my TI calculator would literally have been faster.

1590913280
pixelherodev
Replacing Windows with a tiny distro made life much easier

1590913286
pixelherodev
(no constant swapping! Yay!)

1590913299
pixelherodev
But it's one of many reasons I ended up ditching C++

1590913303
pixelherodev
Compiling C on there was honestly okay

1590913308
pixelherodev
It wasn't

1590913311
pixelherodev
But it wasn't

1590913321
pixelherodev
C++ was objectively awful, and I don't even want to imagine what Rust would have been

1590913353
pixelherodev
and I'm ethically opposed to the idea of just "tossing more hardware at the issue!!!" Efficiency isn't just a means to an end IMO, it's a goal we should be striving for for its own sake

1590913382
pixelherodev
To be fair, the language itself isn't really at fault

1590913390
pixelherodev
Some C++ packages compile quickly

1590913394
pixelherodev
ditto with Rust

1590913407
pixelherodev
The problem is that the patterns people use often are those that are most difficult for the compiler

1590913418
pixelherodev
Because people just don't consider compile time a priority

1590913558
eleanor-nb
As usual, humans are the worst.

1590914448
scientes
pixelherodev, you can't just throw more hardware at a O(n^2) algorithm

1590914450
scientes
it doesn't work

1590914509
pixelherodev
Which is why you should use a better algorithm

1590914510
pixelherodev
That's my point

1590914522
pixelherodev
Fix the software instead

1590914845
scientes
uggh, memory allocation in a library is hard

1590914859
pixelherodev
Really?

1590914863
pixelherodev
Why not just take an Allocator

1590914865
pixelherodev
?

1590914869
pixelherodev
Guessing there's more to it than that?

1590914872
scientes
i need this to be callable from C

1590914875
scientes
from stage1

1590914906
scientes
I am already using two allocators too

1590914927
scientes
a FixedBufAllocator (linear array), and a scratch memory allocator

1590914934
pixelherodev
Hmm

1590914991
scientes
I guess I could just pass in a pointer to realloc C function

1590916288
afontain_
`const slice = array[0..array.len]`?

1590916313
afontain_
(you could stop before len if you want)

1590916322
scientes
yeah, but if it isn't const it isn't const

1590916348
scientes
oh nvm

1590916356
scientes
ueaj arr[0..]

1590916534
greenfork
afontain_: tried, still complains that the slice is of []u8 and not []const u8

1590916558
afontain_
it sounds weird

1590916596
afontain_
I thought it was always possible to take something you can modify and decide not to modify it

1590916612
greenfork
yes, it's what the docs say as well

1590916768
scientes
greenfork, can you post your code

1590916795
greenfork
scientes: I did it, here it is again

1590916947
scientes
ahh yes, you need to do var const_request_line_buf = request_line_buf[0..];

1590916953
scientes
uggh

1590916962
scientes
with : []const u8

1590916978
scientes
to tell it that you are assuring it won't change while it is looking at it

1590917010
scientes
nah

1590917014
scientes
you didn't do [0..]

1590917017
scientes
you did & instead

1590917031
scientes
it should be complaining that it is *[8000]u8 however

1590917034
scientes
that error doesn't seem right

1590917063
greenfork
scientes: thank you so much, `var const_request_line_buf = request_line_buf[0..];` this works

1590917081
scientes
well, request_line_buf[0..] would work too

1590917082
greenfork
with [0..] instead of & the error is still the same

1590917084
scientes
you can't just make a pointer to it

1590917086
scientes
this isn't C

1590917088
scientes
it is type checked

1590917095
scientes
oh hmm interesting

1590917305
ifreund[m]
isn’t the error coming from the parseRequestLine call?

1590917328
greenfork
yes it does

1590917369
ifreund[m]
alright let me get out of bed and pull up this code

1590917499
ifreund
greenfork: so fixedBufferStream expects a type but you're passing it a slice

1590917534
greenfork
ifreund: it's a function, letter "f" is small

1590917540
ifreund
oh no, this is right, i missed the capitalization

1590917542
ifreund
yeah

1590917682
ifreund
greenfork: @as works     var request_line_fbs = std.io.fixedBufferStream(@as([]const u8, &request_line_buf));

1590917876
greenfork
oh right. I must have changed so many things, I thought I tried it, this really does work

1590917879
greenfork
thanks!

1590917908
ifreund
this also works for me: const buf: []const u8 = &request_line_buf;

1590917917
ifreund
no problem!

1590917952
ifreund
(this is doing an implicit @as() so it makes sense that it would work)

1590925616
scientes
ifreund, a function call should also do a @as however

1590925633
scientes
anyways

1590925641
ifreund
scientes: this function takes var

1590925721
ifreund
the error occurs when the next function takes std.io.FixedBufferStream([]const u8) but a std.io.FixedBufferStream([]u8) which you can't convert with @as()

1590925735
ifreund
*but the []u8 version is passed

1590929547
ikskuh
seems like stuff is broken in translate-c

1590929630
ikskuh
yep

1590929635
ikskuh
including SDL.h breaks zig build atm

1590931364
scientes
Semantic Analysis [982/1288] ./bisect.zig:285:42: error: expected type '[*:0]const u8', found '(null)'

1590931364
scientes
export fn generateUnnumbered(entries: [*:null][*:0]const u8, resultBuffer: [*]u8, resultBufferLen: usize, scratchBuffer: [*]u8, scratchBufferLen: usize) i64 {

1590931364
scientes
^

1590931374
scientes
how do i do a null-pointer sentinel?

1590931391
pixelherodev
Hmm

1590931396
pixelherodev
I think the issue there is the type

1590931403
pixelherodev
`[*:0]const u8`

1590931417
scientes
yeah its a zero-terminated string

1590931418
pixelherodev
The type of that is, as I understand it, pointer-to-many const u8s

1590931430
pixelherodev
Not

1590931441
pixelherodev
So it's impossible to have a null value of that type

1590931448
pixelherodev
Hence, expected that type, but found null

1590931455
pixelherodev
For that to work, you need to change the underlying type

1590931457
scientes
yeah but there will always be at least one

1590931462
scientes
do i don't want an optional

1590931467
scientes
the null is only to signify the end

1590931471
pixelherodev
Yes,

1590931476
pixelherodev
The type system won't allow that

1590931484
scientes
i think it should work this way however

1590931486
pixelherodev
You can't use a null sentinel on a non-optional type

1590931499
pixelherodev
I agree that it would be nice, but I don't think that's a good idea

1590931503
scientes
hmm ok

1590931509
pixelherodev
The problem is that the sentinel

1590931519
pixelherodev
s/structure/type it's marking

1590931633
pixelherodev
scientes: think of it this way. A sentinel means that the length isn't known at comptime.

1590931651
pixelherodev
Since the sentinel value has to be able to represent null,

1590931663
pixelherodev
Which means every one

1590931670
scientes
hmmm .len isn't working anymore

1590931675
scientes
on sentinel pointers

1590931676
pixelherodev
There's no way to change it to match the behavior you'd desire there, unfortunately

1590931684
pixelherodev
Is it an optional?

1590931692
pixelherodev
Ohh, right

1590931694
pixelherodev
len won't work

1590931701
pixelherodev
If you're using a sentinel, it means length isn't known

1590931709
pixelherodev
There's probably a stdlib func to determine the length

1590931711
scientes
is there a convenience function?

1590931717
pixelherodev
Probably

1590931719
pixelherodev
One sec

1590931721
pixelherodev
let me check

1590931775
pixelherodev
span

1590931777
pixelherodev
std.mem.span

1590931788
pixelherodev
Takes... sentinel-terminated pointer, and returns a slice

1590931798
pixelherodev
Slice will still have the sentinel too

1590931810
ifreund
also spanZ

1590931879
pixelherodev
Yeah

1590931889
pixelherodev
but that doesn't matter here, sinc len isn't known ;)

1590934718
phdye
Hi, I'm new to zig.  How does one declare the equivalent of char** to pass to a function ?    Code to follow.

1590934736
phdye
char *argv[] = { "naval_fate.py", "mine", "set", "10", "30", "--moored" };

1590934743
pixelherodev
You want a slice of slices

1590934749
scientes
phdye, char *[]u8

1590934759
pixelherodev
`const argv = &[_][]const u8 { "", "" };`

1590934760
phdye
fn command ( argc : c_int, argv : [*][*]const u8 ) void

1590934779
pixelherodev
Ahh, ptr to ptr

1590934786
pixelherodev
that argv should still work, I believe

1590934792
pixelherodev
No wait, ptr-to-slice

1590934794
pixelherodev
hmm

1590934804
phdye
var argv = [_][*]const u8{ "naval_fate.py", "mine", "set", "10", "30", "--moored" };

1590934818
phdye
command ( argv.len, argv );

1590934834
pixelherodev
Yeah, that should work

1590934837
phdye
./args.zig:10:25: error: expected type '[*][*]const u8', found '[6][*]const u8'

1590934841
pixelherodev
Ahh

1590934843
pixelherodev
add a &

1590934854
pixelherodev
&[_][*]const u8 { "", "" }

1590934871
pixelherodev
Zig doesn't have implicit coercion of arrays to pointers

1590934875
pixelherodev
(c does)

1590934898
phdye
ah, thank you very much.   And thank you for the explanation of why.

1590934937
pixelherodev
Yeah, no problem :)

1590934963
phdye
I'm porting docopt

1590935006
ifreund
neat

1590935048
pixelherodev
Nice :)

1590935100
BaroqueLarouche
How do I fix this with latest master ?:

1590935100
BaroqueLarouche
pub const EXCEPTION_ROUTINE = extern fn ([*c]struct__EXCEPTION_RECORD, PVOID, [*c]struct__CONTEXT, PVOID) EXCEPTION_DISPOSITION;

1590935100
BaroqueLarouche
.\src\win32.zig:142:31: error: invalid token: 'extern'

1590935278
phdye
With respect to my argv question, how would one declare the variable and initializer such that one would not need the & on the function call ?

1590935313
pixelherodev
Add the & to the initializer

1590935336
pixelherodev
BaroqueLarouche: scan the git logs for extern?

1590935339
pixelherodev
one sec

1590935357
ifreund
note that you probably want `const argv = &[_][]const u8{ ... };` then

1590935371
ifreund
the pointer is const, not the array it points to

1590935403
pixelherodev
Hmm

1590935407
pixelherodev
I don't see anything

1590935426
pixelherodev
yeah, that's a constant pointer to a mutable array of constant strings

1590935450
phdye
and if one were to include the datatype ?

1590935451
phdye
var argv : &[*][*]u8 = &[_][*]const u8{ "naval_fate.py", "mine", "set", "10", "30", "--moored" };

1590935463
pixelherodev
The & isn't part of the type

1590935469
pixelherodev
The type is pointer-to-pointer-to-u8

1590935480
pixelherodev
[*]const u8 = pointer-to-const-u8

1590935491
pixelherodev
[_] = array with inferred length

1590935497
pixelherodev
& = take address of what follows

1590935517
pixelherodev
[_][*]const u8 = array of pointers to const u8s

1590935529
pixelherodev
&[_][*]const u8 take the address of the array

1590935543
pixelherodev
Which gives a pointer to the first element

1590935549
pixelherodev
aka a pointer to pointer to const u8s

1590935555
pixelherodev
or [*][*]const u8

1590935566
pixelherodev
Which, thus, is the type of that decl

1590935579
ifreund
don't you want slices over pointer-to-many here though?

1590935579
phdye
./args.zig:8:42: error: expected type '[*][*]u8', found '*const [6][*]const u8'

1590935611
pixelherodev
That doesn't coerce? Huh

1590935613
pixelherodev
Hmm

1590935635
pixelherodev
It coerces to a *slice*, and taking the pointer of that would give you what you want

1590935638
phdye
I simply what to declare whatever forms that may be passed as the argv to main

1590935647
pixelherodev
ohh

1590935651
pixelherodev
you're missing a const

1590935658
pixelherodev
You can't go from a const pointer to a mutable one

1590935667
phdye
good point

1590935675
pixelherodev
I think it should coerce with that

1590935731
phdye
and I, to learn more, I would like to be able to declare the argv such that it does not need to have the '&' prefixed on the function call.

1590935792
ifreund
this is what I would do ^

1590935792
ifreund
could just call it args too, since you don't need argc anymore as the length is part of the type

1590935792
ifreund
const argv: []const []const u8 = &[_]const []const u8{"abc", "one", "two"};

1590935878
ifreund
oh i have a typo in there, should just be `&[_][]const u8`

1590936130
phdye
excellent, that works.

1590936215
phdye
I did have to change the receiver's declaration to []const []const u8, it was [*]const [*]const u8.

1590936246
ifreund
yeah, you generally want to use slices instead of pointer-to-many in zig as they're nicer to work with

1590936260
ifreund
[*] has its uses though

1590936271
phdye
What should pub main be normally ?  I found three styles in the zig repo:

1590936274
phdye
extern fn main(argc: c_int, argv: [*:null]?[*:0]u8) c_int;

1590936285
phdye
fn main(argc: c_int, argv: **u8) c_int

1590936299
phdye
pub export fn main(argc: c_int, argv: [*][*]u8) c_int

1590936316
ifreund
pub fn main() !void {} is what i usually do as it's the simplest

1590936346
ifreund
then you can get the args with `std.process.args`

1590936373
ifreund
or std.os.argv

1590936495
phdye
hmm, not an option when must receive it as an argument.  In this case, the docopt() will be passed it.  And for testing, unit testing argument is more flexible than global IMHO.

1590936661
phdye
thank you for your help

1590936745
ifreund
no problem!

1590937340
pixelherodev


1590937378
pixelherodev
A small tour of my compiler project as it stands today :)

1590937531
ifreund
2 hours, nice

1590937565
pixelherodev
Well, I basically covered all the active components

1590937571
pixelherodev
s/active/in active development

1590937588
pixelherodev
ZiggIRat (LLVM IR parser) is basically done, I just need to finish up lightzing so I can hook them up

1590937609
pixelherodev
Heck, I think I might mark ZiggIRat as 0.1 today

1590937616
ifreund
cool stuff

1590937627
pixelherodev
There's ~10 thgings it can't parse currently

1590937636
pixelherodev
but none of them matter for e.g. Zig output

1590937652
pixelherodev
It's fully possible to use it to write a Zig compiler (instead of ZIR) (but please don't)

1590937655
ifreund
you should sign up for one of kristoff_it's events to give a talk if you haven't already :D

1590937661
pixelherodev
I'm going to

1590937669
pixelherodev
The only reason I didn't was I needed some more time

1590937677
pixelherodev
Thor is basically ready to show his muscles now though ;)

1590938110
marler8997
daurnimator: you here?

1590938159
daurnimator
marler8997: ya

1590938213
marler8997
looks like windows doesn't have a way to make a socket non-blocking in WSASocketW...so should we still handle that flag in os.zig by a subsequent call to setsockopt? So it's the same interface for posix/windows?

1590938266
marler8997
and the socket_type on windows is an enum rather than a set of flags, but I'm guessing we want it to treat it as a flag set in os.zig

1590938423
alexnask
You can make the socket non blocking with ioctlsocket

1590938497
marler8997
oh right, ioctlsocket instead of setsockopt

1590938508
alexnask
However you then have to use select() or WSASelect to poll if its writable to wait for connect() to finish (not sure about other calls like accept bind etc)

1590938522
alexnask
Which doesnt really integrate with the event loop

1590938530
marler8997
but what I'm asking is, should we support the SOCK_NONBLOCK/SOCK_CLOEXEC socket type flags for windows in os.zig

1590938557
marler8997
even though those flags aren't supported on the socket type when you call WSASocket or windows' socket function directly

1590938583
alexnask
I dont think those are even defined in winsock (could be wrong), they def have no effect though

1590938590
marler8997
they aren't

1590938593
marler8997
that's why I'm asking

1590938627
marler8997
but we could take those flags in os.zig, and translate them to the analagous flags for windows

1590938877
alexnask
I dont think that would be the way to proceed personally, the interfaces are just different enough that we shouldnt even offer the windows versions in os.zig imo

1590938889
alexnask
But rather call into os or the windows stuff directly from net.zig

1590938950
marler8997
so if we didn't support windows in os.zig (i.e. posix.zig), would you think we'd create a common networking api that works for both posix and windows?

1590938976
marler8997
oh, net.zig would be the common networking api

1590938979
alexnask
^

1590938999
marler8997
daurnimator: what do you think?

1590939026
marler8997
abandon my change to add windows support in os.zig and start implementing the network api in net.zig?

1590939032
alexnask
This is what we do in zig-network. A lot of the calls are interchangeable but not everything so I think its cleaner this way

1590939061
marler8997
I think you can do it either way, or both if you want to

1590939068
marler8997
I don't care much, I just want something that works

1590939072
daurnimator
marler8997: I think we should end up with implementations in std/net.zig

1590939075
marler8997
so please just tell me when you want

1590939077
daurnimator
and they can be much higher level

1590939107
marler8997
and the other questions I asked?

1590939112
ifreund
I think keeping windows stuff out of os/posix.zig makes sense

1590939119
daurnimator
> socket_type on windows is an enum rather than a set of flags,

1590939125
daurnimator
I don't know what you mean by that one

1590939142
alexnask
(I have a PR for async windows recv and send in zig-network btw havent figured out how to integrate the rest of the non blocking calls with the event loop though)

1590939149
marler8997
on posix, you can specify SOCK_CLOEXEC and SOCK_NONBLOCK along with the socket type (i.e. SOCK_STREAM and SOCK_DGRAM)

1590939169
marler8997
on windows, WSASocketW doesn't recognize the socket type as a set of flags, but an enum of individual values

1590939175
marler8997
you pass the flags in another argument

1590939184
daurnimator
marler8997: ah right. on other OSes AF_ should be an enum too; and then we would @enumToInt and bitwise OR it

1590939205
marler8997
but the question was

1590939211
marler8997
if we support windows in os.zig

1590939233
marler8997
the socket function only has the 3 parameters, and clients can pass SOCK_NOEXEC and SOCK_NONBLOCK to the socket type

1590939240
marler8997
should we support that for windows as well?

1590939253
daurnimator
marler8997: see

1590939288
marler8997
I'm not sure how that answers the question

1590939407
marler8997
ok well I guess I'm not going to get an answer

1590939417
marler8997
I will asssume you want it to conform to the same interface

1590939430
marler8997
I will define dummy values for SOCK_NONBLOCK and SOCK_CLOEXEC for windows

1590941346
marler8997
daurnimator: here's the change I came up with to support those flags on windows

1590941369
daurnimator
no.. I said exactly the opposite >.<

1590941407
daurnimator
==> most of os.zig is eventually moving to posix.zig, and it shouldn't make up things for windows that aren't like-for-like.

1590941445
marler8997
what? when did you say that?

1590941446
marler8997
goodness

1590941477
daurnimator
instead there should be something like: `std.net.socket(.INET, .STREAM, 0, .{ non_blocking = true })`

1590941485
marler8997
yes I agree

1590941489
daurnimator
marler8997: that's what the issue 5019 that I linked says

1590941490
marler8997
but that's not what I'm asking about

1590941505
marler8997
You can support windows in both std.net, and you could also support it in std.posix

1590941538
marler8997
that issue never says we shouldn't support windows in std.posix when it can be supported

1590941547
marler8997
that's what I was asking you

1590941624
marler8997
so to be clear, I should remove the dummy flags I just added

1590941650
marler8997
should I also just remove windows support in std.os (aka std.posix) altogether and just get started on std.net?

1590941677
marler8997
again, I don't care, I just want it to work and I'm willing to do it, please just tell me what you want

1590941748
marler8997
hello?

1590942266
pixelherodev
daurnimator: you are my favorite person. On Earth.

1590942278
pixelherodev
f5167f7

1590942405
daurnimator
marler8997: I'm leaning towards yes; but that's not my decision to make.... I think you might need to wait for andrew?

1590942644
xackus_
are you supposed to be able to create a union tagged with a non-exhaustive enum? that doesn't make a ton of sense

1590943171
marler8997
daurnimator: ok

1590943192
marler8997
I'm not sure whether or not we should support Windows via the posix interface when it doesn't conform completely to it

1590943197
marler8997
I think you could go either way

1590943222
marler8997
if we have a platform-independent api on top of it, then there's less reason to support it

1590943243
marler8997
in any case, we could integrate this now and remove it later once we get that API

1590943278
marler8997
this change allows name lookups to work on windows now.  Now my ziget tool works on windows

1590943577
watzon
Zig doesn't allow importing C++ code the same way you can import C code, does it?

1590943589
watzon
I'd assume that any C++ would have to be wrapped

1590943791
pixelherodev
Nope

1590943796
pixelherodev
No C++ importing

1590943799
pixelherodev
You can build it though

1590945773
watzon
That's true I guess haha

1590953276
gpanders
Hi all. The test in the following paste fails:

1590953278
gpanders
same thing in a real application as well. Is this a bug, or am I just missing something about the way Zig works?

1590953332
gpanders
it is unique to using an ArrayList of pointers. If I create an ArrayList of the structs (e.g. `Foo`) it works as expected, but I am trying to avoid copying those structs unnecessarily

1590953581
afontain_
oh, that one is subtle

1590953648
FireFox317
gpanders, the problem is that when using a for loop, it is actually copying the values. So in your case `for (somefoos) |foo|` foo is a copy, you should use `for (somefoos) |*foo|`

1590953654
afontain_
`for (xs) |x| {}` will create a new variable, x, copied from xs[i]. It it (I think) equivalent to `const x = xs[i]`

1590953672
afontain_
so the pointer won't point to the right address

1590953694
gpanders
ahhhh

1590953700
afontain_
ah, his explaination is probably better

1590953708
gpanders
yep, that was it

1590953710
gpanders
duh

1590953713
gpanders
seems obvious in hindsight

1590953716
FireFox317
afontain_, basically the same explanation :D

1590953717
gpanders
Thanks FireFox317 and afontain_

1590953776
afontain_
hey, it's not because we explain the same thing, that there isn't a better explaination :P

1590956599
ifreund
This should take `Self` not `*const Self` right?

1590957473
ikskuh
in this case probably yes?

1590957486
ikskuh
there may be valid reasons for using a pointer though

1590957523
afontain_
is there a rule of thumb for when you should use a pointer?

1590957531
ikskuh
hm

1590957538
ikskuh
not sure, actually, we have no spec :D

1590957542
afontain_
is it only if it is a big object?

1590957569
ikskuh
but atm zig keeps the freedom to pass all arguments by-ref

1590957575
ikskuh
and i think the current implementation does so

1590957582
afontain_
like `matrix: [100][100]f32`?

1590957589
ikskuh
but if you want the guarantee for a pass-by-ref, you should use a pointer

1590957671
ifreund
as i understand it you should only pass by *const if you need to use the fact that it's a pointer and compare by pointer or something

1590957683
ikskuh
yeah

1590957688
ikskuh
and if you return pointer to internal objects

1590957699
ifreund
yeah

1590957718
ifreund
oh, that's what's happening here

1590957724
ifreund
i think

1590957749
ikskuh
nah, there's getInternal which does just use a normal arg

1590957753
ifreund
but no, internalGet is pass by value

1590957784
ifreund
though it is returning a pointer to internal objects

1590957793
ikskuh
well

1590957794
ifreund
these objects are on the heap though

1590957797
ikskuh
yeah

1590957799
ikskuh
wanted to say

1590957925
ifreund
hmm, i'd be really nice if this had a getByHash function

1590958058
ifreund
I'm working with a StringHashMap, and would like to store a reference to a value. You can't do that though since modifying the HashMap would invalidate the pointer

1590958066
ifreund
so next best is storing the key

1590958085
ifreund
but with strings as the key, it would require dealing with another allocation

1590958090
ikskuh
only storing the hash may not be enough though

1590958111
ifreund
yeah i was worried i was missing something about how this actually works :D

1590958147
ikskuh
well, the hash may be not unique

1590958155
ifreund
i think i'll go with the workround of StringHashMap(usize) + ArrayList(MyThing)

1590958162
ifreund
then i can store the usize

1590958168
ikskuh
and if that is the case, you need a full-value compare when querying the keys

1590958187
ifreund
ah, yeah that does make sense

1590965973
leeward
Is there a good way to link to a library I wrote in Zig, or do I have to wait until the package system exists?

1590966081
ifreund
leeward: the standard way is to include it in your repo as a submodule and use addPackage() in your build.zig

1590966124
ifreund
the concept of packages already exists, but there is not yet a real package manager

1590966371
leeward
Ooh, cool

1590966636
leeward
ifreund: Do you know of a simple example that does that? There's a lot of missing documantation here, and I really don't want to read all the code in build.zig.

1590966970
leeward
I guess not.

1590968001
ifreund[m]
leeward: you can check out the build.zig for zls

1590968025
ifreund[m]


