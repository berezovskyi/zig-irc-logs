1586822840
pixelherodev
???

1586822912
daurnimator
pixelherodev: its a clang flag

1586823113
pixelherodev
wat

1586823114
pixelherodev
why

1586823115
pixelherodev
wat

1586823130
Cadey
i've seen weirder

1586823138
pixelherodev
wat

1586823140
pixelherodev
wat's it do

1586823143
pixelherodev
and what's weirder?

1586823160
Cadey
have you ever dug into the compiler for TempleOS?

1586823191
daurnimator
pixelherodev: and hence a `zig cc` flag

1586823203
foobles
Cadey is it still available?

1586823212
foobles
didnt the maintainer die?

1586823225
daurnimator
foobles: available yes.... maintained no

1586823229
Cadey
foobles: there's a archival scene around TempleOS stuff

1586823234
foobles
cool

1586823243
Cadey
there's a few people making enhanced distros of templeos too

1586823256
Cadey
one of my favorite gives you 80x25 text mode

1586823279
daurnimator
andrewrk: I'm not able to get to github for an hour or two. you might want to mention the `case` solution in

1586823286
Cadey
(which means it could potentially be run as part of a cloud deployment in kubernetes)

1586823719
foobles
andrewrk @ifr

1586823735
foobles
I made a PR for the error message for bit shifts

1586823966
pixelherodev
daurnimator, but what's that flag *do*?

1586824004
daurnimator
pixelherodev: google it and you will see :P

1586824039
fengb
I think it enables trivial auto var init zero knowing it will be removed from clang

1586829235
terinjokes
`export CC="zig cc"` in makepkg.conf and `makepkg` and now my packages are much smaller ;)

1586829604
r4pr0n
they are smaller?

1586829632
r4pr0n
in my experience, they are often bigger than the ones produces by gcc

1586829892
daurnimator
Very quiet in here today.... not what I expected

1586829935
fengb
Hacker News pushed it to page 2 immediately:(

1586829941
foobles
D:

1586829966
foobles
the automated tests for my PR have been running for almost 2 hours :P  it was a single string change

1586830066
fengb
Reddit post is full of trolls for some reason

1586830080
fengb
Today isn’t a good day :/

1586830099
companion_cube
did you post on r/programming?

1586830133
fengb


1586830410
companion_cube
ok there's indeed an idiot in there at the bottom

1586830520
pixelherodev
Only one idiot? That's a relief

1586830525
pixelherodev
Usually there's more

1586830579
companion_cube
there's a particularly strong one, I mean

1586830616
fengb
Hey I didn’t post yet 😠

1586830836
companion_cube
😘 fengb

1586832609
daurnimator
How do people feel about a release party in 10 mins? andrewrk: you around?

1586833265
andrewrk
hello

1586833284
companion_cube
howdy

1586833473
daurnimator
so... discord voice channel?

1586833516
pixelherodev
There's a Zigcord?

1586833589
squeek502_


1586834217
emekoi
can you `await` on a suspended frame?

1586834225
emekoi
or do you have to `resume` it?

1586834517
daurnimator
So that's a "no" on the release party I guess

1586834798
andrewrk
oh I just got discord set up and installed and running

1586834826
emekoi
i'm ... a moron

1586835454
andrewrk
this is the saddest release party ever, only 4 ppl in it

1586835709
foobles
6 now :D

1586835781
fengb
I have a crying toddler :(

1586841580
redj
andrewrk: and now I wonder if designing a gui-editing ide would be a use case to consider for language stabilization

1586841906
emekoi
my function pointers are off by 16 whenever i call a function

1586841916
emekoi
is my stack aligned wrong or something?

1586842025
pixelherodev
That was a nice release party :)

1586843640
wilsonk
I was taking a nap, or I would have been at the party...sort of just logged on to discord at the last minute, was reading logs, and missed it :P

1586846071
Snektron
<andrewrk "this is the saddest release part"> Night in europe

1586850496
nikki93
how reasonable / easy is it to compile zig compiler to wasm; so that you can write, compile and run zig code in the browser? seems like the hardest parts are llvm and wrapping syscalls zig compiler may make to assume eg. how modules are imported / found etc.?

1586850727
nephele_
>If statically linked, Zig looks at the dynamic linker path of /usr/bin/env

1586850741
nephele_
what would this do on android?

1586850762
pixelherodev
I don't think running the compiler on android is supported yet

1586851439
daurnimator
nephele_: what would you suggest looking at instead?

1586851473
daurnimator
and why

1586851824
nephele_
android (and haiku) don't have /usr at all

1586851834
nephele_
there you would likely need /system/bin/env or so

1586851917
nephele_
actually, i am not sure if android has /system/bin/env should check that..

1586851956
nephele_
nope, don't see it, maybe because it uses so little sh :)

1586851973
nephele_
it does have i.e /system/bin/cp or so though

1586852593
daurnimator
wow, /usr/bin/env is a pretty wide standard

1586852607
daurnimator
nephele_: you'll have to just specify the abi and linker yourself

1586853044
nephele_
well, pretty wide is debateable :)

1586853072
nephele_
if you follow posix making portable scripts in the "just run it like ./script" sense is impossible :P

1586853234
daurnimator
nephele_: I mean things like

1586853242
daurnimator
you can apparently add your android distro to the list

1586853332
ikskuh
hello people!

1586853424
nephele_
I guess :P

1586854046
ikskuh
> asm now accepts comptime-known values, rather than requiring string literal syntax.

1586854056
ikskuh
this allows some crazy, crazy stuff to be going on :D

1586854094
daurnimator
I've been waiting for someone to write a series of zig functions that are just assembly

1586854112
ikskuh
:D

1586854119
ikskuh
i'm going for it probably…

1586854143
ikskuh
want to do a demo with arm-freestanding and i need an fp1616 implementation

1586854159
daurnimator
like xbyak

1586854168
daurnimator
ikskuh:

1586854180
shanrhyupong
Congratulations to the Zig team for the 0.6.0 release!

1586854181
ikskuh
haha oh no

1586854257
ikskuh
but daurnimator: I'll maybe write an assembler emulator for my CPU in zig

1586854276
ikskuh
it's much more emulator friendly with stuff like @addWithOverflow and perfect-fit-types

1586854688
daurnimator
I think it would be really cool

1586854698
daurnimator
if you did it right it could work at comptime

1586854862
ikskuh
yeah, true :)

1586855195
pixelherodev
Sure but

1586855205
pixelherodev
I'd counter that's not doing it right

1586855215
daurnimator
pixelherodev: howso?

1586855218
pixelherodev
Doing it right would mean maximal runtime support even if it comes at the expense of comptime

1586855234
pixelherodev
For something that doesn't need to be comptime, it's not a good idea to support comptime if it harms runtime

1586855234
daurnimator
what does maximal runtime support mean in this context?

1586855239
pixelherodev
e.g. performance

1586855254
pixelherodev
If there's a performance trick that boosts runtime, but breaks comptime entirely, should it be used?

1586855256
pixelherodev
I'd say yes

1586855267
daurnimator
I'd say that means comptime needs to be fixed then

1586855325
pixelherodev
Sure, except for one problem

1586855334
pixelherodev
Comptime performance is only

1586855336
pixelherodev
Which isn't

1586855352
pixelherodev
but again, for something *intended for runtime*, comptime should never be the goal

1586855363
ikskuh
@TypeOf Supports Multiple Parameters §

1586855363
pixelherodev
Comptime should not be an end in and of itself

1586855368
ikskuh
this is a really nice addition

1586855428
shanrhyupong
Hey guys, I have a basic question. Does Zig have copy semantics by default for the assignent operator? If so, is this guaranteed? Also, do we have something like move semantics?

1586855458
ikskuh
zig has no move semantics, = will always perform a copy

1586855474
ikskuh
not that if you assign a pointer, it will only copy the pointer

1586855475
shanrhyupong
ikskuh, ah okay.

1586855491
shanrhyupong
Hmmm... so we have aliasing by default, right?

1586855619
shanrhyupong
So maybe this is not a valid scenario, but if we had multiple aliases for a pointer, some of which we send to some other function, and we have a defer for freeing that pointer, will this be a problem (or not)?

1586855739
ikskuh
good question, can you make a code example?

1586855756
ikskuh
it will be a problem if you release the memory while still referencing it somewhere

1586855779
shanrhyupong
ikskuh I will try... still a newbie to Zig! :-)

1586855800
shanrhyupong
yeah... still going through the master documentation, had some questions pop up in my mind!

1586855953
ikskuh
:)

1586856023
shanrhyupong
Thanks for your help, ikskuh!

1586856030
ikskuh
you're welcome :)

1586862993
z0ltan
Hello, I had mentioned a scenario some time back today about how we could return pointers along with using deinit() on an allocator, and then have segmentation fault. Just wanted to know if this is the expected behaviour.

1586862999
z0ltan
I have some sample code here:

1586863023
daurnimator
nephele_: should be soonish. maybe 2 releases?

1586863053
daurnimator
nephele_: I poked the xtensa devs back in jan which at least prompted them to push their WIP to github....

1586863132
nephele_
daurnimator, ah i saw that indeed the LLVM xtensa on github, maybe i should look up how often llvm releases stuff :)

1586863133
antaoiseach
Here is the code -

1586863158
daurnimator
nephele_: every 6 months. and zig's releases are scheduled to be a couple of weeks after each LLVM release

1586863226
daurnimator
antaoiseach: what is your question?

1586863268
antaoiseach
So this code segfaults (expectedly so according to me, but just want to make sure it is as per expectations) - if I remove the defer map.deinit() code, of course that's a memory leak, right?

1586863289
ifreund
yeah, you probably want your allocator in your main

1586863292
antaoiseach
In this case, even when I have deinit(), I can return a pointer back which segfaults.. this is expected, right?

1586863299
ifreund
yep

1586863302
daurnimator
yes.

1586863305
antaoiseach
ifreund - that makes sense

1586863308
daurnimator
you have a stale pointer

1586863322
antaoiseach
Okay, cool. Thanks, guys!

1586863359
daurnimator
apparently the preferred term is dangling pointer.

1586863444
antaoiseach
Haha... yeah, that's the term I'm more familiar with... so this code example came about because i was discussing about copy vs move semantics in Zig

1586863457
FireFox317
antaoiseach, also the part where you do an `if` on the pointer can be changed to use `try allocator.create()` then ptr will be an actual pointer instead and if the allocator fails the function would return.

1586863458
antaoiseach
and I came to understand that Zig doesn't have move, but only copy semantics..

1586863502
antaoiseach
Firefox317... yes, you're right! I realised that in hindsight... still a Zig newbie, working through the Zig master doc... haven't reached the memory part yet! :-)

1586863547
FireFox317
ah no problem :) its the error handling in zig that is really cool using `try`

1586863550
daurnimator
antaoiseach: the pointer is copied. the contents are not

1586863676
antaoiseach
daurnimator: so if I pass a struct (or assign a struct), the compiler

1586863786
ifreund
if you pass it as fn dothing(mystruct: MyStruct) void {} yeah the compiler may transparently optimize that to a pointer

1586863844
antaoiseach
Ah, okay. Thanks, ifreund.

1586863845
ifreund
parameters are immutable so theres no way for you to notice which one happens in practice

1586863857
antaoiseach
Haha.. that's exactly what I was asking next!

1586863879
antaoiseach
So the compiler does some magic so that we don't have to use pointer syntax from within the function, right:?

1586863905
ifreund
you don't need special syntax for pointers in zig

1586863927
antaoiseach
I mean something like mystruct.*.x = 100 instead of mystruct.x = 100?

1586863939
antaoiseach
Inside the dothing function, for instance

1586863947
ifreund
yeah you dont need the .*. generally

1586863955
antaoiseach
Whoa... I didn't know that!

1586863957
ifreund
only in a few cases with c pointers

1586863964
antaoiseach
Interesting!

1586863979
antaoiseach
That makes more sense to me nnow

1586864021
antaoiseach
So this brings me to my last question then - so even if the mystruct object may be a pointer, changes from within dothing would not show up in the callee?

1586864058
daurnimator
antaoiseach: it's const

1586864066
ifreund
yeah you can't change it

1586864088
antaoiseach
Oh, not just the pointer, but the contents as well? Got it... so that's consistent throughout

1586864108
antaoiseach
Cool... I learnt a lot more in this session than a day of reading the documentatiopn.. haha

1586864110
FireFox317
correct antaoiseach, if you want to change it you're function needs to accept a ptr: fn dothing(mystruct: *MyStruct) void {}

1586864123
antaoiseach
Brilliant... I like the explicitness!

1586864147
ifreund
oh you can modify whatever the pointer is pointing to, but you cant modify the variable storing the pointer

1586864199
antaoiseach
ifreund.. ohh, that was my question.. suppose I do mystruct.x = 100, will this change reflect in the x field of the struct in main, say? Assuming I passed it as dothing(mystruct: MyStruct)

1586864296
ifreund
that wont compile if mystruct is passed as fn dothing(mystruct: MyStruct) void

1586864314
antaoiseach
Ah, okay

1586864337
antaoiseach
Very interesting indeed

1586864354
antaoiseach
In all fairness, I should be trying out all these scenarios myself :D ...

1586864358
ifreund
here's what i meant about pointers

1586864446
ifreund
and yeah learn by doing is the way to go, i was several hundred lines of zig into my project before i learned that you don't need the .*. everywhere :D

1586864449
antaoiseach
ifreund: That makes perfect sense. Since `ptr` is `const`, I cannot change what it points to... if I wanted to change the pointee, I would have to declare it `var`, right?

1586864457
antaoiseach
Hahaha

1586864459
ifreund
antaoiseach: exactly

1586864488
antaoiseach
Cool! So far I'm really liking it... took some time to get my head around the various error handling bits, but it's really nice now.

1586864513
antaoiseach
Thanks, guys... this has been very helpful... I'll get back with a bunch of question once I've worked though the master doc. Cheers!

1586864517
antaoiseach
And stay safe...

1586864530
ifreund
no problem, have fun writing some zig

1586864536
antaoiseach
Cheers!

1586865490
pingiun
I'm trying out zig-bootstrap on power64, and just wondering if I'm doing something wrong:

1586865494
pingiun
btw I'm very new to Zig (and C development), I just have access to a power64le virtual machine and I heard the news about zig-bootstrap in the 0.6.0 release and I wanted to try it out

1586865657
FireFox317
Hey pingiun, welcome to the zig community! I think you are the first person to try to build Zig for powerpc64le-linux-gnu. As you could see in the issue tracker andrew tried to build it for musl, but ran into different issues. It seems that the std library support for powerpc is not correctly implemented yet :(

1586865722
pingiun
ah I see, is this something a newcomer could work on?

1586865949
FireFox317
pingiun, yes for sure! I think best bet would be to start with getting to properly build zig and afterwards do the behavior testing. As you could see it correctly build zig0 (the cpp part of the zig compiler) but not yet zig itself (which is zig and cpp code linked together).

1586866122
pingiun
so I need to add the parts of the standard library that the zig compiler itself uses?

1586866301
pingiun
also just to be sure, is it a good idea to clone zig-bootstrap, work in the zig directory and if I make something work create a patch for the zig repo?

1586866321
FireFox317
correct, as you can see in the first error message it is trying to reference os.mode_t, but that is not yet defined for powerpc. The file that you would have to create is in std/os/bits/linux/. In that dir all the linux defintions for stuff like mode_t is defined. You could copy for example mipsel and start with that

1586866327
pingiun[m]
(this is just a test to see if my matrix configuration joined the irc channel correctly)

1586866376
pingiun[m]
okay this works, now I can logoff from irc

1586866402
FireFox317
pingiun[m], well at the end the stuff has to end up in the ziglang/zig repo, because that is where we develop zig

1586866411
FireFox317
pingiun[m],

1586866448
pingiun
FireFox317: thanks for the help, I'll try to make something work!

1586866455
FireFox317
but yes easiest probably would be to start working from the bootstrap/zig dir and apply to changes there :)

1586866485
FireFox317
such that you can see if your changes are working xd :)

1586866622
FireFox317
pingiun, cool! Have fun writing your first (?) Zig code :D

1586866658
pingiun
yeah almost first haha, only other thing I tried was hello world

1586866831
ifreund
luckily it's relatively easy to jump right in to zig, the language is desigend to be small and easy to read

1586866868
daurnimator
pingiun: oh I was just looking at your issue

1586866903
daurnimator
pingiun: zig's standard library doesn't currently have struct defintions for ppc

1586866912
daurnimator
pingiun: we'd love for someone to contribute them!

1586866959
daurnimator
pingiun: you'd need to create ppc versions of these files:

1586867233
pingiun
daurnimator: thanks for the pointers

1586867263
daurnimator
0xdeadbeef 0xfeedface null

1586867305
pingiun
hehe

1586867372
pixelherodev
That joke hasn't been funny for me in a while

1586867379
pixelherodev
Heard it too often I guess

1586868842
nephele_
Is there perhaps an example of zig beeing used with e.g libressl (libtls) or another tls library?

1586870327
kenaryn
Hello guys. Please what does the 'm' stands for in `-mcpu` parameter associated with `-target` option?

1586870336
daurnimator
machine I think?

1586870346
kenaryn
Thank you buddy!

1586870347
daurnimator
Its a very old convention from other compilers

1586870379
kenaryn
So there are still artifacts in 21th century? (joke inside)

1586870439
daurnimator
kenaryn: why do you ask/why does it matter?

1586870530
kenaryn
My second question wasn't serious but the first one is intended to help me understand the release notes.

1586870586
kenaryn
Nevertheless, I didn't find the exact word in english, my dictionnaries purpose 'remains', 'remainders' or 'balance' but nothing in computer science context.

1586870616
pixelherodev
The real answer for "what does -m stand for": GCC does it and if we use something else people will get angry

1586870645
fengb
People get angry anyway

1586870654
kenaryn
Allright, I agree with the need for conventions in common vocables.

1586870658
daurnimator


1586870677
daurnimator
it might even predate GCC?

1586870718
shakesoda
it makes sense to me

1586870724
shakesoda
what is the issue

1586870759
fengb
I insert my own acronyms

1586870761
fengb
-mah cpu

1586870793
shakesoda
mcpu=some gpu :D

1586870813
kenaryn
Yes it is clear now, there's no issue.

1586870833
pixelherodev
"Mah CPU!" I love it

1586870880
shakesoda
the best part about that is if you're targeting one you don't like it can be a -meh cpu

1586870896
nephele_
-mediocre cpu

1586870901
fengb
Sometimes my dumb jokes have an audience

1586870944
shakesoda
as programmers we are honor bound to appreciate such things

1586871018
shakesoda
daurnimator: every single time i see something about riscv i want more riscv hardware

1586871177
shakesoda
just realized i haven't upgraded to 0.6.0 yet

1586871182
shakesoda
the time has come!

1586871223
kenaryn
your computer may not support such power^^

1586871233
SebastianM
Hey guys, I can't figure out a problem Hope you can help.

1586871233
SebastianM
I'm using zig as ac compiler in Nim language, and i can create an executable with ./nim_1_3_1/bin/nim  --cpu:arm -d:danger --cc:zig --passC:"-target arm-linux-musleabi" --passL:"-target arm-linux-musleabi" c ./hi.nim

1586871237
SebastianM
but the following command to create executable for different architecture results in error with pretty big log:

1586871240
SebastianM
./nim_1_3_1/bin/nim  --cpu:amd64 -d:danger --cc:zig --passC:"-target x86_64-linux-musl" --passL:"-target x86_64-linux-musl" c ./hi.nim

1586871243
SebastianM
Here's the log

1586871246
SebastianM


1586871248
SebastianM
Using fresh stable zig 0.6.0

1586871251
SebastianM
Any ideas how to fix this? Thank you

1586871341
pixelherodev
Okay, got my bugzilla account for LLVM :)

1586871341
shakesoda
left already? argh

1586871344
pixelherodev
Now I can file that reduction

1586871349
pixelherodev
Wow that was fast

1586871350
shakesoda
it looked like that wasn't invoking zig cc

1586871354
shakesoda
just zig

1586871354
Snektron
SebastianM: To compile c with zig, you need to use `zig cc`. The command you used invokes `zig`

1586871367
pixelherodev
Pretty sure they're gone already

1586871397
shakesoda
barely even two minutes!

1586871398
daurnimator
shakesoda: I think nim has config to call `zig cc` when you pass --cc:zig

1586871426
shakesoda
hmmm

1586871427
FireFox317
Snektron, it ran `zig cc` as you can see at the bottom of his dump

1586871440
shakesoda
so it did

1586871450
Snektron
i see, soz

1586871552
FireFox317
this looks like a mistake on Nim side? the zig c compiler is not able to compile the co code, because it is not valid? (warning: type specifier missing, defaults to 'int' [-Wimplicit-int])

1586871564
daurnimator
SebastianM: where is `N_INLINE` defined?

1586871599
FireFox317
daurnimator, i think that comes from the nim c code generator. That is how Nim compiles, it generates c code and that gets now compiled with `zig cc`

1586871631
daurnimator
FireFox317: yes..... but from those error messages it looks like its not getting defined properly. which to me suggests a missing #include of some nim thing

1586871829
SebastianM
daurnimat: it looks like its defined in stdlib_system.nim that what the log says

1586871830
daurnimator
SebastianM: and why are you using --passC/--passL instead of --zig.options.linker / --zig.options.always

1586871893
SebastianM
daurnimat: well this worked for another user with arm, but i'll try your suggestion

1586871992
daurnimator
SebastianM: oh. looks like its a nim+clang bug:

1586871998
daurnimator
SebastianM: appears to be a fix in

1586872180
SebastianM
daurnimat: thanksfor the link and advice, will read it carefully

1586872249
companion_cube
wait, daurnimator, are you also a nim programmer?

1586872257
daurnimator
companion_cube: nope

1586872285
fengb
Only 2 cool clubs allowed

1586872290
fengb
He filled his quota with Lua

1586872292
shakesoda
lua club though

1586873319
fengb
Too much cool for us D:

1586873355
foobles
is it allowed to just, change the value of an IrInstGen during analysis? O_O

1586873398
oats
congrats on 0.6.0 y'all :)

1586873414
oats
I wish I had more time to poke around with zig, but it's been super fun watching from afar

1586873425
foobles
:D

1586873515
fengb
o/

1586873744
r4pr0n
what is the WhileContinueExpr in the WhilePrefix actually for? couldn't you just put it in the normal expr block of the while?

1586873772
r4pr0n
doesn't that go against the "you should only be able to do things one way" way?

1586873790
oats
wait, `[]const u8` is automatically null-terminated now?

1586873799
r4pr0n
oats: yes

1586873802
r4pr0n
well no

1586873805
oats
has that always been?

1586873805
r4pr0n
the literals are

1586873809
oats
ohh, literals

1586873832
oats
does that mean you can't have a string literal with a null byte in it?

1586873844
oats
oh nvm

1586873853
oats
I just remembered that has length info in it :P

1586873857
r4pr0n
well i guess you could technically, it still has a length

1586873858
r4pr0n
yeah

1586873862
pingiun
daurnimator: can you give me a hint about which files I should look at for this "TODO implement C ABI for this architecture. See

1586873864
oats
I guess it would just confuse any C stuff you passed it to

1586873871
r4pr0n
yeah

1586873902
pingiun
is implementing the C ABI necessary to build the compiler?

1586873927
daurnimator
pingiun: sorry I can't help with that error much. how did you hit it?

1586873943
pingiun
it's the only message I get now when compiling using the build script

1586873969
pingiun
so far I only copied the files you pointed to and filled in the syscall numbers

1586873981
pingiun
I'm quite sure that that is not the only thing I should do

1586873992
pingiun
but I'm just puzzled that that is the only error message

1586874044
pingiun
like of course I should also fill in the assembly parts for the syscalln functions

1586874450
kenaryn
Please what does it mean 'v7a is considered baseline'? Is that a synonym for 'v7a is a CPU feature?'

1586874532
ikskuh
v7a is the "minimum cpu"

1586874541
ikskuh
for "arm"

1586874553
kenaryn
baseline is also used by llvm for cpu and features detection, but I do not understand the word.

1586874567
kenaryn
Ah thank you :)

1586874572
oats
“If there is no type in the result location then an anonymous list literal actually turns into a struct with numbered field names”

1586874577
oats
well that's freakin cool

1586874583
oats
so tuples then, basically?

1586874790
nycex
i think so

1586874793
ikskuh
yep

1586874828
fengb
Yes tuples

1586874938
nycex
it would just be nice imo, when you could specify somehow that you want a tuple in a function signature

1586874950
fengb


1586874982
fengb
I have a hack I'm not proud of that does this in userland. It's really fugly

1586875011
nycex
well you can of course just check if it's a tuple and if not do a compileError

1586875134
FireFox317
pingiun, so you got past the messages you got before?

1586875161
r4pr0n
what is the WhileContinueExpr in the WhilePrefix actually for? couldn't you just put it in the normal expr block of the while, doesn't that go against the "you should only be able to do things one way" way?

1586875232
fengb
I suppose the argument could be made that `while (foo) : (foo += 1) {` is basically `while (foo) { defer foo += 1;`

1586875337
r4pr0n
is that an argument for the syntax or against it?

1586875368
foobles
Hoooray! I got optional comparison to work at comptime!    Instead of generating an unwrap instruction, I should have just manually set the value already inside the provided instruction

1586875384
foobles
:D  now for runtime.......

1586875398
daurnimator
pingiun: zig is lazy: it only compiles the code is tries to use

1586875428
daurnimator
==> you can have completely broken code inside of a function if it never gets called (still has to be e.g. syntactically correct though)

1586875495
foobles
i love my `const foo = [_]bar{1, "hello", (.{})} ++ (x - x - x);`

1586875518
foobles
as long as you dont use `foo`, this will compile even if `x` and `bar` havent been defined either

1586875527
nephele
the "zig" usage shows zig cc but not zig c++ in the list, is that intended?

1586875861
daurnimator
nephele: good (original) question! perhaps ask it on the issue tracker for posterity

1586875932
nephele
Sadly, i don't have a github account to ask with

1586875968
nycex
i'll do

1586876216
nycex


1586876369
oats
I really really like how zig uses syntax that feels higher-level than C, while giving you lower-level control than C :P

1586876534
karrick
I can see the release notes for 0.6.0 at

1586876552
karrick
Is this intentional? Sorry if it's already been discussed...

1586876749
fengb
Probably not. The homepage has bitrot :P

1586876821
oats
blame cosmic rays

1586877050
nephele
what did cosmic rays ever do to you

1586877073
oats
eat my bits

1586877075
oats
s/eat/flip

1586877112
r4pr0n
we should write a new language where fixing cosmic rays are in scope

1586877116
r4pr0n
they seems very problematic

1586877145
nephele
Well, you can always use ECC ram.. and ZFS or btrfs etc :)

1586877185
fengb
Why not just use lead shield

1586877195
fengb
A mile thick should do the trick

1586877199
r4pr0n
^ seems to be the best option

1586877213
r4pr0n
but i'd say 2 miles

1586877218
r4pr0n
just to be sure

1586877236
oats
ok, someone wanna throw together a pull request?

1586877252
oats
I'll work on the unit tests

1586877260
karrick
lul

1586877275
karrick
s/u/l/

1586877281
karrick
damn, I cannot type

1586877310
oats
huh, is std.c new?

1586877313
oats
what's in there?

1586877323
fengb
Might be too hard to shield every device though. How about we just re-engineer stars to never emit these buggers

1586877353
r4pr0n
just to be clear: do we use the vim or the sed syntax for s// in here? does s//g mean for all occurances in all lines or for every first in every line?

1586877400
karrick
🍿

1586877406
oats
since when does /g not mean every occurrance in all lines?

1586877415
oats
or do I just not know sed that well

1586877416
r4pr0n
since vim reversed the meaning of /g

1586877423
r4pr0n
in sed it's like you think it is

1586877443
fengb
/g has always applied only to "this line"

1586877447
karrick
M-x query-replace-regexp

1586877457
fengb
Varying definitions of this

1586877467
r4pr0n
oh i'm sorry

1586877471
r4pr0n
it just neovim being stupid here

1586877472
fengb
It's the prefix to s/ that changes which lines

1586877496
r4pr0n
vim does what sed does

1586877623
fengb
oats: it's Zig's shim to libc. We add some better typings to make it nicer in Zig

1586877717
fengb
(Obviously doesn't work unless you explicitly link in libc)

1586877886
ikskuh
hm, i still wonder about the freestanding libc :D

1586877894
ikskuh
i should get me informed about this

1586878470
nephele
Is zig c++ expected to work as a drop-in replacement for clang++? (I know cc is expected to be currently, but unsure of c++)

1586878535
oats
if you want a function to "return multiple values", do you have to say it returns a `var` and then `return .{ true, "hi" }` kinda thing?

1586878563
companion_cube
I think the syntax for tuple types is still in the works

1586878577
oats
hmm, so gotta stick with named structs for now?

1586878594
fengb
You can’t have var as the return type

1586878670
fengb
You can use an unnamed struct or you apply a terrible hack that I don’t really want to share >_>

1586878720
fengb
This works: `fn foo() struct{a: u8, b: u8} {`

1586879102
oats
is that the terrible hack?

1586879107
oats
that doesn't look bad at all

1586879114
oats
kinda nice being able to name your returns

1586879275
nycex
well but it's not a real tuple that, i guess you e.g. can't use it for std.fmt.format anymore and can't use indexing on it, right?

1586879333
foobles
would you have to say `return .{ .a = foo, .b = bar };` in that case?

1586879340
foobles
instead of just `.{foo, bar};`

1586879521
danyspin97_
zig 0.6.0 has linking errors. does it need some llvm/clang option enabled? like polly

1586879535
fengb
Yeah

1586879565
fengb
That’s structs. You can get a tuple type but it takes a lot of effort. I guess I should post it

1586879620
companion_cube
`fn foo() struct {@"0": u8, @"1": u8}`? :D

1586879628
foobles
THATS WHAT I WAS GUESSING TOO!

1586879649
companion_cube
I don't know, but it may work

1586879653
companion_cube
it's just ugly as sin

1586879658
foobles
well that isnt a tuple afaik

1586879663
foobles
like you cant use bracket indexing

1586879691
companion_cube
oh? I thought that's how tuples worked behind the scene

1586879802
shakesoda
`fn foo() var // trust me, i'm a doctor`

1586879861
shakesoda
who needs cryptic types when you can sweep it under the rug to begin with

1586879893
layneson
companion_cube: trying to return .{ 1, 3 } from that function doesn't compile, it seems

1586879942
fengb
This monstrosity:

1586880047
fengb
Unfortunately, anon structs / tuples converts comptime known values into comptime fields. The bitcast / as hack is the only way I figured out how to make them not comptime

1586880262
fengb
But... I'd recommend waiting for declared tuples to be in the lang than using this

1586880446
companion_cube
shakesoda: welcome to D

1586881404
oats
hmm, could you generate a tuple type with something called like this: Tuple(.{ u8, bool})

1586881451
companion_cube
hopefully at some point `fn foo(): .{u8, bool}` will be supported? I think it's even in the release notes

1586881530
fengb


1586881638
companion_cube
👌

1586881929
fengb
oats: it's really hard to get that behavior because we don't have a way to build types at comptime. We can manually roll one but it's a really clunky implementation (especially on top of this horrible kludge):

1586881980
oats
oof

1586881987
fengb
Oh that example is for building function args. Building a type would be somewhat similar

1586882934
andrewrk
foobles,

1586882946
foobles
oh thanks

1586882951
foobles
ill look at that one :)

1586882961
foobles
i got the comptime optional comparison to work!

1586882973
andrewrk
nice

1586882988
foobles
is it ever ok to just modify the value of an IrInstGen?

1586883010
foobles
oh nice, i just checked the issue you linked

1586883023
foobles
that does sound good

1586883951
r4pr0n
is it even possible to set a output name for the executable in zig build-exe?

1586883958
r4pr0n
i can't find a option to do that

1586884153
FireFox317
r4pr0n, `--name`

1586884182
Snetry
Hey, I'm having some trouble with the bootstrapper

1586884197
Snetry
as far as I understand it I should be able to invoke build using native native

1586884213
Snetry
but whenever I do that I end up with "System is unknown to cmake, create: Platform/Native to use this system, please post your config file on discourse.cmake.org so it can be added to cmake"

1586884235
r4pr0n
FireFox317: thanks

1586884295
r4pr0n
and is it possible to disable the creating of .o file or rather that they are stored in /tmp and deleted afterwards or whatever?

1586884339
andrewrk
Snetry, ah, the build script made an invalid assumption there

1586884367
FireFox317
r4pr0n, the zig compiler stores the .o files in a zig-cache directory. or are you talking about `zig cc`?

1586884412
tgschultz
Hi everyone. I haven't been able to do anything with Zig in quite some time due to changes in life circumstances, but I wanted to drop by and say congrats on 0.6.0! Impressive work all around, and I'm excited in particular to see how many long standing issues I'd encountered are now resolved.

1586884447
fengb
Hiya 👋

1586884470
andrewrk
hi tgschultz

1586884620
pixelherodev
Hello!

1586884762
r4pr0n
FireFox317: no, when running zig build-exe file.zig, an file.o file is created in my cwd

1586884774
r4pr0n
and an file executable

1586884894
FireFox317
r4pr0n, ah yeah that is correct actually. `zig build` puts the object files in zig-cache. Not sure why `zig build-exe` isn't doing that actually.

1586885031
r4pr0n
but it's not disableable, is it?

1586885254
ifreund
you can delete the object files, the resulting binary doesn't depend on them

1586885297
ifreund
i don't think zig build-exe is intended to be aware of directory structure, it just take path as input and outputs to the working directory

1586885619
kenaryn
Hi again. Please what is the difference between a `comptime var` and a `const`?

1586885940
ikskuh
kenaryn: hey!

1586885945
kenaryn
:)

1586885948
ikskuh
you can compute a comptime var at compile time

1586885951
ikskuh
so, change it

1586885957
ikskuh
but you cannot do that to a const

1586886020
kenaryn
Ah, thank you, I will add your tip to my zig praecisus (it's like a brief memorandum).

1586886023
nycex
also a const can be declared at runtime

1586886031
ikskuh
ah yes

1586886035
kenaryn
Nice addendum nycex

1586886078
ikskuh
example for comptime var:

1586886205
D3zmodos
Hey, I've been waiting for stdlib network support in zig for a while so you can imagine I was excited when I saw earlier today that 0.6.0 was out! I have just the project to try the new functionality out on but upon trying to use it now, I'm running into issues just reading from stdin... Take this minimal example:

1586886205
D3zmodos
`readUntilDelimiterOrEof` should return as soon as I enter a newline in the console, however this isn't the case and stepping through in a debugger shows that it appears it's spinning on the OS call to read from the file descriptor until it has a full buffer's worth of data, which in this (default) case, is 4096 bytes! :O Am I doing something wrong here?

1586886208
kenaryn
Dully noted, you're both kind.

1586886290
ikskuh
btw, care to share your notes?

1586886299
ikskuh
they can make a nice starting point for "Zig for beginners"

1586886313
ikskuh
@D3zmodos: why using a buffered stream?

1586886325
ikskuh
buffered streams improve I/O performance by reading a huge block of data

1586886341
ikskuh
and they read blocks until end of stream

1586886355
Xavi92
kenaryn:

1586886358
ikskuh
but if you don't want that buffering, don't use the buffered stream

1586886365
ikskuh
const stdin = std.io.getStdIn().inStream();

1586886372
ikskuh
this should do fine for interactive input

1586886566
r4pr0n
i don't think you would ever want to use bufferedinstream for real user input on stdin

1586886582
r4pr0n
for piping in file contents e.g. on the other hand it would be useful

1586886691
kenaryn
Thank you too Xavi92, I will read your code later because I can't stay for now, but you're sympathic too =)

1586886695
r4pr0n
Xavi92: good example, but why are you using comptime var for this, you could just not use a comptime block and rather defined w and h at the block

1586886763
r4pr0n
s/the block$/the block where they are returned

1586886820
D3zmodos
@ikskuh @r4pr0n I was trying buffered streams because in my head things that are not buffered streams don't support higher-level concepts like "read a line" but taking another 2s to look at it now, this is obviously not true at the moment (independent of whether or not it was true in the past) -_- I'm in too much of a hurry to get to the networking clearly... thanks!

1586886845
ikskuh
you're welcome

1586886851
ikskuh
what platforms are you targeting with network code?

1586887003
foobles
if I have a non-comptime variable defined in a function, and I run that function within a `comptime` block, the value of the variable is not considered comptime (i.e., op->value.special != ConstValSpecialStatic)

1586887008
foobles
is that intended?

1586887015
D3zmodos
ikskuh: Initially just linux but I'd like to expand to windows in the near future, I see in the release notes it was mentioned that the API isn't quite fully rolled out to other platforms yet

1586887035
ikskuh
yeah, that's why i was asking

1586887059
ikskuh
i'm writing a GUI library right now that needs networking and i'm building a network lib aside from zig std

1586887089
ikskuh
i'll probably give that library a merge request to zig std one day, but i want it to mature a bit first

1586887185
ikskuh
src is here right now, it even is documented a bit:

1586887185
ikskuh


1586887211
ikskuh
it's a tad higher level than pure OS abstractions

1586887280
ikskuh
supports TCP server and UDP+multicast right now

1586887289
ikskuh
haven't implemented connect() yet, but should be trivial

1586887675
Xavi92
r4pr0n: you're right, since in the end w = cfg.g and h = cfg.h, they can be only defined inside the comptime block, right?

1586887826
andrewrk
foobles, currently, comptime scope only affects control flow and function calls

1586887885
foobles
what do you mean by that? dont all functions called in a comptime block have to be evaulated at comptime too?

1586887890
foobles
andrewrk

1586887907
andrewrk
whether it should affect variables is a good question, and I would need to take some time to consider various examples and consider how to define the lang spec

1586887964
andrewrk
oops, I'm incorrect, it also affects variable

1586888002
andrewrk
yes, function calls within comptime blocks are evaluated at compile time

1586888037
foobles
ok interesting

1586888038
foobles
cool

1586888057
foobles
but the variables declared in the function arent considered comptime?

1586888121
andrewrk
they are, sorry I misspoke earlier

1586888171
foobles
so then why is the value.special not Static?

1586888208
foobles
comptime testNullableIntEql(); <- variables declared in this function don't have the Static flag

1586888228
foobles
but if I wrap the whole body of the function in a comptime block, they are

1586888271
andrewrk
note that that function gets analyzed twice - once for the comptime call, and once because it still gets emitted, available to be called at runtime (what if you took a function pointer to it, and called it at runtime?)

1586888280
andrewrk
you might be looking at the runtime-generated function

1586888313
foobles
Yep, thats gotta be it.

1586888316
foobles
thanks!

1586888323
foobles
alright that makes sense to me

1586888326
foobles
:)

1586888467
foobles
also is it ever ok to just re-assign to the `value` of an IrInstrGen?

1586888479
foobles
or should i make a copy and pass that around?

1586888517
andrewrk
I think you might be looking for copy_const_val

1586888538
andrewrk
and now that I'm thinking about it, should just be copy_val

1586888785
foobles


1586888791
foobles
here is what i am doing currently

1586888842
foobles
ive looked around at build_instr_gen and suck, but I dont see a way of making the copy, even using the copy_const_val function

1586888851
foobles
since htat requires an already existing value to copy into

1586888868
marijnfs_
what kind of memory requirements are needed for the bootstrap build?

1586888876
marijnfs_
I wonder if my backward server can do it

1586888986
foobles
s/and suck/and such

1586891058
nephele
Heh... compiled minetest with zig c++, failed at the final linking stage though :3

1586891283
andrewrk
with what error nephele?

1586891379
andrewrk
foobles, where's the part in this gist where you want to reassign the value?

1586891389
andrewrk
oh, 16-17?

1586891551
andrewrk
hmm I think there is a helper function somewhere you have to use for doing this

1586891558
nephele
andrewrk, getdate.c...lld: error: undefined symbol: __powidf2

1586891574
andrewrk
foobles, depending on the type, things might get stored as x_optional or a different way

1586891596
andrewrk
nephele, is that it? because if so that's just one tiny contribution to compiler-rt away from succeeding

1586891632
nephele
andrewrk, well, maybe it masks other errors, but other than that the build seemed to run just fine

1586891668
andrewrk
here's the code to port:

1586891679
andrewrk
it's 10 lines

1586891860
nephele
I shall try, worst that can happen is that i brick my computer and set my house on fire :)

1586892084
marijnfs_
the booststrap script is giving me 'bad supstitution'

1586892144
marijnfs_
for the ${TARGET_OS_LOWER^} part

1586892179
fengb
It’s been updated

1586892182
pixelherodev
this is weird

1586892188
pixelherodev
lld:10 doesn't seem to provide

1586892240
marijnfs_
fengb: where is the latest?

1586892293
fengb


1586892312
marijnfs_
fengb: ah k, i'll just take the repo

1586892338
marijnfs_
its funny how much smaller llvm is without the bloat

1586892552
Snetry
So, I've dug deeper to my previous problem of "Unable to determine platform" when using the bootstrapper

1586892576
Snetry
and, uh, I am completely clueless

1586892603
pixelherodev
I can't rebuild Zig locally :(

1586892607
pixelherodev
My LLD is borked

1586892611
marijnfs_
whats a fuchsia

1586892616
pixelherodev
Google

1586892619
pixelherodev
uh wait

1586892620
pixelherodev
I mean

1586892622
pixelherodev
It's a google project

1586892632
pixelherodev
I wasn't telling you to google it :P

1586892642
pixelherodev
It's google's future-gen OS

1586892644
marijnfs_
let me fuchsia that for you

1586892650
marijnfs_
there are some namepuns there

1586892660
pixelherodev
They probably intend to use it as a replacement for Linux in e.g. Android

1586892667
marijnfs_
if you really want them to know everything

1586892678
Snetry
my question now is

1586892686
Snetry
why is UNIX not defined when recompiling llvm with zig

1586892694
Snetry
and why is it compiled when compiling llvm normally

1586892708
nephele
more like they intend to replace android with fuchsia

1586892750
marijnfs_
Snetry: maybe it has to do with the fancy cross compiling? Maybe it's doing that somehow

1586892763
Snetry
maybe

1586892771
Snetry
but cmake is in charge of setting the unix flag

1586892773
Snetry
so idk

1586892865
marijnfs_
I think it uses uname, don't know how that would change

1586893531
andrewrk
Snetry, it's a mistake in the build script, if you remove both occurrences of   -DCMAKE_SYSTEM_NAME="$TARGET_OS_CMAKE" it should work

1586893550
andrewrk
looks like we might need some branching logic after all :)

1586893611
Snetry
oh

1586893612
Snetry
well

1586893619
Snetry
guess that solves it

1586893629
andrewrk
(I actually forgot to test using it natively, I only tested cross compiling, heh)

1586893665
andrewrk
oh you know what, if you pass native-linux-native for the triple it might work

1586893679
Snetry
I'll try and report back

1586893680
andrewrk
err, native-linux-gnu or something like that

1586893728
andrewrk
anyway, don't be afraid to edit the build script, it should be pretty clear how it works

1586893860
mikdusan
so here I am trying to find a helper function to create a ZigValue from ZigValue.data.x_optional .. and wouldn't ya know it, the helper function is an assignment operator :P

1586893862
marijnfs_
my poor single core server is trying to build it, i wonder if it makes it

1586893896
Snetry
yeah native-<sys>-<abi> works like a charm

1586893898
Snetry
thanks andrewrk

1586893926
companion_cube
I have a raspberrypi (second generation I think), and cross compilation is more or less the only hope I have to get stuff on it :D

1586893994
pixelherodev
Turns out my JIT code emitter wasn't bugged :D

1586894001
pixelherodev
It was the

1586894014
pixelherodev
Was missing a `try self.emitter.And(Register.EAX, 0);`

1586894019
pixelherodev
:)

1586894042
pixelherodev
Which means I actually have a working code emitter for x64 in Zig

1586894442
ikskuh
:)

1586894444
ikskuh
neat!

1586894485
BaroqueLarouche
nice !

1586894624
r4pr0n
why does

1586894872
dimenus
andrewrk: I responded that way on reddit because my c artifacts seem to be recompiled each time i make a change to the zig code

1586894924
dimenus
i lied. apparently that's only if the zig code fails to build

1586894993
dimenus
yep, it recompiles the c objects if there's a compilation error on the zig side

1586895170
andrewrk
r4pr0n,

1586895195
dimenus
maybe that's intended?

1586895481
pixelherodev


1586895486
pixelherodev
fingers crossed

1586895633
r4pr0n
andrewrk: is it possible to disable the cache with zig cc? when putting `--cache off` after cc, it says it's no clang option, and when i put it before, it says cc is unrecognized

1586898520
fengb
`error: option '-atomics,-bulk-memory,-exception-handling,-multivalue,-mutable-globals,-nontrapping-fptoint,-sign-ext,-simd128,-tail-call,-unimplemented-simd128' cannot be specified with '-target-feature'`

1586898545
fengb
I'm getting this in the bootstrap script

1586898567
marijnfs_
how far in is this?

1586898637
fengb
Making the host compiler

1586898663
fengb


1586901030
pixelherodev


1586901042
pixelherodev
JIT in Zig working with serial output

1586901106
wilsonk
pixelherodev: sweet

1586901124
wilsonk
pingiun[m]: you still around?

1586901182
pixelherodev
The most annoying bug I have ever had to deal with:

1586901194
pixelherodev
"Segfault at 0xfffe05b7"

1586901206
pixelherodev
That's the virtual address, which implies it's jumping to it, except

1586901229
pixelherodev
To translate from virtual address to physical, a `call` is generated to a translation function, which pushes the virtual address to the stack

1586901238
pixelherodev
it pops it afterwards, but doesn't zero it

1586901266
pixelherodev
I forget to generate a `return`, so it was flying through some nops then popping that address off the stack as the return address :(

1586901835
wilsonk
andrewrk: I just posted a somewhat complete powerpc64le diff (really just one error when building zig and the two missing /lib/std/os/linux files that can be mostly copied from musl sources) to the bootstrap issue #24. Since pinguin[m] posted that issue and you replied to it, I just wanted to post that incomplete so that not too much effort was duplicated.

1586902095
shakesoda
ppc64le...

1586902102
shakesoda
makes me want one of those fancy talos workstations

1586902134
pixelherodev
Got a workaround for the LLVM issue :D

1586902296
pixelherodev
Uh, hm

1586902305
pixelherodev
there's no way to call a stdlib function with an arbitrary CC, is there?

1586902464
wilsonk
shakesoda: yeah, I wish I could pick one of those up :)  I would work on ppc a bit more if I had access to a decent piece of hardware, but trying to work on a VM is just too painful!

1586902617
pixelherodev
Is Zig's calling convention documented?

1586902642
andrewrk
fengb, is that wasm?

1586902658
fengb
Yeah

1586902668
andrewrk


1586902683
fengb
Yep I found it

1586902826
pixelherodev
Hmm, am I going to have to link libc?

1586902840
pixelherodev
I don't think I can get away with calling Zig functions within translated code

1586902851
pixelherodev
So I need to use e.g. `std.c.write` instead of `std.debug.warn`

1586903738
Snetry
Well this didnt go as expected

1586903740
Snetry
Build Dependencies...lld: error: unable to find library -lclangARCMigrate

1586903762
Snetry
how odd since ARCMT is explicitly enabled

1586904678
fengb
Unknown Clang option: '--libc'

1586904692
fengb
Does zig cc not understand --libc?

1586905125
r4pr0n
why would it?

1586905144
r4pr0n
if you want to specify the libc, you can do that in target

1586905176
r4pr0n
and zig cc has to compile with a libc obviously, so that's no option

1586905256
fengb
Because I'm trying to cross compile to a target that zig doesn't understand

1586905282
r4pr0n
uhm - i don't think zig is able to do that, is it?

1586905325
fengb
It is natively. You can toss it whatever libc you want and if LLVM supports it then it should work

1586905355
fengb
Or rather, it is possible in both Zig and Clang separately. But I don't think this was exposed to zig cc

1586905416
fengb
Ah I see. Adding --libc adds it to Clang, which gets angry. But removing it makes zig cc angry

1586905426
fengb
I can probably patch this

1586905491
fengb
(I'm trying to bootstrap Zig into wasm32-wasi if you're curious)

1586905541
r4pr0n
but wasm32-wasi is a tier 2 supported zig target

1586905563
r4pr0n
why would you not be able to use -target for this?

1586905580
fengb
There's no libc defined

1586905593
fengb
One of the reasons it's tier 2 :)

1586905598
r4pr0n
oh ic

1586905606
r4pr0n
that makes sense, totally forgot that option

1586905612
fengb
Only tier 1 guarantees full cross compilation

1586906341
r4pr0n
yeah, saw that, that sentence of the tier 2 definition confused me: "One can link with libc or other libraries to fill in the gaps in the standard library."

1586907304
jamii
How I use translate-c? If I just point it at a c file I get `'stdio.h' file not found` but I can't figure out how to tell it about includes etc.

1586907459
jamii
Oh, I just copied all the arg from zig build run --verbose and that does the trick.

1586907554
r4pr0n
that error sounds like a missing -lc

