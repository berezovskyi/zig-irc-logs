1596672018
leeward
So on to the second question: should it? It seems like "any" is at least as clear as "anytype" without the weird agglomerative naming, and without the confusion with "type"

1596672089
shakesoda
but they're different?

1596672110
shakesoda
isn't it constrained to types as the name suggests, for really actually anything there's var

1596672258
gruebite
i feel like there should be a way to explicitely state two types with the same layout are in fact the same

1596672274
gruebite
i see a lot of reimplementations of Color, Vectors, etc. each application with their own

1596672298
gruebite
if the layout is the same, why not make them convertable to each other to allow for your own extensions/functions

1596672323
shakesoda
duck typing would be useful for that although i don't fundamentally mind this much

1596672411
gruebite
when using a library and you intend to expose similar functionality (similar type) but instead of exposing implementation details from internal libraries used, would you rather expose your own type compatible with your dependency's?

1596672473
gruebite
i see this a lot in games, and i think it's kinda smelly. libA depends on libB, both have a Vec2 type or whatever

1596672490
shakesoda
there's usually just some interaction point where i can trivially convert to the one i want while doing something else

1596672510
shakesoda
for my own purposes (surprise: it's games) i usually want my own types to begin with, and don't rely much on deps

1596672516
gruebite
but most of the methods end up being duplicated or deferred?

1596672536
gruebite
erm

1596672543
gruebite
s/deferred/delegated

1596672759
shakesoda
it just isn't really a concern in practice if that happens to some extent as long as the code i'm dealing with is clear

1596672795
shakesoda
although, to be sure, i would of course prefer not duping functionality, and to that end i will intern deps and gut the types sometimes if that seems like it'll keep things simpler

1596672937
gruebite
depends on the type, i think

1596672984
ronsor
`anytype` is fine

1596672989
ronsor
it stands for any type

1596672990
ronsor
easy

1596673024
shakesoda
i do think there would be some value in a way to express duck types

1596673115
shakesoda
maybe there's a decent way to go about it already

1596673134
shakesoda
if you can cast such that it has to match memory layout

1596674132
gruebite
can't use native zig structs, i think

1596674201
ronsor
extern struct/packed struct only

1596674209
ronsor
otherwise the fields can be reordered

1596679419
daurnimator
ifreund: on linux, compare the inode against /proc/self/root

1596679523
ronsor
I have discovered another bug

1596690270
daurnimator
>  The GNU C Library version 2.32 is now available.

1596705366
ifreund
andrewrk: don't worry about giving more feedback on #5985 for the moment, I think the initial steps are clear to me and it's time to try some implementation

1596718498
alehander92
hey

1596718504
alehander92
are zig generics inspired by ML

1596718518
alehander92
i was discussing ML modules and

1596718520
alehander92
.. yeah :D :D

1596718537
alehander92
it just seems to me there might be some little inspiration

1596718547
DarkUranium
Don't ask me, I am only here so I don't get fined!

1596718607
alexnask[m]
alehander92: I dont think so

1596718610
ifreund
Not to my knowledge, Zig generics just follow naturally from comptime and types as first class values at comptime

1596718636
ifreund
there isn't really anything in the zig spec that is generic-specific

1596718642
alehander92
i .. hope i don't get fined as well

1596718650
ifreund
they're just a thing you can do with comptime

1596718657
alehander92
ah, i see

1596718667
ifreund
that said, I'm not very familiar with ocaml

1596718670
alehander92
yeah i am talking about the design approach of letting this happen

1596718685
ifreund
(or any other ML)

1596718700
alexnask[m]
Right, I get what you mean alehander92 and I can see the parallels but I dont think Andrew is a functional programming fan

1596718752
alehander92
i see, it's quite possible indeed

1596718755
alexnask[m]
I think it was mainly a result of designing the language with comptime evaluation from the beginning

1596718842
fengb
There’s a talk where Andrew mentioned genetics just sorta fell out of implementing comptime

1596718880
alehander92
yes, makes sense

1596718888
alehander92
which reminds me then : is there a module concept

1596718896
ikskuh
alehander92: what is a "module"?

1596718897
alehander92
in zig : then comptime might lead to similar module functions

1596718913
alehander92
a collection of type and function signatures maybe

1596718918
ikskuh
we have that

1596718919
alehander92
a namespace

1596718921
ikskuh
it's called struct

1596718924
alexnask[m]
"modules" usually refer to files (at least in the compiler source) but at a language level imports just return structs

1596718925
alehander92
but as a value, not a file

1596718936
alehander92
hmm

1596718942
ikskuh
alehander92: i make you a example ;)

1596718943
fengb
Files are just structs

1596718950
ikskuh
yep

1596718955
alehander92
yeah cool

1596718959
fengb
Maybe we should rename them to modules 🤔

1596718971
alehander92
so in this case i can write a function that returns a new struct with changed types

1596718991
alehander92
e.g. importing generalized(x)

1596718996
alehander92
or something

1596719037
fengb
You alias it with const =

1596719047
ikskuh


1596719070
fengb
const Stringer = std.ArrayList([]const u8)

1596719079
ikskuh
alehander92:

1596719107
ikskuh


1596719113
ikskuh
zlm is generic against a certain type

1596719125
ikskuh
by-default you can use zlm.Vec3 (which is specialized on f32)

1596719130
alehander92
yeah

1596719131
alehander92
exactly

1596719134
ikskuh
but you can also do zlm.specializeOn(i32).Vec3

1596719138
ikskuh
which is a Vec3 with int types

1596719171
fengb
Unlike MLs, Zig compiler actually has no idea what generics are. So stuff like dependent types don’t really exist

1596719202
fengb
But you can do self referencing function args to sorta fake it

1596719216
alehander92
i am mostly thinking of module functors

1596719241
alexnask[m]
Well it knows about generics in the sense of functions with comptime or anytype arguments but nothing special about type functions (generic functions that return types)

1596719253
alexnask[m]
-Wpedantic

1596719255
alexnask[m]
:P

1596719284
fengb
It’s more of a type theory thing. In proper genetics you can actually have args take Writer(T)

1596719289
fengb
Generics

1596719350
fengb
Zig doesn’t really follow proper theory a whole lot :P

1596719363
fengb
Brutally pragmatic in a good way

1596719406
alehander92
probably it's possible to adapt it more

1596719442
ikskuh
fengb: there's still the pending proposal of checked type parameters

1596719455
ikskuh
which i think are a good thing and better than the duck typing we have right now

1596719495
fengb
Yeah I’ve been watching that. Still not “real” generics but predicate checks can get us pretty close

1596719659
ikskuh
yeah, it improves error messages by a lot

1596719667
ikskuh
and also conveys information better what to expect for a type

1596719703
fengb
You don’t like `writer: anytype`??

1596719827
alexnask[m]
I agree with a lot of these points however I also like the flexibility of pure duck typing, some APIs may only use e.g. writeAll and you can pass a File directly (just an example)

1596719861
ikskuh
alexnask[m]: yeah i think that will still be possible with this proposal

1596719870
alexnask[m]
In which case replacing the anytype with a Writer typechecker is limiting the actual functionality

1596719870
ikskuh
but you might plan your API for future extensions

1596719877
ikskuh
which needs a writeIntLittle at some point

1596719906
alexnask[m]
True, however naively one would use a Writer typechecker that would check for context + all Writer methods

1596719948
alexnask[m]
It definitely is useful in a lot of places

1596720015
alexnask[m]
s/is/would be

1596720168
alexnask[m]
I think some small library to define type checkers/concepts/w.e you want to call them would already really useful to get good compiler errors

1596720179
ikskuh
we should never ever introduce "With" in zig

1596720190
ikskuh
alexnask[m]: yeah, true

1596720204
ikskuh
std.meta.traits.requiresFunction("foo");

1596720528
alexnask[m]
Like you could reasonably write something like  this:

1596720630
alexnask[m]
(well, @TypeOf(writer) instead of writer)

1596720859
alexnask[m]
I may just do it later to train my comptime muscle

1596721079
fengb
comptime katas?

1596721721
ikskuh
alexnask[m]: that writer checker is already too strict :D

1596721732
ikskuh
=> .{ .field, "context", ContextType },

1596721738
ikskuh
should not be required

1596721796
alexnask[m]
Sure, just an example

1596721800
alexnask[m]
:)

1596721830
companion_cube
ikskuh: what's `With`?

1596721860
companion_cube
(as for the predicates, it's like D, right?)

1596721925
leeward
We have defer, we don't need with.

1596721960
companion_cube
ah, so like python's with?

1596721992
leeward
Isn't there a ticket for something like that though? It keeps getting closed as too complicated then reopened as needed for async.

1596722026
fengb
Yeah resource tracking

1596722050
fengb


1596722069
fengb
Biggest recent driver is cancelawait semantics

1596722142
leeward
Closures would solve this problem.

1596722169
leeward
Of course, they add extra allocation.

1596722214
companion_cube
imho generic containers are also a big point where RAII makes sense

1596722246
ifreund
but the complexity :(

1596722251
leeward
so much complexity

1596722283
companion_cube
the complexity has to be there somewhere, either in your code or in someone else's

1596722305
companion_cube
if you can `arraylist.truncate(42)` or whatever, you need to specify somewhere what happened to elements that die

1596722494
leeward
I think the bulk of the complexity comes from move/copy constructors.

1596722560
companion_cube
(of course you could have `arraylist.truncate(42, |x| x.deinit())` or something like that with closures)

1596722583
companion_cube
well the pb with C++ is that these are implicit

1596722615
ikskuh
companion_cube, fengb, leeward: it's a "import all of these things fields into the current namespace"

1596722616
companion_cube
(I guess I'm biased towards rust again)

1596722618
ikskuh
With foo

1596722621
ikskuh
.x = 10

1596722622
ikskuh
.y = 20

1596722623
companion_cube
ikskuh: oh ok

1596722624
ikskuh
End with

1596722630
ikskuh
.show()

1596722631
ikskuh
:D

1596722662
leeward
ikskuh: Oh, that's very different.

1596722672
alexnask[m]
I dont hate `With` tbh though Im happy I havent written VBA in a long time

1596722717
ikskuh
alexnask[m]: you're telling me you haven't ever seen people nesting With? :D

1596722806
alexnask[m]
Oh Ive seen it

1596722833
leeward
I'm a little confused. I've never written VBA and the last time I wrote VB it was 6. Is this like a usingnamespace block?

1596722892
ifreund
is it like with in python?

1596722894
ikskuh
yeah, but for object fields, not namespace members

1596722904
ikskuh
so if you have a point "p"

1596722916
ikskuh
you can do "With p \ .x = 10 \ .y = 20 \ End With"

1596722926
ikskuh
which would be equivalent to "p.x = 10 \ p.y = 20 \"

1596722931
leeward
What's the upside?

1596722935
alexnask[m]
Not quite, you can think of it as `With (some_expr)` making all `.foo` transform into `(some_expr).foo`

1596722949
alexnask[m]
(in the block)

1596722951
ikskuh
leeward, you have to type less :D

1596722959
ikskuh
you can also call methods on those :D

1596722984
leeward
I mean, I guess if you have really long names it might save you some columns, but...easier to write/harder to read doesn't sound very Ziggy.

1596723003
ifreund
wow that's terrible

1596723033
ifreund
python's with is totally different and rather useful

1596723046
leeward
entirely different

1596723069
fengb
JS has that too. It’s even worse because field accesses in with block look identical to variables

1596723070
leeward
context managers let you do what defer does, which is how we ended up in that raii discussion

1596723211
companion_cube
although in python you need a new indent at every `with`

1596723381
ronsor
VB-style 'with' would be a mistake

1596723432
leeward
companion_cube: ExitStack solves that "indent for every `with`" problem so you only need a single indent.

1596723913
SyrupThinker
> JS has that too        In non-strict mode code only. So thats luckily mostly unused

1596724155
companion_cube
leeward: sounds like an ugly hack :)

1596724996
leeward
Maybe, but it works well.

1596725058
leeward
I had a work thing that needed to do a lot of acquire/release hardware, and it was very necessary. It also lets you do something that looks a lot like defer.

1596740163
cren
anyerror!<return type> is the same as !<return type>, right? (Replace <return type> with the return type of your choice)

1596740224
fengb
`!T` is inferred to be all of the errors actually returned from the body of the function. `anyerror!T` is literally all the errors the compiler knows about

1596740277
ifreund
e.g. if the function can only return error.OutOfMemory, !T is the same as error{OutOfMemory}!T

1596740552
cren
how does the compiler know about errors? I mean: does it only know the stdlib errors? What if I write my own error?

1596740589
fengb
When you create an error, it adds it into the globalset of all errors

1596740640
cren
interesting

1596740683
fengb
It's a u16. If there's more than 64k errors, the compiler livelocks atm 🙃

1596740706
cren
what's a livelock? (I'm guessing it locks up while running?)

1596740713
fengb
It locks with 100% cpu

1596740719
cren
ouch

1596740721
fengb
Busy doing... something

1596741226
cren
I don't understand why `_ = try network.init()` is giving me "error: expected type 'void', found 'zig-network.network.error:10:15'"

1596741276
ifreund
cren: what's the signature of the function containing this line?

1596741338
cren
ifreund: oh, it's just `void`. That'll be it. If I change it to `!void`...

1596741355
ifreund
yep, exactly

1596741383
ifreund
try foo() is sugar for foo() catch |err| return err

1596741471
cren
ifreund: I'm even at that page in the docs, I feel silly for not seeing it...

1596741497
ifreund
eh, I think everyone feels silly when learning a new language

1596741522
cren
:)

1596741667
cren
can I define a function that takes an array of type T as an argument?

1596741728
cren
hmm actually that isn't what I want

1596741765
cren
I was just trying to make a function to which I could pass arguments that would make up the second argument of debug.print

1596742015
ifreund
you probably want to make the function take an anytype argument and then ++ the tuples

1596742089
ifreund
e.g. you can do std.debug.print("{} {}\n", .{"hi"} ++ .{"there"});

1596742175
cren
my goal was to avoid having to type the "{}\n" bit

1596742182
cren
i'm very lazy

1596742431
fengb
The error message is quite confusing

1596742447
fengb
I think we've all been baffled at one point or another

1596742534
ifreund
ah, your function would be fn lazy(x: anytype) void { std.debug.print("{}\n", x); }

1596742543
KoljaKube
cren: Off the top of my hat I'd say that you can't create the format string for that without some sort of dynamic allocation, if you are trying to wrap std.debug.print

1596742647
cren
KoljaKube: yeah, the more I think about it the harder it seems

1596742689
ifreund
oh but for as many parameters as you want, that's doable one sec

1596742731
KoljaKube
I don't know about the internals, but if everything is streamed, maybe you could reimplement it to do what you want

1596742744
KoljaKube
But I guess I'll be taught otherwise in a sec :D

1596742795
ifreund
fn lazy2(x: anytype) void { std.debug.print("{}" ** x.len ++ "\n", x); }

1596742808
ifreund
just had to look up how to get the length of a tuple

1596742839
KoljaKube
Oh boy, nice one

1596742852
KoljaKube
Forgot about **

1596742874
ifreund
** is handy, especially for putting stuff in arrays at comptime

1596742993
cren
what does ** do?

1596743007
ifreund
"{}" ** 3 == "{}{}{}"

1596743030
ifreund
it multiplies arrays at comptime

1596743051
KoljaKube


1596743468
cren
ifreund: what do I pass to that function? an array?

1596743524
ifreund
cren: a tuple, just like std.debug.print's second arg

1596743539
ifreund
lazy2(.{"hello", 5, 0x00, "bye"});

1596743555
cren
ifreund: oh, for some reason I thought that was an array. So tuples can have more than one time in them? That surprises me

1596743589
ifreund
a tuple is more like a struct with anon fields than an array

1596743630
ifreund
and it's not surprising that you thought it was an array, tuples aren't really explained that well in the docs yet

1596743654
cren
is that .{<stuff>} the literal syntax for a tuple, then?

1596743669
ifreund
yeah, exactly

1596743819
ifreund
see also

1596743843
ifreund
tuples are a fairly new language feature and there's still some fleshing out to do

1596744093
KoljaKube
ifreund: Remember those value-guarding functions we talked about?

1596744352
ifreund
KoljaKube: like what odin does with it's "where" keyword?

1596744474
KoljaKube
Don't know about that, I started from Kotlin

1596744534
ifreund


1596744542
KoljaKube
`ensureNotNull(my_optional); useNonOptional(my_optional);` is along those lines I meant

1596744570
ifreund
I think odin does what you described

1596744584
ifreund
iirc there's a zig issue somewhere as well

1596744709
fengb


1596744749
KoljaKube
Hmm, that looks nice, yes. Anyhow, I remembered why I found them interesting in the first place: they are user-definiable and (in theory) not limited to stuff like nullability

1596744778
KoljaKube
Looks like odin takes all that a step further :D

1596744788
KoljaKube
(hadn't heard about the language until now)

1596744861
ifreund
I've never used it, just look at it to see what choices it made

1596744885
ifreund
personally, Zig fits what I want more

1596744898
fengb
Probably Zig’s closest competitor. gingerBill and andrewrk have a friendly “rivalry”

1596744907
ifreund
er, better? whatever

1596745154
KoljaKube
The nice thing about those clauses in Kotlin is that they can be runtime-checked. Those two links look more focused on comptime

1596745185
fengb
Zig doesn’t have runtime polymorphism

1596745211
KoljaKube
It's not about polymorphism

1596745217
fengb
Er... types don’t exist at runtime

1596745223
fengb
So you can’t check them at runtime

1596745246
fengb
And type sizes need to be known, although that can be worked around with a pointer

1596745291
KoljaKube
You could in theory do `if (isPositive(my_i32)) { var foo: u30 = my_i32; }` and the compiler would know not to complain}

1596745316
fengb
Oh you mean type narrowing. I thought we were talking about functions args

1596745372
KoljaKube
Again, _in theory_, the groundwork is laid for all kinds of checks that only have effects in the compiler

1596745395
KoljaKube
Don't know about the implementation status for more complex scenarios though

1596745411
KoljaKube
Still a neat idea I think

