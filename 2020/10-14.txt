1602633685
waleee-cl
right, yeah, makes sense I guess

1602633827
justin_smith
but maybe I'm misunderstanding something, since in the github it's described as erroneous

1602633969
waleee-cl
ryuukk_:  were you building the model-viewer unmodified?

1602634477
ryuukk_
waleee-cl: no, i just want reuse the glad lib for opengl

1602634483
ryuukk_
i just import header for now

1602634494
ryuukk_


1602634522
waleee-cl
I get that, I was wondering about when you were getting the error

1602634523
ryuukk_
for now it is simple, open window, and clear color/depth

1602634867
ryuukk_
so far, i'm surprised with zig (positive) i like that language a lot

1602634885
ryuukk_
it was easier to get to this point that i initially thought

1602634906
ryuukk_
i still have to think more to get away from OOP, but if i keep things simple it is smooth

1602634921
ryuukk_
interop with C is super smooth and easy

1602634931
ryuukk_
ZLS is awesome

1602635595
ryuukk_
waleee-cl: i just copied the file locally when i tried, i added the same options in the build.zig file

1602635608
waleee-cl
ok

1602635677
ryuukk_
oh i didn't see the previous messages

1602635694
ryuukk_
2:30am it is getting late

1602636290
waleee-cl
(the not so only) Central European Time

1602636378
waleee-cl
also Spanish time, even though Spain is further west than eg. the UK,  for reasons

1602636478
fengb
Because fascism! ðŸ™ƒ

1602636655
waleee-cl
probably. Portugal which also had such a stint is on WET/GMT though

1602649405
jabb
can i mark a return type as being okay to ignore?

1602649860
andrewrk
no and it is not planned

1602649946
Astolfo`
sounds like allowing that would allow a lot of wasted computing jabb

1602649966
Astolfo`
i see that problem whenever i use a Golang library

1602649984
Astolfo`
"oh, i dont need this part" > puts '_' on return

1602650002
Astolfo`
wonderful, i just did the work to get an answer i actually dont need

1602650017
jabb
i'm just using functions in a chaing style

1602650034
jabb
chaining*

1602650080
jabb
so returning a pointer to self, like matrix.invert().scale() but performed in-place

1602650099
Astolfo`
ah i see

1602652242
pixelherodev
jabb: that's what `_ = ` is for.

1602652294
pixelherodev
I think that, as far as Zig is concerned, all else being equal, catching mistakes should be the default, and it's the programmer's responsibility to explain if something was intentional

1602652329
pixelherodev
One option might be to make the return type variable?

1602652346
pixelherodev
e.g. `fn DoAThing(arg: anytype) ReturnTypeFrom(arg)`

1602652381
pixelherodev
That's not something I'd actually suggest though, I'd personally suggest just using `_ =`

1602659453
ikskuh
errrm

1602659460
ikskuh
i think there are a lot of safety checks broken by now?

1602659507
ikskuh
huh

1602659540
ikskuh
andrewrk: did semantics of @floatCast change over time? i remember it panic'ing when casting a non-integer float to int (like 2.3 â†’ i32)

1602661132
Storyfeet
Hey all, working on getting to grips with zig,  I'm Trying to return a comptime string from a function. (And from a switch) Is this possible? If so, what's the type?

1602661226
ikskuh
heya Storyfeet

1602661236
ikskuh
you can just return `[]const u8`

1602661284
ikskuh
comptime variables have static lifetime, meaning pointers to them are valid throughout the whole program

1602661370
ikskuh
see:

1602661371
Storyfeet
I've got a return of []const u8,  Can I declare a function as Comptime only?

1602661403
ikskuh
no, that's not possible (yet)

1602661412
ikskuh
you can use the pattern used in comptimePrint though :)

1602661418
Storyfeet
Thanks for the link, that explains a lot

1602661419
ikskuh
brb

1602661738
Storyfeet


1602661752
Storyfeet
I'm having trouble with the switch statement too.

1602663170
Storyfeet
I'm trying to switch a string against several strings of different length at comptime.

1602663208
Storyfeet
How would I tell the compiler to treat them all as slices?

1602663718
ikskuh
Storyfeet: either coerce the first switch prong to []const u8 or declare the value as []const u8

1602663805
ikskuh
i'm away for work, but others can definitly help, too :)

1602663821
Storyfeet
thanks

1602664364
FireFox317
Storyfeet, not sure if someone already answered, but in

1602664369
FireFox317
Zig you can't switch on a string

1602664418
FireFox317
You have to use `std.mem.eql(u8, slice1, slice2)`

1602664447
FireFox317
Or use a comptimehashmap or something

1602664475
Storyfeet
ah, OK, thanks

1602674920
ikskuh
has no one ever tried using std.fs.Dir.setAsCwd() on windows?! :D

1602675178
ikskuh
@compileError("TODO implement chdir for Windows");

1602675178
ikskuh
huh

1602675240
pixelherodev
lol

1602675658
pixelherodev
> git grep TODO | grep Windows| wc -l

1602675661
pixelherodev
13

1602675662
pixelherodev
:P

1602680702
ryuukk__
since there is no default, i assume it is not possible to initialize a fixed array with default value all at once?

1602680717
ryuukk__
queue: [256]i32 = undefined and then somewhere i loop and i set the default?

1602680753
g-w1
i think there is

1602680756
fengb
You can do [_]i32{42} ** 256

1602680844
ryuukk__
hmm

1602680853
ryuukk__
i have no idea what i read

1602680862
ryuukk__
what is **?

1602680876
pixelherodev
Comptime array expansion, basically

1602680887
pixelherodev
It means "make an array that is lhs repeated rhs times"

1602680895
ryuukk__
so it fills aray with 42?

1602680906
pixelherodev
Basically, it first makes a [1]i32 with the value 42

1602680921
pixelherodev
Then it takes that and produces an array with 256 sequential copies of that

1602680939
pixelherodev
Which ends with a 256-length array of i32s, each with the value 42

1602680945
ryuukk__
ok thanks

1602680950
pixelherodev
If you want a pattern you can add to the initial arrayu

1602680952
pixelherodev
array*

1602680958
ryuukk__
[_] what is that?

1602680963
pixelherodev
Implicit-length array

1602680972
ryuukk__
ok

1602680979
pixelherodev
Basically, it's the same as [1]i32 in that case

1602680991
pixelherodev
but if you do e.g. `[_]i32{42,-1}`, it'll be a [2]i32

1602681065
ryuukk__
queue: [256]i32 = [_]i32{0} ** 256, isn't there something cleaner?

1602681118
ryuukk__
queue: [256]i32 = 0 ** 256, seems to compile

1602681119
fengb
Thereâ€™s also std.mem.zeroes([256]i32)

1602681128
ryuukk__
but will it work? xD

1602681381
ryuukk__
oh no nvm it doesn't compile

1602681424
ifreund
yeah, ** only works on arrays and slices and only at comptime

1602681449
ryuukk__
can't the compiler figure the type?

1602681461
ryuukk__
{42} ** 256 would be nicer to type

1602681557
pixelherodev
ryuukk__: it's not "can it," it's "should it"

1602681579
ryuukk__
why? type is known at compile tyme

1602681625
pixelherodev
>  * Communicate intent precisely.

1602681648
pixelherodev
Like I said, the compiler

1602681659
ryuukk__
char array[100] = {0} in c++

1602681667
fengb
{42} this is a block in Zig

1602681671
fengb
C is hard to parse

1602681675
pixelherodev
^

1602681736
ryuukk__
but it does the job clean

1602681764
ryuukk__
(not all the time, but here yes)

1602681768
pixelherodev
That's heavily debatable

1602681778
pixelherodev
The key here is that {0} is a different structure in this language

1602681792
ryuukk__
queue: [256]i32 = [_]i32{0} ** 256

1602681792
fengb
Zig parser is designed with no backwards checks in mind

1602681795
ryuukk__
duplicate typing

1602681808
pixelherodev
You don't need to define the type there

1602681822
pixelherodev
`var queue = [_]i32{0} ** 256` is enough

1602681839
fengb
For a struct field thereâ€™s no inferencing yet

1602681842
ryuukk__
it's in a struct

1602681865
ryuukk__
"yet", is it planed?

1602681893
fengb
I wrote a proposal a while ago. Hasnâ€™t been rejected so I still have hopes :P

1602681895
s-ol
hey, anyone here know their way around stage1/ir.cpp?

1602681919
s-ol
I'm working on #4529 and not managing to unwrap, cast, and re-wrap optionals properly

1602681942
ryuukk__
well, i'd rather have to type less for basic thing

1602681992
s-ol
i'm trying to use ir_analyze_unwrap_optional_payload() but I think I'm just lost around the IrInstGen* structure and ir_get_ref / ir_get_deref

1602682005
pixelherodev
one of the core values of Zig is to prioritize reading code over writing code

1602682037
ryuukk__
does duplicates really help reading?

1602682037
pixelherodev
In this case, it should be possible to have both, since the type is already known

1602682049
ryuukk__
yes that is what i thought

1602682056
pixelherodev
No, I agree, this is one case writing can be improved without harming reading

1602682065
ifreund
I tried to implement something non trivial in stage1 and decided my time would be better spent waiting for and contributing to stage2

1602682075
pixelherodev
fengb: which issue?

1602682143
fengb


1602682174
ifreund
that payload coercion stuff is something we definitely want, but IMO it doesn't cause enough friction to be worth implementing in stage1 when the code will hopefully be thrown out within the next year

1602682205
pixelherodev
Seconded

1602682219
s-ol
ifreund: yeah i see how that might be true

1602682235
s-ol
although like 80% of it is there already in types_match_const_only()

1602682268
ifreund
I mean it's your time not mine, go for it if you feel like it :D

1602682275
s-ol
it does figure out all the nesting and builds a nice list of steps that need to be done, it just doesn't use it and instead runs through a bunch of heuristics

1602682300
s-ol
i just picked something random with a 0.7.0 milestone to get my hands dirty

1602682316
ifreund
it's 0.8.0 milestone now :P

1602682339
s-ol
true :P

1602682392
ryuukk__
and it's bug prone, if i ever want edit length, i'd need not forget edit the ** 256 too, anyways, but now i'll use std.mem.zeroes([256]i32), it has less noise in the syntax

1602682553
ifreund
anyone have the commit before llvm11 was merged handy?

1602682727
ifreund
(found one that works)

1602683184
g-w1
Im still waiting for arch to get llvm ...

1602683517
pixelherodev
Heh, i already have it ;)

1602684196
ifreund
I mean i could have it too if i did a little work

1602684202
ifreund
but I'd rather not

1602684383
pixelherodev
ifreund: I... actually didn't install it :P. It showed up in an update, so I masked it lol

1602684395
pixelherodev
I meant that I have it *available*, not that I installed it, but I clearly phrased that badly

1602684405
ifreund
heh

1602685260
ryuukk__


1602685267
ryuukk__
would be cool if is show an example how to use it

1602685278
ryuukk__
how do i instantiate it?

1602685302
ryuukk__
documentation often lack basic examples

1602685392
ifreund
const list = List(u32){ .items = foo, .len = bar, };

1602685412
ifreund
well, you would probably want it to be var though

1602685453
ifreund
the List() function returns a type, so you can use it anywhere a type is expected

1602685519
pixelherodev
List(u32) is, for all intents and purposes, a struct type

1602685526
pixelherodev
So you can use it in the exact same way

1602685581
ryuukk__
.\src\sandbox.zig:7:42: error: array literal requires address-of operator to coerce to slice type '[]u32'

1602685582
ryuukk__
var list = array.List(u32){ .items = [1]u32{0}, .len = 1, };

1602685591
ryuukk__
i'm confused with arrays

1602685593
pixelherodev
items is supposed to be a slice

1602685597
pixelherodev
`[]u32` == slice of u32

1602685608
pixelherodev
`[1]u32` == array-len-1 of u32

1602685610
ryuukk__
what should i do?

1602685623
ifreund
a pointer to an array will coerce to a slice

1602685625
pixelherodev
Is that the std list type?

1602685628
ifreund
so &[1]{0}

1602685643
ifreund
I think it's their own type

1602685651
ryuukk__
i'm lost now lol

1602685660
ryuukk__
how do i initialize an array?

1602685684
ifreund
const foo = [4]u8{1,2,3,4};

1602685686
pixelherodev
`[1]u32{0}` initializes a 1-len array with the value 0

1602685699
pixelherodev
address-of-array coerces to slice

1602685701
ryuukk__
why my code didn't work then, i used same syntax

1602685712
pixelherodev
because items isn't supposed to be an array there

1602685713
ifreund
[]u32 is a slice not an array

1602685716
pixelherodev
It's supposed to be a slice

1602685734
ryuukk__
var list = array.List(u32){ .items = [1]u32{0}, .len = 1, };

1602685738
ryuukk__
what should i do to make this work?

1602685748
pixelherodev
The obvious answer is "& before [1]u32"

1602685758
pixelherodev
Depending on how the type is supposed to work, that might result in a crash later

1602685765
pixelherodev
So the answer might be a bit subtler

1602685770
ryuukk__
.\src\sandbox.zig:7:49: error: expected type '[]u32', found '*const [1]u32'

1602685770
ryuukk__
var list = array.List(u32){ .items = &[1]u32{0}, .len = 1, };

1602685786
pixelherodev
Ah, [_] instead of [1]?

1602685791
pixelherodev
No, that shouldn't matter

1602685801
ifreund
it's const

1602685804
ryuukk__
_ supposed it know the size?

1602685809
ifreund
the type wants a mutable array

1602685814
ryuukk__
same problem

1602685815
ryuukk__
.\src\sandbox.zig:7:49: error: expected type '[]u32', found '*const [1]u32'

1602685815
ryuukk__
var list = array.List(u32){ .items = &[_]u32{0}, .len = 1, };

1602685821
ifreund
so you have to use a global var or allocate

1602685822
pixelherodev
I said that :P

1602685846
ifreund
if it were []const u32 that would work

1602685869
ryuukk__
hmm

1602685883
ifreund
if you want a generic list, try std.ArrayList()

1602685895
ryuukk__
well i want to make my own type

1602685914
ifreund
well then take a look at the code for std.ArrayList() and see how it works

1602685926
ryuukk__
i tried to take a look but it's confusing

1602685956
ryuukk__
Self Slice alignment, all that i don't understand

1602685974
ryuukk__
i checked the doc to learn how to do all that

1602685988
ryuukk__
but hit road bloat on first code shown in the doc

1602685994
ryuukk__
block

1602686037
ryuukk__
so far not so userfriendly

1602686046
ryuukk__
have to dig deeper and i loose track

1602686110
ifreund
you can ignore the alignment stuff

1602686122
ifreund
if you do so, then Slice is just []T

1602686157
ifreund
and Self = @This(); which refers to the type of the struct returned

1602686192
ifreund
I agree the docs could use work, have you seen this site?

1602686442
ryuukk__
i didn't, but i will take a look

1602687820
ryuukk__
here is a naive attempt, fail of course lol

1602687864
ryuukk__
this is confusing

1602687922
ryuukk__
does anyone have a super basic generic array struct, something super basic

1602688016
s-ol
ryuukk__: do you mean std.ArrayList?

1602688038
ryuukk__
i can't understand that one, it is too complex

1602688041
g-w1
i think they want to try to impliment it themselves

1602688443
ryuukk__
i found this

1602688468
ifreund
the equivalent is ArrayList

1602688521
ryuukk__
i can't wrap my head around it, the way it is written makes it looks complex

1602688533
ryuukk__
this array.zig in contrast is easy to understand

1602688584
pixelherodev
arraylist is pretty simple

1602688614
ryuukk__
but it's me trying to read it not you :p

1602688623
ifreund
the alignment aware version makes things a little harder to read to be fair

1602688729
ryuukk__
anyone got one? or maybe help me on my attemp?

1602688820
ryuukk__
also i can't call function here?

1602688821
ryuukk__
.\src\array.zig:28:13: error: expected 1 argument(s), found 0

1602688821
ryuukk__
ret.init();

1602688835
ifreund
we all just use ArrayList

1602688844
ifreund
here though, I stripped it down for you:

1602688899
ifreund
eh, forgot to simplify the allocations

1602688927
ryuukk__
oh so []T hides a pointer

1602688961
ryuukk__
what is []T called in zig?

1602688985
ifreund
that's a slice of type T

1602688999
ifreund
a slice has two fields, a pointer and a length

1602689001
ryuukk__
ok i was assuming it is an array

1602689014
ryuukk__
so it's like in D

1602689031
ifreund
you can thing of it as a struct { ptr: [*]u8, len: usize }

1602689050
ryuukk__
wait, this makes it even more confusing

1602689054
ryuukk__
what is [*] ?

1602689064
ifreund
that's a pointer to many items

1602689085
ifreund
see:

1602689093
ryuukk__
why not *usize ?

1602689097
ifreund
what?

1602689106
ryuukk__
a pointer

1602689133
ryuukk__
[]u8 = slice  [*]u8 = pointer?

1602689135
ryuukk__
this make no sense

1602689151
pixelherodev
[]T = slice, [*]T = pointer-to-many, *T = pointer-to-one

1602689158
pixelherodev
[N] = array

1602689175
pixelherodev
[]T is basically pointer + runtime-known length

1602689180
ifreund
this is all pretty well documented on ziglang.org and on ziglearn.org

1602689183
pixelherodev
[N]T is pointer and compile-time-known-length

1602689196
ryuukk__
what prevent a pointer to one to be a poitner to many

1602689200
ifreund
pixelherodev: no, that would be *[N]T

1602689215
ryuukk__
use  [] for everything is confusing me

1602689219
ifreund
ryuukk__: zig differentiates them for safety purposes

1602689240
pixelherodev
ifreund: s/pointer/items, yeah

1602689244
ifreund
you can @ptrCast() if you think you know better than the compiler but that can come back to bite you

1602689250
ryuukk__
what kind of safety measure?

1602689279
ifreund
well, if you try to access ptr + 1 when ptr is a pointer to only one item, you segfault

1602689292
ifreund
or at least, you hopefully segfault, it's UB

1602689320
ifreund
zig allows you to encode this kind of information in the type system and enforces it

1602689330
ifreund
leading to fewer bugs

1602689336
pixelherodev
ryuukk__: it means that if you have an array of five items, and you try accessing a non-existent sixth item, it fails in the best possible way instead of having random bugs and crashes

1602689357
pixelherodev
"Better compile time errors than runtime failures; better runtime failures than bugs"

1602689388
ryuukk__
i don't deny that, it just seems confusing at first

1602689423
ryuukk__
confusion leads to bug too :p

1602689433
ifreund
I'd suggest giving chapter one here a good read, it will clear things up a lot:

1602689459
ryuukk__
it is too much, i usually just search when i hit road block

1602689489
ryuukk__
i'm "learn by doing" kind of person

1602689508
ryuukk__
if there is a book before, high chance i drop it

1602689535
ifreund
same, but I also read the docs when I don't understand something about the syntax before asking here

1602689546
ryuukk__
that is what i have done

1602689557
ryuukk__
but when it doesn't make sense, it highlight other issue

1602689612
ryuukk__
i could write all the book possibles, i wouldn't be able to solve the issue i have, right now

1602689616
ryuukk__
read*

1602689634
ifreund
what are you stuck on right now?

1602689636
ryuukk__
asking, help me move forward

1602689651
ryuukk__
no, i'm not stuck anymore, you gave me the anwsers i needed

1602689665
ryuukk__
[]T is slice that hides a pointer

1602689700
ryuukk__
and *T is only for one

1602689794
ryuukk__
just one question: why can't i call function inside the function that creates the type?

1602689798
ryuukk__
.\src\array.zig:28:13: error: expected 1 argument(s), found 0

1602689798
ryuukk__
^

1602689798
ryuukk__
ret.init();

1602689894
ifreund
well, you aren't passing an argument to it

1602689922
ifreund
ret is a type not an instance of the struct

1602689931
ryuukk__
oh i see

1602689945
ryuukk__
so i need call init after i create it

1602689950
ifreund
yes

1602690182
ryuukk__
is there a way for std.log to print the content of a slice?

1602690211
ryuukk__
std.log.info("Content: {}", .{list.slice()}); prints: info: Content: u32@2748a280000

1602690231
ifreund
what is the return type of slice()?

1602690238
ryuukk__
[]T

1602690244
ryuukk__
T is u32

1602690283
ryuukk__
pub fn slice(self: *Self) []T

1602690283
ryuukk__
return self.items[0 .. @intCast(usize, self.count)];

1602690283
ryuukk__
}

1602690283
ryuukk__
{

1602690305
ryuukk__
don't mind the intCast, i don't like typing usize on the struct xD

1602690442
pixelherodev
what type is count?

1602690476
ryuukk__
the number of elements in the array

1602690485
pixelherodev


1602690490
ryuukk__
u32

1602690558
ifreund
log.info("content: {x}", .{slice}); will show you the memory

1602690595
ifreund
std.fmt.format doesn't have a specifier for printing out the values of non-u8 slices

1602690601
companion_cube
zig can print arbitrary types?

1602690610
companion_cube
ah, wait

1602690630
ryuukk__
ifreund: doesn't work

1602690631
ryuukk__
C:\zig\lib\zig\std\fmt.zig:455:39: error: expected type '[]const u8', found '[]u32'

1602690631
ryuukk__
return formatText(value, fmt, options, writer);

1602690638
ryuukk__
but i don't want see memory, i want print the values

1602690648
ryuukk__
{1, 2, 3} if i add 1, 2 ,3

1602690665
ifreund
use a for loop i guess

1602690685
ryuukk__
the point is to not have to loop, just print in ony line

1602690696
ifreund
for (slice) |x| std.log("{}", .{x});

1602690700
ifreund
that's one line

1602690705
ifreund
:P

1602690714
companion_cube
it's not very compositional :p

1602690739
ifreund
i agree that std.fmt.format() should probabably have a specifier for this

1602690748
ryuukk__
something like this

1602690753
ryuukk__
it prints the content

1602690783
ryuukk__
i think i broke their site lol

1602690783
companion_cube
502, ryuukk__

1602690794
companion_cube
has there been some thoughts about "derive" in zig?

1602690811
companion_cube
(could be a comptime `derivePrint(theTypeHere)` I suppose, expanding to code)

1602690822
ryuukk__


1602690822
ryuukk__
writeln(data);

1602690822
ryuukk__
auto data = [1, 2, 3];

1602690839
ryuukk__
it'll print: [1, 2, 3]

1602690895
ryuukk__
no it's not possible with zig?

1602690928
pixelherodev
it's certainly possible, even if it's not implemented in the standard library right now

1602690940
pixelherodev
i have an alternate logging function which does it

1602690971
ryuukk__
do you mind sharing it?

1602691018
pixelherodev


1602691022
ryuukk__
thanks

1602691153
ryuukk__
that should be supported out of the box in my opinion

1602691180
ryuukk__
in D you can print every structs

1602691189
ryuukk__
super useful

1602691199
pixelherodev
ryuukk__: the stage2 compiler is the current focus

1602691200
g-w1
since the switch is at compile time could you have a compile error if the type is not supported

1602691209
pixelherodev
g-w1: yes, but I didn't want to

1602691214
g-w1
ok

1602691219
g-w1
i was just checking that it is possible

1602691221
pixelherodev
You can do whatever you want with that code

1602691224
pixelherodev
:)

1602691283
companion_cube
do you think such a generic printer could have a (comptime?) table with type-specific printers in it?

1602691298
companion_cube
to say "this is the way of printing this particular struct" and yet play nice with the generic printer

1602691301
pixelherodev
Probably

1602691308
g-w1
where in the stage 2 compiler needs the most help/is understandable from a person who knows assembly but not that much about compilers? I want to help with it but dont know how.

1602691311
pixelherodev
Honestly, it could do reflection on structs if I really wanted to

1602691320
pixelherodev
g-w1: that'd probably be helpful for code generation

1602691341
pixelherodev
basically, given an abstract operation (add, jump, call, etc), it produces machine code for a given target

1602691356
g-w1
ok yeah. ill look at some of the code once llvm starts working again

1602691382
g-w1
would that be in codegen.zig?

1602691526
pixelherodev
yep

1602691558
g-w1
wow. it goes straight to hex. no assembly involved. thats pretty cool

1602691610
ifreund
yeah, gotta go fast

1602692626
ryuukk__
i adapted your code, and patched fmt.zig pixelherodev

1602692649
ryuukk__
std.log.info("Content: {v}, .{slice}); prints: info: Content: [1, 2, 3]

1602692673
ryuukk__
i think it could be a default, without having to use {v}, what do you think?

1602692680
ryuukk__
worth to send PR?

1602692845
FireFox317
g-w1, note that it would probably be nice to have an assembly like abstraction in there. Such that we can use the same code for inline assembly as for the codegen.

1602692916
g-w1
yeah that would be nice

1602692934
g-w1
is that a plan?

1602692935
FireFox317
For example this library can be integrated i think?

1602692953
FireFox317
I'm not sure that why I tagged the master himself :P

1602692991
pixelherodev
ryuukk__: worst that can possibly happen is it gets rejected

1602693267
ryuukk__


1602693270
FireFox317
The arm code is already doing that, so i think that is a good idea for x86 too

1602693280
ryuukk__
i have run the formatter, is that ok chance (the bottom,  comptime stuff)

1602693284
ryuukk__
change*

1602693307
ryuukk__
argh i have messed up again

1602693332
ryuukk__
it doesn't take the right rule for some reasons

1602693588
ryuukk__
ok, hopefully it's good now

1602693663
FireFox317
ryuukk__, did you check what happens when you pass in a string? :P

1602693695
FireFox317
Because we don't want the default to print a string as an array

1602693819
pixelherodev
FireFox317: their code is explicitly in the else branch of if u8

1602693946
FireFox317
pixelherodev, aah i see. Then default might be okay yes. But maybe we have to keep the length in mind then

1602694007
FireFox317
ryuukk__, we probably want to print it as an zig array instead?

1602694060
ryuukk__
{} instead of [] ?

1602694060
traviss
anyone in here using zls with emacs able to use goto definition? i think i have everything else working expect this. getting a long and mysterious error message.

1602694084
g-w1
goto definition only works half time for me in zls vim

1602694103
FireFox317
ryuukk__, yes for example. or maybe also add the type and length i dunno

1602694142
ifreund
goto definition isn't available for everything in zls yet, it can still hit cases it doen't know how to handle

1602694159
ifreund
it works pretty well for me in general though with kakoune

1602694188
ryuukk__
well the v means values, if want add .len, i think user has to be explicit,  std.log.info("L: {}, Content: {}, slice.len, slice)

1602694228
traviss
interesting. yeah goto def its pretty flawless from vscode. i guess i'll make an issue for the emacs error i'm getting.

1602694267
ifreund
yeah I'm guessing in your case emacs is at fault not zls

1602694341
traviss
ah, maybe an lsp-mode or lsp-ui error then. i can't even tell where the error is coming from.

1602694402
traviss
i'll try disabling things to narrow down and make an issue where appropriate. thx.

1602694745
FireFox317
ryuukk__, yeah true. Then {1,2,3} would be better than [1,2,3] i think

1602698862
g-w1
/quit

1602698869
pixelherodev
:P

1602698926
g-w1
my irc client is not working as you can see

1602699079
pixelherodev
What I saw was a /quit ;)

1602710849
bfredl
/ragequit

1602711351
ifreund
anyone have a good way of binding C enums used as bitfields?

1602711416
ifreund
just throwing some constants in a namespace is the only solution I see that doesn't require a ton of @enumToInt()

1602711980
ifreund
hmm, guess putting the constants inside a non exhaustive enum is better

1602714638
g-w1
where do the optimisations happen in the self-hosted compiler. are there multiple (at the ir level and at arch level)?

1602714724
ifreund
there are no real optimizations yet, as the self hosted compiler is not yet capable of compiling all zig code

1602714746
ifreund
that said, the codegen is not needlessly inefficient

1602716066
pixelherodev
Zig's optimization-less codegen is better than LLVM's optimization-less codegen, if I'm remembering an off-hand microbenchmark from a month ago correctly :P

1602716328
ifreund
not a super meaningful benchmark with how much zig we currently have implemented

1602716359
ifreund
however I'd not be at all surprised if that turns out to be the case in the end

1602717390
g-w1
Will the compiler eventually have them? I feel that they will be the hardest to impliment, just given the sheer number of them. Do you agree?

