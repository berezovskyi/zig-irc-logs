1599179855
andrewrk
what kind of application is it?

1599179876
andrewrk
that's generally the model that node.js gives you and I found it quite comfortable for many kinds of tasks

1599186183
pixelherodev
I see some nice work has been going on :)

1599186412
pixelherodev
I'm going to be offline for the next week or so, but I intend to have at least a couple CBE / SPU backend patches ready for review at that point

1599186416
pixelherodev
:)

1599188410
andrewrk
looking forward to it

1599188699
andrewrk
hmm I'm considering starting to ship stage2 along with stage1 hiding behind a subcommand like this: `zig stage2 build-exe hello.zig`

1599189156
andrewrk
the only reason not to would probably be slower stage1 compilation and binary bloat

1599189174
andrewrk
adding 3.5 MiB onto 119MiB hardly seems like an issue tho

1599189179
andrewrk
so really it would just be resource usage to build it

1599190526
companion_cube
is there a writeup of the general purpose allocator's design? or just livestreams?

1599190955
pixelherodev
andrewrk: personally, I think it's not worth it just yet

1599191019
andrewrk
companion_cube, check out the comments at the top of the file. also it's only a couple hundred lines of code

1599191106
pixelherodev
I think we should wait until at least it's somewhat usable for real projects to enable it properly, at which point it should be `zig stage2` (with associated functionality in build.zig, which I preemptively volunteer to handle), and once it's ready for general usage, it should become the default (with stage1 potentially remaining as `zig stage1` until all corner cases are handled)

1599191281
pixelherodev
For now, I think keeping it distinct makes sense. Until we have support for even basic projects (such that one can take 100 random Zig projects and have at least a dozen compiling for at least one backend), there's really no point in enabling it. It's not that it would cause problems, but that I don't see any real advantage to doing it now.

1599193479
companion_cube
andrewrk: 👍

1599194339
companion_cube
andrewrk: fun, the hashmap being used to keep track of allocations… in the allocator

1599197789
leeward
Looking at some recent changes to Allocator, I'm confused by ret_addr. Are allocators supposed to put their results in that address? And why is zero special instead of just making it a `?usize`?

1599197977
daurnimator
leeward: it's the instruction where the allocation should be considered to occur

1599198001
leeward
Why's it there?

1599198013
daurnimator
leeward: it's used to generate tracebacks for e.g. leaks

1599198018
leeward
ahh

1599198061
leeward
Seems like it should be an optional pointer to an instruction data type, instead of a usize that treats 0 as special.

1599198151
daurnimator
maybe. but it's intended to be used with `@returnAddress()`; so whatever proposal you have should be made for that too

1599198166
leeward
mm, I'll look into that

1599198179
leeward
had actual job work to do recently and stopped paying attention

1599198615
andrewrk
leeward, Allocator implementations can ignore that parameter

1599198648
leeward
Yeah, I gathered.

1599198662
andrewrk
it's pretty darn useful for GeneralPurposeAllocator tho

1599198691
leeward
I'd expect it to be useful for anything that wants to be able to point a finger at leaks.

1599198741
andrewrk
yeah the point is that it saves a few precious frames so that you can store less memory per trace. or rather a trace with N given frames will be more useful without all the Allocator interface & implementation noise in there

1599198919
leeward
That can probably be communicated better in the doc comments.

1599199143
andrewrk
agreed

1599199186
leeward
well, if nobody beats me to the punch I'll put together a proposal this weekend

1599199360
leeward
Huh, that's new. Trying to compile Zig on an arm64 system and X crashed.

1599199433
leeward
Ah, oomkiller

1599199435
leeward
naturally

1599199456
leeward
now to figure out how to add swap to this thing

1599201832
andrewrk
things are going to get a little bit worse before they get better

1599201839
andrewrk
but then they will get much, much better

1599203253
leeward
That is how these things go.

1599206562
DarkUranium
also, hey scientes :P

1599208478
ifreund
andrewrk: this is a fairly simple daemon + pam_module to implement the XDG_RUNTIME_DIR of the freedesktop spec

1599208543
ifreund
I've recently dropped elogind for

1599208575
ifreund
I don't really need async, but it makes the code much cleaner

1599214545
ikskuh
andrewrk: uuuuh nice #6250. I thought i misunderstood you yesterday, but it looks like we're really getting somewhere with stage 2 :)

1599215564
gonz_
ggVGc: `ggcG` works fine to do the same thing :D

1599216437
ifreund
%c in kakoune :P

1599216625
ggVGc
gonz_:

1599216685
ifreund
sounds like you really would like kakoune, feedback before action is what it's all about

1599216731
ggVGc
I'm too set in my ways to leave vim

1599216740
ggVGc
I can't even bring myself to neovim

1599216763
ggVGc
I think almost weekly about what will happen when Bram dies

1599216765
ifreund
I really love that you have a domain registered for this

1599216788
ggVGc
well, it happened a lot... so I started linking a gist, but then I felt it was time to shorten it

1599216800
ggVGc
and people don't respond well to link shorteners

1599216812
ggVGc
there's a factoid in #vim too...

1599216823
gonz_
ggVGc: Huh, I was actually considering adding something like "Though there's something cathartic about marking it before changing as well"

1599216823
ggVGc
(I didn't create it)_

1599216849
ggVGc
wish I had the timestamps for this chat log though. It's something like 10 years old now I believe

1599216857
ggVGc
and I miss bairui, wherever he is

1599217118
gonz_
I have a special interest in code golfing, to be fair. The feedback is a bit secondary to the concision of the golfed version.

1599217126
gonz_
s/code/vim

1599225890
KoljaKube
How could I accomplish this?

1599226122
ikskuh
i don't think it's possible

1599226128
ikskuh
execept when you use two different structs

1599228368
Cadey
how do i get more information from a zig error?

1599228388
Cadey
i'm trying to run a subprocess and i get error: FileNotFound

1599228398
Cadey
which file isn't found?

1599228462
Cadey
oh

1599228478
Cadey
it's because /dev isn't mounted yet

1599230586
KoljaKube
ikskuh: too bad, but thanks

1599234699
cr1901_modern
So if I understand the rules of comptime vars properly, the Zig compiler does something (loosely) like this >>

1599234732
cr1901_modern
If any vars in the current statement or expression are comptime, the zig compiler checks whether it can evaluate it now. If it can't, error out.

1599234750
cr1901_modern
Wait, no. That doesn't work

1599234761
cr1901_modern


1599234769
scientes
cr1901_modern, no that is right

1599234781
cr1901_modern
But that definition doesn't work for: result = cmd_fns[i].func(result);

1599234794
cr1901_modern
b/c "i" is a comptime var, but the expression doesn't error out

1599234797
scientes
they are not consts

1599234838
scientes
and that example is not valid syntax

1599234847
cr1901_modern
>they are not consts

1599234847
cr1901_modern
What is that in reference to?

1599234855
scientes
a comptime var is not a const

1599234859
cr1901_modern
(Sorry, I need to take this one part at a time :P)

1599234863
scientes
it can change, but it will never be runtime

1599234870
scientes
cr1901_modern, nah, just play with it

1599235069
cr1901_modern
>and that example is not valid syntax

1599235070
cr1901_modern
It works in my compiler

1599235355
cr1901_modern
I can do something even more absurd that compiles and then panic at runtime with unreachable:

1599235505
cr1901_modern
I guess the reason it doesn't error out is that "cmd_fns[i]"

1599236249
KoljaKube
cr1901_modern: If you want the whole expression to be evaluated at comptime, you can use a comptime {} block. It will error out if that's not possible. Otherwise only what is possible will be evaluated at comptime

1599236462
cr1901_modern
>Otherwise only what is possible will be evaluated at comptime

1599236462
cr1901_modern
So, what dictates whether evaluating an expression will error out if it's not comptime versus deferring to runtime?

1599236472
cr1901_modern
Whether the expression has a comptime var in it?

1599236505
cr1901_modern
In my above example "cmd_fns[i].func(result)" is multiple expressions w/o whitespace in between (I _think_)

1599236998
dec05eba
i see in the docs that @sizeOf(u24) returns 4 because of memory layout but is there any way to get 3 instead of 4? i have comptime T and i want to know what size the type passed is

1599237545
cren
I'm creating sockets with zig-network and not closing them

1599237551
cren
so now I can't use the same port number again

1599237581
cren
is there a way I can manually free up the socket outside of zig?

1599237602
cren
or free up the socket before trying to use it in the program.

1599237603
ifreund
if you're on linux, delete the files

1599237613
cren
ifreund: I am. Do you know where they get put?

1599237617
cren
is it under /dev?

1599237623
ifreund
wherever you put them?

1599237645
ifreund
oh wait these aren't unix sockets i suppose

1599237668
cren
I don't know :/ the library provides an abstraction layer for crossplatform sockets

1599237684
ifreund
try fuser(1)

1599238304
cren
will a `defer` run even if the program hits an error before the point where the defer should run?

1599238324
ifreund
yes

1599238330
ifreund
unless it's a panic

1599238336
cren
kernel panic?

1599238376
dec05eba
no a zig panic, which happens for example when you hit "unreachable"

1599238407
dec05eba
or when @panic is called

1599238409
cren
ahaha the problem was nothing to do with the socket, the problem was that the program itself tried to connect the same socket twice

1599238415
cren
dec05eba: ok

1599238418
ifreund
unreachable is only a panic in safety-checked builds

1599238549
cren
should I put tests in the same file as the program, or a different file? (I'm aware that this is mostly opinion-based)

1599239054
ifreund
depends on the nature of the tests imo

1599239094
ifreund
testing basic functionality of a data structure? same file. Testing input and output of a compiler? different file

1599239240
cren
that's kind of how I feel too ifreudn

1599239246
cren
s/ifreudn/ifreund

1599240063
cr1901_modern
andrewrk: So before I make a bug report... this compiles:

1599240078
cr1901_modern
Based on lang semantics, this should

1599240122
dec05eba
you mean empty struct?

1599240130
ifreund
why not?

1599240211
cr1901_modern
because comptime { var i = start; } and start is not comptime

1599240296
cr1901_modern
On the other hand, this does NOT compile:

1599240585
ifreund
it is comtime

1599240602
ifreund
'5' is comptime known

1599240620
ifreund
try passing std.os.argv[0][0] or something

1599240655
ifreund
what error do you get for the second?

1599240666
cr1901_modern
./comptime-test.zig:3:17: error: cannot store runtime value in compile time variable

1599240666
cr1901_modern
var i = start;

1599240744
cr1901_modern
which is what I expect because I didn't declare start as comptime, thus zig can't assume all uses of KeyPad are comptime

1599240893
ifreund
no, but it's lazy

1599240925
cr1901_modern
I don't understand what that means... anyways should both the examples I link compile or not?

1599240933
ifreund
by my understanding it should let you do that as long as the value you pass to KeyPad is comptime known

1599240972
cr1901_modern
Then why do you need comptime in the function declaration if the compiler can determine that info for you?

1599241048
ifreund
by "lazy" I mean that the compiler doesn't assume that all uses of KeyPad are comptime, it just checks if it can compile it in the cases where it's actually used

1599241093
cr1901_modern
Then my second link should have compiled then, but didn't

1599241118
ifreund
well, stage1 is far from perfect

1599241153
ifreund
and we can't really know the answer as to which example is right without a language spec, which is coming before 1.0

1599241179
cr1901_modern
So back to my original question, which example is miscompiling? Are the semantics for the two examples I presented effectively "undecided"?

1599241190
cr1901_modern
Meaning either/or can work, and stop working at any point?

1599241221
cr1901_modern
Which is fine! I just want to not be confused on how comptime vars interact with non comptime vars :P.

1599241339
ifreund
I'm not 100% sure what the intended behaviour is, though my gut says that the second should be fine if you only ever pass comptime known values to the function

1599241421
ifreund
My advice would be to place your focus on building useful software and contribute to zig/report issues found along the way.

1599241436
ifreund
zig is still pre-1.0 and there will be breaking changes

1599241467
cr1901_modern
Well I was going to open an issue :P

1599241487
cr1901_modern
Building useful software? Unfortunately, Idk how much doing old Advent of Code counts.

1599241603
ifreund
heh

1599241648
ifreund
advent of code is fun, but not code your're likely ever going to run again after you solve the puzzles

1599241708
cr1901_modern
I use it as a quick way to get up to speed w/ languages when I can't think of anything else I want to implement myself (that wouldn't require me to already have a decent grasp on the language)

1599241768
ifreund
well, with zig I just kinda jumped in and wrote a wayland compositor as my first project

1599241799
ifreund
you can't reall do that with many languages though, zig is special in that if you know C well you can be productive in a matter of days

1599241933
leeward
I think Zig took the least effort up front of any language I've learned in the last few years, but part of that is probably that Zig doesn't have any features I haven't encountered somewhere else.

1599241966
ifreund
leeward: what else has comptime?

1599241997
KoljaKube
Do C++ templates count? ;-)

1599242005
leeward
D's metaprogramming is similar.

1599242015
leeward
C++ templates do not count3.

1599242134
ifreund
D kinda repulsed me with it's kitchen-sink-ness, never did write any

1599242163
fengb
I wouldn’t say comptime is a new concept as much as a good implementation

1599242201
fengb
Returning types and stuff already exists. The seamlessness of switching contexts makes it novel, but not too hard to learn

1599242230
ifreund
yeah that's kinda the point of it as a feature over macros, same basic semantics

1599242753
KoljaKube
Can I use @Type(.Opaque) instead of c_void or am I missing the point?

1599242939
KoljaKube
Seems to work for pointers, but not for function return values

1599242974
fengb
You can’t return non pointers because memory is unknown. It’s akin to a forward declared struct in

1599242976
fengb
C

1599243026
KoljaKube
I'm trying to assign a `?fn() callconv(.C)

1599243053
fengb
That’s not right. Use a *c_void

1599243083
KoljaKube
Assigning a `@Type(.Opaque)` to a `void*` struct member works fine

1599243096
KoljaKube
s/@/*@/

1599243153
fengb
Opaque behaves similar to a “struct Bodiless;” declaration in C

1599243189
fengb
So any time the types don’t work in C, it also won’t work in Zig

1599243240
KoljaKube
What the pointers actually should point to is something not available at compile time

1599243280
KoljaKube
I thought I could use the Opaque pointers to differentiate the various actual types on the zig side

1599243284
KoljaKube
Am I mistaken there?

1599243321
fengb
You can, but the C function pointer expects a void* return

1599243337
KoljaKube
Would that be OK to cast?

1599243342
fengb
Changing that return value isn’t considered safe due

1599243355
fengb
Probably a manual cast is safe

1599243388
KoljaKube
OK, good

1599243406
KoljaKube
I guess I'll find out should I ever actually use the other rendering backends

1599243421
KoljaKube
OpenGL does not need any of that stuff :D

1599244527
leeward
ifreund: I stopped paying attention to D when D2 became a thing. I stopped being able to tell what made it better than C++, and C++ is below my threshold for languages I want to use.

1599244675
leeward
My favorite feature from D is in Zig though, in the form of defer.

1599248223
cr1901_modern
Unlike variables, the only way to make the variables in a for/while loop comptime is by using a comptime expr?

1599248242
cr1901_modern
e.g. for(foo) |comptime bar| {} will

1599248298
Nypsie[m]
You can use `inline for` or `inline while` for that use case

1599248307
leeward
I believe inline for helps there.

1599248317
cr1901_modern
oops :P

1599248339
cr1901_modern
so comptime expr converts while to inline while and for to inline for?

1599248431
Nypsie[m]
Sorry, I don't follow the question

1599248468
Nypsie[m]
You mean comptime {  for .... }  is automatically converted to `inline for`? Because I'm not sure about that actually

1599248485
cr1901_modern
"inline for(foo) |bar| {}" is equivalent to "comptime { for(foo)|bar| {} }"

1599248488
cr1901_modern
Ahhh

1599248514
cr1901_modern
I only care b/c I'm trying to duplicate an error I saw, but only when "comptime {}" block was present wrapping the whole thing

1599248534
cr1901_modern


1599248549
Nypsie[m]
Big chance you'll have to explicity put comptime in front of some variables to make them work within the comptime {} block

1599248597
cr1901_modern
Docs say: "Within a comptime expression: All variables are comptime variables."

1599248606
cr1901_modern
Is this no longer correct?

1599248607
fengb
comptime { forces everything in that block to be comptime

1599248615
Nypsie[m]
Aaah ok

1599248621
fengb
inline for only unrolls they looping part

1599248625
Nypsie[m]
Aaah wasn't it you have explicitly set the type for Strings or something?

1599248639
Nypsie[m]
s/have/have to

1599248657
Nypsie[m]
Oh well, I'm a comptime rookie :P

1599248667
cr1901_modern
comptime is kicking my ass

1599248700
Nypsie[m]
There's some great info about it here:

1599248887
leeward
Also worth noting: comptime is not in its final implementation. The current one is held together with bailing wire and elmer's school glue.

1599249152
cr1901_modern
which is fine. But it doesn't help me get less confused about why certain code is working and why certain code isn't

1599249364
cr1901_modern
Just so I can come back to this later... this compiles:

1599249404
cr1901_modern


1599249405
cr1901_modern
inline while (it.next()) |row| {)

1599262259
cr1901_modern
I suppose the answer is "you don't", but how do you emit llvm-ir for a test?

