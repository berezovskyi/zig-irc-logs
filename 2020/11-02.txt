1604275263
Kena
Allright :)

1604275367
Kena
I was trying to understand the concept of pointer since it is the mechanic slice's under the hood.

1604318212
dominikh
is there a way to branch on whether a value is compile-time known or not? e.g. could one implement a std.fmt.format that worked with both constant format strings and dynamic format strings by emitting different code for the two cases?

1604318713
ifreund
there's a reason the string must be comptime known, I don't think there's a way to implement a version taking a runtime known format string

1604318785
dominikh
how so? the type of the tuple and the number of elements is still comptime known, isn't it? which should allow guarding against an incorrect number of {}

1604318811
dominikh
(and invalid arguments to format specifiers)

1604318825
g-w1
It would be runtime error instead of compile time right?

1604318855
dominikh
that's my idea, yes

1604318881
dominikh
it's very possible I'm missing something obvious here

1604319212
daurnimator
dominikh: yeah you probably could.... might be worth trying

1604319232
daurnimator
dominikh: main problem you'd hit is indexing args. tuple indexes need to be comptime known

1604319264
dominikh
ahâ€¦

1604319340
ifreund
yeah, you can only loop over a tuple at comptime since the fields are hetrogenous

1604319367
daurnimator
you'd just have to work around it

1604319389
daurnimator
e.g. `inline for (args) |a,i| if (i==wanted) dothing(a);`

1604319397
daurnimator
which is expensive.... but would work.

1604319413
dominikh
wouldn't that require wanted to be comptime known?

1604319421
daurnimator
no

1604319526
ifreund
yeah, that is quite code-bloaty

1604319537
dominikh
couldn't one create a lookup table of index to bit offset in the tuple?

1604319579
ifreund
structs don't have a well defined memory layout and that assumes tuples I assume

1604319585
ifreund
maybe packed tuples are a thing

1604319621
dominikh
but @bitOffsetOf does exist and operates on structs, right? they don't have a well-defined memory layout, but the compiler does know the layout

1604319672
dominikh
it won't change from one execution to the next

1604319716
ifreund
nice

1604319842
Xavi92
Just after compiling llvm release/v11.x, I'm surprised now zig complains about llvm version:

1604319918
dutchie
how did you rebuild zig? you need to update the buildInputs as well as the makeDerivation call

1604319927
dutchie
(that's what tripped me up the first time)

1604319998
Xavi92
dutchie: I have removed the whole build folder generated by CMake and started from scratch by running `cmake ..`

1604320017
dutchie
wait why did i think you were using nix

1604320023
Xavi92
Well, it's not generated by CMake, but files generated by CMake end up there

1604320032
Xavi92
dutchie: I am using Kubuntu 20.04 LTS

1604320036
dutchie
ok ignore me then i don't know what's going on

1604320078
Xavi92
dutchie: thanks for your help anyway :)

1604321256
Xavi92
dutchie: did a quick workaround by adding the path where my llvm toolchain is located on cmake/Findllvm.cmake, cmake/Findlld.cmake and cmake/Findclang.cmake, as well as removing the version check

1604321316
Xavi92
Now zig compiles, but does not link:

1604327840
ifreund
uh, why did we get rid of std.fmt.trim()?

1604327865
ifreund
std.mem.trim() is not a direct replacement, I don't want to have to pass a list of whitespace characters everywhere

1604328040
ifreund
and there is no std.mem.isWhitespace

1604328231
dutchie
i used std.ascii.isSpace last time i needed it

1604328529
ifreund
I wouldn't expect that to include \n and \t?

1604328548
dutchie
i'm not sure how to parse the tables that it uses

1604328559
dutchie
there is also isBlank which just checks against '0' and '\n'

1604328614
dominikh
I would expect isSpace to roughly match C's isspace. space tends to mean both vertical and horizontal space, so \n and \t and space and what else there is

1604328633
dutchie
anecdotally i think it stripped space and \n

1604328727
dominikh
the Space table has 6 entries, which fits. the table is probably just the first 128 characters in ASCII

1604328953
ifreund
cool, isSpace returns true for everything I want

1604328982
dominikh
the trick is returning false for the things you don't want ;)

1604328985
ifreund
but I can't pass that directly to mem.trim() as that wants an array of values to trim

1604330571
dutchie
hmm, am i completely missing the point here, or would it be useful to have a reset method on ArenaAllocator?

1604330587
dutchie
let's say i have a worker function that runs a loop which takes roughly constant space each iteration

1604330611
dutchie
in that function i spawn an arena, reset it each iter, and then deinit it when i return

1604330631
dutchie
at the moment i have to create a completely new arena each loop and i can't reuse the blocks that arena allocates

1604330648
dutchie
FixedBufferAllocator has a reset

1604335180
ifreund
having a reset for ArenaAllocator would make the code a lot more complex

1604335319
ifreund
dutchie: you could use a StackFallbackAllocator with an arena as a fallback

1604336290
dutchie
hmm, that's probably overkill for this tbh

1604336338
dutchie
i guess i don't understand the guts of ArenaAllocator, i thought it'd just be a matter of resetting a pointer

1604336397
ifreund
nah, it owns multiple allocations

1604336481
ifreund
reset is definetly possible to implement, but it would complicate things and I don't know if it would be worth it or not

1604340677
FireFox317
andrewrk, i'm working on clashos, and for clashos we run the emulator in one terminal window with `zig build qemu` and in another window we are suppose to `zig build upload` to upload a new binary. However now with the new cache architecture, the `zig build upload` hangs and a backtrace shows that is blocking on `std.os.flock`. What is the behaviour we want?

1604340759
andrewrk
ah, interesting

1604340864
andrewrk
the first thing I want to check is if it would make sense to make this just work

1604340911
FireFox317
andrewrk, here is a backtrace btw:

1604340944
FireFox317
For some reason it is keeping the file locked, but i dont think it has to stay locked?

1604340957
andrewrk
yeah that sounds right. I think for `zig run` we should be able to unlock everything except the executable

1604340983
andrewrk
hmm probably the reasoning for keeping it locked would be for stack traces

1604341059
andrewrk
ifreund, tests pass locally for #6931?

1604341073
andrewrk
(just a native execution of std lib would be fine IMO)

1604341098
ifreund
andrewrk: i ran zig test on std/ascii.zig which passed

1604341101
andrewrk
good enough

1604341104
ifreund
didn't touch anything else :)

1604341107
andrewrk
ready for merge?

1604341193
andrewrk
FireFox317, I think it would be worthwhile to explore releasing all locks for zig run

1604341565
FireFox317
andrewrk, yeah that makes sense. However in this case i run `zig build qemu` which runs qemu as a system command and i wouldn't expect that that holds some locks, but apparantly it does?

1604341578
FireFox317
I will make a GH issue, this is not something that has to be solved before 0.7.0 anyway

1604341591
g-w1
what build_runner.zig it gets generated sometimes when I do zig build? is it supposed to be a temporary file to run the build?

1604341613
andrewrk
g-w1, build_runner.zig is main() that calls your build()

1604341639
g-w1
thanks. is it supposed to be removed, or should I add to gitignore?

1604341810
alexnask[m]
Are you using zls by any chance?

1604341811
alexnask[m]
If yes then its prpbably its fault :P

1604341813
alexnask[m]
I should try making this better with the new cli, i had to copy paste it to run it with the old caching system because of a bug

1604341841
g-w1
ok yeah. im using zls

1604341943
andrewrk
FireFox317, I always appreciate your QA before the release :D

1604341988
FireFox317
andrewrk, you are welcome :)

1604342001
GrooveStomp
Hello! I'm getting a compile error trying to import openssl/ssl.h: 'pub const SSL_Library_init = @compileError("unable to translate C expr: expected identifier");'

1604342009
GrooveStomp
No doubt I have completely missed something.

1604342029
GrooveStomp
I threw a small sample up at:

1604342126
GrooveStomp
Zig 0.6.0.

1604342222
FireFox317
GrooveStomp, you should try with master too. The translate-c code has been improved a lot in this release.

1604342324
Xavi92
Hi, I'm compiling latest zig with llvm release/v11.x and a couple of patches and I am getting the following link-time errors:

1604342357
GrooveStomp
I did "snap refresh --classic zig --edge" and my version is now "0.6.0+909aae815"; that should be good, right?  That seems to correlate with the last commit yesterday.  I get the same compilation error, though.

1604342523
alexnask[m]
Ssl library init looks like a pretty trivial macro, but its a function like macro with no args, maybe this is the bug (cant try it atm)

1604342556
andrewrk
Xavi92, liblld is not getting linked, could the patches have to do with that?

1604343354
GrooveStomp
alexnask you are correct. If I call c.OPENSSL_init_ssl(0, null); then it succeeds.

1604343390
FireFox317
andrewrk, it looks like g-w1 just made a similar issue on GH (#6939)

1604343483
g-w1
oh, I thought this was related, but then realized it was zig run instead. Are the generated files lock not being removed?

1604343555
FireFox317
g-w1, i get the same problem (as described above) when i do `zig build run` in one terminal and then `zig build another` (which also does a run) in another window.

1604343572
FireFox317
It looks like the locks are indeed not removed.

1604344998
Xavi92
andrewrk: these are the patches that I used:

1604345063
andrewrk
Xavi92, looks fine. next thing I would do is check the linker line and make sure the 3 lld libs are there

1604345191
Xavi92
andrewrk: I have compiled clang and friends into $HOME/llvm-11-zig, and CMake would not configure zig unless I modified Findllvm.cmake, Findclang.cmake and Findlld.cmake. Apparently, those scripts only look in /usr and /usr/local

1604345206
Xavi92
andrewrk: is `cmake ..` enough to configure zig?

1604345254
andrewrk
generally, yes. some systems have "weird" things that you have to work around

1604345306
andrewrk
Xavi92, check these instructions:

1604345311
andrewrk
you want -DCMAKE_INSTALL_PREFIX

1604345318
andrewrk
oops I mean -DCMAKE_PREFIX_PATH

1604346238
Xavi92
andrewrk: I had already tried setting -DCMAKE_PREFIX_PATH, but it returns the following error:

1604346393
Xavi92
andrewrk: which is kinda funny since 11.X should allow 11.0.1, right?

1604348111
andrewrk
Xavi92, I just fixed that an hour ago in b30a765b95cf666409c1e53

1604348117
andrewrk
it was a typo when updating from 10 to 11

1604348190
Xavi92
andrewrk: thanks!!

1604348233
andrewrk
sorry for the trouble

1604348372
Xavi92
np

1604348867
Xavi92
Now it compiles and links successfully :)

1604348926
Xavi92
Has --c-source been deprecated?

1604348977
FireFox317
Xavi92, yeah you are just suppose to pass c files to zig now and it will figure out if they are c files or not (by looking at the extension)

1604349172
Xavi92
FireFox317: I see, thanks!

1604349389
Xavi92
FireFox317: what about --linker-script, BTW? Just removing it returns "error: unrecognized file extension of parameter"

1604349422
Xavi92
Otherwise, it returns "error: unrecognized parameter: '--linker-script'"

1604349484
FireFox317
Xavi92, apparantly changed to:   `-T[script], --script [script]  Use a custom linker script`

1604349485
andrewrk
we now match clang's option for linker scripts

1604349620
Xavi92
FireFox317, andrewrk: makes sense, thanks again

1604349636
Xavi92
`zig --help` did not show that option, so forgive me for asking so mcuh

1604349771
g-w1
I think you need zig build-exe --help

1604351896
Xavi92
g-w1: thanks!

1604351946
g-w1
np

1604353601
Xavi92
Hrm, my project used to build on llvm-10 and older versions of zig, but now segfaults on latest zig+llvm-11:

1604353777
Xavi92
As shown, I am compiling a bunch of assembly files using mipsel-unknown-elf-as (used to work well with the older toolchain). Instead, if I add those assembly files into zig, the assembler does not recognize a valid MIPS I instruction:

1604353834
andrewrk
Xavi92, did you send the right paste? this is a link error not a segfault

1604353901
Xavi92
andrewrk: the paste reads "make:

1604353916
andrewrk
the interesting bits are the lld: error: lines

1604353936
andrewrk
unfortunately this may be something that has to be fixed in LLVM. one thing you can double check is what CPU features you are targeting

1604354101
Xavi92
andrewrk: I guess "-target mipsel-freestanding-none --single-threaded -mcpu mips1+soft_float" are the target CPU features, right?

1604354115
andrewrk
yes

1604354123
andrewrk
specifically mips1+soft_float

1604354147
Xavi92
I'm targetting the MIPS R3000A on the original Sony PlayStation

1604354170
Xavi92
mips1+soft_float worked on previous versions of zig - can't tell whether a breaking change was recently introduced

1604354402
andrewrk
Xavi92, unfortunately I think the next step here is to file an LLD bug repuort. The good news is that it's quite active, especially for ELF stuff

1604354445
Xavi92
andrewrk: still, thanks a lot for your help :)

1604354503
andrewrk
given that it is a regression from lld 10, it is likely we could see a fix in lld 11.0.2

1604354685
Xavi92
User self-registration is no longer allowed on

1604354693
Xavi92
s/here/there

1604355297
GrooveStomp
How do I specify that I want to link with a system library?  I'm trying LibExeObjStep.addLibPath and LibExeObjStep.linkSystemLibrary; but I'm getting undefined symbols.

1604356443
ifreund
are you sure you're linking the right library?

1604356452
ifreund
linkSystemLibrary() is what you want

1604356464
ifreund
don't forget to linkLibC() as well

1604356472
ifreund
GrooveStomp: ^

1604356505
GrooveStomp
linkLibC()? I'm doing linkSystemLibrary("c"); is this wrong?

1604356607
GrooveStomp
I'm trying to link libssl. With "ldconfig -p | grep ssl" I see a bunch of options. "/lib/x86_64-linux-gnu/libssl.a" is there; so I'm trying that.  exe.addLibPath("/lib/x86_64-linux-gnu"); exe.addSystemLibrary("ssl");

1604357048
ifreund
linkLibC() just calls linkSystemLibrary("c") iirc

1604357092
ifreund
I've never needed to use addLibPath(), addIncludeDir() has been enough

1604357125
ifreund
are the missing symbols from libssl or something else?

1604357147
GrooveStomp
They're from libssl.  Well, I

1604357264
GrooveStomp
Ah, missing libcrypto

1604357275
GrooveStomp
Thanks for your help again ifreund!

1604357284
ifreund
no problem!

1604357745
andrewrk
it would be nice if C header files told you which library a given function is supposed to be in

1604357826
ifreund
sure would :P

1604357999
Kena
Are the test blocks ignored at compilation for release builds?

1604358644
GrooveStomp
Is there a way to do a negative optional check? Like: if (!optional_foo) { return Error.Foo; }

1604358707
jayschwa
if (optional_foo == null) return error.Foo;

1604358796
GrooveStomp
Ah, great, thanks jayschwa!

1604358888
jayschwa
GrooveStomp, if you immediately "unwrap" the optional after that, an alternative is const foo = optional_foo orelse return error.Foo.

1604358933
GrooveStomp
I suppose that's more idiomatic than repeatedly unwrapping it at every use?

1604359317
daurnimator
andrewrk: if only there was an answer to that..... POSIX might say one thing; glibc might say another; musl puts them all into one....

