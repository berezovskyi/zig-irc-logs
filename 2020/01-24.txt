1579824006
akavel
why is it trying to link?

1579824022
andrewrk
it's not linking libc

1579824065
andrewrk
your application probably does not link against your dll

1579824082
akavel
I'm still trying to only build the foo.dll

1579824129
andrewrk
your dll needs to link libc and lua

1579824138
akavel
ouch :(

1579824146
andrewrk
is that unexpected?

1579824175
akavel
I dunno, last time I did it very long ago

1579824187
andrewrk
can you post your full build.zig file in a paste

1579824193
andrewrk
in a paste site

1579824204
akavel
sure, sec

1579824236
akavel


1579824248
akavel
I kinda hoped just .h files would be enough

1579824312
andrewrk
unfortunately that's not how C works. why are you adding . as an include dir? is lua copied into your project's tree?

1579824318
akavel
yep

1579824346
andrewrk
ok you probably want zig to build lua for you then, so you'll need to add that to the build script first, then you can do lib.linkLibrary(lua)

1579824357
andrewrk
that might be what daurnimator's script does, I didn't look

1579824370
akavel
I mean, I only copied lua.h and lauxlib.h into my project

1579824391
andrewrk
in this case, how were you expecting your project to find the actual lua library files?

1579824420
andrewrk
that's not a rhetorical question, it's something you must ask so that other people (or yourself later) know how to build your project

1579824431
akavel
as I said, I kinda thought .h files would be enough for building a dll, and then lua.exe would be able to use such a dll

1579824490
andrewrk
you either need to have your project depend on lua being installed on the system, or you need to vendor it as part of your project. when zig has a package manager, then it could be gracefully solved with a package

1579824490
akavel
I'm kinda having some flashes of memory that maybe there was some kind of .def files, that were used in place of .dlls as dependencies

1579824540
andrewrk
lua has to exist somewhere. it has to either be installed or you have to provide it with your project. this is a fundamental property of nature, independent from any programming language

1579824564
daurnimator
FWIW you shouldn't actually link against lua

1579824579
daurnimator
the symbols are provided by the interpreter/host application

1579824600
andrewrk
it's a header-only library?

1579824614
andrewrk
that wasn't the case when I looked at it

1579824620
daurnimator
andrewrk: no. the host application provides symbols to be used by a lua module

1579824641
daurnimator
--> the host application links against lua; lua libraries shouldn't.

1579824699
akavel
kinda "reverse linking"

1579824713
akavel
or "reverse dependency"

1579824732
andrewrk
you can't have a dll that depends on a library that isn't linked

1579824751
andrewrk
you can have a .lib though

1579824757
daurnimator
andrewrk: sure you can

1579824782
daurnimator
the dynamic loader resolves it for a dynamic library

1579824825
mq32
these ring-dependencies are pretty common for shared-object plugins

1579824831
mq32
both in linux and windows world

1579824842
andrewrk
I see

1579824870
andrewrk
I guess that's a missing build.zig api then, allowing undefined symbols in the linker

1579824889
akavel
oh, crap

1579824950
mq32


1579824959
mq32
this stackoverflow topic explains the pattern quite well

1579825045
andrewrk
thanks

1579825180
fengb
Quite philosophical: "lua has to exist somewhere. [...] this is a fundamental property of nature"

1579825215
akavel
:D

1579825232
akavel
The Law of Lua

1579825296
akavel
Kelley's Law of Lua Conservation?

1579826115
mikdusan
andrew: context:

1579826205
mikdusan
if we allow arbitrary alignment (non-power2) host integers, why do we even need host integers? deduce load size from alignment and field bits ?

1579826473
mikdusan
I think I'll make a table to grok these rules

1579831470
AndroidKitKat
really dumb question, i'm getting an error when im trying to build-exe from latest head

1579831474
AndroidKitKat
"Unable to open /Users/meiseman/Library/Application Support/zig/stage1/native_libc.txt.tmp: No such file or directory"

1579831488
AndroidKitKat
this just a simple hello world am im not sure

1579831609
andrewrk
not a dumb question. mikdusan, looks like the new native_libc.txt cache code needs to ensure the directory exists

1579831620
andrewrk
I'll be happy to help with the packed struct thing in ab it

1579831685
AndroidKitKat
should i just mkdir the folder?

1579831688
mikdusan
AndroidKitKat: sounds related to a recent change I made; you are on macos?

1579831694
AndroidKitKat
I am on macOS

1579831695
mikdusan
AndroidKitKat: wait a moment. I'd like to reproduce

1579831718
AndroidKitKat
thanks

1579831741
mikdusan
AndroidKitKat: can you paste the zig command line?

1579831756
AndroidKitKat
wdym?

1579831758
AndroidKitKat
zig version?

1579831778
AndroidKitKat
0.5.0+357f42d

1579831786
mikdusan
`zig build-exe hello.zig` <-- anything other args?

1579831792
AndroidKitKat
no

1579831800
AndroidKitKat
`zig build-exe ../asdf.zig`

1579831821
mikdusan
`which zig`

1579831861
AndroidKitKat
//usr/local/bin/zig

1579831876
AndroidKitKat
i did --HEAD when installing with brew

1579831890
AndroidKitKat
but I also confirmed it doesn't work with the binary from the website

1579831922
mikdusan
ok let me try a few variations

1579831925
AndroidKitKat
thanks

1579832006
mikdusan
waat. it fails for me. I can't believe I didn't test this

1579832031
AndroidKitKat
f

1579832138
mikdusan
AndroidKitKat: ok I'll work on a fix. in the meantim just create the dir all the way up to and including stage1/

1579832166
andrewrk
mikdusan, another workaround would be zig build-exe hello.zig -target x86_64-linux-gnu

1579832174
andrewrk
cross compiling would init the cache :)

1579832230
AndroidKitKat
that'd do it chief

1579832284
student069
thanks o7 I was having the same issue

1579832359
pixelherodev
`<mq32> these ring-dependencies are pretty common for shared-object plugins` can confirm

1579832367
pixelherodev
Literally using one in Zig at the moment

1579832376
pixelherodev
Works w/o issue as is, even with unknown symbols though

1579832389
pixelherodev
But I'm not using build.zig

1579832399
pixelherodev
I'm using `zig build-lib`, so that might be why

1579832573
fengb
Would a Trie be useful in stdlib?

1579832577
pixelherodev
A what?

1579832601
fengb


1579832697
shachaf
How much prefix tree code is there that you don't just write at the use site anyway? It's a very transparent data structure.

1579832727
shachaf
Maybe something like a radix tree is useful to have in some library.

1579833109
daurnimator
fengb: in practice tries are inefficient

1579833122
daurnimator
fengb: we do need a btree though; and a radix tree.

1579833144
daurnimator
and a radix tree can be a type of trie

1579833150
fengb
I actually realized bsearching an array would be smaller and faster for me >_>

1579833156
shachaf
Hmm, what sort of B-tree thing are you after?

1579833194
shachaf
I wrote a B+ tree implementation in C recently for u64->u64 maps, and it's faster than anything I've benchmarked it against.

1579833221
daurnimator
shachaf: hmm. I wanted one for some reason a couple of months ago. can't remember off the top of my head now

1579833229
shachaf
(absl::btree_map, Rust btree_map, etc.)

1579833236
daurnimator
FWIW I wanted the radix tree for a general purpose allocator.

1579833264
daurnimator
--> given a pointer (and possibly a length): look up the allocation metadata

1579833302
shachaf
Why not a hash table or something, if it's just point queries?

1579833372
fengb
Hmm is that just a compacting trie?

1579833423
shachaf
Anyway if there was some interest I could port my thing to Zig maybe.

1579833453
student069
could someone point me to example code for reading a file in zig?

1579833479
daurnimator
shachaf: one reason I had was that I wanted to be able to pass an address in the middle of an allocation; and find out about what it belonged to

1579833498
shachaf
Ah, so not just point queries. Makes sense.

1579833535
shachaf
I bet a B+ tree thing would be way better for that sort of thing, though.

1579833541
daurnimator
student069: read a file as a whole? line-by-line? how did you want to read it?

1579833552
daurnimator
shachaf: not really. radix trees are the perfect data structure for it

1579833559
student069
Line by line is what im looking for

1579833579
shachaf
Actually, hmm, you could write a special-case B+ tree for storing intervals which would be more regular than the usual kind.

1579833605
daurnimator
shachaf: I also want to write a maple tree implementation in zig :P but first things first

1579833608
shachaf
daurnimator: I stand by my bet.

1579833655
pixelherodev
What I've gotten out of the last few minutes of the chat: I really need to get some more experience with data structures :P

1579833712
fengb
The only thing I know about B trees is that they're everywhere in file systems and databases >_>

1579833768
shachaf
That's because they're the best.

1579833782
shachaf


1579833786
pixelherodev
What are B - never mind, imped

1579833804
daurnimator
student069: hmmm. there's io.readLineFrom.... but I don't like it already

1579833842
pixelherodev
readUntilDelimiterOrEof

1579833850
pixelherodev
That's what I'm using for the LLVM parser

1579833857
pixelherodev
Though I'm actually using a slightly modified version

1579833871
daurnimator
pixelherodev: ah yeah that would work for student069

1579833881
student069
oh neat

1579833883
pixelherodev
I didn't want to tweak ~~the stdlib~~ zag at the time so I just did it in the parser source

1579833893
pixelherodev
Yeah, just pass `\n' as the delimiter

1579833926
pixelherodev
I'd suggest finding the source for it and reimplementing a local version that can check for multiple delimiters, or manually stripping off any `\r`s found at the end of lines

1579833928
daurnimator
student069: so yeah; get dir -> open file -> get reference to file's stream field -> call `readUntilDelimiterOrEof` with '\n'

1579833949
daurnimator
student069: you will probably want to wrap it in a buffered reader too

1579833949
student069
tyvm pixelherodev & daurnimator

1579833951
pixelherodev
I'll probably submit a PR opening a version that requires a comptime delimiter

1579833954
pixelherodev
No problem!

1579833959
student069
This is pretty neat to see, having just taken a compilers class last semester

1579833961
pixelherodev
s/comptime delimiter/comptime array of delimiters

1579833979
fengb
I feel like such an old fart

1579833982
pixelherodev
Should allow for the same performance as manually checking each delimiter

1579833985
pixelherodev
fengb, why?

1579833993
shachaf
I should flesh that text out a little more and post it somewhere probably, I think the usual explanation is much more complicated.

1579834061
fengb
Cause apparently everyone in here is gen z >_>

1579834115
daurnimator
What's gen z? >.<

1579834126
student069
1998->

1579834127
student069
ish

1579834134
daurnimator
I thought that was millenials

1579834148
student069
you would think that

1579834206
fengb
Millennial is ~1980-96

1579834219
Snektron
I got ninjad

1579834219
AndroidKitKat
Gen Z skrrt skrrt

1579834235
fengb
But we're still apparently teenagers who'll ruin the world

1579834236
daurnimator
fengb: I thought that was Gen Y?

1579834241
Snektron
Fengb, how old are you?

1579834250
fengb
35

1579834259
fengb
Millennial is the new term for gen y lol

1579834327
Snektron
About the B trees

1579834348
Snektron
It seems to me like a memory efficient alternative to hash maps for associative types

1579834385
Snektron
On tries, i read julia tries are quite efficient

1579834387
shachaf
Hash tables are certainly going to do better when you don't need ordering.

1579834391
daurnimator
Snektron: b trees preserve order; so things next to each other stay next to each other

1579834412
Snektron
Oh i forgot to type:

1579834440
Snektron
B trees can be memory efficient when used together with an arena allocator

1579834442
Snektron
Which is not the case for hash maps

1579834506
daurnimator
Someone could probably port

1579834511
Snektron
You can even make each node the size of a page or cache line , that'll probably be quite nice

1579834529
Snektron
But i dont have too much experience with B trees

1579834537
Snektron
Octrees, thats where its at

1579834593
shachaf
If you have fixed-size data like u64 keys I'd be kind of surprised if radix trees can actually beat B+ trees for just about any workload.

1579834834
daurnimator
shachaf: so can you send a B+tree implemenation to the zig standard library? :)

1579834866
Snektron
Oh wait, they werent called julia tries but judy arrays

1579834873
Snektron
How did i make that mistake

1579834928
shachaf
I benchmarked Judy arrays (u64 keys) and they were really slow.

1579835016
shachaf
daurnimator: Maybe!

1579835512
BaroqueLarouche
Done with the Zig code part for the binary/raw objcopy-like code:

1579835625
BaroqueLarouche
Now to integrate it in stage1 zig code and call it properly from C++ after the link phase

1579836151
student069
lol daurnimator i just saw your zig advent of code while searching around online

1579836236
daurnimator
student069: oh? I only did like the first 5 days

1579836245
daurnimator
ran out of time after that >.<

1579836256
student069
something must've clicked in the SEO when i searched a certain function haha

1579836426
fengb


1579836515
daurnimator
fengb: yes... why are you even looking at that? >.<

1579836545
fengb
I troll the nets

1579836555
daurnimator
trawl?

1579836630
Snektron
I did all the AOC days in Zig

1579836641
Snektron
Also some other challenge by the same guy

1579836649
Snektron
Its full of hacks though

1579836730
fengb
I still remember the one where I blew out both the stack and the heap

1579836736
fengb
10 GB is too much

1579836806
Snektron


1579836955
Snektron
Half the days are already broken because formatting changed

1579837057
AndroidKitKat
hey fellas, my boys and are I trying to build some tools and after one of our guys finished ls, it doesn't work on my machine

1579837060
AndroidKitKat
here's the code

1579837060
AndroidKitKat


1579837097
AndroidKitKat
he was running Ubuntu 18.04 using the latest head and im on Fedora 31 same version

1579837105
mikdusan
AndroidKitKat: building a binary on one machine by zig defaults to use host cpu features

1579837132
AndroidKitKat
yeah but im trying to compile the code i linked

1579837137
AndroidKitKat
not transfer binaries

1579837141
mikdusan
oh

1579837177
AndroidKitKat
jcharbon: was the one who wrote it

1579837200
AndroidKitKat
we're a rag tag group of young men who like to use esoteric langs

1579837238
AndroidKitKat
i can build the executable just fine on my box, but it doesn't do anything

1579837484
mikdusan
maybe your pwd is empty

1579837490
mikdusan
works for me on archlinux

1579837494
AndroidKitKat
weird

1579837612
AndroidKitKat
it's working when i do ./ls /etc but not certain things

1579837810
student069
im facing the same issues on AndroidKitKat on rhel

1579837944
student069
hmmm maybe its debug time? we appreciate the help tonight btw

1579838711
daurnimator
AndroidKitKat: "certain things"?

1579838749
AndroidKitKat
yeah, like the cwd

1579838769
AndroidKitKat
for example

1579838785
AndroidKitKat
/home/foo/bar works but /home/foo doesn't

1579838797
traviss
i noticed that you're using `var iter = dir.iterate();` which i thought should be `var iter = dir.iterator();`

1579838848
traviss
just a guess thought. not sure what the difference is.

1579838900
daurnimator
AndroidKitKat: misc comments: no need for your `stat_ptr` variable. use `mem.cmp` for comparing slices. sorting should be optional for a ls-alike, default is

1579838914
AndroidKitKat
jcharbon: ^^

1579838917
AndroidKitKat
thanks for the tips

1579838939
daurnimator
also use std.ArrayList for tracking entries... not a static sized array and a counter

1579838956
AndroidKitKat
that's a very helpful hint

1579838964
AndroidKitKat
all of us were scratching our heads at that

1579839005
daurnimator
in general you variables should be ~90% `const`, with only a couple of `var`.

1579839191
pixelherodev
Although generally, generalizations are false

1579839224
daurnimator
pixelherodev: In theory, theory matches practice; in practice, it doesn't.

1579839252
pixelherodev
Nice one :)

1579839685
daurnimator
andrewrk: check for any open PRs first :P

1579839727
andrewrk
anything touching ir.cpp will likely have to be manually rebased

1579839864
fengb
Is it something like `s/   /    /`? >_>

1579839887
daurnimator
`git diff -w` "what changes?" ;)

1579839957
andrewrk
it divides IrInstruction into IrInstSrc and IrInstGen base types

1579839977
andrewrk
saving memory and preventing bugs

1579840007
andrewrk
hopefully enough to merge #4264

1579840669
andrewrk
I'm on line 2312 of 30,000 in the compile errors

1579841115
AndroidKitKat
sounds... exciting?

1579841160
fengb
Gotta break eggs

1579842633
jcharbon
daurnimator .. a few questions on the comments you made. I've been trying to adjust my code closer to what you said, but am running into personal issues due to lack of understanding.

1579842645
jcharbon
1 - I don't fully understand your recommendation for mem.cmp. I am using stat_ptr with the syscall stat for a directory.  does mem.cmp do the same? also I didnt even realize I was working with slices there?

1579842654
jcharbon
2 - Why do you think sorting should be optional? just a preference? I thought ls-like functions usually were always default alphabetized.

1579842664
jcharbon
3-  what's the best way to understand how to use std.ArrayList? Can you possibly give me an example to see how it's used?

1579842672
jcharbon
4 - why should most of my variables be const? I feel as though all of my var variables need to be like that because they change throughout the program running. Maybe its just my  current limited grasp of how to code in zig.

1579842720
daurnimator
jcharbon: 1. I meant swap out the `alpha_compare` function for `mem.cmp`.

1579842739
jcharbon
oooh that makes more sense

1579842801
daurnimator
jcharbon: 2. `ls` has a variety of sorting flags (by name/mtime/ctime/owner).

1579842825
daurnimator
jcharbon: 3. looks at the tests in lib/std/array_list.zig

1579842889
daurnimator
jcharbon: 4. most variables

1579843110
jcharbon
Well I guess a decent chunk of mine will go away if I use mem.cmp and ArrayList. I guess I didn't think too much in beyond using incremental counters for everything

1579843185
jcharbon
Also I guess throughout all my coding experience I never thought too-too much about constant but the more I think now i see your point

1579843209
andrewrk
zig will reward you for generally preferring const to var

1579843236
daurnimator
jcharbon: two related principles: prefer the smallest scope you can for variables. only make something non-const if you're going to modify it.

1579843268
jcharbon
Thanks for the tips. I will keep this all in mind going forward haha. Thanks a lot for all the help. I really appreciate it!

1579843517
fengb
Matt Godbolt has the best last name ever

1579843599
andrewrk
what about Usain Bolt, who holds the world record for the 100 metres and 200 metres sprint

1579843762
daurnimator
I had a friend that had an appointment with a "Dr Hurt"

1579843802
mikdusan
andrewrk: ok if I merge #4279 "stage1: make sure to create native_libc.txt dir" - Windows CI is out to lunch

1579843847
andrewrk
yep

1579843888
andrewrk
I'm working on a master branch commit to reduce memory usage

1579844106
mikdusan
nice!

1579844362
mikdusan
exploring ideas: if self-hosting implemented comptime via bytecode/vm (is that what Jai does?), what would the pros/cons be? I'm thinkin pro would be less memory usage but slower performance for the main use case - run once

1579844510
andrewrk
is that different than what stage1 does?

1579844723
daurnimator
Another proposal would be to just.... not cache comptime function calls. Or use an LRU cache.

1579844880
daurnimator
jcharbon: oh I just noticed that you use os.linux.stat... and don't check the result

1579844882
andrewrk
not caching comptime calls breaks ArrayList(i32)

1579844948
daurnimator
jcharbon: we should (we don't... but should) have a `os.Stat`

1579844972
daurnimator
jcharbon: however; at least on linux, getdents() returns some pieces that stat tells you

1579845008
andrewrk
we have std.fs.File.Stat which is cross platform

1579845059
andrewrk
generally it would be advisable to use the cross platform API first, and use OS-specific (or POSIX-specific) API only if that is not viable

1579845080
daurnimator
andrewrk: that requires an open file handle

1579845111
daurnimator
andrewrk: you might not have read permission on a file; but you can still `stat` it.

1579845123
andrewrk
yeah sounds like there is some missing API surface

1579845152
daurnimator
andrewrk: yep. os.statat is missing; and that should probably be exposed as a fs.Dir method `statPath` or similar

1579845181
daurnimator
sounds like a good contributor friendly PR for jcharbon or AndroidKitKat to get their hands dirty ;)

1579845206
mikdusan
well played daurnimator ... well played

1579845702
fengb
So the Zig compiler basically contains an interpreter

1579845712
fengb
We could attach a repl to it :P

1579846331
andrewrk
now I am on line 3596 of 30,000 in compile errors

1579863239
mq32
hmm

1579863247
mq32
i get a error: TODO @tagName on non-exhaustive enum

1579863280
mq32
with ony a single line of code, no call trace on where to find the problematic line that causes it

1579863285
mq32
is there a known workaround?

1579864569
Snektron
Oh hey i didnt know those were already implemented

1579865017
betawaffle
does anyone know of good documentation for someone trying to build an OS designed specifically to only support virtualized environments?

1579865052
mq32
betawaffle, i think the documentation on OS development is quite sparse except for driver stuff

1579865086
betawaffle
i mean, isn't driver stuff where most of the meat of the problem is?

1579865119
betawaffle
everything else is going to revolve around the CPU

1579865126
mq32
it depends

1579865133
mq32
what do you mean by "virtualized environment"?

1579865143
mq32
so, you only want to run in a VM?

1579865153
betawaffle
right, like for example on AWS

1579865165
mq32
ah

1579865165
metaleap
betawaffle: surely if it's anywhere it's on wiki.osdev.org?

1579865170
betawaffle
an OS the doesn't attempt to support anything "legacy"

1579865173
mq32
probably ask the people from

1579866222
metaleap
have a func with a `comptime T: type` arg, branching on T. want it to return `!void`. only some branches could return error, others dont. compiler complains "must return at least 1 error". can confirm have call-site T instantiations that hit all branches. known issue?

1579866261
metaleap
s/have/have various different

1579866346
mq32
you can always make the error set explicit

1579866357
mq32
fn() error{InvalidSomething}!void

1579866976
Snektron
metaleap, i think that might be a problem with how a comptime function evaluates

1579867005
Snektron
cause its lazy, if it doesn't hit any error during evaluation of a function, it won't know the exact error set

1579867011
Snektron
Its can

1579867016
Snektron
It can'

1579867023
Snektron
wtf

1579867049
Snektron
anyway, it can't figure that out from multiple invocations because the actual error set might be different per invocation

1579867079
Snektron
consider `return if (comptime a) error.A else error.B;`

1579867725
betawaffle
is it possible to specify multiple outputs from an inline assembly instruction, or would i need to arrange for the outputs to be read out in multiple inline asm statements?

1579867848
Snektron
I think its possible if you add the outputs as pointers

1579868882
betawaffle
what would be the syntax for that?

1579869337
SyrupThinker
betawaffle: Like this

1579869351
betawaffle
ah perfect, thanks

1579869991
Snektron
Too bad gitea has no Zig syntax

1579870512
betawaffle
does llvm let you tell it explicitly what register to put an argument in? like a manual calling convention?

1579870619
Snektron
i think the best way to do that is with asm

1579870916
betawaffle
anyone know how i can get rid of this seemingly useless `movl %eax, %eax`?

1579871266
metaleap
Snektron mq32 thx! makes sense

1579871409
Snektron
betawaffle, you could write the entire function in assembly

1579871424
betawaffle
yeah, that's what i ended up doing

1579871473
Snektron
hm

1579871488
Snektron
I hopy andrews assembler thingy will use intel syntax instead of at&t

1579871492
Snektron
hope*

1579872384
metaleap
std.HashMap: for a call path where `.put()` calls `.autoCapacity()` calls `.ensureCapacityExact(.entries.len * 2)` the first thing in there `assert(math.isPowerOfTwo(new_capacity))` which fails for me, ergo can fail for innocent user-land `put`s. in my case len was 3 so 6 was attempted (not by me but from inside std/hash_map.zig via my put)

1579872450
metaleap
known issue? can file or PR otherwise. the assert with now TODO suggests to me that ensuring power-of-two is expected to occur somewhere prior/user-facing (likely in `put`)

1579872637
metaleap
oh of note! thats only when i do `myhashmap.initCapacity(iKnowHowManyItemsWillBeThere)`

1579872693
metaleap
so i suppose "user error" / initCapacity not fully commented yet. my bad =)

1579872711
fengb
We should probably assert at initCapacity

1579873036
metaleap
well there's still time til 1.0  =)  good thing there's math.ceilPowerOfTwo

1579874158
metaleap
well i made a

1579877739
metaleap
how do i troubleshoot "error: integer value 1 cannot be coerced to type 'u0'" for vastly deeply nested structures of many optionals/unions?

1579877753
metaleap
eg. check weird compiler-error trace:

1579877775
metaleap
the "trouble-maker" src:

1579877803
fengb


1579877816
fengb
I think this is seeing there's 1 element and trying to make it a u0 enum

1579877840
metaleap
oooh what a funky corner case

1579877861
fengb
What is this, 1 based indexes

1579877879
fengb
Do the numbers matter?

1579877884
metaleap
what this is? Language Server Protocol

1579877922
fengb
I'm making a dumb joke. We don't support VB arrays around these parts 🙃

1579877937
metaleap
adding a "fantasy/never enumerant" will probably hotfix this for now, but hum gotta be a way to have such scenarios work oob eventually, thx for your sharp eye fengb  =)

1579877946
metaleap
VisualBasic arrays?

1579877951
metaleap
lol got it

1579877966
metaleap
1-based, heh, how about lua then

1579878006
fengb
That depends on whether daurnimator is asleep

1579878383
metaleap
now with my "hotfix" in, a 2-member enum such as `DiagnosticTag` errs with "integer value 2 cannot be coerced to type 'u1'"?! really bugs me out.

1579878418
metaleap
so really enums have to start with 0 right now huh? if you need to pad with discard values. hope `_` as ident will be supported at least

1579878565
fengb
How important is the number? If not, you can let Zig auto generate a number. If it is important, you should probably know the underlying number type

1579878661
metaleap
the number values of these enumerants are serialized/deserialized to/from json so they're inviolably prescribed. but i figured out the non-exhaustive enum story so that helps

1579882441
andrewrk
what do you expect @tagName to return for a number that is not in the set of named values?

1579883389
andrewrk
a nice beginner contribution to the stage1 compiler would be to replace all the zig_panic("TODO ...") with add_compile_error("TODO ...")

1579883576
SyrupThinker
andrewrk: I'd think undefined

1579883580
metaleap
good point! i'd say "_" is apt for that.. or optional

1579883693
metaleap
i'll push std PRs for the months to come I feel, but c++ is out at my end =)

1579883721
andrewrk
I think @tagName has to have an optional return type for non exhaustive enums

1579883777
andrewrk
not 100% sure yet though

1579884261
metaleap
either way users would have to check --- either for "magic name" / "_" or for null --- better to be made aware of the necessity by the compiler via optionals

1579884308
metaleap
(i mean, on average / in many / most cases i guess, perhaps not always)

1579884350
andrewrk
you can't check if it equals "_" because it is ambiguous with a real tag name

1579884983
metaleap
I'd vote for optional anyway, over special-name-value (say "" instead of "_")

1579885024
fengb
But that means changing the signature depending on context

1579885064
andrewrk
yeah that's a problem

1579885091
andrewrk
exhaustive enums are more elegant than non

1579885140
naltun
Does Zig support HTTP user-agents? Something like:

1579885150
fengb
How about returning 💩

1579885187
naltun
const get = @import("std").http.get;

1579885225
naltun
I'm trying to implement a CLI I wrote, but I require making HTTP requests

1579885247
andrewrk
naltun, not yet without a third party library such as curl. we're trying to solve some async i/o stuff first

1579885295
naltun
andrewrk, aynsc is good. Okay. I haven't tested using an existing lib, but using libcurl could be a fun exercise. Thanks.

1579885374
andrewrk
maybe 💩 can be the default user-agent string

1579885376
metaleap
"But that means changing the signature depending on context" is that so bad for comptime? sure when you check enums back and forth it can be annoying but otherwise each incompatible "overload" fits exactly the different meanings passed to. might even prevent sloppy refactors

1579885440
metaleap
s/check/change

1579893024
Snektron
andrewrk, don't you mean 🦎

1579893049
Snektron
My favourite is 🐍 of course

1579893277
metaleap
my hexchat on void doesnt emojis. probably keep it that way  =°)

1579893379
jcharbon
daurnimator: i would be more than willing to help with a statPath contributor friendly PR, but am too much of a noob with PRs and that process to even know where to get started haha. I would need a bit of guidance, but again, am more than willing to help contribute :)

1579893514
naltun
I recognize a daurnimator from the Arch repos as a maintainer. Probably same person. Neat.

1579893816
fengb
Yes he is

1579893822
fengb
Internet famous!

1579893865
andrewrk
jcharbon, I believe GitHub has some nice tutorials on how to contribute to projects via pull requests

1579894094
naltun
Question: Why does the following produce a value ending with e+00?

1579894124
naltun
const val: f32 = 7.0 / 3.0; warn("7/3={}\n", val);

1579894137
naltun
7 / 3 = 2.333984375e+00

1579894155
Snektron
printing floats is hard

1579894167
fengb
Default is apparent exp notation

1579894177
naltun
I see. Okay.

1579894234
fengb
You can pass in a format flag: `{d}`

1579894293
fengb


1579894355
naltun
Oh, great.

1579896017
andrewrk
I'm expecting this to improve with

1579896116
naltun
I like it.

1579896430
andrewrk
oh nice I didn't know tiehuis was actively working on it

1579896485
andrewrk
is zig in the news somewhere? 3 new sponsors today

1579896544
andrewrk
btw I decided to pull the trigger on starting Zig Software Foundation. so that'll be official within a few months if all goes well.

1579896573
Snektron
nice, congratulations

1579896623
BaroqueLarouche
nice!

1579896690
mq32
\o/

1579896694
fengb
Congrats

1579896800
andrewrk
yeah. then people (and businesses) will have 2 new important options available: (1) donate money to a non profit org bank account, which is held accountable by law to uphold the org's mission with the money (2) the donations are tax deductable

1579896858
BaroqueLarouche
also you could ask for devkits of consoles with a proper organisation

1579896952
fengb
Would there be employee #1 in the foreseeable future? :)

1579897027
andrewrk
plans for funding the org are: provide a way for people to donate directly to the org, and me personally to donate from savings. I have enough to contract part time work, but the first job opportunity will probably be a "grant proposal writer"

1579897037
andrewrk
e.g. the job isn't to code, it's to try to get more money to the org

1579897094
andrewrk
but if there is more cash flow, then yes I absolutely want to spend it on employee or at least contracting hours, so contributors can get paid

1579897136
fengb
Oh... I never thought about the logistics

1579897162
andrewrk
I would be careful about hiring as an employee unless the cash flow was very stable

1579897171
fengb
That's a good point

1579897511
mikdusan
andrewrk: when you get a chance, I'm trying to amalgamate what a `packed struct` is likely to be in the future (with #3133) before any related PR work; corrections and feedback welcome:

1579897514
mikdusan


1579898078
Snektron
Imagine working for Zig

1579898083
metaleap
andrewrk: on point (2) tax deductable: not sure if you'll focus on US first or global from the outset, but if you take a weekend (or pro-bono / student law-person) to figure out exactly what slip of document to issue (once a year) to EUR zone folks (entities and self-employeds) for donations, it could prove most worthwhile. many devs are freelancers here on this continent and have annual income tax figures between

1579898083
metaleap
8-30+K (damages for mundane enterprise morass often) depending on other write-off-ables. and to stay sane they often have "currently-market-irrelevant/emerging/pet techs" to play with during off-hours, that they'd love to divert some of these otherwise-to-the-govt funds to. just sth to keep in mind

1579898135
Snektron
(i think andrew lives in Canada so focussing on the US would be pretty weird)

1579898210
fengb
He's in NY

1579898237
andrewrk
mikdusan, #3133 would enable packed structs to opt in to non-well-defined memory layout

1579898362
andrewrk
e.g. you could embed a struct in a packed struct. between #3802 and #3133, the only difference between `struct` with all fields `align(0)` and `packed struct` would be very similar

1579898374
andrewrk
that sentence didn't make sense after I edited it

1579898497
andrewrk
mikdusan, "field order matches declaration order; no extra fields added by zig*; all fields align(0) by default;" would be the entire set of distinguishing characteristics of a packed struct

1579898512
andrewrk
(* unless opted in which is a not-yet-accepted proposal)

1579898517
mikdusan
(yes). I need to word things better. I kind of want to show how a packed struct begins it is considered guaranteed memory layout, and opt-in I used the term phrase "becomes opaque"

1579898577
andrewrk
but a lot of the packed struct logic you have listed there would apply to align(0) fields of normal structs as well

1579898657
mikdusan
oh i c what you're saying. the packed-struct continues to be a packed struct basically as if we... joined P0+S0+P1 (where P is packed and S is plain)

1579898682
andrewrk
yes

1579898717
andrewrk
so you would actually be able to embed non-packed-structs in packed structs, and have them be align(0), so they get bit-packed

1579899304
mikdusan
what happens with method syntax `packed_obj.packed_field.printName()` ?

1579899511
andrewrk
(...).printName() evaluates the ... expression as an lvalue, aka a pointer. the pointer type that `packed_obj.packed_field` produces has alignment/bit offset metadata in it. depending on what the parameter type of printName() is, it may be a compile error or not

1579899543
andrewrk
if printName took for example, a Foo type (not a pointer) then the pointer-with-metadata would be properly dereferenced with bit shifting or whatever was required, and the function call proceeds as expected

1579899562
mikdusan
oh wow

1579899575
andrewrk
if printName took a pointer type that lacked the metadata, it would be a compile error. you can observe this today with packed structs

1579899590
andrewrk
if printName took a pointer type that had matching metadata, it would also work

1579899629
andrewrk


1579899689
mikdusan
real nice.

1579899725
andrewrk
note also if it took a `var` parameter it would also work fine

1579899775
andrewrk
when I first started on zig, struct layout seemed opaque to me and my reasoning about it was really fuzzy

1579899786
andrewrk
but now it's pretty clear in my head how everything is supposed to work

1579900225
andrewrk
I'm on line 18,866 of 30,698 in this slog of a branch X_X

1579900231
andrewrk
separating IrInstruction into pass1 and pass2

1579900264
Snektron
ah, the infamous ir.cpp

1579900274
andrewrk
for having a simple syntax, zig sure has a ton of ir instructions

1579900279
mikdusan
lol

1579900287
Snektron
and a lot of keywords

1579900305
andrewrk
is that actually true? I bet zig has an usually low number of keywords

1579900333
Akuli
github web viewer doesn't even show that file :D

1579900362
mikdusan
Akuli: yeah that sucks

1579900416
Akuli
this is a long file

1579900418
Akuli
:D

1579900427
andrewrk
after my branch it would make sense to split ir.cpp into ir1.cpp and ir2.cpp

1579900437
Snektron
andrewrk, more than c

1579900455
andrewrk
ast->ir1->ir2->llvm

1579900520
mikdusan
today most c has a lot of attributes, pragmas and things. Zig adds keywords to replace some of that spaghetti so don't count that as negative :P

1579900529
Snektron
Also more than rust

1579900549
andrewrk
according to

1579900617
mikdusan
plus `asm`.. 45 :)

1579900638
andrewrk
also there is a proposal to move all the builtin types to become keywords. sounds counter intuitive, but because of @"syntax", keywords are actually easier to work around shadowing problems than builtins

1579900744
fengb
Man, we'd have 128+ keywords starting with the letter 'u'

1579900758
Snektron
That doesnt sound counterintuitive at all

1579900758
mikdusan
heh

1579900765
Snektron
it surprised me that i could do that before

1579901204
andrewrk
I don't like that integer builtins are special

1579901419
Snektron
Im not sure if writing @Int(0, 1 << 32) everywhere is the way to go though

1579901642
andrewrk
that's a very large integer

1579901687
fengb


1579901714
andrewrk
zig fmt: nailed it

1579901757
andrewrk
that actually would look good if the if had proper indentation

1579901790
andrewrk
maybe the builtin fn formatting isn't adding a new level of indent when calling renderExpression

1579901892
andrewrk
basically there's a hidden `usingnamespace @import("primitives");` at the top of every zig source file. It would be nice to sometimes omit that

1579901920
andrewrk
the Zig Way to do this would be to require that line explicitly in order to use primitive types. but that might be too extreme. people already hate blk:

1579901963
Snektron
yeah i think that'd be too annoying

1579901976
Snektron
but i have no problems with blk:

1579902057
Snektron
plus `i(32)` looks a bit weird

1579902102
mq32
andrewrk: i'd actually go for something like "std.int.i32" or "std.i32"

1579902121
mq32
where std only exports some commenly used integers like {u,i}{8,16,32,64}

1579902128
andrewrk
it would be std.primitives so that you could usingnamespace

1579902133
fengb
My qualm with blk: is the colon switches places

1579902140
mq32
fengb: +1

1579902173
andrewrk
you don't like bash's if/fi case/esac?  🙃

1579902195
Snektron
i think blk: vs :blk is nice to see source and destination

1579902203
fengb
Well then it should be break :klb

1579902278
andrewrk
I wouldn't mind swapping the colon over to the left for the block name, if it was overwhelmingly popular

1579902301
fengb
How about change the keyword to goto :blk? 🙃

1579902315
mq32
nah, no goto

1579902318
mikdusan
was prefix colon added for clarity instead of `break blk 10;` or `break blk;` ?

1579902325
mq32
i think there was the discussion of blkreturn or something

1579902349
andrewrk
mikdusan, `break blk` is ambiguous whether it should return from a block named `blk` or whether it should look up an identifier named `blk` and return it from the innermost loop

1579902367
mq32
mikdusan: actually a good idea: make block names just names/identifiers as everything else

1579902375
andrewrk
also, if you have never learned zig, you can probably figure out how break :blk works without reading any docs. the colon helps that

1579902379
fengb
Compromise: put colons on both sides

1579902387
mikdusan
:P:

1579902440
andrewrk
one of my guiding principles for syntax is: can someone who knows a programming language or two but not zig understand this clearly, without reading any zig language docs?

1579902491
andrewrk
you know, like [*:null]const ?[*:0]const u8

1579902492
andrewrk
j/k

1579902502
mq32
/o\

1579902521
mikdusan
andrewrk: ah ok so labels don't shadow/conflict with anything. I see.

1579902578
andrewrk
it's nice to be able to look at only 1 line (`break foo;`) and without looking at anything else, know whether it's jumping to a label or not

1579902593
Snektron
not so much about shadowing but rather about parsing ambiguity

1579902601
Snektron
Though its strictly not ambiguous

1579902607
andrewrk
for humans as well as the compiler

1579902644
Snektron
One thing i thought about was that its possible to create a language without semicolons or other terminators

1579902659
fengb
What about sneks

1579902680
mq32
Snektron, that's actually quite possible, but it restricts your grammar a bit

1579902690
Snektron
If you dont allow expressions without assignment, which zig does not, stuff like `a = b + 1 c = d + e` is perfectly unambiguous

1579902694
mq32
Lua for example doesn't need terminators for 99% of instructions

1579902715
Snektron
but lua allows such expressions

1579902726
Snektron
for example you could write `a = 2 -b`

1579902731
Snektron
could be interpreted in two ways

1579902752
mq32
the code above is actually valid lua ;)

1579902763
mq32
"-b" is not a valid lua statement

1579902791
fengb
I'm not sure I like that

1579902839
Snektron
afaik it is

1579902859
Snektron
oh wait, you mean like that

1579902865
Snektron
huh, i didnt know lua allowed that

1579902865
Snektron
Nice

1579902915
Snektron
but you can go even further

1579902931
andrewrk
will consider removing semicolons at the very end before 1.0 if it makes sense then. I don't think it's important enough to design around it

1579902937
Snektron
because `if a == b b = d` end is also unambiguous

1579902960
fengb
Just because it's unambiguous for the computer doesn't make it a good construct for legibility

1579902973
andrewrk
the main problem is that

1579902976
Snektron
Im not advocating for it, but its possible

1579902995
mq32
andrewrk: i would recommend not removing semicolons as they reduce readability for humans

1579902997
fengb
Ah okay

1579902999
andrewrk
you don't want typos to be valid code

1579903010
mq32
it's much better to fast-scan for semicolons

1579903016
fengb
Eh, Python and Ruby get by without semicolons

1579903029
fengb
JS isn't that bad either once you get around the weird ASI

1579903036
metaleap
i suspect the only reason go managed to ditch semicolons was to require curly braces on all blocks even 1-line "blocks"

1579903053
companion_cube
python's syntax is kind of the worst, though

1579903065
metaleap
s/only/main

1579903104
Snektron
go uses line endings as statement terminatros

1579903125
fengb
We should use 💩

1579903145
fengb
How about: any emoji codepoint is a terminator

1579903154
fengb
Personalize our code

1579903280
SyrupThinker
Go to Perl6/Raku route? :)

1579903285
SyrupThinker
*the

1579903302
fengb
Are we moving towards using files as full structs?

1579903388
Snektron
does that mean i can `struct{usingnamespace @import("std")}{};`

1579903439
mq32
<fengb> Eh, Python and Ruby get by without semicolons

1579903442
mq32
return a

1579903443
mq32
+4

1579903451
mq32
returns "a", then syntax-errors :D

1579903678
SyrupThinker
Ruby returns 1 o:

1579904905
andrewrk
return a\n + 4 is problematic for humans too

1579906667
frmdstryr
Would it be possible to access variables on the stack from a @frame?

1579906712
frmdstryr
It seems like that would allow closures to work

1579907101
metaleap
losing my mind here! what in the?!

1579907150
metaleap
aaaarg sometimes it takes a screenshot to see one's own stupidity

1579907163
metaleap
getting too late... loop and i-=0

1579907177
metaleap
(wouldnt happen with i--  ;)

1579907381
fengb
I've done that before :P

1579908178
andrewrk
this pass1/pass2 thing has revealed one likely hiding place of some result location bugs

1579908397
mikdusan
andrewrk: for aligned fields; confirm: 1. do not have to be power-of-2 bytes. 2. if most-aligned-field > packed-struct's align (overalign), packed-struct alignment is increased... and extended to meet power-of-2 requirement?

1579908417
fengb
Hmmm will this conflict with your result location cleanup branch?

1579908438
shakesoda
i think the only language i know does just fine without semicolons is lua, and it has them anyways just in case

1579908462
shakesoda
in practice the only time i have ever needed them is if i have a line which is, for some reason or other, wrapped completely in parenthesis

1579909244
andrewrk
mikdusan, (1) alignment must be a power of 2 bytes, or 0, indicating sub-byte alignment. (2) all struct alignments (packed, extern, and normal) are defined to be equal to the most-aligned-field's alignment

1579909299
andrewrk
(2) ...and extended to meet minimum of align(1)

1579909341
andrewrk
fengb, nah, there is no fundamental conflict between these two branches

1579909352
andrewrk
it will have easily fixable git conflicts

1579909388
andrewrk
there's always the option to manually take the smaller branch, and apply diff to the larger branch by hand

1579909418
andrewrk
sometimes it helps to know when to not use your tools

1579909477
mikdusan
andrewrk: ah thanks. I somehow confused "non-power-of-2" for host-integer with alignment. much easier to grok align now

1579909683
fengb


1579909741
andrewrk
guess we know Vexu's opinion on #181 :)

1579909806
fengb
Also no semicolons

1579909828
Snektron
thats a controversial issue

1579909864
andrewrk
damn, I thought this pass1/2 thing would be simply refactoring, but I actually have to fix this result location bug to solve compilation errors

1579909869
andrewrk
I guess that's a good thing

1579909886
andrewrk
but now I'm like 8 yaks deep

1579909898
Snektron
I was hoping to write some function to make automatic conversion of vulkan variable names

1579909913
mikdusan
what kind of names do they use?

1579909918
Snektron
but it seems like i don't have enough information to handle some cases

1579909959
andrewrk
btw Snektron there is this clause in the style guide:

1579909961
Snektron
mikdusan, its mostly just camel case for types/functions/members and screaming snake for constants

1579909961
andrewrk
" These are general rules of thumb; if it makes sense to do something different, do what makes sense. For example, if there is an established convention such as ENOENT, follow the established convention. "

1579909984
andrewrk
if your goal was to follow the style guide, it would suggest to keep vulkan's names

1579910016
andrewrk
I would even add that as an example: if translating vulkan API from an xml file, don't mangle the names

1579910041
Snektron
Not in particular, but i have a preference to have most stuff in the same style, even if originally in another case

1579910083
Snektron
But there are more motives outside of style preference, however i can probably get by with a simpler substituion

1579910136
Snektron
One of my motivations of writing this was to remove some clutter that appears when using the headers directly, for examply writing VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO when .InstanceCreateInfo would suffice

1579910202
Snektron
I think that reads nicer enough to justify the change of style

1579910306
Snektron
One drawback is that its harder to write Vulkan code in Zig if you're following some non-zig documentation and have to map those names to zig names though

1579910355
andrewrk
that's the idea behind keeping the names the same

1579910372
andrewrk
I could see taking off the VK_ prefix and putting things in a vk namespace though

