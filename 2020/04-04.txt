1585959019
daurnimator
andrewrk: 1. is layout of a `slice` defined? 2. can it be? (perhaps user controlled?)   => why? a slice of slices should be a valid `const struct iovec *iov`

1585960837
mikdusan
what I'd like to see are 2-sided (made up that name) page tables for virtual address space; one side is for stack, and other side is everything else. so thread can have it's own private stack, and thread-locals basically become globals. how much heavier does that make a thread? hopefully not much.

1585960840
mikdusan
whups

1585961029
daurnimator
mikdusan: the whole point of a "thread" instead of a process is that it shares all memory with other threads in the same process

1585961072
mikdusan
that's not true

1585961078
daurnimator
go on...

1585961080
mikdusan
a thread needs private stack

1585961093
daurnimator
its not private; just separate

1585961115
mikdusan
can you give me a use-case where one thread accesses another's stack?

1585961116
daurnimator
you can do `heysomeotherthread(&stack_variable)`

1585961141
daurnimator
think of e.g. when you're using thread pools for IO

1585961325
mikdusan
which callstack are those threadpools using?

1585961618
mikdusan
i'd rather have a model where stack is thread-private and then have an alternate stack from process memory to do that kind of sharing

1585962313
daurnimator
:( looks like andrew broke preadvAll

1585962859
andrewrk
I think the void return type just needs to be replaced with usize

1585963027
daurnimator
andrewrk: the arg needs to be not const

1585963036
daurnimator
the doc-comment explains why :)

1585963160
andrewrk
ah nice catch

1585963178
andrewrk
would be nice to have some test coverage for that fn

1585966146
daurnimator
andrewrk: where is your sparc discussion happening?

1585966174
andrewrk
#ylibc

1585966207
pixelherodev
What's ylibc?

1585966223
andrewrk


1585966622
companion_cube
uh, interesting

1585966735
junon
Just submitted a fix for #4909; PR is #4932

1585966768
junon
Wasn't sure what to do with all of the private functions that needed fixing so any guidance would be appreciated. Plus, never touched stage1 before so I might be violating some House Rules w.r.t. the c++.

1585967046
junon
There are a lot of places affected by this bug :/

1585968063
andrewrk
btw Cadey where did you land on getting zig code running on TempleOS? I'm typing up release notes and saw some of your contributions to the bring-your-own-os-layer

1585968121
Cadey
i haven't really had any fruit yet, mostly been figuring out how to square peg / round hole it

1585968151
Cadey
the file I/O stuff (and/or stdout printing) is a conceptually hard thing given there's no linker :D

1585968236
andrewrk
interesting

1585968253
andrewrk
anyway just wanted to make note of that if you ended up getting it to some kind of milestone :)

1585968293
Cadey
the weird part is that function pointers are limited to the lower 31 bits of a 32 bit address space, but pointers are 64 bits wide otherwise

1585968329
Cadey
(basically it uses the `CALL` instruction instead of whatever way you are supposed to do it in amd64 on linux)

1585968403
Cadey
i mean, in theory it should work

1585968429
Cadey
i'm just still figuring out what breed of goat i need to sacrifice and how to procure them given most stores are closed

1585968609
andrewrk
here's what I've got so far on the release notes, and I'm only halfway through the commit logs:

1585968695
Cadey
honestly the bring your own OS layer is just

1585968711
Cadey
it makes zig into a swiss army knife

1585968885
pixelherodev
... I just realized that you have to write the release notes by hand every release

1585968898
pixelherodev
That does not sound fun

1585969410
shakesoda
aw, i can't link my stuff against the prebuilt openxr sdk libraries

1585969417
shakesoda
this is both completely expected and modestly annoying

1585969435
mikdusan
one of my favourite 0.6.0 lang surprises is pointer-to-array; elegant and complements slice semantics very well

1585969441
shakesoda


1585969486
shakesoda
vcrt stuff

1585969554
shakesoda
with some effort i could probably build it with zig entirely

1585969590
mikdusan
shakesoda: that's a c++ lib? exposes std:: namespace stuff. so yeah, must match their compiler brand, and compile-flag choices

1585969610
shakesoda
yeah :(

1585969971
shakesoda
oh, if i use the other library (dynamic instead of static)  it's fine

1585970133
mikdusan
hahaha "tell me you didn't try -j256" .... "that's exactly what I did":

1585970135
mikdusan


1585970526
daurnimator
Cadey: I found the BYO os stuff pretty unusable. see e.g.

1585970567
daurnimator
also

1585970573
shakesoda
mikdusan: wow

1585970696
mikdusan
i wonder if that's 8 threads per core

1585970721
andrewrk
Thalheim is offering SPARC hardware for testing, if anyone wants to try their hand at #4931

1585970754
andrewrk
you know what's funny though, is we often use `zig translate-c` with musl libc header files to figure out the OS bits

1585970868
andrewrk
qemu also supports sparc64

1585971322
andrewrk
oops, I meant to add: it's funny because Thalheim is the one working on musl support for sparc, and it's not done yet, so we wouldn't be able to do that yet

1585971662
Thalheim
andrewrk: if all you need is header bits most of those are done so far

1585971665
Thalheim
which do you need?

1585971708
Thalheim
mikdusan: it is 8t per core, 2 x 16-core cpus

1585971751
andrewrk
Thalheim, for starters, the sparc64 equivalent of the declarations in this file:

1585971814
andrewrk
it will also be helpful to look at the sparc64 equivalent of

1585971883
Thalheim
ok. this may have to wait till tomorrow; I just crawled out of bed to grab a blanket and that inevitably led to checking emails and irc

1585972078
andrewrk
I'm about to get off the computer as well. good night!

1585972087
shakesoda
does builder already have something for copying dll dependencies next to exec or should i just do that myself

1585972112
andrewrk
it puts them in the Path environment variable

1585972175
daurnimator
Thalheim: also one of these:

1585972191
daurnimator
oh doh; andrew already sent that link

1585974161
Yardanico
so is

1585975500
pmwhite
on that same note, I think I've seen andrew get some error reporting during his coding streams. anybody know where that comes from? It doesn't seem to be built into the vim plugin.

1585975652
mikdusan
yes that is the vim plugin using `zig fmt` in vim's path environment

1585975683
mikdusan
every write/save in vim runs `zig fmt` on the buffer

1585975989
pmwhite
I'm using that plugin, but I don't get an error window when there is a syntax error...it just fails to format.

1585976020
mikdusan
in the shell that launched vim do `which zig`

1585976060
mikdusan
ie zig must be in path env before launching vim

1585978379
shakesoda
"std.os.getenv is unavailable for Windows because environment string is in WTF-16 format. [...]"

1585978386
shakesoda
hahahaha, oh man

1585978396
shakesoda
whoever wrote that error message, thanks

1585978529
mikdusan
git blame says andrew

1585978793
shakesoda
keep it forever

1585980307
pmwhite
mikdusan: zig is on my path. I mean, the plugin does autoformat code on save. it just doesn't bring up an error window when syntax is invalid. If zig weren't on my path, then I would expect the autoformat to not work.

1585980382
mikdusan
oh i guess some other vim setting is preventing that

1585980502
mikdusan
i don't have much in my vimrc; maybe these somehow help:

1585980573
mikdusan
lines 1,2,6

1585981543
pmwhite
Thanks...I was just looking at the vim plugin and trying to debug it. It looks like it is indeed getting to the line where it tries to execute "lopen"

1585981672
pmwhite
so, no solution yet, but progress.

1585982475
pmwhite
mikdusan: what version of vim are you using? I'm using vim 8.

1585982745
pmwhite
Ah, I got it. I had the line `let g:syntastic_always_populate_loc_list = 1`

1585993789
Snektron
I wonder if its useful to give allocators a 'preferred allocation granularity'

1585993818
Snektron
For example, a page allocator only allocates in blocks of mem.page_size

1585993858
Snektron
So in arena allocator, blocks are allocated in that size, regardless of the backing allocator

1585993944
KoljaKube
Hello

1585993982
Snektron
Hi

1585998067
ifreund
would anyone happen to have a good example of a simple, non-library project with tests set up?

1585998098
ifreund
I tried to just import my project with addPackagePath but everything is private it seems

1585998287
marijnfs
just make things pub?

1585998293
marijnfs
stuff thats not pub is not exposed

1585998293
ifreund
i guess the other option would to split my project into a lib add executable, then run tests on the lib

1585998304
ifreund
s/add/and/

1585998318
ifreund
it is pub though

1585998322
marijnfs
hmm

1585998326
ifreund
maybe I've just set things up strangely

1585998342
marijnfs
are the tests defined in the code itself?

1585998403
ifreund
no i made a separate test folder

1585998413
ifreund
I can push a dysfunctional branch if you like

1585998427
marijnfs
sure maybe i can see something

1585998438
marijnfs
not a zig expert but have been picking it up

1585998489
ifreund
here it is:

1585998498
ifreund
be warned, my build.zig is disgusting

1585998674
KoljaKube
Is there a way to convert a []u8 to a [*:0]u8? The source would have enough space for the \0.

1585998709
marijnfs
KoljaKube: there is stuff in std.mem, look at std.mem.spanZ i believe

1585998709
KoljaKube
As far as I can tell cstr.addNullByte copies the whole thing

1585998725
marijnfs
ifreund: i'm wondering if its because of the folder

1585998770
KoljaKube
I can see dupeZ, but that copies, too

1585998798
josch557
KoljaKube: maybe look at ArrayListSentineled, formerly Buffer

1585998804
ifreund
hmm, maybe I should just put the tests in the src files

1585998812
marijnfs
ifreund: i wonder if that works?

1585998833
marijnfs
KoljaKube: if you have the original buffer, you can to original[0..len_of_text:0] i believe

1585998877
KoljaKube
The compiler won't let me append a '\0' to the end of my []u8 :-/

1585998900
marijnfs
hmm because he says you don't have that allocated?

1585998908
marijnfs
where is the original buffer where you say the 0 should fit

1585998973
marijnfs
what does the compiler say

1585998991
KoljaKube
I am using a custom OutStream writing into an ArrayList (I overlooked ArrayList.outStream)

1585999015
KoljaKube
ArrayList.append("\0") gives "illegal character"

1585999033
KoljaKube
*invalid

1585999068
josch557
KolkaLube: .append(0)

1585999088
josch557
BTW you can just use ArrayListSentineled

1585999096
josch557
It takes care of the trailing 0 automatically

1585999120
KoljaKube
I just tried the same thing :D

1585999127
KoljaKube
Silly me, thanks

1585999511
ifreund
marijnfs: putting the tests with the code in the src folder worked fine, i guess I'll just go with that

1585999605
KoljaKube
Had to get the latest build first, but yes, ArrayListSentineled makes this way easier

1585999752
KoljaKube
Is there a reason for the differently styled inits for the two lists?

1586001146
TheLemonMan
ok so I got a quick and dirty sparcv6-linux port going...but it seems LLD doesn't support the elf64_sparc emulation mode!

1586001671
FireFox317
that is such a pity TheLemonMan

1586002269
TheLemonMan
and adapting all the test expectations to match the swapped byte order is as fun as hitting your crotch with a hammer

1586003230
ikskuh
hmm. can i depend on a build artifact in zig build as in "i want to execute it to continue the build"? :D

1586005554
magejohn
Can zig build cpp sources? I.e, is it possible to set a flag like -std=c++98 on a c source file in build.zig?

1586005625
mps
andrewrk: here is the log of trying to build zig on armv7 alpine edge

1586005678
mps
source used is git commit 86795c03f918dbcc0fc06811cc7c496d275deae1

1586005742
ikskuh
magejohn: yes

1586005754
ikskuh
zig build-exe --c-source -std=c++98 foo.cpp

1586005772
magejohn
cool, thanks

1586006019
magejohn
also, what's the best translation of make 'targets' to a zig build system? i.e, how do I get things like 'zig build all', 'zig build release', 'zig build docs', etc? does each call to builder methods like Builder.addExecutable add one or something?

1586006195
ikskuh
you can create named steps

1586006198
ikskuh
with dependencies

1586006239
ifreund
i believe `zig init-exe` gives you a run step for example

1586006352
magejohn
cool, i didn't even realise zig had the init-exe and init-lib options, actually. i'll take a look at what it generates as a reference then

1586006410
magejohn
the zig build system could really use docs :joyful: maybe once i've made this one i'll know enough to start writing them

1586006687
magejohn
* the zig build system could really use docs 😂 maybe once i've made this one i'll know enough to start writing them

1586006938
ikskuh
yeah, true

1586007077
ikskuh
can someone explain what usecase `std.atomic.Queue(T).dumpToStream` has`

1586007100
ikskuh
it looks like it dumps both head and tail and up to 4 following items

1586007549
KoljaKube
Maybe debugging?

1586007577
ikskuh
yeah

1586007583
ikskuh
but i wonder what the implementation does

1586007594
ikskuh
it tries to print up to 4 elements from the tail

1586007610
ikskuh
where to my understand the tail has always ".next == null"

1586007751
KoljaKube
Good point

1586007970
KoljaKube
Might be an oversight. The Node is doubly linked as far as I can see, would just need to read `prev` instead of `next` for the tail

1586007979
ikskuh
+1 pull request

1586008895
KoljaKube
How can I allow field access for my struct?

1586008992
ikskuh
right now it's just there

1586008997
ikskuh
all struct fields are public

1586009021
ifreund
maybe you have a ?* pointer to the struct?

1586009045
KoljaKube
Oof, yes, sorry

1586009075
KoljaKube
I forgot that this variant of the function returned a !Size

1586011730
ikskuh
daurnimator: thanks for tagging :)

1586012028
TheLemonMan
mps, check out 839d85e4405aef4856d1a35a6580226e997cc369

1586012335
andrewrk
mps, I think your issue will be solved if you update zig sources to latest master branch

1586012774
mps
aha, I thought that this could be solution. thanks. will try with current master

1586013094
andrewrk
TheLemonMan, did you see my comment on #4737?

1586013124
TheLemonMan
yeah I'll check it out later, got sidetracked learning about sparc

1586013143
andrewrk
I had a feeling that would "spark" your interest

1586013146
Thalheim
TheLemonMan: that's the kind of enthusiasm I love to hear

1586013187
andrewrk
Thalheim, if you didn't see above: <TheLemonMan> ok so I got a quick and dirty sparcv6-linux port going...but it seems LLD doesn't support the elf64_sparc emulation mode!

1586013213
Thalheim
sparcv6 should not be used; v7/v8 is "32-bit sparc" and v9 is "64-bit sparc"

1586013224
Thalheim
so elf64 makes no sense

1586013238
TheLemonMan
well by 6 I meant 9

1586013263
andrewrk
so part of this task would be sending a patch upstream to LLD (or just convincing one of the devs to do it) and then either re-forking LLD or waiting until 11 comes out

1586013323
andrewrk
we could also consider carrying LLD/LLVM patches in the bootstrap repo (as long as they are merged upstream)

1586013437
andrewrk
Thalheim, TheLemonMan is a well-respected member around here, certainly someone you would benefit from giving access to sparc hardware

1586013591
Thalheim
TheLemonMan: on the understanding that it's not online 24/7, but can be "turned on upon request" (just ping me or email me), happy to accommodate.

1586013594
Thalheim
pm me your pubkey

1586013652
TheLemonMan
thanks for the kind words heh Thalheim, I'd wait 'till I have at least something working and running on qemu

1586013761
Thalheim
depends on how much you value your time. it's no inconvenience on my end.

1586013808
fengb
Old school lambda function: using a person 🤔

1586013977
magejohn
is there an easy way to have a build.zig make a directory if it doesn't exist yet?

1586014034
magejohn
hold on, i wasn't reading the error message properly, it looks like it's trying to do that already.

1586014251
mps
hmm, no luck: '<inline asm>:1:2: error: instruction requires: armv6k' \n yield \n LLVM ERROR: Error parsing inline asm

1586014301
mps
git commit e89c42655cf9851cdf02065bc75cda0e27884966

1586014320
mps
i.e. current master branch

1586014371
TheLemonMan
yeah that's unfortunate, v6 has no yield

1586014392
TheLemonMan
we should gate that with some feature check

1586014432
mps
TheLemonMan: I'm building it on alpine armv7 arch

1586014552
TheLemonMan
are you explicitly setting the cpu?

1586014596
TheLemonMan
zig defaulted to the thumb-only v6m architecture 'till some weeks ago

1586014671
mps
no, I use default for alpine armv7

1586014732
mps
and, thumb is default in gcc on armv7 (again on alpine)

1586014801
TheLemonMan
re-read my last message, the default was -->

1586014809
mps
hmm, maybe I should upgrade to gcc 9.3.0

1586014825
mps
ah, I see

1586014860
TheLemonMan
check out 2b33e27e1

1586014889
mps
TheLemonMan: ok, will do (after coffee break)

1586014904
TheLemonMan
nonetheless we should add a feature check in the spinlock implementation

1586015194
andrewrk
mps, the build that worked successfully for me was: -target arm-linux-musleabi -mcpu=generic+v6kz

1586015222
Thalheim
andrewrk: all right, now that I've got coffee in me I'll see what I can do about getting you those bits.

1586015269
Thalheim
unless "quick and dirty port" means I'd be duplicating effort, in which case I'll poke at musl

1586015283
andrewrk
if I understand correctly, the bottleneck is now known to be LLD, so you may as well work on musl

1586015547
mps
andrewrk: undestand, but I want to use default flags as much as possible for distro package

1586015672
andrewrk
oh it's arm v7? in this case I think you want: arm-linux-musleabihf (no -mcpu parameter needed; it defaults to v7a)

1586015704
andrewrk
you need the latest zig sources - as TheLemonMan noted we have been working on this very recently

1586015728
andrewrk
the arm v7a build also worked successfully for me

1586015950
mps
will be in about one hour again on the armv7 machine and will post you default gcc flags on alpine

1586016042
ikskuh
++stability

1586016084
magejohn
so, i'm getting an error when i set the output dir of something in my build.zig and the output dir doesn't exist yet. the error returned is FileNotFound, which makes sense, but the error trace starts with a error.PathAlreadyExists, which is confusing me. the way I understand the trace, it's trying to make the missing directory, hitting an error.PathAlreadyExists (which it doesn't), and then turning that into an

1586016084
magejohn
error.FileNotFound. any insights?

1586016154
magejohn
the trace, for reference:

1586016165
andrewrk
error return traces show "caught" errors too. There is a plan to improve this, but for now you'll have to do a little sleuithing to understand what happened

1586016192
magejohn
cool, thanks. I'll have closer look at the library code then

1586016199
fengb
This looks familiar. It was also a confusing resolution for me last time

1586016451
TheLemonMan
ok I've hacked zig to use sparc64-linux-gnu-ld and now I have working binaries

1586016533
ikskuh
\o/ ?

1586016617
TheLemonMan
sometimes you gotta do what you gotta do

1586016700
ikskuh
how many platforms does bootstrap now support? :D

1586016735
andrewrk
still haven't got it to build for windows yet

1586016740
ikskuh
:D

1586016749
ikskuh
nah, who needs windows anyways :D

1586016751
andrewrk
for some reason it thinks defined(CYGWIN)

1586016775
ikskuh
but i can imagine that windows is actually harder than other-cpu linux distros

1586016786
ikskuh
because linux has at least the same APIs

1586016788
magejohn
looks like the PathAlreadExists part is to do with the zig-cache. +1 for zig building it's std lib from source, btw. I just threw a std.debug.warn in the relevant function in the std lib, and it got used. hacky, but much faster than trying to follow the chain of function calls down

1586016805
ikskuh
yep

1586016821
andrewrk
yeah, "no installation steps" is a big feature

1586017174
magejohn
okay, so then my question from earlier is still relavent. is there an easy way to get the zig build system to make my output dir for me? or should I just call std.fs.cwd().makeDir()?

1586017203
ikskuh
create a step that does this :)

1586017239
magejohn
that sounds right

1586017252
magejohn
thanks :)

1586017422
andrewrk
magejohn, this is the directory that you're using with setOutputDir() ?

1586017435
magejohn
yeah, that's right

1586017456
andrewrk
I think that might be a good idea to change, but first can I ask, why not use the more idiomatic setup, with no output dirs?

1586017468
andrewrk
the default build step is "install" and the default install directory is "zig-cache"

1586017479
andrewrk
so your stuff will end up in zig-cache/bin/foo or zig-cache/lib/bar

1586017494
andrewrk
you can also change the default install directory in the build script

1586017529
magejohn
the reason is i'm trying to recreate a make based build system

1586017543
magejohn
but that sounds like an easier way, actually

1586017565
magejohn
not certain what the value is in holding too closely to the existing structure

1586017642
magejohn
just tried it that way, works great

1586017711
ikskuh
andrewrk: is it okay to have a function "export fn foo(x: *i32) callconv(.C) void" exported to C?

1586017728
magejohn
i was wary of the default install step, because i thought it might try to install into a system directory like many build systems do

1586017735
ikskuh
it's undefined behaviour to call this with a nullptr, but: is this checked in debug builds?

1586017789
andrewrk
magejohn, in my opinion the "default" should generally be targeted at project contributors, and package maintainers can pass the "OK I'm packaging this software now" configuration options

1586017860
magejohn
andrewrk: that's a great default, i like it. just not what i'm used to 😂

1586017876
andrewrk
ikskuh, yes it's OK to do that, and yes it will be UB if the C function calls it with nullptr, and I don't think we have a safety check for it. I vaguely recall a related issue

1586017893
ikskuh
okay :)

1586017902
ikskuh
would be a pain to have C pointers everywhere in the API

1586017909
ikskuh
if i know better what kind of pointer that is

1586017927
andrewrk
I agree that if the C function is not supposed to pass null, then *T is appropriate

1586017944
ikskuh
much better documented then as well

1586017950
andrewrk
I think we should safety check it, because we do have the ability to disable the safety for any functions that are "hot"

1586017962
ikskuh
yeah, true :)

1586017971
andrewrk
once gen-h gets resurrected, it will be able to place a nonnull attribute as well, and maybe even c compilers can catch mistakes

1586017990
ikskuh
yeah that was my thought exactly :D

1586018024
ikskuh
it could even generate a comment like "foo(/*many*/ int * items)"

1586018222
andrewrk
I was thinking we could propose a backwards compatible extension to C header files which allows annotating types with more information

1586018250
andrewrk
upstream projects could opt in to these extra annotations, and it would make translate-c work better (not just for zig but for all projects that want to generate bindings)

1586018272
ikskuh
something like "just a bunch of empty macros"?

1586018307
ikskuh
#define PTR_TO_MANY *

1586018312
ikskuh
int PTR_TO_MANY array;

1586018394
andrewrk
that's probably not sufficient, but yes something like that

1586018467
ikskuh
that's definitly a would-be-cool-thing, but i think zig has other problems right now :D

1586018520
mps
andrewrk: here is 'gcc -v' result on alpine armv7

1586018564
andrewrk
mps, sorry, remind me why you are showing me the gcc version?

1586018677
mps
andrewrk: I thought you want to see what they are, sorry

1586018984
TheLemonMan
Thalheim, do you have a .h handy with all the syscall numbers?

1586019205
Thalheim
TheLemonMan: yes, moment

1586019273
Thalheim
TheLemonMan: try this --

1586019335
TheLemonMan
damn that's wildly different than the one I robbed from Qemu sources

1586019533
xackus
should I do the planned mem.separate -> mem.split rename now?

1586019543
Thalheim
I took that from linux kernel sources a few weeks ago

1586019574
Thalheim
and modified only a few (2-3 entries) by hand, plus renamed some of them which had "3264" in them

1586019680
andrewrk
xackus, yes, with the old one set to @compileError to ease the transition

1586020706
xackus
some of the ArrayList functions have been deprecated for a while as well. what about them?

1586021366
r4pr0n
i just wanted to note for zig cc, that if i do make CC="zig cc" for st, which uses -lX11 in the CFLAGS, i get

1586021368
r4pr0n
x.c:11:10: fatal error: 'X11/Xatom.h' file not found

1586021370
r4pr0n
#include <X11/Xatom.h>

1586021804
marijnfs
thats in /usr/include so theres something wrong with the normal include search paths

1586021807
marijnfs
or you dont have it installed

1586021979
r4pr0n
well it compiles with clang and gcc

1586022013
r4pr0n
this is the makefile and config.mk if you may need it

1586022021
r4pr0n


1586022098
marijnfs
does: make CC="zig cc -I/usr/include" work?

1586022361
r4pr0n
well i guess it does

1586022365
r4pr0n
it outputs another error then

1586022401
r4pr0n


1586022591
andrewrk
/usr/include is added here:

1586022627
andrewrk
unless you are cross compiling, in which case there are no -I paths automatically added

1586022637
andrewrk
if you provide a -target argument, you are cross compiling

1586022652
andrewrk
it looks like you are intending to build natively

1586022665
r4pr0n
no i'm not, but i may have a too old zig version, it's could be a few days old

1586022675
r4pr0n
i'll install the latest from ziglang.org/download and try again

1586022680
andrewrk
what library are you expecting to provide `openpty`?

1586022732
r4pr0n
i think that's libc isn't it?

1586022741
r4pr0n


1586022768
andrewrk
ah, your -lX11 arg isn't getting passed to the compile command (which makes sense) so zig doesn't know to look for native include paths

1586022842
andrewrk
hmm this might call for some behavior adjustment in zig cc mode

1586022923
andrewrk
as for openpty, looks like zig's glibc is missign it. will fix shortly

1586022952
r4pr0n
ok, great

1586022965
andrewrk
libutil, interesting

1586022988
andrewrk
did not know that was one of the glibc libraries

1586025010
bsrd
What prevents zig from translating

1586025224
bsrd
nvm: // /usr/include/wayland-util.h:636:2: warning: TODO implement translation of DeclStmt kind Record

1586025760
andrewrk
r4pr0n, I have tests running for openpty (adding libutil support to zig's glibc). For the other thing, I filed this issue:

1586025864
r4pr0n
ah nice, thanks

1586026012
andrewrk
also that issue is easy, going to knock it out real quick

1586026219
r4pr0n
btw, i didn't find this on the issue tracker, but is it known that when you translate-c a c file with a int main() but doesn't actually have a return statement (valid in c) doesn't work when translated to c?

1586026439
TheLemonMan
andrewrk, can you remind me how to check if the current target has a given feature?

1586026500
r4pr0n
builtin.cpu.features?

1586026529
andrewrk
TheLemonMan, std.Target.sparc.featureSetHas(std.Target.current.cpu.features, .foo);

1586026542
TheLemonMan
awesome, thanks

1586026739
andrewrk
r4pr0n, if you pull latest master, both your issues should be resolved

1586026770
andrewrk
sorry I meant the earlier issues, I'm not planning on addressing the translate-c issue right now

1586026837
r4pr0n
nice, i'll look into it when it's on

1586027031
andrewrk
should be about 2 hours from now

1586027060
r4pr0n
ok, thanks for the eta

1586027392
andrewrk
TheLemonMan, one thing I noticed re: sparc is that we try to use "generic" cpu name, but we should use "v9" instead

1586027420
TheLemonMan
yes, that made me lose a couple of hours

1586027554
andrewrk
ah sorry, I should have mentioned it earlier. I noticed it last night

1586027574
TheLemonMan
the behavior tests are now working except for pretty much everything that involves f16

1586027635
andrewrk
that was fast

1586029972
TheLemonMan
welp, enough for today, cya

1586030353
andrewrk
cya

1586032930
ikskuh
is there an option to include from "non-package path"?

1586032970
ikskuh
i have a build.zig file in folder pro/lib/foo which i want to use from pro/demo/bar, but i'm not allowed to include it from there

1586033161
andrewrk
you could set the main package path to be the common root of everything

1586033170
andrewrk
--main-pkg-path pro

1586033185
ikskuh
can i do that with "zig build"?

1586033202
ikskuh
"zig --main-pkg-path .. build" ?

1586033226
andrewrk
so the build.zig file is importing from ../foo/build.zig ?

1586033274
ikskuh
yeah

1586033280
ikskuh
you know what?

1586033286
andrewrk
that makes sense. hmm let me think about this

1586033286
ikskuh
i'm doing it right, i create an overall build.zig :D

1586033296
ikskuh
one build file is better than 10

1586033314
fengb
Recursive build.zig considered harmful? :P

1586033316
ikskuh
but yeah, this may be a use case anyways

1586033328
ikskuh
fengb: it's actually quite useful

1586033334
ikskuh
i'm trying to figure out a nice pattern

1586033335
andrewrk
that should work. don't forget you can define any "steps" you want so that you can run one of those rather than the default

1586033346
ikskuh
yeah

1586033347
ikskuh
const lib = @import("libdunstblick/build.zig").createLib(b, "./libdunstblick");

1586033365
ikskuh
this is kinda awkward right now

1586033368
andrewrk
I'm sure this issue will come up again with the package manager, and it will be clear how to solve it. gonna not worry about it for now

1586033368
ikskuh
but it works :)

1586033383
ikskuh
yeah, better make that 0.6.0 release awesome :D

1586033408
andrewrk
there's plenty to do that we know needs to be done regardless

1586033432
ikskuh
yeah, true

1586033443
ikskuh
but different stuff has different priorities

1586033534
springworm
what's the recommended way to go about building against a C lib that has enums with duplicate tag values?

1586033574
springworm
something like enum myenum { A, LAST = A } myenum_t; ? will I have to translate-c all the headers and manually sanitize it?

1586033581
andrewrk
I believe in master branch zig's extern enums support this use case

1586033604
springworm
i'll give that a try!

1586033620
andrewrk
try `zig translate-c` on that example

1586033774
ikskuh
comptime string concatenation is a wonderful feature bt

1586033776
ikskuh
*btw

1586034204
ikskuh
pixelherodev: good idea with progressive implementations

1586034249
ikskuh
my code is now spiked with a lot of unreachable and now just progressivly removing one after another

1586034649
springworm
andrewrk: it worked! i'm impressed. it's a little bit funky to deal with the const @enumToInt versus the actual prefixed enum value

1586034676
andrewrk
yes the duality of enums as integers in c is unfortunate

1586034678
springworm
enum__snd_pcm_stream.SND_PCM_STREAM_PLAYBACK is a bit of a mouthful

1586034699
andrewrk
you should be able to use `.SND_PCM_STREAM_PLAYBACK`:

1586034745
andrewrk
in any context where the type is expected to be an enum this works

1586034781
ikskuh
hm

1586034789
ikskuh
translate-c is not made for translating a full C library D

1586034792
springworm
would i have to be in the same namespace? c.SND_PCM... is the const

1586035049
springworm
ikskuh: i'm not trying to translate ALSA, i just want to build/link against it

1586035065
ikskuh
yeah

1586035066
ikskuh
but me :D

1586035072
ikskuh
well, not alsa but picohash

1586035138
ikskuh
let's just say: in zig, a function pointer is const whereas in C it's not

1586035139
ikskuh
:D

1586035196
springworm
i sure hope picohash's fn pointers aren't mutating...

1586035202
ikskuh
nah

1586035208
ikskuh
it's a bug in translate-c

1586035475
pixelherodev
ikskuh, ;)

1586035490
pixelherodev
The one mitigation I set though was to use Git hooks to limit how many it will allow

1586035493
ikskuh
only the huge functions are left

1586039696
andrewrk
r4pr0n, the new tarballs are up with those fixes

1586039768
Snektron
andrewrk, what do you think about giving allocators some way to communicate a preferred allocation size?

1586039802
Snektron
As for example arenaallocator allocates in mem.page_size granularity, while that might not always be optimal

1586039829
andrewrk
you can always communicate such things out-of-band

1586039850
andrewrk
the Allocator interface is intentionally abstract, and hides such details

1586039878
andrewrk
maybe you don't want to go through this interface in this case?

1586039968
Snektron
I don't have any immediate needs

1586039982
Snektron
It just seemed logical

1586040003
r4pr0n
andrewrk: well it kind of works now... i don't get that error anymore, but i get the following, may that have something to do with the libutil fix?

1586040005
r4pr0n
Build Dependencies...dl [2] Semantic Analysis [37/50] /home/bernhard/.cache/zig/stage1/h/P4gMDHkbLChFMY2ZIS_4qg2o3a3W4foWFUp3XuwrW5vLkGdEG6TWzxwSpSZnpXel/util.zig:3:5: error: invalid token: ')'

1586040006
r4pr0n
);

1586040008
r4pr0n
^

1586040010
r4pr0n
make:

1586040047
andrewrk
can I see that file?

1586040092
r4pr0n
the cache file? it's just

1586040093
r4pr0n
comptime {

1586040095
r4pr0n
asm (

1586040097
r4pr0n
);

1586040099
r4pr0n
}

1586040115
andrewrk
hmmm

1586040175
andrewrk
what does `zig targets | jq .native` report on your system?

1586040215
r4pr0n


1586040232
r4pr0n
well that paste has gotten a god random name

1586040234
r4pr0n
good*

1586040240
andrewrk
ha

1586040244
FireFox317
xd

1586040347
andrewrk
ok my working hypothesis of what's happening here is glibc 2.17 has no symbols inside libutil (which would mean the `openpty` link error is correct), and zig is not handling generating an empty .so file correcctly

1586040412
r4pr0n
so the earlier error would be correct?

1586040456
andrewrk
hmm that does not appear to be correct - looks like that function was added in GLIBC_2.2.5

1586040714
andrewrk
r4pr0n, can you double check that you replaced all the lib/ files with the new tarball rather than only the binary?

1586040808
andrewrk
maybe for my sanity, sha256sum lib/libc/glibc/abi.txt

1586040837
r4pr0n
oh

1586040850
r4pr0n
that may be the problem, i thought it wouldn't be because it was statically linked

1586040867
r4pr0n
where to i have to put all those? /lib? (normal linux fs structure)

1586040914
andrewrk
zig finds its lib directory by searching relative to the binary. so you can do a standard posix file system install, or you can simply untar and run from there

1586040937
andrewrk
but the binary does depend on being paired up with exactly the lib/ files that it ships with

1586040964
andrewrk
well not necessarily exactly, but you get the idea. if you update zig you have to update the lib/ files too

1586040995
r4pr0n
when the ran executable from $PATH is a symlink, do i have to put it to the symlink or to where the symlink is pointing to?

1586041072
r4pr0n
seems to work when i put it at the destination of the symlink

1586041073
andrewrk
it will look for the lib files relative to where the symlink is pointing to

1586041085
r4pr0n
well it works now andrewrk, so the issue is fixed

1586041098
andrewrk
great. glad I didn't try to debug that, ha

1586041108
r4pr0n
yeah xd

1586041132
r4pr0n
sorry for wasting your time there

1586041144
andrewrk
no worries, it was equally likely to be my fault :)

1586041159
andrewrk
watcha doing btw?

1586041176
andrewrk
just curious, it's always interesting when someone is linking xll

1586041380
r4pr0n
oh it's actually not my c code, i just wanted to try building the terminal i use with zig

1586041459
r4pr0n
well it was the same error for my window manager, which now also works flawlessly with zig cc :D

1586041972
r4pr0n
though my terminal crashes due to illegal instruction while my window manager doesn't, i'm gonna try to isolate the problem

1586042218
andrewrk
r4pr0n, ah, you should know that zig enables UBSAN (undefined behavior sanitizer) if you do not disable it or add optimization flags

1586042257
andrewrk
if your c flags contain -O2 or -O3 that would disable it by default, or you can explicitly add -fno-sanitize=undefined

1586042264
andrewrk
or you can find the bugs and submit fixes upstream :)

1586042282
andrewrk
"UndefinedBehaviorSanitizer is not expected to produce false positives. If you see one, look again; most likely it is a true positive!"

1586042325
r4pr0n
yeah, disabling the sanitizer "fixes" it

1586042366
r4pr0n
i'll audit the code and look for the ub

1586042410
andrewrk
if you build with debug symbols, gdb should point you to exactly the line of problematic C code

1586042512
r4pr0n
is there any information why it thinks it's undefined behaviour?

1586042596
r4pr0n
and the weird thing is, this illegal instruction error only occurs, when i apply a patch to the terminal to add alpha support to the colors, but the part which gdb gives me is somewhere which is being edited by that patch so i don't really know what's wrong

1586042617
andrewrk
I believe clang has access to such hints, and if you compile the project with clang (not zig) and follow the directions on

1586042636
andrewrk
(this requires more libraries to be installed which is why zig does not offer this)

1586043058
r4pr0n
oh, that helped, i found the part, zig cc now also builds it successfully ✅

1586043559
r4pr0n
for what it's worth, zig actually showed the wrong line number, but clang showed the correct one

1586043705
r4pr0n
but i guess that's also because of those additional libraries

1586044005
andrewrk
hmm that's interesting. what do you mean zig showed the wrong line number? you mean in gdb the backtrace?

1586044013
andrewrk
or did you somehow integrate zig's debug info / stack traces?

1586044159
r4pr0n
er no, i mean the line number in gdb, when compiled with -ggdb

1586044186
r4pr0n
or rather yes, in the backtrace of gdb

1586044266
r4pr0n
well it was in the same function but a few lines off

1586044302
r4pr0n
and the c code gdb showed was the one that was on the line gdb showed, not the problematic code

1586044376
andrewrk
interesting

1586044420
andrewrk
well if that's to be improved that would be in clang's codebase

1586044459
r4pr0n
even though clang shows the correct one?

1586044465
andrewrk
it's clang either way

1586044502
andrewrk
they've clearly been prioritizing the use case where those libraries are compiled in, and not the use case of making the debug info accurate on the trap instruction

1586044540
andrewrk
which is understandable - but this other use case is also valid

1586044623
r4pr0n
well i guess i'll report that then, i'm just creating a minimal example

1586044638
r4pr0n
is it possible to use clang but not use those libraries?

1586044689
andrewrk
yeah, -fsanitize=undefined -fsanitize-trap=undefined

