1593931295
lemmi
wonderfull.. now i have this supposetly uber hashmap with tons of speedup because of vecorization and it works best with a vector length of 1 :D

1593933123
lemmi
the moment i use something different that vectorsize 1 it takes about a third longer. it then gets a little faster for 32 and it actually emits avx code.

1593934886
lemmi
hm.. might be the @ptrCast(*const bitmaskType, &v).* that's causing the slowdown. lots of mov instructions for nothing after the actual vector instructions

1593934930
lemmi
so there is hope that once the compiler bug is fixed this might work out just fine

1593939369
ifreund
lemmi: I don't see any weird mov's in this example:

1593941335
lemmi
ah, i was looking at objdump without -Drelease-fast

1593941405
lemmi
but i'm still not sure why this is so much slower. i may need to test this on another machine.

1593942984
lemmi
so. on ivy bridge the vectorsize doesn't seem to matter at all. at least it's not slower, so that's good thing :)

1593943084
lemmi
but i need to profile this somehow, how would i do that?

1593943385
ifreund
i mean, perf always works

1593943394
ifreund
I'm a fan of

1593943475
lemmi
sure, but specifically with zig or at least zig build?

1593943506
lemmi
oh wait.. prof was the thing that needed special stuff compiled in

1593943508
scientes
lemmi, you should use @bitCast()

1593943517
scientes
ptr-cast would be UB if zig did strict aliasing

1593943524
lemmi
scientes: can't there's a compiler bug

1593943537
scientes
well my PR worked with @bitCast...

1593943574
lemmi
scientes:

1593943618
ifreund
yeah, it wouldn't let me use @bitCast() in this case either

1593943654
lemmi
the size check seems to be broken

1593943663
scientes
lemmi, OC

1593944645
lemmi
scientes: is this a typo for IC (i see), or you do you actually mean of course and I'am doing something wrong?

1593944663
scientes
of course size check is broken

1593944843
lemmi
scientes: then how can i use bitCast?

1593944995
scientes
IDK, i didn't merge it. I had a test for that case when I wrote my version

1593945057
lemmi
huh

1593948613
lemmi
hm flamegraphs are not very helpful, too coarse.

1593953857
daurnimator
lemmi: tracy?

1593953872
daurnimator
lemmi: but also; what do you mean too coarse?

1593955990
KoljaKube
Is there a counterpart to @field that lets me create members from a comptime string?

1593956674
KoljaKube
OK, as far as I can tell that would be @reify

1593956736
pixelherodev
Yeah

1593956746
pixelherodev
Structure support is still hotly debated IIRC

1593956753
pixelherodev
@reify might support structs, it might not

1593957124
KoljaKube
I'm currently trying to create wrappers around shader uniform blocks, and having that feature would be awesome

1593957200
KoljaKube
An alternative would probably be accessors (i.e. something like operator=), but I guess that's contrary to the design goals of zig

1593957304
pixelherodev
Very much so, yeah

1593957313
pixelherodev
There's nothing stopping you from defining a function for it though

1593957317
pixelherodev
e.g. `.@"="()`

1593957402
KoljaKube
Is @ syntax I don't know or a placeholder?

1593957441
pixelherodev
@"" lets you put arbitrary unicode as an identifier

1593957471
pixelherodev
e.g. @"è§’" (an example I used because I had that kanji on screen at the time, not for any real reason :)

1593957526
KoljaKube
Ah, I see, thanks

1593957796
KoljaKube
Maybe I'm also overlooking other possibilities. What I need is a packed struct containing a variable number of fields of variable types, and at the same time fill out some C structs with metadata about that struct

1593957844
KoljaKube
I've been trying to go from the metadata to the type, but I guess I should look into @typeInfo and doing it the other way around

1593960621
josias
How do I get the length of a zero-terminated string?

1593960643
daurnimator
josias: mem.lenZ

1593960659
daurnimator
josias: though you probably want to just turn it into a slice? in which case mem.spanZ

1593964920
pixelherodev
just span should work, no? assuming the string type is sentineled

1593964968
ifreund
yes

1593966606
lemmi
daurnimator: well the flamegraph is telling me that i'm wasting my time in my map implementation. and that's something i knew already :D

1593966714
lemmi
most of the small stuff is inlined and so the stack traces all just report one function, so that's useless

1593966830
lemmi
i need to watch that tracy video again, i hope i can get it running

1593969218
xackus
ugh, looks like by fixing

1593969247
xackus
I thought it would be an easy fix

1593969877
xackus
compiler-rt needs to be fixed anyway

1593969910
ikskuh
oh true :D

1593975600
leeward
yeti: Turns out there's no need to go through the assembler step; build-obj works fine. Updated

1593975840
leeward
Does Zig know how to generate ISR code? I don't see anything about it on any of the doc pages.

1593976110
yeti
\o/

1593976195
ikskuh
leeward, callconv(.Interrupt)

1593976208
leeward
ikskuh: Huzzah, thanks.

1593977628
forgot-p1ssword
May I ask what the meaning of a comment with an exclamation mark (//?) is? I just saw it in std/log.zig

1593977677
leeward
You mean //! ?

1593977683
leeward
Top level doc comments

1593977684
scientes
!?!?!?!?!?!?!

1593977686
forgot-password
Ah yes, sorry

1593977713
leeward


1593977744
forgot-password
I see. Is that also inteded to be how you document libraries?

1593977781
leeward
Exported symbols should be documented with normal doc comments (

1593977817
scientes
except they are the same to the parser

1593977818
leeward
User (not maintainer) documentation that doesn't fit with a particular symbol should be in //! comments.

1593977823
scientes
so really the documentation belongs somewhere else

1593977874
leeward
scientes: I'm not sure what you mean by that. Documentation definitely belongs in the source so it can be generated.

1593977878
forgot-password
leeward: Okay, so when I want to show some examples and explain the overall idea of a file this all goes in the top level doc comments

1593977888
leeward
forgot-password: exactly

1593977905
scientes
leeward, i am saying that the documentation should mention that the parser doesn't care after the first two //

1593977934
leeward
The doc generator parser certainly does care.

1593977971
forgot-password
Will zig fmt format the code snippets eventually? Or maybe it already does that... Zig surprises me every single day

1593977984
leeward
Which code snippets?

1593977994
leeward
In comments?

1593978004
forgot-password
The code blocks in the doc comments

1593978047
forgot-password


1593978065
leeward
It doesn't now. I think it would need a way to know that a piece of text is code to be formatted.

1593978120
leeward
A heuristic might have false positives, which would be pretty annoying.

1593978143
forgot-password
Since this looks like markdown, I guess it could just determine that when you write ```zig it should format that block

1593978251
leeward
It's worth a proposal.

1593978348
forgot-password
Proposal = Github issue with respective flags?

1593978371
leeward
yep

1593978383
forgot-password
Alright then

1593981422
leeward
That's weird. The first thing that happens in the generated ISR when I use `callconv(.Interrupt)` is it enables interrupts.

1593981942
scientes
leeward, post?

1593981951
leeward
yeti: I got the interrupt version working. It's a bit weird that llvm emits an sei at the start of the ISR, but it blinks.

1593981954
leeward
scientes: hmm?

1593982056
scientes
oh for avr-8 interrupts

1593982135
yeti
yip... makes no sense... without interrupt, the ir wouldnt be run... so enabling it there looks strange

1593982442
scientes


1593982560
leeward
scientes: Yep, that looks like a test that ensures it does the dumb thing.

1593983460
leeward
Also, that signal handler test ensures that it doesn't emit an sei. That seems to be the only difference between signal and interrupt.

1593983487
leeward
Indeed, when I use callconv(.Signal) for my interrupt, it doesn't emit the sei.

1593983654
leeward
Yep, the ISR is functionally exactly the same as what GCC emits with ISR when I use callconv(.Signal). I think this is an llvm bug.

1593984567
stripedpajamas
should I be able to get ReturnType of a bound fn? currently it throws during compile with "type does not support field access"

1593985210
andrewrk
stripedpajamas, the language isn't really decided on what happens with bound functions beyond anything but calling them directly. I suggest to use the non-bound function for your purposes

1593985262
stripedpajamas
usecase is passing an iterator to a function and that function calling next and maybe returning the value

1593985291
stripedpajamas
i suppose i could hard code the return type for now

1593985927
forgot-password
Does a string literal of size n not automatically cast to [n]u8?

1593985964
leeward
[n]const u8?

1593986005
forgot-password
Then it says 'const qualifier invalid on array type'

1593986195
leeward
Huh, weird.

1593986245
leeward
const arr: [7]u8 = "1234567".*;

1593986267
leeward
but it looks like string literals want to be slices.

1593986283
leeward
const arr: []const u8 = "1234567";

1593986493
forgot-password
leeward: []const u8 works with a declaration, but not in a struct field, which is why it fails for me

1593986500
forgot-password
Is there a reason for that?

1593986527
forgot-password
Oh what, sorry, that's a slice...

1593986569
forgot-password
Haha, well, brain switched off for a second. Ignore my last three messages

1593990761
pixelherodev
andrewrk: how's the register allocator coming along?

1593990777
pixelherodev
Rather, how's the addition + test?

1593990976
andrewrk
it's solved on paper, but not in code yet

1593990984
andrewrk
you might call it... paperware

1593991078
fengb
And I thought my jokes were bad

1593991104
pixelherodev
I'm getting to work on CBE within ten minutes :D

1593991122
pixelherodev
Just finished some major improvements to scas :)

1593992057
andrewrk
having to give up my main dev laptop was pretty disruptive to my productivity on the register allocation stuff. that's why I switched over to a task that requires less focus, like the hash map thing

1593992085
andrewrk
dell promised me less than 5 business days to get it back. we'll see

