1585701149
frmdstryr
File.openRead is gone?

1585702061
yrashk
Trying to cross-compile C for macosx, getting an error including string.h:

1585702065
yrashk


1585702073
yrashk
anything I might be missing?

1585702110
yrashk
(zig cc and zig c++ behave the same way in this case)

1585702134
yrashk
same goes for stdio.h, etc.

1585707864
andrewrk
yrashk, macosx is unfortunately the most problematic cross compilation target

1585707876
andrewrk
we don't have the ability to provide libc for that target when cross compiling

1585708489
redj
looks like I might have to debug zig cc here

1585708490
redj
I don't know why it would say it can't find those .a files which it clearly compiled :P

1585708605
redj
andrewrk: I'm wondering if I could print the translated flags the zig cc will use when running the clan main or if it has any issues parsing any of these simple flags? I don't think it would...

1585708606
redj
zig cc    -L../ecere/obj/bootstrap.linux -L../libec/obj/bootstrap.linux obj/bootstrap.linux/ecp.o obj/bootstrap.linux/ecp.main.o     -lecereBootstrap -lecBootstrap -lm -ldl -o obj/bootstrap.linux/ecp

1585708644
yrashk
andrewrk: I remember doing something in this direction a few years ago; required a manual download of something from Apple. I can look into that.

1585709118
yrashk
Even if it'll still be a required manual step...

1585709957
yrashk
I believe I used this

1585710515
yrashk
I suppose we would only need the part where they extract necessary bits from that manual download, not the toolchain

1585712365
pixelherodev
Because I'm me, I'm writing a dynamic recompiler with which to test my initial compiler backend :P

1585712381
pixelherodev
In Zig of course :P

1585712395
pixelherodev
That way, I can (down the line) run the dynarec within the dynarec within the dynarec within...

1585713221
pixelherodev
Also going to run a recursive `s/zag/std`

1585713231
pixelherodev
I did it for amusement, but it's a genuinely bad idea

1585713247
pixelherodev
The convention is `std`, so that's what it should stick with

1585714683
pixelherodev
How would you check the number of fields in a struct?

1585714763
mikdusan
std.meta.fields(Foo).len

1585714824
pixelherodev
Ah, std.meta.fields is what I was looking for

1585714837
pixelherodev
I was going to do a `while (i < @memberCount` but that's gone not

1585714839
pixelherodev
s/not/now

1585716750
redj
is there a --verbose-cc for when using zig cc?

1585716766
mikdusan
-v

1585716802
mikdusan
mind the cache. if work has already been done, there won't be any -v to show

1585716840
redj
mikdusan: thanks, indeed -v seems to be doing what CC_PRINT_OPTIONS=1 does

1585716854
redj
but I think it's still not giving me the answer I'm looking for :(

1585716871
redj
oh, wait, that not right... info is there :P

1585716962
redj
no, not the right info after all...

1585716977
mikdusan
what is the info you are lookin for

1585716985
redj
mikdusan: could it be that -v works for clang but not for lld?

1585717067
redj
zig cc    -L../ecere/obj/bootstrap.linux -L../libec/obj/bootstrap.linux obj/bootstrap.linux/ecp.o obj/bootstrap.linux/ecp.main.o     -lecereBootstrap -lecBootstrap -lm -ldl -o obj/bootstrap.linux/ecp

1585717067
redj
lld: error: unable to find library -lecBootstrap

1585717067
redj
lld: error: unable to find library -lecereBootstrap

1585717067
redj
mikdusan: I want to know why my linking isn't working

1585717206
mikdusan
hmm.. I don't think we have all the verbosity that I'd like to see, but for now this

1585717326
daurnimator
someone should port

1585717430
redj
mikdusan: thanks, that gives me the lld options... I should look in the zig source to discover all these secret options :P

1585717503
mikdusan
-### is actually supposed to be (from clang):

1585717508
mikdusan
Print (but do not run) the commands to run for this compilation

1585717569
redj
oh, good to know

1585717609
redj
so now I'm wondering if it means zig didn't pass my -Ls along

1585717609
redj


1585717684
redj
mikdusan: any idea how I would go about debugging this in zig?

1585717702
redj
I guess I need to get a breakpoint somewhere... I have no idea where though

1585717757
mikdusan
last I checked the `zig cc` entry was src/main.cpp ; look for literal string "cc"

1585717792
daurnimator
redj: in main.cpp put one at the `while (it.has_next) {`

1585717794
redj
building debug zig

1585717799
daurnimator
redj: and print off it.kind

1585717837
redj
mikdusan, daurnimator: thanks

1585718014
daurnimator
"L" is of type jspd1 which should be of type `other` which should be passed directly through to clang...

1585718082
redj
daurnimator: are there any how to debug zig instructions somewhere?

1585718094
redj
(gdb) print it.kind

1585718094
redj
$2 = 2863311530

1585718104
daurnimator
redj: that bit is written in C++ :)

1585718112
redj
ah, true :P

1585718143
redj
I was expecting some enum value for it.kind though :S

1585718207
redj
enum Stage2ClangArg

1585718236
redj
should I get something between 0 and 26?

1585718290
redj
sorry, it not initialized yet

1585718366
redj
daurnimator: even though this part is written in C++ -- are there any how to debug zig instructions somewhere?

1585718602
daurnimator
redj: "debug zig instructions"?

1585718617
daurnimator
redj: its pretty much the same as debugging any traditional compiled language (C/C++/fortran)...

1585718637
redj
gdb understands zig symbols and all that?

1585718701
redj
so zig does call clang_argv.append for both my -Ls

1585718744
daurnimator
redj: yep. gdb will understand all the zig symbols; you just won't be able to call any functions that take comptime parameters

1585718754
daurnimator
(from the gdb command line that is)

1585718764
redj
that makes sense

1585719108
daurnimator
redj: if you don't already use it

1585719129
daurnimator
on the other hand, if you already use an IDE with gdb/lldb integrations, zig should fit right in

1585719178
redj
daurnimator: thanks, I should for sure install something like that

1585719261
redj
daurnimator: I would normally just use our "in-house" ide but I'm sure this will come with a number of issues to fix but it should already support debugging cpp

1585719284
daurnimator
what is your inhouse ide?

1585719336
redj
daurnimator:

1585719411
redj
(and source on github of course:

1585719538
redj
daurnimator: where does zig cc invoke clang/lld when it's not calling ZigClang_main directly?

1585719549
redj
is it that codegen stuff?

1585719557
redj
codegen_set_clang_argv(g, clang_argv.items, clang_argv.length);

1585720769
mikdusan
redj: just looked into it a bit. clang_argv is not being used by link.cpp which is where the embedded lld call is prepared

1585720821
mikdusan
and we can't just tell it to add clang_argv, because mixed in there are also non-lld options for clang

1585721030
redj


1585721078
redj
mikdusan: thanks... now I wonder how hi might go about implementing -L

1585721107
redj
I've seen the stream so I know a bit about how that should go...

1585721152
redj
I'm not clear though on the way things should go between main.cpp and link.cpp for this linking stuff...

1585721156
mikdusan
here's what I would do...

1585721190
mikdusan
struct CodeGen already has llvm_argv and clang_argv ; what it needs now is lld_argv

1585721205
redj
ah, that makes sense

1585721212
mikdusan
andrew created a .zig tool that runs this kind of thing:

1585721223
mikdusan
/opt/llvm-10.0.0/bin/llvm-tblgen ~/work/llvm/llvm-project/clang/include/clang/Driver/Options.td  -I ~/work/llvm/llvm-project/llvm/include -I ~/work/llvm/llvm-project/clang/include/clang/Driver

1585721241
mikdusan
by passing it 2 command args. and it uses .json output from above tblgen

1585721254
redj
yes, that's what I saw in the stream... I could probably figure out how to update that for -L

1585721261
mikdusan
to glean info about all kinds of command args . ok excellent

1585721276
mikdusan
that said, I manually ran tablegen and check this out:

1585721338
mikdusan


1585721354
mikdusan
the raw info about "L" is excellent. it says "Link_Group"

1585721368
mikdusan
and we can see that it is defined as stuff passed on to linker

1585721423
mikdusan
so tools/update_clang_options.zig would have to be enhanced to relay that info

1585721440
redj
yeah all this info about command flags is pretty cool

1585721445
mikdusan
not all of it. just what is needed. so "linker_flag" bit or somesuch

1585721487
mikdusan
then remember, this is .zig code. we

1585721488
redj
well, that should definitely be my first contribution

1585721500
redj
mikdusan: thanks for all the pointers!

1585721534
mikdusan
and eventually it ends up that main.cpp can see it. so here is an EQUIVALENCE between .zig and .cpp that is apropo:

1585721540
redj
yes, I saw the

1585721592
redj
mikdusan: I

1585721628
mikdusan
heh ok. just look at src-self-hosted/stage2.zig vs. src/stage2.hpp/.cpp -- see Stage2ClangArg or whatever

1585721629
redj
I might have to wait until friday :P

1585721657
redj
that is if I can resist giving it a go sooner :P

1585721783
mikdusan
while at it I would love to see other sub-tool flags tracked. clang says it supports a few but these sound like we will need them: -X{assembler,linker,preprocessor}

1585721798
mikdusan
anyhow good luck!

1585721849
redj
mikdusan: thanks, and I'll keep that in mind

1585723252
yrashk
on the cross-compilation front, does anybody have it working from linux to osx? I tried to compile an empty hello-world zig file for -target x86_64-macosx and it fails to start on OSX with undefined reference to __tlv_bootstrap; if I make it --single-threaded, it fails  to start with undefined reference to ___error

1585723284
daurnimator
yrashk: we can't target OSX yet because we don't have a source of free/open source libc headers

1585723293
daurnimator
(cross-target that is)

1585723308
daurnimator
if you know some, we could support it everywhere

1585723310
yrashk
daurnimator: I just had zig cc test.c work with C headers for OSX

1585723327
yrashk
well, not

1585723364
yrashk
I was able to use the instructions from osxcross project to extract Xcode.app and just point zig to its include directory

1585723397
yrashk
but I can't get cross-compiled artifacts (neither Zig nor C) start on OSX. Zig ones have those undefined references

1585723401
daurnimator
yrashk: are you dynamically linking libc?

1585723418
yrashk
and C one is failing with dyld: libdyld.dylib support not present for LC_MAIN

1585723433
daurnimator
yrashk: do you have `-lc` on your command line?

1585723468
yrashk
yes

1585723488
yrashk
I compiled C code with `zig cc  test.c -o test -target x86_64-macosx -I ~/osxcross/tarballs/xc/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include -lc`

1585723497
yrashk
resulting in the above LC_MAIN error upon startup

1585723510
daurnimator
yrashk: sorry, I think this is where my knowledge runs out

1585723534
yrashk
I compiled Zig code with `zig build-exe test1.zig -target x86_64-macosx -lc`

1585723546
yrashk
getting `dyld: Symbol not found: __tlv_bootstrap` upon startup

1585723574
daurnimator
yrashk: what version of OSX?

1585723606
daurnimator
yrashk: output of `ldd test` / test1?

1585723612
yrashk
10.15

1585723623
yrashk
there's no ldd on osx, but otool

1585723645
yrashk


1585723659
daurnimator
does that mean its statically linked?

1585723661
TheLemonMan
yrashk, cross-compilation towards osx doesn't work that well

1585723686
yrashk
I wish I can help making it work. I know osxcross makes cross-compiling with cc possible.

1585723696
yrashk
I am assuming we can learn from it.

1585723701
yrashk
it'd be a killer feature

1585723718
yrashk
even if requiring end users to download Xcode.app on their own. That's not super difficult.

1585723730
TheLemonMan
nah, you only have to wait until the new mach-o backend for lld is usable

1585723739
daurnimator
yrashk: looks like osxcross directs you to an apple link that requires an apple developer login?

1585723744
TheLemonMan
or use another linker that works

1585723751
yrashk
daurnimator: yes

1585723756
daurnimator
yrashk: unfortunate :(

1585723758
yrashk
free one, works

1585723763
yrashk
no need to pay Apple

1585723766
TheLemonMan
I'm cross-compiling Zig binaries by using ld64

1585723806
daurnimator
yrashk: I won't be potentially contaminating myself by agreeing to the apple license terms

1585723818
yrashk
fair

1585723989
yrashk
TheLemonMan: so you suggest it's better to just wait a bit instead of learning from osxcross (for a stopgap measure)?

1585724017
daurnimator
yrashk: no; that's just one roadblock of many

1585724185
yrashk
I guess I just started on this after being somewhat misled by

1585724217
yrashk
it does showcase x86_64-macosx cross-compilation

1585724271
TheLemonMan
not our fault if nobody took care of the mach-o part of lld

1585724288
TheLemonMan
grab your pitchfork and head to the apple headquarters

1585724339
yrashk
¯\_(ツ)_/¯

1585724513
daurnimator
yrashk: as I also said above.... if you know any way to get libc headers without agreeing to an apple license

1585724557
yrashk
I don't know of any. Only one with the license agreement as per osxcross method

1585724588
yrashk
Obviously it won't help to ship these with Zig. It'll only work as a manual method

1585724733
daurnimator
yrashk: the other thing is: if you're on OSX, I'd love to have some zig <> objc bridge

1585724757
yrashk
I'm actually on Linux. OSX is not my main machine at all

1585724809
yrashk
I was just all giddy about trying to cross-compile to osx because the intro suggested that's possible :)

1585724889
TheLemonMan
you only have to link the objects with another linker, no need to be snarky

1585724924
TheLemonMan
as I told you before I'm linking osx binaries using Apple's ld64 running under darling

1585724945
TheLemonMan
if you have osxcross you should also have some kind of linker that works

1585725141
yrashk
I didn't intend to be snarky at all. Genuinely interested in opinions on the matter.

1585725250
yrashk
I'll try out osxcross' linker once I build it

1585725259
yrashk
Haven't actually used it in a good while

1585725339
daurnimator
yrashk: perhaps its something we could add to the libc config file

1585725358
daurnimator
(see `zig libc`)

1585725457
TheLemonMan
FireFox317, yo

1585725470
FireFox317
TheLemonMan, morning

1585725480
TheLemonMan
I think I found the offending line

1585725542
FireFox317
For me the assembly looked so confused, first `mov r10, #0` and later on checking if it's zero

1585725549
TheLemonMan
in line L19976 there's a &stack->base where stack may be a nullptr

1585725613
TheLemonMan
the control flow is a bit messy because of the many checks inserted by the sanitizers

1585725668
TheLemonMan
you call ir_resolve_bool, then check if the return is zero, then check if stack_is_non_null is a legal bool (whose value is either 0 or 1, that's the cmp+bhi)

1585725688
FireFox317
TheLemonMan, i think that is indeed the case yes. When I steped through the code yesterday i didn't hit `ir_analyze_optional_value_payload_value`

1585725698
TheLemonMan
then you `tst r0,#1` that branches on stack_is_non_null

1585725724
TheLemonMan
r10 is initialized to nullptr and that's `stack`

1585725753
TheLemonMan
and clang adds some checks to make sure that `stack` is well-aligned and non-null because we're dereferencing it

1585725814
FireFox317
damn your debugging skills are so helpful here, i'll have some breakfast and then check if that was indeed the case

1585726034
TheLemonMan
afair doing pointer math on a null pointer is legal in C (and it's how offsetof is/was implemented)

1585726066
Kingsquee
iirc it's undefined behaviour but works in practice

1585726119
TheLemonMan


1585726132
Kingsquee
no, just everything useful ))

1585726626
Kingsquee


1585726633
Kingsquee
this repo doesn't have any Zig yet

1585726689
Kingsquee


1585726766
TheLemonMan


1585727226
Kingsquee
owo

1585727330
pixelherodev
"UB but works in practice" AHHHHH

1585727332
pixelherodev
AHHHHH

1585728155
FireFox317
TheLemonMan, i just added an extra variable for the `stack->base` and only assign it inside the if statement (when stack ptr is valid). Does that sound as a reasanable solution?

1585728187
FireFox317
found the same pattern somewhere else when `ir_analyze_fn_call` is called

1585728214
TheLemonMan
yup, that or `stack ? &stack->base : nullptr` is fine

1585728271
FireFox317
jup indeed, we are 1 step further, now another SIGILL

1585728279
FireFox317
in `ir_analyze_async_call`

1585728591
TheLemonMan
grab the disasm, I suspect it is yet another pointer-op on nullptr

1585729426
Kingsquee
pixelherodev: enjoy your (int8_t)127 + 1

1585729710
FireFox317
TheLemonMan, hmm its seems it is on ir.cpp:18985 `&call_result_loc->source_instruction->base` and source_instruction is a nullptr

1585729776
fengb
daurnimator: most of Apple’s libc headers are under permissive license with an exception being stdint.h for some reason

1585729852
TheLemonMan
FireFox317, are you sure call_result_loc is non-null?

1585729862
fengb


1585729978
FireFox317
when i do `p call_result_loc` it gives a valid pointer

1585730097
FireFox317
`p call_result_loc->source_instruction` -> 0x0

1585730303
TheLemonMan
oh well, that should not be null

1585730337
daurnimator
fengb: pls send a PR :)

1585730345
TheLemonMan
try to find who's producing that IR node

1585730466
FireFox317
TheLemonMan,

1585730484
FireFox317
could you check if it is really that nullptr that is causing the udf

1585730500
FireFox317
it's comparing r7 with 0, so definetly a nullptr check

1585730633
TheLemonMan
hmm, your paste starts from the udf instruction

1585730697
FireFox317
yeah it jumps back from the last line to the top line, and skips the udf normally

1585730801
TheLemonMan
oh I see, yeah that's a null pointer check (preceded by an alignment check)

1585730817
FireFox317


1585730864
FireFox317
TheLemonMan, i think i found it

1585731068
FireFox317
nvm :(

1585731926
FireFox317
TheLemonMan, regarding your earlier question, which IR node?

1585731940
TheLemonMan
call_result_loc

1585732374
FireFox317
when we enter the function, all the fields in call_result_loc are zero. at the exception the written field is true and it has a resolved location, but source_instruction is still zero

1585732593
TheLemonMan
your guess is as good as mine, you're in the land of the result_loc

1585732618
TheLemonMan
if you want a quick fix just s/&call_result_loc->source_instruction->base/source_instr/ and call it a day

1585732861
FireFox317
yeah we probably need andrewrk for this stuff. will try if that gets me an further

1585733314
redj
mikdusan, daurnimator: I guess I need to fill my first PR :)

1585733894
FireFox317
TheLemonMan, well that did fix the issue. succesfully compiled hello world on raspbian with a zig that is compiled with zig XD

1585733916
TheLemonMan
try running the behavior tests

1585733953
TheLemonMan
if you don't have enough ram to run the std.zig tests too you can selectively test some zig files

1585733964
TheLemonMan
this way you exercise (pretty much) all the code paths

1585734005
FireFox317
uhm, i can just copy the test directory and build.zig?

1585734022
FireFox317
because i just have the zig binary and lib/std on the raspberry

1585734078
TheLemonMan
oh, you can run the tests on lib/std/*.zig files then

1585734171
FireFox317
nvm, can just clone the zig repo on the raspberry and use the crosscompiled zig binary i guess

1585734815
FireFox317
hmm build.zig tries to find llvm-config

1585735298
FireFox317
TheLemonMan, assertion hit in const_ptr_pointee_unchecked_no_isf line 849

1585735623
redj
PR: zig cc: add support for -L linker arguments --

1585735940
FireFox317
ah, vector tests yeah did not expect these to work on arm32

1585735941
TheLemonMan
FireFox317, uh that's weird, what's the value of const_val->data.x_ptr.special ?

1585735994
FireFox317
the source_node is line 1672 in fmt.zig, which is a test which uses vector

1585736054
TheLemonMan
the vector tests should run just fine, they do work even in qemu

1585736312
TheLemonMan
dump the x_ptr.special field to find out why `result` is still null

1585736606
FireFox317
TheLemonMan, ConstPtrSpecialBaseArray

1585736725
FireFox317
TheLemonMan, ir.cpp:800 sentinel is null

1585736751
TheLemonMan
lel

1585737180
TheLemonMan
FireFox317, what's the array_val->type->name ?

1585737269
FireFox317
TheLemonMan, @Vector(4, bool) fmt.zig line 1673

1585737376
TheLemonMan
the real question is why/what is accessing memory past the end of the vector?

1585737471
FireFox317
hmm yes indeed, something in fmt apparently?

1585737567
FireFox317
maybe the typeinfo on the vector or something?

1585737620
TheLemonMan
yeah, check if the typeinfo on the vector is sane

1585739041
redj
broken binaries produced by zig cc :(

1585739057
redj
Illegal instruction

1585739134
ikskuh
redj: then not the binary is broken, but the code you've compiled :D

1585739148
FireFox317
redj, what platform did you compiled for?

1585739160
ikskuh
zig cc introduces UBsan, a facility that traps on undefined behaviour

1585739163
FireFox317
i'm working on arm32 now, and already had some illegal instruction fixes

1585739166
redj
I'm not trying to cross compile yet, I'm on linux

1585739214
ikskuh
how large is the code? only a small example or a bigger project?

1585739248
redj
larger project

1585739268
redj
I do see with strace that this is an issue in the code

1585739280
redj
but when I compile with gcc or clang there's no such issue :P

1585739339
FireFox317
redj, because they don't enable the checks by default, zig does. we want safe code :)

1585739391
redj
but I wonder how I'm going to debug this though

1585739407
ikskuh
compile with clang

1585739409
FireFox317
redj, gdb :)

1585739412
ikskuh
-fsanitize=undefined

1585739413
ikskuh
afaik

1585739417
ikskuh
or yeah

1585739424
ikskuh
use GDB, it will halt at the location uf UB

1585739492
FireFox317
TheLemonMan, the assertion is also hit when i just have a simple zig file with `const vbool: @Vector(4, bool) = [4]bool{ true, false, true, false };`

1585740350
redj
does llvm come with libubsan? I'm having difficulty linking...

1585740496
TheLemonMan
FireFox317, that's extra weird, what element index is it trying to deref?

1585740738
redj
going to pick it up again later today :P

1585740771
redj
still missing many __ubsan* symbols when linking despite -lubsan

1585740779
FireFox317
TheLemonMan, one thing that is bit weird in the backtrace it is saying: `const_ptr_pointee_unchecked_no_isf (g=<optimized out>, const_val=<optimized out>)`

1585740806
FireFox317
i have some trouble trying to put a breakpoint on that function because it is called very often, how would you do that?

1585740885
FireFox317
however i can go back up the stack to `const_ptr_pointee_unchecked` and from there const_val is not optimized out, which is how i printed the fields

1585741432
FireFox317
TheLemonMan, elem_index is 0, but `array_val->type->data.array.len` is also 0

1585744688
FireFox317
TheLemonMan, do you have some time?

1585745672
TheLemonMan
FireFox317, in a hour or so, is that a problem for you?

1585745695
TheLemonMan
redj, there's no support for the sanitizers runtime atm

1585746288
FireFox317
TheLemonMan, that's fine. Now it is an bug in the shr bigint implementation

1585750647
FireFox317
TheLemonMan, disassembly:

1585751280
andrewrk
redj, if you use `-fsanitize=undefined -fsanitize-trap=undefined` then there is no ubsan lib dependency; it will simply insert illegal instructions

1585752381
TheLemonMan
FireFox317, oh that's some classic UB, the shift count should always be < than the type bit count

1585752475
TheLemonMan
you should factor out `digit >> leftover_shift_count` as `(leftover_shift_count < 64) ? digit >> leftover_shift_count : 0`

1585752479
TheLemonMan
or something equivalent

1585752827
TheLemonMan
andrewrk, it seems that calling __getdirentries64 on darwin is frowned upon (

1585752997
andrewrk
hmmmm that's rather annoying but I suppose we have no choice

1585753068
andrewrk
I would make this low priority though. who knows, maybe they add a more useful api before zig becomes stable

1585753071
TheLemonMan
the silver lining is that we have one less alias to take care of :P

1585753117
andrewrk
it's also worth considering whether app store vs non app store are two different use cases of zig

1585753134
andrewrk
certainly we will have to deal with this issue at some point though

1585753215
andrewrk
yo apple maybe there's a reason everyone is calling getdirentries64 instead of the shitty libc api

1585753312
BaroqueLarouche
Apple: Why are you still using C ? Why aren't using shiny new Swift and latest new API we forced on you 2 updates ago

1585753322
BaroqueLarouche
Sorry lost all hope at Apple since that notarization bullshit

1585753422
shakesoda
BaroqueLarouche: heh, yeah, i dropped apple support too

1585753457
shakesoda
it's a shame, I really like using their systems, but as a developer I haven't exactly been given much confidence in dealing with them

1585753476
shakesoda
oh, you're using opengl? how about not. oh, you distribute outside the app store? haha cute

1585753512
shakesoda
you support older systems? one does not simply run on anything that is not blessed by your overlords

1585753528
yrashk
speaking of Apple and cross-compilation.. maybe we should put a footnote in the intro on the main page saying that cross-compiling from non-osx to osx doesn't currently work? otherwise, the intro kind of suggests it does.

1585753554
shakesoda
andrewrk mentioned that this exact fact might get them dropped from being listed as tier 1

1585753569
shakesoda
iirc

1585753585
BaroqueLarouche
GPU API is a mess

1585753599
TheLemonMan
HN is gonna have a huge meltdown if you demote OSX to tier 2

1585753611
shakesoda
TheLemonMan: sucks for HN

1585753617
yrashk
too bad!

1585753636
shakesoda
seems kind of like a difficult situation to avoid

1585753655
BaroqueLarouche
SAD

1585753661
TheLemonMan
don't forget

1585753702
TheLemonMan
hah Zig also ended up on n-gate

1585753747
shakesoda
somewhat topical, though, I might end up getting a work mac this (?) year

1585753770
shakesoda
i'd very much rather get a much rumored arm mac

1585753810
andrewrk
yrashk, I agree that point needs to be clarified on ziglang.org. will clean that up before the release

1585753825
shakesoda
anyway, much as i'm not dealing with their crap, there's a fair bit of work available for me in dealing with their crap for other people lol

1585753845
shakesoda
i do really like using macos though :(

1585753853
yrashk
in the meantime, I am trying  to convince osxcross to build on my nix :) to see if I can use their linker to use zig for cross-compiling to osx

1585754143
yrashk
(not that this is a high priority to me...)

1585754587
andrewrk
ok I demoted macos to tier 2

1585754727
andrewrk
note that this is not zig being worse on macos; rather it's the requirements of tier 1 raising the bar

1585754900
companion_cube
ahah andrewrk you're ballsy

1585754904
fengb
Tier creep

1585754924
fengb
Introduce a tier 0 🙃

1585754945
BaroqueLarouche
S tier, like in japanese video games

1585754978
andrewrk
freebsd and macos have equivalent support right now. but we can actually ship freebsd .h files and libc start files, which would bump freebsd to tier 1

1585755172
mikdusan
thanks c++ switch fallthrough. I hate you.

1585755289
andrewrk
those bugs can be gnarly

1585755408
fengb
andrewrk: I still think most of the headers can be included. The only one that wasn't usable I found (out of ~20 I opened) was stdint.h

1585755414
fengb
I can do a deeper audit

1585755458
shakesoda
mikdusan: the worst one for me is accidental = inside of if

1585755490
shakesoda
switch fallthrough is also real bad

1585755573
andrewrk
fengb, and that one is probably an accident. since these headers are meant to be compiled statically into proprietary software

1585755576
shakesoda
the = inside of conditions thing has compelled some people i know to reverse all their conditions into yoda form (if true == thing)

1585755601
shakesoda
to reduce the possibility of that error not being a compile error

1585755615
fengb
Yeah it looks like generic boilerplate where they forgot to relicense

1585755634
andrewrk
it's hard to make that argument though, and also hard to get apple to change it

1585755676
shakesoda
feels like a really weird bug report to make

1585755718
ikskuh
shakesoda, mikdusan: gcc and clang allow both of those mistakes to be errors by settings to corresponding warning to an eror

1585755726
fengb
From a clean room perspective... is it okay to just write a program to spit out the values and manually stitch that into a header file?

1585755743
fengb
I wouldn't be looking at the source file, just consuming its outputs

1585755752
shakesoda
ikskuh: the people in question use msvc, which i don't think says anything about it

1585755760
shakesoda
does cl have a flag for that?

1585755766
ikskuh
dunno

1585755780
ikskuh
never digged deep into cl, always preferred mingw on windows

1585755786
shakesoda
still a nasty language defect though :(

1585755800
shakesoda
good that gcc and clang have options here though

1585755803
mikdusan
ikskuh: ah nice

1585755819
andrewrk
fengb, I'm not sure but I bet you could work with someone who was not in the clean room with you, who tested your stdint.h implementation, while looking at the official one, providing you example test cases that pass/fail

1585755835
andrewrk
as long as you don't look at the official one I think this is allowed

1585755874
ikskuh
-Werror=parentheses  -Werror=implicit-fallthrough

1585755897
andrewrk
so person A is in the clean room writing the impl and can't look at official. person B is looking at official, not in clean room, and gives example test cases to person A. Person B is qualified to know when person A's job is complete

1585755903
ikskuh
oh, also -Werror=return-type

1585755911
ikskuh
^= compile error on missing return

1585755959
mikdusan
heh I found one fallthrough in zig's c++ source ... and ... andrew has a comment sticking out "// fallthrough" :)

1585756010
andrewrk
if there's a way to annotate that which allows us to enable the warning, I'd be in favor of that

1585756024
shakesoda
i'd be fine with fallthrough if it were just explicit

1585756030
shakesoda
like case foo: pass;

1585756081
mikdusan
andrewrk: sadly, the `[[fallthrough]]` annotation is minimum c++17

1585756082
ikskuh
andrewrk: for C++11 and the following:

1585756085
ikskuh
[[fallthrough]];

1585756091
ikskuh
oh, it's c++17?

1585756092
ikskuh
damn

1585756104
shakesoda
TIL

1585756104
ikskuh
i'm so used to that statement now :D

1585756138
shakesoda
i'm still on c++11 across the board since so little of interest has happened since

1585756149
shakesoda
i'd rather move away from c++ than update :)

1585756182
ikskuh
c++17 has a lot of nice features actually

1585756250
fengb
Back in my day, C++98 wasn’t even implemented by everyone! 🦖

1585756268
yrashk
I was able to build osxcross (not on NixOS but in an Alpine container) but so far that didn't help finishing the linking of Zig-built .o into something that'd work on OSX. I might as well give up on this effort for now :)

1585756269
shakesoda
as far as I can tell every c++ update just makes everything yet more complicated, and the software built against every newer c++ version becomes... yet more cryptic

1585756281
mikdusan
I have one word for a pleasant C++ experience: CFront

1585756368
andrewrk
mikdusan, ah that's too bad. and I do want to keep stage1 c++ code at an easier c++ standard to implement. I'd even stick to pure C if llvm/clang didn't bring in the c++ dependency

1585756376
shakesoda
fortunately zig is here to save me from such horrors ;)

1585756390
fengb
Well they keep stapling on new legs without removing anything

1585756421
ikskuh
shakesoda: wanted to to say: zig provides a lot of those features

1585756428
ikskuh
tagged enums, optional, ... :D

1585756429
mikdusan
andrewrk: there

1585756443
fengb
It can't ever get less complicated

1585756454
andrewrk
I'd be fine with that as long as it theoretically works on other compilers too

1585756456
ikskuh
echo > source.cpp

1585756471
shakesoda
ikskuh: and zig is designed such that almost every class of madness c++ has doesn't exist!

1585756474
andrewrk
by "works" I mean "doesn't cause compile errors"

1585756474
shakesoda
best of both worlds

1585756495
ikskuh
. The Microsoft C++ compiler currently does not warn on fallthrough behavior, so this attribute has no effect compiler behavior.

1585756518
ikskuh
should be possible to do a FALLTHROUGH macro

1585756519
shakesoda
I distinctly remember c++'s optional having a footgun designed in though I can't remember what

1585756524
shakesoda
maybe the way dereference works

1585756525
andrewrk
yeah I'm saying I'm fine with compiler-specific directives that are harmless for other compilers

1585756527
ikskuh
which resolves to nothing on compilers without support

1585756547
ikskuh
shakesoda: getting the actual address of the optional: &*foo

1585756550
ikskuh
♥

1585756622
fengb
I'm really happy that Zig solves 99% of my usecases without fuss. I'm happy to ignore that 1% itch

1585756629
shakesoda
fengb: same

1585756674
ikskuh
+1

1585756675
shakesoda
it also improves cases i had that i didn't realize i had, which i now realize are structural problems in... every program i've ever made

1585756688
companion_cube
like what? :)

1585756699
shakesoda
zig's allocators have spoiled me forever.

1585756721
companion_cube
ah yeah, nice.

1585756742
ikskuh
yep, same here

1585756744
ikskuh
also error handling

1585756748
shakesoda
yeah, that too

1585756817
shakesoda
the convention for passing allocators everywhere makes it feel really obvious in just how many things i have certainly not chosen the right tool for the job, because of using the default one

1585756842
ikskuh
also you start to think: "do i really need to allocate here"

1585756869
yrashk
speaking of passing allocators... is there a way to get system allocator in build.zig?

1585756905
shakesoda
ikskuh: yeah, for sure, although i work on relatively low powered machines where i've had that thought in mind for a long time now

1585756907
ikskuh
there's builder.allocator

1585756919
yrashk
I had to recursively walk a directory in build.zig to run all tests in all files, and that walker wanted an allocator (had to resort to a fixed size one)

1585756933
FireFox317
Thanks, TheLemonMan!

1585756954
ikskuh
run all tests in all files sounds like you don't reference all the files in your artifacts?

1585756964
shakesoda
further zig is evidence that one can have nice things without all kinds of implicit ways of hiding the truth of what is happening

1585756969
andrewrk
yrashk, the `b` thing has an `allocator` field which is just an arena for the whole run of zig build

1585756972
TheLemonMan
FireFox317, thank you! you're single-handedly removing all the UB from stage1 heh

1585756986
yrashk
andrewrk: oh, perfect -- I somehow missed it

1585756991
yrashk
<3

1585757002
andrewrk
yrashk, generally you can use that and don't worry about freeing anything since your zig build command is probably going to do some small amount of work and then terminate

1585757037
ikskuh
i learnt these days that i'm not supposed to delete my strings in the build() function :D

1585757077
andrewrk
yeah I mean it doesn't hurt anything, but it also doesn't help since that allocator is an arena

1585757129
ikskuh
it does hurt actually

1585757138
ikskuh
because the builder doesn't clone the string

1585757140
andrewrk
it's been fun implementing certain file system abstractions without memory allocations

1585757140
ikskuh
*strings

1585757149
shakesoda
is there an easy way to figure out the executable location for zig tests or build exec

1585757151
shakesoda
use case: debugger

1585757161
ikskuh
so if i calculate file paths, i am not to free them

1585757173
shakesoda
for regular outputs this is trivial, i'm just not sure what to make of tests

1585757204
andrewrk
makePath, deleteTree, atomicFile, none of these heap-allocate

1585757258
andrewrk
sure, plenty of things can go wrong when you try to do these operations, but at least running out of memory is not one of them

1585757293
shakesoda
andrewrk: knowing that build step has an allocator gives me a few spots to remove code :)

1585757303
mikdusan
wow... so I define a macro and clang actually LEARNED that macro and tells me to insert `ZIG_FALLTHROUGH; to silce this warning` in clang diagnostics

1585757306
andrewrk
it's the `*std.Builder` that has it

1585757317
shakesoda
right

1585757321
andrewrk
mikdusan, wow!

1585757347
fengb
Clang passes the Turing test

1585757365
mikdusan
the thing is self aware. I'm just waiting for it to clear up a few PRs now

1585757446
ikskuh
crazy

1585757488
ikskuh
i think most modern C++ compilers are more black magic than anything else

1585757570
shakesoda
just like most modern c++ code, including and especially the stl

1585757580
ikskuh
heh

1585757584
ikskuh
i read some code of libc++

1585757587
ikskuh
and that looks quite sane

1585757593
ikskuh
compared to libstdc++

1585757639
fengb
Aren’t all compilers black magic?

1585757669
shakesoda
there are definitely tiers of black magic involved

1585757689
shakesoda
some of them are dark magic, but i wouldn't call them black magic

1585757699
fengb
C++ is vantablack

1585757703
shakesoda
some of them are perhaps only grey magic

1585757745
mikdusan
anyone familiar with tokenizer; this is currently fallthrough. correct or missing break?:

1585757748
mikdusan


1585757785
TheLemonMan
there's no fallthrough there

1585757805
ikskuh
^=

1585757817
TheLemonMan
that was a trick question, what do I win?

1585757834
mikdusan
SawBarBar falls through to SawSlash; sorry my highlighting may have mislead

1585757844
ikskuh
wait

1585757858
ikskuh
yeah this is fallthrough

1585757861
shakesoda
that certainly does look like an error

1585757904
TheLemonMan
oh shit, the break is for the switch

1585757911
shakesoda
yeah.

1585757923
shakesoda
sinister, isn't it

1585757933
ikskuh
good we have code analysis for that

1585757944
andrewrk
nice catch mikdusan

1585757948
TheLemonMan
let's use the same keyword _everywhere_, what could go wrong?

1585757949
shakesoda
ikskuh: if only we had a language that outright forbid it... ;)

1585757964
ikskuh
😱

1585758015
ikskuh
btw, i'm planning a small socketing library written in zig targeting windows and linux by creating a thin wrapper around the berkeley sockets API

1585758017
ikskuh


1585758035
ikskuh
if anyone could look over my "plan"? would be cool to have some feedback on that before i waste my time :D

1585758076
TheLemonMan
no love for BSDs? :(

1585758131
ikskuh
TheLemonMan: simply said: i have no use for BSDs as in "i don't have a BSD running"

1585758139
ikskuh
same for other tier-2 OSses :D

1585758164
shakesoda
ikskuh: ...std.net?

1585758202
shakesoda
this mostly seems like some convenience functions you could put in std.net

1585758213
ikskuh
yeah

1585758220
ikskuh
this could be a std.net addition in the end

1585758228
ikskuh
but for now i want it a separate project

1585758233
ikskuh
as it needs to have a C API as well

1585758246
ikskuh
(want to power my C++ projects with the same API as the C projects)

1585758250
ikskuh
and zig projects

1585758283
shakesoda
1) add some convenience functions to zig std, 2) make a thin wrapper to export :D

1585758333
ikskuh
point is: i don't want to support

1585758345
ikskuh
but std.net should be build with async in mind

1585758365
shakesoda
this seems like the path of least resistance, in addition to it being convenient if we get some helpers in std

1585758393
ikskuh
i have no problem with merging it into std.net at the end

1585758408
ikskuh
but for now i want to have the ability to develop in a side "branch" (speak: own repo)

1585758463
shakesoda
dermetfan:

1585758502
dermetfan
shakesoda: thanks :)

1585758512
ikskuh
dermetfan: funky!

1585758589
shakesoda
this is exactly something I was going to look into doing myself for embedded debugging shaders/images

1585758607
ikskuh
same

1585758780
dermetfan
If you have sensible feature ideas let me know. For example I was thinking about a callback so you can compute and attach metadata on the fly

1585759309
xackus
what are your thoughts on a len() function in the new ArrayList API? for example: table_entry.attrs.items.len vs table_entry.attrs.len()

1585759355
andrewrk
xackus, my strong opinion is no len function; rely on items.len

1585759401
xackus
I thought you would say so

1585759785
fengb
How about we make it a packed union so .len and .items.len are the same? 🙃

1585760345
FireFox317
TheLemonMan, your fix was almost correct. `leftover_shift_count` was actually 0, so it was the line below doing `something << 64`. i think the only remaining issue is the assertion with the vector code.

1585760346
shakesoda
sounds a touch arcane

1585760424
TheLemonMan
FireFox317, oh right, that's the remainder from mod 64, it'll always be less than 64

1585760439
FireFox317
Yes indeed

1585760468
TheLemonMan
so, back to the vector

1585760482
TheLemonMan
you said the length is also zero... that's weird

1585760603
TheLemonMan
can you dump the data.array structure?

1585760674
FireFox317
for reference i'm testing it on a vector.zig file with a main and one line: `const vbool: @Vector(4, bool) = [4]bool{ true, false, true, false };`

1585760910
FireFox317
TheLemonMan, (gdb) p $7.type.data.array   $8 = {child_type = 0x82e0e50, len = 0, sentinel = 0x0}

1585760939
FireFox317
child_type.id is a bool

1585760951
TheLemonMan
thefuck.bat

1585761033
TheLemonMan
put a conditional bp on get_vector_type if len is zero

1585761090
TheLemonMan
wait, what's the type.id ?

1585761178
FireFox317
of array_val->type?

1585761265
TheLemonMan
yep

1585761274
FireFox317
TheLemonMan, vector

1585761286
FireFox317
specifically ZigTypeIdVector

1585761320
TheLemonMan
uh...

1585761336
TheLemonMan
is .type.data.vector ok?

1585761350
FireFox317
jup

1585761352
FireFox317
len = 4

1585761393
FireFox317
and elem_type again correct a bool

1585761425
TheLemonMan
ZigTypeVector and ZigTypeArray share the same first element, child_type in both cases

1585761488
FireFox317
jup but the len isn't shared and it should be?

1585761541
TheLemonMan
nah, that would just fix half of the problem, the sentinel is missing in the vector payload

1585761565
TheLemonMan
just add a switch on array_val->type and make it access the right payload

1585761618
TheLemonMan
oh wait, there's a lot of code pulling this shit

1585761649
FireFox317
ah the len in the vector is a u32 and in array it is u64

1585761713
TheLemonMan
yeah so I think the best way to solve this problem is to make the two layouts match

1585761732
FireFox317
i think if the len field in the ZigTypeVector is also u64 it would see the correct lengt

1585761766
FireFox317
and what about the sentinel? it shouldnt be in the zigTypeVector right?

1585761820
TheLemonMan
nope, but a lot of code is just switching on ConstPtrSpecialBaseArray without checking the base type

1585761843
TheLemonMan
so a lot of code is just reading garbage that's hopefully zeroed

1585761865
FireFox317
hmm yeah that's no good indeed

1585761926
andrewrk
FireFox317, mind updating the test case for #4896? I think the new error column is good. I locally ran the rest of the compile error tests and the rest pass

1585761939
TheLemonMan
IMO stage1 doesn't deserve any love, pad ZigTypeVector so that it has the same size as ZigTypeArray and make sure to zero this padding in get_vector_type

1585761949
andrewrk


1585761959
FireFox317
andrewrk, will do. also have some other fixes that i will put in there

1585762011
FireFox317
TheLemonMan, and i guess the vector length type should be changed to a u64? or the array length to a u32?

1585762039
TheLemonMan
yeah, the layouts must be identical

1585762061
andrewrk
it would be nice if there was a static_assert there at least to catch a regression

1585762069
FireFox317
yeah but i mean u32 vs u64

1585762078
andrewrk
if I understand correctly it would be easy to add a new field and break it

1585762125
TheLemonMan
u64 is fine I guess, some length fields use unsigned, other use size_t ...

1585762144
FireFox317
we love stage1 <3

1585762258
TheLemonMan
zig would've caught this problem in no time

1585762443
FireFox317
andrewrk, there weren't any more local patches in the bootstrap zig repo right?

1585762679
andrewrk
FireFox317, as of ziglang/bootstrap@c7f70e1feef7140 it is at ziglang/zig@9e019ed26 (I keep that README note up to date)

1585763538
andrewrk
mikdusan, are you up for the task of getting a more updated qemu for use in CI, so we can merge #4737 ?

1585763596
andrewrk
I'm guessing that task looks like following these instructions:

1585763608
andrewrk
I tried it on my system but wasn't able to static link

1585763638
andrewrk
really, anyone can do this task, we just need a tarball that we can download & extract on the CI

1585763673
mikdusan
sure, I'm just working on some 0.7.0 PR so I can put that on hold

1585765231
FireFox317
Yess!! All the behavior tests are passing on the raspberry pi! Thanks again, TheLemonMan!

1585765518
TheLemonMan
FireFox317, o/

1585765574
shakesoda
FireFox317: which one?

1585765620
FireFox317
shakesoda, running on armv8, binary is for armv7

1585767134
FireFox317
andrewrk, TheLemonMan #4896

1585767774
andrewrk
\o/

1585767891
fengb
Any chance for armv6 too? :P

1585767982
andrewrk
which one?

1585767999
andrewrk
v6, v6j, v6k, v6kz, v6m, v6sm, v6t2

1585768037
fengb
Uh... whichever for rpi1 / rpi0

1585768167
andrewrk
ah we have a known cpu for those: arm1176jzf_s

1585768173
andrewrk
it's v6kz

1585768221
fengb
Ah okay cool. This is so confusing >_>

1585768323
andrewrk
I need to improve flag handling of zig cc in order to test that one

1585768387
fengb
Is v6kz a subarch? So it's handled by CPU features in Zig

1585768423
fengb
nvm, I see it in cpuFeatures

1585768604
redj
andrewrk: there's no mention of -I in the zig cc issue (

1585768656
fengb
Reading Zig's list of cpuFeatures is so much more rewarding than hunting down hardware specs

1585772014
ifreund
so is it considered good style to drop the curly braces on if/while/for?

1585772049
shakesoda
no

1585772077
shakesoda
dropping them is just useful sometimes (for e.g. ternaries)

1585772121
ifreund
alright, i guess that makes sense

1585772163
ifreund
i must admit, I kinda miss blocks being expressions from rust

1585772201
andrewrk
blocks are expressions in zig, to be clear. what you're missing is the syntax sugar

1585772211
ifreund
fair enough

1585772231
andrewrk
but you know about `break` accepting a block label argument right?

1585772251
ifreund
having to label block you want to break from isn't super ergonomic though

1585772259
andrewrk
yeah everyone agrees with you on that

1585772355
fengb
At one point, Zig automatically returned the last line's value if it was missing a semicolon

1585772406
ifreund
interesting, do you have a link to the proposal removing that handy?

1585772592
ifreund
ah looks like I found it

1585773360
pixelherodev
... memory allocated via std.heap.direct_allocator is marked non-executable by default, isn't it?

1585773577
pixelherodev
Anyone know of something asmjit-like for C (so I can use it in Zig?)

1585774079
pixelherodev
mmap, there we go

1585775982
Kingsquee


1585775990
Kingsquee
what am I doing wrong?

1585776123
frmdstryr
Kingsquee the error says exactly what's wrong

1585776185
Kingsquee
I'd expect it to

1585776234
frmdstryr
Looks like it should be Qi(I, F) instead of Qi(comptime_int, comptime_int)

1585776379
Kingsquee
that would force the second and output Qi's to have the same parameters as the first

1585776392
fengb
You'll need to start abusing var

1585776404
Kingsquee
I want the first Qi to have parameters I, F, and the second Qi to have unknownI, unknownF

1585776413
fengb
We don't have generic generics (if that makes any sense)

1585776420
Kingsquee
and the output to be the result of some computations on I and unknownI, etc

1585776434
Kingsquee
similar to what I did with fn comptest, just with the... param params

1585776487
Kingsquee
fengb: how do I abuse var

1585776639
fengb
`pub fn floating_add(self: Qi(I, F), other: var) MuxTypes(Qi(I, F), @TypeOf(other)) {`

1585776653
Kingsquee
MuxTypes

1585776655
Kingsquee
:I

1585776708
fengb
Whatever name you want

1585776743
fengb
Type definitions must be concrete at some point. It can't resolve into something generic

1585776791
Kingsquee
so MuxTypes would be some function that computes what the concrete type would be

1585776794
fengb
You could possibly inline the new created type there but I'd expect that to look pretty fugly, and it wouldn't be reusable

1585776807
Kingsquee
but the whole idea of having Qi(I, F) is to have behaviour similar to i#

1585776812
fengb
Yes exactly

1585776820
fengb
`fn MuxTypes(comptime Qi1: type, comptime Qi2: type) type {`

1585776848
Kingsquee
HMM

1585776852
Kingsquee
I think I see

1585776875
fengb
It's generic on usage, but the definition needs to return real types and values

1585776888
Kingsquee
thanks, will play with this in a bit

1585776924
fengb
I think std.math.min does something similar by autoexpanding the returning int

1585777632
daurnimator
andrewrk: oh interesting that you put .outStream on all ArrayList instances; even though it only works on u8 ones

1585777852
daurnimator
also I'm happy that you renamed `std.Buffer` => `std.ArrayListSentineled(u8, 0)`

1585777858
daurnimator
that needed to happen!

1585777876
fengb
lol

1585777956
Kingsquee
fengb: YESS

1585777958
Kingsquee
thanks!

1585778199
andrewrk
daurnimator, yes thank you for pointing that problem out

1585778208
companion_cube
Kingsquee: is that a fixed-point arith module?!

1585778315
marijnfs2
what happened to Buffer?

1585778341
daurnimator
marijnfs2: see.... 7 lines up

1585778387
daurnimator
in 95% of cases people were using std.Buffer when they shouldn't be. The new name reflects what it actually does, and should hopefully steer people away

1585778430
marijnfs2
daurnimator: I see, catchy name

1585778439
marijnfs2
but yeah Buffer was pretty weird for this thing

1585778460
marijnfs2
ArrayList is still a bit double for me

1585778475
daurnimator
"a bit double"?

1585778480
marijnfs2
array and list

1585778488
marijnfs2
a list of arrays?

1585778491
marijnfs2
a list and also an array

1585778502
daurnimator
There are many ways to make a list

1585778512
daurnimator
ArrayList is the style of list where its stored as an Array

1585778515
daurnimator
vs SinglyLinkedList

1585778542
marijnfs2
why not array

1585778547
marijnfs2
isn't an array a collection of things

1585778549
marijnfs2
thats indexable

1585778552
ifreund
cause it's not fixed size

1585778576
daurnimator
we already have arrays in zig: [50]T

1585778586
BaroqueLarouche
Kingsquee: Thanks for the inspiration to improve my FixedMath struct

1585778587
marijnfs2
yeah

1585778596
marijnfs2
and vector is too c++?

1585778610
daurnimator
we already have vectors: @Vector()...

1585778623
marijnfs2
wait whats that then

1585778624
daurnimator
(they are simd vectors)

1585778627
ifreund
maybe I'm missing something, but I never understood why c++ called arraylists vectors

1585778628
marijnfs2
ah

1585778629
BaroqueLarouche
vector is a terrible name for a Dynamic Array type

1585778630
marijnfs2
damn names

1585778653
marijnfs2
i guess vector is more mathematical

1585778656
companion_cube
arraylist is also a terrible name, it's so nondescript

1585778677
daurnimator
Also note.... many people are probably looking for LinearFifo rather than ArrayList

1585778679
companion_cube
(is it an array or a list? is it a list of arrays?!)

1585778691
daurnimator
ArrayList for FILO, LinearFifo for FIFO

1585778705
marijnfs2
linearfifo?

1585778708
marijnfs2
damn

1585778719
marijnfs2
i mean it sounds funny

1585778719
companion_cube
why not just Stack?

1585778741
ifreund
stack implies that random access is forbidden

1585778746
ifreund
at least to me it does

1585778747
companion_cube
does it?

1585778748
marijnfs2
yeah i guess array is already used for [], vector is for math

1585778755
marijnfs2
so not much left

1585778770
companion_cube
ifreund: to me `list` implies it's a linked list, so… 🤷

1585778774
marijnfs2
to me too

1585778780
marijnfs2
but i guess we are biased

1585778810
ifreund
hey I'm not saying ArrayList is perfect, but I don't think Stack is better

1585778862
companion_cube
I mean, there's only one clear implementation of a stack :)

1585778878
companion_cube
arrayList sounds like some weird java contraption

1585778885
marijnfs2
i guess there are still a lto of choices how you would allocate

1585778890
marijnfs2
companion_cube: that is true

1585778985
marijnfs2
I didn't mind buffer, but maybe termination could be a parameter

1585778992
marijnfs2
Buffer(Terminated)

1585779069
shakesoda
oh we're bikeshedding today

1585779076
shakesoda
put me down for DynamicArray

1585779096
marijnfs2
thats not a bad name

1585779203
companion_cube
DynArray? :p

1585779324
ifreund
hey, that's prettty good

1585779698
fengb
"The name list is also used for several concrete data structures that can be used to implement abstract lists, especially linked lists and arrays." so sayeth Wikipedia

1585779733
fengb
I have no idea why I'm using middle english

1585779767
marijnfs2
list is used for structures that implement lists

1585779769
andrewrk
you're highlighting the fact that while Wikipedia can be perceived as a source of authority, such authority may be questioned as possibly being outdated or applying to another time or circumstances

1585779769
marijnfs2
nice wikipedia

1585779851
fengb
"In computer science, a list or sequence is an abstract data type that represents a countable number of ordered values, where the same value may occur more than once."

1585779856
fengb
I shoulda injected more satire. so sayeth the infallible Wikipedia

1585779912
marijnfs2
lol

1585780402
fengb
Maybe call it ArraySeq and LinkedSeq. Confuse everybody :P

1585780446
Snektron
ContinuousAreaOfMemory

1585780482
fengb
Is it really area if it's 1 dimensional? 🤔

1585780497
mikdusan
UnpackedAlignedStretchOfItems

1585780506
Snektron
Or just not export them as a name, but rather provide a function to select the properties you want

1585780543
Snektron
std.Container({.Associative, .ConstantAccessTime})

1585780565
shakesoda
DynamicSeeminglyLinearMemoryRegion

1585780608
mikdusan
std.Map({.LinearTime})

1585780832
marijnfs2
i'd rather just std.Map(std.LinearTime)

1585780865
marijnfs2
shakesoda: lol

1585780959
plumm
andrewrk: are there any plans to add @line() & @file() builtins?

1585781257
shakesoda
i wonder if blender's build stuff respects CC/CXX

1585781272
Kingsquee
BaroqueLarouche: @.@

1585781280
shakesoda
seems like a good large thing to attempt to compile with zig

1585781300
Kingsquee
companion_cube: yes, I've been trying to write it in rust but it's been going fairly poorly due to the hacky nature of type-level numerics

1585781356
Kingsquee
I have an idea for a sort of allocation-centric form of "compile-time floating point ops" using fixedpoint that might make them a lot easier to use in practice

1585781415
Kingsquee
tldr just allocate the maximum number of bits for int or frac that the operation could return, based on the number of int and frac bits of the values you're working on

1585781470
andrewrk
shakesoda,

1585781492
daurnimator
I don't mind DynamicArray as a name

1585781496
andrewrk
armv6kz is blocking on porting a few compiler-rt functions related to atomics

1585781587
ifreund
I think DynamicArray is the only one brought up by this bikeshed that would actually be an improvement

1585781630
companion_cube
Kingsquee: that's pretty cool tbh

1585781633
Kingsquee
frac bits can easily be infinite, so we'd just keep them at the user-specified amount, but int bits tend to grow or shrink in an expected way, so might be able to remove some of the cognitive overhead of fixedpoint

1585781644
Kingsquee
ye I'm pretty pumped ))

1585781718
Kingsquee
also zig has native fixedpoint on the roadmap, and has ops like `+` and `%+`, which fit the floating_add and fixed_add split pretty well

1585781727
Kingsquee
sooo

1585781747
Kingsquee
wups, +%

1585781867
Kingsquee
and then we MAKE THEM SIMD \o/

1585782336
andrewrk
shakesoda, so there ya go. if you want a raspberry pi zero tarball for 0.6.0, here's the issue:

1585782380
andrewrk
plumm,

1585782770
plumm
andrewrk: i asked because i was thinking about doing the logging module stuff and wanted a way of determining package

1585783138
pixelherodev
Could just look at the stack trace?

1585783148
pixelherodev
Cache address -> file/line

1585783168
pixelherodev
So that if you e.g. have a log call in a hot loop, it only looks it up in source info once

1585783232
pixelherodev
Also, I second (third? Fourth?) DynamicArray as a good name

1585783313
shakesoda
this is the chance! break every single zig program by renaming it on 4/1, so people think you're kidding!

1585783319
shakesoda
:D

1585783806
mikdusan
andrewrk: do you have an existing qemu-static tarball for CI?

1585783977
pixelherodev
I second shakesoda's proposal!

1585784008
pixelherodev
I had a suggestion for a bigger joke, but then I realized that it's a terrible idea to toy with people's compilations for a prank

1585784053
pixelherodev
"What did you do for April Fool's Day?" "I deployed a trusting trust compiler that causes all binaries to randomly display skull GIFs!" "wat"

1585784111
ifreund
i mean, there's already a PR open for a new DynamicArray API

1585784133
ifreund
might as well do all the breaking at once

1585784141
fengb
We gonna Thompson hack the Zig compiler?

1585784374
pixelherodev
I mean, the license does say "no warranty is implied," right? What are they going to do,

1585784377
pixelherodev
oh right

1585785239
andrewrk
mikdusan, no; we use apt-get to install it currently

1585785508
mikdusan
andrewrk:

