1603757948
g-w1
is * a person on irc? I dont see them in the people on it?

1603758090
waleee-cl
sounds like something with your irc-client

1603758266
ifreund
g-w1: * is /me

1603758672
dominikh
hey. I have this weird problem where the following trivial program hangs indefinitely instead of exiting:

1603760951
g-w1
try master branch (it works fine for me)

1603762676
dominikh
well, master can't build it at all:

1603762996
waleee-cl
dominikh:  is NetworkSubsystemFailed an error you have added?

1603763089
daurnimator
ifreund: I see I'm still winning the code golf ;)

1603763098
waleee-cl
bah. Why didn't grep find it in lib/std/os.zig

1603763101
dominikh
waleee-cl: the entirety of my code is this:

1603763164
waleee-cl
ah, change it to !void ?

1603763176
dominikh
same problem

1603763187
g-w1
it works fine for me

1603763446
g-w1
yep

1603763453
g-w1
master doesn't work for me either, lol

1603763479
g-w1
its a regression:

1603763481
g-w1
same error

1603763485
waleee-cl


1603763663
ifreund
daurnimator: try brainfuck, it's a lot more fun :P

1603763670
ifreund


1603763677
ifreund
I'm losing that one now too though :(

1603763683
g-w1
it doesn't only seem to be files, that miminal example also doesn't work.

1603763713
g-w1
is the input from stdin in code.golf?

1603763817
dominikh
g-w1: fwiw, the hang doesn't occur with "almost master", so looks like that got fixed :)

1603763897
g-w1
yeah

1603763909
g-w1
ig now there is another issue tho :(

1603764129
dominikh
I'll live with 0.6 for now. I don't like async/await, anyway :P

1603765296
pixelherodev
code.golf looks like it might be fun

1603765339
g-w1
im trying the brainfuc, its actually pretty hard. i dont wanna use recursive descent/state machine because space.

1603765420
pixelherodev
I wonder how efficiently the full thing could be compressed for the beer one...

1603765424
pixelherodev
Probably not well enough

1603765500
daurnimator
pixelherodev: to 414 :)

1603765506
daurnimator
or at least that's what I got to

1603765622
andrewrk
is anyone able to reproduce

1603765693
pixelherodev
daurnimator: you compressed the full string to 414?

1603765700
pixelherodev
Or you mean that's your winning size?

1603765714
pixelherodev
I think I might be able to get a working one under 400 without compression

1603765806
daurnimator
pixelherodev: that's the winning size; and I think I compressed pretty well

1603765808
pixelherodev
daurnimator, ifreund: dumb question, what'd you use to write to stdout? I was thinking of using write directly

1603765862
daurnimator
dunno how much I should give away from my solution

1603765868
pixelherodev
True :P

1603765892
pixelherodev
If only there was a std.debug.warn equivalent for stdout :(

1603765897
pixelherodev
s/warn/print/

1603765908
fengb
Add it in a PR :P

1603765972
pixelherodev
lol

1603766027
andrewrk
what you actually want is @import("std").fizzbuzz(); so I do not recognize this as a use case for std.debug.warn equivalent for stdout :)

1603766037
pixelherodev
lol

1603766053
pixelherodev
My "write to stdout" is nearly 100 chars right now

1603766081
pixelherodev
More than 100, actually. Ouch.

1603766089
pixelherodev
Maybe I should drop fmt.format usage...

1603766120
daurnimator
okay I'll tell you that my winning entry contains: `pub fn main()!void{const p=@import("std").io.getStdOut().writer().print;`

1603766162
pixelherodev
... I totes forgot that exists :P

1603766164
pixelherodev
Thanks :P

1603766181
pixelherodev
I've used that in freestanding, how did I forget it exists??

1603766257
daurnimator
if anyone can make that shorter I'd be interested.....

1603766274
daurnimator
e.g. `io.File{.handle=1}.writer()` is a few characters longer

1603766436
waleee-cl
that was surpsingly J-ish (the simultaneous assignment & usage)

1603766710
pixelherodev
oof

1603766714
daurnimator
waleee-cl: what was/is?

1603766754
waleee-cl
your stdout-main

1603766792
daurnimator
waleee-cl: huh?

1603766800
daurnimator
there is no usage there?

1603766855
waleee-cl
right. General look & feel similar to J then

1603766894
daurnimator
I don't see why it's similar to J....

1603766937
daurnimator
it's in most languages e.g. in javascript you could write `function main(){const p = require("something").foo().bar();`

1603767148
pixelherodev
I can't compress the full text below ~800 bytes :(

1603767152
pixelherodev
That would've been a fun strategy

1603767153
g-w1
would var p be better, less text

1603767189
daurnimator
g-w1: `error: variable of type '(bound fn(std.io.writer.Writer(std.fs.file.File,std.os.WriteError,std.fs.file.File.write),[]const u8,anytype) anytype)' must be const or comptime`

1603767193
waleee-cl
(re J, the J scores on code.golf is disappointedly long it sems)

1603767222
g-w1
oh, that makes sense, cool. you just ruined my master plan :)

1603767246
waleee-cl
s/long/high/

1603767348
pixelherodev
With bzip, I can get it down to ~575 bytes, but that's still not adequate

1603767356
pixelherodev
Impressive (given input is >10KiB), but not good enough

1603767418
pixelherodev
(and bzip isn't supported by stdlib so it's more a thought experiment than anything else :P)

1603767831
pixelherodev
Ugh, at 500 currently...

1603768089
pixelherodev
This does prove that manual compression into a Turing-complete language can exceed even the best "normal" compressors

1603768116
pixelherodev
New compressor idea: zz. A Zig-based compressor that compresses arbitrary text input into the shortest possible Zig program possible :P

1603768361
justin_smith
pixelherodev: this exists in the world of DSP, it's called generative compression

1603768469
justin_smith
simplest possible version: turn a sine wave, unit amplitude, at 440 hz lasting 3 years, into a tuple {sin, 1, 440, 94608000}

1603768498
justin_smith
of course real usage won't use such a dumb special case generator

1603769021
pixelherodev
Hmm. hmmmmm.

1603769567
justin_smith
pixelherodev: classic example might be a fractal generator, which could be said to contain ~infinite detail in a single formula (or even pi if you iterate down all the digits...)

1603769771
pixelherodev
ifreund: sorry! :)

1603770866
pixelherodev
Oh... oops.

1603770870
pixelherodev
I just spent at least an hour on it...

1603770934
pixelherodev
and daurnimator is still ahead of me by a bit! :P

1603772588
pixelherodev
daurnimator: I think I'm going to give up and let you keep first.

1603772602
pixelherodev


1603772840
pixelherodev
Ooh, I think I have it

1603773587
daurnimator
pixelherodev: I'm curious to see your solution

1603773727
pixelherodev
daurnimator: same :)

1603773732
pixelherodev
Trade?

1603773773
daurnimator
as the winner I'm not sure if I should ;)

1603773780
pixelherodev
I promise not to use yours ;)

1603773796
pixelherodev


1603773818
pixelherodev
Note that I removed all newlines, hence the paste there is ~twelve bytes longer than the one shown on the site

1603773823
pixelherodev
s/shown/reported/

1603773868
pixelherodev
I tried embedding the one-case into the while loop but it ended up being worse; dittor for moving both "of beer"s into `e`

1603773926
daurnimator
pmed

1603773960
pixelherodev
Ohhhhhh

1603773967
pixelherodev
Smart :)

1603774013
pixelherodev
daurnimator: I see a way to improve yours further and beat it, but as promised I won't :P

1603774026
pixelherodev
I'll play with it locally to avoid it registering :)

1603774057
daurnimator
I really tried to get rid of the `comptime` but `[]const u8` is longer

1603774194
pixelherodev
Yeah, that's a good point

1603774223
pixelherodev
Yours is definitely smarter, and I don't think I see any way to easily improve it...

1603774405
pixelherodev
daurnimator: figured out how to beat yours by one ;)

1603774428
pixelherodev
Still, thanks for that, I see what I was doing wrong now

1603774653
daurnimator
pixelherodev: oh? easy or hard change?

1603774728
pixelherodev
easy

1603774892
pixelherodev
Also, daurnimator, I found that []const u8 was smaller than comptime+inline whle

1603774894
pixelherodev
while*

1603774916
pixelherodev
Ah right, I;m using it a bit differently

1603774951
daurnimator
pixelherodev: note that without comptime you also need a type: `comptime var i=99` vs `var i:u8=99`

1603774967
pixelherodev
Yep

1603774977
pixelherodev
But again, I'm using a different hack which makes it up

1603774980
pixelherodev
Which doesn't work with comptime

1603774993
pixelherodev
Without switching to using comptime, I'm currently within seven of yours

1603775008
pixelherodev
And without another smart difference in yours

1603775042
pixelherodev
daurnimator: note that I'm reusing the []const u8 variable later :P

1603775086
pixelherodev
I

1603775111
pixelherodev
I'm trying to find ways to beat it with

1603775185
pixelherodev
Ah well, I'll take the loss on this one, thanks for helping me waste two hours of my life :P

1603775296
daurnimator
I trimmed 3 chars off

1603775363
pixelherodev
:)

1603775385
pixelherodev
Oof, I'm

1603775401
pixelherodev
Ah wait, there it is

1603775524
pixelherodev
I'm guessing the quine one

1603777131
daurnimator
pixelherodev: likely

1603777137
daurnimator
made the 99 shorter again :)

1603779978
daurnimator
and again

1603792907
ifreund
Ugh, I am also 1 byte off on quine

1603792963
daurnimator
quine cheat: the file name is code.zig

1603792974
ask6155
how do I use the -L flag? I have a folder with .h files and a folder with .so(s). In zig I get the error that it can't find `#include <x/x.h>` and I have put them in a seperate folder(for reasons). So how do I make zig find them?

1603792995
daurnimator
ask6155: -I

1603793017
ifreund
oh, I was using @src().file :D

1603793034
ifreund
there's the byte

1603793183
ask6155
daurnimator, ah that was it

1603793868
ask6155
I think this is unrelated but I'm getting an unrecognised glibc version error.

1603793868
ask6155
`unrecognised C ABI`

1603793960
ifreund
ask6155: are you using zig 0.6.0?

1603793967
ask6155
yes

1603793975
ask6155
latest release

1603794011
ifreund
your system glibc version is probably too new, this is an issue that has been fixed in master and won't be a problem with 0.7.0

1603794030
ifreund


1603794034
ask6155
I have 2.32-5

1603794057
ifreund
yeah, zig 0.6.0 only supports up to 2.31 iirc

1603794111
ifreund
there's some work around where you can manually specify the libc version but I forget the details

1603794141
ask6155
I tried using latest git version but I think it is broken due to the stage2 implementation

1603794152
ask6155
i mean the compiler

1603794163
daurnimator
-target native-native-gnu.2.31

1603794182
ifreund
ask6155: zig master works fine for me

1603794212
ask6155
is the zig binary in zig master the stage 2 compiler or the stage one?

1603794258
ifreund
it's still stage1

1603794285
ifreund
there is still a fair bit of C++, but more of the compiler was moved to zig recently

1603794445
ask6155
gnu.2.31 can't link to my lib.so (ldd can't find it)

1603794491
daurnimator
ask6155: what did you try?

1603794606
ask6155
zig build-exe file.zig -Iincludefolder -lc -llibx

1603794645
daurnimator
ask6155: add in `-target native-native-gnu.2.31` ?

1603794663
ifreund
iirc that didn't work

1603794681
ifreund
maybe using libc.txt would

1603794723
ask6155
I added that too. Then it said It can't find the library

1603794954
ask6155
also master branch requires llvm11 now. but it is not available in the repos yes

1603794963
ask6155
maybe I'll just wait for now

1603794986
daurnimator
ask6155: if it seems too hard; just download the nightly binary :)

1603795003
ask6155
ok I'll see about that

1603796656
ifreund
nice, got nix-shell working to let me compile zig using llvm11 binaries from nixpkgs while I wait for llvm11 on my distro

1603796687
ifreund
first time using nix, it's pretty nice

1603796787
dutchie
heh yeah, i did that exact thing to solve that exact problem :)

1603796799
dutchie
now if only i could figure out how to get nix to build zig binaries...

1603796913
dutchie
it was complaining that it couldn't write to $HOME/.cache, which makes sense because the nix sandbox won't let it

1603796933
dutchie
i tried setting XDG_CACHE_HOME to a directory in the build tree but then some weird stuff started happening

1603797075
dutchie


1603797087
dutchie
it seems to be importing builtin twice?

1603797203
dutchie
hmm, i can replicate with `XDG_CACHE_HOME=xdg_cache zig build`

1603798034
dutchie
ooh,

1603798039
dutchie
i shall add a comment

1603798300
ifreund
nice

1603798770
ask6155
why doesn't arch have llvm11 by now?

1603798847
g-w1
iirc they are waiting on zig 0.7.0

1603798856
ask6155
it's in staging and hasn't gotten into extra (yet)

1603798899
ask6155
oof

1603799011
frett27
andrew is in personal troubles now, i think the 0.7 can wait a bit, as there are all elements on github / master

1603804560
geert_
exit

1603804562
geert_
quit

1603804569
geert_


1603805427
data-man
ask6155: I use clang+llvm-11.0.0-x86_64-linux-gnu-ubuntu-20.04.tar.xz in Arch, installed to /opt/llvm

1603805439
data-man
And cmake -DCMAKE_PREFIX_PATH=/opt/llvm -DZIG_PREFER_CLANG_CPP_DYLIB=OFF for building

1603806309
ifreund
you can also just grab the arch package from staging

1603806378
Kena
Hello binary and digital people. Is the continue expression in a while loop evaluated after the expression in the loop? or it is before?

1603806747
earnestly
continue would necessarily have to be evaluated after the current loop iteration and before the next

1603807045
Kena
Thank you buddy.

1603807172
Kena
I have a interrogation for a long time and still do not understand, what is the interest (or the use case) for compiling from source instead of using some pre-compiled binaries?

1603807212
pixelherodev
In what context?

1603807264
g-w1
maybe you don't trust the binary, or there is not a binary released for your platform, or you want cpu-specific optimisations

1603807277
pixelherodev
Or you want to disable specific features

1603807288
earnestly
A main reason is for different architectures and combinations of features which would require an exponential number of pre-compiled binaries.  Another important reason is knowing if the binary you receive is actually the binary that would be produced from the source (reproducibility)

1603807294
Kena
I'm unable to answer that, I'm just trying to figure out why anyone would want to compile zig from source instead of merely downloading the pre-compiled binaries and use it as it is.

1603807303
pixelherodev
Ah, for Zig in particular

1603807309
earnestly
Someone has to also pre-compile binaries

1603807324
pixelherodev
Maybe you suspect a trusting trust attack :P

1603807330
Kena
lol

1603807341
earnestly
At least the problem has been countered

1603807356
Kena
Allright, thefore it is for security policy reasons.

1603807356
earnestly
Although not in zigs case because there's only one implementation

1603807364
pixelherodev
Kena: that's

1603807368
pixelherodev
It depends on who's doing it

1603807375
pixelherodev
earnestly: I meant in the C++ compiler ;)

1603807383
earnestly
pixelherodev: Hm?

1603807395
pixelherodev
I'd say "a very smart trusting trust attack" but frankly it'd still be less complex than the compiler itself.

1603807398
earnestly
pixelherodev: Defeating the Trusting Trust problem requires multiple implementations

1603807410
Kena
Ah yes, missed the other replies, thanks guys :)

1603807415
earnestly
See Wheeler's thesis on Diverse Double Compiling

1603807419
pixelherodev
"Defeating" trusting trust requires going all the way back to the assembler.

1603807427
earnestly
No, see reference

1603807431
pixelherodev
I have.

1603807453
pixelherodev
But at a certain point you can start asking, "hey, if the

1603807486
pixelherodev
What if `sha256` is compromised and is lying when it says that the produced compilers match?

1603807502
pixelherodev
or `ls -l` was compromised to give the wrong length when a compiler was detected?

1603807503
earnestly
It's further a problem when you know proof doesn't compose

1603807517
earnestly
So you have to audit the entire system as a whole

1603807523
pixelherodev
The obvious answer is to use a system simple enough that you can inspect it with a logic probe ;)

1603807559
pixelherodev
e.g. a z80-based system. You can literally see what it's reading from memory -

1603807571
earnestly
Or Wirth's Oberon heh

1603807581
pixelherodev
At a certain point, it's more an exercise in paranoia than a legitimate concern

1603807581
g-w1
is z80 used anymore? is it a mainframe os?

1603807595
pixelherodev
I use the z80 personally, and I'm working on designing a physical computer using one

1603807611
g-w1
you use it as a day to day os?

1603807624
pixelherodev
I was initially doing that as a hobby project for a game system, but now I genuinely want to use such a system for typical tasks (word processing, for instance)

1603807636
pixelherodev
g-w1: not *yet*, but hopefully within the next two years

1603807646
g-w1
nice

1603807657
earnestly
pixelherodev: Are you using zig with it currently?

1603807664
pixelherodev
Hahahahahaha, with a *z80*?

1603807670
earnestly
For it

1603807684
earnestly
(Does llvm even support it...)

1603807686
pixelherodev
I want to add a z80 backend to stage2 eventually, but I'm focusing on CBE for the 0.8 release

1603807698
pixelherodev
There was a revived patchset for LLVM-z80 support a few weeks back I think

1603807793
pixelherodev
There's a couple attempts going on, and at least a dozen abandoned ones ranging back over the past fifteen years.

1603808248
Kena
I hope you will succeed in your project.

1603808610
earnestly
Kena:

1603808648
earnestly
Why you might want to build things yourself

1603808777
Kena
Decidedly, you made my day, I will vote for you as the new chairman for noobies corporation.

1603808943
Kena
But maybe the guy's account suffered from social ingeneering to provide the community with false information, so logic probe fails here :D

1603809049
Kena
Or maybe the owner's account is legitimate but he secretly suffers from schizophrenia and even Ocaml or Coq can't beat it with their formal proof-driven theory.

1603811951
Kena
It is desirable for a software to be written in order to compute the more possible informations at compilation time or is insane at a certain point?

1603812190
earnestly
The earlier you can find errors the better

1603812222
dutchie
also, normally you compile once and run often, so if you can compute things in the compile step you end up saving time overall

1603812434
earnestly
Stepanov often jokes about how programmers tend to compute the same thing repeatidly in their software

1603812527
earnestly
Even if it's trivial things like n / 1024 / 1024, which could be n / 1024 * 1024, which is then just n / 1048576.  One less division.  Or in other cases where a function computes some aspect of its input and then throws it away.  E.g. printf usefully returns the number of bytes it wrote instead of discarding it

1603812728
pixelherodev
earnestly: except that those are optimized *anyways&

1603812739
pixelherodev
*

1603812745
pixelherodev
Not the printf example, that's definitely true

1603812759
pixelherodev
But anything involving basic arithmetic is downright trivial to optimize

1603812790
pixelherodev
I'd disagree with the idea that "as much as possible should be put in to compile time"

1603812824
pixelherodev
Some things are more expensive to compute at compile time than at run time by such a large margin that the time "saved" at runtime is so miniscule you'd have to run the program for millenia to make up for the cost incurred by a single compilation

1603812854
pixelherodev
I'd say that for

1603812891
pixelherodev
But, since programmers spend most time (hopefully) in debug mode, that rule absolutely doesn't hold true - and the complexity needed to selectively build pieces at compile time is nowhere near worth the little bit it would gain

1603812936
pixelherodev
What's the old line, "programmer time is expensive, hardware is cheap?" Faster compilations = less programmer time = money saved. You're welcome ;)

1603813322
Kena
Thanks for the explanations, I always asked myself if the industry, even the embedded devices or internet of things, would benefit from software mostly computed at compile time.

1603813434
earnestly
pixelherodev: His perspective is not about making assumptions of the compiler, obviously in that sort of context it doesn't make sense

1603813513
earnestly
pixelherodev: This is an example of the kind of thing he starts out with:

1603813571
Kena
So time is more important than space I can conclude.

1603813604
earnestly
It depends

1603813610
pixelherodev
Depends on who you ask, what project you're working on, your priorities, etc

1603813941
g-w1
this code doesn't work. it says that it found a [13]Card instead of [52]Card. what am I doing wrong const deck_arr: [52]Card = [52]Card{ .two, .three, .four, .five, .six, .seven, .eight, .nine, .ten, .jack, .queen, .king, .ace, } ** 4;

1603813995
dutchie
the right hand side has 13 members

1603814011
g-w1
ah. i had to do this: const deck_arr: [52]Card = [13]Card{ .two, .three, .four, .five, .six, .seven, .eight, .nine, .ten, .jack, .queen, .king, .ace, } ** 4;

1603814019
dutchie
it parses as ([52]Card{ .two, .three, .four, .five, .six, .seven, .eight, .nine, .ten, .jack, .queen, .king, .ace, }) ** 4

1603814032
dutchie
you can just do [_]Card{ ... } to have the compiler count them for you

1603814048
g-w1
yeah

1603816697
johnLate
Where is defined what `zig build test-std` does? `git grep test-std` only finds CONTRIBUTING.md and a CI script...

1603816731
ifreund
in the build.zig

1603816790
ifreund
specifically addPkgTests() called with the name "std"

1603816794
g-w1
I think it is a seperate string that is combined

1603816796
g-w1
test_step.dependOn(tests.addPkgTests(b, test_filter, "lib/std/std.zig", "std", "Run the standard library tests", modes, false, skip_non_native, skip_libc, is_wine_enabled, is_qemu_enabled, is_wasmtime_enabled, glibc_multi_dir));

1603817006
johnLate
and this line basically includes all   `test "…" { … }`   sections from lib/std?

1603817174
johnLate
(I'm trying to figure out how to add a test for

1603817270
g-w1
im pretty sure that is true. in std.zig:94 you will find the thing that does all the magic.

1603817932
pixelherodev
Or at least

1603817986
g-w1
where is the rest of the magic?

1603818316
geert_
Following the Zig language for awhile and made some important tools with it. The question is how could I contribute with coding and docs? Just ask on an issue on Github or is their a better way?

1603818495
g-w1
I got started by looking at some of the issues on github with the contibutor friendly tag and then trying to solve them. I found the ones relatting to main.zig to be the easiest, probably because it has bugs because it is pretty new. this one looks fairly easy if you are farmilar with tokenizers:

1603818520
geert_
thanks

1603818537
g-w1
I have only made 2 prs and working on 3rd so I am not expert by any means

1603818540
geert_
Just fix them and not ask to fix them in the comments?

1603818548
g-w1
yeah!

1603819352
johnLate
Is there any difference between "!void" and "anyerror!void"?

1603819846
andrewrk
the former error set is inferred; the latter is the global error set

1603820203
Kena
the inferred one does NOT benefit from additionaly optimizations right?

1603820247
andrewrk
in theory it's possible, in practice not likely. the main purpose of inferred error sets is to help you, the programmer, cover all the edge cases

1603820283
companion_cube
imho, type inference should

1603820305
companion_cube
(i.e. a fully annotated program is the same as the program with some types inferred)

1603820311
Kena
That reminds me, one principle of Python or D (don't recall): explicit is better than implicit.

1603820365
companion_cube
always thought it was rich that python had that in its zen

1603820451
Kena
Please does the `|_|`represent a anonymous payload?

1603820480
companion_cube
_ just means to ignore a value

1603820547
andrewrk
companion_cube, type inference could potentially provide more information to the optimizer, is all

1603820559
Kena
But when |_| is associated with a for loop, you can't ignore it. I'm speaking about the Labeled for example in the doc (see:

1603820597
Kena
It's just a captured value (or payload) without an name, is that right?

1603820626
companion_cube
andrewrk: ah, if the type inferred is smaller than anyerror? yeah

1603820638
companion_cube
but then it should still be the same as writing the exact error set

1603820642
travv0
is the logic behind not having compiler warnings that something is either fine to do or it's forbidden?  i remember seeing andrewrk say in an issue that no warnings is deliberate and was wondering if there was more info somewhere on the decision

1603820654
companion_cube
(the LSP should be able to suggest the exact error set, ideally)

1603820665
justin_smith
Kena: in other languages _ is a valid identifier, and by convention it's used for values you need to exist but don't actually touch

1603820685
travv0
cause i've been bitten by stuff like forgetting to use an argument or something in a function before and wished there was a warning about it

1603820694
companion_cube
afaik in all languages that have destructuring/pattern matching, _ is the wildcard

1603820738
justin_smith
companion_cube: but it's used when you aren't interested in binding the value in that position, right?

1603820784
companion_cube
yes

1603820794
companion_cube
matches anything, discards the value

1603820881
Kena
But it is interesting for the compiler? I mean does `|_|` allow to allocate a smaller memory space for the payload than it would do with `|value|` syntax? In a for or while loop context I mean.

1603820910
justin_smith
Kena: the compiler shouldn't warn / error if you rebind _

1603820922
Kena
Allright, thank you.

1603820935
justin_smith
usually shadowing does error

1603820966
justin_smith
Kena: I guess hypothetically you could save stack space if you know you aren't using a block local?

1603821095
Kena
Yes, I beginning to grasp some wisdom shards along the way. I hope there will be more memory management-related informations in the docs during the upcoming release.

1603821136
Kena
It's cleary the kind of mechanics that it seduces me and push me into the low-level language segment.

1603821145
justin_smith
I would if that would be saving the space of a full copy of the object, or just a pointer?

1603821173
Kena
a pointer! :D

1603821276
companion_cube
I imagine it's just like ignoring the result of some expression

1603821281
companion_cube
the compiler is free to not store it

1603825596
Kena
Please do you know about an article that explain how does a compiler work? like the lexical analysis, the parsing, the analysis semantic, code generation and linking. It could help a noob like me to better understand how zig deals about memory.

1603825627
earnestly
Kena: Look up the Dragon Book

1603825868
g-w1
Kena: honestly, the self hosted compiler is a very good example for the frontend of the compiler. Right now I am writing a compiler to learn, and I kinda just winged it for the semantic anlysis and codegen. the llvm tuturial is also pretty good. here are some resources I found useful when writing my compiler

1603826016
Kena
Thanks, do you think "Compilers: Principles, Techniques, and Tools" from Dragon book published in 2006 is nevertheless better than the most recent ones from other publishers?

1603826053
g-w1
I havent read but have heard that it is kinda dated.

1603826059
Kena
thanks g-w1 that's very kind.

1603830568
Kena


1603832610
g-w1
I am getting a compile time error because an inline for exceeds 1000 branches, what can I do to fix this. is there a @builtin to help?

1603832744
ugla
g-w1: yes there is

1603835218
frmdstryr
ldd warning firmware.elf.o:(.ARM.attributes): unknown THUMB_ISA_use value: 3

1603835249
frmdstryr
lld uses blx instruction, no object with architecture supporting feature detected

1603835314
frmdstryr
Anyone have any info on what that means / how to fix it?

1603835406
frmdstryr
It's an stm32l5 (cortex-m33)

1603835609
justin_smith
I'm trying to use a slice with an API that takes a "user data" void pointer

1603835635
g-w1
slice.ptr

1603835648
justin_smith
I'm able to use @ptrCast to make a *c_void from the slice, but how do I get the slice back from the void?

1603835692
justin_smith
I can only provide one arg, I'd like to pass the slice so that I know the count when I get it back

1603835698
justin_smith
or do I need a sentinal null?

1603835942
justin_smith
g-w1: that gets the pointer, but loses the length info, what I really want is to round trip the slice itself

1603835957
g-w1
does the length change after you pass it to the api

1603835961
justin_smith
never

1603835977
justin_smith
all it does to my void pointer is pass it back to my callback

1603835980
g-w1
so why dont you just pass the pointer and keep the length with ptr.len

1603835997
justin_smith
g-w1: because my callback only gets the data from the API

1603836048
justin_smith
g-w1: I can't "keep" anything, I register a handling function and a void pointer, that function is called later with that pointer as an arg

1603836053
g-w1
ohh. If this were me I would make an array with [len, ...rest of elements] and then pass that.

1603836066
g-w1
so you know the first element is the len

1603836076
justin_smith
g-w1: I was trying to use a slice for this, because I thought that was what a slice was

1603836092
g-w1
ok

1603836109
justin_smith
but I couldn't get the conversion from void back to slice, and maybe that's the wrong way to do this

1603836135
tane
justin_smith, take a pointer to slice, cast it to *c_void, then cast that back to pointer to slice

1603836137
g-w1
there should be a way.

1603836161
justin_smith
tane: OK, I thought I was doing that, clearly I'm doing something else stupid

1603836178
tane
what is the preferred paste service herE?

1603836223
g-w1
I don't know if there is one

1603836313
tane
justin_smith,

1603836323
tane
maybe something along these lines will work

1603836364
justin_smith
tane: thanks, that looks helpful

1603838231
andrewrk
this issue #6830 is such a thorn in my side right now

1603838697
ifreund
that's certainly a weird one :(

1603842057
rom1504
can you ssh to this azure devops CI ?

1603842099
andrewrk
no

1603842114
andrewrk
you can repro it on a macos computer though

1603842186
rom1504
I found

1603842203
rom1504
might be interesting to try github action

1603842241
rom1504
the azure devops yaml you have looks surprisingly similar to github action yaml, that's interesting

1603842337
rom1504


1603842366
rom1504
but anyway for sure if you can reproduce locally it's easier and better

1603842456
someguestguy
so If I'm trying to print the name of a given enum value like this

1603842457
someguestguy
@tagName(@intToEnum(qs_msgs, queue_status >> 16))

1603842490
someguestguy
you end up with undefined behavior if your input value isn't part of an non-exhaustive enum

1603842545
someguestguy
I want to do a if-check to either print the tag name or not if the tag is present, but I can't really just return "no tag name" but I don't know how to use the builtins (typeof, typeinfo, etc) to check.

1603842638
someguestguy
error messages aren't helping a lot on how to access the members (printing @typeInfo(@typeof()) confused me.

1603842695
someguestguy
basically how do I get @tagName to not invoke undefined behavior, or fi

1603842702
someguestguy
if-check*

1603842727
someguestguy
for whether it's available then either call @tagName or not.

1603842977
someguestguy
(nevermind, someone pointed me to the std.meta versions where it doesn't panic and instead returns an error)

