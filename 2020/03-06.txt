1583453859
mikdusan
is sendfile usage pretty new in std?

1583454034
alexnask
A couple of days olf I think

1583454038
alexnask
old*

1583455530
andrewrk
mikdusan, can we merge #4650?

1583455584
mikdusan
yup

1583455677
andrewrk
ok great, and freebsd is still excluded from blocking download page updates until it turns green, and then I'll revert c0c9303bd63468afe146ad729cf963ee06a1777f

1583456121
wilsonk
hmm, I just pulled the newest master branch, rebuilt with 'make install', then tried to rebuild a project and got 'glibc/sysdeps/unix/sysv/linux/include/bits/syscall.h:3:10: fatal error: 'misc/bits/syscall.h' file not found' ... that file seems to be generated during the build process (according to bits/syscall.h).  Anybody know what might have caused this? Or has anyone else run into this today?

1583456190
andrewrk
can I see more output?

1583456224
wilsonk
yep, one second

1583456249
wilsonk


1583456273
andrewrk
ok I know why this keeps happening

1583456289
andrewrk
short story is to rm -rf /home/wilsonk/Downloads/zig/build/lib/

1583456299
wilsonk
ah, ok

1583456308
andrewrk
glibc got updated, and it depends on a certain file

1583456320
andrewrk
but `make install` doesn't delete files

1583456402
wilsonk
worked, thanks :)

1583456429
mikdusan
ok #4653 should allow srht to get waay past `zig build install` now

1583456605
mikdusan
(when merged that is)

1583456631
mikdusan
hmm I should just rebase it

1583462833
cncl
hi, sorry if this is a dumb question. i tried to play around with zig a couple of months ago, but it was in the middle of some changes (string formatting, maybe?) that caused lots of examples to break. is now a better time to try it?

1583464022
mikdusan
each binary tarball includes a copy of the same docs you see online, matching binary version exactly so there shouldn't be any example-breakage

1583471955
daurnimator
cncl: maybe? we've got a release coming up on april 13; that would be a prime time to give things a try.

1583475242
squeek502_
daurnimator, we can talk here if that'd be helpful instead of going back/forth in the github issue

1583475331
mikdusan
daurnimator: why would you expect fmt to escape an enum-literal ?

1583482698
daurnimator
squeek502_: hey

1583482723
squeek502_
hi

1583482723
daurnimator
mikdusan: `enum { foo, bar, @"with spaces" }`

1583482756
daurnimator
squeek502_: so realpath is inherently racy

1583482769
daurnimator
you need to do it inside of the `open` call.

1583482785
daurnimator
(on windows essentially everything is done by opening)

1583482814
daurnimator
e.g. to delete a file you open a file; set a flag that says "delete this file when I close it" and then close the file handle

1583482870
squeek502_
not sure i follow, what is this relating to?

1583482915
squeek502_
#4655 or #4658?

1583483037
daurnimator
squeek502_: 4655

1583483062
squeek502_
which open call?

1583483083
squeek502_
the open within readFileAlloc?

1583483092
daurnimator
yep

1583483154
squeek502_
so you're saying readFileAlloc should handle the path resolution on its own?

1583483162
daurnimator
yes

1583483204
daurnimator
also io.readFileAlloc is deprecated; should use `fs.cwd().readFileAlloc` instead.

1583483258
squeek502_
right

1583483331
squeek502_
it does seem like there needs to be a decision about what's valid to pass to the various fs functions, its unclear if `.\file` is expected to always be a valid input to any fs function on Windows or if it should be resolved before certain fs functions

1583483362
daurnimator
indeed

1583483448
daurnimator
on linux the only u8 values

1583483504
daurnimator
On posix systems (including linux), `.` and `..` are reserved by the system. On windows you can actually just call a file `..`

1583484983
ArtifTh
<daurnimator "on linux the only u8 values *not"> While NT kernel will eat such paths, shell will complain

1583485093
daurnimator
ArtifTh: yep

1583485205
daurnimator
ArtifTh: the question ends up being: when I input a path into a shell, what does the user expect it to be? and sadly the answer isn't consistent

1583485983
daurnimator
I think the best we can do is probably reimplement RtlDosPathNameToRelativeNtPathName_U_WithStatus and use it on user-entered paths

1583486620
squeek502_
daurnimator, RtlDosPathNameToRelativeNtPathName_U_WithStatus seems to be equivalent to `std.fs.path.resolveWindows` in terms of how it handles symlinks (i.e. it doesn't)

1583486638
squeek502_
at least according to the results from running the example program at the bottom of this article:

1583488978
daurnimator
squeek502_: I guess you're right. Sadly that's very different to how things work on linux :(

1583488992
daurnimator
So we come to the age old question of cross-platform compatibility

1583490105
daurnimator
TheLemonMan: I might send a PR to your PR about the TEB

1583493425
daurnimator
why the hell am I wasting time on windows stuff again? >.<

1583493539
alexnask
"wasting" lol :D

1583493640
daurnimator
I don't even use windows

1583493673
daurnimator
(the answer: I'm doing this for attracting a good user community.... without windows support people avoid open source projects; so unfortunatly someone has to get it working)

1583493676
alexnask
I use it thanks for wasting your time on it %%

1583493678
alexnask
^^ *

1583493704
daurnimator
alexnask: I'm so deep though that I'm at the stage that no one cares lol

1583493729
daurnimator
e.g. I'm 15 minutes into googling if the `Name` member of `TEB_ACTIVE_FRAME_CONTEXT` is pointer to a u8 or u16 string

1583493746
daurnimator
no one even knows what that structure is

1583493766
alexnask
lol

1583493781
alexnask
looks like some frame context of some kind /s

1583493805
daurnimator
even the name is out of a debug symbol file that microsoft accidentally published one day

1583493821
daurnimator
that also seems to have disappeared off the net since I last had it

1583493892
daurnimator
looks like its a PCSTR deep down? though that's off someones interpretation of a summary of someone else's dump. so fucked if I know

1583497306
mq32
ah, i see andrewrk is playing "metaprogramming - the game"

1583497315
mq32
have fun with Baba!

1583497493
daurnimator
hmmm. @compileLog is printing my `[]const u8` as: `[]const u8{78,116,84,105,98`

1583497641
alexnask
Yes this is annoying

1583497670
alexnask
If you do an operation on a string literal it will then print it like that. If you just store the string literal it will print the string

1583497689
daurnimator
I'm trying to print `@typeInfo(x).Struct.fields[0].name`

1583497750
alexnask
Weird, works for me in a trivial example

1583497765
alexnask
What is x?

1583497829
daurnimator
my new TEB definition

1583497876
alexnask
Is it just defined like `const x = struct { ... };`?

1583497880
daurnimator
yep

1583498216
alexnask
Hmm that is weird, @typeInfo literally just calls create_const_str_lit and init_const_slice to copy the names

1583498225
alexnask
Which I would expect to result in a string print

1583508803
metaleap
daurnimator: "without windows support people avoid open source projects" thats one sentence i'd like to send back a decade+ in time :D

1583508806
metaleap
(together with ms buying github, cross-platforming .net, doing WSL, being a world major linux hoster (with the cloud stuff) and in general doing all sorts of prep work to be able to finally sunset that frail geriatric overdue and increasingly hapless zombie called "windows" =)

1583509236
companion_cube
isn't windows still strong in companies?

1583509239
companion_cube
(and gamers, but well)

1583509314
BaroqueLarouche
it is

1583509391
companion_cube
it's notable that crystal's 1.0 is delayed mostly because its windows support is weak

1583509414
metaleap
sure. a big fat tanker doesnt turn on a dime but takes almost-imperceptably long to do so.. it's not dead. just very gently being helped on its way into hospice :P 2cts anyway.

1583509435
BaroqueLarouche
sure, stay in your 1% bubble ðŸ˜›

1583509514
fengb
I left Windows 12 years ago and I'm happier for it

1583509514
BaroqueLarouche
I was a Linux user and developer from 2004 to 2009, had to use Windows for university, and slowly never look back. Used Mac OS X for a while

1583509529
fengb
But you still can't ignore that it's still around and will probably be forever

1583509544
companion_cube
yeah, and microsoft is doing pretty well these days

1583509555
metaleap
haha well i'm a bit tainted by a 10-month project in a windows-based and .net-based corp coming to a close. this whole stack really has no future, it's already cobol. the dev stuff AND the os.

1583509556
shakesoda
i'm running windows 7 right now

1583509567
shakesoda
re-upgraded from the hunk of junk that is 10

1583509570
companion_cube
I have a windows 10 at home, mostly for steam

1583509609
BaroqueLarouche
I lke Windows 10 to be honest

1583509612
shakesoda
w10 is the most unpleasant os i have ever used :(

1583509630
shakesoda
buggy, slow, full of ads, it hates me and i hate it back

1583509720
shakesoda
it's not without any redeeming qualities whatsoever, but it frustrates me to no end to deal with it

1583509725
fengb
People still sometimes talk about how XP was the golden age

1583509734
shakesoda
2000 was the best

1583509751
shakesoda
i still keep a win2k vm with a bunch of patches on it for later software compatibility

1583509759
metaleap
and all i meant is the only investment i see from MS in "developer stuff" (the sort of impetus that did propel their OS to dominance in the first place) is all over the place except windoze

1583509761
BaroqueLarouche
Windows 7 was really good

1583509815
companion_cube
well they know that the OS isn't where the battle is fought anymore

1583509826
companion_cube
it's about Azure, .net, githubâ€¦

1583509833
fengb
I'm kinda disappointed being a 90s kid in tech. 80s had some great hardware hackery, and same with the current landscape. But 90s was the epitome of Wintel bleh

1583509848
metaleap
yeah but the only thing that held it up was battling. when it comes to intrinsic qualities? inertia is what keeps it alive-looking today

1583509852
shakesoda
my biggest recurring problem with 7 is just that vsync is really spotty and unreliable

1583509853
metaleap
which means they leave the orig core to come to a natural conclusion over time and do the needful to soften the process .. my impression

1583509854
fengb
I didn't realize how much I missed not having a Commodore or Apple 2 :(

1583509881
shakesoda
fengb: i really miss macos 8/9 and early (ppc) osx

1583509886
BaroqueLarouche
if only Commodore management wasn't so bad

1583509907
mikdusan
fengb: ProDOS ooooh shiny

1583509911
shakesoda
been thinking about picking up a candy mac off ebay for such reasons

1583509918
fengb
Windows is here to stay, unless Chromebooks (or ... actual linux...) can capture the everyday user

1583509963
fengb
I was never a Mac guy before Intel+OSX. But I meant more of hackability in general. DOS / Windows did not include useful tooling for consumers

1583510007
shakesoda
or the also likely scenario that people use computers/laptops ever-less and do yet more on phones and tablets

1583510017
fengb
Javascript was jawdropping for a kid learning programming. That's just sad compared to what we had in the 80s

1583510025
shakesoda
a surprising amount of my students do not own computers and also have little interest in having them

1583510051
BaroqueLarouche
shakesoda:  which age group ?

1583510068
shakesoda
BaroqueLarouche: groups from 12-18

1583510074
metaleap
shakesoda: i hope this trend keeps up so that the "coding" bubble will revert to a good natural-sized sub-cultural population of actual-aficionados

1583510077
shakesoda
* 13

1583510085
BaroqueLarouche
that's sad :(

1583510120
fengb
Not really? 90% of people don't need actual computers to get things done

1583510135
mikdusan
so how are they going to write up essays... with a PEN and PAPER? what!

1583510137
shakesoda
well, the people interested in more technical stuff end up with them still, but there's a very obvious divide (once again)

1583510142
companion_cube
how do you program without computers, though?

1583510160
shakesoda
mikdusan: the school provides chromebooks for doing that, but you should

1583510167
fengb
Most people don't program

1583510172
shakesoda
any one of them can write their essays that way lol

1583510204
companion_cube
ah well, probably people will need computers less, for sure

1583510208
fengb
Honestly, I'd rather see more Chromebooks. The amount of tech support I had to provide to my parents and brother... ugh

1583510213
metaleap
i want programming to return to its proper status of "uncoolest thing ever" dammit. it was the real golden age. few bullshitters, few eggshells, pure capabilities-based cross-inspiration

1583510233
fengb
Back in my day, I was beat up for using computers. And I liked it!

1583510237
shakesoda
chromebooks are nice, but they impose some real limitations :\

1583510243
companion_cube
just write in cobol, no one will look at you as being cool

1583510250
shakesoda
I teach 3d modeling, and the things are less than worthless for it

1583510254
daurnimator
metaleap: the eternal september is unfortunatly eternal

1583510268
shakesoda
I had to scrounge up the last of the proper desktops in the entire school to run the class

1583510277
daurnimator
I am very much in a minority now of not having a phone

1583510288
shakesoda
and I do mean every one of them

1583510330
shakesoda
daurnimator: haven't heard someone mention that in a while

1583510336
companion_cube
wow, I don't even want to imagine how administrative life would be for me without a phone :(

1583510344
companion_cube
it's asked everywhere with a "required" field

1583510346
metaleap
daurnimator: thats related but slightly different. eternal september is forever but it could shrink back to "newbies but coming from affinity"

1583510370
shakesoda
i don't answer phones and pretty much only use mine for some time wasting games and 2fa lol

1583510389
daurnimator
companion_cube: uh, I should say: smart phone

1583510399
metaleap
my smartphone aids me greatly as an alarm clock and the weekly mom call. same as the dumbphone did

1583510399
companion_cube
ah I see.

1583510409
companion_cube
I do use the map occasionnally, too :/

1583510413
mikdusan
phone: texting/photos/videos; everything else give me a keyboard

1583510430
daurnimator
everything can wait until I'm at a keyboard :P

1583510447
daurnimator
or its important+immediate enough that voice is better

1583510463
fengb
Voice is never better >_>

1583510471
companion_cube
:D

1583510472
metaleap
shakesoda: with your nostalgia for win2k you must surely be already following the serenityOS duder

1583510473
fengb
I have social anxiety

1583510479
shakesoda
metaleap: i am not

1583510496
shakesoda
fengb: +100

1583510524
shakesoda
voice is never, ever better for me either, between that and some other issues (i.e. hearing problems)

1583510531
metaleap
shakesoda: he's trying to rekindle dat 2000 feel from scratch, so next time you're idling you know where to look

1583510541
shakesoda
sounds noble

1583510550
fengb
Other than my mom and my wife... I don't think I've talked on the phone for a year

1583510570
fengb
And honestly, I'll be glad once they replace cashiers with robots >_>

1583510573
daurnimator
I generally dont' like driving unless I'm on the phone....

1583510614
mq32
<daurnimator> I am very much in a minority now of not having a phone

1583510619
metaleap
fengb: jeez how come? dont you find humans the most amusing of mammals to observe and entertain?

1583510627
mq32
I have a smartphone since about 3 months now and wasting waaay too much time with it atm

1583510638
shakesoda
fengb: won't that be wonderful

1583510638
companion_cube
me too, I'm reading too much HN

1583510663
mq32
<fengb> I have social anxiety

1583510677
mq32
is it weird for a hardcore nerd to have the opposite of social anxiety?

1583510700
shakesoda
mq32: i feel like the hardcore nerds are split oddly down the middle on this

1583510720
shakesoda
either unusually strong anxiety or the exact opposite

1583510729
fengb
I'm like borderline. I need human contact but simultaneously hate it

1583510772
mq32
hm. i had "quarantine" the last two weeks because of a cold and i'm now starved of social contacts

1583510794
shakesoda
i've been known to go many months without any human contact besides roommates

1583510806
metaleap
from a distance everyone appears like an NPC for most of the time so if you ever played games with humanoid creatures instead of turtles beetles dragons or orks there's nothing to be anxious about..

1583510817
fengb
covid :o

1583510838
fengb
I get super lonely... but I also can't talk to people worth shit. It's the best of both worlds!

1583510849
fengb
metaleap: I'm always scared to mess up my dialog tree in games

1583510851
daurnimator
/bed

1583510854
companion_cube
I got into social dancing 2y ago, and it's awesome

1583510859
fengb
Good night!

1583510874
mq32
<companion_cube> I got into social dancing 2y ago, and it's awesome

1583510888
shakesoda
fengb: i always want to get the dialogue trees right in games too so i end up save scumming them every time

1583510892
mq32
social dancing as in couple dance?

1583510898
companion_cube
yeah, swing dancing

1583510901
mq32
neat!

1583510906
metaleap
fengb: thats a weird meta-phenomenon in the human sphere where the only way to really mess up dialog is by worrying about this very possibility. yeah it only hit me very late as well

1583510910
shakesoda
unfortunately, i can't save scum them irl, very inconvenient

1583510918
companion_cube
I had just moved to the other side of the world and was lonely :)

1583510931
mq32
i'm active standard and latin, two to three times a week, for a couple of hours. best counterpart to sitting in front of a computer

1583510944
fengb
metaleap: yes I know that. I just don't believe it. I spent too much of my stats on int, not enough on wis

1583510979
shakesoda
fengb: i describe myself in such terms as well

1583510990
shakesoda
"i put all my skill points into int and art and none anywhere else"

1583511008
fengb
FreeBSD build: `wget: unable to resolve host address 'ziglang.org'`

1583511013
fengb
More fun stuff! -_-

1583511024
shakesoda
mq32: my "get away from the computer for a while" is the class i teach weekly

1583511040
mq32
shakesoda: teaching what?

1583511043
shakesoda
3d modeling

1583511064
mq32
ah, nice. modeling with clay or at the computer?

1583511078
shakesoda
at the computer, but i'm not the one doing the modeling :)

1583511092
mq32
ah :D

1583511097
shakesoda
i did reduce my sitting at the desk time quite profoundly when i started drawing every day though, that's been a relief

1583511111
mq32
yeah, dancing is really nice to be maximum away from a computer. just music and people

1583511128
fengb
Music and people... sounds dreadful

1583511130
fengb
:P

1583511155
shakesoda
dunno why you'd want people to ruin perfectly good music!

1583511157
shakesoda
:D

1583511181
fengb
I need to find some social thing to do. I go to random tech meetups... but those are the worst lol

1583511187
shakesoda
I, for one, am quite happy with this form of socializing

1583511579
alexnask
on smartphones: the trick is to crack your screen enough that it's annoying but not enough to make it completely useless

1583511629
companion_cube
ðŸ˜‚ life hacks

1583511635
shakesoda
one of my friends has a record of doing that to 75% of his phones and he solves it with a layer of clear tape so he won't cut his fingers on it

1583511666
alexnask
Would not recommend enough cracking to cut yourself when using it :P

1583511671
shakesoda
you'd think, at this point, he'd just cover the screen with something proactively so this won't happen

1583512765
shakesoda
metaleap: serenityos is neat, if only it weren't c++ :(

1583512807
shakesoda
i will watch it but stay away from getting too deep in the guts of it

1583512831
metaleap
we're in agreement on the c++ point, but i enjoy his coding vids & commute talks for sure.. when downtime

1583512847
companion_cube
well, what else could have he used?

1583512858
metaleap
still a down-to-earth old-skooler =)

1583512873
companion_cube
I mean it's C++17 he uses, I think

1583512894
shakesoda
c, at the least

1583512910
shakesoda
c++ makes things more complicated pretty much automatically

1583512933
metaleap
also avoids the stdlib and handcrafts according to personally-chosen restrictions (which seems fairly common to many cpp endeavours from what i gather)

1583512953
shakesoda
that's at least fairly responsible

1583512995
shakesoda
i poked around and it's still full of c++-isms that make code more complicated, though

1583513009
shakesoda
inheritance for ui widgets etc -> you've already lost

1583513046
companion_cube
well I think he wouldn't be nearly as productive with C

1583513106
shakesoda
disclaimer: i'm a bit extra salty about c++ making life automatically hard due to my recent work fixing some incredibly complicated system

1583513158
shakesoda
said system isn't especially bad, but my goodness is it a complicated maze

1583513174
metaleap
in the end zig will be a great candidate for this sort of thing. i mean you can so smoothly code in like the "base" pattern that `ast` uses when you really need it , it stays self-contained understandable and doesnt infect outwards, yet you get the

1583513185
companion_cube
yeah, Zig will be nice, it's just not ready yet

1583513218
shakesoda
I've already started moving my game engine parts to zig

1583513231
shakesoda
it won't exactly be the production one for a long while yet, but it's just so much more pleasant to deal with

1583513236
metaleap
comptime really lets you "patch up the language surgically in just the few spots here & there that would truly benefit" but cleaner & more maintainable than macros

1583513270
companion_cube
I don't think serenityOS uses macros much

1583513281
metaleap
companion_cube: if C it would have to tho

1583513284
shakesoda
c macros are less nasty than... most c++ features...

1583513293
companion_cube
metaleap: exactly, soâ€¦ no C

1583513298
shakesoda
how sad is that

1583513304
companion_cube
I don't agree, lambdas and auto and templates are better than macros :D

1583513309
metaleap
sure in c++ you pick the pattern that fits the need, sometimes inheritance, sometimes templates etc.

1583513316
shakesoda
lambdas and auto are indeed nice

1583513326
shakesoda
metaleap: once you use inheritance you've already lost

1583513330
shakesoda
;)

1583513428
companion_cube
inheritance is useful in some particular cases, imho

1583513435
companion_cube
it's just not a good "default" behavior

1583513441
companion_cube
it's a specialized tool

1583513446
companion_cube
(like, open recursion/visitor pattern)

1583513453
metaleap
shakesoda: i really mean more "base-class-ish kinda thing" ---  if you dig into the std/zig/ast.zig scheme (search for `base` and how all the specialized `Node`s have that field, and `Node` itself refers to fieldParentPtr) you'll get what kind of bare-bones "embedding=inheritance-ish" i had in mind. no full-blown multiple-levels-with-overrides inheritance

1583513477
metaleap
i picked the wrong name probly for what i had in mind

1583513482
shakesoda
companion_cube: i'm reasonably convinced class hierarchies were devised by demons to make code unknowable

1583513491
metaleap
but otoh this pattern is all i ever did use "inheritance" in oop langs for!  =)

1583513513
shakesoda
you can design something better every single time without having it try to magically bring in functionality

1583513543
shakesoda
especially in c++, which has so many of its own complicated rules if you interact with any of this stuff

1583513563
companion_cube
shakesoda: ah yeah, agreed

1583513577
companion_cube
but one virtual class for behavior + implementations to reuse that code, why not

1583513601
shakesoda
there are certainly times where it can be a useful tool, but I do believe you can

1583513614
shakesoda
and you shouldn't do it through multiple levels

1583513648
shakesoda
I've not actually missed lacking it even once when using languages that do not provide this, I've been left happier without that entire class of things that can go wrong.

1583513674
fengb
imo, inheritance is a pretty poor way of sharing behavior and definitely lousy for sharing interfaces

1583513689
fengb
And it's unfortunate that most people interpret OOP = classes / inheritance

1583513739
shakesoda
fengb: but really, oop is the entire gang of ideas designed for the sole purpose of making your solutions to problems be convoluted! ;)

1583513788
shakesoda
fwiw though, lambdas are

1583513798
fengb
Nah, things like generic array lists are fundamentally OOP based

1583513817
fengb
And... most implementations wouldn't use inheritance

1583513842
companion_cube
generic array lists, OOP? why?

1583513868
shakesoda
yeah I'm not following that line of thought either

1583513898
shakesoda
but also, I strongly favor specific over generic implementations until I need otherwise

1583513905
fengb
Not sure about functional languages, but even the C implementation of a list would look like OOP patterns

1583513908
shakesoda
people jumping right to generic ones for everything is a huge cause of needless complexity :\

1583513974
fengb
And I don't mean inheritance. The type of polymorphism that you're exploiting is a lot more OOP than functional

1583513990
companion_cube
hmmm for me an arrayList is just a template/generic

1583513992
companion_cube
no OOP in there

1583514007
shakesoda
yeah no oop there, nor polymorphism

1583514077
fengb
Hell, typeclasses enable "OOP" design so... :shrug:

1583514098
companion_cube
wait what

1583514104
shakesoda
using them does not imply oop

1583514108
fengb
Or if you don't like that term... interface based design

1583514109
companion_cube
if typeclasses are OOPâ€¦ then mostly everything is OOP?

1583514136
fengb
No... but you can code OOP in a functional language

1583514137
shakesoda
to be a tool of that does not make it the thing itself

1583514143
fengb
Except Elm (lol)

1583514160
shakesoda
just like my kitchen knives are a tool for cooking and not murder, although i could totally stab someone with them

1583514168
companion_cube
well if OOP is having interfaces, then, damn

1583514176
shakesoda
and oop here is the murder, not the cooking ;)

1583514180
companion_cube
for me OOP is more about dynamic dispatch

1583514226
fengb
Well... Zig has OOP in comptime and allocators :P

1583514258
metaleap
btw "offtopic" (not, but off-thread) a quick curiosity question, what linker is used by zig to turn llvm's final ir-to-object output into the final binary executable/library --- does it "bundle" an existing one (as it'd be foss C code anyway), use llvm's linker as-a-library, or call out to whatever is expected on the current local os?

1583514262
companion_cube
comptime is OOP? wow

1583514265
shakesoda
but neither comptime nor allocators are oop

1583514272
companion_cube
just means "OOP" doesn't mean anything anymore fengb :p

1583514313
fengb
It can be used for OOP yes. Like duck typed methods

1583514337
companion_cube
it doesn't check my definition of "dynamic dispatch" tho

1583514340
companion_cube
by far :p

1583514343
fengb
And allocators are definitely OOP. You define an interface and implement it per instance. That's basically classical OOP in a nutshell

1583514368
shakesoda
you're really, really conflating the "can be used for" with "is"

1583514401
fengb
I'm not saying Zig is an OOP language. I'm saying it has facilities to enable OOP style programming

1583514423
fengb
C doesn't... but you can still do OOP in it

1583514438
shakesoda
you keep pretty specifically saying things are oop, which is not the same as saying you can use them

1583514447
shakesoda
the semantic difference is pretty big, heh

1583514492
fengb
Well... allocators are definitely oop. Comptime can be leveraged for oop style dispatching

1583514495
shakesoda
anyways, i must go work, please don't make complicated designs where they aren't needed :D

1583514498
shakesoda
spare me a future pain...

1583514550
fengb


1583514567
companion_cube
glib is OOP in C, and it's a thing of horror

1583514628
adamkowalski
what do you all mean by oop fengb. do you just mean polymorhpism?

1583514641
adamkowalski
I feel like a lot of people associate other traits with it such as encapsulation

1583514647
companion_cube
polymorphism is also an overloaded word :(

1583514661
adamkowalski
and being able to substitute the child class for the parent

1583514677
adamkowalski
I feel like if we break it apart into the constituent compoentns you all would agree

1583514688
adamkowalski
we have runtime and compile time polymorphism in zig

1583514708
fengb
I generally refer to "oop style" with substitutable objects without breaking the contract

1583514711
adamkowalski
but when I think of oop I specifically think of paying for a runtime dynamic dispatch

1583514724
metaleap
oop = overload/override pragmatism  =)

1583514726
adamkowalski
if you are using templates, comptime arguments

1583514730
adamkowalski
thats not runtime

1583514740
fengb
But our allocator interface has runtime cost

1583514744
adamkowalski
true

1583514761
fengb
And it's a standard interface and shareable across most of the codebase

1583514762
companion_cube
so you mean subtype polymorphism, ok

1583514764
adamkowalski
allocators are using runtime polymorphism with dynamic dispach

1583514771
adamkowalski
I'm saying you all are right

1583514775
companion_cube
^ this is OOP indeed

1583514780
companion_cube
comptime, not that much

1583514788
adamkowalski
just OOP is such an overloaded word that it loses meaning

1583514790
companion_cube
comptime is dependent static typing

1583514805
fengb
It is... but I really want to hammer in oop != inheritance

1583514827
fengb
Because Go's oop interface{} is structural interfaces, which has no inheritance but probably works better

1583514834
adamkowalski
i mean we can call it what we want but allocators use something akin to inheritence

1583514848
adamkowalski
they just store the base class as a field rather then "inherting" from it

1583514850
shakesoda
inheritance is merely the most sinister evil created in oop's already evil name

1583514852
adamkowalski
under the hood it's the same thing

1583514858
fengb
Or Obj-C / Swift protocols

1583514859
adamkowalski
the base pointer still points to the base class

1583514877
fengb
Or Erlang actors

1583514954
metaleap
in the end its just streams of bits we're bickering about here, if you wanna take a reductionist stance (it

1583514968
metaleap
so what linker is used by zig to turn llvm's final ir-to-object output into the final binary executable/library --- does it "bundle" an existing one (as it'd be foss C code anyway), use llvm's linker as-a-library, or call out to whatever is expected on the current local os?

1583514983
fengb
metaleap: hey no being on topic. We need more flame wars

1583514998
companion_cube
we need a off topic channel

1583515004
metaleap
apologies

1583515007
metaleap
:D

1583515060
fengb
We statically bundle in lld

1583515116
fengb
We want to replace lld at some point though:

1583515135
metaleap
neat. i noticed how nicely self-contained zig is, it's much appreciated. no dependencies to worry about for those just diving in and exploring

1583515166
fengb
Yeah definitely. It's really amazing to download a single binary and have it just work

1583515224
metaleap
"even though incremental linking is a perfect fit for zig's debug builds" so this raises in me another newb question: i had the impression that zig turns all *.zig files coming into play into one giant llvm module, is this the wrong impression?

1583515290
metaleap
because in that case it would seem to me that incremental linking would not benefit a giant-single-module approach (except when extern / C deps / lib refs come into play too)

1583515504
mikdusan
metaleap: yes, I would think incr-builds are going to make sacrifices for it's #1 priority: freakishly fast builds

1583515535
companion_cube
curiosity: what about builds that don't take too much ram? whenever building

1583515547
companion_cube
a lot of big C++ programs can't build at all without N GB of ram

1583515689
fengb
Debug builds would benefit greatly from splitting up modules. It could be a flag for release builds too

1583515707
metaleap
mikdusan: so there'd be introduces some sort of "splitting algo" of "many disparate *.zig files forming a single project, into some (lesser) number of however-still-multiple llvm-modules~=.o-files"? or is my equation there off?

1583515731
mikdusan
companion_cube: iirc there was talk of being very flexible in that area. first, we'll take more care on free as compared to almost-dont-care-in-stage1, and second if you think about incr-builds, those atoms may be good candidates to actually have ability to

1583515771
companion_cube
not relying on actual swap, I hope?

1583515771
metaleap
or i guess every build.zig container could form the basis of an independent module/.o -- have only just now considered that possibility :D

1583515788
mikdusan
companion_cube: exactly. by intelligent I mean not using the OS generic swap

1583515809
companion_cube
good, cause having swap enabled is the best recipe to freeze this kind of small computer :p

1583515815
fengb
We can't split generic functions though so it wouldn't be as simple

1583515865
mikdusan
i probably shouldn't use the word swap. too much implication there. it's really just save an "atom" (not really a term) to disk. that could be our .o fragment. and load it when needed.

1583515888
companion_cube
right, right.

1583515904
mikdusan
combining this with the robust zig-cache and I imagine it will be fabulous

1583515919
companion_cube
I think the use cases might be disjoint

1583515936
companion_cube
one is building on a small system, once (when you install a program)

1583515954
companion_cube
one is when you're developing, hopefully not on too small a machine, and when build time matters a lot more

1583516107
metaleap
one thing i wonder about this whole LLD discussion (both the incremental and the mach-o topics), doesnt the whole C++ / Clang space care about this at all? or do they skip lld altogether albeit using llvm-ir still

1583516160
metaleap
llvm has this aura of "it must be robust enough for clang & c++ inside and out" :P

1583516202
fengb
Maybe thatâ€™ll get less true over time as Rust, Zig, etc. start pressuring it

1583516256
companion_cube
rust made apparent a lot of optimizer bugs in llvm, it seems

1583516262
companion_cube
(the ones related to aliasing)

1583516538
mikdusan
I feel like LLVM-IR lacks something (not sure what) in their model to deal with aliasing

1583516607
companion_cube
(I mean, lack of aliasing in this case)

1583519647
jessermeyer
pub fn open(file_path: []const u8, flags: u32, perm: usize) OpenError!fd_t {

1583519657
jessermeyer
Are those flags posix permissions flags, even if I'm on Windows?

1583520220
jessermeyer
What is the reason why an absolute Win32 path like "C:\\path\\to\\file.txt" results in: error: invalid character: ':'?

1583520225
alexnask
jessermeyer, Where is this function from? (I assume os.Dir?) The API has changed in the latest commits I think

1583520301
jessermeyer
To my second question: @embedFile

1583520310
jessermeyer
To my first question, I think I was looking at os.file()

1583520329
jessermeyer
Yeah I noticed a lot of FS changes on master.

1583520392
jessermeyer
Man, @embedFile is just awesome.

1583520505
jessermeyer
@embedFile returns a pointer to the data segment right?

1583520619
alexnask
It returns a comptime u8 array

1583520643
jessermeyer
But is that stored on the stack or in the data segment?

1583520664
alexnask
It will end up in the data segment

1583520684
alexnask
Unless yo uexplicitly copy it to a stack variable or something

1583520756
jessermeyer
Visual Studio clued me in: unsigned char[1525]*

1583520775
jessermeyer
So I wonder if the documentation should reflect it's really a pointer to a data segment array.

1583520923
alexnask
This is not quite true though. Yes, assigning it to a const or a global will make the data appear in a segment array

1583520938
alexnask
in the data segment*

1583520945
mikdusan
it never gets to data segment if you use it only in comptime context

1583520949
alexnask
This is just how comptime semantics work

1583520974
alexnask
The docs are correct to just say it returns a comptime array

1583521006
jessermeyer
Aaah

1583521342
jessermeyer
Does comptime code execute after linking occurs? e.g, can I call a function from a linked shared library at comptime?

1583521364
alexnask
No

1583521395
jessermeyer
=(. That would've been magical.

1583521418
jessermeyer
I guess the loader is the one specifying the addresses at execution time.

1583521420
alexnask
Lexer -> parser -> comptime execution -> generated IR -> llvm IR -> object files -> linker this is a simplified pipeline I believe

1583521438
jessermeyer
That's sort of what I figured.

1583521500
alexnask
It would technically be possible to call functions from shared libraries at comptime but it's not supported by design

1583521501
jessermeyer
Well, can a shared library be loaded at comptime and immediately used?

1583521507
jessermeyer
Ha.

1583521526
jessermeyer
By design ... why?

1583521532
fengb
Zig doesn't have an ABI so no

1583521574
jessermeyer
I see.

1583521596
alexnask
Its a design decision (not saying that implementing it would be easy either way)

1583521924
jessermeyer
I guess we'll see how powerful comptime becomes come 1.0.

1583521936
mikdusan
#1291 is open for a comptime allocator. If that gets done ... std.DynLib is your friend :)

1583521937
jessermeyer
Obviously it's hugely powerful if you stay within Zig.

1583521945
jessermeyer
exactly!

1583522817
jessermeyer
Why is @embedFile's return type null terminated?

1583522848
fengb
We should split that to @embedFileZ

1583522883
jessermeyer
Agreed

1583523102
fengb
We converted string literals into zero-terminated when we removed c-strings

1583523158
fengb
You and mq32 both have encountered some problems with @embedFile so maybe we should do something else

1583523418
andrewrk
what's wrong with the type being null terminated?

1583523496
jessermeyer
I'm about to confirm or deny the problem.  I'm passing a byte array as a shader to Vulkan, and I don't think it's expecting a 0 byte hanging on the end, but it may not care.

1583523532
jessermeyer
This byte array is really just a .spv binary blob sitting on disk.

1583523690
jessermeyer
Is the equivalent of a reinterpret_cast in Zig @alignCast(@ptrCast())?

1583523769
andrewrk
I don't understand, why would vulkan read past the end of the buffer?

1583523802
andrewrk
it's either null terminated, or you're passing a length. I don't see how there can possibly be an issue

1583523830
jessermeyer
Ok, so .len does not count the null terminator?

1583523841
andrewrk
correct

1583523850
jessermeyer
OK, I don't expect there to be an issue.

1583523870
andrewrk
that's the benefit of the sentinel being in the type itself; the len can be correct

1583523959
jessermeyer
Is the size of a null terminated type different than a non null terminated type?

1583524004
andrewrk
the size of a pointer is always 8 bytes on 64 bit architectures, 4 bytes on 32 bit architectures

1583524021
jessermeyer
Roger that.

1583525171
marijnfs
is there already some serialization functionality?

1583525179
marijnfs
with the new struct stuff it should be quite easy

1583525225
andrewrk
I think a few people have written some stuff, as far as I recall nothing landed in std lib

1583525270
metaleap
marijnfs: a quick grep on $ZIGDIR/lib/std on serialize shows some sort of generalized binary serialization stuff in io.zig, never tried it tho

1583525330
metaleap
`Serializer`: "Creates a serializer that serializes types to any stream.", also has a `Deserializer` in there. and tests in std/io/test.zig

1583525366
metaleap
(the latter likely only in the zig repo, not your zig installation)

1583525378
marijnfs
metaleap: hmm I see the serializer, let me see

1583525401
marijnfs
looks interesting

1583525565
marijnfs
I there a buffer stream or something?

1583525684
marijnfs
in fact, where is Stream defined

1583525799
fengb
lib/std/io.zig and lib/std/io/*.zig

1583525922
marijnfs
ah yeah, it can sometimes get pretty confusing to figure out how something is used in zig

1583526052
andrewrk
you should be able to follow the decls in a straightforward path, unless `usingnamespace` is used, which is not the case here

1583526066
andrewrk
you don't have to know the type of something to know where it is declared

1583526075
companion_cube
does Zig have anything like D's "mixin"? like that:

1583526089
andrewrk
which means you can implement jump-to-definition without semantic analysis

1583526108
andrewrk
unless there is actual branching logic

1583526118
andrewrk
e.g. pub const foo = if (x) a else b;

1583526202
fengb
Sorta, daurnimator was pushing for it

1583526239
andrewrk
you can do mixins in zig, but the std lib does not do it

1583526367
companion_cube
that's quite powerful

1583526432
companion_cube
the docs doesn't mention mixins, but I imagine it's low on the priority list

1583526470
fengb
It's just leveraging `usingnamespace`

1583526500
andrewrk
hmm actually I realized I did a mixin in std/target/$arch.zig files

1583526516
andrewrk


1583526535
andrewrk


1583526600
fengb
Shame! :P

1583526641
jessermeyer


1583526663
jessermeyer
Getting a weird stall from attempting a kind of reinterpret cast on Windows.

1583526668
companion_cube
andrewrk: thanks!

1583526737
jessermeyer
if I pause execution I see I'm stalled in cmpxchgWeak in acquireSlow() from debugWarn()

1583526751
andrewrk
yeah in this case though it's not really being used as an "interface" as daurnimator was pushing for, it's really just that all these arch files happen to want to expose the same API

1583526817
jessermeyer
But the first time I attempt the type / align cast it succeeds just fine??

1583526949
fengb
@alignCast does a runtime check to make sure itâ€™s actually aligned. Maybe it was coincidentally aligned in the first invocation?

1583526966
jessermeyer
Possible.  But the debugwarn shouldn't stall out at least?

1583526993
jessermeyer
BTW, how should I do this reinterpret_cast kind of logic in Zig?

1583527018
jessermeyer
I'm forced to view these u8s as u32s as per the Vulkan spec.

1583527045
fengb
You could do std.mem.bytesAsSlice

1583527090
fengb
And possible annotate the byte array to align(4)

1583527216
jessermeyer
Like var vert_shader_bytes align(4) = @embedFile("shaders\\triangle_vert.spv"); ?

1583527303
jessermeyer
I aligned the bytes array but that alone wasn't sufficient. I'd like to avoid reaching into the standard library for this problem.  I would hope this would be possible with bare Zig.

1583527323
fengb
Oh hmmm... those should be aligned already

1583527342
jessermeyer
Well the return type on those are based on u8s, not u32s.

1583527357
jessermeyer
So I think it's at least documentation to state the alignment on those up front.

1583527393
andrewrk
so you did `var vert_shader_bytes align(4)` and then `vert_shader_bytes` wasn't aligned to 4 bytes?

1583527394
fengb
Or maybe not. Maybe x86 compactifies the data section so you end up with misalignment

1583527411
andrewrk
if you can confirm that then it's clearly a bug

1583527440
jessermeyer
I'm checking that now.

1583527476
jessermeyer
But I think vert_shader_bytes in this case is a pointer, so we're asking Zig to align the pointer, not to align the read, right?

1583527538
andrewrk
if you're not sure what the type is and you want to be sure what the type is, give it a type

1583527609
jessermeyer
Ok, I think I have evidence it is not aligned.

1583527686
jessermeyer
var frag_shader_bytes align(@alignOf(u32)) = @embedFile("shaders\\triangle_frag.spv"); --> address is 0x00007ff7e3c9610d ->  base10 -> 140702655275277 is odd.

1583527705
jessermeyer
Did I make a mistake in specifying the alignment?

1583527715
fengb
@embedFile returns a pointer

1583527723
andrewrk
fengb, not according to the docs

1583527737
jessermeyer
It's a comptime array, so it's complicated what it returns.

1583527753
jessermeyer
In my case, the data is used at runtime, so it does return a pointer to the data segment.

1583527787
fengb


1583527850
andrewrk
yeah docs are wrong. I think it's good actually that it's basically the same as a string literal

1583527897
fengb
mq32 proved it to me the other day heh

1583527900
andrewrk
jessermeyer, slap a .* on there and call it a day

1583527918
fengb
I think at some point it returned an array because I also thought the same thing

1583527922
andrewrk
the docs are wrong

1583527925
andrewrk
yeah it used to return an array

1583527954
jessermeyer
I'll try the .*, but the pointer mis-align

1583527983
fengb
No, []u8 only aligns to 1 naturally. You need to convince it to align(4)

1583528043
andrewrk
jessermeyer, do you realize that you were mistaken about the type of frag_shader_bytes? you thought it was a value but it was a pointer

1583528087
andrewrk
s/you/we/

1583528164
jessermeyer
I've known it was a pointer, but I didn't quite realize how best to specify its alignment.  You can see alexnask  and I hashing this out earlier.

1583528252
fengb
You can't realign pointer addresses, but you can dereference and realign the contents at comptime

1583528281
andrewrk
you don't want the pointer itself to be aligned, you want the memory contents it points to to be aligned

1583528287
jessermeyer
Exactly.

1583528311
andrewrk
if you had done `var frag_shader_bytes: []align(4) u8 = @embedFile(...);` then you would have gotten a compile error

1583528330
jessermeyer
Good lesson.

1583528381
andrewrk
also if you were calling a zig function rather than a translated-c vulkan function, you would have gotten a compile error at the callsite

1583528402
andrewrk
basically zig was never given enough type information to help

1583528478
jessermeyer
Roger that.  So I really was just lucky the first ptrCast succeeded.

1583528511
andrewrk
or, from my opinion, unlucky :)

1583528523
jessermeyer
I value that opinion ;)

1583528605
fengb
Maybe we could have the compiler force worse-case-alignment in debug modes :P

1583528973
jessermeyer
Ok, one last test for understanding.  Am I unlucky the following works, or have I successfully got the contents realigned?

1583528974
jessermeyer
var frag_shader_bytes = @alignCast(@alignOf([*c]const u32), @embedFile("shaders\\triangle_frag.spv"));

1583529067
jessermeyer
I think I'm unlucky.

1583529553
TheLemonMan
BaroqueLarouche, yo, the problem is in your code

1583529576
BaroqueLarouche
TheLemonMan:  any idea what"s wrong ?

1583529577
TheLemonMan
IndexedStorage declares a huge PaletteSize, the resulting structure overflows the stack

1583529605
TheLemonMan
are you sure you don't want 1 << log2(bitsizeof(T)) ?

1583529637
fengb
Hey I had the same problem earlier this week >_>

1583529697
BaroqueLarouche
TheLemonMan:  no, I really want 1 << bitsizeof(T)

1583529741
TheLemonMan
indeed, forget what I said

1583529802
TheLemonMan
maybe I should have named zig_probe_stack something else, if_you_see_this_you_have_a_stack_overflow

1583530375
marijnfs
error: expected type '[*c].cimport:10:11.struct_zmq_msg_t', found '*.cimport:8:11.struct_zmq_msg_t'

1583530399
marijnfs
why can't it cast these pointers anymore? I believe it worked before

1583530452
BaroqueLarouche
because it expects an array

1583530661
ArtifTh
Also, what is rationale behind not supporting line endings other than '\n'?

1583530681
ArtifTh
>invalid carriage return, only '\n' line endings are supported

1583530752
TheLemonMan
\r\n needs twice as many bytes, think of all the wasted bandwidth

1583530766
marijnfs
BaroqueLarouche: I'm trying to find out why. The original c function wants a pointer it seems

1583530786
andrewrk
ArtifTh,

1583530817
TheLemonMan
marijnfs, C has no concept of pointer-to-single-elem or pointer-to-many-elem whereas Zig does

1583530834
marijnfs
ok how do I cast it to that type then? is there a nice way?

1583530848
marijnfs
explicit (@ptrCast([*c]c.struct_zmq_msg_t, &message.msg) works, but seems nasty

1583530856
ArtifTh
I see, thanks

1583530923
TheLemonMan
does &message.msg[0..] work?

1583530944
andrewrk
that would be a pointer to a slice

1583530953
andrewrk
which I don't think the C API is expecting

1583530968
andrewrk
do you want `&message.msg[0..].ptr`?

1583530979
marijnfs
he doesn't like it, slice of non-array type

1583530992
TheLemonMan
there's an implicit cast from slices to [*c] pointers

1583530998
fengb
Shouldnâ€™t single pointer auto cast to c pointer?

1583531017
marijnfs
i believe it used to

1583531037
marijnfs
this is the msg field: msg: c.zmq_msg_t

1583531050
marijnfs
I guess a & to that might as well be a [*c]

1583531110
andrewrk
yes single pointers cast to c pointers

1583531128
andrewrk
please post the full error message with notes as well

1583531157
andrewrk
I need to get rid of the useless "referenced from here" error notes so that people stop ignoring compile error notes

1583531283
fengb
I have an inline for over ~150 functions and whenever one of them errors, I get a book of useless "referenced from here" errors

1583531364
fengb
Oh it's better now that I removed the comptime sort

1583531519
marijnfs_


1583531525
TheLemonMan
andrewrk, where would you put a (Windows-only) function to check if we're running under Wine and query its version? I wanted that to avoid #3500 from breaking the test suite on machines with an older wine version

1583531548
metaleap
"I need to get rid of the useless "referenced from here" error notes" --- they're really handy tho, but could be reduced. often in generic call sites the error is reported as occuring in say std/fmt.zig or wherever when it's really the call-site at fault. could use this heuristic for less noise: if stdlib files are involved and inner-most, drop them all and only keep the call-site-to-said-stdlib-location "referenced here" note (not the whole outer

1583531548
metaleap
call-hierarchy)

1583531556
metaleap
andrewrk: ^

1583531630
andrewrk
TheLemonMan, my first preference would be to avoid checking if we're running under wine if at all possible. maybe we can let that test fail with older wine? maybe that's appropriate? but to answer your question: std.os.windows.foo

1583531664
andrewrk
I'm ok with zig's test suite failing on older wine versions with the (not-enabled-by-default) -Denable-wine

1583531715
andrewrk
marijnfs_:   note: pointer type child '.cimport:8:11.struct_zmq_msg_t' cannot cast into pointer type child '.cimport:10:11.struct_zmq_msg_t'

1583531735
andrewrk
that would have been really helpful to include earlier

1583531766
fengb
That was his first post

1583531767
metaleap
wip-lsp also wants to know from whoever knows: what "package names" legally importable (but not specified in one's build.zig) are currently autoresolved --- in addition to "std" (going to std.zig) and "builtin" (going to builtin.zig), if any?

1583531800
TheLemonMan
andrewrk, np then, I'll try to remember not to panic when the test suite fails heh

1583531805
andrewrk
I suggest to look at the cimport.zig file and find out why these structs are different

1583531838
TheLemonMan
can you change

1583531929
andrewrk
done

1583531954
TheLemonMan


1583532019
fengb


1583532034
fengb
You eat pieces of shit for breakfast?

1583532043
mikdusan
priceless

1583532173
metaleap
wip-lsp also wants to know from whoever knows: what "package names" legally importable (but not specified in one's build.zig) are currently autoresolved --- in addition to "std" (going to std.zig) and "builtin" (going to builtin.zig), if any?

1583532254
companion_cube
so how many LSP implementations are still active right now?

1583532275
andrewrk
metaleap, I do not understand your question

1583532287
andrewrk
you are asking what packages are guaranteed to be available?

1583532292
metaleap
yeap

1583532313
metaleap
the other day someone mentioned some undocumented one for example, sadly i forgot which

1583532318
andrewrk
"std", "builtin", and "root"

1583532320
metaleap
but it did work

1583532349
metaleap
thx!

1583532402
metaleap
companion_cube: you tell me, i'm only tracking the one i'm making

1583532588
companion_cube
:D heh. how far along is it?

1583532737
fengb
builtin is deprecated right? >_>

1583532805
andrewrk
it's pending some breaking changes that will improve granularity of various build settings

1583532815
andrewrk
e.g. specifying build mode at package scope

1583533137
metaleap
companion_cube: symbols-hierarchy for current source file works 100% to my specs. resolving non-dotted idents for gotodef and hover already for local-src-file-only (incl. indefinite indirections leading to a usingnamespace), right now tackling cross-source-file resolving for this. then the dotted ones where resolving goes from left to dot-operand-in-question. also got zig-fmt (the stdlib one not the command-line-tool one) in there for lsp clients that

1583533137
metaleap
use this, including format-on-type. also build-on-save which builds build.zig containers that directly or indirectly import the .zig file you just saved. and if you save multiple files at once of course no duplicate work is queued up. all the little details..

1583533183
companion_cube
and I imagine diagnostics were there from day one, hmm?

1583533189
metaleap
for the gotodef when the identifier nodes are fully covered i'm in a good place to also tackle field-initializer and enum-lit nodes (identifiers of a different flavour)

1583533205
metaleap
oh yeah diagnostics for build-on-save plus parse errors on the fly as you edit your file

1583533247
metaleap
when you save a file to trigger a rebuilt, only build diags are cleared that are known to be invalidated by that particular chain of build jobs

1583533254
companion_cube
what about completion?

1583533318
metaleap
thats the last part in my schedule, after "references" lookups, because by then everything needed for it will be in place: except for the dangling trickiness of trying to figure out context in a currently-unparseable-ast

1583533343
metaleap
but at least by then there will be the knowledge what names are in scope.

1583533353
metaleap
and doc-comments etc

1583533383
metaleap
as a stretch goal eventually i also want smart completions for example for adding new switch prongs. but thats kinda "nice to have" not "need to have"

1583533405
companion_cube
do you know if LSIF is supposed to be there for completion/gotodef to be easier to implement for multiple files?

1583533411
companion_cube
I couldn't really figure out what it's about

1583533490
metaleap
oh that indexing thing? trying to see how far i can get without. probably doing half-dumb coarse index-hashmaps to reduce searches like references and workspace-wide-symbols but dont see the need for super-fancy fullblown index infra

1583533557
metaleap
might change later when real-world zig codebases grow into vast beasts of 1000s of source files. right now i'm sort of assuming workspaces of at most 500-1000 known .zig files

1583533563
tdeo
do you need to evaluate comptime stuff to implement some lsp features?

1583533620
metaleap
tdeo: aim not to. all variants that are in the sources are taken as equal possibilities. so you may be multiple signatures with different arg/ret types for example. or multiple results for gotodef

1583533659
metaleap
but there's some minimally-required "comptime-like" eval: for example your @import("my"++someconst++".zig") will resolve etc

1583533678
metaleap
incl any nr of indirections there

1583533705
metaleap
todo: need to guard eventually against circularities tho

1583534012
metaleap
multi-resolve:

1583534456
andrewrk
metaleap, this proposal is accepted:

1583534510
metaleap
well that part's already working. when only string-lits are accepted it will continue to =)

1583534743
metaleap
when needing to take a short break from the meaty stuff, i like to add "playful goodie" mini features that occasionally do prove handy : just added bonus shots of those to the bottom of

1583536453
wilsonk
metaleap: are we able to install/use your lsp yet? It looks usable for small single file projects at least. I know you said it is spread across a few projects...maybe some hints on how to install :)

1583536588
metaleap
well you can grab from github.com/meta-leap the top 4 repos (updated in the last week). have them all side-by-side locally too. then to make, `cd langserv && zig build`

1583536606
wilsonk
ah, ok sweet

1583536667
metaleap
hot tip, dont hover over a string-lit with \x or \u in it.. to prevent some @panic("TODO"), i need to fix and PR sth tomorrow onto zig/lib/std/zig/parseStringLiteral.zig :D

1583536732
andrewrk
metaleap, I've been playing with `return error.Unimplemented` rather than @panic("TODO") and been pretty happy with it

1583536783
metaleap
andrewrk: yeah i was gonna suggest that in an issue, but then thought "finally sth i can tackle myself in a PR" so thatll be upcoming. at least for \x std.fmt.parseInt has the goods already i believe with radix spec

1583536811
metaleap
and for \u i'll see if std.unicode is even needed (its still just hex right) and if so, if it suffices

1583536815
fengb
Are you hiding Zig from your main account?

1583536961
metaleap
fengb: not intentionally :D hm might look that way, i just wanted a clear separate space at the start for all sorts of zig repos and tryouts and repros and forks and jazz

1583537001
fengb
Or you're hiding your main from us

1583537021
mikdusan
is LLVM_EXPERIMENTAL_TARGETS_TO_BUILD="AVR" still the only experimental we build for llvm-10 ?

1583537060
andrewrk
mikdusan, yes

1583537070
andrewrk
afaik it's still experimental in llvm 10

1583537083
wilsonk
metaleap: I got a panic during the build (

1583537141
metaleap
wilsonk: curious! latest nightly? mine is a few days old

1583537141
wilsonk
updated zig a couple minutes ago (maybe I need an older version?)

1583537179
wilsonk
I could try with your version, if you get me the commit...if you want

1583537193
metaleap
"stage2_panic" coming from some .cpp is probably to be reported one way or the other. my zig is at 0.5.0+7e6b68a53

1583537281
metaleap
but will try if i get the same on latest tomorrow or on sunday

1583537310
wilsonk
ok

1583537409
mikdusan
yup AVR is still marked as experimental in readme

1583537498
wilsonk
metaleap: built fine with your zig version listed above

1583537714
metaleap
wilsonk neat, good to have pre-warning i might be hitting upon that issue on my upcoming routine sunday updates&catch-ups sequence

1583538598
andrewrk
fengb, your testing.allocator stuff with memory leak detection has been a boon

1583538641
fengb
Great :D

1583538784
metaleap
andrewrk fengb but it counts somewhat differently than testing/failing_allocator.zig (if used with usize.max of course) i noticed, right?

1583538834
metaleap
oh wait that was quite a long while ago since i compared the 2, looks like there's been changes since

1583538835
andrewrk
it's planned to be replaced with GeneralPurposeDebugAllocator eventually

1583538851
andrewrk
I wonder if I can get that done before the release

1583538943
metaleap
i'm kinda surprised i havent hit any multithreading-incurred "strange counts" yet .. last i checked  counters werent atomic (and neither is my own local version of failingAlloc when i played-experimented in that space)

1583538988
fengb
It's only designed for use in tests, which isn't threaded

1583539007
fengb
But... there probably should be some locking mechanism

1583539016
metaleap
i know which is why i separated out a custom version, but then i deferred "until i see it happening" :D

1583539030
wilsonk
metaleap: lsp is looking good

1583539085
metaleap
wilsonk if you hover over any @builtinCall and see something, it detects your stdlib location. as long as the langref html structure wont change too radically, that is :D would be curious

1583539190
metaleap
stdlib detection should have occurred by approx. ~3 secs after start generally from what i observe. until `zig info` command is ready and shows local related paths, i'm creating in your /tmp a `zig init-lib` then `zig build` it to finally scrutinize its txt files in zig-cache lol

