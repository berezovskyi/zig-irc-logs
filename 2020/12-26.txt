1608943361
ikskuh
andrewrk: i encountered the deadlocks on my local machine as well for a time, but they are gone now again

1608943808
g-w1
its weird, its gone on my server, but on my pc, it only triggers when using tarball version 0.7.1+830bc41b1, but not building from source (even release)

1608943846
andrewrk
ok I have an idea to catch it

1608981401
ikskuh
grrrr

1608981408
ikskuh
sendto still not fixed :(

1609004639
andrewrk
ikskuh, which pr is that?

1609004660
justin_smith
how would I use ** to construct a [10][10]bool of all false values?

1609004702
andrewrk
([1]bool{false}

1609004727
justin_smith
andrewrk: appreciate it, thanks

1609004744
justin_smith
trial and error based on the examples in the manual was getting tedious...

1609004803
justin_smith
andrewrk: it's complaining "expected type '[10][10]bool', found '[100]bool'"

1609004848
andrewrk
[1][10]bool{[1]bool{false}

1609004885
fengb
does this work? std.mem.zeroes([10][10]bool)

1609004947
justin_smith
fengb: that's certainly more readable, I'll try it...

1609005048
justin_smith
fengb: that's counterintuitive but it did work, thanks (I'll leave the other commented out since it does work also)

1609015434
marler8997
trying to figure out if Zig is handling this correctly, it's a function that converts a UTF8 path to a UTF16 path, but the path is returned as an array value

1609015442
marler8997


1609015497
marler8997
so the path return value isn't saved to a local variable, it's passed directly to a function...so I want to make sure Zig is still reserving that memory, but it doesn't really look like it is in the assembly code

1609015616
marler8997
maybe it is saving it...interesting it looks like the compiler isn't able to optimize the return value from a local variable, so it has to store the return value twice on the stack and copy it

1609017176
justin_smith
marler8997: you are returning a stack allocated value, I'm actually surprised zig lets you do this

1609017318
ifreund
justin_smith: that's fine, it's returned by value

1609017324
justin_smith
marler8997: is PathSpace a fixed size struct?

1609017372
ifreund
std.os.windows.PathSpace

1609017436
marler8997
justin_smith yes

1609017441
justin_smith
oh, don't mind me

1609017449
justin_smith
I get it now

1609017490
marler8997
it's a common practice for many languages to do path conversions on the stack this way

1609017509
marler8997
very common for calling windows functions

