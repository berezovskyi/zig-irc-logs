1590629415
blueberrypie
looks kinda like a net split

1590629734
pixelherodev
?

1590638888
pixelherodev
andrewrk: what was the command you were using to gather instruction counts?

1590638962
pixelherodev
Never mind, `perf stat` works I think

1590643690
marler8997
just finished the initial implementation of my small http client, check it out:

1590644084
daurnimator
marler8997: you should be parsing into a std.http.headers object

1590644102
marler8997
yeah

1590644113
marler8997
but I didn't need to do it to get it working...so it's put off :)

1590644128
marler8997
oh wait, std.http.headers? that's in std lib?

1590644237
daurnimator
yes

1590644256
marler8997
hmmm, seems unnecessary to create arrays for all the headers

1590644271
daurnimator
it's not

1590644274
marler8997
I know all the headers I need at compile-time

1590644278
daurnimator
header order matters

1590644283
marler8997
I don't need to dynamically allocate space for all the known headers

1590644291
daurnimator
?

1590644340
marler8997
Each header I need is known at compile-time

1590644356
marler8997
I don't need to store a name/value for any header that I don't know how to handle

1590645284
marler8997
I just saw you said "header order matters"...I didn't know of any headers where order mattered, which ones matter?

1590645873
marler8997
looks like according to the spec, header order matters if the headers have the same name

1590646539
daurnimator
yep

1590646551
daurnimator
and in other contexts (e.g. request signing) the order of all headers matters

1590646567
daurnimator
so reordering is becomes a destructive operations

1590656920
alexnask
marler8997, Hi, is there any way you can make a separate repo for #5151 while it's under consideration for std? I would like to start writing some extra parts but I dont want to copy paste your whole code into another repo for obvious reasons :P

1590676106
marler8997
alexnask: already done over a month ago :)

1590676201
alexnask
Huh guess Im blind :)

1590676229
marler8997
well no, I didn't mention it in the PR

1590676257
marler8997
but I knew this would be a bigger project and warranted it's own repo while I work on it and people discuss it

1590676273
marler8997
so far not alot of discussion though

1590676280
alexnask
Cool, I will experiment with writing some extra parts and using it to build a couple of Allocators

1590676297
alexnask
I may even try to plug them into the gotta-go-fast benchmarks and see how they do vs malloc

1590676312
marler8997
yeah that would be great

1590676334
marler8997
With optimizations, Alloc.c() should be binary identical to calling malloc/free directly

1590680739
satchmo
why am i disconnecting/connecting a million times everytime i put my laptop to sleep

1590681103
ikskuh
maybe your laptop wakes up some time

1590681476
satchmo
im sorry dave, i cannot disconnect from irc

1590681481
satchmo
that would be a bit unsettling

1590687861
companion_cube
watching the redis async/await talk

1590687884
companion_cube
andrewrk: I imagine suspend/resume is plenty enough to do safe recursion, by just pushing frames onto a heap-allocated stack, correct?

1590687901
fengb
It is possible yes

1590687906
fengb
Not very ergonomic

1590687939
companion_cube
still more ergonomic than no recursion

1590692024
dimenus
andrewrk: did you ever create a github repo for your basic tcp server?

1590692496
FireFox317
dimenus, he published it as a gist:

1590692924
dimenus
FireFox317: thank you

1590692980
pmwhite
Is this a comptime bug, or am I doing something wrong?

1590693300
FireFox317
pmwhite, parseFloat returns a `!T`, so you are catching the error but then also using the if statement to unwrap the optional, but there is no optional

1590693333
pmwhite
But I'm putting `catch null` after the call to `parseFloat`.

1590693415
pmwhite
If I pull the condition expression into a statement like `const parsed = std.fmt.parseFloat(f32, string) catch null`, and use `parsed` as the condition, then the compiler is fine with it.

1590693487
ifreund
yeah that seems like a bug, i think that should be valid

1590693497
FireFox317
what if you do `@as(?f32, std.fmt.parseFloat(f32, string) catch null)`?

1590693710
pmwhite
that complains about being unable to inline shiftLeft1, add, and shiftRight1 from std/fmt/parse_float.zig

1590693725
pmwhite
But it works if you add `comptime` to the `string` parameter.

1590693784
FireFox317
yeah then it should be possible indeed

1590693790
pmwhite
But adding `comptime` to that parameter does not fix the original snippet.

1590694089
pmwhite
Issue submitted.

1590694423
pmwhite
Oh wait, no extracting into a local variable doesn't work. Well stink.

1590694505
ifreund
not even if you do const foo: ?f64 = ...?

1590694525
ifreund
er, f32 rather

1590694774
pmwhite
That has the same issue as what FireFox317 suggested

1590694983
pmwhite
I fixed it by doing what I should doing anyway which is getting rid of `catch null`, since if-else supports error unions anyway.

1590695003
ifreund
nice, good to know

1590697031
FireFox317
andrewrk, i think you can consider #5461 as WIP. I'm looking at the llvm-ir that clang generates and it a bit different, however it does passes the parameters as separate paramaters to the llvm-function, so that idea seems okay :D

1590706351
fraktor
Where can I find documentation on how Traits work in zig?

1590706409
ifreund
zig doesn't have traits

1590706443
fraktor
What is in std/meta/trait.zig then?

1590706569
ifreund
ah, that's comptime introspection on types

1590706582
ifreund
i was thinking of traits in the rusty sense

1590706600
fraktor
Right.  I know something that does vtable stuff is in the works, but traits are what we have for now.

1590706606
fraktor
*?

1590706620
ifreund
these are really related to vtables at all

1590706638
ifreund
it's just introspection, not a form of interface or polymorphism

1590706657
ifreund
see

1590706667
fraktor
I see.

1590706703
ifreund
*aren't really related <-- if it wasn't clear that was a typo :D

1590706712
fraktor
That's not unlike how Allocators work right now, correct?

1590706742
ifreund
no, though a little more genricized

1590706812
fraktor
Right.  What advantage does this have over the way Allocator is implemented?

1590707006
ifreund
well, this tries to solve the general case rather than being a specific implementation

1590707048
ifreund
I haven't really dug in, ended up rolling my own version of polymorphism based on a tagged union for my project

