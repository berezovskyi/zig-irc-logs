1578790645
daurnimator
mq32: yeah under atomic I think

1578790663
daurnimator
uh wait, it might not be lockfree

1578790681
mq32
yeah isn't that important i think

1578790685
mq32
still got what i wanted :)

1578790694
mq32
std.atomic.Queue

1578791550
lunamn
is there an answer about why std.os.kill considers ESRCH a race condition?

1578791639
daurnimator
lunamn: it means you tried to kill a process that doesn't exist

1578791661
daurnimator
which implies that you were in a race scenario: because someone else killed it first!

1578791716
lunamn
why wouldn't it return an error instead, for my scenario: I'm reading a PID from a file, and well, yes, someone could've killed it first, but having a panic isn't productive..

1578791719
pixelherodev
Or it finished executing on its own

1578791731
pixelherodev
Yeah, I second that

1578791737
pixelherodev
Panicking doesn't seem a reasonable response there

1578791754
daurnimator
lunamn: PIDs are reused. if you do that then you might be killing some random other process

1578791785
daurnimator
lunamn: your reaper should be cleaning up your PID files; and your reaper should have a lock file of some sort so that it knows if itself was killed.

1578791872
pmwhite
Is there a way to use translate-c, but exclude all the included header files? I have a mix of C and Zig in my project as a workaround to a bug in the compiler, but I think the bug has been fixed, so I'd like to switch it all to Zig.

1578791886
daurnimator
pmwhite: no... but I wish there was!

1578791898
pmwhite
Is it feasible?

1578791935
mikdusan
linux reaper can kill stuff off, should this process panic? it's sensible to say "ok it's already gone, continue..."

1578791958
daurnimator
mikdusan: the OOM killer can kill; but it doesn't reap.

1578791996
pmwhite
I guess I could just run translate-c on all of it, and then extract the small percentage that is my own code.

1578792024
daurnimator
pmwhite: could diff just the #include to the whole thing and remove the shared definitions?

1578792092
daurnimator
mikdusan: well it partially reaps memory: but the process id itself still needs to be wait()'d on.

1578792098
pmwhite
hmm...good idea.

1578792244
mikdusan
daurnimator: wow poor choice of words on my part. it's exactly NOT a reaper. thanks for clarifying

1578798139
pmwhite
how do prevent zig from printing the failed command after a failed build. I'm using nixos, and I have several dependencies, so the command takes up about 35 lines on my full-width terminal. Thus, I always have to scroll up to see the error messages.

1578801955
pmwhite
I want to say `var str = "hello-xxxxx";` but I want to be able to mutate it. Is that possible with string literals, or do I have to resort to a u8 array?

1578802095
pmwhite
i want to pass the last 6 bytes as a buffer to a random number generator so that they can be replaced with random bytes.

1578802251
hryx
Philip White: String literals are immutable because they point to a const array

1578802420
hryx
there might be an easy way to accomplish what you want but it escapes me right now

1578802874
pmwhite
I'm converting a wayland shared memory snippet into zig. I decided to forget about the prefix and just generate 30 random characters.

1578802882
pmwhite
Simpler code in the end.

1578803336
terinjokes
not exactly what you're looking for, but if you have an Allocator, there's `std.fmt.allocPrint`

1578803342
pixelherodev
you could probaby u

1578803343
pixelherodev
wow

1578803345
pixelherodev
beat me to it

1578803348
pixelherodev
:)

1578803361
pixelherodev
But there's a better option

1578803373
pixelherodev
There's std.fmt function that takes an existing buffer

1578803410
pixelherodev
So you could do `var buf: [16]u8 = undefined; std.fmt.ICantForTheLifeOfMeRememberWhatThisFunctionIsCalled(buf, "hello-{}", .{randomlygeneratedstuff{);`

1578803506
terinjokes
`std.fmt.bufPrint` ?

1578803800
terinjokes
^ worked where I tried it

1578804021
pmwhite
pixelherodev: that would require already having a buffer filled with random stuff. I could do a `std.mem.copy` on the string literal and then pass the rest of the string as a slice to the random number generator, which is how `std.rand` generates bytes.

1578804179
pixelherodev
If it generates to a slice then it's even easier

1578804194
pixelherodev
Can literally initialize the buffer once

1578804203
pixelherodev
Then randomize a slice of the end

1578804241
terinjokes
is your random function not returning a slice now?

1578804262
pmwhite
Yup, that's what I'm doing, except I decided to not care about the prefix and just randomize the whole thing, which means I don't even have to initialize the slice.

1578804314
daurnimator
pmwhite: var foo = "something".*;

1578804364
pmwhite
terinjokes:

1578805389
pmwhite
daurnimator: thanks, that's exactly what I was looking for.

1578807776
hryx
mikdusan or andrewrk, a question if you have a sec. I made a change for #2146 and it seems to do the job. Ok, great. But now the test "compile-error switch with overlapping case ranges" fails, and I can't see why it should be affected.

1578807786
hryx
Here is the change:

1578807954
hryx
The only explanations I can imagine so far are a) this numeric comparison code affects range expressions, or b) my implementation is buggy

1578810625
hryx
I made a draft in case anybody familiar with stage1 knows what's up:

1578814949
pixelherodev
There a convenient way to access the caller function using a stack trace?

1578814979
pixelherodev
Or would a hacky method involving getting the function name and then `dlsym(NULL, sym)` be needed?

1578815317
daurnimator
pixelherodev: "access" the caller function?

1578815354
pixelherodev
Find it's address

1578815358
pixelherodev
s/'//

1578815388
pixelherodev
Which would allow for e.g. `if (caller() == specific_func)`

1578815414
daurnimator
sounds like a bad idea.... what are you trying to do?

1578815442
daurnimator
A better idea might be to have your function take a @returnAddress() (like dlsym secretly does on glibc)

1578815473
pixelherodev
Nah,

1578815486
pixelherodev
Basically, the idea is that a UI function should add a button which calls itself

1578815492
pixelherodev
Except that that function has various callers

1578822760
Astronothing
is there a way to copy from a

1578823038
mikdusan
Astronothing: see std.mem.bytesToValue()

1578823149
Astronothing
that. is. awesome.

1578823152
Astronothing
thanks!

1578823362
gonz_
Astronothing: `*T != []T` in zig, by the way

1578823388
Astronothing
yes, one is a pointer to one element, one is a slice

1578823438
Astronothing
pointer to one item* (from the documentation)

1578823734
mikdusan
Astronothing: another way would be to ptrCast addr of u64 (buffer) to *u8 and memcpy; this way you are decreasing ptr alignment

1578823742
Astronothing
and *T is not *[N]T which is why  std.mem.bytesToValue(u64, &bytes[0x18]) doesn't work either

1578827815
daurnimator
Astronothing: do you mean from *u8 to *u64? or actually to u64

1578827824
daurnimator
Astronothing: if the latter, @ptrToInt

1578828937
Astronothing
daurnimator: I have a []u8, I want to take 8 bytes from it and copy them to an u64 verbatim (no endianness change)

1578828949
betawaffle
wow, zig is so awesome

1578828964
betawaffle
andrewrk++

1578829099
daurnimator
Astronothing: okay sounds like you want @bytesToSlice

1578829375
Astronothing
daurnimator: I didn't think of that, but it worked, thanks!

1578829418
scientes
ugggh, what about alignment?

1578829436
scientes
so slices can have non-natural alignment type?

1578829455
daurnimator
scientes: []align(1) u64

1578829461
scientes
yes i see

1578830086
Astronothing
since I'm just using it to initialize a u64 aligned type, does it matter what the RHS alignment is?

1578830127
scientes
just copy it

1578830136
scientes
then you don't have to worry about alignment

1578830527
marijnfs
array literal requires address-of operator to coerce to slice type '[]const []const u8'

1578830527
marijnfs
const full_in = try path.join(b.allocator, [_][]const u8{ dirname, in_file });

1578830544
marijnfs
was ist los

1578830930
daurnimator
?

1578831322
betawaffle
i think they are asking what the error is

1578831362
schme245
marijnfs_: put a & infront of it

1578831497
schme245
marijnfs_: &[_][]const u8{ dirname, in_file }

1578831728
mikdusan
hryx: looks like IrInstructionCheckSwitchProngs never gets (comptime) executed because tautological-PR makes previous runtime conditional now a comptime and block is never hit

1578831817
mikdusan
i think it's this way as sort-of a comptime optimization where checks are only needed as last resort

1578831834
marijnfs_
schme245: ow there, i was trying to put it in from of other parts

1578831854
marijnfs_
this is a confusing one i must say, could it be more descriptive?

1578831992
marijnfs_
also what happened with c-strings, you don't need c"sdf" anymore?

1578832074
mikdusan
sentinal terminated arrays, slices and (c ?) pointers are a thing now

1578832083
marijnfs_
I'm looking at the vulkan-triangle example and issues with it

1578832098
marijnfs_
error: expected type '[*:0]const u8', found '[*]const u8'

1578832106
marijnfs_
what is that :0 type, that's zero terminated?

1578832130
mikdusan
yup

1578832182
marijnfs_
how do i cast to it, or create one with a string literal? c"sdf" doesn't work anymore

1578832448
schme245
marijnfs_:  const slice: [:0]const u8 = "hello";

1578832482
schme245
sorry, [_:0]u8 instead of [:0]u8

1578832608
mikdusan
marijnfs_: string literals are now null-terminated. so you get immediate interop with C.

1578832809
marijnfs
mikdusan: ah, as in all of them? Ok good to know

1578833011
marijnfs
expected type '[*:0]const u8', found '*const [256]u8', a similar one

1578833016
marijnfs
how do i cast between these types?

1578833097
Snektron
The type you provided doesn't have a null terminator

1578833275
marijnfs
yeah it comes from a c-struct, so it's zero terminated but the type is not explicit in that

1578833280
marijnfs
how do i cast it or something

1578833350
Snektron
i think you should be able to use @ptrCast

1578833435
mikdusan
@ptrCast(*const [256:0]u8, my_256_buffer);

1578833916
marijnfs
mikdusan: that seems to work

1578833945
marijnfs
whats up with readFileAllocAligned, now it's a function of Dir? and still takes a path

1578834067
mikdusan
hmm anon list literals field names `args.@"0"` is weird -- it's always going to be a number. Did we ever discuss array-syntax instead? `args[0]`

1578834112
betawaffle
is it possible to get the stdlib docs for a non-master and/or non-linux build?

1578834124
betawaffle
this:

1578834149
Snektron
i think you can use the docs target or something like that when compiling yourself

1578834258
mikdusan
see actual command website uses:

1578836915
betawaffle
is there currently a way for zig to tell me how much stack space is needed by a function (and anything it may call), at least in the case of no recursion?

1578837199
mq32
betawaffle, yeah, you can use @sizeOf(@Frame(func))

1578837212
mq32
it's not exactly the stack space, but pretty close to it

1578837230
betawaffle
is there a way to see *what it actually is*?

1578837253
betawaffle
(i'm just trying to better understand how zig works)

1578837496
marijnfs
betawaffle: maybe @frameSize?

1578837936
mq32
betawaffle: it's not that easy. there's an upper limit for "stack space" used, but that depends on how zig actually compiles that functions

1578837980
mq32
i don't know what "extra" fields are contained in an async frame, but it's at least "required stack space" large and has only a (constant) overhead

1578837980
betawaffle
is the size it comes up with trustworthy?

1578837989
mq32
(at least to my knowledge and understanding)

1578838007
mq32
@frameSize is just a shorthand for @sizeOf(@Frame())

1578839700
betawaffle
is it expected that @frameSize seems to return weird values for non-async functions?

1578840155
metaleap
betawaffle: for your earlier question, you probably already saw

1578840207
betawaffle
oh hey, found a compiler bug, it seems?

1578840232
betawaffle
"when analyzing .../main.zig:6:30: assertion failed. This is a bug in the Zig compiler."

1578840257
scientes
betawaffle, those are commong, you need to put in the debugger

1578840427
betawaffle
seems to happen with `var frame: @Frame(foo) = async foo();` but not `var frame = async foo();`

1578846509
metaleap
newb question (coming not from c but from go / ts / c# / hs) --- I assumed I'd be allowed to keep every local `const` if I never re-assign to it, but I

1578846510
metaleap
/ d? sure: zig compiler explains that it "expected type '*std.heap.ArenaAllocator', found '*const std.heap.ArenaAllocator'" but the `deinit` doesnt seem to directly re-assign any of `self`s immediate members. sure the stuff gets `free`d and might be invalid from then on but in terms of names being assigned, no "mutation". suppose `const` has meanings/implications beyond "bound name can be / cannot be re-assigned / overwritten", right? what would be the

1578846510
metaleap
elevator summary for those for non-C newcomers for whom the concept of pointers isn't entirely foreign on the whole?

1578846698
fengb
const also means memory never changes. deinit() updates the memory in the struct

1578846711
fengb
It’s different from JS where it only implies no reassignment

1578847217
metaleap
fengb: thx for confirming! good to know

1578848343
Snektron
Is it me or is the error trace sometimes wrong?

1578848505
mikdusan
sounds serious if that's the case

1578848606
mikdusan
( friendly reminder it's easy to forget runtime traces lookup source code. and source code changes even if binaries don't )

1578848874
betawaffle
oh, the trace info isn't embedded in the binary?

1578849103
mikdusan
oh wait I am uncertain about that statement. I was thinking about other handlers that sometimes show file-not-found .

1578849213
mikdusan
ok I'm certain now. Moving an exe to another machine and this is what I get: `Unable to dump stack trace: FileNotFound` so at least it's pretty clear.

1578849929
betawaffle
so, does that mean traces become useless if you build on one machine and run on another?

1578850103
metaleap
next noob quest. so you go looking for the equivalent of strconv.itoa or int.toString or some such. you glimpse at the `std.fmt` and see signatures such as:

1578850108
metaleap
fn formatInt(value: var, base: var, uppercase: var, options: var, context: var, comptime Errors: var, output: var) var

1578850111
metaleap
fn formatIntBuf(out_buf: []u8, value: var, base: var, uppercase: var, options: var) var

1578850115
metaleap
fn formatIntValue(value: var, comptime fmt: var, options: var, context: var, comptime Errors: var, output: var) var

1578850158
metaleap
well guess i gotta look at the source here, but if anyone has a 1-liner for me in their head from prior battles, shoot!

1578850672
euantor
metaleap: look at std.fmt.bufPrint:

1578850692
euantor
You supply a buffer to write into, a format string and any variables

1578850747
fengb
That signature will be changing soon™

1578850764
mikdusan
this 1 liner punts to arena... and ain't pretty: `const s = (try std.Buffer.allocPrint(arena, "{}", .{499})).toSliceConst();`

1578850823
metaleap
marvellous, thx! from knowing at comptime that I'm passing an int, calling this with a format-string will be as runtime-efficient as some direct "formatInt(n)"-of-sorts would be, I guess?

1578850900
fengb
There’s a lot of comptime layers but it should resolve to a direct function call yes

1578850903
metaleap
i'm used to avoiding string-format-calls in other langs for overhead reasons when i want toString just a single val of known type and go for the explicit formatInt / formatFloat / etc builtin usually

1578850909
metaleap
nice

1578851012
fengb
Hmm this might be worse with my generator changes. I’ll make a note to do some profiling

1578852726
wjlroe
Am I doing something wrong here where I try to list files in the current directory, but after the scope exists, and dir.close() runs, the first path in the slice becomes blank/null?:

1578853001
marijnfs
entry.name is probably owned by dir and deleted?

1578853013
marijnfs
you probably need to allocate and copy or something

1578853078
mikdusan
wjlroe:

1578853161
wjlroe
Yeah I thought it would be something like that, but it was strange to me that it was only the first one (consistently) that ends up blank (no matter how many files it's listing). I shall have to mem.copy into the ArrayList I guess

1578853299
marijnfs
that is indeed curious

1578853417
wjlroe
std.mem.dupe(allocator, u8, entity.name) fixed it

1578853440
wjlroe
Thanks @marijnfs @mikdusan

1578857951
betawaffle
am I correct that a mem.Allocator is not required to be thread-safe?

1578857957
hryx
mikdusan: thanks for the tip about IrInstructionCheckSwitchProngs. I'll take a look later today.

1578858814
metaleap
my code traverses deep into a `std.json.ValueTree`, switching on tagged-union `Value`s where the switch is always exactly one expected union member or `else => return error.Foo`. so a lot of braces / indenting where all `switch`es have exactly only one success case or failure. do we have a `try`able alternative to coercing/extracting some input tagged-union member into a single expected tag or-else-error?

1578858931
metaleap
would be mere sugar of course and kinda violate "have one obvious way to do sth" zigzen

1578859359
fengb
There’s potential for sugar if it consistently improves code

1578859444
metaleap
just made a comptime fn that does it... fun stuff! my first comptime  :D

1578859447
fengb
There’s std.meta.activeTag()

1578859461
metaleap
neat, will check

1578859807
mq32
metaleap: what's the problem with

1578859829
mq32
fn(x: Union) !Stuff { if(x != .myField) return error.Wrong; return x.myField.foo; }

1578859850
mq32
you are always allowed to directly access a union member as long as it's the active one

1578859874
fengb
You can compare directly to the enum like that?

1578859877
mq32
yep

1578859890
mq32
afaik that is even documented behaviour :)

1578859948
mq32


1578859950
mq32
there we go

1578859954
metaleap
mq32: crikey you're right, i read about that scanning the main lang doc, then forgot!

1578859976
fengb
Well I should refresh myself with the docs :P

1578860229
mq32
fengb, do your chores and read the manual once a week!

1578860357
fengb
I still haven’t rtfm :(

1578861364
Astronothing
anyone know why `std.os.argv` isn't available on windows?

1578862044
mq32
because windows arglists work differently from unix ones

1578862313
daurnimator
metaleap: sounds like you might like my autojson branch.

1578862640
metaleap
@daurnimator parses into a given struct type, eh? if that lands it'll definitely be a much-welcomed addition enabling awesome use-cases. i won't need for current scenario at-hand (the json is actually a sort of "byte-code" of a custom FP-IL with arrays-of-arrays-of-ints-or-arrays-of-ints so if anything would have to auto-parse-into union rather than struct --- would btw be a common situation for various real-world json-schemas in the wild! though in

1578862641
metaleap
current-case the format is trivial enough to just walk the std.json.ValueTree manually. but there are crazy-enough schemas out there were codegen or comptime will be needed for feasible unmarshaling)

1578862709
Astronothing
mq32: it makes not difference to C, the stdlib takes care of it

1578862730
metaleap
daurnimator: so I hope you're shooting for that branch to be eventually PR'd into master of std.json

1578862777
daurnimator
metaleap: yes it was already open (3155), I need to polish a bit then will reopen

1578862843
daurnimator
metaleap: currently unions aren't handled for decoding: I need to figure that out...

1578862893
daurnimator
metaleap: if you do want to give it a try and point out any issues I'd be grateful

1578862996
metaleap
daurnimator: tricky indeed with the unions. might need additional "hint attribute" // comments. a given json node could succeed for more than one union-member-tag, which to choose? first success? based on member ordering? tricky, tricky. tho better to have some opinionated default that one can work with by structuring/ordering one's type hierarchy of structs-and-unions towards it, than not having such at all.

1578863042
metaleap
as for trying, am headed to bed actually but keeping the tab open so I'll remember to check it out next day after work

1578863148
kotey
Hi, I'm new to Zig. I've installed 0.5.0 version(Linux) zig binary to PATH

1578863160
kotey
but nothing works

1578863162
kotey
zig build-exe hello.zig

1578863163
kotey
Unable to find zig lib directory

1578863891
Astronothing
kotey: what does `which zig` print?

1578863948
daurnimator
kotey: also you might want to try master; 0.5.0 is getting a bit old now. Much has changed.

1578864745
kotey
Thanks, everything worked with latest `which zig` shows /home/kotey/zig-linux-x86_64-0.5.0+c4770e7aa/zig and `zig version` 0.5.0+c4770e7aa

1578866981
pmwhite
I wish I could name multiple parameters to a function `_`. It would be nice if Zig disallowed `_` as a variable name and reserved it to mean "ignore this value". Not only would it be a convenient name for parameters I don't care about, but it would also be more consistent with the result ignoring syntax.

1578867059
hryx
Philip White:

1578867241
andrewrk
pmwhite, I invite you to open a proposal for that

1578869227
pmwhite
andrewrk: I think I will.

1578869979
daurnimator
andrewrk: from translate_c.zig, how can I get the current target?

1578870248
andrewrk
daurnimator, it looks like the target is not communicated to translate-c zig code directly; it's passed on the clang arg line though

1578870256
pixelherodev
It's amazing how much slower Zig is when running under a load average of ~9 :P

1578870271
andrewrk
it's something the zig code should have access to if it needs it. out of curiosity what do you need it for daurnimator?

1578870322
daurnimator
andrewrk: to figure out the size of e.g. 'long' on the current target

1578870373
andrewrk
daurnimator, ah yes, in this situation, it would be better to avoid looking at the target I believe

1578870428
daurnimator
andrewrk: okay.... what do I do instead?

1578870430
Snektron
Was there any plan on resolving duplicate enum fields in C enums?

1578870486
daurnimator
Snektron: I thought that was fixed by making them `pub const` fields?

1578870532
andrewrk
daurnimator, you can ask questions like "is this integer bigger than that one" without knowing the target

1578870543
andrewrk
what's the test case you're working on?

1578870557
andrewrk
as an example look at integer casting

1578870561
daurnimator
andrewrk: bit fields: need to know the number of bits used up so a can insert the right sort of padding

1578870573
Snektron
daurnimator, thats a possibility yeah

1578870592
Snektron
i suppose it works for this since the aliases are usually just FLAG_NAME_KHR and FLAG_NAME

1578870602
andrewrk
daurnimator, in some cases it may be necessary to emit target specific code. but consider that the C code is probably

1578870642
andrewrk
bit fields might depend on the C ABI. I'm not sure

1578870646
Snektron
no wait, not always

1578870664
TheLemonMan
daurnimator, you probably want to get & use a ASTRecordLayout

1578870665
Snektron
For this i've just made a small struct for bit fields

1578870701
daurnimator
TheLemonMan: huh.... and now I feel over my head

1578870705
Snektron
`Flags(QueueFlagBits).init({.Compute, .Graphics})`

1578870718
andrewrk
note that zig uses the "C ABI" part of the target to overcome inconsistencies in different C compilers. that might or might not be relevant for bit fields

1578870747
daurnimator
andrewrk: note that bit fields are underspecified by the C ABI and differ between compilers

1578870781
daurnimator
which means that any C code that exposes bit fields as ABI requires you use the same compiler for both building and using the library

1578870794
TheLemonMan
daurnimator, that object contains all the offsets (in bits) of each field as computed by clang

1578870840
TheLemonMan
but that's not the ideal solution if we aim for a target-independent translatio

1578870884
Snektron
ngl writing that Vulkan generator is more work than i thought

1578870905
andrewrk
daurnimator, that's my point - the "C ABI" is part of the target in zig. we overcome the inconsistency by having "which C compiler should we target?" as part of the target

1578870966
andrewrk
target-independent translation may not be possible, but we should shoot for that if it is possible

1578871045
TheLemonMan
hmm, I think we've already given that up since we work on the expanded code

1578871056
TheLemonMan
eg. every ifdef has already been expanded

1578871060
daurnimator
andrewrk: you'd sort of have to provide this info on a per-symbol level

1578871103
daurnimator
andrewrk: e.g. its possible to link an object compiled by gcc and an object compiled by clang: one symbol could use GCC bit layout; another symbol could use clang layout

1578871115
andrewrk
TheLemonMan, that's true but we do translate, e.g. `long` as `c_long` rather than `i64`

1578871156
andrewrk
daurnimator, clang also solves this with "C ABI" as part of the target. you can tell clang to match gcc

1578871164
andrewrk
in fact I believe that is the default

1578871165
TheLemonMan
that may be too little, too late :)

1578871172
daurnimator
TheLemonMan: would it be possible for us to convert #if/#endif to comptime conditions?

1578871183
andrewrk
not really

1578871197
TheLemonMan
we're already struggling with basic macros so I guess not heh

1578871203
daurnimator
yeah I figured

1578871205
andrewrk
maybe if zig was actually the c compiler, but not using clang as an API

1578871249
daurnimator
One thing I'd like us to do is to generate different zig files for different C includes: for now before/after each #include we could do a diff

1578871273
andrewrk
TheLemonMan, you're correct with regards to producing target-specific code, but it is also true that most translated C code is target-independent. code that is not from an #ifdef for example, I would expect to be generally portable

1578871276
TheLemonMan
you can pull some shenanigans on the clang ast and recover the original macros but it's too cumbersome to be practical

1578871348
TheLemonMan
andrewrk, as long as people stick to @cinclude (instead of shipping a translate-c generated file) our assumptions are fine

1578871356
pmwhite
Just wrote the proposal

1578871372
pmwhite
Oof,

1578871469
daurnimator
pmwhite: depending on the calling convention the types need to be known

1578871470
hryx
TheLemonMan: thanks for the tip on #4155. No time to solve it right this moment but I left a note for later

1578871509
pixelherodev
Uh - why wouldn't ifdef -> comptime be possible?

1578871516
pixelherodev
Not necessarily a 1:1 conversion

1578871533
andrewrk
thanks pmwhite - accepted

1578871539
pixelherodev
But if you have e.g. a comptime map of strings to strings, it should be possible

1578871556
TheLemonMan
hryx, np, switch + ranges is a deadly combo (see #3988 and a few other tickets)

1578871558
pixelherodev
For instance, when `@cImport`ing, the returned structure could have a map of definitions

1578871564
daurnimator
pixelherodev: for now translate_c has two phases: one where clang has fully done the preprocessing step and C parsing; the other where zig tries to understand macros

1578871572
pixelherodev
And then ifdef becomes `if (@T` - oh

1578871581
pixelherodev
Hmm

1578871594
pixelherodev
So basically, we'd need a self-hosted C preprocessor replacement?

1578871600
daurnimator
pixelherodev: yup.

1578871605
pixelherodev
Seems a worthwhile thing to have anyways though

1578871649
pixelherodev
If integrated with translate-c, it

1578871720
pixelherodev
I don't think that would be too much work actually

1578871730
pixelherodev
Assuming we only support a subset (e.g. no #pragmas)

1578871745
pixelherodev
#include #define #if #ifdef #else and #endif should be pretty simple

1578871788
TheLemonMan
you're forgetting that the C preprocessor operates on plain text

1578871809
pixelherodev
Doesn't have to.

1578871825
pixelherodev
If this is specifically for translation to Zig anyways, the preprocessing doesn't have to be a distinct step

1578871862
TheLemonMan
I mean, the directives may be in places that are actually illegal in Zig code

1578871878
TheLemonMan
a "dumb" textual translation is not enough

1578871894
TheLemonMan
unless you aim for "60% of the times it works all the times"

1578871895
andrewrk
btw TheLemonMan did you see how impressive c2rust is with regards to goto?

1578871901
andrewrk
(change the dropdown and hit "load sample")

1578871931
andrewrk
I believe we don't need anything as sophisticated, because unlike rust we can break from blocks, which is essentially a goto

1578871945
pixelherodev
If they're in places that are illegal in Zig code, then preprocessing beforehand wouldn't change that

1578871957
pixelherodev
If the goal is match current behavior, it should be simple enough

1578871978
pixelherodev
From there, converting to comptime comparisons would be pretty simple

1578871993
TheLemonMan
andrewrk, damn that's cool

1578872024
andrewrk
pixelherodev, zig's translate-c is translating already-preprocessed-by-clang code. the second phase daurnimator mentioned is trying to turn

1578872061
andrewrk
which, in my opinion, is always a poorly designed C API. macros should almost never be part of the public API. please make an actual C ABI, thank u

1578872069
TheLemonMan
if you want to do such elaborated transforms you need to go to an intermediate (and possibly typed) AST before going to the "renderable" AST

1578872074
andrewrk
yes

1578872095
andrewrk
so far we've gotten away with skipping a lot of steps

1578872110
pixelherodev
Right, but I'm talking about something entirely different

1578872123
pixelherodev
I'm talking about replacing the preprocessing clang does with a self-hosted preproc

1578872176
daurnimator
so... I really want to try and get bitfields working within the next few hours

1578872199
andrewrk
I bet you could hack something that works for your use case together in a couple hours

1578872202
daurnimator
AFAIK its the remaining major blocker on an MVP for zig kernel modules

1578872215
daurnimator
andrewrk: I've been trying... but keep getting compiler crashes :(

1578872228
andrewrk
ah bummer

1578872249
andrewrk
I hate when that happens

1578872268
TheLemonMan
daurnimator, this may be helpful

1578872288
TheLemonMan
when the compiler crashes it means you've found the next yak to shave!

1578872304
andrewrk
haha

1578872336
daurnimator
TheLemonMan: I don't suppose I can give you a sample to work on for a couple of hours? are you on linux?

1578872374
andrewrk
daurnimator wants to demo a linux kernel module at a conference he's going to

1578872382
daurnimator
andrewrk: I'm already here :P

1578872385
andrewrk
oh :)

1578872517
TheLemonMan
in the next few hours I'm supposed to get some sleep, tomorrow's already looking bleak

1578872542
andrewrk
sorry to hear that

1578872569
andrewrk
sleep is great, love sleep

1578872576
Astronothing
daurnimator will it be recorded? :D

1578872723
TheLemonMan
it

1578872731
Snektron
hmm

1578872762
TheLemonMan
you have the bit-offset of each field and can get the type size

1578872779
Snektron
Would it be possible to move the code to parse C into std?

1578872815
andrewrk
Snektron,

1578872831
Snektron
I'm almost thinking its easier to parse vulkan.h with that and generate the source from a Zig ast

1578872839
Snektron
as opposed to this ungodly spec

1578872877
TheLemonMan
andrewrk, speaking of `switch`, does the language ref state what kind of types one can use ?

1578872902
andrewrk
TheLemonMan, I think that is not specified yet

1578872914
TheLemonMan
Snektron, I wonder if it's even worse than xcb thousand xml files containing the protocol definitions

1578872926
Snektron
I haven't seen those

1578872928
andrewrk
I was thinking recently that it would make sense to start on a draft of the language specification

1578872945
companion_cube
is there nested pattern matching 😏

1578872948
Snektron
But if theyre as ""language agnostic"" as the Vulkan ones i fear the worst

1578872954
TheLemonMan
Snektron,

1578873032
Snektron
yeah similar

1578873065
TheLemonMan
"whatever the compiler accepts" is the best specification at this point IMO

1578873155
Snektron
i'm completely confused about why this structure was chosen

1578873155
Snektron
it doesn't make any sense

1578873246
andrewrk
TheLemonMan, I agree that's status quo, but that's less than ideal for folks who want to depend on the project

1578873297
Snektron
andrewrk, did you see my questions about std.zig from yesterday?

1578873348
Snektron
to reiterate: Why is ast.Tree returned as a pointer to memory owned by itself, and why are nodes a knock-off union(enum) instead of an actual one?

1578873490
andrewrk
Snektron, the second question is shorter to answer, so starting there: it's different in memory. union(enum) takes up a constant amount of memory regardless of the node type, but it allows preallocation of nodes. the way std.ast is done does not allow pre-allocation of nodes, but nodes only take up as much memory as the specific kind requires

1578873500
andrewrk
it's two different and valid ways to do polymorphism

1578873543
andrewrk
for the first question, it's because the parser uses an arena allocator as the strategy for freeing memory

