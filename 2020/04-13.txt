1586738552
r4pr0n
is it planned to buffer the write syscalls when doing a std.io.getStdOut().outStream().print() e.g.?

1586739361
foobles
whats the best way to construct an IrInstrGen, given a ZigValue* known to have come from another IrInstr?

1586739479
pixelherodev
r4pr0n, you can use a BufferedOutStream to wrap std.io.getStdOut()

1586739501
pixelherodev
The logging module will probably use buffering

1586739519
pixelherodev
Raw usage of stdio isn't planned to be buffered as I understand it

1586740134
r4pr0n
oh that makes sense

1586740147
mikdusan
just read through Async I/O releast notes. looks fantastic!

1586740155
r4pr0n
i just thought .outStream() would be a bufferedoutstream

1586740248
pixelherodev
Nah, the default out stream is just that

1586740255
pixelherodev
The default out stream :)

1586740429
r4pr0n
but what is it's purpose then? couldn't you just add the functions for it to the file directly?

1586740542
pixelherodev
What do you mean?

1586740545
pixelherodev
Ahhh

1586740548
pixelherodev
It's an interface

1586740556
pixelherodev
`.outStream()` returns an OutStream

1586740577
pixelherodev
Sorta like how there's different allocators

1586740590
pixelherodev
.outStream() gives you a value of the same type for all output streams

1586740711
mikdusan
foobles: just use the IrInstr which has the ZigValue ?

1586740729
foobles
I cant quite do that

1586740739
foobles
its an IrInstr that's known to be an option

1586740751
mikdusan
ok so ZigValue is const?

1586740756
foobles
yes

1586740768
mikdusan
what type

1586740770
foobles
im trying to get the wrapped value

1586740773
foobles
any type

1586740776
foobles
just any option

1586740802
foobles
im looking at `ir_analyze_optional_payload_value`

1586740808
foobles
maye that's what i want?

1586740864
r4pr0n
and how do you use it?

1586740879
r4pr0n
i tried this:

1586740941
mikdusan
foobles: ir_build_optional_unwrap_ptr ?

1586740960
foobles
does that work only for ?*T types?

1586740962
mikdusan
_gen

1586740991
mikdusan
i believe for everything

1586741002
foobles
oh i see , cool

1586741012
foobles
so what is source_node / base_ptr?

1586741020
foobles
why are those needed?

1586741039
mikdusan
look at the _gen variant

1586741066
pixelherodev
r4pr0n, there's probably a flush function or something, 1 sec

1586741078
pixelherodev
Yep

1586741093
pixelherodev
For future reference: I just check /usr/local/lib/zig/std/ files to answer these questions :P

1586741099
foobles
oh right

1586741099
pixelherodev
`try buffered_stream.flush();`

1586741131
foobles
thank you very much for helping me

1586741161
foobles
mikdusan it still does take a `source_instr` and a `base_ptr`

1586741176
pixelherodev
r4pr0n, re: "why not just have the functions directly", it allows various streams to implement a single function (write) and expose the standard functionality (e.g. `print`)

1586741212
mikdusan
foobles: but now you can give it the instrction from which ZigValue came from?

1586741219
pixelherodev
I do think mixins would be nicer though, since it would remove the need to call` .outStream` and shhuold ideally not be a burden to the compiler

1586741225
pixelherodev
s/hh/h

1586741273
foobles
I have an `IrInstrSrcBinOp`, and I have determined that  `op1` and `op2` are both optional non-pointer types

1586741342
r4pr0n
oh yeah it works now, thanks

1586741352
mikdusan
foobles: one moment,

1586741365
foobles
and at compile time, once ive checked that neither are null, i want to recursively create a new comparison instruction of the inner values

1586741365
r4pr0n
what do you mean with mixins?

1586741442
foobles
this will be even harder when they are runtime values :(

1586741639
foobles
since ill have to generate a ton of instructions in the second pass, testing if both are null, or if both are non-null and their inner values are the same

1586741729
pixelherodev
r4pr0n, basically, instead of having a function which returns the interface type, you use `pub usingnamespace InterfaceType` and pull the interface's methods into the implementor

1586741732
pixelherodev
IIRC anyways

1586741896
r4pr0n
yeah that'd be kinda nice

1586741924
pixelherodev
There were definitely issues with it though even if I can't remember them

1586741932
pixelherodev
Otherwise it'd have been merged :P

1586741967
mikdusan
foobles: my thoughts so far; you want to create SrcOptionalUnwrapPtr via ir_build_optional_unwrap_ptr()

1586741995
r4pr0n
Is it possible to use std.fmt.format() to format into a string?

1586742004
foobles
alright that would make sense. it seems like all the other unwraps use that under the hood mikdusan

1586742019
pixelherodev
r4pr0n, bufPrint

1586742022
mikdusan
so what I did to focus on that was this little reduction:

1586742029
pixelherodev
`std.fmt.bufPrint(&buffer, formatter, tuple);`

1586742063
pixelherodev
Where buffer is an array (and thus &buffer is a slice)

1586742155
mikdusan
foobles:

1586742164
foobles
ahhh thanks ill look at that!

1586742165
mikdusan
so basically do the bare minimum in comptime context.

1586742183
mikdusan
just like what you need. then the compiler will tell you how it does it :)

1586742223
mikdusan
because comptime, you're not going to see those in a nice listing, rather it's going to be analyze ~ lines and then const results "->" lines

1586742239
mikdusan
so it helps to use real catchy id names. hence aaa, 333

1586742275
foobles
what am i suppossed to do with the gist yuor posted?

1586742282
foobles
s/yuor/your

1586742292
mikdusan
oh hehe I should hit that green comment button lol

1586742298
mikdusan
there ya go

1586742318
r4pr0n
pixelherodev: but you can't format at comptime, can you?

1586742357
foobles
thats so cool!!

1586742360
foobles
wow!

1586742392
pixelherodev
r4pr0n, whyever not? ;)

1586742395
foobles
so do you know the purpose of source_instr and base_ptr are?

1586742409
foobles
i can guess that base_ptr is the pointer to the option thats being unwrapped

1586742421
foobles
but im not sure what the source_instr is supposed to be

1586742428
foobles
mikdusan

1586742449
mikdusan
k which os are you on?

1586742478
foobles
windows

1586742482
foobles
does that matter? :0

1586742509
mikdusan
oh noes. I don't debug on that platform. what I would do with questions like this is put breakpoints in the code. and follow.

1586742531
mikdusan
so the unobvious part here is... how do you even find the breakpoint in .cpp code, for something in .zig code?

1586742553
r4pr0n
pixelherodev: well i get a "unable to evaluate constant expression"

1586742579
mikdusan
it just so happens andrew made that somewhat easier by adding some functions that can be called / evaluated from your debug session

1586742607
r4pr0n
also, how would i know the size the buffer has to have

1586742643
foobles
awesome sauce

1586742648
mikdusan
in our very recent release notes here's a text copy

1586742650
mikdusan
in gist

1586742705
mikdusan
so the overall idea is... add some early breakpoint around main or whatever, then call this function in debugger while running. dbg_ir_break(src_file_zig, line)

1586742739
mikdusan
and expect that line to be hit multiple times. lots of things get analyzed on each line of zig code

1586742759
mikdusan
i suppose you could use whitespace to your advantage and isolate

1586742846
foobles
oh cool! so put the break points in the zig program?

1586742868
mikdusan
no, you do it in debugger

1586742880
mikdusan
are you familiar at all with gdb or lldb?

1586742887
foobles
somewhat

1586742894
foobles
like im vaguely competent

1586742906
foobles
so i would be putting the breakpoints in the C++ source?

1586742916
mikdusan
nope

1586742925
mikdusan
it's transient whlie you run debug sesssion

1586742983
mikdusan
I dunno, is it dirt simple to setup a twitch session on mac?

1586742987
mikdusan
I could do that

1586743028
foobles
that would be super helpful!

1586743046
foobles
i mean if you have the time, i would be super grateful

1586743177
mikdusan
hmm ok that looks involved. I'll just screen shot something from my terminal

1586743209
pixelherodev
r4pr0n, source?

1586743250
r4pr0n


1586743258
r4pr0n
well i was pretty sure that it wont work like that

1586743263
r4pr0n
but i'm not sure how it would

1586743310
pixelherodev
r4pr0n, where's test123 defined?

1586743315
pixelherodev
That has to be comptime known for it to work

1586743327
pixelherodev
Also

1586743330
pixelherodev
buffer has to be comptime defined

1586743330
r4pr0n
it is

1586743337
pixelherodev
THe buffer sure isn't

1586743351
pixelherodev
Can't write to a runtime address (the buffer) at comptime

1586743355
pixelherodev
Can do `comptime var buffer` though

1586743365
pixelherodev
and then it'll continue being present at runtime

1586743369
pixelherodev
At least, AFAIK

1586743397
r4pr0n
oh that works yeah

1586743402
pixelherodev
:D

1586743406
r4pr0n
but it has one issue

1586743426
r4pr0n
i have to specify a buffer size, but i want it to be exactly as big as it needs to be

1586743452
r4pr0n
else if i do something with it it'll contain a bunch of garbage at the end

1586743522
pixelherodev
Could add \x00 to null-terminate

1586743544
fengb
Let it have some garbage. bufPrint returns the correctly sized slice

1586743554
pixelherodev
^

1586743558
pixelherodev
Sorry, forgot about that

1586743624
mikdusan
foobles: window 1: setup debugger with exact command line, note --verbose-ir must be passed to zig

1586743661
r4pr0n
well that fixes the garbage

1586743668
r4pr0n
but i still have to set a limit for it

1586743703
mikdusan
window 1: setup initial break at main; run; and it traps at main. then lldb syntax to call the .cpp function andrew added, is "p dbg_ir_break(...)" and then tell debugger to continue

1586743748
foobles
so use the zig debugger? or is that lldb

1586743768
foobles
like set the intitial break in zig code right?

1586743771
mikdusan
window2: breakpoint when ir_analyze() code sees that source/line comibination. then I just use some lldb to show locals, and use another helper func to print the src() location

1586743789
mikdusan
and we can see hey it stopped line 5, col 16. that's the equal sign!

1586743803
mikdusan
foobles: that's lldb

1586743825
mikdusan
foobles: nope. i didn't do a thing to unwrap.zig -- or any other zig source code.

1586743879
foobles
wait so what file is the breakpoint set in?

1586743883
foobles
thats the part im confused about

1586743896
foobles
thank you for being so patient with me '=D

1586743932
mikdusan
birds eyeview is: this is a native debug session. we aren't actually running unwrap.zig itself. we're run/debugging the zig.exe

1586743968
mikdusan
we use lldb to run zig.exe with all the correct command line args and say stop at main. that is... don't do anything except startup zig.exe

1586743989
foobles
oh ok!

1586744007
mikdusan
once it's running, but stopped at main, it's a live process. we then, live, manually call a function called dbg_ir_break that is already compiled into zig.exe

1586744020
foobles
awesome, i think i understand

1586744026
foobles
thats rad, thanks, ill try it out now

1586744034
mikdusan
so then this gets us close, but not all the way there.

1586744071
mikdusan
you may have to break, examine the frame ... I chose to look at old_instruction->base.src() to give me col number

1586744094
mikdusan
and first several ones bounced around that line 5... until I got to the token that is at colum 18

1586744142
mikdusan
which is our right-hand-side operand forcably unwrapping an optional

1586744215
mikdusan
so the unwrap.zig should probably be used like an optional properly. because that's what your PR will do right? it wants to do the equivalent somewhere of `if (maybe_value) |value| { }`

1586744236
foobles
yeah!

1586744237
mikdusan
another good excercise is.. right real zig code in a reduction that does EXACTLY what you want to do in the IR.

1586744260
foobles
oh thats a good idea

1586744274
mikdusan
s/right/write lol

1586744279
r4pr0n
is there also a nonfixedbufferstream?

1586744284
pixelherodev
Yeah write.

1586744293
pixelherodev
r4pr0n, a wat?

1586744299
pixelherodev
Ohhh

1586744310
pixelherodev
You mean a stream backed by a dynamic array?

1586744321
r4pr0n
yeah

1586744325
fengb
Dynamic arrays require the heap

1586744336
pixelherodev
You can probably trivially implement one using a FIFO

1586744343
pixelherodev
std.fifo

1586744344
r4pr0n
well it wouldn't really care, i'd use it comptime

1586744351
pixelherodev
Can't do that

1586744355
fengb
Oh, ArrayList(u8) has a usable outStream

1586744357
pixelherodev
Comptime allocation isn't doable yet

1586744362
pixelherodev
Oh right!

1586744365
pixelherodev
fengb, good catch!

1586744368
r4pr0n
it's not?

1586744368
pixelherodev
Forgot about that :)

1586744374
pixelherodev
r4pr0n, nope

1586744380
r4pr0n
thought i saw that in streams already

1586744380
pixelherodev
It's in the plans but there's a couple bugs

1586744394
fengb
Can’t use it in comptime yet

1586744427
foobles
gaah turns out I dont hav LLDB :(  i think im going to call it a night

1586744431
foobles
thank you so much for the tips

1586744436
foobles
this will be super helpful

1586744443
fengb
Anything that depends on using an allocator has some blocking bugs in comptime, unfortunately

1586744475
fengb
But realistically, using a fixed buffer is probably faster and more efficient anyway

1586744576
r4pr0n
i would actually be able to set a good limit

1586744577
pixelherodev
^

1586744578
mikdusan
foobles: I just added more.zig to comments. this would be super useful to examine as runtime

1586744580
pixelherodev
I mean

1586744587
pixelherodev
`<fengb> But realistically, using a fixed buffer is probably faster and more efficient anyway` That.

1586744589
pixelherodev
Very much tat.

1586744591
pixelherodev
that

1586744593
fengb
Just don’t pad too big. Start at like 100 and go from there

1586744612
r4pr0n
is there a function to get the biggest amount of bytes a type can be formatted at?

1586744613
foobles
this is so awesome

1586744614
fengb
At worst, you’d waste 100 bytes during the compile

1586744615
mikdusan
foobles: and I guess that logic might be a subset of your solve

1586744619
r4pr0n
like u8 -> 3

1586744632
foobles
i really appreciate it. i feel like if I can do this, i can probably implement the rest

1586744633
r4pr0n
i8 -> 4

1586744663
fengb
There’s a way to calculate it. I don’t remember if we ended up exposing it

1586744670
mikdusan
foobles: so remember with --verbose-ir you'll see 2 passes on the same entry() and somewhere inbetween them will be line-by-line comptime analysis and execution going on

1586744672
fengb
But that basically requires printing twice

1586744710
fengb


1586744751
fengb
fmt.count() with the same args will spit out the target size

1586744773
fengb
This is definitely slower than preallocating a fixed amount, but it may be more space efficient

1586744790
r4pr0n
yeah

1586744840
r4pr0n
i guess it's kinda stupid to double the speed cost just for a couple of bytes

1586744877
r4pr0n
but the possibility to change the string and have the buffer being too small annoys me

1586744915
pixelherodev
r4pr0n, maybe use one mega-slice?

1586744924
pixelherodev
That is, a single e.g. 4KiB buffer

1586744930
pixelherodev
And print into it multiple times

1586744955
pixelherodev
`const m1 = bufPrint()... const m2 = bufPrint((&buffer)[m1.len..])`

1586744958
mikdusan
foobles: also the "panic()" override function is helpful. if you don't have that, too much IR is generated because it brings in a lot more code.

1586744976
foobles
interesting

1586744981
foobles
even though panic is never called?

1586744988
mikdusan
correct

1586744988
r4pr0n
yeah i could also use that

1586745046
mikdusan
zig is lazy. so this panic override doesn't even use StackTrace. thus StackTrace and all that it entails is never resolved. that includes reading elf/debug/sorting and all that

1586745296
foobles
thats cool!

1586745298
foobles
wow hehe

1586745688
mikdusan
foobles: which analysis function were you looking at?

1586745723
foobles
i think im too tired to try and set up lldb like you suggested tonight, i think ill do that part tomorrow

1586745733
foobles
but i am trying to implement comparison of non-pointer optionals

1586745749
foobles
so im looking at ir_analyze_bin_op_cmp

1586745785
mikdusan
there's probably an equiv setup for windows but I don't have exp debugging on windows

1586745841
mikdusan
ah so do you have thoughts on an high level logic for what ir_analyze_bin_op_cmp will do?

1586745896
foobles
yeah:

1586745973
foobles
so if op1 and op2 are both non-pointer optional types, then if they are both comptime: if they are both null, or one is null but not the other, return a const bool. If they both have values, recurse and return the result of comparing those.

1586746018
mikdusan
so this is just shooting from the hip, but we enter ir_analyze_bin_op_cmp which I'll just call _cmp(),

1586746054
mikdusan
and you basically have the instr that gives you op1,op2 instructions that represent expressions

1586746075
mikdusan
my word choices are probably poor but bear with me,

1586746118
foobles
im following

1586746121
mikdusan
so let's check for case inside _cmp(op1,op2) that both op1,op2 are optionals

1586746136
foobles
i already have done that

1586746153
foobles
hold on let me make a gist or something to show you what i have

1586746163
mikdusan
if they are, get a ptr to each of op1,op2

1586746314
mikdusan
then use that _build_unwrap_ptr function for each op1,op2 to give you unwrapped_op1, unwrapped_op2 and then op1 = unwrapped_op1; op2 = unwrapped_op2 let you're done? naturally this would have to come before meat of cmp()

1586746386
foobles
alright that makese sense with me

1586746395
foobles
s/makese/makes

1586746419
foobles
but i just dont know what to put for the source_node parameter

1586746425
foobles
im not sure what that means

1586746431
mikdusan
and what's the recurse logic? only recurse when BOTH unwrapped_op1 and unwrapped_op2 are still optionals?

1586746453
mikdusan
s/recurse/unwrap_again

1586746485
foobles
here is some pseudocode:

1586746559
foobles
if (op1 is comptime && op2 is comptime):  if (op1_is_not_null && op2_is_not_null) { return _cmp(op1.unwrap(), op2.unwrap()); }

1586746567
foobles
this would be inside of the `_cmp` function  itself

1586746697
daurnimator
06:25:11 <foutrelis>daurnimator: success! (I think). got rid of libclangHandleLLVM from libclang-cpp since it was unused anyway, so now clang-cpp doesn't contain any conflicting symbol thingies and zig happily compiles against it (with ZIG_PREFER_CLANG_CPP_DYLIB=ON)

1586746737
mikdusan
source_node for op1 should be op1->base->source_node

1586746794
daurnimator
06:26:02 <foutrelis>daurnimator: though it hung during its tests, due to:

1586746863
mikdusan
daurnimator: yeah I'm seeing some kind of eventloop hang on an real tiny example andrew put for rel0.6.0 notes re: Async I/O

1586746955
foobles
mikdusan hmm ok

1586746959
foobles
that would make sense

1586746969
foobles
but then why does the function need it to be passed as another parameter?

1586746987
foobles
if it can just access it directly from the IrInstGen thats passed as one of its other parameters?

1586747149
mikdusan
I can only assume it's because that's not always the case

1586747262
foobles
hmmm

1586747264
mikdusan
also there have been some rapid advances in zig compiler inernals... some of the things that fall through the cracks are redundancies. so

1586747264
foobles
alright

1586747278
foobles
ooooh ok that would make sense :)

1586747373
daurnimator


1586747581
mikdusan
foobles: as an aside, if you are going to try a debugger, I assume it will be on linux... probably want to go with gdb. I use lldb because macos.

1586747631
foobles
aah ok

1586747658
foobles
i cant find any tutorial on using msvc debugger through the command line without the IDE =#

1586747693
mikdusan
pretty sure you can use the IDE with a window for command-line apps?

1586747793
mikdusan
but yeah, linux/gdb is probably the best supported for debug right now. iirc there was an open issue about breakpoints on wrong-lines on windows recently

1586751008
andrewrk
I wonder how well RemedyBG works for developing zig on windows

1586751012
andrewrk


1586751053
daurnimator
andrewrk: see messages from foutrelis above

1586751080
andrewrk
daurnimator, happy to see that. look at b8796be79d11

1586751108
daurnimator
ah ha :)

1586751115
andrewrk
the policy on flaky tests is: file bug report, disable test immediately

1586751199
daurnimator
andrewrk: did you want that release party in ~10 hours?

1586751226
daurnimator
andrewrk: and PM me your address :)

1586751396
andrewrk
here's what the timeline looks like: I'm going to finish the release notes in about 6 hours from now. then I will sleep for ~6 hours. none of those remaining 0.6.0 bugs are going to get solved. after that, the release process will take ~2 hours, maybe up to 4 if any issues occur. then hopefully we'll have a nice media day. the next day after, would be a good release party day

1586751431
andrewrk
depending on what you had planned

1586751444
daurnimator
I'm making things up on the fly :P

1586751837
andrewrk
anyway, tuesday would be good for me, unless the activity didn't conflict with any release-day situations that arise

1586760931
daurnimator
so with the arch clang fix I can now compile zig against system LLVM as long as I pass `ZIG_PREFER_CLANG_CPP_DYLIB=on`

1586760951
daurnimator
is that the desired outcome?

1586761008
daurnimator
(compiling without it I get:

1586761376
andrewrk
I haven't been able to make zig detect in a clean way whether it should be trying to do -lclang-cpp or not. every system is different, it seems

1586762630
pixelherodev
If clang-cpp exists, it should be used, shouldn't it?

1586762999
andrewrk
one would think. however, it is misconfigured on several systems and causes linker errors

1586763046
andrewrk
arch just fixed a bug for example. they got it wrong until today

1586763060
andrewrk
even apt.llvm.org was misconfigured and didn't fix it for their own release

1586767109
andrewrk
I finished the release notes

1586767179
pixelherodev
Nice!

1586767186
pixelherodev
One thought on a future package repository

1586767204
pixelherodev
If we have a language-specific package repo, can I request that it be curated by Zig team members?

1586767229
pixelherodev
I don't think there's anything wrong with a language-specific package repo, but e.g. NPM has made me wary of just allowing unchecked submissions

1586767236
pixelherodev
This is a bit early to worry about it, I know :P

1586767359
andrewrk
package curation will fall onto a third party, since we plan to have decentralized package management

1586768053
pixelherodev
Ruhroh

1586768059
pixelherodev
(That's probably a good thing)

1586768393
daurnimator
andrewrk: wait really? wow

1586769172
pixelherodev
I still say "Zig isn't better because we're perfect but because we're willing to iterate as much as it takes" should be refined and added to `zig zen`

1586773929
mikdusan
he is a machine: `grep TODO src/download/0.6.0/release-notes.html | wc` -> 0

1586774018
kenaryn
pixelherodev: "We shall embrace change if it serves the end user's needs."

1586774200
kenaryn
"Refinement is not a breaking backward compatibility, it's a necessity."

1586774246
pixelherodev
I like the former, less so the latter

1586774948
Xavi92
So do I :)

1586775093
pixelherodev
Eh, I think it's not needed

1586775106
pixelherodev
`zig zen|tail -n2|head -n1`

1586775120
pixelherodev
Also

1586775127
pixelherodev
`* Incremental improvements`

1586775128
pixelherodev
:)

1586775825
kenaryn
I think it would account for a great deal of publicity if zig lang could appear in the last Overview's subpart (alongside Rust) on the github page's emscripten (i.e.

1586775971
BeardPower
Hi everyone! With 0.6.0 to be released soon, will it be production ready? If not, what's missing?

1586776036
daurnimator
BeardPower: define "production ready"

1586776056
daurnimator
in some ways yes: you can write working code with it.

1586776066
daurnimator
in most ways no: the language is not stable yet; and there are known bugs

1586776124
BeardPower
daurnimator: is it stable enough to create a reliable client/server (e.g. trading bots), GUI, business app with it?

1586776146
daurnimator
probably not?

1586776177
daurnimator
networking APIs are not complete at all

1586776196
daurnimator
and there are no GUI libraries that are known to work perfectly yet

1586776243
BeardPower
That would not be an issue because I could use C libs for networking. I want to use Blend2D for a GUI.

1586776252
daurnimator
that said, you

1586776342
BeardPower
I read that deflate and inflate should be part of the zig lang so I thought about porting a high-performance C implementation.

1586776381
BeardPower
It's MIT like zig.

1586776398
daurnimator
BeardPower: please do; we'd like deflate in the standard library!

1586776442
BeardPower
It would be a nice project to get used to zig and compare it's performance.

1586776462
ifreund
i beleive BaroqueLarouche had something in progress for inflate?

1586776536
daurnimator
ifreund: I can't see it in their repository.

1586776552
BeardPower
Yeah, I read the GitHub issue but it seems he did not move forward with it. IIRC he was porting some implementation which was not tailored for performance.

1586776601
ifreund
daurnimator: i may just be remembering discussion here

1586776617
ifreund
porting a high performance c implementation would be awesome

1586776642
BeardPower
Anyway. I thought it would be a nice project.

1586776676
BeardPower
It's this one here:

1586776778
daurnimator
BeardPower: looks reasonable to me; go for it!

1586776904
BeardPower
There is also an Intel implementation using Assembler, which is the most performant one but maybe not that ideal for having it in the language.

1586776905
BeardPower


1586776927
BeardPower


1586776939
BeardPower
daurnimator: Alright!

1586777093
Xavi92
Can padding bits be anonymous as in C bitfields?

1586777121
daurnimator
BeardPower: you could start off by just porting the libdefalte CRC32 implementation to make the zig standard library crc function faster

1586777149
daurnimator
Xavi92: no; not in the current release. You'll have to check if there's an existing proposal

1586777156
BeardPower
daurnimator: Good idea! I will work on it ASAP.

1586777626
daurnimator
BeardPower: note that something like

1586777845
BeardPower
daurnimator: Nice. I need to dig more into that one.

1586777871
daurnimator
BeardPower: just have a look at the existing crc implementation(s) and you should figure itout

1586777929
BeardPower
daurnimator: Will do. 0.6.0 should be released any moment, right?

1586777976
daurnimator
BeardPower: in ~8 hours I think.

1586777983
BeardPower
Nice!

1586778512
marijnfs
exciting

1586780236
daurnimator
> In this release, the minimum supported Windows version is bumped from 7+ to 8.1+, following the extended support lifecycle of Microsoft.

1586780263
daurnimator
^ (sadly) windows server 2008 (based on vista!) is supported on azure for 3 more years...

1586780303
ifreund
why do people do things like run windows on a server

1586780366
daurnimator
ifreund: need to run Active Directory server somewhere...

1586780404
daurnimator
there's enough windows-only software that sysadmins need something to manage all the end user devices

1586780490
ifreund
i'm sure there're valid reasons, i know very little about the windows sysadmin world

1586780500
ifreund
i never would by choice though

1586781205
marijnfs
how do I define the specific error set a function returns?

1586781315
Xavi92
Ouch, 'TODO buf_read_value_bytes enum auto'

1586781332
Xavi92
When trying '_ = puts(fmt.fmtZ("{}", .{@bitCast(u32, DisplayEnable {})}));'

1586781385
Xavi92
That line is causing zig to crash. Is there any alternative for this?

1586781416
mikdusan
what is `DisplayEnable`

1586781464
fengb
marijnfs: `fn foo() error{OutOfMemory,Blah}!void {`

1586781492
fengb
Or you can assign the errorset to a const

1586781515
marijnfs
Ah yeah, then I'd just put ErrorSet!void ?

1586781523
daurnimator
marijnfs: yes

1586781544
pixelherodev
That's the correct way, yes

1586781553
pixelherodev
You can also use `!T`

1586781561
pixelherodev
That tells the compiler to infer the error set

1586781933
marijnfs
yeah i had an issue with that so had to define it

1586782130
pixelherodev
That happens sometimes. yeah

1586782528
marijnfs
yeah i'm passing a function that gets encapsulated, and the function doesn't know the error set yet i guess

1586782543
marijnfs
an anyerror just contains the full error set, that might work as well i guess?

1586782770
pixelherodev
yes, but it's IMO better to use an error set

1586782814
marijnfs
yeah might try that, it keeps refusing

1586783044
Xavi92
mikdusan: sorry, was afk. DisplayEnable is a packed struct

1586783175
Xavi92
mikdusan: the first member is an anonymous enum(u1){On, Off}, defaults to .On

1586783276
daurnimator
Xavi92: hmm, does it work if you make it a `packed enum`?

1586783365
Xavi92
daurnimator: still crashes. The error message from the compiler changes to 'TODO buf_read_value_bytes enum packed' though

1586783379
mikdusan
you can work around it:

1586783388
Xavi92
daurnimator: would packed enum be needed if the struct is already packed?

1586783396
daurnimator
Xavi92: yes

1586783406
Xavi92
daurnimator: even if enum(u1)?

1586783426
daurnimator
Xavi92: yes. see

1586783515
Xavi92
daurnimator: thanks a lot for the tip!

1586783654
Xavi92
mikdusan: nope, 'const de = DisplayEnable{}; _ = puts(fmt.fmtZ("{}", .{@bitCast(u32, de)}));' would still crash -> TODO buf_read_value_bytes enum packed

1586783744
fengb
I think this is caused by a bit cast in anon tuples. Can you try assigning the bitcast into a temp?

1586783902
Xavi92
fengb: nope, that'd crash too. 'const tmp = @bitCast(u32, DisplayEnable{}); _ = puts(fmt.fmtZ("{}", tmp));' -> TODO buf_read_value_bytes enum packe

1586784296
daurnimator
Xavi92: missing .{} around your `tmp`?

1586785162
Xavi92
daurnimator: you're right, but still has the same effect. -> TODO buf_read_value_bytes enum packed

1586785231
Xavi92
daurnimator: BTW, before submitting my proposal about anonymous padding bits, I've read

1586785292
daurnimator
Xavi92: one question is going to be: "what does the padding have to be"

1586785306
Xavi92
andrewrk suggests using '_: ux = default_value', but I don't know if it was implemented into the language finally

1586785312
daurnimator
e.g. some apis require that padding bytes are `0`; to me that's more reserved than padding

1586785320
daurnimator
Xavi92: default values exist now.

1586785348
Xavi92
daurnimator: the default value syntax would fix that, but the idea is forbid the user from accessing these padding bits directly

1586785380
Xavi92
Naming it '_' would make sense, but AFAIK the user can access it by 'struct_name._ = value;'

1586785383
daurnimator
Xavi92: how would an api verify that the padding/reserved bits are set correctly?

1586785440
Xavi92
daurnimator: thanks to the default value e.g.: '_: u5 = 0'

1586785455
Xavi92
I hope I didn't misunderstand something

1586785482
companion_cube
morning y'all

1586785490
daurnimator
Xavi92: say I have 3 reserved fields, the first one must be 0, the second must be 42, the third can be undefined for all I care. how can I verify that argument my function receives meets those requirements?

1586785503
companion_cube
I wonder if zig will give birth to a set of new "design patterns" around custom allocators

1586785513
companion_cube
(per request is easy, but there might be so many others)

1586785543
daurnimator
companion_cube: I expect that we'll e.g. have a "main" http framework that provides that sort of thing for handlers.

1586785579
companion_cube
sure, the handler takes an allocator, etc.

1586785584
companion_cube
but for other things, really…

1586785600
companion_cube
say you write an IRC bot, you could have an allocator per incoming message

1586785602
daurnimator
Xavi92: I just finished reading your linked issue :) seems like andy said exactly what I was thinking: padding and reserved fields are different.

1586785603
Xavi92
Would 'const Name = packed struct { _: ux = 0, _: uy = 0, _uz = undefined}' fit?

1586785629
daurnimator
Xavi92: you have two fields there both called _. how do I check each one?

1586785743
Xavi92
I understand. Thanks for your help :)

1586785853
marijnfs
i have a function that accepts a function: add_thread(comptime function: fn(var) anyerror!void)

1586785861
Xavi92
daurnimator: BTW, the compiler also crashes with 'const a:u32 = @bitCast(u32, DisplayEnable{});' -> TODO buf_read_value_bytes enum packed

1586785864
marijnfs
but if i pass one of that type, i get expected type 'fn(var) var', found 'fn(i64) anyerror!void

1586785877
Xavi92
So it is not related to fmt or anything

1586786020
daurnimator
Xavi92: sorry, you'll have to file it away with the rest of the `packed struct` bugs

1586786045
daurnimator
maybe mikdusan?

1586788009
daurnimator
andrewrk: I think the "Slicing with Comptime Indexes" section needs to be higher

1586788151
TheLemonMan
oh today is the release day

1586788191
foobles
:O

1586788218
fengb
🤞

1586789827
foobles
a

1586789947
companion_cube
🎉

1586790081
fengb
Hey we are the third result from Google search for Zig

1586790103
fengb
Unfortunately we’re below a million “semantic results” :(

1586790167
ikskuh
<TheLemonMan> oh today is the release day

1586790169
ikskuh
\o/

1586790182
ikskuh
i'm totally "out of date" on zig due to demo-partying the whole weekend

1586790217
fengb
You were demoing a party?

1586790248
TheLemonMan
ikskuh, speaking of demoparty, have you seen

1586790264
ikskuh
yes

1586790302
ikskuh
i've seen the whole revision live, hanging out in voice chats and chats

1586790371
daurnimator
speaking of party; who is up for a zig release party

1586790593
daurnimator
(in maybe 10 hours-ish?)

1586790600
ikskuh
\o/

1586790609
ikskuh
i'm still in party mood, so why not

1586790702
fengb
🎉

1586790767
daurnimator
I suspect we'll get a bit of press off the release

1586790776
daurnimator
so we can hang out and help the newbies as they file through

1586790851
fengb
Gotta contain my snark

1586790863
ifreund
i just adding building instructions to my project in case anyone gets a link from the release and tries to compile it :D

1586790986
fengb
Ah good point

1586791055
foobles
half-implemented compiler feature im testingworks only on comptime values, so i make an assertion instr_is_comptime()run a behavior test with a comptime blockassertion failed  X)

1586791093
foobles
wow that formatting got messed up

1586791680
ifreund
ah shoot it's gonna be right in the middle of the night for me i think

1586791707
fengb
We need to invent a timezone where everyone is available :P

1586791727
ifreund
maybe i just won't sleep :D

1586792041
TheLemonMan
sleep is overrated

1586793365
nephele
fengb, we already have that, it's called sleep deprivation :DD

1586793417
fengb
Australia, Americas, Europe, pick 2

1586793431
fengb
Of course, here in 'murica, we only pick 1 anyway

1586793460
nephele
Well, then the choice seems clear :) Let's hold a meeting in Atlantis

1586793789
marijnfs
where can i find an example of a struct being used to create a closure?

1586794780
fengb
I cobbled this together but haven't used it anywhere:

1586794837
fengb
Also, all of the functions seem to be poorly named

1586794992
marijnfs
fengb: thanks

1586795191
marijnfs
yeah the return type is a bit confusing, seems it has a hard time inferring such things

1586795196
marijnfs
especially error sets

1586795374
fengb
I haven't tested it well at all >_>

1586795420
fengb


1586798902
andrewrk
happy release day everyone

1586798912
fengb
👋

1586798936
companion_cube
woo

1586798948
ifreund
woot!

1586799110
Xavi92
andrewrk: hey! :)

1586799156
fengb
Should release day be on Thursdays or something? Mondays can kill your weekend >_>

1586799410
r4pr0n
🎉

1586799934
r4pr0n
may i ask why in the release notes, there are only the issues linked to some of the language changes, but not all of them?

1586800065
andrewrk
sloppiness, they are only linked when it was convenient in the commit logs

1586800135
Xavi92
Suffering from

1586800178
Snektron
release time

1586800202
ifreund
the tag is pushed!

1586800568
andrewrk
about 2 hours to finish the tarballs then I'll upload the release notes

1586800581
hryx
Happy release day! Wish I'd had time to do more than lurk this last cycle. Here's to 0.6 and what comes next <3

1586800595
foobles
woo hoo!

1586800604
foobles
i hope i can help for the next one hehe :)

1586800611
andrewrk
thanks hryx :) miss you buddy

1586800645
andrewrk
foobles, it seems like you are learning fast

1586800678
andrewrk
is the CI going to be our friend today? let's find out

1586800688
hryx
same andrewrk - super looking forward to when I return to zigland :)

1586800701
companion_cube
what land are you currently in?

1586800809
hryx
San Francisco

1586800813
hryx
:P

1586800913
ifreund
javascriptland then?

1586801658
hryx
ifreund: startupland

1586802089
r4pr0n
are there any functions besides std.fmt.bufPrint for handling strings in zig yet?

1586802109
r4pr0n
something like strcat, strcpy and so on

1586802132
andrewrk
happy releaster

1586802143
ifreund
r4pr0n: std.mem is what you want

1586802218
r4pr0n
actually i have a question there i wanted to ask for some time

1586802232
r4pr0n
why is in the std lib, e.g. in mem.eql: fn eql(comptime T: type, a: var, b: var) var

1586802235
r4pr0n
var used, instead of T

1586802245
andrewrk
huh, when did that change

1586802255
andrewrk
pub fn eql(comptime T: type, a: []const T, b: []const T) bool

1586802262
andrewrk
I'm not seeing what you're seeing

1586802276
r4pr0n
i got that from the docs

1586802278
r4pr0n


1586802298
andrewrk
docs are experimental and don't handle generics fully yet

1586802330
andrewrk
in this case "var" means the type depends on previous parameters

1586802339
r4pr0n
oh good to know

1586802345
r4pr0n
thank you

1586802366
companion_cube
"zig is a dependently typed, multi-stage impure language"  is how you should pitch to academics, andrewrk

1586802390
andrewrk
companion_cube, nice, that's perfect. I'm terrible at pitching to academics

1586802401
companion_cube
:DDD

1586802403
andrewrk
my usual pitch is, "I'm sorry I don't know what any of those words mean"

1586802407
companion_cube
(well it'd talk to the type theorist crowd)

1586802437
companion_cube
it's funny to see how you converged on a bunch of known things by trimming fat from C

1586802439
companion_cube
I like it

1586802495
r4pr0n
speaking about c, i understand that c uses dst,src for many things, but isn't it kind of counter-intuitive? wouldn't it be

1586802522
companion_cube
or named arguments^W^W a struct

1586802594
andrewrk
either way: src,dst or dst,src is a convention. so is your convention coming from C or from elsewhere? there's not really an objective answer

1586802617
TheLemonMan
assignments use the `dst = src` form

1586802644
andrewrk
the constness helps a bit. as long as your src is const, you can't mess it up

1586802752
r4pr0n
well i guess for me it's coming from human languages: you normally say "copy this into that", not "copy into that from this"

1586802774
companion_cube
copy that

1586803023
fengb
It also matches C and Intel assembly fwiw

1586803044
fengb
Oh you mentioned that. Shows how aware I am

1586803581
alva
In many human languages (e.g. Finnish) you can put the words in either order.

1586803758
r4pr0n
well you can also in english, as I showed, but I (a non-native english speaker) think it's more idiomatic to use the src,dst variant

1586803802
r4pr0n
but the c,intel asm syntax argument is also a good one

1586803805
r4pr0n
so i'm not sure

1586803813
fengb
English almost always does subject-verb-object

1586803837
fengb
So doing verb(object, subject) is a bit backwards

1586803843
fengb
Workaround is using a different verb

1586803868
r4pr0n
well src is the subject in the sentence "copy src into dst"

1586803881
fengb
Right, I'm agreeing with you :P

1586803901
r4pr0n
oh yeah, then it makes sense xD

1586803933
fengb
Hmm, now that I'm looking at it, these aren't subjects. "src" is the object, and "into dst" is a prepositional phrase

1586803953
fengb
Verb object prepositional-phrase is also more natural though so you're still right :P

1586803963
r4pr0n
oh yeah, right

1586803974
andrewrk
zig and english are not very related

1586803998
fengb
Yeah, Zig is actually sane

1586804006
fengb
English is a bastard child of 3 different language families

1586804048
fengb
Also literally because William the ~Bastard~ Conquerer :P

1586804133
r4pr0n
Well for me the argument is kind of about if you focus more on being idiomatic for people coming from C or people new to systems programming

1586804143
r4pr0n
which I'm not really sure about what the answer is

1586804145
alva
Very thankful that Zig is not like English :)

1586804190
andrewrk
I disagree that the order of dest,src parameters in mem.copy ties zig to C in any way

1586804232
foobles
so 0.6.0 is officially released now?

1586804241
andrewrk
nah not until the download page is updated

1586804252
r4pr0n
no that's not really my point, I just think that for people that have experience with C, dst,src will be familiar, but for people new to the topic, src,dst will be easier

1586804259
andrewrk
then it's 🎉 time

1586804687
redj
ci.speed++;-)

1586804851
r4pr0n
Syntax Error, stopping CI Build.

1586804901
redj
(special accepted syntax on release day)

1586804930
Snektron
server ram module got hit by a cosmic ray and crashed

1586804984
r4pr0n
server was running with overcommit enabled, other user allocated 100 petabyte, zig build was killed by oom killer

1586805101
andrewrk
noooo

1586805352
r4pr0n
btw, why did you use the tests for generating the docs and didn't just add a flag to analyze all of it?

1586805982
andrewrk
because it would cause a compilation error

1586805994
andrewrk
whether fd_t is an i32 or HANDLE for example depends on the target

1586806023
andrewrk
it's also possible to have types depend on whether the compilation is a test run or not

1586806044
andrewrk
test runs tend to reference more declarations

1586806051
andrewrk
so more things make it into the docs

1586806068
r4pr0n
ah ok that makes sense

1586806291
companion_cube
could there be a doc page per target?

1586806314
companion_cube
like a scrollbar to pick the target you want (and a sane default)

1586806317
andrewrk
the merge_anal_dumps tool isn't done, but the goal is to have docs that support all targets at once

1586806327
andrewrk
if that idea fails then yes we'll do the "pick the target" thing

1586806335
companion_cube
ah yeah, so you could say "this field is in debug-*-*

1586806340
andrewrk
yeah

1586806356
companion_cube
pretty cool, you could see what's portable and what's… less portable

1586806360
andrewrk
yep

1586806370
andrewrk
it's vaporware tho

1586806433
andrewrk
but hey, so was everything in the 0.6.0 release notes which is now released

1586806453
andrewrk
err sorry I didn't publish it yet. don't party yet

1586807169
foobles
vaporwave D:

1586807244
r4pr0n
> but the goal is to have docs that support all targets at once

1586807248
r4pr0n
and how would this look?

1586807285
r4pr0n
would you have multiple definitions where the target is specified at for multiple fields/functions/structs?

1586807828
r4pr0n
oh the azure ci is done

1586807932
ifreund
time to party?

1586807936
andrewrk
wait for it

1586808186
xackus
spamming F5

1586808290
andrewrk
fun fact: download/index.json is maintained by hand

1586808337
mikdusan
me and trailing commas don't mix well with editing .json

1586808343
andrewrk
same

1586808413
fengb
🤔

1586808483
mikdusan
edge detection? :)

1586808886
r4pr0n
already prepared the message in my weechat message box

1586809174
mikdusan
going... to... need... a table for release binaries soon

1586809226
marijnfs
wow 0.6 is there

1586809236
andrewrk
ok it's party time 🎉 🎉 🎉

1586809237
r4pr0n
yaaaay 🥳

1586809239
nycex
wohoooo 🎉

1586809241
marijnfs
woop woop

1586809244
fengb
🎉

1586809245
Snektron
yeeee

1586809248
Snektron
party

1586809256
Snektron
grats andrew

1586809261
nycex
🕺

1586809262
marijnfs
release notes reading partyy

1586809268
xackus
🎉

1586809284
ifreund
aaay, time to read some release notes

1586809288
mikdusan
__

1586809290
mikdusan
__ {_/

1586809292
mikdusan
\_}\\ _

1586809294
mikdusan


1586809294
marijnfs
can someone make a dancing ziguana

1586809296
mikdusan
(_)_)(_)_

1586809298
mikdusan
(_)(_)_)(_)

1586809299
shakesoda
\o/

1586809300
mikdusan
(_)(_))_)

1586809302
mikdusan
(_(_(_)  |    |

1586809304
mikdusan
(_)_)   |~~~~| |    |

1586809306
mikdusan
(_)    '-..-' |~~~~|

1586809308
mikdusan
||   '-..-'

1586809310
mikdusan


1586809312
mikdusan
`""""`

1586809312
fengb
Wow, double # of contributors, double # of commits since previous release

1586809314
mikdusan
`""""`

1586809318
mikdusan
time for LemonBoy finger guns

1586809337
FireFox317
congrats andrewrk :)

1586809341
ifreund
i think LemonBoy must be sleeping

1586809353
TheLemonMan
no way I'm sleeping

1586809394
ifreund
oh i forgot your nick was different than your github

1586809408
fengb
He's all the lemons

1586809430
xackus
perfect timing, i will have something to read in the bathroom :)

1586809441
mikdusan
it's the "the" that confuses me. tab-completion doesn't help. Lemon<tab><tab><tab>

1586809558
andrewrk
if you're getting bored reading the release notes, as a challenge, try to find sections that

1586809574
mikdusan
good luck with that /s

1586809636
andrewrk
now the question is: are we gonna get into the tech news today

1586809637
fengb
Well akshully, "TheLemonMan" doesn't show up in the document at all

1586809641
TheLemonMan
haha, I aim to be in every section by the time 0.7.0 rolls

1586809674
FireFox317
TheLemonMan is unstoppable

1586809756
FireFox317
The list on

1586809778
andrewrk
:D

1586809796
fengb
Oh boy, all the versions

1586809821
andrewrk
the source tarball is smaller from 0.5.0 -> 0.6.0

1586809833
foobles
wow! cool

1586809840
fengb
Typo: "Format decmial 0.0" => decimal

1586809850
mikdusan
0.5.0 - sizeof(lld) < 0.6.0

1586809864
Snektron
0.6.0 newer than master

1586809868
Snektron
hmm

1586809868
TheLemonMan
"Now, stack traces work even in release builds" -> nah, they now work with PIE binaries (eg. clang-built stage1)

1586809901
TheLemonMan
I didn't have enough time to polish the dwarf unwinder in time for this release :(

1586810062
andrewrk
ah, my bad

1586810077
andrewrk
will update

1586810179
marijnfs
how does comparison between different types work? with a  float < int comparison, the int get converted?

1586810315
mikdusan
marijnfs: allowed for comptime. disallowed for non-comptime.

1586810339
companion_cube
oh, I didn't see `noasync`, awesome

1586810495
fengb
I don't care what the release notes say. Your last name is totally Ikdusan

1586810509
mikdusan
haha

1586810548
r4pr0n
are release builds supposed to have stacktraces? i thought they'd be going in undefined behaviour? or do you just mean for errors returned in main?

1586810631
fengb
Oh wow, self-hosted in next release

1586810651
marijnfs
is the package manager also planned?

1586810726
andrewrk
marijnfs,

1586810821
shakesoda
quick, before everyone's excitement has a chance to fade, #1717!

1586810837
andrewrk
I'm gonna be honest, I haven't even read the release notes

1586810841
fengb
lol

1586810845
andrewrk
it was so much work to write them

1586810857
marijnfs
hah i didn't get there yet thnks

1586810864
shakesoda
i've been linking them to people like "IT HAS A BILLION THINGS"

1586810884
shakesoda
it just keeps going

1586810890
companion_cube
merge_anal_dumps sounds a bit like sewer language…

1586810910
layneson
I am always impressed by Zig's release notes

1586810915
andrewrk
IMO the most interesting part is the language changes

1586810931
andrewrk
btw you can click on the headers to go back to the TOC

1586810939
andrewrk
helps with mobile nav too

1586810973
fengb
Who wants to post to HN?

1586811075
marijnfs
unrelated question, how do I make two packages that I add addPackagePath aware of each other?

1586811094
marijnfs
i'd like to @import("package2") from package1 code

1586811099
companion_cube
who cares about HN when it's on lobsters already? :)

1586811158
fengb
I'm not on lobsters Q_Q

1586811217
ifreund
that's the invite only HN fork right?

1586811236
companion_cube
yep, it's also much smaller and a bit more technical (for now)

1586811397
ifreund
anyone wanna invite me so i can go upvote the zig post? :D

1586811704
Sahnvour
congrats everyone on the release

1586811717
mikdusan
marijnfs: that means when building package1 you need a addPackagePath specifying "package2" location

1586811774
Xavi92
Congrats everyone for the new release!

1586811783
mikdusan
so if root ends up indirectly pulling in both package1,package2, you'll need 2 addPackagePath calls

1586812385
fengb


1586812464
pmwhite
On the download page, the filenames for the master downloads still look like 0.6.0.

1586812470
pmwhite
andrewrk: ^

1586812474
pmwhite
I mean 0.5.0

1586812506
Cadey
hey andrewrk i'm looking at updating the nixpkgs repo for zig 0.6.0, what tests should i run on the compiler after i package it?

1586812622
Cadey
lol, first problem detected: it wants llvm 10 and nixos only has 9

1586812697
Cadey
hmm it does have llvm 10

1586812728
marijnfs
mikdusan: yeah I have two package calls for the packages to the same exe.

1586812764
marijnfs
But it seems package1 can't just @import("package2"). However I can do that in the code for the main code

1586812927
mikdusan
I admit never tried 2 addPackagePath; a few mins I'll try a mockup

1586813004
andrewrk
Cadey, does it want to link against -lclang-cpp ?

1586813020
andrewrk
if so: -DZIG_PREFER_CLANG_CPP_DYLIB=ON

1586813134
Cadey
andrewrk: right now i'm trying to get it to use llvm 10 instead of llvm 9

1586813191
mikdusan
marijnfs: are you able to see the zig command line when it fails? if so, paste the command showing args `--pkg-begin` etc.

1586813208
Cadey
expected LLVM 10.x but found 9.0.1

1586813251
Cadey
here's my nixpkgs diff off of git head for upstream:

1586813271
alva
andrewrk: Where can I find you public PGP key?

1586813461
marijnfs
mikdusan:

1586813473
marijnfs
yeah two of those --pkg-begin

1586813500
mikdusan
alva, github trick:

1586813531
mikdusan
oh pgp. sorry, nevermind

1586813581
Sphax
Congrats on the release, I'm excited to try out the async stuff in my project

1586813615
andrewrk
alva, I'm not sure I've properly uploaded it to a keyserver. I should probably figure that out

1586813640
andrewrk
I agree though, should switch to pgp signatures not sha256sum

1586813670
andrewrk
pmwhite, it'll be fine, next CI run will update it

1586814028
Cadey
andrewrk: i got zig using llvm 10 in nix-build, but now i'm getting a weird error in cmake:

1586814093
andrewrk
Could NOT find lld (missing: LLD_LIBRARIES LLD_INCLUDE_DIRS)

1586814105
andrewrk
looks like a missing buildInput

1586814116
Cadey
oh

1586814122
Cadey
i added lld and it's compiling now

1586814142
Cadey
/nix/store/sq2b0dqlq243mqn4ql5h36xmpplyy20k-binutils-2.31.1/bin/ld: /nix/store/hkb0hmxmgkq27p6akzr1fjsnjma3xii5-clang-10.0.0/lib/libclangCodeGen.a(BackendUtil.cpp.o): in function `(anonymous namespace)::EmitAssemblyHelper::EmitAssemblyWithNewPassManager(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >)':

1586814145
Cadey
(.text._ZN12_GLOBAL__N_118EmitAssemblyHelper30EmitAssemblyWithNewPassManagerEN5clang13BackendActionESt10unique_ptrIN4llvm17raw_pwrite_streamESt14default_deleteIS5_EE+0xc33): undefined reference to `getPollyPluginInfo()'

1586814153
Cadey
i remember reading about that

1586814158
Cadey
looking in the zig tracker

1586814173
andrewrk
this polly lib situation is a disaster

1586814189
andrewrk


1586814266
mikdusan
andrewrk: u happen to recall if std.build has a doc/undocumented way to add nested --pkg-begin/--pkg-end values?

1586814342
mikdusan
ah ok i found #4386

1586814394
mikdusan
marijnfs: ok this currently is the way to do it:

1586814437
Cadey
oh someone has a patch in the bug report thread

1586814440
Cadey
let's try that!

1586814510
mikdusan
marijnfs: basically you're going to need to see `--pkg-begin a a.zig --pkg-begin b b.zig --pkg-end --pkg-end`  and then same thing but inverted if both packages depend on eachother

1586814620
marijnfs
mikdusan: ah I see, so the dependencies part?

1586814625
marijnfs
yeah that's not too bad

1586814650
Cadey
seems to be building

1586814660
marijnfs
thanks

1586814753
Cadey
it built!

1586814776
fengb
Yay!

1586814776
Cadey
andrewrk: how do i run the zig test suite?

1586814866
squeek502_
Cadey, see

1586814873
andrewrk
Cadey,

1586814876
andrewrk
ha :)

1586814878
squeek502_
:)

1586814910
andrewrk
Cadey, you need a source checkout to run the test suite

1586814932
Cadey
yeah i'm assuming nix-build does

1586814932
andrewrk
since there is some rather lengthy test data, it's not shipped

1586814944
Cadey
oh, it's snipped from tagged releases?

1586814971
andrewrk
tagged releases have source, that counts as a source checkout

1586815019
Cadey
cool

1586815146
Cadey
gogo checkPhase

1586816010
euantor
Chocolatey package for 0.6.0 submitted, looks like a good release - thanks! Just awaiting automated checks and moderator approval now:

1586816048
fengb
🎉

1586816180
companion_cube
andrewrk: so is the package manager  for this cycle? would help attract more people I guess

1586816467
squeek502_
companion_cube,

1586816553
companion_cube
yeah, but that's my point: if the compiler is self hosted, the PM is unlocked

1586816638
squeek502_
the compiler is not fully self-hosted yet

1586816651
squeek502_
"The theme of the 0.7.0 release cycle will be stabilizing the language, creating a first draft of the language specification, and self-hosting the compiler."

1586816717
Cadey
/build/source/build/zig test /build/source/test/stage1/behavior.zig --library c --test-name-prefix behavior-x86_64-linux-gnu-Debug-c-multi  --cache-dir /build/source/zig-cache --name test -target x86_64-linux-gnu --override-lib-dir /build/source/lib

1586816725
andrewrk
companion_cube, the package manager is already unlocked, just needs zig code for networking, downloading, untarring, etc

1586816738
Cadey
this fails but it doesn't have a stacktrace because debug info is stripped

1586816749
foobles
can someone help me debug my feature Im trying to add to the compiler? I can explain the greater steps I tried to take. there is some issue with values I know at comptime not being seen as comptime-known

1586816775
foobles
also making ir_analyze_bin_op_cmp recursive :p

1586816777
andrewrk
Cadey, you passed -target x86_64-linux-gnu which means you are cross compiling

1586816785
andrewrk
and you are on nixos, so the standard dynamic linker path is wrong

1586816804
andrewrk
you can choose -target x86_64-linux-musl instead, or don't -lc, or pass -dynamic-linker with the correct path

1586816807
mikdusan
foobles: suggest avoid recursive until one-time is working

1586816834
andrewrk
Cadey, you can find a dynamic linker path with `ldd /usr/bin/env`

1586816843
foobles
the whole feature is making it recursive '=D

1586816848
foobles
im trying to add optional comparison

1586816869
foobles
so if at comptime, both optionals have values, Im trying to recurse

1586816879
foobles
on their values and compare them with each other

1586816881
andrewrk
Cadey, what are you trying to do?

1586816884
mikdusan
foobles: ah yes right

1586816896
foobles
oh yes you are the one who i was talking with last night :)

1586816905
Cadey
andrewrk: run the zig test suite in the nix-build so that i can verify the compiler as part of the build

1586816917
foobles
i got it working (as in, compiling), but it is telling me that the values are not comptime known

1586816947
foobles


1586817124
foobles
yep, it works fine when both values are null and comptime knwon

1586817130
foobles
s/knwon/known

1586817145
foobles
so it must be that the unwrapping, and recurising, makes it no longer comptime

1586817221
andrewrk
Cadey, I recommend to only do this: zig test $src/test/stage1/behavior.zig

1586817228
andrewrk
no reason to run the entire test suite

1586817233
Cadey
fair enough

1586817258
mikdusan
foobles: I have to go afk but will try to look at it in about an hour

1586817263
Cadey
once this passes locally i'm gonna pr nixpkgs

1586817268
foobles
thanks, alright

1586817283
Cadey
thanks again andrewrk!

1586817312
foobles
yeah, i just tested: comparing two comptime null ?i32s, or a comptime null ?i32 and a non-null, works

1586817318
foobles
its only when it recurses

1586817351
foobles
so it must be that the ir_build_optional_unwrap_ptr_gen is not creating a comptime Instr

1586817405
Cadey
All 916 tests passed.

1586817500
andrewrk
thanks Cadey :)

1586817510
Cadey
no problem

1586817515
Cadey
now i'm just making the pull request

1586817725
Cadey


1586817936
andrewrk
thanks euantor :)

1586818159
ifreund
hmm, why is this an error?

1586818181
ifreund
isn't comptime_int an integer type?

1586818688
andrewrk
it should say "must be a fixed-width integer type"

1586818818
ifreund
hmm, is fixing that as simple as grepping for the error message in the code base and tweaking it?

1586819082
foobles
ifreund yep

1586819084
foobles
i found it

1586819093
foobles
line 17029 of ir.cpp

1586819313
ifreund
foobles: if you'd like to do the honors it's all yours

1586819626
foobles
im on it

1586819894
Snektron
What does ${VAR^} do? It yields a bad substitution error

1586819904
Snektron
(line 13 of the zig-boostrap build script)

1586819917
andrewrk
Snektron, does the "example" in the comment help?

1586819970
Snektron
Well yes, but that doesn't explain the error

1586820015
Snektron
Oh, i think my /bin/sh is set up wrong

1586820031
andrewrk
what happened is I thought that was something POSIX shell supports, but apparently it's a bashism

1586820109
Snektron
I think there are tools that statically check shell scripts

1586820147
mikdusan
>> 2020-04-06 21:46:51 mikdusan `${TARGET_OS_LOWER^}` is that posix?

1586820149
Snektron
maybe those could be of help?

1586820152
Snektron
Although the script isn't particularly lng

1586820154
Snektron
long

1586820185
mikdusan
just fyi *bsd  and iirc alpine doesn't like the `^`

1586820227
Snektron
I think alpine also uses dash (which was my default)

1586820252
fengb
It’s also a Bash 4ism because it’s failing on mac’s v3 :P

1586820254
ifreund
alpine uses the busybox thing (ash i think)

1586820278
mikdusan
I suppose the old `| tr '[A-Z]' '[a-z]'` workaround can work. tr is around everywhere?

1586820303
ifreund
for shell script linting,

1586820369
ifreund
there's also a checkbashisms script in the arch repos

1586820560
andrewrk
my mistake was thinking that `sh` was posix shell

1586820574
andrewrk
it's deceitful because it changes the prompt to sh-4.4$

1586820581
andrewrk
but apparently it's still bash

1586820633
andrewrk
it's tricky right? because you can avoid bash but now depend on `tr`

1586820647
andrewrk
it's a unique challenge, "minimal system dependencies"

1586820679
andrewrk
"no branching logic" isn't a hard rule; it's just a flex. can be abandoned in favor of fewer system dependencies

1586820730
ifreund
i think alpine is probably a good test, busybox is strictly posic compliant

1586820785
fengb
We should write ziggybox

1586820820
waleee-cl
weren't there some students that were using zig in a project course just for that purpose?

1586820824
andrewrk
if I did ziggybox I would do it without the goal of compatibility with existing interfaces

1586820867
ifreund
if you use gnu coreutils you can run into the stuff like the `-i` option for sed only existing in the gnu version

1586820929
ifreund
some people already started a rustybox:

1586820981
fengb
Of course they did :P

1586821020
pmwhite
Is the point of writing a *box just enjoyment? There's no benefit except perhaps code quality due to a better language, right?

1586821070
afontain_
well, you may be using a better language, but your solution is less tested

1586821092
afontain_
I think enjoyment is a valuable goal, that's how you learn after all.

1586821231
ifreund
i mean the original busybox is great for embedded stuff due to the much smaller binary size since the various tools can share code

1586821357
r4pr0n
is it possible to disable caching for zig cc?

1586821398
daurnimator
pmwhite: its the dream of a no-$OTHERLANG-required OS

1586821407
daurnimator
also, morning everybody :)

1586821413
daurnimator
I see the release occured!

1586821439
fengb
Hi good morning!

1586821448
r4pr0n
good morning, i guess, it's 01:45 at night for me :P

1586821456
ifreund
hah same r4pr0n

1586821539
r4pr0n
has anyone tried to use zig cc with cgo yet?

1586821570
afontain_
daurnimator: a no-C-required OS feel quite hard :P

1586821583
daurnimator
afontain_: why?

1586821608
ifreund
afontain_: redox has gotten pretty far without c

1586821637
afontain_
well, depends if you want it to be daily-driver grade, of course

1586821665
afontain_
also depends if you count programs in that goal or not

1586821688
daurnimator
afontain_: you can write a kernel in zig; and then if you had a ziggybox you'd have a basic POSIX OS: on top of which you can have many normal apps

1586821713
pixelherodev
`<andrewrk> it's deceitful because it changes the prompt to sh-4.4$` GAH I know it's so annoying

1586821718
daurnimator
afontain_: kernel and core-utils is enough to claim it IMO.

1586821763
afontain_
ok, then it's more reasonable

1586821791
andrewrk
ziggybox would solve

1586821800
afontain_
I don't think I'd want to go without linux though

1586821805
fengb
Only if everyone has ziggybox installed

1586821824
daurnimator
re: the posix shell thing: if you used a switch/case then we could skip the need for echo/cut/tr

1586821835
andrewrk
fengb, nope, we don't need to use it until after we've built it :)

1586821857
andrewrk
switch/case would be my pref

1586821912
andrewrk
r4pr0n,

1586821944
terinjokes
congrats on 0.6 :)

1586821967
andrewrk
thanks for your contribution!

1586821989
r4pr0n
well the problem with zig cc is, that cgo for some reason moves the arguments in the CC variable away from the $0, so zig cc doesn't really work

1586822002
andrewrk
r4pr0n, did you check that link

1586822046
terinjokes
hopefully the first of many

1586822069
r4pr0n
oh i'm sorry i only read the comment you linked to, not your answer, found the solution

1586822172
r4pr0n
but i already tried that

1586822178
r4pr0n
and got `unable to check cache when compiling C object: access denied`

1586822203
andrewrk
you can affect the cache directory with XDG_CACHE_HOME

1586822275
r4pr0n
that does work, it also creates it, but i still get that error

1586822311
daurnimator
lol `enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang`

