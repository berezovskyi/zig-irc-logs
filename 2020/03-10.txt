1583814191
adamkowalski
can I use a inline for to generate the branches of a switch statement?

1583814644
adamkowalski
in the D language it looks like this

1583814648
adamkowalski
specifically example 4

1583816168
daurnimator
adamkowalski: you'd just do an `if`.

1583817113
adamkowalski
how do you mean?

1583817142
adamkowalski
wouldn't there be a huge performance penalty for checking each branch with an if versus a switch?

1583817197
adamkowalski
and having the switch ensures that you've covered all the cases of the union

1583818250
daurnimator
wouldn't your `inline for` already do that?

1583829667
Snektron
adamkowalski, im pretty sure llvm can optimize if else chains

1583832077
pixelherodev
^

1583832093
pixelherodev


1583832121
pixelherodev
IMO the programmer should

1583832147
mq32
pixelherodev: i don't think that's true

1583832161
pixelherodev
At least until the thing

1583832189
pixelherodev
That is, programmers shouldn't ever think, "well, the compiler's bad at doing X so I'm going to change the code to Y"

1583832212
pixelherodev
Optimizing is, whether you like it or not (I honestly don't know how I feel but I'm leaning towards don't), the job of the compiler these days

1583832243
pixelherodev
and programmers tend to be really bad at it (myself included) unless they have actual numbers in front of them

1583832256
mq32
pixelherodev, the compiler can only improve code generation, but is not possible to improve algorithmic complexity

1583832261
mq32
and that's where the real optimizations are

1583832268
mq32
like

1583832268
pixelherodev
Hence, once the code works, use profiling tools

1583832273
pixelherodev
But not

1583832304
pixelherodev
Because all too often you'll find you actually made performance worse because of e.g. misjudging what's bottlenecking the code or overestimating the performance impact of a function etc

1583832304
mq32
for(int y = 0; y < height; y++) for(int x = 0; x < width; x++) { int offset = width * y + x; … }

1583832308
mq32
vs

1583832319
mq32
int offset = 0; for(int y = 0; y < height; y++) for(int x = 0; x < width; x++, offset++) { … }

1583832327
mq32
small change, HUGE difference in performance

1583832389
pixelherodev
Anyways, it's ... 5:30 AM but I have the day off today so I'm gonna crash now. Laters!

1583832429
mq32
haha, sleep well

1583838114
forgot-password
Is it possible to allocate bytes with a certain alignment?

1583838435
mq32
sure

1583838445
forgot-password
`try allocator.alloc(u8 align(8), n)` produces a syntax error

1583838457
mq32


1583838458
forgot-password
But that syntax is used to specify the type of a variable in the documentation

1583838465
forgot-password
Ahh

1583838477
forgot-password
I really need to start using the new documentation, thank you :)

1583844450
mq32
sometimes MMIO-Code is crazy

1583844455
mq32
SCB.CFSR = SCB.CFSR;

1583845867
shakesoda
mq32: i definitely have some loops i can refactor to move offset out like that, heh

1583845951
shakesoda
not sure if any of them are

1583846015
shakesoda
pixelherodev: optimization is absolutely your business as a programmer, compilers aren't and cannot be magic.

1583846221
shakesoda
one should certainly use profilers (and otherwise benchmarking) to guide this process, though, you're blind to anything you don't actually measure.

1583846809
mq32
shakesoda: if you are on embedded, it can make a real difference

1583846817
mq32
i get like 20-50% perf boost out of my inner loops

1583846857
shakesoda
mq32: I'm not on embedded, but I certainly have loops like this that have significant load

1583846875
mq32
yeah, on PC it can also make a differnce, but not as hard as on embedded

1583846898
mq32
but the loops are a nice example why compiler optimization is something you have to keep in mind, but also not too much, because your compiler can't do magic

1583846910
shakesoda
suppose it's probably extra helpful knowledge for my projects that run on the rpi zero

1583846925
shakesoda
the weakest machine i target by a lot

1583846928
mq32
yep, true

1583846956
shakesoda
\o/

1583846968
BaroqueLarouche
Neat!

1583846976
mq32
but i wonder, it looks like it has some memory corruption :(

1583846988
mq32
even though stack pointer stays the same

1583847679
mq32
okay, i got my memory corruption fixed :)

1583850748
alexnask
:D

1583850774
mq32
now fuck everything up with switching tasks in a timer interrupt

1583850790
shakesoda
classic

1583850832
shakesoda
mq32: what are you making?

1583850854
shakesoda
multitasking on a cortex m3 is an unusual need, i am curious

1583851363
mq32
we have a kind of "operating system" in our company, but only single threaded

1583851386
mq32
and a graphics driver that is written so that no operation takes longer than 10ms or it is executed in chunks

1583851394
mq32
this makes the code a horrible mess and unmaintainable

1583851403
mq32
and my idea was to make a semi-cooperative graphics driver

1583851411
mq32
where you can tell the system:

1583851419
mq32
"please run the graphics driver for up to 8 ms"

1583852046
shakesoda
makes sense

1583852060
shakesoda
sounds quite interesting

1583852095
mq32
yeah, it's fun

1583852119
mq32
i asked if i could improve the stuff because i needed to get my head free from the huge piece of stuff i've written in the last two years

1583855281
fengb
You adding Zig into the toolchain? :P

1583855347
mq32
fengb: no, only C++

1583855361
mq32
i'd love to, but i'm also reasonable and will wait for that until 1.0 ;)

1583855402
fengb
Hey you gotta introduce new tech

1583855406
fengb
Then leave the company 2 months later

1583855416
fengb
'ts the cool thing to do

1583855435
mq32
already doing this :D

1583855442
mq32
well, introducing new tech

1583855444
mq32
like "c++11"

1583855908
BaroqueLarouche
THE FUTURE (with added echo)

1583855962
mq32
yep :D

1583855972
mq32
btw, nice find @ HSLuv!

1583856001
BaroqueLarouche
yup, found that on Hacker News

1583861284
TheLemonMan
andrewrk, is the event/loop stuff tested on osx?

1583861344
andrewrk
TheLemonMan, no

1583861362
andrewrk
I only have the behavioral tests passing with --test-evented-io on linux currently

1583861388
andrewrk
the event loop implementation supports kqueue/osx from back when I implemented it, but it needs the glue of waitUntilFdReadable/waitUntilFdWritable

1583861404
andrewrk
same situation for windows io completion ports

1583861449
andrewrk
that's what's blocking from adding CI testing for evented stuff, is to get std lib tests passing in evented mode on all OS's, and without any flakiness

1583861560
TheLemonMan
hmm, NetBSD and OpenBSD kqueue() does not support EVFILT_USER, I was looking to add an alternative pipe-based way to talk forth and back between threads

1583861588
andrewrk
sounds reasonable

1583861638
TheLemonMan
but I'll wait till OSX (and FreeBSD) event loop is working

1583861638
andrewrk
personally I would prioritize linux/windows/darwin/freebsd before netbsd and openbsd

1583861670
andrewrk
in theory the core works, just needs integration with e.g. std.os.read

1583861701
andrewrk
and probably some fuzz testing

1583862707
andrewrk
ugh, no gas in my building for 2 days now, can't make tea @_@

1583862732
fengb
Get an electric kettle

1583862752
andrewrk
I'll just suffer

1583862958
shakesoda
electric kettles are a wonderful thing to have

1583865974
gunnarahlberg
hi! I've been using IntelliJ for far to many years to even try to get as proficient  in Vim

1583865993
gunnarahlberg
I've looked at

1583866062
gunnarahlberg
question - will it be feasible to re-implement the

1583866107
gunnarahlberg
A don't want to implement a whole lot of stuff, and then realize that the upcoming compiler improvements or langserver integration was the design choice I should have chosen

1583866127
gunnarahlberg
I don't want to implement a whole lot of stuff, and then realize that the upcoming compiler improvements or langserver integration was the design choice I should have chosen

1583866140
gunnarahlberg
any thoughts on this?

1583866213
gunnarahlberg
something like

1583866219
gunnarahlberg
but for ziglang of course :)

1583866358
TheLemonMan
given enough time everything is feasible heh

1583866606
gunnarahlberg
yea, that is curse and blessing of programming :)

1583868522
pmwhite
what is the current state of using C++ from zig?

1583868572
BaroqueLarouche
you need a extern "C" interface that you can import with @cImport

1583868829
andrewrk
pmwhite, it's not planned to ever support the C++ (lack of) ABI

1583868843
pmwhite
so if the library I'm calling uses vectors and stuff, then I'm in for a lot of pain I guess.

1583868861
andrewrk
only if the vectors are part of the API surface

1583868882
andrewrk
a C API can wrap an arbitrarily complicated implementation

1583869124
pmwhite
Good decision to not support C++. Would it not be true that anything I can wrap in C I can also wrap with Zig? Seems like you are saying not this.

1583869193
fengb
C++ can wrap it into a C ABI compatible layer with extern “C”. Zig only talks to C

1583869239
fengb
In a way, Zig compiler embeds Clang so it sorta compiles C++ but not in a way that the actual language understands

1583869249
andrewrk
heh, coincidentally I am listening to We Are Never Ever Getting Back Together by Taylor Swift with the lyrics "You go talk to your friends, talk to my friends, talk to me"

1583869278
pmwhite
So I would need to create a C library, compile it with a compiler that supports the C++ ABI, at which point I can link to the C library from Zig.

1583869303
BaroqueLarouche
Zig build system can build C++ files

1583869320
andrewrk
🎵  zig is never ever ever getting C++ API support / 🎵  you go make your C++ talk to C, C code talk to Zig 🎵

1583869338
BaroqueLarouche
hahahaha

1583869406
andrewrk
pmwhite, yes that's right. zig can build all those files, but actual .zig code can only speak to .c/.h code

1583869531
pmwhite
Zig code cannot speak to any .c code that speaks to .cpp code because the .c code is converted to zig code prior to compilation, correct?

1583869550
BaroqueLarouche
only the header needs to be pure C

1583869551
andrewrk
.c code can't speak to .cpp code either

1583869561
shakesoda
friend of mine some years ago managed to get luajit ffi to talk to c++ reasonably well by manually reimplementing name mangling and doing some mangical stuff

1583869563
shakesoda
it was horrifying.

1583869634
shakesoda
it is so, so much more sane to stick to writing a wrapper if needed

1583869641
andrewrk
pmwhite, you have your implementation in a .cpp file, and then instead of .hpp make a .h header. Zig can use that

1583869659
andrewrk
you can see some examples of this in the zig source repo

1583869665
andrewrk
zig_clang.cpp / zig_clang.h

1583869674
BaroqueLarouche
once Zig is closer to 1.0, someone should write a Zig backend in SWIG

1583869684
BaroqueLarouche
s/in/for

1583872185
tdeo
why does SegmentedList both have an .at() and an .uncheckedAt(), only differing by an assert? wouldn't it be better to always assert, as it gets compiled out without safety on?

1583872342
andrewrk
perf in safety on builds matters too

1583872668
tdeo
ah, ok. it seems like it's the only container with that, but that might be because you can't just reach into the struct and index like you can some of the others

1583880587
Snektron
<pmwhite "so if the library I'm calling us"> Technically you could mimic c++ struct layout with packed structs

1583880606
Snektron
Well, for a specific compiler that is

1583880621
Snektron
And a specific version of that compiler

1583880761
Snektron
Its not very good for your mental health though, so i wouldnt recommend it

1583880989
andrewrk
wow, 2 days work came out to: +2,241 −2,240

1583881411
andrewrk
oh, beautiful, this actuall makes std lib tests with --test-evented-io compile

