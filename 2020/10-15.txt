1602720358
wilsonk
g-w1: I think Andrew said he will use the 80/20 rule to get the %80 low hanging optimization fruit for the stage2 backend and leave the difficult %20 to LLVM (if someone wants/needs that level of opt). So it will have SOME optimizations but not the hardest to implement

1602720459
g-w1
That makes sense.

1602720503
wilsonk
once the parallelization of stage2 is complete, I believe the non-LLVM backend will smoke the LLVM backend (even with -O)...won't even be close. Plus incremental, in-place, hot code swapping...! :)

1602720741
g-w1
do you also think the generated code will be better?

1602720792
pixelherodev
For debug builds, I think so

1602720799
pixelherodev
For runtime builds, no, and that's a good thing.

1602720811
wilsonk
yeah, pixel is correct I believe

1602720813
pixelherodev
s/runtime/release

1602720887
g-w1
why is it a good thing

1602720991
ifreund
the argument is that llvm's rampant complexity and high compile times are not worth the 20% speed or whatever it turns out to be

1602721003
ifreund
it's also a very heavy dependency

1602721253
g-w1
yeah

1602721279
g-w1
but to compile the stage1 compiler you will need llvm.

1602721726
wilsonk
yes, but once the stage2 compilers C backend is complete then you can bootstrap itself once and you won't need the LLVM backend afterwards  (it is sort of a circular dependancy to start...rust was similar with its original need for OCaml...little different though)

1602721755
ifreund
rust bootstrapping is a mess currently :(

1602721869
wilsonk
yeah, it is a pain sometimes (I haven't worked on it in a while but I was there back in the OCaml days ;) )

1602721917
wilsonk
pushed some code before Patrick even started on the project...that was a long time ago!

1602721972
g-w1
that makes sense. is that the only reason for a c backend? Its pretty cool

1602722088
wilsonk
not the only reason...CBE can be useful for targeting really exotic architectures that zig doesn't have a code generator for. So you can produce the C code and then use gcc (or a specialized compiler for just that arch) to build the exe

1602722733
pixelherodev
One example is the z80, for instnace

1602722747
pixelherodev
I doubt Zig will be as good as SDCC for the z80 any time soon

1602722754
pixelherodev
But CBE means we don't have to be

1602723472
andrewrk
hmm we could be providing a zip for windows developers to make a debug build of zig + release build of LLVM

1602723615
ryuukk_
i installed zig on arch linux, but for some reason it can't find log in std ./src/main.zig:17:8: error: container 'std' has no member called 'log', zig version is 0.6.0, does anyone have an idea

1602723632
g-w1
try master

1602723644
andrewrk
0.6.0 std doesn't have log, the error is correct

1602723651
ryuukk_
oh ok

1602723744
andrewrk
I think I finally fixed the macos CI

1602723751
wilsonk
ugh...trying to build llvm11 on a macos VM with 64 cores but forgot to increase the RAM up to >64GB!  SWAPPING hell!

1602723931
wilsonk
well, maybe I could get away with about 40GB from my old notes, but whatever...

1602723953
andrewrk
the trick is to limit the number of simultaneous link jobs

1602723958
wilsonk
I only assigned 8GB so it is taking a while to shut down

1602723987
wilsonk
yeah, I could do that but I have plenty of RAM so I will just assign more on reboot

1602724059
wilsonk
there we go, now all the cores are maxing out at %100

1602724500
ryuukk_
it works with latest version, thanks

1602724863
Snektron
packed struct?

1602724877
Snektron
oh whoops, i was scrolled way up, that was for ifreud

1602726041
ryuukk_
that's pretty nice my code works on both windows and linux, i had 0 changes to make

1602726387
andrewrk
living the dream

1602741946
daurnimator
dang; why am I finding it so hard to finish 5852

1602742025
jabb
i'll help

1602742026
jabb
5853

1602744922
wilsonk
that was a left jabb, if I ever saw one...duck next time darnimator  :)

1602744990
jabb
is the current method for dynamic dispatch @fieldParentPtr?

1602745044
jabb
(reading std.io.reader)

1602745953
jabb
would this strategy work for storing pointers to these types? it appears this method is only for static dispatch?

1602746964
torque
see also

1602747679
jabb
or perhaps the ol' C way?

1602756065
KoljaKube
Is there a nice way to `bufPrint` sentineled strings?

1602756149
ifreund
KoljaKube: we could probably use a bufPrint0, but it's pretty easy to do yourself

1602756196
ifreund
just pass a slice of one less than the total buffer to bufPrint and then set the byte past the end of the returned slice to 0

1602756209
KoljaKube
Currently I increment len and set [len-1] to 0 inside an init block

1602756212
ifreund
and then @ptrCast() to a null terminated thing

1602756247
ifreund
make sure incrementing length doesn't put you out of bounds

1602756279
KoljaKube
Sure, I'm working with known inputs and oversized buffers atm

1602756291
ifreund
and len for sentinel terminated slices/arrays doesn't include the sentinel btw

1602756322
KoljaKube
But since there is an ArrayListSentineled I had hoped for someting nicer

1602756346
KoljaKube
Mh, I guess I should change the type away from []const u8 then

1602756456
ifreund
I can send a PR for bufPrint0 in a minute if you like :P

1602756715
ifreund
KoljaKube:

1602759723
Piraty
jjsullivan: any progress?

1602760112
KoljaKube
ifreund: Subscribed ;-)

1602762777
g-w1
did old zig have struct A {b: u32} syntax?

1602762836
g-w1
I am taking a look at the old emit-h c++ code to try to impliment it and I am seeing stuff like this                     buf_appendf(out_buf, "enum %s {\n", buf_ptr(type_h_name(type_entry)));

1602762998
ifreund
I think structs have always been anon

1602763024
ifreund
enums let you set a tag type with `const Foo = enum(u42) { ... }`

1602763041
g-w1
ohhhhhhhhhhhhh

1602763055
g-w1
the c emitted code is `enum A {b}`

1602763065
g-w1
thats y it looks like that

1602763066
ifreund
not familiar with ancient zig though, I showed up in the 0.5.0 release cycle

1602763081
ifreund
heh, yeah emitting C code not zig

1602763082
g-w1
im looking at 0.6.0 for reference on the emit-h

1602763665
ikskuh
daurnimator: didn't know you're the maintainer of community/zig

1602763813
daurnimator
ikskuh: tada

1602763913
ifreund
what is community/zig?

1602764006
ikskuh
the arch package

1602764178
ifreund
ah yes

1602764351
daurnimator
FYI the llvm 11 package is currently blocked on the zig 0.7.0 release

1602764380
g-w1
so 2 more weeks till llvm11 on arch?

1602764411
daurnimator
as long as zig is released ;)

1602764416
g-w1
ok

1602764458
ifreund
zig release is planned for the 26th iirc

1602764593
ikskuh
:O

1602764596
ikskuh
11 days to go

1602764991
g-w1
does anyone know what the equavalent type for CodeGen was in the c++ compiler

1602765219
FireFox317
g-w1, wdym?

1602765257
g-w1
in the self hosted compiler

1602765266
g-w1
is there an equavalent type to CodeGen

1602765361
g-w1
im trying to impliment gen_h in selfhosted

1602765375
g-w1
and using the c++ implimentation as reference

1602765668
ifreund
g-w1: Compilation

1602765692
g-w1
ok

1602765737
ifreund
though be aware that stage1 in general doesn't show the ideal way to do things, the idea is to learn from its shortcommings as we develop stage2

1602765747
g-w1
ok

1602765757
g-w1
that makes sense

1602765785
ifreund
stage2's architecture is already significantly different

1602765962
g-w1
its pretty cool that its a compiler, assembler and linker

1602766861
ikskuh
the lwn article is available to the public:

1602767758
kristoff_it1
it would be a great shame if multiple people were to submit the article link to HN

1602767776
g-w1
I am a little stuck reading the Compilation.zig. would I want to use zir for emit-h, or an ast. CodeGen in stage1 just had CogeGen.fn_defs. is there something simmilar?

1602767909
ifreund
maybe Module is what you really want

1602767924
ifreund
it tracks the Decls, which include functions

1602767930
g-w1
oh. yeah

1602767933
g-w1
that makes sense

1602767937
g-w1
thanks

1602767991
ifreund
(the function info would be in Decl.typed_value)

1602768000
g-w1
ok thanks

1602769592
pixelherodev
g-w1: gen-h isn't going to be the same in stage2

1602769595
pixelherodev
I'm working on it as part of the CBE

1602769601
pixelherodev
(C backend)

1602769611
pixelherodev
Basically, we already have a backend that takes ZIR and produces C89

1602769617
pixelherodev
So I'm tweaking it to support header generation too

1602769629
pixelherodev
gen-h will basically be "only generate the header, not a .c file"

1602769817
pixelherodev
...huh. That's new.

1602769836
pixelherodev
`./zig build test-stage2` results in a segfault. I checked the produced builder and it's segfaulting in _start ??

1602770020
ifreund
pixelherodev: it worked for me using my zig built from some point before llvm10 was merged and with master checked out

1602770031
pixelherodev
ifreund: I just downloaded the new static zig, now I'm good :P

1602770036
ifreund
nice

1602770047
pixelherodev
Ugh, I'll be better once stage2 is done though :P

1602770052
pixelherodev
stage1 is hella slow

1602770058
ifreund
same

1602770077
pixelherodev
Like, i'm just trying to make a single header with an automated tool, why can't you even beat me doing it manually? :P

1602770079
ifreund
I've been writing a lot of code without compiling anything recently though

1602770082
pixelherodev
SLight exaggeration, but still :P

1602770082
ifreund
so it's not too bad

1602770086
pixelherodev
That's what I've started doing too

1602770091
pixelherodev
Building less often

1602770126
ifreund
oh in my case it's hundreds (thousands?) of lines that I literally haven't tested

1602770145
ifreund
I'm making nice bindings for wlroots and all the other c libraries I use

1602770179
ifreund
which will also allow me to switch to a musl based system

1602770212
ifreund
since translate-c can't handle C bitfields yet, and musl uses one someplace glibc doesn't

1602771239
pixelherodev
g-w1: if you want to look at the CBE, it's in codegen/c.zig

1602771245
g-w1
yeah

1602771252
pixelherodev
I'm hoping to get emit_h working for stage2 today

1602771254
g-w1
i saw it was doing some of the same stuff

1602771267
pixelherodev
Should be pretty straightforward

1602771287
pixelherodev
I'll probably just store the current config in link/C.zig as `emit_h: bool, emit_c: bool`

1602771391
pixelherodev
Could be something like "if both are on, generate a C file and a .h file, with the headers needed by the .c in the .h. Otherwise, if emit_c is on, generate a C file with headers stored at the top of the file [this is current behavior]. Otherwise, if emit_h is on, generate a header file with headers for all exported functions. If both are off, fail"

1602771396
g-w1
e

1602771400
g-w1
sry

1602771445
pixelherodev
Does that logic make sense?

1602771470
g-w1
i think emit-c should auto turn emit-h on

1602771479
pixelherodev
The key difference is that if emit_c is on, then even with emit_h on, the header only contains functions / decls needed by the .c file

1602771487
g-w1
yeah

1602771492
pixelherodev
It makes sense not to want that

1602771493
g-w1
maybe call it something different

1602771499
g-w1
for zig/cbe

1602771500
pixelherodev
Currently, the header is generated at the top of the .c file

1602771525
pixelherodev
Actually, a better idea is to make it an enum for the active mode

1602771529
pixelherodev
C, Header, or None

1602771533
g-w1
yeah

1602771538
pixelherodev
There shouldn't be an option to generate a separate header from a c file

1602771565
pixelherodev
The point of the CBE is machine code (in C89 form), not human code, so it shouldn't be trying to make it easier to read (though it obviously shouldn't go out of its way to make it harder either)

1602771675
pixelherodev
A lot of the code is reusable, which is nice

1602771741
g-w1
if i want to help with stage2 what should i do. i just started working on the emit-h but you are working on it :P is there anything that needs someone to work on that no one is doing

1602771766
pixelherodev
astgen, maybe?

1602771772
pixelherodev
Basically, AST->ZIR conversion

1602771782
g-w1
is that not complete?

1602771783
pixelherodev
That's one of the major focuses, because it contributes to

1602771785
pixelherodev
Nope

1602771788
g-w1
ok

1602771792
pixelherodev
You could also just try to get tests passing

1602771838
pixelherodev
That's what I was doing initially, but now I'm focusing on the CBE

1602771877
ifreund
wasm codegen could use a lot of love as well

1602771885
g-w1
cool

1602771896
g-w1
i just dont want to overlap with anyone else

1602771907
ifreund
right  now it's totally separate from the normal codegen but that should be fixed

1602771954
ifreund
I'm the only one who's done stage2 wasm work so far and im currently occupied with other things so if you wanted to work on that there wouldn't be any conflicts

1602771998
ifreund
you could also work on improving riscv support or add a new target or something

1602772003
g-w1
ok. ill take a look at astgen. i dont know much about wasm or stack machines in general.

1602772024
ifreund
go for it!

1602772027
g-w1
i do have a powerpc mac sitting around so i could try to do stuff with that :)

1602772065
ifreund
ppc would be neat :)

1602772094
ifreund
vexu has at least one open PR doing astgen stuff you should probably be aware of

1602772230
g-w1
ok

1602772346
pixelherodev
I'd base any astgen work off of that PR, yeah

1602773965
pixelherodev
Hm, a better idea is probably to not have emit-h go through the linking stage :P

1602773979
pixelherodev
Makes more sense to have a separate part of the codebase which calls into the CBE for header generation instead

1602774109
g-w1
yeah. I was thinking that std.c should have a function to translate zig types into c types so that it could be used by CBE. what do you think about that

1602774191
g-w1
it could also be used by emit-h

1602774239
pixelherodev
emit-j

1602774244
pixelherodev
Which already has such functionality

1602774254
g-w1
oh.

1602774257
pixelherodev
This doesn't belong in std.c; this is part of the compiler, not the standard library

1602774259
pixelherodev
emit-h*

1602774280
g-w1
yeah. didn't you just say that you wanted to put emit-h in a seperate part of the codebase?

1602774281
pixelherodev
g-w1: see renderType in codegen/c.zig

1602774284
pixelherodev
No

1602774292
pixelherodev
I meant the caller

1602774299
pixelherodev
link/C.zig currently calls the CBE for source files

1602774318
pixelherodev
I was thinking of adding the header part to Module or something

1602774334
g-w1
oh

1602774346
pixelherodev
The CBE gets called into by a separate piece which tells it where to render results

1602774362
pixelherodev
The idea is to also have whatever calls it determine "source vs header"

1602774380
g-w1
ok

1602774402
pixelherodev
So it'd mean e.g. `header = std.ArrayList(u8).init(); cbe(.{ .out = header.writer(), .mode = .header});`

1602774428
g-w1
ok

1602775767
g-w1
when I do zig build --verbose-ir or zig run --verbose-ir nothing happens. how do i get the output of the --verbose flags?

1602781430
pixelherodev
g-w1: I'm fairly certain they go to either stdout or stderr

1602781910
g-w1
does it work for you?

1602781991
g-w1
now it works. lol

1602788516
dutchie
hrm

1602788545
dutchie
why does my program segfault whenever i run in unsafe modes but run fine in safe modes

1602788727
dutchie
it's in std.rand.Xoroshiro128.fill

1602789050
pixelherodev
Might be a bug

1602789133
FireFox317_
dutchie, probably you are taking the address of a stack variable. Which is not clear when you are using the Random interface

1602789248
dutchie
yeah, i guess

1602789270
pixelherodev
but safe mode should fail too...

1602789286
pixelherodev
Unless the safety checks are ironically enough adjusting the stack in such a way that it doesn't

1602789296
dutchie
i did think that, also that my stack variable should live longer than the call into another function?

1602789308
dutchie
i can't reproduce it with a smaller example

1602789367
dutchie
i'll try rebuilding with master, i guess

1602789396
FireFox317_
dutchie,

1602789464
dutchie
ah, that's done the trick

1602789465
dutchie
ty

1602789493
ifreund
yeah, that's a bit of a footgun currently :(

1602789562
ifreund
I'd almost be in favor of requring a @copy() builtin library function or something to copy structs

1602789573
ifreund
stop copying them with a plain =

1602789669
dutchie
i haven't quite internalised how the polymorphism with stuff like Reader, Writer & Random work yet

1602789701
dutchie
maybe if i had a better sense of "it creates a struct with pointers into the real impl" i wouldn't have fallen for this

1602789716
ifreund
Reader and Writer work based on comptime duck typing

1602789730
jabb
reader and writer i think are only for static dispatching?

1602789746
ifreund
Random makes a struct with the interface contained within a larger struct

1602789762
ifreund
yeah reader and writer are static disptach only

1602789773
jabb
for dynamic dispatch...

1602789795
ifreund
yes, the @fieldParentPtr() approach is dynamic dispatch

1602789795
jabb
i'm tempted to just use C's method of a *c_void context that i cast

1602789813
jabb
ifreund: is there an example of this?

1602789846
ifreund
the allocator interface would be a good one

1602789851
jabb
cool

1602789888
ifreund
see e.g. the first line of ArenaAllocator.alloc()

1602791085
g-w1
i just made a pdf of most files in zig (not including arcetecture specific codegen and linking) to read on my kindle

1602791172
jabb
ifreund: basically this:

1602791191
jabb
only thing is the unfortunate unbound call "animal.speak(animal)"

1602791632
ifreund
jabb: yeah that's exactly the std.Allocator pattern

1602791643
ifreund
here's another used in stage2:

1602791689
ifreund
you could also use a tagged union similarly, but this saves memory if the variants aren't all the same size

1602791746
jabb
ahh, so this keeps the bounded call at the expense of being non-extendable

1602791768
ifreund
indeed

1602791775
jabb
i honestly really like this

1602791784
ifreund
you can also wrap the orignal example to get your bounded call back

1602791786
jabb
from first impressions

1602791824
jabb
wrap it?

1602791831
jabb
there would still be an unbounded call right?

1602791854
ifreund


1602791860
donniewest
Are there any decent resources for getting into zig yet? I've been considering picking up something lower level than Java/Javascript/Kotlin that are my usual go-to. I've been tempted by both Rust and C but zig looks like the best of all worlds

1602791865
ifreund
yes, but you don't have to have it in the api

1602791880
donniewest
I've dipped my toes in a couple times, but gotten a bit perplexed by the C interop

1602791883
g-w1
donniewest

1602791885
ifreund
donniewest: Hi, welcome!

1602791893
Nypsie[m]
donniewest:

1602791897
Nypsie[m]
Haha

1602791899
ifreund
lol

1602791911
ifreund
C interop makes a lot more sense if you know C as well of course

1602791957
jabb
like this:

1602791990
donniewest
Lol, yeah, I figured as much. I was hoping there was something that'd get me 80% of the way there regarding using existing C libs

1602792010
ifreund
that's one way, or you can do it like the example i posted up there with reallySpeak()

1602792035
jabb
familiarity with low level stuff like memory and pointers will help immensely

1602792039
ifreund
std.Allocator does this as well, you don't call allocFn or resizefFn directly

1602792061
jabb
ohhhhh, nice

1602792068
ifreund
yes, a solid mental model of how memory works is the single most valueable thing you can bring I think

1602792092
jabb
yeah, this is awesome dynamic dispatch

1602792099
jabb
feels closer to the metal

1602792102
jabb
but saf

1602792137
ifreund
indeed

1602792137
g-w1
donniewest: what c libraries are you thinking of using

1602792144
ifreund
and it doesn't need any special syntax

1602792147
jabb
yeah

1602792152
jabb
just @fieldParentPtr

1602792204
jabb
donniewest: i'd say dive in and ask questions when you're stuck

1602792213
ifreund
^

1602792247
jabb
ziglearn is a good start

1602792249
donniewest
Either Chromium Embedded Framework (CEF) or libgraphqlparser. I was playing with getting an http server to parse graphql queries and never actually got importing libgraphqlparser to work

1602792263
donniewest
Granted, that's also what I get for not choosing basic enough of a problem, lol

1602792491
donniewest
I might give it another shot and see what happens. Zig's guide on memory management didn't confuse me but if someone has a good primer on memory management (even in a different lang) I'd be happy to dive in

1602792494
g-w1
it seems like that is c++

1602792514
g-w1
nvm

1602792519
donniewest
From what I can tell, CEF and libgraphqlparser are written in C++ but have C interfaces

1602792524
g-w1
yeah

1602792554
g-w1
what I would do is look at how they do the ffi in other languages and then do the same

1602792557
g-w1
ex:

1602792660
donniewest
Oooh, I didn't think of that. I might give that approach a shot

1602792806
ifreund
those macros look kinda funky:

1602797927
frett27_
hello, i got a compiler bt on this line, is it legal ? :   self_ptr.reconnect_registered_topics = mem.zeroes([10][*]u8);

1602797964
frett27_
an array of unconstraint u8 slice

1602798082
frett27_
Unreachable at /home/use/zig/src/stage1/analyze.cpp:5430 in hash_const_val_ptr. This is a bug in the Zig compiler.

1602798098
frett27_
'll try the today master

1602798156
ifreund
well, even if it didn't crash that shouldn't work

1602798165
ifreund
you can't init a non-optional pointer to 0

1602798374
frett27_
what's the memory representation of [10][*]u8 in a struct ?

1602798427
companion_cube
10 pointers next to one another, I think?

1602798450
ifreund
yes

1602798590
frett27_
ifreund: i didn't caught you, and don't understand why it's not legal

1602798622
frett27_
a fixed array of pointers is sized known ?

1602798656
companion_cube
pointers have a known size, yes

1602798739
earnestly
Typically languages that need to know sizes at compile time in certain constructions can be "worked around" by using pointers for that reason

1602798816
ifreund
frett27_: [*] pointers may not be null

1602798831
ifreund
?[*] pointers may be null

1602798836
ifreund
0 is null

1602799031
frett27_
ifreund, thank's for the addition

1602799037
earnestly
ifreund: So much in C would be fixed if pointers were not allowed to be null by default, with some qualifier that allowed it

1602799071
ifreund
earnestly: I know, zig is so much easier to use because of that simple change

1602799133
ifreund
the distinction between pointer-to-one and pointer-to-many and what not is nice as well

1602799208
frett27_
ifreund, it compiles now,

1602799273
frett27_
thank's

1602799273
ifreund
nice!

1602799315
companion_cube
earnestly: and if C had arrays, too

1602799369
ifreund
eh, that's not nearly as big of a deal

1602799445
earnestly
companion_cube:

1602799465
companion_cube
ifreund: definitely is, C could have slices, strings, etc.

1602799472
companion_cube
cuts heavily on the security faults

1602799476
companion_cube
security flaws*

1602799487
earnestly
I wish I could find that article which explains why a string type is a bad idea

1602799530
ifreund
"arrays" are not slices or strings though...

1602799559
ifreund
and yeah, language level string types don't make sense imo

1602799576
ifreund
what is or isn't a valid character is a social construct

1602799695
earnestly
Well the article mentioned their replacement with standard arrays, whereby the bytes are then encoded/decoded as needed

1602799707
earnestly
A string is technically a monoid

1602799715
earnestly
(Unrelated fact about strings)

1602799730
ifreund
that's pretty much zig's approach

1602799738
ifreund
a "string" is just a []const u8

1602799744
companion_cube
earnestly: even [u8] would be a good string type

1602799744
ifreund
(slice of raw bytes)

1602799750
earnestly
companion_cube: Exactly

1602799757
companion_cube
but that's not something C can do

1602799779
earnestly
Yeah I'm going for the "C doesn't have arrays" bait

1602799811
earnestly
But perhaps you're refering to how you access them compared with the underlying memory model where "parallel arrays" means something else

1602799832
companion_cube
I just mean it doesn't have any meaningful notion of array, except those with fixed length

1602799847
companion_cube
the rest is just pointers without the associated length, and it's a terrible footgun

1602800068
ifreund
i'd call pointer + length a slice

1602800084
ifreund
don't "arrays" always have fixed length?

1602800093
earnestly
In my mind, yeah

1602800220
earnestly
ifreund: As for slices, consider:

1602800257
companion_cube
depends whether the "fixed length" is an actual comptime constant

1602800292
earnestly
companion_cube: Well, arrays that can change their length usually have a different name, such as dynamic arrays, vectors, etc.

1602800323
earnestly
But it's a somewhat semantic point as I know what you meant

1602800395
ifreund
earnestly: that's quite expressive

1602800421
ifreund
also, this syntax makes my brain hurt

1602800439
earnestly
ifreund: It's of the algol school, predates C heh

1602800484
earnestly
ifreund: I'd like to see this sort of thing more too:

1602800500
earnestly
If you prove the routines then you can turn off the asserts but that's eh.

1602800546
earnestly
(Because proof doesn't compose; and provers tend to make a few assumptions about the global state)

1602800567
earnestly
ifreund: This is a specification, not an implementation, so a bit like a header

1602800664
companion_cube
earnestly: there's a third thing

1602800672
companion_cube
array of fixed lenght, but length is known at runtime

1602800675
companion_cube
length*

1602800687
companion_cube
vectors/dynamic arrays are something else indeed

1602800741
ifreund
earnestly: what happens if e.g. enqueue is called when the queue is full?

1602800745
earnestly
companion_cube: The only way the runtime can know that length is by inserting checks every time its accessed.  This could be too much of a performance burden

1602800758
g-w1
if a string type is a bad idea then why do some things use it in the standard lib ([:0]u8)? Is it just for convenience to c apis?

1602800772
ifreund
or can that be statically prevented somehow?

1602800795
earnestly
ifreund: exceptions

1602800805
ifreund
g-w1: convinince and it prevents unecessary copies

1602800807
ifreund
earnestly: ew

1602800828
companion_cube
earnestly: you mean, bound checking? yup

1602800843
earnestly
ifreund: Ada is a bit more sane about exceptions, but yeah.  A bit like Standard ML it has them

1602800857
companion_cube
the default should always be bound checking

1602800867
companion_cube
with a possibility of disabling them in bottlenecks

1602800874
companion_cube
(as in, "hold my bottle" ? :DD)

1602800884
earnestly
companion_cube: That's pretty much Ada's attitude.  It gives you plenty of pragmas to turn off checking on specific things

1602800910
earnestly
ifreund: (It's not like C++'s exceptions)

1602800936
ifreund
that's good

1602800947
ifreund
I'm still not a fan of jumpy control flow though

1602800960
earnestly
There's no "try"

1602800968
ifreund
ok yoda

1602800970
earnestly
:D

1602800978
earnestly
ifreund: Oh they have goto as well

1602801032
ifreund
that seems like it shouldn't be needed if you have exceptions already

1602801064
earnestly
Yes, such things typically aren't used for error handling like goto out in C

1602801124
earnestly
But it's pragmatic I suppose

1602801201
earnestly
ifreund: The main thing I've seen it used for are jumping around in loops but it's very rare (not that I've seen much)

1602801310
ifreund
i feel like people writing ada are likely to be aware of the perils of goto

1602801328
ifreund
C really does need it to handle errors properly though

1602801333
earnestly
They're all retraining to C++ lul

1602801346
earnestly
"Looking for Ada developer to help port the Apache platform to C++"

1602801347
ifreund
writing C++ depresses me

1602801364
ifreund
I'm pretty good at it, but I just can't enjoy it

1602801365
earnestly
(By Apache I mean the helicoptor)

1602801393
ifreund
awe, really?

1602801397
earnestly
Apparently so

1602801418
earnestly


1602801720
companion_cube
earnestly: that's pretty much what every language but C has

1602801794
earnestly
companion_cube: Meanwhile ESA has left more crators in Mars than NASA :p

1602801803
earnestly
craters*

1602801822
earnestly
At that level the language doesn't really matter so much

1602801944
companion_cube
not everyone writes C the way JPL does.

1602801963
companion_cube
if C were restricted to such domains, I wouldn't care indeed…

1602801988
earnestly
companion_cube: tbf, they generate most of their C from python, heh

