1606004981
THFKA4
i...is this for a challenge or something? why are you calling the runtime linker manually ohgod

1606005099
THFKA4
ultra-portable binaries

1606007733
pixelherodev
marler8997: I don't know of any

1606007745
pixelherodev
I know of a few that never ended up being officially released

1606008338
karchnu
void linux uses musl instead of glibc, and statically compiles their tools (I don't know how many)

1606008436
waleee-cl
karchnu: void has musl as an alternative to glibc

1606008631
waleee-cl
karchnu:  you were perhaps thinking of apline? There glibc has been "banished"

1606008647
waleee-cl
* alpine

1606009220
karchnu
we were talking about distributions that made the choice of statically compile their own tools, and I think that is the case for void

1606009331
karchnu
yes, alpine uses musl, but it is not statically compiled (even though it will not change much, at least for the base system since they use busybox + musl)

1606009414
karchnu


1606010784
dominikh
looking at syscalls in zig, I'm noticing that errors that can happen, but are due to programmer error, are being handled as unreachable. for example

1606010891
waleee-cl
karchnu:

1606011596
daurnimator
dominikh: that's correct.

1606011621
daurnimator
dominikh: release-safe vs release-fast builds

1606011656
daurnimator
most people should be using release-safe. release-fast is telling the compiler that you haven't made any mistakes and to make things go as fast as possible

1606011683
dominikh
I suppose that's fair

1606013344
marler8997
andrewrk that's cool! I'll have to look into the Vulkan loader myself to see what it's doing

1606013365
andrewrk
I think I'm going to have a working demo soon :D

1606013383
marler8997
did you find the X extension to map a framebuffer?

1606013610
andrewrk
I found some example code that does it

1606016936
andrewrk
marler8997,

1606016969
dominikh
congrats

1606017020
andrewrk
will publish the code in a little bit after I clean it up

1606018579
ifreund
marler8997: here's one

1606018650
ifreund
that's super impressive how fast y'all got to a working demo!

1606019135
andrewrk
I'm cheating a bit due to zig not having PIE support yet

1606019185
andrewrk
still have a problem to solve associated with that, and then need to add a small patch to Vulkan-Loader to make the SYSCONFDIR runtime-configurable

1606019199
andrewrk
then I need to figure out how in the hell to test alpine

1606019201
andrewrk
maybe a VM

1606019419
pixelherodev
oh right, oasis!

1606019452
pixelherodev
andrewrk: now for a Wayland version?

1606019453
pixelherodev
:P

1606045757
ifreund
zig-wayland is coming along pretty nicely and might make a wayland version more pleasant to write. Haven't experimented with accelerated client side graphics yet thoguh

1606047996
Xavi92
I'll update to latest zig and try again

1606048346
daurnimator
Xavi92: you should be able to add mips1 to your zig target

1606048531
daurnimator
oh I see you already do

1606048854
Xavi92
daurnimator: still happens on latest zig. I see zig passing "-target mipsel-unknown-unknown-unknown" to clang, but not "-mips1"

1606048959
daurnimator
Xavi92: what if you run with --verbose-llvm-cpu-features ?

1606049144
Xavi92
daurnimator: returns pretty much the same

1606049179
daurnimator
Xavi92: might need to clear your zig-cache

1606049268
Xavi92
daurnimator: oh, sorry.

1606049550
daurnimator
Xavi92: well there's your problem...

1606049606
ifreund
should be an easy fix at least

1606049674
Xavi92
Hm, so is this also an issue for targets other than riscv32/64?

1606050399
daurnimator
Xavi92: wait hang on..... I see e.g. `-Xclang -target-cpu -Xclang mips1` in your output there

1606050426
daurnimator
then `-Xclang -target-feature -Xclang +mips1`

1606050443
daurnimator
that

1606050462
daurnimator
the key point is `cdromh.s` doesn't have a .c/.cpp file extension

1606050630
Xavi92
daurnimator: I felt somewhat forced to use zig for assembling .s files because apparently mipsel-unknown-elf-as has a bug that affects the link process. Please read the original comment at

1606051242
daurnimator
Xavi92: idea for a quick fix:

1606052445
Xavi92
daurnimator: thanks, I'll give it a try ASAP

1606054843
daurnimator
it's likely to not work... you might try using `-Xassembler` instead and moving it into the switch

1606059407
dimenus
ifreund: didn't you write a wayland scanner?

1606059492
ifreund
dimenus:

1606059558
ifreund
It's still quite young and subject to change but is already a big step up on autogenerated bindings IMO

1606061990
mq32
ifreund: std.log was mainly your work, right?

1606062020
ifreund
mq32: sure, I got the ball rolling

1606062031
mq32
<3

1606062034
mq32
it's so niiiice!

1606062037
mq32
love it

1606062041
mq32
warning(wavefront_obj): unrecognized line: 'map_Kd Textures/metalLight(Clone).png'

1606062058
mq32
my wavefront obj parser now uses std.log instead of std.debug.print :)

1606062060
ifreund
i'm very happy with enum literal approach to scoping :)

1606062064
mq32
yes!

1606062068
mq32
very neat

1606062931
dominikh
any plans for updating

1606067267
TheLemonMan
ah I fucking hate when the FreeBSD CI fails with no error whatsoever

1606067307
TheLemonMan
I guess I can't just ssh into the CI box... or can I?

1606067397
TheLemonMan
no way, nice

1606069249
dominikh
I have a design question on allocator use. in

1606070262
andrewrk
TheLemonMan, I can get you access to be able to do that

1606070281
andrewrk
tracking issue is

1606070290
TheLemonMan
that'd be neat

1606070693
andrewrk
btw TheLemonMan

1606070704
andrewrk
I'm cheating by doing -lc since we don't have PIE yet

1606070715
andrewrk
but I think it's going to work!

1606070725
TheLemonMan
aha, it worked! amazing

1606070745
earnestly
Apparently the design of vulkan make static linking, difficult

1606070784
andrewrk
well look at all the libs the actual driver depends on:

1606070806
andrewrk
it includes LLVM 9, libstdc++, xml2, ...

1606070814
pixelherodev
That's honestly insane.

1606070833
andrewrk
and libncurses

1606070844
earnestly
Something is cursed alright

1606070881
pixelherodev
I'll stick  to my nice, uncursed software rendering :P

1606071242
earnestly
I'm sure there's a good list of reasons for this

1606071252
earnestly
But I don't know enough to understand yet

1606071275
andrewrk
I bet I can explain every one of those libs

1606071305
dominikh
LLVM is probably because of SPIR-V?

1606071324
pixelherodev
That just tells me SPIR-V is probably implemented horribly :P

1606071349
dominikh
I've used Zig once, but then I saw it needed LLVM. that really put me off :P

1606071383
TheLemonMan
is this a meeting of LLVM haters?

1606071391
dominikh
apparently

1606071412
TheLemonMan
more people for my /ignore list!

1606071433
dominikh
I knew I should've included an /s on my anti-LLVM message :<

1606071452
pixelherodev
TheLemonMan: I hate it because I looked at the source :P

1606071453
fengb
Am I on your ignore list too?

1606071479
pixelherodev
That and the four(?) different infinite loops and optimizer bugs I've had to deal with

1606071494
andrewrk
TheLemonMan, if you're gonna troubleshoot the freebsd thing you should know that there is one llvm assert we are tripping when is built in debug mode. I haven't had the time to work it out yet but was hoping to do so before 0.7.1

1606071509
pixelherodev
Also the entire philosophy of LLVM is ridiculous and leads to bad code

1606071519
dominikh
what's that philosophy?

1606071858
TheLemonMan
andrewrk, do we trip that assert only on FreeBSD?

1606071876
pixelherodev
Keep in mind that this is the interpretation of someone who hates the project filtered through that lens

1606071894
pixelherodev
They focus on "performance" above all else, micro optimizing for stupid benchmarks

1606071925
dominikh
in their implementation or in the code they produce?

1606071930
pixelherodev
The latter

1606071956
andrewrk
TheLemonMan, I ran into it with release builds of std lib tests on linux. It could be in linux specific std lib code but more likely it will trip for every OS

1606072002
andrewrk
but (not) tripping an llvm assert is basically UB, so it could be manifesting in a flaky freebsd std lib run

1606072015
TheLemonMan
oh, I'll give that a spin on the beastly aarch64 server then

1606072026
andrewrk
ðŸ’ª

1606072119
pixelherodev
To put it differently, it's poorly designed C++ written by people who like C++ and think that micro-optimizations are better than solid designs

1606072149
TheLemonMan
lol

1606072209
andrewrk
llvm's design process is a lot more decentralized than zig's. you can't really generalize it that way; there are many people contributing major things to llvm and all bringing different perspectives, use cases, and design philosophies

1606072309
andrewrk
that is its power and its weakness. it's why its runtime optimizations are state of the art but why it's difficult for the project to have competitive compilation speeds, and why it keeps growing in lines of code over time

1606072353
pixelherodev
andrewrk: I was very explicit that I'm biased here

1606072373
pixelherodev
That's probably a much more accurate perspective

1606072491
andrewrk
TheLemonMan, I'm gonna revive your PIE diff today unless you were already in the middle of it

1606072525
TheLemonMan
andrewrk, go for it! are you plainning on making it default?

1606072555
andrewrk
current plan is still to make things as static as possible. so I think you would have to ask for it

1606072568
andrewrk
maybe in release safe we would do it by default, since it enables ASLR?

1606072656
TheLemonMan
many Linux distros (and some BSDs) enable PIE by default as security measure

1606072683
TheLemonMan
the impact on the binary size should be minimal, of course some numbers are welcome

1606072749
andrewrk
I think linux distros would likely choose ReleaseSafe for zig packages. that's ifreund's preferred release mode for his wayland window manager for example

1606072805
earnestly
Distros mostly focus on hardening flags but some may care about size too

1606073047
andrewrk
today in zig development

1606073112
companion_cube
It'd be nice to have a equivalent of llvm but aiming at small size/reasonable code

1606073134
TheLemonMan
cranelift?

1606073260
THFKA4
PIE is the future

1606073334
TheLemonMan
it really depends on the filling

1606073345
THFKA4
cranelift is that second compiler for LSP-tier debugging feedback because LLVM is fat

1606073365
THFKA4
we can't all be Roslyn

1606073393
THFKA4
and generate the same bytecode from incremental builds as from a batch compile

1606073886
Michcioperz
i believe there was something called qbe trying to be a simplified llvm

1606073913
Michcioperz
intentionally doesn't have an asm syntax and that's a big shame for me

1606074042
companion_cube
Also not really maintained, is it?

1606074072
companion_cube
Cranelift might be a good bet though.

1606074297
pixelherodev
qbe is neat

1606074310
kushalp
I'm trying to use the `translate-c` command and I'm receiving the following error: time.c:1:10: 'arpa/inet.h' file not found. Any ideas what I'm doing wrong?

1606074312
pixelherodev
There's a full C11 compiler using it

1606074314
pixelherodev
(cproc)

1606074324
pixelherodev
Really simple code, too :D

1606074376
companion_cube
It's a devault project isn't it? Cproc I mean

1606074542
pixelherodev
No?

1606074544
Michcioperz
iirc it is on srht but not devault

1606074559
pixelherodev
^

1606074563
pixelherodev
yes and yes

1606074620
pixelherodev
There is literally nothing that would compel me to use clang over cproc

1606074663
Michcioperz
hmm arpa/inet.h is a non-standard kind of header no?

1606074692
pixelherodev
Probably

1606074701
pixelherodev
arpa/ prefix heavily implies that

1606074798
Michcioperz
hmm i added -I/usr/include -I/usr/include/x86_64-linux-gnu and it translated

1606074803
Michcioperz
isn't there a cleaner way?

1606074817
Michcioperz
cc kushalp in case this is good enough for you

1606074839
Michcioperz
oh i'm still on 0.6 hmm

1606074839
Xavi92
daurnimator: the patch for MIPS I now apparently appends tons of complementary flags to clang (e.g.: several mips architectures)

1606074857
pixelherodev
If you have to specify a local header, it's not portable

1606074882
Michcioperz
sure i was just wondering if there isn't a shortcut for including system headers

1606075264
kushalp
Thanks, that appears to have worked!

1606075300
Michcioperz
happy to hear it, i wish there was a cleaner way

1606075304
kushalp
A little crazy that it converts all of the header methods as well, but a useful starting point

1606075316
kushalp
s/crazy/too much/

1606076304
pixelherodev
kushalp: I like to think of translate-c as a tool. Sometimes, in simple cases, `cImport` is the way to go; oftentimes, it's better to run it manually and clean up the result

1606078725
ifreund
For complex apis you may be able to improve the ergonomics or type safety alot with some more complex bindings as well

1606078756
ifreund
e.g. I've worked out a way to eliminate almost all void pointer casting in libwayland's api

1606081492
andrewrk
qbe shells out to a system installed assembler. it doesn't have instruction selection

1606081569
adsr
Hello all, are condition variables in the standard lib? I see threads and mutexes and wanted to make sure I'm not overlooking something

1606081599
adsr
Looking to write a producer/consumer thing

1606082021
andrewrk
have a look at ResetEvent

1606082048
andrewrk
but overall, I wouldn't say zig yet has a comprehensive concurrency API yet

1606082346
adsr
Will check that out, thanks andrewrk. Also just found std.event.Channel

1606082431
andrewrk
that API is currently for evented I/O stuff only, although I do aspire to make it work in both contexts with the same API

1606082535
andrewrk
TheLemonMan, damn you did a lot of work in this PIE patch

1606082556
andrewrk
I also didn't realize you already had a viable workaround for lack of language support for weak externs

1606082656
TheLemonMan
you can do a lot of weird shit with a block of comptime asm heh

1606083060
andrewrk
TheLemonMan, how do you think the logic here should change?

1606083089
andrewrk
I made `self.base.options.pie == true` when target_util.requiresPIE is true

1606083100
andrewrk
in your patch you have it only if the link_mode is .Static

1606083138
andrewrk
hm I think I know the answer

1606083144
TheLemonMan
yeah, I focused on static PIE

1606083144
andrewrk
I'll throw up a PR if you want to have a look

1606084246
TheLemonMan
sure, I'll have a look in the morning

1606084524
TheLemonMan
wee, more tests passing on FreeBSD

1606084722
andrewrk
nice

1606085119
pixelherodev
Nice wor - oh you're gone :(

1606085124
pixelherodev
Still, nice work!

