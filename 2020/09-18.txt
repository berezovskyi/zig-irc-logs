1600390843
mkchan
Huh... const stdout = std.io.getStdOut().writer(); fails on windows if I do it outside any method

1600390877
mkchan
Unable to evaluate constant expression pointing to some .x86_64 => ask volatile line

1600390886
mkchan
Asm*

1600391531
andrewrk
yeah windows is the main reason that getStdOut() is a function call rather than a global

1600391587
mkchan
Dammit windows... So I'll have to make it inside my print wrapper each time I guess

1600391977
leeward
Yup, it's not awesome.

1600392011
leeward
It's one of the reasons why there's no std.io.in or std.io.out

1600392356
mkchan
Now I'm actually not sure how to read until a line feed. On Linux reading till \n is good for my application because even when I use a console and type a command and press enter it sends \n

1600392394
mkchan
On windows my application still needs to read till \n but the terminal sends \r at the end and the readUntilDelimiterOrEof method only allows specifying a single delimiter

1600392440
leeward
Yeah, I've had trouble with multiple character delimiters before...I might have hacked it.

1600392616
leeward


1600392626
leeward
Looks pretty hacky to me.

1600392632
mkchan
I kinda added an extra step

1600392645
mkchan
Basically I get the line till \n and trimright the \r

1600392655
mkchan
So carriage return from windows works out fine

1600392721
leeward
yeah

1600392770
leeward
Macs don't still use their CR-only endings, do they?

1600392781
pixelherodev
... why did they ever?

1600392785
pixelherodev
That's got to be the stupidest one.

1600392788
fengb
Nope, switched to LF on OSX

1600392797
fengb
Mac Classic was \r

1600392801
pixelherodev
Both Linux's and Windows' are defensible, even if Windows' is so blatantly wrong.

1600392810
pixelherodev
\r on its own makes

1600392815
leeward
I don't know, it sounds like the future to me. Who needs to line feed?

1600392824
leeward
Obviously if you're CRing you need to LF.

1600392856
fengb
lol... the switch happened before phd was born

1600392859
leeward
And if you're going to make something with no baggage that never needs to use a text terminal or a teletype, CR does seem reasonable.

1600392860
fengb
I feel old

1600392871
leeward
Ouch, fengb.

1600392884
leeward
I'm referring to the early '80s as the future.

1600392909
mkchan
I wish we had better tooling

1600392928
mkchan
Cmd > settings > set eol character > \n > apply

1600392934
leeward
I recently watched...

1600392936
leeward
It hurt a bit.

1600392975
mkchan
I saw on HN that microsoft is apparently committing to linux regarding HyperV

1600392987
mkchan
I hope they just switch to linux

1600392994
leeward
That would be hilarious.

1600393001
leeward
What distro do you run? Windows.

1600393019
mkchan
But this is actually the year of the Linux desktop

1600393034
mkchan
What's this GNU thing people sometimes talk about

1600393042
leeward
Microsoft(TM) GNU/Linux Windows(TM)

1600393065
fengb
Would they keep any GNU around though?

1600393067
leeward
Are you talking about the HURD, or making a joke about Linux?

1600393082
mkchan
A little bit of many jokes

1600393093
leeward
check, funny.

1600393118
fengb
I used to joke about HURD... but itâ€™s been long dead

1600393120
leeward
They'd probably ship with bash.

1600393134
mkchan
They already basically ship bash on wsl

1600393136
leeward
It's kinda sad, the HURD became viable about 8 years after it died.

1600393179
leeward
Right, but that's an application that runs under Windows, not part of the OS.

1600393431
mkchan
Yeah but I mean like they're not closed to linux stuff anymore

1600393526
leeward
It's true.

1600393541
leeward
They're in the embrace part of the cycle.

1600393546
leeward
Maybe with a touch of extend.

1600393599
mkchan
Yeah but hard to extinguish basically the entire cloud

1600393611
mkchan
And mobile

1600393619
mkchan
And everything except desktop :)

1600393806
torque
not as hard as you'd think

1600393815
andrewrk


1600394017
pixelherodev
leeward: because it means that you can't CR without LF

1600394025
pixelherodev
And I [ab]use CR all the time :P

1600394092
pixelherodev
They will almost certainly try to extinguish.

1600394111
pixelherodev
It really comes down to whether or not the communities are willing to put in the work to clean up the mess they make, which I suspect many will

1600394123
pixelherodev
I mean, systemd tried EEE too.

1600394164
pixelherodev
Whether or not you agree with them, the fact remains that they had as a fundamental goal extending Linux itself and extinguishing any platform which didn't include them.

1600394222
pixelherodev
Yet there are still numerous distros without it, simply because people put in the effort to make and / or maintain them.

1600394240
pixelherodev
In order for EEE to work, people have to accept the extensions themselves.

1600394289
pixelherodev
If MS attempts EEEing Linux itself, it wouldn't be *impossible*, but the challenge would be much higher than I suspect most people think it would be

1600394824
mkchan
How do I tell zig to compile specifically using certain options like bmi, popcnt and see and such?

1600394833
mkchan
Sse*

1600395009
mkchan
I can see target and -mcpu but what I'm looking for is specific feature flags like -mbmi -mbmi2 -mpopcnt and such

1600395563
wilsonk
andrewrk: any chance you can do a video once #6250 lands to let us know the differences and features? :)   ... I realize I could just read the release notes and code, but it might be more digestible for some people to hear it from you

1600395639
wilsonk
oh, sorry I just noticed on discord that there 'is a lot more work to do' so I suppose I am jumping the gun there

1600395795
andrewrk
yep!

1600396126
andrewrk
mkchan, -mcpu=? should give you a list of cpu features

1600399912
andrewrk
mkchan, oops, do -mcpu=generic+?

1600399937
andrewrk
popcnt, bmi, bmi2 are in there

1600399982
andrewrk
-mcpu=generic-popcnt-bmi-bmi2 would disable those three

1600401605
andrewrk
wilsonk, yeah I'm looking forward to doing a stream to celebrate #6250 landing and give a little tour of how the whole thing works

1600401640
andrewrk


1600401644
andrewrk
mkchan, ^

1600401825
fengb
Is it an internal restructuring where we won't notice it happening?

1600402109
andrewrk
mostly. I'm going to break some obscure things

1600402188
andrewrk
there will probably be a few regressions, for which fixing will then be in zig code instead of c++ :)

1600402776
wilsonk
nice

1600405509
pixelherodev
In other words, c++ is going to a nice little server farm upstate.

1600405786
andrewrk
with the merge of #6250 it will finally be time to `mv src-self-hosted src` :-o

1600405837
pixelherodev
Sorry for my absence lately, been busy finishing up the move (so. much. to. organize. gahhh) and with uni :(

1600405854
pixelherodev
I'm hoping to resume work on CBE + SPU II in a week or two once I've had time to gain on my schedule a bit

1600406036
andrewrk
it's honestly been pretty good timing, because I've been working tirelessly on this monster branch that is guaranteed to massively conflict with anyone else's stage2 work

1600406108
pixelherodev
lol, yeah.

1600406118
pixelherodev
That's one reason I was eager to pick up the ZBS work earlier

1600406128
pixelherodev
Small (not a big time sink), and not actually part of stage2 :P

1600406569
andrewrk
I've really been pushing myself, gonna need to take a break after this

1600406665
pixelherodev
You've

1600406673
pixelherodev
I mean, wow.

1600407439
nikki93
it's really nice that when you gotodef of std stuff (eg. `AutoHashMap`) you can just scroll down and look at the tests

1600407456
nikki93
the basic test often teaches how the data structure works and the rest show some invariants etc.

1600407550
andrewrk
:)

1600423858
ask6155
Hello! I remember there being a page about editor support... can someone give me a link to it?

1600423993
Nypsie[m]
Don't think there is actually. Most syntax highlighters for different editors are however hosted under ziglang:

1600424004
Michcioperz
maybe

1600424070
Nypsie[m]
Perhaps you could tell us the specific editor support you're looking for? There's also support for some editors which are not listed in either

1600424123
ifreund
if you're asking about fancy LSP stuff, there is zls

1600426931
ask6155
How do I make true to false and false to true? like a not?

1600426975
ask6155
something like x = not x

1600427009
jjsullivan
ask6155, just the `!` operator

1600427015
jjsullivan
**unary operator

1600427026
rain1
hello!

1600427046
jjsullivan
HELLO FREN

1600427055
rain1
:)

1600427137
jjsullivan
protip: don't wait on learning about ccache until you find out llvm exists

1600427161
jjsullivan
:^) my life has changed

1600427237
ask6155
I just have a bad computer so I just searched for how to speed up compilation and I found it.

1600427329
jjsullivan
yeah, it wasn't so much advice rather than my troubles building llvm many times

1600427351
jjsullivan
been so long since I touched real compiled languages

1600427361
jjsullivan
or had more than some homework to do

1600427454
ask6155
welcome back! nothing much has changed... only now we have safer c++ and better c

1600427600
jjsullivan
doesn't really seem like they changed all that much

1600427613
jjsullivan
templates/concepts in c++ are pretty cool though

1600427635
jjsullivan
but pale in comparison to the type computation in zig :^)

1600427961
ask6155
why is readAll not taking my buffer? it says it need []u8 but it got [1024]u8

1600428578
ask6155
oof

1600428593
Nypsie[m]
Use &buffer

1600428768
ask6155
If number is the value of a number, &number is the address of the number, then what is buffer is this scenario?

1600428828
Nypsie[m]
address of your array

1600428885
ask6155
if buffer is the address of my array then what is &buffer?

1600428894
Nypsie[m]
You have to pass a slice into the readAll() function

1600428911
Nypsie[m]
buffer was just an example for whatever you named your buffer...

1600429196
ask6155
I don't understand slices is there a tutorial on them somewhere?

1600429232
Nypsie[m]


1600429878
ask6155
Do I always have to make slices from arrays?

1600430034
Michcioperz
for functions that take slices

1600430190
ask6155
okay

1600430417
Michcioperz
it would be hard to make most of these functions accept arrays because the size of an array is part of the type definition and has to be known at compile-time

1600434981
ifreund
also you don't want to pass the array by value, you want to pass a pointer to the array

1600452988
frett27
Hi community, i'm writing an iot deamon, as i'm learning zig, i'd like to have external opinion on review on the produced code. Are there any nice guys to have look and make some advises to make it much more idiomatic ?

1600453094
frett27
i would like to communicate much about it as my testing phase reached quite a stable usage for months

1600455776
wilsonk
frett27: looks interesting...I am probably not the one that should comment further but I just wanted to let you know someone is here :)   It might be a little while before someone has time to look at that, but hang in there, the community is usually pretty good with requests like this

1600455853
frett27
hi wilsonk, thank's for the ping, yep the channel seems very quite

1600455904
frett27
there are no strong commitments, but wanted to give the best for this

1600455947
frett27
i know there is the 0.7 on stage, as soon as the llvm commit the 11

1600455971
frett27
and zig show time tomorrow :-)

1600455971
ifreund
I haven't noticed anything glaringly amiss, but the camelCase variable names did throw me off

1600455978
ifreund
looks like a neat project

1600456000
frett27
ifreund thank's, i'm committed on this

1600456014
frett27
and for my personal usage found it usefull

1600456026
ifreund
not a fan of underscores I guess? :P

1600456072
frett27
in names ? or _ = ....

1600456112
ifreund
i'm talking about snake_case vs camelCase for variable names still

1600456122
frett27
got it

1600456205
ifreund
hmm, the allocator handling in iotmonitor.zig also feels a bit strange

1600456218
ifreund
why not just init the gloabal to std.heap.c_allocator?

1600456316
frett27
did it :

1600456344
frett27
was using the c_allocator to be able to benefit from valgrind

1600456367
frett27
as there are c mqtt and leveldb c lib also

1600456382
ifreund
well yeah if you're linking libc the c allocator is pretty much the thing to use

1600456420
ifreund
but your globabl is initialized to undefined here:

1600456444
ifreund
and then you use an arena as the global in one of the tests, which seems a little strange

1600456464
frett27


1600456484
frett27
sorry the allocator it inited on the main's first line

1600456522
frett27
i may have allocated it in the declaration also

1600456538
ifreund
yeah, I see that but I'm saying it's confusing and unecessary when you can just do `const globalAllocator = std.heap.c_allocator;`

1600456580
ifreund
I prefer to call the const gpa though, as only general purpose allocators make sense to be global in most cases

1600456672
frett27
i got the point, maybe i wanted to have it previously "var" to benchother ones, but as soon as, the c makes sense, you got the point

1600457089
frett27
thank's for the feedback, ifreund

1600457175
ifreund
no problem, though it was fairly superficial

1600457988
justin_smith
using a c lib that returns a [*c]const u8, how do I get print to print that string instead of u8@19c41788

1600458031
justin_smith
I'm doing "print("assigned name '{}'\n", .{p});"

1600458203
justin_smith
never mind, the trick was [*:0]const u8 instead of [*c]const u8

1600458211
justin_smith
it's fun that the compiler's that smart

1600458284
ifreund
justin_smith: you could also to print("{s}\n", .{p});

1600458298
ifreund
see the doc comment in std.fmt, it's quite informative

1600458312
ifreund
s/to/do/

1600458865
justin_smith
oh, great, thanks

1600458903
justin_smith
in this case [*:0]const u8 is a better description of the pointer, given the API

1600458920
justin_smith
but that's a good trick for other situations

1600458982
andrewrk
justin_smith, generally, [*c] is only to be used by auto translated code. if you're denoting the type by pressing keys into your keyboard, you should pick the actual memory layout instead of leaving it ambiguous

1600458990
justin_smith
this was the last bug in my verbatim "translate-c" based port of the jack example client (the simple one that copies the microphone data to the speaker), I'm going to see if I can clean it up more, make a blog post, and most likely turn it into a more generic "drop you zig function in here to process audio" example

1600459028
justin_smith
andrewrk: that's a great rule of thumb, thanks, yeah I did start with translate-c, and I'm trying to turn it into better code

1600459064
justin_smith
I'll make a goal of turning every [*c] into something more specific

1600459815
ifreund
I for one love classifying those [*c] pointers

1600459852
ifreund
it's so satisfying to fit them into zig's superior pointer type system

1600459930
justin_smith
ifreund: what's the best guide - the #Pointers secion in the langref, or?

1600459984
ifreund
That's all I've used, it certainly has everything you need

1600459986
frett27
lang ref, for sure, and there is a ziglearn initiative :

1600460005
justin_smith
frett27: cool, that's new to me thanks

1600460041
ifreund
if you have any specific case where it's unclear to you what the type should be, feel free to ask here of course

1600460493
pixelherodev
Hmm, here's an idea - for simpler translate-cs, does it make sense to have an interface which asks the user to disambiguate types?

1600460510
pixelherodev
That would be useful for long-term bindings / conversions which aren't intended to be regenerated frequently

1600460719
justin_smith
pixelherodev: well, it's easy enough to search for every "[*c]" in my file and know they all need fixing

1600460776
justin_smith
pixelherodev: the goal here was twofold, to make a blog post / example of translating a relatively straightforward c lib with a small api surface, and maybe ending up with a reusable binding spot for other code

1600461447
pixelherodev
justin_smith: yes, but that means one at a time

1600461456
pixelherodev
I meant so it asks for the fundamental type, and then propagates it

1600461464
pixelherodev
Maybe even replaces [*] with []

1600462426
justin_smith
right, but you'd want ? when its 0/1 vs. many

1600462471
justin_smith
and it could be that the same data type in the same api is 0/1 for one call, and many for another

1600463374
justin_smith
here's a fun example where multiple steps of translation can be elided entirely by using type inferernce and feeding c back what you got in the first place - runtime behavior is the same on each side of this diff

1600463441
justin_smith
approach one: fix the alignment of the pointer, fix the type, cast back to what the c lib wants

1600463455
justin_smith
approach two: ignore alignment and type, and feed c the same garbage it fed you

1600463510
justin_smith
I probably will want a helper that takes a []c.jack_default_audio_sample_t and quietly turns it into void to hand it to jack

1600463528
justin_smith
just because c is gigo doesn't mean we need to deal in garbage :D

1600463753
ifreund
why the *% for copy_size there?

1600463796
justin_smith
ifreund: it was done by translate-c, my first guess is overflowing multiplication

1600463829
ifreund
ah, yeah well all unsigned multiplication in C is wrapping

1600463834
justin_smith
I replaced with * (and removed that @bitCast / @as combo) and the program compiles and behaves as before

1600463853
ifreund
* is what makes sense here yeah

1600463893
justin_smith
ifreund: yeah, sercing in langref.html gives "*% - wrapping multiplication, guaranteed to have two's complement wrapping behavior"

1600463907
justin_smith
so it looks like a corner case c undefined behavior thing

1600463977
justin_smith
I'm developing this by running the program repeatedly, and since it pipes mic to speaker, I rub the laptop mic to test

1600463986
ifreund
yes, *% is the proper translation of * for unsigned ints in C

1600463989
justin_smith
this makes the dogs jealous because I am "petting the laptop"

1600463992
ifreund
hah

1600464002
justin_smith
so petting dogs is now part of my dev iteration lol

1600464013
justin_smith
if only I had a contact mic in a dog brush :D

1600464203
gonz_
We should all have this

1600465714
andrewrk
lol

1600466561
frett27
:-

1600466610
frett27
petting dogs checks the unsigned int overflow lol

1600466818
frett27
s/dogs/laptop/

1600467140
pixelherodev
andrewrk: I disable github notifications for the foreseeable future, since I was getting too many of them; mind pinging me in here when 6250 is merged so I don't obsessively check?

1600467161
andrewrk
sure

1600467173
andrewrk
pixelherodev, you may also be interested in

1600467467
pixelherodev
Hmm.

1600467469
pixelherodev
Hmmmmmm.

1600467473
pixelherodev
I think I like it.

1600467511
pixelherodev
The only real concern to me is that I don't know how many people will be motivated to touch that stage1 output from CBE, but that's been a sorta back-of-the-mind concern for a bit now

1600467548
pixelherodev
It does make sense to me that bootstrapping shouldn't be a priority for now

1600467839
andrewrk
I can do that work, I don't mind one-off monotonous code massaging

1600467850
andrewrk
that might be my greatest strength, honestly

1600468067
ifreund
with a good text editor and music it can be fairly pleasant

1600468067
pixelherodev
:P

