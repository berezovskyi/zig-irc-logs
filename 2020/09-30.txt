1601424621
andrewrk
tdeo, looks like the "transfer issue" feature is working nicely

1601424637
tdeo
great

1601424683
tdeo
i support this trimming of the standard library :)

1601424730
andrewrk
haha you love deleting things

1601424743
andrewrk
that is a valuable trait for this project

1601425633
andrewrk
af64fd2 is the one. I can feel it

1601426653
tdeo
andrewrk:

1601426660
andrewrk
thx

1601427187
daurnimator
andrewrk: we don't (on e.g. linux x86_64) name normal -fPIC .o files differently to non -fPIC. Why different for wasm ones?

1601427226
andrewrk
.o and executables are both ELF. the .o is relocatable, the bin is not

1601427431
shachaf
You don't make relocatable executables?

1601427521
daurnimator
andrewrk: uh, can't you have relocatable ELF executables?

1601427564
pixelherodev
Not for wasm.

1601427570
pixelherodev
Ah wait

1601427577
pixelherodev
Yeah, ELFs

1601427590
andrewrk
you can have PIEs but you would't be able to for example `ld -o new_exe pie_exe`

1601427855
daurnimator
hmmm. why not?

1601427995
andrewrk
that's the wrong question

1601428008
andrewrk
the right question is, how can we make the tools to help people get what they want done and not make mistakes

1601428395
pixelherodev
"Why on earth would you do that?"

1601432838
andrewrk
oh my god I think the tests are going to pass

1601433407
lunamn
i hope #6250 helps when i (someday, in the far far future, maybe) attempt to integrate netbsd libc

1601433504
andrewrk
lunamn, well you'll get it implement it in zig rather than c++ :)

1601433546
andrewrk
is netbsd your home OS?

1601433549
lunamn
i lost tracking of what i was doing on the c++ after 5 mins so i'm excited to peek at selfhosted source

1601433564
lunamn
nah, but i run a server with it to experiment on

1601433594
andrewrk
it's a lot more organized, that's for sure

1601433680
lunamn
agree, i'm planning to put it on one of my laptops since trying it out on vms doesn't cut it sometimes

1601433695
nikki93
is there a way to declare an `extern fn` into a `struct` instead of at the toplevel?

1601433731
andrewrk
yeah did you run into a problem?

1601433733
nikki93
also would be nice if i can do it within the same file (like, not need to do it in a different file where i export a wrapper or sth)

1601433737
andrewrk
files are just structs

1601433757
nikki93
oh i can just say `extern` in a `struct`? i didn't even try

1601433768
nikki93
i should probably just try everything before i decide it's not possible, in zig :p

1601433874
nikki93
lol yeah it works exactly as i would've expected it all to

1601434144
nikki93
can you alias a name when saying `extern fn` without introducing the extern name into the current scope?

1601434165
nikki93
like, if i wanted to bring in `extern fn foo` but in that scope define my own `foo` that actually wraps that and is not that

1601434188
nikki93
i guess in this case i can have a `struct` of internals and then have my 'alias' just call it but

1601434337
andrewrk
nikita`, yeah just don't make it pub and then do pub const alias = foo; next to it

1601434364
andrewrk


1601434469
nikki93
thx

1601436310
andrewrk
oops I mentioned the wrong person

1601438703
andrewrk
when I press Ctrl+C in the windows terminal during msbuild it says "attempting to cancel the build..." and then just hangs

1601438714
andrewrk
my goodness how hard is it to kill a process

1601438770
nikki93
;_;

1601438790
nikki93
i spent a good amt of time on windows in the past 2 years, and i'd basically use a weird hybrid of WSL and native .exes

1601438807
nikki93
like, WSL was basically my shell but i'd use cmake.exe (which would end up invoking actual VS compilers etc.)

1601438828
nikki93
i tried zig on windows rq recently and it was refreshingly easy to get running

1601438885
nikki93
gvim.exe's embedded terminal can actually launch WSL as a shell

1601440904
nikki93
iteration speed with wasm zig is really nice. build is basically instantaneous so --

1601441955
andrewrk
ha do you just have that on a timer?

1601442277
nikki93
andrewrk: nah i was using entr

1601442292
andrewrk
what's that

1601442293
nikki93
this is the command:

1601442296
nikki93
ls -1 *.zig | entr /bin/bash -c "echo 'building...' && zig build-lib -target wasm32-freestanding --release-small main.zig && echo 'built'"

1601442304
nikki93


1601442322
andrewrk
oh cool!

1601442328
nikki93
hope that was plaintext enough -- i'm on irccloud lol

1601442351
nikki93
yeah i run it in WSL on windows too xD

1601442353
andrewrk
I could use this as a nice shortcut when doing a live coding stream on trying to wire up hot code reloading into ELF compilations :D

1601442362
nikki93
yup :D entr is awesome

1601442755
nikki93
andrewrk: one thing to not is it just takes the name of a binary as its arg (plus rest args to send to it), so if you want to run multiple things you should do `/bin/bash -c "blah && blah && ..."`

1601443088
andrewrk
ok I

1601443108
andrewrk
using git blame to figure out who to praise

1601443123
andrewrk
ahh Vexu!

1601443708
nikki93
if i have a pure compute c lib, zig can compile that to wasm and link with it right?

1601443712
nikki93
ugh the lib may use malloc and so on hmm

1601443759
nikki93
it's this lib:

1601444408
andrewrk
nikki93, yes

1601444422
andrewrk
zig can also provide some libc functions for C programs for the wasm target

1601444432
andrewrk
I don't think we have malloc implemented yet tho

1601444466
andrewrk
maybe you would want to contribute that? you could try wiring it up to GeneralPurposeAllocator backed by std.heap.page_allocator (which does support wasm thanks to fengb)

1601444517
andrewrk
here's where you would add it:

1601444537
andrewrk
you can see that we provide strcmp, strlen, and an interesting implementation of strerror

1601444578
andrewrk
you can even test your code without contributing it upstream just by putting `export fn malloc` in your code

1601444602
andrewrk
try it and see what linker errors you get. if it's only a handful of functions, chances are it would be quite reasonable to provide them!

1601444614
andrewrk
I believe the -target you want is wasm32-freestanding-musl

1601450987
FireFox317
andrewrk, the windows failure is this flaky test case that we have been experiencing lately

1601451000
andrewrk
I believe it is

1601451023
andrewrk
FireFox317, windows tests passed locally for me :)

1601451024
FireFox317
ah that would explain the weird randomness indeed

1601451038
FireFox317
because sometimes it does work and sometimes it doesn't

1601451042
FireFox317
andrewrk, nice! :)

1601451058
andrewrk
I found one issue on macos, should be an easy fix

1601451563
nikki93
andrewrk: sweet thanks for the tips. hmm i've kinda wanted to have control over the allocations of this physics engine too so i'll think about how this could be wired up

1601451593
nikki93
like maybe i just wire some specific malloc/free that is eg. tied to scene duration in tbe game

1601451620
andrewrk
interesting, good to know that's a use case

1601451680
nikki93
yeah these thoughts are more nebulous but, in games it tends to be some entities that are static and stick around, while there are a few entities that tend to come and go more. and i've been wondering about having two diff allocators for the data of each kind

1601451983
nikki93
it was already kinda meh to me that (i use this physics engine in c++) that it does dynamic allocs for me like that while i keep most of my own actual game logic data more pooled and compacted. it does let u allocate kinda but it maintains pointers between the objs internally so i can't eg. just move them. i wish libs just parameterized over an id->data function (essentially a dereference op) and then spoke in ids and just

1601451984
nikki93
let you manage the data layout or sth (including moving objs around and compact)

1601452205
andrewrk
FireFox317, oof, I got the file name pattern wrong

1601452223
andrewrk
it's libfoo.1.2.3.dylib, not libfoo.dylib.1.2.3

1601452295
FireFox317
ah, yeah annoying version numbers :(

1601452568
FireFox317
andrewrk, so you are running the tests locally on a mac now? :D

1601452744
andrewrk
yeah. ran into another issue, about to find out if my fix worked

1601452890
andrewrk
it did. tests are cruising along again now :)

1601453418
FireFox317
nice! its really nice we have so much coverage tho

1601454304
andrewrk
all tests passed locally :D

1601454547
FireFox317
Hypeee! Andrew's big branch has been merged!!

1601454573
FireFox317
Congrats man! You deserve some beers and rest :P

1601454598
ikskuh
> Merged #6250 into master.

1601454613
andrewrk
woo hoo!

1601454631
andrewrk
apologies in advance for the regressions that I didn't find before merging. at least fixing them will be in .zig code

1601454648
andrewrk
there are some breaking changes btw

1601454653
ikskuh
:D

1601454717
FireFox317
andrewrk, did you ever had 60 PR's open on zig hahah?

1601454730
andrewrk
no I think this is peak

1601454748
FireFox317
with a good reason tho xd

1601454760
andrewrk
ok now which issues do I get to close >:]

1601454769
alexnask[m]
:D

1601454895
andrewrk
oh yeah alexnask[m] so now with llvm-enabled builds, at the link flush() you will have .lib files available for all the DLLs that need to be linked

1601454932
andrewrk
you could also choose to work on self-hosted codegen into .obj files, and rely on LLD as a linker

1601454947
andrewrk
although I personally find it satisfying to go straight to executable :)

1601454952
alexnask[m]
That is amazing :) I will start working on imports and exports for PE

1601455038
andrewrk
probably a bunch of issues can get labels modified now too -stage1 +stage2

1601455149
andrewrk
I have 45 github issues to file

1601455642
FireFox317
its so nice to browse through the zig code now using zls + vscode 'Jump to definitions' <3

1601455645
ikskuh
andrewrk: you're on a issue killing spree, very nice :D

1601455665
andrewrk
I think that's it actually. and now I have to file 45 new issues

1601455707
ikskuh
dang

1601455723
ikskuh
this means i have to be careful now :D

1601455726
andrewrk
it's ok, they're much easier than the ones that just got closed

1601455741
andrewrk
not all issues are created equal

1601455741
ifreund
\o/

1601456081
FireFox317
andrewrk, #1344 can be closed?

1601456311
andrewrk
that issue wasn't really valid anyway, it didn't actually articulate a problem

1601456426
andrewrk
ifreund, oh that glibc issue is solved now

1601456509
FireFox317
andrewrk, i'm just looking through issues seeing which one can be closed :P

1601456594
ifreund
andrewrk: excellent, that will make sticking with 0.7.0 nicer :)

1601456662
ifreund
though my WIP libwayland bindings now make heavy use of tdeo's opaque{} so I may be tempted to switch to master if that gets merged post 0.7.0

1601456945
andrewrk
does that mean you're strongly in favor of opaque {} ?

1601457006
ifreund
very

1601457046
ifreund
it makes writing bindings far cleaner since you can namespace stuff without wrapping opaque pointers in a struct

1601457055
andrewrk
alright well I need to take that vacation I promised myself but at this point I'm feeling pretty inclined to accept it

1601457093
ifreund
the previous impl was basically const Foo = struct { const Impl = @Type(.Opaque); impl: *Impl, };

1601457109
ifreund
and then you have to deal with having a wrapper struct everywhere

1601457154
ifreund
yes definitely take that vacation! would appreciate you giving it a look when you get back :)

1601457337
andrewrk
FireFox317, I remember for the last release you were really helpful getting various builds of zig-bootstrap to work

1601457354
andrewrk
there's an issue right now in the upcoming release that I could definitely use your help with if you're interested

1601457391
FireFox317
andrewrk, yes that's correct :) I would love it to help you with that again

1601457427
andrewrk
actually it's an issue with master branch even. somewhere between 0.6.0 and now, we started tripping an llvm assert for ReleaseFast and ReleaseSmall with the std lib tests

1601457447
andrewrk
the problem is that you can only detect it with a debug build of llvm so that it has asserts enabled which is reeeeeally slow. so that's why it doesn't get tested very often

1601457466
andrewrk
but it means basically that we're hitting UB in llvm code in ReleaseFast and ReleaseSmall builds for whatever code is triggering this

1601457478
andrewrk
and as sonic sez, That's No Good

1601457489
FireFox317
I think i can test that on the arm server, if it is still alive

1601457493
andrewrk
should be

1601457501
andrewrk
it's possible that it might or might not trip the problem

1601457571
FireFox317
so this is not specific to for example an arm/raspberry-pi zig-bootstrap build?

1601457687
FireFox317
are you planning on releasing all these tarballs again for 0.7.0 btw?

1601457714
andrewrk
yep hopefully we didn't regress any of them

1601457737
andrewrk
I think llvm 11 is releasing in a couple days so we have about a month to figure it out

1601457784
ifreund
hmm, I think I already found a regression:

1601457800
ifreund
tips on how to debug?

1601457851
FireFox317
so what would you recommend building regarding this llvm assert? 10 or 11?

1601457868
FireFox317
ifreund, i would start with `--verbose-link` because it is an lld failure

1601457886
andrewrk
ifreund, so libexpat.so is generated by your zig code?

1601457900
andrewrk
FireFox317, they both repro it

1601457908
andrewrk
as long as you have a debug build

1601457914
FireFox317
andrewrk, thanks :thumbsup:

1601457923
andrewrk
ifreund, err sorry  Ishould have just read the next line

1601457930
ifreund


1601457939
ifreund
no, this zig code linking expat and libc

1601457965
ifreund
building with the opaque{} branch rebased onto master

1601457971
andrewrk
oh I see. so zig built a glibc version that is too old

1601458015
andrewrk
does the output of the build-exe with `--show-builtin` look correct? with regards to the glibc version

1601458042
andrewrk
that should print the source of builtin.zig

1601458084
ifreund
nope, it has 2.17 while my system is 2.30

1601458102
andrewrk
ok well at least we're on the right track debugging here

1601458109
ifreund
I'll open an issue :)

1601458193
andrewrk
it gets it right on my system, so there's a clue

1601458212
andrewrk
this is also strange since this particular code was already self-hosted in master branch before the merge

1601458278
andrewrk
the detection code starts here:

1601458314
ifreund
nice, I can poke at it a bit to see if I can fix it

1601458345
ifreund
should also make sure the -femit-bin=foo thing solves that other issue I had

1601458409
andrewrk
yeah

1601458688
FireFox317
ifreund, so did you check the `uname -a` output?

1601458699
andrewrk
I'm kinda confused why that worked before. the code I linked above is unchanged in the branch I just merged

1601458727
ifreund
Linux trantor 5.8.12_1 #1 SMP Sat Sep 26 18:03:25 UTC 2020 x86_64 GNU/Linux

1601458737
ifreund
doesn't show libc version :/

1601458761
andrewrk
the libc version is determined by readlink() on the path you get if you `ldd /usr/bin/env` and choose the libc.so.6 one

1601458775
FireFox317
oh sorry, i thought it was about the linux version my bad

1601458827
ifreund
I think stepping through it in a debugger might be enlightening

1601459630
osa1
I'm trying to build zig from source. I have LLVM 10 installed but not in a standard location. Anyone know how to point cmake to that location? Currently I'm getting these errors:

1601459666
andrewrk
-DCMAKE_PREFIX_PATH

1601459700
osa1
Perfect, thanks

1601459853
osa1
It failed at 100% with this error:

1601459936
andrewrk
your system llvm has a bug, it is reporting the wrong value for llvm-config --system-libs

1601459956
andrewrk
if you build from source it works, or you can work around the issue. details for workaround here

1601460351
ifreund
wow zig runs pretty slow in valgrind :P

1601463614
bfredl
can zig into ASAN/UBSAN?

1601463619
bfredl
the llvm backend i suppose

1601465933
ikskuh
wellp. my project broke with #6250 :D

1601465947
ikskuh
andrewrk: do you want to have issues for everything i find?

1601466082
ifreund
ikskuh: is it #6469 ?

1601466122
pixelherodev
fWoot nice work!!

1601466139
ikskuh
nope

1601466159
ikskuh


1601466293
FireFox317
ikskuh, huh that's weird. how did it not build compiler_rt

1601466300
ikskuh
not sure

1601466300
FireFox317
Maybe a stale cache or something?

1601466305
ikskuh
maybe the caching system broke

1601466321
FireFox317
did you try removing all the cache dirs?

1601466321
ikskuh
i killed the local zig-cache

1601466325
ikskuh
now i'm killing rm -rf ~/.cache/zig/

1601466348
ikskuh
nope,still failing

1601466371
FireFox317
hmm

1601466799
ikskuh
i looked a bit at the source

1601466857
ikskuh
looks like the work item doesn't get queued

1601466958
FireFox317
ikskuh, `if (is_exe_or_dyn_lib and build_options.is_stage1) {` so for your project it is something else?

1601466975
ikskuh
yes, it's static lib :D

1601466987
FireFox317
well that explains the problem then :P

1601467051
ikskuh
error: unrecognized parameter: '--bundle-compiler-rt'

1601467052
ikskuh
dang :D

1601467074
FireFox317
i guess andrewrk changed the logic a bit

1601467082
ikskuh
yeah

1601467098
pixelherodev
Whelp, that probably breaks Thor too

1601467220
ikskuh
i'm tracking back the cause

1601467240
ikskuh
only explanation right now is that somewhere the propagation of the lib type is set to .Dynamic

1601467354
FireFox317
ikskuh, nah. It is just checking for an executable or a dynamic library. For a static library it just doesnt add the compiler_rt to the work queue

1601467383
ikskuh
yes

1601467385
ikskuh
but!

1601467416
ikskuh
the compiler_rt should be linked only if it's a dynamic lib or an executable ;)

1601467429
FireFox317
ahh, is that true tho?

1601467576
ikskuh
i think i found the error

1601467616
FireFox317
nice!

1601467655
ikskuh
the link mode passed to the File is determined differently from the one passed to the compilation

1601467868
FireFox317
which is maybe also causing #6469

1601467876
FireFox317
because that also looks at link_mode

1601468244
FireFox317
yeah so i guess when building zig, it uses the self-hosted code (which is incorrect) and thus it sets the builtin.link_mode to .Static (regarding #6469)

1601468672
ikskuh
FireFox317: yeah, it's building my static lib as a dynamic file

1601468806
ikskuh
i'll try debugging it later

1601475816
mkchan
why can't a struct depend on an optional of itself?

1601475833
ikskuh
mkchan: the optional is "just" struct { value: T, is_null: bool }

1601475835
fengb
Because memory layout doesn't make sense

1601475838
ifreund
an optional pointer would be fine

1601475845
ikskuh
so an optional is "sizeOf(T) + 1 bit"

1601475857
pixelherodev
Root reason: ecause it'd be infinitely recursive

1601475860
pixelherodev
because*

1601475887
fengb
You need enough memory to store fields + optional + itself

1601475899
fengb
And itself == fields + optional + itself

1601475908
pixelherodev
`struct a { b: a }` <- it's impossible, fundamentally, for any object of type a to exist

1601475992
fengb
In theory... it can store itself if itself is a zero sized type :P

1601476018
fengb
Weirdest unit type ever >_>

1601476020
mkchan
yes, i ended up with an optional pointer, but now problem is that i can't create a compiletime-known instance of said struct:

1601476079
mkchan
obviously it's a *const MorseTree and not a *MorseTree, do i really have to use an allocator during comptime processing?

1601476127
mkchan
(ignore my lack of base case for recursion)

1601476164
pixelherodev
Pointers can be comptime known if they're pointing to comptime objects, I think?

1601476219
fengb
I think you can force it to be runtime by assigning a variable: `var tree = MorseTree{}; self.dot_suffix = &tree;`

1601476238
mkchan
won't it go out of scope?

1601476251
fengb
That's true regardless of you assigning a temp variable or not

1601476262
fengb
But at comptime, there's a garbage collector

1601476271
fengb
for stack variables

1601476315
mkchan
so if i were doing this at runtime, the obvious choice is an allocator because i'll just never free that memory until the end of the program. at comptime, it's really unclear

1601476362
mkchan
good news is that suggestion seemed to work, let me write some tests

1601476606
pixelherodev
mkchan: if you're never freeing the memory for the entire duration, then... why not just stack in main()?

1601476613
pixelherodev
Or, a global?

1601476620
mkchan
it is a global

1601476624
mkchan
line 43

1601476626
pixelherodev
Why does it need to be allocated?

1601476680
mkchan
no, you're misunderstanding what i'm saying

1601476712
mkchan
if it's an optional pointer, and at runtime, if i do this: var tree = Tree{}; ptr = &tree; the ptr will contain an invalid value

1601476724
mkchan
at runtime i'd have to allocate and use that in the ptr

1601476790
ifreund
it would only be invalid if the `tree` variable went out of scope

1601476792
mkchan
anyway, i updated the gist with working code, thanks fengb

1601476802
mkchan
ifreund: if you read the code in the gist, it does go out of scope

1601476815
mkchan
but at comptime apparently that doesn't matter

1601476835
ifreund
indeed, comptime works differently

1601476860
mkchan
so at comptime these things are effectively shared_ptrs

1601476896
ifreund
they are effectively garbage collected

1601476916
ifreund
they exact method isn't important

1601477051
mkchan
so coming back to my initial question, "why can't a type depend on an optional self", isn't this a way to implement that feature?

1601477072
mkchan
oh but i suppose it's implicit allocation at runtime hmm nvm then

1601477088
tdeo
yeah no it would be a very big change

1601477096
ifreund
stucts must have a complie time known size

1601477114
mkchan
yeah it fails the basic tenet of no implicit allocation anyway

1601477154
ifreund
idk how it would be implicit allocation

1601477158
mkchan
but this was interesting, comptime implementation stuff sure is interesting

1601477293
mkchan
because the implementation i mentioned was basically implementing an optional as a ptr and assigning to the optional would be an allocation

1601477375
ifreund
oh you were saying the compiler would do that for you?

1601477387
ifreund
yeah that violates a lot of what zig is about :D

1601477400
mkchan
yeah exactly

1601477477
mkchan
btw, do you guys maintain a "Zig by example" type thing? like a cookbook

1601477519
mkchan
the docs do a lot of it for the basic features but a repo for common use cases would be nice

1601477543
alexnask[m]
ziglearn.org is the closest thing to this

1601477580
alexnask[m]
But this is more of a tutorial deal, not exactly the type of content you are talking about

1601477630
mkchan
yeah, like i imagine an example way to implement a linked list would be useful for people to learn this concept i just stumbled upon

1601477667
ikskuh
mkchan: then you're maybe searching for std

1601477680
ikskuh
the zig stdlib implements a lot of common patterns in a quite well-readable manner

1601477718
ifreund
lack of macros and overal simplicity make it the most redable std I've ever seen

1601477848
justin_smith
nikki93: that stuff about alloc lifetime could likely be simplified via ECS. Have a minimal struct of identifiers for the "game objects", then eg. a room can have a mapping from game-object id to resources that can be disposed when that room is out of scope or that object leaves that room

1601477867
mkchan
oh yeah, just a week or two back i was trying more comptime hackery and someone here mentioned the std.meta.fields function. i think it was fengb . cleanest, easiest to read metaprogramming i've ever seen

1601477891
justin_smith
and if a game object is destroyed / removed from the game, you can walk each of the contexts and free things that index to it

1601477952
fengb
:D

1601478081
dbohdan
Are there any scripting languages implemented in Zig besides

1601478091
tdeo


1601478135
ifreund


1601478182
dbohdan
Thanks!

1601479678
FireFox317
andrewrk, i managed to hit the assert in llvm :) However weird thing is it only happends when i do `zig build test-std` but not when i do `for f in ../lib/std/*.zig; do if [ "$f" == "../lib/std/std.zig" ] ; then continue ; fi ;  echo "$f" ; ./zig test -OReleaseFast "$f"; done`

1601483441
FireFox317
I think we weren't hitting this before just because the amount of tests increased, thus at some point this single test executable gets to big and llvm doesn't like that

1601483513
fengb
Industry: write lots of tests! LLVM: but not too many 😭

1601483602
FireFox317
I guess they dont like it that we put them all into a single binary haha

1601484572
ikskuh
FireFox317: i just know that zig wrongly assumes that my static lib is dynamic

1601484578
ikskuh
and i have no idea where this is introduced

1601484652
FireFox317
Do you have a small repro? Just `zig build-lib -static`?

1601484702
ikskuh
not yet

1601484707
ikskuh
will try next

1601484707
ikskuh
debug printing is the best printing

1601484707
ikskuh
just introduced some prints :D

1601484754
FireFox317
ikskuh, i see you were building c files right?

1601484760
ikskuh
yeah

1601484842
justin_smith
is it expected that the compiler wouldn't be able to do a floating point multiply at comptime?

1601484860
justin_smith
I want to populate a table for DSP when compiling, if possible

1601484901
justin_smith
I guess I can use an inline literal array, but it would be more elegant to just put my formula for making the array in the code

1601485143
FireFox317
justin_smith, floating point at comptime should be possible yes

1601485163
justin_smith
OK then I need to narrow why this is failing, thanks

1601485282
justin_smith
so breaking it up, the error doesn't happen on the floating point op, it happens in the array fill code

1601485331
justin_smith
I have an array of f64 called fade_in (a volume curve): for (fade_in) |*item, i| {

1601485363
justin_smith
using item.* to assign a value to an array index is failing

1601485488
FireFox317
justin_smith, hmm okay. Can you post a small snippet of the code on a gist/postbin or something?

1601485500
justin_smith
FireFox317: absolutely

1601485732
justin_smith
FireFox317: error happens on the item.* = scale line

1601485793
FireFox317
justin_smith, i think there is some context missing. Where is fade_in defined?

1601485804
FireFox317
and is this at global scope or function scope?

1601485814
justin_smith
it's an array pub var fade_in: [curve_length]f64 = undefined;

1601485823
justin_smith
global scope

1601485832
FireFox317
okay

1601485882
justin_smith
currently trying a while, instead of the fancy array pointer / index syntax to see if that helps

1601485897
FireFox317
you might be able to see why this is going wrong. So fade_in is defined as a `var`, which means that it is runtime known. It has to be defined as a `const`. One moment while I type up an example

1601486008
FireFox317
It basically comes down to defining it as const, and then using a block to initialize the list and break the value from the block

1601486031
justin_smith
oh, it was const at first and I think I misunderstood the error I got

1601486047
justin_smith
but using while instead of for gets rid of the if block, which I actually like...

1601486123
justin_smith
FireFox317: "error: cannot assign to constant" on the same pointer assignment

1601486132
FireFox317
justin_smith,

1601486161
justin_smith
FireFox317: oh, thanks much

1601486226
FireFox317
justin_smith, you are welcome! The code inside the block has to be executed at comptime because it is a constant global.

1601486255
justin_smith
great, that's exactly what I want (why use CPU cycles on startup filling in tables...)

1601486282
FireFox317
yeah zig solves that really nice with the comptime feature :)

1601487093
nikki93
justin_smith: i am literally using an ecs :) i was just talking about the physics engine in that case

1601487137
justin_smith
nikki93: yeah, I think I was mostly learning out loud how well an ecs could align with ownership / lifecycle management

1601487145
nikki93
the physics engine i'm use kinda mallocs and frees stuff on its own for its objects, but i just have a move-only handle on its stuff (in c++) so the lifetime is managed. but unlike the rest of the data in the ecs it's not compacted

1601487175
justin_smith
I've used something like an ecs before, but in a garbage collected language, but I'm seeing now how a well designed ecs could really simplify lifecycle logic

1601487181
nikki93
yeah for sure. it was more about the compaction than the lifecycle. bc. the physics engine internally uses ptrs vs some id system i can't move stuff around

1601487221
nikki93
for the rest of the "components" when something is removed, the last element is moved down into its place and stuff remains compact

1601487237
nikki93
which only works by only accessing things thru id and no pointers

1601487303
nikki93
i agree tho: in games lifetime is actually part of the gameplay logic. and having allocation hang off of that makes a lot of sense vs. gc.

1601487472
nikki93
zig's reflection and comptime features can lend itself to some nice stuff here that i'm excited to try :o

1601487823
justin_smith
nikki93: now I'm thinking I can use some ECS concepts for properties of my synth DSP (instead of having to go add a pan to every object for a stereo version, I can have a panner table indexed to objects to make them stereo...)

1601487856
nikki93
yeah i think it's a good architecture for a lot of realtime system kinda stuff haha

1601487868
FireFox317
justin_smith, is your code available? DSP stuff is interesting :P

1601487897
nikki93
i'm curious about applying it to xplat ui apis -- like having a layout component and hierarchy component, and specific components for each concrete platform and xplat components they read from

1601487905
justin_smith
FireFox317: this is a very young project and my first time doing something other than example code, I do have a translation of the jack audio simple client though

1601487916
justin_smith
first time in zig that is...

1601487940
FireFox317
ah that was you too. Yeah i remember that example :)

1601487954
nikki93
justin_smith:

1601487960
FireFox317
no problem man! I will wait when it matures :D

1601488005
justin_smith
FireFox317: this is set up enough (with one in and one out) to throw some other logic that generates floats into there instead of memcpy for quick experiments

1601488005
nikki93
but yeah it does that thing where data lifetime automatic stuff just "works." eg. the physics body is automatically removed from the physics scene when a component is dropped

1601488043
FireFox317
justin_smith, ah i see. So you can just create your audio at that point indeed

1601488045
FireFox317
cool stuff

1601488105
justin_smith
yeah, the hard part is making a signal that is not objectively offensive to the ear (with jack you can plug into a filter / limiter in another program instead of the speakers directly at least - or even just plug into a spectrum analyzer instead of the speaker)

1601488133
justin_smith
it's much more civilized than using the sound card directly

1601488171
justin_smith
especially when debugging (plug into my daw to see a trace of the waveform, spectrum analyze etc. etc. and it's all timestamped)

1601488204
justin_smith
if I have suspicion about an internal signal, I can put it into a debug outlet and analyze that in parallel, why not!

1601488239
justin_smith
nikki93: looking at that c++ code now...

1601488397
nikki93
i have a video of the game itself somewhere to give an idea. but one of the nice things is how the Walk component is enabled/disabled on the Player to have them walk around

1601488506
nikki93
will find and post that video soon :)

1601488546
nikki93


1601489415
Snetry
hey, it seems to me that the merge of stage2-zig-cc broke exe.addCSourceFile()

1601489420
Snetry
can anyone else confirm?

1601489443
fengb
I think explicit c source file is removed

1601489470
Snetry
dang

1601489503
fengb
Was replaced with something

1601489507
tdeo
zig build in test/stage1/c_abi works for me, and that uses addCSourceFile

1601489533
Snetry
doesn't work for me

1601489536
Snetry
error: unrecognized parameter: '--c-source'

1601489980
Snetry
hmm, seems to be related to something with the way I build it

1601491589
FireFox317
Snetry, now zig just looks at the extension and figures out if it is a zig file or a c file

1601491893
pixelherodev
Neat

1601491910
pixelherodev
Okay, now that 6250 is merged, it's time for me to do more work on Zig :D

1601491931
pixelherodev
I think step one is fixing C header generation and any regressions I run into

1601491975
ifreund
sounds like a good plan

1601492021
pixelherodev
Especially because header gen is going to probably go through CBE now and I'm currently responsible for it

1601492206
pixelherodev
... oh. Right. Stupid sunuva... gah.

1601492218
pixelherodev
I guess I'm finally going to get around to maintaining Gentoo ebuilds for Zig

1601492226
pixelherodev
Because seriously, BLEEP LLVM.

1601492241
ifreund
amen

1601492253
pixelherodev
I have a patched LLVM installed, at least

1601492256
pixelherodev
Just need clang and LLD

1601492294
pixelherodev
Ah wait, clang is good now :D

1601492298
pixelherodev
Was missing the option for it

1601492303
pixelherodev
Just LLD, then?

1601492363
Snetry
yeah llvm is a giant pain sometimes

1601492499
ifreund
s/sometimes//

1601492529
ifreund
at least it optimizes pretty well

1601492539
pixelherodev
That's not a good tradeoff IMO

1601492546
pixelherodev
I prefer stability to performance, frankly

1601492559
pixelherodev
I also tend to prioritize compile-time performance over run-time

1601492571
pixelherodev
It's one reason I'm using C99 over Zig for new projects until stage2 is a bit more fleshed-out

1601492737
pixelherodev
For any other gentooers, git.sr.ht/~pixelherodev/gentoo has usable LLVM + Clang ebuilds patched to work with Zig :)

1601493173
ikskuh
FireFox317: debugging again

1601493289
ikskuh
finding:

1601493429
pixelherodev
`gdb` `watch`?

1601493506
ikskuh
i need to learn gdb better D

1601493512
ikskuh
is gdb watch a data breakpoint?

1601493674
pixelherodev
Basically, yeah

1601493867
ikskuh
ah

1601493917
ifreund
ikskuh: you see this?

1601493960
ifreund
or is that not related to what you're debuggind?

1601493968
ifreund
I haven't looked too closely yet

1601493979
ikskuh
i've found the mistake

1601493982
ikskuh
right now

1601494036
ikskuh
the logic enforced dynamic linking for static libraries

1601494039
ikskuh
when using glibc

1601494051
pixelherodev
Ahh

1601494058
pixelherodev
... I assume that's meant for *binaries*?

1601494074
ikskuh


1601494123
ikskuh
it's because i use ("./

1601494126
ikskuh
linkSystemLibrary

1601494137
ikskuh
which will cause if (options.system_libs.len != 0) to be true

1601494143
ikskuh
which enforces dynamic linking

1601494150
ikskuh
which should still be false for static libraries…

1601494211
ikskuh
i think the return value should be "break :dl (options.output_mode == .Exe);" then…

1601494242
pixelherodev
I think I've got LLD set up properly

1601494247
pixelherodev
Just need to test it, then I can work on a Zig ebuild :)

1601494263
pixelherodev
> [ebuild   R    ] sys-devel/lld-10.0.1::pixelherodev [10.0.1::gentoo] USE="shared-libs%* -test" 0 KiB

1601494268
pixelherodev
We'll see how well this works :)

1601494324
ikskuh
andrewrk: can you confirm the logic change here?

1601494476
pixelherodev
Woot

1601494479
pixelherodev
LLD is good :)

1601494507
pixelherodev
Got Zig stage1 building on Gentoo for the first time in months :D

1601494513
pixelherodev
and this time I saved the work!

1601494544
pixelherodev
ARGH

1601494547
pixelherodev
`: CommandLine Error: Option 'mc-relax-all' registered more than once!`

1601494555
pixelherodev
I

1601494840
Snetry
its on the Troubleshooting Wiki page

1601494842
Snetry


1601495138
pixelherodev
Probably need to rebuild Clang :(a

1601496061
FireFox317
xq ah nice find! But can we build a static library and link libc together when using -gnu? Only with -musl right?

1601496517
FireFox317
ikskuh, i mean ^^

1601496831
pixelherodev
FireFox317: no

1601496833
pixelherodev
Only with musl

1601496842
pixelherodev


1601496860
pixelherodev
But glibc sucks so they aren't really static and they remain largely dependent on the host system

1601496992
tdeo
andrewrk: not sure if it'll help, but it might be worth trying libgc on ci for stage1

1601496996
tdeo
nix uses it to reduce memory on evaluation

1601497000
tdeo


1601497125
FireFox317
ikskuh, pixelherodev, ah nevermind. I confused system_libraries with libc. Ofcourse you should be able to statically link system libraries

1601497243
ikskuh
<FireFox317> xq ah nice find! But can we build a static library and link libc together when using -gnu? Only with -musl right?

1601497259
ikskuh
you can also create static libraries that require to be dynamically linked against libc later

1601497304
ikskuh
what the heck does --enable-websql?!

1601497435
ikskuh
seems to work…

1601497441
ikskuh
my workbench builds again

1601497458
pixelherodev
Nice

1601497465
pixelherodev
... fudge it

1601497469
pixelherodev
Using a static build for now

1601497478
pixelherodev
I mostly do stage2 work anyways

1601497571
FireFox317
ikskuh, Nice! PR incoming? :P

1601497641
ikskuh
yeah :D

1601497647
ikskuh
i test it a bit more though

1601497724
pixelherodev
Wow stage2 is bigggg now

1601497759
pixelherodev
I wish stage1 could break down files within the cache

1601497764
pixelherodev
Cache by function instead of by file

1601497890
andrewrk
one final thing before I go on vacation for a few days

1601497900
ikskuh
andrewrk: please merge my PR :D

1601497906
andrewrk
Please welcome Jakub Konka to the Core Zig Team!

1601497912
ikskuh
well, after CI :D

1601497914
alexnask[m]
Nice!

1601497915
ifreund
\o/

1601497916
fengb
🎉

1601497922
ikskuh
whooo! \o/

1601497930
Snektron
very nice

1601498010
pixelherodev
Nice!

1601498025
pixelherodev
They here to be pinged with congratulations?

1601498041
pixelherodev
andrewrk: enjoy your vacation!

1601498061
pixelherodev
I can't speak for the rest of us, but I'll certainly try to push that PR count higher for when you return ;)

1601498087
ifreund
hmm, -femit-bin=foo stops --enable-cache from causing the cache path to be written to stdout

1601498109
Snektron
yea enjoy your time off

1601498112
ifreund
this explains why my attempt to add -femit-bin=foo support to the bulid system earlier today failed

1601498192
pixelherodev
andrewrk: does the mailing list accept patches as an alternative to GitHub PRs? Or is it purely for discussions?

1601498201
andrewrk
Vexu, Alex, and Jakub are perfectly capable of merging PRs, especially bug fixes. I'm confident I can leave in peace and not block everyone from getting things done :)

1601498217
andrewrk
toodles

1601498243
pixelherodev
Enjoy your break!

1601498247
alexnask[m]
ciao : )

1601498247
ifreund
o7

1601498264
pixelherodev
o7

1601498265
pixelherodev
Uh oh

1601498275
pixelherodev
Now there's a double oh seven loose!

1601498413
ikskuh
andrewrk, have fun!

1601498598
fengb
Have fun!

1601498708
pixelherodev
Hmm

1601498727
pixelherodev
Probably safest to stick to PRs for now, at least until I can confirm that anyone else uses the list enough to merge in patches from it

1601498988
ikskuh
whew

1601498991
ikskuh
what a write-up :D

1601499131
ikskuh
FireFox317:

1601499136
ikskuh
look at this repro build.zig

1601499140
ikskuh
it's standalone :D

1601499292
pixelherodev
` const we_are_testing_this_with_stage1_which_leaks_comptime_memory = true;` Haha

1601499306
pixelherodev
I think libgc might be a good call ;)

1601500171
pixelherodev
... MSVC CI is OOMing.

1601500175
pixelherodev
On all new PRs, I think.

1601500259
alexnask[m]
Hopefully 718a659773776de47e8ce6ba80da663539572056 will fix this

1601500273
alexnask[m]


1601500432
pixelherodev
ah lol

1601500441
pixelherodev
~~Graveyard~~

1601500778
pixelherodev
I wonder how hard libgc integration would be...

1601501039
nikki93
could u just use it as an allocator and have dealloc noop?

1601501078
nikki93
or i guess, have dealloc still free but you also don't need to dealloc

1601501237
pixelherodev


1601501240
pixelherodev
Drop-in malloc replacement

1601501255
tdeo
i already posted a patch above

1601501271
tdeo


1601501284
tdeo
no idea how well it works

1601501356
pixelherodev
not tested yet?

1601501366
pixelherodev
oh right, I wanted to ping you about something last night... uh

1601501368
pixelherodev
uhhh

1601501370
pixelherodev
what was it...

1601501398
tdeo
i mean it builds and runs, but i haven't measured memory usage

1601501409
pixelherodev
A PR!

1601501412
tdeo
pixelherodev: i saw you were talking about the varargs pr but forgot if you actually asked anything

1601501417
nikki93
pixelherodev: o yeah i'm familiar with libgc, was jw if it makes sense to actually use as an std.Allocator. like impl an allocator that uses it

1601501421
pixelherodev
Ahh, I remember now!

1601501426
pixelherodev
tdeo: does the va_list PR work?

1601501429
nikki93
i guess you were asking abt using it for zig's internal allocations too tho

1601501443
pixelherodev
nikki93:

1601501459
tdeo
it works, the remaining issue is just how to use it portably

1601501460
pixelherodev
tdeo: work in the sense that it's usable on x64 POSIX systems

1601501463
pixelherodev
Ahh cool

1601501463
tdeo
yes it is

1601501466
nikki93
got it

1601501474
pixelherodev
tdeo: is it rebased onto master yet? :P

1601501486
tdeo
don't think so yet

1601501490
tdeo
what are you using it for?

1601501637
tdeo
it's rebased now, probably works

1601501778
pixelherodev
tdeo: I'm not anymore, actually :P

1601501784
pixelherodev
I redesigned the C API for my project instead lol

1601501794
tdeo
yeah that's probably better

1601501814
pixelherodev
Now it just does e.g. `thor_load_argument_int(thor, index, value)`

1601503296
Piraty
is zig supposed to work on archs other than x86?

1601503304
tdeo
yes

1601503351
Piraty
so this is wrong:

1601503372
Piraty
building it on aarch64 just now

1601503378
tdeo
i'm not sure how well supported cross-compiling stage1 is

1601503404
Piraty
that template has nocross=yes

1601503421
pixelherodev
it's decently well supported, I believe

1601503435
Piraty
building on my pi3, stripping took ages

1601503436
pixelherodev
the official bootstrap repo for all supported targets is on hold until at least 0.8 IIRC, but it should still be possible

1601503449
pixelherodev
Piraty: ... why not cross compile th oh right

1601503463
Piraty
?

1601503466
pixelherodev
Yeah no, cross-compilation is very well supported.

1601503500
Piraty
i don't maintain that template but i want to build zig on my pi, so i took a look and came here for quick reference

1601503504
tdeo
> It is not planned to ever support cross compiling stage1, which is what this pull request is trying to do.

1601503508
tdeo


1601503512
Piraty
let's see if i can make it crossbuild

1601503544
pixelherodev
Ah. Huh.

1601503577
pixelherodev
ah right

1601503595
pixelherodev
I think the bootstrapping process doesn't support cross-compilation, only the produced compiler does

1601503599
ifreund
yeah there's no reason that template needs to be nocross or x86 only, I was just too lazy to fix that when updating to 0.6.0

1601503600
Piraty
got the reason for nocross...

1601503618
Piraty
hi ifreund

1601503625
ifreund
o7

1601503634
Piraty
what does that mean

1601503657
ifreund
that issue may be fixed by now, that zig version is fairly outdated

1601503923
ifreund
why is nopie set as well?

1601503976
Piraty
no idea yet, gotta do the crossbuilds first

1601504028
ifreund
there are static tarballs for aarch64 from the ziglang website by the way if you just want to get going :P

1601504068
Piraty
xbps will finish determining the runtime deps eventually

1601504100
Piraty
it slowly iterates over all files in there, which are about 8.5k

1601504111
ifreund
oof

1601504145
ifreund
yeah zig ships source code for a bunch of libcs to make the cross compilation magic work

1601504172
Piraty
i know and i like it

1601504194
Piraty
saves all the usual hazzle from making sysroots available to a build

1601504228
Piraty
ifreund: why's there no zig stage2 in Void?

1601504259
ifreund
stage2 didn't ship with 0.6.0, real work on it started just after that release

1601504289
ifreund
0.7.0 will ship with an incompleted stage2, the goal is to have a complete stage2 for 0.8.0

1601504329
ifreund
0.7.0 should be released in the month after llvm 11 releases fyi

1601504400
Piraty
ok

1601504413
ifreund
so removing nopie didn't break anything afaik

1601504416
Piraty
so zig stage1 from cpp code is the best to get

1601504433
Piraty
ask duncaen, as the initial commits says it's his work

1601504460
pixelherodev
Piraty: stage2 is, uh, not exactly usable yet

1601504462
Piraty
so it built on aarch64-musl

1601504467
pixelherodev
There's some very

1601504472
ifreund
nah xtreme added the nopie afaik

1601504490
ifreund
so I guess we'll never know

1601504526
Piraty
so the template is correct in defining it to be nocross

1601504570
Piraty
pixelherodev: might be you misunderstood me earlier. it's about (cross) compiling zig , not using zig to crosscompie

1601504576
pixelherodev
Piraty: yeah, I got that

1601504582
pixelherodev
> I think the bootstrapping process doesn't support cross-compilation, only the produced compiler does

1601504593
Piraty
ok so we're on the same page

1601504608
Piraty
but it's not limited to x86 so that requires a fix

1601504614
ifreund
oh I totally saw an issue in void-packages about this recently

1601504638
Piraty
can you link it

1601504639
ifreund
Piraty:

1601504646
Piraty
that was fast

1601504648
Piraty
1s

1601504655
ifreund
and there's a PR too :)

1601504676
Piraty
will look at it in a few days again, gotta go

1601504682
Piraty
good work @zig people

1601504696
pixelherodev
I believe the official term is "ziguanas" :)

1601504704
ifreund
take off every zig!

1601505075
jjsullivan__
Piraty, that PR was my doing if you wanted to know anything

1601505223
jjsullivan__
I also submitted the bootstrap patch upstream, just a little change to the cmake so you can use the llvm dynlibs on the target

1601505713
jjsullivan__
**sorry, not just me, ericonr pulled through for testing armv6

1601505906
nikki93
wondering if to try sth like indirect dispatch for opcode vm things using tail calls haha

1601507884
qeeg_
hey, i've installed all the packages necessary to build zig from the arch linux repos (clang, lld, llvm, and llvm-libs), but cmake still can't find clang's libraries

1601507891
qeeg_
what exactly am i doing wrong?

1601508097
ifreund
qeeg_: on arch you need a special cmake flag due to how they package llvm: -DZIG_PREFER_CLANG_CPP_DYLIB=ON

1601508110
ifreund
see the PKGBUILD for the zig package in the arch repos

1601508116
qeeg_
ah, okay, thanks

1601508168
ifreund
no problem! I don't even use arch, this just comes up fairly often :P

1601508398
qeeg_
okay, now when trying to build stage2 i get this "error: linking against dynamic libraries not yet supported"

1601508406
qeeg_
which... seems a bit odd

1601508624
ifreund
this is with master zig?

1601508698
ifreund
a very large branch porting linking among other things from c++ to zig was merged in the past 24 hours

1601508753
ifreund
stage2 seems to have built fine for me though

1601508803
qeeg_
yeah this is with master zig

1601508884
ifreund
so you built stage1 with cmake successfully and then ran zig build using it?

1601508899
qeeg_
yep

1601508927
qeeg_
should i have run zig build from the stage1 build dir or another directory?

1601508964
ifreund
from the root of the repository

1601508975
ifreund
though idk maybe it doesn't matter

1601509035
pixelherodev
I do it in build usually

1601509036
qeeg_
tried that too

1601509038
pixelherodev
Shouldn't matter

1601509041
qeeg_
same thing :/

1601509046
pixelherodev
What arch?

1601509182
qeeg_
x86-64 arch linux

1601509292
qeeg_
weird, removing the -Denable-llvm fixes it

1601509374
pixelherodev
LLVM is needed for stage1...

1601509379
pixelherodev
ah wait

1601509383
qeeg_
yeah this is stage2 i'm compiling :/

1601509386
qeeg_
*:p

1601509389
pixelherodev
Nah, I meant

1601509394
pixelherodev
there's three stages now

1601509398
qeeg_
i know

1601509400
pixelherodev
stage0, which is built as part of the stage1 process

1601509407
qeeg_
ah okay

1601509409
pixelherodev
stage1, which contains a lot of stage2 code

1601509417
pixelherodev
that's built by stage0, and links against LLVM I believe

1601509423
pixelherodev
then stage2 is built by stage1?

1601509430
pixelherodev
Unless... I think 6250 may have changed it

1601509432
qeeg_
for some reason stage2 can't compile itself though, gives me this error build_runner.zig:1:1: error: no entry point found

1601509432
qeeg_
attempt to use null value

1601509434
pixelherodev
so stage0 doesn't exist

1601509442
pixelherodev
Ah yeah, no, stage2 can't nearly compile itself

1601509446
pixelherodev
It's not close to ready for that

1601509453
pixelherodev
stage1 is needed for a reason

1601509457
qeeg_
ah

1601509467
pixelherodev
Stage2 has only been undergoing serious work since 0.6

1601509469
qeeg_
where can i start helping with getting it to compile itself?

1601509472
pixelherodev
it's intended to be released for 0.8

1601509482
pixelherodev
The first step is to get involved, which you already have :)

1601509498
pixelherodev
Maybe look for "contributor friendly" "stage2" issues on GitHub

1601509499
qeeg_
no, i mean like, where's the code i can hack on?

1601509500
qeeg_
ah okay

1601509512
pixelherodev
Might be a good idea to mention intent to work on it in here

1601509521
pixelherodev
I'm working on CBE stuff, and I know some others are working on the various linker backends

1601509530
pixelherodev
So it's a good idea to avoid stepping on each other's toes :)

1601509559
qeeg_
cbe stuff?

1601509615
pixelherodev
C backend

1601509629
pixelherodev
Want me to give you a quick rundown of how the compiler works?

1601509634
pixelherodev
I have... enough time for that

1601509636
pixelherodev
Probably.

1601509737
ifreund
do we have something in the std that will tell me if a string is a valid zig identifier or not?

1601509755
ifreund
or should I just wrap all the identifiers I generate in @"" :P

1601509782
tdeo
<

1601509796
ifreund
thanks

1601509820
pixelherodev
ifreund: why

1601509823
tdeo
ah right predefined stuff won't matter since it won't let you shadow it

1601509836
qeeg_
ah

1601509853
ifreund
pixelherodev: it's ugly to read, and people will want to read the generated code

1601509865
qeeg_
well, maybe i'll just start fixing tests that fail on stage2?

1601509906
pixelherodev
qeeg_: that's a lot harder than it sounds

1601509912
qeeg_
oh?

1601509914
ifreund
what part of the compiler are you interested in? Higher level AST stuff? x86_64 codegen?

1601509917
pixelherodev
You can't fix something if you don't understand why it's broken

1601509923
pixelherodev
ifreund's question is on point, too

1601509930
pixelherodev
ifreund: fair

1601509947
qeeg_
i'm not sure, i've never worked on a compiler before o.o

1601509970
qeeg_
i've tried to get into it, but i've never really understood any of it

1601509996
pixelherodev
qeeg_: want me to give that rundown? That might help you decide what you're interested in

1601510002
ifreund
me neither. My way to get started on stage2 was to start implementing a backend for wasm

1601510003
qeeg_
sure

1601510022
tdeo
i've been reading through stage2 and trying to understand

1601510022
pixelherodev
Do you know the basic terms? Actually, better idea: if you don't understand something, just ask

1601510044
ifreund
this involved reading and understanding a lot of the wasm spec, and then reading and understanding lots of the stage2 code before I could actually write any code of my own

1601510050
qeeg_
i uh, have NO idea how compilers work

1601510054
qeeg_
i know how emulators work!

1601510054
pixelherodev
Ah, okay

1601510057
qeeg_
but not compilers

1601510058
pixelherodev
Do you know what an AST is?

1601510072
qeeg_
abstract syntax tree, but i have no idea what that actually means

1601510083
qeeg_
or how to make one

1601510089
pixelherodev
Basically, the

1601510090
qeeg_
or what to do with one once you've made it

1601510093
qeeg_
i'm a HUGE noob at this

1601510098
pixelherodev
We all were once

1601510101
bartwe_
o hi

1601510124
pixelherodev
AST is basically just a data structure which exactly represents source code

1601510152
qeeg_
okay

1601510152
pixelherodev
It's possible to take the AST and derive the original source - and this is basically how `zig fmt` works. It reads in the code into an AST, looks it over, adjusts it, and writes it back out

1601510156
qeeg_
but what do you do with it?

1601510171
pixelherodev
`astgen.zig` takes in the AST and produces "IR"

1601510186
ifreund
well, your end goal is machine code for a target cpu

1601510188
pixelherodev
IR, or intermediate representation, can be thought of (inaccurately) as abstract assembly

1601510216
pixelherodev
The IR undergoes semantic analysis - type checking, for instance - and is then passed on to codegen

1601510223
pixelherodev
codegen takes IR and produces machine code for a specific target

1601510229
pixelherodev
AMD64, aarch64, wasm, etc

1601510237
pixelherodev
(or, in the case of the C Backend [CBE], C code)

1601510255
pixelherodev
The machine code is sent through the *linker*, which produces a binary (ELF on Linux, .exe on Windows, etc)

1601510305
pixelherodev
I can direct you to a much simpler (and worse) compiler for a totally different language, if that helps get some idea - it's much smaller, and it's in C, if that helps

1601510345
qeeg_
the "it's in C" part doesn't really help much, plain C is often quite confusing for me :p

1601510362
qeeg_
honestly, i kinda wanna get into code optimization work

1601510371
qeeg_
since that can probably translate well into my emulator work

1601510390
pixelherodev
Optimization isn't really a priority right now :P

