1595031563
frmdstryr
I using @fieldParentPtr still the "zig" way to do interfaces or is there something better now?

1595032005
leeward
frmdstryr: Still the way, unless you want to use a library like

1595032155
frmdstryr
Interesting, thanks

1595033437
frmdstryr
leeward: how far did you get with the msp432?

1595036094
leeward
frmdstryr: Not super far. I generated something with --emit-asm, added a line, and linked it with gnu ld, and it ran. I could probably skip the "add a line" step if I tweaked the linker script, but I couldn't get clang to generate an msp430 executable directly from C code (linker issues).

1595036128
leeward
I wanted to get llvm to generate something before I went fiddling with linker scripts.

1595036179
leeward
On the plus side, Zig can emit a single instruction for `volatile_ptr.* |= 1` while gcc and clang both emit 3.

1595055189
GreaseMonkey
0.6.0, riscv32-freestanding-none, using QEMU's version of the SiFive-E platform for the time being: currently trying to get the machine trap vector working, and i can either give it a pointer which doesn't exist, or i can give it the address to the function which ends up being null

1595055230
GreaseMonkey
never mind i need to somehow align the function

1595055291
GreaseMonkey
yeah i needed align(4), problem solved

1595055777
leeward
\o/

1595059423
_hl_
A couple days ago I asked here about converting an enum to an error set. I have since (RSI is a pain...) gotten around to implementing that using some comptime hacks if anyone is interested in that sort of thing:

1595059465
_hl_
This is useful for working with C libs that use enums for their error codes

1595067664
scriptdevil
a question about standard docs. Is there a reason andrewrk decided to only generate docs for functions which are "reachable" from tests or code? Why not simply generate entries for every function in source files?

1595067690
ikskuh
scriptdevil: because the stddocs are based on the semantic analysis of the source

1595067715
ikskuh
this means that the docgen does not "see" the unused functions

1595067736
ikskuh
the plan is to have multiple analysis runs, merge the results of those and output that as a merged documentation

1595067749
ikskuh
so you can see the differences in function signatures between different OSs

1595067792
scriptdevil
I saw that in the video from andrewrk. However, why does it need to be based on semantic analysis?

1595067815
ikskuh
because function signatures differ between OSes

1595067827
ikskuh
so you need to evaluate some comptime code

1595067848
scriptdevil
Aah - comptime code. That is what I was missing.

1595067892
scriptdevil


1595067912
scriptdevil
I understand that comptime is something most other languages don't have to deal with though.

1595067924
ikskuh
yep

1595067936
ikskuh
but there's nothing keeping you from generating docs from the source only

1595067945
ikskuh
there's even the zig parser already in std :)

1595067978
scriptdevil
I haven't done much Zig before, but I take it this is a neat "first" project for zig. Will give it a shot

1595068666
ifreund
that would be super neat to sse

1595068671
ifreund
s/sse/see/

1595069016
ikskuh
uuuh, that would be cool!

1595076151
Barabas
Hello

1595076185
ifreund
o7

1595076333
Barabas
I see var was changed/removed

1595076384
Barabas
Is there some place where I can find important changes?

1595076446
Barabas
This is the var 'type' for generic functions

1595076454
ifreund
there's been some effort to keep a running changelog here:

1595076549
Barabas
Cool, thanks

1595076617
Barabas
Seeing how it's not easy to replace all my instances of the var type I can see this is a good change =D

1595076825
ifreund
Barabas: zig fmt should do that for you

1595076920
Barabas
Oh... oh well, there wasn't too much that I had to fix

1595077103
Barabas
And all my code still works :)

1595078678
Sahnvour
Barabas: zig fmt can do the replacement for you

1595079439
KoljaKube
Is there a way of doing early exits with optional types without checking the presence of the value at every step?

1595079467
KoljaKube
Basically what I would want to do is `const f: ?Foo = mayFail(); if (f == null) return Err.Fail; useNonOptionalFoo(f);`

1595079731
ifreund
const f = foo() orelse return Err.Fail;

1595079838
KoljaKube
That too has the success in the middle and the failure at the end

1595079924
KoljaKube
Kotlin's compiler makes `foo` non-optional after a `if (foo == null) return`, basically the variable changes its type in the middle of a function

1595079945
ifreund
KoljaKube: f is non optional in my example

1595080038
KoljaKube
Ohh, sorry

1595080107
KoljaKube
OK, I guess that's the way to do it without magical type changes ;-)

1595080139
ifreund
indeed, it's much simpler :D

1595080241
KoljaKube
That it is, though maybe not as flexible

1595080301
ifreund
how so?

1595080523
KoljaKube
Not that I have a great use case for it at hand, but you can put an arbitrary amount of statements between the assignment and the "conversion" in Kotlin

1595080633
ifreund
How would that possibly be useful? I don't see it

1595080754
ifreund
well, maybe there are some ways to use that, but imo anything that requires that kind of control flow is smelly code

1595080943
KoljaKube
As I said, I don't have a great use case for it...

1595080999
KoljaKube
It just feels natural. No new syntax to learn, just "I checked here, it can't have changed, so it's definitly a value down here"

1595081203
ifreund
I get that, but it's implicit and not really in line with the philosophy of zig imo

1595081231
ifreund
it's new semantics not new syntax, which is imo worse

1595081262
ifreund
having the simplest semantics possible is critical for readability

1595081486
KoljaKube
Yeah, I think so too

1595081610
KoljaKube
But the downside is that the "opposite" of `x = xyz(); if (x) |xx| foo else bar` is `x = xyz() orelse bar; foo`

1595081625
KoljaKube
Which is not really symmetrical

1595081705
KoljaKube
And only works if bar is noreturn I guess

1595081917
ifreund
or of the same type of foo

1595081922
ifreund
*as

1595081947
ifreund
const num = foo() orelse 42;

1595081971
KoljaKube
Sure

1595082004
KoljaKube
I'm assuming that bar can also be optional?

1595082036
ifreund
yeah as long as the peer type resolution works out

1595082044
KoljaKube
So `x = foo() orelse { handleSomeStuff(); null }; domeSomeMoreStuff()` would also work

1595082089
KoljaKube
s/dome/do/

1595082218
ifreund
yeah, if x is ?u32 or whatever

1595082560
KoljaKube
Other topic. Do those C APIs you use in river also do that callback-functions-get-passed-a-context-pointer thing I am seeing quite often in C libraries?

1595082682
KoljaKube
Something like `LibContext* ctx = lib_initContext();` and LibContext's whatEverCallback has the signature `void whatEverCallbackFunc(LibContext*, ActualData*)`

1595082785
ifreund
yeah, there's either a void pointer that I need to cast or I'm passed a struct that I can call @fieldParentPtr() on to get my struct

1595082994
KoljaKube
Hmm

1595083017
KoljaKube
Not sure I completely understand if @fieldParentPtr fits my problem

1595083062
ifreund
what API are you trying to use?

1595083065
KoljaKube
I only get a pointer to LibContext, which is allocated within the library, and I can't put my own stuff in there

1595083116
KoljaKube
I have multiple cases of this, but currently I'm trying to create Wren wrappers

1595083155
KoljaKube


1595083278
ifreund
looks like wren explicitly eschews global state: "Wren has no global state, so all state stored by a running interpreter lives here."

1595083293
ifreund
comment on WrenVM in the header

1595083296
KoljaKube
Yeah

1595083332
ifreund
so I think they don't want your callback to access global state

1595083417
KoljaKube
My end goal is having my own zig version of WrenVM with some added stuff, but since I only get that WrenVM*, I'm looking for a way to from Wren* -> ZigWrenVM*

1595083473
KoljaKube
My latest thought was copying the whole WrenVM struct data into a struct of my own that starts with a WrenVM member, so that I should be able to safely @ptrCast

1595083518
ifreund
yeah that would work

1595083522
KoljaKube
Which, if I haven't overlooked something, should work, but feels hacky and needs that copy

1595083597
KoljaKube
I guess for @fieldParentPtr to work I would need to control placement of the actual WrenVM struct data as well, right?

1595083614
ifreund
though you'd probably need to read some of their code to make sure that doesn't break anything

1595083630
KoljaKube
Yeah, already doing that

1595083682
KoljaKube
So far every function accesses everything through that WrenVM*

1595083683
ifreund
if you want to use @fieldParentPtr on WrenVM you need to make a struct that has the WrenVM as a member

1595083754
ifreund
then you can call @fieldParentPtr(*MyStruct, "wren_vm_member", wren_vm_ptr) to get a pointer to your struct

1595083766
KoljaKube
OK, then I read the documentation right

1595083943
KoljaKube
Maybe I could also hijack the allocation callback to place-allocate the VM data into my struct

1595083960
KoljaKube
Also slightly hacky though

1595084019
KoljaKube
This would all be unnecessary if WrenVM contained just one `void* userdata`

1595084440
KoljaKube
Oh.

1595084442
ifreund
what global state are you trying to add that you need this struct for?

1595084484
KoljaKube


1595084496
KoljaKube
I'm mostly just playing around

1595084521
KoljaKube
I wanted to wrap the callbacks in zig and not pass around C library pointers

1595084532
KoljaKube
And maybe it would be interesting for allocators or somesuch

1595084615
ifreund
nice, well looks like that PR solved the issue

1595084709
KoljaKube


1595084786
KoljaKube
This is why up-to-date documentation is important. If it's not documented, I go to the source, but if it's documented, I tend to rely on the docs...

1595084852
KoljaKube
It's also why I don't write documentation at work, it makes one indispensable ;-)

1595084872
ifreund
depends on the language for me. For C/Zig i just read the soruce

1595085033
KoljaKube
C libraries yes, but I'm having a hard time reading libc

1595085040
KoljaKube
libc++ as well

1595085222
ifreund
yeah I do read man pages for libc, which are pretty great

1595085243
ifreund
not a chance reading libc++, I use cppreferenc.com

1595085446
KoljaKube
Don't know if you're the application-over-web kind of guy, but my wife used Zeal

1595085510
KoljaKube
I think it's pretty neat, especially if you switch between languages more often or have the library documentations available in it

1595085617
ifreund
does look neat, though I don't think I switch around enough to justify it

1595086535
KoljaKube
One advantage is having documentation available offline

1595086562
KoljaKube
My commute goes through a Funkloch ;-)

1595101479
leeward
Heh, reading

1595101629
Sahnvour
indeed, probably what is meant here is "template metaprogramming"

1595101738
leeward
It doesn't have a separate language for metaprogramming, which sets it apart from several languages.

1595101755
leeward
(not D, but hey, steal the good ideas)

1595102306
leeward
Finally got around to updating 5800; turns out the day job is actually pretty good at wearing me out.

1595108433
companion_cube
Sahnvour: that looks a lot like templates though, except with a better syntax

1595108546
oats
zig homoiconicity when? :P

1595108611
oats
hoping zig will eventually be a cleverly disguised scheme dialect

1595108687
companion_cube
without even closures, it's a long way away :D

1595114555
blinghound


1595114568
blinghound
I whipped up a little terrain generator using pure zig today

1595114575
blinghound
just thought it could be interesting

1595114702
blinghound
is anyone else working on a game engine or a graphics based app with zig?

1595115625
leeward
blinghound: ifreund is working on a wayland compositor, and fengb made a gameboy emulator. There's a decent amount of game/graphics stuff on

1595115685
blinghound
leeward thanks for the link, I had an appetite for more zig stuff

1595115769
leeward
No problem

