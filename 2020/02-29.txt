1582934456
dimenus
it's not at cross_target.zig:646?

1582934538
dhawkie
does this line hint at a mistake on my side of things? (the C code is 3rd party, public and compiles)

1582934539
dhawkie
pub const gwinit = @compileError("unable to translate C expr: unexpected token Id{ .Keyword_sizeof = void }");

1582934539
dhawkie
zig-cache/o/[...]/cimport.zig:580:20: error: unable to translate C expr: unexpected token Id{ .Keyword_sizeof = void }

1582934584
andrewrk
dimenus, ah, ok I remember that now. sorry. ok so you are expecting that function to change the C ABI?

1582934606
dimenus
the glibc_version

1582934606
andrewrk
that seems reasonable to me

1582934621
andrewrk
well it doesn't currently change the C ABI. so if you didn't select gnu for the C ABI then it does nothing

1582934637
andrewrk
I'll change it to do that and add docs though, I think that makes sense. thanks

1582934654
dimenus
andrewrk: i apologize if i'm being thick here, do you have examples for this branch?

1582934676
andrewrk
dimenus, can you elaborate on <dimenus> that emits a regular native target instead of the one you defined above

1582934713
dimenus
currently calling setGnuLibCVersion doesn't actually affect the triple that gets generated

1582934755
andrewrk
what makes you think that?

1582934786
dimenus
because i printed it out

1582934800
andrewrk
ok and what was the output

1582934822
dimenus
your isNative check doesn't check the glibc vresion

1582934854
dimenus
'native-native'

1582935539
andrewrk
thanks dimenus- fixed in e683eee4

1582938768
companion_cube


1582949443
daurnimator
andrewrk: no stream today?

1582953814
jaredmm
daurnimator: postponed to tomorrow to show off target stuff.

1582956607
andrewrk
ok I think this commit will finally get the CI passing

1582960066
daurnimator
andrewrk: the comment above standardDynamicLinkerPath seems to be incorrect now

1582960138
andrewrk
thanks, fixed

1582960286
daurnimator
andrewrk:

1582960361
andrewrk
an untagged union would be the right way to model the data

1582960400
andrewrk
union { non_gnu_libc: void, gnu_libc: Version }

1582960434
andrewrk
all that would do is introduce a panic sometimes, in some build modes

1582966141
LakeByTheWoods
In translate_c do C inline functions (or other functions in imported code) get parsed with the parceC... functions or do they all go through clang and the trans... functions? I want to know if it's safe to assume that the parseC functions will always be parsing macros.

1582966717
LakeByTheWoods
Ah, I think I answered my over-arching question `// eventually this will be replaced by std.c.parse which will handle these correctly`

1582967159
andrewrk
LakeByTheWoods, inline functions are parsed and semantically analyzed by clang. only macros are parsed and heuristically translated by zig

1582967197
LakeByTheWoods
Awesome, thanks!

1582978178
daurnimator
andrewrk: so.... now with different versions of e.g. windows supported, how do we make structs different per-version?

1582984614
alexnask
andrewrk: Do you think a '@genericFunctionInstance' builtin that takes a generic function pointer and a tuple of argument types and returns a funcion pointer would be reasonable?

1582984735
alexnask
I feel like it could be useful for metaprogramming if you are using tuples and @call to generate functions (e.g. in std.interface if I could generate a tuple type from a slice of types and had this builtin I could generate vtable functions for any number of arguments)

1582984814
alexnask
Right now I am forced to switch on the number of arguments and generate a closure accordingly, since using a tuple argument would make the function generic

1582984884
pixelherodev
So I just learned that LLVM supports both ATT and Intel syntax for inline asm

1582984962
pixelherodev
Not sure why I was surprised by that

1582984975
daurnimator
pixelherodev: full of bugs :(

1582985033
daurnimator
pixelherodev:

1582985048
pixelherodev
I remember why I was surprised by that

1582985447
pixelherodev
Regarding

1582985452
pixelherodev
Ah

1582985454
pixelherodev
Wrong clipboard

1582985464
pixelherodev


1582985517
pixelherodev
... unless shrinkFn is a function pointer, which I vaguely recall being accurate

1582985523
daurnimator
pixelherodev: it's not a method, its a field

1582985525
daurnimator
yeah

1582986490
pixelherodev
Can you change which field of a union is active without assigning it to a freshly initialized union?

1582986526
pixelherodev
That is, `const a = union {A: blah, B: blob }; const b = a{.A = blah};`; can you do `b.B = blob`? or do you need to do `b = a {.B = blob}`?

1582986529
alexnask
andrewrk: Scratch that, passing a slice of argument types wouldn't work, it would need to be a tuple of types + comptime values I guess but then building a tuple is a whole other issue

1582989508
daurnimator
If we get @reify, I wish it could synthesize from a list of field names, types and offsets

1582989516
daurnimator
where the offsets don't have to be in order

1582989531
daurnimator
would be helpful when reverse engineering

1582989545
daurnimator
but also when creating struct definitions from specs

1582989733
daurnimator
TIL the windows TEB has: `StaticUnicodeString` and its Buffer seem to be provided as a convenience for pretty much any API function that has temporary need of a pathname-sized buffer.

1582991067
jessermeyer
How am I to report compiler bugs like 'Assertion failed at D:\a\1\s\src\analyze.cpp:1003 in get_fn_type. This is a bug in the Zig compiler. Unable to dump stack trace: debug info stripped'?

1582991081
jessermeyer
The code base I have isn't exactly small.

1582991086
jessermeyer
It's not huge either tho.

1582991182
jessermeyer
Also, the file path in that assertion doesn't make sense to me since the compiler and src are stored on C:.

1582991208
daurnimator
jessermeyer: did you compile your zig executable yourself?

1582991212
jessermeyer
So unless Zig is creating a tmp directory on D (which would be a bad move here, since that's a platter disk drive), I dunno.

1582991216
jessermeyer
Nope.

1582991227
daurnimator
its a reference to where zig was on the machine that compiled zig

1582991228
jessermeyer
Nightly as of... yesterday I believe.

1582991255
jessermeyer
Zig is not stored on my D Drive.

1582991283
daurnimator
jessermeyer: and are you the machine that compiled zig?....

1582991304
jessermeyer
Oh, I missed 'that compiled zig'.

1582991308
jessermeyer
Sorry, eyes go too fast.

1582991444
jessermeyer
I've isolated the compiler bug down to the first inclusion of a vulkan type.   var instance = zeroes(VkInstance);

1582991459
jessermeyer
Declared as: pub const VkInstance = @OpaqueType();

1582991477
jessermeyer
That type comes to me through translate-c.

1582991492
jessermeyer
So, maybe the compiler can't zero out that field since it's opaque?

1582991533
metaleap
after updating zig to current nightly (after keeping it unupdated for maybe ~10 days or so at my end), std.io.BufferedInStream seems to have a new bug where it's blocking itself forever or sth when using it like `&std.io.BufferedInStream(std.os.ReadError).init(&std.io.getStdIn().inStream().stream).stream);`. my 2 langservers (dummy one and zig-wip one) had "no stdio going on seemingly" (radio silence instead of back+forth chatter) until i temporarily

1582991533
metaleap
switched back to `&std.io.getStdIn().inStream().stream`. (after lettin off some steam that is). seems like i hit sth that unit tests didnt, will take a look

1582992570
alexnask
jessermeyer This is (obviously) a compiler bug, intended behavior is a @compileError() from mem.zeroes

1582992591
jessermeyer
I submitted an issue with minimal repo.

1582992611
alexnask
Yeah I saw it, just calrifying what should happen

1582992616
alexnask
clarifying*

1582992620
jessermeyer
Agreed, thanks. :)

1582992644
TheLemonMan
the intended behavior is an error from the compiler

1582992661
TheLemonMan
@opaqueType is not a valid return type

1582992686
jessermeyer
The assertion helped me track down what went wrong.  That's rare in my experience.

1582992699
jessermeyer
At least this far removed from the source of the problem.

1582992717
alexnask
mem.zeros checks for Opaque types and @compileErrors (along with other unsupported types)

1582992724
TheLemonMan
compilers are complex beasts

1582992737
jessermeyer
Smells like a regression then.

1582992791
TheLemonMan
nope, there's a missing error check in the semantic analisys code

1582993216
frmdstryr
Yo TheLemonMan, I have another arm related issue that I'm hoping you can help with

1582993239
TheLemonMan
shoot!

1582993269
frmdstryr
So this was happening before the change to llvm10

1582993276
frmdstryr
Still occurs with llvm10

1582993311
frmdstryr
The code works fine in debug mode but when building with release-safe it hard faults when loading main.main

1582993341
frmdstryr
the instruction it's hard faulting on is vpush {d8-d15}

1582993381
TheLemonMan
hmm, misaligned stack?

1582993414
frmdstryr
and i've narrowed it down to something with the inner loop in display.zig line 698

1582993565
TheLemonMan
in drawCubicBezierSegment ?

1582993569
frmdstryr
Yea

1582993599
TheLemonMan
can you upload the faulty binary somewhere?

1582993690
pixelherodev
Hmm, can you tail call inline asm?

1582993728
pixelherodev
Wait, should probably ask in #llm

1582993728
pixelherodev
s/llm/llvm

1582993834
BaroqueLarouche
andrewrk: Found a regression in EmitRaw with latest master

1582997735
BaroqueLarouche
andrewrk: that's actually a better fix :)

1582997763
BaroqueLarouche
andrewrk: I also did this one

1582998213
BaroqueLarouche
C:\Programmation\Zig\zig\lib\std\zig\cross_target.zig:648:47: error: use of undeclared identifier 'ObjectFormat'

1582998213
BaroqueLarouche
pub fn getObjectFormat(self: CrossTarget) ObjectFormat {

1583001380
fengb
daurnimator: using streams seems to be a lot easier. I might actually be able to get it working this weekend

1583002041
andrewrk
daurnimator: re: "TIL the windows TEB has: `StaticUnicodeString` and its Buffer seem to be provided as a convenience for pretty much any API function that has temporary need of a pathname-sized buffer."

1583002056
andrewrk
Wow that's an incredibly useful find!

1583002143
andrewrk
A couple things to verify though: is it per thread? Does it work with IOCP? What if applications are using it, will we suprise people by clobbering the data?

1583002495
TheLemonMan
andrewrk, I have a nice solution for the osx version detection problem, but only works from High Sierra onwards

1583003216
frmdstryr
Can I somehow cast a fixed sized multi dimentional array to a slice of slices?

1583005132
jessermeyer
Is it possible to include comptime const variables in debug information for inspection?  I'd like to constify where-able, but I'm not generally in favor for that if it hinders debuggability.

1583005174
alexnask
I think there is an issue open about this

1583005192
jessermeyer
Ah, noted.

1583005615
BaroqueLarouche
mq32: PCX support is in master !

1583005657
mq32
nice!

1583006141
shakesoda
BaroqueLarouche: nice, is tga support on the todo list?

1583006152
BaroqueLarouche
shakesoda:  yes

1583006154
shakesoda
i've got a really, extremely basic writer for tga in my project right now

1583006172
shakesoda


1583006175
BaroqueLarouche
shakesoda:

1583006187
BaroqueLarouche
PR is welcome!

1583006203
BaroqueLarouche
I want to do those formats: GIF, PNG and JPEG

1583006210
BaroqueLarouche
PNG is very high priority

1583006235
shakesoda
yeah, rather important

1583006263
shakesoda
dumping tgas to disk is just extremely easy to write and useful for generating graphics

1583006270
shakesoda
so i hacked that up some weeks ago

1583006298
BaroqueLarouche
wow look so simple to write

1583006299
BaroqueLarouche
(TGA)

1583006422
shakesoda
feel free to use that code, it's only the most basic case but it is enough to be useful

1583007329
hazeycode
Hi Zig people!

1583007381
mq32
hey hazeycode

1583007515
hazeycode
I have a silly question... I couldn't find the answer in the docs... is there a way to pass a comp time var through zig build? i.e. `zig build --gfx_backend=VULKAN` ?

1583007781
metaleap
hazeycode: everything you pass following `zig build` is

1583007824
metaleap
if you do `zig builtin` you see all the stuff coming from the build-time that your to-be-built source files have access to at comp-time

1583007930
hazeycode
Thanks metaleap! Do you know a good approach for achieving something along the lines of the following?

1583007932
hazeycode
```

1583007938
hazeycode
```pub usingnamespace @cImport({    switch (platform_layer) {        GLFW => {            if (gfx_backend == VULKAN) {                @cDefine("GLFW_INCLUDE_NONE", "1");                @cDefine("GLFW_INCLUDE_VULKAN", "1");                @cInclude("GLFW/glfw3.h");            }        },        SDL => {            @cInclude("SDL2/SDL.h");        }

1583007938
hazeycode
}});```

1583007944
hazeycode
(sorry)

1583007962
metaleap
the only hack you could do is that the param in your build.zig and write some "my_generated.zig" file before building. then your other code @import("my_generated.zig")

1583007972
metaleap
s/that/take

1583007981
mq32
hazeycode: ½ Answer: You can add custom options/defines to zig build with

1583007981
mq32
pub fn option(self: *Builder, comptime T: type, name: []const u8, description: []const u8) ?T

1583008054
metaleap
oh nice i didnt know about that. still this is only accessible in build.zig and to "pass it into the src-files about to be built" would require some .zig file-gen'ing right?

1583008079
hazeycode
Nice! Thanks guys that's a huge help

1583008149
hazeycode
It's kinda a shame (I think) it could be cool to have something like a compile time getenv kinda thing

1583008167
mq32
i don't know if that fits the spirit of zig

1583008178
mq32
it's a thing that always bugged me about a lot of C libraries

1583008184
mq32
you can configure the hell out of em

1583008211
mq32
the best possible outcome is a single executable for an os/platform combination

1583008221
metaleap
a comptime dict to be instrumented when the compiler is invoked? sounds like a decent idea to me. but yeah better keep those build-opts nicely-described and dont do silent defaults then

1583008635
hazeycode
I guess the proper way to have modular program layers is to build them as separate fragments that you switch on at build time and have a single interface.zig to import. I think that would be nicer than the hack I'm trying atm

1583008687
mq32
yeah,, just make multiple files

1583008695
mq32
as you are building multiple executables

1583009090
hazeycode
Ok yeah I'll do that and make use of `pub fn option(self: *Builder, comptime T: type, name: []const u8, description: []const u8) ?T`... thanks for the advice!

1583009322
hazeycode
It is possible to separate declarations from definitions right? With regard to said interface.zig

1583010074
alexnask
Iirc you want to do something like std.zig

1583010090
alexnask
If I understand correctly* woops brainfart

1583011028
hazeycode
alexnask possibly yeah. I guess my problem is the same as building std.zig; specifying a platform layer to build and link against while maintaining a portable interface, in the future I may have a PS4 layer for example that I want to swap in easily. I'll take a look at how std.zig is built

1583011059
alexnask
Ah right, I would recommend you take a look at how std.os stuff is handled

1583011068
hazeycode
Thanks!

1583011080
alexnask
It's really easy and graceful in zig though, you basically just have conditional imports

1583011150
hazeycode
Yeah that was sort of my original question, how do I get a comp var through zig build to do said conditional import

1583011289
alexnask
Right, not sure about setting custom globals through the build system

1583011339
alexnask
A hack like defining them in some options.zig file generated by build.zig like someone mentioned will work for sure

1583011360
alexnask
But it does sound like a useful thing to build into the build system/compiler

1583012348
mq32
BaroqueLarouche: do you think it's a good idea to have a library for loading/saving images AND modifying the image contents?

1583012394
BaroqueLarouche
mq32:  yes

1583012406
mq32
hmm

1583012722
mq32
yeah, makes sense probably

1583013076
mq32
What about gpu acceleration?

1583013108
BaroqueLarouche
if we implement image filers, why not

1583015272
andrewrk
There is zig build API to do this. It's not well documented

1583015296
andrewrk
But it's a good use case that is supported

1583015342
andrewrk
That was in response to hazeycode

1583015393
BaroqueLarouche
andrewrk: did you see the compilation erro I reported a while back ?

1583015739
hazeycode
Thanks andrewrk that's great news to me! Good you point me in the right direction of this API?

1583015749
hazeycode
*Could

1583017973
mikdusan
hazeycode: I think this example should help:

1583017974
mikdusan


1583018026
mikdusan
`zig build -Dhello` is mechanism to get from command line; line #5

1583018082
mikdusan
line #11 is mechanism to get it "importable" as `<namespace>.hello`

1583018099
mikdusan
and #31 ... #32 bob's your uncle

1583018697
hazeycode
Awesome! Thank you so much mikdusan

1583020477
shakesoda
mikdusan: i had no idea that existed

1583020478
shakesoda
very helpful

