1578530053
Snektron
<fengb "I type everything perfectly the "> Programming russian roulette

1578530458
daurnimator
fengb:

1578546399
daurnimator


1578550906
fengb
"It’s not likely to replace C for me, but it might have a place somewhere in my stack." I wonder why

1578574172
phillyiscool
Is there an equivalent of `void *` in Zig? I would like to have a struct field that can accept any struct type.

1578574493
phillyiscool
I guess the expectation is to use generics instead of having void * fields

1578576457
scientes
ph...ahh they always leave before they get an answer...

1578579183
Astronothing
I wouldn't mind getting the answer

1578580572
scientes
Astronothing use [*]u8 or []u8

1578580586
scientes
depending if you want a length

1578580624
mattmurr
How are they different?

1578580703
scientes
[*]u8 is a pointer, and []u8 is a slice, so a pointer and a length

1578580719
Astronothing
scientes would I be able to convert [*]u8 to a pointer of a different type?

1578580719
scientes
the * means the length is unknown

1578580729
scientes
using @ptrCast

1578580741
Astronothing
ok, thanks

1578580775
mattmurr
makes sense now 🙂 ty

1578581139
SyrupThinker
Wouldn't *@OpaqueType() be the bettet Pointer because one cannot misinterpret it?

1578581183
mq32
SyrupThinker: "const Handle = *OpaqueType();" is a common pattern to address a "unique, but incomplete" type

1578581206
scientes
SyrupThinker, @OpaqueType is just for compatibility with C, where it is possible to have a header define a type that doesn't have a known length

1578581365
fengb
Opaque is generally used for “this is a known type but I don’t know what’s in it”

1578581396
scientes
it also is limited, cause you can't add methods to it

1578581408
scientes
which is annoying when trying to zigify a C library

1578581429
SyrupThinker
All the things I'd want from a void pointer

1578581451
scientes
void * is differen't

1578581455
scientes
cause it doesn't have a type

1578581461
scientes
its the ANY type

1578581484
scientes
but just use what ANSI C uses, char *, or [*]u8

1578581569
fengb
Opaque wasn't designed to hold "any type" but instead for "forward declared struct pointers"

1578581584
SyrupThinker
I think it is bad idea to use a pointer that can be dereferenced if its supposed to represent another type.

1578581613
fengb
How about... *c_void? :P

1578581614
scientes
SyrupThinker, zig isn't trying to tell you what to do

1578581637
scientes
that is the C++ madness rabbit hole

1578581662
SyrupThinker
fengb: Eh, good enough I guess, makes the intend more clear when one knows C

1578581679
fengb
C++ gives you 5 different incompatible ropes

1578581696
scientes
you mean nooses?

1578581698
fengb
And one of those was introduced as the latest gold standard

1578581754
fengb
I don't think I've seen any Zig code that literally means "any type" so I'm not sure what the convention should be

1578581755
SyrupThinker
scientes: I am aware, my point was just that using a pointer to OpaqueType forces a pointer case to use any data, forcing the user to think

1578581766
fengb
Most of those cases in C are generics, which is better with comptime comparisons

1578581767
SyrupThinker
*cast

1578581814
scientes
fengb, well, these are all byte machines, so [*]u8 with appropiate alignment is what I would use...

1578581829
scientes
no reason to be as complicated as C

1578581857
fengb
I do agree with SyrupThinker that communicating intent is important

1578581876
scientes
yeah, but we don't want inheritable types

1578581882
scientes
which is what he is asking for

1578581893
scientes
or rather we don't have them

1578581962
fengb
My usual response to that is: issue 130, gonna avoid an internet argument >_>

1578581962
SyrupThinker
I do not believe I asked for that

1578582002
SyrupThinker
Because I have no use for them

1578582026
scientes
i'm just pointing out that this specific thing has a clear abstraction

1578582048
scientes
and I'd rather not support just one instance of it

1578582178
SyrupThinker
Alright, just wanted to have some opinion on that, thanks for responding

1578582254
mq32
what's the correct type if i want to export a "void * " handle? jus use void * ?

1578582633
mq32
huh

1578582646
mq32
seems like get_c_type cannot translate function pointers?

1578582672
scientes
and my patch to support vectors on that never got merged....

1578582694
mq32
pub const umqttAllocator = extern struct { alloc: extern fn () c_int, };

1578582701
mq32
that struct doesn't translate.. .(

1578583023
nocko`
I'm new to zig and trying to write a high-level wrapper for the init_module syscall. I'm using the std.os.linux sources as a guide, but I cannot seem to make a parameter of the sentinel-terminated pointer type.

1578583043
nocko`
pub fn insmod(buf: []const u8, args: [*:0]const u8) !void {

1578583047
scientes
nocko`, init_module?

1578583055
scientes
oh, syscall

1578583071
nocko`
The compiler gives me: error: invalid character: ':'

1578583071
nocko`
pub fn insmod(buf: []const u8, args: [*:0]const u8) !void {

1578583088
nocko`
This seems to be the pattern in the std sources...

1578583097
scientes
nocko`, is this just for fund? cause you realize libkmod was created not that long ago to solve all the problems with the old modprobe

1578583100
scientes
*fun

1578583150
scientes
also, you probably want finit_module()

1578583202
nocko`
The project is a statically linked app to unlock mtd and update bootloader on embedded linux. I'm embedding the ko and the new flash contents.

1578583231
scientes
why can't you just statically link libkmod?

1578583267
scientes
but yeah, that seems reasonable

1578583294
nocko`
It's quite possible that I could, maybe overkill for one syscall. I'm secondarily intereseted in why I can't declare a function with a parameter that matches the stdlib.

1578583369
nocko`
The entire function is:

1578583390
nocko`
pub fn insmod(buf: []const u8, args: [*:0]const u8) !void {

1578583390
nocko`
std.debug.warn("Loading Module\n");

1578583390
nocko`
var r = std.os.linux.syscall3(

1578583393
nocko`
std.os.linux.SYS_init_module, @ptrToInt(&buf), buf.len, @ptrToInt(args));

1578583396
nocko`
if (r != 0) {

1578583399
nocko`
return MtdError.InsmodFailed

1578583402
nocko`
}

1578583406
nocko`
}

1578583407
nocko`
Ugh, should have done a gist, or similar.

1578583442
scientes
yeah buf could just be a @includeFile too

1578583447
scientes
which is super slick

1578583491
nocko`


1578583501
fengb
Are you using the nightly build? Sentinel termination was introduced recently

1578583545
scientes
yeah, you use to need c"" to get null termination

1578583548
nocko`
0.5.0

1578583556
scientes
yeah switch to master

1578583591
nocko`
Ugh. What a dumb error on my part.

1578583606
nocko`
Thanks.

1578583640
fengb
We get that every other day. User problems are usually UX problems :P

1578583646
scientes
nocko`, also once you get it working, submit a PR with the usable stuff

1578583668
FireFox317
nocko: I think the problem is that you are using zig 0.5.0 and the docs you are reading are from master

1578583728
FireFox317
nocko`: pointers is something that was added after 0.5.0

1578583744
FireFox317
sentinel-terminated pointers*

1578583746
nocko`
I was reading the correct documentation, but when I went diving into the stdlib for inspiration I was browsing the master branch.

1578583765
scientes
probably just use master for now

1578583962
nocko`
Building master now. Thanks again for the hint. It would have taken me a fair amount more time to discover this on my own.

1578584083
fengb
There's also a nightly package at the top of

1578585092
nocko`
non-variadic std.debug.warn feels clunky. Probably I should stop being lazy and use better output apis...

1578585223
nocko`
ooh, but output while building libc is very nice!

1578586196
scientes
nocko`, yeah i just ran into that

1578586207
scientes
i couldn't even get std.debug.warn to work...

1578586423
mikdusan
andrewrk: I'm still working on adding an arena allocator to stage1; would like to know if it's a big no-no to use constructors/destructors? eg. I have coded an ArenaList to replace ZigList but it needs to be associated with an arena instance

1578587817
pixelherodev
"Zig requires LLVM to be built with all default targets enabled." There a way to deliberately work around this and only build native compilation?

1578587852
pixelherodev
Otherwise I'm going to be held up for a few hours recompiling LLVM :P

1578588045
pixelherodev
Guess I'll update LLVM/Clang to 9.0.1 while I'm at it

1578588052
scientes
pixelherodev, yeah the in-tree build was also rejected, which adds even more pain

1578588062
scientes
when doing something that requires modifying both

1578588068
scientes
or when doing a bisection

1578588078
leeward
I ran `zig build test-std` with a test in heap/logging_allocator.zig and it didn't get run. The same test in heap.zig did execute (and fail, correctly). Is there something I have to do to add a file to the set of files with tests?

1578588081
pixelherodev
Does zig at least support LLVM 10?

1578588096
pixelherodev
If so, might as well jump to 10 so I can start working on AVR

1578588098
scientes
master is on 9

1578588105
pixelherodev
Drats

1578588113
scientes
9 works on avr

1578588118
pixelherodev
What?

1578588120
scientes
I think....

1578588123
pixelherodev
Hmm... not on Gentoo...

1578588125
leeward
Oh, does 10 have good AVR support?

1578588132
leeward
9's is...not great.

1578588137
scientes
pixelherodev, you just have to turn it on

1578588145
pixelherodev
Nah, I mean it's not an option

1578588155
scientes
oh , it was out of tree?

1578588160
pixelherodev
Gentoo doesn't have it as an option until LLVM 10

1578588172
scientes
anyways, gcc's avr was always better

1578588178
pixelherodev
Sure, but that doesn't work with Zig

1578588184
pixelherodev
Unless LLVM has a secret GIMPLE backend

1578588214
scientes
pixelherodev, noone wants to maintain such a thing

1578588222
scientes
in either direction

1578588277
pixelherodev
shocker

1578588288
pixelherodev
Would be neat to have bidirectional translation though

1578588300
pixelherodev
I'd be interested in seeing what could be done optimization-wise then

1578588329
leeward
It would give LLVM languages like Zig and Rust instant support for so many platforms.

1578588396
leeward
How many people out there really want to maintain an ARC compiler?

1578588697
leeward


1578588705
pixelherodev
GIMPLE -> LLVM?

1578588712
leeward
yeah

1578588716
leeward
It's an LLVM backend for GCC.

1578588775
pixelherodev
Yeah, but it's also extremely outdated

1578588783
pixelherodev
LLVM 3.3 is the last supported release AFAICT

1578588800
leeward
That's your thing about nobody being interested in maintaining it.

1578588907
leeward
I'm not really sure why it exists. All of LLVM's target platforms are supported by GCC, and the optimizer isn't so much better that I'd stick something like that in the loop.

1578588944
fengb
LLVM originated as a backend for GCC before it got frontends

1578588956
leeward
Maybe GCC didn't support LTO when it existed?

1578588960
leeward
I guess that would do it.

1578589033
scientes
leeward,

1578589373
mikdusan
leeward: "Is there something I have to do to add a file to the set of files with tests?" <-- did you solve this yet?

1578589475
leeward
mikdusan: nope

1578589492
mikdusan
take a look at lib/std/crypto.zig, last block

1578589516
mikdusan
that's how you tie-in tests from sub-dirs

1578589544
scientes
is there any good reason to have llvm have a slice type?

1578589571
scientes
I dont think so

1578589587
leeward
mikdusan: Ah, thanks.

1578590562
leeward
Looks like daurnimator beat me to the punch, and taught be about a feature I hadn't noticed in the process.

1578590722
leeward
s/be/me/

1578596103
frmdstryr
comptime const state_field = ascii.toLower(name) ++ "_state"

1578596114
frmdstryr
error: expected type 'u8', found '[]const u8'

1578596136
frmdstryr
Is there any way to tell it to just copy the bytes at comptime?

1578596166
frmdstryr
like a comptime allocator

1578596202
pixelherodev
Alrighty, Zig fixed. Yay!

1578596206
pixelherodev
That only took... 2 hours?

1578596219
pixelherodev
Of course, now Clang needs a rebuild, but ZIg seems fine for now

1578596901
pixelherodev
There a way to remove the lib prefix from generated libraries?

1578596987
andrewrk
pixelherodev, no but

1578597058
pixelherodev
Well, I guess I can just do a `mv` in the makefile

1578597262
pixelherodev
That issue looks simple enough to implement... if I have time this weekend, I'll tackle that

1578597339
mikdusan
frmdstryr:

1578597517
frmdstryr
That works, thanks!

1578598696
leeward
scientes: I guess that LLVM/GCC integration thing didn't pan out.

1578598717
scientes
leeward, that was 2005

1578598722
leeward
I noticed.

1578598731
scientes
i just sent you it so you could understand the history a little better

1578598767
leeward
The proposal there was to use LLVM's LTO with GCC, which was still pondering the idea at the time.

1578598786
scientes
that is more an excuse

1578598802
scientes
the real proposal is for apple not to have to spend all the money to develop clang

1578598808
fengb
Didn't Lattner/Apple want more flexible integration and GNU said no help for proprietary software?

1578598851
leeward
It's not proprietary software, and they floated the idea of assigning copyright to the FSF.

1578598869
leeward
Or are you talking about the software Apple was building with it?

1578598889
scientes
leeward, you can build propiatary software with gcc

1578598898
leeward
I know.

1578598899
fengb
Yeah, Apple hired Lattner to work on compilers. That eventually led to inhouse Clang

1578598920
fengb
I don't think that was the original intention but then a pissing contest involved :P

1578598926
fengb
I can't English

1578598935
BaroqueLarouche
since GCC changed to GPL3, corporations become hesistant to use it

1578598939
scientes
fengb, he also got hired right after GPL3 came out, and gcc immediately switched

1578598967
scientes
that said, LLVM does have a better architecture, even if the code is so-so

1578598970
BaroqueLarouche
on PS3 for instance, the GCC version was stuck to the last GCC version using GPL2.

1578598976
leeward
I don't see the problem with GPLv3 for GCC as long as it has the same exceptions to GPLv2 that it had before.

1578598977
scientes
I don't say that lightly

1578598991
scientes
gcc and llvm both have their advantages

1578599005
lupine
in fairness, destroy all proprietary software

1578599022
pixelherodev
There a reason a `fn` isn't the same as an `extern fn`?

1578599038
BaroqueLarouche
extern fn makes the function uses the C ABI

1578599039
leeward
I think that compilers as a whole are better off for there being competition.

1578599046
pixelherodev
Ah

1578599047
scientes
BaroqueLarouche, except that the PS3 doesn't ship gcc, so the gpl3 anti-tivo clause doesn't apply

1578599057
scientes
BaroqueLarouche, same in regards to android

1578599058
BaroqueLarouche
sorry mixing it up with export

1578599068
pixelherodev
Yeah that's what I thought

1578599071
scientes
(although i believe android is entirely built with llvm/clang these days)

1578599072
pixelherodev
Using a C import

1578599077
pixelherodev
Which uses function pointers

1578599084
BaroqueLarouche
Android has moved to clang

1578599089
pixelherodev
And apparently ` = struct{fn func...}.func` isn't good enough

1578599128
leeward
lupine: Hard to justify not letting people license the software they write the way they want.

1578599137
pixelherodev
Does work with exported function though

1578599142
lupine
nah

1578599145
lupine
morality is good like that

1578599191
leeward
I don't see the moral superiority of denying people options.

1578599212
fengb
I've heard that GCC is intentionally architected poorly to prevent proprietary extensions

1578599222
lupine
oh how immoral of me

1578599245
leeward
Ok, so you're comparing shipping binary-only software to killing people now?

1578599250
companion_cube
I heard the same, so they've brought llvm on themselves

1578599250
lupine
yeah

1578599263
lupine
we're not going to get this to a reasonable level of complexity without destroying this channel, so let's leave it

1578599276
leeward
Good point.

1578599297
leeward
Also, fengb, I hadn't heard that, but it sounds like a joke.

1578599330
companion_cube
nah, they explicitely didn't want gcc to have an API

1578599411
mikdusan
fengb: I heard they intentionally kept GIMPLE undocumented and opaque

1578599424
pixelherodev
argh - `Generate .h...TODO implement get_c_type for more types`

1578599427
pixelherodev
and then a crash

1578599433
pixelherodev
I don't even need a .h!

1578599460
leeward
Whoopsie.

1578599483
pixelherodev
Oh right --disable-gen-h

1578599496
leeward
Don't expect it to get a lot better before self-hosted is a thing, pixelherodev.

1578599506
pixelherodev
Yeah, it's fine

1578599590
pixelherodev
Yay, plugin building is working now!

1578599595
leeward
\o/

1578599936
mikdusan
frmdstryr: I added a variation on that code - apparently you can deref a string literal to get at the array literal if desired.

1578600012
frmdstryr
Won't that modify the original then? I need both

1578600038
mikdusan
yes. just saying if you needed a buffer and not orig.

1578600082
frmdstryr
Gotcha, both are useful, so thanks for sharing

1578602825
pixelherodev
Huh

1578602834
pixelherodev
Zig just, oddly, started only compiling needed parts of libc

1578602842
pixelherodev
It's actually fast now

1578605068
fengb
leeward: finally found a source about LLVM vs GCC:

1578605302
fengb
Also

1578606310
terinjokes
is there a correct way to import from lib/os/bits from a user program?

1578606360
terinjokes
i'm currently thunking a syscall with asm myself (and I do plan on sending a PR to add it to the os package), but was hoping for a "correct" way to do it in the meantime

1578606540
pixelherodev
Uh

1578606545
pixelherodev
That should already be in std.os

1578606549
pixelherodev
Anything in std.os.bits should be

1578611805
daurnimator
leeward: I beat you when/how?

1578612065
terinjokes
pixelherodev: I do see the usingnamespace to import it, and I can see the SYS_ cnstants on std.os. I don't however see std.os.syscall4, which I would expect

1578612107
daurnimator
terinjokes: that's under e.g. std.os.linux.syscall4

1578612256
daurnimator
which syscall are you missing anyway?

1578612658
terinjokes
ahh, excellent! I'm still getting used to reading zig code. i see this is exported on line 31 of os.zig

1578612756
terinjokes
on linux I'm using sendfile/sendfile64. I wouldn't mind trying my hand at sending a PR adding it to std

