1592384305
andrewrk
a little teaser demo of the #5583 branch:

1592385138
shachaf
What sort of time command is that?

1592385169
mq32
andrewrk: does that mean that zig now compiles 1 Mio LOC/s

1592385170
mq32
?

1592385170
mq32
:D

1592385251
andrewrk
now all we have to do is not introduce a perf regression :P

1592385286
andrewrk
shachaf, I think it's built into fish shell?

1592385288
mq32
yep ^^

1592385302
shachaf
Oh, fish, I see.

1592385355
andrewrk
I think there is a lot of room for improvement because clang does this faster with a respective .c file

1592385365
shachaf
I wrote my own time replacement to get some of this information because none of the system commands did it.

1592385383
shachaf
(Though a lot of those numbers are just always 0 on Linux anyway...)

1592385430
mq32
andrewrk: do you have optimizations enabled on that build? :D

1592385505
andrewrk
zig compiler optimizations, yes

1592385677
andrewrk
interesting, about 50% of the time spent is in the parser

1592385945
mq32
but nice to see that it's acceptably fast already

1592386112
andrewrk
wait... I think zig is emitting memset to undef even in release-fast üïµÔ∏è‚Äç‚ôÇÔ∏è

1592386149
mq32
this is probably a huge handbreak :D

1592386365
andrewrk
especially considering there is a call in every allocation

1592386374
mq32
ouch

1592386528
andrewrk
that was a small improvement, not a breakthrough

1592386586
andrewrk
it's good to know that (1) gains can be made in the parser, and (2) gains can be made by parallelizing parsing and analysis, since these are easy to separate

1592386679
mq32
this is gonna be good

1592387093
andrewrk
looks like some gains to be made with a better hash table impl, been meaning to check if it would be better to have arrays of keys / arrays of values rather than arrays of entries

1592387650
mq32
i think it's actually worth the split

1592387655
mq32
for larger tables especially

1592387663
mq32
and i think the compiler will gain some huge hashtables

1592387679
andrewrk
yeah, makes sense

1592387720
mq32
cache locality isn't our friend D

1592387865
andrewrk
ok, yeah wow the parser is the bottleneck in this example

1592388173
mq32


1592388179
mq32
i love such optimization stuff

1592388183
mq32
you find a bottleneck

1592388186
mq32
you improve that

1592388189
mq32
you repeat

1592388191
ifreund
this is a fairly abnormal example though tbh

1592388197
andrewrk
agreed

1592388200
mq32
and at one point, you're back to the original bottleneck :D

1592388325
andrewrk
totally agree it's a dumb example, but still having fun with it: this is currently 7x faster than clang and clang is using 3x the memory for the equivalent source

1592388351
mq32
neat

1592388373
andrewrk
and this is still with the ability to do incremental updates btw

1592388397
andrewrk
I need to wire some more things up to demo that but you'll be able to e.g. change the message and have it update instantly

1592388407
afontain_
sweet

1592388464
ifreund
this is super cool

1592388491
mq32
neat

1592388498
mq32
except for the parse taking so long :D

1592388593
andrewrk
I haven't looked critically at the relevant parser code, maybe some ideas will turn up

1592388611
andrewrk
could be a fun area to contribute to as well; we already have a solid gotta-go-fast benchmark for the parser

1592388715
Cadey
oh no

1592400819
blinghound
Hi all! I'm a zig noob and trying to test the c compilation capabilities. I'm attempting to compile sqlite3 into an object file on windows, but I get an error 'conflicting types for '_m_prefetchw''

1592400907
blinghound
my compilation command was 'zig cc -I{sqlite3.h location} -c sqlite3.c -o sqlite3.o -DSQLITE_ENABLE_FTS5 -O2

1592401233
afontain_
it would help if you showed the two files

1592401233
afontain_
I've already got an idea what the cause could be

1592401331
blinghound
sqlite3.c and sqlite3.h?

1592401383
blinghound
they are the source files straight from the sqlite site

1592402294
blinghound
In file included from .\sqlite3.c:26721:In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\..\um\windows.h:171:In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\..\shared\windef.h:24:In file included from C:\Program Files (x86)\Windows

1592402294
blinghound
Kits\10\Include\10.0.18362.0\ucrt\..\shared\minwindef.h:182:C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\..\um\winnt.h:3324:1: error:       conflicting types for '_m_prefetchw'_m_prefetchw (^C:\Portable Apps\zig-windows-x86_64-0.6.0+2bb3e1aff\lib\zig\include\prfchwintrin.h:50:1: note:       previous definition is

1592402294
blinghound
here_m_prefetchw(void *__P)

1592402332
blinghound
sorry for the formatting, I'm a noob!

1592406449
blinghound
ok this command successfully compiled 'zig cc -o .\sqlite3.o .\sqlite3.c -DSQLITE_ENABLE_FTS5 -c -O2 -target x86_64-windows-gnu'

1592406481
blinghound
was it because I didn't specify a target?

1592407339
blueberrypie
zig might be using musl as the default target

1592407376
blueberrypie
maybe that isn't compatible? i don't know.

1592407479
ifreund
blueberrypie, blinghound: i think msvc is the default target

1592407485
ifreund
iirc there's an open issue for this

1592408019
ask6155
hello!

1592408038
ask6155
what does this return type mean?

1592408065
ask6155
?(NextError![]u8)

1592408082
ask6155
it is from the argiterator

1592408298
mq32
that's an optional error union of either NextError or a slice of unsigned 8 bit integers

1592408359
ask6155
can you um.. dumb it down? :)

1592408402
mq32
[]u8 is a range of u8

1592408440
mq32
NextError!T is an error union which is either one of the errors in NextError contains a range of u8

1592408447
mq32
and ?T is an optional type

1592408452
mq32
so it might be null or a value of T

1592408530
ifreund
to unwrap it you can do const argval = try (arg orelse @panic("no more args"))

1592408550
ifreund
except probably don't panic :D

1592408563
alva
In Rust and other languages it would be something like Option<Result<[]u8, NextError>> (except the slice type would be written differently)

1592408669
ask6155
if arg is a argiterator do i use .next in a loop to get all values?

1592408794
ifreund
yeah that's the idea

1592408823
ifreund
while (it.next()) |maybe_arg| {  const arg = try maybe_arg; }

1592412897
mq32
andrewrk: does zig right now mmap the code files or does it use read syscall?

1592414060
leeward
What are people's idioms for "value that hasn't been unwrapped yet?" like ifreund's maybe_arg above? It seems like there should be a consistent pair that people expect to use: one for optionals and another for error unions.

1592414093
leeward
I've used _opt and _err, but don't particularly like them.

1592414339
greenfork
some people don't like Hungarian notation at all and prefer to use just usual words

1592414367
leeward
Hungarian would be like oe_value

1592414390
greenfork
for me Hungarian means that you encode the type of variable in its name

1592414425
leeward
Yeah...there's an old Joel Spolsky post about that with systems vs apps Hungarian at Microsoft in the '90s.

1592414431
greenfork
it also doesn't seem as a common case when you don't want to unwrap it immediately or close to it

1592414471
ifreund
yeah i don't usually use any special name for optional variables

1592414479
fengb
foo vs the_foo üôÉ

1592414496
ifreund
only in rare cases where the name actually adds more clarity

1592414515
ifreund
e.g. a global variable that starts null but might get set by a callback

1592414536
fengb
I don‚Äôt usually make variables for optionals or error unions

1592414543
ifreund
(this is not something I do in programs over 100 loc to be clear)

1592414545
leeward
So in ifreund's example above, "maybe_arg" only exists to be unwrapped. You can't call it "arg" because that's the name of the thing it wraps.

1592414590
ifreund
sometimes I just use a leading underscore in cases like this

1592414593
leeward
With optionals, the pattern is `if (wrapped_thing) |unwrapped_thing| {}`

1592414625
greenfork
I go with C-style for short names in this case

1592414632
greenfork
`if (thing) |t| { ... }`

1592414635
ifreund
where I need a different name but don't really want to spend the energy to think about it

1592414709
leeward
I kinda like the leading underscore. It doesn't run the chance of being a reserved word in Zig, unlike C.

1592416826
cvoges12
Getting

1592416886
cvoges12
Dependencies are up to date

1592417053
leeward
I see an example in the standard library of `if (opt_name) |name|`, but also `if (prev_path) |pp|`, `if (stdout) |s|`, and `if (alignment) |a|`. Looks like shortening the optional wrapper to its first letter is pretty common.

1592417120
ifreund
yeah shortening definitely make sense to me, especially if the if block is short

1592417221
ifreund
cvoges12: i assume you've got clang, llvm10, and lld-devel installed?

1592417282
leeward
On the error union side, the vast majority of times "try" is used, it's on a more complex expression than a variable's name. In fact, the only one I see is in process.zig: `const arg = try arg_or_error` in argsAlloc.

1592417334
cvoges12
ifreund: Not devel. Just installed. Works fine. Thanks

1592417450
leeward
Hooray, problems solved!

1592417518
ifreund
nice, if that didn't work i dont know what i would do, i tested the template for 0.6.0 on musl :D

1592417811
andrewrk
mq32, read()

1592417860
mq32
oh

1592417877
mq32
it might help to mmap the code, will make a huge speedup

1592418043
andrewrk
perhaps, but it does make it much harder to handle errors of reading the code.

1592418059
andrewrk
you start getting SIGBUS instead of errno from read()

1592418090
andrewrk
also this is doing fstat followed by, essentially a single read, so I'm not sure if mmap really has much to offer here

1592418110
mq32
hm, performance-wise it's ultra-fast

1592418125
mq32
but i have to go

1592418223
andrewrk
does anyone know of a profiling tool that shows functions over a period of real time, like the one jblow demos in his videos?

1592418259
andrewrk
kcachegrind, for example, does the bottom-up thing where it sorts everything by total instructions, which can be useful, but I want to see an overview of actual seconds and where the time is spent in each function

1592418288
andrewrk
maybe this is called a flame graph?

1592418306
BaroqueLarouche
maybe tracy ?

1592418522
ifreund
perf + flamegraph does this

1592418527
ifreund


1592418583
ifreund
if you just want a list of functions ordered by time without the nesting callstack representation you can pass --flamechart

1592418741
ifreund
if you want a tldr on how to use flame graph i have this written down, i think it works

1592419132
andrewrk
the perf framegraph is doing the same thing that callgrind is doing, it's showing where the time is spent

1592419150
andrewrk
but I want to watch a timeline, where the X axis is time, and the Y axis is where am I in the program

1592419159
andrewrk
BaroqueLarouche, this looks amazing if I can get it to work

1592419225
ifreund
ah, I see

1592420677
pixelherodev
andrewrk: I think kcachegrind

1592420707
pixelherodev
There might be a config option though

1592420710
andrewrk
BaroqueLarouche, tracy looks like exactly the user experience that I want, but it only works with c++ source code

1592420731
andrewrk
it integrates using C preprocessor macros

1592420742
pixelherodev
Guess we know a new Zig tool to make ;)

1592420749
BaroqueLarouche
oh no

1592420757
pixelherodev
Side note, I might be missing for a few days

1592420761
pixelherodev
I broke my OpenGL setup :(

1592420784
ifreund
switch to void, it's less time intensive than gentoo :P

1592420784
andrewrk
in theory we shouldn't need any zig-specific tools

1592420791
pixelherodev
"Error creating GL context" when I try opening a new terminal (my existing one is fine though)

1592420794
pixelherodev
ifreund: it's not a gentoo thing

1592420800
pixelherodev
my legacy gentoo setup (glibc) works fine

1592420810
ifreund
ah musl fun then

1592420812
pixelherodev
Yeah

1592420834
ifreund
basically we just need a new frontend to perf

1592420847
pixelherodev
Perf exposes time-based data?

1592420857
andrewrk
this is really quite impressive:

1592420920
ifreund
pixelherodev: perf records at a given frequency

1592420932
pixelherodev
I wonder if callgrind can

1592420936
pixelherodev
Not the time to check though lol

1592421013
pixelherodev
Downgrading to 20.1.0, then I'll be good to get back to work

1592421069
ifreund
tracy does look quite fancy

1592422143
pixelherodev
Ahh, ccache, how I love you so

1592422156
pixelherodev
Got mesa rebuilt in minutes :)

1592422189
pixelherodev
andrewrk: mind posting the C code you measured?

1592422193
pixelherodev
I want to test it under cproc :P

1592422225
pixelherodev
Then again, I'd have to test the Zig one as well

1592422229
pixelherodev
I'll wait :)

1592422481
pixelherodev
Relatedly actually: is there a way to disable checking timestamps for zig-cache?

1592422509
pixelherodev
hmm

1592422512
pixelherodev
timestamps probably isn't it.

1592422547
pixelherodev
Hashing the AST would probably be a good way of doing what I'm thinking of

1592424561
frmdstryr
Is there any way to get the path from a source file? Like python's module.__file__

1592424763
ifreund
not yet, there is an open proposal for such a feature though

1592426585
frmdstryr
Looks like sort was recently changed to in include a `context: void`  parameter, what is a "void" parameter?

1592426600
ifreund
do we not have an std.os.setenv

1592427866
andrewrk
frmdstryr, the related proposal is

1592427889
andrewrk
frmdstryr, sort now takes a context value of any type, and passes it to your comparator

1592427913
andrewrk
if you did not need a context value before, then you will pass `{}` to sort() and an unused `context: void` in your comparator function

1592427926
andrewrk
but you can pass any for that parameter and it gets passed to your comparator

1592427932
andrewrk
*any type

1592428339
stripedpajamas
can functions only be declared top level? trying to find examples of anonymous functions

1592428372
andrewrk
that's correct until #1717 is implemented

1592428391
stripedpajamas
got it, thanks

1592429682
ifreund
are there any targets where c_int is not i32?

1592429811
andrewrk
ifreund,

1592429823
pixelherodev
ifr in Zig, or at all/?

1592429824
pixelherodev
What's the question?

1592429826
pixelherodev
a

1592429857
frmdstryr
@andrewrk what's the difference between context: void and context: var? From reading the docs on void it has no space so is zig doing some kind of magic with the stack or something to use it?

1592429884
andrewrk
ifreund, looks like msp430 has them at 16 bits, and also we don't have the answer figured out for some of those OS's

1592429899
ifreund
andrewrk: thanks, thats a great reference

1592429938
ifreund
now I wish zig would disallow coercion between the two

1592429970
andrewrk
it does disallow it on the msp430 target

1592429987
andrewrk
frmdstryr, `context: var` lets you pass anything. `context: void` means you must pass the void value. in the case of passing void, it is a no-op at runtime

1592430000
ifreund
yeah, but allowing it on targets where c_int is 32 bits makes the code less portable

1592430018
ifreund
this is a very small problem in reality though

1592430029
ifreund
i don't even know what msp430 is

1592430033
andrewrk
well that's the thing though. you can already do `const foo = if (target_specific_thing) a else b;`

1592430046
andrewrk
so we already have to factor in the target in order to produce correct compile errors

1592430078
andrewrk
I don't think there is any other way to ensure portability other than testing for all the different supported platforms

1592430079
ifreund
you're saying we can't just forbid coercion for all targets? or that forbiding it wouldn't be desireable?

1592430082
frmdstryr
msp430 is a ti microcontroller

1592430093
andrewrk
related issue:

1592430129
ifreund
that sounds super awesome for CI

1592430137
ifreund
that would simplify things so much

1592430191
andrewrk
started to draft out some code to see what implementing it would look like. I think it might just be too hard

1592430195
andrewrk
*I started

1592430308
andrewrk
ifreund, I'm saying that I think it makes sense to base the type coercion rules around the actual bit sizes of integers rather than the "name"

1592430331
andrewrk
in the same way that u64 coerces to usize on 64 bit architectures but not on 32 bit architectures

1592430371
andrewrk
I get what you're saying. You want it to be easier to have the compiler help writing portable code

1592430439
andrewrk
but I think status quo is actually the best way to do it, with regards to this. we have to consider that a given project may be targeting only a specific set of targets

1592430452
ifreund
yeah, I see your point

1592430464
andrewrk
another thing to consider is that we want to support even more exotic architectures

1592430488
ifreund
and so we don't want to make things weird for people who stick to mainstream archs

1592430506
andrewrk
maybe on `-target brainfuck-crazyos-none` c_int is defined as 8 bits, but your project does not care about this particular target, for good reason

1592430562
ifreund
alright, i'm just gonna s/c_int/i32/ my code, c_int is an ugly name :D

1592430607
andrewrk
c_int exists mainly for translate-c and the C ABI, so it makes sense to exist in the ABI boundary between your zig code and wayland.h or whatever, but that's about it

1592430633
frmdstryr
@andrewrk,  I'm really confused, what is the usefulness of passing void?

1592430657
andrewrk
frmdstryr, it's not useful to pass void- but it's useful to pass something other than void

1592430695
andrewrk
imagine that you are sorting by name, in a global string buffer. your objects are of type `string_index: usize` and you want to sort them

1592430748
ifreund
is does translate_c do something special for c_int vs i32? i'm pretty sure it accepts a function signature on the ABI boundry with i32 where an int is expected

1592430753
andrewrk
frmdstryr, fn lessThan(context: []const []const u8, a: usize, b: usize) bool { return std.mem.order(u8, context[a], context[b]) == .lt; }

1592430793
andrewrk
std.sort.sort(usize, items, global_string_buffer, lessThan);

1592430815
andrewrk
this way your items array does not need each element to contain the reference to the global string buffer, saving possibly many bytes in memory

1592430832
andrewrk
it may help to consider this is the same pattern when spawning a thread

1592430842
frmdstryr
So void is acutally type?

1592430866
frmdstryr
or type id

1592430868
andrewrk
have a look at the std.sort API. there is no void there. it accepts any type for the context

1592430984
andrewrk
if you just want to fix your code, add `{}` to the call to sort() and `context: void` to your lessThan function

1592430996
andrewrk
the generated code will be unchanged

1592431037
ifreund
by the way, I'm pretty happy with where the std.log PR is right now, just waiting on a review to go through with the documentation updates before merge

1592431095
ifreund
I could understand if you want to hold off to figure out what to do with #2029 though

1592431193
frmdstryr
Yeah I fixed the code already, just trying to understand what the change is doing...

1592431265
frmdstryr
A void arg is it's like a comptime var but it has no influance on acutal function signature?

1592431276
ifreund
a void arg is nothing

1592431307
ifreund
by providing a comparison function with a void arg you say that it doesn't take any context

1592431338
ifreund
comptime compareFn: fn (context: @TypeOf(context), lhs: T, rhs: T) math.Order,

1592431339
pixelherodev
A void arg is best thought of as a lack of an argument

1592431345
pixelherodev
It means you're not passing

1592431375
ifreund
as you can see the type of the context arg is determined by what you provide

1592431394
ifreund
if you provide {} which has type void, it's as if there is no context arg in the codegen

1592432076
andrewrk
ifreund, noted, thanks. I'll do a round of PR merges today, will be sure to check that one out

1592432132
ifreund
thanks!

1592432717
andrewrk
ifreund, good timing, too. it will be handy for self-hosted:

1592433039
ifreund
yeah, I was thinking it would be :)

1592433094
ifreund
river is going to stay on 0.6.0 for the forseeable future but I backported the logging interface yesterday

1592433719
frmdstryr
Ah, I think I see now... maybe... if someone can confirm. A void arg is only used to avoid needing to change the function interface?

1592433723
frmdstryr
but unlike just using var, it will still give error if they try to pass a "non-void" argument to it.

1592433773
andrewrk
correct

1592433816
andrewrk
it is similar to passing `void` as the "Value" type of a hash map to make it a set:

1592433885
ifreund
or the pattern used to make struct fields depend on a build option: my_field: if (build_options.foo) Foo else void,

1592433930
frmdstryr
Yes looking at thread helped with that one. It would be nice if a few cases like those would be mentioned in the docs under the void section as it's really confusing :)

1592433960
ifreund
feel free to open a PR :)

1592434038
Zannzen
is there a way to limit the amount of resources a `zig build` can use?

1592434077
Zannzen
(I'm assuming it's multithreaded internally but might be wrong there)

1592434126
andrewrk


1592434178
andrewrk
Zannzen, sandboxing and related use cases of zig build is on the roadmap but not available today

1592434247
Zannzen
andrewrk ok, thanks. I'm on a backup computer rn so will have to hope I don't blow through it's 2g/2g ram/swap :)

1592434301
Zannzen
or just spin up another vps to work on

1592434307
andrewrk
zig build is likely not the problem, but if you're building zig, the stage1 compiler memory usage might be.

1592434373
Zannzen
zig build has gotten close for building zls however yes stage1 did require almost all my swap

1592434379
Zannzen
worth it though

1592434453
Zannzen
surprisingly `make install` used the most (just copying the stdlib)

