1580693653
daurnimator
pixelherodev: yeah caught errors sometimes show up.

1580701013
seoushi
So in c I used void pointers for generics/structs of any type. So in zig I can do ArrayList(*void) which works but I'm not sure that is the best option. The ArrayList doesn't know all the possible types it will contain. Is this still a "good" practice or is there a feature I'm missing out on?

1580701283
daurnimator
seoushi: see the allocator interface for how you might do that

1580701331
seoushi
I know how to do it. I'm just wondering if there is something better that I'm missing out on

1580701363
seoushi
or if that is pattern in zig a well

1580722301
Snektron
seoushi, you could consider @OpaqueType(), or a union/tagged union if you know all types beforehand

1580733967
betawaffle
i sorta wish there was a way i could constrain a function to not allow certain things, like stack usage.

1580734092
betawaffle
i also wish i could explicitly define a calling convention, forcing it to put arguments/return values in specific places

1580734899
mq32
custom calling convention?

1580734904
mq32
or just enforce a default one?

1580735841
mq32
hm

1580735847
mq32
sadly, my experiments with zig and godot are failing

1580735860
mq32
code compiles, but it will segfault at a place inside the engine i cannot locate

1580735899
betawaffle
mq32: custom, like being able to specify that my entrypoint function is called with arguments in registers X and Y

1580735925
mq32
so yeah, custom calling convention

1580735933
betawaffle
as an alternative to a "naked" function with inline asm that reads those registers into local variables

1580735956
betawaffle
(which incidentally may be spilled to stack, if i'm not careful)

1580736007
betawaffle
basically it'd be nice to be able to be confident in writing more things without asm

1580736062
mq32
problem with calling conventions is that the code gets forced to a certain CPU arch

1580736069
mq32
zig code is pretty much CPU agnostic atm

1580736122
betawaffle
right, but it has all kinds of comptime things that make it feasible to tweak things, rather than right multiple implementations

1580738880
mq32
gruebite, i found another problem with Godot

1580739567
mq32
huh

1580739579
mq32
zig has problems with following C abi when passing structs?!

1580740258
betawaffle
where the F is this coming from?

1580740270
betawaffle
i can't seem to build anything with zig anymore

1580740314
TheLemonMan
betawaffle,

1580740346
TheLemonMan
mq32, a lot, the ABI is partially and incorrectly implemented

1580740350
betawaffle
weird... i thought i tried to switch that

1580740366
mq32
TheLemonMan, i noticed

1580740378
mq32
i'm stripping down a example to three files and ~50 loc

1580740465
TheLemonMan
mq32, there's already 4344 open

1580740513
mq32
good to know

1580740625
mq32
hah

1580740630
mq32
and i found a bug in zig build :D

1580740663
TheLemonMan
It really do be like that sometimes

1580740773
fengb
Does that mean LLVM isn’t actually i386 compatible?

1580740805
pixelherodev
Apparently, yes

1580740811
fengb
Also why is P4 targeting 386? I thought i686 is P2 architecture

1580740812
TheLemonMan
no

1580740863
TheLemonMan
you have to read some of the commits that thead to the use of lahf/sahf instead of pushf/popf

1580740919
TheLemonMan
"Pentium4" is a superset of "i686"

1580741291
fengb
Oh wait it’s only jzck’s version that targeted P4

1580743053
fengb
Great... now I want to output html and finish implementing my templating system

1580743289
companion_cube
yay for comptime templates, heh?

1580743350
fengb
Yeah, I got bored once I realized I needed actual logic for conditionals / loops

1580743440
mq32
a lot should be possible with comptime and no code-generation

1580743449
mq32
like "output this only if this condition is met"

1580743467
mq32
where condition is either a predicate function or a trivial comparison (true, false, >=,<=,==,!=)

1580743585
fengb
Yeah, but I still need an ast of sorts

1580743603
fengb
And that led to comptime allocators so I started a different project instead >_>

1580743633
mq32
why ast? ah well, comptime stacks are a thing too

1580743668
fengb
Because I need to store logic that requires runtime values

1580743678
fengb
Loops within loops and such

1580743701
fengb
I built a super basic tree and I realized I could leverage an object pool after I dropped the project

1580743715
fengb
So it's something I wanted to go back to... but that also means I'm never gonna finish anything :P

1580744436
pixelherodev
It's undefined whether an if-unwrap is a copy, correct?

1580744664
fengb
It's currently always a copy, but that's not by design yes

1580744668
fengb
Er... it's currently never a copy*

1580744708
pixelherodev
Right, that's what I thoujght

1580744710
pixelherodev
s/j//

1580744720
pixelherodev
Trying to avoid accidentally relying on impl-defined behavior like that

1580744753
fengb
andrewrk has mentioned to manually do a copy if you want one, and use `if (foo) |*bar|` if you need it to be a reference

1580744831
pixelherodev
oh right, forgot you could do `*n`

1580745761
metaleap
keep running into friggin "Assertion failed at /deps/zig/src/analyze.cpp:nnn in foo_bar_baz" crashes

1580745986
fengb
Welcome to zig ;)

1580746407
pixelherodev
s/zig/unstable alpha status compilers/

1580746833
pixelherodev
Proposal: printing a member of a structure that is a `[]u8` via std.fmt should surround it with quotes and escape the insides

1580746856
pixelherodev
(If I propose something here, it's a half-baked idea I don't consider good enough to submit to GH)

1580747091
fengb


1580747116
fengb
We should introduce him to Zig style errors :)

1580747165
companion_cube
not sure if it would work well for F#, fengb

1580747181
companion_cube
mixing effects and higher-order functions is hrd

1580747184
companion_cube
hard

1580751160
SyrupThinker
pixelherodev: Addition: And add the ability to limit the printed length.

1580751160
SyrupThinker
It tried to print megabyte big buffers several times on me

1580754523
fengb
Maybe I can write my fancy sexpr => html translator in Zig

1580755258
pixelherodev
SyrupThinker, you can override it locally manually

1580755276
pixelherodev
I've done that for a couple stdlib functions temporarily while awaiting proper fixes upstream

1580755359
SyrupThinker
I'm doing that, but you just made a "proposal" so I might as well tag along because its related

1580755530
pixelherodev
That reminds me of a hashmap patch I plan on finishing up soon and upstreaming

1580756119
dimenus
woo, got libsoundio working with libmpg123 in zig :)

1580756460
fengb
nice

1580757863
dimenus
i don't quite understand how channels work in libmpg though

1580758006
dimenus
i have what is supposed to be stereo audio, but i'm just reading the bytestream directly into both channels in libsoundio

1580759166
gruebite
mq32: i would love to collaborate. want to use my existing repo?

1580759206
gruebite
it can be renamed if necessary:

1580759338
mq32
gruebite, right now we are blocked on the #4344

1580759404
gruebite
yep

1580759570
mq32
i wonder if we can make something that is like

1580759576
mq32
const Godot = @import("godot");

1580759650
mq32
pub fn godotMain(nscript: *Godot.NativeScript) void {

1580759669
mq32
nscript.registerClass(MyCustomNode, "Reference");

1580759670
mq32
}

1580761220
dimenus
andrewrk: can i ask you a quick libsoundio question?

1580763067
andrewrk
dimenus, sure

1580763326
dimenus
maybe it's not a libsoundio issue (i'm a newbie when it comes to this), but essentially i'm expecting the audio to be interleaved as LRLRLR, but ultimately the only solution that's working is to pull down as many bytes as if the stream was stereo

1580763329
dimenus
and pack that into one channel

1580763353
dimenus
here's my repo:

1580763386
dimenus
fyi, it's hardcoded to 48k hz for now

1580763387
daurnimator
dimenus: btw, libsndfile is brilliant as a C library. Might want to use that for all your codec support?

1580763445
dimenus
daurnimator: thanks for the tip, i'm using libmpg123 atm

1580763582
daurnimator
dimenus: that's still required for mp3

1580763624
dimenus
ah got it. i probably wouldn't use mp3 on things I build myself, this is just to finish up my breakout clone (

1580763641
dimenus
i'm almost done, just have text/audio to do

1580764093
dimenus
andrewrk: I actually think I'm overwriting past where I should be in libsoundio

1580764254
andrewrk
dimenus, I think you can set the requested layout

1580764300
dimenus
in libmpg123 or soundio?

1580764326
andrewrk
dimenus, in libsoundio, set the layout field of your output stream before calling soundio_outstream_open

1580764647
andrewrk
dimenus, as for interleaved, the soundio API hides that from you with the "areas" struct

1580764690
dimenus
i get that, which is why it feels like my code SHOULDN'T work

1580764691
andrewrk
look carefully at how the examples use the SoundIoChannelArea struct. it abstracts away interleaved/separate channels

1580764702
dimenus
although, the step on the area is 4 bytes not 2

1580765051
dimenus
andrewrk: I don't understand what you mean by hides it from me with the areas struct?

1580765064
dimenus
Are you saying that I can pass the same stream into all areas if it's interleaved and it will just work?

1580765108
andrewrk
if you do the math like it's done in the examples, with `areas[channel].ptr + areas[channel].step * frame` then it will work regardless of whether the layout is interleaved or planar

1580765247
dimenus
ah, yeah that's what i missed. I thought step would be two bytes so i just casted the ptr to an [*]i16 instead of [*]align(4) i16

1580765255
dimenus
thanks

1580765902
dimenus
andrewrk: thanks, looping over works as expected now. Apologies for thinking I could ignore the example and just straight copy into the buffer. I now see that the two pointers are returned are only two bytes appart - so my situation just happened to work by happy accident

1580765921
andrewrk
no worries. it's a bit confusing

1580765937
andrewrk
that was the simplest abstraction I could come up with to handle all the different sound systems

1580765943
dimenus
i was trying to straight copy because i thought it would be faster, but if I can just set a non-default layout to do that

1580766002
dimenus
this also explains why i was getting so much static / garbage when I tried to implement it this way before (but without mapping the step)

1580766019
dimenus
because I was mapping samples two bytes out instead of 4

1580768014
metaleap
using `builtin.TypeInfo` stuff: AFAICT whenever at least one arg of multiple in an `fn` is `var`, the `FnArg.arg_type` seems `null` for

1580768029
metaleap
just to confirm: is that always the case or are there exceptions?

1580769287
metaleap
also cannot take such a func's address?! is that true or did i get a confused compiler msg..

1580770010
SyrupThinker
metaleap: Well whats the message?

1580770030
metaleap
already gone, but sth like "cannot take addr of size-0 type"

1580770098
metaleap
only for ptrToInt of an fn with a `var` arg, when reverting to fully-typed no prob of course. wasnt a big need for var there tho, just had to try while at it

1580770411
SyrupThinker
Well I'd say thats a case of unhelpful compiler error

1580770519
SyrupThinker
Should probably say something like "cannot take address of var function"

1580770651
metaleap
it comes up for different situations, so would guess these situations all end up at the one code path

1580770658
metaleap
that raises it

1580770685
metaleap
probably going to need carrying-contextual-details-along logic in there sooner or later

1580770709
metaleap
for more differentiated msgs

1580770753
fengb
Ah yeah generic functions aren’t “real”. You’ll need to wrap it if you want to make a function pointer

1580770804
SyrupThinker
Which mentions something I just wanted to point out :)

1580770850
SyrupThinker
const f: fn(u8) void = varf; // fn varf(t: var) void {}

1580770867
SyrupThinker
I'd expect that to work

1580770905
SyrupThinker
But it doesnt do a coersion

1580770998
SyrupThinker
Then you could also directly pass var functions to functions with a compatible signature

1580771839
metaleap
would be neat tbh. of course such a coercion would force-create the instantiation but that would be the intent in such cases anyway.

1580771867
metaleap
(if it didnt already exist, i mean that particularly-typed instantiation of the generic fn)

1580772104
fengb
Sounds like a proposal :P

1580772146
companion_cube


1580772636
fengb
Is there an integer equivalent to @fabs?

1580772688
fengb
math.absCast()

1580773064
Snektron
math.intAbs

