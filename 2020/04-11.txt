1586564351
pixelherodev
No, that's a bug

1586564361
pixelherodev
oh they're gone

1586564484
Xavi92
pixelherodev: who were you talking to?

1586564499
waleee-cl
r4pr0n , but he nipped out

1586564505
Xavi92
Oh okay

1586564508
pixelherodev
Yeah

1586564512
pixelherodev
It happens

1586564647
waleee-cl
well "he" ," they"  is the kosher for all situations

1586564664
r4pr0n
i'm actually still here, kept reading the log

1586564696
marijnfs_
what is the 'c' allocator?

1586564705
marijnfs_
when you allocate to take over by an external library

1586564738
pixelherodev
The C allocator allocates using the libc's realloc function (basically malloc/free)

1586564880
r4pr0n
and pixelherodev: Those are the files I used

1586564900
r4pr0n
and this is the command to compile I used: `zig cc test.c -L . -lsfhandler`

1586564951
r4pr0n
though for some reason I can't get it to compile with clang or gcc, just with zig cc

1586565015
r4pr0n
or rather to link, I get the error `/usr/bin/ld: ./libsfhandler.a(./sfhandler.o): relocation R_X86_64_32S against `.bss' can not be used when making a PIE object; recompile with -fPIE`, maybe I'm doing something wrong after all

1586565170
r4pr0n
oh and of course I did `zig build-lib sfhandler.zig` before the compilation

1586566322
marijnfs_
can zig do anonymous functions now? at least locally in a function?

1586566372
Xavi92
Are optionals functionally similar to tagged unions with None and Some?

1586566795
fengb
marijnfs_: yes by using a wrapping struct: `const func = (struct { fn func() void {} }).func;`

1586566919
Xavi92
Which versions of llvm/lld/clang is zig able to compile under?

1586567040
Xavi92
Took this fork

1586567551
r4pr0n
Xavi92: You need LLVM 10 for the latest master

1586567555
r4pr0n
what error did you get?

1586568130
Xavi92
Oh, r4pr0n left

1586568240
Xavi92
Well, I've merged master branch from the llvm official repo and into the fork. Now I'm getting CMake-related errors when the Makefile's are being generated, probably due to an old CMake version being installed (3.10.2)

1586568272
Xavi92
I'll try it again tomorrow - now it's bed time!

1586568529
Xavi92


1586568576
marijnfs2
are = undefined structs zeroed out?

1586568642
shakesoda
no

1586568652
shakesoda
use std.mem.zeroes for that

1586568717
shakesoda
i think undefined memory gets cleared to 0a0a0a0 or something funky like that in debug but it isn't zeroed

1586568733
marijnfs2
i want to create a [32]u8 with a shorted string, the rest should be zeroes

1586568742
marijnfs2
shorter

1586568752
mikdusan
`[_]u8{0} ** 32;`

1586568753
shakesoda
std.mem.zeroes it and fill in the part you want

1586568760
shakesoda
or do that, sure

1586568774
marijnfs2
didn't know about **

1586568831
marijnfs2
then what do I do to copy the string into it?

1586568890
shakesoda
copy into a slice (mem.copy) or copy the characters with a loop?

1586568907
marijnfs2
ah yeah that works

1586568930
marijnfs2
does mem.copy use the shorted slice? Or only check the target

1586569017
mikdusan
also `var buf: [32]u8 = [_]u8{0}

1586578257
andrewrk
does anyone want to help me write release notes? specifically for the Language Changes sections

1586578316
andrewrk


1586578355
andrewrk
rendered version:

1586578373
andrewrk
idea is just to show how the language has changed from 0.5.0 to 0.6.0

1586578414
andrewrk
the number of contributors and contributions has doubled since last time

1586581447
pixelherodev
andrewrk, sure

1586581462
pixelherodev
I haven't really done much code-wise, if I can help with this I'll gladly do so

1586581610
pixelherodev
GitHub PR is preferred method of contribution?

1586581647
pixelherodev
also, is that rocket comment needed? :P

1586581976
emekoi
it's been a while since i last built zig from master, but i think the time has gone done by over 50%

1586582075
fengb
Hiya welcome back!

1586582169
emekoi
is building on windows, via make/ninja still supported?

1586582659
mikdusan
emekoi: time-to-build is down because as of llvm10 we no longer build llvm sub-project `lld` with zig

1586582697
emekoi
all our patches were incorporated?

1586582731
emekoi
i remember reading about work on lld for macho restarting]

1586582760
mikdusan
the upstream lld fixes happened yes, I don't know the details

1586582808
mikdusan
macho stuff sounds promising

1586583818
emekoi
does anyone if @tagName crashes when given an exhaustive enum?

1586584427
emekoi
hmm, i think i found a bug

1586584933
emekoi
is there a way to check if a non-exhaustive has a named field?

1586586637
tdeo
hm, i'm trying out zig and rust for writing a pebble watch app, and it seems for a function that returns a 64-bit struct by value, zig gets the abi wrong

1586586678
tdeo
in zig's llvm ir it's `%GRect (i8*)`, but in rust's output it's `void (%"sys::GRect"*, %"sys::Layer"*)`, where the signature in c is `GRect layer_get_bounds(const Layer *)`

1586586746
tdeo
the rust one gives me the correct result, zig one doesn't

1586586797
tdeo
flags -target arm-freestanding-eabi -mcpu cortex_m3 for zig, and target thumbv7m-none-eabi for rust

1586587121
shakesoda
tdeo: struct returns by value do some funky stuff sometimes i've found

1586587157
shakesoda
i ran into some issues that sound awfully similar to this when i was getting imgui working in my sandbox

1586587175
shakesoda
some struct parameters by value are funky too

1586588399
daurnimator
emekoi: yeah that was an issue I hit in

1586588411
daurnimator
tdeo: which `callconv()` did you use?

1586589107
tdeo
callconv(.C)

1586590527
r4pr0n
andrewrk: a few days ago you told me how to enable the zig segfault handler in c programs. i tried that and it actually panics: `Panicked during a panic. Aborting.`

1586590528
r4pr0n
Those are the files I used:

1586590530
r4pr0n
and this is the command to compile I used: `zig build-lib sfhandler.zig && zig cc test.c -L . -lsfhandler`

1586590532
r4pr0n
though for some reason I can't get it to compile with clang or gcc, just with zig cc

1586590534
r4pr0n
or rather to link, I get the error `/usr/bin/ld: ./libsfhandler.a(./sfhandler.o): relocation R_X86_64_32S against `.bss' can not be used when making a PIE object; recompile with -fPIE`, maybe I'm doing something wrong after all

1586590560
r4pr0n
I'd report an issue but I'm not sure if this is my fault

1586590694
daurnimator
tdeo:

1586590747
TheLemonMan
tdeo, the C ABI is only (badly) implemented for x86_64

1586590802
TheLemonMan
don't expect anything but integer/pointers to work, and even then you cannot trust the values to cross the boundaries correctly

1586590822
daurnimator
tdeo: then why do we have arm32 freestanding as tier 1 support?

1586590827
daurnimator
uh *TheLemonMan

1586590922
TheLemonMan
I don't know?

1586591117
daurnimator
TheLemonMan: is there a relevant issue open for it? I'm not seeing one

1586591157
TheLemonMan
no, there are a few issues about values getting corrupted

1586593797
pixelherodev
Proposal: `zig fmt` should be able to run on C/C++ files

1586593806
pixelherodev
Compiler shouldn't enforce it though

1586593818
pixelherodev
Just as a useful touchup

1586595025
wilsonk
r4pr0n: you still here?

1586595031
r4pr0n
yeah

1586595078
wilsonk
you can build the sfhandler.o file using zig with the --bundle-compiler-rt flag and -fPIC to solve your issues with using clang/gcc instead of zig cc

1586595127
wilsonk
...still get the same 'panicked during a panic' but at least you can test with clang/gcc if needed

1586595520
TheLemonMan
panicked during a panic? that's bad

1586595554
TheLemonMan
do you have the source code for that binary?

1586595557
r4pr0n
Okay -lc seems to make it work with zig cc, your compiler flags fix that issue, but now i get

1586595597
wilsonk
TheLemonMan: up above r4pr0n listed the three files at 1:35:28 AM

1586595607
TheLemonMan
r4pr0n, -fno-stack-check

1586595648
r4pr0n
thanks

1586595650
r4pr0n
now it works

1586595659
r4pr0n
though i guess i'm missing some debug symbols

1586595695
TheLemonMan
why is that?

1586595696
r4pr0n
because I just get

1586595781
TheLemonMan
eh maybe you should enable the use of the frame-pointer in the C code

1586595874
r4pr0n
how would i do that? i tried -fno-omit-frame-pointer and it didn't seem to work

1586595941
wilsonk
r4pr0n: what are your exact command lines for building? I am still getting the panic in a panic?

1586595973
r4pr0n
that seems to be caused by a missing -lc

1586595974
wilsonk
and yes, I removed the cache and all .o/.a files before anyone asks ;)

1586595988
r4pr0n
zig build-lib --bundle-compiler-rt -fPIC -fno-stack-check sfhandler.zig -lc

1586595991
r4pr0n
that's the command i run

1586595996
TheLemonMan
when in doubt check the binary

1586596039
wilsonk
r4pr0n: ah, yes I was missing the -lc...built it a few different ways and missed that on the last attempt

1586596122
TheLemonMan
the fault address also looks a bit off...

1586596188
r4pr0n
oh that is my fault (no pun intended) i send you the output of the actual program i wanted to try this at, not from the test.c file

1586596199
r4pr0n
that's the one i get there:

1586596225
TheLemonMan
oh that's better

1586596281
TheLemonMan
can you send me the binary?

1586596364
r4pr0n
uhm yes, i'll upload it

1586596430
r4pr0n


1586596492
wilsonk
r4pr0n: just to be clear, you only need the --bundle-compiler-rt flag if you are going to build the c binary with clang/gcc and not 'zig cc'.

1586596527
r4pr0n
oh okay

1586596550
r4pr0n
i just tested and "-g" kinda makes it work but also not a 100%

1586596665
TheLemonMan
well that's the best you can get, unless you compile the libc with the frame pointer enabled

1586596719
r4pr0n
so you mean i would have to recompile glibc?

1586596755
TheLemonMan
there are no more interesting frames below the "main" one

1586596773
TheLemonMan
you have __libc_start_main but as I said that as no frame pointers

1586597141
r4pr0n
that's true, it's just that it doesn't really work for the "real project" i wanted to use it for, even though i added -g

1586597158
r4pr0n
but i guess i'll look into why that's not working

1586597251
TheLemonMan
can you show the non-working backtrace?

1586597378
r4pr0n
that's the one i already sent, still get that one with -g

1586597433
TheLemonMan
I see, there may be some problem with the debug info parser there

1586597451
TheLemonMan
if you send me the binary I can have a look while LLVM builds

1586597643
r4pr0n
that'd be great, will do

1586597752
r4pr0n


1586597778
r4pr0n
the address is different on every run though

1586597789
TheLemonMan
oh that's cool

1586597806
TheLemonMan
nice terminal!

1586597828
TheLemonMan
but how do I make it crash?

1586597869
r4pr0n
by reproducing this bug (create file with the characters listed in the issue and open it with vim, might take 2 tries or so)

1586597938
wilsonk
TheLemonMan: do you build LLVM very often?

1586597976
TheLemonMan
no crash :(

1586598000
r4pr0n
hm that's weird

1586598002
TheLemonMan
wilsonk, I'm testing a patch

1586598021
TheLemonMan
running the test suite is another huge time sink

1586598038
wilsonk
not sure if you have tried building clang with LTO+PGO but I built it a couple nights ago and it dropped subsequent LLVM builds by about 23%...just so you know. So if you have to build LLVM a lot it might be worth the effort of LTO+PGO

1586598123
wilsonk
LTO+PTO (and I would try facebooks bolt on top of that except my EPYC machine doesn't support pmu) takes about 2 hours on a 64 core machine, so it could take A VERY LONG TIME on a quad core or similar machine. Just so you are aware :)

1586598128
wilsonk
*PGO

1586598146
TheLemonMan
it's not much of a problem, incremental rebuilds are pretty fast

1586598184
r4pr0n
TheLemonMan: oh actually i think it only crashes in neovim, maybe you can try that, i'm not exactly sure why

1586598201
TheLemonMan
one more reason not to use neovim!

1586598217
r4pr0n
xd

1586598234
r4pr0n
what are other reasons though, overall i like it more than vim actually

1586598311
TheLemonMan
still not crashing

1586598329
wilsonk
TheLemonMan: the other problem was that the LTO+PGO clang binary went into an infinite loop when bulding zig0?!? And I mostly did all this just to test and see if I could get the zig build time improved...what a pain :(

1586598336
r4pr0n
sometimes you need to try it 2-3 times or so

1586598418
TheLemonMan
wilsonk, hard to tell where the problem is with such a convoluted pipeline heh

1586598426
wilsonk
yep

1586598443
TheLemonMan
r4pr0n, I've tried at least 20-30 times :\ what font are you using?

1586598516
r4pr0n
hm...

1586598532
r4pr0n
i'm using liberation mono for that currently

1586598625
TheLemonMan
welp it's still not crashing

1586598868
r4pr0n
i'll try to debug when exactly it's crashing, maybe it's some neovim config setting, but it's kinda indeterministic (it just didn't segfault after a bunch of tried with the same neovim config with which it did crash before?!), i'll write in here again when i found out what's the problem

1586599181
TheLemonMan
the dwarf parser doesn't find any problem with the debug info so

1586599479
r4pr0n
hm okay

1586599512
r4pr0n
well now i'm at the point where it doesn't even segfault with my nvim config and all even though i did it exactly like before 😕

1586599596
pixelherodev
The number of times I've gone to ask a zag question here and then remembered it was extremely simple to parse and I could just check /usr/local just went into the double digits I think :)

1586600197
pixelherodev
Things not to `comptime`, part three: SHA256 hashing :P

1586600217
r4pr0n
why not :D

1586600901
pixelherodev
Try it.

1586600905
pixelherodev
You'll see why not.

1586600906
pixelherodev
:P

1586600918
pixelherodev
It works (probably, I didn't let it finish)

1586600921
pixelherodev
But it burns CPU like mad

1586600942
pixelherodev
It's inefficient and wasteful.

1586600955
pixelherodev
Running it thousands of times at runtime would still be faster than running it once at comptime

1586600977
pixelherodev
Source: in debug mode it finishes in milliseconds at runtime. I interrupted it after it ran for >1 minute

1586600981
pixelherodev
in comptime that is

1586601031
pixelherodev
If I'm mean and say it took 100 ms (pretty sure it was faster), that's still >360 times faster in debug mode. Plus, I didn't let it finish in comptime, and there's always release mode for real speed

1586601045
pixelherodev
s/360/600 (sorry I'm tired)

1586601086
pixelherodev
Anyway, I'm going to get back to test-casing my dynarec (the hashing is to ensure it's using the ROM it knows how to test)

1586603267
r4pr0n
well i guess that could be optimized in comptime, couldn't it?

1586603280
r4pr0n
that speed difference is much more significant than it should be

1586603595
pixelherodev
Oh of course

1586603605
pixelherodev
comptime's implementation right now isn't focused on speed as I understand it

1586603627
pixelherodev
Performance of self-hosted comptime is intended to match CPython is what Andrew's said a few times IIRC

1586603696
pixelherodev
(That's slang for If IRC, which coerces to true)

1586603706
pixelherodev
(:P)

1586604947
Xavi92
r4pr0n:

1586604972
Xavi92
r4pr0n: this happened when configuring clang master

1586605093
wilsonk
Xavi92: that seems to be picking up clang 6.0.0? Not sure if you can build clang master with that old of a compiler

1586605118
wilsonk
which OS are you on?

1586605143
Xavi92
wilsonk: Kubuntu 18.04 LTS

1586605211
wilsonk
hmm, I built llvm-10.0.0 on Ubuntu-18.04LTS so it should work for you I would think. Do you really have clang-6.0 installed? Nothing newer?

1586605259
wilsonk
I think apt has up to 8 available without adding a new ppa

1586605390
Xavi92
wilsonk:

1586605408
wilsonk
I also build llvm-10.0.0 on Ubuntu-16.04, buster, MacOSX Catalina and win10. Each of those had clang-9 available because I had previously built 9 for zig development.  And I haven't tried llvm git head at all...just the src download of 10.0.0

1586605464
wilsonk
does 'sudo apt list |grep clang' show a newer clang available?

1586605536
Xavi92
wilsonk: up to clang-9

1586605631
wilsonk
yeah, see if you can upgrade to clang-9 perhaps. I have the LLVMDistributionSupport.cmake available so I assume that comes with a newer clang

1586605868
wilsonk
Oh, actually it looks like you were trying to run cmake in the ..llvm-project/clang directory?  You have to run an out of tree build at the top level for llvm/clang so you should make a 'build' dir under llvm-project (and clang should be uncompressed under llvm-project/tools...compiler-rt and lld under llvm-project/projects if you need them), and then do a 'cmake .. <options>...' in the 'build' dir

1586605916
wilsonk
you can't build directly in the clang (or lld/compiler-rt or whatever) directories

1586605922
Xavi92
wilsonk: ~/llvm-project/clang/build$ cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/zig-toolchain -DCMAKE_PREFIX_PATH=$HOME/zig-toolchain -DCMAKE_BUILD_TYPE=Release

1586605994
wilsonk
yeah, you have to move up one directory so that your 'build' is directly under llvm-project...not under clang

1586606108
Xavi92
wilsonk:

1586606223
wilsonk
not necessary to do 'cmake ../clang <options>'  just do 'cmake .. <options>'. You have to pick up the main llvm directory

1586606260
wilsonk
gcc 7.5 should be able to build clang-10 just fine, btw

1586606286
Xavi92
wilsonk: but .. does not contain any CMakeLists.txt

1586606289
Xavi92
~/llvm-project/build-clang$ l ..

1586606290
Xavi92
build-clang/  clang-tools-extra/  CONTRIBUTING.md   flang/  libclc/  libcxxabi/  lld/   llvm/  openmp/         polly/  README.md

1586606290
Xavi92
clang/        compiler-rt/        debuginfo-tests/  libc/   libcxx/  libunwind/  lldb/  mlir/  parallel-libs/  pstl/   utils/

1586606319
wilsonk
oh, hmm.  So that is a direct clone of llvm from github?

1586606360
Xavi92
Exactly

1586606391
Xavi92
wilsonk: it's

1586606415
wilsonk
I would definitely pick up the source release (ie. 10.0.0) if you are going to do much with zig. That is the 'release' that is supported and llvm/clang move so fast things might have already broken for building zig with git HEAD

1586606424
Xavi92
The former includes preliminary support for MIPS I, which hasn't been included into upstream yet

1586606445
wilsonk
oh, hmmm

1586606449
wilsonk
one second

1586606480
Xavi92
wilsonk: llvm has a release/10.x branch, though

1586606519
wilsonk
actually, no I just looked at my llvm-project build on another server and it should work with 'cmake ../llvm'

1586606534
wilsonk
that will still pick up clang, I believe

1586606595
wilsonk
Oh, nope you will need to specify which subprojects with

1586606625
wilsonk
-DLLVM_ENABLE_PROJECTS=<comma separated list>

1586606712
Xavi92
wilsonk: that differs from the build instructions here ->

1586606745
Xavi92
wilsonk: what if I cherry-pick MIPS I support into release/10.x?

1586606767
wilsonk
yeah, those instructions are only for the source tarballs, not for the git clones

1586606811
wilsonk
right at the top of that page is the download links for the tarballs...git is a little different

1586606820
Xavi92
But yesterday that worked for

1586606944
wilsonk
hmm, are you sure those exact instructions worked for impiaaa? Because the build instructions on that website are exactly what I am following for llvm git.  See about mid way down where you have to choose the projects and 'cmake ../llvm'?

1586607041
wilsonk
you also might want to pick a different generator (like Ninja if you have it installed) but otherwise things should work fine by following those instructions on impiaaa exactly

1586607167
Xavi92
wilsonk: I swear they worked. I'll try again with release/10.x, for the sake of doing it

1586607174
wilsonk
impiaaa is a few months old also, so I would merge the 10.0.0 RELEASE tagged llvm into it and then build that...just to be sure that zig will build afterwards

1586607323
Xavi92
wilsonk: yeah, that's what I'm referring to. Let's see what happens :)

1586607366
Xavi92
Right, cmake worked

1586607372
wilsonk
hmm, that impiaaa repo is only one commit ahead of llvm (and then 11850 behind master).  I would download the 10.0.0 src tarballs and then hand modify the four files in that commit by hand. Not much there really (unless I am missing a bunch of other commits or something)

1586607397
wilsonk
oh, ok...well if cmake worked then hopefully the rest will

1586607405
Xavi92
Let's hope so :)

1586607457
wilsonk
I would just hate to have to wait an hour or two (depending on your machine) to build llvm only to watch it fail :(  But if you got the 10.0.0 release then it should be ok

1586607473
wilsonk
*fail on zig

1586608025
wilsonk
ok, good luck. I am off to bed o/

1586608057
Xavi92
Night!

1586609126
ifreund
is there any fancy way to iterate over a slice in reverse? or do i just need to use a while loop?

1586614738
nmeum
hey, I am currently experimenting with freestandig zig and I was just wondering: If I have a function returing a struct how is memory for it actually allocated? for example:

1586615051
ikskuh
nmeum, in zig functions there's a result location passed as a hidden parameter

1586615083
ikskuh
there isn't documentation on that already

1586615089
ikskuh
but in short:

1586615105
ikskuh
your function does not "return" value but it just constructs the value where it will be located in the end

1586615111
ikskuh
so if you do

1586615122
ikskuh
var foo = rxctrl.init();

1586615134
ikskuh
the return value is in "foo"

1586615143
nmeum
ah!

1586615155
nmeum
and if foo is part of a function body it is stored on the stack of that function, right?

1586615156
nmeum
neat!

1586616600
Xavi92


1586616646
TheLemonMan
good luck

1586616733
FireFox317
looks like floating point support that is not yet available? Xavi92

1586616876
Xavi92
FireFox317: from which side?

1586616948
Xavi92
The target I'm pointing to does not have FPU, but I don't know if that's a problemm

1586616956
Xavi92
OTOH, main.zig only has an empty main

1586617030
TheLemonMan
something is pulling in code from exp.zig

1586617045
TheLemonMan
it's very likely the format code, are you using it?

1586617137
Xavi92
$ cat main.zig

1586617137
Xavi92
fn main() void {

1586617137
Xavi92
}

1586617267
TheLemonMan
there's more than it meets the eye

1586617291
TheLemonMan
try adding your own panic function

1586617318
TheLemonMan
and you should really use `export fn _start() noreturn { ... }`

1586617357
TheLemonMan
unless you're already providing some kind of crt0

1586617990
Xavi92
TheLemonMan: like this?

1586618097
TheLemonMan
Xavi92, more like

1586618141
Xavi92
TheLemonMan: it still triggers the same errors, though

1586618277
ifreund
am I not allowed to have an anon list of anon structs like so?

1586618293
jessermeyer
For the last few days on the Master Window's build I get the following linker error just building my program : lld: error: undefined symbol: _tls_index >>> referenced by C:\dev\Zig\lib\zig\std\debug.zig:258>>>               .\win32_tbd.obj:(std.debug.panicExtra)>>> referenced by C:\dev\Zig\lib\zig\std\debug.zig:260>>>

1586618293
jessermeyer
.\win32_tbd.obj:(std.debug.panicExtra)>>> referenced by C:\dev\Zig\lib\zig\std\debug.zig:289>>>               .\win32_tbd.obj:(std.debug.panicExtra)

1586618313
jessermeyer
I don't override the panic handler.

1586618325
jessermeyer
Any suggestions how to help me narrow this down for a issue tracker?

1586618329
fengb
ifreund: tuples aren’t iterable by for. You need to coerce it into an array or use inline for

1586618330
ifreund
i get an unable to evaluate const expression error pointing to the line of the for stateme

1586618339
ifreund
ah thank fengb

1586618373
TheLemonMan
jessermeyer, how are you building that?

1586618392
jessermeyer
zig build-exe -lvulkan-1 win32_tbd.zig -L "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\um\x64" -L "C:\VulkanSDK\1.2.135.0\Lib" --subsystem windows

1586618437
jessermeyer
I don't think --subsystem is the culprit since I have other tinier test programs that use it without problem.

1586618466
Xavi92
TheLemonMan: it's curious to see mips2 does compile, though

1586618483
Xavi92
AFAIK the differences between mips1 and mips2, LLVM-wise, are minimal

1586618492
ifreund
hmm, it now wants the values for the fields of the struct to be comptime known i think

1586618496
TheLemonMan
well the mips1 backend is still experimental afair

1586618509
ifreund
maybe i just need to suck it up and write out the type

1586618603
fengb
Yeah I don’t think you can make arrays of anon structs

1586618605
Xavi92
TheLemonMan: mips1 isn't even supported on upstream, so I cherry-picked

1586618656
TheLemonMan
jessermeyer, I think that's the problem, you're somehow avoiding the inclusion of start_windows_tls.zig

1586618678
ifreund
i feel like in an ideal world you should be able to :D

1586618723
fengb
I don’t think Zig type inference will ever get there

1586618753
TheLemonMan
Xavi92, that's all you needed to change? that doesn't really explain the error during the lowering phase

1586618776
fengb
It’s hard to match anon structs with its parent without explicit types. Tuples work around it because they don’t require the same types, but that’s also why you can’t do a for loop

1586618792
jessermeyer
If it helps, I can get the error on the tinier test programs just by switching main() to WinMain()

1586618811
ifreund
that's fair, i can live with it

1586618819
jessermeyer
And I don't need subsystem for the error to occur.

1586618843
jessermeyer
I think I have a minimal repo, so I'll add a issue ticket.

1586618849
TheLemonMan
yeah check out start.zig

1586618892
TheLemonMan
you can fix by unconditionally including that damn file if the target os is windows

1586618905
jessermeyer
Thanks!

1586618955
Xavi92
TheLemonMan: that's all I did. Took release/10.x branch from

1586618986
Xavi92
Well, there was a missing static member that I had to add so it compiled, but it's a very minor change

1586619062
ifreund
nice, i can at least avoid giving the type a name

1586619086
TheLemonMan
Xavi92, I'll have a look

1586619299
Xavi92
Thanks, TheLemonMan

1586619616
jessermeyer
Haahaaa, Ok, so I @import("start_windows_tls.zig"); if the builtin os is windows, and now I get lld: error: duplicate symbol: _tls_index .... :/

1586619665
jessermeyer
Which obviously implies it was already being exported.

1586619708
jessermeyer
An alternative explanation is that the if condition was evaluated twice somehow?

1586620892
tdeo
daurnimator:

1586620909
tdeo
i think this is where it's handled in rustc:

1586620924
tdeo
so it'd presumably need manual support in every other llvm frontend

1586620933
TheLemonMan
yes

1586620975
TheLemonMan
as I told you earlier today Zig does a bad job for x86_64 only

1586621016
nmeum
I am using packed structs to represents memory mapped registers of a uart peripheral. It works so far, unfourtunatly, some register bits are reserved can I somehow mark the struct members representing them as unexported/hidden?

1586621048
TheLemonMan
no

1586621090
nmeum
unfortunate

1586621139
tdeo
TheLemonMan: could you point me to where that's determined in the zig stage1 compiler? i want to see if i can fix it reasonably without just adding a special case for this

1586621141
nmeum
I guess I will just name them _ and __ then

1586621170
TheLemonMan
tdeo, iter_function_params_c_abi

1586621206
TheLemonMan
the ARM ABI is reasonably simple, fixing the compiler is hard because the logic is all over the place

1586622988
TheLemonMan
Xavi92, can you try with -mcpu=mips1+soft_float ?

1586624090
shakesoda
mips1... ps1?

1586624561
shakesoda
what happened to len on alignedarraylist

1586624593
BaroqueLarouche
you need to do items.len now

1586624601
shakesoda
ok

1586624669
shakesoda
thanks

1586624766
nmeum
I am trying to store a hashmap as a struct member, my initialization code looks as follows:

1586624812
shakesoda
nmeum: s/const/var/

1586624840
nmeum
for alloc or for the Plic type itself?

1586624948
shakesoda
either alloc or where you're calling this

1586624987
nmeum
calling what?

1586624995
nmeum
the hashmap put function?

1586625014
fengb
That’s like me but all the time

1586625224
shakesoda
nmeum: what is your buffer space declared as

1586625268
nmeum
> var irq_handler_buffer: [@sizeOf(*u32) * INTERRUPT_SOURCES]u8 = undefined;

1586625269
shakesoda
let me actually just try this

1586625317
nmeum
here is the entire error message:

1586625400
shakesoda
nmeum: self is declared const is all

1586625407
shakesoda
make it not const

1586625442
shakesoda
this can happen where you initialize the thing (if you assign to a const then put something into the map) or if your self parameter is *const

1586625459
shakesoda
or you're doing something like putting in &foo

1586625464
shakesoda
instead of foo, for the function arg

1586625481
shakesoda
(which doesn't look like the case)

1586625506
nmeum
ah

1586625900
nmeum
changed the self in the method using it from `self: Plic` to `self: *Plic` and changed the initializer accordingly, that seems to work

1586625901
nmeum
thanks!

1586628818
frett27
hi, how can i dig into this compiling crash error :

1586628828
frett27
i tried to recompile a mqtt lib,with the master

1586628848
frett27
is it possible to printout the ast ?

1586629349
TheLemonMan
try running `zig translate-c` on the offending file

1586629485
frett27
ok,

1586629704
frett27
i got a c dependency to theses: const cmqtt = @import("mqtt_paho.zig");

1586629704
frett27
@cInclude("string.h");

1586629704
frett27
const c = @cImport({

1586629704
frett27
@cInclude("unistd.h");

1586629704
frett27
@cInclude("stdio.h");

1586629706
frett27
@cInclude("time.h");

1586629708
frett27
});

1586629743
frett27
for the standards ones, is it llvm -> meaning time.h, unistd.h ..

1586629769
frett27
the mqtt_paho, if a previous c-translated file,on which i adjust some signature,

1586629993
frett27
i make progress, launching the  zig translate-c paho.mqtt.c/src/MQTTClient.h -I /usr/include/

1586630067
frett27
raise error, during lib c translation

1586630069
frett27


1586630079
frett27
same error

1586630080
frett27
pub fn getchar() callconv(.C) c_int {

1586630080
frett27
} // /usr/include/x86_64-linux-gnu/bits/libio.h:399:28: warning: TODO implement translation of CastKind BuiltinFnToFnPtr

1586630080
frett27
reached unreachable code

1586630080
frett27
return _IO_getc(stdin);

1586630083
frett27
if (!ok) unreachable; // assertion failure

1586630166
TheLemonMan
does it crash if you run `zig translate-c /usr/include/x86_64-linux-gnu/bits/libio.h` ?

1586630196
frett27
let me check

1586630256
frett27
it tell me not to use libio.h directly , insteaf, use <stdio.h>

1586630259
frett27
use@use-HP-Pavilion-dv6-Notebook-PC:~/iotmonitor$ zig translate-c /usr/include/x86_64-linux-gnu/bits/libio.h

1586630259
frett27
# error "Never include <bits/libio.h> directly; use <stdio.h> instead."

1586630259
frett27
[1]+  Arrêté                vim mqtt_paho.zig

1586630259
frett27
^

1586630263
frett27
#include <bits/_G_config.h>

1586630265
frett27
^

1586630352
TheLemonMan
oh well, try running on stdio then

1586630358
frett27
the initial MQTTClient.h code include the <stdio.h>

1586630373
frett27
yep, but i don't know which one ?

1586630378
frett27
the llvm one ?

1586630383
frett27
or system one ?

1586630474
frett27
ok, this one is faulty :  zig translate-c -I /usr/include -I /usr/include/x86_64-linux-gnu  /usr/include/stdio.h

1586630478
frett27
same error

1586630585
frett27
if i'm not wrong, it seems this is the translation of : pub extern fn getc_unlocked(__stream: [*c]FILE) c_int;

1586630610
frett27
just after getchar

1586630688
frett27
#ifdef __USE_POSIX199506

1586630689
frett27
These functions are possible cancellation points and therefore not

1586630689
frett27
marked with __THROW.  */

1586630689
frett27
extern int getc_unlocked (FILE *__stream);

1586630689
frett27
extern int getchar_unlocked (void);

1586630695
frett27
#endif /* Use POSIX.  */

1586631229
frett27
seems the master is broken on my box

1586631236
frett27
since a couple of days

1586631295
frett27
this prog, crash the compiler :

1586631314
frett27
with a zig build-obj test.zig -lc

1586631316
frett27
command

1586631590
TheLemonMan
yeah I can reproduce the crash

1586631832
marijnfs
wow my timsort algorithm is like twice as fast with the new compiler

1586631842
marijnfs
did something in optimizations change?

1586631872
TheLemonMan
we upgraded to LLVM 10 a few weeks ago

1586631887
marijnfs
github.com:marijnfs/zigtimsort.git

1586631907
marijnfs
maybe someone can validate as well? just type make in the main dir

1586631921
marijnfs
but i can't imagine that being so much faster?

1586631965
frett27
TheLemonMan, is this a platform related issue ?

1586631970
frett27
libC ?

1586632014
TheLemonMan
frett27, maybe it's due to some translate-c change

1586632041
frett27
are there tests on this ?

1586632066
marijnfs
ah nevermind there is an issue

1586632113
marijnfs
i didn't realise i introduced an issue, and the assert is not called in an optimized build

1586632140
frett27
:-), performance first !! not safty :-)

1586632155
gchristensen
the boyscout's marching song!

1586632181
frett27
ok, let's try in release fast :-)

1586632258
frett27
no more chance !

1586632375
TheLemonMan
frett27, there are many tests but shit happens™

1586632391
marijnfs
it might not sort very well, but it does it very fast!

1586632426
frett27
TheLemonMan, --:-)

1586632466
marijnfs
Ok I fixed it, now it's only a third faster

1586632542
frett27
marijnfs, seems i faced an exception :

1586632551
frett27
i tried to mesure time,

1586632764
frett27
all, how can i smoothly dig into learning the translate-c ?

1586632777
frett27
are there any preferred path for learning ?

1586632786
marijnfs
frett27: thanks for testing! I'll check what that is

1586632830
marijnfs
frett27: i pushed a fix one minute ago, is this with that fix?

1586632851
TheLemonMan
frett27, if that code used to work you can try bisecting what commit broke it

1586632931
frett27
yes, i can make the bisect, otherwise, the code below

1586632969
frett27
it's between april 5th and tody

1586633068
Xavi92
TheLemonMan: that made it improve ->

1586633104
Xavi92
shakesoda: yup, trying to compile zig for the PS1 :)

1586633159
TheLemonMan
Xavi92, ok so now open compiler_rt.zig and chop away the line with @include("atomics.zig")

1586633232
marijnfs
frett27: your program builds fine for me

1586633273
frett27
marijnfs, on master ?

1586633324
marijnfs
juop

1586633328
frett27
there is a regression, on april 2, it works

1586633333
Xavi92
TheLemonMan: great! That made it compile

1586633339
frett27
on my plateform

1586633347
marijnfs
what are you running on

1586633371
Xavi92
Which features have been stripped away with that line? Still don't know about how zig handles atomicity

1586633383
marijnfs
maybe try different libc?

1586633444
frett27
marijnfs, i use the standard one, but it was working, i'm on progress on the bisect

1586633450
TheLemonMan
mips ISA < 3 are missing the necessary opcodes to implement the atomic ops iirc

1586633489
shakesoda
Xavi92: exciting

1586633518
TheLemonMan
and I doubt you care about smp when targeting mips1  heh

1586633532
Xavi92
TheLemonMan: definitely :)

1586633570
TheLemonMan
we need more compile-time logic to avoid pulling in those builtins on weak/old platforms

1586633590
Xavi92
shakesoda: have done stuff with the PS1 in C for years and was looking for something else. There's a Rust-based SDK out there, but LLVM did not (and it still doesn't) compile to MIPS I, where this issue still applies zig, too

1586633599
TheLemonMan
the mips1 backend should be pretty much functional

1586633623
Xavi92
But I noticed there's a patch available for LLVM, so I wanted to write in zig so I have an excuse to learn it :)

1586633635
TheLemonMan
I had a look and they've added some code to lower the conditional moves to something equivalent

1586633667
TheLemonMan
the patch adds support for the load-delay slots

1586633888
TheLemonMan
I stand corrected, mips2 is the earliest isa with support for smp

1586634306
shakesoda
Xavi92: load delay slots?

1586634311
shakesoda
oh, yeah, that was just mentioned.

1586634427
Xavi92
shakesoda: exactly. See this:

1586634471
nmeum
quick question regarding left shifts, the doc states that: `b must […] have a type with log2 number of bits as a` so if a is a u32 and b is a u5 that should work, right? because

1586634496
nmeum
fails to compile with `LHS of shift must be an integer type, or RHS must be compile-time known`

1586634587
Xavi92
TheLemonMan: "we need more compile-time logic to avoid pulling in those builtins on weak/old platforms" -> that'd be really interesting. I think zig should focus into small microcontrollers, where C is still king with all of its well-known quirks

1586634842
TheLemonMan
Xavi92, I'm refining the logic every time a new problem pops up, the huge combination of architectures/isa revisions/flags make that a non-trivial task

1586634962
Xavi92
TheLemonMan: sure it does. I'm happy to know there's already such intention from the team

1586635087
asie
oh, hello

1586635996
frett27
nmeum,

1586636015
frett27
1 is quite difficult to infer,

1586636021
frett27
you can use @intCast

1586636060
frett27
nmeum, you can test it on :

1586636069
frett27
it has the zig trunk installed

1586636089
TheLemonMan
1 has type comptime_int and has an infinite number of bits

1586639720
leth
how do i properly print out a numerical value to stdout? I can't seem to get it right from reading the horribly manual.

1586639820
foobles
hello

1586639881
darithorn
leth are you trying to format the value or just print it?

1586640120
ifreund
hey, is there a good way to run external commands in a build.zig other than using ChildProcess or something?

1586641053
ifreund
ah nice, I found exec in std/build.zig

1586641890
wilsonk
UGHHHHH, does a minimal SDL2 example work for anyone else with the newest zig? I keep getting 'reached unreachable code' when just trying to SDL_Init!!

1586641952
leth
darithorn: Well I just want to print it, but I'm doing that by trying to format it first. I'd actually like to know how to do both now that you ask.

1586642043
andrewrk
wilsonk, I'm about to revert a recent regression to translate-c

1586642073
afontain_
wilsonk: I'm having a problem where SDL_Init can't init video backend, but that's not related

1586642107
wilsonk
ah, ok...I just tried clashproto and it failed the same way so I was glad to see it apparently wasn't something I changed. Thanks andrewrk

1586642177
darithorn_
leth have you used std.debug.warn? that's the easiest way to print something out to the terminal, it uses stderr

1586642208
darithorn_
std.debug.warn("{}\n", .{ 42 }); is the typical way to print something out in zig

1586642344
ifreund
leth: there are decent docs for formatting here too

1586642386
ifreund
you can use the same format system with std.debug.warn() and others

1586643223
shakesoda
some slice stuff changed and broke my code in a way that doesn't make sense

1586643240
shakesoda
hmmmmmmmm

1586643351
shakesoda
i was assigning a &[_]foo{...} to a []foo slice, which it was previously happy with, but now attempting to do that fails and if I try to re-slice the thing it's magically const and I can't do it, apparently

1586643422
andrewrk
shakesoda, make it const

1586643456
andrewrk
either make the thing that accepts the slice []const foo, or `var bar = [_]foo{...};` and then do &bar

1586643477
andrewrk
if the memory is mutable, you have to choose where to put it

1586644216
leth
darithorn: Yeah sure, that's great for testing stuff and debugging, but I need to output some stuff to stdout. And frankly the idea of writing stuff to stderr as being better is quite a strange viewpoint. stderr should only be use in case of failures.

1586644244
leth
ifreund: yeah I read that but i couldn't get it to work. Perhaps i was misinterpreting it.

1586644320
leth
print("{}", value) for instance seemed like it should work from my interpretion of that document. yet it doesn't. but perhaps the problem isn't with the foramting?

1586644355
emekoi
andrewrk would you be open to adding a CI job for mingw?

1586644406
darithorn
print is a function for streams, so you need to grab the stdout stream and print to it

1586644443
darithorn
i don't think there's a shortcut function for printing to stdout like std.debug.warn. so you have to manually grab stdout so you can print to it

1586644550
darithorn
something like std.io.getStdOut().outStream().print("{}\n", .{ 42 }); should work

1586645569
leth
That's what i though and sor tof what i tried, I get expression value is ignored using your code, but perhaps the error is elsewhere.

1586645672
leth
Yeap, only your exmple in a main function with std imported. either that or in all that simple code i have another bug.

1586645725
mikdusan
leth: `try mystream.print(...);`

1586645808
mikdusan
leth: or... `mystream.print(...) catch { std.debug.warn("darnit, my stream failed\n",.{}); };`

1586645969
leth
undecleared indentifyer mystream.

1586646078
darithorn
leth you get that error because print can return an error, so you have to deal with it somehow

1586646129
darithorn
mikdusan gave some examples on how to handle the error. you can "ignore" it yourself by using `try` or use a `catch`

1586646137
andrewrk
emekoi, yes, especially if you are willing to be in charge of it

1586646272
leth
it doesn't work with try

1586646329
emekoi
i'll go ahead and submit a PR then

1586646437
ifreund
leth: can you paste your code and the error into some kind of pastebin?

1586646659
shakesoda
andrewrk: var foo = &[_]whatever; foo and var foo = [_]whatever; &foo don't result in the same thing?

1586646677
leth
ifreund:

1586646908
shakesoda
all my re-slicing things as :0 cause crashes now :(

1586646939
shakesoda
what on earth changed

1586647371
ifreund
leth: mystream is not defined

1586647380
leth
obviously.

1586647394
ifreund
add `const mystream = std.io.getStdOut().outStream();`

1586647466
leth
that's what i started with more or less, still doesn't compile.

1586647474
ifreund
what's the error

1586647485
darithorn_
you need to change main's return type

1586647488
darithorn_
!void

1586647529
darithorn_
! is used when the function can return an error, which it can now since you used `try`

1586647606
pixelherodev
`!void` means it can return basically any error (or void), and the compiler will determine which ones are allowed.

1586647635
leth
still no luck.

1586647652
ifreund
what is the error you are getting

1586647682
leth
error: expected token 'Symbol', found '{'

1586647702
leth
.>{< 42

1586647717
ifreund
are you on zig master or zig 0.5.0

1586647730
leth
0.5.0

1586647739
mikdusan
leth: try pasting your code at

1586647742
Xavi92
Still working on MIPS I:

1586647762
ifreund
yeah, there's the problem, the .{} syntax for format args is new

1586647767
shakesoda
0.6 is coming out extremely soon, just use master

1586647789
pixelherodev
For the old one, just remove the `.{}` part though

1586647794
mikdusan
master or bust™

1586647802
pixelherodev
e.g. `stream.print("");` instead of `stream.print("", .{});` if there's no args

1586647804
Xavi92
'mipsel-unknown-elf-size main.o' shows 636 bytes on .text, but only 48 bytes for 'main'. I guess everything is being optimized away by the linker, but how can I avoid this?

1586647822
pixelherodev
Disable optimizations?

1586647832
pixelherodev
If you're building in debug mode, nothing should be optimized away

1586647855
pixelherodev
... I completely forgot to submit the reduction to LLVM

1586647863
leth


1586647881
Xavi92
pixelherodev: debug mode is selected by default, right? Also, even if _start should be provided, it still compiles and links even if I do not provide it

1586647887
pixelherodev
Xavi92, yes

1586647895
pixelherodev
leth, replace `.{42}` with `42`

1586647912
leth
i get a different error

1586647914
pixelherodev
0.5.0 supported variable-lgenth arguments

1586647924
pixelherodev
0.6 replaces that with tuples (which is why .{} is needed)

1586647929
pixelherodev
leth, what error?

1586647939
leth
error: type 'std.os.windows.GetStdHandleError!std.fs.file.File'

1586647943
mikdusan
leth: your code runs fine on newer versions of zig (months after 0.5.0 release)

1586647948
pixelherodev
Ah wait you're on 0.5

1586647961
pixelherodev
`const stdout = try std.io.getStdOut().outStream();`

1586647967
pixelherodev
That can return an error on 0.5

1586647990
leth
Why is there no simple way to just output something to stdout?

1586648007
shakesoda
std.debug.warn("foo\n");

1586648011
pixelherodev
^

1586648012
Xavi92
pixelherodev: does the entry point need to be indicated?

1586648021
pixelherodev
Xavi92, I wouldn't think so

1586648028
pixelherodev
The entry point isn't actually main

1586648033
pixelherodev
It's start, which is in the standard library

1586648035
pixelherodev
That calls main

1586648039
leth
doesn't that write out to stderr?

1586648042
pixelherodev
leth, yes

1586648047
pixelherodev
99% of the time that's okay though

1586648054
leth
I asked for stdout not stderr

1586648057
pixelherodev
I do think there should be a std.debug.print though

1586648065
pixelherodev
"warn but for stderr"

1586648069
mikdusan
leth: if you upgraded zig to latest releas NEWER than 0.5.0, your pasted code works fine.

1586648069
pixelherodev
s/err/out

1586648070
leth
there is a significant difference between stderr and stdout

1586648086
fengb
There’s an issue for standardized logging

1586648095
fengb
And warn / print will move to that module

1586648103
shakesoda
tossing things into stderr is the one that's easy at this particular moment, doesn't mean it absolutely should be that way

1586648106
shakesoda
just status quo

1586648115
pixelherodev
leth, keep in mind that Zig is in it's early stages

1586648129
shakesoda
fwiw, i found this annoying too

1586648133
pixelherodev
There's a lot of changes coming down the pipeline to make life easier (logging, as mentioned)

1586648152
pixelherodev
stdout will be much simpler to use down the line (hopefully for 0.7)

1586648165
mikdusan
imagine implementing `cat` with unchecked stdout writes

1586648200
mikdusan
blank output would be: did it work? i dunno. maybe. maybe not. let's guess.

1586648222
pixelherodev
True, but that would be a misuse of the API

1586648225
mikdusan
or truncated output too :)

1586648233
pixelherodev
std.debug.warn isn't meant for anything important

1586648240
pixelherodev
Docs explicitly say "for when it doesn't matter all that much if writing fails"

1586648243
leth
imagine implemeting cat only writing out to stderr.

1586648246
pixelherodev
(paraphrasing from memory)

1586648254
shakesoda
mikdusan: as a wise man once said

1586648256
shakesoda
yolo

1586648271
pixelherodev
leth, the code I gave you should work for stdout

1586648278
mikdusan
pixelherodev: not referring to warn. referring to habitual C code that never checks stdout writes

1586648284
pixelherodev
Ah yeah

1586648300
pixelherodev
If you have `const stdout = try std.io.getStdOut().outStream();`, then `try stdout.print("{}\n", 42);` should work

1586648304
pixelherodev
on 0.5.0

1586648306
shakesoda
i certainly never check them, nor do i ever care if they actually worked

1586648309
shakesoda
:D

1586648310
pixelherodev
You'll have to tweak it a tad for 0.6 though

1586648331
Xavi92
pixelherodev: since the target is mipsel-freestanding-gnueabi (is even gnueabi appropiate? don't know), I understand I need to provide _start myself (as in the pastebin above)

1586648338
pixelherodev
Ahh

1586648352
pixelherodev
For freestanding that's probably correct

1586648355
pixelherodev
s/probably/definitely

1586648361
pixelherodev
shakesoda, to me, if it doesn't actually matter if something is written, you shouldn't really be writing it in the first place

1586648366
pixelherodev
That's just waste of system resources

1586648370
pixelherodev
stdio isn't free (or even cheap)

1586648383
pixelherodev
Relative to other things it can be

1586648399
pixelherodev
But on multiple programs I've written recently stdio uses >50% CPU time

1586648421
mikdusan
pixelherodev: just optimize with macros: fputc()  /s

1586648424
pixelherodev
To the point where I'm progressively cutting out debug info and replacing it with tests so that that info isn't ever needed

1586648433
pixelherodev
mikdusan, this is Zig code

1586648435
pixelherodev
There are no macros :)

1586648444
pixelherodev
also

1586648448
shakesoda
pixelherodev: for the love of god don't lecture me about stdio performance lmao

1586648453
pixelherodev
It took me a second to get that :P

1586648455
shakesoda
i understand deeply

1586648467
pixelherodev
:)

1586648503
shakesoda
my primary usage of it is dumb checkpointing that gets removed shortly after and a bit of initialization spam

1586648511
pixelherodev
Proposal: there should be a `std.io.setBuffered(bool) void` that allows replacing the default stdio streams with buffered versions

1586648525
pixelherodev
Make it easier to do the right thing

1586648552
pixelherodev
Hides the complexity of buffering from the user

1586648560
shakesoda
heh, meanwhile, i usually have to go out of my way to unbuffer it elsewhere

1586648600
mikdusan
pixelherodev: i think when logging comes in, it will make use of globals specified in main.zig used as "configurators" or options. that same mechanism is probably a good idea for setting buffered standard streams

1586648647
pixelherodev
If I'm transitioning a codebase from C/C++ to Zig, does it make sense to link individual Zig files on their own? Or should I have a root Zig file which is compiled into an object and linked with C/C++?

1586648657
pixelherodev
This is a personal project so I can do whatever :)

1586648666
mikdusan
root zig to allow for best optimization

1586648669
shakesoda
i'd do the latter

1586648676
fengb
Zig likes to be a single unit

1586648702
pixelherodev
Motion passes 3-0!

1586648714
mikdusan
there's a unit joke in there somewhere

1586648722
fengb
Yes but only mikdusan’s opinion has weight 🙃

1586648779
pixelherodev
Want to take bets on whether @cImport(libgit) will work OOTB?

1586648793
pixelherodev
I I can bet internet cookies :P

1586648804
pixelherodev
There's definitely a unicode cookie

1586648822
pixelherodev
🍪

1586648825
pixelherodev
I was joking.

1586648827
pixelherodev
But it's real.

1586648966
fengb
🧮

1586648976
fengb
Unicode is silly

1586648983
pixelherodev
Stupid more like

1586648994
pixelherodev
Need a revolution to overthrow whoever's in charge of it

1586649000
pixelherodev
They're clearly incompetent

1586649334
leth
how do you suggest we handle the almost countless amounts of scripts that are around?

