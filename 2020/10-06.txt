1601949924
daurnimator
andrewrk: with new build process; the process you showed off would only be for when targeting native? it would have to be different if trying to cross-compile zig....

1601950155
pixelherodev
daurnimator: which process is that?

1601950179
lunamn
watching it too, attempted to build zig now, but stage1's resource usage came on full steam to lock up the computer lol

1601950219
leeward
Needs more swap.

1601950245
leeward
Also, add an hour for every GiB of swap.

1601950297
andrewrk


1601950334
leeward
Wow, 0.7 this month?

1601950335
leeward
Nifty.

1601950421
andrewrk
it may be delayed again if LLVM 11 doesn't release within 7 days

1601950433
andrewrk
and they have 3 open bug reports still

1601950761
lunamn
andrewrk: might have found some bug, got zig from the downloads page, but didn't fix the lib directory, there weren't any (linked to my local repo later, since that's what I actually want in the end), it entered an infinite loop of attempting to open "lib/zig" but failing, might be good as an standalone issue?

1601950807
andrewrk
lunamn, are you asking if you should open an issue?

1601950831
lunamn
maybe, I don't know if it's trivial enough that it should go here, or if it should get a dedicated issue

1601950887
andrewrk
that will probably be best since I have a lot going on and will probably forget

1601950917
lunamn
gotcha

1601951101
pixelherodev
I think I'm going to increase how much time I'm spending on the CBE

1601951117
pixelherodev
I really really want to make sure it doesn't hold back the re-bootstrap plan back. I do

1601951366
daurnimator
pixelherodev: the building libstage1; then using that to link the final zig executable

1601951377
daurnimator
==> you'd have to build libstage1 for both the host and the target

1601951767
andrewrk
daurnimator, note the current plan includes

1601956640
pixelherodev
marler8997: not sure if your comment on #6378 has been addressed, but the fundamental issue (to me) with using CBE to regularly regenerate a "stage1" is that we would be trapped in a bootstrapping loop, effectively

1601956649
pixelherodev
Stage1 would be dependent on stage2 which would be dependent on stage1 etc

1601956673
pixelherodev
Arguably, that'd be fine, since the "stage1" then would be a finished "product." I'm not sure where I stand on that, to be honest.

1601956733
pixelherodev
I think being able to maintain a C-based compiler without a stage2 dependency is useful, I'm just not certain what the cost is

1601956897
leeward
That doesn't sound like a serious problem. A single code base makes up for a lot.

1601968741
cr1901_modern
How do you declare a function to take a tuple (or return one)?

1601968756
cr1901_modern


1601970781
FireFox317_
daurnimator, cross-compiling the zig compiler still works as before. I have been working on the zig-bootstrap script, and instead of building zig0 from a c++ codebase, we use a existing zig compiler from the host to build the zig1 compiler

1601971328
daurnimator
FireFox317_: it does mean that we have to actually compile a zig for the host

1601971382
FireFox317_
daurnimator, yes, but for cross-compiling we need that anyway, because we also use `zig c++` to build llvm for the target

1601971429
daurnimator
in zig-bootstrap we do that; but that wouldn't be a general thing.

1601971475
daurnimator
e.g. if you're building a zig debian package for a raspberry pi

1601971490
daurnimator
(from an x86_64 host)

1601971717
FireFox317_
hmm i see. yeah that requires a zig compiler indeed

1601972755
azmr
hey all, I'm looking at including Zig support in a dev tool I'm building. I was wondering what the options are for compiling Zig (and getting frontend/AST info) from my own application.Ideally this would be in the format of including Zig as a li

1601972783
azmr
(ah, shift+enter doesn't work on IRC)

1601972786
azmr
*library

1601972851
azmr
I'm currently using Clang/LLVM libraries for C(++) support, and I know that Zig uses LLVM in the backend

1601972917
azmr
If there are other options for interop I'd also be open to them

1601973032
daurnimator
azmr: interesting. you would probably have to wrap the compiler into a library... we don't offer that out of the box; though I think it might be easyish

1601973328
azmr
Ah ok, thanks. Good to know what the current status is. I presume that I'd have to write the wrapper in Zig?

1601973353
azmr
I really like a lot of what Zig is going for but I have yet to actually write any

1601973740
fgenesis
compiler as library? i like the idea

1601973749
fgenesis
look where it's gotten llvm :D

1601973930
daurnimator
azmr: yeah. i'd essentially go into main.zig of the compiler and see what it does; then wrap that up in some exported functions

1601974232
azmr
daurnimator: thanks for pointing me in the right direction :D

1601974472
FireFox317_
fgenesis, were you interested in a zig build for a rpi?

1601974536
FireFox317_
nvm, still debugging haha. I just put a binary on my rpi1, but running `zig build-exe hello.zig` catches a Illegal instruction

1601974657
daurnimator
FireFox317_: could be UBSAN

1601974679
FireFox317_
daurnimator, jup i'm guessing that is the case. I'm gdb'ing now

1601974702
FireFox317_
also because it happens in 'LLVM Emit Output"

1601975013
FireFox317_
jup 'llvm::DwarfExpression::addExpression', even llvm can't make sure they dont have undefined behaviour in their code -_-

1601975226
fgenesis
FireFox317_: for reference, my segfault was somewhere in zig code (had the zig symbols), and it dereferenced 0x1

1601975233
fgenesis
so nullptr somewhere

1601975299
FireFox317_
fgenesis, yeah i also fixed all the casts from u64 to usize

1601975347
FireFox317_
but its so annoying that llvm itself does not test their code for undefined behavior

1601975361
fgenesis
happens

1601975459
FireFox317_
jup, will try a build without ubsan

1601975476
fgenesis
at least with llvm you cn debug it

1601975500
FireFox317_
yeah open source :)

1601975501
fgenesis
fixing commercial closed-source stuff is so much harder

1601975510
FireFox317_
but i'm not gonna debug llvm haha

1601989249
Ristovski
Does Zig use fdata-sections/ffunction-sections when compiling in all the llvm deps? (not sure if it would make a difference if they are not being built as static libs first). I wonder if it could cause any size reduction

1601989297
Ristovski
that along with flto usually completely obliterates the object sizes when compiling stuff with static libs

1601989343
Ristovski
(ofc, requires gc-sections linker arg for it to actually remove any unused data/code)

1601998075
marler8997
pixelherodev, what do you mean by "a bootstrap loop"?

1601998372
justin_smith
marler8997: reading what they said, it's a dependency loop, where each stage relies on the other

1601998492
marler8997
justin_smith, do you have an idea what they meant in this particular case by dependency loop?

1601998524
justin_smith
literally what they said made sense to me: the stage1 and stage2 each need the other to build?

1601998568
justin_smith
but I'll let them weigh in when they are around

1601998571
pixelherodev
pong

1601998573
pixelherodev
:)

1601998586
pixelherodev
Not that they directly need each other to *build*, but yeah

1601998608
pixelherodev
I'm starting to lean towards leeward's view to be honest

1601998619
pixelherodev
If you want a real reason why it's a bad idea, you'll need to ask Andrew, not me :P

1601998626
pixelherodev
I haven't thought about it all that much

1601998648
marler8997
I could be misunderstanding the requirement, but I don't see the need to manually support a C version of the zig compiler for bootstrapping if we have a C backend...?

1601998771
marler8997
oh you know what, I read through issue 6378 again...and I think I misunderstood what Andrew's proposal was. I think he's actually proposing exactly what I suggested

1601998829
marler8997
in other words, not maintaining a C version of the compiler, but utilizing the c backend to make a C version of the compiler available

1601998833
pixelherodev
marler8997: nope

1601998840
pixelherodev
He's proposing we do that

1601998849
pixelherodev
at which point we start maintaining a C version separately

1601998854
pixelherodev
Based on that codebase

1601998859
marler8997
oh I see

1601998870
pixelherodev
See `Do #5246 (comment)`

1601998878
marler8997
why would we want to maintain the C version manually after 1.0 instead of just updating it using the C backend?

1601998887
pixelherodev
On that note, let me work on my schedule for the day - I can definitely get the open CBE PR fixed, and get to work on expanding the support further :)

1601999925
marler8997
do we have a solution to access C struct definitions that are not typedefed from Zig?

1601999998
pixelherodev
marler8997: what do you mean?

1602000006
pixelherodev
extern structs?

1602000017
marler8997
including a struct definition using cImport

1602000018
pixelherodev
`extern struct` === guaranteed C ABI compatibility

1602000021
marler8997
that isn't typedefd

1602000031
pixelherodev
Ah, you mean translate-c?

1602000055
marler8997
I think so....

1602000059
pixelherodev
I think it should be fine as is?

1602000071
pixelherodev
`struct a{}` produces a file with `pub const a = struct_a`

1602000169
marler8997
ah you're right

1602000281
pixelherodev
I mean yeah, I literally

1602000392
ZigNewbie
When using zig build, how would I go ahead to see the arguments given to the linker (lld)?

1602000762
FireFox317_
ZigNewbie, `--verbose-link`

1602001145
ZigNewbie
FireFox317_, thank you. However, that did not change the output. The reason I ask is that when attempting to compile a simple test zig file, I get the linker error "lld: error: Unable to find library for -lSystem", and Id like to get more information on how lld is called (and what lld executable is used) so I can fix it

1602001206
FireFox317_
ZigNewbie, okay. It probably is not outputting the information, because it is cached now and thus there is no need to call lld. So you should remove the zig-cache directory in the folder from which you are building.

1602001259
FireFox317_
Also it looks like you are doing stuff for macos? There are some specific options for macos: like -framework and -F[dir] which you might want to check out

1602001772
s-ol
can I @import something and the somehow merge the declarations into the containing scope?

1602001832
BaroqueLarouche
You want to use ´using namespace´

1602001881
pixelherodev
Only works on decls, not fields

1602001895
pixelherodev
For individual decls, you're explicitly and deliberately required to define them as e.g. `const a = b.a;`

1602001923
ZigNewbie
Removing zig-cache did not change output either. You are correct about macOS, however I think this isn't an issue with frameworks but I am not familiar enough with zig's build system to say that with certainty

1602002001
ZigNewbie
also, you meant that I should pass --verbose-link as in "zig build --verbose-link", right? :p

1602002122
pixelherodev
Hmm

1602002154
pixelherodev
ZigNewbie: try `--verbose`

1602002165
pixelherodev
>  --verbose              Print commands before executing them

1602002197
pixelherodev
--verbose-link is for debugging IIRC

1602002205
pixelherodev
As in, debugging the compiler itself

1602002369
FireFox317_
They asked for a way to look at lld command, you need --verbose-link for that

1602002376
FireFox317_
but weird that it doesnt print anything.

1602002388
ZigNewbie
To be clear, I am passing this as "zig build --verbose-link"

1602002435
FireFox317_
should work yes

1602002574
ZigNewbie
That's unfortunate

1602002800
FireFox317_
ZigNewbie, you might want to make a bit smaller and only use `zig build-exe` for example, because the build.zig adds another layer of abstraction

1602002822
pixelherodev
I think `--verbose` is the option for build.zig and `--verbose-link` is the option for `build-exe`

1602002828
pixelherodev
Or something along those li - oohhhhh right

1602002836
pixelherodev
ZigNewbie: set `exe.verbose = true` in build.zig :)

1602002840
pixelherodev
That's what it's missinhg

1602002842
pixelherodev
missing*

1602002865
pixelherodev
Rather

1602002872
pixelherodev
Set builder's verbose_link to true

1602002965
FireFox317_
pixelherodev, according to the `zig build --help` you can also pass --verbose-link to `zig build`

1602003017
pixelherodev
Yes, but I'm not sure if `--help` is 100% accurate there

1602003033
pixelherodev
Digging into the source should make it clear but I barely have time to comment offhand right now :P

1602003132
ZigNewbie
Currently, "zig build --help" has the same output as "zig build" for me, not sure what's going on here. The issues seem connected and maybe because of my system

1602003143
torque
which version of zig and which version of macOS? I think the 0.6.0 release is broken on the big sur betas because libsystem doesn't exist as a file on the disk any more. this is ostensibly fixed in master, see

1602003193
pixelherodev
ZigNewbie: ... do you have a build.zig ?

1602003225
ZigNewbie
yes, in fact I just did init-exe

1602003258
pixelherodev
`zig build` is running in the same folder, I assume?

1602003264
pixelherodev
and it prints out the help?

1602003267
pixelherodev
That sounds like a bug

1602003271
ZigNewbie
torque, the big Sur. I've been on trunk and latest daily build - both have same issues

1602006419
s-ol
i figured out the AVR assembly issue from yesterday

1602006458
s-ol
it is indeed an LLVM bug, and my original understanding was right, it wrongly parses / assembles inline assembly with relative offsets in jumps

1602006490
s-ol
all the clowning around yesterday was because the object-file output from LLVM leaves all jumps as .+0 and has a relocation entry on them

1602006523
s-ol
so I needed to link into a final ELF executable using avr-gcc before looking at the disassembly. There the problem is shown obviously

1602008724
pixelherodev
andrewrk: given the current situation with stage2, feel free to let me know what parts of CBE / astgen to focus on for 0.8

1602008792
fgenesis
s-ol: hm, compiler explorer doesn't offer anything but avr-gcc, that's a bit inconvenient

1602010498
s-ol
fgenesis: yeah i noticed that. Will put my repro file in the llvm bugzilla when they approve my account

1602018656
ikskuh
<fgenesis> s-ol: hm, compiler explorer doesn't offer anything but avr-gcc, that's a bit inconvenient

1602018663
ikskuh
you can just use clang with -target avr-freestanding-eabi

1602023640
andrewrk
pixelherodev, what's the current situation? I suggest to work towards getting all the same code examples that are passing for the other backends, also passing with the c backend

1602023668
andrewrk
do you need help setting up a test harness that compiles & runs the outputted c code?

1602023681
andrewrk
s/need/want/

1602024146
ifreund
andrewrk: hey, I was looking at exposing the new -femit-bin=foo option in the zig build system so I can get rid of the "lib" prefix on my libraries but it (intentionally) changes the behavior of --enable-cache

1602024174
ifreund
thoughts on what the best way to handle this would be?

1602024235
andrewrk
ifreund, yeah let's take a step back and re-think how this should work. especially in light of

1602024272
ifreund
ooo, i would love to cache some non-zig artifacts using the zig build system

1602024273
andrewrk
I focused mainly in matching previous behavior with this particular thing so that the branch could be merged, but now it's time to re evaluate how all this machinery should work

1602024333
andrewrk
the previous design had the constraint that the cache system existed only in the compiler. we no longer have that constraint

1602024649
Cadey
does zig support RISC-V GD32?

1602024702
andrewrk
Cadey, what's GD32?

1602024789
Cadey
andrewrk: RISC-V 32 bit with multiplication/division, atomic, single and double precision floating point instructions

1602024855
andrewrk
ah, yeah it does

1602024976
andrewrk
Cadey, here's an example of how you can get a list of recognized CPUs and CPU features:

1602025052
andrewrk
so you want -mcpu=generic_rv32+a+m+d+f

1602025802
pixelherodev
andrewrk: nah, I can do that myself, but that's a good call

1602025808
pixelherodev
Ah right, we talked about that :P

1602025819
pixelherodev
And, now that I'm remembering, you just solved the biggest blocker!

1602025847
pixelherodev
Now that the LLVM code is in stage2, we can make these tests depend on `enable-llvm`, pass the produced C code to LLVM, and then hook back into the normal `Execution` pipeline

1602025864
pixelherodev
You also just gave me a great idea to simplify the testing pipeline

1602025878
andrewrk
pixelherodev, yes, I specifically was thinking about this - the path forward is for the test runner to receive the path to the zig binary as a command line parameter, and make that available in std.testing.zig_exe_path and then pass that for self_exe_path to Compilation

1602025881
pixelherodev
A higher-level test harness which generates Cases for multiple architectures

1602025915
pixelherodev
That'd allow for e.g. tiered testing

1602025928
pixelherodev
A group of tests that all Tier 3 architectures have to pass, etc

1602025945
andrewrk
yeah I think that's where things are headed

1602025957
pixelherodev
Might be a good idea to define some new "tiers" for in-development backends to make it more obvious where they're all at

1602025993
pixelherodev
e.g. "stdlib support, no compilation"; "basic arithmetic and function calls only"; "everything astgen supports"

1602026001
andrewrk
yeah definitely. I think I will put that off until post-0.7.0 release

1602026021
pixelherodev
That's pretty arbitrary though, so it should be pretty limited

1602026023
andrewrk
it will be easy & fast to organize the tests once we decide to add this

1602026039
andrewrk
so, no rush to set it up IMO

1602026052
pixelherodev
I need to finish some physics work; I'll fix CBE test afterwards, and then work on C tests :)

1602026345
pixelherodev
Gah, okay. I'm using a static Zig again :(

1602026351
pixelherodev
I still need to fix my LLVM/Clang set-up

