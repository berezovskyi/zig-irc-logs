1591323142
pixelherodev
Brilliant idea: `pun` -> `pub fn`

1591323156
pixelherodev
Or `punk`

1591323161
pixelherodev
`public func`

1591341586
scientes
how do i build zig with asan?

1591341598
scientes
if i add -fsanatize=address then the link fails

1591341772
Amun_Ra
you have to add libasan too

1591341973
scientes
where?

1591341997
scientes
if i do -fsanatize=address -lasan I still get missing symbols, and all the docs say the only way to get those symbols is to link with clang, not lld

1591342188
scientes
got it

1591344176
scientes
yeah I can't get the glue to work. I've got this bizaare crash from getContext()

1591344181
scientes
which makes no sense

1591344922
mikdusan
scientes: are you rolling your own llvm/clang build?

1591345176
scientes
no

1591345187
scientes
stock ubuntu llvm10

1591345242
scientes


1591345528
mikdusan
make a skeleton main.c; do `clang -o main main.c -fsanitize=address -###` to show you command line args. try without -### to see if it even links. the args will tell you which libaries. maybe `libclang_rt.asan-x86_64.a` ?

1591345585
scientes
I got asan to build

1591345587
scientes
didn't help

1591345611
mikdusan
doesn't ubuntu llvm10/clang have asan?

1591345624
scientes
***correction: got zig to build with asan

1591345820
mikdusan
oh wait. you're building stage0/stage1 with gcc. ah. ok

1591345952
mikdusan
I see this on gcc 10.1 link line when using -fsanitize=address: `<snip>/../lib/libasan_preinit.o -lasan <snip>`

1591346741
mikdusan
scientes: I used stock archlinux, gcc-10.1 and asan was already installed; used this diff to build zig0 and seems to work fine. gives me leaks just doing `zig0 --help` and a ton of leaks with building .zig stuff.

1591346750
mikdusan


1591346768
scientes
but the path to the crash I am seeing had no asan errors

1591346780
scientes
or valgrind (except the crash itsself)

1591346900
mikdusan
maybe I misunderstand; sounded to me like using -fsanitize=address was giving you the crash and without it, no crash

1591346925
scientes
yes you did

1591350712
scientes
Yeah I don't think I can do this

1591350735
scientes
there is just too much to think about at the same time

1591356018
cren
has anyone made a TUI (text/terminal user interface) library for Zig yet?

1591356129
ifreund
not to my knowledge, but you could almost certainly use a C one

1591356243
cren
yeah that's true

1591360238
KoljaKube
G'day

1591360243
KoljaKube
Is there a way to cast away const?

1591360316
ifreund
KoljaKube: pretty sure @ptrCast will let you do that

1591360349
KoljaKube
That's what I expected, but I get "error: cast discards const qualifier"

1591360361
KoljaKube
In `@ptrCast(*vec3, a)`

1591360393
KoljaKube
(a is a *const vec3)

1591360406
ifreund
hmm, maybe not then

1591360435
ifreund
well, @ptrToInt and @intToPtr would probably work

1591360443
KoljaKube
`@as` didn't work either`

1591360457
KoljaKube
That sounds ... hacky?

1591360471
ifreund
casting away const is hacky

1591360484
ifreund
ideally you should never have to do this

1591360507
KoljaKube
Not my fault, the library I'm trying to use just doesn't use const for readonly parameters

1591360524
KoljaKube
But I can see in the source that nothing is mutated

1591360533
ifreund
ah

1591360541
ifreund
yeah that's kinda annoying

1591360577
KoljaKube
I know that it should not be done without a very good reason, but I would have expected that there still would be a language feature for it

1591360595
KoljaKube
You are right about the int casting by the way

1591360603
ifreund
cool

1591360626
ifreund
if this is a C library you could probably modify the generated bindings to make the function take a const pointer

1591360634
KoljaKube
I guess I can use that for now

1591360678
KoljaKube
Is there documentation on how to do that in a way that survives deleting zig-cache?

1591360706
KoljaKube
Although I don't know how much that would help, since the in-only parameters are not marked in any way

1591360737
KoljaKube
Submitting a const-patch upstream would probably be the same amount of work

1591360748
ifreund
I haven't actually tried this myself yet, but the idea is that you'd call `zig translate-c` manually, put the output in your repo, and use that as a package

1591360771
ifreund
yeah sending the a patch upstream would be a good move

1591362263
KoljaKube
By the way, is `*const i32` a const pointer to an int, or a pointer to a const int?

1591362274
KoljaKube
It kind of seems to be both?

1591362395
ifreund
pointer to a const int

1591362418
ifreund
if you are taking that as a paramter, it will be a const pointer to a const int since parameters are always const

1591362477
ifreund
in zig you just read right to left, unlike C where you usually read left to right but sometimes add some loops

1591362498
KoljaKube
I should think before I write, of course I can't reassign a pointer I declared `const` :D

1591362507
ifreund
hah

1591363071
ask6155
Hello!

1591363105
KoljaKube
Hi

1591363157
cren
hello

1591363170
ask6155
Hey, has someone made a zig cheatsheet yet? The documentation is long (And that's good) but I'd like to get in quickly.

1591363200
cren
I was thinking of writing a "Getting started with Zig" article but I don't know enough about Zig yet xD

1591363357
ask6155
Is there a video quickstart by someone?

1591364387
ask6155
Is it possible to have a dynamic array?

1591364427
ifreund
ask6155: you want std.ArrayList

1591364449
ifreund
in general there is no allocation built into the language, it's all userland

1591364535
scientes
except the stack

1591364561
scientes
ask6155, it is short

1591364568
scientes
and there are two sets of general documentation

1591364585
pmwhite
What languages do have allocation built-in?

1591364593
ask6155
yeah so I pass it a type and it gives me a var?

1591364595
scientes
all garbage-collected languages

1591364609
scientes
but even C

1591364729
pmwhite
How-so with C? I wouldn't count malloc, since that's the stdlib, and Zig also has a stdlib allocator.

1591364912
ifreund
c++ has new/delete

1591365709
leeward
The difference between Zig and C here is that C libraries assume you're going to use malloc. If you want to use a different allocator, you have to play games with the linker. Zig bumps that up a layer. It's either a minor irritant (everything takes an allocator) or super handy (everything lets you specify an allocator) depending on your use case.

1591365836
gonz_
It's infinitely easier to see what allocates if everything that allocates has to make it obvious.

1591365862
leeward
True facts.

1591365866
gonz_
So it'll always be super handy. People who complain about having to make things more obvious when it's something so important should get some perspective.

1591365893
pmwhite
leeward: that's more the culture and ecosystem than the language, though.

1591365937
pmwhite
ifreund: good point, it's been a while since I've used C++, so I didn't even think of that.

1591365941
leeward
pmwhite: True. I don't agree with scientes's statement about even C having an allocator bulit in.

1591365982
ifreund
libary design is kinda part of language design tbh

1591366009
ifreund
how people use languages is very much defined by how the major libraries are written

1591366017
leeward
It is, and the ecosystem is important, but Zig comes with allocators in lib/std.

1591366039
pmwhite
It would be interesting to make a libc alternative with custom allocators.

1591366127
pmwhite
ifreund: true, I'm thinking of what you said with how Zig allocation is user land, which is also the case for C, and both have allocators in their standard libraries..

1591366138
leeward
I've worked on systems where malloc was a pool allocator.

1591366146
fengb
malloc is unfortunately global and pervasive so it’d be hard to make other libraries work like that

1591366177
ifreund
pmwhite: yeah, hence my point about the design of libraries, in particular standard libraries, being part of language design

1591366185
fengb
Compilers generally let you swap the malloc implementation but not per unit

1591366193
ifreund
allocation is userland in C, but practically it may as well not be

1591366218
leeward
I don't know about that. Lots of embedded systems just assume malloc doesn't exist.

1591366233
ifreund
ok, yeah that's very true

1591366236
pmwhite
Have there ever been discussions toward removing parens around the condition of control flow blocks?

1591366249
fengb
It’s for disambiguation

1591366260
ifreund
well then you can't do `if (thing) 1 else 2;`

1591366291
companion_cube
pmwhite: lots of discussions, but it ultimately clashes with `{a;b}` not being a value-returning expression

1591366304
companion_cube
(cause if you remove () you want to add {})

1591366365
ifreund
yeah, i think zig has pretty much made its choice on the `if thing { a } else { b };` vs `if (thing) a else b;` decision

1591366413
pmwhite
What prevents if thing a else b?

1591366424
companion_cube
how do you delimit `thing`?

1591366484
pmwhite
It's an expression. Zig doesn't allow juxtaposition of expressions, so it's not ambiguous.

1591366513
companion_cube
I don't think it would work with a simple grammar

1591366519
companion_cube
(ie no lookahead)

1591366632
pmwhite
You would need parens for complex conditions without braces, but you wouldn't when you do use braces.

1591366677
companion_cube
almost all conditions are more than an identifier, I think :)

1591366691
pmwhite
companion_cube: hmmm, perhaps that's true.

1591366740
ifreund
imo you loose in readablity by dropping the parens without adding curlies too

1591366751
ifreund
s/oo/o/

1591366766
fengb
Wow somebody using lose correctly

1591366773
fengb
Or mangling the to

1591366801
ifreund
:D

1591366820
ifreund
it's the former, i didn't ad a g at the end

1591366824
ifreund
s/ad/add/

1591366853
pmwhite
companion_cube: almost all conditions are followed by curlies, though, right?

1591366865
companion_cube
imho they should

1591366891
companion_cube
syntax is to be bikeshed to death :D

1591366895
ifreund
i've been dropping them a lot recently

1591366904
fengb
#5076

1591366911
ifreund
if (condition) foo.bar();

1591366921
ifreund
pretty readable imo, you see it a ton in the std as well

1591366923
companion_cube
ifreund: too close to goto fail; to me taste :s

1591366962
fengb
Goto fail is on the plate for a syntax error

1591366985
companion_cube
because of indentation?

1591366988
ifreund
yep

1591367002
ifreund
also zig fmt already fixes it

1591367013
ifreund
though making it a compile error is even stronger

1591367080
scientes
shedbike

1591367268
pmwhite
Okay, better idea. Make the parser pluggable so that people who are sufficiently peeved and motivated can make their own syntax.

1591367321
companion_cube
:DDDD

1591367323
fengb
I think that’s built into our tooling. I think it’s called a “fork button”? 🙃

1591367332
companion_cube
call the fork "zen"

1591367333
companion_cube
oh wait

1591367493
pmwhite
Lol, that brings a load of other issues with it. If the std lib comes with an AST printer, then I guess it really is not that harder to transpile a custom syntax to Zig.

1591367557
fengb
With ZIR being a thing, I don’t think it’d be too hard to develop a separate frontend

1591367604
companion_cube
fragmentation of syntax isn't something I'd wish on a small community

1591367604
fengb
If you’re not bikeshedding semantics, it should be pretty simple to maintain a different syntax

1591367631
fengb
Then all variants of #5076 can be a thing!

1591367637
companion_cube
maybe you could comptime set what parser you use at the start of the file 🙃

1591367659
companion_cube
parsers are just packages

1591367733
leeward
sounds like something Haskell would do.

1591367804
companion_cube
meh, haskell has a pretty minimal syntax

1591367811
companion_cube
but in OCaml we have that, in a way: ReasonML

1591367821
companion_cube
(and there's a bit of a cultural fork of the community around that)

1591367828
companion_cube
(webdevs vs old timers)

1591367867
pmwhite
I don't think fragmentation of syntax is actually that bad of a thing. For one thing, each project will probably enforce one syntax. For another, Zig programmers would learn to be better at learning new syntaxes. Then again, it might just be a bunch of extra cognitive burden to switch between different syntaxes.

1591367893
gonz_
Racket has more of what fengb is talking about. Racket is a platform/language for making languages that can run on that platform.

1591367910
companion_cube
well racket is designed for that, yes

1591367923
companion_cube
pmwhite: what I'd fear is that tooling would have trouble keeping up (say, zls)

1591367961
leeward
See also: Erlang/Elixir, all the JVM/.NET languages.

1591367978
pmwhite
Ideally, reading and writing code  are decoupled enough that one person can write in one syntax, and another person can read the same code in their own preferred syntax.

1591367981
companion_cube
the jvm langs are pretty distinct, it's not just syntax

1591368018
leeward
fair

1591368022
pmwhite
Just like how tabs are!

1591368034
leeward
Coffeescript...

1591368039
fengb
Isn’t Racket just Scheme taken to the extreme? Make your own DSL and call it a separate language

1591368060
fengb
JavaScript is the ultimate language platform :P

1591368088
companion_cube
racket is a proper research language on how to make an extensible language

1591368093
companion_cube
(and the compile to go with it)

1591368103
companion_cube
it's much more advanced than normal scheme afaict

1591368105
gonz_
This would depend on how you define what a separate language actually is.

1591368109
gonz_
And yes it is.

1591368158
gonz_
At the top of your file you usually specify which language the file is written in: `#lang datalog`, etc.

1591368174
gonz_
Of course, you can also have `#lang sicp`. Is the difference to Racket huge in that case? No.

1591368193
companion_cube
but you can mix and match within one project, righT?

1591368196
gonz_
Yes.

1591368211
companion_cube
so that's pretty nice.

1591368234
companion_cube
I'd take a `#syntax rust` at hte beginning of the file, I must say :p

1591368247
companion_cube
replace const with let, mandatory {}, and no need for labelled breaks :p

1591368483
pmwhite
It would fit with the "decentralised community" idea.

1591368494
fengb


1591368568
gonz_
Which one? There are so many in the thread. :D

1591368580
fengb
The one I linked directly

1591368587
fengb
“Go doesn’t need to be fast”

1591368592
fengb
Like... wat

1591368646
gonz_
I can sympathize with people wanting better compile-times and giving up optimization for it, but I'm not sure I see the point for release builds.

1591368652
leeward
Yeah, I think that person doesn't understand Go's design goals.

1591368692
gonz_
I'd like to have the dumbest compiler ever for dev builds, or just real degrees with which to control optimization.

1591368851
gonz_
I think Per Vognsen's response to "How do you make a sophisticated compiler that's fast?" was pretty on point in the Twitter thread I linked last time we talked compiler speed a few days ago

1591368856
gonz_
"You don't make it sophisticated"

1591368867
gonz_
It's completely valid

1591368895
companion_cube
fengb: it's already reasonably fast

1591368901
fengb
Fast, sophisticated, pick one?

1591368903
companion_cube
I think people who say that are comparing it to python

1591368916
fengb
It’s fast but it can go faster

1591368926
companion_cube
but it'd probably make compile times worse

1591368934
fengb
And I don’t know why you’d ever have the attitude “oh... we don’t care about speed”

1591368948
fengb
In any language, not just Go

1591368966
companion_cube
because you can make something that ~works in 1 week instead of 2, I imagine

1591368968
companion_cube
or so I hear

1591368978
gonz_
fengb: I think for the kinds of compiler speeds I want, yeah, you probably can't have it do much.

1591368983
gonz_
Just emit the code, move on, etc.

1591369024
fengb
“Does it really, though? Go really isn't meant for number crunching, or any CPU-bound code, really.”

1591369025
leeward
In the speed/cost tradeoff, most of my code has the slider set all the way to cost.

1591369037
companion_cube
fengb: yes that's also realistic

1591369046
leeward
If something's not fast enough, measure it and find out what, then make that part fast enough.

1591369055
companion_cube
syntax sucks for number crunching anyway, people expect operator overloading these days

1591369069
fengb
Um... Java runs fast and doesn’t have this attitude

1591369090
fengb
Took quite a bit of effort but still

1591369120
companion_cube
java starts slow though, they optimized for different things

1591369131
companion_cube
and memory usage is… not the best 🤷

1591369138
fengb
My point is this is a shit attitude

1591369140
gonz_
Big picture Java doesn't run that fast and realistically speaking can't, though.

1591369148
fengb
“Oh just don’t use Go”

1591369157
gonz_
For what it's worth I agree

1591369174
fengb
But it can run fast. HFTs commonly use Java

1591369179
gonz_
But also see where people are coming from when they don't want to give up something they have for something they don't know they'll have or enjoy having.

1591369181
companion_cube
Go can occupy some niches java is terrible at

1591369184
companion_cube
like CLI tools

1591369199
companion_cube
gonz_: yeah the "no need for generics" kills me every time

1591369206
fengb
I feel like a lot of Go is just cultists

1591369208
companion_cube
(or, and it's not even on their radar, the lack of sum types)

1591369213
leeward
I really like Zig's solution to generics.

1591369216
fengb
“I have this so sucks to be you”

1591369224
fengb
I get it’s about trade offs

1591369240
fengb
But let’s talk about trade offs instead of saying “that’s not the Go way”

1591369272
fengb
Feels like Go people love to pigeonhole their language into “it’s made the perfect trade offs already!”

1591369295
leeward
fengb: The language designers did talk about tradeoffs when they decided to exclude them. Can't really stick the users and fanboys with the job of defending language design decisions.

1591369335
fengb
Yeah I’m mostly fine with the designers. They’re still sorta wanting to include generics without compromising the language too much

1591369348
fengb
But then you got the fanboys going “generics are dumb!”

1591369357
companion_cube
rob pike was also like that, tbh

1591369358
leeward
That happens with any language that gets popular.

1591369406
gonz_
Rob Pike gets let off the hook even though he's arguably a big catalyst for a lot of dumb stuff in the general discourse around lack of certain features, yeah.

1591369444
fengb
Like syntax highlighting? 🙃

1591369449
leeward
If things work out, some day there will be Zig fanboys saying that...(variadic functions) are dumb and useless and should never exist. (placeholder for feature of your choice)

1591369451
companion_cube
generics are dumb, except for the few custom types Go designers wanted

1591369463
companion_cube
leeward: at least Zig has a good alternative to that :p

1591369482
ikskuh
companion_cube: not yet, though

1591369487
fengb
I liked Go for being simple and pragmatic :(

1591369488
leeward
companion_cube: Go has an alternative to generics: write more code.

1591369493
ikskuh
right now zig replaces "variadic functions" with "code bloa"

1591369495
ikskuh
*bloat

1591369497
fengb
go generate

1591369522
companion_cube
ikskuh: I thought the tuple solution was good? am I missing something?

1591369532
ikskuh
yes: every tuple makes the funtion generic

1591369536
ikskuh
and creates it's own copy

1591369558
companion_cube
oh I see what you mean.

1591369575
companion_cube
how are varargs normally passed to a function, in C? idk anything about the call convention

1591369590
leeward
It's an array.

1591369594
leeward
Also: it's awful.

1591369601
ikskuh
no, it's not an array

1591369604
fengb
How do you have an array of heterogeneous items?

1591369615
ikskuh
it's passed via the stack

1591369626
leeward
it's a va_list

1591369632
ikskuh
a function with void(int,int) is the same as void(int, ...)

1591369634
leeward
Sure, not actually an array, sorry.

1591369637
ikskuh
when you pass another int

1591369642
ikskuh
internally it's pointer magic

1591369648
companion_cube
that also seems awful…

1591369650
ikskuh
in the standard, it's defined that you have to use va_list

1591369658
fengb
But... what if you have (int, struct, char)

1591369662
ikskuh
well

1591369665
fengb
How do the values line up?

1591369666
ikskuh
that will still call the same function

1591369681
leeward
man 3 stdarg

1591369693
ikskuh
and it will just yield invalid code :D

1591369698
fengb
Oh I think I read about a bug that manifested where someone passed a long instead of a short

1591369728
ikskuh
yep, that will happen

1591369734
companion_cube
you also lose all type safety

1591369747
companion_cube
I mean, are variadic functions that common? outside of format?

1591369754
leeward
companion_cube: This is C we're talking about, right? What type safety?

1591369765
companion_cube
I know, but how to adapt it to Zig? :p

1591369767
gonz_
I was gonna say, for such an unimportant feature there's a lot to pay for it.

1591369790
fengb
format() is pretty bloated once you start using it heavily

1591369797
fengb
And not at all obvious

1591369831
ikskuh
yep

1591369849
ikskuh
it also duplicates a lot of code

1591369861
ikskuh
i think that andrew has a solution for that up his sleeve but i'm not sure

1591369947
fengb
Copy-paste reuse is the best kind of reuse

1591369999
ikskuh
well, i think zig can do something about it

1591370020
ikskuh
but not sure how it should work as every format function has a different signature

1591370024
ikskuh
and has hidden overloading

1591370051
companion_cube
ikskuh: the solution to template-like bloating is to pre-specialize templates ;)

1591370054
companion_cube
as is known in C++

1591370142
shakesoda
i'm really getting those "when this happens you've already lost the battle" vibes here

1591370164
shakesoda
as usually happens when generics and templates and code generation come up

1591370224
ikskuh
shakesoda: i don't see a solution right now

1591370231
shakesoda
zig's solution to such things is the most reasonable i have encountered and yet still ends up pretty regularly in scary places

1591370284
shakesoda
ikskuh: nor do i

1591370544
ikskuh
problem right now is probably that the formatting thing is a bit

1591370561
ikskuh
it should be possible to make it non-inline the formatting functions itself

1591370573
ikskuh
so

1591370584
ikskuh
warn("{},{}", .{ a, b} ); will just get

1591370587
ikskuh
printFormatted(a);

1591370591
ikskuh
printraw(",");

1591370596
ikskuh
printFormatted(b);

1591370612
ikskuh
and force-inline and force-unroll the formatting

1591370618
ikskuh
which will then also compile to very small code

1591370627
ikskuh
as every formatting function for a type is only generated once

1591370641
ikskuh
and the formatting itself is inlined

1591370655
ikskuh
which is okay as it's in 95% of all cases special to that place anyways

1591370692
ikskuh
only thing that is needed is some kind of type enforcer

1591370710
ikskuh
which converts `*[N]T` to `[]T`, same for const

1591372750
scientes
this is like pulling teeth

1591372765
scientes
I have no idea what is going on

1591372771
fengb
People get paid good money for pulling teeth

1591372772
scientes
and values just drop out

1591372776
scientes
fengb, hahahaha

1591372850
companion_cube
fengb: and they may even get good job satisfaction

1591372892
scientes
this is what I have. The algorithm code works great, but I can't get the glue to work.

1591372943
scientes
the target_value llvm value just turn out null

1591372953
scientes
and I have no idea what clif it is falling off of

1591373128
leeward
companion_cube: I hear dentistry has a very high rate of depression, as carreers go.

1591373139
leeward
er, careers

1591373140
scientes
and NO usage

1591373323
scientes
there is a type, but no value

1591373325
scientes
which is strange

1591381044
pixelherodev
Anyone able to look into the leak in #5514?

1591381048
pixelherodev
If not, it'll be a while

1591381061
pixelherodev
I'll have to set up VSCode / MSVC in a VM or something, which will be at least a week

1591382857
FireFox317
pixelherodev, still need help with #5514? I have a Windows box here

1591382927
pixelherodev
FireFox317: that'd be awesome

1591382930
pixelherodev
I'll have to set up a VM at some point

1591383125
FireFox317
brb

1591387555
FireFox317
andrewrk, for some reason windows CI is passing, but when I build it locally and run tests it does not pass. See

1591391111
Cadey
andrewrk: do you think the zig translate-c is good enough to handle things like dwm?

1591391118
Cadey
translate-c functionality

1591391231
ifreund
Cadey: try it an see, i don't know anything that would make translating dwm in particular not work

1591391436
pmwhite
Is there a Zig toml library, or do I need to make one?

1591391563
ifreund
pmwhite: there is, but it may be out of date/incomplete

1591391576
ifreund
might help to get you started at the very least

1591391653
pmwhite
Oh, last change six months ago...ancient.

1591392284
ikskuh
TOML was improved ini files,  right?

1591392399
ifreund
yeah, though it can also replace yaml as better human readable config

1591392413
ifreund
i kinda hate the yaml indentation thing

1591392448
ikskuh
i hate yaml by heart

1591392456
ikskuh
it's not really readable

1591392493
fengb
Just because Norway gets parsed to false doesn’t mean it’s bad

1591392509
companion_cube
toml also sucks if you want nesting

1591392548
ikskuh
unpopular opinion: xml is quite human-readable for nested data

1591392582
companion_cube
give me sexps or bust

1591392584
companion_cube
xml is too verbose

1591392613
ikskuh
i don't think s

1591392615
ikskuh
*so

1591392625
ikskuh
i tried using json, but it's not made for humans

1591392646
ifreund
companion_cube: not really, it doesn't have to  be "flat" you know

1591392678
ifreund
I agree, xml really isn't bad

1591392686
ikskuh
companion_cube: can you make a nice sexpr example for a simple config with more complex strings

1591392698
ikskuh
for example with multiline strings, which are easy in XML

1591392790
fengb
“Easy” but not well defined

1591392800
fengb
Do those spaces count? Who knows!

1591392822
ikskuh
i usually take content verbose :D

1591392826
ikskuh
so: yes, they do!

1591392902
ikskuh
and: wow

1591392911
ikskuh
TOML isn't an epitome of "simple"

1591393010
ifreund
agree, it trades simplicity for readability

1591393024
ifreund
though I don't find it hopelessly complex

1591393045
ikskuh
yeah, true

1591393057
ikskuh
most applications use it as INI anyways :D

1591393197
companion_cube
ikskuh: I don't know, what do the multiline strings look like in xml?

1591393209
companion_cube
if you want proper strings in sexps, do like json, escape the \n I thin

1591393212
companion_cube
k

1591393226
ifreund
<tag1> string with line breaks </tag1>

1591393230
ikskuh
multiline is just … multiline

1591393240
ikskuh
no escaping for anything except < and > necessary

1591393309
companion_cube
but can you still indent? or is whitespace undefined, as fengb pointed out?

1591393340
ikskuh
i would say it's "implementation defined"

1591393345
fengb
Depends on how you parse it. The spec doesn’t help so you’ll have to tune the parser to match the document

1591393356
companion_cube
so that's not very useful

1591393379
companion_cube
xml is good for documents, I think (like… html)

1591393383
ifreund
honestly toml does this better than xml

1591393386
companion_cube
where whitespace doesn't matter

1591393396
ifreund
just """ to start and end a multiline string

1591393411
ikskuh
ifreund, ah, markdown way :D

1591393419
ikskuh
is """a included in the string though?

1591393427
ifreund
except well specified

1591393444
ikskuh
well, commonmark is well specified as well

1591393449
ikskuh
but sadly complex

1591393466
fengb
That’s because markdown was ambiguous and underspecced:(

1591393485
fengb
Commonmark was the compromise to fit what parsers actually did

1591393500
ikskuh
yeah

1591393513
ifreund
ikskuh: looks like you can escape with \" in """ strings

1591393514
companion_cube
and the original markdown author actively resisted standardization :/

1591393517
ikskuh
problem is that people added too much features

1591393525
ifreund
they also have ''' strings though which have no escapes

1591393533
ifreund
"literal strings" is what they call them

1591393571
ikskuh
what about zscl ? :D

1591393579
ikskuh
i really like the idea of zig multiline strings

1591393582
ikskuh
they don't need escaping

1591393592
ifreund
yeah they're really good

1591393620
fengb
I really like how the Zig grammar has evolved to remain unambiguous

1591393630
ifreund
i love the fact individual lines are context free

1591393662
ikskuh
yeah that's great

1591393684
ikskuh
has anyone here looked at the gemini project? i know pixelherodev did

1591393700
ikskuh
it has it's own markup language, text/gemini

1591393723
CommunistWolf
gemini is most excellent

1591393724
ikskuh
has semi-line-independent parsing and you only have to look at the first three chars of a line to determine it's type

1591393732
ikskuh
yeah, i really like the project

1591393734
ifreund
that's the one that's supposed to be halfway between www and gopher right?

1591393737
ikskuh
yeah

1591393742
ikskuh
have written a semi-good client in zig

1591393748
ikskuh
and writing a visual client with Qt atm

1591393754
ifreund
oh? very cool

1591393766
ikskuh


1591393774
ifreund
hah, great name

1591393780
companion_cube
ikskuh: gemini looks fun

1591393781
ikskuh
thanks

1591393785
ikskuh
it is!

1591393792
ikskuh
it fits the zig spirit really well

1591393792
companion_cube
could be a nice small web free of ads

1591393801
companion_cube
I've installed castor last week

1591393814
companion_cube
might do a simple client at some point, idk

1591393852
ikskuh
hehe

1591393860
ikskuh
maybe you want to try Kristall then? :D

1591393880
ikskuh


1591393894
ikskuh
it's more stable then castor already

1591393915
ikskuh
and has tabs and a semiish browsing history :D

1591393953
companion_cube
oh?

1591393961
ikskuh
yeah :D

1591393964
ikskuh
wanted to do some hacking tomorrow to finish up back/forward navigation

1591393972
companion_cube
it's not on AUR though, I'm lazy

1591393976
ikskuh
it has no handling for certificates atm though

1591393977
ikskuh
lol :D

1591393987
ikskuh
you have qt/qmake installed?

1591394000
CommunistWolf
I've been withdrawing from the web over time, so gemini is most welcome

1591394011
CommunistWolf
someone get wikipedia on it

1591394014
ikskuh
git clone repo; cd repo; mkdir build; cd build; qmake ../kristall.pro; make -j4;

1591394056
companion_cube
CommunistWolf: probably not easy since you'd need to modify the pages so that links are standalone :s

1591394064
companion_cube
it is a good stress test though!

1591394099
CommunistWolf
todo es posible

1591394119
companion_cube
the web is still nice if you do your own thing with basic html

1591394120
ikskuh
guys, join the ML and join irc.tilde.chat/#gemini

1591394142
ikskuh
i started co-hosting this

1591394151
ikskuh
web part is rendered from text/gemini

1591394172
companion_cube
what's the port for that?

1591394183
ikskuh
gemini? 1965 :D

1591394215
companion_cube
nah, tilde.chat

1591394217
ikskuh
ah

1591394223
companion_cube
6667 seems to not work (unless it's no ssl?)

1591394231
ikskuh
6697/TLS

1591394240
companion_cube
ah thanks

1591396266
pixelherodev
ikskuh: gemini :)

1591396270
pixelherodev
=

1591397235
Xavi92
any pointers on how to provide an implementation of std.fs.openFileAbsoluteZ() for a new OS? Is it needed to modify the standard library from zig sources?

1591397411
arekishi
yes

1591397952
Xavi92
thanks, arekishi

