1599270465
Cadey
andrewrk: is it normal for the zig stdlib to assume /dev is mounted sanely?

1599276024
klltkr
Cadey, what's your issue?

1599291957
dec05eba
i rewrote mem.indexOf and mem.lastIndexOf to use boyer-moore-horspool algorithm instead of naive search and it looks like the boyer-moore-horspool version was slower. I guess the compiler is knows the naive version is a string search and optimizes it better

1599291966
dec05eba
lol

1599300187
KoljaKube
ikskuh: Your suggestion with the duplicated struct definitions works btw. Luckily there are only four cases of it, so I can stomach the duplication

1599312874
mkchan
is there a way to mark a function as comptime-only (consteval from c++)? I'm writing a function (in an enum namespace) that returns a pre-built list so i can iterate over it. i suppose inline is equivalent and calling it with comptime at the call-site should be the same as well but that's kind of roundabout

1599312909
ikskuh
mkchan: you cannot mark a function comptime-only, but you can just write code that only works at comptime

1599312919
ikskuh
the compier will error as soon as you try to call it at runtime

1599312960
mkchan
what if i say the return type is `comptime [num]Type`

1599312998
ikskuh
just say the return type is [N]Type

1599313001
ikskuh
and you'll be happy :)

1599313003
fengb
comptime is an expression modifier. Since types are always comptime known, that does nothing

1599313091
mkchan
i understand that the compiler will probably do it without actually calling the function, but isn't there a way to be compile-time sure of it?

1599313133
mkchan
comptime { return list }; unreachable; seems kinda hacky if it even works lol

1599313230
ikskuh
why would you want to call the function only at comptime?

1599313258
mkchan
because it's a prebuilt list of enum values, it's obviously comptime-available

1599313312
mkchan
inline is equivalent for my use case so i don't mind using that if there's really no way to do it comptime

1599313330
mkchan
i don't actually need it at compile time

1599313338
ikskuh
if you want to enforce comptime eval, just call the function with `comptime foo()`

1599313377
ikskuh
functions in zig will always be agnostic to comptime as long as possible

1599313416
mkchan
i mentioned that... it's just that i was hoping to enforce that a function can only be called with comptime and therefore not require the comptime keyword at call-site because that's way more repetitive

1599313447
ikskuh
make all args comptime then?

1599313463
mkchan
there are no args, it's a no-arg function that has 1 line which returns a list

1599313494
KoljaKube
Why isn't it a variable then?

1599313536
ikskuh
^-

1599313558
fengb
You can do something like `const foo = blk: { do stuff; break :blk result; }`

1599313559
mkchan
that works fine for me actually i just didn't try a pub const in enum, thanks

1599313592
fengb
Oh yeah enums are containers like structs

1599313724
mkchan
in fact that solves my use case, i can just store a comptime-called function into a variable to emulate consteval

1599313897
KoljaKube
Is there something in std that lets me convert a [*c]u8 of known length to a []u8?

1599313911
ikskuh
std.mem.span

1599313929
fengb
If you know the length, you can slice it

1599313962
ikskuh
oh yeah, sorry

1599313963
KoljaKube
ikskuh: That would count the length, and I don't think the pointer is zero-terminated

1599314003
KoljaKube
So ptr[0..known_length]?

1599314032
ikskuh
yep

1599314069
KoljaKube
Thanks

1599314076
KoljaKube
No idea why I blanked on that :D

1599314197
KoljaKube
mkchan: There's really no use in forcing comptime if you are working with types. Those are only available at comptime, there is no way your initializer function could be called at runtime

1599314240
mkchan
i'm working with values

1599314285
KoljaKube
Ah, sorry, misread

1599314325
mkchan
enum Stuff { A, B, fn all() Stuff { return [_]{.A, .B}; } } essentially

1599314335
mkchan
now i just have a const called all

1599314415
ikskuh
@mkchan: that function can be generated with comptime code as well

1599314533
mkchan
i figure yeah with some reflection but my actual enum is non-exhaustive so i guess that's a bit more complicated than just iterating through everything?

1599314606
mkchan
actually i'd love it if you could point me to the right functions for iterating over the enum to generate that anyway

1599314616
mkchan
for exhaustive ones at least

1599314635
fengb
std.meta.fields

1599314668
mkchan
:') undocumented but let me take a look

1599314686
fengb
std.meta is a treasure trove

1599314706
mkchan
hm it's actually a really simple function

1599314725
ikskuh
<fengb> std.meta is a treasure trove

1599314726
ikskuh
true

1599314747
ikskuh
<mkchan> hm it's actually a really simple function

1599314755
ikskuh
that's true for most zig metaprogamming

1599314759
ikskuh
except … some things

1599314877
mkchan
i tried at one point to store a generic Writer() and Reader() which i intended to be an abstraction over std.fs.File.Writer and over a socket writer but i couldn't do it

1599314887
fengb
What, like your tuple hack? :P

1599314912
mkchan
i think i just tried to make a var writer: std.io.Writer in a struct and obviously that doesn't work because it requires comptime params

1599314928
mkchan
so then i tried to make a function which takes that at comptime and pass it to the Writer and failed hard

1599315036
ikskuh
fengb: interface.zig :D

1599315073
fengb
Oh I just realized @Type(.Struct) lets me define tuples in possibly a less dumb way

1599315106
ikskuh
yep

1599315110
ikskuh
we got that now :)

1599316280
mkchan
is there a way to make a file be implicitly an enum instead of a struct?

1599316378
fengb
Nope

1599316430
mkchan
damn! i can't shove an anonymous enum into a namespace-like file either right?

1599316445
mkchan
it's really just to avoid an extra qualifier name

1599316640
ikskuh
huh?

1599316653
ikskuh
you can just do const Foo = @import("foo.zig").Foo;

1599316774
mkchan
that's what i am doing now @import("enums.zig").MyEnum

1599316986
mkchan
lastly, does using // zig fmt: off and // zig fmt: on work? it isn't working in my vscode with ZLS for VSCode

1599317012
ikskuh
yes it works

1599317017
ikskuh
but only for top-level declarations

1599317079
mkchan
ouch.. you mean i'd have to surround my entire enum decl with it not just the enum values (that are in a pattern)

1599317113
mkchan
that works alright

1599317198
fengb
Embrace the formatter

1599317206
mkchan
not ideal but thanks for all the enum hackery help

1599317847
blueberrypie
Does anyone know if there is a plan (or already existing support) for code coverage in Zig?

1599317850
blueberrypie
Currently, I think the way it could be implemented is by parsing the ast and adding that code coverage callbacks to a special build but that seems pretty poor especially with comptime being a thing.

1599324233
mkchan
any chance for a do-while loop?

1599324393
ikskuh
nope

1599324393
ikskuh
.D

1599324426
ikskuh
andrew even wants to remove the for loop, but the community stands strong :D

1599324460
mkchan
motivated by trying to keep the language simple eh? I can get behind that coming from c++

1599324517
ikskuh
hehe

1599324519
shakesoda
i kind of also don't like the for loop, and while's funky glued on statement for incrementing stuff

1599324547
mkchan
if with initializers is just about my most hated "normal" syntax (normal in quotes because of the weird stuff the grammar actually allows but no one sane ever uses)

1599324563
ikskuh
mkchan: in c++? i love if with init :D

1599324573
ikskuh
for loop is okay, makes intention more clear than a construct iterating with some variables

1599324575
mkchan
just wrap the if inside another scope

1599324578
ikskuh
iteration is just a too common pattern

1599329338
cr1901_modern
I am still learning, it seems...

1599337112
kristoff_it
Zig SHOWTIME starts in about 40m, in the meantime the preshow is live

1599340132
smolck
hello! I'm new to Zig, and I've been looking around trying to figure out how to spawn a process with `std.ChildProcess` and then read from that process's stdout. How can I do that?

1599340176
smolck
I've tried to use the spawn function and then access the stdout, but child.stdout is always null

1599340195
ikskuh
you can create a new process

1599340201
ikskuh
and then set the stdout behaviour for it

1599340237
ikskuh
var proc = ChildProcess.init(…)

1599340242
ikskuh
proc.stdout_behavior = .Pipe;

1599340302
smolck
yeah I tried that, but after doing an init with {"nvim", "--embed"} as args and spawning the process, the stdout is still null

1599340403
ikskuh
hm

1599340431
smolck
wait a second

1599340656
smolck
okay well I have no idea why that didn't work before

1599340666
smolck
thank you

1599340729
ikskuh
\o/

1599340733
ikskuh
you're welcome? :D

1599340741
smolck
XD

1599340791
smolck
now I guess I can ask how do I read from stdout?

1599340835
ikskuh
stdout is a file

1599340841
ikskuh
use stdout.?.read()

1599340850
ikskuh
or stdout.reader().…()

1599340862
ikskuh
see std.io.Reader() to see all functions for that

1599340874
smolck
great thank you

1599341869
smolck
is there a way to read all of the bytes out of a File/reader?

1599341882
smolck
rather than doing, say, just enough to fill a [100]u8

1599341944
smolck
doing var buf: []u8 = undefined; readAll(buf); doesn't work

1599341997
ikskuh
you need to allocate memory

1599342001
ikskuh
there's a readAllAlloc :)

1599342073
smolck
aha, great that works

1599342085
smolck
cool

1599342330
smolck
do I have to free the memory from readAllAlloc later?

1599342398
Nypsie[m]
Yes

1599342434
smolck
how do I do that? depend on the allocator?

1599342450
smolck
*does it depend on the allocator

1599342478
ikskuh
usually just use allocator.free(result) where allocator is the thing you passed into your alloc function

1599342483
Nypsie[m]
`const data = ...readAllAlloc(allocator, ..);   allocator.free(data)`

1599342507
smolck
cool, just found that function right after I asked the question haha

1599342525
smolck
thank you

1599342696
cr1901_modern
How does one install a zig library?

1599342697
cr1901_modern
I'm trying "zig build install" to test the default install location, but it seems because the tests fail (upstream bug) I can't install it

1599342781
ikskuh
cr1901_modern: download the library

1599342807
ikskuh
then use zig build-exe --pkg-begin my-library-name /some/path/to/lib.zig --pkg-end my-main.zig

1599342813
ikskuh
and use @import("my-library-name")

1599342820
ikskuh
or you can use the build system and do

1599342832
ikskuh
exe.addPackagePath("my-library-name", "/some/path/to/lib.zig");

1599342883
cr1901_modern
cool, I'll do the latter, thanks!

1599342937
ikskuh
(look up the CLI args though, this is all from memory)

1599344228
cr1901_modern
ikskuh: Can I disable memory leak detection (it's noise to me, and it seems to be coming from the regex library)?

1599344236
cr1901_modern
from within build.zig*

1599344245
ikskuh
uurm

1599344252
ikskuh
you enabled memory leak detection :D

1599344259
ikskuh
probably

1599344274
cr1901_modern
b.standardReleaseOptions()

1599344302
ikskuh
that's not changing anything regarding memory leak detection

1599344307
ikskuh
it's your allocators in your code

1599344324
cr1901_modern
GeneralPurposeAllocator

1599344342
ikskuh
it's using leak detection by default i think

1599344379
ikskuh
you can configure it

1599344387
ikskuh
but: fix your memory leaks, don't hide them

1599344406
cr1901_modern
I have no idea where it's coming from!

1599344416
ikskuh
somewhere you're psasing an allocator in

1599344421
ikskuh
probably a missing deinit/free

1599344446
cr1901_modern


1599344522
cr1901_modern


1599344538
cr1901_modern
err ignore the ambiguous redirect line lol :P

1599344552
ikskuh


1599344559
ikskuh
yep, the lib is broken

1599344579
ikskuh
the arraylist doesn#t get deinited

1599344751
cr1901_modern
Adding deinit does not fix it, so I guess the fix is more involved

1599344790
cr1901_modern
Err, adding "re.slots.deinit();"*

1599345952
smolck
how do I pass a C function a char**?

1599346086
smolck
I tried var data: [][]u8 = undefined; and then @ptrCast([*c][*c], data) but I'm not sure that's correct

1599346109
ikskuh
you need a [*][*]u8 or [*][*c]u8 or [*]*u8, ...

1599346125
ikskuh
or use a slice and access .ptr:

1599346141
ikskuh
var slice: [][*]u8 = …;

1599346142
ikskuh
slice.ptr

1599346272
smolck
huh I'm still getting this error: "error: expected type '[*c][*c]u8', found '[*][*]u8'"

1599346304
ikskuh
then you need a [*][*c]u8

1599346313
ikskuh
but you can ptr-cast those safely afaik

1599346460
smolck
hmm, now I'm getting an error related to what I'm trying to do, so I guess I'll go ahead and explain that. I'm trying to do this basically (just slightly different for what I'm doing, but same idea), just in Zig:

1599346539
smolck
and now it's saying the target data is null

1599346576
smolck
for the mpack_writer_init_growable call

1599346594
smolck
which I guess makes sense since I'm using var data: [][*c]u8 = undefined;

1599346626
smolck
but I thought that was equivalent to: char* data;

1599346651
ikskuh
no, that's "char** data";

1599346652
ikskuh
without init

1599346671
ikskuh
that's the problem with c pointers:

1599346682
ikskuh
you never know if it's pointer to one or many elements

1599346735
ikskuh
that's just var data: [*c]u8 = undefined; mpack_writer_init_growable(…, &data, …); then

1599346782
smolck
thank you, that makes sense

1599346800
smolck
so, the docs say to avoid c pointers wherever possible, so is this one of those cases where they should be avoided or  . . . ?

1599346858
smolck
and also, do I have to free that memory somehow? free(data) is called in the C code, so I'm guessing a similar thing should be called in Zig?

1599347050
ikskuh
i would probably do this:

1599347057
ikskuh
var ptr: [*]u8 = undefined;

1599347073
ikskuh
mpack_writer_init_growable(…, @ptrCast([*][*c]u8, &ptr), …)

1599347086
ikskuh
<smolck> and also, do I have to free that memory somehow

1599347102
ikskuh
yes, you have to use c free: std.c.free(ptr);

1599347193
smolck
huh, if I do defer std.c.free(ptr) it gives this error: "cast causes pointer to be null"

1599347219
smolck
once that's called at the end of the scope

1599347444
smolck
it appears to work with c.free(ptr) though with c being the @cImport I'm using

1599347523
smolck
now, given a char* and the size of what it points to, how can I use that string from zig?

1599347614
smolck
well, I guess a better way to say that is given a [*]u8 and usize

1599348895
ikskuh
slice it! ptr[0..size]

1599349104
smolck
yes, thank you!

1599349134
smolck
probably wouldn't have gotten this far without your help :D

1599349159
ikskuh
you're welcome :)

1599349276
smolck
(I also wouldn't have set up IRC :P)

1599349296
smolck
(if I hadn't had issues with Zig, that is)

1599349352
ikskuh
stay a while and listen!

1599349404
smolck
okay!

1599349966
smolck
I'm curious, what is the difference between [*]u8 and *[]u8 (or similar)?

1599349997
fengb


1599350033
smolck
ah thank you

