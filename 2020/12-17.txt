1608163298
andrewrk
if a thread dies it's gonna either panic or segfault. in the former case it calls abort() killing the entire process, in the latter it again would kill the entire process

1608163319
marler8997
OOM

1608163332
marler8997
what would it do in that case?

1608163343
andrewrk
if the process gets killed by the oom killer, the whole thing is dead

1608163362
andrewrk
if error.OutOfMemory is returned from an allocator, then it will be handled appropriately

1608163375
marler8997
ok, so then you're saying we don't think a thread will exit without killing all the threads?

1608163392
andrewrk
I think that is one use case for threads, which is the use case in stage2

1608163418
andrewrk
but I agree, if you're planning on having a thread join or call exit in the event of an error, then having references to its stack memory would be a problem

1608163487
andrewrk
it is possible for an application to write a custom panic handler that calls exit on the thread. in this case references to that thread's stack data would be a problem

1608163563
andrewrk
I think zig is general purpose enough that we shouldn't make it impossible to have a reference to a thread's stack data

1608163575
andrewrk
even though it would be inappropriate for some applications

1608163671
marler8997
so you're saying we should try to avoid interprocess stack references?

1608163677
marler8997
*interthread

1608163706
marler8997
specifically for the Zig compiler

1608164249
justin_smith
marler8997: wouldn't an interprocess stack reference be a special case of stale stack references which can already exist in one thread?

1608164282
justin_smith
in fact, since references are visible by default, I'm not picturing how you'd have special rules for inter process references

1608164328
justin_smith
maybe I'm not thinking about this right

1608164377
justin_smith
"shared nothing" by default helps with concurrency correctness, but I don't think that's straightforward without a VM / GC controlling liveness / visibility?

1608164484
marler8997
the only way I can think to do something like that is with some sort of "pointer coloring" or borrow checker

1608164585
justin_smith
marler8997: even then, when you make a new thread, all visible heap is now shared, I don't think what you are describing is straightforward with threads (but it might be straightforward with peer processes that only share file handles)

1608164637
justin_smith
unless the coloring you describe effects all pointers to stack locations, and recolors on fork...

1608164649
justin_smith
I'm probably thinking about this incorrectly

1608164685
marler8997
I'm hesistant to say anything about a language solution to prevent these types of errors, as I said earlier it's a very deep topic

1608211840
ikskuh
heya andrewrk! what's the current definition multi-line literals?

1608211852
ikskuh
do they use os dependent things?

1608213438
rowbee
hey, what can i use for something akin to python's set? should i use something like AutoHashMap with keys and values of the same type and just set the keys and values to the same value?

1608213443
rowbee
i need fast existence checking

1608213481
rowbee
AutoArrayHashMap*

1608214086
daurnimator
rowbee: you can use `void` as the value.

1608214104
rowbee
i see

1608214117
rowbee
so it would just keep the hashes and no values

1608214147
rowbee
what about iterating over the values in it? then i would need to do what i first described yes?

1608214160
daurnimator
that would just be iterating over the keys

1608214175
rowbee
but would it return the original values?

1608214704
dutchie
if you have an `AutoHashMap(Foo, void)` then iterating will give you a series of Entry structs like `struct { key: Foo, value: void }`

1608214731
dutchie
(same for AutoArrayHashMap) you'd insert with something like `try hm.put(foo, {})`

1608214782
dutchie
`var it = hm.iterator(); while (it.next()) |entry| // do stuff with entry.key`

1608216488
dch
frank denis' talk, intro to zig's std.crypto, is quite possibly the best general crypto introduction i've seen. all the things naturally lead from one to the other. chapeau!

1608216515
dch


1608216675
dch
and I learned about aegis cipher as well

1608216938
ifreund
yeah it was awesome, he's certainly a well qualified speaker :D

1608218598
Astronothing
Hello. I have a question regarding licensing. I want to start from Andrew Kelley's tetris project (

1608219690
dch
Astronothing: no. you can't change copyright of somebody else's contribution.

1608219708
dch
Astronothing:

1608219767
dch
Astronothing: but you

1608219802
dch
I suspect thats what you actually wanted anyway, though. My rule of thumb with FLOSS is where possible to preserve the license of the original author, in the newer work. It just feels right

1608219850
dch
and if this work is significant enough that licensing it correctly is important, then you need an actual lawyer and not some rando IRC opinion....

1608220052
Astronothing
Yes, I want to keep the copyright and the license, but I also want to add my own. My question is: is there a standard way to do this?

1608220149
Astronothing
Also, since this is a derivative, it will use the same root directory, it won't be packaged as a dependency

1608220172
dch
the single best way to do this, is to put your & their code in separate files, and include them together. Use SPDX-License-Identifiers at the top of each file

1608220177
dch
e.g.

1608220196
dch
if you're modifying existing code, I generally add my copyright notice below the OG

1608220210
fengb
There's no need to add license text to files that are missing them

1608220352
Astronothing
Aight, thanks!

1608220368
dch
^this is a good point, in general, this is what's been done in the past, however best practice is to ensure that every file has a whopping annoying licence blob at the beginning.

1608220392
dch


1608220400
fengb
Zig proper has switched over to the license blob

1608220412
fengb
Mostly because we've had some bad faith actors

1608220486
fengb
If you're using the same MIT license, including the original license file as renamed should be fine

1608220498
dch
#sadpanda

1608220526
fengb
If you're doing something like GPL, it's technically fine but kinda bad form since there'd be an implicit relicense unless you split up the file structure

1608220565
fengb
(MIT allows you to relicense as GPL, but it's kinda annoying to add more restrictions)

1608220640
Astronothing
fengb: I understand, and I license all my open source contributions under MIT (used to use WTFPL but people were annoyed)

1608220761
dch
I have a rather large body of ALv2 code that somebody relicenced to MPL, and removed copyright. In the end I just ignored it.

1608220809
ifreund
:(

1608220833
dch
I just checked, some of it is now BSD-2Clause...

1608221558
fengb
The solution is writing code so shitty nobody wants to steal it

1608222535
companion_cube
andrewrk: I don't know of any thread safety feature that doesn't rely on advanced type systems (linear types and borrowing like rust, or the weird capabilities of pony). In more restricted settings I think the Ada tasks seem like a pretty amazing form of concurrency that is known to work well even in bare metal or embedded settings.

1608225700
TheLemonMan
Windows CI is OOM-ing like crazy, again :(

1608226811
TheLemonMan
dch, you're running freebsd, right?

1608228922
scientes
fengb, nice solution

1608230806
dch
TheLemonMan: yes

1608233620
andrewrk
TheLemonMan (and anyone else who is interested) we've started doing weekly stage2 meetings/discussions on Thursdays. The next one is today, in 1 hour 30 minutes from now. If you want to join it's on Discord

1608233929
ifreund
agenda for today's meeting:

1608234101
TheLemonMan
I'll try to join later if I ever figure out how to use this discord thing

1608234108
TheLemonMan
I feel old

1608234131
dch
TheLemonMan: everybody aged 20 years during 2020.

1608234152
TheLemonMan
that explains a lot

1608234207
TheLemonMan
dch, if you ever feel bored you could try to enable the segfault handler on freebsd. The prerequisite is a translation of ucontext_t (or whatever you have in the BSD land) to zig, but that should be it

1608234454
dch
will do - not for a few days yet until the paperwork dies down

1608234474
TheLemonMan
paperwork?

1608234491
dch
annual tax returns

1608234504
TheLemonMan
great! I now need to rope in semarie for OpenBSD and somebody else (kubkon?) for the osx part

1608234514
TheLemonMan
you can defer that to next year

1608234728
andrewrk
ikskuh,

1608234758
andrewrk
ikskuh,

1608234891
ikskuh
"a newline is appended" :D

1608234902
ikskuh
i have a test failing on windows because github CI has autocrlf

1608234915
andrewrk
Astronothing, generally it's ok to copy+paste snippets of MIT licensed code. my intention with the tetris project is that you could use any of it without fear of breaking copyright

1608235003
ikskuh
andrewrk: why i'm asking is that a test has two more characters than i expect and i suspect a sneaky CR somewhere

1608235006
andrewrk
companion_cube, sounds like you're talking about compile-time safety, but I would settle for runtime safety checks with helpful diagnostics

1608235044
andrewrk
you should tell your version control system to stop mangling your code

1608235054
ikskuh
mhm

1608235061
ikskuh
git has horrible defaults

1608235063
ifreund
0 clause BSD is my goto for example projects

1608235064
companion_cube
andrewrk: sure. but still look at Ada :p

1608235072
companion_cube
it's a nice abstraction afaict

1608235135
TheLemonMan
I wonder when \r\n turned into \n alone, the former makes a lot of sense if you think of a terminal

1608235171
companion_cube
if you think of a typewriter maybe

1608235196
fengb


1608235205
fengb
Multics (lol) was the turning point

1608235249
ikskuh
> QNX pre-POSIX implementation (version < 4)

1608235252
ikskuh
RS :D

1608235321
TheLemonMan
time to bring back the good old RS then

1608235341
TheLemonMan
that's how you solve the crlf vs cr vs lf debate

1608235351
ikskuh
yeah

1608235380
fengb
EBCDICNL

1608235447
ifreund
well I think a single cr is unambigously wrong

1608235449
TheLemonMan
what about "NEWLINE"? you can't get any more explicit that that?

1608235464
ikskuh
:D

1608235470
ikskuh
> error: unable to build stage1 zig object: FileNotFound

1608235473
ikskuh
huh, that's a new one

1608235477
ikskuh
the CI triggers this error

1608235571
ifreund
that means it cant find the source file it's supposed to build most likely

1608235777
ifreund
I just opened a PR making it print the path when failing to open the path passed to --pkg-begin, probably could use something doing the samething for whatever case you've it

1608235780
ifreund
*hit

1608235900
ifreund
TheLemonMan: does the patch you just posted still allow passing pointers to zig types as the void* context of callbacks for example?

1608235935
TheLemonMan
yeah, the check affects only the prototype

1608235949
ifreund
ah, makes sense

1608238125
ikskuh
ifreund: a thanks! it's missing the recursive checkout

1608238189
ifreund
heh, same thing happened to me which spurred the PR :D

1608238957
ugla
Is there anything I can use in build.zig to check if a library exists? I would like to support two different versions of a system C library.

1608239067
ifreund
ugla: how would you do this in a Makefile? You can of course shell out to pkg-config or something

1608239142
ifreund
we should probably have API for this though, similar to meson's found() thing

1608240006
ugla
Would be nice :) for now I added an option to link with the old version.

1608247030
nore
hmmm, does anyone know whether there is a way to write n nested loops (for iterating over an n-dimensional array), when n is a comptime-known variable?

1608247100
nore
I see how to do that with a recursive function, but then the contents of the loop needs to be a function as well, and cannot refer to existing free variable

1608247341
pjz
the recursive function could be runtime, no?

1608247409
nore
the problem with a recursive function is what to call in the bas case

1608247413
nore
*base

1608247462
pjz
call the function pointer you passed in, passing it the contents of each cell

1608247488
nore
yes, but this doesn't work if the function pointer I would like to pass had free variables

1608247520
ifreund
your array has a comptime-known total number of elements

1608247533
ifreund
you only need one for loop over that number

1608247540
pjz
oh, yeah, that'd do it too

1608247544
nore
ah, it is not an array actually

1608247574
nore
but yes, I could iterate like that, and get the values from there

1608247579
nore
would work actually, hmmm

1608247625
nore
although, I would like if there was a way to write reusable code for this

1608247641
nore
I guess that's the role of an iterator

1608247717
ifreund
basically a struct with a next() function returning an optional

1608247749
ifreund
then you do `var it = foo.iterator(); while (it.next()) |item| {...}`

1608247760
dominikh
I wouldn't mind if we had a single, reusable Iterator type in the standard library

1608247782
ifreund
what advantage would that give?

1608247829
dominikh
fewer duplications of essentially the same thing, and generic helpers for working on iterators and chaining them, maybe even things like map and reduce

1608247874
ifreund
Pretty sure andrew considers functional style chaining like that an anti-pattern

1608247884
dominikh
unfortunate

1608248007
ifreund
error handling in the functions you'd pass to things like map/reduce wouldn't be pretty

1608248030
dominikh
how so?

1608248088
ifreund
I don't think such functions would be able to return an error set

1608248106
ifreund
but I could be wrong, I haven't looked at implementing something like that

1608248111
dominikh
there's always anyerror?

1608248167
ifreund
and then you have to handle errors even when none can occur

1608248595
dominikh
well, I have to go sleep. maybe I'll remember to look into this in the future

1608248669
ifreund
if #6965 were to be accepted they would likely be much more ergonomic

1608248888
karchnu
it's been at least 20 minutes that I read the documentation and I don't see how to get an integer from a string representation

1608248906
fengb
std.fmt.parseInt

1608248915
karchnu
fengb: thanks

1608248922
karchnu
I started to feel dumb

1608249526
viashimo
I have found it takes a lot of reading the std code to see what functions are available and where they live, in part because not everything has doc strings yet.

