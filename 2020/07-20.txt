1595248722
Ashpool
What is the recommended way to output a long formatted string (e.g. read via @embedFile)? std.fmt.format() refuses to process anything longer than 331 chars (this exceeds 1000 backwards branches), but setting eval branch quota to arbitrarily large value doesn't seem like a good idea to me.

1595248791
Ashpool
I wouldn't mind processing it in the runtime, since it would need to happen rarely.

1595248817
daurnimator
Ashpool: essentially... you'll need to pump the eval branch quota

1595248831
daurnimator
Ashpool: bumping to some multiple of your string length would be reasonable I think

1595248923
Ashpool
daurnimator, could this have any compile speed implications, in theory?

1595248944
daurnimator
Ashpool: @setEvalBranchQuota is a blunt tool to avoid the halting problem

1595248960
Ashpool
I see

1595252331
alva
Nice tracker tunes

1595252393
alva
Sorry, wrong channel

1595264383
andrewrk
Ashpool, use "{}" and put the string as a parameter

1595264565
Guest61109
Hi all. I'm trying to find a link I saw a few months ago. It was a list/table comparing C, Rust, Zig, and handful of other language on some metric that I can't remember. I think it was which tools you needed to bootstrap the compiler from source?

1595264699
Guest61109
I think the use-case is something like "in the future you have a copy of the language source code and zero binaries, how hard is it to get up and running" maybe? I think Zig came out on top but I really don't remember. Maybe it had to do with cross-compiling? Hopefully someone knows what webpage I'm talking about

1595265486
andrewrk
Guest61109, I haven't seen this before, would be interested if you find it

1595266052
Sahnvour
andrewrk: are there any guarantees about the values of unused bits in integers of various sizes (say, i53) ? ie. can we assume that if a i53 variable is not undefined, all its unused bits will for example equal 0 ?

1595266384
andrewrk
Sahnvour, no, those bits have undefined values

1595266420
andrewrk
I'm sorry, I answered for structs. Let me think about it for integers a bit longer

1595266508
Sahnvour
I'd expect the same for ints, as that would save a few instructions here and there

1595266540
christianbundy1
Sorry, having nick issues. :~)

1595266549
andrewrk
when you say unused bits, you mean the difference between @sizeOf(T) * 8 and @typeInfo(T).Int.bits right?

1595266558
Sahnvour
yes

1595266568
christianbundy1
andrewrk: Will do! The closest I've found is

1595266655
Sahnvour
to clarify, I'm writing a trait that will tell if a type has a unique representation in bits for each of its possible values

1595266766
andrewrk
Sahnvour, I belive the answer is they are guaranteed to be 0 but I want to wait to stabilize that until later

1595266846
Sahnvour
okay, thanks

1595267294
danyspin97
it's hard to build zig from source using c++ :(

1595267320
danyspin97
can the master version be built using zig?

1595267383
leeward
danyspin97: not yet, and on what platform are you trying to build it?

1595267387
andrewrk
we're not shipping self-hosted yet

1595267404
danyspin97
leeward: x86-64-musl

1595267411
andrewrk
but even when we are, the build process will involve making the c++ compiler and using that to build self-hosted

1595267429
danyspin97
I have zig-0.5 working

1595267434
leeward
danyspin97: Linux? FreeBSD? Windows?

1595267446
pixelherodev
Presumably Linux

1595267451
pixelherodev
I don't think musl supports anything else

1595267468
danyspin97
but zig-0.6 and zig-master don't want to build using system llvm/clang

1595267476
danyspin97
yup, Linux

1595267479
leeward
Freestanding zig would be amusing.

1595267505
fengb
Boot to zig

1595267531
ifreund
we gotta make a zig version of that python os

1595267537
pixelherodev
Freestanding Zig is almost possible

1595267561
pixelherodev
You can integrate stage2 with e.g. a multiboot header, VGA driver, PS/2 driver, and have a basic Zig REPL

1595267582
leeward
danyspin97: What distro? Does it have llvm10?

1595267598
andrewrk
danyspin97, so far the clues we have are: "hard to build" and "zig don't want to build" - if you give actual error messages it would go a long way to getting help

1595267626
danyspin97
leeward: Exherbo. Yea it does have llvm10. I was bumping the package to 0.6.0 and fixing building master version

1595267678
danyspin97
andrewrk: the error is documented here:

1595267733
andrewrk
I suggest to build llvm/clang/lld from source

1595267744
andrewrk
maybe with version 11 they will have these issues resolved

1595267766
danyspin97
was specifically asking if it was possible to build using zig for this reason

1595267784
danyspin97
I understand most problems comes from llvm/clang and not from zig :)

1595267798
pixelherodev
See, this is the kind of thing I point to when I say stage2 should actively encourage

1595267875
danyspin97
andrewrk: I cannot put those in the package, unfortunately :( I'll just wait for clang-10.0.1 before bumping the package

1595267889
danyspin97
(referring to building llvm/clang/lld from source)

1595267911
andrewrk
danyspin97, sorry - we get a lot of this kind of problems and it's frustrating that llvm regressed in this way from 9 to 10, I see you know what you're doing

1595267952
danyspin97
no need to be sorry :)

1595267966
andrewrk
I had this bug reported on the tracker right after 10.0.0rc1 but they decided to release without fixing it

1595268940
Sahnvour
I can't find the flag to set zig's stdlib path anymore, is it still around ?

1595269025
ifreund
Sahnvour: --override-lib-dir on 0.6.0 at least

1595269294
Sahnvour
ah right, thanks

1595269740
christianbundy
On second thought, maybe it was about cross-compiling Zig/Rust/C/etc to bare metal and which dependencies you'd need? I think I remember Rust being good in theory but difficult in practice because most libraries depend on stdlib.

1595269780
ifreund
sounds about right

1595269808
ifreund
not linking libc by default is a big strength of zig

1595269840
companion_cube
christianbundy: do you mean libc or stdlib?

1595269870
ifreund
companion_cube: rust std depends on libc

1595269893
companion_cube
ah, I see.

1595269902
companion_cube
for IO and malloc, I imagine…

1595269906
ifreund
(zig's doesn't)

1595269914
companion_cube
except on macOs, doesn't it?

1595269923
christianbundy
companion_cube: could have been libc, my memory of it is very hazy

1595269930
ifreund
yeah rust stdlib doesn't make any syscalls directly

1595269942
ifreund
it all goes through

1595269943
companion_cube
guess it was simpler

1595269951
ifreund
*through libc

1595269980
andrewrk
lazy decl analysis has some downsides but using std lib in freestanding is one of the upsides

1595270020
ifreund
well, from what I heard there were a few attempts to get rid of the libc dependency for rust std, but from what I can tell they saw little to no success

1595270057
companion_cube
they probably have a lot of other priorities, like generating better llvm IR :D

1595270094
leeward
Doesn't core not depend on libc?

1595270104
ifreund
leeward: yes, that's right

1595270129
leeward
Well, if sealed rust is ever going to go anywhere they'll have to get it done.

1595270145
companion_cube
no_std in rust doesn't depend on anything

1595270149
ifreund
core cant do allocation or I/O though

1595270180
leeward
And if sealed rust isn't going to go anywhere, I can forget everything I've learned about Rust.

1595270193
companion_cube
well if you use no-std it means you're writing your OS, or targetting wasm

1595270200
companion_cube
so, you have to do IO your own way anyway

1595270309
pixelherodev
Not really

1595270318
pixelherodev
With Zig, you can hook up stdlib to I/O and allocation and everything really easily

1595270345
pixelherodev
I set it up so that `std.io.getStdOut().stream` wrote directly to the VGA driver

1595270355
pixelherodev
Without needing to tweak the stdlib

1595270368
companion_cube
you still need to define IOs, but yes

1595270370
pixelherodev
Which means e.g. std.debug.warn worked without any changes

1595270412
pixelherodev
leeward: sealed rust?

1595270422
christianbundy
(I don't know if everyone already saw this, but I'm looking for a webpage I lost which used a similar metric (cross-compiling to bare metal, maybe?) and compared a handful of interesting programming languages.)

1595270430
companion_cube


1595270431
leeward
pixelherodev: Rust for safety critical applications.

1595270463
ifreund
yeah zig's std is designed to make it easy to BYOOS (Bring Your Own Operating System)

1595270618
leeward
companion_cube: That's the one. I've talked to some folks at Ferrous, and they're still working on it. I don't expect to see it in actual uses for at least a few years though.

1595270634
companion_cube
this stuff always takes time…

1595270664
leeward
Yeah, the FDA doesn't necessarily see innovation in how we develop our safety-critical systems as a good thing. I can't blame them.

1595270685
companion_cube
the FDA?! hu

1595270705
leeward
I certainly wouldn't want to be the first one to submit an application that says "These systems don't interact because the language guarantees it."

1595270721
companion_cube
surely Ada must have similar claism

1595270724
companion_cube
claims*

1595270730
pixelherodev
Yeah, I'd think so...

1595270736
pixelherodev
I'd hate to be the one to have to verify the compiler lol

1595270749
leeward
FDA, EMA, whoever.

1595270764
leeward
Ada doesn't have a borrow checker.

1595270789
leeward
It's got lots of stuff in its safety story, but not "these processes can't interact because the compiler said so."

1595270817
companion_cube
I think compcert got certified for avionics

1595270823
companion_cube


1595270845
andrewrk
stage2 progress:

1595270852
andrewrk
this is simple register allocation. note the 2 movs at 8000029 and 8000035. it has to allocate the rax register because the operands live a long time

1595270859
andrewrk
importantly, it knows it can re-use rax for both movs

1595270878
companion_cube
the pile of yacks from that to groovebasin is pretty deep, andrewrk :p

1595270903
andrewrk
eh I'm only 31 years old, I've got time

1595270941
leeward
andrewrk: That is leaps and bounds ahead of the last time I looked. Nice!

1595271036
leeward
companion_cube: There are lots of certified compilers. Some of them are even decent.

1595271063
companion_cube
as far as I understood, only compcert was certified to run with optimizations :)

1595271124
leeward
I wouldn't know about avionics.

1595271161
leeward
The thing I care about is -Os though.

1595272692
christianbundy
andrewrk: FOUND IT!

1595272847
fengb
"Ripcord is shareware." there's a word I have no heard for a long time

1595273043
leeward
Shareware's still a thing?

1595273057
leeward
christianbundy: nifty

1595273100
companion_cube
"if the internet stopped functioning"

1595273106
companion_cube
well, I wouldn't have an OS then…

1595273109
companion_cube
-_-

1595273215
christianbundy
companion_cube: do you use ChromeOS? :~)

1595273218
leeward
Yeah, I'm not sure why "no Internet" means I can't have libc.

1595273295
christianbundy
I read that as "you have to get the compiler working on another computer but you can't download anything"

1595273323
companion_cube
christianbundy: no, but I wouldn't get upgrades anymore

1595273348
companion_cube
christianbundy: you'd still have libc

1595273365
leeward
It says "can you copy the compiled program to another computer and expect it to work," which...only if the "another computer" is running the same stuff anyway.

1595273420
companion_cube
ah well, musl exists for a reason…

1595273456
leeward
One reason: monoculture is bad.

1595273513
companion_cube
I hear some OSes won't let you talk to them without libc anyway

1595273522
companion_cube
linux being more of an exception in that

1595273537
FireFox317
andrewrk, why does the add function contains the syscall/int3 ? I see it is after the 'ret' so i assume it is just extra bytes. Is it just luck that these bytes are now syscall/int3?

1595274665
andrewrk
FireFox317, everything after `ret` is garbage bytes. I'm not sure why objdump shows it since the symbol table correctly says that it ends at 0x8000058:

1595274717
andrewrk
the reason the functions have garbage bytes there is room for functions to grow when they are edited for incremental compilation purposes, so that it won't have to move the function body somewhere else in the ELF file

1595275401
andrewrk
christianbundy, wow, I feel like someone is finally apprecating this aspect of zig that I have put a lot of effort on but it's difficult to point out or explain

1595275864
oats
why is go on that list as OK?

1595275885
oats
I want to say sometimes I've compiled a go program and the binary suddenly links to libc for some reason

1595276022
companion_cube
(uh, I wonder: are pthreads managed via system calls on linux?)

1595276224
christianbundy
andrewrk: are there any resources you'd recommend looking at to appreciate it more completely? A rant would also be very welcome if you have time/energy/interest

1595276259
christianbundy
I'm new to low-level languages, so my analysis is lots of "oh cool Zig has a green check mark next to it on someone's webpage!"

1595276843
oats
hehe

1595276856
oats
christianbundy: in relation to cross-compilation/portability things?

1595276943
oats
have you seen this?

1595276945
oats


1595276950
oats
kind of along those lines, good read

1595276990
Akuli
i see that the python way to implement hash tables has been implemented and is on master :D

1595277182
christianbundy
oats: yeah, I was really impressed by that. how does Zig make cross-compiling so easy when langs like Rust crash and burn?

1595277213
christianbundy
I had to spend

1595277339
leeward
christianbundy: It's all about priorities.

1595277356
companion_cube
I think in rust it's one `rustup` away, but I never tried, so 🤷

1595277418
oats
eh, rust isn't terrible, it's just a bit more fiddly

1595277440
oats
imo, anyways :P

1595277459
andrewrk
to be fair macos is the most difficult cross compilation target

1595278333
leeward
Why is that? It's a first class target for LLVM.

1595278454
andrewrk
a bunch of reasons. frameworks, sloppy license annotations of their libc header files, non-ELF based object files, application signing, and some others I'm forgetting

1595278491
leeward
Oh, macos doesn't use ELF? What the heck?

1595278526
leeward
I thought Darwin was a freebsd fork.

1595278842
shakesoda
macos is mach-o isn't it

1595278952
fengb
The Rust compiler they ship isn't "complete" and anything additional requires rustup which is super fiddly

1595278998
fengb
One thing I really liked about Zig is that it's one binary for all the targets

1595279079
leeward
It is a nice feature. Getting Zig code to build for ARM is the easiest time I've ever had with a cross compiler.

1595279184
ifreund
man, that website just reminded me that they recommend piping curl into bash as an installation method

1595279267
leeward
curl

1595279283
leeward
Installation method of champions.

1595279322
leeward
Bonus points if the server decides what file to serve based on the UA string.

1595279888
oats
that will either prompt me to nope out and scour package repos, or pipe it to a file and read it first

1595280693
andrewrk
it's weird to me that "sudo" is involved in any installation

1595280769
leeward
It seems appropriate for installing anything system-wide.

1595280827
shakesoda
how often do you actually give a crap that something is installed system wide

1595280837
shakesoda
for me the answer is "not actually that often"

1595280861
leeward
Every time I use aptitude.

1595280887
companion_cube
I mean, `yay -S rustup` and then it's all in userland

1595280898
andrewrk
sorry to be clear I mean in any installation when you download software from a web browser as opposed to a package manager

1595280920
shakesoda
i explicitly avoid dealing with system packages whenever i can

1595280939
leeward
Oh, yeah, no way do I want to download something with a web browser and install it with root.

1595280975
ifreund
uh, the only thing worse than package managers is not having one

1595280988
leeward
ifreund: seconded

1595280997
leeward
See also: Windows.

1595281007
companion_cube
ifreund: +1

1595281007
ifreund
side-steping it makes things worse

1595281185
andrewrk
side-stepping it with root makes things worse. side stepping it with user-local stuff is the right solution IMO

1595281202
shakesoda
package managers for anything that doesn't actually

1595281226
shakesoda
i hate them quite deeply

1595281321
ifreund
yeah they should strictly be for system-wide stuff, I agree that sidestepping for user-local stuff is the way to go

1595281323
shakesoda
i think fedora silverblue has a pretty good idea going on for packaging, with ostree for all the system stuff

1595281341
leeward
I for one really like the large army of volunteers who make sure that my software works on my system, and who manage security updates for me.

1595281366
shakesoda
flatpak is kind of a pain in the butt, but in that setup user-local is the default and nothing can really possibly screw my system up without going

1595281451
shakesoda
silverblue unfortunately also causes me a lot of grief elsewhere so it isn't my daily driver, but i think they have the right idea going on :(

1595281468
ifreund
flatpak is horrible, the only vaild use-case is for proprietary software which is also horrible

1595281487
shakesoda
i'm not ideologically opposed to proprietary software

1595281504
shakesoda
more indifferent

1595281520
ifreund
fair enough, I won't tell you what to believe

1595281540
shakesoda
what's really awful about flatpak to me is just how painful it is to deal with

1595281569
shakesoda
packaging anything for it sucks

1595281578
shakesoda
making things talk to each other with it sucks

1595281604
shakesoda
dealing with graphics with it sucks (doubly so on nvidia, which also sucks)

1595281637
shakesoda
in practice i just want easy updates for appimages... or to just use an older version of macos

1595281659
BaroqueLarouche
The first game I've worked at Tribute Games I had a Linux version working but we didn't want to support it because of how Linux is fragmented.

1595281679
shakesoda
every single one of my games supports linux very well, and i develop them a lot on linux. i do not ship for linux.

1595281742
BaroqueLarouche
not worth the effort for the small userbase

1595281744
BaroqueLarouche
IMO

1595281752
andrewrk
one of my goals with the zig ecosystem (eventually) is to improve it enough that game developers find it easy to support linux

1595281754
shakesoda
it's a

1595281779
shakesoda
i'm less than proud of that, suffice to say

1595281826
shakesoda
andrewrk: a noble goal

1595281836
mipri
sad example of that is Wasteland 2 on Steam. it ships a Linux version but I couldn't get the sound to work. configure Steam to use proton with the Windows version - working sound.

1595281843
andrewrk
i'm talking static binary that works on

1595281872
shakesoda
well, usually the binary working isn't specifically what goes wrong

1595281877
shakesoda
barring glibc crap

1595281885
andrewrk
what goes wrong besides audio?

1595281914
companion_cube
andrewrk: still requires that people use openGL rather than direct3D, right?

1595281919
leeward
Basically all the games I play support Linux as a first class target. Unity helped a lot there.

1595281928
andrewrk
companion_cube, vulkan

1595281959
BaroqueLarouche
openGL is too old and fragmented

1595281965
shakesoda
you can also use one of those d3d on vulkan things to write for d3d on linux if you want

1595281974
BaroqueLarouche
I'm sad that Vulkan also does extensions similar to OpenGL

1595281975
shakesoda
BaroqueLarouche: it's also usually the only choice

1595282017
shakesoda
vulkan is upsetting to deal with in general

1595282019
BaroqueLarouche
yeah

1595282075
BaroqueLarouche
well every 3D API that I know of (public and under NDA) is moving to a low-level Metal/Vulkan/D3D12 model so we can't avoid it :(

1595282077
shakesoda
i'd really just rather write gl4.3+ or d3d11

1595282084
BaroqueLarouche
is moving or is

1595282095
shakesoda
i'm well aware of where things are heading, but where they are heading is a pain in the ass!

1595282104
ikskuh
BaroqueLarouche: i don't think that's a bad thing

1595282104
BaroqueLarouche
oh yeah

1595282121
shakesoda
i've been working on moving to vulkan, it's just a frustrating amount of work

1595282126
ikskuh
we should implement DX<12 and OpenGL in Vulkan/Metal/DX12

1595282136
ikskuh
as a userspace library

1595282141
shakesoda
d3d11 on vulkan as a userspace library is a thing

1595282145
ikskuh
yeah i know

1595282149
ikskuh
DxVk i think?

1595282157
ikskuh
would make stuff a lot easier

1595282171
ikskuh
you can also rely that OpenGL will behave the same on all platforms

1595282203
shakesoda
i definitely also would like gl over vulkan for that reason

1595282211
shakesoda
there's already some implementations, but they are far behind

1595282227
shakesoda
they essentially are meaningless to me until they have at minimum gles 3.1 or gl 4.3

1595282232
ikskuh
yeah, but we odn't have vulkan that long yet :D

1595282243
ikskuh
GL 4.5 is the "minimum" for me

1595282252
ikskuh
but mostly because GL_ARB_direct_state_access got core

1595282259
shakesoda
i can't get away with requiring dsa yet

1595282265
shakesoda
but i do require compute shaders

1595282319
ikskuh
huh, weird

1595282330
ikskuh
last time i checked DSA is available on all drivers with GL 3.3

1595282365
shakesoda
well, it's because of not having enough separation with gles

1595282377
shakesoda
(it wasn't me)

1595282393
ikskuh
ah

