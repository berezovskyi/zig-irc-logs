1605657863
ifreund
luckily the zig build system makes compiling C code to work around that issue easy enough

1605658974
andrewrk
honestly one of the biggest value adds of zig is that it's simple enough that when you inevitably have to do some hacky workaround for your specific use case, the resulting complexity is still tolerable

1605659033
ifreund
yeah, that's pretty much what's allowed me to get so far with river

1605659062
ifreund
I seriously doubt I would be farther along in any other language aside from probably C

1605659091
ifreund
but the zig code is safer and is about to get safer still with zig-wayland/zig-wlroots

1605659134
dominikh
oh, question about your wayland scanner + zig build integration: are you just spitting files into the file system, or can you feed source code directly into zig?

1605659178
ifreund
I'm just spitting files into the file system for now, I'd love to integrate this with zig's caching system though when that hopefully becomes feasible some day

1605659327
dominikh
well, lemme know when you have lists and I'll try migrating over to your bindings :)

1605659379
ifreund
cool, I actually just started poking at lists

1605659726
ifreund
also, I know the scanner code is super ugly, I wrote it very quickly without much thought about design.

1605659739
dominikh
as long as it works I won't look at it

1605659745
ifreund
heh

1605659786
ifreund
I mean it's likely you'll try to do something I haven't tried yet, but I'm not aware of any major issues left

1605659810
dominikh
I would assume that we use largely the same protocols

1605659893
ifreund
well, I haven't finished porting river to zig-wlroots/zig-wayland yet so only what tinywl.zig uses is really tested

1605659907
dominikh
ah.

1605659926
dominikh
I mean, I did write a wayland scanner once, so as long as the code isn't

1605659960
ifreund
It's mostly ugly cause I was trying to avoid allocations when I really shouldn't have cared very much

1605659984
dominikh
in the scanner itself, or the generated code?

1605659987
g-w1
is async implimented only in zig, or also in llvm?

1605660001
g-w1
i mean, is it implimented in the compiler, or llvm

1605660006
ifreund
it would also greatly benefit from that PR adding named format specifiers for std.format

1605660011
ifreund
in the scanner itself

1605660031
ifreund
the generated code doesn't do any allocations directly, though libwayland does of course

1605660043
dominikh
ah. yeah, not sure allocations are a big problem when parsing small XML files, in a build step

1605660071
dominikh
I'm all for speed and stacks, but still :P

1605660078
ifreund
no, they really aren't and I use arenas anyways

1605660100
ifreund
I should really clean it up at some point but it works and my TODO list is a mile long

1605660125
dominikh
mine is about 70 years long at this point…

1605660160
dominikh
unrelated, Zig's allocators are really great. makes it trivial to add Tracy memory profiling to an allocator via a simple wrapper

1605660198
dominikh
(too bad most allocations will happen inside C land for us)

1605660198
ifreund
yeah, I love the zig std handling of allocators. Arenas feel so nice to use

1605660235
ifreund
true that :/

1605660270
ifreund
maybe I'll rewrite wlroots in zig some day when I'm really really bored

1605660330
k69
i might have the dumbest question

1605660333
ifreund
probably not though, I don't have the graphics chops

1605660350
dominikh
ifreund: theoretically you should be able to replace it bit by bit

1605660350
k69
variables cannot be shadowed right?

1605660399
k69
i'm trying to recursively acces a struct field

1605660418
ifreund
dominikh: indeed, the big downside would be that I'd lose out on or have to port any new work

1605660458
dominikh
ifreund: yeah, that's the downside. but you already have to keep atop new releases because of your bindings, anyway. no backwards ABI compatibility in wlroots

1605660460
g-w1
k69: yes variables cannot be shadowed

1605660462
ifreund
unless I can convince emersion to port the official implementation to zig after zig is stable :P (seems unlikely)

1605660464
dominikh
(and a million unstable interfaces, anyway)

1605660491
ifreund
dominikh: yeah, but updating the bindings for releases is pretty easy. wlroots doesn't break all that much anymore

1605660500
ifreund
just git log -p include/wlr

1605660561
dominikh
ifreund: well, you could probably replace a fair bit of wlroots by implementing the right interfaces, if you manage to punch through the coupling

1605660649
ifreund
g-w1: async is implemented only in zig afaik

1605660698
dominikh
not sure wlroots needs many graphics chops, either. the actual rendering is pretty simple, and the whole DRM+KMS+GBM stack is just annoying, not that difficult

1605660714
k69
g-w1 thanks

1605660833
ifreund
dominikh: could be, I just haven't touched any of that code before

1605660878
dominikh
time flies. soon, it'll be 10 years in the future and you'll slowly have replaced all the bits of wlroots

1605660906
ifreund
also renderer_v6 is only just getting implemented now and that's an example of something that I probably would have trouble coming up with on my own

1605660937
dominikh
haven't looked at that yet

1605660941
ifreund
not to mention the xwayland stuff which I really don't care about the details of but is good to have

1605660974
dominikh
how much worse than writing an X11 WM can it be :P

1605661076
ifreund
no idea, and I don't want to learn how to write an X11 wm :P

1605661087
dominikh
you're in luck, I've written one :P

1605661094
ifreund
there's a reason I started writing wayland code instead of X11 code

1605661106
ifreund
how was it?

1605661133
dominikh
pleasant enough. but I didn't use the C libs; someone wrote a pure Go implementation of the X protocol

1605661153
ifreund
neat

1605661195
dominikh
main reason I want to move to Wayland is that it lets me draw windows wherever and redirect input. in X11, you can't really do that. the coordinates of clients are known to the X11 server

1605661203
dominikh
so if you don't draw in the right place, input is busted

1605661356
ifreund
right, X gives the clients way more information/power than wayland does

1605661406
ifreund
I mostly started writing wayland code because the protocol seemed simpler/easier to understand to me than whatever was going on with X

1605661451
earnestly
ifreund: (Yes, snake_case is fine.  That's the normal style for everything in Ada)

1605661451
dominikh
well, it's much easier to get an X11 window manager going, since you have much fewer responsibilities

1605661466
ifreund
not too happy with some stuff like the semi-mandatory CSDs, but in general it's been quite nice

1605661525
dominikh
Let's be fair, only GTK3 stuff has mandatory CSDs at this point. and I don't mind them too much, as long as you can get rid of the drop shadows

1605661527
earnestly
Sidechannel boogaloo; who owns this memory?  Who cares!  Wayland is the future

1605661527
ifreund
dominikh: very true, though I like the fact that wlroots + my compositor have an order of magnitude fewer LOC than the xorg server

1605661552
dominikh
that is true

1605661561
earnestly
aka libuaf

1605661619
ifreund
I sent gtk a PR implementing xdg-decoration but it's been sitting there without review for months

1605661636
ifreund
I should probably follow up or something but I really hate hacking on that codebase

1605661638
dominikh
it's a political issue at this point

1605661665
ifreund
they already support the super outdated kde server-decoration protocol

1605661679
ifreund
which I don't really feel like implementing in river

1605661681
dominikh
though, it's a bit of a difficult situation. they put actual functionality in the CSD; where does that go without CSD?

1605661730
ifreund
like what? the close and minimize buttons?

1605661760
dominikh
something like

1605661768
dominikh
as I understand it, that whole top bar is the CSD

1605661805
ifreund
yeah I think you're right

1605661814
dominikh
they call em header bars

1605661846
dominikh
but here's a fun thought: nobody is saying that your compositor has to render the whole surface… you could cut off the CSD ;)

1605661874
ifreund
true that

1605661941
dominikh
anyway, drop shadows in the default theme aside, I don't really find header bars that offensive. bunch of actually useful buttons; it just happens to also do resizing and moving. requests that you can deny

1605662005
ifreund
Yeah my main annoyance is with the shadows, though telling the clients they are tiled on all sides usually gets rid of them

1605662081
dominikh
nice

1605709998
ifreund
dominikh: finished my version of a type safe wl_list binding ttps://github.com/ifreund/zig-wayland/commit/ba49b2b6f984b788aea5e752bfeb64e3381472e7

1605710014
ifreund
now I just need to update zig-wlroots to use it

1605716099
ifreund
hrm, it doesn't play nice with lists of wl_client or wl_resource yet

1605716104
ifreund
should be able to fix that though

1605717262
dominikh
ifreund: I'm trying to grok the prepend and append functions and the use of fieldParentPtr there.

1605717314
ifreund
yeah that's super ugly code, you'll be happy to know that I'm rewriting it currently and it's looking a lot cleaner

1605717337
dominikh
well I still haven't figured out how it works :D

1605717375
ifreund
what's happening is I'm using the fact that extern struct { foo: extern struct { ... } } has the same abi as the innner struct

1605717391
ifreund
a pointer cast would work just as well there tbh

1605717409
ifreund
I guess @fieldParentPtr() felt a little safer or something

1605717443
dominikh
ah, so it's really just a @ptrCast

1605717469
ifreund
in this case yes

1605717482
dominikh
yeah I understand fieldParentPtr in the general case

1605717488
dominikh
I was just perplexed by this instance

1605717531
ifreund
probably I should have just used a pointer cast, in retrospect fieldParentPtr is pretty confusing there

1605717546
ifreund
but neither should be needed in v2

1605717586
dominikh
well, looking forward to v2 then

1605717600
dominikh
what was the issue with wl_client and wl_resource, anyway?

1605717646
ifreund
well they are opaque types so you have to use wl_resource_get_link()/wl_resource_from_link() etc

1605717654
ifreund
makes iteration different

1605717656
dominikh
ah

1605718895
dominikh
wl_resource isn't

1605719296
ifreund
well, yeah legacy BS aside though it should be

1605719323
dominikh
true. but it's legacy BS you can depend on

1605719332
ifreund
regardless, what I've got is looking pretty clean

1605719354
ifreund
just need to update the listener impl now and test

1605720597
earnestly
ifreund: Are you familiar with arcan and the work around it?

1605720753
ifreund
earnestly: I've certianly heard of it and have read some of the wiki pages, not terribly familiar though

1605720818
ifreund
dominikh: just pushed v2, would appreciate your thoughts

1605723553
dominikh
ifreund: I like it

1605723811
dominikh
looks a lot cleaner than what I had

1605724000
ifreund
as you saw, it took me a fairly crappy iteration to get there :D

1605724048
ifreund
thanks for the inspiration, without seeing yours I probably would have just settled for the non-type-safe version for a while longer

1605724054
dominikh
:)

1605724064
dominikh
you going to port zig-wlroots to the new list?

1605724135
g-w1
do you use river as your daily driver?

1605724178
ifreund
yep, porting zig-wlroots right now

1605724192
ifreund
g-w1: been daily driving it for months at this point :)

1605724202
g-w1
nice!

1605724634
g-w1
shouldn't the self-hosted compiler use the standard library in the zig repo instead of the system standard library? I had some issues with this

1605724697
ifreund
it'll use the standard library of whatever zig you use to compile it

1605724739
ifreund
you probably want to use zig compiled from master of course

1605724833
g-w1
I just use master, but if the repo also has the standard library, wouldn't it make more sense to compile the self hosted compiler using the repo? I had a more recent master stdlib than my working branch of the compiler, so I had to git pull, but if it used the repo's stdlib, it wouldn't happen

1605724860
g-w1
or is it just good practice to git pull always?

1605724993
ifreund
you want to use a compiler compiled from whatever git commit you are working off of

1605725005
g-w1
ok

1605725046
ifreund
and generally you should rebase onto master right before opening a PR to make sure everything still works

1605725060
g-w1
ok

1605725081
dominikh
also because linear history is love, though the Zig project doesn't seem to care about that :P

1605725161
ifreund
It doesn't not care either, it just isn't absolutely strict

1605725202
ifreund
and merge commits do make sense sometimes when branches are long-lived

1605725260
dominikh
sure, though I still prefer if the merge commit doesn't lead to tangled history. i.e., no merges in the merged branch, and the branch rebased on top of master. you can still force a merge commit, but the history is basically linear still

1605725308
dominikh
so you end up with something like this:

1605725353
ifreund
Agreed

1605725405
dominikh
definitely hate it when the long-lived branch has 10 commits of "merge origin/master into my-personal-hell" :P

1605725451
g-w1
oh ... well learn something new every day :)

1605725539
ifreund
g-w1: git rebase -i is your best friend for making pretty history

1605725585
g-w1
ok. i once tried that and deleted my whole history by accident, so im scared. i had to copy and paste. but ig ill look up how to use it better

1605725608
dominikh
`git reflog` for when you royally fucked up, to restore to before your mistake

1605725619
ifreund
you didn't need to copy paste, you coulda used reflog

1605725659
g-w1
ok. ill read up on rebasing thanks

1605725689
ifreund
no problem, git is a horribly complex but also extreemly useful tool :D

1605725853
fengb
Anyone else see reflog as re-flog?

1605725920
dutchie
g-w1:

1605725948
g-w1
thx

1605726094
ugla
You can do `git config [--global] branch.autosetuprebase always` if you want new branches to rebase by default

1605726179
dominikh
ooh I had no idea git pull behavior could be configured in the first place. I always git fetched and git rebased by hand…

1605726212
ifreund
i have mine set to ff-only for pull

1605726225
dominikh
I have a git puff aliased to that

1605726765
ifreund
dominikh: zig-wlroots updated for the new wl_list bindings, now back to rewriting river for me :)

1605726833
dominikh
ifreund: great. I'll port my code and see what blows up

1605726930
ifreund
I'll be curious to hear how it goes

1605726969
dominikh
can't go too poorly, it's not much more complex than tinywl at this stage

1605727158
ifreund
well tinywl.zig has been working for a while so you probably won't have major issues

1605727190
ifreund
there are of course some parts of wlroots that I haven't bound yet, but everything river currently uses is done

1605727230
dominikh
it's fine, I'll send patches if anything is missing

1605727241
ifreund
cool

1605730648
dominikh
ifreund: wrt zig-wlroots, would you agree to change some functions that return optionals to return errors instead? stuff like *_create

1605730677
ifreund
dominikh: sure if the errors are unambigous

1605730696
ifreund
I think most of the _create functions should just return error.OutOfMemory

1605730767
dominikh
not sure it's always that unambiguous, but IMO a generic error.Failure (or whatever) is better than using optionals for operations that can fail? especially because user code would just end up with a lot of orelse return...

1605730831
dominikh
stuff like wlr_backend_autocreate. it can probably fail for reasons other than a failed allocation, but it's still very much an error if it returns null

1605730865
ifreund
yeah errors certianly make more sense semantically for these and it would be nice to be able to use try

1605730901
dominikh
I can send a patch for the ones I run into? or would you prefer doing it all in one big swoop?

1605731008
ifreund
feel free to send a patch for as much or as little as you like. I think we do want to make all of them errors eventually though

1605731044
dominikh
well, someone has to look at all of the API. some optional pointers are correct the way they are

1605731074
ifreund
yeah, e.g. the surfaceAt() functions should definitely stay optional

1605731079
ifreund
I think those are the minority though

1605731116
dominikh
sure. still takes a human to figure out the exceptions

1605731132
ifreund
yup

1605731139
dominikh
what I'm trying to say is that it's probably easier to turn things into errors bit by bit, than it is to do a simple search and replace :P

1605731153
ifreund
I see your point

1605731168
ifreund
might start with tinywl and move on to whatever you need

1605731184
dominikh
yeah. expect a PR soonish

1605731237
ifreund
and I think many can be a simple error.OutOfMemory, e.g. wlr_layer_shell_create() can only fail due to allocation or wl_global_create failing

1605731257
dominikh
aye

1605731261
ifreund
and the later only happens due to allocation failure or invalid parameters, but wlroots passses vaild params

1605731281
dominikh
go figure, zig-wlroots will be a lot more type-safe than wlroots

1605731288
ifreund
oh yeah

1605731294
dominikh
I wish wlroots was more const correct in its arguments, though.

1605731295
ifreund
that's the whole point of it really ;D

1605731319
ifreund
I'm sure emersion would be happy to merge patches constifying things

1605731376
ifreund
that's probably the most minor issue I've had though, null pointers and type safety of listeners have been the most annoying

1605731426
dominikh
yeah, but not much they can do about that

1605731463
dominikh
well, aside from the lack of documentation. I had to look at the implementation a lot to figure out the arguments to events

1605731514
ifreund
I should really send a patch addding docs for all the wl_signal arguments I've looked up and encoded in the type system of zig-wlroots

1605731531
ifreund
but ya know, the TODO list never gets any shorter

1605731536
dominikh
yeah…

1605731554
dominikh
heck, I still need to send a patch to the wayland docs, has some mistake in it

1605731736
ifreund
hrm, I could really use a better name for the namespace of scanned wlr protocol functions. Already using wlr for wlroots so wlr_proto is the best I've come up with but it's kinda long

1605731744
ifreund
wlrp is short but unclear

1605731766
ifreund
hardest problem in computer science

1605731802
dominikh
what kind of functions are those?

1605731879
ifreund
all the functions generated from scanning the xml of the wlr protocols

1605731905
ifreund
though they should eventually all get moved to proper namespaces in wayland-protocols

1605731925
ifreund
(ext, wp, xdg, etc.)

1605732013
dominikh
ah. this mostly affects clients, not servers, right? since on the server side, users will interact with the wlroots bindings instead

1605732080
ifreund
yeah but you still need to use e.g. the Layer enum for layer shell code which is scanned from the xml

1605732093
dominikh
oh, I see.

1605732186
dominikh
sorry, I don't have a good name then

1605732654
ifreund
I guess I'll just deal with typing out wlr_proto until we get the relevant protocols upstreamed :D

1605733143
dominikh
also… have we hijacked the channel with off-topic, or is this common?

1605733227
ifreund
I guess it might be a little excessive at this point, feel free to join me in #river

1605742262
g-w1
i just had to invalidate the cache, and then it worked. probably a bug in the caching system.

