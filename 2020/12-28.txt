1609134043
daurnimator


1609134188
pixelherodev
There's just one mistake in that post, daurnimator

1609134199
pixelherodev
Well... no, okay, it's technically true. Barely.

1609134223
daurnimator
is it that their universal binaries aren't universal? or is it that their strncpy has a bug? or is it that gcc will still optimize internal calls to memcpy?

1609134224
pixelherodev
I did "code that runs bare metal and under OS," but I used Zig, not C :P

1609134227
daurnimator
there's several issues with it...

1609134247
daurnimator
but there's still some useful ideas in there: e.g. optimising memcpy to have less clobbers

1609134265
pixelherodev
Not universal, but much closer than anything else I've seen.

1609134276
shachaf
Calling those things Linux executables is a stretch.

1609134286
pixelherodev
So is calling them Windows binaries

1609134287
shachaf
You can't execve them, for instance, unless I'm missing something.

1609134296
pixelherodev
Why not?

1609134298
shachaf
Aren't they at least real MZ/PE files?

1609134304
daurnimator
shachaf: correct

1609134304
pixelherodev
and ELF.

1609134306
shachaf
Because they're shell scripts and they don't have a #! line.

1609134307
pixelherodev
I think

1609134311
pixelherodev
ah, never mind then?

1609134316
pixelherodev
Thought it was doing ELF too :(

1609134320
shachaf
You can't be MZ and ELF at the same time because the first bytes overlap.

1609134323
daurnimator
they rely on the bash behaviour that anything without an ELF or a #! will be invoked with /bin/sh

1609134328
daurnimator
some shells don't do that (e.g. fish)

1609134331
shachaf
It's a shell script that starts with MZblah='...

1609134335
pixelherodev
yeah no, that's not portable.

1609134348
daurnimator
i.e. in the effort to be more portable; they became less portable

1609134356
pixelherodev
I for one don't use bash

1609134363
pixelherodev
(even on Linux, to be clear :P)

1609134379
daurnimator
pixelherodev: what shell do you use? most do the ENOEXEC => try /bin/sh dance

1609134401
pixelherodev
and yeah, based on commit times in that repo, I

1609134404
shachaf
Who says you're running programs from a shell?

1609134407
pixelherodev
Me

1609134410
pixelherodev
Always :P

1609134416
daurnimator
shachaf: that too :)

1609134426
pixelherodev
But yeah, exec is another cogent point

1609134434
shachaf
Anyway I don't want that dance, or to run a shell in order to run my program.

1609134464
shachaf
So it's a tricksy hack but not something I'd actually use to make a program.

1609134474
daurnimator
their universal binary shenanigans wasn't the reason I linked that blog post though

1609134505
pixelherodev
Oh?

1609134531
daurnimator
16:44:04 <daurnimator>but there's still some useful ideas in there: e.g. optimising memcpy to have less clobbers

1609134535
pixelherodev
ahh

1609134562
pixelherodev
What I found interesting about a different paper was that apparently assigning struct members is faster than memcpy()ing

1609134591
pixelherodev
e.g. `for member in struct: new->member = old->member;` is faster than `new = old;`

1609134602
pixelherodev
(this was in 2015, so who knows if it's still true)

1609134608
daurnimator
I often rely on assigning struct members getting optimised to a memcpy :P

1609134641
daurnimator
(well not so much rely on; but observed and now assume after doing profiling work)

1609135709
koakuma
> pixelherodev: Thought it was doing ELF too

1609135709
koakuma
It seems to be doing a self-extracting shell script/ELF combo file a la gzexe, instead of it being an actual ELF file

1609135795
pixelherodev
So it would be able to exec() itself, but not be exec()ed, effectively

1609135804
pixelherodev
(since it'd be an ELF while it was running, but a shell script while on disk)

1609135832
daurnimator
could probably do binfmt_misc magic to skip the shell step for specific machines

1609135845
daurnimator
but again... that wasn't the point of linking that article >.<

1609135861
pixelherodev
heheh

1609135992
pixelherodev
probably going to do a stream on zyg shortly if anyone's interested

1609136933
koakuma
Oh by the way, Zig bool is 1 when true and 0 when false, right?

1609136947
koakuma
*the raw integer representation of it

1609137226
pixelherodev
Yes

1609137237
pixelherodev
@boolToInt etc will match that

1609137371
koakuma
Thanks

1609138178
pjz
ugh, just got bit by `TODO implement inferred return types

1609138259
pjz
..but I don't

1609138495
pjz
so instead of putting copies of `var foo = some.long.Constructor(..) catch |err| { showErrorMessageNicely(); os.exit(1); unreachable; } ; thenDoStandardCheck();` everyplace, I can wrap that up into `fn mySafeConstructor(...)`

1609138578
pjz
sounds like maybe a job for an editor/IDE extension - 'turn this anytype into the inferred type'

1609145225
pixelherodev
Streaming zyg work in ~3 minutes if anyone's interested :)

1609169323
oats
in "arr[f(foo)] = f(bar);" does f(bar) get evaluated before f(foo)?

1609169331
oats
or afterwards

1609169995
pixelherodev
I don't  thinkthat's defined

1609170011
pixelherodev
oats: my personal rule for constructs like that is "split it into two lines"

1609170035
pixelherodev
If you were wondering this now, someone else reading it (or you a month from now!) will have the same question

1609170105
oats
excellent point

1609170174
pixelherodev
Readability is important!

1609170175
pixelherodev
:)

1609170871
semarie
how test-translate-c are done ? I have a test error which look like a double-free

1609170950
semarie
minimized, it is: expected `break :blk ref.*;'    found `break :@"\xdf\xdf\xdf" ref.*;'

1609171018
semarie
and the 0xdf bytes in the string are usually openbsd libc signature for free-ed data.

1609171032
semarie
so it more likely a use-after-free

1609173804
g-w1
I am getting a super weird linking error when using c code and zig code in the same project (EmoteCache.o is from EmoteCache.c)

1609174645
semarie
g-w1: the .o seems corrupted in some way: readelf -a Kxh => readelf: Error: Not an ELF file - it has the wrong magic bytes at the start

1609174831
g-w1
thats so weird, I tried to clear the cache multiple times, and it still doesn't work

1609174889
justin_smith
what's the right way to allocate a 2d array when the dimensions are determined at runtime? I've been using an array of pointers then putting an array under each pointer but that's annoying to work with

1609174932
justin_smith
(since alloc allows a runtime arg for size, but I can't figure out how to do that with 2 dimensioms)

1609175367
TheLemonMan
g-w1, no wonder LLD doesn't like your .o file, that's a precompiled C header

1609175379
TheLemonMan
the first four byte give it away, CPCH

1609175410
justin_smith
n/m, I can of course allocate an array under each index without having to statically specify its dim

1609175432
g-w1
oh, i mustve messed up something in my build.zig

1609175488
g-w1
now it works! thanks. I did exe.addCSourceFile("EmoteCache.h") instead of EmoteCache.c

1609175541
TheLemonMan
I love the smell of solved problems

1609175715
andrewrk
sup TheLemonMan did you see that FireFox317 contributed the initial LLVM backend for stage2?

1609175728
andrewrk
it's not landed yet

1609175804
TheLemonMan
nope, holiday season means little to no spare time for me, I didn't even answer your mail yet (did I?)

1609175863
andrewrk
nope I don't think you did

1609175871
andrewrk
hope you've been enjoying the holidays

1609176029
TheLemonMan
yeah, gotta close this awful year on a positive note

1609176062
TheLemonMan
oh, the deadlock problem was trickier than expected

1609176084
andrewrk
yeah did you see the final resolution?

1609176231
TheLemonMan
yeah, doing as much work as possible before fork() is a good strategy

1609176307
TheLemonMan
I wonder why it's never been a problem for all this time

1609176758
andrewrk
because I'm not the first person to make this mistake, and so glibc (and newer musl versions) make it work even though it's UB

1609176777
andrewrk
apparently aarch64 alpine linux (which we use on drone ci) is stuck on musl v1.1.24

1609178183
TheLemonMan
the perks of using old software, take that Arch!

1609178330
leeward
There's a reason they call it the bleeding edge.

1609178507
leeward
Oh, hey, is there (or maybe will there ever be) a way to tell Zig to put a symbol at a particular address? Standard libraries for embedded processors are frequently full of SFR definitions, and it would be nice to write Zig code as `mcu.P1SEL = 0xC0` instead of `mcu.P1SEL.* = 0xC0`.

1609178733
leeward
It's not a gigantic deal, but it would save about 2-3% of the characters in my current project.

1609178793
leeward
and shorten about 35% of the lines

1609180571
g-w1
andrewrk: about your comment on #7191, what exactly is leaking if ErrorMsg.create fails? and do you mean every instance of addDeclError introduces a leak, or only those three in Compilation.zig?

1609180619
andrewrk
g-w1, if the 1st try succeeds, but then the 2nd one fails, the memory is leaked

1609180625
andrewrk
that's why the code had ensureCapacity before

1609180741
g-w1
ah, I see. an errdefer destroying the message will fix it. thanks for the feedback

1609180878
andrewrk
np. I reverted the commit for now since it had that other issue I wanted to push back on too

1609181036
g-w1
ok, so I wont submit a pr to fix it

1609181276
andrewrk
this would be a good time to point out I do appreciate all the contributions you've been making

1609181667
TheLemonMan
andrewrk, what's your stance on #7477 ?

1609181722
andrewrk
where's the footgun in that last comment there?

1609181786
pjz
any chance on reconsidering #447 at least wrt non-pub functions ?

1609181794
TheLemonMan
the missing `extern`

1609181810
TheLemonMan
that's even worse when you're dealing with C APIs using *c_void

1609181898
andrewrk
I see, because the layout won't match the C version

1609182330
TheLemonMan
yeah, that's a source of hard-to-debug problems

1609182665
andrewrk
TheLemonMan, my stance is that ABI boundaries are unavoidable footguns. A single typo can result in this kind of bug. Also `packed` vs `extern` or a missing `align`. So I don't find this argument compelling. I think pointers to things should be OK in the C ABI boundary

1609182699
TheLemonMan
it's a pointer to something you can't use from the C side

1609182732
TheLemonMan
that's something you'd use @opaque for, and I think that's also what -femit-h does

1609182753
andrewrk
you use opaque for when the C code has the definition; you just use a pointer when your own code has the definition and the C side doesn't

1609182774
andrewrk
doesn't your patch introduce pointer casts that previously weren't there?

1609182796
andrewrk
yep there it is

1609182808
andrewrk
no good; this introduces a footgun while promising to take one away

1609182812
TheLemonMan
the casts are done on the Zig side because we're crossing the boundary twice

1609182845
andrewrk
the zig code has no boundary to cross

1609182874
fengb
It’d just be a forward declared struct in C

1609182915
fengb
And we could avoid defining an extra export function just for C

1609182923
TheLemonMan
the front-end is written in Zig, the backend is written in C++ and calls into the Zig code

1609182950
TheLemonMan
so the Progress objects go Zig -> C++ -> Zig, that's why you need the ptrcast

1609183136
andrewrk
the zig code is all one object; the Progress struct in both cases is part of the same compilation

1609183300
TheLemonMan
yes? I'm not following anymore

1609183427
TheLemonMan
I think @opaque is the solution whenever you don't want/you can't leak the definition to the C side, like we do for the Progress structure

1609183473
TheLemonMan
like a *c_void, but type-safe

1609183593
andrewrk
it's the other way around, opaque is the solution when you can't leak the definition to the Zig side

1609183599
andrewrk
the type is opaque

1609183624
andrewrk
opaque is the wrong type for std.Progress

1609183633
ifreund
I've had crashes because I forgot an extern before while writing wlroots bindings and this check would have prevented that code from compiling

1609183696
andrewrk
I recognize that as one of many footguns at the ABI layer. I don't think it stands out as any more precarious than any other one, and it introduces footguns to take this feature away (see the new pointer casts in #7477)

1609183714
ifreund
I think requiring an explicit @ptrCast() on the ABI boundry when passing a non-extern struct is a good tradeoff

1609183768
TheLemonMan
well, the opaqueness is valid on both sides of the ABI boundary, why not take advantage of the "other half" ?

1609183777
ifreund
I may be missing something but I just see more verbosity not new footguns

1609183796
andrewrk
ifreund, I disagree. That same logic could be used to argue that extern function declarations should have no types at all, and you should have to pointer cast to get any type out of an external symbol. At which point we've reinvented extern fn declarations

1609183854
andrewrk
the fact is that an ABI declaration must be correct and there is no type safety available to check your work. a pointer to a zig struct is a valid type of parameter in a C ABI function

1609183870
TheLemonMan
how is that specific @ptrCast a footgun? every single @ptrCast is a footgun if you're not careful enough

1609183899
TheLemonMan
and I'd expect people to know what they're doing when playing with this kind of non-trivial C/Zig interop

1609183903
andrewrk
that's my point. if we treat all footguns as equal you've removed one and you've added one, so net zero, while making the code more complex

1609184055
TheLemonMan
I wouldn't say it's more complex, there are only 3-4 @ptrCast in the whole codebase (compiler+runtime+stdlib) that are going away once the stage1 gets the boot

1609184084
TheLemonMan
and, as I wrote on the ticket, this is the only irregular case where the child type isn't checked

1609184150
TheLemonMan
if you declare the parameter as a C array (that eventually decays into a pointer anyway) you get a cold hard compile error

1609184160
andrewrk
I don't understand that argument - it's also the only case where it's a pointer, so the meaning of a child type is different

1609184173
ifreund
That's a good point, one of these foot guns is much more common in practice

1609184313
andrewrk
what do you mean to declare the parameter as a C array? zig doesn't have "C array" types

1609184334
andrewrk
zig arrays have no corresponding C type, hence compile error

1609184406
andrewrk
as a reminder we also have

1609184426
ifreund
I think TheLemonMan was saying that you aren't currently allowed to pass an array of non C ABI types over they ABI boundry without a pointer cast

1609184459
andrewrk
right because there is no C type corresponding to that. But if it were a pointer to such a thing, there would be a C type for that - a forward declared struct

1609184500
TheLemonMan
in iter_function_params_c_abi arrays are passed as pointers and type_allowed_in_extern does allow arrays

1609184573
TheLemonMan
from the C POV there's no difference between the two, so why the difference?

1609184593
andrewrk


1609184675
andrewrk
this is correct, if you find an example where it allows arrays, that's an implementation bug

1609184679
TheLemonMan
alright, I stand corrected

1609184778
andrewrk
I'm pretty confident in this design decision

1609184781
TheLemonMan
but it still feels like a weird special case, arrays not being allowed aside

1609184803
ifreund
I don't hate the status quo tbh. Eventually someone will probably write a static analysis tool to give me warnings for this

1609184868
TheLemonMan
if we take river as an example, this change would introduce zero @ptrCast, right?

1609184884
andrewrk
in zig code we model external things strictly from zig's perspective

1609184889
ifreund
TheLemonMan: I disagree that it feels like a special case. The pointer itself has a well defined representation on the ABI boundry, so it's allowed.

1609184905
ifreund
It feels different from how C headers work for sure though

1609184935
andrewrk
the other side of C ABI might not even be C. It could be any other language, even zig

1609184945
TheLemonMan
a pointer to... something you can't declare! isn't that an opaque type?

1609184959
ifreund
it would be in a C header declaring this function

1609184974
andrewrk
but we can declare it. the definition is right over there: struct Foo { a: T, b: T}

1609184974
TheLemonMan
yeah, if you twist the meaning of opaque to mean "opaque for Zig" then it makes sense

1609185001
TheLemonMan
I meant on the C side

1609185002
ifreund
that's how I interpert opaque currently at least

1609185027
ifreund
extern definitons aren't an API spec though

1609185045
ifreund
if you want someone to use your library you'd write a C header and use an opaque struct

1609185076
andrewrk
right. and with a zig-emitted .h file it would emit a forward declared struct

1609185086
TheLemonMan
my interpretation is a bit wider, I'm using that for types I want to keep on one or the other side

1609185131
ifreund
TheLemonMan: you're right though, if we look only at river and it's dependencies/bindings this change would be a strict improvement to safety

1609185145
ifreund
river is not a good example though for this use case

1609185149
TheLemonMan
I'll make my own fork of Zig with blackjack and hookers and @opaque types

1609185165
ifreund
I expect this to come up a lot more when writing Zig libraries exporting a C ABI

1609185165
companion_cube
you could call it zen++

1609185167
companion_cube
or zune

1609185207
TheLemonMan
well river is heavy on handcrafted C bindings

1609185221
TheLemonMan
zen++, I like how that sounds

1609185237
companion_cube
river.zenpp

1609185250
ifreund
TheLemonMan: indeed, but you won't find a single export statement

1609185298
andrewrk
hmmmm. in theory I think we could make it a compile error if the type is never exported

1609185318
TheLemonMan
I think the biggest library written in Zig is the compiler_rt, that's full of @export

1609185324
andrewrk
it's only because we export the type that it could ever be passed in an extern fn

1609185354
andrewrk
the difference between export / extern is a nice observation

1609185430
ifreund
TheLemonMan: if I were to implement e.g. libwayland's API in zig I would want to use non-extern structs behind all the opaque pointers for example

1609185479
ifreund
alright andrewrk's convinced me that the status quo is better

1609185481
TheLemonMan
under the "opaque for zig" light that makes sense

1609185609
TheLemonMan
I'm still not sold tho, next time you get a nasty crash because of a missing extern please think of me :>

1609185664
andrewrk
ok, deal

1609185668
ifreund
TheLemonMan: I still want a static analysis tool to spit warnings at me :D

1609185677
ifreund
but that can come way down the road

1609185713
ifreund
hmm, should probably paste this chat log as a comment on the PR...

1609185847
ifreund
done

1609185880
TheLemonMan
I tried to paste a link to the irclog but got a 502, damn it

1609186176
FireFox317
andrewrk, regarding #7498 (llvm backend) do you mind if I just push more commits to the PR (to implement more functionallity)? Or would it be better to keep this one small?

1609186214
andrewrk
FireFox317, if you don't mind rebasing it and fixing the conflicts, I'll make an effort to merge that today

1609186291
andrewrk
I think if we got the first version landed before you added commits to it, it would help prevent more conflicts while you work

1609186408
FireFox317
andrewrk, ah yeah let me rebase that. Don't think there will be any conflicts tho

1609186448
andrewrk
I'm hoping to merge a big chunk of everyone's stage2 PRs today

1609187078
FireFox317
ah nice! Branch has been rebased btw. I did have some conflicts which are solved now :)

1609187087
andrewrk
thanks!

1609187140
andrewrk
yeah let me try to focus on getting this landed before you add commits to it if you don't mind

1609187225
FireFox317
andrewrk, no problem, thats fine! However currently the genArg function does nothing (which is pretty bad), because i dont store ValueRef's yet

1609187237
FireFox317
I will address that in further PR's for sure

1609187310
FireFox317
Have to reboot (dual-boot), but will check the logs if someone mentiones me :P

1609187348
andrewrk
FireFox317, I'll have a look, thanks! As a general rule, try to emit a compile error for TODOs rather than miscompile or crash

1609188497
leeward
and shorten about 35% of the lines

1609188499
leeward
whoopsie

1609188519
leeward
heh, hitting up arrow then enter in the wrong window produces funny results sometimes

1609189579
FireFox317
andrewrk, yup. I tried to do that as much as possible

1609189861
pjz
is there a way to get the return type of a runtime function?  @TypeOf won't work on them, correct?

1609190222
ifreund
introspection in generaly only works at compile time

1609190236
ifreund
what are you trying to acheive?

1609190987
pjz
oh, I'm trying to wrap up a call that's way too complicated.  I ran into a TODO for #447 so I just gave up and did copypasta for now

1609192055
pjz
I'm trying to refactor some boilerplate error handling:

1609192593
ifreund
the std.mem.Allocator interface doesn't work at comptime

1609194864
dch
andrewrk: can you get the raw commit for zig master added to

1609194897
dch
e.g. `{"master": {"version": "0.7.1+f75d4cbe5",sha:"f75d4cbe5" ...` for example

1609194907
andrewrk
ok

1609194962
dch
I can hack it out of version directly, obviously. but I can feed the sha into a wee script here and have a lang/zig-devel port available every few days for freebsd

1609194996
dch
hopefully people will get distracted by regular updates and come over to see what all the fuss is about

1609195039
dch
tyvm

1609195510
andrewrk
np

1609195912
FireFox317
andrewrk, do you think it is a good idea to use the current branch_stack abstraction (in codegen.zig) in the new llvm backend too?

1609195936
andrewrk
that abstraction is W.I.P. if I remember correctly

1609195956
andrewrk
it's intended to be used for register allocation, so I don't think it applies to LLVM IR generation, because LLVM does its own register allocation

1609195964
ikskuh
andrewrk: can you explain 7582? :D

1609195977
andrewrk
ikskuh, yeah it's real simple, make this code work in stage2

1609195980
ikskuh
is it "implement that in stage2" or? :D

1609195982
FireFox317
andrewrk, okay i see, thanks :)

1609195996
ikskuh
andrewrk: you should note that in a sentence probably. it's confusing :D

1609196009
andrewrk
label:stage2 label:enhancement

1609196027
andrewrk
I need a github url to past into a comment

1609196032
ikskuh
i totally missed those :D

1609196044
ifreund


1609196074
andrewrk
s/need/needed/

1609196074
ifreund
I should teach my terminal how to open numbers as github issues

1609196094
ifreund
heh

1609196845
andrewrk
FireFox317, merged!

1609196886
FireFox317
andrewrk, ah nice! thankyou!

1609198433
g-w1
andrewrk: I do not know if you saw, but I actually did impliment compilelog with module having a special field of `Decl -> *ArrayList(usize)` here

1609198459
andrewrk
I'll definitely take another look if you do that

1609198487
g-w1
ok, sounds good

1609199105
g-w1
is there a build option to build stage1 release, but stage2 debug?

1609199579
andrewrk
I don't think that's hooked up at the moment

