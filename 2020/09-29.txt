1601337606
pixelherodev
so 8,16,32 are guaranteed to be there?

1601337666
pixelherodev
Going to add a quick note to 875 about this

1601337731
alexnask[m]
Let me double check the standard, this was from some website with no paragraph citations

1601337782
alexnask[m]
These types are optional. However, if an implementation provides integer types with

1601337782
alexnask[m]
two’s complement representation, it shall define the corresponding typedef names.

1601337782
alexnask[m]
widths of 8, 16, 32, or 64 bits, no padding bits, and (for the signed types) that have a

1601337797
alexnask[m]
Okay, this is more reasonable than I remembered

1601337866
pixelherodev
I think my ideal solution here for 875 was laid out by andrewrk in the early PR: `c_char is exactly the same as u8, except for the purposes of generating .h files, in which case it generates char instead of unsigned char`

1601337898
fengb
Wait so char signedness is implementation defined?

1601337909
alexnask[m]
yes

1601337912
tdeo
char is actually unsigned on arm

1601338019
pixelherodev
Hmm, this is interesting

1601338027
pixelherodev
Both `{un,}signed char ... = 'a'` work

1601338030
pixelherodev
But not for pointers

1601338052
pixelherodev
char implicit-casts to both signed char and unsigned char, but char * doesn't cast to either {un,}signed char*

1601338086
alexnask[m]
pixelherodev: characters not in the extended character set can always be stored in char

1601338097
pixelherodev
?

1601338116
pixelherodev
Regardless of the value, a character literal's type should be `char`

1601338148
pixelherodev
Perhaps a better example: `char a = 'l';unsigned char b = a; signed char c = a;`

1601338149
alexnask[m]
An object declared as type char is large enough to store any member of the basic

1601338149
alexnask[m]
execution character set. If a member of the basic execution character set is stored in a

1601338149
alexnask[m]
char object, its value is guaranteed to be nonnegative.

1601338152
pixelherodev
both of those implicit cast.

1601338157
alexnask[m]
Isnt a char literal an int?

1601338163
pixelherodev
... ah.

1601338166
pixelherodev
That might do it?

1601338336
alexnask[m]
But yeah basically if its a single char its an int and guaranteed to be storable and nonnegative in a char

1601338339
pixelherodev
Anywho, thanks for the chat, offlining

1601338348
pixelherodev
cable*

1601338352
alexnask[m]
Ciao

1601350061
pixelherodev
I've gotta say, I really love the `catch unreachable` pattern for optimizer hints

1601350070
pixelherodev
It makes some pretty neat tricks possibl

1601350072
pixelherodev
possible*

1601351069
pixelherodev
How do I link compiler-rt / zig_probe_stack when using a Zig static library with C cod?

1601351071
pixelherodev
code*

1601351287
daurnimator
pixelherodev: --bundle-compiler-rt to zig

1601351330
pixelherodev
Thanks!

1601351616
pixelherodev
daurnimator: that works for static libraries?

1601351628
pixelherodev
Never mind, yeah

1601351632
daurnimator
pixelherodev: you can pass it to zig's build-lib; yes

1601351635
pixelherodev
Woot!

1601351639
daurnimator
though I remember there being caching bugs with it

1601351640
pixelherodev
I just didn't realize it had synced

1601351642
pixelherodev
It's good now :D

1601351661
pixelherodev
I'm almost able to start working on my next JIT :D

1601351667
pixelherodev
Just need to finish bringing up the C bindings

1601351676
daurnimator
IIRC compiler-rt gets cached with e.g. the cpu flags you first use; then it gets reused even if you pass different cpu flags

1601351694
pixelherodev
Fortunately, since they're all one-liners, and I'm building statically, the compiler should fully inline everything

1601351704
pixelherodev
daurnimator: that's fine for me for now

1601351799
pixelherodev
We don't have C varargs working yet, right?

1601351806
pixelherodev
That is, a way to pass in varargs from C code

1601351807
pixelherodev
Not vice versa

1601352615
daurnimator
I think you can; as long as the arguments are of certain types (e.g. struct arguments don't work IIRC)

1601352634
daurnimator
oh you mean implement an extern vararg function in zig: yeah that doesn't exist yet

1601352644
daurnimator
I recall an issue/proposal adding @vastart and friends

1601352711
daurnimator


1601353142
pixelherodev
...

1601353145
pixelherodev
daurnimator: does that patchset work, if I apply it locally?

1601353147
pixelherodev
:P

1601353223
pixelherodev
I'd probably be willing to deal with all the issues therein if it means not having to wait for it

1601353234
pixelherodev
The alternative is to restructure the library to use some sort of value stack

1601353262
pixelherodev
e.g. a dynamic array; instead of `a(a1,a2,a3...aN)` it'd be `push(a1);push(a2);...push(aN);a();`

1601353331
pixelherodev
tdeo: ping

1601353407
pixelherodev
I think I'll deal with value stack for now :(

1601353708
pixelherodev
Ooh, or, arrays?

1601353736
pixelherodev
I've been using

1601353766
pixelherodev
The real problem then is figuring out the target function's type - since I can't pass that in the way I do with Zig :(

1601353790
pixelherodev
I can just remove safety :(

1601353804
pixelherodev
The only reason the type is needed is to assert that the given inputs match what the function expects

1601366218
andrewrk
I'm finally done with #6250. It's just fixing regressions and getting the CI passing now

1601366244
andrewrk
169 files changed, 18579 insertions(+), 19204 deletions(-)

1601366259
mq32
\o/

1601366263
mq32
that's some nice news!

1601366413
bfredl
wonderful

1601366423
bfredl
looking forward to play with it :]

1601366487
mq32
nice delete-log as well :)

1601366570
bfredl
the binary patch thing is intensively crazy (and useful for debug reiterate : )

1601366610
bfredl
I would like to rewrite parts of neovim into zig "one day"

1601366637
andrewrk
once the language & std lib has stabilized a bit I think it would be very practical to do that a little bit at a time

1601366639
bfredl
and patch the editor in which i edit the editors current source code in real time

1601366650
bfredl
(just to try it, and see how it feels)

1601366653
andrewrk
woah

1601366656
andrewrk
that's hardcore haha

1601366664
bfredl
probably not for "real work"

1601366676
bfredl
but i want to experience the experience, like once or twice

1601366700
andrewrk
I definitely need to take a few days off after this lands but I'm looking forward to a fun stream soon where we try to implement hot code swapping :D

1601366750
bfredl
mm. When I'm "done" with all the things i have promised to write in c for neovim already, i will engage "project zig-nvim"

1601366769
mq32
andrewrk: looking forward for the stream already! :D

1601366775
mq32
this is gonna be great

1601366791
andrewrk
mq32, one thing I haven't figured out yet, is how will you trigger the hot swap?

1601366819
andrewrk
e.g. if it's `zig run --watch foo.zig` then the foo program is controlling the terminal

1601366859
andrewrk
we could do it automatically on file system changes, but (1) don't have that std lib code yet, and (2) I don't think that's the best way to do it, you might get into a weird state that you never intended to

1601366885
andrewrk
e.g. maybe you wanted to hot swap 2 edits to 2 different files at the same time

1601366955
mq32
andrewrk: what about signals/ipc?

1601366966
andrewrk
that's not very cross platform

1601366970
mq32
true

1601366979
mq32
or a socket

1601366983
andrewrk
one idea I had was a simple tcp protocol, yeah

1601366995
andrewrk
even a web page interface to the compiler, heh

1601367007
mq32
i would've just used UDP

1601367012
mq32
as it's local anyway

1601367013
andrewrk
idk maybe it could be useful to display some kind of graphical information of the running program

1601367039
bfredl
I would like an API function

1601367043
bfredl
the program itself can call

1601367049
andrewrk
that makes sense too

1601367057
bfredl
like, I love how ASAN exports an _asan* API

1601367063
bfredl
that we can use in debug code

1601367064
andrewrk
so we'd have a comptime bool that is whether you're running in hot swap mode

1601367069
bfredl
to do cool debug stuff

1601367092
mq32
std.builtin.is_hotswap_enabled

1601367104
andrewrk
@hotSwapNow()

1601367106
bfredl
like "asan plz don't crash my program, but describe this address for me"

1601367107
mq32
"press f5 to recompile the game engine"

1601367148
bfredl
f4 to enter zig REPL

1601367159
bfredl
(one can dream right)

1601367181
andrewrk
it should be pretty straightforward to have a comptime repl

1601367187
andrewrk
a runtime repl is basically gdb

1601367196
bfredl
yea i know

1601367214
bfredl
i keep forgetting sometimes that zig is a "simple" language in the good senses of the word

1601367223
bfredl
like how any c debugger can be a c repl

1601367231
bfredl
(but not every c++ debugger is a c++ repl)

1601377484
WilhelmVonWeiner
Is the multiline string syntax ever going to change?

1601377511
WilhelmVonWeiner
prefixing everything with // is inane, kind of.

1601377623
mq32
heya

1601377653
mq32
WilhelmVonWeiner: which editor are you using? i find it quite convenient with vscode and i assume vi/emacs people also can prefix multiple lines easily

1601377715
WilhelmVonWeiner
I can "do it" easy (I use vis) but it's harder to read and notable extra work

1601377739
WilhelmVonWeiner
notable being, you really notice it

1601377814
mkchan
imo it's easier by far (vim user opinion)

1601377893
WilhelmVonWeiner
easier than not prefixing lines with anything?

1601377906
WilhelmVonWeiner
I can see why it is like that, looking at the source though, now

1601377957
mkchan
/* */ is very bad if you just happen to not have code highlighting, if you're trying to grep or if you're trying to parse

1601378074
WilhelmVonWeiner
I don't have syntax highlighting either but that's got to be exceedingly rare

1601378236
mkchan
oh yeah, but it's rooted in the same problem => needing more context about the code

1601378266
mq32
WilhelmVonWeiner: yeah, the prefix is required to make zig line-tokenizable

1601378271
mq32
which is a very good property for all tooling

1601380666
earnestly
It also prevents the accidents which have happened due to block comments and why Ada was designed without them, primarily so

1601385476
m4r35n357
does anyone here know how f128 floating point is implemented?

1601385536
m4r35n357
If I were to guess, double-double?

1601385553
m4r35n357
with HW acceleration

1601385620
m4r35n357
well I would hope, anyway ;)

1601385632
mq32
heya

1601385639
mq32
it's afaik a software-implementation

1601385652
m4r35n357
like libquadmath?

1601386510
mq32


1601387299
m4r35n357
mq32, thanks!

1601387352
m4r35n357
I was hoping it would be more like this:

1601387422
m4r35n357
I already have arbitrary precision via MPFR in my program, so I don't think soft float will be any improvement.  Oh well

1601387462
mq32
f128 is only comptime-supported atm as well i think

1601387905
m4r35n357
mq32, thanks again, looks like the best I can do HW-wise is still 80 bit long doubles in c on x86

1601389144
pixelherodev
daurnimator: good job with the naming for fifo.pump - I used something stupid like Fused Append-extract (FAE) when I was doing my kernel work lol.

1601389611
pixelherodev
Is the LLVM dependency comptime optional for stage2 now?

1601389627
pixelherodev
Wait, don't answer that; it's about time I look through that branch anyways

1601390193
pixelherodev
Woot, we don't need to build stage1 in-repo to work on stage2 anymore!!

1601390217
pixelherodev
To be fair, I cheated my way around that too :P

1601390228
pixelherodev
but now I just needed a one-line build.zig change :D

1601392684
justin_smith
re: "a runtime repl is basically gdb", I think this means that we could write extensions (in guile? maybe other languages can hook in?) to compile expressions via zig in program context and send them to gdb (eg. to use zig pointer / printing ops in the debugger)

1601392745
justin_smith
my experience with gdb most recently is it's a great repl for assembly, until I need to worry about weird c-isms that my assembly code doesn't care about

1601392881
justin_smith
also I know nothing about lldb, but maybe that offers features / flexibility for a language using llvm that are better than gdb?

1601393138
justin_smith
bfredl: my experience with editing low level elisp in emacs was that it was exciting at first, but I quickly ended up running emacs in two profiles, one stable one using none of my uncommitted code, and an unstable one reflecting the latest changes to the repo

1601393172
justin_smith
I've switched to nvim since then which is an improvement IMHO, but I think the "turning your own editor into dogfood as you use it" issue is universal

1601403187
bfredl
justin_smith: tell me about it

1601403200
bfredl
i'm trying to dogfood a neovim master crash r n

1601403205
bfredl
but I cannot cause the crash

1601403275
justin_smith
bfredl: I wonder if there's a way to attach nvim to a lua program that exercises the app programmatically?

1601403299
justin_smith
that should at least simplify testing that isn't UI layer

1601403615
bfredl
Welll our test suite is exactly that

1601403622
bfredl
Pretty much

1601403662
bfredl
look into unittests if you need to call c functions directly from lua

1601403668
bfredl
(via luajit ffi)

1601404821
WilhelmVonWeiner
So I have slices of the type `*const [n]u8`, how can I define an array to hold these variable length slices? I've tried `[32]*const [*]u8` and `[32]*const [_]u8` but that's basically all my rational actions exhausted

1601404880
ifreund
*const [n]u8 is not a slice, but a pointer to a comptime known number of items

1601404898
ifreund
this number is part of the type and is static

1601404906
ifreund
i.e. it is not present at runtime

1601404929
ifreund
a slice would be a []const u8 which is like a struct with .ptr ant .len fields

1601404945
ifreund
what you want is a [32][]const u8

1601404999
ifreund
[32]*const [*]u8 would be fine too if you don't want to store how long each slice is

1601405016
ifreund
but no, that would be [32][*]const u8

1601405051
justin_smith
bfredl: oh, cool

1601405097
WilhelmVonWeiner
ifreund: thanks mate

1601405133
ifreund
no problem!

1601405805
bfredl
justin_smith: I made this PR just for you

1601405819
bfredl
(didn't know it was for you when i made it tho, but i know now)

1601405870
andrewrk
FireFox317, nice find on the -r stuff. I was hoping to make the optimization later to avoid redundantly linking an object file into an object file but it seems stage1 was relying on that to work correctly

1601406577
cdrubin
Hello all

1601406599
cdrubin
Holy smokes - lots of people in here. Great to see it!

1601406618
mq32
heya cdrubin

1601406630
Nypsie[m]
Hi

1601406657
cdrubin
Please would someone share with me the origin of the .{variable_name} syntax in the print functions

1601406682
cdrubin
Just starting out with zig and wondering where that came from or if the dot could be another character etc...

1601406769
cdrubin
{} is an array, and the leading . is?

1601406784
andrewrk


1601406795
Nypsie[m]
In this case it means an anonymous array literal

1601406810
Nypsie[m]
I swear I was lagging!

1601406832
cdrubin
Fanks!

1601406870
FireFox317
andrewrk, thanks! I probably forgot to add the most important thing to the PR and that was that the CI was failing because there was a '-SUBSYSTEM' missing on the linker line. But then I found out that LLD was executed with the same object file and i was like, something is not correct here.

1601407114
pixelherodev
... does errorName return a `[:0]u8` or a `[]u8` ?

1601407117
pixelherodev
@errorName*

1601407191
pixelherodev
Probably best

1601407192
nikki93
all of the code for a wasm gl clear from zig in one picture (including output)

1601407247
andrewrk
FireFox317, for ELF it is possible to "link" object files together into one. the way the cache is organized we are relying on this behavior to potentially copy an object file from the cache to the cwd, for example in the case of `zig build-obj foo.zig`. so it's a bit tricky - do we try to special case single object files, or make the link code detect the situation and do a file copy?

1601407283
andrewrk
I have a note here to open an issue for this. For now I will make it copy the file

1601407342
andrewrk
nikki93, cool demo!

1601407454
nikki93
thx ^_^

1601408143
FireFox317
andrewrk, I yeah I see. And since we are just copying files between zig-cache's its not a big problem to just copy

1601408360
Nypsie[m]
nikki93: Cool! Looking forward to further updates :) What's the performance like? I never tried anything like that before so I'm quite curious.

1601408366
andrewrk
FireFox317, thanks for looking into it while I was sleeping 😁

1601408437
nikki93
Nypsie[m]: i have yet to do some benchmarks for zig wasm stuff, but i've done a lot of testing of wasm graphics stuff in c vs. the same in js before, and also vs. the same in native

1601408469
nikki93
ultimately right now, to call to the 'system' like webgl or dom, you have to go through JS, so if your codepath is mostly those kinds of calls you don't gain much

1601408483
Nypsie[m]
Makes sense

1601408486
FireFox317
andrewrk, haha no problem, it was fun to have a tour through the code. Really wanted the fix the CI, but it wasn't clear to me what the best solution would be xd

1601408499
nikki93
the main gains you get are -- you get control over data layout and can avoid GC stuff, if most of your logic is in wasm

1601408532
andrewrk
nikki93, how much of a penalty is there for the js engine being able to optimize across the boundary between js and wasm?

1601408554
andrewrk
e.g. is the jit able to figure out your wasm functions should directly interact with the gl functions, or do you think there is still a detour through js?

1601408650
nikki93
andrewrk: that's a good q. right now a lot of the gl calls have to do stuff like wrap in a Uint8Array, because the webgl api is very js-oriented

1601408668
nikki93
and idk the extent to which that gets inlined when it's jited, would have to look it up

1601408680
andrewrk
I want to see more browser API exposed to wasm!

1601408686
andrewrk
I feel like status quo is very half-assed

1601408716
companion_cube
it is, even though it's amazing that it even got that far

1601408760
nikki93
yeah. i wonder if they'll bring some graphics stuff into 'wasi' or whether webgpu would have direct wasm bindings etc.

1601408823
pixelherodev
... I mean, TBH, I want to see

1601408865
pixelherodev
WASM is neat, but I'd rather

1601408903
nikki93
i think wasm isn't necessarily just about browsers too. eg.; it could be a good way to introduced a sandboxed env into a native app where you load code remotely, whether to update your own logic or to provide users the ability to customize parts of the app

1601408960
cCCCCcccccCCc
nikki93: Exactly what I use it for at work. RE: sandboxing scripts in a native app.

1601409027
andrewrk
pixelherodev, I see wasm as an opportunity to remove complexity from browsers

1601409059
andrewrk
I was writing a browser from scratch, I'd rather only support wasm than support js

1601409060
pixelherodev
andrewrk: I would

1601409064
pixelherodev
I completely agree

1601409069
pixelherodev
I just don't think either is feasible anyways

1601409074
andrewrk
yeah I don't think that will actually happen in practice though, we'll just get more cruft on top of cruft

1601409080
pixelherodev
That's exactly my point :P

1601409093
andrewrk
shame though, there is a missed opportunity there

1601409093
companion_cube
I mean, you can always write bare-metal frontend apps

1601409096
companion_cube
as in, vanilla JS

1601409098
companion_cube
so fast!

1601409102
pixelherodev
If I thought for a second that they (Google, and thus Mozilla) would ever actually do it, I would love it

1601409105
pixelherodev
But, it'll

1601409133
pixelherodev
Google won't do that, and Mozilla doesn't do anything that would upset Google because Mozilla seems to think their only way to survive is to bow to Google's every whim

1601409136
andrewrk
I think it's important to keep the amount of effort/labor it would take to create a browser from scratch low. otherwise we will end up with some orgs such as Google with too much power

1601409145
pixelherodev
Sure, but it's kinda too late for that

1601409151
andrewrk
with the recent Mozilla layoffs we are more in danger than ever

1601409153
pixelherodev


1601409157
pixelherodev
*Microsoft*.

1601409179
andrewrk
I have an idea to save the web

1601409181
pixelherodev
I'll just not bother with a web browser anymore. I'll stick to the Geminispace :P

1601409188
pixelherodev
andrewrk: let's hear it!

1601409198
nikki93
i think mobile is an opportunity to make new environments for interactions. i don't think we've done as much as we can with touch and media stuff in web

1601409236
andrewrk
it's a redesigning of www that goes in the completely opposite direction of "semantic web" and more in the direction of "a browser is a thin layer to manage untrusted apps and give them selective permissions to do things on your computer"

1601409303
andrewrk
it would be well designed enough to actually run AAA games on your computer. but the user would be in more control of what perms the app had

1601409320
andrewrk
no html, no js, no css. that's all in userland

1601409330
companion_cube
just a wasm VM

1601409332
companion_cube
to run chrome inside

1601409334
companion_cube
;)

1601409346
andrewrk
yeah you would actually be able to run a traditional web browser inside this system

1601409383
pixelherodev
andrewrk: maybe once Zig hits 1.0, that can be the ZSF's next big project: saving the web!

1601409397
pixelherodev
... LLVM still makes me nervous, to change the topic entirely

1601409398
companion_cube
making another web* :D

1601409434
andrewrk
pixelherodev, you're going to hate this then:

1601409451
andrewrk
this is what I wrote yesterday: WTF!!! I am debugging a deadlock and it is caused by llvm intercepting std.ChildProcess calling exit(1) in the fork child after failing to execve

1601409455
andrewrk
I feel violated. I did not give consent for LLVM to fondle my exit() code

1601409639
pixelherodev
"LLVM emit output..." Me: Oh god it's in another infinite loop

1601409663
pixelherodev
Woot! Got tricarbon working with C code :D

1601409674
pixelherodev
and, now that I'm not using stdio for debugging, a stripped build is

1601411015
nikki93
if i use zig's reflective features to auto-generate UI to edit instances of a struct, what would be a good place to attach 'metadata' to members? for example if i wanted to add a 'min' and 'max' for some member that uses a slider control

1601411116
companion_cube
I'm not sure, but maybe `const` fields in the struct?

1601411130
companion_cube
(although, right, how do you attach to a particular member…)

1601411156
andrewrk
I can't remember did we add syntax for this yet? struct { a: i32, comptime b: i32 = 123, }

1601411202
andrewrk
that's the type you get for .{.a = runtime_i32_value, .b = 123}

1601411355
nikki93
companion_cube: maybe i'd just name it the same as the field with some suffix or prefix and i could check if such a "meta" field exists?

1601411373
nikki93
would such const / comptime fields add to the size of struct instances?

1601411379
andrewrk
no

1601411392
nikki93
cool

1601411399
andrewrk
and you can't change the value

1601411489
companion_cube
there's an argument to be made for attributes, though, they're quite clean

1601411506
companion_cube
(typically one also turns docstrings into an attribute)

1601411544
mq32
i'm not sure if i want to allow docstring introspection in comptime

1601411572
mq32
would have some nice applications (attributes, automatic documentation generation, …), but i can see the wilderness spreading

1601411574
companion_cube
why not, if one can introspect types and expressions?

1601411585
companion_cube
comptime is already the hammer tool

1601411598
andrewrk
mq32, I'm pretty sure to not allow it, so that when you read code, you never have to have that little thought worm in the back of your head, wondering if someone did something crazy

1601411617
mq32
yeah, exactly that's my argument against it as well

1601411622
andrewrk
or worse, wondering if yourself did something crazy a long time ago :D

1601411637
andrewrk
or worrying that adding a doc string will possibly break something

1601411662
andrewrk
part of the features of zig is what is

1601411680
companion_cube
you'd still have to explicitely call some comptime code, right?

1601411691
pixelherodev
Not necessarily

1601411713
pixelherodev
`comptime { muahahaDoHorribleThingsToAllDecls(@import("root")) } ;

1601411719
companion_cube
:D

1601411787
mq32
huh

1601411802
mq32
i get a process.h not found, but i'm linking libc and it's included in include/any-windows-any/process.h

1601411856
andrewrk
mq32, --verbose-cc will show the flags

1601412009
mq32
what on earth is zig doing?! :D

1601412062
mq32
linkSystemLibrary does not what i thought it does when crosscompiling

1601412106
mq32
is pkg-config supposed to run for cross-builds?

1601412206
justin_smith
bfredl: hah, fun, I almost get what's going on there

1601412331
bfredl
Mm I will clean it up

1601412343
bfredl
Add some docs

1601412351
mq32
andrewrk: maybe i'm just horribly stupid and didn't set the target on the libexeobjstep

1601412422
andrewrk
mq32, it just means we need better introspection & debugging tools when such errors occur :)

1601412432
mq32
hmm

1601412441
mq32
well, i found out with --verbose-cc

1601412458
mq32
and i wondered why -target was x86_64-linux-gnu and not x86_64-windows-gnu :D

1601412493
andrewrk
in this case, when "file not found" errors come from C compilation, a helpful diagnostic would be to print the C header include search path, in order

1601412505
mq32
true

1601412591
mq32
btw: can you explain why the cache for c files will only succeed to cache everything when the build succeeded once?

1601412594
mq32
it's a weird behaviour

1601412644
justin_smith
mq32: is it related to the granularity of build.zig target definitions?

1601412662
mq32
no, this should also happen when using zig build-exe

1601412671
mq32
maybe … it will just not happen anymore tomorrow or this week

1601412672
mq32
:D

1601412705
mq32
#6250… sooon

1601412960
mq32
it's compiling!

1601414319
ky0ko_
is the c++ based compiler still going to be supported after the self-hosting compiler is mature?

1601414346
ky0ko_
one of the biggest issues i have with languages like rust is that it's impossible to bootstrap them on e.g. netbsd/macppc without external assistance

1601414357
ky0ko_
and i don't want to end up having the same issues with zig

1601414382
ifreund
ky0ko_: the current plan for long term bootstrapping is to use the C backend of the self hosted compiler to compile the complier to C

1601414403
ifreund
before 1.0 this generated code will be cleaned up and made maintainable

1601414407
ky0ko
is the c++ based zig compiler going to remain supported even after the self hosting compiler is mature

1601414425
ifreund
(as generated source doesn't count for bootstrapping)

1601414426
andrewrk
mq32 6250 improves that behavior with regards to finer grained caching

1601414448
ky0ko_
oops, looks like the message from my matrix bridge actually sent lol

1601414535
andrewrk
ky0ko, building zig directly from c++ code will continue to be supported forever. there is a proposal to temporarily make that c++ code generated rather than hand-maintained for a period of time in between now and 1.0

1601414568
ikskuh
andrewrk: good to hear. i'm currently in a process where i have to wait through 52 files getting successfully compiled to see linker errors

1601414584
andrewrk
ah yes that is exactly the situation this addresses

1601414588
ky0ko_
okay, thanks for assuaging my fears andrewrk. as long as there's always a route from having only gcc to having zig i'm happy

1601414589
ikskuh
perfect

1601414603
ikskuh
> lld: error: undefined symbol: __declspec(dllimport) wglGetProcAddress

1601414603
andrewrk
ky0ko, have you seen

1601414607
ikskuh
this is my current problem

1601414612
ikskuh
and i don't really understand why it happens

1601414623
ky0ko_
i haven't, no

1601414633
andrewrk
ah yeah microsoft's dllimport name mangling scheme is really confusing

1601414713
ikskuh
any idea how to work around that?

1601414838
andrewrk
I don't remember enough details, sorry

1601414852
ikskuh
no worries

1601414854
andrewrk
I'm not sure I ever fully understood

1601414858
ikskuh
making lib  names lowercase seems okay

1601414866
ikskuh


1601414923
andrewrk
o.O

1601414940
ikskuh
yep

1601415361
nikki93
among the wasm experiments i want to just do a thin wrapper around

1601415404
ikskuh
uuuuh neat

1601415406
nikki93
you just need to bind elementOpenStart, attr, elementOpenEnd, elementClose and text

1601415477
andrewrk
nikki93, that seems convenient from writing code perspective, but I worry that it will be slow, do you have any knowledge on this?

1601415525
nikki93
i actually use this basically from c++/wasm for an editor tool for a game engine right now. i benchmarked like 1000 counters and buttons and it was fine.

1601415529
andrewrk
asking for my music player project which has a dom element per artist/album/song which can be quite a few

1601415540
nikki93
in profiles the bottleneck was actual DOM calls when diffs occur, rather than the diffing code and wasm code itsel fhaha

1601415541
andrewrk
neat!

1601415547
andrewrk
oh I see

1601415584
nikki93
what that ^ lib does is, compares what you're telling it right now to the existing DOM, and if something changed, updates the DOM. if nothing changed it's quite fast. it also doesn't generate much/any JS objects / garbage i believe

1601415607
ikskuh
andrewrk: it linked!

1601415608
nikki93
the next step above that is to completely keep a buffer in zig that you keep diffing against and only call out to JS/DOM when things change from there

1601415652
andrewrk
makes sense

1601415664
nikki93
andrewrk: can only really say by trying it out and benchmarking, i'll post here when if/when i get to that in zig :)

1601415677
andrewrk
I think what I have now is at the theoretical best possible perf, but it's written in js not zig

1601415703
nikki93
i see. is it open source / got a link?

1601415759
andrewrk


1601415811
andrewrk
nikki93, it's basically just doing everything manually:

1601415849
nikki93
cool! would be cool to do a benchmark that does something like that with mock data

1601415879
andrewrk
I think this is provably the best possible perf, because it's essentially what the dom diff thing will end up doing, but without the diffing step

1601415888
andrewrk
it's not very maintainable tho, that's the downside

1601415925
FireFox317
andrewrk, anything i can help you on with #6250? I have a linux and a windows box with zig

1601415938
nikki93
yeah pretty much. i think it's possible to work with an approach where you code with such an immediate mode / diff style thing generally but then once you notice where the bottlenecks are, just write that stuff manually in this style

1601415948
andrewrk
FireFox317, yeah! let me push a commit I just finished and let's see what's left

1601415970
FireFox317
okay neat!

1601415994
FireFox317
actually building zig was as easy as before, so great that process did not change :D

1601416014
FireFox317
in the #6250 branch i mean

1601416337
andrewrk
FireFox317, pushed! I'm not aware of any more issues, let's find out what breaks!

1601416361
FireFox317
andrewrk, great! Will run the tests locally too

1601416408
andrewrk
oh looks like I need to do a master branch merge too

1601416446
andrewrk
oh, no conflicts. I'm not sure what's up with github

1601416454
FireFox317
andrewrk, and then disable the windows test that failed i think?

1601416505
andrewrk
which one? I'm not familiar with what you're talking about

1601416540
FireFox317
#6452

1601416585
andrewrk
oh! that's a master branch issue. I was hoping to resolve that right now

1601416629
FireFox317
andrewrk, ah great! yeah so merging master into the stage2 branch will stall on #6452

1601416635
FireFox317
eventually

1601416865
andrewrk
if we can get it down to just windows with this run I will be ecstatic

1601416878
andrewrk
I'm setting up to run the tests locally on windows & macos as well

1601416892
andrewrk
it's pretty amazing how far I could get with testing using only cross compiling

1601417045
FireFox317
yeah that's really amazing! i think this CI pass will get us quite close

1601417808
FireFox317
andrewrk, well on my linux box `test-behavior` run fine cross-compiling everything :P just gonna check test-std now, but that will probably be fine too. Great work man! So awesome

1601417898
andrewrk
thanks :)

1601417943
andrewrk
just so other people who aren't paying as much attention are aware, this is not zig being fully self-hosted yet. but it is reducing the amount of c++ we depend on by 16,000 lines

1601417955
FireFox317
I have a good feeling today is gonna be your day :)

1601417983
FireFox317
Unfortunately it is getting pretty late in europe, hopefully will be a nice wakeup tomorrow :P goodnight!

1601417996
andrewrk
good night! thanks for the help

1601417997
FireFox317
std tests passed to btw

1601418003
andrewrk
\o/

1601418008
FireFox317
yw!

1601418464
nikki93
does the new toolchain with in-place binary patching factor into wasm too or will wasm still be just llvm?

1601418507
andrewrk
yep, wasm too thanks to ifreund

1601418525
nikki93
<3

1601418580
ifreund
wasm's not technically in place since the object format is much more restrictive than elf

1601418614
ifreund
instead we store incrementally compiled code in memory and rewrite the whole output file from the in-memory buffers

1601418622
andrewrk
someone on twitter was just asking about this:

1601418633
pixelherodev
Why doesn't wasm just use ELF??

1601418639
pixelherodev
Ah wait, I'm expecting sane decisions from it :P

1601418684
andrewrk
I think that would have been a reasonable decision

1601418691
ifreund
it is possible to do it in place for wasm, and this is what I did at first, but it grew very complex with even a very incomplete implementation

1601418704
andrewrk
yeah I think the strategy you landed on is quite reasonable

1601418722
pixelherodev
I think wasm itself is a good idea done poorly, which will only make the browser situation

1601418754
ifreund
I've just finished my last exam of the summer semester today, so now I can get back to my zig projects

1601418772
ifreund
including the wasm backend, I need to learn how to to codegen

1601418773
andrewrk
good timing, hopefully today is the day I merge 6250

1601418796
ifreund
also going to take a course on compiler theory this semester so that should be fun

1601418883
nikki93
the compilers class in college when i took it happened to use llvm :o

1601418922
nikki93
they had used ML for all semesters till the one when i took it

1601419296
fengb
wasm was designed for streaming and incremental parsing

1601419326
fengb
I'm not sure how important the latter part is since the bottleneck is IO

1601421938
andrewrk
ifreund, it would be really convenient with the way I have the caching system set up if wasm "objects" had different file extension from "executables"

1601421957
andrewrk
I'm thinking about doing ".o.wasm" for objects

1601421975
andrewrk
does that seem ok?

1601422004
andrewrk
same Q to fengb

1601422075
andrewrk
oh shit, green check for freebsd on 6250

1601422081
andrewrk
and arm

1601422101
ifreund
hmm, I feel like what would make the most sense would be to use just .wasm for objects and drop the extension for executeables

1601422113
ifreund
I'm not sure what the conventions are though

1601422121
andrewrk
do web developers expect to fetch("foo.wasm") ?

1601422130
fengb
Convention is to have extension of wasm

1601422147
ifreund
the only reall wasm executables are the wasi stuff run by wasmtime

1601422155
fengb
I think wabt compiles .wat files into .wasm

1601422162
ifreund
yes that's right

1601422166
fengb
Oh I dunno about wasi

1601422174
andrewrk
if you saw "foo.o.wasm" would you be like, "that's reasonable for zig to do that"

1601422177
andrewrk
?

1601422181
fengb
I’m also not sure what a wasm object file is

1601422194
ifreund
i think it's just a wasm file?

1601422197
andrewrk
it's a relocatable one though

1601422202
andrewrk
there is a difference

1601422251
andrewrk
wasm-ld: error: zig-cache/o/88f7371333119da331487a0d4ba5701a/test.wasm: not a relocatable wasm file

1601422272
andrewrk
just got this error because test.wasm (object) got linked into test.wasm (executable) overwriting the cache

1601422293
andrewrk
so the next run tried to link the test.wasm (executable) and received that error

1601422293
fengb


1601422323
fengb
Since it’s non standard, I’d be fine with having .o.wasm

1601422339
andrewrk
" In order to distinguish object files from executable WebAssembly modules the linker can check for the presence of the "linking" custom section which must exist in all object files."

1601422362
andrewrk
yeah so my idea would (1) still have the .wasm extension (2) also provide the extra info that it is relocatable without having to read the file data

1601422457
ifreund
that seeems reasonable to me

