1592104544
pixelherodev
Is there a way to differentiate between ErrorSet1.Error1 and ErrorSet2.Error1

1592104546
pixelherodev
?

1592104804
rooke
My read from the documentation is no, but I could be wrong... "However, each error name across the entire compilation gets assigned an unsigned integer greater than 0. You are allowed to declare the same error name more than once, and if you do, it gets assigned the same integer value."

1592104808
rooke
Is the particular line

1592104955
pixelherodev
Yeah, that's what I figured

1592105308
daurnimator
pixelherodev: you can't: they're the same

1592105327
daurnimator
note the name: error sets. its the same value in a different set

1592105369
pixelherodev
Right

1592105371
pixelherodev
Makes sense

1592131665
nerthus
do you guys happen to know why the zig extension for vscode sometimes work and sometimes doesnt

1592131676
nerthus
extension host says extension startup fails

1592131691
nerthus
and it's only with the zig extension that this happens T_T

1592132123
Kingsquee
because it's not written in rust?

1592132331
ifreund
it's a vscode extention, it's JS

1592132687
nerthus
vscode is hard to debug as well

1592132703
nerthus
it gives you a bunch of obfuscated JS to look through

1592133131
nerthus
frustrating part is, is that I literally just restored it from a backup that worked fine

1592133143
nerthus
lmao

1592135865
KoljaKube
Is const-ness part of `type`s?

1592135951
KoljaKube
Basically what I'm trying to accomplish is having a generic structure that can enforce const-ness of slice function parameters depending on how it was initialized

1592136276
ifreund
yes, `[]const u8` is a type

1592136289
ifreund
and is distinct from `[]u8`

1592136389
KoljaKube
But if I only have the u8 part?

1592136410
afontain_
it's also a type

1592136449
KoljaKube
Yeah, sorry, I guess I'm not good at explaining

1592136452
ifreund
in that case you're talking about the constness of the variable storing the value

1592136460
ifreund
const x: u8 = 42;

1592136486
ifreund
the constness is a property of x not of the type it is storing

1592136528
KoljaKube
I was thinking about a function like foo(comptime T: type, []T data), is there a way to switch data to []const T depending on T

1592136582
KoljaKube
I'm trying to write a wrapper around mutable and immutable buffers and I'm trying to figure out how much of that information I can get into the type system

1592136606
ifreund
why not do foo(comptime T: type, data: T) and call like foo([]const u8, data) or foo([]u8, data)

1592136660
KoljaKube
I guess I could do that, if there was a way to get a @sizeOf(u8) out of that

1592136695
ifreund
i think @typeInfo should give you that

1592136696
mq32
yeah, you can use @typeInfo

1592136856
KoljaKube
Would that be TypeInfo.Pointer.child? Documentation in builtin.zig is kind of sparse...

1592136911
mq32
yeah

1592136946
KoljaKube
Thanks :-)

1592137010
KoljaKube
So if all that would work, is it also possible to conditionally exclude functions from anonymous structs?

1592137034
ifreund
not sure I follow

1592137090
KoljaKube
What I would want to do is not have an `update()` function if my T above is []const u8

1592137099
mq32
yes, it's possible

1592137109
mq32
usingnamespace SpecializedFunctionStruct(@This());

1592137137
mq32
and you can if the portion in usingnamespace

1592137401
KoljaKube
Is there something like that in std or somewhere else I could get a more complete snippet?

1592137573
ifreund
usingnamespace if (@typeInfo(T).Pointer.is_const) FunctionThatRetunsStructWithUpdateFunction(@This());

1592137577
ifreund
does that help?

1592137607
nerthus
well I fixed my problem

1592137608
ifreund
you might need to add an `else struct {}` to the end of that

1592137653
ifreund
could also skip the function and do

1592137683
ifreund
usingnamespace if(is_const) struct{ pub fn update() { .. } } else struct {};

1592137906
KoljaKube
Ah, that's where the if goes

1592137924
KoljaKube
The else is not needed

1592137933
KoljaKube
Well, that is awesome

1592137959
ifreund
indeed, I love how zig can do so much with such simple rules :)

1592137984
KoljaKube
Yeah

1592138090
KoljaKube
So far zig has definitely one of the nicest compile-time type systems I've head the pleasure to use

1592138170
KoljaKube
And a great community, thanks for entertaining my weekendly question-fueled pop-ins here ;-)

1592138187
ifreund
no problem!

1592139235
KoljaKube
Hm, in my actual code I do need the `else struct{}`. Not sure where the difference is

1592139398
ifreund
i'd guess it parses without the else struct{} but doesn't compile, and whatever you were testing with wasn't using the update function so it didn't get compiled

1592139426
ifreund
would be surprised if it worked without the else struct{} tbh

1592139562
KoljaKube
No, definitely did compile with a call to the potentially hidden function

1592139650
KoljaKube


1592139685
KoljaKube
Actual code (any other hints appreciated):

1592140468
KoljaKube
And by other hints I meant non-zigisms or potential for improvement or somesuch

1592140851
ifreund
KoljaKube: you don't need to do `s: Wrapped = undefined,` it's already undefined if you just do `s: Wrapped,`

1592140942
KoljaKube
Ah, that is probably left over from when those were local variables inside a function, thanks

1592141066
ifreund
also, it looks like `usingnamespace if (a) struct { fn b() {} };` won't compile if `a` is false

1592141151
KoljaKube
That might explain it, since commenting in the last lines of main() errors expectedly anyway, and I might have misread the messages

1592142483
alexnask
Zig shotime #3 preshow is live:

1592142602
greenfork
cool cool

1592143704
ifreund
show just started

1592162311
andrewrk
mq32, your microphone sounds really good, would you mind sharing info about it so I can look into possibly getting one too?

1592162340
mq32
thanks ü§£

1592162451
mq32


1592162452
andrewrk
haha

1592162456
andrewrk
thanks!

1592162463
mq32
it's a callcenter headset :D

1592162488
mq32
and yeah, i love the clarity of the sound as well

1592162610
andrewrk
mq32, I know you mentioned it but it never quite sank in, I didn't realize you were creating an entire cpu architecture and then building it. your project is mind blowing

1592162632
mq32
‚ô•

1592162641
mq32
and: it has a zig-based toolchain!

1592162646
andrewrk
:D

1592162680
mq32
it's paused right now, because of sme other projects, but i will return

1592162700
mq32
doing hardware stuff is sometimes frustrating

1592162835
mq32
how's stage 2 going on?

1592163622
andrewrk
I'm hoping to reach a stage2 demo point early this week

1592163651
andrewrk
Progress feels slow because I'm investing in all the difficult design decisions up front, rather than just cranking through zig language features

1592163661
andrewrk
but I'm confident the investment will be worth it

1592163781
mq32
yeah, it's just unusually silent

1592163791
mq32
but i know that "thinking through"

1592163797
mq32
instead of just going full-frontal coding

1592163808
andrewrk
I've also taken a few vacation days this week for family stuff

1592163814
mq32
good!

1592163835
fengb
‚ÄúFull-frontal coding‚Äù... not a phrase I‚Äôd use

1592163859
companion_cube
nothing to hide between consenting adults

1592163864
companion_cube
that's the way of the python

1592163873
companion_cube
(or so it says in their zen)

1592163975
andrewrk
mq32, not sure if you saw this yet:

1592163980
andrewrk
I have some unpushed code on that branch as well

1592164080
andrewrk
I think it will feel like more progress is happening once you can start seeing the tests being added with actual zig source code

1592164155
mq32
yeah, true

1592164192
andrewrk
poor pixelherodev fell for the troll bait on the twitch chat

1592164215
mq32
hm?

1592164242
andrewrk


1592164252
andrewrk
not worth your time pixelherodev :)

1592164306
ifreund
i mean they were definitely trying to bait us or something originally, but they seemd to actually consider the responses

1592164329
andrewrk
oh, that's an unexpected happy outcome

1592164344
companion_cube
maybe the answers should be collected somewhere?

1592164416
andrewrk
meanwhile, the actual video is mq32 describing a CPU architecture and an assembler, in which context "memory safety" is nonsensical

1592164433
mq32
heh

1592164446
companion_cube
true

1592164472
andrewrk
that's why I labeled it a troll, it's off topic

1592164499
mq32
it appears to me that some rust folks trust their language too much

1592164523
mq32
i've seen really impressive rust projects in terms of stability

1592164538
mq32
and i've seen stuff that crashes on the first interaction with unplanned behaviour

1592164546
mq32
same for any other language though :D

1592164556
companion_cube
rust makes it easy to program defensively, though

1592164564
mq32
yeah, true

1592164570
mq32
luckily, Zig as well :)

1592164576
ifreund
it also makes error handling realtively painful in comparison with zig

1592164581
companion_cube
a bit less, but still much better than C

1592164585
andrewrk
oh wow the idea that every instruction could be a jump instruction is super interesting!

1592164594
mq32
it's super-crazy

1592164602
mq32
you can do ‚Ä¶ interesting things with that

1592164632
andrewrk
mq32, we gotta have a SPU backend for zig :)

1592164638
mq32
told you so!

1592164658
alexnask
Why not Risc-V and let Thor handle it? :D

1592164669
andrewrk
I haven't gotten that far yet :D

1592164712
andrewrk
I was, uh, out pretty late last night for my cousin's birthday. was not in a position to be awake at 7am this morning

1592164755
ifreund
oof, yeah didn't realize it was so early in the states

1592164854
mq32
andrewrk: if you're interested in the architecture, you can have a nice evening read here:

1592164873
andrewrk
bookmarked

1592164889
fengb
There‚Äôs documentation? What kind of programmer are you

1592164906
andrewrk
is the SPU Mark II Instruction Set Architecture stable?

1592164924
andrewrk
looks like it has post-1.0 version numbering

1592164963
mq32
it's the document versioning actually :D

1592164992
mq32
it's quite stable already, nothing breaking is planned anymore

1592165006
ifreund
i guess that's what you get with simplicity

1592165062
mq32
except for an improved interrupt handling and two other instructions

1592165078
mq32
(cpuid and some kind of "syscall" thingy for soft-cpu control)

1592165169
andrewrk
neat! I think it would be a good architecture to support to make sure the design does not overfit for any particular architecture

1592165177
mq32
true

1592165187
mq32
the SPU ISA is quite different than most else

1592165479
mq32
also, it would be absolutely awesome to have a real compiler for that arch

1592165585
andrewrk
it can go inside an elf container, yes?

1592165702
mq32
i can use objcopy :D

1592165785
alexnask
Hmm total ArrayList support (as in resolving T, Slice, etc. for a type returned by ArrayList(T)) is more difficult than I realized

1592165797
alexnask
(in zls, that is)

1592165903
alexnask
Still relatively close, I think I can get it done this week

1592166131
ifreund
is the immediate goal primitive types or are you going straight to arbitrary ArrayList(ArrayList(T)) nestings?

1592166140
andrewrk
neat, I haven't seen this use case with @"" function names to do parsing

1592166176
ifreund
yeah that's a super neat idea right?

1592166222
alexnask
Primitive types are not interesting, they have no fields

1592166223
alexnask
:D

1592166261
ifreund
right :D

1592166262
alexnask
Type argument parameter already works in type-fns

1592166279
alexnask
But ArrayList calls into ArrayListAligned and I dont forward them yet

1592166289
alexnask
type argument parameter binding*

1592166341
alexnask
And issue #2 is that Slice/SliceConst depend on the alignment passed, so it requires some knowledge of comptime nullable types + integers

1592166358
alexnask
To resolve the if expression correctly

1592166684
andrewrk
"Go with SPU Mark II, it doesn't have spectre, it doesn't have meltdown, it doesn't have cache misses, because there is no cache." this is gold xD

1592166957
andrewrk
the unofficial Q&A during the break is nice

1592167239
andrewrk
love those happy bird chirping vibes during pixelherodev's talk

1592167341
pixelherodev
uheh

1592167345
alexnask
lol type param forwarding actually works Im stupid

1592167440
pixelherodev
propsoal:

1592167449
pixelherodev
release mode with inlin8ng disabled

1592167455
pixelherodev
This is useful for profiling

1592167462
pixelherodev
s/8/i

1592167507
andrewrk
profiling is an important use case. don't you want to run your profile tests taking into account inlined functions though?

1592167567
pixelherodev
yes, but it's also nice being able to see how the function affect - hey wait, kcachegrind shows impact of indivisual lines

1592167569
pixelherodev
sweet

1592167578
pixelherodev
s/sual/dual

1592167603
pixelherodev
never mind then :)

1592167690
mq32
<andrewrk> neat, I haven't seen this use case with @"" function names to do parsing

1592167699
mq32
i don't know, it appeared natural to me to do this

1592167716
mq32
if i can @"" everything, why keep tables to translate it?

1592167730
andrewrk
oh I agree with you, I just hadn't thought of it, and hadn't seen anyone else do it yet

1592167745
mq32
my args parser is doing it as well

1592167766
pixelherodev
?

1592167773
pixelherodev
which bit is this?

1592167811
mq32
i assume andrew is referring to my handling of mnemonics

1592168508
andrewrk
wow pixelherodev this is really ambitious. and your pace of development is impressive!

1592168529
andrewrk
the package manager use case is interesting, I like that it solves the problem that most applications do not take advantage of -march=native

1592168594
mq32
make zig compile so fast that we don't need precompiled packages!

1592168781
pixelherodev
Working on jmproving rawmcodeg3n next

1592168793
pixelherodev
Tehn some basic optimizations, possibly

1592168800
pixelherodev
gah

1592168821
pixelherodev
improving raw codegen next, then possibly some basic optimizations*

1592168844
pixelherodev
stage2 error tests first though

1592169371
andrewrk
pixelherodev, this testing infrastructure that you've pioneered is soon going to become something we need in zig for testing multiple backends. you've written a bunch of useful tools

1592169382
andrewrk
I'm really impressed

1592169435
andrewrk
it's so cool that mq32 just demoed his own cpu architecture and then pixelherodev comes along, "btw and I've written a JIT for it"

1592169471
mq32
:)

1592169801
pixelherodev
heh, yeah :)

1592169809
pixelherodev
as I've said repeatedly

1592169823
pixelherodev
the single nicest architecture I've worked with, emulation wise

1592169831
pixelherodev
bar none

1592169839
pixelherodev
LIMN comes close, but not quite

1592169999
mq32
thanks

1592170008
mq32
it's also nice to code in assembler

1592170087
mq32
i should patch up the emulator and make it up-to-date with the current HW version

1592170206
pixelherodev
uhoh

1592170213
pixelherodev
:p

1592170227
mq32
that means: MMU, more RAM, more ROM and more devices

1592170232
mq32
for example: video!

1592170262
pixelherodev
wait

1592170266
pixelherodev
more ROM?

1592170271
pixelherodev
fuuuuu

1592170283
pixelherodev
wait no it's fine

1592170291
pixelherodev
cache supports the full address space

1592170295
pixelherodev
not just ROM

1592170299
pixelherodev
oh yeah

1592170306
pixelherodev
reworked the cache ;)

1592170328
pixelherodev
it's now more than twice as fast in debug mode

1592170336
mq32
debug mode doesn't coun

1592170340
mq32
*count for perf

1592170347
pixelherodev
it matters

1592170353
pixelherodev
it was a deliberate goal

1592170366
pixelherodev
it means a reduced incentive to skip tests

1592170385
pixelherodev
release mode is onlyn10% faster ish so far

1592170454
pixelherodev
probably a bigger improvement on older microarchs

1592171131
andrewrk
I like the construction sounds in the background of pixelherodev's Q&A, they are inspiring and metaphoric

1592171437
andrewrk
that was an excellent showtime episode

1592171524
ifreund
yeah tons of super cool low level stuff

1592172097
pixelherodev
Ha

1592172101
pixelherodev
andrewrk: TBH, I didn't hear the sounds :P

1592172115
pixelherodev
Or perhaps I just didn't notice them

1592172150
mq32
your godray effect was nice as well

1592172169
pixelherodev
?

1592172254
pixelherodev
Ahh

1592172256
pixelherodev
Gotcha

1592172260
mq32


1592172265
mq32
01:30:50

1592172834
pixelherodev
mq32: I take back what I said

1592172838
pixelherodev
It's more than twice as fast in release mode too

1592172840
pixelherodev
;)

1592172866
pixelherodev
At ~2:03:35 I said "improving cache behavior would probably get runtime below 400ms"

1592172888
pixelherodev
I believe I have been proven correct :)

1592172957
pixelherodev
`401ms` okay close enough lol

1592173272
mq32
i just skipped through my talk, checking overall quality

1592173280
mq32
and i'm really happy about audio quality as well

1592173321
ifreund
yeah I think I might need to pick up one of those callcenter headsets if/when I give another talk

1592173327
ifreund
need to write more code first though

1592173362
mq32
yeah the audio quality is superb :D

1592173553
mq32
30‚Ç¨ is also a really acceptable price

1592173564
mq32
and it's light, not the heavy gamer headset

1592174237
pixelherodev
I wish there was a way to use -O1 with Zig :(

1592174253
pixelherodev
debug mode builds in ~ten seconds, release-fast requires multiple minutes

1592174263
pixelherodev
I just want basic optimizations, I don't need full -O2 :(

