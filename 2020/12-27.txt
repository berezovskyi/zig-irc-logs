1609029255
andrewrk
g-w1, all known deadlocks are now fixed

1609029668
g-w1
thanks, when the next tarball comes hopefully its fixed!

1609030356
mikdusan
hey gang, macOS question here: anyone know if we use/expect zig's os semantic versioning (ie. os.version_range.semver.min / max) where 10.16.* is expected for Big Sur? or can we simply represent Big Sur as 11.minor.patch ?

1609033380
andrewrk
hi mikdusan! yep, 11.x.y is big sur

1609034594
mikdusan
not sure if it's been mentioned but there is a caveat here. Apple in their wisdom has decided that based on SDK you build with,

1609034659
mikdusan
that dictates what is returned by sysctl("kern.osproductversion", ...).

1609034731
mikdusan
example: on Big Sur, I can use SDK 10.15.x or probably even older. or I can use SDK 11.x . pre 11.x SDK returns "10.16" and 11.x SDK returns "11.1"

1609037235
marler8997
congrats on fixing the deadlock...not an easy task

1609040478
andrewrk
thanks

1609040506
andrewrk
mikdusan, hmm and that's what we're using to detect the OS version?

1609040721
mikdusan
andrewrk: yes, currently we do sysctl on MIB kern.osproductversion then fallback if that fails (ie. older releases than 10.13.6) to essentially a table using key from MIB kern.osversion. this fallback is less and less important as Zig is unlikely to run on such old versions,

1609040783
mikdusan
#5125 outline that we could just quick-parse /System/Library/CoreServices/SystemVersion.plist and grab the key ProductVersion

1609040795
mikdusan
and I'm about ready to do that now that Big Sur is forcing our hand

1609041022
mikdusan
but boy is Apple funny how they implemented this compatibility version thing. ie: old SDK return 10.16, otherwise 11.1 or whatever; but it looks like parsing that .plist file is off the table now too. dammit apple:

1609041024
mikdusan


1609041029
andrewrk
oof

1609041093
mikdusan
and yes, a binary that is built with older SDK that opens the same file... you guessed it... it returns a compatibility version string 10.16,

1609041093
fengb
Schrodingers OSX

1609041107
mikdusan
I found this out the hard way because my `cat` was from macports that I built on 10.15 lol....

1609045250
andrewrk
cCCCCcccccCCc, idk if you saw but all known deadlock issues are now resolved

1609051835
pixelherodev
Hooray! Nice work!

1609058486
pixelherodev
andrewrk: thanks for having a grammar already, really makes my life easier :)

1609060921
pixelherodev
I think I might use string interning...

1609067767
cCCCCcccccCCc
andrewrk: I just tested it a moment ago and hopped on to let you know it works great. Thanks for all the hard work over the holidays, you're a legend!

1609079968
g-w1
andrewrk: the deadlock is fixed!!!!!!!! time to compile all the c code! tysm

1609084958
protheory8-new-m
Is there something like `std.atomic.Queue` but with a function that blocks the thread if there is no nodes in the queue?

1609086916
protheory8-new-m
Like a blocking `get` function or something

1609087137
companion_cube
You can do one with a mutex and condition, if not

1609090369
scientes
protheory8-new-m, you mean it is full?

1609090376
scientes
that is a semaphore, not a mutex

1609090381
scientes
(but they are similar)

1609090399
scientes
or similar to go channels

1609090404
scientes
buffered channels

1609091266
protheory8-new-m
scientes: No, I mean when there are 0 zero elements in the queue

1609091295
scientes
go buffered channels do that too

1609091310
scientes
and the unbuffered too...

1609091387
semarie
hum. I need to allocate data with alignment know at runtime. but Allocator interface seems to only have alignment configurable at compile-time. any idea how to proceed ?

1609091454
scientes
semarie, generally you would use the largest alignment

1609091459
scientes
unless you are writing an allocator

1609091478
scientes
semarie, because you need to compile the code for every alignment

1609091544
semarie
I am implemention emutls. the alignment is know at runtime and the system will expect found allocated data with requested alignment

1609091602
semarie
else, I would need to directly call posix_memalign()

1609092474
companion_cube
scientes: no, you don't need a semaphore to implement that

1609092761
justin_smith
semarie: I guess the tedious but flexible approach is to @pointerCast to an array of the smallest alignment, and walk by bytes and fill? I guess this is error prone also

1609092770
justin_smith
I might be missing something obvious

1609107538
oats
if I want to compare pointers (i.e., less than, greater than, etc.) do I have to convert them to ints first?

1609107555
oats
gotta say, I was a little disappointed I can't do comparison on [*]T pointers :P

1609107607
ikskuh
oats, i think it's reasonable to convert to int first

1609107667
oats
fair enough

1609111619
fengb
Hmm... the underlying allocator implementations only receive a runtime alignment. Iâ€™m curious why the interface enforces comptime

1609112016
g-w1
I have a question about inferred error sets in stage1, on analyze.cpp:4826, in resolve_inferred_error_set, analyze_fn_body is called which calls analyze_fn_ir, which calls ir_analyze which seems to just analyze the function. where does actually returning an error type add to the error set? and am I missing something or does trying to use an inferred_error_set with resolve_inferred_error_set just

1609112019
g-w1
analyze the function in the body to get the error set, or does it add it to some type of resolve_queue? thanks

1609112635
andrewrk
fengb,

