1597449984
ifreund
yeah, once I make the codegen not a massive footgun and add some tests it should be pretty much good to go

1597449993
ifreund
I'm off to sleep for now though

1597450298
ronsor
`return 42;` I thought I was the only one that did that

1597450618
ifreund
andrewrk: afaik all files containing wasm in binary format should use .wasm, and I don't think they are usually made executable (maybe with wasi?)

1597450688
andrewrk
good night!

1597450764
ifreund
o7

1597451091
andrewrk
yeah wasi runs .wasm files

1597451116
andrewrk
in ELF, object and executable files are nearly identical, the main difference is the existance of an entry point

1597458966
daurnimator
libraries and executables aren't that different either are they?

1597459139
leeward
True fact.

1597461465
mkchan
just out of interest: how come \0 is not a valid escape sequence for 0?

1597465364
andrewrk
one way to do things: \x00 works just fine

1597469049
eleanor-nb
Hei

1597469060
eleanor-nb
Anyone know how pfg can be reached?

1597478117
josias
How can I convert a `[]u8` slice to a sentinel-terminated slice?

1597478493
daurnimator
josias: slice with `[from..to:sentinel]`

1597479526
josias
I keep getting the runtime errors `index out of bounds` or `sentinel mismatch`.

1597479676
daurnimator
sounds like your sentinel isn't correct?

1597479766
daurnimator
like... if you have `const a = "hello";` then `const b = a[0..3:'l']` would be valid; but `const b = a[0..3:'o']` would be sentinel mismatch

1597479770
marnix
Only by copying and adding the sentinel, I guess? But I don't know how, exactly. :-)

1597480341
josias
Oh. I guess I don't understand sentinels.

1597480411
josias
I am trying to resolve `error: expected type '[:0]const u8', found '[]u8'` when using a function in a library.

1597480996
josias
So my real question is: How can I convert `[]u8` to `[:0]u8`.

1597481463
daurnimator
josias: :0 means there is a null byte at the end => do you have a null byte at the end? can you put one at the end?

1597481476
daurnimator
if not, you'd need to make a copy of your slice, and put a null byte at the end of that

1597482544
josias
daurnimator: I can't figure out how to do that. Apparently `\0` is an invalid character.

1597482550
ifreund
\x00

1597502829
daurnimator
josias: you don't need '\x00' when just 0 works

1597506196
scientes
but sometimes '\x00' is more descriptive

1597509673
andrewrk
josias, what function are you trying to call that takes a [:0]const u8 ?

1597509915
josias
`prepare` in

1597509934
josias
So not a standard library function.

1597513002
andrewrk
you can pass a string literal to that

1597513104
andrewrk
josias, otherwise if you are constructing the value at runtime, you'll want to make sure there is a 0 byte at the end. I'm not sure where you are trying to put \0 - but you almost certainly don't need to do that

1597513164
andrewrk
for example if you are using std.fmt.allocPrint to construct the value, you could simply instead call std.fmt.allocPrint0

1597514531
hanetzer
hello. giving zig cc/friends a go and it isn't what I expected from da bloggo. zig cc fails on simple hello.c for lack of stddef.h, and zig build-exe --c-source hello.c --library c seems to not recognize my glibc version.

1597514567
hanetzer
unrecognized glibc version 2.31.0 unrecoginzed C abi

1597514915
andrewrk
hanetzer, can you provide a full output I can look at?

1597515004
hanetzer
its pretty much exactly that, capitalization aside.

1597515013
hanetzer
or do you mean the 'zig cc' output?

1597515086
andrewrk
what commands did you run, which commands produced that output, etc

1597515145
hanetzer


1597515246
andrewrk
hmm can you verify that your zig installation is intact? the only reason I can think of this happening is that zig thinks its installation is intact but it is in fact missing the folder that has stddef.h

1597515269
andrewrk
how is your zig installed and what version is it?

1597515349
andrewrk
hanetzer, thanks for the gist. you would be surprised how many people say that one problem is happening but when they show a paste of the command they ran, it's just a completely different situation

1597515355
hanetzer
0.5.0, installed from portage as dev-lang/zig-0.5.0

1597515391
hanetzer
I can provide a file listing in the package, if you'd like.

1597515401
andrewrk
so, 0.5.0 was released on 2019-09-30. that blog post is from 2020-03-24

1597515423
andrewrk
since then we've had a 0.6.0 release and then 4 months of work in master branch

1597515520
hanetzer
hrm. prolly need to bug the proxy maintainer then.

1597515615
hanetzer
can zig currently work against llvm-10?

1597515747
Snektron
0.6.0 uses llvm 10

1597515844
andrewrk
master branch also uses llvm 10, and the llvm11 branch is ready-to-go for 11 as soon as it is released

1597516047
hanetzer
gimme a bit then while I bump the ebuild and redo, then.

1597516160
hanetzer
oh, we don't have clang10 yet :<

1597516263
hanetzer
oh wait, we do.

1597517171
FireFox317
hanetzer, note that we have master builds available on

1597517198
hanetzer
if I wanted to grab binaries from the net I wouldn't be a gentooist ;)

1597517215
fengb
Thereâ€™s also a source tarball

1597517235
hanetzer
yep, which I'm working against.

1597518024
andrewrk
wow, vexu is just diving straight in all the way into stage2

1597518042
andrewrk
love it

1597518126
FireFox317
andrewrk, vexu isn't working for zls?

1597518135
heidezomp
the build on Azure on my PR #6046 timed out, should I force-push my branch to retry the build, do something else, or just let it sit?

1597518136
FireFox317
zfs

1597518147
FireFox317
zsf lol

1597518309
Nypsie[m]
heidezomp: Closing and re-opening the PR also triggers the CI pipeline

1597518368
heidezomp
Nypsie[m] I'll try that then, thank you!

1597518461
andrewrk
FireFox317, almost! we're just working out the details and then he's going to be able to bill hours

1597518485
FireFox317
andrewrk, damnn that is awesome!

1597518513
andrewrk
the contract doesn't require him to do any specific tasks though, I intentionally want it to be flexible so he can choose what he wants to work on

1597518623
FireFox317
yeah that makes the most sense indeed. Also the best for productivity for sure

1597518793
andrewrk
heidezomp, for future reference, another good way to make the CI retrigger would be rebasing against latest master

1597518813
andrewrk
anyway sorry for the trouble, I'll take a look at the PR :)

1597518826
heidezomp
thanks andrewrk, is that preferable? I just closed/reopened it

1597518842
heidezomp
thank you! :)

1597518855
andrewrk
yeah given the (annoying) circumstance I think a rebase would be the preferred workaround, since a rebase is kinda nice anyway

1597518872
Nypsie[m]
Ah, good to know. Shouldn't have recommended open/close then

1597518892
Nypsie[m]
I shouldn't*

1597518901
andrewrk
it's all good I appreciate that you were helping people :)

1597518915
heidezomp
do you want me to rebase anyway then? or just let the build that was just triggered happen?

1597518951
andrewrk
nah don't sweat it. you can always just comment, "the ci failure seems to be a glitch and not a problem with my PR" and I'll notice that

1597518985
andrewrk
I'll admit though that I generally assume a red x without such comment means it's still WIP

1597518995
heidezomp
okay, I already did that :D  thanks for the help!

1597519056
heidezomp
yeah that was what I was afraid of... hence why I decided to finally try and get over my anxiety of talking to people and join IRC ;)

1597519124
FireFox317
it's always nice to join the IRC :D

1597519191
heidezomp
nice to see all kinds of names I recognize from github for sure!

1597520560
andrewrk
it's nice to see you heidezomp :)

1597520846
heidezomp
ty, I'm feeling very welcomed!

1597524590
ifreund
what is the dbg_stmt instruction in stage2?

1597524776
pixelherodev
ifreund: tried a git grep?

1597524792
pixelherodev
Maybe check codegen's genDbgStmt?

1597524835
pixelherodev
It's currently related to DWARF, at a glance

1597524842
pixelherodev
Generates line number info, I think.

1597524846
hanetzer
beh. the whole clang/llvm 10 situation in gentoo is all borked atm.

1597524852
ifreund
It's something to do with dwarf, but I'm not clear exactly what

1597524893
ifreund
anyhow, I'm ignoring it for wasm currently, but was curious

1597524911
ifreund
it seems strange for dwarf-related stuff to be an instruction

1597525068
andrewrk
ifreund, it marks "statements" for line number purposes. you can safely ignore it if you don't care about debug info

1597525108
andrewrk
hanetzer, yes, yes it is. I reported the issue for the llvm 10 release candidate but they released anyway

1597525135
andrewrk
anyway I believe it is fixed in 11

1597525140
ifreund
ok, so there's one dbg_stmt instruction for every line of code roughly? that makes sense

1597525169
andrewrk
ifreund, yeah, but if you did for example `foo(); bar();` on the same line there would be 2 dbg_stmts

1597525177
ifreund
cool

1597525185
hanetzer
andrewrk: seems to be largely due to uh, flipping off that shared/static switch

1597525190
andrewrk
i'm also thinking about removing the `src` field from IR instructions, or at least making it a debug-mode-only field

1597525418
andrewrk
idea being that if you want to find out the source location of an instruction, you would have to pay attention to dbg_stmt instructions. entire point would just be to save memory / faster compilation

1597525473
andrewrk
hanetzer, dunno what to tell you. it works fine if you build the dependencies from source. I don't control how gentoo builds them in its packages

1597525482
ifreund
sounds reasonable, having both in Inst does seem redundant

1597525523
hanetzer
andrewrk: reasonable. honestly the issue is basically the difference between how we're building 9:10's clang stuff, not any fault on your end.

1597525662
ifreund
dunno if it helps at all, but however void packages llvm10 it works out of the box for zig

1597525683
ifreund
arch works if you pass an extra flag to cmake

1597525795
pixelherodev
ifreund: it's easy to fix the Gentoo ebuilds

1597525803
pixelherodev
IIRC the maintainer rejected it

1597525816
hanetzer
another thing is we're apparently zapping the lld header files for 10.x

1597525832
pixelherodev
yep

1597525889
pixelherodev
If the official overlay isn't going to support us, I guess I'll run one myself soon

1597526212
hanetzer
pixelherodev: reference on the rejection?

1597532407
BaroqueLarouche
I wanted to split platform libs and include_dir so it can be checkout out seperatly, in preparation for console platforms with NDA, so I did this:

1597532438
BaroqueLarouche
wish we could list directories at compile time and import zig files if the file exists or not

1597533010
hanetzer
well fook it. beauty of gentoo, I disagree with upstream on something, I can override it fairly easily.

1597533120
andrewrk
ifreund, is the liveness info useful at all for the wasm codegen?

1597533154
andrewrk
example:

1597533215
andrewrk
those flags tell whether the instruction is unreferenced, and whether each of the operands will ever be referenced again in the future

1597533242
andrewrk
for x86 add codegen it's really useful because you can use the info to re-use operand registers as the result

1597533316
ifreund
hmm, probably will be but I'm not very clear on how non-trivial wasm codegen is going to work yet

1597533340
ifreund
it's primarily stack-based but also has locals

1597533378
andrewrk
I think wasm locals essentially gives you infinite registers

1597533408
ifreund
yeah that's my understanding as well

1597533524
ifreund
reuse of these locals may not be as important then, though it would help keep the binary size reasonable

1597534646
andrewrk
agreed on both counts

