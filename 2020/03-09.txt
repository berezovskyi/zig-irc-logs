1583712008
nrdmn
Is it possible to have enum or union members with names that entirely consist out of digits?

1583712058
alexnask
@"1234" is a valid identifier :)

1583712194
alexnask
ŒëœÉ œÇŒµŒªŒª Œ±œÉ @"üòÇ"

1583712200
alexnask
Woops.. As well as @"üòÇ" *

1583712287
nrdmn
huh.. a minute ago zig didn't like that, now it does

1583712962
andrewrk
alexnask, we can probably get away with all vtable functions required to be comptime-known, right?

1583712992
andrewrk
if someone needed to call a runtime-known fn pointer in an interface implementation function, they could do it in their implementation rather than with the vtable pointer itself being runtime known

1583713305
alexnask
I think so. My current implementation also makes that assumption atm (it generates a type erased function that casts to the correct type and calls implementation function with always_inline)

1583713662
alexnask
Although the requirement for comptime-known functions could also be relaxed for generic functions only

1583713682
andrewrk
hmm interesting

1583714116
LakeByTheWoods
test-stage2 is failing for me complaining "zig/zig_cpp/libzig_cpp.a: file not found", is anyone else having this issue/should I open one?

1583714166
LakeByTheWoods
(or is there something that I goofed up?)

1583715714
andrewrk
LakeByTheWoods, that file is produced by `make`

1583715996
LakeByTheWoods
Hmm, looks like it's in zig/build/zig_cpp but it's looking for it in zig/zig_cpp

1583717764
adamkowalski
do we have something akin to numeric limits?

1583717774
adamkowalski
I want to find the maximum value for a particular type such as f64

1583717783
adamkowalski
and the smallest possible value for f64

1583717851
adamkowalski
nevermind, we have std.math.maxint and then std.math.f16max, std.math.f32max, etc

1583717909
fengb
Smallest float would be negative infinity right? üôÉ

1583718043
adamkowalski
you laught, but I actually need that as well

1583718067
adamkowalski
it doesnt' seem like have std.math.f16_Min

1583718143
adamkowalski
fengb: I could also use your help with this: git push --set-upstream origin reduce

1583718146
adamkowalski
whoops

1583718151
adamkowalski


1583718182
adamkowalski
for that forward function I have a very clear pattern, what tools does zig give me to remove that repetition?

1583718197
adamkowalski
the only thing changing from line to line is the type

1583718453
fengb
I‚Äôve mostly manually done it the way you did

1583718568
fengb
You could try using inline for / if chain but that might be harder to get right

1583719532
adamkowalski
dang, yeah I might have to try with inline for, because I have that pattern all over the place

1583719559
adamkowalski
I normally would have used macros in something like lisp, but I feel like we have a strong enough meta programming system in Zig it should be possible

1583726523
daurnimator
adamkowalski: grab the tag out of `x` and use that

1583765974
mq32
alexnask, i feel surveilled!

1583765989
alexnask
:P

1583765998
alexnask
Just checking my github notifications ;)

1583766084
mq32
hehe ^^

1583766105
mq32
but yeah i think "error{}!noreturn" is pretty expressive and the logic straightforward (imho)

1583766154
alexnask
Yes I agree, the intent seems clear to me as well

1583766369
fengb
I read that as ‚Äúerror not noreturn‚Äù

1583766520
mq32
fengb, how do you read "error{}!void" then? ;)

1583766527
alexnask
hah was gonna ask this

1583766575
alexnask
This should just generate a llvm function that returns the error set and add an unreachable at the bottom of the function imo

1583766680
andrewrk
^ correct

1583767795
discip
If one wanted to create a linter for Zig, would the std/zig files (ast.zig, parse.zig, etc.) be a good starting point?

1583767909
mq32
yeah, i think so. these are used with stage1 as well (if i'm right)

1583768066
alexnask
yes zig fmt uses those

1583768089
fengb
Pedantic: You mean stage 2. Stage 1 is in C++

1583768121
alexnask
Pedantic: stage 0 is in C++, stage 1 is a mix of C++ and zig

1583768132
mq32
alexnask: i thought so

1583768149
alexnask
zig fmt is implemented in zig as well as stage 1 stacktraces

1583768155
mq32
stage0 is full c++, but afaik we compile stuff with stage1

1583768156
alexnask
(I think those are the two uses, could be wrong)

1583768161
mq32
stage2 would be 100% zig

1583768202
discip
Zig fmt is a pretty similiar use-case to a linter so that's promising. Thanks everyone

1583768237
alexnask
cheers

1583769162
mq32
oh neat

1583769171
mq32
i'm reading stuff about the ARM calling convention

1583769187
mq32
> If the type of value returned is too large to fit in r0 to r3, or whose size cannot be determined statically at compile time, then the caller must allocate space for that value at run time, and pass a pointer to that space in r0.

1583769227
mq32
this means that Zigs default behaviour is quite suited for arm with result location and similar

1583772410
mq32
ooof

1583772419
mq32
how do i call with a new stack?

1583772423
mq32
with the new syntax?

1583772459
fengb


1583772536
TheLemonMan
what are you doing that needs you to switch the stack?

1583772540
mq32
huh

1583772552
mq32
TheLemonMan: I want to implement a two-task system on a cortex-m3

1583772555
mq32
(in C/C++)

1583772566
mq32
but i want to see how stack switching works in thumb

1583772574
TheLemonMan
write the task switching code using a piece of asm

1583772593
mq32
that's the plan

1583772661
mq32
first draw is cooperative, so "save all registers, change sp, return" should be sufficient

1583772662
TheLemonMan
using @call will absolutely bite you

1583772671
mq32
i just want to see how to change SP :D

1583772681
fengb
What's wrong with @call?

1583772685
TheLemonMan
`mov sp, rX` ?

1583772788
TheLemonMan
fengb, #3268

1583772841
fengb
Does this affect async functions too?

1583772915
TheLemonMan
hmm, the "new" async function implementations should just box all the locals in a context structure that's passed around

1583772958
fengb
I think andrewrk mentioned using async as a workaround for manually switching the stack

1583773071
mq32
TheLemonMan: do you know how to reference another element from inline assembler? looks like symbol names in GCC aren't shared between ASM and compiler?

1583773187
TheLemonMan
hm? the inline asm is in the same compilation unit as the other Zig code

1583773197
TheLemonMan
where are the other symbols defined?

1583773198
mq32
i'm in GCC/C++ right now, not zig (sadly)

1583773350
TheLemonMan
you should be able to reference the symbols in the C code and the linker will resolve them

1583773352
mq32


1583773357
mq32
yeah i thought so as well :D

1583773586
TheLemonMan
hm it compiles just fine here

1583773630
mq32
weird, maybe it's the link time optimization stuff?

1583773676
TheLemonMan
does the compiler give an error or something?

1583773693
mq32
just "undefined reference" in the linker step

1583773788
TheLemonMan
is  gpu_resumeStackPointer defined in the same file as the asm block?

1583773857
mq32
the code snippet is 1:1 from my source

1583774051
TheLemonMan
that's extra weird, what compile options are you passing to gcc?

1583774213
mq32
-ffunction-sections -fdata-sections -mthumb -mcpu=cortex-m3 -O3 -flto -ffreestanding -fomit-frame-pointer -fpack=struct=4 -mfloat-abi=soft -ffast-math -g -gdwarf-2

1583774309
mq32
ha, compiles now

1583774318
mq32
put the assembler stuff into its own file, now it works

1583774489
mq32
TheLemonMan: if i'm reading the docs right, "push {r0-r7,lr}" means that lr is not at the "top" of the stack, but at the position at the start of the pushing?

1583774607
TheLemonMan
yeah if I enable the LTO I cannot get it to compile too, for some weird reason it's also spitting a slew of unrelated errors if I do so :\

1583774629
mq32
crazy

1583774637
mq32
i should file a bug tomorrow

1583774647
TheLemonMan
the lr goes last

1583774668
TheLemonMan
so at SP-8*4

1583774676
mq32
oh wait

1583774689
mq32
> Registers are stored on the stack in numerical order, with the lowest numbered register at the lowest address.

1583774701
mq32
lr is r14, so it would have the highest address?

1583774998
TheLemonMan
oh yeah, it goes "backwards"

1583775089
TheLemonMan
I've spent too much time working on non-ARM CPUs, some details are blurry :(

1583775127
mq32
yeah, i can imagine

1583775135
mq32
and yeah, i'm actually reading the docs! :D

1583775178
TheLemonMan
at some point in time I could really tell you every 6502 opcode from its hex value heh

1583775218
mq32
heh, neat!

1583775234
mq32
i'm not the dude for 6502, and i wasn't alive back then :D

1583780058
mikdusan
hmm do we have anything like an `@asMaybe(T, expr) ?T`

1583780103
shakesoda
mikdusan: don't things coerce into optionals anyway?

1583780117
shakesoda
I can certainly assign normal things to them

1583780141
mikdusan
I want to check if a coerce can happen

1583780231
andrewrk
mikdusan, I think that would be a code smell

1583780571
mikdusan
we need a unicode for that

1583781586
fengb
üí©

1583781602
mikdusan
well ok. I was thinking like a pinched nose

1583781665
fengb
ü§èüëÉ

1583781692
fengb
Looks like I'm making fun of the size of the nose

1583783735
jaredmm
Oh, that's a nose.

1583784859
pixelherodev
Hmm, how would one do optional arguments via a tuple arg?

1583784883
pixelherodev
@hasDecl(@TypeOf(args), "title") is giving false even when called with `(.{.title = ""})`

1583785193
mikdusan
bug?

1583785255
mikdusan
`@compileLog(.{ .num = 1 })` output is `| undefined`

1583785255
fengb
That's a field, not a decl

1583785297
mikdusan
fengb: with the goal :)

1583785302
pixelherodev
Oh right!

1583785306
pixelherodev
fengb, thanks!

1583785451
marijnfs
I solved the serializer issue I was having like this:

1583785521
mq32
marijnfs, why are you using a slice of streams?

1583785989
mq32
marijnfs: i would code it like this:

1583786019
mq32
except that i would additionally pass the buffer allocator from the outside to line 14 init()

1583786928
pixelherodev
Working on a simple GUI wrapper over Sokol + Nuklear for Zig while I take a short break from ZigIRRat to avoid burnout

1583786934
marijnfs
mq32: interesting

1583786949
marijnfs
the std.BufferOutStream and Serializer don't need a deinit?

1583786958
mq32
pixelherodev: don't overdo yourself

1583786962
marijnfs
I wanted to keep it local to avoid that overhead, and then the issues started

1583786972
mq32
it didn't compile with deinit() "function not found"

1583786995
mq32
"it compiles" is not a good indicator of "my code is right", especially in zig

1583787022
mq32
your code did never call "my_serializer.deinit()" ‚Üí you never deinitialized your buffers, ... and also never freed the memory

1583787100
alexnask
you can use std.testing.testing_allocator for testing, it will detect leaks

1583787116
mq32
oh yeah

1583787120
mq32
this is such a great feature

1583787173
marijnfs
mq32: ah your right, so it didn't even try to compile that function

1583787195
mq32
yep

1583787541
nrdmn
if I have an `extern enum(u8) { .A = 1, .B = 2 }` and write 3 to it, would that be UB?

1583787743
andrewrk
nrdmn, it would make the value undefined, unless the enum is non-exhaustive:

1583787761
andrewrk
undefined values cause undefined behavior under well-defined cincumstances

1583787766
andrewrk
*circumstances

1583787779
nrdmn
andrewrk: is this necessary for extern enums?

1583787798
andrewrk
all enums including extern enums are exhaustive by default

1583788259
pixelherodev
mq32, I know, that's why I'm doing this :)

1583788275
pixelherodev
If I have a few projects and I swap between them, *and they have real purposes*, I can get work done

1583788283
pixelherodev
If I focus on too many projects or too few, I burn out on all of them

1583788374
pixelherodev
ZigIRRat is meant to (hopefully) become a part of stage2 eventually (or at least, part of

1583788384
pixelherodev
The GUI library is for a game I'm making

1583788399
pixelherodev
I was going to just use Sokol directly but I hate

1583788404
pixelherodev
I can

1583788423
pixelherodev
So if I make a simplistic high-level wrapper and avoid touching it, and that wrapper happens to be useful, might as well publish it

1583788437
pixelherodev
Also planning on finally following up on the Zig post I wrote months back

1583788903
marijnfs
Hmm Why am i getting: Code Generation [925/1600] std.array_list.AlignedArrayList(std.build.LinkObject,Build Dependencies...Unrecognized glibc version: 2.31.0 unrecognized C ABI

1583789012
andrewrk
glibc 2.31 support was added in 3ff2381042104d0626545fbc655cb6d8a04ccd0b (march 4th)

1583789048
andrewrk
the issue for using the newest-supported glibc version when the detected version is unavailable is

1583789120
marijnfs
andrewrk: ah thanks, can I somehow change the target or something? Or just wait for a fix

1583789296
andrewrk
the fix has been in master branch for 5 days - you should be able to git pull or download a master build

1583789323
TheLemonMan
andrewrk, I think I'm hitting bug in the caching mechanism

1583789352
andrewrk
you have piqued my interest

1583789393
marijnfs
andrewrk: ah your right, my cmake-prefix was screwed up

1583789431
TheLemonMan
if you compile the same file twice, the first time with `zig build-exe -mcpu cortex_a8+thumb_mode  -target thumb-freestanding --cache off file.zig` and after that as `zig build-exe -mcpu cortex_a8 -target thumb-freestanding --cache off file.zig` you can see that compiler_rt and c are not recompiled due to the different flags

1583789459
TheLemonMan
this way you end up with a mix of arm and thumb code in the second binary

1583789463
andrewrk
yikes

1583789480
TheLemonMan
I don't really know why thumb-freestanding keeps producing ARM code :\

1583789500
TheLemonMan
if I force the thumb code generation with +thumb_mode it works correctly

1583789511
andrewrk
the cache hash is produced here:

1583789565
andrewrk
TheLemonMan, do we need to enable +thumb_mode by default for the thumb architecture?

1583789602
andrewrk
in this case, why do we even have a thumb architecture, seems like it should just be a cpu feature

1583789605
TheLemonMan
no idea, I remember that specifiying thumb-freestanding was enough to get thumb code

1583789613
mikdusan
don't know if related... seem to recall way back someone mentioning that compiler_rt args when passing mcpu stuff not consistent but never tracked it

1583791930
marijnfs
Where does @import search, can I add zig 'include' directories to the zig builder?

1583792133
andrewrk
marijnfs, you want addPackagePath

1583792239
marijnfs
andrewrk: I indeed want that

1583792275
andrewrk
whatever name you choose will be available with @import("name")

1583792693
TheLemonMan
andrewrk, this LLVM PR

1583792704
marijnfs
andrewrk: that's pretty sweet

1583792878
andrewrk
TheLemonMan, per-function basis! it looks like cpu features / architecture might be something we need to support overriding at a per-scope level

1583793267
mikdusan
andrewrk: if I enable --verbose-llvm-cpu-features, build an exe with `-mcpu native` .... then build again with `-mcpu native-avx` should I expect to see the "+avx" change to "-avx" ?

1583793291
andrewrk
mikdusan, yes

1583793538
mikdusan
andrewrk:

1583793644
andrewrk
mikdusan, it might be e.g. avx2 that is dragging avx back in because avx2 implies that you also have avx

1583793672
mikdusan
ah ok there's some inter-relation

1583793683
andrewrk


1583793746
andrewrk
what about with native-avx-avx2

1583793772
mikdusan
still no joy. tried { -avx-avx2, -avx2-avx }

1583793825
andrewrk
the next thing to double check is in stage2.zig that cache_hash is getting populated correctly

1583793842
andrewrk


1583793871
andrewrk
(you are using zig and not zig0 right?)

1583793875
mikdusan
correct

1583793953
mikdusan
yeah I'm not getting compiler_rt rebuilding on any `-mcpu native` or absence of, or `mcpu native-avx2` changes

1583793968
mikdusan
I'll look further. sounds like this is what LemonDoood is hitting

1583793985
andrewrk
oh another thing to check as well, that `zig builtin` is affected by those flags

1583793993
andrewrk
zig builtin -mcpu=native-avx

1583794060
andrewrk
I can reproduce this actually. my `zig builtin` is not removing avx or avx2 with -mcpu=native-avx-avx2

1583794078
mikdusan
yeah no joy. it's not even parsing for correctness the toggles. I put in a bogus one, no error

1583794086
andrewrk
ok so not a cache error then

1583794104
andrewrk
looks like a problem in CrossTarget.parse

1583794130
andrewrk
huh weird, that's a recent regression. it used to print the list of cpu features with descriptions if you typod

1583794257
mikdusan
here's a hint: if I use the `-target` option on then -mcpu features are checked

1583794370
andrewrk
I see the logic flaw in stage2.zig:682

1583794380
andrewrk
but it's still not removing avx/avx2

1583794473
BaroqueLarouche
ohhh interface language feature is in the work :)

1583795062
frmdstryr
Can someone explain this one to me

1583795096
alexnask
I would personally prefer using the same initialization syntax as other containers instead of something like @implement

1583795157
alexnask
Like `OutStream { file }` (and have the compiler typecheck and pass the appropriate functions as well)

1583795245
fengb
frmdstryr: the compiler can‚Äôt infer nested switches

1583795273
frmdstryr
fengb: ah, ok, will do it another way then, thanks

1583795284
alexnask


1583795298
alexnask
You just need to @as the integer literal in this case

1583795332
fengb
I think the longterm fix is to cascade the result location type into nested conditionals

1583795439
andrewrk
fengb, it can, but there are some complicated cases that have bugs

1583796440
andrewrk
alexnask_, that branch is just a rough sketch. I'll be sure to put it up for review when I feel like I have a workable plan

1583796460
alexnask_
Sure, I understand :) Just saying

1583796538
andrewrk
that syntax needs 3 components: (1) comptime interface value (2) runtime context value (3) comptime vtable

1583796790
andrewrk
not sure if this is going to work, this is exploring allowing interfaces to have inferred error sets

1583797209
nrdmn
oh well, looks like I get to change a lot of lines in std/os/uefi because of the non-exhaustive enum syntax

1583797229
nrdmn
it didn't exist when I wrote most of the code

1583797679
andrewrk
when you wrote the code, all enums were exhaustive

