1603670529
kristoff_it1
the best you can do is lisp, but even then it's still macros

1603670750
jabb
carp is possible something

1603670790
jabb
but other lisps you lose being close to the metal

1603670803
jabb


1603670907
ifreund
yeah, zig is awesome

1603671049
frmdstryr
How can I get the current thread name?

1603671224
frmdstryr
Oh, nvm std.Thread.getCurrentId

1603671269
andrewrk
hello

1603671272
jabb
yo!

1603671291
jabb
how're you?

1603671404
andrewrk
I'm ok. I won't be able to be at full productivity until I get this situation worked out, but I'm not in any physical danger anymore

1603671433
andrewrk
I have a few hours to spare now to work towards the release :)

1603671476
jabb
nice. yeah i saw it on twitter. sucky situation. glad you're okay

1603672447
ifreund
good to see you back on IRC, been a litte worried

1603672695
g-w1
One thing that I got confused about was in rust `variable: &Type` is equavalent to `Type *variable`. But in zig it is equavelent to `variable: *Type` why is this?

1603672713
g-w1
in the second example i am reffereing to c

1603672792
ifreund
I'm not sure I understand the question

1603672810
a92
Zig chose Rust-like syntax for variable/parameter declaration but C-like syntax for pointer types. Languages do strange things sometimes.

1603672840
g-w1
I am confused why rust uses &Type and zig uses *Type

1603672866
a92
Just syntax choices; they don't have to be the same

1603672867
g-w1
It made sense with c because the * was on the variable so i thought it was equavalent to the & being on the type

1603672870
g-w1
oh

1603672872
g-w1
ok

1603672924
ifreund
oh rust has * pointers too, they're different though

1603672946
andrewrk
g-w1, we used to have &Type for pointers

1603672966
g-w1
ok

1603672976
g-w1
it makes sense that its just a syntax decision

1603672983
andrewrk
we had to change it because in zig types are values and so &T was ambiguous

1603672997
g-w1
that makes sense

1603673650
daurnimator
TIL

1603677376
Axiomatic
@kandinski np ... its crazy that even a nominally simple concept like determining the sign of a numeric quantity is so complex, but there you have it

1603677711
ifreund
man, why did someone add zig support to code.golf

1603677726
ifreund
i have wasted too much time already :D

1603677762
ifreund
I can't figure out how to drop 2 more characters and it's annoyingme

1603678350
andrewrk
does it let you see others' solutions?

1603678401
pixelherodev
andrewrk: what happened, are you okay?

1603678602
andrewrk
let's keep it on topic here but feel free to dm me

1603678867
ryuukk_
ChanServ has kicked ryuukk__ from #zig (Banned: bad vibes)

1603678871
ryuukk_
what does that mean?

1603678933
ryuukk_
i have very unstable connection since few weeks ago, server is probably flagging me as bot

1603679077
Axiomatic
Odd that anyone even programmed a bot to detect vibes.  Seems like it would be difficult to debug...

1603679134
pixelherodev
Obviously, the first sign of bad vibes is questioning the bot's decisions ;)

1603679143
pixelherodev
I for one welcome our new glorious bot overlord

1603679225
Axiomatic
(Praise the Bot)

1603679296
ifreund
andrewrk: it lets me see how many characters/bytes they used, but not their code

1603679319
andrewrk
interesting decision. I think it makes sense although it's a shame, it seems like a missed learning opportunity

1603679321
ifreund
I am 2 bytes away from first place for the "beer on the wall" problem

1603679328
daurnimator
ifreund: link?

1603679373
ifreund
daurnimator:

1603679461
ifreund
honestly I'm happy with the way they did it. It's the best way to encourage competition I see

1603679491
ifreund
I know that improvement is possible but I have to arrive at the solution myself

1603679633
pixelherodev
ifreund: can you use the standard library in that?

1603679645
pixelherodev
Or is it language only?

1603679674
ifreund
you can use the std, you need to print to stdout :P

1603679679
pixelherodev
Ah right

1603679680
fengb
What if I make a PR to stdlib to solve this? 🤔

1603679687
pixelherodev
... have you tried using compression? ;P

1603679691
fengb
std.beers()

1603679697
ifreund
that's basically what I did yeah

1603679707
ifreund
though I kinda hit a dead end

1603679782
ifreund
could just be that my by-hand compression wasn't optimal

1603679925
Guest47
Ok, so i checked log, and i got banned by individual, that's OK, i would have prefered to be told prior to that so i could perhaps work on what the "issues" i have caused, that would have been more polite and more adult from whoever banned me, i will not come back since, apparently, sharing 1st experience or frustrations is too much for whoever

1603679926
Guest47
decided to ban me, and that's ok, i respect that choice, even if i disagree with it, but that's life, i wish good luck to this project, and maybe consider speaking to whoever banned be to maybe be less emotive

1603680040
ifreund
Guest47: mostly likely your tone regarding the docs a couple hours ago

1603680043
Guest47
(ryuukk is my username on IRC, just to be precise)

1603680096
ifreund
you came across quite entitled

1603680111
Guest47
that is private document, draft that i decided to share with you, i had warned about it being my ranting over frustration, but it's okay, i shared it with you it is my fault, anyways, i don't want cause more issues, i will just leave and respect the ban inflicted

1603680915
andrewrk
thank you I appreciate that. if you want to, come back in about a year, and let's see how things go. 211 people in this channel, there is a high expectations of behavior

1603681112
andrewrk
getting banned from this channel doesn't mean you are a bad person. this channel is an experiment with a trigger happy ban hammer

1603681160
andrewrk
and I know that's a juicy subject but let's resist meta discussion temptations and redirect the topic back to zig coding

1603681688
daurnimator
ifreund: beat you :)

1603681959
ifreund_
daurnimator: nicely done :)

1603682003
ifreund_
it’s 4am here so i’m gonna have to sleep before my brain stops working entirely:D

1603682031
andrewrk
good night

1603682068
daurnimator
not sure if I should share my answer? I guess that's not in the spirit of the game...

1603711172
kandinski
hi folks, I have an array of c pointers into a u8 buffer (pcre2 matches into a string), and I want to turn it into a slice of slices of u8. I guess I could write C-like code, but I was hoping I could cast the buffer into an array of 2-pointer structs, and then iterate through it using a function on the 2-pointer struct to output a Zig slice.

1603711406
kandinski
I'd appreciate a tip on how to proceed. I don't know if I'm complicating my life too much.

1603711561
ifreund
hmm, I'm not sure if you can do this in place without UB as I don't think slices have a well defined memory layout

1603711700
ifreund
yeah, "packed" slices aren't planned:

1603711736
kandinski
ifreund: yeah, I misspoke, I need to do this in two steps

1603711738
ifreund
If you want to transform it to a slice of slices you'll need to allocate your own array then and copy the data over

1603711774
kandinski
one, cast the array of c pointers into a known-length array of zig structs

1603711788
kandinski
then I can iterate over it and generate the second array as you say

1603711805
ifreund
i'd skip step one, it seems like an overcomplication

1603711811
ifreund
just iterate 2 at a time

1603711817
kandinski
for every pair of c pointers, I do whatever I need to generate a []u8, and I copy that to the mmh

1603711820
kandinski
sure

1603711826
kandinski
you're right, of course

1603711874
kandinski
I know the number of captures, so I can:

1603711909
ifreund
it'd be need it this were doable in place though, a packed slice would be exactly the size of 2 pointers

1603711910
kandinski
- build an array of slices of the subject string

1603711915
ifreund
s/need/neat/

1603711931
kandinski
- rewrite each slice's pointer and length as I iterate over the pcre2's ovector

1603712022
kandinski
well, ifreund it's not that easy because my zig function can allocate and return an array on the stack, and then free the pcre2 ovector which is in the C heap

1603712041
kandinski
thanks for helping me work through it

1603712054
ifreund
the length is known at compile time?

1603712061
kandinski
no

1603712067
kandinski
it's known at runtime only

1603712096
kandinski
because it's as long as the number of matches/captures

1603712109
ifreund
you probably need to allocate the zig array of slices then

1603712122
kandinski
why so?

1603712140
ifreund
stack variables must have a compile time known size

1603712145
kandinski
I thought zig could make caller allocate

1603712146
kandinski
aaah

1603712149
kandinski
so it goes

1603712164
kandinski
so yes, it will be compile time known, because it will be a pointer into heap memory

1603712170
kandinski
so it goes

1603712178
ifreund
just take an allocator as a parameter

1603712201
kandinski
for now I'm not even doiong that, because pcre2 uses the c heap already

1603712216
kandinski
(there's a way to pass an allocator to it, but I'll figure that out once I get it working)

1603712236
ifreund
then just hardcode std.heap.c_allocator for now I guess :D

1603712265
kandinski
yup, I already have a deinit() fn cleaning up after pcre2, it might as well clean up after me

1603712268
kandinski
thanks

1603712285
nyaayaya
Is it possible to do something like this in Zig?

1603712286
nyaayaya
const a=1, b=2, c=3;

1603712286
nyaayaya
(instead of const a=1; const b=2; const c=3;) @.@

1603712307
Nypsie[m]
No

1603712326
kandinski
(that was silly of me: of course caller can only stack-allocate values of compile-time-known size)

1603712343
nyaayaya
oh, ookie ^^

1603712344
nyaayaya
thank you

1603712351
ifreund
cosnt out = std.heap.c_allocator.alloc([]u8, N); var i: usize = 0; while (i < N) : (i += 2) out[i/2] = in[i][0..in[i+1]-in[i]]; return out;

1603712371
kandinski
ifreund: thanks

1603712377
Nypsie[m]
nyaayaya: Would be nice, but goes against Zig's zen :)

1603712426
nyaayaya
Nypsie[m]: Ah, right. "Only one obvious way to do things."

1603712440
ifreund
yep :)

1603712469
ifreund
also, where would you put the types?

1603712531
nyaayaya
const a: u32 = 1, b: u32 = 2; ?

1603712578
ifreund
hmm, is a for loop cleaner? for (out) |*o, i| o.* = in[2*i][0..in[2*i+1]-in[2*i]];

1603712599
kandinski
ifreund: of course

1603712648
ifreund
nyaayaya: yeah I guess, but then you loose out even more on readability

1603712654
kandinski
I couldn't figure how to iterate through in, but I don't need to

1603712667
kandinski
well, I can iterate through out and make the iteration code more readable

1603712674
ifreund
and without great benefit as you can't "share" the type between the variables

1603712701
kandinski
I think I can figure it out now

1603712705
ifreund
:)

1603712742
kandinski
or I can use pointer arithmetic against the start of the regex target buffer, and just slice the buffer

1603712784
kandinski
anyway, thanks very much

1603713420
nyaayaya
>

1603713420
nyaayaya
ifreund: yay, solved it (444 bytes). but geh, if there would be a way to join const declarations together :(

1603713540
ikskuh
uuuh, let me join in! :D

1603714022
Nypsie[m]
This looks fun! I will try it too tonight

1603714053
earnestly
That website does not show any code for me

1603714058
earnestly
Perhaps that's the point

1603714107
Nypsie[m]
That is indeed the point :P

1603714486
ifreund
nyaayaya: congrats! I've decided that I suck at golf :P

1603714499
ifreund
gonna get back to work on river and related projects

1603714529
fengb
Nah, practice makes perfect :P

1603715115
ikskuh
okay, i have a working solution, 799 bytes :D

1603715547
kandinski
hey ifreund, I got it working. The two first comments in this are just for you, but the rest is because I prefer to let the compiler do the code golf and I write as readable as possible:

1603715567
kandinski
ifreund: tips on style and performance very welcome

1603715760
g-w1
why does standardReleaseOptions() require libc

1603715782
g-w1
I am trying to write an only static executable and it is saying stuff like `undefined reference to memcpy`

1603715808
g-w1
and the weird thing is I just changed the name of the library and now it requires libc

1603715829
ikskuh
g-w1, standardReleaseOptions should not require libc

1603715835
ikskuh
can you show the build fle?

1603715837
g-w1
yes

1603715841
g-w1
lemme do a scrot

1603715904
ikskuh
ifreund: did you use std.debug.print or proper stdout writing?

1603715939
g-w1


1603715951
g-w1
ill put pastebin of `nm zig-cache/lib/libstd.a`

1603716005
ikskuh
looks fine so far

1603716015
ikskuh
can you post the full error output?

1603716044
g-w1
yeah

1603716106
g-w1
here is the output from nm

1603716114
g-w1
you can see it uses libc symbols

1603716151
kandinski
ifreund: this is still rough af, and I only plan to implement just what I need for now and move on to the rest of the make-a-lisp project before coming back and cleaning up, but I'm pretty chuffed of the progress in just one week and the two weekends at both sides:

1603716175
kandinski
wat

1603716225
g-w1
i fixed this problem before by turning on release mode but I shouldn't have to do that, right?

1603716230
g-w1
here is the ld errorss

1603716294
ifreund
ikskuh: you need to write to stdout :/

1603716298
ifreund
which takes a lot of bytes with zig

1603716304
ikskuh
:D

1603716308
ikskuh
yeah i figured

1603716336
g-w1
do you have an idea why it is linking against something else, maybe libc

1603716413
ikskuh
it is not linking against libc

1603716424
ikskuh
but the compiler is spilling mallocs as optimizations for larger copy operations

1603716446
g-w1
interesting.

1603716466
ifreund
kandinski: looking good :) I'm sure you'll find thing you can improve upon through real-world usage

1603716468
g-w1
so I guess I have to turn on release mode to get rid of it

1603716482
ikskuh
g-w1: i don't think that will help

1603716488
ikskuh
it really depends on your code

1603716499
g-w1
i helped before, but I wanted to have standard mode, and then it broke again

1603716507
ikskuh
memcpy and stuff are part of compiler_rt

1603716514
ikskuh
you might need to bundle/link against it as well

1603716520
ikskuh
lib.bundle_compiler_rt = true

1603716522
g-w1
ok

1603716524
ikskuh
should do the job

1603716533
kandinski
ifreund: sure! I'd like to eventually have something others can use, but for now I feel this is a well shaved yak and I'm going to move on as long as I get the results I need

1603716535
g-w1
i think it works with builtin.Mode.ReleaseFast

1603716545
kandinski
ifreund: thanks so much for your support and advice

1603716679
ikskuh
ha, finally sub-600 :)

1603716754
g-w1
well now it works with release-fast mode enabled. ill file this in the back of my head as a potential bug

1603716843
ifreund
kandinski: no problem!

1603716850
ikskuh
ifreund: the one thing that bugs me is that darn "No more bottles" ;D

1603716859
ikskuh
g-w1: does it work with standard mode?

1603716862
ikskuh
so Debug=

1603716883
ifreund
ikskuh: I got bored of that one, I'm working on the brainfuck one now :D

1603716907
ikskuh
heh

1603716912
ikskuh
will check that out as well

1603716928
g-w1
do you think this is the best way to embed zig in a rust project?

1603716939
ikskuh
but right now, i want to get at least down to  ~550

1603717467
ifreund
damn, daurnimator got down to 414

1603717473
ifreund
I'm so curious

1603717492
ikskuh
yeah, me too

1603717503
ikskuh
i just discovered something which requires an issue on github though

1603717712
g-w1
what?

1603717751
ikskuh
we're playing code golf

1603717762
g-w1
I mean what reqires an issue

1603717785
ikskuh
oh

1603717790
ikskuh
you'll see :D

1603717925
ikskuh
EAGAIN A  system-imposed limit on the number of threads was encountered.  There are a

1603717925
ikskuh
number of limits that may trigger this error:

1603717928
ikskuh
sounds about right

1603717992
ikskuh
g-w1:

1603718026
virkony
ikskuh: true, man says that. but I had impressions that EAGAIN or something like that can occur when syscall interrupted

1603718028
g-w1
thanks

1603718056
g-w1
nice issue!

1603718060
ikskuh
virkony: this yields ERESTARTNOINTR :D

1603718081
virkony
my bad, I mistook it for EINTR :)

1603722337
ifreund
ok, I don't understand this. My brainfuck golf produces the exact output that is expected but it gets marked as failing

1603722576
ifreund
ugh, I forgot to skip argv[0] but it wasn't producing any output as there are no brainfuck symbols in it normally

1603722647
tane
are you testing your implementation of a BF interpreter?

1603722707
ifreund
tane: I'm playing this:

1603722760
g-w1
is there a way to do a for loop for a known amount of iterations without creating an array?

1603722826
dutchie
var i: usize = 0; while (i < numIters) : (i += 1) { ... }

1603722856
g-w1
ok

1603722862
ifreund
there's also a hacky way to use a for loop with a slice of 0 bit types

1603722862
g-w1
you have to create a variable

1603722873
ifreund
but a while loop is the right answer

1603722878
g-w1
ok

1603722919
dutchie
it feels like zig's while look with a continue expression is closer in spirit to C's for

1603722923
dutchie
loop*

1603722948
ifreund
it's kinda halfway between C's while and for

1603723357
tane
I kinda dislike that the loop indices litter the enclosing namespace, similar dependence for "err" variables in go, making it hard to copy code segments around

1603723455
g-w1
could you enclose everything in a {}

1603723474
tane
sure

1603723697
travv0
yeah one thing i wish was in zig is `while (var i: usize = 0...) {...}` syntax so that the i is only accessible inside the loop

1603723731
travv0
but obviously that's not consistent with how variable initialization works anywhere else in the language

1603723792
ifreund
I've slowy come to realize that it doesn't matter too much to me in practice

1603723883
nyaayaya
hmm

1603724111
nyaayaya
zig\lib\zig\std\os\windows.zig:1442:20: error: unable to evaluate constant expression

1603724111
nyaayaya
.x86_64 => asm volatile (

1603724192
nyaayaya


1603724199
nyaayaya
works on FreeBSD

1603724200
nyaayaya
:(

1603724264
nyaayaya
(on Windows: Zig 0.6.0+91a1c20e7, latest "master" build)

1603724541
nyaayaya
(full stacktrace:

1603724659
ifreund
#1 in brainfuck :)

1603724665
nyaayaya
wowowo

1603724701
nyaayaya
I've tried to solve Fizzbuzz... but got stuck with this weird Windows error

1603724706
nyaayaya
:(

1603724834
ifreund
maybe try using the % operator instead of @mod?

1603724882
nyaayaya
hmm, but how is this related to [.x86_64 => asm volatile (]?

1603724899
nyaayaya
because it looks like it's caused by getStdOut.writer()

1603724903
ifreund
nvm, just looked at the stack trace

1603724920
g-w1
I am getting expected type *std.mem.Allocator found *const std.mem.allocator

1603724922
g-w1
what am i doing wrong

1603724943
nyaayaya
(also wouldn't it cause that error with int_comptime and u8?)

1603724947
dutchie
you need to declare your allocator as a var not a const

1603724956
ifreund
maybe passing the allocator by value instead of by pointer?

1603724960
g-w1
oh

1603724962
g-w1
ill try that

1603724999
g-w1
it doesn't work

1603725065
ifreund
paste the code somewhere?

1603725076
nyaayaya
[

1603725180
ifreund
that doesn't make much sense

1603725194
Kena
Hey dutchie, why do you declare a `usize` to iterate through a for loop insteand of a integer? I do not grasp the role or at least use case for usize data type.

1603725229
TheLemonMan
nyaayaya, the compiler is trying to execute your code at compile-time

1603725238
TheLemonMan
try replacing `const p` with `var p`

1603725247
nyaayaya
oh

1603725289
nyaayaya


1603725303
nyaayaya
like this?

1603725314
TheLemonMan
yep

1603725329
g-w1
here is the error

1603725340
fengb
Kena: usize is the “natural” pointer size of the architecture. It’s what slices use internally

1603725365
fengb
It’s the equivalent of size_t from C

1603725399
nyaayaya
TheLemonMan: whoa, it works now. Thankiee

1603725414
Kena
But I thought a pointer point to a memory address, how it is related to a size?

1603725440
TheLemonMan
Kena, it's wide enough to represent any object in memory

1603725443
nyaayaya
also it doesn't warn when `var p [...]` is outside main() (top-level declaration?)

1603725445
fengb
Pointers have a fixed size in CPUs, 32 bit in x86 and 64 bit in x64

1603725450
ifreund
a memory address has a size, usize is that size

1603725460
nyaayaya
and prints the same error (unable to evaluate constant expression)

1603725470
Kena
told you I was a noob :D  Thank you.

1603725471
fengb
On modern CPUs it’s usually the fastest and most natural size

1603725481
earnestly
Kena: (If you want to rabbit hole:

1603725510
fengb
(Note that this is not true for older / embedded systems)

1603725526
TheLemonMan
that's not always true, it also depends on the ABI. eg the x32 abi is the usual x64 one with 32bit pointers

1603725573
g-w1
figured it out (too many consts) :)

1603725622
nyaayaya
TheLemonMan: uhm, [

1603725631
nyaayaya
why e.e

1603725649
TheLemonMan
because getStdOut is implemented differently on Windows

1603725668
fengb
Windows is the reason it’s even a function :(

1603725675
TheLemonMan
on unix-derived systems we simply use the STDOUT_FILE handle

1603725684
Kena
Does it mean a u128 integer cannot be pointed to?

1603725708
TheLemonMan
on Windows we have to scavenge into the thread-local kernel block to get the std{in,out,err} handles

1603725721
dutchie
Kena: usize is an integer type. you can loop with any integer you want

1603725722
nyaayaya
huhh

1603725730
earnestly
Kena: It refers to the range of memory it can point to, e.g. on 32bit systems a pointer can only address up to 4G

1603725735
nyaayaya
Thank you again ^^

1603725744
earnestly
Kena: I.e. 2^32

1603725787
earnestly
(2^32-1 if you want to start at 0)

1603725888
Kena
Thanks a lot, I'm happy to learn

1603725925
dutchie
half-tempted to benchmark looping with different sized integers to see if it makes any difference

1603726144
ifreund
it would be very dependant on your exact cpu and whatever llvm decides to do

1603726461
earnestly
Kena: (Though keep in mind that a pointer also typically bound by PTRDIFF_MAX if you wish to do pointer arithmetic)

1603726495
earnestly
Kena: This is a pretty nice article as it also gives you a table of the data models:

1603727365
Kena
I'm grateful earnestly, but it deal about size_t and ptrdiff_t, those are not primitive types in Zig, are they?

1603727397
earnestly
Kena: They are specific to the machine

1603727436
earnestly
Kena: zig has their own versions of them

1603727510
Kena
Allright, I'd rather read it now :)

1603727634
earnestly
Kena: Although zig uses slices instead of pointer arithmetic for addressing arrays, but what those things represent are the nature of the beast if you want to understand a bit about what's going on under the hood

1603727710
Kena
I would love to as I want to use a non-GC low level language ^^

1603727756
ifreund
also Zig isn't perfect yet, see

1603727819
earnestly
ifreund: Issues like this make me appreciate Ada more

1603727823
earnestly
Even though I don't use it

1603727984
earnestly
Ada with comptime would be delightful (which is sort of achieved with spark but it's a hassle and far more involved)

1603729350
g-w1
is there a way to remove all items from an ArrayList

1603729364
ifreund
foo.items.len = 0;

1603729378
g-w1
nice

1603729391
g-w1
i like how an array list also gives u the raw memory

1603729445
ifreund
yeah, it has quite good ergonomics but doesn't hide any of the details from you

1603729460
Kena
Does reassign the length to 0 need free the manually memory somewhere? like deinit or something

1603729469
Kena
freeing*

1603729483
ifreund
Kena: no, the capacity field traks how much memory is allocated by ArrayList

1603729506
ifreund
you shouldn't set that one manually

1603729528
Kena
Allright :)

1603729535
justin_smith
there might be an issue with nested collections, as with any arbitrary container

1603729626
ifreund
yes, if your elements own memory setting items.len to 0 would leak

1603732219
Kena
In the doc regarding to the optional pointer, please why does the address 0 cannot have a value? It may be a stupid question.

1603732332
Kena
It has value null I admit, but why it is this only value allowed? That why I mean.

1603732767
justin_smith
Kena: do any architectures supported by zig allow storing a value at 0?

1603732822
justin_smith
if so, not being able to write to location 0 is a limitation, but I was under the impression that no modern architectures allowed storage to 0

1603732858
fengb
wasm, freestanding

1603732924
fengb
You can do `*allowzero T` for a zero friendly pointer

1603733080
Kena
You're right, I missed that mechanic.

1603733121
Kena
I did'nt know it could be a use case for wasm though.

1603734576
Kena
Please what does 'prong' means? E.g. "A switch on a non-exhaustive enum can include a '_' prong as an alternative to an else prong..."

1603734650
CommunistWolf
case

1603734672
CommunistWolf
i.e. the different possible execution paths, each is a prong, like on a fork

1603734683
ifreund
switch (foo) { .abc => {}, .xyz => {}, _ => {});

1603734699
ifreund
messed up the braces but you get the idea

1603734987
Kena
Ah yes, it's more clear now, thanks =)

1603735220
Kena
In the doc, when it is said "safety-checked undefined behaviour", does it mean the compiler prevent undefined behaviour from happening? Or is it executed nonetheless with some kind of possible recovery mechanism for the user?

1603735265
ifreund
that means that in safe build modes the compiler will add extra code to check for UB at runtime and abort if it occurs

1603735292
ifreund
in fast modes UB means literally anything could happen, you can only hope your program crashes

1603735293
Kena
Nice ^^ Does it include debug mode too?

1603735309
ifreund
yes, Debug and ReleaseSafe

1603735316
Kena
Thank you.

1603735331
Kena
But it also bloat the size right?

1603735334
ifreund
yes

1603735361
ifreund
though this is a very reasonable tradeoff in most cases

1603735363
andrewrk
sometimes the optimizer (llvm) figures out it can delete some safety checks

1603735377
Kena
is ReleaseSafe a viable option for a production environment?

1603735380
ifreund
and you can enable ReleaseFast for only some functions if you need

1603735383
ugla
And in any mode where @setRuntimeSafety(true) is used, I assume?

1603735415
ifreund
yes, release safe is a totally vaild default, it's what I use 99% of the time

1603735433
Kena
Allright.

1603735476
ifreund
it's not as fast or small as release fast/small, but it's by no means slow :D

1603735486
TheLemonMan
proposal: rename ReleaseFast to YOLO

1603735498
nyaayaya
ReleaseSmol

1603735639
Kena
accepted for milestone 0.8.0 :D

1603735739
g-w1
releasefast is crazy fast.

1603735874
jabb
i think it would be cool to have a noop function generator to avoid null function pointers, like @noop({}). this will help with interface declarations where you want default functions

1603735895
jabb
i end up just making a bunch of stub functions and assigning them so i don't have to pass every function

1603736550
andrewrk
ifreund, my goal is to get all the breaking changes for 0.7.0 in by tomorrow evening at the latest, and then only bug fixes & stability issues from then until the tag is cut. hopefully river can be in a good place to stick with 0.7

1603736595
andrewrk
TheLemonMan, how's it going? nice seeing you around again

1603736641
TheLemonMan
andrewrk, not good, not bad, I'm quite busy with my master thesis but I always find some time for some Zig hacking

1603736694
ifreund
what's your thesis on?

1603736744
TheLemonMan
innovative topologies/design for high-efficiency power amplifiers

1603736754
jabb
:O

1603736756
andrewrk
wow

1603736775
ifreund
that sounds like electrical engineering not CS :P

1603736795
jabb
i'm sure there's some machine learning involved

1603736847
TheLemonMan
yep, I'm a EE with a penchant for CS

1603736858
fengb
Is zig somehow involved too? >_>

1603736894
TheLemonMan
only a boatload of Matlab

1603736918
justin_smith
looking for some help decyphering a compiler error: "expected type '[]audio_node.Node', found '[2]audio_node.Node'"

1603736923
ifreund
andrewrk: I appreciate it! My fancy new bindings using opaque{} for libwayland and wlroots and related are now working and just need a bit of cleanup before I bring them into river :)

1603736934
ifreund
justin_smith: try &foo

1603736937
TheLemonMan
justin_smith, you need a &

1603736946
g-w1
how should I represent a tuple as a type?

1603736958
g-w1
.{ bool, u32, usize, usize } this does not work

1603736964
justin_smith
ifreund: TheLemonMan: thanks, that's the trick

1603736970
TheLemonMan
g-w1, meta.Tuple

1603736973
g-w1
ok

1603736974
g-w1
thx

1603736991
ifreund
it's saying that it expects a slice but found an array, using & will give you the address of the array which can coerce to a []foo slice

1603737594
justin_smith
ifreund: aha, that was my confusion, I thought my literal was a slice

1603737838
ifreund
yeah, arrays are values in zig

1603738112
Kena
does the concept of dynamic array exist in Zig? Or is it more or less the slice?

1603738121
g-w1
std.ArrayList

1603738152
g-w1
also, how does returning an array work at the assembly level, this has confused me for a while?

1603738230
TheLemonMan
read a bit on NRVO

1603738237
g-w1
ok

1603738592
Ristovski
Is there an alternative to std::multimap/std::unordered_multimap in Zig?

1603743338
g-w1
TheLemonMan: thanks, I read about a "return slot" and that cleared it up.

1603744453
kandinski
ifreund: I added more test yesterday and I'd forgotten that I was only capturing the first match. Woops.

1603744470
kandinski
12:47 < ifreund> kandinski: looking good :) I'm sure you'll find thing you can improve upon through real-world usage

1603744484
kandinski
p r o p h e t i c

1603747388
Kena
Can a union be both tagged and packed?

1603747406
Kena
concurrently I mean.

1603748098
g-w1
did ziglang.org just switch to light theme?

1603748111
g-w1
or is my browser just being weird?

1603748688
andrewrk
still dark for me

1603748981
tane
I see white background with black text

1603749129
ugla
g-w1: Your browser might be saying that it prefers a light theme, for whatever reason.

1603749163
travv0
ziglang.org has been light for me since i started using zig a couple weeks ago lol

1603749278
g-w1
thats what I thought, Im on a different pc than normal. thanks

1603749816
justin_smith
TIL google-chrome has a --force-dark-mode flag

1603749844
justin_smith
(I was wondering how to get that behavior without using a desktop environment)

1603751102
virkony
I think I'm doing something wrong. Have A catch return X; and now I want to lift catch to higher level. E.g. { try A; } catch return X; . Reason for this is to benefit from errdefer in C callback

1603751487
ifreund
virkony: yeah that's a bit of a pain point right now, this issue may interest you:

1603752752
virkony
thanks. that #1717 also looks interesting

1603753052
virkony
so basically current desugared version is struct { fn doit(...) !void { try A; } }.doit(...) catch return X

1603753076
virkony
with all control flow limits and stuff

1603753428
ifreund
honestly I'd just put the logic in toplevel helper function currently

1603754232
yZ5vlALg86lP
howdy all. what is the zig way of making an u16 out of a [2]u8?

1603754252
virkony
packing error for future unpack also makes sense to do aggregation

1603754316
justin_smith
yZ5vlALg86lP: bit-shift and bitwise and?

1603754318
virkony
yZ5vlALg86lP: shouldn't that depend on byte order you want to give to it?

1603754329
virkony
justin_smith: I guess or ;)

1603754340
justin_smith
virkony: right, my mistake

1603754362
yZ5vlALg86lP
the [2]u8 is of course network byte order

1603754374
justin_smith
virkony: at least with shift/ or you can just decide which of the two is msb explicitly, instead of checking / fighting endianness

1603754438
yZ5vlALg86lP
ok, so the classical way. there no ntoh giving it a buffer and getting an int.

1603754449
virkony
I would also expect compiler being able to figure out to just re-interpret memory and maybe apply byte swap :)

1603754466
justin_smith
yZ5vlALg86lP: that should also be possible with bitcast / pointercast or such, but I think the classic way is cleaner

1603754484
ifreund
yZ5vlALg86lP: mem.bytesAsValue()

1603754540
ifreund
or mem.readIntNative() or mem.reatIntForeign(), there are many options

1603755122
yZ5vlALg86lP
i like readVarInt() that can handle endiannes

1603755124
yZ5vlALg86lP
s

1603755261
ifreund
that one is good if the number of bytes you're reading from doesn't perfectly match the type you want to store into

1603755285
ifreund
otherwise readIntLittle() or readIntBig() are a little nicer

1603755508
yZ5vlALg86lP
ah.

1603755628
virkony
Hmm... Having n+1 calls that can fail and I want to return first/last failure...

1603755815
virkony
does "if" create scope when used without block?.. if (X) defer Y; will defer Y till outer scope of "if"?...

1603756670
virkony
ifreund: I assume zig handles misaligned [2]u8 on platforms without CPU handling that

