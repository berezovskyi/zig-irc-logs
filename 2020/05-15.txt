1589518000
pixelherodev
Anyone using zls with kakoune / kak-lsp?

1589518501
tdeo
yeah

1589519168
andrewrk


1589519178
andrewrk
got the code from the stream working, with no hacks

1589519601
pixelherodev
Awesome!

1589519606
pixelherodev
:party_hat:

1589519988
wilsonk
sweet

1589520075
andrewrk
minus the extra _start as well

1589520440
pixelherodev
Nice!

1589520453
pixelherodev
... I think I'm going to look into cleaning up your x86 backend tonight

1589520464
pixelherodev
because it offends me on a deep level :)

1589520483
pixelherodev
To be fair, I did the exact same thing early on

1589520494
pixelherodev
but my cleaner implementation is

1589520515
pixelherodev
I think with the way you're doing it, it'd be bigger than any single file in the standard library :P

1589520528
pixelherodev
Movs are just the

1589520540
pixelherodev
Oh, and

1589520542
pixelherodev
andrewrk:

1589520546
pixelherodev
The link to the x64 manuals :P

1589520560
pixelherodev
You're going to want a PDF reader that lets you use the table of contents in the sidebar

1589520566
pixelherodev
The thing is

1589525340
scientes
pixelherodev, the worst part of that document is that 64-bit as a afterthought

1589525353
scientes
they get through 32-bit, and then have this list "this is what changes in 64-bit"

1589525621
pixelherodev
Ugh, yeah

1589525626
pixelherodev
It's not

1589525632
pixelherodev
Might be worth looking at the AMD ones instead

1589529985
wilsonk
has anyone gotten zigtools/zls working with VScode?

1589534952
cren
Can someone write an example of how to read user input from stdin? I'm looking at the tests for reference but I'm still not sure

1589535826
ikskuh
std.io.getStdIn().inStream().readUntilDelimiter*(â€¦, '\n', â€¦);

1589535832
ikskuh
there are several flavours of that function

1589535881
cren
where do the read bytes go? are they returned by that function?

1589535944
ikskuh
that's the thing that'S up to you

1589535952
cren
ah wait I see, you have to choose whether they are handled by the allocator or put into an arraylist

1589535958
ikskuh
there are flavours that read in a buffer, that allocate, that append to a arraylist

1589537176
cren
I managed to get input to work, thank you

1589537240
ikskuh
:)

1589546012
phillyiscool
Anyone tried their hand at writing a AWS Lambda runtime for Zig yet?

1589546015
phillyiscool
If not I might give it a go.

1589546957
phillyiscool
Step one would be to take the Bash lambda layer:

1589546969
phillyiscool
and create a zig function that gets executed

1589546982
phillyiscool
if that works then create a zig version of the bootstrap

1589547219
phillyiscool
Probably that runtime is too complex, Lambda will give you a smaller one

1589549354
pmwhite
I've used kakoune and kak-lsp tiny bit, but not with zig. I don't actually know what zls is though.

1589549418
fengb
Itâ€™s the latest Zig lsp

1589549420
ifreund


1589549438
ifreund
i just got it mostly working with kak-lsp, note that you'll need to build it with zig master though

1589549764
phillyiscool
I'm trying to do a libcurl hello world and I get this:

1589549766
phillyiscool
./hello.zig:11:36: error: expected type '.cimport:4:11.enum_unnamed_17', found 'c_int'    _  = c.curl_easy_setopt(curl, c.CURLOPT_URL, "

1589549778
phillyiscool
I don't know how to interpret that (first time using a c library from within zig)

1589549801
phillyiscool
Any hint as to how to cast to "'.cimport:4:11.enum_unnamed_17" ?

1589549825
ifreund
phillyiscool: use .CURLOPT_URL instead of c.CURLOPT_URL

1589549849
phillyiscool
can you explain that?

1589549858
ifreund
zig translates two versions of c enums, one is the c.XXX which is just a c_int,  and the other is an actual zig enum

1589549890
phillyiscool
would you expect a C function to take a c_int and not a zig enum?

1589549896
phillyiscool
wouldn't*

1589549898
ifreund
the .ENUM_NAME syntax is an enum literal which coerces into the enum type if a varaint with that name is present

1589549926
phillyiscool
From this syntax: const c = @cImport({

1589549934
ifreund
it takes a c enum in the signature, which gets translated to a zig enum

1589549952
phillyiscool
I would expect that imports are all under c, is that not the case?

1589549955
ifreund
C also just lets you use use enums like ints though with no cast

1589549982
ifreund
it is the case, the full type is probably c.enum_this_is_the_c_enum_name.CURLOPT_URL

1589549999
ifreund
but if you use the enum literal you don't need to type out the enum type

1589550026
phillyiscool
I guess what I'm asking is, I expect `c` to be a namespace, but it sounds like CURLOPT_URL is a global

1589550032
phillyiscool
does that make sense?

1589550048
phillyiscool
How does Zig know to pull `.CURLOPT_URL` from the `c` binding?

1589550068
ifreund
as I understand it that's not really what's happening

1589550087
ifreund
enum literals aren't related to any enum type in particular

1589550108
ifreund
but they can coerce into any enum type if the type has a variant with the given name

1589550129
mikdusan
the fn signature would be where zig learns what to coerce to

1589550176
phillyiscool
Does @cImport translate to an include?

1589550218
ifreund
afaik yes

1589550239
phillyiscool
ok, that explains how it knows what CURLOPT_URL is

1589550239
ifreund
a cimport.zig file is generated and put somewhere in your zig-cahce

1589550246
ifreund
then that is included

1589550256
fengb
.CURLOPT_URL implies the locationâ€™s type

1589550257
ifreund
*zig-cache

1589550266
fengb
Specifically the leading dot

1589550276
fengb
Without it, itâ€™d be global

1589550294
phillyiscool
ok, that explains how it knows what CURLOPT_URL is

1589550302
phillyiscool
woops

1589550306
phillyiscool
duplicate message :)

1589550328
phillyiscool
So if it's an include why do I have to type c.curl_easy_init(); and not just curl_easy_init(); ?

1589550359
phillyiscool
Is this just special behavior for enums?

1589550393
fengb
Unions and structs also have similar behavior

1589550423
fengb
Although without a location type, those become anonymous structs or tuples

1589550478
fengb
const foo: Foo = .{ .bar = 1 }; // creates a Foo struct

1589550542
fengb
const foo = .{ .bar = 1}; // creates an anonymous struct with a bar field (will not match the Foo type)

1589550569
phillyiscool
yeah, i know this part

1589550574
mikdusan
phillyiscool: that's a common idiom. bring in the C lang stuff and sub-namespace it requiring 'c.whatever' for access. it can be any name you choose.

1589550606
phillyiscool
mikdusan but c. isn't required for access, as shown above :)

1589550637
mikdusan
c is required for the fn. from the fn, it then permits generic enum-literals for coercion

1589550689
phillyiscool
Yeah, that's where my expectations weren't met, I assumed I needed to use c. to access

1589550697
mikdusan
so your fn really wants:  c.my_function(c.MyEnum.some_enum)

1589550712
mikdusan
and zig lets you do `c.my_function(.some_enum)`

1589550731
fengb
That rhymes!

1589550745
alexnask
phillyiscool, This is not specific to C import stuff, .enum_literal will coerce to any enum type that has an `enum_literal` field

1589550760
mikdusan
it's just sugar. fine tasting sugar, but just sugar

1589550800
phillyiscool
What's the non sugar version?

1589550809
alexnask
hmm idk if I would call it sugar, it has its own type and can exist outside of typed contexts where it gets coerced to a specific enum type

1589550810
mikdusan
c.my_function(c.MyEnum.some_enum)

1589550817
alexnask
But it is tasty yeah :p

1589550818
fengb
Salt

1589550826
fengb
Syntax salt?

1589550833
phillyiscool
mikdusan, I meant the non-sugar version of .CURLOPT_URL

1589550835
mikdusan
sugar might be a bad choice of wording yeah

1589550855
mikdusan
phillyiscool: are you able to see the zig generated import file?

1589550871
ifreund
it's somewhere in zig-cache, in the o folder

1589550902
phillyiscool
there are many files in the o folder

1589550912
ifreund
should be called cimport.zig

1589550925
phillyiscool
there are several subfolders with cimport.zig files

1589550930
phillyiscool
maybe this is it: pub const CURLOPT_URL = @enumToInt(enum_unnamed_17.CURLOPT_URL);

1589550930
ifreund
you can nuke the cache and rebuild to get rid of any stale files

1589550971
ifreund
yeah so c.enum_unnamed_17.CURLOPT_URL is the sugar free version

1589550988
phillyiscool
ah, ok

1589550990
fengb
Why is it unnamed? Thatâ€™s pretty fugly

1589550996
phillyiscool
so you would never use the non-sugar version

1589551006
ifreund
fengb: happens more than you would think in C code :P

1589551009
alexnask
sugar-free is for losers /s

1589551026
fengb
Oh right, enums are just a fancy way of doing globals

1589551041
mikdusan
I

1589551044
ifreund
there are also lots of anon unions

1589551047
fengb
How does the function take in an enum if itâ€™s unnamed?

1589551063
mikdusan
it is named. it's just named _unnamed :)

1589551086
alexnask
Is it actually named _unnamed in the C source?

1589551091
fengb
ðŸ¤¯

1589551114
ifreund
probably thanks to the preprocessor

1589551121
mikdusan
one day someone will post this cimport.zig so we stop guessing :)

1589551133
alexnask
: D

1589551189
mikdusan
`pub extern fn curl_easy_setopt(curl: ?*CURL, option: CURLoption, ...) CURLcode;`

1589551194
phillyiscool
mikdusan do you mean me? I can do that

1589551215
fengb
Itâ€™s named!

1589551229
fengb
Oh is that a typedef? Do we not use the typedef name?

1589551252
mikdusan
`pub const CURLoption = enum_unnamed_17;`

1589551276
ifreund
here's the link

1589551286
mikdusan
`const enum_unnamed_17 = extern enum(c_int) {...}`

1589551311
fengb
Yeah I think I should make a proposal to use the typedef name if itâ€™s missing

1589551313
ifreund
it's a `typdef enum { .. } CURLoption;

1589551355
ifreund
fengb: sounds like a good idea to me

1589551408
mikdusan
so `c.curl_easy_setopt(curl, c.CURLoption.CURLOPT_URL, "

1589551424
mikdusan
`c.curl_easy_setopt(curl, .CURLOPT_URL, "

1589551486
mikdusan
phillyiscool: from there you can see zig knows that it must be type c.CURLoption . and that's how it knows to take a vanilla enum-literal `.anything` and coerce to c.CURLoption . if you used a `.bogus` it would give error

1589551512
phillyiscool
yeah it's making a bit more sense now, thanks for your help

1589551772
mikdusan
anyone here have experience with interval trees?

1589553333
scientes
mikdusan, you could store it as an entry in two red-black trees

1589553352
scientes
as long as they are no duplicates

1589553381
scientes
or a way to avoid duplicates with other data

1589553440
scientes
yeah, interesting problem

1589553447
mikdusan
that pages states `A naive approach might be to build two parallel trees... O(n) time` . my use case will have duplicates

1589553477
scientes
...which is no better than brute-force.

1589553478
mikdusan
i'm trying to figure out should I go with (augmented) interval tree or range tree

1589553479
scientes
ahh yes

1589553537
companion_cube
just use sqlite!â„¢

1589553553
scientes
more like sqheavy

1589553748
companion_cube
?

1589554286
oats
I really like zig's multi-line string syntax

1589554308
oats
I think that most languages kinda half-ass this and let it screw up code formatting

1589554330
foobles
yeah me too

1589554345
ifreund
agree

1589554347
ikskuh
oats: i just say C#-Multilines :D

1589554348
ikskuh
horrible :D

1589554354
ifreund
simple but elegant

1589554357
ikskuh
@"""foobles"" is a nickname";

1589554375
oats
oh yuck

1589554383
ikskuh
yep

1589554387
ikskuh
using "" as an escape for

1589554388
ikskuh
"

1589554400
oats
D:

1589554406
foobles
it's funny, in kotlin they use triple quotes, so you get the indentation issues like a bunch of other langs. so in IntelliJ, if you type the """, it will automatically add a `.trimIndent()` to the end of the literall :P

1589554410
foobles
thats the preferred way

1589554415
ikskuh
i really love lua's way of using "multiline strings"

1589554443
foobles
how are they different from other langs?

1589554446
ikskuh
anything that starts with "[[" with any number of = gets a multiline string terminated by ]] with the same number of =

1589554455
ikskuh
give me a sec

1589554463
oats
ikskuh: but code formatting is still bleh :P

1589554508
ikskuh


1589554513
ikskuh
yeah

1589554520
foobles
ohhh yeah

1589554522
foobles
ikskuh i think C++ and Rust do the same thing

1589554527
andrewrk
as far as I'm aware zig is one of the only languages with line-independent tokenization

1589554529
ikskuh
but you can always put

1589554541
ikskuh
foobles: yeah

1589554547
ikskuh
andrewrk: yeah, that's a really nice feature

1589554666
fengb
How do lines affect other languages?

1589554677
mikdusan
/* ... */

1589554689
companion_cube
I guess the tokenizer has to deal with multi-line string literals

1589554695
companion_cube
about the only thing I can think of, really

1589554698
alehander92
hm, what does line-independent mean

1589554707
alehander92
ah, so no multiline stuff

1589554720
alehander92
btw

1589554732
andrewrk
imagine you are implementing a text editor syntax highlighting and the user has scrolled down to the middle of the document

1589554746
andrewrk
in a 10 GiB file

1589554763
alehander92
yeah, makes sense, but multiline strings are kinda useful

1589554765
andrewrk
you would like to not have to tokenize the entire file

1589554781
alehander92
for tests  etc

1589554787
fengb
Oh

1589554811
fengb
That's why Vim syntax highlighting fails :P

1589554814
andrewrk
alehander92,

1589554817
alexnask
alehander92, zig has multiline string literals, lines just all start with \\

1589554828
alehander92
ah

1589554840
alehander92
but this is still harder, because i cant copy paste something

1589554843
andrewrk
fengb, I've never seen it fail on zig source code :D

1589554844
ikskuh
andrewrk: if we would be totally crazy, we could parse zig code in parallel

1589554847
ikskuh
each line in it's own thread .D

1589554848
alehander92
but it makes sense from lang design point, so ok

1589554867
alexnask
alehander92, Easier than making sure the indentation is correct and the code doesnt look like crap in my experience

1589554872
andrewrk
alehander92, you can still copy paste

1589554882
mikdusan
ikskuh: just give each line to the GPU

1589554883
alehander92
but yeah, very useful for various  tools as well

1589554885
ifreund
if you can't copy paste and add a \\ easily you need a new text editor

1589554895
ikskuh
mikdusan: lul. syntax highlighting done by the GPU :D

1589554897
alehander92
yeah ok i love text editors

1589554915
fengb
andrewrk: I've never thought about it and it's been bugging me for awhile. Glad we solved it in Zig :P

1589554967
ikskuh
one thing that bugs me about zig multiline is that it does not have a space between \\ and the content

1589554981
alehander92
awesome

1589554997
alehander92
btw , do you have column-level debug info

1589555006
andrewrk
yes

1589555007
ikskuh
yes

1589555009
alehander92
very offtopic, but just wondered about it for another language

1589555027
andrewrk
it's pretty useful when you get a panic on integer overflow and there are multiple operations on the same line

1589555048
alehander92
what a good day

1589555050
alehander92
oh yeah

1589555071
alehander92
that's similar to what we want

1589555087
alehander92
basically a

1589555097
alehander92
but one can also write such a gdb command actually

1589558673
oats
is there any way to have an OutStream field in a struct, but nicely?

1589558690
oats
or am I gonna need noisy type params ;_;

1589558831
ikskuh
afaik, it's just noisy atm

1589559160
alexnask
You could use interface.zig, make an OutStream interface and get MyOutStream.init(any_out_stream)

1589559181
alexnask
Obviously reintroducing dynamic dispatch

1589559285
oats
I think dynamic dispatch would be an appropriate trade-off for type vars I don't really care about :P

1589559288
oats
alexnask: thanks for the idea

1589559329
alexnask
Cheers, here is the link

1589559356
ikskuh
what's the current pattern to "convert" []const u8 to [:0]const u8 ?

1589559359
ikskuh
reallocate?

1589559369
oats
alexnask: heh, I haven't actually used a zig library before

1589559373
oats
what's the protocol here?

1589559376
oats
just copy-paste? :P

1589559392
alexnask
This one is copy pastable and a single file yeah

1589559407
alexnask
Idk what the best way to do it is for more involved packages

1589559456
alexnask
ikskuh, does std.mem.spanZ not support regular slices?

1589559469
ikskuh
tha's the inverse way

1589559474
ikskuh
std.mem.dupeZ is what i needed

1589559487
alexnask
Ah right

1589560570
frmdstryr
How can I skip a test? Returning error.SkipZigTest just makes compiling fail with error uneachable code

1589561171
dimenus
having @tagName is so immensely useful coming from C

1589561263
pmwhite
I'm updating my code to the most recent zig version. I think I fixed all the stuff, but now the compiler is "terminating unexpectedly"

1589561306
pmwhite
I don't really know where to look?

1589561654
pmwhite
I compiled with --verbose-ir and found out it was an assertion error at analyze.cpp:7111

1589561725
alexnask
pmwhite, Unfortunately this is an assert in the IR rendering code

1589561780
pmwhite
any guess on what could be triggering it?

1589561780
alexnask
Are you compiling zig yourself or did you download a package?

1589561801
pmwhite
downloaded the lastest master tar.xz

1589561811
pmwhite
from the website

1589561831
pmwhite
binary, that is. I did not compile it.

1589561842
alexnask
Okay, no worries. Any way you can link to the code so I can repro and get a stacktrace?

1589561967
pmwhite


1589561998
pmwhite
It has some wayland dependencies required in order to build, but if you use Nix, then there is a nix-shell that you can run zig build from.

1589562081
pmwhite
I pushed just now, fyi, so that repo is not compiling at the moment, lol.

1589562085
alexnask
Ill figure it out ;) `zig build` is all I need to crash the compiler I assume?

1589562116
nrdmn
hello!

1589562120
alexnask
hi

1589562157
pmwhite
alexnask: yeah, that's all.

1589562216
alexnask
pmwhite, Ill let you know when I can repro and find some workaround

1589562432
pmwhite
sweet, thanks a bunch.

1589562820
oats
is it possible to adapt the default build.zig to have another command, say run-debug that sets some kind of comptime global variable?

1589562930
alexnask
pmwhite, Not familiar with wayland, where do I get xdg-shell-protocol.c?

1589562956
ifreund
alexnask: it's generated using wayland-scanner

1589562966
ifreund
idk if pmwhite has it in his build.zig or not

1589563005
alexnask
Thanks

1589563249
pixelherodev
Ooh, should we have a wayland-scanner->zig?

1589563265
pixelherodev
Instead of needing to translate-c, it can just generate zig directly

1589563328
ifreund
tdeo made one already :D

1589563348
ifreund


1589563486
pixelherodev
Nice

1589563512
pmwhite
oh, oops. I forgot about that. Run `make`

1589563557
ifreund
pmwhite: if you want to scan with your build.zig you can copy mine

1589563565
pmwhite
alexnask: ^

1589563568
alexnask
Lol guess I should have checked the makefile :D

1589563590
alexnask
I was wondering why it had build.zig and make :P

1589563597
pmwhite
to be fair, I did tell you that `zig build` should work.

1589563653
pmwhite
ifreund, that sounds like an improvement. I'll probably do that once this issue gets resolved.

1589564356
pixelherodev
Whoa whoa whoa

1589564361
pixelherodev
Working on one issue at a time?!

1589564378
pixelherodev
... that actually sounds quite reasonable

1589564894
alexnask
Okay I can repro now :D Time to find the bug

1589565523
alexnask
pmwhite, I think this is the line that triggers it for some reason: const char_width = renderns.sourceCodeProAtlas.legend['X'].?.size[0];

1589565667
alexnask
Yes it will just segfault in another file on the same line if you comment it out.. Time to find out why it triggers it so much :P

1589566008
pmwhite
hmmm, interesting.

1589566483
pixelherodev
Is there a way to tell zls that a function's casing is deliberate?

1589566511
pixelherodev
"Doesn't match style" because I'm deliberately using two kinds of casing to differentiate two classes of operations

1589566648
andrewrk
zls complaining about style is of questionable compliance with

1589566761
alexnask
Good point, we better add options :P

1589566915
andrewrk
haha

1589566999
alexnask
This is a weird bug

1589567026
alexnask
some_global_arr[0], some_global_arr[1] <- fine, some_global_arr[2] <- crash at codegen

1589567052
alexnask
some_global_arr is a [128]?T runtime value

1589567198
alexnask
>.<

1589567417
pmwhite
Hmm, I wonder where you saw that type.

1589567436
alexnask
legend: [128]?Glyph,

1589567543
alexnask
pmwhite, I have a workaround for you, `var X: usize = 'X';` and array access with [X]

1589567553
alexnask
Ill try to repro in a small testcase and open an issue

1589567674
alexnask
I cant even reap the beenefits of fixing compilation on wsl

1589567677
alexnask
Feelsbadman

1589568268
pmwhite
alexnask: just updated the three locations where I do that, but it still doesn't compile. Is it compiling for you?

1589568290
alexnask
Yes

1589568318
alexnask
I can ship you an elf executable as proof lol

1589568389
alexnask
Make sure they are 'var'

1589568484
alexnask
Im on master branch if that helps

1589568524
pmwhite
Oh, I did const.

1589568555
nrdmn
I'm having trouble building zig. It complains about symbols not being found. It seems like zig is not linked against libclang-cpp when it should be?

1589568603
pmwhite
Yay! It compiles. Thank you alexnask .

1589568620
nrdmn
Full build log:

1589568629
alexnask
I just want a screenshot as a reward pmwhite :D

1589568649
pixelherodev
I'll patch the style thing in zls

1589568653
pixelherodev
I noticed it, I should fix it :)

1589568824
nrdmn
cmake says it can't find CLANG_LIBRARIES. When I pass -DCLANG_LIBRARIES=-lclang-cpp to cmake, it successfully links but then outputs ": CommandLine Error: Option 'mc-relax-all' registered more than once!"

1589568866
pixelherodev
Linking against clang-cpp is a pain from what I remember

1589568882
pixelherodev
I patched my Clang build to generate the many small libraries and linked against those, but I really wouldn't recommend it

1589568893
pixelherodev
Someone can probably tell you the

1589569046
andrewrk
nrdmn, you have to link against everything statically because llvm, clang, and lld are not all provided dynamically by your package manager

1589569274
nrdmn
andrewrk: you mean with 'ZIG_STATIC_LLVM=ON'? because I don't have the static llvm libraries either

1589569304
andrewrk
no, no configuration options on zig end's needed. your system package manager has not provided a set of libraries that are compatible with each other

1589569337
andrewrk
you will have to compile from from source until such time as your system packages actually work

1589569419
fengb
Will stage 2 offer an exclude-LLVM build option?

1589569431
pmwhite
alexnask: I haven't found a screenshot program that actually works on Wayland.

1589569441
andrewrk
fengb, yeah. other way around actually. -Denable-llvm

1589569468
fengb
Ah cool

1589569502
pixelherodev
THink I get the style thing working

1589569556
fengb
I've made it a point to not play Gameboy games until it runs in my emulator. But there's so many I want to play now :(

1589569704
andrewrk
I feel you on that

1589569718
fengb
Oh right, you're still shaving that yak

1589569896
pixelherodev
ZLS folks: there a place to send a patch? Or is GitHub PR the canonical way to send a patch?

1589569905
pixelherodev
Got warn_style opt-in working

1589569915
pixelherodev
I mean it was like ten lines but still :P

1589569974
ifreund
pmwhite: what compositor? grim + slurp has worked great for me on sway

1589569988
pixelherodev
Same

1589570000
ifreund
works on river too :D

1589570002
pixelherodev
grim + slurp = :heart:

1589570015
alexnask
pixelherodev, Github PR if that is fine with you

1589570033
pixelherodev
I don't exactly like GitHub, but it's not going to kill me to send a PR lol

1589571062
nrdmn
looks like they're not going to change this:

1589571181
traviss
wilsonk, did you have any luck with vscode and zig lsp? did you install this extension

1589571259
ifreund
traviss: did you build zls using the master branch of zig?

1589571294
ifreund
there's a bug in std.json that got fixed post-0.6.0 which was causing problems for me using zls built on 0.6.0

1589571381
alexnask
Also we rely on the new error tolerant parser that vexu pushed today

1589571383
traviss
yes i'm on master maybe a week old. i was able to build zls and got it working with vscode.

1589571508
alexnask
Hah, `*guideline*`, touche

1589571849
tgschultz
Is there a way to make zig output freestanding in PE/COFF instead of ELF?

1589572585
nrdmn
last time I checked, llvm did not support that

1589572608
tgschultz
What a weird thing to be missing.

1589573916
alexnask
Hah, `*guideline*`, touche

1589573918
alexnask
woops

1589574339
nrdmn
tgschultz: I think this is the relevant line:

1589575528
wilsonk
traviss: just updated zig from git two minutes ago and built it, then updated and built zls. All went fine. Installed zls-vscode-1.0.0.vsix and it seems to be picked up by vscode as the hover functionality in settings.json states that the option 'zigLanguageClient.path' is the 'path to the zls exe' but zls still doesn't work. It doesn't even syntax highlight a zig file which I would assume would work with no config at all. Not sure what is

1589575663
wilsonk
traviss: all I have running for extensions is zls and vim.

1589575971
traviss
wilsonk, syntax highlighting is provided by a separate 'zig' extension by tiehuis. i found it by just searching for 'zig'.

1589575972
alexnask
wilsonk, zls is a lnaguage server it doesnt do highlighting. You should install vscode-zig for that

1589575983
alexnask
Just search for 'zig' by Marc Tiehuis

1589576010
wilsonk
ok, or I assume I can use anderfr's? Or does it matter?

1589576042
alexnask
I think this one is the most up to date extention but suit yourself

1589576134
traviss
did you add an entry to settings.json `"zigLanguageClient.path": "/path/to/zls/zig-cache/bin/zls"`

1589576149
alexnask
^

1589576165
wilsonk
Oh, nope I think Marc's is required because that just fixed everything. The 'path to zls' also needs to include zls as the executable...so not really just the path to where it is but what it's name is also in the string

1589576176
alexnask
Yes you need the exe

1589576185
alexnask
Also for an optimal experience I would suggest making a zls.json ile next to the executable

1589576222
alexnask
And adding { "zig_std_path": "/path/to/zig/lib/zig" }

1589576227
wilsonk
Can you specify these couple things on the github so that others don't run into these same problems? Please ;)

1589576271
alexnask
(this is needed to resolve std library imports)

1589576288
wilsonk
Yeah, I have the json file there...I thought I should make one up just in case it was needed for the plugin to run.  I could tell from the code that there were defaults...but just thought I would do it anyways

1589576973
traviss
any luck wilsonk? are you seeing completions from the std lib?

1589577014
wilsonk
Looks all good now. Best part is that completions for the std lib work! That was the biggest part missing in metaleap's lsp. The best part about his, that is missing from zls is the hover hints over variables. I can see that you all have the hints for completion...just not the hover part yet

1589577029
wilsonk
That is IMO, of course :)

1589577154
traviss
ok good. :) yeah i agree that hovers and jump to reference would be really nice to haves. big thanks to superaguste and alexnask. nice work guys.

1589577191
alexnask
Yes we have lots of work to do

1589577213
wilsonk
yeah, std lib completions with the code view and doc view for variables is a huge bonus! Works great, thanks guys!

1589577283
alexnask
Cheers, glad you like it. Please keep a mind to zig pr #5353 and recompile when it is merged if you can

1589577329
alexnask
There is a bug in the zig parser that can cause it to infinite loop, although its a pretty hard type to make (`arr: 100]u8,` in a struct)

1589577337
alexnask
typo*

1589577355
wilsonk
ah, ok

1589577357
alexnask
keep an eye on*

1589577365
alexnask
So many typos >_>

1589577980
GreaseMonkey
daurnimator: wrt your PR for deflate-for-zig (sorry it's taken so long for me to get back to this), the @intCast()s in block_tree.zig are more or less required right now unless we change the base type in readBitsNoEof (i get integer overflows otherwise), would you rather leave the types in or chagne the base type used for readBitsNoEof?

1589578201
ikskuh
hey, short question: why does i386-baseline emit sse instructions?

1589578284
mikdusan
p3 was first to support SSE

1589578324
ikskuh
hm

1589578329
mikdusan
not a reason but just to give idea it goes back quite a ways

1589578337
ikskuh
so i have to use baseline-sse-see2 for kernels?

1589578344
ikskuh
which seems to work

1589578347
fengb
The default CPU for i386 is Pentium 4 for some reason

1589578462
fengb
Try with -mcpu=_i386?

1589578669
mikdusan
awesome "feature": slow_unaligned_mem_16

1589578701
ikskuh
_i386 is broken

1589578705
ikskuh
get an LLVM error

1589578733
GreaseMonkey
i'd've thought that it was -mcpu=i386

1589578752
fengb
_i686?

1589578761
fengb
Somewhere there's a working configuration

1589578787
GreaseMonkey
might be -march=i386

1589578790
GreaseMonkey
what's with the underscores?

1589578805
GreaseMonkey
does clang add them in for some bizarre reason?

1589578807
fengb
No idea. It's what `zig targets` spits out

1589578890
GreaseMonkey
is there a way to make sure one isn't accidentally outputting 64-bit 80386 code

1589578920
GreaseMonkey
because AMD64 requires SSE2 and uses it for its floating point calling convention

1589579029
ikskuh
x86_64 is not i386

1589579036
ikskuh
these are different targets

1589579052
fengb
There's a proposal to rename i386 to x86 since that's less confusing

1589579077
fengb
-target=i386 -mcpu=_i686 looks so weird

1589579827
GreaseMonkey
when's -target=i8086 :^)

1589579831
andrewrk
fengb,

1589579844
nephele
llvm doesn't do 8086 afaik :P

1589579859
GreaseMonkey
to be honest Zig is one of the few languages where the code often fits into 640KB of RAM

1589579926
nephele
I am looking forward to use zig in the fuuuture to build something fun for my ibm personal computer, but that has "only" 512KB :)

1589580218
mikdusan
I'll give you $5.12 for it's keyboard

1589580307
ikskuh
mikdusan: remove the point and i'll send you one

1589585486
stripedpajamas
trying to figure out how to save the hex representation of a []u8 into a var. is (fmt, args) => []const u8 in the std library somewhere ?

1589585559
ikskuh
std.fmt.bufPrint

1589585662
stripedpajamas
thanks!

1589586830
mikdusan
fengb: can you look at #3937? would you say `var vec : @Vector(4, f32) = src[0..4].*;` is correct and this issue can be closed?

1589587003
oats
is there anything equivalent to sscanf in the stdlib?

1589587184
oats
stripedpajamas: there's also fmt.allocPrint if you want to allocate instead

