1578269174
swoogan
I'm having troubling building stage 1 from source. I had to build my own llvm and clang.

1578269195
swoogan
How do I tell cmake where my llvm and clang are installed?

1578269459
Snektron
You can take inspiration from

1578269466
hryx
swoogan: what OS are you on?

1578269470
Snektron
you can see that it sets _DCMAKE_PREFIX_PATH

1578269534
swoogan
sorry, Ubuntu 18.04 64bit

1578270095
hryx
swoogan: the cmake flag Snektron mentioned will allow you to specify the path to your custom build: `cmake .. -DCMAKE_PREFIX_PATH=/path/to/llvm`

1578270126
hryx
but it's also possible to use LLVM installed via apt if you follow the instructions at

1578270240
hryx
look under Ubuntu, under Bionic (18.04). Those lines are what you need to add to /etc/apt/sources.list.d/additional-repositories.list (or another file in that directory). Then `sudo apt update` and install the relevant clang/llvm packages

1578270311
hryx
Exactly which packages you need, I forget. That LLVM page also lists which ones are available

1578270338
swoogan
DCMAKE_PREFIX_PATH worked. I got confused and thought that told cmake where to install zig

1578270426
swoogan
thank you

1578282619
WendigoJaeger


1578282660
WendigoJaeger
sorry for the pastebin link

1578282670
WendigoJaeger
Is there any plan to support align(x) for const variable and/or @embedFile, I would need those const array to be "allocated" in .rodata at aligned address.

1578284345
WendigoJaeger
related to my last commit in ZigGBA where I implemented a custom memcpy:

1578285224
daurnimator
WendigoJaeger: I think you can write: `const frontImageData: @align(4) []const u8 = @embedFile("foo");` ?

1578285230
daurnimator
uh no @

1578285408
daurnimator
nope you can't

1578285436
daurnimator
and also that would be on the pointer not the data itself

1578285562
fengb
Code Generation [16612/18027] fmtgen.format...Segmentation fault: 11

1578285581
fengb
Doh! OutStream might be a doozy :(

1578285661
hryx
Hey daurnimator I'm super confused about something that you maybe can help me understand. I just made a fix for

1578285707
daurnimator
hryx: yes its invalid unicode. no it probably shouldn't fail.

1578285721
daurnimator
hryx: json strings are allowed to not be valid unicode :P

1578285725
hryx
From what I understand about the WTF-8 discussions, the issue is about working around invalid utf-16 in windows paths. But I'm not sure I understand why this affects JSON since the RFC specifically says it has to be valid utf-8

1578285772
daurnimator


1578285802
daurnimator
That's one of the things that should be a json decode option

1578285825
hryx
oh I was working from RFC 3629, has that been superseded?

1578285828
daurnimator
which is why the underlying lexer allows it: its up to the parser (one level above) to reject it

1578285833
daurnimator
hryx: yep; 3 or 4 times

1578285849
hryx
fucking RFCs

1578285877
daurnimator
just remember to look at the header before you start .... "Obsoleted by:.... "

1578285889
daurnimator
and make sure you follow the chain all the way to the end

1578285895
daurnimator
and then also look for "Errata Exist"

1578285935
hryx
woof, thought I did, but I didn't look hard enough I guess. Thanks for the newer one

1578285994
hryx
So this is the widely adopted one now? So for example Postgres would accept JSON with such codepoints?

1578285995
hryx
(for a "jsonb" type value)

1578286027
daurnimator
hryx: not necessarily....

1578286039
daurnimator
json implementations are generally quite non-conformant

1578286075
hryx
Ok. I don't understand why Zig's JSON parser has to be, though

1578286137
daurnimator
hryx: have you seen my branch:

1578286191
hryx
nope, what's the gist of it?

1578286231
daurnimator
Automatic decoding/encoding of a zig type to/from json

1578286251
hryx
I love it

1578286341
daurnimator
It has a few TODOs left (was running into compiler bugs/crashes); then will reopen the PR (it is/was #3155)

1578286745
hryx
wow, that section you linked straight up says that `\uDEAD` is legal in this newer JSON spec. oy

1578286968
hryx
I misread, it does not say that it's allowed (reading is hard)

1578287034
daurnimator
hryx: yes it does... "the ABNF in this specification allows ...."

1578287168
hryx
So when it follows that with "implementations might return different values for the length of a string value or even suffer fatal runtime exceptions", are they just saying "use those characters at your own risk"?

1578287180
daurnimator
hryx: yep.

1578287190
daurnimator
15:47:15 <daurnimator>json implementations are generally quite non-conformant

1578287191
hryx
good enough for me!

1578287503
hryx
Ahhhh, it also says this: "JSON text exchanged between systems that are not part of a closed ecosystem MUST be encoded using UTF-8 [RFC3629]." That's probably what got me reading the other spec and questioning this whole thing.

1578287566
hryx
so like you said daurnimator this should be a decode option

1578287597
daurnimator
hryx: yep. in my auto-json branch there's the start of a decode-options struct.

1578287608
daurnimator
should get added in there

1578306935
euantor
Is this compiler error intentional - do I need to cast to do a binary not on a constant value?

1578306986
euantor
This is the actual code in question. It's based on

1578309296
dingenskirchen
eunator, does it work if you specify `u32` for all constants?

1578309305
dingenskirchen
euantor*

1578312121
euantor
dingenskirchen: Yes, it does. I didn't think of that one

1578315726
Snektron
Streams being generic over errors is really annoying

1578322487
fengb


1578323153
mq32
interesting discussions below

1578323162
mq32
> It doesn't fix use-after-free, double free().

1578323170
mq32
because no programming language can fix programmers :D

1578323376
fengb
I'm pretty sure Rust has mechanisms fix those

1578323578
mq32
afaik only with a "runtime linter"

1578323620
fengb
But the ownership checker should mark variables as freed and thus you can't use them any more

1578323632
dimenus
is it possible to have a func with a comptime parameter call another func with a comptime parameter? (all other params in both funcs are runtime known)

1578323653
dimenus
i'm getting 'unable to evaluate constant expression' but it's kind of hard to troubleshoot

1578323682
mq32
dimenus: you need a comptime parameter for that

1578323685
mq32
but can you show code?

1578323701
dimenus
i'm using a comptime parameter, it's a bunch of code but i'll try

1578323812
fengb
I've ran into that a few times as well

1578323843
fengb
My understanding is that one of the parameters aren't properly comptime but that's only a guess

1578324310
dimenus
fengb:

1578324340
dimenus
It all works fine until I added a 'base_type' field to the Buffer struct

1578324343
dimenus
now it won't evaluate

1578324470
dimenus
hmmm, maybe my assumption is just wrong. The space occupied by type could be different depending on the type no?

1578324595
mq32
dimenus: you are not allowed to store types in runtime values

1578324654
dimenus
duh. my bad. i'll just store the typeid

1578324688
dimenus
all i'm doing is a bit of runtime type checking (knowing that compile time type checking is preferred)

1578328957
FireFox317
andrewrk: for the run-translated-c tests is it an idea to always concatenate in front of the test cases an static function `test_assert` which does `if (!ok) abort()`. In that way people that write run-translated-c test code, they can use this function instead of writing `if (x.a != 3) abort()` everywhere. I think this will work when #4083 is merged.

1578329003
FireFox317
I think the asserting is anyway a better approach then comparing the stdout

1578329076
via
i was considering just including assert.h and using asserts

1578329092
via
which just calls abort

1578329162
via
was planning to update #1158 to do that tonight

1578329175
via
er, #4085*

1578329237
FireFox317
well, the current code cannot translate assert.h correctly yet, and i think `assert` in assert.h also does other stuff like printing a stack trace or something

1578329273
via
i think abort() just does that

1578329283
via
but damn, nevermind then

1578329418
FireFox317
that's why i thought just add this function and use that in all the cases. But assert.h is also an option indeed

1578329429
via
actually it looks like it does fail to translate assert macro, but it still translates to correct asserting code

1578329655
TheLemonMan
yeah, your best bet atm is to use abort()

1578329721
via


1578329802
TheLemonMan
if the message goes to stderr that's also fine

1578329845
via
it does go to stderr

1578329893
TheLemonMan
I'm quite impressed by the perfect translation of the assert macro

1578329929
via
its kinda weird, the actual assert symbol is a @compileError, but it translates __assert_fail, and uses it

1578329944
FireFox317
Yeah I was just going to ask that via

1578329987
via


1578330017
FireFox317
How does that work lol

1578330035
TheLemonMan
hah, what the hell

1578330061
via
"if (@as(c_int, 1) == @as(c_int, 2)) {} else __assert_fail("1 == 2", "test.c", @bitCast(c_uint, @as(c_int, 5)), "int main(int, char **)");"

1578330096
TheLemonMan
oh right, clang desugars the macro

1578330120
FireFox317
ah yes, indeed lol

1578330123
TheLemonMan
it's the homebrew C tokenizer/parser we're using that fails to parse it

1578330198
FireFox317
so that is pretty nice, we can use assert in the test code. Well if it works on all platforms xd

1578330223
TheLemonMan
I'm not going to update all my PRs heh

1578330396
azth
mq32: are you referring to pjmlp's comment?

1578330425
mq32
yeah

1578330696
azth
pron's responses are interesting as well.

1578330715
azth
Does Zig have a story for addressing double-free, use-after-free, etc.?

1578330750
fengb
Yeah, the debug allocator:

1578330756
TheLemonMan
there's a WIP allocator that aims to catch most of those problems

1578330764
azth
Most, or all? :)

1578330778
mq32
"most"

1578330779
azth
From (

1578330790
azth
What can't it detect then?

1578330808
mq32
"use after free" cannot be detected on platforms that don't have MMUs with certain features

1578330812
fengb
It's execution based

1578330826
azth
Do you mean runtime caught?

1578330833
fengb
Yeah

1578330851
mq32
zig (as a language) does not now about a "heap", so there is no concept of "use after free" in the language itself, but it's a userland concept

1578330853
azth
That's a fair way to go about it. The question is, what can't be detected at runtime at the moment? mq32 mentions one example.

1578330860
fengb
So it's not quite robust like Rust

1578330890
fengb
Use after free will be caught by

1578330896
fengb
Double free might not though

1578330901
azth
It's a tradeoff as. Rust trades write time complexity to statically prove that use-after-free doesn't happen.

1578330927
mq32
azth: depends on the platform, but "invalid memory access" in general cannot be detected

1578330930
azth
If it's caught at runtime though, it can be a worth while trade to writing simpler code.

1578330949
fengb
mq32: we can detect writing to "undefined" for debug builds. And we can manually set all free memory to undefined

1578330950
mq32
azth, yeah but using rust for freestanding removes all this safety

1578330963
mq32
fengb: nice to know!

1578331045
fengb
azth: I definitely agree here. I just want to make sure we all understand that Zig's direction isn't theoretically "sound" :P

1578331090
azth
mq32, what do you mean by "freestanding"?

1578331096
mq32
using no OS

1578331105
mq32
so: no system-provided allocator

1578331106
fengb
Especially since this would most likely only exist in debug builds. I guess we can see how efficient it could be to include these features in release-safe

1578331106
azth
I see

1578331115
mq32
which means you don't have a concept of "malloc" anymore

1578331128
mq32
or more correct: you have to implement malloc in userspace

1578331150
azth
mq32, by "invalid memory access", do you mean things other than out-of-bounds reads/writes?

1578331167
azth
perhaps writing on the stack

1578331183
azth
return address buffer overflow?

1578331195
mq32
i mean "reading/writing any memory that has not been meant to be accessed"

1578331220
mq32
like non-existing memory for example

1578331222
fengb
We might need a 2nd concept of undefined here. "Mapped but not used" vs "unmapped"

1578331266
azth
mq32, fair enough, and in this case you're referring to Zig specifically, not Rust for instance,  correct?

1578331286
mq32
no, i refer to "executed code"

1578331294
mq32
like "mov [eax], 10"

1578331312
mq32
which will write 10 to the address stored in eax

1578331325
fengb
How do cpus handle non-existent memory?

1578331332
mq32
"it depends"™

1578331338
azth
Right, so it's the language/runtime's job to mitigate or prevent that then.

1578331339
mq32
Cortex-M3 will just do it

1578331343
mq32
and then ... stuff happens :D

1578331347
mq32
maybe nothing

1578331396
mq32
AVR will happily just read/write to "nothing" and give you random values

1578331414
fengb
Sounds like fun bugs :P

1578331425
mq32
x86_64 will do what the processor is configured to do

1578331478
mq32
so it may reset, just happily do what you told it, call an interrupt handler, invalidate caches and reload stuff, ... :D

1578331499
TheLemonMan
halt & catch fire

1578331538
nofmal
hello, is it possible to export a struct into c header file?

1578331566
nofmal
i tried `@export("foo_struct", extern struct { b: [128]u8, }, builtin.GlobalLinkage.Strong);`

1578331574
nofmal
but nothing shows up

1578331600
TheLemonMan
oh that should be a compiler error

1578331621
TheLemonMan
you have to declare a `export var`

1578331648
nofmal
really? but there was no compiler error tho?

1578331662
mq32
azth, i can't find the right rust code right now, but "@intToPtr([*]u8, 0xB8000).* = 'A';" is sometimes totally legit code and sometimes it's not

1578331776
mq32
and as long as your language does not know the difference between "heap pointers" and "non-heap pointers", you cannot really detect use-after-free or double-free

1578331784
mq32
at least at compiletime

1578331846
TheLemonMan
oh it seems that exporting some zig types is somehow supported... no idea what that's supposed to do tho

1578331889
TheLemonMan
speaking of AVR, it should be relatively usable as a target now

1578331907
mq32
TheLemonMan: nice! i wanted to try that this week agian

1578331968
TheLemonMan
the stdlib support is quite spotty as `usize` is only 16 bit wide and some casts may be needed here and there

1578331969
nofmal
TheLemonMan: i tried `export var` and it works. thank you so much

1578332010
mq32
i still wonder how usize is defined exactly

1578332019
nofmal
it kinda sucks that you have to make new variable and fill out all the fields tho

1578332043
mq32
i would like to see some other "special" ints as well: uintptr and uregister

1578332045
TheLemonMan
mq32, num_of_bits = log2(max_address)

1578332062
mq32
okay, so it's actually uintptr, not usize :D

1578332080
TheLemonMan
nofmal, you can just assign `undefined` to it if you're not interested in initializing it

1578332102
nofmal
TheLemonMan: yes i did in fact assign `undefined`

1578332112
nofmal
but still

1578332121
andrewrk
TheLemonMan, exporting types exposes them in generated .h files

1578332175
andrewrk
I've been neglecting the generate-h feature in stage1 though, hoping to spend time on it when it's self-hosted instead

1578332176
TheLemonMan
oh, that makes sense

1578332185
fengb
andrewrk: thoughts on this approach?

1578332263
andrewrk
fengb, it looks good to me. it depends on

1578332285
fengb
Actually no. Once I switched to this, everything else stopped complaining

1578332295
andrewrk
interesting

1578332303
fengb
Since nothing is fully recursive now, Zig is resolving it

1578332322
fengb
I think that still needs to be addressed to shrink the necessary frame size, but it's more of an optimization

1578332353
andrewrk
regarding the bloat - I think it's possible for the compiler to detect this situation and remove the bloat. there might already be an llvm pass that does this. I think it's something we can address in the compiler implementation details later

1578332366
fengb
Sounds good 👍️

1578332426
mq32


1578332436
mq32
ah

1578332442
mq32
mergefunc is the right pass

1578332444
andrewrk
yeah

1578332892
andrewrk
oh neat, jzck's kernel project is on hacker news front page

1578333193
scientes
damn, Knuth is old these days

1578333203
scientes
hope he gets as much done as he can

1578333208
scientes
as TAoCP is great stuff

1578333399
scientes
did anyone ever make a way of doing static linking at the llvm-ir level?

1578333422
scientes
like between rust, zig, and clang-compiled stuff?

1578333473
TheLemonMan
..LTO ?

1578333508
scientes
yeah, i think there is a LTO full mode

1578333553
azth
mq32: wouldn't using something like this (

1578333578
mq32
azth, yeah that's what the generic purpose allocator will do

1578333602
TheLemonMan
there's the full-fledged LTO and also ThinLTO for incremental LTO

1578333628
TheLemonMan
it's also the reason why LLVM requires so much ram during the linking phase...

1578333647
scientes
well lto has many modes

1578333659
scientes
and a true FULL lto is probably not common

1578333668
scientes
basically -fone-function

1578333698
andrewrk
azth, here is the safety project:

1578333714
andrewrk
you can sort of get an idea of what is planned with regards to safety here

1578333733
andrewrk
I'm guessing you're coming from the news article in which people are comparing zig and rust. I can give you the short summary there

1578333775
scientes
*-fwhole-program

1578333817
andrewrk
compared to rust, zig gives up compiler-guaranteed safety, in exchange for language simplicity. zig's safe release mode uses runtime checks, whereas rust's release mode is safe without any such runtime check cost

1578333843
andrewrk
in return, zig programs are simpler to read and understand than rust programs

1578333858
andrewrk
that's about it

1578333947
companion_cube
(rust does have to keep some runtime checks for RefCell and for bound checking)

1578333980
andrewrk
ah right

1578334064
azth
andrewrk, yes I understand that, and it's a completely fair tradeoff. My question is however, would safe mode Zig be able to detect all memory errors (at runtime) that Rust prevents at compile time?

1578334067
scientes
glibc is also full of runtime checks

1578334076
scientes
even for std::mutex

1578334089
companion_cube
i wonder, could pointers use pointer tagging (use the 2 LSB) to store a "generation" in them; the allocator also keeps a generation and these are matched upon `free`. 1 chance in 4 to be ok by chance in case of double free?

1578334135
mq32
companion_cube, that sounds like it would have too much potential for accidently messing up stuff

1578334185
azth
andrewrk things like double frees, iterator invalidation, etc. If not, would a list of such errors be made available, if that's possible to begin with?

1578334187
andrewrk
azth, no certainly not all memory errors. however I do have a plan for most use-after-free and double-free bugs

1578334213
andrewrk
azth, yes - subscribe to this issue:

1578334226
azth
andrewrk thanks, will do.

1578334302
TheLemonMan
companion_cube, the mask/unmask overhead is possibly non-negligible

1578334317
companion_cube
mq32: why so? it's purely for checking generations on 2 bits, tagged pointers are truly safe

1578334332
companion_cube
you don't need to unmask to dereference afaik

1578334363
TheLemonMan
you do if you want to deference the correct location :P

1578334385
andrewrk
maybe companion_cube are you thinking of that new arm hardware?

1578334409
andrewrk
it has a masking deref op

1578334421
companion_cube
on x86_64 I think it's safe? if you deref aligned data of course

1578334439
andrewrk
companion_cube, the point is that you're storing data in the bits that would normally be 0 due to alignment

1578334462
andrewrk
ah the hardware feature is called ARM Memory Tagging Extension

1578334478
scientes
companion_cube, you would still get differnt data

1578334481
scientes
you have to mask

1578334500
companion_cube
I could remember wrongly, but I know some C programs that do that and I don't remember they used a mask (but maybe they do)

1578334509
scientes
and even if the x86_64 cpu is 48-bit the top bits have to be sign extended of the 48th bit

1578334520
mq32
companion_cube: x86_64 does not enforce alignment for most instructions, only SSE and such enforce alignment

1578334534
mq32
so "0x8001" is a totally valid address for a 64 bit integer

1578334536
scientes
companion_cube, yes javascript engines that use NaN boxing have to mask the top bits

1578334538
mq32
at least to my knowledge

1578334548
companion_cube
I'm talking about the LSB, not MSB, though.

1578334562
companion_cube
(hence you only get 4 generations)

1578334568
scientes
otherwise you get SIGSEGV

1578334570
mq32
same for "0x1001" and "0x0001"

1578334731
companion_cube
I really thought you could deref `0xfoobar001` as if it were `0xfoobar000`…

1578334761
companion_cube
maybe the stuff I remember did mask with `~0x3`.

1578334766
scientes
companion_cube, you would get one bit off

1578334777
scientes
companion_cube, as aligned access works on x86_64

1578334781
scientes
*byte off

1578334802
scientes
on arm <armv6 you would get the data rotated by a byte

1578334809
scientes
which is kinda wierd

1578334820
scientes
but you can't rely on that, cause the kernel might be set to trap on unaligned accesses

1578334834
scientes
and armv6+ changes that to support unaligned access

1578334845
mq32
companion_cube:

1578334922
companion_cube
ah, so maybe the C code was UB… I wouldn't be surprised

1578336239
fengb
Hmm, why is ELF overhead so big?

1578336261
TheLemonMan
is it?

1578336275
scientes
fengb, with small files it is just the 4KB padding

1578336301
scientes
so that it can be mmaped in

1578336356
fengb


1578336385
scientes
companion_cube, oh woah, you can execute binaries now on godbolt?

1578336386
scientes
that is new

1578336394
mahmudov
hi,

1578336395
mahmudov


1578336416
mahmudov
i got this from

1578336446
mahmudov
am i missed something?

1578336453
fengb
`".{a_string, a_number}"` this is new syntax introduced in master branch

1578336470
fengb
So you'll need to download the nightly build of zig for that

1578336483
fengb
Or alternatively switch to older docs (but I don't recommend that at this point)

1578336484
scientes
fengb, look at the fine under hexdump

1578336493
scientes
you will see lots of zeros in the 4kb padding

1578336614
andrewrk
fengb, when I messed around with ELF I was unable to get it to work without aligning sections to 4K

1578336623
mahmudov
so documentation goes with master

1578336633
andrewrk
and if you have a .text section and a .data section, both aligned, that's 8K right there

1578336648
andrewrk
mahmudov, at the top of the page there are links to other versions

1578336652
fengb
mahmudov: it's in the url. We also have

1578336698
fengb
Googling "elf alignment" doesn't give me what I need XD

1578336704
andrewrk
ha

1578336707
mahmudov
i am tracking zig version as os packages

1578336716
mahmudov
is there any up-to-date way?

1578336770
mahmudov
or git pull and compile is valid for tracking?

1578336780
andrewrk
what os?

1578336787
mahmudov
milis linux

1578336801
mahmudov
it is based on lfs

1578336810
andrewrk
never heard of either of those, what package manager does it use?

1578336822
andrewrk
the builds from the download page are static, they will work on any linux

1578336829
TheLemonMan
lfs = linux from scratch ?

1578336875
mahmudov
yes TheLemonMan

1578336884
mahmudov
uses own lfs though

1578336911
mahmudov
andrewrk,

1578336923
mahmudov
is uses this directive file for building

1578336938
andrewrk
looks like that should be updated to 0.5.0

1578336953
mahmudov
ok

1578336966
mahmudov
llvm 8.0.1 is ok for 0.5.0 ?

1578336986
andrewrk


1578336987
TheLemonMan
a turkish distro, cool, reminds me of pardus

1578337029
mahmudov
ah ok andrewrk

1578337048
andrewrk
btw, any person who enjoys wasm want to experiment with setting up a zig-in-the-browser sandbox where the programs are executed client-side?

1578337061
mahmudov
btw just curious, zig master always tracks current llvm?

1578337072
andrewrk
mahmudov, yes

1578337089
TheLemonMan
speaking of llvm, where the hell is LLVM 9.0.1?

1578337089
andrewrk
at least for now - and our releases are 1-3 weeks after llvm releases

1578337104
andrewrk
heh yeah the final rc was weeks ago

1578337112
fengb
andrewrk: I'd love to. Though last time when I tried it, I was hitting major emscripten bugs

1578337117
andrewrk
ah

1578337124
andrewrk
I think I saw that someone got it working for clang, which gave me hope

1578337130
mahmudov
i am asking because so tracking zig also need to track llvm versions

1578337139
mahmudov
will need*

1578337157
TheLemonMan
oh it was released on the 20th of December, still no trace of it in the APT repo

1578337186
andrewrk
fengb, it downloaded a lot of bytes, but I think in zig with some #ifdefs for emscripten we can lighten the load. for example we can disable the @cImport feature

1578337256
fengb
I can try again now that I have a bit more experience

1578337296
andrewrk
fengb, here's the project I was thinking of:

1578337341
fengb
Oh neat

1578338141
ntgg
is there a way to create a struct from comptime known []u8 and types?

1578338153
scientes
slick

1578338199
scientes
ntgg, I think you have to write it to memory, because you are upping the alignment

1578338276
ntgg
scientes: write what to memory?

1578338292
scientes
the []iu8

1578338293
scientes
[]u8

1578338300
scientes
well, if that is a slice, it already is in memory

1578338304
scientes
but you have to make sure it is aligned

1578338318
scientes
and then use @ptrCast

1578338469
ntgg
I meant is there a way to create a struct with fields of the []u8 names, and types of the types

1578338497
mq32
ntgg: you can just use std.meta.fields to get an array of that?

1578338523
mq32
oh wait

1578338525
ntgg
I want to do the opposite

1578338529
mq32
ah yeah

1578338539
mq32
there is a function @Type() which does that

1578338546
mq32
but it is not possible to reify structs with that

1578338589
ntgg
That is exactly what I was looking for

1578338592
fengb
You should be able to do `@field(struct, "name") = val`

1578341470
frmdstryr
Do stacktraces work on the freestanding os by default or do they need enabled somehow?

1578341533
FireFox317
is this currently possible to implement in zig? I have to use the result-location i guess, but i'm not sure how.

1578341580
FireFox317
frmdstryr: you have to enable them. See clashOS or LIMNOS for example repo's.

1578341619
TheLemonMan
FireFox317, declaring a local and returning it by value should do the trick

1578341718
andrewrk
FireFox317,

1578341745
FireFox317
Thanks guys! I will try to implement it

1578341746
andrewrk
#2765 is more for when you need to make fields have pointers to other fields

1578341753
andrewrk
which is not the case for all 0's

1578342339
fengb


1578342364
fengb
Thoughts? I think the latter captures "correctness" better but the data feels a little duped

1578342548
mq32
fengb, give me a second :)

1578342610
mq32


1578342614
mq32
what about tagged union? ;)

1578342670
fengb
I was trying to avoid the .? unwrap for the suspended frame since that "feels" gross

1578342683
mq32
hm

1578342701
mq32
will the frame change between suspend and consume?

1578342707
fengb
And also, the "out" is still technically available. I just hide it "just cause you might misuse it"

1578342712
fengb
Nope

1578342739
fengb
So I'm not sure. The ML part of me is attacking the sys part of me >_>

1578342741
mq32
it will be valid from "first start" until the generator switches to "complete", right?

1578342768
fengb
It "starts" in the complete  state. I need to rename it

1578342784
fengb
But I couldn't figure out what word to use "start / complete"

1578342803
mq32
can you elaborate what the state exactly means?

1578342860
fengb
pending = we've stored an item in the generator, consumed = the previous item was used, complete = generator hasn't been initialized or has been complete

1578342993
fengb
The first really only exists because there's an internal weirdness that I can't resolve nicely :/

1578343076
mq32
hm

1578343104
mq32
you could rename "complete" to "inactive"

1578343112
fengb
That sounds so much better lol

1578343117
fengb
I could also do `if (out) |stored an item| else if (suspend) |resumable| else |complete|`

1578343129
fengb
The state is slightly more implicit but there wouldn't be this weird juggle

1578343238
mq32
hmm

1578343373
mq32
but looks like you got generators working on top of async, right?

1578343472
fengb
Yep

1578343500
fengb
Trying to resolve this footgun and getting into a bunch of internal arguments on which is the best way :P

1578343561
mq32
nice

1578343602
FireFox317
I made #4092 regarding std.mem.zeroes

1578343655
TheLemonMan
FireFox317, I'd add a comptime check to make sure T is not zero-sized

1578343740
mq32
FireFox317: i would use some comptime reflection to fill everything in the struct with zero

1578343752
mq32
not for extern/packed types, but for zig-native ones

1578343757
mq32
as they

1578344188
FireFox317
Okay, will see what I can add

1578345888
fengb
`error: else prong required when switching on type '*fmtgen.Generator([]const u8)'` but I have an exhaustive switch...

1578346001
fengb
Oh oops, I need to switch on self.*, not self

1578346063
xackus
CI for my PR failed on some unrelated test on Windows with OutOfMemory

1578346484
fengb
Is this the best way of setting unions? Feels a little verbose: `self.* = .{ .running = {} };`

1578346572
mq32
probably just "self.running = {};"

1578346588
fengb
That leads to inactive union field

1578346686
mq32
huh, okay

1578346751
mq32


1578346756
mq32
works for me ¯\_(ツ)_/¯

1578347052
fengb
`access of inactive union field -- self.pending = .{`

1578347092
fengb
I also tried `self.*.pending`. Maybe it's a bad quirk with pointers?

1578347202
fengb
Ah this doesn't work with fields that are structs

1578347217
fengb


1578347482
mq32
i would call this a bug

1578347537
fengb
Also is there a quick way of extracting an enum from the union?

1578347707
fengb
Oh `@TagType`. It helps to RTFM

1578347779
mq32
@TagType to get the type and @as(TagType, unionValue) to extract the enum

1578347835
fengb
`std.meta.activeTag` which does the same :P

1578347853
mq32
oh wow :D

1578348029
mq32
std.meta has all the things :D

1578348377
fengb
I split out initial and complete. This model makes a bit more sense even if both behaviors are currently identical

1578348720
mq32
"do nothing"?

1578348870
andrewrk
I don't think extern structs can be 0 sized

1578349102
fengb
Actually I just gave `.initial => unreachable`

1578349116
fengb
Resuming a generator that isn't running is a dev bug

1578349623
fengb
Actually... I can't detect this reliably. I'll revert to the merged value

1578349656
mq32
that sounds a bit like you have a API design issue

1578349669
mq32
can you make me an example on how to use generators?

1578349723
fengb


1578349748
fengb


1578349847
mq32
hmm

1578349857
mq32
can't you pass the frame storage location from the outside?

1578349909
fengb
Yes but you need to declare the type at the `foo = async func()` site

1578349963
mq32
you can also get the frame type with @Frame()

1578349969
fengb
And to make it easy, that frame needs to exist on the stack somewhere. I can't shove it in a "normal" struct, so I'd need to dump it into a generic built struct

1578349971
mq32
let me think a bit

1578350006
mq32
maybe it can work with result location

1578350082
mq32
i kinda feel like i miss something

1578350095
mq32
but can't you store the frame in a struct returned from genFunction?

1578350336
traviss
does this look like a bug to anyone else?

1578350387
traviss
shouldn't it be new_align <= old_align  ?

1578350444
fengb
Not unless the struct is comptime generic, which I'm trying to avoid

1578350492
mq32
hmm

1578350506
mq32
nah, forget it

1578350511
mq32
> "can't you store the generator in the frame itself"

1578350515
fengb
This style of generator actually allows any function in the same execution stack to yield to it. I'm not sure if it's better than making generators easier to create / consume, but it definitely make the coding easier

1578350591
mq32
the best api would probably something like

1578350611
mq32
const runner = generate(myFunc, args); while(runner.next()) |x| {}

1578350612
andrewrk
traviss, yes it looks like a bug to me too. I think it should be checking against the actual alignment, rather than old_align

1578350676
fengb
Shouldn't old_align be actual alignment?

1578350741
fengb
mq32: I tried that but I don't know how myFunc could yield to the generator. It becomes a weird catch 22 where the function needs somewhere to yield, and the generator needs somewhere to store the frame

1578350746
andrewrk
old_align is the client-tracked value of the old

1578350816
traviss
ok good news. thanks to Rageoholic in discord for pointing this out.

1578350973
andrewrk
thanks rageoholic!

1578350982
andrewrk
greetings from irc land

1578351451
xackus
andrewrk CI for my PR failed on some unrelated test on Windows with OutOfMemory

1578351977
andrewrk
xackus, it might not be unrelated - I see json code in that stack trace

1578352048
andrewrk
oh I see, it appears to be os.getEnvMa

1578352083
andrewrk
xackus, don't use debug.global_allocator - construct your own fixed buffer allocator using stack memory in the test case

1578353824
andrewrk
could be interesting:

1578354017
andrewrk
hmm it looks like C-Reduce itself might even work for zig:

1578354033
andrewrk
it would be neat if someone tried this and reported whether it works for zig

1578354270
fengb
I can take a look tonight. There’s a few bad crashes with the format changes

1578354980
andrewrk
breaking changes regarding fn calling conventions merged into master:

