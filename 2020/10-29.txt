1603930102
dominikh
semi-related, I was wondering about the viability of this approach: instead of using @cImport, manually use translate-c, and then modify the output to clean it up â€“ more idiomatic type names, adding methods, changing C pointers to the appropriate Zig pointers.

1603931859
g-w1
I just tried this, I think this works: `extern fn foo(bar: u32) u32; const baz = foo; baz(bar);`

1603933330
dominikh
oh that's neat

1603933763
dpdp
im calling var value_tree = try json_parser.parse(json); and trying to figure out which json type value_tree.root is.

1603933785
dpdp
every attempt at using @TypeOf and/or @Tagtype has failed. can someone point me in the right direction

1603933844
dpdp
(using zig HEAD as of a month or two ago, so newer than 0.6)

1603933951
dpdp
the most recent attemtp being "if (@TypeOf(value_tree.root) == std.json.Value.Array) {" => incompatible types: 'type' and '@TagType(std.json.Value)'

1603933981
a92
How did these attempts fail? Was there an error message?

1603934005
g-w1
i think this is the error: incompatible types: 'type' and '@TagType(std.json.Value)'

1603934159
g-w1
dpdp: are you using the standard library json parser?

1603934189
dpdp
yup.     var json_parser = std.json.Parser.init(allocator, false);

1603934226
dbandstra
`if (value_tree.root == .Array)` should work

1603934238
g-w1
It is just an enum so u can just match the tags

1603934280
dbandstra
or `switch (value_tree.root) { .Array => |x| { ... `

1603934353
dpdp
dbandstra: if ... == .Array worked. thanks! I was banging my head agaist that for a long time

1603934365
dpdp
not sure why std.json.Value.Array wouldnt be equivalent

1603934420
dpdp
hmm actually that does seem to be equivalent o^O

1603934421
dbandstra
that should work too

1603934448
dbandstra
but you don't use TypeOf because you're actually trying to look at the runtime value of `value_tree.root`

1603934658
dpdp
laptop battery almost dead. goota run. thx for the help.

1603934777
andrewrk
I think the macos regression (causing failing CI) is fixed with my latest commit

1603935148
g-w1
Just out of curiousity, how much longer does that make it take?

1603949039
pjz
x

1603962672
ask6155
hello

1603962697
alexnask[m]
hi

1603962833
ask6155
there is a function which needs two *ints (x,y) so it can put values into it. so I decided to make a zig struct called vec2. it had two fields x,y both as c_int... what should I pass to the function?

1603962975
ask6155
do I pass the struct.x or *struct.x?

1603963484
alexnask[m]
ask6155: If the function takes *int, you should pass &struct.x

1603964002
ask6155
okay it works now, thanks

1603971350
Kena
Hello bits and bytes people. Please what does `unreachable` do in ReleaseSmall mode?

1603971400
frmdstryr
No-op

1603971506
frmdstryr


1603971657
Kena
No-op means it has zero cost in time and space, right?

1603971674
Kena
0 bytes allocated and 0 microprocessor cycle use I mean.

1603972017
frmdstryr
Not sure, I think it depends on whether the optimizer can remove it completely.

1603972041
g-w1
to be sure, you could try it on zig.godbolt.org

1603972227
ifreund
Kena: unreachable allows the compiler to generate code as if the given state is truly impossible to reach. This means that there is no code generated for the unreachable statement itself but it allows surrounding codegen to potentially be done more efficiently

1603972266
ifreund
if your program does reach this state you told the compiler was unreachable though, that is UB and truely anything could happen

1603972276
ifreund
i.e. the best outcome is a crash

1603972582
frmdstryr
The llvm docs are similarly unclear

1603972598
frmdstryr
gcc's __builtin_unreachable() is more helpful

1603972675
ifreund
to the contrary, the llvm docs state exactly what it does

1603972714
ifreund
It has "no defined sematics" i.e. reaching it is UB

1603973300
frmdstryr
Saying what it doesn't do isn't what it does :)

1603973352
ifreund
well that's the point, what it does is undefined

1603973498
Kena
Thank you frmdstryr, g-w1, ifreund

1603973714
Kena
By the way g-w1, do you have a degree in software engineering, computer ingineering, computer science or did you learn programming yourself? I'm still impressed that you're developing a compiler.

1603986567
ifreund
tdeo: just ported my scanner to use your xml parser which is working great. Do you know how best I should handle licensing? ISC is "equivalent" to MIT according to wikipedia but I probably still have to ship two LICENSE files or something

1603987004
g-w1
Kena: I have done all my computer science by myself with no formal stuff. But my compiler is not that big. Its just for fun to see how things work.

1603987949
Ristovski
Just out of curiosity, is it possible to "serialize" a struct for example (into something like a byte array, for sending via network etc)

1603987969
pixelherodev
For sure

1603987971
Ristovski
I think I have heard of this on some github issue, maybe even here as well, but I wonder how custom types would be handled

1603987985
pixelherodev
Look at what happens with e.g. `std.debug.warn("{}", .{some_struct_instance});`

1603988001
pixelherodev
If you define a `pub fn format` in the struct, it'll use that to serialize it, I believe

1603988002
Ristovski
Yeah exactly, it seems like it would be fairly 'easy'

1603988009
pixelherodev
Check out fmt.zig in the standard library

1603988031
Ristovski
Hmm, will do, thanks!

1603988044
pixelherodev
:)

1603988053
Ristovski
I have some C++ code that uses capnproto for serialization, which I would love to port to Zig with no external deps

1603988143
Nypsie[m]
Ristovski: There's also std.serialization that you could check out

1603988167
Ristovski
Nypsie[m]: oh huh, how did I miss that? neat

1603992853
ugla


1603992928
ugla
Oh, no deps, never mind :)

1603993059
companion_cube
although zig serialization is not standard, is it? if you need to talk to other programs it can be a problem

1603993112
Ristovski
ugla: Oh nice! Well, "no deps" would just be an extra nice thing to have (or in this case - to not have :P)

1603995246
andrewrk
latest CI failure on macOS is this message: Assertion failed: (timeout != -1), function uv__io_poll, file ../deps/uv/src/unix/kqueue.c, line 231

1603995258
andrewrk
wtf? we have no libuv anywhere in zig or in the ci script

1603995319
Ristovski
perhaps in some macos lib?

1603995360
g-w1
Why do all the bugs need to be right before the release? :(

1603995443
andrewrk
std lib tests do not link any libs other than libSystem

1603995543
Ristovski
perhaps libSystem uses libuv then?

1603995557
Ristovski
although that would be quite odd

1603995567
g-w1
this seems like same assertion error

1603995575
g-w1
seems like the wrong darwin version

1603995591
ifreund
g-w1: because llvm releases shake them out :P

1603995763
andrewrk
node.js depends on libuv and zig does not. so this makes no sense

1603995803
andrewrk
the only thing I can think of is that azure pipelines runs on nodejs or something like that

1603995807
g-w1
yeah

1603995814
g-w1
this was opened yesterday

1603995815
Ristovski
Oh hmm, that could be it

1603995829
andrewrk
yep ok that's it

1603995877
fengb
Azure CI uses nodejs under the hood?

1603995913
g-w1
i think so. lol

1603996607
pixelherodev
Shocker.

1603996631
g-w1
its actually typescript because microsoft

1603996744
andrewrk
all aboard the merge train. CHOO CHOO!

1603996751
Nypsie[m]
Chooo choooo

1603996756
pixelherodev
Nice! :)

1603996780
companion_cube
ðŸš‚ðŸšƒðŸšƒðŸšƒðŸšƒðŸšƒ

1603996913
pixelherodev
Below 40 PRs! We need to send more to fix this!

1603996915
pixelherodev
;)

1603997948
Kena
Regarding to the optional pointer, please why address 0 is more manageable/desirable than null value?

1603998006
pixelherodev
What do you mean?

1603998043
pixelherodev
For a typical optional pointer, "zero" is technically the value of a null pointer, it's just less blatant than in C

1603998067
pixelherodev
(e.g. `= 0` is a compile error in zig)

1603998210
Kena
It is a compile error for every types you mean?

1603998233
pixelherodev
You can use `allowzero` if you're working on e.g. kernel code

1603998237
g-w1
Only for pointers. It is not for integers.

1603998240
pixelherodev
^

1603998256
Kena
lol Ok I was afraid for a moment.

1603998261
Kena
Thanks both of you :)

1603998315
pixelherodev
:)

1603998328
pixelherodev
It's one of the small quality-of-life improvements Zig has :)

1603998362
Kena
(e.g. `= 0` is a compile error in zig) could be added in the documentation at

1603998416
pixelherodev


1603998710
pixelherodev
I'm a bit busy reviewing a 22K line diff :P

1603998950
scientes
Kena, it is here, sort of

1603998969
g-w1
are null pointers also checked at runtime?

1603998981
scientes
g-w1, they are in safe mode

1603998986
g-w1
cool

1603999603
Ristovski
Any reason why the std docs website is not updated frequently?

1603999621
ikskuh
afaik it's a manual process

1603999627
Ristovski
hmm, I see

1603999633
Ristovski
it's "master" is still at 0.6.0+204f61d7f

1603999655
Ristovski
indeed - handled by a script

1603999676
pixelherodev
Any reason that's not e.g. on a weekly cronjob?

1603999702
Ristovski
Yeah, my question exactly

1603999707
Ristovski
it's currently 4 months out of date

1603999717
Ristovski
which in Zig progress time, is quite a lot

1603999836
Ristovski
andrewrk: Could this be automated? it would be very nice to have up-to-date docs for std

1603999869
andrewrk
yes it sure could

1603999871
Ristovski
ideally, it should correspond to the latest master/nightly release

1603999901
andrewrk
I bumped it down to 0.7.0 milestone, but no promises that I'll have time to do it by the release - lots of other things to get done too

1604000008
scientes
Ristovski, look in the ci folder

1604000704
Ristovski
Hmm, is -femit-docs broken on master? `zig test lib/zig/std/std.zig -femit-docs -fno-emit-bin` fails with 'Terminated' after semantic analysis (also --output-dir has been removed)

1604000819
Ristovski
Oh actually, that might be caused by earlyoom :/ I assume this might be quite memory-intensive

1604001010
Ristovski
Yup, too memory intensive for my measly 8GB of ram

1604001154
g-w1
can someone tell me which one of these flags cause the output binary to be in a different place please? /drone/src/build/zig build-exe -cflags -std=c99 -- /drone/src/test/standalone/shared_library/test.c --library /drone/src/test/standalone/shared_library/zig-cache/o/06dd1d74d6beba6ec58d8ec19bc295fc/libmathtest.so.1.0.0 -rpath /drone/src/test/standalone/shared_library/zig-cache/o/06dd1d74d6beba6ec58d8ec19bc295fc

1604001156
g-w1
--library c --cache-dir /drone/src/test/standalone/shared_library/zig-cache --name test --enable-cache

1604001205
g-w1
my pr is failing because of it and I want to know where the output binary would be, because it is not $pwd/test?

1604001962
ifreund
--cache-dir i assume

1604001985
g-w1
you think it makes it output to $cache-dir/bin/test?

1604002111
ifreund
that would be my guess

1604005992
Ristovski
Can someone confirm -femit-docs works on latest master? I tried it on a beefier machine and I get 'error: unable to find '{io,fs,os,json,net,linux}/test.zig''

1604006007
Ristovski
Or perhaps that is no longer the way to generate the docs

1604006332
Ristovski
aah,

1604010887
wilsonk_
test

1604011066
g-w1
hi

1604011115
wilsonk_
hey g-w1

1604014501
andrewrk


1604014505
andrewrk
zig 0.7.0 release postponed to 2020-11-07; release party is the next day

