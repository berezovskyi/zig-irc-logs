1597391033
bgiannan
Updated zig and got `lld: error: Unable to find library for -lSystem` when building my project. Since i'm on macOS Big Sur I suppose it's related to that ?

1597391468
Nypsie[m]
Yeah, but I believe a PR was merged to fix that for macOS Big Sur

1597391651
Nypsie[m]
(Trying to find the PR for you)

1597391705
Nypsie[m]
Ah, I think it was this one but not sure:

1597392009
bgiannan
that commit is one month old, and i just downloaded the last master version of zig

1597392110
Nypsie[m]
Hmmm

1597392118
Nypsie[m]
I'll ask one of the Big Sur users on Discord

1597392135
Nypsie[m]
Using Catalina myself so can't really help :s

1597407575
cren
how do you/can you/should you make program constants in Zig? Like things you would do in C with #DEFINE

1597409173
ifreund
just a variable really

1597409193
ifreund
cren: do you have a particular use case in mind?

1597410824
cren
ifreund, it's MAX_MESSAGE_SIZE: u8

1597410841
cren
it's just that I found I couldn't declare a constant in the global scope

1597411551
ifreund
how so?

1597411583
ifreund
oh you mean that it has to be inside a namespace? Yeah that's a feature

1597411777
ifreund
you could have e.g. a `defs` struct that has all your things in its namespace and then import that everywhere

1597413513
Nypsie[m]
bgiannan: Seems like the other Big Sur user is also running into trouble since beta 3. Beta 2 was working fine, but 3 and 4 both don't seem to work, fwiw.

1597413594
bgiannan
Nypsie[m], ok. The last update put my mac in a boot loop, i had to reinstall the system so i'm won't update for a while

1597415382
danyspin97
I was reading the source code and I saw an abstraction over os.listen, os.accept

1597415416
danyspin97
is it usable?

1597415469
danyspin97
std.net.StreamServer

1597415504
Nypsie[m]
Very usable for non-windows platforms

1597415517
Nypsie[m]
If you require Windows support, zig-network is a great option

1597415550
danyspin97
Nypsie[m]: my program is unix-only, so that's perfect!

1597418719
danyspin97
StreamServer did work, now I'll wait for StreamClient Implementation

1597418757
danyspin97
btw, I think the code is too condensed in few files :/

1597419489
Nypsie[m]
Not sure what you mean with StreamClient. You can already implement a tcp client using std

1597419554
pixelherodev
There isn't one

1597419557
pixelherodev
I think that's their point

1597419596
Nypsie[m]
Ah I see

1597419758
pixelherodev
danyspin97: whatcha working on, if you don't mind me asking?

1597419762
pixelherodev
You've piqued my curiousity :)

1597419791
danyspin97
Nypsie[m], pixelherodev: yup, I use os.socket and the other functions

1597419816
danyspin97
but since there is a StreamServer, I think it makes sense to provide an abstraction for other side

1597419849
pixelherodev
You could write one ;)

1597419884
danyspin97
pixelherodev: I am working on

1597419900
danyspin97
which is my first project using zig :)

1597419915
danyspin97
agreed about that, I also wanted to write a unsetEnv method

1597420066
Nypsie[m]
Btw, zig-network will be merged in std at one point, which will provide an abstraction over the OS's

1597420099
Nypsie[m]
Then you will just be able to write to a socket os-independent.

1597420164
danyspin97
I don't personally mind about that but I see it would be very useful for someone

1597426621
danyspin97
os.linux.syscall* returns a usize

1597426629
danyspin97
though some syscall return negative values

1597426719
danyspin97
okay, casting it to i32 does the trick

1597426721
andrewrk
@bitCast

1597426732
danyspin97
andrewrk: @intCast is correct too, isn't it?

1597426761
andrewrk
only if the value is mathematically in the range of an i32. if you want to reinterpret the usize as twos complement you need bitcast

1597426789
danyspin97
wdym by twos complement?

1597426838
andrewrk
if the syscall returned the mathematical number -1, it does it in a register, which is a usize. that would be the value 0xffffffffffffffff (18446744073709551615). If you try to @intCast that to an i32, zig will panic and say it doesn't fit

1597426867
danyspin97
it worked though

1597426869
andrewrk
however if you @bitCast(isize, rc) you will get -1, and you could then @intCast that to an i32 if you want to make it smaller

1597426898
andrewrk
when you say, "it worked" are you saying that you tested a case when the syscall returned a negative number?

1597426904
danyspin97
yea

1597426910
danyspin97
I am trying it right now

1597426918
danyspin97
and @intCast does not panic

1597426930
andrewrk
and you get a negative value?

1597426937
danyspin97
I get -1

1597426944
danyspin97
which is the expected value for me

1597427016
danyspin97
now the only thing not working is errno

1597427031
danyspin97
(i update zig-master today, that may be it)

1597427053
pixelherodev
danyspin97: are you using release mode?

1597427057
pixelherodev
a release mode*

1597427067
danyspin97
default mode, running zig build

1597427081
andrewrk
well paint me red and call me a fire truck. how long has this been broken?

1597427105
andrewrk
goodness

1597427116
andrewrk
I wonder what bugs lurk in everyone's code that have not been caught by this

1597427215
pixelherodev
... there's not already a behavior test for it?

1597427230
andrewrk
there is about to be

1597427260
danyspin97
also, errno is not working for me anymore

1597427274
danyspin97
std.c._errno().* is it the correct way?

1597427361
andrewrk
what abstraction level are you targeting? posix? libc? linux only?

1597427375
danyspin97
I am using std.os.linux.syscall for now

1597427395
danyspin97
so linux-only target for now

1597427408
andrewrk
std.os.linux.getErrno

1597427417
danyspin97
Ah, I see

1597427424
danyspin97
but I am sure it worked some days ago

1597427444
andrewrk
I don't know what you did days ago, but the proper way to get the errno from a raw linux syscall is that function

1597427490
andrewrk
note that you are operating under an abnormally low abstraction level. typically one would target a more portable abstraction layer

1597427522
danyspin97
yup, I was using std.c._errno() and with a someday older version of zig I got the errno

1597427545
danyspin97
you mean I should use std.os instead of std.os.linux?

1597427547
andrewrk
I don't recommend using libc errno except under very specific circumstances. use the function appropriate to the abstraction layer you are using

1597427563
danyspin97
I agree, I was just reporting the different behaviour

1597427648
andrewrk
anyway thanks for reporting the -1 thing. I'm looking into that now

1597427672
shachaf
The classic thing for Linux system calls is that errors are in the range (UINTPTR_MAX-4096,UINTPTR_MAX], right?

1597427676
danyspin97
thanks for the really good explanation :)

1597427761
andrewrk
if you're using the std.os (to be renamed std.posix) layer, it has an errno function

1597427780
shachaf
Oh, I guess this is going through libc or something with errno.

1597427808
andrewrk
yes shachaf - but zig std lib abstracts over the fact that sometimes it's obtained directly from the syscall rc value and differently when using libc

1597427809
pixelherodev
I still say pozix makes more sense, since it's Zig-flavored posix ;)

1597427821
danyspin97
I see, however I am using Linux specific syscalls so I need std.os.linux.getErrno

1597427831
shachaf
Right.

1597427843
andrewrk
danyspin97, out of curiosity, what linux syscalls are you using that are not covered by std.os?

1597427854
danyspin97
ioprio_set

1597427860
andrewrk
gotcha

1597427877
danyspin97
and sched_setscheduler

1597427885
pixelherodev
It's very nice ;)

1597427904
danyspin97
it's nice in all sense

1597427909
danyspin97
since I am also using nice(2)

1597427914
danyspin97
;)

1597427919
andrewrk
danyspin97, you'll probably want to have a look at std.os.linux source code for inspiration, to get an idea for how to properly convert your args to usizes for the purpose of calling the syscall1, syscall2, etc functions

1597427946
danyspin97
andrewrk: thanks, I did some testing and finally I was able to got them working

1597427968
danyspin97
the only thing still not really clear to me is the conversion between []u8 to [c*]u8 and literals

1597427980
andrewrk
just remember: @intCast is for preserving the mathematical number. @bitCast is for preserving the bit pattern

1597427990
ifreund
well, I have now got wasm to the point of actually being able to run and debug it :D

1597427996
andrewrk
ifreund, wow!!

1597427998
pixelherodev
nice

1597428003
ifreund
of course it doesn't work yet though :D

1597428010
pixelherodev
I'm inspired to work on the HEX backend now ;)

1597428012
Nypsie[m]
ifreund: Nice work!

1597428088
andrewrk
ifreund, I briefly took a look at the wasm spec just now and pleased to see that the way zig's loop IR works will be straightforward with wasm

1597428096
andrewrk
in fact it looks identical

1597428126
ifreund
I think I may have been unclear, I'm running and debugging the wasm backend for the compiler not wasm code yet

1597428129
ifreund
still cool though

1597428153
ifreund
and yeah, wasm seems like it will map fairly well to the ir

1597428243
andrewrk
ah gotcha

1597428265
pixelherodev
andrewrk: I submitted a minor cleanup PR, when you get a chance to look at it

1597428279
pixelherodev
Trying to stick to the one-pr-at-a-time thing :P

1597428317
ifreund
so it seems like updateDeclExports() is being called before updateDecl(), I thought that wasn't supposed to happen?

1597428364
pixelherodev
ifreund: thanks for  2fc18b52788f789ceba7b4f60e850de3ce67495c ;)

1597428372
pixelherodev
(stage2: make link data in Decl into unions)

1597428381
ifreund
np

1597428410
ifreund
theres some more Elf-specific stuff in Module.Export that I found today, but that can be another PR

1597428420
pixelherodev
Also, you're right

1597428428
pixelherodev
updateDeclExports is only supposed to happen after updateDecl

1597428520
ifreund
my printfs say that's not what's happening, perhap I'm doing something wrong though

1597428546
ifreund
running zig build-obj -ofmt=wasm

1597428587
andrewrk
don't you need to do -target wasm32-freestanding ?

1597428615
andrewrk
which should select wasm object format by default

1597428622
andrewrk
(and error out on any other ofmt override)

1597428682
ifreund
doesn't seem to make a difference what combination of -ofmt and -target I use

1597428725
ifreund
for reference this is what I'm testing with

1597428757
pixelherodev
ifreund: updateDeclExport has to run after a call to updateDecl

1597428793
pixelherodev
Heck, updateDeclExports is called

1597428832
ifreund
what I'm currently seeing is updateDeclExports being called before

1597428855
pixelherodev
but I think you're right

1597428857
pixelherodev
yeah

1597428862
pixelherodev
Module.zig is calling updateDeclExports on the link.File

1597428865
pixelherodev
I think that's wrong

1597428878
pixelherodev
Module.zig:1878

1597428909
andrewrk
it's allowed to do the export before updateDecl

1597428919
pixelherodev
Ah, so the comment is wrong then?

1597428923
andrewrk
for ELF this works fine

1597428969
andrewrk
allocateDeclIndexes makes it so that you can do the exports as well as function calls on a Decl that hasn't been machine code generated yet

1597428969
pixelherodev
The comment is wrong then, yeah

1597428979
andrewrk
what comment

1597428984
pixelherodev
andrewrk: link.zig:2313

1597428995
andrewrk
I see

1597429000
ifreund
ok, I can work around that

1597429097
andrewrk
hmm no, it reads the decl's vaddr which does depend on updateDecl

1597429251
andrewrk
ifreund, thanks for letting me know, I'm looking into this

1597429304
pixelherodev
Code disagreeing with comments is always fun :P

1597429328
pixelherodev
still better than e.g. `// This is a buffer` on a `char*` :P

1597429335
ifreund
andrewrk: no problem, I will find a workaround for now

1597429363
pixelherodev
You know what would be a really neat feature for ZLS?

1597429370
andrewrk
ifreund, I also noticed that the x86 code for your test case has a bogus jmp

1597429379
andrewrk
I'm looking into that as well

1597429380
pixelherodev
If you could, say, add a tag to an enum, and it'd instantly insert @panic("TODO") on anything that switches on it :P

1597429384
ifreund
if it wasn't clear already, it's getting called by astGenAndAnalyzeDecl()

1597429419
ifreund
(through analyzeExport())

1597429443
pixelherodev
Toldja!

1597429452
pixelherodev
(That's the only call to updateDeclExports outside link.zig ;)

1597429460
pixelherodev
git grep FTW

1597429634
ifreund
well, I got it actually writing a (slightly mangled) wasm file

1597429687
pixelherodev
"A malicious file is detected" - how's this done? Simply because it doesn't map to the input?

1597430121
pixelherodev
There's got to be a better wayt o do these abstractions

1597430123
pixelherodev
to do *

1597430135
pixelherodev
e.g. link.File.updateDecl

1597430159
pixelherodev
Hmm, maybe there is

1597430796
pixelherodev
Good thing about ihex: it doesn't encode debug / symbol info the way ELF does, so I don't need e.g. allocateDeclIndexes :)

1597431131
andrewrk
ability to do allocateDeclIndexes is a feature, it allows more parallel compilation

1597431159
andrewrk
we'll be able to codegen two functions that call each other on different threads at the same time

1597431787
pixelherodev
I'm not saying I won't add it eventually, just that it's not

1597432923
ifreund
I have no idea how parallelism is going to work out for wasm incremental compilation

1597432931
ifreund
the format reall doesn't lend itself to that

1597433665
andrewrk
that's ok. it's not required really

1597446230
ifreund
aah spent an hour finding to find a really dumb bug

1597446252
ifreund
I have now genereated my first functioning wasm file though!

1597446343
andrewrk
woohoo!

1597446348
andrewrk
is it the return 42 one?

1597446371
ifreund
yeah, though I actually cheated on the codegen part

1597446387
ifreund
(just have the return hardcoded for now)

1597446406
ifreund
all the infrastructure for the container format seems to work though

1597446424
andrewrk
we can talk about modifying the IR for returning to be friendlier to wasm if you want

1597446445
andrewrk
that's great, I'm well aware of how much work that is for the container format stuff

1597446491
ifreund
yeah, returning is a little awkward with wasm

1597446533
andrewrk
one idea as part of defer (

1597446575
ifreund
that would fit very nicely with wasm

1597446611
andrewrk
"The return instruction is a shortcut for an unconditional branch to the outermost block, which implicitly is the body of the current function." heh yep

1597449203
andrewrk
ifreund, woohoo! I'll get you a review asap

1597449355
ifreund
thanks! will be nice to have some eyes on it

1597449376
ifreund
still a ton to do, but its a decent start

1597449417
andrewrk
I'm always happy to merge stuff that is an improvement over status quo

1597449434
andrewrk
as long as footguns are covered with safety protections :)

