1586304560
Sphax
oh right. I was confused about what []const actually means but I think I get it now

1586314398
fengb
Wow, watching some C++ videos, allocations are sneaky

1586314821
daurnimator
> andrewrk>TheLemonMan, do you think we should rename the arch from sparcv9 to sparc64?  --> andrewrk: sparc64 was a specific processor. sparcv9 is the architecture of it.

1586317949
shakesoda
illegal instruction on the pi zero trying to run that zig binary :(

1586317989
fengb
Program received signal SIGILL, Illegal instruction. -- 0x025bf470 in __ARMv7ABSLongThunk___libc_start_main ()

1586318061
shakesoda
yeah, that's the one

1586334524
FireFox317
fengb, shakesoda will look into it. the `__ARMv7ABSLongThunk` is suspicious, it shouldn't be ARMv7

1586340475
omglasers2
This snippet has the wrong output on windows

1586340953
daurnimator
omglasers2: I'm able to replicate in wine.... investigating/.

1586341102
wilsonk
omglasers2: it works correctly on linux...also fails here on wine64

1586341163
FireFox317
i think its because it includes the '\r'

1586341193
FireFox317
you are reading until '\n' so buf will contain '<sometext>\r'

1586341269
wilsonk
omglasers2: yep, it works correctly if you just readUntil... \r

1586341340
FireFox317
omglasers2, probably should read until '\r\n' then

1586341470
wilsonk
FireFox317:  that function only allows a single char as the second arg...and if you change it to \r then the linux version fails, of course. Change for each OS?  Or is there a version of readUntil that takes more than a single char?

1586341568
FireFox317
wilsonk, yeah we should probably have something in the stdlib that sets the line delimiter for a platform, so you can use that. However on windows you can also have files that just use the linux line endings

1586341597
wilsonk
ugh, windows is such a pain

1586341692
FireFox317
Maybe we should have a function that detects which line endings are used in a file or something

1586342026
daurnimator
FireFox317: which file would that be?

1586342058
daurnimator
generally in other languages (which take it from C I assume): when you `open` you pass a flag indicating "text" mode or "binary" mode.

1586342072
daurnimator
where binary mode writes exactly what you tell it

1586342080
daurnimator
and "text" mode inserts \r on windows

1586342170
daurnimator
in languages that differentiate "array of u8" vs "string" they also usually have read() on files open in "text" mode return strings and while files in "binary" mode have read() return an array of u8

1586342333
wilsonk
I will check what the verdict is tomorrow :) ...off to bed. Night all

1586342889
TheLemonMan
FireFox317, yo, lld was tricked into thinking you're targeting a v7 or greater arch

1586342925
TheLemonMan
check out the individual files build-attributes with `llvm-readobj --arch-specific <file>`

1586343670
daurnimator
TheLemonMan: do I recall you mentioning something about the macho linker getting better recently?

1586343721
TheLemonMan
daurnimator, Apple decided to throw it away and restart from scratch

1586343845
daurnimator
TheLemonMan: in LLD?

1586343850
TheLemonMan
yeah

1586343861
daurnimator
And its getting upstreamed?

1586343878
TheLemonMan
yeah

1586343902
daurnimator
nice! expected to be done by LLVM 11?

1586343938
TheLemonMan
maybe 13 or 14

1586343944
daurnimator
ouch

1586345388
FireFox317
TheLemonMan, llvm-readobj has no --arch-specific flag

1586346066
FireFox317
but i'm sure you are correct about the fact that lld gets ticked somehow

1586351751
TheLemonMan
FireFox317, worksforme with llvm-readobj-10

1586352996
omglasers2
using readUntilDelimiterOrEof with '\r' works ok on windows so I guess I'll use that for now; another thing, how can I read an int from the cmd ? tried with readIntNative but it returns gibberish

1586353153
ikskuh
readIntNative reads a literal int value (as in 4 bytes for an u32) from the slice

1586353158
ikskuh
and interprets it with native endianess

1586353165
ikskuh
use std.fmt.parseInt instead

1586353848
omglasers2
thanks, it worked

1586358511
r4pr0n
Hey, I looked and the wiki and the issue page about it, but I'm still curious: Why does zig encourage spaces over tabs, especially since zig fmt isn't configurable and the cpp compiled doesn't allow hard tabs at all. I know having one convention for the language ecosystem is good, but why spaces? I know this is kind of a flamewar theme but when I looked into it, I saw much more arguments for tab

1586358513
r4pr0n
indentation, e.g. for accessibility or aesthetic reasons, so why chose zig to encourage spaces?

1586358829
ifreund
i personally plan on switching to tabs if/when it becomes possible

1586358971
r4pr0n
yeah i'd also do that, but then i couldn't even use zig fmt

1586359102
ifreund
i think we'll see a fork of zig fmt that uses tabs once there is a compiler that supports them

1586359109
ifreund
if nobody else makes it i will

1586361490
companion_cube
the aesthetic reason is a subjective one, and I think andrewrk just picked something he liked to end discussions

1586362666
r4pr0n
companion_cube: well not really, because i think tabs are superior for aesthetics, because everyone can choose how he wants them to look

1586362682
r4pr0n
when with spaces, you force someone to look at the code how you want it to look

1586362837
companion_cube
r4pr0n: unless you have code that looks butt-ugly in 8 spaces (which is how it'll display in github and many other places)

1586362862
companion_cube
so it seems it works best for imperative, statement oriented languages, like Go and C, with very shallow indentation

1586362894
companion_cube
I've yet to see an expression based language use tabs successfully in a way that looks reasonable, all the ones I can think of are at most 4 spaces

1586362990
fengb
We should adopt fibonacci indents

1586363018
companion_cube
comptime indents

1586364575
shakesoda
space indentation denies the programmer agency

1586364583
shakesoda
I WILL HAVE MY FREEDOM FROM SUCH OPPRESSION

1586364596
shakesoda
also, hello

1586364691
companion_cube
:D

1586364713
ikskuh
there's only one reasonable way of life: tabs to indent, spaces to align

1586364718
ikskuh
but no editor supports this right

1586364737
ikskuh
they think they are smart by replacing "4 spaces with a tab" because that code is surely indented

1586364858
shakesoda
ikskuh: i agree, but have also mostly given up on trying to align

1586364895
fengb
Zig just zaps your alignment. It‚Äôs fine!

1586364898
shakesoda
also, 3-width tabs here

1586364908
ikskuh
yeah, true

1586364921
ikskuh
zig fmt makes it easy because you are not allowed to decide

1586364977
shakesoda
i don't hold the indentation so close to my heart that it matters much, but i'd rather i weren't forced into specific indent widths against my will

1586365109
companion_cube
I've seen 3 spaces in C code, it's funny

1586365226
ikskuh
i usually use 2 nowadays

1586365230
ikskuh
makes the code less broad

1586365264
fengb
I use 4

1586365269
fengb
Because zig fmt üôÉ

1586365366
shakesoda
companion_cube: i'd do that

1586365371
shakesoda
but i don't

1586365400
shakesoda
i'd have done so in zig, but zig fmt just changes it anyways, so whatever.

1586365463
companion_cube
ü§∑

1586365503
fengb
Thanks to Vexu, we're down to <1000 issues again :P

1586367297
jaredmm
Obviously zig fmt should be added as a pre-commit hook to remove all leading/trailing tabs and spaces and your IDE should reformat the code to your preferred silly spacing.

1586370408
shakesoda
just solve everything with infrastructure, infinite levels deep, until it's like you're actually working with java tooling that takes a hundred years to get any work done at all

1586370416
shakesoda
that's how you know zig is finally ready for the enterprise

1586370663
companion_cube
spring.zig

1586370711
fengb
Unfortunately, spring was actually peeling back layers >_>

1586370760
ikskuh
summer.zig

1586370768
ikskuh
because the sun always shines in zig land

1586370781
fengb
SUN?

1586370814
ikskuh
with sparc!

1586371117
ikskuh
hmm

1586371132
ikskuh
making "type" a top-level variable is quite annoying some time

1586371139
ikskuh
what are good alternatives for the word "type"?

1586371154
fengb
kind is used a lot in std

1586371171
fengb
I usually just use @‚Äútype‚Äù :P

1586371172
ikskuh
TokenKind?

1586371178
ikskuh
kind: TokenKind

1586371179
ikskuh
hm

1586371206
fengb
I see TokenId a bunch

1586371364
ikskuh
i wonder

1586371377
ikskuh
i have a token iterator that stores a []const u8

1586371405
ikskuh
i think i just update the slice every time i iterate

1586371411
ikskuh
instead of storing an index to it :D

1586371416
ikskuh
no one needs to go back!

1586371569
ikskuh
ah wait

1586371576
ikskuh
stupid me. i can use type as a field name :D

1586372040
ifreund
hey, so it looks like std.ChildProcess is supposed to inherit the environ of the calling process like execl(3) does

1586372094
ifreund
however, this doesn't seem to be working properly for an environment variable I set during runtime with setenv(3)

1586372125
ifreund
anyone else seen this behavior?

1586372149
ifreund
I guess I should probably open an issue

1586373700
r4pr0n
companion_cube: you can set it for github

1586373704
r4pr0n
and for many other places

1586373764
companion_cube
with spaces I don't have to setup anything :)

1586373858
nairou
Regarding the zig build system, I'm currently using it for a non-zig (C) project. Works great. However, I have a list of cflags I pass to each addCSourceFile() call, and I want to conditionally add additional flags to that list depending on whether I've requested a debug build. From what I can tell, a debug build would be a separate build step, but in this case I'm using the same list. Is there a way to know, within the builder, what

1586373858
nairou
the sepected build was on the command line? I can't find any examples that do something like this.

1586373925
nairou
sepected = specific

1586374214
FireFox317
i'm not sure if you generated the build.zig file using `zig init-exe` but there is a `const mode = b.standardReleaseOptions();` in there. you can check which mode you are in by doing `if (mode == .Debug)` or something

1586374218
FireFox317
nairou ^^

1586374253
nairou
Ah nice. Mine was custom, patched together from examples, but I'll look into that. Thanks!

1586381281
joey152
has anybody else had a segfault when building the zig master branch

1586381345
joey152
it segfaults trying to build libzigstage2.a

1586381464
marijnfs
what is a good way to cast a ?*c_void to a useful type when dealing with c functions?

1586381560
shakesoda
marijnfs: perhaps @ptrCast(*T, whatever.?)

1586381620
marijnfs
i guess the issue is i want a []u8 out of it, or anything mem.copy accepts

1586381657
shakesoda
if you know the length you can cast it to a [*]u8 and then slice that

1586381663
marijnfs
shakesoda: if i do that ptrCast it does seem to pass through but mem.copy doesn't like that

1586381666
marijnfs
ah

1586381677
marijnfs
maybe thats it

1586381678
shakesoda
so cast to [*]u8, then foo[0..len]

1586381707
marijnfs
yeah that works, thanks

1586383711
ifreund
alright this seems dumb, how can I avoid duplicating all of the linking stuff for the test exe in my build.zig?

1586383806
FireFox317
fengb, shakesoda, would you like to try running zig on a rpi0/rpi1 again? andrewrk changed some stuff in the build project. the armv7_libc_start symbol is now gone.

1586383819
fengb
Sure

1586383838
shakesoda
giving it a go

1586383891
shakesoda
or at least i will, whenever drive lets me

1586383925
andrewrk
FireFox317, wow that was fast

1586383967
FireFox317
andrewrk, updated the build script manually after your first message :)

1586383996
andrewrk
nice

1586384016
shakesoda
good old super definitely fast sd card io

1586384037
shakesoda
FireFox317: this one runs!

1586384049
andrewrk
great, thank you both for figuring that out before the release

1586384054
fengb
Showoff!

1586384063
FireFox317
i probably should have done a clean run, but it looked like the caching system was working correctly because stuff was rebuilding. also the symbol libc_start symbol changed to `__ARMv5ABSLongThunk___libc_start_main`

1586384069
FireFox317
Nice shakesoda!!

1586384080
shakesoda
seeing if it successfully runs a hello world, too

1586384112
andrewrk
FireFox317, you shouldn't normally have to do a clean run. I just wanted to make sure the recent changes (not just the last one) to the build script worked

1586384137
FireFox317
yes makes sense

1586384138
shakesoda
it's taking its sweet time, but nothing seems to have gone wrong yet

1586384159
FireFox317
yeah first time will be slow for sure, zig has to build all the stuff for the first time :)

1586384321
fengb
Yeah I don't think I'll be using this Pi to build Zig code lol

1586384377
shakesoda
hmmm, bad alloc

1586384411
FireFox317
hmm, out of ram?

1586384434
shakesoda
yeah, code generation 327/1845 died

1586384471
fengb
$ ../zig-rpi0-rpi1/zig run blah.zig

1586384471
fengb
hello world!

1586384478
fengb
It works!

1586384479
shakesoda
yeah, it's absolutely eating all my ram

1586384491
shakesoda
working though

1586384502
shakesoda
hopefully it can survive this time without me throwing more swap at it

1586384516
shakesoda
nope!

1586384521
FireFox317
sad :(

1586384544
shakesoda
using more ram than the system has is a shame, but at least not hard to work around

1586384553
FireFox317
but fengb yours worked? probably one a rpi1 and shakesoda is testing on a rpi0?

1586384584
fengb
I'm on a pi0

1586384586
fengb
I spent a bit of time tweaking the memory profile earlier today though :P

1586384587
shakesoda
I'm on a pi zero (512mb ram, 100mb swap)

1586384601
andrewrk
goodness, how much ram does zig want for hello world?

1586384609
shakesoda
apparently a lot to build the initial cache

1586384626
andrewrk
that's compiler-rt and freestanding libc

1586384640
shakesoda
so hungry :(

1586384652
fengb
Do I need libc even without linking it in?

1586384672
andrewrk
llvm always generates calls to memcpy, memset, and a few others. that's what I mean by "freestanding libc"

1586384699
fengb
Ah

1586384733
FireFox317
i mean, this is the limitation of stage1 right? it is not optimized for devices with small memory.

1586384739
andrewrk
correct

1586384751
andrewrk
bootstrapping zig on a pi zero would be extremely painful, haha

1586384768
andrewrk
(but possible, in theory)

1586384786
fengb
I need to figure out how to give this a few gigs of swap

1586384790
fengb
Then I could try

1586384797
shakesoda
increased my swap to 512mb, this will be painfully slow but shouldn't run out anymore

1586384820
fengb
Hmm, it took around ~150MB of RAM on my box

1586384836
shakesoda
fengb: # dphys-swapfile swapoff; edit /etc/dphys-swapfile, dphys-swapfile setup; dphys-swapfile swapon

1586384864
fengb
Yeah but I don't want to use my crappy SD card as swap. It's already dying as is >_>

1586384868
shakesoda
(assuming you're running something about the same as my hardly altered raspbian)

1586384896
shakesoda
heh, this is running a lot faster now actually

1586384911
andrewrk
you could try running `zig fmt` and see how well that performs. that is self-hosted

1586384996
andrewrk
I mean with regards to memory used

1586385014
shakesoda
would it be possible to include a prebuilt initial cache for the native target for releases?

1586385026
shakesoda
that'd be handy on the really low power ones

1586385026
andrewrk
I don't think that's going to happen

1586385040
shakesoda
it's an edge case, just curious

1586385056
andrewrk
yeah it's definitely possible

1586385128
shakesoda
hopefully after this first build the regular ones run at a sensible pace

1586385137
shakesoda
if so, i can switch all my c code on the zero to zig

1586385152
andrewrk
you build C code using the zero?

1586385155
Snektron
Why not cross compile?

1586385169
shakesoda
I write and build on the thing, yes.

1586385191
Snektron
ouch, that must take a while

1586385204
shakesoda
not really.

1586385234
shakesoda
c builds of just a few files at any given time are no big deal

1586385373
shakesoda
time for zig build run on hello world (with a nice warm cache) is... 41 seconds D:

1586385390
shakesoda
a few orders of magnitude slower than the c i've been building

1586385421
shakesoda
actual number: that project takes 7 seconds

1586385456
shakesoda
(5 seconds on second run)

1586385509
FireFox317
shakesoda, i'm a bit worried that the bootstrapped zig contains armv5 code instead of armv6, because now the libc_start symbol is: `__ARMv5ABSLongThunk___libc_start_main`. maybe that's why its so slow

1586385600
shakesoda
FireFox317: that could do it

1586385610
shakesoda
if true

1586385645
shakesoda
i'm happy that it works at all, really

1586385784
FireFox317
jup, that is definitely cool

1586386069
andrewrk
maybe v6 and v5 have the same thunk code?

1586386373
FireFox317
could be, i'm not sure. Time to get some sleep now :)

1586386448
fengb
Good night!

1586386474
andrewrk
night

1586386743
mikdusan
andrewrk, qemu 5.0.0-rc2:

1586386868
andrewrk
mikdusan, uploaded

