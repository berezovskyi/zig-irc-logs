1595635603
yeti
zig-bootstrap on a pi1 probably will need 2 weeks or more?

1595635662
yeti
I even tried on cubietrucks.... failed... generated some code that didnt match the CPU

1595635690
leeward
It'll fail when it runs out of RAM.

1595635700
leeward
That's my experience on RPi, anyway.

1595635713
yeti
nono... it complained about instructions not matching the cpu flavour

1595635732
shakesoda
yeah i'm not brave enough to bootstrap it for the pi on the pi, but the bins on the site work.

1595635763
leeward
Well, I tried on a Pi 1B, and after I turned off oomkiller it stopped taking out my ssh session and just failed.

1595635775
shakesoda
building is really a lot slower than i feel it should be (multiple times slower than a c compiler) but it does work

1595635777
leeward
It only took about a day though.

1595635781
yeti
seems to have some problems on A20

1595635814
shakesoda
the initial build where it builds cache for c stuff is particularly awful

1595635833
shakesoda
that oom'd my pi zero, i had to increase swap size

1595635862
leeward
Oh, I suppose I could have added swap...hmm, maybe next time.

1595635869
yeti
:-P

1595635877
leeward
That sounds even slower though.

1595635878
shakesoda
on the pi 4 i haven't meaningfully had problems, it's just very sluggish

1595635899
shakesoda
the thing has egregious resources though, versus what should be needed (fancy new 8gb model)

1595635912
leeward
holy crap

1595635950
leeward
I like how cheap "embedded" low-power computers these days are way more performant than the $2k machine I built to take to college.

1595635978
shakesoda
yeah, it's not actually that much worse than my laptop is

1595635991
shakesoda
the i/o is slower and the gpu is a bit weaker.

1595636001
leeward
Hmm, actually I think that was $1k

1595636013
leeward
but it was 20 years ago so...inflation

1595636016
shakesoda
single thread performance is worse, too, but not by so much that it's a primary concern

1595636082
shakesoda
i moved from the sd card to a tiny old 32gb ssd over usb3, and that certainly helped

1595637007
pixelherodev
Part of the problem is cross-platform support though

1595637028
pixelherodev
If you built a Zig compiler which could only target the Pi, the build would be cut down by an order of magnitude, easily

1595637045
pixelherodev
Since LLVM has like 20 backends, it'd get rid of a large chunk of code

1595637061
pixelherodev
If you could tweak it further to only support a specific *model*, it'd be even smaller

1595637071
pixelherodev
For good or ill, that's not possible

1595637079
pixelherodev
Old hardware had dedicated compilers

1595637199
shakesoda
to be sure, the zig builds are massively slower than, say, gcc is.

1595637993
keegans
really confused at what's going on here:

1595638023
keegans
can't find references to the keys in the source either

1595638309
keegans
ok nvm- got it. it's @ src-self-hosted/libc_installation.zig

1595679424
ikskuh
hm

1595679438
ikskuh
how can i write a file to an arbitrary directory from build.zig?

1595679466
ikskuh
using addWriteFile doesn't look like it's build for this job

1595681824
ifreund
ikskuh: inside the install prefix?

1595681859
ifreund
installFile() takes a relative path

1595681869
ikskuh
no, in the build directories

1595681974
ikskuh
so relative to build.zig

1595682054
ifreund
I suppose you just use std.fs then no?

1595682116
ikskuh
yeah, but it's not a build step then :(

1595682122
ikskuh
well, enough for now

1595683432
ikskuh
damn you zig and your undefined behaviour sanitizer in C :D

1595683657
tsujp
if I have a file `c.zig` which is nothing but c imports via `usingnamespace @cImport` how do I import those imports into another zig file and use them?

1595683699
ifreund
tsujp: you need to do `pub usingnamespace ... `

1595683724
tsujp
and sorry I have, then it's just `@import("path/to/file.zig");`?

1595683728
ifreund
and then you can `const c = @import("c.zig"); c.foo();`

1595683763
ifreund
paths for imports are relative

1595683763
tsujp
gotcha

1595683858
ifreund
also if you didn't realize yet, files in zig are structs

1595684287
tsujp
good to know, still getting the hang of zig just found it a few days ago

1595684321
tsujp
I'm curious, I'm going through the source code for that exmaple game oxid (here:

1595684336
tsujp
Why did they need a stack allocated memory management library when you can use the Heap?

1595684382
tsujp
Or is it that this is being alloocated on the heap (surely it is...?) and that this library gives you a "stack-like" data structure to use

1595684803
ifreund
tsujp: not sure, probably something to do with wasm which seems to be the target for that

1595684934
tsujp
I did some digging and apparently the hunk is a datastructure the quake engine used to keep heap memory allocated to it contiguous by allocating high and moving "inwards" as required

1595684966
tsujp
ifreund: say there is a set of items { 1, 2, 3, 4, 5, 6 } the slice syntax `[1..]` means "index 1 until the end" right?

1595684971
ifreund
sounds like a performance thing then

1595684978
ifreund
tsujp: yep

1595686514
KoljaKube
Hm, Allocator does not work with non-slice pointers?

1595686651
ikskuh
allocator.create() ;)

1595686669
keegans
FireFox317: re:

1595686678
keegans
this functionality requires allocation, is that available in the compiler_rt at this time?

1595687152
FireFox317
keegans, hmm good question, im not sure actually

1595687342
keegans
yeah, it's somewhat problematic since we need a GPA to expand TLS on demand

1595687371
keegans
we could hypothetically allocate a big ELF section and cap it, but that is suboptimal

1595687958
KoljaKube
ikskuh: But that does not support reallocation, right?

1595688076
ikskuh
no, as it's illogical to reallocate a single object ;)

1595688080
ikskuh
single objects don't change size

1595688235
KoljaKube
Ah, OK, didn't try it out but I intended to `create` a [N]u8, where reallocation would make sense (even if not strictly speaking)

1595688320
ikskuh
err

1595688330
ikskuh
that's just allocator.alloc(u8, N)

1595688341
ikskuh
so allocate a slice of u8 instead of a fixed-size array

1595688360
ikskuh
[N]u8 will always be N elements large

1595688372
ikskuh
if you allocate multiple of them, you get another [N]u8

1595688382
ikskuh
if you allocate a []u8, you get a dynamic sized type (slice)

1595688384
KoljaKube
I'm trying to wrap a C library where the only memory allocation function that I can pass in is a realloc(c_void*, usize)

1595688403
fengb
That’s not possible with naive Zig allocators

1595688428
fengb
I’m actually working on a compat layer that can enable C style allocations

1595688433
ikskuh
realloc() is fully capable and you can route a global allocator into those

1595688443
ikskuh
so you have a realloc() function that accesses a global allocator

1595688460
fengb
But most Zig allocators cannot take a pointer and reconstitute its size

1595688466
ikskuh
realloc(NULL, size) is "alloc", realloc(ptr, size) is "realloc", alloc(ptr, 0)" is free

1595688479
KoljaKube
I also have a pointer to an allocator instance in that call, I don't need it to be global

1595688489
ikskuh
oh, neat

1595688524
KoljaKube
I had hoped that I could somehow, inside my wrapper, bridge all the differences

1595688538
fengb
Oh we might be working on something similar

1595688546
KoljaKube
ikskuh: My PR isn't accepted upstream, but I added a c_void* userData ;-)

1595688570
KoljaKube
Is the memory layout of a slice documented somewhere?

1595688589
fengb
No it’s intentionally unspecified

1595688621
ask6155
hello!

1595688646
KoljaKube
fengb: So no hope of, say, extra-allocating two usizes extra at the start to store some more information about the following memory?

1595688650
KoljaKube
ask6155: Hi there!

1595688673
ask6155
hi!

1595688696
fengb
You can allocate @sizeOf([]T). That’d be fixed but the layout isn’t

1595688715
KoljaKube
By the way, I'm used to new/delete, but I'm assuming that reallocating stuff is usually done for complete arrays/struct/etc, not in the middle of them, right?

1595688718
fengb
I’m not actually sure why though. I’d love to put slices into packed structs :(

1595688875
KoljaKube
OK, so I can take the requested memory size, allocate a slice instead, and return the .ptr, right? And if it's time to realloc, I am passed said ptr. Can I then use some builtin to get the slice's address from that ptr?

1595688902
fengb
A slice is a glorified pointer

1595688914
KoljaKube
I thought it's a pointer + a size

1595688918
fengb
Yeah

1595688927
keegans
is there a string replacement impl in Zig std or do I roll my own?

1595688941
fengb
There’s no real way of getting the address of reversing the ptr to slice though

1595688951
KoljaKube
So that size must be stored somewhere. And if it's not a defined layout, I can't just assume "the usize before the ptr"

1595688957
KoljaKube
Ah, OK

1595688963
KoljaKube
Too bad

1595688967
fengb
Right, I don’t think you can reliably get the data

1595688983
fengb
You can create your own packed struct though

1595688999
KoljaKube
duh

1595689011
fengb
How I’m doing it is putting the size exactly 16 bytes before the pointer I return to the user

1595689071
KoljaKube
So I guess I can rely on every pointer passed to realloc being something I initially returned from some allocation function, right?

1595689104
fengb
That’s the expectation placed on the dev yes

1595689128
KoljaKube
On the dev calling or implementing realloc?

1595689137
fengb
Calling

1595689145
fengb
We usually insert some asserts for sanity

1595689152
KoljaKube
OK, good

1595689156
fengb
Usually = sometimes

1595689159
ikskuh
more asserts for all!

1595689166
KoljaKube
How would I assert that without keeping a list?

1595689183
fengb
Depends on metadata layout

1595689221
KoljaKube
OK

1595689221
fengb
My more complicated allocator has specific numbers in memory locations that it can be

1595689244
fengb
So it’s semi trivial to do an extra check to make sure those are sane

1595689266
KoljaKube
So it's 100% sure, but close enough?

1595689289
fengb
Yeah there’s a pointer which needs to be aligned, and a size which can only be a power of 2

1595689316
fengb
So it’s a useful sanity check, but can’t be completely relied upon

1595689350
fengb
The debug allocator would eventually check for a lot of these cases

1595689444
KoljaKube
OK, I think I'm getting somewhere. Thanks, you helped a lot!

1595689592
fengb
np

1595689685
ask6155
If I have a C struct which can have a field as null, can I set it as an undefined and get away with it?

1595689741
KoljaKube
undefined should be uninitialized as far as I understand

1595689785
fengb
Yeah, it’s set to 0xaaaa in safe modes for debugging but it’s “probably” uninitialized otherwise

1595689791
KoljaKube
Depends on what exactly you are doing, but I have been using a lot of std.mem.zeroes for large C structs lately

1595689808
tsujp
zig docs state `Use undefined to leave variables uninitialized` for `master`

1595689811
KoljaKube
(zero the whole struct, set what you want)

1595689850
ask6155
It says missing field

1595689866
KoljaKube
Not very zig-like, but initializing structs with dozens of fields at define-time is not practical

1595689873
fengb
You need to assign something to the field. Undefined is fine if you’ll overwrite it later before using it

1595689876
KoljaKube
Yeah, you can't just leave it out

1595689901
fengb
There’s also mem.zeroInit, where it’ll zero out any field that wasn’t specified

1595689967
ask6155
The field is a const char* but it can be NULL which means the library will detect it or something

1595690603
KoljaKube
You bring up a good point, I had a similar problem earlier. To return NULL to C, I had to `return @intToPtr(*allowzero c_void, 0)` - that can't be the best way

1595690620
ask6155
How do I convert 0x0001 to a []const u8?

1595690647
fengb
Change the ptr definition to `?*c_void` and you can assign null

1595690684
ask6155
what

1595690697
fengb
That was meant for KoljaKube

1595690704
ask6155
oh

1595690723
KoljaKube
Heh, all those permutations of casts and return values, and I must have missed that one. Seems obvious, thought I checked that

1595690740
fengb
ask6155: do you want a one element slice? “\x01” is the easiest as a constant

1595690795
fengb
`[_]u8{0x01}` will build an array and you can slice that

1595690877
ask6155
yeah I wanted a one element slice

1595690897
tsujp
Is there a way to specify style with zig similar to how you can with clang (I think it is?)

1595690907
KoljaKube
Arbitrary u16s should be castable to fixed-sized arrays before slicing, if I'm not mistaken

1595690945
KoljaKube
tsujp: Are you talking about zig fmt?

1595690969
tsujp
KoljaKube: I think so? I am using the sublime text Zig pacakage and it's changing the whitespace in my code etc

1595690969
KoljaKube
There are no options there I think

1595690983
KoljaKube
Yeah, that would be fmt

1595690989
fengb
You can disable formatting but there’s no config for the formatter

1595691002
ask6155
where is the documentation for "\x01" syntax?

1595691029
KoljaKube
If you end lists with trailing commas, the lists will be multiline, without they will be fit in one line if possible, if that helps

1595691029
tsujp
ask6155:

1595691040
tsujp
ask6155: specifically: `\xNN hexadecimal 8-bit character code (2 digits)`

1595691065
tsujp
Is there an API for `fmt` at the moment? I could work on a PR to add options to it for instance

1595691085
KoljaKube
I've really grown to like no-option formatters. I may not like the result, but at least there won't be a discussion about it :D

1595691099
fengb
Intentionally no options

1595691104
tsujp
Fair enough

1595691110
Akuli
"it's a feature, not a bug" :D

1595691112
tsujp
I guess I shall try and stick with it hohoh

1595691118
KoljaKube
But if it would use tabs instead of spaces I couldn't use it ;-)

1595691126
tsujp
Eww tabs gross

1595691131
tsujp
Tabs aren't even allowed in source files are they

1595691137
KoljaKube
Nope

1595691137
Akuli
here we go again lol

1595691138
tsujp
Take that tab vs spaces people

1595691147
fengb
To quote Go fmt: it’s nobody’s friend. Therefore it’s everybody’s friend

1595691188
tsujp
Actually the only reason I was curious about `fmt` is because I see in the docs the return of structs formatted as `return StructName {` whereas `fmt` is formatting my struct return as `return StructName{` (no space between StructName and {)

1595691199
tsujp
Very, very, very, very trivial that single space but I was just curious

1595691225
fengb
Hmm yeah I noticed that too. I dunno if there’s been discussion

1595691245
fengb
fmt is open to change. We just don’t want configuration options :P

1595691262
tsujp
I'll subscribe to that

1595692278
ask6155
ok I passed an optional i32 which is set as NULL to my C function. There was no compile error but when I ran the program it said attempt to use null value. But that was the POINT!

1595692367
KoljaKube
C doesn't know optional values

1595692403
ask6155
so how do I pass a pointer to null?

1595692440
KoljaKube
Oh, I misread, you weren't passing a value

1595692580
KoljaKube
I think you should be able to pass null optionals as null ptrs. What's the function parameter type and the type of the variable exactly?

1595692655
ask6155
struct notcurses* notcurses_init(const notcurses_options* opts, FILE* fp);

1595692665
ask6155
"notcurses_init prepares the terminal for cursor-addressable (multiline) mode. The FILE provided as fp must be writable and attached to a terminal, or NULL. If it is NULL, /dev/tty will be opened. "

1595692773
KoljaKube
And you are passing null for fp?

1595692836
tsujp
What is u29?

1595692842
tsujp
..29-bit integer?

1595692848
KoljaKube
29 bit unsigned integer

1595692859
KoljaKube
maximum size of an alignment paramtere

1595692860
tsujp
why would 29 bit unsigned integer exist?

1595692862
tsujp
ah

1595692876
ask6155
I don't know how to pass NULL, I made an optional pointer to i32 and dereferenced it.

1595692876
KoljaKube
Zig has arbitrary bit size integers

1595692905
KoljaKube
Well, dereferencing an optional that is null should be an error

1595692912
tsujp
what does this part of the docs concerning alignment mean?

1595692913
fengb
Alignment must be u29 because it prevents accidentally passing in something else

1595692917
tsujp
"less than 1 << 29."

1595692934
fengb


1595692940
ask6155
ok so how do I pass a NULL to a C function?

1595692967
tsujp
I mean what does the double << operator here mean, bit shift?

1595692974
fengb
Yeah

1595692978
KoljaKube
I would think you should be able to pass `null`, but I don't have an example in front of me

1595692985
tsujp
so 1 << 29 as in 1 bitshift 29 places to the left?

1595692991
fengb
Yep

1595692994
KoljaKube
As in 2^29

1595693018
tsujp
I see

1595693051
ask6155
wow I'm dumb I never thought it would just work

1595693067
ask6155
(I passed null directly)

1595693118
KoljaKube
By the way, you don't need i32, you can use c.FILE or ?c.FILE directly

1595693130
KoljaKube
(assuming your cImport is named `c`)

1595693198
leeward
It just occurred to me that my C wrapper tutorial doesn't mention `extern "c"` at all.

1595693207
zigusr
on windows 64 bit, does build-lib -dynamic create a 64 bit windll ?

1595693233
ask6155
wait you have a C wrapper tutorial?

1595693250
leeward
ask6155:

1595693287
zigusr
nm, works

1595693392
tsujp
right so with alignment if you had a 3-byte sized data type, you'd have that aligned to mod 3 increments

1595693496
ask6155
oof that means I still would have to do some wrapping to get stuff done.

1595693591
leeward
ask6155: Most C libraries I've used in Zig can be used wrapper-free, but I find writing Zig wrappers around the parts I use to make it easier to write clean code.

1595693635
ask6155
yeah but I still have to do good error handling which I guess is a good thing :)

1595693641
leeward
yep

1595693681
leeward
Converting a return code + ERRNO to a Zig error makes life really nice, and it's easy.

1595693702
zigusr
where can I see examples for stdlib usage?

1595693740
leeward
zigusr: Can you be more specific? The vast majority of Zig code uses the standard library.

1595693757
zigusr
yeah, I'm coding my first line in zig, and I want to push / pull a struct from an TailQueue

1595693777
zigusr
so duckduckgo TailQueue examples doesn't help me :)

1595693804
tsujp
is using `.ptr` safe? the docs have me a tad bit confused, if I'm reading this correctly `.ptr` on an array gives the runtime-only-known pointer length

1595693809
tsujp
is this effectively the size of the array?

1595693815
tsujp
size as in size in memory not elements?

1595693849
leeward
zigusr: zig/lib/std/linked_list.zig has a test called "TailQueue concatenation"

1595693878
leeward
zigusr:

1595693904
leeward
also "basic TailQueue test" on line 375

1595693978
leeward
tsujp: I believe you misread the docs. .ptr gives a pointer to the array. So an [23]u8 would become [*]u8

1595693991
leeward
The address of the first element, that is.

1595694011
tsujp
Ah

1595694057
tsujp
and where is the meaning of `_` defined in the docs?

1595694060
leeward
Actually, I only see it mentioned for slices.

1595694091
tsujp
I keep seeing `_` all over the place but a CTRL+F gives 1,471 results :'(

1595694128
leeward
tsujp: I'm not sure, but it means "ignore this value." It's an error to implicitly ignore a function's return value.

1595694171
leeward
tsujp: This might help:

1595694200
tsujp
Ohhh a learn website!

1595694214
tsujp
My reading of the docs to learn shall be postponed by this instead

1595694216
tsujp
Thank you leeward

1595694255
ask6155
wait ziglearn.org?

1595694263
tsujp
Yeah TIL too

1595694277
tsujp
I even googled learning zig the other day and got nothing, so either I am extremely unlucky, suck at googling.. or both

1595694288
zigusr
is there ETA for 1.0 ?

1595694297
leeward
It's pretty new. I don't think it's got the search engines tuned for it yet.

1595694298
tsujp
soon(tm)? (I don't know hoho)

1595694300
zigusr
duckduckgo almost has nothing on zig

1595694312
ask6155
I got first hit as ziglearn.org

1595694324
ask6155
I use bing (That explains it)

1595694331
tsujp
last result on first page of google for "learn zig" search for me

1595694332
cren
I wish I had known about ziglearn.org a few months ago >_<

1595694351
zigusr
what is a good written library in idomatic zig ?

1595694363
tsujp
that would be zig standard lib no?

1595694382
leeward
cren: It was first created June 19th.

1595694395
zigusr
something pratical :)

1595694411
ikskuh
zigusr: wdym? stdlib is the biggest, most practical lib out there :D

1595694424
tsujp
hang on if you can do `_ = 10;` what is the point of that?

1595694428
cren
leeward: ah, thanks for telling me, I feel less bad now

1595694437
ikskuh
zigusr:

1595694466
cren
there are example programs in the std library which I find immensely helpful

1595694513
leeward
tsujp: There isn't a point to `_ = 10;`

1595694558
leeward
tsujp: But, say you don't care about printf's return value. You can do `_ = c.printf(...);`

1595694560
tsujp
oh wait hang on, say I had a function that returned `u29` for example, and I wanted the function to run but as you say I didn't care about what it returned at all I'd then use `_` right? `_ = runThatu29FunctionPlease()`?

1595694569
leeward
tsujp: Exactly.

1595694614
tsujp
And this keeps the typing of functions but allows them to effectively work as `void` (from C) if I so desire

1595694620
leeward
It says "this function is being run for its side effects" to anyone reading the code, which should raise alarms.

1595694641
leeward
yep

1595694660
leeward
The only value you can ignore is `{}` which is the void value.

1595694677
fengb
And noreturn 🙃

1595694687
leeward
That's not a value :P

1595694786
tsujp
2.5 hours into this mix (

1595694790
tsujp
more zig tomorrow hohoh

1595694795
tsujp
thank you for the help :)

1595694802
leeward
Also: I've seen C code "int foo(whatever) __attribute__((noreturn));"

1595694826
leeward
Time zones are fun.

1595694837
leeward
It's 12:30 PM here.

1595694881
tsujp
So you could be in anything from UTC-3 to UTC-5 because daylight savings make it even more fun

1595694979
fengb
Well actually offsets are fixed. You shift offsets when switching daylight savings

1595695026
tsujp
i have purged all daylight savings knowledge from my head except that they exist, in Western Australia there is none hoho

1595695028
tsujp
UTC+8 always

1595695143
fengb
Australia is the most confusing thing ever. Half hour zones and half the country observes DST

1595695183
leeward
Doesn't India have half hour time zones too?

1595695230
leeward
I want my state to move to atlantic standard year-round. EST is crap.

1595695900
ikskuh
andrewrk: is there a way to access the c type __builtin_va_list ?

1595696378
ikskuh
hm

1595697020
keegans
how can I run 1 specific test/file in Zig std? currently using `zig build test-std`~ but that does everything

1595697206
keegans
ya i'm just an idiot lel

1595697650
cren
can main() return something other than void?

1595697680
leeward
sure

1595697690
cren
what happens if it does? does it go to stdout?

1595697711
leeward
Same thing that happens in C

1595697734
cren
what happens in C?

1595697747
leeward
Oh, apparently I'm wrong.

1595697814
leeward
Ok, so functions can return void, !void, noreturn, u8, or !u8.

1595697839
leeward
If it's one of the u8s, it passes the return code up to the OS.

1595697844
fengb
Returning anything becomes a status code

1595697857
fengb
Nonzero is considered failed execution

1595697904
leeward
If you run pretty much any program on a *nix-like system from a shell like bash, the return code will get stored in `$?`.

1595697911
cren
yeah

1595697972
cren
what about noreturn? how is that different from void?

1595697986
leeward
noreturn functions don't halt.

1595697993
fengb
noreturn is a special type that means the function never returns

1595698005
cren
what's the use case for that?

1595698007
fengb
e.g. triggers a trap

1595698013
leeward
Oh, and if Zig's main returns an error, the return code is 1.

1595698024
fengb
os.exit() is a noreturn

1595698050
leeward
Code running on embedded systems frequently never returns from main.

1595698051
fengb
Something like C’s longjmp would also be noreturn

1595698077
cren
ah I hadn't considered embedded

1595698099
fengb
In OSs, the _start function is noreturn as well

1595698122
fengb
You’re supposed to call exit instead of relying on a return address

1595698502
pixelherodev
For userspace too

1595698523
pixelherodev
_start is noreturn, and calls main, handling the return type via comptime reflection

1595698561
cren
if I fn _start() can I overwrite _start? (not that I want to, I'm just curious)

1595698578
pixelherodev
It's possible, yes

1595698589
pixelherodev
I'm not 100% sure what the correct method to do that is for userspace though

1595698615
leeward
callconv(.Naked)

1595698636
leeward


1595698639
pixelherodev
I know

1595698641
leeward
according to that

1595698651
pixelherodev
But that doesn't stop the normal _start from being defined, does it?

1595698665
leeward
Easy to find out!

1595698670
pixelherodev
I know

1595698673
pixelherodev
I'm looking rn ;P

1595698694
pixelherodev
It works, yeah

1595698706
pixelherodev
start.zig exports start only if the root file doesn't have a start function

1595698824
leeward
hmm, didn't let override the return value from main though

1595698885
cren
I can't build a hello world with pub fn main() noreturn {...}

1595698900
cren
`expected type 'noreturn', found 'void'

1595698907
leeward
That's because you returned from main.

1595698924
leeward
You probably want void, not noreturn.

1595698956
cren
I was just experimenting

1595699060
leeward
Try putting `std.os.abort()` at the end of your main function. That'll let it be noreturn.

1595699123
cren
cool. 'zsh: abort    bin/main'

1595699162
cren
appears to return with status 134

1595699552
cren
is there going to be a context management statement in zig like python's 'with'? there's 'defer' in zig and I was just wondering whether that's supposed to replace 'with'/'using' or not

1595699590
leeward
I don't think there's a plan to put context managers in the language, though they wouldn't be hard to implement in userspace.

1595699596
fengb
Not currently in the plans. There’s a parent issue about resource management though

1595699625
fengb


1595699648
leeward
defer and errdefer do handle most cases where you'd want Python's `with`.

1595699654
fengb
Wow that’s ancient. It should link to a more up to date discussion

1595699675
fengb


1595700954
cren
how can I see the type of a thing while debugging? using print with format strings just turns the type into the word "type" apparently

1595700972
fengb
@typeNam3

1595700978
fengb
@typeName

1595701575
leeward
Ordering delivery during a pandemic is not always good. 2 hours later, the order is cancelled.

1595701691
cren
a belated thank you fengb

1595701728
cren
oh

1595701754
cren
'error: expected type 'type' found '@TypeOf(std.net.Address.parseIp).ReturnType.ErrorSet!std.net.Address'?

1595701797
cren
the thing I'm trying to print is the returned value from net.Address.parseIp

1595701804
leeward
Forget a try?

1595701817
cren
leeward: that's probably it

1595720150
ronsor
Well, I have a bit of a new issue. Calling C code from zig (target: x86_64, UEFI, MSVC ABI) that attempts to use struct assignment (`struct A a, b; a = b;`) results in #06 Invalid Opcode (QEMU 2.11.1, KVM, -cpu max). This

1595721085
keegans
that's a really old QEMU?

1595721368
ronsor
I just used what came with my package manager. Hmm.

1595721402
ronsor
welp i'll try a newer version

1595721441
keegans
yeah like, 5.0.0 is out

