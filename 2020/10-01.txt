1601510405
pixelherodev
I think the biggest section is astgen right now

1601510409
pixelherodev
That's what needs the most work, rather

1601510435
pixelherodev
astgen is basically what "understands" Zig code (in the form of the AST), and translates to the IR

1601510474
pixelherodev
so it goes from e.g. `if (a) {b }` to `condbr(a, { b })` - which codegen sees and turns into e.g. z80's `jz`

1601510486
pixelherodev
Relatedly, a lot of work is needed on codegen

1601510521
pixelherodev
For x64 work - which is most crucial, since most zig development occurs on x64 - codegen isn't *complete*, but there's enough of it to support a good chunk of astgen without needing codegen work

1601510534
qeeg_
yeah i'm on x64 :p

1601510568
pixelherodev
I'm not sure anyone would outright

1601510579
pixelherodev
We also, for the record, have

1601510620
qeeg_
uh why not? o.o

1601510637
pixelherodev
Because, to put it frankly, their optimizations are ludicrously complex and not worth competing with

1601510645
pixelherodev
We don't

1601510656
pixelherodev
Basic optimizations will get us a very large percentage of the way there

1601510670
pixelherodev
If maximum performance is the goal, LLVM (or possibly GCC) will be needde

1601510672
pixelherodev
needed*

1601510678
qeeg_
well, is there any way i could learn about basic optimization stuff for compilers?

1601510682
pixelherodev
Wikipedia :P

1601510699
pixelherodev
Start on a page like

1601510704
pixelherodev
They should also have decent references

1601510709
qeeg_
i learn better by actually doing and reading simple code that does what i want to do

1601510717
qeeg_
*actually coding

1601510726
pixelherodev
I have a couple of papers I can send you on the topic

1601510743
pixelherodev
That I downloaded from random internet places lol

1601510749
qeeg_
papers would be even worse than wikipedia!

1601510754
qeeg_
i need like, actual examples

1601510757
pixelherodev
Nah, they're usually straightforward

1601510769
pixelherodev
I can link you to my implementation of some bits, but they're probably worse ;)

1601510769
qeeg_
please just humor me

1601510780
pixelherodev
I have e.g. register allocation in a separate project

1601510794
pixelherodev
(Register allocation is basically what assigns variables in the language to physical registers)

1601510807
pixelherodev
but my implementation isn't the cleanest, and I've been meaning to rewrite it

1601510817
companion_cube
CSE? start with inlining! :p

1601510821
pixelherodev
I don't know of any projects that do a good job implementing it in a simple sane way to make it easy for readers

1601510841
pixelherodev
That'll be my goal for the eventual Thor 0.2 release (Thor is my JIT / compiler backbone project)

1601510860
pixelherodev
GCC and Clang are both absolutely

1601510864
pixelherodev
At least, in terms of readability

1601510869
qeeg_
ooh, can i see the code for thor?

1601510874
qeeg_
what language is it in?

1601510876
pixelherodev
Yeah, but it comes with a content warning

1601510881
qeeg_
oh?

1601510881
pixelherodev
It's in Zig, but not very good zig :P

1601510886
qeeg_
lol fair enough :p

1601510904
pixelherodev


1601510917
pixelherodev
It's linked under `sources`

1601510980
pixelherodev
I think the best optimizations Zig can develop internally would be architectural ones

1601510998
pixelherodev
Tweaking codegen based on microarchitecture, effectively

1601511005
pixelherodev
`-march=native` on GCC / Clang does this

1601511024
pixelherodev
Basically, some instructions have different performance characteristics on different *micro*architectures

1601511036
pixelherodev
e.g. Ryzen vs Skylake vs Bulldozer vs Kaby Lake etc

1601511060
pixelherodev
GCC takes it a step too far IIRC, but the general idea is sound

1601511176
pixelherodev
The general optimizations I'd love to see in Zig are microarchitectural, inlining, dead code elimination (DCE), common subexpression elimination (CSE), and constant folding

1601511192
pixelherodev
That alone should at least make for good debug builds produced rapidly

1601511205
pixelherodev
Anywho, I need to get back to work

1601511224
pixelherodev
qeeg_: you can also look at

1601511253
qeeg_
uh, that link is dead

1601511255
pixelherodev
you were asking about what to do with an AST, right?

1601511258
pixelherodev
Ah wait, it's private :P

1601511260
pixelherodev
Let me fix that

1601511271
qeeg_
ah

1601511284
pixelherodev
ok

1601511287
qeeg_
also how do liveness analysis

1601511298
pixelherodev


1601511306
pixelherodev
That takes an AST and produces machine code for a RISC architecture

1601511316
pixelherodev
There's no IR, so it's a bit simpler than Zig's

1601511339
pixelherodev
It's also only 115 lines, so it should hopefully be easier to grok

1601511414
qeeg_
well, i ask because i want to improve the speed of an x86 emulator's dynamic recompiler.

1601511415
pixelherodev
I'd say "feel free to ask questions," but I realllly need to get to work now bye

1601511418
pixelherodev
Oohh

1601511421
pixelherodev
what emulator??

1601511422
pixelherodev
:D

1601511423
qeeg_
86box

1601511425
pixelherodev
Ahh

1601511429
qeeg_
it's written in like, c99 lol

1601511439
pixelherodev


1601511443
pixelherodev
Yeah, C99 is great :D

1601511476
pixelherodev
Oof that looks complex

1601511488
pixelherodev
Optimizing a dynarec is much easier when there's few interacting parts

1601511512
ifreund
they even seem to have a fairly normal coding style

1601511532
pixelherodev
With one minor problem

1601511543
pixelherodev
That linked list definition is gross

1601511568
pixelherodev
and.. they seem to use a linked list where one really isn't needed...

1601511583
pixelherodev
I think a dynamic array would've worked better in the random file I just opened and have no context for

1601511587
pixelherodev
:P

1601511611
ifreund
heh

1601511618
pixelherodev
anywho, I'm going to get to work for realsies, I don't think "I was playing with an emulator's source" is a valid excuse for, well, anything

1601511656
ifreund
both data structures kinda suck in C due to lack of typesafety or overabundance of macros

1601512046
qeeg_
ifreund, yeah, it's just that weirdly, you start to get diminishing returns with the emulator's speed, with faster host cpus

1601512052
qeeg_
which doesn't make much sense to me?

1601512140
qeeg_
like, even though the emulator doesn't even use the gpu much at all (literally just to blit a framebuffer to the screen), faster cpus don't really do much for it

1601515460
pixelherodev
qeeg_: is it threaded?

1601515471
qeeg_
partially

1601515474
pixelherodev
Single thread performance hasn't been increasing all that quickly for the last... decade or so?

1601515476
pixelherodev
At least

1601515489
pixelherodev
my eight year old CPU has ~70% the single-thread perf of a modern Ryzen 7 IIRC

1601515490
qeeg_
the cpu emulation happens on one thread, but a lot of other stuff is offloaded to other threads

1601515503
pixelherodev
If CPU emulation is the bottleneck, that might explain it

1601515509
pixelherodev
It's also possible that there's a lot of threading contention

1601517954
pixelherodev
qeeg_: if you have any questions, feel free to ping me here

1601517974
qeeg_
aight, thanks

1601517979
pixelherodev
I might not always be able to respond instantly, but I have a good deal of experience with the Zig stage2 compiler and am glad to help out :)

1601528209
nikki93


1601533814
ikskuh
good morning european ziguanas!

1601535178
shachaf
nikki93: Oh man, I bet my program

1601535733
ikskuh
oh man

1601535753
ikskuh
#6250 will have some trail until zig is back to full usability again

1601536277
pixelherodev
yep

1601536346
pixelherodev
Most useless benchmark win of all time: I improved a z80 emulator's performance from ~180MHz to ~550MHz

1601536351
pixelherodev
For a stream of nops and absolutely nothing else

1601536467
pixelherodev
~575, actually :P

1601536569
ikskuh
lol

1601536609
pixelherodev
Slightly less useless number: at 80MHz, power consumption goes from ~7.7W to ~6.4W

1601536619
pixelherodev
I can burn slightly less power doing nothing! Woot!

1601536714
pixelherodev
ooh - and in a release build, it goes from 230 to ~720

1601536774
pixelherodev
...holy crap I take that back

1601536778
pixelherodev
It hits 0.96GHz

1601536785
pixelherodev
of nops lol

1601536797
pixelherodev
I wonder if I can get a nopstream over 1GHz...

1601536909
pixelherodev
For context, the host CPU is 2.0 GHz

1601536982
pixelherodev
It's peaking at over 48% of the host's speed, and sustaining over 47%

1601537028
ikskuh
huh

1601537039
ikskuh
compilation fails mit "FileNotFound"

1601537040
ikskuh
thanks…

1601537048
ikskuh
how can i debug this?

1601537056
pixelherodev
It doesn't give an error trace?

1601537064
ikskuh
nope

1601537068
pixelherodev
weird

1601537071
ikskuh
nah

1601537077
ikskuh
andrew catches them and just prints FileNotFound

1601537082
ikskuh
which isn't helpful at all

1601537113
pixelherodev
lol

1601537116
pixelherodev
ouch

1601537129
pixelherodev
Whoa, 0.973GHz peak~

1601537138
pixelherodev
Why does this meaningless number fill me with joy?

1601537145
ikskuh
haha

1601537147
pixelherodev
It's meaningless, and I

1601537148
ikskuh
stage2.mainArgs(gpa, arena, args) catch |err| fatal("{}", .{@errorName(err)});

1601537150
ikskuh
i know that feel

1601537152
pixelherodev
and I fully understand why it is

1601537157
pixelherodev
Yet still...

1601537178
pixelherodev
49% of host is the new record :P

1601537212
pixelherodev
Wait why am I burning CPU just in the hopes that microarchitectural BS gives me a tiny boost??

1601537228
pixelherodev
Obviously I should profile it and

1601537232
pixelherodev
higher*

1601537303
pixelherodev
ooh microoptimization idea

1601537368
ikskuh
going to do a PR to print error return trace here…

1601537531
pixelherodev
Smart

1601537563
ikskuh
heh

1601537581
ikskuh
6250 is going to make me do a lot more PRs now

1601537809
pixelherodev
ditto

1601537811
pixelherodev
also, drats

1601537821
pixelherodev
perf went down to 708MHz even though I didn't touch the code lol

1601537829
pixelherodev
Downsides of relying on nondeterministic behavior

1601537918
ikskuh
huh

1601537920
ikskuh
caching breaks

1601537948
pixelherodev
Oof

1601538084
ikskuh
yep

1601538122
pixelherodev
okay, now for another fun test

1601538127
pixelherodev
What's the perf like on a

1601538234
pixelherodev
Oof.

1601538246
pixelherodev
Not *bad*, but not nearly as much of an improvement yet

1601539121
pixelherodev


1601539123
pixelherodev
Huh

1601539131
pixelherodev
I think I might legitimately be able to cross 1GHz without issues

1601539160
ikskuh
:D

1601539170
ikskuh
z80 → x86 is a good jittable arch :D

1601539179
ikskuh
"just copy over the bytes and patch some" :D

1601539189
pixelherodev
I'm not doing direct to x86

1601539196
pixelherodev
This goes through RISC-V first ;)

1601539227
pixelherodev
also yes I

1601539254
pixelherodev
ahhh whoops

1601539265
pixelherodev
I'm using the TI ASIC MMU, which is slowing everything down massively

1601539275
pixelherodev
What I really need to do is JIT away the MMU access :)

1601539307
pixelherodev
Could probably cache opcode lookups until pages are swapped

1601539385
pixelherodev
Woot! 1GHz on the laptop!

1601539422
pixelherodev
1.24GHz, even

1601539438
pixelherodev
and shockingly these optimizations are actually useful :P

1601539463
Michcioperz
which graphics library is that

1601539481
pixelherodev
A bespoke one :P

1601539506
pixelherodev
`widget_t *z80_callback = customwidget_create(callback_function);`

1601539609
pixelherodev
lol

1601539616
pixelherodev
bespoke: application-specific

1601539625
Michcioperz
ah hahaha

1601539628
Michcioperz
that makes sense

1601539628
pixelherodev
I mean, it's a really nice API IMO, but it's part of the application, fundamentally

1601539637
pixelherodev
I do intend to split it out though

1601539641
Michcioperz
i searched for customwidget_create on github and only your repo came up

1601539650
pixelherodev
That's honestly hilarious

1601539706
pixelherodev
Michcioperz: wait, it did??

1601539711
pixelherodev
I just tried and I don't see it lol

1601539722
pixelherodev
Oh this is hilarious.

1601539728
Michcioperz
i mean, after selecting C language only

1601539737
Michcioperz
i assumed you were not like, writing this in shell

1601539739
Michcioperz


1601539741
pixelherodev
I got the z80 running at 2GHz on my (3.2GHz) PC, because I set 2GHz as the limit

1601539745
pixelherodev
I tried upping it to 3

1601539758
pixelherodev
Then I remembered that it's defined as the raw Hz value.

1601539765
pixelherodev
and it now exceeds the limit lol

1601539788
pixelherodev
(because C is dumb and has the time as int by default :P)

1601539815
pixelherodev
There we go!

1601539821
pixelherodev
~400MHz on the interpreter to over 2.2GHz on the JIT

1601539930
pixelherodev
To put it differently, <1MHz in valgrind with the interpreter to >50 ;P

1601540027
pixelherodev
Whelp, I'm out of fruit apparently

1601540039
pixelherodev


1601540422
pixelherodev
ikskuh: I think I can make this specific microbenchmark even more insane

1601540426
pixelherodev
I figured out how to hit THz levels

1601540456
pixelherodev
When translating some address X, and a nop is encountered, trawl from X until either the end of the address space or a non-nop value is encountered

1601540467
pixelherodev
Produce a function which simply adjusts `cycles` and `cpu->registers.PC`

1601540478
pixelherodev
That'll process 64K NOPs in the time I can currently process one :P

1601540493
pixelherodev
So, 128THz on my PC

1601540521
pixelherodev
Why am I like this

1601540590
pixelherodev
ikskuh: "my SPU II emulator is over a million times faster than yours!!!"

1601540619
pixelherodev
actually, due to the 16-bit instructions on SPU II, it'd be a tad slower

1601540626
pixelherodev
Still THz insanity though

1601540721
Michcioperz
our scientists were so preoccupied with whether or not they could

1601540722
pixelherodev
Still, anything that can emulate 262144 cycles in the space of two x86 `mov`s is obviously stupid, even if this is fun to make

1601540738
pixelherodev
Michcioperz: lol

1601540770
pixelherodev
On a modern microarchitecture, I think this could hit... *technically*... about two hundred thousand instructions per (physical) cycle?

1601540798
pixelherodev
It could tear through the full address space probably

1601540824
pixelherodev
The thing is, this wouldn't slow down real uses

1601540844
pixelherodev
So there might not be a practical benefit, but the entertainment is free :)

1601547425
ifreund
so std.os.toPosixPath() returns a pointer to a stack variable

1601547461
ifreund
how is this safe? is this guarenteed to be safe if no other function is called before the variable is used?

1601548013
ifreund
wait no I can't read

1601551355
ask6155
hello

1601551444
ifreund
o7

1601551595
ask6155
my master zig compilation was failing. I deleted the build folder and tried again I was building but at the last stage it hanged my pc. The last one was 99% building self-hosted component /home/user/zig/zig1.o It ate all my ram and started eating my swap. I killed it. I then turned my swap off and tried. It failed at the last step with an allocation failure. I was able to build it before and I have 4GB ram.

1601551601
ask6155
Also I noticed it certainly does have a kind of poetry to it. If you know what I mean

1601551733
ifreund
ask6155: The quick fix would be using a commit from before #6250 was merged

1601551775
ask6155
what was it?

1601551780
ifreund
this PR moved a LOT of C++ to Zig code and increased the size of the zig1 codebase significantly

1601551825
ifreund
unfortuneatly the C++ zig0 compiler is not at all memory efficient, so it sounds like this change was enough to push things over the edge for your machine

1601551826
ask6155
so you mean I can't compile it?

1601551865
ifreund
there are some ideas to make the zig0 compiler more efficient as a stopgap until the self-hosted compiler is feature complete

1601551891
ifreund
(the self hosted compiler is WAY more memory efficient and faster than the stage0 C++ implementation)

1601551957
ask6155
One of the things I like about zig was I could actually compile the compiler and use it unlike all the other compilers. I wouldn't want to loose that

1601552103
ifreund
feel free to open an issue to discuss, I agree that this is a problem

1601552441
ask6155
can you tell me the commit hash at which this was changed?

1601552478
ikskuh
ask6155: 0.6.0+f8b3543ca is still using the old system

1601553334
ask6155
I created an issue

1601553443
ask6155
building the compiler is a thing noone really cares about. The only other compiler I can think of that I can compile is tinycc.

1601553530
ikskuh
i really love how easy building Zig with cmake is

1601553648
ask6155
is it safe running gdb with sudo?

1601554482
ifreund
afaik yes

1601554498
ifreund
you need privlages for some of gdb's functions in fact

1601554565
ask6155
ok I was asking because gdb was using ptrace and I had set it so that ptrace can only be used by privileged users

1601567095
fgenesis
uhm apparently there's a nullptr dereference somewhere in the zig part of the zig compiler. tried to compile a .c file on a rpi4 and after adding an asm volatili("yield") in the .c file it kept segfaulting

1601567115
fgenesis
plus valgrind finds a bunch of "conditional mode depends on uninitialized value"

1601567137
fgenesis
was testing the arm7 binary release of zig 0.6 yesterday

1601567173
fgenesis
didn't bother to debug it but likely will sometime this weekend if anyone is interested

1601567212
ikskuh
fgenesis: not really relevant atm. some days ago, #6250 landed and rewrite 20kLOC of the stage1 compiler

1601567216
ikskuh
*rewrote

1601567216
fgenesis
*conditional move

1601567226
fgenesis
thought as much

1601567235
fgenesis
still wanted to mention it for completeness

1601567258
fgenesis
i'll probably go and build zig master when i have the energy for it

1601567289
fgenesis
oh and i wanted to mention that the biitstrap build script is broken for me, i'm apparently too dumb to supply the right cmdline args to make it past line 13

1601567299
fgenesis
*bootstrap (gah i can't type today)

1601572563
fgenesis
compiling llvm10 on a pi4 takes a long time indeed

1601572584
fgenesis
don't even want to know how a pi1 or 2 would cope

1601572613
fengb
Pi1 falls over due to memory

1601572862
fgenesis
not if you enable swap

1601572868
fgenesis
and plan in extra time

1601572886
ikskuh
wear out that SD-Card!

1601572895
ikskuh
or even better: use a file on NFS for swap!

1601572900
fgenesis
nah, just put the swap on a usb-hdd

1601572914
fengb
I mean... swapping out that 512 MB is doable

1601572926
fengb
But that's akin to falling over to me

1601572931
fgenesis
or remote-smb-share backed by a ramdisk. remote-ram as a service

1601572932
fengb
Since LLVM takes gigabytes to build

1601572955
ikskuh
fgenesis:

1601572960
fgenesis
yes

1601573013
fengb
Hmm... is there a way to make the VRAM config more fluid? Rebooting each change is annoying

1601575718
nikki93
shachaf: nice :o i was using entr for it

1601577087
ikskuh
hm

1601577105
ikskuh
anyone an idea why zig emits a call to __memcpy_chk when building for x86_64-windows-gnu?

1601577109
ikskuh
and where this might come form

1601577222
ikskuh
aha!

1601577231
ikskuh
zig sneakily sets _FORTIFY_SOURCE

1601577298
donniewest
Has anyone considered setting up a bridge between zig's Matrix and IRC services? It'd make following all the conversations easier :)

1601577352
donniewest
Neovim has, uh, all the services (Gitter, Matrix, IRC) and they all bridge together so anyone can join the conversation anywhere. Makes things pretty nice

1601577389
tdeo
neovim? :)

1601577401
ikskuh
donniewest: zig community is decentralized. i have no idea how much chats are going on :D

1601577408
tdeo
though i think a bunch of people join this irc from the matrix bridge

1601577437
Nypsie[m]
donniewest: There's already a bridge between Zig's Matrix and IRC

1601577437
tdeo
ignore my first message, misread that one

1601577451
Nypsie[m]
In fact, I'm sending this message through the Matrix bridge as we speak :)

1601577467
donniewest
That's weird. I'm on the Matrix room and I don't see these same messages?

1601577471
fgenesis
... which means only irc is needed. end of discussion :D

1601577503
donniewest
I know Matrix can connect to Freenode, but it's still ultimately separate rooms. I personally prefer IRC, so a bridge to let me see those messages would be great

1601577507
Nypsie[m]
Ooooh, you mean like that. That's currently not done, no

1601577574
earnestly
That would be done with a bot, essentially.  It's not fun "talking" to bots on IRC because, at least, it breaks nick display

1601577581
donniewest
Well, if there's interest, I'd be happy to lend a hand :)

1601577604
donniewest
Yeah, the nick sync is a bit weird. Neovim's seems to handle it alright but there's still a bit of a disconnect

1601578395
nikki93


1601578781
Nypsie[m]
Cool!

1601582235
pixelherodev
Heads up to the ziglibsers that I left the GitHub org; I just deleted all my repos except for the zig branch (which is staying until PRs are merged)

1601582699
wootehfoot
pixelherodev, you mean you deleted all these repos?

1601582796
alexnask[m]
No, the ones he had ownership of, these are fro mvarious authors

1601582804
alexnask[m]
Not sure which those were

1601584206
nikki93


1601585355
pixelherodev
wootehfoot, alexnask[m]: I didn't delete any organization repos.

1601585366
pixelherodev
I delted repos under github.com/pixelherodev/*

1601585371
pixelherodev
and I

1601585373
pixelherodev
deleterd*

1601585381
alexnask[m]
ah, okay, mb

1601585381
pixelherodev
deleted*

1601585385
pixelherodev
Two different things

1601585562
pixelherodev
alexnask[m]: no worries :)

1601585955
torque
<donniewest> I know Matrix can connect to Freenode, but it's still ultimately separate rooms. I personally prefer IRC, so a bridge to let me see those messages would be great <-- I personally disagree with using bridges between different services

1601585961
torque
drops the signal to noise ratio like a rock

1601586843
nikki93
quick q: how do i convert an integer to a float to multiply by a float? eg. if i have an integer 10, then want to multiply by 0.1 and get 1.0

1601586875
alexnask[m]
@intToFloat

1601586886
nikki93
i see

1601586888
nikki93
thx!

1601587176
shachaf
nikki93: Oh, if you're using Windows then I don't know if it'll work, since it uses ptrace.

1601587310
nikki93
i'm mostly on linux or mac but i use windows too :)

1601587597
nikki93


1601587623
ikskuh
neat!

1601587773
nikki93
the inline styles are mostly for quick testing, mostly planning on just setting css classes in code and keeping the styles in css files elsewhere

1601588002
pixelherodev
whatcha working on?

1601588162
nikki93
just exploring what using zig looks like for web graphics and ui stuff

1601588182
nikki93
especially ui for editing those graphics

1601588217
nikki93
so that you could do a level editor for a game etc.

1601588252
nikki93
the main thing i'm curious about when i get there is abt using zig's reflection and comptime stuff to generate ui for the structs of data

1601588447
cr1901_modern
I asked this before, but I'll ask a different way... if I'm using a zig package (regex) that's known to leak memory, what would be a reasonable way to suppress the leak warning output.

1601588462
ikskuh
use arena allocator

1601588486
cr1901_modern
Okay works for me, I'll see how to use it

1601588504
ikskuh
or even better (as told before): fix the library, make a PR, make everyone happy1

1601588999
cr1901_modern
I don't have the bandwidth to fix the library

1601589004
cr1901_modern
I filed an issue a few weeks ago

1601589043
cr1901_modern
In addition, someone smarter than me tried and failed to fix the issue :P

1601589717
nikki93


1601589783
ikskuh
this is super cool

1601589807
tdeo
yeah!

1601590078
nikki93
thanks! ^_^ the hard part of the logic is done by

1601590088
nikki93
will post this repo up in a sec

1601590199
companion_cube
wait, is this in wasm then?

1601590304
nikki93
yea! i put the code up here:

1601591884
cr1901_modern
Right, since zig reached a nice milestone moving lots of code from C++ to zig land, I'm gonna try compling it.

1601591889
cr1901_modern
Let's see what happens

1601592352
cr1901_modern
5.2GB for the self-hosted component... eep :o. But looks like I have enough RAM

1601592486
cr1901_modern
Also is it normal for the compile of the self-hosted component to take several minutes? It's using 100% of a single core of my CPU. So it's doing work. Just curious

1601592538
ifreund
I think that's not abnormal, the stage1 compiler is not efficient

1601592575
cr1901_modern
Finally linking. Took about 5 minutes.

1601592621
cr1901_modern
Is the stage0/stage1/etc build process documented? I can of course gleam the basics by reading the source, but if there's docs I'd rather read those

1601592813
ifreund
not too much to know, the stage0 compiler is written in C++ and is used to complie the parts of stage1 written in zig then linked with them to form stage1

1601592839
ifreund
stage2 is written entirely in zig with an optional dependency on llvm

1601592853
ifreund
stage3 is stage2 rebuilt using stage2

1601592931
cr1901_modern
optional dep on llvm? Is this to support alternative backends in principle?

1601592957
tdeo
stage2 doesn't actually have llvm support yet, it only supports its own backend

1601593137
frmdstryr
Can I force zig to somehow do an 8 bit write to a 32bit register?

1601593157
frmdstryr
I'm implementing SPI and it is always doing 16-bit writes

1601593174
frmdstryr
The C impl is here

1601593250
frmdstryr
So if I write 0xFF it's actually writing 0xFF and 0x00 on the wire

1601593299
ikskuh
just do the cast as well?

1601593438
frmdstryr
The value is already a u8?

1601593489
frmdstryr
or do you mean cast the ptr to the register?

1601593547
ifreund
yes that

1601593638
frmdstryr
Dude... awesome! Hah, thanks!

1601594107
Piraty
jjsullivan: why did you list all the archs in the zig template (your cross PR) instead of just dropping archs= ?

1601594119
Piraty
why exclude ppc* for example?

1601594168
jjsullivan
I wasn't able to test if ppc works, and armv5te/mips wasn't compiling

1601594182
jjsullivan
ppc is probably fine but idk about the others

1601594185
jjsullivan
Piraty ^^

1601595683
delaney
Hi, I'm trying to get zig running on my work laptop which is unfortu

1601595717
delaney
Lately a Mac... got it build from source finally but `zig init-exe` and `-lib` just hang forever

1601595896
pixelherodev
cr1901_modern: LLVM dep is for optimizations, basically

1601595912
ifreund
and for translate-c

1601595937
pixelherodev
For now at least

1601595950
ifreund
and zig cc

1601595964
cr1901_modern
Is there an alternate IR that- hypothetically speaking, if I wanted to add a backend not in LLVM- I could generate code from in the zig stage 2 compiler?

1601596019
tdeo
as i said stage2's not-llvm ir is the only ir, there's no llvm support yet :)

1601596019
ifreund
cr1901_modern: sure, stage2 currently does not depend on llvm and generates code directly for multiple architectures

1601596079
ifreund
debug builds of zig code will always be entirely self hosted using the bespoke codegen and incremental linking

1601596166
cr1901_modern


1601596205
nikki93
delaney: maybe you could try the master build at

1601596233
delaney
Ok I'll try that @nikki93

