1589328561
daurnimator
pmwhite: just put `comptime` in front of your call

1589328846
daurnimator
but also, you should rarely if even be making inline functions

1589332214
foobles
when building zig, how do you enable compiler stacktraces?

1589333147
fraktor
This is kind of a dumb question, but how does one allocate a slice of a certain size?

1589333254
fraktor
Nevermind, I just found allocator.alloc.

1589337974
fraktor
Is there a standard library function to parse an int, or should I roll my own?

1589338424
tdeo
std.fmt.parseInt

1589338429
tdeo
fraktor: ^

1589338448
fraktor
I'm dumb. That makes sense.

1589341267
pmwhite
daurnimator: I didn't make the inline functions. Some of the functions in `fmt/parse_float.zig` are inline.

1589344350
foobles
andrewrk how do you track an assertion failure? it's giving me the line number of the souce code being analyzed, but not the assertion itself

1589344359
foobles
within the compiler

1589344508
tdeo
are you running in a debugger?

1589344560
foobles
no, i cant figure out how to do that with msvc :/

1589344744
foobles
oh wait, i have a lead

1589344888
foobles
a wait, nope :/

1589345466
andrewrk
unfortunately on windows you have to build llvm,clang,and lld in debug mode in order to build zig in debug mode

1589345474
andrewrk
which is a pretty tall order

1589345489
andrewrk
on posix systems you can do release llvm,clang,lld + debug zig

1589345500
andrewrk
this is a limitation of stage1, not self-hosted

1589345509
andrewrk
really, it's a limitation of MSVC

1589345592
foobles
interesting

1589345598
foobles
somehow i got a debugger to work

1589345600
foobles
idk how

1589345608
foobles
just using CLion

1589345637
foobles
so is there no way to track a failing assert?

1589345816
foobles
it has an experimental third party debugger for msvc somehow

1589345828
tdeo
usually the debugger takes you right to the assert when it happens

1589345855
tdeo
also the line is printed if it's built in debug mode

1589348525
antaoiseach
andrewrk: the redis async talk was very nicely done ... helped clear some of my own doubts post the master doc

1589348543
antaoiseach
we should have more of those if and when possible!

1589348560
antaoiseach
from other people as well!

1589351323
drp
antaoiseach: Do you have a link to the talk? All I can find are redis modules with zig.

1589351454
drp
ah I found it on the subreddit -

1589352977
wilsonk
is the second talk available yet?

1589353538
andrewrk
wilsonk, the 2 talks are:

1589353548
andrewrk
writing redis modules in zig:

1589353569
andrewrk
Modeling Data Concurrency with Asynchronous I/O in Zig:

1589353622
wilsonk
great, thanks. Watched the second and not the first but I will watch it now. Great job on the async i/o talk :)

1589353646
andrewrk
thanks! glad you liked it :)

1589353671
daurnimator
I think it was good for a zig audience; I'm not sure if it had enough context for people not already familiar with zig (or even the concept of function colours)

1589358130
alexnask
foobles I would suggest using WSL if you can to debug compiler bugs

1589376103
drp
When I print out a float I'm getting unexpected notation. in C I would get 42.185970 with float. in zig I get 4.21859664e+01 with f32

1589376163
drp
I'm guessing std.io.getStdOut().outStream().print format floats?

1589376280
ikskuh
yep

1589376298
ikskuh
use {d} instead of {}

1589376302
mikdusan
things like `{d}` or `{d:.2}` work

1589376302
ikskuh
to get decimal notation

1589376544
drp
that did the trick, thank you

1589377077
fengb
Hmm... should we have a more intelligent default float output?

1589377152
ikskuh
i think the idea was that the default output of "{}" can be parsed exactly by parseFloat again

1589377157
ikskuh
so it's a sane default for serialization

1589377784
drp
I'm just going through a C exercise book turning the exercises into zig, the docs say that f32 is equivalent to float in C but I am getting very slightly different numbers.

1589377812
drp
C outputs 42.185970 but Zig outputs 42.185966

1589377912
ikskuh
that's okay, there are floating point modes and everything

1589377917
ikskuh
what's the calculation?

1589377923
ikskuh
and how much steps does it have?

1589378095
drp


1589378238
ikskuh
hehe

1589378241
ikskuh
use f64 in zig ;)

1589378251
ikskuh
C does promotion here to double

1589378344
afontain_
that's sneaky

1589378364
ifreund
classic C

1589378368
ikskuh
yep

1589378373
ikskuh
C does a wonderful lot of casting

1589378378
ikskuh
"1" is of type int

1589378384
ifreund
it's not promotion though right? 1760.0 is a double literal

1589378388
ikskuh
so if you do "uint8_t(1) + 1" the result is "int"

1589378392
ifreund
1760.0f is a float

1589378415
drp
interestingly enough I get nearly there now 42.185969

1589378459
ikskuh


1589378519
ifreund
yup, that's what i thought

1589379083
drp
Any reason why zig and c would be off by 0.000001 if they're both 64 bit floats now?

1589379097
ikskuh
floating point magic

1589379105
ikskuh
because the formatting algorithm is different probably

1589379288
drp
cool, thank you for your help, I was guessing that I was getting messed about by casting, I would not have guessed that the C compiler would promote a float to a double

1589379344
ifreund
drp: it isn't, 1760.0 is a double

1589379352
ifreund
if you want a float you need the 'f' at the end

1589379592
drp
if I make the kilometers variable a double in the C code then I get the exact same value as the zig code!

1589379630
drp
I can make the zig code create the same output as the C example if I do f64 math and then cast it to an f32

1589379642
oats


1589379742
ikskuh
> My hobby: injecting code into other processes and changing the floating-point rounding mode on some threads

1589379743
ikskuh
hihiihi

1589380605
oats
I kinda almost wish identifiers for types and values didn't share the same namespace sometimes :P

1589380939
fengb
Different namespaces for everything

1589380966
foobles


1589380970
fengb
if (if) (struct if) else (struct else)

1589380986
ikskuh
the heck

1589380986
foobles
that file i linked is hilarious

1589380993
foobles
its basically exactly what you are saying

1589381008
foobles
since rust has different namespaces for variables, functions, types, macros, etc.

1589381013
foobles
afaik

1589381017
oats
heh

1589381034
ikskuh
fn union() {

1589381034
ikskuh
union union<'union> { union: &'union union<'union>, }

1589381034
ikskuh
}

1589381035
ikskuh
union!

1589381047
oats
lol the u8 function

1589381051
mikdusan
onion

1589381055
oats
I guess one namespace makes things simpler :P

1589381079
oats


1589381090
foobles
`let val = !((|(..):(_,_),__@_|__)((&*"\\",'ðŸ¤”')/**/,{})=={&[..=..][..];})`

1589381103
foobles
i love that site :D

1589381103
mikdusan
brainfuck is easier to read

1589381106
antaoiseach
Is that a butthole?

1589381145
oats
huh, that emoji is displayed

1589381152
oats
I don't remember changing anything font related

1589381154
oats
interesting

1589381163
antaoiseach
hahaha... no, (_,_) I mean

1589381215
fengb
Your default font is probably emoji aware. Most are nowadays

1589381217
fengb
Thanks a lot unicode

1589381221
ikskuh
â™¥

1589381264
oats


1589381266
oats
hm

1589381271
companion_cube
ðŸ’ž

1589381273
companion_cube
emojis are life

1589381291
antaoiseach
Hah

1589381322
ikskuh
âŒš

1589383492
ikskuh
has someone integrated openssl or another ssl library into zig yet?

1589390529
alexander92
oi guys

1589390555
alexander92
is zig

1589390574
BaroqueLarouche
yes

1589390635
alexander92
like us-centered? we had a semiserious discussion in #nim if nim is a bit too europe-centric, because the author is german (giving zig as an example with an us author)

1589390801
fengb
Andrew is US based

1589390834
fengb
A lot of contributors are European though

1589390838
ikskuh
at least some people here are europe-based :D

1589390872
livcd
So what was the answer?

1589391009
alexander92
hm, we have some american and asian people in nim as well, but i'd agree most are european/russians

1589391039
alexander92
yeah i wonder if there is corelation between the author and the community location

1589391043
alexander92
in languages

1589391047
fengb
Majority of the contributors are European, but BDFL is US

1589391052
ikskuh
nah, i don't think so

1589391119
alexander92
not too important anyway :)

1589391136
fengb


1589391139
alexander92
also wanted to congrat for the incremental linker idea , sounds exciting

1589391597
drp
"if nim is a bit too europe-centric" I can never parse these questions properly, too europe-centric for what? It reads like "if (x > ) {}"

1589391610
drp
I've just started to log into this channel so I might be missing historical context to the question?

1589391732
mikdusan
a quick glance at contrib list, in no real order: USA, Finland, Australia, Denmark, New Zealand, France, Poland, The Netherlands, Brazil, Japan, Canada, England, Portugal, Germany

1589391809
alexander92
drp: yeah, i am not very good in english

1589391823
alexander92
i mean, more europe-centric than us-centric

1589391878
alexander92
people sometimes assume that it's easier for us-centered communities/tech to become succesful

1589392121
fengb
I'm actually surprised at the diversity. A lot of US based communities are quite insular

1589392642
andrewrk
I see it as a strength. If an entire geographical region doesn't care about the project, which is not inherently tied to any geographical region, something has gone wrong

1589392737
andrewrk
s/it/diversity/

1589392822
fengb
But... 'murica ðŸ‡±ðŸ‡·

1589392848
andrewrk
no

1589392887
andrewrk
also just pre-empting, absolutely no US politics discussion here

1589392904
mikdusan
need someone from Antarctica to step up :)

1589392917
andrewrk
I think people probably already knew that instinctively

1589393021
gonz_
"community" is overrated

1589393189
alexnask
fengb, You sure do love that liberian flag lol

1589397434
oats
Is it considered good practice to let the error set be inferred for an error union return type?

1589397459
oats
I'm kind of surprised by how common this is, I would think it would be better to make errors more explicit where possible

1589397567
andrewrk
oats, generally, in implementations, inferred error sets are fair game, but for public facing APIs, explicit error sets make sense. this will become more obvious once we have a faster compiler + package manager and everybody starts using each others' code

1589397983
oats
andrewrk: sorry, not sure what you mean by "implementations"

1589398022
andrewrk
by "implementations" I mean functions that are not part of the public API surface area

1589398031
oats
aha, gotcha

1589398034
alexander92
andrewrk sorry, i was trying to think of purely social community effects

1589398056
andrewrk
nobody did anything wrong, no need to apologise

1589398069
alexander92
thank you

1589398106
alexander92
otherwise, i wanted to ask, do you plan on supporting parallel compilation of zig code in the future?

1589398115
andrewrk
yes

1589398125
andrewrk
I've been designing the self-hosted backend with that in mind

1589398135
alexander92
i am following with interest ongoing IC work in several langs and it seems to me it would be much simpler to support both

1589398143
andrewrk
IC=?

1589398149
alexander92
incremental compilation

1589398155
andrewrk
ah

1589398202
alexander92
ok, i have to take a look: i am trying to build a small (one day reusable for different langs) pipeline based on that idea

1589398208
andrewrk
right now I'm solving the incremental compilation aspect of the problem. I plan to tackle parallel compilation as a separate task

1589398210
alexander92
and wanted to see what different languages do

1589398229
andrewrk
however I do plan to tackle parallel compilation up front, before doing most of the language implementation

1589398263
alexander92
cool: i have to take a look at that backend, are you rewriting the whole compiler?

1589398268
andrewrk
yes

1589398287
andrewrk
I'm hoping to get

1589398311
andrewrk
once it's working I will also do a live coding stream and demo it a bit

1589398313
alexander92
one thing i notice in my small work until now is that designing a language around those limitations from the beginning makes much simpler to define such a pipeline

1589398325
andrewrk
I completely agree

1589398335
alexander92
were there any big blocks in current zig's design

1589398338
andrewrk
what do you have working so far?

1589398360
alexander92
oh, it's a complete toy: i mostly have my plan

1589398377
andrewrk
yes in the stage1 compiler, the way result locations interact with inferred comptime expressions is kludgy and buggy

1589398379
alexander92
and some initial code, but i plan to PoC it this month

1589398405
andrewrk
in the rewrite I have switched from SSA to SSAT (Single Static Assignment Tree) form and it seems promising to solve the problem

1589398414
alexander92
yeah, i've heard the complaint that usually compile time code is very hard to support

1589398462
andrewrk
in zig you can mix compile time and runtime code in the same expression

1589398494
andrewrk
it's all quite intuitive from the coder's perspective, but the way stage1 compiler is designed, some expressions end up being tricky for the compiler

1589398500
alexander92
exciting

1589398508
alexander92
yeah, i have to play more with it

1589398552
alexander92
in my pipeline, i start from a subset of nim and want to eventually add exactly such a subset X of the CT stuff which is easy to express efficiently

1589398564
andrewrk
anyway sounds like you might enjoy catching that live coding stream. I'll announce it a few hours in advance here before I start

1589398582
andrewrk
twitch.tv/andrewrok

1589398596
alexander92
my idea was that one day, i'll separate the pipeline + dsl-s for some of the passes as a library and reuse it for different small languages

1589398638
alexander92
as it seems to me once one solves well such an architecture problem, it should be easy to reuse its conventions and tooling around: something like a `rails for compilers` (sounds horrible)

1589398650
alexander92
thank you, i'll subscribe

1589398683
ifreund
nice, i was worried that I had missed a stream last night cause I went to bed too early

1589398702
andrewrk
ifreund, I've moved past the chin-scratching phase and on to the "fix compile errors" phase

1589398704
alexander92
so anyway, what i wondered was if you feel that your architecture can be more generally applicable to many languages

1589398720
oats
99% of everything I do is the chin-scratching phase

1589398721
ifreund
andrewrk: that's super exciting!

1589398724
alexander92
or if those things are inevitably too limiting to language design

1589398778
andrewrk
alexander92, it's a good question. I'm not sure yet. ZIR will be designed to the semantics of the zig language, but it's possible those semantics may be conducive to be the backend of a different language

1589398782
fengb
I skip the chin scratching and straight to banging my head against the wall

1589399176
alexander92
andrewrk i dont know it :(

1589399207
alexander92
an IR can match certain interface , similarly to the module system and typechecking(e.g. only local)

1589399243
alexander92
and if those components match a general API, one might be still able to reuse a lib with a general architecture around them, but maybe this wouldn't work well at all

1589399248
alexander92
too much abstraction leaks

1589399250
andrewrk
ZIR is pretty zig specific. e.g. there is an instruction which does an @import of a .zig file

1589399296
oats
huh, "instruction"

1589399299
alexander92
but thats the point: in a general lib, IR-s can have hooks for that (importing module) etc

1589399309
oats
is ZIR closer to an assembly language or a structured programming language

1589399333
andrewrk
oats, decide for yourself:

1589399373
andrewrk
you can also observe how early it is in its development from the lack of more passing test cases

1589399409
alexander92
i imagine it like rails: you write down your passes and data structures following the convention of the lib, they just have to fit there (e.g. my typechecking pass is connected here and runs in parallel optionally producing artifact) etc

1589399418
alexander92
and you get the other tooling for free

1589399430
alexander92
but one needs to just prototype an example, too confusing, sorry

1589399458
andrewrk
rails assumes too much IMO

1589399471
alexander92
yeah, its mostly an example

1589399472
oats
huh, that's really interesting looking

1589399486
oats
I see x86 register names in there?

1589399493
oats
is this code specific to x86?

1589399540
andrewrk
oats, zig supports inline assembly

1589399554
andrewrk
the second test case there is specific to linux x86_64 yes

1589399557
oats
ahhh

1589399580
andrewrk
that's the simplest hello world I could come up with

1589399590
alexander92
but you can make the toolkit give you more with a bit of integration: lang server, debuginfo, repl

1589399612
alexander92
so that would be worth it for small languages/research prototypes/etc

1589402123
Dominic[m]
I've just received a micro:bit. I'm hoping to exclusively program it in zig. I've found

1589403181
Dominic[m]
ah, figured out the magic numbers. Cool :) I assumed the CPU, but it's not that.

1589403268
xackus
andrewrk, have you set up the Zig Software Foundation? i noticed it named in your redisconf talk

1589403444
fengb
The secret is out! ðŸ™ƒ

1589404790
mikdusan
> "not yet, still waiting on 501(c)(3) status to make an official announcement"

1589406183
watzon
andrewrk: stream idea. Try to pull some Crystal people over by figuring out how to cross compile a Crystal project using Zig.

1589406219
watzon
Right now Crystal's "cross compilation" creates an object file and gives you a command to run on the target machine. It would be awesome if you could just use Zig instead.

1589406276
watzon
I tried it already, but my clang knowledge is lacking and I think zig cc might be missing some things necessary to make it work.

1589406694
oats
I've never really checked out crystal

1589406700
oats
what's it's schtick?

1589406705
oats
s/it's/its

1589406715
oats
inglish is dum

1589406721
fengb
Syntax is Ruby like

1589406725
BaroqueLarouche
Native Ruby basically

1589406753
oats
nifty

1589406755
oats
GC'd then?

1589407028
oats
it's kinda cool how llvm has enabled so many interesting programming languages to sprout up

1589407159
companion_cube
GC'd, and with fibers

1589407173
companion_cube
so, quite fast, and yet quite high level

1589407173
oats
fibers?

1589407187
companion_cube
goroutines, if you will

1589407189
ifreund
thread abstraction like go routines

1589407191
companion_cube
green threads

1589407194
oats
ah, neat

1589407199
companion_cube
no async/await

1589407209
companion_cube
yeah it seems nice for writing websites or whatnot

