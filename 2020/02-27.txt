1582764517
BaroqueLarouche
I'm being given some love to zigimg since I mentioned it in the last stream, getting close to have PCX support in:

1582764517
BaroqueLarouche
Next format: NetPbm (from mq32

1582764525
BaroqueLarouche
and PNG

1582768192
alexnask
Looks like I can't avoid copy pasting for every argument count in vtable generation unless I'm missing something

1582777998
pixelherodev
Is it just me or does `zig fmt` occasionally move DocComments into the wrong place? :(

1582779979
fengb
Yeah :(

1582783188
pixelherodev
Is there a way to do a parseInt to an integer whose size is not comptime known other than `inline-for`ing over a range of integers, comparing them, and then passing the comptime integer to parseInt?

1582783221
pixelherodev
I suppose I could just use u64 and assume it'll never be larger...

1582784500
Snektron
Pixelherodev, you can achieve that with a custom parseInt

1582784546
Snektron
Or maybe you can parse with type comptime_int

1582788746
mq32
<BaroqueLarouche> Next format: NetPbm (from mq32

1582788747
mq32
neat!

1582788931
mq32
I'll take a closer look at your library, maybe even add some more obscure formats to it :D

1582794463
alexnask
BaroqueLarouche is the code you linked in the issue public in some repo? I would be interested in tinkering with it and possibly fixing the compiler error.

1582804900
mq32
> try args.@"1".create(AllocT);

1582804903
mq32
this looks quite crazy

1582806001
mq32
alexnask: made you a small review, std.interface looks quite awesome :)

1582807826
alexnask
mq32, In a good or bad way? ;)

1582807856
mq32
the crazy thing? kinda a bad way, but i understand that we cannot make that better atm

1582807871
mq32
but the whole PR/interface stuff is nice, i like it!

1582807906
alexnask
Thanks for the review, this is still pretty early on, I will add lots of docs, tests etc

1582807974
mq32
yeah i missed that in your PR todo list :D

1582808120
alexnask
Pretty sure my destroy call is technically incorrect atm (docs say that destroy should take return value of create or a pointer to the same address with the same alignment)

1582808141
mq32
i think my proposed change would be correct

1582808149
alexnask
Not sure if using 'alloc' and 'free' would be valid though, alignment info will be lost during type erasure

1582808154
alexnask
hmm

1582808207
mq32
you probably have to store the alignment as well

1582808296
alexnask
Yes I think so too

1582808349
mq32
but i really like the idea that this interface implementation is using fat pointers

1582808357
mq32
instead of storing a vtable per object

1582808366
alexnask
Pretty bummed I cant avoid copy pasting a closure per argument count

1582808373
alexnask
In the vtable generation

1582808380
mq32
yeah

1582808408
mq32
i think it would also be helpful if @Type() could create a struct type

1582808427
alexnask
I believe aggregate types will not be supported

1582808432
mq32
yeah, me too

1582808436
mq32
and i can understand why

1582808440
mq32
oh man

1582808445
mq32
i got the wildest bug right now

1582808457
mq32
hacking on my toy language, now this happend:

1582808469
mq32
var global; for(x in [1,2,3]) { } // compiles

1582808477
mq32
for(x in [1,2,3]) { } var global; // doesn't compile

1582808517
alexnask
Should it? :P (assuming there is no newline in between)

1582808577
mq32
yes

1582808588
mq32
the code generation fails as it looses track of temporary variables :D

1582808789
BaroqueLarouche
alexnask: My project with COM usage is not public yet, but I could strip out the Wwise parts from it and put it in a repo

1582808839
BaroqueLarouche
mq32: Love hearing that you will be willing to contribute in the future 🙂 Also, do you mind that I use MIT license in my code since yours was zlib ?

1582808861
mq32
nah, just go for it

1582808871
BaroqueLarouche
thanks :)

1582808883
mq32
^= store this and quote it if someone wants to nag you about licence stuff

1582808935
BaroqueLarouche
mq32: I did this

1582809074
alexnask
I think I will just store the alignment and keep the erased pointer since the requirement is just a pointer with the same address and alignment

1582809119
mq32
neat

1582811242
fengb
Maybe try replacing one of the existing interfaces... like rng? :P

1582811345
mq32
fengb: if i read the PR comment right, that's the plan

1582811419
alexnask
Hmm, running into the 'cannot assign to constant' bugt with tuple concatenation too now

1582811638
alexnask
weird

1582811643
alexnask
var a: usize = 100;

1582811644
alexnask
try iface_instance.call("otherFn", .{a}); // works

1582811654
alexnask
try iface_instance.call("otherFn", .{100}); // error

1582811888
mq32
what about .{@as(usize, 100)} ?

1582811943
alexnask
That errors too, as well as const a = 100; and const a: usize = 100;

1582811959
alexnask
So it appears to error when a value is comptime known

1582811987
alexnask
I will make some isolated testcases, and open an issue (and work on that one)

1582812053
mq32
<3

1582814812
fengb
Yeah you assume I can read

1582814849
mq32
:D

1582814881
fengb
In big endian, if I use a union, would the pointers line up across different sizes?

1582814958
mq32
unions don't guarantee anything

1582814967
mq32
or do you mean extern/packed unions?

1582815405
fengb
Packed yeah

1582815418
fengb
Little endian is nice since they naturally line up

1582815441
mq32
yeah

1582815472
fengb
I guess I can just get a pointer to the field and let LLVM realize it's a noop

1582815485
alexnask
What do you mean 'line up'? I feel like I'm having a major brainfart :P

1582815488
fengb
Probably the most correct solution :P

1582815526
fengb
In `packed union { A: u8, b: u32, c: u64 }, the addresses of all the fields are guaranteed to be identical

1582815529
fengb
... for little endian

1582815540
alexnask
Ah, gotcha

1582815555
fengb
So it's a noop for me to cast between the pointers

1582815558
fengb
Not sure if that's the case in big endian

1582815582
fengb
And if it isn't, there will probably be bugs, cause who uses big endian!

1582815605
alexnask
I pushed a commit and it didnt update my PR, weird

1582815628
fengb
Github is having some issues

1582815639
fengb


1582815652
alexnask
Ty

1582815663
alexnask
Time to dive into compiler internals to fix this concatenation bug

1582815673
mq32
go go go!

1582815844
BaroqueLarouche
just DO IT

1582823214
terinjokes
I use big endian from time to time…

1582824139
mq32
has somebody experience with the hashmap type?

1582824164
mq32
i wonder what the excapt semantics of "put" and "putNoClobber" are

1582824384
andrewrk
mq32, those functions have doc comments

1582824469
mq32
so i get the old value back if there was any?

1582824480
mq32
i'm just not used to such an interface

1582824531
metaleap
mq32: can be handy if the old value needs to be free()d / deinited etc

1582824534
mq32
i would've expect an error if i try to replace an already existing key

1582824569
metaleap
mq32: often not. half of my hashmap uses are "set of foo"

1582824588
andrewrk
mq32, look at the return types and doc comments of both those functions

1582824690
mq32
hmm

1582824693
mq32
i understand

1582824723
mq32
would it be welcome to modify the hashmap so it would allow a putOrError() ?

1582824807
mq32
oh. found a compiler bug ^^

1582824837
mq32
semantic analysis runs into an endless loop

1582824853
andrewrk
you should just use put() and return error.WhateverYouWant if the value is not null

1582824932
mq32
but that would be a different semantic

1582824942
mq32
it would override the existing key if i had an old value

1582824948
mq32
instead of not replacing that value

1582824968
mq32
the error would happen post-mutation

1582825064
andrewrk
mq32, oh, I think you want getOrPut

1582825108
mq32
ah okay

1582825168
mq32
i think it's still useful to have a function putOrFail as it's a common use case (at least for me)

1582825240
andrewrk
I suspect you will need access to the previous value in case of failure in which case you want getOrPut

1582825261
andrewrk
e.g. if you were reporting the error to a user you would say "error that already exists, previous value was foo"

1582825291
mq32
in my concrete usecase i would error out with "function X was already defined"

1582825320
andrewrk
wouldn't you want error.FunctionAlreadyDefined rather than e.g. error.PutWouldClobberHashMapItem

1582825399
mq32
yes, but that would be catch |err| switch { error.PutWouldClobberHashMapItem => return error.FunctionAlreadyDefined, else => return err, };

1582825445
andrewrk
shorter: if (gop.found_existing) return error.FunctionAlreadyDefined

1582825568
mq32
+ one new variable for each function i want to insert into the map

1582825596
mq32
or i could create a new struct into a thing that is a map + my single function i need

1582825789
mq32
i narrowed down a problem in the lazy value analysis

1582825831
mq32
were there any fixes regarding this in the last days?

1582825854
fengb
`try self.push([4]u8, @ptrCast(*[4]u8, top_ptr).*);` -- `error: expected type 'void', found '@TypeOf(execution.push).ReturnType.ErrorSet'`

1582825898
fengb
Am I doing something really stupid?

1582825918
fengb
Without the try, it gives me `error: expression value is ignored`

1582825965
fengb
Oh! This function doesn't have an error

1582825994
fengb
Really confusing error message :/

1582826038
mq32
fengb: i've read "try self.push(" and just thought: what do you want to do with my code? :D

1582826516
mq32
error "narrowed" down and reported

1582826536
mq32
also found two workarounds

1582833515
fengb
Oh I’m pretty sure it’s due to recursive comptime functions

1582833532
fengb
I had the same problem with my generator branch

1582833570
andrewrk
I forget, why does start code need to do TLS initialization even when --single-threaded ?

1582833571
mq32
fengb: but interestingly it helps to introduce a inbetween function

1582833582
andrewrk
I think TheLemonMan knows

1582833607
andrewrk
I think that should be documented in a comment right where it's tempting to wrap TLS initialization with `if (builtin.single_threaded)`

1582833673
andrewrk
oh right. because of god damn errno on dragonflybsd

1582835167
fengb
`zig run` sticks stuff in the global cache?

1582835258
andrewrk
nearly any compilation is going to need libcompiler_rt.a and libc.a

1582835303
andrewrk
(libc.a has memcpy, memset, etc which are always possibly called by llvm codegen)

1582835325
andrewrk
oh and yes zig run uses the global cache for the exe file as well

1582835464
fengb
Is there a standard way of cleaning the cache?

1582835477
andrewrk
rm -rf

1582835512
andrewrk
it's planned to do its own garbage collection with a config file specifying the size limit. that's not implemented yet

1582835619
fengb
Ah okay that works

1582835894
fengb
If I have a non-native pointer alignment, will Zig / LLVM be smart enough to translate that properly? e.g. *align(4) u64

1582835948
andrewrk
yes

1582835955
andrewrk
that's well-defined and works as you would expect

1582835971
fengb
Great! 👍

1582836000
fengb
I remember your unsafe Rust article and was a little worried

1582836011
fengb
That some day, my VM might run on non-x86 lol

1582836042
r4pr0n
hey, i saw it is possible to ignore an error in zig, by doing "_ = functionthatreturnserror()", but is that also possible if the function returns something? i don't care what happens when it errors, it might as well be undefined behaviour and segfault or something

1582836063
andrewrk
r4pr0n, `_ = ...` does not allow discarding an error

1582836121
andrewrk
it sounds like you are looking for `foo() catch unreachable;`

1582836148
andrewrk
if you want to additionally discard the (non-error) return value it would be `_ = foo() catch unreachable;`

1582836186
andrewrk
you might also consider `foo() catch @panic("unexpected error")` which is still defined behavior in non-safe release builds

1582836187
r4pr0n
yeah, i just wanted to not handle the error at all, so it would be easier to read the outputted assembly, because i'm kinda new to that and wanted to experiment a little

1582836250
r4pr0n
but i guess a catch unreachable would also work

1582836275
r4pr0n
thank you regardless

1582836305
andrewrk
you could also do `catch undefined` which would give you an undefined value if an error occurred. that's not undefined behavior, unless you do certain things on the undefined value such as branch

1582836339
andrewrk
good luck. debug mode assembly is a bit noisy

1582836353
andrewrk
lots of runtime safety checks happening

1582836365
r4pr0n
yeah, i'll actually use release mode small or fast because of that

1582836393
r4pr0n
what i'm programming won't actually be used, i just thought it would be nice to teach myself assembly a little more by doing stuff in zig and looking at the resulting assembly

1582836407
andrewrk
note that in release-small and release-fast, the optimizer is allowed to notice `catch unreachable` and assume that the error path is not possible, and delete the code that would produce an error

1582836525
r4pr0n
oh okay, thanks for the tip :)

1582838859
alexnask
I always feel so stupid when it takes me 3 hours debugging an issue only to finally fix it with a single line of code >.>

1582839112
andrewrk
it's a sign that the code you're editing has footguns

1582839343
alexnask
I'm still struggling with the compiler internals :P

1582839396
andrewrk
mikdusan has written a lot of helpful info about that topic

1582839473
mikdusan
I wish I had more time to give that doc the attention it deserves

1582840036
mikdusan
is there a lang'ism for `@TypeOf(.enum_literal)` or is that just how one gets the type?

1582840083
andrewrk
that's how you'd get it. I would imagine that being quite rare

1582840134
andrewrk
mikdusan, actually, this should work: @Type(.EnumLiteral)

1582840155
andrewrk
that will require an improvement to ir.cpp because @Type does not properly set up a result location

1582840182
andrewrk
workaround is @Type(std.builtin.TypeInfo.EnumLiteral)

1582840448
mikdusan
still a TODO. no sweat

1582840490
mikdusan
I actually may have a good case for a formal tuple (or pack) type

1582840519
andrewrk
nice

1582840644
mikdusan
consider: a format interface where .enum_literals are used for meta marking:

1582840654
mikdusan
s/interface/api/

1582840659
mikdusan
format("hello {}\n", .{ .fill='.', .center=20, .high, .info, "world" });

1582840726
mikdusan
note: both standalone items (like an anon array literal), and EnumLiteral=value items (like anon struct literal)

1582840760
mikdusan
this would permit me to strip-out post-functionality of fill/align  from the format string,

1582840778
mikdusan
and apply ANSI color directives

1582840796
andrewrk
taking this one step further, how about no format string

1582840811
mikdusan
yup, that's a very strong possibility

1582840876
andrewrk
format(.{"hello ", .{ .fill='.', .center =20, .high, .info}, "world"});

1582840915
mikdusan
this so far is pretty compact `"this is a number {+10.4f%}", .{ .high, .info, 1000 }`

1582840976
mikdusan
and if a elit was really neded, it could be api-escaped, ".{ .escape. .I_AM_A_LEGIT_VALUE }"

1582841088
andrewrk
I do like the idea of terminal escaping by default when using std.log (replaces std.debug.warn in #2586) and the output is a terminal, but also somehow building terminal coloring into format strings

1582841102
mikdusan
the existing anon-struct-lit mechanism falls apart because... well a formal tuple/pack doesn't care about repetitions. hell, it might even allow empty commas .{ one,,,3 } and let the context choose to ignore or make relevant

1582841161
andrewrk
I think integrating terminal colors into formatted printing would require adding more parameters to the output function

1582841265
r4pr0n
is it possible to disable optimizations for a single block?

1582841398
andrewrk
r4pr0n, that's planned as part of

1582841414
andrewrk
the llvm-based compiler will only have function granularity

1582841611
r4pr0n
oh great, but will setRuntimeSafety be completly replaced by this? i can imagine a situation where you want to enable safety checks but not disable optimization

1582841617
BaroqueLarouche
while working at Ubisoft Montreal, I abused so much of `#pragma optimize("", off)`

1582841878
andrewrk
r4pr0n, that's release-safe mode

1582841930
andrewrk
@setMode(.ReleaseSafe); //

1582842337
r4pr0n
uh

1582842344
r4pr0n
yes, but i meant block-wise safety

1582842495
mikdusan
andrewrk: here's a simple comparison of mix vs. tuple-everything. tuple-everything could be very powerful, supporting styles or simply nested tuples. maybe we need a splat operator is in order but that overlaps with ++ syntax

1582842498
mikdusan


1582842614
andrewrk
r4pr0n, safety has block-wise granularity, but an llvm-based compiler has function granularity for optimizations

1582842715
mq32
mikdusan, does that work though? it would require duplicate named entries in a tuple

1582842715
r4pr0n
oh, nvm, i understand the functionality of optimizeFor wrong

1582842738
mikdusan
mq32: by tuple I mean really generic tuples that don't care about repetitions

1582842744
mq32
ah!

1582842758
mq32
not sure if i like that, complicates a lot of things

1582842765
mikdusan
like?

1582842774
mq32
how do i access the tuple items?

1582842778
mq32
meta.fields?

1582842794
mq32
and will that remove the possibility for something like "tuple.info"?

1582842803
mikdusan
i don't think it fits into any existing type

1582842821
mikdusan
well except array I suppose

1582842839
mq32
array of classic tuples :D

1582842984
mikdusan
each item would be a union{ value: var, ev: struct { enum_literal: EnumLiteral, value: var }}

1582843014
mikdusan
hmm maybe I can hack this into stage1 and see if it flies

1582843183
mikdusan
btw c++20 is moving towards "packs":

1582843246
mq32
C++20 is moving a lot of directions

1582843276
companion_cube
woo for modules, at least

1582843331
mq32
semi-whoo

1582843351
mq32
doesn't seem like they fixed the real problems with that :d

1582843385
alexnask
woo for designated initializers, at least ;)

1582843424
alexnask
and ranges

1582843439
mq32
yeah designated initializers

1582843443
mq32
like ... C99 had :D

1582843447
mq32
21 years now

1582843461
alexnask
:D

1582843509
mikdusan
question is - when did gcc first begin supporting it

1582843886
alexnask
gcc has some very cool extensions of designated initializers

1582843892
alexnask
like: int widths[] = { [0 ... 9] = 1, [10 ... 99] = 2, [100] = 3 };

1582843905
mq32
ah yeah

1582843930
alexnask
Or the alternate syntax: struct point p = { y: yvalue, x: xvalue };

1582843931
alexnask
:P

1582843941
mikdusan
is that still supported?

1582843995
alexnask
Ah no it seems it's obsolete

1582844005
mikdusan
"Labeled Elements in Initializers"

