1586394550
andrewrk
I can't remember what I'm supposed to do to get command line tools working again after updating to macOS Catalina 10.15.4

1586394561
andrewrk
it didn't "just work"

1586395586
fengb
Oh hey, I figured out a silly workaround for defining tuples:

1586396195
daurnimator
fengb: assuming a `u1` casts to your thing...

1586396264
fengb


1586396290
fengb
I feel pretty dirty doing this

1586396374
andrewrk
fengb, how about a struct instead of a tuple?

1586396431
fengb
That's what I have right now but this is betterer

1586396483
fengb
(Actually this is terrible, I'll just wait for real tuples)

1586396771
fengb
We have "wasm32-freestanding-musl" on the bootstrap list. Shouldn't that be wasi instead?

1586397064
andrewrk
it should probably be removed. that list is the result of `zig targets | jq .libc`

1586397137
andrewrk
I wonder who is going to be the person who gets zig building with emscripten and makes a wsam build of zig for ziglang.org/play

1586397194
andrewrk
I've been resisting the urge to do it

1586397220
mikdusan
andrewrk, re: macOS 10.15.4, just install Xcode 11.4 and then launch it once. it should automatically ask you to authorize installing command-line tools

1586397233
andrewrk
thanks mikdusan, that worked

1586397261
andrewrk
although it's stuck on 11.3.x with no update available

1586397272
daurnimator
mikdusan: does `xcode-select --install` on command line do the same thing?

1586397300
mikdusan
daurnimator: I believe so.

1586397344
mikdusan
andrewrk: 11.4 should be available from app store. but, you can manually download it if you have free developer account (do you?)

1586397373
andrewrk
shouldn't it get updated via the system software update?

1586397388
mikdusan
it should if it's marked as managed by app store

1586397397
andrewrk
I believe that is the case

1586397419
daurnimator
fengb: what if I have a 0 bit type? :)

1586397427
mikdusan


1586398732
fengb
You ever come back to a project after a few weeks and pray that your test coverage is good enoguh even though you know it isn't? :P

1586400426
andrewrk
I've made it into March for the release notes

1586400896
fengb
🎉 almost there!

1586401058
andrewrk
yeah that's just the outline though, then I have to actually type it up 😅

1586401077
fengb
Oh... oof

1586401121
andrewrk


1586401188
BaroqueLarouche
wow it's huge

1586401400
andrewrk
can't wait to be done with this and start making progress on the next release cycle

1586405698
andrewrk
What is the closest thing out there available now that is a RISC-V System-on-a-Chip that is analagous to Raspberry Pi or BeagleBone

1586405872
shakesoda
andrewrk: there's a sifive board that fits that description i think

1586405885
andrewrk
HiFive Unleashed looks neat but it does not have e.g. HDMI or another way to output video/audio

1586405906
shakesoda
video out on risc-v is a bad situation

1586405913
andrewrk
why's that?

1586405941
shakesoda
i've only seen people do it by plugging in a radeon

1586405967
shakesoda
which works on exactly one expensive configuration and i think needs driver hacks

1586406045
shakesoda
haven't seen any risc v stuff with integrated gpu of any kind yet

1586406085
andrewrk
integrated gpu, yeah I guess that's what I want. I guess that's another problem where there isn't really a non-proprietary integrated gpu

1586406108
andrewrk
maybe I'll just suck it up and learn how to use the VideoCore on the rpi

1586408658
shakesoda
andrewrk: do it!

1586408687
shakesoda
the videocore is pretty neat, imo

1586408778
shakesoda
my pi zero shenanigans have involved poking the hardware compositor to get gles layered separately over my linux fb console

1586408793
shakesoda
haven't quite gotten in so far as playing with the mailbox stuff in kernel space though

1586408803
shakesoda
looked into it, have not touched it

1586419517
Yardanico
so, a very stupid question - is there a std function to check if a string contains a substring, or I just need to do it manually with a loop?

1586419576
Yardanico
ah, std.mem.indexOf and std.ascii.indexOfIgnoreCase

1586421313
livcd
Yardanico you traitor!

1586421327
Yardanico
livcd: XD

1586421343
Yardanico
nim + zig is good because you can have

1586421343
Yardanico
nim c --cpu:arm -d:danger  --cc:zig --passC:"-target arm-linux-musleabi" --passL:"-target arm-linux-musleabi" main.nim

1586423204
FireFox317
does someone know it i am allowed to use a zig mascotte as my profile picture?

1586423322
ikskuh
FireFox317: i think you have to ask the creator of the image?

1586423347
ikskuh
or look at the licence

1586423378
ikskuh


1586423383
ikskuh
CC BY-SA 4.0

1586423385
FireFox317
hmm im not a license pro but: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0).

1586423389
FireFox317
yes indeed

1586423418
ikskuh
you may even use the ziguana in your own works, but you have to use a similar licence

1586423430
ikskuh
and you have to credit people for their work

1586423492
FireFox317
i see, but for example when im using the logo as a profile picture for a youtube profile, how can i mention that xd

1586423508
ikskuh
profile description for example

1586423509
afontain_
note that there is projects that try not to allow that. It may be the case with cargo, rust and firefox.

1586423539
FireFox317
okay thanks guys! :)

1586423569
daurnimator
yeah zig is over-permissive for the logo IMO

1586423588
ikskuh
daurnimator: yeah, probably

1586423613
ikskuh
but it's nice to print and spread stickers with the word of Zig :D

1586423636
ikskuh
have to order a new batch for the hacker spaces and demoparties i'm at

1586423640
daurnimator
yes indeed. for lua we ask people to send an email for permission first

1586423650
daurnimator
pretty simple; but stops egegious misuse

1586423662
ikskuh
ah yeah

1586423667
ikskuh
that's a nice solution as well

1586423667
daurnimator
... like the occasional person that comes long; makes a fork of the language; and calls it lua 6.0

1586423676
ikskuh
😱

1586423681
daurnimator
"no you can't call your totally different fork the same thing"

1586423761
ikskuh
btw, a friend of mine always complains that Lua does not try to promote sandboxing

1586423771
ikskuh
do you know if that has any specific reasons?

1586423793
afontain_
on the other hand, forbidding calling non-official rust/zig/whatever with a few patches "rust" or "zig" is annoying for linux distributions

1586423827
afontain_
distributions will totally want to fix breakage, and when need be, will patch the software.

1586423975
daurnimator
ikskuh: define promote

1586424066
ikskuh
her words were like: "yeah they say we cannot guarantee that nobody can break out of a lua sandbox (_ENV or similar)"

1586424102
daurnimator
its up to the libraries/function that you expose to your sandbox

1586424112
daurnimator
yes lua could make it easier to tell you with are safe/not

1586424120
ikskuh
yeah that was my thought as well

1586424214
daurnimator
there's a few other things that could be made better for sandboxing too; e.g. I've suggested a scoped string metatable

1586424259
daurnimator
(the problem is that strings have a single table of methods: if you wanted to expose a sandbox without those methods you would have to patch on entry/exit which is painful; or remove them entirely which means you can't use perfectly cromulent libraries)

1586424280
ikskuh
ouch, good to know :)

1586424996
Yardanico
is it possible to pass --strip (like with zig programs) to "zig cc"?

1586425561
Yardanico
that would be pretty useful since otherwise I'd have to cross-compile binutils for the same arch just to get "strip"  for that target

1586427320
FireFox317
Yardanico, currently if you dont pass -g the binary will be stripped i think

1586427359
Yardanico
well I think Nim passes that itself, gonna check it. also - what can be the reason for "file" saying that "src/client: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-arm.so.1, with debug_info, not stripped"

1586427370
Yardanico
but I built with -static so it shouldn't be dynamically linked, "ldd" also says it's not a dynamic executable

1586427379
Yardanico
but "file" says it's dynamically linked

1586427441
ikskuh
Yardanico: file has only the options to pattern-match

1586427457
ikskuh
it tries to give some text output based on bytes/bits in the file header

1586427465
ikskuh
it's not always precise

1586427922
Yardanico
well I'm just not sure if "zig cc" also statically bundles musl in the binary because when building a simple static hello-world binary  in Zig for "arm-linux-musleabi" it runs file in termux  (on my aarch64 device), but when using "zig cc" to build a nim app with libressl statically linked it doesn't want to execute ("./main: No such file or directory" which usually means that some libs for it are missing)

1586427932
Yardanico
s/runs file/runs fine

1586427964
Yardanico
but libressl itself is compiled with "zig cc" without issues (statically) and linked too (the binary is quite big, also I can confirm that it's inside the binary by "strings")

1586428001
Yardanico
but "strings file_with_libressl" shows that it has "/lib/ld-musl-arm.so.1" inside of it

1586428034
Yardanico
even though I provided "-static" argument

1586430555
Yardanico
I explained it in

1586430687
ikskuh
4 days till release

1586433028
zfoo
is there any site available to help find libraries written in zig? I'm curious if anyone has written a json emitter yet.

1586433045
Yardanico
you can do "language:zig your_search" on github

1586433050
Yardanico
although not all Zig libs are on github

1586433057
Yardanico


1586433130
zfoo
cool, thanks

1586433137
Yardanico
there's also std.json but idk if it's what you need

1586433155
ikskuh
zfoo: std.json probably?

1586433156
ikskuh
;)

1586433163
ikskuh
it even has auto-serializer/deserializer

1586433180
zfoo
oh, sounds like what I need

1586437858
fengb
Potential flame bait:

1586437939
fengb
I think we should be cognizant of how our community develops and avoid becoming exclusive or elitist

1586438674
ikskuh
fengb, wow, that's a wall of text

1586438759
fengb
I like waking up to stuff like this :P

1586438775
fengb
Gives me motivation to stay awake but not leave the bed

1586438859
ikskuh
i have read some of it, but don't have the headspace for that right now

1586438862
ikskuh
do you have a tl;dr?

1586438920
Yardanico
well I'm skimming through it and basically it talks about how Elm core devs can use things like native modules themselves but restrict for everyone else, or even 'Instead of a process, you are told you need to build trust with the core developers (which I’ve spectacularly failed at). “Elm is built on relationships”.'

1586438921
fengb
Elm core is elitist and insular

1586438964
companion_cube
the language founder(s) influence the culture

1586438980
companion_cube
so, unless andrewrk becomes mysteriously insular and elitist I think Zig should be good

1586438997
fengb
Yep, I’m liking the direction so far

1586439000
companion_cube
(the core team, too, not just him)

1586439004
ikskuh
<companion_cube> the language founder(s) influence the culture

1586439009
ikskuh
yeah that's true for all projects

1586439012
companion_cube
and the early adopters, too

1586439013
fengb
But Rust has also had similar problems and that’s more of a community problem

1586439016
companion_cube
so y'all be nice :p

1586439020
Yardanico
yeah, for small languages this is really important

1586439026
ikskuh
and i really like the community here, you're all cool!

1586439029
ikskuh
♥

1586439031
fengb
Oh crap it’s me!

1586439034
companion_cube
not sure rust is elitist, it's more over-proletyzing

1586439074
nephele
ah, lord farquat

1586439398
pmwhite
It's pretty long. I started reading when there were no messages after initial link, and I just got back after stopping halfway through.

1586439779
pmwhite
Entirely for the purposes of being constructive, I was trying to think of aspects of zig's development that might have a similar problem to the elm community. I thought of the whole tabs ban, which seems the most similar to the authoritarian attitude that the post was criticizing. To be balanced, I'll also say that I don't find the tabs ban all that significant nor was was the decision all that authoritarian, even though I

1586439779
pmwhite
personally do disagree with the need for a ban.

1586439885
ikskuh
pmwhite: the tab ban has the simple reason to prevent all discussion and will be lifted with 1.0 afaik

1586439902
companion_cube
so zig fmt will have a config file, I imagine

1586439929
ikskuh
companion_cube: i'd rather have zig fmt be config-free, but just allow tabs in the compiler

1586439943
nephele
pmwhite, tabs aren't banned... the stage2(?) compiled just does not support them

1586439947
pmwhite
Ah, nice. I didn't know either of those things. I approve.

1586439955
companion_cube
ahah now bikeshedding on the bikeshedding ✔

1586439963
ikskuh
meta-bikeshedding! :D

1586439980
fengb
There won't ever be config for zig fmt

1586439986
nephele
can i store my e-scooter in the bikeshed? or do i need an e-shed for that?

1586439990
fengb
It's like go fmt. It just is

1586439995
pmwhite
I would actually be completely fine if zig fmt doesn't support a config file.

1586440043
ikskuh
fengb: yeah i like the argument they use (or at least, andrew quoted)

1586440064
ikskuh
"go fmt is nobodys favourite, but because of that, it's everybodys faviourite"

1586440067
ikskuh
or something like that

1586440081
fengb
Same. I absolutely hated Go's conventions and a week later I just didn't care

1586440083
gchristensen
sometimes go fmt is wrong, but at the same time it is always right

1586440098
fengb
It's always wrong. But it's consistently wrong :P

1586440102
gchristensen
:D

1586440118
ifreund
at least go fmt uses tabs though :D

1586440132
fengb
Like I said, consistently wrong 🙃

1586440135
ikskuh
oh no, it started! :D

1586440146
ikskuh
let's just hop to another topic!

1586440152
ikskuh
what have you coded in zig this week?

1586440157
pmwhite
zig fmt does a lot, but one thing it does not do is auto line wrapping

1586440176
ikskuh
on purpose

1586440180
ifreund
i'm still working on my wayland compositor, started layer_shell support today

1586440182
ikskuh
you can decide when to wrap

1586440185
ikskuh
trailing comma: wrap

1586440187
fengb
I kinda like it that way. Otherwise we start bikeshedding 80 vs 100 vs 120

1586440188
nephele
ikskuh, maybe i will steal SyrupThinker's code, to make a microcode chainloader for efi :3

1586440189
ikskuh
no trailing comma: no wrap

1586440203
ifreund
yeah the trailing comman thing is brilliant imo

1586440213
ikskuh
ifreund: absolutely!

1586440232
ikskuh
nephele: nice, for what purpose?

1586440236
ikskuh
ifreund: neat as well :)

1586440251
pmwhite
I agree, but i think it'd be a cool option to auto wrap at 80 characters or something.

1586440272
ifreund
nah that's the job of your text editor

1586440282
pmwhite
Formatters help me stop internally bikeshedding abouty own code.

1586440291
nephele
to allow hobby os to just use it once on boot ;), my computer has a nice bug where the amd processor just crashes randomly during runtime unless you apply a microcode update

1586440314
pmwhite
Auto wrapping meaning do the comma thing.

1586440322
ikskuh
nephele: ouch

1586440337
ifreund
pmwhite: again, you should be able to configure your editor to do that

1586440342
ikskuh
i'm still porting my UI stuff to zig

1586440360
ikskuh
started to drop the C++ based parser/layout compiler and started rewriting it in zig

1586440379
ikskuh
imagine! the zig coded parser is shorter than the flex file :D

1586440388
pmwhite
ifreund: maybe...

1586440420
ifreund
there's a good reason zig has been designed to be easy to parse, it makes simple tooling much easier to write

1586440558
pmwhite
I'll buy that. If the line ends with a semicolon and a paren, then insert a comma before the paren?

1586440576
companion_cube
also, simple grammar makes it easier to have an error-tolerant parser, which is important for LSP

1586440586
ikskuh
oh yeah

1586440597
ikskuh
this is gonna be fun for me to make my parser have error recovering :D

1586440620
companion_cube
and AST, right? need an "invalid AST" node to represent these errors

1586440652
ikskuh
don't know, my stuff is too simple for an AST :D

1586440667
ikskuh
but i have to idea how to implement an LSP

1586440821
pmwhite
For vim, a full LSP server is less preferable than a fast "zig-complete main.zig 13 67" command that just spits out possible completions, since vim already has built-in autocomplete features.

1586440842
ikskuh
pmwhite: yeah i use the speculative thing that's built into VSCode

1586440856
companion_cube
pmwhite: that's also what LSP is for…

1586440858
ikskuh
which just gives you a list of possible matches already used in the file

1586440868
companion_cube
neovim has/will have builtin support for lsp

1586441490
pmwhite
I know LSP does that, but if you can make an LSP server, than you can make my tool, right? :)

1586441516
companion_cube
but with lsp you can build the tool once, and use it in all editors

1586441547
pmwhite
I haven't had amazing experiences with LSP, but maybe I've just never tried hard enough to set it up right.

1586441776
pmwhite
I also haven't switched to neovim yet. I probably should...

1586441791
fengb
I haven’t either

1586441826
fengb
Of course I barely use vim features. nvi or bust 🦖

1586441891
ifreund
i use kakoune because it's better :P

1586441917
fengb
Dems fightin werdz

1586441942
xnor1
hello, new to zig and I've got a couple of questions. first off, doc says struct may be automatically passed by reference instead of by value. I assume the pass-by-value semantics are preserved even if it's passed by reference under the hood (memcpy on write?)

1586441955
companion_cube
imho LSP makes fringe editors like kakoune a lot more viable

1586441970
pmwhite
I am tempted to switch to kak. Seems like it might be better.

1586441988
fengb
xnor1: args are always constant so there’s no real semantics

1586441992
xnor1
and can the user enforce passing by value other than "extern" (which seems a bit of a strange keyword for C ABI)

1586442079
ifreund
pmwhite: my transition from vim was easier than I thought it would be, kakoune does a much better job of making features discoverable imo

1586442088
xnor1
is there some online zig playground/compiler available to try out things?

1586442093
fengb
I think I theres a proposal for noalias

1586442116
ifreund
it's also easier to understand due to the orthagonal design, but i think im a little off topic for this channel

1586442118
fengb
godbolt.org is the closest to a playground

1586442161
pmwhite
ifreund: hear me out on one potential criticism of kak that I don't actually know if I agree with. I saw a video once of someone saying to generally avoid visual mode in vim since it leads to nonrepeatable operations. Kak seems to me to be completely visual mode based, so if the video's point is a good point, then I would think kak is worse.

1586442337
ifreund
i'd say you don't need to repeat things if you do them all at once, I also don't think it makes things non-repeatable

1586442346
ifreund
if anything it makes writing macros far easier

1586442405
xnor1
fengb: just says "no assembly generated"

1586442428
fengb
Oh Zig is lazy. You need to convince the compiler to output something

1586442447
ifreund
for example, by printing something

1586442496
fengb
Easiest way is to do `pub fn main()` and reference your code

1586442520
fengb
Note that this site is designed for comparing assembly, not a general playground, so it's not as nice as it could be

1586442545
xnor1
what is .{} ?

1586442590
pmwhite
ifreund: good answer. I'd like to try kak again and get better at it.

1586442598
pmwhite
An empty tuple.

1586442714
xnor1
the documentation never explains this, but already uses it in hello world

1586442724
xnor1
and "tuple" is not mentioned once

1586442741
xnor1
(which I don't believe it is)

1586442864
fengb
Hmm, I suppose we missed the documentation when we added tuples :/

1586442878
Yardanico
ctrl+f in docs for "tuple" gives 0 results :P

1586442882
fengb
andrewrk is currently working on release notes so hopefully we'll have a nice blurb on tuples soon

1586443003
ifreund
is my understanding correct that tuples are like a comptime-only array that allows mixed types?

1586443036
fengb
Eh... they're more like structs with magic fields that can coerce into arrays if all the types are the same

1586443069
companion_cube
structs with anonymous fields from 0 to n-1…

1586443076
ifreund
but you dont access the field by name like a struct

1586443087
fengb
.{ 0, 1, 2 } == struct { .@"0" = 0, .@"1" = 1, .@"2" = 2 }

1586443090
fengb
You actually can

1586443098
ifreund
oh, cool

1586443110
companion_cube
tuples and structs are really the same, except on the surface level

1586443117
companion_cube
product types!

1586443121
fengb
There's a little bit of work to make it indexable but you can do silly things like `.{ 0, 1 }.@"0"`

1586443126
xnor1
it's quite weird syntax, why is there a dot?

1586443135
companion_cube
for the grammar to be unambiguous

1586443140
ifreund
that's accessing a field of the struct

1586443184
ifreund
like .{ .orange = 1, .blue = 2 }.orange

1586443200
xnor1
why not tuple { 1, 2, 3 }, analogous to struct { ... } ?

1586443250
fengb
Because I was cheating. It's actually .{ .foo = 1 } to build an anon struct

1586443274
fengb
Right now, tuples can only be anonymous but there's an accepted proposal to have declared tuple types too

1586443532
xnor1
why does this compile: var x : i32 = undefined; try stdout.print("Hello, {}!\n", .{x});

1586443575
fengb
There’s no undefined check yet in the compiler. I think that’s on the roadmap

1586443629
fengb
Right now using undefined like that only guarantees you’ll get 0xaaaa in debug mode

1586443742
fengb
Oh and Zig is unsafe so the compiler might never catch that. We usually handle things like that with a runtime safety check

1586443808
companion_cube
`= undefined` explicitly means you know what you're doing anyway :)

1586443920
fengb
We should use comical keywords

1586443932
fengb
x = tharbedragons

1586443981
companion_cube
`var x: i32 = yolo_it_dude;`

1586444008
ikskuh
var x: u32 = i_know_what_im_doing_trust_me;

1586444055
fengb
nasaldemons

1586444083
companion_cube
`var x: i32 = i_am_a_debian_dev;`

1586444091
ikskuh
doSmething() orelse not_gonna_happen;

1586446636
fengb
Maybe I shouldn't have done -j12. My laptop is barely usable now :(

1586446653
fengb
I forgot how bad stuttering used to be before multiple cores lol

1586446779
fengb
I wish there's a generic "folding at home" solution that lets me plug arbitrary computers together and just magically divvy up any work

1586446895
companion_cube
the syncthing of CPU sharing… that'd be nice

1586446904
companion_cube
fengb: write it in Zig, and there's your killer app

1586447018
fengb
Sounds easy enough 🙃

1586447060
companion_cube
(syncthing is my favorite Go thing, and the reason I believe you can write useful stuff in Go :p)

1586447125
fengb
I think Go is very productive and useful despite some decisions

1586447154
fengb
It’s actually my least favorite language that I’ll keep using >_>

1586447844
ikskuh
hmm

1586447849
ikskuh
i'm having a CSS like language

1586447854
ikskuh
right now i support /* css comments */

1586447864
ikskuh
but i think about adding // cpp comments

1586447875
ikskuh
what do you guys think?

1586447895
fengb
Zig doesn't even support `/* comments */` >_>

1586447929
ikskuh
yeah

1586447945
ikskuh
i made /* */ because it was easier to implement in FLEX

1586447956
ikskuh
but now that i'm using a hand written parser, it just doesn't mater

1586448028
fengb
You should support all the comments. /* */  //  #  ;  --

1586448116
ikskuh
haha

1586448123
ikskuh
no

1586448713
fengb
`"${foo^}"` is a bashism :(

1586449417
ikskuh
oh yeah

1586455128
ifreund
is there a reason I'm missing for std.TailQueue to have allocateNode/destroyNode rather than just expecting the user to call allocator.create/destroy directly?

1586455257
ikskuh
it's more flexible

1586455264
ikskuh
there are functions with allocation afaik

1586455274
ikskuh
but you can move values between different queues for example

1586455388
ifreund
i fail to see how this is any different than calling it directly

1586455435
ifreund
e.g. allocator.create(std.TailQueue(u32).Node);

1586456187
ifreund
honestly i feel like the current situation kindof violates "Only one obvious way to do things."

1586456257
ikskuh
for TailQueue?

1586456490
ifreund
both TailQueue and SinglyLinkedList have these methods, which directly call the passed allocator and return the result

1586456536
ifreund
i see two obvious ways of doing things, allocating the Node yourself with allocator.create() or calling TailQueue.allocateNode(allocator)

1586456558
ikskuh
yeah, i don't use those functions

1586456626
fengb
Arguably the first isn’t as obvious if you glance through the list of functions and fields

1586456665
ifreund
it could easily be added to the documentation

1586456699
fengb
lol documentation :P

1586456769
ikskuh
i thought i had documented a queue

1586456776
ikskuh
but it was this one ¯\_(ツ)_/¯

1586456802
ikskuh
because it wasn't obvious at all how memory management is supposed to work :D

1586456805
ifreund
both TailQueue and SinglyLinkedList have full doc comments

1586456820
ikskuh
yeah

1586458419
andrewrk
FireFox317, it's intended that you would be able to use the logo and mascot for that purpose

1586458485
andrewrk
Basically the only thing that is not allowed is for companies to lie about their relationship to the Zig project, or whether the Zig project endorses them

1586458659
Yardanico
wow

1586464117
FireFox317
andrewrk, ah good to hear! ziggy is awesome <3

1586464171
fengb
Zero > Ziggy. (ง'̀-'́)ง

1586464218
xackus
andrewrk, should I remove ArrayList functions that were already deprecated before the latest API change?

1586464299
andrewrk
xackus, by remove you mean `pub const foo = @compileError();` right?

1586464307
xackus
yes

1586464322
andrewrk
yes, although this will be an annoying breaking change, better to do it before 0.6.0 than after

1586464509
FireFox317
andrewrk, are the types of every statement in a function available when we do dump_analysis?

1586464539
andrewrk
yes

1586464568
andrewrk
you'll have to do some work to figure out how to map IR instructions to statements

1586464579
andrewrk
but each IR instruction knows which AST node it was generated based on

1586464621
andrewrk
sorry, let me clarify: dump analysis currently does not emit this information, but if you're asking if the information is available and could be added to the dump, the answer is yes

1586464651
andrewrk
this would likely substantially increase the size of the dump, and so if added it should probably be behind a flag

1586464709
FireFox317
i actually meant if it could be added indeed (if the data is available), i was looking around but wasn't clear if that was actually possible

1586464771
andrewrk
you would have to iterate over basic blocks and ir instructions, similar to what happens in codegen.cpp

1586464912
FireFox317
okay, will try some stuff. want to get a prototype working of hovering over a statement and showing the type in vscode xd

1586464940
FireFox317
but this is some helpful info, thanks!

1586465066
andrewrk
np, excited to see what you come up with

1586465562
dimenus
do pointers to arrays no longer coarse into slices?

1586465578
andrewrk
they do

1586465580
dimenus
*coerce

1586465600
andrewrk
it's especially important they do since slicing with comptime indexes now gives you a pointer to an array

1586465621
dimenus
error: expected type '[]u8', found '*const [15]u8'

1586465627
andrewrk
it's the constness

1586465630
dimenus
ah

1586465644
andrewrk
the error could be improved with a note that explains it

1586465650
andrewrk
there's a framework in place for this but only partially implemented

1586465678
andrewrk
unrelated: I love how excited people are to work on the compiler, language stuff, and IDE integrations. I really should focus on getting self-hosted to the point where it is contributor friendly

1586465785
dimenus
hmm, still getting the same error after changing it to var

1586465796
dimenus


1586465828
fengb
Literals are now const unless you assign them

1586465854
BaroqueLarouche
sounds like you should use @embedFile instead of embedding your data like that

1586465862
fengb
I think that was true before but the compiler didn’t check properly

1586465997
fengb
Doing `foo = &[_]T{}` generates a pointer to const array because the memory isn’t explicitly assigned

1586466053
dimenus
i had const before, andrew said the constness was the problem

1586466085
dimenus
oh wow, i'm dumb

1586466087
fengb
You changed the pointer to var, but the memory space is still const because it’s not assigned anywhere

1586466105
dimenus
XD

1586466125
andrewrk
ok, but now the question on everybody's minds: can we see this game in action? :D

1586466161
BaroqueLarouche
did something say game development ?

1586466170
BaroqueLarouche
*someone

1586466178
ifreund
that paste looked pretty suspicious :D

1586466184
andrewrk
dimenus leaked level data!

1586466185
dimenus
hah!

1586466207
andrewrk
dimenus, you might want to change the inner slices to be arrays here

1586466217
andrewrk
no need for double indirection right? since the inner arrays are same sized

1586466253
dimenus
good point

1586466253
andrewrk
and e.g. the length does not need to be stored

1586466261
BaroqueLarouche
do you really need those array to be two dimensional ?

1586466289
andrewrk
a 2d array is still 1d in memory

1586466293
ifreund
^

1586466309
andrewrk
(if you do what I said about making them arrays instead of slices)

1586466482
dimenus
no, i need the indirection - they're not all the same size

1586466533
andrewrk
ah ok

1586466559
dimenus
the top two are the same size, then the next two, and the last one is the base

1586467202
dimenus
andrewrk: the inner arrays are the same size in each level, but the consumer takes a `[]const []const u8`

1586467219
dimenus
anyway, it's compiling successfully now, thanks everyone

1586467503
dimenus
fengb: that makes more sense that it's a compilation error now

1586469109
FireFox317
andrewrk, do you have a small amount of time to help me with docs generation (it broke :( )? i know you are really busy with release notes, so please don't hesitate to say no :)

1586474745
Xavi92
Hi! Just found about the Zig programming language and has sparked some interest to me. Are the similarities to Rust coincidential?

1586474906
shakesoda
not in the least

1586474922
ikskuh
hey Xavi92 :)

1586474989
Xavi92
shakesoda: well, function signatures look pretty much the same: "fn name(param: type) -> return_type"

1586475024
ikskuh
i  think it's just the current style of languages

1586475034
ikskuh
C++ allows this style too, go uses it too

1586475048
ikskuh
pascal style declarations have a lot of advantages

1586475087
shakesoda
haxe and ts use the form too

1586475103
ikskuh
yeah

1586475110
fengb
I think Odin’s creator blogged about the different types of declarations

1586475116
ikskuh
you can make your return type dependent on parameters

1586475177
fengb


1586475878
Xavi92
I guess not, but does Zig assume variables as immutable by default, as in Rust?

1586475919
Xavi92
That's one of the features I appreciate a lot from Rust and always missed in C

1586475938
fengb
Function arguments are const. Variables are declared with either var or const

1586475977
andrewrk
you are encouraged to use const by default

1586476048
Xavi92
Yeah, this is getting more interesting every second

1586476192
HollMax
Hi! I'm trying out reflection with `@typeInfo`, but I get `concurrent modification, Unable to dump stack trace: debug info stripped` during compilation

1586476246
ikskuh
hey HollMax

1586476254
ikskuh
welcome, you have encountered a compiler bug

1586476267
HollMax
0.5.0

1586476277
HollMax
should I try master?

1586476416
ikskuh
yeah

1586476419
ikskuh
that's usually better

1586476424
ikskuh
but prepare for a lot of changes!

1586476499
HollMax
is there a way to run a for loop comptime without making it inline?

1586476555
ikskuh
you can use a while with a comptime var

1586476564
HollMax
that might work

1586476567
ikskuh
or you can execute the whole block just comptime

1586476574
ikskuh
comptime { for() {} }

1586476606
HollMax
I'm trying to print member names of types

1586476648
HollMax
my end-goal is to graft namespaces onto C libraries

1586476676
HollMax
and I'm trying to print names of all functions for now

1586476705
HollMax
I haven't found anything for comptime printing

1586476744
andrewrk
HollMax, the 0.6.0 release is Monday. so using master at this point makes a lot of sense, and you can switch to 0.6.0 on monday

1586476764
HollMax
oh, that would be a happy easter

1586476785
HollMax
but I'll try while with comptime var first

