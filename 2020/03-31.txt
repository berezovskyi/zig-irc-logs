1585612817
yrashk
I managed to compile this thing :) Now, my only remaining question for now is the use of absolute paths in .a -- whether there's some reason behind this or not :)

1585614118
diltsman
Does anyone know of an example of how to use an ArrayList with an OutStream?  I am going crazy trying to figure this out.

1585614890
andrewrk
yrashk, it could quite possibly be a bug, I'm not sure without further investigation

1585614924
andrewrk
diltsman, let me merge daurnimator's pull request and then you can do array_list.outStream()

1585618790
daurnimator
andrewrk: are you referring to #4665 ? I just left a few replies to your comments

1585618816
daurnimator
I won't have time to rebase/fix for a few hous myself

1585618820
daurnimator
*hours

1585618835
andrewrk
want a handoff? I can take it from here

1585619309
andrewrk
success! ziglang/bootstrap is now capable of producing arm-linux-musleabhf zig tarballs\

1585619320
andrewrk
that's 32-bit arm that works on raspberry pis

1585619533
fengb
ðŸ¥³

1585621325
yrashk
andrewrk: I will try to get to the bottom of it

1585626216
daurnimator
andrewrk: go for it; let me know if you don't get to it today though

1585626245
andrewrk
ok

1585626463
daurnimator
andrewrk: I'll also rebase 4602 tonight unless there were other issues?

1585626599
andrewrk
I don't think I reviewed that one yet

1585626614
andrewrk
it should be fine if it doesn't break anything

1585626655
andrewrk
hmm I'm a bit behind on issues quota :-/ need to get down to 42 today

1585627014
daurnimator
4602 is one you closed due to "failing tests"; but that was only the freebsd ci test failing back when it was a problem. but now there is a merge conflict.

1585627027
daurnimator
it will need a fast merge after rebasing as its likely to break as other PRs are sent

1585627089
andrewrk
I see; thanks for the heads up

1585627101
andrewrk
sorry I'm a bit overwhelmed with pull requests. it's pretty difficult to keep up

1585628537
andrewrk
daurnimator, I'm heading to bed, didn't get around to the PR

1585632077
pixelherodev
`sorry I'm a bit overwhelmed with pull requests. it's pretty difficult to keep up` On the bright side: a lot of people are interested in helping out!

1585642441
FireFox317
wow nice andrewrk!

1585646584
Kingsquee


1585646628
Kingsquee
would there be any issues with dependencies, with this solution?

1585646655
Kingsquee
like if a dependency defines it as u16 while you define it as a u8

1585646737
ikskuh
Kingsquee: as zig is not designed with an ABI in mind, it should not be a problem

1585647145
Kingsquee
good to know

1585647172
Kingsquee
but what would the behaviour be, exactly?

1585647186
Kingsquee
a compile error that you need at least a u16?

1585647432
Kingsquee
the opposite way around (you defining u8, dependency defining u16) would be interesting as well, since one wonders whose errors start from zero

1585647465
Kingsquee
would be weird to include a new dep and the ABI breaks

1585647744
ikskuh
as said: there's no ABI so you cannot break it

1585647753
ikskuh
compiled zig modules expose C ABI, no error handling

1585647774
ikskuh
the idea is that you can reduce your memory requirements, if you have less errors

1585647894
Kingsquee
oh, I missed the 'not' :I

1585648030
Kingsquee
now I'm a little confused as to how it's not a problem

1585648064
ikskuh
huh, why?

1585648101
Kingsquee
well, errors are just an int value underneath the hood

1585648114
Kingsquee
so this means what errors are assigned which values depends on what errors there are

1585648122
ikskuh
yes

1585648132
ikskuh
this error set is defined at compiletime

1585648141
ikskuh
and may differ between each compilation (i think)

1585648155
Kingsquee
right, the differ-ing is what's spooking me

1585648185
ikskuh
why? you are not supposed to store or transfer error codes on disk/network :D

1585648194
Kingsquee
JUST WATCH MEno

1585648200
Kingsquee
if A includes B as a dynamic library and A manages one of B's errors

1585648214
ikskuh
as soon as you do dynamic libraries, you are bound to C ABI

1585648219
ikskuh
which does not support Zig error codes ;)

1585648240
Kingsquee
then B gets upgraded to a new version, which drops a dependency, dropping some values from its error table and therefore making its errors different

1585648249
Kingsquee
we then start up A and it tries to handle one of B's errors

1585648253
ikskuh
yeah and it doesn't matter ;)

1585648258
Kingsquee
but the error it's handling is now a different error D8

1585648264
ikskuh
because you cannot pass error codes across C boundaries

1585648269
Kingsquee
and WHO WILL BUILD THE ROADS

1585648274
Kingsquee
wait what

1585648417
Kingsquee
so usually one would compile libraries to static or dynamic libraries and then use their functions from your own code

1585648439
Kingsquee
you're saying the moment I do that (or at least with dynamic libraries), I can't handle error codes?

1585648504
ikskuh
yes

1585648513
ikskuh
as soon as you do that, you are bound to C ABI

1585648520
ikskuh
and have the same interface as any other C librariy

1585648591
Kingsquee
but I thought the whole appeal of making errors as easy to write as possible was to mitigate the problems with error handling, especially from external libraries

1585648647
Kingsquee
I mean, removing error handling for external libraries entirely certainly is a very... final solution

1585648688
ikskuh
i think you miss the point ;)

1585648699
ikskuh
zig interacts with other libraries in source form ;)

1585648703
ikskuh
not in compiled form

1585648722
ikskuh
as there is no ABI, you cannot use any zig feature from a compiled library (static or dynamic)

1585648747
Kingsquee
so it's kind of like the gpl but enforced by practicality instead of legality

1585648762
Kingsquee
"give me your source code, or I'll check C-types at you"

1585648770
Kingsquee
*chuck

1585648784
ikskuh


1585648794
Kingsquee
not sure if brilliant or stupid

1585648819
ikskuh
it's brilliant ;)

1585648823
ikskuh
as it makes software maintainable

1585648883
Kingsquee
that said, someone could just make a middle-layer mapping zig errors with bourgeoisie hard-coded error consts

1585648905
ikskuh
yeah

1585648909
Kingsquee
so I suppose it at least makes closed-source-life miserable

1585648910
ikskuh
that's what i do for example ;)

1585648920
Kingsquee
DUN DUN DUHH

1585648923
ikskuh
what?

1585648933
ikskuh
because i want to write libraries one can not only use with zig, but also with C

1585648945
Kingsquee
ikskuh was the bourgeoisie all along!

1585648946
Kingsquee
what a twist

1585648968
ikskuh
so i write a Zig package and a library based on that package that just exports the functions with a shim that maps error handling from "convenient" to "C style"

1585648980
ikskuh
â†’ you can use the library with any language, but it's most comfortable with Zig

1585649018
Kingsquee
wait, so the library you write is in zig?

1585649027
Kingsquee
and you map zig error codes to constants?

1585649095
ikskuh
yes

1585649096
Kingsquee
...so basically a lookup table mapping the possibly-varying zig errors to constant values

1585649098
Kingsquee
HAH smart

1585649105
ikskuh
that's just the way to do it ;)

1585649134
ikskuh
you can even auto-generate such mappings

1585649201
Kingsquee
using zig comptime fns I assume

1585649243
ikskuh
yep

1585649250
ikskuh
and an error enum :)

1585649264
Kingsquee
beauty

1585649268
ikskuh
const E = extern enum(u32) { OutOfMemory, â€¦ };

1585649278
ikskuh
and then comptime-map error.OutOfMemory to E.OutOfMemory

1585649282
ikskuh
Zig == Awesome

1585649348
Kingsquee
at that point though, does it really make sense to have the quick-and-implicit error defining?

1585649368
Kingsquee
I can see how it's useful for internal errors, but external errors need to be mapped properly

1585649393
ikskuh
yes

1585649395
Kingsquee
and you could run into typo issues with OutOfMemory != OutOfMammay

1585649396
ikskuh
but only those

1585649408
ikskuh
the typo thing is easily found

1585649425
ikskuh
as soon as you don't do implicit error sets everywhere

1585649463
Kingsquee
easily found, how?

1585649471
ikskuh
because they yield compile errors

1585649478
ikskuh
if you don't catch them

1585649484
Kingsquee
oh?

1585649485
ikskuh
if you just bubble them up to main, sure

1585649487
ikskuh
you'll miss them

1585649489
Kingsquee
hm

1585649509
ikskuh
but as soon as you don't infer error sets everywhere, you cannot just return OutOfMemorry

1585649524
ikskuh
because the function does not allow that error to be returned

1585650178
Kingsquee
"Since Zig understands error types, it can pre-weight branches in favor of errors not occurring. Just a small optimization benefit that is not available in other languages."

1585650201
Kingsquee
"can" as in "it's possible", or "can" as in "it does this"

1585650243
ikskuh
can as in "it's possible, but the corrent compiler doesn't do this"

1585650263
Kingsquee
kk

1585650316
ikskuh
all the fancypants stuff will come to self-hosted version

1585650403
Kingsquee
weeeee

1585650959
r4pr0n
hey. i tried the

1585650962
r4pr0n
CMake Error at cmake/Findllvm.cmake:33 (message):

1585650965
r4pr0n
expected LLVM 10.x but found 9.0.1

1585653558
TheLemonMan
yo, is any Windows user willing to fetch a backtrace for me?

1585653666
squeek502
TheLemonMan, i can try

1585655345
squeek502
nvm, i need to sleep

1585661607
TheLemonMan
sleep is overrated

1585663041
andrewrk
r4pr0n, the first thing that script does is build a native zig compiler, and that is what is used for cross compiling

1585664500
r4pr0n
andrewrk: oh, thanks, i can just remove that part

1585664580
andrewrk
r4pr0n, ah I see, yes perhaps the script can be split into two, and so you could run the second half if you already have a zig compiler handy

1585664867
r4pr0n
yeah, i guess so

1585664925
andrewrk
hmm I think I will keep it how it is. the "supported" way to do it is to use exactly the sources in that repo

1585665039
r4pr0n
well I could just remove the upper part of the script, it's no big deal, so that'll work

1585665065
andrewrk
TheLemonMan, want me to add freebsd, netbsd to line 31 of compiler_rt.zig when merging #4874?

1585665085
andrewrk
sorry I know that I kinda made a mess there with duplicated logic

1585665214
TheLemonMan
oh sure, I forgot to add that

1585665245
TheLemonMan
yeah the version detection logic gets hairy pretty quick

1585665344
daurnimator
should the OS check be removed entirely?

1585665383
daurnimator
e.g. darwin should be there too right?

1585665448
andrewrk
the point is that it should be missing rather than a compile error when there is not support

1585665468
andrewrk
let me finish merging and then you can submit a refactor PR if you want

1585665503
andrewrk
it should be fine to use std os bits too but make sure not to accidentally drag in any exports such as __clone

1585665558
andrewrk
daurnimator, I'll look at #4665 as soon as those tests finish

1585666530
TheLemonMan
perhaps it's cleaner to split the clear_cache in many small functions and export only the correct one, the exportIt is really ugly IMO

1585666573
TheLemonMan
daurnimator, if you have any Q about @export feel free to ask here

1585666593
TheLemonMan
it's much easier to discuss here than in a GH ticket

1585666596
daurnimator
TheLemonMan: how does exportIt work? from your comment in that other issue it seems it wouldn't

1585666613
daurnimator
would my example work if I used `inline`?

1585666637
daurnimator
(context for everyone else:

1585666646
andrewrk
TheLemonMan, that sounds good to me

1585666659
TheLemonMan
it's changing the symbol linkage, it's not exporting a literal

1585666737
TheLemonMan
andrewrk, the problem with `zig cc` & RISCV64 is because clang has different defaults than Zig, what's the long term solution? Adopt whatever clang defaults to?

1585666757
andrewrk
TheLemonMan, nah, we coerce clang into doing what we want-

1585666772
daurnimator
TheLemonMan: our baseline cpu needs to take the OS into consideration

1585666776
TheLemonMan
it's not a bad idea as Clang defaults are often also GCC defaults and so we get some degree of compatibility across different toolchains

1585666788
andrewrk
well we can change zig defaults to match, if those defaults are a good idea

1585666800
andrewrk
but also it needs to be fixed that zig is failing to correctly inform clang about the target

1585666822
andrewrk
keep in mind that it's also planned to have a non-llvm backend

1585666962
TheLemonMan
well speaking of riscv we're already using the same feature set when targeting linux

1585666991
TheLemonMan
it makes sense to default to the same ABI

1585666996
andrewrk
I agree

1585667011
andrewrk
I think I misunderstood your original proposal and I agree with you

1585667030
andrewrk
I'm just clarifying on the implementation details

1585667053
andrewrk
it looks like perhaps "floating point ABI" is something we don't adequately take into account into the concept of the "target"

1585667108
andrewrk
or is it? should we be using riscv64-linux-musleabihf instead of riscv64-linux-musl?

1585667115
TheLemonMan
well the only supported arch where that matters is ARM, and we got around that by using the eabihf/eabi distinction

1585667153
andrewrk
what exactly is clang and zig differing on in the riscv case? that's something I'm not clear on yet

1585667231
TheLemonMan
zig is defaulting to soft-float while clang defaults to lp64d that's hard-float

1585667259
andrewrk
I definitely think we should default to hard float

1585667391
andrewrk
once that's done I wouldn't have an answer to "how do you select soft float for riscv64?". maybe we could add -hf variants to the ABI enum for where eabihf is not appropriate

1585667403
andrewrk
err maybe add sf variants

1585667440
andrewrk
but we already have an "ABI" section of the target, and I'm convinced that's where soft/hard should be chosen

1585667493
TheLemonMan
maybe it makes sense to add the ilp32f, ilp32d, lp64f, lp64d ABIs too

1585667529
andrewrk
that would make sense to me

1585667539
TheLemonMan
I mean, trying to abstract all this madness in a cross-ISA, cross-OS, cross-version, cross-whatever way is not really worth the headache

1585667544
andrewrk
even if some of them can't be supported, it can be a very clear error message

1585667656
andrewrk
what are you suggesting to not do?

1585667784
TheLemonMan
I'm suggesting not to overload the eabihf/eabi ABIs and add some new ones as needed

1585667801
andrewrk
ah! ok yes I agree with you

1585667829
andrewrk
damn I hit that unable to inline function bug

1585667842
TheLemonMan
oh I think I know why that happens

1585667874
TheLemonMan
last time I checked in compiler-rt that error showed up only for generic functions marked as inline

1585667930
andrewrk
hmm I just hit it in a non generic function marked inline

1585667952
andrewrk
I think it's probably something going on with llvm mangling function names and we check the wrong name or something

1585667974
andrewrk
it's pretty hacky- it checks the post-processed ir file and makes sure the function got deleted

1585668069
andrewrk
I wonder how close we are to being able to have riscv-64 tarballs

1585668105
andrewrk
that would be a pretty sexy announcement if it was part of the 0.6.0 release

1585668384
shakesoda
armv6/raspbian coming is pretty nice already

1585668405
shakesoda
that's one i wanted available at least

1585668421
fengb
Sorta. People kinda expect it to work already >_>

1585668551
andrewrk
already 2 new tarballs planned for this release: zig-bootstrap-0.6.0.tar.xz zig-armv7a-linux-museabihf.tar.xz

1585668570
andrewrk
already 2 new tarballs planned for this release: zig-bootstrap-0.6.0.tar.xz zig-0.6.0-armv7a-linux-museabihf.tar.xz

1585668587
FireFox317
andrewrk, do you have the zig-arm binary somewhere? i tried to built it but ran out of disk space :(

1585668606
andrewrk
ah bummer. yeah I can upload a tarball for ya

1585668617
andrewrk
shakesoda, it's v7a not v6

1585668619
shakesoda
is that v7a instead of v6/1176jzf-s

1585668622
shakesoda
I see

1585668632
andrewrk
pretty sure raspbian is the same

1585668642
FireFox317
want to check if it really works on a raspberry

1585668654
shakesoda
raspbian supports lower as it applies to the old model pis and pi zero

1585668695
FireFox317
andrewrk, what cpu features did you built it with? i guess baseline arm? which is armv7a?

1585668705
shakesoda
they weren't armv7 until the pi 2

1585668720
andrewrk
ah

1585668725
shakesoda
(later models of that are aarch64, the early ones were v7)

1585668731
fengb
Yeah, Pi Zero (WH) are still v6

1585668752
andrewrk
well we can try to build one for armv6 too. v7a is still a good target to have tho

1585668760
shakesoda
yes, absolutely

1585668782
shakesoda
I'd just like a zig build on hand to run on my small pi zero army

1585668784
shakesoda
:D

1585668841
fengb
Silly idea: we need a standard network protocol for the Zig compiler

1585668854
fengb
Then we can pool together compilation over wire

1585668881
shakesoda
maybe before that we could have concurrent build support for builder ;)

1585668958
FireFox317
andrewrk, did you build on some server or using your own hardware? i throught i had a pretty fast laptop, but it still takes ages xd

1585668988
andrewrk
FireFox317, yeah I built on my laptop. it's pretty swanky hardware. you are using an appropriate -j arg right?

1585669030
andrewrk
I got this laptop with the understanding that I would be building LLVM over and over again

1585669126
FireFox317
yup (-j8), i think cross-compiling llvm took like 1,5/2 hours or something. is that similar to yours?

1585669136
andrewrk
pretty similar

1585669146
TheLemonMan
you can also use the aarch64 beast to build LLVM

1585669147
FireFox317
okay, it just takes so freaking long XD

1585669164
pixelherodev
Maybe rewrite parts of LLVM in Zig so it builds faster :P

1585669167
TheLemonMan
that monster compiled LLVM and Clang in no time

1585669176
pixelherodev
(Kidding kidding; that's

1585669187
FireFox317
TheLemonMan, is it free? ^^

1585669196
andrewrk
FireFox317, happy to give you an account

1585669206
andrewrk
msg me your pub key and preferred username

1585669226
TheLemonMan
the price is your pubkey heh

1585669245
shakesoda
long have i been tortured by the horrifying compile times of c++

1585669249
FireFox317
okay :)

1585669290
TheLemonMan
speaking of compiling stuff, andrewrk have you got around compiling a newer qemu for the CI ?

1585669301
fengb
Probably 25% speed up due to actual modules, and 50% was getting rid of templates >_>

1585669309
andrewrk
TheLemonMan, no but I can look into that

1585669425
pixelherodev
C++ compile times are one of the biggest reasons I'm never going to use it for a long-term major project again

1585669459
pixelherodev
I've had C with -O3 compile faster than C++ with -O0 :(

1585669668
andrewrk


1585669674
andrewrk
FireFox317, shakesoda ^

1585669816
shakesoda
pixelherodev: yeah, I'm done with waiting for C++ too for anything of my own, but I still need it for work.

1585669840
shakesoda
someday I will be free, but not today.

1585670325
TheLemonMan
andrewrk, I was thinking of your idea for a @extern builtin, it may also be helpful to change the linked symbol name for the NetBSD versioned symbols

1585670363
andrewrk
makes sense

1585670376
TheLemonMan
rust has something slightly different, the link_name attribute that works a bit like our @export

1585670398
fengb
We will never be consistently lower than 1000 issues :(

1585670432
TheLemonMan
I'm not sure if that's better than having some usingnamespace + comptime switch to select what to include in c.zig

1585670536
pixelherodev
Issue quantity doesn't really mean much...

1585670609
andrewrk
TheLemonMan, on NetBSD you can #include <stat.h> and call C functions like normal right? I think c.zig should enable this same thing

1585670779
TheLemonMan
that'd work either way, I'm thinking of what's the cleanest way to do so

1585670814
andrewrk
I see

1585670837
mps
I've built zig on alpine linux aarch64 and tested with some small C programs

1585670874
TheLemonMan
we should also consider #4426 for the other platforms, are we trying to cover the whole libc or the pieces we need in the stdlib?

1585670918
mps
and, hello.zig

1585670925
mps
looks good

1585670984
mps
andrewrk: what is your opinion about enable it on aarch64 on alpine linux

1585671080
andrewrk
mps, aarch64 alpine linux is well tested, it's the environment Drone CI uses

1585671129
mps
nice, will push it. thanks

1585671357
fengb
How close is tier 1 for aarch64?

1585671374
andrewrk


1585671403
fengb
Latest comment is to check after LLVM10 >_>

1585671460
shakesoda
was that div5t or whatever the signature was issue for zig cc vs luajit figured out?

1585671463
andrewrk
yeah. still a few issues open and disabled tests. but I think it is fair to call it tier 1 at this point

1585671503
ikskuh
how many more tier-1 systems do we have for 0.6.0?

1585671513
andrewrk
shakesoda, this?

1585671718
andrewrk
maybe 32-bit windows can be added to the CI

1585671773
andrewrk
I forgot how terrible Azure documentation is

1585671829
andrewrk
hm they only have 64 bits

1585671868
ikskuh
andrewrk: 64bit windows should support WOW32

1585671896
ikskuh
means you can execute 32 bit executables without problems

1585672092
fengb
Is this your new permanent name? Making me remember things :/

1585672232
ikskuh
fengb: yes.

1585672260
ikskuh
i left "MasterQ32" about a year ago on most systems, freenode and Github are the last places i'm using this

1585672302
fengb
But... Github is the only place that matters

1585672340
ikskuh
demozoo is:

1585672341
ikskuh
:D

1585672388
pixelherodev
srht!!!

1585672412
andrewrk
ikskuh, github lets you rename your username

1585672419
andrewrk
it puts redirects up too

1585672432
ikskuh
andrewrk: no, it doesn't

1585672434
ikskuh
well

1585672435
fengb


1585672438
ikskuh
yes, i can rename

1585672445
andrewrk


1585672447
pixelherodev
Obligatory disclaimer: I'm currently interning for SourceHut :P

1585672459
ikskuh
huh

1585672461
fengb
Oh neat

1585672469
fengb
Can you convince Drew to use Zig? :P

1585672471
ikskuh
i read the docs yesterday and it says redirects won't work ^^

1585672487
pixelherodev
fengb, I doubt it :P

1585672494
andrewrk
I can't talk to drew without him getting angry at me and lecturing me on how computers work

1585672495
ikskuh
can you share the secret knowledge with me?

1585672503
fengb
Really?

1585672508
pixelherodev
Drew has a, uh, intense dislike for comptime

1585672533
fengb
I guess I shouldn't be surprised. His blog articles also has that vibe

1585672540
andrewrk
I like drew, I like what he's doing, but I think he has a limited perspective in a few ways

1585672582
fengb
Limited comptime, so like Odin? >_>

1585672600
fengb
Wait, it looks like he might be working on his own language

1585672694
andrewrk
I don't see it on

1585672716
fengb


1585672720
fengb
Last part of this post

1585672730
pixelherodev
I think he dislikes async even more though (and I honestly completely see his point on this one, though I haven't yet decided how I feel on the matter): `completely overhauls the runtime characteristics of your program with little to no changes [to your code]`

1585672764
pixelherodev
That is, just changing a boolean in the root source file can change runtime behavior in significant ways, making debugging harder and the program less predictable

1585672806
pixelherodev
Though that's more of an issue with the standard library than the language, as I understand it (since it's zag that checks the root source file for evented/blocking mode)

1585672850
fengb
I can agree with that

1585672871
fengb
But I'm also tired of async bifurcating every userland

1585672901
fengb
I don't think there's a good solution for both problems

1585672913
pixelherodev
Right - it's a matter of priorities

1585672924
pixelherodev
Every programming language has these kinds of tradeoffs

1585672935
pixelherodev
The job of a responsible language is to make them explicit ahead of time so you know what you're getting into

1585672947
pixelherodev
That's another area where I think Zig excels

1585673075
companion_cube
oh my, drew makes a language.

1585673085
companion_cube
at least he got the type notation right.

1585673179
fengb
It seems like most languages are generally all the same page now :P

1585673196
andrewrk
he's going to go through the exact same process I did, and then end up with an earlier version of zig from 3 years ago, or something that is designed incorrectly

1585673253
ikskuh
yeah, good language design is hard

1585673400
companion_cube
andrewrk: who knows, he might pick basic macros over comptime?

1585673441
andrewrk
even rust, which already has powerful AST macros, is converging on zig's comptime features

1585673446
andrewrk
and C++ even

1585673484
ifreund
what was the argument against comptime? I think it's a far more elegant solution than macros of any kind

1585673486
companion_cube
I think rust did the macros first because they were easier

1585673489
andrewrk
the comptime stuff is just objectively the correct way to design a language. not necessarily even having the keyword like zig does - zig takes it to a new level with inline loops and stuff - but just basic stuff like array lengths being able to call functions

1585673496
fengb
Really? But AST macros have more powa!

1585673501
companion_cube
(also, they allow to duplicate code in a more syntactic way)

1585673542
andrewrk
it's just so clearly a design flaw if you can't make a global constant initialized by a function call

1585673553
Snektron
I think Rust would have a hard time implementing comptime types into their typesystem

1585673593
Snektron
What with specifying contracts and all that

1585673600
companion_cube
you mean traits?

1585673605
pixelherodev
The anti-comptime argument: `it means you cannot predict the runtime behavior of some code just by reading it, you need context - there's no syntactical difference between comptime and runtime code`

1585673615
companion_cube
I mean they're working on const, it's just a lot of engineering effort

1585673616
pixelherodev
He was arguing that it's not predictable enough?

1585673617
andrewrk
pixelherodev, that argument falls apart in the examples I just gave

1585673642
companion_cube
pixelherodev: you can do like D and have foo!bar to clearly indicate templatesâ€¦ ðŸ¤·

1585673645
pixelherodev
Take it up with Drew, not me; I try to avoid engineering holy wars :P

1585673664
companion_cube
what are you interning on?

1585673665
andrewrk
nah I'll just keep working on the release

1585673670
pixelherodev
companion_cube, a metrics system

1585673685
companion_cube
yeah, imperial units suck ;-P

1585673690
pixelherodev
lol

1585673728
pixelherodev
companion_cube:

1585673762
companion_cube
no promotheus for y'all? :)

1585673768
pixelherodev
It's using prometheus

1585673780
companion_cube
ah cool,so you're making the frontend

1585673784
pixelherodev
The goal is a simple Prometheus frontend that makes it easier to track down root causes

1585673785
pixelherodev
Yeah

1585673795
companion_cube
in go, I imagine

1585673798
pixelherodev
Nope

1585673799
pixelherodev
Up to me

1585673809
TheLemonMan
perl+cgi ofc

1585673820
pixelherodev
The goal is to make a broadly usable service that others would be interested in using

1585673832
pixelherodev
That is, code quality is more important than language / framework :P

1585673839
fengb
Zig then

1585673840
companion_cube
surprisingly flexible :p

1585673848
companion_cube
fengb: no, Odin, of course :p

1585673864
fengb
Youâ€™re our Trojan horse ðŸ™ƒ

1585673950
companion_cube
nah, I don't actually have any interest in odin/jai

1585673974
andrewrk
TheLemonMan, did you link me to something about building qemu usermode? or should I just follow the readme and figure it out

1585673985
fengb
What about V?

1585674011
companion_cube
ðŸ˜‚ good one

1585674108
TheLemonMan
andrewrk,

1585674209
ikskuh
<andrewrk> it's just so clearly a design flaw if you can't make a global constant initialized by a function call

1585674211
ikskuh
This is so true

1585674225
ikskuh
as soon as this idea is sparked, the rest naturally follows

1585674241
andrewrk
that's how I see it

1585674309
andrewrk
TheLemonMan, what do you think? v4.2.0 or v5.0.0-rc0?

1585674329
andrewrk
the other tags have gone through 4-5 release candidates on average before the final tag

1585674340
TheLemonMan
420 of course

1585674343
andrewrk
lol good point

1585674350
ikskuh
i'd go the full route though (full type generation and code execution at comptime), but can understand the reasons not to do so as well

1585674427
TheLemonMan
speaking of AST macros, Nim macros are so cool that the whole async machinery is implemented as a macro (with a little help from the compiler)

1585674547
andrewrk
that is neat and scary

1585674562
andrewrk
I think nim async await has some fundamentally different semantics as zig

1585675495
FireFox317
andrewrk, hmm getting an sigill with the zig binary on raspbian. it's an udf instruction

1585675548
andrewrk
in what function?

1585675564
FireFox317
i'm running this on an rpi3b+ which is armv8, but armv8 is backwards compatible with armv7

1585675628
FireFox317
andrewrk, os_init

1585675659
andrewrk
hmm

1585675695
TheLemonMan
get a backtrace with gdb

1585675725
andrewrk
FireFox317, I can also make a build with debug symbols

1585675754
TheLemonMan
udf is an undefined opcode, udf is used for trapping the execution

1585675808
FireFox317
yeah bt is os_init, main. andrewrk if you don't have time I can do it myself too

1585675920
TheLemonMan
run `disassemble` and upload the result

1585676094
andrewrk
I might need to make this qemu in an alpine docker image

1585676095
FireFox317
uname -a: Linux raspberrypi 4.19.97-v7+ #1294 SMP Thu Jan 30 13:15:58 GMT 2020 armv7l GNU/Linux

1585676176
FireFox317
TheLemonMan:

1585676268
TheLemonMan
getauxval is returning a null pointer

1585676305
TheLemonMan
try running zig with `LD_SHOW_AUXV=1 <failing command>`

1585676314
andrewrk
it's statically linked

1585676374
FireFox317
lol when i run `LD_SHOW_AUXV=1 ./zig` it runs fine

1585676402
andrewrk
hmm where is the LD_SHOW_AUXV logic? I don't see it in musl sources

1585676583
TheLemonMan
FireFox317, does it print any line starting with AT_ ?

1585676648
FireFox317
TheLemonMan, nope

1585676674
TheLemonMan
oh it's statically linked, right

1585676717
FireFox317
jup, but it does run when i put LD_SHOW_AUXV=1 before the command

1585676764
TheLemonMan
ok so let's see why it's fucking up

1585676775
TheLemonMan
put a breakpoint on os_init (b os_init)

1585676800
FireFox317
i have some basic gdb knowledge :)

1585676825
TheLemonMan
then run the program until it hits the bp and step with `ni` 'till you reach the tst below getauxval

1585676872
TheLemonMan
if you hit the first it's just AT_RANDOM being misaligned

1585676887
TheLemonMan
if you hit the second branch the returned pointer is null

1585676912
TheLemonMan
but I believe it's the former

1585677019
FireFox317
jup its the first tst

1585677077
FireFox317
first branch i mean

1585677123
TheLemonMan
it's an easy fix then, write some logic to memcpy from the getauxval pointer to a temporary int-sized variable and pass that to srand

1585677125
FireFox317
0x01cb0124 is the instruction that jumps to the end of the function

1585677238
FireFox317
TheLemonMan, thanks for the quick help :)

1585677335
TheLemonMan
np, I love debugging stuff

1585677354
TheLemonMan
and fuck x86 for allowing unaligned reads

1585677522
FireFox317
TheLemonMan, but getauxval returns a value right? not a pointer

1585677558
TheLemonMan
a pointer is a value :)

1585677606
TheLemonMan
for AT_RANDOM that's a (unaligned) pointer to a 16-byte buffer full of (hopefully) random data

1585677627
FireFox317
oh yeah, i see its casted to a pointer actually

1585678757
FireFox317
TheLemonMan, #4881 looks correct?

1585678793
FireFox317
andrewrk, could you rebuild the arm binary with #4881 or should i do it myself? :D

1585678808
andrewrk
I thought you didn't have enough disk space?

1585678839
FireFox317
I can do it on the beefy aarch64

1585678871
fengb
Oof, that's something Zig would just catch for us >_>

1585678934
andrewrk
FireFox317, any work you can take off my hands is a blessing

1585679431
TheLemonMan
FireFox317, I've left two comments

1585679495
jaredmm
I haven't been able to compile LLVM10 on Win10 because of an `The ASM compiler identification is unknown` error.

1585679520
jaredmm
Are there different instructions now or should the Wiki page still be good?

1585679737
andrewrk
is there an open issue for this? I personally tested compiling llvm10 on windows 10, and updated the wiki accordingly

1585679796
FireFox317
TheLemonMan, damn that's some nice knowledge you have there xd

1585680257
FireFox317
TheLemonMan, updated, should be better now :)

1585680922
TheLemonMan
lgtm o/ time to test it on the rpi

1585681004
ikskuh
good luck!

1585681041
pmwhite
I'm hitting stuff with recursive async functions, and I'm a little confused...

1585681061
TheLemonMan
jk, I have no idea where my rpi is, this room is a mess

1585681096
fengb
Oh shoot, my pi's gameboy shell should be arriving today

1585681148
pmwhite
A is the main function, and B is the helper. A allocates a frame to call B with. B calls A. I get an error about A that says "recursive function cannot be async"

1585681182
fengb
You'll need to be explicit when using recursive functions

1585681189
pmwhite
I have been doing this without error with just A, but now I was wanting to use B twice inside of A.

1585681198
fengb
e.g. manually allocate the recursion frame

1585681228
fengb
Can you post a snippet?

1585681243
pmwhite
But A is allocating a frame to call B. Do I need to allocate a frame from B to call A?

1585681254
jaredmm
andrewrk: Since it is an issue with me compiling LLVM, I did not create an issue yet. I'll create something if I determine there is something that needs to be changed to make it work in a specific environment.

1585681452
pmwhite
fengb: Highly incomplete snippet, but hopefully trimmed enough that you can get what is going on.

1585681582
pmwhite
You can ignore the switch at the end I guess, because the error happens even without it.jk;w

1585681640
pmwhite
jk;w = quit insert mode and save file, lol. vim is leaking into my entire life.

1585681973
pixelherodev
I was testing one last configuration on the compiler, and it unexpectedly made it hundreds of milliseconds worse - or so I thought. I restored the good compiler flags, and the results were about the same! Then I realized I'd increased the complexity of the test program and I just wasted nearly fifteen minutes on this :P

1585682301
pmwhite
fengb: All I'm really trying to do is mutually recursive async functions. I know they won't technically be recursive, since the stack frame will be manually allocated, but that's the idea. I think if I saw a small example, I could apply it to my use-case.

1585682988
fengb
Hmm yeah that shouldn't have cycles

1585683065
fengb
The really simplified case works:

1585683183
mikdusan1
in stage1, is_comptime() returns true for both globals or `comptime { var a... }` locals; any hints on how I can differentiate?

1585683238
fengb
`e.handleEvent(event);` is e a different type? Maybe that has recursion?

1585683366
pmwhite
yeah...that might be where that is. I just thought of that myself.

1585683560
mikdusan1
ah I think maybe ConstPtrMutRuntimeVar

1585683600
pmwhite
fengb: I'm allocating that frame now, but no change.

1585683821
andrewrk
mikdusan, yeah the pointer that points at a global is technically comptime known (even though it may have to get resolved by the linker)

1585683832
andrewrk
however the memory the pointer points to, may not be comptime memory

1585683845
andrewrk
as you can imagine there are a few bugs around this edge case

1585683903
mikdusan
yeah I think #2622

1585684150
FireFox317
jaredmm, on linux we also get a warning for that, but cmake just continues after all

1585684237
FireFox317
wait nvm, this only happends when we build llvm with `zig cc` -- Warning: Did not find file Compiler/-ASM

1585684292
andrewrk
oh jaredmm are you trying to use zig cc on windows? that's interesting, I haven't tried to do that yet

1585684346
andrewrk
hm we should be able to additionally set ASM="zig cc"

1585684456
fengb
Philip White: allocating frame only breaks an immediate chain. If handleEvent is internally recursive then it is still a problem

1585684495
fengb
async calls require the size to be known at comptime. Unbounded recursion means it's unknowable

1585684608
pmwhite
there are two functions called handleEvent. One of them is associated with Elements, which weren't in the snippet I gave you. That one is not recursive, but it is async. If I remove that call to that, in the snippet, then the whole thing compiles.

1585684715
pmwhite
That unbounded recursion issue also usually raises a different error, right?

1585684715
fengb
Hrm itâ€™s possible the recursion detection is having trouble

1585684721
pmwhite
Actually nevermind that last statement.

1585685197
pmwhite
possible. Copy-paste is always an option...but now that is giving me the dreaded "instruction does not dominate all uses"

1585685269
fengb
andrewrk's favorite error! ðŸ™ƒ

1585685299
andrewrk
damn it

1585685329
andrewrk
well at least you know it's the compiler's fault rather than yours

1585685360
pmwhite
yeah, i guess...do you want me to make an issue for this?

1585685477
pmwhite
not sure if i can yet...i need to figure out what the essence of the issue is.

1585686080
andrewrk
if you can reduce it to a small test case then I'm definitely interested

1585688102
BaroqueLarouche
found a bug in adler32 implentation:

1585688200
pmwhite


1585688232
pmwhite
This is a much smaller version of the async bug. 28 lines.

1585688475
FireFox317
andrewrk, TheLemonBoy got to the next SIGILL, but now during zig build-exe

1585688491
FireFox317
will debug a bit myself

1585688530
andrewrk
note you can swap -DCMAKE_BUILD_TYPE=Release for Debug (only for zig sources) in the build script and have a better time debugging

1585688542
andrewrk
thanks pmwhite

1585688562
andrewrk
can't look at it at this moment but will get to it if you make an issue

1585689047
pmwhite
That's fine. I know you've got a lot to do.

1585689404
andrewrk
thanks

1585689486
pixelherodev
What's with Zig's generated alignment check?

1585689499
pixelherodev
It's doing `if (ptr_as_int & 0 == 0){}else{}` ...

1585689534
pixelherodev
`%bar = and %foo, 0` then doing a conditional branch on whether that's equal to zero

1585689556
pixelherodev
Ahhh, because the integer might not match ptr size!

1585690745
pixelherodev
Good news is, my compiler backend works! Bad news is, that depends on how you define

1585690772
BaroqueLarouche
pixelherodev:  What's working so far ?

1585690775
pixelherodev
it produces a valid binary, but the binary BusErrors in the

1585690871
pixelherodev
So, uh, it's great?

1585690878
pixelherodev
This is actually completely intended though

1585690889
pixelherodev
Part of the incremental design is the terrible backend that only barely works

1585690910
pixelherodev
Then I can use that to finish up the tree generation, and then rewrite a much saner backend

1585690930
BaroqueLarouche
you are parsing LLVM IR right ?

1585690935
pixelherodev
Yeah

1585690945
pixelherodev
It also is giving me a lot more information on how to properly design the backend

1585691249
BaroqueLarouche
is the code public yet or you are waiting for something more presentable ?

1585691430
Cadey
is `zig c++` released yet?

1585691468
redj
andrewrk: I'm guessing zig cc won't deal well with linux style paths on windows? -L../ecere/obj/bootstrap.linux

1585691513
andrewrk
Cadey, `zig c++` works and master branch tarballs have it. the next official zig release to have this feature is 0.6.0

1585691523
andrewrk
april 13

1585691529
Cadey
cool

1585691532
redj
andrewrk: sorry, nvm that, I'm on linux! lol

1585691545
Cadey
i'm doing something horriffic to a discord bot written in rust and zig c++ is gonna save me :D

1585691555
andrewrk
Cadey, you may also find this project interesting if you haven't yet seen it:

1585691559
redj
I'm getting those errors, not too sure why

1585691559
redj
lld: error: unable to find library -lecereBootstrap

1585691559
redj
lld: error: unable to find library -lecBootstrap

1585691579
Cadey
someone decompiled the turnip price logic in animal crossing on the switch and released a C++ fragment to calculate it

1585691594
Cadey
i'm putting that C++ into a discord bot

1585691603
FireFox317
andrewrk, in `ir_analyze_call_extra` i think pass1_options is a nullptr, any clue why this could be the case?

1585691604
jaredmm
andrewrk: Yeah. Part of the problem is my lack of CMake knowledge. By creating Windows shortcuts (zigcc and zigc++) I was able to get a Ninja project to generate and build.

1585691648
oats
is there a place I can read about the in-progress changes for 0.6.0?

1585691671
andrewrk
oats,

1585691677
oats
cheers :)

1585691804
Cadey
andrewrk: you might find this useful:

1585691817
Cadey
used like:

1585691860
andrewrk
what does it do?

1585691925
andrewrk
oats, not all these will get solved. realistically probably 1-2 bugs per day and 4-5 postponed until the next cycle

1585692071
Cadey
andrewrk: creates a derivation for the nightly (or any) version of zig for use with nix packages

1585692079
Cadey
i also use it in `nix shell`

1585692158
andrewrk
neat

1585692216
andrewrk
I have 3 source checkouts and updating looks like `git pull && make` and I run zig directly from the source dir

1585692523
Cadey
i've gone full nix

1585692681
Cadey
andrewrk: zig is great because it fully enables me to do my black magick to the fullest extent possible

1585692692
oats
hehe

1585692695
ikskuh
Cadey: yeah!

1585692697
Cadey
you can quote that as a testimonial or whatever

1585693258
Cadey
huh, from within nix-build i get `unable to get compiler id: access denied` when trying to build my libstonks.so, uploading code into a gist

1585693309
Cadey


1585693311
andrewrk
Cadey, zig is trying to hash its own executable for cache purposes. it wants to save the hash of its own executable somewhere

1585693345
Cadey
oh i think i ran into this before

1585693354
andrewrk
I think you can fix this by setting XDG_CACHE_HOME

1585693359
andrewrk


1585693447
Cadey
yep that did it

1585693611
Cadey
ummmm

1585693617
Cadey
should this happen?

1585693624
Cadey
$ ldd /nix/store/r0mxwfxb4d7ivlibp795janh7dk2qkn9-libstonks/lib/libstonks.so

1585693627
Cadey
statically linked

1585693692
diginet
libstonks...I loe it

1585693693
diginet
love

1585693730
shakesoda
Cadey: yes

1585695111
jayschwa
Hi, I create snap packages (Ubuntu's new-ish package manager) for Zig. I plan to start publishing arm64/aarch64 builds to the Ubuntu store (in addition to the current amd64/x86_64 builds), but I don't have access to an arm64 machine to validate that the packaged snap actually works. If anyone here has an arm64 Ubuntu machine with `snap` installed

1585695112
jayschwa
and is willing to test a build, please email me at jay@jayschwa.net. Thank you.

1585695600
Cadey
well crap, i'm getting a segfault instantly now

1585695606
Cadey
gonna try and trace it down

1585695885
Cadey
to compile a C++ library for a .so it's `clang++ -g -c -Wall -Werror -fpic stonks.cpp` and then `clang++ -shared -o libstonks.so stonks.o` right?

1585696857
andrewrk
Cadey, you're building native stuff right? you probably want to dynamically link against glibc

1585696889
andrewrk
are you using nix clang, built-from-source clang, or zig c++ ?

1585696904
Cadey
nix clang to try and find out why the heck this is segfaulting

1585696910
Cadey
(i get the same segfault with zig c++)

1585696925
Cadey
it seems to be segfaulting inside clock_gettime

1585696952
andrewrk
that sounds vdso related, but not sure if that's a clue. first I want to understand why it's statically linked because on nixos it should be dynamic linking glibc

1585696990
andrewrk
you might need -fPIC on the compile command

1585697018
andrewrk
if you're planning to build with zig anyway you could use zig's CLI rather than zig c++

1585697155
Cadey


1585697408
andrewrk
are you using nix on macos?

1585697423
andrewrk
if you're going to build it with zig anyway, `zig build-lib -shared --c-source stonks.cpp`

1585697508
Cadey
apparently it's -dynamic instead of -shared

1585697513
andrewrk
yeah, sorry

1585697534
Cadey
stonks.cpp:2:10: fatal error: 'stdio.h' file not found

1585697551
andrewrk
zig build-lib -dynamic --c-source stonks.cpp -lc++ -lc

1585697696
Cadey
that worked :D, testing with the bot now

1585697757
yrashk
I am trying to use zig-bootstrap, early on in the build process (x86_64-linux-[gnu|musl]) I get Error running link command: No such file or directory

1585697773
yrashk


1585697842
andrewrk
cmake dumps logs that show the command it tried to run

1585697849
andrewrk
and the corresponding stderr

1585697910
yrashk
looking at those

1585697954
Cadey
same segfault :D

1585697991
yrashk
there's actually a bunch of errors in the  stderr

1585698007
yrashk
let me compile

1585698129
andrewrk
Cadey, want to try something fun? include a zig file that exports initDebug() and call it from your c++ main(). initDebug() will just call std.debug.attachSegFaultHandler()

1585698132
frmdstryr
Unreachable at /deps/zig/src/analyze.cpp:869 in get_slice_type. This is a bug in the Zig compiler?

1585698143
Cadey
C++ isn't the main :D

1585698146
Cadey
rust is

1585698151
yrashk
way too many, including linking issues. I suspect zig-bootstrap might be having difficulties with NixOS

1585698182
andrewrk
Cadey, well you get the idea - you can look at the segfault in a debugger or you could try to instrument the binary to do it for you

1585698185
Cadey
yrashk: i have a stupidly powerful nixos machine in front of me, want me to take a look at zig-bootstrap?

1585698224
frmdstryr
Anyone see that error, any suggestions on where to look?

1585698227
andrewrk
yrashk, I ran the x86_64-linux-musl with ziglang/bootstrap just fine, on nixos. I wonder what is different with your box

1585698236
yrashk
Cadey: sure; mine is also stupidly powerful (for a laptop :) but I maybe I am missing something...

1585698263
yrashk
andrewrk: hmmm

1585698282
yrashk
I am on 19.09.2345.6d445f8398d

1585698292
andrewrk
yrashk, can you show the link command that resulted in no such file or directory?

1585698294
Cadey
i'm on 20.03 beta, let's see if that matters

1585698326
yrashk
this is interesting, now it seems to be going through, after numerous attempts

1585698343
fengb
It got scared of andrewrk

1585698347
yrashk
(but I did update some packages recently using home-manager)

1585698368
yrashk
yeah, I suppose

1585698384
yrashk
andrewrk: btw do you happen to have your own default.nix / shell.nix for zig?

1585698386
Cadey
andrewrk: is it okay if i contribute a `shell.nix` file to the bootstrap repo?

1585698420
yrashk
I am currently building zig's master using a PR for llvm10 plus my patch to zig's derivation

1585698460
yrashk
but I'd rather have a solid shared `shell.nix ` for the main repo to build it regardless of the state of things in nixpkgs

1585698584
andrewrk
Cadey, i'd like to keep that repo clean from any environment-specific hacks

1585698601
andrewrk
I would welcome you to paste your env into a wiki article on that repo

1585698607
Cadey
:+1:

1585698846
andrewrk
wow thanks yrashk

1585698892
andrewrk
yrashk, hmm did you hack up the build script from the bootstrap repo? I think it would be better to not do that

1585698928
yrashk
andrewrk: no, I am still using the original build script, but it started working somehow (I don't like mysteries, but hey, at least it works)

1585698948
andrewrk
that must have been someone else who deleted half of it because they already had zig installed

1585698953
yrashk
what I am more interested in right now is shell.nix for zig-lang/zig to have a comfortable development environment to contribute

1585699007
andrewrk
yrashk, this should work:

1585699020
andrewrk
personally I use llvm, clang, lld built from source though

1585699037
yrashk
current llvm in nixpkgs in rc5

1585699093
yrashk
that's why I thought maybe having a zig-lang/zig-specific shell.nix could be a good place to start to ensure there's always a correct build of clang/llvm/lld with it

