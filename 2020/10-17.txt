1602893718
ryuukk_
i can't find documentation about implementing custom iterator for a struct

1602893722
ryuukk_
is it possible?

1602893732
ryuukk_
so i can use for() on my struct

1602893818
ryuukk_
i'm looking for something like opApply in D

1602894564
waleee-cl
I think the current situation is c-style iterators,

1602894633
waleee-cl
but someone collated some of the library efforts,

1602894698
ryuukk_
so there is no way to replicate the for loop?

1602894704
waleee-cl
ryuukk_:  and a proposal which mentions opApply specifically

1602894771
waleee-cl
in that issue-thread,

1602895009
ryuukk_
so it's not possible

1602897107
tdeo
ryuukk_: if you implement `fn next(self: *Iterator) ?Element` you can use it like `for (iterator.next()) |element| { ... }`

1602897114
tdeo
not for, while*

1602897333
ryuukk_
i just need to add that one function?

1602897366
waleee-cl
I Ithink the crucial bit was the 2nd thing tdeo wrote

1602897466
ryuukk_
why not for?

1602897506
waleee-cl
'cause this

1602897557
ryuukk_
why only slice?

1602897580
ryuukk_
what is the code slice implement to do the same?

1602897605
waleee-cl
code slice implement?

1602897649
tdeo
slice is part of the compiler

1602898771
waleee-cl
ryuukk_:  regarding why only slices for 'for', I'm guessing separation of intent & explicity.

1602898771
waleee-cl
'for' can only be used to iterate over a collection of items with a fixed length (slices have a length field)

1602898837
waleee-cl
while 'while' allows you to iterate over arbitrary structures

1602898981
waleee-cl
so that when you read code, you don't have to hunt for eg. an iterator implementation when coming across a for-loop

1602899102
ryuukk_
ah good point, thanks

1602899163
waleee-cl
but had there been a foreach, I'd have expected the same as you

1602925060
dutchie
is `catch null` the best way to go from !T to ?T?

1602925079
dutchie
(oops that ended up looking a bit confusing...)

1602927626
ifreund
dutchie: yep

1602934401
dutchie
woo, finished my first project in zig, rewriting a little haskell thing:

1602934427
dutchie
any suggestions about dumb stuff i did welcome :)

1602938327
ifreund
dutchie: Day.toString() isn't needed, we have @tagName() :P

1602939534
dutchie
ah yeah

1602939562
dutchie
actually i don't even call it, I just use @tagName in Date.format

1602939600
earnestly
An instant case of YAGNI that in fact wasn't needed

1602939612
earnestly
wasn't used*

1602939684
dutchie
i think i did use it before i found that format existed

1602939744
earnestly
Well then, a nice negative commit is a reward

1602939753
dutchie
yep :)

1602939919
dutchie
is the compiler going to grow unused code warnings at some point?

1602939960
Nypsie[m]
Functions? No, but unused local variables will be errors at some point iirc

1602939990
dutchie


1602940076
Nypsie[m]
Much thought still has to be put into that

1602957972
kristoff_it1
Zig SHOWTIME starts in 5 mins,

1602961980
pixelherodev
companion_cube: I completely disagree

1602961997
pixelherodev
As a developer, I've started getting really annoyed by per-project dependencies

1602962003
pixelherodev
As a user, that's even more true

1602962218
pixelherodev
earnestly: ... I'm going to have to look at Gobo more, that looks really neat

1602962244
earnestly
pixelherodev: By the author of htop, heh

1602964861
companion_cube
pixelherodev: to each their own :)

1602964956
pixelherodev
Yep :)

1602964969
pixelherodev
companion_cube: I've actually started devendoring an old project :P

1602964977
pixelherodev
It's just a hassle keeping libraries synced

1602965023
companion_cube
what's the alternative, though?

1602965030
pixelherodev
System-wide installations

1602965039
pixelherodev
It's much easier to manage that way

1602965057
companion_cube
you still need to keep track of dependencies (and their versions) quite closely

1602965066
pixelherodev
Not necessarily

1602965070
pixelherodev
At least, not with versions

1602965071
companion_cube
unless you depend only on decades-old libraries that don't move at all, of course

1602965080
pixelherodev
That's the whole point of semantic versioning

1602965095
pixelherodev
Depend on the major version only, or for new features, a minor version

1602974574
Ondingen
Is it possible to get a better error message than "...exited with error code 3221225501 ..." from 'zig build run' with UBSan on windows? I tried "set UBSAN_OPTIONS=log_path=C:/ubsan_logs" but nothing appears there.

1602974590
Ondingen
(with C code)

1602975016
andrewrk
Ondingen, if you have any zig code in the project, you can call std.debug.attachSegfaultHandler()

1602975030
andrewrk
and then it will print a stack trace when that happens

1602978381
Ondingen
I don't, it's a win32 C project (quake) and I couldn't get a WinMain working. But I added a separate segfault_handler.zig file and called b.addObject(...) and exe.addObject(...) and that works, but not for x86 builds, only x64.Using i386 as a target lld reports the error : "lld: error: ...\segfault_handler.obj: machine type x64 conflicts with x86".

1602978381
Ondingen
So it seems the target isn't respected? I worked around it by doing build-lib and then exe.addObjectFile(...). Now I get 2147483651 (0x80000003) as the error but nothing else. Is it because it's a win32 application? It works with a terminal app.

1602978393
Ondingen
@andrewrk

1602978468
andrewrk
Ondingen, can I see your build.zig file? note that you have to add the target for every artifact

1602978785
Ondingen
andrewrk

1602978820
Ondingen
the exe.addLinkerArg(...) was added by me to the compiler because I couldn't figure out any way to pass flags to the linker

1602978828
Ondingen
so you can't run it

1602978953
andrewrk
how is ubsan-test/src/segfault_handler.obj generated?

1602978964
Ondingen
"zig build-obj segfault_handler.zig -target i386-windows-msvc"

1602979042
andrewrk
that should be ok but simpler would be to put segfault_handler.zig in the call to addExecutable instead of null

1602979079
Ondingen
Oh, that works? I assumed addExecutable had to contain the entry point for some reason

1602979107
andrewrk
should work, if it doesn't I would label it a bug

1602979146
andrewrk
what is what is addLinkerArg("-nodefaultlib:libc") supposed to accomplish?

1602979173
Ondingen
MGLLT.LIB has -defaultlib:libc

