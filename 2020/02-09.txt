1581207236
andrewrk
BaroqueLarouche, you can iterate over the contents of @embedFile at comptime too :)

1581207290
andrewrk
wasm is an opportunity to peel a few layers of abstraction off of the web, but sadly it's not getting used that way

1581207309
BaroqueLarouche
and get the length also,!

1581207345
fengb
At least it’s replacing asm.js :P

1581207417
andrewrk
fengb, did you see

1581207425
andrewrk
this is the current list of compile errors I'm getting from:

1581207436
andrewrk
./zig test ../lib/std/std.zig --test-evented-io

1581207439
andrewrk
it found all the recursion

1581207465
andrewrk
can't have colorless functions without zig's safe recursion plan

1581207485
pixelherodev
`wasm is an opportunity to peel a few layers of abstraction off of the web, but sadly it's not getting used that way` very much this

1581207489
pixelherodev
I think wasm

1581207492
andrewrk
these things are fitting together like perfect puzzle pieces

1581207504
pixelherodev
But as is, it's just adding

1581207550
fengb
Recursion is the new color :P

1581207571
andrewrk
ha, yes, until #1006. then it'll just be a new compile error

1581207592
andrewrk
recursion is always red

1581207600
fengb
Can we have stack limited recursion?

1581207615
fengb
Mark it as “only n iterations”

1581207633
shachaf
Aren't you worried that recursion will be noticeably more expensive with that approach?

1581207640
andrewrk
fengb, check it:

1581207676
fengb
Aha that’s the same hack I used! :P

1581207718
andrewrk
shachaf, yes I'm worried about a lot of things, but I do have to take some design risks

1581207839
shachaf
"call"/"ret" is a pretty efficient way to do function calls if you don't need coroutines.

1581207899
andrewrk
here is an example of problematic recursion:

1581207945
andrewrk
in master branch, you can easily stack overflow by trying to write "[[[[[[[[[[[[[" (repeated some more)

1581208342
companion_cube
so by using async, how does the recursion happen? it's in the event loop's queue?

1581208400
andrewrk
nah, forget the event loop

1581208471
andrewrk
"async" only means the function's stack frame is provided externally. you might say it is "asynchronously allocated"

1581208495
companion_cube
heh, cool. So just have your own queue or stack or bump allocator, and push the function frame into it? neat.

1581208501
andrewrk
exactly

1581208506
companion_cube
this might actually out-FP the FP languages

1581208522
fengb
How so?

1581208542
andrewrk
if you heap-allocate the frame, the code will have the same structure as recursion, but it will probably now take an allocator parameter, and return a possible error.OutOfMemory

1581208542
companion_cube
well it's hard to write

1581208574
fengb
I agree but most FP languages like to ignore the stack entirely

1581208731
companion_cube
not that I know of, really, except maybe Haskell?

1581208740
companion_cube
(it's definitely a common issue in the ML family)

1581208958
andrewrk
IMO this is sort of where you arrive naturally when reconciling these 2 facts: (1) memory, including stack space, is a limited resource (2) programmers need recursion

1581208985
andrewrk
programming languages which have hidden memory allocation do not recognize point (1)

1581209068
andrewrk
this is an area where zig will be safer than rust (or at least has 1 less foot gun)

1581209096
andrewrk
rust detects stack overflow and panics, but it does not provide a way to do have heap-based recursion

1581209787
pixelherodev
Even heap is limited, though admittedly not in a truly comparable manner

1581210333
jaredmm
If I'm using c_ushort in a comptime block, is that going to be sized according to the host or target platform?

1581210365
plumm
comptime wont introduce host behaviors iirc

1581210489
companion_cube
there's a crate in rust for safe recursion, it's a bit awkward though

1581210714
companion_cube


1581210844
seoushi
I couldn't get into rust. It's too opinionated. Sure if I use the borrow checked and lifetimes then my code is safe but I never really had those issues to begin with and now my "unsafe" code is a terrible thing to work with. Maybe if I gave more time into learning it I would have a better opinion, I dunno.

1581211089
fengb
I wasn’t smart enough to learn Rust :/

1581211129
seoushi
I will say that it has a ton of support a lot of good tooling tho.

1581211797
andrewrk
jaredmm, plumm is correct. comptime emulates the target - all the way down to cpu quirks (although admittedly there is no current cpu quirk emulated)

1581211816
andrewrk
but point being comptime is aware of what cpu is being targeted

1581211986
companion_cube
seoushi: wow, you never had memory issues? :D

1581212011
seoushi
companion_cube, well of course I did but those took 5 minutes to clear up in valgrind

1581212488
companion_cube
so you never hd the magic segfault that happns somewhere else? :p

1581212744
seoushi
My point is that sure memory issues happen but usualy they are easy to deal with and not a huge issues. The borrow checker and lifetimes however were a pain in the ass to deal with in rust. I'm sure if i took more time to leanr rust it would be better but I dunno. I still hear a lot of rust devs complain of the same thing that are far more experianced in the language than I am

1581213069
companion_cube
if they happen quickly, that is. rust is supposed to shine in multithreaded programs :)

1581213292
fengb
And larger programs with potentially less experienced engineers

1581213373
companion_cube
yeah, not everyone is experienced with C :/

1581213429
fengb
Only takes one leak for a massive hunting party :P

1581213716
fengb
Random aside: apparently DK64 had a leak they couldn’t fix for the holiday release so they bundled the expansion pack as a quick solution

1581213881
seoushi
I didn't hear of that before but I know I had the expansion for turok before dk64 came out :)

1581214719
plumm
fengb: i work in rust professionally and you are leagues ahead, its not a smartness thing rather a will thing

1581214753
fengb
I only pretend to know what I’m doing here

1581214814
fengb
But I do agree. It was one of the hardest languages I tried to learn and I didn’t end up pushing through it

1581215136
mikdusan
Xcode 11.4 beta download: 8.04 GiB -- and folks once thought ISDN 2B+D was the bomb

1581215136
seoushi
Yeah I can see that. once you get in the mindset I'm sure it's a brillant language. it's just super abrasive up front

1581215175
seoushi
I feel the same way about haskell too hah

1581215980
jaredmm
Anyone have an example of calling wprintf in Zig? I'm getting output that doesn't match the C code. Trying to determine where I screwed up.

1581222941
daurnimator
jaredmm: calling C vararg functions is unsupported I thought

1581223495
mokafolio
is there an online playground to play around with zig?

1581224266
mokafolio
is there an online playground to play around with zig?

1581224274
mokafolio
woops sorry for double post

1581224312
daurnimator
mokafolio:

1581224402
mokafolio
awesome thanks, will check it out

1581229290
pixelherodev
Anyone have a good, working example of reading from a file into a buffer and increasing buffer size when StreamTooLong is encountered?

1581229295
pixelherodev
My current method works ~99% of the time

1581229315
pixelherodev
But the combination of buffering the input stream and using `seekBy(-1)` on the file doesn't seem to end well

1581229325
daurnimator
.readAllAlloc

1581229333
pixelherodev
Yeah but that's out of the question too

1581229340
pixelherodev
I'm reading lines

1581229355
daurnimator
.readUntilDelimiter

1581229358
pixelherodev
readUntilDelimiterOrEof discards a byte when StreamTooLong is encountered

1581229362
daurnimator
.readUntilDelimiterAlloc

1581229371
pixelherodev
Requires allocation for each read

1581229377
pixelherodev
Whereas currently the buffer is reused

1581229386
daurnimator
huh?

1581229396
daurnimator
it should reuse the buffer as long as you have the same max size

1581229397
pixelherodev
Since there's tens of thousands of lines, readUntilDelimiterAlloc will make tens of thousands of allocs

1581229400
pixelherodev
Wait really?

1581229403
pixelherodev
YOu can reuse a buffer with it?

1581229425
daurnimator
I think it does... if it doesn't it should after

1581229522
pixelherodev
Right, but that doesn't help now

1581229526
pixelherodev
That is, at the moment it doesn't

1581229530
pixelherodev
Though your PR should improve that

1581229551
pixelherodev
Better solution: shouldn't read the byte unless there's space

1581229602
pixelherodev
Short term solution: default buffer size to currently needed size * 8

1581229621
pixelherodev
Allocation 32KB is relatively trivial compared to the cost of it malfunctioning

1581229650
pixelherodev
Or it could reset the bufferedstream...

1581231377
pixelherodev
`Token{ .token_type = TokenType.MetadataNamed, .index = 61961, .len = 12297829382473034410 }` I get the strangest feeling that that long length is just 8 bytes of `0xAA`

1581231452
mikdusan
Canadian token?

1581231462
pixelherodev
Forgot to actually set the length on some tokens :P

1581231522
pixelherodev
Nice little bit is that this is actually faster despite having removed some rather shortsighted lexer optimizations

1581231541
pixelherodev
(e.g. i8** now gives three tokens, Type and two Asterisks, instead of a single Type token)

1581240028
snappy
What's the favourite tutorial documentation to get acquainted with zig?

1581241366
metaleap
snappy: one thing i remember as a kinda neat "walkthrough" was

1581241377
metaleap
could be partially outdated in aspects

1581241604
snappy
thanks metaleap

1581241610
snappy
will take a look

1581244041
mq32
hey

1581244056
mq32
is it possible to add more code to a already existing pull request?

1581247998
daurnimator
snappy: home page?

1581248004
daurnimator
not so much tutorial I guess

1581251572
SyrupThinker
mq32: push to your branch

1581256634
betawaffle
is there a right way to declare the last field in a struct as something that will be used to represent a runtime-known length of data? basically i want a field that's zero size, but will be used as a handle to that location, for a ptrCast later

1581256670
mq32
SyrupThinker, not my pull request ^^

1581256691
mq32
betawaffle, no, that is not possible in zig atm

1581256711
betawaffle
k

1581256769
mq32
but you can use a struct and pointer arithmetic

1581256772
mq32
not a nice solution

1581256780
mq32
also you have to do all alignment by hand

1581257663
betawaffle
is it possible to set the tag value of a union member without defining a separate enum type?

1581257803
metaleap
betawaffle: the enum gets inferred without explicit extra definition via `union(enum) { tag1: ..., tag2: ... }`

1581257870
metaleap
and then to get the "enum `type`" still, @TagType for the union will provide

1581257885
betawaffle
right, i know that

1581257897
betawaffle
but my enum needs to have explicit values

1581258211
mq32
betawaffle: then, no

1581258218
mq32
it's not possible with explicit enum values

1581261341
betawaffle
will zig "do the right thing" when dereferencing a `*const align(1) T` when `@alignOf(T)` is greater than 1?

1581274045
andrewrk
betawaffle, yes that is a safe, well-defined operation

1581274057
betawaffle
cool, thanks

1581274145
andrewrk
jaredmm, daurnimator calling C vararg functions has been supported forever- there's an example of calling printf in the lang ref

1581274186
andrewrk
I believe daurnimator is thinking of exporting C var args, which is planned but not implemented

1581275790
jaredmm
I was looking at #4325. I have a comptime function that creates a null terminated utf16le array of [*c]c_ushort (or should). Was trying to think of ways to test it.

1581275990
jaredmm
Obviously making sure the output bytes match the expected bytes for automated testing. For actually interfacing with the Windows APIs. I can call extern Windows APIs with [*c]c_ushort, but most example usages I saw were using LPCWSTR.

1581276024
jaredmm
std/os/windows.zig indicates that the wrapper APIs should accept slices and null-terminated UTF16LE buffers.

1581276031
jaredmm
byte buffers

1581278597
mikdusan
andrewrk: is `IrExecutableSrc.owner_exec` still a thing? I grep'd `owner_exec` for usage sites and doesn't seem like it's needed?

1581278636
andrewrk
mikdusan, now that IrExecutable is separated into Src and Gen, all the fields need auditing to see which are actually needed for each thing

1581278640
andrewrk
I didn't do that auditing yet

1581278644
mikdusan
ah ok

1581278652
andrewrk
so, I think you found a good candidate to delete :)

1581278709
andrewrk
how's the memory overhaul stuff coming along?

1581278735
betawaffle
what's the memory overhaul stuff?

1581278755
mikdusan
right now I'm trying to attach an arena to IrExecutableSrc and see how much stuff can safely go in there :)

1581278786
andrewrk
betawaffle,

1581278852
andrewrk
mikdusan, are you aware of ir.cpp:767-768 ?

1581278857
andrewrk
I can shed some light on this

1581278916
mikdusan
please do. This is the comment that had me pause at remove .owner_exec field

1581278918
andrewrk
actually I forgot exactly, would need to refresh my memory. it has something to do with lazy values but after the "mem slot" cleanup thing I did, I think it might have changed things

1581278972
mikdusan
on master, owner_exec is assigned to and referenced only in 2 places

1581278989
andrewrk
oh hell yes, I think we can uncomment that destroy() and remove owner_exec. this is something that was solved by

1581278997
mikdusan
awesome

1581279056
mikdusan
emergent cleanup made possible by tech debt payoff

1581279061
andrewrk
yep :)

1581279070
andrewrk
which reminds me though I still need to figure out the regression for dbandstra's oxid project

1581279103
andrewrk
it's a nasty one. complex comptime code, and the assertion failure does not make the problem obvious

1581279265
mikdusan
betawaffle: stage1 doesn't do much free() of any memory; and there's not too much benefit into making it do so considering self-hosted roadmap. but until then, we do run up on large heap requirements during testing.

1581279304
mikdusan
and so here and there, we're trying to pick some low hanging fruit on stage1 and free gobs of memory

1581281540
mikdusan
oh Xcode's lldb joins the ranks of xterm-color support. finally

1581281548
andrewrk
woo

1581285249
seoushi
why can't I do this

1581286203
metaleap
not the answer but forgot "tuple arg" in debug.warn call (or are you on 0.5.0 instead of nightly?)

1581286244
metaleap
as far as i can tell it should work like you expect. if in main you do `comptime enumTypeTest();` just to try, same issue?

1581286274
metaleap
i mean yeah shouldnt be necessary but just to see..

1581286613
fengb
Looks like typeId is runtime known, and @typeName requires a comptime value

1581286738
seoushi
adding comptime gives me a different error and still doesn't work. But yeah. I'm basically trying to store a type so I can use it later to cast something. This was just a simple example of the issue.

1581286787
seoushi
I thought this was working because for awhile I only have one type and the to/from functions work but when I have more than one it fails

1581286811
andrewrk
#4404 is ready to merge if the tests pass

1581286822
andrewrk
it fixes a lot of compiler bugs with async functions

1581287277
pixelherodev
Awesome!

1581287291
andrewrk


1581287306
andrewrk
momumi did a bunch of work towards x86 assembly / machine code generation in zig

1581287897
andrewrk
with this branch, my fledgling zig-window project (

1581287906
andrewrk
sorry I switched topics back to async again ^

1581287931
andrewrk
the automatic file-system-stuff-on-separate-thread is working

1581287964
pixelherodev
That's actually amazing

1581287977
pixelherodev
What's the risk of something going wrong because of the threading?

1581287990
pixelherodev
Or, to put it differently, is the behavior identical to systems that support non-blocking I/O natively?

1581288013
andrewrk
forgot to add, this is all with 0 uses of the following keywords: async, await, suspend, resume

1581288053
pixelherodev
There a way to have build.zig emit only LLVM IR instead of a binary?

1581288061
pixelherodev
Wanting to add generation of the test IR to build.zig

1581288066
andrewrk
the behavior is basically identical to if you coded this in go

1581288114
andrewrk
pixelherodev, build.zig API doesn't yet support --emit cli flag. PR is welcome

1581288124
pixelherodev
And will be received soon :)

1581288331
pixelherodev
Should that be as an option to LibExeObjStep?

1581288340
andrewrk
just a heads up I might adjust the API a bit when merging; I have some plans to update the CLI syntax related to --emit (but I don't want to break godbolt)

1581288349
andrewrk
yes it should

1581288358
pixelherodev
Yeah that's fine

1581288475
pixelherodev
IR should be a different Kind, like Exe or Obj? Or should it be an option that can be applied to all types?

1581288495
pixelherodev
That is, should it be `builder.addLLVMIR` or `builder.addExecutable .... e.setOutputType(IR)`? Or...?

1581288549
andrewrk
the plan is to add a new cli flag: -femit-llvm-ir which does everything else, and additionally outputs a .ll file

1581288560
andrewrk
--emit will then be deprecated

1581288580
andrewrk
you could do for example `-fno-emit-bin -femit-llvm-ir`

1581288595
pixelherodev
So that's basically just the existing --verbose-llvm-ir?

1581288601
pixelherodev
Except it writes to a file

1581288633
pixelherodev
Gotcha, okay; this PR should use that flag?

1581288645
andrewrk
it's a bit different. it affects this code:

1581288659
andrewrk
rather than a switch, the plan is that all 3 things could be separately toggled

1581288700
pixelherodev
PR should use the -femit-llvm-ir flag then?

1581288736
pixelherodev
Heck, might as well add three bools to the step at once; asm, bin, and ir

1581288797
andrewrk
exactly

1581288831
andrewrk
remove g->emit_file_type; main.cpp can translate "--emit" cli into the other 3 things

1581288857
andrewrk
after godbolt accepts a PR to update to the new syntax, we can drop the old one

1581288923
pixelherodev
Should the verbose-llvm-ir option be removed from LibExeObjStep?

1581288954
andrewrk
no, that's for debugging the compiler

1581288969
pixelherodev
Has the same effect as emitting the LLVM IR though, doesn't it?

1581288973
andrewrk
no

1581288974
pixelherodev
(except for where it's emitted)

1581289000
pixelherodev
What's the difference between `--verbose-llvm-ir 2>&1 >ir.ll` and `--emit llvm-ir --name ir`?

1581289029
andrewrk
the flag possibly prints more than one codegen (depending on what is cached), and pre and post optimization

1581289038
pixelherodev
Gotcha

1581289061
andrewrk
but more importantly the intent is different

1581289081
andrewrk
--verbose-llvm-ir is for debugging the compiler. -femit-llvm-ir is for getting a .ll file that represents the output of the compilation

1581289199
pixelherodev
Alright, build.zig patch done, just patching that codegen section and adding supporting for the `-f{no,}emit-{asm,bin,llvm-ir}` flags

1581289204
pixelherodev
s/supporting/suppor

1581289205
pixelherodev
t

1581289387
mikdusan
how about: `zig pipline -in foo.zig -emit exe,lex,ir0,ir,ll,bc,asm,obj -in bar.o -in baz.ll -lib c --trace lex,ir0,ir`

1581289448
mikdusan
*pipeline

1581289903
pixelherodev
andrewrk, what should resolve_out_paths do?

1581289912
pixelherodev
Binary path (if bin generation isn't disabled)?

1581290390
pixelherodev
Current logic uses binary path, asm path, and llvm path if none of the preceding types are being emitted

1581290415
pixelherodev
That is, if emitting binary, use binary output path; otherwise, if emitting asm, use asm output path; otherwise, if llvm IR is being emitted, use its path

1581291048
pixelherodev
Alright, just doing a bit of testing, but I think it's good

1581292454
pixelherodev
Okay, it works, but the `install` step can't be used on the IR

