1584921874
andrewrk
:)

1584922693
Snektron
Every time i write C i find myself missing it

1584922796
ifreund
try, defer, and errdefer alone make me never want to start a new project in c again

1584923802
andrewrk
the CI is green for the llvm10 branch

1584933328
plumm
andrewrk: really quick, do you like sourcehut builds or azure pipeliens better?

1584933699
andrewrk
azure pipelines is better because they give us 6 hours and ~8 GiB RAM. source hut is better because it lets you ssh in after a failed build, and it's open-source and not owned by microsoft

1584934049
plumm
okay, so it seems that if resources aren't really a requirement sourcehut is just the better alternative… thanks!

1584934436
andrewrk
plumm, oh, one more benefit of azure, is that it has windows and macos support

1584934446
andrewrk
but if you don't need that, then yes, I would recommend sourcehut

1584934472
plumm
yeah, mainly linux+musl stuff for work; does sourcehut have caching support?

1584934993
andrewrk
I'm not aware of it. zig uses wget on a manually created .tar.xz file for the cache

1584935034
plumm
bah, the reason we're switching from github actions is because they have terrible caching support; seems like azure is the way to go on this one, thanks for your insight though!

1584935096
andrewrk
I also am not aware of any caching that azure provides. on azure zig does the same thing: wget a .tar.xz file

1584935117
plumm


1584947673
euantor
I believe sr.ht is/has been planning caching support

1584952780
Kingsquee
where is the compiler's code for the u#/i# fanciness

1584952808
Kingsquee
I found the definition of integer in all_types.hpp but haven't found any implementations

1584952943
Kingsquee
I ask because I'm playing with ways of hopefully compressing/decompressing signed integers into the minimum number of bits, like 0 -> 00, 1 -> 01, -1 -> 11 without branching

1584953407
mq32
Kingsquee:

1584953418
mq32
you can just use @Type to forge your own integer types at comptime

1584953450
Kingsquee
mq32: yeah I know, I've been playing with that too

1584953478
Kingsquee
but I'm just curious on the technicalities of how zig would handle ops on a u2/i2

1584953518
mq32
afaik that's just an LLVM feature

1584953523
mq32
so you declare a register u2

1584953526
mq32
and LLVM does the magic

1584953782
Kingsquee
...does a u2 actually use two bits then?

1584953791
Kingsquee
or does it just wrap a u8

1584953877
Kingsquee
is there some way to inspect the binary of a zig type?

1584954256
TheLemonMan
Kingsquee, LLVM expands the result to the type ABI size, performs the op on that and then chops the extra bits

1584954285
Kingsquee
hm

1584954293
TheLemonMan
every type has a "size" (in bits, eg i2 -> 2) and a ABI size (in bytes, eg i2 -> 1 byte)

1584954309
Kingsquee
can't

1584954329
Kingsquee
which is the part that's perplexing me for my little brain twiddle

1584954356
Kingsquee
doesn't seem to be a branchless way to convert from a -1i8 to/from a -1i2

1584954373
TheLemonMan
sign bit? everything's using two complement

1584954396
TheLemonMan
-1'i8 => 0xff and -1'i2 => 0x03 ?

1584954505
TheLemonMan
pixelherodev, check out master, I've sent a PR to fix your problem with the stack traces

1584954507
Kingsquee
MSB is only set when value is negative so I'm being very fluffy with my terminology

1584954716
TheLemonMan
so...are you using the sign+magnitude format?

1584955805
Kingsquee
TheLemonMan: sorry, brain fart, realized I was forgetting about signed righ-shift behaviour

1584955812
Kingsquee
this is what I was trying to do

1584955910
TheLemonMan
yeah, arithmetic right shift is the fastest way to sign-extend your value

1584967701
plumm
mikdusan: what were the env vars i had to unset to build on mac OS again? promise this till ill write them down Search Results

1584967704
plumm
Web results

1584967707
plumm
😭

1584967712
plumm
damn wth

1584967839
plumm
seems like it was CXX and CC

1584974388
frmdstryr
Can I selectively import a file?

1584974522
ifreund
pretty sure thats as simple as putting your @import in an if statement

1584975370
mikdusan
plumm: yup; unset CC; unset CXX; setting either of those to a non-absolute "clang" | "clang++" will break building zig.exe

1584976095
pixelherodev
TheLemonMan, Thanks!

1584976100
pmwhite
frmdstryr: comptime block, right? I don't think toplevel if statements work, but could be wrong.

1584976207
frmdstryr
A combination of switch and concat to the string passed to @import as ifreund mentioned seems to be working

1584976620
fengb
Note that importing dynamic strings will be removed soon™:

1584977286
mikdusan
I'm not sure how I feel about #2206

1584977361
frmdstryr
Yeah it doesn't work very well for what I'm trying to do either, unless I use `usingnamespace` which I'd rather avoid

1584977401
andrewrk
2206 gives zig tooling the property that it can correctly find all the source files that belong to a given compilation without doing semantic analysis

1584987827
TheLemonMan
andrewrk, why is Thread.spawn handling the whole stack allocation business even when we're using pthreads?

1584987892
andrewrk
TheLemonMan, because of future plans for zig to know upper bound stack size of functions

1584987911
andrewrk


1584987911
TheLemonMan
roger that

1584987969
andrewrk
llvm makes this a bit tricky, but solving this is going to be a key point of zig's strategy for safety/correctness with regards to stack overflow

1584988065
TheLemonMan
eh tbh I don't think that's possible at all, the effective stack usage is determined after the codegen is done

1584988078
TheLemonMan
and that's if you don't take into account alloca and friends

1584988421
andrewrk
that makes it possible, but not a "comptime" value - the stack size would be a relocation like anything else

1584988494
andrewrk
alloca is not allowed in zig; external functions will be annotated (with a default) stack size that they expect to have available when called, safety checked when called

1584988527
andrewrk
there is good reason to be skeptical of this working smoothly. I agree we will likely run into problems. but I still think it's worth a try

1584988667
mikdusan
blah: llvmorg-10.0.0-rc6

1584988705
TheLemonMan
yeah that's the spirit, innovation and experimentation is always good

1584989113
andrewrk
mikdusan, ah, you saw it before I did. damn, I have this blog post ready to go out and everything

1584990706
TheLemonMan
andrewrk, speaking of threads, what do you think about always allocating some TLS state?

1584990775
TheLemonMan
the idea is to stash there some infos we need w/o having to do one more syscall (think of thread ID) and to enable the stack protectors

1584992102
andrewrk
I think we should consider carefully before introducing a dependency on TLS

1584992120
andrewrk
but I'm not necessarily against it

1584992209
andrewrk
I don't fully understand this particular use case

1584992231
andrewrk
what does TLS have to do with stack protectors?

1584992287
andrewrk
looks like LLVM is now planning to tag 10.0.0 tomorrow

1584992362
TheLemonMan
cookies are per-thread and are stored in the TLS

1584992623
companion_cube
is there an interface for iterators yet?

1584992631
companion_cube
(with a loop syntax)

1584992789
fengb
No but the de facto pattern is `var iter = thing.start(); while (iter.next()) |item| {`

1584992910
traviss
i just built mpfr with drop-in zig cc. no issues. nice job!

1584993211
andrewrk
TheLemonMan, I do think it would make sense that we would have the concept of whether a target supports TLS. for some targets, they clearly do, and we could take advantage of it at virtually no cost

1584993253
companion_cube
fengb: that's a bit sad :p

1584993254
TheLemonMan
oh well, the only place where that matters is linux w/o libc

1584993272
TheLemonMan
glibc and musl already allocate TLS unconditionally

1584993287
TheLemonMan
and bare-metal targets are out of scope here

1584993305
andrewrk
yeah that's what I mean; I do think it's ok to depend on TLS there

1584993346
andrewrk
iterator interfaces drive me nuts. I love that zig doesn't have one

1584993388
fengb
With capture and optional, I'm inclined to agree

1584993398
andrewrk
just do the thing. why you gotta make a big performance art out of it

1584993449
fengb
I do slightly wish we could do `for (thing.start())` just to save that one line >_>

1584993493
andrewrk
you can save as many lines as you want, just delete the line breaks

1584993509
fengb
zig fmt says no

1584993518
ifreund
zig fmt is god

1584993530
andrewrk
oh yeah! I forgot we deleted that excuse I just made

1584993544
companion_cube
:DDDD

1584993564
companion_cube
I mean, it's very natural to have that in a language

1584993576
ifreund
honestly the only thing that bugs me about the current state is that the iterator/counter variable is valid outside the scope of the loop

1584993576
andrewrk
excuses?

1584993593
andrewrk
it's perfectly reasonable to introduce an additional block scope

1584993604
andrewrk
but that goes for all variables, not just loop counters

1584993632
ifreund
fair enough

1584993667
companion_cube
but then each loop is 2 scopes deep

1584993750
andrewrk
{var i: usize = 0; while (i < 10) : (i += 1) {

1584993755
andrewrk
}}

1584993760
andrewrk
maybe zig fmt should allow this

1584993795
fengb
🙃 `while (var i: usize = 0) : (i < 10) : (i +=1 ) {`

1584993807
andrewrk
what if you want 2?

1584993838
fengb
Comma operator right?

1584993914
andrewrk
that's not even fewer characters than mine

1584993960
andrewrk
you want special syntax so that you can make 2 extra keystrokes?

1584993992
fengb
I'm joking... it's basically the C syntax

1584994017
andrewrk
you're joking but you represent a non-trivial amount of people who aren't joking

1584994091
ifreund
the comma operator is horrible

1584994144
mq32
andrewrk: I'd be happy to see an option to not spill an iterator variable as well

1584994164
mq32
but it's not a "must have", but a low would-be-cool

1584994180
companion_cube
more readable, less error prone

1584994187
mq32
the last point is the thing for me

1584994203
mq32
if i don't spill the variable into the outer scope, i can prevent accidental usage

1584994211
companion_cube
same flaw as python

1584994213
mq32
makes code reviews a lot easier

1584994259
andrewrk
I will concede that in practice, with zig's while vs C's for, iteration variables do end up spilling more often, which is undesirable

1584994344
companion_cube
`while (var x = iter.start()) : (…) {…}` would do I guess

1584994388
mq32
companion_cube: i immediatly don't like it because it's not clear what the condition is

1584994577
traviss
is there a proposal for `if (var x = 1; x < 10)` ?

1584994668
fengb
Random thought, what about leveraging a `with` expression? `with (foo.start()) |iter| while (iter.next()) |item| {`

1584994686
fengb
Maybe not... looks like line noise after I typed it out

1584994840
traviss
i like andrew's suggestion of zig fmt putting it on one line

1584994846
mikdusan
nospill.zig:

1584994921
ifreund
declaration after the loop condition feels really weird

1584994938
fengb
It's like K&R C 🙃

1584994942
mikdusan
heh

1584995291
ifreund
I think I'm about to implement a DoublyLinkedList for my project, is that something that would be wanted in the standard library as well?

1584995339
BaroqueLarouche
do you really need a Double linked list ? It is not very cache friendly

1584995355
fengb
It already exists:

1584995365
ifreund
that's singly linked

1584995383
ifreund
BaroqueLarouche: I'm aware of the issues with linked lists, I need pointer stability however

1584995421
fengb
No... it has both prev and next

1584995425
fengb
For a time, we only had doubly linked list. The single one was added later

1584995445
ifreund
oh wait, TailQueue... that's an odd name for a doubly linked list

1584997335
marijnfs
to remove from an array_list you use orderedRemove?

1584997420
ifreund
if you care about maintaining the order, yes

1584997537
marijnfs
i don't see a regular remove

1584997573
ifreund
marijnfs: the alternative is swapRemove()

1584997612
ifreund
which is O(1) since it doesn't need to shift the elements after the removed element

1584997641
marijnfs
i was trying to figure out what it does

1584997646
marijnfs
it moves the element to the end?

1584997684
marijnfs
ah it puts the end in there

1584997688
marijnfs
yeah that makes sense i guess

1584997689
fengb
It removes the current item and replaces it with the end

1584997695
marijnfs
yeah i can't read:P

1584997701
ifreund
it remove the element you want to remove, then if doing so left a hole, puts whatever was at the end in its place

1584997708
marijnfs
yeah makes sense

1584997711
fengb
Yeah, much faster. I didn't actually think about this approach until I saw it in Zig

1584997720
marijnfs
pretty funny idea

1584997824
fengb
Ever since college, I've just accepted O(n) removals in arrays. And this one is O(1)

1584997840
companion_cube
the one where you swap with the end?

1584997842
companion_cube
classic move ;)

1584997848
companion_cube
(but it doesn't preserve order)

1584997880
TheLemonMan
if the array is small enough the cost of a memmove is negligible

1584997885
fengb
It's obvious now... but I've been coding for 10 years and never noticed heh

1584998135
marijnfs
where  are string compare utils?

1584998220
fengb
std.mem.eql, std.mem.order, std.mem.lessThan

1584998531
marijnfs
fengb: thanks

1584998544
marijnfs
to iterate with an integer you have to define it before the while right?

1584998551
andrewrk
ifreund, I agree the name of TailQueue is odd. I think I'd like to put it back to DoubleLinkedList

1584998564
marijnfs
it gets a bit annoying as its in the scope

1584998675
ifreund
andrewrk: I can send you a PR sometime tonight/tomorrow if you like. I'm always down for some soild name bikeshedding :D

1584998833
andrewrk
you should have a chat with daurnimator first though, I believe he managed to convince me to change the name to TailQueue

1584998853
andrewrk
but every time I see the name I become less and less convinced

1584998999
ifreund
man 3 queue has some info

1584999152
ifreund
tbh daurnimator is right, what we have is a tail queue

1584999204
ifreund
if we removed the pointer to the last node it'd just be a doubly linked list

1584999254
ifreund
technically it's a doubly linked tail queue though, since you can have singly linked ones  as well

1584999360
ifreund
so, I guess I'd be for adding the doubly linked list and singly linked tail queue for completeness :D

1584999407
marijnfs
aren't linked lists in most cases quite slow? since your memory ends up all over the place

1584999432
ifreund
they have there uses, for example when pointer stability is required

1584999444
ifreund
O(1) ordered removal as well

1584999452
TheLemonMan
you can always preallocate many nodes in a contiguous slab of memory

1584999486
ifreund
s/there/their/    (i'm aweful at spelling)

1584999570
ifreund
so if I had my way with linked_lists.zig, we'd end up with SinglyLinkedList, SinglyLinkedTailQueue, List, and TailQueue

1584999798
andrewrk
marijnfs, there are tradeoffs in either case; it really depends on your use case. what linked lists do that arraylists cannot, is that linked lists can be "intrusive" which allows you to "bring your own memory" when putting a node in the list

1584999823
andrewrk
as an example, you can have a linked list with 3 nodes: 1 statically allocated, 1 allocated on the heap, and another allocated on the heap but with a different allocator

1584999880
andrewrk
particularly useful is when a linked list node is allocated as part of a function's @Frame()

1584999882
marijnfs
true, that sounds kinda nuts though:P

1584999895
marijnfs
ok then it makes more sense

1584999905
andrewrk
this is how std.event.Loop works without the possibility of failure

1584999913
andrewrk
I mean at least failure due to OOM

1584999960
marijnfs
i guess you can do it in an array_list with some type that takes care of the indirection

1584999988
marijnfs
ah you mean the whole node lives in some other memory

1585000072
andrewrk
yes. this is not possible with arraylist

1585000325
marijnfs
indeed

1585000652
jaredmm
Should the WinSock2 code be exposed in std/os/Windows.zig? Right now system.socket and etc on Windows don't exist.

1585000782
jaredmm
There's already some socket stuff there, so I assume yes, but I wasn't sure if there was a reason the std/net.zig usages aren't using the ws2 calls.

1585000866
andrewrk
I still need to learn how networking works on windows

1585000898
andrewrk
your best bet right now is making your own abstractions or using a c library

1585000929
jaredmm
My current abstract is about 15 defines inside an ifdef for Windows or *nix, lol

1585001020
marijnfs
zeromq might have some hints on how to do it?

1585001026
marijnfs
they got networking down pretty well

1585001064
companion_cube
libuv could be a good way to go

1585001139
jaredmm
Mine certainly isn't graceful. I've got macros defined for all the Unix socket functions that take in a file description and (on Windows) looks up a value in an array to get the SOCKET value (uint pointer).

1585001192
jaredmm
Then it just runs the WSA calls it needs to and everything seems like it works, so I don't look at it too closely.

1585001203
BaroqueLarouche
IIRC from my university course on networking, WinSock is basically UNIX socket but you need to call some extra functions to make it work

1585001247
jaredmm
Yeah, I think it was based on BSD code or something like that. There's some extra init/cleanup that gets defined away as well.

1585001415
ifreund
is there a way to debug assert that all memory in a struct is defined?

1585001541
TheLemonMan
Trumpet Winsock

1585001582
ifreund
well I'm not sure if that's technically possible ouside of some kind of compiler magic

1585001627
ifreund
nothing stops me from assigning 0xaa to things

1585001764
andrewrk
hmm one could wrap libuv with zig APIs using async/await and that would work pretty well

1585001814
andrewrk
ifreund, even better - assign undefined to things. it will assign 0xaa in the appropriate modes as well as put metadata there that makes tools such as valgrind aware that the bytes are undefined

1585001852
TheLemonMan
ifreund, the valgrind module lets you declare arbitrary chunks of memory as defined/undefined

1585001875
andrewrk
even better though, @memset with `undefined`

1585001882
andrewrk
or assign the struct directly

1585001947
ifreund
i'm aware of `undefined` in zig and that zig puts 0xaa in everything in debug mode

1585001977
andrewrk
it would be possible to add a language builtin that detects if a value is undefined. it would have false negatives but no false positives

1585001989
ifreund
i have a struct that is initialized = undefined and is then later assigned data to all of its fields

1585002000
andrewrk
some planned safety features will use this builtin internally

1585002003
ifreund
i was looking for a way I could assert that every field has been assigned a value

1585002061
andrewrk
I was thinking about the same problem recently. I haven't come up with a solution yet

1585002087
andrewrk
we have the ability to put a secret field in structs to detect undefined, but yes the question is when would it get set

1585002127
andrewrk
maybe `x = undefined` would be distinct from `x = .{ .every_field = undefined}`

1585002159
ifreund
hmm, that sounds confusing. I'd argue those should be equivalent

1585002225
ifreund
i'd say the secret field should only be set to "struct is defined" once all fields of the struct have been assigned something that isn't `undefined`

1585002311
daurnimator
ifreund: "tail queue" is what doubling linked lists are called in C

1585002335
daurnimator
ifreund: see /usr/include/sys/queue.h

1585002356
ifreund
daurnimator: yeah I found the man page for that

1585002364
ifreund
i'm 100% with you

1585002541
ifreund
it is a little more nuanced than "tail queue is the C word for doubly linked list" though

1585002587
daurnimator
yeah there's also circular doubly linked list

1585002617
daurnimator
and then you'll find LinearFifo... which is what you actually want a lot of the time (if you're not using intrusive linked list or your list items aren't variably sized)

1585004236
tdeo
is there another name for the std.SegmentedList data structure? it's really useful but i can't find anything online about it

1585004275
tdeo
(writing some rust with Pin and wondering if anyone has made something similar, actually)

1585004356
mq32
andrewrk: i just had a random thought crossing my mind

1585004376
mq32
is it possible to use std io APIs in non-blocking/async mode when writing a library?

1585004425
andrewrk
a zig package right? as opposed to libfoo.so

1585004442
mq32
no, a lib with C api

1585004456
mq32
so something like "lib_open(), lib_pumpEvents(), lib_close()"

1585004462
andrewrk
tdeo, I'm not aware of anything. I sort of just had the idea of that data structure and coded it up one day. I didn't read any articles about it

1585004520
andrewrk
mq32, ah, yes, if the C library exposes certain kinds of abstractions, then it's possible to wrap it with a zig API that integrates an event loop

1585004544
mq32
hmm

1585004549
andrewrk
related:

1585004555
mq32
but the core design right now is to have exactly one main loop, right?

1585004630
andrewrk
right, but you can't really help what goes on on the other side of the C ABI boundary

1585004653
mq32
yeah, i know

1585004684
mq32
i'm asking because i write a library atm that has a non-blocking thread with pselect

1585004690
mq32
and doing all the async stuff by-hand

1585004739
mq32
and i wondered if i could utilize zig async in this case

1585004779
andrewrk
you should be able to, I think

1585004795
mq32
yeah, maybe

1585004807
andrewrk
as long as there is no suspension point in a function with the C calling convention, it will work just fine

1585004816
andrewrk
(you would get a compile error in that case)

1585004819
mq32
i still have problems grasping the basic functionality of suspend/resume

1585004862
mq32
or let me rephrase

1585004878
mq32
i have understood suspend/resume, but not how async/await interact with these two

1585004972
mq32
maybe you can explain or correct me, i'm trying to tell what i got so far :D

1585004973
andrewrk
to help simplify your intuition about it, you can think of `async` as a "fork" in control flow; one goes into the function, and one skips right past it and keeps going on the next line of code

1585004982
andrewrk
`await` "joins" the forked control flow back together

1585004991
mq32
yeah i got the high end functionality

1585004997
mq32
and how to use it in general code

1585005005
mq32
but i want deep understanding before i start using such a feature

1585005028
mq32
so to my understanding:

1585005047
mq32
async is just a helper that will run the function to the first suspend, will then return to the caller

1585005070
mq32
the suspend will save the current state of all required locals in the frame as well as the instruction pointer

1585005089
mq32
i can later call resume on the frame and the function will continue executing after the suspend

1585005111
mq32
all correct so far?

1585005113
andrewrk
spot on

1585005123
mq32
👍

1585005129
mq32
now i have problems what async does

1585005134
mq32
i know it introduces a suspend point

1585005140
mq32
*await

1585005140
mq32
sorry

1585005164
mq32
so "await foo" will return to the caller of the current function?

1585005183
andrewrk
there are 2 possibilities, and that is one of them

1585005223
mq32
okay. The other possibility would be "the frame is completed and await will return the value of the function"?

1585005234
andrewrk
yes

1585005271
andrewrk
`noasync await foo` asserts that the second possibility occurs, and therefore does not introduce a suspend point

1585005277
mq32
ah

1585005281
mq32
so await is something like

1585005288
mq32
var result = await frame;

1585005318
mq32
var blk: { while(not frame.done) { suspend; } break :blk frame.result; }

1585005318
mq32
?

1585005326
andrewrk
the first thing await does is an atomic rmw, putting the awaiter frame pointer on the awaitee's frame, the "who should I resume when I return" field. if the previous value was "I already returned" then it's the 2nd possibility. otherwise, it's the first possibility

1585005394
mq32
hmm

1585005396
andrewrk
likewise, the first thing an async function does when it returns, is an atomic rmw on the "who should I resume when I return" field. if it's a frame pointer, then it resumes (by tail-calling) them. otherwise it returns up the call stack

1585005568
mq32
i think i have to implement a fake-event-loop some day to get a grasp of it

1585005642
andrewrk
here's a small task you can accomplish in 20 minutes and get a grasp of it: make a simple program that lets you run a task in a different thread

1585005665
mq32
tomorrow then :)

1585005676
mq32
right now i'm too tired for that, 0:21 already

1585005683
mq32
should go to bed actually

1585005689
mq32
but thanks for your time :)

1585005690
andrewrk
do it! you'll feel great in the morning

1585005694
andrewrk
good night

1585005716
mq32
sure thing!

1585005725
mq32
and as soon as it makes click on async/await i'll be happy to use it

1585005767
fengb
Heh I’m actually the opposite. Await makes more sense to my silly JS brain and I have to think hard on how to make suspend/resume work >_>

1585005798
mq32
In heart, i'm an assembler coder in disguise :D

1585005819
mq32
I don't want to type assembler, but i want to know what instructions my compiler will emit

1585006176
jaredmm
Is there a way to capture the code that translate-c is failing to translate and output it along with the error?

1585006688
andrewrk
it should at least tell you the source file name and line number so you can look at it

1585006699
andrewrk
I thought we had that hooked up already

1585007173
jaredmm
It does, a bit. I'm getting some output like

1585007226
jaredmm
There's also a section of 12 duplicate definitions (just two underscores). `pub const __ = @compileError("unable to translate C expr: unexpected token Id{ .Invalid = void }");`

1585007379
jaredmm
(GetCurrentFiber is also declared twice in the pastebin). At first I assumed there was some weird preprocessor stuff happening.

1585007429
jaredmm
Those bits of code are dealing with unimplemented intrinsics, which I may implement, but I'd like to have it compiling minus the actual syscalls.

