1584749153
Snektron
its used in a few places throughout the std library

1584749167
Snektron
eh

1584749171
Snektron
matrix glitched

1584749275
fengb
Deja vu? ðŸ™ƒ

1584749416
ifreund
so, translate C should know how to do that I guess

1584749473
ifreund
unrelated, but is there currently a way to run an external program from within zig? something like `execl` in c

1584749493
ifreund
(can't use execl since the ABI is not yet supported)

1584750030
ifreund
ah looks like ChildProcess may be what I'm after

1584751036
mikdusan
ifreund: do you want to exec or spawn?

1584751204
ifreund
i want to fork() and execl() in c

1584751206
ifreund
so spawn?

1584751219
mikdusan
yes you want spawn

1584751237
mikdusan
are you looking to capture output?

1584751251
mikdusan
*stdout

1584751271
ifreund
no, don't really care

1584751446
mikdusan
oh wait I haven't looked at ChildProcess.exec* functions. they may not be "exec" in the posix-sense.

1584751604
daurnimator
ifreund: avoid fork()+exec() if you can: use posix_spawn...

1584751612
daurnimator
(in C that is)

1584751626
daurnimator
but also probably good advice for zig's ChildProcess module

1584751630
mikdusan
not a fan of exec2 impl. try spawn and you probably want to .Inherit stdout/stderr unless desire is to hide output

1584751634
daurnimator
(at least when libc is linked)

1584751763
mikdusan
daurnimator: are you a heavy archlinux user?

1584751974
ifreund
daurnimator: yes I'm aware that posix_spawn() is the way to go in more modern c, was looking for something convienent in the zig std though

1584752739
daurnimator
mikdusan: yes

1584752786
mikdusan
gotta say... installed archlinux for sole purpose of building/debug zig... and it's really painless to keep archlinux updated.

1584752794
daurnimator
ifreund: yeah ChildProcess..... it does need a nonclemanture cleanup though

1584752813
daurnimator
mikdusan: gonna be a full time convert? :)

1584752819
shakesoda
mikdusan: just let it not be updated for a while, and things become increasingly hellish

1584752830
mikdusan
heh if macOS restricts command-line binaries any more, I might have to bail

1584752835
daurnimator
shakesoda: as long as you update once every 4 years or so you'll be fine

1584752849
fengb
Iâ€™ve only had like 2 breaking changes since running Arch. And 1 of them was telegraphed well in advance (systemd)

1584752872
shakesoda
pacman has hosed a system or two of mine and i've sworn it off for keeps

1584752880
fengb
Eh, just donâ€™t try a partial upgrade and things generally work. Iâ€™ve had years of out of date

1584752887
mq32
fengb: Yeah, arch is surprisingly stable for what people tell about instability

1584752903
ifreund
yeah arch has been super stable for me

1584752903
daurnimator
I've got one arch system originally installed in 2008 and it still just keeps coming along

1584752946
fengb
The other time was smbd changed its systemd names and I wasnâ€™t aware. That was a bit annoying since things mostly worked

1584752952
mq32
i had two breaking experiences with arch. One wasn't the fault of arch, it was just the package maintainer was like "hey, let's break everything from 2.0 to 3.0 and don't provide config migration"

1584752975
mq32
the other one was my stupidity of having a power loss on updating the kernel + modules

1584752986
mq32
the power loss happened between "deploy new kernel" and "deploy new modules"

1584752998
ifreund
fun

1584753004
mq32
it was an adventure fixing this :D

1584753010
mikdusan
I am getting tired of short power outages these days. May actually invest in a 5-minute UPS.

1584753013
ifreund
no fallback kernel?

1584753027
mq32
not at this time :D

1584753242
fengb
Has anyone used VoidLinux?

1584754098
Nilium
fengb: I use it.

1584754248
hazeycode
if (std.cstr.cmp(layerName, &layerProperties.layerName) == 0)

1584754259
hazeycode
produces error: expected type '[*:0]const u8', found '*const [256]u8'

1584754286
hazeycode
im so confused about strings, can anyone help me?

1584754386
daurnimator
hazeycode: they changed just a couple of days ago. various bits will need to catch up

1584754388
fengb
Zig doesnâ€™t think one of them is 0 terminated

1584754416
daurnimator
hazeycode: what is the type of `layerProperties.layerName`?

1584754431
hazeycode
apparently the type is *const [256]u8

1584754441
hazeycode
it's from a c header

1584754560
daurnimator
hazeycode: zig has no way to know that its null-terminated: if the library is documented to do so then you could cast it.

1584754600
daurnimator
hazeycode: `@ptrCast(*const [256:0]u8, &layerProperties.layerName)`

1584754657
daurnimator
or I guess it would be 255:0?

1584754672
hazeycode
makes sense! thanks

1584754681
hazeycode
256:0 worked!

1584754705
fengb
Why not [*:0]const u8? Might be early terminated

1584754733
daurnimator
fengb: yeah I was thinking that... depends if its zero extended or just the one null terminator

1584754759
hazeycode
it probably will be early terminated

1584754772
hazeycode
but *:0 produces error: cast increases pointer alignment

1584754808
fengb
wat, u8 alignment should be 1

1584754824
daurnimator
hazeycode: shouldn't... did you write: `@ptrCast([*:0]const u8, &layerProperties.layerName)`?

1584754874
hazeycode
daurnimator: I did not, that works just fine :)

1584754879
hazeycode
my bad

1584754982
hazeycode
really loving zig, except for all the different pointer types. I get the point, and maybe I'll get used to it but it's quite a faff

1584755011
fengb
Itâ€™s a pain working with C because it just doesnâ€™t care

1584755033
daurnimator
hazeycode: zig's priority isn't intended to be easy to write: its supposed to be easy to debug and read.

1584755046
shakesoda
fengb: but that's the best thing in c

1584755054
shakesoda
it just doesn't give a crap

1584755154
hazeycode
yeah I'm down with the principles of zig, just the c interop is quite painful for me at times

1584755194
daurnimator
hazeycode: you might notice how the @ptrCast is "loud" it explains that this is something that is just documented behaviour of the library and might not necssarily be true

1584755226
daurnimator
that should jump out at a reviewer and suggest they go verify that it

1584755266
fengb
Buffer overrun is quite common in C :P

1584755301
daurnimator
if not true: you probably have a buffer over-read bug (which can be a cause of information leakage like heartbleed)

1584755534
hazeycode
yeah it's a cool feature for sure! I'm just having teething pains :)

1584755604
shakesoda
you get used to the pointer stuff reasonably quickly once you start building things instead of just doing interop

1584755628
shakesoda
it's never as bad as when you're trying to interface with some crazy translated c stuff, heh

1584755681
hazeycode
although I have to say, I went back to C from Rust for stuff I typically do, because C doesn't care and I can get stuff done haha

1584755702
fengb
Well Rust cares too much >_>

1584755714
hazeycode
In fact I've gone back to C from everything else. I think Zig might be the one :D

1584755717
shakesoda
yeah rust is

1584755746
shakesoda
also, it inherited too many of c++'s ways to hide what is actually happening.

1584755771
hazeycode
and its compile times !!!!

1584755778
hazeycode
:D

1584755784
shakesoda
heh, that too

1584755807
shakesoda
I do think it's reasonably designed and better for the world than c++ is, but it's just really frustrating

1584755815
fengb
I like Zig because itâ€™s just the right kind of anal >_>

1584755829
hazeycode
:eyes:

1584755831
shakesoda
zig has the right balance, a lot more aligned with the things I care about

1584755836
andrewrk
it will be really good after we can merge anal dumps

1584755848
shakesoda
oh

1584755908
mikdusan
btw when we do stage2 cli driver, let's consider "-###" option

1584755911
fengb
When I have some friction, itâ€™s usually because Iâ€™m doing something no type system could represent or itâ€™s actually ambiguous

1584755932
andrewrk
mikdusan, "Print (but do not run) the commands to run for this compilation" ?

1584755936
mikdusan
aye

1584755972
mikdusan
i get that zig doesn't spawn much but I still like dry-runs

1584755985
mikdusan
and what in the hell. first "anal dumps" and no "dry runs". I mean what am I discussing here.

1584755991
mikdusan
*now

1584755992
andrewrk
hmm. you can kinda get that with --verbose-cc --verbose-link -fno-emit-bin

1584756006
hazeycode
brb, need more toilet paper

1584765887
pixelherodev
Sorry about bumping the issue count above 1000 :P

1584766800
shakesoda
ah, yes: attempt to bufPrint -> break the compiler

1584766814
shakesoda
how dare i have the audacity to try to format...

1584766822
shakesoda
a u32

1584767022
mikdusan
lies!

1584767024
shakesoda
the actual issue was something to do with re-slicing the buffer into a null terminated thing, i just wrote it a different way and it's fine

1584767026
pixelherodev
I have a failure analyzing inferred error sets... :P

1584768478
andrewrk
i have it working

1584768485
andrewrk
zig cc as a drop in c compiler

1584768497
daurnimator
andrewrk: oooo, nice!

1584768510
daurnimator
with all args as described in the json thing?

1584768516
andrewrk
yes. good night

1584768562
daurnimator
night!

1584770657
shakesoda
andrewrk: sweet

1584770662
mikdusan
pixelherodev: where's the reduction for #4770

1584771892
shakesoda
hmm, symlink to zig binary can't find zig lib dir anymore

1584772027
shakesoda
had to put a symlink to that folder next to the other link (gross!)

1584772102
mikdusan
platform?

1584772201
shakesoda
linux

1584772221
mikdusan
where is zig root dir, and where is the binary symlink?

1584772267
shakesoda
~/opt/zig-whatever-revision-folder/zig is symlinked at ~/.local/bin/zig (which is in my $PATH)

1584772289
daurnimator
shakesoda: I have a similar setup. no issues.

1584772304
shakesoda
on latest revision?

1584772331
daurnimator
yep

1584772331
shakesoda
on the build I grabbed on monday it worked here, too

1584772341
shakesoda
latest doesn't want to play ball

1584772381
shakesoda
the workaround is easy, but it's kinda bizarre

1584772699
mikdusan
works

1584772733
mikdusan
0.5.0+153c6cf92

1584772928
mikdusan
I also have the other "style" working:  ~/.local/bin/zig -> /home/mike/opt/zig-linux-x86_64-0.5.0+153c6cf92/zig

1584772950
shakesoda
i wonder what's going on with my system then, it's nothing weird or different

1584772962
shakesoda
need to reboot for a kernel update anyway, maybe it'll go away like magic

1584773549
shakesoda
I found the problem

1584773579
mikdusan
/proc ?

1584773581
shakesoda
on this particular attempt, when I symlinked it I forgot the -s flag

1584773591
shakesoda
not... quite a symlink.

1584773615
shakesoda
haven't screwed that one up in years, must be too late for me :D

1584773680
mikdusan
yeah we can't cheaply find all hard links to the same inode

1584780807
TheLemonMan
pixelherodev, how the hell did you get a stack trace without any line infos?

1584781024
Snektron
<fengb "Has anyone used VoidLinux?"> I run it on my rpi

1584787395
marijnfs
how do you get the the type a pointer points to with meta/traits?

1584787853
TheLemonMan
marijnfs, meta.Child

1584788170
marijnfs
TheLemonMan: thanks

1584788210
marijnfs
i wanna add some serialization for [] types. The deserialization would need an allocator i guess, but would be really convenient

1584789623
frett27
hi, i wish to convert a pointer of arbitrary time to []u8, how can i do that ?

1584789696
ifreund
probably @ptrCast

1584789709
mq32
nah, there's a wonderful function for that

1584789719
frett27
ah ?

1584789724
mq32
std.mem.bytesAsSlice

1584789737
frett27
wonderfull !!

1584790951
frett27
mq32, does this make sens for you ?

1584790956
frett27
it compiles

1584790979
mq32
what do you want to do?

1584791016
frett27
i want to marshall a type for leveldb storage, and it the type is known, avoid the copy

1584791038
frett27
s/it/if/g

1584791051
mq32
fn toBytes(value: var) var // Given any value, returns a copy of its bytes in an array.

1584791060
mq32
you may searching for this

1584791064
mq32
or just use

1584791104
mq32
else just use

1584791109
mq32
var value = â€¦;

1584791204
mq32
var slice = std.mem.bytesAsSlice(@ptrCast([*]T,&value)[0..1]);

1584791319
frett27
mqt32, the function size shrinks :-)  using asBytes

1584791384
frett27
in the given example, "[0..1]" returns a slice, but bounded 2 bytes, and does not preserve the struct size isn't it ?

1584791398
frett27
this is fine to C passing

1584791405
frett27
but just want to know

1584791451
mq32
both preserve the struct size

1584791457
mq32
the one creates an array copy of the value

1584791465
mq32
the other one creates a slice that

1584791580
frett27
if i understand correctly, asByte does not return a copy, it does a ptrCast

1584791619
TheLemonMan
yes, the returned slice alias the original value

1584791626
mq32
ah yes

1584791632
mq32
i messed up with "toBytes"

1584791637
frett27
ok, bytesAsSlice does the copy

1584791651
mq32
i should add some

1584791675
TheLemonMan
bytesAsSlice doesn't copy either

1584791680
mq32
bytesToSlice was a builtin previously, right?

1584791684
TheLemonMan
yep

1584791725
frett27
in bytesAsSlice, the return value is :

1584791729
frett27
return @ptrCast(cast_target, bytes)[0..@divExact(bytes.len, @sizeOf(T))];

1584791761
TheLemonMan
it's again a view over the original `bytes` slice

1584791767
TheLemonMan
slices don't own any memory

1584791798
frett27
ok, make sense

1584798249
Barabas
Hello

1584798722
Barabas
I had some update for visual studio and I updated my zig to some newer version. I don't know which one caused the issues, but I'm getting linker errors about libcmtd.lib, libvcruntimed.lib, legacy_stdio_definitions.lib, OLDNAMES.lib

1584798804
Barabas
Hmm....

1584799103
Barabas
I swear I saw something about not including system paths anymore or something, but I can't find it

1584799221
Barabas
Oh that was this:

1584799352
Barabas
Although maybe it's related still... =|

1584799881
Barabas
Ok, the zig version I was on before also doesn't seem to work anymore... I guess it's the visual studio upgrade. I bet they changed directories so nobody can find the stuff they need. (as usual)

1584800057
Barabas
Nope, time to cry in a corner.

1584800817
companion_cube
> andreas kling starred ziglang/zig

1584800819
companion_cube
oh yeah!

1584801277
andrewrk
oh that's the serenity os guy

1584801306
companion_cube
yep

1584801974
ifreund
would it be possible to add @cImport support for flexible arrays in structs?

1584801977
ifreund
e.g.

1584802413
Barabas
Is anyone here on windows?

1584802737
andrewrk
me

1584802776
Barabas
I somehow get linker errors when trying to link 'c'

1584802791
andrewrk
more details?

1584802800
Barabas


1584802995
andrewrk
Barabas, you can try targeting `native-native-gnu` which will use mingw-w64 instead of msvc. it has a compatible ABI

1584803022
andrewrk
that avoids the dependency on msvc installation entirely

1584803158
pltrz
hello, world!

1584803176
pltrz
just been checking out zig for the first time, in the last couple days :)

1584803192
pltrz
very neat

1584803240
andrewrk
welcome, pltrz

1584803250
Barabas
andrewrk how do I do that? I tried `zig build test -target native-native-gnu` but that doesn't recognize `-target`

1584803288
pltrz
thanks to all your great work, andrewrk and contributors

1584803298
ifreund
Barabas: if you're using a build.zig you'll need to put it in there

1584803301
Barabas
and I didn't see how to do it in the build.zig itself

1584803440
ifreund
Barabas: ah try -Dtarget=....

1584803442
andrewrk
Barabas, I suggest to use: const target = b.standardTargetOptions(.{ .default_target = .{ .abi = "gnu"}}); foo.setTarget(target);

1584803468
andrewrk
for bonus points you can have different default targets depending on what host OS the person is running zig build on

1584803767
Barabas
ok that does something

1584803819
Barabas
lol

1584803840
Barabas
now it tries to do something silly `lld: error: could not open 'libE:/Libraries/glfw/build/src/Release/glfw3.a': invalid argument`

1584803872
TheLemonMan
that's a weird library indeed

1584803888
andrewrk
I think you are calling linkSystemLibrary when you should call addObjectFile

1584803917
andrewrk
or... is this zig's integration with vcpkg gone wrong?

1584803944
Barabas
it used to work

1584803960
Barabas
and indeed I use `linkSystemLibrary`

1584804080
Barabas
It does seem to do the right thing for user32, gdi32 and shell32 though

1584804102
pixelherodev
TheLemonMan, the patch you sent doesn't work

1584804105
pixelherodev
Thanks though

1584804121
Barabas
OH MAN

1584804135
Barabas
If I use `addObjectFile` I'm back where I started

1584804157
andrewrk
Barabas, .a files are different than user32, gdi32, shell32

1584804163
Barabas
Or well

1584804167
TheLemonMan
pixelherodev, I'm more interested in knowing why your stack traces are missing the line infos heh

1584804181
TheLemonMan
is your code available somewhere?

1584804202
frett27_
using mem.asBytes does not return error, when the parameter is an access type

1584804212
frett27_
is that's legal ?

1584804227
frett27_
returning the address is probably no sens ?

1584804378
TheLemonMan
frett27_, what do you mean with "access type" ?

1584804392
frett27_
pointer on a pointer type

1584804400
frett27_
passed in asbytes

1584804415
frett27_
in my case i passed a pointer to []u8

1584804437
TheLemonMan
asBytes peels a single indirection layer

1584804500
frett27_
can i test if the given type (comptime) is a pointer ?

1584804521
frett27_
or an array slice ?

1584804536
frett27_
i can't find info on @TypeInfo members

1584804562
Barabas
I updated the issue with my progress...

1584804606
pixelherodev
TheLemonMan, yeah

1584804619
andrewrk
Barabas, linkSystemLibrary does not accept full paths (the API should be improved to reject the input more clearly)

1584804621
pixelherodev
Code is on SourceHut, and I want to know why lines are missing too

1584804688
pixelherodev
git@git.sr.ht:~pixelherodev/ziggirat

1584804695
andrewrk
Barabas, you need to addLibPath to give the directory, and linkSystemLibrary if it is a DLL; otherwise give the absolute path to addObject

1584804706
pixelherodev
That's slightly out of date but the error occurs on there too so it's good enough

1584804708
Barabas
ok

1584804731
andrewrk
oh I see you do this in the bottom snippet

1584804757
Barabas
Yes, it just has more dependencies somehow which it tires to find as .a files?

1584804783
Barabas
I'm really not sure what's going on at this level :P

1584804942
TheLemonMan
frett27_, check out std.meta.trait

1584804991
TheLemonMan
pixelherodev, I'll check it out asap

1584805005
frett27_
TheLemonMan, thanks

1584805020
andrewrk
Barabas, hmmm. I'm not sure what's pulling in those .a files. can you add --verbose-link to your `zig build` command?

1584805058
andrewrk
I suspect that LLD got too smart for its britches and thinks it should do some kind of mingw thing

1584805073
pixelherodev
TheLemonMan, huge thanks

1584805084
pixelherodev
If you get it working, I'd love to know how you went about debugging it

1584805096
pixelherodev
(Like I mentioned, I can't get it reduced)

1584805104
pixelherodev
And I have no idea what's wrong with my stack traces :(

1584805181
Barabas
not sure if I should paste it here so I put it in the issue

1584805206
andrewrk
Barabas, ah, ok it looks like -lldmingw is the culprit, let me try to think why that would get put there

1584805207
Barabas
it does mention mingw

1584805268
andrewrk
I wonder if this is a regression after updating to mingw-w64 7.0.0

1584805286
andrewrk
Barabas, thanks for the report. I'm going to try to reproduce this issue and solve it

1584805287
TheLemonMan
pixelherodev, does the test-stack-traces pass for you?

1584805303
Barabas
Thanks for looking into it :)

1584805356
Barabas
I also would like to know why it suddenly doesn't find the standard msvc libraries anymore

1584805554
Barabas
Oh... it does work if I run it from the `x64 Native Tools Command Prompt for VS 2019`

1584805570
Barabas
(Without specifying gnu)

1584806469
Barabas
My bad for not trying that earlier. I did kinda try it, but with powershell which doesn't really work :P

1584807379
mikdusan
so why do zig executables export 40,000+ "weak def" symbols (on macos,linux,freebsd) ?

1584807565
TheLemonMan
that's compiler_rt

1584807589
TheLemonMan
oh 40,000... that's a lot

1584807610
TheLemonMan
do they have names?

1584807678
mikdusan
big numbers come from llvm::*, lld::*

1584807731
mikdusan
having them

1584807788
TheLemonMan
oh you mean in the compiler executable

1584807859
mikdusan
on macos I passed a special linker flag to export nothing in the executable, and it saved 3.5 MB for Debug binary. the exectuable worked fine running some test-compiler-errors. there was no observable "performance" advantage.

1584807895
mikdusan
yes I mean to say "zig.exe" itself.

1584807920
frett27_
TheLemonMan, tested traits, but i went with something wrong,

1584807922
frett27_
const v = [_]u8{ '0', '1', 0x00 };

1584807923
frett27_
debug.warn("{}\n", .{std.meta.trait.isSlice(@TypeOf(v[0..]))});

1584807931
frett27_
this return false

1584807939
frett27_
whereas,

1584807947
frett27_
var runtime_zero: usize = 0;

1584807947
frett27_
const v3 = v[runtime_zero..];

1584807947
frett27_
debug.warn("{}\n", .{std.meta.trait.isSlice(@TypeOf(v3))});

1584807952
frett27_
returns true

1584807982
andrewrk
frett27_, you can use @compileLog(@TypeOf(v[0..])) to see what type it is

1584808016
TheLemonMan
I guess the first one is covered by the changes andrewrk made to the slicing operator

1584808067
frett27_
*const [3]u8

1584808113
frett27_


1584808175
frett27_
seems the comptime does not preserve the slice type ?

1584808258
andrewrk
frett27_, `*const [3]u8` is better than `[]const u8` because it serves the same purpose, but has the length as part of the type

1584808266
TheLemonMan
if you slice a container with comptime-known size with comptime-known start/end you get an array

1584808611
frett27_
that's fine to me, the container is also a pointer, deserving the original purpose

1584808659
frett27_
was just a bit confused by the difference of behaviour

1584808670
frett27_
between comptime and runtime

1584808676
frett27_
on this trait

1584808735
fengb
Itâ€™s new behavior. Array pointers solve a few problems that slices couldnâ€™t

1584808810
frett27_
may i add this line, in trait.zig, to help understand this ?

1584808815
frett27_
testing.expect(!isSlice(@TypeOf(array[0..])));

1584808905
pixelherodev
Wait, why is that?

1584808913
pixelherodev
What are the problems that this solves?

1584808945
andrewrk
frett27_, I think the "isSlice" trait is no longer useful for this purpose. I suggest to not use it, or use a different one that indicates a better concept of a "memory span"

1584809154
forgot-password
With wasm, is it possible to import WebAssembly.Memory via `extern`?

1584809154
fengb
pixelherodev:

1584809202
fengb
It should be. The WASI implementation shows how you can import

1584809305
frett27_
andrewrk, makes sense

1584809317
pixelherodev
fengb, thanks

1584809447
forgot-password
fengb: What do you mean exactly? In std/os/wasi.zig I can't find anything

1584809477
pixelherodev
This has definitely been said before, but why does isWasm get compiled into runtime code?

1584809481
pixelherodev
s/said/asked

1584809539
fengb
Oh I thought thereâ€™s a extern variable definition in there

1584809579
TheLemonMan
because the compiler doesn't know it's not useful in the final binary

1584809587
TheLemonMan
and it's used in start.zig

1584809613
pixelherodev
Ah. ... okay but why (is it used in start.zig)?

1584809642
TheLemonMan
because we want to know if we're targeting Wasm

1584809654
TheLemonMan
it's used to export the correct _start symbol there

1584809682
forgot-password
When I do `extern "js" var js_memory: []u8` (What should the type be anyways?) I get a compile error telling me that the variable is not defined when I try to use it

1584809685
pixelherodev
Ah, so Zig doesn't yet know not to export functions that can be used both at comptime and runtime if they're only used at comptime?

1584809917
TheLemonMan
yeah, if you don't want that in your binaries take advantage of the linker GC capabilities

1584809924
TheLemonMan
and pass -ffunction-sections

1584809939
forgot-password
Aha, so when I change the type to `extern "js" var js_memory: u8` the compiler at least seems to notice my declaration and doesn't just ignore it

1584809957
fengb
Type should be `[*]u8` because slices arenâ€™t ABI compatible

1584809994
fengb
But itâ€™s trying to link in the variable with the linker hmm

1584810003
forgot-password
I'm sorry that's what I meant. The error is still the same, though

1584810043
forgot-password
Yeah, lld is complaining about that, you're right

1584810146
pixelherodev
TheLemonMan, this is for my backend - that is, I

1584810163
pixelherodev
I'm going to have to implement that myself later

1584810597
fengb
Hmm I can't seem to convince it to import it. Can you open an issue?

1584810620
TheLemonMan
pixelherodev, I have a patch for your problem!

1584810651
TheLemonMan
open src/AST.zig line 219 and change `union` to `union(enum)`

1584810670
pixelherodev
... huh. Interesting. Thanks!

1584810684
fengb
Importing functions just works for wasm though

1584810685
pixelherodev
... which union is this?

1584810689
TheLemonMan
Call

1584810693
pixelherodev
I've made changes since so the line is different

1584810694
pixelherodev
Thanks!

1584810737
TheLemonMan
np, I'll write a patch to catch this problem

1584810737
pixelherodev
...  doesn't work :(

1584810740
pixelherodev
Going to push current

1584810775
fengb
Potentially crappy workaround: can you use JS to copy the data into the wasm memory?

1584810790
TheLemonMan
uh weird, it runs fine here

1584810799
pixelherodev
I pushed the current status

1584810802
TheLemonMan
but halts with `AST generation failed!`

1584810810
pixelherodev
TheLemonMan, it's probably because I've reorganized that union locally

1584810815
pixelherodev
Yeah I'm not surprised by that

1584810831
pixelherodev
The IR generated from the test is different in other build modes

1584810839
pixelherodev
And the AST generator isn't fully implemented yet

1584810884
pixelherodev
I've  been using the partially finished generator to implement parts of the backend, which can then be used to better test the AST generator when I finish implementing it and vice versa

1584810916
pixelherodev
Once the backend's done I plan on implementing unit tests so I can detect if e.g. an AST generator change breaks the backend's register allocation

1584810981
TheLemonMan
hmm, you have some more similar problems, let me push a PR for the compiler so that you can easily spot them all at once

1584810992
TheLemonMan
what strategy are you using for the register allocation?

1584811016
pixelherodev
Well, first I need to explain the calling convention a bit

1584811028
pixelherodev
Basically, it (for compatibility with a different language) uses two separate stacks

1584811034
pixelherodev
The hardware stack is used for function calls

1584811048
pixelherodev
And a stack with its pointer as r5 is used for arguments

1584811073
pixelherodev
Register allocation basically works by assigning registers to all allocations and load results before translating any opcodes

1584811093
pixelherodev
When an instruction needs to access an allocation, it notifies the allocator and passes it the stream

1584811132
pixelherodev
it can then e.g. move allocations from registers to the stack to make room, and then moves the requested allocation into registers and returns a handle, which the instruction emitter uses to identify the register the value is placed in

1584811166
pixelherodev
I'm currently using caller-saving of registers to make it easier to implement

1584811174
pixelherodev
When calling a function, all used registers are pushed to the r5 stack

1584811195
pixelherodev
Currently, args are loaded into registers, though I might swap this around (the calling convention is honestly half-assed right now)

1584811203
forgot-password
fengb: I just wanted to create a FixedBufferAllocator with an explicit buffer passed from JavaScript. std.heap.page_allocator does the job fine as well :)

1584811234
pixelherodev
Then any future instructions move the allocations back into registers so they can continue being used

1584811250
forgot-password
The reason being that I wanted to access the memory from JavaScript, but with std.heap.page_allocator you never know when that memory is "grown away" from you

1584811350
fengb
Ah right

1584811439
fengb
Just allocate 1GB so itâ€™ll never go away ðŸ™ƒ

1584811440
pixelherodev
What's the root of the issue? Should I not be using untagged enums?

1584811441
pixelherodev
s/enum/union

1584811441
pixelherodev
I've got it building locally now by switching all untagged unions to `union(enum)`

1584811462
fengb
But yeah it seems like this is a limitation in the implementation or docs

1584811598
forgot-password
I guess you are right, web pages allocating a gig of memory shouldn't surprise anyone today, haha

1584811648
pixelherodev
Uh no

1584811652
pixelherodev
That surprises me a

1584811670
pixelherodev
(I only ever use the internet with JS disabled, among other restrictions, so)

1584811696
fengb
Sites donâ€™t usually use that much. Browsers like to eat memory for breakfast though

1584811734
TheLemonMan
pixelherodev, untagged enums have no concept of active field, checking those against an enum literal makes no sense

1584811741
pixelherodev
... they... ohhh.

1584811748
pixelherodev
Thanks a ton

1584811758
pixelherodev
Weird that it worked in debug mode though

1584811767
TheLemonMan
except that in non-release mode the compiler silently adds a hidden field to track the active slot

1584811782
pixelherodev
oh. That would do it.

1584811789
pixelherodev
Huge thanks :D

1584811794
TheLemonMan
np

1584811798
pixelherodev
Almost got runtime down to single-digit milliseconds

1584811806
pixelherodev
Average of 12ms now

1584811833
pixelherodev
But >92% of that is just the lexer, so I can probably get it down to 2-3 ms just by switching to LLVM bitcode instead of human-readable IR

1584811896
pixelherodev
Alternately, could shave off multiple milliseconds by reordering the lexer comparisons so the most-used tokens are checked before the least-used instead of checking them all in a single unordered go

1584811976
andrewrk
it should be a compile error to check an untagged union against an enum tag=

1584811992
TheLemonMan
yeah, I have a PR ready

1584812033
forgot-password
pixelherodev: Well, I do web development for work and some apps (whatever you wann call them) are absolutely horrific. Mostly due to low budget though

1584812045
pixelherodev
"apps" <- that's exactly why I run with JS disabled

1584812085
forgot-password
Yeah, I totally get that

1584812097
fengb
Doesnâ€™t have to be about budget. Slack is my goto app to make fun of

1584812100
pixelherodev
Well, half of the reason

1584812124
TheLemonMan
andrewrk, #4764 is ready

1584812126
pixelherodev
The other half is that I disabled the specex/meltdown mitigations on my computer to increase performance, and the cost is that running JS has now gone from "potentially safe" to "not even close"

1584812163
forgot-password
Obviously, without JS the memory usage is probably not an issue

1584812191
andrewrk
TheLemonMan, thanks I'll take a peek

1584812220
pixelherodev
Hah, got it! Average run time is now 8 milliseconds, but it varies between 5 and 11

1584812251
fengb
When are you merging it into Zig proper? :P

1584812359
pixelherodev
If that

1584812378
pixelherodev
Then likely a few more days/weeks to get it up to Zig upstream standards

1584812412
pixelherodev
Hah! Even better! Now it varies between 5 and 8 (though it's almost always eight now)

1584812506
pixelherodev
Does zag buffer stdout?

1584812539
TheLemonMan
no, unless you wrap stdout/stderr in a bufferedOutStream

1584812570
pixelherodev
That's what I thought

1584812578
pixelherodev
(Explains why removing debug prints shaved off half the runtime :P)

1584812940
andrewrk
dom96, I wonder if nim would benefit from shipping with zig rather than msvc/gcc/clang (I'm not sure exactly what C compiler components nim currently distributes)

1584812946
andrewrk
for context:

1584812974
andrewrk
it might, for example, decrease the tarball size of nim, or make cross compiling work

1584813014
andrewrk
I promise you I am not trolling

1584813019
fengb
So this means zig will be able to build zig huh? Self-host complete ðŸ™ƒ

1584813284
pixelherodev
Hold on, does the 45MB tarball include the LLVM backend?

1584813299
pixelherodev
'cause that post strongly implies the answer is yes

1584813307
mikdusan
#3089 what is plan for drop-in usage and -MD/-MV/-MF are used?

1584813309
pixelherodev
45MB tarball includes LLVM 9?

1584813356
dom96
andrewrk, somebody suggested this already heh, might make sense actually but not sure Araq can bring himself to allow that :P

1584813440
dom96
What is this cross compile magic that clang/gcc cannot ship though? Why can't they ship it?

1584813546
andrewrk
mikdusan, the plan is if any of those args are supplied, the cache system is disabled

1584813561
andrewrk
mikdusan, I'll push this branch and open a PR so that it can become contributor friendly to those interested

1584813611
andrewrk
pixelherodev, it includes the zig executable, which exposes the clang executable as well. it does not include llvm .h files or .a files however

1584813651
pixelherodev
So it'd still need an LLVM download? What does that bring the

1584813674
pixelherodev
i.e. if you have a single tarball you can download onto, say, a fresh Windows 10 install, or a GCC-based distro, how big would it be?

1584813723
andrewrk
dom96, it's actually quite a lot of additional work on top of clang. zig ships with a subset of musl libc source files, a subset of glibc source files, a subset of mingw-w64 source files. there are some patches applied, and some header file preprocessing. and finally the build systems each are ignored; instead zig compiler knows how to build them from source, and it integrates tightly with the way target settings work

1584813807
andrewrk
for musl and glibc, it involves building the projects N times (1 for each target) and then running some post-processing tools to create the files that zig actually ships with. zig is actually capable of targeting all 42 glibc versions

1584813831
pixelherodev
Is it possible to tell Zig to emit LLVM BC instead of IR?

1584813861
andrewrk
not currently but would consider a proposal to expose that capability

1584813895
pixelherodev
In that case, is it possible to tell Zig to pipe the IR into another process instead of - no, from when I was implementing the build system changes, I didn't see that...

1584813921
pixelherodev
Would a proposal to allow piping the output of a build system invocation into another process be considered?

1584813921
andrewrk
dom96, oh, and also zig maintains an implementation of a multi-target compiler-rt which is a non-trivial amount of work (as TheLemonMan can tell you)

1584813991
andrewrk
if Araq changed his mind I would be happy to cooperate

1584814019
pixelherodev
Hm, Zig is generating invalid inline asm

1584814025
pixelherodev
As a test, I ran `opt` on the test IR file

1584814132
dom96
andrewrk, since choosenim is already something we recommend to most people installing Nim it would probably make sense to integrate it there, and since I own that project I can easily implement that. The only problem is time :)

1584814301
andrewrk
is choosenim responsible for getting a C compiler installed and configured?

1584814700
andrewrk
TheLemonMan, regarding 4764 - I want to play with the unused variable thing. I'm a bit confused how that works

1584814743
TheLemonMan
I've just cargo-culted that from `catch`, it basically catches the case where the body is `unreachable`

1584814773
andrewrk
ohh it's actually checking the AST node type, not the actual type

1584814775
andrewrk
right, ok

1584814796
andrewrk
nice work

1584814849
andrewrk
TheLemonMan doing the lord's work, tryna get that issue count below 1,000

1584814881
TheLemonMan
hah I'm trying hard to reach that sweet 999

1584814894
TheLemonMan
there are a few stale issues that can be closed tho

1584817129
dom96
andrewrk, only on Windows

1584817161
andrewrk
oh very interesting, so on posix, nim integrates with the system c compiler?

1584817210
dom96
yep

1584817222
dom96
you can also use vcc on windows if you have it AFAIK

1584817524
Bekwnn
Anyone here using zig on win10? "zig build > compile_output.txt" seemingly doesn't co-operate on win7. The resulting .txt is empty and everything spews out to console.

1584817644
andrewrk
`zig build` prints to stderr

1584817895
Bekwnn
ah thanks, looks like adding 2>&1 to the end did the trick

1584818500
Bekwnn
I kinda tried poking around build.zig in the std, but how exactly does addCSourceFile() work? Seems like dark magic to me

1584818525
Bekwnn
currently dealing with undefined function in some source files but not others

1584818651
ifreund
as I understand it `addCSourceFile()` is what you use if you need zig to compile c code for you

1584818721
ifreund
for example, you could use that to compile a test.c and include a corresponding test.h in your zig code with @cImport()

1584818950
adamkowalski
andrewrk: i loved the stream yesterday. I think being able to use the zig compiler as a drop in replacement for clang is gonna help adoption tremendously

1584818955
Bekwnn
right I mean I figured it probably assumes a header with the same name in the same directory as the C file you're including, but in this case it's seemingly grabbing the declaration in the @cInclude(.h) fine and not throwing any errors, but later on it's throwing an error about the function not being defined. Even though it's seemingly not

1584818955
Bekwnn
complaining about the source file with said definition being included

1584818968
adamkowalski
I'm gonna try to use that as an excuse to use that for our next greenfield project we are starting in a couple weeks

1584818984
Bekwnn
>Even though it's seemingly not complaining about the source file with said definition being included

1584818992
adamkowalski
then i'll try and convince them to write new modules in zig instead of c++, and move from cmake to the zig build system

1584819000
Bekwnn
as addCSourceFile() in the build.zig, I mean

1584819005
adamkowalski
then i'll try to deprecate the c++ and I snuck zig in right under their nose

1584819054
adamkowalski
just don't tell anyone i'm going to `export CC="zig cc"` and `export CXX="zig cc"`

1584819069
shakesoda
adamkowalski: devious

1584819072
shakesoda
adamkowalski: i like the way you think

1584819087
adamkowalski
haha yeah we will see how it goes

1584819253
ifreund
Bekwnn: header doesn't have to have the same name, that was just an example.

1584819294
ifreund
it sounds like you have a linking error, are you sure the c function declaration matches the definition?

1584819339
ifreund
not 100% sure but the order of things in your build.zig might be important, try putting the addCSourceFile() earlier if possible

1584819368
ifreund
there are some docs here

1584819499
Bekwnn
It's a bit of a frankenstein mish-mash. I'm attempting to use cimgui, which works, but attempting to use the imgui_impl_opengl3/sdl2 files is stumbling on the function definitions. Those parts are c++, but another user on here got it working.

1584819677
pltrz
got an error building a project with a recent zig: "/usr/lib/zig/std/build.zig:1682:28: error: container 'std.io' has no member called 'BufferOutStream'"

1584819704
pltrz
looking at build.zig, seems like there is BufferedOutStream, but not BufferOutStream

1584819765
andrewrk
pltrz, `your_buffer.outStream()`

1584819776
andrewrk
the API got simpler

1584819871
pltrz
cool, it's actually for

1584819897
Bekwnn
ahh, actually maybe I shouldn't have been ignoring these #pragma pack warnings...

1584820294
Bekwnn
might be an x86 vs. x64 thing..

1584820924
andrewrk
fengb, so, you were joking about bootstrapping earlier, but using `zig cc` to build zig actually has a clear benefit: producing builds of zig for any target. once you have `zig cc` available (and we improve it to support c++ code as well) then one could use it to build llvm/clang/lld for a different target, and finally the zig compiler itself for a different target

1584820943
andrewrk
mipsel tarballs on the download page, here we come

1584820966
fengb
wasm too? :P

1584821207
mq32
> and we improve it to support c++ code as well

1584821223
mq32
would be cool if we could ship libc++ with zig as well

1584821236
mq32
this would make zig the single-best c++ crossdev environment available

1584821241
jwh
as long as its configurable :P

1584821303
andrewrk
mq32, I just looked into it, it's doable. only 15k lines for libc++, and 6k lines for libc++abi

1584821404
andrewrk
it would add an estimated 108 KB to the tarball size, 629 KB to the installation size

1584821449
andrewrk
in fact as of now it's planned because it's required for

1584821531
Bekwnn
the gamedev in me is very excited by that idea, like 90%+ of our libraries are C++

1584821576
mq32
i just checked the tarball from the website

1584821586
mq32
zig-linux-x86_64-0.5.0+153c6cf92/lib/zig/libcxx

1584821596
andrewrk
that's currently header files only

1584821599
mq32
it looks like it contains the headers already

1584821617
mq32
ah :)

1584821643
mq32
but yeah, building a c++ standard lib with the same convencience as with libc with zig would be totally awesome

1584821662
andrewrk
and then that's where we stop. everything from there can be done with packages

1584821671
mq32
yep

1584821682
mq32
because every package can be built from source then

1584821803
mikdusan
zig-cc: is the logic that as soon as .passthrough is seen, regardless of what args are processed thus far, punt to clang driver?

1584821833
andrewrk
mikdusan, yes

1584821864
andrewrk
mikdusan, if you look at the top of tools/update_clang_options.zig you can see a list of known options and which ones are "passthrough". it's only --help currently

1584821887
andrewrk
maybe that could be named better

1584821894
andrewrk
options that do not match anything are passed through

1584821956
mikdusan
we need to punt when "-E" and (if cc1 is to be understood) "-cc1 -Eonly"

1584821979
Bekwnn
sanity check: If I'm able to find a symbol in the .obj file in zig-cache/o, that means that symbol is defined?

1584821980
andrewrk
"punt" would be a name improvement

1584822010
Bekwnn
or is it possible to have just declarations in /o

1584822025
andrewrk
I'm not sure

1584822332
Bekwnn


1584822455
Bekwnn
(issue is only happening with the imgui_impl_X files, the other 4 source files added there seemingly work fine)

1584822587
andrewrk
Bekwnn, hmm that is indeed a head-scratcher. which cpp file defines that symbol?

1584822636
Bekwnn
the symbols with ImGui_ImplOpenGL3 are defined in imgui_impl_opengl3.cpp and similarly for the SDL ones

1584822654
andrewrk
hmm why is that in the examples/ folder though?

1584822662
andrewrk
is that really the implementation?

1584822689
andrewrk
are you sure that's not just an example of calling it

1584822787
Bekwnn


1584822823
Bekwnn
they're usable example bindings for a few popular setups that are "usable as-is" or modifiable to suit your purposes

1584823041
mikdusan
andrewrk: is update_clang_options.zig/known_options order important? I'll just append to it for now.

1584823560
Bekwnn
eh, might be an issue with c++ vs. C style struct args

1584823833
jaredmm
This is unlikely to be related in any way, but I had issues linking some libraries awhile back on Windows (only Windows) and I couldn't link them when I went with C code either.

1584823846
jaredmm
I never figured it out because I'm a quitter.

1584823867
andrewrk
mikdusan, no

1584823872
jaredmm
Symbols were all defined, same as you saw, linker commands all looked right.

1584824090
andrewrk
I'm going to do another stream in a few minutes

1584824096
andrewrk
same topic

1584824147
shakesoda
Bekwnn: i wonder what's going on with your setup

1584824170
shakesoda
it looks nearly exactly like mine, which works fine on windows and linux

1584824180
Bekwnn
shakesoda: are you sure you didn't take any steps to modify the impl_X.h files?

1584824202
shakesoda
oh, yeah, I extern c'd them

1584824216
shakesoda
totally forgot

1584824247
Bekwnn
and one of the functions has a default arg that causes complaints... I changed that but only tried to extern "c" them via defining  IMGUI_IMPL_API

1584824261
shakesoda
nah that doesn't do it at all

1584824273
shakesoda
one moment

1584824323
shakesoda
imgui_impl_sdl.h in full

1584824332
shakesoda
same thing with the others

1584824340
shakesoda
well, exactly the one other

1584824395
shakesoda
i've got a boatload of little changes to my imgui/cimgui files, so i just didn't remember

1584824464
shakesoda
interestingly, the comment about the SDL2 IME handling is either incorrect or missing some kind of detail

1584824465
Bekwnn
I had to do a pretty crazy find and replace on glew.h due to 1085... as far as I'm aware I'm the only person who's gotten that one working

1584824481
shakesoda
solution, avoid glew ;)

1584824495
shakesoda
I fixed the SDL2 IME support myself years ago, unless this runs into some weird case

1584824517
Bekwnn
eh it works perfectly fine now. It just used a ton of function-style macros which didn't actually do anything unless you added defines yourself

1584824546
Bekwnn
so I recorded a search, find, delete macro in vim and did "400 @r" a few times

1584824561
shakesoda
glew is really annoying in a lot of respects, i usually end up with epoxy, glad or just getting the pointers myself

1584824580
shakesoda
although at least it's not as busted with core profile as it once was

1584824783
Bekwnn


1584824819
Bekwnn
debugging always seems to go smoother with a drink. Tequila deserves a small bit of the credit on this one

1584824868
Bekwnn
at least it helped me bang my head against trying to modify the headers in a dozen tiny different ways

1584825042
shakesoda
Bekwnn: it lives!

1584825046
shakesoda
andrewrk: now there are two!

1584825265
BaroqueLarouche
Win32+D3D11+Audiokinetic Wwise:

1584825277
BaroqueLarouche
(plus Dear IMGUI of course)

1584825322
shakesoda
2 -> 3

1584825376
shakesoda
BaroqueLarouche: nice, i haven't done any audio stuff in zig yet, although i'm going to port my openal (sdl2+mojoal) stuff somewhat soon

1584825400
shakesoda
far less fancy than wwise is

1584825434
BaroqueLarouche
I work for Audiokinetic, this is a demo for a internal dev talk (which can be on any technical subject)

1584825501
Bekwnn
I mostly wanted a new graphics tinkering framework, but also I've been doing optimization stuff at work and have wanted to experiment with a pure data-oriented ECS and profile it a bit

1584825650
Bekwnn
Wound up doing Zig because rust fails to fix the two things I want to get away from in C++ most: compile times (soonâ„¢) and complexity

1584825691
shakesoda
that's what I started doing, although at this point I also want to just move the fast bits of my engine/tools to zig

1584825912
Bekwnn
I'm mainly a gameplay programmer and I don't think I'm in the right domain of our code base to just modify 'bits' of it

1584825962
Bekwnn
in general our engine is a little bit more monolithic because as a studio we're genre specialists

1584825997
Bekwnn
in terms of not having as much of a gameplay code vs. engine code separation

1584826071
shakesoda
eh, strong separation increases the complexity a vast amount

1584826225
pixelherodev
Hold on, ImGui in Zig?!

1584826237
BaroqueLarouche
using the C binding

1584826253
BaroqueLarouche
and building the C++ parts in a static library

1584826350
Bekwnn
>and building the C++ parts in a static library

1584826362
Bekwnn
unless I'm misunderstanding, I don't think shakesoda or I did that

1584826423
Bekwnn
or rather there's no external build step. From a fresh project I should be able to just grab git submodules, copy some modified headers as a one-time step, and then zig build

1584826479
BaroqueLarouche


1584826561
pixelherodev
Ah gotcha

1584826594
Bekwnn
more or less the same, but with a few warning suppressions and a define

1584826613
companion_cube
Bekwnn: what kind of games do you work on?

1584826623
Bekwnn
AoE 4

1584826644
BaroqueLarouche
neat

1584826653
Bekwnn
or rather the studio does RTS, I'm really just mainly on that project though

1584826723
Bekwnn
so when you think about how much gameplay logic potentially carries over to other RTS projects, yeah there's a slightly weaker separation of engine and game compared to say UE4. Cuz something like having units garrison a structure makes sense as "engine code"

1584826791
Bekwnn
the engine itself is separated into a few parts though, so there is some cleanliness to be had

1584826894
companion_cube
wait

1584826900
companion_cube
an actual AoE 4 ?

1584826906
companion_cube
like, with the AoE license?!

1584826942
Bekwnn


1584827086
companion_cube
oh wow, that's exciting

1584827093
companion_cube
AoE 2 is a fond memory of mine

1584827180
Bekwnn
It's been a really fun project to work on so far

1584827286
pixelherodev
AoE?

1584827307
companion_cube
age of empires

1584827656
pixelherodev
Ah

1584827821
Bekwnn
with imgui done I guess I get to pick between input handling, object rendering, adding to the math lib, or fleshing out imgui usage more

1584827854
Bekwnn
I'm tempted to reward myself with the math lib one since it's nice, simple, and fun...

1584827924
mikdusan
andrewrk: #4774, my cherry-pick may have been premature. I'm thinking we shouldn't just punt for eg. `-E`; let's say a cross-target is specified then we should use zig logic to setup inc/lib/framework search paths ?

1584828019
Bekwnn
given that it's mostly for personal organization, does it make more sense to have things like "backlog p1" "backlog p2" etc as labels or milestones? (Given I'm already using milestones to set personal goals for v0.1, v0.2, etc

1584828279
Bekwnn
eh, milestone probably makes the most sense since if I move something that's backlogged into a milestone I'd want it to not be a backlog item anymore

1584829069
pixelherodev
Got the IR backend

1584829083
pixelherodev
Need to tweak the calling convention so that its Puts call uses the right ABI

1584829087
pixelherodev
But other than that, it

1584829475
pixelherodev
Still only takes ~7 ms in release-fast mode, which means 99% of runtime occurs in the Zig->IR translation - which isn't me going after the compiler, but being glad I don't need to worry about optimizing for a good while :D

1584833015
ifreund
sweet, I finally got all my issues sorted out. My hello world wayland compositor in zig works!

1584833584
pmwhite
What kind of compositor are you aiming for? Tiling?

1584833619
ifreund
i want dwm

1584833647
ifreund
sway is awesome, but I never liked how i3 does windows

