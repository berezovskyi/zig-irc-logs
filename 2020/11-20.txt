1605830838
Kena
Thanks, good news for UTF-8.

1605830992
Kena
I'm trying a struct now instead of passing a const literal, but the compiler says `error: struct field missing type` but I disagree, my field is in the struct field declaration, in the method and also in the call site, what did I do wrong?

1605831072
travv0
: instead of `

1605831074
travv0
=

1605831083
travv0
before the types in your struct definition

1605831126
travv0
the ` was supposed to be a = in case that wasn't clear lol

1605831177
travv0
so the error was saying that your struct fields don't have types, because instead of specifying the type you're providing their default value as the type

1605831390
Kena
Allright, thank you. `your struct fields don't have any type` would have been a much clearer error message.

1605831440
Kena
English-US convey less and less information by the day. Writing in english-UK would convey much more information to the user as it is semantically superior.

1605831476
fengb
Those sentences are neither UK not US specific

1605831513
Kena
A londonian would never communicate in that way.

1605831579
travv0
an american wouldn't say that out loud either, written word is often different, especially for technical text

1605831620
fengb
Yeah I‚Äôd probably say ‚Äúshit has no type yo‚Äù

1605831623
Kena
Agreed, but the familiar style is kind of hard to grasp, especially if english is not your mother tongue.

1605831632
Kena
lol

1605831643
travv0
lol now there's something everyone would understand

1605831703
ugla
"u put = instead of : fyi"

1605831706
travv0
there are a few zig error messages that sometimes take me a bit to figure out what they're trying to tell me, i've been too lazy to improve them though

1605831720
ugla
some hint would probably be nice

1605831796
Kena
I miss Irssi irc client... I was never disconnected.

1605831798
travv0
yeah if you assign a type as the default value without specifying a type that'd be a nice message

1605831848
Kena
The compiler must assume it is talking to a complete noobie :D

1605831882
Kena
it would bring down the entry barrier a bit.

1605831906
hlolli__
a stuct method with var chain = ArrayList(Struct).init(self.allocator); defer chain.deinit(); Seems to be related to this error "error: unable to evaluate constant expression" when calling it from another method. There's no const, could it be the allocator, or the array?

1605831908
travv0
yeah, i don't think the error messages have gotten a ton of love

1605831955
travv0
because you're making an ArrayList with a type as the contents, right?

1605831965
hlolli__
yes true

1605831983
travv0
er

1605831989
travv0
hold on

1605832030
travv0
i got confused for a second because of the name of the struct lol

1605832056
hlolli__
Yes it's actually IObject, but I renamed it to make it readable :)

1605832056
travv0
can you post a bigger snippet? on a paste site or something?

1605832060
hlolli__
yes!

1605832197
travv0
i'm excited for fmt to print slices/arrays instead of their addresses

1605832201
travv0
there is a PR for that right?

1605832355
hlolli__


1605832401
hlolli__
that double struct is copy paste fail, I was removing noise from the code

1605832438
travv0
so this isn't related to your question but one thing that stood out to me is that you deinit the ArrayList that you return

1605832481
travv0
alright so your ArrayList isn't of type `type` which is probably the problem

1605832500
travv0
its type is ArrayList(IObject)

1605832510
hlolli__
both plausable, I tried exactly that.. wait

1605832522
travv0
but the type will be inferred so you don't even need to specify it there

1605832581
hlolli__
with [IObject]ArrayList as return type I get; error: expected type 'type', found 'fn(type) anytype'

1605832618
travv0
ArrayList is a function that returns a type

1605832628
travv0
so you either want the return type to be ArrayList(IObject)

1605832649
travv0
or []IObject and do `return chain.toOwnedSlice()`

1605832669
hlolli__
aaaahh ok :D yes thanks! I stopped using functions returning structs because I couldn't get good types with it

1605832677
hlolli__
that explains a lot, thanks!

1605832702
travv0
yeah so any function that returns a type you can call that function in a place that expects a type and use the result as the type which is what ArrayList is doing there

1605832704
travv0
and no prob!

1605832790
Kena
Please why I can't pass the parameter in a simple method ? It's says `error: expected type '[]u8', found '*const [23:0]u8'`

1605832818
travv0
string literals are []const u8

1605832826
travv0
so you need to make sure your function takes that

1605832832
ifreund
Kena: it expects mutable but you passed const

1605833066
Kena
How can I pass it a mutable argument instead?!

1605833097
Kena
I do not know any mutable string...

1605833099
travv0
string literals are stored in the binary so you can't mutate them

1605833126
travv0
do you need to mutate those strings or are you just wondering in general?

1605833175
ifreund
Kena: you can use []const u8 instead of []u8 if you don't need those things to be mutable

1605833192
Kena
I'm sorry to ask but I don't know what a binary is. It's not something explained anywhere in ziglearn.org or ziglang.org

1605833217
Kena
Those strings won't mutate for now, their goal is to be written in a file.

1605833258
g-w1
binary is base 2 numbers: 00110011, a binary is a file, usually produced by a compiler that is executable and is the result of the source code

1605833279
travv0
yep, if you're on windows then binaries are .exe files

1605833311
travv0
so when you put a string in a program like "hello world!" that string is actually stored in the executable itself

1605833397
Kena
ifreund both in the method and the field's definition or only in one of them?

1605833430
ifreund
both, you can't convert from const to mutable

1605833618
Kena
Allright, thanks g-w1 ifreund and travv0 :)

1605833629
travv0
no prob!

1605833686
travv0
and if you do need to mutate a string at some point just let us know if you need help

1605833771
Kena
For now, I'm just trying to feed a struct with user input, it's just so incredibly hard.

1605833798
travv0
you're the one that said you're new to programming right?

1605833807
Kena
Yes

1605833863
travv0
then it's gonna be tricky at the beginning, especially using a language that makes you pay attention to the code you're writing for correctness sake.  but once you get the basics down you'll be able to apply them to a lot of other languages, etc

1605833865
Kena
I thought zig was a rational choice for aiming embedded systems programming as C is clumsy and Rust very complex.

1605833905
travv0
yeah, can't argue with any of that lol.  as long as you understand that zig is still changing rapidly until it hits 1.0

1605833906
Kena
Yes if I don't give up learning programming before.

1605833943
Kena
Yes, I understand they will be non-retrocompatible changes.

1605833968
Kena
*non-backward changes, not sure how to say it in English.

1605833979
travv0
nah don't give up, a lot of aspects will seem really complex but eventually they'll click and you won't remember what it was like to not understand those concepts

1605833999
a92
Backwards-compatible

1605834007
Kena
:)

1605834010
travv0
except non- lol

1605834032
torque
I would say that starting with embedded systems is an interesting approach

1605834056
travv0
it's certainly not an easy route, but i guess if that's what you're learning programming for then why not

1605834080
torque
I think it's definitely easier to learn general programming concepts in a high-level language that can be applied to low-level stuff

1605834117
torque
I mean, if diving in the deep end is the way you learn best, go for it

1605834150
travv0
i think the easy-to-learn high level languages won't have helped them with the things they've been asking about in here if they had learned one of them first

1605834168
travv0
like if you learned python you're still gonna be confused about zig string stuff

1605834208
torque
I don't fully agree with that

1605834228
a92
You'll be a lot less confused than if you didn't learn programming

1605834248
travv0
does python have any concept of immutability or string literals?

1605834259
torque
yes, tuples are immutable in python

1605834270
fengb
Strings are immutable too

1605834286
travv0
but they're always immutable?

1605834291
torque
anyway, I guess my point was more that if you are having too much trouble getting started with zig, I would recommend trying to learn something that takes care of more of the details to get a foundation

1605834300
torque
rather than just giving up

1605834311
travv0
yeah for sure, if you're not having fun with zig go with python or javascript or something

1605834320
fengb
Yes always immutable. There are bytearrays in Python that match closer to Zig strings

1605834332
travv0
make sure you're enjoying yourself but know that it's normal to be frustrated sometimes before you grasp a concept

1605834334
Kena
In fact, I tried with python during 5-6 weeks and didn't like it at all.

1605834364
a92
Did you try Javascript?

1605834376
Kena
Object-oriented paradigm is not my cryptonite and I had no control over the machine since it's very high-level abstraction (no type declaration).

1605834384
Kena
Nope.

1605834400
travv0
types are actually a high level concept but i'm also a fan of them

1605834410
a92
It's another very-high-level/easy language, and can run in browsers (although it has weird quirks)

1605834413
torque
I mean, it depends on what you mean by "control over the machine"

1605834434
travv0
there's also typescript which i haven't used but it's javascript with a static type system like zig has

1605834445
fengb
Depending on who you talk to, control over the machine isn‚Äôt even the intent of programming üôÉ

1605834446
Kena
I was planning for RISC-V assembly as a second language and Idris 2 as a third one because a lot of people recommand to learn another paradigm-oriented language to boost learning curve.

1605834467
travv0
ooo idris will be a fun one lol

1605834497
ifreund
best way to learn how to program well is to make actually useful stuff you need imo

1605834505
g-w1
^

1605834529
travv0
yeah, that's why i was saying that if they're wanting to learn something low level to do embedded stuff then there's nothing wrong with that

1605834535
travv0
if that's what makes it enjoyable

1605834550
ifreund
what language you use should be determined by what kind of problem you need to solve

1605834574
travv0
yep

1605834580
ifreund
and don't be afraid to learn a new language for a new project, I learned zig to write river

1605834670
travv0
also whether you're learning for fun or with the intent of getting programming work would probably have some bearing on what language you learn

1605834705
Kena
A lot of articles say to not switch to another language before learning the first one for at least 6 months, or you'll be lost.

1605834747
Kena
My real-world problem is I want to create a library to archive my hundred of books.

1605834814
Kena
While keeping the idea to code compliant for edge-computing. Thereby, the embedded systems stuff required.

1605834858
Kena
I think laptop, tablet and smartphone will be less and less used in the upcoming years.

1605834917
travv0
yeah if you have your mind set on embedded stuff then i think zig's a fine choice as it'll familiarize you with the concepts needed for low level stuff like that even if it's not what you always stick with

1605834939
travv0
but if you do stop having fun with it don't be afraid to switch to javascript or something instead

1605834952
travv0
since you could program the app you're working on in that as well and it'd still be a good learning process

1605834981
justin_smith
yeah, there are embedded devices like the esp32 that can run javascript, lua, python no problem

1605835070
travv0
but yeah i can't stress enough that when you're first learning, the important part is to continue learning which means you need to be enjoying yourself so you don't quit

1605835083
travv0
you can always move on to more complex stuff later on

1605835099
novaskell
Kena: type driven development with idris is a brilliant book

1605835108
KIMI_7996__88
hi, i tried install sublime text zig package, but it is not compatible

1605835113
novaskell
that and software foundations in Agda

1605835119
travv0
i have that on my list novaskell

1605835120
Kena
Allright, thanks a lot for all your support, it's just I need to feel belong to a community because self-learning alone is amazingly depressing.

1605835126
KIMI_7996__88
local package from github works, it is possible to update the package on sublime?

1605835146
KIMI_7996__88


1605835164
travv0
well i find the zig community quite friendly so you're in a good place in that regard Kena

1605835216
novaskell
travv0: (Advanced Topics in) Types and Programming Languages is another to have on your shelf

1605835240
travv0
is that the brick book?

1605835248
Kena
novaskell thanks for feed-back. Unfortunately, idris 2 (now self-hosted) is not covered in the book aforementionned.

1605835250
novaskell
yes

1605835260
g-w1
now that the sublime package has 1k downloads, ill make a pr to add zig to bat (the cat with color cli util)

1605835262
travv0
yep i own that one, still need to read it like most of my books lol

1605835270
KIMI_7996__88


1605835302
novaskell
You ca follow along with Idris2 as there's a list of corrections/adjustments Kena. The language hasn't changed too much even if the core type theory has

1605835322
KIMI_7996__88
since local git works, it is just about uploading new tm file, who do i need ping for such task?

1605835352
companion_cube
Woah, #zig talking about type theory now?

1605835381
novaskell
(secretly wants refinement types in zig)

1605835404
KIMI_7996__88
anyone have idea?

1605835412
Kena
Do you think it would be insane to learn Idris 2 in parallel or is it stimulating for the mind?

1605835421
g-w1
check the authors on github and see if they are on irc

1605835451
a92
If Zig is your first language, you might not want to parallely learn a second one

1605835451
travv0
KIMI_7996__88: i'm not sure who's in charge of the package control stuff but i'd see if you can contact the top maintainer on the project

1605835461
novaskell
Would be fine as they complement one another. You can use some of what you learn in idris within in Zig

1605835471
KIMI_7996__88
i don't know who he is sorry

1605835491
g-w1
Ill ask around on discord soon

1605835494
KIMI_7996__88
sublime is popular editor, it is broken since october it is big issue

1605835508
KIMI_7996__88
ok ty

1605835544
g-w1
I would raise an issue on github though

1605835609
KIMI_7996__88
issue is already created

1605835614
g-w1
oh

1605835628
KIMI_7996__88


1605835668
Kena
DO you remember the exact title regarding to foundation of Adga? I can't find him on amazon

1605835687
andrewrk
KIMI_7996__88, I haven't seen emekoi around in a while. That project lacks an active maintainer

1605835704
novaskell
Programming Language Foundations in Agda

1605835728
novaskell


1605835740
KIMI_7996__88
i will try send an email andrewrk

1605835775
Kena
Thanks you're kind.

1605835780
andrewrk
KIMI_7996__88, I don't think that would be nice. If they are not participating in the development it is intentional and you should leave them in peace

1605835781
KIMI_7996__88
package still work but error message might indicate somthing wrong hidden

1605835827
KIMI_7996__88
oh ok, sorry

1605835845
travv0
andrewrk: they have their email on their github so i don't think they'd be opposed to being contacted about one of their projects that way

1605836258
companion_cube
@

1605842466
pixelherodev
I'm the local plan9er, yeah :)

1605862451
TheLemonMan
any FreeBSD users around? (nyaayaya ?)

1605864778
TheLemonMan
daurnimator, I can't think of a better name than LimitedReader :(

1605864784
TheLemonMan
TruncatedReader maybe?

1605868346
ifreund
LimitedReader seems the best to me

1605870104
daurnimator
EarlyEOFReader > LimitedReader IMO

1605870112
daurnimator
I don't love either but.... yeah

1605870195
ifreund
CutoffReader?

1605870199
ifreund
just spitballing

1605870410
ifreund
that's an odd trace, I'm on linux...

1605870762
ifreund
figured it out, I just typoed a path in my build.zig

1605871011
daurnimator
TheLemonMan: PS, thanks for #6600 answering

1605871069
TheLemonMan
hah, deep down we all hate std.os

1605871111
TheLemonMan
the "EarlyEOF" part in the name threw me off before I inspected the implementation

1605871134
TheLemonMan
the first impact is something that.. handles early eof of the backing reader?

1605871250
daurnimator
yeah. essentially it may force an end-of-file before the underlying reader really has an end-of-file

1605871313
TheLemonMan
but if you set the limit past the stream end... it's not early anymore!

1605871369
daurnimator
true, I said "may" :)

1605871398
daurnimator
even an early EOF can be upset by an earlier EOF

1605871430
daurnimator
`earlyEOFReader(earlyEOFReader(someotherreader, 42).reader(), 100)` who's early now?

1605871454
TheLemonMan
that's an argument for not having 'early' in the name :P

1605871472
daurnimator
"who's more limited"

1605871558
TheLemonMan
the one with a lower limit? heh

1605871702
novaskell
BoundedEofReader?

1605872204
ifreund
or EofBoundedReader?

1605872250
TheLemonMan
or BoundedReader?

1605872347
ifreund
I like Bounded more than Limited

1605872469
ifreund
TheLemonMan: by the way, I'm supposed to pass on a discord invite to you from kristoff_it

1605872483
ifreund
though I already told him I don't think you're much of a discord user

1605872537
TheLemonMan
last time I tried using Discord my laptop fan kept spinning and spinning, I'll stick to irc for the time being

1605872548
TheLemonMan
didn't we have some kind of bridge before?

1605872586
ifreund
Idk, though I can't see briding discord to irc working all that well

1605872609
ugla
There's a Matrix <-> IRC bridge (I'm using it)

1605872654
ugla
Haven't had much luck with Discord bridging. This one is quite seamless though!

1605872675
ifreund
well, untill you send a code block over matrix

1605872702
daurnimator
or use the reply button in matrix

1605872703
ifreund
or edit your message

1605872743
ifreund
If you use matrix the same way you'd use IRC though it does work quite well, I use it on my phone

1605872754
ugla
I don't know if my client has any of those features

1605872778
ugla
Oh look, a reply option if I right click on a message. TIL.

1605875453
ifreund
hrm, is it intentional that decls included with usingnamespace don't show up in the decl list from @typeInfo()?

1605878725
Kena
Hello, is there a function to return the number of field's struct? I would like to prompt the user a number of times equal to the field's number in order to feed a struct.

1605878897
Kena
Not the integer value of a field but the amount of fields. (i.e. their quantity I mean)

1605878903
g-w1
you probably want std.meta.fieldNames which will return an array of all the fields in the struct

1605878929
g-w1
then use @field to set the field with the name

1605878934
g-w1


1605879170
Kena
Thanks for the guideline. Now I must seek where std.meta.fieldNames is described in the source code lol

1605879184
g-w1
std/meta.zig:416 :)

1605879237
Kena
are you a descendant of Lucky Luke ^^

1605879304
g-w1
I was just looking it up myself in the source code :P, so I had the line number

1605879327
daurnimator
Kena: you're probably heading towards something like: `inline for(@typeInfo(someStruct).Struct.fields) |field, i| // now use `field` and `i``

1605880119
Kena
Bu the struct must be instantiated before being fed into the loop right? My problem is: the loop aims precisely to instantiate it so it's kind of a blocker.

1605880144
daurnimator
Kena: no, you pass in the type itself; not an instance of it

1605880188
g-w1
you can just use @TypeOf to get the type from an instance

1605880210
Kena
I need some time, its a lot to process.

1605880268
daurnimator
`var mystruct: someStruct = undefined; inline for(@typeInfo(someStruct).Struct.fields) |field, i| @field(mystruct, field.name) = try get_from_user("give me a " ++ @typeName(field.field_type), field.field_type);

1605881840
Kena
What is the purpose of i in this case? the for loop is presumed to iterate through the whole sequence of fields.

1605882174
ifreund
i is if you want a counter so you know which field you are on

1605882174
earnestly
daurnimator: Could that i be _?

1605882185
ifreund
you can just omit it

1605882191
earnestly
ifreund: I think they're wondering why you need to include it at all, if it's not used

1605882198
earnestly
Yeah

1605882210
Kena
Allright.

1605882389
dominikh
does Zig have safe integer casts? like an @intCast that returns an error if the value is out of bounds for the target type?

1605882404
dominikh
or am I going to write that myself

1605882469
fengb
std.math.cast

1605882477
Kena
I don't understand the compiler, it speaks of a type which I know nothing about: expected type '[]const u8', found 'std.builtin.StructField'

1605882504
dominikh
thanks

1605882629
fengb
Builtin functions work with LLVM so it can‚Äôt operate on errors. There‚Äôs often a corollary stdlib function that does use errors

1605882675
dominikh
makes sense

1605882690
fengb
Kena: Your `field` variable is a struct, not a name. To use @field, you need to use `@field(book, field.name)`

1605882722
Kena
I don't understand what it means but I found the struct definition in lib/std/builtin.zig. I replaced field with field.name but now it tells me the container has not such a field , which is false!

1605882758
fengb
You passed in Book, which is the type. You need `book`

1605882760
Kena
Yes too late to type my reply. thanks.

1605882779
TheLemonMan
you can sue the compiler for libel (would that be libel?)

1605882780
Kena
Ah! thanks

1605882807
Kena
war on machines is declared! Join the league now! Protect your lineage!

1605882820
dominikh
I'm siding with the machines

1605882827
TheLemonMan
rage against the machines

1605882831
fengb
People are the problem

1605882917
Kena
You will be merged :D

1605882935
Kena
Not closed, just merged.

1605882965
TheLemonMan
and forked!

1605882970
Kena
mdr

1605883067
Kena
we'll have a fengb 1.1.0 with new features. I'll be able to talk about allocators auto-freed

1605883089
fengb
wat

1605883112
TheLemonMan
fengb is now known as TheAllocatorMan

1605883123
Kena
lmao

1605883274
TheLemonMan
g-w1, check out `ir_analyze_cast`

1605883319
g-w1
is this in relation to the pull request

1605883323
TheLemonMan
yep

1605883338
TheLemonMan
the bit you're interested in is `small enough unsigned ints can get casted to large enough signed ints`

1605883372
g-w1
ah

1605883375
TheLemonMan
and please add a few test cases in stage1/behavior/cast.zig

1605883401
g-w1
I added a bug test, is that not enough?

1605883425
TheLemonMan
the bugs/ folder is for big unreduced test cases

1605883430
g-w1
ah

1605883455
g-w1
seems that I need to use ir_num_lit_fits_in_other_type

1605883458
TheLemonMan
tests that make sure the compiler is behaving according to the specification belong in one of the behavior tests

1605883597
TheLemonMan
that only works if you have comptime-known values

1605883620
g-w1
its this ir_analyze_widen_or_shorten i think

1605883638
g-w1
ir.zig:15372 i think

1605883696
g-w1
s/ir.zig/ir.cpp

1605883697
TheLemonMan
you shouldn't need any cast there

1605883733
g-w1
ah, what is wrong with my current implimentation then?

1605883759
TheLemonMan
check out that piece of code I pointed you to before

1605883767
TheLemonMan
and the brief explanation I wrote in the ticket

1605883774
g-w1
ok

1605883902
TheLemonMan
mq32, I just saw your zig-network project, you may be interested in #7124

1605884155
TheLemonMan
ifreund_, ifreund, you forgot the `pub` in front of `const bar`

1605884166
TheLemonMan
usingnamespace won't import private members

1605884179
TheLemonMan
and why there are two of you?

1605884246
TheLemonMan
beside that typeInfo is not resolving the usingnamespace entries, it should be an easy fix

1605884326
ifreund
TheLemonMan: pub doesn't matter in the same file afaik

1605884358
ifreund
the one with the underscore is connected over matrix on my phone

1605884825
TheLemonMan
yeah it matters, try adding a `var x = B.bar + B.foo` before the `inline for`

1605884839
TheLemonMan
it doesn't work if you omit the `pub`

1605884902
ifreund
huh, TIL

1605885039
ifreund
In that case I may need to poke this a bit more, I'm trying to recursively ref all decls but my function seems to get stuck on usingnamespace

1605885057
ifreund
about to leave on a run now though

1605887432
g-w1
Should peer type resolution be order independent? if a u8 comes before a u32, should it cast to u32 even if the u8 was first?

1605887656
TheLemonMan
the u32 is wider

1605887689
TheLemonMan
so no, the order is not importat

1605887715
fengb
No? Peer resolution promotes to the smallest type that satisfies all branches

1605887730
g-w1
ok

1605887849
g-w1
chill fam

1605887855
g-w1
sry wrong chat :(

1605887877
Kena
I have an existential question, does Zig support buffer underflow?

1605888143
TheLemonMan
half-{empty,full} buffers?

1605888199
Kena
Yes, that kind of mechanism.

1605888236
TheLemonMan
the language itself doesn't care of how full your buffers are

1605888266
Kena
Yes, you're right I shouldn't have ask that.

1605888736
g-w1
should this example be valid then?

1605889090
TheLemonMan
`x + y` is `u8 + i32`, if #7173 is correct then the result is a `i32`

1605889111
g-w1
I fixed the peer type error, but now I get this:

1605889211
TheLemonMan
are you sure? it seems that it picked `u8` as common type

1605889277
g-w1
this was my implimentation

1605889305
g-w1
it works if you switch x and y though

1605889602
TheLemonMan
and you added that code where?

1605890134
TheLemonMan
works for me, you should recheck that maze of conditional checks

1605892752
marler8997
do we currently have a way for a build.zig file to reference another build.zig file?

1605893786
ifreund
marler8997: not really, though you can totally import functions and/or build step from it

1605893807
ifreund
this is what I do for zig-wayland:

1605893842
marler8997
gotcha

1605893847
marler8997
problem that needs to be solved I think

1605893892
ifreund
yeah, the handling of packages in the zig build system needs a fair bit of fleshing out

1605893901
marler8997
I'm working on it :)

1605894033
ifreund
I think the first step would be deciding on an official manifest format for packages

1605894045
marler8997
nah

1605894055
ifreund
this would state the version, where the root source file is, and other things as needed

1605894061
ifreund
nah?

1605894087
marler8997
I've been going through the absolute minimum of what is needed

1605894106
marler8997
it's not ready to present, but if you want to have a gander:

1605894417
ifreund
marler8997: at first glance that doesn't look flexible enough to allow e.g. distros to override the way filetrees are retrieved

1605894435
ifreund
i.e. /usr/include/zig instead of downloading from a url

1605894461
marler8997
it can

1605894480
marler8997


1605894493
marler8997
that would go in .zig-redirects/url

1605894511
marler8997
you can also make it project specific, or global

1605894533
ifreund
Ah I see, missed that part

1605894544
ifreund
yeah I like the direction you're going with this

1605894549
marler8997
you can redirect by URL, hash or name, all  3 have valid use cases

1605894568
marler8997
I'm trying to approach it from bottom up, what do we absolutely need to get this working

1605894612
ifreund
seems like a solid plan to me, building a user friendly interface over the details is the last step

1605894630
marler8997
right

1605895010
ifreund
what if we standardized a function packages could put in their build.zig instead of the build function?

1605895031
ifreund
pub fn package(b: *Builder) Pkg { ... }

1605895051
ifreund
it would return the package provided by the filetree

1605895100
ifreund
hmm, still wouldn't be enough for zig-wayland though, we need a way to pass config options to the package

1605895104
marler8997
now you have 2 ways of adding a package to your local builder object

1605895120
marler8997
the builder object has everything we need

1605895141
marler8997
My idea right now is to implement serializing the builder object to JSON

1605895171
fengb
Just configure everything with JSON. What could go wrong

1605895180
ifreund
I don't follow how that would help us?

1605895188
marler8997
you could, but zig is much nicer for humans to work with

1605895213
marler8997
so the problem is, how do you reference object in other build.zig files correct?

1605895233
marler8997
i.e. you have a library in one build.zig file you want to use in another build.zig file

1605895265
marler8997
so, zig compiles the librarie's build.zig build, serializses the final data to JSON, then the applications build.zig file can access all it's data from the JSON file

1605895315
ifreund
ok, and so in this json file there is a list of packages that you can then use if you want among other things

1605895319
marler8997
this means every build.zig file still only gets compiled once, but you can reference the data from any other build.zig file

1605895343
marler8997
the JSON would just be the exact data you would find in the builder object

1605895357
ifreund
that doesn't solve the problem of user configuration of packages though like I need for zig-wayland

1605895375
marler8997
user configuration of packages?

1605895384
ifreund
the user needs to be able to pass arbitrary xml files to be scanned in the build.zig

1605895406
ifreund
then I generate the packages code from those xml files

1605895417
marler8997
-Dxmlfiles=a.xml,b.xml,c.xml?

1605895441
ifreund
hmmm

1605895454
marler8997
I'm sure I'm missing something

1605895474
ifreund
then the user has to manually invoke zig build -Dfoo on all the dependencies?

1605895528
marler8997
I'm trying to understand your use case but I'm having trouble filling details

1605895558
marler8997
but I really want to understand, tackling use case is the best way to test an idea

1605895602
ifreund
did you read my readme to get an idea of my current build.zig API?

1605895653
marler8997
reading...

1605895691
ifreund
each project may use different protocols and needs a way to tell zig-wayland's build.zig/scanner to scan them and generate the package's code at build.zig time

1605895726
ifreund
I think it makes most sense for this configuration to happen from the projects build.zig not zig-wayland's build.zig

1605895758
ifreund
I also need to figure out a way to integrate this code generation with zig's caching system, but I think that's orthagonal

1605895785
marler8997
I'm understanding a bit more...I don't see how it would be possible for a project's protocol xml files to be in zig-wayland build.zig file... (in response to your statement " I think it makes most sense for this configuration to happen from the projects build.zig not zig-wayland's build.zig")

1605895837
ifreund
I mean using build options on zig-wayland's build.zig, that's then separate from the projects build.zig no?

1605895840
marler8997
so...for me to understand a bit more...what does zig-wayland do we these protocol files?

1605895860
ifreund
it parses them and generates zig code implementing the API described

1605895863
marler8997
these don't look like "build options" to me...are these protocols optional for a project?

1605895869
ifreund
this zig code forms the package provided

1605895875
marler8997
they look like they are part of the project, not optional things

1605895895
ifreund
yeah these are part of the project but will vary between projects

1605895909
marler8997
ok, so the problem you're solving is...somebody needs to generate code for these protocol files

1605895932
marler8997
and zig-wayland has implemented BuildStep objects to generate these files correct?

1605895939
ifreund
yep

1605895943
marler8997
got it

1605895945
marler8997
in that case

1605895975
marler8997
I would say that you could put your Build Object definitions in something other than zig-wayland's build.zig file

1605895983
marler8997
protogen.zig

1605896034
marler8997
so with my proposal, zig-wayland would be a file tree, and the project could access any files from it, including something like protogen.zig

1605896035
ifreund
oh, and then import that from the projects build.zig? does the projects build.zig have easy access to zig-wayland's filetree?

1605896048
marler8997
yes, with the Filetree's proposal

1605896074
marler8997
this enables using files from anything, including nonzig projects

1605896095
ifreund
cool so bascially the same API I have now but without having to pass zig-wayland it's relative path and with my build.zig renamed

1605896107
ifreund
true, this is super generic

1605896137
marler8997
yeah

1605897738
frmdstryr
alexnask[m], just watched your showtime on vtables / dispatch, great job! Really interesting results

1605901341
hlolli__
is there a nice way to clone struct, like could I take `struct1: Struct` and make var struct2 = Struct{..struct1KeyVals} ?

1605901481
fengb
You copy using `var struct1 = struct2`

1605901521
hlolli__
really, lol. Yes you are right.

1605901585
hlolli__
I was just watching this about strings in zigSHOWTIME on youtube, somehow didn't occour to me that it also applies to struct instances. Which means I've probably copied structs unwillingly. Anyway thanks fengb :)

1605901659
Xavi92
Hi, we are finding the root cause why the error at the last comment is happening on

1605901942
marler8997
--verbose-cc or something I think

1605902071
marler8997
zig build-exe --help, there's like 9 --versose-* options you can use, one of them will have what you ned

1605902211
Xavi92
marler8997: thanks a lot!!

1605902217
Xavi92
--verbose-cc did it

1605902231
marler8997
cool

1605904404
andrewrk
marler8997, the build importing another build thing is something I plan to revisit with during the release cycle where we work on the package manager

1605904459
marler8997
andrewrk cool, that's where my exploration took me

1605904496
marler8997
you didn't happen to look at my filetrees draft did you?

1605904721
andrewrk
hmm nope not sure what you're referring to

1605904729
marler8997


1605904746
marler8997
I'm working through package manager use cases and what is the minimum amount of features we need for package management

1605904763
marler8997
I think I've come up with a very small set of features that accomplish what we need

1605904765
andrewrk
ah nice you took the time to write something up - I will study this

1605904771
pixelherodev
I think I'm going to pass on the CBE tests for now and focus on expanding its coverage instead

1605904790
pixelherodev
s/tests/Execution &/

1605904802
marler8997
Basically, being able to reference other build.zig files, and implementing file acquisition is all we need I think

1605904860
andrewrk
pixelherodev, I'll set something up for that soon - I have a pretty good idea of how it can work

1605904878
andrewrk
marler8997, yeah I think 95% of the implementation will be in zig code with only a tiny modification needed to stage1 code

1605904887
pixelherodev
I looked into it twice now, and had a couple ideas on how to go about it, but this is one thing you can definitely do much more easily than I can

1605904892
pixelherodev
I haven't touched zig cc at all

1605905068
andrewrk
marler8997, one idea that I had about this is that there would exist a strictly declarative (not .zig code) list of dependencies. You would still be able to use build.zig logic to conditionally depend on something, but you would have to declare the

1605905112
andrewrk
libraries which can be built in a standard way and would have a trivial build.zig file would be able to omit it

1605905198
marler8997
that idea applies to my Filetrees example would mean declaring all your filetrees in this declarative file

1605905210
marler8997
amounts to the same thing

1605905231
marler8997
my idea though is to separate zig libraries/packages from file acquisition

1605905382
andrewrk
I'm 1/2 way through, agreeing with everything so far

1605905420
marler8997
lol

1605905438
marler8997
it's not an organized proposal, it's more my thought process as I work through the details

1605905462
earnestly
marler8997: You may wonder to consider namespacing your trees by the version

1605905476
earnestly
Or hash I guess

1605905607
marler8997
earnestly, lower down in the document you can assign your trees names

1605905639
earnestly
marler8997: Have you read gogolinux's paper on package management?

1605905657
marler8997
I haven't

1605905769
marler8997
link?

1605905800
andrewrk
marler8997, I think I can solve the problem of working on dependencies problem in a simpler way than this redirect system

1605905810
marler8997
andrewrk oh?

1605905847
andrewrk
yeah, so one observation is that if you're editing a dependency, 99% of the time you are intending to send a patch to that project once you resolve the issue

1605905877
andrewrk
which means you probably have a source checkout of that dependency that you would intend to use as your development environment

1605905888
marler8997
right

1605905892
dominikh
(more true for open source than for closed source. closed source loves their custom patches they never upstream.)

1605905909
marler8997
zig filetree redirect zigsdl $HOME/git/zigsdl

1605905913
andrewrk
yeah but I'm happy to make the open source workflow feel more natural and closed source workflow feel more second class :)

1605906009
andrewrk
my counter proposal would still allow a command to do this, but the state would be tracked in the declarative package listing file, which would show up in e.g. `git diff`, rather than in this external redirects file system

1605906042
marler8997
thinking

1605906044
andrewrk
so you'd replace the url with the file path, and then leave the hash empty

1605906057
andrewrk
(or maybe there is a special value to ignore hashes)

1605906070
marler8997
so would you have to change that file for all repositories?

1605906084
marler8997
project A B C depend on project D

1605906092
andrewrk
I see, this is a good question

1605906102
marler8997
one project is the main project

1605906105
marler8997
so assume A is the main

1605906134
andrewrk
as a developer I can see wanting to pursue both possibilities

1605906141
marler8997
right

1605906155
andrewrk
maybe your debugging attitude is "I only want to mess with this for this one thing" or it is "let's make sure my changes are correct for all dependencies"

1605906192
marler8997
this might be orthogonal to having zig-redirects outside git

1605906214
marler8997
there was also ideas of having global redirects

1605906215
andrewrk
when I did a bunch of node.js stuff, I never used the "npm link" feature. I was happy with my workflow where I would directly edit the code in node_modules/ then copy the changes to the dev repo, then `rm -rf` the directory and update to reinstall the module

1605906253
andrewrk
I found this less error prone than trying to deal with the npm link feature

1605906261
marler8997
not familiar with npm link

1605906268
andrewrk
it's basically the zig redirect thing :)

1605906289
marler8997
so, you're saying we could download a copy of each dependency, probably in zig-cache

1605906302
marler8997
then developers would just modify them directoy in zig-cache?

1605906663
marler8997
if we took the proposal and remove .zig-redirects, users would still be able to modify build.zig (or deps.txt or whatever) to modify the filetree URLS to loca file paths and that would still get tracked by git

1605906695
marler8997
so I think you're proposal is really just mine but removing the redirect feature

1605906721
marler8997
and potentially putting the filetree information in another file besides build.zig (which I think is fine)

1605906896
andrewrk
I guess the main thing I'm saying is that I think we can eliminate the redirects thing and still have a great user experience

1605906932
andrewrk
btw marler8997 switching topics, I iterated on your reloader code a bit and worked out a better solution than the environment variable thing

1605906957
marler8997
andrewrk, cool what did you find?

1605906964
andrewrk
I didn't push it yet but you can use extern weak symbols to detect whether an executable is running statically or dynamically

1605906982
marler8997
(yeah, redirects may not be necessary, not sure yet though)

1605906999
andrewrk
I also realized that we can't rely on having the libraries in the dynamic section of the ELF because it could be different at runtime

1605907012
andrewrk
but that's ok - all we have to do is have an extern weak symbol on dlopen

1605907023
marler8997
"different at runtime"?

1605907031
marler8997
the names of the so files or something?

1605907040
andrewrk
so on system A, you might need to load libXfoo.so but on system B you might need to load libXbar.so

1605907041
earnestly
marler8997:

1605907066
andrewrk
all we really need though is dlopen. then we can detect what we need to do, and load the appropriate driver

1605907089
marler8997
andrewrk, gotcha, I didn't anticipate the so filenames being different, so yes, you can't rely on dynamic section

1605907095
andrewrk
so that means the next thing zig is blocking on is (1) extern weak and (2) ability to make PIEs

1605907141
marler8997
how do you use extern weak symbols to know if you're running statically or dynamically?

1605907147
marler8997
you check if they are null or something?

1605907156
ifreund
there was something else I wanted extern weak for but I can't remember what now

1605907182
andrewrk
yeah, for a static binary all extern weak symbols will be null but when executed dynamically they will be populated

1605907207
andrewrk
also std.zig.system.NativeTargetInfo.detect(arena, .{}) works on my machine - it would be a valuable contribution to self-hosted if you made it work on yours too

1605907224
andrewrk
I mean as far as detecting the dynamic linker

1605907228
marler8997
ok, so you are basically calling dlopen and then dlsym for all functions?

1605907265
andrewrk
yeah that's the idea. I didn't get to the part where I could call dlopen yet because I didn't do the -lc hack that you did, I want to make PIEs work instead of that

1605907279
andrewrk
because -lc is cheating! that's the whole thing we're trying to do - -lc at runtime :)

1605907296
marler8997
I'm not using -lc :)

1605907312
andrewrk


1605907327
marler8997
oh, the C version doesn't use libc

1605907331
andrewrk
ahh

1605907331
marler8997
zig version had some issues

1605907346
marler8997
it doesn't use libc though

1605907355
marler8997
but hold on

1605907364
marler8997
what are the steps?

1605907369
marler8997
run statically

1605907377
marler8997
detect NULL extern weak symbol

1605907387
marler8997
then find loader and run execve

1605907398
marler8997
then detect populated extern weak symbol, then run dlopen/dlsym?

1605907423
marler8997
and if those are the steps, how do you know what all your libraries/functions are?

1605907461
andrewrk


1605907472
andrewrk
the c file is just workaround for zig not having extern weak yet

1605907495
andrewrk
it gets to the execve and then crashes because the exe is not PIE

1605907539
marler8997
is "static-window" in an so file, or in the exe?

1605907548
marler8997
I mean: zig_window_get_fns

1605907567
andrewrk
it's just `zig build-exe static-window.zig static-window.c`

1605907574
marler8997
oh nice

1605907576
ifreund
huh, we are missing time_t on linux x86_64 but have it for all other archs

1605907583
ifreund
just like dev_t :/

1605907598
andrewrk
sounds like an annoying but easy contribution

1605907606
marler8997
wait, wouldn't dlopen be all you need?

1605907613
marler8997
just check if dlopen is NULL

1605907616
andrewrk
yeah

1605907618
andrewrk
exactly

1605907645
marler8997
very cool

1605907648
andrewrk
never mind dlclose that should just be deleted

1605907689
earnestly
GNU also has dlmopen

1605907720
andrewrk
earnestly, the idea here is to be libc-agnostic

1605907754
earnestly
Yes, only mentioned in the sense that those additions might be worth looking at, or not as the case may be

1605907763
andrewrk
marler8997, I think I could already PoC this in C pretty easily but I obviously want to show it off in zig instead :D

1605907779
marler8997
yean must implement extern weak symbols

1605907793
andrewrk
yeah I have a branch, hopefully can finish it up today

1605907799
marler8997
if we work on the C version, that's less incentive for people to use Zig right? :)

1605907804
andrewrk
exactly

1605907814
andrewrk
well plus that dynamic linker detection is pulling a lot of weight

1605907831
marler8997
oh yeah wait a second'

1605907832
andrewrk
although it apparently needs a patch. what system are you on where it is failing to detect your linker?

1605907838
marler8997
how do you know all the functions you need?

1605907851
marler8997
failing to detect my linker?

1605907860
marler8997
did I leave a comment about that or something?

1605907877
andrewrk


1605907898
marler8997
nixos

1605907909
andrewrk
me too

1605907932
marler8997
the reason I think it wasn't working was because I thought it was probably using libc somewhere down the line

1605907952
andrewrk
it's looking at the /usr/bin/env ELF file

1605907968
marler8997
let me try it right now

1605908057
marler8997
hey it's working now

1605908062
marler8997
probably was just a bug

1605908102
andrewrk
so after it gets to line 39 in my gist, the next step will be to detect whether the system is running X11 or Wayland or something else, and then figure out what is the appropriate .so file to load to start creating a window

1605908202
andrewrk
for x11 it looks like the first one would be Xlib.so, so that we can call XInitThreads() (just going by what GLFW does first)

1605908204
marler8997
that's like an "optional" so

1605908213
ifreund
for wayland at least you should be able to statically link libwayland. you only need to dynamically link mesa

1605908229
marler8997
are we just going to punt and use dlopen/dlsym for that?

1605908283
ifreund
as for determining which to use, chech WAYLAND_DISPLAY then DISPLAY in that order

1605908296
andrewrk
nice, yeah we'll check wayland first since wayland emulates x11

1605908335
marler8997
oh wait andrewrk, NativeTargetInfo doesn't work if you comment out "-lc" in build.zig

1605908336
dominikh
strictly speaking, Xwayland is optional, but yes, most compositors do support it. but they also need to link against X11 libs for that

1605908344
marler8997
the zig example works if you comment out "-lc"

1605908362
marler8997
just not with NativeTargetInfo

1605908406
andrewrk
hmm on my machine I am not doing -lc and it works

1605908437
ifreund
LemonMan is the best

1605908453
ifreund


1605908466
andrewrk
omg

1605908506
marler8997
jesus

1605908575
mq32
andrewrk: do i see this right that builtin functions operate on AST level?

1605908624
ifreund
mq32: see e.g. @field(), I think the answer is yes

1605908654
tdeo
and @TypeOf

1605908667
andrewrk
and @cImport

1605908676
mq32
uh, neat :)

1605908689
andrewrk
zig's builtin functions: surprise, we're 1/2 lisp

1605908695
mq32
haha :D

1605908718
mq32
just add a new type `astnode`

1605908799
tdeo
i think that'd actually be pretty trivial to add in stage1

1605908833
mq32
heh

1605908843
mq32
lisp.zig :D

1605908847
mq32
ziglisp

1605908861
mq32
@cImport is still really weird

1605908878
mq32
everything else follows typical zig rules

1605908887
tdeo


1605908912
mq32
> It's just a question of whether it's a good idea.

1605908960
mq32
i already see people using translate-c + c-codegen :D

1605909054
mq32
write some c-code at comptime

1605909059
mq32
then @cSource it :D

1605909063
skuzzymiglet
where do i put zig lib/ again?

1605909075
marler8997
with that we could probably remove @cDefine?

1605909077
skuzzymiglet
i need to bootstrap zigup with master

1605909134
ifreund
it should be ../lib/ relative to the zig binary

1605909232
skuzzymiglet
ok thanks

1605909238
skuzzymiglet
ima just stick with master

1605909582
mq32
andrewrk: is there a way to line-break at "and" or "or" in zig fmt?

1605909613
ifreund
mq32: put a line break after the and/or

1605909655
mq32
ah

1605909656
mq32
AH

1605909661
mq32
i prefix my lines usually

1605909664
mq32
return foo

1605909665
mq32
and bar;

1605909667
mq32
instead of

1605909669
mq32
return foo and

1605909669
mq32
bar;

1605909754
fengb
That‚Äôs not the zig way‚Ñ¢Ô∏è

1605909773
mq32
which one?

1605909801
fengb
zig fmt is word-of-god (except for all the bugs)

1605909818
ifreund
zig fmt lets you line break after any binary operator

1605909826
fengb
Also isn‚Äôt it mostly word-of-vexu now? >_>

1605909846
scientes
fengb, it came down on stone tablets

1605909862
fengb
The we put lightning in those tablets

1605909878
mq32
:D

1605909887
marler8997
andrewrk, another idea, instead of using dynamic section or dlopen, you could set LD_PRELOAD with the library list before you call execve on the loader

1605909994
andrewrk
mq32, zig fmt respects line breaks after all binary operators, including `and` and `or`

1605910006
mq32
okay, good to know :)

1605910017
andrewrk
excellent point marler8997

1605910059
andrewrk
although I think dlopen might be less kludgy because with the LD_PRELOAD technique we would need all the symbols to be extern weak

1605910135
marler8997
oh is that right?

1605910372
jogama
Hello; is it possible to donate to bug bounties for zig?

1605910404
marler8997
just send LemonMan an email with a check :)

1605910408
mq32
LOL

1605911460
jogama
I saw that I can email donations@ziglang.org and did so.

1605912962
hlolli__
I haven't been following all the twitch streams, I notice many of them revolve around the topic of bootstraping and self-hosting. Is there a POC for self-hosted zig compiler in wasm which can run in the browser?

1605914400
fengb
Not yet. Trying to get the existing code base to work is quite a challenge and self-hosted isn‚Äôt there yet

