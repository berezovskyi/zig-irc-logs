1604653570
alexnask[m]
PSA for zls semantic token users: union, struct, enum, opaque, namespace are no longer token types in master.

1604653571
alexnask[m]
(so for example in vscode settings changing "struct" : "<color>" to "type.struct" : "<color>" will yield the same as before)

1604653571
alexnask[m]
Instead, type is used for all but they have been added to token modifiers

1604665709
dominikh
is there a shorthand for initializing a variable to all zeroes? for example in `var m: [9]f32`, without having to specify 9 zeroes.

1604665741
ifreund
var m = [1]f32{0} ** 9;

1604665772
dominikh
how about a struct with numerous fields that I all want to be zero?

1604665824
ifreund
there's std.mem.zeros() but see the doc comment

1604665853
ifreund
zero-initing a struct usually isn't very idiomatic zig

1604665861
g-w1
you could set default values for the struct in the definition and then do .{}

1604665888
dominikh
ifreund: why is that?

1604665915
alexnask[m]
also std.mem.zeroInit that will zero out the fields if they have no default value or set them to the default value otherwise (this is super useful for WINAPI structs that are zero inited and contain a sizeof field)

1604666092
ifreund
dominikh: the idea is that variables should always be in a valid state if initialized or `undefined` if not. Zero initializing every field in a blanket way might result in nonsensical values in some cases

1604666107
ifreund
as always though, it depends

1604666173
dominikh
well, sure. probably shouldn't zero initialize a pointer that can't be zero. but there is a lot of data where all zeroes does make sense

1604666299
ifreund
default values for your fields may make more sense as well

1604666324
dominikh
possibly, yeah. I haven't gotten the hang of when to specify default values yet

1604666435
ifreund
I've been using them more and more recently, pretty much whenever the intial value I want is comptime known and always the same

1604666489
dominikh
now if only array types could have default values, too.

1604666558
dominikh
(transform matrix as a [9]f32, would've been handy to have the identity matrix as the default; but of course I could just have a constant Identity instead)

1604666559
alexnask[m]
wdym? you can use array literals to set array's default values

1604666599
ifreund
yeah there's nothing stopping you from setting the identity matrix as the default value

1604666647
dominikh
`const Matrix = [9]f32;` – I don't think I can provide a default value for this type?

1604666668
dominikh
so that `var m: Matrix = .{}` is the identity matrix

1604666723
ifreund
ah yeah, that's not a struct so no default values

1604666729
dominikh
right

1604666775
ifreund
could do this ofc: const Matrix = struct { data: [9]f32 = [9]f32{1,0,0,0,1,0,0,0,1} };

1604666850
dominikh
I think I'd rather go with `const Identity = Matrix{1,0,...}` – don't want to indirect all accesses through a field.

1604666892
ifreund
I agree

1604667138
dominikh
ah, no methods on types other than structs, either. I have much to unlearn :)

1604668432
ifreund
that's something I wouldn't mind seeing tbh, though I'm not sure how it would work

1604668452
ifreund
probably ties into the distinct types proposal

1604668474
g-w1
what is the distinct types proposal?

1604668497
dominikh
ifreund: you could convince people to like UFCS ;) but I'd rather not see that.

1604668524
g-w1
is this it

1604668524
ifreund
g-w1:

1604668539
g-w1
thanks

1604668600
dominikh
oh yeah, definitely want distinct types, too.

1604668772
dominikh
--verbose-llvm-ir prints the LLVM IR before any LLVM optimizations ran, right?

1604668898
dominikh
and if so, is there a way to dump the optimized IR?

1604669293
alexnask[m]
Yes, the emitted IR is unoptimized. I dont believe there is a way to print the IR after the optimization passes currently though it would be quite a cool feature

1604669349
scientes
alexnask[m], --emit-ir

1604669359
scientes
--release-fast --emit=llvmir

1604669362
scientes
I think will do it

1604669364
scientes
--emit-ir is clang

1604669442
scientes
dominikh, ^ but you should add your own zig_panic function if you want to reduce the amount of emitted ir

1604669463
dominikh
thank you

1604669472
alexnask[m]
Ah, didnt realize emit-lvvm-ir was after the optimizations, cool

1604669497
scientes
you can also run the unoptimized ir through llvm's opt tool

1604669510
scientes
as llvm's internal tests do

1604669792
dominikh
hm, what command is --emit=llvmir an argument to? I don't see it in zig build-obj's help output – or are you suggesting to run zig's --verbose-llvm-ir output through llc?

1604669819
g-w1
i think just run it through opt

1604669844
alexnask[m]
femit-llvm-ir[=path]     Produce a .ll file with LLVM IR (requires LLVM extensions)

1604675649
betawaffle
does zig already make use of io_uring?

1604676142
frmdstryr
No it uses kqueue or epoll (see

1604685621
dominikh


1604685648
ifreund
dominikh: you don't reset j to 0

1604685658
ifreund
it is executing the outer while 3 times

1604685669
dominikh
oh my god

1604685674
dominikh
so that's a yes on being utterly stupid

1604685675
dominikh
thanks

1604685686
ifreund
no problem, we've all been there :P

1604685719
dominikh
on that note, is there something more akin to C-style for loops, being able to declare the loop counter in the scope of the loop?

1604685759
ifreund
nope

1604685777
ifreund
you can wrap both the declaration and the loop in a block though if you like

1604685792
dominikh
yay, more nesting :/

1604685813
dominikh
is there a design rationale behind this omission?

1604685927
g-w1
I was confused why you are allowed to declare variables in loops? since there is no shadowing allwed, shouldn't this not be allowed: `for (thing) |thing2| {const v = 10;}`?

1604685942
g-w1
is it because v is always of same type?

1604685962
g-w1
or because v goes out of scope at end of iteration?

1604685967
ifreund
the latter

1604686091
ifreund
dominikh: here's the issue:

1604686117
dominikh
þanks!

1604686123
dominikh
thanks, even

1604686158
ifreund
to be honest I didn't like it at first but I've grown indifferent

1604686177
ifreund
I think having the variable declarations separate is more readable but I don't like polluting the scope

1604686219
dominikh
yeah, especially with the "no shadowing" rule

1604686312
ifreund
some C coding styles prohibit using the first part of the for loop btw

1604686362
dominikh
if we're going to argue with C style guides, we can just pull up MISRA and forbid most things :P

1604686391
ifreund
heh

1604687510
Kena
Hello computational people. Is the notation `error.OutOfMemory` (like ziglang.org) is preferred over `error{OutOfMemory}` (like ziglearn.org) ? The stayling guide denotes that a type must be written in PascalCase (TitleCase to be precise) but do not go into details regarding to the error union set type.

1604687549
fengb
The former is an actual error while the latter is an error union. They do different things

1604687551
g-w1
I think error.OutOfMemory is for one error but error{OutOfMemory} is an errorset

1604687564
fengb
Error unions are types but the actual error is a value to be returned

1604687573
g-w1
>the latter is an error union. is it a set?

1604687584
fengb
Sorry, yes error set

1604687601
Kena
I'm sorry guys, I didn't know.

1604687616
fengb
Error union is the set + the value returned e.g. error{Foo}!ValueType

1604687637
fengb
Left is the error set, right is the value type, both together is the union

1604687756
Kena
Yes I understand the binary operator ! and its ramifications. So error{OutOfMemory} is just a value of an error set, not a union error type right?

1604687772
fengb
It’s an error set declaration

1604687807
g-w1
you would use error.OutOfMemory when doing catch |e| if (e == error.OutOfMemory)

1604687822
g-w1
or switch (e) { error.OutOfMemory =>

1604687824
Kena
Then it is different than error.OutOfMemory because error{OutOfMemory} can't be accessed before being declared, I am correct?

1604687873
fengb
@TypeOf(error.OutOfMemory) == error{OutOfMemory}

1604687888
fengb
You can think of it sorta like that

1604688092
alexnask[m]
error.Foo is equivalent to error{Foo}.Foo

1604688178
g-w1
does Dir.readLink give the absolute path, or just the relative path in relation to dir of the path to where the link leads?

1604688183
Kena
But I didn't see error{OutOfMemory}.OutOfMemory once :/

1604688207
alexnask[m]
Yes, because the shorthand error.OutOfMemory is way more convenient ;)

1604688265
alexnask[m]
error.OutOfMemory <- error value, error{OutOfMemory} <- error set (which is a type)

1604688343
g-w1
i think my problem is related to how symlinks on linux works. will it return relative or absolute?

1604688459
g-w1
kena: I think you missed an answer to the question: error.OutOfMemory <- error value, error{OutOfMemory} <- error set (which is a type)

1604688494
Kena
Thanks a lot fengb gw-1 and alexnask[m] for these explanations

1604688513
Kena
Yes, the web IRC client has been disconnected for a unknown reason.

1604688534
Kena
But the log

1604690658
dutchie


1604690664
dutchie
i'm on nixos

1604692344
g-w1
when trying to repro this, zig build test-std just loops forever, testing the stdlib over and over agin

1604692352
g-w1
*again. is this happening for anyone else

1604692964
brentp
can anyone suggest a way to get around this:

1604693024
Kena
zig build test-stdCannot run step 'test-std' because it does not exist

1604693152
g-w1
kena: are you in the zig source repo?

1604693196
Kena
No... You mean I have to clone the repository ?

1604693232
g-w1
if you want to test the zig standard library, you have to have a copy of it

1604693287
Kena
Allright, I'm downloading Git

1604695298
Kena
Do I have to create a custom build.zig file?

1604695684
g-w1
no

1604695781
Kena
Semantic analysis is in progress, mon intel I3 is almost on its knees

1604695898
alexnask[m]
I would suggest running the tests with -Dskip-release -Dskip-non-native

1604696194
Kena
What's the meaning of the first flag please?

1604696251
g-w1
it will only compile it in debug mode so much faster compile times, but less fast runtime. the test run fast though.

1604696472
dominikh
is there a function that sets fields to their default values? e.g. so I can use it after allocating memory

1604696506
g-w1
does thing.* = .{}; not work?

1604696522
dominikh
good point

1604696570
dominikh
well, not quite the same, if not all fields have defaults

1604696719
g-w1
you could program one at comptime using std.builtin.TypeInfo.Struct.fields[*].default_value so you can just loop over this

1604696950
g-w1
const ti = @TypeInfo(@TypeOf(struct_passed)); const sf = switch (ti) {.Struct |s| => s, else => unreachable,}; for (sf.fields) |field| { set struct_passed.field to field.default_value; }

1604696958
g-w1
this is how I would do it

1604696965
dominikh
makes sense

1604697405
Kena
Does the LLVM emit output phase related to the run-time part of things?

1604697443
Kena
Or is it still compilation-time work?

1604697701
Kena
Allright, so my dear dutchie.  My zig version is: `0.6.0+c9551652b`, my OS is: `x86_64-windows.win10_19h1` and the output of `zig buil test-std -Dskip-release -Dskip-non-native` is available here:

1604697825
g-w1
Kena: llvm is what generates the final machine code/optimising it. it is not part of zig, so it is just generating machine code, not compile time evaluating stuff.

1604697827
Kena
However, for a side note it is `zig targets` that produces an infinite loop...

1604697858
Kena
Thank you g-w1, I'll note it in a memorandum.

1604697858
g-w1
can you try zig targets in your home directory?

1604697934
Kena
I failed a migration from debian stable to voidlinux and lost my entire RAID1, i'm just babbling on a windows 10 laptop for several months. Where is a home direction on windows?

1604697972
g-w1
C:\

1604698079
Kena
Same here, `zig targets` overhelms the terminal with the same looped JSON data

1604698198
g-w1
interesting. i would say report a bug on github issues. i dont think it is reported.

1604699012
Kena
My bad, it's not a infinite loop but it produces such noise that the output produces overwhelm the scrolling capacity of the powershell. Printing targets have a different behaviour than the one produced on UNIX-based operating systems.

1604699044
Kena
In fact, I don't think it narrows down the actual architecture target but rather prints the entire JSON possible values...

1604699107
Kena
Which it would be a bug-label issue if someone can confirm my saying on windows 10.

1604699117
pixelherodev
It's supposed to print all possible targets, I think

1604699135
pixelherodev
The fact that Windows' terminals can't handle it isn't a bug with Zig ;)

1604699170
travv0
my windows spits it out in a fraction of a second lol

1604699356
Kena
Here is a sample printed by the limited capacity of the Windows' terminal. Please tell me if it the intended behaviour of `zig targets`:

1604699408
travv0
yep that looks right

1604699409
alexnask[m]
yes, this looks ok, it just outputs a huge json object

1604699421
Kena
Allright sorry for the spam.

1604699424
pixelherodev
travv0: "some of Windows' terminals" :P

1604699431
alexnask[m]
you should pipe it into a file or some utility like jq to browse it

1604699465
Kena
Agreed.

1604699591
pixelherodev
Yeah, it's not meant for human consumption

1604699604
pixelherodev
An alternate form of output which

1604699607
pixelherodev
s/bv/be

1604699670
Kena
with a new flag like zig targets  --current

1604699728
Kena
or -Dskip-non-native like for zig build to preserve the symmetry of flags' syntax

1604699748
Kena
s/for/with

1604699985
travv0
yeah i'd like a human-readable version too, i definitely was surprised by the output the first time i ran `zig targets`

1604699995
Kena
or zig targets -Dskip-old to output only the last decade architectures lol

1604700006
travv0
lo

1604700009
travv0
*lol

1604700051
Kena
bye bye armv4...arm7

1604700228
earnestly
Does Windows have jq?

1604700297
Kena


1604700393
earnestly
12,000 lines of output, heh.  Easily filtered with jq, but that is impressive

1604700417
earnestly
zig targets | jq .native

1604700441
earnestly
triple looks odd: "triple": "x86_64-linux.5.9...5.9-gnu.2.32"

1604700837
travv0
yeah my triple looks look that as well

1604701397
Kena
"triple": "x86_64-windows.win10_19h1...win10_19h1-msvc",

1604701588
Kena
It look likes it exposes the same clustering of data than linux-kernel min.max version  (I don't recall the exact nomenclature,)

1604701663
Kena
min and max were always assigned the same values within a max.min.patch json array

1604705394
andrewrk
when you compile for the native target, the min == max

1604705427
andrewrk
that way the std lib does not include any bloat for older kernel versions or newer kernel versions - only exactly the correct code for the native one

1604706450
Kena
Thanks. On another note, does the 0.8.1 branch implies that the 0.9.0 has a such broad functional scope which require a intermediate-step to be migrated to?

