1586131718
Snektron
How is that implemented? Did you look up those hypothetical bugs or do you build on top of an existing project?

1586132547
daurnimator
andrewrk: I noticed a WINNT version constant in that mingw PR. intentional? an extra place to update when we bump min windows version?

1586139841
wilsonk
anybody know how to pass a '-W' flag to zig cc via a build.zig file? (ie. turn off a clang warning)

1586139895
shakesoda
wilsonk: in second arg to addCSourceFile

1586139924
shakesoda
i.e. exe.addCSourceFile("thing.c", &[_][]const u8{ "-Wno-return-type-c-linkage"})

1586139938
wilsonk
ah, ok. I tried just adding it after -std=c99 in the first arg and it didn't work

1586139946
wilsonk
thanks

1586140022
shakesoda
it should work as long as you pass the different args as separate strings and not, say, space separated in the same string

1586140033
wilsonk
oh, nvm...what I said didn't make sense...I mean I put my -W arg after -std=c99 in the second arg of addCSourceFIle and it didn't work.

1586140047
wilsonk
ah, ok that makes sense then

1586140055
shakesoda
like so (from my build.zig) : exe.addCSourceFile("extern/tinyfx/tinyfx.c", &[_][]const u8{ "-std=c99", "-D_CRT_SECURE_NO_WARNINGS=1" });

1586140074
wilsonk
sweet, that should work

1586141370
wilsonk
can I force a specific clang that zig will use to link with? (not zig cc but just plain zig)

1586141409
wilsonk
without modifying the source code ;)

1586143029
mikdusan
wilsonk: no

1586143114
wilsonk
alright thanks mikdusan

1586143165
mikdusan
if you're just trying to "hack" something or diagnose some issue, use "--verbose-cc" and "--verbose-link" and you can supply those command-line-args to any version of clang/ld.lld you have lying around

1586143622
daurnimator
Has anyone used zig with GTK/GObject?

1586143676
daurnimator
mini project idea for myself: a usbguard notification/approval prompt that works similar to the blueman prompts for bluetooth pairing (

1586144107
wilsonk
mikdusan: yeah, I knew those hacks but was hoping for something else

1586144271
pixelherodev
Zig hangs indefinitely if I compile with `-Drelease-fast=true` :(

1586144278
shakesoda
rip

1586144287
pixelherodev
Or release-small :(

1586144308
shakesoda
release-safe?

1586144322
pixelherodev
That's the next attempt

1586144347
pixelherodev
Hangs indefinitely in LLVM Emit Output in all three release modes

1586144360
pixelherodev
LLVM doesn't seem to like optimizing dynamic recompilers

1586144385
shakesoda
what are you recompiling from

1586144389
mikdusan
is llvm-ir generated by zig or by dynamic-recomp ?

1586144413
pixelherodev
Zig

1586144422
pixelherodev
This isn't my compiler backend :P

1586144431
pixelherodev
It generates x64 from LIMN machine code

1586144437
pixelherodev
Oh wait it gets worse

1586144441
pixelherodev
CTRL+C doesn't kill it

1586144446
pixelherodev
It looks like it does

1586144453
pixelherodev
but it stays in the background with CPU at 100% indefinitely

1586144477
mikdusan
save the .ll,  convert to .bc and run it through llvm-bcanalyzer

1586144499
pixelherodev
Ooh, good call

1586144504
pixelherodev
hmm

1586144505
mikdusan
-verify

1586144508
pixelherodev
memory usage is increasing

1586144516
pixelherodev
Slowly but surely

1586144520
pixelherodev
In large increments at a time

1586144535
pixelherodev
... and now just steadily at 0.1% at a time

1586144557
pixelherodev
Oh wait I can't do that

1586144564
pixelherodev
mikdusan, zig hangs when generating the IR

1586144570
mikdusan
oh hah

1586144574
mikdusan
my duh

1586144649
pixelherodev
:(

1586144655
pixelherodev
I was wanting to test performance

1586144676
pixelherodev
I just implemented a cache (which improved speed by 92% in debug mode :D), and wanted to see how it affected release modes

1586144686
pixelherodev
I should probably GDB attach to the running process and see what's going on

1586144712
pixelherodev
...after I emerge GDB

1586144719
pixelherodev
I was never planning on having to debug the

1586144721
pixelherodev
hmm wait

1586144727
pixelherodev
Maybe I should rebuild LLVM/Clang

1586144737
pixelherodev
I had stupid optimizations enabled when they were build

1586144739
pixelherodev
s/build/built

1586144750
pixelherodev
It's possible that it broke LLVM

1586144774
pixelherodev
Does zig support linking against clang-cpp yet?

1586144783
pixelherodev
Or does it require Clang to be built as many libraries?

1586144825
mikdusan
istr some enable-asserts option with llvm; it slows it down but maybe will catch something?

1586144877
mikdusan
LLVM_ENABLE_ASSERTIONS:BOOL

1586144879
mikdusan
Enables code assertions. Defaults to ON if and only if CMAKE_BUILD_TYPE is Debug.y

1586144879
pixelherodev
Good thing I use Zig over SSH or this would be a pain

1586144898
pixelherodev
Going to tweak the ebuild and modify the hash

1586144907
pixelherodev
because I think Zig is broken with Clang:10 on Gentoo

1586145022
mikdusan
have you tried binary tarball of zig?

1586145035
pixelherodev
Does that include LLVM?

1586145046
pixelherodev
Or does it use system LLVM?

1586145050
pixelherodev
If the latter, it likely won't help

1586145076
pixelherodev
Just going to emerge LLVM with USE=debug

1586145088
mikdusan
well it includes fully self contained zig binaries. but there are no llvm includes/libs to dev against if that's what you are asking

1586145109
pixelherodev
Nah, I meant whether it links against system LLVM specifically

1586145115
pixelherodev
I'm fairly certain my system LLVM is busted

1586145124
mikdusan
that's why i'm suggesting tarball

1586145198
pixelherodev
Yeah, but I'd rather fix system LLVM anyways

1586145233
pixelherodev
I installed Clang/LLVM 10-rc4, so with ccache it should be good within an hour anyways

1586145267
mikdusan
meh to each his own. I'd rule out system llvm simply by dowwloading zig binary tarball and building your project with it.

1586145277
pixelherodev
Might as well do that while it builds anyways

1586145662
pixelherodev
hmm

1586145681
pixelherodev
That's not good

1586145690
pixelherodev
Hanging with the binary tarball also

1586145706
pixelherodev
`ldd $(which zig)` -> statically linked

1586145787
pixelherodev
Also in all three build modes

1586145827
pixelherodev
Going to have to install GDB (and update LLVM/Clang while I'm at it)

1586145835
pixelherodev
For now I'll just stick to debug mode

1586146332
pixelherodev
Got runtime down to 49 ms in debug mode, of which at least 6% is error checking in a

1586146339
pixelherodev
(an unreachable branch)

1586168600
gonz_
Has there been any progress on getting away from LLVM for development builds?

1586168687
ikskuh
ask pixelherodev :D

1586168773
gonz_
mikdusan: Do you know why most/all debuggers on Windows have issues with lots of bindings missing even though presumably these exist in the pdb?

1586168826
gonz_
VS seems to be maybe the most solid for zig atm, but also has issues with lots of identifiers being unwatchable, etc.

1586168913
gonz_
mikdusan: Sorry if you're not the one to ask about this, by the way, I have some memory of you dealing with it at some point is why I ask.

1586173546
ikskuh
is

1586174887
daurnimator
ikskuh: its a manual process. yes, but irregularly

1586174933
ikskuh
ah

1586174948
ikskuh
then i would like to trigger that process

1586174959
ikskuh
std.fmt.format still uses the three-param form instead of a stream parameter in the docs

1586174965
ikskuh
was confused yesterday :D

1586180317
r4pr0n
just a thought - is there an easy way to integrate the zig stacktraces as the segfault handler for c programs when using zig cc?

1586190416
andrewrk
r4pr0n, yes - it's a matter of building a simple zig lib that exports attachSegfaultHandler and calls std.debug.attachSegfaultHandler()

1586190426
andrewrk
then you link against that zig lib and call that function in main()

1586190475
andrewrk
gonz_, not direct progress, but lots of indirect progress

1586194073
pixelherodev
ikskuh, I'm not the only one working on that - and arguably, I'm not

1586194082
pixelherodev
I'm writing a self-hosted LLVM backend, not a non-LLVM backend

1586194090
ikskuh
hmm :D

1586194095
ikskuh
but that's step 1 out of 2

1586194100
ikskuh
now you just have to remove LLVM

1586194103
ikskuh
easy as that!

1586194117
pixelherodev
Well, technically, yes

1586194127
pixelherodev
but it's not

1586194137
ikskuh
yeah i know

1586194142
ikskuh
writing a backend isn't that trivial

1586194216
pixelherodev
Technically, if I could twist the Zig AST into the AST I use for my backend, I could just write a Zig AST frontend

1586194263
ikskuh
😱

1586194272
ikskuh
would make compiling much faster, right?

1586194285
ikskuh
but i think the zig ast is not "compilable" as comptime is not yet resolved

1586194288
ikskuh
but i don't know :D

1586194294
BaroqueLarouche


1586194513
pixelherodev
Oh I definitely couldn't do it

1586194517
pixelherodev
It's definitely

1586194520
pixelherodev
but I definitely can't

1586194533
ikskuh
hmm

1586194543
ikskuh
let's be stupid

1586194551
ikskuh
zig emits LLVM IR somewhere

1586194558
ikskuh
this IR is then optimized by LLVM itself

1586194591
ikskuh
it would require only a shim that fakes the LLVM api used :D

1586194623
ikskuh
then zig would emit PHD-IR :D

1586194641
ikskuh
also: i just noticed a stupid design decision in a project of mine:

1586194671
ikskuh
decode a packet, allocate space on the heap, put the packet in a queue, … remove the packet from the queue, invoke a callback, delete the packet

1586194674
ikskuh
all in the same call stack

1586194687
ikskuh
looks like i can remove a whole allocation there! :D

1586194896
pixelherodev
Well, if we port over even just the Zig IR then I could probably write a frontend for that

1586194905
pixelherodev
Though I still need to finish the x64 backend

1586194918
pixelherodev
(I'm writing it for the dynarec, but I plan on cross-pollinating the projects :D)

1586194968
BaroqueLarouche
in the end, I think it would far easier to have a 68000 backend accepted in Zig alternative backend than LLVM itself

1586195026
fengb
Wouldn't we need a stable Zig IR?

1586195060
ikskuh
68k backend would be super-awesome

1586195075
TheLemonMan


1586195097
TheLemonMan
and

1586195108
BaroqueLarouche
most of LLVM 68k backend are stale

1586195138
TheLemonMan
step up and help turn it from stale into stable heh

1586195154
ikskuh
oh neat!

1586195160
BaroqueLarouche
maybe one day!

1586195541
pixelherodev
fengb, yes

1586195558
pixelherodev
There's a reason I'm focusing on infrastructure and not on zig compilation

1586199564
kristoff_it
hey all, I'm trying to build master on macOS, but I'm getting a compilation error. Is this something that was already reported?

1586199586
kristoff_it
also, I upgraded to llvm 10, that's the right thing to do, right?

1586199608
andrewrk
is it the polly issue?

1586199617
andrewrk


1586199670
kristoff_it
ah yes that's it, sorry I should have searched more

1586199686
kristoff_it
I was thrown off by another error I found before that

1586199693
andrewrk
no worries

1586199705
andrewrk
idk what's going on upstream

1586199727
andrewrk
llvm devs have this weird way they build their software, and it results in config bugs like this all the time

1586200084
pixelherodev
I have a different compilation issue with LLVM 10 :(

1586200158
kristoff_it
good luck man, I was able to paste the snippet from josephg from the GH issue and I'm already at the end of the things that I know how to do

1586200176
pixelherodev
Gentoo defaults to building a single library clang-cpp, but Zig doesn't know how to link against it; simple enough that next time I upgrade I'll probably just fix it in Zig's CMakeLists.txt instead of, you know,

1586200190
pixelherodev
Bigger problem though

1586200201
pixelherodev
How would I investigate Zig hanging indefinitely and taking more and more memory?

1586200213
pixelherodev
Current idea to `gdb -p $(pgrep zig)`

1586200220
kristoff_it
btw if anybody's interested I'm currently streaming on twitch, I'm trying to debug a crash that I couldn't find the cause of a few days ago

1586200438
mikdusan
pixelherodev: you can launch a cli with gdb. run it and when you think it's looping, hit ctrl-c

1586200458
pixelherodev
Yes but that has longer start-up time, doesn't it?

1586200474
mikdusan
is that important?

1586200474
pixelherodev
Either way, I need to wait for Clang to finish building

1586200490
pixelherodev
Well, it means it'll be more annoying to deal with

1586200514
pixelherodev
(SSH connection died and so the emerge halted :_(

1586200655
torque
use mosh and tmux at all times

1586200669
pixelherodev
mosh?

1586200676
pixelherodev
should've used tmux though, that's a good call

1586200688
torque


1586200701
companion_cube
mosh is awesome

1586200709
pixelherodev
Gah

1586200711
companion_cube
especially if you take the bus or train with a bad connection

1586200713
pixelherodev
Need to edit the ebuild further

1586200723
pixelherodev
Fortunately, the whole build is in the ccache so it'll finish in two minutes

1586200733
pixelherodev
But I forgot to tweak the installation command :(

1586201521
pmwhite
Wow, mosh, is really cool. Why did I not know about this before.

1586201557
pixelherodev
Whoa same

1586201566
pixelherodev
Emerging :)

1586201571
companion_cube
I forgot about ~. in ssh after starting using mosh

1586201683
companion_cube
back in my days, we had planes and trains we would take laptops on ;)

1586201688
companion_cube
sometimes even close the laptop's lid

1586201713
shakesoda
in the beforetimes, when the rumored "outside" existed?

1586201783
companion_cube
exactly

1586201852
pixelherodev
ikskuh, I'm using a 5GHz network from my room in a relatively dated house which has walls / floors that block network signals

1586201857
pixelherodev
So, yeah

1586201867
ikskuh
this should not break your SSH session

1586201932
ikskuh
but yeah, i can imagine that it is annoying in some cases

1586201973
ikskuh
but as long as you don't change route, an SSH session is stable

1586201986
pixelherodev
This wasn't

1586203114
pixelherodev
Gah, same patch is needed for LLD

1586203126
pixelherodev
ccache did help though, clang built and installed in <5 minutes :D

1586205286
andrewrk
FireFox317, I got x86_64-windows-gnu bootstrapping successfully

1586205326
ForLoveOfCats
I'm probably missing something but it seems that the online std docs have not been updated since late Feburary?

1586205375
ForLoveOfCats
I'm sure this is a known thing, I just want to understand the situation :)

1586205398
ForLoveOfCats
Or perhaps I'm being silly, just want to figure this out

1586205445
ikskuh
andrewrk: \o/

1586205472
andrewrk
ForLoveOfCats, yes the std lib docs are not updated automatically yet

1586205494
andrewrk
ikskuh, now the question is: are we going to have 32-bit windows bootstrapping successfully in time for the release?

1586205545
ikskuh
this will be an interesting release cycle for sure

1586205646
pixelherodev
Aren't they all?

1586205696
ikskuh
yeah, true

1586205845
FireFox317
andrewrk, nice!! so cool, all this stuff is now possible with `zig cc`, it gets a big part in the release notes i guess? and its even a week old or something xd

1586206011
andrewrk
I think a bunch of potential users of zig cc are waiting for the release to check it otu

1586206114
ikskuh
they changelog will be huge anyways again :

1586206115
ikskuh
:D

1586206170
FireFox317
kristoff_it, was nice helping you on stream :)

1586206184
kristoff_it
thank you again FireFox317 :D

1586207832
pixelherodev
I think the way `zig fmt` handles switches is going to force me to use if/else chains :(

1586207838
pixelherodev
I have ~3 nested switches

1586207867
pixelherodev
(@TypeOf(source) -> @TypeOf(destination) -> Register=> destination.OperandWidth)

1586207881
pixelherodev
Ends up with more than 7 levels of indentation

1586207887
ikskuh
use functions!

1586207899
pixelherodev
This is one single operation though

1586207904
pixelherodev
It's the x64 mov

1586207945
pixelherodev
If going from imm to register, it's one path; depending on the register, it might have to use a different encoding (or might choose to because it's smaller/faster)

1586207964
ikskuh
x64 mov is not "single operation" :D

1586207969
ikskuh
it's turing complete :D

1586207970
pixelherodev
There's also register to memory, memory to register, register-as-pointer to register, register-as-pointer to memory...

1586207980
pixelherodev
I mean

1586207982
pixelherodev
Technically

1586207984
pixelherodev
Yes

1586207986
pixelherodev
but also

1586207987
ikskuh
do you know movfuscator?

1586207993
ikskuh
someone has done it :D

1586207994
pixelherodev
compiles C to mov?

1586207997
ikskuh
yep

1586207999
pixelherodev
yeah

1586208005
pixelherodev
It's a single abstract operation, hypothetically

1586208018
pixelherodev
The fact that there are enough permutations to be turing-complete isn't really the point

1586208023
pixelherodev
Still, I might use internal functions

1586208027
pixelherodev
Not a bad idea

1586208084
pixelherodev
ugh

1586208096
pixelherodev
I'mma switch over to a different project for now

1586208164
pixelherodev
You know what, I'll leave it as a switch for now and mark it as TODO

1586208175
pixelherodev
Better than getting frustrated now, I'll do it later when it won't bother me as much

1586208244
pixelherodev
Ah

1586208251
pixelherodev
Seems to be hanging on the InstructionCombiningPass in LLVM

1586208256
pixelherodev
There a way to disable that in Zig?

1586208284
pixelherodev
Going to leave it for a few minutes just to double check but I'm fairly certain it's that

1586208357
pixelherodev
Yeah, and I'm pretty sure it's on a single function too...

1586208505
Snektron
iksuh: mov is not completely Turing complete

1586208556
Snektron
Unless you count jmp as mov

1586208598
Snektron
movfuscator cheats by installing a signal handler for SIGILL

1586208621
Snektron
The last instruction is an invalid move, then flow is returned back to the start via the signal handler

1586208623
ikskuh
ah lul :D

1586208631
pixelherodev
dangit

1586208634
ikskuh
well, still valid :D

1586208641
ikskuh
another solution

1586208651
ikskuh
we just map enough memory to roll around

1586208651
ikskuh
!

1586208666
pixelherodev
better yet

1586208672
pixelherodev
Map the same memory into the whole address space

1586208679
pixelherodev
just a bunch of nops till it loops around

1586208680
pixelherodev
:P

1586208825
pixelherodev
Going to try overriding optimization level to 1 and seeing what happens

1586208858
pixelherodev
Is it possible to have a specs-compliant incremental compiler for C?

1586208894
ikskuh
what do you mean by incremental? just recompile what has changed?

1586208897
pixelherodev
Yeah

1586208902
ikskuh
you still have to relink though

1586208908
ikskuh
MS is doing this afaik

1586208923
pixelherodev
Weird that there isn't a FOSS one; there's a number of langs doing it already

1586209009
pixelherodev
Still hanging with -O1 :(

1586209711
pixelherodev
If I override to -O0, it produces faster code - technically.

1586209717
pixelherodev
It also produces

1586209722
pixelherodev
:(

1586209799
pixelherodev
Much much faster before it segfaults though

1586209906
pixelherodev
Actually, I think debug mode is letting me do another thing I shouldn't be able to

1586209916
pixelherodev
I'm `discard`ing on an empty FIFO

1586209925
pixelherodev
Which causes a null pointer to be passed around

1586209937
pixelherodev
Wait no, it should be static :(

1586210017
pixelherodev
No wait I was right

1586210024
pixelherodev
It's taking the address of a zero-length slice

1586210033
pixelherodev
So even though the underlying array is defined, it produces an undefined pointer

1586210162
ikskuh
huh

1586210178
ikskuh
there are a lot of networking syscalls missing :D

1586210245
pixelherodev
Now it segfaults formatting output in std.debug.warn :P

1586210330
pixelherodev
I think this might be a good first thing to investigate in LLVM though

1586210336
pixelherodev
Fixing the instructioncombining pass

1586210425
pixelherodev
Ohhhhh I know why it's crashing in generated code

1586210450
pixelherodev
I'm assuming C calling convention for e.g. available registers, ABI

1586210469
pixelherodev
So when I call to functions that are now optimized to break that ABI, my generated machine code is no longer valid

1586210759
FireFox317
hey kristoff_it, i was looking into your issue with the docs generation. what was the last time your tried that? because i fixed the docs generation on march 4 (PR: #4616), i think it should work on master

1586210824
FireFox317
work as in, not crash :) there are a lot of issues still with docs generation not having all the info etc, but it should generated some stuff

1586211759
pixelherodev
Is there a way to check release mode from within code?

1586211819
andrewrk
std.builtin.mode

1586211857
pixelherodev
Ah, thanks!

1586211877
pixelherodev
Need to avoid calls to any functions not explicitly marked callconv(.C) within release mode, clearly

1586211949
pixelherodev
Yep, now it works!

1586211959
pixelherodev
Not really optimized (because of the crash), but still an improvement

1586211980
pixelherodev
From ~170ms to ~20ms, so that's more than enough

1586212001
ikskuh
andrewrk: I noticed the TailQueue(T)-struct from std allows arbitrary nodes to be removed from it (even if not contained)

1586212015
ikskuh
do you think it's reasonable to check "is contained" in debug mode?

1586212029
ikskuh
and have an assert that checks this?

1586212037
fengb
Doesn't that require iterating through the chain?

1586212042
ikskuh
yep

1586212066
ikskuh
but can catch some nasty errors like "i removed from this queue and now both queues are kinda linked?"

1586212091
andrewrk
safety checks that change big-O complexity should probably be separately configured

1586212112
andrewrk
oh, I broke master

1586212229
ikskuh
\O/ … /o\

1586212243
ikskuh
and yes, that's why i was asking

1586213456
daurnimator


1586213465
daurnimator
andrewrk: ^ after release, you should have a read through of that

1586213691
andrewrk
yeah looking forward to it

1586213694
andrewrk
just posted it to /r/zig heh

1586215223
pixelherodev
Would a patch to allow overriding the optimization level on the command line be accepted?

1586215257
pixelherodev
Not sure there's really any other use for it besides bug workarounds though

1586215452
andrewrk
not sure what you're trying to do

1586215459
andrewrk
ah, bug workarounds

1586215492
andrewrk
I believe

1586215849
pixelherodev
Maybe, but that's a long ways off; this is ~10 lines

1586215869
pixelherodev
Currently I just forced OptimizationLevel to zero regardless of mode

1586215921
pixelherodev
Which, interestingly, still provides massive speedups (~160ms to ~20ms as of my latest changes IIRC)

1586215963
pixelherodev
I do want to look into the upstream bug eventually

1586216068
andrewrk
I think workarounds should stay as workarounds and not get promoted to features

1586216111
andrewrk
which is a euphemistic way to say: sorry, you'll have to maintain that patch until the upstream issue can be sorted out (are you sure it's an upstream issue? it could be UB in your application)

1586216141
andrewrk
valgrind might have some clues, idk if you mentioned you tried this yet

1586216182
pixelherodev
andrewrk, certain.

1586216187
pixelherodev
Because it's not that the code is running wrong

1586216191
pixelherodev
the compiler hangs indefinitely

1586216199
pixelherodev
The

1586216214
pixelherodev
Both with Zig tarball and with locally built LLVM+Clang with LLVM_ASSERTIONS ON

1586216228
andrewrk
oh, it's a compiler hang

1586216233
pixelherodev
There is UB in my program, yes

1586216237
pixelherodev
but that's a separate issue

1586216253
andrewrk
yeah if I'm going to put any effort into this issue, it's going to be fixing the upstream bug, not implementing a general purpose workaround flag

1586216255
pixelherodev
Which only got exposed once I overrode optimization level to 0, allowing the compiler to complete without issue

1586216267
pixelherodev
No worries I get it

1586216281
pixelherodev
Pretty sure it'll be hell to investigate though

1586216293
andrewrk
infinite loops are usually pretty straightforward

1586216321
pixelherodev
I don't mean it's like a while(true), but more like a mutually recursive loop or something

1586216323
pixelherodev
Not completely sure

1586216327
pixelherodev
eh, I'll look into it now

1586216337
pixelherodev
What good is all the GB of LLVM source if not for debugging :)

1586216364
andrewrk
oh it's an infinite loop in llvm's guts?

1586216367
pixelherodev
Yeah

1586216369
pixelherodev
Not in Zig

1586216380
pixelherodev
In the InstructionCombiningPass

1586216385
andrewrk
hm. there's a decent chance of getting an llvm dev to fix that if you put together a nice reduction

1586216404
pixelherodev
Is there a usable tool for automatically reducing Zig?

1586216411
pixelherodev
I remember vaguely something about that

1586216417
andrewrk
no, but one person said that they got creduce to work for zig

1586216445
pixelherodev
That's what I was thinking of, creduce

1586216449
pixelherodev
Hoepfully it works

1586216495
pixelherodev
But I want to investigate it myself anyways

1586216523
pixelherodev
I plan on beginning contributing to LLVM a little bit over this year anyways, this seems like a good opportunity for learning more about it

1586216560
andrewrk
you should be able to use --verbose-llvm-ir, copy that output to a .ll file, and submit that. llvm has an IR reducing tool

1586216576
pixelherodev
Except for one problem

1586216580
pixelherodev


1586216614
andrewrk
LLVMDumpModule is hanging? are you sure? that happens before LLVMEmitModuleToFile

1586216624
pixelherodev
Ah okay then it'll be fine

1586216640
andrewrk
--verbose-llvm-ir dumps to stderr, so you have to manually do a large copy+paste, but it should have your output

1586216661
pixelherodev
Or just 2>a.ll

1586216680
andrewrk
right but then you'll have to possibly delete extra junk

1586216689
andrewrk
you can search for ; ModuleID or something like that

1586216703
pixelherodev
I'm more than passingly familiar with LLVM IR at this point :D

1586216722
andrewrk
:)

1586216760
pixelherodev
No junk either, strangely

1586216764
pixelherodev
It's valid IR

1586216771
pixelherodev
Nothing needed deleting, I mean

1586216814
andrewrk
I think if your compiler-rt is not already cached it would also be in there, and anything that happened to get printed to stderr, etc

1586216847
andrewrk
just need to check, if it's clean, you're good 👍

1586216904
pixelherodev
Ah

1586216913
pixelherodev
Okay, yeah, I've built before so it's already cached

1586216917
pixelherodev
Weirdness:

1586216922
pixelherodev
if I manually run `opt -instcombine` it works fine

1586216992
pixelherodev
... huh

1586216997
pixelherodev
If I do `-O3` it fails though

1586217018
andrewrk
can you repro the hang with clang -O3 ?

1586217023
pixelherodev
I think there's an unrelated optimization that's messing up the code pre-instcombine

1586217039
pixelherodev
You mean `clang IR -O3`?

1586217056
andrewrk
nah, `clang -o foo foo.ll -O3`

1586217061
pixelherodev
That's what I meant

1586217065
pixelherodev
s/IR/file.ll

1586217072
pixelherodev
Yeah

1586217074
pixelherodev
Same thing happens

1586217083
andrewrk
great, now it's proven to be llvm's fault and not zig

1586217093
mikdusan
-very

1586217095
mikdusan
-verify

1586217118
pixelherodev
You mean `opt a.ll -verify [-S -o b.ll]`?

1586217146
pixelherodev
How would I go about reducing the IR?

1586217152
pixelherodev
Ah wait

1586217157
pixelherodev
llvm-reduce is probably the way to go :P

1586217506
pixelherodev
Might not be an upstream bug

1586217513
pixelherodev
Reduced test case seems to think the IR is invalid

1586217528
pixelherodev
Even though it seems fine with `clang -O0` ...

1586217561
pixelherodev
Seems to think the debug info is invalid?

1586217574
pixelherodev
`warning: ignoring debug info with an invalid version (0) in reduced.ll`

