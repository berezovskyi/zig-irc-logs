1585872805
mikdusan
andrewrk: does your quick eyeball see anything wrong with what I'm seeing in foo2() ? I've got a WIP PR for #3963 and looking good so far but this case was unexpected. if this is expected behavior then I'll just follow the ConstPtrSpecialRef to ref.pointee

1585872868
mikdusan


1585872972
mikdusan
oh wow riscv64 qemu CI tests. neato

1585872995
andrewrk
yeah thanks to your work getting that static qemu tarball

1585873005
andrewrk
sorry, without closer inspection I can't think of anything

1585873008
mikdusan
I think you just like making checkmarks in zig's matrix

1585873028
mikdusan
no prob. I'll comment it to bring attention in PR review.

1585873138
andrewrk
it would be good PR to have a risc-v 64 tarball with the release. people would talk about that

1585873281
mikdusan
that would be pretty slick

1585878857
fengb
Bah, I was too hopeful that Homebrew would just fix the polly issue

1585879129
Yardanico
how can I build a binary for another target with "zig build"? do I need to modify build.zig for that?

1585879180
fengb
Yep

1585879230
Yardanico
and what do I need to add exactly?

1585879279
fengb


1585879285
Yardanico
oh, thanks

1585879957
pixelherodev
shakesoda, what?

1585879963
pixelherodev
"Twitter syndrome?"

1585881077
shakesoda
pixelherodev: reloads crap out from beneath you

1585881117
shakesoda
twitter does that kind of crap constantly. auto-refreshing things from under your mouse, refreshing pages out of existence etc

1585881120
shakesoda
it's a nightmare

1585881388
pixelherodev
ah

1585881395
pixelherodev
Don't use Twitter, so I wouldn't know :)

1585881470
fengb
Do we have a naming convention of functions returning other functions?

1585881501
andrewrk
no but maybe that's a good idea

1585881512
fengb
`makeAtomicRmw`

1585882305
mikdusan
I wonder if it would be better to organize our tests around topics, and self-contain them. behavior.zig would then explicitly @import the unit tests, and for example compile-errors would import those files and naming conv like `<topic>/` with `test.zig` for units, and `compile-error.zig` and the naming tells us what should do the import

1585882954
redj
zig cc -- src/sys/DualPipe.ec:1:10: fatal error: 'stdarg.h' file not found -- shouldn't that work?

1585882980
mikdusan
yes. whenever I see stdarg.h not found I think, hey are you on macOS? :)

1585883002
redj
I tried -target native-native-gnu and x86_64-linux-gnu but same result

1585883009
redj
mikdusan: I'm on windows 10 and linux

1585883021
redj
though I have yet to run zig on windows

1585883087
diltsman
Does anyone know of an example of how to use an ArrayList with an OutStream?  I have been trying to get it to work and it is driving me crazy.

1585883118
fengb
Hmm, methods on enums can't accept a pointer? :(

1585893516
pixelherodev
I get distracted by side projects way too easily

1585893517
pixelherodev


1585893627
pixelherodev
Also, ANSI color codes are one of the greatest inventions of all time, and nobody can convince me otherwise

1585897304
pixelherodev
I just remembered zasm exists... please tell me it's not already able to produce binaries in memory

1585897373
pixelherodev
Ah phew

1585905694
x0r19x91
Hi

1585906332
ifreund
yo

1585906640
x0r19x91
should we keep a discord on this ?

1585908248
ifreund
i think there already is a discord

1585908262
x0r19x91
can you give the link please

1585908336
ifreund
i don't know it, check the wesbite and github

1585908346
ifreund
*website

1585910074
FireFox317
x0r19x91,

1585918961
yurip
Hi everyone, I'm experimenting with translating an existing C base to zig. I'm starting with the build system. An old blog post on the subject uses addCExecutable, but that seems to be gone. What's the recommended way now?

1585919022
ifreund
yurip: should be addCSourceFile() I think

1585919034
ifreund
see this example:

1585919084
yurip
great, thanks! Hadn't seen that docs section yet, either

1585919089
yurip
I'll give it a read

1585919107
ifreund
no problem, and good luck!

1585919662
fengb
I'm triggering some compile errors in unused branches. Are builtin functions less lazy?

1585924334
ikskuh
is it possible to change the trapping behaviour of the ubsan?

1585925264
FireFox317
fengb, are you working on compiler-rt atomic? Maybe we can combine forces, becasue i'm working on it too

1585925284
fengb
Oh

1585925305
TheLemonMan
lel, I was about to submit a PR for that

1585925319
FireFox317
lol

1585925332
fengb
Ha

1585925345
fengb
I'll just let the pros take over

1585925386
FireFox317
this is my progress:

1585925400
fengb


1585925474
FireFox317
fengb, ah you used some neat tricks

1585925512
fengb
I figured we can prove comptime is much nicer than macros :P

1585925537
ikskuh
fengb: you  can even calculate the names of the exported functions with comptime ;)

1585925601
FireFox317
ikskuh, was thinking about that too, only the names of exported functions right? not of zig functions

1585925642
ikskuh
you can probably even generate the functions itself by using a generic struct for that

1585925655
fengb
That's what I'm doing :)

1585925663
fengb
Didn't get to exporting yet

1585925665
ikskuh
pub fn __atomic_load_2(src: *u16, model: c_int) callconv(.C) u16 {

1585925666
ikskuh
return atomic_load(u16, src, model);

1585925666
ikskuh
}

1585925670
ikskuh
this can be 100% comptime generated

1585925756
fengb
Something like `@export(makeAtomicLoad(u32), .{ .name = "__atomic_load_2" })`

1585925822
ikskuh
yep

1585925830
ikskuh
but __atomic_load_4 ;)

1585925835
ikskuh
and: you can calculate that name

1585925853
ikskuh
and do just an inline for([_]type { u8,  16, u32, u64, u128 }) |T| { }

1585925892
FireFox317
yeah i guess TheLemonMan is also/already doing that

1585925917
TheLemonMan
yeah, no way I'm typing all that shit by hand

1585925944
ikskuh
:D

1585925968
BaroqueLarouche


1585926012
fengb
I guessed wrong! lol

1585926053
fengb
I'd probably just manually write the exports though. It's not too many more lines and copy paste is easier on my brain

1585926296
TheLemonMan
I'm hitting so many comptime bugs

1585926357
andrewrk
thanks for the tip TheLemonMan, was able to resolve the riscv thing

1585926395
fengb
Sometimes I want to tell Zig to stop helping. It can get frustrating trying to map to C semantics >_>

1585926451
andrewrk
self-hosted needs a much more deliberate design plan for how to do comptime. none of this experimentation based design that stage1 evolved from

1585926452
FireFox317
andrewrk, nice! so that means we get a ricv binary for 0.6.0 ? <3

1585926465
andrewrk
no so fast, still need to test it in the bootstrap repo :)

1585926471
TheLemonMan
andrewrk, cool, the whole ABI thing gets unwieldy pretty quick

1585926486
TheLemonMan
you have the ABI in the triple, the float ABI, the machine ABI...

1585926515
andrewrk
yeah. std.Target.Abi might need to get slightly more complicated, similar to how the cpu and os have recently

1585926569
ikskuh
what could provoke undefined behaviour in a function pointer call that ud2 is executed after the return of that function pointer?

1585926588
TheLemonMan
noreturn function?

1585926599
ikskuh
nope

1585926604
ikskuh
void (*func)(void *);

1585926673
TheLemonMan
if the function jumps to ud2 right after the `bx lr` you may have some other thing going on

1585926702
ikskuh
x86_64, but yes, it does

1585926712
ikskuh
kinda?

1585926743
ikskuh
gdb tells me that the line of code is an assert

1585926752
ikskuh
but code after that assert got executed

1585926794
ikskuh
could it be a stack overflow?

1585926845
TheLemonMan
does the control flow resume after the branch to the function pointer?

1585926874
TheLemonMan
if it's returning to god-knows-where then you have a stack overflow

1585926883
TheLemonMan
or calling convention mismatch

1585926993
FireFox317
We closed almost twice as many issues as the previous release cycle :O 516 now comparing to 260 of the previous one

1585927037
FireFox317
s/we/andrewrk/

1585927047
ikskuh
nice!

1585927048
andrewrk
nah it's we for sure

1585927070
andrewrk
I am but one man, capable of a fixed amount of work. the contributions have skyrocketed this cycle

1585927101
andrewrk
special thanks to TheLemonMan for solving so many non-x86 issues

1585927111
ikskuh
TheLemonMan: i think it's a SO

1585927121
ikskuh
or some stupid programming mistake of mine

1585927121
andrewrk
also for yelling at me hard enough to learn how to use QEMU :)

1585927134
BaroqueLarouche
TheLemonMan is a MVP

1585927150
TheLemonMan
I'm just doing my part to accelerate the slow death of x86

1585927153
ikskuh
TheLemonMan: Slap me. Slap me hard.

1585927162
BaroqueLarouche
hahahaha

1585927165
andrewrk
kinky

1585927182
ikskuh
thou shalt not cast a function pointer

1585927208
ikskuh
i really wonder how that resolved into having a ud2 instruction in a completly other function

1585927214
ikskuh
but it looks like it worked correctly

1585927221
ikskuh
and did what it should

1585927331
TheLemonMan
haha nice

1585927345
ikskuh
well, it definitly sanitized some undefined behaviour

1585927347
ikskuh
because

1585927358
ikskuh
void foo(void*) and void foo(CAMERA*) are definitly not castable :D

1585927368
TheLemonMan
there's a lot of stuff that runs just fine due to sheer luck

1585927384
andrewrk
or misfortune, from a different perspective

1585927427
TheLemonMan
think of the aarch64 issue, we've been running with a faulty builtin for who knows how much time

1585927436
ikskuh
yeah, having a UBSan active all the time is great :)

1585927438
TheLemonMan
and everything worked just fine!

1585927446
andrewrk
yeah that was pretty crazy

1585927476
andrewrk
FireFox317, this riscv64 llvm build looks like it might succeed :D

1585927539
fengb
No errors means working fine right?

1585927611
TheLemonMan
andrewrk, `obj[start..end:T]` is meant to produce a slice with length (end-start+1) and an assertion that obj[end] == T, right?

1585927693
andrewrk
length should be end-start, no +1. otherwise yes

1585927734
andrewrk
note that obj[end..end] is allowed

1585927769
TheLemonMan
oh sure, I meant that the slicing operation should also assert that there's space for one more item in the backing object

1585927806
andrewrk
ahh I see

1585927886
TheLemonMan
#4857 helped me to find some potential oob sentinels in the stdlib

1585927932
fengb


1585928017
ikskuh
hrhr

1585928203
ifreund
can't way till i can boot up zigux

1585928211
ifreund
or zigos

1585928229
BaroqueLarouche
yeah, we need a equivalent of Serenity OS written in Zig

1585928382
ifreund
i think the true victory would be gradually rewriting linux in zig, but that'll take 100 years

1585928411
fengb
V already has an OS going

1585928435
fengb
Oh... apparently it's dead already? I'm not surprised >_>

1585928556
andrewrk
I'd be more interested in an OS that is specifically designed for low latency rather than throughput, with a really nice kernel audio API

1585928565
andrewrk
an OS that you could rely on for live performances

1585928578
andrewrk
linux is unfortunately deeply flawed for this use case

1585928650
ifreund
i've been using MuQss for a while, been working quite well so far

1585928652
TheLemonMan
starting with kernel modules written in Zig is a better plan IMO

1585928656
andrewrk
damn, clang crashed trying to build itself for riscv

1585928687
ifreund
but yeah that doesn't go as far as building an os from the ground up for low latency could

1585928702
TheLemonMan
classic clang!

1585928724
mikdusan
andrewrk: unable to create branch something-or-something ?

1585928736
andrewrk
yeah: "Unable to insert indirect branch"

1585928755
andrewrk
it looks like a workaround would be disabling the NVPTX backend, but I am loathe to do that

1585928989
TheLemonMan
hmm, if I have a `defer <foo>` and a `return <x>` is <foo> executed before <x> ?

1585929053
andrewrk
<x> is evaluated, then <foo>

1585929144
TheLemonMan
cool, thanks

1585934569
TheLemonMan
andrewrk, #4924 should unblock the arm/mipsel bootstrap

1585934576
andrewrk
exciting!

1585934621
TheLemonMan
I've briefly tested all the builtins with some C++11 atomics, ymmv ofc

1585934898
fengb
Oh you ended up ignoring the non-locked optimizations? That simplifies quite a bit

1585935122
TheLemonMan
the sized builtins are implemented using the llvm builtins, that's what clang does too

1585935145
TheLemonMan
pretty much every architecture ensures the load/store are atomic up to the pointer size

1585935231
fengb
I was using this as reference:

1585935281
fengb
The semantics don't match Zig's `@cmpxchgStrong` so I spent forever trying to remap it

1585935340
fengb
By forever, I mean 2 hours >_>

1585935449
TheLemonMan
yeah getting trough that maze of macros/builtins takes some time

1585935539
TheLemonMan
IMO the lock-free optimizations in the runtime-known case are not that important, those builtins aren't really meant for hot paths

1585935660
fengb
Ah okay, those were the hardest parts to get right because Zig was pretty anal about the comptime semantics

1585935683
fengb
And remapping the runtime C values was driving me crazy

1585935713
TheLemonMan
gcc specification is kind enough to let you use a strong memory order everywhere

1585935729
TheLemonMan
it greatly simplifies everything heh

1585935754
fengb
I suppose it's not wrong, just not necessarily as optimized

1585935767
TheLemonMan
yeah

1585936909
andrewrk
here's where mipsel-linux-musl is landing with that patch applied:

1585937089
FireFox317
TheLemonMan, you saw tests were failing?

1585937159
andrewrk
it's the linkage thing, the way compiler-rt tests run is the linkage gets set to internal for tests

1585937180
andrewrk
so unfortunately `export` keyword can't be used, it has to be `@export` with the linkage param

1585937284
FireFox317
andrewrk, did you try the patch on `armv6kz-linux-musleabi`? if you don't have a lot of time i can try that one

1585937326
andrewrk
yeah running it now

1585937445
TheLemonMan
yeah saw that, I forgot to remove the export

1585937543
FireFox317
Nice PR tho! It's nice to see how someone implemented if you also tried it xd

1585937816
TheLemonMan
too bad it was not enough to tame the MIPS god!

1585937877
andrewrk
it's possible that I missed a flag that was supposed to be added on mips when building libc++.a

1585937930
TheLemonMan
have you tried building that as -fPIC

1585937971
andrewrk
look like -fPIC is on for all libc++ and libc++abi files

1585938258
andrewrk
it's not reproducible with c++ hello world

1585938407
andrewrk
maybe something to do with linking .so files

1585938525
andrewrk
too bad, because these .so files aren't needed for bootstrapping purposes. but llvm provides no cmake flags to disable them

1585938890
andrewrk
69%

1585940120
andrewrk
using TheLemonMan's compiler_rt patch I have an armv6kz-linux-musleabi build :)

1585940166
fengb
🤘

1585940169
TheLemonMan
now you should bootstrap zig using that copy of zig

1585940183
fengb
I... didn’t know there was an emoji for that

1585940342
companion_cube
🖖

1585940403
fengb
🦾

1585940841
pixelherodev
Someone send me a screenshot? I'm stuck with a lame font over here :)

1585940892
ifreund


1585941436
ifreund
isn't this such a beautiful function :D

1585941629
andrewrk
ifreund, it's pretty. IMO zig fmt should put the curly brace on the next line, after .current_tags != 0)

1585941687
ifreund
yeah I agree

1585941710
fengb
if within an if?

1585941757
ifreund
it actually just got worse since I forgot something

1585941764
ifreund
now we're 3 deep

1585941797
ifreund
whoops, screwed up the paste

1585941854
andrewrk
regarding mips, at least the 64 bit and 32 bit ones are hitting the same problem

1585941915
shakesoda
ifreund: i hate it lol

1585942007
ifreund
i should probably rewrite this, but that can wait for later

1585946249
pixelherodev
Oh my god

1585946252
pixelherodev
What is that

1585946258
pixelherodev
Those nested functions...

1585947142
yurip
what's the best way to add a bunch of C source files with the same args to a build? It looks like

1585947212
ikskuh
yurip: right from my current wip port to zig build:

1585947213
ikskuh


1585947262
yurip
ikskuh: thank you, that's just what I need!

1585947268
ikskuh
you're welcome

1585947338
ikskuh
btw, i ported zlib and physfs to a zig-build project

1585947400
yurip
awesome!

1585947410
yurip
the same one?

1585947483
ikskuh
yeah those libs are in the same repo

1585947489
ikskuh
working on ODE right now :D

1585947528
yurip
nice

1585947550
yurip
is it hard?

1585947566
ikskuh
nah, ODE is just … much

1585947575
ikskuh
also i don't want to support a full featured build

1585947581
ikskuh
only with those features i require

1585947585
andrewrk
I wonder how BaroqueLarouche's inflate implementation is going

1585947632
ikskuh
heh. goodbye zlib?

1585947636
yurip
zig support for DEFLATE would be great

1585947641
BaroqueLarouche
andrewrk:  inflate is working

1585947645
ikskuh
neat!

1585947673
BaroqueLarouche


1585947685
BaroqueLarouche
(only decompression for now)

1585947687
pmwhite
is zlib the zig standard library?

1585947713
yurip
i'm considering using zig for a fairly major embedded project over the next year or so (student stuff), and having data compression might be important

1585947724
BaroqueLarouche
it will once I wrote a deflate (compression) implementation

1585947734
yurip
looking forward to compression!

1585947760
yurip
BaroqueLarouche: awesome, looking forward to it

1585947796
BaroqueLarouche
I want to finish reading PNG support first

1585947809
BaroqueLarouche
doing interlaced support this weekend

1585949657
ikskuh
oh man

1585949660
ikskuh
building ODE is hell

1585949662
ikskuh
:D

1585949727
ikskuh
there are build-files for autotools,cmake AND premake

1585949874
mikdusan
how does one find the default linker script (internal?) used by lld

1585951654
pixelherodev


1585951656
pixelherodev
That's terrifying

1585951681
ikskuh
there's some action

1585951682
pixelherodev
Someone pointed this out elsewhere, but that's a

1585951705
pixelherodev
At a glance, that's ~15 unique names on the first page

1585951719
pixelherodev
Dozens of unique contributors within the past two hours alone

1585951732
mikdusan
they're AI

1585951833
ikskuh
what the heck are they building?!

1585951860
ikskuh


1585951875
pixelherodev
...

1585951879
pixelherodev
This isn't a research project.

1585951891
pmwhite
New mobile OS, right?

1585951904
ikskuh
probably

1585951913
pixelherodev
Question is

1585951915
pixelherodev
Is that a good thing?

1585951925
pixelherodev
It's obvious why they're doing it

1585951928
pixelherodev
They want more control

1585951942
ikskuh
i'll stay with my trusty linux :D

1585951957
pixelherodev
I mean, I like the ideas

1585951977
fengb
I'm not sure they need more control on Android

1585951979
pixelherodev
Tighter integration is a bad thing in terms of maintainability, but could have unique performance / feature advantages

1585951991
pixelherodev
and maintainability isn't a problem if Google owns it

1585952019
fengb
But it's a chance to fix some of the design flaws

1585952034
shakesoda
i wouldn't say tighter integration is automatically a bad thing for maintainability

1585952052
fengb
I suppose baking more of the Google stack directly into the OS would help them a bit

1585952065
shakesoda
since generic solutions to things are usually more complex

1585952081
shakesoda
(often substantially so)

1585952124
mikdusan
I predict zig's std will support serenity before fuchsia

1585952147
THFKA4
hah i'm playing with Fuchsia on my desk right now

1585952164
pixelherodev
`<shakesoda> i wouldn't say tighter integration is automatically a bad thing for maintainability` true

1585952169
mikdusan
how fast does can it fork-bomb (launchpad) ?

1585952173
pixelherodev
Serenity?

1585952176
pixelherodev
On a different note

1585952186
THFKA4
the technical choices they made for the kernel are actually pretty great

1585952187
fengb
Oh it's actually working?

1585952190
pixelherodev
Anyone interested in working on a joint project to write a kernel in Zig?

1585952199
THFKA4
and they emulate a big part of POSIX, so porting Zig might not be that hard

1585952240
ikskuh
pixelherodev: what kind of kernel do you want to make? :D

1585952241
pixelherodev
I've done some bits and pieces for a project, and I know a few others have as well, but I want to actually make a usable system (even if not necessarily "the future!!!")

1585952247
fengb
Oh Serenity

1585952263
fengb
Oops I hit the enter key instead of delete >_>

1585952282
pixelherodev
Insert joke about how so did they? :P

1585952284
fengb
Sometimes I wish there's an undo button in IRC. And real life

1585952317
pixelherodev
The initial idea is a x64 kernel with cooperative multithreading instead of the usual preemptive (though with a preemptible bit for each thread table entry for reasons I'll get to shortly)

1585952399
pixelherodev
(sorry; had to take care of something)

1585952418
pmwhite
fengb: I mean, if you use matrix to edit your message, it will work for me :)

1585952465
pixelherodev
I don't have much concrete plans; the idea is to start by merging together various existing pieces (like APCICA, Linux kernel modules for graphics) with the goal of ASAP usability, then phasing them out and replacing with from-scratch ones

1585952478
pixelherodev
What I do have in the plans is to not support ELF executables.

1585952494
mikdusan
what I'd like to see are 2-sided (made up that name) page tables for virtual address space; one side is for stack, and other side is everything else. so thread can have it's own private stack, and thread-locals basically become globals. how much heavier does that make a thread? hopefully not much.

1585952502
pixelherodev
Instead, I want to have IR frontends (QBE, LLVM, etc)

1585952507
pixelherodev
Which is where my compiler project comes in

1585952517
pixelherodev
Every executable will be JITed into the native architecture on demand

1585952533
pixelherodev
This allows for `-march=native` by default, and security improvements

1585952534
fengb
Just use wasm as the "native" code

1585952550
pixelherodev
WASM frontend is okay too, but I also want to support LLVM + QBE + etc

1585952562
pixelherodev
That would allow for using, say, `cproc` as the C compiler, not just those that already support WASM

1585952572
pixelherodev
WASM + LLVM + QBE is a good set to start with

1585952584
ikskuh
luajit

1585952610
THFKA4
Fuchsia handles "runners" kind of like that. It's not tied to ELF.

1585952611
pixelherodev
The thing to note is that it's intended to use an in-memory tree for the AST

1585952616
THFKA4
here's the ELF runner though

1585952651
THFKA4
it calls units of executable software "components" and you can implement your runtime in those

1585952666
THFKA4
then use them to interpret scripts, or whatever else you want

1585952736
pixelherodev
Still, I'm completely open to suggestions and improvements from others; I don't claim to have all the answers, and I'd rather work with others on a changed design than on my own with the current one

1585952785
ikskuh
what i found crazy was what microsoft did with their "windows subsystem for linux"

1585952801
ikskuh
which is like.... "ah, btw! our kernel now supports the linux syscall interface!"

1585952842
THFKA4
for v1 they had a shim layer to translate syscalls, right?

1585952856
THFKA4
now they embed the entire linux kernel or something

1585952877
ikskuh
nah

1585952881
ikskuh
the first thing: yes

1585952894
ikskuh
v1 was actually a kernel extension that allows to switch out syscalls

1585952899
ikskuh
v2 is just "we're running a VM"

1585952948
THFKA4
first the embrace, then the extend

1585952976
pixelherodev
pft

1585952981
pixelherodev
They can try

1585953089
ikskuh
someone wants to scream?

1585953098
ikskuh
the command called by zig build for ODE :D

1585953131
pixelherodev
What the...

1585953145
pixelherodev
Why not build files individually and link?

1585953195
ikskuh
because build.zig is convenient

1585953206
ikskuh
120 source files though

1585953218
ikskuh
i have "executed" a 1000 line cmake file by hand now :D

1585953224
ikskuh
i probably fucked up anyways

1585953251
pixelherodev
Do we need a CMake -> build.zig translator ? :P

1585953314
ikskuh
would be helpful

1585953363
ikskuh
wow

1585953366
ikskuh
70/120 files build

1585953398
ikskuh
done.

1585953400
ikskuh
\o/

1585953537
pmwhite
The bootstrap repo could remove the cmake dependency if cmake were included in the repo, right?

1585953812
THFKA4
so what's the best UI framework to use with Zig right now? GTK because C?

1585953844
ikskuh
probably mine, and it's crap ATM

1585953861
companion_cube
why not try imgui?

1585953871
THFKA4
that's immediate mode, right?

1585953871
ikskuh
yeah some people are quite successful with imgui

1585953873
ikskuh
ep

1585953880
THFKA4
b..because that lol

1585953883
companion_cube
THFKA4: yep, looks super simple to use

1585953914
THFKA4
i'm sure it's great for games

1585953919
THFKA4
ikskuh: got a link to yours?

1585953990
ikskuh
nothing quite useful right now

1585953992
ikskuh
here's an example

1585953992
ikskuh


1585953997
ikskuh
i'm still missing textboxes though

1585954000
ikskuh
:D

1585954078
ikskuh
also it's not possible to "self-host" the UI right now

1585954100
ikskuh
meaning that you cannot have a single application that does both rendering/input and application logic

1585954231
THFKA4
hah cool

1585954249
ikskuh
will continue working on it tomorrow :)

1585954264
fengb
What's this C++

1585954266
ikskuh
last state:

1585954289
fengb
More mq32. You'll never die!

1585954326
ikskuh
yeah, it's hard to change a nick :D

1585954337
ikskuh
and some stuff is just not possible (like breaking kinks)

1585954344
ikskuh
or getting 2-letter domain names

1585954410
ikskuh
Victory!

1585954419
ikskuh
I slayed that vicious CMakeLists.txt

1585954457
BaroqueLarouche
Level up!

1585954471
ikskuh
yep!

1585954479
ikskuh
now for some packing adventures :D

1585954500
ikskuh
i need to automate the resource zip generation

1585954502
pixelherodev
... did you mean *links*?

1585955369
ikskuh
BaroqueLarouche: my achievement of the day:

1585955395
BaroqueLarouche
:D

1585955399
ikskuh
removed a lot of dynamic deps thanks to zig build

1585955418
ikskuh
now most of the engine builds from source instead of using prebuilt libraries

1585955462
fengb
... how many projects are you working on?

1585955467
ikskuh
yes

1585955480
magejohn
nice :D

1585955491
BaroqueLarouche
ikskuh: best response

1585955506
ikskuh
fengb: the part of this "project" right now is make that 3 year old project of mine be usable at least

1585955508
ikskuh
for other people

1585955512
ikskuh
because it's actually quite awesome

1585955519
ikskuh
(look at the feature list above)

1585955531
ikskuh
and now has only SDL2 and SDL2_mixer as prebuilt requirements

1585955622
ikskuh
i'll try to create a crossplatform (windows+linux) build and if that works, i'm happy and let it be

1585955634
ikskuh
but then i know that i can probably port every project of mine slowly to zig :)

1585955645
magejohn
love hearing about this sort of stuff

1585955669
magejohn
joining irc makes me feel a half/half inadequate and like I could do anything

1585955703
ikskuh
oka

1585955709
ikskuh
windows build is gonna be … different

1585955724
ikskuh
error: expected

1585955724
ikskuh
identifier or '{'

1585955724
ikskuh
typedef enum ERROR {

1585955729
ikskuh
#define ERROR 0

1585955731
ikskuh
thanks windows :D

1585955771
BaroqueLarouche
thanks C!

1585955783
ikskuh
yeah, thanks preprocessor!

1585955802
BaroqueLarouche
but yeah windows.h is a pain for that

1585955818
ikskuh
oh yeah

1585955828
ikskuh
i once had a function "GetUser()"

1585955836
ikskuh
which is … a define to GetUserW or GetUserH

1585955841
ikskuh
depending if UNICODE is defined or not :D

1585955854
BaroqueLarouche
GetObject() for me

1585955864
BaroqueLarouche
Had to use GetObjectPtr() instead to avoid conflict

1585955894
ikskuh
i'm the hardcore dude :D

1585955900
ikskuh
i just undefine it at the top of my header

1585955956
BaroqueLarouche
haha

1585956013
redj


1585956408
daurnimator
What do pd1/pd2/etc stand for?

1585956492
squeek502
parameter dash 1, parameter dash 2, parameter slash 1 presumably, they correspond to `-`, `--`, `/` being allowed prefixes for that option

1585956518
squeek502
that file is generated by update_clang_options.zig

1585956559
daurnimator
pixelherodev: a slice from LinearFifo can be represented with maximum 2 iovs: if you're reading from a pipe, you can use e.g. readv to fill it up across the wrap-around.

1585956764
pixelherodev
Ah

1585956773
pixelherodev
That's useless to me right now, but I'll note it down for later :)

1585958046
daurnimator
Its actually something that annoys me about the current stream interface

1585958103
daurnimator
squeek502: ah ha. thanks

