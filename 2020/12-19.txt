1608340286
andrewrk
wow, #7482 uncovered a

1608340551
karchnu
andrewrk: is there any way to find them automatically?

1608340582
andrewrk
we are not ready for fuzz testing yet

1608340593
pixelherodev
Too many bugs? :P

1608340609
pixelherodev
... I was joking, but that's probably actually it, isn't it?

1608340618
pixelherodev
:(

1608340668
andrewrk
we are fixing bugs at a certain rate, and collecting new bug reports at a similar rate, with a bunch of bugs also sitting around. Manually reported bugs function as a heuristic for which bugs are important to prioritize. fuzz testing would just be introducing chaos into the priorities

1608340698
andrewrk
it will be appropriate later, when the bug fixing rate is out pacing the report rate

1608340718
pixelherodev
For now, ifnobody knows about it, it might as well not exist ;)

1608340742
andrewrk
also, fixing bugs right now is opportunity cost, however that will not be the case later

1608345495
leeward
Fixing bugs in code that will be thrown out is not fun.

1608345523
fengb
My entire career has been on code thatâ€™s ultimately thrown away

1608345757
andrewrk
whenever I skip a few days of PR merging to work on my own stuff the open PRs number goes into the 60s

1608346084
leeward
fengb: Testing?

1608346106
fengb
No, actual product work. Everything I work on gets canned lol

1608346121
leeward
hah, that's no fun

1608346123
fengb
Maybe Iâ€™m the problem ðŸ¤”

1608346250
andrewrk
they should just pay you to do nothing, skip the middle man

1608346266
fengb
lol

1608346290
leeward
fengb: a machine for turning money into no products.

1608346313
fengb
I deliver. Then it gets canned 2 months later

1608346359
fengb
My last job we spent about 1 month working on the core feature... and about 11 months on this majorly complicated piece nobody wanted

1608346728
leeward
Ah, product managers got to you.

1608346788
leeward
I guess I should call them product Managers.

1608346801
fengb
AbstractManager

1608346811
leeward
hah

1608346820
leeward
ProductManagerFactoryFactory

1608346951
karchnu
(capitalism)

1608348200
leeward
Rut roh, have we strayed from dilbert cartoons to politics? Sounds like something Scott Adams would do.

1608354538
hooo
zig doesnt work for me, the created executable says: cannot execute binary file: Exec format error

1608354559
hooo
this is from the sample created by zig init-exe

1608355251
hooo
I tried both master and 0.7.1 on linux x86

1608355700
leeward
hooo: What's the command line you're using to build it?

1608355745
hooo
zig build

1608355755
leeward
Does `zig build run` do the same thing?

1608355780
hooo
no, that seems to work...

1608355795
leeward
Ok, so after you `zig build` what are you running that's failing?

1608355802
hooo
./sample

1608355850
hooo
ok i see, this binary was from a previous test where I didnt use the build.zig

1608355850
leeward
That's not being generated by `zig build` with the sample that init-exe makes. Try `zig-cache/bin/sample`

1608355862
hooo
thank you

1608355866
leeward
no problem

1608355888
leeward
It is kinda weird that zig doesn't put an executable somewhere obvious by default.

1608356118
hooo
imo the command line to build things is needlessly complex. It should be like this: ./zig main.zig

1608356355
leeward
That's...probably too simple.

1608356409
leeward
`zig build-exe main.zig` is not too much more complicated, and allows for useful things like `zig test main.zig` and `zig build-obj lib.zig`

1608356514
leeward
Though to be fair, the build command for the thing I'm working on right now is zig build-exe -L<path> -L<another-path> --script <linker script>.x --single-threaded -O ReleaseSmall -target msp430-freestanding-none -mcpu=msp430 main.zig

1608356530
hooo
I disagree, that's precisely where the build.zig should come in and add additional options like the scripts:{} in package.json in npm

1608356534
leeward
Which is a bit longer than I'd like.

1608356563
leeward
If you don't start your command with "zig build" build.zig doesn't come in at all.

1608356575
leeward
Which I see as a good feature.

1608356587
leeward
Easier to reason about when there's less magic.

1608356670
leeward
But if you think of the command as "zig build" instead of just "zig" then it's basically exactly what you're talking about.

1608356748
leeward
It's just that there aren't any other executables, so having an easy way to address all the orthogonal functionality in the zig executable is necessary. npm is just a package manager, but zig has a kitchen sink built in.

1608360804
leeward
How do I set a function's inline_type? I see how to do it at the call site (@call) but not at the function declaration.

1608360882
leeward
I have a function that pretty much only gets called inside ISRs and would like to ensure that if it's not inlined for some reason an error is thrown.

1608363129
andrewrk
leeward, when you do `zig build`, it executes the "install" step, e.g. the thing that package maintainers will execute to create a package out of your project. the default install directory is `zig-cache/` but you can change that

1608363170
andrewrk
related:

1608366196
daurnimator
idea for the AT_RANDOM stuff, I wonder if there is a way to only initialize the RNG if its used: we could have an `@export()` inside of the RNG, and then in the initialisation code, have a weak symbol `initialise_rng`, and only if non-null then do it....

1608366201
leeward
andrewrk: Yeah, that bug is exactly what I'd want.

1608366379
leeward
daurnimator: Initialize on first use is a pretty common use case. It might even be worth writing some comptime code in the library to make it easy.

1608366389
leeward
(in the standard library)

1608366471
leeward
Hmm, does Windows do hard links? It seems like they would solve all the objections people raised in 7296.

1608366518
leeward
Even symlinks would work, but pretty sure Windows doesn't have those.

1608375833
dch
leeward: windows has had symlinks since at least a decade, called ntfs reparse points

1608375895
dch
because its windows, its subtly broken in many different ways, and its only available on NTFS, but it is there

1608376070
dch
leeward: I used it back round 2000 I think, linkd and later mklink, API is I think this one

1608376091
dch
the tools were in the resource kit, a separate download

1608380009
forgot-password
Quick question: Is it possible to get the absolute path of a zig file when its being built? Similar to what Node.js provides via __filename

1608380478
ifreund
forgot-password: closest thing to that is @src()

1608380507
ifreund
though you can pass anything you want in as build option using the zig build system, including absolute paths

1608380644
forgot-password
ifreund: @src() seems to be exactly what I need. Thanks a lot :)

1608401893
diltsman
Does anybody have an example of cross-compiling with Zig build?  I had it working a while back (~Zig 0.5), but things have changed.

1608402032
scientes
diltsman,

1608402043
scientes
oh build.zig

1608402049
scientes
I have never used that

