1586044822
r4pr0n
ok, thanks for helping me

1586044839
r4pr0n
but wait

1586044858
r4pr0n
even when using -fsanitize-trap=undefined, i still get the correct line

1586044866
r4pr0n
though the error message is the same as in zig then

1586044981
andrewrk
can you confirm that zig cc has different behavior with your simple example

1586045000
r4pr0n
yes, i'll send you the example

1586045030
r4pr0n


1586045064
r4pr0n
when compiled with zig, gdb highlights the for loop, when compiled with clang - either fsanitize-trap or not - it highlights the statement with the shift

1586045068
Kingsquee
I'm trying to get the hang of making automatic SoA containers in zig, but the reference code I've found doesn't seem to compile anymore

1586045102
Kingsquee
also for the record this looks way too big-braned for what it does

1586045223
Kingsquee
is there any way to just vararg the fields similar to rust macros?

1586045254
fengb
We used to have varargs and it was very buggy

1586045257
Kingsquee
$($field_name:ident: $field_type:ty),+ => ...

1586045328
Kingsquee
is it deemed desirable to unbuggify them

1586045354
fengb
We replaced most of the use cases with tuples

1586045380
Kingsquee
I don't think that suits this use case though

1586045403
fengb
I wrote up a hacky SOA at one point

1586045411
fengb
You can do it by passing in a reference struct

1586045445
Kingsquee
fengb: link?

1586045467
fengb
Challenging part is Zig doesn’t really support dynamically building a type, but there are ways around it

1586045554
fengb
I didn’t push it up anywhere. Once I get back to my desk, I can see if I still have it >_>

1586045558
Kingsquee
thanks

1586045581
fengb
More of proving to myself that typed tuples could do what I wanted

1586045585
Kingsquee
the issue is that if all those ways around it are challenging, I'll just fall back to writing a binary that generates the datatype I want

1586045628
fengb
The guts can be a little... annoying but it’s not hard and the consumption should be fine

1586045645
andrewrk
r4pr0n, would you mind filing an issue? I may not get to this tonight

1586045709
r4pr0n
okay, will do

1586045872
Kingsquee
also, not seeing tuples in the documentation :I

1586045907
Kingsquee
is that what we're calling anon structs

1586045980
waleee-cl
Kingsquee: yes

1586045987
Kingsquee
kk

1586047017
r4pr0n
ok, i created the issue

1586047062
andrewrk
thank you

1586047122
r4pr0n
happy to help, i have to thank you for this great project

1586047459
andrewrk
:)

1586048508
nycex
so i tried building zig with llvm10 according to that guide

1586048522
nycex
and built llvm, lld and clang

1586048542
nycex
but i can't build zig, because even though i use -DCMAKE_PREFIX_PATH, it still wants to use my system llvm 9

1586048552
nycex
so i get CMake Error at cmake/Findllvm.cmake:33 (message):

1586048553
nycex
expected LLVM 10.x but found 9.0.1

1586048569
nycex
how can i fix that?

1586048683
andrewrk
maybe it's picking up llvm-config from your PATH

1586048824
nycex
oh

1586048844
nycex
i had to add $HOME/local/bin/ to the PATH

1586054282
pixelherodev
One of the things I've taken to doing when implementing libraries is asserting that received values are valid (e.g. for my dynarec, that you're not trying to load a 64-bit value in a 32-bit register); this prevents a program from misusing the library and results in higher performance in release modes

1586058424
daurnimator
andrewrk: I saw you've vendored zig into the bootstrap repository: it would be cleaner to do so with a git subtree. happy to help

1586060506
daurnimator
Anyone around particular familiar with LLVM? I'm curious to see if I can try and get

1586061064
pixelherodev
daurnimator, you mean IR?

1586061072
pixelherodev
I'd like to think I'm familiar with that by now :D

1586061091
pixelherodev
If you figure out how to hook up an arch to Zig, let me know

1586061107
daurnimator
pixelherodev: more about how a new target is added; hooking it up correctly; perhaps familiarity with how the interfaces have evolved from, say, LLVM7 to LLVM10

1586061345
pixelherodev
Ah, then I can't help

1586061358
pixelherodev
I know the IR, but I'm using that knowledge to build a competitor to the official interfaces; I never bothered learning those

1586061361
pixelherodev
(yet)

1586062101
pixelherodev
LLVM doesn't seem to like optimizing dynarecs

1586062117
pixelherodev
Takes much,

1586062462
pixelherodev
By which I mean it seems to hang indefinitely :(

1586063457
pixelherodev
I'm switching on a type in a generic function, is there a way for `*u32 =>` to also match`*u32 align(4096)`?

1586063538
pixelherodev
Or do I need to check @typeInfo and switch to if/else chains?

1586063727
pixelherodev
Maybe I'll just discard alignment info and do a cast before unmapping it

1586063751
mikdusan
do you always have a pointer for the switch?

1586063795
pixelherodev
No

1586063807
pixelherodev
It can be a Register (enum type), a u32, a *u32, a u64, etc

1586063814
pixelherodev
It's a generic Move instruction

1586063818
pixelherodev
For x64

1586063822
pixelherodev
There's a

1586063825
mikdusan
I think you'll have to switch on typeinfo

1586063834
pixelherodev
I just went with the "discard alignment" path

1586063952
pixelherodev
I'm assuming it's harmless to not know the alignment

1586064104
mikdusan
how will you unmap without mem.page_size alignment?

1586064130
daurnimator
I think git attributes are being fucky with zig..

1586064250
mikdusan
what does `git diff` show?

1586064295
daurnimator
the entire contents of those files

1586064308
daurnimator
my local copy has them checked out with unix line endings; but in the repo they are CRLF

1586064325
mikdusan
decent version of git? 2.26?

1586064333
daurnimator
I think that's because of

1586064344
daurnimator
yep. git version 2.26.0

1586064389
pixelherodev
mikdusan, the alignment is still correct, I just need to do an @alignCast before munmaping

1586064432
mikdusan
pixelherodev: oh you're just carrying it around as align(1) and then cast before gotcha

1586064445
mikdusan
that should work

1586064538
pixelherodev
Exactly

1586064544
pixelherodev
It

1586064550
pixelherodev
First block fully translated

1586064618
pixelherodev
... though I think it's not translating the conditional jump correctly

1586064946
mikdusan
daurnimator: did you just start seeing these files crlf on a fresh clone of bootstrap?

1586065002
mikdusan
because I clone'd it and thoese files do not have CRLF

1586065063
mikdusan
the .html one does

1586065425
daurnimator
mikdusan: only after I touch those specific files; and then I can't get back again

1586065537
pixelherodev
"seems to be hanging indefinitely" I take that back; it

1586065540
pixelherodev
Definitely hanging

1586065547
pixelherodev
zig at 100% CPU

1586065552
pixelherodev
I thought I'd killed it, but apparently not

1586065557
pixelherodev
Been going for an

1586065586
pixelherodev
Explains why my compilations felt slower than usual

1586065613
mikdusan
daurnimator: weird. --reset hard fixes things for me. if you don't have any pending work, try `git rm --cached -r .`

1586065709
daurnimator
I think `deps/SoftFloat-3e/*.txt text eof=crlf` in .gitattributes would fix it?

1586065758
mikdusan
do you have anything in your global ~/.gitconfig that might be complicating things?

1586065777
daurnimator
nope

1586065878
mikdusan
for giggles try (from repo top level): `git switch --orphan nowhere`; everything is gone. then `git switch master` and git status

1586065999
daurnimator
I managed to get myself out of it by modifying my .gitattributes to change the line ending; then stash that away...

1586074593
pixelherodev


1586074603
pixelherodev
Working dynamic recompiler :D

1586074612
pixelherodev
Not finished, but good progress

1586075090
Kingsqueee
so, it seems I can get the 'child' type of a pointer by doing std.meta.Chlid(somepointertype)

1586075102
Kingsqueee
i.e. []u8 -> u8

1586075113
Kingsqueee
is there a way to go the other way around?

1586075153
Kingsqueee
e.g. pass in a u8 and get out a []u8 etc

1586075194
daurnimator
Kingsqueee: just put [] in front of it

1586075212
daurnimator
Kingsqueee: `const T = u8; const PT = []T;`

1586075223
daurnimator
or whatever pointer type/attributes you want

1586075224
Kingsqueee
...

1586075235
Kingsqueee
yes okay

1586079654
Snektron
daurnimator: i had the same issue

1586079735
Snektron
git reset --hard HEAD worked for me

1586089151
daurnimator
andrewrk: hmmm. seems I don't have permission to edit other people's comments any more (to fix formatting etc.)? I know you redid the github permission sets a while ago....

1586094918
KoljaKube
Does the compiler only check code that is actually called?

1586094963
afontain_
I think it does, except for parse error

1586095393
KoljaKube
I guess that's one way to encourage test{}ing ;-)

1586095562
waleee-cl
KoljaKube: pretty common compiler behaviour

1586095711
KoljaKube
Been spending most of my time with javac and kotlinc, and I don't think those behave that way

1586095756
fengb
Zig takes laziness to a whole new level

1586095974
KoljaKube
I guess that's also the reason for having an unnamed test block @importing files into _?

1586096040
fengb
Yep, `_ =` is a quick way of forcing a lazy reference into existence

1586096229
KoljaKube
Got it, thanks

1586096302
ifreund
one thing that kinda bugs me about zig tests is that I couldn't figureout a way to move them out of my src folder

1586096351
ifreund
anyone have an example doing that for a non-library project?

1586096352
waleee-cl
KoljaKube:

1586096358
KoljaKube
Yeah, I was there for that

1586096409
KoljaKube
Don't have enough experience to know how I feel about the test "inlining"

1586096449
fengb
ifreund: these aren’t tests but I have scripts in a different folder:

1586096485
fengb
Add my main code as a separate package called “self” (because naming is hard)

1586096529
ifreund
fengb: ah, I think that may have been the line I was missing

1586096533
fengb
The std tends to stick test files as a sibling as the main file

1586096554
ifreund
i was trying to import my main code as a package, but it said that everything was private

1586096656
KoljaKube
waleee-cl: Sure that was the correct link? That only talks about linting unused vars

1586096703
KoljaKube
And I just checked, my uncalled method returning the wrong type was found by the compiler

1586096705
waleee-cl
KoljaKube: just did a quick test and yes, the type checking needs more coercing to ignore the unused methods

1586096925
KoljaKube
Does zig support building libraries? If yes, what is emitted for broken code?

1586096971
fengb
Zig prefers source based libraries

1586096997
fengb
Only way to share binaries is with a C compatible library

1586097022
fengb
And those are exposed with export, which also forces the unit to be built

1586097047
KoljaKube
Ah, OK, thanks :-)

1586098165
ifreund
fengb: looks like I have to make everything I want to use in my tests pub in my src/main.zig to use a separate folder, I think I'll just leave them scattered around my src dir since that seems cleaner

1586098389
KoljaKube
Is there a way to force runtime evaluation of something?

1586098481
afontain_
I'd be interrested in that ^, it totally makes sense in a `zig test …` or a debug build, if you ask me

1586098629
KoljaKube
I currently have a problem with a global variable from a C library, whose value changes depending on where in my code I access it. I

1586099161
KoljaKube
Printing the line in my main() changes the behavior of the code executed

1586099203
KoljaKube
s/line/variable/

1586103562
KoljaKube
Phew, finally managed to build a minimal example for my problem

1586103572
KoljaKube


1586103588
KoljaKube
Would this be something I should file an issue for, or am I missing something?

1586104358
Snektron
you should probably file an issue

1586104706
Snektron
KoljaKube: Same issue under Linux

1586104947
KoljaKube
Thank you for checking!

1586104966
KoljaKube
Anybody got a suggestion as to how to title this?

1586105384
KoljaKube
And is there a template for new issues?

1586105462
Snektron
I don't think there is a template

1586105477
Snektron
I always look at other issues to see how they're structured

1586105486
Snektron
anyway, this has the same problem:

1586105964
KoljaKube


1586106107
KoljaKube
By the way, the last issue I filed was answered within minutes on a sunday evening (CET) by andrewrk, which was really awesome :-)

1586106262
FireFox317
KoljaKube, could you try to run valgrind on the code, maybe it gives some clues

1586106471
KoljaKube
FireFox317: Never used it before, and I need to make some food for the family now, but I've been looking for a while to find an excuse to get into it ;-)

1586107934
TheLemonMan
got most of the stdlib working on sparc64 o/

1586107953
fengb
:o

1586107978
TheLemonMan
the register windows are a novelty I had never found in any other ISA

1586108190
mikdusan
what you never worked with Itanium ? :P

1586108282
TheLemonMan
thankfully not, but I've heard stories about it

1586108313
fengb
I'm curious... could Itanium actually be a better arch?

1586108353
shakesoda
fengb: my understanding is that itanium actually was pretty good as an arch

1586108376
shakesoda
i don't know if this is accurate

1586108395
TheLemonMan
afair it was a nightmare for compiler developers

1586108412
fengb
I briefly studied it in college. But a lot of its complexity seemed to do with trying to SIMD everything

1586108424
fengb
And lack of out-of-place execution

1586108424
TheLemonMan
you had to be really really really smart to squeeze all its raw power

1586109514
shakesoda
so... it was difficult in all the same ways it's currently difficult to get anywhere near the max throughput of architectures like x86_64?

1586109598
TheLemonMan
I guess so, but only if you consider all the newfangled vector extensions

1586109624
Thalheim
TheLemonMan: I am around all day so please ping if want to test on real hardware

1586109686
shakesoda
TheLemonMan: i'm certainly considering those, they are relevant if you want to squeeze all the raw power out

1586109760
shakesoda
that said, most of the real bottlenecks I see in the wild are things like not designing for cache locality

1586109823
shakesoda
I've been working on optimizing for work (almost time to ship...) and there are high load areas with ~93% cache miss rates :|

1586109825
shakesoda
glacially slow

1586109870
shakesoda
the individually slow areas stopped being apparent recently so I had to bust out vtune to see what was going on, and it is as I feared

1586110079
TheLemonMan
andrewrk, what's my disk quota on the aarch64 server?

1586110117
diltsman
Does anyone know of an example of how to use ArrayList with OutStream?

1586110122
TheLemonMan
Thalheim, I'm still trying to get everything to work correctly, we'll probably need a LLVM patch (and wait 'till LLVM 11)

1586110155
andrewrk
TheLemonMan, the machine has 245G used, 173G available. As far as I'm concerned you can have as much as you want. Do I need to adjust some kind of setting?

1586110185
TheLemonMan
nope, just wanted to ask if there were any limits

1586110208
TheLemonMan
I'll use that to hack on LLVM :) that's much faster than my laptop

1586110225
andrewrk
the only thing to keep in mind is this machine is provided to us by WorksOnARM and they could decide to revoke it at any time

1586110241
andrewrk
if that happens I'd be happy to use zig funds to pay for a machine that is always up that you can have access to

1586110292
Thalheim
WoA won't revoke it without good cause, rest assured

1586111321
TheLemonMan
ok I have no idea how to use this NixOs thing, how do I get a gcc+binutils toolchain installed?

1586111554
pmwhite
I don't have context for your question, but I use NixOS.

1586111593
pmwhite
You can do "nix-env -iA nixos.gcc"

1586112072
TheLemonMan
got it to work, I had to `niv-env -p gcc` or something like that

1586112098
TheLemonMan
gimme Debian or gimme death, I can't stand all those newfangled tools

1586112174
pmwhite
Yeah, there are some confusing parts of nixos that must be waded through before you can begin to enjoy it. Arguable not worth it, but depends on the person o think.

1586113193
traviss
diltsman here's a really simple example of using an ArrayList's outStream to write a value to it:

1586113404
traviss
another one here:

1586115693
shakesoda
the amount of @intToEnum I need to put everywhere with vulkan is really annoying :(

1586115833
shakesoda
i feel like it'd be a lot easier if there were just a way to represent enum values that have c's integer duality that translate-c could use on these things

1586115887
andrewrk
the enum equivalent of [*c]

1586115908
andrewrk
I was also thinking that @intToEnum could possibly have its type parameter removed, and would infer from the result location

1586115964
shakesoda
if you only had to @intToEnum only when you have to do away with the duality (e.g. for switching) there'd be a

1586115985
shakesoda
inferring would help a lot too

1586115993
andrewrk
we could also choose to translate c enums as integers rather than enums

1586116090
andrewrk
this would go for most "casting" builtins: @ptrToInt, @bitCast, @intCast, etc

1586116131
andrewrk
if you wanted to provide an explicit type you would wrap it with @as (or use an intermediate const variable with a type)

1586116350
shakesoda
i feel like it's generally a win to have them as enums too

1586116419
shakesoda
a lot of my compile errors are related to the way they're translated as both i guess, I'll do e.g. c.VK_WHATEVER where .VK_WHATEVER would infer the enum type

1586116975
shakesoda
andrewrk: heh, broke it (messing with zig-vulkan-triangle)

1586116996
shakesoda
toOwnedSlice in getRequiredExtensions -> broken llvm module

1586117305
shakesoda
looks like this might be #4907

1586117685
shakesoda
rearranged it to work around

1586118273
josch557
I'm seeing that std.math.big.Rational has private fns gcd and gcdLehmer, would it make sense to put that into big.Int and make it public?

1586119039
andrewrk
quite possibly. tiehuis probably can answer that better than I can

1586119626
josch557
Ok, I'll create a Proposal issue for that.

1586121322
shakesoda
how on earth do you open a dir that isn't relative to cwd

1586121414
andrewrk
it can be relative to any other open dir

1586121436
shakesoda
i want to open a dir with an absolute path and have absolutely no clue how to get one

1586121470
shakesoda
everything i can find just does opendir from cwd

1586121477
shakesoda
(and further in from there)

1586121514
andrewrk
shakesoda, `std.fs.openDirAbsolute` hasn't been added yet (planned) but it's safe to pass an absolute path to fs.Dir.openDir

1586121599
springworm
is there a motivation for comptime's branch quota other than reducing compilation time?

1586121644
andrewrk
no

1586121698
andrewrk
you can set the quota to whatever you want. it's just to prevent accidentally putting an infinite loop (or really slow logic)

1586121751
springworm
cool. i'm curious how it counts branches -- is there branch counting code inserted before every branch instruction?

1586121771
springworm
i guess i could read the ir but ..

1586122079
josch557
Does it show up in the IR? I mean the code is executed at compile time, before code generation, right?

1586122209
andrewrk
yeah the bookkeeping is all part of semantic analysis

1586122884
springworm
oh i guess i've misunderstood comptime. is the compiler interpreting the code and not actually producing machine code?

1586122967
andrewrk
correct. it emulates the target

1586122992
andrewrk
consider that it works even for cross-compiling

1586123238
springworm
that's radical. color me impressed

1586124090
andrewrk
furthermore, the compiler even has access to the target CPU model (if specified) and target CPU feature flags. so to be compliant with the zig language specification, a correct compiler will even emulate at compile-time, for example, the floating point bugs that a particular cpu model has, if that cpu model is the target

1586124143
andrewrk
in practice what this means is that you can rely on e.g. hash() at compile-time and hash() at runtime producing the same result.

1586124229
andrewrk
(barring bugs in the compiler itself)

