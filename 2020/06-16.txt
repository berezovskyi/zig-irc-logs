1592272023
pixelherodev
andrewrk: guess what I did today? :D

1592272107
pixelherodev
#5422 is just about ready to merge :)

1592272342
pixelherodev
Tests pass locally, and I was able to enable one of the ones that was previously failing :)

1592272425
pixelherodev
Fully rebased against master, I removed some of the changes you added and replaced with a wrapping API over ZIRCases

1592272439
pixelherodev
Altered the error testing implementation to more closely match the one you added

1592280342
andrewrk
pixelherodev, nice!

1592280367
andrewrk
in other news, the compile error "TODO: type coercion of anon struct literal to struct" is gone

1592280442
daurnimator
yay!

1592280488
daurnimator
there's a couple of verbose places around dealing with std.json.StringifyOptions and std.LinearFifo.LinearFifoOptions that should be made terse

1592284095
andrewrk
nice

1592284890
daurnimator
e.g.

1592285115
pixelherodev
andrewrk: rereview would be appreciated

1592285197
andrewrk
pixelherodev, I'll be sure to get to it tonight before bed :)

1592285226
pixelherodev
:)

1592285228
pixelherodev
oh and

1592285239
pixelherodev
for the record, CI actually passed

1592285244
andrewrk
beautiful

1592285261
pixelherodev
Azure had an issue provisioning th3 macos run though

1592285285
pixelherodev
so resubmitting the build should pass (and waste electricity)

1592285494
andrewrk
I'm comfortable testing during the merge process. The CI is just a time saver if it's green

1592322414
gonzus
Great job to those involved in the zig show presentations.

1592322468
pixelherodev
Thanks! :)

1592322483
gonzus
Question to Andrew: are you planning to continue your video casts?

1592322525
gonzus
I ask because they are focused on different content, and... I miss them :-)

1592322552
BaroqueLarouche
Thanks gonzus  :)

1592322565
mq32
gonzus: thanks!

1592322757
mq32
i wanted to answer to an issue on github

1592322762
mq32
now i have my own generators implementation:

1592322762
mq32


1592322779
mq32
only thing needed to make this

1592322794
ifreund
gonzus: andrew mentioned that he's planning on doing one soonish after a little more work on stage2 is done

1592322826
gonzus
Ah, great, thanks for the info ifreund

1592322827
scientes
I don't really see why we had to port compiler_rt to zig.

1592322836
scientes
and deal with the bugs

1592322944
companion_cube
mq32: I don't see an assignment to `is_finished?

1592322961
mq32
done.* = true

1592322980
mq32
i could encapsulate that into a anonymous function in the Generator thing itself

1592322990
companion_cube
oh I see. Why doesn't the function return a tuple instead?

1592322995
companion_cube
or is that what you meant? :D

1592323009
companion_cube
if it returned `{?*u32, bool}`

1592323021
mq32
doesn't work for generators ;)

1592323025
mq32
it's async

1592323040
mq32
you can also generate data forever

1592323060
companion_cube
ah I see

1592323093
companion_cube
could you pass the `resume_loc` as an argument instead?

1592323107
companion_cube
a nice API would be `yield(the_frame, the_value, is_done)` I guess

1592323111
companion_cube
instead of having a global

1592323192
mq32
i can tryâ€¦

1592323234
fengb
mq32: all of these userland generators are incompatible with async functions

1592323253
mq32
yeah

1592323258
mq32
i know

1592323263
fengb
If you try passing one it, it breaks pretty spectacularly

1592323263
mq32
still wanna play a bit though

1592323366
mq32
it even breaks when calling yield() instead of doing it locally

1592323492
mq32
yeah, async is not suitable for generators :D

1592323529
fengb
It's suitable... if we didn't have to contend with real async

1592323541
fengb
We need another primitive to tell the difference between real async and generator

1592323572
companion_cube
it's because `suspend` cannot return a value, right?

1592323599
mq32
no

1592323605
fengb
Nah, you can work around that. The harder part is that userland generators look identical to async functions

1592323607
mq32
because you resume to something else than your generator

1592323615
fengb
So when you use a real async function, the contexts blend together

1592323624
companion_cube
hmmm

1592323625
mq32
and if you call an async functon in a generator, it may return to the generator or the event loop

1592323628
mq32
depending on the problem

1592323629
companion_cube
I don't have the mental model for that stuff

1592323647
companion_cube
is it me, or is zig removing C's footguns and adding new ones? ðŸ™ƒ

1592323665
fengb
Eh... C doesn't have async or generators

1592323677
companion_cube
doesn't change the end result

1592323677
fengb
Zig doesn't have generators either

1592323688
fengb
We're not removing or adding anything here

1592323699
companion_cube
well, it's a question of what's idiomatic

1592323707
companion_cube
async is idiomatic in zig, but it's tricky

1592323711
fengb
Generators ain't idiomatic :P

1592323726
fengb
That's what I learned spending a month or so on it

1592324084
mq32
aaaand i found a miscompilation!

1592324354
pixelherodev
More stage2 work coming soon :D

1592324502
tgschultz
goddamnit git...

1592324518
mq32
fengb: do you see any problem with that?

1592324527
mq32
it

1592324606
ifreund
what'd git do this time?

1592324828
tgschultz
I'm sure it's doing what it is supposed to do, that's just not what I need it to do for my simple use case. I worked it out though by just forcing the push.

1592324927
fengb


1592324939
fengb
You're trying to build a type using comptime values. That's not gonna work

1592324950
fengb
The fix is... pretty horrible

1592325021
mq32
so the problem is this hack: @TypeOf(.{ @as(args[0].arg_type.?, undefined) })

1592325095
fengb
Yeah, it's a comptime known value so it becomes a comptime only field

1592325225
fengb
You need to convince the value to be runtime known:

1592325254
fengb
It gets really messy

1592325266
fengb
We need the tuple{} syntax :P

1592325319
mq32
problem is that @TypeOf enforces comptime evaluation

1592325345
mq32
which means â€¦ i cannot do that in this case :(

1592325356
fengb
My hack works. I reference a global variable

1592325383
fengb
Well... "works". I haven't tested it other than making sure the compiler is doing what I had expected

1592325386
fengb
And then decided this is terrible and nobody should use it

1592325473
fengb
Oh this only works with ints. I had a different prototype for bitcasts and it was even worse looking

1592325580
mq32
oh

1592325582
mq32
i understand

1592325582
mq32


1592325619
fengb
Oh ha, that's less terrible

1592325622
fengb
I wish I thought of that :/

1592325659
mq32
kinda cool solution still

1592325664
mq32
except for the tuple hack

1592325701
fengb
It's a much saner tuple hack than what I big brained

1592325707
fengb
I might actually borrow that for wazm

1592325718
mq32
you're welcome

1592325770
scientes
Why doesn't orelse chain?

1592325783
scientes
this.foo() orelse this.foo() orelse this.foo() orelse....

1592325805
ifreund
i think you just need parentheses

1592325823
ifreund
this.foo() orelse (this.foo() orelse (this.foo() orlse 42)))

1592325841
scientes
lmao

1592325850
fengb
That also force evaluates all of them

1592325863
ifreund
lol

1592325864
fengb
Should we have short circuiting like `and` keyword?

1592325877
ifreund
i'd be for that

1592325881
ifreund
i think it makes a lot of sense

1592325883
fengb
(Actually I don't know if it's eager, but it looks eager to me based on those rules)

1592325888
scientes
fengb, ++

1592325998
scientes
looks like I was runnning into an unrelated bug

1592326648
mq32
fengb: i made it better

1592326650
mq32
way better

1592326682
mq32


1592326713
fengb
That looks almost identical to my version

1592326722
mq32
haha lol

1592326732
mq32
power of zig: let two people indenpendently write the same code

1592326733
fengb
Except you split out the context and the generator creation, which I didn't bother

1592326789
mq32
usability of that is actually quite high until you enable event looping ðŸ™ƒ

1592326802
fengb
Yep, that's where I decided this isn't good

1592326822
fengb
Most of my usecases for generators ended up being solved by an async stream anyway

1592327234
mq32
hehe

1592327250
mq32
yeah this was more a game to me, i don't really have use for endless generators

1592327451
fengb
And you discovered not-shitty userland tuples :D

1592327572
xackus
andrewrk will stage2 have two kinds of IR like stage1, which has IrInst{Src,Gen}? i haven't analyzed the new stage2 code too much

1592327749
scientes
yeah we don't need closures

1592327770
scientes
because you can just do a struct, and put all your variables in there, and then have an init() function

1592327771
scientes
right?

1592327780
leeward
Is Zig IR specified?

1592327795
scientes
leeward, neither the old nor the new

1592327811
scientes
nowhere nears

1592327832
scientes
leeward, the stage1 is basically "build it as quickly as possible"

1592327845
scientes
although there was a clear refactoring into the two passes

1592327852
scientes
the first pass is type legalization

1592327929
leeward
Is there a plan to specify it, as part of allowing non-LLVM backends?

1592327937
scientes
no

1592327945
scientes
the specification is the language

1592327975
scientes
(I do not speak for the zig project)

1592328137
ifreund
I wouldn't be surprised to see it specified eventually, though that's far down the line

1592328155
pixelherodev
ZIR is probably going to be relatively standardized.

1592328167
pixelherodev
That's basically a requirement for contributor friendliness

1592328202
pixelherodev
I wouldn't be surprised it gets iterated on a bit first, but I

1592328221
leeward
I'm just asking because it helps with validating tools for use in safety-critical systems.

1592328237
ifreund
huh, is ?*c_void supposed to coerce to *c_void?

1592328275
pixelherodev
No

1592328280
pixelherodev
Well

1592328281
pixelherodev
Hmm

1592328283
pixelherodev
No

1592328286
pixelherodev
I'm 99% sure

1592328291
pixelherodev
That's a normal Zig pointer to a special C type

1592328320
pixelherodev
I could easily be wrong actually, I don't know if pointers to C types are considered special types

1592328332
ifreund
i don't think they are

1592328345
ifreund
only [*c] should be weird afaik

1592328387
fengb
Stage 1 IR is implementation detail. I think stage 2 ZIR will have some semblence of spec / stability

1592328452
leeward
I'm pretty sure the way to get ?*c_void to *c_void is the same as going from ?*u32 to *u32.

1592328499
pixelherodev
What fengb said

1592328524
leeward
Yeah, that seems reasonable.

1592328579
pixelherodev
as I've mentioned in discord, I plan on making a new Stage1 compiler using ZIR

1592328638
ifreund
well ?*c_void is coercing to *c_void for me

1592328640
ifreund


1592328643
ifreund
oops one sec

1592328650
ifreund


1592328672
leeward
That sounds wrong.

1592328679
ifreund
yeah i agree

1592328683
ifreund
i'm gonna open an issue

1592328731
pixelherodev
andrewrk: would I encounter any issues trying to use ZIR for e.g. C?

1592329326
ifreund
hmm, how far along is the testing framework for stage2? Would turning all the open issues for stage1 bugs into stage 2 tests be a helpful thing to do?

1592329372
ifreund
i mean they would be disabled by default until stage2 supports the features of course

1592329454
pixelherodev
ifreund: as of this morning, pretty good :)

1592329476
pixelherodev
But no, that's not useful yet

1592329485
pixelherodev
We need the Zig AST -> ZIR PR merged first

1592329501
pixelherodev
Once that's done, I'll extend the test harness to support testing Zig source instead of ZIR

1592329507
pixelherodev
Then we can worry about stage1 tests

1592329531
ifreund
ah yeah right, we're still in ZIR land

1592329536
pixelherodev
Not for long :D

1592329543
pixelherodev
Andrew has the AST -> ZIR PR open

1592329546
ifreund
i know, things are moving!

1592329550
pixelherodev
Yeah, it's really nice

1592329558
pixelherodev
I'm going to try to get function calls with arguments finished today

1592329569
pixelherodev
Then any other PRs I may have open

1592329599
pixelherodev
Then I'm going to alternate between tackling more ZIR work, finishing and simplifying the testing framework (adding convenient API wrappers), and my alternate stage1

1592329696
scientes
pixelherodev, in C++?

1592329711
pixelherodev
No.

1592329712
pixelherodev
C.

1592329720
pixelherodev
I'm not using LLVM for this, I'm using ZIR.

1592329724
scientes
oh gotcha

1592329728
pixelherodev
and I want a compiler that doesn't depend in >4M lines of C++

1592329733
pixelherodev
s/in/on

1592329740
ifreund
heh, found myself a nice workaround for the c_void issue

1592329753
pixelherodev
I have an intense dislike for LLVM after the LLVM 10 nonsense

1592329756
scientes
pixelherodev, but then you don't have an optimizing compiler

1592329763
pixelherodev
Unless, and here's a thought

1592329769
pixelherodev
a) I write basic optimizations myself

1592329770
scientes
pixelherodev, and the CPU has far more lines than that....

1592329776
pixelherodev
b) I don't care to optimize all that much

1592329785
pixelherodev
and c) it's only intended to build stage2, so performance is irrelevant

1592329798
ifreund
i mean the goal of stage 1 is just to build stage2 right

1592329799
ifreund
yeah

1592329801
pixelherodev
Rather, generated code performance isn't relevant

1592329801
scientes
the C) one is very valid to me

1592329806
leeward
ifreund: That is quite the work around.

1592329810
pixelherodev
The idea is to do only very basic optimizations

1592329819
pixelherodev
Enough that the build stage2 is at least reasonably useful

1592329826
pixelherodev
And can then build itself in a reasonable timeframe

1592329865
ifreund
leeward: only in zig can you do shit like this to work around compiler bugs :D

1592329868
pixelherodev
Here's the kicker though

1592329875
pixelherodev
This is going to be part of my project tricarbon

1592329884
pixelherodev
Which means, any optimizers I write for this will be usable for my other projects

1592329887
pixelherodev
and vice versa

1592329901
ifreund
nice so it's gonna be ZIR -> RISC V in C?

1592329905
pixelherodev
I might do that

1592329909
pixelherodev
It's multiple components

1592329916
pixelherodev
First, Zig parser / AST builder

1592329922
pixelherodev
Second, AST -> ZIR

1592329927
pixelherodev
Third, comptime executor

1592329932
pixelherodev
Fourth, ZIR backend

1592329934
ifreund
right, comptime

1592329944
pixelherodev
Each one will be usable on its own

1592329953
pixelherodev
So the comptime executor will be able to be integrated into stage2 for instance

1592329959
vroomerify
Sorry to interject here -- I'm a new-comer attempting to build zig from source. When I run "cmake .." it says (missing: CLANG_LIBRARIES), I'm running Arch Linux and I've installed "llvm", "clang", and "lld", so I thought I had everything installed, but apparently not. Do I need to set an environment variable?

1592329969
scientes
leeward, yeah I've done similar stuff

1592329984
pixelherodev
vroomerify: That's the LLVM 10 stuff I was whining about earlier

1592329995
pixelherodev
You need to set CLANG_somethingorother_DYLIB in CMake

1592330002
scientes
leeward, also its invalid because you need to do *align(4) u32

1592330009
scientes
oh nvm

1592330010
pixelherodev
Or LLVM_somethingorother_DYLIB maybe?

1592330027
scientes
I mean ?*align(4) c_void

1592330055
scientes
or *align(1) u32

1592330057
ifreund
vroomerify: from the arch PKGBUILD you need -DZIG_PREFER_CLANG_CPP_DYLIB=ON

1592330074
ifreund
idk why you need it on arch, i don't need it on void

1592330090
ifreund
well i do know why, llvm 10 is slightly broken

1592330231
vroomerify
ifreund / pixelherodev, thanks for the heads-up. When you say PKGBUILD, are you referring to a file in/associated with the zig package for arch?

1592330232
pixelherodev
yeah that's the one

1592330238
pixelherodev
uh

1592330240
ifreund
this

1592330241
pixelherodev
was responding to ifreund

1592330242
pixelherodev
sorry

1592330258
pixelherodev
Just do `cmake . -DZIG_PREFER_CLANG_CPP_DYLIB=ON` in the build folder

1592330274
scientes


1592330277
scientes
woah this is interesting

1592330290
pixelherodev
what is it?

1592330344
scientes
basically regexp-style optimizations in LLVM which means that the speed does not slow down so much as you add more optimizations

1592330432
rom1504
I'm following the project and wondering what's the thing that could make zig really used by people. It seems having a package manager would be a good feature. I see it's planned but apparently a second priority to the self compiler. A bit confused about that. What does self compiling provides ? (In addition to being cool)

1592330476
scientes
rom1504, a cmopiler is a really good proof that the language is in decent shape

1592330505
scientes
go-lang is one of the few that seriously delayed self-hosting

1592330524
pixelherodev
self-hosted compilation is a must for any language that wants to be taken seriously

1592330525
ifreund
also there's good reason to prefer writing code in zig over c/c++

1592330569
rom1504
Ok, so you'd say being able to self compile is a blocker for people starting to build things with zig ?

1592330595
rom1504
I can imagine along the path of building a self compiler the language might change and it could explain the blocking part

1592330786
rom1504
One of the biggest weakness of c and c++ is how annoying it is to use and combine dependencies (and publish new packages), so that's definitely something that would make people consider using zig (to have a package manager)

1592330809
rom1504
And all new languages have some kind of package manager (with more or less success)

1592330875
rom1504
But I see zig is developing quite nicely, I guess Andrew has a big plan :)

1592330951
pixelherodev
Eh, I actually prefer that C projects tend to have fewer dependencies

1592330967
pixelherodev
A package manager is all well and good, as long as we don't turn into Cargo / NPM / etc

1592330972
ifreund
^

1592330980
pixelherodev
Easier packaging, yes.

1592330981
ifreund
it's more of a culture thing really

1592330988
pixelherodev
Bloated dependency graphs, hell no.

1592330997
pixelherodev
For sure

1592331005
pixelherodev
Doesn't make it any less annoying though

1592331008
pixelherodev
:P

1592331015
ifreund
but yeah, zig is already far enoungh along that I'm very happy to have chosen it for my project

1592331056
ifreund
a few rough edges here and there, but worth it to be writing in a modern language with much stronger pointer typing and nice error handling

1592331059
ifreund
also comptime is awesome

1592331226
leeward
I would be happy to switch entirely from C to right now if the implementation could handle it.

1592331377
ifreund
i can even have a nice compile error :)

1592331601
afontain_
also, I'd appreciate if it coud play well with distribution package managers. For example, it shouldn't try to download dependencies from the internet (python and cargo tend to do that). It also shouldn't be too anoying about version requirements: breaking ABI "just because you can" isn't nice, nor is using an outdated version of the dependency just because you can ask the package manager to use the old version.

1592331690
afontain_
(note that using outdated dependencies is also a problem in the C world)

1592331775
pixelherodev
Working with distribution package managers is a must for me

1592331778
pixelherodev
I won't touch any packages that don

1592331780
pixelherodev
't

1592331781
ifreund
yeah same

1592331783
afontain_
(breaking ABI is also something that exists in the C world, but soname differences mitigate that)

1592331811
ifreund
C packaging is pretty messy tbh, theres a reason there are so many different takes on package managment

1592331833
scientes
ifreund, not as messy as it is diverse

1592331847
ifreund
but yeah I want distro packagers to be pleasantly surprised by zig packaging not cursing it

1592331880
ifreund
scientes: it could be argued that the diversity stems from the fact that there's no knockdown way to do it well

1592331894
pixelherodev
ifreund: it could also be argued that it's because there

1592331900
pixelherodev
Some languages try to enforce their "correct way"

1592331903
pixelherodev
it never ends well.

1592331906
ifreund
fair

1592331917
scientes
pixelherodev, the problems come with naming too many namespaces in too many places

1592331937
pixelherodev
?

1592331946
scientes
like how C developed a need for header files (which isn't part of the language), because of how declarations need to be forward declared

1592331965
scientes
which was all about supporting extremely-low-memory systems

1592331990
leeward
C needs header files because interfaces shouldn't live with specification, and tooling didn't exist in the '70s to auto-generate documentation from code.

1592332017
scientes
leeward, but it isn't part of the language

1592332031
leeward
That's a matter of semantics.

1592332047
leeward
Or are you talking about the preprocessor's #include?

1592332055
ifreund
that's how headers work yeah

1592332066
ifreund
headers are part of the preprocessor not C

1592332071
scientes
sometimes I write C with #include "foo*.c*"

1592332077
scientes
just to make it simpler

1592332098
leeward
CPP is specified in the standard.

1592332110
leeward
That's how C99 got to have variadic macros.

1592332114
pixelherodev
scientes: that's... questionable, to say the least

1592332119
andrewrk
xackus, yes, one maps to the text format, one is an in-memory format, but can be serialized to the text format

1592332120
pixelherodev
Ooh, idea

1592332133
pixelherodev
A zig build system port to C

1592332142
pixelherodev
It's straightforward enough to be pretty simple

1592332152
pixelherodev
Better yet, @export it

1592332155
pixelherodev
A C API wrapper

1592332190
ifreund
the point is to be able to write a build.c instead?

1592332195
pixelherodev
Yeah

1592332210
ifreund
idk, i'd rather just write it in zig :D

1592332223
pixelherodev
The idea is for my stage1 compiler

1592332227
pixelherodev
and potentially the official one

1592332231
pixelherodev
Remove the dependency on CMake

1592332237
leeward
I don't think the world needs another build system, but I don't write code on Windows so I can just use Make.

1592332256
companion_cube
or ninja

1592332260
pixelherodev
^

1592332357
leeward
If I'm using ninja, it's wrapped in Make and I don't have to know about it.

1592332358
leeward
:P

1592332362
pixelherodev
Uh, what?

1592332365
scientes
make is gross

1592332367
pixelherodev
That's... yeah

1592332370
pixelherodev
Make is awful

1592332374
pixelherodev
Ninja is waaay better

1592332380
leeward
Make is good at its job; it's just very old.

1592332382
companion_cube
leeward: you can genrate ninja from zig

1592332387
pixelherodev
The idea is a simple build system with no dependencies other than a C compiler - no CMake, no python (Meson), etc

1592332402
pixelherodev
leeward: ninja is much better at Make's job

1592332404
pixelherodev
lol

1592332411
scientes
but ninja can't call ffi

1592332440
scientes
anyways, its about data structures and algorithms

1592332449
scientes
not names of things

1592332465
leeward
pixelherodev: Ninja is much newer than Make, and it's not as good at the job of having humans edit it.

1592332474
pixelherodev
True

1592332494
ifreund
make isn't bad at all for simple projects

1592332501
leeward
It's fine, but when I write a 20-line C program it comes with a Makefile.

1592332506
ifreund
i quite like meson for larger C/C++ things though

1592332525
scientes
I like writing zig where you don't need any build system

1592332530
scientes
just a build-exe or build-lib

1592332544
scientes
THAT is the way it should be done

1592332576
pixelherodev
lol

1592332577
pixelherodev
no

1592332586
pixelherodev
For the same reason cproc shouldn't be invoked directly

1592332605
fengb
If we adopt gopath way, that could be achieved :P

1592332613
pixelherodev
Nobody wants to repeatedly type out `$COMPILER $SOURCES -o $OUTPUT $FLAGS $LIBRARIES` repeatedly

1592332621
leeward
pixelherodev: Yeah, I get why we have zig build, and I'm not too cranky about it (still a little cranky) but the "no extra programs" thing is kinda weak. You can always just build the program that builds your code along side the compiler, or as part of it, and use a DSL for specifying DAGs.

1592332623
pixelherodev
`ninja` / `make` / `zig build` is totally fine

1592332629
scientes
except build.zig is equilivent to wget foo.sh; sh foo.sh

1592332655
pixelherodev
scientes: how so?

1592332669
pixelherodev
leeward: what "no extra programs" thing?

1592332716
leeward
pixelherodev: build.zig only depends on the zig compiler, right? Make only depends on a C compiler if you have a source distribution.

1592332726
ifreund
scientes: if you're doing that you could just add the #!/bin/zig run  shebang and chmod +x

1592332748
pixelherodev
leeward: the build system, yeah, but you

1592332751
ifreund
i think you need slightly more that in the shebang though

1592332791
pixelherodev
For sure

1592332796
pixelherodev
That wouldn't work correctly, I don't think

1592332802
pixelherodev
Yeah no

1592332804
leeward
Shebangs don't like lots of command line arguments.

1592332809
pixelherodev
You need `zig build` because you need the build_runner

1592332824
leeward
#!/bin/zig-repl though

1592332844
pixelherodev
#!/usr/bin/zig-build

1592333004
ifreund
this works for me:

1592333006
ifreund
/bin/zig run $0 ; exit

1592333023
ifreund
oops, should be one more / at the beginning

1592333028
chapl
andrewk, are you there?

1592333510
chapl
I misspelled his name. Omg. @andrewrk

1592333825
andrewrk
hello

1592334065
chapl
You just were in the Discord. I wanted to ask you if you could help us solve the Zig + JNI issue for Windows.

1592334341
chapl
@andrewrk

1592334433
andrewrk
you have my divided attention

1592335989
vroomerify
Where is the current code for building glibc, I'm assuming it's all in glibc.cpp? I'm trying to get a feel for this issue:

1592336005
vroomerify
Full-disclaimer, I know nothing about this topic, but I figure the best way to learn is to attempt to solve the issue.

1592340486
pixelherodev
andrewrk: what's the progress on AST -> ZIR? Estimated timeline for merge?

1592341499
Barabas
Good evening!

1592341681
ifreund
o7

1592341718
Barabas
I'm having trouble finding my way around getting the command line arguments and opening a file.

1592341755
Barabas
and now I found that we have a `getCwd` in `std.process` but there's also `cwd` in `std.fs`

1592341861
ifreund
for getting the args your program is passed `std.process.args()` will return an iterator

1592341952
ifreund
for opening a file you generally do `std.fs.cwd().openFile()

1592341968
Barabas
Thanks

1592342001
ifreund
if you're on a posix system you can also get the args directly with std.os.argv

1592342115
Barabas
I am not.

1592342528
leeward
So I'm trying to cross compile an SDL application for Windows, and it looks like I'm missing a library called Mmtimer. It's the one with timeBeginPeriod and timeEndPeriod. Is this a thing the Zig distribution should provide? It seems like it might be part of mingw.

1592342661
Barabas
It feels like the error on the `std.process.ArgIterator.next` is at the wrong level. I expect to be able to do `while (try it.next(allocator)) |next_arg|` not ehm... whatever it is I have to do now :P

1592342888
ifreund
that looks awkward indeed, i always us posixNext() cause my stuff doesn't support windows. Let me try and find a clean way

1592343243
ifreund
Barabas: this isn't too bad

1592343264
leeward
It seems like there are a bunch of windows libraries that aren't getting linked...maybe I need dynamic linking?

1592343491
Barabas
ifreund: Yeah, that's awkward imho.

1592343539
ifreund
i blame windows

1592343575
fengb
Thereâ€™s also argsAlloc, but that allocates all the memories

1592343605
leeward
Windows is easy to blame. Coming from a sane environment, it's pretty awful.

1592343635
Barabas
Everything is easy to blame if you're used to the other thing.

1592343643
fengb
Itâ€™d work better if we switched to UTF16

1592343652
ifreund
nooooo

1592343655
fengb
But who wants that

1592343667
Barabas
Windows guys in the 90s?

1592343667
ifreund
posix is objectively better in this case IMO

1592343688
Barabas
Anyway... it works, but it doesn't open relative files.... I think...

1592343860
Barabas
It's like this:

1592343948
leeward
ifreund: objectively and IMO, eh? Not that I disagree.

1592343978
ifreund
you're right, retract that IMO

1592344054
leeward
:)

1592344064
ifreund
Barabas: arg handling could be

1592344086
fengb
IMO = in my objective

1592344129
Barabas
ifreund: Thanks! That looks better indeed.

1592344303
Barabas
Apart from relative paths not really working on windows I just have to figure out why my json that was in a static string and now in a file suddenly doesn't work anymore.

1592344354
Barabas
Oh cool, that was just me.

1592344893
Barabas
Thanks guys and good night  :)

1592344913
ifreund
night!

1592345530
andrewrk
pixelherodev, hopefully today, workin on it

1592345535
ifreund
who needs @Type(.EnumLiteral) when you have @TypeOf(.foobar) :D

1592345563
andrewrk
pixelherodev, working on this test case:

1592345581
andrewrk
then for fun going to benchmark what happens with a million print(); :-)

1592346498
pixelherodev
Oh neat :)

1592346564
pixelherodev
andrewrk: I'll try to get ZIR function arguments submitted tomorrow :)

1592346569
pixelherodev
That should allow for more AST -> ZIR testing :)

1592347971
blueberrypie
epic netsplit

