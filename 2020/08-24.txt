1598234008
andrewrk
ronsor, it's definitely possible to get stack traces working in freestanding/uefi. you'll have to override the default panic handler

1598254680
cr1901_modern
ifreund: Thank you! That was the correct answer :D! Hopefully, I'll get the hang of that eventually.

1598254820
cr1901_modern
AFAICT, when a binding is created, the "*" means "make the mutable" rather than "this is a pointer", and Zig doesn't guarantee whether you receive a pointer to the object or it's in registers or by stack ptr offset etc

1598261333
ifreund
cr1901_modern: my understanding is that |foo| is similar to passing by value and |*foo| is passing by pointer

1598261394
ikskuh
ifreund is correct. |*foo| guarantees pass-by-pointer, you receive a pointer type then

1598261396
ifreund
passing by value in zig always means that the value is immutable

1598261719
cr1901_modern
>Zig may choose to copy and pass by value, or pass by reference, whichever way Zig decides will be faster.

1598261719
cr1901_modern
Oh, this only works for "foo", not "*foo"

1598261736
ifreund
exactly

1598261795
ifreund
I'm using "pass by value" do describe the semantics, the compiler may optimize things

1598266648
protheory8-new-m
> The Zig Standard Library implements an event loop that multiplexes async functions onto a thread pool for M:N concurrency.

1598266648
protheory8-new-m
How do I turn this on?

1598266727
ikskuh
add "pub const io_mode = .evented_io;" to your main file i think

1598266732
Nypsie[m]
In your root file, define pub const io_mode = .evented;

1598266744
ikskuh
ah dang D

1598266750
Nypsie[m]
:)

1598266774
protheory8-new-m
Cool, why does `io_mode` activate it though?

1598266811
protheory8-new-m
Do I need to use async IO functions from standard library in my async functions to use this event loop or something?

1598266828
ikskuh
there's code in std/start.zig that will check this variable and enable certain behaviours based on that

1598266852
ikskuh
no, all standard abstractions should be async aware already

1598267009
protheory8-new-m
Yeah but, if I have an async function that doesn't call any other async functions at all, will it still be multiplexed onto a thread pool for M:N concurrency after I do `pub const io_mode = .evented;`?

1598267050
ikskuh
no

1598267056
ikskuh
async doesn't do magic in zig

1598267071
ikskuh
if a function does suspend, it requires a plan to be resumed

1598267103
ikskuh
std io functions have the plan to be resumed by the event loop eventually

1598267111
protheory8-new-m
OK, thanks

1598267131
ikskuh
you should read some of the event loop code to answer those questions, there may be a way to do that though

1598267136
protheory8-new-m
Kinda confused when should async functions suspend then

1598267212
protheory8-new-m
Where can I read that event loop code?

1598267250
ikskuh
std/event.zig and std/event/loop.zig

1598267263
ikskuh
functions suspend when they call suspend or call a function that calls suspend

1598267268
ikskuh
or when a function uses await

1598267381
protheory8-new-m
I know that, but when does function want to call suspend?

1598267454
ikskuh
sorry, i don#t fully understand that question

1598267463
ikskuh
suspend will yield control flow back to the caller of the function

1598267469
ikskuh
so it can be resumed later

1598267495
ikskuh
functions want to call suspend when they have triggered a task that can be done asynchronously (like reading from a file)

1598267672
ifreund
e.g. here

1598268041
ikskuh
do i see it right that it's not yet possible to send stdin to a std.build.RunStep?

1598278555
fengb
Suspend is an independent concern from the event loop

1598283338
fengb
I exist

1598284116
fengb
Maybe not :(

1598285158
ikskuh
hey fengb

1598285181
Nypsie[m]
I acknowledge your existance, fengb

1598287920
scriptnull
Hi, I have a question regarding allocators and type casting. Is it possible to allocate an array of u8 and use it to hold a struct (of size less than or equal to the allocated memory) ? If so, how do we cast this array of u8 to the desired struct?

1598287989
Nypsie[m]
@bitCast(Struct, bytes) where bytes need to be same size as your struct

1598288006
ikskuh
Nypsie[m]: i don't think that's the right solution here

1598288060
ikskuh
std.mem.bytesAsValue seems about right

1598288078
Nypsie[m]
Ah, maybe a ptrCast then?

1598288099
ikskuh
you also need to respect alignment and stuff

1598288110
Nypsie[m]
Oh you're right

1598288182
Nypsie[m]
std.mem.bytesAsValue() is probably better than, right?

1598288228
ikskuh
i think so

1598288247
scriptnull
Thanks! I will try std.mem.bytesAsValue() then.

1598289217
fengb
If you're talking about allocation, why not use `allocator.create(Struct)`?

1598290217
xenon44
Hi, little issue, linking with libc errors: "unrecognized glibc version: 2.32.0". That's the version the system is using, so the issue may not be "missing pattern awareness" as suggested by andrew kelley in an github issue

1598290246
xenon44
Does one need to update glibc version as stated somewhere on github?

1598290625
fengb
We recently merged that in so it shouldn't be necessary. Did you download the latest?

1598290900
xenon44
Yeah, I'm on master

1598291470
xenon44
Sorry for causing you any work/loss of time, found the issue: my stupidity. A dangling symbolic link, pointing to an old build of zig. sorry.

1598293963
fengb
We've all been there :P

1598294495
scientes
if (random()) { }

1598305791
ky0ko_
just updated zig and now i'm getting an error in a codebase that was compiling fine an hour ago:

1598305886
ifreund
must be related to the glibc update

1598305896
andrewrk
ky0ko, thanks I'll look into this today

1598305913
ky0ko_
can be reproduced just by including sys/param.h from c, it looks lie

1598305924
andrewrk
can you share your target information?

1598305960
ky0ko_
arch linux, x86_64 - need anything more specific than that?

1598306336
andrewrk
let me try to reproduce it

1598306472
andrewrk
ky0ko, I can reproduce, thanks

1598306826
ifreund
idk if it helps at all, but my git pull showed that related headers were deleted

1598307537
andrewrk
hmm yeah looks like that commit needs to be audited

1598307546
andrewrk
I'll revert it for now

1598307636
andrewrk
ky0ko, that commit is reverted

1598307694
ky0ko_
thanks

