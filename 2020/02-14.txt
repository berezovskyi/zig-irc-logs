1581645232
pmwhite
i'm wanting to write a regular expression library; what are people's preferred RE dialect? I'm thinking POSIX Extended Regular Expressions is good because it is a standard.

1581645327
mikdusan
there's a GSoC idea for RE here:

1581645411
pmwhite
ah, would you look at that

1581645461
andrewrk
mikdusan, fyi

1581645526
mikdusan
👍

1581645539
mikdusan
I was on the fence about what that was morphing into

1581645787
mikdusan
if cmake is not case-sensitive then maybe we need to fix our CMakeLists.txt file; it has several conditionals based on "Debug" and "Release" - should we just define a lower-cased var for CMAKE_BUILD_TYPE and use that in our conditionals?

1581645823
andrewrk
sorry that was a typo. it

1581645827
daurnimator
mikdusan: I thought the point was the cmake

1581645836
andrewrk
I typo'd in the commit msg

1581645837
daurnimator
release != Release. both could be valid

1581645856
mikdusan
ok I'm back on the same page :)

1581645910
daurnimator
andrewrk: good to know @typeId is deprecated. I was going to propose its removal as soon as #4435 was merged.

1581645922
andrewrk
I think if any zig package has patched out the "llvm must have all the default targets enabled" assertion in the configure script, we should add a warning on

1581645951
andrewrk
I checked the gentoo package and it does not appear to have done that, so false alarm there

1581645973
andrewrk
it's a bit scary to advertise "really good at cross compiling" and then package maintainers delete that feature :(

1581646012
daurnimator
andrewrk: in gentoo the idea was that its up to the sysadmin on how they want to compile LLVM

1581646021
daurnimator
they'd probably see it as taking away choice from the users

1581646025
andrewrk
right, this is the classic negotiation between upstream and downstream

1581646048
daurnimator
"I'm never going to compile for PPC; why would I want that code sitting around on my system"

1581646092
andrewrk
this is a (perverse) incentive to self-hosted without llvm. package maintainers would be less likely to mangle the codebase

1581646097
daurnimator
gentoo emphasises end-user choice where you customize your build to be only the minimum set of functionality you need

1581646120
daurnimator
this works because in gentoo the end user compiles everything themselves.

1581646186
andrewrk
yes and this motivation is reasonable. yet in practice, upstream ends up getting issue reports from actual users being surprised that the software errors on their system instead of just working

1581646263
daurnimator
should we print a warning? --> if target is unavailable then print an error "it seems as though your LLVM was compiled without support for $TARGET; you'll need to work with whomever compiled your LLVM"

1581646300
andrewrk
it's a hard error that fails the configure:

1581646309
andrewrk
s/hard/fatal/g

1581646318
daurnimator
right; but hard errors will get patched out

1581646331
daurnimator
leave a soft error somewhere else

1581646404
andrewrk
nah the hard error is exactly right. it communicates clearly that upstream considers these features necessary for the software to be functional

1581646417
andrewrk
if downstream wants to patch it out, they have that right

1581646490
daurnimator
but as you say: downstream will patch it out; but users will come to us: we should leave a soft warning behind.

1581646667
andrewrk
are we aware of any such patching?

1581646683
andrewrk
this might be one of those problems that only exists because we are thinking about it

1581646707
daurnimator
not yet I think

1581647015
pixelherodev
Personally, I think that allowing builds with limited target support is fine

1581647031
pixelherodev
If someone is compiling themselves to use the binary themselves, they probably know what they're doing

1581647048
pixelherodev
Maybe have an option to replace the configuration assertion with a runtime compiler error?

1581647063
andrewrk
the situation is that person A is compiling it for N other people who are not aware of these changes

1581647103
andrewrk
there's no option. according to zig if your llvm is missing targets, zig refuses to build

1581647140
andrewrk
this is intentional. to build zig without all the targets enabled is to fork zig

1581647190
pixelherodev
I'm saying that as a Gentoo user, I'd have preferred being able to build Zig without needing to let my computer run overnight rebuilding LLVM + Clang

1581647204
pixelherodev
As person A compiling for zero other people :)

1581647226
andrewrk
well you are free to fork zig and disable some targets

1581647485
fengb
Ziglite

1581647614
mikdusan
any quick summaries on what src/zig_clang.cpp/ZigClangLoadFromCommandLine() does ?

1581647717
andrewrk
mikdusan, it's the entry point to libclang's semantic analysis API. it relies on a lot of C++-isms, so it was easier to sort of invent a more C-friendly function and put a few chunks of code in there

1581647739
andrewrk
the main function there is clang::ASTUnit::LoadFromCommandLine. the rest of the code is mainly extracting error messages

1581647826
mikdusan
something therein is borking on sourcehut:

1581647852
mikdusan
i threw a userland print stacktrace before stage1 reports the error. but it only has 1 line

1581647987
andrewrk
next step is to figure out why null is getting returned without any errors set

1581648006
andrewrk
that "Early failures in LoadFromCommandLine may return with ErrUnit unset." looks suspicious

1581648042
tdeo
trying to use socket control messages in pure zig, anyone mind quickly helping me translate the __CMSG_LEN/CMSG_ALIGN calculation to zig? in the repo at lib/libc/musl/include/sys/socket.h line 299

1581648053
andrewrk
mikdusan, maybe we can access the errors only with `diags` and without unit->stored_diag_begin?

1581648072
andrewrk
then we can delete that early `return nullptr`

1581648105
andrewrk
tdeo, you can use `zig translate-c` to do this :)

1581648137
andrewrk
make a file called foo.c with contents "#include <sys/socket.h>"

1581648149
andrewrk
zig translate-c foo.c -lc -target x86_64-linux-musl

1581648175
tdeo
i can, i want to eventually make a PR for this and translate-c generated code would be a bit long/weird

1581648194
tdeo
relies on overflow and wondering if there's a more idiomatic way in zig

1581648195
andrewrk
yes you will have to isolate the structs/bits you are interested in and clean it up

1581648235
mikdusan
andrewrk: I'm just brainstorming here; I seem to recall sourcehut doing sometihg with CPU-ID but admit not paying close attention. if they do some odd cpu reporting, I'm wondering if there is a path ZigClangLoadFromCommandLine takes that causes error

1581648324
tdeo
but yeah, a literal translation is enough to get started with actually

1581648585
andrewrk
mikdusan, I think libclang has errors for us and we are not using the API to find them correctly

1581648631
fengb


1581648693
fengb
Ah poop, it requires swap space

1581648798
andrewrk
so does wikisort (std.sort.sort current impl)

1581648893
fengb
wikisort only requires a 512 byte block. This current implementation requires double the memory (like traditional mergesort)

1581648932
fengb
I like this idea though. I wonder if there could be some improvements, and how much of a hit it would take for a limited merge

1581649339
leeward
daurnimator: For what it's worth, I looked at Hydrogen and it doesn't have what I need.

1581649945
fengb
Hmm, would it be possible to allow functions to have declarations?

1581649967
fengb
Just declarations, no fields. Then we can create functions within functions

1581650205
andrewrk
isn't this solved by

1581650442
mikdusan
andrewrk: yes we need to get at those errors; I did a shortcut to see what clang does with the exact command line args:

1581650444
mikdusan


1581650476
andrewrk
nice sleuthing

1581650606
andrewrk
mikdusan, strange; in codegen.cpp it looks like we would only pass -Xclang -target-cpu when the target is not native

1581650611
andrewrk
codegen.cpp:9208

1581650618
mikdusan
here are the args:

1581650655
andrewrk
oh! we are passing -march=native. so basically if you try to compile any C program with -march=native on sr.ht it will fail

1581650678
mikdusan
i changed it to -march-skylake and got positive results

1581650691
mikdusan
=skylake

1581650740
mikdusan
and taking out -march entirely i get results so what is clang doing that we can do :)

1581650826
daurnimator
leeward: oh? what do you need?

1581650844
fengb
1717 doesn't specify where an anon function goes so I was assuming it wasn't decided yet. Section on "Where does the anonymous function's code get put?"

1581651065
mikdusan
afk for a bit

1581652110
fengb
`typedef uintptr_t (*fn_usize)(*void);`

1581652125
fengb
... why is the identifier in the middle of this statement?

1581652154
andrewrk
mikdusan, I filed

1581652400
leeward
daurnimator: crypto_box and secretstream

1581652604
andrewrk
we should really just ditch sr.ht and find a better quality freebsd ci server

1581652820
mikdusan
was there any clues as to why this happens on sr.ht?

1581652832
mikdusan
the bad cpu-id

1581652879
andrewrk
yeah it's running in qemu and for some reason sr.ht is setting a flag to override the cpu name

1581652889
mikdusan
and the motivation for that?

1581652905
andrewrk
I don't recall

1581652926
mikdusan
psa: multiple ssh into sr.ht is cool. but be warned, the

1581653950
daurnimator
leeward: hydro_secretbox_* should be like crypto_box right?

1581654557
leeward
Nope, I don't need authentication.

1581655052
leeward
or non-repudiation

1581655100
leeward
I do need a stream cipher though.

1581657419
mikdusan
so those diagnostics are in `clang::ASTUnit.FailedParseDiagnostics` which is... private :(

1581668262
daurnimator
fengb:

1581674684
wilsonk
if I am trying to access an external C enum member that is a struct and I am getting the error 'expected type [*].structtype found *.structtype' then how to I get the '[]' part? All I am doing in zig is trying to take the address of the c enum.struct ala. '&enum.struct'

1581677772
wilsonk
ok, I coerced it using two coercion steps ala.  'single item pointers can be cast to len-1 single item arrays' in the docs but it is pretty verbose and a little ugly. I have to use it in a couple other spots as well. Is there an easier way, by chance?

1581690668
Xatenev
hello

1581690680
Xatenev
when was the first version of zig released? thank you

1581690681
Xatenev
I can'T find it.

1581690807
Xatenev
ah, found it on the download page, 2017-10-17 :)

1581692976
fengb
I'm so glad circular imports work just fine. Enjoy the little things :P

1581693042
shakesoda
fengb: wonderful

1581694607
mikdusan
looks like Cirrus CI 2xCPU and 4GB FreeBSD VM fails with large test too. also it has a 2-hour hardlimit

1581694655
andrewrk
mikdusan, I think we can get them to change the API

1581694660
mikdusan


1581694672
mikdusan
andrewrk: clang?

1581694675
andrewrk
yes

1581694689
andrewrk
not before llvm 10, but for 11

1581694880
mikdusan
I don't have the big picture of their stuff, but clang driver is somehow emitting those diags. I'm wondering if they're using a better diags mechanism that we might consider switching to

1581694899
andrewrk
that's a good question

1581694926
mikdusan
my head just spins reading their source... I have a hard time grok'ing CamelCase for members :(

1581694970
mikdusan
that and C++'s allergy to using (should be forced) `this->`

1581694988
andrewrk
this process is getting quite long!

1581695096
shakesoda
mikdusan: yeah, i've never been a fan of implicit this-> either

1581695204
mikdusan
oh right; my local llvm-10 builds are going to have to enable LLD subproject. looking forward to faster zig bootstrap.

1581695279
shakesoda
speaking of c++, does zig builder play nice with c++ sources

1581695315
andrewrk
it will but has not been tested much yet

1581695397
shakesoda
sounds good to me, i just want to convince it to build imgui + c bindings

1581695413
shakesoda
(perhaps also bullet, but that's for much later)

1581695504
andrewrk
ok, so now that sr.ht fixed their cpu bug, nearly all freebsd tests are passing. "out of memory" was a red herring

1581695594
mikdusan
that .zig code, I'm not sure it should be sending out-of-memory. Maybe just error.ParseSetupFailure or somesuch

1581695613
andrewrk
agreed

1581695685
mikdusan
how does C++ land know about all the error codes in errmsg.cpp ? the enums match zig land?

1581695706
andrewrk
yes, carefully matched ABI

1581695839
mikdusan
ah stage1.zig

1581695973
andrewrk
these are all the tests that now pass on sr.ht freebsd:

1581695983
andrewrk
the only one left is std.zig due to OOM as we thought

1581695997
mikdusan
thumbs up for test-standalone

1581696021
andrewrk
at least the tarballs will now have docs in them :)

1581696054
mikdusan
yeah on my local FreeBSD VM 4GB doesn't do it. i

1581697847
alexnask
Hi, quick question, are all C pointers allow_zero? (I would expect so, just want to make 100% sure)

1581698000
mq32
hey alexnask

1581698009
mq32
no, c-pointers are usually optional instead of allowzero

1581698030
mq32
allowzero means that "0x00" is a

1581698082
alexnask
True, I hadn't considered that.

1581698132
alexnask
I'm working on #4401 right now, allow_zero is passed from the pointer type to the slice type by default and it seems C pointers always end up in allowzero slices (which is wrong)

1581698154
alexnask
Which I've fixed in my branch, just wondering what I can assert about the C pointer type

1581699092
fengb
I think there was some talk splitting the implicit optional out from `[*c]`

1581699234
alexnask
Wouldn't it be equivalent to [*] at that point?

1581699271
fengb
No, it's still `*` or `[*]`, but we can translate them to `?[*c]`, which is slightly better

1581699279
mq32
you can index a [*]ptr by using ptr.* and ptr[0]

1581699307
fengb
Force the Zig code to double check optionality, which is a common problem in C APIs

1581699445
andrewrk
AlexMax, [*c] pointers are allowzero

1581699468
fengb
Wrong alex 🙃

1581699475
andrewrk
oh wow I didn't even notice

1581699482
andrewrk
alexnask ^

1581699496
andrewrk
it's not planned or even proposed to change this. I'm pretty sure status quo is correct

1581699505
alexnask
Hi :)

1581699509
andrewrk
welcome back!

1581699531
alexnask
Thanks :p Getting acquainted to the C++ compiler again :D

1581699568
andrewrk
much has changed

1581699607
andrewrk
some highlights: translate-c is self-hosted now

1581699622
andrewrk
(still using the libclang API tho)

1581699767
andrewrk
var args is gone

1581699771
andrewrk
but we have tuples

1581699778
alexnask
I took a look at some of the past PRs and commits, mostly metaprogramming ones, also the new async functions etc

1581699840
alexnask
tuples == anonymous lsit literals right? Or did I miss a huge feature? :P

1581699896
andrewrk
right. but note

1581699929
andrewrk
mikdusan put this together:

1581699949
alexnask
Nice, thanks for the link

1581699963
andrewrk
the release notes for 0.6.0 are going to be gargantuan

1581700290
fengb
Maybe you should start now ;)

1581700328
companion_cube
maybe that's an acceptable stream topic :D

1581700414
andrewrk
gonna give myself 2 weeks this time, for my sanity

1581700431
fengb
How overengineered is this?

1581700464
andrewrk
ooh, a mail just popped up: [llvm-dev] Moving the AVR backend out of experimental

1581700500
andrewrk
so far I've perfectly guessed every llvm backend that would get promoted next. 3 cycles ago zig was enabling wasm, riscv, and avr for the downloads page build

1581700587
andrewrk
fengb,

1581700632
fengb
Haha okay. Just wondering if anyone has trouble following it

1581700655
fengb
Me in 3 months is generally less clever

1581700665
andrewrk
wow that's pretty annoying that you have to use a double for 64 bit ints

1581700675
alexnask
lol

1581700732
fengb
I found that out yesterday :(

1581700740
fengb
Wasm is more advanced than JS >_>

1581700765
andrewrk
idk how you invent an ISA from scratch that runs on a VM and don't give it 64 bit ints

1581700781
fengb
Wasm works with i64 just fine

1581700787
andrewrk
oh I see

1581700800
andrewrk
ABI in this case means "javascript can do stuff with it"

1581700802
fengb
Javascript couldn't represent it at the time. It can now but the JS spec hasn't caught up yet

1581700826
fengb
Yeah, I should clarify it

1581700874
fengb
I'm really afraid of using float bits. It feels so dirty

1581702115
metaleap
the zig binary distribution includes "full src" for std or so i thought. some seem to be excluded though @import-referenced elsewhere, such as zig/parser_test.zig

1581702129
shakesoda
why was typeof renamed anyways

1581702146
shakesoda
i'm not sure why some of the @ stuff has initial caps and the rest not

1581702161
mikdusan
capitalized naming convention for types

1581702181
mikdusan
if it returns a type, capitalize it

1581702206
metaleap
the zig binary distribution includes "full src" for std or so i thought. some seem to be excluded though @import-referenced elsewhere, such as zig/parser_test.zig --- by design? by accident? side-effect of some automated-process+lazy-resolving?

1581702246
shakesoda
mikdusan: that makes sense

1581702295
andrewrk
metaleap, some of the tests are very large. for example lib/std/special/compiler_rt/udivmodti4_test.zig which is 9.8 MiB

1581702314
andrewrk
ability to run the std lib test suite is not considered something that is supported with an "installation tarball"

1581702339
andrewrk
testing std is only needed as part of the development process, which makes sense that you would need the full source tree

1581702351
metaleap
ack & thx!

1581702366
andrewrk


1581702796
alexnask
msbuild tells me the build takes 4 minutes, I think it's lying, feels like a couple of hours /.s

1581702856
andrewrk
alexnask, debug or release build? I haven't figured out how to have release llvm + debug zig on windows

1581702866
andrewrk
so unfortunately I test in release mode on windows

1581702892
andrewrk
debug llvm is only usable for testing very specific problems

1581702893
alexnask
Its a release build

1581702905
alexnask
rebuild*

1581702935
andrewrk
alexnask, oh yeah, another big change since you were last here - async/await rewrite is done and it's a success!

1581702949
andrewrk


1581702970
andrewrk
as of a few days ago, the behavioral tests pass with --test-evented-io

1581702989
alexnask
Yeah I looked into that one quite a bit (including event loop code etc), I have to really try wrap my head around it  atm though

1581703245
fengb
The low level is pretty complex. But I really like the high level api

1581703298
andrewrk
if I get this commit done today that I'm working on (self-hosting `zig libc`) then this will be a really nice demo of code that works in both evented mode and blocking mode, yet expresses concurrency

1581704401
andrewrk
huh. I think we need to be able to "select" on multiple `anyframe` values

1581704952
betawaffle
:o yeah, that'd be great

1581704964
betawaffle
or you know... just let us query them directly?

1581704997
betawaffle
i don't want to see zig make the same mistakes Go did

1581705209
andrewrk
don't worry I don't think anyone intends to write kubernetes in zig

1581705224
betawaffle
lol

1581705247
betawaffle
kubernetes was translated from java

1581705279
gchristensen
so a translation to zig might be the next step?

1581705290
betawaffle
:D howdy gchristensen

1581705293
gchristensen
hey hey

1581705320
betawaffle
i'm just waiting for nix to be rewritten in zig, rather than rust

1581705330
gchristensen
not likely, unfortunately

1581705335
betawaffle
yeah, i know

1581705351
gchristensen
though if Zig has a good C++ FFI story ... =)

1581705368
betawaffle
does rust?

1581705377
gchristensen
no

1581705378
betawaffle
it definitely has a good C ffi story

1581705385
andrewrk
afaik the only one is D does. maybe nim since it compiles to C

1581705430
fengb
I don’t think C++ has a good interface to other C++ 🙃

1581705437
gchristensen
pretty much

1581705459
alexnask
C++ FFI requires a full C++ compiler

1581705460
alexnask
:P

1581705466
andrewrk
dom96 can probably weigh in on this

1581705481
gchristensen
I can provide a compiler .... :)

1581705493
alexnask
:D

1581705517
andrewrk
it is true that zig is able to compile C++, which means your project can have .cpp/.h files to provide a C API on top of a C++ API, and build them with zig alone

1581705524
alexnask
D's C++ is pretty amazing you can even use std::string

1581705529
alexnask
ffi*

1581706215
alexnask
--verbose-ir seems to always crash on master right now

1581706441
andrewrk
it doesn't really work with large inputs

1581706443
andrewrk


1581706503
alexnask
Cheers, I should really read through the whole wiki >.<

1581706538
fengb
Read documentation? Who does that 🙃

1581706591
APic
Hi

1581706636
betawaffle
howdy APic

1581706649
alexnask
Docs are for suckers, just start hacking on the compiler /s

1581706704
betawaffle
for some reason i read that as hacking, like with a machete

1581708444
pixelherodev
nix?

1581708449
pixelherodev
Context: `<betawaffle> i'm just waiting for nix to be rewritten in zig, rather than rust`

1581708458
pixelherodev
Meaning *nix? Or NixOS? Or...

1581708553
betawaffle
Nix/NixOS

1581708560
betawaffle
Nix is the

1581708570
betawaffle
which is currently written in C++

1581708573
betawaffle
(mostly)

1581709384
fengb


1581709428
mq32
fengb: that's a site that greatly shows how bad exceptions mess up control flow

1581709445
metaleap
fengb: lol the "exception" one

1581709468
fengb
I actually disagree in practice. Exception flows are generally pretty great

1581709485
andrewrk
this is the kind of thing I'm talking about when I say that async/await is just a function call

1581709487
fengb
Zig errors flow like exceptions, except you know every site that can happen

1581709523
andrewrk
this is a neat article

1581709606
fengb
But it keeps mentioning jai :(

1581709658
andrewrk
I think the real stinker here is `finally`

1581709681
andrewrk
I've never seen `finally` in a codebase and thought, "that is an appropriate way to model this behavior"

1581709721
companion_cube
wait, isn't finally just the equivalent of defer??

1581709731
mq32
companion_cube: it is

1581709736
mq32
but in java, you can return from a finally

1581709740
mq32
and override the original return value

1581709749
fengb
Yeah that's messed up

1581709762
fengb
Although I do wish I could error from a defer in Zig :P

1581709766
andrewrk
I think that suspend/resume is basically coroutines

1581709772
metaleap
in case anyone was just wondering: if you `std.zig.parse()` all 374 `$ZIGPATH/lib/zig/std` .zig files (~5MB) at once (keeping the ast.Tree.source field also allocated/non-freed for the lifetime of the Tree as you must), you allocate in total 45MB.

1581709772
andrewrk
in zig

1581709780
shakesoda
fengb: that sounds like it'd make everything crazy

1581709786
companion_cube
mq32: hu, funny.

1581709804
andrewrk
so basically zig has coroutines. it's suspend/resume. and they're intended to be used to create a higher level abstraction of "async functions"

1581709812
fengb
What, then we can introduce errdeferdefer

1581709827
fengb
Or is it defererrdefer

1581709845
fengb
andrewrk: but you won't let me make my generators :pout:

1581709853
shakesoda
coroutines <3

1581709875
shakesoda
i always miss coroutines when i'm writing things that aren't lua

1581709881
Xatenev
hey guys, noob question

1581709885
alexnask
Cant you just write into some value and suspend to make a generator?

1581709900
andrewrk
fengb, yeah, but it's not a "no", it's just a, "I'm focusing on other design priorities at the moment"

1581709942
andrewrk
alexnask, the problem is the question, "who is in charge of calling resume?"

1581709969
metaleap
Xatenev: you're passing a slice that doesnt point to some known buffer location

1581709972
fengb
alexnask: yeah that's what I did. I'm mostly joking because I ran into major design problems with the current implementation

1581709975
andrewrk
with generators, it is supposed to be the caller. however with zig's coroutines (suspend/resume), it is coordinated by the implementation of the callee

1581709998
Xatenev
metaleap: o i see.

1581710003
metaleap
Xatenev: in other words, your ppm_header points to some random location in memory, and segfault is because you can't write to there

1581710008
Xatenev
metaleap: understood

1581710013
fengb


1581710020
andrewrk
anyway, if we have generators they should work with async functions. so that will require a language change to support generators

1581710027
alexnask
Hmm, I guess I really haven't thought it through, I thought it would be sufficient to keep the frame around and resume after each suspend writes the next value

1581710062
Xatenev
metaleap: is the example on the docs outdated or am I missing something?

1581710076
metaleap
Xatenev link the langref doc is huge

1581710076
Xatenev
metaleap:

1581710080
metaleap
ah

1581710118
metaleap
well you can see there the slice points to a pre-allocated 100-len array

1581710137
fengb
Use a real array: `var ppm_header: [100]u8 = undefined;`

1581710152
Xatenev
metaleap: yeah, I tried earlier with [100] but direcetly passed the array to bufPrint

1581710156
alexnask
and then ppm_header[0..] in bufPrint

1581710160
Xatenev
yep it works now

1581710163
fengb
Slices in Zig are backed by arrays. By creating an undefined one, you're pointing at random memory (actually it's 0xaaaaa in debug)

1581710172
Xatenev
fengb: yeah its similar to go in that respect I guess

1581710177
Xatenev
atleast it looks that way :)

1581710196
fengb
Go is different because the GC can give you arbitrary memory

1581710201
alexnask
Slices are basically references into contiguous memory (arrays)

1581710215
fengb
In Zig, slices have to be backed by real arrays or given to you explicitly by an allocator

1581710231
metaleap
actually go slices are almost the same under the hood but declaring one, it'll default to "nil" meaning len=0 ptr=0

1581710258
metaleap
but yeah when you append() them or items to them, the hidden array allocations happen then.

1581710288
metaleap
Xatenev: if you're coming from go and looking to append() to "slices", your friend will be std.ArrayList(T)

1581710344
alexnask
string_view is the best slice type /s

1581710347
Xatenev
metaleap: thanks :)

1581710445
alexnask
I'm out for now, good evening everyone

1581710556
metaleap
odd: when i std.zig.parse() ~5MB of zig files, every time I run that the number of bytes allocated varies, between 40MB - 45MB.

1581710561
metaleap
my counting allocator following the std.testing.FailingAllocator alloc/free-bytes-counting logic exactly. are arenas random like that? thought they'd always grab 4KB pages so total allocations should be consistent per run

1581710654
andrewrk
see ya alexnask

1581710658
metaleap
there shouldnt be that much entropy in ever-the-same-process. the files in question dont change between runs, neither does my logic

1581710676
andrewrk
metaleap, maybe strace will have a clue

1581710768
metaleap
hm, lets see if `strace zig build run` will follow down the process tree

1581710775
metaleap
i mean zig build test

1581710784
metaleap
ah i can run it on the test binary thats in zig-cache

1581710866
andrewrk
you can do `zig build --verbose` and then copy-paste the cmd line

1581710899
metaleap
noice, thats one to remember

1581711093
metaleap
well that full syscalls-for-374-file-reads strace output is .. for another day :D

1581711108
Xatenev
the docs here are broken: fs.file.File (Struct) should be fs.File (no idea if its relevant or known) just thought i mention it :p

1581711113
Xatenev
on

1581711192
metaleap
thats just a re-export

1581711222
metaleap
std/fs.zig exports File (that becomes std.fs.File) which it got from std/fs/file.zig

1581712584
metaleap
funny, my earlier discrepancy in allocations from one run "identical" to the next: i shut down my technically-forever-running/long-running multi-threaded machinery too early / slept too short (this from a `test` mind you).

1581712592
metaleap
now it's always the same

1581712779
metaleap
clocking in at a whopping 83MB everytime for keeping around & alive in memory all `ast.Tree`s of exactly 430 .zig files of 5MB

1581712827
andrewrk
kinda makes sense - rendered source code is actually quite an efficient way to store an AST. to parse it is to "unpack" it

1581712856
andrewrk
however I foresee the align(0) proposal to be useful here

1581712874
metaleap
well i certainly

1581712946
metaleap
right now its ok for me to be 16MB RAM per 1MB of .zig src-bytes. but when adoption and code-bases everywhere blow up over the years, at some point some unlikely LSP users will balk. nevermind the future tho.

1581712990
metaleap
right now all i know is that more stuff in ram means ready access to more precomputed / not needing to be re-calcd-all-the-time goodies. waiting to be explored

1581713021
alexnask
I remember back in the day there was no comptime allocator, was that added at some point?

1581713036
andrewrk
issue remains open:

1581713041
andrewrk
a lot of the blockers have been solved however

1581713058
alexnask
Cheers, perhaps I will take that one on next

1581713073
alexnask
It should be super useful to write comptime/runtime agnostic code

1581713076
andrewrk
yes

1581713094
andrewrk
this may be related to a particularly tricky issue though:

1581713279
alexnask
I had a pretty good implementation of interfaces (I think it's along the same lines with Hejsil's with options to customize the storage of the object in the interface obj), should be able to adapt it to comptime too.

1581713332
alexnask
I'll go through the other proposals/PRs and try to come up with some good API

1581713355
andrewrk
ok, if you do that I will come up with my list of use cases that I want to solve with that language feature, and we can discuss from there

1581713376
andrewrk
it's stuff like, "an allocator implementation should be able to have comptime alignment access"

1581713408
andrewrk
"the rules about const and error set coercing should apply to interfaces"

1581713410
andrewrk
stuff like that

1581713419
alexnask
Sure thing

1581713663
andrewrk
I'm pretty happy with how this std.fs.Dir API is coming along. it's turning out to be simpler to use that than mess with paths, and it's the better way to do things anyway

1581713730
andrewrk
for example if you want to check if a directory has some file paths - you could accept an allocator and mess with paths, and have a race condition. Or you could just open the directory, defer dir.close() and use dir.access(), and not have any race conditions

1581713888
Sahnvour
about comptime allocator, I wonder if it can be emulated by comptime u8 arrays and type coercion for now

1581713913
alexnask
Yeah you could probably do something like that

1581713980
alexnask
The whole point is to write a single version of the code for both comptime and runtime though

1581714007
Sahnvour
just an idea I wanted to try for fun :)

1581714024
alexnask
The compiler never frees afaik

1581714047
alexnask
So you should be able to initialize a buffer and leak it from a comptime function (?)

1581714090
alexnask
You cant cast memory to arbitrary types though

1581714120
fengb
There's a few compiler errors with how the allocator interface is working atm

1581714155
fengb


1581714163
fengb
And memset to undefined

1581714211
alexnask
Yes type erasure stuff is tricky at comptime

1581714952
andrewrk
alexnask, the compiler frees some things now

1581714959
andrewrk


1581715001
andrewrk
a correct and robust zig language implementation will require garbage collection implemented at comptime

1581715027
andrewrk
from the perspective of a user program, comptime memory is unlimited and managed by the compiler

1581715147
fengb
Isn't GC a bad word? 🙃

1581715703
andrewrk
LLVM: the return type of `icmp a, b` when a and b are vectors is <N x i1>

1581715718
andrewrk
also LLVM: you shouldn't use vectors of i1, it will generate bad code

1581715739
andrewrk


1581716051
fengb
Hmm... do we need vectors of bools? Is there something old school bit operators can't work?

1581716103
wilsonk
is there a way to automatically coerce a single item pointer to a len-1 single-item array with a comptime func or anything? Or do we just have to manually write it out over three lines of code every time? Example in the coercion portion of the docs

1581716135
andrewrk
fengb, bool and i1 are the same thing and they can be bitcasted

1581716221
andrewrk
wilsonk, you could write a function to do it. maybe it should be in std.mem

1581716302
fengb


1581716342
andrewrk
not sure if joking, but you can just put `return ptr`

1581716360
fengb
Oh really? I didn't know it auto coerced

1581716380
andrewrk
yeah, *T coerces to *[1]T

1581716403
fengb
Aha, but it doesn't coerce to slice like the array pointer

1581716410
andrewrk
ah ok so you legitimately meant @ptrCast not @intCast :)

1581716439
fengb
Yeah, do what I mean, not as I type 🙃

1581716446
fengb
I blame stupid fingers

1581716525
alexnask
You can probably take a single var and use type info to find the ptr type

1581716602
wilsonk
I keep getting 'expected type 'type' but found '*c_long'

1581716641
andrewrk
perhaps you put `type` instead of `var`

1581716743
wilsonk
sorry...do you in the error message?  error: expected type 'type', found '*c_ulong' ... that is a direct cut-n-paste

1581716839
andrewrk
in the parameter

1581717001
alexnask


1581717011
alexnask
This is a version that just takes the pointer

1581717018
alexnask
as a parameter

1581717033
fengb
Showoff

1581717038
alexnask
:P

1581717039
fengb
And also it compiles properly too

1581717056
alexnask
Godbolt is bae

1581717275
wilsonk
alexnask: nice, that one worked for me...not to say fengb's wouldn't work for someone that knew the difference, but I just plugged each function into my code and the second one worked out of the box. Thanks

1581717334
fengb
Mine wasn't even compiling lol -_-

1581717339
wilsonk
It is also possible that this is unnecessary and I am just interacting with C in a poor way

1581717368
wilsonk
heh, yes that was my problem also ;)

1581717370
alexnask
I dont really see why you would need a lot of *[1]T pointers

1581717371
andrewrk
ah. yeah with C such a function is useful

1581717382
wilsonk
^^

1581717388
andrewrk
but wait - *T casts to [*c]T

1581717443
fengb
It happens a few times in std

1581717454
andrewrk
I'm going to grab some food and then planning to stream at 6pm EST (in 1 hour)

1581717466
alexnask
windows build takes so long on the CI server :D

1581717495
fengb
Whoo

1581717523
andrewrk
gonna do more easy high level game dev stuff, I'm tired of debugging hard problems in front of an audience xD

1581718049
fengb
Isn't Zig your ultimate yak shave?

1581718173
andrewrk
it's pretty far down the yak stack

1581718202
andrewrk
I have a lot of different projects I want to do, but they all need a programming language to do them in :)

1581718953
fengb
But it's 2020. You should totally implement it in JS

1581718989
alexnask
simulate a universe in TypeScript

1581719005
alexnask
(+ Electron)

1581719091
fengb
Actually that ship is no longer cool. You should totally implement it in Rust / wasm

1581719124
alexnask
TypeScript and Rust are both pretty neat tbh :P

1581719178
companion_cube
fengb: that sounds far too efficient

1581720893
andrewrk
about to turn the stream on:

1581720917
companion_cube
just when I was about to leave work…

1581721062
companion_cube
ok so andrewrk is all "💞♥" today heh

1581721122
mq32
what's the stream topic today?

1581721157
companion_cube
love, of course

1581721185
waleee-cl
game dev stuff

1581721199
waleee-cl
at least he wrote it ~ 1 h ago

1581721531
companion_cube
I think andrewrk is tired of hearing about Jai, so he wants Zig to be the one true gamedev language :D

1581724206
dom96
gchristensen, betawaffle, andrewrk: yeah, I'd say Nim has a good C++ FFI story :)

