1578356157
fengb
andrewrk: is it intentional that you can't assign directly to "inactive union fields" that are structs?

1578356174
fengb
Oops, this link:

1578356202
fengb
Assigning a scalar works just fine so it feels a little odd

1578356292
fengb
Wow so many translate-c changes

1578356317
andrewrk
there's an issue open for this, it's a bug / design flaw that I plan to address

1578356333
andrewrk
it's one unfortunate side effect of the result location changes

1578356344
fengb
Oh okay

1578356354
fengb
Ah I found it

1578356385
andrewrk
yeah we've seen an explosion in contributions to translate-c once it became self-hosted

1578356393
andrewrk
I was hoping this would happen but it happened even more than I expected

1578356402
andrewrk
I could barely even get that new run-translated-c test harness done in time

1578358224
fengb
"cannot guarantee tail call due to mismatched ABI impacting function attributes"

1578358354
andrewrk
that may be something zig doing something wrong, or it may be a fundamentally broken thing

1578358366
andrewrk
llvm has its own rules for what you can do to get guaranteed tail calls

1578358380
andrewrk
I can help diagnose that, but not today

1578358396
fengb
I removed the "@call always_tail" annotations and it's doing better

1578359478
daurnimator
scientes: you've always been able to execute on godbolt

1578359485
daurnimator
oops was scrolled up

1578361111
andrewrk
how much time until your conference?

1578361940
daurnimator
andrewrk: its next week

1578363710
fengb
Is there a quick way to have Zig output what functions are referenced?

1578364412
daurnimator
andrewrk: reviewing the callconv change commit: looks like `_DllMainCRTStartup` got wrapped differently..... was that a manual thing you did or is fmt missing the trailing comma?

1578364529
daurnimator
andrewrk: I also saw you got rid of the extra LICENSE file... connectFree issue solved?

1578365605
scientes
<daurnimator> scientes: you've always been able to execute on godbolt

1578365608
scientes
daurnimator, this is not true

1578365742
daurnimator
scientes: since at least 2017 I think?

1578365763
scientes


1578366187
daurnimator
oh I must be confusing it with an old geordi-based thing

1578368437
andrewrk
fengb, the json file emitted by -femit-docs has that info

1578373497
fengb
Aha thanks

1578374697
hryx
daurnimator: if you're around, I fixed #2379 last night and then realized it was a half-fix, so now I'm fixing the fix

1578374800
hryx
I misunderstood the rule about the not-shortest-possible encoding of codepoints. So now I'm using this table as the source of truth:

1578376195
daurnimator
hryx: I don't understand

1578376338
hryx
Oh, sorry. I made a change to the std json parser which addressed some of the cases in #2379, but I missed a few cases. It had to do with disallowing "overlong" encoding of some characters, which I had slightly misunderstood

1578376360
hryx
Just giving you TMI since you were helping me with the subject last night :)

1578376375
hryx
(or yesterday, depending on your time zone)

1578385380
scientes
hryx, did you keep the state-machine model?

1578385427
scientes
hryx, cause here is the utf-8 validating state machine

1578385432
hryx
whoa perfect timing scientes . yepp, I did

1578385473
hryx
Oh, that would have been quite useful!

1578385574
scientes
and here is the high performance validator

1578385890
scientes
that SIMD one is just for kicks, doesn't make any sense until it has been ported to use generic SIMD

1578385982
hryx
all I gotta say is, there be some smartypantses out there making computers go fast

1578386034
scientes
there is a intellectual draw to this sort of thing too

1578386114
hryx
def! I'm just being silly

1578386347
scientes
the avx-512-VBMI instructions could probably make it even much faster still

1578386535
scientes
with vpermb

1578401085
phillyiscool
Hi, new to Zig. What is the best way to pass an array of structs to a function. In C you would need to add a length parameter. I thought maybe Zig's compile time could infer the length but it doesn't appear to

1578401096
phillyiscool
`error: inferred array size invalid here`

1578401111
phillyiscool
Do you still want to pass a length param then?

1578401128
mq32
phillyiscool: fixed size array or dynamic sized?

1578401133
mq32
fixed size: just pass an array

1578401151
mq32
dynamic size: use a slice (`[]T` instead of `[N]T`)

1578401202
phillyiscool
It's fixed size

1578401218
mq32
then just use a fixed size array

1578401223
phillyiscool
What is the syntax for accepting an array argument then?

1578401224
phillyiscool
pub fn createMachine(states: []State)

1578401227
phillyiscool
doesn't work for me

1578401232
mq32
fn myFun(arg: [3]State) void

1578401247
mq32
is a function that accepts arrays of 3 State

1578401248
phillyiscool
Oh, sorry, it's not fixed at the call site

1578401262
phillyiscool
That's why I mentioned the length parameter like you would do in C

1578401265
mq32
then you need a slice which is the code you posted above

1578401274
mq32
if you want to call that function with an array, use this:

1578401286
mq32
var arr : [5]T = ‚Ä¶; createMachine(&arr);

1578401300
phillyiscool
Ah ok, pass the pointer

1578401307
mq32
array pointers decay to slices :)

1578401403
phillyiscool
Hm, found something interesting..

1578401413
phillyiscool
var states = [1]State { first_state };

1578401419
phillyiscool
Works as you described

1578401428
phillyiscool
const states = [1]State { first_state };

1578401430
phillyiscool
Does not!

1578401441
phillyiscool
Unexpected, I obviously don't know what's going on here...

1578401490
phillyiscool
Oh I think I see what is happening

1578401503
phillyiscool
In the second states is an array

1578401508
phillyiscool
So you need to turn it into a slice

1578401596
phillyiscool
Is there a slice literal form? Or do you always have to convert an array to slice?

1578401907
mq32
what you actually want to do is pass a constant slice

1578401917
mq32
pub fn createMachine(states: []const State)

1578402002
phillyiscool
Ah ok, makes a little more sense

1578402006
phillyiscool
Thanks you for your help

1578402025
mq32
you're welcome!

1578403805
phillyiscool
So it seems like you can put slices on a struct in Zig. Is this automatically turned into a linked list?

1578403849
phillyiscool
I guess in my brain I keep trying to translate what I write in Zig to C. I was expecting to have to build my own linked list structures, but it appears I might never (or rarely) need to do so?

1578404069
mq32
you rarely need to

1578404079
mq32
but no, Zig does nothing automatically

1578404088
mq32
if you store a slice in a struct, you just store a pointer+len

1578404120
phillyiscool
Right

1578404136
phillyiscool
I usually use linked lists in C, but I guess I could have been doing it this way instead

1578404162
mq32
there are reasons for linked lists and reasons for arrays

1578404168
mq32
both applies in zig

1578404220
phillyiscool
Yeah of course

1578404335
phillyiscool
From reading the docs, it seems that Zig chooses whether to pass a struct by value or reference.

1578404344
phillyiscool
I guess this means that you don't need to use pointers nearly as often in Zig?

1578404367
mq32
yeah

1578404405
phillyiscool
That's nice

1578404515
phillyiscool
Last question, is it practical to write a library for use from C using Zig?

1578404559
phillyiscool
I played around with `build-lib` but the header file doesn't contain any of the functions. I can worry about learning this later, just wondering if C consumers is an intended use-case

1578404731
Snektron
phillyiscool, don't forget to use `export` for functions you want to use in C

1578404757
phillyiscool
"One of the primary use cases for Zig is exporting a library with the C ABI for other programming languages to call into."

1578404767
phillyiscool
ü§¶‚Äç‚ôÇÔ∏è I missed that

1578404771
phillyiscool
Thanks Snektron!

1578404811
Snektron
mq32, there aren't many reasons for a linked list in my experience

1578404822
Snektron
arrays are much faster

1578404841
mq32
very dynamic data structures are an example

1578404855
mq32
like "you don't delete data, but only move it from one list to another"

1578404873
Snektron
I think i used std::list in c++ only once, that was when implementing some algorithm which heavily used insertion and deletion

1578404874
Snektron
though it would probably still be faster with a vector

1578404915
mq32
it depends, it's still helpful to store your nodes in a continuous storage

1578404930
Snektron
better would probably be a B-tree

1578404939
phillyiscool
Are `export` and `pub` mutually exclusive it seems?

1578404986
Snektron
`pub export` seems to work

1578405018
phillyiscool
Ah yeah, i see that now

1578405578
phillyiscool
Is there a strcmp equivalent?

1578405595
phillyiscool
I should say, how do you compare strings?

1578405606
mq32
std.mem.eql(u8, strA, "hello")

1578405630
phillyiscool
interesting

1578406326
fengb
mq32: I thought a bit about returning generators. We still need @resultLocation, and the function somehow needs to only have one argument that‚Äôs the *YieldType

1578406377
fengb
That way the createGen can return a generic that‚Äôs both the async frame and the data

1578406527
fengb
So for initializing generator function state, we‚Äôll also need closures or something OO based (@fieldParentPtr, mixin, etc)

1578407006
Snektron
fengb:

1578407021
Snektron
why do you need @resultLocation for returning frames?

1578407103
fengb
It's more that the async function needs a pointer to dump its yielded value

1578407118
Snektron
ah

1578407219
fengb
And I need to return both: the frame to keep it alive, and the data so it can yield stuff

1578407257
fengb
I actually don't know if you can copy the async frame but I guess there should be nothing wrong with it

1578407276
mq32
as long as you don't resume the old pointer‚Ä¶ ?

1578407316
Snektron
Sounds like it would be better to have some language primitive for this

1578407380
mq32
you can probably work around this by using a thread_local, but that sounds unclean

1578407402
fengb
Snektron: I'm not disagreeing. I just want to see how far I can take userland generators. It seems to work decently once you get used to the pattern

1578407655
fengb
There's been another try at generators and it's quite complicated. I think it ultimately used @fieldParentPtr to solve all of these problems

1578408806
GrooveStomp
Is it possible to do a C-like forward declaration of a struct in Zig?

1578408896
mq32
GrooveStomp: nope, as it is not required in zig

1578408906
mq32
just declare where you like and use where you like

1578408917
GrooveStomp
I've essentially built a tangled mess of dependencies. :-)

1578408944
mq32
that should not hinder zig from beeing free of forward declarations :D

1578408955
fengb
Zig resolves types nonlinearly so it should just work

1578408980
fengb
Unless there‚Äôs a really bad cycle, but the compiler should warn you about that

1578409151
GrooveStomp
I'm still

1578409152
GrooveStomp
to think harder about this issue; but something like a forward declaration would let me move past it for the time being. :-)

1578409246
GrooveStomp
Alright, family is waking up. Time to start the day.

1578410296
fengb
Great, if I run every file test separately, everything works, but if I run it against std.zig, the compiler segfaults :(

1578410320
fengb
OH WAIT

1578410329
fengb
I'm dumb :P

1578410724
scientes
how do i execute my godbolt programs?

1578410759
scientes
nvm

1578412589
phillyiscool
Does the return type `type` always refer to an argument type?

1578412661
mq32
no

1578412668
mq32
it refers to any type

1578412674
mq32
fn IReturnI32() type { return i32; }

1578412688
phillyiscool
Ah ok

1578412701
phillyiscool
So the return struct pattern is not just for generics

1578412899
Snektron
not neccesarily

1578412911
Snektron
type is just a type

1578412979
mq32
i just had a stupid idea‚Ä¶

1578413003
Snektron
`const ty: type = type; const int32: ty = i32;`

1578413083
phillyiscool
What does this error mean?

1578413084
phillyiscool
error: unable to evaluate constant expression

1578413194
phillyiscool
Nevermind, I'm jumping too far ahead in my learning :)

1578413264
fengb
I've been seeing that whenever something that's runtime known is trying to be shoved into comptime

1578413475
fengb


1578413538
fengb
Oh it was fixed. I'm looking at older builds >_>

1578415452
fengb


1578415614
Snektron
how do these bugs happen in the first place

1578415625
Snektron
Seems like such a weird place to have a bug

1578415663
andrewrk
changing requirements

1578415699
andrewrk
stage1 is continually having its assumptions yanked out from underneath it as the language evolves

1578415703
Snektron
you'd expect the sizeof to require the type to be analyzed, which in turn would make sure that all fields have unique names

1578415718
Snektron
yeah i suppose thats not good for stability

1578415746
fengb
`[x] The compiler crashes if you look at it funny`

1578415766
fengb
Mangle the semantics completely, do a rain dance, and the compiler crashes!

1578415766
Snektron
hey, thats like my uni assignment on compilers last year

1578415833
andrewrk
only when the language stops changing will there stop being new bugs introduced

1578415892
andrewrk
which is a good reason to stabilize the language as much as possible before writing the self hosted compiler

1578415902
fengb
Oh I'm not complaining about the bug. I find it funny that Vexu stumbled upon that bug at all

1578416248
schme245
is there any difference in memory layout of having an array of u8, vs an array of structs with 3 u8 fields?

1578416325
schme245
(I'm coming from a Java background so this is somewhat new terrain for me)

1578416418
fengb
Struct memory layout is undefined so yes they're different

1578416477
fengb
Packed structs have well defined layout so `[3]u8` should be the same as `packed struct { u8, u8, u8 }`

1578416509
schme245
and a regular struct

1578416589
fengb
It's almost definitely not the same, due to additional hidden safety fields

1578416613
fengb
Those are removed only on release-safe or release-fast

1578416701
schme245
I see, thanks fengb

1578416785
fengb
Hmm... so there's no safety or padding at the moment. So you "might" be able to get away with it for now... but you really shouldn't rely on it :P

1578416833
fengb
If you want memory guarantees, use packed or extern structs (which are C ABI compatible)

1578416882
andrewrk
hryx, happy to see you contributing again :)

1578416975
hryx
andrewrk: happy to be back :]

1578417000
schme245
gotcha, I'm trying to understand what the performance implications of putting stuff in structs is, and I guess the short answer is that you don't need to worry too much, especially if you are using packed structs

1578417078
fengb
Structs fields are "free" since they're just offsets in memory. The only thing that might impact performance would be size and alignment

1578417184
fengb
e.g. arr[0] == str.first_element == assembly dereference (ptr + 0)

1578417223
schme245
ahh, that clears it up!

1578417287
Snektron
Alright so i had some free time and some more coming up, so i started working on some Vulkan spec to Zig generator

1578417298
Snektron
I made a nice xml parser that is adequate for parsing the spec

1578417305
Snektron
However i already ran into a problem

1578417310
fengb
Did you use regex? üôÉ

1578417316
Snektron
Of course not

1578417333
Snektron
i did use recursion tho, thats like the Zig equivalent of using regex

1578417335
Snektron
Anyway,

1578417344
andrewrk
lol

1578417350
scientes
Snektron, except that regex does not have recursion

1578417352
scientes
its a state machine

1578417355
scientes
that is the whole point

1578417362
Snektron
Vulkan imports some foreign types, mainly with extensions providing platform support

1578417392
Snektron
But these types are not opaque, instead Vulkan depends on platform headers to provide some times

1578417400
Snektron
types*

1578417416
Snektron
I'm wondering what the best way would be to translate those to Zig?

1578417444
andrewrk
Snektron, so the canonical definition of the types are not in the xml, but in .h files? where do the .h files come from?

1578417476
Snektron
andrewrk, they are supposed to be proved by the implementor i think

1578417487
Snektron
Vulkan provides guards to enable platform-related extensions

1578417496
Snektron
Those also include the relevant headers

1578417503
Snektron
But they are not provided by Vulkan

1578417508
andrewrk
the implementor of what?

1578417508
Snektron
imo a design mistake

1578417527
andrewrk
is there an ABI to match or no?

1578417530
Snektron
The developer wanting to use Vulkan

1578417565
Snektron
andrewrk, yes, the types are passed to Vulkan functions which are imported from some library

1578417573
Snektron
(usually the graphics driver)

1578417587
andrewrk
oh this is the part that interacts with x or wayland or windows API

1578417593
Snektron
yeah

1578417625
Snektron
I think they should have enforced the types to be pointers so developers have a better time generating bindings

1578417630
Snektron
but they didn't

1578417667
Snektron
I think they are mostly just typedefs to integers or pointers, in fact in the Vulkan spec repository there are some headers providing substitute typedefs

1578417681
Snektron
but i'm not quite sure if those are correct

1578417686
andrewrk
the first thing I would try is to hard-code the answer for all the supported targets. it's annoying but it would make things "just work" for users of the package

1578417726
Snektron
I can import some of the platform related types from the standard library yeah, the windows ones for example

1578417735
Snektron
for the others i might just need to use the subtitute

1578417874
Snektron
Another possibility was importing the types from @import("root") and specify users to define platform dependent types there if supporting those is desired

1578417886
Snektron
But im not really a fan of that

1578417963
Snektron
I guess ripping types from the headers isn't too different from what the standard library does at the moment, but i feel like OS headers might be a little more stable than library headers

1578418012
andrewrk
yeah this is a rather annoying problem

1578418030
Snektron
Especially stuff like google games platform

1578418050
andrewrk
because the person depending on your vulkan package probably also depends on (directly or indirectly) the windowing library API separately, and you need these to be the same versions

1578418062
Snektron
To make matters worse, some types are actually hidden behind an NDA

1578418070
andrewrk
ugh

1578418102
Snektron
(the google ones in fact)

1578418145
Snektron


1578418185
andrewrk
Snektron, I wonder if it would make sense to solve this in a higher level package that also provides windowing

1578418198
andrewrk
e.g. the abstraction level of GLFW or

1578418248
Snektron
I'd rather keep the Vulkan stuff seperated from anything like that and instead add something to glue them together

1578418250
andrewrk
this way the person depending on your package is using it for the windowing library and does not separately depend on a windowing library

1578418285
andrewrk
that makes sense too

1578418308
Snektron
that would also allow the development of OpenGL bindings

1578418414
dimenus
Snektron: it possible to only have one command buffer for multiple swap chain images of the command itself is completely static?

1578418434
dimenus
or is it always advised to not share between swap chain images?

1578419493
Snektron
dimensus, thats definitely possible

1578419538
Snektron
although, i do think you have to bind that image if i remember correctly

1578419628
Snektron
yeah i think that limits you

1578419719
Snektron
But i think quite often you're rebuilding that commandbuffer almost every frame anyway

1578419730
Snektron
unless its just some intermediary stage

1578419745
Snektron
but then you're probably rendering to a single image and not a swap chain

1578419940
Snektron
oh wait, by reviewing some old code i see that the image target is specified when the command buffer is submitted to the graphics queue

1578419971
Snektron
in which case its perfectly find to reuse that command buffer

1578419974
Snektron
fine*

1578420001
Snektron
On the other hand, i did use some hack to avoid creating a framebuffer

1578422510
fengb
Github should have a separate "fixed" status for issues

1578424277
fengb
andrewrk: how will threads work with async? Will there be new primitives for stuff like Thread.spawnAsync(func)?

1578424412
fengb
Oh wait, I see loop can be created with threadpools

1578424584
fengb
Neat, it automatically starts with core number of threads

1578425635
frmdstryr
Is there a gdb that can evaluate zig expressions?

1578425817
protty
hey, question about string formatting through std.fmt: how would you print a []const u8 with padded spaces right aligned until it reaches 50 chars? have tried doing `{: >50}` but that doesnt look to be it

1578426149
andrewrk
fengb, have a look as well at startCpuBoundOperation

1578429803
dimenus
andrewrk: below 20 PRs!

1578429834
andrewrk
üòÖ

1578429890
dimenus
vulkan is so silly when you're only submitting a couple draw cmds

1578429897
dimenus
5k FPS on an integrated GPU

1578429916
dimenus
(reimplementing learnopengl.com's breakout in Zig/Vulkan)

1578431500
frmdstryr
Is there any way to make a variable volatile?

1578431529
frmdstryr
I'm trying to increment a counter from a SysTick_IRQ and it just stays at 0

1578431555
frmdstryr
the IRQ is firing because it toggles the LED and I can break and step through it

1578431610
frmdstryr
I tried  var _sys_tick: u32 = 0;

1578431611
Snektron


1578431624
frmdstryr
Yes that doesn't work

1578431627
frmdstryr
const sys_tick = @ptrCast(*volatile u32, &_sys_tick);

1578431644
frmdstryr
then sys_tick.* += 1;

1578431651
frmdstryr
does not do anything from the IRQ

1578431662
frmdstryr
works fine if called from "normal code"

1578431829
andrewrk
frmdstryr, making a variable volatile doesn't make sense semantically, since volatile means "writes to this memory have side effects"

1578431878
andrewrk
it sounds like you are suspecting zig's optimization is deleting the load/store, yes?

1578431987
frmdstryr
I think it's not actually reading the value back dispite being a volatile pointer

1578432033
frmdstryr
so yes

1578432404
frmdstryr


1578432592
andrewrk
what am I looking at here?

1578432734
via
qK

1578432736
andrewrk
I added --release-fast and it looks to me that _sys_tick is updated 1000 times with the correct values

1578432791
andrewrk
if I remove volatile, then the entire thing turns into label: nop; jmp label;

1578432957
andrewrk
whew. alright. oldest pull request that is awaiting review is less than 1 day old

1578432963
frmdstryr
Hmm.. i don't get why it doesn't do anything on the acutal board though, will keep digging

1578433494
SyrupThinker
Is there any particular reason that the code model option hasn't been exposed yet except for "hasn't been done yet"? If not I'd like to add that

1578433496
andrewrk
I would love a feature of github where every user had exactly 1 vote and they could put it on a particular issue

1578433551
andrewrk
the feature would default to making the newest issue you open be your voted issue, and if it gets closed, your vote switches to the freshest issue you opened or previously had your vote on

1578433569
andrewrk
but you could switch your vote at any time explicitly to indicate what is blocking you

1578433590
andrewrk
SyrupThinker, code model, you mean PIC ?

1578433610
andrewrk
I took great care to make the default correct, but we also have -fPIC and -fno-PIC

1578433689
SyrupThinker
While related its a different option

1578433980
SyrupThinker
I have symbols that are placed above 0x7effffff, but the default code model for x86_64 doesn't allow that

1578434300
andrewrk
you're talking about a linker script?

1578434366
SyrupThinker
Well, yes, a linker script, is involved, but the codegen needs to account for it due to the changed addressing

1578434387
SyrupThinker
Oops scratch that third comma

1578434482
SyrupThinker
Just for reference [this](

1578434842
andrewrk
this is something I will have to learn more about before having a good answer

1578434855
fengb
andrewrk: would it be helpful to have an allocator just for testing? FBA that reuses the buffer at the beginning of every test

1578434905
andrewrk
fengb, I believe that would be the same question as, should the test runner reset std.debug.global_allocator between test runs

1578434930
fengb
Sure, but migrate it to somewhere that it's more obviously just for testing

1578434939
andrewrk
std.testing.allocator

1578434949
andrewrk
that seems pretty nice

1578434978
andrewrk
it an even give a @compileError if !builtin.is_test. "nice try, slacker!!"

1578435046
andrewrk
the only reason I can think of not to do this, is if we want to support the use case of providing your own test runner

1578435072
fengb
lol

1578435085
andrewrk
then it gives another mandatory chore a custom test runner would have to do, and now the use case probably wants to also override the allocator used for testing

1578435101
andrewrk
which is maybe a good thing

1578435133
andrewrk
anyway yeah I'd support a std.testing.allocator. especially if it went ahead and deleted std.debug.global_allocator

1578435340
fengb
üëç

1578435360
fengb
I figured this would be better than people reaching for the page_allocator as a stopgap

1578435382
andrewrk
good point

1578435420
andrewrk
here's another question though- should it detect leaks? e.g. when the debug general purpose allocator is done, should that be the testing allocator? and the test runner would call detectLeaks() after every test

1578435514
SyrupThinker
andrewrk: Thanks, I'll just work on it so that I can use it and make a pull request for when you have one

1578435625
fengb
I tend to use a FBA and never free because it's slightly easier inside the testing context

1578435852
andrewrk
fengb, how about std.testing.arena and std.testing.allocator

1578435866
andrewrk
the latter will fail the test if leaks are detected

1578435912
fengb
Sounds good

1578435931
fengb
I can be pretty lazy so I figure others will be too :P

1578435946
andrewrk
yes, and better to have tests with an arena than no tests

1578435964
frmdstryr
So instead of updating the var _sys_tick (at addess 0x24000010) it's updating address 0x24000014

1578436032
frmdstryr
I can't get gdb to print sys_tick it just says optimized out

1578436184
frmdstryr
it is loading and storing, just not the _sys_tick var

1578437361
andrewrk
maybe you can look at the disassembly

1578437378
andrewrk
which architecture is this?

1578437382
frmdstryr
If i hardcode the address it works

1578437407
frmdstryr
armv7-em

1578437416
frmdstryr
the stm32h743

1578437474
frmdstryr
It seems like the &_sys_tick is taking up stack space or something?

1578437548
andrewrk
frmdstryr, I hope this is not a bug that incorrectly caused there to be 2 _sys_tick globals

1578437624
frmdstryr
when i printed 0x2400010 and  0x24000014 they gdb was showing _sys_tick for both

1578437639
andrewrk
uh oh

1578437684
andrewrk
frmdstryr, try doing the @ptrCast with volatile inline where you need it as a sanity check

1578437967
daurnimator
Snektron: I use linked lists all the time: its the only real way to allow appending to lists without allocations (assuming you already have the object)

1578437989
frmdstryr
doesn't seem to make a difference

1578438003
frmdstryr
(gdb) x 0x24000014

1578438005
frmdstryr
0x24000014 <_sys_tick>: 0xdc

1578438015
frmdstryr
(gdb) x 0x24000010

1578438017
frmdstryr
0x24000010 <_sys_tick>: 0x00

1578438190
frmdstryr
I pushed it here

1578438194
andrewrk
does the code sometimes access 0x24000010 and sometimes access 0x24000014?

1578438241
frmdstryr
getSysTick() is always returning 0 in time.zig

1578438268
frmdstryr
meaning it's using _sys_tick

1578438280
andrewrk
I believe volatile is a red herring by the way

1578438287
andrewrk
there's no reason for this to be volatile

1578438296
andrewrk
that's just complicating your debugging process

1578438365
frmdstryr
How does the compiler know to not optimize the sleep delay loop then?

1578438388
andrewrk
does it work in debug mode?

1578438394
frmdstryr
it is in debug mode

1578438403
andrewrk
well first of all there are no optimizations on then

1578438413
andrewrk
but also it can and should optimize the sleep delay loop

1578438455
frmdstryr
the code has no idea that the ISR is firing

1578438463
andrewrk
the optimizer will not change the meaning of data; if you have a variable x=0 adn then increment it 100 times, and read it, you will get 100. maybe the memory access gets dropped, but you will get 100

1578438474
andrewrk
oh, you have a data race then

1578438481
andrewrk
you need atomics

1578438507
andrewrk
@atomicRmw to update the number, @atomicLoad to read it

1578438553
andrewrk
volatile is 100% a red herring here. volatile is for mmio

1578438620
frmdstryr
It's a single core, idk how atomics matter

1578438632
frmdstryr
but i'll try it

1578438656
andrewrk
it matters because otherwise you can load part of a number, and then the interrupt modifies the data, and then load the rest of the number

1578438670
andrewrk
atomics are required when there is more than 1 thread (an interrupt counts)

1578438736
andrewrk
the data race is for sure a problem. but I suspect there may be still another issue

1578439249
frmdstryr
_ = @atomicRmw(u32, &sys_tick, .Add,  1, .Acquire);

1578439268
frmdstryr
I changed sys_tick to : var sys_tick: u32 = 0;

1578439406
andrewrk
I think it only needs to be .Monotonic, but that should work fine

1578439422
andrewrk
same problem?

1578439439
frmdstryr
still returning 0

1578439487
frmdstryr
getSysTick is "return @atomicLoad(u32, &sys_tick, .Monotonic);"

1578439517
andrewrk
looks good

1578439543
andrewrk
you said you were able to set a breakpoint in the interrupt handler?

1578439545
frmdstryr
yes it's still updating 0x2400014 instead

1578439558
frmdstryr
yes

1578439571
andrewrk
so the atomic load sees 0x2400010 and the atomicrmw sees 0x2400014

1578439630
andrewrk
and these are both functions in the same .o file? they both see this global variable at a different address?

1578439703
frmdstryr
maybe not

1578439719
frmdstryr


1578439724
frmdstryr
separate

1578439789
andrewrk
why not have startu.zig @import("main.zig") and delete the addObject from your build script?

1578439823
andrewrk
oh, this explains everything

1578439823
frmdstryr
yea, trying that now, was just using what was there from the other project

1578439836
andrewrk
you ported this from C right?

1578439859
andrewrk
in C the global variable is probably declared in a .h file, and so it is exported from one of the object files and referenced as an external symbol in another

1578439862
frmdstryr
yes

1578439872
andrewrk
you can do that in zig, you would need to export the global explicitly though

1578439897
andrewrk
but I would recommend instead to have startup.zig @import("main.zig") because avoiding needless exported symbols makes for better codegen

1578439963
andrewrk
if you want multiple object files to share state, you gotta explicitly export the state you want to share

1578439968
frmdstryr
it's working now

1578439971
andrewrk
and then use extern in the one importing it

1578439989
andrewrk
that's true in C too, it's just easy to do on accident

1578439999
andrewrk
nice

1578440054
frmdstryr
sweet

1578440086
frmdstryr
thanks!

1578440148
andrewrk
np glad we got it sorted out

1578440166
andrewrk
I should stop assuming it's a compiler bug before thinking of other things :)

1578440362
tdeo
are there any examples of std.event.Loop other than the chat server livestream? i'm trying to play around with it to write a pure zig wayland server

1578440388
tdeo
not sure why in the livestream beginOneEvent() is called once and that's it

1578440476
andrewrk
tdeo, not really, that's an area of the std lib I'm hoping to improve soon - fengb and I are doing some premilimary work on it

1578440512
andrewrk
beginOneEvent has to do with reference counting how many async things are in progress, so the loop doesn't shut down while, e.g. waiting for an http request to respond

1578440532
andrewrk
the event loop is supposed to do it entirely for you, so putting it in the chat server was a workaround for a bug

1578440613
tdeo
ah

1578440633
fengb
andrewrk: I encountered 2 major blocking bugs. Still have to reduce the second one

1578440677
fengb
I also don‚Äôt understood how moving to iterators solves outstreams >_>

1578440884
andrewrk
ah

1578440915
andrewrk
fengb, the main issue is that async function pointer calls cause problems with zig figuring out how big async function frames are

1578440942
andrewrk
there are many places in std where the callback function supplied to std.fmt.format ultimately calls std.os.write

1578440956
andrewrk
so that bubbled all the way up to make std.fmt.format async, which is just unnecessary and complicated

1578440985
andrewrk
making it into an iterator (more importantly, getting rid of the callback) makes it the caller's problem whether or not they are async. std.fmt.format can stop caring

1578441050
andrewrk
otherwise we have to resort to tricks like this, *inside std.fmt.format*:

1578441193
fengb
Hmm well I hope making format always async doesn‚Äôt hurt semantics >_>

1578441254
andrewrk
well if we do the iterator thing then it will be always

1578441255
fengb
Does that mean we would remove the print function too?

1578441277
andrewrk
oh you mean with the generator thing

1578441283
fengb
Yeah

1578441297
andrewrk
you're not making any runtime-known function pointer calls. that's the important thing

1578441307
andrewrk
so zig can figure out the stack sizes of stuff

1578441307
fengb
Ah okay

1578441321
fengb
Yeah doing the comptime recursion seems so magical

1578441354
andrewrk
another thing that could solve this for now would be making the callback function comptime. there is 1 callsite that wants it to be runtime, but maybe that could be solved separately

1578441367
andrewrk
that might actually be something I do because I'm tired of not working on async I/O in std

