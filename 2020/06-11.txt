1591837609
leeward
I made a toy:

1591837647
leeward
SDL is indeed super easy to use with Zig.

1591841072
oats
huh, new standard for enum literals

1591841120
oats
never occured to me that the style for a .VariantLiteral was in conflict with the style for TypeNames :P

1591841131
oats
good stuff, that makes sense

1591843086
pmwhite
oats: is this a language change I don't know about?

1591843172
oats
just a style guide thing

1591843175
oats


1591843305
pmwhite
Oh, interesting, thanks.

1591843367
pmwhite
I think I like that better anyway, since enum/union items are more or less the dual of strict fields.

1591843391
oats
pmwhite: as in product/sum types?

1591843417
pmwhite
Righto.

1591845728
andrewrk
do we have self-hosted parsing of integer literals anywhere?

1591845738
andrewrk
e.g. handling 0x prefixes

1591845844
andrewrk
looks like it would be parsing the prefix followed by std.math.big.Int.Mutable.setString

1591846103
daurnimator
at least in json

1591846420
daurnimator
or not actually!

1591857332
scientes
andrewrk, yeah, that is what I used

1591857338
daurnimator
scientes: just use `SinglyLinkedList(void).Node`?

1591857377
daurnimator
maybe add an options argument for null terminated vs circular?

1591857401
scientes
no you always use circular

1591857412
scientes
there is no reason not to

1591857488
scientes
it is doing more than it needs to

1591857662
daurnimator
then why not change the existing to be circular

1591857739
scientes
all of it's complexity is completely unneeded, but if you are going to fight me about it just reject the whole thing

1591857762
scientes
you don't need generic for this

1591857824
daurnimator
you don't need it; but some people like it as an extra feature....

1591860540
mikdusan
hmm isn't this basically an instrusive singly-linked list?

1591861407
daurnimator
mikdusan: yes (which we already have): main difference is circular vs null terminated.

1591861490
mikdusan
another day yet again affirms I suck at algo :(

1591884640
FireFox317
andrewrk, will you be streaming any time soon? :P

1591886190
companion_cube
will there be a "lightweight" distribution of zig without anything from llvm? I'm thinking of stuff like compiling on a raspberry pi, or other very slow and small targets

1591886239
mq32
companion_cube: i think that's planned with stage 2 to make LLVM an optional high-perf backend

1591886247
companion_cube
sounds perfect

1591886250
scientes
companion_cube, you want llvm for that

1591886264
companion_cube
to target ARM, you mean?

1591886282
mq32
target "slow and small" targets

1591886291
mq32
because well-optimized code matters even more on them

1591886294
scientes
yeah you still want an optimizing compiler

1591886307
companion_cube
well depends on the program

1591886313
companion_cube
and if you cross compile, or compile locally

1591886326
scientes
no, you want an optimizing compiler with SSA optimizations

1591886342
scientes
these are non-trivial projects

1591886363
companion_cube
hm ok, I guess I need to remember that  cross compilation is trivial :D

1591886384
scientes
and also the rasberry pi is not that limited

1591886419
companion_cube
sure, it's still a bit small for comfortably use OCaml

1591886426
scientes
when I developed systemd I was on a ARM laptop

1591886428
companion_cube
(which is my comfort zone)

1591886437
companion_cube
when you what?

1591886449
scientes
*contributed to

1591886663
companion_cube
but surely an ARM laptop is less limited than an (old) raspi

1591886685
scientes
yeah but its not a game boy

1591886742
companion_cube
ah, sure

1591886766
companion_cube
it's more about what's convenient than what's possible, since almost everything is possible (except for compiling firefox, lolol)

1591886785
scientes
especially after the rust integration

1591886945
companion_cube
is it really worse than C++? :)

1591886953
companion_cube
what kills you is linking in both cases

1591886981
scientes
companion_cube, but that cannot be fixed

1591886986
scientes
that is just how linking works

1591887070
companion_cube
yes, but templates (in all of c++, rust, and zig, I think?) tend to produce a lot of symbols :)

1591887109
scientes
zig does not have that problem, as exported functions are all C abi functions

1591887141
companion_cube
the day there are big Zig programs, this will also become a problemâ€¦

1591887153
companion_cube
you could say the same for rust, if you use it to produce a .so it's all C ABI

1591887167
scientes
no, zig does not have the symbol table problem, period

1591887171
scientes
all exported symbols are explicit

1591887180
scientes
just like C does not have this problem

1591887183
fengb
Rust throws millions of IR at LLVM

1591887193
fengb
And hopes that LLVM figures it out

1591887206
companion_cube
just like C++ ðŸ¤·

1591887225
scientes
fengb, rust and zig both excercised parts of LLVM that did not work :)

1591887282
companion_cube
scientes: still not following. What rust exports is also all explicit, C-ABI stuff.

1591887291
companion_cube
when used in a polyglot project, that is

1591887313
scientes
well I haven't looked at rust's produced IR

1591887353
mq32
<scientes> no, you want an optimizing compiler with SSA optimizations

1591887365
mq32
note that zig uses SSAT which probably allows good optimizations as well

1591887387
fengb


1591887406
oats
fengb: heyo, I just saw your talk on emulators for the previous Showtime. Really cool stuff, the whole packed union thing was pretty enlightening :)

1591887427
fengb
Thanks!

1591887434
scientes
mq32, link? can't find anything about SSAT

1591887460
scientes
fengb, my god

1591887516
mq32
me neither, i think you have to ask andrewrk

1591887543
scientes
cause the compiler seems to use SSA, but its only 2 phase, so it isn't round-trip, et cetera

1591887545
mq32
rust creates horrible IR

1591887556
companion_cube
have you tried with -O ?

1591887559
companion_cube
it's a lot more reasonable :p

1591887567
scientes
companion_cube, but without -O the codegen is horrible

1591887588
companion_cube
no optimization is done, I think, so yes

1591887592
scientes
companion_cube, it even converts to a multplication without a loop, which gcc can't do

1591887613
scientes
companion_cube, (n-1)(n-2)/2 + n

1591887624
scientes
the closed form of the loop

1591887628
mq32
clang C output is still only 50% size with -O

1591887632
companion_cube
yes yes, but rustc also does its own optimizations

1591887643
scientes
companion_cube, it does not do the closed form thing however

1591887645
companion_cube
mq32: I think rust emits a lot more non-aliasing statements?

1591887648
scientes
it is not that type of compiler

1591887649
BaroqueLarouche
how zig stage1 fare ?

1591887652
companion_cube
I don't know much about llvm IR

1591887670
companion_cube
but it's clearly tailored to C++

1591887685
scientes
companion_cube, MLIR looks like the future

1591887715
scientes
which is a llvm project

1591887744
scientes
swift and flang and tensorflow are using it

1591887790
fengb
Wait, tensorflow is a compiler?

1591887955
fengb
Apparently MLIR was invented in tensorflow too

1591888100
companion_cube
is MLIR lessâ€¦ C++-y?

1591888104
companion_cube
(in the semantics)

1591888142
scientes
companion_cube, no, and that is my biggest problem in trying to grep it

1591888158
scientes
it looks nice, and has a few gains over llvm

1591888160
scientes
but still c++

1591888173
scientes
and without a C ABI

1591888240
scientes
and I don't understand what a tensor is

1591888246
scientes
I need a better description of the

1591888630
leeward
scientes: tensors are like vectors in more dimensions.

1591888656
scientes
yeah but they are a physics thing, so why are the computer people so into them suddenly

1591888671
leeward
I don't have any idea. As far as I can tell, someone thought it made a good name.

1591888703
leeward
like entropy in

1591888754
greenfork
or like "vectors" (dynamically sized arrays)

1591888807
leeward
Yeah, that's a good point.

1591901392
DrDeano
With my problem that I get a OOM when using ChildProcess, it works when it is in the init function for my RuntimeStep, but when moved to the make function, it throws the OOM, but can't work out why

1591901631
DrDeano
(Context: I need to crease a build Step to run a process that doesn't return and need access to stdout)

1591902116
rooke
Darn zig does not like `pub const StateFunction = fn (State) StateFunction;` which... I guess makes sense

1591902206
rooke
functions are only good compile time values right?

1591902345
mq32
that should work though

1591902355
mq32
it's a function pointer

1591902378
rooke
its complaining about a dependency loop

1591902385
mq32
oh

1591902396
mq32
yeah, true

1591902405
rooke
I'm assuming it isn't ok with a function which returns its self

1591902426
rooke
Which... makes sense, its just a pretty way to do finite state machines

1591902449
mq32
yeah, true

1591903011
andrewrk
DrDeano, sometimes you can get OOM when you have memory corruption and so the integer that tells how many items to allocate is really big

1591903024
andrewrk
DrDeano, have you checked your program running in valgrind?

1591903055
andrewrk
FireFox317, I know I'm overdue for a stream :) let me see if my sister's internet service can handle it

1591903089
andrewrk
I have some family stuff happening this weekend but potentially could show off some self-hosted progress early next week

1591903321
DrDeano
@and

1591903324
DrDeano
oops

1591903345
DrDeano
andrewrk i shall try that

1591903355
gonz_
andrewrk: Did you see the response on the LLVM mailing list?

1591903442
andrewrk
DrDeano, to make valgrind even more effective, use std.heap.c_allocator and build with -lc

1591903460
gonz_
Paraphrasing: Having different definitions of `_m_prefetchw` in Windows headers & LLVM headers shouldn't matter because only one should be used regardless.

1591903478
gonz_
So, we end up using different ones when compiling with Zig. Any way not to?

1591903486
gonz_
s/different ones/both

1591903540
andrewrk
gonz_, just looked. here you can see we put the c headers dir before the libc headers dir:

1591903649
leeward
Is there a mechanism for specifying different library paths for different targets? I have a thing I want to build for a few targets, but it depends on libraries written in C.

1591903664
gonz_
andrewrk:

1591903695
andrewrk
leeward, if using build.zig, it's pretty straightforward to make different choices based on the target

1591903740
FireFox317
andrewrk, ah thanks! Don't worry, its okay if you dont stream, but I just find them really interesting :D

1591903808
andrewrk
gonz_, the line here might be interesting to look at: C:\Users\ricka\code\zig\sqlite-sandbox\dependencies\sqlite-amalgamation-3310100\sqlite3.c:26683

1591903834
leeward
andrewrk: And I'd use different addLibPath calls for the different targets?

1591903846
andrewrk
gonz_, based on this info we should be able to understand why this is happening, and then it should be clear where to go from there

1591903859
andrewrk
leeward, right

1591903875
gonz_
andrewrk: That line blanket includes `windows.h`

1591903878
leeward
ok, thanks

1591903928
andrewrk
gonz_, oh right of course, that's clear from the next line.

1591904063
gonz_
Basically, when we finally reach `winnt.h:3324` we stumble on a redeclaration of `_m_prefetchw`

1591904085
andrewrk
gonz_, ok well one thing to note is that clang is not finding mm3dnow.h from msvc. the conflict seems to be in winnt.h. I think it would be helpful to post this

1591904167
andrewrk
my best guess is that clang headers are missing some #define that will make winnt.h not make a conflicting definition

1591904214
andrewrk
gonz_, btw have you tried -target x86_64-windows-gnu instead of x86_64-windows-msvc?

1591904320
gonz_
As an argument to `zig build`?

1591904402
andrewrk
there's a way to set it to use mingw-w64 instead of msvc for libc by default in your build.zig. but just as a test, yeah you could pass -Dtarget=native-native-gnu

1591904424
andrewrk
it's possible that zig may do this by default in the future

1591904471
andrewrk
the nice thing about using mingw-w64 for libc on windows is that zig ships with it so it works the same everywhere, microsoft doesn't mess with it, and you can cross compile for windows with it

1591904500
andrewrk
if you get linker errors it's just some libraries that can easily be activated, let me know

1591904502
gonz_
Is this a new option? It doesn't accept `-Dtarget=`.

1591904532
andrewrk
I haven't seen your build.zig, are you using standardTargetOptions ?

1591904565
gonz_
No, I had no idea that was a thing. I only have `standardReleaseOptions`

1591904606
gonz_
I made it back in January from the basic init template

1591904971
gonz_
Hmm, how are you supposed to use the `CrossTarget` that's returned from `Builder.standardTargetOptions`?

1591905016
alexnask
`exe.setTarget(target);`

1591905377
gonz_
Here's the paste with the target set to `native-native-gnu`

1591905425
JimRM
Hey so I have a question about linker scripts + assembly files!

1591905454
JimRM
From a C project I have the following:

1591905454
JimRM
.boot.text 0x0 : {

1591905455
JimRM
KEEP (*(.traps))

1591905455
JimRM


1591905455
JimRM
. = 0x80000;  /* Space for command line.  */

1591905455
JimRM
__start = .;

1591905456
JimRM
__text_start = .;

1591905458
JimRM


1591905460
JimRM
KEEP(build/head.o (.text))

1591905462
JimRM
KEEP(build/jtag.o (.text))

1591905464
JimRM
}

1591905492
JimRM
the problem I am having with zig, is the head.o file is not at a well known path for me to use in the linker script

1591905533
JimRM
It's probably my lack of knowledge regarding linker scripts - but I thought I'd ask here in case anyone had a good solution?

1591905548
JimRM
BTW head.o is compiled from head.S

1591905923
FireFox317
JimRM, I think when just using the zig compiler (`zig build-exe` or equiv) the path will be relevant to cwd(), when using build.zig this might be from the zig-cache directory or something.

1591905992
JimRM
Yeah, I probably shouldn't be arranging my binary using filenames but instead sections.

1591906007
JimRM
The linker script was something I managed to get working a year ago.. and haven't dared touch since :)

1591906216
FireFox317
yeah, i actually dont know if linker scripts support file names, sections it definitely does :P

1591907130
gonz_
andrewrk: Setting the target to `native-native-gnu` worked, actually.

1591908036
leeward
Dammit stackoverflow.com, you're screwing up my search results when I'm trying to find information about actual stack overflows.

1591908522
gonz_
andrewrk: Does `native-native-gnu` have some obvious downside otherwise? I would rather just rely on code shipped with Zig

1591908662
gonz_
It would also open up for having people you potentially teach in the future not having to install a bunch of stuff beyond the zig compiler, right?

1591909285
andrewrk
gonz_, nope there isn't really a downside. and yes it means you don't need msvc installed

1591909317
andrewrk
that's why I'm considering removing msvc integration support entirely. however I'm sure some folks will bring up good things to consider when I make that proposal

1591909355
gonz_
Do you think debugging will be affected? I finally feel like zig is very debuggable now on Windows

1591909370
gonz_
With standard debuggers, even just normal VSCode (WinDbg?)

1591909371
andrewrk
I don't see why that would be affected by this

1591909418
gonz_
One of the good things that've come out of the bad is that if someone is actually doing C on Windows they probably already dislike MSVC

1591909443
gonz_
AFAIK

1591909454
gonz_
With the poor C99 support and all of that

1591909597
leeward
I am very happy to be able to generate Windows binaries without having to install Windows myself. CI can tell me if it breaks.

1591909817
gonz_
Right, I think the ability to target Windows when not on Windows is not in question

1591909830
gonz_
It's whether or not to support MSVC as a compiler when on Windows, I guess?

1591909842
leeward
Right, I know, I'm just fawning.

1591909862
gonz_
My perception is that C programmers aren't fond of MSVC because historically it kind of didn't care about C

1591909870
leeward
I have nothing to add to the MSVC debate. I'm pretty sure I've never actually used it.

1591909937
andrewrk
gonz_, it's wether to support detecting and linking against MSVC's libc when using zig to compile C code

1591910362
gonz_
Allright

1591910379
gonz_
I'll probably be switching over to just specifying this target everywhere now

1591910393
gonz_
If it means I get to just rely on stuff that's shipped with Zig

1591910404
gonz_
and there are no obvious downsides outside of that

1591910438
gonz_
In terms of defaults I think this makes a lot more sense to do, to be honest

1591910460
leeward
Is native-native-musl not as good as native-native-gnu?

1591910517
andrewrk
leeward, musl is a linux libc. in the discussion with gonz_ the context was windows

1591910548
andrewrk
if you are building natively and linking libc, best to let zig auto detect your native C ABI and use that

1591910562
andrewrk
however if you are cross compiling for linux, musl is a nice option if you want to create static binaries

1591910565
daurnimator
a couple of things: 1. it should remain possible to write a library in zig to use from an msvc codebase (think e.g. game engine)

1591910565
leeward
Oh, I didn't realize musl was Linux-only.

1591910593
andrewrk
daurnimator, mingw-w64 is in fact ABI compatible with msvc

1591910608
daurnimator
2. gnu vs musl makes a different choice for you currently: static vs dynamic linking. I think there's an issue open about dynamically linking to musl?

1591910641
gonz_
andrewrk: What would be the long-term solution that solves this header type mismatch, by the way?

1591910667
andrewrk
dynamic linked musl is a use case that I think has not been decided whether is in scope of zig or not

1591910675
daurnimator
andrewrk: so then 'gnu' abi and 'msvc' abi are the same? I guess the abi is more than the abi....

1591910687
andrewrk
gonz_, I think it's a bug in clang

1591910706
andrewrk
I think they are missing a #define somewhere to make windows not duplicate the definition

1591910738
andrewrk
daurnimator, yes that's right, the ABI part of the triple is more aptly named the libc part of the triple

1591910767
andrewrk
note that we also have versions as part of it now as well

1591910793
andrewrk
e.g. x86_64-linux-gnu.2.30

1591910929
daurnimator
andrewrk: which is weird for pure zig code that doesn't use a libc....

1591911045
andrewrk
The C ABI is relevant to pure zig for exported things

1591911064
daurnimator
howso?

1591911072
andrewrk
if you export a function, it follows the C ABI

1591911097
andrewrk
there is not a standard C ABI, it is implementation defined. so it means encoding information about the particular libc being targeted

1591911135
andrewrk
it's possible glibc changed its ABI over the course of its versions, although I do not have any examples on hand

1591911151
andrewrk
anyway it's harmless to over-specify the target even if that information is unused

1591911264
daurnimator
its sort of weird specifying e.g. gnu-2.30 when I'm writing a zig-only piece of freestanding code for a microcontroller....

1591912406
andrewrk
use `none`

1591912430
andrewrk
riscv64-freestanding-none

1591914078
gonz_
andrewrk: How do you pass arguments to mingw via `zig build`? It turns out you need to specify the subsystem via `-Wl,-subsystem,windows`. Or is it that Zig is already supposed to but likely it's been neglected because the code path isn't very used?

1591914095
gonz_
alternatively via `build.zig` (probably preferrably)

1591914205
gonz_
Ah, I should specify the reason... mingw has a console window pop up regardless of whether or not you're making a win32 app

1591915276
daurnimator
gonz_: zig has a subsystem flag

1591915294
gonz_
Is it available from `build.zig` & `zig build`?

1591915519
gonz_
I assume the normal flow is that `WinMain` is detected and the subsystem set automatically

1591915533
gonz_
If that's the case it's curious why it wouldn't for mingw

1591916354
daurnimator
gonz_: yes. b.subsystem = ......

1591919252
leeward
Is there a comptime way to concatenate strings?

1591919272
leeward
Or am I using fmt?

1591919282
leeward
Or am I using comptime fmt?

1591919794
tgschultz
used to be able to do it with "A" ++ "B"

1591919850
tgschultz
pretty sure that still works actually or a lot of @compileError statemens I've written would have broken.

