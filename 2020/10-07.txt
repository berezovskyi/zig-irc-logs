1602033552
nikki93
anyone make any interesting comptime DSLs or sth in zig?

1602033566
nikki93
like the lang is expressed as struct literals or even just string literals that are parsed at comptime or sth

1602033727
pixelherodev
I hope not

1602033733
pixelherodev
That kinda thing should wait for stage2

1602033746
pixelherodev
stage1's comptime isn't nearly good enough for that

1602033762
pixelherodev
it could be hacked on to make it close, but "wait a few months" is probably a better answer

1602033772
nikki93
what are some improvements that would come with stage2?

1602033838
pixelherodev
For starters, speed

1602033842
pixelherodev
That's a really really big one

1602033847
nikki93
one thing i've wondered about is generation of glsl shaders from expressions represented as structs -- with the 'attributes' and 'uniforms' being automatically generated from zig structs for nice interop

1602033854
pixelherodev
Minor usage of comptime inflated the build time for a program of mine from three seconds to seventy

1602033860
pixelherodev
Memory usage is another major one

1602033871
pixelherodev
Stage1's memory consumption for comptime is atrocious

1602033877
nikki93
makes sense. are there any actual new constructs that would come about? or is it mostly implementation improvement of existing constructs

1602033880
daurnimator
nikki93: I've been waiting for someone to make a PEG so that I don't have to :p

1602033918
nikki93
daurnimator: haha that'd be a cool idea! also nice to see you here, i remember you from lua ircs :) i was hacking on some little react stuff with fengari if you remember

1602033931
nikki93
it's definitely felt like there are parallels between lua vibes and zig vibes haha

1602033939
cr1901_modern
Has anyone run gprof on the stage1 compile yet?

1602033966
nikki93
zig's struct stuff feels like it has a lot of parallel with lua tables esp. given how 'anonymous' you can be with them

1602034027
daurnimator
nikki93: yeah, there's a few lua people in the community

1602048912
pixelherodev
`return error.LLVMBackendDoesNotSupportSPUMarkII` Heh

1602048920
pixelherodev
Snrk

1602049140
pixelherodev
andrewrk: yeah, bug was revealed

1602049172
pixelherodev
(CBE arithmetic)

1602049186
pixelherodev
> :5:13: error: expected comptime_int, found u8

1602049325
pixelherodev
> Code Generation [10332/17739]

1602049336
pixelherodev
Some caching in stage1 would be very very useful for stage2 work

1602049341
pixelherodev
s/some/more modular

1602050650
moinstar
`lld: error: undefined symbol: getPollyPluginInfo()` ; while building stage two. How do i mitigate this ?

1602051185
daurnimator
moinstar: your LLVM is built wrong

1602051220
Astolfo
do explain why

1602051225
daurnimator


1602051253
Astolfo
ouch

1602051635
andrewrk
I really hope this is fixed in llvm 11

1602051661
leeward
moinstar:

1602051681
pixelherodev
andrewrk: ahhhh, I understand now

1602051691
leeward
I think, that's the one, anyway.

1602051702
Astolfo
i wonder how much longer until LLVM 11 actually

1602051709
Astolfo
i wouldnt hold my breath

1602051714
daurnimator
Astolfo: they're running behind

1602051720
pixelherodev
So the logic here should be more like "if dest is comptime_int and src is int, cast the dest to the src type and proceed"

1602051822
pixelherodev
andrewrk: ping

1602051889
andrewrk
yeah

1602051898
pixelherodev
Does that mean modifying next_inst.ty ?

1602051912
pixelherodev
After looking over the function again, I'm still a tad confused as to how it's intended to be used

1602051925
pixelherodev
resolvePeerTypes is only supposed to

1602051958
pixelherodev
next_inst is currently not modifiable; should I be

1602052320
andrewrk
look at how it's done in stage1

1602052335
andrewrk
or even in just the rest of that function

1602052354
pixelherodev
andrewrk: the problem is determining intent.

1602052364
pixelherodev
I'm assuming here it should be resolving

1602052371
pixelherodev
But I've made multiple false assumptions of intent in the past

1602052387
pixelherodev
Until the code is a bit more documented, I think that asking questions is the best option

1602052390
andrewrk
the existing code is correct and it does not modify the insts

1602052410
andrewrk
let me pull up your branch again

1602052414
pixelherodev
The thing is, I wasn't 100% sure if that was because none had

1602052417
pixelherodev
I think I should be good from here

1602052456
andrewrk
do you see how the new lines do not follow the same pattern as the rest of the function?

1602052464
pixelherodev
Yeah, for sure

1602052471
pixelherodev
I think I got it, just rerunning tests :)

1602052482
andrewrk
üëç

1602052494
pixelherodev
Woot, yep

1602052502
pixelherodev
Assuming there's no

1602052512
pixelherodev
andrewrk: how hard would it be to implement per-zig-file caching in stage1?

1602052525
andrewrk
impossible

1602052551
pixelherodev
Drats

1602052559
pixelherodev
... ah wait

1602052564
pixelherodev
Is that because the caching code is shared now?

1602052574
andrewrk
to be more specific, it would be more work than finishing stage2

1602052593
pixelherodev
That's... wow.

1602052603
pixelherodev
:)

1602052624
pixelherodev
I get how that function works now :D

1602052634
andrewrk
sweet

1602052638
pixelherodev
What tripped me up was the naming

1602052644
pixelherodev
`prev_inst` is a misnomer

1602052658
andrewrk
perhaps it should be lhs_inst and rhs_inst?

1602052661
pixelherodev
The inst there is entirely irrelevant, that would make sense as a raw Type `current_type`

1602052667
pixelherodev
It's not about lhs vs rhs after the first iteration though

1602052677
pixelherodev
Which is why a number of the conditionals just leave it and skip an inst

1602052683
andrewrk
maybe `chosen` and `candidate`

1602052689
pixelherodev
I like that

1602052693
pixelherodev
Should I add that to the PR?

1602052704
andrewrk
feel free to do that in a follow up commit

1602052709
pixelherodev
That was the intent

1602052717
andrewrk
üëç

1602052748
moinstar
daurnimator, thanks for the reply. I had to step out. Going through the links you sent. thanks again.

1602052816
pixelherodev
Okay, that PR should be done

1602052909
pixelherodev
Future work will show up on the mailing list, with the understanding that it will be delayed due to inconvenienceo

1602052928
pixelherodev
tdeo: I like that proposal :)

1602053321
pixelherodev
Oh neato

1602053323
pixelherodev


1602053437
Astolfo
internet sucks....

1602053450
pixelherodev
:(

1602053477
Astolfo
alas the life of someone who only has AT&T DSL available in their area

1602053542
pixelherodev
oof

1602055093
bfredl
is it a know issue that `make; sudo make install` builds zig1.o twice?

1602055297
daurnimator
bfredl: what commit did you try against?

1602055315
bfredl
5 minutes ago

1602055336
bfredl
still the latest one on master

1602055353
bfredl
NB: I could of course wash away all cmake caches and try once more..

1602055455
FireFox317_
andrewrk, regarding zig-bootstrap, once #6588 is in master, could you merge master in the llvm11 branch?

1602055471
andrewrk
FireFox317_, I'm working on #6588 right now btw

1602055484
FireFox317_
oh nice, thanks!

1602055491
andrewrk
yes sure thing I will do that within about 5 min

1602055523
andrewrk
bfredl, yes

1602055529
FireFox317_
andrewrk, i wasn't exactly sure how to proceed with #6588 anyway, after the comments from LemonBoy

1602055675
andrewrk
bfredl, check the readme - it's been recently updated. we're in a period of transition right now. afterwards, the build process will be `make install` (no `make` alone) to "install" to the build directory, followed by `bin/zig build ...` to build stage2, finally using that to build stage3 which is what you actually install

1602055719
andrewrk
once that process works, you can always skip the first step. you would only need to do that for bootstrapping

1602055780
andrewrk
FireFox317_, was it intentional to remove the subtraction of total_bytes_copied in copyRangeAll?

1602055795
FireFox317_
whoops, i dont think so

1602055806
andrewrk
no worries I fixed it locally

1602055852
FireFox317_
nah that was a mistake indeed, okay great! :)

1602056141
Astolfo`
finally. fixed

1602056186
Astolfo`
there was something seriously wrong with my irc... causing things to be blindingly white

1602056197
Astolfo`
and i dont mean just theme

1602056457
FireFox317_
s-ol, maybe the bug you have now is fixed in a newer version of llvm. I have a checkout of the new llvm11 branch, so i could check for you if the issue is still relevant  (then there is no need to forward the bug to llvm)

1602056869
andrewrk
FireFox317_, master merged into llvm11 and pushed

1602056875
andrewrk
thanks for working on this!

1602056975
FireFox317_
andrewrk, nice thanks! I will probably have some follow up commits for the llvm11 branch and zig-bootstrap soon :)

1602057034
andrewrk
great :)

1602057514
bfredl
andrewrk: cool, i will watch the progress :]

1602063906
ifreund
heh

1602064595
ikskuh
very helpful :D

1602069408
bfredl
maybe a stupid uninitiated question, but the master docs say:

1602069411
bfredl
A for expression can be used to iterate over the elements of a slice, array, or tuple.

1602069423
bfredl
but /tuple gives nothing (except for that one mention)

1602069474
bfredl
I suppose tuple is those .{ 2, "yy" } things, but has another name now?

1602069617
ifreund
yeah we really don't have good docs for tuples

1602069635
ifreund
you're right though, the .{ 2, "foo" } things are tuples

1602069655
ifreund
they're basically anon structs with numbered fields

1602069714
ifreund
they also aren't a very complete feature, see:

1602069752
bfredl
yea

1602069764
bfredl
I will just link you the code i am "struggling" with

1602069791
bfredl
as in struggling with zig is like a pleasure compared to my other struggles (rust, pipenv, cuda version mismatch)

1602069863
bfredl


1602069874
bfredl
ideallly the "rgb" struct thing should be as anonymous as possible

1602069941
bfredl
I tried `@TypeOf(.{1, 2, 3})` at first

1602069945
bfredl
but that is too unique

1602069960
bfredl
not shared between identical declarations

1602070154
ifreund
yeah I think you need

1602070163
bfredl
glotterLIne

1602070169
bfredl
oops

1602070176
bfredl
gnome is leaking my secrets again

1602070224
bfredl
i schtick to a "boring" named struct for now

1602070331
bfredl
another stupid question, can you "erase" a named struct into a tuple?

1602070334
bfredl
i mean when passing to printf

1602072694
ifreund
bfredl: std.fmt can format structs just fine. Not sure I understand the question?

1602072712
ifreund
you can also define a custom format function for your struct

1602072774
bfredl
error: no member named 'len' in struct 'RGB'

1602072783
bfredl
I would like it to, but it don't wanna

1602072976
ifreund
print("{}\n", .{my_struct});

1602073026
bfredl
i literrally add the len field but it is still complaining :sob:

1602073047
bfredl
almost there

1602073068
bfredl
ideally i would want to "unpack" the struct like the lua unpack() does

1602073201
bfredl


1602073224
bfredl
if the documentation was, like, longer than 0 words, i would not bother this chat with my noob questions :]

1602074087
ifreund
see the doc comment for std.fmt.format

1602074130
ifreund
you can even read it online, though it probably isn't up to date:

1602085476
jaredmm
Arg. Why does a driver from a company with a market cap of 100+ billion on an OS by a company with a cap of 1.5+ trillion cause my terminal to hang for 6s after a command executes? Thinking sand was a mistake.

1602085635
scientes
jaredmm, it is woorse

1602085714
scientes
not that I am saying you shouldn't sell your skills as a programmer, or ever pay for programming work to be done, or start a business around libre software

1602085720
jaredmm
I suppose I'm technically being paid to suffer this injustice, which doesn't make it better (and no small part of the fault lies with the corporate policy to re-push broken drivers even after I fix them).

1602085824
scientes
"We must not direct the users towards proprietary software as if it were a solution, because proprietary software is the problem."-Richard Stallman

1602086361
bfredl
i suppose it is a known issue that 0.7 do not build std docs yet?

1602086365
bfredl
any PR to follow? :]

1602087347
Astolfo`
holy shit. if my client seemed to spam your feed i apologize. i left the client open overnight and i come back to >Your account is disconnected and >Your account has been reconnected all over O_O

1602095790
u0jQx9gPyrYg
any special branch i should branch of to make a fix for this

1602097004
u0jQx9gPyrYg
anyway i just created a PR

1602097624
ifreund
u0jQx9gPyrYg: got you a review, thanks for working on this!

1602097750
Snetry
Hey, I need some help understanding what is wrong with my code

1602097766
Snetry
I am trying to call the main function (renamed to c_main) from Zig

1602097771
Snetry
but I keep getting "error: expression value is ignored"

1602097782
ifreund
Snetry: link to the code?

1602097788
Snetry
creating a gist as we speak

1602097792
Snetry


1602097813
ifreund
_= c_main(); to explicity discard the value

1602097821
Snetry
ah damn right

1602097823
Snetry
I forgot about that part

1602097833
ifreund
zig doesn't let you ignore return values, as that leads to bugs :P

1602097849
Snetry
yeah ik, totally forgot that was the case tho

1602097852
Snetry
thanks for the quick help

1602097883
ifreund
np

1602102480
u0jQx9gPyrYg
ifreund: can you elaborate why the switch is preferable over the if i replaced it with?

1602102557
ifreund
u0jQx9gPyrYg: it's much more readable and has comment explaining all the errors listed in the man page

1602102596
ifreund
also the ret == -1 is wrong if not using libc

1602102631
ifreund
and you used the magic number 4 instead of the EINTR const

1602102820
ifreund
that all make sense? happy to explain in more detail if you like

1602103121
u0jQx9gPyrYg
oh yeah the magic number instead of EINTR is indeed bad

1602103195
ifreund
there's also the fact that you should generally change as little code as possible to have the desired effect when contributing to a project

1602103211
ifreund
it makes things easier to review and lowers the chance of regressions

1602103226
ifreund
plus every other syscall in the file uses a switch

1602103230
u0jQx9gPyrYg
true, i'm by day a code auditor, for me less code is less code to review though...

1602103444
ifreund
readabilty and clarity is far more important than line count

1602103475
ifreund
the switch makes it clear

1602103523
u0jQx9gPyrYg
hmm. yeah the comments make sense

1602103533
ifreund
and as already stated, it conforms to the style of std.os

1602103583
u0jQx9gPyrYg
yeah, thats ture

1602103587
ifreund
and has already been working for over a year

1602103590
u0jQx9gPyrYg
s/ture/true

1602103595
ifreund
enough reasons? :P

1602103649
u0jQx9gPyrYg
sure.

1602103671
u0jQx9gPyrYg
actually i found a problem in my patch, that in my live system was fixed already. /o\

1602103880
u0jQx9gPyrYg
damn. i clobbered os.zig in my PR... i feel lame

1602103886
u0jQx9gPyrYg
ok, time for a force push

1602104009
ifreund
force push is where it's at for small patches

1602104301
u0jQx9gPyrYg
done. still feeling lame. /o\

1602104430
ifreund
ready for round 2? I'm warmed up now :D

1602104743
u0jQx9gPyrYg
ohoh /o\

1602104775
u0jQx9gPyrYg
i feel i already pissed of rocknest with my old code /o\

1602104799
u0jQx9gPyrYg
ah shit the rc thing i forgot.

1602104801
u0jQx9gPyrYg
right

1602104838
ifreund
andrewrk: Thank you for opaque{} <3, now my scanner doesn't depend on an unmerged feature of an unstable language :D

1602104845
ifreund
and thaks tdeo

1602104854
andrewrk
haha

1602104974
ifreund
u0jQx9gPyrYg: you didn't piss anyone off, we all have the same goal here: an awesome language and standard library

1602105232
u0jQx9gPyrYg
ifreund: when i return the returned pid, it seemed to me that there are cases when the returned value from system.waitpid is usize is it true that in that case pid_t is also of the same bitsize and doesn't need truncating?

1602105260
u0jQx9gPyrYg
huh, i hope that makes sense

1602105288
ifreund
you're right that usize is probably going to be more bits than pid_t, but @intCast() can handle that

1602105402
u0jQx9gPyrYg
intcast can truncate down? i didn't know, i guess i don't know many things zig...

1602105469
ifreund
@truncate is when you want to discard some of your bits without caring what they are

1602105499
ifreund
@intCast is for casting between any two integer types

1602105526
ifreund
@truncate can't invoke UB

1602105529
ifreund
@intCast can

1602105570
ifreund
I think the code you have withe the @truncate before the @intCast actually hides UB that we want to trigger in some cases

1602105635
u0jQx9gPyrYg
i see

1602105641
u0jQx9gPyrYg
i pushed an update

1602105949
ifreund
u0jQx9gPyrYg: LGTM, last thing to do is to run zig fmt

1602106071
u0jQx9gPyrYg
it also reformats other parts of the code that i didn't touch

1602106086
ifreund
ew

1602106144
u0jQx9gPyrYg
i can manually merge the changes i guess and leave the other parts unformatted

1602106150
ifreund
idk what editor you use, but mine lets me pipe the selection through external programs

1602106173
ifreund
so you can select the part you changed and then pipe it through `zig fmt --stdin`

1602106327
u0jQx9gPyrYg
well normally i use emacs. but this particular case for some stupid reason i use vim. anyway i made a diff, and deleted the parts that are not related to my changes and applied that patch to a checkedout version of os.zig

1602106718
ifreund
cool

1602106743
tdeo
i've gotten into the habit of always using `git add -p`

1602106758
ifreund
u0jQx9gPyrYg: you can probably press the resolve button on most of those review comments now

1602106758
tdeo
helps avoiding other stuff like trailing whitespace too

1602106762
ifreund
git add -p is the shit

1602106786
ifreund
also a nice way to make sure there aren't any glaring bugs before you commit

1602106869
u0jQx9gPyrYg
donez

1602106914
u0jQx9gPyrYg
wow. TIL add -p. thx. very very useful

1602107081
andrewrk
-p also works on git log

1602107091
andrewrk
sometimes I use `git log -p` and then just search for identifiers to see when it was first introduced

1602107107
u0jQx9gPyrYg
yah that i knew and use a lot

1602107111
tdeo
ooh i knew about the command but not that trick

1602107136
andrewrk
it's especially useful combined with -- [file_paths]

1602107251
pixelherodev
andrewrk: CI passed, case fixed, I pass the PR back to you :)

1602107298
andrewrk
nice work

1602110913
ikskuh
implementing compileLog in C++:

1602112516
ifreund
cursed

1602113669
pixelherodev
ikskuh: that's worse than my PHz80

