1608249899
karchnu
viashimo: yep, it's what I thought. I hope I will be able to get productive quickly. For now I don't really need much, so that's okay.

1608253979
pjz
I find it helpful to keep the src on github up in a browser

1608254153
karchnu
I have a copy of the sources so I can mess with it using $EDITOR. :D

1608258166
karchnu
Oh, I found "crêpe" in tests for std.fmt.format :D Do you have french people in the team? :D

1608258584
g-w1
LemonBoy wrote it

1608258817
fengb
Maybe he likes food ¯_(ツ)_/¯

1608258826
fengb
\

1608265363
andrewrk
I need bat signal for TheLemonMan

1608265383
andrewrk


1608267524
karchnu
How can I safely return a string from a function?

1608268130
karchnu
Wait, actually the problem seems to be that I return a structure with a string in it, but the string wasn't copied, it is just a reference to the local one in the stack.

1608268168
karchnu
I can't do   return MyStruct{.string = my_local_string };

1608269252
fengb
Slices are reference types (pointers really)

1608269269
fengb
To make a copy, you'll have to manually manage the memory

1608269382
karchnu
and returning a string representation is okay only if a fixed-sized buffer is returned, with its size known at compile time, right?

1608269418
karchnu
like   fn a() [100] u8 {...}

1608269648
fengb
Yeah, arrays are values. The compiler knows how many bytes to copy

1608269683
fengb
(Unlike in C, where arrays degenerate into pointers...)

1608269733
fengb
A hack I sometimes use is pass around a `struct { len: usize, data: [256]u8 }`

1608269753
karchnu
I guess I will have to use heap memory since I pass values with unknown sizes inside structures that I return.

1608269760
fengb
The data field encodes a max buffer size so it can be passed around on the stack

1608269776
karchnu
Yes, it's a hack, and I will try not to use it. :D

1608269814
fengb
Hey if it works and if the optimizer erases the copies, then it's better in my book :P

1608269865
karchnu
I'm doing a parser right now,

1608270008
andrewrk
figured it out!!

1608271316
andrewrk


1608271844
viashimo
how does one check which field of a union is active?

1608271956
andrewrk
make it a tagged union

1608271976
andrewrk
then you can check it with `==` with its enum tag type

1608272000
viashimo
ok, thanks

1608272007
andrewrk
you can also coerce it directly to its enum tag type

1608273418
KIMI_887
hi, is it possible to make so i can use the 2nd

1608273465
KIMI_887
if(data.power)  and then i can use it, instead of |power|

1608273479
KIMI_887
in kotlin i can do that

1608273788
KIMI_887


1608273800
KIMI_887
i can use d.power or it

1608273887
KIMI_887
i can even do that and compiler know i checked already if(d.power != null) { println(d.power) }

1608275521
leeward
3(ish) days in, but I finally have an I2C bus clocking out bits from Zig code.

1608275528
leeward
Turns out it was a hardware problem all along.

1608275542
leeward
The 3.3V regulator on my slave device module was borked.

1608275577
leeward
Super glad I got the logic analyzer with the analog inputs now.

1608279779
semarie
I have a C struct defined as 'struct { ... } __packed'. how to declare it in zig to keep C compat ? I assume that just 'extern struct { ...}' will not be enough, but I am unsure if 'packed struct { ... }' would have the same layout than C ABI

1608279911
semarie
it is 'struct fxsave64' defined at

1608280586
andrewrk
semarie, zig has packed structs as well

1608280620
andrewrk
I think you would need

1608280918
semarie
andrewrk: so using 'packed struct {...}' in zig should have the same layout than 'struct { ... } __packed' in C (with only simple types like u8, u16, u32, u64) ?

1608281018
semarie
I think at some point I will need to have automatic tests for comparing layout between @cImport("foo.h").myStruct and @import("foo.zig").myStruct (comparing fields size, alignment, offset, ...)

1608282393
HollMax
Hi, is there a better way to do something on a missing optional that `if (foo) |_| {} else ...`?

1608282400
HollMax
*than

1608282434
HollMax
the documentation is talking mostly about the happy path

1608282576
HollMax
also, I've noticed `.get()` on hashmap returns `?V`, but the docstring says it returns an optional pointer to value, which I'd expect to be of type `?*V`

1608284324
ifreund
HollMax: if (foo == null) { ... }

1608284332
ifreund
and yeah that doc comment looks wrong

1608284367
HollMax
ifreund ah, thanks!

1608284397
HollMax
Not sure if the comment is wrong, I'd say the code is wrong, as I'd rather get a pointer

1608284443
ifreund
you could open an issue/PR to discuss

1608290245
dominikh
ifreund:

1608292073
ifreund
I'm not really convinced, the resulting code isn't as readable as a simple while loop and the ergonomics aren't good enough to make up for that IMO

1608292103
ifreund
though 1717 and if accepted 6965 would help with that

1608292113
dominikh
being able to combine data transformations can be a powerful feature

1608292160
dominikh
can't wait for 1717 though

1608292263
dominikh
6965 looks… interesting

1608292419
ifreund
6965 is the closet zig might get to closures, which would be pretty big for functional-style iterator ergonomics

1608292457
dominikh
it also stands out as a very "special" feature, in terms of Zig that doesn't work on it

1608300321
companion_cube
The more ergonomic you want to be, the further away from C you need to stray :p

1608308832
dominikh
do I understand right? a struct field can be 'anytype', but then the struct type can only be used at comptime?

1608316050
andrewrk
semarie, you can implement such tests with comptime blocks and @offsetOf

1608323476
justin_smith
is it expected, or a known issue, that if I call get on a hash map that has 0 capacity, it blows up with an integer overflow?

1608323523
justin_smith
it calls "const mask = self.capacity() - 1;" - I guess I need to make sure capacity is allocated or guard my get call

1608323565
g-w1
I would submit a pr to make it return null when this happens

1608323596
justin_smith
g-w1: that sounds like a good behavior, yeah

1608323900
heidezomp
I'm about to submit a PR to fix compilation of getuid/getgid/geteuid/getegid on 64-bit Linux; should I add tests to ensure that these compile correctly, even though the return value cannot be tested? (so a test would basically be `_=linux.getuid()`) Or are tests like that not useful?

1608324716
justin_smith
oh, the root cause of my bug was taking a pointer to a hash map on stack, pebkac

1608325681
leeward
Gotta love it when the debugger causes the problem you're trying to debug.

1608327683
leeward
andrewrk: I see #4284 is targeted for 0.8.0. Do you expect to do the @volatileLoad and @volatileStore thing proposed in the original comment?

1608332510
andrewrk
leeward, no action is planned yet since it doesn't have the "accepted" label

1608332522
andrewrk
it's still an open discussion

1608333526
leeward
shiny

1608333721
pixelherodev
As I understand it, targeted non-accepted issues mean "Let's try to resolve this discussion by then"

1608333844
pixelherodev
Since we're nearing 1.0, we won't be able to afford postponing even just the

1608333846
pixelherodev
longer*

1608333986
rom1504
what will make zig 1.0 ?

1608334039
andrewrk
we're not nearing 1.0

1608334039
pixelherodev
rom1504: "No known bugs, language is set in stone, compiler is finished"

1608334275
rom1504
I don't know any language that is this good

1608334339
leeward
0.9 + 0.1 is 0.10, not 1.0

1608334486
pixelherodev
andrewrk: nearing != "we're almost there," but "we're starting to exit the stage in development where we  can keep pushing stuff off to later, because we're starting torun out of laters". There's probably a better phrasing

1608334646
pixelherodev
"Focus is largely shifting from design into implementation" maybe?

1608334739
leeward
I suspect we'll find some important design things to change in the course of writing a compiler in Zig.

1608334775
leeward
But you're probably right about there being more design in the past than the future.

1608335038
pixelherodev
I think the big picture design is mostly set in stone

1608335049
pixelherodev
(though obviously not *completely*)

