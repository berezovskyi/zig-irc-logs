1600738066
kandinski
I'm exploring Zig with a view to implement a toy scheme in it, and I'm sure this is not a bug but a misunderstanding of mine:

1600738106
fengb
Tuples only coerce to arrays, not slices

1600738121
fengb
My array is defined as a slice

1600738137
kandinski
[_]FooType would be an array?

1600738161
kandinski
where the _ means "compiler, please fill in the length"?

1600738166
fengb
Yes but you’d need to define a size for a type

1600738190
fengb
The inferred syntax only works for building an array, not defining variables

1600738190
kandinski
error: inferred array size invalid here

1600738201
kandinski
hmm right

1600738233
kandinski
yup, test passing, thanks

1600738245
fengb
np

1600738303
fengb
There’s a proposal to allow &.{foo} to coerce into a slice. It has some design flaws

1600738325
leeward
`.{foo][0..]`?

1600738336
kandinski
this is because the compiler is reading the tuple literal as a struct and then coercing it, correct?

1600738347
fengb
Right

1600738436
kandinski
this worked:     var my_array = [_]ErrorUnionOptionalStringType{ mystring, mystring, mystring };

1600738444
kandinski
(hope it's ok to paste single lines)

1600738480
kandinski
but now of course my_array is of type [3]..., I just didn't have to count them by hand

1600738503
leeward
Yep, that should do it.

1600738536
kandinski
much appreciated, folks

1600764274
johnLate
Btw. I've solved my problem. Starting with json { "a": { "x": {"1": ["some", "data"] }}}, I can now access the inner array with J.lookup(tree.root, .{"a", "x", "1"}):

1600774522
ikskuh
dang.

1600781893
pixelherodev
ikskuh: lol

1600781906
ikskuh
:D

1600782568
pixelherodev
ikskuh: `du -sh .weechat/logs` Guess the size?

1600782580
ikskuh
"yes"

1600782595
pixelherodev
Wrong!

1600782625
companion_cube
only 128M here, woo

1600782664
pixelherodev
I think when your logs are big enough that they can't fit on a floppy, you've got waaaaay too much info on people.

1600782701
leeward
Are they gzipped?

1600782702
pixelherodev
Not all of them - for some channels I keep them - but for the more floody channels, there's no point :P

1600782714
pixelherodev
leeward: mine aren't :P

1600782826
companion_cube
these are my current logs, I have bz2'd backups back to 2012

1600782846
leeward
1.44MiB is not much of anything these days. Can't even fit most executables.

1600782863
companion_cube
or any executable if you count the .so it uses :)

1600782881
pixelherodev
leeward: if it's plain text - especially plain text - that should be enough

1600782887
pixelherodev
companion_cube: who said anything about dynamic linking? ;)

1600782925
companion_cube
I mean even the super small C programs often depend on glibc.so

1600782964
leeward
libstdc++ is 1.8M on my system.

1600783060
companion_cube
my libc.so is 2.1M…

1600783118
pixelherodev
I have static binaries under 60 KiB ;)

1600783155
leeward
So you're saying they're the rare exception?

1600783213
pixelherodev
Funny :P

1600784631
Piraty
you can fusemount a zip file ... ;)

1600784663
Piraty
(re big weechat logs)

1600794364
mattnite
GrooveStomp hey!

1600794382
GrooveStomp
Hey mattnite!

1600794657
mattnite
What sort of projects are you writing in zig?

1600797044
jorangreef
Hey everyone! What's the fastest echo tcp server for Zig at present on Linux? Could someone whip something up or convert

1600797044
jorangreef
5.8 kernel, and need a fair candidate so we can get some numbers.

1600797587
andrewrk
jorangreef, I'm not aware of anyone doing any benchmarking on this

1600797597
andrewrk
I'm excited to see how the io_uring event loop performs though

1600797691
ikskuh
oh, do we have that merged already?

1600797824
andrewrk
ikskuh, no it's a big PR jorangreef has been working on for a few days

1600797880
ikskuh
yeah, i've watching it. got at least 100 mails for it :D

1600797885
ikskuh
so having a benchmark would be nice

1600797955
justin_smith
I have a WIP of a translation for a simple C client for the jack audio connection kit to zig

1600797970
justin_smith
it will be the basis for a blog post intro to zig

1600797982
leeward
nifty

1600797995
justin_smith
any feedback encouraged - I know this isn't yet ideal zig code

1600798011
justin_smith
I also copied the original code into the repo, and linked to the original examples

1600798064
justin_smith
also, if someone wants to dig even further, the commit history is the refactor that the blog post will walk through (and if that should be fixed I'll rebase so that "history" is a good one for the blog to follow)

1600798100
jorangreef
Thanks andrewrk, I want to hack your tcp chat server at

1600798101
jorangreef
io_uring-based client and another C contender also using io_uring to compare with. Sorry for those 100 mails ikskuh had a fun weekend.

1600798105
justin_smith
it starts with something very close to a decomposed "translate-c" output (where nested conversions on one line are broken into explicit steps per line)

1600798170
ikskuh
jorangreef: no worries, i love seeing progress, even if i ignored the thread from the start

1600798228
jorangreef
I figured most people would have unwatched around the 30th push D:

1600798282
andrewrk
jorangreef, let me see what I can do. It might require a std lib patch hack, but I'm guessing that will be fine for your purposes?

1600798310
andrewrk
there's a larger reworking which needs to be done here to avoid trying to put the same fd into epoll multiple times

1600798318
ikskuh
jorangreef: i watch the whole repo :D

1600798346
jorangreef
andrewrk sure, that would be awesome.

1600798350
ikskuh
andrewrk: how's 6250 going? there were some exciting commits in there!

1600798465
andrewrk
ikskuh, it's good, you can see progress like this: `git fetch && git log -p origin/stage2-zig-cc -- BRANCH_TODO`

1600798479
ikskuh
ah

1600798498
andrewrk
above the line break is merge blockers, below is issues I need to file after merging

1600798531
andrewrk
so... 33 more commits, then merge, then file 29 github issues :D

1600798534
ikskuh
hm. i don't get any output for this :D

1600798557
ikskuh
but i've just checked out the right branch :)

1600798652
andrewrk
this branch changes the CLI btw to remove --c-source; instead it pays attention to file extensions

1600798658
andrewrk
zig build-exe foo.zig bar.c

1600798676
fengb
So I can't name my zig sources .c? D:

1600798697
leeward
Foiled again!

1600798769
andrewrk
jorangreef, I wish self-hosted was done so I could be doing event loop stuff with you more right now

1600798797
andrewrk
I just feel like this is too much of a bottleneck for me to not focus on it until completion

1600798939
ikskuh
andrewrk: the current changes allow for planned simultaneous compilation, right?

1600798940
jorangreef
andrewrk, that's the right thing to focus on, will be awesome when self-hosted is done, it's a force multiplier

1600798971
andrewrk
ikskuh, yeah you can see it's centered around a job system

1600798980
justin_smith
as we discussed previously, data structures are kind of strewn about lib/zig/std, I notice lib/zig/std/atomic/ has atomic concurrent data structures, so if I want to do lock free maybe std/lib/lockfree ? I'm thinking the basics, lock free stack, lock free queue, then a ringbuffer apropriate for usage as a high throughput channel

1600798997
andrewrk
I decided not to do evented I/O for now, because that will simplify bootstrapping the compiler

1600799004
ikskuh
yeah, true

1600799004
ikskuh
neat!

1600799008
ikskuh
this is gonna be great!

1600799021
ikskuh
finally no long wait times for compiling bearssl anymore :D

1600799023
ikskuh
* audit the CLI options for stage2

1600799028
ikskuh
also a very good point :)

1600799034
andrewrk
ikskuh, I think it is reasonable that we could get parallel builds of c objects by 0.7.0

1600799045
ikskuh
nice

1600799054
ikskuh
on the change above: how do i pass comiler flags per C file?

1600799071
andrewrk
* add CLI support for a way to pass extra flags to c source files

1600799073
andrewrk
;)

1600799123
ikskuh
ah :D

1600799131
andrewrk
justin_smith, I had originally intended for std.atomic to be lock free data structures, but after weeks working on a lock free queue I failed and gave up and now std.atomic should be renamed to std.threadsafe

1600799193
justin_smith
andrewrk: AHA - I'll include that in my work then - better to have std.threadsafe.lockfree or std.lockfree for the non-locking variants?

1600799219
andrewrk
I think std lib path names can be decided later

1600799236
justin_smith
I know it's tempting to make this an auto-upgrade kind of thing, but certain lockfree algorithms (which are worth using) need slightly different usage apis

1600799237
andrewrk
my recommendation would be to work on these lock free data structures externally and treat upstreaming them as a separate project

1600799238
justin_smith
cool

1600799258
andrewrk
I came to the conclusion that lock free data structures would not actually improve the event loop perf

1600799276
andrewrk
but that's just me, maybe you end up finding something different :)

1600799283
justin_smith
my hunch was that last one (ringbuffer) would make the real difference

1600799325
justin_smith
if your consumers keep up it's a very fast paradigm

1600799365
justin_smith
my thought was to have a "channel" abstraction built on ringbuffer + some simplifying assumptions

1600799393
companion_cube
if the event loop is plugguable, maybe the standard one can be relatively simple?

1600799394
justin_smith
but it's experimental, I'll make some tests and we'll see if I come up with anything

1600799482
andrewrk
sounds good

1600799563
andrewrk
oh they finally fixed all the regressions I reported in llvm 11rc2. time to run the test suite again

1600799758
mattnite
wew!

1600800425
andrewrk
jorangreef, I might have taken on more than I can chew today, you might be better finding another way to do your benchmark than waiting for me

1600800554
jorangreef
andrewrk, no worries! ...thanks for Zig... incredible work! If anyone else can help, all we need is a simple zig tcp server that accepts a single connection, reads a 1K buffer and immediately writes back.

1600800589
ikskuh
multiple clients or single client?

1600800593
jorangreef
single client

1600800601
ikskuh
let me hack something together quickly

1600800607
ikskuh
i need to do a bugfix on zig-network anyways

1600800664
jorangreef
thanks ikskuh! here's a C echo server (although it's a little buggy):

1600801316
jorangreef
really appreciate the help ikskuh, my email is joran@coil.com, cheers everyone!

1600801336
ikskuh
you're welcome

1600801340
ikskuh
server is nearly ready :D

1600801352
jorangreef
awesome (y)

1600801365
jorangreef
getting late this side, chat tomorrow

1600804802
fgenesis
re: ringbuffer:

1600804858
fgenesis
dunno if something like this is in already

1600805087
ikskuh
i haven't even started reading the article, but reading virtual-memory + gapless explains the idea pretty well alredy :D

1600805153
fgenesis
and for a job system, i've recently been working on one in plain C, if it helps to draw inspiration from, there:

1600805268
companion_cube
fgenesis: is it correct to say that virtual memory makes the "hierarchical table layout" for you?

1600805283
fgenesis
companion_cube: huh?

1600805291
fgenesis
what are you referring to?

1600805293
companion_cube
in the ringbuffer article

1600805302
companion_cube
"[…]  we could use virtual memory instead, and avoid the complexity of a hierarchical table layout."

1600805308
companion_cube
basically that's what virtual memory is, right?

1600805326
fgenesis
...yeah? except that it's the cpu doing it in hardware pretty much

1600805354
companion_cube
yeah sure

1600805382
companion_cube
basically writing an allocator, there

1600805392
fgenesis
but all of this talk about virtual memory becomes a bit nasty when you're on HW without it. stupid 8-bit microcontrollers :D

1600805453
fgenesis
so i dunno if anything requiring VM is even suitable for the standard lib

1600805499
fgenesis
or even if you're on a 32bit platform and virtual memory is rather scarce by today's standards

1600805542
companion_cube
maybe there should be layers of stdlib :)

1600805550
companion_cube
small and big

1600805565
fgenesis
rust does this since a while iirc

1600805590
fgenesis
a core lib that depends on nothing, an os lib that has all the OS things, some more, and finally the stdlib tying them together

1600805611
fgenesis
but i am not knowledgeable in rust so please ask someone competent :D

1600805674
fgenesis
anything is better than in C. syscalls to into the standard lib because uuhhhh, but floating point stuff is totally exotic enough to warrant a libm (at least on *nix)

1600805713
fgenesis
like having a libsyscall wasn't a good idea

1600805784
ikskuh
fgenesis: nice thing in zig:

1600805791
ikskuh
when you don't use it, it's not compiled

1600805811
ikskuh
so you can provide such a smart/efficient ringbuffer on OSes with support for it

1600805820
ikskuh
and fall back to a less efficient one on other platforms

1600805830
fgenesis
yeah, but think about the API

1600805839
earnestly
Like io_uring

1600805847
ikskuh
it shouldn't differ between both APIs

1600805850
fgenesis
as long as that doesn't matter for whether VM is used internally or not, it's good

1600805851
ikskuh
*implementations

1600805860
fgenesis
yeah i mean that, it totally definitely should not :D

1600805862
ikskuh
except that initializing the ringbuffer may fail

1600805933
fgenesis
win10 apparently has an API that doesn't fail, and via NT api directly one can also do this

1600805940
fgenesis
see comments in ryg blog

1600806023
ikskuh
hmm

1600806024
ikskuh
interesting

1600806037
fgenesis
re: api, i'm thinking of exposing something like this:

1600806056
fgenesis
and that only works with a pointer spanning twin pages to two separate calls

1600806083
fgenesis
so the two steps would be a valid fallback if the more efficient thing isn't available

1600806124
fgenesis
because cmon, read() does a memcpy which could be avoided

1600806134
ikskuh
:D

1600806150
ikskuh
you mean: just do "getReadSlice()" and let the syscall write directly to the buffer? :D

1600806162
companion_cube
pretty cool post fgenesis, anyway

1600806164
companion_cube
thanks for sharing

1600806172
fgenesis
i still want to code an lz secompressor that does this, deliver pointers directly into the decomp window

1600806178
fgenesis
*decompressor

1600806236
fgenesis
i do consider the buffer-centric-io post a milestone because ti solves all of the problems with 'fread() reported eof but i forgot to check it'-style code

1600806261
fgenesis
and fits well into the zig mentality so.. why not

1600806292
andrewrk
welcome alexnask[m] to the core zig team!

1600806294
andrewrk


1600806312
aldessa
congrats

1600806323
BaroqueLarouche
oh yeah! A good pick :)

1600806328
ikskuh
whoooo! \o/

1600806381
leeward
Woot, congrats

1600806382
alexnask[m]
Thanks :)

1600806631
aldessa
So I was reading the Zig documentation and am confused. What does [_] mean?

1600806666
alexnask[m]
The underscore in this context means the length of the array will be deduced from the initialization list

1600806684
ikskuh
aldessa: [_]T { … } is a array (like [_]i32{2,3}) where the size is inferred by the number of elements

1600806708
fgenesis
so no [] like in C

1600806713
aldessa
i don't know C

1600806738
ikskuh
fgenesis: C arrays are shit from front till back :D

1600806744
fgenesis
and here i thought everyone came here because they are fed up with C/C++ :D

1600806754
aldessa
i only know OCaml and some Haskell

1600806760
fgenesis
i'm sorry

1600806779
andrewrk
I love that people are using zig to learn low level programming instead of C :)

1600806782
aldessa
i'm trying to avoid learning C++ if i can avoid it haha

1600806788
ikskuh
fgenesis: no, zig community is actually wonderfully diverse

1600806792
ikskuh
a lot of JS people are here as well

1600806799
fgenesis
aldessa: good choice. it was good but then the standards committee started ADDING to it

1600806809
fgenesis
and they never stooop

1600806868
fgenesis
ikskuh: and nobody suggested adding a GC yet, for good measure?

1600806876
ikskuh
we have a GC in zig :D

1600806882
andrewrk
we do?

1600806886
ikskuh


1600806886
ikskuh
:D

1600806888
fgenesis
then i'm behind

1600806888
alexnask[m]
Someone should do a compiler for a really stripped down version of C++

1600806892
aldessa
doesn't LLVM have a GC?

1600806898
ikskuh
it's a user space library (obviously)

1600806904
ikskuh
the same as we have a borrow checker in zig D

1600806934
andrewrk
is that the "conservative" strategy? that's unsound in general but especially in zig when

1600806976
alexnask[m]
I think Spex was also doing some GC proof of concept, let me find it

1600806982
fgenesis
wait what, a borrow checker that's an external lib and not a langauge feature? how is that even possible

1600806994
fgenesis
(and if so, sign me up, scotty)

1600807033
alexnask[m]
This is the borrow checker: <

1600807051
ikskuh
we also have traits/interfaces as a library :D

1600807067
ikskuh
usp of zig: "we don't need that language feature, we have a library for that"

1600807074
alexnask[m]
Its more of a proof of concept, its based on capturing a comptime var and forcing comptime functions to be called with anonymous structs

1600807090
alexnask[m]
(to get around the caching)

1600807145
andrewrk
oh it's not the conservative stack based thing? interesting

1600807201
ikskuh
andrewrk: how strong are you opposed to allow .decls in @Type(.Struct)?

1600807208
ikskuh
*strongly

1600807247
andrewrk
it's still open for consideration

1600807257
ikskuh
oh, nice

1600807264
ikskuh
because alexnask[m] and i found a nice argument for it:

1600807273
ikskuh
not requiring "*vtable Struct"

1600807279
andrewrk
would be open to have a serious discussion about it after I get 6250 off my mind, maybe we can come to a conclusion (accepted or closed) before 0.7.0

1600807291
ikskuh
okay, sure :)

1600807297
ikskuh
spoiler: interface.zig could be improved further to allow this:

1600807313
ikskuh
hrhr

1600807315
ikskuh
const ptr = IType.init(foobar);

1600807320
ikskuh
ptr.method(some);

1600807323
ikskuh
instead of

1600807328
ikskuh
ptr.call("method", .{some});

1600807362
ikskuh
fgenesis: *psst*, i'm waiting for the issue counter to bump up to 6501… :D

1600807372
fgenesis
hrhr

1600807674
ikskuh
this is gonna be fun

1600808457
aldessa
I'm reading the documentation and think some of it is a bit strange?

1600808516
aldessa
a lot of it is just code, for example rather than writing 2^29, it says 1 << 29 and some sections are just programs with comments

1600808538
ikskuh
aldessa: documentation is very WIP

1600808693
aldessa
i might make a pull request for the multidimensional arrays, it uses a square matrix so you can't tell the order of the dimensions

1600808736
aldessa
it makes sense to be [m][n] rows x columns like maths but i had to compile to figure out since in maths you write R^m x n instead of m x n R

1600808797
aldessa
anyhow good night

1600808806
aldessa
cool project

1600811773
justin_smith
fgenesis: that usage of a ring buffer (using it for arbitrary sized chunks of data that might wrap around the end) is a special use case I'm not relying on for my channel impl, that's a very clever solution though

1600811849
fgenesis
23:05 < aldessa> it makes sense to be [m][n] rows x columns like maths

1600811858
fgenesis
for the record, math notation is wrong! :D

1600811898
fgenesis
nobody in their right mind would address something as (y, x)

1600812579
pixelherodev
alexnask[m]: congrats!

1600812605
alexnask[m]
ty :)

