1590797390
frmdstryr
Is there a ring buffer / circular queue anywhere in the std lib?

1590797396
daurnimator
std.LinearFifo

1590797841
frmdstryr
That should work, thanks!

1590800254
pixelherodev
LinearFifo = :)

1590800387
pixelherodev
Is there a way to check `if (@TypeOf(val) == tuple`?

1590802989
leeward
whee, fixing comments and examples

1590803000
leeward
and writing the world's worst program

1590803037
leeward
ported

1590803266
pixelherodev
leeward: pycrash?

1590803310
leeward
Yeah, it looks like a Python interpreter, but gives a SyntaxError for everything you do.

1590803331
fengb
Ah... like a modern ed

1590803347
leeward
A terrible program, with no value to anyone, and for some reason it now has a Zig version.

1590803360
pixelherodev
So... a fake Zig compiler?

1590803365
leeward
Well, I know the reason. It's so I can easily build for MacOS and Windows.

1590803369
pixelherodev
Or you ported the Python fake

1590803370
leeward
No, it's still a fake Python compiler.

1590803373
pixelherodev
lol

1590803375
leeward
er, interpreter

1590803375
pixelherodev
nice

1590803419
leeward
I put it on a coworker's computer on April 1st of last year. It was a pretty good day.

1590803527
pixelherodev
lol

1590803528
pixelherodev
nice

1590803532
pixelherodev
I love it

1590803534
pixelherodev
link me?

1590803546
leeward
To what?

1590803556
leeward
You want the Zig implementation?

1590803756
pixelherodev
Yeah :P

1590803769
pixelherodev
"Here, I made a smaller Python implementation; enjoy!"

1590803788
pixelherodev
"It's a static windows build with all of the standard libraries embedded in a compressed form!"

1590803794
leeward


1590803829
leeward
That's what it looks like at the moment. I wouldn't call it good, but it mostly works.

1590803906
leeward
cPython: 5.3M. My Python: 412k

1590803926
pixelherodev
Haha

1590803928
pixelherodev
I love it

1590804187
leeward
Hmm, on a mac I get "Spmbol not found: __tlv_bootstrap"

1590804192
leeward
er, symbol

1590804220
pixelherodev
I'm totally posting that around now ;)

1590804234
leeward
hah

1590804547
leeward
oh, looks like I ran into 5067

1590804548
leeward
cool

1590804639
pixelherodev
Yay, bugs

1590804730
pixelherodev
size is down to 200k with --release-smal

1590804733
pixelherodev
:)

1590812203
marler8997
how would I convert an int to an enum, but detect if it is not a valid value of that enum and take a different codepath?

1590812218
pixelherodev
hmm... good question

1590812235
pixelherodev
You really just need a way to check `if (int_valid_enum_value)`

1590812241
pixelherodev
Did you check std.meta?

1590812248
marler8997
no, I'll check

1590812249
pixelherodev
That's where I'd expect such a function to be

1590812299
aerona
there's intToEnum in std.meta

1590812329
marler8997
ah yes, that works

1590812351
pixelherodev
Yeah, that's it

1590812371
pixelherodev
You'd want something like `if (std.meta.intToEnum(T, val)) |e| { } else {}`

1590823194
greenfork
how do I check if computation is during runtime or comptime? e.g. when is this executed: "GET".len

1590824057
daurnimator
greenfork: unless you have a `comptime` in front, you don't know

1590824116
greenfork
okay, thanks

1590833999
pixelherodev
Valuable lesson learned today: if the path changes, zig-cache needs to be wiped

1590834009
pixelherodev
`could not find build.zig: /old/path/build.zig not found`

1590834017
pixelherodev
Rather

1590834029
pixelherodev
`unable to open /old/path/build.zig : file not found`

1590836698
ikskuh
yep

1590844849
frmdstryr
pixelherodev:

1590853092
Aransentin
Is it just me or is latest Zig release broken wrt. `io_mode = .evented;`? `zig run test.zig` on this simple file fails with "Instruction does not dominate all uses!":

1590856934
andrewrk
ah, I've been meaning to set up CI test coverage for evented I/O

1590857862
blueberrypie
is the zig meetup is happening in an hour right?

1590858142
andrewrk
yes

1590858284
andrewrk


1590859519
wilsonk
andrewrk: update for you and any others that were asking the other day. I have added a new store for merchandise with the new logo designs (as well as new zero, ziggy and a few zigfast items  <<-- ifreund). Check the new link at the

1590859537
fengb
Awesome ðŸ¥³

1590859571
andrewrk
thank you wilsonk! it's been really nice having you manage the store so that I can focus on other things <3

1590859591
alexnask
wilsonk, tyty

1590859592
wilsonk
no problems

1590859719
ifreund
wilsonk: this is awesome, thank you!

1590859771
wilsonk
my daughter (who actually did all the changes to earn a few bucks from me since she lost her job in this climate) thinks that zigfast is her spirit animal  :)   I will probably order a sample of one zigfast item for her to see how it looks.

1590860556
andrewrk
haha I love that zigfast made it in there

1590860608
marler8997
I'd like to be able to use std.fs.path.join to create a pathname that needs to be available at comptime

1590860643
marler8997
I wrote my own that puts "comptime" as a parameter modifier on the "paths" array, but that means it can't be used at runtime

1590860653
marler8997
And the one in std.fs.path requires an allocator

1590860670
marler8997
I wonder if we could make join work at compile-time by having some sort of comptime allocator?

1590860713
marler8997
@ctAllocator() or something

1590860832
marler8997
or better yet, just create the allocator primitives such as @comptimeRealloc(..) and @comptimeShrink(...), then we can create an Allocator type that calls them, so then the details of mem.Allocator don't get into the language

1590861222
squeek502
@marler8997,

1590861295
andrewrk
marler8997, you can use a ++ fs.path.sep_str ++ b

1590861311
andrewrk
it's pretty cumbersome but you could possibly create a helper function or alias or something

1590861317
marler8997
right, but I want to use the standard library implementation instead of my own

1590861351
marler8997


1590861415
marler8997
this comment looks eerily similar to what I just described :)

1590861655
squeek502
zig virtual meetup starting soon:

1590861710
andrewrk
it's starting now

1590863426
andrewrk
kristoff_it, Q for fengb: What's the #1 issue in Zig that you would like to see addressed which would help FUN+DUDE?

1590863451
dimenus
how would i iterate over std.builtin.StructFields at runtime?

1590863478
andrewrk
dimenus, you would create an array at comptime, then iterate over that array at runtime

1590863515
alexnask
StructField is a comptime only type though I believe

1590863537
dimenus
yeah that's my challenge here, basically i'm trying to debug offset issues

1590863551
dimenus
the goal is to just print out all of the struct fields and their offsets

1590863662
alexnask
If you only want to print stuff you should be able to `inline for` over the fields and do your `std.debug.warn`s in there

1590863734
dimenus
alexnask: inline for works, thanks for the tip

1590863895
dimenus
also i'm not sure i know how to create an array at comptime yet

1590864050
alexnask
dimenus, `const array = [_]T { T{...}, T{...}, T{...} };` this is comptime if all the things inside are comptime

1590864164
dimenus
alexnask: i should clarify, i'm not quite sure what Andrew is referring to. How would i create a comptime array of something the compiler hasn't figured out yet?

1590864397
greenfork
how do I convert `*[8000]u8` to `*[]const u8`? I've read that it's possible to convert `var` type to `const` and tried `@as` with no success

1590864452
BaroqueLarouche
greenfork:  does `my_array[0..]` does the trick ?

1590864492
greenfork
BaroqueLarouche: no, it still complains

1590864496
andrewrk
dimenus, const foo = comptime blk: { ...; break :blk foo};

1590864520
andrewrk
greenfork, are you sure you want `*[]const u8`? that's a double pointer

1590864538
dimenus
andrewrk: thanks

1590864554
andrewrk
you can already coerce *[8000]u8 to []const u8, without any casting builtins

1590864572
greenfork
expected type '*std.io.fixed_buffer_stream.FixedBufferStream([]const u8)', found 'std.io.fixed_buffer_stream.FixedBufferStream([]u8)'

1590864597
greenfork
when I try to construct this fixed buffer with an array type it complains that the type is not correct

1590864613
greenfork
this error comes from a function where I require this buffer to be of u8 type

1590864654
greenfork
I should probably make a code snippet

1590864665
alexnask
That would be helpful :)

1590864817
fengb
greenfork: it's because you're trying to pass a const slice into a mutable one

1590864893
greenfork
fengb: I've also tried the other way around, I will make a correct snippet :)

1590866112
dimenus
comptime is so awesome, i'm glad stuff like this works:

1590866134
dimenus
a generic function for pulling objects off the wire and byte swapping specific fields

1590868075
karrick
@kristoff_it Awesome show!

1590868106
fengb
+1

1590868133
greenfork
yeah, thanks!

1590868164
karrick
Yeah, and the speakers, thank you so much for putting yourselves in the spotlight!

1590868173
karrick
You guys inspire me to start doing something Zig

1590868209
pixelherodev
I haven't seen it yes, but I'm sure you all did a great job!

1590868212
pixelherodev
yet*

1590868213
karrick
I want to get river running on my box now.

1590868318
ikskuh
ifreund: nice talk!

1590868387
ifreund
ikskuh: thanks!

1590868405
ifreund
karrick: if you run into any issues let me know :)

1590869862
kristoff_it
karrick: thanks!

1590871029
Aransentin
Here's an optimization for ArenaAllocator that somebody more skilled than me might want to implement:

1590871031
Aransentin
As it is, when running ArenaAllocator over page_allocator it initially very wastefully creates memory areas smaller than the page size; i.e. the OS returns a full 4KiB page but it only uses the first few bytes, and when those are used up it requestsan entirely new page.

1590871111
Aransentin
Maybe if ArenaAllocator can "know" that it's running over page_allocator you can add a special case for it

1590871191
fengb
Thereâ€™s an issue to allow for in place resizing

1590871222
fengb
So once thatâ€™s done, the first expand will just resize into the page

1590871239
Aransentin
Ah, that'd solve it, yes

1590871903
pixelherodev
You could also do e.g. arena over FBA over page allocator

1590871921
pixelherodev
Or a custom FBA-like that grows when it runs out of space

1590874976
data-man
Hello everyone! Is there any Sublime Text users?

1590874990
pixelherodev
probably

1590875021
data-man


1590875573
ikskuh
hmm

1590875611
ikskuh
does anyone else also see the need for a library that wraps all primitive types with operators into a struct that provides functions like add, sub, wrappingAdd, mulWithOverflow, ...?

1590875893
gonz_
Heh

1590875928
ikskuh
it would be a good base for arithmetic-type-agnostic libraries

1590875931
gonz_
Someone flamebaited r/haskell with a video where andrewrk said you can't write perfect software in lots of languages, Haskell included.

1590875985
pixelherodev
Nah

1590876001
pixelherodev
I mean, I don't see the need for such a library

1590876015
pixelherodev
That just seems like unnecessary abstraction to me

1590876035
ikskuh
pixelherodev:

1590876058
ikskuh
then tell me how i should write a type-agnostic library eg for linear algebra

1590876074
ikskuh
i have actual use case for that and i don't want to write the library twice

1590876082
ikskuh
once for custom types, once for builtin types

1590876083
alexnask
gonz_, lol that sounds hilarious, link? :D

1590876089
gonz_
ikskuh: If I need this my go-to way is to have a function that generates an interface from a specification given to it, matching the types I want to use.

1590876109
gonz_
You can generate it at comptime and it'll be normal calls

1590876109
ikskuh
so the only way i can see that working without operator overloading is inversing the process

1590876121
alexnask
nvm Ill go get it myself and stop being lazy >.>

1590876122
pixelherodev
ikskuh: what's the use case for built-in types?

1590876126
pixelherodev
s/built-in/custom

1590876129
pixelherodev
Sorry

1590876131
pixelherodev
brainfart

1590876136
ikskuh
fixed-point arith or similar

1590876146
ikskuh
i use them a lot on embedded HW instead of fp32

1590876175
pixelherodev
Maybe try to get fixed point into the language, instead?

1590876184
ikskuh
and every other custom-arithmetic type?

1590876191
pixelherodev
Such as?

1590876208
gonz_
ikskuh:

1590876210
pixelherodev
The problem with custom types in such a scenario is you can't guarantee their behavior

1590876226
pixelherodev
What if add() behaves differently from what you expect?

1590876228
ikskuh
pixelherodev: see here

1590876253
ikskuh
this is a type i may want to use in my next embedded demo

1590876299
ikskuh
gonz_: yeah, that still doesn't change the fact that one has to write such a wrapper for primitive types

1590876309
jamii
Does anyone know how to pass '-fsanitize=fuzzer' to clang?

1590876327
gonz_
You can provide the interfaces for the types you can think of, people have the opportunity to rewrite them and provide the ones you don't

1590876363
jamii
I tried `-mllvm -fsanitize=fuzzer` but it gives me `Unknown command line argument '-fsanitize=fuzzer'.  Try: 'zig (LLVM option parsing) --help'`

1590876380
ikskuh
problem with the function pointer struct is probably that you cannot force-inline the functions?

1590876394
gonz_
I dunno, it doesn't seem reasonable to me to expect code generic over everything without the work being done somewhere, and the caller will always know more than you do about what's good anyway.

1590876402
pixelherodev
Inttteresting

1590876404
gonz_
So the caller is the person most qualified to supply the actual difference.

1590876436
gonz_
`comptime` ensures that it's a call like any other, at the very least.

1590876436
ikskuh
gonz_: i'm only taking about arithmetic types atm

1590876438
alexnask
Its passed as comptime everywhere so it should be inlinable

1590876440
gonz_
As in  a fastcall

1590876465
gonz_
I checked the assembly for this program to ensure it

1590876487
gonz_
What you get is the same code you would as if it was written with whatever your type T was from the beginning

1590876491
alexnask
You can even use .always_inline with comptime fn type values

1590876497
ikskuh
ah right

1590876531
gonz_
There were issues with error sets, though.

1590876536
ikskuh
no problem in my case

1590876538
gonz_
it  couldn't infer them, etc., so I ended up having to nail them down

1590876578
gonz_
If you had a bigger set of operations AFAIK you could extend this to return an interface as well

1590876602
gonz_
Though I'm not sure how much I'd use that.

1590876602
ikskuh
i can send you the list of the operations, if you want :D

1590876616
ikskuh


1590876624
ikskuh
everything in here is of interest as long as it's arithmetic

1590876673
ikskuh
no "++", "**", "orelse", ".*", ".?", "and", "or", "!", "catch", "||"

1590876681
ikskuh
rest is in scope of the thing i'm thinking about

1590876730
gonz_
I guess the time is ripe for experimentation. Whatever you try out and how it looks, highlight me when you've checked it out.

1590876913
gonz_
I will always be a bit curious how people end up approaching generic code in Zig because the user base is likely very diverse in terms of languages used before.

1590876964
gonz_
I ended up doing this because it's basically first class modules from OCaml, or exactly what the Haskell compiler does when it passes type class dictionaries into generic functions with constraints/type classes.

1590877007
gonz_
`add :: Num a => a -> a -> a` will in reality be a function that takes a `Num` dictionary of numeric functions as a first argument, then the rest.

1590877028
gonz_
This all gets magically and massively inlined

1590877118
gonz_


1590877505
ikskuh
gonz_: basic idea was pretty much this:

1590878190
hspak
Is there a way to force a `defer` to trigger at the end of the function instead of at the end of the block if it was called inside a while loop for instance?

1590878397
ikskuh
no

1590882338
gonz_
ikskuh: How does the call-site and function look?

1590882376
gonz_
s/function/function using this

