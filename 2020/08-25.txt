1598326460
adamkowalski
What happened to the LeakCheckAllocator that was in std.testing?

1598326522
adamkowalski
Looks like it got replaced by the general purpose allocator?

1598326865
adamkowalski
is the new pattern for testing allocator essentially

1598326874
adamkowalski
var allocator = std.testing.allocator;

1598326885
adamkowalski
defer std.testing.expect(allocator.deinit());

1598327368
fengb
I thought the test runner automatically hooked up the expectation

1598327685
andrewrk
that's right, no need for that defer

1598327717
andrewrk
the pattern is the same, you shouldn't really have noticed that the underlying implementation changed unless you were inspecting the type

1598332086
adamkowalski
GeneralPurposeAllocator is amazing

1598332108
adamkowalski
It's a great improvement over LeakCheckAllocator! I just tried it out and it even shows you which line the leak occurs on

1598332229
adamkowalski
the memory leaks just melt away, it literarly took 3 seconds to get rid of them

1598332295
andrewrk
adamkowalski, just wait until you see a double-free :)

1598332386
adamkowalski
Awesome! Yeah combined with test driven development it is almost too easy haha

1598336720
bgiannan
zig is trending on github :)

1598336969
andrewrk
neat

1598343862
gonz_
A while ago I posted an example of writing some Zig code by voice. I've since changed how to write the Zig code a bit as well as fixed some performance issues I had (in general). Here is a more representative video:

1598343936
daurnimator
gonz_: cool :)

1598344195
Nypsie[m]
Really cool!

1598351929
ikskuh
daurnimator, andrewrk: is there already an issue for zig not being able to use relative paths prefixed with .\ or ..\ on windows?

1598352002
daurnimator
ikskuh: yes

1598352049
daurnimator
ikskuh: it goes back to the fact that on windows, `.` is a valid filename.

1598352054
daurnimator
(as is `..`)

1598352156
ikskuh
huh okay

1598352169
ikskuh
how should i reference the upper directory then? :D

1598352214
daurnimator
that's a great question. I don't know why I don't know the ansert.

1598352218
daurnimator
*answer

1598352242
ikskuh
so i'm able to

1598352248
daurnimator
yup

1598352258
ikskuh
the heck.

1598352273
daurnimator
the only character not allowed in windows file names is \

1598352280
daurnimator
and yes.... null bytes are valid in windows file names

1598352358
daurnimator
(though null bytes are at least banned by the ntfs driver.... so they only come up in uncommon or virtual file systems)

1598352484
daurnimator
I suspect that the answer is something terrible like "get the path to the current directory; trim off the final component; open that"

1598352669
daurnimator
hmmmm.. though that wouldn't work with hard links

1598353056
daurnimator
nevermind. windows is indeed that stupid.

1598353076
daurnimator
and infact that explains some things

1598354480
cren
hey, is there something like a list of all the existing non-trivial programs that people have written with zig?

1598355415
Nypsie[m]
Not nearly complete but there's:

1598356342
ifreund
the #zig tag on github turns up a fair bit of stuff, most of it is on that list though

1598356367
ifreund
misses zig stuff on sr.ht and others though of course

1598356370
Nypsie[m]
^ ooooh that's a good one, didn't even think of that

1598356657
Cadey
how do you unwrap an optional?

1598356697
Nypsie[m]
if (optional) |capture| { doSomethingWithIt(capture) }

1598356733
Nypsie[m]
Some more information available at:

1598356781
Cadey
is there a way to do it without creating a scope pyramid?

1598356818
Nypsie[m]
const x = optional orelse default_value or const x = optional orelse return error.my_error;

1598356851
Nypsie[m]
If you're sure it won't be null at that point, you can simply use const x = optional.?;

1598357268
josias
Does that invoke undefined behavior if it's actually null?

1598357401
Nypsie[m]
I believe it's a runtime check. No idea about release-fast

1598357424
Nypsie[m]
Ah it is UB

1598357440
Nypsie[m]
Apparently .? is equivalent of `orelse unreachable`

1598357486
Nypsie[m]
On debug it's definitely safety checked, tho

1598363441
Piraty
is it just me or does `zig | less` behave unexpected (wrong)?

1598363522
ifreund
Piraty: seems to happen for me as well, that's odd

1598363724
traviss
does `zig |& less` work?

1598363748
josias
Yes.

1598363751
ifreund
indeed

1598363767
traviss
stderr vs stdout

1598363791
Piraty
yes. why would it emit to stdout though

1598363805
Piraty
appears unintuitive

1598363816
ikskuh
i think it's reasonable

1598363823
ifreund
it only prints to stdout if you pass --help

1598363824
ikskuh
"zig targets" outputs to stdout

1598363845
ikskuh
calling "zig" without arguments is an error, the help output is thus an error message informing you about correct usage

1598363855
ikskuh
whereas "zig --help" is requesting that help message as output

1598363972
Piraty
i understand, yet i disagree :)

1598364004
Piraty
zig compiler is enforching spaces over tabs? come on

1598364004
Piraty
./src/main.zig:6:1: error: invalid character: '\t'

1598364027
ifreund
only stage 1 does that

1598364039
ifreund
stage 2 doesn't care what you use

1598364070
Piraty
why would it ever.

1598364085
Piraty
seems i should work on Void's zig template

1598364115
ifreund
what's wrong with the template?

1598364156
Piraty
it produces the stage1 compiler i assume?

1598364177
Piraty
since i'm using that one

1598364179
ifreund
yeah, we aren't shipping stage2 yet as it's not feature complete

1598364221
Piraty
in the end it needs a process like go has, keep an old bootstrap compiler and build the actual one with that

1598364230
Piraty
great. so i'm bound to spaces here.

1598364231
ifreund
that's the plan

1598364255
ifreund
`zig fmt` will convert to spaces for you :P

1598364286
Piraty
`zig fmt && zig build run` then...

1598364308
Piraty
ok found zig vim conf

1598364323
ifreund
with regards to bootstrapping, one possible path is to use the C backend of the self hosted compiler to transpile stage2 to C and then clean that up

1598364414
ikskuh
<Piraty> zig compiler is enforching spaces over tabs? come on

1598364434
ikskuh
there's a explanation on github. a tl;dr: it's enforced policy atm to prevent bike shedding about tabs vs. spaces

1598364434
ifreund
if you're curious you can read this comment:

1598364457
ifreund
whether it's been worth it or not is debateable :P

1598367377
cr1901_modern
Which profile is build.zig built with by default?

1598367657
ifreund
the build.zig file itself or the project it builds?

1598367699
ifreund
the build.zig file is built in debug mode (this is hardcoded in the zig compiler)

1598367781
ifreund
your project is built in whatever mode you choose the default to be, though this is also debug if you use Builder.standardReleaseOptions()

1598368842
cr1901_modern
I meant the build.zig file

1598368854
cr1901_modern
Is it considered a bug if something in debug mode segfaults?

1598368902
cr1901_modern
Asking for me, who wrote a crappy build.zig a few days ago that segfaulted during a use-after-free

1598370143
Piraty
u40? lol

1598370718
ifreund
sometimes it's what makes sense semantically :P

1598387352
Cadey
how do you make a zig build quiet?

1598387620
pixelherodev
2>/dev/null ?

1598387623
ikskuh
zig build is quite quiet on my machine :D

1598387626
ikskuh
when nothing fails

1598387650
ikskuh
ah wait

1598387654
ikskuh
there's some build messages

1598387659
Cadey


1598387673
Cadey
i get stuff like this in CI

1598388129
ikskuh
oh :D

1598389523
alexnask[m]
Cadey IdrA? I hope it doesnt just insult the users and ragequit : D

1598389747
andrewrk
Cadey, the CI environment is incorrectly telling zig that it is a terminal

1598389810
andrewrk
Cadey, you can override the detection by setting the environment variable TERM=dumb

1598390142
companion_cube
does CI not do that? :/

1598392052
Biolunar
alexnask[m]: I got that reference :D

1598393757
andrewrk
it would be nice if there was some more foolproof way to detect if the controlling terminal supports escape sequences

1598394065
andrewrk
roll call, do we have anyone here who can run a simple test on each of these macos versions? 10.14 (mojave), 11.0 (big sur)

1598394069
andrewrk
(I have catalina so I can do that one)

1598396189
leeward
upgraded the only mac in the house to catalina last week :/

1598396214
fengb
I have a Mojave box

1598396219
fengb
Woefully underpowered

1598396261
andrewrk
perfect

1598396310
andrewrk
I suspect kubkon will have a little test script for you to run within a day or two. it just needs to check the return vaule of NSGetRunTimeLibraryVersion or something like that

1598397998
torque
technically speaking big sur is also 10.16

1598398021
torque
at least so far they're only calling it 11.0 on apple silicon

1598398820
andrewrk
oh my god they're not consistent with it? what a nightmare

1598398843
fengb
AFAIK it allows both depending on context

1598398845
shakesoda
it's 10.16 for compat on x64

1598398863
shakesoda
so that's also true in rosetta, just not when you build for arm

1598398884
shakesoda
i think it might also always report 11 when you directly target the big sur sdk

