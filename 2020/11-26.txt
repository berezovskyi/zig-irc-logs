1606348845
pixelherodev
Isn't the shipped binary a hybrid?

1606348866
pixelherodev
But yeah, it'd be much more limited

1606348888
pixelherodev
I've been focusing on CBE structure, not extensive support, so even e.g. int64 won't translate :

1606348890
pixelherodev
P

1606348891
andrewrk
it wouldn't cover the use case at all because the old use case is stage1 only and the emit h code is stage2 only

1606348899
andrewrk
there is not even a venn diagram of overlapping cases

1606348907
g-w1
does it only have support for what the frontend of stage2 can handle?

1606348914
andrewrk
yeah

1606348916
pixelherodev
g-w1: that, and what the CBE backend can handle

1606348920
pixelherodev
So it's far more limited

1606348932
pixelherodev
andrewrk: it'd work for simple enough cases, wouldn't it?

1606348945
pixelherodev
I mean, we could integrate it with the stage12-hybrid binary

1606348957
pixelherodev
Restore it to the Zig build system, at the least

1606348966
pixelherodev
... ohhh right, we should test if it works with ZBS before merge

1606348966
ericonr
andrewrk: hi!

1606348974
pixelherodev
ericonr: hey, I know you! Hello!

1606348983
ericonr
pixelherodev: hai!

1606348992
marler8997
who dat?

1606349004
marler8997
who der?

1606349009
pixelherodev
you're in oasis, right?

1606349024
pixelherodev
yeah

1606349037
ericonr
I am in multiple places

1606349104
andrewrk
oh hi ericonr :)

1606349146
ericonr
andrewrk: if you want a backtrace, I can get you that for free

1606349190
andrewrk
sure, that would be helpful. here's the latest binary:

1606349228
andrewrk
the source is

1606349629
ericonr
andrewrk: I might be missing musl debug symbols

1606349675
pixelherodev
ericonr: that's where I remember your name the most, since there's so few people there :P

1606349690
ericonr
pixelherodev: fair enough :)

1606349724
ericonr
andrewrk: ok, do you know how to make gdb point at libc.so debug symbols when it just exec'd into ld-musl?

1606349750
andrewrk
I think the "file" command

1606350020
ericonr
well, might be best if you can get a system to run this on yourself

1606350027
ericonr
I'm thouroughly lost

1606350051
ericonr
I'm breaking on std.os.execveZ

1606350062
ericonr
if I run `next`, it already segfaults

1606350085
andrewrk
I think if you do `file` after the segfault, it will make the backtrace sensible

1606350090
ericonr
if I try to `si`, it gets to the syscall, on the following `si` it segfaults again

1606350094
ericonr
ok

1606350114
ericonr
no help :/

1606350116
andrewrk
another thing you can do is to gdb on the dynamic linker path and then `run ./static-window6` - that skips the first execve

1606350119
ericonr
i only have two functions

1606350138
ericonr
strrchr (s=0x0, c=0x2f) -> strlen (s=s@entry=0x0)

1606350142
ericonr
strlen is where it die

1606350144
ericonr
...s

1606350155
andrewrk
I'm installing void linux on my spare laptop right now

1606350299
ericonr
ok

1606350304
ericonr
it gets all the way to strrchr(s=0x7ffff6cfa560 "/lib/libVkLayer_MESA_device_select.so", c=0x2f)

1606350312
ericonr
which is part of the dlopen sequence

1606350333
ericonr
the next strrchr is with s=0

1606350419
KIMI
marler8997 thanks!

1606350453
andrewrk
ericonr, next question: what does vkcube do on that same machine?

1606350532
ericonr
it works

1606350560
ericonr
andrewrk: your debug lines say you don't think you're running in the dynamic linker

1606350561
andrewrk
ok great, so the task is to figure out what is the difference

1606350579
andrewrk
that should happen at first and then the execve happens, then it should say "got dlopen"

1606350581
ericonr
when I launch as lib/libc.so static-window6

1606350585
ericonr
^^

1606350593
ericonr
I don't think it should happen in that case, should it?

1606350599
ericonr
unless I'm missing something

1606350602
andrewrk
you need LD_PRELOAD=libdl.so.2 in this case

1606350608
ericonr
ok

1606350614
ericonr
but

1606350619
andrewrk


1606350620
ericonr
musl doesn't have llibdl

1606350623
ericonr
libdl

1606350637
ericonr
it's an empty archive, only for compatibility at compile time

1606350652
ericonr
is that ok?

1606350660
andrewrk
can I see the full stderr?

1606350708
ericonr
running with LD_PRELOAD made it work, at least

1606350718
andrewrk
ok yeah that's what the binary does before execve

1606350728
ericonr
not work, but it doesn't try to reexec itself

1606350944
andrewrk
damn the void linux .iso doesn't support my wifi driver out of the box

1606350946
ericonr
welp, my video driver just crashed itself

1606350953
ericonr
shouldn't be your fault tho

1606350962
andrewrk
cool cool this is fine

1606351066
andrewrk
hmm I don't know how I can test this

1606351200
ericonr
what's your wifi driver?

1606351235
andrewrk
it's an older dell xps laptop - broadcom something

1606351439
ericonr
I guided someone on setting that up recently

1606351445
ericonr
involved a lot of sneaker netting

1606351465
andrewrk
I'm not sure I'm up for that tonight

1606351483
ericonr
yeah, fair enough

1606351507
ericonr
hm

1606351515
ericonr
what dlopen call do you make?

1606351525
ericonr
just libvulkan.so ?

1606351638
andrewrk
there's a project Vulkan-Loader which is patched & statically compiled that has some fancy logic

1606351647
andrewrk


1606351752
ericonr
well if you can get me a C program that tries to do the same calls, I can trace both for you for comparison's sake

1606351826
andrewrk
that is C code

1606351859
andrewrk
oh I see what you're saying. uhh yeah here it is:

1606351864
andrewrk
01 - Triangle

1606351898
ericonr
damn that's huge

1606352043
ericonr
andrewrk: ok, backtrace

1606352165
ericonr
so the dlopen() sequence is succeeding, it's afterwards that's the problem (apparently)

1606352658
pixelherodev
Void in qemu to avoid driver issues?

1606353191
ericonr
then vulkan doesn't work

1606355070
KIMI
anytype will disapear in the future? it is ok if i use that right now?

1606355440
KIMI
also one thing i asked but i didnt get the reply i think, about type inference in struct like .name = "myname" so i don't have to type the array thing all the time

1606355458
KIMI
is it possible?

1606355520
g-w1
in struct definitions, type inference is not possible, but in making structs it is. it would help if you gave a more complete example

1606355567
KIMI
like i have there  glyphs: [MAX_GLYPHS]?*Glyph = [MAX_GLYPHS]?*Glyph{null} ** MAX_GLYPHS,

1606355568
KIMI
xD

1606355593
g-w1
it is not possible to remove the type there.

1606355601
KIMI
is it possible in the future?

1606355667
g-w1
no. it is for the same reason that function arguments can't be inferred (not counting anytype which shouldn't be used for that anyway): it is to make a stable api. when you go to a function or struct definition, you should be able to see the type signature.

1606355714
dominikh
I mean, in that line, the type information

1606355760
dominikh
the right hand side could, if such syntax existed, be written without the array type, and the lhs still explicitly and specifically describes the API

1606355778
dominikh
just like you have .{} for structs

1606355903
KIMI
that would be nice to have less to type

1606356002
g-w1
could you do glyphs: [MAX_GLYPHS]?*Glyph = [_]?*Glyph{null} ** MAX_GLYPHS,?

1606356398
KIMI
it works, but it is still too long in my opiunion

1606356456
KIMI
because the array is typed twice as dominikh said

1606356498
KIMI
in var it is good because i can have type inference, just in struct it is a big too long to type

1606357783
fengb
This might work: `var glyphs = std.mem.zeroes([MAX_GLYPHS]?*Glyph);`

1606357836
KIMI
not in struct

1606357851
KIMI
struct need : TheType

1606357859
KIMI
that is why i asked

1606357895
fengb
Oh yeah, there’s a proposal for using the default to infer the type

1606358535
pixelherodev
Eh, I don't like that

1606358544
pixelherodev
Explicit is almost always better than implicit

1606358883
pixelherodev
Wait, why would I comment on that *here*? :P

1606359336
KIMI
or maybe . {null ** MAX_GLYPH} just like for struct

1606366876
KIMI
how to make printing float? i get line_height: 1.8e+01

1606366908
KIMI
i parsed like this height = std.fmt.parseFloat(f32, value)

1606367368
KIMI
i mean, non scientific notation print float, is it possible?

1606370715
KIMI
zls make life so easier OMG

1606371022
wilsonk
yep

1606378003
segfaults
is there somethign similar to gnu getline() in the zig std library?

1606378444
segfaults
im just trying to read lines from stdin so if anyone has a cool way to do it please do tell!

1606378857
ikskuh
segfaults: interactive or non-interactive lines?

1606378873
ikskuh
std.io.Reader.readUntilDelimiter*() is for reading generic lines :)

1606378938
segfaults
interactive

1606378964
segfaults
working on a shell, just decided to learn zig today and its kinda punching me in the stomach(in a good way) coming from C

1606379258
segfaults
and while i have you here, how would you go about returning a string?

1606379374
segfaults
in a function i mean

1606379806
ikskuh
it depends

1606379819
ikskuh
we have three flavours of such functions:

1606379841
ikskuh
function allocates and returns buffer: "fn(allocator: *std.mem.Allocator, …) ![]const u8"

1606379854
ikskuh
function gets backing storage and returns part:

1606379863
ikskuh
"fn(buffer: []u8, …) []u8"

1606379901
ikskuh
or you take a ArrayList(u8) and resize it to your liking (allows reuse of the buffer)

1606379912
ikskuh
for a getline(), you need to change terminal modes on both linux and windows

1606379985
segfaults
oh? to like raw mode?

1606379989
ikskuh
yeah

1606379994
ikskuh
so you can do improved editing stuff

1606380005
ikskuh
note that on unix, you usually have a cooked tty input already

1606380009
ikskuh
but on windows, you don't

1606380071
segfaults
yeah, i had done it in Go but it didnt let you launch stuff like nano or ncdu, C did but i obviously had to do parent and child stuff

1606380075
ikskuh
the result is that you

1606380104
ikskuh
so basic editing is available on linux already in your TTY

1606380120
ikskuh
so you get the features of "cat" when just using readUntilDelimiter

1606380148
segfaults
what are the delimiters accepter?

1606380172
segfaults
*accepted

1606380196
ikskuh
any byte value

1606380205
ikskuh
so you decide

1606380227
segfaults
gotcha, thank you

1606397861
g-w1
for some reason, the stage2 execution tests are not running when I do `zig build test-stage2` and only run on the ci and so the ci keeps catching stuff like this

1606398057
ifreund
g-w1: maybe try passing -Denable-qemu like the CI?

1606398083
ifreund
otherwise it will only run tests on your native arch

1606398092
g-w1
ok. I am on x64_linux, so I didn't think it would do anything, but maybe it wants to sandbox it?

1606398170
ifreund
might have no effect, just an idea

1606398180
g-w1
ok, Ill try it

1606398631
g-w1
this worked! I guess it wants to sandbox it? tysm

1606398837
ifreund
no problem

1606408310
g-w1
anyone know why its failing now?

1606408609
ikskuh
andrewrk: how's the progress on "mingw by default" on windows?

1606410108
pixelherodev
g-w1: are you sure there are no non-x64 tests?

1606410124
pixelherodev
Yeah, there's ARM tests already :)

1606410136
ifreund
g-w1: that failure is just some connection failure when fetching deps

1606410163
pixelherodev
The SPU-II tests don't need QEMU at least, since they use an interpreter that's part of the test harness :)

1606410250
pixelherodev
Hey lemon!

1606410257
TheLemonMan
turning all the {} into {s} has been a bloodbath (and is still ongoing!)

1606410260
TheLemonMan
ohai

1606410273
filpAM
zig looks good

1606410296
TheLemonMan
it even tastes good

1606410357
pixelherodev
TheLemonMan: would  it have been faster to write a tool using the AST API?

1606410402
pixelherodev
Find all function call arguments which are comptime-known strings, parse and replace, route the output through zig fmt? :P

1606410438
TheLemonMan
if only! I had to audit each callsite to make sure the replacement would work

1606410438
pixelherodev
nif2

1606410446
pixelherodev
... oops

1606410460
pixelherodev
ignore gibberish , sorry

1606410461
TheLemonMan
nice password

1606410480
pixelherodev
lol my passwords aren't four character alphanumerics

1606410492
pixelherodev
*UEi$r1o0]rf0LICcb@=FF)U|BdSPY

1606410498
pixelherodev


1606410514
pixelherodev
Like actually. To a deleted account though :P

1606410616
g-w1
oh, it doesn't run only the x64 tests. ifreund: is there a way to re-run the ci so I can actually see if my code is good?

1606410631
pixelherodev
g-w1: test-stage2 runs all tests it can

1606410674
g-w1
why did it not run the tests for x64_linux if I am on that?

1606410677
pixelherodev
without enable-qemu, that means arch-independent tests (e.g. CBE, ZIR), tests for which it has an in-built interpreter (SPU-II), and anything else depends on enabled tooling (QEMU for alternate architectures, WINE for Windows-on-Linux)

1606410683
pixelherodev
g-w1: it should...

1606410687
pixelherodev
error output?

1606410700
pixelherodev
Are you 100% certain it's an error with x64_linux?

1606410709
pixelherodev
Did you double check it's printing the correct architecture? :P

1606410799
filpAM
TheLemonMan: I would use zig but I'll stay on the safe side and wait until it is "production ready"

1606410830
pixelherodev
filpAM: that's definitely a smart choice

1606410870
g-w1
does it run the check output tests on your linux machine?

1606410876
pixelherodev
I think so?

1606410884
pixelherodev
The linux_x64 ones at least

1606410890
TheLemonMan
filpAM, life is too short to play it safe!

1606410897
pixelherodev
g-w1: check output tests have a specified

1606410908
pixelherodev
If the target isn't the current system, it marks it as a pass for now

1606410917
pixelherodev
we should have a way to indicate it was skipped in the output

1606410929
g-w1
I know, I put mine as this `var case = ctx.exe("comptime type equality", linux_x64);` but it only ran with qemu

1606410930
pixelherodev
retraction:

1606410936
pixelherodev
If the target isn't the current system

1606410954
pixelherodev
^ that's wrong (but I didn't mean to correct it like this, hit enter by mistake :P), it's if it doesn't have a way to run it

1606410963
pixelherodev
g-w1: that's really weird

1606410984
pixelherodev
The way it works, basically, is that if the os matches, and the arch matches, the Executor should be native

1606410989
g-w1
Ill try to get a screenshot composing all the stuff

1606410990
pixelherodev
You're on x64 linux, I assume :P?

1606410995
g-w1
yes

1606411006
pixelherodev
native executor simply causes the file to be run

1606411014
pixelherodev
Are you sure it's not working on your machine but failing in CI?

1606411023
pixelherodev
You're absolutely certain it's actually not running?

1606411057
g-w1
ill check again and post some logs

1606411059
pixelherodev
g-w1: src/test.zig, you can have it print the executor for each case as a test

1606411068
pixelherodev
~line 660 in HEAD

1606411079
g-w1
ok

1606411116
pixelherodev
Above the switch(...getExecutor()), basically just `std.debug.print("Case {}, executor {}\n", .{case.name, ...getExecutor()})`

1606411139
pixelherodev
Alternately, you can set a breakpoint in GDB and watch it

1606411154
pixelherodev
That'll let you trace the output through the code with a proper debugger :)

1606411218
pixelherodev
...I've been spending more time helping people work on zig than actually contributing myself - which isn't a bad thing, but I really want to get more done. Today I'll finally send another CBE patch, even if it's just something small to get me back into it.

1606411634
g-w1


1606411684
g-w1
from what I see, it makes some qemu that can be native

1606411955
g-w1
I think this is a bug in in lib/std/zig/cross_target:630.

1606412307
g-w1
also, it says all 25 tests passed, but it shows 32 tests? this also confused me too

1606413538
pixelherodev
g-w1: test count is very wrong

1606413542
pixelherodev
all stage2 tests count as one test

1606413565
pixelherodev
test count is from the compiler; all the cases are managed by one "test{}" block so Zig thinks it is one test

1606413604
g-w1
ah, do you have any insights as why some tests are wrongly marked as qemu?

1606413701
g-w1
ah, do you have any insights as why some tests are wrongly marked as qemu?

1606413709
g-w1
oops wrong window

1606414167
pixelherodev
g-w1: if you GDB trace, it should be pretty easy to figure out

1606414878
pixelherodev
I'd just > break getExternalExecutor

1606415201
andrewrk
ikskuh, I haven't started yet on mingw-w64 by default for windows - I think that's planned to be part of 0.8.0

1606415223
andrewrk
you can test it out now with -target native-native-gnu

1606415302
ericonr
andrewrk: did you catch the backtrace I sent you?

1606415378
andrewrk
ericonr, ah yes. thanks for sending. I'm working on trying to repro it so I can tinker

1606415396
ericonr
okdo, good luck

1606415645
g-w1
pixelherodev: i found the problem: target.DynamicLinker thinks im using musl so the path is wrong and is screwing stuff up (im not using musl)

1606415648
g-w1
dynamic linker path -> not native -> no run)

1606415702
TheLemonMan
there's no shame in using musl, you can tell us if you do

1606415744
andrewrk
xD

1606415770
TheLemonMan
yo andrewrk, how's your thanksgiving going?

1606415786
ikskuh
<andrewrk> you can test it out now with -target native-native-gnu

1606415788
ikskuh
ah, yeah

1606415790
ikskuh
that works :)

1606415890
andrewrk
I have a couple hours and then gonna take the rest of the day off and hang with Alee

1606415892
ifreund
TheLemonMan: just spent another 20 minutes trying to come up with a test case for that bug you fixed without luck :/

1606415901
andrewrk
I'm gonna try to cook okonomiyaki

1606415905
ikskuh
enjoy your day!

1606415945
ifreund
that doesn't sound very traditional but does sound very tasty

1606415960
TheLemonMan
that doesn't sound very thanksgiving-ey, where's the turkey and gravy and pumpkin pie?

1606415976
TheLemonMan
I'm gonna steal that recipe tho

1606416028
TheLemonMan
ifreund, yeah there's something tricky in how river interacts with zig-wayland...

1606416163
ifreund
I didn't intend for there to be anything tricky about it, just took what seemed to be the path of least resistance

1606416228
ifreund
but yeah it seems like something else in river is putting the compiler in a state that causes this bug to materialize

1606416312
TheLemonMan
have you tried replicating the @import chain? that may help

1606416344
ifreund
I haven't yet, no

1606416363
andrewrk
TheLemonMan, you don't want me to block the merge on the test case do you?

1606416422
TheLemonMan
well, I left a comment for posterity, it should be good to go

1606416423
ifreund
We could add compiling river to the zig CI :P

1606416522
andrewrk
TheLemonMan, is there a missing compile error before return ErrorSemanticAnalyzeFail ?

1606416541
andrewrk
or does that mean a compile error was already emitted if we see a null field type?

1606416564
andrewrk
never mind me, still waking up. this patch is good to go

1606416576
pixelherodev
g-w1: that's weird, but glad you figured it out :)

1606416650
ifreund
andrewrk: any sense of a timeline for 0.7.1? I'm probably going to block merging my dev branch of river on this patch

1606416708
ifreund
no stress of course, I'll start trying to fix things on the milestone if I get impatient

1606416745
andrewrk
I'm not going to put a due date on it, this one will be based on the issues in the milestone

1606416763
andrewrk
quite a few open PRs addressing the issues, I think we're close

1606416796
ifreund
cool, and thanks for all the support getting issues I've dredged up through river fixed :)

1606416801
andrewrk
of course :)

1606416849
TheLemonMan
one thing it'd be nice to fix is the FreeBSD VM, it's now constantly failing :(

1606416881
andrewrk
hmm let me test something

1606416916
andrewrk
damn, I could spend 40 hours/week just keeping the CI passing and helping people get their PRs merged

1606416941
andrewrk
i wanna code too!

1606416969
TheLemonMan
well CI scripts

1606416986
andrewrk
-_-

1606417163
andrewrk
is there a freebsd equivalent of `time -v` that shows the peak rss?

1606417196
andrewrk
oh I can just run bash

1606417564
andrewrk
ok it's `/usr/bin/time -l` on freebsd. anyway, just checked, the std lib tests take peak rss of 6.06 GiB

1606417668
TheLemonMan
is the OOM killer kicking in?

1606417731
TheLemonMan
if that's the problem we may want to split the test suite into smaller chunks

1606418472
andrewrk
Ave is gonna bump up the ram for us

1606418491
andrewrk
I'd rather work on stage2 than fuck around with mitigating this

1606418699
dch
regular reminder that I have freebsd flavoured ram and cpu to help as needed

1606418734
andrewrk
thanks :)

1606418751
dch
an ARMy of cores

1606418934
TheLemonMan
the problem is hooking the extra machines to the github CI

1606419235
ifreund
I wonder if you can self host sourcehut's builds thing easily

1606419282
dch
TheLemonMan: can you config a webhook? If so I can deal with the rest probably

1606419288
andrewrk
dch, yeah if you had source hut running on there I'd be on it in a heart beat

1606419346
dch
mmmmm what does sh need to make a jail look like a qemu instance

1606419376
dch
iirc it just ssh into the vm

1606419467
dch
So is the build triggered from SH or from GH ?

1606419472
ifreund
oh, sourcehut has the github integration in a separate service from the builds

1606419482
ifreund
this is super modular :)

1606419505
TheLemonMan
dch, I guess it's GH that sends a webhook to kickstart the CI runner

1606419516
ifreund


1606419555
TheLemonMan
there's also the GitLab CI runner

1606419825
dch
I have 2/3 of a ci system here already, never finished. I can’t return results to github yet but if you send me a webhook it can kick off a build

1606419852
dch
always other projects just ahead of that one

1606419883
dch
I would need to figure out how to do that last bit

1606420007
TheLemonMan
that's the 20% that takes the 80% of the time :P

1606420055
dch
exactly! anyway if you get me a webhook I have an incentive to finish it

1606420118
andrewrk
TheLemonMan, we have 16 GiB in the freebsd CI runs now

1606420125
andrewrk
so if it is still crashing it is not OOM

1606420132
TheLemonMan
dch, I guess andrewrk is the only one with enough admin power to do so

1606420157
TheLemonMan
andrewrk, good! we'll probably need 16 more by the end of the month :P

1606420169
andrewrk
ha

1606420192
TheLemonMan
dch, you know what would be good? some NetBSD/OpenBSD CI

1606420225
TheLemonMan
right now the latter is tested by pinging an openbsd dev heh

1606420276
TheLemonMan
one could argue that we wouldn't have any of this problems if only BSDs didn't decide to fork again and again heh

1606420409
dch
I could do OpenBSD that’s an option

1606420426
dch
How much ram does a builder need?

1606420452
andrewrk
12 GiB to be safe

1606420459
dch
could only do amd64

1606420483
dch
lol ok I can fit it in then just one less chromium tab

1606420488
andrewrk
I'm personally choosing to work on stage2 rather than address this out of control ram usage of stage1. it won't always be like this

1606420553
dch
our db and scalability testing regularly uses 200+Gb so this will barely be noticed

1606420569
TheLemonMan
the fuck

1606420788
ziguana[m]
i got a couple of extra 16GB sticks just to run IntelliJ and bazel together once

1606420792
ziguana[m]
dev time is the most expensive part of software, and everything's optimized for it

1606420816
ziguana[m]
could be the reason that modern software is...the way it is

1606420863
pixelherodev
Zig is quite possibly the only program in which I tolerate the insane RAM usage

1606420884
pixelherodev
and only because I have full confidence that it's a temporary problem - in part because I'm actively helping to solve it :)

1606420890
Michcioperz
oh that kinda reminds me, is the out-of-control memory usage a recent regression or has been there in 0.6.0 already?

1606420920
pixelherodev
It's been around for a long time

1606420931
pixelherodev
Stage1 was written while the language was evolving

1606420940
pixelherodev
So a lot of the design decisions for the compiler were less than ideal

1606420946
Michcioperz
i tried to build a hello world for cortex-m and spent half an hour begging oom killer to finally let me back into my laptop

1606420966
ziguana[m]
the plan was to translate-zig the stage 1 from stage 2 in the future, right?

1606420966
pixelherodev
That's not an attack - these are hard problems, and they're only made harder when they're being solved one-at-a-time

1606420973
pixelherodev
ziguana[m]: basically, yes

1606420989
pixelherodev
Michcioperz: hello world should not use that much

1606420998
Michcioperz
yeah i'm surprised myself

1606420999
pixelherodev
How much RAM do you have?

1606421003
TheLemonMan
Michcioperz, an hello world shouldn't take that much RAM

1606421004
pixelherodev
That sounds like a separate bug

1606421005
Michcioperz
8 gigs

1606421008
pixelherodev
Yeah no

1606421011
pixelherodev
That's not normal, even for stage1.

1606421017
pixelherodev
That's a separate actual bug

1606421023
Michcioperz
sure, makes sense

1606421031
pixelherodev
can you still reproduce?

1606421039
Michcioperz
was gonna try to get a minimal repro but life's getting in my way

1606421045
pixelherodev
Maybe limit the RAM usage before running it, so it crashes before OOMing? :P

1606421055
Michcioperz
yeah but no matter how much i give it crashes

1606421055
pixelherodev
See e.g. ulimit

1606421066
pixelherodev
yeah

1606421067
pixelherodev
that's bad

1606421081
TheLemonMan
we can have a look even if it's not a minimal repro

1606421100
pixelherodev
^

1606421142
TheLemonMan
there's no outstanding issue that could eat all your ram... unless you tried to use `!noreturn` as a function return type

1606421144
Michcioperz
iirc i just did `export fn _start() noreturn { main() catch unreachable; unreachable; } fn main() !noreturn { while (true) {} }`

1606421147
Michcioperz
hahahaha

1606421154
Michcioperz
so you guessed it

1606421172
Michcioperz
let me check if that helps

1606421181
TheLemonMan
what have I become? a living bug tracker

1606421192
Michcioperz
i could use one at work, a living bug tracker

1606421212
TheLemonMan
I also have a patch for that buuut... iirc I never submitted it because of a flaw in the type system

1606421213
Michcioperz
had a meeting today where we were supposed to discuss something but boss forgot half the things

1606421214
andrewrk
holy crap TheLemonMan that was honestly impressive

1606421222
Michcioperz
+1

1606421256
andrewrk
I'm taking the rest of the day off. take care everyone 👋  I appreciate you all

1606421267
ziguana[m]
o7

1606421269
TheLemonMan
cya!

1606421290
ikskuh
andrewrk, have fun and enjoy your time off!

1606421441
ifreund
happy thanksgiving!

1606421453
Michcioperz
TheLemonMan: removing !noreturn helped, thanks, hahaha

1606421465
pixelherodev
Holy....

1606421470
pixelherodev
andrewrk: have a good one!

1606421473
pixelherodev
TheLemonMan: what

1606421482
Michcioperz
we already discussed that, a living bug tracker

1606421487
ifreund
a lemon :P

1606421493
ikskuh
TheLemonMan is a patch machine

1606421521
TheLemonMan
I don't really like bugs IRL :\

1606421530
Michcioperz
understandable

1606421667
TheLemonMan
a one line patch fixes the !noreturn problem, yay

1606421684
TheLemonMan
I mean, it stops the compiler from eating all your ram

1606421725
fengb
Should !noreturn be allowed?

1606421731
ikskuh
yes, definitly

1606421745
fengb
And what about ?noreturn 🙃

1606421821
TheLemonMan
and what about ¿noreturn

1606421826
Michcioperz
?noreturn sounds kinda cursed and i'm taking a compiler construction class this semester so i'll just sigh

1606421845
earnestly
cursed instructions

1606421867
Michcioperz
kinda glad the class is taught on llvm and x86 and not armv8.3

1606421908
ikskuh
Michcioperz: why does it sound cursed?

1606421912
ikskuh
i think the semantics are pretty clear

1606421914
TheLemonMan
noreturn should be a special type that can be casted into every other type, ?noreturn (iirc) is disallowed

1606421928
Michcioperz
hmm yeah i guess it is not much different from !noreturn

1606421945
Michcioperz
just no clear error value right?

1606421995
TheLemonMan
?noreturn would be like ?void or ?u0, it decays into a boolean flag

1606422027
Michcioperz
hmm, i saw it more like "it returns null or doesn't return" i think?

1606422037
TheLemonMan
but there's an ongoing ticket war about what zero-sized types should do

1606422038
Michcioperz
anyway thanks to y'all i realized i don't need to return !noreturn anyway if i'm on a microcontroller

1606422047
Michcioperz
right i think i remember that war

1606422058
fengb
If bool is 1 bit storing 2 values, and void is 0 bit storing 1 value, noreturn must be -1 bits storing 0 values!

1606422123
TheLemonMan
coincidence?

1606422709
FireFox317
andrewrk, when using an external library (.a file) with zig and then using `-L. and -lfoo` there is currently no caching implemented for this. Do we want this, or should we rather just add the .a file as an input to the zig compiler (i.e. `zig build-exe main.zig libfoo.a -lc`)?

1606422771
FireFox317
Because currently with the `build.zig` APIs you can add an external library by using `linkSystemLibrary` and `addLibPath` however that doesn't cache the libfoo.a file.

1606423477
FireFox317
whoops, computer rebooted -_-

1606425537
pixelherodev
fengb: you hurt me. A lot.

1606425541
pixelherodev
"-1 bits"

1606425543
pixelherodev
My brain is dying

1606429312
KIMI
hi, today i parsed the file \o/

1606429343
KIMI
if someone can give me advice on code that would be nice

1606429401
KIMI
one question about this line: var line = reader.readUntilDelimiterOrEof(&buffer, '\n') catch @panic("error read") orelse break;

1606429406
KIMI
how can remove panic

1606429421
KIMI
but return still line

1606429437
KIMI
i tried try but not work because i use orelse break

1606429529
pixelherodev
KIMI: is the goal to pass the error to the calling function?

1606429533
pixelherodev
(hence, try)

1606429596
pixelherodev
KIMI: you can parenthesize the try

1606429604
pixelherodev
e.g. `(try reader.read...) orelse break`?

1606429620
pixelherodev
lol lemon, like the quit message :P

1606429681
KIMI
i don't know about the error

1606429696
pixelherodev
What do you want to happen if reading fails?

1606429696
KIMI
i just discover try thing

1606429702
KIMI
i will try parenthesis thanks

1606429720
KIMI
some other people helped me on telegram too

1606429920
KIMI
parenthisis don't work

1606429991
KIMI
but it is ok i think crash is better if it cant read file

1606429999
KIMI
one other question about allocation

1606430010
KIMI
i only use heap for copy string

1606430033
KIMI
but i don't like it, i wanted 1st use fixed array but i'm not sure

1606430055
KIMI
on line 97

1606430113
KIMI
my code is better than on C i like it

1606430133
filpAM
can I see it?

1606430151
KIMI
yes i send paste

1606430154
KIMI
i sent

1606430156
KIMI


1606430212
KIMI
but it is not finish yet

