1589245915
leeward
Is std.ascii the only place with string functions? I went looking for strstr and didn't find it.

1589246192
tdeo
std.mem.indexOf

1589246265
leeward
ahah, thanks

1589246294
leeward
mmm, a bit different, but I guess I can make it work

1589246336
leeward
Oh, wait, I found the wrong function. Much better.

1589254385
fraktor
Does the current set of interfaces (say, std.mem.Allocator) use dynamic dispatch after compilation, or is the compiler able to optimize that out?

1589254401
fraktor
Assuming that you use std.heap.c_allocator, for instance, and are not determining the allocator at runtime.

1589255187
fengb
It's runtime dispatch

1589255685
fraktor
Okay.  I know there are a couple of proposals for interfaces that are floating around; would those allow static dispatch?

1589255829
tdeo
there is already static dispatch with generics/var

1589256905
fraktor
That's correct, but I'm not sure if most of the standard library uses allocators that way.

1589258822
fraktor
What's the best way to convert a usize (or really an arbitrary type known at compile time) into a slice of bytes?

1589258914
tdeo
mem.bytesAsSlice

1589259153
fraktor
So that takes a slice of bytes and turns it into a slice of a different type; how can I take a value (say f64) and decompose that into a slice of bytes?

1589259705
daurnimator
mem.sliceAsBytes

1589259778
daurnimator
or really; mem.asBytes

1589259887
fraktor
mem.asBytes seems to do what I want.  One more question: how can I convert a []u8 to a *[8]u8?  I know for a fact the slice is of length 8.

1589259942
fengb
slice[0..8]

1589260022
fraktor
What if I'm doing something like `slice[offset + 1 .. offset + 1 + @sizeOf(usize)]`?

1589260036
daurnimator
only if the length is comptime known

1589260051
daurnimator
so better to do: `slice[offset+1..][0..8]`

1589260519
fraktor
That works well.

1589260549
fraktor
What's the best way to turn a comptime int into a comptime string? (or []u8 I guess).

1589266999
andrewrk
damn I missed Spex_guy's comments

1589267100
fraktor
How can I read a line from the terminal? I'm finding references to std.io.readLine, but not finding it in the standard library.

1589267136
daurnimator
andrewrk: yeah I also have a reply for them :P

1589267187
daurnimator
1. we can make it lazy so that only if you ask for the size does it actually lock-in the size. and 2. its a maximum, not a minimum.

1589267192
andrewrk
fraktor,

1589267253
andrewrk
daurnimator, your (1) is astute because that is already how it works :D

1589267278
andrewrk
(2) is a good point as well

1589267324
andrewrk
it feels weird to write thousands of lines of code without being in a position to run or test them

1589267333
andrewrk
(unrelated. just musing about #5307)

1589267397
andrewrk
I'm getting close. but been working on this for several days. feels weird to end each day with many lines changed but nothing to show

1589267419
daurnimator
I'm in a similar situation with my chat protocol... I've been unable to write any tests due to its probabalistic nature

1589267422
fraktor
andrewrk: I'm a little confused on how to read until a newline; does the File abstraction have a method for that?

1589267427
daurnimator
feels like I'm not going anywhere :(

1589267428
fraktor
s/abstraction/struct/g

1589267438
andrewrk
fraktor, your goal is to read a line from a terminal, yes?

1589267447
daurnimator
fraktor: .instream().readUntilDelimiter*

1589267550
andrewrk
so here's the deal. a proper solution would be some kind of terminal line reading UI thing like gnu readline (think of python or perl's repl for example). as far as I'm aware no such zig package exists. until it does, this can get you most of the way there: `fs.File.read` and then treat the return value as signifying the end of line

1589267560
fraktor
daurnimator: That is exactly what I need.

1589267579
fraktor
andrewrk: So the end of the line is EOF?

1589267608
andrewrk
no, but the end of read() is the terminal input

1589267646
daurnimator
andrewrk: re 1 above: do we have a list of which properties are "lazy" vs not? I didn't know the @sizeOf a frame was a lazy attribute; infact I didn't think we had lazy attributes at all. My mind is going back to

1589267650
andrewrk
example:

1589267667
daurnimator
fraktor: pressing e.g. ctrl+d in a terminal sends EOF.

1589267693
daurnimator
or if you're doing `./myprogram <somefile` then EOF is the actual end of somefile

1589267712
andrewrk
you have to press ctrl+D 2x if you did not previously press return

1589267787
andrewrk
daurnimator,  the way the language is currently defined, the size of types is not determined until an operation forces the size to be computed

1589267820
andrewrk
if you did, for example, `var x: usize = @sizeOf(@Frame(foo));` this would not actually force the frame size of function foo to be computed

1589268140
daurnimator
andrewrk: so what about my linked example: >  e.g. if I have a pure-storage generic, like ArrayList, then the range of the members doesn't really matter for the implementation of that generic: the only property it cares about at runtime is the size of the type, the rest is only useful at comptime.

1589268551
andrewrk
not sure I follow

1589268648
daurnimator
--> from a code-gen perspective, `AlignedArrayList(u15, 1)` and `AlignedArrayList(u16, 1)` are the same right?

1589268944
andrewrk
ah ok I see where you are going with this

1589268947
andrewrk
yes

1589269016
daurnimator
andrewrk: and `AlignedArrayList(struct {a: u8, b:u8}, 1)` is too right?

1589269048
daurnimator
andrewrk: to what extent does that de-duplication of codegen exist today?

1589269094
daurnimator
cause really, `AlignedArrayList`

1589269158
andrewrk
yes. in the upcoming self-hosted compiler we find out that these are the same on a per-function basis, after codegen, and de-duplicate symbols in the executable file, even for debug builds. in stage1, there is deduplication in the llvm optimization passes, but not in debug builds

1589269239
andrewrk
during the semantic analysis phase, zig has to analyze each instantiation separately, because the branching comptime logic

1589269306
daurnimator
branching at comptime would be using a property: at which point it becomes non-lazy, and hence needs an extra bit of codegen

1589284526
Cadey
well, i think i found a program that `zig cc` can't compile

1589284542
Cadey
but it might be due to the weirdo build system at play in it

1589284552
Cadey
i don't think `zig cc` can build the super mario 64 PC port

1589284693
ikskuh
why?

1589284746
ikskuh
hehe

1589284913
mikdusan
cmake can't handle it either; the old `export CC="zig cc"` seems to work in a lot of cases; but optionally, CMAKE_C_COMPILER is used to do this as well, the former works with `zig cc`, the latter does not due to whitespace

1589284927
daurnimator
Cadey: make a script `zigcc` that contains: `exec zig cc "$*"`

1589284954
daurnimator
possibly also with your -target argument

1589285043
Cadey
cpp -P -DVERSION_US -DNON_MATCHING -DAVOID_UB -I . -o build/us_pc/level_rules.mk levels/level_rules.mk

1589285045
Cadey
Unable to rename object: file system error

1589285047
Cadey
make:

1589285066
Cadey
ls: cannot access 'build/us_pc/src/engine/graph_node.o': No such file or directory

1589285080
Cadey
however clang handles it just fine

1589285156
mikdusan
ah a build system using preprocessor as their generic macro processor :)

1589285220
ikskuh
isn't that "zig cc -E"?

1589286106
Cadey
mikdusan: this entire project is a glorious trash fire

1589286110
Cadey
i'm amazed it works at all

1589286435
mikdusan
the sm64 project, if its anything like 64 PC port, hardcodes gcc toolchain assumptions everywhere; that's going to be a nightmare to deal with

1589286592
Cadey
somehow it builds fine with clang

1589286604
Cadey
(and runs slightly faster as a result)

1589286623
mikdusan
is the 64-PC port the one that's had takedowns?

1589286790
mikdusan
unrelated, was playing red eclipse (a free FPS that works on mac) with nephews, and was going to tweak some gameplay settings. nope'd right out of there as soon as I saw how macro happy the codebase was. I can't cope with that :(

1589286794
Cadey
specifically binaries have been taken down

1589286806
Cadey
the source code seems to be in a legal gray area

1589292705
fengb
andrewrk: you should try out async/await in Javascript. It looks nice (but still has colors)

1589294409
BaroqueLarouche
resume_me_plzkthx > foo/bar

1589295182
ifreund
"welcome to teh chat server" < I refuse to believe this was a typo

1589295338
ikskuh
ifreund: it definitly isn't

1589295352
ikskuh
andrewrk is just a memelord :D

1589297139
fengb
bruh

1589300321
mikdusan
looks like we're going to need to examine a handfull (or more) macos libSystem symbols; _realpath vs _realpath$DARWIN_EXTSN, and fdopen, fopen, getgroups, popen all have similar extensions

1589313398
fraktor
If I have a switch statement that is generating a value to go in a variable, how can I do that while still having one of the branches be a block of code?

1589313463
andrewrk
=> block_name: { foo; bar; break :block_name value; },

1589314678
andrewrk
let's see if I can get this incremental compilation branch into a test-passing state

1589314693
andrewrk
then it would be a good time for a live coding stream

1589314736
ifreund
hype

1589315003
ikskuh
hype++

1589315033
BaroqueLarouche
hype += 1

1589315388
simontime
hype = hype + 1

1589315476
alexnask
hype' := hype + 1

1589315502
ifreund
mut hype .= hype + 1

1589315628
waleee-cl
ifreund:  was that one mentioned?

1589315660
waleee-cl
specifically with .=

1589315686
ikskuh
ifreund: please!

1589315694
ikskuh
(&hype).* += 1

1589315708
alexnask
^ thats the best

1589315721
ikskuh
yep

1589315740
ifreund
waleee-cl: pretty sure .= came up in 5076 yea

1589315766
BaroqueLarouche


1589315843
ikskuh
i love Hype Toad

1589315857
ikskuh
also, Toad: Treasure Tracker is love

1589316060
fraktor
How do string comparisons work?  Is there a standard library set of functions for that?

1589316083
fraktor
It seems that switching on strings doesn't work (which makes sense, since I imagine it's comparing memory addresses).

1589316108
alexnask
std.mem.eql(u8, slice1, slice2)

1589316124
ifreund
fraktor: "strings" are treated just like any other memory, so check out std.mem for utilities

1589316186
fraktor
That's what I figured.  Thanks

1589317764
fraktor
Is there a way to return one of multiple types of error sets?

1589317943
foobles
you can make a union of error sets with ||

1589317967
foobles
so you can make it return `(FooErr || BarErr)!i32`

1589317968
foobles
or someting

1589318000
fraktor
That's perfect!  Thanks.

1589323597
pmwhite
So, comptime can't call inline functions? Which means float parsing t comptime is out?

1589323756
pmwhite
Oh, I guess it works if I explicitly label the parameters as comptime.

1589323890
pmwhite
But that's not ideal, because I want to be able to use this function at comptime and runtime.

