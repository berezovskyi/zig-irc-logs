1582502516
BaroqueLarouche
is there a way to flatten anonymous struct/tuples ?

1582502847
BaroqueLarouche
I would like to pass self and args together to call at line 36

1582506355
daurnimator
gchristensen: CFI is the direction of things lately:

1582506949
andrewrk
Cadey, what architecture does TempleOS run on? i386?

1582506959
andrewrk
or rather what architecture would you like to target

1582507125
daurnimator
actually I should create an issue for CFI

1582507278
andrewrk
Cadey, mq32 is correct about ELF files, although I would not be surprised if TempleOS used ELF format. and finally you might be able to utilise the "bring-your-own-OS-layer" feature of the zig std lib, with the caveat that you might have to land a couple patches to expand the features

1582507314
andrewrk
I really think that it would not be quite so insane as you would imagine with zig to emit TempleOS binaries!

1582507623
shakesoda
i am so relieved that debug breaks and stepping work with no extra nonsense needed at all in vscode on windows

1582507659
shakesoda
figured something would try to hurt me for attempting it

1582507735
daurnimator
wooo, happy to see the autojson PR merged :)

1582507758
daurnimator
If I get time tonight I'll start building out a few of the TODOs

1582507785
daurnimator
Should be able to rip out a heap of code from the old json_writer module too

1582507815
daurnimator
(e.g. that module has a 2nd, less correct, routine for json-escaping strings)

1582507937
Cadey
andrewrk: TempleOS doesn't actually use ELF, it doesn't use any binary format

1582507944
Cadey
it just yeets the amd64 bytes into ram

1582507966
andrewrk
Cadey, zig has a new option for that, thanks to BaroqueLarouche

1582508031
shakesoda
Cadey: ah, like dos

1582508087
Cadey
yeah lol

1582508141
Cadey


1582508154
andrewrk
Cadey, it's implemented in the build system only. but you can use foo.installRaw() rather than foo.install() and you'll get the yeeted machine code instead of ELF

1582508216
Cadey
this should be interesting

1582508240
andrewrk
Cadey, so that's basically it. you don't even have to use the "bring-your-own-OS-layer" if you don't want to, that's just if you want zig's cross platform abstractions to also work for TempleOS :D

1582508257
andrewrk
if you don't care about that, write some inline assembly for syscalls, and you're off to the races

1582508290
andrewrk
you can look at the inline assembly for the various linux architectures for inspiration: lib/std/os/linux/$arch.zig

1582508325
Cadey
lol

1582508327
Cadey
syscalls

1582508329
Cadey
that's rich

1582508341
Cadey
(TempleOS doesn't have syscalls, technically)

1582508357
andrewrk
what does it look like to interact with the OS?

1582508374
Cadey
you directly call functions in the kernel

1582508397
andrewrk
so they're mapped to hard coded virtual memory addresses?

1582508406
andrewrk
that's even easier. is it the c calling convention?

1582508407
Cadey
no, i think the JIT figures out the addresses at runtime

1582508410
Cadey
lol

1582508411
Cadey
no

1582508421
Cadey
it's a unique/bizarre calling convention

1582508431
andrewrk
ok well you might need some inline asm for that then

1582508432
Cadey
it's a side effect of everything running in ring 0

1582508452
andrewrk
that's basically equivalent to the linux syscall code

1582508548
andrewrk
anyway zig is fully capable of doing this project and is probably one of the best languages to do it in. it's just a matter of the glue code

1582508674
Cadey


1582508692
Cadey
Uf -> Unassemble Function

1582509204
companion_cube
zig seems like it'd be nice for unikernels, too

1582509666
daurnimator
andrewrk: did you see my question last night about why multi3 was missing?

1582509722
andrewrk
no I missed it

1582509824
daurnimator
andrewrk:

1582509994
daurnimator
I passed --bundle-compiler-rt, yet I'm not seeing it in the output

1582511064
adamkowalski
How do I index a anonymous list ie .{ 1, 2, 3} with a runtime value? It seems like you need to use the @"0" syntax

1582511106
adamkowalski
or can I iterate over the values?

1582511473
adamkowalski
nevermind, inline for is magic

1582512404
andrewrk
daurnimator, sounds like a question for godbolt. works for me:

1582512472
andrewrk
adamkowalski, you can't index it with a runtime value

1582512488
andrewrk
just like you can't access a struct using a runtime field name

1582514079
adamkowalski
andrewrk: I ended up using an inline while loop to iterate over the fields in the struct, got each of their names and then used @fields(literal, name) to get the value

1582514083
adamkowalski
would you say thats idiomatic?

1582514395
andrewrk
hard to say, without more context

1582514444
BaroqueLarouche
jessermeyer:  How do you call Direct3D code in your code ? On my side I did this

1582514511
daurnimator
andrewrk: huh. thanks.

1582514727
adamkowalski
andrewrk: it's for my machine learning library. It's come along ways in the past few months. However, the syntax for building out nd arrays is quite verbose so I'm trying to support anonymous structs

1582514795
adamkowalski
if you look at

1582514809
adamkowalski
it supports scalars, vectors, matrices, cubes, etcs

1582514910
adamkowalski
the anonymous structs really clean up this example

1582515196
andrewrk
daurnimator, you can think of -femit-asm as defined to mean, "emit the root zig source file as assembly"

1582515283
daurnimator
andrewrk: that's sort of odd to me.... it doesn't seem coherent to have "what is emitted"  depend on "what is the format to emit in"

1582515316
andrewrk
there is no "the format to emit in" and --emit is deprecated

1582515325
andrewrk
it's only not deleted for godbolt's sake

1582515345
andrewrk
instead we have switches to enable/disable emitting different things

1582515372
andrewrk
the deprecated `--emit asm` parameter means `-fno-emit-bin -femit-asm`

1582515382
andrewrk
-femit-asm means emit the root zig source file as assembly

1582515593
daurnimator
andrewrk: re: it seems weird that `--emit-asm` would have a different result (apart from comments+order) than building the object and then disassembling it

1582515701
andrewrk
that would be one way to do it, although it might interfere with trying to annotate the assembly with source information. this is starting to get into the territory where LLVM's API dictates how certain kinds of features work

1582515829
daurnimator
I essentially use `-femit-asm` as a shortcut to building the object and disassembling it: what are the alternative use cases?

1582515880
andrewrk
check some of clang's options for emitting assembly

1582516006
daurnimator
heh..... that's what I was doing, and I wanted to see how the affected the implementation of multi3 :P

1582519196
pixelherodev
Is there a way to specify "give me the fastest integer with at least N bits?"

1582519295
BaroqueLarouche
pixelherodev:  maybe `const UnsignedAlignIntegerType = @Type(TypeInfo{ .Int = TypeInfo.Int{ .is_signed = false, .bits = alignForward(integral + fractional, 8) } });`

1582519296
BaroqueLarouche
alignForward is in std.mem

1582519521
andrewrk
pixelherodev, just use the integer type that has at least N bits

1582519525
pixelherodev
Sure, but that's functionally identical to just iN

1582519527
andrewrk
uN or iN

1582519546
pixelherodev
Right, but e.g. on x64 64-bit ops are faster than 8-bit, right?

1582519568
andrewrk
zig is allowed to promote 8-bit integers to 64-bit integers to make ops faster

1582519582
pixelherodev
Ah, to put it simply: don't bother, that's the compiler's job

1582519583
pixelherodev
?

1582519588
andrewrk
yeah

1582519592
pixelherodev
Makes sense, thanks

1582519602
andrewrk
I went down this rabbit hole early on in zig's design

1582519615
fengb
Just don’t tie the compiler’s hands with packed bits :P

1582519806
pixelherodev
Nah, it's for a one-off variable used to track what information is still needed for a global definition

1582521329
pixelherodev
There a way to specify that a tagged union can

1582521365
pixelherodev
`t: unreachable` was the first thing that came to mind, but the compiler rejected that, so I'm guessing there's no real way other than `t: void` and constant `zag.debug.assert(!= .t)`s

1582521686
daurnimator
pixelherodev: use a different tag type :P

1582521827
pixelherodev
Can't :(

1582540518
mq32
<pixelherodev> Right, but e.g. on x64 64-bit ops are faster than 8-bit, right?

1582540532
mq32
x86_64 has dedicated instructions for 8,16,32,64 bit

1582540547
mq32
afaik they are equally fast, but it depends on what you want to achieve

1582547578
Snektron
Time to break out the intel optimization manuals again

1582547700
mq32
hehe

1582554985
fengb
mq32: I think either math.cast should handle floats, or it should be renamed to math.intCast and we have math.floatCast

1582554995
fengb
Running into the same issue :P

1582555016
mq32
yeah

1582555034
mq32
who should implement it?

1582555047
fengb
Sounds like you're volunteering ;)

1582555093
mq32
damn.

1582555105
mq32
let's just discuss some "features"

1582555130
mq32
int→int is implemented already

1582555190
mq32
float→float would succeed (similar to @floatCast)

1582555235
mq32
int→float will fail when the float cannot represent the integer number

1582555260
mq32
float→int will fail when the float is not an integer or out of range

1582555281
fengb
I think it's easier to just split it into floatCast and intCast

1582555306
mq32
std.math.toFloat() and std.math.toInt() ?

1582555334
fengb
math.floatCast == @floatCast with error return

1582555401
mq32
@floatCast does not error

1582555461
fengb
Oh

1582555466
fengb
Well what am I talking about then

1582555490
mq32
@intToFloat, @floatToInt?

1582555523
fengb


1582555574
mq32
this can still fail!

1582555579
mq32
put 0.5 in that

1582555594
fengb
That's valid for my usecase :P

1582555604
fengb
Wasm spec > Zig spec

1582555627
mq32
hm?

1582555645
shakesoda
zig has a spec?

1582555649
fengb
Wasm defines this operation as round to 0

1582555658
fengb
Same as zig

1582555669
fengb
So this isn't a failure for my usecase

1582555742
mq32
oh it does?

1582555759
mq32
i remember it panicing when not passing a integer float

1582555787
fengb


1582555798
fengb
"Converts the integer part of a floating point number to the destination type."

1582555804
mq32
hm

1582555804
fengb
I guess I haven't actually tested it

1582555811
mq32
this has changed some day… :D

1582555840
fengb
Zig has a spec. It's

1582555868
mq32
nah, that's a reference implementation :D

1582555915
BaroqueLarouche
when the ISO standard ? 😛

1582555918
BaroqueLarouche
(please no)

1582556025
fengb


1582556169
Xatenev
fengb, why?

1582556176
Xatenev
because it sounds so official?

1582556187
fengb
Yeah

1582556192
Xatenev
yeah agreed

1582556236
fengb
Especially since the goal of the package manager is to get away from "official" repos

1582556663
mikdusan
at this point would rather see something like `<user>/zig.glm` and `<user>/zig.glfw`

1582556750
fengb
No dashes? :(

1582556757
fengb
glm4zig

1582556805
mikdusan
dashes might be better

1582556831
fengb
A lot of `foo-contrib` are either core blessed or defacto standards so this feels like it's hijacking the process

1582556853
fengb
Maybe I'm overthinking it

1582556892
mikdusan
my feeling is simply it's too early for something that looks like a curated/federated zig contrib org

1582556956
fengb
I do want to think about curation being a part of the package manager though. Some way that won't eventually end up like npm

1582557500
daurnimator
why does std.fmt take an output callback rather than a stream?

1582557523
fengb
Because internally stream uses std.fmt

1582557544
daurnimator
fengb: no it doesn't?

1582557566
BaroqueLarouche
because not all output is suitable to a stream

1582557572
BaroqueLarouche


1582557575
daurnimator
BaroqueLarouche: sure it is...

1582557601
fengb


1582557607
fengb
And os.write uses that

1582557622
daurnimator
fengb: os.write doesn't use stream.print. it uses string.write

1582557626
daurnimator
uh *stream,

1582557647
fengb
Hmmm

1582557648
daurnimator
and it doesn't even use that either does it?

1582557657
daurnimator
os.write should call the syscall...

1582557662
fengb
I remember something internal uses it heavily

1582557684
fengb
If it's really just debug.warn, then we might be able to invert this and make everything nice

1582557717
daurnimator
yeah.... I made std.json.stringify in std.fmt's image. but now I'm questioning why that exists

1582557740
fengb
I actually started ripping out my generators when I discovered streams can be used as generators

1582557750
fengb
So maybe that's a good solution going forwards

1582557904
fengb
... I swear I encountered some issues. Otherwise this is basically what I did with the generator branch, but more sane and betterer

1582559082
companion_cube
BaroqueLarouche: well I sure hope Zig gets a standard post 1.0

1582559525
fengb
iirc, a formal written spec on the radar for 1.0

1582559567
companion_cube
I'm really intrigued (and compelled) by the idea of a language having a 1.0 and, basically, no updates afterwards

1582559581
companion_cube
(well there's SML in that style, I imagine(

1582559584
companion_cube
)

1582559669
mikdusan
no joy: `const external_config = @import("config.zig") catch struct {};`

1582559771
mikdusan
(a mechanism to supply empty struct if import is not found)

1582560107
Xatenev
companion_cube, why?

1582560111
Xatenev
companion_cube, you dont like progress?

1582560139
companion_cube
well, if the language is small enough, it could be "done" in some sense

1582560744
shakesoda
is there a reason usingnamespace doesn't work inside of a function

1582560765
fengb
It only works inside of structs/unions/enums

1582560766
shakesoda
i can do @import's inside of them, so i figured i'd also be able to usingnamespace to drop things into that scope

1582560780
shakesoda
fengb: top level, too

1582560796
fengb
Top level is a struct so I'm technically not wrong ;)

1582560804
shakesoda
details!

1582560869
fengb
I think the technical reason is that usingnamespace clones stuff into the "static" scope. Functions don't have a static scope, unless you create one with `const Foo = struct`

1582560918
shakesoda
I see, it'd be nice to be able to do though :(

1582560934
mq32
just import into "const l = @import(…);"

1582561011
shakesoda
I do plenty of that, I specifically just would like to be able to drop the prefixes from stuff inside of a given function to cut down the noise

1582561063
andrewrk
spec is #75

1582561572
mikdusan
strange. vim has no bundled PEG syntax highlighter

1582562042
fengb
Sorting ~170 strings at comptime takes 1s :(

1582562140
companion_cube
quickly, to the comptime JIT!

1582562166
andrewrk
fengb, what sorting algo did you use?

1582562187
fengb
std.sort.sort

1582562228
andrewrk
yeah, it's a bummer, comptime perf is 1-2 orders of magnitude slower than it should be in theory

1582562283
fengb
My silly mem.order hack actually slows down comptime sorting

1582562287
andrewrk
we don't need JIT, we just need a compiler that had a fixed language spec when it was written 😅

1582562417
companion_cube
andrewrk: just wait until people start writing big projects with half the code at comtpime :)

1582562436
companion_cube
but that's why Zig needs several implementations anyway: compete on the compiler, agree on the spec

1582562437
fengb
I had a great hack that squeezed strings into a u128, but then I had strings that were 18 characters long :(

1582562470
mikdusan
try u256

1582562501
andrewrk
fengb, maybe as a workaround the comptime code can produce something you can copy/paste as a sort of manual caching

1582563422
fengb
u256 works. I thought LLVM didn't support it so I didn't try >_>

1582563444
mikdusan
is 18 really your max? u144

1582563461
mikdusan
but more curious, is u256 faster than the 1s sort?

1582563496
fengb
Yeah faster by a lot

1582563606
mikdusan
if you're doing comptime, I

1582563631
andrewrk
the zig language says that even integers larger than u256 are supposed to work. the fact that the llvm-based compiler doesn't is a bug. the issue is

1582563660
andrewrk
ideally llvm would emit runtime-known integer bit width libcalls for large integers and everything would Just Work

1582563680
andrewrk
this will be easy to solve in a non-llvm backend compiler

1582563831
fengb


1582564123
andrewrk
it would be useful to have a smallest possible test case where release-safe is faster than release-fast

1582564161
pixelherodev
Hold on, what did I miss? Why would release-safe be faster than release-fast?

1582564200
companion_cube
if it tickles the optimizer differently

1582564262
andrewrk
it's most likely a flaw in zig's codegen which is why that test case would be helpful to inspect

1582564378
fengb
Ah, I can try to see about reducing it a bit

1582564396
fengb
I can't reliably get it to work though :/

1582564424
fengb
I'm hoping it's not because the optimizer sees hardcoded data.

1582564498
andrewrk
if you really want to get down and dirty you can play with llvm-opt directly and explicitly put the optimization passes on the cli

1582564600
fengb
Aside...

1582564668
fengb
Good news for Zig though, it can integrate with UCS2 just as easily as UTF8 ;)

1582564713
companion_cube
it always had different ABIs :-)

1582564730
companion_cube
it's like saying CPUs have different ABIs

1582564778
fengb
Well sure, but I was hoping that one of the major players would have a defacto standard

1582564852
companion_cube
hopefully reasonable people^W languages^W thingies agree on utf8 anyway

1582565032
fengb
AssemblyScript decided to inherit JS's UTF8 -_-

1582565206
andrewrk
llvm project now allows using github issues for bug reports:

1582565679
mikdusan
oh nice

1582566329
mikdusan
similar but it's a crocodile I think (this company announced a rebranding):

1582566330
mikdusan


1582569816
andrewrk
dimenus, did you have some in-progress self-hosted native glibc version detection code?

1582569878
dimenus
andrewrk: i do, but I likely wouldn't submit a PR until tomorrw. what's up?

1582569889
andrewrk
I'm about to step on your toes

1582569903
dimenus
you're the boss :)

1582569925
andrewrk
would be happy to work based off your diff and give you some credit in the commit msg if you want

1582570095
dimenus
i literally just borrowed the dynamic_library.zig ELF parsing code and then added a bit more to it. I hadn't gotten to merging it with tools/update_glibc.zig yet

1582570105
dimenus
grab PT_DYNAMIC and then look for the DT_NEEDED entry

1582570109
dimenus
for /usr/bin/env, there's only libc

1582570163
dimenus
andrewrk: i'd share it, but it's on my home machine and not pushed

1582570257
dimenus
wouldn't we also want to remove abi verification out of glibc.cpp and into self-hosted as well?

1582570301
dimenus
or i guess not, since the user can choose to skip zig build and execute it via cmd line directly

1582570384
andrewrk
cmd line zig has access to self-hosted code as well

1582570388
andrewrk
e.g. `zig fmt`

1582570396
andrewrk
and `zig translate-c`

1582570479
andrewrk
hmm, you know what else can become self-hosted...  main.cpp

1582570589
shakesoda
does zig have some equivalent of c's static in function scope

1582570680
andrewrk
you can make a struct inside a function

1582570700
shakesoda
makes sense

1582572062
betawaffle
does std.mem.copy work for moving data backwards in a buffer?

1582572120
andrewrk


1582572137
betawaffle
it doesn't say anything about overlap

1582572238
andrewrk
hmm "dest.ptr must be <= src.ptr" is not correct

1582572251
mikdusan
yeah that's a head scratcher

1582572263
betawaffle
i looked at copyBackwards and it was the opposite of what i expected

1582572316
andrewrk
I think std.mem.copy should have the semantics of memmove, e.g. "the memory areas may overlap; copying takes place as though the bytes in src are first copied into a temporary array that does not overlap src or dest, and the bytes are then copied from the temporary array to dest"

1582572396
andrewrk
actually I don't have enough context loaded into my brain right now, I'm not ready to make decisions about std.mem.copy. there are a few relevant issues open related to this

1582572586
Barabas
How do I run the tests for the std?

1582572640
Barabas
oh wait...

1582572674
Barabas
Nope

1582572677
mikdusan
`zig test lib/std/std.zig` or `zig build test-std -Dskip-release -Dskip-non-native`

1582572679
andrewrk
./zig build test-std

1582572729
Barabas
Thanks

1582572750
andrewrk
more details:

1582572782
companion_cube
andrewrk: memmove is the right choice, on glibc even mempcy is just an alias to memmove :)

1582572813
andrewrk
orly?

1582572825
Barabas
I think microsoft does the same

1582572985
Barabas
If I do this `zig test lib/std/std.zig` I get all kinds of errors (on Windows)

1582573001
Barabas
Oh wait... that's got to do with my setup

1582573053
Barabas
As I've got the zig std symlinked to C:/User/me/lib/zig/std

1582573079
Barabas
And then it finds everything twice apparently?

1582573138
andrewrk
"finds everything twice" is not a thing

1582573331
Barabas
C:\Users\Me\lib\zig\std\start.zig:25:17: error: exported symbol collision: 'WinMainCRTStartup'                @export(WinMainCRTStartup, .{ .name = "WinMainCRTStartup" });                ^.\lib\std\start.zig:25:17: note: other symbol is here                @export(WinMainCRTStartup, .{ .name = "WinMainCRTStartup" });

1582573369
mikdusan
Barabas: use

1582573380
Barabas
yes, doing that now

1582573397
andrewrk
it would be worth double checking that the "realpath" implementation in stage1 is correct for windows symlinks

1582573411
Barabas


1582573413
Barabas
does that work

1582573415
Barabas
?

1582573422
andrewrk
that's the part that makes sure that when you @import the same file from a different relative path, you get the same import

1582573435
Barabas
Ah, that seems to be broken

1582573462
andrewrk
sorry I should have said, "finds everything twice" is not supposed to be a thing

1582573471
Barabas
Yeah I understand =D

1582573492
Barabas
Full output:

1582573601
Barabas
And when I go to my `C:\User\Me\lib` and run `zig test .\zig\std\std.zig` I get things like these: .\zig\std\os.zig:49:9: error: unable to find 'os/test.zig'

1582573621
Barabas
But the `zig build test-std` works

1582573711
mikdusan
zig does locating relative to zig.exe; so what is zig.exe path?

1582573955
Barabas
C:\User\Me\bin\zig.exe , which is a symlink to E:\Libraries\Zig\build-release\bin\zig.exe

1582573959
andrewrk
oh, the std lib tests require in-source testing

1582573985
andrewrk


1582574021
andrewrk
I don't think there is a bug here. The supported way to run std lib tests is through zig build

1582574033
Barabas
ok

1582574193
Barabas
Everything works fine when I run anything outside std anyway

1582574981
Barabas
Hmm... I'm allowed to do something like: `some_function(&@ptrCast(*u32, my_pointer))` and then I get an address to something which is not `my_pointer`.

1582575023
fengb
ptrCast returns a new stack variable

1582575081
andrewrk
rather, the `&` forces into existence a stack variable and takes the address of it

1582575125
Barabas
Does it make sense that this is allowed?

1582575953
andrewrk
there are some compelling reasons to allow taking the address of a temporary

1582576121
mq32
andrewrk: do you see a reason to allow that behaviour for mutable references?

1582576712
dimenus
andrewrk: i'm curoius about your comment earlier. Are you working on glibc updating directly or is that just affected by other changes?

1582576833
andrewrk
dimenus, it's a sub-project of

1582577792
fengb
mq32:

1582577940
mq32
my years of C/C++ experience are making me shiver :D

1582577946
Barabas
^^

1582577982
mq32
but if that is defined behaviour, it is nice, but also dangerous to be abused

1582578038
andrewrk
with UAF detection it won't be so bad

1582578089
mq32
UAF?

1582578104
andrewrk
sorry. Use-After-Free

1582578190
mq32
ah

1582578194
fengb
Maybe we can mark certain values as no-reference? `&@ptrCast()` seems to be a common enough footgun

1582578261
andrewrk
that's a reasonable idea

1582578405
mq32
i'm really looking forward to have a spec

1582578426
mq32
so we reference it for all weird questions :)

1582578481
andrewrk
all the weird questions are what are blocking the spec from being written ;)

1582578511
andrewrk
or rather, they reveal what is blocking

1582578517
mq32
haha yeah, true dat :D

1582578523
mq32
i still keep asking stupid stuff

1582578596
jaredmm
Is there anything else I need to change on

1582578647
andrewrk
jaredmm, I'll take a look in a few minutes

1582579283
betawaffle
should a deinit func mutate the receiver to reflect the de-initialized state? for example, if i have an allocated buffer, and i free it, should i then update invalidate my reference to the old memory?

1582579298
betawaffle
s/update//

1582579404
Barabas
How would you invalidate those?

1582579415
betawaffle
as an example: self.mem = &[_]u8{};

1582579504
Barabas
Up to you I guess, but generally you shouldn't use a struct after a `deinit`, so it doesn't really matter what's in there.

1582579512
betawaffle
ok cool

1582579573
fengb
A semi-common std pattern is `self.* = undefined`

1582579600
betawaffle
but, should my deinit take T or *T?

1582579606
betawaffle
for that, i'd need to take *T

1582579655
andrewrk
mq32 doesn't like self.* = undefined; but I'm pretty sure it's good

1582579663
fengb
You can't reassign any data if it only takes T

1582579681
betawaffle
right, so does that mean every deinit should take a *Self?

1582579692
mikdusan
that's what I do

1582579701
andrewrk
say that you did not have any methods, and it was just a plain old data struct

1582579720
fengb
I think that makes sense in general, *Self implies owned whereas Self would imply value / copy

1582579731
andrewrk
after you freed the relevant things, you could do `x = undefined` which would put it in exactly the same state that it would be in where it is declared: var x: T = undefined; x.init();

1582579817
andrewrk
it's similar to a popular practice in C of having a free() function actually accept a pointer to the pointer, so that it can set the outer pointer to NULL

1582579844
andrewrk
I believe ffmpeg does this for example

1582579851
betawaffle
ok, all of this is what i wanted. thanks

1582579883
andrewrk
mikdusan, out of curiosity, what's your non-yak-shaving zig project?

1582579923
andrewrk
I mean, you do a bunch of contribution to zig itself, but are you working on something in zig that is not zig?

1582579964
mikdusan
oh i'm overhauling my color tty to use new anon-struct literals and some other goodies; eg: `print("hello {}\n", .{ .standout, "world" });`

1582579975
mq32
andrewrk, can you elaborate "yak shaving" to non-native speakers?

1582579998
mikdusan
not there yet but I think this anon struct literal is going to be perfect for "initialization params" for types with significant amount of options

1582580008
andrewrk
neat

1582580015
fengb
andrewrk: daurnimator mentioned earlier this morning / his evening that fmt.format() could take a stream instead of output. What are your thoughts?

1582580026
andrewrk
mq32, apologies, I try not to do that. I elaborated ^

1582580029
fengb
Design wise it'd be pretty identical with my generator changes... except with sane semantics

1582580041
andrewrk
mq32, also I can find a humorous video to explain yak shaving

1582580051
fengb
Ren & Stimpy? :P

1582580115
andrewrk
mq32,

1582580135
kristoff_it
ha I would have shared that same video :D

1582580144
fengb
lol

1582580170
mq32
ah nice :D

1582580175
Barabas
I have a question. The variables used in a `defer` or `errdefer`, are those copies or references?

1582580215
mq32
in germany we say "vom hundersten ins tausendste kommen" for that which means "go from one hundredth to the thousandth"

1582580297
fengb
mq32: it's an english programmer colloquialism. Normal people people will be just as confused with the term yak shaving

1582580311
mq32
ah

1582580319
fengb
How do people write books on proposals? Mine are always like 2 paragraphs :(

1582580340
kristoff_it
quick q: --main-pkg-path would allow me to import files from outside of a file's sub-tree, right? how do I add that option in build.zig?

1582580377
mq32
exe.addPackagePath("package_name", "file_path")

1582580413
shakesoda


1582580424
mq32
what's that?

1582580439
andrewrk
kristoff_it, setMainPkgPath

1582580440
shakesoda
particles + flow fields in my zig sandbox

1582580478
BaroqueLarouche
shakesoda:  nice! On which system do you run your IMGUI ?

1582580512
shakesoda
BaroqueLarouche: opengl?

1582580537
BaroqueLarouche
I used win32+Direct3D11 on my side

1582580546
shakesoda
oh, sdl2+opengl

1582580563
shakesoda
on windows, should run on linux too if i go fix the build

1582580636
shakesoda
found a strange bug while doing this, cimgui's functions returning ImVec2 (i.e. struct { float x, y; } cause crashes, had to hack in new ones that just return floats

1582580657
shakesoda
and another one where my function I'm passing a float argument to just... gets 0.0

1582580763
betawaffle
shachaf: whoa cool, what is that?

1582580883
shachaf
betawaffle: Sounds like some kind of calling convention bug. I ran into something similar in tcc,

1582580915
shachaf
Though I gues Zig uses LLVM so it's probably not quite that kind of issue.

1582581156
kristoff_it
andrewrk: thanks. Something changed about that in the last couple of months right? I remember all imports from "../" to fail unless that option was specified, while now apparently I don't even need it to import files from within the project, regardless of which sub-tree they are located in

1582581350
andrewrk
nothing changed afaik

1582581395
andrewrk
how it is supposed to work is that each package has a root dir and root source file. @import, @embedFile, etc only have access to paths inside that package

1582581441
andrewrk
zig sets up a main package for you automatically based on the root source file, which means that the root package dir is the dir the root source file is in. so as long as your root source file is at the root of your package dir you'll have access to everything

1582581460
andrewrk
(or you can override with --main-pkg-path)

1582581526
andrewrk
this is currently a bit problematic with the automatically set up main pkg path when doing e.g. `zig test a/b/inner/foo.zig`, but this can be improved when the package manager exists, and there would be a way to infer a different root package path based on the file system

1582581564
kristoff_it
oh ok I see, I probably encountered that before, because I used to call test on the specific file I was writing

1582581570
kristoff_it
while now I'm using build

1582581585
kristoff_it
makes sense, good to know

1582581588
fengb
Vexu is on a roll

1582581692
andrewrk
have you seen

1582581713
andrewrk
these tests look familiar :D

1582581741
fengb
He's just "using" Zig for his own nefarious purposes

1582581853
mikdusan
`zig test a/b/inner/foo.zig`; how about `zig test a/b/./inner/foo.zig` and zig infers --main-pkg-path to be the point of superfluous "/./"; this is a trick that rsync uses to establish a base anchor point

1582581869
andrewrk
that's an interesting idea

1582581897
companion_cube
oh god that syntax :s

1582581902
companion_cube
is this F#? :DD

1582581904
andrewrk
I like to explore first the idea of searching the fs tree up to find a certain file which contains package metadata

1582581917
andrewrk
s/I like/I would like/

1582581936
andrewrk
because it is planned to have some strictly declarative package metadata in a file at the root of a package

1582581943
Barabas
companion_cube I can't read it either :P

1582582027
companion_cube
it's more that it seems extremely footgunny

1582582031
companion_cube
where do things end

1582582070
Barabas
It seems to use whitespace, like python

1582582072
mikdusan
I was actually just thinking about what can be the recommended contrib repo setup. { `package.zig`, `package/` } and/or drive it with package metadata

1582582085
Barabas
But it makes it hard to see the structure imho.

1582582144
betawaffle
uhg...

1582582147
andrewrk
mikdusan, the current candidate is zig-package.json

1582582150
betawaffle
(on macos)

1582582168
mikdusan
ah

1582582181
betawaffle
what's the solution to that problem? ^

1582582187
fengb
`package-lock.json` 🙃

1582582267
andrewrk
fengb, it is planned to save hashes (Trust-On-First-Use), so we do need somewhere to put those. I'm thinking it will also be in that same file. It's a file that is both edited by humans and by zig tooling

1582582308
betawaffle
andrewrk: it's almost like we need to support `void` as a valid switch case that deletes the case at comptime

1582582312
andrewrk
it would be nice if the format allowed comments and extra commas... like

1582582349
mikdusan
betawaffle: looks like it's not defined in os/bits/macos.zig:

1582582368
betawaffle
right, but it's entirely possible it doesn't actually exist on macos

1582582368
mikdusan
err darwin.zig

1582582374
andrewrk
betawaffle, all uses of EOPNOTSUP should be converted to ENOTSUP

1582582377
fengb
YAML is a standard >_>

1582582398
mikdusan
oh and darwin has that :)

1582582401
fengb
Less trolly: I like TOML as a human editable format

1582582419
betawaffle
but it's still a potential problem... sometimes there are errors that don't exist for a given OS

1582582432
companion_cube
andrewrk: json5 ?

1582582445
companion_cube
but toml sucks for nested structures

1582582491
andrewrk
companion_cube, if json5 is popular enough, then this seems perfect

1582582527
companion_cube
it's not very popular afaik, but if zig supports it…

1582582532
mq32
<companion_cube> but toml sucks for nested structures

1582582544
mq32
i don't think package declarations require much of a nested structure

1582582565
mikdusan
s/json5/zon1/

1582582567
companion_cube
you never know…

1582582626
mq32
it's just a complexity thing

1582582641
mq32
but yeah, maybe…

1582582670
companion_cube
I imagine at least: a list of packages (when you start having several packagesin a repo) with lists of things in each of them

1582582705
fengb
How does Rust solve this?

1582582728
andrewrk
toml

1582582729
companion_cube
there's a cargo file for the workspace, and one cargo file per crate, iirc (when you have multiple packages in a repo)

1582583973
jaredmm
I was never a big fan of the way Rust handled it. It was just a mess to figure out. That's the problem with most of these configuration systems. Configuration is hard and they try to abstract it all away, then you end up with a hard problem covered with a leaky abstraction.

1582584339
metaleap
my nr 1 feature request from any future zig pkg mgr is that it wont impair the zig compiler's / build system's ability to function well locally without any notion of pkg mgmt. (always good to be able to have that option to fall back on simple local primitive building blocks and manual deps mgmt if need be)

1582584347
jaredmm
I don't know what the median between everyone is identical and everyone is custom is, but I hope there's something better than Cargo. Multi-crate projects are (were?) hell.

1582584408
andrewrk
metaleap, package manager will just be a glorified downloader and tool to help you figure out wtf is going on with your dependencies. it will always be possible to copy+paste a file or directory into your source control and make that a "package"

1582584441
metaleap
andrewrk glad to hear that!

1582584465
andrewrk
package management in zig will require manual upkeep to update to newer versions of things. people who build your project from source will get exactly the versions of things that you tested with

1582584487
andrewrk
if there's a security advisory in a package you depend on, that's your problem too. zig won't solve this for you automatically

1582584487
companion_cube
aka lockfile? :)

1582584529
fengb
What about resolving duped packages that are on different versions?

1582584537
andrewrk
the plan is more strict than version locking - actual hash of all files of the package. so that it doesn't matter whether it came from a source control checkout, tarball download, ipfs, whatever

1582584566
andrewrk
fengb, I put a lot of thought into that but I forget where I landed

1582584582
companion_cube
almost sounds like andrewrk's mind was contaminated by nix… :-°

1582584587
andrewrk
I know enough that is certain to make progress, without answering that question yet

1582584637
mikdusan
one slick example I like of grabbing repos to add capabilities is vim. just clone into ~/.vim/pack/dist/start and voila!

1582584652
andrewrk
I agree, that is a great user experience

1582584663
andrewrk
and it didn't used to be that way

1582584673
jaredmm
Cargo pulls in multiple versions and trys to mangle names to get you working software, but I'm not a huge fan of it.

1582584726
fengb
npm pulls in all the versions and gives you all the versions at once. But sometimes it pretends to dedupes. It's the "best" of both worlds! 🙃

1582584739
jaredmm
I don't know why npm got so many people hopped up on the idea of dependency ranges. You give one version, that's what gets used. ~Fin~. Maven had ranges for years and the entire industry decided not to use it and it was nice.

1582584748
companion_cube
mikdusan: don't you use Bundle or something similar?!

1582584768
mikdusan
companion_cube: old way was to use stuff like that. no longer needed, I think vim 8.0 or higher?

1582584788
fengb
Because in frontend, bloat actually matters. An extra package can be 100kb or more

1582584789
companion_cube
I find that simpler than cloning a ton of stuff in my ~/.vim ?!

1582584813
jaredmm
That's a problem they made themselves, though.

1582584815
mikdusan
bundle/vundle/pathogen. but you have to install those first.

1582584827
fengb
Of course, npm is super lousy at deduping so it's not a good solution either

1582584830
jaredmm
npm bundle isn't a solution to having 18 billion dependencies replicated every time you try to download anything. That's not a runtime size problem, but it is a problem.

1582584861
jaredmm
Things like pnpm try to say "let's be a bit saner about this", but the inconsistency of the tooling means that not everything is compatible.

1582584895
fengb
The 18 billion dependencies is because everyone decided to make tiny packages so it's impossible to do anything sane without pulling in leftpad

1582584953
jaredmm
I know. For 40 explicit dependencies in our `web application`, there are 50k implicit dependencies.

1582584959
Snektron
This is starting to beckme a problem in rust too

1582584964
Snektron
Im looking at you, ncpus

1582584969
Snektron
And rand

1582584972
companion_cube
mikdusan: ah wait, I use `Plug` now, ships with neovim I think

1582584977
Snektron
Beckme -> become

1582584983
fengb
Java has the same problem. I'm sitting on a project with 5 different Optional implementations. It's just less exacerbated because A) there's some semblence of a standard library, and B) bundle size isn't a big concern

1582585014
mikdusan
companion_cube: i dunno. I just clone. and once in a while eg. `cd .../start/zig.vim; git pull`. done.

1582585042
companion_cube
I just `:Plug update` 🤷

1582585047
fengb
I bet we still ahve Joda time since most of this project is before Java 8

1582585059
companion_cube
(and I have > 30 plugs)

1582585079
andrewrk
companion_cube, having only vim installed is simpler than having vim installed + following the installation instructions for those third party projects

1582585084
daurnimator
08:33:34 <fengb>andrewrk: daurnimator mentioned earlier this morning / his evening that fmt.format() could take a stream instead of output. What are your thoughts?

1582585102
jaredmm
Bundle size in Java is a big concern, but not as big as frontend sizes. Java libraries duplicating things that were missing from the standard library is a problem, but mostly because you pay a size penalty even when you don't use it unless you explicitly exclude it (because reflection could use it even if the code doesn't show it).

1582585119
companion_cube
andrewrk: the installation instructions are `Plug 'foo/bar'` in my vimrc

1582585121
companion_cube
for each package

1582585128
companion_cube
it's tremendously simple

1582585135
mikdusan
companion_cube: i'm not sure how much diff neovim is

1582585146
companion_cube
well it's not that different these days

1582585155
companion_cube
but it'll get builtin LSP in 0.6 I think

1582585205
andrewrk
daurnimator, I think it's not time for that yet

1582585207
mikdusan
companion_cube: i'll give you an example. vim does not know what "Plug 'foo/bar'" does

1582585211
jaredmm
Most binary deployments have the same issues and that's why static vs dynamic linking keeps going back and forth as to what the best practive is.

1582585223
companion_cube
nvim does, vim does too if you install, say, Vundle

1582585241
mikdusan
companion_cube: that's my point. you have to install something first

1582585243
fengb
jaredmm: yeah, JS standard library is nonexistent so every project and their mom decides to reimplement their own leftpad. Or use some random guy's leftpad

1582585244
companion_cube
for years I had a submodule with just vundle in it; then I'd use vundle to install the rest

1582585245
andrewrk
streams already have a print method. std.fmt.format is lower level

1582585253
companion_cube
in nvim it's already there ✔

1582585309
andrewrk
I'm going to make a zig leftpad package with the description "haters gonna hate"

1582585365
andrewrk
oh, too bad we don't need it though because we have formatted printing

1582585366
companion_cube


1582585381
companion_cube
andrewrk: any language with printf can laugh at leftpad :/

1582585399
fengb
Any language with a strong stdlib

1582585403
jaredmm
I mean, the "right" way to do it would probably have been to collect the most popular packages into a single library and have that standardize in the browsers (IE building a stdlib).

1582585424
jaredmm
Probably save a lot of trees and coal that way, too.

1582585458
fengb
But nobody can decide on the standard, so we have 10 standards!

1582585515
jaredmm
Surface it through whichever consortium Google has decided is the real one, since they apparently own the internet now.

1582585537
andrewrk
with zig package manager if you were worried about a package getting removed from the internet then you should mirror it somewhere and depend on that instead

1582585567
andrewrk
zig will only protect you from getting incorrect bits. zig project won't have any central repository

1582585630
companion_cube


1582585636
companion_cube
"standard" js

1582585674
jaredmm
I do recall that from the GitHub issue discussion. Once Zig becomes popular enough, companies like Sonatype will add support to their tools. Most enterprises aren't re-downloading data from a central repo.

1582585706
companion_cube
andrewrk: hopefully people will use bittorrent

1582585708
andrewrk
companion_cube, this is off topic, let's keep comparisons with other languages technical and not jump onto a trash talking bandwagon

1582585711
companion_cube
the perfect tool for delivering packages

1582585716
companion_cube
yeah, yeah, sorry.

1582585730
companion_cube
it's more like that guy with his tons of micro repos and "standard.js" styleguid 🙄

1582585775
andrewrk
talking about that here can only cause problems and it's not productive. game theory says: off topic

1582585785
fengb
I used standard before prettier

1582585807
fengb
I liked it since it stopped bikeshedding

1582585846
companion_cube
I think it's a good lesson about having an opinionated syntax though

1582585847
andrewrk
bittorrent for packages would be supported via an "fetch plugin package"

1582585866
companion_cube
andrewrk: yes, I mean I hope people will adopt bittorrent in practice

1582585886
andrewrk
part of that declarative package file would list the fetch plugin packages, which could then allow more ways to fetch bits

1582585888
fengb
Honestly, Go was my biggest eye opener. I `*hated*` Go syntax... then forgot about it a week later

1582585928
Snektron
As long as its consistent really

1582585973
andrewrk
fengb, I'm hoping that happens to me with `const foo = fn...`

1582586009
fengb
You accepted syntax that you hate? >_>

1582586057
andrewrk
yep

1582586067
andrewrk
for consistency

1582586086
mikdusan
fengb: well there is the ultimate card -- anything up until 1.0 is fair game to be changed :)

1582586616
fengb
There's some strong pushback to the new syntax heh

1582586646
fengb
Speaking of which... can someone convince Rocknest that I'm not destroying Zig by asking for declared tuples? :(

1582586674
mikdusan
is XDG Base Directory Specification a linux thing or ok for FreeBSD too?

1582586746
andrewrk
fengb, I think this is one of those problems where you can simply ignore it and it will go away

1582586772
andrewrk
mikdusan, maybe the #freebsd channel would have a good answer to that question

1582586849
mikdusan
searching it shows up at freedesktop.org ; I'm wondering if we should honor XDG_CACHE_HOME on macos too. currently it kicks in for anything not {windows,macos}

1582586858
mikdusan
not a big deal

1582587018
andrewrk
mikdusan, I think that you are a good example of a macos user - what behavior would you expect?

1582587055
andrewrk
if you would expect it to honor XDG_CACHE_HOME on macos then I agree

1582587168
kristoff_it
man I was able to give a good refactoring to my project now that I can import from `..`! That was satisfying. Time to go to bed for me, have a good rest of day to everyone else!

1582587236
andrewrk
good night

1582587246
mikdusan
'night

1582587370
mikdusan
I've never seen XDG_CACHE_HOME defined on macos. Unless it's a

1582587441
mikdusan
or similar. main reason being when I do tests (for example memory profiling) I do want to start from scratch. make zig do as much work as possible. and `rm -fr` on anything like ~/Application\ Support/zig is freaking error-prone

1582587459
mikdusan
thanks apple for putting spaces in paths

1582587538
andrewrk
ZIG_CACHE is probably a good idea

1582587550
andrewrk
ZIG_GLOBAL_CACHE at least

1582587613
mikdusan
and alas, macos doesn't have containers. I really wish they had linux-style containers, or solaris zones. jail support on macos is useless. Sandbox (a macos thing) might hold some promise.

1582587678
fengb
It has Docker for Mac 🙃

1582587698
mikdusan
docker for mac is step1. run linux in a VM. then run docker in linux VM :P

