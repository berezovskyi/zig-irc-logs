1580861739
fengb
Nope

1580864122
student069
hey would anyone mind looking over some zig code and giving some constructive criticism? I made a little version of "tail" :).

1580865634
fengb
Few quick things: replace `foo() catch |err| return err` with `try foo()`

1580865651
student069
ohhh i forgot that is syntactic sugar and == same

1580865701
fengb
Generally you want to check the error and only handle what makes sense.

1580865753
fengb
switch (err) and match specific ones, returning the rest. Itâ€™ll prevent new errors from being eaten if the api changes

1580865817
student069
oh neat that makes sense... so i really only want to catch a specific error (like Unseekable or something for seekTo)

1580865930
fengb
There should be a read until eof helper

1580865964
student069
oh yea i was wondering about that actually. There is an error it returns if the buffer is too small... is that something i should just catch and continue looping on?

1580866049
student069
using readUntilDelimiterorEOF makes sense i think then. I went a little out of my way when somethign is there it seems haha

1580866070
fengb
actually I think what you have makes more sense

1580866209
student069
oh? ok cool

1580866460
student069
fengb do you think thats something that could possibly improved upon upstream? I wouldn't mind taking a shot at helping out :D

1580866822
fengb


1580866927
student069
oh cool thanks bruv. Appreciate your help

1580869455
pixelherodev
Regarding range iteration: could easily write a RangeIterator type

1580869471
pixelherodev
Then do `var i = RangeIterator(min, max); while (i.next()) |index| {}`

1580869487
pixelherodev
There's just not much point

1580869511
pixelherodev
Since the equivalent untyped code is simpler and smaller

1580872061
seoushi
is there something like calloc? where an alloc will also zero out the memory?

1580872186
mikdusan
for external C structs?

1580872307
seoushi
no, just got allocated memory for zig

1580872470
pixelherodev
`allocator.alloc();std.mem.set`?

1580872683
seoushi
thanks.. looks like there is @memset as well but the docs say a for loop like I'm doing will be turned into a memset anyways. So I think I'll stick with the for loop

1580874534
fengb


1580875724
fengb
Oh hey, if we get tuple declarations, I think we can get a pretty decent struct of arrays

1580877186
pixelherodev
fengb, sure, but did you tune for perf yet?

1580877194
pixelherodev
The fastest there is a manually optimized version

1580877196
pixelherodev
Right?

1580877244
fengb
I took a quick look at the other tuned versions and didn't find any glaring differences

1580877299
fengb
Although we're still better than the tuned Rust implementation so yay :P

1580877326
pixelherodev
Sure, but until it beats C++ I'm not happy :)

1580877365
pixelherodev
Maybe compare LLVM IR produced by Clang with that from Zig?

1580877374
pixelherodev
Clang's is 1.05, so that might provide some useful hints

1580877374
fengb
The only thing I noticed with C++ was using references

1580877381
pixelherodev
As opposed to?

1580877395
fengb
Mutating references instead of returning pointers

1580877415
pixelherodev
I mean, you're already using an arenaallocator

1580877416
pixelherodev
Ohhh

1580877421
pixelherodev
You're using the pageallocator?

1580877428
pixelherodev
I don't think that's exactly highly performant

1580877437
pixelherodev
IIRC that's a placeholder

1580877442
fengb
That too. I could glue in a C allocator real quick

1580877459
pixelherodev
Basically, a

1580877464
pixelherodev
I was just going to suggest that :)

1580877488
pixelherodev
Does the C++ version do error checking?

1580877496
pixelherodev
`            0 => try tree.insert(cur),`

1580877508
pixelherodev
If not, maybe try a `catch unreachable` instead?

1580877527
pixelherodev
That'll get optimized out of the release build, which is *bad*, but again, I highly doubt the C++ version checks if allocations succeed

1580877559
pixelherodev
Yep

1580877617
fengb
About the same with both changes

1580877694
pixelherodev
Just to confirm, building in release fast mode?

1580877709
pixelherodev
In a similar vein, I assume you ran the tuned test locally?

1580877748
fengb
Yeah

1580877752
pixelherodev
Mind pasting the IR for both somewhere?

1580877761
pixelherodev
If you do, I can always generate it locally

1580877871
fengb
lol nope, `*#69 = Assertion failed at /Users/benjamin.feng/projects/zig/src/ir.cpp:10379 in const_ptr_pointee. This is a bug in the Zig compiler.`

1580877876
fengb
But only when doing verbose-ir

1580877881
pixelherodev
Not verbose-ir

1580877884
pixelherodev
`verbose-llvm-ir`

1580877893
pixelherodev
I don't know Zig IR that well :P

1580877901
pixelherodev
And it'd be useless for comparison to Clang's output

1580877907
fengb
Segmentation fault: 11

1580877923
pixelherodev
... huh

1580877928
pixelherodev
Guess I'll do it locally then

1580877952
fengb
Oddly, it got to "optimizations"

1580877960
pixelherodev
Emits locally w/o issue

1580877967
fengb
So maybe it printed okay? But then it could be corrupted IR

1580877968
pixelherodev
`zig build-exe main.zig --emit llvm-ir`

1580877990
fengb
Oh I wasn't supposed to release-fast it?

1580877994
pixelherodev
verbose-llvm-ir works, but dumps to stdout/stderr

1580877996
pixelherodev
Oh wait right

1580877997
pixelherodev
Whoops

1580878009
pixelherodev
That seems to work locally also

1580878010
pixelherodev
Yeah

1580878016
pixelherodev
Thanks for the reminder though

1580878025
fengb
Yeah that worked. It was teh optimizer that crashed on me

1580878041
pixelherodev
No I mean, `zig --release-fast --emit llvm-ir` worked

1580878044
fengb
So it dumped the stuff... then kerploded

1580878054
pixelherodev
For me it worked fine

1580878077
pixelherodev
0.5.0+4d54e9a4f

1580878125
fengb
That was 1.5 months ago

1580878126
fengb
Gotta upgrade to bleeding edge :P

1580878129
daurnimator
I'll be completing the GSoC application tonight; can people please add/complete any project ideas they have?

1580878140
pixelherodev
daurnimator, Zig self-hosted compiler backend

1580878154
pixelherodev
That's what I intend to work on if I apply for a Zig project

1580878193
pixelherodev
self-hosted linking is mentioned at present; I'm referring to a full backend

1580878310
daurnimator
BaroqueLarouche: what if I want a raw file but not installed?

1580878343
pixelherodev
fengb, wait really? Could've sworn I upgrade less than two weeks ago

1580878831
pixelherodev
Oh wait, probably easier to just look at the assembly

1580878837
pixelherodev
That way, there's not all the metadata in the way

1580878847
pixelherodev
Or maybe I'm too used to writing assembly directly :P

1580879123
pixelherodev
Okay, so I get ~0.32s for `clang -O3` with the tuned C++ version, and ~0.44s for `zig --release-fast`

1580879150
pixelherodev
Going to do proper profiling (i.e. callgrind)

1580879209
fengb
You care a lot more than me :P

1580879296
fengb
Is it possible to doc comment the file? Just /// at the very top?

1580879710
mikdusan
try calling libc's rand()

1580880601
pixelherodev
That's worse

1580880606
pixelherodev
Though that might be because of int casting

1580880621
pixelherodev
Ohhh, it might be because the Zig RNG uses a larger type for rand

1580880675
pixelherodev
I take that back

1580880678
pixelherodev
It's probably faster

1580880683
pixelherodev
But my CPU is under intense load right now :P

1580880825
pixelherodev
mikdusan, if there's a real difference, it's tiny

1580880855
pixelherodev
Like, ~50ms average tops

1580880859
pixelherodev
at a rough estimate

1580880902
fengb
50ms is 10% of execution time :P

1580880927
pixelherodev
That's because I meant 5, not 50 :P

1580880937
pixelherodev
Hold on,integrating my earlier suggestions and retrying

1580880989
mikdusan
not a big diff

1580881009
pixelherodev
Switching to the C allocator doesn't noticeably improve perf either

1580881057
pixelherodev
If anything, it's slightly worse now

1580881089
pixelherodev
It's possible the overhead of the extra function call ~1,000,000 times might be bad if the allocator call isn't inlined

1580881135
mikdusan
could make a bump allocator to factor it out

1580881146
pixelherodev
Or just modify that call to be inline locally :P

1580881151
fengb
That's what the arena was for :P

1580881159
mikdusan
it's an interface

1580881185
pixelherodev
"unable to inline func"

1580881188
pixelherodev
Yeah

1580881196
pixelherodev
fengb, that won't help; it's still dealing with overhead on each call

1580881202
pixelherodev
That removes the overhead of `free`

1580881211
pixelherodev
The jumparound to get to malloc is still there

1580881214
fengb
Ah well allocators can't be inlined atm

1580881219
mikdusan
arena remove overhead of free, and makes allocs ridiculously fast

1580881234
fengb
Erh interfaces

1580881273
pixelherodev
"ridiculously fast" sure, but on a practical level that's still multiple extra `call + ret` pairs that the C++ version doesn't have

1580881282
pixelherodev
two calls and two rets for every single allocation

1580881285
pixelherodev
Of which there are

1580881354
pixelherodev
That's easily more than four million extraneous instructions

1580881368
pixelherodev
Add in the casting and such, and it's probably a bit higher

1580881396
fengb
So... get rid of the allocator, make an array of nodes and bump it forward?

1580881401
pixelherodev
Maybe

1580881406
fengb
Feels a little cheating heh

1580881429
pixelherodev
Sure, but that's kind of the point

1580881439
pixelherodev
I mean, for a tuned version

1580881455
pixelherodev
The simple/expressive version should definitely stick to a std.mem.Allocator

1580881491
mikdusan
well I gave it a bump allocator and no gains

1580881531
pixelherodev
I'm going to do actual profiling; rule one of optimizing: humans suck at it :)

1580881537
fengb
I destroyed the productivity of this room

1580881541
pixelherodev
:P

1580881583
pixelherodev
Or, possibly, you may have found some performance problems that need to be addressed so Zig can live up to its promised "faster than C" performance :)

1580881686
fengb
Oops, I never called free. Leak!

1580881699
pixelherodev
Yeah you did...

1580881704
pixelherodev
`defer arena.deinit()`?

1580881783
fengb
I meant inside the tree

1580881799
fengb
So wiring in c_allocator would leak like a sieve

1580881803
pixelherodev
So? Shouldn't that be going through the arenaallocator?

1580881922
daurnimator
pixelherodev: can you put a proposal on the GSoC ideas page? and.... who would you want/expect to mentor it?

1580881936
pixelherodev
daurnimator, yes to the first

1580881938
pixelherodev
Not sure

1580881955
pixelherodev
Anyone who is interested I suppose?

1580882091
fengb
Maybe ~10ms faster with a simple bump allocator

1580882093
daurnimator
I've been considering putting up a http library as an option..... but I don't think we have the work unblocked enough

1580882121
daurnimator
Maybe I should put up the command-driven io layer I've been thinking about for a while

1580882203
pixelherodev
If this helps, ~52% of time is spent in Node.splitBinary, and about 40% is Node.merge

1580882212
pixelherodev
The arena is only ~2.5% of CPU usage

1580882220
pixelherodev
s/arena/allocations

1580882234
pixelherodev
RNG is similarly ~2%

1580882252
daurnimator
that's actually quite high

1580882272
pixelherodev
Well yeah

1580882272
daurnimator
the interface abstraction is going to be a significant portion of that

1580882278
pixelherodev
But relatively speaking it's not that much

1580882298
pixelherodev
fengb, is it actually valid to give splitBinary a pair of nulls?

1580882304
daurnimator
if you tried out mixins you would probably drop those 2.5 and 2% away....

1580882329
fengb
No idea. I just translated the code. I wasn't even confident it's correct, but it matches the answer

1580882355
pixelherodev
I'm going to work on improving the performance (as the person who probably cares the most :P), I'll let you know how it goes

1580882413
pixelherodev
Hmm

1580882485
fengb
Great, I have 3x versions of the same enum and now it's coming to haunt me

1580882764
pixelherodev
daurnimator, the interface abstraction shouldn't cost that much, should it?

1580882773
pixelherodev
Hold on, clarification: which interfaces?

1580882844
daurnimator
pixelherodev: e.g. `arenaallocator.free()` despite being theorectically a no-op needs to go through a pointer lookup and a function call

1580882884
daurnimator
and for a bump allocator; I believe that we can't optimize (i.e. inline) across the allocator interface?

1580882966
pixelherodev
Oh right, yeah...

1580882997
pixelherodev
fengb, how big did the allocator need to be?

1580883017
pixelherodev
Going to try cheating a little bit more

1580883156
pixelherodev
Ohhh I think I know why Zig is losing out

1580883174
pixelherodev
Pretty sure the C++ tuned version effectively uses a

1580883219
pixelherodev
Which means it doesn't even need to bother with actual malloc() calls more than a few times *ever*, so regardless of whatever allocator we use our allocations are significant

1580883309
pixelherodev
`total heap usage: 9 allocs, 9 frees` for the C++ version

1580883336
pixelherodev
Whereas IIRC a Zig ArenaAllocator will be making a loooot of them

1580883508
pixelherodev
daurnimator, Zig actually spends less time in RNG than C++ does

1580883569
pixelherodev
C++ is 4% of X, Zig is 2% of 1.1x; half the

1580883717
pixelherodev
Which explains why switching to rand made it worse; I think Zig's RNG implementation outperforms C's

1580883810
mikdusan
i didn't see any effect switching all usize -> u32, and using c.rand(). I saw a 4.5% improvment by using a bump allocator for all nodes.

1580883871
pixelherodev
I saw a decrease of ~1-2% by using c.rand

1580884034
fengb
`var nodes = try std.heap.page_allocator.alloc(Node, 0x100000);`

1580884072
fengb
Ah probably what mikdusan did

1580884129
mikdusan
heh i just made at file scope `var heap: [1024*1024]Node = undefined;` and then `var heap_next: usize = 0;` lol

1580884234
daurnimator
mikdusan: make a GSoC proposal :)

1580884281
pixelherodev
Here's an interesting note: the C++ functions don't return values, they return void

1580884290
pixelherodev
They use output pointers passed through as arguments

1580884442
fengb
I had trouble getting the stack to compile. Kept getting seg faults

1580884632
mikdusan
daurnimator: regex

1580885067
fengb
String/html template engine?

1580885369
adamkowalski
can default fields of structs reference other fields?

1580885443
adamkowalski
I want to have a struct which holds a allocator, and a hash map. If no hash map is provided I want to create one using the structs allocator field

1580885635
fengb
Probably better off with an init function

1580885686
Snektron
Also, adamkowaldki, you really gotta watch out with that

1580885710
Snektron
If the struct moves the reference to your allocator becomes invalid of course

1580885726
pixelherodev
Hmm, yeah, looking at the C++ source, not returning values was part of the perf tuning

1580885838
pixelherodev
According to the chart on GH, that change brings its perf from 1.2x to 1.1x the fastest, whereas we're currently at ~1.25x

1580885882
pixelherodev
Closer to 1.4x for me actually

1580885964
nofmal
hello, i was wondering if arena allocator is the closest thing equivalent to c malloc?

1580885987
pixelherodev
No, arena allocator isn't a normal allocator at all

1580886001
pixelherodev
The closest current equivalent is probably std.heap.page_allocator

1580886116
fengb
We donâ€™t have a general purpose allocator in std yet

1580886184
nofmal
i see, so page_allocator it is. thank you

1580886251
nofmal
fengb: yeah i knew that, which is why i asked

1580886273
mikdusan
nofmal: page_allocator + arena make good choices. page allocator alone is probably not a good idea

1580886356
nofmal
you can combine the two? how?

1580886367
mikdusan
arena is initialized with a backing allocator

1580886416
mikdusan
use page_allocator as backing

1580886459
nofmal
you meant fallback_allocator?

1580886520
nofmal
backing allocator as in fallback_allocator?

1580886620
mikdusan
I don't want to nitpick but never liked the term fallback-allocator. To me that implies failure. So arena uses a child/underlying/fallback/backing allocator to do the

1580886686
mikdusan
and you don't have to call arena.deallocate -- it's a noop. you free all accumulated allocations at once by calling arena_state.deinit()

1580886696
fengb
Just to be confusing, sometimes itâ€™s called a child allocator :P

1580886705
mikdusan
lol

1580886707
mikdusan
I know right

1580886826
nofmal
so this is how you use the code i'm guessing?: `var arena_allocator = ArenaAllocator.init(page_allocator);`

1580886848
nofmal
and then `arena_allocator.deinit()` right?

1580886923
mikdusan
nofmal: short example:

1580886999
daurnimator
mikdusan: like... porting re2?

1580887002
mikdusan
in that example Buffer will use arena. possibly multiple times. and at end of block arena frees all memory it may have allocated via page_allocator

1580887112
nofmal
i see, thank you!

1580887156
pixelherodev
It possible to do a release fast build that still has debug info?

1580887169
mikdusan
daurnimator: I don't really know which would be a good base. I use ruby often so Onigmo is fine but maybe perf is paramount other choices

1580887194
pixelherodev
I'd vote standard

1580887204
pixelherodev
Don't want to optimize based on profiling data of the debug build, but release-fast build doesn't have enough good info

1580887213
pixelherodev
... those are two different conversation threads.

1580887266
daurnimator
mikdusan: re2 is notable for it's predictable resource usage

1580887418
mikdusan
pixelherodev: I understand that clang has a few specialized options, not sure what codegen selects to be honest. clang front end exposes -Og, -g, and I don't know what -g0, -g2, -g3, -ggdb0 ... -ggdb3 or -glldb or -gsce can do :(

1580887485
pixelherodev
There a way to change it with Zig?

1580887509
mikdusan
pixelherodev: not that I know of

1580887618
mikdusan
hey there's a GSoC idea. implement zig userland to show all compiler options used. and have stage1 emit that info during --verbose-codegen . zig0 need not apply :)

1580887691
pixelherodev
Keep in mind GSoC is supposed to last for a decent while

1580887808
mikdusan
daurnimator: this is re2 you refer to?

1580891967
daurnimator
mikdusan: yes

1580892797
daurnimator
mikdusan: and we can probably pre-compile eagerly at compile time in zig :)

1580894774
mikdusan


1580894837
mikdusan
sleep a microsecond (yes something small). then expect NEVER to have 50ms time spread... on a non-realtime scheduled OS... running in my slow VM... :)

1580894883
daurnimator
mikdusan: context?

1580894885
mikdusan
about 1-in-10 times that test fails during usual `zig build test`

1580894964
mikdusan
it also could be because time_1 - time_0 can be 0 too

1580895025
mikdusan
well maybe not. sleep( 1 million ns which is 1 millisecond ). so I guess milliTimestamp() is guaranteed to bump

1580895150
mikdusan
but 50 milliseconds margin ... not guaranteed between a get-time / sleep iota / get-time

1580907264
daurnimator
mikdusan: you broke packaging >.<

1580907283
mikdusan
uh oh

1580907294
daurnimator
(

1580907454
mikdusan
is that a cmake thing?

1580907457
daurnimator
yep

1580907460
daurnimator


1580907503
mikdusan
> "This is very poorly documented"

1580907505
mikdusan
heh

1580907586
daurnimator
mikdusan: buried in an obscure official cmake wiki section:

1580907789
mikdusan
what is the invocation syntax? to

1580907812
daurnimator
mikdusan: both.. but also the latter

1580907831
mikdusan
ok, I'll add None to the list :)

1580907856
daurnimator
mikdusan: in zig's build system we coerce unset to Debug.

1580907878
daurnimator
vs the CMake norm of coercing unset to None

1580907934
daurnimator
which means that for zig in particular, we only support `CMAKE_BUILD_TYPE=None`

1580907951
mikdusan
as in, do we want an error if it's blank?

1580907958
daurnimator
correct

1580908003
daurnimator


1580908028
daurnimator
should update the option description to mention the existence of None as well while you're in there :)

1580908054
mikdusan
but here's the thing.. i just invoked without CMAKE_BUILD_TYPE on command line... wasn't caught

1580908088
daurnimator
mikdusan: the very first thing we do is coerce unset to Debug. see link I pasted just above

1580908115
mikdusan
ah ok I thought you wanted it to error on blank. never mind.

1580908169
mikdusan
previously I typo'd CMAKE_BUILD_TYPE=debug and... head scratches ensued trying to figure out why the compile options weren't correct

1580908877
mikdusan
daurnimator: can you quick eyeball?

1580908930
daurnimator
mikdusan: looks fine to me; though the inconsistent order makes me squirm :P

1580908941
mikdusan
ah lol i just saw that.

1580909305
shakesoda
before i attempt, has anyone tried doing any lua modules with zig

1580909316
daurnimator
shakesoda: yep

1580909331
daurnimator
shakesoda:

1580909578
shakesoda
daurnimator: hm, so close!

1580909638
daurnimator
shakesoda: yeah; essentially blocked on

1580909673
SyrupThinker
I'm working on a pure Lua 5.4 implementation that tries to keep the API mostly compatible, no ETA yet though. Currently only have parts of the parser done

1580909711
shakesoda
daurnimator: how lazy is the evaluation? can you define your own pop that does the settop to work around?

1580909711
daurnimator
SyrupThinker: 1. 5.4 isn't released yet so you're chasing a moving target. 2. never start a lua implementation from the parser! start from lvm.c; you'll do much better

1580909722
daurnimator
shakesoda: yes you can.

1580909753
shakesoda
i can certainly live with that as a temporary state of affairs

1580909853
SyrupThinker
daurnimator: Pff, you're not my mom :P

1580909853
SyrupThinker
Also I'm confident the language won't change much considering its beta

1580909938
SyrupThinker
Also the grammar is quite simple, why wouldn't I write the parser from scratch?

1580909987
SyrupThinker
Being implementation incompatible but reference compatible exposes a bug in the reference implementation the way I see it

1580909988
fengb
Zig moves so fast, everything else looks stable ðŸ™ƒ

1580909993
daurnimator
SyrupThinker: because you'll want to be using output of luac to compare anyway :)

1580910005
mq32
fengb, true dat!

1580910056
SyrupThinker
The bytecode isn't specced the way I see it so I'm not targeting that, at least for the moment

1580910072
daurnimator
SyrupThinker: it's worth it to start with

1580910201
SyrupThinker
How so, then I would need to implement a bytecode generator and/or interpreter that I do not plan on using.

1580910235
daurnimator
because it means you can work on just one first; and use the existing extensive test suites

1580910242
SyrupThinker
And I'll definitely start chasing a moving target trying to stay compatible with clua's bytecode

1580910257
daurnimator
it doesn't move that fast

1580910278
SyrupThinker
Faster than the language itself

1580910288
daurnimator
? not really

1580910323
SyrupThinker
You have no guarantees for the bytecode so it can change between every compiler release

1580910358
SyrupThinker
And incompatible language change otoh is quite unlikely

1580910361
SyrupThinker
*An

1580910372
daurnimator
depends if you mean minor or major changes

1580910372
SyrupThinker
I think we are going off topic though

1580911034
shakesoda
is there anything particularly of note in lua 5.4

1580911052
shakesoda
i live in luajit land so i'm a bit out of the loop with puc lua

1580911162
SyrupThinker
They added destructors for lexical scopes

1580911219
shakesoda
like zig's defer?

1580911230
shakesoda
or what

1580911244
daurnimator
yep

1580911249
SyrupThinker
And change some type coercion stuff.

1580911250
SyrupThinker
The way I understand it yed

1580911253
shakesoda
neat

1580911492
shakesoda
oh, they added const

1580911561
SyrupThinker
I thought that was part of 5.3

1580911579
daurnimator
nope

1580911593
SyrupThinker
Also its not quite defer because its a metatable attribute

1580912220
SyrupThinker
Huh, misremembered, must have heard of the const change way earlier than close

1580912453
daurnimator
andrewrk: LMK when you are around. finishing off GSoC thing now

1580912615
Snektron
Is there a more elaborate list of patch notes of lua 5.4?

1580912627
daurnimator
Snektron: its not released yet..... so no :P

1580912628
Snektron
The main ones are not very useful

1580912713
Snektron
oh, i see

1580913473
BaroqueLarouche
daurnimator: you mean without the Zig build system ?

1580913486
BaroqueLarouche
daurnimator: for install raw

1580913487
fengb
Is there a way to doc comment the file?

1580913487
daurnimator
BaroqueLarouche: no I mean with

1580914584
daurnimator
We need a good description of zig...

1580914593
daurnimator
Our homepage goes straight to a list of features

1580914598
daurnimator
without an actual mission or anything

1580914628
shakesoda
isn't it wonderful?

1580914633
shakesoda
straight to the point!

1580914875
shakesoda
i quite like the homepage and how easy it is to get to most of what i care about (although the standard library documentation is buried)

1580914881
betawaffle
I wish I could do `.Variant{ ... }` as a shortcut for `.{ .Variant = .{ ... }, }`

1580915138
daurnimator
betawaffle: that would be ambiguous

1580915142
fengb
Didn't Zig used to have a summary, and people on HN complained there's no examples?

1580915147
betawaffle
daurnimator: oh?

1580915187
betawaffle
is there not enough type info at that point?

1580915201
shakesoda
what would it be ambiguous with?

1580915212
daurnimator
betawaffle: hmmmm, I guess not? I was thinking inside of `{}` it could be either a tuple with 1 element or a union

1580915260
daurnimator
fengb: can have both :p

1580915265
companion_cube
ambiguities are something any parser generator will tell you about :)

1580915265
betawaffle
right, the union is what i'm trying to shorten

1580915298
betawaffle
we already have .Variant (an enum, which coerces to a void union variant)

1580915340
betawaffle
it would only work for struct-like values, similar to the other only working for void-like values

1580915377
shakesoda
unrelated: thinking about reimplementing my rendering library in zig for some good practice ->

1580915419
betawaffle
daurnimator: i guess what i'm suggesting is syntactic sugar for that pattern of a single field of a struct-like thing which has a value that is also struct-like

1580915432
frmdstryr
Is this a known issue

1580915436
betawaffle
.field_name{ field value }

1580915464
betawaffle
afaik, that's just invalid syntax now, is it not?

1580916358
daurnimator
frmdstryr: I haven't seen that one before I think. file an issue :)

1580916431
frmdstryr
Thanks, just did

1580920323
metaleap
lol wikipedia.. "Some early C compilers had the feature, now seen as an annoyance, of generating a warning on any function call that did not use the function's returned value."

1580920716
fengb
Well, it's a warning. Those are generally annoying

1580920734
fengb
And there's no good way to silence it, so double annoying

1580921764
metaleap
in zig its an error and never found it annoying. yeah warnings blow tho

1580921795
fengb
Because we can do `_ = foo()`

1580921808
metaleap
ah yeah just occurred to me C likely never had such

1580922666
via
(void)foo() was the way to silence those iirc

1580922713
metaleap
so i had a []foo typed struct field, and a method mutating inside it. but it was initialized via &[_]foo{....} with no runtime values, all kinda constants/statically known. mutation caused a segfault and i believe that was simply some sort of constant data region not to be written to. so far so fair. but my question:

1580922780
metaleap
couldnt this be a compiler error? a case of "cannot assign to constant". in fact the &[_] should maybe "type into" a `[]const foo` in other words?

1580922864
metaleap
(so to clarify there were just statically-known string/int literals in the initialization of the []foo typed field with &[_]foo{...} )

1580923009
Snektron
The &[_]foo{...} was probably created on the stack

1580923120
metaleap
yeah ok but in this case the mutation happened inside the same fn as the initialization, just in the very next statement

1580923135
metaleap
as in the ptr to the struct itself was still valid

1580923156
Snektron
can you link me the code?

1580923174
metaleap
its already gone :D will repro shortly

1580925991
ForLoveOfCats
I'm trying to understand what portions of the bootstrap compiler in C++ is optimized and what portions are not. It seems from reading the CMakeLists.txt that the software float library is compiled with -O3 as are the files `blake2b.c` and `parse_f128.c`. Is my understanding of this correct?

1580926057
andrewrk
ForLoveOfCats, yes

1580926192
ForLoveOfCats
Thank you for confirming. How best can I compile the rest of the source with -O2 for experimentation purposes?

1580926264
andrewrk
configure with -DCMAKE_BUILD_TYPE=Release

1580926402
ForLoveOfCats
Awesome, thank you for your time

1580926568
andrewrk
no problem

1580926862
fengb
andrewrk: is there a way to doc comment the file?

1580927030
andrewrk
I think it's not implemented but accepted proposal to make the first doc comment in a file apply to the struct that is the file itself

1580927076
andrewrk
oh

1580927080
andrewrk
we have //!

1580927093
andrewrk
like rust

1580927331
fengb
Oh okay cool

1580927389
fengb
And files as full structs with fields is the new gold standard right?

1580927427
andrewrk
yes although I haven't tried it yet so maybe you run into something I haven't thought of

1580927706
metaleap
so an @import yields not a struct{...}{} ("isntance") but a struct{...} `type`-of-sorts

1580927709
metaleap
?

1580927771
fengb
Yeah, all files are structs. The std currently assumes it's always an empty struct but you can put fields in it

1580927773
metaleap
ah, just checked, a `type`

1580927803
metaleap
funky

1580927858
fengb


1580927905
andrewrk
it makes things consistent when dealing with reflection

1580928208
student069
I was wondering if someone could answer a question I had about the stat structure? It looks like if I wanted to access the allocated (block) size of a file I would need to call OS specific stat calls. Is that correct?

1580928371
andrewrk
student069, that's correct - the file system is accessed via OS-specific syscalls

1580928411
andrewrk
however the zig standard library has cross platform abstractions for this. see fs.File.stat:

1580928644
seoushi
neat. I didn't know about the files as structs thing. I think that will be my next refactor.

1580929238
andrewrk
I think slice [start..end] was a mistake :( it should have been [start..len]

1580929268
andrewrk
you can get to it like this: [start..][0..len]

1580929273
betawaffle
andrewrk: what makes you say that?

1580929286
betawaffle
(it's the same as Go, at least)

1580929325
andrewrk
I think it will be more obvious once

1580929343
betawaffle
what about supporting both, with [start..end] and [start..+len] (or something along those lines?

1580929381
andrewrk
also because [start..end] emits a subtraction. and this pattern is common: [start..start+len] which is silly because now zig is emitting a sub and an add that cancel each other out. the actual slice has len

1580929541
fengb
[start..end] [start...len] ðŸ™ƒ

1580929557
betawaffle
that could be a huge footgun

1580929575
fengb
[start....inclusive_end]

1580929630
andrewrk
#863 means that comptime len will be useful, but if your `start` is runtime-known, then `start+len` will be runtime known even if `len` is comptime known. that's the main problem

1580929681
andrewrk
so we'll start to see [start..][0..len] which is more punishing to type than it should be, since it's handy type-wise

1580929689
fengb
I do like ..len. It seems like most of the time I care about len more than end

1580929690
betawaffle
it doesn't help that start+len also tends to be more verbose

1580929712
betawaffle
len is more generally useful

1580929742
betawaffle
so if you want end, it would become [start..end-start]

1580929752
fengb
Although `decl.name[2..2]` this looks funny

1580929759
andrewrk
if the transition happens, I think we'll temporarily have [start,len] (the , sort of indicates that these are fields of the slice struct)

1580929776
fengb
More intentful but weirder looking as opposed to `decl.name[2..4]`

1580929778
andrewrk
sorry, the , would be permanent, but having both .. and , would be temporary

1580929787
andrewrk
decl.name[2,2]

1580929789
metaleap
slicing is from start to end in my book. think intuitively that all [] are "indexers", taking an index. slicings repurposing that syntax is ok if its still "talking indices" rather than "one thing left, another thing right".

1580929807
fengb
[2,2] looks a little better since it's not a weird range

1580929808
seoushi
that kinda reads like a multi array index

1580929826
metaleap
true

1580929841
metaleap
.. is almost "universally understood" in contrast

1580929864
seoushi
I don't think .. is used with a length tho. usualy a range

1580929874
metaleap
yeah.

1580929903
fengb
Yeah

1580929912
metaleap
would rather have it stay that way,

1580929913
betawaffle
definitely not

1580929948
fengb
But... it'd also get rid of the confusion between `slice[0..len]` and switch { 0...end =>`

1580930034
andrewrk
I've been conventionally using "end" to mean "exclusive"

1580930100
betawaffle
hey... while we're talking about indexing... can we add support for "indexing" bits in integers?

1580930111
betawaffle
and slicing them to shorter int types, et

1580930113
betawaffle
etc*

1580930134
andrewrk
"add support for" words of my nightmares

1580930143
betawaffle
like, as a shortcut to @truncate(uN, src >> start)

1580930173
student069
andrewrk so anything not in the Stat struct abstraction would need to be os specific called? Thanks :D

1580930196
andrewrk
student069, that's correct. you can also make a case for adding to the abstraction

1580930233
andrewrk
betawaffle, more seriously - I think the language provides enough tools that a userland implementation of that API would be reasonable

1580930245
student069
andrewrk what would you think about allocated size (vs. just normal size)? :P

1580930263
betawaffle
how can you do userland indexing?

1580930340
fengb
PackedIntArray probably does all of what you want

1580930485
metaleap
"also because [start..end] emits a subtraction" why is this? would instead rather have expected [start..len] to emit an addition?!  :D

1580930512
metaleap
as i'm assuming start-addr + len-val

1580930521
betawaffle
metaleap: it's because the length is stored in the slice, not the end

1580930524
metaleap
aah i get it for the new len

1580930538
metaleap
betawaffle: yup thx =)

1580930645
metaleap
yeah ok now i can get on board with this, but indeed range-syntax .. could be background-distracting for the habitual code-reader & more so for the newcomer. now [,] looks like multi-dim arrs but go's syntax [x:y] is also an option perhaps? not too ugly at least, and not so pre-loaded with meaning as range [..]

1580930717
betawaffle
well, zig has multidim arrays and that isn't the syntax for it

1580930721
betawaffle
so i think it's ok

1580930734
metaleap
oops ok i didnt realize about them

1580931019
andrewrk
zig's translate-c requires a C tokenizer and parser, which is now exposed in std.c

1580931033
betawaffle
:o

1580931388
fengb
metaleap: we're already using `[:0]` for sentinel termination

1580931408
metaleap
aah you're right

1580931458
metaleap
havent needed it so far, hence dropped from head's l1 cache

1580931483
andrewrk
it's mostly behind the scenes, making sure you don't accidentally get a buffer overflow

1580931508
betawaffle
is there a use-case for non-zero sentinels?

1580931774
fengb
Replicate cobol systems with 999 sentinels? :P

1580931883
Snektron
Theres always some weird system out there that uses it

1580931891
Snektron
kind of like CHAR_BIT not being 8

1580931993
fengb
More seriously, we needed both 0 and null, so instead of making sentinels specially hard coded, it makes more sense to support any value

1580932528
andrewrk
^

1580932589
andrewrk
maybe the return value of readLine(). it solves the problem of "does the result have the line in it or not?" answer is no but it's there in memory if you want to rely on it

1580933698
pixelherodev
Or, if you have an enum with a special marker for "no more of this enum," you could have e.g. a `[*:EndMarker]EnumType`

1580935356
andrewrk
finally have llvm10 branch running with debug llvm build (asserts enabled) with some chance of the tests passing. will find out in 20+ hours

1580935551
seoushi
is "continue :label" still a thing? getting a compile error when trying to use it

1580935579
seoushi
nm.. was missing a :

1580935981
pixelherodev
I've had something like that where I put the loop label in the wrong spot :P

1580938671
andrewrk
new musl website launched:

1580938676
andrewrk
nice little link to zig there

1580941405
Snektron
Weird how a type parameter doesn't have to be comptime if its passed as a `var`

1580941427
Snektron
`fn a(b: var) void { const c: b = 10; } a(i32);`

1580942000
pixelherodev
Snektron, it is comptime

1580942004
pixelherodev
All `var` arguments are IIRC

1580942261
protty
Hey all, am trying to port a mutex impl I wrote in rust (

1580945317
metaleap
woohoo my LSP's slow progress got to the "hello world" stage :P

1580945466
jaredmm
I started going through the LSP spec page about six months ago. I figure I'll be done by 2022.

1580945520
metaleap
hehe whats worse they update current-version-nr as they see fit. by chance i saw sth for 3.15 yesterday that wasnt there 2 weeks ago when i transcribed the typescript defs to zig type-decls

1580945884
metaleap
a solid joy to code such things with comptime powers tho, thats for sure.

1580946484
wilsonk
metaleap: is your code on github for the lsp?

1580946539
metaleap
yeah the jsonrpc lib is in

1580946604
metaleap
(going slow because aiming for protocol-completeness-from-the-outset rather than cobble together bits and pieces as desired haphazardly. the way to not get things Done :)

1580946640
wilsonk
lol, ok thanks

