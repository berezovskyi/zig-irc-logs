1604707675
Kena
Does 0.8.1 represent the stabilization efforts due to the package manager?

1604708725
andrewrk
Kena, it's the first release cycle where it's planned to make bug fix releases

1604709574
fengb
:o

1604709908
Kena
That's a good sign, you are about to reach a point where the cycle release is now intended for industry purposes. Well done Andrew ;)

1604709979
Kena
I thought you already experienced the bug fix release with 0.1.1 but that may be related to other requirements.

1604710093
andrewrk
0.1.1 was because I messed up the cmake code for getting the version from git

1604729801
daurnimator
I rebased

1604738162
foobles
anyone know what the different ResolveStatus are for a type?

1604738233
foobles
i need to compare whether 2 types have the same size in bits, do I need to call `type_resolve(ira->codegen, type, ResolveStatusSizeKnown)` on each one and then use `type_size_bits()` on each?

1604738291
foobles
I am a little confused because it looks like in `type_has_bits()` , there is a lot of special casing for whether the type is a struct, currently `ResolveStatusBeingInferred`, etc. it feels like there are some nuances i am missing

1604747893
dutchie
this FileNotFound error is very annoying

1604760182
marler8997__
been using vscode, and the Zig plugin from Marc Tiehuis really causes the editor to lag, anyone else experience this?

1604760398
Nypsie[m]
Using the Zig plugin as well and not experiencing any lag. Although, most of my files are not more than 2-3k LoC

1604760413
karchnu
Hello, I read a bit the code for std.event.Loop but I didn't see a code using it. Is it usable? Is there an example, even a bit of documentation somewhere?

1604760443
Nypsie[m]
marler8997__: Do you maybe also have ZLS' semantic highlighting turned on?

1604760448
Xavi92
marler8997__: none so far. However, cpptools

1604760460
marler8997__
Nypsie, my source files aren't that large either

1604760461
Xavi92
I'm using v0.2.4 though - it might be old

1604760474
marler8997__
ZLS is another plugin correct? If so, then no I don't have it installed

1604760488
Nypsie[m]
karchnu: The standard library itself makes use of it. Take a look at std.os.

1604760501
karchnu
Nypsie[m]: nice, thanks.

1604760589
Nypsie[m]
marler8997__: Yeah it's the language server. Not sure why the Zig extension is causing so much lag then. Have you verified all options are set correctly? Maybe it's trying to reach some path it cannot find.

1604760634
marler8997__
Nypsie that's a good suggestion, I'll see what I can find

1604760657
ifreund
zls is pretty awesome, I'd definetly give it a try

1604760681
marler8997__
ifreund, I just tried it, didn't get any syntax highlighting, is it supposed to have it?

1604760697
Nypsie[m]
Yes but you need to enable it explicitly

1604760700
ifreund
idk how to set it up with vscode, I use kakoune

1604760713
ifreund
but yeah I get semantic highlighting for types from zls

1604760738
marler8997__
kakoune huh...maybe I need to check that out?

1604760740
alexnask[m]
"editor.semanticHighlighting.enabled":true, in vscode settings, "enable_semantic_tokens" : true in zls.json

1604760773
ifreund
kakoune is really awesome, it's like what vim should have been

1604760778
marler8997__
alexnask, I assume you can configure it in vscode?

1604760793
ifreund
much more intuitive and without a ton of legacy baggage

1604760802
alexnask[m]
No, I should really implement this

1604760808
alexnask[m]
(the configuration directly in vscode)

1604760840
marler8997__
any idea how I would configure it outside vscode?

1604760883
marler8997__
oh, vscode is saying it needs zls exe in path...ok

1604760915
marler8997__
let's see how long this takes me, start the timer :)

1604760993
alexnask[m]
the zls readme is quite good. But in short you need a zls.json file either next to the executable or in the "local configuration" folder of your OS (AppData on windows, /.config by default on linux)

1604761044
marler8997__
I'm going to forgo reading your helpful message for now and we'll see how easy it is :)

1604761067
marler8997__
oh no...I think compiler version issue

1604761079
marler8997__
let's see if zls documents which compiler version it works on...

1604761175
marler8997__
looks like it doesn't, but I've updated the compiler and now it builds

1604761198
marler8997__
ran "zig build config"...and I see funny characters in my shell :(

1604761223
alexnask[m]
`Installing zls is pretty simple. You will need a build of Zig master to build zls.`

1604761247
marler8997__
alexnask, I just built it with latest zig

1604761251
alexnask[m]
phrasing is a bit odd, I will improve it since I will stabilize master branch on 0.7.0 anyway

1604761261
alexnask[m]
I know, just saying it is in the README :P

1604761414
marler8997__
semantic highlighting?

1604761422
marler8997__
is that like syntax highlighting?

1604761481
alexnask[m]
It is, its just what they called it in LSP.

1604761481
alexnask[m]
Also more powerful since its not just regex based

1604761500
Nypsie[m]
It's basically highlighting based on the parsed AST, I believe

1604761540
alexnask[m]
Note that I havent worked hard to optimize this and there are still a couple of bugs (although pretty rare), I would suggest using a release build

1604761785
marler8997__
ok got it working

1604761900
marler8997__
so far much less lag than the Zig plugin

1604761929
alexnask[m]
Here is an example of how you can configure the token colors in vscode (you can differentiate between functions and generic functions, structs and other types etc. ) if you are interested as well ;)

1604761954
marler8997__
that's pretty cool

1604762057
marler8997__
oooo, autocomplete

1604762068
marler8997__
been a while since I had something like that

1604762075
ifreund
goto definition is even better :)

1604762110
alexnask[m]
It even supports custom packages set in build.zig ;)

1604762142
ifreund
indeed, and I have started making use of that recently

1604762162
ifreund
how does that even work though? do you interpret the bulid.zig?

1604762214
alexnask[m]
No I use a custom build runner and extract all the packages defined in all steps

1604762225
ifreund
hice

1604762230
ifreund
s/h/n/

1604762290
alexnask[m]
Due to a caching bug (changing the path of a package in the cli doesnt invalidate the cache of a zig run command), I have to copy it next to build.zig, run it then delete it so if you see a stray build_runner.zig you should delete it

1604762320
ifreund
heh, I have seen that pop up a few times

1604762322
alexnask[m]
That was before 6250 though so I have to check this again, I can probably do this better or fix the compiler to support this

1604762355
ifreund
I wish the zig build system could expose the cache system somehow, would be useful for generated code

1604762402
alexnask[m]
At least it uses the stdlib cache_hash algorithms now, one my major stumbling blocks for supporting cimport and/or @import("builtin") was the old C++ system

1604762410
alexnask[m]
I will reevaluate those in the coming days

1604762528
karchnu
Nypsie[m]: from what I see, there is no abstraction in std.os to be able to use either kqueue or epoll depending on the OS we build for.

1604762547
karchnu
Is that correct?

1604762597
alexnask[m]
Well, std.event.Loop uses both but if you want to write your own, no, you have to interact with the low level APIs

1604764974
Kena
Please what are the incentives for using binary and hexadecimal notations (i.e. `0b` and `0x`) over decimal integers?

1604765026
alexnask[m]
In hex, a pair of two digits is a byte

1604765047
alexnask[m]
So in both notations digits/byte is stable, unlike base 10

1604765125
Kena
What do you mean by stable?

1604765150
alexnask[m]
Well, a pair of hex digits can always be encoded in 1 byte

1604765211
alexnask[m]
Also the information density is higher, so you need less digits

1604765262
ifreund
hex may be much more readable when you need to think about the bit representation of something

1604765276
alexnask[m]
(compare that to say base 10 where for example a 5 digit number will sometimes need 2 bytes to be encoded, sometimes 3)

1604765285
ifreund
i.e. 0xFFFF instead of 65535

1604765318
ifreund
and binary is just a long form of the same thing (0b111111...111)

1604765333
karchnu
alexnask[m]: that was my first question, to see an example of std.event.loop usage. In std.os there is very few examples, from what I saw. I guess I'll just try by myself.

1604765418
alexnask[m]
karchnu: The event loop is still quite experimental.

1604765419
alexnask[m]
However, the usual way you use it is just by using the regular IO functions in stdlib, but with `pub const io_mode = .evented;` in your root file, they will switch over the mode at comptime and register themselves into a global instance of the Loop when necessary

1604765540
alexnask[m]
Relevant source code files are special/start.zig (sets up a loop instance and runs it when in evented mode), std/event/loop.zig, std/os.zig

1604765563
ifreund
karchnu: here's my only real world usage so far:

1604765588
ifreund
it's a kinda weird progam though so I don't know how useful it will be

1604765712
karchnu
alexnask[m]: thanks, I read a bit of loop.zig and os.zig, I'll read start.zig too.

1604765742
karchnu
ifreund: that's a small program, nice to see for a start. :)

1604765977
ifreund
yeah, it's intentionally as small and simple as possible

1604765992
ifreund
(actually all my programs have that goal, some have a larger scope than others though)

1604766037
alexnask[m]
`var buf = [1]u8{undefined} ** std.fmt.count("{}/{}", .{ build_options.rundir_parent, std.math.maxInt(os.uid_t) });` nice

1604766131
ifreund
yeah that made me happy

1604766175
alexnask[m]
I prefer `var buf: [std.fmt.count("{}/{}", .{ build_options.rundir_parent, std.math.maxInt(os.uid_t) })]u8 = undefined;` personally : D

1604766186
ifreund
right, you can do that

1604766195
ifreund
that would be a little nicer

1604766278
Kena
Thanks ifreund and alexnask[m]

1604766433
Kena
So 2 bytes = ( 2^16) bits ?

1604766711
braket
2 bytes = 2^4 bits (16). So 2 bytes gives you 2^16 possible values, if that’s what you meant

1604766975
karchnu
`var buf = [1]u8{undefined} ** number`  this is an allocation of a single array of u8, of an undefined size × number ? That is convoluted. :D

1604766998
Kena
Yes I understand clearly now, thanks braket :)

1604767198
braket
np!

1604767257
Kena
karchnu you can not multiply a undefined size, it makes no sense both for a human or a compiler. You'll raise a compile error.

1604767295
Kena
Moreover, your array has a length == 1

1604767328
karchnu
yes, not undefined size, undefined value actually

1604767383
ifreund
it's a array of length 1 of undefined value repeated N times

1604767398
ifreund
resulting in an array of length N

1604767412
Kena
yes sorry, undefined value. On another note, an array may be declared as `const` as its values won't mutate and because is known at compile-time.

1604767440
Kena
*and because its length is known at compile-time.

1604767470
ifreund
var buf: [5]u8 = ([1]u8{1} ** 3) ++ [2]u8{1, 2};

1604767474
Kena
wait what? Does the compiler will infer its length?

1604767498
ifreund
var buf = [5]u8{1,1,1,1,2};

1604767514
ifreund
these are equivalent, though one is certianly more conovoluted

1604767530
ifreund
Kena: the length can be any comptime known value

1604767569
Kena
But `var buf = [1]u8{undefined} ** number` will raise an error if number != 1 right?

1604767590
ifreund
z6no?

1604767612
Kena
it would be need to replace with `var buf = [_]u8{undefined} ** number;` I think

1604767616
ifreund
it should error if number can't be coerced to a usize, that's all

1604767652
ifreund
var buf = [1]u8{1}

1604767677
ifreund
just look at the [_]u8{1} part, the array literal has one element -> length 1

1604767815
Kena
var number: usize = 15;    var buf = [1]u8{undefined} ** number; tells me  error: unable to evaluate constant expression

1604767834
ifreund
make number const?

1604767840
ifreund
could be the compiler being dumb

1604767927
alexnask[m]
`var` forces number to be a runtime value

1604767934
Kena
weird, I thought I already tried before but yes it compiles with `const`. But thanks for the piece of information because I thought once the length array was declared it couldn't be changed afterwards.

1604767950
ifreund
that is the case

1604767953
alexnask[m]
Kena: The length applies to the array literal

1604768090
alexnask[m]
You should think of the literal any array value, its not special in any way

1604768090
alexnask[m]
So for example `const A = [1]u8{1}

1604768106
alexnask[m]
s/any/as any/g

1604768392
Kena
Allright, I didn't tought that the multiplication pattern `**` could modify the length during the initialization.

1604768437
Kena
ziglearn.zig emphases much more on slices than arrays by the way.

1604770211
g-w1
I get a compile error when building zls. where it uses .macosx instead of .macos. Am i using the wrong compiler version, or is this going to be fixed. im on master.

1604770222
g-w1
once i switch .macosx to .macos it works

1604770270
ifreund
g-w1: that was fixed a while ago, try udating zls and submodules

1604770285
Nypsie[m]
You probably have to update Knownfolders submodule

1604770305
g-w1
ah

1604770627
g-w1
it works. thanks

1604776818
Kena
It's awfully quiet for a release day.

1604779010
ifreund
andrew's probably hard at work

1604780147
Kena
I hope his core contributors support him because it would be sad if he was really alone to undertake all the workload.

1604781403
foobles
does anyone see any potential issues with changing `get_codegen_ptr_type()` to not return a nullptr when called on a `?*zero_size_type`, which it does currently?

1604781444
foobles
I make it test the "full type" for being zero bits instead of the pointer-type, because `?*zero_size_type` does use 1 bit in memory even though `*zero_size_type` takes zero bits

1604781486
foobles
so now it doesn't return nullptr when called on optional pointers to zero-sized-types, can that cause issues I wouldn't expect? I did this to fix an ICE

1604783186
foobles
the only issue is that the function used to never be able to return a zero-size pointer (because it would return nullptr if the POINTER type was zero bits), but now it can if the pointer type is zero-bits but is optional

1604784926
virgohg
I'm trying to do REST in Zig.

1604785108
Nypsie[m]
virgohg: Are you running into issues, or what's your question?

1604785186
virgohg
Oops, never mind. Wrong time to ask :|

1604785222
Nypsie[m]
Oh ok. Feel free to ask anytime tho, I've some experience creating a REST API in Zig.

1604785266
virgohg
Thanks, but I'm trying to create an interface to already existing REST API

1604785321
virgohg
It is for creating a bot

1604785329
Nypsie[m]
There's some http request libraries out there too :) Anyway, let us know if you're running into any issues. Plenty of great people around here willing to help

1604785551
virgohg
But the REST API requires TLS. Any recommendations?

1604785591
lunamn
you can use pre-existing TLS libraries: openssl, mbedtls, wolfssl, etc

1604785598
Nypsie[m]
There's bindings for BearSSL

1604785614
Nypsie[m]


1604785685
Nypsie[m]
You could probably get the general idea of how to use it by looking at this Discord library:

1604785774
virgohg
I was actually wanting it for a Discord bot :)

1604785800
Nypsie[m]
Aaah cool!

1604785809
Nypsie[m]
This is the bot that we use in Zig's Discord server:

1604785840
fengb
Note: the architecture in zigbot is different from almost every library you might use

1604785869
virgohg
Let me follow you on GitHub at least.

1604785870
virgohg
:)

1604788450
Mat5
G'Day, The Go compiler features automatic semicolon insertion. I this also planned for the Zig compiler?

1604788484
virgohg
Feature envy?

1604788503
virgohg
It is kinda useful, but it looks like feature envy.

1604788519
virgohg
Very much like Javascript.

1604788702
Mat5
sorry, what do you mean with envy?

1604788741
virgohg
Feature envy: Adding features that is found in other languages into another language.

1604788794
virgohg
It is done with the intent of being useful, but it can turn out to be a bloat for the destination language.

1604788865
novaskell
Mat5: what's the motivation towards adding it?

1604789122
Mat5
novaskell, In principle, they are superfluous

1604790584
foobles
Mat5 I do not like that idea

1604790637
foobles
Go's semicolon insertion is overly basic, and other languages with more complex rules are prone to accidentally doing the wrong thing

1604790640
foobles
eg in JS:

1604790653
foobles
function foo() {

1604790659
foobles
return

1604790669
foobles
{ "x": 123 }

1604790674
foobles
}

1604790733
virgohg
ASI in JS: Making JS devs cry since its addition into JS.

1604790777
virgohg
Don't get me started on node's bloated module system!

1604790783
rom1504


1604790862
rom1504
node is pretty much the only language with a working package manager, so not sure what you mean, but this seems to be off topic

1604790886
fengb
Uhhhh npm isn’t working

1604790921
virgohg
And there is way too much "WARN deprecated" dependencies :/

1604790922
rom1504
any example in mind of a better package manager ? (for any other language)

1604790935
virgohg
Currently cargo for rust.

1604790938
fengb
Every other language probably has a better one

1604790944
rom1504
fengb: not true

1604790945
fengb
npm doesn’t even do reproducible builds

1604790963
fengb
They added a lock file that’s blissfully ignored half the time

1604790988
rom1504
I don't have a lot of experience with rust/cargo, I'll trust you on that

1604791021
virgohg
Is there a proposal for reproducible build support for package system in Zig?

1604791022
rom1504
you need to use npm ci if you want reproducible builds

1604791097
rom1504
but seeing how pip doesn't have dependency resolution, gradle is bad at transitive dependencies (and let's not talk about c++), npm is better in that regard than other ones

1604791104
rom1504
is cargo good at transitive dependencies ?

1604791138
virgohg
I didn't have transitive dependency before

1604791149
virgohg
So I can't say anything about it

1604791185
rom1504
can I depend on B and C, with B depending on D==1.0.0 and C depending on D==2.0.0 without having a broken program at the end ?

1604791193
rom1504
that's the big question

1604791202
rom1504
for pip and gradle, the answer is no

1604791212
virgohg
Looks like yes

1604791284
rom1504
ok, nice then, I do hear a lot of good things about rust

1604791337
virgohg
Yes, rust is pretty nice, but it kinda antagonizes object oriented programming

1604791367
virgohg
It does not conduce too excellently to OOP.

1604791431
virgohg
But it is still doable nevertheless.

1604791884
g-w1
if I want to add std.fs.{openDir, access}Absolute to stdlib, should I make a proposal or just make a pr?

