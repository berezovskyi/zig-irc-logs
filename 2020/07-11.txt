1594426318
pixelherodev
Efficient codegen here might actually require a larger rework

1594426326
pixelherodev
Not certain yet

1594427574
pixelherodev
Woot, getting some frontend stuff done too

1594427576
pixelherodev
`a.zig:5:5: error: TODO implement astGenExpr for While`

1594430788
pixelherodev
Hmm, I wonder if I can actually implement a while loop currently, using condbr

1594434406
shakesoda
attempt #'s 1-3 at scheduling lots of threads: utter failure, much worse than running it single threaded

1594434439
shakesoda
removed the complicated attempts and went back to the stupidest approach and it's equivalent, so i need to go think about ways to do better

1594435225
adamkowalski
How do I create a [][]const u8 literal?

1594435265
adamkowalski
My first thought was &[_][]const u8{"hello"}

1594437479
stripedpajamas
adamkowalski [_][]const u8 { "hello", "world" } works

1594437673
fraktor
hey uh, I'm looking through the zig repo and I glanced at the tools and uh

1594437684
fraktor
What does "merge_anal_dumps.zig" do?

1594437800
daurnimator
fraktor: what it sounds like

1594438113
fraktor
???

1594439764
pixelherodev
fraktor: merge analysis dumps, presumably?

1594439773
pixelherodev
Things tend to be named according to what they do

1594439811
pixelherodev
At a glance, it parses multiple JSON files, merges them, and dumps the result

1594439833
pixelherodev
andrewrk: why don't we want incremental C compilation, again?

1594448432
andrewrk
pixelherodev, it would be fine to have, just not necessary

1594448448
andrewrk
I think you asked if it was required and I said no

1594448478
andrewrk
btw I realized the correct way to model the C backend

1594448486
andrewrk
it's an object format.

1594448504
andrewrk
ELF, PE, COFF, MACHO, .c

1594448517
daurnimator
andrewrk: howso?

1594448568
daurnimator
andrewrk: you can pack the same object code into either an ELF or a PE file. ==> its the same machine code. a .c file isn't the same machine code in a different container

1594448631
andrewrk
never mind PE

1594448651
andrewrk
you would only ever pick one from the above enum. each item excludes all the others

1594448659
andrewrk
C source fits in there perfectly

1594448843
daurnimator
I feel like its closer to an architecture

1594448876
daurnimator
an architecture with subarchitectures (yes I know that we got rid of them) for each C target

1594475026
frett27
hi, digging into std, i cant' find a way to open a dir by absolute name ?

1594475060
frett27
where are Dir type factories (i've only found the cwd()) ?

1594475067
lemmi
frett27: i think you need to go through cwd()

1594475070
frett27
seems a dummy question ?

1594475080
frett27
ah ?

1594475094
frett27
so kind of cwd().opendDir("/proc") ?

1594475146
lemmi
i dug through the code and the underlying syscall accepts absolut paths IIRC

1594475180
frett27
lemmi, thank's, let's try, or perhaps passing by fd ?

1594475203
lemmi
and what fd would you use?

1594475221
frett27
openFile -> get the fd then create a Dir struct, using it ?

1594475252
frett27
fd is a file handle from system ?

1594475279
lemmi
sec, need to look this up again

1594475587
lemmi
frett27: yep, you can go through cwd. it's using openat under the hood, so absolute paths are ok

1594475621
frett27
yep, that works, thank's lemmi

1594475636
frett27
i'm able to iterate on /prov

1594475645
frett27
s/v/c/

1594479857
pixelherodev
andrewrk: isn't that what we're already doing?

1594479866
pixelherodev
I put it next to Elf in link.File on purpose

1594479896
pixelherodev
Ah wait, that's what we're doing

1594479925
pixelherodev
I need to fix up 16-bit ELF support a bit more, then I'll fix that up

1594487427
pixelherodev
ZSF announcement is at ~6PM EST, right?

1594487439
pixelherodev
Ah wait, time zones are listed on there :)

1594488424
leeward
I think you mean EDT.

1594488469
shcv
how do I cast a slice of u32 to a slice of u8?

1594488485
shcv
I can cast array pointers with ptrCast...

1594488491
fengb
std.mem.sliceAsBytes

1594490211
pixelherodev
leeward: ... does it matter?

1594490320
pixelherodev
Unrelated: how do I access std.log output?

1594490329
pixelherodev
Rather, how do I change the logging level?

1594490383
pixelherodev
I don't see the option

1594490516
pixelherodev
Wait, log level has to be set at comptime???

1594490529
pixelherodev
That's... a serious mistake, IMO.

1594490574
shakesoda
verbose logging can be kind of expensive and bloaty, so i can see why one might do that

1594490617
pixelherodev
Yes but... there's

1594490619
pixelherodev
runtime*

1594490629
shakesoda
i usually outright remove verbose logging the instant i don't need what it was spitting out because it can cost so much

1594490635
shakesoda
but i also always write my own loggers

1594490639
pixelherodev
There's

1594490644
shakesoda
i'm a little surprised there even is one in std

1594490647
pixelherodev
and the cost should be negligible, if it's just a single branch

1594490668
pixelherodev
`if (level < current) return`

1594490671
shakesoda
you would be disgusted at the real cost of a single branch sometimes :D

1594490699
shakesoda
but generally one doesn't put logging statements anywhere /that/ sensitive

1594490705
pixelherodev
I seriously hope we eventually find a different style of pipeline which doesn't rely on branch predictions...

1594490734
pixelherodev
Hmm, this is a tangent anyways; the log level should be debug, but I'm not seeing the output

1594491196
andrewrk
pixelherodev, look at the recent changes to test_runner.zig

1594491793
shakesoda
ugh, this will be better than my previous approach of just spawning way too many threads, but this design for task scheduling is going to have a lot of fighting over locks

1594491803
shakesoda
need to do better

1594491865
shakesoda
at least for now, just doing one better than the previous attempt is good enough

1594492100
pixelherodev
andrewrk: sure thing, will do soon

1594492115
pixelherodev
Turns out stage2's main was comptime ignoring linking logging

1594492122
pixelherodev
andrewrk: if you have two minutes, how do you want to handle linker scripts?

1594492157
pixelherodev
Going to need to work on supporting them for SPU II (since there's specific ranges of ROM and RAM and not all of the address space is usable)

1594492201
pixelherodev
Ahh, I see

1594492206
pixelherodev
You were referring to logging :P

1594492215
pixelherodev
THis isn't from test_runner though, and I found the issue :)

1594492218
pixelherodev
s/H/h

1594492233
pixelherodev
shakesoda: why do you need threads for this?

1594492240
pixelherodev
Seems like you're putting in a lot of effort for it...

1594492245
pixelherodev
What are you working on?

1594492283
shakesoda
pixelherodev: because i'm solving problems which are suited to such things (rendering, simulations...)

1594492333
pixelherodev
Specific project, or?

1594492391
shakesoda
prototyping this for my game, yeah

1594492447
fengb
The "fix" for branch prediction is speculative execution. That's getting rolled back due to spectre so we're back to square one

1594492448
shakesoda
threading will be a clear win if i can get the task groups scheduled in a way that works well

1594492568
pixelherodev
fengb: that's

1594492576
pixelherodev
Heck, no it's not

1594492596
pixelherodev
SpecEx is a

1594492608
pixelherodev
I'm talking about a more fundamental shift, not changing implementation details

1594492642
shakesoda
there's also the possibility that this scheduling approach/concept will always suck, and i'll need to do it differently, but that's what experiments are to determine

1594492683
fengb
Itanium tried to push stronger parallel execution for branches

1594492689
fengb
But nobody else cared

1594492702
pixelherodev
hmm

1594492724
fengb
Basically the same idea as speculative execution but at a software level

1594492725
shakesoda
intel didn't seemingly even attempt to bring itanium into regular workstations at any point

1594492726
pixelherodev
andrewrk: the problem with making C a link file format (ELF, COFF, etc) instead of the current solution is that the test cases don't track that

1594492732
shakesoda
a shame, that is

1594492743
fengb
And it does work but... nobody wanted Itaniums so

1594492750
pixelherodev
fengb: you mean predicated execution?

1594492753
pixelherodev
They've brought that to x86 though

1594492756
pixelherodev
So it's not a

1594492762
pixelherodev
There's predicated moves, for instance

1594492784
fengb
Yeah but more strict. Like only selecting a single result

1594492791
fengb
So it's guaranteed to run fast

1594492794
pixelherodev
That's... what predicated execution

1594492796
pixelherodev
Predicated execution is basically executing both branchs in tandem

1594492800
fengb
No branching at all

1594492800
pixelherodev
x86 has it, to an extent

1594492808
pixelherodev
Yeah, exactly.

1594492810
fengb
I'm saying the architecture allowed "branching" without jumps

1594492811
shakesoda
oh, gpus also do that

1594492815
pixelherodev
fengb:

1594492817
fengb
That doesn't really exist in x86

1594492821
pixelherodev
Yes, it does

1594492824
fengb
I mean it does but it's slow

1594492826
pixelherodev
It's just far more limited

1594492829
pixelherodev
I don't think it's slow

1594492839
pixelherodev
It's just less useful, because there's fewer predicatable instructions

1594492844
fengb
cmov is really slow compared to trusting the branch predicter

1594492850
pixelherodev
Ah, true

1594492860
pixelherodev
Wait, is it?

1594492862
pixelherodev
Hm

1594492863
fengb
I dunno about others but it's recommended to avoid it unless you need it

1594492894
fengb
Yeah cmov was created for Pentium 4. But architectures since then it's generally considered slower unless you know the predictor sucks

1594492914
pixelherodev
NOt anymore

1594492934
fengb
Anyway... Itanium was built around this concept. Every execution unit was like 3? or so instructions in parallel

1594492934
pixelherodev
cmov is generally fast now, it's just not

1594492943
pixelherodev
fengb: SPU Mark II is like this, too ;)

1594492949
pixelherodev
Every single instruction is predicated

1594492962
pixelherodev
I think the problem with Itanium was that it was technically better

1594492965
pixelherodev
and nobody wanted that lol

1594492990
pixelherodev
It was

1594493007
pixelherodev
And people preferred x64 because it meant Backwards CompatibilityTM

1594493009
fengb
It was probably 10 years too early

1594493017
pixelherodev
Honestly, i would buy Itanium if they sold it

1594493021
fengb
People still expected brute forcing x86 to work. And they were right

1594493026
pixelherodev
I don't particularly like Intel, at all

1594493029
fengb
We can't do that anymore

1594493043
pixelherodev
But I'd take Itanium over nearly any current ISA, with the possible exception of RISC-V

1594493051
fengb
Even ARM? :(

1594493057
pixelherodev
Without hesitation lol

1594493065
shakesoda
arm has its priorities mostly where mine are

1594493070
pixelherodev
I don't particularly like ARM TBH

1594493074
shakesoda
so i'm all for moving that way

1594493093
pixelherodev
Such as?

1594493099
pixelherodev
What priorities are those?

1594493122
shakesoda
mostly power/battery efficiency

1594493145
shakesoda
particularly for less hungry machines

1594493154
pixelherodev
Gotcha, I'm in full support of those

1594493168
pixelherodev
fengb: the real problem with predication on x86 is the microarchs

1594493183
pixelherodev
I wouldn't be surprised if future x86 microarchs made predicated instructions cheaper than branch prediction

1594493184
shakesoda
i'm not especially interested in the specifics of the isa or how it works, just that it has explicit goals here that align with my interests

1594493191
fengb
Yeah it does exist. It's just magically in the microcode and totally opaque

1594493200
pixelherodev
What is?

1594493206
fengb
Predication

1594493208
pixelherodev
No it's not.

1594493223
pixelherodev
Predicated instructions are advantageous because they don't stall the pipeline

1594493232
pixelherodev
They take more time to execute

1594493238
pixelherodev
The problem is, we already have branch predictors

1594493245
pixelherodev
and the current pipelines are optimized for those, and not for predication

1594493260
pixelherodev
So in many situations, relying on the branch predictor is cheaper

1594493264
pixelherodev
But it has nothing to do with the microcode

1594493282
shakesoda
my understanding is that it's a pretty wacky world down in microcode land

1594493293
pixelherodev
If every x86 instruction was predicated, and people used them, you could remove the branch predictor and be

1594493310
pixelherodev
But that won't ever happen, because legacy software doesn't predicate, and will therefore rely on a branch predictor forever

1594493329
pixelherodev
Unless someone writes e.g. an x86 post-compilation predicator or something lol

1594493339
pixelherodev
Automated replacement of branches with predication would be sick though

1594493399
pixelherodev
Heck, if someone

1594493399
leeward
pixelherodev: Yes, EDT and EST are different time zones.

1594493407
pixelherodev
leeward: huh, good ot know

1594493408
shakesoda
incidentally, the legacy software problem is one of the things i like about workstations finally pushing out of x86. arch changes are a good opportunity to update ancient bad decisions (even if the old arch still gets emulated)

1594493408
pixelherodev
to*

1594493425
pixelherodev
That was the goal of Itanium lol

1594493426
shakesoda
how much of that will happen in reality is to be seen, but i'll take the opportunities

1594493430
pixelherodev
They wanted hardware emulation of x86 or something like that

1594493441
pixelherodev
With new stuff being totally freed of the trappings of x86

1594493464
shakesoda
as such, i also very much wanted itanium

1594493492
shakesoda
but it never really arrived for workstation purposes

1594493496
shakesoda
:(

1594493509
leeward
It's really too bad AMD made the smart business move to make x86_64.

1594493529
shakesoda
good for business, bad for technology?

1594493533
leeward
yep

1594493577
leeward
If Intel had had a real monopoly there wouldn't have been anyone keeping us from switching to Itanium, but they had failed to completely crush their competition.

1594493661
leeward
I mean, they killed Cyrix but AMD hung on just long enough to keep x86 alive.

1594493717
shakesoda
turns out it's good we've still got amd, but we also still have x86 (damn, foiled)

1594493787
leeward
I just wish we still had Sun.

1594493812
leeward
Apparently they almost made an x86 clone in 2008.

1594493842
shakesoda
i think i would also accept if power machines were a bit more affordable

1594493848
shakesoda
those talos workstations are nice, but cost a fortune :(

1594493891
shakesoda
i am far more interested in jumping to arm, though

1594493964
leeward
These days I don't see much future in power.

1594493985
shakesoda
the only x86 holdout here is my workstation

1594493999
shakesoda
+ a laptop

1594496148
ifreund
ugh, what am I doing wrong here

1594496212
ifreund
I've somehow messed up my double fork and execve but can't figure out how:

1594496251
ifreund
the execve seems to work though as the process is spawned

1594497708
pixelherodev
I want RISC-V :P

1594497711
shachaf
That error doesn't seem related to fork or exec.

1594497898
ifreund
it's triggered every time this code gets run

1594497943
ifreund
I couldn't tell you why though

1594498046
shachaf
But that code doesn't call pthread_join.

1594498271
ifreund
hence my great confusion

1594498319
ifreund
maybe something in the zig backtrace handler does?

1594498539
pixelherodev
ikskuh: anything I'm missing in the checklist / motivations on

1594499131
shachaf
ifreund: I mean, I'd apply the usual debugging strategy here. Do bits of the fork/exec and see what bit causes it to happen, write a minimal program that just does the fork/exec, etc.

1594499154
shachaf
Right now the problem is probably not where you think it is.

1594499997
Shucks
Heya

1594500065
ifreund
o7

1594500103
leeward
\o

1594501317
_Vi
Is there some Zig changelog that covers changes past the latest released version (0.6.0)?

1594501364
leeward
There's the Git log, but I don't think there's a written up changelog.

1594501373
shakesoda
usually the changelog is written when release is coming up

1594501390
leeward
You probably don't want to go through all the commits since 0.6.0.

1594501418
shakesoda
i think andrewrk said the last one took like two weeks to write

1594501432
shakesoda
a major effort lol

1594501503
leeward
It doesn't look like the commit messages are consistent about marking breaking changes, either.

1594501528
leeward


1594501540
andrewrk
mikdusan has been doing some work on that:

1594501551
andrewrk
it's not comprehensive though

1594501555
leeward
Better though.

1594501574
andrewrk
at this point in development we still need the luxury of being a bit "sloppy" with regards to breaking changes. there will be a time when it becomes a lot more of a process

1594501587
andrewrk
that comes after language stabilization

1594501600
andrewrk
btw the pre-show is started at

1594501647
_Vi
What will be happening on the show?

1594501671
andrewrk
official debut of the zig software foundation

1594501673
fengb
Zig Software Foundation announcement

1594501775
ikskuh
pixelherodev: looks good

1594501951
_Vi
Is there some [official] roadmap for future Zig development?

1594501985
pixelherodev
I think ther'es one on the 0.6 release notes?

1594501996
pixelherodev
Anything interesting in the preshow?

1594502021
pixelherodev
andrewrk: while you're here, any objection to me improvising a temporary two-command linker script format until we decide on a proper one?

1594502048
andrewrk
yeah, linker scripts are a hack, we should come up with a better solution

1594502183
pixelherodev
andrewrk: maybe define a specific model, and use `--model`?

1594502270
pixelherodev
That would mean defining every possible target internally, but I think we were already planning on that :P

1594502286
shakesoda
another iteration of my task scheduler is working... too many locks, but now it's only ~5x slower than it should be, which is a pretty big improvement

1594502292
shakesoda
i should be able to make it lock free

1594503534
ifreund
_Vi: there's also the list of accepted proposals among the github issues

1594503732
_Vi
Which Zig build is recommended to toy around mini-projects of trying Zig here and there? 0.6.0 or master?  About a year ago recommendation was to use master (as bug reports against 0.5.0 was mostly unapplicable due to fast development).

1594503814
ifreund
i'm sticking with 0.6.0 for my somewhat larger scale project so I don't have to keep pace with master

1594503839
Shucks
I might be a bit spoiled but is there any editor which gives code suggestions for zig?

1594503864
ifreund
Shucks: any with LSP support + zls

1594503873
ifreund


1594503944
Shucks
Oh wow

1594504089
ikskuh
_Vi: I usually work on master. You have to update regularly and adapt your code, but "master" is just improved 0.6.0, as 0.6.0 is just a defined snapshot, not much special properties

1594504135
pixelherodev
ZLS is literally perfection incarnate

1594504162
ikskuh
yep

1594504419
oats
*phwip*, straight to the top of hacker news

1594504424
oats
nice lol

1594505661
_Vi
Is minimal ziglang donation amount is 25USD per month?

1594505700
ikskuh
i think so

1594505868
_Vi
Are donations towards andrewrk still considered as donations towards Zig language or they are not considered as donations towads other Github projects?

1594505896
ikskuh
_Vi, they're directed to andrew as a developer and not to the zig language

1594505903
ikskuh
but for now it's probably the same :D

1594506067
_Vi
Is that 25USD minimum a temporary "marketing ploy" while video is going on to catch those emotional donations (and usual 5USD tier is going to be opened in a while after the show ends)?

1594506094
Shucks
God zls is perfect. Why is it not included in the release build

1594506109
ikskuh
zls is not official :D

1594506117
ikskuh
it's by aurame and alexnask

1594506122
BaroqueLarouche
and it gets updated almost daily also

1594506222
Shucks
Well zig can be happy to have zls. For a newcomer it's really hard to jump over if there aren't code suggestions ;D

1594506235
ikskuh
yeah ZLS is just helping a lot

1594506299
Shucks
So with that said, I saw some unofficial package managers for zig aswell. But zig itself doesn't has a package manager yet right?

1594506313
ikskuh
it doesn't have one yet

1594506325
ikskuh
my "package manager" is more or less just a search tool for github :D

1594506380
Shucks
Thats not bad at all. Got a link for me?

1594506394
ikskuh
github.com/zigtools/zpm

1594506400
ikskuh
but it's not really maintained :D

1594506631
_Vi
How much do Zig and Rust communities intersect? Both languages seek to make system programming better and safer.

1594506645
ikskuh
_Vi, i think the surface is actually pretty small

1594506665
ikskuh
i know some people doing rust, but i'm aware of more web programmers that got here :D

1594506679
ikskuh
but: that's just my view :D

1594506779
_Vi
Is it safe to assume that all (most) Zig programmers also know C?

1594506782
Sahnvour


1594506824
Shucks
Coming from nim, zig was the only language that aroused my curiosity

1594506824
Shucks
for a long time now

1594506856
fengb
Rust also attracts some functional programmers. It’s type system is based off ML/Haskell

1594506862
ikskuh
Sahnvour: true. i've come from C++17 and i'm happy that i found all the stuff i like in Zig and i don#t find the stuff i hated in C++ :D

1594506907
_Vi
"evolution from C" => Will (or does) Zig define it's own stable ABI (in Zig terms, not in C terms), so other programming languages can talk Zig to each other (instead of using "C" function call convention and structure layout as lowest common denominator)?

1594506934
THFKA4
yes, Zig has an ABI, but you can also export/consume C abi with a keyword

1594506953
pixelherodev
Zig's ABI isn't really defined yet

1594506956
Sahnvour
ikskuh: I also find everything I need from (modern) C++ in Zig, and more, and better :) even though it's a bit closer to C in its philospohy

1594506970
_Vi
Will "Zig 1.0" have frozen stable ABI that can be relied on by non-Zig things?

1594506973
ikskuh
_Vi: Zig doesn't actually have a ABI

1594506986
ikskuh
and with comptime it's not possible to actually export all functions to a binary file

1594506990
pixelherodev
Yes

1594506995
ikskuh
but zig can export to a lot of ABIs

1594507008
pixelherodev
Zig 1.0 will be nearly 100% frozen

1594507022
Shucks
So one last question before I finally start to write some lines: Since zig is able to compile c code, I'm not even forced to write a wrapper for glfw (for example). I include the header files and im just able to call that stuff from zig?

1594507032
pixelherodev
If we end up with our own ABI (which I

1594507036
ikskuh
Shucks: yes!

1594507036
pixelherodev
Shucks: yeah, though YMMV

1594507039
ikskuh
it's super-easy :)

1594507041
pixelherodev
translate-c isn't perfect

1594507045
pixelherodev
Needs work, still

1594507049
pixelherodev
It messes up w/ e.g. macros

1594507066
ikskuh
Shucks: checkout

1594507066
Shucks
Thats awesome.

1594507076
_Vi
ikskuh, C ABI and C calling convention is one of things that makes C programming language special. If Zig wants to be on par with C, it should commit on memory layouts, symbol naming and function calling concentions.

1594507091
ikskuh
_Vi: that's possible

1594507099
ikskuh
if you want to interface C, it's no problem to do that

1594507102
ikskuh
but Zig is more than C

1594507109
ikskuh
it's not "C with another syntax"

1594507137
pixelherodev
ikskuh: yes, but there's an open issue to define our ABI

1594507147
ikskuh
i still think it's not possible

1594507154
ikskuh
because then zig would lose a lot of it's power

1594507181
ikskuh
for example, for release-fast (well aligned) zig can chose different struct layouts than for release-small (packed)

1594507203
ikskuh
as soon as you define an ABI, you freeze struct layouts → not possible anymore

1594507223
ikskuh
can you link me the issue? i may comment some thoughts

1594507233
_Vi
ikskuh, Does this layout depend on Zig version or there are some official rules and struct layout can be predicted without any Zig compiler?

1594507239
pixelherodev


1594507246
ikskuh
there is no fixed layout for standard structs

1594507249
pixelherodev
_Vi: ABI for Zig itself is completely undefined rn

1594507251
ikskuh
it may depend on everything

1594507263
ikskuh
so: don't rely on layout of `struct`

1594507270
ikskuh
that's what we have `packed struct` and `extern struct` for

1594507270
pixelherodev
Hmm

1594507278
_Vi
"ABI for Zig itself is completely undefined rn" -> Is this going to be addressed before "Zig 1.0"?

1594507281
pixelherodev
ikskuh: yeah, I think I agree w/ you there

1594507283
pixelherodev
_Vi: unclear

1594507288
pixelherodev


1594507297
pixelherodev
There's an open proposa

1594507299
pixelherodev
proposal*

1594507316
ikskuh
i will write a nice comment there after the stream

1594507338
pixelherodev
I think there should be one, but only for exports / imports

1594507353
pixelherodev
That allows e.g. dynamic libraries, without damaging any other use case

1594507366
ikskuh
well, "export" enforces ABI already ;)

1594507381
_Vi
I see "Zig competes with C instead of depending on it" on the website, but without [plans to] make a stable ABI on various archs it is not a real competition.

1594507384
pixelherodev
Yes, but I mean for e.g. slices

1594507399
pixelherodev
_Vi: you can get a stable ABI rn

1594507406
ikskuh
_Vi: why? if you want stable ABI, chose an existing ABI ;)

1594507407
pixelherodev
That's part of our C compatibility

1594507415
pixelherodev
You can use e.g. callconv(.C)

1594507422
ikskuh
zig allows you to chose from several ABIs

1594507428
ikskuh
but not for zig-internal features (right now)

1594507547
_Vi
Which callconvs (apart from ".C") are aimed to be usable from non-Zig things (while providing relatively ergonomical access to Zig features)

1594507581
ikskuh
it depends on what you need them for

1594507631
ikskuh
signal(OS) and interrupt(HW), thiscall(c++)

1594507932
_Vi
I don't have any specific point (not learned Zig enough), but "C" is often being considered as a main system programming languages because of it's ABI is used to communicate even between things that are not implemented in C (e.g. between Java and C++). Rules of how C lays out data and calls functions is like a continuation of the rules of how processor works. This may lead to a world when many things are implemented in Zig, but still communicates each other

1594507933
_Vi
in C terms. I may revisit this question when I have a more concrete sample of something.

1594507987
ikskuh
_Vi, and it will probably keep that way forever

1594507995
ikskuh
but it's not a really problematic thing

1594508009
ikskuh
C is the lowest common denominator of feature sets between all languages with a FFI

1594508049
_Vi
ikskuh, Asserting that does not look like "competes with C instead of depending on it".

1594508056
ikskuh
wait!

1594508066
ikskuh
we're competing with the C programming language

1594508068
ikskuh
not the C ABI

1594508086
ikskuh
C ABI is just describing memory layout of structures and calling conventions

1594508092
ikskuh
and not much more

1594508098
ikskuh
it's not even specific to the C language

1594508107
_Vi
What about defining good ABIs for more advanced data structures? For optimized function calls (trickier rules, but still there are rules)?

1594508110
ikskuh
but it's just "the ABI C defaults to on $PLATFORM"

1594508138
ikskuh
i don't see reason in that

1594508189
_Vi
So that when new processor and new operation system gets created, they'll think "How Zig libraries will talk to each other?" instead of "Let's define C calling convention for this platform".

1594508198
ikskuh
daurnimator: PING

1594508207
daurnimator
ikskuh: ah. there you is

1594508214
ikskuh
_Vi: this would rule out C for those platforms ;)

1594508218
ikskuh
which isn't good either

1594508224
daurnimator
I forget that you are the same person

1594508228
ikskuh
:D

1594508233
ikskuh
sorry for confusion here as well :(

1594508245
daurnimator
ikskuh: I'm having a look through h11 now

1594508261
daurnimator
ikskuh: the receive_bytes style seems like it requires buffering?

1594508269
_Vi
For example, how well would Zig feel when targeting a new platform for which C ABI is not yet defined?

1594508297
ikskuh
daurnimator: they changed API completly since i wrote ZPM

1594508299
_Vi
Would dynamic libraries work?

1594508310
daurnimator
_Vi: there are other ABIs; e.g. nakedcc

1594508321
ikskuh
_Vi: that's hard to say ;)

1594508325
ikskuh
someone has to define an ABI

1594508326
daurnimator
and another struct layout: `packed`

1594508328
_Vi
daurnimator, Do those other ABIs work as a way to get dynamic linking work?

1594508336
ikskuh
and if there's only one ABI (see ARM), everything is that ABI

1594508344
ikskuh
if it's C or Zig isn't relevant

1594508360
daurnimator
_Vi: I doubt a platform would have dynamic linking before it had a C AB defined; so its a bit of a hypothetical question

1594508364
ikskuh
"C ABI" is pretty much just relevant on x86, all other platforms have a pretty specific ABIs

1594508382
_Vi
If Zig-as-a-C-competitor gets really big, then why not?

1594508385
daurnimator
_Vi: new architectures generally get a "C" ABI defined as part of the architecture design

1594508395
ikskuh
_Vi: because you mess up "language" and "ABI"here

1594508401
daurnimator
though its not really a "C" ABI; as the native architecture design

1594508459
_Vi
Then maybe at least "Zig competes with C instead of depending on it" should be revised to "Zig competes with C

1594508493
ikskuh
i think you#re doing a lot of hairsplitting atm

1594508516
ikskuh
C ABI is pretty much just "someone said that is the official interop between programs" and put the label "C ABI" on that

1594508526
ikskuh
just read that as "Common ABI" instead of "C Language ABI"

1594508535
ikskuh
and your "problem" is solved

1594508566
_Vi
I though "competing with C" is imagining Zig was created before C (and B and friend), imagining how other things would change (for the better?) and trying to change the world to that.

1594508583
ikskuh
i don't think there would've changed much

1594508598
ikskuh
except for probably an ABI for slices

1594508606
_Vi
So "C ABI" may be a bit of misnomer as of now?

1594508606
ikskuh
the rest would be still the same

1594508611
ikskuh
yes

1594508666
_Vi
OK. Thanks for the answers.

1594509102
daurnimator
ikskuh: your BearSSL lib needs updating to writer instead of OutStream

1594509117
ikskuh
oh true

1594509122
ikskuh
i need vacation

1594509808
Sahnvour
getting late here, the stream was great, gnight everyone

1594509885
ikskuh
gn8 Sahnvour

