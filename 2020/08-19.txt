1597795594
ifreund
PR is up, now I can sleep :)

1597795595
ronsor
oh my, zig on dpmi

1597796911
ky0ko
ronsor: if you want some more things that might make you express shock, the dos system in question is running a multitasking kernel and an x11r4 server and i want the zig program i'm writing to be an x11 client on that :)

1597796961
ky0ko
as well as possibly using the 3dfx glide api to run a voodoo2 card...

1597798906
andrewrk
I was thinking a wasm build would have a bunch of the compiler gutted and only support the wasm32 backend

1597798925
andrewrk
on the other hand, it could have everything enabled and provide a godbolt experience

1597798946
andrewrk
and only be able to run wasm32 programs

1597799915
ronsor
ky0ko: pretty interesting

1597799925
ronsor
but not the craziest thing

1597799939
ronsor
I had a multitasking kernel for DOS I had made a while ago

1597800153
ky0ko
i'm using desqview/x, which is a multitasking dos supervisor with a built in x11 server and utilities

1597800275
ronsor
desqview/x. haven't heard that name in years.

1597805289
andrewrk
finally, a green CI build

1597811306
andrewrk
I figured out how to codegen unsigned integer operations in the C backend

1597811323
andrewrk


1597811947
daurnimator
andrewrk: nice!

1597832376
ask6155
hello!

1597832529
daurnimator
ask6155: hi!

1597832536
alexnask[m]
Hey

1597834558
ifreund
andrewrk: with regards to unifying codegen.zig and codegen/wasm.zig, I'm planning to focus on river for the next few days so don't worry about any conflicts

1597834610
ifreund
I'm happy with how the in-memory incremental compilation PoC worked out and think that design should be good long term

1597834714
ask6155
Hey guys how do I open a file and read it?

1597834747
ikskuh
std.fs.cwd().openFile("foobar.name", .{ .read = ???, .write = ??? });

1597835685
ask6155
I hacked the vis editor to give me syntax highlighting for zig. I feel smort now

1597835756
ifreund
does it not have an extensible way to add new syntax highlighting?

1597835783
ask6155
You can make a lexer for it in lua and include it in the config

1597835788
ask6155
but I'm dumb

1597835845
ifreund
oh we already have a PEG for zig here

1597835865
ifreund
would just need to convert it to the lua peg format they use

1597835877
ask6155
I just wrote some C code and commented it out and when I check while the file program it wrongfully says it's a C source file and due to that vid gives me C syntax highlighting. (It's not any good though)

1597835884
ifreund
actually a pretty cool way to do syntax highlighting

1597835892
ask6155
*vis

1597835903
ifreund
lol

1597836919
ask6155
Hey I have a file struct and I read it with .read and used try so the error would appear on main but I got no errors on compilation but When I ran it It reached unreachable code but I never got to know what .read() error it was. Am I using try wrongly?

1597837057
ikskuh
can you share the whole snippet?

1597837127
ask6155
pub fn main() !void { var file = try cwd().openFile("test", .{ .read = true });

1597837128
ask6155
var some_chars: []u8 = undefined; _ = try file.read(some_chars);

1597837128
ask6155
}

1597837162
ask6155
yeah it doesn't look that bad in the editor

1597837318
KoljaKube
I think you are missing memory to read the file into

1597837337
KoljaKube
some_chars is a slice pointing nowhere

1597837362
KoljaKube
Since file.read does not take an allocator, it won't allocate memory itself

1597837398
KoljaKube
Either prepare a buffer of fixed size (array): var some_chars: [1024]u8 = undefined;

1597837405
KoljaKube
Or use something like readAllAlloc

1597837484
ask6155
I got error expected []u8 got [1024]u8

1597837518
KoljaKube
Guess you would need to pass some_chars[0..] to turn the array into a slice again

1597837530
KoljaKube
That gets me all the time, too :D

1597837562
ask6155
That's weird

1597837598
KoljaKube
I bet there are good reasons why it doesn't coerce automagically, but I would know them

1597837601
alexnask[m]
why? we just dont implicitly coerce arrays to pointers

1597837643
ask6155
yeaaah I'm C where pointer and array are the same thing

1597837745
alexnask[m]
zig aims to be more explicit

1597837771
alexnask[m]
about all kinds of things, but especially implicit conversions

1597837959
ikskuh
ask6155: enjoy having a language that has

1597838510
ask6155
So now I have a [1024]u8 which is a slice? I wanted to log it but the function take a []const u8 aka string? so how do I convert a slice to a string now?

1597838577
ikskuh
[1024]u8 is a array

1597838593
ikskuh
a pointer to an array coerces to a slice

1597838601
ikskuh
so if you do

1597838607
ikskuh
var arr: [1024]u8 = undefined;

1597838615
ikskuh
var slice_like = &arr;

1597838628
ikskuh
"[]const u8" is a slice

1597838646
ikskuh
a slice that points to several constant u8

1597838654
ikskuh
so to print it, you can just do

1597838664
ikskuh
std.debug.print("str = {}\n", .{ &arr });

1597838671
ikskuh
note that this will print 1024 chars

1597839110
KoljaKube
Forgot about the &. When is [0..] or & more appropriate?

1597839165
KoljaKube
Bah. "error: compiler bug: generating const value for struct field '0'" I want my money back ;-)

1597840303
ask6155
Does isSpace function take into account of all spaces in unicode?

1597840316
ikskuh
std.ascii.isSpace?

1597840320
ask6155
yeah

1597840323
ikskuh
no

1597840330
ikskuh
it's not from std.unicode.isSpace :D

1597840352
ask6155
amen to that!

1597840396
ask6155
I was thinking about finding out all the spaces and checking for them but I guess It's done in std~

1597840544
ikskuh
andrewrk: i start to understand why deinit(self: *Self) is superior

1597840806
ikskuh
it would've helped me find a bug way earlier

1597840956
ask6155
wait... there is no std.unicode.isDigit ;(

1597842808
gonz_
Hey, does anyone know what happened to `LeakCountAllocator`?

1597842835
fengb
It got removed because the general purpose allocator does everything it did but better

1597842864
gonz_
Allright

1597842880
gonz_
I haven't updated zig in a while because of issues with zls

1597842887
gonz_
GPA is in std now...?

1597842907
pixelherodev
Yep!

1597842910
pixelherodev
Also, freaking love git

1597842914
pixelherodev
`git rebase master -i` :D

1597845555
gonz_
ikskuh: You're running the Windows version of zig now and then, right? Are you seeing `NUL` files being output with the latest master?

1597845580
gonz_
I thought this was related to the compiler erroring on `zls`, but it turns out it's on literally every compile, successful or not.

1597845685
ikskuh
gonz_: i only run them in CI envs

1597845695
gonz_
Hmm, ok.

1597845817
alexnask[m]
Ive been getting the NUL file as well gonz_

1597845852
gonz_
It's nice to not be alone :D

1597845863
alexnask[m]
I think it happens on every `zig run` (and thus `zig build`, `zig test` as well)

1597849484
pixelherodev
andrewrk: I'm redoing SPU-II support. For TextBlock allocation, what did you want me to be doing here? Setting an Option for valid executable range?

1597851080
pixelherodev
I think I've got a small trick for now, but not a good long-term solution yet

1597854328
pixelherodev
Wow, lots of nice astgen work from Vexu :D

1597854392
ifreund
yeah they just dove in

1597854498
pixelherodev
Yeah, it's awesome :D

1597854509
pixelherodev
Going to need to finish up the spu-ii work so I can get CBE support for a lot of that :)

1597855985
pixelherodev
Woot! Re-did SPU II support :)

1597856092
ifreund
nice, I rewrote the 90% of the wasm backend yesterday so you're in good company :P

1597856103
pixelherodev
This was more rebasing than rewriting

1597856117
pixelherodev
Then, once rebased against master, a bunch of squashing, and a bit of commit-splitting

1597856604
pixelherodev
Only remaining issue is that binaries are inexplicably

1597856626
ikskuh
lol

1597856754
ifreund
heh

1597856766
pixelherodev
This actually makes no sense though :P

1597856772
pixelherodev
objdump indicates that it isn't even using it

1597856791
pixelherodev
huh

1597856797
pixelherodev
I rebuilt it and now it's 4.1KiB

1597856817
pixelherodev
I guess it's good then :P

1597856865
pixelherodev
I think I understand it enough to write an ELF loader now :)

1597859438
ikskuh
elf loader is easy

1597859448
ikskuh
copy all sections that are marked as "LOAD" into the memory :D

1597859691
pixelherodev
I know :)

1597859707
pixelherodev
/usr/local/lib/zig is out of date, so autocomplete is a bit wonky

1597859798
ikskuh
just run zig-update :D

1597859977
pixelherodev
My zig updating script only affects my PC

1597859981
pixelherodev
(remote builder)

1597859987
pixelherodev
It doesn't affect the local files, which are used for autocomplete

1597860043
ikskuh
but why?!

1597860084
pixelherodev
Because I almost never use local zig

1597860095
pixelherodev
and the script runs over ssh :P

1597860950
KoljaKube
Can I convert an error union into a boolean in one line?

1597861011
ikskuh
what do you want to convert?

1597861016
KoljaKube
Like `const can_access = std.fs.cwd().access("some_file", .{read=true}) <something>`

1597861020
ikskuh
AnyError!AnyValue â†’ "is there a error?"

1597861026
KoljaKube
Yep

1597861046
ikskuh
if(errunion) |_| true else |_| false

1597861114
KoljaKube
Ah, I can combine error union ifs with if expression, got it

1597861116
KoljaKube
Thanks

1597861132
ikskuh
everything is a expression ;

1597861135
ikskuh
in zig :)

1597861156
KoljaKube
It is? I thought if was only an expression without braces

1597861233
KoljaKube
Do I need the named block syntax to turn control flow into expressions or how is the expression value determined?

1597861247
ikskuh
no, it's also a expression with braces, as blocks are expressions

1597861288
ikskuh
{} is a empty block that returns void

1597861289
ikskuh
const foo = {}; assert(@TypeOf(foo) == void);

1597861310
ikskuh
you only need named block syntax if you want to return some value from a block

1597861322
ikskuh
if(x) { } else { } // is a expression that returns void

1597861397
KoljaKube
if (x) blk: { break :blk 3 } else blk: { break :blk 5 }?

1597861460
KoljaKube
Looks kind of unwieldy, but good to know that it's possible

1597861827
ifreund
yeah, I agree that the label after the if is kinda weird, but it's brutally consistent

1597861876
KoljaKube
I can accept that

1597861912
KoljaKube
But I also like Ruby's last-expression-in-block-is-the-return-value style

1597861938
KoljaKube
Not that it fits Zig, but it looks nice

1597862066
ifreund
yeah it's prettier but less explicit

1597862084
ifreund
zig used to do this if you aren't aware

1597862112
KoljaKube
I'm not. So the braceless if is what's left of that? ;-)

1597862188
ifreund
no, braceless is just makes programmers like me happy

1597862201
ifreund
also it replaces ternaries

1597862221
ifreund
const x = if (foo) 5 else 6;

1597862247
ifreund
much more explicit than const x = foo ? 5 : 6;

1597862270
ifreund
uh, s/is/if/

1597862270
KoljaKube
Is there any other use except ternary replacement?

1597862276
ikskuh
KoljaKube: you can use that in switch as well btw

1597862280
ikskuh
KoljaKube: a lot!

1597862288
ikskuh
i use expr-if and expr-switch all the time

1597862309
ifreund
I personally like writing stuff like if (condition) continue; on one line

1597862311
KoljaKube
Yeah, my code is full of expr-switches

1597862337
ifreund
or for (items) |*item| item += 1;

1597862340
KoljaKube
But I don't see the difference between expr-if and ternary, except their looks

1597862351
ikskuh
KoljaKube:

1597862355
KoljaKube
Both are "new syntax" if you look at how block-if looks

1597862370
ikskuh
expr-if can capture, ternaries don't exist in zig

1597862411
ifreund
the problem with ? : syntax is that it's not explicit

1597862418
KoljaKube
Ah, right. The discussion started with that... I'm a little slow this evening ;-)

1597862435
ifreund
the "if" keyword makes it much more clear to someone new to the language what is happening

1597862439
ikskuh
especially switch/if with capture are awesome

1597862464
KoljaKube
OK

1597862515
KoljaKube
I grew up with the ternary, I guess I'm used to it. I don't find it confusing. But since expr-if is mightier, it really is unecessary

1597862936
KoljaKube
Thanks to you both for enlightening me :-)

1597863725
fengb
ikskuh: assignment is a statement :P

1597863837
KoljaKube
And function definitions?

1597863856
fengb
They're be expressions "soon": #1717

1597863951
KoljaKube
I'm already subscribed to that :D

1597863985
KoljaKube
That will also make local functions outside of structs possible, right?

1597864019
KoljaKube
OK, it's in the proposal, sorry

1597864363
KoljaKube
Just pushed my first real thing written in Zig to GitHub:

1597864420
KoljaKube
Its commit history tells the story of someone with no idea what they're doing becoming ever so slightly more competent ;-)

1597864678
ikskuh
KoljaKube: nice!

1597865892
pixelherodev


1597865895
pixelherodev
Idea thieves! /s

1597866170
companion_cube
KoljaKube: did you stumble upon wren via "crafting interpreters"? :D

1597866197
pixelherodev
I don't think I've ever talked to someone who actually uses Wren

1597866206
pixelherodev
I don't use it, but I do find it interesting :P

1597866250
KoljaKube
companion_cube: While I read some of Nystrom's work, I actually got to Wren itself by ddging "lua alternatives" ;-)

1597866258
companion_cube
ah, interesting

1597866276
companion_cube
I found it via the book but then I wasn't that thrilled about the "everything is class" thing

1597866301
KoljaKube
You can have top level functions, it's just not very pretty

1597866317
pixelherodev
Is Lua embeddable?

1597866317
KoljaKube
And lua has its own fair share of oddities

1597866318
companion_cube
you have to call stuff via `foo.apply(x)` right?

1597866324
pixelherodev
Dammit

1597866325
KoljaKube
pixelherodev: very

1597866326
pixelherodev
Not Lua

1597866328
pixelherodev
Is

1597866330
companion_cube
yes

1597866333
pixelherodev
I was reading the chat while typing :P

1597866334
KoljaKube
Yes

1597866338
KoljaKube
It's the primary use case

1597866342
companion_cube
KoljaKube: there's also janet, chibi-schemeâ€¦

1597866345
Ristovski
Wren is cool

1597866383
pixelherodev
Interesting paper on SSA construction that DarkUranium linked me:

1597866392
KoljaKube
I'll try my luck with Wren for now. It's young and still forming and the community is small, so there's a little more hope for me to contribute in some wayt

1597866411
DarkUranium
KoljaKube, use Coyote ;) (once it's ready)

1597866428
DarkUranium
KoljaKube, on Wren: it looks really interesting, but I really dislike how it enforces some syntactic things because of its lack of semicolons

1597866447
DarkUranium
E.g. the brace in `if(x) {` needs to be on the same line. Period.

1597866475
companion_cube
the whole one-pass compiler system is interesting, but a bit constraining, too

1597866500
KoljaKube
DarkUranium: Yeah, but still easier to get used to the brace than lua's 1-indexing ;-)

1597866503
pixelherodev
As a totally impartial advisor, I also suggest using Coyote when it's ready ;)

1597866517
pixelherodev
I have zero stake in the matter, despite the commit history indicating my contributions

1597866521
Nypsie[m]
What's Coyote's selling point?

1597866525
pixelherodev
"We made it"

1597866527
pixelherodev
:P

1597866531
Nypsie[m]
Oh

1597866534
KoljaKube
Someone have a link?

1597866539
DarkUranium
KoljaKube,

1597866544
pixelherodev
It's not remotely close to ready to be used, not actually :P

1597866581
DarkUranium
Nypsie[m], there's a few, depends on what interests you. It's quite different from many embedded langs. For starters, it's statically-typed. There's also a plan to make language server-related stuff builtin (that way, even ingame editors would get all the neat autocompletion, etc, "for free").

1597866598
DarkUranium
I'm too tired to think straight ATM, so forgive me if my "elevator pitch" is a bit flat :P

1597866608
pixelherodev
Interessssting

1597866631
Nypsie[m]
I like the idea of a built-in language server

1597866648
Nypsie[m]
Statically-typed is definitely great, but not ground breaking I suppose :P

1597866652
Nypsie[m]
Looking forward to seeing the end result

1597866655
pixelherodev
DarkUranium will correct me if this is a bad way to phrase it, but I like to think of Coyote like this: as powerful as C, as flexible and embeddable as Lua, and as performant (eventually, hopefully) as the JVM

1597866659
Nypsie[m]
It's part of the contest, right?

1597866661
DarkUranium
Nypsie[m], it kinda is, it's the only alternative to AngelScript in this category, I think.

1597866662
pixelherodev
yep

1597866664
DarkUranium
And AngelScript kinda sucks.

1597866666
KoljaKube
What Wren has also going for it is pretty unsurprising structure, when coming from C/C++. If it were a user-facing part of a software, that may be a good thing

1597866684
DarkUranium
KoljaKube, familiarity is an explicit design goal.

1597866686
pixelherodev
Coyote is a bit Ziggy IMO

1597866694
DarkUranium
Though there are some differences from other C-likes.

1597866699
pixelherodev
I think Zig + Coyote will be an excellent combination when they're both done :)

1597866704
DarkUranium
(where I deemed it "adequately beneficial")

1597866787
Nypsie[m]
DarkUranium: My bad for a moment I thought of strongly typed instead of statically typed.

1597866793
pixelherodev
Found the actual paper:

1597866799
pixelherodev
(the RISC-V thing)

1597866805
KoljaKube
Anyhow, I'm not the right person to promote Wren. I've barely used it, it just didn't shy me away on a superficial level.

1597866822
KoljaKube
I can say more once zapata is in use in my actual project ;-)

1597866828
ikskuh
how many people here have their own pet language? :D

1597866841
Nypsie[m]
<--

1597866858
DarkUranium
Nypsie[m], another thing: I do intend to compile Coyote to native as well eventually. The sort of "vision" is to use the VM for development and user stuff (think mods, or level "scripts") --- but compile to native for distribution.

1597866859
ikskuh
oh, you too? :D

1597866872
tdeo
is there any use for the offset field in builtin.TypeInfo.StructField that can't be done with the other builtins?

1597866874
DarkUranium
Because I'm personally a fan, the plan is to optimize for single-file distribution :)

1597866888
Nypsie[m]
ikskuh: I told you about it the other day on Discord :P

1597866896
ikskuh
oh :D

1597866900
ikskuh
i kinda forget? :D

1597866902
DarkUranium
Nypsie[m], what is thine algorithmic language, Sire?

1597866933
Nypsie[m]
DarkUranium: I like that idea. I was planning on doing something similar for mine to learn more about compiling to machine code instead of a vm.

1597866943
Nypsie[m]
Also private atm, been only working on it for about a month now.

1597866960
DarkUranium
Nypsie[m], there is a feature which I think will make machine code ... a bit easier than usual.

1597866964
Nypsie[m]
Also don't really have much experience, so it's not really something great

1597866976
DarkUranium
Nypsie[m], namely, I figured "fuck it" and decided to use SSA for the bytecode :P

1597866986
DarkUranium
It's 2020, JITs need it too anyways.

1597867024
DarkUranium
pixelherodev does have some concerns about using this from JITs, but I think it should be fine. High-end JITs tend to convert things

1597867135
Nypsie[m]
Hmmm interesting, will have some reads to do this weekend :)

1597867266
pixelherodev
Lies.

1597867270
pixelherodev
I have no concerns with it ;)

1597867270
DarkUranium
lol

1597867313
DarkUranium
pixelherodev, what platforms are we JITting? Zilog Z80, RISC-V, POWER9? :P

1597867394
pixelherodev
DarkUranium: if you have no objections to it, we could just target RISC-V and use my RISC-V -> * translator ;)

1597867403
pixelherodev
I'm still rewriting it to be, well, good

1597867985
pixelherodev
Oh this is sick

1597867989
pixelherodev
Kakoune's GDB integration is nice

1597868000
DarkUranium
neat

1597868025
DarkUranium
Nypsie[m], oh, right: If we do manage to get the plan done, Coyote will (to my knowledge) be the

1597868068
Nypsie[m]
Looking forward to giving it a spin

1597868149
pixelherodev
In less fun news, my battery's capacity is down 15% from where it was a few weeks ago :(

1597868159
pixelherodev
More than that, actually

1597868171
pixelherodev
Used to go up to ~75-80%, now it's typically at

1597868363
KoljaKube
Laptop battery?

1597868375
pixelherodev
Yeah :(

1597868381
pixelherodev
Even with powertop it's pretty bad now

1597868386
pixelherodev
Only about four-five hours

1597868455
pixelherodev
DarkUranium: yeah, it's

1597868460
KoljaKube
That's still enough time to run from one outlet to another ;-) Why is it degrading so quickly?

1597868466
pixelherodev
Age, probably

1597868485
pixelherodev
I have four others, but they're not much better

1597868491
pixelherodev
I got the laptop used :P

1597868520
pixelherodev
I set the tests to __builtin_trap on fail, and I can just casually print out variables :)

1597868547
KoljaKube
Considering that I get more than 6 hours only in very specific use cases, that's a nice battery life. What machine do you use?

1597868589
pixelherodev
DarkUranium:

1597868598
pixelherodev
It's an oldish Dell Inspiron

1597868620
pixelherodev
5th-gen i3 IIRC

1597868639
pixelherodev
`grep name /proc/cpuinfo | uniq` confirms

1597868695
companion_cube
DarkUranium: what do you mean "builtin LSP support"?

1597868700
companion_cube
the VM itself will do LSP?

1597868710
pixelherodev
companion_cube: the "VM" is integrated with the compiler

1597868716
pixelherodev
It's Lua-esque in that manner

1597868734
pixelherodev
But yeah, the idea is to expose LSP support within the library

1597868740
DarkUranium
pixelherodev, not exactly (not eventually)

1597868773
pixelherodev
Simplification means less time spent explaining ;P

1597868790
DarkUranium
lol, fair enough

1597868810
companion_cube
right, right

1597868811
DarkUranium
companion_cube, anyways, the idea is to provide APIs that have the same sort of features as LSP (maybe even more, who knows)

1597868823
companion_cube
but I mean, from within the 'normal' embedded language itself

1597868823
DarkUranium
companion_cube, LSP will

1597868826
companion_cube
not an external tool

1597868847
DarkUranium
What I mean is, the LSP stuff is builtin to the one binary you have. Not a separate project, not a separate executable, nor library.

1597868889
companion_cube
yeah, cool.

1597870486
ifreund
heh, y'all have a build.zig for Coyote despite it not being written in zig

1597870619
pixelherodev
ifreund: yeah :P

1597870625
pixelherodev
Then we switched to the build.py script :P

1597870668
pixelherodev
It generates a non-GNUed Makefile, which means broader cross-platform support for building

1597870725
ifreund
nice

1597870741
ifreund
guess meson was too bloated?

1597870761
ifreund
you're already depending on python for this after all

1597870890
pixelherodev


1597870971
ifreund
idk, I kinda like meson personally

1597871505
pixelherodev
ifreund: sure, but it depends on Ninja

1597871518
pixelherodev
The whole point here was to produce a

1597871549
ifreund
fair

1597871607
ifreund
though I don't think ninja is a heavy dependency, there's also a c99 implementation iirc

1597871618
pixelherodev
samu, yeah

1597872734
andrewrk
ooh tdeo I think you are going to make some people very happy :)

1597872954
ikskuh
yeah, i've seen it too!

1597872956
ikskuh
\o/

1597873087
pixelherodev
:)

1597873091
pixelherodev
Bunch of nice work going on

1597873109
andrewrk
pixelherodev, one option you have is to make your SPU Mk II emulator a third party project and zig could have a -Denable-pixelherodevs-spu-2-emulator to match -Denable-qemu and -Denable-wasmtime

1597873350
ikskuh
oh yeah, more backends

1597873361
ifreund
woot! that will be fun to play with

1597873437
pixelherodev
andrewrk: that's what I suggested initially :P

1597873460
pixelherodev
Alternately, we could do -Denable-spu2={pixelherodev,ikskuh}

1597873469
pixelherodev
Allow the user to specify which emulator to use

1597873481
ikskuh
haha :D

1597873484
ikskuh
xq plz

1597873527
andrewrk
oh xq has one already?

1597873600
companion_cube
you probably need a bunch of xml to scalably specify whose backend to use

1597873600
ikskuh
andrewrk: sure i have an emulator for my CPU :D

1597873601
companion_cube
enterprise style

1597873610
ikskuh


1597873656
andrewrk
oh right I've seen this. we need a qemu-usermode equivalent though for ci testing

1597873675
andrewrk
well. not usermode

1597873707
andrewrk
I spoke too quickly. Anyway. we don't have to be executing the tests in order to merge SPU Mk II backend

1597873719
andrewrk
just cross compiling them is enough for now

1597873719
pixelherodev
andrewrk: I can write the test loader in maybe ten minutes of work :P

1597873740
pixelherodev
It really is as simple as iterating over the headers and LOADing the listed sections into the buffer

1597873742
ikskuh
andrewrk: what do you need exactly?

1597873755
ikskuh
a executable that runs a piece of code and has what as I/O

1597873759
andrewrk
ikskuh, are you familiar with how the compare_output stage2 tests work right now?

1597873766
pixelherodev
ikskuh: it's output-only

1597873767
pixelherodev
not input

1597873767
ikskuh
no, not really

1597873779
pixelherodev
basically, it runs the produced code, and compares the output against the given "expected" output

1597873783
pixelherodev
e.g. "Hello, world!"

1597873786
ikskuh
okay

1597873789
pixelherodev
If it sees any other string - or no output - it fails

1597873801
pixelherodev
I was going to copy your suggestion - using a section of emulated RAM as "output"

1597873813
andrewrk
ok so we have a declarative set of test cases, that specify the target being built for. even if the produced binary cannot be run, the compilation happens. the test harness will try to run the binary with different techniques, based on what you declare is available

1597873829
pixelherodev
Heh, just get support into QEMU! /s

1597873841
andrewrk
if you pass -Denable-qemu for example, then the test harness will actually run all the linux target cases using it

1597873877
andrewrk
so the idea here would be to not only be able to cross compile spumk2 test cases but also verify that they have the correct behavior at runtime using some kind of emulator

1597873881
ikskuh
pixelherodev: using the ram as output is probably the easiest thing to do

1597873887
pixelherodev
Not really

1597873891
pixelherodev
UART is easier, arguably

1597873895
ikskuh
hm

1597873897
ikskuh
yeah, maybe

1597873897
pixelherodev
It's

1597873901
tdeo
about to implement @Type for TypeInfo.Enum now, but i'm not sure whether to make Enum.tag_type (type) and Enum.value (comptime_int) optional types, since you can always figure out what the compiler would choose

1597873903
pixelherodev
But in exchange,

1597873905
pixelherodev
simpler*

1597873944
tdeo
there could be a helper in std.meta that fills those in, or they could be optional fields and the compiler always returns non-null when using @typeInfo

1597873946
pixelherodev
andrewrk: is there an issue with prepending every test for a target with e.g. an output function?

1597873951
andrewrk
tdeo, you can override the tag values with enum { a = 1234 }

1597873952
pixelherodev
For CBE, I prefix everything with the header

1597873968
pixelherodev
but I'm not sure if it's a good idea to do something similar for a more standard backend

1597873976
pixelherodev
s/more standard/proper ISA

1597874009
tdeo
the question is, should @Type make it easy to have sequentially increasing from zero tag values or should the user have to do that themselves

1597874029
tdeo
and second question, should @Type make it easy for the user not to have to pick a tag type and have the compiler do that for them

1597874029
andrewrk
tdeo, hmm I see your question. my suggestion is to make them non-optional to match the output of @typeInfo and let userland solve the convenience problem (as you noted)

1597874043
tdeo
yeah, that's what i was leaning towards myself

1597874672
Cadey
does zig have anything like rust's env!?

1597874695
ifreund
what does env! do?

1597874698
pixelherodev
What's R - imp'd :P

1597874709
Cadey
includes compile-time envvars as strings in the binary

1597874766
Cadey
eg: env!("CARGO_PKG_VERSION");

1597874766
pixelherodev
build_options

1597874771
ifreund
no, zig doesn't have a way do read env vars at comptime

1597874773
pixelherodev
They have to be explicitly specified though

1597874783
pixelherodev
ifreund: technically, you could, via build.zig

1597874788
pixelherodev
and then supply it as a build_option

1597874792
ifreund
ok sure

1597874805
pixelherodev
But no, that's not a suggested method for Zig

1597874812
ifreund
but yeah build options are the way to do compile-time configureation

1597874826
pixelherodev
Cadey: If you want to pass vars in while building, look into build.zig's build_options

1597874835
pixelherodev
It lets you do e.g. `zig build -Dfoo=bar`

1597874846
pixelherodev
Emphatically

1597874937
ifreund
well one could implement this but it would be an antifeature imo

1597874994
pixelherodev
Agreed

1597875009
Cadey
fair, was curious more than anything

1597875040
Cadey
wanted to use it to engrave version strings into programs at build time

1597875059
pixelherodev
Zig does that - look at zig's build.zig

1597875172
Cadey
how do i set -D with it?

1597875175
ifreund
huh, didn't know we have a Version struct in builtin

1597875224
ifreund
there's two separate parts here, reading options from the command line and passing options to the project

1597875240
ifreund
the former done with Builder.option()

1597875262
ifreund
the later with LibExeObjStep.addBuildOption()

1597875284
ifreund
you can check out my build.zig for an example

1597875445
ifreund
note that you can also see your custom options when running zig build --help

1597875472
Cadey
is addBuildOption the thing i want?

1597875505
ifreund
if you want to pass something from the command line to your code, you want both

1597875528
Cadey
ah

1597875531
Cadey
i see

1597875534
ifreund
addBuildOptions() makes values appear in the struct you get from @import("build_options);

1597875630
Cadey
i see

1597875638
Cadey
thanks

1597875737
ifreund
no problem!

1597875792
pixelherodev
I hate to say it, but ZLS is a bit behind CCLS :(

1597876301
Cadey
how do i call a function in a C file from zig?

1597876350
ikskuh
extern fn foobar(arglist) returnvalue;

1597876352
ikskuh
foobar();

1597876384
andrewrk
if you want to use an .h file you can use @cImport

1597876389
Cadey
ah :+1:

1597876609
Cadey
andrewrk: is there a good reference for what i can and cannot do with build.zig?

1597876634
andrewrk
unfortunately documentation is lacking on build.zig but there are many examples to look at

1597876659
pixelherodev
As long as you don't look at mine

1597876665
andrewrk
Cadey, oh neat, Sobeston has some writings on it:

1597876667
pixelherodev
Mine probably violate the Geneva Conventions

1597876747
Cadey
exe.addSourceFile seems to be missing for 'std.build.LibExeObjStep'

1597876802
ifreund
you don't need to add every individual zig source file, just the main one

1597876832
ifreund
there is LibExeObjStep.addCSourceFile() for compiling C code

1597876980
Cadey
'unistd.h' file not found ???

1597876997
daurnimator
Cadey: have you made it depend on libc?

1597877015
ifreund
exe.linkLibC()

1597877220
Cadey
i see

1597877295
Cadey
and how do i specify a static binary?

1597877333
pixelherodev
For Linux, `-Dtarget=native-linux` is enough IIRC

1597877393
Cadey
:+1:

1597877401
ifreund
yeah, static is the default

1597877565
Cadey
how do i include a header in the current working directory? cInclude seems to do #include <foo.h> and i want #include "foo.h"

1597877594
ifreund
exe.addIncludeDir(".");

1597877652
Cadey
ah i see

1597877654
Cadey
i have it now

1597878147
Cadey
thanks daurnimator, ifreund, andrewrk

1597878176
Cadey
i'm doing some satanic things involving zig in a little "linux distribution" i'm cooking up for webassembly on the server stuff

1597878186
andrewrk
Cadey, when you link libc it will use the default libc of your system. if you want static, you should tell it to use musl

1597878211
Cadey
how do i tell it to use musl again? sorry but it's been a while since i did zig stuff last

1597878217
andrewrk
target value of `native-linux-musl`

1597878220
andrewrk
assuming you want the native cpu

1597878241
andrewrk
if you're cross compiling you probably want to specify arch

1597878245
andrewrk
e.g. x86_64-linux-musl

1597878267
andrewrk
wasm would be wasm32-freestanding

1597878275
andrewrk
zig's wasm32-freestanding libc is incomplete

1597878311
Cadey
yeah, this is actually on the amd64 side of things for once

1597878377
Cadey
i'm making some linux distribution-like programs to run in firecracker that will also run the webassembly executor

1597878509
Cadey


1597879065
Cadey
136KB static binary output :D

1597879133
andrewrk
some other relevant flags: --release-small --strip --single-threaded

1597879147
andrewrk
(use only when applicable)

1597879203
Cadey
holy crap

1597879218
Cadey
strip makes it 8 kb

1597879464
ikskuh
strip those bits!

