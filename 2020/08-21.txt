1597968546
andrewrk
-femit-docs

1597968582
andrewrk
for now it's recommended to use it with `zig test` because the tests tend to reference more decls making more things show up

1597968947
vramana
andrewrk: Should this command work ./zig test -femit-docs ./lib/std/std.zig ?

1597969022
andrewrk
vramana, I would do: ./zig test ../lib/std/std.zig -femit-docs -fno-emit-bin

1597969142
andrewrk
vramana, looks like it will put the docs in the cache directory if you do that, you can use `--output-dir .` to make it put the stuff in a docs/ directory in the cwd

1597969164
vramana
andrewrk: Many tests currently fail with error: expected type '*mem.Allocator', found '*std.mem.Allocator'

1597969184
andrewrk
I just tried it on latest master branch

1597969205
andrewrk
I think you have a collision between 2 lib folders

1597969253
andrewrk
make sure you are running the test on the same copy of the std lib that zig uses as its detected std lib path

1597969258
andrewrk
(you can check this path with `./zig env`)

1597969291
andrewrk
side note, I'm not sure why the std lib cache_hash blake3 hashing of files is so slow

1597969799
vramana
andrewrk: The std lib path seems to be inside the build folder. But I now get a different error. ./lib/zig/std/crypto/md5.zig:248:15: error: unable to find 'test.zig'

1597969847
andrewrk
the std lib tests require a source checkout

1597969875
andrewrk
I recommend to delete your second copy of the zig lib directory and rely only on the one found in the source tree

1597970132
vramana
Then how would zig env know it? All I did now was run make install to build the zig binary and using that to generate documentation. Now I should change std lib the zig binary uses to lib/std folder from the source is that what you are saying?

1597973881
pixelherodev
What portion of comptime did vexu add earlier?

1597984115
pixelherodev
Ah crap. Worse than the battery capacity being diminished is that the charge time is much

1597984127
pixelherodev
Guess I just got to stay in range of the buildbuddy at all times :P

1597987305
pixelherodev
Would anyone here be interested in a Gentoo overlay to fix the LLVM issues when building Zig?

1597987641
Ristovski
pixelherodev: What issues? Not that I've attempted to compile Zig myself on Gentoo

1597987674
Ristovski
well hmm, I already have llvm 11

1597987754
pixelherodev
Ristovski: The Gentoo ebuilds for LLVM 10+ remove important shared libraries that Zig depends on

1597987777
Ristovski
pixelherodev: Oh /that/. Yeah I remember hitting that issue with some other software that depends on the libs

1597987781
pixelherodev
Which requires a full rebuild with a modified ebuild to work around, currently (this is somewhat ameliorated if ccache is installed with a large enough cache size)

1597987803
Ristovski
Yeah I think I just hacked something horrible together in the meantime

1597987851
Ristovski
pixelherodev: It was a configuration step flag that enables those, right? (can't remember now)

1597987885
pixelherodev
Yep, I did the same thing.

1597987895
pixelherodev
twas a hassle, because it required updating the hash

1597987913
Ristovski
Ah yes, -DLLVM_DISTRIBUTION_COMPONENTS iirc

1597987965
Ristovski
and also -DBUILD_SHARED_LIBS

1597988020
pixelherodev
Hmm. I'm thinking long-term instead of making my own distro (as I've discussed in the past), I'd want to write a replacement for portage (probably in Zig, but distributed as C produced via CBE for more convenient builds), and eventually just write ebuilds which depend on IR sources instead of the original source

1597988073
Ristovski
As in, it would fetch IR instead of source code for packages?

1597988094
pixelherodev
It'd result in, effectively, an upstream-Gentoo-compatible system, distributing per-architecture IR and optimizing it (with -march=native or equivalent) on install

1597988143
Ristovski
I see. I think intels clear linux guys thought of doing the same thing, no idea if they ever did anything

1597988158
pixelherodev
Native portage (instead of python) means faster dep calculations (which have been annoyingly long on multiple occasions for me), and pre-optimized IR means build times on par with

1597988178
pixelherodev
I wouldn't hope to compete with, say, Alpine, but maybe more like Debian install times

1597988266
Ristovski
Heh, dependency checks have become so long for me that I remember all the dependencies (for the most common stuff I recompile) myself

1597988269
Ristovski
so I just pass --nodep

1597988280
pixelherodev
*Ouch*.

1597988284
pixelherodev
See that's kinda my point.

1597988324
pixelherodev
Portage is the one pain point I have with Gentoo

1597988342
Ristovski
Indeed

1597988360
pixelherodev
Says a lot that a core feature is the only pain point

1597988380
pixelherodev
Alpine's the only one that comes

1598006566
pixelherodev
Wow, ELF loader for SPU II tests was downright trivial :)

1598007038
ikskuh
as said

1598007102
pixelherodev
Getting it to stop infinite looping is a bit harder :P

1598007374
pixelherodev
Hmm. It's infinite-looping :(

1598007383
pixelherodev
I mean, in the interpreter :P

1598007728
pixelherodev
`Test [1/1] test "self-hosted"...tests [23/23] SPU-II Basic Test [1/1] update [5/4] Infinite loop detected in SPU II test!` Eh, better than before :P

1598008295
pixelherodev
Ohhhhh, it's still using four byte pointers in the GOT, so it's getting 0x0000 as the target addr of the function call :P

1598008789
pixelherodev
ikskuh: got it passing :D

1598008810
ikskuh
\o/

1598008880
pixelherodev
Pushed :D

1598008916
pixelherodev
Just need to address andrew's comments

1598009099
pixelherodev
... I have to *rebase it*.

1598009310
pixelherodev
... annnnnd suddenly it's broken :(

1598009313
pixelherodev
`TODO buf_write_value_bytes maybe type`

1598009390
pixelherodev
halp

1598009489
ikskuh
comptime bitcast happening?

1598009491
KoljaKube
I think I that one before

1598009497
KoljaKube
+encountered

1598009509
pixelherodev
It's not my fault! Ha!

1598009514
pixelherodev
I'm running a bisect, it happens on master too.

1598009528
KoljaKube
Yep, still in my clipboard history :D

1598009561
pixelherodev
Introduced by  0f677810ea9d5c8ba549f6c9948979a768a1eda6, I think

1598009603
pixelherodev
Sure seems like it

1598009649
pixelherodev
Going to try rebasing that out of existence :

1598009651
pixelherodev
:P

1598009682
pixelherodev
tdeo: you on?

1598009692
pixelherodev
That commit is definitely the cause.

1598010451
ifreund
anyone able to get zig fmt to make this look nice?

1598010475
ifreund
it won't let me put a line break before the while

1598010592
Nypsie[m]
I'd just give it a named label and break that

1598010631
ifreund
actually ended up refactoring this away, was just thinking about opening up an issue

1598010658
ifreund
I'd hate to see funky formatting behavior get stabilized and locked in stone

1598010663
Nypsie[m]
Doesn't hurt to make things more explicit anyway, instead of a '1-liner'

1598011640
pixelherodev
Anyone else have the issue I mentioned in #6115?

1598011675
pixelherodev
Ah wait, maybe it's because my Zig is outdated?

1598011771
ifreund
I'll try, one sec

1598011778
pixelherodev
Updated Zig and I still get that issue

1598011801
pixelherodev
No wait, never mind

1598011831
ifreund
yeah built fine for me

1598011994
KoljaKube
translate(self.cPtr(), @intToPtr([*c]const f32, @ptrToInt(Vec3Type.constCPtr(&v))));, translate is `fn([*c][4]f32, [*c]const f32) callconv(.C) void`

1598012012
KoljaKube
error: cast discards const qualifier (pointing at the first @) - am I missing something?

1598012068
ifreund
is self const?

1598012100
pixelherodev
Woot!

1598012108
KoljaKube
self is *Self, so no as I understand

1598012112
pixelherodev
andrewrk: SPU backend PR (#6096) is ready for review!

1598012113
pixelherodev
:D

1598012117
pixelherodev
KoljaKube: that's correct, yeah

1598012138
pixelherodev
What does cPtr return?

1598012141
pixelherodev
What type?

1598012151
KoljaKube
[*c]f32

1598012156
KoljaKube
No

1598012159
KoljaKube
[*c][4]f32

1598012163
Nypsie[m]
pixelherodev: Great work! :)

1598012167
pixelherodev
Nypsie[m]: thanks :)

1598012179
KoljaKube
But the compiler points at the @, so isn't the second parameter the issue?

1598012184
pixelherodev
Stil needs a lot of work for proper support though

1598012190
pixelherodev
KoljaKube: Ahh

1598012196
pixelherodev
I thought you said "the first *param*"

1598012238
KoljaKube
pub const translate = @ptrCast(fn ([*c][4]f32, [*c]const f32) callconv(.C) void, cc.glmc_translate);

1598012248
ifreund
uh, is `v` const?

1598012259
ifreund
probably need to see more code

1598012263
KoljaKube
(I did this because the C code does not use const, but I know the parameter is only read in the function

1598012282
KoljaKube
v is Vec3Type

1598012286
KoljaKube
So it should be const

1598012357
KoljaKube
Which is why I wrote the separate constCPtr conversion

1598012368
KoljaKube
I'll gist together the relevant code snippets I guess

1598012691
KoljaKube
Not in a way that compiles, but that contains the relevant types:

1598012786
KoljaKube
The int-ptr-casting is only there to make sure that the problem is in the call, and not my implementation of constCPtr()

1598012883
ifreund
translate(self.cPtr(), @intToPtr([*c]const f32, @ptrToInt(&v)));  <-- does this work?

1598012901
KoljaKube
What do you mean?

1598012915
KoljaKube
Oh, sorry

1598012955
KoljaKube
Nope, same error

1598012978
KoljaKube
I didn't see the changes at first...

1598012992
pixelherodev
try reducing it to subexprs

1598012998
pixelherodev
See if you can narrow down which subexpr causes it

1598013057
ifreund
what if you call cc.glmc_translate(self.cPtr() @intToPtr([*c]f32, @ptrToInt(&v)));

1598013105
ifreund
i'm not sure the @ptrCast() on the function pointer is sufficent to const-cast the parameter

1598013113
KoljaKube
const ps: [*c][4]f32 = self.cPtr(); const pv: [*c]const f32 = Vec3Type.constCPtr(&v); cglm_call.translate(ps, pv);

1598013121
KoljaKube
pixelherodev: Like this?

1598013144
ifreund
@intToPtr(@ptrToInt()) is the only way to const cast in zig, and I think it's technically UB

1598013158
KoljaKube
ifreund: @typeName(@TypeOf(translate)) looks good, does that count for something?

1598013201
ifreund
can't say, what's the type of cc.glmc_translate?

1598013206
pixelherodev
If you're constcasting, there's probably a problem

1598013232
KoljaKube
ifreund: intToPtr(ptrToInt()) and requiring everything to be var is what I'm trying to get rid of

1598013280
ifreund
My theory is that you have to @intToPtr(@ptrToInt()) the function itself

1598013290
KoljaKube
void glmc_translate(mat4, vec3)

1598013375
pixelherodev
ew

1598013383
pixelherodev
If you need to do that, try to find a better way to accomplish the task

1598013400
pixelherodev
If you need to cast the function type to be able to call it, something

1598013402
pixelherodev
It's just a matter of time

1598013434
KoljaKube
Mhkay

1598013474
KoljaKube
I had hoped that

1598013524
ifreund
maybe you can get a patch merged upstream

1598013537
pixelherodev
Adding const should be fine.

1598013549
KoljaKube
pixelherodev: But that's what I do

1598013559
KoljaKube
ifreund: Just checked, can't intcast the function ptr

1598013593
KoljaKube
It is apparently a runtime value, I don't want to add actual function pointers

1598013616
pixelherodev
KoljaKube: Did you break it down into subexprs?

1598013626
pixelherodev
Always double check these things

1598013641
KoljaKube
pixelherodev: I wrote something above, because I'm not completely sure what you meant

1598013683
KoljaKube
ifreund: The thing is, the library has a lot of functions, and does not use const. I would need to annotate all functions for that to make sense

1598013698
pixelherodev
KoljaKube: exactly that

1598013700
KoljaKube
Which is why I hoped to just add the const in zig to all the functions I actually use

1598013715
KoljaKube
Error points at the p in pv inside the call

1598013719
pixelherodev
instead of `a(foo(), bar())`, you split the foo and bar out of it

1598013771
KoljaKube
So, no additional information, aside that constCPtr does it's job

1598014026
KoljaKube
I'm not the only one with that idea, but apparently const in C is problematic or something?

1598014122
KoljaKube
I guess I'll stick to staying const-correct in zig and intcasting away the const when calling C

1598014134
pixelherodev
KoljaKube: the issue that you linked is the other way around

1598014146
pixelherodev
They were trying to pass const values to non-const params, which is (of course) invalid

1598014153
pixelherodev
There's nothing problematic about const in C

1598014260
KoljaKube
The referenced PR (86) marks the correct parameters as const

1598014290
KoljaKube
- glm_translate(mat4 m, vec3 v) {

1598014291
pixelherodev
Yes... and?

1598014292
KoljaKube
+ glm_translate(mat4 m, const vec3 v) {

1598014322
KoljaKube
Maybe I misunderstood "other way around"

1598014324
pixelherodev
Adding const to a parameter that isn't modified is never an issue

1598014372
KoljaKube
Sure

1598014374
KoljaKube
Then they didn't manage to call their functions correctly afterwards, I guess?

1598014450
KoljaKube
Ah well, worst case I will need to actually make some things var instead of casting there in the future, best case I can remove the casts if the code is changed upstream

1598014467
KoljaKube
I happy for a short time when the compiler accepted by function cast ;-)

1598014718
KoljaKube
pixelherodev:

1598016853
KoljaKube
From a technical perspective, does it make sense that packed unions are align(1)? That would make their contents unusable in some circumstances, wouldn't it?

1598016898
fengb
You can manually align the first element to force the struct alignment

1598016908
KoljaKube
Not for unions

1598016915
KoljaKube
Not yet, anyway

1598016929
KoljaKube
normal unions inherit, but packed ones don't

1598016953
fengb
Oh right

1598016967
KoljaKube


1598017293
KoljaKube
Can I align an array on instantiation?

1598017577
fengb
You can declare alignment on foo: `const foo align(16) = make()`

1598017620
fengb
Wait I think it’s after all the types? `const foo: [4]f32 align(16)`

1598017685
fengb
Memory locations are aligned, not values so you can’t return aligned data but you can set it into an aligned variable

1598017923
KoljaKube
Ah, OK, so alignment is not directly part of the type system, but every type has a default alignment?

1598017963
fengb
It exists on memory locations only, so pointers and variable declarations

1598017995
fengb
Fixing alignment usually involves copying the data into a new aligned variable

1598018071
KoljaKube
OK, I wasn't clear on where the information is stored in Zig

1598018099
scientes
KoljaKube, zig is a static language, this still is only known when the program is compiled, not after

1598018104
scientes
*stuff

1598018322
pixelherodev
alexnask[m]: good news! That bug I mentioned (off-by-one line numbers in LSP) is a kak-lsp bug, not a ZLS one

1598018326
pixelherodev
It occurs with ccls as well

1598018630
KoljaKube
scientes: What I meant was:

1598024470
protheory8-new-m
How do I use async to do something useful in Zig?

1598026246
ifreund
protheory8-new-m: that's a pretty broad question, do you have a specific goal?

1598026290
protheory8-new-m
No, not really

1598026318
ifreund
you may have already seen it but this talk gives a good high-level intro

1598026371
ifreund
andrew also made a video demonstrating a basic chat client/server using async a while back:

1598026409
ifreund
in general though it's easier to have a problem and look for a tool than have a tool and look for a problem

1598026415
protheory8-new-m
Thanks, I'll check it out

