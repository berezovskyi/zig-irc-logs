1596501962
gruebite
can i save runtime type information? say in a pointer? :D

1596502017
gruebite
i have a layer of indirection: export fn -> C -> export fn, and need to determine the type i can store in a payload

1596502035
gruebite
along with the types declarations, so i can call the correct function

1596502217
gruebite
comptime type information*

1596504209
ky0ko
so i've been having this issue for a while and i just started to dig into it a little more. i'm running alpine linux, built zig from latest git. i have an example c89 program that links with sdl2, that when built with gcc or clang, works perfectly. when built with zig cc, sdl2's video subsystem doesn't initialize correctly, and so the program does not work.

1596504308
ky0ko
the program in question can be found here

1596504324
ky0ko
and this seems to extend to using SDL2 from zig, as well. I get the same error if I try to initialize SDL2 from zig code.

1596506680
andrewrk
ky0ko, I'm guessing the video driver on that system depends on musl being dynamically linked

1596506809
andrewrk
there's a lot going on with this topic, but suffice to say the workaround available to you today would be using zig build-obj and linking with system clang or gcc

1596506819
andrewrk
or build-lib

1596507442
pixelherodev
alexnask[m]: when will ZLS be able to do this?

1596507511
pixelherodev
gruebite: I don't think that's possible

1596510881
fengb
Is there a way to kill a thread?

1596510979
pixelherodev
Finally figured out why Valgrind never worked on zig binaries for me

1596510983
pixelherodev
it doesn't support static executables

1596510994
pixelherodev
can't override the dynamic linker...

1596511577
pixelherodev
I think Valgrind is a bit too conservative in deciding what qualifies as "still reachable"

1596511590
pixelherodev
If I can trivially free the memory at the end of main, it should qualify

1596511639
pixelherodev
Ah, I know!

1596511651
pixelherodev
The pointers are on the *stack*, so it doesn't notice them probably

1596512755
pixelherodev
... I know what I'm doing tomorrow.

1596512779
pixelherodev
I had an idea on how to make the self-hosted parser faster / more memory-efficient, I'm going to probably spend at least an hour playing with it

1596513447
andrewrk
what's the idea?

1596513479
andrewrk
line numbers & stepping is working :)

1596513491
andrewrk
no llvm

1596513515
pixelherodev
andrewrk: currently, all nodes are effectively subclasses of Node, right?

1596513525
pixelherodev
The idea was to make it non-generic (and then update allllll the callers)

1596513533
andrewrk
it's already non generic

1596513538
pixelherodev
... I need to take another look :P

1596513584
andrewrk
I don't understand the idea

1596513646
pixelherodev
Probably not a very good idea :P

1596513652
pixelherodev
so that's okay

1596513828
andrewrk
you don't want to share the idea?

1596514480
pixelherodev
1) it's not really feasible, after looking over the source more in-depth, and 2) I'm fairly certain it's a bad idea anyways

1596514522
pixelherodev
If you hadn't made me think further on it now, I'd have probably ended up saying "whoops, bad idea" tomorrow morning lol

1596514533
pixelherodev
Well, today morning (after midnight woot), but you know what I mean

1596514962
andrewrk
fair

1596514997
andrewrk
there is a bunch of tedious work to do to further memory-optimize the ast, if you want to take that on

1596515032
andrewrk
look through my latest commit diffs that touch the ast.zig file and you'll see the kind of changes I'm talking about. it's all about reducing the size of AST nodes in memory

1596515709
pixelherodev
Nah, I'll focus on the SPU stuff

1596515724
pixelherodev
On that note, I think it's still your turn :)

1596515736
pixelherodev
I'll work on the next few PRs today regardless

1596515857
andrewrk
ok I'll take a look

1596515930
pixelherodev
:)

1596516842
andrewrk
std.log integrating nicely with zig build:

1596516861
andrewrk
here I'm passing a list of log scopes to enable

1596517179
pixelherodev
Smart

1596517835
pixelherodev


1596525781
andrewrk
yooo it works

1596525811
andrewrk
stage2 has incremental compilation + debug line info working. it's so beautiful

1596526188
pixelherodev
:

1596526189
pixelherodev
:)

1596526200
pixelherodev
incremental debugging ;)

1596526226
pixelherodev
The next awesome thing would be hot-swapping incremental debugging

1596526236
pixelherodev
Not sure how that'd work with GDB though

1596527584
pfg_
in codegen.zig, what is genSetReg supposed to do with a MCValue of .memory?

1596528217
ikskuh
<andrewrk> stage2 has incremental compilation + debug line info working. it's so beautiful

1596528218
ikskuh
nice!

1596528226
gruebite
:O

1596528767
andrewrk
pixelherodev, this incremental compilation stuff is 90% of the work of hot code swapping

1596528782
andrewrk
all that's left is the remaining 90%

1596528843
andrewrk
pfg_, isn't that already implemented? it's supposed to generate a load from memory into a register

1596528938
pfg_
I'm doing riscv64

1596528956
andrewrk
gotcha

1596528956
Sahnvour
who needs json or anything when we have hot code swapping + fast zig compiler ? looking forward to use this as my data description language

1596528956
pfg_
figured it out, it's a load. I forgot mov in x86 could read memory so I was confused how it was working in x86

1596528994
Nypsie[m]
ikskuh: We should setup CI for zig-network :P

1596529014
pfg_
I got a simple one function hello world working in self hosted riscv64 now

1596529023
andrewrk
cool!

1596529041
andrewrk
good news about the debug info stuff: it's completely architecture independent so far

1596529105
ikskuh
Nypsie[m]: true. wanna do it? i have to focus strongly on work today :P

1596529137
Nypsie[m]
Sure, will do it tonight after work

1596529154
ikskuh
\o/

1596529504
Nypsie[m]
andrewrk: I really appreciate how clean and readable self hosted is so far.

1596529539
andrewrk
:)

1596529667
andrewrk
pfg_, I'm glad you're adding risc-v. it'll be nice to have 2 architectures, to help guide me away from making the backend too x86 specific

1596529688
andrewrk
that way I can make sure the register/stack allocation code is general enough to work for most architectures

1596533200
pfg_
why is got_addr in genCall 0x4000008 when the function is at 0x8000020? and the second time it's 0x4000010 when the function is at 0x800004a

1596533290
pfg_
oh I have to load it from the offset table somehow

1596533435
pfg_
ok, hello world with seperate print and exit functions is working now

1596533829
andrewrk
sweet, sounds like you got incremental compilation hooked up

1596533849
pfg_
I didn't do anything specifically related to incremental compilation so idk

1596533871
andrewrk
that's the beauty of the design :D

1596534447
pfg_
how can I get code to align to even addresses? my jump to 80007f seems to have gone to 80007e because the last bit is set to 0 in a jump

1596534626
pfg_
@andrewrk

1596534938
pfg_
instructions have to be two byte aligned

1596536251
ikskuh
Biolunar:

1596536261
Biolunar
yo

1596537001
pfg_
nvm I found the option to align types

1596548651
blinghound
is there a function like @fieldParentPtr for unions?

1596549746
ifreund
blinghound: you don't need it, unions only have one field

1596549755
ifreund
the address of the field is the address of the union

1596549757
scientes
you can just @ptrCast probably

1596549766
scientes
except that won't work

1596549783
scientes
because zig unions are not extern unions

1596549788
scientes
maybe that should just work?

1596549803
ifreund
i feel like that should work, why wouldn't it?

1596549822
scientes
cause unions have debug stuff in debug mode

1596549830
daurnimator
ifreund: not necessarily

1596549839
ifreund
hmm, right

1596549840
scientes
to make sure they are not used to cast things like extern unions are

1596549860
ifreund
I guess we need a language spec to know for sure

1596549886
daurnimator
I'm actually suprised @fieldParentPtr doesn't work on unions already

1596549905
scientes
ugggh, this channel is like #go-lang was 10 years ago. Stop worshipping the language

1596549963
ifreund
scientes: ?

1596549978
scientes
it should just work on unions

1596550007
ifreund
the @ptrCast() or @fieldParentPtr()?

1596550009
scientes
people always get excessively pedantic about languages, like saying that C is not a stack machine

1596550015
ifreund
I assume you mean the latter

1596550027
scientes
@fieldParentPtr()

1596550032
scientes
ike daurnimator said

1596551794
blinghound
ok @ptrCast(*UnionType, @alignCast(@alignOf(UnionType, UnionChild)) works

1596551829
blinghound
oops, should be *UnionChild

1596551912
alexnask[m]
This is UB for non-extern unions, I agree @fieldParentPtr should work here

1596552012
blinghound
is there an issue open for this?

1596552075
alexnask[m]
I dont think so

1596568606
ifreund
fengb: If you have a minute, I'd love your thoughts on

1596569878
gruebite
i created a monster. a script to generate shim functons over C functions with <16 bytes for parameters OR return types

1596570725
gruebite
now the question is do i add do it for ALL the apis? since i'm adding a prefix, it could suck to always have to check if it won't work

1596573810
andrewrk
I'm planning to do a live stream in about 1 hour 20 minutes. Agenda is to demo the incremental compilation + debug line number info and then LLVM11 upgrade part 2

1596574014
ifreund
nice! i will make some pasta in preperation

1596574180
andrewrk
ifreund, I would be happy to talk stage2 stuff too, anything I can explain or demo for people trying to contribute

1596574242
fengb
ifreund: everything makes sense to me 👍️

1596574259
fengb
I'm a little afraid of call_indirect being less performant but that's a general gut reaction

1596574284
andrewrk
oh I didn't see 5985 until just now, will take a look

1596574475
ifreund
fengb: yeah, call indirect will certainly be less performant

1596574492
ifreund
maybe I should hand-code some wasm and benchmark it

1596574512
ifreund
it may not be significant, needs research

1596574561
ifreund
andrewrk: would appreciate it. #5985 is mostly a brain dump of what I've been thinking about the past couple days

1596574585
ifreund
it does give me somewhere to start with regards to an implementation though

1596574588
andrewrk
call_indirect is how x86 does incremental compilation

1596574641
fengb
I think the "start" should be fairly straightforward. Zig code doesn't use this section

1596574679
ifreund
does wasi have a different entry point?

1596574703
ifreund
I'll admit that I haven't really read up on wasi yet

1596574722
fengb
Yeah it's different. I think it's an exported function name

1596574733
ifreund
makes sense

1596574747
fengb
start is reserved for setting the internal state at runtime. Mostly for constructors and such, which we don't have

1596574747
ifreund
yeah the start section should be the easiest then :P

1596574766
ifreund
do we have a way to do imports yet?

1596574779
fengb
Yeah, it's just `extern "module" fn foo();`

1596574789
ifreund
makes sense

1596574794
fengb
Caveat is that you can't import variables in LLVM atm

1596574797
fengb
So only functions

1596574828
ifreund
guess self hosted will be more feature complete :P

1596574831
andrewrk
pfg_, it might be nice to try to get your riscv branch to a mergeable state as soon as possible to help avoid merge conflicts. It's OK for it to be incomplete, as long as there aren't regressions of existing test cases

1596574858
andrewrk
you can do that pattern you see everywhere of returning a compile error that says "TODO: implement xyz"

1596574905
andrewrk
ifreund, it might be instructive to read start.zig:

1596574909
andrewrk
you can search for "wasi"

1596574936
andrewrk
start.zig is kind of cool file, you can learn what code runs before main on every system at the same time, and it's only 272 lines

1596574974
ifreund
good tip, I had read parts of it before but forgot to check in this case

1596575072
andrewrk
pfg_, yeah, all tests passing, in my opinion we should just merge this!

1596575086
andrewrk
unless you enjoy resolving merge conflicts :P

1596575112
pixelherodev
Ugh

1596575125
pixelherodev
andrewrk: while you're at it, mind looking at mine soon?

1596575129
pixelherodev
Same reason :P

1596575264
andrewrk
I'm so tickled that our inline assembly support so far is literally  if (!mem.eql(u8, inst.asm_source, "syscall")) return self.fail(inst.base.src, "TODO implement support for more x86 assembly instructions", .{});

1596575285
andrewrk
you can go a long way with that

1596575302
pixelherodev
Yep!

1596575408
pixelherodev
Huh, actually

1596575452
pixelherodev
My grep-fu needs work, hold on :P

1596575483
pixelherodev
At a quick glance, that's literally the only instruction we need for linux x64 support

1596575494
pixelherodev
Potentially `nop` for a test

1596575505
pixelherodev
`pause` for threading, maybe?

1596575508
pixelherodev
But that's really it

1596575550
andrewrk
wow riscv codegen is so much easier than x86

1596575584
pixelherodev
You say that like it surprises you!

1596576210
Snektron
So when are we getting brainfuck codegen

1596576234
pfg_
asm volatile("<>>>>.<<.>>>,")

1596576302
pixelherodev
Snektron: oh god no please don't give people ideas

1596576305
pixelherodev
Those are dangerous

1596576331
Snektron
will codegen.zig be the new ir.cpp

1596576364
pfg_
andrewrk, how should I do a compare_output test for a non native platform?

1596576387
pixelherodev
pfg_: I can answer that :)

1596576401
pixelherodev
See #5972

1596576412
andrewrk
pfg_, you just specify the target and the build system figures out whether to run it or not

1596576430
pixelherodev
I was going to say "hook it up to QEMU" :P

1596576451
andrewrk
it should be clear I think if you look at compare_output.zig

1596576474
andrewrk
I don't think pixelherodev's PR is relevant here

1596576475
pfg_
compare_output returns immediately if the current target isn't linux x86_64

1596576494
andrewrk
pfg_, you should be able to pass -Denable-qemu

1596576500
pfg_
ah

1596576500
andrewrk
./zig build test-stage2 -Denable-qemu

1596576507
pfg_
neat

1596576525
pixelherodev
andrewrk: test cases go through runOneCase though - currently, it'll try just running the binary directly

1596576539
pixelherodev
enable-qemu won't be noticed, unless I'm missing something big

1596576549
andrewrk
hm ok I'll take a look at it along with #5972

1596576565
andrewrk
anyway that's how it's supposed to work though. the test cases are declarative

1596576633
pixelherodev
The idea is, you give it a target, the test harness and build system collaborate to decide if it should be run, and if so, how to do so

1596576682
andrewrk
pfg_, if you add that test case I'd be happy to merge that PR right now and then fiddle with it until it's running properly

1596576686
pixelherodev
We need to integrate externalRunner from CrossTarget with the harness I think

1596576701
pfg_
I added the test case, trying to run it errors InvalidExe

1596576707
pfg_
should I push that?

1596576723
andrewrk
yeah, if you don't mind doing a hand-off, I'll get you up and running here

1596576723
pixelherodev
WIth my PR, it'd hit

1596576726
pixelherodev
:P

1596576738
pixelherodev
`std.debug.print("TODO implement non-native tests for target arch {}\n", .{e});`

1596576755
pixelherodev
I think we need to detect a) if an extern runner is known, and b) if it's enabled

1596576769
pixelherodev
Based on a combination of the two, we either run the test with the external runner, skip it, or mark it as failed

1596576884
pfg_
oh there's a merge conflict with codegen.zig now

1596576942
pixelherodev
`git fetch origin master && git rebase origin/master` is what I typically do

1596576984
pfg_
github has a web merge conflict resolver that seems to have worked

1596577033
andrewrk
pfg_, I'm merging your branch locally now, will fiddle with the test harness until it gets run by qemu

1596577059
pixelherodev
andrewrk: Should I close my PR then, since you're probably superseding it anyways? :P

1596577080
andrewrk
I would have merged the debug.warn commit

1596577099
pixelherodev
You can cherry-pick it

1596577314
pixelherodev
I'll let you decide what to do with that PR

1596577345
andrewrk
ok

1596577394
pixelherodev
and the one after it ;)

1596580956
andrewrk
ifreund, `./zig build test-stage2 -Denable-wasmtime` now works

1596581178
ifreund
nice, that will be super useful

1596581227
ifreund
I was wondering I was going to need to write a simple wasm vm

1596581240
fengb
Speaking of which...

1596581507
ifreund
oh nice, you have one

1596581550
fengb
Um... it doesn’t parse everything correctly and only tested to run nop

1596581565
fengb
In theory the math should work too >_>

1596581643
fengb
I need to actually add more tests. It should work for a lot of things

1596581858
ifreund
didn't someone say they were working on a birth and death of javascript style wasm in the ring 0 thing?

1596581877
ifreund
guess they'd need a vm or jit of some kind

1596582041
pixelherodev
please no

1596582044
pixelherodev
Please please no

1596582122
ifreund
pixelherodev: are you sobbing on technical or ideological grounds

1596582146
ifreund
I think it would be cool even if it doesn't prove useful

1596582152
fengb
I’ll create a cpu chip that runs wasm natively

1596582164
fengb
Right after I finish my vm

1596582247
pixelherodev
ifreund:

1596582367
ifreund
pixelherodev: care to explain the technical grounds?

1596582603
andrewrk
streaming in 10 min

1596582650
lemmi
perfect timing :>

1596582912
pixelherodev
ifreund: I don't consider in-kernel emulation sane grounds for an executable format

1596582918
pixelherodev
Not in the slightest.

1596583189
ifreund
and why not?

1596583439
pixelherodev
... if I have to explain it, we clearly have fundamentally incompatible axioms about sane computing.

1596583743
ifreund
I'm just asking for a little more than "doing that isn't sane." What about it is so fundamentally insane?

1596584221
pixelherodev
It's unnecessary complexity which serves no real purpose other than "WHoa this is awesome!!!!!!!"

1596584232
pixelherodev
I've

1596584243
pixelherodev
Every argument boils down to coolness factor

1596584258
pixelherodev
And I say this as someone who's literally working on a kernel-mode emulator: not a good idea for a serious OS

1596584404
ifreund
I guess you don't buy the argument that reduced context-switching could make syscall heavy workloads run faster?

1596584441
ifreund
(I'm honestly not all that well informed on os dev, just a curious person)

1596584558
pixelherodev
I do buy the argument

1596584588
pixelherodev
I just think that a) there's better ways to accomplish that goal and b) performance is only one aspect of a system

1596584601
pixelherodev
Better a system that's easier to maintain and a bit slower.

1596584643
pixelherodev
Radical redesign isn't even necessary for higher performance

1596584654
pixelherodev
If you want better-performing syscalls, you could disable security features.

1596584659
pixelherodev
Turn off security entirely, effectively.

1596584672
pixelherodev
If you fully trust the system, it's honestly not that insane

1596584685
pixelherodev
(so long as you disable networking, don't use untrusted peripherals, etc)

1596584833
pixelherodev
ifreund: also, while it's true that reducing context switching can help performance, the cost of even the best JIT of all time will more than reverse any performane gains

1596584836
pixelherodev
performance*

1596584954
ifreund
heh

1596584963
ifreund
thanks for the thoughts

1596585331
pixelherodev
Np

1596585341
pixelherodev
Always happy to persuade people that I'm the source of absolute truth /s

1596585354
pixelherodev
If you have any opposing arguments, I'm eager to hear them

1596585504
ifreund
I don't have enough experiance with jits or os dev to make any convincing statements :P

