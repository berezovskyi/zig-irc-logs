1593735602
stripedpajamas
is there a built in or std library func to round floats to some number of decimal places ?

1593735822
waleee-cl
std.math.clamp?

1593735867
waleee-cl
ah, no, that was between values

1593735962
stripedpajamas
i think for my purposes i can use std.math.approxEq

1593735985
stripedpajamas
assuming there is some rounding/precision func somewhere here but i can't find it atm

1593737061
andrewrk
it's integrated into formatted printing

1593738901
frmdstryr
Has something changed with how zig inlines functions? I'm getting "error: unable to inline function" for a function that is one line

1593738921
frmdstryr
pub inline fn writeReg(reg:

1593738969
frmdstryr
Has been working for 7-8 months now...

1593739073
frmdstryr
Well I guess using -Drelease-safe makes it work so nevermind

1593739355
frmdstryr
Maybe it's becuase llvm updated becuase the build is now 12kb instead of 282kb which is closer to what it was with llvm 9

1593744933
andrewrk
frmdstryr,

1593744942
andrewrk
I'm starting to think there might be some nondetermisistic behavior here

1593745119
Snektron
I still do a double take every time i see robin-hood-hashinh

1593745181
andrewrk
josh pointed out to me that it might be better to put the max_distance_from_start in the indexes array

1593745280
Snektron
(cause its my name)

1593745552
andrewrk
oh haha

1593746522
shakesoda
oh is hashmap being optimized

1593746580
shakesoda
we switched to robin hood hashing in soundself a while back (slightly before release), fixed various performance problems

1593746592
shakesoda
no idea what the state of the art for a good hashmap is but i was very happy with that move

1593749067
fengb
andrewrk: should I switch my donation to ZSF instead?

1593749315
andrewrk
hmm I guess the cat is out of the bag

1593749355
andrewrk
doesn't hurt anything, but maybe wait until the 11th ;)

1593759092
marnix
Did anyone try to do Python-style generators in Zig?  Seems perfectly possible using suspend and resume, but a working implementation with a simple API eludes me at the moment... (Can perhaps post a gist of an attempt later, not today probably.)

1593759267
daurnimator
yes

1593759273
daurnimator
there's a few around

1593759281
daurnimator
they're... imperfect

1593760939
lemmi
ifreund: just watched the swiss map video. i'm wondering if this might still be fast even without simd

1593763364
marnix
@daurnimator Any links, perhaps?

1593764175
antaoiseach
Hello good folks, I know that there is no official dependency manager for Zig yet, but suppose I wanted to include another zig project in a new project, aside from building a library and linking against it, is there a way to include the project directly? Or is there a preferred way of going about including dependencies? Is there a plan for a central repository of libraries like crates.io?

1593764231
ikskuh
antaoiseach: right now, there's no package manager and the usual way is to either include repositories as source or as a submodule in your code base

1593764289
ifreund
an official centralized package repo isn't planed, but it's very likely that several unofficial ones will arise after the advent of the package manager

1593764298
antaoiseach
ikskuh: Hmmm... sort of what I expected. Thank you! Just curious - including the project directly will still use the same licensing terms etc., right? I mean, that aspect shouldn't be any different from using a binary of the project?

1593764308
antaoiseach
Hmmmm

1593764314
ikskuh
it depends

1593764327
ikskuh
but you cannot include zig libraries as binaries

1593764344
ikskuh
zig is always compiled from source

1593764388
antaoiseach
I mean support project "calculator" is compiled as libcalc.a and then I link to it, that is fine, right? It's only zig itself which should be built from source if it were to be used in another project? Or did I get that wrong"?

1593764394
antaoiseach
suppose*

1593764488
ikskuh
if it's a zig library/package, you won't have a "libcalc.a", only "libcalc.zig"

1593764505
ifreund
you can compile zig code to a dynamic library with C ABI and link dynamically against

1593764511
ikskuh
for native dependencies like C projects you wil have a libcalc.a

1593764515
ifreund
this is not the standard way to do things though

1593764653
antaoiseach
ifreund: yes, that's what I meant ... as a native lib

1593764660
daurnimator
antaoiseach: use a git submodule

1593764698
antaoiseach
daurnimator: Okay, I could try that out and see ...

1593764732
antaoiseach
Again, not too familiar with licensing restrictions ... suppose the linked project is failing, and I use an updated version of it (as source) in my project ... would that be a potential breach of licensing?

1593764740
antaoiseach
(Maybe not)

1593764815
ikskuh
it really depends on the licence

1593764845
antaoiseach
ikskuh: that makes sense...

1593764881
antaoiseach
Okay, thanks, ikskuh ifreund daurnimator - I'll try out some experiments and also check the licences of the dependencies I have in mind! Thank you for the help! :-)

1593765545
ifreund
lemmi: yeah I watched it too and they look quite promising. I think I'm going to go ahead with a zig implementation and try to copy some benchmarks

1593765615
lemmi
ifreund: i also tempted to just naively write one for shits and giggles

1593765644
ifreund
do it, we can have a hashtable-benchmark-off

1593765691
ifreund
I haven't had a chance to use zig's simd stuff for real yet, so I'm curious how that will work out

1593765720
lemmi
if time permits, yep

1593765855
alexnask
ifreund, Caved in and implemented utf16 offsets for zls :P kak should still be fine though, I support the clangd extension for utf-8 offsets as well

1593765896
ifreund
suppose that's necessary for vscode?

1593765906
alexnask
Yeah I wanted muh pretty semantic tokens

1593765908
ifreund
thanks for implementing the extension <3

1593765922
alexnask
And also correct completions on lines with non ascii chars

1593767592
alexnask
I think you have to add offset_encoding = "utf-8" to language.zig and offsetEncoding = ["utf-8"] to language.zig.initialization_options though

1593767623
alexnask
Not sure, I will investigate soon (should work out of the box with utf16 offsets anyway but utf8 offsets are jsut more efficient)

1593768312
alexnask
andrewrk, Fixed the formatting btw (it was inconsistent because I was sending the result then immediately a null result because of a missed return >.>)

1593768389
ikskuh
heya

1593768396
alexnask
o/

1593768398
ikskuh
is there a way to read "available" data from stdin?

1593768430
alexnask
Can you seek stdin?

1593768440
ikskuh
no

1593768448
ikskuh
it's usually a pipe

1593768836
ifreund
I think you can open the file with O_NONBLOCK and read until you get EAGAIN

1593768862
ifreund
this is assuming you're on linux

1593768880
ikskuh
not sure, afaik the "file" is already open

1593768971
ifreund
well, you could probably use fcntl then

1593769215
ifreund
looks like you should use SETFL not SETFD though as stdin/stdout/stderr usually share the same fd

1593769227
ifreund


1593769876
ikskuh
hm

1593769915
ikskuh
i really wonder how to define glCreateVertexArrays correctly

1593769927
ikskuh
oh waitâ€¦

1593769948
ikskuh
there was something recently that single item pointers coerce to unknown-length-pointers

1593770648
alexnask
*T coerces to *[1]T which coerces to [*]T

1593770660
alexnask
But you cant go directly from *T to [*]T

1593781487
ifreund
what's the best way to create an integer type with the minimum number of bits needed to represent the bit count of a given type T?

1593781520
ifreund
tried @TypeOf(@ctz(T, 0)) but got that "unable to evaluate const expression" thing

1593781745
scientes
factormystic, zext bit_count, then clz

1593781767
scientes
*bit_count + 1

1593781775
scientes
nah, jut bit_count

1593782047
ifreund
we don't have zext builtin do we?

1593782056
scientes
just cast big

1593782065
scientes
like @intCast(u32, foo)

1593782069
scientes
then do clz

1593782073
scientes
and then 32 - clz

1593782078
scientes
kinda a pita

1593782225
ifreund
the discord people pointed out that we have std.math.Log2Int as well

1593782276
ifreund
that is off by one bit with the return type of @ctz though

1593782277
alexnask
Discord ppl best ppl B)

1593782288
scientes
ifreund, yeah that doesn't work

1593782295
scientes
the clz thing i mentioned will work

1593782311
ifreund
yeah I think I'm going to do that, it is a bit of a pita though

1593782619
ikskuh
alexnask: discord ppl memeiest ppl

1593782638
alexnask
:zerodrool:

1593782642
ifreund
here it is: std.meta.Int(false, @clz(T, @as(T, 0)));

1593782645
ifreund
not actually too bad

1593782676
scientes
ifreund, no, you need to do T.bit_count - @clz

1593782693
scientes
or just use u32 for the outer type

1593782710
scientes
cause you can't have numbers that big

1593782716
ifreund
i'm not sure I understand, this seems to give me the right result

1593782768
ifreund
or not :P

1593782793
scientes
std.meta.Int(false, 32 - @clz(u32, @as(T, 0)));

1593782819
scientes
uggh

1593782824
scientes
missing a bunch of stuff there

1593782838
ifreund
yeah it's returns a u0

1593782839
scientes
std.meta.Int(false, 32 - @clz(u32, T.bit_count));

1593782858
ifreund
that works

1593782864
ifreund
thanks man

1593782926
ifreund
didn't realize that you can do .bit_count on things

1593782957
ifreund
though this is also the first really low level stuff I'm doing in zig, just started on a swiss tables implementation

1593785048
ifreund
anyone have good examples of zig SIMD code lying around?

1593785535
scientes
ifreund,

1593785557
scientes
bear in mind that has bit-rotted

1593785608
ifreund
thanks

1593785616
scientes
ifreund, I actually gave a talk on that code

1593785635
ifreund
oh sweet!

1593789332
josias
When compiling from master, I get "undefined reference to `getPollyPluginInfo()'". I am using g++ and the error occurs at "Linking CXX executable zig0".

1593789398
ifreund
josias: what OS/distro are you on? you're probably hitting this:

1593789432
ifreund
oh you might be able to use -DZIG_WORKAROUND_POLLY_SO

1593789442
ifreund
just saw that that got merged

1593789563
josias
I am using a Debian chroot on ARM. So I guess that indeed is the issue that I am hitting.

1593789598
scientes
josias, there is a fix in ci/azure/linux_script

1593789802
josias
The script wants to run:

1593789803
josias
> sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test

1593789803
josias
Which doesn't work on Debian.

1593789816
scientes
josias, there is a patch in that script

1593789820
scientes
don't run the script, read it

1593789828
josias
Okay. Got it.

1593790121
josias
I applied the patch, and zig0 compiled, but when it runs I get a segmentation fault.

1593790275
forgot-password
How does one assign a string when I have a pointer of type [*c]u8?

1593790329
ifreund
forgot-password: I assume you're doing interop with C and want to create a null-terminated string to pass to a c library?

1593790377
ifreund
if so allocSentinel() is the function you want

1593790451
ifreund
josias: would you mind opening an issue? that isn't good :/

1593790456
forgot-password
I'm given a pointer from the caller

1593790474
ifreund
forgot-password: so you want to read the string?

1593790478
forgot-password
I want to write it

1593790481
oats
forgot-password: ah, you want to write a string into the memory at the [*c] pointer?

1593790484
forgot-password
with the sentinel value

1593790491
forgot-password
Exactly

1593790503
forgot-password
I think we went through every possibility now haha

1593790529
ifreund
this doesn't make sense, the C library is providing the memory for you?

1593790534
forgot-password
Yes

1593790547
ifreund
how does it know how much memory to allocate?

1593790548
oats
forgot-password: do you know how long the memory is that was allocated?

1593790551
forgot-password
I basically want to std.mem.copy(u8, ptr, "string")

1593790559
forgot-password
There's a maximum length for the string

1593790561
forgot-password
Yes

1593790563
ifreund
ok

1593790566
forgot-password
A maximum of 64 bytes

1593790575
scientes
or 63?

1593790579
ifreund
std.mem.copy should work fine then

1593790604
ifreund
and then you can manually set the byte one past the end of your string to '\0'

1593790616
scientes
or if you source is :0 you can copy one more length

1593790631
oats
hmm, I wonder if zig should have some stdlib functions for dealing with c strings?

1593790650
scientes
oats, people should just use the c functions

1593790654
scientes
c.strcpy()

1593790655
oats
or you could just call into libc

1593790657
oats
yeah

1593790773
ifreund
josias: that's not good :/ did you get a stack trace? mind opening an issue?

1593790774
ifreund
whoops I already said that

1593790774
ifreund
scientes: would you happen to know if zig supports the llvm equivalent of _mm_movemask_epi8 yet?

1593790774
ifreund
I haven't been able to figure out what the llvm equivalent is yet

1593790830
scientes
ifreund, @Vector(i8, 32) < 0

1593790843
scientes
@Vector(i8, 32) < @splat(32, 0)

1593790859
scientes
@splat(32, @as(i8, 0))

1593790912
scientes
that returns @Vector(bool, 32)

1593790920
ifreund
i feel like I'm not grokking what @Vector() is doing. What I expect to get out of this operation is a bitmask

1593790934
scientes
^^@Vector() is a type

1593790944
forgot-password
ifreund: std.mem.copy doesn't work, because my pointer type is [*c]u8

1593790964
ifreund
forgot-password: the @memcpy() builtin then

1593790975
scientes
so more like @as([_]@Vector(i8, 32){0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...}) < @splat(32, @as(i8, 0))

1593790982
scientes
which returns type @Vector(bool, 32)

1593791002
ifreund
yeah I get that it's a type, but it's unlike any other type I've used before

1593791006
scientes
which you can then @bitcast(u32, blah) to get the same thing

1593791018
scientes
that _mm256_movemask_epi8 returns

1593791018
ifreund
that's what I was about to ask :D

1593791023
ifreund
thanks for the examples

1593791048
scientes
that example isn't quite right

1593791061
scientes
but look at the code i posted to see how to cast to vector

1593791111
forgot-password
ifreund: Aha, that did the trick. Thanks :)

1593791122
ifreund
yeah I need to spend a bit of time trying things with a lot of print statements I think

1593791125
ifreund
forgot-password: np

1593791529
josias
ifreund, I opened up an issue here:

1593791577
scientes
>

1593791577
scientes
Debian 10 in chroot in Termux in Android 5.1 on an ARM tablet.

1593791599
scientes
can you try on a more recent android?

1593791611
scientes
cause IIRC they changed a bunch of C stuff at some point

1593791627
josias
I don't have access to such a device at the moment unfortunately.

1593791658
scientes
what kernel version?

1593791679
josias
uname -r says 3.18.19

1593791688
scientes
josias, also can you you use follow-child-mode

1593791698
scientes
strace -f

1593791752
josias
That doesn't change the output.

1593791791
scientes
anyways you should put android in the topic

1593791796
scientes
and ancient kernel

1593791812
scientes
*old

1593791815
ifreund
thanks for opening the issue

1593791879
josias
Updated the issue.

1593791909
scientes
it could be that android only supports PIE executables

1593791921
scientes
but that might just be bionic

1593791941
scientes
anyways, no idea

1593792070
josias
A quick search says that PIEs have been supported from Android 4.1.

1593792088
scientes
bionic ONLY executes PIEs

1593792102
scientes
but you are running a chroot so that changes a bunch of stuff

1593792107
scientes
you are running glibc

1593792133
josias
Yes.

1593792141
ifreund
oats: by the way, std.cstr is a thing

1593792143
scientes
anyways I had been fine running statically-linked non-PIE zig executables on android

1593792149
scientes
in order to test stuff

1593792446
blinghound
is there a clean way of adding a signed int that could be positive or negative to an unsigned int if I know the unsigned int won't underflow/overflow?

1593792508
fengb
@bitCast one to the other

1593792520
scientes
you have to sext the signed number

1593792523
scientes
with @as()

1593792530
scientes
and then @intCast() it back

1593792544
scientes
after the add

1593792613
blinghound
hmm, I want to be able to do something like 'var unum: u64 = 69;     var snum: i8 = -10;      unum += snum;'

1593792651
blinghound
so can I just bitCast the signed int?

1593792661
ikskuh
nah, that won't work

1593792663
scientes
so you add a sign bit to unum

1593792665
ikskuh
you need to sign-extend first

1593792676
scientes
@as(i65, unum)

1593792676
ikskuh
@bitCast(u64, @as(i64, snum))

1593792683
scientes
no, i65

1593792726
scientes
@intCast(u64, @as(i65, unum) + snum)

1593792797
ikskuh
oh, right

1593792803
blinghound
ohh I seee

1593792807
ikskuh
forgot that unsigned overflow is undefined :D

1593792855
blinghound
I think I'll wrap that into an inline generic function

1593795342
ifreund
scientes: vectors are starting to make sense to me, holy shit this is so much better than C

1593795371
scientes
ifreund, I said that at my talk and people really didn't want to believe me....

1593795380
scientes
I was like "this is impossible in C"

1593795386
scientes
and "C cannot be fixed"

1593795406
ifreund
I think I will have to do a blog post or talk or something when I get this swiss tables impl working

1593795429
ifreund
do some comparisons of the unreadable C++ code and the much shorter, more clear zig code

1593803529
companion_cube
grrr I forgot the name of the chan with a bunch of language designers

1593804491
ikskuh
i have the strong feeling that @enumToInt is borked for exhaustive enums

1593804514
ikskuh
const T = enum(c_uint) { invalid = 0, _, };

1593804515
ikskuh
std.testing.expect(@enumToInt(@intToEnum(T, 123)) == 123);

1593804516
ikskuh
this fails

1593805382
ikskuh
oh, that's #5314, with #5495 as a fix...

1593806086
rooke
ifreund: I would enjoying watching/reading it if you do get around to it :3

1593806635
leeward
Ugh, looking at LLVM reminds me how terrible C++ is. I can mostly ignore it because I rarely use C++, but...it's so awful.

1593807363
leeward
Ok, got this C program building with LLVM. Next to build it with zig-cc, then the Zig version.

1593807909
scientes
leeward, oh its not that bad, but C++, yes

1593807948
scientes
the data-structures and algorithms can be quite decent

1593807957
leeward
scientes: The thing that triggered me was seeing "private" in a header file. It's just a fundamentally broken language.

1593807968
scientes
yes, broken language

1593807988
scientes
and impossible to read because of implicit control flow

1593807997
scientes
but LLVM is not a bad piece of software

1593808060
leeward
Oh, yeah, I don't dislike LLVM, and I understand why they chose C++. It's just that sometimes the best tool for the job is a crappy tool.

1593808084
leeward
Though I wouldn't mind if the LLVM project did a better job of documenting its stuff.

1593808107
scientes
they only need documentation because of how bad c++ is

1593808115
leeward
No, it's not that.

1593808120
scientes
like i spent a few hours thinking that operands were a linked-list

1593808130
scientes
but they are a linear array, that LOOKS like a linked-list

1593808161
scientes
leeward, seriously, code like this its really about the data structures, and documentation goes out of date too fast to be useful

1593808175
leeward
Problem: I'm a user who's trying to compile something using clang for a particular target. Some googling leads me to

1593808194
scientes
the doxygen is much better

1593808207
leeward
"How do I use this" is not the kind of thing that should go out of date super fast. I'm not talking about comments in code.

1593808243
leeward
I just want to know what argument to pass it, and I have to look at the source code? Not well documented.

1593808277
scientes
the tests are usually the best documentation of that stuff

1593808290
leeward
Yes, source code. I just want a freaking man page.

1593808515
leeward
man gcc gives me a complete list of options available for my target platform, along with all the valid target specification options.

1593810246
pmwhite
I have a value `t` of type `[*]const u8`. If `t[0] & 0x80 != 0`, then I want to interpret the first 8 bytes as a u64. I was testing with the array `[8]u8{0x80,0,0,...,0}`, and tried to use `var x = @ptrCast(*align(1) const u64, t)` to do the reinterpretation, but the value `x.*` is printing out as just 128, which means it is just using the first byte as the whole u64 value.

1593810337
fengb
std.mem.readIntLittle

1593810371
fengb
Or should it be big endian?

1593810460
pmwhite
Oh, cool.

1593810462
pmwhite
Big endian is the backward one, right

1593810464
pmwhite
?

1593810531
leeward
no, little endian is backwards

1593810537
pmwhite
Do you know what @ptrCast is wrong? What's going on?

1593810548
leeward
big endian is the one you probably don't have, unless you're on a weird architecture

1593810731
pmwhite
readIntBig was what worked.

1593810746
leeward
Oh, the

1593810913
pmwhite
honestly, i'm lost with regards to endianness. I've heard all the facts at one time or another, but I think I need to get a refresher at some point.

1593811180
leeward
There are 2 common ways to interpret a value that's more than 1 byte long: The first byte can be the most significant, or the least significant. Networks (mostly) interpret the first byte as the most significant. Most computer architectures choose the opposite representation. There is much strife, and warring among the Lilliputians.

1593811245
leeward
The only times it matters exactly how the bytes are swapped around are when you're debugging or writing ntoh[X].

1593811310
fengb
Little endian has nice pointer semantics. Big endian matches human number conventions

1593811347
fengb
And thanks to Intel, modern processors are mostly little endian

1593811353
leeward
Big endian also has advantages when bytes are received one at a time (hence its use in networks)

1593811408
fengb
It used to be more varied but pure big endian kinda died off

1593811611
leeward
Ugh, the way LLVM "supports" AVR is by calling GCC's linker.

1593811644
leeward
I don't think this is a viable target for Zig. Even if I do get it working, it will require having GCC's ld installed.

1593812556
scientes
it is very limited

1593812846
leeward
Next week I'll have an msp430 dev kit here. We'll see if that works better. Looks like the LLVM backend uses gcc's assembler.

1593813988
tariq
are there any guidelines on directory structure for a zig project? i have a src/ and test/ dir but I'm getting an error when I @import("../src/some

1593814017
tariq
error: import of file outside package path: '../src/some_file.zig'

1593814169
andrewrk
set `--main-pkg-path` to the parent that they share

1593814200
andrewrk
here's some inspiration:

1593814328
leeward
Ooh, I did actually get code that was written in Zig to run on an AVR.

1593814367
leeward
I had to -femit-asm, then assemble it myself, but the LED is on when I turn it on and off when I turn it off.

1593815130
tariq
haha sweet thank you andrewrk

1593818288
ifreund
Is there anything preventing non exhaustive enums from being used as vector elements?

1593820140
blinghound
is there a zig strlen function somewhere to get the length of a null terminated c string?

1593820165
Snektron
std.mem.spanZ

1593820197
Snektron
or lenZ

1593820243
blinghound
damn you're quick

1593820246
blinghound
thanks!

1593820403
ifreund
anyone know of a better site than this for looking up what C sse intrinsics do?

1593820427
ifreund
it doesn't have _mm_cmpgt_epi8_fixed, and I can't seem to find any info on this one anywhere

1593820540
ifreund
oh nvm, It seems to be some custom function that google made

1593820596
ifreund
something about mm_cmpgt_epi8 being buggy on gcc

