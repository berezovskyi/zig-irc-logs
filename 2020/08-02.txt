1596338813
gruebite
heh, may: while (var i: usize = 0) (i < 42) (i += 1) { ... }

1596338817
gruebite
maybe*

1596338869
gruebite
forgot the colons

1596339044
Kingsquee
huh, interesting

1596339089
Kingsquee
sokol_debugtext integrates some font data directly in its source code, and offers functions to initialize font structs with them

1596339104
Kingsquee
when I try to do that via zig, it fails

1596339127
Kingsquee
but when I port the raw font data into the zig source and do it manually, it works

1596339150
Kingsquee
I wonder if the data's being optimized out or misaligned or something

1596339154
Kingsquee
on the c side

1596339951
gruebite
how was the c compiled?

1596340146
Kingsquee
sokol.c compiled through build.zig

1596340178
Kingsquee
addIncludeDir and addCSourceFile

1596342288
pixelherodev
Ha, woot! all three Passed CI :D

1596344288
gruebite
what is a good convention for allocation and returning something that needs to be freed? in C it's stricky too and requires documentation/naming convention

1596344430
gruebite
if you're passing in an allocator you're probably expecting it to allocate and need freeing

1596344567
gruebite
but not necessarily

1596344830
pixelherodev
I use h_

1596351399
pixelherodev


1596351412
antaoiseach
Do we have the equivalent of limits.h in Zig? I searched the stdlib, but couldn't find anything close - only floating point max/min in math.zig

1596351421
pixelherodev
Recursive detection of .c files in src/ ;)

1596351431
pixelherodev
antaoiseach: there's std.math.maxInt

1596351448
antaoiseach
pixelherodev: D'oh .... I'm an idiot! :D

1596351453
antaoiseach
Thanks, mate!

1596351456
pixelherodev
No worries!

1596351459
pixelherodev
We've all been there :)

1596351465
antaoiseach
Hahaha

1596351995
pixelherodev
Woot, it works :)

1596352005
pixelherodev
Zig build system is awesome even for C projects

1596352068
pixelherodev
`zig build -Dtarget=native-linux && ./zig-cache/bin/coyote` -> `Not yet implemented, sorry!`

1596352077
pixelherodev
I love this so much

1596352616
gruebite
nice!

1596352790
pixelherodev
Yeah, it's awesome

1596352948
pixelherodev


1596352965
pixelherodev
Currently figuring out what language features to focus on for the language jam :)

1596359584
ikskuh
pixelherodev: if you pr-merge libraries of mine into std, please notify me on github ;)

1596359596
pixelherodev
Ah right :P

1596359597
ikskuh
because if they get merged, i can archive the original repo and hint people at zig std

1596359605
pixelherodev
ikskuh: I mentioned it in #spu-mark-ii IIRC

1596359656
ikskuh
yeah, still tag me on github so i can keep track of it

1596359668
pixelherodev
Gotcha

1596359719
pixelherodev
Is it weird that I'm surprised they all passed CI? :P

1596359819
ifreund
man, having zig fmt disabled for the file is kinda annyoing

1596359879
pixelherodev
Very annoying.

1596359891
pixelherodev
you know what, fourth PR incoming.

1596359897
ikskuh
ifreund: why is it disabled

1596359900
pixelherodev
I'm going to narrow down the fmt: off to the specific sections

1596359901
pixelherodev
ikskuh: because bug

1596359906
pixelherodev
Well, fmt doesn't do what we want

1596359908
pixelherodev
Not exactly bug

1596359923
pixelherodev
#5948

1596359929
ifreund
nice

1596359970
ifreund
I'm currently working on what I see as the first step for wasm/PE whatever, which is making the code a bit more generic/less Elf-centric

1596359996
ikskuh
\o/

1596359996
ifreund
the idea is to avoid conflicts with alexnask[m] after this PR is done

1596359997
ikskuh
nice

1596360029
pixelherodev
... dammit, does `zig fmt: off` only get recognized at root scope?

1596360079
ifreund
yes ...

1596360087
pixelherodev
Forgot about that

1596360103
ifreund
pixelherodev: guess you should just implement that feature :P

1596360115
pixelherodev
That's a

1596360128
pixelherodev
If anyone here has worked with `zig fmt`, I'd rather pass the torch to you :P

1596360147
pixelherodev
Otherwise, #5948 is on my todo list for Monday

1596360155
pixelherodev
So it'll hopefully be reenabled soonish anyways

1596360183
ifreund
yeah I haven't touched zig fmt yet, though probably will at some point

1596360193
ifreund
there are a couple of other things I want it to do

1596360209
pixelherodev
Anywho it's five AM, I'm going to take a quick nap before I get to work :P

1596360265
ifreund
non-caffineated tea didn't fix the sleep?

1596360271
pixelherodev
Nah

1596360276
pixelherodev
this is a holdover from yesterday :P

1596360290
pixelherodev
I accidentally allnightered, so I crashed during the afternoon

1596360305
pixelherodev
Now I nap until ten, then sleep on time tonight, and hopefully get my sleep fixed within two or three days tops

1596360405
pixelherodev
Can't have sleep[ing issues] interfering with Zig, after all ;)

1596360570
Snektron
Doubt

1596360847
ikskuh
(X)

1596363957
alexnask[m]
ifreund: Cool, this is basically what I did too but I will build on this code

1596364003
ifreund
alexnask[m]: yeah, my goal was to get it PR'd as soon as possible so we could both move forward without further conflicts

1596364017
ifreund
it's nothing too groundbreaking really :D

1596364082
ifreund
will conflict with pixelherodev's elf 16 PR though

1596364159
alexnask[m]
Meh what can you do we will have to rebase multiple times for various changes anyway I think :P

1596364217
ifreund
such is life :D

1596364285
ifreund
there's also a fair amount of elf-specific stuff referenced in Module.zig

1596364328
DarkUranium
Meh, I think that orcs & tieflings are far more interesting than elves!

1596364360
alexnask[m]
what about coffs? /s

1596364369
daurnimator
we do need to support ORC actually

1596364408
daurnimator
also you missed the more obvious play on words that is DWARF

1596364438
DarkUranium
daurnimator, but DWARF already exists.

1596364443
DarkUranium
Already, actually exists.

1596364488
daurnimator
ORC too.

1596364521
DarkUranium
Neat.

1596364710
daurnimator
make sure you read the Etymology section

1596364916
ikskuh
nice

1596364944
ifreund
heh

1596365804
Ristovski
this is interesting. When using cimguis `c.igText("%.3f", io.*.Framerate);` the value is always zero, however if I print it with std.debug.print it works just fine

1596365831
Ristovski
or rather, it doesn't update

1596366104
ikskuh
s Framerate a f64 or f32?

1596366113
ikskuh
maybe you need to expand it to f64 first?

1596366190
Ristovski
I think it's f32

1596366233
alexnask[m]
Doesnt `%f` apply to both float and double? (at least in stdio). Though idk how the printf/w.e. implementation figures out what it is

1596366288
Ristovski
oh wait, ikskuh you are right

1596366297
Ristovski
@as(f64, io.*.Framerate) works

1596366357
ikskuh
congratulation, Ristovski. you discovered a bug!

1596366361
ikskuh
codegen bug even

1596366366
Ristovski
@as(f64, io.*.Framerate) works

1596366369
Ristovski
whoops

1596366381
ikskuh
alexnask[m]: "..." is enforcing widing types from … to int or double

1596366386
ikskuh
except when the type is larger

1596366394
alexnask[m]
huh, TIL

1596366397
ikskuh
"%f" only takes doubles, when you pass a float, it gets widened

1596366404
ikskuh
same mistake is in the lite-c compilre btw

1596366410
ikskuh
that's how i knew it could be this :D

1596366416
ikskuh
i ran into the same trap a long time ago

1596366438
Ristovski
Oh, TIL as well

1596366654
ikskuh
i don't know the exact rules, but passing stuff into a C "..." has special rules

1596367172
alexnask[m]
Yeah looks like "default argument promotions" happen for varargs (integer promotions + float -> double)

1596367258
alexnask[m]
(was wondering if it was implementation defined or smth but no, these promotions happen when no prototype is present and for varargs)

1596367403
ikskuh
yay

1596367406
ikskuh
C is nice.

1596367407
ikskuh
:D

1596367813
Ristovski
hmm, interesting, when doing c.printf("%f", 3.0) I get "TODO: support C ABI for more targets" even tho "pointers, integers, floats, bools, and enums work on all targets"

1596367851
Ristovski
happens with an integer as well

1596367920
ikskuh
yep

1596367929
ikskuh
that's because you're passing a comptime_float and comptime_int

1596367936
Ristovski
ah, that makes sense

1596370896
Ristovski
Hmm, how hard would it be to make std.debug.print pretty print structs for example? (pretty print == format them across multiple lines, with indentation)

1596371305
Ristovski
I should clarify - C structs

1596371314
daurnimator
Ristovski: does it not already?

1596371332
alexnask[m]
Does std.fmt do pretty printing? I thought it just printed all in one line

1596371356
Ristovski
alexnask[m]: It prints all in one line

1596371376
Ristovski
Hmm, this could actually be done if I could somehow loop over the C struct members

1596371388
alexnask[m]
I guess there could be a format specifier to do it but honestly I would just write a mixin that provides a pretty printing format fn

1596371414
daurnimator
Ristovski:

1596371535
Ristovski
oh hmm

1596371932
alexnask[m]


1596371941
alexnask[m]
This can definitely be improved

1596371981
Ristovski
alexnask[m]: oh wow!

1596372111
Ristovski
alexnask[m]: how could this be made to work with structs returned from C?

1596372200
alexnask[m]
Ah, if you dont have control over the definition of the struct right? Let me write it up it should be relatively simple :)

1596372225
Ristovski
Yeah, exactly

1596372239
Ristovski
I've been scratching my head over this today

1596372349
alexnask[m]
Here you go:

1596372382
alexnask[m]
(thiss assumes you are passing by value to prettyPrint, it could  check if its a pointer and use that as well but I was lazy :P)

1596372520
Ristovski
alexnask[m]: this is great! cheers

1596372553
Ristovski
Aaah, I see now

1596374547
pixelherodev
ifreund: whatcha doi g thaf conflicts with the ELF PR?

1596374560
pixelherodev
gah sorry, mobile kbd

1596375008
ifreund
pixelherodev:

1596375029
ifreund
shouldn't be too annoying to resolve either way

1596375489
pixelherodev
If it is, it's my own fault for not getting mine in sooner

1596375950
ifreund
why can I not find anything about wasm32 vs wasm64 in the spec

1596376025
pixelherodev
Because the spec sucks?

1596376050
ifreund
either that or I'm missing something

1596376921
ifreund
ah, it seems that wasm64 may not actually be a thing yet

1596376951
ifreund
which would make sense as the spec uses 32 bit addresses everywhere

1596376984
pixelherodev
Ah right, I actually knew that ifreund

1596377006
pixelherodev
Because when I was SPU II backending early on, I triggered a "WASM64 is not yet supported" because it thought spu_ii == wasm64 for a bit lol

1596377019
ifreund
lol

1596380540
pixelherodev
ifreund: nice work!

1596380545
pixelherodev
(5974)

1596380669
ifreund
thanks, I just did what seemed to need doing :)

1596380719
pixelherodev
That's what we've all been doing :)

1596383149
ifreund
well, looks like there's no way to access globals in wasm with indirection

1596383162
ifreund
guess only functions will be incrementally complied

1596383168
fengb
wasm64 doesn’t exist

1596383202
ifreund
fengb: well, there is this now:

1596383246
fengb
I need to keep up with proposals

1596384099
ifreund
man LEB128 being variable length massively screws with incremental compilation

1596384114
pixelherodev
LEB?

1596384124
pixelherodev
wasm thing?

1596384141
ifreund
encoding for all the values:

1596384164
ifreund
not just wasm, also used for dwarf

1596384171
pixelherodev
Gotcha

1596385064
zigusr
hmm, any good example for zig library with C API ?

1596385149
pixelherodev
Exported C API?

1596385153
pixelherodev
Not that I"m aware of

1596385161
pixelherodev
I'm working on one currently, but it's not finished, and won't be published for a while

1596385197
zigusr
yeah, I need some reference material :0

1596386546
ifreund
ok, I read the LEB128 spec more carefully and it looks like I can do the encoding in such a way that the max size is always used

1596386574
ifreund
it's gonna waste some bytes, but this is not for release builds :D

1596386734
pixelherodev
Check how DWARF is doing it!

1596386739
pixelherodev
We use DWARF now ;)

1596386744
pixelherodev
Andrew added that a few days ago

1596386880
ifreund
I don't think the current dwarf support in stage2 writes any LEB128 values yet

1596386915
pixelherodev
Ah, okay

1596386925
pixelherodev
Then Andrew will have to check how

1596387754
andrewrk
ifreund, oh let me push this function that I added :)

1596387781
ifreund
oh did you just implement writeULEB128Fixed()?

1596387795
ifreund
that's what I was doing :P

1596387805
andrewrk


1596387824
ifreund
perfect

1596387837
andrewrk
love that we had the same exact idea :D

1596387859
fengb
tfw you have the same idea as god >_>

1596387881
companion_cube
personality cult is bad, fengb ;)

1596387881
ifreund
feels good man

1596387927
pixelherodev
companion_cube: depends on the personality

1596387947
companion_cube
nah

1596387948
ifreund
idk, cults are usually a bad thing regarless

1596387951
leeward
pixelherodev: It really doesn't.

1596387954
pixelherodev
companion_cube: plus, it's less a personality cult, and more a code cult?

1596387957
andrewrk
I'm with companion_cube

1596387963
pixelherodev
"LoOk AT ThE COdE QuaLItY!!"

1596387964
companion_cube
I was just reacting to "god" :)

1596387965
pixelherodev
:P

1596387970
ifreund
they tend to involve loss of free thought and mindless action

1596387972
companion_cube
(no offense andrewrk ;))

1596387972
pixelherodev
yeah I'm messing around lol

1596387974
Snektron
andrewrk, did you happen to have any further thoughts about implcit single->many pointer?

1596388008
andrewrk
Snektron, I haven't put any more thought into it yet

1596388013
Snektron
In the mean time i've just written a small asManyPtr function which works quite well

1596388050
andrewrk
this will probably get demoted from a PR to an open issue proposal (linked to the closed PR)

1596388065
pixelherodev
andrewrk: I split the PRs :)

1596388070
pixelherodev
PR -> three PRs :)

1596388104
andrewrk
Snektron, often it's easier to do design work together with design work, e.g. multiple days in a row thinking about big picture stuff

1596388116
Snektron
Sure. Just made it as a pr since the implementation wasn't much work, but i probably should have made an issue first

1596388130
andrewrk
it's no problem

1596388131
pixelherodev
Finally compiling LLVM + Clang on my laptop :(

1596388140
pixelherodev
I need a C language server for a different project

1596388205
andrewrk
pixelherodev, nice, will have a look today

1596388214
andrewrk
I also need to do LLVM11 upgrade stream, part 2

1596388215
pixelherodev
Thanks :)

1596389971
zigusr
anybody has good example for libs written in zig with C API exposed?

1596390040
leeward
zigusr: something like

1596390129
leeward
It has extra stuff for combining the Zig code with C code, but `export fn add(a: i32, b: i32) i32 {` does that.

1596390130
zigusr
nop, that's too toy like

1596390144
zigusr
that part i figured myself in a few minutes

1596390178
leeward
What problems are you running into?

1596390475
pixelherodev
PR Sunday?

1596390487
pixelherodev
"Three PRs merged for the price of one!"

1596390492
alexnask[m]
:)

1596390519
leeward
Better than 1 for the price of 3.

1596390522
pixelherodev
I'm thinking that in the Billie Maise voice (if I spelled that right)

1596390551
leeward
Billy Mays?

1596390644
pixelherodev
prob

1596390668
leeward
With the ads for OxiClean?

1596390684
pixelherodev


1596390741
pixelherodev


1596390742
leeward
Congratulations, you've been probationally removed from The List.

1596390753
pixelherodev
lol

1596390782
leeward
Use of hyperbole is not allowed for members of the pedantic society.

1596390911
andrewrk
zigusr, the zig compiler itself has a bunch of examples of this:

1596390941
zigusr
leeward: that I don't know the language behaviour yet :)

1596390947
pixelherodev
leeward: technically it is

1596390951
zigusr
I like to see examples

1596390981
zigusr
yeah, I was hoping people are doing stuff with zig/C interop yet outside of the compiler :)

1596391039
leeward
zigusr: Well, I have 1 nontrivial Zig module that's part of a C library:

1596391060
leeward
pixelherodev: That may have been a record for shortest time spent off the list.

1596391074
zigusr
cool !, I'm lookign for examples how to pass an zig state struct into C as a void*

1596391099
fengb


1596391116
ifreund
oh so interfacing with a C lib from zig? I do a ton of that in river

1596391123
ifreund


1596391135
zigusr
no, interfacing zig code as a C lib

1596391145
fengb
Oh the opposite

1596391152
leeward
Yeah, that's a bit less common.

1596391166
pixelherodev
leeward: that was very deliberate ;)

1596391176
leeward
pixelherodev: I had guessed.

1596391183
fengb
Bearssl has some callbacks that comes back to Zig

1596391191
ifreund
well, if you pass an extern struct from zig, then it's just like any other C struct from C

1596391209
leeward
I suspect the reason is that people willing to learn and write Zig code would rather write Zig code.

1596391218
gruebite
yeah

1596391220
Nypsie[m]
zigusr: Vexu exposes his scripting language as a C lib also:

1596391221
ifreund
accesing fields of a non-extern zig struct from C would be UB

1596391250
gruebite
but i also see a benefit to writing zig and exposing it as C

1596391256
pixelherodev
Vexu wrote a scripting language? Neat

1596391266
leeward
zigusr: You might want to look into @Type(.Opaque).

1596391309
leeward
gruebite: Tons of benefit, it's just that the corpus of Zig code isn't that big yet and it tends to be focused on writing Zig instead of writing C libraries in Zig.

1596391339
zigusr
I want to convert some cython code I have to zig

1596391350
alexnask[m]
Yeah bog looks pretty good Ill def use it if I ever need a smal lscripting thing in a zig program

1596391352
gruebite
yeah

1596391364
gruebite
zig ecosystem could grow more

1596391371
gruebite
i'm making stuff :)

1596391390
leeward
Well, the language isn't even stable yet. It's early days.

1596391395
gruebite
yeah

1596391426
pixelherodev
andrewrk: that PR does three things: debug.warn -> debug.print; removes a redundant parameter from runOneCase; refactors runOneCase's Execution branch to not try running tests natively when cross-compiling

1596391434
gruebite
for me i'm already seeing huge benefits using zig, so the instability is a tradeoff i'm accepting

1596391460
ifreund
same, zig makes things a lot nicer

1596391543
pixelherodev
Most of us agree :)

1596391563
leeward
selection bias being what it is

1596391568
pixelherodev
Exactly

1596391574
pixelherodev
wouldn't be here if we didn't

1596391585
pixelherodev
Wouldn't be active at least

1596391591
pixelherodev
I lurk in channels of stuff I don't use :P

1596391597
gruebite
hahaha same

1596391597
pixelherodev
If I find it interesting enough

1596391640
andrewrk
ifreund, I'll push my ULEB128 commit

1596391664
zigusr
how does zig lang compare to v lang ? :0

1596391681
ifreund
andrewrk: cool, I already pulled and rebased onto it so it's not really blocking me atm

1596391687
andrewrk
ok cool

1596391716
andrewrk
ifreund, I like how git lets you cherry pick a commit like that, and then later when you rebase it will just delete it :)

1596391718
leeward
"$2 = <optimized out>" :(

1596391734
ifreund
yeah git is really awesome

1596391744
andrewrk
leeward, in stage2 that would be a bug in zig code instead of llvm code :)

1596391752
leeward
andrewrk: \o/

1596391772
leeward
I said -O0, dammit!

1596391800
ifreund
what is currently blocking me is the design work around making wasm incremental compilation work well, but I'm slowly figuring things out

1596391839
andrewrk
ifreund, it took me several days of not coding and scribbling in notebooks to figure out how to do incremental compilation for ELF, so take your time :)

1596391849
ifreund
binary size is not going to be anywhere near optimal for incrementally compiled debug builds though

1596391857
andrewrk
of course, that's to be expected

1596391883
andrewrk
consider that the work flow for someone using incremental compilation debug builds is testing on their own computer

1596391889
ifreund
yeah

1596391911
gruebite
will incremental builds be optional?

1596391936
ifreund
I'm going to be putting a fair amount of padding in the file too in order to avoid copying sections around all the time

1596391942
leeward
They should be turned off with --release-*

1596391980
pixelherodev
Should be optional for debug too IMO

1596391989
pixelherodev
`--no-incremental` or something

1596391998
andrewrk
it's possible. I won't promise it, but likely the code needed for --release* builds to work could be reused for non-incremental debug builds as well

1596392109
andrewrk
ifreund, makes sense. I'm about to do the same with the line number program debug info

1596392111
pixelherodev
Or we could rename debug -> development and release-safe -> release-debug ?

1596392115
gruebite
might be a lot to support. what's the usecase for --no-incremental during debug builds?

1596392123
andrewrk
ifreund, did you see that btw? :D

1596392125
pixelherodev
It'd be pretty trivial probably

1596392173
pixelherodev
gruebite: cross-compilation is one example

1596392179
pixelherodev
Or freestanding code

1596392193
gruebite
ahh yeah

1596392203
pixelherodev
I can see it being useful, but I can also see it being annoying

1596392215
pixelherodev
Going to take the ELF PR a bit further

1596392219
andrewrk
cross compilation isn't an example because incremental compilation and cross compilation work fine together

1596392228
pixelherodev
Merging File.{ELF,C}.allocator into File.allocator

1596392236
leeward
release-safe doesn't imply debug symbols

1596392243
pixelherodev
andrewrk: yes, but you might not

1596392272
leeward
and I really want my release builds that will still crash but are optimized.

1596392285
pixelherodev
I think release-debug makes sense

1596392293
pixelherodev
Potentially as an

1596392301
leeward
Those two things are different. It's either release or debug.

1596392306
pixelherodev
release-safe: no debug symbols, optimized, safety checks

1596392309
leeward
Unless you're debugging in prod.

1596392312
pixelherodev
release-debug: debug symbols, optimized, safety checks

1596392335
pixelherodev
Maybe we should replace release

1596392346
fengb
Maybe split the mode like we did CPU features

1596392353
leeward
I wouldn't mind a release-small-safe, but safe and small are opposed goals so it won't bother me too much if we don't get it.

1596392360
Sahnvour
ideally we'd split the mode into debug features enabled or not

1596392368
ifreund
andrewrk: I did give it a read and it helped me get in the right mode of thought for this design work, but wasm is different enough that it's not really applicable

1596392384
andrewrk
leeward, we have `--release-safe --strip` for non-debuggable safe release builds

1596392384
pixelherodev
DOsOf => debug symbols, optimized for speed and size, no safety checks

1596392398
pixelherodev
OfS => optimized for speed, no debug symbols, safety checks

1596392400
pixelherodev
etc

1596392402
leeward
I guess that works.

1596392409
pixelherodev
(probably a better way to specify it)

1596392428
ifreund
does wasm have some concept of debugging symbols like dwarf?

1596392436
ifreund
i sure hope not :P

1596392443
fengb
They sorta added dwarf

1596392445
andrewrk
ifreund, makes sense. hmm maybe look up "source maps"

1596392451
andrewrk
it's the same concept

1596392485
fengb


1596392497
fengb
I think it’s just a Chrome custom thing atm

1596392538
pixelherodev
Most webshit starts as custom Chrome things lol

1596392538
andrewrk
ifreund, I've been feeling good about designing by starting with the memory layout. E.g. what fields will be in memory for each Decl, for each Fn, for each File, etc

1596392542
zigusr
how do i get libc in windows buidls ?

1596392547
pixelherodev
WebSerial, WebUSB, Web*...

1596392553
andrewrk
once that all makes sense in your head, it takes a while, but the other pieces will fall into place

1596392556
pixelherodev
zigusr: uhhh... -gnu?

1596392563
pixelherodev
I think that uses mingw

1596392563
fengb
Google wants to push web “standards”

1596392567
zigusr
can i use msvcrt ?

1596392573
andrewrk
I think this is what "data oriented design" means

1596392579
pixelherodev
fengb: yeah, exactly

1596392579
alexnask[m]
zigusr: `-lc` will autodetect msvc and link to it

1596392591
zigusr
k, tnx

1596392597
zigusr
is that documented anywhere?

1596392599
leeward
pixelherodev: I think if we break out all the composable bits, the best way to spell it is "--release-safe" means "--safe -Ofast", "--release-fast" means "--unsafe -Ofast --strip", etc.

1596392623
fengb
-O2 >_>

1596392630
ifreund
andrewrk: Yeah, I've also been working memory-first so far, it makes a lot of sense for this kind of stuff

1596392635
pixelherodev
leeward: yeah, exactly

1596392640
pixelherodev
fengb: We don't have optimization levels

1596392648
pixelherodev
Might be better to use -Ospeed -Osize

1596392652
Sahnvour
andrewrk: exactly, know the data and design the processing around it :)

1596392656
pixelherodev
To avoid confusion with GCC / Clang one

1596392658
pixelherodev
ones*

1596392661
pixelherodev
the*

1596392667
alexnask[m]
zigusr: Not sure if the native libc detection is documented

1596392686
leeward
GCC supports -Ofast.

1596392716
fengb
Oh it does? That’d match at least

1596392750
leeward
-O0  -O1  -O2  -O3  -Os  -Ofast  -Og

1596392759
pixelherodev
leeward: that's why I said -Ospeed instead of -Ofast

1596392764
pixelherodev
-Ofast on GCC is a no-no

1596392773
pixelherodev
It

1596392782
leeward
Pfft, conformance.

1596392783
pixelherodev
--release-fast doesn't do that

1596392826
fengb
Oh really?

1596392840
pixelherodev
-Ofast includes -ffast-math

1596392841
fengb
Wait why would a compiler break conformance?

1596392842
leeward
"Disregard strict standards compliance."

1596392845
pixelherodev
fengb: performance

1596392848
pixelherodev
-Ofast is just that

1596392851
pixelherodev
It's

1596392855
pixelherodev
No matter the cost

1596392863
pixelherodev
For a lot of applications, it actually makes sense

1596392866
leeward
-ffast-math and -fno-protect-parens

1596392875
pixelherodev
Most applications will be fine if float behavior isn't 100% conformant

1596392880
leeward
Incorrect results in a quarter the time!

1596392884
pixelherodev
^ exactly

1596392891
pixelherodev
But in most cases, nobody really cares

1596392899
pixelherodev
90% of applications can run with -ffast-math

1596392900
leeward
Pfft, floats. I don't use those anyway.

1596392953
andrewrk


1596393048
ifreund
hmm, I don't think I'm going to put time into debug info for wasm yet. Nothing is standardized

1596393056
andrewrk
that sounds completely reasonable

1596393064
pixelherodev
Agreed

1596393083
fengb
MVP

1596393103
Snektron
<fengb "Wait why would a compiler break "> Well for example strictly x+x is different from 2*x for floats

1596393110
Snektron
It yields a different result

1596393128
Snektron
Yet those operations might have different performance implications

1596393170
leeward
exponent++

1596393177
leeward
not always correct

1596393190
leeward
?

1596393290
ifreund
pixelherodev: "Note that this also moves allocator and file from File.ELF and File.C into File" You should really put stuff like this in a separate commit tbh

1596393295
pixelherodev
I

1596393396
pixelherodev
ifreund: I'm splitting commits for test harness PR rn

1596393406
andrewrk
pixelherodev, i'd like to focus on just 1 PR from you at a time

1596393408
pixelherodev
andrewrk: does it matter to you if I split the ones in ELF as well?

1596393413
pixelherodev
That's fine

1596393417
andrewrk
gave you an ihex review

1596393450
pixelherodev
I saw

1596393460
pixelherodev
aerc in another tmux tab, got notified nearly immediately ;)

1596393473
andrewrk
if you look at the way the zig project uses ELF, it's a similar situation. we actually duplicate reading/writing ELF things in quite a few places. sometimes it's appropriate to avoid too-high-level abstractions

1596393510
andrewrk
the great thing about a frozen spec like ELF or IHEX, is that it becomes more OK to duplicate code that relies on the details of the spec

1596393536
andrewrk
of course things like constants can be abstracted at no cost, but others are inherently coupled with the surrounding code

1596393548
andrewrk
I'm vetoing the callback thing

1596393586
pixelherodev
Gotcha, will update soon

1596393591
pixelherodev
Finishing up the test harness split now

1596393610
pixelherodev
just running tests to ensure commits are properly self-contained

1596393619
andrewrk
ok. I'm looking at your oldest PR only until it is closed or merged before moving on

1596393644
pixelherodev
Fair

1596393656
pixelherodev
On the bright side, that gives CI time to finish ;pl;

1596393658
pixelherodev
lol*

1596393694
gruebite
top level constants, lower or uppercase?

1596394081
andrewrk
pixelherodev, the art of upstreaming big changes is its own skill, but I promise you it will be worthwhile in your career

1596394091
pixelherodev
I know :)

1596394130
pixelherodev
Hopefully ZSF gets an anonymous billionaire sponsor and Zig

1596394188
andrewrk
ok your oldest PR is now ihex. your move :)

1596394214
pixelherodev
andrewrk: any issues with just removing the callback and having it return the data structure?

1596394217
pixelherodev
That makes the most sense to me

1596394252
pixelherodev
`while (true) { record = parse(); // use record }` instead of `while true { parse(handleRecord); }`

1596394275
pixelherodev
(removing the loop from within `parse`)

1596394280
andrewrk
idk, that PR kinda seems out of place to me. I suggest to close it for now and focus on one of the other two

1596394294
pixelherodev
Sure

1596394297
pixelherodev
Makes sense

1596394324
pixelherodev
That makes ELF the oldest I think

1596394327
pixelherodev
andrewrk:

1596394370
pixelherodev
If only I could send patches from a non-GitHub repo to Zig :(

1596394377
pixelherodev
that's unrelated though

1596394488
andrewrk
damn it looks like we're even going to have incremental compilation and debug info for SPU Mk II ? that's pretty slick

1596394802
pixelherodev
Eventually, yes

1596394808
andrewrk
pixelherodev, for future reference it really helps to explain when you add big stuff like this address space thing

1596394814
pixelherodev
For sure, yeah

1596394827
pixelherodev
i'll make sure to do that in the future

1596394860
pixelherodev
Note that debug info will require an emulator that understands it

1596394868
pixelherodev
But there's no reason I couldn't do that for my Tricarbon JIT for instance

1596394883
pixelherodev
On that note, need to work on my backend rewrite :)

1596394896
pixelherodev
I'll wait for PR comments before proceeding probably

1596395356
pixelherodev
Thought I'd closed it

1596395364
pixelherodev
andrewrk: okay, your turn :)

1596395578
pixelherodev
I closed the wrong one

1596395623
alexnask[m]
lol

1596397153
pixelherodev
Okay, my turn again :)

1596397355
andrewrk
now it's my turn to code :)

1596397446
Snektron
Pair programming?

1596397482
andrewrk
no, I was just spending a few hours doing code reviews

1596397493
pixelherodev
:P

1596397498
andrewrk
that was my gentle way of saying, "I'm going to ignore you for a few hours"

1596397508
pixelherodev
Don't worry, I'll ignore you too!

1596398718
pixelherodev
Biggest use case for CBE focus: it'd allow for easily using the Zig test suite system with C code easily

1596398726
pixelherodev
and there's not a single good C test system

1596398856
pixelherodev
Whoa!

1596398866
pixelherodev
Kristall properly highlights code in HTML??

1596398930
leeward
pixelherodev: I don't know about there not being a single good C test system. That's a difficult claim to prove.

1596399192
ifreund
absolute claims generally are :D

1596399379
leeward
Feels like the setup for the xkcd about standards.

1596399408
pixelherodev
I mean... yeah?

1596399963
companion_cube
is spu mk2 a real thing? can you get a board for it?!

1596400001
ifreund
companion_cube: see

1596400129
alexnask[m]
xq makes a physical one yes

1596400183
adamkowalski
if you have an ArrayList(bool) will the bits be packed? Or will each element still take 1 byte

1596400208
alexnask[m]
It will not be packed

1596400213
adamkowalski
dang

1596400219
adamkowalski
is there a reason for that?

1596400228
Snektron
Efficiency

1596400238
pixelherodev
Implementation is generic

1596400242
Snektron
Theres std.PackedIntArray

1596400244
adamkowalski
Can you elaborate on that Snektron

1596400255
pixelherodev
ArrayList doesn't special-case any types

1596400262
pixelherodev
Well, it adds writer / reader for u8 :

1596400264
pixelherodev
;P

1596400267
adamkowalski
it doesn't seem intuitive to me

1596400269
alexnask[m]
vector<bool> was a great idea /s

1596400270
Snektron
Loading a single bit costs a load, shift and mask

1596400289
adamkowalski
Vector bool was a problem because of references

1596400289
Snektron
While loading a byte thats either 0 or 1 requires just a load

1596400293
Snektron
And maybe a sign extent

1596400300
adamkowalski
I don't want to deal with single elements though

1596400306
adamkowalski
thats the point of storing it in a vector

1596400311
adamkowalski
data oriented design and all that

1596400313
Snektron
Furthermore, i believe arrays have C abi

1596400333
adamkowalski
you should operate on vectors at a time, never with single elements. And process the array in it's entirety

1596400345
Snektron
Although im not sure what a zig bool translates to in C

1596400357
adamkowalski
preferably loading into simd registers and do operations on a vector lane at a time

1596400377
alexnask[m]
Iterating through an ArrayList is very common. Some kind of PackedArrayList would be good to have though

1596400398
ifreund
adamkowalski: well, zig can do that too. See std.meta.Vector

1596400406
ifreund
(for simd)

1596400411
Snektron
Are referring to std::vector or std.meta.Vector/@Vector?

1596400482
leeward
std.ArrayList is not the same as std.meta.Vector.

1596400586
alexnask[m]
I dont think anyone suggested its the same? :P

1596400597
alexnask[m]
Also, Alex Stepanov, why?

1596400628
Snektron
I got kinda confused when adamkowalski went from vector<bool> to simd

1596400979
Sahnvour
alexnask[m]: nobody's perfect :)

1596403261
ronsor
I'm wondering. Is it possible to use suspend/resume to implement a sort of user-space cooperative threading system?

1596403348
pixelherodev
I think so?

1596403359
pixelherodev
I think protty did that, right?

1596403361
pixelherodev
`zap` IIRC

1596403369
pixelherodev
Works both cooperative and preemptive IIRC

1596403480
ronsor
zap? Is it on GitHub?

1596403538
alexnask[m]


1596403732
ronsor
interesting

1596406479
gruebite
so i haven't touched too much on zig's async await. it doesn't look like it offers actual threading but a mechanism to do it?

1596406499
fengb
It’s just fancy coroutines

1596406504
gruebite
yeah exactly

1596406512
gruebite
i love coroutines though

1596406519
fengb
You can apply a thread work pool to it

1596406543
fengb
The builtin event loop mechanism sets up worker threads = cores iirc

1596406553
gruebite
so it facilitates threading

1596406595
fengb
But that’s optional. It’s primarily designed for handling async io style work

1596406657
fengb
Not just io, but stuff that would be handled similarly to event loops in other languages

1596407182
pixelherodev
hmm

1596407192
pixelherodev
does it make sense to make e.g. linksection a builtin?

1596407210
pixelherodev
instead of `const foo linksection() = blah;`, `const foo @linksection() = blah;`?

1596407222
pixelherodev
... nah, probably not.

1596411613
andrewrk
ooh, found a nice use case for pwritev

1596412073
andrewrk
oh, damn it, I keep thinking it lets you put multiple offsets

1596412155
Snektron
pixelherodev, i was thinking whether its better to have an `attribute` builtin

1596412210
Snektron
Would probably be close to what eleanor-nb proposed, but the basic idea is to group stuff like packed, extern (?), linksection, etc

1596412240
Snektron
With idea that a hypothetical glsl/spir backend needs a few more attributes

1596412316
Snektron
Example: fn a() attribute(.{.callconv = .C, .linksection = .text}) void

1596412359
Snektron
extern vertex: Vec2F attribute(.{.binding = 1});

1596412482
Snektron
Just a thought really, but it seems keyword pollution to introduce those things for shaders, especially since there are quite a lot of options

1596412524
andrewrk
I could see that making sense

1596412553
Snektron
Plus, there might be other architectures which require specific attributes... This way, they can be added without breaking problems

