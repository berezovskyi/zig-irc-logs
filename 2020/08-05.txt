1596585629
ronsor
ifreund:

1596585631
ronsor
pixelherodev:

1596585636
ronsor
I'm running WASM in ring 0 :)

1596585655
pixelherodev
For fun?

1596585671
ronsor
and profit. I can take advantage of existing software ported to WASI/WASM

1596585735
ronsor
I think in-kernel emulation is viable and sane

1596585775
ronsor
see: macOS Rosetta, Windows 10 on ARM's x86 support

1596585788
ifreund
ronsor: you have your repo up in some public place?

1596585796
ronsor
ultimately, if you cache the JITted code, it won't be bad

1596585805
ronsor
ifreund: not yet. still doing heavy work on it.

1596585820
ronsor
once I get /bin/init running, I'll put it on GitHub

1596585860
ifreund
imo that's no reason to keep it hidden away, I had river public from commit 1, but to each their own

1596585904
ifreund
I just didn't really advertise it until it could do something

1596585980
ronsor
I usually like to wait until I have something to really show

1596585992
ronsor
also I really don't want anyone to see the wasm3 bindings yet

1596586000
ronsor
those have to be refactored a bit

1596586006
ronsor
considering it was essentially my first zig project

1596586049
ifreund
I feel that, river was/is my first zig project

1596586084
ifreund
the code was pretty bad in the very beginning, which you are free to go back through the history and see if you really want to

1596586152
ronsor
even though it's a bit ugly, I think the best part is the function binding support

1596586178
pixelherodev
ronsor: I was assuming caching

1596586180
pixelherodev
Caching is basic :P

1596586203
pixelherodev
It'll be able to

1596586242
ronsor
another thing to consider is the average user doesn't need ultra performance

1596586275
ifreund
well that's something phd will agree with :D

1596586304
ronsor
so it's ok to trade away some performance in that case

1596586341
ronsor
the heaviest apps I use are any sort of compiler/SDK, Firefox, and Discord (unfortunately...)

1596586363
ifreund
gotta get in on ircdiscord

1596586373
ronsor
I suppose a media player is fairly CPU intensive, especially new-ish codecs like VP9 and AV1

1596586373
ifreund


1596586384
ronsor
I already have tons of plugins and hacks installed on the regular discord client

1596586387
ronsor
probably not gonna change that

1596586425
pixelherodev
ronsor: I don't disagree wrt perf

1596586430
pixelherodev
I disagree that this is worth the trade

1596586433
pixelherodev
What's the advantage here?

1596586445
pixelherodev
A higher degree of cross-platform compatibility?

1596586449
ronsor
code portability is #1

1596586470
pixelherodev
IMO that's not the way to go about it

1596586474
pixelherodev
WASM is an

1596586482
pixelherodev
I'm working on an IR-based solution

1596586490
pixelherodev
Probably using e.g. QBE

1596586513
pixelherodev
(Not actual QBE, but something heavily based on it with an emphasis on portability)

1596586531
pixelherodev
The idea is to have a compiler spit out the IR, then have systems finish compilation as part of the install process

1596586548
pixelherodev
This results in similar compatility gains

1596586555
pixelherodev
This in fact ends up being

1596586560
ronsor
could probably be more performant

1596586562
pixelherodev
Since it allows -march=native to use

1596586564
pixelherodev
be used*

1596586565
ronsor
yeah

1596586571
ronsor
truly native optimizations

1596586585
ronsor
that idea kinda reminds of TinyCC

1596586591
pixelherodev
It basically shifts the compiler backend to the install process, leaving only the frontend and generic optimizations for the release process

1596586603
pixelherodev
Best part is it should be 100% compatible with existing kernels

1596586607
pixelherodev
No kernel-space tricks needed

1596586617
pixelherodev
e.g. you could make a Linux distro, or patch FreeBSD to support htis

1596586619
pixelherodev
this*

1596586721
ronsor
If you make it, I'll add support

1596586734
pixelherodev
?

1596586738
pixelherodev
To what?

1596586743
ronsor
my OS

1596586745
ifreund
heh, the programs would be double-portable

1596586746
pixelherodev
Ahhhh

1596586757
alexnask[m]
Snektron: 👋

1596586762
pixelherodev
This would really just be a specialized package manager

1596586768
pixelherodev
Hell, I could probably make it a Gentoo repo

1596586772
pixelherodev
overlay*

1596586789
pixelherodev
Have the server preprocess ebuilds as part of CI, producing IR

1596586798
pixelherodev
On `emerge`, it only has to finish compilation from IR -> native

1596586820
pixelherodev
... Hell, I could have a proof-of-concept

1596586845
ronsor
On the IR, you mention emphasizing portability. How are you going to handle things like sizeof()?

1596586858
fengb
Snek killed snek

1596586874
pixelherodev
One option is to produce per-architecture IR, then deduplicate it

1596586889
pixelherodev
So you have a common base file, plus per-architecture `diff`s to apply

1596586910
pixelherodev
But this is still POC

1596586913
ronsor
may not even need per-architecture

1596586913
pixelherodev
Real portability would come from a better IR

1596586917
pixelherodev
Not LLVM

1596586920
ronsor
possibly just 32-bit/64-bit

1596586924
pixelherodev
LLVM would be the proof-of-concept stage

1596586927
pixelherodev
ronsor: not quite

1596586929
pixelherodev
alignment is an issue also

1596586971
ronsor
alignment is usually the pointer/register size AFAIK

1596587519
pixelherodev
ronsor: not qutie.

1596587521
pixelherodev
quite*

1596587541
pixelherodev
RISC-V mandates two-byte alignment for all functions; Intel CPUs work best with 32

1596587669
ronsor
I didn't know that

1596588707
gruebite
is there any way to save comptime type information to be used at runtime? i'm sending a pointer (could be any zig type) to C, and when I get it back I'd like to get the declarations back

1596588811
pixelherodev
Probably

1596588862
ronsor
I don't

1596588895
ronsor
@typeInfo should make that easy

1596591217
andrewrk
gruebite, zig doesn't provide you runtime type information, but you can expose that information to yourself via comptime code

1596591584
daurnimator
andrewrk: is there a good pattern for mapping types to some sort of id?

1596591587
daurnimator
I guess comptimehashmap?

1596591605
daurnimator
or is e.g. @typeName guaranteed to be unique?

1596591646
andrewrk
I know it's not a direct answer to your question, but I think that's a smell, trying to get a type id at runtime

1596591687
daurnimator
true. can probably rethink of a way to do it at comptime

1596591735
daurnimator
one thing I've been meaning to propose/write is an argument to e.g. std.json.parse where you provide per-type overrides

1596591769
daurnimator
e.g. "when parsing into a `Foo` for

1596591823
daurnimator
this would allow people to specify how to parse into a Foo without modifying Foo to have a jsonParse method.

1596591959
andrewrk
makes sense to me

1596591989
alexnask[m]
You can do this wth a comptime closure

1596592021
daurnimator
the problem I hit last time I tried this was how to mass that is as an option

1596592026
daurnimator
*pass

1596592043
daurnimator
at the moment `ParseOptions` isn't comptime-known I think?

1596592242
alexnask[m]


1596592290
alexnask[m]
I wouldnt recommend this but its possible

1596592389
alexnask[m]
(similarly you could copy some type info instead of keeping a counter, take back a runtime usize and return the runtime type info struct that corresponds to the index)

1596595649
andrewrk
spot the typo

1596595907
andrewrk
oh nvm. I see what happened here.

1596597115
epmills
howdy, all.

1596597160
ronsor
hey

1596597170
epmills
using the latest master and unable to cross-compile to windows from macos...

1596597197
epmills
...complaining on: const stdout = std.io.getStdOut().writer();

1596597225
epmills
error: unable to evaluate constant expression

1596597225
epmills
.x86_64 => asm volatile (

1596597247
epmills
known issue?  unable to locate in issues list.

1596597545
epmills
fwiw, this builds fine: std.debug.warn("\n", .{});

1596597671
andrewrk
epmills, hmm did you perhaps put the stdout as a global and not a local variable? on windows getStdOut() has to do something at runtime

1596597863
epmills
andrewrk: that was it.  i'd declared it above main.  moving it into main fixed.  thx for the insight - live 'n learn.

1596597886
andrewrk
np

1596607684
andrewrk
welp, caught at least one regression in llvm 11

1596610060
andrewrk
oof found another one

1596612798
Nypsie[m]
Rewatching the last stream. That incremental compilation is really really neat

1596613507
andrewrk
:)

1596613523
andrewrk
oh shoot I still didn't go over ifreund's wasm design thing

1596616750
ifreund
andrewrk: I'm a little confused, decls are toplevel things like functions or globals right?

1596616822
ifreund
the types section only lists function signatures, which currently are the only types in wasm that can be user defined

1596617058
ifreund
you are totally right that we can use unreferenced types for padding and wrap the section in an allocator-like interface

1596617276
ifreund
and yeah I haven't give all that much thought to multi-threaded friendliness

1596617624
ifreund
so I think each decl has either 0 or 1 entry in the types section

1596617958
scientes
wow, FPGAs are desperately in need of higher level languages

1596618925
andrewrk
ifreund, yes decls are toplevel things like functions or globals. it's also the unit of memory lifetimes in stage2. each decl has an arena where all the allocations go that are related to analysing the decl

1596619037
andrewrk
point being the operations the incremental compiler needs to be able to handle is: add a new Decl, update an existing Decl, delete a Decl

1596619069
andrewrk
so it will be the most straightforward if you organize the binary file data in accordance with those operations

1596619113
andrewrk
good night

1596619119
ifreund
makes sense, I think my plans may have suffered a little from lack of familiarity with the rest of the stage2 codebase

1596619122
ifreund
night!

1596625048
gonz_
Fuck. I think I exactly missed the window of Zig & zls versions that work together.

1596625066
gonz_
zls master seems to fail with a zig compiler error

1596625203
Nypsie[m]
What compiler error do you get? I don't see any changes that could break it

1596625427
gonz_


1596625486
gonz_
Zig also outputs a `NUL` file into the directory which is very cumbersome to remove :/

1596625501
gonz_
I picked a really catastrophic release to do this with

1596625508
ifreund
oh fun

1596625658
Nypsie[m]
Oh wew

1596633770
antaoiseach
Hey guys, I have a pretty basic question, but one that has been gnawing away at me for a while

1596633802
antaoiseach
Suppose I am designing an API that wants to consume strings (I know we don't really have a proper string type yet), and I want to support the maximum range of operations on it

1596633836
antaoiseach
I'm wondering which would be the best signature for a string input in that case? []const u8 ? *[]const u8 ? *[] u8? [] u8 ?

1596633865
antaoiseach
In some of these cases, I can pass in a static string like "foo", for others I will have to use "foo"[0..] etc.

1596633871
ikskuh
[]const u8

1596633874
ifreund
well, it totally depends on what the function does

1596633880
antaoiseach
I want to allow the greatest flexibility in input

1596633880
ikskuh
if you don't want mutable data (no write-back)

1596633885
ikskuh
and []u8 when you want writeback

1596633898
ikskuh
resizing is not possible in both cases

1596633901
ifreund
but yeah, in unless you want to mutate the string passed to you, []const u8

1596633908
ikskuh
antaoiseach: what do you mean by "flexibility"?

1596633910
antaoiseach
say I want possibly mutation, and will take care of the invariants even if I don't mutate it

1596633928
ikskuh
your algorithm either mutates the data or it does not

1596633942
ikskuh
if it does mutate the data: []u8

1596633946
ikskuh
if it does not: []const u8

1596633957
antaoiseach
ikskuh: to be more precise, say I have var foo = "hello", and const foo = "world" and I also want to pass in "hello, world" to the function directly along with foo and bar

1596633972
ikskuh
that's all "non-mutable data"

1596633978
antaoiseach
and make it so that the user does not have to do anything special with the input - &foo or foo[0..] etc.

1596633992
ikskuh
it's all []const u8

1596634020
ikskuh
if you don't mutate the data in the algorithm, use a non-mutable slcie

1596634022
ikskuh
*slice

1596634027
ikskuh
everything else is less flexible

1596634030
ifreund
string literals have type [:0]const u8 if you're not aware

1596634040
ikskuh
ifreund: not correct!

1596634043
antaoiseach
ikskuh: ifreund: thanks for the inputs ... sort of goes back to my original choice of [] const u8 I suppose, but I had some irksome user-experience cases ...

1596634047
ifreund
ikskuh: what???

1596634053
ikskuh
string literals have the type "*const [_:0]u8"

1596634067
ikskuh
which coerce to []const u8

1596634074
antaoiseach
this part is where Zig seems to be getting a bit all over the place

1596634077
ifreund
urgh yeah and that coreces to what I said

1596634082
antaoiseach
not very clean :(

1596634094
ikskuh
antaoiseach: zig has the most clean pointer experience i ever used

1596634099
ifreund
^

1596634103
ikskuh
you probably didn't grasp a concept of zig yet ;)

1596634117
ikskuh
which forced you to work around certain (reasonable) limitations in the type system

1596634123
ikskuh
but string literals are const-pointer-to-array-of-u8

1596634169
ifreund
which coreces to a bunch of things including []const u8, [:0]const u8, and [*:0]const u8

1596634180
ikskuh
oh yeah, i forgot the 0 terminator…

1596634181
ikskuh
sorry

1596634248
ifreund
in C you have only a single pointer type and have to "just know" that your pointer happens to be a pointer to one item or a null terminated string or whatever

1596634274
antaoiseach
Okay, having the type []const u8 copies the argument, right? So if I make the argument type *[]const u8, then why can't I do foo(&"hello")?

1596634280
ifreund
zig brings necessary granularity to pointer types, which greatly increases type safety

1596634294
ifreund
[]const u8 is a slice

1596634304
ifreund
a slice is a pointer + a length

1596634326
ifreund
the data being pointed to is not copied when you pass a slice

1596634352
antaoiseach
So, if I wanted a pointer type for the arg and wanted to pass in a static string, how would the signature look like?

1596634363
ifreund
a slice is a pointer type

1596634368
ifreund
what's your goal here?

1596634425
ifreund
you can think of a []const u8 as a struct { ptr: [*]const u8, len: usize }

1596634505
ikskuh
(you are even allowed to access and change .ptr and .len!)

1596634523
ikskuh
antaoiseach: if you pass a pointer to a slice, that would roughly be "char ** slice_ptr" in C

1596634840
antaoiseach
Okay, let me present a use-case like so. In Rust, if I have an API like so: fn foo(s: &[u8]), then I can call it like so: foo(b"hello");

1596634849
antaoiseach
or like   let message = [b'w', b'o', b'r', b'l', b'd'];

1596634851
antaoiseach
foo(&message);

1596634866
antaoiseach
or even like let mut another_message = [b'w', b'o', b'w'];    foo(&another_message);

1596634911
ikskuh
that's all "[]const u8"

1596634914
ifreund
^

1596634957
ifreund
const message = [_]u8{ "a", "b", "c" };

1596634975
ifreund
could also be var no problem

1596634982
antaoiseach
and if I wanted to modify it then I would need to use []u8 instead, right?

1596634986
ikskuh
yes

1596634987
ifreund
and then you pass it with foo(&message)

1596634995
ikskuh
that would be a "mut" slice in rust

1596635015
antaoiseach
Okay, so I would not be able to pass in something like "baz" in that case, right?

1596635024
antaoiseach
since that would remove the constness?

1596635035
ifreund
right, literals are const

1596635065
antaoiseach
Okay, thank you guys, ikskuh and ifreund ... this has been a very useful session for me. Cheers!

1596635111
ifreund
hmm, does var x = "foo".*; give you a mutable array on the stack?

1596635159
fengb
Yep

1596635165
ifreund
nice

1596635185
ikskuh
yep

1596644168
ikskuh
hey

1596644176
ikskuh
how i can i check if a std.fs.Dir is the root directory?

1596644239
ikskuh
i would like to find build.zig in the current project tree similar to git finds .git or zig build finds build.zig

1596644365
ifreund
probably just traverse up until you find the file/dir indicating the root no?

1596644376
ifreund
could also look how zig finds build.zig

1596644413
ikskuh
<ifreund> probably just traverse up until you find the file/dir indicating the root no?

1596644421
ikskuh
i don't see a possibility to check for this with the current API

1596644679
ifreund
uh, itereate over the contents of the dir and compare name/type of each item?

1596644750
ikskuh
and how do i find out if i'm at the root dir?

1596644776
ifreund
look for a build.zig file or .git file?

1596644786
ifreund
.git dir I mean

1596644797
ikskuh
yeah

1596644802
ikskuh
that's not the problem ;)

1596644805
ikskuh
the problem is finding "/"

1596644807
ikskuh
the end

1596644817
ifreund
oh, / doesn't contain a ..

1596644835
ikskuh
it does D

1596644848
ifreund
if you have a ./.. dir, you can traverse upwards

1596644860
ikskuh
[felix@denkplatte-v2 ~]$ ls /../../../

1596644860
ikskuh
bin   dev         etc

1596644861
ifreund
what is this madness

1596644882
ikskuh
OS

1596644931
ikskuh
main.cpp does it by path manipulation, not by using directory handles

1596644992
ifreund
maybe that's the way do do it

1596645011
Nypsie[m]
The way I solved it in my Git implementation is by traversing up and using std.fs.path to check the current  directory. I hold a count if I pass the same dir twice (means I entered root?)

1596645048
ifreund
i was just about to say that

1596645063
ifreund
/../../ will be the same fd as /

1596648026
andrewrk
ifreund, is there some way I can help with  #5985 ? want me to go over your other sections ideas and give feedback?

1596649035
ifreund
andrewrk: Would definitely appreciate more feedback on #5985. I haven't had time to make more progress on it yet today but plan to sit down this evening for another round of planning, possibly sketching out an implementation

1596649057
andrewrk
ok you got it

1596649059
ifreund
I think that overall I need to tie things more closely to the lifetime of decls

1596649195
ifreund
We may actually be able to treat most of the sections as allocatable memory, it seems like that might be good pattern to follow

1596649240
ifreund
it gets a little weird in the details of the restrictions on the padding, but it should be workable

1596649578
andrewrk
that sounds about right

1596650591
protheory8-new-m
Hi everyone, so when will Zig become popular?

1596650637
ikskuh
i think zig is quite popular for its current state

1596650644
Nypsie[m]
I asked my crystal ball; the answer is 5

1596650656
Nypsie[m]
Jokes aside, I think there's quite a nice community going already.

1596650677
fengb
I’m happy where Zig is right now. Not too overhyped :P

1596650694
ikskuh
^= this

1596650702
Nypsie[m]
Seen quite some comments of people who said they're coming back in a few years when it hits 1.0, so possibly that brings in alot more 'popularity' for w/e that may mean :P

1596650816
protheory8-new-m
Yeah, I don't develop anything in Zig right now anyway

1596650822
protheory8-new-m
Only made one library

1596650834
andrewrk
it's popular enough that we have some income to fund development. but not too popular that it's falling over its own weight

1596650867
companion_cube
besides, a lot of people won't have/see a usecase for it

1596650872
ikskuh
yeah i think community momemtum right now is near-perfect

1596650922
andrewrk
a big milestone is going to be fast compilation + package manager working well

1596650926
ikskuh
yeah

1596650934
andrewrk
I think we'll see an explosion in the community growth at that point

1596650942
ikskuh
also the syntax finalizations

1596650959
ifreund
#1717 is still looming :D

1596650960
ikskuh
when we can rely on zig that our code won't break because someone found out that "a" is better than "b" :D

1596650977
ifreund
I mean that won't really happen until 1.0

1596650990
ikskuh
well, syntax and semantics are quite different things

1596651001
ifreund
zig is already good enough to build real software with

1596651002
ikskuh
finalizing the syntax is probably a good first step for the spec though

1596651003
andrewrk
we should be able to get the planned syntax changes all done by 0.8.0 I think

1596651009
ifreund
nice

1596651010
ikskuh
\o/

1596651018
andrewrk
(not the upcoming 0.7.0)

1596651041
ikskuh
andrewrk: btw, i wanted to ask it on the last showtime, but i think the question didn't get through:

1596651055
ikskuh
i heard rumors that you don't like #1717 personally, but you still accepted the proposal. why?

1596651091
andrewrk
it's consistent with the rest of the language

1596651139
ifreund
I see it as anon functions are a thing we want, and "one way do things" is important

1596651151
ifreund
#1717 follows naturally

1596651221
companion_cube
are functions really first-class though?

1596651234
ikskuh
yeah, i think they are

1596651242
ikskuh
but you don't have runtime closures

1596651247
companion_cube
closures would be truly first-class, but functions, imho, are special because they can only be toplevel

1596651250
ikskuh
ifreund: same thoughts on that

1596651261
ikskuh
companion_cube: they don't have to be toplevel atm

1596651275
ikskuh
with #1717 they won't even need a helper struct anymore

1596651294
companion_cube
ikskuh: they're fundamentally toplevel

1596651300
companion_cube
even if the syntax has sugar

1596651305
ikskuh
how so?

1596651313
ikskuh
i can access stuff from the outer scope in the functions

1596651319
ikskuh
but with the restriction of comptime

1596651322
companion_cube
functions become code, they're not data

1596651338
companion_cube
(closures, otoh, are proper values)

1596651381
ikskuh
well, i don't think we should have closures in zig

1596651393
ikskuh
i still consider functions first-class, at least at comptime

1596651401
ikskuh
but we don't need that stuff anyways ;)

1596651405
ikskuh
we can comptime it into the lang

1596651406
companion_cube
but everything else is also first-class at runtime, isn't it?

1596651417
companion_cube
like, structs, they correspond to runtime values

1596651422
companion_cube
but functions don't

1596651429
ikskuh
types don#t do either ;)

1596651433
ikskuh
and we can compute them

1596651517
ifreund
companion_cube: uh, function pointers?

1596651530
andrewrk
struct types don't correspond to runtime values

1596651575
companion_cube
ifreund: so you could say `fn foo()…` and then `const bar = &foo`, that'd be consistent

1596651591
ikskuh
that's possible

1596651596
ikskuh
that's even in a lot of std

1596651601
ikskuh
const print = std.debug.print;

1596651605
ikskuh
print("bla", . {});

1596651641
companion_cube
defining a function pointer is quite different than defining a function :)

1596651654
ikskuh
yeah

1596651668
companion_cube
(and, behold, closures are exactly that: a function pointer and some upvalues 😁 and they're runtime stuff)

1596651682
ikskuh


1596651845
companion_cube
honestly, without closures it's hard to do anything functional :p

1596651853
ikskuh
companion_cube: i still think we can make awesome closures with #1717 and comptime

1596651866
ikskuh
a bit more explicit than in c++, but still with the same feature level

1596651889
protheory8-new-m
Is Jemalloc actually faster than C allocator? I tried to benchmark them, it's seems like it was slightly faster, but I'm not sure if my benchmark is even good.

1596651913
companion_cube
closures would be structs, not functions, ikskuh

1596651921
companion_cube
I mean, I can't see how they'd be functions

1596651923
philtor
heh... just investigating zig and was going to ask about closures.

1596651936
companion_cube
protheory8-new-m: depends on your OS' malloc

1596651980
protheory8-new-m
Assuming Linux with glibc and GNU userland in general

1596651983
ikskuh
companion_cube: closures are a combination of struct and function... so  ;)

1596651997
ikskuh
in the end, it does only matter in language theory, but the code that will be executed is the same

1596652037
fengb
C allocator is just an interface. Some OSs like FreeBSD use jemalloc

1596652063
companion_cube
ikskuh: so I'm not sure how #1717 is relevant

1596652108
fengb
s/OSs/libcs/

1596652121
ikskuh
companion_cube: it makes the language more consistent

1596652130
ikskuh
less cluttered with struct { fn x() void { } }.x

1596652151
companion_cube
hu, in what way?

1596652158
ikskuh
you just write fn() void { }

1596652162
ikskuh
instead of that thing

1596652168
companion_cube
ah, for anonymous functions?

1596652168
ikskuh
a lot of zig already uses function pointers

1596652170
ikskuh
yep

1596652181
ikskuh
implementing interfaces will be nice as well

1596652181
protheory8-new-m
fengb: glibc

1596652184
companion_cube
I thought you were talking about toplevel declarations

1596652191
ikskuh
i'm talking about #1717 in general ;)

1596652226
ikskuh
as you can init your interface impls directly in the instantiation of the vtable instead of introducing functions for wrapping

1596652234
companion_cube
I think I like the distinction between functions and closures that rust makes :s

1596652240
companion_cube
it's very clear what's a function in it

1596652252
philtor
it looks like #1717 has been accepted?

1596652254
ikskuh
i think zig will be super-clear as well

1596652259
ikskuh
philtor: a long time ago

1596652282
ikskuh
andrewrk: have you read the idea of function "label" vs function pointer distinction already? what do you think of it?

1596652372
andrewrk
yeah but I'd have to refresh my memory and read it again. I also discussed it with thejoshwolfe and he explained the situation in a way that made a lot of sense. I want to double check with him before proceeding

1596652383
ikskuh
sounds good :)

1596652409
ikskuh
i really like the idea, as it's the best way of distinction for exportable symbols :)

1596652683
fengb
protheory8-new: caveat I haven't read this yet

1596652691
fengb
Looks pretty interesting. ptmalloc = glibc

1596652736
Sahnvour
andrewrk: nice stream last night, tracy integration is really cool. major C/C++ compilers took 30 years to come there :)

1596652813
protheory8-new-m
fengb: I'll check it out, thanks.

1596652821
Sahnvour
I don't know how much "frame oriented" it is but funnily we could think of `update` steps in the incremental compiler as frames

1596652892
FireFox317
ikskuh, which issue is the function label vs pointer thingie?

1596652909
ikskuh
#1717 down below :D

1596652925
ikskuh
let me search the comment

1596652995
FireFox317
probably spex comment right

1596652997
Sahnvour
(how much tracy is "frame oriented" I mean, since it's aimed at games)

1596653013
ikskuh


1596653016
ikskuh
starting from here

1596653017
ikskuh
yeah

1596653039
andrewrk
Sahnvour, I was thinking the same thing :D

1596653108
Sahnvour
I've been planning to use tracy for some time but didn't yet, I bet it has some frame-based analysis tools that would be a great fit for this use case

1596653605
FireFox317
ikskuh, thanks

1596666691
DarkUranium
I've just realized what Zig's error handling reminds me of! (the idea of its `error.*` types, that is)

1596666693
DarkUranium
It's Erlang.

1596667604
DarkUranium
For example, `badarg` is returned for bad arguments, or `{try_clause,Value}` if Value does not match a `try` clause.

1596669903
leeward
Did "anytype" turn into "any" when I wasn't looking?

1596669933
leeward
Also: should it have?

1596669967
Snektron
Wait, did it?

1596670027
Snektron
nah doesn't look like it

1596670063
Snektron


1596671973
leeward
ouch

