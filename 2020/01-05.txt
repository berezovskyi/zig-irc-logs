1578184777
via
i built zig from source, and ran into a compiler crash that produces no real traceback, just addresses. how do i build in a way that has names?

1578185684
Snektron
Did you build as release? because otherwise (in debug) it should have names

1578185720
Snektron
(release is enabled with -DCMAKE_BUILD_TYPE=Release)

1578186002
via
i even explicitly used Debug

1578189615
Snektron
Weird, though to be honest im not sure wether it works on my own build

1578209512
plumm
andrewrk: any chance we could merge that typeof hack fix? or is there something in the way

1578209621
plumm
tysm

1578209657
andrewrk
np

1578214265
Dominic[m]
Okay, I clearly don't understand zig async at all :D I'm reading

1578215041
Dominic[m]
As a continuation of my confusion,

1578216181
schme245
how can I do conditionals in my code that depend on the release mode?

1578216204
schme245
I remember there's a builtin for that somewhere but I can't find it

1578216606
schme245
found it, `builtin.mode`! but how come that variable is not defined anywhere in builtin.zig? ðŸ¤”

1578216898
mq32
schme245: there's "zig builtin" and "std.builtin"

1578216914
mq32
zig builtin delivers you with the runtime values

1578216987
schme245
gotcha! I guess that is implemented somewhere in the C++ compiler then?

1578217059
mq32
yeah, it is emitted for every build

1578217403
schme245
andrewrk: this commit makes me so happy, Zig comptime is just amazing! :D

1578218591
daurnimator
andrewrk: `--color off` turning off using all terminal escape codes seems like bad naming

1578231158
traviss
`if (new_size <= old_mem.len and new_align <= new_size) {`

1578231182
traviss
should be new_align <= new_align ?

1578231215
traviss
*new_align <= old_align

1578232763
Dominic[m]
Following to my question above about async,

1578232781
Dominic[m]
It would be nice to have some indication in the docs when a function is async-capable.

1578233037
daurnimator
Dominic[m]: async/await themselves are cooperative

1578233087
daurnimator
Dominic[m]: unless you (or code you call) calls `suspend`, then its the same as a non-async function

1578233158
Dominic[m]
daurnimator: So that would imply somewhere in

1578233160
Dominic[m]
(and no idea how to find out)

1578233198
daurnimator
well I see one function in there; guess :)

1578233249
Dominic[m]
It did cross my mind that loop iterations might "implicitly" suspend or something like that, in order to provide a way for the loop to pause.

1578233279
Dominic[m]
It does seem like async is fairly undocumented outside of the places you can manually do it yourself. Reading the source of the zig os/fs/system stuff has been useful.

1578233445
Dominic[m]


1578236029
nofmal
hello, i was wondering if there's any plan for anonymous function?

1578236317
dingenskirchen
nofmal:

1578236522
dingenskirchen
currently you can create an anonymous struct with a method, then refer to that using the variable the struct's bound to

1578236609
dingenskirchen
const fun = struct { fn call(i: i32) void { std.debug.warn("{}", i); } }.call; fun(42)

1578236611
dingenskirchen
should work

1578236632
dingenskirchen
â€¦apart from me forgetting the list literal around the warn arguments :p

1578236865
nofmal
dingenskirchen: thanks for the tip

1578236928
nofmal
i was using labeled block to return different values, hoping it'd somehow work like an anon function, but nope

1578238111
Dominic[m]
This looks very obviously wrong to me?

1578239563
Snektron
hm

1578239583
Snektron
Creating an ArrayList with T a union(enum) i get a broken module

1578240413
Dominic[m]
Can I get a clue as to why this segfaults? I tried gdb but the 0x0 wasn't very useful.

1578240568
Dominic[m]


1578241190
via
is there a way to get `zig test` to only try compiling/running whats in `test` blocks? it seems to also be trying to compile exported functions

1578241331
via
use case is trying to write a few unit tests in a file that works with lots of c code on an embedded target, the full source won't compile/link on the hosted target

1578247419
via
i am really struggling to get a C []char* style array of strings to work when calling a C function

1578247423
via


1578247446
Snektron
via, you could extract the non-specific code to a different file and only run the tests in that file

1578247449
via
i've tried a variety of things, but in gdb most of the parameters to that C function are mangled. the usb_strings symbol appears to be right in the final executable

1578247467
via
e.g. it looks like just a list of addresses to what looks like the right strings

1578247511
via
but yeah, strings is getting passed in as a null ptr

1578247535
Snektron
i think usb_strigns should be a [_][*:0]const u8

1578247549
andrewrk
Dominic[m], the evented-based file system I/O bitrotted with the new async/await implementation, and is ready for a rewrite now that new async/await is here

1578247599
via
Snektron: i've tried that, but even if the data structure is wrong, its that a null is getting passed to the function instead of the address of usb_strings

1578247633
andrewrk
Dominic[m], well, not a rewrite, just test coverage

1578247709
via
its almost like there's a calling convention issue, but i've built the c library with the same target with clang

1578249025
DrDeano
I am trying to run my zig build test, but im getting a integer overflow in the std.os.linux.vdso.lookup

1578249077
andrewrk
DrDeano, WSL?

1578249087
DrDeano
yes

1578249092
andrewrk


1578249121
DrDeano
i see

1578249134
DrDeano
thank :)

1578252243
fengb
andrewrk: I'm running into issues where I recursively call format()

1578252267
fengb
Since this isn't "true" recursion as it's a different generic type, this should theoretically be okay

1578252331
Dominic[m]
Where last_vol is a ?u32, are there plans to make something .like this compile? `if (last_vol == null or new_vol != last_vol) {`

1578252526
Dominic[m]
Looks like last_vol.? is the trick :)

1578252919
andrewrk
fengb, yes

1578252929
andrewrk
agreed

1578253015
fengb
The codepath is pretty complex so I haven't gotten a reduced case yet :/

1578253069
TheLemonMan
yo andrewrk, what do you think about letting the warnings from clang bubble up to the Zig side?

1578253144
andrewrk
TheLemonMan, the "unused args" ones from assembly?

1578253187
TheLemonMan
the ones from cimport/translate-c

1578253343
andrewrk
ok so clang is giving us warnings, that is information we need to communicate to the programmer

1578253360
andrewrk
I don't want clang to be in charge of stderr/stdout however

1578253384
andrewrk
one thing we can do is put them inline with the translated code as comments

1578253446
andrewrk
the problem I have with warnings is that if you repeat an operation, you don't get warnings the second time, and now you have people clearing the cache to get warnings again

1578253458
andrewrk
warnings are inherently incompatible with incremental compilation

1578253630
TheLemonMan
yeah it's a bit of a mess if you take everything into account

1578253658
andrewrk
one idea might be to have warnings prevent a c object from getting cached...

1578253952
andrewrk
if anyone wants a fun contributor friendly task, try adding as much test coverage to translate-c as you can with the new run-translated-c test harness

1578253967
andrewrk


1578254075
andrewrk
TheLemonMan, I'll work on merging callconv now

1578256413
TheLemonMan
oh that's neat, it should be pretty easy to review/rebase

1578256460
TheLemonMan
there's also #3955 if you're after some lightweight PRs :)

1578256789
andrewrk
looking

1578256922
andrewrk
oh I wanted to look into this a little bit, there were some more edge cases I wanted to consider

1578258997
Snektron
Dominic: , you can achieve that with `if (last_vol == null or new_vol != last_vol.?)`

1578259019
Snektron
Assumed new_vol is not optional

1578259507
Dominic[m]
It is not, thanks!

1578259543
Dominic[m]
I say this every week I'm here, but I have a lot of fun using Zig. Thank you!

1578259643
andrewrk
glad you can get past the instability & churn :)

1578259960
via
andrewrk: well, i did write a test for the packed struct thing that verified the sizeof output, but ran into

1578261946
andrewrk
via, ah, yes that C ABI issue is annoying

1578262058
andrewrk
lunamn, your dns PR is almost next in the queue :)

1578263510
Snektron
if a function taking var receives an anonymous array literal

1578263515
Snektron
Is it a struct or an array?

1578263597
hryx
Snektron: I think it just depends on how the var parameter is used inside the function

1578263624
hryx
compare the examples in

1578263631
andrewrk
Snektron, the type of an anonymous list literal is a struct

1578263656
andrewrk
well, it's a tuple. a tuple is a struct but also lets you do element indexing and `.len` field

1578263673
Snektron
Alright, thanks

1578263689
andrewrk
according to type info, it will be a struct with a "is_tuple: bool" set to true

1578263701
andrewrk
or equivalent

1578263711
hryx
oh, so then .{1, 2, 3} is just a struct with fields called @"1", @"2", and @"3" ?

1578263772
andrewrk
in this case the fields are {comptime @"0": comptime_int = 1, comptime @"1": comptime_int = 2, comptime @"2": comptime_int = 3}

1578263807
andrewrk
this is a zero bit type

1578263815
andrewrk
and the value of the fields cannot be changed

1578263915
TheLemonMan
andrewrk, can you merge #4078? I possibly need it to fix some problems uncovered by the new testing harness

1578263972
andrewrk
done

1578264020
TheLemonMan
thank you, juggling all those PRs open is getting quite confusing heh

1578264173
andrewrk
ha yeah I'll bet. you've been producing them faster than I can merge them

1578264184
andrewrk
I wanted to get that new test harness done

1578264227
andrewrk
focusing on callconv next

1578267748
daurnimator
andrewrk: I think that tuple->struct conversion is a weird place to introduce int-to-string conversion.... very javascript-esque

1578267860
plumm
daurnimator: example?

1578267901
daurnimator
`mytuple[someinteger]` --> this essentially has to do `@field(mytuple, intToString(someinteger))`

1578267946
Snektron
the field name is not related to the value though

1578268001
daurnimator
Snektron: ??

1578268058
Snektron
there is no conversion in the field names, its just a placeholder name as far as i understand

1578268299
andrewrk
that's correct

