1583625698
andrewrk
metaleap, isn't that the same concept?

1583625728
jaredmm
InvalidUtf8,

1583625735
andrewrk
metaleap, I'm sorry for breaking your code

1583625770
andrewrk
jaredmm, I see the master branch problem, working on it

1583625792
jaredmm
Yeah, apparently copypaste has forsaken me. Was trying to ask about it.

1583626088
metaleap
no prob, just a matter of rehabitualizing i guess. i think there's a danger for newcomers to easily take to automatically/habitually associating any occurrences of OutOfMemory with "couldnt alloc heap/ram from OS". as a result a pattern evolves where all those are just bubbled up to the top-level main. "what does this or that return, ah just oom, give it a try-and-forget then". but by using the error name for not-merely-allocator.alloc-failures, maybe

1583626088
metaleap
such "convenient-but-ultimately-sloppy" mind habits are broken early and maybe thats a good thing. so i'm fine if it stay such for now, around 1.0 intro/langref docs can probably make a lil side-note of such things in appropriate place

1583626177
andrewrk
metaleap, with for example std.heap.FixedBufferAllocator it's pretty similar - you have a slice and when you run out it returns error.OutOfMemory

1583626220
andrewrk
errors are contextual; they can mean different things coming from different functions

1583626583
metaleap
yeah i get the reasoning, i can buy that =)

1583628872
jaredmm
Is there any documentation on the expected scope of translate-c? The docs mention compatible macros. Anything that can be done within what context?

1583633178
pixelherodev
Anyone able to @cImport X11?

1583633603
pixelherodev
Think there might still be a bug or two

1583633617
pixelherodev
Going to try updating first though, as my Zig is a bit out of date

1583633707
pixelherodev
Problem is I think it needs C varargs and some complex macros / compiler feature detection stuffs

1583634536
LakeByTheWoods
Yeah, currently RootWindow fails. You can do it manually with `const root: Window = (opaquePtrCast(_XPrivDisplay, display).*.screens[@intCast(usize, visual_info.*.screen)]).root;`

1583634628
LakeByTheWoods
See issue #4328

1583634676
LakeByTheWoods
Oh, and opaquePtrCast is just `return @ptrCast(To, @alignCast(@alignOf(To.Child), from));`

1583634866
pixelherodev
Thanks for the info; I think I'll try to spend tonight fixing that

1583635303
pixelherodev
Idea regarding the backend debate from a while back: self-hosted should build backends on-demand the same way we build libcs

1583635316
pixelherodev
That way, only native compilation needs to be built-in, and cross-compiled targets can be generated on-demand

1583635342
pixelherodev
Practical too: can be generated as either shared libraries or tiny self-contained static executables and either dlopen()ed or exec()ed

1583635362
pixelherodev
Requires more modularity than is currently present, but it's definitely feasible

1583636859
pixelherodev
Huh, that translate-c bug

1583636864
pixelherodev
Having entirely different ones now :P

1583636883
pixelherodev
For instance, translating an array of strings gives a compile error

1583638206
pixelherodev
Ah, type is translated wrong

1583638225
pixelherodev
As `[*c][*c]const u8` instead of `[3][*c]const u8`

1583638483
pixelherodev
Of course, knowing that isn't going to be enough to quickly fix the bug in source I've never read :P

1583638509
pixelherodev
Given that I actually want to work on this project, I'm going to just build Sokol as C source and use extern to build the wrapper for now

1583638524
pixelherodev
Then later, switch the wrapper to be a @cImport when either I have time to fix the bugs or someone else fixes them

1583639788
pixelherodev
How do you set musl as libc when using build.zig?

1583639968
pixelherodev
`/usr/local/lib/zig/libc/glibc/sysdeps/unix/sysv/linux/include/bits/syscall.h:3:10: fatal error: 'misc/bits/syscall.h' file not found`

1583639973
pixelherodev
When compiling with libc :(

1583639998
jwh
looks like it wants musl srf

1583640000
jwh
src*

1583640040
jwh
oh hm actually no, thats not the correct path either

1583640173
pixelherodev
(the error is unrelated to building with musl; can't build with glibc on Zig trunk :( )

1583640187
jwh
o

1583640216
jwh
well bits/ is glibc, is it not honouring your libc choice?

1583640222
pixelherodev
I didn't choose one

1583640226
jwh
o

1583640228
pixelherodev
Not sure how to set to musl

1583640231
pixelherodev
Just did linkLibC()

1583640249
jwh
I can't build atm, haven't switched to trunk

1583640268
jwh
zig release disapproves of llvm10 heh

1583640397
pixelherodev
Going to do a bisect, have a hunch I know what the problem is

1583640457
pixelherodev
"Thank you Microsoft" :P nice commit message

1583640465
jwh
lol

1583640559
jwh
CMake Error at cmake/Findllvm.cmake:49 (message):

1583640559
jwh
LLVM is missing target AArch64.  Zig requires LLVM to be built with all

1583640559
jwh
default targets enabled.

1583640560
jwh
aw

1583640578
pixelherodev
Yeah, that's what I was mentioning earlier

1583640587
pixelherodev
Ideally, it shouldn't need all targets built in to LLVM

1583640596
jwh
I changed our packaging to only build native targets a while ago

1583640607
pixelherodev
You can fix it locally

1583640608
jwh
since xc is not worth the effort

1583640611
pixelherodev
Just disable the error message

1583640625
pixelherodev
Zig xc takes no effort though, that's kinda the point :P

1583640633
jwh
well sure

1583640648
jwh
but things you typically xc (c, c++) do

1583640650
pixelherodev
Unfortunately, this can't really be fixed for stage1 because LLVM is much much harder to compile on-demand than e.g. glibc

1583640654
pixelherodev
True

1583640679
jwh
hm

1583640690
jwh
it can still use an already installed llvm right

1583640698
pixelherodev
Yeah

1583640700
pixelherodev
Just point it at it

1583640707
jwh
well its in /usr, so

1583640743
jwh
doesn't really have a choice, its llvm or nothing heh

1583640762
pixelherodev
For

1583640772
jwh
well I mean, thats all thats on the system

1583640781
jwh
theres no (lib)gcc

1583640800
jwh
or binutils for that matter

1583640856
pixelherodev
No, I mean; as a compiler backend, LLVM is the only option for Zig for now, but the goal is to change that eventually

1583640866
jwh
but why

1583640879
jwh
even with all the shortcomings, the llvm suite is still nicer

1583640904
jwh
[165/167] cd /root/m/devel/zig/src/zig...e-gen-h --bundle-compiler-rt -fPIC -lc

1583640904
jwh
FAILED: CMakeFiles/zig_build_libstage2 libzigstage2.a

1583640914
jwh
the output is not useful

1583640914
jwh
hm

1583640954
pixelherodev
Not to GCC

1583640957
pixelherodev
To a self-hosted backend

1583640958
jwh
is it supposed to build in a pure-llvm environment?

1583640962
pixelherodev
Should

1583640964
pixelherodev
I think

1583641012
jwh
unless I'm missing something I need to bootstrap it

1583641116
jwh
oh its oom

1583641119
jwh
helpful

1583641203
pixelherodev
Yeah, the glibc thing is a regression

1583641210
pixelherodev
Bisecting now, ~6 steps left

1583641318
pixelherodev
Hmm... unrelated bug: this is in C source being called externally: `assert(src && dst && (max_len > 0))` passes, but *src gives: segfault at 0x0

1583641420
pixelherodev
Ah, the address reported was wrong.

1583641458
jwh
oh hm, this appears to have worked

1583641472
jwh
good good, will just have to wait until its released now

1583641502
jwh
moved to llvm10 and broke a whole load of projects that haven't bumped yet, patched rust but it seems pointless and we may as well just wait

1583641621
jwh
spoke to soon :(

1583641625
jwh
Unable to determine path to libstdc++.a

1583641626
jwh
sigh

1583641631
wilsonk
pixelherodev: are you still having trouble with that missing  misc/bits/syscall.h problem

1583641637
jwh
whats with this default assumption thing, rust does the same

1583641646
jwh
detect whats available

1583641680
jwh
also failing during install after successfully building

1583641734
pixelherodev
wilsonk, bisecting; it's a problem on trunk but not on certain older commits

1583641747
pixelherodev
It's a recent regression AFAICT

1583641789
wilsonk
andrew told me to 'rm -rf build/lib/something or other' and that fixed it...one sec let me see if I can find the command

1583641823
pixelherodev
wilsonk, this was from a fresh build

1583641851
tdeo
shouldn't "dest.ptr must be <= src.ptr" in the std.mem.copy docs have an "if the memory regions overlap" after it?

1583641875
pixelherodev
I remember having a similar question at one point

1583641935
jwh
another day maybe

1583641941
jwh
when these issues are fixed

1583641964
wilsonk
pixelherodev: fresh build from master today? Seems really strange that the exact same error would happen...let me rebuild a fresh one here

1583642016
pixelherodev
Hmm

1583642019
pixelherodev
I think it's fine now

1583642054
wilsonk
ok, cool

1583642063
pixelherodev
`ninja -j4 && rm lib -rf && ninja install && sudo cp bin/zig /usr/local/bin && sudo rsync lib/zig/ /usr/local/lib/zig/ -av --delete` seems adequate

1583642087
pixelherodev
And avoids the need for a clean build, improving build times

1583642114
jwh
ok one last go before I stash it

1583642131
jwh
what do I need to pass to cmake to tell zig to stop being silly

1583642136
pixelherodev
Only problem now is that a structure seems to be being called wrong...

1583642142
pixelherodev
jwh, what's the issue?

1583642152
jwh
well, two-fold

1583642165
jwh
first, it does compiling/linking during install

1583642176
jwh
but the real issue is it assumes libstdc++

1583642183
pixelherodev
I declared an extern func with the wrong signature :P

1583642187
jwh
after linking to -lc++

1583642194
wilsonk
lol, nice pixelherodev

1583642213
wilsonk
jwh: which os

1583642216
pixelherodev
jwh,

1583642217
jwh
notably:

1583642218
jwh
-- Installing: /usr/lib

1583642218
jwh
Unable to determine path to libstdc++.a

1583642239
jwh
wilsonk: abyss, pure llvm distro, no gcc

1583642290
jwh
zig0 is linked to libc++ correctly, but during install it appears to try again

1583642325
wilsonk
oh, strange

1583642350
jwh
llvm10 branch, coz we bumped to 10.0.0-rc already

1583642356
pixelherodev
Appears to be a zig thing, not CMake

1583642362
jwh
yeah

1583642374
jwh
I can't see anything relevant in cmake cache

1583642383
pixelherodev
stdc++ doesn't appear in any install() in CMakeLists.txt, but there's an invocation to `zig` to perform installation

1583642385
jwh
so it doesn't look like I can influence it with args

1583642411
pixelherodev
Found it

1583642413
pixelherodev
build.zig

1583642415
pixelherodev
IIUC

1583642419
jwh
yeah

1583642441
jwh
just found it

1583642457
jwh
sadface

1583642471
jwh
kind of really annoying assumptions that rust makes which made it very hard to bootstrap

1583642476
pixelherodev
Just change that to whatever it is locally for now, and open an issue so it can be fixed properly upstream

1583642496
jwh
it should probably be detected during configure

1583642928
jwh
ok cool, issue opened

1583643061
jwh
it didn't show up before, as we used to have compat for libgcc and libstdc++, but thats gone now

1583649032
LakeByTheWoods
`(@typeInfo(@TypeOf(0)) == .Int)` is false. So we need another `if` to check for comptime_int and return an optional pointer...

1583649194
LakeByTheWoods
Kind puts into perspective how much of a massive sledge-hammer c-style casting is.

1583649201
LakeByTheWoods
*Kind of

1583650017
daurnimator
LakeByTheWoods: I was thinking that we might get some utility functions in std that translate-c output could call out to

1583652392
LakeByTheWoods
I wouldn't object to such a thing.

1583652714
daurnimator
Anyone have thoughts on creating a `fs.Path` type that would be the native path type on each platform?

1583652719
daurnimator
(e.g. on windows, would be a UNICODE_STRING)

1583653070
redj
gui styling, composing and scripting using zig -- how to? ;-)

1583653150
pixelherodev
I'm using Sokol for GUI

1583653156
pixelherodev
I've used Lua for scripting in the past

1583653163
pixelherodev
I know Andrew has used SDL w/ Zig

1583653186
redj
say I want to implement style sheets for my gui

1583653196
redj
as in css for native gui

1583653234
redj
I'm just really curious to see what andrewrk comes up for gui

1583653245
redj
with*

1583653255
daurnimator
redj: have a look at arcan

1583653409
redj
daurnimator: hehe, I do have

1583661605
karelb
hey. I am playing with zig for 1st time, just writing hello world. I write, on master, `var one_plus_one = 1 + 1;warn("1 + 1 = {}\n", .{one_plus_one});` - it fails with ` variable of type 'comptime_int' must be const or comptime`. That is expected? :)

1583661662
mq32
hey karelb

1583661664
mq32
yes, this is expected

1583661670
karelb
ok :)  thx

1583661682
karelb
I will ask dumb questions I guess.... I go through the docs now :)

1583661701
mq32
literals in zig have a special type "comptime_int" or "comptime_float"

1583661714
mq32
these are special as they are "just any value allowed"

1583661725
mq32
so you could do: "var x: u8 = 256;"

1583661727
karelb
:+1:

1583661733
karelb
oh this isn't slack. nvm

1583661738
mq32
and the compiler will tell you that 256 does not fit into u8

1583661751
mq32
but you can do "256 - 1" and it will fit then

1583661765
mq32
if you need a typed literal, you have to cast that with @as()

1583661769
karelb
got it

1583661770
karelb
thx

1583661787
mq32
oh, and another thing: you may not store a comptime_int or comptime_float in a var, only in const values

1583662241
metaleap
it's basically what I'd call a quirk that "const" can be comptime without needing to declare it so but "var" if assigned a comptime_foo value must be explicitly declared "comptime var". even though then of course you can still use it in runtime exprs

1583668743
Barabas
Hi, is there a way to fail a test without aborting? I'd like to run all my tests, regardless of whether some fail or not.

1583671647
alexnask_
@Barabas, I don't think so (unless you manually modify the test runner source code but this is obviously not recommended)

1583672263
Barabas
Hmm too bad, would be nice to have that option.

1583683503
watzon
daurnimator 🥳

1583683516
watzon
What's your twitch username?

1583683652
fengb


1583690941
nrdmn
hello! I'm having some trouble with the .{} tuple syntax. I'd like to create a tuple type and then declare variables of that type and assign values to it.

1583690958
nrdmn


1583690994
nrdmn
Is it possible to do the assignment without specifying the names of the tuple members as in the third example?

1583691107
fengb
We can’t capture the tuple type yet

1583691159
nrdmn
oh, okay.

1583691171
fengb


1583691245
nrdmn
thanks!

1583691253
fengb
Also welcome back!

1583691289
nrdmn
yeah I'm glad to be back :)

1583691339
TheLemonMan
I've spent the past few hours getting Zig to run (again) on NetBSD, too bad there's no CI service for that

1583691361
mikdusan
how's it comparing to freebsd?

1583691405
TheLemonMan
FreeBSD feels more like Linux API-wise

1583691440
mikdusan
it's been ages since I touched netbsd. iirc, it was a "support every arch" deal and a slow mover.

1583691471
TheLemonMan
the Debian of the BSD world heh

1583691482
mikdusan
+1

1583691537
mikdusan
this srht page mentions looking for netbsd help. so it's on their radar?

1583691538
mikdusan


1583691541
alexnask_
fengb, nrdmn, I'm planning on adding the propsoed syntax this week (along with improvements to tuples like slicing, support for if and switch expressions insede etc)

1583691562
alexnask
I will try at least :P

1583691586
TheLemonMan
it was added and then removed :\ but they support OpenBSD... that may be interesting to support

1583691665
nrdmn
alexnask: nice

1583691754
TheLemonMan
alexnask, are you still on WSL1 ?

1583691761
alexnask
Yes

1583691793
TheLemonMan
can you reproduce the problem in #4689 ?

1583691816
alexnask
Sure I will check it out

1583691897
TheLemonMan
gah, the ticket count skyrocketed again past 1000

1583692391
alexnask
A fair amount are proposals

1583692438
andrewrk
and most proposals will be rejected 😈

1583692517
alexnask
Ofc :)

1583692538
alexnask
Glad you approved the tuple slicing though, I think it will be really useful ^^

1583692656
andrewrk
yes I think it's consistent with the other design decisions such as indexing

1583692674
andrewrk
you might say it makes the language smaller to be consistent in this way

1583692740
TheLemonMan
andrewrk, is `zig targets | jq .native` supposed to match what's in `zig builtins` ?

1583692768
nrdmn
huh, tuple indexing is possible?

1583692855
alexnask
Yes, with comptime indexes

1583692886
andrewrk
TheLemonMan, yes

1583692904
TheLemonMan
oh no

1583692923
andrewrk
oh no? it's just a missing call to the detection code rigth?

1583692962
TheLemonMan
*shrug*, I assumed it was already wired up correctly

1583693007
andrewrk
I thought it was too, but there was a lot of churn there recently, i probably made a mistake

1583693046
andrewrk
I also noticed an accidental hard coded " (native)" string yesterday

1583693370
nrdmn
is there an |= operator for bools?

1583693410
alexnask
TheLemonMan, I have basically the same output as Rocknest (with a different glibc version)

1583693414
alexnask


1583693470
alexnask
nrdmn, yes (

1583693554
alexnask
Ah nvm actually it's only valid for integer types not bool

1583693620
fengb
Should switch to u1 🙃

1583695691
TheLemonMan
andrewrk, should `var x: ?T = T{}` (where T is zero-sized) initialize `x` with null?

1583695714
TheLemonMan
eh, `var x: ?*T = &T{}`

1583696128
marijnfs
what is the right practice when using structs that are inited, should I keep them by value or referencE?

1583696143
marijnfs
like a std.Buffer.init

1583696227
shakesoda
zig passes by reference automatically when it is sensible

1583696292
shakesoda
so unless you specifically need to pass by pointer don't worry about it

1583696375
shakesoda
marijnfs:

1583696419
marijnfs
shakesoda: thanks, i'll read that

1583696443
shakesoda
"When [struct, union, array] types are passed as parameters, Zig may choose to copy and pass by value, or pass by reference, whichever way Zig decides will be faster."

1583696457
marijnfs
I'm confused by why my code doesn't work, I'm trying to wrap some stuff in a struct.

1583696473
shakesoda
if you're trying to modify it in the function, pass by pointer.

1583696578
metaleap
marijnfs: the usual stdlib init funcs like in Buffer ArrayList AutoHashMap etc dont return a pointer so they can return their local value they just initialized. if they were to return a pointer, it would have to be to their local stack space but shouldnt! as it expires upon return. often you also dont want that sort of structure to be placed on the heap and if you did you can do it yourself afterwards.

1583696612
shakesoda
oh, am I talking about the wrong thing

1583696629
metaleap
so assume a copy and you can pass it around via pointer afterwards for the lifetime of the "obj". or place it on the heap for much longer lived such instances

1583696648
marijnfs
metaleap: yeah i figured things like a Buffer can be passed by value, and properly keep their underlying data in place

1583696662
metaleap
what, their "underlying" data lives elsewhere

1583696687
metaleap
thats why they take an allocator for their inner slices

1583696737
metaleap
assume an ArrayList to be the sizeOf: (1x usize) + (1x slice (aka 2x usize)) + (1x pointer-to-allocator (aka 1x usize))

1583696773
metaleap
thats what init returns as "a copy" (potentially, or ref behind the scenes unbeknownst to the caller, depending on inliner / optimizer too i'd guess)

1583696817
metaleap
ah yeah now i got your comment, yah ur right

1583696877
andrewrk
TheLemonMan, `var x: ?*T = &T{};` should result in a non-null x

1583696885
andrewrk
regardless of @sizeOf(T)

1583697149
TheLemonMan
that doesn't play that well with how ?*T is represented in memory as a zero-sized value has no address

1583697708
marijnfs
Why doesn't this work:

1583697732
marijnfs
I try two ways of serializing, in direct code it works, in the struct example it segfaults

1583698795
alexnask
@marijnfs, In init you are constructing a StdSerializer on the stack and keeping a pointer to it

1583698827
alexnask
You should just have a StdSerializer field instead of a *StdSerializer field

1583698870
alexnask
And return Serializer instead of *Serializer in init()

1583699568
marijnfs
alexnask: ok I was trying that, but the StdSerializer in this case gives issues when calling its' serialize function

1583699575
marijnfs
says it now discards const qualified

1583699595
alexnask
Did you do `const serializer = ...;` ?

1583699671
alexnask
marijnfs, Check this out:

1583699695
marijnfs
alexnask: no I assign it to a member, wouldn't know where to put a consts

1583699719
alexnask
Right I understand now.

1583699750
alexnask
Basically a by value parameter is const, so you were passing self by value in serialize and couldnt call self.serializer.serialize

1583699786
alexnask
The correct thing to do is only pass self by pointer in functions that will modify the state

1583699797
marijnfs
alexnask: ok so I can use values, but can use the self: *Something in the functions

1583699806
alexnask
Exactly

1583699839
alexnask
You rarely want to return or store pointers (unless they are explicitly heap allocated or in some other rare cases)

1583699873
marijnfs
and why was the StdSerializer on the stack previously?

1583699892
marijnfs
Ok now because it's returned by value, llvm doesn't remove it?

1583699899
alexnask
Well, you were intializing it like `.serializer = &StdSerializer.init(...)`

1583699919
alexnask
This implicitly makes a StdSerializer variable on the stack and returns the address to it

1583699926
pixelherodev
Unless you use an allocator, it's going to be on the stack

1583699950
pixelherodev
And once you leave the scope in which the variable is created, it ceases to exist

1583699957
pixelherodev
So you're storing the address of a variable that no longer exists

1583700062
marijnfs
ah I see

1583700152
frett27_
Hi, i can't find any efforts for coding antlr4 runtime for parsing ? any one know someone started somthing ? it's always more comfortable to join before starting a new effort

1583700169
frett27_
any pointer ?

1583700186
BaroqueLarouche
I haven't seen any

1583700217
marijnfs
alexnask: I still have an issue with that code though. If I take your code and run it I still get a segfault:O

1583700240
alexnask
I should have tested it let me see :p

1583700243
marijnfs
haha

1583700250
marijnfs
might be my pc who knows

1583700254
pixelherodev
Doubtful

1583700288
pixelherodev
The only two times I've seen segfaults were a) coding mistakes and b) OOM (on a laptop with 2GB of RAM) causing random crashes

1583700301
nrdmn
the alignment of an extern struct should depend entirely on its first member, right?

1583700453
TheLemonMan
the most aligned one

1583700592
alexnask
marijnfs, Same issue really, just didnt catch it, let me correct the code

1583700786
marijnfs
alexnask: maybe the var buffered_stream is local and gets removed?

1583700997
alexnask


1583701031
alexnask
Pretty much, all the fields here are constructed with pointers to other fields

1583701207
andrewrk
TheLemonMan, a ?*void in memory is equivalent to a bool

1583701658
marijnfs_
Nice, this is still kinda confusing, there must be an easier way to define such functions?

1583702099
marijnfs_
I would still think then this should work:

1583702130
marijnfs_
Even though in init(), the Serializer is on stack, it should be returned by value. The fields shouldn't get destroyed or something right?

1583702483
jaredmm
pub inline fn SDL_LoadBMP(file: var) @TypeOf(SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1))

1583702492
jaredmm
"unable to evaluate constant expression"

1583702533
jaredmm
What should that be translated as? It works if the return type is explicitly defined.

1583702617
jaredmm
Maybe the correct question would be "is that intentional in translate-c or a bug"

1583702724
jaredmm
#4328 marks it as a stage1 bug, but not a translate-c issue.

1583702915
jaredmm
Based on what I read there, it sounds like that is the intended translation (along with some of the other suggestions I saw for how Zig code should be structured after translation).

1583705677
TheLemonMan
andrewrk, #4614 is also ready for review

1583705715
Snektron
frett27_: i realized that it can probably be done pretty neatly with Zig, but i haven't worked anything out besides that

1583705737
Snektron
Would be nice to specify a grammer as a comptime string, and be able to generate a parser from that

1583705755
Snektron
Definitely beats boost.spirit

1583705852
fengb
jaredmm: file isn’t comptime so it can’t be passed around like a comptime var

1583705868
fengb
It looks like a macro expansion gone too far

1583705902
fengb
At comptime, the best you’d be able to do is @TypeOf(file) and pass that extracted type around

1583706065
fengb
Oh I guess it’s marked as a bug so maybe it’s fixable

1583706309
metaleap
Snektron: "Would be nice to specify a grammer as a comptime string, and be able to generate a parser from that" --- or even just a comptime structure. then you can express the parser for that "comptime string" also in it, and can have it both ways

1583706357
Snektron
I wrote a small thing for Go like that when i was learning it

1583706387
Snektron
it was basically a series of function (pointers), each representing a parse rule

1583706408
metaleap
with a codegen at the receiving end i guess (written too many go codegens myself =)

1583706472
Snektron
No it's really simple

1583706516
TheLemonMan
andrewrk, is `noasync a.b().c()` supposed to be correctly parsed? right now it's rejected as that's a mix of SuffixOp and FnCallArguments

1583706537
Snektron
a rule is a function, and combinators are functions that accept a rule and return another

1583706591
Snektron
the rule itself is a function that accepts some parsing context and returns a bool, whether parsing was successful

1583706639
Snektron
calling other rules happens through the context (which also has the parse functions like peek/consume). When a rule returns false, the input position gets restored

1583706648
metaleap
ah like that, thought you were thinking in terms of "parser generator from <some_grammar_def>"

1583706649
Snektron
i can't imagine it being very efficient

1583706651
Snektron
but it works

1583706669
Snektron
Well the grammar is essentially the combinators and rules

1583706675
metaleap
yeah true

1583706788
LakeByTheWoods
Anyone know what breakage #4569 (align-casts and grouping for c-casts) did on master?

1583706841
andrewrk
TheLemonMan, hmmm. currently it's attached to a function call. But I think it may be better to behave more like `comptime` which takes an expression, and makes a new scope in which the expression is evaluated, and within that scope fn calls are assumed to be non-suspending

1583706847
Snektron
The advantage of using structs to specify the grammer is that you can more easily traverse the structure of it. My go thingy was pretty much limited to LL(k), but with structs you can generate code from the grammar however you'd like

1583706865
andrewrk
TheLemonMan, that's a language change that I just proposed just now, but I'm pretty sure it's a good idea. I'll open a formal proposal

1583706896
andrewrk
that would answer your question because it would be parsed as  `a.b().c()` being an expression in which all fn calls are noasync

1583706917
TheLemonMan
yeah, that makes sense

1583706997
Snektron
is there a quick way to jump to a github # or do you need to manually figure out if its an issue or a pr first?

1583707034
andrewrk
how I do it: I've looked at literally every single issue and so it's all cached in firefox's address bar

1583707047
Snektron
ah, thats how i look up Zig source

1583707075
andrewrk
github redirects issues/prs to each other if you get the number right but the urls mixed up

1583707133
Snektron
oh, i tried that but i missspelt issues

1583707146
Snektron
that works good enough

1583707490
jaredmm
Yeah, they're linked, so if you go to issues and it is a PR, it redirects you.

1583707510
jaredmm
fengb: right, I wasn't sure what the direction to fix it should be.

1583707875
andrewrk
TheLemonMan, I think you're correct on #4614, and the other code I was looking at is wrong

1583707923
andrewrk
I must have added that reset_result() to ir_build_cast_result_loc and then missed deleting it at one or more callsites

1583707985
TheLemonMan
that's to make sure the slot is really reset heh

1583708004
andrewrk
lol

1583708021
andrewrk
spill_harder

1583708051
TheLemonMan
hah, yeah like that

1583708165
alexnask
Comptime regex's also would be pretty useful and fun to implement

1583708188
alexnask
Like, compiling an efficient matcher based on a comptime matching string

1583708254
alexnask
Pretty sure D does this in their standard library

1583708302
andrewrk
yeah it's a good use case. will require a more resource efficient, better-performing, robust implementation of zig

1583708325
TheLemonMan
D hit a huge roadblock due to the inefficient CTFE

1583708356
alexnask
Yes for sure

1583708367
andrewrk
I think we should be able to accomplish CPython perf for CTFE in zig

1583708378
TheLemonMan
the old one was an AST-walking engine, the new one is a faster bytecode-based one

1583708396
TheLemonMan
the whole dmd compiler is really well-made

1583708400
alexnask
Is the plan for stage2 to implement some kind of JIT or go ahead with a much more efficient interpeter?

1583708410
andrewrk
not planning to do jit in stage2

1583708544
andrewrk
some of the challenges we face are: guaranteed caching of functions when there are no comptime side effects (e.g. ArrayList(i32)), and code generation via constructs such as inline while

1583708612
TheLemonMan
one suggestion for the stage2 is to "split" the compiler in several small passes, the current "monolithic" two-pass design has some limitations

1583708641
andrewrk
I'll gladly take such suggestions. what would such smaller passes do?

1583708671
andrewrk
btw the recent splitting into IrInstSrc and IrInstGen did open up the possibility of more passes even in stage1

1583708746
TheLemonMan
you go from AST -> IR -> IR -> IR ... -> Codegen, right now we go straight from AST to IR and eg. we lose every info about the "structure" of a while construct as that's directly exploded into a scope + branches + instructions

1583708798
TheLemonMan
with a multi-pass design we can perform several optimizations on a rich and typed AST

1583708917
pixelherodev
JIT would definitely improve performance for comptime, but would

1583708959
pixelherodev
But whether or not a JIT is used shouldn't matter for anything besides maintainability and performance. Interpreters are simpler but slower, JITs are faster but more complex

1583708994
pixelherodev
However, JITs also have startup overhead, so for most of the comptime code I've seen the performance improvement of a JIT vs a good interpreter would be negligible

1583709101
pixelherodev
I'd definitely argue

1583710720
andrewrk
alexnask, what do you think about the use case of the Allocator interface giving a comptime alignment parameter to implementors of shrink and realloc?

1583710790
alexnask
I don't think it's possible to implement currently, correct me if I'm wrong

1583710815
andrewrk
that's a use case I was considering when thinking about possible language features

1583710829
andrewrk
about a possible language feature for interface

1583710994
alexnask
I'm struggling to think about how such a design would work. If the implementation type does not know about the callsites of the virtual functions

1583711030
alexnask
It may in principle error or generate incorrect code for some set of comptime parameters

1583711042
alexnask
Unless we are not talking about runtime polymorphism anymore

1583711117
andrewrk
I'm also thinking about inferred error sets for interface functions

1583711151
alexnask
That would be nice. I guess if we are guaranteed to know about every implementation type at comptime

1583711180
alexnask
It is possible to infer error sets and check the implementation functions

1583711190
andrewrk
I believe we do have access to that information

1583711382
alexnask
I guess one issue with such an approach is that the amount of function pointers in the vtable (or whatever mechanism is used for the dispatch) then becomes dependent on the combinations of comptime parameters at the callsites

1583711681
pixelherodev
If every instance is comptime known, is any method of dispatch even needed?

1583711717
alexnask
Also a language feature would probably need to provide enough control (e.g. allow you to combine a vtable pointer with any kind of storage of the implementation objects, not embed a vtable pointer in an object or force you to use non owning fat pointers)

1583711765
alexnask
Otherwise people will just roll their own implementations

