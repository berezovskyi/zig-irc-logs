1582329616
mq32
Barabas: problem with a lot of game code is that it's not the logic that has problems

1582329620
mq32
but the fine tuning of values

1582329645
Barabas
things usually don't crash because of fine tuning of values :P

1582329645
companion_cube
if you write a DB engine, same, what would you test?

1582329654
mq32
a unit/integration test could check "if i hold down W the character will eventually move forward in an empty level"

1582329662
companion_cube
you can have end-to-end tests, maybe, but

1582329668
mq32
but i can never test

1582329671
mq32
there are too many

1582329678
Barabas
What do you mean? Database software?

1582329682
companion_cube
yes

1582329695
Barabas
Loads to tests there. Writing and reading data from disk for example.

1582329696
mq32
you can write at least some tests for DB engines that are useful

1582329709
nepugia
I'd think the best way to test whether a video game works is to ask the target audience whether it is playable

1582329709
companion_cube
I doubt you'd write unit tests

1582329722
companion_cube
it's not like you have a small piece of code "load stuff from disk"

1582329725
companion_cube
it's all over the place

1582329729
mq32
something like "a write followed by a read should return the value written"

1582329790
fengb


1582329842
fengb


1582329878
Barabas
I'd split those in three tests with some better name, but ok ^^

1582329907
companion_cube
fengb: that's a lot of code to write… :D

1582329923
Barabas
Here's some tests for postgres

1582329927
companion_cube
if I were to write a wasm interpreter, I would test stuff like "running this wasm script gives these values"

1582329930
fengb
Some things can break down to units decently. Others not so much

1582329944
Barabas
Yeah you have to use some common sense and don't go all crazy

1582329961
fengb
Yeah I haven’t bothered testing core

1582329972
mq32
btw, on testing games

1582329975
mq32
i found this gem:

1582329976
companion_cube
Barabas: seems to me these are integration tests

1582329989
companion_cube


1582329991
Barabas
I also don't write that much tests usually when doing projects for myself

1582329994
mq32
it's not about testing, but about crunching down the possible states of a game so much that you can brute-force the optimal solution

1582330052
fengb
The bytecode parser will have more tests. Arguably a unit test because I consider it a unit, but it’ll go through much more stale code than a traditional “unit”

1582330082
mq32
fengb, i'll write a test for the byte code parser that will check every possible instruction if it gets decoded at least correct :D

1582330105
fengb
Basically... if it has a semi obvious in->out cycle that’s non-trivial, I’ll “unit test” it

1582330133
fengb
If it’s mucking around with deep internal state... that’s a brittle test and I don’t find a lot of value

1582330155
fengb
Or alternatively if it’s trivial or tautological, not much value either

1582330156
mq32
oh btw

1582330160
mq32
best kind of test: smoke test

1582330169
fengb
Yeah I smoke when I test

1582330172
Barabas
lol

1582330173
fengb
Wait what?

1582330213
mq32
so you failed the smoke test? :D

1582330344
fengb
I actually am enjoying backend code again. My day job is mostly frontend and I really don’t value tests there :P

1582330383
Barabas
> After about a year of execution time on six CPU cores

1582330395
Barabas
Ehmm... ok two months of optimizing?

1582330839
pixelherodev
To add my two cents to the TDD discussion: I think TDD is a useful tool, just like a lot of other things

1582330842
pixelherodev
It's not often the right tool to use

1582330845
pixelherodev
But there are certain contexts where it can be very useful

1582330889
mq32
pixelherodev: yeah, true. if the API is known beforehand (reimplementation of an existing library for example), it's a great tool

1582330942
pixelherodev
Exact context I was thinking of

1582330963
frmdstryr
Is "{d}" supposed to format 0 like this

1582331244
mq32
it's always a good feeling to remove an allocator requirement

1582331258
mq32
and with this, i wish you a good night/day/whatever

1582331261
mq32
i'm going to sleep

1582331271
Barabas
same, good night

1582331280
fengb
Good night!

1582331405
dimenus
andrewrk: the fixed behavior is coming from the target now passing the default glibc of 2.17 instead of the OS version (in my case 2.31)

1582331416
andrewrk
dimenus, oh. that's actually a regression

1582331686
andrewrk


1582331688
pixelherodev
`it's always a good feeling to remove an allocator requirement` Very true. 'Night!

1582335553
ForLoveOfCats
Silly question, how does one print a singe u8 as an ASCII character with `warn` and friends?

1582335657
fengb
Should be `{c}`

1582335669
fengb


1582335716
ForLoveOfCats
Many thanks! That's been driving a bit nuts for a while

1582335850
fengb
One day the documentation will get better :P

1582335857
daurnimator
andrewrk: #4304 good to merge?

1582335975
andrewrk
did you want to get #3972 in first so the TODO here can go away?

1582336193
andrewrk
alright dimenus your problem is back after dca19b6757. sorry for the inconvenience of your problem being temporarily incorrectly fixed :P

1582336219
dimenus
:D, i'll work on the self-hosted version then

1582336224
fengb
What happened to a fun Friday evening? 🙃

1582337355
daurnimator
andrewrk: meh, we can always do it later

1582337423
andrewrk
daurnimator, ok, I'll take another look at #4304, thanks!

1582339936
fengb
I really like the trailing comma hinting at how args should be wrapped

1582355385
daurnimator
andrewrk: i'm around now for an hour or so. I could look at 3972 now if you want?

1582365941
forgot-password
Is there a way to join anonymous struct literals (var args) at runtime? Since @Type doesn't support structs right now

1582369236
mq32
forgot-password: you can concat them with ++ afaik

1582369242
mq32
but i don't know if that works for runtime values

1582369266
forgot-password
It doesn't, sadly. Somebody already suggested it, but exactly that was the problem :/

1582369337
mq32
probaby you can do some comptime magic

1582369358
mq32
why do you want to merge them?

1582369786
forgot-password
I'm trying to build a very basic wrapper around objective-c's objc_msgSend and want to pass the id and selector automatically

1582369801
forgot-password
I'm currently trying to do some comptime magic, I'll get back to you in a bit :)

1582370531
forgot-password
Is .{@as(u8, 42)} not basically the same as instatiating a struct of type struct{ @"0": u8 }?

1582370974
mq32
BaroqueLarouche: are you mlarouche on github?

1582371919
forgot-password
If I pass .{@as(u8, 42)} to @call it works fine, but (struct{ @"0": u8 }){.@"0" = 42} doesn't. Even though `std.meta.fields` tells me, that they have the same fields

1582372106
forgot-password
Okay, apparently there is StructSpecialInferredTuple, which I probably can't set manually...

1582375477
BaroqueLarouche
mq32: yes

1582375503
mq32
ah nice

1582375525
mq32
how far is zigimg?

1582375552
BaroqueLarouche
Very early, only read BMP for now

1582375553
mq32
i have two modules for PCX and NetBPM written in Zig

1582375663
BaroqueLarouche
Cool :) Can I merge them in?

1582375694
mq32
sure thing :)

1582375697
mq32


1582375700
mq32
netbpm.zig

1582375707
mq32
pcx.zig#

1582375730
BaroqueLarouche
Will do that this weekend!

1582375746
mq32
PCX doesn't support bitplaned 24 bit images

1582375819
BaroqueLarouche
My BMP support is limited as well, I did the minimum I needed to convert BMP created by GIMP

1582375844
mq32
if you want to support full BMP, look at this:

1582375857
mq32
a test suite with a lot of test cases for the bitmap format

1582376020
BaroqueLarouche
I already have it linked IIRC

1582376028
mq32
ah nice :)

1582376510
betawaffle
is there currently any way to do `extern var @"OBJC_CLASS_$__MTLDevice": ?id;` where the name there is a comptime string passed to a function?

1582376942
mq32
betawaffle: look at @export

1582376961
betawaffle
but i'm trying to import

1582376965
mq32
ah, hm

1582377102
mq32
just generate the code?

1582380716
mq32
huh

1582380725
mq32
i get a segfault 0x00 when doing zig build test

1582381265
BaroqueLarouche
TIL that my gourvement has a open source license:

1582382042
betawaffle
what's the equivalent to the

1582382115
mq32
what does that define?

1582382136
betawaffle
i guess whether it's 64-bit or not? afaict, it comes from the c compiler

1582382180
mq32
afaik it's not an "official" define

1582382186
betawaffle


1582382235
mq32
huh, weird macro :D

1582382290
mq32
const

1582382309
betawaffle
yeah, that's what i'm gonna use i think

1582385258
betawaffle
is there any difference between `packed enum(u32)` and `extern enum(u32)`?

1582385271
betawaffle
both are non-exhaustive

1582385283
betawaffle
*both of mine

1582387428
Snektron
You can put packed on c enums as well

1582387445
Snektron
Im not quite sure what it means

1582387500
fengb
I think that’s a regression. Enums are the same size as the tag type and packed/extern shouldn’t be modifiers

1582387560
fengb
Bare enums have no defined size but enum(type) should be fixed size that can participate in extern and packed structs/unions

1582387600
fengb
I thought it was a syntax error to try to put packed in front of enum

1582388958
Cadey
i'm getting `Unable to create builtin.zig: access denied` from inside nix-build

1582388966
Cadey
how do i override the build cache location?

1582388982
Cadey
ah --cache-dir

1582389412
Cadey
yeah i'm still getting the error:

1582390987
Barabas
I'm trying to assing something to a global variable, but it crashes with a segfault when I run the tests

1582391138
Barabas
If I try to make some minimal example which just assigns to a global and prints it it works.

1582391449
Barabas
Oh wait...

1582391533
Barabas
I had a

1582391537
Barabas
? too many

1582392009
andrewrk
Cadey, this can be changed, but I think best bet right now is to override $HOME because it's going to use $HOME/.cache/zig for the global cache

1582392032
andrewrk
Cadey,

1582392168
Cadey
i love it

1582392197
Cadey
let's see if that does it

1582392205
Cadey
thanks andrewrk

1582392209
andrewrk
np

1582392351
Cadey
yep

1582392425
Cadey
works perfectly

1582392609
Barabas
Should this compile?

1582392697
Barabas
Without the pointer it prints 1.0e+00, which is also... weird.

1582392816
TheLemonMan
hmm, how do you use mem.readIntNative on a slice?

1582392897
andrewrk
TheLemonMan, with

1582392917
andrewrk
it's planned that if you slice with a comptime known length you get a pointer to an array

1582392929
TheLemonMan
god damn it, you can't even blink without hitting a bug :(

1582392941
andrewrk
well that's not a bug, it's a language improvement

1582393092
andrewrk
I've just been using @ptrCast until that's done. then the @ptrCast can be removed in favor of e.g. x[0..4]

1582393236
TheLemonMan
if the CI passes for #4497 I'll mark it as ready for review

1582393269
TheLemonMan
and then I'll open the floodgates and merge the DWARF-based frame unwinder

1582393276
TheLemonMan
and the PDB-based frame unwinder

1582393290
TheLemonMan
and then we'll finally have stack traces in release mode!

1582393448
Barabas
Cool

1582393630
andrewrk
wow amazing

1582394873
shakesoda
I'm trying to use SDL_GL_SetAttribute and I'm not sure how to convince zig that SDL_GL_CONTEXT_PROFILE_MASK (c_int) is what it really wants (apparently, enum_unnamed_38)

1582394889
shakesoda
is there a good way to tell it to shut up and accept my integer

1582394896
shakesoda
or a bad way

1582394918
TheLemonMan
@intToEnum ?

1582394927
andrewrk
shakesoda, is enum_unnamed_38 inaccessible from the @cImport ?

1582394965
TheLemonMan
hmm, you should probably be able to use an enum literal too

1582394998
shakesoda
it's accessible, but I'm not sure how much I trust it to always be enum_unnamed_38, and it seems a bit ridiculous to write out that way

1582395048
shakesoda
I'll do it, though

1582395086
shakesoda
andrewrk: ah, no, it's private

1582395090
shakesoda
inaccessible :(

1582395160
TheLemonMan
how is it defined?

1582395187
andrewrk
hmmmm, yes so we have a problem with anonymous c enums with casting

1582395220
shakesoda
worked around with extern fn SDL_GL_SetAttribute(flag: c_int, value: c_int) void; for now

1582395220
andrewrk
I did have a related idea the other day, which would be to remove the type argument of many of the casting builtins... they would work based on result location instead

1582395239
andrewrk
to get current behavior you would do @as(T, @intToEnum(x))

1582395240
shakesoda
oh, should be an int return

1582395255
andrewrk
and it would solve this particular use case

1582395278
dimenus
andrewrk: for detecting libc, do we want to read through /usr/bin/env directly and find libc?

1582395280
dimenus
or run ldd

1582395294
TheLemonMan
shakesoda, have you tried using .sdl_gl_context_profile_mask ?

1582395331
shakesoda
TheLemonMan: it's an int

1582395348
shakesoda
I'll try, since I guess it's... both?

1582395353
TheLemonMan
the parameter is a SDL_GLattr

1582395354
shakesoda
very mysterious

1582395369
TheLemonMan
SDL_GL_CONTEXT_PROFILE_MASK is a macro that's translated as an int

1582395371
andrewrk
dimenus, ideally would be to directly read the ELF header data for /usr/bin/env and find the dynamically linked libc

1582395387
andrewrk
I think that is a high quality heuristic for detecting what is the native libc

1582395392
shakesoda
TheLemonMan: that worked

1582395414
shakesoda
c headers cause a lot of awkward situations.

1582395420
dimenus
andrewrk: understood

1582395420
Barabas
Yes

1582395443
TheLemonMan
C ultra-lax casting rules are the main source of awkwardness

1582396376
shakesoda
anyone know how to set windows subsystem

1582396401
BaroqueLarouche
shakesoda: you need to have WinMain in your root file

1582396428
shakesoda
hmm, okay

1582396488
BaroqueLarouche


1582396630
shakesoda
BaroqueLarouche: how about using one of these

1582396966
andrewrk
@export in a top-level comptime block

1582396980
shakesoda
any examples of that?

1582396996
shakesoda
my comptime-fu is weak

1582397915
andrewrk
lib/std/special/start.zig

1582397924
shakesoda
thanks

1582399733
shakesoda
I ended up making a separate win32 entry file and updating my build.zig to reflect that for release builds

1582399742
shakesoda
easier to understand

1582400074
pixelherodev
To use type as an identifier within a struct, the `@""` syntax is usable, correct?

1582400086
pixelherodev
`const a = struct { @"type": void };`?

1582400286
andrewrk
shakesoda, there's also a --subsystem parameter, and `zig build` exposes it with `foo.subsystem = .bar;`

1582400301
metaleap
pixelherodev: yup

1582400331
metaleap
(had the same question popping up with lsp-spec's json-structs =)

1582400689
pixelherodev
If I have two slices of one larger, constant slice,

1582400707
pixelherodev
Of course including anything in between the two slices as well

1582400730
pixelherodev
I'm thinking @ptrToInt and then a bit of basic math there, but that also feels really ugly

1582400734
pixelherodev
Though I suppose this is an ugly use case :P

1582400806
shakesoda
andrewrk: it still wants the winmain if I do that, so it seems to work out the same way?

1582400885
andrewrk
pixelherodev, it sounds like you might be better off with a different data structure than slices. e.g. carrying around the parent buffer and some indexes

1582400901
andrewrk
if you only have a slice, you're not really supposed to peek outside the boundaries

1582400916
andrewrk
I mean you can but there's probably a better way to model the logic

1582401022
pixelherodev
Yeah, that's what I have

1582401025
pixelherodev
But I wanted to clean up the lexer by replacing index + len with a slice

1582401035
pixelherodev
Then I realized what that would mean for the AST generation, which needs to combine slices

1582401082
pixelherodev
So yeah, probably going to leave that as is and leave an explanation in the todo list as to why it isn't feasible

1582402941
jcharbon
About a month ago some great people helped me with a zig 'ls' implementation. School has had me tied down for awhile so I stopped trying to get it to work but I finally have some time to try to iron out the rest of the issues I'm having ... Can someone take a look at my most updated version and help me understand why I'm experiencing issues?

1582402981
jcharbon
The main issue I'm having is using './ls /etc' or './ls /home' or any other root directories

1582402990
jcharbon
It's just not listing anything

1582403068
pixelherodev
Well, for starters, I wouldn't use std.os.linux.stat directly

1582403072
pixelherodev
I'd go through std.fs

1582403121
jcharbon
Sure yea that was the thing I was going to do next, just didnt know by what means. I will look into std.fs more

1582403163
pixelherodev
What I'd do is this: first, try opening as a file. If works, print as file. Else, try opening as folder. If works, print as folder. Else, error out.

1582403198
jcharbon
Yeah that makes sense! I'll give it a try. Thanks for the advice

1582403235
pixelherodev
Maybe switch to using std.heap.page_allocator instead of a fixedbufferallocator?

1582403246
pixelherodev
For show_directory *

1582403255
andrewrk
std.fs is the higher level, cross platform abstractions. it's recommended to start there before reaching lower into std.os

1582403268
pixelherodev
Also, if it's not printing directories as is: try `gdb`?

1582403273
pixelherodev
Step through the code and see what's going on

1582403291
andrewrk
there's advice for command line tools here:

1582403349
pixelherodev
Ah right, arena over page_allocator. Smart

1582403409
pixelherodev
I'd propose an edit to that though: if the program uses more than N MB of RAM, should free it before the end to avoid hogging unneeded resources

1582403527
shakesoda
is there a good way to invoke an external tool as part of the build

1582403549
shakesoda
e.g. shader compiler or something

1582403639
pixelherodev
std.ChildProcess.exec?

1582403664
andrewrk
pixelherodev, free it before the end? you mean right before the OS frees it for you?

1582403687
pixelherodev
No, I mean as soon as it's not needed

1582403700
andrewrk
ahh I see

1582403701
pixelherodev
I meant

1582403705
andrewrk
got it

1582403770
jessermeyer
If the target is 64bit, the address space is enormous, and for short lived programs, it is quite rare for even large allocations to feel like they hog system resources due to system paging.

1582403786
jessermeyer
But it's a trade off analysis, always.

1582403958
jcharbon
so actually just changing my allocator to the one recommended by andrewrk fixed my ls issue! Everything working as expected now. I will still go in and get rid of my std.os though. Thanks much guys!

1582403982
pixelherodev
:)

1582404028
andrewrk
jcharbon, if you end up using only std.fs and other high level APIs like that, your `ls` program will work on Windows too

1582404040
pixelherodev
Suggested improvements for your project: clean up output (e.g. print newlines); add in support for some simple command line options like `-l`; colorize output

1582404101
jcharbon
yes that will be in the works pixelherodev haha. Just needed that baseline functionality first.

1582404179
jcharbon
when I wrote this to begin with I was oblivious to a bunch of zig stuff so thats why I mistakenly used the std.os but will do my best to avoid it in the future :)

1582404475
shakesoda
pixelherodev: thanks, that's what I was looking for

1582404559
pixelherodev
No problem

1582406090
pixelherodev
`In summary, Jimmi made a good attempt at implementing a StringSwitch in comptime and concluded that good old chained if statements were fastest.` Okay, but if it was in the language, it could just be directly translated to the equivalent of chained mem.eqls...

1582406121
pixelherodev
That is, the compiler could just rewrite switch([]u8) into an if/else chain and then compile that

1582406132
pixelherodev
Not that I'm advocating that that is a good idea :P

1582406179
shakesoda
aren't slices supposed to be able to coerce to [*] or do i remember wrong

1582406197
shakesoda
or is this an issue specifically with [*c] (argh)

1582406217
fengb
slice.ptr

1582406233
shakesoda
sure enough

1582406238
shakesoda
fengb: thanks

1582406384
iohzrd
yo

1582406433
iohzrd
I'm starting to play with zig and trying to figure out the equivalent to scanf but cant find anything in the docs. Can anyone help?

1582406630
iohzrd
tried searching the src.io but couldn't find much

1582406647
iohzrd
src of std.io*

1582406680
pixelherodev
AFAIK there is no such method yet

1582406682
pixelherodev
Emphasis on

1582406687
iohzrd
gotcha

1582406688
andrewrk
hello iohzrd

1582406692
iohzrd
hi!

1582406713
iohzrd
love the project, am a sponsor on github...

1582406719
andrewrk
I recognize your name :)

1582406723
iohzrd
:)

1582406726
andrewrk
a scanf-inspired API would be a fun contributor project, I think

1582406748
iohzrd
hmm, will look into it

1582406768
metaleap
andrewrk ast.Token.Id has no notion for the `type` keyword, so the way to go here is mem.eql(u8, "type", myIdentNodesTokenSlice) ?

1582406794
metaleap
its not ever gonna change i guess :D

1582406847
andrewrk
metaleap, `type` is a primitive builtin, like `bool`

1582406879
metaleap
just assume the std.zig.ast user wants to check whether some *Node represents it

1582406881
andrewrk
but since it's not possible to shadow any identifiers, including primitives, it is currently true that if an identifier is "type" then it is necessarily the type primitive

1582406924
pixelherodev
Here's an interesting proposal: expose language features through a builtin package similar to, well, the builtin package

1582406931
metaleap
gotcha thx! the no-shadowing is hopefully here to stay

1582406954
pixelherodev
Then, library code can do `if (!zigfeatures.blob) {@compileError("this version of zig is unsupported!");}`

1582407010
pixelherodev
Would probably be a bit of a challenge to include

1582407133
andrewrk
pixelherodev, I think rather a package will simply declare the major version it is targeting, and when the major version is rolled, it will support all zig versions. e.g. imagine if python3 supported python2 code and it Just Worked

1582407239
pixelherodev
I can see advantages and disadvantages to that, but I definitely like the concept

1582407376
iohzrd
'''    if sys.version_info[0] == 3 and sys.version_info[1] >= 5:'''

1582407381
iohzrd
lol

1582407402
pixelherodev
Well, combined with Zig's lazy evaluation it would actually be useful

1582407419
pixelherodev
As a comptime-known if, the no-longer-valid code would just never be analyzed

1582408735
shakesoda
can i force a build step to run regardless of if any changes have been made

1582408762
shakesoda
oh, nevermind actually, unrelated problem.

1582415641
daurnimator
andrewrk: poke re autojson PR

