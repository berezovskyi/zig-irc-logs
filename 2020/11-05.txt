1604534625
marler8997__
this looks very useful for you x86 zig backenders:

1604535943
Kena
Please what can I do to make this work? error: incompatible types: 'std.builtin.TypeInfo' and 'type'

1604535951
Kena
test "compile-time reflection on a string literal dereferencing" {    comptime expect(@typeInfo(@TypeOf("hello".*)) == [5:0]u8);}

1604535998
ifreund
you don't need the @typeInfo() call there

1604536028
ifreund
just do @TypeOf("hello".*) == [5:0]u8

1604536126
Kena
You're right, thank you :)

1604541272
g-w1
when i try to pass void to a function, it says expected type void found type. is there a void literal that is a value?

1604541289
fengb
{} is a void value

1604541312
g-w1
thanks

1604541433
foobles
in `ir_analyze_bin_op_cmp`, it emits `IrInstGenBinOp` with potentially `*T` values, which are then compared. However, in `ir_render_bin_op`, only numeric types and some others are allowed to be compared. I added some logging and saw that once the IrInstGenBinOp got to the `ir_render_bin_op` function, the input types had been changed to `u64`

1604541433
foobles
instead of pointers

1604541439
foobles
where is this transformation done?

1604541504
foobles
I think there is a bug in that section of the code base surrounding optional zero-size pointers

1604541941
foobles
edit: nevermind, it doesnt do transformations. i misread the case switch in ir_render_bin_op

1604545340
pjz
what's the best/standard way to organize 3rd party zig library imports?

1604545535
pjz
eg. I want to use

1604545550
daurnimator
pjz: for now people have been using git submodules

1604545597
pjz
daurnimator: thanks.  I'll do that, then.

1604547421
pjz
daurnimator: any hints/pointers on how to teach build.zig about my new submodule dependency?

1604547498
daurnimator
`addPackage`

1604547525
daurnimator
there isn't really an API defined yet to know what dependencies it wants; so you'll have to look by hand

1604547596
foobles
in LLVM, how do you cast an int to a i1 as if it were a bool?

1604547614
foobles
like if you have 1234 as an i32, how do you convert that to a 1 i1

1604547627
foobles
like doing `(bool)1234` in C++

1604547891
pjz
oh, so I have to add my dependency via addPackage, but also its dependencies?  IWBNI I could add a dependency on my dependencie's build.zig and have it able to figure out what it needs from there.

1604548177
pjz
the Builder has the info, I think.

1604550574
pjz
ah, I see there's plans for that

1604572237
Kena
Hello, in the following doc example: const c = @cImport({    // See

1604572264
Kena
Is the argument's type of `@cImport()` a tuple?

1604572313
ifreund
no, it's a block

1604572344
ifreund
pretty sure you can do const c = @cImport(@cInclude("foo.h")); if you only have one thing

1604572371
alexnask[m]
Yes

1604572421
ifreund
to be more accurate, @cImport() takes an expression then

1604572437
Kena
Allright, thank you again :)

1604578207
Kena
I have another question regarding the call to `@cImport();`. It raises the following at compilation time:  .\cimport.zig:1:11: error: C import failedconst c = @cImport({          ^.\cimport.zig:1:11: note: libc headers not available; compilation does not link against libcconst c = @cImport({

1604578223
Kena
Do you know how to fix it? I'm currently using Windows 10.

1604578246
alexnask[m]
Are you using a build.zig script or zig build-exe?

1604578261
Kena
zig build-exe

1604578264
ifreund
-lc

1604578287
g-w1
Can heap allocated variables just dissapear?

1604578293
ifreund
no?

1604578307
ifreund
i mean you can free them accidentally I suppose

1604578309
g-w1
ok, then ill send a pic of whats going on. its weird

1604578328
ifreund
but computers do exactly what you tell them do do barring hardware failure

1604578350
Kena
I think build.zig has not been created yet as I never ran `zig init-exe` or `zig init-lib` .

1604578375
Kena
zig build-exe cimport.zig -lcerror: unable to create compilation: WindowsSdkNotFound

1604578395
alexnask[m]
Do you have msvc/build tools installed? If not, also add -target native-native-gnu

1604578423
Kena
I have not. I'll try your flag immediatly.

1604578458
alexnask[m]
(This is planned to change by 0.7.0 to be the default)

1604578471
g-w1
I am working on zigup and trying to impliment command to clean compilers, but my default compiler variable is dissapearing, I think it may be freeing too early, but idk.

1604578505
Kena
`zig build-exe cimport.zig -target native-native-gnu` raises again  `error: C import failed` `note: libc headers not available; compilation does not link against libc`

1604578547
alexnask[m]
Keep -lc as well ;)

1604578549
g-w1
do you see anything that is freeing default_comp_opt? This looks like an allocator issue to me.

1604578690
Kena
Compiling C objects is in progress, thanks! But what does `-lc` stands for?

1604578697
g-w1
link libc

1604578703
Kena
Allright :)

1604578728
ifreund
-lfoo links foo

1604578759
ifreund
g-w1: do yo have the full code pushed somewhere? hard to get much from what I can see in the screenshot

1604578774
g-w1
ill put in pastebin, its only one file

1604578785
FireFox317
Kena, c assumes that libc is always linked when using c itself, with zig we don't depend on libc be default. (Thus when using c libraries you have to link libc `-lc`)

1604578823
g-w1


1604578858
g-w1
ifreund, its in cleanCompilers function

1604578902
ifreund
g-w1: yep, the bug is in getDefaultCompiler

1604578916
ifreund
basename() doesn't allocate it slices

1604578938
ifreund
so you're returnig a slice of stack memory

1604578950
ifreund
calling the function between your print statements overwrites this stack memory

1604578951
g-w1
ah, and then it gets overwritten. thanks

1604578968
Kena
FireFox317 is the default one Musl? no system library at all?

1604578979
ifreund
no libc at all

1604579001
ifreund
well, at least on systems where that is ok like linux

1604579014
ifreund
on some OSes libc is the only stable interface to the kernel

1604579068
Kena
Understood, I thought musl was a good candidate to be defaulted as Andrew was sponsoring his maintainer.

1604579163
alexnask[m]
A substantial poriton of the zig standard library is a musl port

1604579205
ifreund
yeah musl's source code is a very valueable resource

1604579219
ifreund
it's actually readable unlike glibc

1604579220
earnestly


1604579238
g-w1
is there a way to allocate to a *[4096]u8 instead of []u8?

1604579247
FireFox317
However, Kena, musl is only something for linux, on windows we have mingw-w64 which is thing similar to musl but then for windows.

1604579256
FireFox317
someone please correct me if i'm wrong ^^

1604579266
alexnask[m]
g-w1: allocator.create([4096]u8)

1604579278
g-w1
ah, thanks

1604579312
alexnask[m]
(and your free becomes a destroy)

1604579343
ifreund
is mingw-w64 really comparable to musl in terms of it's goals of simplicity?

1604579402
FireFox317
ifreund, well maybe not in terms of simplicity, but regarding making cross compilation work it is?

1604579441
alexnask[m]
Well, its a libc so its similar in that sense :P

1604579467
alexnask[m]
Havent looked at the source code though tbh, I wouldnt expect it to be clean and simple

1604579540
ifreund
the point of mingw-w64 seems to just be to get gcc working on windows

1604585703
_foobles
if I have an IrInstGen representing a bool, but I want to convert that to an IrInstGen of i1 or  ?*void, how do you do that?

1604585852
brentp
hi all, with this code:

1604585893
brentp
i get this error:

1604585931
g-w1
it is an optional but you are trying to dereference. if your sure it is not null, do if (!(htsfp.?.*

1604585955
brentp
that is autogenerated from the C bindings. might be related to:

1604585970
brentp
I don't deref. it's generated code

1604585979
g-w1
oh

1604592965
g-w1
does making a function inline mean that it doesn't have it's own stack frame and it can return stack allocated memory?

1604593109
brentp
is there a better or preferred place to ask zig questions like mine above?

1604593172
g-w1
Probably on github issues. it seems like a compiler problem.

1604593305
ifreund
brentp: that seems like a separate issue from #1580, I'd open a new one

1604593350
ifreund
g-w1: no, that's still UB afaik

1604593373
ifreund
even if it "works" it's a massive foot gun to make that part of your api

1604593408
fengb
Stack is block based so no it’s still not safe

1604593421
g-w1
oh. What is the best way to do this. This is where I would use a macro in a language like rust. I am just trying to factor out common parts out of my code without allocating

1604593527
g-w1
it seems like my problem is that I create a buffer and return a slice to it. would returning the buffer + slice, like in a tuple work better?

1604593845
ifreund
take the buffer as a parameter?

1604593851
g-w1
ah, thanks!

1604593865
ifreund
or return an array by value if the size is comptime known

1604593880
g-w1
the buffer paramater works

1604593900
g-w1
it would be nice if in the function definition you could tell the compiler to allocate a return slot

1604593908
g-w1
thats what i was trying to do

1604593971
ifreund
you see to be talking about result location semantics

1604593976
g-w1
yeah

1604593994
ifreund
zig already kinda does this

1604594013
g-w1
it allows to return arrays ig, but not slices

1604594016
ifreund
the feature need more development though

1604594017
fengb
Zig cannot allocate variable size types

1604594029
g-w1
ok. thanks

1604594030
fengb
On the stack

1604594040
ifreund
yeah this is for returning values only

1604594050
fengb
You can safely return arrays. Not slices or pointers to stack memory

1604594109
g-w1
yeah. i was saying that it would be nice if the compiler could tell when you were returning a slice to stack allocated memory and also return the slice with it, but passing a buffer works fine

1604594123
g-w1
and also return the *memory with it

1604594157
fengb
That requires ownership and/or ref counting

1604594181
g-w1
yeah, more in rust's territory. im just not used to manual memory management, but ill learn :)

1604594229
ifreund
garbage collection does make things easier, but then your code runs slow

1604594273
fengb
I use this to return “dynamic” arrays:

1604594812
Barabas
I'm trying to build master, but it fails with `allocation failed` when trying to build zig1.obj

1604594844
Barabas
I have 14GB free atm and it doesn't seem to get close, so I'm wondering how much it's trying to allocate :-/

1604594958
Barabas
I mean, it goes up to use 4GB (so 9 still free) and then fails, so it must be trying to allocate a shitton at once or something.

1604595114
Barabas
Weird, I freed up some more and now it's running at a stable ~5.5GB. :/

1604598615
earl
hey everyone. i'm trying to cross-compile a minimal example as lib from x86_64 linux (host) to i386 linux (target)

1604598651
earl
my example is simply: `export fn add(a: i32, b: i32) i32 {return a + b;}`

1604598690
earl
which i'm trying to build using `zig build-lib -dynamic -target i386-linux-gnu --library c --single-threaded test.zig`

1604598763
earl
but i'm getting the following error:

1604598767
earl
Build Dependencies...lld: error: relocation R_386_PC32 cannot be used against symbol __zig_probe_stack; recompile with -fPIC

1604598780
earl
same error when i add -fPIC to the build-lib call

1604598783
earl
any ideas?

1604598882
g-w1
maybe ld wants you to pass -fPIC as a linker arg

1604599033
g-w1
because it seems like a linker message, not zig

1604599073
earl
good point, thanks. let me see if i can find out how to pass args to the linker via zig's cli

1604599444
g-w1
i dont see one, so maybe zig build-obj and then try to link manually with the standard library.

1604599473
g-w1
time to study for test next period

1604599532
g-w1
sorry

1604599533
g-w1
wrong chat

1604599542
g-w1
:|

1604599542
earl
me neither. tried calling lld directly (with the command from --verbose-link), and it doesn't accept -fPIC

1604599574
g-w1
interestingly building a static lib works

1604599742
alexnask[m]
This probably broke when switching to the new CLI

1604599795
alexnask[m]
Ah nvm, seems like its an older bug (

1604599942
earl
ah, thanks for digging this out.

1604599968
earl
however, as the wrong relocation is in __zig_probe_stack, that's possibly something related but different

1604600036
earl
maybe more like

1604600063
earl
and indeed, adding `-fno-stack-check` fixes my immediate problem

1604600240
alexnask[m]
Ah, good point, I thought it was still a compiler-rt symbol but it wasnt, read too hastily

1604600282
Kena
I have another noobie question. When it is said in the doc "When constant is used as a pointer attribute, it denotes that the value referenced by the pointer can not be modified". Please does it  mean that the memory address pointed by the pointer is constant or is the value stored in the memory address pointed to by the pointer is constant?

1604601174
ifreund
the value stored

1604601207
ifreund
var foo: *const u8  vs const foo: *u8

1604601229
ifreund
in the first the memory address is variable and the value stored there constant

1604601237
ifreund
in the second the opposite is true

1604601496
Kena
Thanks again ifreund, I admit the pointer mechanisms are a tough pill to swallow. I have no co-workers, no teacher nor friends to ask anything related to programming, so if an online resource or a book is to obscure to deliver any understanble knowledge, I must ask for help otherwise I won't be able to become a programmer

1604601501
Kena
Thanks for your support.

1604601980
ifreund
no worries, I've been lucky enough to have a solid education and am usually happy to help out anyone learning zig :)

1604602300
foobles
Kena the referent of the pointer cannot be changed by that pointer

1604602303
foobles
oh wait

1604602313
foobles
i was scrolled up oops :P

1604603275
foobles
heyo, anyone know how to convert an IrInstGen with value type `bool` and I need to convert that to an IrInstGen with type `?*void`

1604603318
foobles
i know that internally an optional zero-size type is represented as an `i1

1604610101
marler8997__
g-w1 I'm on irc as well

1604610131
elbow-jason
hello zig people. I am a little stumped:

1604610172
elbow-jason
I can't understand why the values for fox3 and the2 are null.

1604610270
marler8997__
g-w1 are you on irc right now?

1604610295
elbow-jason
actually looking at the logs it looks like I am not

1604610347
g-w1
yes

1604610362
g-w1
probably better to chat than github :P marler8997__

1604610398
alexnask[m]
elbow-jason: You need a StringHashMap(usize) here, the AutoHashMap hashes the slice and not the actual value of the string

1604610415
alexnask[m]
AutoHashMap used to error out for []const u8 keys for this reason iirc

1604610558
elbow-jason
oh awesome! It worked! Nothing quite like changing 1 loc and fixing the issue :) Thanks, alexnask[m]!

1604610560
alexnask[m]
(and you are incrementing the value twice when finding an existing entry)

1604610605
elbow-jason
Got it. This language is so simple. Me gusta.

1604613333
andrewrk
alexnask[m], how did it go with the mingw-w64 update? looks good to me

1604613449
alexnask[m]
I will do so tomorrow and update the status in the PR

1604613449
alexnask[m]
It seems to work well, I would like to test it on a couple more complicated C codebases before merging though, just to make sure everything works well

1604613524
alexnask[m]
The only thing that confused me is which idl files are included along with the headers, I kept the same set we already used but updated them but they seem arbitrarily chosen to me

1604614279
andrewrk
they are arbitrarily chosen

1604614318
andrewrk
I'm not sure we should add them all since some are very obscure and that adds quite a few additional MB to the tarballs. but if you have any suggestions, I am all ears

1604614346
andrewrk
I just tested the branch with legend-of-swarkland and was able to cross compile the game for windows as well as run it in wine, so it seems good to me

1604614642
alexnask[m]
Ok, that makes sense, I initially copied all of them over and noticed quite a bit size difference as well. This is ready to merge then

1604614684
andrewrk
nice work

1604614828
alexnask[m]
cheers

1604614993
ifreund
how are release notes coming?

1604615335
ifreund
alexnask[m]: zls is so awesome, I'm porting river to zig-wlroots now and goto-definition is saving me a lot of time

1604615395
andrewrk
I'm really behind on release notes

1604615411
andrewrk
I'm going to have to change the format to save time during this release cycle

1604615412
ifreund
:/

1604615441
andrewrk
it's already a crunch week, but with this getting ousted from where I live situation, it just sucked up so much time away from me

1604615467
ifreund
yeah, that totally sucks

1604615684
ifreund
I hope my goal of getting non-zig people to start using software written in zig will come to fruition this release cycle

1604615695
ifreund
it already has for a couple people tbh

1604615781
elbow-jason
andy you can always come back to AZ. We won't kick you out.... all joking aside I hope you are okay.

1604615825
alexnask[m]
ifreund: <3 Could be way better though.

1604615825
alexnask[m]
Hopefully we can get stage2 to a usable level by 0.8.0 and I can work on a semantic server in the compiler for 0.9.0

1604615853
ifreund
can't wait

1604615908
ifreund
oh one thing, shouldn't opaque{} things be highlighted as types?

1604615923
ifreund
I've been too lazy to open an issue

1604615942
alexnask[m]
I added an opaque token type

1604615966
alexnask[m]
In keeping with struct, union, enum

1604615984
ifreund
ah so I just need to update my config then I guess, thanks

1604616031
ifreund
sweet, that was easy

1604616112
alexnask[m]
Maybe I should move struct, enum, union, opaque to token modifiers and always use type for the token type

1604616123
alexnask[m]
Hadnt really considered this till now for some reason :P

1604616226
ifreund
yeah I dont think any sane person will highlight all of those with different colors

1604616310
alexnask[m]
looks at config in shame

1604616361
alexnask[m]
They are similar, in my defence, I only set them up for testing and havent changed them

1604616396
ifreund
heh

1604617395
mla
does anyone have an example of reading a /dev device file in zig? struggling to read /dev/input/eventX; trying to do w/ std lib / not w @import c

1604618070
ifreund
mla: maybe look at what libinput does? This is more a question of how to use the /dev/input/event* interface

1604618290
mla
ifreund: hm yeah thing is im getting an unreachable error trace pointing to EINVAL from std.fs.read so thinking maybe this is a std err bug

1604618312
ifreund
what are you passing to read?

1604618456
ifreund
note that you will likely need root perms to read /dev/input/*

1604618663
mla


1604618683
mla
cat /dev/input/event0 works file though

1604618805
mla
works fine* though

1604619200
justin_smith
I'm trying to remember, how do I iterate a *Foo[] using for?

1604619261
alexnask[m]
`for (foo_collection) |foo| { ... }` will work for []Foo, *[N]Foo

1604619322
justin_smith
error: index of single-item pointer

1604619341
justin_smith
I have *[]Foo, sorry I typed it wrong above

1604619402
alexnask[m]
`for (foos.*) |foo| { ... }` but pointer-to-slice is a weird type, seems weird to me that you would need it

1604619428
justin_smith
alexnask[m]: yup, that did it, thanks

1604619476
justin_smith
alexnask[m]: I have it because a C library wants a void pointer to my "user data", and slice is my natural type, so I end up pointer casting from void

1604619491
alexnask[m]
Ah, I see

1604619521
justin_smith
I agree that pointer to slice is an odd place to end up, that's why the docs didn't really cover this case I'm sure

