1605052911
g-w1
deleteTreeAbsolute

1605052920
g-w1
std.fs.!!

1605052938
g-w1
or deleteTree

1605053153
yZ5vlALg86lP
ah.

1605053159
yZ5vlALg86lP
not os, fs!

1605053164
yZ5vlALg86lP
thx

1605053188
GrooveStomp
Can I install 0.6.0 via snap?

1605054704
teratorn
can someone try to reproduce this hanging "bench" test?

1605054715
teratorn
if you reduce the for-loop count to 1000 it works fine

1605055095
teratorn
am i exploding an arraylist? and maybe the hash algo is putting them in the same bucket?

1605055126
teratorn
windbg says in in a Wyhash function

1605055312
frmdstryr
time per 10,000: 230.5134ns

1605055336
frmdstryr
It is doing a ton of allocations

1605057112
teratorn
frmdstryr, well that would be expected

1605057132
teratorn
but why the performance fall off?

1605057148
teratorn
the hashmap and arraylists dont appear to be exploding

1605057155
teratorn
and it doesnt peg cpu or mem usage

1605057258
frmdstryr
on linux it's not hanging and pegging one core at 100%

1605057297
frmdstryr
memory goes up to about ~400MB

1605057801
frmdstryr
teratorn: Did you try running in release-safe? A profiler shows its in zig_assert

1605057817
teratorn
no

1605057885
frmdstryr
it runs really quick with release safe

1605058330
g-w1
andrewrk: sorry to ping you about this but i spent a very long time trying to figure this out and no one else seems to know: in type.zig, how would I extract fields from a type.Type.Payload.ErrorSet? only the value.Value.Payload.ErrorSet has fields. I tried to do this but it didn't work: var a_fields = @fieldParentPtr(TypedValue, "ty", &a).val.cast(Value.Payload.ErrorSet).?.fields; (this is in the context of

1605058333
g-w1
trying to impliment type equality checking for error sets/error unions) ~type.zig:229. thanks so much

1605058457
andrewrk
uhh no @fieldParentPtr here, not sure where that's coming from.

1605058516
g-w1
I thought that `a` was a type that had a corresponding val that shared a TypedValue.

1605058536
g-w1
Since only the val has fields, how else would you find the fields?

1605058603
andrewrk
you're talking about error { these, fields } right?

1605058625
g-w1
yes, I am trying to compare 2 error sets, but to compare them I need to know the fields, right?

1605058654
andrewrk
those fields are part of the error set type, so you'll get them through the Type, not through a Value

1605058731
g-w1
the Type.Payload.ErrorSet only has decl, should I look for it there? in the typed_value of the decl?

1605058777
andrewrk
for me to answer this question is the same thing as writing the code - I don't know until I try it

1605058793
g-w1
ok :) ill try there

1605059558
teratorn
whats the diff between [*]u8 and []u8 and how do I get the former from the latter?

1605059657
g-w1
thanks for being a rubber duck. in analyzeInstErrorSet -> createAnonymousDecl there is an anon struct creation of a TypedValue. the anonymous struct is what tripped me up. im so happy that i figured this out

1605059775
g-w1
teratorn: [*]u8 is basically a c poiinter but you are telling zig that it has multiple items. I would reccomend the zig showtime talk by loris about pointers. he goes in-depth on how to convert all the types and what they are. its very good

1605059915
g-w1
for reference, this is the code that got it: a.cast(Payload.ErrorSet).?.decl.typed_value.most_recent.typed_value.val.cast(Value.Payload.ErrorSet).?.fields;

1605060339
teratorn
g-w1, got a link?

1605060374
g-w1


1605060375
teratorn
how do you go about allocating a u8 buffer and returning a pointer to it?

1605060453
g-w1
allocate it using an allocator.create([how_big_buf]u8) and then return what you get from the allocator (it is already a pointer)

1605060748
teratorn
i was using mem.alloc(u8, size(

1605060826
teratorn
.\amp.zig:239:42: error: unable to evaluate constant expression

1605060826
teratorn
^

1605060826
teratorn
var buf = try self.alloc.create([length]u8);

1605061058
frmdstryr
teratorn:

1605061097
teratorn
i dont understand why allocator.alloc(u8, size) doesn't produce the type you can return from an fn?

1605061104
teratorn
frmdstryr, ^

1605061203
frmdstryr
can you share the code? alloc returns a slice

1605061207
travv0
that should work fine, what problem are you having?

1605061473
teratorn
u cant return a slice though right?

1605061503
teratorn


1605061524
teratorn
the compile error should tell you what is wrong

1605061602
travv0
you can return a slice

1605061625
travv0
a slice is just a pointer plus a length

1605061808
travv0
use alloc() instead of create() and change the return type to return a slice instead of an unknown-length pointer

1605061817
frmdstryr
yes ^^

1605062424
teratorn
ok excellent

1605062464
teratorn
im thinking its a slice like rust which is a borrow

1605062477
teratorn
i guess it is fundamentally different than that?

1605062545
frmdstryr


1605062616
companion_cube
slices in rust are exactly the same, but they generally have a borrowed lifetime

1605062622
companion_cube
(they're pointer+length)

1605063028
teratorn
is there a btreemap implementation in zig somewhere? i want a map with deterministic insertion order

1605063043
fengb
No btree yet

1605063047
teratorn
yeah the memory management model semantics is what i meant

1605063058
teratorn
hmm i wonder how hard it would be to port one

1605063063
teratorn
from C or Rust or something

1605063361
companion_cube
there's one in rust's stdlib

1605063520
teratorn
~2700 SLOC :/

1605063802
companion_cube
quite big indeed

1605063820
companion_cube
but there's a entry API and all the iteration stuff

1605064727
teratorn
ideally I would generate struts for each type i want to decode off the wire

1605064754
teratorn
but exposing that via C and WASM in a language-agnostic way could be problematic

1605068340
data-man
teratorn: try

1605072648
marler8997__
is there some way to tell at comptime if we are compiling with tests enabled?

1605073646
daurnimator
marler8997__: yes, look in builtin

1605074594
marler8997__
thanks @import("builtin").is_test seems to work

1605079299
daurnimator
marler8997__: never import builtin directly; use `std.builtin`

1605089561
teratorn
what's the canonical way to compare two memory buffers ([]u8) ?

1605089568
teratorn
for a unit test

1605089605
scientes
mem.eql

1605089638
scientes
but style questions are generally a waste of time

1605089726
teratorn
how about printing binary data with escapes?

1605089743
scientes
somewhere in fmt

1605089772
scientes
not sure if fmt has nidce documentation, but that would be nice

1605089876
ikskuh
teratorn: you want to print a byte buffer as escaped ASCII or as hexadecimal?

1605090043
teratorn
either way

1605090053
ikskuh
{x} or {X} for hexadecimal

1605098610
Kena
Hello living on the edge computional people. Does someone know why bool type is 1 byte-aligned instead of u1? There are 7 bits lost each type a boolean expression is evaluated, and therefore increase the software's latency.

1605098625
Kena
*computational

1605099653
hch
does `zig cc` have sth similar to `(clang|gcc) -dumpmachine` ?

1605099757
ugla
Kena: a byte is often the smallest addressable unit of memory

1605099930
ifreund
also usize is probably the fastest type to opreate on as it fits exactly in a register or whatever

1605099946
Kena
Allright but I thought Zig was able to compete against C for low-level software. I think ignoring reduced instruction set architecture target would be a mistake

1605099950
ifreund
really though this is microoptimization, you won't know anything for sure without benchmarking

1605100018
ifreund
Kena: bools are u1 when in packed structs by the way

1605100034
Kena
How could you replace a bool by a usize?

1605100202
ifreund
in general

1605100213
ifreund
let the optimizer worry about that

1605100273
ugla
Kena: a standard C bool is the same size, for what it's worth

1605100300
ifreund
infact

1605100322
ifreund
urgh, in fact that's probably why zigs bool is one byte

1605100332
ifreund
otherwise we would need c_bool

1605100961
Sahnvour
byte-sized bools also do not require additional bit shifting to be used with typical cpu instructions

1605102845
g-w1
is there a way to compare 2 array hash maps, or subtract one from another, without cloning anything

1605103050
teratorn
.\amp.zig:384:5: error: variable of type 'comptime_int' must be const or comptime

1605103051
teratorn
var i = 0;

1605103051
teratorn
^

1605103051
teratorn
.\amp.zig:385:12: note: referenced here

1605103051
teratorn
while (i < len) : (i += 1)

1605103051
teratorn
^

1605103057
teratorn
whyyy

1605103071
g-w1
var i: u32

1605103084
dutchie
probably usize tbh

1605103087
dutchie
but yeah

1605103096
dutchie
top zig papercut

1605103102
teratorn
why does it pick a bad type?

1605103374
alexnask[m]
Integer literals are of type `comptime_int` because they can be arbitrarily large

1605103422
ikskuh
teratorn: which type should it pick?

1605103474
teratorn
i dunno something that works in a for loop

1605103537
Kena
Please what is the Zig equivalent for CHAR _BIT in C? Is it u8?

1605103619
ikskuh
Kena: it does not exist

1605103650
ikskuh
@bitSizeOf(c_char) would be the explicit equivalent i think?

1605103664
ikskuh
oh, c_char doesn't exist :O

1605103678
ikskuh
zig assumes that a byte is always the smallest adressable unit

1605103689
ikskuh
thus, @sizeOf(u8) == 1 and @bitSizeOf(u8) == 8

1605103689
Kena
Thank you buddy you're kind.

1605103867
fengb
c_char might be added due to C ambiguities :P

1605103958
ikskuh
c_char == u6

1605103959
ikskuh
:D

1605107273
Kena
Please How can I get the size of the size of a declared variable? `@sizeOf()` `@sizeOf(TypeOf())``@bitSizeOf()` and @typeInfo().Int.bits return each an error  who message is beyond me.

1605107296
ikskuh
@sizeOf(@TypeOf(xyz))

1605107303
ikskuh
is the size in bytes for a var named "xyz"

1605107408
Kena
error: expected type 'std.builtin'.TypeInfo', found 'i8'

1605107418
ikskuh
huh

1605107426
ikskuh
can you show me the full source?

1605107733
g-w1
does error {Thing} coerce to anyerror?

1605107827
ikskuh
yes, it does

1605107869
g-w1
but with @as(anyerror, error{Thing}) doesn't work. im implimenting more error stuff in stage2, should I make it castable?

1605107891
ikskuh
error{Thing} is a type

1605107898
ikskuh
error.Thing is the error of type error{Thing}

1605107899
ikskuh
sorry

1605107914
g-w1
ok

1605107922
g-w1
and error.Thing can coerce to anyerror?

1605108125
alexnask[m]
error{Thing} is a type

1605108125
fengb
Do you mean error.Thing?

1605108133
alexnask[m]
yeah

1605108279
g-w1
yes i think

1605108431
g-w1
so error{Thing} can coerce to type anyerror?

1605108481
g-w1
or error.Thing can coerce to anyerror. all these types that are also values are confusing me

1605111419
marler8997__
daurnimator, why "never import builtin directly; use `std.builtin`" ?

1605111499
ifreund
iirc importing directly is deprecated?

1605111734
travv0
whoops i always import it directly

1605111802
marler8997__
I'm not seeing where it has been deprecated, and the zig docs still use it

1605115041
dutchie
one day i'll remember which commands want -OReleaseSafe and which ones want -Drelease-safe

1605115059
dutchie
probably by then the CLI will have been tidied up so they are all consistent

1605116247
alexnask[m]
-D is a way of passing options to build scripts

1605116265
alexnask[m]
So -D<some_mode> is always a build.zig thing

1605117437
tsujp
Congrats on 0.7.0! I'm a bit late to the party but none the less splendid work

1605117499
tsujp
Hey I have a Q and please direct me to the right place if this is too general or likely to be missed: I want to contribute to Zig but right now contributions directly to the language are not yet feasible (still learning Zig so I am a beginner/intermediate there); is the Zig website something that is in scope for a change etc?

1605117523
tsujp
I am a fullstack dev and web designer so I'd be keen to contribute to some FOSS, of course free

1605117548
g-w1
right now loris is working on the website on twitch, you could ask him

1605122914
dutchie
i made a start on updating the zig version in nixpkgs, but it gives an AccessDenied error when it tries to run the tests. i've tried setting XDG_CACHE_HOME in various places but it hasn't helped. any ideas?

1605122979
dutchie
logs:

1605126272
yZ5vlALg86lP
specifically why is there a Dir.deleteTree and also a deleteTreeAbsolute, why this distinction? why not have one fn that deletestree irrespective of the path being absolute or relative?

1605126287
yZ5vlALg86lP
s/specifically//

1605126508
g-w1
deleteTreeAbsolute is just a wrapper. it doesn't take a dir as an arg

1605126532
travv0
the non-absolute path functions will also take an absolute path

1605126535
g-w1
it is basically equalalent to std.fs.cwd().deleteTree

1605126539
g-w1
read the source

1605126553
ifreund
it asserts that the path is absolute no?

1605126559
g-w1
yes

1605126563
travv0
the absolute path one does yeah

1605126975
yZ5vlALg86lP
i actually read the source. and it confused me, that's why i asked here

1605127045
yZ5vlALg86lP
the confusing part is why does the non absolute version need the Dir as a first parameter, i mean, why expose this to the dev? why not handle this transparently?

1605127112
g-w1
it is so that they can pass whatever dir they want, it may not always be cwd(). cwd().openDir("thing").deleteTree("other")

1605127125
yZ5vlALg86lP
there could be a wrapper that checks the path being absolute, and if not instantiates a std.fs.cwd() instead

1605127144
g-w1
what if you dont want to use cwd

1605127162
yZ5vlALg86lP
then i concat the path with the prefix i want instead of cwd

1605127179
yZ5vlALg86lP
paths are strings, even if relative

1605127202
g-w1
i feel like that would 1. use allocation 2. be more complex than just chaining a bunch of openDir

1605127279
yZ5vlALg86lP
how frequent is the case that the path is neither absolute nor relative to cwd?

1605127290
yZ5vlALg86lP
i feel that this case is quite rare

1605127423
g-w1
im pretty sure this is because of the way openat works at the system level: it needs a fd pub fn openat(dirfd: i32, path: [*:0]const u8, flags: u32, mode: mode_t) usize {

1605127440
g-w1
std/os/linux.zig:568

1605127584
travv0
if you tend to mostly want paths relative to the cwd it seems fs.cwd().function() isn't a lot to type, and then it still allows people that need things relative to other directories to do that using the same function

1605128061
yZ5vlALg86lP
oki, i guess this being posix openat related is a reason i can live with.

1605128397
danyspin97_
is there something similar to rust std::result::Result?

1605128523
danyspin97_
or someway to pass the error message instead of the error code

1605128579
travv0
i think there's a proposal open for a way to pass information along with an error

1605128611
danyspin97_
I see

1605128633
danyspin97_
because logging inside a library function doesn't seems correct

1605128669
danyspin97_
but also returning a "Permission Denied" error seems meaningless. What was it trying to open?

1605128719
dominikh
Allow returning a value with an error -

1605128763
travv0
i think the current workaround is to pass some sort of error context argument that you populate if there's an error, i haven't personally done anything like that though so i could be wrong

1605128929
danyspin97_
travv0: thanks, I'll use that

1605129136
danyspin97_
dominikh: I see, still heavily discussed

1605129144
danyspin97_
I guess we'll see it in 0.9.0

1605129295
travv0
it's unfortunately not even accepted yet but i believe it's a really popular proposal.  i certainly would like to see it happen

1605129384
ifreund
danyspin97_: logging inside a library function is an intended use case for std.log

1605129400
ifreund
just put all of your library's logging in a custom scope

1605129513
danyspin97_
ifreund: what about a module with some functions?

1605129526
danyspin97_
I have 3 binaries that reuse the same modules

1605129556
danyspin97_
I don't want to expose the module name to the user (just the error msg should suffice)

1605129984
ifreund
sure, do whatever makes sense

1605130046
ifreund
there's no hard and fast rules because 1. zig isn't mature and 2. hard rules aren't flexible

1605130334
g-w1
to go back to my question from earlier, should @typeOf(error.Thing) == error {Thing, Other}. I do not think this is the case, but if not, what operation could i do to @typeOf(error.Thing) (error {Thing}) to turn it into error { Thing, Other }? (thinking about this from a compiler type coerction perspective). should I just merge it with the other set to create a new set? i cant find a cast about this in

1605130337
g-w1
ir.cpp~15241 (where all the casts are) so I assume that @typeOf(error.Thing) == error {Thing, Other}? although this is not true when trying it out. could someone point me in the right direction of how the semantics of this should work please?

1605130511
g-w1
or should it be an exception that if an error is returned from a function that @typeOf(error.TheErorr) is in the return error set (talking about defined error return sets) it will automatically coerce to the larger set, but only in this example?

1605133760
teratorn_
whats wrong with this syntax?  stdout.print("here: {} {}", .{pair.key.len, pair.value.len}) catch |err|{};

1605133813
ifreund
what's the error you get?

1605133828
teratorn_
whats wrong with this syntax?  stdout.print("here: {} {}", .{pair.key.len, pair.value.len}) catch |err|{};

1605133840
teratorn_
.\amp.zig:38:74: error: expected token '}', found 'catch'

1605133841
teratorn_
{stdout.print("here: {} {}", .{pair.key.len, pair.value.len}); } catch |err|{};

1605133880
teratorn_
nvm i got it dumb mistake

1605133880
ifreund
ok, well that's not the same code you pasted in the first message

1605133900
ifreund
cool :)

1605134676
teratorn_
could anyone tell me why the last test case is printing len: <value> with a really huge corrupted number, when it is supposed to be stored to as an out variable, and be 23... ?

1605134679
teratorn_


1605135381
ifreund
var buf: [*]u8 = @intToPtr([*]u8, 1);

1605135386
ifreund
that'd be why

1605136537
teratorn_
ifreund, how does that affect len?

1605136578
ifreund
teratorn_: that line is UB, what it does is undefined

1605136611
ifreund
use a real buffer instead of just hoping that it's ok to write over whatever is at address 1

1605136624
ifreund
var buf:

1605136665
ifreund
var buf:[4096]u8 = undefined;

1605136669
teratorn_
its an out var

1605136675
teratorn_
it should be set to a real address later

1605136696
teratorn_
make sense?

1605136719
ifreund
oh well in that case use undefined to initialize it

1605136875
teratorn_
ifreund, ok i do it. still same issue though

1605136888
ifreund
I'm very confused why this function doesn't just return a slice

1605136917
teratorn_
it will be exported to C which informs the design significantly

1605137023
ifreund
well, you can't return an error union either in that case

1605137201
novaskell
teratorn_: try writing it for zig first and consider how to wrap it for C after you've got it working correctly. Also, avoid `[*]` everywhere that's not touching C directly as it should only live at the edge between the two

1605137292
ifreund
novaskell: you're thinking of [*c], [*] is totally fine to use in pure zig

1605137315
teratorn_
its virtually complete already so its not really worth having two API layers

1605137336
teratorn_
its a very simple protocol, and the api is straight forward

1605137354
ifreund
and [*c] is only for autogenerated bindings, if you're writing manual bindings you should figure out the correct zig pointer type

1605137360
teratorn_
but ill take that advise under advisement for the future

1605137391
teratorn_
ok, but the issue remains

1605137399
teratorn_
why cant i seem to assign to a usize out var?

1605137468
ifreund
try throwing a print statement the loop in the function you're testing

1605137496
teratorn_
maybe it overwriting the stack

1605137510
teratorn_
im assigning to a buffer... i think just the pointer but maybe not?

1605137571
novaskell
`[*]` given a length should be a slice `[]` inside as soon as practical/possible unless there's a specific reason to keep `[*]`

1605137638
Kena
Please can someone can tell me what's wrong? I'm trying to write my very first function in Zig and the error message doesn't help:

1605137758
Kena
Made a mistake in the before-last comment, it's actually 253.

1605137849
ifreund
Kena: I'm confused by your function, shouldn't isEven just be `return x & 1 == 0`

1605137884
Kena
If the number is 8 bits it must >> to 7 bits, if it's 16 bits, it have to >> 15 bits, etc.

1605137905
teratorn_
well a simple test case does work,

1605137911
ifreund
why? you only need to look at the least significant bit

1605137931
Kena
Yes, you're right. That's what i'm trying to do.

1605137964
ifreund
x & 1 will equal 1 exactly when the least significant bit of x is 1

1605137970
Kena
Do you mean `& 1` shift right towards the lower bit value?

1605137979
ifreund
no, no shifting

1605138000
ifreund
& is a bitwise and

1605138076
Kena
yes I agree but the following number will represent a bit?

1605138092
Kena
Because it's a comptime_int

1605138187
ifreund
it should coerce to whatever the type of x is

1605138211
Snektron
doesn't @bitSizeOf(@TypeOf(x)) yield the same as @typeInfo(u16).Int.bits?

1605138246
Kena
Allright ifreund thanks. Indeed, Snektron!

1605138261
Snektron
then bit_masking is always 1

1605138317
Snektron
and as a result the function returns true when x is either 1 or 0

1605138393
Kena
Allright, thanks for your help.

1605138681
Kena
fn isEven(x: u16) bool {    return x & 1 == 0;} produces exactly the same error, I don't understand.

1605138984
ifreund
Kena: D is odd

1605139028
Kena
yes you're right I changed it to C to get the even number 252, but now the tests only fails when they check against binary notation.

1605139046
Kena
Can't we test binary number for parity?

1605139050
ifreund
also, please write this as x % 2 == 0, it's much more readable and llvm is smart enough to optimize it to whatever is fastest

1605139104
fengb
0xFFFD = 253

1605139107
ifreund
Kena: your first number is 7 not 6

1605139111
ifreund
both are odd

1605139139
ifreund
as you see, the lsb is 1 for both of them, which is exactly what you are testing

