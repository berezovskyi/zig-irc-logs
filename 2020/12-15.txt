1607990412
pixelherodev
egads please no

1607990473
leeward
mm, my source for LSI feature sizes is not good. It looks like early intel chip VLSI layout was done by hand then shrunk by only a factor of 100 or so. Totally doable for optics.

1607990518
leeward
This is what I get for skipping the silicon classes.

1607991315
marler8997
pixelherodev I'm not coming up with a solution

1607991331
pixelherodev
:(

1607991356
pixelherodev
The traditional solution is "trust the people instead of the tools"

1607991358
marler8997
so I suppose having a handwritten Zig compiler written in C would have a use case here

1607991409
pixelherodev
e.g. I trust the compiler on plan9 because I trust the 9front community

1607991410
marler8997
but wait a second, Dlang would have this same problem of trust

1607991424
marler8997
and I'm pretty sure they have a dlang package

1607991429
marler8997
in Debian

1607991437
g-w1
I think gcc has a backend for it

1607991465
marler8997
yes, but the problem is the backend (Zig's backend is in C++)

1607991469
marler8997
it's the frontend

1607991478
earnestly
pixelherodev: quantum exploits that

1607991489
pixelherodev
earnestly: quantum?

1607991497
earnestly
pixelherodev: nsa leaks

1607991508
pixelherodev
...link?

1607991529
earnestly
pixelherodev:

1607991568
earnestly
This is why reproducible builds exists

1607991570
pixelherodev
Phew; good thing my web browser has no scripting! :P

1607991586
earnestly
They have a suite of tools that attack all parts, dns, etc.

1607992466
pixelherodev
... wow yeah this is more than a tad horrifying

1607992508
earnestly
And it's very old too

1607999736
mla
a fn to take a [*c]u8 string that looks forward for the 0 senintal; and converts to [:0]u8? is there something like that in the std lib?

1608000105
fengb
std.mem.spanZ

1608000357
mla
fengb: nice, works

1608000361
mla
thanks

1608034855
dutchie
are there any guarantees about the number of bits in a usize?

1608035693
ifreund
it's pointer sized

1608035715
ifreund
e.g. 32bits on a 32bit system, 64 on 64 bit system

1608036654
dutchie
so e.g. @as(usize, @as(u64, 0)) will either compile or not depending on the target?

1608036720
dutchie
ok, maybe that's a bad example because 0 always fits

1608036919
ifreund1
comptime std.debug.assert(@bitSizeOf(usize) == 64); would be the way to assert that

1608037249
dutchie
my real question is "how confident can i be that i can do slice indexing with u32" and the answer is "pretty confident as long as i don't start going down some embedded/historical computing hole"

1608037252
dutchie
i suppose

1608038552
ifreund
yep, that sounds about right

1608052954
xackus
the 0.7.1 binary from ziglang.org passes wrong system library paths to lld for me. anyone else had this issue?

1608052967
xackus
works fine if I compile zig myself

1608052999
xackus
it passes /usr/lib/x86_64-linux-musl instead of /usr/lib/x86_64-linux-gnu

1608053370
ifreund
xackus: interesting, could you open an issue?

1608053399
ifreund
I'm not sure how exactly the binaries for ziglang.org were made

1608053407
xackus
i think it uses the triple it was compiled for

1608053451
g-w1
ah, I was also having this problem, that explains it. probably the ci uses musl, but I use glibc

1608053500
xackus
ifreund: i will try to fix it myself first

1608057856
andrewrk
xackus,

1608057872
andrewrk
this should detect the triple rather than assume it from the target-

1608057889
xackus
andrewrk: already made a PR

1608057905
andrewrk
oh nice :)

1608057939
xackus
though I only detect the abi if on linux

1608061434
ifreund
hmm, all the functions in src/Package.zig are dead code

1608061511
ifreund
and we are currently leaking memory and not closing fds when using more than just the root package :D

1608062122
ifreund
why do we have --main-package-path?

1608062737
andrewrk
the main package path decides the root directory that you can't @import or @embedFile outside of

1608062805
ifreund
ah so if you want to have the root source file nested somewhere deeper in the project for some reason?

1608062885
andrewrk
yeah

1608062891
ifreund
I guess a more reasonable use-case would be embedding assets outside of the src directory

1608062895
andrewrk
which is the case if you use `zig test` and then it wants to import something up a dir

1608062959
ifreund
makes sense

1608066013
betawaffle
Xe: are you the one with the blog i've been reading a lot recently?

1608076316
leeward
Is there a way to have a variable with static duration but local (to a function) scope in Zig?

1608076392
fengb
`const Static = struct { const this_is_static = 1; }`

1608076437
leeward
That's a type, and it has no variables.

1608076535
leeward
I'm looking for an equivalent of `int foo() { static int n = 0; n++; return n }`

1608076545
fengb
You can declare variables inside the struct

1608076552
fengb
And it becomes "static" to the scope of the function

1608076581
fengb
`const Static = struct { var n = 0; }; Static.n += 1; return Static.n;`

1608076601
leeward
huh, weird

1608076623
leeward
How does that not violate the type's constness?

1608076678
fengb
Because it's a declaration :P

