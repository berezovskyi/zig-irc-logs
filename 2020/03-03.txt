1583197701
frmdstryr
Shoulding readAllBuffer use max_size + 1? I think this should work

1583197769
frmdstryr
*Shouldn't

1583197901
daurnimator
frmdstryr: does

1583198239
frmdstryr
Yes, since std.Buffer.len = self.list.len -1

1583198254
frmdstryr
std.Buffer shoudl just be replaced with std.ArrayList(u8)

1583198272
frmdstryr
the math in len and capacity makes the performance of it terrible

1583198330
fengb
Maybe we should rename it to BufferZ like mikdusan suggested

1583199274
frmdstryr
Yes, I'd rename Buffer to BufferZ and make Buffer = ArrayList(u8) since people would probably still use BufferZ anyways

1583200249
daurnimator
frmdstryr: I agree with something like that. andrewrk disagreed at first; I'm waiting for him to review #4405

1583200872
alexnask
Yay, finally fixed both bugs that were affecting my Interface implementation

1583200889
alexnask
Or at least affecting natural, non-clunky usage

1583200980
alexnask
daurnimator lol I didn't even know square brackets worked with tuples

1583200995
alexnask
(major facepalm moment)

1583201051
daurnimator
I once suggested using a UUID for the string-key to stop people ever accidently using them

1583201058
daurnimator
"oh no one will ever do that" they said :P

1583201077
daurnimator
"`@"1"` is too awkward for anyone to actually use it" they said

1583201119
alexnask
:D

1583201294
alexnask
Random country flag emojis would have been cool too

1583201345
alexnask
🇬🇷 🇬🇷

1583201447
fengb
🇱🇷

1583201468
fengb
Nothing screams ‘murica like misusing the Liberia flag 🙃

1583201604
gchristensen
interesting. those show up as just very bold, large "GR" "GR" and "LR"

1583201633
alexnask
Too bad there are no Liberian county flag emojis

1583201642
alexnask
I would suggest looking them up for a good laugh

1583201654
alexnask
gchristensen, HexChat doesn't render them either D:

1583201746
mikdusan
export LANG=en_US.UTF-8

1583201762
fengb
🇵🇷

1583201789
fengb
I guess Puerto Rico is special enough to have a country flag?

1583201832
alexnask
🇭🇰

1583201866
daurnimator
fengb: same as 🇬🇺 apparently

1583201939
fengb
I guess territories are more special than states or provinces

1583201970
fengb
“We don’t have rights but we get a Unicode flag!”

1583201998
alexnask
lol

1583202018
gchristensen
easier for the unicode group to mkae a policy which doesn't require them to put themselves on a particular side of issues like HK

1583202057
daurnimator
gchristensen: uhhhhh 🇹🇼

1583202068
gchristensen
erm TW

1583202079
alexnask
🏴󠁧󠁲󠀶󠀹󠁿

1583202080
gchristensen
ack

1583202081
daurnimator
(note: that emoji is legally enforced to be ignored/replaced in china)

1583202089
gchristensen
impressive.

1583202093
daurnimator
IIRC iphones replace it with a picture of tofu?

1583202110
fengb
That sounds... racist lol

1583202183
alexnask
Everyone supports Vatican flag emojis but Mount Athos doesn't even get one :(

1583202247
gchristensen
"tofu" is the widely used term for a unicode symbol which has no specific glyph, so I doubt it is actually a picture of tofu but ... just "tofu" -- the "no glyph" symbol

1583202338
alexnask
Ah, it's the empty square

1583202353
fengb
Oh I thought it was transforming Taiwan into tofu, like turning US into guns or something >_>

1583202366
alexnask
eagles*

1583202412
gchristensen
the Noto font from Google is named for it. ie: no tofu

1583202477
fengb
Stupid aside: bald eagles make the dumbest chirps

1583202499
fengb
The iconic sound is actually a red tailed hawk

1583202507
fengb
My childhood is a lie

1583202562
alexnask
Well my country's (Greece) national animal is the dolphin which also sounds stupid :P

1583202568
daurnimator
gchristensen: oh. maybe. I thought it was because stinky tofu is the national food of taiwan

1583239704
alexnask
Added proof of concept Allocator implementation to std.interface

1583239741
alexnask
Now I just have to test async virtual functions and write a lot of docs and some more general tests and I think it's pretty complete

1583243975
mq32
lul

1583243982
mq32
return; // yields unreachable code

1583243990
mq32
if(true) return; // does not yield unreachable code

1583244207
alexnask
huh

1583246697
WilhelmVonWeiner
how would you make a multidimensional array of strings?

1583246706
WilhelmVonWeiner
hardcoded

1583246912
fengb
const foo = [_][]const u8 { "aaa", "bbb" };

1583247095
WilhelmVonWeiner
why will []const u8 but not [] u8 work?

1583247146
mq32
because []u8 is a mutable slice of u8s

1583247153
mq32
and all literals are immutable by-definition

1583247168
WilhelmVonWeiner
that makes sense

1583247200
WilhelmVonWeiner
if they're known at compile time, why is it not  [_][_] u8 { "s1", "s2" };  ?

1583247220
WilhelmVonWeiner
is there  something  more efficient about making all strings slices even if they're const?

1583247250
mq32
because then you would need all strings to be the same length ;)

1583247268
WilhelmVonWeiner
got it.

1583247269
WilhelmVonWeiner
thanks

1583247315
mq32
you're welcome

1583247427
fengb
"Well actually" you can make variable literals: `var foo = "blah";` makes a variable chunk of memory on the stack

1583247443
andrewrk
WilhelmVonWeiner, you can do [_][2]u8 { "s1".*, "s2".* }

1583247463
mq32
fengb, does that still work?

1583247468
mikdusan
as an excercise: `var foo = [_][2]u8 { "s1".*, "s2".* };` and the lengths must be exact

1583247471
mikdusan
oh andrewrk beat me to it

1583247481
mq32
fengb: well, it would make a mutable pointer to const slice

1583247507
andrewrk
var foo = "blah".*; foo[1] += 1;

1583247518
fengb
Damn you're right. I thought I had this working earlier >_>

1583247567
mq32
yep, it did work at some point in time

1583247605
andrewrk
master branch is going to be broken for a couple days

1583247621
WilhelmVonWeiner
andrewrk: interesting syntax but now it makes sense

1583247635
andrewrk
freebsd has some kind of weird bug

1583247700
shakesoda
why will master be broken

1583247730
shakesoda
failing tests?

1583247733
andrewrk
upstream freebsd bug. if they don't fix it for a few days then we'll freeze freebsd support from the CI / download page for a month while they get their shit together

1583247746
shakesoda
i see

1583247827
mikdusan
instead of selecting "freebsd/latest" how about "frebsd/12.1"

1583247840
fengb


1583247849
fengb
Or should I manually wrap it with another block

1583247876
andrewrk
mikdusan, those are aliases

1583247943
andrewrk
fengb, this language feature is probably going to remain broken until the relevant part of the lang spec is written and and stage2 is implemented

1583247961
andrewrk
break / continue inside inline loops is probably going to remain janky in stage1

1583247984
fengb
I meant breaking to the named for block. It works like a continue but feels weird

1583248020
andrewrk
yeahthat's the same as continue

1583248028
mq32
that's a weird continue :D

1583248031
fengb
Okay cool

1583248061
fengb
Yeah it feels a little weird so I want to make sure I'm not relying on some quirk

1583248070
andrewrk
nah that's intended

1583249779
mikdusan
heh wow. took a try with freebsd/current and same breakage. what. is. freebsd. thinking? jesus.

1583250120
fengb
1 point for not relying on package managers? 🙃

1583250211
gchristensen
a knife to my heart

1583250414
shakesoda
package managers, a plague upon software reliability

1583250593
mq32
software reliability died when we stopped burning the software into immutable eeproms that were shipped to the customer

1583250605
companion_cube
even CPUs are not reliable!!

1583250622
mq32
yeah, because they use software :D

1583250626
mq32
and can be patched nowadays

1583250678
companion_cube
exactly

1583250944
shakesoda
mq32: that's the spirit

1583251004
mq32
btw, my pet language is coming along great today

1583251004
CommunistWolf
mq32: wait until you learn about IoT

1583251014
CommunistWolf
you're going to be so happy

1583251020
mq32
CommunistWolf: i am crying already, isn't that enough?!

1583251061
metaleap
"master branch is going to be broken for a couple days" because "upstream freebsd bug". so to clarify, will it be "broken" for freebsd-ers only, or everyone else too?

1583251117
CommunistWolf
crying with joy, I hope

1583251138
CommunistWolf
because they're shipping millions of devices with baked-in software that can't be updated

1583251153
mq32
haha :D

1583251168
mq32
but with the developer spirit of 2020, not 1990 ^^

1583251186
CommunistWolf
yes, it's much more capitalist now

1583251192
mq32
"ah yeah, if something breaks, we can patch that later… Wait? What do you say? We can't patch that anymore?!"

1583251239
CommunistWolf
something to enjoy:

1583251288
companion_cube
you should be happy, it fuels the botnet industry

1583251334
CommunistWolf
> Basically it seemed that NetThings UK Ltd made remote controlled thermostats and lighting controllers for large retail spaces etc. And their devices had one of BitFolk’s IP addresses burnt into them at the factory. And they could not be identified or remotely updated.

1583251373
CommunistWolf
what I like most about this story is how that's the least insane bit

1583251633
alexnask
lol

1583251646
alexnask
Must be really insane though I should read it

1583251667
alexnask
then*

1583252137
andrewrk
metaleap, to clarify - the CI will be reporting red x's for freebsd, and the download page won't update

1583252191
metaleap
andrewrk ah ok thx!

1583252540
TheLemonMan
andrewrk, keep in mind #4617 if you ever decide to implement pwrite64

1583252689
andrewrk
TheLemonMan, ah, thanks

1583253604
TheLemonMan
7999 commits, nice

1583254529
mikdusan
1001 issues. all kinds of strange digits

1583254598
mq32
it's good that we fluctuate around 1000 issues for a while now

1583254793
TheLemonMan
a lot of those have already been fixed

1583255297
FireFox317
its freaking awesome we now have stack traces in stage1 by code that is in stage2 :O :^)

1583255426
mq32
yep

1583255516
companion_cube


1583255824
mq32
i hope that Zig will keep quite stabe and consistent on language features from 1.0 on

1583255882
andrewrk
after 1.0 the language will pretty much stop accepting proposals

1583255883
companion_cube
or even no new language features :p

1583255907
companion_cube
andrewrk: I thought having implicit async was a bad idea, but a talk by pron changed my mind

1583255918
companion_cube
nice not to have function colors indeed

1583255929
metaleap
companion_cube what talk

1583255951
mq32
<andrewrk> after 1.0 the language will pretty much stop accepting proposals

1583255953
mq32
this is a good idea

1583255965
mq32
C had some changes over the year

1583255970
companion_cube


1583255982
companion_cube
C barely had significant changes to the language itself…

1583255995
mq32
but we can still count them on one hand for 50 years of existence

1583256002
metaleap
thx something to put on the watchlist for the next "burnout preemption day" :D

1583256012
mq32
i think the best change in C was for(int i = …) { }

1583256015
companion_cube
don't be scared by the monad word

1583256045
companion_cube
anyway, it convinced me that imperative languages shouldn't try to become functional languages

1583256073
mq32
yeah, true dat

1583256076
alexnask
Best C feature is _Generic /s

1583256078
metaleap
monads never scared me but the neverending talk about them does :D

1583256131
andrewrk
there are quite a few more breaking changes needed to be done before 1.0 though

1583256132
metaleap
shouldve been called "byo control-flow" from the get-go

1583256134
companion_cube
well it's a talk about not using them

1583256179
alexnask
Aren't error sets and optional types monads?

1583256186
alexnask
Error unions*

1583256196
mq32
andrewrk: can you name some of them? #1717 is one of them probably, right?

1583256199
companion_cube
error sets are effects, not a monad

1583256252
andrewrk
mq32, look for the breaking label

1583256257
metaleap
meh first they modelled/showed "exceptions via monads", later they go "effects are generalized exceptions (not just for errors)" .. smells all similar with minor variations

1583256274
mq32
breaking+accepted would be a good filter, right?

1583256294
andrewrk
yes

1583256340
companion_cube
alexnask: Result<T,E> in rust is a kind of monad (with special support)

1583256347
companion_cube
error sets in Zig are more like an effect, afaict

1583256692
fengb
I like pron’s “reinterpretation” that imperative languages are all about control flow

1583256710
fengb
Never thought of it before but it makes perfect sense

1583256773
companion_cube
idk about that, but it makes sense to keep the existing control flow structures :s

1583260008
andrewrk
fengb,

1583260042
fengb
Oh boy it’s ahead of me :(

1583260522
mq32
so: zig in browser soon?

1583260613
fengb


1583261077
andrewrk
offset=12297829382473034410,  hmmmmmmmmm

1583261088
andrewrk
>>> hex(12297829382473034410)

1583261095
andrewrk
'0xaaaaaaaaaaaaaaaa'

1583261196
mikdusan
so look at any integer last 2-digits '10' with suspicion

1583261220
fengb


1583261309
mq32
mikdusan: 170, 43690, 2863311530, that number above

1583261470
mikdusan
oh neat: { 10, 70, 30, 90, 50 }

1583262966
metaleap
halp! how can this line segfault?

1583263004
metaleap
(the string i pass it still alive in arena, too, no way it's been freed so that cant be it either)

1583263037
metaleap
the `unused` is declared right before the call-site, cant have fallen out of scope while inside `parseStringLiteral`  =/

1583263073
mikdusan
bad_index is bogus

1583263136
metaleap
cant be tho.. i'm passing it a *usize pointing to a local still in scope

1583263178
metaleap
check the call-site: how can it be bogus if its just being written to?

1583263212
TheLemonMan
you have an undefined pointer

1583263220
metaleap
ah cripes! thx

1583263221
mikdusan
the best kind

1583263229
TheLemonMan
you want `var bogus: usize = undefined` and pass `&bogus`

1583263259
metaleap
exactly somehow "i thought i was doing that" even tho the code is right before me. own-code-blindness is worst blindness

1583263273
metaleap
thx gang

1583263326
andrewrk
an undefined pointer might point to something cool!

1583263353
mikdusan
can we rename keyword `null` -> `tofu` and `undefined` -> `bogus`

1583263381
TheLemonMan
undefined pointer + release mode + no MMU = good luck finding what's wrong

1583263393
mq32
"accessed bogus tofu?"

1583263419
nepugia
but what if your tofu pointer points to noto fonts? ;)

1583263500
mikdusan
then it's semantically tofu but not really tofu

1583264144
fengb
#define tofu null

1583266498
metaleap
in a .{} passed to fmt.allocPrint, i can place `if (someUsize(foo)) |n| n else |_| 0` and it compiles, but: `someUsize(foo) catch 0` errors with "expected type 'comptime_int', found 'usize'". using @intCast(usize, 0) gives "cannot store runtime value in compile time variable", same with @as.

1583266547
metaleap
what was I missing that I didnt intuitively predict such compile errors with the smoother `call() catch 0` notion?  =)

1583266859
metaleap
or is this a known edgecase not yet handled..

1583270385
andrewrk
topic will be: demo some recent zig improvements, more casual game dev, and ongoing Q&A  (you don't have to wait until the end)

1583270411
companion_cube
I'd really like it if there was an IRC <-> twitch bridge ^

1583270413
companion_cube
^^

1583270451
andrewrk
this is just a little preview of what decentralized package management will be like ;)

1583270779
mq32
andrewrk, is it possible (in theory or practice) to build a c++17 library with zig cc?

1583270801
andrewrk
mq32, yes

1583270817
mq32
neat!

1583270826
andrewrk
it will be more straightforward to accomplish when

1583270830
mq32
so i can probably get rid of qmake for my pet languge project

1583270857
fengb
ZigPM over all

1583270869
andrewrk
basically with #3089 you can use `zig cc` as a drop-in replacement for `clang`, except it will support cross compiling

1583270976
andrewrk
if that was done before llvm 10 released, it would be pretty funny if we were able to get 30 MiB zig tarballs up with llvm 10 before clang's ~200 MiB binaries

1583271001
andrewrk
"still waiting for clang to build? you can use `zig cc` while you wait"

1583271012
mq32
that would be great :D

1583271024
mq32
you can build your llvm10 with "zig clang" instead of clan :D

1583271041
andrewrk
that would be a good test

1583271160
mq32
huh

1583271166
mq32
zig cc can't find "<stddef.h>"

1583271213
andrewrk
I don't recommend using zig cc until 3089 is done

1583271227
andrewrk
the higher level CLI works fine however (build-exe & friends)

1583271352
nepugia
are you only trying to replace clang or also clang++? :)

1583271383
andrewrk
in the zig compiler that links libclang, may as well expose all of clang, since we already pay the price for it

1583271419
andrewrk
this is not a feature of the zig language; it's a feature of the toolchain which uses clang & llvm

1583271468
fengb
So C-less Zig will be standards compliant?

1583271492
fengb
For fuzzy definitions of standards >_>

1583271765
mq32
[felix@denkplatte-v2 tmp]$ ./hello

1583271765
mq32
CPP Version: 201703

1583271822
mq32
okay, so using clang++ and link the object with zig works :)

1583272053
andrewrk
yes, all the C features of the language will be an "extension" in the spec

1583272122
andrewrk
so you can prepare for the future by e.g. avoiding C integer types when you are not actually interfacing with C code

1583272205
companion_cube
😍

1583272326
mq32
i wonder which font i need to see the smileys companion_cube writes…

1583272420
companion_cube
noto-emoji ?

1583272613
mq32
companion_cube: ♥

1583272618
mq32
thanks, works now :)

1583272633
fengb
💩

1583272647
companion_cube
💃🔋

1583272709
mq32
poo, dancer (female) and battery :D

1583272710
mq32
ha!

1583272714
mq32
no empty messages anymore!

1583272787
pixelherodev
Thanks for the font tip :)

1583272805
fengb
🇱🇷

1583272886
nepugia
heh, i see only two emoji in that message

1583272928
nepugia
​

1583272956
TheLemonMan
andrewrk, if you're in the right mood for some std.fs reworking you could also make the linux version use statx on newer kernels

1583276184
companion_cube
:o N++

1583276191
companion_cube
I loved N

1583278952
mq32
andrewrk: in case you didn't read in twitch chat: windows exe plays sinewave on my setup (x86_64-archlinux-5.5.7, wine-5.3)

1583278995
FireFox317
mq32: still through wine tho xd

1583279009
mq32
yeah

1583279021
andrewrk
pretty sweet, right?

1583279031
mq32
yep!

1583279046
FireFox317
i think it would have been faster if i cross compiled on linux since i have a zig build there and then just run it on windows (have a dual boot)

1583279062
andrewrk
it's also not taking advantage of multiple cores yet

1583279069
andrewrk
that will be a straightforward, notable win

1583279089
FireFox317
but, im already at linking stage, so not its probably faster to wait

1583279094
mq32
the most impressive thing about "zig build" is that it either works, or the problems are easy to debug (usually)

1583279108
mq32
Makefiles are just horrible to debug, even more when autogenerated

1583279169
andrewrk
and we haven't even seen any zig build debug tools yet! it's declarative, so it can do things like show you a dependency graph, or explain why something is not getting updated

1583279203
andrewrk
also multiple build.zig outputs can be merged into one and built together (that is currently vaporware, but it's designed with that in mind)

1583279240
mq32
yeah, also it will build me my crosscompiler foo

1583279274
FireFox317
just using `zig build` on windows doesnt work. I probably have to cross compile to windows on windows? xd

1583279346
FireFox317
i guess its trying to use my system SDL and soundio, but i dont have these installed

1583279378
andrewrk
FireFox317, ah, wait let me try something

1583279490
FireFox317
hmm, when passing the target x86_64-windows-gnu, its failing to find sdl2/sdl.h when doing cimport

1583279520
andrewrk
FireFox317, if you pull latest master clashproto, it should now prefer the gnu abi on native windows

1583279525
andrewrk
so that bare `zig build` works

1583279623
andrewrk
that's strange about the missing header. that sounds like it may be a bug in the build system or even the standard library

1583279718
FireFox317
i think its in the standard library, in the zig-sdl/zig-prebuilt/include there is just one file called SDL2 without extension

1583279763
FireFox317
where as that should have been a directory?

1583279907
FireFox317
oh, that is a symlink. do symlinks work on windows?

1583279923
BaroqueLarouche
Only on NTFS systems

1583279963
BaroqueLarouche
MS calls it Junctions and it is not exposed in the UI

1583279996
daurnimator
BaroqueLarouche: yes only on NTFS; but no they're not junctions

