1604801000
andrewrk
the git shortlog for this release is 3018 lines

1604803111
data-man
andrewrk: tiny PR for release :)

1604809372
daurnimator
oops; I got my days wrong; I thought the release was this morning

1604809386
virgohg
0.7.0 release?

1604809400
virgohg
If that's the case, it is quite nice.

1604817463
marler8997__
g-w1, that seems like a pretty safe and small change to just create a PR

1604838751
Kena
Hello, please what paradigm Zig adopts? It is more related to imperative, declarative or procedural?

1604839109
alexnask[m]
Isnt procedural and imperative basically the same?

1604839128
alexnask[m]
zig fits into the imperative paradigm, to answer your question

1604841448
Kena
Thanks! In fact, the former derives from the latter.

1604841502
Kena
imperative <- procedural <- object oriented

1604841534
Kena
and from another point of view, declarative <- functional

1604850991
hch
hi. this site

1604851053
hch
ziglearn.org addresses zig/master ? i get an error on the very first helloworld

1604851093
Nypsie[m]
Yes as noted in chapter 0, Ziglearn uses master

1604851097
g-w1
I think 0.7.0 is coming out today so you might just want to wait :).

1604851115
travv0
looks like the documentation link for 0.6.0 is called Language Reference instead for some reason

1604851127
hch
indeed

1604851138
g-w1
also std.debug.warn works like std.debug.print on ziglearn for 0.6.0 hch

1604851276
hch
yeah, i'll look at 0.6 docs for now

1604851285
hch
just to get going

1604851335
g-w1
is 0.7.0 coming out today, or did i read something wrong?

1604851387
Nypsie[m]
Yeah today

1604851390
alexnask[m]
It is, Loris is also hosting a release party featuring Andrew on his stream (

1604851534
g-w1
awesome!

1604851640
hch
oh well!

1604851644
hch
congrats!

1604852171
Piraty
can 0.7 build without prebuilt zig?

1604852256
Piraty
geat. Void needs llvm11 first

1604852650
Snektron
Piraty: I made a local version of llvm 11, let me take a look at upstreaming it to void-packages

1604852657
Snektron
i've never done that before though

1604852704
Piraty
i am taking a look of how it's supposed tbd, not sure yet why muliple empty llvmN packages are kept in the tree

1604852734
Piraty
there's a transition phase obviously

1604852737
Snektron
i think the only thing i need to do is bump a few dependencies, and fix some patches that didn't work

1604852765
Piraty
Snektron: join #xbps if you want to help

1604852766
Snektron
i just removed them because it was powerpc anyway

1604852790
Piraty
hehe don't tell that the llvm template's maintainer (he ported Void to ppc)

1604853502
Snektron
oh, turns out whatever that patch did has been fixed upstream

1604857130
Kena96
I have a question about alignment. Each type we use a boolean type, we waste 7 bits rights? As the bool has only 1 bit of values but claim 1 byte of memory. But 7 bits don't represent anything in term of space,  correct? So is there anyway some kind of performance lost in terme in cycle processor required to evaluate an expression including a

1604857131
Kena96
boolean value?

1604857195
Kena96
And/or there is really some space lost too.

1604857198
Kena96
?

1604857715
hch
doc/0.6 mentions "// This header is generated by zig from mathtest.zig" at a few places, but i don't see how that is done.

1604857731
hch


1604857748
g-w1
ah

1604857760
g-w1
it was a regressed feature when the frontend got self hosted

1604857793
g-w1
it is being worked on rn. it is supposed to work with -femit-h

1604857929
hch
passed where? build.zig?

1604857995
Kena96


1604858001
g-w1
zig build-lib lib.zig -femit-h. it should work on 0.6.0

1604858053
alexnask[m]
also LibExeObjStep.emit_h in build.zig iirc

1604858154
hch
i was looking for options to Builder, but

1604858161
hch
thanks everyone, that should suffice

1604858268
hch
lib.femit_h = true;

1604858299
g-w1
it is better to read the standard library, because that documentation is very experimental and doesn't have everything

1604858319
hch
i see

1604858655
hch
femit_h is not part of 0.6, will need to build from master then ...

1604858678
Nypsie[m]
Master does not have support for header generation

1604858689
g-w1
it probably wont work on master, and also you can download master from the website

1604858713
hch
master is not the dev branch?

1604858724
Nypsie[m]
It is

1604858734
g-w1
the feature regressed

1604858822
hch
ok

1604858849
hch
so manual Makefile it is

1604858856
hch
good for learning mechanics anyway

1604865739
kristoff_it
The release party is live, come join!

1604866086
oats
\o/

1604866604
adamkowalski
is there a way to expect a assertion to trip during unit testing?

1604866632
adamkowalski
as in I have a std.debug.assert in my code because I have a precondition that needs to be met

1604866638
adamkowalski
I do not return an error.Something

1604866658
adamkowalski
But I want to demonstrate that if the precondition is violated the assert will be tripped. Can I do that in a unit test?

1604866743
Nypsie[m]
You mean something like `std.testing.expectError(ErrorSet.SpecificError, result);` ?

1604866765
adamkowalski
not quite

1604866785
adamkowalski
so to give an example from the standard library if you have an array the precondtion is that the index is in bounds right

1604866802
adamkowalski
so when you index an array there is probably a std.debug.assert(self.len >= index);

1604866814
adamkowalski
then in a unit test I want to index an array out of bounds

1604866820
adamkowalski
and show that the assertion will fire

1604866826
adamkowalski
so you cannot index the array

1604866856
Nypsie[m]
Aaaah

1604866865
Nypsie[m]
I don't think that's possible actually

1604866870
adamkowalski
I want something like std.expect.assertFires(my_array[my_array.len + 1]);

1604866892
adamkowalski
dang

1604866900
josias
That sounds like try/catch or panic/recover, which iirc is not something wanted in Zig.

1604866909
adamkowalski
I don't really want to recover from it

1604866912
adamkowalski
it's a precondition

1604866925
adamkowalski
but I want to test for it correctly protecting me during unit tests

1604866948
josias
What will it do at runtime outside of tests?

1604866962
novaskell
There's an open issue for it

1604866970
adamkowalski
outside of tests it doens't matter

1604866974
adamkowalski
it's undefined behavior

1604866978
adamkowalski
just like indexing an array

1604866987
adamkowalski
you can't afford bounds checking an array everywhere

1604866992
adamkowalski
but during debug builds you want it

1604867009
adamkowalski
you wouldn't make indexing an array return an error{OutOfBounds}!Element

1604867018
fengb
I have a proof of concept working with that fork

1604867021
adamkowalski
and then have to `try array[i]` everywhere

1604867027
fengb
Haven’t tried upstreaming yet

1604867052
fengb
That fork == monitoring forked child

1604867075
adamkowalski
Do you think that it has a chance to be merged in?

1604867084
adamkowalski
I don't really want to rely on unstandard behaviour yet

1604867094
adamkowalski
for now it's probably fine, i was just hoping there was some mechanism for doing that

1604867102
fengb
I think there’s an older issue asking for this

1604867104
adamkowalski
unless you all have some different way to approach the problem alltogether

1604867112
fengb
So there might be a more native solution

1604867113
adamkowalski
maybe I'm justing thinking about it wrong

1604867135
adamkowalski
I have a bunch of "tables" which have rows and column

1604867137
novaskell
there's also

1604867141
adamkowalski
the rows are conceptually entities

1604867155
adamkowalski
the columns are different attributes of the entities

1604867177
adamkowalski
you get runtime polymorphism by essentially filling out different columns for each entity

1604867188
adamkowalski
then you can say give me every entity with column x, y, z filled

1604867205
adamkowalski
but if you go to the wrong table and say give me information about entity 3

1604867214
adamkowalski
right now it will still give it to you

1604867233
adamkowalski
so I want to tag each entity with the table it came from so you can std.debug.assert(entity.table_id == table.id)

1604867258
adamkowalski
but since entities are at the core of the system, I can't pay for that during release builds, you just need to test the system and ensure that never happens in practice

1604867290
adamkowalski
any ideas?

1604867310
fengb
Assert is the correct solution yeah

1604867404
adamkowalski
okay, thanks!

1604870531
yZ5vlALg86lP
i'm confused, how is this uaf possible?

1604870664
Nypsie[m]
In debug mode, undefined has a value of 0xaaa to make it easier to detect

1604871033
oats
oh that's nifty

1604871303
yZ5vlALg86lP
ah. thx.

1604873834
novaskell
kristoff_it: the ziguana drawing would be amusing on the release notes

1604873910
ikskuh
yes, please!

1604873925
ikskuh
let's ping andrewrk as well

1604874013
ikskuh
\o/

1604874019
novaskell
YES

