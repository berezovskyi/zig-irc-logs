1583368882
daurnimator
mq32: add completion support to your arg parser :)

1583368945
daurnimator
mq32: i.e. have a method "pub fn writeCompletions(enum {bash, fish, zsh}, myoutstream) !void`

1583369253
protty
andrewrk: Realized the issue: the node's `prev` wasn't being reset after being notified so the queue ended up in an error state.

1583373535
vegecode
Can anyone tell me what the recommended way to do type punning is? I'm looking for something equivalent to teh following:

1583373545
vegecode
typedef union

1583373553
vegecode
crap how do i do small code snippets

1583373699
vegecode
I'm trying to do the equivalent of a union in c where one union member is a struct of bitfields like for flags and then the other member is an integer that is the width of all teh flags combined

1583373708
vegecode
Common C idiom for representing lfags

1583373768
vegecode
I think I can make it be a union and then just change the active member by doing a write to the other member with undefined. Is there a better way? Do I just have to shift and mask everything?

1583373831
vegecode
maybe bit casting between a packed struct and the full width type?

1583374008
fengb
packed struct for the bits. Depending on how often you use the full type, a packed union or bitcasting

1583374106
mikdusan
but zig union is one-field active at a time rather than a "bitcast" exchange hub :)

1583374155
fengb
Not packed union

1583374191
vegecode
does a packed union skip the safety check of which field is active then?

1583374197
mikdusan
fengb: ah nice

1583374199
fengb
Yes

1583374201
vegecode
skip it intentionally I mean

1583374220
vegecode
thank you sir!

1583374303
vegecode
One more thing, before I pollute the issue tracker, is it reasonable to request some movement on a proposal? Either accpet or reject. Specifically #4284

1583374480
mikdusan
lookin at #4284 I think you already have an answer: on Jan 25 it was added to 0.7.0 milestone

1583374538
vegecode
That was the day it was opened and the "accepted" label was never added

1583375152
vegecode
I sure hope it's not accepted. I'm quite opposed.

1583375511
andrewrk
Milestones on non accepted proposals mean it's not planned to make a decision until that release cycle

1583375634
vegecode
perfect, thanks

1583377190
daurnimator
andrewrk: can has merges? :)

1583378396
fengb
`self.code % 16 + '0'` lol whoops I fail at hexamath

1583380351
mikdusan
so 0xffff = 0x???? and 0xaaaa = 0x:::: ... I'm ok with that

1583381538
fengb
`i32.const 420` => `.I32 = -15964`

1583381545
fengb
I don't think this is working quite right

1583382526
fengb
`else if (0x40 != 0` I think I forgot a variable

1583382539
fengb
I am so smrt

1583382671
BaroqueLarouche
now I imagine fengb's house in fire

1583382734
daurnimator
forgetting a variable: not even once.

1583382748
fengb
Well, I'm glad I didn't build my own house

1583408317
alexnask
andrewrk, Is it expected behavior that the calling convention and type of inferred async functions is .Unspecified and non-async fn ptr?

1583410538
mq32
<daurnimator> mq32: add completion support to your arg parser :)

1583410545
mq32
never used something like that, can you elaborate?

1583410607
daurnimator
mq32: do you have luarocks installed?

1583410618
mq32
maybe? D

1583410623
mq32
nope

1583410632
daurnimator
mq32: kubectl?

1583410646
mq32
negative

1583410680
daurnimator
uh... okay. so many commands have the ability to output bash/fish/ksh completions for themselves

1583410706
daurnimator
which you tell your shell about, so you can type (e.g.): luarocks in<TAB> and it completes to `install`

1583410726
mq32
hm, sounds useful

1583410737
daurnimator
==> same for all arguments of the program `luarocks --c<TAB>` => `luarocks --config`

1583410752
daurnimator
depending on your shell configuration, people even set it up to have pretty menus and things

1583410770
mq32
can you point me to some docs for this?

1583410820
daurnimator
mq32: I can help most with luarocks's version of it.... cause adding that was the GSoC project I mentored last year :)

1583410856
daurnimator
mq32: what distro are you on?

1583410873
mq32
arch linux

1583410910
daurnimator
mq32: excellent; `pacman -S luarocks` ?

1583410933
mq32
"yay luarocks"

1583410983
daurnimator
mq32: okay, and now have a quick peek: `cat /usr/share/bash-completion/completions/luarocks`

1583411001
daurnimator
(you should see: `source <(luarocks completion bash)`)

1583411016
mq32
yep

1583411057
daurnimator
not sure if you need to start a new shell first, but try typing: `luarocks ins<TAB>` => it should complete to `luarocks install`.

1583411077
mq32
nope, nothing happens

1583411092
daurnimator
mq32: okay, just open a new terminal window

1583411097
mq32
did already

1583411131
mq32
ack

1583411131
daurnimator
mq32: you said you use bash right...

1583411165
mq32
i assume i have to manually add the completion-script?

1583411175
daurnimator
nope. should get picked up automatically

1583411768
daurnimator
mq32: and `luarocks install --<TAB><TAB>` should give you a list of options available

1583411784
mq32
yep

1583411806
daurnimator
mq32: okay, so that's what many end users want :)

1583411847
daurnimator
mq32: now, to delve into how its done: have a look at the output of `luarocks completion bash` => its a large string/bash script

1583411862
mq32
yep, already doing this

1583411870
daurnimator
mq32: that string/bash script is generated by the argument parser inside of luarocks

1583412011
alexnask
stupid question: are fish completions compatible or does the arg parser need to generate a competion file for each shell it supports?

1583412033
mq32
looking at "luarocks completion bash" it seems like fish needs a different file :D

1583412043
daurnimator
mq32: and zsh needs its own too

1583412056
daurnimator
alexnask: they each need their own format

1583412072
daurnimator
hence why the `completion` subcommand takes an argument of the shell...

1583412098
daurnimator
for zsh you'll see /usr/share/zsh/site-functions/_luarocks and for fish you'll see /usr/share/fish/vendor_completions.d/luarocks.fish

1583412104
alexnask
Search Results

1583412105
alexnask
Web result with site links

1583412105
alexnask
👍

1583412107
alexnask
woops

1583422873
dimenus
andrewrk: when trying to link libc on manjaro (glibc 2.31), i'm getting missing 'misc/bits/syscall.h' header

1583422911
andrewrk
dimenus, hmm ok I'm investigating

1583423016
andrewrk
dimenus, can I see the full error output?

1583423106
andrewrk
also can you confirm this is after 3ff2381042 (yesterday)?

1583423114
dimenus
it is, i'll get you a trace

1583423129
andrewrk
I'm confused why I can't reproduce it

1583423145
andrewrk
I don't know what would be different about building it on my system vs yours

1583423796
dimenus
hmmm, deleting my previous build and wiping out ~/.cache/zig fixed it

1583423855
andrewrk
what do you mean by deleting your previous build?

1583423893
andrewrk
oh! is this

1583423897
dimenus
i fully deleted my build folder (i'm not doing a system wide install)

1583423977
dimenus
it's quite possible, in my wayland example i'm only linking libc and i got that error

1583423983
andrewrk
I bet it is 2044

1583424034
dimenus
you're so quick with the issues btw :)

1583424051
andrewrk
it helps when you have them all memorized

1583424068
andrewrk
zig is small enough that it fits in my head

1583424101
dimenus
but yeah, clean build and it works as expected

1583424143
andrewrk
glibc goes nuts with same-named .h files and relying on include order

1583424338
andrewrk
I was looking at porting cache_hash.cpp into zig last night (coincidentally with LeRoyce's PR) and I believe it can be done in O(1) memory, allocator needed

1583424505
dimenus
nice

1583426157
fengb
Debugging raw bytecode is so miserable

1583426560
andrewrk
work on features to make debugging raw bytecode not miserable

1583426571
fengb
Yeah soon™

1583426579
andrewrk
it will pay off big time

1583426621
fengb
Gonna need to revive my sexpr parser so I don't have to write bytecode all the time

1583426721
alexnask
@andrewrk, Would you be ok with a SCOPE_DEFER {...} macro (that creates an object that runs a lambda on destruction) in utils.hpp?

1583426730
alexnask
I want to start freeing a bunch of temporaries

1583426934
andrewrk
alexnask, nah no macros

1583426947
alexnask
Ok

1583426950
andrewrk
sorry

1583427039
andrewrk
I've been thinking, a long term stretch goal of stage1, once we are shipping self-hosted, would be to reduce it to C (not C++) and have it generate C code rather than using llvm

1583427069
andrewrk
then we would be able to bootstrap the (vaporware) self-hosted non-llvm-backend compiler from only a C compiler

1583427137
andrewrk
which is not a pointless endeavor - it would make zig viable to use as a compiler in a fledgling OS or new CPU architecture

1583427198
alexnask
Right (I suppose it would generate C89 too then :P)

1583427218
alexnask
For maximum portability

1583427226
andrewrk
yeah, you get the idea

1583427361
metaleap
from the outside, i'm curious about your eagerness to be potentially/partially/incrementally llvm-independent. does ll not live up to the hype, does it incur friction? too buggy? or is it just general desire for fewer dependencies in-the-very-long-run-future?

1583427461
mikdusan
instead of [stage1 -> C -> stage2] why not [stage2 -> C -> stage2]

1583427461
companion_cube
a language striving to be simple and standard shouldn't depend on a beast like llvm (or rather it shouldn't be a single point of failure?)

1583427487
mikdusan
as in stage2 generates C code

1583427487
andrewrk
mikdusan, because the generated C isn't "source" code and cannot be audited as such

1583427558
andrewrk
it's tempting though. idea would be to do it once, and then sort of "de-obfuscate" it and "sourceify" it

1583427588
andrewrk
sort of what go did when they translated from C, except in reverse

1583427625
fengb
LLVM is an implementation detail, not a spec. We use it for a bunch of really nice features, but it's also has its own quirks and challenges

1583427627
andrewrk
mikdusan, also we'd need to build N versions (one for each target) and then merge them with #ifdefs

1583427677
companion_cube
fengb: well it's kind of influencing the specs of what's an intrinsic, isn't it?

1583427688
fengb
In the near-term, we'd like faster debug builds, which LLVM is somewhat of a bottleneck. Odin and Jai have the same issues

1583427688
companion_cube
with a C backend, how do you provide portable simd? :/

1583427712
andrewrk
companion_cube, same way you emit portable simd when the target cpu does not have simd features

1583427728
companion_cube
by emulating them? fair enough :)

1583427730
fengb
companion_cube: sort of. Intrinsics are what I'd consider "some CPUs have instructions, but we can provide a userland implementation if necessary"

1583427761
companion_cube
ok, I guess that's fair

1583427769
companion_cube
as long as the semantics is the same

1583427778
companion_cube
(same as `popcount` and the likes, actually)

1583427786
mikdusan
if we [stage2->C] to bootstrap onto a platform, that is done just once, and the codegen benefits from all zig userland smarts to see what the target is, etc. and one'offs some C. then we build a (stage2)0 with target host buildtools. and bob's your uncle.

1583427847
fengb
mikdusan: are you british?

1583427873
mikdusan
fengb: nah I just like that phrase

1583427905
andrewrk
metaleap, a lot of the communities that zig wants to reach (people who are currently using C) feel that LLVM is too much of a monoculture

1583427929
andrewrk
...which is true. we need a language spec that is independent of LLVM. and a non-llvm-backend is proof that it is viable

1583427954
metaleap
ah well what i heard in terms of criticism so far is that its a c-focused monoculture :D

1583427981
companion_cube
also, yeah, but that matters more if you either want to use optimizations that are infeasible in C, or if you want GC support :)

1583428001
metaleap
not a bad aspiration for sure, was just curious if there were "burning" reasons or merely "lets become proper-er over time" reasoning

1583428005
fengb
Does Rust have a non-LLVM compiler?

1583428009
companion_cube
nope

1583428016
companion_cube
and it's imho a shortcoming of rust

1583428020
TheLemonMan
they're working on a cranelift-based backend

1583428048
fengb
metaleap: the goal was always there. LLVM merely enables us to ship "production-grade" code earlier

1583428049
companion_cube
what I'm wondering is, wouldn't a wasm (direct) backend be a viable first-class backend?

1583428056
andrewrk
mikdusan, I think that's something worth considering once we are shipping self-hosted and have a C backend

1583428057
companion_cube
no one said languages should only target native architectures

1583428093
fengb
We've also inherited some LLVM baggage... like old coroutines...

1583428149
andrewrk
the goal of bootstrapping is to get from hand-typing hex code directly into an executable file, to a fully featured self-hosted compiler

1583428164
andrewrk
wasm introduces unnecessary steps in that sequence

1583428193
fengb
what about CPUs that natively execute wasm? 🙃

1583428250
fengb
Oh speaking of which, I managed to get my wasm vm execute 1 function with 1 instruction! No longer complete vaporware

1583428264
andrewrk
nice work

1583428690
fengb


1583428764
TheLemonMan
how is that a win?

1583428985
TheLemonMan
andrewrk, is ir_get_ref supposed to work on runtime-known values?

1583428999
andrewrk
TheLemonMan, yes, it creates a stack allocation

1583429081
TheLemonMan
it seems to badly choke on such a value when it tries to call ir_llvm_value during the codegen phase

1583429137
andrewrk
choking on ir_llvm_value  can happen if the instruction incorrectly did not get generated previously

1583429311
TheLemonMan
oh, let me see if that's the problem

1583429465
andrewrk
flexing a little bit on the llvm-dev mailing list:

1583429478
andrewrk
much of that is TheLemonMan's work

1583429518
andrewrk
it took 9.5 hours to run the full zig test suite with debug build of llvm

1583429530
mikdusan
passed?

1583429533
andrewrk
yes

1583429545
mikdusan
you need more ghz

1583429557
andrewrk
need more utilizing cpu cores :)

1583429705
fengb
How important is Zig to LLVM? :P

1583429720
mikdusan
andrewrk: what does your gut say the main focus for 0.6.0 -> 0.7.0 will be?

1583429926
andrewrk
stabilizing the language, specification, and self-hosted compiler

1583430079
TheLemonMan
andrewrk, the source instruction looks fine

1583430117
andrewrk
I think a GenConst with runtime value is suspect

1583430165
andrewrk
TheLemonMan, btw did I ever show you how to use the IR debugging features?     size_t break_debug_id; // for debugging purposes

1583430186
andrewrk
and these functions:

1583430193
TheLemonMan
yeah, I noticed those a while ago

1583430497
andrewrk
damn, 0.5.0 release notes says "it's time to begin on networking in the Standard Library. I expect to complete this along with at least an early prototype of the package manager during the next release cycle."

1583430641
fengb
You have a month to catch up :P

1583430734
andrewrk
we've completed so many things this cycle, and yet reading this old roadmap makes me feel like no progress has been made

1583430743
TheLemonMan
alexnask, awesome work on #4643!

1583430790
alexnask
Thanks

1583430807
alexnask
Tackling #3237 now

1583430898
TheLemonMan
seeing all those red crosses on the PR page makes me really sad

1583430934
andrewrk
TheLemonMan, I'm slightly annoyed at source hut for not using a more stable freebsd version

1583430976
andrewrk
the download page is still getting updated when everything else passes

1583431105
mikdusan
would be nice if they added a 12.1 image

1583431157
andrewrk
if this continues for another day I'll disable freebsd builds entirely

1583431277
fengb
Just highlight all the breaking changes

1583431503
TheLemonMan
isn't 12 the latest stable release?

1583431808
mikdusan
i'm not sure exactly but their 12.1 image somehow fails with pkg commands, and yet "uname -r" matches my vm, and my pkg commands seem to work

1583431911
TheLemonMan
maybe your pkg is new enough to include the patch that fixed the problem

1583431925
andrewrk
IMO it's source hut's responsibility to choose a working version of freebsd

1583431945
andrewrk
and it's zig's responsibility to choose a working CI

1583431953
TheLemonMan
a lot of CI services are affected by that problem

1583431963
TheLemonMan
shit happens™

1583431971
andrewrk
yeah I'll give it a couple more days

1583432638
Guest20151
Assertion failed at /deps/zig/src/list.hpp:31 in at. This is a bug in the Zig compiler.

1583432701
Guest20151
can we make it that this does not happen when simply moving a number of defs to new files and renaming them and all references.... too often when i want to refactor things a bit and clean up, becomes a battlefield

1583432712
TheLemonMan
good job, you broke it

1583432872
andrewrk
Guest20151, yes, we can fix all the bugs

1583432880
andrewrk
it will just take time

1583432922
Guest20151
here's a hint if someone wants to glimpse at your list.hpp:31. i had a couple .zig files all `pub usingnamespace @import`ing a single .zig file (which exists) that itself `pub usingnamespace @import`ed one which.. didnt exist (renamed)  :D

1583432945
Guest20151
maybe can do a repro later

1583432968
TheLemonMan
without a repro there's little or no chances for this bug to be fixed

1583433129
Guest20151
somehow hexchat irc lost my nick, brb. yeah i put a repro in my todo.txt, cant lose flow now =)

1583433422
TheLemonMan
bleh, a lot of std.target.VersionRange stuff ends up in freestanding binaries

1583433945
andrewrk
in release builds? that should not be the case

1583433981
andrewrk
in debug builds, functions called at compile time get runtime versions generated as well. I believe there is an open issue for this. it's tricky because, maybe you wanted to call that function in a debugger?

1583434022
TheLemonMan
yeah, this is related to the missing way to mark some functions as comptime-only

1583434035
TheLemonMan
maybe with a custom calling convention enum?

1583434036
andrewrk
that's an important issue, not sure how to solve yet

1583434044
andrewrk
that's a nice idea

1583434067
andrewrk
that might even solve #425 as well

1583434101
mikdusan
oooh does that mean if a fn is marked comptime-only, I no longer need to `comptime callme()` ?

1583434156
TheLemonMan
that's the idea, I sprinkle `comptime` everywhere because I'm never sure

1583434170
andrewrk
mikdusan, more like `wants-to-be-comptime`

1583434200
andrewrk
if all the parameters are comptime, then it comptime-calls the function

1583434218
andrewrk
you would almost certainly want this for all pure functions

1583434218
mikdusan
^^ with master or with this new feature in mind?

1583434229
andrewrk
with this new feature in mind

1583434271
andrewrk
I think I'm sidetracking the conversation though, because the thing I'm talking about is not really a calling convention, whereas TheLemonMan's idea is

1583434292
andrewrk
if something

1583434320
andrewrk
however all this os version range stuff would not be comptime only

1583434343
andrewrk
and even with "wants-to-be-comptime", it would still leave the issue of generating unneeded runtime functions in debug builds

1583434356
andrewrk
so there are a few different but related things here

1583434390
andrewrk
I haven't thought of an elegant solution yet

1583436671
hugbubby
I'm getting the error "container 'std.heap' has no member called 'page_allocator'

1583436724
hugbubby
Trying to use the code suggested in teh Choosing your Allocator documentation. Does page_allocator not actually exist?

1583436750
hugbubby
the line is:     var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);

1583436772
metaleap
using a real old version per chance hugbubby?

1583436794
hugbubby
0.5.0 sayeth zig version

1583436801
metaleap
it's still in there:

1583436827
metaleap
yeah 0.5.0 is severely out of date, in that version it was called `direct_allocator` if you're reading langref.html pick the one for 0.5.0

1583436845
fengb
It was added semi recently past 0.5.0

1583436908
hugbubby
I'll install gentoo's -9999

1583436920
andrewrk
good plan

1583436932
andrewrk
next release is april 13th btw

1583436943
andrewrk
it's coming right up

1583437010
hugbubby
lit

1583437066
hugbubby
how many ppl here also use gentoo, just wondering

1583437234
waleee-cl


1583437256
hugbubby
lol

1583437317
waleee-cl
great system, but not enough compiletime

1583437531
waleee-cl
(and this is the one and only channel where that needs to be disambiguated from comptime :) )

1583438185
alexnask
lol

1583438215
andrewrk
with mingw-w64 v6.0.0 => v7.0.0: 391 files changed, 45611 insertions(+), 92832 deletions(-)

1583438231
andrewrk
they've really done a lot of cleaning and consolidation

1583438236
alexnask
nice

1583438264
andrewrk
that's for arm, aarch64, i386, and x86_64 btw

1583438275
hugbubby
How do I unsafely access freed heap memory w/ zig uwu

1583438283
hugbubby
promise that's what I want to do

1583438286
andrewrk
mingw-w64 is the only libc zig ships where we don't have to do a bunch of chores to make it multi-arch

1583438287
TheLemonMan
does it still compile for i386? I remember having to patch some header to make it compile with clang

1583438318
TheLemonMan
hugbubby, use a pointer?

1583438324
hugbubby
It's segfaulting >.<

1583438362
andrewrk
don't take this the wrong way, I'm just excited to use this idiom...

1583438370
andrewrk
play stupid games - win stupid prizes

1583438374
alexnask
:D

1583438384
TheLemonMan
show some code

1583438413
TheLemonMan
maybe you're getting a SIGBUS after a page is unmapped

1583438730
andrewrk
TheLemonMan, do you remember any words from the commit message?

1583438741
andrewrk
or files that it touched

1583438776
andrewrk
found it: f83bb3dd9e68899ca39cdddb7d84c2ad1c833d55

1583439226
dimenus
andrewrk: I am not able to replicate joachimschmidt's issue with tetris

1583439231
dimenus
it compiles quickly and without issue

1583439288
andrewrk
dimenus, I think it depends on system c .h files

1583439306
andrewrk
also zig caches @cImport

1583440054
wilsonk
anybody else getting an error when trying to build the clashproto game on linux? The cross compiled version for windows-gnu builds and runs fine, but I get a 'c import failure' for soundio/soundio.h and an error about 'container "c" has no member SDL_SetHintPriority' also?

1583440233
andrewrk
wilsonk, make sure your zig version is updated and you have all the dependencies installed on your system

1583440245
andrewrk
this is exactly the thing a package manager will solve fwiw

1583440265
fengb
Which will have a prototype ready by next release ;)

1583440270
andrewrk
the windows build is working because those dependencies are using packages

1583440285
wilsonk
oh, I thought it was just 'supposed to work' out of the box the way it was written

1583440295
andrewrk
yeah, on windows

1583440318
andrewrk
it doesn't have sdl2 and libsoundio packaged for other OS's yet

1583440637
hugbubby


1583440748
wilsonk
ok, so the second error goes away once I installed the dev version of libsoundio. Works fine now. Thanks

1583440916
fengb
hugbubby: freeing memory also sets the space to undefined:

1583440928
fengb
In debug mode, this is 0xaaaaaaaa

1583440969
hugbubby
Is there a way I can free w/out setting space to 0

1583440994
hugbubby
*undefined

1583441036
hugbubby
Or is this a behavior of all allocators

1583441037
fengb
Um... that'd be a use-after-free bug. What's the usecase?

1583441104
andrewrk
ArenaAllocator doesn't yet have a way to "reset", while keeping all the memory reserved. that would be a nice API addition

1583441104
fengb
Actually in this case I think it's probably page_allocator punting the page back to the OS

1583441125
mikdusan
I think maybe you'll have to make your own allocator that does not markup after free

1583441130
andrewrk
but it would certainly @memset everything to undefined

1583441131
hugbubby
Atm the use case is I'm deliberately attempting to do that bug ;p, but also I would think memsetting upon free is a little costly speed wise

1583441155
hugbubby
Isn't it?

1583441165
andrewrk
yes it is. debug mode pays a lot of cost to gain easier debugging

1583441180
hugbubby
Can you disable debug mode?

1583441196
andrewrk


1583441212
andrewrk
you can also disable it in a given scope

1583441218
shakesoda
arenas are much more useful if you can reset them

1583441225
shakesoda
that's something I do a fair bit in games

1583441258
hugbubby
I'm actually compiling --release-small, so presumably andrewrk is correct and that's not the issue

1583441276
fengb
Try using a FixedBufferAllocator instead of page_allocator

1583441297
fengb
I think it might be arena.deinit / page_allocator.free actually returning the page back to the OS

1583441305
andrewrk
hugbubby, check the implementation of ArenaAllocator. it unmaps everything on deinit

1583441306
hugbubby
thas prob correct

1583441325
mikdusan
fengb: no, currently @memset(undefined) is for all allcoators

1583441361
fengb
Right but his usecase is just dereferencing the address, which shouldn't cause a seg fault if it's still mapped

1583441371
andrewrk


1583441374
fengb
I'd expect garbage instead of a hard crash

1583441381
mikdusan
fengb: but I should point out that's only for the free/destroy's ... deinit is a different story.

1583441424
hugbubby
So.... Does --release small @memset or not. I'm still in the dark here

1583441527
andrewrk
hugbubby, if you're using std.mem.Allocator interface, free() and destroy() are defined to make the memory contents undefined and whether or not memory access will trap is allocator-implementation-defined

1583441551
metaleap
usingnamespace must always have an operand resolving to a struct right? or any container? (all containers can have decls after all)

1583441553
andrewrk
so your use case is deliberately thwarted by the Allocator interface

1583441588
andrewrk
your use case requires resorting to non standard hacks

1583441591
metaleap
(asking for my ast traversals driving the wip LSP prototype =)

1583441596
mikdusan
thwarted is one of those words if you read more than once, it stops looking like a real word

1583441617
andrewrk
metaleap, any container

1583441622
metaleap
andrewrk thx

1583441644
hugbubby
memsetting freed memory seems like its a little handholdey to me tbh

1583441691
TheLemonMan
handholdey? people want even more safety

1583441691
mikdusan
same can be said for array bounds checking

1583441715
fengb
We might as well use a GC at this point

1583441723
hugbubby
^

1583441737
hugbubby
should be the allocator's choice

1583441743
fengb
Real programmers write to empty bus

1583441762
mikdusan
hugbubby: iirc there was talk of moving the responsibility of @memset(undefined) to allocator implementation

1583441773
andrewrk


1583441788
mikdusan
see that? i just mention it and boom. autolinked!

1583441807
andrewrk
that was a re-paste too, I'm so good I linked it before you even said it :P

1583441823
alexnask
:D

1583441824
mikdusan
ahh i missed the first one oh my

1583441834
andrewrk
my fault for posting a URL with no summary

1583441873
hugbubby
I just figure ppl who are going to make their own allocator are also the high frequency trading types who dislike array bounds checking and memsetting unused memory to 0

1583441911
hugbubby
so they can get that 10ns performance boost

1583441913
TheLemonMan
I wrote my own allocator and I do like safety features

1583442031
mikdusan
hugbubby: the good news is that an allocator could condition on build-mode for reset policy

1583442048
hugbubby
^ see that'd be nice

1583442050
mikdusan
but we're at version 0.5.0 still

1583442071
mikdusan
patche welcome

1583442074
mikdusan
*s

1583442213
hugbubby
What do you guys plan to use zig for?

1583442247
BaroqueLarouche
Games mostly

1583442282
andrewrk
BaroqueLarouche has a tutorial repository on making game boy advance games in zig

1583442283
mq32
hugbubby: anything lowlevel

1583442293
companion_cube
sat solvers!

1583442409
andrewrk
I'm going to rewrite my node.js music player server in zig, make a digital audio workstation, an arcade game, experiment with evolving digital organisms, build my static websites, and all the rest of the open source projects in my entire life

1583442467
hugbubby
Maybe when I get rich I'll spend my free time rewriting bloated slow linux ecosystem components in zig idk

1583442471
hugbubby
Like my terminal emulator

1583442544
TheLemonMan
systemd but written in Zig

1583442552
mikdusan
hugbubby: which term emulator is that

1583442576
hugbubby
urxvt

1583442590
marijnfs


1583442596
marijnfs
something like that in zig would be pretty nice

1583442633
hugbubby
If one of you guys write a term emulator in zig that allows copy paste + transparency I will unironically use it

1583442656
hugbubby
Just make sure it doesnt trample on any of tmux's domain, so no tabs/other bullcrap

1583442680
companion_cube
tabs are good :-°

1583442706
fengb
Spaces are better 🙃

1583442715
companion_cube
heh, yeah, but not in terminals

1583442720
marijnfs


1583442743
hugbubby
Tmux in one term for me. Tabs=cope

1583442750
shakesoda
tabs > getting impaled > spaces > terminal tabs

1583442761
andrewrk
what did I do to deserve a tabs v spaces discussion happening today

1583442766
shakesoda
hah

1583442770
BaroqueLarouche
haha

1583442787
TheLemonMan
tabs are 4 spaces, therefore tabs > spaces

1583442810
mikdusan
I have no idea why you guys are talking about an old softdrink

1583442811
shakesoda
my tabs may be 3 spaces, but the logic still checks out

1583442813
marijnfs
shit, thats pretty good

1583442814
fengb
I had a friend argue that tabs are 3 spaces. He is no longer a friend

1583442822
shakesoda
uh oh

1583442832
hugbubby
the garbage collectors want you to use terminal tabs

1583442854
companion_cube
I like my tabs to be $(random 3 5) spaces

1583442863
TheLemonMan
tabs are &ts spaces

1583442864
hugbubby
they also want you to use many instances of the same terminal like a barbarian instead of one tmux term

1583442876
fengb
Has anyone used fibonacci tabstops? :P

1583442879
companion_cube
wait, do you only have one terminal?

1583442926
hugbubby
I have one terminal. Every time I open a terminal, it either creates a tmux session or attaches to the existing one. I create new windows/splits when I need to do new things, like I do with a browser

1583442930
hugbubby
It's the way god intended

1583442963
shakesoda
i just make more terminal windows if i need them

1583442981
shakesoda
they even get allowed to do barbaric things like overlap

1583442993
companion_cube
hugbubby: ah but you still have multiple terminal windows? 😌

1583443084
fengb
I don't actually run executables. They're all applets running in my browser

1583443087
hugbubby
I do not. I have the one, 99% of the time. Its basically useless

1583443114
hugbubby
The only time I use the second behavior is when I go to a different tty with alt-fn-x

1583443158
TheLemonMan
everyone knows productivity scales linearly with the amount of terminals open

1583443161
alexnask
andrewrk, I think my PR broke the stage2 build >.<

1583443232
hugbubby
Just realized andrewrk is the guy

1583443269
hugbubby
thx for the lang, I like making excuses to code in low level languages and you have enabled me

1583443274
alexnask
Not sure how we get to that realloc without getting to realloc with old_count=0 and new_count=2 though Im looking into it

1583443279
alexnask
new_count=1*

1583443311
mikdusan
somebody is hammering the merge button

1583443343
alexnask
Also not sure how it passed the tests on my machine and on the CI servers

1583443345
alexnask
:p

1583443357
andrewrk
alexnask, building stage2 isn't covered by tests currently, it's bit rotted a bit

1583443368
andrewrk
I was just about to go in there and freshen things up

1583443476
andrewrk
hugbubby, glad to hear it

1583443545
mikdusan
alexnask: please tell me that's not how your fonts looks and is an artifact of image uploading

1583443601
TheLemonMan
antialiasing is for the weak

1583443754
mikdusan
ah yeah I got the same crash with `zig build --help`

1583443772
tdeo
should the std.os wrapper for sendmsg set the MSG_DONTWAIT flag on the header with an event loop instance? it currently doesn't, so it seems like non-blocking io won't work with it automatically

1583443836
tdeo
oh never mind that :( i think this wrapper was added my me in my local branch a few weeks ago and i forgot about it

1583443857
tdeo
(but should it? i want to pr this when i'm done)

1583444237
mikdusan
alexnask: so on your crash: try reversing 371c21aa70fc61ef703e34079ce6de6c52ec91df

1583444294
alexnask
Yeah the thought crossed my mind although I think the issue is that we are only allocating src_fiel_count on the struct_val and not src_field_count + gen_field_count

1583444300
alexnask
So I will try that first

1583444337
alexnask
Or something like that

1583444387
TheLemonMan
hm, gen_field_count should always be <= src_field_count

1583444526
mikdusan
ok I regressed something.

1583444920
TheLemonMan
alexnask, I'm still seeing #3878 in #4619 :(

1583444958
TheLemonMan
I've applied your patch to the tuple_mult code path but the deref fetches an undefined value

1583445021
alexnask
Weird, my tests use values from a tuple passed as a comptime var parameter

1583445082
TheLemonMan
the problem is still there if you try to cast the result of an addition between two tuples to an array :\

1583445104
TheLemonMan
it's like the resulting fields are never written back to the result_loc

1583445864
alexnask
mikdusan, I think my commit is the problematic one, testing a couple of ideas and will let you know asap I have something

1583445895
mikdusan
alexnask: no probs. I'm putting some hooks on that container usage to see if I can prove/disprove safe-to-put-into-arena

1583446452
andrewrk
alexnask, I think checking the AST node is a smell

1583446802
andrewrk
gonna revert that for now, sorry

1583446867
alexnask
Ofc

1583447512
TheLemonMan
andrewrk, if I have an "empty" result_loc with a struct type that's initialized as undefined, now if I fill it in field-by-field do I have to somehow reset its undefined state first?

1583447776
andrewrk
by empty do you mean ResultLocIdNone?

1583447803
TheLemonMan
yep

1583447859
andrewrk
ResultLocIdNone means there is no parent result loc, and if there needs to be a result location, then it will be created as a temporary (as a stack variable). For examle, the result location of a function call parameter

1583447943
andrewrk
I'm not sure I follow- in zig semantics, an undefined struct means all the fields are undefined. so if you define all the fields then the struct is no longer undefined

1583447984
TheLemonMan
yeah, that's what I expected, but even though I'm filling in this structure all I get back is `undefined`

1583448036
andrewrk
in the compiler guts, you would need to set the ZigValue::special to not be ConstValSpecialUndef anymore on the struct value

1583448066
andrewrk
but I would expect that to happen when the fields are allocated

1583448112
andrewrk
hmm this is making me realize that my plan for how to safety detect undef of structs at runtime is flawed

1583448209
TheLemonMan
there's something that's not setting that flag then :\ no idea where the problem is tho

1583448225
andrewrk
it should be when x_struct.fields is allocated

1583448251
andrewrk
similar to expand_undef_array - the value itself no longer becomes undefined, and each field becomes undefined instead

1583448305
TheLemonMan
hmm, I'm not setting any x_struct field here

1583448323
TheLemonMan
I only create the type and let the result location allocate a slot for it

1583448424
andrewrk
I can look into it in a bit

1583448537
TheLemonMan
sure thing, I've hit a few dead ends while trying to debug this problem and am a bit stumped

1583449447
mikdusan
andrewrk:

1583449506
mikdusan
1 liner: nuke their file which overrides "quarterly" to "latest"

1583449678
andrewrk
👏 👏 👏

1583449791
andrewrk
now to find out if we've broken freebsd in the last 3 days

1583449798
mikdusan
I'll check my local vm

1583449981
TheLemonMan
I'm logging out for today, if you have any news about the result_loc thingie please write it down in the PR

1583449983
mikdusan
confirmed: `install` fails same error on my freebsd vm

1583449985
TheLemonMan
peace

1583450042
andrewrk
peace

1583450237
andrewrk
mikdusan, when in doubt, don't put stuff in the arena. basically anything that needs the concept of "reallocation" should not go in the arena

1583450483
marijnfs
for (var i = 0; i < 10; i += 1) {} gives me: Expected expression, found var

1583450484
marijnfs
howcome

1583450505
alexnask
This is not zig code :-)

1583450538
alexnask
you want `var i = 0; while (i < 10) : (i += 1) { }`

1583450546
marijnfs
ah k

1583450564
marijnfs
i was grepping zig code, but now see it was javascript:)

1583450568
fengb
Proof that zig is inferior to JS? 🙃

1583450574
alexnask
:D

1583450748
marijnfs
If i dont define var i : i64 = 0 i get issues

1583450767
marijnfs
just var i = 0; gets me error: variable of type 'comptime_int' must be const or comptime

1583450768
marijnfs
:O

1583450804
alexnask
a right mb

1583450818
alexnask
literals are comptime only types

1583450841
alexnask
integer literals are comptime_int which is a comptime only type **

1583451346
marijnfs
what is the comptime literal, the '0'?

1583451463
alexnask
Yes, 0 is an integer literal :)

1583452045
marijnfs_
can't comptime be assigned to a runtime var?

1583452058
marijnfs_
other way around I understand is not possible, but this seems strange

1583452217
alexnask
marijnfs_, comptime_int, type, comptime_float are comptime-only types

1583452262
alexnask
But comptime_int and comptime_float can be casted to regular types (they coerce to integer/fp types)

1583452294
alexnask
marijnfs_, If you explicitly make a comptime u64 (for example) you can implicitly use it in a runtime context

1583452699
mikdusan
andrewrk: weird. I needed to do the same thing 1141bfb21b82f8d3fc353e968a591f2ad9aaa571 to FreeBSD

1583452752
andrewrk
mikdusan, that's good to know

