1579305603
daurnimator
andrewrk: 501(c)(3) status is a lot of filing.... which is time not coding

1579305628
andrewrk
that's what the 5,000 USD is for

1579305646
daurnimator
thats to get there

1579305655
daurnimator
once you're there there's constant ongoing work

1579305707
daurnimator
the other thing to consider is international things.... e.g. I was talking to the SFC people about accepting deductible donations from anyone

1579305729
daurnimator
setting that up is a huge undertaking which I don't consider within the capabilities of e.g. a zig org

1579305810
andrewrk
Yeah that is the main reason to favor joining SFC or similar umbrella org

1579305872
daurnimator
andrewrk: aside from essentially having lawyers on retainer that would be able to e.g. solve the connectFree issue for us?

1579305919
fengb
What would you give up joining SFC?

1579305962
andrewrk
I'm not sure there is even an issue there, but regardless - that's just it. We don't really have them on retainer, we would be asking for pro bono work and hoping they care enough or have the time to spend

1579306013
andrewrk
Consider we don't even have an offer to join. My application was ignored for 6 months. SFC means relying on an unreliable partner to get things done

1579306020
daurnimator
fengb: the only thing is some percentage of donations go to the SFC (to pay admin/lawyers/outreach/etc). I think its 15%?

1579306029
andrewrk
We would be giving up autonomy

1579306052
daurnimator
andrewrk: FWIW I know the reasons for that. They put a stop on accepting new applications; all existing members had full service.

1579306127
andrewrk
That sounds promising

1579306195
daurnimator
andrewrk: infact they still have a stop on accepting new applications... I had a chat to them and got an exception for us...

1579306325
andrewrk
Yeah! Nice work on that for sure

1579306410
andrewrk
here's the bottom line though: we already have missed some opportunities that would have been available with an org. SFC has not accepted the application. Do we wait and hope, or take matters into our own hands?

1579306440
daurnimator
andrewrk: SFC has not accepted it? didn't you only send it yesterday?

1579306524
andrewrk
I applied many months ago, but you apparently unlocked the "real" application

1579306552
daurnimator
Correct

1579306562
andrewrk
I received no response or timeline from them

1579306592
andrewrk
Which is fine, but im just making the point of autonomy

1579306594
fengb
andrewrk used public application. It’s not very effective...

1579306799
andrewrk
I think we may be in a position to take in substantial amounts of income to the org, get contributors paid for their time, maybe even get people jobs, and do some good in the world for once rather then trying to line the pockets of stock holders

1579306864
andrewrk
I want to prove that a non profit is a better way to run a business than a for profit company

1579306898
rankao
I think it can be.

1579306950
rankao
zig is a c compiler is a pretty lovely feature. I was going to start playing with someones AOE II implementation in C99. Got it running, but then realized it relies on the original CD release. So that plan kind of disappeared. But I appreciate the work you did on that andrewrk. It was really simple.

1579306993
lupine
abolish capitalism \o/

1579307000
daurnimator
andrewrk: have you had offers of funding? from whom?

1579307091
andrewrk
yeah, the company that ran the ETE conference that I gave that talk at

1579307102
andrewrk
there were a couple other things which I can't remember at the moment

1579307140
andrewrk
I'm happy to continue this conversation tomorrow; I'm off to spend my friday evening playing an arcade game with friends

1579307162
daurnimator
k. I'm on a 2 hour journey delayed by rain :P

1579307168
fengb
Have fun

1579307205
andrewrk
someone tell rankao if they come back they can probably find AOE II CD rip on the pirate bay

1579307257
fengb
But you’d never support anything so illicit!

1579307488
andrewrk
I'm pretty sure it's legal if you own the CD, and who doesn't own the CD, right? they probably just lost it ;)

1579307667
rankao
I'm sure it's in storage somewhere

1579307734
frmdstryr
we used to have AOE lan parties in high school. everything was on one network

1579307855
frmdstryr
the librarians didn't like it though

1579307884
tane
E=mc² trooper ..

1579307937
frmdstryr
how do you turn this thing on

1579307977
tane
isn't this a bazooka sportscar?

1579308184
frmdstryr
Was there two cars? I only knew about the cobra

1579308222
tane
hm, I only remember this one

1579308416
keegans
is there a way to convert integers to []const u8 (strings) in the Zig standard library?

1579308508
daurnimator
keegans: look in std.fmt

1579308537
keegans
thanks

1579308720
mikdusan
andrewrk: if PR builds clean, I'd like to again try for cmake merge and watch for need to revert if it doesn't give all passes. If you'd rather I hold off please let me know.

1579308729
mikdusan
pr #4215

1579310386
terinjokes
my first (currently backburnered) zig project was to implement new executables for my favorite old DOS/Win9x games. Drop the binary in the same directory as the assets and you're good to go

1579310409
terinjokes
then i remembered I know how to make servers, not games :p

1579312067
fengb
I’d expect a lot of people here are not doing what they’re comfortable with. Learning is fun!

1579312616
daurnimator
lunamn: non-exhaustive enums should make your std.net.dns PR nicer :)

1579312656
lunamn
daurnimator: oh damn it got merged, nice

1579313958
fengb
Enum all the things

1579314149
hryx
mikdusan: I woke up in the middle of the night and figured a way out of the #4155 problem. Now, instead of no compile error, we get a different (but legitimate) compile error. I think it might be ok in this case though, with andrew's blessing -- I'll finish implementation when I get home tonight

1579314331
hryx
after one more night of studying ir.cpp, I think my comments in that PR are a little naive in retrospect. each day I understand one new thing about the zig IR pipeline

1579314350
mikdusan
oh mine too. but that's ok

1579314381
mikdusan
I said "and can this be forced comptime". it is only comptime - never gets out of IR analysis .

1579314391
fengb
I just hope I can absorb knowledge through osmosis in here

1579315081
mikdusan
just merged a cmake fixup (2nd try) previous one broke linux; if anyone has issues building zig like `Unable to find zig lib directory` let me know and I'll in shame revert it again

1579316599
wilsonk
mikdusan: seems to build fine on linux for me (two different machines), just so you know

1579316698
mikdusan
wilsonk: good to know thanks

1579320436
wilsonk
is @sqrt still supposed to work with Vectors? This program used to work (

1579321266
daurnimator
wilsonk: broken LLVM module is a bug either way

1579321272
daurnimator
but I would expect its meant to work

1579321988
wilsonk
yeah, I was more wondering if I missed some recent change that would trigger this. I will file an issue

1579324643
andrewrk
daurnimator, you have my partial, divided attention, but I can help with then next step of linking thing

1579324846
daurnimator
andrewrk: sure

1579324851
andrewrk
for starters, try adding abort() to lib/std/special/c.zig. It can probably just call std.os.abort()

1579324950
daurnimator
andrewrk: so last thing we hit was missing symbols without -lc, and hitting an unreachable with -lc (as the -lc paths only really handle linux from my reading)

1579324981
andrewrk
I thought we were doing -lc -target riscv64-freestanding-musl

1579325012
daurnimator
okay so going down the -lc route?

1579325136
daurnimator
06:38 <daurnimator> adding -lc gives: Assertion failed at /home/daurnimator/src/zig/src/link.cpp:1484 in get_libc_crt_file. This is a bug in the Zig compiler.

1579325395
andrewrk
go up the stack a bit, we have to figure out what the linker line should be for this target

1579325399
andrewrk
no libc start files maybe?

1579325456
andrewrk
that's probably right. so go up the stack to where it's trying to put start files on the linker line, and make an exception for freestanding, to not do that

1579325804
daurnimator
andrewrk: so I have a file crt0-vexriscv.S, I had just compiled it into my object fies

1579325809
daurnimator
*files

1579325891
andrewrk
where does that come from?

1579325906
andrewrk
it sounds like a freestadning libc is being provided by a third party?

1579326069
daurnimator
sort of I think? I think I'm meant to download newlib?

1579326074
daurnimator
I'd like to not use their if I can...

1579326229
andrewrk
can you remind me of the context here?

1579326290
andrewrk
what are you working on?

1579326331
daurnimator
andrewrk: its a FOMU: its an FPGA that fits inside a USB-A port. it comes with a riscv core installed. they include examples of targetting it with C and Rust. I want to use zig.

1579326371
daurnimator
andrewrk:

1579326466
andrewrk
I'm sure you could follow the example substituting zig for rust here. But I suppose the question is whether we could take advantage of zig's freestanding libc rather than using whatever solution they have put together

1579326703
daurnimator
andrewrk: they seem to use some toolchain that generates C defines given the FPGA stuff: with @cImport we can take advantage of that. not so much if we use the rust base

1579326769
andrewrk
the way I would think about this is to break it down into sort of "dependencies". what actually needs to happen to make this stuff work?

1579326948
daurnimator
andrewrk: okay so my goals for now are: follow the C tutorial except swap in the gcc and newlib dependencies for zig ones

1579326967
andrewrk
that sounds like a productive goal

1579327412
daurnimator
I... feel underprepared here

1579332020
daurnimator
andrewrk: I don't know what I should be doing next

1579332403
andrewrk
on the riscv thing?

1579336263
MaiDouH
Hi everyone!

1579336296
MaiDouH
Just got started zig-ing last night!

1579336330
MaiDouH
pretty excited!

1579336413
gonz_
MaiDouH: Welcome! :)

1579336759
MaiDouH
Thank you!

1579339172
metaleap
morning all! 2 questions on `zig_cache` dir: can a different name be specified in my `build.zig`, and does it also cache intermediate files for "outside deps" incl zig stdlib? i assume so, noticing that there's no `zig_cache` in $ZIGPATH/lib/zig/std/

1579339396
gonz_
It caches c imports, yes, but if you have straight up source deps it'll bake them into your artifacts, AFAIK

1579339453
gonz_
The C imports it has to translate into usable files, etc., so they are stored in the cache directory to not be rebuilt again.

1579339494
gonz_
`rm` your cache dir and do a single build to see exactly what one build actually entails.

1579340161
metaleap
oh i thought its also for incremental (zig) build logic, regardless of C. thx

1579340205
metaleap
like caching semantic-analysis intel, to be picked up for unchanged files or some such

1579340371
MaiDouH
I have a question regarding zig's `switch` statement. As a background, I am making a chip8 emulator as a learning project. I currently implementing the instruction decoding using a big `switch`statement. In case you don't know, instruction are 16bits, big endian numbers, and they use 4 4bits numbers to encode instruction. For example, a jump

1579340372
MaiDouH
instruction would be `0nnn` where `nnn` is the 12bit address of the intruction to jump to. A mor e interesting example would be adding 2 register, `8xy1` does `vx = vx + vy`, where `x`and `y` are refers to register the register "id" (v0...vF). The question is: is there a way to express this kind of rules in a single `switch`, or should i go the

1579340373
MaiDouH
same route a C with nested `if`s while gradually decoding the instruction? Thanks for your time, i hope i am clear with my question.

1579340380
MaiDouH
I have a question regarding zig's `switch` statement. As a background, I am making a chip8 emulator as a learning project. I currently implementing the instruction decoding using a big `switch`statement. In case you don't know, instruction are 16bits, big endian numbers, and they use 4 4bits numbers to encode instruction. For example, a jump

1579340381
MaiDouH
instruction would be `0nnn` where `nnn` is the 12bit address of the intruction to jump to. A mor e interesting example would be adding 2 register, `8xy1` does `vx = vx + vy`, where `x`and `y` are refers to register the register "id" (v0...vF). The question is: is there a way to express this kind of rules in a single `switch`, or should i go the

1579340381
MaiDouH
same route a C with nested `if`s while gradually decoding the instruction? Thanks for your time, i hope i am clear with my question.

1579340393
MaiDouH
Oops. sorry for double posting

1579340902
mq32
hey MaiDouH

1579340924
mq32
it looks like the chip8 is using nibbles to encode it's instruction?

1579340965
MaiDouH
mq32 It does yes.

1579341092
mq32
one approach would be using a packed struct, but those are currently a bit broken

1579341097
mq32
so i'd go with this approach right now:

1579341106
mq32


1579341199
mq32
or you can probably say something like "0x0000 ... 0x0FFF => …," and switch over the whole instruction as one

1579341206
mq32
but i don't think this will create efficient code

1579341418
MaiDouH
Thank for the response. I'm currently using the approach '0x0000 ... 0xFFF', but couple of instruction are identified by the first AND last nimble, which means i have overlaping range ('0x8001 ... 0x8FF1' for OR, `0x8002 ... 0x8FF2` for ADD etc.). I think i will follow your recommended approach. It does look like a packed struct would do the trick

1579341418
MaiDouH
though, looking forward to them being fixed soon!

1579342883
daurnimator
andrewrk: yes on the riscv thing

1579342940
metaleap
muh goto! i cant think of a succinct way to put this use-case into a goto-less form cleanly & concisely. ugly non-solution with multiple duplicate/identical "failure"(but-not-err) branches:

1579343087
metaleap
simple example, real world would have even more diverge-to-"fault"(but-not-err)-handling-path points. cant "call into" a labelled block either afaik. and the handling would usually also have more than just one statement.

1579343176
daurnimator
metaleap: `defer if (not ok) mem.free(bytes)`

1579343219
daurnimator
though really, instead of returning `null` on invalid bytes it might make more sense to `return error.OutOfRange` or something

1579343227
daurnimator
then you can just use `errdefer`

1579343231
daurnimator
would be nicer for your users too

1579343243
metaleap
nah in this usecase it's to be an optional

1579343248
daurnimator
why?

1579343278
metaleap
& thx btw daurnimator. now wait, unlike go, in defer the evaluation of ok and mem and bytes would be not when calling defer but when it eventually runs?

1579343292
daurnimator
metaleap: correct

1579343305
daurnimator
metaleap: `defer` takes a block or a statement to defer.

1579343477
metaleap
good to know! the reason as to "why" is that it is a test of the nature of the unknown incoming list, it's not an error case and I prefer to not "reuse" the `error`s enums facility, neat as it is, for handling "business logic" variants/enumerants/state-space  =)

1579343547
daurnimator
metaleap: you're already returning an error.

1579343553
metaleap
yeah for alloc

1579343558
metaleap
because that

1579343587
daurnimator
metaleap: but also, errors are recoverable for a reason. e.g. ENOENT turns into a zig error. but sometimes missing files just mean you have to make a new one

1579344003
metaleap
sure thing. in my current world-view, errors signal invalid faulty inputs (or lower-level/machine/kernel/hardware faults), but optionals signal "is a thing or not" testing on inputs ;D  in this situation otherwise the user would have to switch-on/dissect the error and sorta "recover unless its mem-alloc error or cosmic rays", now they can `const myopt = try foo()` then proceed after the try. anyway will see how defer goes here now

1579344053
daurnimator
metaleap: lower level machine/kernel faults should be panics. errors are for recoverable things :)

1579344112
metaleap
well ok fair enough but still i dont foresee my code "recovering" from allocator errors for the foreseeable future.

1579344157
daurnimator
metaleap: e.g. imagine you're writing a library; and a http server decides to use your library: it should return 503: not crash the whole servr

1579344236
daurnimator
(in the case of low memory)

1579344319
metaleap
my lib doesnt crash :D if there's an error it goes to the caller. if it's a server consuming it, it shouldnt crash, whereas my current-stage dummy non-daemon-y fire-and-forget local console apps absolutely must :D

1579344692
daurnimator
metaleap: I don't love your lack of braces

1579344716
metaleap
daurnimator: the ok/defer pattern helps smoothen this situation decently thx again! i didnt consider it as my `defer` conception was precolored by go

1579344834
metaleap
tricky topic , braces. as long as zigfmt keeps working as nicely as it currently does, i'm not currently seeing potential foot-guns here yet.. but then I'm blind in infinite ways (compared to the total amount of knowledge & truth in the universe, which must be exactly 1 infinity).

1579346611
daurnimator
Is there a way to put two enums together?

1579346802
daurnimator
huh... where are all the ENSR constants from?

1579347039
betawaffle
is there a way to write a "naked" function that takes arguments in specific registers?

1579347064
betawaffle
such that llvm wont attempt to use those registers, fucking everything up

1579347144
betawaffle
i've been trying to write my x86 kernel _start function, and having a hard time reading out EAX and EBX, while also setting ESP

1579347168
mq32
betawaffle, there is a way to do this

1579347211
mq32


1579347346
betawaffle
mq32: ok, some questions, one of which is unrelated to my original question

1579347385
daurnimator
wow some zig files have gone through a lot of renames

1579347395
betawaffle
1. i see that a section isn't being given explicitly for `kernelStack`, is that because `= undefined` implies the .bss section?

1579347501
betawaffle
2. I see it's using global variables to store those values. is there no way to tell LLVM "hey, just bind this name to the register"

1579347546
mq32
betawaffle, i tried to bind it to registers, but i had reasons not to do it

1579347552
mq32
i think it didn't work at this position

1579347571
mq32
i recommend using inline assembler if the registers are relevant

1579347586
mq32
and to 1: it's undefined because i pretty much don't care for the contents

1579347594
betawaffle
k, not a big deal, i think this can work

1579347620
mq32
and thanks for the inspiration for a thing!

1579347632
betawaffle
what did i inspire?

1579347636
mq32
it would be cool if zig would introduce not only .bss but also .uninitalized

1579347669
mq32
because on microcontrollers or similar it can make a difference if you have to initialize code or not in the bootstrap environment

1579347683
betawaffle
oh, .bss is defined as zero filled, and .uninitialized would be defined as literally uninitialized?

1579347760
betawaffle
what is responsible for the mapping of section names to the semantics that go with them (by convention)?

1579347841
mq32
it depends on the loading process

1579347845
mq32
on microcontrollers, it's "you"

1579347853
mq32
you have to code your bootstrap environment yourself

1579347865
mq32
on Linux/Windows, it's the ELF loading in the OS

1579347872
betawaffle
eventually i'd like to get into firmware with zig

1579347892
betawaffle
like, run zig code right from the reset vector

1579349035
daurnimator
Assertion failed at /home/daurnimator/src/zig/src/ir.cpp:28963 in ir_analyze. This is a bug in the Zig compiler.

1579349048
daurnimator
Assertion failed at /home/daurnimator/src/zig/src/analyze.cpp:5553 in type_has_bits. This is a bug in the Zig compiler.

1579349065
daurnimator
^^ hit while playing around with non-exhaustive enums. No time to investigate right now

1579349218
betawaffle
do people normally put /path/to/zig/build/bin in their PATH, or is there a nicer way to use master zig?

1579349300
mq32
betawaffle: i have zig in ~/software/zig-current

1579349325
betawaffle
the repo, or the build dir?

1579349329
mq32
and an updater script that will create a new folder in ~/software/zig-0.5.0-sodhffd and will update the symlink what is in PATH

1579350316
betawaffle
hmmm, i just switched from 0.5 to master, and i'm getting this:

1579350316
betawaffle
./src/main.zig:12:8: error: invalid token: 'Symbol'

1579350316
betawaffle
export nakedcc fn _start() noreturn {

1579350324
betawaffle
at the `nakedcc`

1579350335
betawaffle
what am i doing wrong?

1579350434
betawaffle
oh i see, changed to `callconv(.Naked)` ?

1579350535
mq32
yeah i think the calling conv thing was changed

1579350568
betawaffle
arg, looks like the vscode plugin isn't completely compatible with master

1579351011
betawaffle
is there a way to control the location of the tag in a packed union?

1579351066
betawaffle
i need it to directly precede the data

1579351136
mq32
betawaffle: i think you have to do it manually then

1579351148
mq32
struct { tag: TagType, value: union { } }

1579351210
betawaffle
the packed union won't try to add its own tag somewhere?

1579351263
mq32
if it's a union without tag, yes

1579351267
betawaffle
oh i see, they are different things

1579351276
betawaffle
sorry i forgot that

1579351277
mq32
you can use extern union and get a classic C union

1579351345
betawaffle
is there a difference between a C union and a packed union?

1579351476
metaleap
`zig build` doesnt seem to directly consume "compiler options" from `zig --help` such as `-fdump-analysis`. does everyone who wants this need to tweak every project's `build.zig` to read those in and set up the Builder, or is there some automatic-args-propagation way?

1579351984
mq32
metaleap: the idea of zig build is that you specify a certain set of compiler flags in build.zig and make those flags that are

1579352095
metaleap
gotcha, thx!

1579353593
betawaffle
how can i add explicit padding to a packed struct?

1579353615
mq32
betawaffle: "padding0: u3"

1579353621
mq32
just introduce padding fields

1579353640
betawaffle
oh of course, i was thinking arrays of bools

1579353704
mikdusan
does this work? const Foo = `struct { a: Something, _: u3 }`

1579353716
mikdusan
does this work? const Foo = `struct { a: Something, _: u3, }`

1579353801
mq32
mikdusan: i don't think _ is allowed as a field name

1579353816
mq32
last time i tried, it was not accepted as "padding field"

1579353824
mq32
although i remember a proposal for that

1579354611
betawaffle
how do i get the type of a struct field as an expression?

1579354877
mq32
std.meta.field probably

1579355144
metaleap
aargh, you do `[][]u8{ "foo", "bar" }` and compiler says "error: index of single-item pointer" (arrow hinting at "foo")

1579355190
metaleap
whatever I'm doing wrong, to newcomers the message might be reworked :D

1579356064
betawaffle
is it possible to set a struct field's default value based on the value of other fields?

1579356125
metaleap
man can this not be auto-coerced? wth! make a simple `const hello: []u8 = "hallo";` and compiler barfs "error: expected type '[]u8', found '*const [5:0]u8'". ok lets say i omit the type... i do `const foo = "foo";` and `const bar = "barbaz";`. now to pass these differently typed (former `*const [3:0]u8` and latter `*const [6:0]u8` I gather) to a func accepting merely a slice-of-strings aka [][]u8 --- someone puleeze show me the freakish gymnastics required

1579356126
metaleap
for that (or I am just too stupid and must golang back =)

1579356296
fengb
`const hello: []const u8 = “hallo”`

1579356368
fengb
That’s the first error. Although you should be able make a variable literal with `var hello`

1579356402
metaleap
ok i got it.. slice all the things `const hello = "hallo"; const wurst = "wurst"; const both: []const []const u8 = ([_][]const u8{ hello[0..], wurst[0..] })[0..];` .. idk so much noise tho

1579356419
fengb
You can make an array of strings with `[_][]const u8{ “hello”, “world” }` and convert that into a slice of strings by pretending &

1579356476
fengb
And those types can be inferred so you shouldn’t need the redundant manual declaration

1579356555
fengb
`const both = &[_][]const u8{ “hallo”, “wurst” }`

1579356570
metaleap
fengb: thought i'd tried that , but this time around it works so I messed up somewhere back then. merci

1579356596
fengb
That technically isn’t a slice of strings but it should work just the same

1579356791
metaleap
i'll find out =) so "technically" then.. it's a "pointer to the start of a 2-len arr of whatWeCallStrings", right?

1579356846
fengb
Yes, and array pointer auto coerce to slices

1579356932
metaleap
ack

1579357263
metaleap
yay ran into my first "broken LLVM module found: Call parameter type does not match function signature!"

1579358048
metaleap
ok my "broken LLVM module found: Call parameter type does not match function signature!" was setting "somePtr.Field = mem.alloc(Foo, 2);" and resolved by "somePtr.Field = try mem.alloc(Foo, 2);". andrewrk: and others involved in the compiler: guess the type-checker should catch that before feeding LLVM. it does correctly remark that "This is a bug in the Zig compiler" =) issue needed, or issue known? (also my zig is 1 week old so might be fixed already)

1579358234
mq32
metaleap, that bug is pretty well-known already :D

1579358267
metaleap
ok then i'm soothed =)

1579362020
GrooveStomp
Hello

1579362206
mq32
hey GrooveStomp

1579362251
GrooveStomp
Good morning!

1579362266
GrooveStomp
I just started seeing a weird Zig build failure for my program.

1579362272
GrooveStomp
Build failed. The following command failed:

1579362291
mq32
execute that "following command" to see more error messages

1579362312
GrooveStomp
Sorry, tried to paste it all; but it got truncated in hexchat.

1579362313
GrooveStomp
OK

1579362405
GrooveStomp
The following command terminated unexpectedly: (...)

1579362408
GrooveStomp
Output: "Killed"

1579362437
mq32
huh

1579362457
GrooveStomp
I just started working on trying to build a simple program to reproduce the behavior; the current program is not succinct.

1579362486
GrooveStomp
/snap/zig/890/zig build-exe /home/aaron/code/private/gschip8/src/main.zig --library c --library GL --library X11 --cache-dir /home/aaron/code/private/gschip8/zig-cache --name gschip8 -isystem /usr/include/libdrm -isystem /usr/local/include -isystem /usr/include/x86_64-linux-gnu -isystem /usr/include --library-path /usr/local/lib --library-path /usr/lib/x86_64-linux-gnu --library-path /usr/lib --library-path /lib/x86_64-linux-gnu --cache off

1579362487
GrooveStomp
Killed

1579362503
GrooveStomp
I just tried turning cache off; it also dies with cache on - although I'm sure that's unsurprising.

1579362520
GrooveStomp
(Also just realized why the command didn't make it through. :-) )

1579362548
GrooveStomp
I'm using Zig 0.5.0

1579362560
GrooveStomp
I guess I could try using master and see if it still occurs

1579362677
mq32
hm

1579362688
mq32
current recommendation is to always stay close to master

1579362699
mq32
as this keeps the number of changes to your code low

1579362754
GrooveStomp
Aye; I just relatively small bursts of programming time; so I don't want to have to spend that time keeping up with upstream changes. My workflow vastly favors sticking to a specific version. :-)  Granted, now I have

1579363682
GrooveStomp
Hmm. master

1579364183
GrooveStomp
Unrelated - I recall Zig does dead code removal, but there's a way to force Zig to parse all code anyway -- how would I do that?

1579364283
mq32
there's a "reference all stuff" item, but that only works for top-level declarations

1579364292
mq32
look in the stdlib tests

1579364966
gonz_
Has anyone looked into making 4coder work with zig?

1579365084
mq32
what is 4coder?

1579365119
metaleap
some editor. gonz_: is it LSP compatible?

1579365152
gonz_
Indeed, it's just an editor. metaleap: As far as I know, it's not.

1579365182
gonz_
It's very customizable in the same way Emacs is, but uses native code instead.

1579365187
mq32
ah :)

1579365195
GrooveStomp
mq32 Thanks for the pointer. Unfortunately I'm not really sure what I'm looking for. I'm browsing the std files looking at the tests but nothing is jumping out at me; ie:

1579365199
mq32
i'm sticking with VS Code right now

1579365254
mq32


1579365271
gonz_
Yeah, I'm using VSCode as well, but I'd still like to write extensions in zig

1579365272
GrooveStomp
Thank you

1579365287
mq32
but i'm not fully happy with VSCode as well

1579365292
mq32
eats too much resources for my taste

1579365300
mq32
one day i'm going to write my own code editor :D

1579365307
gonz_
Having your extensions in a shared library and access to a GL context, etc., is a nice idea.

1579365390
betawaffle
what does CallingConventionInterrupt do?

1579365439
mq32
betawaffle, its a calling convention required on most platforms to implement interrupts

1579365464
betawaffle
but where can i find what it means specifically?

1579365495
mq32


1579365501
mq32
i think it's pretty new

1579365565
betawaffle
so, my confusion is github search doesn't seem to show how it gets mapped back to LLVM

1579365573
betawaffle
is that just because github search sucks?

1579365595
mq32
callconv doesn't even has docs right now

1579365609
betawaffle
i'm talking about the zig code

1579365620
betawaffle
(the compiler)

1579365881
mq32


1579366152
TheLemonMan
betawaffle, it only works on AVR/MSP430 and x86/x64

1579366252
TheLemonMan
and if you want to know what it does you can also refer to rust docs :)

1579366376
TheLemonMan
or, if you prefer some examples in C, there's

1579366473
mq32
TheLemonMan: i wonder what the GCC attribute((interrupt)) does…

1579366543
TheLemonMan
kill your firstborn?

1579366559
mq32
probably

1579366559
mq32


1579366683
TheLemonMan
that's an attribute that instructs the compiler to produce the correct prologue/epilogue sequence

1579366729
TheLemonMan
and sometimes you need a whole different calling convention because the system does something...weird?

1579366744
TheLemonMan
like x86 passing arguments to your handler

1579366792
mq32
TheLemonMan, do you know if zig supports that prologue/epilogue generation for arm atm?

1579366851
TheLemonMan
for IRQ handlers?

1579366877
mq32
yeah

1579366910
TheLemonMan
nope

1579366979
TheLemonMan
I mean, LLVM knows what to do, it's Zig that has no way to specify a given function is an interrupt handler

1579367034
TheLemonMan
BaroqueLarouche, I've implemented a neat Thumb1 clzsi that compiles down to 56 bytes o/

1579367063
mq32
so in order to create an interrupt handler for arm i have to write that code myself?

1579367093
BaroqueLarouche
TheLemonMan: nice!

1579367117
BaroqueLarouche
I am not yet at a stade that I need interrupt handling on GBA

1579367356
TheLemonMan
mq32, yep, but it's not that much code (plus, afair, you still have to get down to the asm level if you want nested interrupts)

1579368309
metaleap
what a journey, one runs into the funkiest issue playing with zig ... comptime mutex-acquire failure  :D

1579368506
TheLemonMan
even without that it'd fail sometimes later

1579368578
metaleap
Argh and now I recall that `@compileLog` exists  :D

1579370873
marijnfs_
how do i choose an install path using zig build install?

1579371693
metaleap
trying to determine at comptime whether a type is string. to cover both literals and classic (runtime) `[]const u8` slices i trial-and-errored-out this concoction:

1579371951
metaleap
could produce a "false positive" for a pointer-or-optional-of-u8, annoyingly

1579371970
metaleap
nvm i'm the only caller anyway, meh

1579379463
betawaffle
TheLemonMan: are you LemonBoy on github?

1579379497
betawaffle
i'm hitting this assertion:

1579379512
betawaffle
i've got a packed struct inside a packed struct

1579379527
betawaffle
get_abi_size_bytes(field_type->size_in_bits, g->pointer_size_bytes) = 4

1579379537
betawaffle
but LLVMStoreSizeOfType(g->target_data_ref, element_types[gen_field_index]) = 5

1579379575
betawaffle
(it's supposed to be a 32 bit struct, and i've got a comptime assertion that it is

1579379583
fengb
One of the many packed struct bugs

1579379626
betawaffle
what is LLVMStoreSizeOfType doing?

1579379635
fengb
Are the packed structs a multiple of 8 bits?

1579379663
betawaffle
the one that's hitting the assertion is. let me check if the outer one is

1579379716
fengb
I also remember the compiler falling over if any of the fields span across a byte boundary

1579379719
betawaffle
ah, yeah definitely a multiple of 8 bits. it's 116 bytes + 4 padding bytes (this may be the problem?)

1579379752
betawaffle
lemme gist the whole thing, sec

1579379833
betawaffle


1579379844
fengb


1579379846
betawaffle
the failure is on the `flags` field

1579379860
betawaffle
and it goes away if flags is a u32 instead

1579379873
fengb
Unused is u19

1579379883
fengb
You’ll have to manually unroll that

1579379890
betawaffle
ahhh, ok cool

1579379903
fengb
Split it into chunks that divide up properly

1579379940
fengb
See

1579379947
betawaffle
fixed!

1579379966
fengb
👍

1579379995
betawaffle
wow, so glad i asked

1579380409
betawaffle
is there a way to set the alignment of a whole packed struct, rather than setting the alignment for the first field's type?

1579381362
metaleap
i run into the weirdest segfaults.. ah to be a newb again, feels young again!

1579381883
metaleap
i mean i slightly shift some bits of code around while absolutely preserving logical meaning and bam, no more segfault. or move them back, segfault again. same logical meanings i swear! feels flaky as feck

1579383738
TheLemonMan
betawaffle, yep

1579387732
andrewrk
mikdusan, nice work on getting the cmake thing figured out

1579387738
andrewrk
that looks like it was tricky

1579387995
TheLemonMan
cmake is tricky by definition

1579388145
andrewrk
metaleap, TheLemonMan implemented your proposal

1579388215
daurnimator
TheLemonMan: not sure if you browse the channel logs, but I ran into a couple of non-exhaustive-enum related bugs/asserts last night

1579388281
TheLemonMan
daurnimator, yup, did #4222 solve your problem?

1579388344
daurnimator
TheLemonMan: not sure. only just back at the computer now. going through all my emails. I did see that PR so need to give it a try. However its probably not it: I didn't have an empty enum I think?

1579388348
metaleap
TheLemonMan: andrewrk: wowzers! can i peek at the PR (which #id?) to get a feel for what it took

1579388379
metaleap
ah got it, #4220 nice will peek

1579388454
TheLemonMan
daurnimator, you didn't show any code :(

1579388480
TheLemonMan
I tried to find the problem and managed to crash the compiler heh

1579388506
daurnimator
TheLemonMan: indeed. They happened when I changed getErrno to return an enum and ran the stdlib test cases. didn't have time to narrow down even which test yet

1579388516
TheLemonMan
andrewrk, do we want assembler-optimized versions of some builtins?

1579388592
andrewrk
TheLemonMan, yeah generally we want the best possible implementation of all the builtins that fulfills the ABI

1579388630
andrewrk
the non-assembler versions are convenient because they work for all architectures, but if you know of a way to provide an arch-specific override that improves things, go for it

1579388789
betawaffle
is zig always going to use llvm for release builds, or is there some far-off plan to not depend on llvm at all in the future?

1579388826
andrewrk
in the far off plan we have fast-to-compile non-llvm debug builds, and llvm for release builds still

1579388842
betawaffle
ok, that's what i thought

1579389203
daurnimator
Is there some nice way to do: `if (x==0) x else y` inline without writing `x` twice?

1579389342
cota
What am I doing wrong here?

1579389401
daurnimator
cota: you'll need to tell us the error you're getting

1579389418
cota
it's at the top of the file

1579389418
andrewrk
it's at the top in comments

1579389431
fengb
slice = letter[0..1];

1579389439
daurnimator
andrewrk: ah. /me blind

1579389449
fengb
That’s setting slice to a stack variable no longer in scope

1579389463
fengb
Line 30

1579389566
fengb
Ah it’s probably putting “letter” in the same space in memory

1579389588
fengb
So you always get the same pointer per loop

1579389681
andrewrk
that sounds like a good guess

1579389693
daurnimator
We should really get some escape analysis :P

1579389779
cota
fengb: makes sense, thanks

1579391288
metaleap
in the far off plan we have fast-to-compile non-llvm debug builds, and llvm for release builds still

1579391295
metaleap
meant to quote :D

1579391324
metaleap
comment on this: "far off" would mean after self-hosting-compiler done&solid?

1579391359
andrewrk
yes

1579391481
metaleap
good. would suggest that number of contributors might rise further with zig-compiler-in-zig in place. i'm not the only one who won't touch c/c++ but finds zig most affable, in stark contrast

1579391522
metaleap
s/not/probably not

1579391598
daurnimator
How did we end up solving enums where multiple things have same unmber?

1579391601
daurnimator
*number

1579391708
andrewrk
it's allowed for extern enums

1579391723
traviss
wilsonk, that error you reported earlier 'broken llvm module' i believe is caused by using @setFloatMode(.Optimized) without --release-fast or --relase-small

1579391728
traviss


