1608781108
cCCCCcccccCCc
Hi, tonight's zig master release has an issue for me. I've got several projects in zig and when I try to compile them now with a fresh, empty cache on an x86-64 Linux system it wedges at 'Compile C Objects [1312/1327] aio.c...' and never successfully completes. I can confirm if I downgrade to the 0.7.1 release it will complete successfully.

1608781122
cCCCCcccccCCc
I forget the exact tag, but the release prior to tonight's worked fine as well.

1608781146
andrewrk
cCCCCcccccCCc, I'm aware of the issue but haven't solved it or reverted it yet. it's my top priority item right now

1608781161
cCCCCcccccCCc
No worries, I just figured I should say in case no one had. Thanks for the hard work!

1608781202
andrewrk
instead of reverting or working around it, I decided to improve the tooling for troubleshooting such issues. now we've got a new -fsanitize-thread feature landing soon

1608781387
g-w1
andrewrk: i should tell you that the latest tarball doesn't really deadlock on my server (did 1st time, but then after that not, my guess is because the cache is hot or something), but still does on my personal 8-core machine

1608781426
andrewrk
g-w1, I'm eager for you to try after  #7520 is merged

1608781474
g-w1
cool!, I will

1608781539
g-w1
would something like this be wanted for stage2?

1608781619
andrewrk
definitely!

1608781904
g-w1
I think dancingbug started something here

1608783683
marler8997
Hey, I'm working on windows path issues, it looks like Windows has some functions that are exported from ".exe" files (not always dll files). How do you think the Zig compiler should handle that?

1608792751
rowbee
can i define the type of a tuple? or should i define a struct instead?

1608792765
rowbee
the documentation only contains 1 reference to tuples and it's in "for"

1608795028
rowbee
what does "array access of non-array type 'Point'" mean? i'm just trying to initialize a struct

1608795036
rowbee
line in question: const ret: Point = .{ x, y };

1608795045
rowbee
type is const Point = struct { x: i64, y: i64 };

1608795113
rowbee
is there a less verbose way than Point{.x = x, .y = y};?

1608804689
ifreund
you can alternative do const p: point = .{ .x = x, .y = y};

1608804715
ifreund
s/point/Point/

1608804745
ifreund
but yea zig requires the field names. In general zig favors reading code over writing code

1608810881
rowbee
saw the video. :(

1608834803
dominikh
is there a way to do something like this?

1608835379
tgschultz
it looks like you're trying to return the type of an error union, but using the inferred syntax and there's no errors to infer. Something like `return error{EndOfStream,BrokenHandle}!void;`should work.

1608835415
tgschultz
or `error!void` for the all-encompasing error union.

1608835513
tgschultz
I'm not really sure what you're trying to accomplish since you could just use `fn foo() !void` directly.

1608835587
tgschultz
Depending on what you're trying to do, there are ways to use @typeInfo to build an errorset.

1608835673
dominikh
Ideally, I'd want the error set inferred from the function that used ReturnType() as its return value. the real use is a function that does or doesn't return errors, depending on the type of one of the generic parameters

1608835971
tgschultz
so the real sig should be along the lines of `fn foo(something: anytype) ReturnType(@typeOf(something))`and then ReturnType can use whatever logic to determine the if it should error, and construct the errorset (possibly using @typeInfo)

1608836025
tgschultz
the hiccup would be if `anytype` is itself a generic function, then @typeInfo will be full of useless

1608836038
tgschultz
er, `something`

1608836077
dominikh
sure, but you'd still want the error set inferred from the function body, not whatever 'something' is. it's not strictly _necessary_, but neither are inferred error sets in the first place. 'something', in this case, is either a pointer or not a pointer. and if it's not a pointer, we need to do work that may fail.

1608836107
dominikh
I can of course figure out the error set myself, but having it inferred would be handy

1608836504
tgschultz
in that case yes, I think you are correct that it is not expressible.

1608837105
tgschultz
interesing: if the compiler infers an empty errorset you still have to use try to call the function, which makes sense, however the scope that calls that function doesn't have to return an error union despite using try:

1608837116
tgschultz
I would call that a compiler bug

1608837963
dominikh
semi-related, there's also

1608838104
tgschultz
As I recall, I long ago reported the opposite of this issue, that you couldn't use try with an inferred empty error set.

1608844632
scientes
I think you should have to use try

1608844650
scientes
there is still an error set there

1608844654
scientes
you have to unwrap it

1608844702
scientes
if you want to cast it away you hvae to use unreachable

1608845812
g-w1
is there support for piping to `zig fmt` and getting output on stdout?

1608846307
andrewrk
g-w1, check `zig fmt -h`

1608846313
g-w1
thanks

1608851476
g-w1
I am doing a big merge and got this,

1608851754
andrewrk
you should be able to look at the conflicts and figure out what changed in each side, and make sure the final result incorporates both changes

1608851768
andrewrk
are you familiar with the git workflow for conflict resolution?

1608851865
g-w1
yes, I was just trying to test my changed before commiting, but I have decided to commit now, and then do commit --patch if it doesn't work. it was doing diff HEAD so it was GIANT

1608851891
andrewrk
I'm sorry for not getting to your PRs earlier

1608851902
andrewrk
it's hard to balance doing my own work and helping others get their PRs landed

1608851938
g-w1
thats fine, vexu helped me

1608851985
andrewrk
TSAN just landed FYI

1608852089
g-w1
nice! ill try it soon

1608852235
andrewrk
this also fixes a deadlock with the caching system

1608852244
andrewrk
I suspect it may solve your use case, although drone ci is still hitting another one

1608852288
andrewrk
cCCCCcccccCCc, there's a good chance 9f33984119ee698a9b344ad0df7b498b334e0f6e (just landed in master branch) solves the deadlock you hit. there's still another one happening that is next in line to be diagnosed and fixed=

1608852353
andrewrk
the good news is I'm pretty sure this isn't weird multi-threading issues, I think it's a legit bug in the caching system logic. so it's something any language would have faced, it's not zig being harder to debug than e.g. rust

1608852569
g-w1
ok made a pr to fix it

1608852660
g-w1
(the bug with the diff being too big)

1608853092
andrewrk
g-w1, oh I see. hmm I think we can remove that functionality, the dirty hash thing

1608853108
andrewrk
I think it was maybe not such a good idea

