1593302815
pixelherodev
Okay, got the test passing!

1593302818
pixelherodev
Sort of

1593302822
pixelherodev
Leaks though :(

1593303026
andrewrk
vscode users, what's the equivalent of vim's `cc` ?

1593303074
andrewrk
erase current line. indent to correct level and leave cursor there

1593303101
pixelherodev
Okay, technically, if I disable leak testing, it works

1593303136
leeward
pixelherodev: And if you don't look for bugs, they don't exist!

1593303146
radgeRayden
works for COVID testing

1593303162
pixelherodev
Would be awesome if the testing_allocator gave a trace for allocations that aren't freed

1593303164
ifreund
isnt there a vim mode for vscode?

1593303169
fengb
Oh hey there’s an organic HN post on Zig

1593303185
leeward
They always say you get what you measure. Who wants bugs? Why measure for those?

1593303282
leeward
nifty

1593303343
pixelherodev
Wait, did I miss a showtime?

1593303478
andrewrk
ya, 6 hours ago

1593303514
pixelherodev
Gotcha

1593303518
pixelherodev
I'll have to wait for the upload then :P

1593303530
pixelherodev
What's a good way to debug memory leaks in stage2? <- andrewrk

1593303534
fengb
It’s available on Twitch directly

1593303549
pixelherodev
fengb: yes, but that means using Twitch

1593303552
pixelherodev
Which I avoid wherever possible :P

1593303554
andrewrk
pixelherodev, remember last time? -Dforce-link-libc and then valgrind --leak-check=full

1593303559
pixelherodev
Right, thanks!

1593303566
fengb
Cause YouTube is so much better >_>

1593303567
pixelherodev
Forgot that -Dforce-link-libc is a thing

1593303569
pixelherodev
fengb: no

1593303571
pixelherodev
but MPV is

1593303573
pixelherodev
;)

1593303579
andrewrk
or, you know, help me finish GeneralPurposeDebugAllocator :P

1593303601
pixelherodev
andrewrk: ... yeah, uh... well...

1593303604
pixelherodev
:P

1593303618
pixelherodev
Wait, actually

1593303634
pixelherodev
andrewrk: does std.testing._allocator work with -Dforce-link-libc

1593303665
torque
mpv can play videos from twitch

1593303683
torque
it just uses youtube-dl which supports a whole lot more sites than youtube

1593303687
pixelherodev
... nope, doesn't work, drats

1593303692
pixelherodev
torque: huh.

1593303694
pixelherodev
Good to know

1593303709
pixelherodev
Anyone mind dropping the link?

1593303711
pixelherodev
:P

1593303722
torque


1593303731
torque
first hour is pre-show

1593303787
mq32
andrewrk: do you have the headset i use as well?

1593303798
andrewrk
mq32, yes I bought it on your recommendation :)

1593303813
mq32
happy with it?

1593303820
andrewrk
yep seems to do the trick

1593303841
mq32
USB brings a huge quality boost and it's really comfy and lightweight

1593303863
pixelherodev
... wow, showtime is biiiig

1593303968
fengb
Probably the raw feed

1593304229
pixelherodev
Ughhh, forcing test with libc results in unrelated crash

1593304805
andrewrk
you know what would be a slick completion? when you switch on an enum, it would create dummy switch prongs for all the enum values

1593305504
pixelherodev
andrewrk: okay, how would you suggest debugging memory leaks in stage2 *tests*?

1593305543
andrewrk
copy paste the test case into a file

1593305580
pixelherodev
It's incremental though

1593305695
andrewrk
to answer your question I would be going through the same thought process as you

1593305710
andrewrk
I'm sure you can come up with something

1593305975
pixelherodev
I'm probably just going to step through the code with GDB and see what I changed

1593306187
andrewrk
pixelherodev, I need to add sse registers (xmm0-xmm15) to x86_64.Register

1593306198
andrewrk
can I put them at the end?

1593306309
pixelherodev
Yeah, probably?

1593306317
pixelherodev
Wait wow

1593306320
pixelherodev
You're adding SSE support?

1593306328
pixelherodev
hmm

1593306328
andrewrk
it's part of the C ABI for passing floats

1593306331
pixelherodev
Right I know

1593306338
pixelherodev
I have the C ABI partly implemented in the other PR

1593306343
pixelherodev
I had SSE classification in there too

1593306357
pixelherodev
andrewrk: do you want me to push this test case to the side and get the PRs done

1593306372
pixelherodev
Can always add this case in as a different PR

1593306381
andrewrk
what are you trying to work on?

1593306398
pixelherodev
I was just cleaning up the test harness PR, but only because it's a blocker to the function call with params one

1593306415
andrewrk
I'm working towards getting my test case to work:

1593306418
pixelherodev
I've got integer parameters implemented fully, and SSE classification (but not the actual passing / receiving of them)

1593306423
pixelherodev
The one from the commit a few days back?

1593306427
andrewrk
yeah

1593306428
pixelherodev
I got up to the addition impl

1593306433
pixelherodev
I can probably get that done tonight if you want

1593306439
andrewrk
I'm doin it now

1593306439
pixelherodev
The whole test I mean

1593306441
pixelherodev
AH

1593306443
pixelherodev
Ah*

1593306453
pixelherodev
Do you want to merge my function parameters branch so you can move past that?

1593306481
pixelherodev
If so, it'd only take me ~five minutes of work to get it presentable, so to speak

1593306506
andrewrk
sure I'd be happy to look at it

1593306519
pixelherodev
The only blocker is the test harness one, so I'll just not bother adding in the new test yet

1593306626
pixelherodev
I'll have to redo those as a separate PR later, but no biggie

1593306630
pixelherodev
Just stashed the changes for later :)

1593306663
pixelherodev
andrewrk: mind taking another look at the test harness one?

1593306682
pixelherodev
#5708

1593306691
shcv
what's the right way to do default values for a type constructor? I'm trying to make an array tree with a customizable number of entries per node, but defaulting to @bitSizeOf(usize)

1593306746
shcv
Or should I make two versions of the constructor function, one with the parameter and one that wraps it to provide the default?

1593306771
andrewrk
shcv, that's what std.ArrayList does

1593306803
pixelherodev
andrewrk: oh yeah, the only real blocker for the function params PR is parameter lookup in Zig source

1593307283
shcv
are allocators expected to provide zeroed memory, or undefined?

1593307381
shcv
I guess a better question is whether I need to explicitly fill an ArrayList with my tagged union's 'Empty' values, or if initCapacity() is good enough?

1593307431
andrewrk
allocators provide undefined memory

1593307497
andrewrk
pixelherodev, I'm looking now

1593307621
pixelherodev
andrewrk: heads up that the integer parameter one is based on the zig-test-harness one

1593307634
pixelherodev
So the test harness changes need to be merged before the parameter one ca be done

1593307636
pixelherodev
can*

1593307644
pixelherodev
s/done/finalized

1593307790
shcv
what's the best way to initialize an ArrayList with N "Empty" values then? while(i < size) : (i += 1) { list.append(Node.Empty); } ?

1593307837
shcv
hmm, just noticed the appendNTimes; that's probably it, unless anyone has a better suggestion

1593308000
andrewrk
pixelherodev, test-stage2 passing for you locally?

1593308123
pixelherodev
Yeah?

1593308128
pixelherodev
For the test harness one

1593308131
pixelherodev
Let me double check real quick

1593308176
pixelherodev
Yep!

1593308246
pixelherodev
andrewrk: let me quickly make those changes

1593308251
pixelherodev
:)

1593308296
pixelherodev
... I'd use ZLS renaming but I have no idea how yet :P

1593308720
pixelherodev
Okay, just need to run tests again...

1593309055
pixelherodev
Got it!

1593309079
pixelherodev
andrewrk: done :D

1593309163
andrewrk
nice work

1593309189
pixelherodev
andrewrk: did you do parameter lookup on your branch yet?

1593309189
andrewrk
do you mind if I squash

1593309201
pixelherodev
No?

1593309203
pixelherodev
I mean, why would I?

1593309230
pixelherodev
Some of them definitely should be squashed (the last 3 -> "cleanup")

1593309238
pixelherodev
Though some I think make sense on their own, as distinct changes

1593309248
pixelherodev
It's not a big deal either way to me

1593309274
pixelherodev
Okay perfect

1593309280
pixelherodev
Now to rebase the other one

1593309370
pixelherodev
Okay, all that's left is parameter lookup / Zig source

1593309529
pixelherodev
andrewrk: did you do parameter lookup on your branch yet?

1593309551
andrewrk
almost done with that

1593309573
pixelherodev
Neat

1593309574
andrewrk
oh you mean AST -> ZIR?

1593309576
pixelherodev
Yeah

1593309580
pixelherodev
I did it for my branch already for ZIR

1593309581
andrewrk
no, I'm in codegen.zig rn

1593309584
pixelherodev
Ah

1593309588
pixelherodev
Wanna just steal my work? :P

1593309594
andrewrk
yeah sure

1593309595
pixelherodev
#5411

1593309629
andrewrk
wait what, how has this been open since May?

1593309638
pixelherodev
Ah, because I reused the branch lol

1593309654
pixelherodev
I did the fn(args)void PR back in may

1593309658
pixelherodev
but it blocked on the test harness

1593309673
pixelherodev
So I re-did it generalized yesterday and force pushed :P

1593309717
andrewrk
in my approach, an array of MCValues are precomputed for all the parameters, and genArg is just         return self.args[inst.args.index]

1593309737
pixelherodev
I think this is better, because it means unused args aren't given MCValues

1593309756
pixelherodev
and there's no real reason that arg(N) should be used multiple times for the same value of N

1593309805
andrewrk
I think it will result in doing the classification of parameters multiple times though

1593309849
andrewrk
plus you have to split values into multiple registers

1593309890
pixelherodev
I already have the beginnings of that, but your way would probably do it better

1593309905
pixelherodev
DUAL_INTEGER means use two registers - e.g. u128, or slices would use it

1593309913
pixelherodev
I was going to work on slice passing immediately after this PR was done

1593309981
pixelherodev
andrewrk: I would highly recommend stealing the register shuffling bits at least

1593309992
pixelherodev
There's a few useful commits in there regardless

1593309998
andrewrk
I'll take a look

1593310161
andrewrk
does ZLS have the ability to run `zig build` and put red squiggles in the editor?

1593310312
pixelherodev
Which editor?

1593310316
pixelherodev
I have that with Kakoune, but not from ZLS

1593310706
andrewrk
vscode

1593310737
pixelherodev
No idea, sorry

1593310976
shcv
is there any notable difference between a void tagged union and an optional?

1593311119
andrewrk
shcv, no, those are conceptually the same

1593311148
andrewrk
only difference is syntax really

1593311584
pixelherodev
andrewrk: should i close my PR for function args?

1593311629
andrewrk
I'm referring to it, but also doing things a bit differently

1593311699
pixelherodev
I mean, I can close the PR but leave the branch as is

1593311714
pixelherodev
Maybe I should work on comptime or something instead ;)

1593311820
andrewrk
cool, I made it so that in codegen.zig basically all the functions have comptime access to std.Target.Cpu.Arch, but if the function doesn't need that value, then it doesn't cause bloat

1593315671
creationix
Hello zig peeps!

1593316045
shcv
why can't I do a binary negation of a comptime_int?

1593316057
shcv
and I didn't really need it to be comptime anyway...

1593316174
torque
probably because a comptime int doesn't have a specific bit representation?

1593316291
creationix
shcv: Are you specifying a concrete type like u32?

1593316307
shcv
I did for the original value; const index: i8 = 4;

1593316323
shcv
but then I'm trying to compute ~-2^index

1593316349
shcv
which admittedly may not be what I want exactly, but I'm trying to figure that out

1593316387
creationix
maybe one of the intermediate values needs to have an explicit type.  I just got bit by a similar issue in C.

1593316410
shcv
I think the problem was the operator precedence

1593316417
creationix
that could do it too :D

1593316420
shcv
I needed ~-(2^index) instead

1593316766
marler8997
dang, alignment broke on wasm page allocator

1593317011
fengb
Oh?

1593317059
marler8997
yup

1593317062
marler8997
fixing...

1593317088
marler8997
though, it could have been broken before...not sure

1593317511
creationix
I'm trying to manually port this algorithm to zig (I know it's not fast and probably has timing attacks, I just want it functional)

1593317511
creationix
I see ** being using for exponation, but can't find if zig has a corresponding operator for integers.

1593317813
torque
you probably want std.math.powi

1593317848
torque
though since almost all of those are 2 to a power you could also just use left shifts?

1593317966
creationix
good point, I just realized that.

1593317976
creationix
I'm not sure std.math.powi would keep my value comptime

1593317981
creationix
leftshift might

1593318019
marler8997
fengb,

1593318404
shcv
is there a better way to do twos complement negation than casting to and from a signed integer? I'm really just trying to make a mask where all the bits less than an index are 1...

1593318405
creationix
hmm, python made this look a lot simpler than it really is.  Arbitrary precision integers (or at least up to 256 bit) with built-in exponent modulus.

1593318444
shcv
a utility for casting between signed and unsigned versions of the same int would be nice

1593318513
shcv
mostly I see @bitCast(std.meta.Int(true, bit_count), value) in std

1593318543
shcv
well, false is more common

1593319053
shcv
ok; I figured out a better way to get what I want without twos-complement or signed integers, but I still think toSigned and toUnsigned would be handy

1593319080
creationix
schv why not `(1 << num) - 1` ?

1593319087
creationix
*shcv ^

1593319092
shcv
yeah; that's what I figured out

1593319102
shcv
took me a while; I'm probably getting tired

1593319144
creationix
is there a way in zig to see what type the compiler assigned to a value?  I tried printing @TypeOf, but it just logs `type`

1593319180
shcv
I ran into that yesterday; you want @typeName(@TypeOf(value))

1593319226
creationix
lol, I just figured out the same thing

1593319265
creationix
hmm, they are all just `comptime_int`

1593319524
andrewrk
hi creationix

1593319536
creationix
hi Andrew!

1593319550
andrewrk
@compileLog

1593319564
andrewrk
@compileLog(@TypeOf(value))

1593319578
creationix
oh nice

1593319686
creationix


1593319902
fengb
marler8997: Ah yeah, at the time I think andrewrk mentioned it’s okay for the page allocator to not align. Although I probably should have added a check and return OOM

1593319967
wilsonk
andrewrk: if you didn't find a way to use 'cc' as "delete current line and put cursor at correct indentation in insert mode", then there is a way to do it if you are using VSCodeVim. I added { "before": [ "<leader>", "c", "c" ], "after": [ "^","C" ] } to user settings and it seems to work (you need the <leader> in there for correct behavior unfortunately). It may just be easier to use "^","C" depending on your typing style :)

1593320370
marler8997
fengb, gotcha, well hopefully with that PR it's aligning properly now

1593320534
marler8997
wasm page size is 64K so it was unlikely that someone would hit this

1593320904
marler8997
I'm curious why u29 was picked for the maximum alignment size...

1593321858
andrewrk
marler8997, inspired by

1593321919
andrewrk
this type/upper bound should be revisited before 1.0

1593327806
antaoiseach
Hello folks, I have a small question about `defer`'s behaviour in a small snippet -

1593327852
antaoiseach
In this contrived example, I'm creating a node inside a `while` loop, append to a list, and then defer-ing its destruction (all within the while loop).

1593327881
antaoiseach
My question is - why is the defer not getting triggered once the `while` loop's scope is left?

1593331509
dermetfan
antaoiseach: it seems to me like it is triggered. I checked by inserting log statements in the defer:

1593332878
danyspin97
Will it be possible to use mesonbuild with zig?

1593333004
ifreund
I don't think zig does anything that would make that impossible

1593333024
ifreund
support would be needed from the meson side most likely however

1593333149
danyspin97
I see

1593333190
danyspin97
however if zig devs don't actively work on it, it would end up as D support imho

1593333210
antaoiseach
dermetfan: let me check that... thanks for checking the code out! :-)

1593333287
ifreund
danyspin97: zig's own build system and the language itself are not stable yet, so active work to support for other build systems is pretty far down the line atm

1593333291
antaoiseach
dermetfan: so the question now is - why doesn't using the nodes give an error now?

1593333312
ifreund
you should totally open an issue explaining why this is important to if you want to see it happen though

1593333316
antaoiseach
I also tried `list.destroyNode` directly without defer, and that still did not trigger a use-after-free

1593333333
antaoiseach
I'm confused!

1593333368
danyspin97
ifreund: I see, thanks for the explanation

1593333521
ifreund
antaoiseach: because the memory is not free'd until you deinit() the arena

1593333693
daurnimator
creationix: what you working on? :)

1593333710
antaoiseach
ifreund: I had a suspicion that that was the case ... but doesn't this make it difficult to reason about when freeing is actually done?

1593333724
antaoiseach
Thanks for the confirmation though! :-)

1593333733
ifreund
antaoiseach: this is just how arena allocators work, no changing it really

1593333738
antaoiseach
Hmmm

1593333747
ifreund
like all allocators they have their upsides and downsides

1593333754
daurnimator
antaoiseach: the arena allocator never reuses memory

1593333762
daurnimator
antaoiseach: though ifyou run under valgrind, you will see all the issues

1593333815
antaoiseach
ifreund: daurnimator: Thank you! That does make sense .... so if I did not know how much text I would (say) read into an arraylist, which allocator would you recommend? `c_allocator`?

1593333845
ifreund
depends on how long the array list will be around

1593333865
ifreund
if its freed right after you finish reading then an arena is a good choice

1593333866
antaoiseach
or I could still use Arena+page_allocator if I didn't care about the objects being freed till the end?

1593333874
antaoiseach
ifreund: Aha

1593333877
daurnimator
antaoiseach: use the most relevant allocator for your situation. if the lifetime of the items is known and soon, an arena allocator is correct....

1593333888
ifreund
if it hangs around for the lifetime of your program then a general purpose allocator might be a better choice

1593333896
antaoiseach
Hmmmm ...

1593333920
antaoiseach
Thanks again, ifreund  and daurnimator - I think yes, for my use case, arena would suffice nicely

1593333956
antaoiseach
Just one more follow-up question though - is page_allocator okay to be paired with arena? or is there a better allocator (no fixedbuffer)

1593333969
ifreund
also depends on how long your program lives. If its a one-shot command line tool an arena might be fine for the whole program

1593333980
daurnimator
antaoiseach: sure. many allocators are intended to be composable

1593333982
ifreund
if you're writing a server, then definitely not

1593334017
ifreund
page_allocator is fine yes, though if you're already linking with libc then the c_allocator might be faster

1593334031
ifreund
we don't have a pure zig general purpose allocator yet

1593334036
daurnimator
yet :)

1593334048
antaoiseach
Haha ... yes, that came up in the showtime yesterday as well! :-)

1593334059
daurnimator
I was looking for a project to work on tonight; but I don't think I have the mental energy for an allocator :(

1593334068
antaoiseach
hahaha

1593334101
antaoiseach
Okay, I think my mind's made up to go with arena+page_alloc for now ... thanks again, guys! Cheers! :-)

1593334111
ifreund
no problem

1593337578
alexnask
Has anyone had issues when freeing strings allocated by the page allocator?

1593337595
alexnask
I get assertion fails about the alignment of the memory

1593337614
alexnask
I should probably make a small repro

1593337748
nerthus
if zig is to have a package manager, can we avoid Rust's mistake and add namespaces?

1593337771
nerthus
(to the package database, not the language itself)

1593337854
daurnimator
nerthus: that question is pretty far down the line right now

1593337882
nerthus
meaning it's further in the future or like unwarranted?

1593338062
daurnimator
nerthus: meaning there's like 10-20 decisions that need to be made before your question even makes sense to ask

1593338206
nerthus
hmm, I disagree. It's quite fundamental in package management and should be decided early on imho

1593338215
nerthus
but alright :)

1593338241
nerthus
I just fear for a Zig swmon situation

1593339323
gonz_
alexnask: It seems maybe `zls` main branch isn't set up for the `@asyncCall` change...?

1593339335
alexnask
I just updated it

1593339341
alexnask
I will push soon

1593339355
alexnask
It seems like the new allocator interface broke something though (I think it may be readFileAlloc)

1593339359
alexnask
So I have to fix that first

1593339427
alexnask
err, readAllAlloc I mean

1593339446
gonz_
Coolcool

1593341433
mq32
heyah

1593341443
mq32
at first, i was sceptical towards directory handles…

1593341446
daurnimator
mq32: morning!

1593341452
mq32
now i miss them in pretty much any language

1593341456
mq32
hey daurnimator

1593341481
daurnimator
mq32: good news(ish): they exist in almost every language; but mostly discarded and ignored

1593341502
mq32
Qt has QDir, which is kinda a directory handle but not :D

1593341526
mq32
would neet to use posix/windows API for that manually or pull in a non-qt library

1593341581
alexnask
I think `std.ChildProcess.exec` is broken with the page allocator with the new interface FeelsBadMan

1593341618
alexnask
readAllAlloc is for small buffers too I believe. I guess I should fix them in std instead of bitching

1593342141
alexnask
gonz_, Should build and run fine on master now

1593342812
gonz_
Hmm, I'm getting a build error; `AccessDenied`

1593343443
alexnask
That will happen if the zls executable is still running when yo uare building ;)

1593343463
alexnask
(assuming you are using it directly from the cache)

1593343480
gonz_
Ugh, yeah

1593343931
alexnask
Let me know if it works fine btw, I think I removed all the problematic (aka segfaulting parts) :P

1593355176
creationix
daurnimator: at the moment, I'm just trying to get a clean port of libhydrogen to zig and wasm. I'm working on some decentralized protocols that need to run everywhere (microcontrollers, browsers, etc) and need the basic crypto primitives in it.

1593355528
blinghound
Just wondering if anyone can help me out here

1593355529
blinghound


1593355549
blinghound
I'm trying to increment a number at compile time to assign to comptime struct members

1593355573
blinghound
I'm not sure if it's even possible yet

1593355582
alexnask
Comptime fields cannot be modified

1593355592
alexnask
Theres an issue up for that

1593355597
alexnask
However there is a trick

1593355598
blinghound
ohhhhhhhh thank you

1593355605
alexnask
For "comptime closures"

1593355613
alexnask
Let me write a simple example

1593355621
blinghound
awesome thanks!

1593355648
antaoiseach
Hello folks, in Rust we can convert a Vec into a []T. Do we have a similar situation in Zig? My usecase is this - I want to use, say, an arraylist/linkedlist as my data structure, but want to return a []const u8 (say) ... any easy/existing way to do this? I don't want to type my API type to a specific type like ArrayList or SinglyLinkedList

1593355667
blinghound
@antaoiseach .toOwnedSlice

1593355672
blinghound
or .toSlice

1593355675
blinghound
I believe

1593355681
antaoiseach
blinghound: lemme hit that up and get back

1593355761
blinghound
if you use .toOwnedSlice, the caller has to free the memory, the ArrayList won't control the memory after calling it

1593355839
antaoiseach
blinghound: Thanks for that! I checked the code for it ... yes, you're right ... the type seems to be precisely what I'm looking for ... I am not yet sure if the onus of freeing can be offloaded to the client, but it definitely seems promising

1593355891
blinghound
happy to help!

1593355891
antaoiseach
On second thoughts, I think I can live with that... so that's that. Cheers! :-)

1593355906
blinghound
good luck!

1593355920
antaoiseach
Thank you! Hasta la fuego! :-)

1593355936
alexnask
blinghound, I misundersttod what you wanted to do, I think just making the quad id a regular field here would work

1593355942
alexnask
The instances will still be comptime

1593355965
alexnask
Let me clean it up a bit and sending you the modified link

1593356009
blinghound
oh awesome, but the structs do count the field in their size right?

1593356039
blinghound
because if possible I'm trying to avoid it

1593356039
alexnask
Yeah. Basically you cant mix comptime and runtime mutable state in a single type rn

1593356064
blinghound
ahh ok I understand

1593356075
alexnask
The "comptime closure" I am talking about is a trick to return a unique type every time

1593356083
alexnask
And use a comptime var for each type

1593356095
alexnask
So it wouldnt work in something like this though it can be useful for other stuff

1593356144
blinghound
does that method use a generic type function with a comptime variable?

1593356220
blinghound
could I move the comptime struct members somewhere else that the structs can refer to?

1593356268
blinghound
to avoid actually storing those quad_id fields during runtime

1593356313
alexnask
This is the cleaned up version:

1593356326
alexnask
Let me find some example with a comptime closure Ive written a couple

1593356448
blinghound
I appreciate the help :)

1593356486
alexnask
Here is a type that does it:

1593356508
alexnask
The crucial part is the following: ErrorDispatcher accepts a var argument

1593356540
alexnask
By passing .{} you can force it to be re evaluated (since all comptime calls are cached) because its type is unique at every call site

1593356558
alexnask
So every ErrorDispatcher(.{}) will have a single `comptime var curr_set: type = void;`

1593356573
blinghound
ohh I see

1593356581
alexnask
As I noted though this means the type returned is different every time

1593356587
alexnask
So you cant make an array of them

1593356623
alexnask
People have used this trick to great effect

1593356654
alexnask
E.g. this type which I think could be useful or even working borrow checking (

1593356727
alexnask
What you want is probably more similar to

1593356803
blinghound
yeah I think that's exactly what I want

1593356854
blinghound
I assume I can't do something crazy like make the Shape union, Rectangle and Circle all generic types with comptime quad_id parameters?

1593356856
alexnask
you could probably achieve this by holding two separate lists

1593356875
alexnask
one comptime list with the quad ids and one runtime list of the shapes

1593356885
blinghound
that's a good idea!

1593356930
alexnask
Although here quad_id == index in the list so it isnt even needed but I assume you want to do something more complex down the line :)

1593357020
blinghound
unless I could make the quad_id field just a pub var quad_id initialized at comptime?

1593357032
blinghound
just to avoid having it in the struct

1593357114
alexnask
It will not be unique per instance though which is what you seem to want

1593357323
blinghound
as a pub var I do get  'error: unable to evaluate constant expression'

1593357382
blinghound
yep, I think I'll use your list idea

1593357899
Aransentin
Is it safe to `allocator.free()` an `&[0]u8{}`, analogous to `free(NULL);` in C?

1593358503
Aransentin
... well, the code in `mem.zig` appears to support it. In absence of a contract I suppose that'll do.

1593362350
pixelherodev
Aransentin: that wouldn't be akin to a free(NULL) at all

1593362360
pixelherodev
That would be more like `int i = 0;free(&i)`

1593362367
pixelherodev
Pointers to temporaries in Zig are defined within scope

1593362401
Aransentin
the ampersand is just to make it into a slice

1593362436
alexnask
Aransentin, I think this is correct, cant find any contract in the doc comments either but Im pretty confident empty slices are just ignored when shrinking

1593362442
alexnask
Someone correct me if im wrong

1593363400
pixelherodev
Oh right

1593363417
pixelherodev
Taking the address of a zero-sized value gives NULL? Then yeah, I think that's okay currently

1593363429
pixelherodev
With page_allocator, worst case, it'd give NULL to munmap

1593363493
pixelherodev
Which, according to the man page, should be perfectly fine

1593363695
pixelherodev
andrewrk: how goes the test? :)

1593363908
alexnask
pixelherodev, Idk, is there a test that does this directly with the page allocator? Prob not

1593364204
pixelherodev
ah gotcha

1593364210
pixelherodev
I would've expected child process to fail too

1593364215
pixelherodev
unless it's not tested?

1593364391
alexnask
Not sure

1593364405
alexnask
It will only fail with the `exec` function though (the one liner interface)

1593364409
alexnask
Because it readAllAlloc's

1593368841
pixelherodev
Testing, hi

1593368846
pixelherodev
Okay, probably good

1593368956
pixelherodev
(don't ask :P)

1593371446
mq32
pixelherodev: what are you doing? :D

1593371568
andrewrk
I wonder if there is any performance to be exploited from a hash map implementation where it's assumed that the only operations are insert and read (no deletion support)

1593371638
pixelherodev
Until deinit, I assume?

1593371644
pixelherodev
Hmm, that's an interesting idea

1593371662
pixelherodev
mq32: disabled WLAN, switched to Ethernet on buildbuddy (which is also what I run tmux + weechat on ;)

1593371676
pixelherodev
Ethernet was failing to DHCP for a while, but it's good now

1593371682
pixelherodev
As long as I don't restart the computer again lol

1593371693
pixelherodev
Router is dumb

1593372343
Akuli
andrewrk, python's new (3.6) ordered dict implementation is efficient for that kind of use

1593372359
Akuli
it's an array of data and then a tiny hash table of indexes into that array

1593372426
Akuli
i'm not sure how they got deletion to work sanely, but i think that's pretty much what you're looking for, hash table that behaves the best if you don't delete

1593372996
shakesoda
are there any examples of dealing with std.childprocess

1593373071
andrewrk
shakesoda, yes, search the test directory=

1593373081
andrewrk
Akuli, interesting!

1593373087
shakesoda
andrewrk: ok, thanks

1593373120
Akuli
andrewrk, raymond hettinger has a nice pycon talk about this on youtube

1593373130
Akuli
essentially going through all the design choices quickly

1593373157
Akuli
the result is that they have a hash table that is faster and takes up less space than their older hash tables, but still remembers insertion order

1593373184
Akuli


1593373192
Akuli
(you need to s/dict/hashtable/ mentally if you're not a python user)

1593373480
andrewrk
bookmarked

1593373926
pixelherodev
Zig has ruined other languages for me

1593373929
pixelherodev
`go run` -> invalid `or`

1593373936
pixelherodev
:P

1593374120
shakesoda
pixelherodev: seems right

1593374144
shakesoda
as an added bonus, pretty much everything i still want is on the todo list

1593374153
pixelherodev
?

1593374156
pixelherodev
What TODO list?

1593374165
shakesoda
issues/accepted stuff

1593374184
marler8997
alexnask, did you end up finding an issue with the new allocator interface?

1593374203
shakesoda
by that i also mean things that are in progress

1593374225
alexnask
marler8997, I think its the page allocator implementation, not the interface itself

1593374227
shakesoda
namely: faster builds, concurrent builds, 1717 etc

1593374229
alexnask
Didnt dig too deep imo

1593374241
pixelherodev
Gotcha

1593374248
alexnask
marler8997,

1593374285
shakesoda
zls fills the biggest complaint i've had for really using zig other than the build performance

1593374292
shakesoda
really, really helpful

1593374294
marler8997
alexnask, I'll look into it

1593374302
marler8997
might as well take advantage of having everything fresh while I can

1593374303
shakesoda
s/fills/resolves/

1593374327
shakesoda
there are of course a few run of the mill bugs too, but of course there are some of those.

1593374357
shakesoda
i can't think of any currently affecting me that aren't related to c interop though

1593374710
pixelherodev
packed structs

1593374713
pixelherodev
Those are the last major one :P

1593374741
shakesoda
in general, or with interop

1593374767
pixelherodev
In general

1593374769
pixelherodev
Well

1593374772
pixelherodev
Freestanding, really

1593374776
pixelherodev
Anything that needs precision

1593375430
marler8997
alexnask, it's a mistaken memset, I added a memset to memory that had been freed by the pageallocator, after it had been freed

1593375459
alexnask
Yeah I was asssuming it was writting in the freed page

1593375461
alexnask
But wasnt sure

1593375499
marler8997
this is why memset needs to be done in the allocator (andrewrk told me about this already)

1593376652
marler8997
alexnask, fix here:

1593376653
FireFox317
andrewrk, IIRC there is a vim plugin for vscode, that mimics vim behavior in vscode. Maybe you will like it :P

1593376672
alexnask
marler8997, Cool tyty

1593377769
Aransentin
My windowing library now creates a win32 "hello world" window on Windows as well, in addition to X11:

1593377773
Aransentin
It'd be kinda cool if I could use ntdll exclusively (i.e. nothing from user32), but I'm not sure that's practically possible.

1593378260
pixelherodev
missing errdefer in go :P

1593378280
ifreund
errdefer is the shit

1593378316
ifreund
though I really wish it worked in blocks

1593378347
pixelherodev
It... does

1593378352
pixelherodev
Ah wait

1593378354
pixelherodev
I see what you mean

1593378372
pixelherodev
You mean to avoid returning the error fully?

1593378385
ifreund


1593378459
squeek502
@Aransentin, cool, this fork of zig-window seems to be going for something very similar:

1593378688
Aransentin
Ah, interesting. I'll have to check that out...

1593378697
alexnask
Oh shit someone noticed us

1593378700
alexnask


1593378951
Aransentin
Huh, really interesting reading other peoples code when you've been working on the exact same same thing for a while :)

1593379126
alexnask
Keep in mind I hacked this pretty quickly

1593379127
alexnask
:p

1593379131
alexnask
Dont shoot me D:

1593379390
Aransentin
You're gonna support remote X11? I was kinda dropping that... There's no analogue on the other platforms, and you have to write a lot of stuff twice since remote X11 only supports the ancient super-slow path.

1593379492
ifreund
second that ^

1593379494
alexnask
Im not really familiar with the x11 stuff andrew and luuk wrote them

1593379506
alexnask


1593379532
ifreund
waypipe is the future :P

1593379538
Aransentin
hehe :)

1593379970
pixelherodev
Wayland = <3

1593380096
Aransentin
I figured out that you can cut down a whole lot of X11 code if you just assume that the server you're talking to was compiled sometime after 1990... Like, I'm not even checking that it supports RGB color.

1593380715
wilsonk
hey alexnask, do you know if the newest ZLS from a couple minutes builds with zig master from a couple minutes ago? I am getting an error at semantic_tokens.zig:205 expected 4 arguments found 1

1593380770
alexnask
Let me check, I fixed the build this morning

1593380779
wilsonk
coolio

1593380790
alexnask
The call does have 4 arguments in zls master at that line tho :P

1593380857
wilsonk
hmm, deleted cache and rebuilt but got the same problem

1593380880
wilsonk
let me try the same with zig

1593380911
alexnask
Im building zig master rn, Ill let you know in 5 mins

1593380992
wilsonk
weird, cleared cache and rebuilt zig and now I get 'zig/build/lib/zig/std/dwarf.zig:362:26: error: expected 4 arguments, found 8' when building ZLS ... wth

1593381257
alexnask
Did you `make install`?

1593381266
wilsonk
oh, what the crap!! I just rebuilt both zig and zls and now it worked?? I must have tried to rebuild zls while zig was still only partially installed, I guess

1593381273
alexnask
:D

1593381323
ifreund
i need to update zls again after I finish implementing fullscreen

1593381328
wilsonk
yeah, I did but as I was typing above...I must have not waited for the full install before trying to build zls (I do these things on different screens and probably jumped the gun ;)  )

1593381341
ifreund
saw that sweet semantic highlighting improvment :)

1593381357
wilsonk
sorry for the noise

1593381581
Aransentin
Hm, I kinda want X11-over-the-network anyway, for two reasons: It enabled you to debug the protocol easily with Wireshark, and you can now run programs in wine that talks to your regular X11 server which is kinda dope for demo purposes...

1593382398
blinghound
hmm I'm getting a strange segfault

1593382421
blinghound
pub fn onLeftMouseDown(self: *SearchBar, ui: *UserInterface) void {        self.is_focused = true;    }

1593382440
blinghound
segfaulting on the self.is_focused = true;

1593382653
mq32
that sounds like you're passing a invalid pointer there

1593382762
blinghound
switch (self.*) {           ... other widgets ...            .SearchBar => |*s| s.onLeftMouseDown(ui),            else => unreachable,        }

1593382766
blinghound
sorry, formatting

1593382796
blinghound
the only thing is, it's being called successfully here, and I can  print the address and values of the SearchBar that's being called

1593382804
ifreund
a pastebin would be preferable for stuff that's more than one line

1593382849
ifreund
blinghound: why self.* in the switch?

1593382904
ifreund
er, maybe I'm thinking about this wrong, might need to see more code

1593382992
blinghound


1593383007
blinghound
it's a self.* because I'm passing the instance by reference

1593383035
blinghound
and then checking the union type (SearchBar etc)

1593383067
blinghound
Widget is a union

1593383254
andrewrk
blinghound, have you tried running it in valgrind?

1593383274
ifreund
huh, well I don't see anything amiss in that snippet

1593383279
ifreund
valgrind +1

1593383287
blinghound
I'll be honest, I don't have much experience with valgrind

1593383303
ifreund
it's pretty straightforward to use tbh

1593383304
blinghound
I've only used gdb for c/c++ debugging

1593383314
ifreund
you just run valgrind ./myprogram

1593383319
pixelherodev
Or

1593383320
ifreund
and it spits out useful info

1593383325
pixelherodev
`valgrind -s --leak-check=full ./myprogram`

1593383351
ifreund
yes you can pass flags to get more detailed output

1593383369
blinghound
I'll give it a shot

1593383437
ifreund
(you do need to be using the c allocator for it to work fyi)

1593383477
blinghound
yup I'm using the c allocator

1593383482
blinghound
ah crap, I'm on windows though

1593383566
andrewrk
maybe it would work in the WSL?

1593383641
blinghound
I'll give it a whirl in WSL

1593383806
andrewrk
also, I know this doesn't help you know, but there are compiler features planned that would catch this sort of thing. not 100% but with a high chance

1593383814
gonz_
blinghound: How is the payload of `SearchBar` being set?

1593384007
blinghound
all the values are as they should be if I print them, and I set all widgets at startup

1593384033
blinghound
it's passed by pointer and I can print out it's own values in the same function

1593384054
blinghound
but it segfaults when I try to modify bool field on itself

1593384114
blinghound
andrewrk can't wait ;D  I'm going to have to recompile all the c libraries I'm using on my linux box before I can use valgrind it seems

1593384156
andrewrk
it'll probably worth it. valgrind is incredibly useful

1593384181
gonz_
blinghound: What does the Widget union look like?

1593384324
blinghound
gonz_  like this

1593384357
blinghound
I removed all but two of the widget types while I was testing, so I left it as that when pasting

1593384396
blinghound
all of the functions work as intended, apart from setting a struct member from within their own functions

1593384725
blinghound
are there any obvious issues with the way I set up the widget tagged union?

1593384748
gonz_
No

1593384754
andrewrk
marler8997, have look at

1593384787
andrewrk
in the drop down on top of ArenaAllocator, you can change it between std_gpa (std.heap.page_allocator) and libc (std.heap.c_allocator)

1593384792
ifreund
nope, but if you don't mind unsolicited style tips I'd do

1593384815
andrewrk
marler8997, it looks like the changes to ArenaAllocator are a pretty significant perf regression

1593384836
andrewrk
e120b07a524 I mean

1593385392
gonz_
blinghound: Yeah, I can't see from what you've pasted what could be the issue.

1593385404
blinghound
ifreund I didn't know if union field names should be capitalized or not ;)

1593385431
blinghound
gonz_ yee I'm stumped

1593385439
ifreund
enums shouldn't either anymore fyi

1593385466
ifreund
I'd try to refactor things, there's always a chance that this could be a stage1 compiler bug

1593385490
ifreund
i assume valgrind doesn't really work on windows/

1593385510
blinghound
I couldn't get it to work with WSL nope

1593385537
blinghound
I'll try on my linux machine tomorrow

1593385566
blinghound
I did wonder if it was a stage1 bug, but 90% of the time it's usually my own fault

1593385584
blinghound
90% and usually don't work together there

1593385592
blinghound
I'm tired :D

1593385655
ifreund
valgrind also might just point right at where the issue is tomorrow with a little luck

1593385851
andrewrk
damn how is it 4pm already? all I've done today is eat breakfast and sit on the couch figuring out how register allocation is going to work

1593385942
blinghound
it's 00:11 here and I can't rest until I fix this bug

1593385962
andrewrk
there's also this tool:

1593385965
andrewrk
also linux-only...

1593385969
ifreund
I agree, time moves too fast

1593385978
ifreund
01:11 here

1593385999
blinghound
andrewrk DAYUM that's nice, I'm definitely trying that tomorrow

1593386013
blinghound
are you in Germany ifreund?

1593386020
ifreund
indeed

1593386029
ifreund
though I'm actually an american

1593386051
blinghound
you pulled a fast one on us there

1593386061
blinghound
I'm in the UK and half american

1593386132
gonz_
ifreund: Does your last name work out well for you in Germany? :D

1593386145
ifreund
it's a fun last name for sure :D

1593386365
blinghound


1593386409
blinghound
ok I'm able to print the address of the field one line before trying to modify it, and I get that error

1593386418
pixelherodev
You say linux-only like that's a bad thing

1593386441
gonz_
pixelherodev: How would it be an upside?

1593386457
gonz_
Unless you mean for the developer.

1593386482
gonz_
And in this case he's saying that because blinghound is working on Windows atm, trying to debug this thing.

1593386510
pixelherodev
andrewrk: register allocation is a concern?

1593386514
pixelherodev
I can work on that! :)

1593386517
blinghound
yeah he's trying to kick me while I'm down

1593386518
blinghound
;)

1593386520
pixelherodev
Did you get basics of paramters working?

1593386532
pixelherodev
parameter lookups*

1593386611
andrewrk
pixelherodev, there is plenty to do that isn't literally exactly the same thing I am in the middle of implementing

1593386624
blinghound
not sure if I'm reading the error wrong andrewrk, but could it be a windows issue?

1593386630
pixelherodev
I know :P

1593386647
pixelherodev
I'm really tempted to write an additional register allocator though

1593386654
pixelherodev
Run some numbers, see how they compare

1593386657
pixelherodev
:P

1593386805
gonz_
blinghound: How does the definition of SearchBar (the payload) look?

1593386846
blinghound


1593386862
gonz_
packed!

1593386863
blinghound
like this, I've tried non-packed and packed

1593386863
gonz_
I knew it

1593386883
gonz_
Oh, and you get this with both?

1593386890
blinghound
I thought I was because of that too :(

1593386892
gonz_
That makes it even more curious

1593387034
pixelherodev
andrewrk: jokes aside, what

1593387039
pixelherodev
Aside from graph script :P

1593387056
gonz_
I don't use it at all in any context now because I'm gun-shy. The last BS error & segfault I had was related to this and I hadn't read up on the issue tracker about it yet.

1593387076
andrewrk
blinghound, the error is a segfault in the application. the integer overflow is a problem with the stack trace printing code itself

1593387116
gonz_
Once no one even remembers when `packed` was broken I'll start using it.

1593387127
blinghound
thanks for taking a look andrewrk, I'll give valgrind a go tomorrow!

1593387132
andrewrk
blinghound, you gotta figure out why writing the is_focused field of `self` in this case is a use-after-free

1593387253
andrewrk
pixelherodev, how about cpu feature detection for more architectures? or getting the hello world example passing on more architectures?

1593387272
pixelherodev
Righty!

1593387274
pixelherodev
Oh right

1593387285
pixelherodev
andrewrk: any objections to adding some custom ISAs soonish? :)

1593387289
andrewrk
none

1593387293
pixelherodev
Brilliant

1593387303
andrewrk
might be helpful to start with a non-exotic one first tho

1593387304
pixelherodev
Going to work on self-hosted feature detection for a while thing :P

1593387348
pixelherodev
It's very non exotic

1593387353
pixelherodev
That's one reason I want to test it :P

1593387358
pixelherodev
It's one of the ISAs I JITed

1593387530
blinghound
holy crap I fixed it! I was creating the array of widgets at comptime, and assigning it to a runtime array somewhere else, and because every other function worked, I just assumed the fields could be modified

1593387545
gonz_
Ohhh

1593387564
blinghound
I was reading some of the struct fields at runtime and it worked..

1593387606
gonz_
blinghound: Good find, happy that you didn't have to leave it unsolved :)

1593387648
blinghound
me too! The feeling of relief after solving an issue like this, jesus

1593387650
andrewrk
blinghound, oh, there's an open issue to make this a compile error btw, sorry about that

1593387671
andrewrk
you should have got something like "expected *Foo, found *const Foo"

1593387696
pixelherodev
CPU detection for ARM is probably a good place to start, since I meant to do that a long time ago

1593387746
blinghound
ohh ok, I'm glad the issue has already been found though andrewrk

1593387777
blinghound
night guys! I can finally rest peacefully

1593387786
blinghound
thanks for all the help

1593387921
andrewrk
night

1593387923
gonz_
GN :)

1593388040
gonz_
Does anyone know what executable format OpenSolaris & derivatives (Illumos, etc.) use?

1593388120
gonz_
You can use ELF, but is that the standard?

1593388175
pixelherodev
If you can use ELF, I'd suggest doing so

1593388631
ifreund
got fullscreen implemented and it seems to work well

1593388634
ifreund
time to go to sleep

1593388744
gonz_
GN. I'm going too, I guess, approaching 03:00 here.

