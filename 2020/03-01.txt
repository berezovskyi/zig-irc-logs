1583021690
hazeycode
hmmm `const options = @import("build_options");` isn't working for me. I get `error: unable to find 'build_options'`. Just built and installed master, PATH is correct, no luck

1583021750
hazeycode
version 0.5.0+3c7f030a6

1583024901
daurnimator
andrewrk: turns out the buffer in the TEB is only 261 bytes in size (MAX_PATH+1). Rather than the actual maximum of 32K

1583024947
daurnimator
alexnask: but yes, the TEB is per thread... the T stands for Thread :)

1583025046
daurnimator
uh wrong ping; sorry alexnask

1583025057
alexnask
How dare you /s

1583025068
alexnask
:)

1583027733
fengb
daurnimator: would you know of a good way of hooking stream based fmt.format onto fifo?

1583031385
fengb


1583033543
daurnimator
fengb: because std.Buffer should really be called "0-terminated-growable-vector" unless you need zero termination you should never use it

1583033564
mikdusan
BufferZ

1583033585
fengb
Eh really? Then Buffer.allocPrint has a bug

1583033616
fengb
Oh wait maybe I’m wrong

1583033673
daurnimator
Though I do see a memory leak!

1583033737
fengb
Oh I see

1583033759
fengb
(Not the leak. The zeroing happens on resize)

1583034172
daurnimator
nevermind the leak was an illusion

1583034332
fengb
I feel like we need a better interface. Buffer and Fifo both implement an adhoc outstream, probably because implementing it for real is annoying

1583034367
fengb
Making it harder to convert format over >_>

1583034478
daurnimator
fengb: the intention of my whole mixins thing was to unite it all

1583034515
daurnimator
std.Buffer is almost always the wrong answer

1583034524
daurnimator
you really want either ArrayList or LinearFifo

1583034533
daurnimator
depending on if you ever delete from the start

1583034588
fengb
I'm just converting the print function to work with the stream based format

1583034603
fengb
And trying to figure out what it does because I don't want to break things >_>

1583034686
daurnimator
fengb: hang on; I'm updating

1583034698
daurnimator
should make your std.fmt tests easier to figure out

1583034777
fengb
Oh... I deleted those in favor of using a SliceOutStream

1583034804
fengb
Not deleted. Converted to SliceOutStream since it was easier

1583035121
wilsonk
point of interest: mimalloc (

1583035382
daurnimator
`zig test lib/std/event.zig --test-filter event.Loop` is currently failing 1 out of every ~5 tests for me

1583035541
daurnimator
andrewrk: ^^

1583035599
wilsonk
what does it fail with daurnimator?

1583035606
daurnimator
wilsonk: it just hangs waiting on a futex

1583035610
wilsonk
I just get 'no tests to run'

1583035641
daurnimator
wilsonk: you should see: Test [1/1] event.loop.test "std.event.Loop - basic"..

1583035695
wilsonk
hmm, I just updated zig ten minutes ago but no...I am just getting 'no tests to run'.

1583036253
wilsonk
ok, massaged it with a sledgehammer to run that one test...seems to work fine here after 30 tests (removing any cache each time)

1583036277
daurnimator
wilsonk: I can even re-run the same test binary

1583036285
daurnimator
happy to send over to you to see if you can replicate

1583036304
wilsonk
sure

1583036335
daurnimator
how should I send the file to you? >.<

1583036423
wilsonk
one sec here...hmm, my IRC client must be a little borked. Can you PM me? I can't seem to PM you

1583041470
andrewrk
daurnimator, yep that's the main reason it's not covered by CI yet

1583041563
daurnimator
andrewrk: oh okay

1583041591
daurnimator


1583049605
daurnimator
andrewrk: heh.... just found another usage of std.Buffer you put in. Why do you keep reaching for it?

1583050432
metaleap
daurnimator: would suggest a brute-force rename of "Buffer" in std, and once that's merged then for all users the habit will fade / be revisited on a per-case basis

1583050446
andrewrk
daurnimator, you seem to think std.Buffer is deprecated? why?

1583050452
daurnimator
metaleap: yep. I'll probably do that as soon as

1583050482
daurnimator
andrewrk: rationale here:

1583050571
andrewrk
I don't agree with any of those claims

1583050624
daurnimator
andrewrk: and #4405 is proof of those claims....

1583050731
andrewrk
I don't think this is going to get merged as is

1583050772
daurnimator
Most of that PR is swapping out std.Buffer for std.ArrayList(u8)

1583050807
daurnimator
there was no reason for std.Buffer with it's "keep a null bytes appended" behaviour to be used in those locations

1583050820
andrewrk
I see

1583050825
andrewrk
I'll take a careful look

1583050844
andrewrk
right now though - bedtime. good night. sorry I keep catching you with no brain power left

1583050880
daurnimator
andrewrk: these are my prime hacking hours :P

1583051163
LakeByTheWoods
How in love is everyone with the the comma getting un-indented after a multiline string literal in array initialisers and argument lists? It seems odd to me.

1583051176
LakeByTheWoods
eg:

1583051178
LakeByTheWoods
const a = [][]const u8{    \\aaa,    \\bbb};

1583051185
LakeByTheWoods
Well that was a fail

1583051195
daurnimator
LakeByTheWoods: where else would it go?

1583051200
LakeByTheWoods
const a = [][]const u8{    \\aaa,    \\bbb};```

1583051204
LakeByTheWoods
```const a = [][]const u8{    \\aaa,    \\bbb};```

1583051205
daurnimator
LakeByTheWoods: use a pastebin to demonstrate.

1583051212
LakeByTheWoods
WILCO

1583051281
LakeByTheWoods


1583051340
LakeByTheWoods
My gut tells me everything inside the {} should be indented.

1583051350
daurnimator
LakeByTheWoods: both look sorta weird to me. If you think the 2nd should be what we do instead I wouldn't complain.

1583051470
daurnimator
LakeByTheWoods: I assume this is in reply to #4580 ?

1583051569
LakeByTheWoods
It's regarding that work yeah

1583051760
LakeByTheWoods
Better (albeit contrived) example that sells my suggestion better:

1583051984
LakeByTheWoods
(actually that example is wrong, shouldn't have a trailing comma)

1583064294
itszath
hey, I'm really new to zig though I have known about the project for quite a while; I was wondering if somebody could point me towards an idiomatic way of adding more information to an error

1583064337
itszath
e.g. including column/row with an error in a tokenizer

1583064391
daurnimator
itszath: see

1583064742
itszath
thanks, I'm gonna go with the modified second workaround with the struct field then

1583066051
metaleap
itszath: can also sniff in lib/std/zig/ast.zig --- in this case, the Ast struct keeps a list of error details and parse() only really returns error.OutOfMemory or none at all (as of today). in a scenario of errors the ast's root is un-set and the errors.len != 0. easy to work with and every sort of error has as much detail as it needs

1583066171
metaleap
plus in general you might wanna differentiate between "domain errors" (high level) and "operational errors" (low level / kernel / syscall or bad inputs) anyway, with try/catch/error-unions being a great fit for the latter

1583080197
jessermeyer
What's the cast I should use when I'm passing a string to a function expecting a c-string? pointer type child '*const [27:0]u8' cannot cast into pointer type child '[*c]const u8'

1583080296
jessermeyer
var validation_layer = "VK_LAYER_KHRONOS_validation";

1583080308
jessermeyer
.ppEnabledLayerNames = &validation_layer,

1583080431
jessermeyer
ptrCast worked.

1583080449
jessermeyer
I guess this makes sense in retrospect. Strings in Zig are pointers.

1583080587
fengb
I’m surprised the cast wasn’t automatic

1583082722
jessermeyer
Me too actually.

1583082726
jessermeyer
Is there a reason for that?

1583082808
mikdusan
wait wut?

1583082827
mikdusan
can u make a reduction

1583082876
jessermeyer
Yes.

1583083069
jessermeyer


1583083073
jessermeyer
Should I report this as an issue?

1583083277
TheLemonMan
jessermeyer, you're missing the outer `const`, try making validation_layer a `const`

1583083310
mq32
i think there is just a whole pointer indirection missing

1583083336
mq32
"&validation_layer" is a pointer to *u8, not to **u8

1583083345
jessermeyer
I thought that was a **u8

1583083350
jessermeyer
Since the zig string is a pointer to an array.

1583083354
jessermeyer
(Right?)

1583083369
jessermeyer
Ah, the constness hits me again.

1583083371
TheLemonMan
yep, literals are pointer to arrays

1583083388
jessermeyer
I've been avoiding const since those tend to disappear from the debugger's view.

1583083422
TheLemonMan
the error message is correct but could be improved to point out what's the difference between the two types

1583083425
jessermeyer
But that didn't appear to fix the issue actually...

1583083430
jessermeyer
\win32_tbd.zig:101:9: error: expected type '[*c]const [*c]const u8', found '*const *const [27:0]u8'        const validation_layer = "VK_LAYER_KHRONOS_validation";

1583083437
jessermeyer
In terms of implicit casting expectations..

1583083686
jessermeyer
Is that a reportable issue?

1583083896
TheLemonMan
bleh, spent an awful lot of time hunting down a nasty bug in a linker script

1583083914
TheLemonMan
and it turns out it was lld that was royally fucking up some address computation

1583083954
jessermeyer
Poor linker =(

1583084048
TheLemonMan
yeah, linkers are hard

1583084414
TheLemonMan
the implicit casting only acts on a single layer

1583084447
TheLemonMan
and so it tries to convert [*c] to * but fails miserably because the child types are not compatible

1583084449
jessermeyer
Should it be opened up to N layers?

1583084457
jessermeyer
As a proposal?

1583084493
TheLemonMan


1583084517
jessermeyer
Why are the child types not compatible?  Doesn't [*c]const u8 map to *const[N:0]u8 semantics (but not the other way around)?

1583084617
TheLemonMan
nah, there's an implicit cast from *[N]T to [*c]T

1583084779
jessermeyer
I'll open an issue for wider discussion, if not for visibility for future programmers.  A pointer to an array of strings is not an unusual interface parameter for C libraries, so at least people who hit this can search for it.

1583090787
jessermeyer
var extension_names_to_enable = {"VK_KHR_win32_surface", "VK_KHR_surface"};

1583090791
jessermeyer
Is there a reason that doesn't just work?

1583090819
TheLemonMan
you're missing the leading dot?

1583090934
jessermeyer
Well I don't know if anon-structs is how I want to, in general, represent an array of comptime known strings.

1583090998
jessermeyer
And in this situation that doesn't seem appropriate.  All I want is to pass Vulkan the address to an array of strings.

1583091020
TheLemonMan
then you're missing the leading type

1583091022
jessermeyer
But the string lengths here are different from each other, and if I tell Zig to infer it, it doesn't want to.

1583091025
metaleap
[2]Str{"one","two"} where Str = []const u8

1583091051
metaleap
and _ for auto-length should work, whats the err msg?

1583091060
alexnask
[_][]const u8 { ... } should work

1583091064
jessermeyer
Let me double check I didn't typo.

1583091228
jessermeyer
Yeah I typo'd and misread orientation of the array syntax from the documentation.

1583091236
jessermeyer
var extension_names_to_enable = [2][:0]const u8{"VK_KHR_win32_surface", "VK_KHR_surface"}; works.

1583091250
alexnask
Cheers

1583091273
jessermeyer
Thanks for spotting my mistakes!

1583091334
jessermeyer
Is there a reason why the type [2][:0]const u8 couldn't have been inferred by the compiler from the context?

1583091363
jessermeyer
I understand if the user doesn't

1583091420
TheLemonMan
an anonymous tuple may work better there if you don't want to waste too much energy typing

1583091527
jessermeyer
How do I ptrCast the tuple to a pointer to an array of strings?

1583091572
jessermeyer
The compiler gave me some caution with  note: '*struct:104:42' has no in-memory bits

1583091590
TheLemonMan
you write `var foo: T = .{ ... }` ?

1583091606
fengb
Ugh that annoying thing

1583091637
fengb
You can’t make a runtime tuple with literals since the compiler turns them into comptime fields

1583091687
jessermeyer
Ok, good to know that would work, but it's much too much baggage for this straight forward problem.

1583091695
metaleap
jessermeyer: each string literal gets "inferred" to a fixed-len+1-sized u8 array, so an array of string literals at this point doesnt get "inferred" (more like coerced-inferred) into an array-of-[*:0]const u8

1583091713
metaleap
(about your question why it couldnt infer)

1583091780
jessermeyer
Yeah, this may be related to the child-type inference issue I posted about earlier today.

1583091783
metaleap
although i think there's no inferring array types from anon-literals

1583091814
jessermeyer
In general I do not expect syntax discontinuities going from a single element type to an array of that type like this.

1583091833
alexnask
fengb This bug is probably gone with PR #4573, I will try it and add it as a testcase

1583091888
metaleap
jessermeyer am actually quite content with no inference of slice/arr types. currently i can scan code and immediately tell just from anon-ness that it's a struct-or-union.

1583091927
jessermeyer
I agree that too much inference is a poison.

1583091958
metaleap
and [x]X{..} is easily recognizable as slice/arr initializer. no "manual type-resolving via looking at result location" required :D

1583092056
jessermeyer
In this case, the [n]X is just redundant and obvious, and I imagine that follows for the common case.

1583092103
fengb
Not quite. It’s ambiguous if it’s an array of slices or array of pointers

1583092122
jessermeyer
I wouldn't call that a common case.

1583092141
fengb
In this case I mean

1583092142
jessermeyer
And an instance of inference poison.

1583092164
jessermeyer
Could you elaborate?  This case is just an array of strings.

1583092243
fengb
Literals “foo” are array pointers that can either be coerced into `[]u8` slices or `[*]u8` multi pointers

1583092263
fengb
In most Zig code, I’d expect slices, but then you can’t pass that to C

1583092270
alexnask
I don't think there is any place in the compiler atm that uses the types of multiple expressiosn to infer a common type (not an argument either way, just an observation)

1583092338
TheLemonMan
not really, peer result location is used for eg. if/switch expressions

1583092348
alexnask
Ah, good point

1583092354
alexnask
I knew I'd probably missed smth

1583092362
jessermeyer
I see, array of strings -> array of pointers.

1583092707
jessermeyer
Yeah, almost every 'wtf' I've encountered in Zig so far as been at the intersection of Zig and C.

1583092877
mq32
hm

1583092898
mq32
how can i add a package import for a package import?

1583092908
mq32
just declaring two packages with the same name does not work

1583092937
mq32
is --pkg-begin recursive?

1583093005
frmdstryr
yes

1583093007
frmdstryr
nest them

1583093021
mq32
oh

1583093032
mq32
looks like zig build does not support that yet?

1583093052
frmdstryr
it only supports one level

1583093060
frmdstryr
it should be made recursive

1583093077
mq32
hm, how can i make that work?

1583093278
frmdstryr


1583093367
alexnask
I'm hitting a really weird bug, using std.testing.allocator in a tuple initializer crashes on windows (access violation in copy_const_val when copying the allocator field) and works on linux

1583093412
mq32
ah so addPackagePath does not expose that yet

1583093455
frmdstryr


1583093474
frmdstryr
needs to also add args for sub_pkg

1583093485
frmdstryr
in theory, I haven't tried it

1583093764
jessermeyer


1583093788
jessermeyer
The array of u8 arrays is continuing to bite me.

1583093828
jessermeyer
Apparently the u8 array and the array of u8 arrays are stored rather differently.

1583093837
jessermeyer
As demonstrated on the watch window on the right.

1583093914
mq32
extension_names_to_enable is an array of 2 slices

1583093924
mq32
not of two pointers-to-zero-terminated

1583093933
jessermeyer
O_O

1583093969
mq32
[:0] is a zero-terminated slice

1583093974
mq32
[*:0] is a zero-terminated pointer

1583093985
jessermeyer
Very subtle.

1583093994
jessermeyer
@ptrCast is super dangerous here!

1583093998
mq32
i think you don't need the ptr cast then :D

1583094006
mq32
@ptrCast is by-definition super-dangerous

1583094016
mq32
that's why it's needed and is not done implicitly

1583094020
jessermeyer
Yeah I was sort of forced into using it earlier.

1583094700
jessermeyer
Well this has been rather educational.  I learn more about C programming in Zig than I do programming in C oftentimes.

1583094710
jessermeyer
const c_string = [*:0]const u8; is how I'm going about this henceforth.

1583094788
mq32
:D

1583095156
frmdstryr
When using instream.readStruct is there any way to specify the endianness (or just reverse it)?

1583095774
mq32
alexnask: Huge ♥ for std.interface !

1583095794
mq32
just played around a bit and it just works and is super-convenient

1583096009
alexnask
Glad you like it :) I'm planning on adding a proof of concept Allocator interface in the tests later today

1583096061
mq32
nice!

1583097007
mq32
i think i'll refactor more of my code to your interface

1583097081
alexnask
@mq32 lola.Object is a std.interface.Interface here right?

1583097094
mq32
yep

1583097110
mq32
context:

1583097128
alexnask
I would recommend wrapping the interface type in another struct to avoid having to use .call and to make init a little less clunky

1583097137
alexnask
At least that's the pattern I will probably be using

1583097154
mq32
the interface only has two methods

1583097160
mq32
and those are getting called at exactly one place :D

1583097182
alexnask
Right, the boilerplate isn't worth for sure then :)

1583097232
mq32
yep

1583097251
mq32
but the UserFunction and AsyncUserFunction will surely get a interface

1583100476
mq32
can i iterate over a HashMap and remove elements from it?

1583101095
mq32
alexnask: It works! I now have a small garbage collector for my LoLa objects :)

1583101103
mq32
Runtime is now fully feature-complete again

1583101148
jessermeyer
Congrats!

1583101154
mq32
thanks :)

1583101161
mikdusan
2 slow

1583101164
mq32
yep

1583101177
mq32


1583101194
mq32
this example is now executed correctly again

1583101214
mq32
from c++-shared_ptr-hell to a nice and slim Zig API

1583101243
alexnask
:D

1583101298
mq32
The language even got better on the way there

1583104661
alexnask
Has anyone tried zig on WSL?

1583104724
alexnask
Everything seems to work fine on my system except for zig test, which hits an integer overflow in vdso.zig when running the test executable

1583105133
alexnask
Nvm I'm blind, clock_gettime seems to be the issue, I will try again after updating Windows though it could be a WSL bug

1583105191
fengb
Y2k38? :P

1583105287
alexnask
Nah the overflow happens in vdso lookup

1583105871
jaredmm
I use WSL, but I haven't run any tests in it.

