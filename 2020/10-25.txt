1603590078
CmdrCrisp
Hey all, I'm just getting started with Zig (like... today) and thought I would try to get dearImgui up and running. Could someone give me a hint on how Zig declares a variable as a pointer to a c-abi struct?

1603590845
JoshAshby
I don't know if this is "correct" or the zig way, but when I was setting up dear imgui I was just using std.mem.zeroes(<c struct>), since the structs I was working with were all being initalized by dear imgui/glfw later on

1603590873
JoshAshby
slightly unrelated to your question but are you on mac? I recently tried to use both dearImgui (via cimgui) and nuklear from zig on macOS and I believe I'm hitting

1603591188
CmdrCrisp
@joshashby thanks for picking up my Q. I'm not working on a mac, Linux is my daily driver. I think I asked the wrong question in any case. At a learning example, I'm trying to translate

1603593910
JoshAshby
ah, well I'm out of my element unfortunately as I don't have a ton of experience using C from Zig either. sorry :s that said I have found that making use of zig translate-c as well as looking at Andrews projects that use libs like glfw helpful, while you wait for someone better equpied to get back to you:

1603594124
CmdrCrisp
Thanks for the hints. I'm slowly cutting through my issues. In the mean time, i'm getting used to the build system. Feels a bit like CMAKE.

1603599831
tempnicksimp
hey, I've got a question about comptime semantics

1603599833
tempnicksimp


1603599859
tempnicksimp
If you `zig build` this, you don't get any comptime errors, even with the invalid value.

1603599894
tempnicksimp
but the unreachable code will crash with the stacktrace and all at runtime

1603599992
tempnicksimp
if I make the return type `comptime_int` it catches it at comptime, but is putting a comptime block around the for going to search for any invocation of the function and ensure it's valid?

1603600024
tempnicksimp
What's being evaluated at comptime in this case, if it doesn't check for places where you call the function?

1603600465
daurnimator
not sure about your question tempnicksimp; but your names_and_vals looks a lot like an enum

1603600479
tempnicksimp
I initially tried an enum.

1603600533
tempnicksimp
The issue is I also wanted to print the name and whatnot in the example this is simplified from

1603600549
tempnicksimp
I simplified it to help illustrate the abnormality.

1603600561
tempnicksimp
But in my actual use case I'm printing window messages and their numbers etc.

1603600578
tempnicksimp
So it being available as a string is already happening, such that making an enum would be redundant.

1603600646
tempnicksimp
I didn't see anything in the docs about getting returning a name for a given value (the reverse of an enum?) like a tag or anything, so I went with the anonymous struct instead.

1603600669
daurnimator
Use `std.fmt`

1603600685
tempnicksimp
I tried messing with `fmt.format` (I think it was)

1603600695
tempnicksimp
how would you suggest using the lib for that?

1603600704
daurnimator
tempnicksimp: you might be looking for @tagName

1603600719
tempnicksimp
I saw tagName, but I didn't know how to get that printed

1603600723
tempnicksimp
fn print_win32_message(u_msg: std.os.windows.UINT) void {

1603600727
tempnicksimp
format?

1603600731
tempnicksimp
shit, couldn't put that in code block

1603600743
tempnicksimp
anywho, that's the way I was posting the window message and number etc.

1603600760
tempnicksimp
It's a mess but I'm playing around.

1603600771
daurnimator
tempnicksimp: you may need to convert your integer to an enum with @intToEnum

1603600793
tempnicksimp
Oh, that sounds good.

1603600796
tempnicksimp
I'll try that.

1603600814
tempnicksimp
With that said, to clarify the original example was just an inquiry about how comptime works.

1603601135
tempnicksimp
So the assignments within the for loop and what not don't look to the calls to see if the unreachable code is reached for each call?

1603601176
tempnicksimp
with a `comptime_int` return it does seem to do that, but putting the comptime block around the for doesn't seem to have that effect.

1603601187
tempnicksimp
What's going on semantically?

1603601329
daurnimator
tempnicksimp: TBH I don't really understand why we didn't get some error about hitting unreachable at comptime

1603601342
tempnicksimp
That's exactly what I would expect

1603601356
tempnicksimp
I thought about putting up an issue, but I wanted to be sure I wasn't misunderstanding.

1603601366
daurnimator
sounds like it could be a bug.... but it may be by design... need someone more knowledgeable to answer

1603601600
daurnimator
tempnicksimp: FYI you can put the `comptime` at the call site. e.g. `_ = comptime name_to_val("invalid");`

1603601628
tempnicksimp
as well as you can return a comptime int

1603601662
tempnicksimp
then the function will be evaluated as a expression, which is more ergonomic switching over.

1603601696
tempnicksimp
(although in this case I'll be switching back to an enum anywho)

1603602565
tempnicksimp
went ahead and bit the bullet on making an issue in case it's a bug after all

1603603794
endragor
Hi! I've got a couple of newbie questions, would appreciate if someone could answer. 1) stdlib exports math and atomic functions when you build a dynamic library. Is there a reason for that? 2) How do I make `zig build` produce executable in a predictable location? By default it's in an obscure folder under zig-cache/o/

1603604243
daurnimator
endragor: where do you see 1)?

1603604266
daurnimator
endragor: 2) you need to use `.install()` I think. which installs it to what you set in .setOutputDir

1603604488
endragor
daurnimator: thanks! (1) can be seen with `nm`, `objdump`, `readelf` or any other tool that may print exported symbols. You will already see these symbols if you just run `zig build-lib -dynamic empty.zig` on an empty file. I also noticed these functions are explicitly marked with `export` in the stdlib, so it seems to be on purpose.

1603610363
daurnimator
endragor: I thought that was only the case for the wasm target and not others?

1603610385
daurnimator
endragor: and are these functions in compiler-rt? or elsewhere?

1603611486
endragor
daurnimator: It seems that has to do with debug mode. When compiling with ReleaseFast, the library exports only what I expect it to. But debug build contains symbols from c.zig and compiler-rt.

1603614461
danyspin97_
Is there any news on a 0.7.0 version?

1603614514
Michcioperz
Andrew got sudden problems with his landlord

1603614526
Michcioperz
is last thing i know

1603614880
endragor
Does Zig intend to provide the tools necessary to build a fiber-based job system? Or should I not look at async/await capabilities for that? It seems it solves some parts, but not the others - for example, calling functions with non-Async callconv and expect them to work within the fiber context (yield execution where needed, while extending the current stack instead of allocating a new one).

1603614971
danyspin97_
Michcioperz: Ah I see

1603617085
daurnimator
endragor: yes. std.event.Batch is that system.

1603617975
tempnicksimp


1603618030
tempnicksimp
Is there a way to handle the undefined behavior case of trying to convert an interger which isn't represented in the enum?

1603618075
tempnicksimp
the enum just looks like

1603618094
tempnicksimp
```

1603618128
tempnicksimp
... how do you do multilines in Kiwi o_o

1603618216
tempnicksimp
m

1603618226
tempnicksimp
the github said you could do alt+enter

1603618233
tempnicksimp
const u_msgs = enum(c_uint) {

1603618236
tempnicksimp
...

1603618240
tempnicksimp
looks like that

1603618253
daurnimator
tempnicksimp: add a `_` item to your enum to make it "non-exhaustive"

1603618282
tempnicksimp
so that switch is happening at compile time

1603618292
tempnicksimp
non-exhaustive will effect this undefined behavior?

1603618317
daurnimator
non-exhaustive means that other non-listed values may exist and are not undefined behaviour

1603618348
tempnicksimp
okay, so it will just give it a bad value and I'll get else at the end of the switch?

1603618356
daurnimator


1603618366
tempnicksimp
It says it doesn't fail.

1603618381
tempnicksimp
Does that mean it just is still a member of the enum?

1603618397
tempnicksimp
I was a bit confused by the wording

1603618399
daurnimator
it's a catch all for not-a-member of the enum

1603618424
daurnimator
like, if you have a u8, and define a=1, and b=2... _ is all of the other values (0 and 3-255)

1603618449
tempnicksimp
Oh, I see.

1603618472
tempnicksimp
Thanks

1603618883
daurnimator
tempnicksimp: it's most often used in situations where a library/hardware says "1 is function X; 2 is function Y; we may add more in future"

1603619152
tempnicksimp
Yeah, I was wondering both about the type of the unlisted values and how it would be formatted

1603619176
tempnicksimp


1603619179
tempnicksimp
interesting

1603619228
tempnicksimp
@tagName is useful as well

1603619259
daurnimator


1603619312
tempnicksimp
Yeah, I'm looking at that now, it is a lot of code tho.

1603619316
tempnicksimp
thanks!

1603619322
tempnicksimp
(again ;p )

1603619347
daurnimator
tempnicksimp: looks like you should add 49405 to your enum :)

1603619368
tempnicksimp
can't

1603619373
tempnicksimp
not documented ;(

1603619390
tempnicksimp
or rather I can but it's `unknown_message`

1603619393
tempnicksimp
welcome to windows

1603619402
daurnimator
doesn't matter if its not documented....

1603619415
tempnicksimp
I'm not covering the case.

1603619427
tempnicksimp
It's some system message, is there a good reason to add it?

1603619430
tempnicksimp
(in principle)

1603619461
daurnimator
so that users can handle it

1603619473
tempnicksimp
... what do I name it?

1603619492
tempnicksimp
I have no idea what Windows is using the message for.

1603619571
daurnimator
great question. suprisingly I don't get any google results searching for it

1603619584
tempnicksimp
I grepped the entire reactos codebase as well

1603619595
tempnicksimp
the last couple messages left undocumented have been a wild goosechase.

1603619602
daurnimator
so we're probably left with learning it from windows debugging symbols; or from someone that's willing to pollute their mind (and future contribution ability) by reading the windows leaked source code

1603619643
tempnicksimp
that's actually interesting, if you gave a reasonable name to it based off the leaked source, could they get you for that at all?

1603619669
tempnicksimp
Their api exposes the message itself.

1603619728
daurnimator
tempnicksimp:

1603619732
tempnicksimp
> windows debugging symbols

1603619749
tempnicksimp
sounds particularly difficult, WinDBG gives you help on this?

1603623122
endragor
daurnimator: regarding std.event.Batch - that doesn't solve my needs. I'd like something similar to Windows fibers API, but cross-platform:

1603623123
endragor
stack, or "synchronously", which doesn't allow them to yield.

1603623167
daurnimator
endragor: hmm?

1603623213
daurnimator
endragor: @asyncCall(foo, ....)` is syntax for a special use-case of `async foo()`. ignore that builtin for now.

1603623273
daurnimator
endragor: in zig, calling an async function

1603623296
daurnimator
(unless you use the special keyword `nosuspend`, which is an assertion; ignore that for now)

1603623489
endragor
daurnimator: "turns into an async function" means "changes calling convention", right? So what if I want functions from dynamic libraries to be able to yield? They have to have .C calling convention.

1603624305
daurnimator
endragor: yes. and so that tells you that you need some way to indicate to the scheduler (whatever that is) when you are yielding and how to resume

1603626421
endragor
daurnimator: With Windows API the scheduler itself is a fiber that others may yield to. It then may decide which fiber to execute next. Internally the fiber state is shared via thread-local storage, as I understand. So there is no similar abstraction in Zig? I mean async/await is similar, yes, but requires a new calling convention. It seems I should go with something like

1603627518
daurnimator
endragor: so that might answer "how to yield" (though maybe it doesn't say what to yield *to*); but it doesn't say how we register ourselves for resumption

1603628167
endragor
daurnimator: yeah that should be a part of the scheduler API that is built on top of fibers

1603628350
daurnimator
endragor: while you could build a zig scheduler on top of that; the std lib builds on top of lower level primitives

1603628446
endragor
daurnimator: yeah I was wondering if this low-level primitive exists in Zig. I'm planning to use the C version of fibers with Zig scheduler on top of it.

1603628506
daurnimator
endragor: (I don't think this is the status quo; but its where I think we're going): zig considers NtWaitForMultipleObjects to be the only true primitive on windows

1603642277
ryuukk_
where can i find list of types for @typeInfo ?

1603642297
ryuukk_
i have trouble figuring what to use for fixed size slices

1603642349
TheLemonMan
so...arrays?

1603642398
ryuukk_
i don't know that is why i ask

1603642514
TheLemonMan
when in doubt ask the compiler

1603642520
TheLemonMan
@compileLog(@tagName(@typeInfo(T)))

1603642525
ryuukk_
thanks

1603642573
TheLemonMan
there's no documentation for the inner typeinfo fields, you have to either read some other code in the stdlib or ir.cpp

1603642651
ryuukk_
i wish VSCODE would allow go to source when i ctrl click to @ stuff, just like it does with other stuff

1603642702
TheLemonMan
oh wait, check out builtins.zig

1603643327
ifreund
yes, std.builtin.zig is what you want

1603643338
ifreund
look at the TypeInfo definition

1603643377
ikskuh
heya TheLemonMan o/

1603643395
TheLemonMan
sup ikskuh

1603643402
TheLemonMan
how's life treating y'all?

1603643472
ikskuh
i now officially moved to the new location

1603643484
ikskuh
less stress, more zig!

1603643495
BaroqueLarouche
For great justice!

1603643606
ikskuh
i'm learning on how to implement a event loop in zig right now :)

1603643610
ikskuh
pretty good experience

1603643800
TheLemonMan
noice, noice

1603643854
ikskuh
and it's embedded HW

1603643868
ikskuh
and my main annoyance is that Writer.write enforces error handling :D

1603644706
Kena
Hello computer people, do you know why `@typeInfo` is written in camelCase and `@TagType` is in PascalCase? is it a voluntary asymmetry?

1603644732
ikskuh
heya

1603644753
ikskuh
@TagType returns a type (UpperCase) wheras @typeInfo returns a normal value

1603644771
ikskuh
it just follows the style guide that types are PascalCase and functions are camelCase

1603644785
ifreund
this convention is applied to all functions, e.g. std.ArrayList() vs std.debug.print()

1603644788
Kena
Thank you buddy, you're kind.

1603645173
Kena
It would be REALLY helpful if the documentation were to be enhanced with some definition of the concepts, like enum, struct, union. One sentence to explain what it is, another to explain its use case and a third to tell us what are its strenghts and weaknesses.

1603645226
ikskuh
Kena: right now the docs are strongly programmer-focused

1603645233
ikskuh
if you are a newbie, you might want to check out

1603645259
Kena
Because in the current state, even read entirely 2 times the official doc doesn't provide a sufficient level to begin to code for a complete beginner. A lot of concepts are swept under the rug and many mecanics make assumptions regarding to the reader's expected priorabilities

1603645276
ikskuh
yeah, true

1603645276
Kena
*prior abilities.

1603645283
ikskuh
this is a known problem

1603645295
ikskuh
but right now the focus is on "making the language stable"

1603645307
ikskuh
but yeah, these are just excuses

1603645316
tane
currently, only looking at std lib source files is of real help and even there I failed to see any function that, e.g., turns a string into a std.fs.Dir

1603645350
ikskuh
tane: std.fs.Dir.openDir :D

1603645354
ikskuh
used with cwd()

1603645380
Kena
Yeah that make sense that trying to seduce noobies is pretty overrated. That is nos the kind of people who will be quickly involve as contributors ... :/

1603645389
tane
ikskuh, yeah... so how about an absolute path?

1603645412
ikskuh
pass in an absolute path ;)

1603645421
ikskuh
std.fs.cwd().openDir("/", …)

1603645446
ikskuh
Kena: that's not what i wanted to say ;)

1603645458
ikskuh
the language is still in flux and the docs need to be updated a lot

1603645466
virkony
There is defer and errdefer. Is there any "success defer"? I.e. execute only if not returning error

1603645487
ikskuh
virkony: no, there was a proposal to do so, but it was discovered that successdefer isn't required

1603645530
virkony
ikskuh: where do I find proposals archive?

1603645533
Kena
Allright, so if it's known I suppose it's already encouraging.

1603645584
tane
ikskuh, thank you (I don't get how this is even remotely intuitive :D)

1603645617
ikskuh
virkony:

1603645636
ikskuh
tane: i don't think it's intuitive as well

1603645662
ikskuh
Kena: right now, the docs are also horrible to write 🙈

1603645664
Kena


1603645711
Kena
is it because of a inadequate generation tool you mean?

1603645744
ryuukk_
ikskuh: Kena: right now the docs are strongly programmer-focused, non programmer use zig?

1603645754
ikskuh


1603645758
ryuukk_
telling people to check ziglearn when it is also very incomplete is bad thing to do

1603645767
ryuukk_
better just say: doc is not finish

1603645781
ikskuh
ryuukk_: ziglearn contains more info and is more in flux :)

1603645794
ryuukk_
and this should be written at the top of the doc, so people know what to expect

1603645801
ikskuh
sobeston is also happy to hear when there is stuff missing :)

1603645847
ryuukk_
- Work in Progress - should be at the top, a red banner, otherwise poeple who come in to check the language will be very disapointed, like me

1603645865
TheLemonMan
send a few grands this way and I'll write all the docs you want

1603645883
ryuukk_
it is not about money

1603645891
ryuukk_
it is about your intention with the language and the doc

1603645894
ikskuh
ryuukk_: oh. that won't help

1603645899
ikskuh
people don't read the banners anyways

1603645904
virkony
I only found mention on IRC logs that refer to lack of examples. Example of code for successdefer from CppCon 2015 by Andrei Alexandrescu:

1603645904
ryuukk_
if you want people to use, tell them what is the actual state of things

1603645907
TheLemonMan
for me it is, writing docs is boring and I prefer code

1603645929
ryuukk_
write code that generates it

1603645939
ikskuh
doesn#t help ;)

1603645945
ikskuh
you cannot generate docs out of thin air

1603645953
TheLemonMan
that's where neural networks come into play

1603645954
ikskuh
you can only make writing docs easier

1603645956
ryuukk_
well if you want to make a language for the world, you gotta document it

1603645960
ikskuh
true

1603645966
ikskuh
i don't think anyone objects here ;)

1603645970
ryuukk_
otherwise you'll keep answser same questions forever on IRC

1603645979
ikskuh
but i think focusing on docs is right now wasted energy

1603645990
ikskuh
and the core devs should focus on making the language stable

1603645992
ryuukk_
it is not about focusing on doc

1603645992
bfredl
documentation by GPT-3?

1603645997
ryuukk_
it is about putting commong info on it

1603646014
ryuukk_
where is energy spent right now?

1603646015
ikskuh
^= kristoff_it1 you could do this

1603646026
TheLemonMan
bfredl, great idea for a startup

1603646028
ikskuh
ryuukk_: making the language stable and creating the self-hosted compiler

1603646047
ryuukk_
why need self hosted compiler when LLVM works right now?

1603646055
bfredl
just use a few fataruma projections.

1603646064
bfredl
the forth projection should be: auto-generated docs

1603646121
ikskuh
ryuukk_: because not everyone has 10 GB of RAM to compile stuff

1603646143
ikskuh
self-hosted compiler will be correct, well planned

1603646143
ikskuh
fast

1603646145
ikskuh
memory-efficient

1603646156
ikskuh
stage1/llvm version is just "it barely works"

1603646233
TheLemonMan
I've always heard that unused ram is wasted ram, we should use even more memory

1603646244
ikskuh
less CI for everyone!

1603646255
tane
TheLemonMan, that explains a lot :<

1603646468
bfredl
lol the kernel is supposed to take care of that by itself

1603646478
bfredl
by using unused ram as disk cache. no ram cell untouched.

1603646489
ikskuh
^=

1603646503
ikskuh
having 32G RAM and only needing 2 is just glorious disk speed

1603646563
bfredl
or just mmap all the things

1603646588
bfredl
I do this with my huge numpy vectors. python has never been that fast without virtmem pressure..

1603646658
TheLemonMan
> python has never been that fast

1603646660
TheLemonMan
ftfy

1603646664
bfredl
a (non-anon) mmap is bascially an allocation with free extra swap. and COW logic kernel side if you want it.

1603646690
bfredl
like you know, the kernel can solve problems for you. if you just ask it nicely.

1603646729
ikskuh
bfredl: sadly, i can't :(

1603646768
bfredl
becuz you write the kernel?

1603646783
ikskuh
hah

1603646783
ikskuh
kinda

1603646786
ikskuh
embedded hardware

1603646793
ikskuh
"baby" steps on LPC1786 with zig

1603646802
bfredl
that's nice

1603646807
ikskuh
i know the platform by heart now, i wrote two demos on it already

1603646810
ikskuh
in C++

1603646822
ikskuh
but now i want to get get the full power out of the hardware with zig

1603646842
ikskuh
and i'm using a event loop async/await implementation on embedded

1603646844
ikskuh
which is nice

1603647112
bfredl
yes. async/await with exact static mem alloc is nice for sure.

1603647138
ikskuh
yeah

1603647147
ikskuh
i now have three tasks in parallel

1603647150
ikskuh
"blink the screen"

1603647154
ikskuh
"render some graphics"

1603647180
bfredl
while c++ standard be like "it might allocate on the heap, or not allocate. Who knows? :DD"

1603647200
ikskuh
:D

1603647214
ikskuh
EventLoop.waitForRegister(u32, &lpc.LPC_SSP0.SR, TNF, TNF);

1603647221
ikskuh
↑ zig awesomeness in a nutshell

1603647265
bfredl
zig had me att build.zig. like clang+cmake except a sane build config lang :D

1603647375
ikskuh
heh

1603647379
ikskuh
build.zig is really nice

1603647391
ikskuh
zig build -DReleaseSmall flash terminal

1603647475
ikskuh
okay

1603647493
ikskuh
my screen blinks, the display gets filled with some color patterns, and i can communitate via serial port

1603647504
ikskuh
all in parallel, linear tasks

1603647627
bfredl
soon i am gonna convince the neovim dev community to make neovim depend on zig :D

1603647636
bfredl
probably after the first usable stage2 release

1603647875
Kena
Please does `[]const u8` represent a immutable array of bytes or an array of immutable bytes?

1603647904
Nypsie[m]
A slice of immutable bytes

1603647969
Kena
therefore, the length can vary is that right?

1603648037
ikskuh
[]const u8 is a pointer+length to dynamic number of immutable u8s

1603648229
Kena
I didn't know it was a slice, I thought it was an array.

1603648282
Nypsie[m]
Arrays have a size known at compilation time

1603648303
Kena
Allright, thanks for explaining it to me.

1603648326
Nypsie[m]
No problem :)

1603648458
ifreund
arrays are values, slices are pointers

1603648563
frmdstryr
Was going to make an issue but though I'd ask here... is there any reason why std.mem doesn't use SIMD for things like std.mem.indexOf or has it just not been implemented?

1603648580
ikskuh
i think it's just not yet implemented

1603648630
TheLemonMan
because LLVM vectorizer is awesome

1603648653
ikskuh
aaaaaaaah

1603648661
ikskuh
StackTrace.format: var arena = std.heap.ArenaAllocator.init(std.heap.page_allocator);

1603648663
ikskuh
well……

1603648890
frmdstryr
TheLemonMan: Does code need to be written so it'll vectoriize it automatically? Eg

1603648933
frmdstryr
I'm guessing the repeated DOIT() 8 times is so the compiler vectorizes that?

1603649193
TheLemonMan
yeah, sometimes you have to help the compiler with some hints

1603649364
TheLemonMan
oh you asked about std.mem implementations, those suffer from the extensive use of slices

1603650419
tane
hey ikskuh, mind if I send you a PM?

1603650477
ikskuh
always welcome

1603650673
tempnicksimp
as I'm messing around with opening windows and whatnot on my PC, I seem to be leaking memory or otherwise leaving a crudload of it on standby, I cleared it out on windows with RAMMap, but while `zig build-exe` works fine, `zig build` seems to still fail with an OutOfMemory error when it uses the std lib's arena alloc.

1603650718
tempnicksimp
first time I had this issue it was a one-off and I ended up restarting my PC at some point.

1603650730
tempnicksimp
Is there a reason it can't use the freed memory?

1603651515
TheLemonMan
arena free is mostly a no-op

1603651526
TheLemonMan
unless you're trying to free the very last allocation you've made

1603651763
tempnicksimp
I'll pastebin the stack trace when I call `zig build`

1603651943
tempnicksimp
I may have misread, looks like `AccessDenied`?

1603651945
tempnicksimp


1603652197
frmdstryr
Is there any plans to have something like "zig build run --watch" that'll rebuild & run when a file changes?

1603652321
Nypsie[m]
Stage 2 already has --watch, which is used for hot reload. Currently it requires a manual "update" command, but in the future other tools can make requests to this to trigger recompilation, or even get semantic information

1603652458
frmdstryr
That'll be nice, thanks for the info.

1603652467
Nypsie[m]
No problem :)

1603652632
ryuukk_
a draft of my experience with zig

1603652662
ryuukk_
it is not complete, things are missed, hopefully i'll complete it over time

1603652675
Nypsie[m]
I think it's good to share it. How we experience it, may not be the same for everyone else :)

1603653954
TheLemonMan
tempnicksimp, yep, the error trace is a bit of a mess right now

1603653986
tempnicksimp
I just want to compile ;-;

1603654002
TheLemonMan
you're getting an AccessDenied error somewhere when something tried to rename a file

1603654024
tempnicksimp
it seems to have cleared, yeah, it does seem to only happen around the time that I have no free memory

1603654028
tempnicksimp
but that may be a coincidence.

1603654040
tempnicksimp
I wasn't using windbg last time I had this error

1603654059
tempnicksimp
but I am not so that's likely what's stopping it from accessing whatever it needs to access

1603654122
TheLemonMan
but zig build shouldn't eat all your ram, it shouldn't suck this much

1603654186
tempnicksimp
yeah, again, to be fair, I am opening and closing windows and probably leaking something somewhere or otherwise doing some shenanigans that aren't helping, with that said after I clear standby memory I've still had issues with access, even after switching on windows developer mode.

1603654248
tempnicksimp
"closing" I should say unceremoniously crashing all over.

1603654373
tempnicksimp
looks like windbg can't open source files if they aren't c/c++

1603654409
tempnicksimp
debugging with symbols is pain

1603654530
g-w1
does the self hosted compiler support debuginfo

1603654532
g-w1
?

1603654566
TheLemonMan
no

1603654568
g-w1
ok

1603654598
TheLemonMan
it only supports a small chunk of DWARF

1603654603
g-w1
ok

1603654790
nyaayaya
ryuukk_:

1603655124
nyaayaya
> `std.info.log("my message"), i can't, i have to add .{} at the end, why? i don't know but i hate it, it makes me type more, 3 characters, that are all annoying to type and all different`

1603655125
nyaayaya
yeaah, it's a bit confusing

1603655637
ikskuh
nyaayaya: because zig doesn't have variadic arguments

1603655650
ikskuh
you either need a different function (like logNoArgs) or something

1603655655
pixelherodev
I agree with some of the points raised, I just don't consider them problems. e.g. requiring `.{}` is a bit of a pain, but it makes the code more explicit and more readable, so I'm willing to take the minor annoyance when writing code

1603655657
ikskuh
or you pass in empty arguments

1603655695
ikskuh
streams have writeAll and print as two different functions

1603655716
ikskuh
log doesn't have those, i think because it's not really usual to just log a message without additional information

1603655772
dutchie
i would like better type inference about stuff like the `return -1` point, but i assume that's coming when stage2 is more complete

1603655814
ikskuh
"return -1" should work in all cases

1603655827
ikskuh
the problem is "return if(c) a else b"

1603655837
dutchie
yeah that's the one i've run into

1603655837
ikskuh
that the information about the return value isn't bubbled into the if

1603655862
dutchie
or the same thing with switch

1603655875
ikskuh
yeah

1603656098
ikskuh


1603656101
ikskuh
seems to work though

1603656127
nyaayaya
ikskuh: mhm, and I think it's good that Zig doesn't have them, but maybe it wouldn't be so bad to create two different functions :(

1603656157
ikskuh
there's nothing from stopping you to add those and create a PR :)

1603656166
TheLemonMan
well fuck, the FreeBSD CI started hanging

1603656174
nyaayaya
huh

1603656188
dutchie


1603656202
nyaayaya
(oh no, I am using FreeBSD)

1603656207
dutchie
i have only tried it with 0.6.0 not master though

1603656242
ikskuh
dutchie: ah, yes

1603656243
TheLemonMan
dutchie, without a single @as cast how should the compiler infer you want a u8?

1603656262
ikskuh
TheLemonMan: from the return type into the switch prong into the if

1603656278
TheLemonMan
nyaayaya, it's only the CI server that goes belly up every now and then

1603656285
ikskuh
you can bubble in a "wanted target type"

1603656366
TheLemonMan
hm? I see a switch full of comptime_int branches

1603656428
ikskuh
yes

1603656432
ikskuh
but that switch has a target type

1603656440
ikskuh
so each switch prong must coerce to this type anyways

1603656448
dutchie
L35 also is maybe a clearer example

1603656464
ikskuh
return X;

1603656476
ikskuh
you know that X must coerce to std.meta.ReturnType(F)

1603656488
ikskuh
so when you have a "return switch() { }"

1603656491
TheLemonMan
now you're messing with me, where's the return type?

1603656502
TheLemonMan
that switch has no type annotations!

1603656504
ikskuh
you know that each prong must coerce to the return type of the function

1603656514
ikskuh
TheLemonMan: i'm talking about coercion logic

1603656526
ikskuh


1603656538
ikskuh
here's a example that could be implemented

1603656548
TheLemonMan
oh, I was talking of dutchie's example

1603656556
ikskuh
also dutchie's example has this

1603656563
ikskuh
as each prong has a "destined" type which you can infer the wanted type

1603656569
ikskuh
which is the return type of the function

1603656615
TheLemonMan
const d = switch (...) { <- where's the destination type for the switch?

1603656639
ikskuh
it has none

1603656648
ikskuh
doesn't mean inferring can work in more places

1603657890
CmdrCrisp
Hey All, sometimes, while looking at a zig string, i see a "c" prepended to it, like: c"Some Kind of String". Does that indicate it is a c-string?

1603657936
ikskuh
CmdrCrisp: that's pre 0.6 code

1603657948
ikskuh
we changed how strings work which deprecated "c-strings"

1603657970
ikskuh
strings once were array literals

1603657989
ikskuh
where "hello" was equivalent to [_]u8 { 'h', 'e', 'l', 'l', 'o' }

1603658003
ikskuh
this has now changed with a update

1603658019
ikskuh
strings are now const pointers to zero-sentinelled arrays:

1603658030
g-w1
what was the reasoning behind this change?

1603658032
ikskuh
"hello" is now &([_:0]u8 { 'h', 'e', 'l', 'l', 'o' })

1603658037
ikskuh
g-w1: flexibility

1603658040
g-w1
ok

1603658050
ikskuh
zig introcuded sentinels for arrays and slices

1603658058
ikskuh
you can now express that the last item must be a certain value

1603658061
ikskuh
for example:

1603658077
ikskuh
[3: 0xFFFF]u16 { 1, 2, 3 }

1603658092
ikskuh
this is an array of (byte)size 8

1603658095
g-w1
cool

1603658096
ikskuh
having len 3

1603658111
ikskuh
but encoding in the type system that after the three elements, a 0xFFFF is guaranteed

1603658154
ikskuh
this is really cool

1603658163
ikskuh
as you can now encode c-strings in the type system:

1603658173
ikskuh
"[*:0]const u8"

1603658192
ikskuh
"pointer to unknown length elements, but guaranteed to be terminated by a 0

1603658216
mattnite
you can also make null terminated slices: [:0]const u8

1603658226
ikskuh
yeah

1603658235
ikskuh
this is really a huge advantage over other type systems

1603658236
g-w1
yeah. i saw that from last weeks zig showtime about pointers. cool!

1603658272
g-w1
ohh. zig showtime is soon. cool

1603658287
mattnite
yeah dawg

1603658352
ikskuh
oh shite, completly forgot!

1603658355
ikskuh
nice, i can watch it

1603658358
ikskuh
i thought it ran already

1603658370
g-w1
its usually on sat but this week on sun

1603659248
kristoff_it1
Showtime is live, we start in 15m

1603661312
Kena
I don't understand why `return -1` would be incorrect. `-1` is valid value for a i32 type, right?

1603661337
ikskuh
return -1; is okay :)

1603661349
ikskuh
there's some special cases when stuff is nested

1603663917
nyaayaya
;w;

1603666575
jabb
heyo, does the fact that this not work a side effect from some compiler checks missing?

1603666602
jabb
i'm getting errors regarding function reference crossing function call boundary when uncommenting those lines

1603666633
jabb
looking below you can see it i'm calling it in the struct declaration. i'd like to know if this is expected behavior so i can continue to use this pattern

1603666644
jabb
and what the different between the two is

1603668170
jabb
the exact error: zig:615:13: error: 'deinitialize' not accessible from inner function>>deinitialize(ptr, parts);>>.zig:613:60: note: crossed function definition here>>pub fn f(context: *c_void, parts: *Particles) void

1603668192
jabb
f being the wrapped function

1603668203
jabb
wrapping*

1603669073
CmdrCrisp
@ikskuh, Thanks for the answer earlier about the strings. That clears it up

1603669082
ikskuh
you're welcome :)

1603669158
CmdrCrisp
@ikskuh, if I can pick your brain, do you know the reason behind continuing to use null-term strings as opposed to pascal-style?

1603669186
ikskuh
the answer is c compatibility

1603669187
CmdrCrisp
Referring me to some kind of post is more than enough, but C-Strings are such a source of headache in C.

1603669194
ikskuh
slices are "pascal style strings"

1603669203
ikskuh
c-style is sentinel strings

1603669212
ikskuh
[:0]const u8 is … both at the same time

1603669222
ikskuh
[]const u8 is pascal style (pointer + length)

1603669229
ikskuh
[*:0] const u8 is c style

1603669247
jabb
i fixed it by adding `comptime` to the function params in the wrapper function. my only question now, is it legal to @field a function declaration and passing that around?

1603669274
ikskuh
jabb: @field(a, "b") is equivalent to a.b

1603669296
ikskuh
everything allowed to a.b is doable with @field

1603669305
jabb
this is crazy awesome then

1603669313
ikskuh
@field(Type, "decl") is the same as Type.decl

1603669316
ikskuh
yes, it is

1603669321
ikskuh
it allows a lot of crazy stuff

1603669351
jabb
i'm taking a type and tacking on a "Context" to a NAME declaration so I can get a substruct to automatically cast to

1603669380
jabb
i'm registering types by name that can be instantiated with their own type in like 3 lines of code

1603669389
jabb
did you see my above link, ikshuh?

1603669400
ikskuh
nah, i'll take a look

1603669413
ikskuh
oh, your gruebite from discord?

1603669419
jabb
yep!

1603669423
jabb
who are you?

1603669432
ikskuh
MasterQ32/ikskuh/xq/mq32

1603669435
ikskuh
chose one :D

1603669441
jabb
oooo

1603669445
ikskuh
ikskuh is vocalization of xq

1603669445
ikskuh
:D

1603669449
jabb
nice. i think we're both waiting for godot

1603669459
jabb
(c abi)

1603669463
ikskuh
heh, true :D

1603669466
ikskuh
your code is still optimizable!

1603669474
jabb
i removed the wrapped stuff

1603669478
jabb
so that is pre comptime adding

1603669483
jabb
it looks nice now, lemme edit

1603669532
ikskuh
inline for(std.meta.fields(System)) |fld| { if(@hasDecl(SYST, fld.name) { @field(system, fld.name) = @field(SYST, fld.name); } }  }

1603669538
ikskuh
this should do the same

1603669560
ikskuh
copy everything from SYST to System what is declared as a field in System :D

1603669569
jabb
updated

1603669588
jabb
that is absolutely insane

1603669596
ikskuh
it's the power of comptime

1603669607
jabb
it's like compiling dynamic code statically

1603669643
ikskuh
yep

1603669646
jabb
i can piece together types and have them be fast static types

1603669651
jabb
hoooooly mackerel

1603669737
ikskuh
wait until you discover @Type()

1603669765
jabb
...

1603669777
ikskuh
because writing structure definitions is lame

1603669782
ikskuh
let the code write your structures for you :D

1603669822
jabb
oh my god

1603669833
jabb
this is way better than any macro system i've seen

1603669839
jabb
in terms of ergonomics and simplicity

1603669934
jabb
can i modify a typeInfo at comptime? how do build these without borrowing from an existing type to @typeInfo

1603669980
ikskuh
see std.meta.ArgsTuple for example

1603669983
ikskuh
or std.meta.Tuple

1603670078
jabb
:O

1603670131
jabb
can i ever program in another static language again without feeling crippled?

1603670208
ikskuh
no

1603670217
jabb
damn, thought so

