1578098792
fengb
Aha, have a reduced test case

1578099165
andrewrk
music to my ears

1578099185
fengb


1578099203
andrewrk
thanks

1578099222
fengb
np, I can also work around it now that I know the problem

1578099231
andrewrk
looks like a missing spill

1578099255
fengb
Music with your favorite error message :P

1578099343
andrewrk
haha

1578099389
andrewrk
daurnimator, zig test also has --color off

1578099508
plumm
andrewrk:

1578099559
plumm
tysm

1578099814
leeward
andrewrk: Is there anything else you'd like done with

1578099926
andrewrk
leeward, nope it was just needing some attention from someone who could merge it. merged!

1578099947
andrewrk
thank you for writing docs

1578100241
leeward
\o/

1578100277
leeward
I have a less obviously good PR in the works. I needed a way to delete arbitrary elements from PriorityQueues.

1578100601
plumm
andrewrk: regarding that pr: im trying to use log10 with a comptime int: what happens with 0?

1578100709
andrewrk
it should either be a compile error or undefined, depending on whether log10 is defined to produce the undefined value, or assert that 0 is not given as a parameter

1578100746
plumm
well it returns an int, but im using it in conjunction with isNegativeInf.. the returnType is still comptime_int

1578100749
andrewrk
if I were to guess the best API right now, I'd define it to return undefined for parameter 0

1578100750
plumm
hmm

1578100768
andrewrk
`@as(comptime_int, undefined)` is valid zig

1578100789
andrewrk
it's only when you

1578100817
andrewrk
so for example: const x: comptime_int = undefined; //ok

1578100826
andrewrk
if (x != 0) { // compile error: branch on undefined value

1578100854
andrewrk
however it is perfectly acceptable for some APIs to say, "calling this asserts that the parameter is not 0"

1578100873
andrewrk
which makes it Illegal Behavior to pass 0 for the parameter, which means if you do it at compile time, it should be a compile error

1578100922
plumm
no worries now, i dont have to use negativeInf if the input argument is comptime since math.log10(0) returns 0

1578100932
andrewrk
I don't know which one log10 is currently, but it should be in the doc comments for the function

1578100952
plumm
but since log10(0) is undefined in math, i think that is an issue

1578101029
andrewrk
defining log10(0) to be 0, when it is undefined in math, is not very ziggy

1578101108
plumm
i think thats because log10(0) right now converts it to a float and then floors it and returns it

1578101129
andrewrk
if it happens to be 0 by accident, but not guaranteed by the API, it would be appropriate for the implementation to do something like `if (want_runtime_safety and param == 0) return undefined;`

1578101285
plumm
wouldn't it make more since to just @compileError at the call site since log10(0) isn't possible?  or is there some benefit to letting the variable be undefined

1578101393
andrewrk
related issue:

1578101445
andrewrk
making a call with 0 be a compile error is the other thing that I noted would be reasonable to do: it is perfectly acceptable for some APIs to say, "calling this asserts that the parameter is not 0"

1578101481
andrewrk
deciding between one or the other involves subtle considerations

1578101516
plumm
right

1578101628
andrewrk
one benefit of undefined would be that it allows you to calculate something before knowing whether you will need the result or not; and as long as you end up not needing the result when it is undefined, everything works

1578101651
plumm
you said branching on an undefined value is checked behavior, right?

1578101661
andrewrk
it's checked at compile-time, but not yet checked at runtime

1578101664
andrewrk
however that is planned

1578101695
plumm
so my thoughts are: compile error for now, and when runtime undefined detection is in, swap that to undefined. does that sound reasonable?

1578101783
andrewrk
reasonable for what? a pull request to modify log10 in the std lib?

1578102032
plumm
sorry about that, computer froze

1578102071
plumm
yeah, all math undefined functions should be a compile error (e.g sqrt(-x), log(0)) until runtime undefined detection. i just wanted to know if the pr was worth the effort

1578102332
Snektron
Do you think those are fixable with those arbitrary ranged ints?

1578102349
andrewrk
I don't think the implementation should be affected by whether or not we have runtime safety for branching on undefined

1578102365
andrewrk
I think the API should be the best thing, regardless, and the language improvements is a separate concern

1578102368
Snektron
I guess that would make the api very inconvient without some kind of pattern matching though

1578104339
plumm


1578107009
fengb
Is this the best way to do async recursion?

1578107026
fengb
I need to copy it to 3 more places and it's getting pretty gnarly :/

1578107082
andrewrk
fengb, I was hoping to solve std.fmt.format without an allocator

1578107091
fengb
That's a stack allocator

1578107100
fengb
It'll be pre-allocated on format()

1578107105
andrewrk
I see

1578107118
fengb
I still need to find the actual frame size, but it solves the recursion

1578107144
fengb
Or it should... I suppose it can possibly get into a loop with a custom formatter

1578107147
andrewrk
you know about @frameSize, yeah?

1578107155
fengb
Yeah but these are generic functions

1578107183
andrewrk
yeah good point I don't think it's relevant here

1578107183
fengb
I might have missed something though

1578107384
andrewrk
you're working on the thing that I'm planning on working on next, after I solve some tech debt with regards to variables in ir.cpp, and after I get some more of these PRs merged

1578107392
andrewrk
which is cool

1578107400
andrewrk
but then when I try to help it's putting me in an endless loop

1578107423
fengb
Alright, I can just brute force this last step

1578107445
fengb
And hopefully solve most of the recursion. I'm 90% done... so there's 90% more to go :P

1578107458
leeward
Hooray, the tests run again!

1578107549
andrewrk
ha

1578107632
andrewrk
fengb, if you can uncomment the block of code with EAGAIN in std.os.write, and then run the simple tcp chat server example successfully, you win zig

1578109050
fengb
Oof, I may need to refactor format() to generate an AST. I'd like to traverse it twice, once to get the needed stacksize and another to actually run it

1578115519
via
'0X123' is a valid hex literal, but translate-c will translate as-is, and thats invalid in zig. i have a branch that adds 0X for zero-literals, but not sure if thats the right way to do it

1578116079
wilsonk
via: maybe open an issue and ask there? Andrew and/or some of the others usually answer those and can debate the code/merits better there. You can also post some code examples (or a diff/paste) pretty easily for others to check at their leisure ;)

1578116296
fengb
`@sizeOf(@TypeOf(async formatValue(@as(f128, 1.0), options.fmt, options, &tmp_generator)))` any idea why comptime ends up executing this async function?

1578149133
Cadey
andrewrk: shitty idea, but can't you generically replace format with bufPrint?

1578149158
Cadey
that way the allocation is always controlled by the user and can either be a heap or stack allocation based on what makes sense

1578149208
mq32
Cadey: why do you want to replace "format"?

1578149217
mq32
it requires not even a buffer to format stuff

1578149230
Cadey
i think i misread :D

1578149237
Cadey
i'm tired

1578155280
swoogan
In the first line of 'Editing Source Code' in CONTRIBUTING.md there is a link to the anchor "#building" that isn't present in the file.

1578155804
fengb
Cadey: we‚Äôre in the process of updating format() to be iterator based instead of callbacks. It‚Äôll remove the possibility of errors

1578156175
Cadey
ah

1578156177
Cadey
cool

1578156282
fengb


1578158298
schme245
fengb: if it's not too much work, would you consider baking

1578158416
fengb
Yeah that should be easy. I‚Äôll make a note

1578158595
schme245
thanks, appreciate it! üôè

1578158995
fengb
Well this one probably isn‚Äôt going to be ready soon so it might be better to convince that one to go in first :P

1578162187
PC9801
hi there, I was wondering if anyone could point me in the right direction for opening a tcp stream in zig if possible :)

1578162420
adamkowalski
andrewrk: i'm trying to add flycheck support for zig so I can get linting in emacs. is there a way to run the compiler on a file, but just do parsing + error reporting?

1578162467
adamkowalski


1578164799
Snektron
PC9801, theres std.net which has a StreamServer, but i dont think theres any client stuff

1578164830
Snektron
But you can always use the posix calls directly if thats compatible with your os

1578171915
via
is it possible to do packed/extern anonymous struct literals?

1578173909
via
should i be able to address-of something defined as an extern opaquetype? trying to use libopencm3 where the header forward-declares a struct and uses it a lot, but we also address-of an instance of the struct:

1578173950
via
the symbol has an address in the lib at link time

1578173990
pixelherodev
I would certainly think so

1578174016
pixelherodev
A value defined as extern is available to the module in question

1578174023
pixelherodev
Otherwise, there'd be no point in an extern decl

1578174033
pixelherodev
If you can access the value, by definition, you know its address

1578174066
via
well, i don't have visibility into any of the fields, so i can only deal with addresses of it, not the value

1578174084
via
so i see why zig does not like the fact that i'm declaring a var of that type

