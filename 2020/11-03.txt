1604363644
pixelherodev
That's actually a smart idea though

1604363683
pixelherodev
It'd be neat if compilers could e.g. selectively exclude headers from included directories if they were from a non-linked library

1604363688
pixelherodev
Or, make it a compiler error instead

1604363703
pixelherodev
That'll let some errors be noticed before the linking stage

1604365452
maxrazer
Are any of the necessary components available that would allow applications to be built for android using Zig?

1604365512
daurnimator
maxrazer: yes. for a sufficiently small definition of "application"

1604365526
alexnask[m]
Masterq32 on github has an example android app repo

1604365539
daurnimator
maxrazer:

1604365626
maxrazer
Ok, thank you. I don't really know how much is needed or is missing. I think a cross platform GUI library and other libraries might not be there yet for more than an experimental application. Would that be correct?

1604365660
maxrazer
I see OpenGL, but higher level I imagine.

1604365663
daurnimator
correct

1604365704
maxrazer
Ok, but this could be possible in the future and Zig could be a desirable choice do you think?

1604365730
maxrazer
I was looking it looks like there is sufficient libraries to make an Android app with Golang for comparison.

1604366011
maxrazer
There was a time I heard of people doing cross platform iOS/Android development in C++, but it ended up being more trouble than it was worth.

1604366236
daurnimator
that's what my feeling would be generally

1604366259
daurnimator
so much of the android ecosystem just expects you to code inside the JVM; and be able to read Java guides/tutorials (some kotlin now I guess)

1604366280
daurnimator
you're really breaking with tradition by using anything else

1604366291
daurnimator
now; for a game where you do all the UI yourself anyway... you'll probably be okay

1604366311
daurnimator
but if you want to make a more traditional app with native UI.... you're in for trouble

1604366318
daurnimator
that said, maybe it all works out nice

1604366596
justin_smith
daurnimator: it's worse than just "use the JVM" - it's a custom nonstandard JVM and all docs assume you are using a specific IDE setup

1604366617
daurnimator
indeed

1604366620
justin_smith
that IDE does support java / kotlin equally at least

1604366661
GrooveStomp
I'm trying to pass a c_int to a C function that takes an enum, but I'm not sure how.  Zig shows this as part of the error: "const enum_unnamed_45 = extern enum(c_int) {" but "enum_unnamed_45" is private, so I can't access it from my code.

1604366667
justin_smith
but it's definitely not the kind of modern *nix style modular toolchain you'd expect if you're used to linux dev for example

1604366747
justin_smith
GrooveStomp: just guessing, but @enumToInt might help here?

1604366771
daurnimator
GrooveStomp: you'll probably need to share more of your code for us to help

1604367140
GrooveStomp
OK, I'll see if I can get a minimal sample here

1604367588
GrooveStomp


1604367611
GrooveStomp


1604367875
Kuraitou
GrooveStomp: I think it needs to be c.gnutls_server_name_type_t.GNUTLS_NAME_DNS

1604368005
daurnimator
GrooveStomp:just use .GNUTLS_NAME_DNS

1604368017
daurnimator
without the `c`

1604368182
GrooveStomp
WHOA! That is blowing my mind. .GNUTLS_NAME_DNS works; is this a new feature?

1604368205
Kuraitou
oh nice, I was running into the same problem but that's a much better solution

1604368240
GrooveStomp
Thanks!

1604368339
daurnimator
GrooveStomp: oldish feature; its called an "anonymous enum literal"

1604368648
daurnimator


1604371111
GrooveStomp
Oh interesting. I've been using that in switch statements; but always understood it to be scoped to the enum var I'm doing the switch on. In this case I don't understand how Zig is determining the context to be the const c for the C imports.

1604371231
daurnimator
GrooveStomp: zig attempts to coerce it to the argument type

1604371253
daurnimator
GrooveStomp: the function is declared to take an enum{foo,bar} ==> you can pass `.foo`

1604371259
GrooveStomp
Gotcha

1604371268
daurnimator
no different to if you did: `var x: enum{foo,bar} = .foo;`

1604371373
GrooveStomp
Totally separate: I'm invoking a function defined with a function pointer type: "typedef void (*fptr)(void *); extern fptr fn;"  When calling this I have to "unwrap" it: "c.fn.?(foo)".  Kinda funny to me.

1604371926
g-w1
what is the point of zig {run,build-{exe,lib,obj}} --show-builtin? why are there so many? wouldn't it be more clear to just have zig env --show-builtin or something like that

1604372410
daurnimator
g-w1: because the builtin file changes depending on other arguments

1604372429
daurnimator
g-w1: e.g. build-lib vs build-exe changes `output_mode` in the builtin output

1604372445
g-w1
ah. i knew I was missing something, thanks

1604399921
ifreund
I'm using packed structs as bitfields and they haven't bitten me yet :)

1604407795
g-w1
can someone take a look at why my pr is failing?

1604407858
g-w1
oh seems like its a bug in qemu, all the other prs are failing too :(

1604408565
daurnimator
g-w1: 44 commits? `git rebase origin/master`

1604408586
g-w1
im not very good at git, is there a way to squash them all?

1604408599
g-w1
is that it?

1604408721
daurnimator
that will at least get rid of your 30 merge commits

1604408731
g-w1
thanks

1604415221
sjums
Is there a good introductory course to Zig and especially integration with C DLL's on windwos?

1604415242
sjums
Most things I manage to find are focused on Linux

1604415287
sjums
the main introduction as well as the language reference are also a bit thin for a Zig noob :)

1604415304
ifreund
sjums: you may want to check out

1604415397
dutchie
anybody done much with ncurses(-like) interfaces in zig?

1604415909
sjums
ifreund mein freund - thanks. Sadly it's not answering my current issue. I'll read it through though - there's certainly lots to learn from it!

1604416532
earnestly
dutchie:

1604416692
dutchie
right, hence the "-like", just wondered what's out there at the moment in zig-land

1604416729
ifreund
I think a couple of terminal libs have at least been started, not sure how far they are

1604416737
ifreund
I'll try and find some links

1604416745
earnestly
dutchie: Oh I mentioned it as a thing you might use to make one :p

1604416806
ifreund
dutchie: here's one:

1604416889
ifreund
related:

1604416920
dutchie
cool, ty

1604417056
ifreund
also

1604427808
Xavi92
andrewrk: based on your suggestion, I have just submitted an issue to

1604427870
maxrazer
I see errors are values in Zig, as they are in Golang.

1604427922
maxrazer
I'm wondering if they took the same approach or really work the same. I'm not familiar enough with using errors to compare myself.

1604427953
maxrazer
I see this article on why Go's error handling is so great:

1604427977
maxrazer
So, my next thought was, if Zig is coming down the pipeline as a future language for lower level programming I wonder if it takes the same approach.

1604428013
maxrazer
That consistency could potentially be very nice, assuming it is a good approach.

1604428071
maxrazer
I also see this:

1604428195
dutchie
that's a good summary

1604428217
dutchie
there's also the main documentation:

1604428298
dutchie
`try` is basically a better, shorter version of go's `if err != nil { return nil, err }`

1604428345
ugla
It avoids some pitfalls of the Go approach, one being that you get an error or a result, whereas Go gives you a possibly-null error and a possibly-null result.

1604428360
fengb
Also has free stack traces

1604428367
fengb
And errdefer handling

1604428411
ifreund
yeah, I think zig's errors are a pretty strict upgrade on go's personally

1604428438
fengb
Also you can do !void, which is really awkward in Go

1604428447
earnestly
So long as you don't end up with a million different ways of handling errors like Haskell

1604429482
maxrazer
I appreciate that explanation.

1604433115
jaredmm
Hey fengb, is there something that stopped you from working on zig-protobuf or did you just not need it?

1604433195
g-w1
I am trying to impliment a custom format function for a Vec3 type but it is failing, what am I doing wrong?

1604433453
g-w1
ah. i had to remove writer.writeAll wrapping std.fmt.format.

1604437879
andrewrk
Xavi92, nice work

1604439816
andrewrk
what is this fresh hell, std lib tests now failing with -O ReleaseFast

1604439823
Xavi92
Thanks, andrewrk

1604440724
ifreund
this is cool:

1604440953
ifreund
I'm not sure if it feels ziggy though

1604441373
Xavi92
I remember some proposal that added requirements on functions that go with `defer`/`errdefer`. What was the proposal status? I do not remember the issue number

1604441405
frmdstryr


1604441422
Xavi92
frmdstryr: thanks!

1604441701
Xavi92
I don't know if this was already suggested, but what about a mix of status quo and the `cleanup` keyword suggested by andrewrk?

1604441757
Xavi92
That would require the user to write `defer`/`errdefer` below the affected function, returning a compile-time error if the user forgets it. While more verbose, it respects status quo and it's safer

1604441768
g-w1
is anyone farmillar with the default calling convention in stage2 generated code? I am trying to debug some code, but it is hard since there is no source level debugging. I am tryign to look at the registers, but I am getting confused since I dont really know the calling convention. is it C?

1604441795
Xavi92
And, with this method, there arent't any hidden function calls

1604441817
g-w1
it seems like C.

1604441834
pfg_
yeah it should be c by default

1604441882
g-w1
ok

1604442009
Xavi92
Anyway, night everyone!

