1600908856
squeek502
@justin_smith, you can do something like this (I run this from the build folder of my zig checkout, so the paths are relative to that)

1600908858
squeek502
zig test ../lib/std/fs/test.zig --override-lib-dir ../lib --main-pkg-path ../lib/std

1600909467
justin_smith
squeek502: cool, that works, I thought I'd tried this combo before but clearly I got something wrong

1600911500
andrewrk
if you remove the "red herring" lib dir in the build folder zig will automatically find the one from your source checkout

1600926317
gonz_
andrewrk & alexnask[m]: Is the idea for Alex to work on zls as part of the core team?

1600926343
gonz_
(and things like it)

1600926420
andrewrk
gonz_, core team is not a paid position; however it does come with some decision making powers of what gets merged into master branch

1600926451
gonz_
Aha

1600926468
andrewrk
with more funds we will have more paid hours available to core team members

1600926469
gonz_
Find a way to throw money at alexnask[m], please :D

1600926475
andrewrk
working on it :)

1600942459
gonz_
The discord server is in bad need of moderation when it comes to certain people who insist on being inflammatory in as many conversations as possible all day every day.

1600942488
alexnask[m]
It can get tiring sometimes

1600950817
Sahnvour
it does

1600952488
fengb
That one guy again?

1600952631
ikskuh
yeo

1600953431
pixelherodev
gonz_: there's a reason I stick to IRC these days

1600953584
Sahnvour
simply following the activity was a burden so I muted the discord server since a few days

1600953991
gonz_
Eventually, if left unchecked, I think the norm will drift towards telling people their arguments have no value, etc.

1600954079
ifreund
agree that action should taken, not motivated to do anything myself though as I'm happy sticking to IRC

1600954201
earnestly
IRC is the aslyvm

1600954353
Sahnvour
well, if it's community-driven it has to moderate itself

1600954979
pixelherodev
Or the mods need to step in

1600955374
pixelherodev
Whoa, 6250 is more and more impressive every time I look :P

1600955385
ifreund
yeah, it's awesome

1600955392
ifreund
look at all that C++ getting deleted :)

1600955452
pixelherodev
Yep!

1600955471
pixelherodev
The only downside is that I'm

1600955484
pixelherodev
Though it's good to get a break I suppose

1600955522
ifreund
yeah, I never really have a shortage of projects I want to work on

1600955608
pixelherodev
Who I wouldn't kill for time dilation... or immortality, I suppose. Huh. Voldemort would make a lot more sense if he was an engineer lol.

1600966314
ifreund
man, being able to create an opaque type with methods would be make these libwayland bindings i've been poking at way easier and better

1600967658
justin_smith
ifreund: opaque type with methods meaning compile code that doesn't need to know the implementing struct?

1600967700
ifreund
well, you would only be able to pass around/use pointers to the struct

1600967736
ifreund
we already have @Type(.Opaque), but there's no way do define methods for such types

1600967752
ifreund
s/do/to/

1600967801
justin_smith
ifreund: I may be missing context, but that sounds like something you could do with a reified interface (you write code that calls the interface, implementor writes an adaptor that works as a backend to said interface)

1600967814
justin_smith
that's how java would do it, but they are indirection happy :D

1600968032
justin_smith
I guess that's not far from being a dumb vtable

1600968048
ifreund
there should be no dynamic dispatch here

1600968136
justin_smith
that's harder to do I guess - the compiler would have to fill in the target functions?

1600968380
fengb
Methods are compiler magic that rewrites into static function call

1600968405
fengb
foo.bar() is identical to Foo.bar(foo)

1600968544
justin_smith
so what concretely would opaque types help you do? if it's not late binding / dynamic dispatch

1600968570
alexnask[m]
It would mostly be helpful for C bindings I imagine

1600968594
alexnask[m]
When there is some API that only uses pointer-to-structs and the struct's layout itself is opaque for all intents and purposes

1600968698
justin_smith
on the level that it would change between dynamic library versions so you couldn't hard code a more direct access when dynamic linking?

1600968746
companion_cube
it's also useful to prevent people from depending on implementation details that might change?

1600968892
justin_smith
companion_cube: yeah, that's exactly the sort of thing I'm wondering, what is that "opaqueness" hiding that doesn't already violate C linkage rules, and I don't assume we can break things by avoiding indirection / late binding / dynamic dispatch but I don't know that well enough to be sure

1600968931
fengb
The wrapper methods can be static and invoke the extern functions

1600968939
fengb
It’s just nice syntax sugar

1600968953
fengb
And getting rid of C fake namespaces

1600968989
justin_smith
see, to me that's the sort of indirection I was talking about - but it's not "dynamic dispatch" I guess because it's just following a pointer and not a table lookup?

1600969027
fengb
Well it might be dynamic linking

1600969044
justin_smith
more concretely: you have a struct type with pointers to methods, a given datum would provide an implementation pointing to the functions they use

1600969055
justin_smith
that seems like a solution

1600969057
fengb
Or it could be statically linked? Either way, they’re not generally considered dynamic dispatch

1600969080
fengb
Otherwise any glibc function would be considered dynamic

1600969123
companion_cube
justin_smith: ah, I thought it was just on the language level; the compiler and linker would still see everything

1600969156
justin_smith
fengb: to me the part that's interesting is the late binding - compiling against the struct of methods (known offsets) plus data struct (opaque pointer) means you can accept alternate implementations right? late binding is useful.

1600969182
justin_smith
without arbitrary lookup, it's just following one extra pointer

1600969224
fengb
There’s no struct though. It’s hard coded to be a specific method

1600969253
fengb
Although Zig would most likely inline the method so it’d be calling the linked function directly

1600969255
justin_smith
companion_cube: yeah, I'm probably getting things scrambled here, but I'm very interested in understanding how these things work, and my background knowledge is haphazard so I quickly jump from things I know well to things I'm totally ignorant of here

1600969274
fengb
Function declarations are not stored in any table at runtime

1600969275
companion_cube
I don't know much either

1600969292
companion_cube
but some languages provide a notion of public/private that is only for the programmer

1600969302
companion_cube
the compiler can still link to struct offsets, inline, etc.

1600969319
justin_smith
fengb: right, sorry, the "struct" was my suggestion of a potentially useful idiom - allowing swapping out of implementations, cost of an extra pointer lookup per "method call" (call of struct function pointer on data item)

1600969339
fengb
Oh yeah, that’d be a vtable :P

1600969355
alexnask[m]
Yeah, either a vtable or a global offset table for the whole program

1600969379
alexnask[m]
If you just want to swap implementations at runtime

1600969388
fengb
Stage2 actually does that for incremental compilation

1600969429
justin_smith
cool, thanks for humoring me

1600969448
alexnask[m]
Yeah, its really interesting, although its not used to swap out stuff at runtime yet

1600969455
alexnask[m]
Hot code swapping is planned though

1600969485
fengb
I thought hot code swapping was working?

1600969490
alexnask[m]
So I imagine it would work in a simialr function just with the code mapped in memory

1600969499
alexnask[m]
Is it? Did I miss some big PR? :P

1600969520
fengb
I thought Andrew demoed it. Maybe it was just showing off the compilation part

1600969745
andrewrk
I have not done a proof of concept of hot code swapping yet

1600969754
andrewrk
but I have made the claim that incremental compilation of stage2 is 90% of the work

1600969776
andrewrk
I also hinted that an upcoming live coding session would be trying to do a PoC

1600969785
fengb
Oh

1600969818
andrewrk
I also explained how it would work on a stream if I remember correctly. So I can see how that would get confusing whether it was implemented or not :)

1600971826
justin_smith
based on my code reading of std so far, it looks like there's no concept of an atomic value (that is, some memory location that the compiler will ensure is always used atomically), just atomic ops and the user needs to ensure a given value is used atomically?

1600971950
justin_smith
and based on the blurb for "Atomics" in langref, uses of "@fence(...)" should be relevant

1600974549
andrewrk
that's correct justin_smith

1600974664
justin_smith
great, thanks

1600974699
companion_cube


1600974706
companion_cube
(in C++, but I imagine zig is exactly the same currently)

1600974803
justin_smith
companion_cube: I thought that atomics were a type in c++, but I'm definitely no c++ expert (funny enough I was watching a different Herb Sutter video this morning as background research - I'm trying to implement lock free data structures)

1600974869
companion_cube
sure, you have a collection of atomic types

1600974876
companion_cube
corresponding to what the cpu supports

1600974880
companion_cube
same in rust, btw

1600975056
justin_smith
yeah, in zig we are in a more ad-hoc place, where any pointer or integral type can be used atomically, with no compiler enforcement that this is done consistently

1600975079
justin_smith
the op is atomic, the value just exists

1600975092
justin_smith
closer to what's happening on the hardware level

1600975205
andrewrk
I think it can make sense to sometimes operate atomically on memory and sometimes not

1600975278
justin_smith
absolutely, but this is interestingly inverse to how we handle pointers - we are stricter and enforce more compile time invariants on pointers (all the operations are still available if you use the right conversions)

1600975324
justin_smith
maybe not inverse, because zig / c is the right comparison and I don't know that c enforces atomicity on a static checking level

1600975375
justin_smith
OK c11 does have atomic on the type level

1600975459
justin_smith
haha, in c you can create an atomic struct, but accessing a member is undefined behavior

1600978623
andrewrk
I think it's important to pay very close attention to atomic operations and they should not look like normal assignments or expressions

1600978702
companion_cube
@load(x, Acq), @store(x, y, Rel)  ? :)

1600980449
justin_smith
andrewrk: sure, but I think being able to tell the compiler "all operations on this variable need to be atomic to a memory location" would be convenient (even if the operations are not overloaded to look normal like they are in C)

1600980471
andrewrk
I think that's worth considering

1600980488
justin_smith
I think the way zig treats pointers is a good parallel here, we can ask the compiler to enforce rules that don't neccessarily represent runtime level constraints

1600985853
agentultra
If I have two values of `u8` and I want to OR them together as you would in C, like "0x2A << 8 | 0xF0" to get 0x2AF0; how do I get that in zig? I get the warning when using `<<` and the same one from the `@shl*` functions...

1600985962
justin_smith
agentultra: the first thing I'd try is assigning the first one to a u16, so the shift isn't nonsensical

1600985973
justin_smith
well, u16 or larger

1600986108
ifreund
0x2A << 8 | 0xF0 is perfectly valid in zig, and will evaluate to a comptime_int with value 0x2AF0

1600986140
justin_smith
but the destination must be at least 16 bits wide surely

1600986176
justin_smith
oh, sorry I misread, and that makes sense

1600986182
ifreund
yes, agentultra's issue is almost certainly caused by trying to shift a u8 8 bits to the left

1600986233
ifreund
you probably want something like const res: u16 = @as(u16, foo) << 8 | bar;

1600987076
agentultra
thanks!

1600987927
justin_smith
if I'm using @cmpxchgWeak, and old_value is null, how do I actually detect success?

1600987965
justin_smith
it returns old_value on failure, null on success, but null is a valid old_value

1600988011
justin_smith
I think the canonical way to do this is return true / false

1600988046
justin_smith
I guess I could have a lock that I only use in the case old_value is null, but that feels silly

1600988139
justin_smith
correcting myself above, it's technically failure that I can never detect if old_value is null

1600988500
justin_smith
for now, since null is being used as an "empty stack" sentinel, I think I can safely use a pointer to self and have it play the same role (since no element in the stack could be the struct holding the stack, or if it was everything is broken anyway)

1600988556
justin_smith
or better I can have a sentinal "bottom of stack" pointer that all instances can share, less hacky

1600988668
justin_smith
but then I need a new one for each type...

1600991798
agentultra
the type coersion did the trick; that's what the C code would do implicitly that I was tring to understand in zig. Nice!

1600991799
andrewrk
justin_smith, you can detect failure from cmpxchgweak, not sure why you think you can't

1600991820
andrewrk
justin_smith, is it because your T is already optional?

