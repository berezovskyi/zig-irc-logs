1597018153
fraktor
Question about Zig's async model; do I need to explicitly insert suspension points, or will that happen automatically?

1597018215
pixelherodev
Explicit only, IIUC

1597018553
daurnimator
fraktor: depends. only the lowest level code needs to insert them. all callers get them inserted automatically

1597018566
daurnimator
s/lowest/innermost/

1597019143
fraktor
daurnimator: I see.  I've been reading up on Python's async model and it seems similar.

1597019164
fraktor
So if I do some intense computation that doesn't do any I/O or anything else that can be async, I need to insert suspension points myself, right?

1597019181
daurnimator
fraktor: IIRC python's async model requires explicit `async`/`await` annotations

1597019204
daurnimator
fraktor: zig's async avoids "colour". required background reading:

1597019297
fraktor
I see.

1597019323
fraktor
But I do need to add suspension points myself if I'm not using a low-level function that does, right?

1597019377
daurnimator
yes. in that case you

1597019392
daurnimator
but those are usually part of the event loop implementation or OS-level wrappers

1597019419
daurnimator
we should almost never see them in user-level code

1597019477
fraktor
Even if I'm doing intense and slow number crunching and want other "threads" to be able to do their thing?

1597019502
daurnimator
fraktor: then you would call a function from the event loop implementation that somewhere deep inside has the actual `suspend` keyword.

1597019525
fraktor
I see.  Does Zig come with an event loop?  (I'm super new to all this_)

1597019558
daurnimator
Yes; though it's not well documented, bug free, or fast. i.e. its a usable work in progress

1597019570
daurnimator
(just like the rest of the language)

1597019727
fraktor
Makes sense.  I really can't wait until the language is more mature, since it's really nice to use already, but a bit too volatile for big projects.

1597019796
daurnimator
fraktor: the best way is to contribute in an area you have experience/expertise

1597019813
fraktor
I have in the past, a couple times.

1597019825
fraktor
I've gotten a busy schedule recently, but I'm probably going to have more time in the future to contribute.

1597020212
daurnimator
andrewrk: when you get a free moment, would you be able to reply to

1597056722
scientes
daurnimator, what documentation are you working off of for timer0.zig in the fomu-workshop tree?

1597056742
scientes
where are you getting all these magic MMIO addresses?

1597056817
scientes
nice job on this!

1597056836
scientes
oh I see

1597061158
FireFox317
i'm also trying to run zig on fpga's :P

1597061221
leeward
Like on an ARM core on an FPGA? Or are you trying to field-program some gate arrays with it?

1597061344
scientes
FireFox317, well this is risc-v

1597061428
scientes
also compiles to 560 bytes

1597061499
FireFox317
leeward, I have an Xilinx Zynq board which has a dual-core armv7 cpu and programmable logic on the die. Running Zig on the arm core's is pretty easy, but now i'm working on running zig on a riscv-softcore inside the programmable logic and talking to the arm core over an AXI interface.

1597061533
ikskuh
:O

1597061592
scientes
FireFox317, directly to the risc-v or through memory?

1597061602
scientes
as that looks like it is tied to wishbone

1597061630
scientes
>

1597061630
scientes
support for atomic operations.

1597061632
scientes
oh wow, cool

1597061638
scientes
this is pretty complete stuff

1597061641
FireFox317
ikskuh, my todo list also consists of putting a spu-core in the programmable logic and programming that one with zig (stage2) :P

1597061656
ikskuh
haha neat!

1597061672
ikskuh
i have a semi-compliant core in VHDL

1597061697
scientes
what language does it run?

1597061722
FireFox317
scientes, his own isa (spu-2 iirc?)

1597061781
ikskuh
yeah, right now i only have a assembler

1597061902
ikskuh
FireFox317: if you start doing this, ping me in #spu-mark-ii ;)

1597061903
FireFox317
scientes, through memory i guess. Let the soft-core do a specific task and use the arm core for visualisation and stuff

1597061918
danyspin97
how can I initialize a [:0] ?

1597061931
scientes
FireFox317, I was wondering how I could write a little asic and have it do its own DMA

1597061940
scientes
and how to call it from a soft-core

1597061994
scientes
people are using llvm to write GPU+CPU stuff

1597062003
scientes
so this stuff should be really standard by now

1597062107
ikskuh
scientes: what do you mean by ASIC here?

1597062119
scientes
ikskuh, just verilog

1597062122
ifreund
danyspin97: a null-terminated array literal

1597062128
ikskuh
ASIC is just another Tech similar to FPGA, both can implement pretty much the same

1597062145
ikskuh
danyspin97: slice something with terminator:

1597062157
ifreund
[_:0]u8{1,2,3};

1597062158
scientes
ikskuh, yeah, ASIC means actual silicon, but I am trying to talk about how things communicate

1597062158
ikskuh
var some = "hell\0 world!";

1597062165
ikskuh
some[0..4 :0]

1597062175
ikskuh
scientes: that's why i was wonderingâ€¦

1597062196
scientes
ikskuh, like the FOMU is unusual as the FPGA is hooked up directly to the USB pins

1597062203
danyspin97
ifreund, ikskuh: what about heap vars?

1597062212
scientes
which means you can implement a HID or mass storage device

1597062234
FireFox317
ikskuh, sure will do (i'm still in the phase where i'm figuring out how everything works) this zynq chip is quite complex :D

1597062280
scientes
FireFox317, have you checked out if the open source symbiflow toolchain works?

1597062294
scientes
oh nvm, they don't have any zync support yet

1597062297
ikskuh
danyspin97: same difference, you can create a zero-terminated slice out of any normal sliceable type that contains a zero. if there isn't a zero, it will crash

1597062301
scientes
but they do have 7-series support

1597062312
scientes
so if it is 7-series you could help them out :)

1597062312
ifreund
danyspin97: allocate however much memory you want then write whatever you want to it

1597062312
FireFox317
yes i'm in the #symbiflow channel and saw you were in some other channels to (##openfpga, #yosys)

1597062314
ikskuh
note that arrry with terminator do have a zero terminated slice already

1597062316
FireFox317
scientes, ^^

1597062361
danyspin97
ifreund, ikskuh: I see... not trivial though. Using a stack var is simpler in this case

1597062390
FireFox317
scientes, yeah there is support for zynq fpga's in the symbiflow toolchain. I managed to get blinkly led working on the zynq

1597062399
FireFox317
however, there is not a good example yet

1597062413
scientes
FireFox317, can you blink it from the arm core?

1597062423
FireFox317
yes :D

1597062427
scientes
oh sweet

1597062473
ikskuh
danyspin97: it doesn't matter if you use a stack or a heap var. same difference

1597062475
FireFox317
scientes, i'm working on an example which i will add to symbiflow-examples i think

1597062550
FireFox317
scientes, you have an fomu?

1597062573
scientes
yes, and I just bought a litefury

1597062592
scientes
when i found out it shuts down on overheat as I can't fit the heatsink in my laptop

1597062648
scientes
I want a co-processor ABI I can use

1597062660
FireFox317
ah it has a pcie interface?

1597062677
scientes


1597062681
scientes
m.2 yes pcie

1597062766
FireFox317
scientes, ah i see, artix7. so you basically want to have a soft-core running in the fpga logic as a co-processor for your main laptop cpu?

1597062790
scientes
maybe I could also just use a serial port type thing

1597062862
FireFox317
serial port over pcie?

1597062933
scientes
my problem with the fomu is that it is too difficult to build

1597062951
scientes
especially when you have to put a usb stack on there to communicate at all

1597063081
FireFox317
scientes, yeah a simple uart interface is way easier ofcourse. But regarding the fomu it's really nice that you can use a complete open-source toolchain for the ice40. This is not yet the case for the xilinx 7-series chips (artix, zynq etc)

1597063135
FireFox317
scientes, well its possible as i said before, however a lot of the bitstream documentation is not yet reversed engineered (for the xilinx chips)

1597063154
scientes
only stuff that doesn't exist on ice40 however :)

1597063214
scientes
FireFox317, the problem is that reading these standards has nothing to do with my project

1597063251
FireFox317
true that :P and P&R is way harder because the chip is way bigger (VPR is used for xilinx chips instead of nextpnr) however daveshaw started working on a nextpnr-xilinx

1597063303
FireFox317
scientes, reading usb and pci-e standards?

1597063450
scientes
i want it to feel a little more like programming linux, when I can just program to an interface, rather than have to bootstrap myself

1597063619
FireFox317
scientes, i see. I think this has to do with the background of most fpga users. They are more hardware oriented (like me, electrical engineering) and thus the high-level interfaces that software people are used to do not really exist at the fpga level yet. However with the increasing popularity of open-source fpga toolchains this is definitely gonna change i think.

1597065044
leeward
I think the constraints there are more around the resources available on the fpga than the toolchain. If you have enough gates, you can give your soft core a bunch of SRAM and run an operating system. Or put a memory controller on it and talk to external DRAM. It's more about what you get and why you're using an fpga in the first place.

1597068579
scientes
FireFox317, it would be nice if the open source tools supported the serializer/deserializer

1597068589
scientes
and that would be a natural interface

1597068620
scientes
leeward, except the whole reason I am interested in FPGAs is that you DONT have to implement a stack machine

1597068624
scientes
sequential stack machine

1597068864
FireFox317
scientes, you mean the serdes interface on the 7-series? (ISERDES and OSERDES)?

1597068871
scientes
yeah

1597068895
scientes
the next generation of CPUs are also moving to serial ram interface

1597068913
scientes
because ram is now taking up like half of the pins on a CPU, and is limiting bandwidth

1597068940
scientes
so those pins are going to be offloaded onto a ram controller

1597069195
scientes


1597069581
ikskuh
but you give up transmission speed for this

1597069658
ikskuh
<scientes> the next generation of CPUs are also moving to serial ram interface

1597069662
ikskuh
can you link me resources for this?

1597069670
scientes
ikskuh,

1597069670
ikskuh
it's hard to believe this is a good idea

1597069987
ikskuh
crazy

1597070000
ikskuh
i really wonder how fast the transfer frequencies on those serial links are

1597070009
ikskuh
they are as fast as the fastest DDR4

1597070021
ikskuh
but with less pins, so we have to get higher transfer rates

1597070074
ikskuh


1597070092
ikskuh
this image is quite funny, you can see marketing people trying to trick other people into the "bigger is better" thinking :D

1597070151
ikskuh
25.6 MBit/s is the transfer rate of DDR4 @ 3.2 GHz whereas serial attached ram has one 25.6 GHz link

1597070310
scientes
this was the main thing people seemed interested in at the OpenPOWER summit (I was not there)

1597070333
ikskuh
hm

1597070339
yeti
scary

1597070344
ikskuh
i wonder how high frequencies will go in the future

1597070401
ikskuh
btw: at 25.6 GHz serial line we have 1 bit per centi meter vacuum transfer

1597070408
scientes
they are talking doing these serial designs in this video

1597070411
yeti
they should be thrown on a lonely island with a 4MHz CP/M system and wordstar

1597070412
yeti
:-Ãž

1597070432
ikskuh
so a 10 centimeter wire has ~ 30 bits of data in it :D

1597070453
yeti
back to mercury memory...

1597070454
yeti
:-Ãž

1597070464
scientes
core memory :)

1597070478
scientes
hand-woven too

1597070490
yeti
sound in mercury was funnier

1597070522
ikskuh
aaaa, delay line memory <3

1597070534
yeti
jip!

1597070542
ikskuh
the fond memories of "WTF was Stanley Frankel doing there?!"

1597070550
yeti
Â±1950

1597070566
scientes
ikskuh, I don't see why serial is a bad idea when you already have a pretty high guaranteed latency inherant to capacitance memory

1597070568
ikskuh
i know, i wrote my bachelor thesis about a machine from 1966

1597070588
ikskuh
scientes: i just wonder if it's worth the tradeoff, that's all

1597070603
ikskuh
more pins vs. high frequency domains

1597070604
scientes
my point is that you can probably still achieve the same latency

1597070858
ikskuh
if i get it right, both latency and transfer rate are the same

1597071014
scientes
ikskuh, no. Look at 2.1

1597071034
scientes
capacitance memory must be recharged

1597071041
scientes
that is the timings 2,2,3 that memory has on it

1597071051
ikskuh
yeah, so?

1597071058
scientes
that limits the latency

1597071060
ikskuh
that serial memory thing doesn't change

1597071069
ikskuh
it changes the way i communicate with the memory

1597071074
ikskuh
both systems have DDR4 memory in it

1597071079
ikskuh
but the DDR4 isn't attached to the CPU anymore

1597071085
ikskuh
but has a parallel->serial translator

1597071088
scientes
yeah but you can serialize/deserialize during the recharge

1597071105
scientes
(that is my idea)

1597071115
fengb
Do we detect arenas-within-arenas?

1597071118
scientes
I don't think it costs anything to serialize/deserialize because of this

1597071145
scientes
fengb, not last time I checked, but SAMBA has something like that

1597071152
scientes
tmalloc

1597077578
dimenus
andrewrk: how do you build zig in NixOS? have you made your own libclang nix pkg?

1597084989
pmwhite
There is a zig package in nixpkgs. You can copy that and modify it to compile master instead of whatever release nixpkgs uses.

1597085013
pmwhite
dimenus: ^^

1597093701
ifreund
I am so thankful for 0xaa

1597093883
scientes
0xAAAAAAAAAAAAAAAAAAAAAAA

1597093892
scientes
its screaming :)

1597093892
ikskuh
everyone: screams

1597093897
ikskuh
zig programmer: 0xAAAAAAAAAAAAAAAAAAAAAAA

1597098885
ifreund
isn't there some std function to zero-init structs? Or am I imagining things?

1597098914
fengb
std.mem.zeroes

1597098931
ifreund
ah I was looking in meta, thanks

1597098987
ifreund
though, the doc comment makes me think I should just write it out instead

1597099012
ifreund
the struct only has 4 fields, it's not

1597103783
andrewrk
dimenus, I build llvm, clang, and lld from source, because I end up testing with multiple versions anyway

1597103831
pixelherodev
I'm going to see if I can address that CBE design flaw I mentioned on GH yesterday

1597103839
pixelherodev
I think it's the only big issue remaining

1597103841
pixelherodev
(with CBE)

