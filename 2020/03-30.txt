1585528717
pixelherodev
Restructured the parser so it's generated at comptime :)

1585528742
pixelherodev
`const parser = ziggirat.parsers.llvm9` -> `const parser = ziggirat.parsers.llvm.Lexer(9)`

1585528769
pixelherodev
Based on the version, it either `compileError`s or returns a parser with `comptime if`s to distinguish between supported versions

1585528781
pixelherodev
Metaprogramming = <3

1585529184
pixelherodev
Weird, `willreturn` is a valid attribute in 9 also

1585529198
pixelherodev
Just isn't generated by older Zig/LLVM maybe?

1585531679
adamkowalski
Is there an example of reading from a file by streaming as opposed to reading the whole file at once? Either that or getting an iterator into the characters/lines of a file

1585531750
pixelherodev
Use use .stream()?

1585531764
pixelherodev
`.readUntilDelimiterOrEof("\n")` can be used to read full lines

1585531776
pixelherodev
I used to do that for my LLVM lexer before realizing it was easier to just buffer the full file at once

1585531864
adamkowalski
Did you allocate the buffer apriori and reuse it or did you allocate while reading the file?

1585531891
adamkowalski
also did you worry about memory footprint for reading a whole file at once, rather then just going a little bit at a time and transforming it to the actual data structure you need as you go

1585532139
pixelherodev
Previously, the former

1585532145
pixelherodev
Allocated a buffer, growing it as needed

1585532158
pixelherodev
But there were issues that required better buffering underneath

1585532179
pixelherodev
Specifically if you're reading lines, I recommend implementing a separate iterating stream

1585532200
pixelherodev
Because if e.g. end of line isn't found, it means you'd have to grow the buffer and keep reading,

1585532227
pixelherodev
Alternately, the InStream code should be modified so as not to lose a character when the buffer is full

1585532792
adamkowalski
I guess in my case I know exactly the length of a single line in the file, and each line has the exact same pattern. It's not going to generalize but I suppose it's the fastest way to deal with things in this specific case

1585532833
pixelherodev
Reading in the entire file and manually finding positions is simpler, more reliable, and more performant in my experience

1585532858
adamkowalski
the file is 100+mb which was my only issue

1585532872
adamkowalski
I guess thats still fairly small

1585532883
pixelherodev
Ah, that does change things a bit :P

1585532932
adamkowalski
Yeah the goal is to take the entire file and convert it to a matrix in memory. so I would end up with 200mb in memory

1585532948
adamkowalski
I figured I would allocate the matrix to be 100mb up front, but stream the file into the matrix a line at a time

1585532959
adamkowalski
but I guess to make things simpler just read the whole file at once

1585532967
Snektron
adamkowalski: what about memory mapping?

1585532976
Snektron
It seems the appropriate action here

1585533037
adamkowalski
I guess I didn't really think about that

1585533042
adamkowalski
are these the docs to use?

1585533079
Snektron
Yes, although i would also recommend the manpage of mmap

1585533296
Snektron
Usually youd use `mmap(0, size, PROT_READ, MAP_SHARED, fd, 0)` i believe, with size obtained via seek or stat

1585533325
adamkowalski
thanks! I'll try that

1585533563
pixelherodev
Hmm, I should see how `mmap` affects performance of the lexer...

1585533572
pixelherodev
Thanks for the idea!

1585533854
andrewrk
pixelherodev, careful- mmap makes it very difficult to handle errors properly

1585533861
andrewrk
you'll get signals rather than error codes

1585533902
fengb
Could we have a trap handler that remaps into error codes magically?

1585533945
andrewrk
you want to check errors after each memory read/write? in this case just use the read/write syscalls then

1585534763
Snektron
fengb, then you get the zig equivalent of the exceptions-on-signal c++ library a friend of mine was making

1585534822
fengb
I can’t tell if that’s a good or terrible thing

1585534907
pixelherodev
I don't like that idea

1585534935
pixelherodev
andrewrk, good to know, thanks

1585538092
adamkowalski
do we have a string to float function in the standard?

1585538119
adamkowalski
std.fmt.parseFloat?

1585538472
pixelherodev
No idea

1585538482
pixelherodev
I really like tuples for code readability

1585538512
pixelherodev
`Lexer(.{ .version = 9, .error_checking = true})` is more annoying to write but much clearer than `Lexer(9, true)`

1585538519
pixelherodev
Tells you what the args are at the call-site

1585538861
adamkowalski
Yeah it replaces named parameters a lot of the time

1585538895
adamkowalski
it also gives you default arguments since you can introspect on the tuple passed in and then check what fields are there

1585538948
pixelherodev
Yep

1585539008
adamkowalski
What do you think would be the fastest way to read in a csv file to a matrix?

1585539017
adamkowalski
I don't know how many rows/columns there are

1585539030
adamkowalski
so one approach is to go through the data twice

1585539055
adamkowalski
the first time, figure out how many rows/columns there are by counting the number of commas and new lines

1585539077
adamkowalski
then make a single allocation with the right size, and go through the data again, actually filling in the matrix

1585539108
adamkowalski
a second way is to go through the data only once, and have a dynamically growing arraylist or something. finally called to owned once you finish reading through the data

1585539143
adamkowalski
My gut says the single alloction / go through data twice will be faster then growing/copying the data but only going through once

1585539304
pixelherodev
Don't trust the gut!

1585539305
pixelherodev
Profile!

1585539332
pixelherodev
Better yet: implement whichever one is simple, check if it takes too long to run, and

1585539338
pixelherodev
s/simple/simpler

1585539344
adamkowalski
Yeah you're right, good call

1585539369
adamkowalski
I'll do profile guided optimization if it's an issue

1585539392
adamkowalski
i'm so close to finishing up the proof of concept of this library and I can finally see if I'm faster then googles tensorflow

1585539407
adamkowalski
then I guess I go back and do a more in depth performance pass

1585539538
pixelherodev
I was having this discussion elsewhere a few days ago, give me a sec to find my logs

1585539554
pixelherodev
Here it is

1585539561
pixelherodev
I think the best way to sum up my feelings on optimization: if it runs above a certain baseline speed

1585539561
pixelherodev
optimization flags that actually affect your specific workload instead of generic -ON)

1585539576
pixelherodev
s/sed/used

1585539613
adamkowalski
Well I agree to a point. You want to avoid coding yourself into a corner where you can't change the design down the road

1585539646
adamkowalski
if you're system is fundamentally based around virtual dispatch and object oriented programing, you will never refactor your way to a perforrmant system later

1585539658
adamkowalski
especially if your application is 100,000s of lines of code

1585539666
pixelherodev
That's why modularity is important

1585539699
pixelherodev
If you keep components small and largely independent wherever possible, you can replace them wholesale with different designs later without issue

1585539701
adamkowalski
you also wont' get the buyoff from your manager to go back and fix things that are "working" especially if it requires rearchitecting of significant degree

1585539720
pixelherodev
That's why OSS is good; you don't

1585539735
adamkowalski
yes of course that sounds great in theory, but in practice if you always choose the simplest choice you tend to lead highly coupled systems that are brittled

1585539778
adamkowalski
so I think you need to have a mix of upfront planning and design, as well as choosing relatively simple things especially if you can plan a path that will allow your system to change and become faster in the future if needed

1585539790
pixelherodev
A good example is the Zig compiler, naturally :)

1585539802
adamkowalski
and if you're working on small projects or open source software a lot of that doesn't apply

1585539807
pixelherodev
e.g. translate-c has been rewritten in Zig from C++, without requiring significant work in other compiler components

1585539834
adamkowalski
but at work we have been maintaining the same codebase for years and it's having systematic performance problems

1585539848
adamkowalski
people never cared, and now it's to late

1585539866
adamkowalski
they scheduled 2 weeks for performance tuning at the very end of the lifecycle of the product

1585539884
adamkowalski
and you can never fix the underlying issues, only get minor efficiencies here and there

1585539908
adamkowalski
so I agree with you in theory, but I also think in practice it's more complicated

1585540044
pixelherodev
That's not exactly conclusive; I can pull up examples where performance has been massively improved

1585540062
pixelherodev
e.g.

1585540089
adamkowalski
I'm sure you can find evidence going in both directions

1585540104
pixelherodev
Exactly

1585540147
adamkowalski
however, performance gains of orders of magnitude come from fundamental decisions such as cache utilization, ability to easily parallelize your sytem, ability to leverage simd. Memory layout of your data structures. Avoiding indirection, etc

1585540172
adamkowalski
I don't beleive an application that never cared about those things can just refactor their whole codebase to now leverage that

1585540194
adamkowalski
if there is mutable shared state everywhere, global variables being used, virtual dispatch, how the hell are you gonna wrangle that

1585540212
pixelherodev
One piece at a time.

1585540230
pixelherodev
If you don't approach the problem as impossible and instead try to find a way to solve it, it's doable

1585540233
pixelherodev
Might take a long time

1585540237
pixelherodev
Or a lot of effort

1585540240
pixelherodev
but not

1585540255
adamkowalski
right but the argument is whether it's less effort if you just planned for that in the first place

1585540266
pixelherodev
That's not debatable

1585540270
pixelherodev
Of course it's much less effort that way

1585540281
pixelherodev
The real question is whether it's worth the effort if you

1585540322
adamkowalski
yeah and there it will depend on the product you're building

1585540327
adamkowalski
if it's a web app, probably not

1585540354
adamkowalski
if you're building a linear algebra and machine learning toolkit, that will be the determining factor in how long all your analysis will take

1585540368
adamkowalski
and whether it's feasble to use it in real time applications

1585545297
ky0ko
so, i'm writing a terminal emulator in zig, and trying to figure out if async/await is a thing that can be useful in that

1585545410
ky0ko
i come from an almost pure c background with some erlang knowledge, so my instinct for handling events from both a pty and a display server would be to spin up separate listening threads and send messages from those to a central one, and perhaps also to spin off a thread purely for rendering characters

1585545444
ky0ko
could async/await let me manage all these separately without having to spin up threads myself?

1585545474
ky0ko
and if so, is there any good code i can read for handling evented i/o + async/await

1585545615
ky0ko
the entire concept is somewhat foreign to me

1585562085
hio
whats the state of ziglang?

1585562161
ifreund
pre 1.0, actively developed, growing community

1585562167
ifreund
not quite sure what you're asking

1585565596
mps
andrewrk: I pushed new zig package to alpine, built with llvm10

1585565639
mps
all looks fine with some simple tests, I don't have big or complicated ones

1585566136
daurnimator
mps: a good simple test would be: cd $(mktemp -d) && zig init-exe && zig build run

1585566349
mps
daurnimator: build zig by zig?

1585566532
ifreund
that just autocreates a hello world, then builds and runs it

1585566785
mps
ifreund: ah, I used some of my not much complicated C programs for test. thanks for explanation

1585579108
fengb


1585579134
fengb
"However, as we learned above, futures do nothing until they are polled."

1585579149
fengb
I know nothing about Rust async / futures... but doesn't requiring polling make this less performant than what Zig is doing?

1585579171
companion_cube
no, polling is only done by a wakener

1585579182
companion_cube
and futures are encoded as a sum type (a state machine, really)

1585586649
TheLemonMan
nia, are you interested in some more porting work?

1585589598
andrewrk
fengb, I think you should open an issue for

1585589626
andrewrk
release in 2 weeks, it's crunch time for me

1585589649
fengb
Sure

1585589658
fengb
Good luck!

1585589705
ikskuh
andrewrk: go go go!

1585590079
shakesoda
andrewrk: i believe in you!

1585590865
fengb


1585590881
fengb
I’m really grateful how consistent and simple Zig’s syntax is

1585590942
diginet
syntax design is really really hard to get right IMO and really underappreciated as a skill

1585590947
diginet
so many languages have it as an afterthought

1585591037
fengb
I get really frustrated at Ruby like syntax in general. People often prefer “looks nice” instead of “unambiguous”

1585591091
companion_cube
and yet zig doesn't have mandatory `{}` :(

1585591181
andrewrk
mandatory braces for what?

1585591241
companion_cube
if/while

1585591262
andrewrk
ah that old thing. zig doesn't have any of the associated problems though

1585591279
diginet
how does it resolve dangling else?

1585591290
diginet
I guess dangling else isn't really a problem with PEG

1585591295
diginet
what with ordered choice

1585591324
fengb
Braces isn’t ever a problem with the parser

1585591334
companion_cube
it's a problem with the reader though

1585591336
fengb
It’s people misinterpreting it

1585591356
fengb
Yeah, it’s internally consistent

1585591358
diginet
I like the way algol 68 resolves dangling else

1585591407
andrewrk
the compile error for inconsistent whitespace isn't implemented yet

1585591431
andrewrk
that can happen in self-hosted now though. zig fmt should reject rather than reformat

1585591502
companion_cube
I still don't get why not take the simpler, cleaner way of mandatory braces

1585591505
companion_cube
:p

1585591517
companion_cube
more readable without `zig fmt`, as readable with it, not longer, more uniform

1585591524
fengb
But I like zig fmt keeping me lazy :(

1585591527
andrewrk
it's not simpler though, it would require breaking all the rest of the syntax

1585591542
diginet
andrewrk: how does it resolves the ambiguity of dangling else though? is it like I said, just ordered choice in the PEG?

1585591566
andrewrk
fengb, I'm talking about only when the whitespace makes it look like an if body has 2 lines but actually it's 1

1585591569
companion_cube
andrewrk: it's simpler because you don't have the distinction "if with atomic body" vs "if with composite body"

1585591584
companion_cube
from the reader's perspective at least

1585591590
diginet
I guess he can't see me?

1585591613
shakesoda
why would zig actually care about whitespace consistency in the compiler (fmt should care)?

1585591621
andrewrk
diginet, the grammar is specified and unambiguous

1585591630
shakesoda
i'm not aware of whitespace having any meaning in the syntax

1585591635
andrewrk
"dangling else" is not a real problem

1585591646
companion_cube
the compiler shoudl accept anything within the grammar, even badly formatted

1585591654
companion_cube
otherwise the grammar must be updated :p

1585591662
diginet
andrewrk: it is inherently ambiguous in a non-PEG CFG

1585591677
shakesoda
I generally also support mandatory {} on if and loops

1585591679
andrewrk
zig's grammar is specified with PEG

1585591679
diginet
since there are two parse trees

1585591698
andrewrk
it's been planned since forever

1585591720
companion_cube
shakesoda: and switch

1585591727
diginet
no I know I'm not saying it's ambiguous in the formalism zig has adopted, I just wouldn't agree it's not a problem, simpliciter

1585591731
shakesoda
companion_cube: ...they're optional on switch?

1585591744
companion_cube
you still have to () the argument right?

1585591755
fengb
Mandatory {} on ifs break our current ternaries

1585591772
andrewrk
^ this is my point, you can't make this change without cascading syntactical consequences

1585591780
shakesoda
I see

1585591780
andrewrk
ergo it's not simpler

1585591794
pixelherodev
``Mandatory {} on ifs break our current ternaries` Yeah, it'd break like every file I've written :P

1585591819
diginet
I do kind of agree that pascal/C-style bracing is conceptually simpler

1585591823
fengb
I’d be fine with loops though

1585591846
companion_cube
it's not like zig is post 1.0 :)

1585591847
shakesoda
maybe just non-ternary ifs should spew a warning if they aren't braced or something

1585591852
diginet
if/while/etc modify the statement they precede, whether that's a simple or compound statement

1585591859
shakesoda
i'm not sure why on earth style issues would be a compile error though

1585591868
shakesoda
wrt #35

1585591870
TheLemonMan
diginet, are you INetBrowser on github?

1585591876
diginet
TheLemonMan: no, why?

1585591883
diginet
I'm not on GH

1585591895
TheLemonMan
the /inet/ part heh

1585591900
diginet
oh lmfao

1585591914
diginet
TheLemonMan: my nick is from a previous obsession I had with DECnet

1585591914
shakesoda
becoming whitespace sensitive like that just makes it more frustrating of a language

1585591946
andrewrk
the only thing #35 is going to do is prevent bugs, nothing else

1585591947
shakesoda
and for aesthetics, zig fmt fixes it anyways

1585592000
TheLemonMan
rip DEC{,net}

1585592013
pixelherodev
Personally, I dislike the enforced style, but I'm okay with that

1585592032
pixelherodev
Means not having to deal with style arguments repeatedly on every repo :P

1585592055
andrewrk
it doesn't enforce style; it only detects when you made a mistake

1585592084
pixelherodev
I mean e.g. tabs / spaces and such

1585592087
pixelherodev
"whitespace sensitive"

1585592090
andrewrk
unless your style is

1585592281
dermetfan
andrewrk: Did I understand correctly that you don't want "rust-style" `if x {} else {}` because it would break `if (x) a else b`? Could we not do `if x { a } else { b }`? Or is that not okay because it would look like blocks, which are not expressions in Zig?

1585592335
companion_cube
:( right

1585592386
andrewrk
dermetfan, now we're talking about optional semicolons and multiple ways to return things from blocks. this is what I mean about cascading syntactical consequences

1585592426
shakesoda
andrewrk: i've seen boatloads of people do exactly that, and it also makes some fun ioccc-type stuff impossible although that might not be considered a bug

1585592457
pixelherodev
Isn't `break value;` already usable?

1585592465
pixelherodev
Or is that only usable with labelled blocks?

1585592466
shakesoda
i think it's the compilers business to warn about it, but not to stop you when it's just bad whitespace

1585592469
pixelherodev
s/labelled/labeled

1585592475
andrewrk
there's also the problem that `foo{` looks like array or struct initialization

1585592522
pixelherodev
I mean e.g. `const foo = if (bar) {break a;} else {break b;};` <- what are the problems with that?

1585592523
andrewrk
let's take a step back. what is the actual problem being solved? the problem is not "get rid of the parens". what is the actual problem?

1585592585
companion_cube
get the syntax closer to rust's because I'm whiny

1585592627
pixelherodev
...

1585592651
pixelherodev
I don't like any proposal where the justification is "make it more like language X"

1585592654
fengb
Rust is the problem. /flameon

1585592655
companion_cube
😂

1585592669
companion_cube
pixelherodev: tbh it's because I think rust's syntax is objectively better on certain points

1585592678
companion_cube
but andrewrk is right, there's some cascading consequences

1585592684
pixelherodev
If you wanted to say "language X does it because Y, which due to Z is valid reasoning for Zig as well" I wouldn't object

1585592696
pixelherodev
but unless you can explain

1585592698
companion_cube
sure!

1585592714
andrewrk
yeah I think companion_cube was being self-aware there :)

1585592728
pixelherodev
Self-awareness is always nice

1585592736
companion_cube
rust's syntax is both safe by default (no dangling else/goto fail), while being as concise. Besides it embraces being an expression oriented language by making blocks expressions in a natural way.

1585592742
companion_cube
andrewrk: ;-)

1585592747
andrewrk
alright I just pushed a commit to master branch that is probably going to piss everybody off, sorry about that. API deprecations for the upcoming release. A bunch of new compile errors for everybody to solve

1585592754
pixelherodev
*Yes*!

1585592758
pixelherodev
I'm ecstatic!

1585592774
pixelherodev
That means I can take care of it now instead of moving to 0.6 and being like "Wait, what just happened??!!"

1585592787
pixelherodev
If you're deprecating something, I trust you have a good reason for it

1585592831
pixelherodev
To make things even better, I only need to update my PC's zig build, not my laptop's :D

1585592918
pixelherodev
Huh, I just realized I haven't been building Zig with my system CFLAGS

1585592928
pixelherodev
Going to try doing so and benchmark it using compile times :)

1585592995
TheLemonMan
don't forget to add -funroll-loops

1585593006
shakesoda
andrewrk: "the people are arguing about syntax again! quick, break API to distract them!"

1585593007
pixelherodev
... why would I do that?

1585593017
shakesoda
:D

1585593020
pixelherodev
:P

1585593026
pixelherodev
TheLemonMan, was that serious or sarcastic?

1585593063
shakesoda
i have never once in my life read that flag as anything but "fun roll"

1585593068
pixelherodev
lol

1585593118
pixelherodev
My CFLAGS though contains e.g. `--param "l1-cache-size=64" -march=broadwell -falign-functions=32 -mtune=broadwell -pipe -fgraphite-identity -floop-nest-optimize`

1585593128
pixelherodev
Stuff that I'm fairly sure

1585593135
pixelherodev
Not just stuff random internet people say will do so

1585593165
TheLemonMan
pixelherodev, come on, you're making me feel old! Don't you know of

1585593346
pixelherodev
I've seen parts of that elsewhere, but I've never seen that specific link :P

1585593386
BaroqueLarouche
TheLemonMan: oh man I haven't seen that page in years, thanks for the memories #AlsoOld

1585593433
fengb
I used Gentoo 18 years ago. Damn I’m old

1585593462
fengb
There’s been more time AG than BG :/

1585593464
pixelherodev
Why I use Gentoo: my PC boots up in <3 seconds

1585593486
fengb
Heart seconds?

1585593488
andrewrk
in november will be my 20th year anniversary as a programmer

1585593492
pixelherodev
less than three seconds

1585593498
pixelherodev
:P

1585593509
pixelherodev
Happy anniversary!

1585593525
andrewrk
?? I said in november

1585593526
fengb
I’m kinda sad I grew up in the 90s. Dark times for software tinkering :(

1585593557
shakesoda
fengb: was it? i did a heck of a lot of tinkering with software in late 90s

1585593565
andrewrk
IMO it's only gotten better

1585593567
pixelherodev
Happy

1585593575
pixelherodev
:P

1585593580
pixelherodev
Hmm

1585593581
shakesoda
andrewrk: meanwhile, on apple

1585593589
fengb
80s has Apple 2s and Commodores and stuff, and 2000s was Linux

1585593593
andrewrk
what you are seeing are all the opportunities that existed in the 80s that we are now aware of

1585593603
pixelherodev
When building Zig with optimizations (only tweak was adding `-O2`), I get "Error: values may be uninitialized" in analysis :(

1585593606
fengb
We were on Wintel so I basically couldn’t do anything other than read books

1585593610
andrewrk
but opportunities are all around us today, it's just harder to see them when they are contemporary

1585593612
pixelherodev
and bigint

1585593666
shakesoda
i'm annoyed at all the platforms around that it seems are actively designed to not be programmed

1585593669
shakesoda
this isn't a new problem, to be sure

1585593673
BaroqueLarouche
I remember asking people older than me for copies of Visual Studio .NET 2002 to do C# with WYSIWYG GUI environment

1585593683
TheLemonMan
the '90 had java!

1585593691
fengb
Not for a kid

1585593705
fengb
You can’t just download a good tool chain on 56k

1585593728
andrewrk
my parents allowed me 1 hour per day of any electronic entertainment including computers

1585593750
companion_cube
mine, 3h a week…

1585593755
andrewrk
ouch

1585593763
andrewrk
I was a sneaky son of a bitch tho

1585593763
pixelherodev
One of the errors is wrong, too :(

1585593766
fengb
Screens will rot your brain

1585593770
shakesoda
i had some limitation placed that i ignored anyways so i don't remember it

1585593779
companion_cube
when I got to univ and got my laptop and a decent internet connection, it was mad though :D

1585593788
shakesoda
none could stop me from messing with machines all the time

1585593798
pltrz
andrewrk: same! and shared the family PC with my two siblings. but I cheated the system

1585593808
fengb
Ah yeah, I played the shit out of Diablo 2 at school

1585593820
fengb
Maybe I should have studied harder or socialized instead

1585593829
pixelherodev
Noo, socializm is bad!

1585593832
pixelherodev
:P

1585593838
pltrz
lol, we had a kitchen timer to time how long we had left on the screen

1585593844
shakesoda
fengb: nonsense

1585593845
fengb
lol

1585593864
fengb
shakesoda: my college years prepares me for this shut in

1585593906
fengb
I feel weird telling my coworkers that this quarantine hasn’t affected me at all...

1585593906
pltrz
I busted open the kitchen timer, which was spring-loaded and loosened the spring to make 1h be longer than 1h

1585593918
shakesoda
heh, yeah, it's all life as usual for me too

1585593921
pltrz
and put it back together

1585593928
pixelherodev
Nice

1585593928
andrewrk
amazing. I never would have thought of that

1585593934
shakesoda
except now if anyone goes anywhere, they are contaminated and not to be trusted upon their return

1585593935
fengb
They’re busy trying to collect puzzles to not go insane. Meanwhile all my hobbies are already at home

1585593947
shakesoda
instead of just regularly not to be trusted because they're other people

1585593962
TheLemonMan
the time bender

1585593978
pixelherodev
Cleaning up the warnings/errors, probably going to send a patch

1585593993
pltrz
lol. good times.

1585594008
fengb
I haven’t upgraded yet. Home brew needs to catch up >_>

1585594043
pltrz
and the only game I had - which was fcking amazing - was Age of Empires

1585594061
pltrz
what an amazing game

1585594117
pixelherodev
andrewrk, is it a problem if I send a patch which changes an initalization to `=NULL` when that does absolutely nothing except convince the compiler it's initialized later on?

1585594127
pixelherodev
It

1585594134
pixelherodev
(Either initialized or the function returns)

1585594141
pixelherodev
But the compiler incorrectly thinks it isn't

1585594202
fengb
Anyone else think that the Z suffix makes things look cooler?

1585594215
BaroqueLarouche
it does

1585594218
shakesoda
pltrz: there was a notable period of time where I pretty much just had The Sims (+simcity)

1585594221
shakesoda
so many hours... so very many

1585594226
fengb
`inotify_add_watchC` looks lame but `inotify_add_watchZ` looks badass

1585594230
pixelherodev
Better yet, going to actually switch the mode from debug instead of hacking the CFLAGS :P

1585594266
fengb
World of Warcraft for me >_>

1585594282
fengb
Had my college buddies drag me in. I resisted for a good long time

1585594292
TheLemonMan
the next step is using 1337speak for identifiers, 1n071fy_add_w4tchZ is even cooler

1585594304
fengb
Honestly... if I didn't get a girlfriend, I'd probably still be playing lol

1585594304
shakesoda
WoW is one of the few MMOs i could never bring myself to like

1585594353
shakesoda
slightly odd, because I rather like most of them (especially unusual or bad ones)

1585594407
pltrz
I remember somebody I knew always played Warcraft (not WoW) and I always wanted to play - looked fun as hell

1585594507
fengb
I liked Warcraft 3 as well. RIP Blizzard :(

1585594529
pixelherodev
Only MMOs I've really played are Lord of the Rings Online and Dungeons and Dragons Online (because I have a Tolkien obsession :P)

1585594653
pltrz
pixelherodev: same with the Tolkien obsession!

1585594759
pltrz
lol, my dad's also a huge tolkien fan and I watched LoTR with him at wayyy too young an age  hahaha

1585594771
pixelherodev
I watched all three extended editions at, like, 7?

1585594778
pixelherodev
Read them all shortly thereafter

1585594813
pltrz
non-extended edition was not allowed in my household

1585594839
pltrz
yeah same hahaha

1585594931
pltrz
only read the books much later though, only a few years ago for the first time. and oh boy was that amazing. I mean, the movies are already top-notch, but the books just take it to a whole new level

1585595257
pixelherodev
Benchmarks coming along; should have some good info within the hour

1585595729
pixelherodev
Testing out combinations of `-falign-functions=32`, Graphite, LTO, `-march=native`, etc

1585596245
pixelherodev
Well this is just odd

1585596263
pixelherodev
Graphite and `-march=native` on their own both give similar boosts (though Graphite is slightly slightly better)

1585596276
pixelherodev
Put them together and it's about the same as just `-march=native`

1585596291
ikskuh
Graphite?

1585596325
pixelherodev


1585596348
ikskuh
sounds crazy

1585596408
pixelherodev
tl;dr: transforms loops into matrix representation, which allows for low-cost loop transforms

1585596434
pixelherodev
Further testing shows that there's a very very slight boost with both over just Graphite, but it's within the margin of error

1585596463
pixelherodev
I'm basically running a fresh compilation of my project five times with each compilation to see differences

1585596478
pixelherodev
So, not the most scientific out there, but it should be sufficient at least for

1585596486
pixelherodev
Now to try LTO :P

1585596535
ikskuh
LTO is quite awesome

1585596684
pixelherodev
Opened a tiny PR to fix a ODR violation

1585596695
pixelherodev
I might take time to clean up any compiler warnings in a few days when I have a bit more time

1585596709
pixelherodev
I'm already spending a lot of time benchmarking, I also have actual work to do :P

1585596863
pixelherodev
LTO seems to only barely improve performance (literally by ~30ms at best out of ~5s, well within the margin of error too)

1585596905
pixelherodev
Still got ~5 configs left to test with LTO though (that was just LTO+Graphite+march=native)

1585597549
wootehfoot
how much do you get out of graphite?'

1585597569
pixelherodev
Slightly more than I get out of `-march=native`

1585597613
pixelherodev
Default flags: ~5.15s -march=native: 0m4.815s Graphite: 0m4.781s

1585597640
pixelherodev
Graphite seems great on its own, but also seems to greatly interfere with other optimizations

1585598020
pixelherodev
s/greatly// s/other/some other/

1585598772
andrewrk
TheLemonMan, have you seen

1585598786
andrewrk
this seems related to your interests

1585598821
pixelherodev
In an abstract manner, how does incremental compilation work?

1585598828
pixelherodev
You've mentioned that it's intended to use that eventually

1585598846
pixelherodev
I'm not asking how it'll be implemented, but what's the general abstract idea of how that sorta thing would work?

1585598854
andrewrk
pixelherodev, imagine that you have spent 10 hours compiling a game that has a 5 GiB executable file

1585598875
andrewrk
and now you go update a single global constant, you bump `gravity` from 9.8 to 9.81

1585598887
BaroqueLarouche
sounds like compiling Unreal Engine from source

1585598922
andrewrk
in theory, the compiler should be able to simply write 4 bytes of data (the updated f32) into the output executable, and be done. it should take milliseconds at most

1585598947
pixelherodev
Right, but I mean in an abstract way, what would you be doing?

1585598977
pixelherodev
That is, if I update a single line, how would a compiler detect what portions need to be recompiled?

1585598983
andrewrk
now your question is getting into "what are some ways to design incremental compilers?"

1585598984
pixelherodev
Especially with e.g. constant folding?

1585598991
pixelherodev
True

1585599036
andrewrk
there's a rust core dev who has a nice video on this

1585599297
FireFox317
andrewrk, damn that looks close to bootstrapping zig to `arm-linux-musleabihf`

1585599349
andrewrk
yeah it's quite close

1585599362
andrewrk
I'm not sure what that c++ linker error is. you want to go ask #llvm and try to find out?

1585599515
companion_cube


1585599521
mikdusan1
first guess: "typeinfo for ..." something was compiled with RTTI when it shouldn't have been

1585599529
FireFox317
andrewrk, I could. But I'm quite new to all this bootstrapping stuff xd

1585599534
pixelherodev
Best result in terms of balancing compile times / compiler speed is Graphite+`-march=native` and that's

1585599559
FireFox317
ah mikdusan1, that's a good clue indeed

1585599584
pixelherodev
Selective optimizations (e.g. LTO) can provide

1585599625
pixelherodev
Tried approximately

1585599641
pixelherodev
I just wasted... 100 minutes?

1585599643
pixelherodev
You're welcome

1585599646
pixelherodev
:P

1585599683
andrewrk
ziglang/bootstrap could be a fun place for contributors because there is a lot there that should work in theory but doesn't in practice, and if you can track it down, leads to useful, small, easy to merge improvements

1585600129
andrewrk
mikdusan1, hmm, these things are on by default for c++ right?

1585600163
mikdusan1
yes. usually need to opt-out `-fno-rtti` and `-fno-exceptions`

1585600184
pixelherodev
I use those no matter what platform I'm working on :P

1585600197
pixelherodev
I dislike both RTTI and exceptions even where they're available in C++

1585600232
FireFox317
andrewrk, can't we just disable this yaml-bench utility?

1585600236
FireFox317
not build*

1585600259
andrewrk
FireFox317, yep, if you can figure out what cmake option that is, slap it in the build script

1585600290
andrewrk
one of the goals is to not need to patch llvm/clang/lld. however if we send a patch upstream and it gets accepted, we can carry it until the next version comes out

1585600351
andrewrk
the only thing we need to build, for both native and cross llvm/lld/clang, is the stuff in include/ and lib/.

1585600372
FireFox317
but maybe some other llvm-utilities are needed and could have the same problem actually. i'm gonna play with it a bit

1585600410
andrewrk
I believe the only required utility is TableGen

1585600427
andrewrk
actually, that one is only needed for native though

1585600447
andrewrk
hm there's no option to disable utils though

1585600797
andrewrk
FireFox317, actually I found the undocumented -DLLVM_INCLUDE_UTILS. also I realized that it as well as -DLLVM_INCLUDE_TOOLS can be set to OFF for the cross build. I got past that error for arm

1585600845
andrewrk
one thing that took me a while to figure out: for llvm they do some weird cmake generation thing, so if you change the cmake line you have to `rm -rf cmake/ CMakeCache.txt`. This is a llvm-specific workaround

1585601059
FireFox317
andrewrk, I was also wondering why the first command in the build script takes so very long. I build llvm/clang/lld from source before and i had a feeling that it went much faster.

1585601077
andrewrk
which command?

1585601115
FireFox317
building llvm,clang and lld for native os

1585601129
FireFox317
first cmake/make basically

1585601141
andrewrk
I don't know what to tell you there - that's just what it takes to build from source on your native system

1585601156
andrewrk
zig hasn't entered into the equation yet

1585601174
pixelherodev
Different compiler flags?

1585601182
pixelherodev
Different job count to `make`?

1585601183
FireFox317
yeah i know it's not zig. i was probably compiling without -j8 or something

1585601190
pixelherodev
`-j*8*`? Nice

1585601222
fengb
I'm at -j12. Ryzen should be at j64 probably

1585601308
TheLemonMan
if you put `-j` it'll automagically pick the number of cores available

1585601326
andrewrk
don't do it, he's trolling

1585601356
andrewrk
it'll actually fork bomb your system

1585601365
TheLemonMan
eh?

1585601392
andrewrk
last time I checked, which was admittedly many years ago, -j has no limit; no pooling; it just makes as many jobs as it can

1585601405
andrewrk
pretty much guaranteed to halt your system

1585601439
ikskuh
what andrewrk says

1585601441
pixelherodev
Not

1585601444
ikskuh
also -j128 should be enough :D

1585601451
fengb
`alias m8ke="make -j $(nproc all)"`

1585601452
pixelherodev
I mean, I'm definitely testing it

1585601455
TheLemonMan
if you don't have resource limits set up it's not my fault

1585601460
pixelherodev
But I'm fairly certain it should work fine

1585601468
pixelherodev
(I run a patched kernel with a different scheduler)

1585601474
fengb
Or die trying

1585601486
Snektron
make -j16 is a good feeling

1585601501
ikskuh
damn, i'm losing a value between zig and C

1585601501
pixelherodev
fengb, nproc --all

1585601503
pixelherodev
Not nproc all

1585601503
Snektron
ninja by default even schedules n_threads+2

1585601506
pixelherodev
I think

1585601515
pixelherodev
Wait it does?

1585601516
pixelherodev
Huh

1585601521
pixelherodev
I should stop overriding it...

1585601524
andrewrk
anyway FireFox317 arm-linux-musleabihf got to the part where it runs cmake for zig! now just need to figure out why it fails to detect clang and lld

1585601549
fengb
Ah yeah it's --. I don't test on Linux like I probably should :P

1585601580
andrewrk
FireFox317, oh. ok. apparently disabling that cmake stuff made lld and clang not get built. no wonder it "worked"

1585601582
fengb
At one point I had a Linuxbox synced with my aliases so I vaguely cared

1585601617
andrewrk
another interesting data point- aarch64-linux-musl seems to have regressed, with the same compile error as arm-

1585601674
fengb
I don't know why but ninja runs ~5% slower on building zig so I switched back

1585601759
ikskuh
can somebody take a quick peek if i found a miscompilation or if i'm just stupid:

1585601879
fengb
Hmm, it's a little annoying converting arrays to multipointers now :(

1585601907
andrewrk
what changed?

1585602000
fengb
I used to do `foo[0..].ptr`

1585602007
fengb
But that no longer gives me a slice, and `.ptr` doesn't work yet

1585602027
TheLemonMan
ikskuh, check with a debugger and hexdump the value received by the C code, dunstblick_Value layout may be wrong on the Zig side

1585602029
pixelherodev
fengb, what platform?

1585602035
pixelherodev
`ninja runs ~5% slower`

1585602054
andrewrk
fengb, what happens if you do `foo` instead of `foo[0..].ptr`

1585602057
fengb
Mac

1585602074
pixelherodev
Ah, so Not My Problem TM

1585602076
pixelherodev
:P

1585602096
fengb
`error: incompatible types: '[*]const u8' and '*[8192]u8'`

1585602112
fengb
`note: type '*[8192]u8' here — return self.dyn.ram[0..] + (addr - 0xE000);`

1585602125
andrewrk
I might have just fixed that in b980568c810f today

1585602141
fengb
Oh I'll just wait then

1585602181
fengb
I need to get rid of these multipointers.  Such a hack

1585602444
andrewrk
fengb, ok it's not fixed by that commit but I opened

1585602471
fengb
Thanks

1585602573
andrewrk
mikdusan1, I wonder if it has to do with propagating no_rtti and no_exceptions to child codegen instances

1585602587
marijnfs1
is heap.page_allocator the kind of most common allocator now?

1585602595
marijnfs1
direct_allocator is gone right?

1585602615
andrewrk
direct_allocator was always page_allocator

1585602630
andrewrk
it's not a good general purpose allocator. zig doesn't currently have a good general purpose allocator in the std lib

1585602667
andrewrk
it's kind of amazing how much we've gotten by without one

1585602693
fengb
Use more arenas!

1585602697
andrewrk
a reasonable workaround for now is to link against libc and use std.heap.c_allocator.

1585602757
marijnfs1
andrewrk: yeah i mean it works for me, what else would you recommend

1585602937
ikskuh
TheLemonMan, updated the gist with some infos

1585602943
ikskuh
looks like the union is misaligned

1585602949
ikskuh
arch is x86_64

1585603198
TheLemonMan
yeah, what's the @alignOf of the inner unnamed union?

1585603214
ikskuh
in zig or C or both? :D

1585603252
TheLemonMan
in Zig

1585603270
ikskuh
8

1585603287
ikskuh
.type is 4

1585603390
TheLemonMan
hmm, can you try to initialize the structure at runtime?

1585603408
ikskuh
is it enough to put "var" in front of it?

1585603427
TheLemonMan
`var val: c.dunstblick_Value = undefined` and then val.type = ...

1585603486
ikskuh
works

1585603517
TheLemonMan
eh, it's just the good old issue with comptime-known initializers

1585603524
ikskuh
ah, good to know

1585603535
ikskuh
what issue should i subscribe to get an update when it works? :D

1585603572
TheLemonMan
#4295 maybe

1585603607
ikskuh
thanks :)

1585603620
ikskuh
funky thing is that the pointer is aligned right :D

1585603653
TheLemonMan
yeah the problem is that the structure layout is computed 3-4 times in different places

1585603673
ikskuh
oh well :D

1585603684
ikskuh
yeah, i've looked at the packed struct code one day

1585603688
ikskuh
and it was really confusing

1585603693
TheLemonMan
but now the real question is... where is mq32?

1585603704
ikskuh
TheLemonMan: that's me actually

1585603727
ikskuh
this was the last chat(server) i used this nick

1585603735
ikskuh
as "xq" is taken on freenode by someone else

1585603795
TheLemonMan
hah I was so confused when I looked at the gist username

1585603802
ikskuh
ah, sorry :D

1585603814
ikskuh
i now own both of the nicks on freenode ^^

1585603860
FireFox317
andrewrk, i guess its also better to enable the utilities to build, such that we test our `zig c++` integration

1585603899
TheLemonMan
and I've just realized that ikskuh is the phonetic spelling of xq

1585603908
ikskuh
yep :D

1585603926
ikskuh
i'm a bit proud of that nickname… :D

1585603928
andrewrk
FireFox317, I think I fixed it, by reverting a recent change to master branch

1585603960
FireFox317
ah cool! :)

1585603986
andrewrk


1585604002
andrewrk
but the simpler thing of passing these flags without paying attention is what works

1585604039
andrewrk
now it will probably fail to compile stage1 c++ code due to my own sloppy coding with regards to 32 vs 64 bits

1585604114
andrewrk
it may be worth fixing though because part of the purpose of stage1 is to have a large set of host platforms for bootstrapping purposes

1585604141
andrewrk
even though in this case, it's the cross compilation target

1585604232
pixelherodev
Anyone know of a Zig-compatible BigInt library? Whether in C or Zig

1585604250
TheLemonMan
std.int ?

1585604253
fengb
Zig has bigint in std

1585604272
TheLemonMan
err, std.math.big.int

1585604305
fengb
Is bigint math, or is it just is? 🤔

1585604325
andrewrk
you can also link against gmp easily enough

1585604340
pixelherodev
Oh!

1585604352
pixelherodev
Didn't realize there was std.math.big.int

1585604357
fengb
Random question: am I supposed to use mem.readInt{Slice} with floats?

1585604359
pixelherodev
s/std/zag

1585604360
pixelherodev
That's perfect

1585604372
fengb
zugzug

1585604395
pixelherodev
If you look at my projects you'll see I actually use `const zag = @import("std");` :P

1585604433
pixelherodev
Probably shouldn't if a) I want to attract contributors and b) nobody else does this

1585604450
andrewrk
it's cute but it also makes me face palm

1585604467
fengb
And c) nobody else writes a library named zag

1585604506
pixelherodev
In my defense

1585604518
pixelherodev
andrewrk, you're the one that made me think of it

1585604525
pixelherodev
I was only referring to it as zag in IRC/GitHub

1585604531
pixelherodev
but you thought I was doing it

1585604533
pixelherodev
So I started doing it :P

1585604623
andrewrk
FireFox317, upstreamed in

1585604671
andrewrk
FireFox317, this gets us to lld: error: undefined symbol: __clear_cache. Here's the code for that:

1585604688
Snektron
<andrewrk "it's not a good general purpose "> that reminds me, i still gotta do that mremap thing

1585604689
andrewrk
do you want to have a go? it's ported from LLVM's compiler_rt, you can see the source lines up exactly

1585604712
FireFox317
andrewrk, yeah sure will try that.

1585604717
Snektron
i worked on it briefly, i think i had a working implementation, except i didn't know how to proceed with testing

1585604756
Snektron
andrewrk, how do i test whether allocation is correct?

1585604764
Snektron
i mean the implementation of an allocator

1585604794
andrewrk
Snektron, there are some allocator tests in the std lib but nothing that is really good. it would be sweet for a contributor to make a third party project which is an exhaustive testing suite for zig allocator implementations

1585604810
andrewrk
my general-purpose-debug-allocator has a rudimentary fuzz tester you can run

1585604929
Snektron
Would it not make sense to implement that as a first-party thing?

1585605051
Snektron
Looking though the testing code... how does it check whether a test has paniced?

1585605082
pixelherodev
How would an allocator tester even *work*?

1585605088
pixelherodev
You can test the exposed values, sure

1585605091
pixelherodev
e.g. allocations / frees

1585605101
pixelherodev
But any internal testing is extremely allocator-specific

1585605139
Snektron
Yeah thats true. I can imagine a few generic tests though

1585605163
andrewrk
a general purpose allocator fuzz tester would be quite useful

1585605175
Snektron
You could keep track of the state and verify what happens on eg a double free, although i guess that depends on allocator

1585605191
andrewrk
some fuzz testers even can notice when branches are taken and use that to inform inputs

1585605217
andrewrk
inputs being a series of allocate / reallocate / free requests

1585605223
Snektron
you could also launch a child process and trace its memory accesses

1585605317
andrewrk
FireFox317, one more thing you might not notice: will need to enable it here

1585605351
Snektron
Anyway, for now i'll just try to implement it on latest master and use the current tests i suppose

1585605393
andrewrk
I don't think it makes sense to run full fuzz tests on CI commits

1585605403
andrewrk
not as part of the regular pipeline anyway

1585605413
andrewrk
maybe once a week or something

1585605449
Snektron
i mean the mremap part

1585605579
andrewrk
FireFox317, for the asm you should be able to look at the inline assembly from linux syscalls as a template

1585605653
FireFox317
andrewrk, yeah figured that out. Its just doing a syscall in that code and the code is exactly the same as the syscall definitons in arm-eabi.zig. So I can just call that function right?

1585605730
andrewrk
oh ha that's just a cacheflush syscall huh?

1585605734
andrewrk
yep good point

1585605755
FireFox317
it is indeed

1585605787
FireFox317
almost have the PR ready

1585605840
andrewrk
working on ziglang/bootstrap is addicting. I need to get back to release notes + bug fixes

1585606488
karrick
What makes you happy about ziglang/bootstrap work?

1585606586
andrewrk
<andrewrk> ziglang/bootstrap could be a fun place for contributors because there is a lot there that should work in theory but doesn't in practice, and if you can track it down, leads to useful, small, easy to merge improvements

1585606607
andrewrk
"contributor friendly" issues tend to be more fun for me to work on too, but I resist to make space for other people

1585606957
FireFox317
andrewrk, #4867. did not check the bootstrapping yet

1585607197
andrewrk
FireFox317, can you make the unreachable a @compileError? other than that, looks good, and I want to wait for the tests to pass before merging because of the lesson we learned from __divtf3

1585607214
andrewrk
(modifying compiler-rt can expose latent bugs)

1585607419
FireFox317
andrewrk, yup good idea :)

1585607544
andrewrk
FireFox317, oh sorry and also we have to not add the symbol for that case. for example freestanding

1585607583
andrewrk
a bit of duplicated comptime logic

1585607907
FireFox317
andrewrk, will have a look at it tommorow, because its pretty late :D if you want to make progress on the bootstrapping tonight, you can just copy my PR :

1585607950
andrewrk
ok :)

1585609097
r4pr0n
is there a way to build zig not with the system's llvm, but instead let it compile llvm10 itself?

1585609831
andrewrk
r4pr0n:

1585611354
yrashk
I'm trying to bind cimgui, which in turn is a wrapper around imgui, a C++ wrapper. During linking, ld reports that it can't find the unmangled C++ symbols from imgui.  Is C++ actually supposed to be working together with Zig at this point?

1585611370
yrashk
A C++ library*

1585611404
andrewrk
yes

1585611436
andrewrk
we can probably get this solved pretty quickly with more details

1585611462
diltsman
Is this an error set problem?  error: expected type 'fn(std.array_list.AlignedArrayList(u8,null), []const u8) std.mem.Error!usize', found 'fn(*std.array_list.AlignedArrayList(u8,null), []const u8) @TypeOf(std.array_list.AlignedArrayList(u8,null).appendSlice).ReturnType.ErrorSet!void'

1585611493
andrewrk
diltsman, are the error notes helpful?

1585611520
diltsman
Error notes?

1585611633
diltsman
andrewrk The error output lists the function call stack that references that point.

1585611674
diltsman
The only differences that I see there are the error set and the pointerness of the first argument.

1585611708
yrashk
andrewrk: sure.

1585611834
andrewrk
diltsman, hm I guess not in this case then. usually it would point out which parameter, or the return type or something like that

1585611844
andrewrk
but the hints are not implemented in all cases

1585611852
yrashk
to summarize, I have a build.zig building a static library for the C/C++ mix, and an executable that links to this static library.

1585611856
yrashk
ld fails with errors like:

1585611884
diltsman
Ah!  So, the carrot pointing to appendSlice.

1585611914
diltsman
That is what I thought was the problem.  I just don't know how to fix it.  var outStream = OutStream(@TypeOf(buffer), @TypeOf(alloc.allocator).Error, @TypeOf(buffer).appendSlice);

1585611923
yrashk


1585611924
diltsman
Where buffer is an ArrayList(u8).

1585611992
andrewrk
yrashk, the first one looks like you're missing an imgui source file. the second one looks like something that regressed recently and was fixed today in cfedd3a

1585612153
yrashk
andrewrk: thanks! this is a very valuable start!

1585612184
yrashk
btw, I noticed that .a files contain the entire path to the .o files (including the leading slash). Is this intentional? `ar x ` even rejects this as invalid

1585612203
shakesoda
1) imgui_demo.cpp, 2) libc++abi and maybe -fno-rtti -fno-exceptions

1585612223
shakesoda
although if latest zig fixes 2, nice

1585612448
diltsman
I guess, what function on ArrayList would be passed to OutStream?

1585612674
yrashk
with 0.5.0+cfedd3aca, it still fails to resolve  __cxa_guard_abort __cxa_guard_release  __cxa_guard_acquire __gxx_personality_v0 and a few others

1585612744
yrashk
ok, looks like I forgot addSystemLibrary("c++") :)

