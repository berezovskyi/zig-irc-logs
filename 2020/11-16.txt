1605485036
g-w1
could someone tell me if this is an error in the zig compiler before i file a bug? the compiler should not allow else here since the error set is error {T} only

1605485930
ifreund
g-w1: seems like a stage1 bug to me

1605485993
g-w1
ok. im trying to fix rn. good excuse to become farmillar with c++

1605486838
pixelherodev
g-w1: there is no such excuse :P

1605486851
pixelherodev
(no excuse for becoming familiar with C++ is good lol)

1605486873
g-w1
lol

1605489052
g-w1
my patch found TONS of bugs like this in the self hosted compiler :|. itll be a long night fixing them.

1605489215
pixelherodev
g-w1: patch ZLS to support refactoring :P

1605489220
pixelherodev
Or not ZLS

1605489222
pixelherodev
Use the AST API

1605489232
g-w1
or anyone wanna use their text editor/grep magic to grep the error message and delete the lines?

1605489236
pixelherodev
Basically, write a `zig refactor` tool :P

1605489245
pixelherodev
I can do that if you send the patch

1605489252
pixelherodev
It's still manual, but pretty fast

1605489252
g-w1
thanks

1605489265
g-w1
ill push it to gh rn

1605489269
pixelherodev
(I have shortcuts for "jump to error" and "delete the next few lines", so it's not terrible)

1605489320
g-w1
well i mean the output from the `make` gives the lines in the error messages, so someone good with sed/unix stuff could do it automatically

1605489414
pixelherodev
I could try that too

1605489417
pixelherodev
I just don't trust it lol;

1605489434
pixelherodev
Ah wait, actually, send the error log instead

1605489436
pixelherodev
I'll do it that way

1605489446
pixelherodev
Mostly because I can't build Zig compilers right now :(

1605489453
pixelherodev
Not with stage1 support at least

1605489460
pixelherodev
Pure stage2, I think I can still do

1605489472
pixelherodev
But I don't have and won't ever have LLVM 11

1605489484
g-w1
what os are you on?

1605489490
pixelherodev
(because I decided I'd rather use static stage1 builds for now and just not deal with LLVM ever again)

1605489499
pixelherodev
g-w1: Linux

1605489505
pixelherodev
glibc-based, too, it's just a total pain

1605489512
pixelherodev
I mean, my daily driver is 9front now

1605489518
pixelherodev
But zig work I do over SSH to Linux

1605489523
pixelherodev
At least until I add a plan9 backend :)

1605489548
pixelherodev
Though that's not until stage2 because I frankly don't want stage1 on here lol

1605489602
pixelherodev
(hence, getting back into CBE)

1605489700
g-w1


1605489802
pixelherodev
g-w1: good news

1605489806
pixelherodev
There's only three spots.

1605489808
pixelherodev
Not 50.

1605489824
pixelherodev
Well, four

1605489828
g-w1
oh. ig it was just backtraces

1605489844
pixelherodev
Pipe the output of Zig to > grep "error: unreachable else prong" | sort | uniq

1605489851
pixelherodev
~40 of them are on the same line in comptime code

1605489860
g-w1
ah

1605489894
pixelherodev
I can still write you that script if you want :P

1605489899
pixelherodev
Or you can solve them manually

1605489915
pixelherodev
kristoff_it: heyo!

1605489918
g-w1
ill just do manually

1605489922
g-w1
thx for the help

1605489962
pixelherodev
:)

1605489971
pixelherodev
This is arguably a bug in stage1 as well

1605489980
pixelherodev
It shouldn't report the same error 50 times just because it was called from 50 places

1605490842
yZ5vlALg86lP
how does one write `zig test` test cases that need linking against external symbols?

1605490868
yZ5vlALg86lP
is there some build.zig magic incantation i have to do?

1605490884
daurnimator
you just link the whole test.

1605490891
daurnimator
`zig test -lfoo`

1605491876
yZ5vlALg86lP
thanks. that woorks!

1605492187
viaken
g-w1: std.fmt.allocPrint did what I needed, but thanks for the pointer. And with that, I finished my first non-hello world Zig program. :)

1605492210
g-w1
nice!

1605494970
andrewrk
anyone know what to do when vscode says "Request textDocument/semanticTokens failed" "Message: NotImplemented" ?

1605494990
andrewrk
is it because my vscode is too old? 1.45.0

1605495609
pixelherodev
"Open a terminal, and run `vim` - that should fix your editor :)" (I can make this joke because I don't use Vim anymore ;P)

1605495622
andrewrk
from discord: yeah it's beacuse my vscode is too old

1605495707
pixelherodev
Found the first situation in which I have found the behavior of `cat *.foo >file.foo`  is actually desirable: `cat *.deck >all.deck` ignores the previous contents and regenerates it from all the other *.deck files :P

1605501257
marler8997__
andrewrk, this comment nicely explains where I left off with reloader:

1605503906
andrewrk
marler8997__, thanks for helping me out on stream! btw what do you think about making this the default when the OS is linux and the target is non-native? there would be the component that changes what the linker does, and then there would be a comptime bool that start code would look at before calling main()

1605504340
marler8997__
andrewrk, yes, in fact that's exactly what I say in my previous comment before the one I linked you

1605504374
marler8997__
QUOTE: " think by default it would be reasonable to change the default behavior based on whether we are compiling for native or cross targets. Find the system's dynamic linker at "link time" if we compile natively, and find it at runtime if we are cross compiling."

1605504399
andrewrk
brilliant! sorry for just now noticing all this

1605504411
marler8997__
no problem, what brought this up all the sudden?

1605504471
andrewrk
I mentioned it on the Handmade Seattle podcast that aired this weekend, and I wanted to explain the idea to some of the other conference attendees during the afterparty

1605504484
marler8997__
oh cool

1605504542
andrewrk
it's funny because we

1605504575
marler8997__
lol...closed source model like jai?   bleh

1605504619
marler8997__
I mean, I guess I'm ok with closed source as long as it's not closed to me :)  But I emailed them about contributing and they just said they weren't hiring...so boo for closed source

1605504705
Bekwnn
Hi all, I've been trying to debug an error code 5 I've started hitting since updating to 0.7 and beyond. Haven't been able to find any good info on it. Is it the same as gcc's error code?

1605504728
Bekwnn
occurs on build after the full build.zig has run

1605504924
andrewrk
hi Bekwnn do you have any more output you can share?

1605504961
andrewrk
zig doesn't have error code numbers, so that message is probably coming from your terminal or something else

1605505053
Bekwnn


1605505339
Bekwnn
...

1605505407
Bekwnn
oh phew, I thought the command had just been renamed or something for a sec and wouldn't have been pretty disappointed if that was the cause

1605530587
ikskuh
do we have an issue that is about "using zig on file systems that don't support locking"?

1605531067
g-w1
I am seeing in std/fs.zig at the bottom on test "", there is _ = makeDirAbsolute; what is the point of this. it is a function, so is it testing the function, or making sure it gets included in the docs?

1605531100
pixelherodev
g-w1: ensuring testing, probably

1605531125
ikskuh
g-w1, it ensures the function is

1605531189
g-w1
what do you mean referenced, so that every function in the stdlib is compiled not lazily? in a lib aren't all public functions compiled.

1605531271
ifreund
no, not all public functions are compiled

1605531279
ifreund
only if the are called or exported

1605531308
ifreund
or referenced as done here

1605531322
g-w1
wow, interesting, so it is not idomatic to ship a binary of a zig library?

1605531425
ifreund
there is no stable zig ABI and probably never will be. shared libraries use the C ABI, libraries with a zig api are only distributed as source

1605533086
scientes
maintaining two API/ABIs is twice the work

1605533094
scientes
look at how much a PITA C++ ABI is

1605534095
ask6155
Since zig provides c compilation support and I can link to musl is it a good idea to statically most of if not every library?

1605534546
ikskuh
scientes: C++ abi is only pain because people allow c++ functions to be exported into compiled libraries

1605534569
ikskuh
ask6155: you cannot create object files from zig packages (so idiomatic zig code)

1605534592
ikskuh
but you can create any C library as a static lib with either musl or glibc support

1605534605
ask6155
So should I?

1605534770
ikskuh
that's a philosophy question :D

1605534777
ikskuh
i usually link most C libraries as source

1605534781
ikskuh
not as static lib

1605535025
scientes
ikskuh, yeah, because it is two APIs---the ABI and the API (but there is no difference, as Alan Turing pointed out)

1605535054
ikskuh
i can't follow

1605535080
scientes
C++ has two interfaces

1605535084
scientes
instead of just a source interface

1605535089
scientes
that is what you said

1605535107
scientes
<ikskuh> scientes: C++ abi is only pain because people allow c++ functions to be exported into compiled libraries

1605535112
scientes
you are explaining dynamic linking

1605535122
ikskuh
ah

1605535147
scientes
and dynamic linking is an additional API

1605535164
scientes
even for zig the C ABI is a bit of a pain

1605535170
scientes
but not nearly as bad as others

1605535190
scientes
and llvm doesn't make it easy either, as you basically have to just study what clang does

1605535222
scientes
instead of llvm supporting the classifications that are part of arch'es ABI documents

1605535445
ikskuh
well

1605535456
ikskuh
C ABI is specified, so you can also just follow the specification ;)

1605535483
earnestly
It is?

1605535518
earnestly
Wait, do you have links to specifications for C's ABI?

1605535604
g-w1


1605536139
frmdstryr
Should base64 encode return the encoded slice?

1605537971
scientes
earnestly, C ABI is different for every architecture

1605537980
scientes
(but looks the same in C, of course)

1605537995
g-w1
yeah, that was just the linux x86_64 one

1605538005
earnestly
scientes: It's just not specified though, I thought

1605538012
scientes
every CPU vendor publishes a "Sys V ABI supplement"

1605538018
earnestly
Rather it's a commonly agreed upon format

1605538027
scientes
earnestly, only llvm/clang's way of implementing it is not specified

1605538032
scientes
which is a known bug

1605540563
b_jonas
earnestly: wait, I have those links.

1605553422
companion_cube


1605555631
marler8997__
insane good or insane bad?

1605555817
pixelherodev
Latter

1605555843
g-w1
colored async

1605555871
pixelherodev


1605555896
marler8997__
lol

1605555908
marler8997__
I bought a book on modern C++ a few years ago because it was so different

1605556017
pixelherodev
"How to write modern C++: don't"

1605556027
marler8997__
I'm on his first slide with code and feel like throwing my hands in the air

1605556120
companion_cube
I mean, it's very powerful, but wow, the complexity has jumped again

1605556181
pixelherodev
companion_cube: that's exactly why I'm never going to touch it - or anything written in it

1605556237
companion_cube
yeah I agree

1605556243
companion_cube
I'm still kind of shocked, is all

1605556429
Sahnvour
just skimmed through it, a lot of C++ quirks are getting fixed over time and with c++20 especially, so the complexity of writing code is actually reduced imho

1605556457
Sahnvour
complexity of the language+stdlib standard is another story

1605556500
companion_cube
maybe, but like, 3 syntaxes for concepts?

1605556512
companion_cube
one of which is `(concept auto x)` to pass an `x`?

1605556557
Sahnvour
I take it anyday over std::enable_if :D

1605556575
companion_cube
ah yeah he mentions that

1605556577
Sahnvour
agreed that's typical c++ bullshit but oh well

1605556579
marler8997__
what's wrong with enable_if?

1605556594
companion_cube
I mean I think these are good changes, especially modules

1605556599
marler8997__
(still watching vid so maybe I'm just no caught up)

1605556606
companion_cube
but damn, it's such a pile of complexity

1605556613
Sahnvour
it's kind of a hack to emulate concepts, it's hard to parse for humans, and it compiles awfully slow

1605556630
companion_cube
isn't it what Zig will have though? :)

1605556635
companion_cube
(lack of concepts)

1605556699
pixelherodev
Sahnvour: reducing complexity of writing code is meaningless if the implementation of the compiler is, well, C++

1605556728
Sahnvour
companion_cube: no accepted proposal yet, or is there a stance against it in fine?

1605556748
companion_cube
I honestly have no idea

1605556765
companion_cube
but I think it's to be like in D, with compile time asserts and ifs

1605556776
companion_cube
(not sure if a syntax for comptime precondition exists amyway)

1605556778
companion_cube
anyway*

1605556797
Sahnvour
hmm, that's unfortunate

1605556818
Sahnvour
pixelherodev: why ?

1605556839
pixelherodev
Because it's a dependency

1605556858
marler8997__
there's a proposal that woudl allow us to implement concepts inside the function signature

1605556861
pixelherodev
If I write the cleanest code ever, and I depend on, say, LLVM, my code still sucks

1605556871
marler8997__
will find..

1605556881
pixelherodev
because all of LLVM is for all intents and purposes part of my code

1605556889
pixelherodev
The same goes for the compiler you're building with

1605556899
pixelherodev
It's why I dislike GCC and Clang - they're both terrible

1605556910
companion_cube
people writing C++ don't care about their compiler being complicated, for sure

1605556918
Sahnvour
I don't see your point

1605556952
pixelherodev
"Good code + Bad compiler -> bad"

1605556965
pixelherodev
"Bad code + good compiler -> bad"

1605556971
pixelherodev
"Good code + Good compiler -> good"

1605557019
marler8997__
Here it is:

1605557070
Sahnvour
your definition of bad is quite arbitrary and left to interpretation

1605557077
companion_cube
marler8997__: that doesn't give you a way to put bounds on the type, though, does it?

1605557081
companion_cube
just to make sure two types are equal

1605557087
pixelherodev
Sahnvour: Subjective, not arbitrary

1605557090
marler8997__
it does

1605557100
marler8997__
the title is bad

1605557138
companion_cube
marler8997__: ah I was looking at the initial post only I guess

1605557155
marler8997__
fn foo(x: enforceNumber(calltype(x))

1605557160
betawaffle
undefined

1605557182
marler8997__
(I think I prefer "calltype(x)" over "@TypeOf(x)")

1605557198
companion_cube
marler8997__: I think it'd be cleaner with predicates

1605557207
pixelherodev
I honestly prefer status quo over that proposal

1605557217
marler8997__
status quo is to use wrapper functions

1605557220
companion_cube
`fn foo(x: anytype) where isNumber(@typeof(x))`

1605557231
pixelherodev
As is, you can get the same behavior by combining existing properties

1605557233
Sahnvour
pixelherodev: same to me until you're stating what you're judging them on :p size, speed, ... ?

1605557238
companion_cube
predicates can also take several arguments, which is more powerful

1605557248
marler8997__
pixelherodev, yes, using wrapper functions

1605557248
pixelherodev
Sahnvour: Correctness, code quality, stability, simplicity

1605557272
marler8997__
fn foo(x: anytype) { if (isNumber(x)) return fooNumber(x); } ...

1605557295
pixelherodev
marler8997__: I meant more "if (@hasField(@TypeOf(...), ... ))" at the top of the function

1605557324
marler8997__
yeah that's what I wrote

1605557330
marler8997__
isNumber could use @hasField

1605557332
pixelherodev
You wrote that as the return type

1605557335
pixelherodev
... ah wait

1605557336
marler8997__
that wasn't really the point

1605557342
pixelherodev
You left return type blank :P

1605557351
pixelherodev
Threw me off, I thought that block

1605557352
marler8997__
sure, return type wasn't relevant

1605557353
marler8997__
pseudocode

1605557364
marler8997__
ah ok

1605557365
pixelherodev
It doesn't count as pseudocode if it's 99% identical to real code!

1605557372
pixelherodev
That's just confusing code!

1605557375
marler8997__
lol

1605557394
marler8997__
it's "chat code"...somewhere in between real/pseudo code :)

1605559848
hlolli
If I do `var bitReader = std.io.bitReader; \n var bit_stream = bitReader(.Little, stream.reader());` I get `error: calling a generic function requires compile-time known function value`, fair enough, but if I change to `const bitReader = std.io.bitReader;` I get `error: expected type '*std.io.bit_reader.BitReader .... found '*const std.io.bit_reader.BitReader` should I post a pastebin for better clarity, or can I bypass var/const checks?

1605560104
g-w1
where is bit_reader coming from? std.io directly exports BitReader and it is a function, not a constant std/io/bit_reader.zig:176 does this help?

1605560301
hlolli
I tried calling BitReader directly, I think it makes sense here that there are parts of this that needs to be known at compiletime."const bit_stream = BitReader(.Little, @TypeOf(stream)).init(stream);" I guess I'm running trough the gotchas, the tests in the source files help a lot.

1605560371
hlolli
ok so maybe I'm doing something very basic wrong. `const std = @import("std"); \n const BitReader = std.io.BitReader;` this can't work because BitReader is a fn

1605560375
hlolli
?

1605560434
g-w1
well you can assign a function to a constant. this is how you bring a function into a namespace

1605560895
hlolli
I need to site over this a bit :) I see myself often disagreeing with the definition of const or var, I'd see a var being variable memory location and const be a const memory location. But probably it's nuanced.

1605560997
g-w1
eventually functions will be: `pub const main = fn() void {}`. iirc 0.8.0

1605561152
hlolli
nice, looks readable to me.

1605561231
justin_smith
hlolli: within eg. function scope, you can't even guarantee that a variable hits heap, it might only be stored in a register or the stack

1605561280
hlolli
justin_smith it's a small world! :D

1605561333
justin_smith
hlolli: small indeed, I spent some time learning arm 64 bit assembly, then decided I needed more experience with low level but not machine level programming, which led here

1605561360
justin_smith
hlolli: I translated some jack example code into zig for example

1605561501
hlolli
very nice, what led me here is the fact that I've been using nix a lot, and I want to write code which I can compile on nix and have it run everywhere, especially with wasm. I may steal some of your jack code. You mean you just called the libjack api directly? (I guess a wrapper library is unneccecary when you can call c functions directly).

1605561596
justin_smith
hlolli: right, most of the work was taking the output of "zig translate-c" with the sample jack app and turning it into idiomatic code

1605561601
hlolli
Yes, and when I learned that graalvm can't compile to wasm but only consume it, I kind-a gave up on graalvm and decided to give zig a try, compared to vlang and rust, I felt what andrewrk was doing was the better approach.

1605561603
justin_smith
I did it as sort of an exercise

1605561626
hlolli
nice, I used jackjni heavily in clojure.

1605561686
justin_smith
nice, I'm still stuck in that old set of rules that says you don't allocate or risk running GC in DSP code, so I never bothered with that

1605561701
justin_smith
but I guess machines are fast enough these days that it can work

1605561706
justin_smith
machines / gcs

1605561840
hlolli
yes, so far the Allocator module seem to make the GC mechanism clear, I never got heavily involved with GC, only when jna would gc my pointers and crash the jvm, in which case I'd need to make sure I'm holding the references. But I look forward learning about it.

1605561890
justin_smith
hlolli: the usual concern is that gc and allocation both take unpredictable amount of time, which is bad for real time DSP

1605561971
hlolli
true, maybe as you point out, just not performing any GC should be fine for any limited DSP mechanism. Csound doesn't GC at all, just frees memory heap if it's not used anymore.

1605561989
justin_smith
right, and it doesn't allocate memory inside DSP code either

1605562016
justin_smith
instrument allocation is a separate step

1605562040
justin_smith
and it doesn't rely on malloc for this (which introduces unpredictable pause times)

1605562092
hlolli
I guess it's fine if you're not allocating instument in realtime. Compile before starting there's to say?

1605562123
justin_smith
hlolli: as I understand it csound uses a pool for instrument allocations, no syscall

1605562140
justin_smith
other than the initial allocation of that pool before dsp starts

1605562142
hlolli
I was touching the instrument allocation slightly recently, there are many different parts to it, some inefficiant as far as I could tell.

1605562159
hlolli
ah ture, that's defenitely the case

1605562198
justin_smith
hlolli: anyway, my original point was I didn't try this stuff in clojure because clojure without allocation / gc is impossible

1605562299
hlolli
Yes, when I do live code with clojure, I always put the ksmps high and the quality is overall low. But if I were to do a recording I'd always record the events to a score and render it offline. But I guess you are approaching this with more low latency realtime audio.

1605562383
hlolli
Also I'm performing music often in smoke filled nightclubs with Berlin style PA system which have been victims of noise concerts and beer spills. So yet another reason I don't worry about a glitch now and then :)

1605564586
marler8997__
haven't watched yet but this one looks good:

1605564630
marler8997__
How awesome would it be to have Herb Sutter helping with Zig?!!

1605565120
companion_cube


1605565180
fengb
Any sufficiently complicated C++ program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of ~Common Lisp~ Haskell

1605565187
companion_cube
hell yes :p

1605565217
marler8997__
lol

1605565236
companion_cube
well it could at least contain ML

1605565241
companion_cube
ML is nice and simple

1605565265
fengb
HTML is an implementation of ML right? 🙃

1605565286
companion_cube
nah, different 'M' :p

1605565296
companion_cube
clearly markup < meta

1605565321
novaskell
C++2030 turns out to just be strict haskell with angle brackets

1605565388
companion_cube
strict haskell is basically ML

1605565394
companion_cube
but yeah, that's where they're going

1605565399
companion_cube
(converging with rust, too)

1605565467
novaskell
wonder when Idris becomes the goal

1605565500
companion_cube
I mean, C++ will never be pure, it's going to be tough

1605565503
fengb
I don’t think you can shoehorn in Idris. (Although I wouldn’t expect shoehorning in ML either...)

1605565528
novaskell
ATS2 but that'd be pure pain

1605565569
companion_cube
is shoehorning a specific thing here? :D

1605565610
companion_cube
what a weird video…

1605565665
novaskell
since that does deal with mutation through refinement and linear types... and it comes with templates which give even better errors

