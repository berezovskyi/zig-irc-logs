1607126856
viashimo
hi, I'm using trying to modify a field in a packed struct and get "error: cannot reassign to constant". I don't understand what the structure's field is constant

1607126862
viashimo
here's the example code:

1607126928
ifreund
viashimo: hi, your function takes self by value instead of pointer and function parameters are always constant

1607126955
ifreund
you can do `self: *Vec3` if you want to mutate it

1607127022
viashimo
oh I see. that makes sense.

1607127024
viashimo
ifreund: thanks!

1607127087
ifreund
no problem!

1607128090
andrewrk
g-w1, can you help me repro #6939 ? I can't get it to happen for me

1607128471
g-w1
andrewrk: huh, I cant either, I guess it got fixed. closing rn

1607128508
g-w1
4 issues left. yay!

1607128514
andrewrk
so close :)

1607128527
andrewrk
I also have a surprise for windows users today...

1607128580
andrewrk
just need to test it first

1607129765
jaredmm
Microsoft gives me enough surprises. I don't need anymore. :(

1607130113
karchnu
why I'm hyped even though I didn't even use windows?

1607130633
andrewrk
damn, ok, it needs a bit more thought. I have a self-contained .zip file that windows users can use to build zig from source, no MSVC installation required

1607130660
andrewrk
only problem is cmake doesn't know what to do on Windows besides generate msvc projects

1607130745
andrewrk
ok clearly this would be best solved with zig build :) that way not even cmake is required

1607130886
karchnu
impressive

1607131135
andrewrk
there is one big reason this is not just masturbatory: it allows release build of llvm,clang,lld + debug build of zig

1607131142
andrewrk
until now windows users have been stuck with all or nothing

1607131343
fengb
You sound so defensive :3

1607131933
mshb
I never had any doubt that "scratch your own itch" was a euphemism :D

1607133055
andrewrk
llvm's dependency on c++ is a big problem for bootstrapping

1607133082
andrewrk
we get runtime crashes when using `zig c++` mixed with system-installed LLVM :(

1607133100
andrewrk
why you gotta make a compiler backend depend on the c++ ABI?

1607133137
andrewrk
I mean I'm not even complaining about the dependency on libstdc++, I'm just talking about the library ABI boundary

1607134343
meowray
zig's LLD-as-a-library is a problem for us ..

1607135064
daurnimator
meowray: 'us'?

1607135478
meowray
daurnimator: i maintain LLD and know that it is not suitable for such a use case

1607135664
daurnimator
meowray: then why was e.g.

1607135775
meowray
daurnimator: a distribution maintainer wants to save disk space because of zig's use case

1607135846
meowray
daurnimator: i have mentioned in an early review that LLD-as-a-library is not going to be reliable

1607135868
meowray
even after D70378 there are still issues, for example, ResetAllOptionOccurrences will reset all the llvm global cl::opt

1607135890
meowray
if you use any such variable after calling lld, it may go wrong

1607136071
meowray
for example, if there is a fatal error or error() is called 20 times, the process will exit

1607136107
meowray
if the user is a non-llvm application and can guarantee there is no fatal() or error() call, D70378 may be fine

1607136297
andrewrk
meowray, zig will change to invoke itself as a child process in order to call LLD

1607136354
andrewrk
what does D85278 have to do with zig using LLD as a library?

1607136476
andrewrk
D85278 looks like an attempt to fix system lld packages causing issues such as

1607136599
andrewrk
although I'm not sure why it is so problematic (or such an unexpected use case) to be able to use a library as a library

1607136665
andrewrk
dynamic linking LLD will add even more latency if we have to go through process creation

1607136805
andrewrk
look at all this nonsense that would happen every time we need to invoke LLD:

1607137483
meowray
have you actually measured the time cost if zig starts a new process (lld)?

1607141115
pjz
how can I iterate over a structs fields at runtime and compare the field names to a string?

1607141138
andrewrk
without warming the file system it is 3.17 ms on my fast laptop

1607141188
andrewrk
pjz, you would use comptime reflection to populate a value that is then available at runtime

1607141208
pjz
my non-working code is at

1607141224
pjz
andrewrk: so I can't do a runtime iteration using the comptime iterator?

1607141275
pjz
I'm trying like for (std.meta.fields(MyStruct)) |field| { if (somevalue == field.name) { ...

1607141290
fengb
You can do `inline for`

1607141373
pjz
ahh.. that seems to work

1607141386
pjz
now... can you explain what that's doing?

1607141473
pjz
it means like 'inline this compile-time result into this runtime code' ?

1607141496
andrewrk
it inlines the for loop, so the element iterator becomes comptime known

1607141619
andrewrk
meowray, what can we do on zig's end to make your life easier?

1607142683
pjz
why is array[2..] okay, but not array[..2] ?

1607142806
pjz
also, negative indexing for slices would be nice

1607142817
pjz
but I'm sure there's an issue open for it

1607142829
pjz
and yeah, not top priority

1607143366
andrewrk
0 is just one character

1607143371
andrewrk
no need to complicate the language

1607146630
andrewrk
hmm what is one expected to link to find FOLDERID_LocalAppData and FOLDERID_Profile?

1607146649
andrewrk
I think these are guids. pretty silly they didn't just make the definition `static const`...

1607146829
andrewrk
ahh, -luuid

1607147034
pjz
how do I declare a constant array of 3-char strings?  I tried const foo = [_][]u8 { "foo", "bar" }; but no go

1607147355
andrewrk


1607147474
pjz
dangit, my bad - somehow I ended up looking at an ancient version (0.1.1?) of those, probably by following an old link in the wiki or something.  Sorry.

1607147606
andrewrk
no problem

1607151321
pjz
why when I do " my_u32 |= (if (foo[0] == 'a') 64 else 0);" do I get "cannot store runtime value in type 'comptime_int'" ?  I'm storing into my_u32

1607151444
pjz
writing it as "if (foo[0] == 'a') myu32 |= 64;" works fine

1607152325
daurnimator
pjz: welcome to one of the oldest open bugs:

1607153417
pjz
hmm

1607153423
pjz
okay, well, at least there's a workaround

1607153460
pjz
any hints for making a bitfield?  I'm trying to use a PackedIntArray of i1 but " integer value 1 cannot be coerced to type 'i1'"

1607153662
pjz
aaand that looks like it's probably the same bug in a different form. Nice.

1607154044
pjz
ah, needs to be u1 not i1.  thought thinking on it, i1 shold maybe be an invalid type?

1607154595
daurnimator
pjz: i1 holds either 0 or -1

1607174303
protheory8-new-m
Where is async function frame allocated?

1607174352
protheory8-new-m
> @frame provides access to the async function frame pointer.

1607174352
protheory8-new-m
Does it point to frame that is allocated on heap?

1607174365
protheory8-new-m
Does it point to frame that is allocated on heap?

1607174365
protheory8-new-m
* > @frame provides access to the async function frame pointer.

1607174498
novaskell
You're given it when you perform `async foo();` as the  return value so you can decide where to put it

1607174592
protheory8-new-m
Thanks, also there is someone asking:

1607174592
protheory8-new-m
> How are pointers to local variables made safe across yield points?

1607174621
companion_cube
So i1 contains only 0 and -1? Lol

1607174772
protheory8-new-m
<novaskell "You're given it when you perform"> Actually, doesn't return a pointer to async frame too?

1607174787
novaskell


1607174820
novaskell
before is executed only once while I've copied the continuation which allows running it twice

1607174826
novaskell
s/running/resuming/

1607174921
protheory8-new-m
Yeah, I know that, so frame is on stack by default?

1607174979
novaskell
yes

1607174988
novaskell
until you place it somewhere else

1607175237
ifreund
well you can place it directly into heap memory

1607175251
ifreund


1607175293
ifreund
it's not on the stack by default, it's wherever you choose to place it

1607175820
protheory8-new-m
So last question: `var stuff = async funcName();`, is `stuff` instance of `@Frame(funcName)` or `*@Frame(funcName)`?

1607175994
ifreund
the former

1607176007
ifreund
there is no implicit heap allocation in zig

1607176191
protheory8-new-m
ok

1607176193
protheory8-new-m
thanks

1607176199
protheory8-new-m
does resume also return anything?

1607176207
protheory8-new-m
* does resume also return something?

1607176370
novaskell
neat

1607176451
ifreund
no resume doesn't return anything

1607176635
protheory8-new-m
thanks

1607181170
karchnu
How can IÂ format the output with "{}" as I can do with printf in C? Like, allowing 20 characters for a value?

1607181191
karchnu
That's really basic, but I didn't find out. ^^'

1607181200
ifreund
karchnu: see the doc comment of std.fmt.format()

1607181210
karchnu
ifreund: ok, thanks!

1607182207
karchnu
It would be awesome to add a few examples from time to time in the documentations. I'm starting to use Zig, and for now I use tests to grasp the different concepts.

1607182295
ifreund
agree that docs could use a lot of work, but there are other higher priority tasks currently

1607182310
ifreund
I'm sure they will recieve much more attention as zig approaches 1.0

1607182352
karchnu
ifreund: I agree, not a priority. :)

1607182427
karchnu
I made a lexer in a single day just using the one from the compiler, so I guess it is not really hard to start being productive in Zig, even without docs.

1607182464
karchnu
(without prior zig development)

1607182622
ifreund
if you're familiar with C you can be productive in zig within days

1607182660
ifreund
I had written less than 50 lines of zig before I started work on river :D

1607182799
fengb
Other than syntax and some advanced features, Zig is kinda boring (in a good way)

1607182828
fengb
Makes it really easy to learn

1607182833
karchnu
fengb: that's exactly why I like it. :D

1607182946
fengb
:D

1607183138
karchnu
the focus isn't on adding features, but make it work in every cases, even on WASM or on windows, having a great build system, being able to work with low level GPU features and API, kernel stuffâ¦ a real C substitute, not just yet-another-language

1607183198
karchnu
I was hyped by the project, not really by the language.

1607183348
ifreund
yeah, though the language also happens to solve all the problems I have with C and does in a way that doesn't create a million new ones

1607183446
karchnu
yep, now I enjoy the language as well, with nice features that don't make the compilation slow, or the binary to explose in size, with a way better way to handle errors, a better type systemâ¦

1607183687
protheory8-new-m
Doesn't moving async function frame might cause undefined behavior when reading local pointer variable in the async function if async function was suspended at least once?

1607183815
jaredmm
Speaking of C: when I have a cimport function that's returning "[*c]const struct_t" and I want to be able to access a field, what's the most sensible way to do that in Zig? If it was "[*c]struct_t", const s: *struct_t works, but I don't know what the analogue is for the const variant.

1607184067
fengb
*const struct_t

1607184321
protheory8-new-m
> Doesn't moving async function frame might cause undefined behavior when reading local pointer variable in the async function if async function was suspended at least once?

1607184321
protheory8-new-m
It seems like that's exactly what happens, should this be mentioned in the docs?

1607184363
jaredmm
I would've told you that I already did that, but apparently I did not.

1607184461
ifreund
jaredmm: you can also dereference the [*c] pointer directly with foo.*.field_name

1607184493
jaredmm
Yeah, that's what I was trying to avoid.

1607184532
ifreund
heh, carry on then :D

1607189723
companion_cube
oh god, I just ragequit the handmade seattle podcast :/

1607189798
ifreund
why? I only listened to the one section andrew was on but I found it quite nice

1607190102
companion_cube
gingerbill started spounting nonsense on go vs rust

1607190130
companion_cube
like, you can dislike rust, but saying 1) it's even remotely as complicated as C++  2) it's full of "unproven ideas" is just pure BS

1607190133
companion_cube
jesus

1607190204
companion_cube
makes my blood boil

1607190318
ifreund
I agree with 1 but not 2, rust is complicated by its very nature but it has much less accidental complexity than C++ so far

1607190350
companion_cube
I think C++ is at least an order of magnitude more complex than rust

1607190352
ifreund
they are continuing to add features to it though...

1607190362
companion_cube
not really

1607190369
companion_cube
they're just generalizing existing features to make them cleaner

1607190389
companion_cube
it's just "make const expressions work on more stuff" typically

1607190400
companion_cube


1607190425
companion_cube
anyway

1607190432
companion_cube
and the BS about new ideas, what a pile of crap

1607190443
ifreund
not yet :P though in all seriousness I sincerly hope that rust never gets that bad

1607190446
companion_cube
rust is mostly a mix of C and ML, both are from the 1970s

1607190451
companion_cube
well

1607190463
companion_cube
what have they added recently, really??

1607190521
ifreund
wrt the "unproven ideas" comment, rust

1607190522
companion_cube
c++20 adds so many new things, rust has only had `async` as a new big thing since 2015

1607190526
companion_cube
sure

1607190531
companion_cube
and go is the first to use CSP

1607190533
companion_cube
(badly, too)

1607190802
companion_cube
(well ok. since 2015 I think the 2 new features are: async, and (this month!!) const generics start being stabilized.)

1607190809
companion_cube
(compare with c++17 and c++20.)

1607191031
companion_cube
anyway, given his past streams and stuff I think gingerbill has a particular pb with rust. oh well.

1607191050
ifreund
I feel like this isn't really the right channel for this :/

1607191066
companion_cube
yeah I know

1607191071
companion_cube
sorry

1607191751
kristoff_it
Zig SHOWTIME starts now

1607191893
companion_cube
kristoff_it: what's the program?

1607191978
ifreund
companion_cube:

1607192027
companion_cube
thanks! is it not on the website?

1607192056
ifreund
there's a link to there from zig.show

1607192068
ifreund
through the newsletter button

1607192100
companion_cube
ah. intuitively that'd be for subscribing.

1607194300
Barabas
Hello

1607194518
Barabas
I have three projects. Two are libraries and one is an executable. The executable uses library A and B. Library B also uses library A. When building my exe, although I do `addPackagePath` for both libraries when it gets to the code to import library A from a file in library B it says it can't find it.

1607194633
ifreund
Barabas: hey, you'll need to add A to B's dependencies

1607194656
ifreund


1607194663
ifreund
example here ^

1607194865
Barabas
ifreund I do this in my build.zig of the executable, right?

1607194872
ifreund
Barabas: yes that's right

1607194895
Barabas
cool, thanks

1607202092
asie
hello

1607202984
ifreund
o7

1607204345
Bekwnn
Hi, I think my strategy of "do other things and hope compiler updates help fix the problem" paid off. I just got a bit more info about why my project is having a build failure. I'm wondering if the -L library path here looks suspect since it's not an absolute path?

1607204442
Bekwnn
this build.zig and project was all working on 0.6.0+xxxxxx versions, but started running into issues after I jumped to 0.7.0 and I'm thinking maybe there were changes to std.build

1607206095
g-w1
could someone point me to where in ir.cpp compitme function calls are implimented? I am thinking of how to impliment them in stage2, but want to know how it works in stage1 as a reference.

