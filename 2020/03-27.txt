1585267760
andrewrk
marijnfs, look what lib/std/os.zig does, the first test in the file at the top

1585267815
marijnfs_
andrewrk: ok, so the @import on a file directly seems to include it?

1585267865
andrewrk
yes if you @import a file then the tests in that file will be scanned. but `zig test` won't chase imports that aren't referenced

1585267873
marijnfs_
I added an import for my serialization file, and also for serialization.zig and i see the tests seem to have issues

1585267892
marijnfs_
so and @import("file.zig").SomeStruct wont do it right?

1585267916
andrewrk
if @import("foo.zig") gets analyzed then the tests from foo.zig will get picked up

1585267929
andrewrk
related issue:

1585267938
andrewrk
this has the potential to modify `zig test` behavior

1585267964
marijnfs_
interesting

1585267982
marijnfs_
yeah i noticed the tests of serialization.zig didn't run (added an expect(false))

1585267986
marijnfs_
maybe thats on purpose though

1585267991
andrewrk
yes. lazy decl analysis is a strength and a weakness

1585268120
marijnfs_
ok cool. Im adding some serialization for arrays and all that. I need to serialize chats, so structs with []u8 and all that

1585269215
andrewrk
damn I'm a bit behind on issues for the release

1585269806
pltrz
when is the release scheduled for?

1585269820
andrewrk
april 13

1585269824
andrewrk


1585269867
pltrz
cool stuff; thanks

1585269918
pltrz
man I wish I were a more experienced programmer to help and get more involved

1585269972
andrewrk
pltrz, start simple! there are lots of interesting projects you can work on to learn more

1585270015
andrewrk
try to do this:

1585270061
pltrz
tahn

1585270072
pltrz
that's a great idea!

1585270096
pltrz
never thought to translate simple programs to practice :)

1585270292
adamkowalski
andrewrk: would it be possible to have "lazy" keyword in zig? That way you could implement "if" in userland by having a function which takes a condition and two lazy parameters, and then you evaluate the parameter depending on the value of the conditional

1585272806
mikdusan
ugh I can't remember, was `zig0 test -mcpu=baseline --dynamic-linker myfoo.zig` supposed to let zig0 run a test? I get: "Unable to get native target: unrecognized architecture"

1585276398
sorenbug
Shoutouts to me `/join`ing `zig` and not `#zig`

1585276406
sorenbug
Trying to use a Rank-2 type causes zig to not work:

1585285025
watzon
Found an interesting bug in zig cc where I'm getting a core dump in a simple C program

1585285040
watzon
I don't get the core dump when it's compiled with gcc

1585285119
watzon
Basically just compile this with zig cc

1585285119
watzon
Then try to use it to compile this grammar

1585285140
watzon
A grammar with a single expression compiles, but with multiple it breaks

1585288827
mikdusan
watzon: can you paste the result of `zig targets` somewhere? also confirm `zig cc` and executing on same host?

1585292627
pixelherodev
CMake isn't finding the Clang libraries on my new Gentoo build :(

1585292636
pixelherodev
Is Clang supposed to be version 9 or 10?

1585292645
pixelherodev
LLVM 10 is detected, so I built Clang 10 too...

1585293620
pixelherodev
Guess I'll have it build Clang 9 overnight and try that in the morning

1585293621
pixelherodev
Well

1585293624
pixelherodev
Later in the morning

1585293627
pixelherodev
It's already three :(

1585296000
wilsonk
pixelherodev: are you trying to build zig master as of today? You need llvm/clang/lld 10 for that (so not sure why you are trying 9)

1585296055
wilsonk
watzon: did you get any further on that packcc error?

1585297509
wilsonk
watzon: it appears that zig cc is perhaps defaulting to some stricter casting checks or something. There is a 'ud2' illegal instruction being inserted into the function 'hash_string' in packcc.c when zig cc is run. This illegal instruction has two ops after it that designate the

1585297658
wilsonk
The fix: change the 'h' variable in hash_string to a long and then cast to an int for the return  (ie.  int i=0; long h=0; ... return (int)h; ).  That should fix things but I am not exactly sure how to fix the overall problem or if andrew would still prefer this stricter check on casting?

1585297711
wilsonk
watzon: then your test grammar should work and the example at the bottom of the packcc documentation also works

1585303878
mq32
hey

1585305790
wilsonk
hey mq32

1585305813
wilsonk
a little late, but... :)

1585313976
pixelherodev
wilsonk, I was trying nine because CMake failed to find 10 :(

1585314052
wilsonk
pixelherodev: failed to find it in /usr or /usr/local?  I always build and install in /usr/local and it seems to work, that is why I mention it...but I assume it is in /usr on Gentoo

1585314074
pixelherodev
Yeah

1585314079
pixelherodev
Works on my laptop, too

1585314097
pixelherodev
But that's using 9 still?

1585314099
pixelherodev
Weird

1585314130
wilsonk
you are on master as of today and it builds with llvm-9?

1585314156
wilsonk
You must have a 10 lying around if that is the case because llvm-10 is required as of 2 days ago

1585314169
pixelherodev
I have 10 installed

1585314172
pixelherodev


1585314177
wilsonk
oh, I see

1585314194
pixelherodev
So my guess is it's still allowing the old paths because the right version is also lying around

1585314222
wilsonk
hmm, can you retarget the output dir of the build to /usr/local easily on Gentoo without having to rebuild the whole llvm suite?

1585314247
pixelherodev
I don't think that's the issue, because I think I found it

1585314256
pixelherodev
Even on my laptop, Clang 10 doesn't have as many libraries showing up locally

1585314280
wilsonk
oh, do you have some dynamic llvm libs and some static?

1585314293
pixelherodev
That's the thing, they're all dynamic

1585314310
pixelherodev
15 files in /usr/lib/llvm/10/lib64;

1585314336
wilsonk
because on MacOS they dynamic libs for clang and lld were picked up instead of the static ones I had...just mentioning

1585314360
wilsonk
whoa, that seems strange

1585314423
pixelherodev
On a different note, if I wipe the build/ folder I had and set up cmake from scratch, it errors out expecting LLVM 10

1585314427
pixelherodev
Yay?

1585314596
wilsonk
hmm, can you remove llvm-9  (ie.  xargs rm < install_manifest.txt)? I assume you still have the build around? Or maybe not

1585314807
wilsonk
I have llvm/clang/lld-8 and 9 and 10 all built on each of my machines and then just overwrite when moving up in versions if there is an error...or remove all and then just install the one version I need to test zig, then install the older versions using my package manager. That way zig always picks up the /usr/local version and any other programs that need 8 or 9 can still pick them up from /usr.  This assumes one has enough disk space on

1585314902
pixelherodev
I installed nine after it didn't find ten :(

1585314989
wilsonk
via Gentoo's build system or your own, so you could install to /usr/local  (not that it should really make a difference with Gentoo, I suppose...just seems really weird that there are so few libs for 10)

1585315686
pixelherodev
I'm 99% sure that won't do anything

1585315766
wilsonk
ok, I am not a Gentoo guy so I am just taking shots in the dark anyways  ;)

1585316167
marijnfs
Hi, i made a pull request to expand the serialization capabilities, is that how I should do it?

1585318894
pixelherodev
I think Clang 10 has BUILD_SHARED_LIBS turned off in Gentoo...

1585318901
pixelherodev
Going to manually tweak that and rebuild :(

1585319851
pixelherodev
After much tweaking and annoyedly updating the hash, it's building with -BUILD_SHARED_LIBS=on

1585320153
pixelherodev
The problem isn't on Gentoo's end, it's on Zig's AFAICT: the recommended build model by LLVM upstream is to have a single giant library instead of a bunch of small ones, but Zig doesn't know how to link against just -lLLVM

1585320265
pixelherodev
Correction: Clang, not LLVM

1585320274
pixelherodev


1585320311
fengb
Oh it changed in LLVM10?

1585320622
wilsonk
hmm, interesting

1585320692
TheLemonMan
llvm-config should just work™

1585321277
jwh
aww, LoLa-native doesn't build for me

1585321819
andrewrk
zig does know how to link against just -lLLVM

1585321949
mq32
jwh: What's the problem?

1585321969
mq32
and yes, the build process right now is hacky a.f.

1585322036
jwh
it dumps me out at unreachable

1585322037
jwh
/usr/lib/zig/std/debug.zig:228:14: 0x23a4cb in std.debug.assert (build)

1585322038
jwh
if (!ok) unreachable; // assertion failure

1585322052
mq32
can you send  me the stack trace in query?

1585322064
jwh
yeah sec I'll put it up

1585322093
jwh
oh I see, looks like libc maybe

1585322097
jwh


1585322100
mq32
more the libc++ probaby :D

1585322134
jwh
lols

1585322209
mq32
but this looks like it's actually the libc

1585322212
mq32
what OS are you?

1585322232
jwh
abyss, experimental distro, musl+llvm

1585322266
mq32
ah

1585322271
mq32
hm, then somebody else has to help :D

1585322301
jwh
just need something to package to make test zig, scripting seemed like a useful one to consume

1585322305
jwh
s/make/help/

1585322342
jwh
is it a hard dep on glibc?

1585322420
mq32
nah, but i depend on libc++

1585322426
mq32
on the system-libc++

1585322435
mq32
but that should not care for the libc type

1585322456
mq32
looks more like the build system fails to recognize musl

1585322462
jwh


1585322465
jwh
its bailing on that

1585322491
mq32


1585322495
mq32
this will be the culprit

1585322505
jwh
ah hm

1585322508
mq32
but i think you have to explicitly state what OS your targeting

1585322533
mq32


1585322534
mq32
try to remove this

1585322546
mq32
i have arch and i had problems with a glibc-version too high

1585322558
mq32
but could be that this enforces glibc to be used instead of musl

1585322616
jwh
looks like it

1585322665
jwh
if I handhold it a bit, it tries to build but can't find stddef.h, weird

1585322855
jwh
I don't know enough about zig to fix it :P

1585322858
mq32
hrhr

1585322893
mq32
i'm waiting for #4827 to be merged, then this can be simplified and should be the usual zig experience: "just works"

1585322902
jwh
well

1585322913
mq32
right now, using C++

1585322915
jwh
using exe.linkLibC(); instead does the right thing

1585322923
mq32
ah, good to know :D

1585322926
mq32
is a semi-supported usecase :D

1585322928
jwh
but I dunno whats up with the headers

1585323073
jwh
its almost like its ignoring /usr/include, even though -I /usr/include exists on the cmd

1585323618
pixelherodev
andrewrk, I know

1585323623
pixelherodev
`<pixelherodev> Correction: Clang, not LLVM`

1585323640
pixelherodev
Either it doesn't know about -lclang-cpp, or my system is even more broken than I realized

1585324165
mq32
btw, jwh: what exactly did bring you to compile LoLa? :D

1585324213
jwh
checked the list of community projects on the wiki, seemed the most useful to package first :P

1585324245
mq32
haha :D

1585324254
mq32
it's by far not ready to package or something like that :D

1585324279
jwh
well, to have something in-tree it needs to have a consumer otherwise its liable to rot

1585324283
jwh
soooo

1585324287
jwh
scripting is an obvious choice

1585324401
mq32
but it's not general purpose scripting :D

1585324450
jwh
well sure, but it looked enough to write at least hello world in

1585324574
mq32
but it's meant for a very specific use case (scripting in gaming where the player writes the code)

1585324574
mq32
so it's "hardened" against endless loops and such

1585324574
mq32
yeah, true

1585324574
mq32
and doesn't allow too generic code :D

1585324574
jwh
its the only one that looked like it could really be runtime tested easily (does it output string X? y/n)

1585324614
shakesoda
you can harden lua against that stuff reasonably easily

1585324651
mq32
shakesoda: with suspending the lua code and resume it later?

1585324654
mq32
at any place?

1585324662
mq32
even in FFI functions? :D

1585324685
fengb
Suspend resume... you taking advantage of Zig async? :P

1585324692
mq32
no, definitily not :D

1585324698
mq32
it's a simple state machine system

1585324706
mq32
so async functions run framewise

1585324721
mq32
every frame i call some "process" and check the return value

1585324743
shakesoda
you can yield the vm wherever you can hook it, but that excludes when you're inside code that lives outside of the lua vm

1585324749
shakesoda
so, not c api or ffi functions

1585324757
mq32
yeah

1585324765
mq32
Something like "Sleep(100)" should not block

1585324793
mq32
The idea is that the scripting allows finegranular execution slices

1585324803
mq32
"Please execute 500 instructions or until yield"

1585324884
fengb
Ah okay, basically a consistent frame loop

1585324893
fengb
I suppose that makes sense for a game heh

1585324907
mq32
yeah

1585324914
mq32
bad when the player does while(true) { }

1585324917
mq32
and your game freezes

1585324931
mq32
also it's meant for high parallel count of VMs

1585324938
fengb
Just put it on a different thread!

1585324953
mq32
doesn't help when you want to limit "execution per frame"

1585324954
mq32
:D

1585324961
mq32
so you can deploy hunderts of computers in game that all run some cool scripts and interact with each other

1585324985
fengb
Like... minecraft but for programs?

1585324990
mq32
kinda?

1585324991
fengb
So nothing like minecraft

1585325005
fengb
I dunno why I mentioned minecraft lol

1585325010
mq32
If you want to see the idea of this in an actual game, look at `else Heart.Break()`

1585325043
mq32
they kinda had the idea right

1585325178
shakesoda


1585325221
pixelherodev
So you mean like... what's it called... GreenArray?

1585325756
fengb
I'm curious if we can auto-translate common C patterns into Zig patterns

1585325779
fengb
Fake namespacing into real namespacing, making actual methods, etc.

1585325801
ifreund
that would be pretty neat, sounds non-trivial though

1585325838
fengb
Yeah and probably not good for std, since it's all a bunch of handwavey heuristics

1585326215
mq32
fengb: i think the other way round would be cool as well

1585326234
mq32
const ns = struct { pub export fn someapi() void { } }

1585326235
mq32
=>

1585326243
mq32
extern void ns_someapi();

1585326821
shakesoda
would @divTrunc or @divFloor be the correct conversion for integer division in c code

1585326850
mq32
yes

1585326851
fengb
I believe C spec is divFloor

1585326854
mq32
depending on what you want :D

1585326878
shakesoda
I'm converting some C code and want to be sure I got it right

1585326887
shakesoda
with what it did to begin with

1585326905
fengb
Oh shoot I’m wrong. It’s truncate towards 0

1585326915
shakesoda
trunc, then?

1585326925
ifreund
trunc is the c spec yes

1585326929
dirkson
Hey all. Do we have any benchmarks for zig as a build system? I've got some vague curiosity.

1585326943
shakesoda
thank you

1585326955
mq32
dirkson: in what terms?

1585327125
dirkson
mq32: Tup, for example, does a lot of database storage and is crazily fast as a result - a rebuild with no changes is basically instant, it handles huge numbers of files with slow linear performance degredation, etc

1585327164
mq32
yeah sounds like zig build :D

1585327181
mq32
note that if you compile a project with libc

1585327193
mq32
zig build compiles the whole libc

1585327204
mq32
(or, rather: zig compiles the whole libc)

1585327216
mq32
and it's done "instantly" when finished with that once

1585327231
dirkson
Interesting

1585327252
r4pr0n
is there an equivalent of

1585327311
mq32
huh what's that link? :D

1585327371
dirkson
Does the zig build system have a usable way of pulling in non-zig-build dependencies? I.e. Can I reasonably include a project built with cmake or [insert build system here] as a dependency for my project?

1585327388
r4pr0n
mq32: i have that from

1585327391
mq32
yeah, you can

1585327412
mq32
eerm, dunno about the link r4pr0n

1585327432
mq32
dirkson: you can execute arbitrary commands in zig build and then depend on files output by them

1585327441
dirkson
mq32: Great

1585327447
mq32
so call cmake, premake, gnumake, then link everything together with zig build

1585327488
dirkson
I kinda figured that'd be the answer, but it's easy to ask before I invest a bunch of time

1585327503
dirkson
I don't see a 'zig build clean

1585327516
ifreund
r4pr0n: maybe you're looking for

1585327548
ifreund
rm -r zig-cache

1585327566
dirkson
Awesome

1585327583
watzon
mikdusan: Here's the output of `zig targets`

1585327598
watzon
I know for a fact it was using `zig cc`. I used it directly.

1585327646
dirkson
So Zig is still on 0.5. Are there any portions of the language that are promised to be stable as of now?

1585327648
mq32
dirkson: "rm -rf" does the job :D

1585327669
mq32
dirkson: on perf of building stuff with zig

1585327673
mq32
[felix@denkplatte-v2 demo]$ time zig build-exe -lc --c-source src/main.c -target aarch64-linux-musl

1585327674
fengb
Nothing is promised to be stable until 1.0

1585327679
mq32
real0m54,338s

1585327688
mq32
real0m0,181s (second run)

1585327693
r4pr0n
but can i install them on any distribution? ifreund

1585327700
r4pr0n
i'm not using a debian based system

1585327704
mq32
user time is about 0.07s

1585327745
fengb
But other than the new anon function syntax, I don't think there's any other big breaking change that's scheduled

1585327753
ifreund
r4pr0n: you may be able to get binarys from there to work, or just wait for your distro to package llvm 10

1585327753
dirkson
mq32: Yeah, that's how I clean my tup builds. Theoretically I wouldn't ever need to do that if my entire build environment was managed by tup, but it turns out operating systems are a thing and sometimes you really do need to clean

1585327757
ifreund
or compile yourself of course

1585327797
r4pr0n
yeah i'd like to do that, but my cpu isn't powerful enough, it takes very long

1585327800
dirkson
mq32: I'm assuming that horribly slow first build speed is just zig compiling all the 'system' dependencies, like libc?

1585327826
mq32
yep

1585327841
mq32
that first build was "make compiler_rt, musl-libc and my code for aarch64-linux"

1585327846
mq32
second build was "check everything"

1585327877
dirkson
mq32: Mind changing something in main.c and re-timing for me?

1585327893
dirkson
Do we have windows/osx cross compiles for C compiles yet?

1585327931
mq32
real0m0,214s

1585328007
mq32
dirkson: doing a win64 build right now, same program

1585328026
mq32
[felix@denkplatte-v2 demo]$ time zig build-exe -lc --c-source src/main.c -target x86_64-windows-gnu

1585328036
mq32
real1m14,417s

1585328046
mq32
real0m0,128s

1585328049
mq32
second time is fast again :)

1585328080
mq32
is cross compiling C to mac supported?

1585328134
dirkson
200ms seems long for a small change. Although checking, my meson/ninja/script takes 400ms for a similarly small change, and I don't notice that, soooo whatever!

1585328145
fengb
It should be

1585328179
mikdusan
watzon: ok thanks; yup I get illegal instruction on my host too

1585328209
mq32
dirkson: 95% of the time is disk I/O ;)

1585328219
mq32
fengb: don't see a libc for mac though

1585328227
watzon
Interesting case. Probably an easy fix, but I wouldn't know where to start.

1585328265
fengb
Oh yeah, that's not ready yet

1585328269
mq32
cross-compiling zig code to mac works

1585328387
dirkson
I don't think I have a working c-based tup build at the moment. Although an unchanged build for tup is real0m0.004s and a single source file change is 0m0.088s, that's almost certainly just capturing compilation time

1585328426
dirkson
mq32: That's a cool metric. It could still be doing unnecessary IO though

1585328435
fengb
We had some questions about header licensing. I found a dumb header <stdint.h> that was actually private

1585328457
mq32
i don't think so, andrew is pretty proud of his caching system

1585328471
mq32
also: zig checks about 2k files when doing a cross build :D

1585328533
dirkson
Like, a 'correct' build the way zig does it is to check every single built library file every time it builds, but those files are only likely to change when zig is updated.

1585328595
mq32
yeah

1585328608
mq32
but then it also only builds those files that have changed :)

1585328622
mq32
and you are free to mutate your libc in any way you want

1585328625
dirkson
Right, but it might still be hashing them each time

1585328628
mq32
and still get safe and stable builds

1585328635
mq32
nope, i'm sure it does not :D

1585328666
dirkson
I think it's probably More than fast enough for my purposes, based on your tests, so I'm doing more devil's advocate than anything at the moment :)

1585328687
mq32
hrhr :D

1585328758
dirkson
Do you know if I can build without compiler-rt and libunwind, offhand?

1585328781
mq32
i think so

1585328814
mq32
but compiler-rt is required for working builds

1585328821
mq32
but it's not included in static libraries by-default

1585328826
mq32
but for executables and shared objects

1585328888
pixelherodev
Nope, I was right; Zig doesn't know about -lclang-cpp

1585328896
pixelherodev
Building the individual libraries got it detecting Clang

1585328966
dirkson
compiler-rt seems to do a lot of things, most of which aren't needed for many builds - i.e. your release build probably doesn't need profiling and asan hooks most of the time. Does it also do things that are absolutely required?

1585328998
TheLemonMan
yes

1585329029
dirkson
(Also I've got no idea what apple's 'blocks' is, and I distrust it because it says apple and I am some sort of stodgy foss man)

1585329037
TheLemonMan
it contains a lot of builtins that llvm (and also GCC) expects

1585329059
TheLemonMan
eg. some 64bit math ops for some 32bit targets

1585329078
mq32
btw, i random thought i had:

1585329088
mq32
is it sane to allow zig building the whole libc with -flto?

1585329108
mq32
this would allow some crazy cross-file-inlinings

1585329116
dirkson
Yeah, I saw that specific bit, lemon, but figured that not everyone was building for 32 bit targets (I'm usually not)

1585329124
andrewrk
mq32, I don't see any reason that shouldn't work

1585329142
mq32
i can imagine that would speed up the final executable by a lot

1585329146
andrewrk
not sure it would help much though, libc is ABI-bound

1585329163
TheLemonMan
it contains several other builtins that are not related to the target being 32 or 64 bits

1585329167
mq32
if everything is compiled LTO, it could ignore ABI-boundaries

1585329199
mikdusan
when using `zig cc` how do I specify -mcpu=baseline or something to make it just minimal x86_64 ?

1585329216
dirkson
TheLemonMan: Yeah, I was slowly working that you based on your responses :)

1585329225
TheLemonMan
you can get rid of compiler-rt if you manage to avoid referencing any builtin, but that's hard

1585329231
dirkson
Fair

1585329233
andrewrk
mikdusan, need to add -mcpu -march etc support, these flags aren't recognized by zig yet

1585329281
andrewrk
mikdusan, if you pass `-target x86_64-foo-bar` it will be baseline though

1585329393
dirkson
As usual with Zig, I am Fairly Impressed by the build system and C compilation.

1585329449
mq32
the whole project is amazing :)

1585329459
mq32
thumbs up for andrewrk! \o/

1585329486
dirkson
Agreed

1585329547
dirkson
Do we have any ideas about what priority the package manager project has? I think that's the last major feature I'd really want out of a build system.

1585329607
andrewrk
I think there's a good chance we'll have some kind of working version in the next release cycle

1585329621
andrewrk
be warned I said the same thing when 0.5.0 was released 6 months ago

1585329626
dirkson
(My current solution to this is just a bash script that downloads all the dependencies and sticks them where the build system expects them. This is not exactly portable or elegant or hard to break)

1585329635
andrewrk
I just built llvm with CXX=`zig c++ -target aarch64-linux-musl`

1585329664
dirkson
Well that sounds impressive

1585329667
mq32
this is crazy! :D

1585329692
fengb
So we are self-hosted? 🙃

1585329701
pixelherodev
Not quite

1585329703
andrewrk
not so fast, still have to build clang and lld

1585329719
andrewrk
but

1585329722
pixelherodev
It's self-hosted as a C++ environment, not yet as a Zig one

1585329750
mq32
pixelherodev: still something!

1585329763
pixelherodev
True

1585329775
dirkson
The mere fact that you're within spitting distance of some version of self hosting is impressive in and of itself

1585329788
mq32
this means you can download a precompiled tarball, the sources and start hacking zig

1585329795
fengb
I'm mostly joking :P

1585329796
mq32
no need for complicated cross-envs anymore :)

1585329839
pixelherodev
How long before either upstream Clang or someone else duplicates this work as a standalone C++ compiler?

1585329875
fengb
If they wanted to... they'd just make Clang work

1585329930
dirkson
Thanks for all the help everyone. I'm definitely coming down on the side of trying to switch a project or two to the zig build system.

1585329943
mq32
do it! :)

1585329955
mq32
i did for LoLa and it worked just the same as before

1585330016
TheLemonMan
let's scrap Zig as a programming language, people are so much enthusiast of it as a build system (and C/C++ frontend)

1585330035
dirkson
mq32: ... I may have a use case for LoLa

1585330047
mq32
TheLemonMan: I'm just enthusiast because joining zig code and cpp code will work great soon

1585330055
mq32
and i can port more parts of my code to zig! <

1585330058
mq32
*<3

1585330061
mq32
dirkson: tell me!

1585330062
fengb
We could call it giz

1585330071
fengb
... nevermind

1585330095
TheLemonMan
how do you pronounce that? jizz?

1585330113
fengb
Hard G, duh

1585330116
ky0ko
being able to mix zig and c++ code will make it a fair bit more likely that i could get some folks at work to try zig out ...

1585330145
dirkson
mq32: Well, I'm coding a space game. One of the things I always wanted to provide the users was a scripting language to control the terminals. I considered lua, and also considered just Not Doing It, but this sounds like a neat third option

1585330149
ky0ko
us low-level embedded devs all work on c projects, but the app devs are all c++ fanatics

1585330162
fengb
You don't call it zij

1585330171
mq32
dirkson: that's exactly my use case

1585330183
TheLemonMan
mixing C/Zig was already possible, you only have to link all the objects together

1585330197
TheLemonMan
don't tell me how to pronounce zij >:

1585330221
andrewrk
TheLemonMan, don't worry, this has been the evil plan since the beginning. get c/c++ people hooked on a build system / package manager, and then oh? what's that? you already have the zig language as a dependency? might as well use it!

1585330228
dirkson
mq32: Hey, pm me, won't you?

1585330239
fengb
Embrace, extend, extinguish

1585330242
andrewrk
embrace, extend, extinguish. right out of microsoft's playbook

1585330242
ky0ko
yeah, i know c code was possible - i've been working on porting the quake 2 engine to zig as a sort of POC. but not c++

1585330266
dirkson
andrewrk: I mean, I was already interested to start with. Making the switch process easier is a bonus :)

1585330268
fengb
But this time, for good not evil™. Right??

1585330278
andrewrk
chaotic neutral

1585330314
pixelherodev
best alignment.

1585330328
pixelherodev
All that's needed is to reduce the startup times for `zig build` and I'll use it for C projects :P

1585330346
andrewrk
yeah that's a necessary ingredient

1585330479
mikdusan
watzon: opened issue:

1585330667
fengb


1585330696
mikdusan
heh

1585330713
fengb
Actually, I should make one of programming languages

1585330778
mq32
fengb: do you know the matrix "programmers of X seen by programmers of Y"?

1585330805
fengb
Yeah my favorite is Lisp

1585330819
fengb
Er, one of my favorites >_>

1585330828
fengb
There's a whole bucket load of them

1585330863
mq32


1585330868
mq32
this one in particular

1585330877
mq32
someone has printed it and hung it in our hackerspace :D

1585330929
fengb
lol, why is Palin on the list?

1585330960
fengb
As usual, Lisp doesn't fail to disappoint :P

1585330970
mq32
no idea :D

1585331257
fengb


1585331304
TheLemonMan
spreadsheet memes, nice

1585331328
fengb
I need to fill out 2 squares then put in real pictures

1585331342
fengb
But I also should be doing my day jobs

1585331400
mq32
Lawful Evil = Ada. true as fuck

1585331427
mq32
Lawful good haskell?

1585331440
mq32
or something like prolog?

1585331452
fengb
Was targeting just low level systems languages

1585331460
mq32
ah

1585331484
fengb
Wanted to keep the domain simple or else it’s too hard to choose

1585331873
mq32
neat!

1585331876
mq32
have to test it one day :)

1585331921
shakesoda
I think it's pretty nice, but I need to put more time into explaining how it works + examples

1585331933
shakesoda
perhaps some zig examples coming Soon(tm)

1585331940
mq32
yeah examples are always good :)

1585332025
shakesoda
building the zig wrapper has put some API bugs on my radar, too, mostly related to some of the types in the header being sketchy/used in sketchy ways

1585332083
shakesoda
need an allocator api, too!

1585332583
watzon
Thanks mikdusan

1585332625
watzon
I was gonna do that when I got the chance

1585332639
mikdusan
oh another question, which OS are you on?

1585333285
watzon
Fedora

1585333299
watzon
Though I have debian and arch boxes as well

1585333505
TheLemonMan
lol

1585333534
watzon
This is actually pretty cool

1585333551
Kingsquee
snarky compile error messages are an underrated life experience

1585333565
mikdusan
TheLemonMan: do you think we're running into an issue here with different aarch64 cpu features?

1585333762
Kingsquee
so in rust I use a macro to define struct-of-arrays, is there a way to do the same thing in zig using comptime?

1585334199
TheLemonMan
mikdusan, no, I'm pretty sure it's a problem with the LLVM optimizer

1585334279
mikdusan
maybe relevent: "std::bad_alloc" presents for me when doing Debug build too

1585334350
TheLemonMan
that's expected, we compile compiler_rt in release mode even for debug build

1585334355
TheLemonMan
(s)

1585334397
Barabas
Hello

1585334473
Barabas
I have an issue with `@cImport(@cInclude("Folder/my_file.c"))`. It says it can't find the file, but if I do `@import("Folder/my_file.c")` it can find it (it just complains that it has tabs :P)

1585334528
Kingsquee


1585334560
jaredmm
Barabas: difference between includeDir and mainPkgPath?

1585334642
Barabas
Hmm... maybe... I didn't set any includeDir or mainPkgPath and the zig file from which I'm trying to import is in my top level folder next to my build.zig

1585334652
shakesoda
i wish when i got errors like "index out of bounds" it'd tell me what the index and bounds were

1585334659
shakesoda
it... clearly knows

1585334721
TheLemonMan
yeah but formatting the error message is hard

1585334728
Barabas
Oh I had fun today, it was complaining about return types. It took me a while to figure out I was doing `try` in a function which didn't allow returning errors.

1585334730
jaredmm
Barabas: I'm assuming that @import will go based on the default root path and that @cImport doesn't do that. I've not looked into it, though.

1585334745
mikdusan
TheLemonMan: cool, I just hacked stage1 to not force release-mode on compiler_rt and the "std::bad_alloc" vanished

1585334750
shakesoda
TheLemonMan: it would just make my life a lot easier :(

1585334797
fengb
Barabas: yeah I’ve spent an hour staring at the try return mismatch before

1585334798
Barabas
I added `.addIncludeDir(".");` to my build and now it works. :)

1585334823
Barabas
Thanks guys.

1585334855
TheLemonMan
shakesoda, open a ticket (if there isn't already one), I have a feeling it may not be that hard to implement

1585334871
Barabas
fengb yeah it'd be so much better if it just said: "Can't use try in this function." or something.

1585335072
shakesoda
TheLemonMan:

1585335211
Barabas
Ah man... `@cImport` doesn't understand arrays with an undefined length. I mean this: `const unsigned data = {1, 2, 3, 4};` :(

1585335219
Barabas
oh

1585335226
Barabas
Ah man... `@cImport` doesn't understand arrays with an undefined length. I mean this: `const unsigned data[] = {1, 2, 3, 4};` :(

1585335300
fengb
Hmm that can be translated to `const data = [_]c_uint{..}`

1585335311
jaredmm
I'm pretty sure that should get translated.

1585335327
jaredmm
[4]c_uint

1585335327
Barabas
it thinks data is `[*c] const c_uint` and it says it found `[4]c_uint`

1585335374
jaredmm
Hm.

1585335380
Barabas
Didn't expect it to fail on that. :D

1585335555
TheLemonMan
andrewrk, mikdusan, I found (and fixed) the problem!

1585335566
fengb
!!

1585335582
Barabas
Or maybe I'm doing something wrong. :|

1585335661
TheLemonMan
the good news is that I'm not the one who introduced this problem :P

1585335700
jaredmm
You can initialize it with the size and it should work, but I'm not sure if this is a file you wrote or someone else wrote.

1585335716
Barabas
Someone else (some program I don't control)

1585335765
andrewrk
TheLemonMan, wow, what was it?

1585335782
fengb
Zig is doing it wrong: `pub export const data: [*c]const c_uint = [4]c_uint{`

1585335798
fengb
It thinks the variable is a pointer, not the actual array

1585335839
Barabas
ok

1585335927
Barabas
I'm making an issue :)

1585335951
fengb
Oh... it's probably reusing function syntax, where foo[] is really just a pointer

1585336035
Barabas


1585336128
Barabas
Function syntax? It doesn't look like a function and it understand that the array is a certain size.

1585336198
fengb
I mean in function definitions, foo(char bar[]) is translated to [*c]c_char. Zig is just mistakenly using that in this context

1585336266
fengb
Basically, I'm making excuses for why Zig isn't doing the right thing >_>

1585336315
mikdusan
TheLemonMan: awesome

1585336617
andrewrk
fengb, the code for `export` on non functions needs some attention

1585337417
TheLemonMan
yay, I've just finished running the test suite on the AArch64 box! it werks!

1585337514
andrewrk
wow

1585337520
andrewrk
can't wait to see this diff

1585337531
ikskuh
TheLemonMan: +1

1585337549
TheLemonMan
andrewrk, sent a PR already ;)

1585337625
TheLemonMan
speak like yoda, I must

1585337632
andrewrk
oh wow

1585337646
andrewrk
typo in the ABI definition, R.I.P.

1585338052
fengb
Oh oof

1585339506
pixelherodev
Might maintain a Zig overlay for Gentoo

1585339531
pixelherodev
Or, better yet, just patch Zig to be able to link against the distribution's LLVM and Clang packages :P

1585339723
Sahnvour
andrewrk: toying with zig c++ atm, very excited about this, could it also work as a frontend for lld ?

1585339862
pixelherodev
On the bright side, I was able to tweak the distro packages to support Zig's current configuration :)

1585339904
pixelherodev
`/usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/../../../../x86_64-pc-linux-gnu/bin/ld: /usr/lib/llvm/10/lib/libclangFrontendTool.so: error adding symbols: file in wrong format` NOOOOOO

1585339906
pixelherodev
I was

1585339930
pixelherodev
Ah, that's 32-bit

1585339941
pixelherodev
Okay, next hack: move files around from where they're supposed to be :P

1585339976
andrewrk
Sahnvour, yes it is a frontend for lld

1585340014
Snektron
zig can compile c++ now?

1585340027
andrewrk
almost:

1585340057
Snektron
Nice ork

1585340059
Snektron
work

1585340073
Sahnvour
okay, I'm trying to build a barebones sample with meson and zig as my CXX on windows, and having some linker errors

1585340108
tane
is this C++ compilation ability a required feature for any compliant zig compiler?

1585340131
andrewrk
tane, no, it's just something that this zig compiler provides since it links against clang anyway for @cImport

1585340174
tane
ok, I'm relieved :P

1585340252
andrewrk
Sahnvour, details?

1585340377
Snektron
clang should soon no longer be needed for @cImport right?

1585340387
Snektron
considering the self-hosted C parser

1585340408
andrewrk
clang does semantic analysis as well

1585340420
Snektron
ah right, of course

1585340426
andrewrk
the self-hosted parser is for macros

1585340627
Sahnvour
andrewrk:

1585340752
Snektron
Didn';t zig parse arguments manually?

1585340761
andrewrk
Sahnvour, "@zigcpp@exe/zigcpp.cpp.obj.rsp" what is this argument? I don't know what that is supposed to do

1585340765
Snektron
I think meson passes quotes around arguments occasionally

1585340797
Sahnvour
andrewrk: ah, that's a windowsism I guess to workaround enormous command lines, to put arguments in a file

1585340840
andrewrk
I think it's not showing the full command line that zig sees

1585340865
andrewrk
need more info to look into this

1585340871
Sahnvour
yes, gist updated

1585340946
andrewrk
ok I know what's happening

1585340981
andrewrk
zig needs to gain understanding of this @ syntax to look at command lines. because it doesn't understand it, and it's a positional argument, so it thinks its a linker object

1585340999
andrewrk
so it sends @zigcpp@exe/zigcpp.cpp.obj.rsp to the linker, but those args are for the compiler

1585341048
Sahnvour
aha

1585341062
andrewrk
mind filing an issue?

1585341076
Sahnvour
not at all

1585341092
andrewrk
the good news is I believe this can be solved entirely in the self-hosted side of things

1585341148
Sahnvour
I think it just needs to detect arguments beginning with an @ and forward them to clang, correct ? supposedly it already knows how to deal with them to get its full command line

1585341164
Sahnvour
ah but maybe zig wants to act on some of those arguments

1585341261
andrewrk
since we have to act on positional arguments, we have to know about all special positional arguments

1585341284
andrewrk
unknown stuff is already forwarded

1585341337
Sahnvour
okay

1585342291
kenaryn
fengb: Lawfull good: Erlang? Chaotic good: D ? (lot of asymmetries and frictions to make the job at all costs).

1585342921
Sahnvour
also zig targets looks broken on my windows box, anyone else can try on theirs ?

1585343044
pixelherodev
Found the problem

1585343049
pixelherodev
`on my windows box` <-

1585343051
pixelherodev
/s

1585343069
BaroqueLarouche
Sahnvour: same issue on my side

1585343083
BaroqueLarouche
❯ zig targets

1585343083
BaroqueLarouche
unable to list targets: BadPathName

1585343106
andrewrk
hmmmm

1585343199
Sahnvour
yup

1585345715
fengb
kenaryn: developed at Bell Labs so not good. Dynamic type so not lawful :P

1585345809
squeek502
andrewrk, for the zig cc 'passing args to the linker' flags, do you want to pass them indiscriminately or were you thinking of parsing lld's options.td like clangs and validating the passed args?

1585345827
waleee-cl
fengb:  erlang? Joe Armstrong worked at Ericsson when developing it

1585345888
fengb
Err... why did I think Bell Labs. Still... a corporate sellout 🙃

1585345986
andrewrk
squeek502, I'm thinking about handling all these manually, because I'm pretty serious about implementing an incremental linker, for compilation speed purposes

1585346004
squeek502
ah ok

1585346078
andrewrk
however for now, it's ok to handle them pretty simply, if a bit boilerplate-y. * detection in main.cpp * add field to CodeGen * add to cache hash * add to each of the 3 linker command lines in link.cpp

1585346097
andrewrk
it's a bit of boilerplate but it makes it easy to swap that component out later

1585346358
andrewrk
Sahnvour, I'm confused about the double @ in your rsp example. I actually ran into the same issue when messing with something else, but there's only 1 `@`

1585346402
Sahnvour
andrewrk: the second @ is contained in a directory name, sorry I meant to clarify this but forgot to

1585346429
andrewrk
ok thanks that clears it up

1585346444
andrewrk
I'm going to try to solve this right now because it's required for another task I'm experimenting with

1585346457
Sahnvour
great!

1585349059
mikdusan
when using std api like `std.fs.cwd().readFileAlloc(...)` must the path match platform? ie. on windows backslashes?

1585349108
andrewrk
the answer to that question is not stable yet. currently I believe you'll get an error for using forward slashes

1585349133
mikdusan
on windows `zig targets` --> unable to list targets: BadPathName

1585349144
andrewrk
there are a few things that need to be improved for windows path handling. another one is allowing invalid unicode

1585349147
watzon
Thinking about doing a stream today or this weekend @and

1585349152
watzon
* Thinking about doing a stream today or this weekend

1585349161
watzon
??

1585349201
mikdusan


1585349213
mikdusan
nogo on windows :(

1585349247
andrewrk
mikdusan, oops

1585349256
watzon
I thought windows allowed both? Paths with forward and back slashes.

1585349289
mikdusan
in this case it's .zig code checking path

1585349301
andrewrk
well anyway there's an easy fix there; using std.fs.path.sep_str and ++

1585349318
andrewrk
that will be correct regardless of whatever ends up happening to std lib fs

1585349384
mikdusan
if my grep-fu was correct, we don't have any other things like that in src-self-hosted/*.zig so I'll make up a quick patch.

1585349811
andrewrk
thanks. and my bad, I definitely wrote all that code and the code that doesn't allow forward slashes

1585350574
shakesoda
i don't know who needs this but have an in-place merge sort

1585350611
shakesoda
i was asked for this in zig specifically by someone elsewhere

1585350667
andrewrk
shakesoda, we have in-place sort already with std.sort

1585350711
shakesoda
andrewrk: which sort is it

1585350729
andrewrk


1585350747
mikdusan
Sahnvour:

1585350747
andrewrk
your implementation looks nice and small though

1585350749
shakesoda
andrewrk: this wasn't implemented to address a need, fwiw, it was just done for an example of what zig looks like

1585350785
shakesoda
one I actually need to find/implement is a radix sort, though :)

1585351194
Sahnvour
mikdusan: thanks for the fix :)

1585351210
mikdusan
I'm just trying to come up with a slick test for zig targets

