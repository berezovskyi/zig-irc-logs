1590278403
gonz_
fengb: Hahah, that's actually pretty great :D

1590278407
fengb
I can see zpm has backend hookups to other services

1590278428
pixelherodev
ikskuh: because I needed to test out a backport

1590278438
pixelherodev
Needed to modify a patch, because it doesn't apply cleanly

1590278452
pixelherodev
Since it depends on other patches which I rejected as breaking behavior

1590278475
pixelherodev
and for the 0.6 cycle I don't plan on wasting time extracting only those parts of commits which don't break behavior

1590278524
pixelherodev
Okay, so

1590278527
alexnask
nice :D

1590278540
alexnask
did you actually call the flag andrew? lol

1590278541
pixelherodev
Basically, I'm backporting features and bug fixes from master to 0.6

1590278544
ikskuh
it can now clone modules as flat-copies of the source repo instead of using submodules

1590278552
pixelherodev
Unofficially, of course

1590278555
pixelherodev
Anything that breaks

1590278556
ikskuh
pixelherodev: but why?

1590278557
pixelherodev
dammit

1590278557
gonz_
andrew-mode?

1590278560
pixelherodev
laggy network connection :(

1590278579
pixelherodev
ikskuh: a) to see if I can, and b) because it's useful to have a compiler that's feature-compatible with 0.6 but with bugfixes

1590278598
pixelherodev
Some things I flat out reject though

1590278602
pixelherodev
Stage2 for instance isn't being backported

1590278613
ikskuh
ah well

1590278615
pixelherodev
bug fixes and minor features only

1590279085
gonz_
ikskuh: Have you built `zpm` on Windows? I'm getting some error during build :/

1590279228
gonz_
Getting `error.Unexpected` and some note about a filename being too long, but that doesn't make much sense.

1590279383
pixelherodev
Alrighty, unofficial 0.6.3 released

1590279403
pixelherodev
The latest backported patch is from about a week back, but I just advanced it by like a month

1590279417
pixelherodev
Might go the rest of the way tomorrow and call it 0.6.4 or something

1590279423
pixelherodev
I'm mostly tagging it to make it easier to keep track

1590279778
ikskuh
gonz_: that sounds like you should move the project into a lower folder

1590279793
ikskuh
aurame had the same problem, maybe also alexnask

1590279805
ikskuh
it works on windows as alex is using it :D

1590279820
gonz_
How deep do these dependencies or your own hierarchies go? :D

1590279940
pixelherodev
Did anyone see the XKCD on X yet? :P

1590279969
pixelherodev
"The only variable is X; to refer to different variables, you have to use different fonts"

1590279973
pixelherodev
Great language idea lol

1590280235
ikskuh
pixelherodev: i've already made a meme for andrew with that :D

1590280265
ikskuh
ah, repost:

1590280308
pixelherodev
Ahh

1590280311
pixelherodev
Yeah, that one :)

1590280388
pixelherodev
ikskuh: Nice touch

1590280449
ikskuh
hehe :D

1590280453
ikskuh
subtile

1590280577
fengb
I didnâ€™t realize it was photoshopped at first

1590280578
fengb
Better than the source imo

1590281195
ikskuh
okay, so i fixed up some issues with zpm :)

1590281208
ikskuh
zpm install --mode=copy zig-bearssl

1590281227
ikskuh
now works and just copies the zig-bearssl package with recursive checkout into the source directory :)

1590282749
gonz_
It's odd, actually, because even after enabling long file names zig won't build in that path depth.

1590282764
gonz_
Presumably there's something zig (or LLVM) isn't taking advantage of

1590296012
pixelherodev
Alrighty, reimplementing compile_error tests for stage2 shortly...

1590298901
pixelherodev
andrewrk: you on?

1590299709
pixelherodev
:(

1590300344
pixelherodev
Whelp, just going to go with my immediate idea and let you review it once it's a PR

1590301381
pixelherodev
Anyone know which executable is the ZIR compiler? :P

1590301447
pixelherodev
Never mind :P

1590301642
pixelherodev
Literally just watched the stream archive to find it lol

1590301676
pixelherodev
Not that it helps :(

1590301697
pixelherodev
There is, as far as I know, no executable that goes ZIR -> binary in a single pass

1590301705
pixelherodev
There's the incremental compiler, but that's interactive

1590301723
pixelherodev
There's ./zig-cache/bin/zig but that requires Zig input not ZIR IIUC

1590301728
pixelherodev
Need to double check that one actually

1590301732
pixelherodev
That might be exactly what I want

1590302111
pixelherodev
Oh wait, for this I

1590302241
pixelherodev
An neat

1590302243
pixelherodev
It is ZIR :)

1590302386
pixelherodev
Oh neat, it also has the REPL mode

1590302391
pixelherodev
Neater? meh

1590302746
pixelherodev
Is there a way to get the path of a std.fs.Dir?

1590302788
pixelherodev
Hmm, all it has is the FD; I should look elsewhere probably

1590308801
pixelherodev
Okay, is there a way to get the path to a std.testing.TmpDir?

1590308854
daurnimator
pixelherodev: yeah its returned...

1590308867
pixelherodev
No it's not, as far as I can tell

1590308871
daurnimator
js.join(.parent_dir, .sub_path)

1590308872
pixelherodev
It returns a std.fs.Dir

1590308873
daurnimator
*fs

1590308878
pixelherodev
... you can do that?!

1590308890
daurnimator
pixelherodev: no. I was psuedocoding

1590308891
pixelherodev
I looked in std.fs.Path

1590308898
pixelherodev
not std.fs itself

1590308906
daurnimator
but it does return a .parent_dir and a .sub_path

1590308914
pixelherodev
Right, but, what I meant was

1590308918
pixelherodev
a std.fs.Dir only has a fd

1590308920
pixelherodev
not the path

1590308928
pixelherodev
There's a way to get the path from the fd?

1590308941
daurnimator
no. but testing.tmpDir gives you both the fd and the path

1590308954
daurnimator
(well yes there is a way; but it doesn't work on all platforms)

1590308976
pixelherodev
It only gives the fd and the subpath, I'm 99% sure

1590308991
pixelherodev
I looked it over, and the sub_path's len is explicitly the length of the random gibberish from std.crypto

1590309003
daurnimator
pixelherodev:

1590309020
daurnimator
where do I redeem my winnings?

1590309047
pixelherodev
Isn't that also a std.fs.Dir?

1590309051
pixelherodev
Or is it just annoyingly named? :P

1590309066
pixelherodev
No it's a Dir

1590309074
pixelherodev
L#198

1590309102
daurnimator
oh sorry

1590309106
pixelherodev
Nah, it's all good

1590309124
pixelherodev
If you can think of a way, it'd be appreciated though

1590309139
pixelherodev
Hmm, actually

1590309143
pixelherodev
I don't necessarily

1590309154
pixelherodev
Wait never mind I take that back, I do

1590309156
pixelherodev
Dammit

1590309166
daurnimator
why?

1590309167
pixelherodev
Thought for a second, "well what if I just attach the FD to the new process"

1590309177
pixelherodev
I'm reimplementing compile error tests

1590309186
pixelherodev
They need to run the stage2 compiler in a child process

1590309198
daurnimator
the cheating way is fork; `fchdir` to it; and then use relative paths in the subprocess

1590309199
pixelherodev
They need to read the error message, which is printed to stderr...

1590309204
pixelherodev
Yeah, that might work

1590309212
pixelherodev
Actually, maybe it'd be better to write a thin compiler wrapper

1590309226
pixelherodev
The problem is, I don't think it exposes errors internally

1590309244
pixelherodev
IIUC, most errors are *printed*, but not enough info is passed up the callstack for that to be feasible

1590309438
pixelherodev
daurnimator: I'd rather not cheat for this :P

1590309583
pixelherodev
Oh wait

1590309594
pixelherodev
failed_{decls,files,exports} exist :)

1590309630
pixelherodev
Hmm

1590309640
pixelherodev
Is there a way to say, "if error union is error"?

1590309643
pixelherodev
I mean, catch exists ofc

1590309648
pixelherodev
But I want the

1590309654
pixelherodev
If

1590310038
pixelherodev
Labelled block works, I guess

1590310058
pixelherodev
`const failed = f: { blah() catch break :f true; break :f false; }`

1590314199
pixelherodev
Found first ZIR analysis bug :)

1590314214
pixelherodev
The tests aren't fully finished yet, but the framework is in place

1590315230
ikskuh
andrewrk: is packages.zig a reserved file name in the zig build process?

1590315367
ikskuh
ah no

1590315375
ikskuh
the auto-typename-thingy is just borked :D

1590317417
ikskuh
okay, i have found a zig abomination

1590317424
ikskuh
foo().?..bar().?

1590317462
pixelherodev
Uh

1590317469
pixelherodev
Ohhhh I see

1590317484
pixelherodev
Slicing?

1590317490
ikskuh
yeah :D

1590317506
ikskuh
with optionals

1590317640
pixelherodev
yeah, got that part :P

1590317643
pixelherodev
if you think that's bad...

1590317647
pixelherodev
I wrote a real abomination earlier

1590318584
pixelherodev
error.no_errors

1590318587
pixelherodev
lol

1590318593
pixelherodev
error.did_not_fail is probably better

1590318616
pixelherodev
But it's amusing that that would actually fit

1590318706
pixelherodev
Just about done with the error checking framework :)

1590318784
ikskuh
it may actually make sense

1590318796
ikskuh
so the test runner returns that a test did not fail which is the error condition :D

1590318800
pixelherodev
Exactly

1590318802
ikskuh
so you return error.NoError :D

1590318808
pixelherodev
error.did_not_fail is better though

1590318813
pixelherodev
Precisely because it avoids this

1590318816
ikskuh
DidNotFail! :D

1590318816
pixelherodev
:P

1590318828
pixelherodev
Wait, are errors suppo - yes, yes they are

1590318831
pixelherodev
good catch

1590318835
pixelherodev
pun intended

1590318874
ikskuh
try harder()

1590318903
pixelherodev
:)

1590319218
pixelherodev
Hmm

1590319228
pixelherodev
What's a good name for the error when more errors are encountered than expected?

1590319235
pixelherodev
e.g. we're expecting two errors but we got four

1590319241
pixelherodev
error.ExtraErrors is too vague

1590319251
pixelherodev
error.MoreErrorsThanExpected feels too verbose

1590319264
pixelherodev
error.UnexpectedErrors feels stupid, but I guess it's on point?

1590319274
ifreund
error.TooManyErrors

1590319278
pixelherodev
and std.fs uses it (according to ZLS), so it's good

1590319283
pixelherodev
UnexpectedError, that is

1590319300
ifreund
yeah that's pretty good

1590319307
pixelherodev
It sounds stupid but

1590319312
pixelherodev
It does convey the intended meaning

1590319378
pixelherodev
MismatchedError might be good for when a different error than the one we expected shows up

1590319384
pixelherodev
ExpectedOtherError

1590319391
pixelherodev
s/^/or/

1590319607
ifreund
error.WrongError

1590319764
pixelherodev
Now good for failed_file error messages, I think :)

1590320189
pixelherodev
Yeah

1590320219
pixelherodev
And for convenience, it prints e.g. "Expected error 'invalid decl', found 'invalid decl: %foo'"

1590320260
pixelherodev
Or to use an actual example: `Expected '', found 'unrecognized identifier: %test'`

1590320342
pixelherodev
Alright, fully done I think

1590320826
pixelherodev
If I add another PR, more than 10% of open PRs will be mine lol

1590320973
ifreund
good job on being productive :D

1590321000
pixelherodev
Yeah :)

1590321027
pixelherodev
Three of the four PRs I have open are stage2 improvements :)

1590321078
pixelherodev
Though one is just a minor one-liner :P

1590321197
pixelherodev
I'll do more later, but for now I need to get more done on Ikiru :)

1590324713
pixelherodev
alexnask: thanks for the ZLS work :)

1590324759
alexnask
Does it enable completions on any of your types or are they still too complex? :D

1590324809
alexnask
Probably not, I dont think many people recursively call type fns :P

1590324810
pixelherodev
Going to find out in just a second...

1590324861
pixelherodev
:D

1590324864
pixelherodev
It works :D

1590324874
alexnask
\o/ !

1590324970
pixelherodev
I mean, internally at least

1590324979
pixelherodev
For external usage I still need package support :)

1590325008
pixelherodev
My last attempt at implementing that didn't end well though :P

1590325024
alexnask
I will give it a shot later today, the people want it

1590325076
alexnask
Did you try to parse the build.zig file? I will probably ship a custom build runner, find zig in path and make it output a package list to the parent process (zls)

1590325090
pixelherodev
Nah, I didn't even get that far

1590325096
pixelherodev
I tried a manual override and it didn't work

1590325101
alexnask
Aah gotcha

1590325105
pixelherodev
That is, adding the name and path directly to the source

1590325167
pixelherodev
It didn't work hardcoded, and I didn't have time to try getting it working

1590325189
pixelherodev
I'll focus on stage2, it's friendlier :P

1590325213
pixelherodev
One nice benefit of ZLS showing function descriptions: it annoys me enough to document the hell out of things

1590327115
pixelherodev
`1/1 test "self-hosted"...Test 'call with non-existent target' compilation succeded, error expected`

1590327119
pixelherodev
:)

1590327144
pixelherodev
andrewrk: I'm assuming ZIR requires explicit imports, correct?

1590327166
pixelherodev
That is, if we encounter an unknown function name, we don't pull a C and define it as a preset type or anything, right? :P

1590327288
alexnask
lol

1590327307
alexnask
just use int where there is no type :D

1590327319
ikskuh
f(){}

1590327328
ikskuh
shortest valid c file :D

1590327388
pixelherodev
False!

1590327390
alexnask
`The empty list in a function declarator that is not part of a definition of that function specifies that no information about the number or types of the parameters is supplied.`

1590327393
pixelherodev
ikskuh: I've got a shorter one

1590327394
alexnask
Gotta love C

1590327395
pixelherodev


1590327401
pixelherodev
:)

1590327410
pixelherodev
alexnask: yeah...

1590327414
pixelherodev
I mean, I do

1590327418
alexnask
Sure

1590327422
pixelherodev
It's still easily in my top three

1590327422
alexnask
Its quirky though

1590327426
pixelherodev
Oh for sure

1590327523
alexnask
`void func1() { } .... func1(1, 2, 3); ` <- The compiler need not produce an error

1590327598
pixelherodev
Yeah I know

1590327609
ikskuh
const char main __attribute__((section(".text"))) = 0xC3;

1590327615
pixelherodev
The way I see it, C's quirks are utterly atrocious

1590327615
ikskuh
valid for x86

1590327618
alexnask
Ah yes another classic

1590327621
pixelherodev
but

1590327625
pixelherodev
C's quirks are

1590327634
pixelherodev
C's quirks in ten years will be the same they were ten years ago

1590327648
pixelherodev
C++, Rust, even Zig for now, don't provide that kind of guarantee

1590327660
pixelherodev
Hell, C++ and Rust are basically determined to be as far away from that as possible

1590327667
ikskuh
zig does not want to atm :D

1590327684
pixelherodev
c++17 had so many changes the wikipedia page was basically "this... isn't complete. there's too many features to list for that."

1590327696
alexnask
GCC should standardize their C extensions

1590327700
ifreund
yeah c++ is ridiculous

1590327701
pixelherodev
C18 literally added

1590327704
pixelherodev
alexnask: ehh

1590327707
pixelherodev
I disagree

1590327712
pixelherodev
Some of the GCC extensions are good, eys

1590327713
pixelherodev
yes*

1590327715
pixelherodev
Others less so

1590327720
alexnask
I dont mean include them in the C standard

1590327735
pixelherodev
Do you mean to define them?

1590327739
pixelherodev
Add them to Clang

1590327741
pixelherodev
?

1590327748
pixelherodev
Add them to every other C compiler in existence?

1590327751
alexnask
Make a "GCC extension" standard so that other compilers can implement them and guarantee  the same behavior

1590327755
pixelherodev
ahh

1590327758
alexnask
Clang implements a good amount of gcc extensions

1590327761
pixelherodev
True

1590327773
pixelherodev
I think an official way to define C extensions would be good

1590327782
pixelherodev
Ohh, i know a good example

1590327784
pixelherodev
You know RISC-V?

1590327796
alexnask
vaguely :P

1590327802
pixelherodev
I'm thinking `C + GNULite + Embed`

1590327830
pixelherodev
That is, well-defined standards (C standard, extension specs, etc), where a compiler explicitly reports what extensions it supports

1590327876
pixelherodev
Heck, add e.g. POSIX to that list

1590327883
pixelherodev
GCC would report `C + POSIX + GNU`

1590327893
pixelherodev
Build scripts could then do `if (compiler.supports("POSIX"))`

1590327900
pixelherodev
`if (compiler.supports("GNU"))`

1590327902
pixelherodev
etc

1590327922
pixelherodev
andrewrk: [insert party hat here]

1590327924
pixelherodev
:)

1590327941
andrewrk
let's see what happens to those ggf graphs :D

1590327954
alexnask
yay \o/

1590327984
pixelherodev
andrewrk: I'm assuming ZIR requires explicit imports, correct?

1590327992
pixelherodev
(while you're here :)

1590328004
andrewrk
I do not understand the question

1590328018
pixelherodev
If we see `call(@foo)`

1590328022
pixelherodev
and @foo hasn't been defined yet

1590328026
pixelherodev
That should error, correct?

1590328087
pixelherodev
alexnask: does this mean ZLS is about to get a bunch faster, too? :)

1590328134
alexnask
We'll see :D Let me update my branch and merge to master

1590328141
pixelherodev
:)

1590328161
pixelherodev
andrewrk: I'm asking because it currently doesn't seem to do so and I wanted to be sure this wasn't deliberate before fixing it

1590328162
andrewrk
pixelherodev, ZIR is the thing that makes all the zig compile errors work for zig source code

1590328197
andrewrk
so your question can be answered by asking, "how does it work in zig?"

1590328224
pixelherodev
That's a yes, I take it?

1590328227
pixelherodev
`1/1 test "self-hosted"...Test 'call with non-existent target' compilation succeded, error expected`

1590328264
pixelherodev
Alrighty, patching

1590330042
pixelherodev
andrewrk: would the proper place to make the check be genCall?

1590330059
pixelherodev
The

1590330083
andrewrk
pixelherodev, codegen.zig should not be doing any semantic analysis

1590330092
andrewrk
by the time control flow gets there, everything should be smooth sailing

1590330121
andrewrk
can you explain a bit more what you're trying to solve?

1590330160
pixelherodev
Right now, `call(@foo)` doesn't result in an error if `foo` isn't defined

1590330184
pixelherodev
Or at least, `module.update()` doesn't return an error for it

1590330233
pixelherodev
My goal here is to scan the list of known decls and error out if it isn't found

1590330249
pixelherodev
This should be in Module.zig, right?

1590330255
pixelherodev
That's where semantic analysis is IIUC

1590330286
pixelherodev
Wait... that

1590330303
pixelherodev
self.resolveInst() should fail...

1590330359
pixelherodev
Ahh

1590330361
pixelherodev
I see

1590330378
pixelherodev
it calls through to resolveDecl, which appears to create it if it doesn't already exist

1590330411
pixelherodev
Though that

1590330420
andrewrk
yeah that's where it should fail

1590330457
andrewrk
note that it will insert a placeholder "invalid" decl so that any other references to this same name will not produce redundant compile errors

1590330464
pixelherodev
ohhh, gotcha

1590334930
andrewrk
alright. chores, then it's time to give some love to pull requests

1590335170
pixelherodev
uh oh

1590335173
pixelherodev
I need to quickly make more

1590335177
pixelherodev
before all of mine get merged :P

1590335373
scientes
andrewrk, how do you get those nice instruction count statistics?

1590335379
scientes
I have a new enough CPU

1590335407
andrewrk
scientes, specifically, which column?

1590335425
scientes
i.e. 8df0841d6ab964e2aec750a8cee

1590335450
andrewrk
the columns are timestamp,benchmark_name,allocator,commit_hash,error_message,samples_taken,wall_time_median,wall_time_mean,wall_time_min,wall_time_max,utime_median,utime_mean,utime_min,utime_max,stime_median,stime_mean,stime_min,stime_max,maxrss,baseline_error_message,baseline_samples_taken,baseline_wall_time_median,baseline_wall_time_mean,baseline_wall_time_min,baseline_wall_time_max,baseline_utime_median,baseline_utime_mean,baseline_utime_min,baseline

1590335450
andrewrk
_utime_max,baseline_stime_median,baseline_stime_mean,baseline_stime_min,baseline_stime_max,baseline_maxrss

1590335474
scientes
oh ok, I think this is the way to do it then

1590335525
andrewrk
that might be a really nice column to add

1590335536
scientes
but where do those columns come from?

1590335541
andrewrk
which one?

1590335547
scientes
all of those above?

1590335553
scientes
is it linux-perf?

1590335562
scientes
ahh perf stat

1590335640
andrewrk
timestamp-> from the git commit. benchmark_name,allocator from manifest.json. commit_hash/error_message is part of the logic of the script. samples_taken is from the benchmark harness. maxrss, utime, stime are from getrusage. wall_time is from a timer

1590335692
scientes
oh, my git ids are ruined by a merge

1590335707
scientes
nah, nvm

1590336641
pixelherodev
Hmm

1590336645
pixelherodev
It never

1590336736
pixelherodev
Ohhh

1590336742
pixelherodev
s/plam/palm

1590336745
pixelherodev
I didn't export start

1590336748
pixelherodev
so it never analyzed it :P

1590336798
pixelherodev
... except I get the same result if I do export it :(

1590337021
pixelherodev
Hmm, I'm fairly certain analyzeFnBody is correctly erroring out (if for the wrong reason :P)

1590337029
pixelherodev
Something's intercepting it further up the chain...

1590337043
fengb


1590337069
pixelherodev
Ohhhh

1590337072
fengb
use-after-free is a major vector

1590337083
pixelherodev
performAllTheWork is catching it and continuing onwards...

1590337088
ifreund
hmm, has someone proposed using underscores in function declarations to ignore parameters and making using all parameters required?

1590337089
fengb
Would we reliably detect those with the debug allocator?

1590337129
ifreund
yes, i think we would

1590337226
pixelherodev
Okay, so update() should check for failures separate from the `try` when calling performAllTheWork, and then pass it up the chain that way...

1590337270
pixelherodev
Or, since I'm already passing analysisfails upwards in update, I should do it here too, but I'm starting to suspect it was a deliberate design decision not to do so

1590337398
pixelherodev
Better yet

1590337407
pixelherodev
I shouldn't be checking if update() returned an error to see if it failed

1590337514
pixelherodev
`Unexpected decl error: ErrorMsg{ .byte_offset = 118, .msg = TODO implement type coercion from [8:0]u8 to []const u8 }`

1590337516
pixelherodev
That's better

1590337543
ifreund
ah pmwhite already followed exactly the same path I did :D

1590337605
fengb
I donâ€™t like it for function args since having a name is more self documenting

1590337643
ifreund
more so than saying "I don't use this parameter" by ignoring it with an underscode?

1590337655
fengb
But why is it there? You get nothing

1590337691
ifreund
it's there to match the function signature required when declaring, for example, a callback

1590337694
fengb
You see bizarre silliness in JavaScript where they do `function foo(/* context */)`

1590337743
fengb
Yes I know but it doesnâ€™t tell you anything. If you write _context: Context, that hints at it matching with whatâ€™s available

1590337758
fengb
I suppose the type would work in this case too

1590337794
fengb
But compare with something like _: bool

1590337813
fengb
_isUpper: bool

1590338356
andrewrk
pixelherodev, self-hosted is designed to continue making progress even in the case of compile errors. there can be 1 compile error per decl

1590338499
andrewrk
fengb, the strategy used by GeneralPurposeDebugAllocator is not 100% foolproof, but it's pretty good, especially on 64-bit systems. it uses an monotonically increasing (but wrapping) global atomic integer as the "hint" parameter to mmap, and then never re-uses slots

1590338531
andrewrk
its effectiveness is limited only by the address space range, and the operating system's honoring of the hint parameter

1590338585
andrewrk
in practice, you have to really try on purpose to use up all the virtual address space so that the hint has to wrap back around to low addrs

1590338660
andrewrk
also, arguably, operating systems should already be doing this. giving new addrs instead of repeating addrs for map/unmap/map

1590338723
pixelherodev
andrewrk: right, that's what I realized (which is why I closed a PR)

1590339495
pixelherodev
hmm

1590339508
pixelherodev
Why would a decl be read as a [N:0]u8 instead of as a slice?

1590339529
pixelherodev
Given that I haven't seen it attempt coercion elsewhere, I'm assuming most instances don't have this behavior

1590339615
shakesoda
don't things with comptime known sizes try to use sized types if possible since 0.6?

1590339637
shakesoda
i ran into this and had to throw in a few instances of slicing at callsites

1590339652
shakesoda
* sized array types

1590351655
ikskuh
huh

1590351670
ikskuh
is it a well-known-problem that zig can't handle long paths on windows very well?

1590351710
ikskuh
i can

1590351745
ikskuh
i can't compile a project on a Desktop folder because zig build crashes with error.Unexpected: FileNameTooLong

1590352160
andrewrk
no that's not a known problem

1590352188
andrewrk
I thought it worked up to something like 32,0000 bytes

1590352203
ikskuh
doesn't look like it

1590352209
andrewrk
smells like a bug

1590352210
ikskuh
i'll try to make a minimal example

1590352212
ikskuh
yep

1590352313
alexnask
ikskuh, Can you give me an example path length so I can try to repro? Tried on desktop (pretty long path) and in some folders in Documents but I cant get the error to trigger

1590352336
ikskuh
try building MasterQ32/gurl  on Desktop

1590352344
ikskuh
username "test" for me, so "alex" should be enough :D

1590352359
ikskuh
C:\Users\test\Desktop\Projects\gurl

1590352364
ikskuh
is my folder where i build in

1590352516
alexnask
strange

1590352553
ikskuh
yeah

1590352556
ikskuh
win7, x86_64

1590352562
ikskuh
clean install, using gitbash

1590352629
alexnask
Managed to repro in directory C:\Users\Alex\Documents\directory_1\some_other_long_directory\a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z\gurl

1590352646
alexnask
I can build a zig init-exe proj in C:\Users\Alex\Documents\directory_1\some_other_long_directory\a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z though >_>

1590352686
alexnask
I can also build the init-exe project in the gurl subdirectory

1590352696
alexnask
So not a path  length issue

1590352721
ikskuh
the stack trace runs into a path length error i think

1590352764
ikskuh


1590352790
alexnask
Yes this is the error I got as well

1590352803
ikskuh
what is happening there

1590352803
alexnask
hmm

1590352807
ikskuh


1590352824
ikskuh
in const len = try di.coff.getPdbPath(path_buf[0..]);

1590353066
ikskuh
i think it actually fails to spawn the builder process

1590353227
andrewrk
I wonder if somewhere we're using the length of a large buffer rather than a smaller slice of it

1590353281
andrewrk
oh, hmm, I recently protected against this however by introducing PathSpace rather than using the array directly

1590353377
ikskuh
integer overflow

1590353380
ikskuh
const file_offset = debug_dir.virtual_address - header.virtual_address + header.pointer_to_raw_data;

1590353388
ikskuh
this looks like it could overflow if evaluated in the wrong order

1590358760
alexnask
andrewrk, Can I use a custom build runner without `override-lib-dir`? Like just overriding the special directory or something similar

1590359038
andrewrk
yeah should work fine

1590363981
pixelherodev
Has debug integration improved or is it just me?

