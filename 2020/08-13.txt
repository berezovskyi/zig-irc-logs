1597277266
blinghound
@pixelherodev what are the tricarbon components?

1597279038
pixelherodev
Well I can't tell you if you're gone :P

1597280732
andrewrk
I will live stream stage2 development in 25 minutes

1597280795
andrewrk


1597280852
ronsor
coolio

1597282306
pixelherodev
I will

1597283259
pixelherodev
wait *What*?!

1597283266
pixelherodev
Kakoune supports `a|b` in regexes?!

1597283277
pixelherodev
I keep accidentally discovering things that make life easier :P

1597283416
CodeSpelunker
lol :)

1597283436
CodeSpelunker
is there a good resource out there that describes differences between Rust and Zig?

1597283454
pixelherodev
Maybe?

1597283472
CodeSpelunker
I heard about Zig through someone else on a Rust discord, and it sounds really cool!

1597283478
pixelherodev
Here's how I like to put it, if this helps:

1597283481
pixelherodev
Zig is like a better C

1597283485
pixelherodev
Rust is like a better *C++*.

1597283488
CodeSpelunker
ahhh neat

1597283498
pixelherodev
That's my way of casually insulting Rust :P

1597283505
pixelherodev
all subtle-like :P

1597283506
CodeSpelunker
I can definitely get behind that

1597283518
CodeSpelunker
hey, better is better

1597283524
pixelherodev
Sure

1597283532
pixelherodev
But it's also about where we set the bar ;)

1597283547
CodeSpelunker
mhm

1597283587
CodeSpelunker
After a couple years now of hacking on Rust, I'm looking forward to learning some Zig too

1597283780
leeward
Zig has less general-purpose algebraic types, and no Hindley-Milner, and no RAII, and is generally lower level than Rust. On the other hand, it has many fewer features, so it's reasonable to keep most of the language in your head.

1597283903
CodeSpelunker
I like the idea of that

1597283925
fengb
If you know C, you can pick up Zig in a weekend. If you know C++, you can pick up Rust in a month :P

1597283931
pixelherodev
lol

1597283936
CodeSpelunker
heheh

1597283952
CodeSpelunker
I went into Rust having never touched C++

1597284158
CodeSpelunker
so, what do % and %% correspond to in Zig?

1597284174
CodeSpelunker
that is the first thing that stands out to me looking at some Zig code

1597284176
companion_cube
I went into rust having barely touched C++ (and hating it)

1597284184
CodeSpelunker
hehehe

1597284200
fengb
Um that’s probably really old Zig

1597284207
CodeSpelunker
ah I see

1597284223
fengb
%return was switched out for return error, and %% was swapped out for try?

1597284243
fengb
Or catch... I can’t remember

1597284261
CodeSpelunker
this looks so much better than the other thing I was looking at:

1597284276
fengb
It was old error handling syntax. Yeah it’s been “modernized”

1597284303
fengb


1597284309
fengb
Wow that’s ancient lol

1597284553
pixelherodev
Haha

1597284556
pixelherodev
yeah

1597284653
pixelherodev
andrewrk: figured out why I switched on the tag and not zigTypeTag: this is a *Value*, and we have no way to find the Type of a Value

1597284665
pixelherodev
The value's tag is all I've got in some places, I think

1597284707
pixelherodev
Ah, nope; can pass it from the caller :)

1597285149
pixelherodev
andrewrk: 6007 is now done on my end, ready for review whenever you're ready to look at it ;D

1597285246
pixelherodev
"C compare output tests shouldn't use 'zig cc', but the equivalent API in the compiler" <- stage2 doesn't

1597290057
andrewrk
pixelherodev, ah my bad let me take another look

1597290300
andrewrk
hmm I suppose stage2 CBE compare output tests are blocking on a few things

1597293692
andrewrk
pixelherodev, you there?

1597293718
andrewrk
if you do the anyerror fix and then tell me that test-stage2 passed locally I'll merge #6007 straight away

1597294860
andrewrk
ok I did it and merged it

1597296596
pixelherodev
Was out running, sorry :P

1597296610
pixelherodev
andrewrk: how far down the line are packages / @import?

1597296633
pixelherodev
(as a priority to you; assuming nobody just shows up and submits a patch :P)

1597296667
andrewrk
I have a relatively high confidence of those things working smoothly, so, low priority

1597296687
pixelherodev
CBE CO tests are on back burned for now?

1597296698
pixelherodev
Or should I implement them via stage1?

1597296702
pixelherodev
We can always switch it over later

1597296790
andrewrk
the path to implement them is to pass the path to the zig executable to the test runner, and then the stage2 compare output tests would use that in a child process to compile & run the tests

1597296806
andrewrk
so there's a bit of work to do to set this up, but I think it's worth it

1597296815
andrewrk
I can do that setup

1597296890
pixelherodev
How straightforward would basic @import support be to add, if I wanted to tackle it before returning to the CBE?

1597296921
pixelherodev
No matter how many files we've got, it'll still produce a single ZIR output IIUC

1597296933
pixelherodev
So it probably only depends on structs and dot access thereof?

1597297230
andrewrk
yeah that's right, struct types is a prereq and it also has implications for debug info

1597297263
pixelherodev
I can just do it all in one file for now :P

1597297283
pixelherodev
Or, the dumb option, use std.zig to hack together a program which analyzes multiple files and automatically concactenates them

1597297311
pixelherodev
(replacing e.g. `a = @import("b.zig"); const c = a.b;` with `[contents of b.zig here] const c = __aa__b;` :P

1597297314
pixelherodev
)

1597297363
andrewrk
sounds like a local maximum

1597297363
pixelherodev
andrewrk: is the end goal for CBE to emit one file total or one per Zig input?

1597297370
andrewrk
one file total

1597297371
pixelherodev
Presumably we want one

1597297376
pixelherodev
input file*

1597297389
pixelherodev
gotcha, that makes life easier :)

1597297513
pixelherodev
andrewrk: mind elaborating on your second comment on 6007?

1597297522
pixelherodev
Which part belongs in a separate function?

1597297579
andrewrk
pixelherodev, in codegen.zig that's resolveInst

1597297590
pixelherodev
Ahhh right

1597297591
pixelherodev
Gotcha

1597297595
andrewrk
in zir_sema.zig it's resolveInst

1597297606
andrewrk
there's a pattern here

1597297614
pixelherodev
:P yep

1597297759
pixelherodev
andrewrk: is there any way to map a decl to its source file?

1597297766
pixelherodev
Thinking ahead for header generation

1597297808
andrewrk
are you looking at the decl struct?

1597297831
pixelherodev
Scope.File is the source file?

1597297836
andrewrk
yeah

1597297857
pixelherodev
I figured as much, but I wasn't 100% sure if it was the root file or something

1597297884
pixelherodev
I've started questioning my assumptions a bit more to avoid another ELF16 incident :P

1597297885
andrewrk
decl.scope is either a Scope.File or Scope.ZIRModule

1597297933
pixelherodev
Yeah, I know that; wasn't 100% sure if Scope.File was the containing file or not

1597298306
pixelherodev
Is there a way to check if it's public from the Decl?

1597298361
pixelherodev
I know exports are handled separately, but for CBE, `pub` might as well

1597298756
andrewrk
export and pub mean very different things

1597298763
andrewrk
pub is irrelevant to CBE

1597298875
pixelherodev
K

1597298911
pixelherodev
Anywho, gnight :)

1597298916
pixelherodev
More CBE (or maybe HEX) work incoming tomorrow :)

1597299496
andrewrk
good night

1597334867
KoljaKube
Can I rely on copy elision to store pointers to the constructed struct in `init()` that will be used after `init()` has returned?

1597335104
KoljaKube
As far as I understand I would need to wait for

1597335285
forgot-password
When I use std.build.Builder to execute "git -C /path/to/repo status" I get an error that it's an unknown option, but everything else like "git --version status" works fine. Is the "-C" option treated differently?

1597335297
forgot-password
And yes, my git version supports this option

1597335462
forgot-password
Aha! I need to pass the path as a separate argument and not together with "-C"...

1597336577
KoljaKube
Hm, interesting. #1717 is still open, but function aliasing like `pub const makeReceiver = @import("./call.zig").Receiver.init;` already work

1597336580
andrewrk
KoljaKube, that's the idea, but there are a couple more issues left to solve before that will work

1597336589
andrewrk
re: copy elision

1597336595
andrewrk


1597336616
KoljaKube
Good to know, thanks

1597336632
andrewrk
oh you followed up with that yourself :)

1597336664
KoljaKube
Then I will be passing in an out parameter until then

1597336734
KoljaKube
I try to do my homework, but I usually fear that my code experiments fail because of some unrelated reason, that's why I ask to make sure ;-)

1597336808
andrewrk
regarding 1717, it's syntax sugar only, really. you can already get functions inside functions by wrapping it in a struct

1597336828
Nypsie[m]
Does that mean it only needs to be implemented by the parser?

1597336844
Nypsie[m]
(regarding 1717)

1597336900
andrewrk
hmm no there are lots of considerations regarding the implementation. I just meant from a programming perspective, there's not really much of a difference other than convenience

1597336928
Nypsie[m]
Ah I see, thanks

1597337101
sqwishy
I can't have `fn Foo(n: u32) type { return struct { foo: n[u32] } }` and invoke it like `Foo(only_known_at_runtmie)` right? The type stuff has to be comptime?

1597337331
Nypsie[m]
I assume you mean foo: [n]u32, in your example? But yes, n needs to be comptime in this case.

1597337591
Nypsie[m]
andrewrk: Btw, I was just wondering the other day. Is Zir only for Zig? Or, could some arbitrary compiler build zir to build their binaries using the Zig compiler (if there was some way to hook in)? Not sure if this makes any sense but I was just toying with the idea that another language could use zig/zir instead of llvm.

1597337694
Nypsie[m]
(or instead of their own backend)

1597337712
andrewrk
I'm not designing it with that use case in mind, but it's in theory possible

1597337740
Nypsie[m]
Cool, all I needed to know :)

1597337771
andrewrk
you'd have to decide whether to target untyped ZIR which is heavily coupled to zig semantics, or the in-memory, typed IR instructions which are less coupled to zig but you have to provide the types of everything and some other guarantees

1597337898
Nypsie[m]
Aaaaaah got it

1597337902
Nypsie[m]
Thanks

1597338537
andrewrk
oh damn I missed the 10,000 commit party

1597338878
leeward
Gotta wait until 16,384 to have the big party then.

1597339579
scientes
leeward, but that isn't even a power of 2

1597339591
scientes
you mean 24k

1597339607
scientes
err

1597339620
scientes
ahh my bad ,I'm thinking all funny

1597346149
pixelherodev
Drats

1597346169
pixelherodev
Major CBE work is still blocked on astgen for now

1597346179
pixelherodev
I'll focus on HEX today instead, I think

1597354470
andrewrk
astgen is pretty straightforward

1597354502
pixelherodev
andrewrk: I mean e.g. enums and structs

1597354507
pixelherodev
The big stuff :P

1597355626
pixelherodev
Wow CI takes forever

1597355815
pixelherodev
It might legitimately be worth writing something with git + zig integration to detect which tests have actually changed and only run those :P

1597355841
pixelherodev
Even if that took, like, ten hours to write, it'd save hours and hours of run time

1597355854
andrewrk
given that the CI is for the benefit of the reviewer, and reviewers tend to look at PRs after many hours after the PR goes up, we can conclude that the CI is actually instant ;)

1597355878
pixelherodev
Extremely inefficient though :(

1597355890
pixelherodev
One reallllllly inefficient instant

1597355904
pixelherodev
Plus, it could come in handy locally too

1597355934
pixelherodev
e.g. when working on stage2, if we cache everything between tests and quickly diff them, we can only run tests that have had dependents changes

1597355936
pixelherodev
changed*

1597356062
andrewrk
the test suite already does that to some degree

1597356088
pixelherodev
Really?

1597356091
pixelherodev
I haven't noticed...

1597356107
andrewrk
all you have to do for stage2 development is `./zig build test-stage2` which takes about 10 seconds to build the test harness and then a few ms to actually run all the tests

1597356156
pixelherodev
As opposed to?

1597356163
pixelherodev
Ah, I see what you mean

1597356213
pixelherodev
I'm basically talking about incremental testing, except instead of tracking generated code, tracking successful and unsuccessful tests out-of-band, and caching the state of all of their dependents

1597356406
andrewrk
I'd rather just work stage2 progress

1597356434
pixelherodev
For sure

1597356444
pixelherodev
This is one of those "if I had infinite time" ideas :P

1597362570
sqwishy
A comptime assert I wrote is failing since some value isn't what I expect; is there a good way to display/inspect the value I have?

1597363007
sqwishy
I think my reasoning is sound here but packed structs aren't doing what I expect with respect to byte order? Or am I sutpid.

1597363025
ronsor
sqwishy: @compileLog();

1597363069
sqwishy
yay

