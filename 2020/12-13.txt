1607818555
ifreund
done

1607818962
karchnu
I wish more systems were on musl

1607818983
karchnu
less black magick

1607819195
ifreund
I've been planning on reformatting my hard drive so I can use zfsbootmenu at some point when I have a free day and don't feel like programming

1607819236
ifreund
I'll definitely get a void-musl install going when I do

1607825872
hf69
q

1607846670
Alloc
Hello I'm attracted to Zig by wondrous idea of first-class type, and learning Zig.

1607846813
Alloc
I want to write a function that takes Reader interface and will do something likes this: fn thing(r: /* a type that enforces Reader interface */, arg: u32) !u32 { ... }

1607846838
Alloc
I don't know what the type of r should be. is anytype and duck typing sufficient?

1607847838
daurnimator
yes

1607851222
koakuma
Hi. I'm having what appears to be an endianness issue in comptime-executed code

1607851256
koakuma
On sparc64, comptime(std.math.absFloat(-10-05)) returns -10.049 (or 0xC120CC4D in hex)

1607851276
koakuma
(Correct one should be 0x4120CCCD)

1607851343
koakuma
I've tracked it down to ir_eval_const_value but still can't wrap my head around the interpreter code

1607851466
koakuma
Anyone can help me around these parts? Especially on how/where does function arguments get passed and where does the actual interpretation takes place

1607851470
koakuma
Thanks

1607851741
daurnimator
koakuma: I remember a similar bug report; are t you running latest?

1607851763
daurnimator
oh that was you

1607852709
koakuma
Yeah

1607852731
koakuma
That one was about float parsing, which has been fixed

1607852755
koakuma
This one is about comptime-execution of float values

1607852786
koakuma
(Or rather, bitops? I peeked at the code for absFloat and it seems to be implemented in terms of bitops)

1607852883
daurnimator
koakuma: that does seem to be true.

1607852920
daurnimator
koakuma: I assume you can replicate the failure by running `zig test lib/std/math/fabs.zig` ?

1607853204
koakuma
Yes, that's how I found out about the

1607853209
koakuma
*this

1607856563
koakuma
Oh, I think I found it -  seems like @bitCast returns swapped values on BE machines?

1607856598
koakuma
Where does it get impemented? I didn't manage to find the definition of it when grepping

1607857202
semarie
koakuma: your problem with comptime is with zig running on LE machine (crosscompile to BE) or BE machine (native compilation or cross BE to BE) ?

1607857227
semarie
(with BE=big endian / LE=little endian)

1607857282
koakuma
Native BE

1607857536
koakuma
Or more precisely, building for sparc64 on sparc64

1607857634
semarie
regarding @bitCast, if I didn't mess myself, it is implemented with BuiltinFnIdBitCast (in src/stage1/ir.cpp line 7141)

1607858158
TheLemonMan
koakuma, ir_analyze_bit_cast

1607858231
TheLemonMan
the main suspects are buf_read_value_bytes and buf_write_value_bytes

1607858318
TheLemonMan
hey semarie, mind trying #7411 on openbsd when you have some time?

1607858472
semarie
TheLemonMan: I am testing

1607858507
TheLemonMan
thank you, that patch already uncovered a nasty error somewhere deep down qemu

1607858598
semarie
hum. sa_flags in struct sigaction is expected to be c_int (and not c_uint) on openbsd

1607858614
semarie


1607858621
TheLemonMan
yeah, on linux too but I prefer an unsigned int there

1607858653
TheLemonMan
some flags are like 1<<31 and that's awful

1607858696
semarie
here, I am not understanding. it isn't a matter of preference, but correctness. it could introduce subtile errors

1607858771
TheLemonMan
...like?

1607858786
daurnimator
oh wow; that feeling when I name something the exact same as something that already exists; and with the same implementation

1607858795
TheLemonMan
size and alignment are the same, that's all I care for

1607858814
TheLemonMan
daurnimator, plot twist, you wrote that

1607858914
daurnimator
I had to double check... it was tdeo

1607858952
TheLemonMan
plot twist, you

1607859556
protheory8-new-m
Do I actually have to await all launched async functions or is it optional to do that?

1607859645
ikskuh
protheory8-new-m: you are not forced to do anything, but note that if you don't await, you don't have a guarantee that all defers are being run and the resources are cleaned up

1607859766
protheory8-new-m
ikskuh: I was asking that because Zig documentation says this: "In the same way that every suspend has a matching resume, every async has a matching await. "

1607859822
ikskuh
you are not forced to do that

1607859838
ikskuh
if you can guarantee that all defers were run, you can also just abandon your frame

1607860000
daurnimator
though I assume that would be rare: your frame would normally be allocated somewhere, and you'll need to free it...

1607860009
protheory8-new-m
Wouldn't the fact that async function frames run out of the scope and deallocate cause problems?

1607860010
daurnimator
at least, you should :P

1607860040
protheory8-new-m
daurnimator: The frame is in stack

1607860234
koakuma
semarie & TheLemonMan: thanks for the pointer

1607860333
koakuma
Also is there a way to force the compiler to disable caching?

1607860333
koakuma
The help message doesn't seem to say anything about it

1607860457
TheLemonMan
koakuma, sadly there's no way :( it's a pita when you're working on the compiler

1607860484
TheLemonMan
semarie, you can send a PR to my repo, if you set the correct base branch it'll appear in that PR

1607863554
daurnimator
hmmm; the close and reopen PR trick isn't working :(

1607863573
daurnimator
or wait; it is... just took a while

1607863663
koakuma
So from my reading it's that buf_write_value_bytes reads a ZigValue's contents into a buffer, which is then written again to a differently-typed ZigValue by buf_read_value_bytes?

1607863706
koakuma
And guessing from the amount of is_big_endian flags, that buffer is supposed to be ordered as LE?

1607864011
koakuma
Is there a reason for that? I feel like I'm missing something here; if it really just copying values around all the byteflipping seems unnecessary

1607865840
koakuma
OMG this is nasty

1607865879
koakuma
buf_write_value_bytes calls float_write_ieee597 which will write into the buffer in LE

1607865913
koakuma
But buf_read_value_bytes calls bigint_read_twos_complement which requires the buffer to be in... system endianness

1607865931
koakuma
Yeah I think that's the root cause

1607865991
ifreund
that does sound ugly :D

1607875388
TheLemonMan
ifreund, ping

1607875396
ifreund
o7

1607881346
andrewrk
TheLemonMan, heads up here is a big change to the language that got accepted last week:

1607881365
andrewrk
I believe this will go a long way towards making comptime semantics understandable and the implementation robust

1607881668
hexaflex
Hello folks. I am very new to the language, so forgive me if this is silly. But the following program is giving me a bit of a headache. The comment at ythe top should explain what is meant to happen.

1607881768
ifreund
hexaflex: I think you might be interested in std.meta.trait

1607881792
ifreund
it does what you are trying to implement as far as I can tell

1607881795
hexaflex
I'll check that out. thanks

1607881876
ifreund
no problem, the test cases in that file serve as pretty good examples of what the API does

1607882042
andrewrk
I think trying to constrain generic types is a trap that new zig programmers fall into

1607882054
andrewrk
rust is great at constraining generic types, you might like it better

1607882068
andrewrk
for zig we rely on duck typing for generic types

1607882081
andrewrk
I personally never use std.meta.trait

1607882212
ifreund
I haven't used it personally either, I just avoid anytype wherever possible and let comptime duck typing do its think when anytype can't be avoided

1607882252
TheLemonMan
hexaflex, your code is triggering a compiler bug, yay

1607882279
hexaflex
that would explain things

1607882289
hexaflex
Is this something I should file a bug report for?

1607882293
TheLemonMan
andrewrk, yeah, I guess that's not something we want in stage1

1607882305
TheLemonMan
hexaflex, yes

1607882314
hexaflex
alright

1607882357
andrewrk
TheLemonMan, it could potentially simplify things and help with memory usage, but since it's an additional restriction it's not strictly necessary to implement

1607882372
marler8997
I have an idea that might solve (or at least help) the problem of not using type constraints but still getting good error messages

1607882383
andrewrk
what's that?

1607882449
marler8997
a change to the compiler that can backtrace compilation errors to the signature of generic functions and reason about whether the error could be with the type passed in by the caller

1607882500
marler8997
the only unsolved part about it is that I'm not sure how the compiler could tell if it's a problem with the generic type passed in, or with the code using it...the compiler could report both issues though

1607882533
andrewrk
that sounds really sophisticated

1607882637
marler8997
basically, if (compile_error) ... if (inside_generic_function) ... if (error_involves_anytype_parameter)  report_compile_error_and_generic_type_error

1607882669
marler8997
This is the exact same problem that C++ concepts solves, alot of complexity introduced just to create sane error messages

1607882792
marler8997
here are the notes I've taken so far...

1607883257
marler8997
maybe a good enough solution would just be to add a compile error "NOTE" about the generic type whenever one is involved

1607883367
TheLemonMan
I really liked the anytype(predicate) idea

1607883480
marler8997
that solution has the problem that the predicate needs to be kept in sync with the implementation

1607883523
marler8997
which isn't a huge problem, but there may be a solution that works just as well that doesn't have that problem

1607883555
marler8997
and the anytype(predicate) idea is possible today with a wrapper function

1607883781
torque
what do you mean by "kept in sync"?

1607883815
torque
I was under the understanding that the type predicate stuff was basically just syntactic sugar for doing the ducktype conformance checking at the top of the function

1607883848
ifreund
say your function takes any type with foo and bar methods. then say you modify the function to only require the bar method

1607883869
ifreund
you now need to update your type verifier to sync with the implementation

1607883896
marler8997
^

1607883930
torque
so the difference is that refactoring isn't purely local in some cases

1607884083
marler8997
the problem is that you're adding code whose sole purpose is to provide better error messages, that code needs to be maintained just like all other code.  So if we can solve this problem without requiring all this extra code then we've removed a whole class of possible bugs by removing the need for this special error message code

1607884151
marler8997
on the other hand, solving this issue makes "generic code" more tractable, which actually isn't a goal of Zig

1607884208
marler8997
so I suppose verifying types inside function bodies like we have now aligns with Zig's goals

1607884331
marler8997
but then again, solving this problems helps users of generic code, not the generic code itself, so I take my last point back

1607884394
TheLemonMan
grr, I can't put labels on my gh issues

1607884396
torque
I would argue that the main advantage is making generic type conformance declarative in the function signature

1607884419
torque
and improved error messages, if they happen, is a side benefit

1607884445
marler8997
torque, one question I recall andrewrk asking is why putting type constaints in the signature is better than putting them in the body

1607884465
TheLemonMan
because it serves as documentation?

1607884472
torque
documentation and readability

1607884479
TheLemonMan
anytype tells you jack shit about what the interface is

1607884496
marler8997
if we added support for that in the signature, now we have 2 ways of adding type constraints

1607884508
torque
if a constraint is bound to a name, the user can memoize its definition in their head so that upon encountering that elsewhere, they immediately understand what it means

1607884560
marler8997
torque, yes that's a good observation, but having it at the top of a function body has nearly the same effect

1607884587
torque
I disagree, because the actual code is frequently some chained conditionals

1607884591
TheLemonMan
except for all the times you don't see the function body

1607884594
fengb
Except it’s harder to generate documentation and provide guarantees

1607884600
TheLemonMan
eg. in some documentation

1607884618
marler8997
if the type checking code is inside conditions, then you couldn't put it in the signature anyway

1607884627
marler8997
that's not an equivlent comparison

1607884642
marler8997
yes it makes it harder to generate documentation

1607884674
marler8997
an ideal documentation generator in this case should analyze the function body and add type constraints to the documentation, which would be harder that having then in the signature in the first place

1607884746
marler8997
so do we want to maintain one way to add type constraints, or do we want to make it easier to generate documentation?

1607884785
semarie
TheLemonMan: I opened a PR against your repo regarding #7411

1607884810
torque
I think dogmatically focusing on "one way to do things" is a great way to make bad decisions

1607884815
TheLemonMan
semarie, hah, I've just finished updating the definition

1607884837
marler8997
torque, that's a very interesting proposition, I've thought about it myself and haven't really decided one way or the other

1607884880
marler8997
However, I think having multiple ways to do things at some point becomes problematic.  My intuition tells me there's probably a balance to be had there

1607884922
marler8997
Zig clearly errors on the side of minimalism here, which I think is a better side to error on

1607884933
torque
like, why does the "for" loop exist

1607884971
marler8997
you could make the argument that there is no other equivalent way to semantically write a for loop

1607884993
fengb
andrewrk has talked about removing the for loop

1607884998
marler8997
a while loop with a counter or incrementing pointer isn't really equivalent, since a for loop covers both cases simultaneously

1607885100
marler8997
also keep in mind that "one way to do things" isn't an absolute rule, but more of a goal.  Using it as an argument doesn't necessarily mean it justifies rejecting every proposal

1607885155
marler8997
But it's a good question to ask of any proposal, "without this proposal, what's the current solution? If there is already a way to do this, why are we adding another way?"

1607885323
TheLemonMan
because duck typing sucks?

1607885422
marler8997
TheLemonMan, would like to hear your thoughts on the subject, share more?

1607885468
leeward
I think the word obvious is important and should not be ommitted.

1607885562
TheLemonMan
error messages are terrible (on par with C++ ones?), no documentation in the signature, people often forget to put checks on anytype params

1607885627
leeward
My bar is if I see two competing ways to do a thing and one is obviously superior, then that's the way to do it. If there isn't an obvious winner, it's probably time to think hard about finding a better way.

1607885635
marler8997
yeah I agree on those points

1607885694
andrewrk
same

1607885786
ifreund
has there been a proposal of something close to go's interfaces but comptime only?

1607885793
marler8997
yeah it's one "obvious" way to do things, which is alot weaker than "one way to do things", adding type constraints to the function signature could be seen as more "obvious" than putting then in the function body.  And when the type constrains are more "dynamic", that could be when it's obvious to put them in the body

1607886481
llimllib
If I get `LLVM ERROR: Unsupported library call operation!` when compiling, is that a compiler error, and should I file an issue?

1607886507
llimllib
(in this case, if I change a u128 to u256, the program fails to compile)

1607886522
fengb
That’s a known limitation of LLVM

1607886545
fengb


1607886573
TheLemonMan
we have a wonderful bigint implementation, use that instead

1607886621
llimllib
oh hey yeah just saw std.math.big in there

1607886634
llimllib
thanks!

1607886853
TheLemonMan
semarie, does removing the align() help?

1607886880
semarie
TheLemonMan: I am fighting with it for now

1607886888
TheLemonMan
hah

1607886900
semarie
but I saw there are others errors (redefinition of few SIG_* for example)

1607886986
semarie
and siginfo_t is a struct (not an union)

1607887006
ifreund
I see a tag \o/

1607887041
TheLemonMan
semarie, gah, I fucked up really bad... let me fix that

1607887052
TheLemonMan
but let's first fix hexaflex problem

1607887100
semarie
it is still no enough on my side... the @sizeOf(siginfo_t) is still bad :)

1607887169
TheLemonMan
how big is it? less than 128, more than that?

1607887247
dutchie
ooh tag \o/

1607887370
semarie
TheLemonMan: tested with C: sizeof(siginfo_t) == 136

1607887376
semarie
and with that it is fine

1607887382
semarie
(in the asert)

1607887384
semarie
assert*

1607887497
TheLemonMan
huh, that's weird...

1607887504
TheLemonMan
did you keep the align(..)

1607887510
semarie
yes

1607887528
semarie
I suppose there is extra space for alignement between the 3 c_int and the union

1607887557
semarie
here my file:

1607887584
TheLemonMan
does it work with align(@sizeOf(c_int)) ?

1607887690
semarie
fail with assert(@sizeOf(siginfo_t) == 128) and fail with assert(@sizeOf(siginfo_t) == 136) too

1607887703
semarie
(and C is saying the size is 136)

1607887750
TheLemonMan
alright, what if you remove the align directive completely?

1607887769
semarie
it pass with assert(@sizeOf(siginfo_t) == 136)

1607887773
TheLemonMan
the maximum alignment should be the one of pointer fields

1607887788
TheLemonMan
alright, that's ok... the compiler is smart enough

1607887838
semarie
I had to go. bbl

1607887878
TheLemonMan
bbl and thanks for the help

1607887888
andrewrk
god damn it, clang introduced a regression in 11.0.1 release candidate when building zig on arm-linux

1607887913
TheLemonMan
huehuehue

1607887968
ifreund
:/

1607887994
andrewrk
or... did I just not pass the right floating point abi like a dummy

1607888042
andrewrk
oh good, I'm a dummy

1607888115
ifreund
yay?

1607888260
TheLemonMan
so, you cut the tag before running the tests? that's bold!

1607888332
ifreund
I assume this came up while making tarballs for all the targets we can

1607888364
andrewrk
TheLemonMan, nah but I did cut the tag before making the tarballs

1607888617
dch
so should I wait a wee bit before rolling the freebsd 0.7.1 package then?

1607888623
dch
damn computers

1607888786
ifreund
I'm waiting for the release to appear on ziglang.org to bump the void package

1607889035
andrewrk
dch, the release train is on the tracks, nothing can stop it

1607889091
dch
i say ship it and damn the consequences! (pirate voice)

1607889124
ifreund
the only real reason I'm waiting is cause void pulls the source tarball from ziglang.org instead of github :D

1607889131
ifreund
though I suppose I could change that

1607889303
andrewrk
dch, don't worry, there are no consequences, I just fucked up a command and then got surprised by the error

1607890156
TheLemonMan
lol @ #7433

1607890261
andrewrk
TheLemonMan, I get the distinct impression you are having yourself a drink, eating popcorn, kicking back, and watching me sweat through this release process :D

1607890310
TheLemonMan
haha something like that, yeah

1607890330
TheLemonMan
cutting releases is much harder than writing code :\

1607890363
andrewrk
it's pretty difficult to automate the tarball creation

1607890375
andrewrk
I can make most of them on linux but not freebsd or macos

1607890406
andrewrk
also, automating or not automation is just choosing between the different kinds of things that can go wrong

1607890495
andrewrk
release notes are up if anyone wants to check it for mistakes while I get the rest of the assets in order

1607890525
g-w1
I am still a little confused, why is it any different than just making the automated tarballs nightly?

1607890547
g-w1
do you want to make it on your machine for maximum precision?

1607890593
TheLemonMan
andrewrk, try with % or without any leading symbol

1607890599
andrewrk
on it

1607890601
TheLemonMan
the @ is used for comments in ARM asm

1607890633
TheLemonMan
we never hit this check when building glibc's .s stubs for ARM ??

1607890658
andrewrk
hm yeah we test static musl on arm

1607890686
andrewrk
drone ci is running aarch64-linux-musl tho, seems like that one should be choosing dynamic musl

1607890716
andrewrk
oh we pass -DZIG_STATIC=ON because we use it to create a static zig tarball

1607890734
andrewrk
g-w1, it's just a bunch of little details that add up, combined with only testing it roughly once every 6 months

1607890778
andrewrk
TheLemonMan,

1607890796
TheLemonMan
lowercase?

1607890835
TheLemonMan
good news, I've grepped LLVM source code and % should be ok for every arch

1607890839
andrewrk
nice

1607890867
andrewrk
I think lowercase with % did it

1607890881
TheLemonMan
yeah, it's parsed in MCAttrForString

1607890898
TheLemonMan
and it uses a case-sensitive StringSwitch

1607890919
g-w1
ah this makes sense, you want the release to be perfect, but you don't care as much if nightly is broken

1607890926
TheLemonMan
the same fix should be applied to glibc's generated stubs, no?

1607890934
andrewrk
yeah good point

1607893614
ifreund
why does asm have to be so weird and non-standardized

1607893633
ifreund
I'll PR a fix, guess it's too late for this release though :/

1607893688
ikskuh
ifreund: related to asm on one platform?

1607893700
ikskuh
arm has pretty standardized asm, avr as well

1607893707
ikskuh
x86 has two major dialects

1607893711
ifreund
ikskuh: #7433

1607893776
ikskuh
oh no :(

1607894072
andrewrk
it's not a regression

1607894100
andrewrk
I am curious why drone CI didn't catch it tho

1607894125
ifreund
it is on musl-based arm systems which should hit that as they'll link musl dynamically by default no?

1607894139
ifreund
but yeah idk why drone didn't hit that either

1607894160
andrewrk
hmm I see, yes because the default changed

1607894343
andrewrk
now the big question: leave 0.7.0 on the download page, or replace it with 0.7.1?

1607894381
andrewrk
I'm thinking replace

1607894386
ifreund
Definitely don't kill the links though

1607894457
andrewrk
yep all the links on download/* are immutable

1607894465
andrewrk
tarballs I mean

1607894617
ifreund
isn't the drone aarch64?

1607894636
ifreund
that would explain why it didn't hit it

1607894648
fengb
0.1.0 was dereferenced so there’s precedence :P

1607894673
ifreund
I also had someone confirm they can build and run river on a musl raspberry pi 4 so that's cool

1607895359
andrewrk
linux & windows tarballs are up. download page will get updated at next CI run

1607895376
andrewrk
oh I almost forgot to send the announcement email ;)

1607895449
ikskuh
wonderfl!

1607895652
ifreund
heh Frank made it into the contributors list twice :D

1607896372
ikskuh
btw, andrewrk: some people proposed that we should announce the releases also in the News section on the website

1607896379
ikskuh
it's "big news" after all

1607896382
andrewrk
good point

1607896388
ikskuh
and i think it would be enough to just link to the release notes/download page

1607896775
ikskuh
> This release solves 69 bugs.

1607896781
ikskuh


1607896842
viashimo
I'm trying to add a signal handler to my application, and even without a handler installed SIGUSR1 seems to terminate the application

1607896903
andrewrk
utzig, you threw off my gimmick on lobste.rs

1607896907
viashimo
I'm not sure what the question I'm trying to ask is, but maybe to start: how do I get the application to not terminate when receiving sigusr

1607896916
ifreund
viashimo: block the signal

1607896953
viashimo
ah, add it to sa_mask?

1607897023
ifreund
yes, see the sigprocmask man page

1607897023
viashimo
although, at least for linux, it seems like it should automatically blocked unless SA_NODEFER is specified in the flags

1607897029
viashimo
I'll try it though, thanks ifreund

1607897505
ifreund
and signal(7) says the default action for SIGUSR1 is to terminate the process by the way

1607897532
viashimo
ifreund: ah okay, I hadn't checked the default behaviour. I assumed it would be ignored

1607897694
andrewrk
macos and freebsd tarballs will arrive later today, they are still building

1607898188
cCCCCcccccCCc
So I've not programmed on Windows since the late 90s and at the moment I'm trying to test that a libsoundio-using music synth I'm writing on Linux can compile and run on Windows. I genuinely did search around before asking, but what should I be passing to linkSystemLibrary so that the WASAPI symbols can be resolved? Everything else seems fine.

1607898231
andrewrk
what dll is it?

1607898291
ikskuh
cCCCCcccccCCc: look at

1607898295
ikskuh
it is cross-build possible

1607898301
ikskuh
and builds libsoundio with build.zig

1607898316
cCCCCcccccCCc
Thank you! :D

1607898322
ikskuh
(and also answers your questions related to libs which is uuid and ole32)

1607898582
viashimo
ifreund: got it working, thx

1607898593
ifreund
no problem!

1607898622
ifreund
a lot of systems programming is just finding and reading the right man pages :D

1607899062
utzig
andrewrk :-P  I can delete it if you want

1607899083
ikskuh
cCCCCcccccCCc, did it solve your problem?

1607899153
cCCCCcccccCCc
ikskuh: No, but I'll keep plugging away before I bother again. In my case I've pulled libsoundio into my tree and I'm compiling it with zig directly, so I may be doing something different.

1607899156
cCCCCcccccCCc
Thank you, though.

1607899220
andrewrk
anyone know the codesign CLI args for ad hoc code signing?

1607899252
andrewrk
nvm, looks like `-s -`

1607899291
ikskuh
cCCCCcccccCCc: for windows and linux, all build information should be in build.zig

1607899298
ikskuh
(the one linked above)

1607899304
ikskuh
it builds libsoundio with zig as well

1607899449
andrewrk
utzig, thanks ;)

1607900942
andrewrk
ok there will be no 0.7.2. Onwards to 0.8.0!

1607900957
leeward
\o/

1607901035
leeward
I thought I saw a roadmap somewhere once, but can't find it.

1607901052
ifreund
you think it's realistic to have stage2 working for x86_64 debug builds by then?

1607901105
andrewrk
I don't think we will be passing all behavior tests by then. But I do think it would be realistic to have it work for some projects for this target by then

1607901161
ifreund
yeah that sounds reasonable :D

1607901230
andrewrk
after a month of bug fixes / release work, I think I've earned some heads-down focused time on stage2 :)

1607901352
ifreund
for sure!

1607901377
ikskuh
<andrewrk> ok there will be no 0.7.2. Onwards to 0.8.0!

1607901381
ikskuh
Full throttle!

1607901393
ikskuh
what will be the next steps?

1607901402
ikskuh
more frontend? more backend? more midend? :D

1607901620
ifreund
I think the backend stuff is probably the most contributor friendly currently

1607901701
ifreund
my impression is that the higher level ast -> zir stuff is where the most design work is needed

1607901727
ifreund
in particular comptime

1607901746
ikskuh
to my understanding, the "frontend" translating the AST to ZIR is the "easy" part

1607901751
ikskuh
and comptime is then implemented in ZIR

1607901757
ifreund
maybe I mean zir -> ir then

1607901757
g-w1
I disagree, there is a lot of stuff in zir_sema that is SUPER low hanging (comptime array concat/mult, in general comptime stuff)

1607901792
ifreund
maybe it's cause I'm just a lot more familiar with the backend stuff then :D

1607901830
g-w1
yep, i am completly lost in the weeds of the assembly opcodes, but im pretty comfortable with implimenting the comptime stuff :)

1607902041
ifreund
that's good, cause we need both :D

1607902082
leeward
Is there a function in the standard library that takes an integer type and a number, and left-shifts 1 by the number? I don't see a bitmath module in there.

1607902123
leeward
fn (T: type, n: [however you spell uT]) T { return 1 << n }

1607902140
ifreund
why would we need a function for that? it's one line...

1607902146
leeward
Well, actually, { return @as(T, 1) << n; }

1607902155
leeward
Because of that @as, actually.

1607902203
leeward
I have a lot of constants that live in bit masks, and `@as(u8, 1) << NUMBER` is a lot less clear than `bit(u8, NUMBER)`

1607902592
leeward
My other question, if it's not already in std somewhere, is about how to write that uT bit. I can get the bit width from @bitSizeOf, but how do I get from the number 8 to a u3?

1607902620
leeward
Ah, looks like @Type is what I'm looking for.

1607902874
ifreund
you can use std.meta.Int() too

1607902901
leeward
Ooh, that's a lot prettier.

1607902905
ifreund
(which is just a wrapper for @Type)

1607902968
leeward
heh, @log2 is for floats...silly me

1607903111
ifreund
leeward: oh, std.math.Log2Int()

1607903139
leeward
ifreund: That is way better than @floatToInt(@log2(@intToFloat)))

1607903157
ifreund
most of the things are there, they just aren't easy to find :D

1607903210
leeward
yup

1607903218
leeward
That one could use a doc comment. I think I'll write one.

