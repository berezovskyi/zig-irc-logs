1591402735
Cadey
Xavi92: look up the bring your own OS support

1591427854
pixelherodev
andrewrk: you're brilliant

1591427867
pixelherodev
Context: using disassembler to verify codegen

1591427869
pixelherodev
*Genius*.

1591427907
pixelherodev
Modified my codegen to emit `.org` and `.byte RAW_MACHINE_CODE_HERE` for easy copy+paste debugging

1591434890
scientes
wow, this is ridiculous, and this is even musl

1591440109
ifreund
ugh, i hate gui toolkits. Trying to add support for river to waybar and gtk is being a royal pain

1591440127
ifreund
i mean, mostly cause I don't know what I'm doing, but man this stuff is overcomplex

1591440735
ttmrichter
The history of every GUI toolkit ever: "This other crap is too complex.  I'll make my own GUI toolkit, only with hookers and blow."  "Huh, OK, this one thing I do over and over again is pretty verbose, so I'll add an API call for it."  ← repeat previous a thousand times…per week…per developer…  "This crap is too complex. …"

1591440756
ikskuh
sadly, it's not that easy

1591440765
ikskuh
gui is inherently massivly complex in itself

1591441161
ifreund
yeah, I do get that on some level but it's not gonna stop me from complaining :D

1591443010
scientes
gui also needs to be more MVC

1591443033
scientes
but the real problem is that most apps can't just use stock widgets

1591443036
scientes
they need something special

1591443046
scientes
and GUI programming is just boring

1591443383
ifreund
aaaaaah my code was fine i just fucked up the CSS

1591443419
ifreund
and yeah i also find GUI programming boring as hell, but sometimes I want something done so I need to do it myself

1591443458
ifreund
well, nice waybar now shows river's tags

1591443851
KoljaKube
What's a river?

1591443963
KoljaKube
Hm, if method parameters are const, are dot-functions not able to modify their subject?

1591444073
ifreund
KoljaKube: this is river

1591444084
ifreund
KoljaKube: they are if you pass by non-const pointer

1591444119
ifreund
e.g. fn do_something(self: *@This()) void { self.x += 1; }

1591446585
KoljaKube
ifreund: I thought I had tried that, but I must have done something else wrong. Your solution works :-)

1591449525
iwq
can you read and write to a file at comptime in zig?

1591449604
ikskuh
no, there's no option for syscalls or I/O at comptime

1591449611
ikskuh
but you can get a buffer for a file with @embedFile

1591449784
iwq
interesting, I was thinking if something like F# Type Providers could be possible in Zig

1591449827
iwq
so you could turn a json file into a Zig type

1591449875
ikskuh
that sounds like a code generator job to me

1591449881
ikskuh
just write a program that does this ;)

1591451852
pmwhite
It would be nice if you could test multiple nullable values at once, like `if (a and b) |c, d| { ... }`

1591451867
ikskuh
you can do

1591451872
ikskuh
if(a != null and b != null)

1591451877
ikskuh
then just use a.? and b.?

1591451923
pmwhite
I suppose, but that's more lamer.

1591451973
ikskuh
nah, it's perfectly fine :D

1591452249
pmwhite
Okay, fine.

1591452350
ifreund
if (a) |c| if (b) |d| {    } works

1591453378
pmwhite
Oh, that's not bad. I didn't think of that.

1591456414
KoljaKube
Is there a reason why the documentation does not use @This for dot functions? Should I not use it?

1591456613
ask6155
hey, how do I jump to definition? vim)

1591456952
ikskuh
ask6155: search for "NAME ="

1591456969
ikskuh
when you use zig fmt, you can be safe that "NAME =" is either definition or assignment

1591457025
ifreund
KoljaKube: I personally put a `const Self = @This();` at the top of most of my files and use that

1591457046
KoljaKube
Nice idea

1591457061
ifreund
not original, I stole it from the std :P

1591457090
KoljaKube
ask6155: Putting the lines from

1591457150
ifreund
neat, i never mananged to get ctags working. Have zls now though which is even nicer

1591457187
ask6155
I don't understand what your saying but I'd like to goto the definition of functions. like gd std.debug.warn

1591457263
KoljaKube
Heh, didn't know gd yet

1591457277
ifreund
ask6155: gd works through ctags usually

1591457316
ask6155
so do I just install ctags, run ctags in directory and

1591457319
ask6155
??

1591457342
KoljaKube
Yeah, install universal ctags, run `ctags -R .`

1591457357
KoljaKube
You will need to re-run that occasionally, of course

1591457384
ifreund
alternatively, give zls a try

1591457384
KoljaKube
Also allows jumping to function definitions via C-] across file boundaries and such

1591457408
ifreund
it's still young and has bugs/missing features, but I've found it quite useful

1591457413
leeward
For what it's worth, etags works fine with zig too.

1591457435
leeward
Though I hear emacs isn't cool.

1591457469
KoljaKube
Hm, zls master does not build

1591457478
ifreund
KoljaKube: you need master zig

1591457483
KoljaKube
Oh.

1591457492
ifreund
yeah, such is the cutting edge

1591457525
KoljaKube
Can't build that through Homebrew, and really don't like manually installing tarballs all the time :-/

1591457534
ifreund
leeward: vim isn't cool anymore either, gotta use a real hipster editor like Kakoune these days

1591457562
leeward
ifreund: way too cool for me

1591457562
ifreund
ah yeah mac package managment is kinda nasty

1591457569
KoljaKube
Damn, I need to switch editors again?

1591457589
KoljaKube
Well, it's just that one linker bug iirc

1591457601
KoljaKube
Homebrew can do source builds

1591457613
leeward
KoljaKube: I just have a local Zig repo. Zig is in so much flux that it doesn't make a ton of sense to use a package manager.

1591457637
ifreund
i mean my distro managed to package llvm in a non-broken way

1591457649
ifreund
i think most others did as well

1591457664
leeward
Mine too. I use the distro for Zig's dependencies.

1591457682
leeward
I thought we were talking about Zig from tarballs, not llvm.

1591457708
ifreund
yeah i don't use tarball zig either, though on mac you might need to since homebrew's llvm is causing bugs last I checked

1591457720
leeward
ah

1591457914
ask6155
so is zig written in c++?

1591457922
ifreund
the stage1 compiler is

1591457930
ask6155
and?

1591457944
leeward
And there's work being done on making it self hosted.

1591457945
ifreund
and the stage2 is written in zig?

1591457972
ifreund
there is also an open issue about porting stage1 to C in order to ease bootstrapping

1591457987
ask6155
and the binaries produced run on bare metal?

1591457991
ifreund
yes

1591458003
leeward
Bare metal or any supported OS

1591458019
leeward


1591458033
ask6155
I think this is C better

1591458069
ask6155
would love a zig for C programmers page.

1591458070
leeward
er,

1591458152
leeward
ask6155:

1591458156
ifreund
I mean, if you're like me and already had a good understanding of C jumping in shouldn't be too hard

1591458173
ifreund
skimming the docs leeward linked should be all you need to get started

1591458210
leeward
If you run into problems, there are some super helpful people in here too.

1591458217
leeward
whoops

1591458225
ifreund
heh

1591458723
KoljaKube
The config setup flipped all slashes in my stdlib path, but other than that initial impressions of zls are indeed very shiny

1591458864
ifreund
heh, i think the main dev is on windows

1591458883
KoljaKube
That would explain it

1591458916
ifreund
i started using it before it had a setup tool, so i never had this problem :D

1591458924
KoljaKube
Before I need to go, is there a way to create type-safe aliases of simple types?

1591458926
KoljaKube
:D

1591458952
KoljaKube
Use case is having radians and degrees not being accidentally interchangeable

1591458966
scientes
ughh, c++ has way too many features

1591459029
leeward
KoljaKube: There may be a better way, but structs?

1591459052
leeward
That's not exactly what you want.

1591459085
leeward
Actually, there might be something with unions there.

1591459104
leeward
They put restrictions on how they're interpreted.

1591459298
KoljaKube
Sure, structs would work, but I was hoping to prevent having to access a member all the time

1591459349
leeward
Yeah, I know. Unfortunately, type aliasing comes with some implicit casting.

1591459370
leeward
`const special = u32` works, but any u32 is a special.

1591459405
KoljaKube
If I understand correctly unions need comptime knowledge of the field, and tagged unions add a field containing the enum value, right?

1591459513
KoljaKube
leeward: Not only that, but `const boring = u32;` and every boring is special, which is what I want to avoid

1591459566
leeward
right

1591459702
KoljaKube
I guess structs it is, then. Nothing good has ever happened by throwing raw floats around ;-)

1591459746
leeward
If someone more informed were around, they'd probably point you to a proposal for a feature or something.

1591459806
KoljaKube
If someone more informed were to read this, please point, I will read the logs tomorrow ;-)

1591459869
KoljaKube
But now it's time to cook, thank you all for the helpful input!

1591459952
ifreund
KoljaKube: here's the proposal

1591459986
KoljaKube
Thanks!

1591460029
ifreund
as mentioned in the comments, you could use non-exhaustive enums to do this

1591460050
ifreund
I haven't tried it personally so I can't really speak to the ergonomics of doing that

1591460108
leeward
Ooh, I like the proposal.

1591460134
leeward
Using enums to make types like this gives me the squicks.

1591460256
ifreund
yeah same lol

1591460558
leeward
Yeah, enums aren't a solution and `const Vec2 = [2]f32;` could just as easily be a struct.

1591461333
fengb
Wrapper structs actually feel less kludgy than enums

1591461710
demizer
Hey all. Does zig have a module level init() that runs on import like Go?

1591461804
ifreund
not too familiar with go, but I dont think so. Remember that files are sructs i zig

1591461807
ifreund
*in zig

1591461851
demizer
right, but no way I can find to run some setup code automatically in a struct

1591461869
ifreund
how would that work?

1591461917
ifreund
like `const foo = struct{ .. };` implicitly calls a magic function?

1591461921
demizer
for example, a logging library I use needs some setup, but when I am running "zig test blah.zig" and using this library I would have to call log.init() in the test while debugging.

1591461945
demizer
I don't believe a struct should initialize itself

1591461948
demizer
that's the problem

1591461966
fengb
No, there’s no auto init. That’d be considered hidden control flow

1591461978
ifreund
ok, one way you can do this is create a function that you call to import your type

1591461996
demizer
oh that's interesting

1591461998
ifreund
this function would return the type you want to import and before doing so preform your init thing

1591462006
demizer
i'll try that, thank you!

1591462013
ifreund
no problem

1591462236
ifreund
this doesn't work i think unless the thing you want to do can be done at comptime

1591465655
donpdonp_
if (column.main.inError) "ERROR" else "" => expected type '*const [5:0]u8', found '*const [0:0]u8

1591465680
donpdonp_
i get that the size is part of the type and both arms of the if need to be the same type, i just dont know what to do instead.

1591465715
pixelherodev
donpdonp_: @as([]const u8) might help

1591465726
pixelherodev
If you treat the two sides as slices instead of arrays it should work

1591465855
donpdonp_
pixelherodev: that makes the compiler happy - thx!

1591466031
pixelherodev
No problem :)

1591469223
leeward
pixelherodev: I don't know if I ever mentioned it, but you were completely right about u16 doing what I wanted from a uint_least16_t or uint_fast16_t perspective. I was mixing optimizations into my thinking incorrectly.

1591472234
pixelherodev
leeward: :)

1591472708
ikskuh
pixelherodev: wanna try something?

1591473917
leeward
Anyone know the magic incantation to get zig fmt to ignore a block? I can't seem to find it, but I have distinct memories of seeing it somewhere.

1591473927
leeward
Maybe that's rust fmt or go fmt.

1591474122
alexnask
I think its // zig fmt off

1591474135
alexnask
let me find some example

1591474190
alexnask
/ zig fmt: off

1591474233
alexnask
e.g.

1591474289
leeward
Hmm, it doesn't seem to respect it.

1591474349
alexnask
Seems to work with a simple example for me

1591474451
alexnask
Can you share some snippet where it isnt respected? (so I can repro)

1591474582
leeward
Yeah, I'm trying to make a smaller example and it's working correctly.

1591474645
leeward
ahah

1591474669
leeward
When I put the `zig fmt: off` block inside the function, it breaks. When it's outside the function, everything's happy.

1591474710
leeward
Oh, it has to be at the top level.

1591474820
alexnask
Ah, this is definitely surprising I would expect it to work anywhere as well

1591474863
leeward
Ok, I have an example.

1591474885
leeward


1591474945
leeward
It certainly violates the principle of least surprise. I don't know if there's a spec anywhere though, so can't say it's a bug.

1591474992
alexnask
Ι τηινκ ιτ δεσερωεσ α γιτηθβ ισσθε

1591474997
alexnask
Oh shit sry

1591475001
alexnask
I think it deserves a github issue

1591475011
leeward
I was almost there.

1591475022
leeward
Stuck on deserves :P

1591475029
alexnask
:D

1591475030
leeward
Yeah, I'll open one.

1591475324
leeward
bugged

1591480673
scientes
daurnimator, ?

