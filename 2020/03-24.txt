1585011484
vegecode
Hello everyone, question on a good way to do something I do in C a lot.

1585011565
vegecode
I often build tables and index into them using enums. I use designated initializers to place the correct item at the correct index.

1585011611
vegecode
With this method it is very easy to do code inspections and makes the table resilient to future code changes as the position of an item in the array will automatically be corrected.

1585011652
vegecode
Is it possible to do something like this in Zig? I looked through the documentation at the array sections but didn't see anything like designated initializers.

1585011669
vegecode
Of course you can use functions to initialize an array.

1585011675
vegecode
My example array is:

1585011749
vegecode
uint8_t the_table[MAX_ENUM_VAL+1] = {[FIRST_ENUM] = 8432, [SECOND_ENUM] = 96123, [MAX_ENUM_VAL] = 0};

1585011812
vegecode
This may be an XY type of question, to be sure.

1585011934
vegecode
The real thing I'm trying to replace is something that uses the preprocessor...

1585012036
andrewrk
you can do this with `const the_table = block: { ...; break :block value; };`

1585012039
vegecode
Ahh, I actually have to go unfortunately and can't stick around to hear any responses. I will check the logs though! Thanks in advance anyone for the help, and thank you Andrew and LemonBoy in particular for being so responsive to my other issues I have filed! LemonBoy is the man (boy?)!

1585012177
vegecode
I'm not understanding what I'm looking at there, particularly the implied part behind the ellipses. Maybe this will be enough of a hint for me to figure it out though. Thanks!

1585013986
traviss
vegecode i believe zig best practices would say that this is misusing enums. however it is very common and powerful in c for the reasons you stated. here are some related ideas. maybe this gets you close to what you want.

1585014236
traviss
or without the intermediate struct

1585014411
andrewrk
idk why you would say it's misusing enums

1585014444
andrewrk
misusing enums is using them for flags that are meant to be OR'd together

1585014597
traviss
oic nevermind then. my mistake.

1585014682
traviss
i think this last example maybe closer to your example:

1585014703
traviss
with an array rather than tuples

1585016700
Bekwnn
haven't really done much besides look around a bit at other people's code as far as zig metaprogramming goes. Was wondering if anyone can think of a good way to make this automatically populate from the one colorsRGB8 version:

1585016746
Bekwnn
ie if I add an 'Orange' color to RGB8, it would automatically show up without me needing to edit RGBA, RGBA8, or RGB

1585017390
traviss
Bekwnn, maybe store all those colors under `const AllColors = @import("Colors.zig").AllColors` in an struct as consts.

1585017456
traviss
Then you can `inline for (std.meta.declarations(AllColors) |color, i| {...}` and create the new colors.

1585017537
traviss
but this way you'd lost the ability to declare the individual identifiers and need to create an array to store them

1585017568
fengb
Can you upload the text into a pastebin?

1585017670
Bekwnn


1585017682
Bekwnn
that would be more of a nice-to-have I guess

1585017849
fengb
I’d personally just define one set somewhere and probably have methods to transform them

1585017930
fengb
Feels like comptime is overkill

1585017969
fengb
LLVM would in-line any operations on constants anyway if you’re worried about performance

1585019533
BaroqueLarouche
I’ll post my Colors definition it should give you some inspiration:

1585027078
adamkowalski
is there any documentation about the debug allcoator

1585038764
squeek502
andrewrk, you might want to re-test zig cc with luajit, i noticed in your stream VOD that for the successful compilation you forgot to specify CC=$CC (you just ran make by itself, which used gcc and ignored $CC); not sure if itd fail with zig cc, but worth re-testing to make sure

1585038885
squeek502
direct link to the bare `make` in the vod:

1585039794
TheLemonMan
thank you for the kind words vegecode, a smooth zig on bare metal experience is my goal :)

1585046719
daurnimator
mq32: I just saw your question above: that is what I've been trying to get at with my idea of "stackable event loops"

1585046784
mq32
hey daurnimator

1585046788
mq32
good morning everybody :D

1585048157
Snektron
morning mq32

1585049434
FireFox317
afternoon, peeps

1585049480
ifreund
o7

1585050698
redj
problem linking zig here. compiled llvm and clang from source. zig0 won't link. probably because I don't know where CLANG_LIBRARIES and LLD_LIBRARIES should point? what am I doing wrong? --

1585050823
ifreund
redj: all I had to do was `CMAKE ..`, did you try that?

1585050965
redj
ifreund: I did, and then it complained about CLANG_INCLUDE_DIRS and LLD_INCLUDE_DIRS not being set... set those successfully... and then it complained about CLANG_LIBRARIES and LLD_LIBRARIES

1585051252
redj
ah, I used -DCMAKE_INSTALL_PREFIX=$HOME/local -DCMAKE_PREFIX_PATH=$HOME/local for compiling llvm 10... using the same for compiling zig allows it to find the include/libs...

1585051273
redj
now, it seems I'm missing lld... it said on the wiki to compile llvm and clang but no mention of lld

1585051298
redj
wiki I'm refering to:

1585051323
redj
lol, I guess it says in the url

1585051331
redj
just not in the posix section

1585051372
redj
it even says to add the CMAKE_PREFIX_PATH

1585051388
redj
just missing the (same) commands for lld

1585051749
redj
Built target zig0 :)

1585051812
ifreund
all I did was install clang and llvm with pacman and things worked flawlessly

1585051829
ifreund
glad you got it working

1585054111
Snektron
I usually cheat by looking how its built in the docker files

1585054118
Snektron


1585055317
redj
normal build of zig is working and installs properly but I tried to build a fully static zig and it failed. did I do something wrong? --

1585055318
redj
(94f7c5600 2020-03-22 2020-03-22 <Andrew Kelley> (HEAD -> llvm10, up/llvm10) riscv: add -mrelax arg for C to work around upstream issue)

1585055356
redj
zig build crashed :(

1585058329
andrewrk
squeek502, thanks for the heads up! I did end up trying it again later and fixing a couple more problems

1585058348
andrewrk
master branch now requires llvm 10

1585058514
andrewrk
TheLemonMan, do you think rebasing #4795 on master (with llvm 10) will solve the windows test failure?

1585058531
andrewrk
it looks like that f128 issue that is now fixed

1585058642
mq32
andrewrk: you said something about a blog post? is it released yet?

1585058690
andrewrk
mq32, give it a couple hours for the CI to make available a master branch build based on llvm 10

1585058711
mq32
okay! i'm just curious

1585058727
andrewrk
yeah I'm going to try to coincide the blog post so that it gets in the tech news right next to the llvm 10 announcement :)

1585058730
ifreund
> released 18 minutes ago <  pretty on top of things lol

1585058749
andrewrk
yeah well now I get to close like 8 bugs \o/

1585058767
mq32
andrewrk: smart!

1585058896
ifreund
hah, that's the first time i've won the race to flag the arch  package as out of date

1585061564
andrewrk
now I'm just waiting for the CI to make an llvm10-based master branch build on the download page, and for llvm 10 release announcement to make its way into tech news sites, then I'll publish the blog post

1585061582
andrewrk
it could potentially be an exciting day today for the zig community

1585061801
ifreund
can't wait to read the blog post, I think i'm not quite in the loop as to what llvm 10 means for zig

1585061842
andrewrk
not much, really. just a few bug fixes. I'm capitalizing on llvm/clang's popularity to get some spotlight on the zig project

1585061932
ifreund
smart move, zig definitely deserves more attention

1585061981
fengb
Oh, llvm10 has been released?

1585061998
TheLemonMan
andrewrk, let me check

1585062006
scientes
fengb, soon

1585062038
ifreund
i mean, it was tagged an hour ago

1585062057
fengb
mmm

1585062075
scientes
yes, I have the release e-mail too

1585062173
andrewrk
you do? because it's not on

1585062218
scientes
oh, its the github e-mail

1585062220
scientes
not the mailing list

1585062231
scientes
cause I have commit access

1585062343
andrewrk
llvm 10 tagged today and it's already 6641 commits behind master

1585062365
scientes
it didn't branch today

1585062373
andrewrk
yeah

1585062377
andrewrk
just sayin

1585062388
scientes
you are in #llvm on oftc

1585062403
scientes
you see all the action

1585062407
andrewrk
yep

1585062479
companion_cube
6.6k commits… 😲

1585062580
TheLemonMan
and we're sitting at a measly 2k commits :(

1585062599
mq32
TheLemonMan: i think the LLVM project is a bit bigger than Zig atm :D

1585062614
companion_cube
which is a good thing

1585062622
companion_cube
that Zig isn't a behemoth

1585062650
scientes
its kinda like Linux too---where the development is on enterprise network file systems

1585062725
TheLemonMan
wonderful, today apt.llvm.org is awfully slow for me

1585062996
fengb
Throw more bodies at the problem!

1585063049
andrewrk
TheLemonMan, if you need the same workaround as the CI, here it is:

1585063080
andrewrk
maybe they fixed it though. Sylvestre responded to my llvm-dev mail pointing out the problem

1585063096
TheLemonMan
I hope they fix that before the point release

1585063129
andrewrk
it's fixable without a release - it's only a problem with the apt package

1585063186
TheLemonMan
oh well, it's still waiting to be fixed

1585063366
andrewrk
I've essentially given up on depending on llvm as a package for development purposes. spent the entire weekend compiling llvm for every target

1585063383
andrewrk
if you want something done right you gotta do it yourself

1585063641
TheLemonMan
that's quite disrespectful, package mantainers do a lot of (hard) work

1585063769
andrewrk
you're right

1585063786
andrewrk
that was disrespectful and I apologise

1585063811
TheLemonMan
well fuck everything, my whole internet connection is slow as fuck today

1585063824
TheLemonMan
punching the router may fix that

1585065040
andrewrk
llvm release day is an unfortunate day for slow internet connections

1585065437
andrewrk
damn we beat the release announcement email

1585067804
FireFox317
so andrewrk, it will be clear why you added the __clear_cache compiler-rt when you publish your blog?

1585068009
andrewrk
FireFox317, probably not, since adding that actually allowed me to delete a section from the blog post :)

1585068037
andrewrk
__clear_cache is part of compiler-rt. it would have been added before zig 1.0 anyway

1585068308
andrewrk
__clear_cache was the only addition needed to compiler-rt to successfully cross compile LuaJIT for aarch64-linux-gnu

1585068315
companion_cube
reading your tweets, andrewrk: in deflate, maybe there's len + nlen just for redundancy reasons?

1585068335
FireFox317
andrewrk, hahah ahh nice :)

1585068378
BaroqueLarouche
Checking that the block is ok for a non-compressed block

1585068492
BaroqueLarouche


1585068560
companion_cube
this LiteralLengthTable could be comptime generated, couldn't it? :

1585068562
companion_cube
:p

1585068581
companion_cube
waiiit no

1585068588
BaroqueLarouche
it is

1585068658
BaroqueLarouche
there's no rule for that table

1585068667
BaroqueLarouche
there's no rule for that table

1585068674
BaroqueLarouche
but for the fixed huffman coding I do generate the table in comptime

1585068679
companion_cube
yeah at first I thought it was a table of primes, my bad

1585068689
andrewrk
companion_cube, yeah, old school compression stuff often had these. I think it was a mistake to put integrity checks in-bound. that's a job for an out-of-bound system. but people didn't understand this back then, I guess

1585068703
BaroqueLarouche
btw the RFC for DEFLATE is so useless, that article about Zip file was so helpful

1585068729
andrewrk
the one by Hans Wennborg right? that's the release manager for llvm btw

1585068764
BaroqueLarouche
Yup

1585068776
andrewrk
yeah that article is fantastic. it took me a week to read it

1585068790
andrewrk


1585068811
andrewrk
this content is excellent

1585068826
scientes
huffman?

1585068832
scientes
JPEG uses huffman too

1585068843
scientes
zstd is more interesting

1585068857
fengb
You've implemented deflate? Upstream that! :)

1585068866
Snektron
thats a long post

1585068881
BaroqueLarouche
@fengb: that’s the plan!

1585068889
scientes
but in terms of pre-zstd there is also 7zip/lzma/xz

1585068905
BaroqueLarouche
Waiting to have the encoder to submit it in the std lib

1585068905
fengb
👍

1585068947
BaroqueLarouche
I hope JPEG will be fun to implement

1585068959
scientes
what do we gain by implementing these things in zig?

1585068970
TheLemonMan
good timing, do you also have an inflate implementation?

1585068971
scientes
it seems to me it would just increase maintinance

1585068974
fengb
andrewrk: is it possible to import variables in wasm? I couldn't figure out how to get lld to ignore extern variables

1585068978
scientes
over just using the C

1585069009
BaroqueLarouche
TheLemonMan: only inflate for now

1585069027
TheLemonMan
scientes, dogfooding

1585069029
scientes
something that would be cooler would be to implement these things with a RPC over shared memory

1585069049
scientes
so as to protect for security problems

1585069055
TheLemonMan
BaroqueLarouche, cool, I was about to port Zlib's puff.c to Zig

1585069086
companion_cube
scientes: or in a sandbox, like wasm ;)

1585069104
scientes
more like seccomp mode 1

1585069126
scientes
wasm is just slow-box

1585069136
scientes
not a sandbox but a slow-as-sand-box

1585069159
companion_cube
I didn't know seccomp, it looks like capabilities?

1585069172
scientes
companion_cube, it limits system calls

1585069187
scientes
so you set it up, and then you turn off system calls except for futex()

1585069452
andrewrk
fengb, I'd be happy to take a look at this with you if you can help me understand the situation

1585069541
andrewrk
scientes, I'm pretty sure we'll want inflate at least in the std lib because of package manager. the current plan is that the package manager's base set of "download plugins" will depend only on std lib

1585069553
scientes
well yeah I get inflate

1585069571
scientes
but more difficult stuff like libjpeg, I just don't see why

1585069580
andrewrk
yeah, a lot of stuff from std lib will get deleted before 1.0, the only purpose is dogfooding as TheLemonMan said

1585069589
scientes
ah ok

1585069598
andrewrk
"deleted" meaning, anyone is free of course to take over maintenance and make it a third party package

1585069723
BaroqueLarouche
yeah image support doesn't belong in std

1585069743
scientes
BaroqueLarouche, well i'm talking about the algorithmic complexity

1585070003
TheLemonMan
a-we-some, LLVM10 doesn't fix the other vector-related problems in #4737

1585070241
andrewrk
damn

1585070729
fengb


1585070743
fengb
andrewrk: ^ trying to import a global value

1585071177
andrewrk
let me fiddle with it

1585071251
fengb
Also I just realized we can't import memory like this. Probably need to expose lld's `--import-memory`

1585071599
andrewrk
for what it's worth, wasm is generally still experimental, meaning if you submit pull requests and tell me that it's an improvement, I'll believe you and merge it without vetting it too much

1585071675
fengb
I think we need a few more users to test these things out :P

1585072058
companion_cube
scientes: but seccomp is linux only though, isn't it?

1585072120
companion_cube
the stdlib should at least have json and deflate, yeah, otherwise how do you do the package manager? :D

1585072673
andrewrk
PSA: if you want your zig project listed in the "Active Open-Source Projects Using Zig" section of the 0.6.0 release notes, make sure

1585072802
ifreund
hmm, I hope I'll have something worth listing by then

1585072842
mq32
really looking forward on the thing with libc++, then i can remove more dependencies in my pet language

1585072892
shakesoda
there's a good chance I'll have my tinyfx wrapper public by then

1585072904
mq32
nice!

1585072937
shakesoda
for all, i dunno, one (including myself) people interested in gl4+zig lol

1585072938
TheLemonMan
many vector-related errors are linked to Zig generating weird-ass layouts (eg. v4xi5)

1585072988
mq32
shakesoda: tinyfx is an OpenGL 4 loader?

1585073052
shakesoda
no, it's a declarative style mid-level rendering library, so you can focus on the graphics techniques you are implementing instead of the dark arts needed to make opengl do the work for you

1585073100
mq32
ah

1585073102
shakesoda
similar idea to bgfx and very similar api, but much smaller in scope

1585073107
mq32
then i'm a dark magician

1585073115
mq32
really dark magic

1585073129
mq32
i have a nice terrain demo with a lot of grass

1585073135
shakesoda
I won't claim it is thoroughly battle tested, but my games have been using it for a while and it really makes wrangling the GPU a lot easier

1585073140
mq32
and a friend asked me: "how do you store the vertex data" :D

1585073150
shakesoda
mq32: did you answer "I don't"?

1585073156
mq32
yep ^^

1585073161
shakesoda
that's the spirit

1585073169
mq32
why

1585073179
mq32
the thing runs blazingly fast on my iGPU

1585073179
TheLemonMan
"I download if from the cloud every frame"

1585073184
TheLemonMan
that's the right answer

1585073188
shakesoda
we're going to get along well, it seems

1585073190
mq32
can you link the source, shakesoda? would still take a look

1585073204
shakesoda


1585073249
shakesoda
there's a lot of ways to improve it, and in the future I want to make a vulkan (or webgpu) port

1585073328
shakesoda
the zig wrapper is largely done and i've been using it in my sandbox, makes the c api (which is usually decent feeling) feel very clunky

1585073421
mq32


1585073426
mq32
btw, that's my terrain stuff :D

1585073498
shakesoda
you're blowing way too much of your frame budget on that grass ;)

1585073502
mq32
i know :D

1585073504
shakesoda
i've got some of these, what approach did you end up taking?

1585073514
shakesoda
these kinds of demos are really fun

1585073564
mq32


1585073583
mq32
approach: "no LOD, tons of geometry shader code, fancy terrain sampling"

1585073591
companion_cube
a remake of total annihiliation in zig? 🙃

1585073607
companion_cube
oh, a imgui overlay

1585073627
BaroqueLarouche
mq32:  Nice!

1585073642
shakesoda
GS, the frame time burner

1585073646
mq32
companion_cube: nah the screenshots are C++

1585073657
companion_cube
arf

1585073658
mq32
shakesoda: yep, but using compute+buffers would be slower on iGPUs

1585073661
companion_cube
it looks good though

1585073664
shakesoda
mq32: it's not though

1585073667
companion_cube
I'd love to see a minecraft remake in Zig

1585073669
shakesoda
source: did it

1585073677
shakesoda
although, ymmv

1585073697
shakesoda
my general experience with igpus is that all my compute techniques seem to run unnaturally fast compared to my expectations

1585073712
shakesoda
GS does happen to perform well on intel though

1585073759
shakesoda


1585073770
fengb
If I add wazm, I might be motivated to make it do something

1585073783
shakesoda
the grass scattering was completely on the cpu in lua(jit), rendered with love, heh

1585073786
fengb
Or be a big disappointment to the community :P

1585073798
shakesoda
for how amazingly dumb it was, it worked really well

1585073815
mq32
shakesoda: yeah, i was trying to do a full-shader-approach

1585073830
mq32
the cool thing is: the grass is always scattered around the camera

1585073833
mq32
fixed-position though

1585073835
shakesoda
mq32: i just wanted to mock my stupid idea for grass in the least appropriate tool possible

1585073842
mq32
heh :D

1585073849
mq32
how do you render it?

1585073868
shakesoda
a billion draw calls, give or take

1585073873
mq32
ah

1585073879
mq32
the scene you see above is 4

1585073885
shakesoda
later I moved it to all instancing

1585073891
mq32
or actually, 3 draw calls

1585073909
shakesoda
so it went from something like 10000 draw calls of the clumps to one

1585073950
mq32
:)

1585073961
shakesoda
it's on my near term weekend plans to do a new impl of grass that's actually decent by generating the draws/instance data in compute

1585073966
mq32
i watched a talk on nvidia mesh shaders these days

1585073974
mq32
this is the awesome new tech i want to have on my iGPU :D

1585073985
shakesoda
after that screenshot all the way back in 2017 i didn't actually need grass for a long time

1585073992
mq32
i have to learn how to use compute actually :D

1585073998
shakesoda
yes, do!

1585074008
shakesoda
compute is

1585074013
mq32
so, properly use compute for rendering, not for computing :D

1585074064
shakesoda
I use it for all kinds of things, but my favorites are the realtime spherical harmonics updates from the cubemap probes and the skeletal animation

1585074082
shakesoda
the latter because doing it in compute means i was able to remove all knowledge that it's even happening from the rest of the pipeline

1585074097
mq32
that sounds nice

1585074106
shakesoda
big simplification, deduplicated the work when things happened in several passes, and just plain faster and easier to understand

1585074120
mq32
i have an engine protoype lying around that is modelled after Gamestudio A8/Acknex A8

1585074127
shakesoda
it cost some memory, but not in practice a meaningful amount

1585074134
mq32
provides a lot of modern APIs through a simple C API

1585074146
mq32
and i learned a lot about how to actually code an engine :D

1585074164
mq32
afk

1585074257
shakesoda
oh, if you're getting into compute, definitely look into doing tiled lighting with it (i.e. tiled/clustered forward or deferred rendering - whichever is appropriate for you)

1585074276
shakesoda
tiled forward rendering is a

1585074377
ifreund
andrewrk: by the way, it looks like I do need c pointers here

1585074382
ifreund
would that be considered a bug?

1585074477
ifreund
for reference i'm assigning the function to .notify of this struct

1585074487
TheLemonMan
just make the first fn argument nullable

1585074570
ifreund
ok yeah that works, idk what I expected

1585074592
ifreund
I guess I can't tell the compiler that the C library guarentees that it won't be null

1585074641
TheLemonMan
yeah, translate-c cannot (yet) read the documentation :P

1585074806
andrewrk
but there is an idea for that!

1585074978
ifreund
neat, it seems there's alreay an issue for everything :D

1585075021
andrewrk
ideas are cheap

1585075580
companion_cube


1585075592
companion_cube
far too overkill for c-translate, but anyway

1585077941
scientes
companion_cube, doesn't clang do many of the same things?

1585077944
scientes
(which we use)

1585078191
companion_cube
idk

1585078206
companion_cube
it certainly doesn't do formal proofs, but I don't know if it has its own annotation language

1585078250
scientes
it also is good enough for a compiler

1585078254
scientes
that people use

1585078295
companion_cube
I mean, a compiler for a cursed language :)

1585078315
scientes
what is better than C?

1585078335
companion_cube
zig, so far

1585078364
companion_cube
(and, to my taste, almost every existing language)

1585078398
scientes
even C++?

1585078433
scientes
it gives you freedom

1585078453
andrewrk
assembler gives you even more

1585078456
scientes
which every other language takes away for some silly reason or another

1585078467
scientes
but you can just put inline assembly into C

1585078472
scientes
including asm goto now

1585078477
companion_cube
clearly i'd prefer C++ to C

1585078484
scientes
which lets you patch in a goto into your running code

1585078505
companion_cube
I mean, I don't need that, but if you do I get that C is your jam

1585078549
scientes
C is really great as a easy-mode assembler, and I've even used it that way

1585078560
scientes
as then you don't have to assign registers

1585078566
companion_cube
I mean yeah, if your choice is between C and asm, sure

1585078567
scientes
you get to use the register allocator

1585078574
companion_cube
if it's between high level languages and C…

1585078603
scientes
yeah, if you are just putting together a web site, C is horrible

1585078627
scientes
but if you have some idea for an algorithm, then often I'll try some language only to realize it is IMPOSSIBLE

1585078647
scientes
I mean, I can do the algorithm, but not get the assembly to look anything like it should

1585078681
scientes
(that said, there are a few cases of this in C)

1585078709
companion_cube
assuming your algorithm is small enough that you care to look at its full asm, yeah

1585078710
scientes
mostly having to do with function pointers, a problem that zig does not have

1585078729
scientes
companion_cube, even without looking at it---like some data structures you can't do

1585078737
scientes
like @fieldParentPtr doesn't work in many languages

1585078746
companion_cube
right, yeah

1585078755
companion_cube
and some other structures are terrible to write in C 🤷

1585078774
scientes
(although @fieldParentPtr() remains to have some performance issues and foot-gun problems in zig)

1585078850
scientes
companion_cube, I've only seen virtual machines done in C

1585078858
scientes
although those are always hard to read

1585079007
companion_cube
yeah, I'd say it's among the acceptable use cases for C :)

1585080874
marijnfs1
what do i need to compile from llvm 10?

1585080879
marijnfs1
clang;clang-tools-extra?

1585080919
andrewrk
it's documented in the readme

1585080951
andrewrk
and the wiki

1585080999
BaroqueLarouche
lld

1585081086
marijnfs1
yeah the readme points to the wiki

1585081094
marijnfs1
but it doesn't use the llvm-project repo right

1585081102
marijnfs1
lld got it

1585081169
scientes
including the lld development headers

1585082034
andrewrk


1585082156
FireFox317
🎉

1585082164
mq32
🎉🎉

1585082179
FireFox317
That's a party popper emoji ^^

1585082327
BaroqueLarouche
🎤⬇

1585082411
andrewrk
it would be sweet if this made it onto hacker news and reddit

1585082532
andrewrk
now I just have to figure out wtf is going on with drone CI before I get caught for saying it works with musl and the download tarball isn't caught up to master

1585082579
jwh
heh, in the process of trying to ditch drone

1585082723
andrewrk
it's not drone's fault, I was able to reproduce the problem

1585082803
andrewrk
nice, it's on lobste.rs

1585083097
fengb
andrewrk: where do you learn to write well?

1585083463
andrewrk
aww thanks for the compliment

1585084052
companion_cube
no one put it on HN yet?

1585084529
jaredmm
If I have a cimport file that needs to reference a compiler_rt builtin...how would I do that?

1585084775
mq32
andrewrk: > print(3 + 4)

1585084778
mq32
i feel honoured :D

1585084894
andrewrk
hahah yes thanks for that

1585084904
andrewrk
damn I forgot to give shout outs to people who helped me when I was streaming

1585084921
squeek502
return 3 + 4 would have also worked btw

1585084922
jaredmm
Generate an extern function and that's all?

1585085122
andrewrk
good to know

1585085280
andrewrk
alright, it's hit critical mass. enjoy the media day, everyone :)

1585085305
companion_cube
is 0.6 for today then?

1585085399
andrewrk
no that's april 13

1585085425
andrewrk
I'm not sure I understand your question

1585086013
companion_cube
heh I thought you were trying to have 0.6 coincide with llvm 10, sorry

1585086038
andrewrk
we need a couple weeks to fix bugs and work out the kinks

1585086048
andrewrk
it would be a little risky to release immediately

1585086058
via
man, you're at the top of hn, congrats

1585086238
andrewrk
thanks to zig contributors! this work is just a little layer, revealing to the world what we've been slowly building up over time

1585086305
Cadey
andrewrk: shitty idea: could you use `zig cc` as a drop-in replacement for the system compiler on something like Gentoo or NixOS?

1585086483
ifreund
can llvm compile the linux kernel yet?

1585086544
ifreund
well i'm pretty sure it has, but idk if it's as painless as doing it with gcc

1585086663
andrewrk
Cadey, yes

1585086691
andrewrk
I mean there are some follow-up issues to solve first, but the idea is fundamentally sound

1585086708
andrewrk
the nixos clang package requires nix-specific patches, however zig cc does not need such patches on nixos

1585086709
daurnimator
ooo, I open HN this morning and I see zig :)

1585086716
andrewrk
media day today! enjoy

1585086725
fengb
Good morning!

1585086730
daurnimator
also I see we updated to llvm 10..... I need to figure out how to actually get that working :(

1585086747
daurnimator
I've never managed to compile my own LLVM and get it working with zig

1585086818
FireFox317
daurnimator, for me that has been a really easy task

1585086856
FireFox317
on arch linux btw

1585086890
fengb
How do you know if someone is running Arch? 🙃

1585086987
daurnimator
FireFox317: cool; got instructions?

1585087372
shakesoda
fengb: easy, they will tell you

1585087372
shakesoda
fengb: easy, they will tell you

1585087409
FireFox317
daurnimator, well basically cloning `llvm-project` checking out release/10.x then building llvm, clang and lld by going into the dirs, making a build dir, from the dir run `cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/dev/zig/local -DCMAKE_PREFIX_PATH=$HOME/dev/zig/local -DCMAKE_BUILD_TYPE=Release` and `make install -j(nproc)`. To build llvm you also need `-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="AVR" -DLLVM_ENABLE_LIBXML2=OFF`. When all that is

1585087409
FireFox317
build (takes some time), you can build zig using `cmake .. -DCMAKE_PREFIX_PATH=$HOME/dev/zig/local`

1585087439
FireFox317
maybe a pastebin would have been better here, but really just following `

1585087623
mq32
andrewrk: blog entry is well written!

1585087694
ifreund
alright, I think I've done my job evangelizing in the HN comments

1585087695
fengb
The Zig post now has more HN points than LLVM

1585087764
andrewrk
thanks mq32

1585087782
andrewrk
ifreund, yeah be careful doing that too much. your comments are nice tho

1585087793
andrewrk
we don't want to be accused of being an evangelism strike force

1585087812
mq32
hey that article is top-item on hackernews :D

1585087912
ifreund
andrewrk: It's certainly a fine line to walk, I'll make sure to keep it in check, was mostly joking about the evangelism part

1585088010
frmdstryr


1585088271
marijnfs_
lets write some reddit bots in zig

1585088303
mikdusan
daurnimator: script for archlinux to build llvm10:

1585088309
mikdusan
needs git/cmake/ninja-build installed

1585088355
mikdusan
adjust vars for your preferred locations: __PROJECT, __LLVM_INSTALL_ROOT, __LLVM_PRODUCT

1585088519
FireFox317
mikdusan, ha thanks, thats why easier than my explanation xd

1585091096
pmwhite
I may be wrong, but I had the impression eventual independence from LLVM was desirable, but it looks like with all the `zig cc` stuff, that's not true. How do any eventual plans with zasm fit in? Maybe that's just another option that could be used (if zasm ends up being faster, for example).

1585091125
Snektron
hm

1585091424
mq32
pmwhite, to my understanding, zig cc is required for bootstrapping the compiler

1585091488
mq32
but the long-term plan is to get rid of LLVM as a compiler infrastructure and make the code generation self-hosted as well

1585091907
fengb
LLVM will not be a part of the language spec but it’ll probably remain a part of the reference implementation

1585092160
Snektron
`zig asm` to replace nasm when

1585092296
andrewrk
pmwhite, my plan is for llvm+clang+lld an optional set of dependencies (either all 3 or none), which will provide things such as `zig translate-c`, `zig cc`, `@cImport`, etc. It will also be possible to build the self-hosted zig compiler without these dependencies, and it will be compliant with the zig specification, but it will have fewer backends available and the toolchain will be missing some commands

1585092358
andrewrk
the toolchain is not part of the zig language specification. for example you don't have to implement `zig cc` to implement the zig language according to spec. it's just a nice feature that this particular zig compiler exposes

1585092359
fengb
What's with people in general confusing language syntax with semantics? :/

1585092550
Snektron
Trying to use zig cc to compile my os for fun

1585092565
mq32
fengb: But "var i : i32 = 0;" is just not "int32_t i = 0;" !

1585092568
Snektron
interesting, as clang itself was not able to

1585092669
andrewrk
damn, I cannot reproduce the "bad alloc" from the drone ci failure outside docker

1585092874
companion_cube
I think zig will have serious street cred as a "C replacement" the day there's also a gcc based implementation :s

1585093104
mq32
companion_cube: which version do you mean?

1585093107
mq32
arm-none-eabi-zig?

1585093119
mq32
x86_64-linux-gnu-zig

1585093120
mq32
?

1585093122
mq32


1585093195
companion_cube
the second one

1585093209
companion_cube
well, the *-*-gnu-zig family I guess

1585093691
Snektron
hm, i just found an issue in clang

1585093715
Snektron
Apparently inline assembly doesn't track whether its intel syntax or not

1585093716
Snektron
Sad

