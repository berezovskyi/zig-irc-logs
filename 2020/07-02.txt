1593656330
shcv
if I'm making a type using a constructor function, like ArrayList, how do I expose the parameters used to construct it as part of the type?

1593656347
shcv
since I think it will complain about re-declaring the name

1593656452
shcv
I guess I can just change the name, but it feels a bit off

1593656533
aerona
you could assign the values to constants within the type itself

1593656550
aerona


1593656646
shcv
but then I have to pick a different name, don't I?

1593656686
daurnimator
?

1593656693
shcv
I'd like to have a type-level parameter like "size", similar to the bits of an integer type

1593656707
aerona
parameters usually use snake case while constants use upper pascal case so it shouldn't collide if sticking with that style

1593656720
shcv
all constants? not just type constants? Oh

1593656729
shcv
I guess I'm used to seeing only types as constants :P

1593656738
shcv
that solves the issue then

1593656739
fengb
Only types are pascal in Zig

1593656819
aerona
now that you asked that it made me question it but there's your answer

1593656839
shcv
ok; so I guess I just have to have different names for the parameter vs the constant

1593656841
shcv
oh well

1593656877
shcv
unless there's a way to expose the parameter as part of the returned struct's namespace...

1593657068
aerona
i don't think there's any way to do that

1593657811
daurnimator
just.... add it

1593657849
daurnimator
`fn Foo(comptime x: T) type { return struct { pub const x = x; ......... }; }`

1593660842
aerona
that shadows x and gives an error though

1593660933
daurnimator
aerona: oh interesting. I guess you have to call it something else... or go through an indirection.

1593660937
aerona
though it only errors if you use it along with Self: Self.x

1593660954
aerona
if you do something like `return x` it won't error

1593676716
Xavi92
I'm surprised at Zig not having its own article on Wikipedia

1593678546
traviss
its being worked on. i believe the draft was rejected because there were not enough links to the project on the web.

1593678566
traviss
Xavi92 ^

1593681305
Xavi92
traviss: isn't a programming language with ~10k commits and >200 contributors not interesting enough for Wikipedia? That's also surprising

1593681319
Xavi92
r/not interesting/interesting

1593681529
ifreund
wikipedia has this weird thing where they only accept secondary sources not primary soruces

1593683447
opDispatch
you can try to put it in the influence charts, in a first place, or other articlces, you see, to bring sneakily the fact that then the article is required

1593683527
opDispatch
so you'll have red links pointing to the zig article here and there and at some point you will be able to say "you see it's required"

1593683659
opDispatch
by red links I mean those link that works and then you see "this article doesnt exist yet" etc

1593683762
Xavi92
That's a good idea. Red links could be added on both Rust and Go articles, since they influenced Zig in some ways

1593683813
alexnask
Maybe in the metaprogramming article as well

1593683891
opDispatch
yeah, you got it. But I cant guarantee it will work, it's just an idea. As we often say, bad ideas often look like good in first place ;) so your call on this.

1593684335
forgot-password
Hi guys, I have a quick question: I have a Zig project in my ~/Documents folder on macOS. The build script creates a custom directory, but due to macOS' weird permission system since 10.15 I now have to run `zig build` as sudo. Otherwise I get an error.AccessDenied. Is anyone aware of a solution for that?

1593684414
forgot-password
I don't think I can permanently authorize the build executable, because that always gets recompiled to a different path

1593684472
antaoiseach
chown?

1593684490
forgot-password
Huh, no wait. It works now, I just used the wrong mode_t when creating the dir

1593684507
forgot-password
Stupid me, sorry to bother

1593684532
antaoiseach
Hahaha

1593684548
forgot-password
antaoiseach: Thanks for the suggestion, though

1593684553
antaoiseach
Well, all's well that ends well :-) ... I myself am still of 10.14.6 - maybe not migrate in the forseeable future!

1593684619
forgot-password
When they first rolled out 10.15 this permission stuff was absolutely horrible. You had to separately authorize every single binary that you ran from the command line to access your Documents/Desktop/whatever folder

1593684663
antaoiseach
That sounds like not very fun :( ... it was a mess just getting gdb working on Mojave ... I can't even imagine having to set permissions for everything now

1593684708
forgot-password
It's gotten better, apparently

1593684910
antaoiseach
I have a problem myself ... my project structure is like to : "project-root/src and project-root/tests" ... in my tests directory, I have, say, test1.zig which imports from the src directory like so: "const foo = @import("../src/path/to/foo.zig");"

1593684944
antaoiseach
However, this gives a "import outside package path" error ... I searched the codebase, but couldn't find anything that would explain this ... did anyone face this too?

1593684963
antaoiseach
I don't want to keep the tests within the source files since they're fast ballooning in size

1593684992
alexnask
Yes the best way to do this is probably to add a package to the test step

1593685011
antaoiseach
alexnask: can you elaborate a bit?

1593685021
alexnask
One second I will link you an example

1593685032
antaoiseach
Cool, thanks!

1593685147
alexnask
Relative import paths can only use '..' up to the root file's directory. In this case your test file is the root

1593685149
alexnask


1593685165
alexnask
This is how I work around this issue in zls

1593685219
alexnask
So in this case unit_tests.zig can use @import("analysis") and @import("types")

1593685222
antaoiseach
alexnask: Thank you! I'll check it out

1593685259
antaoiseach
That looks exactly like what I need! I'll try it and report back! :-)

1593685285
lemmi
andrewrk: since you mentioned hashmap perforance. i was toying around with some project euler stuff that makes heavy use of a hashmap. the almost identical code runs twice as fast in go. if you are intereseted i could put these 2 somewhere.

1593685313
lemmi
(i didn't benchmark memory though)

1593685327
alexnask
This can be a bit cumbersome if you have lots of test files but you can get around it by either importing them all in a root test file or making a function in the buildfile that sets up the packages and defining all tests in an array that gets looped over and calls that fn

1593685354
ifreund
lemmi: you could link your code in this issue

1593685378
lemmi
ifreund: k

1593685552
antaoiseach
alexnask: That worked superbly... and I like how clean the imports look now (like importing builtin modules)... thank you, man! :-)

1593685562
alexnask
Cheers

1593693752
fengb
Another workaround is having a different file be the test runner. You can do something like `test “” { _ = @import(“foo/bar.zig”); }`

1593694198
forgot-password
Is it possible to have a tuple with a runtime value? Like this: .{ "comptime_string", runtime_value }

1593694228
ifreund
yep

1593694235
ifreund
what's the context?

1593694246
forgot-password
I basically want to use it as a simple dictionary

1593694309
forgot-password
I want to replace keywords in a file: try replaceKeywords(file, .{ .{ "variable_1", value_1 }, .{ "variable_2", value_2 }, });

1593694447
ifreund
well for printing stuff with e.g. std.debug.print the tuple values are runtime-known

1593694465
ifreund
std.debug.print("{}\n", .{ runtime_value });

1593694493
ifreund
I'm not sure how nesting tuples works or if it works, I assume you're implementing this replaceKeywords function?

1593694596
forgot-password
Exactly

1593694663
forgot-password
I guess I should just use a HashMap

1593694763
ifreund
forgot-password: you may want something like this

1593694900
forgot-password
That looks exactly like what I want

1593694906
forgot-password
I'll give it a shot, thank you :)

1593694915
ifreund
no problem!

1593695239
forgot-password
Hm, when I use a runtime value the build just crashes when it reaches that point

1593697209
ifreund
forgot-password: that's no fun :(

1593697214
ifreund
would you mind opening an issue?

1593697234
ifreund
stage2 is in the works and will be a much better compiler than stage1

1593697449
forgot-password
I'll try to isolate it :)

1593697776
forgot-password
Got it, I'll create an issue

1593697876
ifreund
nice, thanks

1593697996
forgot-password
ifreund:

1593699251
fengb
Um... what would you expect it to do? ComptimeStringMap only works with comptime values

1593699334
forgot-password
Well, now that I think about it. Still it probably shouldn't just crash at runtime then

1593699996
fengb
Oh yeah, I thought it was crashing at compilation. Definitely a bug, but fixing still won't let you use it :P

1593700123
forgot-password
Yeah I'm not sure what I was thinking, I just deseparately wanted to declare a map like that... The normal StringHashMap works perfectly fine :)

1593700659
oats
did the InStream/Outstream -> Reader/Writer change bring any interface changes, or is it just a renaming?

1593702654
ikskuh
oats: afaik it's just renaming

1593702785
pixelherodev
ikskuh: WHICH IS IT?!

1593702785
pixelherodev
:P

1593702785
pixelherodev
WHAT DO I CALL YOU?!

1593702785
pixelherodev
Just a rename

1593705603
tgschultz
ArrayList(T).shrink asserts `new_len <= items.len` and that doesn't make sense to me. I don't necessarily want to destory data, just ensure that excess capacity is freed. Is there a reason for this or is it an oversight after the allocator changes?

1593705646
ikskuh
huh? <= asserts exactly that to my understanding

1593705704
tgschultz
the way ArrayList is now, items.len tracks the used portion of the list memory.

1593705752
tgschultz
and `capacity` tracks the available memory

1593705779
tgschultz
so shrink will only let you free unused memory if you take some used memory with it.

1593705814
tgschultz
unless I'm missing something

1593706003
ifreund
tgschultz: what you say makes sense to me

1593706028
ifreund
pixelherodev: you just need to say his name out loud, then it's always the same :D

1593706162
tgschultz
shrink is probably behaving correctly: resize also affects items.len, so shrink should too. So I guess what I'm looking for is a new function to free unused capacity.

1593706344
fengb
toOwnedSlice does it

1593706368
fengb
Although semantically it looks weird to do that and keep the arraylist around

1593706594
alexnask
toOwnedSlice sets capacity to zero

1593706610
alexnask
(to be precise it reinitializes the ArrayList after shrinking and returning the items slice)

1593707463
ifreund
list = ArrayList(u32).fromOwnedSlice(list.allocator, list.toOwnedSlice());

1593707465
ifreund
guess that's it

1593707500
fengb
Totally legit

1593709349
rooke
Speaking of ArrayLists, does any one know why ensure capacity does 1.5(capacity) + 8?

1593709466
rooke
I've seen 1.5(capacity) discussed inplace of 2(capacity) as it gives you the possibility to reshare memory, but I've never seen a + constant tacked on

1593709489
rooke
reshare -> reuse*

1593710010
Snektron
Maybe to ensure a minimum size

1593710044
rooke
Ah yeah, it initializes to 0. So I guess you need the constant to get out of that

1593711566
rooke
How much does that memory re-use thing matter in the real world™?

1593711598
rooke
All my run ins with it have been purely academic

1593712181
leeward
Also weird that it's not `while(better_capacity < new_capacity) { better_capacity += better_capacity / 2 + 8; }`

1593712203
leeward
Oh, never mind. As written it ensures at least one increase.

1593712229
leeward
No, never mind again. The line before that guarantees it will go through the loop at least once.

1593712254
leeward
That's 2 extra branches. I wonder how the optimizer does with it.

1593712278
leeward
Well, 1 extra branch. while(true) doesn't branch.

1593712337
leeward
rooke: The +8 question is a good one, and should definitely get answered.

1593712516
leeward
It looks like andrewrk changed it 4 years ago in this commit:

1593712556
rooke
Yeah, changed it from doubling to 1.5 + 8

1593712581
rooke
Which is interesting as 1.5 + 8 will also never re-use memory unless I'm missing something

1593712602
fengb
We recently changed allocator patterns

1593712605
alexnask
`#static_eval_enable(false)`

1593712612
alexnask
Wow

1593712679
leeward
Well, if andrewrk comes by he might illuminate us.

1593713126
rooke
I'll keep an eye on the logs then :)

1593714615
shcv
why would 1.5 permit reuse? or conversely why wouldn't 2x?

1593714644
shcv
I guess it could relate to how the allocator works...

1593714746
rooke
The idea is the new array is always bigger than the sum of the arrays which came before it

1593714765
leeward
I read an article about this a while ago...

1593714830
shcv
I guess 1.5x+c is the minimum that grows faster than the sum of the previous?

1593714841
rooke
Golden ratio is the division line

1593714850
rooke
Anything smaller permits reuse

1593714854
rooke
Anything bigger grows too fast

1593714888
leeward
1.6 is awkward math though, and 1.5 is super easy math (in binary).

1593714895
shcv
sounds reasonable

1593714899
rooke
I say "permits reuse" that memory can still be re-used its just never going to put the array there

1593714902
shcv
doesn't lead to nice powers of two sizes though

1593714961
rooke
.Net dictionaries double the size then go to the next prime number

1593714966
rooke
If memory serves

1593714971
leeward
It's about minimizing memory fragmentation. It's way more likely that an array that's been growing will grow than that you'll happen to want an N-byte chunk of memory. That's the idea, anyway.

1593715119
rooke
Ah the prime thing has to do with distributing hash values better, ignore that comment

1593715129
rooke
Was just a weird thing I read some where :x

1593715328
rooke


1593715342
rooke
Heres FB explaining why they use 1.5 as a growth factor

1593715391
rooke
and some more stuff with playing nice with pages and things if thats something y'all are into

1593715392
leeward
rooke: That's the thing I read.

1593715399
leeward
I had totally forgottin it was from facebook.

1593715518
shcv
oh, I see - it permits reuse because it will eventually fit within the space of the old copies

1593715590
shcv
that sounds like it assumes contiguous allocation though? otherwise there could still be fragmentation preventing reuse

1593715598
shcv
or at least a defragmenting allocator

1593715666
leeward
The only way it's worse than 2 is if allocation is both discontinuous and frequent.

1593715700
shcv
the allocation-aware vector concept sounds neat; I wonder what it would take to do that here

1593715733
leeward
You mean decide how it grows based on the particular allocator it's passed?

1593715802
rooke
Yeah, they mention that allocators don't usually give you exactly what you asked for but do it in fixed-size chunks. So to be optimal you would want to request multiples of those chunks

1593715825
fengb
We expose that now in the allocator

1593715849
fengb
The allocator interface can now return the "natural" size instead of the requested size

1593715858
fengb
So it just works™ in Zig

1593715899
rooke
oh nice

1593715914
shcv
the comments on relocation are also interesting

1593715975
rooke
On a related note is there an online copy of the standard library for zig 0.6?

1593715987
rooke
er documentation for the standard library*

1593715998
rooke


1593716016
companion_cube


1593716026
rooke
oh, duh

1593716031
rooke
Thanks :)

1593716032
fengb
They're all out of date, but yeah that's the one

1593716131
leeward
That is a common question. We should figure out how to fix

1593716141
leeward
I hear it's manually generated.

1593716153
rooke
it is a little odd that "master" is behind "0.6.0"

1593716157
leeward
Also, I've had trouble with -femit-docs lately.

1593716254
rooke
I've just been grepping my local copy of the source for bout a month

1593716274
rooke
Which has been informative... but not particularly smooth

1593716357
leeward
If you want a somewhat smoother experience that's up to date, try using ZLS with your editor.

1593716544
rooke
huh zig has a language server. TIL

1593716548
ifreund
zls is awesome, it lets you see the docs in the autocompletion, and you can also "goto definition" into the std source to read further

1593716565
ifreund
i mean, it's only been around for a little over a month or something

1593716702
rooke
I'll have to set that up

1593716787
rooke
The readme says to use CoC for neovim, any one know if theres an advantage to that over the built in neovim LSP client?

1593716950
ifreund
coc is more mature but it's nodejs

1593716957
ifreund
i'd go with the bultin lua one

1593716966
ifreund
I use kakoune these days though

1593717005
rooke
Oh neat

1593717162
rooke
I feel too invested in vim to switch, the muscle memory would kill me.

1593717253
leeward
First pass: no.

1593717294
ifreund
kakoune has a very different philosohy than emacs

1593717312
leeward
I don't see it.

1593717321
leeward
Unless it's "be cool" which emacs is notably bad at.

1593717321
ifreund
emacs tries to do everything, kakoune does one thing very well and has great interop with other programs

1593717359
rooke
I just recently gave up on emacs + evil, I just never used 99% of what emacs provides

1593717363
ifreund
I think that we could agree that it's a good bit simpler than emacs at least

1593717390
leeward
Emacs itself doesn't really try to do everything. There's just someone who's written an emacs extension to do everything because it's extensible. I see "Users can extend the features of Kakoune or customize them to their liking with macros or hooks."

1593717401
leeward
Which sounds very emacs-y to me.

1593717451
rooke
Sounds very "unix-y" in general lol

1593717465
ifreund
well for one kakoune doesn't have a fully fledged scripting language like elisp or vimscript

1593717500
leeward
Ugh, modal editor is the first line in their pitch. Hard pass.

1593717511
ifreund
it just has shell expansions which allow you to interact with the editor over stdin/out in any language you choose

1593717518
fengb
It's a vi replacement right? Of course it'll be modal :P

1593717526
ifreund
yes if modal isn't your thing than you probably wont like it

1593717537
leeward
Yeah, incompatible with my religion.

1593717571
ifreund
rooke: fwiw how I switched from vim was by forcing myself to use kak for a week to see if I liked it

1593717575
ifreund
i never went back

1593717611
leeward
I am amused by the ascii-art clippy.

1593717626
leeward
Clippy has come full circle.

1593717640
ifreund
clippy is awesome, it makes the discoverability of features way better than vim

1593717687
leeward
"clippy is awesome" is not a phrase anyone would ever have expected to hear ca. 1998.

1593717711
leeward
on par with

1593717779
ifreund
heh

1593717801
fengb
Vim is better without discovery

1593717805
fengb
It's a hazing ritual

1593717890
ifreund
reminds me of that quote from dwm's readme

1593717892
ifreund
Because dwm is customized through editing its source code, it's pointless to make binary packages of it. This keeps its userbase small and elitist. No novices asking stupid questions.

1593717927
leeward
That sounds unlikely to succeed at its ultimate goal.

1593718025
leeward
^actually a lie. I'm learning Prolog this week.

1593718056
ifreund
not hipster enough to learn mercury instead?

1593718061
leeward
verily

1593718072
fengb
I should show up to dwm and ask stupid questions

1593718092
leeward
Zig notwithstanding, I like having a binary package I can apt install for my languages.

1593718289
waleee-cl
ifreund , leeward:  mercury got a kind-of user-friendly tutorial  now

1593718329
waleee-cl
(and a new stable release from this year)

1593718394
waleee-cl
but I guess people knowing prolog would rather use

1593718411
leeward
I had a friend who was playing with it a few years ago and it was constant pain. "Oh, this bit seems cool...oh, it was someone's senior project in 2009 and hasn't been touched since." and many-hour builds.

1593718503
leeward
I think after prolog my next stop is coq. Make up for that CS education I never got.

1593718965
fengb
If it makes you feel better, I've never learned this stuff either

1593719006
fengb
Closest "exotic" language we had in college was Scheme... and I really didn't learn the fundamentals of functional programming in that class either

1593719229
leeward
It's not like the time in college was wasted; just gotta keep learning and CS has a lot of interesting stuff that's easy to learn from home.

1593719590
fengb
Eh, most of the knowledge of programming were pretty useless

1593719636
fengb
I'm really glad I learned a bunch of things on my own

1593719775
leeward
Yeah, that's what I'm doing. It's a lot cheaper than getting a master's.

1593720363
rooke
ifreund: "I never went back" want caused you to stay?

1593720369
rooke
want -> what

1593720441
rooke
I guess I just have yet to hit a point with vim where I think "man if only it -"

1593720479
rooke
Outside of "man I wish vimscript wasn't a thing" and neovim solves that particularly issue lol

1593720508
ifreund
I never really hit that point with vim, because I didn't have the imagination to think of the ways modal editing could be better

1593720522
ifreund
then I tried kakoune, and everything was more intuitive

1593720561
ifreund
mutliple cursors and selection-first editing make doing many things at once way more ergonomic than vim, where you basically have to stick to macros and regexes

1593720647
gldev
Hello!

1593720663
ifreund
yo

1593720665
leeward
o/

1593720699
rooke
I guess I'll add it to the ever growing stack of things to try when I'm not busy

1593720734
gldev
can i compile zig with gnu's tools? i have been getting the lld error, i am also trying compiling llvm and clang but it takes foooooorever (:

1593720743
leeward
gldev: Yes, you can.

1593720751
leeward
Which lld error? The one about libPoly?

1593720780
leeward
er, Polly

1593720816
gldev
thats the latest one

1593720835
leeward


1593720844
leeward
Apply that patch and it ought to work.

1593720852
gldev
also this one LLD_INCLUDE_DIRS with g++

1593720867
gldev
i mean, the one that says that the var is not set

1593720949
leeward
I don't know anything about an unset LLD_INCLUDE_DIRS. If the fix for

1593721063
gldev
thanks, i'll try it, really excited to get into zig

1593721071
ifreund
what distro are you on?

1593721115
gldev
pop os

1593721186
ifreund
ah yeah, their llvm package won't be up to date enough then

1593721192
leeward
system76...isn't that a kind of glass?

1593721226
leeward
Oh, no, that's system96.

1593721229
leeward
So different.

1593721340
gldev
haha, yeah this is just like ubunbu 20 i guess

1593721349
gldev
just no install scripts work with it

1593725092
gldev
got it to work, is there a getting started guide?

1593725251
ifreund
the language reference is pretty good:

1593725266
ifreund
(make sure you choose 0.6.0 not master if that's what you're using)

1593725282
ifreund
there's also

1593725384
gldev
omg i just compiled upstream

1593725392
gldev
>.<

1593726693
pixelherodev
ikskuh: working on SPU-II JIT again :D

1593727236
ikskuh
\o/

1593729593
andrewrk
looks like my hash map work was not wasted. by adding back robin-hood-hashing and storing hashes in entries, I'm seeing an 8% overall compilation speed boost

1593729606
andrewrk
with no impact on memory usage

1593729629
andrewrk
in fact, still lower memory usage since before the rewrite of stage1 HashMap

1593729768
ifreund
nice, bet that feels a bit better than no change :D

1593729791
ifreund
Do we want a swiss tables implementation in zig eventually?

1593730096
andrewrk
ifreund, is there any reason to choose it over what I've prototyped in stage1 just now?

1593730124
ifreund
I don't know, I need to do more reading

1593730169
ifreund
I think what you've prototype has lower memory usage

1593730184
andrewrk
what I've done right now has some nice properties: * memory efficient * pointers to keys and values live forever * it retains insert order * you can iterate with `for`; entries is literally an array list

1593730211
andrewrk
and it's faster than the current implementation that we use in zig (which used to be the same impl as stage1)

1593730231
ifreund
yeah I watched that python talk and it seems quite nice

1593730260
andrewrk
I wish they mentioned deletion

1593730269
andrewrk
I did it with swap_remove, which I'm happy with, but I wonder what they did

1593730318
ifreund
didnt they mention that at some point? iirc swap remove was brought up but I don't remember the conclusion

1593730337
ifreund
the code is probably available somewhere too

1593730418
ifreund
I think swiss tables might be faster for hashtable lookup/insert/delete stuff but you loose the nice stuff like ordering and pointer stability

1593730462
ifreund
they're also a good bit more complex, the rust port is over 6k loc

1593730548
ifreund
anyhow, I just found this talk about swiss tables so I'll probably watch it and report back:

1593730576
ifreund
for river, I would definitely take your implementation with pointer stability and good memory usage though

1593730577
andrewrk
cool, let me know! either way, I think the first step is getting some benchmark coverage in ziglang/gotta-go-fast

1593730584
ifreund
yeah for sure

1593730606
andrewrk
it's pretty easy to contribute benchmarks, here's an example:

1593730638
andrewrk
and it's a great way to make sure that your project stays fast and even gets faster, because you give the zig project a piece of code that represents your use case, and we track the perf over time and make sure it stays good / gets better

1593730773
companion_cube
imho a stdlib implementation should be robust and versatile (so it's good to have, say, pointer stability; also debug-only checks for iterator invalidation)

1593730810
companion_cube
swiss tables rely on simd, don't they? or at least they're designed to be fast in that case?

1593730844
andrewrk
I'm struggling to imagine how simd would help with a hash table impl

1593730852
andrewrk
I can definitely see it for hash functions

1593730859
ifreund
yeah they leverage simd for some stuff, idk the details yet

1593730877
companion_cube
iirc you can check for slots that have the same hash using simd

1593730891
companion_cube
there's like an array that is only `[i]=>hash(entry(i))`

1593730895
ifreund
apparently simd lets you "scan multiple hash enteries in parallel"

1593730903
companion_cube
and thus you can check 8 of them in one instruction

1593730909
companion_cube
and the entries are in a separate table

1593730910
andrewrk
interesting

1593730918
companion_cube
so it's all about cache lines and simd

1593730944
ifreund
c++ impl here:

1593730946
companion_cube
I imagine it's good even if you don't have simd, because it fits the cache better

1593730951
ifreund
rust impl here:

1593730985
andrewrk
oh, derp, I was wrong earlier about pointers living forever. pointers can become invalid when you put(), but you can do the same trick as with ArrayList where you ensureCapacity first and then putAssumingCapacity will guarantee to not invalidate any entry pointers

1593731006
ifreund
I was kinda wondering how that worked :D

1593731034
ifreund
still though, I think ordering and iteration with for are super nice

1593731055
andrewrk
yeah I think it's a good general purpose hash map

1593731058
ifreund
and I think this implementation you prototyped would fit well in the std

1593731094
ifreund
we can always have a swiss tables impl as a user library (who knows, maybe I'll feel like writing one after watching this video)

1593731104
andrewrk
cool

1593731108
companion_cube
swiss tables are probably good if you need super fast big-ish tables

1593731111
andrewrk
add that benchmark first!!

1593731118
companion_cube
but I suspect a lot of tables are actually pretty small

1593731135
ifreund
will definitely port benchmarks from the existing impls if I write one

1593731152
ifreund
I dont have any hash maps in hot paths for river

1593731520
andrewrk
oh with this hash map you can iterate over it while putting items into it too

1593731864
ifreund
oh, that is nice

1593731882
ifreund
suppose you can't delete while iterating though

1593732002
shakesoda


1593732014
shakesoda
how many times in my life i have needed the "notice the capitalization" error message

1593732030
ifreund
andrewrk: in case it's useful, the python hashtable implementation in C is here:

1593732038
ifreund
looks to be fairly well commented as well

1593732059
andrewrk
I took a peek at this earlier

1593732071
andrewrk
there's a lot of noise; I found it easier to reason about it myself than look at this code

1593732151
andrewrk
oh interesting, they lose an entire bit for their indices index size

1593732191
andrewrk
they have: u8 for size <= 128, u16 for size <= 2**15, etc. we have: u8 for size < 255, u16 for size < 2**16 - 1, etc

1593732262
ifreund
hm, why do they do that?

1593732309
ifreund
like, it seems to be because they're using signed integers

1593732320
ifreund
but why are they using signed integers in the first place?

1593732369
ifreund
seems to be just for 2 sentials

1593733407
jaredmm
It is slightly strange that we have case sensitive types like that, anyway. I generally use IDEs with auto-complete that ignore case, but it wouldn't make sense for uint16 to be different than Uint16 or UInt16. .

1593733669
shakesoda
case sensitive identifiers entirely seem mostly unhelpful

1593733700
shakesoda
although last i checked zig enforces shadowing rules in a case insensitive way, so at least that's not a concern

1593733846
andrewrk
not correct

1593733880
andrewrk
there is no case insensitivity in the language

1593733899
shakesoda
hmmm, i thought the shadowing check was insensitive, but ok

