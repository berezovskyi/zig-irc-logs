1587775822
GreaseMonkey
how do optionals tend to behave when you aren't using a pointer? i'm hitting a weird issue somewhere

1587775859
GreaseMonkey
i am working on a GZipReader, and it has this field: raw_deflate_reader: ?RawDeflateReaderType

1587775878
GreaseMonkey
i can tell if it's null or not, and i can set it to something and initialise it

1587775887
fengb
There’s extra space reserved to store the null-ness

1587775931
GreaseMonkey
but when i call against it, the results don't seem to propogate back to the field in the GZipReader

1587775956
GreaseMonkey
specifically:

1587775961
GreaseMonkey
var deflate_reader = try (self.raw_deflate_reader orelse error.Failed);

1587775961
GreaseMonkey
var bytes_just_read = try deflate_reader.read(buffer);

1587776066
GreaseMonkey
doing a warn("{}", .{self.raw_deflate_reader}) before and after those two lines reveals that nothing is affected

1587777910
GreaseMonkey
...ok, i managed to get it to work, and then i managed to get rid of the need for an optional type

1587779484
pixelherodev
Uh

1587779488
pixelherodev
oh wait never mind

1587782653
foobles
is there some way to test if two zigtypes are comparable?

1587782677
foobles
like a helper for ir_analyze_bin_op_cmp

1587782708
foobles
because I want to basically say "if I ran ir_anaylze_bin_op_cmp, would these two types be valid"

1587782738
foobles
well, i suppose I dont need that unless #5155 is accepted

1587782739
foobles
nevermind

1587783074
foobles
and thinking about it, i would be able to extract a lot of the logic from ir_analyze_bin_op_cmp

1587783110
foobles
except for the special cases (like null with null, optional with null, tagged union with enum literal, etc.)

1587783152
foobles
those would have to also be hard-coded and kept in parallel with ir_analyze_bin_op_cmp, which unfortunately doesn't seem too DRY

1587783635
GreaseMonkey
anyway, here's how the implementation's looking so far:

1587783676
GreaseMonkey
usage has changed, it now works as a pipe - feed gzipped data into stdin, get decompressed data into stdout

1587784652
daurnimator
pixelherodev: there was no issue with mixins

1587789411
foobles
does anyone have an idea for how to do what im talking about without unnecesary redundancy?

1587789432
foobles
i guess i could factor out specific conditional expressions into functions

1587802156
Invader_Bork
what's ZIR?

1587802172
mikdusan
zig intermediate representation

1587802189
Invader_Bork
mikdusan, ty

1587804168
gonz_
So I extended my foray into type introspection and added PureScript & Haskell output for basic zig types

1587804170
gonz_


1587807101
daurnimator
GreaseMonkey: I'm having another look now

1587816489
frett27
.... well still in the iotmonitor compilation for orangepi !!!! -> a real nightmare experience :-(

1587816514
frett27
zig has been build cross plateform targeting orangepi -> WORKS !!

1587816527
frett27
building zig hello world WORKS

1587816538
frett27
trying to :  zig build-exe -target arm-linux-gnueabihf -mcpu arm1176jzf_s --object /usr/lib/arm-linux-gnueabihf/libleveldb.a -Lpaho.mqt

1587816538
frett27
t.c/build/output -Lpaho.mqtt.c/src  --object paho.mqtt.c/src/libpaho-mqtt3c.a iotmonitor.zig

1587816564
frett27
is missing libc ! ok

1587816603
frett27
adding libC ->

1587816631
frett27
pi@OrangePi:~/iotmonitor$ zig build-exe -target arm-linux-musleabihf -mcpu arm1176jzf_s --object /usr/lib/arm-linux-gnueabihf/libleveldb.a -Lpahott.c/build/output -Lpaho.mqtt.c/src  --object paho.mqtt.c/src/libpaho-mqtt3c.a -lc iotmonitor.zig

1587816632
frett27
Semantic Analysis [40/113] Illegal instruction

1587816637
frett27
Grrr

1587816934
frett27
spend more time to cross compile than adding functionnalities :-(

1587819536
TheLemonMan
frett27, yo

1587819543
frett27
hello

1587819573
frett27
tried to recompile the leveldb c++ with zig ....

1587819589
frett27
permit then to have to "External dependencies"

1587819608
frett27
well, i'm a noobs on this area

1587819611
frett27
:-)

1587819616
TheLemonMan
try applying #5165, that will show you what's wrong and where it happens

1587819657
TheLemonMan
I've fixed some more UB in stage1 so make sure to use a very recent zig version

1587819742
frett27
what it should fix ?

1587819761
frett27
i recompiled the zig cross plateform yesterday,

1587819779
frett27
works fine for arm-linux-musleabihf baseline

1587819815
frett27
i learnt the orange pi has an armv6k instruction set,

1587819893
TheLemonMan
that PR instructs the embedded C/C++ to emit something more informative than an illegal opcode

1587820094
frett27
ok, thank's basically how can i fetch the PR locally ? the git fetch origin pull/5165/head:master failed ?

1587820187
TheLemonMan
I usually download the .diff and apply it by hand

1587820964
frett27
i can't find the download diff .. so i added your repo and cherry picked the commit,

1587820969
frett27
it is compiling

1587821000
TheLemonMan
just take the PR url and add .diff/.patch at the end :P

1587821080
frett27
cool !!

1587821105
frett27
takes 1s to apply something, and don't pollute the repo

1587821528
FireFox317
i should have tested that stuff on my raspberry xd

1587822323
frett27
so do i :-),

1587822379
frett27
face an issue also, using the build.zig definition target with this definition, does not do the same as command line

1587822403
fengb
I should have too. Non trivial stuff blew out my ram so I only really got hello world working >_>

1587822422
frett27
in build.zig :    exe.setTarget(.{ .cpu_arch= .arm, .os_tag=.linux, .abi=.gnu,  .cpu_model = .{ .explicit = &std.Target.arm.cpu.arm1176jzf_s }});

1587822429
frett27
is not equivalent to

1587822440
frett27
zig build-exe -target arm-linux-musleabihf -mcpu arm1176jzf_s  ...

1587822471
frett27
fengb, in my case the hello world works fine,

1587822497
frett27
fengb, this is when i tried to add some libraries, gnuabi related ..

1587822503
frett27
that cause the issue

1587822504
TheLemonMan
.abi=.gnu ... arm-linux-musleabihf

1587822509
fengb
Yeah that’s what I mean. I didn’t get anything complicated to work so I didn’t stress test the compiler

1587822516
TheLemonMan
you got the abi wrong?

1587822534
frett27
let me tests, i tried a lot of things

1587822617
frett27
TheLemonMan, when defining the mcpu using the build.zig, this is not equivalent to specify the mcpu on the command line

1587822657
frett27
when compiling with build.zig and    exe.setTarget(.{ .cpu_arch= .arm, .os_tag=.linux, .abi=.gnueabihf,  .cpu_model = .{ .explicit = &std.Target.arm.cpu.arm1176jzf_s }});

1587822673
frett27
it gives me : pi@OrangePi:~/iotmonitor$ zig build

1587822673
frett27
^

1587822673
frett27
LLVM ERROR: Error parsing inline asm

1587822673
frett27
yield

1587822673
frett27
LLVM Emit Output...<inline asm>:1:2: error: instruction requires: armv6k

1587822683
frett27
seems the cpu model is not taken

1587822731
frett27
TheLemonMan, when compiling with your patch and this command line :   zig build-exe -target arm-linux-musleabihf -mcpu arm1176jzf_s --object /usr/lib/arm-linux-gnueabihf/libleveldb.a -Lpaho.mqtt.c/build/output -Lpaho.mqtt.c/src  --object paho.mqtt.c/src/libpaho-mqtt3c.a -lc iotmonitor.zig

1587822746
frett27
it respond : Semantic Analysis [40/113] ubsan: type-mismatch @ 0x1a82bfb

1587822746
frett27
Illegal instruction

1587822792
TheLemonMan
cool, now run `addr2line -e zig 0x1a82bfb` and you'll know what went wrong

1587822880
frett27
pi@OrangePi:~/iotmonitor$ addr2line -e `which zig` 0x1a82bfb

1587822880
frett27
pi@OrangePi:~/iotmonitor$

1587822880
frett27
dlerror.c:?

1587822899
TheLemonMan
and the mcpu thing is working just fine, it's the stdlib that doesn't know `yield` was introduced with ARMv7

1587822937
TheLemonMan
frett27, duh, try running it under gdb

1587822972
frett27
:-), yep

1587823108
frett27
TheLemonMan,

1587823154
frett27
does the -lc mandatory now ?

1587823188
frett27
even if i used the musl, and additional objects needs the c libraries ?

1587823206
frett27
mqtt lib needs it

1587823214
frett27
and also the leveldb

1587823356
TheLemonMan
do you have the code available somewhere?

1587823406
frett27


1587823505
TheLemonMan
oh it seems yield is available from v6k on, the hell

1587823515
TheLemonMan
oh and it was also written in the message you pasted

1587823524
TheLemonMan
fuck I should really learn to read someday

1587823674
TheLemonMan
frett27, should I check out the develop branch or master?

1587826429
ifreund
anyone have a good example of polymorphism in zig lying around?

1587826474
ikskuh
ifreund: runtime or comptime polymorphism?

1587826491
ifreund
ikskuh: runtime

1587826501
ikskuh
there's a (closed) PR by alexnask which provides very nice interface stuff

1587826504
ifreund
i need to abstract over native wayland and xwayland views

1587826506
ikskuh
"std.interface"

1587826518
ifreund
i'll take a peek, thanks

1587826523
ikskuh
you can also look at std.mem.Allocator

1587826532
ikskuh
it's also runtime polymorphism, a bit different though

1587826544
ifreund
ah right good point

1587827641
frett27
TheLemonMan, sorry, i was disturbed, back again,

1587827725
TheLemonMan
frett27, found the problem, I'll write a patch

1587827751
frett27
i'm not aware of all, but want to learn, love zig

1587827803
frett27
TheLemonMan, how can i get into zig internal smoothly, i started with external view, the language, i have lot to learn on the compile stuff also.

1587827815
frett27
what do you suggest ?

1587827828
frett27
is there are things i can do on my time ?

1587827885
frett27
TheLemonMan, it will be nice to have a zig iot project, monitoring and "rule them all those iot devices :-)"

1587827933
frett27
Tests, docs ?

1587828029
pixelherodev
Would patches adding ELF

1587828042
pixelherodev
Or is that out of scope of stdlib?

1587828204
ikskuh
i think andrewrk dumps ZIR into an ELF file right now?

1587828210
ikskuh
So maybe his branch already contains that?

1587828263
pixelherodev
IIRC it just writes it as ZIR

1587828269
pixelherodev
Writing to ELF is in the

1587828286
ikskuh
ah

1587828291
ikskuh
so it will probably be required

1587828298
TheLemonMan
frett27, the best way is to get your feet wet by fixing some contributor-friendly bug

1587828618
frett27
TheLemonMan, yes i'm still in this mind set, think the building of small applications can also help lean and focus on important thing for project

1587830294
ifreund
is there a way to set the active field of a union without assigning it?

1587830399
ifreund
is my_union.tag1 = undefined; ok?

1587830913
ifreund
yeah looks like that crashes, shoot

1587830920
ifreund
imo that should be allowed

1587831068
companion_cube
is tag1 the discriminant tag?

1587832133
ifreund
no, the union itself is undefined

1587832191
ifreund
i want to set the active tag and then call my init function like `my_union.tag1.init()`

1587832289
ifreund
and yes there's a reason I don't do `my_union.tag1 = MyType.init()`, MyType can't be moved around without breaking pointers due to the design choices of libwayland

1587832319
ifreund
I supposed I could have two init functions, but that's super ugly

1587833492
xackus_
I think stage1 resolve_llvm_types will need a refactor to properly fix

1587833596
xackus_
the deduplication of pointer ZigTypes differing by is_const, is_volatile, etc is special cased

1587833693
xackus_
andrewrk TheLemonMan

1587833832
TheLemonMan
yeah that's tricky to solve, the types have the correct (and same) structure but different names

1587833848
TheLemonMan
you could special-case the ?[]T case but that feels hacky

1587833937
xackus_
i can try rewrite it recursively

1587834080
xackus_
another solution would be to separate the type and cv modifiers, but would probably require more work

1587834172
TheLemonMan
every time I see something that requires too much effort I move it on the stage2 stack heh

1587834276
xackus_
but this is needed for zig0 :(

1587834508
TheLemonMan
yeah I meant I put it on hold

1587834636
xackus_
it's not that much code, I will probably try the recursive rewrite

1587834771
marijnfs_
im using a c-library that uses void pointers, i use ?*c_void on the zig side for them, is that correct?

1587834804
xackus_
actually resolution is already recursive, i will put a new field that points to the canonical ZigType

1587834845
marijnfs_
I'm somehow getting issues when using the functions in a spawned thread

1587834946
TheLemonMan
xackus_, try changing the LLVM type name only

1587834965
TheLemonMan
the inner slice llvm type is correctly generated after dropping the qualifiers

1587835032
TheLemonMan
so you need a function to mint a new "base" type w/o any qualifier

1587835360
xackus_
yeah, i noticed the inner slice type is correct

1587835936
TheLemonMan
the C ABI is so badly implemented for ARM32 that the compiler is not even able to call zig_clang.cpp methods without corrupting random memory

1587835972
TheLemonMan
frett27, you're better off cross-compiling stuff for the time being

1587837088
marler8997
found a cool way to initialize my new allocators, instead of makeSliceAllocator(makeAlignAllocator(makeLogAllocator(MmapAllocator { }))), you can do Alloc.mmap.log().align().slice().init

1587837149
ifreund
that is a lot cleaner

1587838597
frett27
TheLemonMan, ok so embedding libs directly, and compile the whole on x64 is the way to go then, big thank's for analysis

1587840117
hwerrno
hello, every one this is the first time i am using irc

1587840129
foobles
hello

1587840150
foobles
this is the first IRC channel i have ever joined as well

1587840181
Xavi92
Welcome hwerrno :)

1587840219
hwerrno
zig is very cool

1587840446
hwerrno
help

1587840486
hwerrno
😁️

1587840580
foobles
help with what?

1587840584
foobles
hwerrno

1587840737
andrewrk
welcome hwerrno

1587841012
andrewrk
I'm planning to do a zig live coding stream today in a couple hours

1587841047
ifreund
\o/ I will be there

1587841047
nephele
Hmm, a couple could be 2 or more :)

1587841065
andrewrk
I'll pick a concrete time soon, need to take care of some chores first

1587841339
FireFox317
nice andrewrk! self-hosted compiler stuff? :D

1587841345
andrewrk
yes

1587841418
FireFox317
cool!

1587841812
drasko
Hi all, I am trying to declare var as `const in = self.conn.file.InStream;`

1587841846
drasko
But I am getting:

1587841849
drasko
./tcp.zig:32:34: error: no member named 'InStream' in struct 'std.fs.file.File'

1587841849
drasko
^

1587841849
drasko
const in = self.conn.file.InStream;

1587841901
drasko
Although I can see this var over here:

1587841925
drasko
What am I missing?

1587841941
foobles
is `self.conn.file` a type ?

1587841942
nephele
If it's complaining about file.File maybe it is self.conn.InStream instead?

1587841954
foobles
well InStream exists for the File type

1587841966
foobles
maybe you are only allowed to say `File.InStream`

1587841977
foobles
and not (some instance of file).InStream

1587842057
drasko
./tcp.zig:31:29: error: no member named 'InStream' in struct 'std.net.Connection'

1587842057
drasko
const in = self.conn.InStream;

1587842057
drasko
^

1587842231
drasko
foobles, this is what I am trying:

1587842233
drasko
const Client = struct {

1587842234
drasko
conn: std.net.StreamServer.Connection,

1587842234
drasko
const in = self.conn.file.InStream;

1587842234
drasko
fn handle(self: *Client) !void {

1587842234
drasko
handle_frame: @Frame(handle),

1587842234
drasko
const out = self.conn.file.OutStream;

1587842236
drasko


1587842238
drasko
while (true) {

1587842242
drasko
const c: u8 = try in.readByte();

1587842244
drasko
try out.writeByte(c);

1587842246
drasko
}

1587842248
drasko
}

1587842250
drasko
};

1587842260
andrewrk
welcome, drasko

1587842268
drasko
Thanks andrewrk

1587842287
andrewrk
on IRC you have to use a third party service to paste code and put a link here

1587842298
drasko
pastebin?

1587842301
andrewrk
sure

1587842303
drasko
OK

1587842305
ifreund
i recommend

1587842306
foobles
godbolt is good

1587842311
foobles
since you can run code there

1587842320
drasko
I did not want to paste here whole snippet

1587842330
drasko
sorry

1587842333
ifreund
godbolt is nice

1587842435
drasko
an

1587842445
drasko
andrewrk, any ideas why self.conn.file.InStream is not reachable?

1587842458
foobles
I think i know

1587842471
foobles
you are trying to access a constant associated with the struct itself

1587842482
foobles
but self.conn.file is an INSTANCE of file

1587842489
foobles
InStream is a type

1587842498
foobles
try doing `self.conn.file.inStream()`

1587842521
foobles
yep, that works

1587842539
drasko
yep

1587842551
drasko
But I did not understand much why :)

1587842585
drasko
So this is a type:

1587842597
drasko
not a member of File struct?

1587842671
drasko
And alo I do not understand this one: `pub fn inStream(file: File) io.InStream(File, ReadError, read)` takes one parameter (file)

1587842676
drasko
and we gave it none

1587842732
foobles
when you use file.inStream(), `file` is the parameter

1587842750
foobles
thats how dot-notation works

1587842763
foobles
the thing on the left of the dot is passed as the first parameter

1587842777
drasko
Ah, OK, thanks

1587842782
drasko
this is valuable info

1587842835
drasko
And what about this: `pub const InStream = io.InStream(File, ReadError, read);` - isn't `pub const InStream` publicly used member of File struct?

1587842881
foobles
what do you mean?

1587842903
foobles
`pub const InStream` is a constant of the struct itself

1587842920
foobles
in your example `self.conn.file` is not the File struct

1587842927
foobles
its just an instance of the file struct

1587842956
foobles
which means you cant access the struct's constants through it

1587842968
drasko
And in instance of the struct  I can not use consts of the struct?

1587842980
foobles
seems like that is correct

1587842998
FireFox317
drasko,

1587843165
drasko
I do not quite get it... how is then this field ever used

1587843191
drasko
This pub const InStream , I do not see it used in file.zig

1587843198
drasko
so it must be used somewhere outside

1587843205
drasko
maybe by including this file?

1587843348
drasko
Something like this maybe:

1587843901
nephele
Is there a zig mailing list?

1587844097
ifreund
yeah

1587844117
ifreund
nephele:

1587844376
nephele
Can i send patches and such there?

1587845194
dirkson
Hey all. Tinkering around with using zig to build C. Compared to just calling gcc/clang directly, the binaries zig builds for me are very chubby (Double the size) and include links to libraries I don't use (libpthread, libm, etc). What's going on?

1587845221
ifreund
nephele: i think that github pull requests are preferred, but that's really a question for andrewrk

1587845243
nephele
Yeah i don't have a github account, so was wondering if that was okay too

1587845280
dirkson
I suspect it's somehow related to zig's targets system, but I don't understand that at all. The documentation says that the targets don't depend on system files, then immediately shows a zig-compiled binary linking to the system libraries.

1587845290
nephele
dirkson, clang ships libcxx zig standardlib and musl sourcecode per default

1587845291
andrewrk
nephele, yes you can, but you might have to occasionally send reminder emails if you don't get attention on the patches

1587845310
nephele
zig*

1587845312
ifreund
dirkson: if you're building a debug build then zig is enabling UBSAN and maybe doing other things

1587845325
ifreund
try a release build and see if that's more what you'd expect

1587845334
nephele
andrewrk, ah that is fine, I'll prep my first patch to send then (for compiler-rt)

1587845345
dirkson
ifreund: That'd explain a lot of the oddities for sure. I assume it builds debug default?

1587845352
ifreund
dirkson: yep

1587845463
dirkson
ifreund: And as near as I can work out, the only documentation of the C build process is here? (

1587845523
dirkson
Oh, hey, 0.6 got released? Congrats!

1587845525
andrewrk
what do you mean "the C build process" ?

1587845528
andrewrk
thanks :)

1587845546
ifreund
dirkson: this may be relevant as well

1587845580
ifreund
but in generaly it's the same as building zig code, you just use addCSourceFile()

1587845592
ifreund
s/aly/al/

1587845594
dirkson
andrewrk: I have C code, I want zig to compile it for me. I know it can do it, and there are even rumors that build.zig can do it, but I've had a hard time finding info about it

1587845618
nephele
"zig cc" can be used like you would use clang

1587845631
ifreund
yes build.zig can do it, though docs for the zig build system are somewhat lacking atm

1587845670
ifreund
the link i send has an example which is probably what you're looking for

1587845703
dirkson
nephele: Hey! That's good info. That produces a very similarly sized binary to gcc.

1587845753
nephele
dirkson, there is a nice blog post about that, here:

1587845761
ifreund
there's even a zig c++ though i don't think that's made it into the --help yet

1587845763
dirkson
ifreund:

1587845828
dirkson
Had to work out how to disable mouse support in my irc client. It had... novel ideas of how the mouse should interact, none of which included being able to click or select links :-/

1587845867
nephele
The best irc clients are ones that ban random people on touch input ;)

1587845883
dirkson
Hah, clearly!

1587845914
ifreund
yeah... I spent some time reading source code to write my build.zig but the result is quite nice

1587845936
ifreund
if you're looking for a slightly more complex example:

1587845967
dirkson
nephele: Yeah, your link is great too. Between the two links I should be able to tinker around for some time.

1587845977
nephele
But, can build.zig build me a linux from scratch? ;)

1587846000
ifreund
has anyone tried yet? I don't see why not...

1587846035
nephele
Well, i did start writing a zig executable to namespace and start compiling stuff, but i didn't use build.zig :P

1587846181
dirkson
Idle curiosities: Zig appears to use something clang-related to actually compile. Can that be swapped to gcc? And since zig is aiming at eventual self hosting, does that mean interesting things for the future of zig C compilation? Also, I seem to remember zig grumping at me about my use of tabs in earlier versions, but it didn't mention them when I inserted them in build.zig - Any particular reason?

1587846235
nephele
I really really doubt it, the swapping to gcc part, because zig uses libclang to link against and not clang standalone as such

1587846288
nephele
zig uses llvm in the backend to compile all its fancy stuff, and libclang uses that too, so one big happy compiler based on llvm :P

1587846290
dirkson
That's unsurprising, but unfortunate, as I believe gcc still produces faster code than clang on average. Horrible error messages and debugging though.

1587846332
dirkson
nephele: Yeah, I'm not strong on llvm-stuff. Will zig still use the llvm stuff when it's self-hosted?

1587846348
nephele
Well, no, it will be written in zig

1587846362
nephele
but the zig compiler now using llvm will continue to do so in the future

1587846368
nephele
bootstrapping :D

1587846390
dirkson
Yeah, that makes sense.

1587846684
Snektron
Will llvm be eliminated completely in self hosted?

1587846923
FireFox317
andrewrk, any update on the stream time? :)

1587846959
andrewrk
I'm waiting for my gf to finish playing D&D and then I'll pick a time :)

1587848127
Winterfury
Pardon my noobishness, but does Zig officially require Windows 8 or newer to run? I'm asking because it looks like the binary from zig.windows-i386-0.6.0.zip is not compatible with Windows 7.

1587848141
Winterfury
Running it gives me the message about missing entry point in KERNEL32.dll for GetSystemTimePreciseAsFileTime (which is, according to MSDN, a part of Windows 8 API).

1587848269
ifreund
Winterfury: yes that's right

1587848365
Winterfury
I see.

1587848402
andrewrk
note that microsoft has stopped supporting windows 7

1587848439
andrewrk
zig has longer support lifecycles for non-proprietary OS's

1587848489
marler8997
where does andrew livestream, twitch? and what's is username?

1587848505
andrewrk


1587848543
demizer
yay!

1587848616
companion_cube
a stream tonight? surprise! :D

1587849325
FireFox317
nice! will stay awake for that :D

1587850031
drasko
How to force delay in program? std.time.sleep(3000000); does not seem to stop execution for 3 seconds as I would expect

1587850275
drasko
sorry, just saw that these are nanos

1587851574
yrashk
I was thinking about consistency of the language. Built-in functions do give an appearance of a function call; but not all of them are in fact function calls, are they?

1587851699
andrewrk
ok stream is happening at 19:00 in my time zone, which is in 1hr 6min

1587851925
ifreund
1am, perfect :D

1587852032
yrashk
4pm my time, perfect :)

1587853457
pixelherodev
What's the stream on?

1587853462
pixelherodev
Topic, I mean

1587853814
waleee-cl
pixelherodev:

1587854162
pixelherodev
Ah neat

1587854482
fengb
andrewrk: SSAT?

1587854512
drasko
I have problem with following async code:

1587854566
drasko
handlers are actually not executed asynchronously - when client connects to a server and connection is accepted, whole hadler runs and blocks for 5 secs, preventing other clients to connect

1587854628
fengb
Sleep isn’t async

1587854641
fengb
Async isn’t threading. You need to switch to a non blocking mechanism

1587854663
drasko
Is there an example of a non-blocking TCP server

1587854703
drasko
fengb, or some other example that demonstrates non-blocking mechanism in Zig

1587854792
fengb
Well... the IO handling should be non blocking. Maybe at some point we can switch sleep to be non blocking too

1587854821
fengb
e.g. using the outStream or inStream should “just work”

1587854842
fengb
It’s still pretty new so there may not be a lot of examples

1587855126
Aransentin
I have an array of structs of known length that I'd like to make a bitmask for. Can you make a comptime function that returns an uN for an integer input? e.g. for a list length of 27 I'd get an `u27` back that I can use as a type for my mask.

1587855174
Aransentin
I guess I can write a giant switch with one return statement for every length, but that won't look very pretty.

1587855199
fengb
It’s possible yes. PackedIntArray might be able to do what you want

1587855372
mikdusan
Aransentin: in comptime you can also `const host = @as(std.meta.IntType(unsigned, 27), 0);` and then iterate on AOS, and set each bit on host accordingly.

1587855408
Aransentin
Ah, that's exactly what I want

1587855412
Aransentin
Thanks! :)

1587855462
mikdusan
i'm assuming AOS is comptime known length

1587855495
Aransentin
Yep

1587855801
mikdusan
as fengb pointed out (I've never used it) PackedIntArray looks ideal. maybe PackedIntArray(u1, 27) and then saves you all the bitshift/masking work

