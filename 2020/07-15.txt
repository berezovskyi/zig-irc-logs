1594771452
adamkowalski
how do I create an array literal of types

1594771458
adamkowalski
and cast it to a slice?

1594771542
adamkowalski
also can I generate a struct given a list of types?

1594771968
adamkowalski
@Type seems to be a winner!

1594772199
andrewrk
look at this fun little API:

1594772329
adamkowalski
So it seems we can't create struct/unions though right?

1594772353
adamkowalski
The goal is to be able to create a struct containing a vector for each type passed into the function

1594772377
adamkowalski
So Database(.{i32, bool, []const u8}) would create three vectors, one for i32, one for bool and one for []const uj8

1594772422
adamkowalski
Then there would be a notion of an id, which uniquely identifies each entry. And a map going from entity to the row in the vector it corresponds to

1594772436
adamkowalski
The reason you need the indirection is not every entity has an entry in each column

1594772482
adamkowalski
then you want to be able to iterate(.{i32, bool}, database)

1594772502
adamkowalski
which would allow you to go over all the entities which have those components

1594772508
adamkowalski
can I build something like that?

1594781652
pixelherodev
leeward: modal?

1594781654
pixelherodev
Dumb question, I know

1594781670
pixelherodev
Ahh

1594781689
pixelherodev
I think modal applications

1594781693
pixelherodev
Just like everything else

1594782067
leeward
pixelherodev: I don't disagree in principle; I've just never come across a modal user interface I thought was in the good column.

1594782075
pixelherodev
Kakoune ;)

1594782089
leeward
Keep looking. I'm picky.

1594782276
leeward
Honestly, i3 is not likely to bother me too much on that score. Its modality is pretty limited, and I really don't like trying to click on resize handles.

1594783326
pixelherodev
leeward: for me, the modality of kakoune isn't a big deal; "insert mode vs normal mode" I'm okay with, I dislike more than that though :P

1594803144
Shucks
Heya

1594807529
ifreund
o7

1594813504
ifreund
why can't you use == on two tagged unions?

1594813582
ifreund
guess std.meta.eql works though

1594818629
pixelherodev
ifreund: ambiguity, maybe?

1594818644
pixelherodev
Do you want to check just the *tags*, or also the *contents*? What if the contents can't be compared via `==`?

1594818738
ifreund
right, since the contents may not be comparable with == it makes sense

1594819807
companion_cube
if == is pure bit equality, yeah

1594830074
marnix
I think have a need for some kind of polymorphism-- how can I have a function that returns one or the other iterator over strings (runtime choice depending on function args)?  Any pattern people can point me to, or an example?

1594830592
ifreund
marnix: the return type can't be comptime known?

1594830749
marnix
No, the input is a list of strings, and the return value is either a straight iterator over that list, or (depending on the first string in the list) done decoding needs to happen, which I'd like to be done in a separate iterator (without first storing the decoded list).

1594830925
ifreund
well, you could always return a tagged union

1594830976
ifreund
this seems like fairly strange code structure tbh but I don't have a lot of context

1594831092
marnix
ifreund: I could I guess. But API I'm looking for: input = strings, output = something the caller can keep calling `fn next() []const u8` on.

1594831230
marnix
ifreund: it's just like a transparent auto-detect decompressor: if gzip header then decompress+stream, if no recognized header then just stream the raw bytes.

1594831331
ifreund
marnix: one way to make this transparent would be to return a struct containing a tagged union and a next() function

1594831364
ifreund
this next() function would delegate to a next function on the active field

1594831459
ifreund
or if there are really just two things it could just be a bool and an if statement in the next()

1594832171
ifreund
marnix: I'm a little confused, shouldn't it just return a slice of bytes that may or may not have been decompressed?

1594833585
leeward
marnix:

1594833640
leeward
Also, alexnask made

1594833800
leeward
Those would let you return an iterator, though I kinda like the tagged union approach for your case.

1594836214
marnix
ifreund and leeward: Thanks, I've seen those interface suggestions before-- probably indeed will go with an iterator that contains the two iterator types, and next() switches. But will consider tagged union too. Thanks for your thoughts!

1594838941
pixelherodev
andrewrk: I've taken your "python-as-calculator" idea a step further: if you set up an alias that auto-sets up `decimal` and precision, you can get a really nice arbitrary precision calculator

1594839123
leeward
Isn't python-as-calculator in the python tutorial?

1594839133
pixelherodev
I wouldn't know

1594839137
pixelherodev
What python tutorial is this?

1594839170
leeward
the official one

1594839176
pixelherodev
I haven't read it lol

1594839191
pixelherodev
I picked up Python by working on the KnightOS SDK a few years back :P

1594839194
leeward


1594839221
leeward
I read that on a train from Worcester to Boston in...2002? Not the py3k version, of course.

1594839222
pixelherodev
Meh, that doesn't really count

1594839244
pixelherodev
It's using that to show language fundamentals, it's not seriously saying "use this as a real legit calculator!"

1594839251
pixelherodev
Whereas that is exactly what I'm doing :P

1594839266
leeward
It's probably the reason I use Python when I need a calculator.

1594839299
fengb
Back in my day, I had to from future import division

1594839314
pixelherodev
I've started doing e.g. `from decimal import *; float(round(Decimal(5.20 * pow(10, 23)) / Decimal(6.02214 * pow(10, 23)), 3))`

1594839324
leeward
Back in my day, I had to remember to put "." at the end of at least one of my integers.

1594839351
leeward
Except it's still my day.

1594839361
pixelherodev
Back in my day, we didn't say "back in my day" because it was the present!

1594839380
fengb
Kids these days

1594839388
fengb
Respect your elders

1594839390
leeward
Okay, zoomer.

1594839489
leeward
Mmm, avocados.

1594839507
leeward
Er, I mean...That looks like chem to me pixelherodev.

1594839627
pixelherodev
lol

1594839633
pixelherodev
That is very much what it is

1594839643
pixelherodev
Would be neat to have a zig interpreter for it instead ;)

1594839657
pixelherodev
Maybe I should make a Zig AST interpreter and use it to make a REPL...

1594839661
pixelherodev
No wait, terrible idea

1594839689
leeward
scipy.constants has Avogadro in it, along with a bunch of other useful physical constants.

1594839702
leeward
Is that a terrible idea, or the first step in making Zig JIT?

1594839739
leeward
You know the story of how the first lisp implementation went, right?

1594839770
pixelherodev
Nope, but I think you'll enlighten me :)

1594839805
leeward
They were trying to implement a compiler in assembler (or some 50s language), and when they got to eval, the lightbulb went off.

1594839820
leeward
There's an interesting paper somewhere, I'll see if I can find it.

1594839936
leeward


1594840116
leeward
I got my chronology a bit wrong: they wanted to demonstrate that lisp was better than other languages, and so they specified eval. S.R. Russell noticed that eval could serve as an interpreter, hand-coded it, and

1594840151
pixelherodev
Whoa

1594840156
pixelherodev
I've been away for a few

1594840163
pixelherodev
Amazing work, Andrew!

1594840398
andrewrk
thanks

1594840408
andrewrk
next up is

1594840432
andrewrk
which will finally make it expressive enough to test register allocation

1594840869
andrewrk
I was thinking a lot about self-hosted codegen recently and I think we can actually beat llvm perf in debug builds

1594840889
andrewrk
I mean not only compilation speed, which is the primary goal of debug builds, but also runtime perf

1594840893
leeward
llvm's run time or compile time performance?

1594840895
leeward
I'm slow.

1594840971
andrewrk
we'll find out within a couple weeks whether this is the case

1594841094
fengb
LLVM debug builds are very much not optimized. It doesn't even convert divide by 2

1594841193
leeward
That makes sense if you don't run it through an optimizer.

1594841228
ifreund
imo compilation speed shouldn't be sacrificed for optimization, but if making things run faster is trivial and dosen't affect compile speed why not

1594841245
andrewrk
yeah there is a lot to be done that does not affect compile speed, such as lowering div-by-2 as a shift

1594841276
andrewrk
but mainly I'm thinking, using registers as variable locations

1594841297
andrewrk
llvm does not provide the ability to do this when you want to specify debug info for them. but DWARF supports this. it's a limitation of llvm's api

1594841396
leeward
llvm's architecture is to have optimizers perform transformation on IR, right? It makes sense that "check the denominator to see if it's 2" would be in an optimization pass.

1594841439
fengb
I found it semi-surprising given that GCC converted it. Maybe the default shouldn't be "zero optimizations" as much as "minimal"

1594841451
fengb
And possibly have a separate flag for zero optimizations

1594841461
leeward
Interesting. That's the #1 reason I use debug builds: variable location optimized out.

1594841474
leeward
s/debug builds/-O0

1594841613
andrewrk
even if you switch a variable to a different register, DWARF has a way to annotate this

1594841622
andrewrk
it's really quite powerful

1594841639
andrewrk
I'm guessing PDB has the same, but I have not verified this

1594841695
leeward
It's probably worth checking to make sure gdb handles those DWARF symbols correctly.

1594841953
andrewrk
wow I'm down to only 61% of zig commits authored by me

1594841960
andrewrk
ya'll are amazing

1594841996
leeward
We do double duty: PRs cost you time that you could be spending writing code.

1594842102
leeward
Is there really no option to name the output of "zig build-obj"? I don't see a -o.

1594842196
andrewrk
in self-hosted it's -femit-bin=name but I don't think that has been backported yet

1594842206
leeward
Fair enough.

1594842222
andrewrk
well you can also just use `--name foo` but that is not a file name, it affects all build artifacts

1594842229
fengb
Would you really be happy to spend your time merging PRs instead of coding though? :P

1594842239
fengb
I suppose that's why you're looking to hire >_>

1594842274
leeward
It's interesting to see what features were not demanded in stage1.

1594842292
andrewrk
any help on PRs from the hire would be welcome, but realistically I'm forseeing their time spent mostly elsewhere

1594842321
andrewrk
it's also not a top-down management structure, no mandated tasks. we pick somebody motivated and capable and then trust them to decide how to spend their own time

1594842326
andrewrk
so I may be stuck with PRs after all :)

1594842342
fengb
Feels like the Peter principle

1594842355
andrewrk
never heard of it

1594842359
fengb
You're too important to do real work now

1594842370
andrewrk
eh we'll see about that

1594842388
leeward
Peter principle: people get promoted until they're no longer good at their jobs.

1594842405
companion_cube
I like the idea that andrewrk just wants to get zig done and move to other things

1594842410
companion_cube
best way to avoid feature creep :p

1594842413
andrewrk
can't get promoted if you don't have a boss

1594842506
fengb
You're getting de facto promoted

1594842510
leeward
But then you went and started the ZSF, so now you have an employer.

1594842518
fengb
No title change but the workload is different

1594842544
fengb
Oh yeah, Josh and Mason are your bosses now :P

1594842557
fengb
And yourself 🤔

1594844324
leeward
woot, Zig code running on my nRF52840

1594844361
leeward
That was an awful lot less painful than the AVR version.

1594845245
pixelherodev
leeward: what ISA?

1594845265
BeardPower
The latest show-time was really great! Congratulation on the first fund-raising.

1594845374
leeward
pixelherodev: It's a Cortex-M4 with hard float.

1594845385
leeward
so...armhf

1594845396
pixelherodev
Ahh, okay

1594845475
leeward
In fact, it's not even worth writing up a howto. Just build for "-target arm-freestanding-eabihf -mcpu=cortex_m4" and it works. Pretty sweet, now that I think about it.

1594847144
epmills
hey, all.  hope you're safe and well...

1594847233
epmills
wondering if anyone builds their apps for multiple targets, naming the binary with the version number and maybe architecture in the filename...

1594847250
epmills
something like 'foobar-1.0.0-x86_64-apple-darwin'

1594847279
epmills
anyone use build.zig for this, makefile or other?

1594847335
epmills
would love to automate this for multiple architectures and auto-generate SHAs for the binaries in a single step.

1594847672
BeardPower
Some non-programming/language question: are there any ideas of future fund-raising on the table yet?

1594847851
leeward
epmills: I think --name might be the only way to do that. Alternatively, you could put the different targets in different --output-dir s

1594848043
leeward
build.zig would work fine for it, though, if you're into that sort of thing. I think any non-build.zig build system that lets you specify commands to run would work too.

1594848191
epmills
leeward: thanks for your ideas

1594848568
leeward
no problem

1594849523
andrewrk
thanks BeardPower!

1594849574
andrewrk
BeardPower, you can ask Loris that question. His handle in this channel is kristoff-it but he's not here now. He's often in the discord server

1594849636
frmdstryr
What's the best way to convert abs(i32) to a u32? Can I just int cast it?

1594849661
BeardPower
andrewrk: Thanks! I will drop him a line and share some ideas/thoughts.

1594849687
ikskuh
frmdstryr, i would even truncate it

1594849692
ikskuh
ah wait

1594849696
ikskuh
that does not work, use intCast

1594849702
andrewrk
std.math.cast

1594849717
ikskuh
andrewrk: that is a thing?

1594849723
andrewrk
oops I mean absCast

1594849741
andrewrk
std.math.absCast allows any operand type and returns an unsigned integer, without the possibility of error

1594849940
frmdstryr
That's perfect, thanks!

1594849996
ikskuh
andrewrk: thanks for absCast :)

1594850006
ikskuh
didn't know that and needed it atm

1594852117
andrewrk
I think I finally understand intuitively what "Data Oriented Programming" means

1594852350
BeardPower
andrewrk: Are you familiar with the Mike Acton's presentations?

1594852366
andrewrk
yeah

1594852387
BeardPower
:-)

1594852401
andrewrk
the one he did at handmade con seattle last year was pretty neat

1594852629
ikskuh
andrewrk, BeardPower: can you explain it in short? or link the talk=

1594852657
BeardPower
andrewrk: Last year? Wasn't that WeAreDevelopers?

1594852725
BeardPower
ikskuh: It's about that all operations are just transforming data. Data in -> transform -> data out

1594852728
BeardPower


1594852740
BeardPower


1594852761
BeardPower
Sorry, the first link has some timestamp...

1594852778
andrewrk
hmm I don't think the one I'm thinking of is online

1594852789
andrewrk
he live coded a simulation during the talk and refactored it

1594852805
BeardPower
Ah, interesting.

1594852838
BeardPower
The papers/stuff he released while he was working at Insomniac Games is interesting as well.

1594852849
andrewrk
it was neat, he ended up getting the core game loop down to just a few bit fiddly instructions

1594852906
BeardPower
They had some coding competition back then. Implementing some algo using the PS3 Assembler.

1594852958
BeardPower
His code reviews are quote fun.

1594852967
BeardPower
*quite

1594853004
andrewrk
lisp code reviews are quote fun

1594853022
leeward
'fun

1594853032
BeardPower
Hehe

1594853311
ikskuh
andrewrk: i really love that there's now a zig meme "do you want that feature? well, implement it in user spcae"

1594853350
ikskuh
after reading some stuff about data-oriented design i had to thing of Jais built-in feature to turn an array of structs to a struct of arrays

1594853366
ikskuh
we can do such with a neat little comptime function

1594853383
andrewrk
ikskuh, did you see this abstraction?

1594853392
ikskuh
const MyArrayType = StructOfArrays(struct { x: i32, y: i32 });

1594853404
ikskuh
i'll take a look

1594853422
ikskuh
github definitly needs an option to watch only certain events

1594853428
andrewrk
ahh yeah! that's the pattern I did here too, passing a struct as the input to decide a different memory layout

1594853432
ikskuh
i would love to get notifications for creation and merging of all PRs

1594853457
ikskuh
i still think @Type should support structs, especially for stuff like that

1594853462
fengb
Watch the repo?

1594853469
ikskuh
fengb: i did that…

1594853479
ikskuh
my email account is overflowing even from

1594853500
fengb
Oh I disabled email

1594853523
andrewrk
i just let the ziglang emails wash over me, like waves on the beach

1594853527
ikskuh
i ignore the github notifications completly

1594853555
fengb
I generally hate email notifications because it's so spammy

1594853565
fengb
Web notifications work pretty well though

1594853579
fengb
... not desktop web notification spam. I mean in websites

1594853585
ikskuh
i really don't like the github interface for notifications :D

1594853592
ikskuh
i just switched over to email completly

1594853717
ikskuh
TrailerFlags is neat

1594853989
andrewrk
it took VarDecl down from always being 208 bytes to being 32 bytes for simple ones and then more bytes only when extra stuff is added

1594854071
andrewrk
e.g. `const x = 1;` is 40 bytes and `const x: i32 = 1;` is 48 bytes

1594854105
andrewrk
there's a lot more slimming of the AST memory layout that can be done, this is just scratching the surface

1594854166
fengb
Will there be bytecode soon™? :P

1594854202
andrewrk
I think the question behind the joke is whether there will be an on-disk format

1594854236
andrewrk
I don't think so for the AST. Parsing is pretty fast. Might as well just read the original source files again

1594854280
andrewrk
maybe for post-analyzed ZIR. I can imagine that there was a long-running comptime function that does a computation, and it could save a lot of time to store post-analysis ZIR

