1592526724
leeward
Heh, the CI jobs that failed include one called BuildLinux: windows.zig

1592531058
andrewrk
leeward, pretty much all the CI jobs cross compile for all the targets :)

1592531100
leeward
It's pretty sweet that they can do that.

1592546046
leeward
Wow, those tests took a long time to run. #5629 updated. Hopefully it can be denied on its merits now, instead of because it doesn't work :P

1592548345
pixelherodev
andrewrk: want me to add a harness for Zig code? :)

1592549005
andrewrk
pixelherodev, if you want to code something up against my zig-ast-to-zir branch between now and ~10 hours from now, go for it, I'll take a look before I resume coding on it tomorrow

1592557434
pixelherodev
Gotcha

1592557472
pixelherodev
andrewrk: If I don't fall asleep, I'll try to get it done within the next two or three hours :)

1592564264
pixelherodev
oh I see

1592564277
pixelherodev
You just create a Module with a .zig file instead of a .zir one

1592564349
pixelherodev
This should probably use the same TestContext but a ZigCase instead of a ZirCase

1592564357
pixelherodev
Definitely shouldn't try mixing the two types of tests :P

1592568086
pixelherodev
andrewrk: figured out a design for the harness, will try to get it in within the next three hours

1592568626
gonz_
andrewrk: I see we fell in love with Tracy at the same time. Someone posted the Tracy video on Twitter like a week ago and I had the exact same feeling about it

1592568637
gonz_
Last friday I wrote this to my colleagues: "This tool, though. Whenever I think the video has peaked it just keeps going..."

1592578524
blinghound
Has anyone had any luck compiling freetype on windows in a zig build?

1592579588
blinghound
ok I successfully linked FreeType with my zig project. I had to configure and build FreeType from scratch with mingw64 to get libfreetype.a, then include the freetype headers and link the library file

1592579609
blinghound
god the FreeType build system is messy

1592580214
leeward
Hoonay, something worked!

1592580550
leeward
But not my r key

1592580780
leeward
The quick version of a netsplit

1592582077
dch
leeward: thanks for your libsodium wrapping post, really appreciate that

1592582467
leeward
dch: Any time. I'm glad you liked it.

1592582624
leeward
Someone raised an interesting point in a reddit comment about that post: declaring that a function returns `ErrorUnion!whatever` might actually be worse for usability than having it just return `!whatever`. I'm curious if anyone around here has thoughts on that.

1592582699
leeward
The reasoning is that a caller has to put a bunch of errors that won't ever happen (assuming the function returns an incomplete subset of ErrorUnion) in their catch switch, or use `else => unreachable` or something.

1592583610
blinghound
Would someone be able to explain the differences between array/slice/pointer syntax like [], [_], [*], [*:0] etc?

1592583983
ifreund
[] is a slice, which is a combination of a [*] pointer to many and a length

1592584013
ifreund
[3] is an array of three items, a block of contigous memory

1592584039
ifreund
[*:0] is a null terminated pointer, which should be familiar from how strings work in C

1592584081
ifreund
it is a signle pointer to the start of the string, and you then read from memory starting at that address until a null byte is found

1592584098
ifreund
you can also use other terminators though, for example [*:5]

1592584121
ifreund
does that clear things up at all? any specific questions?

1592584173
blinghound
awesome. Thanks a bunch ifreund

1592584183
blinghound
ah just wanted to know what [_] means too

1592584201
ifreund
the _ means that the compiler should infer the length

1592584228
ifreund
so [_]u8{ 1, 3, 4} is the same as [3]u8{ 1, 3, 4}

1592584249
mq32
btw, sobeston did this awesome:

1592584259
ifreund
also note that a pointer to an array can be coerced to a slice, since the size of the array is known

1592584293
blinghound
@mq32 cheers, that's very helpful too

1592584307
mq32
7 hours old :D

1592584310
blinghound
ok so [_] can only be used when the length is compile-time known?

1592584316
ifreund
yup

1592584320
mq32
nah, not quite

1592584325
mq32
it can be used in an array constructor

1592584326
mq32
so

1592584329
mq32
[_]T { … }

1592584336
mq32
you cannot infer array sized like this:

1592584341
ifreund
it's comptime known then no?

1592584342
mq32
fn f(param: [_]T) void

1592584350
ifreund
oh really? that's sick

1592584366
mq32
note: you can not_!_

1592584376
ifreund
:D i can't read

1592584378
blinghound
ahhh I get it now

1592584405
blinghound
I'm also trying to allocate memory for a c string

1592584406
mq32
var x : [_]i32 = [_]i32 { 1, 2, 3 };

1592584421
mq32
the first use of [_]i32 is not allowed (specifying the type), but the second one is (instantiating an array)

1592584432
mq32
you can use std.mem.dupeZ for that

1592584443
mq32
or if you want a static string:

1592584455
mq32
var c_string: [*:0]u8 = "Hello";

1592584497
mq32
this means "[]" → collection; "*" → unknown number of elements; ":0" → terminated by a 0 value of type u8

1592584540
blinghound
I have to allocate space for the string returned from the opengl call glGetShaderInfoLog(GLuint shader, int len, int chars_written, char *log)

1592584558
blinghound
I'm not entirely sure how to allocator the memory need for char *log

1592584563
mq32
ah

1592584569
mq32
you can use an allocator

1592584572
mq32
(doh)

1592584582
blinghound
yep I'm using c_allocator

1592584598
mq32
ah

1592584616
mq32
var ptr = try c_allocator.alloc(u8, 1000); // will allocate 1000 u8

1592584677
blinghound
I'm getting error: expected type '[*c]u8', found '[]u8'

1592584696
mq32
ah

1592584698
mq32
[]u8 is a slice

1592584707
mq32
you can convert the slice to a pointer by using ".ptr"

1592584724
blinghound
that did it!

1592584730
mq32
glGetShaderInfo(…, slice.len, &chars_written, slice.ptr)

1592584736
blinghound
This community is amazing

1592584741
blinghound
thanks guys

1592584818
mq32
you're welcome

1592606357
ifreund
ew, did the github design update just go live for anyone else?

1592606361
ifreund
i can't seem to disable it

1592606443
leeward
looks mostly the same to me

1592606618
ifreund
this is what I've got now

1592606629
ifreund
maybe my dark theme thing is messing with it though

1592606673
leeward
Yeah, I don't have one of those.

1592606727
ifreund
nope it's like with it disabled as well

1592606821
ifreund
huh, it's back to normal now

1592606830
ifreund
github needs to get their shit together

