1594253145
andrewrk
hello from my main laptop again

1594253152
andrewrk
whew, I think it's all finally sorted out

1594253175
andrewrk
gotta love about linux that you can just copy the home directory and get everything exactly like it was

1594253190
shachaf
Was this battery swelling on the XPS 15?

1594253195
andrewrk
yes

1594253198
shachaf
I have had the same problem on the same computer.

1594253797
pixelherodev
Then again, the batteries on my laptop aren't exactly good

1594253806
pixelherodev
They're just... better than dealing with replacing it :P

1594253958
leeward
I like that user-replaceable battery thing.

1594253976
pixelherodev
I love that

1594253985
pixelherodev
It helps with the fact that a lot of the batteries are awful :P

1594253989
leeward
Too bad it's expensive.

1594254036
leeward
I once worked on a product that dropped it as a feature because it saved something like $3 in parts. Gold contacts are pricey.

1594254048
pixelherodev
wowzers

1594254053
pixelherodev
... why are they gold?

1594254067
leeward
It had to handle 13 amp transients.

1594254079
pixelherodev
...ah.

1594254102
leeward
Speakers are like that. Bass is power intensive.

1594254153
leeward
V = IR, and P = IV. 13A at about 3.5V makes for a big drop (and amount of heat) in bad conductors.

1594254203
pixelherodev
gotcha

1594254213
pixelherodev
surprisingly enough :P

1594254214
leeward
huzzah

1594254267
leeward
Anyway, soldered in batteries saved millions of dollars.

1594254288
pixelherodev
Ah right

1594254290
pixelherodev
It's on scale

1594254294
leeward
yeah

1594254301
pixelherodev
... frankly, I'd pay $3 more for it to not be soldered

1594254309
pixelherodev
I'd gladly shoulder that cost to avoid soldering it

1594254311
pixelherodev
(sorry)

1594254370
leeward
Given their markup from BOM cost, it would be more in the $15-$30 range.

1594254391
pixelherodev
... why?

1594254392
leeward
On a $200 speaker, that's a differentiator.

1594254394
pixelherodev
Sorry, that just

1594254397
pixelherodev
makes no sense, logically

1594254405
pixelherodev
Crap, line spamming again, sorry

1594254413
pixelherodev
Discord has got me into bad habits

1594254424
leeward
Price is a function of many inputs. One is cost.

1594254427
pixelherodev
Let's say their markup from BOM is Blah

1594254450
pixelherodev
If the only variable changed is user convenience and $3 on the BOM, why bother applying the markup there?

1594254472
leeward
That speaker carried a whole division of the company that was bleeding money while it was being sold.

1594254480
pixelherodev
Heck, just the opposite; wouldn't people be more likely to buy it it was user servicable anyways?

1594254482
pixelherodev
Ah

1594254551
leeward
It was the second iteration of that model, so they had data on how many people actually replaced their batteries. If people have to send it in to be serviced, it actually costs more.

1594254576
pixelherodev
For the company, you mean?

1594254579
pixelherodev
And thus for the consumer?

1594254579
leeward
yes

1594254584
pixelherodev
... so, again: why?

1594254594
pixelherodev
If it's cheaper to just make it user-servicable, why not do so?

1594254608
leeward
The company eats the cost of servicing it, but that $3/unit cost waayy more than their RMA costs.

1594254631
pixelherodev
... again, why not just mark it up by $4 or something? Have a lower markup from BOM?

1594254636
pixelherodev
That seems really, really poorly thought out

1594254648
pixelherodev
Maybe I should stop applying pesky logic to corporations

1594254662
leeward
The markup was driven by the business people.

1594254669
pixelherodev
Fire 'em!

1594254684
pixelherodev
They're clearly either incompetent or malicious!

1594254685
leeward
It was actually that company's first really high volume product. Before that, a few hundred thousand units was a huge seller.

1594254710
leeward
So there was an institutional tendency towards high margin products.

1594254809
pixelherodev
Ahh. So the problem was that they were human and inherently flawed? :P

1594254825
leeward
There's also the price thing. $199.95 is a popular number. If a typical consumer (not you;) is looking at a shelf and sees one speaker for $200 and another for $204, they're going to pick the $200 one more than 50% of the time.

1594254844
leeward
There are many problems, but they mostly come down to humans being inherently flawed, yes.

1594254877
pixelherodev
And the educational system, apparently; teach people to know better than that and the companies wouldn't have incentives to treat their customers like idiots

1594254884
fengb
Life would be better without pesky humans

1594254894
pixelherodev
Depends on your definition of life

1594254894
leeward
fengb: Preach it.

1594254908
pixelherodev
And whether you're qualifying which humans to be rid of or declaring all of them as pesky

1594254935
fengb
Psychology is pretty fascinating

1594254943
fengb
Weâ€™re all bags of meat and hormones

1594254958
fengb
Full of irrational dispositions

1594254995
pixelherodev
Don'tcha love thinking about how we're just made up of meat, vampire juice, and tiny bits of minerals, and yet we have the arrogance to think we're better than everything around us?

1594255011
leeward
Well, to be fair, we are pretty awesome.

1594255023
pixelherodev
I disagree; it's more that everything else around us is boring

1594255031
pixelherodev
or, rather, that we don't appreciate what's around us

1594255034
fengb
We taught a rock how to think by shoving in some lightning

1594255035
leeward
Not sure how those statements are different.

1594255049
pixelherodev
We're not

1594255073
pixelherodev
The only difference is that we're aware that we're squishy

1594255074
leeward
fengb makes a good point. I don't see any squirrels teaching rocks to think.

1594255093
pixelherodev
Arguably, we're just meat that's been taught to think

1594255107
pixelherodev
plus, we haven't actually taught rocks how to

1594255116
pixelherodev
Calculation != sapience

1594255128
leeward
Details, details.

1594255141
andrewrk
the battery may be a piece of garbage on this laptop but I just compiled LLVM from source in 18 min

1594255171
pixelherodev
lol

1594255175
pixelherodev
that's... honestly impressive

1594255180
pixelherodev
Shouldn't be though

1594255199
fengb
Enjoy the little things

1594255236
leeward
I haven't tried compiling llvm on this machine, because the binary distribution works for me, but it's pretty beefy. Now I'm curious.

1594255246
leeward
The "llvm compiled from source" benchmark

1594255462
andrewrk
pro tip, use `-G Ninja` because it will properly utilize your cores without OOMing when linking

1594255558
leeward
ooh

1594255577
leeward
Can Zig's cmake do that?

1594255590
leeward
Though...I do have 64G on this thing.

1594255665
leeward
apt-get source llvm-10-dev

1594255721
andrewrk
yes

1594256188
leeward
nifty

1594256635
leeward
Heh, ninja fails to build Zig way sooner than make. virtual memory exhausted: Cannot allocate memory

1594256649
leeward
turned off overcommit because oomkiller was taking out my ssh session

1594256680
andrewrk
huh, alrighty then

1594256683
leeward
(this is on an RPi 1B, no surprise it can't build Zig)

1594256699
andrewrk
we'll get there

1594256703
leeward
Yep

1594258607
leeward
andrewrk: Your computer is fast. Build time for llvm on my desktop built in 2020: 17m14s (95m58s user)

1594259735
leeward
Interesting. 10 seconds faster with make

1594260447
pixelherodev
leeward: could be noise

1594260456
leeward
Yeah, it's a pretty tiny effect.

1594260469
leeward
Still, interesting that the difference is negligible.

1594260495
pixelherodev
Did you specify core utilization manually for them?

1594260506
leeward
for make yes, for ninja no

1594260528
pixelherodev
I wonder what'd happen if you limited ninja to $(nproc) instead of $(nproc+2)

1594260542
pixelherodev
(it defaults to using two jobs more than your physical CPUs)

1594260553
pixelherodev
But please don't testit

1594260558
pixelherodev
test it *

1594260574
leeward
I used n+1 for make. I might test it later, when I'm not using the computer.

1594260589
pixelherodev
Please don't lol

1594260595
pixelherodev
It's not worth wasting the energy for that

1594260617
leeward
Science!

1594260622
pixelherodev
That's a terrible reason

1594260845
fengb
Beats mining bitcoin

1594260940
pixelherodev
So does using AI to determine the best spot to hide a murder victim

1594260946
pixelherodev
Or nearly anything else you can think of

1594260965
pixelherodev
Literally using a computer to plot heinous crimes is less bad than mining bitcoin

1594260969
pixelherodev
That's a really,

1594262575
leeward
My level of regret for not buying bitcoins when they were 20 cents is low. It's just...not good for the world.

1594267474
andrewrk
I pushed the register allocation branch. I didn't get to a testing checkpoint (or even finish the implementation yet) but the tests are passing and this will prevent merge conflicts

1594267517
andrewrk
pixelherodev, you now have liveness data in your C codegen. for each ir.Inst, you can ask if it or any of its operands die after the instruction

1594267526
andrewrk
see the new methods on ir.Inst

1594267635
xackus
andrewrk: idk if it's still relevant but #5811 passed tidy locally

1594267651
andrewrk
thanks!

1594267731
xackus
i dozed off early yesterday

1594277655
wilsonk
leeward: you might want to rebuild llvm-10 with clang-10 (I mentioned this to Andrew in the past also. It can be useful if you have to build llvm often). LLVM-10 actually builds about ~6% faster on my machine with clang-10 than with clang-9 (~15% faster than clang-8). And just to show off...llvm-10 with clang, compiler-rt and lld builds in 5 mins 11 seconds here ;)  ... that is with a full "link-time-optimization + profile-guided-optimizat

1594278429
leeward
Thanks wilsonk, I'll keep that in mind.

1594279059
pixelherodev
andrewrk: nice!

1594279345
pixelherodev
ooh, and CBE cleanup got merged :)

1594280166
pixelherodev
Going to need to update CBE with the new features soon

1594280702
andrewrk
pixelherodev, if you want some inspiration for what to contribute: make an API that abstracts getting the C ABI. basically it gives you an iterator where you tell it a Type, and it returns the next MCValue that is where to store/fetch that parameter

1594280724
andrewrk
this abstraction would be used both for calls, and for getting parameters, and would abstract over the arch

1594282101
pixelherodev
andrewrk: gladly :)

1594282132
pixelherodev
Might be a few days; I'm a bit busier now

1594282141
andrewrk
same :)

1594282168
andrewrk
for any design questions, here's the guiding principle: write it in such a way that a contributor could glance at the code and understand how to add support for a new arch

1594282257
pixelherodev
Righty

1594282275
pixelherodev
andrewrk: does this mean function params are done in AST -> ZIR?

1594282307
andrewrk
"done" ?

1594282334
pixelherodev
enough for CBE :P

1594282351
pixelherodev
implemented*

1594282401
andrewrk
ahh I see what you're asking. yes

1594282405
pixelherodev
great

1594282422
pixelherodev
that means i can add a test separating exit into a syscall() call ;)

1594282755
pixelherodev
andrewrk: should _ handling be moved to Assignment astGen instead of astGenIdent?

1594282764
pixelherodev
It's only a valid "identifier" for assignments, correct?

1594282802
pixelherodev
Assign generation could probably just special-case it to ignore the lhs

1594283263
andrewrk
it's valid for payload captures too

1594283287
andrewrk
however it may make sense to handle in all those situations explicitly

1594283312
andrewrk
I suggest to leave the compile error in until you're prepared to tackle the problem everywhere

1594299727
pixelherodev
andrewrk: gotcha, makes sense

1594305369
forgot-password
Since when does casting a f64 to f32 via @floatCast cause a compile error? Is this intended?

1594305375
forgot-password
Via @floatCast, by the way

1594305386
forgot-password
Oh, I said that, sorry

1594305442
leeward
Is the number comptime known, and more precise than an f32 can handle?

1594305522
forgot-password
Yes it is comptime known, but the value is 0.001534, which should be perfectly fine for a f32, no?

1594307220
leeward
looks like no

1594307250
leeward
@truncate might help you if you don't mind losing precision.

1594307314
leeward
It seems that isn't a number that can be precisely represented with floating point.

1594307378
leeward
0x3f59220ff540895d <- the actual bits of the f64

1594308033
forgot-password
Alright then, thank you. I just do the calculation at runtime now, since it were too many instructions for comptime and I couldn't be bothered to calculate the branch quota

1594308476
leeward
Oh, hey, @truncate doesn't work on floats.

1594308484
leeward
At least, the docs say it doesn't.

1594308719
leeward
Huh, the documentation for @floatCast says it may cause the numeric value to lose precision but using it gives a "loses information" error. I think forgot-password found a bug.

1594308855
fengb
"@floatCast: Convert from one float type to another. This cast is safe, but may cause the numeric value to lose precision."

1594308864
fengb
Is this documentation wrong and it's throwing an error?

1594308881
leeward
Yep.

1594308925
leeward
There doesn't appear to be any other mechanism for dropping bits from a float, so I think the implementation is wrong and the documentation is right.

1594311608
scientes
it might be that llvm lacks the right intrinsic

1594311616
scientes
lacks support

1594311629
scientes
can you post the error?

1594313972
leeward
scientes:

1594314029
scientes
oh nvm

1594314033
scientes
i thought you were getting llvm error

1594318830
pixelherodev
I hope to have `_ = blah;` implemented for both ZIR and CBE shortly :)

1594318840
pixelherodev
(with other forms of assign continuing to return a TODO for now)

1594319435
pixelherodev
Whoops. Assertion failure :PP

1594319447
xackus
stage1?

1594319599
pixelherodev
stage2

1594319602
pixelherodev
stage1 already works with it lol

1594319621
pixelherodev
Ah, hm

1594319629
pixelherodev
Should probably just make this fail more gracefully

1594319652
pixelherodev
If two errors occur on a decl (which is an internal error) it currently just `unreachable`s

1594320139
pixelherodev
`Internal error: attempted to override error TODO implement type TypeInfo.Int` That's more useful :)

1594320933
pixelherodev
Going to need error tests for CBE

1594320937
pixelherodev
Errors are showing up on the wrong lines

1594320943
pixelherodev
Found the issue though ;)

1594321526
pixelherodev
`:1:1: error: return type mismatch: expected u8, found comptime_int` pft

1594322499
pixelherodev
Whoa

1594322504
pixelherodev
Semantic analysis is about to cross 20K

1594322550
pixelherodev
Might be worth temporarily putting some pieces behind build_options for faster dev builds

1594322594
pixelherodev
Woot!

1594322596
pixelherodev
Works now!

1594322907
pixelherodev
andrewrk: how does `blah = foo()` show up in Ir?

1594322911
pixelherodev
(analyzed Ir, not ZIR)

1594322946
pixelherodev
Is that a Constant with a value of the Inst?

1594323520
pixelherodev
Test passes! Woot!

1594324867
scientes
pixelherodev, assign(deref foo)

1594324882
scientes
or rather, pointer to foo()

1594325104
pixelherodev
I don't see assign in Ir

1594325124
pixelherodev
Or ZIR for that matter

1594325543
andrewrk
pixelherodev, in stage2 we don't have variables yet, so you can't do it

1594325870
pixelherodev
Gotcha

1594326037
pixelherodev
Just want to add in "return from noreturn" detection

1594326046
pixelherodev
That'll be more complex analysis though

1594328301
pixelherodev
Shouldn't be too bad, actually

1594328312
pixelherodev
Same as tracking "reached unreachable"

1594330207
kllr_sbstn
Hi! I have a question regarding the new AutoHashMap. I wanted to create a a HashMap with key []u8 and got the error `std.auto_hash.autoHash does not allow slices (here []u8) because the intent is unclear. Consider using std.auto_hash.hash or providing your own hash function instead.` But thing is, std has no member `auto_hash` :-/

1594330233
kllr_sbstn
error: container 'std' has no member called 'auto_hash

1594330343
kllr_sbstn
nevermind, found it `StringHashMap`

1594331087
shcv
are there any other kinds of iterators that work with for(), or just arrays and slices?

1594331211
fengb
Just arrays and slices

1594331579
shakesoda
just arrays and slices... but you can do some dirty tricks if you want to upset a local compiler dev

1594331607
shakesoda
tricks like @as([*]void, undefined)[0..@intCast(usize, n)];

1594331611
fengb
That only gets you indexes

1594331617
shakesoda
yeah.

1594331631
shakesoda
it's also hideous! but it's a thing you can do, if you really really want.

1594331634
pixelherodev
You're right

1594331636
pixelherodev
I am upset.

1594331639
pixelherodev
:P

1594331643
shcv
yeah; I was wondering how I might give an api compatible with for to a ring buffer

1594331656
pixelherodev
std.fifo

1594331741
fengb
Hmm, `@as(*[n]void, undefined)` is fewer characters

1594331760
shakesoda
is that equivalent? i swear i tried that

1594331833
fengb
I don't know! They all feel gross

1594331834
shakesoda
unable to evaluate constant expression

1594331843
shakesoda
no luck

1594331847
shcv
well, std.fifo is interesting, but I'm pretty sure it's not compatible with for unless you realign it

1594331858
fengb
Oh yeah whoops, n needs to be runtime

1594332020
shakesoda
does std happen to have a thread safe arraylist

1594332039
shcv
I think it might make sense to group all of the collection, data structure, and container types into a 'collection' directory/library; they're just sprinkled with random names throughout std

1594332062
leeward
New toy in the mail today:

1594332070
shakesoda
i'm betting on "probably" but, again, hard to keep track

1594332104
shcv
leeward: what is it?

1594332119
fengb
Looks like a calculator ðŸ™ƒ

1594332144
leeward
msp430 dev board

1594332190
shcv
what are your plans for it?

1594333076
shcv
can zig compute test coverage?

1594333097
shcv
or warn about unused / unanalyzed elements?

1594333604
ifreund
not yet

1594333638
ifreund
that may be a job for tooling rather than the compiler though

1594335941
leeward
shcv: nothing specific yet, just gonna see if I can get Zig code to run.

