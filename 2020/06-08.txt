1591575357
nycex
hm, apparently it's not a good idea to parse a 33797 line file at comptime

1591575639
daurnimator
nycex: why not

1591575952
pixelherodev
daurnimator: performance, probably

1591575956
pixelherodev
Stage1 comptime is sloooow

1591576520
nycex
uh yes

1591576556
nycex
I don't think that compilation would have completed in the next few hours

1591580511
nycex
is there a toUpper that works also on unicode characters?

1591580909
andrewrk
not in std lib. you'll need to link in a unicode library

1591581121
nycex
huh okay

1591581188
andrewrk
could you possibly get by without needing to deal with unicode?

1591581206
andrewrk
what's the use case for toUpper?

1591581385
andrewrk
BaroqueLarouche, I really enjoyed your talk!

1591581402
andrewrk
I missed the show today - catching up now

1591581647
nycex
andrewrk: well it's about a tool that handles unicode specifically

1591581654
nycex
so it needs to support such things

1591581670
nycex
but I guess linking such a lib is fine

1591581708
nycex
but is it possible to get a function pointer to a function that takes a comptime known type for it's arguments

1591581711
daurnimator
nycex: unistring is best; otherwise icu

1591581712
nycex
like std.mem.eql?

1591581739
nycex
daurnimator: oh, haven't heard of unistring, guess I'll try that before icu

1591581771
daurnimator
nycex:

1591581790
daurnimator
nycex: note that in unicode you need to toUpper a whole string; not just a single codepoint

1591581810
daurnimator
s/need to/should/

1591581824
andrewrk
these Q&A's of zig showtime are really helpful to me from a language design perspective

1591581827
nycex
yeah I wanted to do that anyway

1591582023
nycex
just gonna post this is a second time since I think this may not have been read due to the other conversation:

1591582036
nycex
is it possible to get a function pointer to a function that takes a comptime known type for it's arguments

1591582863
andrewrk
nycex, if you only need the function pointer to be comptime-known, then you can just use the generic function as the function pointer, no problem

1591582892
andrewrk
if you need it to be runtime known, then you would have to declare a function without any generic args that calls the generic one, and then take a pointer to that

1591582992
nycex
hm yeah I figured that might be needed, thanks

1591583158
daurnimator
andrewrk: idea: @as to do that

1591583183
daurnimator
`@as(fn (i32) void, somegenericfn)`

1591584358
leeward
Ok, somewhere between 0.6 and now, translate-c has broken for SDL. Time to bisect.

1591585576
leeward
Oof, long stretch where mainline wasn't building is making this less fun than it ought t obe.

1591585580
leeward
ought to be, even.

1591586954
leeward
Well, it's not terribly useful, but #5560 at least points to the range of changesets where it could have been broken. Given the last one in the range's comment, I'm guessing it's either that one or the first one. Might dig into it when the sun is up.

1591588854
andrewrk
leeward, you should be able to bisect with only direct children of master branch

1591590456
daurnimator
btw, please excuse my terseness for a while: I only have one working hand

1591590571
andrewrk
you ok there?

1591590622
daurnimator
had hand surgery

1591604604
s-ol
whats the quickest way I can turn a pointer to a value into a size-1-slice?

1591604762
s-ol
i guess i have to go from single-item to multi-item pointer somehow, but im not sur ehow

1591604860
alexnask_
@as([*]T, ptr)[0..1]  I think

1591604948
alexnask_
Nvm this @as doesnt work, I though any pointer could coerce to [*]T

1591605031
alexnask_
I guess you need to ptrCast

1591605238
s-ol
yeah, that does it, ptrCast then slice

1591606122
andrewrk
you can do a double coercion: @as([]T, @as(*[1]T, ptr))

1591606679
daurnimator


1591606925
s-ol
o/ daurnimator

1591606947
daurnimator
s-ol: hey :)

1591607082
s-ol
daurnimator: how are you? (lets take this part to DM ;)

1591607096
daurnimator
14:30:20 <daurnimator>had hand surgery

1591607098
daurnimator
:P

1591607141
s-ol
next question: zig-fmt always un-wraps function signatures, there's no way around that? I've got some real long signatures for C library callbacks

1591607150
daurnimator
"un-wrap"?

1591607153
s-ol
daurnimator: oof, strain related?

1591607180
s-ol
daurnimator: eh, un-line-wraps, i mean puts the whole signature onto one line

1591607185
daurnimator
cut tendon(s) doing housework

1591607194
daurnimator
s-ol: add a trailing comma

1591607232
s-ol
ahah! thats better ;)

1591607386
s-ol
sounds sucky :/ they got it all back together?

1591607412
daurnimator
supposedly; 6 weeks one handed now...

1591607415
s-ol
guess you're going half speed for a while

1591607444
daurnimator
certain keyboard shortcuts are.... difficult

1591607492
s-ol
well now's the time to learn to type with your toes

1591607560
s-ol
@ptrCast(*ControlServer, @alignCast(@alignOf(ControlServer), userdata.?));

1591607564
daurnimator
will probably take 4 weeks for a footboard to arrive :P

1591607582
s-ol
is there any way to shorten this? ?*c_void -> *ControlServer

1591607594
daurnimator
no that looks about right

1591607623
daurnimator
each piece of that statement is making a separate promise

1591607655
s-ol
yeah, i see

1591607686
s-ol
guess 80w is not a very attainable goal in zig sometimes

1591607710
daurnimator
made for reading/debugging not writing/codegolf :P

1591607749
s-ol
yeah, working on a 1366x760 laptop though I am starting to appreciate horizontal-brevity ;)

1591607760
s-ol
maybe i should turn line wrapping on in my editor

1591607787
s-ol
thats so ugly though >.<

1591607854
daurnimator
120 cols should be fine though...

1591608166
s-ol
yeah, might just need to lower my font size a bit

1591611313
DrDeano
I am having some problems with ChildProcess where after I call `wait()`, I get a `OutOfMemory` but the error return trace says `PathAlreadyExists`. I am calling this with the build file.

1591611900
ifreund
hmm, does Builder.exec() not work for your use case?

1591611913
ifreund
would probably help to see code

1591612140
DrDeano
I need access to the stdout of the process, here is the code:

1591612422
ifreund
DrDeano: Builder.exec() returns the stdout as a []u8, if that's what you need

1591613238
DrDeano
The process i am running doesn't return

1591613315
ask6155
Hey I'm back (If anyone remebers). I decided to try out zls so I built zig master and then zls master and configured it to work with Coc (Vim) and then copied all the keybinds. gd is supposed to jump to definition but it says "Definition provider not found for current document"

1591613412
alexnask
ask6155, Hmm, this is weird. Let me download vim and give it a shot, I know a few people are using zls with coc and no one has reported this

1591613476
alexnask
(are you using vim or neovim btw? Should matter just want to make sure I get as close an environment as possible)

1591613532
ask6155
neovim

1591613553
ask6155
I installed Coc via vim-plug

1591613671
DrDeano
ifreund, but why should I be getting a OOM though as I do the same as the Builder.exec()

1591613979
ifreund
DrDeano: hmm, I don't know.

1591614406
euantor
Is there an easy way using `build.zig` to set a compile-time option that can be checked in code? Something like D's `-version=XYZ` or Nim's `-d:abc=xyz`? I want to implement a compile time feature flag to enable/disable specific functionality.

1591614519
ifreund
euantor: yes, you can use addBuildOption() and then @import("build_options")

1591614522
ifreund
example here

1591614553
euantor
Awesome, thanks ifreund!

1591614574
ifreund
no problem

1591614676
euantor
I thought I'd seen something like it, but the stdlib documentation is a little lacking for the build system right now

1591615071
daurnimator
euantor: indeed; please do help out where you can!

1591615096
euantor
Yeah, I'll try get time to submit a PR to document this at least tonight

1591615516
ask6155
Yeah I tried my zls with emacs (Found a PR on github with instructions) and it works but neovim doesn't

1591615691
gonz_
CoC AFAIK is about as faithful an implementation of LSP as you get outside of VSCode

1591615708
gonz_
It's unlikely that CoC is the issue and by extension neovim

1591617823
alexnask
I just installed coc through plug.vim, added zls to the config (also needed zig.vim) and added the 'gd' nmap and it just works

1591617936
alexnask
(completions seem to work as well). Are you sure all goto definitions were broken? Perhaps it was a specific symbol (like something imported by usingnamespace perhaps?)

1591624058
s-ol
in std.fs.File, is there a way to check how much data an fd has buffered? I'm trying to manually line-buffer input pipes

1591624126
s-ol
if i could get the number of bytes in the fd, then I can pull them out and do my splitting. I need to line-buffer multiple streams at the same time, so I can't just read(1)

1591625289
Aransentin
I thought a little on how dates in the standard library might work:

1591625293
Aransentin
If anyone has an opinion on the "open questions" i pointed out I'd be happy to hear it

1591625425
fengb
I'd probably favor A for monotonic clocks, and B for human clocks

1591625452
fengb
But also... we should probably store TZ instead of offset because it's more "correct", but also a lot more work

1591625482
fengb
And other people in this room have opinions about non-Gregorian calendars

1591625582
Aransentin
Storing just TZ means you need to store the offset as well (or the timestamp itself) or you get ambiguous values when DST changes

1591625591
ikskuh
Aransentin: my experience tells me that you need different types for Dates

1591625660
ikskuh
usually you want to have time stamps to work with for calculations (how many seconds between A and B)

1591625664
ikskuh
and calculator operators

1591625666
ikskuh
so something like

1591625674
fengb
TZ requires TZinfo yes

1591625679
fengb
But that's the whole point

1591625690
ikskuh
GregorianDate(2020, 06, 08) which yields "today"

1591625694
fengb
It's the only thing that humans have an intuition about

1591625703
ikskuh
you can trivially implement "+1 month" on a GregorianDate

1591625718
fengb
Although you can argue that historical dates could be offset based, future times are almost always TZ based

1591625720
ikskuh
but as you said, it's not trivial on a strictly monotonic timelime

1591625748
fengb
We actually had this happen in recent memory. US changed offsets for DST and broke a bunch of stuff

1591625757
fengb
Because most devs don't bother storing the TZ

1591625777
Aransentin
ikskuh: Yeah, I had different types for GregorianDate / JulianDate / etc in mind as well, anything else would he horrific

1591625805
fengb
Jewish, Islam, Lunar

1591625822
ikskuh
i also like splitting date and time

1591625825
fengb
I actually have no clue how to handle non-solar calendars... but they sound painful

1591625836
ikskuh
and only have a "backend time value" which is unix timestamp in signed nanoseconds for example

1591626336
BaroqueLarouche
andrewrk:

1591626350
BaroqueLarouche
andrewrk:  Thanks for your comment on my talk :D

1591633735
pixelherodev
Oh hey, my register patch got merged :)

1591636086
pmwhite
Best way to readStdinAlloc?

1591640512
xackus
andrewrk do you have any specific optimizations in mind that are allowed by not having a guaranteed slice layout?

1591640568
andrewrk
xackus, yes, how they are passed as parameters and return values

1591640608
andrewrk
also potentially being able to have safety for pointer casts to them

1591640706
xackus
thanks

1591641028
xackus
JesseRMeyer asked for rationale behind the layout thing and i got curious myself

1591641089
xackus
i suspected parameter optimization

1591641282
pixelherodev
pmwhite: std.io.getStdIn().inStream().readAllAlloc or soemthing like that?

1591642711
pmwhite
Yeah, I found that a little later. Can't ask for much better than that.

1591642770
pmwhite
Wait, how do you return a non-zero result from main?

1591642798
pmwhite
Oh, it can be a u8

1591643977
FireFox317
andrewrk, you might like these slides on MLIR by Chris Lattner

1591644510
andrewrk
FireFox317, that certainly looks relevant

1591644904
scientes
andrewrk, FireFox317 I was just looking into that

1591645170
FireFox317
scientes, yeah i found it in the link you posted on the C ABI issue. If scientes == shawnl :D

1591645189
scientes
FireFox317, use /whois

1591645346
FireFox317
I see :D

1591652986
ikskuh


1591652999
ikskuh
enter where you are located! let's see where all those ziguanas live

1591653034
fengb
The last time a German started collecting location info

1591653075
pixelherodev
I mean

1591653082
pixelherodev
fengb: Technically it was Americans who did that

1591653087
pixelherodev
IBM did that on behalf of the Germans

1591653092
pixelherodev
So...

1591653095
pixelherodev
Yeahhhhhh

1591653114
fengb
Murica 🇱🇷

1591653156
leeward
Flag of Liberia?

1591653218
andrewrk
on topic please

1591653281
pixelherodev
Sorry

1591653343
andrewrk
zee map is cool, let's just stay away from topics that might make people sad or angry

1591653356
leeward
I was going to make a joke about Zig being unpopular in certain parts of the world, but...11 pins means it's just unpopular.

1591653371
leeward
A thing to change.

1591653383
ifreund
or a small sample size

1591653384
pixelherodev
andrewrk: good call, sorry

1591653394
leeward
ifreund: Ridiculous.

1591653396
pixelherodev
imp'd, yeah

1591653545
companion_cube
wow, 2 people in texas

1591653627
andrewrk
ikskuh, feel free to put this link in the Community wiki page

1591653637
ikskuh
i did already

1591653645
andrewrk
:)

1591653653
ikskuh
we had this at gamestudio community

1591653661
ikskuh
and it's really cool to see how people are distributed

1591653676
ikskuh
and the community still works together and just ignores the physical borders of the world ♥

1591653722
nephele
except for timezones

1591653734
ikskuh
haha

1591653747
ikskuh
the one who does not sleep does not need to consider time zones

1591653752
ikskuh
right, pixelherodev?

1591653756
leeward
Wait, we're supposed to put what time zone we're in? I'm like 8 zones too far East.

1591653759
pixelherodev


1591653767
pixelherodev
yes.

1591653771
pixelherodev
technically.

1591653809
leeward


1591656981
gonz_
Do you have to sign in to add to the zeemap?

1591657040
ikskuh
no, it's not necessary

1591657066
gonz_
I guess I should've asked if there was an upside.

1591657122
gonz_
I accidentally added an anonymous one, feel free to remove it

1591657125
gonz_
Sofia, Bulgaria

1591658159
tgschultz
andrewrk: OutStream.write seems underspecified regarding the return value. My instinct is that it should return '0' if there is a temporary situation (buffer full, requires flushing) that causes there to be no bytes written.

1591658176
tgschultz
However, if one calls writeAll in this situation, its a softlock.

1591658228
tgschultz
On the other hand, returning an error complicates calling code.

