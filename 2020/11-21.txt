1605917228
hlolli__
So far Zig falls under the category of underpromising and overdeliver. Besides healthy and polite modesty, seeing 1,4k tickets on github made me for sure misjudge Zig, I wonder if more people see it the same way from distance.

1605917274
marler8997
1,4k tickets, what impression did that give you?

1605917283
hlolli__
That nothing works :)

1605917297
fengb
Thereâ€™s a lot of bugs for sure

1605918477
radgeRayden
something something people only complain about languages they actually use

1605918579
fengb
Thatâ€™s Stroustupâ€™s justification for C++ yes

1605918836
ifreund
of those issues many are about future features/enhancements

1605918844
ifreund
zig is a very ambitious project

1605918878
andrewrk
I think the ratio of open/close is interesting

1605918929
andrewrk
rust has 6,088 issues open but that's only 17% of their total issue count

1605918935
andrewrk
zig is at 33%

1605919064
ifreund
interesting

1605919086
ifreund
I feel like that has more to do with project age than anything else though

1605919093
andrewrk
good point

1605921618
hlolli__
that sounds good indeed, I have no idea what's inside those 1,4k tickets, it seems almost 50% of them are marked as milestones, so the bookkeeping seems good and the response rate high, something you don't get from compiler repos with too big and alienated community.

1605922737
andrewrk
ifreund, got your 2 os bits fixes into 0.7.x branch

1605927481
pixelherodev
Age is probably the biggest factor

1605927507
pixelherodev
The percentage means little

1605927540
pixelherodev
If there is one critical bug, that can be worse than e.g. a dozen minor platform-specific issues, or grammatical mistakes in documentation, etc

1605927568
fengb
Luckily Zig has all of those bugs ðŸ™ƒ

1605927605
pixelherodev
lol

1605939603
marler8997
what happened to the c_char c_uchar types?

1605942716
andrewrk
accepted but not yet implemented

1605951609
ifreund
andrewrk: thanks, you're the best

1605961042
ifreund
alexnask[m]: any chance zls could get "goto references" for struct fields?

1605968279
HugoDan
helloes

1605968392
ifreund
o7

1605969796
dominikh
are there any plans for Zig getting multiple return values?

1605969844
ifreund
i think better support for tuples would solve that use case

1605969883
dominikh
true

1605969896
dominikh
well, you'd probably also want destructuring assignment

1605970005
ifreund
yeah, I don't think that's likely to get accepted though tbh

1605970030
ifreund
there's discussion of this in some github issue, let me see if I can find it

1605970034
dominikh
then I'm not sure how better tuple support helps. I don't want to access the return values by index :/

1605970055
dominikh
at that point, returning structs would be superior

1605970173
ifreund
true

1605970266
dominikh
zls question: I can't goto definition on any identifiers that are defined in another package. is that supposed to work?

1605970300
ifreund
dominikh: proposal for destructed assignment is still open: #3897

1605970319
dominikh
thanks!

1605970322
ifreund
dominikh: it should work if zls manages to read your build.zig and find the package

1605970358
dominikh
ifreund: hm, weird. my build.zig is pretty similar to yours; dependencies stuffed into a deps/ directory. and building obviously works, so the build.zig should be fine :D

1605970402
ifreund
I think it was working for me on my zig-wlroots branch of river, let me check

1605970433
Nypsie[m]
Works here as well. Do you see the build_runner.zig file pop in your directory quickly when zls is launched?

1605970471
dominikh
I do

1605970791
Nypsie[m]
Are you sure `zls.json` points to the right directories etc?

1605970940
dominikh
not entirely? I only have a global zls.json, and the only thing that is pointed to is the zig lib path

1605971000
Nypsie[m]
I think that is fine, as it will use `PATH` to find the Zig executable

1605971001
Nypsie[m]
Hmmm

1605971020
dominikh
going to definitions of code in the same package is working just fine, FWIW

1605971043
dominikh
let me see if enabling debug output in zls yields anything of use

1605971052
Nypsie[m]
Btw, what editor? I had the same issue before in vscode, but that was me not having zls.json configured correctly

1605971135
dominikh
Emacs

1605971184
Nypsie[m]
Aaaah I see. I have no experience with that unfortunately.

1605971612
ifreund
dominikh: oh shit, destructuring is already accepted for tuples, see #498

1605971739
dominikh
sweet

1605973780
kristoff_it
The preshow is live, Zig SHOWTIME starts in 20 mins!

1605979888
mla
im trying to figure out a hashmap with O(1) for lookup time that does no allocations; essentially what i want is something that allocates a large chunk of memory upfront and doesnt do any of this tombstone / management / other stuff

1605979935
mla
im working in realtime audio and initial tests with HashMap in std lib wernt great

1605979979
mla
does anyone know of something off the shelf / in std lib which might make sense for this?

1605980005
mla
lookups speed basically need to be as fast as array access of an element like mapvals[hashkey]

1605980413
mla
dunno maybe this is what ArrayHashMap does and im using it wrong

1605980613
Nypsie[m]
If the size is known you can use something like `initCapacity`. ArrayHashMap is backed by an array  so if you do a lot of iterations over the hashmap, that could be faster for you.

1605980706
Nypsie[m]
`initCapacity` allocates all the memory needed for the given length, and then you can use `putAssumeCapacity` to insert elements without having to allocate. If the key is a string you can also look at `std.ComptimeStringMap`. If not, I believe there's a library around that does the same but for non-string keys.

1605980874
TheLemonMan
yo andrewrk, was @export what you had in mind? last time we talked about that was a while ago in #3971

1605980964
mla
Nypsie[m]: intersting, thanks hadnt realized about capacity, ill give it a try; i can assume a large chunk of capacity upfront i believe, biased toward loading lots into memory and having fewer cpu cycles

1605981055
andrewrk
TheLemonMan, you mean @extern? or changing topics to @export?

1605981065
TheLemonMan
@extern of course

1605981102
andrewrk
yeah the only problems with it as I see it are that it wouldn't work at a global scope (unless I read the implementation wrong)

1605981148
TheLemonMan
hm? why not?

1605981930
andrewrk
TheLemonMan, the render* functions in codegen.cpp don't get run at compile time

1605981958
andrewrk
let me play with it

1605982065
TheLemonMan
the only problem I see is that sometimes the compiler gets confused by @extern var initializers when they are defined at top-level

1605982381
andrewrk
TheLemonMan, here's my example code:

1605982393
andrewrk
it gives me an error: cannot store runtime value in compile time variable at the @extern

1605982432
andrewrk
it compiles fine if I move it into the function body

1605982444
TheLemonMan
yeah, no idea what's setting the variables to be ConstPtrMutComptimeVar

1605982466
andrewrk
well to make that work I think we would have to create a ZigFn* and set up a ZigValue with x_ptr set to it

1605982481
andrewrk
in ir_analyze_instruction_extern

1605982498
andrewrk
which is more annoying to implement than the way you did it

1605982588
andrewrk
in stage2, we model Value pointers as referencing Decls

1605982603
andrewrk
but the concept of anonymous Decls is more gracefully handled

1605982621
TheLemonMan
hmm, I wonder why it's only fucked up for global variables

1605982624
andrewrk
I should start the LLVM IR backend to motivate you to start caring about stage2 :)

1605982675
andrewrk
ir_render_extern is only called for function bodies

1605982718
TheLemonMan
:O

1605982784
TheLemonMan
that's really a whacky design choice heh

1605982812
andrewrk
why's that? there's plenty of stuff that only makes sense at runtime

1605982833
andrewrk
you're supposed to do that logic in ir_analyze_instruction_extern if you want to do it at comptime

1605982903
TheLemonMan
extern is not doing much at comptime, no? it acts as a variable declaration and weak symbols at comptime don't make much sense

1605982975
TheLemonMan
the ir_analyze part is creating a faux value that other IR can use, that should be enough to pull in the extern symbol iff it's used

1605982989
andrewrk
from stage1's perspective, the comptime thing that extern is doing is creating the LLVM IR global for the extern

1605983012
andrewrk
consider what happens if you take a pointer to a global extern

1605983039
andrewrk
that's a ZigValue with special == ConstValSpecialStatic, x_ptr set to the ZigFn* for the extern

1605983126
TheLemonMan
yeah, my idea was to model this with a ZigValue with special = ConstValSpecialRuntime so that the compiler considers it as completely opaque

1605983171
andrewrk
right. which is useful since it does unblock the project that I was working on, but to be more correct it would have to match the other code for how taking pointers to global variables works

1605983214
andrewrk
that's why we have to not only check if something is ConstValSpecialStatic but if it's a pointer, you also have to care about whether the pointer addressee is comptime or not

1605983244
andrewrk
because we have the concept that "this value is comptime known to point to that global variable" while the global variable's value is runtime known

1605983296
TheLemonMan
alright, that makese sense, I completely forgot the extra indirection layer

1605983311
TheLemonMan
what are you working on? I'm extremely curious

1605983321
TheLemonMan
especially since you mentioned the PIE PR

1605983512
andrewrk
the goal is to make a static linux executable that can open a window and do 3d graphics using vulkan/opengl - one that works on all distributions

1605983542
andrewrk
check out that code sample again:

1605983587
andrewrk
right now (testing on nixos) it gets to the execve, and then I get a crash in glibc, I'm guessing which is due to the exe not being PIE

1605983655
andrewrk
oops, sent you the sample of it not working. here's the working one:

1605983822
andrewrk
so the idea here is to be able to distribute a game that runs on any linux as a simple binary tarball

1605983932
TheLemonMan
oh that's interesting, I wonder if it'll work

1605984021
andrewrk
I think it will! marler8997 did a PoC for using execve with a runtime-detected dynamic linker path and it worked with C code, so the next steps for zig are: (1) PIEs  and then (2) detect wayland/x11/other and dlopen the appropriate .so

1605984074
marler8997
yup, got a PoC working to make sure it would work

1605984341
TheLemonMan
well the PIE part should be easy, the old PR only needs a few touch ups

1605984369
andrewrk
sweet

1605984380
TheLemonMan
it was not working on mips and some recently supported arches such as ppc64 and sparcv9

1605984395
TheLemonMan
but nobody cares about them so :shrug

1605984590
andrewrk
marler8997, are you around to brainstorm some stuff?

1605984605
marler8997
sure

1605984632
andrewrk
ok so the goal is to use dlopen to call XInitThreads. Solving it on nixos first since that's where you and I both are

1605984666
marler8997
so, find so, dlopen, dlsym

1605984668
andrewrk
it's in Xlib.so. so the question is, how do we figure out which Xlib.so to open?

1605984698
marler8997
this is where I always go to find the loader logic to find so's:

1605984706
marler8997
but

1605984710
andrewrk
our trick to find the native dynamic linker is to look at the interp section of /usr/bin/env

1605984710
marler8997
that's what dlopen will do

1605984735
marler8997
wait, finding Xlib.so and the loader are 2 different problems

1605984741
marler8997
which one are we on?

1605984762
andrewrk
but /usr/bin/ has no graphical applications guaranteed to be there that we could use to figure out where Xlib.so is

1605984787
marler8997
you call dlopen first, if that fails, then you fall back to custom lookups

1605984810
marler8997
first, I think you would call dlopen with all possible names

1605984853
marler8997
dlopen will already check the ld.so.cache file, LD_LIBRARY_PATH, the elf runtime paths, letc

1605984865
marler8997
if you just pass it a name that is

1605984873
hlolli_
are there any builtin set types in zig? (with union/intersection/difference etc.)

1605984924
marler8997
custom lookups could be an optional addon if we don't think dlopen's logic doesn't handle all the cases, but I would first start with all the cases dlopen already supports

1605985037
hlolli_
nevermind:

1605985735
frmdstryr
Is there any way to lookup a field using a dotted name? Like `@field(obj, "one.two")`

1605985821
Nypsie[m]
I think `@field(obj, "one").two` will work

1605985906
frmdstryr
The field name is a string though... I can split it and use two @field calls, was wondering if there is anything in std.meta that does this

1605986103
Nypsie[m]
What do you mean with the field name is a string? You mean it's something like @"two" ?

1605986146
frmdstryr
Tring to build a template formatter so given a template and a context return the formated value.. ex "{{user.name}}"

1605986184
Nypsie[m]
Aaaaaaah gotcha

1605986209
Nypsie[m]
I think you'll have to handle this within your template parsing

1605986213
fengb
It doesnâ€™t exist but you should be able to define one yourself

1605986295
fengb
Hmm... might be tricky due to returning a duck type >_>

1605986302
frmdstryr
I did something like this in python where it parsed the string into an ast tree then walked it, think that would work with zig?

1605986334
Nypsie[m]
I wouldn't see why not

1605986688
andrewrk
I think this is a smell

1605987548
andrewrk
marler8997, ok so here's where I'm at: Xlib.so: cannot open shared object file: No such file or directory

1605987596
andrewrk
I'm typing this into a GUI IRC client, so it seems like there should be a way to figure out the RPATH of the currently executing graphical stuff

1605987635
andrewrk
for example, I'm not saying we should do this, but just to prove a point: if you looked at the running processes, noticed one was a known GUI application, then use that pid to find the exe location, then look at the ELF to find where Xlib.so is

1605989754
marler8997
andrewrk, that's an interesting idea

1605989842
marler8997
looking at /proc/*/maps could get you there

1605989897
marler8997
grep Xlib.so /proc/*/maps

1605990038
marler8997
this guy put together a nice on-liner to see all running so files on your system :)

1605990077
marler8997
this one:

1605990086
marler8997
woops, I mean this: sudo grep -i \.so /proc/*/maps | awk '{print $6}' | sort | uniq

1605990095
earnestly
marler8997: (Be aware that hidepid exists on linux these days)

1605990181
marler8997
earnestly, haven't heard of that, does that just let you not list the pids from /proc?

1605990197
earnestly
(Also use of grep is unnecessary there: awk '/\.so/ {...}', but SO/SU is usually pretty bad at shell)

1605990230
earnestly
marler8997: First thing documented here:

1605990261
earnestly
It may not matter if you only care about the entries owned by the user, but it there it is

1605990266
marler8997
what's the full command without grep?

1605990319
earnestly
marler8997: the same, just with the pattern matching done in awk itself.  Although also bear in mind that awk * or grep * is exposed to ARG_MAX limits

1605990351
marler8997
I'm not seeing how to make the full, command, can you show me?

1605990365
earnestly
I did above?

1605990366
marler8997
does awk take filenames?

1605990369
earnestly
Yeah

1605990392
marler8997
how do you limit it to the 6th column and filter by ".so" though?

1605990401
earnestly
I showed you

1605990426
marler8997
got it: sudo grep -i \.so /proc/*/maps | awk '{print $6}' | sort | uniq

1605990428
marler8997
woops

1605990437
marler8997
sudo awk '/\.so/ {print $6}' /proc/*/maps | sort | uniq

1605990443
marler8997
cool

1605990456
marler8997
I didn't know awk supported filtering like that

1605990462
earnestly
marler8997: sort has -u, which obviates the need for uniq

1605990481
earnestly
marler8997: awk is a pattern {action} language

1605990491
earnestly
Default action is to print the record

1605990523
marler8997
You can really get so much more done if you know your command-line tools well, always good to learn more

1605990605
marler8997
anyway, the point here is that's the only kernel mechanism I can think of to query what ".so" files are running in the system, /proc/*/maps

1605990611
marler8997
not sure if there are any others

1605990622
earnestly
marler8997: Also in the maps format the last column can be addressed via $NF instead of $6, if the intention is actually to extract the last column.  If it doesn't matter that it's sorted you can do: sudo awk '/\.so/ {seen[$NF]++} END {for(lib in seen) print lib}' /proc/*/maps

1605990623
marler8997
*kernel interface (not kernel mechanism)

1605990652
marler8997
based on maps format, I belive $6 is what we want

1605990663
marler8997
its' an optional column, in which case you don't want to get the previous column

1605990678
marler8997
there's other edge cases to though

1605990698
earnestly
marler8997: In which case replace $NF with $6

1605990743
marler8997
dang you know your awk

1605990785
marler8997
do you find the time that you spent learning awk has helped your workflows alot? do you use it alot?

1605990828
earnestly
Yes, it's incredibly useful (as is jq)

1605990859
earnestly
But I try to only use it according to its strengths (like everything)

1605990875
marler8997
which are?

1605990949
earnestly
formats which are conducive to interrogation based on well defined regions and patterns.  You wouldn't really want to use it on something like HTML/XML

1605991102
earnestly
(You could, but it would become bothersome)

1605991341
earnestly
marler8997: (In the above case I'd probably stick with sort -u instead of using the inherent properties of hash tables.  It's clearer and less surprising)

1605991391
marler8997
earnestly, you're saying "sort -u" is different than "sort | uniq"?

1605991441
earnestly
marler8997: It's the same

1605991461
earnestly
(Except one less subshell and process)

1605991480
marler8997
huh?

1605991502
marler8997
"stick with sort -u instead of using inherent properties of hash tables"/

1605991516
earnestly
marler8997: Instead of using the seen[] trick

1605991522
marler8997
oh!

1605991566
marler8997
yeah I don't understand awk enough to understand your awk example :)

1605991662
marler8997
actually, now that I've looked at it again I see...seen is a hash table, END means that block of code runs for all lines then once it's done, you loop over your hash table and print the entries

1605991678
marler8997
wow awk is crazy

1605991715
earnestly
The END block is run once all lines (records don't have to be a 'line') have been seen (there's also a BEGIN block)

1605991764
marler8997
Oh, so the END is just labeling the last block of code as "run me at the end"

1605991846
earnestly
Yeah, it's where perl inherited it from

1605991926
marler8997
wait, are END and BEGIN patterns?  So it's just awk 'pattern block pattern block pattern block..."?

1605992220
earnestly
They reserved

1605992225
earnestly
They're*

1605992301
earnestly
marler8997: Brain Kernighan (the K in awk) did a talk on it which can be found on youtube if you want

1605992347
frmdstryr
Can this work somehow?

1605992367
frmdstryr
Not sure why it doesn't just copy i into offset then compare at runtime

1605992671
marler8997
inline for([_]u32{0, 1, 2}) |x| {

1605992684
marler8997
var i = x;

1605992690
frmdstryr
I want to keep every branch there

1605992701
marler8997
{0, 1, 2, 3, ...}

1605992721
marler8997
you gonna make me type all 9 digits :)

1605992727
frmdstryr
yes :) haha

1605992731
marler8997
lol

1605992763
frmdstryr
oh so if the var is above the inline for it works

1605992788
marler8997
yeah

1605992822
marler8997
could also do this:  inline for ("\x00\x01\x02...") |x| {

1605992892
novaskell
`inline while` ?

1605992971
frmdstryr
It needs all the branches but should just be able to jump directly to the index on the second run if that makes sense

1605993045
frmdstryr
anyways using var works so thanks

1605993103
marler8997


1605993523
torque
you can do inline for ("0123...") |c| { var offset = c - '0'; ...} also, I believe

1605993561
torque
doesn't work too well if you ever want double digit numbers, tough

1605993563
torque
though

1605995452
andrewrk
marler8997, we could detect the various window managers. For example on my system xfdesktop is running, and it maps in libGL.so.1

1605995454
andrewrk
bingo

1605995472
andrewrk
not sure how to do it for vulkan yet...

1605995487
andrewrk
what window manager are you using?

1605995642
dominikh
note that for X11, many window managers will have absolutely no need for OpenGL or Vulkan

1605995680
andrewrk
hmm that is indeed a problem. although I think on such systems they might have a more standard file system hierarchy to find the drivers

1605995709
dominikh
you can run cwm on NixOS ;)

1605995763
shakesoda
andrewrk: the pre-glvnd libgl?

1605995783
andrewrk
dominikh, in this case what would be the best way to find the vulkan driver?

1605995800
shakesoda
i remember something to the effect of libOpenGL being preferred now and libGL being a compat shim

1605995809
shakesoda
might be misremembering

1605995832
shakesoda
this might be irrelevant, i don't have full context

1605995833
andrewrk
shakesoda, either way, the strategy does find opengl, because it gives us the path to the directory that has all the files from libglvnd

1605995856
dominikh
I have no idea :( I can only tell you that on X11, the window manager's primary task really is just to manage windows, it doesn't have to do any rendering on its own by default. complex ones may do rendering, many won't.

1605995892
shakesoda
on another note: i have a program here that crashes zig 0.7 trying to compile it (works with 0.6)

1605995901
shakesoda
haven't yet tried to reduce it

1605995953
andrewrk
there is still time to get it into the 0.7.1 milestone

1605995957
shakesoda
it might be reproducible with zig-vulkan-triangle

1605995977
shakesoda
hmmm, you updated that two days ago, so probably not

1605996019
andrewrk
dominikh, worst case scenario, we could detect nixos, and run `nix-shell -p vulkan-loader --run path/to/an_exe_that_prints_NIX_LDFLAGS`

1605996526
dominikh
andrewrk: does /run/opengl-driver/ help?

1605996586
andrewrk
what does yours have? mine has these:

1605996628
dominikh


1605996656
andrewrk
I'll test if opening libvulkan_intel.so will accomplish the goal

1605996725
andrewrk
hm well first I need to get a window open

1605996841
dominikh
stracing vkcube, it opens both libvulkan_intel and libvulkan_radeon here. there's probably some system to that

1605996961
marler8997
andrewrk, I actually run headless, everything goes through a remote X server

1605996986
andrewrk
you don't play video games that way do you?

1605996992
marler8997
just doom :)

1605997015
marler8997
but no

1605997110
dominikh
andrewrk: fwiw, you're sort of trying to do the work of the vulkan loader here (finding the correct driver to load for a given device), but the loader does other work, too, such as loading validation layers. so loading a driver itself is probably not the best approach in the long run.

1605997171
andrewrk
yeah that's exactly right

1605997187
andrewrk
I wonder if the loader supports being compiled statically

1605997215
marler8997
like, including loader into a static executable?

1605997226
andrewrk
yeah

1605997241
marler8997
wait, are you talking about elf loader or this vulkan loader thing?

1605997248
andrewrk


1605997250
dominikh
as for how the loader actually finds /run/opengl-driver/, the relevant nix packages patch RUNPATH (both for opengl and for vulkan)

1605997291
dominikh
(pkgs/build-support/add-opengl-runpath/setup-hook.sh)

1605997414
dominikh


1605997416
andrewrk
what is this @driverLink@/lib

1605997485
dominikh
see the .nix file in the same folder

1605997642
andrewrk
AH

1605997918
andrewrk
I think vulkan-loader will work statically compiled

1605997951
dominikh
what I don't understand is what the benefit of a fully statically linked binary is when you just end up implementing your own dynamic loader of sorts? wouldn't it be easier to just try and find the system loader, then pass control to it?

1605997964
dominikh
I'm pretty sure you talked about that before

1605997991
dominikh
(the whole "look at /usr/bin/env to find the dynamic loader" thing)

1605998003
andrewrk
the benefit is giving users a tarball to download that works everywhere with no installation steps

1605998019
andrewrk
windows users already have this ability

1605998045
dominikh
right, but you could achieve the same with a basic loader that finds the actual loader, then uses that?

1605998053
andrewrk
what if there is no actual loader installed?

1605998068
marler8997
no loader

1605998084
dominikh
then people probably don't use that system to run opengl or vulkan :P

1605998085
marler8997
I suppose that is possible

1605998103
andrewrk
my system runs opengl and vulkan but there is no loader installed

1605998116
marler8997
I think it was pixelherodev who was talking to me about systems that are completely statically compiled

1605998117
dominikh
what system is that?

1605998125
andrewrk
I would have had to put "vulkan-loader" into the global set of packages to install

1605998126
andrewrk
nixos

1605998131
marler8997
nixos has loaders

1605998138
andrewrk
yes but they are opt-in

1605998148
marler8997
all loaders are opt in

1605998150
dominikh
so vkcube is statically linked?

1605998228
andrewrk
when you install vkcube through the nixos package manager, it brings in vulkan-loader:

1605998243
andrewrk
I'm talking about running a downloaded binary without using the system package manager

1605998286
dominikh
right, fair enough

1605998290
marler8997
the only potential issue I see is that I wonder if you could make a loader that would work on all distributions...

1605998302
marler8997
or at least...how complicated that loader would be, I'm sure it can be done

1605998347
dominikh
I'm not sure the comparison with Windows holds, though. most of that is dynamic loading and making darn sure your installer includes all its dependencies. a far cry from a single binary and not needing the loader

1605998441
marler8997
windows is just easy because all versions work the same, they all support CreateProcess and the os will handle loading

1605998474
marler8997
on linux it's implemented in userspace, which is the distro, so there are N versions

1605998548
marler8997
for most linux systems, finding the loader will be good enough, but if you want to support systems without a loader, I suppose you have to include a loader as well

1605998557
marler8997
no choice

1605999343
marler8997
the nixos loader is 184K, so I suppose it's reasonable to assume the cost to BYOL (bring your own loader) is 184K of extra disk space per executable

1606001435
pixelherodev
marler8997: assuming that's the smallest possible

1606002292
marler8997
pixelherodev, it was you talking about statically compiled distros right?  what was the distros you mentioned?

1606002705
andrewrk
marler8997, I have vulkan-loader compiled statically and it works

1606002745
andrewrk
it's just some copy+pasted files and 27 lines in the zig-window build.zig

1606002894
andrewrk
the only thing left before I have a working demo is to figure out the xcb API to open a window and activate the vulkan surface

