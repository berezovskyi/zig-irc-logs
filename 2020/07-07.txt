1594080518
rooke
So I need to pass a formatted string to a c library, currently what I'm doing looks like this: create a fixed buffer stream, use that with fmt.format to format the string, use cstr.addNullByte to turn it into a cstring, then pass it across. Is this the way to do this?

1594081325
forgot-password
Is there an std function to create a slice from a pointer and a given length?

1594081526
ifreund
rooke: you can just add a \0 to the end of your format string instead of cstr.addNullByte to avoid an allocation

1594081608
ifreund
rooke: also, you might want to look at std.fmt.bufPrint or std.fmt.allocPrint0

1594081642
ifreund
forgot-password: not to my knowledge, I've always just set the ptr and len fields manually

1594081670
forgot-password
Oh, well, that does the job

1594081679
rooke
ifreund, format complained about an invalid character when I added `\0`. I'll look into those two functions.

1594081679
forgot-password
I didn't know you could do that

1594081697
ifreund
rooke: hmm, \x00 would work if \0 doesn't

1594081700
rooke
The allocation was what made me ask, it felt wrong that I needed that

1594082122
rooke
hah turns out I misunderstood the compiler complaint, just needed to get the ptr out of the slice :x

1594082369
ifreund
you can do something like buffer[0..buffer.len-1:0] to turn it in into a [*:0]

1594082412
ifreund
well, that turns it into a [:0] which coerces to [*:0] to be precise

1594082504
daurnimator
leeward: I recommended AWS to a client recently... because there were no other options: no one else has an Australian data centre with a managed kubernetes offering.

1594082520
ifreund
anyone know a robust way to waitpid(2) with a timeout?

1594082590
ifreund
there's a hack where I could fork twice and have one of the process sleep then wait(null) and see which one exits first

1594082598
ifreund
but that seems like, well, a hack

1594082618
daurnimator
ifreund: use W_NOHANG

1594082663
ifreund
ah nice, so just sleep(2) -> wait with NOHANG

1594082668
daurnimator
and then sleep until SIGCHLD

1594082688
daurnimator
ifreund: huh?

1594082699
daurnimator
oh I guess you can sleep and actually respond to a signal

1594082705
daurnimator
I'm too used to signalfd :P

1594082713
ifreund
heh

1594082737
daurnimator
ifreund: though modern linux has pidfd; which is better.

1594082760
ifreund
hmm, I have never used pidfd

1594082767
daurnimator
its quite new

1594082795
daurnimator
> pidfd_open() first appeared in Linux 5.3.

1594082804
ifreund
aye, quite new then :D

1594082818
ifreund
I'd rather keep BSD support if possible so I'll probably pass

1594082853
daurnimator
ifreund: but yeah; essentially W_NOHANG in a loop with a sleep/read in it somewhere

1594082906
daurnimator
ifreund: if you know the child process is sane, you can wait for it to finish by waiting for it to e.g. close a file descriptor

1594082913
shachaf
I poll on signalfd (and other fds) and wait with WNOHANG.

1594082947
ifreund
I don't know it's sane sadly, hence the need for a timeout

1594082953
shachaf
And preferably just wait with -1 and handle all the child events.

1594082970
shachaf
pidfd is nice but I don't think you actually need it for correctness here (unlike a lot of cases?).

1594082999
ifreund
hmm, if I used signalfd I could select(2) no?

1594083029
daurnimator
ifreund: sane in that it doesn't randomly decide to unset O_CLOEXEC on a file descriptor it didn't open itself

1594083044
daurnimator
ifreund: yep. (or poll/epoll)

1594083060
shachaf
poll is approximately just a better version of select

1594083062
daurnimator
ifreund: or hell: even just block in a read()

1594083066
daurnimator
shachaf: exactly

1594083074
shachaf
Or just read if it's your only fd, sure.

1594083079
shachaf
Here's code I wrote for this a few days ago:

1594083096
daurnimator
shachaf: why isn't it in zig? :P

1594083108
shachaf
The loop polls on a signalfd and inotify fd, and when it wakes up it does waitpid(-1, WNOHANG)

1594083121
shachaf
daurnimator: Because I want people to be able to compile and run it.

1594083160
shachaf
I can barely compile Zig myself.

1594083186
ifreund
seems like the signalfd is the robust way I was looking for, thanks y'all

1594083246
shachaf
Other than signalfd, you could do what I was doing before, set up a signal handler that ppoll unblocks, so that you wake up on EINTR.

1594083246
leeward
daurnimator: It's a thing. People have good reasons for using it.

1594083260
ifreund
for context, river now supports tiling layouts generated by arbitrary user-provided executables

1594083286
ifreund
which gives a ton of flexibility, but also means I have to handle things properly when they do strange things

1594084114
ifreund
neat, I just found sigtimedwait(2)

1594084119
ifreund
that simplifies things a bit

1594084482
shachaf
Ah, I didn't know about that.

1594084512
ifreund
zig doesn't have it in the std yet though :(

1594084545
shachaf
Though I feel like most programs are going to want to wait for multiple kinds of things anyway, so you want to structure your loop with poll/epoll anyway.

1594084589
ifreund
yeah, this is a somewhat special case where there is only one thing I want to wait for

1594084604
ifreund
not part of my event loop at all

1594084883
ifreund
why is it called rt_sigtimedwait in the SYS enum in bits.zig?

1594085509
shachaf
Because that's the system call.

1594085846
ifreund
oh I see, there's some legacy stuff going on there

1594088447
forgot-password
What can prevent a shared library from being closed after a dlclose call? dlopen always gives me the same handle afterwards

1594088571
andrewrk
same handle as in, same pointer address?

1594088580
forgot-password
Yes

1594088591
andrewrk
it might just be a coincidence. if you unmap() then map(), linux for example gives you the same pages back

1594088602
andrewrk
which is likely how dlopen/dlclose are implemented

1594088746
forgot-password
When i call a function in that library it always references the version from the first dlopen call. I can recompile the library as many times as I want, but it only changes after I restart the host (which calls dlopen)

1594088860
andrewrk
I'm out of ideas

1594088981
forgot-password
No worries, thanks anyways :)

1594090149
daurnimator
dlclose is a no-op in musl

1594091400
shakesoda
don't some other platforms behave that way in general too?

1594091416
shakesoda
i swear i remember windows will do that too when you load a library

1594096066
andrewrk
ikskuh, a data point for deinit() taking a mutable pointer:

1594097291
daurnimator
andrewrk: I've encountered that before and its resulted in having to add non-const things all over the place, just to support .deinit()

1594097326
andrewrk
deinit() is a mutation, it makes sense that you can't do it on a const object

1594097355
daurnimator
not when the .deinit() only does e.g. a `close` syscall

1594097380
andrewrk
in this case it would have an `fd` field which should get set to `undefined`

1594097405
daurnimator
yes we used to have that. but then that bubbled all the way up

1594097433
daurnimator
--> the only reason to do `var foo = blah.init()` instead of `const foo = blah.init()` was so that the .deinit later would work

1594097487
daurnimator
which bubbled up again to another object needing to have a `*T` instead of what should have been a `*const T`.... which bubbled further.....

1594097589
daurnimator
to a function up the stack that had to take a `*T` instead of a `T`

1594097809
daurnimator
andrewrk:

1594097959
daurnimator
which reminds me; I once got in a different conundrum when working on my allocator: my deinit() was setting fields to undefined, but they were in a read-only page so things worked in release-fast but not debug

1594098044
shachaf
This sounds like the arguments about free taking a const pointer, which it should, but maybe deinit isn't quite the same situation?

1594098257
leeward
Can't you just var foo = blah.init(); defer foo.deInit(); const bar = &foo; and use the const pointer?

1594098282
andrewrk
I don't see any problem with those things bubbling, it's all correctly modeling mutability

1594098297
daurnimator
andrewrk: but you're

1594098316
andrewrk
yeah you're setting fd = undefined

1594098352
daurnimator
what if I want to store a `T` on a read-only page?

1594098379
andrewrk
that's a good counter example use case

1594098398
andrewrk
best argument I've heard so far

1594098454
daurnimator
I'd rather we rely on the allocator interface setting things to `undefined` on free + perhaps writing out `undefined` when popping from the stack?

1594098457
daurnimator
writing `undefined` when popping the stack would also make issues with escaped stack references more obvious

1594099364
andrewrk
the plan (in safe modes) is to detect which possible stack variables might escape, heap-allocate them instead using an allocator that detects use-after-free, and then free them automatically at the end of the stack frame

1594099425
andrewrk
this will work similar to the panic function, in that it can be overridden but there is a default implementation which is different depending on OS

1594099449
andrewrk
or it can be disabled altogether, no funny business with stack allocations. but the default, at the very least in debug mode, will be to do this

1594101686
daurnimator
andrewrk: why

1594103446
andrewrk
daurnimator, it's a good partial measure - it works for "leaf" functions, but as soon as another function call happens the memory gets reused, so use-after-free could be dangerous (rather than well defined behavior causing a crash) due to the aliasing

1594103502
andrewrk
the point of lifting potentially problematic variables out of the stack is to detect invalid use-after-free without wild pointer aliasing

1594103531
andrewrk
of course in the unsafe build modes, this would not happen, everything would be in the stack frame

1594103581
daurnimator
I think its a cool idea to try out. Though I'm a little worried the extra mmap/mprotect calls and dead regions might have deleterious effects. will have to see

1594103874
andrewrk
yeah there's always the case that it's too much overhead and we have to ditch it

1594103916
andrewrk
if it works though, the neat thing is it would also be available in freestanding, just like everything else - if you put a little work into the glue code, then you get the benefits

1594104406
daurnimator
andrewrk: maybe debug mode but not release-safe?

1594104502
andrewrk
my hunch is that it would be enabled for both by default

1594104583
daurnimator
its a bit of a funny one too. we could be unintentionally be protecting people from e.g. pointer hash collisions

1594104751
andrewrk
if it works well, and once we have a safe general purpose heap allocator that panics on use-after-free and double-free, then it would be reasonable to call zig a "safe" language. or at least "safe capable"

1594104770
andrewrk
of course you could always use an arena allocator or use @intToPtr

1594105353
stripedpajamas
is there anything special needed to get recursion working ? inside a struct method i get "function not fully analyzed yet"

1594105449
andrewrk
stripedpajamas, does it have to do with the inferred error set? you can give it an explicit error set

1594105473
andrewrk
if you start with an empty error set (`error{}`) the compiler will tell you which ones are missing

1594105504
stripedpajamas
ahhh

1594105513
stripedpajamas
thanks andrewrk

1594123294
ifreund
so uh, std.os.waitpid doesn't seem capable of handling WNOHANG properly with the current api

1594123900
pixelherodev
Anyone here have an older GCC they can test something with for me? :P

1594123906
pixelherodev
older meaning "anything before 10" :P

1594123925
ifreund
pixelherodev: i have 9.3

1594124005
pixelherodev
Mind seeing if you can build

1594124047
pixelherodev
(hand written, before anyone gets too excited; I'm just making sure my test is correct :)

1594124064
pixelherodev
It works with GCC 10, but I want to make sure it works further back

1594124335
ifreund
yep, seems to work

1594124385
ifreund
the binary shouldn't produce any output right?

1594124398
pixelherodev
Nothing except for an exit code ;P

1594124412
pixelherodev
`./blah ; echo $?` should give 103

1594124418
pixelherodev
But yeah, that's expected

1594124427
pixelherodev
I'm 100% confident it'll work if it compiles like that

1594124430
pixelherodev
Thanks :)

1594124445
pixelherodev
Ned to see if I can find a livedisk with an older GCC or something

1594124466
ifreund
yep, exit code is 103

1594124524
pixelherodev
Toldja ;)

1594124538
pixelherodev
That's perfect, thanks :)

1594124642
ifreund
no problem

1594127156
WilhelmVonWeiner
say I'm writing an event queue for a game, and I register a function against event type "SOMETHING_HAPPENED"... what's the best type to represent the "SOMETHING_HAPPENED" event?

1594127193
daurnimator
enum ?

1594127199
WilhelmVonWeiner
In my js version i'm just using strings because it's JS, should I just write a big enum somewhere?

1594127221
WilhelmVonWeiner
it just sounds a bit cumbersome, in that you have to go add a new event type to this enum

1594127238
pixelherodev
You

1594127249
pixelherodev
but enums are the best bet performance wise

1594127294
daurnimator
WilhelmVonWeiner: it would give you a few bonuses like: `switch(someevent) { .FOO => {}, .BAR => {}, }` and being an error if you didn't handle them all

1594127312
WilhelmVonWeiner
can one instantiate a hash map at compile time?

1594127317
daurnimator
or that you typoed an event somewhere (and referenced a non-existant one)

1594127334
WilhelmVonWeiner
daurnimator: that is true

1594127416
pixelherodev
WilhelmVonWeiner: you

1594127427
WilhelmVonWeiner
cheers.

1594127736
ikskuh
pixelherodev: you can use godbolt for that!

1594127762
pixelherodev
True!

1594127775
ikskuh
WilhelmVonWeiner: you usually want to store some data with the event

1594127783
ikskuh
so using a tagged union would be my solution:

1594127814
ikskuh
const Event = union(enum) { mouse_down: ivec2, mouse_up: ivec2, text_entered: []const u8 };

1594127819
ikskuh
const EventType = @TagType(Event);

1594127917
daurnimator
ikskuh: usually with a wrapper struct to store common fields

1594128235
WilhelmVonWeiner
a lot to think about

1594128280
ikskuh
daurnimator: ye

1594128282
ikskuh
yep

1594130543
pixelherodev
Whoa

1594130554
pixelherodev
"Semantic analysis: x/16300"

1594130558
pixelherodev
Stage2 is biiiiig

1594130662
ikskuh
whooooow

1594130694
pixelherodev
Time to push that even further ;)

1594130931
pixelherodev
andrewrk: you were right, using the existing harness is much easier ;)

1594130950
pixelherodev


1594131690
pixelherodev
Ugh, the Scope-type interface is nice and clean but so tedious to implement

1594136413
leeward
oh, pixelherodev, a problem for C backends: see if you can translate this Zig function `fn unsigned(static: i32) bool { const case = static >= 0; return case; }`

1594136793
stripedpajamas
is there an idiomatic way to check that an optional isn't present? right now i'm doing `if (opt) |_| {} else { // stuff }`

1594136835
fengb
`if (opt != null)`

1594136845
fengb
Er... `if (opt == null)`

1594136851
fengb
One of those. I can't think

1594136914
stripedpajamas
oh right

1594136926
stripedpajamas
forgot that it was val or null

1594136927
stripedpajamas
thanks

1594138389
pixelherodev
leeward: this'll probably be a subset of Zig

1594138394
pixelherodev
99.9% of it, but a subset nonetheless

1594138445
leeward
So you'll just reject identifiers that conflict with C keywords?

1594138457
ifreund
can't you just rename them?

1594138468
pixelherodev
Potentially, but keep in mind that people are meant to read this code

1594138474
pixelherodev
So e.g. `__renamed_static` can be annoying

1594138482
pixelherodev
But this isn't what I was referring to

1594138488
ifreund
I don't think there's another solution really

1594138489
pixelherodev
There's some things that

1594138502
pixelherodev
e.g. some builtins

1594138531
pixelherodev
setRuntimeSafety should be doable (since we'll generate the checks as C code)

1594138535
pixelherodev
but e.g. optimizeFor?

1594138544
pixelherodev
Some of them just can't be done in a sane manner

1594138548
ifreund
how are frames/async going to work?

1594138552
ifreund
or will they work?

1594138630
pixelherodev
No clue

1594138638
pixelherodev
I'm probably not going to be the one to touch that :P

1594138646
pixelherodev
Those don't work with normal codegen yet either

1594138649
pixelherodev
So I'll keep an eye out

1594138664
pixelherodev
When it's implemented for normal codegen, I'll look at how it works and see if I can't replicate it for C

1594138673
ifreund
yeah makes sense

1594139093
pixelherodev
Ugh

1594139095
pixelherodev
boilerplate

1594139112
pixelherodev
Some sort of @reify magic for this would be awesome

1594144270
ikskuh
pixelherodev:

1594148212
ifreund
ugh, I wish we had joinZ

1594148848
ikskuh
try ifreund.implement("std.mem.joinZ")

1594149084
leeward
error.OutOfTime

1594149201
oats
what's joinZ?

1594149220
ifreund
std.mem.join but it adds a null terminator

1594149259
ifreund
currently you have to either allocate twice or implement a modified std.mem.join yourself

1594150730
iceball
Anyone implementing

1594150987
leeward
I don't see it on github.

1594151098
blinghound
has anyone had any luck debugging zig with breakpoints on windows?

1594151129
blinghound
I'm trying gdb but it can't find any symbols for main() etc

1594151184
leeward
That's weird. You're not building with --strip, are you?

1594151236
leeward
Can you paste a gdb session with the relevant error message somewhere?

1594151269
blinghound
I'm using .default_target = .{ .abi = .gnu } because I wasn't able to build on windows otherwise

1594151274
blinghound
could that be the problem?

1594151302
leeward
I wouldn't think so, as long as you're using mingw's gdb.

1594151339
shakesoda
on windows i'm using the vs debugger in vscode to debug my zig stuff

1594151341
blinghound
if I try break main, all I get is 'Function "main" is not defined'

1594151351
shakesoda
never tried it with gdb

1594151372
blinghound
how did you set up your debugging config on vscode?

1594151387
leeward
Oh, maybe "break main.zig:main"

1594151403
companion_cube
iceball: what's interesting about that, specifically?

1594151409
shakesoda
just cppvsdbg type debugger in launch.json and setting the program path, it just works

1594151426
shakesoda
also needs a config tweak to let you put breakpoints anywhere

1594151464
shakesoda
set debug.allowBreakpointsEverywhere in your settings json for that

1594151480
blinghound
hmm leeward, "no source file named main.zig"

1594151507
blinghound
shakesoda would I be able to take a look at your settings/launch files?

1594151531
shakesoda
blinghound: my entire settings.json is { "debug.allowBreakpointsEverywhere": true }

1594151542
pixelherodev
ikskuh: thanks

1594151545
shakesoda
launch is the default one it generates you when you select the windows option, but with the program path set

1594151549
pixelherodev
Also: almost done with the CBE skeleton ;)

1594151549
leeward
Well that's weird. I've never tried to build Zig code on Windows though, so maybe it's expected by someone.

1594151590
shakesoda
blinghound:

1594151641
shakesoda
i do have the c/c++ extension installed to provide this stuff, too

1594151691
shakesoda
usually i'll also set a prelaunch task so it builds

1594151702
blinghound
thanks shakesoda, it all works now

1594151715
leeward
\o/

1594151721
blinghound
I'm not sure why it's not working with gdb

1594151724
shakesoda
\o/

1594151728
blinghound
\o/

1594151742
shakesoda
just not using gdb format symbols i guess

1594151757
shakesoda
i don't claim to understand the details here

1594151760
leeward
DWARF?

1594151797
shakesoda
it does pdb on windows

1594151803
leeward
Tangent: ELF STABS DWARF

1594151817
blinghound
yup pdb

1594151827
shakesoda
what is this STABS

1594151844
leeward
Old debug symbol format, from before DWARF

1594151860
shakesoda
huh, predates my knowledge

1594151885
shakesoda
the more you know

1594151938
blinghound
wait is there a way to force zig to produce dwarf symbols instead of pdb on windows then?

1594151942
shakesoda
deeply unrelated: i'm experimenting with making my execution model on the cpu similar to gpu compute shaders

1594151948
leeward
It is inconvenient that Microsoft's debug symbol format aliases Python's debugger's name.

1594151963
shakesoda
leeward: isn't microsoft's pdb format older?

1594151971
leeward
Probably.

1594152005
leeward
I don't know though. Python is older than Windows 95.

1594152014
shakesoda
yeah, but is the debugger?

1594152029
leeward
How do you have a language without a debugger?

1594152036
shakesoda
uh, lots of languages don't have them

1594152041
shakesoda
it's actually pretty common

1594152044
leeward
What?

1594152048
leeward
That's ridiculous.

1594152050
fraktor
I'm still trying to wrap my head around using async as opposed to using something like threading. Where can I read up on this?

1594152076
shakesoda
especially not some kind of standard one

1594152081
shakesoda
some have them but they're nonstandard

1594152098
andrewrk
fraktor, we don't have great docs on that yet

1594152101
leeward
fraktor: Already read

1594152189
fraktor
I've used async in other languages and I don't understand them either tbh.

1594152191
leeward
shakesoda: Are you saying there are real languages that people actually use that don't have debuggers?

1594152199
shakesoda
i understand they're just coroutines, but they look so magical

1594152218
shakesoda
leeward: yes, quite a lot of them, but all the usual suspects do

1594152267
fraktor
Isn't the plan to get Zig to integrate with gdb? It seems like a natural fit.

1594152287
leeward
shakesoda: News to me. I've never used a language that didn't have a way to debug it. Heck, we wrote GDB hooks for a lightweight rtos.

1594152293
leeward
fraktor: Zig already works well with gdb.

1594152315
leeward
At least, on non-Windows platforms it does.

1594152324
fraktor
then uh, what is the issue? Isn't that a servicable debugger?

1594152338
fraktor
s/servicable/serviceable/

1594152344
leeward
Oh, I was complaining about windows pdb != python pdb, and the question of which came first arose.

1594152347
andrewrk
fraktor, you can look up how other event-based things work, it's the same principle. node.js, python's twisted, ruby's eventmachine, etc

1594152366
blinghound
andrewrk is there a way to force zig to output drawf instead of pdb on windows?

1594152372
blinghound
*dward

1594152376
blinghound
fml

1594152380
shakesoda
dwarf is horribly to type, yeah

1594152383
blinghound
dwarf, you know what I mean

1594152394
shakesoda
every time i type it takes several tries

1594152396
andrewrk
it's reasonable to type on dvorak ;)

1594152412
leeward
^^

1594152415
shakesoda
we've been exposed as qwerty users!

1594152415
andrewrk
blinghound, not currently I'm afraid, although I can understand that being a good use case

1594152427
leeward
Not that anyone should ever switch to dvorak.

1594152432
iceball
companion_cube: "a simple binary representation for structured application data". A bit more efficient than e.g. JSON:

1594152440
andrewrk
as a dvorak typist, I agree with leeward, it's not worth the switch

1594152442
companion_cube
right, I mean, there's msgpack right?

1594152443
blinghound
I'm typing on a single row, 26 character keyboard in alphabetical order

1594152450
andrewrk
lol

1594152467
leeward
Yeah, I say that having been using dvorak for...20 years.

1594152471
blinghound
the sad thing is I only have 25 fingers

1594152475
shakesoda
blinghound: you lack power; i programmed a chorded keyboard that uses thumbsticks for input

1594152482
leeward
Switched in december of 1999.

1594152496
blinghound
so one finger gets a dual key job

1594152501
shakesoda
ordered by letter frequency of common words in english

1594152521
andrewrk
leeward, damn, you been typing dvorak since before I learned VB6

1594152534
shakesoda
joking aside, i actually did do this: i use it for chat in my vr game

1594152548
blinghound
just joking though, I enter unicode text through the medium of dance via a modded Kinect

1594152577
fraktor
I've been thinking of maybe DVORAK or COLEMAK, why is it not worth the switch?  Just because it's incompatible with most keyboards?

1594152578
shakesoda
it's also got dictionary prediction and some other conveniences because typing everything out that way sucks

1594152581
blinghound
andrewrk ayyy VB6 was my first language

1594152584
xackus
I've never considered switching, because English is not my primary language so the benefits would be questionable

1594152586
leeward
I kinda wish I knew how to use chorded keyboards. It would make being a cyborg much cooler.

1594152605
fraktor
I wish there were more plover-compatible keyboards. Most of the ones that are available are a little out of date.

1594152637
andrewrk
fraktor, colemak is a half measure, what's the point? dvorak is more comfortable than qwerty, but there's a cost to using non defaults, and it's not

1594152649
andrewrk
that's my take on it

1594152664
Sahnvour
I'm interested in how people who learnt vim before, handled the layout switch

1594152669
fraktor
What do you mean when you say it's a half measure

1594152675
shakesoda
my understanding is qwerty was designed for mechanical needs, dvorak for human ones

1594152680
fraktor
That's another issue: I'm a big Vim user.

1594152693
leeward
fraktor: It's very inconvenient to use anyone else's keyboard, it's very inconvenient for anyone else to use your keyboard, and your speed and error rate will get very bad for a while (and every time you switch)

1594152706
andrewrk
it's like they wanted to do dvorak, but chickened out because they didn't want ctrl+x, ctrl+c, ctrl+z, ctrl+v to be in different positions

1594152722
leeward
qwerty is actually designed to alternate hands for most words, which is not a bad thing.

1594152727
fraktor
leeward: That makes sense.  I've switched my escape and caps lock keys, and that alone is enough to throw me off of most other computers.

1594152764
xackus
yeah, there is a popular misconception that qwerty was designed to slow down typing

1594152783
shakesoda
it wasn't designed to slow down typing, wasn't it to avoid jamming typewriters?

1594152787
xackus
it yes

1594152796
xackus
*yes

1594152806
shakesoda
the alternating is a result of that, which is also handy, but afaik dvorak succeeds better at that

1594152808
leeward
Yep

1594152810
fraktor
So the idea was to make consecutive keys far apart, yes? that would prevent some of the jams

1594152820
xackus
exactly

1594152841
fraktor
Maybe I should be a real hipster and go with workman

1594152849
leeward
dvorak does require less finger movement, but I don't think it alternates hands better; though I have no data on that one.

1594152856
fengb
Dvorak puts vowels all together. That'd be pretty hard to maintain on physical typewriters

1594152888
shakesoda
at some point i put in the effort to learn dvorak, but it just wasn't worth the friction

1594152890
shakesoda
typing on it was fine

1594152897
fengb
Of course, I and O are right next to each other so it's not like qwerty solved everything correctly

1594152919
shakesoda
but remapped inputs behave differently in every program, switching to anything else sucks, etc

1594152925
leeward
But typewriter salesmen can type "typewriter" all on the top row!

1594152930
shakesoda
input remapping is especially nasty in games

1594152936
shakesoda
so many of them botch this

1594152943
fengb
Just use default keys in dvorak

1594152946
fengb
Hard mode activated

1594152954
leeward
The worst is when games let you remap some but not all the keys.

1594152970
xackus
vowels grouped together would actually work pretty well in Polish when it comes to jamming

1594152974
fraktor
shakesoda: Preach. In factorio they use the keycode for escape, which means that every time I have to use it, it toggles caps for me.

1594152985
shakesoda
yuck

1594153006
xackus
W Szczebrzeszynie chrząszcz brzmi w trzcinie

1594153029
fraktor
That's what I was thinking would be the way to go.

1594153035
fraktor
Unfortunately that means that "WASD" is going to really suck.

1594153038
shakesoda
leeward: that doesn't fix remapping problems though

1594153038
fengb
I can't tell if you're making fun of Polish or if those are actual words

1594153047
xackus
they are actual words

1594153048
shakesoda
it does mean it's consistently remapped, at least

1594153049
shakesoda
so that's nice.

1594153056
shakesoda
fengb: that's how you know it's really polish

1594153066
xackus
that form a proper sentence

1594153100
xackus
although this sentence uses many digraphs

1594153140
xackus
sz, cz, rz are one sound

1594153165
xackus
still a tongue twister

1594153177
leeward
xackus: Way too many Zs to be comfortable to type. Right pinky bottom row is awkward to reach.

1594153210
leeward
also, sz are adjacent (right pinky home/bottom)

1594153219
xackus
I don't type how you are supposed to anyway

1594153220
fraktor
That reminds me of this weird Polish movie clip where a guy says his name is Grzegorz Brzynszyczykiewicz

1594153220
shakesoda
what layout does polish usually use

1594153229
xackus
standard qwerty

1594153236
fraktor
Ooh that's rough

1594153241
shakesoda
so z is inconveniently in the corner still huh

1594153242
shakesoda
rough

1594153269
xackus
with right alt for ąćęółśżźćń

1594153273
shakesoda
given the amount of them i'd have guessed something more like azerty

1594153310
xackus
fraktor: a classic

1594153336
fengb
Shouldn't dvorak layout be renamed ',.pyf

1594153371
leeward
or aoeuid

1594153506
shakesoda
how much overhead does async suspend/resume have anyways

1594153511
xackus
it annoys me to no end that ź and ż are under the same letter on mobile keyboards. in standard keyboards ż is alt+z and ź is alt+x

1594153540
xackus
you have to long press and select the right letter

1594153549
xackus
instead of just long pressing

1594153597
leeward
Sounds way more discoverable.

1594153638
xackus
if you never used a keyboard, yes

1594153646
fengb
Is there not a chorded keyboard for this?

1594153661
xackus
what is a chorded keyboard?

1594153681
fengb
You hit multiple keys to represent one letter

1594153701
xackus
on physical keyboards you press right alt

1594153704
fengb
So it'd be something like •+z or ´+z

1594153713
fengb
I mean for mobile

1594153732
xackus
i found one but it sucked in other ways

1594153744
fengb
Mobile keyboards for Chinese are so much better than desktop because someone actually gave it thought and made chorded keyboards or stroke detection

1594153844
shakesoda
fengb: how does it work on desktop? similar to japanese?

1594153938
waleee-cl
pinyin-based dictionary-lookup with candidate selection (on windows at least)

1594153958
shakesoda
sounds very much similar

1594153985
fengb
Yeah, desktop keyboards are typically pinyin. It's really bad

1594154020
fengb
(Of course, I can't use anything else because I'm barely literate... but still)

1594154059
xackus
thank god for pokemon. at a certain age it taught me more English than anything else

1594154197
fengb
No Polish localization?

1594154205
ifreund
andrewrk: I don't think colemak is a half measure, in fact its design is more data-driven than dvorak due to being more modern and is arguable superior

1594154220
ifreund
see:

1594154220
xackus
nintendo isn't very popular here

1594154250
xackus
or at least wasn't historically

1594154251
KubaSO
TL;DR: want to implement LLVM backend, tired of C++, zig looks beautiful. Does zig offer any starting points for developing using LLVM libraries - specifically the backend?

1594154269
ifreund
the stuff about not moving zxcv is more of a nice side benefit and doesn't hold the layout back imo

1594154317
xackus
most people played on pc because nobody had money for a console

1594154320
ifreund
dvorak has the L on the top row pinky which kinda sucks, no layout is perfect though

1594154459
fraktor
andrewrk: Does the stage2 compiler use an LLVM backend?

1594154473
ifreund
fraktor: not yet, but it's planned to have llvm as an option

1594154482
ifreund
stage2 is purely self-hosted currently

1594154530
KubaSO
In absence of any premade interfaces between LLVM APIs usable for backend development (e.g. IR ingest), is the only way to extend LLVM-C with to expose LLVM to C, and then build a zig API on top?

1594154561
fraktor
Most likely. I've found that C interop works pretty well for the most part, with a couple of exceptions due to enum abuse.

1594154569
ifreund
and will always remain purely self-hosted for debug builds as I understand it. Can't make incremental compilation work through llvm

1594154601
andrewrk
KubaSO, if your project needs access to all of LLVM and not just a simplified legacy API, you might need to make your own C API on top of the LLVM C++ API. the C API LLVM provides is lacking

1594154654
fraktor
Is that the eventual plan for stage2?

1594154665
KubaSO
Ahem, so what sort of infrastructure is there within zig for code generation/backend (I didn't look yet)? I'm not married to LLVM, I was (apparently incorrectly) assuming that getting zig to produce target output implied writing an LLVM backend.

1594154695
andrewrk
zig is not currently (and probably won't be) a general purpose compiler backend

1594154713
KubaSO
But zig does generate LLVM IR, correct?

1594154716
pixelherodev
Hopefully stage2 won't actually end up needing LLVM at all

1594154722
andrewrk
KubaSO, correct

1594154749
andrewrk
what are you working on?

1594154768
pixelherodev
e.g. translate-c could be implemented using the standard library's C parser instead of needing Clang for it

1594154793
fraktor
pixelherodev: This might be a naive question, but why not? It seems like interfacing with LLVM is a good way to get lots of platform-specific tricks and improvements.

1594154828
andrewrk
pixelherodev, clang is pulling a lot of weight in translate-c. it's also doing semantic analysis and type checking

1594154830
KubaSO
I want to tackle Parallax Propeller 2. It's essentially a miniature 32-bit NUMA with 8 cores and two levels of memory.

1594154850
andrewrk
neat

1594154855
leeward
Someone in here was talking about that chip. mq32?

1594154859
andrewrk
and when you say tackle, can you elaborate? what's the goal here?

1594154867
ikskuh
leeward: correct!

1594154874
ikskuh
Propeller Coders Assemble!

1594154892
leeward
I remember looking over its datasheet.

1594154903
ikskuh
P2 is a crazy architecture

1594154909
ikskuh
P1 was nice and based

1594154912
ikskuh
but P2 is whack.

1594154936
ikskuh
round-robin memory scheduling with 1-cycle-latency for well optimized code

1594154990
ikskuh
also, uniform memory areas with all registers accessible as memory mapping

1594155026
KubaSO
I like P2 more :)  Obviously it is way faster, and can support USB FS natively, and both USB HS and 100BASE-TX using external PHY. But I'm tired of the C++ ecosystem, so I'm really happy to find a cool language with wide-open future that could be used to implement it.

1594155081
KubaSO
Especially that I'm

1594155280
KubaSO
P2 is very much register-less 2-level NUMA, even though they call level 1 memory "registers". It also is not all that different from P1 in terms of general architecture: there's still level 2 memory, shared round-robin (the hub), and level 1 memory on each code (the cogs). It all got lots of overhaul, but it's fundamentally the same idea, and

1594155280
KubaSO
probably a P2 code generator could share a lot with P1 code generator in terms of code transformations, since the hub-cog split drives everything.

1594155642
ikskuh
KubaSO: yeah, true

1594155655
ikskuh
i really love P2 architecture, it's a great extension of the first one

1594155676
ikskuh
having a P1/P2 backend in zig would be rad

1594155686
ikskuh
and would make the stage2 more versatile

1594155734
andrewrk
KubaSO, this use case is spot on for zig, however, you might need to dial down your expectations a bit for the status quo of the project. it might be a few months before this use case can really be tackled well by the zig project

1594155753
andrewrk
by all means experiment with it and see where it takes you :) just don't want to over promise here

1594155773
ifreund
you're totally right though that the future is wide open and looks very promising though :D

1594155803
KubaSO
Zig looks like what I wanted nim to be :)

1594155871
ifreund
andrewrk: I am sending encouraging thoughts your way <3

1594155880
KubaSO
My interest is in platforms that probably won't host a compiler - at least it

1594155884
ikskuh
andrewrk: please feel the pressure, but don't let it stress you!

1594155890
ikskuh
Take aaaaaaaall the time you need

1594155911
pixelherodev
Okays, got the CBE skeleton done!

1594155915
ifreund
yeah, avoid those pesky local maximums, we'll all thank you in 10 years

1594155915
pixelherodev
:D

1594155924
leeward
\o/

1594155928
ikskuh
what ifreund says

1594155939
pixelherodev


1594155948
KubaSO
's not my immediate need. P2 doesn't have enough memory to do all the build steps needed for something the size of zig. Maybe I'm wrong.

1594156016
ifreund
we'll see, i've heard vague plans of compiling self hosted to C using itself, and self hosted has quite optimial memory usage so far

1594156027
ifreund
that's quite a ways down the line though

1594156040
andrewrk
yeah right now stage1 is a memory gobbler

1594156050
pixelherodev
Self hosted also has zero memory leaks so far

1594156059
pixelherodev
Which we know because tests are always run using the leak checking allocator ;)

1594156071
leeward
stage1 triggered oomkiller on my rpi

1594156142
ikskuh
testing allocator is a great idea

1594156160
KubaSO
P2 has 512kb of level 2 memory (hub/shared), and 2kb of level 1 memory (cog/dedicated per-core) 😂 It's, let's say, not very likely to host zig. At least not with LLVM in the picture - the C++ dependency kills everything in terms of size.

1594156160
ikskuh
and the planned GPA will make memory leaks or errors in zig really unlikely

1594156268
leeward
Yeah, I wouldn't expect to run the compiler on a propeller anyway. Better to cross compile for it with something beefy and fast.

1594156279
pixelherodev
`Generating function 'start' of type 'fn() void', targeting C11` Here we go...

1594156314
KubaSO
So my use case is only cross-compilation from PC to microcontrollers. I have been messing about (internal prototypes only at this point) with 8-bit backends for LLVM and I just don't like writing that stuff in C++, for some reason. This is entirely my taste and aesthetics, of course. Nothing wrong with modern C++.

1594156316
xackus
stage1 made oomkiller kill ssh on a vm with 5 GB of

1594156319
xackus
ram

1594156352
ikskuh
KubaSO: Yeah i want to bootstrap a bluepill with zig as well

1594156374
leeward
KubaSO: For certain values of nothing, sure. I can sum up what's wrong with modern C++ pretty easily: less-than-modern C++.

1594156420
KubaSO
Aaaaah, yes. Well, let's not go there :)

1594156425
leeward
I did manage to get Zig code to run on an AVR.

1594156440
leeward


1594156454
yeti
\o/

1594156470
leeward
Oh, yeti, did I tell you about the interrupts? They are working.

1594156477
yeti
I read it

1594156483
leeward
shiny

1594156507
ikskuh
neaaat!

1594156511
andrewrk
xackus, yeah, it's really bad. but I have a plan to solve the problem by investing the effort into self-hosted rather than stage1

1594156532
KubaSO
I <3  inherent whole-program compilation. It matches the embedded targets so well!

1594156533
andrewrk
it will be some pain now but it's an investment that I believe will pay off big time

1594156542
andrewrk
KubaSO, yeah!

1594156567
xackus
i haven't had the time to familiarize myself with stage2 code unfortunately

1594156599
andrewrk
there are some areas that are contributor friendly but there are still some big design reworks pending

1594156613
KubaSO
I'm always wary of relegating LTO to the linker. It reminds me too much with the way cows process their food :)

1594156622
andrewrk
by rework I mean stuff like adding threading, adding conditional branching, adding result locations, etc

1594156622
ifreund
lol

1594156624
xackus
for the past 2 months i just did bugfixes when i had the time

1594156644
pixelherodev
Yeah, I strongly suggest avoiding stage2 for a while - that way I have more work to do!

1594156646
pixelherodev
Oh wait

1594156648
pixelherodev
;)

1594156659
companion_cube
hmmm was last WE's announcement recorded?

1594156666
ikskuh
andrewrk: nobody needs conditional branching!

1594156672
andrewrk
lol

1594156675
ikskuh
companion_cube: announcement is this weekend

1594156676
ifreund
companion_cube: announchemnt thing is this weekend

1594156679
companion_cube
ahhhh my bad.

1594156680
xackus
compile to MOVs

1594156707
pixelherodev
lol

1594156711
pixelherodev
That only works for one platform ;)

1594156721
pixelherodev
Almost got function shells generated..

1594156732
xackus
that means you have to emulate just one instruction

1594156911
pixelherodev
Hmm, here's the first real issue: what do I do about names?

1594156921
pixelherodev
e.g. `main` in C becomes _main in asm

1594157010
ikskuh
pixelherodev: this will be weird

1594157021
ikskuh
i think leeward wanted to hint you earlier

1594157026
ikskuh
fn unsigned() u32 { return 0; }

1594157041
pixelherodev
?

1594157043
pixelherodev
Ah

1594157045
pixelherodev
No, i know

1594157054
pixelherodev
He linked me something on the matter already

1594157066
ikskuh
i looked up some symbol stuff

1594157068
pixelherodev
Probably time to take a look ;)

1594157077
ikskuh
but you can alias only into one direction

1594157094
ikskuh
one possible thing for CBE would be post-processing of the ELF files

1594157098
ikskuh
and renaming the symbols

1594157101
xackus
leeward: i need to run some zig on AVR too

1594157133
yeti
leeward: st.ht has per project wikis too?

1594157137
pixelherodev
I think e.g. emoji names will just be rejected

1594157139
pixelherodev
yeti: yes

1594157141
pixelherodev
man.sr.ht

1594157223
leeward
xackus: It works pretty well as long as you use gnu ld to link and don't try to use avrlibc

1594157256
ikskuh
leeward: thanks for the hint, will try as well

1594157281
pixelherodev
One other option is to e.g. use the name_hash as the symbol :P

1594157299
leeward
ikskuh: Ooh, the post-processing ELF file thing is an interesting idea. Also, the repo I linked should be enough to get you started.

1594157309
xackus
leeward: thanks for the tips, i haven't done anything 'nonstandard' with AVR yet

1594157323
ikskuh
oh, nice intro page

1594157332
ikskuh
yeah, i'll check it out when i have time for it :)

1594157345
leeward
good stuff

1594157510
yeti
sr.ht is confusing like a dungeon

1594157534
yeti
or does it lack a function to watch your repo for updates?

1594157550
pixelherodev
You mean like GitHub's notifications?

1594157559
yeti
yes

1594157561
pixelherodev
Yeah, sr.ht doesn't have those by design

1594157565
pixelherodev
You can follow an RSS feed though

1594157570
yeti
eeek

1594157573
ikskuh
rss feed is good though

1594157588
pixelherodev
e.g.

1594157617
pixelherodev
Ah hey

1594157622
pixelherodev
_ is only prepended to non-static funcs

1594157623
pixelherodev
perfect

1594157625
pixelherodev
ish

1594157649
pixelherodev
Figuring out exports will also be fun

1594157659
pixelherodev
`@export` will definitely not be allowed

1594157835
xackus
every time i start to think i know css pretty well, it immediately proves me wrong by forcing me to debug styling for a couple hours

1594157902
xackus
bonus points if i discover a browser bug

1594157911
ifreund
i know i don't know css well, so I just use as little as possible

1594157936
pixelherodev
Okay, `_Noreturn void _start (void) {}` generated :D

1594157970
xackus
i hate using js when you can do something declaratively

1594157976
fengb
xackus:

1594158040
ifreund
oh yeah I also don't use js at all

1594158047
ifreund
but I'm not really a web dev

1594158051
pixelherodev
First CBE test passes ;)

1594158062
xackus
fengb:

1594158110
pixelherodev
No cheating involved either

1594158113
pixelherodev
It just, actually works

1594158122
leeward
sweet

1594158157
pixelherodev
Hmm, should I pay attention to calling conventions?

1594158166
pixelherodev
I think that should be dependent on features, potentially

1594158179
pixelherodev
e.g. ignore it by default, but if targeting GNU extensions, use them

1594158193
leeward
They matter for .Signal and .Interrupt.

1594158200
leeward
Probably some others too.

1594158290
leeward
As a user, I'd rather it fail noisily if it can't translate something.

1594158313
pixelherodev
True

1594158319
pixelherodev
I think some of them should error

1594158326
pixelherodev
But e.g. fastcc should just lower to ccc

1594158442
pixelherodev
Now for some instruction translation :)

1594158635
pixelherodev
... what's EBADF?

1594158650
pixelherodev
Ahh, I see

1594158672
pixelherodev
Double-closed a file :P

1594158896
KubaSO
Also, it looks like zig took that C++ lightweight error handling paper (p0709) and actually delivered it ahead of time :)  (it's not exactly the same thing, but I like it anyway)

1594159345
pixelherodev
... you know that feeling when you accidentally kill your WM locally instead of over SSH, and then you can't relaunch Wayland

1594159352
pixelherodev
... yeah, didn't think so :P

1594159367
pixelherodev
KubaSO: what paper is that?

1594159391
KubaSO
pixelherodev Herb Sutter's

1594159553
pixelherodev
gotcha

1594159710
pixelherodev
Bug report while I'm stuck in a TTY: multiline strings after normal comments receive the wrong level of indentation for the first line

1594159745
pixelherodev
Or perhaps, it's to do more with the context?

1594159750
pixelherodev
Meh, I'll open a proper ticket later

1594161528
pixelherodev
no-arg function calls with no return value working

1594161698
pixelherodev
Just need to reorder function outputs

1594161722
pixelherodev
(lazy eval means that start is detected before main even if main is defined first, so we need to declare all functions that get called at the top of the output)

1594164293
pixelherodev
Okay!

1594164303
pixelherodev
Declarations generating correctly :)

1594164323
pixelherodev
`fn main() noreturn {} export fn start() noreturn {main();}` translates :)

1594164332
pixelherodev
(though it

1594164541
pixelherodev
The hard part will be making this work incrementally

1594164881
pixelherodev
Woot! Second test passes!

1594165344
pixelherodev
Now for something a bit more complex: `_ = main();` -> `(void)main();`

1594165408
pixelherodev
And, since it returns a u8 there, auto-inclusion of stdint.h (decided that using nostdinc is dumb)

1594165468
pixelherodev
... going to be improving the frontend too for this, which is double the awesome

1594165646
pixelherodev
andrewrk: are you up for some questions?

1594166095
pixelherodev
Whelp

1594166099
pixelherodev
Going to have to wait on those then

1594166104
pixelherodev
For now, parameters and inline asm

