1581987479
andrewrk
yeah it's a good change

1581987691
daurnimator
should merge it ;)

1581987826
andrewrk
I have to review the code first

1581987982
andrewrk
@_@ 15 new issues in 2 days

1581988173
fengb
"error - detected leaked allocations without matching free: 268435456" I don't think this is right

1581996361
fengb
Hmm, 2863311530 == 0xAAAAAAAA

1581996882
fengb
Oh I remember this. It's an LLVM design flaw for wasm -_-

1581997273
andrewrk
what's that?

1581997531
fengb


1581997592
fengb
I'm not sure why this isn't the default option

1581997671
andrewrk
ah now I see why you were reading about guard pages

1581997735
fengb
I was actually trying to figure out where the wasm stack should live. THis was a byproduct of me poking around >_>

1581997760
fengb
Trying to actually get my VM executing stuff. I keep getting bogged down by details

1581997869
fengb
Setting undefined to 0xAA really helped debugging that :P

1581997885
andrewrk
so --stack-first makes the stack grow upwards instead of downwards? that's interesting

1581997912
fengb
I think it just swaps where the global is. So stack starts at global bottom and goes downward

1581997922
andrewrk
oh! that's perfect

1581997924
fengb
So there wouldn't be a chance of memory corruption but instead just blow up immediately

1581997949
fengb
Which makes the default behavior... a really confusing default

1581998017
andrewrk
do you know how to mess with the linker lines that zig emits?

1581998030
andrewrk
it's one of the most straightforward parts of the compiler to work on

1581998050
fengb
I think so. I remember finding the elf stack size definition at one point

1581998107
andrewrk
if you look at construct_linker_job_wasm it should be fairly clear

1581998131
fengb
Great 👍

1581998242
andrewrk
alright I think I owe people a bunch of bug fixes & PR merges

1581998252
andrewrk
but first I owe myself some chocolate and video games

1581998287
andrewrk
that self-hosting libc detection and dynamic linker detection kicked my butt

1581998304
fengb
I think you owe yourself a good rest

1582003053
andrewrk
fengb, how's the vm coming along?

1582032610
fengb
Um... I translated most of the op codes and that’s about it :P

1582038722
TheLemonMan
yo, is any windows user able to reproduce the test failure in #4497 ?

1582038757
TheLemonMan
my windows VM is extremely slow and getting Zig to compile is gonna take too much time

1582039051
shakesoda
can i use comptime stuff to generate symbols to export

1582039079
shakesoda
i'm trying to figure out what i can do to approach exporting stuff with this crazy macro-powered name mangling that haxe's hashlink libraries need

1582039123
TheLemonMan
sure thing, @export allows you to set the external name for every symbol

1582039245
shakesoda
wonderful, looks like exactly the tool for the job, i will see where this path leads

1582039251
shakesoda
thanks

1582040349
andrewrk
I think @bytesToSlice and @sliceToBytes can be removed from the language in favor of functions written in zig

1582040513
TheLemonMan
outstanding idea, that saves me the need to find out why the PR is erroring out heh

1582040565
fengb
That'd make sense, especially since `asBytes` and `bytesAsValue` are already there

1582040697
fengb
`testing.expect(codeface.* == 0xC0DEFACE);` I think someone was having fun

1582041942
shakesoda
does zig have a good way to alias types such that the two types won't be compatible without at least an @as, or should i do something like have a struct/union with a single field

1582042250
andrewrk
alright well it's up for grabs then:

1582042263
andrewrk
if anyone wants those sweet deletions on their commit record

1582042304
andrewrk
shakesoda, you would need the struct/union with single field. Here's the proposal for that:

1582042837
shakesoda
andrewrk: thanks

1582044604
TheLemonMan
sigh, trying to find the problem with the windows build by trial and error is going to take a lot of time

1582044611
TheLemonMan
every CI build takes ~10 mins

1582045138
andrewrk
you need some dedicated windows hardware

1582045234
fengb
andrewrk: can Pinephone run the nightly build?

1582045266
andrewrk
I gave my pine phone to rich felker

1582045311
fengb
Oh... that useful huh? 🙃

1582045395
andrewrk
I saw a screenshot of someone else running the nightly build

1582045397
FireFox317
TheLemonMan, I could help you, have a windows machine here

1582045418
FireFox317
well currently I'm on linux, but i have a dual boot

1582045668
TheLemonMan
FireFox317, oh that'd be cool (and it'd avoid me to install windows on this lappy)

1582045700
FireFox317
one moment, have to boot, and build zig on windows :)

1582046336
FireFox317
on windows only a release build of zig is possible right?

1582046410
mikdusan
pretty sure you can get a Debug build

1582046421
BaroqueLarouche
If you want a debug build, you need to build LLVM and Clang yourself

1582046458
TheLemonMan
ouch

1582046469
FireFox317
hmm, thats annoying

1582046500
FireFox317
someone has a debug build of llvm for windows 10 laying around? :)

1582046953
fengb
Maybe a dumb question... is glibc a core part of GCC?

1582046972
jwh
no

1582047647
mikdusan
FireFox317: are you building llvm debug yourself? important to use -DLLVM_USE_CRT_DEBUG=MTd as shown here:

1582047649
mikdusan


1582047693
FireFox317
mikdusan, nah i was trying to help TheLemonMan, and using a debug build is also fine now

1582047709
FireFox317
but thanks for the help :)

1582048796
andrewrk
on windows a debug build is basically only useful for one-off debugging things

1582048816
andrewrk
in practice you would need both release and debug builds of llvm/clang

1582048825
andrewrk
which is a lot to ask for from your hard drive

1582049151
andrewrk
TheLemonMan, you were so right about looking for .s extension way back ago

1582049211
TheLemonMan
hah there's still time to adopt that behavior

1582049343
andrewrk
yeah that's #3508

1582049388
TheLemonMan
how many more breaking changes can we cram in 0.6 is still unknown :P

1582050076
fengb
All of it!

1582050684
BaroqueLarouche
break ALL the things!

1582051743
metaleap
heh `@compileLog(@TypeOf(someFn).ReturnType.ErrorSet);` outputs "@TypeOf(someFn).ReturnType.ErrorSet"

1582051882
betawaffle
heh

1582051905
TheLemonMan
it's not wrong nor right

1582051906
betawaffle
but that's what the type name

1582051930
betawaffle
if you give it an explicit name, it will probably show that

1582051941
metaleap
betawaffle: well i didnt ask for @typeName

1582051981
metaleap
guess its not a deeply-traversing-anything fmt-print yet

1582051990
betawaffle
i think the way a `type` is logged is with the @typeName

1582052004
metaleap
true

1582052033
fengb
You can use std.fmt.bufPrint() at comptime to use fmt.format

1582052053
fengb
Speaking of which, is there an easier way to work with error sets? I ended up rolling my own:

1582052061
metaleap
oh neat, somehow i only had fmt.printAlloc in mind but with bufs itd work

1582052108
fengb
Note: bufPrint only uses a slice... I'm starting to wonder if we should rename std.Buffer

1582052114
betawaffle
also speaking of error sets... i think i may have found a bug recently

1582052123
metaleap
fengb: so much of this (incl my above usecase) can be userland-rolled that i suppose more commonly needed things will keep arriving into std.meta

1582052152
betawaffle
i think the compiler might have trouble with inference when peer-type resolution is involved?

1582052164
betawaffle
let me make an example

1582052267
betawaffle


1582052287
ForLoveOfCats
Potentially dumb question: Is it possible to build a struct at comptime with some sort of loop? I am trying to take a `[]FnArg` and package it up as a type which can be passed to `@call` (I'm wrapping std.Thread.spawn to allow me to pass more than one arguments as an anonymous struct)

1582052295
betawaffle
in that, foo would be inferred to have an empty error set (it seems), and bar would not

1582052339
betawaffle
am i missing something?

1582052344
betawaffle
or is that a bug?

1582052369
andrewrk
ForLoveOfCats, your issue is #383

1582052375
betawaffle
ForLoveOfCats: not currently possible to build a new struct at comptime

1582052546
ForLoveOfCats
So there is a compiler limitation on this and it is different from what ArrayList(T) does by returning a struct at comptime?

1582052602
betawaffle
you can make structs at comptime, just not with comptime-dynamic fields/decls

1582052621
ForLoveOfCats
That's what I thought you meant, thanks for clearing that up

1582052632
metaleap
well for decls there was some abusingnamespace hackery floating around but .. yeah =)

1582052667
betawaffle
metaleap: i'm still not sure i'd consider that comptime-dynamic

1582052694
metaleap
yeah couldnt do it in a loop or such i guess

1582052721
metaleap
still, conditional decls. it's something. if one is into that sorta thing

1582052735
betawaffle
oh?

1582052812
metaleap
dont remember how that worked but usingnamespace was involved and its operand was comptime-decided to be empty struct or struct-with-stuff. might have been outdated too

1582052819
fengb


1582052851
betawaffle
metaleap: oh, that's clever

1582052864
metaleap
fengb just found it (or another example of "it")

1582052872
fengb
This file has some pretty amazing usingnamespace hacks

1582052990
metaleap
ah yeah L294 has the "conditional decl" example

1582053108
fengb
Silly aside: the Z suffix looks like it's for Zig instead of zero terminated strings >_>

1582053350
companion_cube


1582053364
andrewrk
fengb, that's just an added bonus ;)

1582053402
betawaffle
i really wish zig had a "flags" type that could be used in the way enums are often abused in C

1582053417
fengb
Oh is this guy `pron` on HN?

1582053431
fengb
betawaffle: packed structs

1582053450
andrewrk
oh wow nice connection fengb

1582053469
betawaffle
that's not very fluent, and it's difficult or impossible to convert to that from a C enum

1582053479
ForLoveOfCats
Is there any hack that will allow generating the name of a struct field's name? (I'm headed down a rabit whole with the `pub usingnamespace` hack)

1582053482
companion_cube
fengb: yes

1582053496
ForLoveOfCats
*hole

1582053530
fengb
*rabbit

1582053539
fengb
I need a troll emoji

1582053561
mikdusan
fengb: we already have a troll emoji. it's `fengb` :P

1582053589
fengb
Fine, I need a serious emoji

1582053592
andrewrk
betawaffle, in my experience regular ints with constants work pretty fine for flags, same as C

1582053599
companion_cube
🤔 does the job fengb

1582053620
betawaffle
yeah, they work "fine" but you don't get any type safety

1582053627
andrewrk
but yeah align(0) fields (#3802) would be the ziggy type safe way to do it

1582053659
andrewrk
fengb, this guy looks exactly like me

1582053691
companion_cube
andrewrk == pron??

1582053693
fengb
Well that explains all the Zig propaganda from his HN account /fengb

1582053759
companion_cube
nice use of /fengb /s

1582053772
andrewrk
maybe the discord channel will add a custom fengb emoji

1582053790
andrewrk
on IRC you would have to get it into the unicode standard

1582053817
companion_cube
or make your IRC client rewrite ":fengb:" into some picture

1582053838
fengb
💩

1582053847
andrewrk
me: monads are too hard to understand

1582053854
andrewrk
also me: skipping the part of the video where he explains how monads work

1582053859
fengb
Since I’m basically shitposting anyway

1582053917
fengb
Hmm I think I’ve seen this. Is this where he proposes CPS as a solution?

1582053918
companion_cube
wait until he reaches callback hell

1582053930
companion_cube
tbh it's a good presentation of monads from a concrete point of view

1582053936
companion_cube
it's all about the executor

1582053946
andrewrk
ok I sat through monad explanation. still do not understand

1582053961
fengb
Which is funny... because a stackless async is kind of a style of CPS

1582053981
betawaffle
andrewrk: monads are for

1582053993
andrewrk
wait, an error union is a monad?

1582054009
companion_cube
`Result<T,E>` is a monad for a fixed E, yes

1582054016
fengb
Anything is a monad if you squint hard enough

1582054020
companion_cube
lol, no

1582054039
companion_cube
but clearly, Option/Result/List/Future are good examples

1582054054
fengb
Optionals, promises, Linq

1582054066
companion_cube
… yes? :D

1582054291
companion_cube
it'd be funny if the things he presents about scoped continuations were equivalent to zig's async

1582054299
andrewrk
I hate that "then" pattern that js has

1582054306
andrewrk
18:20

1582054329
andrewrk
IMO callbacks are better than that

1582054355
fengb
Disagree. Callbacks can't capture state and compose correctly

1582054368
companion_cube
andrewrk: don't worry, he gets on with better solutions

1582054372
fengb
So you end up having some weird hack to prevent multi-firing

1582054375
companion_cube
let imperative langs be imperative!

1582054384
fengb
But I do agree with that

1582054393
andrewrk


1582054399
fengb
Except... his version of continuations brings back my PLC nightmares

1582054410
fengb
andrewrk: I read that. It's not about organization as much as flow handling

1582054432
fengb
Callbacks can't capture "once-and-only-once" without a bunch of hacks, e.g. exception handling

1582054444
andrewrk
doesn't the "then" thing have the same flaw?

1582054490
companion_cube
no, promises are eval-exactly-once normally

1582054504
fengb
No, promises guarantee that each body pair then(success, failure) only runs once. It's actually really hard to get it to run multiple times

1582054524
andrewrk
I strongly agree with this pull > push thing

1582054544
andrewrk
fengb, I see, I did not know that!

1582054549
fengb
Also promises are highly composable. Callbacks... are a wild west there

1582054564
companion_cube
anecdota: in OCaml, people work on a multicore runtime, and they have delimited continuations like in this talk… it's quite modern

1582054679
betawaffle
i really wish i could post-process a c import from zig

1582054729
betawaffle
like filter/map/modify the generated decls

1582054918
andrewrk
betawaffle, related:

1582054941
andrewrk
this is the other way around: you would "inject" more C code before importing, to perhaps expose macros or do other type annotations

1582055082
betawaffle
the things i want to do are: rename things, exclude thing from being exported, and either replace some function argument types, or provide hints to avoid cases of [*c] types

1582055245
betawaffle
oh also... i want to be able to define methods and such on some of the generated structs/enums/etc

1582055282
andrewrk
this use case adds a lot of complexity that isn't strictly necessary

1582055368
betawaffle
the latter thing would be completely unnecessary if we have newtype

1582055520
betawaffle
ok... what about this... what if @cImport was gotten rid of completely, and instead made available as part of the build system?

1582055557
betawaffle
in a way that we could write whatever we wanted to post-process the result before it gets turned into a zig file

1582055575
mikdusan
well the build system won't stop you from doing that right now

1582055579
andrewrk
it's already available as part of the build system

1582055583
andrewrk
b.addTranslateC

1582055591
betawaffle
hmm

1582057343
betawaffle
this seems like the issue i was after:

1582057450
andrewrk
this proposal is to annotate the C source code

1582057465
andrewrk
e.g. if you have access to modify the upstream .h files

1582057467
betawaffle
well, it discusses some other things

1582057610
betawaffle
tbh, if @refiy was a thing, i wouldn't have a problem

1582057720
betawaffle
i also really want @result()

1582057736
betawaffle
(pointer to result location)

1582057882
andrewrk
the latter is #2765

1582058112
betawaffle
andrewrk: would it need to be a pointer, or does zig have the concept of it being a value in a particular location? ie. could you do @result() = foo, or would you need to do @result().* = foo?

1582058239
andrewrk
the latest proposal is that it would be a normal variable declaration and zig would infer that a certain variable is always returned at every exit point. if you relied semantically on this working, then you would get a compile error if it didn't happen with #3803 or #3804

1582058273
andrewrk
consider #2761 for why @result() is problematic

1582058395
Sahnvour
mikdusan: I am indeed building llvm myself, but I wouldnt understand how it affects compiling a stage1 .o file

1582058753
FireFox317
ah andrewrk, i see you already merged #4435, nice!

1582058818
FireFox317
However, i think the test that you added currently won't pass, because how the code is currently structured it has to resolve all the decls before it knows the length.

1582058836
FireFox317
I'm currently working on trying to make each decl entry lazy, instead of the whole slice

1582059013
andrewrk
FireFox317, well it does pass

1582059014
andrewrk
:)

1582059045
FireFox317
hmm

1582059121
andrewrk
TheLemonMan, can we reach some kind of agreement on #3971?

1582059153
FireFox317
ah i see, in the test case you are looking at the fields of the struct, not the decls

1582059172
TheLemonMan
sure thing, I have no better idea tho

1582059176
andrewrk
FireFox317, yes and that test did not pass previously

1582059196
andrewrk
TheLemonMan, are you ok with my latest counter proposal?

1582059204
FireFox317
andrewrk, nope indeed, okay cool :)

1582059223
andrewrk
TheLemonMan, I'm happy to take the PR if you want to hand-off. I just wanted you to speak your mind if you disagreed with it

1582059334
TheLemonMan
ehh, I think that's fine, I don't have {m,}any use-case for late-externing but we gotta start somewhere

1582059523
TheLemonMan
#4497 passed the CI checks o/

1582059623
FireFox317
nice work TheLemonMan!!

1582059636
andrewrk
TheLemonMan, another test for you to run locally: ./zig test ../test/stage1/behavior.zig --test-evented-io

1582059648
andrewrk
this passes in master branch on linux, but it's not covered by the CI

1582059853
TheLemonMan
you've killed my temporary happiness :(

1582059881
TheLemonMan
FireFox317, thank you for sparing me the pain of setting-up windows

1582059926
FireFox317
you're welcome :)

1582060015
andrewrk
TheLemonMan, sorry :( it can probably be fixed by putting `noasync` on some fn calls to prevent "asyncness" from bubbling up

1582060037
andrewrk
since it's guaranteed that we open the debug info in blocking mode

1582060065
TheLemonMan
oh I was running the tests with an old zig0 copy, let me retry

1582060066
andrewrk
anything that calls the stream write functions will become async without that

1582060162
andrewrk
TheLemonMan, btw the only thing `--test-evented-io` does is affect 1 line of std/special/test_runner.zig:

1582060783
araspik
How can I override `_start` while using `std` on Linux?

1582060934
TheLemonMan
pub fn _start() callconv(.C) noreturn { ... }

1582061143
andrewrk
araspik, note this will affect some language features such as threadlocal variables and ensuring the stack size is large enough, and some std lib features such as accessing environment variables and process parameters

1582062880
araspik
andrewrk: that's all fine, I just wanted to see how small a program I could make. Thanks!

1582062964
andrewrk
araspik, here are some relevant flags: --release-small --strip --single-threaded

1582063016
araspik
andrewrk: It's not working, seems to expect a semicolon in place of `callconv(.C)`

1582063064
araspik
wait, it compiled with `pub fn _start() callconv(.C)` and no return type?!

1582063136
araspik
... never mind, `objdump` shows no assembly was left within, I used flags `--release-fast --single-threaded -ffunction-sections -fno-PIC -fno-stack-check --strip`

1582063240
andrewrk
all of these are redundant for your case: -ffunction-sections -fno-PIC -fno-stack-check

1582063290
andrewrk
you need to export _start

1582063319
andrewrk
pub export fn _start

1582063340
araspik
it's still giving me weird parsing errors

1582063362
TheLemonMan
...are you using the 0.5 compiler?

1582063370
araspik
without `callconv(.C)`, it says that it expects `noreturn` on a line which already has `noreturn`

1582063389
araspik
with `callconv(.C) noreturn`, it expects a semicolon after `callconv(.C)`

1582063391
andrewrk
araspik,

1582063446
andrewrk
you gotta refer to the 0.5.0 docs for the 0.5.0 compiler. but better yet, use a more recent compiler

1582063488
araspik
I'm on zig 0.5.0, should I build from source? (I'm on Gentoo, just did a full system upgrade)

1582063527
andrewrk
I recommend to use the binaries from ziglang.org/download unless you want to contribute to the compiler source code

1582063546
andrewrk
I thought the gentoo package had an option for master branch builds

1582063556
TheLemonMan
telling a gentoo user to use prebuilt binaries is a bold move

1582063567
andrewrk
haha

1582063589
andrewrk
well the build-from-source instructions are in the README, so... do what you want

1582063609
araspik
I'll setup a script to auto-download the binaries via the JSON page

1582063640
araspik
this solution is bordering on bearable ;)

1582063694
andrewrk
or just do it manually, and then update when you need a bug fix or new feature

1582063717
andrewrk
it's just wget + tar xf

1582063808
araspik


1582064058
araspik
I've written a shell script to do it for me, and hooked up to cron

1582064060
araspik
now I'm happy

1582064510
araspik
I could probably set it up on master, but using prebuilt prevents me from needing to constantly update clang, which takes

1582064589
pixelherodev
`I thought the gentoo package had an option for master branch builds` it does

1582064597
pixelherodev
`emerge zig=9999` IIRC

1582064601
pixelherodev
No, wait

1582064660
araspik
pixelherodev: I don't remember how to set it up, and I'm too lazy/sleepy to do it right now

1582064671
araspik
It's probably something in `package.use`

1582064686
pixelherodev
Nah, I got it

1582064692
pixelherodev
`emerge -av =dev-lang/zig-9999`

1582064698
pixelherodev
Depending on your shell, might need to escape the =

1582064706
araspik
zsh, so probably

1582064708
pixelherodev
Yeah

1582064716
araspik
meh, I'll do it later

1582064726
pixelherodev
`sudo emerge -av \=dev-lang/zig-9999 --autounmask{,-continue}`

1582064738
pixelherodev
That automatically adds it to package.use and emerges it

1582064754
TheLemonMan
the command gets longer and longer heh

1582064773
araspik
TheLemonMan: Not if you use `EMERGE_DEFAULT_OPTS`

1582064796
araspik
But that shlt grows

1582064808
pixelherodev
That's not that bad

1582064826
pixelherodev
Keeping in mind that the equivalent on e.g. Debian would involve adding an unstable repository

1582064843
araspik
try writing out some highly specific update/resume command and you'll see what long looks like

1582064854
pixelherodev
Yeah, I had one that was ~10 lines recently

1582064860
pixelherodev
Because my package.mask was wrong :(

1582064873
araspik
I hate it when `emerge` sets up bad stuff automagically

1582064907
araspik
Once I had weird stuff going on in `package.use` that was forcing the introduction of a few use flags and stuff all because of this one package I'd installed (and then uninstalled) a while back

1582064918
pixelherodev
To be fair, it only happened because I was using LibreSSL

1582064932
araspik
the more exotic the setup, the longer the command

1582064932
pixelherodev
And not all ebuilds properly support it

1582064935
pixelherodev
Yeah

1582064959
araspik
the worst I've been in is trying to synchronize Ruby or Python versions across all packages

1582064989
pixelherodev
Heh, Python2's final EOL in Gentoo is going to be

1582064996
araspik
I cannot

1582064998
andrewrk
pixelherodev, would you mind updating

1582065003
pixelherodev
Yeah sure

1582065023
pixelherodev
Though to be fair, anyone using Gentoo will probably know how to do that :P

1582065031
araspik
very true

1582065067
araspik
if you can keep a Gentoo system up-to-date for over a month then you have learnt almost everything you will ever need to know

1582065082
pixelherodev
Here's a fun idea: Suicide Linux + Gentoo :P

1582065099
araspik
`words[0].execute`

1582065125
araspik
or `words[4]`, depending on how you look at it

1582065250
pixelherodev
?

1582065259
araspik
suicide, dude

1582065260
araspik
suicide

1582065287
araspik
also btw `emerge '=dev-lang/zig-9999'` is easier than optionally escaping based on shell

1582065294
araspik
I've updated the wiki accordingly

1582065312
pixelherodev
Right, thanks

1582066802
jaredmm
With a return type of *const [somefunc(input) :0] u16, is there a way to capture the function result in the body or do you have to run it twice?

1582067525
andrewrk
jaredmm, you have to run it twice

1582067537
andrewrk
it's cached the second time

1582068339
ForLoveOfCats
Just to make sure my understanding is correct, async/await is completely seperate from threading yes? The whole concurrency vs parallelism jam

1582068352
jaredmm
Hm. That means this is three loops for W literals with a mostly duplicated function to calculate the codepoint length.

1582068353
jaredmm


1582068634
andrewrk
ForLoveOfCats, the short answer is "yes". what OS are you currently on?

1582068673
ForLoveOfCats
Linux 4.19 x64

1582068710
ForLoveOfCats
How does async/await differ between supported platforms?

1582068839
ForLoveOfCats
I'm reading through

1582068908
andrewrk
ForLoveOfCats, it doesn't differ between platforms. here's a "hello world" async/await program:

1582068922
andrewrk
I asked only before suggesting to use "strace" :)

1582068937
ForLoveOfCats
Ah, makes sense

1582068940
ForLoveOfCats
So what am I missing?

1582068981
ForLoveOfCats
I was under the impression that async/await allowd for concurency but not parallelism, but the above demo claims to demonstrate parallelism

1582069011
andrewrk
you're probably missing this:

1582069016
ForLoveOfCats
and by you're own statement here of it not interacting with the OS at all further implies that it is indeed not throwing up new threads to run in parallel

1582069034
ForLoveOfCats
*your

1582069051
andrewrk
this is the code that runs before main(). if you opt in to evented I/O mode then zig initializes a global std.Event.loop

1582069067
andrewrk
...which spawns a thread pool

1582069106
ForLoveOfCats
Wait, so evented IO changes more than how IO is handled by the std internally?

1582069120
andrewrk
no, that's all it changes

1582069138
ForLoveOfCats
But that's still not parallelism for the developer's written code

1582069139
andrewrk
basically, if you add `pub const io_mode = .evented;` next to your `pub fn main` then your zig application will have concurrency semantics very similar to Go

1582069168
andrewrk
I'm not following

1582069171
ForLoveOfCats
If that changes only how actual IO is handled, how does that allow general non-IO application logic to be written for parallelism?

1582069193
ForLoveOfCats
and I'm aware of std.Thread

1582069204
ForLoveOfCats
I'm trying to clear up my confusion with the wording of

1582069310
andrewrk
the default mode of the std lib event loop is a thread pool, with 1 worker thread per cpu core. so if you were to, for example, var f = async foo(); var b = async bar(); and then foo() and bar() do I/O, that will end up with threads executing in parallel

1582069330
andrewrk
you can also force it with std.Event.loop.startCpuBoundOperation()

1582069363
andrewrk
the implementation of that function is quite elegant:

1582069422
andrewrk
the beautiful thing about startCpuBoundOperation() is that it is a no-op in single threaded applications and blocking I/O applications

1582069537
ForLoveOfCats
So there

1582069595
andrewrk
I don't understand the question

1582069644
andrewrk
the only global thread pool is in lib/std/event/loop.zig. you can grep the codebase to see what calls it. it's really not very complicated

1582069716
andrewrk
I'm sorry I'm not trying to be obtuse. I know the documentation for this is very poor

1582069793
ForLoveOfCats
I'm currently re-reading the documentation for this to better express my confusion (maybe even pick something out which fits together with something you've said here)

1582070112
jaredmm
What would a Zig representation of a definition like `typedef struct tagMOUSEHOOKSTRUCTEX : tagMOUSEHOOKSTRUCT { DWORD mouseData; } MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;` be?

1582070192
andrewrk
jaredmm, you can find out by putting that in foo.c and then running: zig translate-c foo.c

1582070224
jaredmm
Yeah, it generates `pub const struct_tagMONITORINFOEXW = extern struct {

1582070224
jaredmm
szDevice: [32]WCHAR,

1582070224
jaredmm
};` which isn't valid.

1582070224
jaredmm
: struct_tagMONITORINFO,

1582070232
jaredmm
Silly newlines.

1582070297
andrewrk
I see. I don't actually know the answer to that question without investing a lot more time

1582070381
jaredmm
Ah

1582070391
daurnimator
jaredmm: what does the : do in C? I don't know if I've seen that before

1582070396
daurnimator
is that C++?

1582070399
jaredmm
It is.

