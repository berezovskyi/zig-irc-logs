1586649921
emekoi
do you think that running tests in parallel would speed them up, or just introduce needless headache?

1586650003
pixelherodev
You can run tests in parallel?

1586650009
pixelherodev
Or is that hypothetical?

1586650170
pixelherodev
Another bad name for stdlib: ztd

1586650176
pixelherodev
`const ztd = @import("std");`

1586650354
emekoi
hypothetical

1586650382
emekoi
i was thinking of implementing to see if we could speed up running tests for ci

1586650452
pixelherodev
Depends on the test

1586650468
pixelherodev
Not sure for stdlib, but I'd guess it'd help marginally

1586650473
pixelherodev
For my tests it'd be useless though

1586650478
pixelherodev
Compilation time is the much bigger problem

1586650481
pixelherodev
s/the/a

1586650499
pixelherodev
Compiling a file for testing locally takes ~9 seconds, the actual tests take ~0.2

1586650513
pixelherodev
(Compiling remotely takes ~5 seconds)

1586650577
emekoi
i suppose a better idea would be compiling test in parallel then?

1586650681
pixelherodev
Any form of parallel compilation will likely end up being more reliable and more worthwhile IMO (but I'm definitely biased)

1586650694
pixelherodev
Then again

1586650703
pixelherodev
Tests in parallel shouldn't require values from other tests

1586650716
pixelherodev
Best idea: profile

1586650723
pixelherodev
See what's taking the most time

1586650740
shakesoda
any kind of concurrent building would be a more general win

1586650744
pixelherodev
Can C++ files be added via addCSourceFile?

1586650747
shakesoda
yes

1586650753
pixelherodev
good, good

1586650775
pixelherodev
Stripping out the build system (which requires Python + CMake, plus custom shell scripts) and replacing with Zig build :)

1586650800
shakesoda
it'll build a lot slower :(

1586650821
shakesoda
that's the only reason i haven't done the same

1586650955
pixelherodev
I'm mostly going to be working on the Zig parts, not the C

1586650957
pixelherodev
So it shouldn't matter

1586650966
pixelherodev
Either way compiling the Zig will be the bottleneck

1586650979
pixelherodev
Concurrent building would be awesome

1586650996
pixelherodev
Relatedly

1586651001
pixelherodev
Is it possible to add .rc files?

1586651010
pixelherodev
Want to embed the icon on Windows

1586651011
shakesoda
that's usually true for me, but zig deciding fairly regularly to fully rebuild takes a looooooooot of time

1586651029
shakesoda
especially if there's a build failure, so it doesn't cache stuff, and it rebuilds all that c again needlessly

1586651039
pixelherodev
So what you're saying is

1586651049
pixelherodev
We need to fix it to cache stuff if unrelated pieces fail?

1586651066
shakesoda
something like that

1586651072
pixelherodev
Would this be in build.zig?

1586651076
pixelherodev
uh

1586651079
pixelherodev
the std's build.zig I mean

1586651082
pixelherodev
std.build

1586651083
shakesoda
i have no idea about the mechanics of this

1586651090
pixelherodev
I'll look into it

1586651096
pixelherodev
If I get it done real quick it might make 0.6 :P

1586651097
shakesoda
just that it makes my builds slow a lot of the time

1586651116
shakesoda
well, slower, zig builds aren't particularly quick anyways

1586651131
shakesoda
eventually!

1586651179
pixelherodev
Unrelated: huge thanks to Andrew for aaf99371b22e816a4162391d799b9d22bba21120

1586651229
pixelherodev
I plan on maintaining a 0.6 with backported bug fixes (though I'll probably update it like once or twice a week and not immediately), would be interesting to see how performance can be improved if maintainability is discarded :P

1586651280
pixelherodev
Probably not much, by me at least

1586651291
pixelherodev
Still don't have enough familiarity with the zigc source for that

1586651331
emekoi
i think you can pass .res files to the linker

1586651464
emekoi
try `LibExeObjStep.addObjectFile` on the res file

1586651537
pixelherodev
Ahh thanks

1586651795
andrewrk
mikdusan, feel free to push to master on those release notes changes. and thank you very much!!

1586651805
foobles
what is the diffeerence between IrInstGen and IrInstSrc?what i also find interesting is that IrInstSrc contains a pointer to an IrInstGen alwaysbut both contain the IrInst base

1586651819
darithorn
am I using ArrayList wrong or is it broken? I create a new array list, append a 12 byte slice into it but the array list length is set to 20

1586651840
pixelherodev
You're using it wrong ;)

1586651847
pixelherodev
The array list allocates more space than it needs

1586651853
fengb
foobles:

1586651859
pixelherodev
So that future uses don't require more allocations

1586651870
pixelherodev
To check the actual length, use `.span().len`

1586651881
pixelherodev
`array_list.len` == capacity

1586651884
andrewrk
foobles, did you find this comment?

1586651888
pixelherodev
`array_list.span().len` == length

1586651896
darithorn
pixelherodev it says span() is deprecated though?

1586651901
pixelherodev
wait what?

1586651908
darithorn


1586651912
pixelherodev
Other methods are deprecated in favor of span()...

1586651922
pixelherodev
...huh

1586651934
shakesoda
????

1586651939
andrewrk
foobles, hm ok not super helpful but a little context:

1586651943
pixelherodev
...

1586651948
pixelherodev
it changed when I wasn't looking :(

1586651951
pixelherodev
Again

1586651963
fengb
Zig: we break your code every hour! :P

1586651970
darithorn
lol sounds about right

1586651971
foobles
andrewrk thanks

1586651973
emekoi
the danger's of using HEAD?

1586651988
andrewrk
it's a few hours before a big release, so the breaking changes we've been saving are happening now

1586651990
pixelherodev
Huh, yeah

1586651998
pixelherodev
Good good

1586652002
pixelherodev
Break all my code!

1586652003
pixelherodev
:P

1586652013
pixelherodev
darithorn, are you using head?

1586652016
darithorn
yes

1586652025
pixelherodev
Then array_list.items.len should be length

1586652029
pixelherodev
... hmm

1586652032
pixelherodev
Paste your code?

1586652038
darithorn
well, master from a couple days ago but i don't think it's changed since then

1586652041
shakesoda
andrewrk: what happened to the behavior of slicing with [0..:0]

1586652042
foobles
so even though `IrSrc` instructions do not have type info, they still have ZigValue members?

1586652042
pixelherodev
It has

1586652046
darithorn


1586652047
pixelherodev
darithorn, it very much has

1586652053
andrewrk
speaking of breaking ArrayList, it just broke again, 5 seconds ago

1586652065
pixelherodev
^

1586652075
shakesoda
was that always invalid and i got lucky it worked or did the semantics of slicing that way change

1586652086
foobles
and `ZigValue`s contain type info right? So with a IrInstrSrc, is it just null or something?

1586652103
andrewrk
shakesoda, if you slice a sentinel-terminated thing with no end index, you get a sentinel-terminated result

1586652124
pixelherodev
Oh neat, that recent breakage doesn't bother me :)

1586652129
pixelherodev
I already switched to span

1586652132
pixelherodev
Now I'm just deprecated :)

1586652143
shakesoda
i was putting sentinels on them myself and expected the :0 to just promote the type

1586652144
darithorn
i noticed that the extra bytes are all set to a constant value, in my case it was 170. so i figured something was up

1586652154
shakesoda
saying "yes, i know what i'm doing here"

1586652160
pixelherodev
darithorn, that's undefined

1586652161
pixelherodev
0xAA

1586652173
andrewrk
foobles, no - that was one of the improvements. only IrInstGen has a ZigValue

1586652175
pixelherodev
It's inserted in debug mode to indicate uninitialized memory

1586652212
darithorn
okay that makes sense

1586652228
pixelherodev
Try updating to HEAD, it should work then :P

1586652230
pixelherodev
Or

1586652232
pixelherodev
wait for 0.6

1586652234
andrewrk
sorry about the ArrayList churn. the new API is objectively simpler and has a footgun entirely removed

1586652241
foobles
aaah i see. thanks

1586652244
foobles
that makes sense

1586652246
pixelherodev
andrewrk, no worries (from me at least)

1586652247
mikdusan
foobles: IrInstSrc.child is a compiler-pass thing. IR "src" is an earlier pass, and "gen" is a pass after that. when a "src" inst gets generated into a "gen" inst, it's useful to have that link to follow. we don't need to follow from gen back to src.

1586652249
pixelherodev
Huge thanks

1586652274
foobles
cool :thumbsup:

1586652275
darithorn
that's all good, as long as its a known issue

1586652281
shakesoda
why is span marked as deprecated

1586652286
pixelherodev
Not an issue so much as "outdated"

1586652292
pixelherodev
shakesoda, because it is :P

1586652294
andrewrk
shakesoda, now you can just reference the items field

1586652299
pixelherodev
.items is now usable directly

1586652315
shakesoda
ok

1586652385
andrewrk
here's the thing about zig's language and std lib design: nearly everything took several tries to get it right. the willingness to keep iterating is what makes zig higher quality. we're not smarter or better than anyone else, we just are willing to keep trying again until we get it right

1586652438
shakesoda
i'm fine with things changing, it's just frequently not obvious 1) that they did, 2) why they did

1586652451
andrewrk
that's a really good point

1586652464
andrewrk
I'm working hard on the release notes, to make those things clear

1586652480
shakesoda
i expect my code to break a /lot/ in the ever-dangerous land of pre-1.0

1586652485
andrewrk
I've literally done nothing but merge pull requests and work on release notes for the past 2 weeks

1586652488
darithorn
oh wow my copy of the stdlib is older than i thought. i guess this week has gone by faster than i realized

1586652544
fengb
Thereâ€™s a bit of pressure to pull in all the breaking changes before release

1586652548
shakesoda
andrewrk: and help people on irc :P

1586652563
shakesoda
not to be forgotten

1586652566
andrewrk
true

1586652574
foobles
when can you assume that an IrInstrGen has a valid `child` pointer?

1586652601
foobles
since i assume that during 1st pass there are no Gen instructions for it to point to

1586652603
mikdusan
Zig is like Westworld: "Those early years were glorious... no guests, no board meetings... just pure creation."

1586652634
andrewrk
foobles, it's assigned in ir_analyze(). I think it would help you to read that function's control flow, it's kinda like the "driver" of pass 2

1586652658
pixelherodev
`we're not smarter or better than anyone else, we just are willing to keep trying again until we get it right` I think that should be in the Zen of Zig :)

1586652680
foobles
alright. i was just seeing some of the other ir_analyze_* functions assuming that the child pointers existed

1586652691
foobles
thanks :]

1586652704
pixelherodev
Is it worth me learning the internals of the compiler now? Or would it be better for me to wait for self-hosted first?

1586652809
andrewrk
foobles, the direct answer to your question is: when an IrInstSrc is analyzed, one or more IrInsntGen are generated and added to the IrExecutableGen. The IrInstSrc is then associated (by setting child) with the last IrInstGen of that sequence

1586652845
foobles
nice, ok

1586652855
andrewrk
foobles, this is important so that, when analyzing the next IrInstSrc, which points to the previous IrInstSrc, we can look at the associated

1586652973
foobles
are the IrInstSrc a list then? Or more of a tree

1586652995
foobles
i dont see any pointers to the "previous" IrInstSrc

1586653076
mikdusan
roots are IrExecutable{Src,Gen} which have ZigList<IrBasicBlock{Src,Gen}> .basic_block_list

1586653156
mikdusan
each bb has .instruction_list

1586653264
foobles
hmm ok

1586653267
foobles
i will take a look around

1586653280
andrewrk
it maps pretty closely to LLVM IR

1586653292
andrewrk
I believe this is called "SSA form" or something like that

1586653307
andrewrk


1586653310
andrewrk
there are some diagrams here

1586653410
pixelherodev
... okay now I kinda want to look at the internals

1586653451
emekoi
andrewrk how would i go about only running behavior tests?

1586653462
andrewrk
./zig test ../test/stage1/behavior.zig

1586653495
andrewrk
or: zig build test-behavior -Dskip-non-native -Dskip-release

1586653550
pixelherodev
To check OS, it's e.g. `if (std.builtin.os.tag == .windows)`?

1586653555
pixelherodev
(derived from `zig builtin` output)

1586653592
pixelherodev
Oh wait that's not what I even want though

1586653603
pixelherodev
I want to check

1586653815
foobles
for all non-pointer optionals, is there a guarantee about the representation for the "data" part, when it's null?

1586653828
foobles
like will it be zeroed out, for instance?

1586653865
shakesoda
i'd expect undefined

1586653877
pixelherodev
In debug mode maybe

1586653887
pixelherodev
In release mode, there's no guarantees as I understand it

1586653900
pixelherodev
They're represented by basically a structure with a type and a boolean

1586653912
pixelherodev
The actual value won't be initialized in optimizing modes

1586653940
pixelherodev
So debug + release-safe, 0xAA; release-fast + release-small, undefined

1586653970
pixelherodev
Thanfully not undefined as in "can run DOOM upon access" :P

1586654000
pixelherodev
I vaguely remember something about an early GCC doing that to make a point

1586654039
foobles
heh that makes sense

1586654049
foobles
makes optional comparison more difficult though :P

1586654061
mikdusan
heh I got all excited reading on llvm list "F18 upstreaming finished!" and thought cool probably a new language so cool they named it after a fighter jet. /a bit disappointed: it's fortran '2018

1586654092
pixelherodev
boo

1586654158
pixelherodev
Smart timing for Fortran though

1586654163
pixelherodev
Instead of F17/F19 :P

1586654244
foobles
opt_1 == opt_2  has got to become  `(opt_1 == null && opt_2 == null) || (opt_1 != null && opt_2 != null && opt_1.? == opt_2.?_`

1586654250
mikdusan
hmm has it ever been proposed to allow comparing two optionals if their payloads are peer-type compatible?

1586654258
foobles
yeah

1586654262
foobles
its accepted

1586654268
foobles
im trying to implement it :P

1586654278
mikdusan
oh. I'm always behind :(

1586654287
pixelherodev
Hmm

1586654293
pixelherodev
Maybe just do a comparison of the raw bytes?

1586654308
foobles
you cant, since the actual data part, if they are null, is undefined

1586654314
pixelherodev
ahhh that's true

1586654329
mikdusan
whoa no. if the payload types are same bit storage but different, we can't allow that

1586654338
pixelherodev
no no

1586654341
mikdusan
*same size

1586654354
pixelherodev
mikdusan, if you have `var a: ?u8 = null` and `var b: ?u8 = null`

1586654355
pixelherodev
Both are null

1586654368
pixelherodev
but if you were to somehow access the u8 storage, that's undefined

1586654371
pixelherodev
e.g. in IR

1586654398
pixelherodev
So if you, for instance, set a value ?u8 to 3 then to null

1586654401
pixelherodev
the u8 component might be 3

1586654405
pixelherodev
it might be 0xAA (in debug mode)

1586654407
pixelherodev
it could be anything

1586654426
pixelherodev
It shouldn't normally matter, since you can't ever access it (unwrapping will fail)

1586654446
foobles
so would it have to expand to that huge, kinda nasty expression i posted above?

1586654449
pixelherodev
Yeah

1586654454
pixelherodev
if you're the compiler, it means that, as foobles said, you have to do that

1586654454
foobles
xd

1586654467
pixelherodev
Hmm

1586654475
pixelherodev
Might be able to make it a little simpler actually

1586654498
pixelherodev
opt_1.null_bit == opt_2.null_bit && (opt_1.null_bit == true or opt_1.value == opt_2.value)

1586654515
pixelherodev
That's probably not actually better though

1586654522
pixelherodev
Well

1586654526
pixelherodev
Maybe

1586654563
pixelherodev
I'd have to go over every possibility, but I think it would mean fewer comparisons

1586654572
foobles
it is something to think about

1586654593
foobles
is it a good idea to generate that much "invisibile" IR?

1586654598
pixelherodev
Invisible?

1586654606
pixelherodev
How so?

1586654610
foobles
like its sort of magically appears on the second pass

1586654614
pixelherodev
Sure, but

1586654619
pixelherodev
That's the compiler's

1586654623
foobles
:v

1586654624
pixelherodev
It hides that complexity

1586654629
foobles
hehe good point

1586654634
foobles
this is the first one ive worked on

1586654639
pixelherodev
It's not like it's a transformation or anything

1586654648
pixelherodev
If you think this is bad

1586654656
pixelherodev
Look at optimizations :(

1586654678
foobles
i thought this might be in some sort of intermediate "transformation" pass or smth

1586654700
pixelherodev
Well, it's not really a transformation, is it?

1586654701
foobles
i guess 2 nulltypes being compared literally becomes a const bool at comptime :)

1586654707
pixelherodev
Exactly

1586654713
pixelherodev
Well

1586654716
pixelherodev
If they're comptime known

1586654728
pixelherodev
Otherwise it actually requires comparison

1586654730
foobles
nulltype is always comptime known to be null

1586654737
pixelherodev
... nulltype?

1586654753
pixelherodev
That's distinct from an optional type?

1586654757
pixelherodev
ohhhhh

1586654762
pixelherodev
a ?void ?

1586654811
foobles
no, null is its own type

1586654813
foobles
like undefined

1586654818
foobles
that coerces

1586654928
foobles
`@typeName(@TypeOf(null))` is `(null)`

1586654960
foobles
and if you do equality comparisons of 2 instances of the "null type", then it always replaces the node with a const bool

1586654968
foobles
since the value is always comptime known for that type

1586655534
pixelherodev
ahh

1586655543
pixelherodev
That makes sense

1586655544
pixelherodev
Thanks!

1586655570
pixelherodev
The one problem with migrating to build.zig is the freaking dependencies

1586655581
pixelherodev
Probably going to move them into src/third_party or something instead

1586655600
pixelherodev
and add a `update_deps` step to build.zig that clones the relevant repos and extracts the sources

1586656175
daurnimator
so, I updated my system LLVM/clang:

1586656216
daurnimator
andrewrk: ^

1586656266
emekoi
have you tried nuking your build folder?

1586656291
daurnimator
yep. that's a totally fresh folder

1586656327
andrewrk
daurnimator, I guess try reverting the part where I deleted the if statement in findclang.cmake

1586656328
emekoi
what os are you on?

1586656345
daurnimator
emekoi: archlinux

1586656364
daurnimator
emekoi: llvm and clang 10 appeared in staging last night:

1586656394
andrewrk
daurnimator, does it fix it?

1586656404
emekoi
huh, the same thing for mingw-w64

1586656435
daurnimator
andrewrk: no

1586656452
daurnimator
andrewrk: shouldn't I be hitting the CLANG_CPP_DYLIB path?

1586656480
daurnimator
/usr/lib/libclang-cpp.so exists.

1586656523
daurnimator
oh, it works when I pass `-DZIG_PREFER_CLANG_CPP_DYLIB=on`

1586656538
daurnimator
that should happen automatically if I

1586656595
pixelherodev
Ah, so Arch is moving towards that as well?

1586656714
daurnimator
pixelherodev: yes. arch has a general policy of no static libs

1586656746
emekoi
really?

1586656786
daurnimator
andrewrk: sorry I'm an idiot. I didn't apply your diff correctly; that did fix it.

1586656931
pixelherodev


1586656940
pixelherodev
I kinda want to implement a package manager using the concepts he mentions in there

1586656951
pixelherodev
That is, instead of making my own kernel

1586656972
pixelherodev
Create a distro that uses IR as it's binary form, allowing for the benefits of both static and dynamic linking

1586656976
pixelherodev
It's far far more practical

1586656977
pixelherodev
As in

1586656979
pixelherodev
It's actually practical

1586656980
daurnimator
pixelherodev: pick something more.... acheivable :p

1586656998
pixelherodev
Why isn't it achievable?

1586657014
pixelherodev
It's more LFS-scale than OS-scale

1586657031
daurnimator
pixelherodev: you're picking projects that take ~5 years to get anything usable. do something that takes like... 6 months to 1 year

1586657044
pixelherodev
I think a distro could show meaningful results within six months

1586657059
pixelherodev
OS would take more than five years undoubtedly

1586657063
pixelherodev
But distro wouldn't

1586657065
pixelherodev
Also

1586657089
pixelherodev
The components I would long-term use for the OS are used for a game system emulator / Zig compiler backend short term

1586657121
pixelherodev
Both of which are short- or medium-term (less than a month for the former, less than three for the latter if I had to guess) projects

1586657171
pixelherodev
One key difference between the OS idea and the distro one is that the distro one doesn't actually require a new compiler or JIT or anything

1586657175
pixelherodev
It can just use upstream LLVM

1586657185
gchristensen
I probably shouldn't be here. I usually just idle, and only feel inclined to chip in when I want to talk about Nix :P... but Nix has the benefits of static and dynamic linking, in dynamic linking but with statically defined locations. sharing, but no instability.

1586657186
pixelherodev
Installing a package == IR -> "-march=native" binary

1586657201
pixelherodev
I'm aware of Nix, but it doesn't really solve the issue in a way I like

1586657208
pixelherodev
Having a bunch of disparate folders isn't a real solution

1586657217
pixelherodev
It's not bad by any means

1586657224
pixelherodev
But I think that it's possible to do better

1586657242
pixelherodev
That is, for all intents and purposes everything is statically linked

1586657254
pixelherodev
But the package manager knows dependencies and can relink statically on updates

1586657269
mikdusan
gchristensen: yeah the whole notion of -l<name> searching is bad enough without "first of static or dynamic" nonsense

1586657286
gchristensen
I'm not sure I understand the quoted bet, mikdusan :)

1586657329
andrewrk
I just realized, `zig cc` lets you switch branches without rebuilding everything

1586657408
andrewrk
thanks daurnimator - pushed

1586657422
emekoi
wait should i tell cmake to use zig cc to build zig from now on?

1586657430
shakesoda
probably

1586657816
mikdusan
andrewrk, section: Accepted Proposals; for 0.6.0 is this going to be a list of current PR accepted for 0.7.0 ?

1586657875
mikdusan
s/0.6.0/imminent release notes/

1586657919
pixelherodev
If I'm linking libc, shouldn't stdlib.h be present? :(

1586657971
pixelherodev
This is for C++ code though

1586657977
mikdusan
pixelherodev: os?

1586657979
pixelherodev
So I probably need `linkSystemLibrary("stdc++")

1586657981
pixelherodev
Linux ofc

1586657992
mikdusan
is that a new linux distro? :P

1586658001
pixelherodev
Gentoo

1586658058
pixelherodev
Ugh I see

1586658063
pixelherodev
It's a freaking #include_next

1586658066
pixelherodev
In <cstdlib>

1586658077
emekoi
andrewrk mingw ci is building successfully

1586658082
pixelherodev
Which is imported from <string> so I can't fix it

1586658115
mikdusan
errr wait. we ship enough .h for include_next purposes from clang I believe. do you have a simple repro?

1586658161
pixelherodev
Gahhh no

1586658167
pixelherodev
It's trying to use GCC system headers

1586658172
pixelherodev
Not the Zig ones

1586658186
pixelherodev
/usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/g++-v9/x86_64-pc-linux-gnu/bits/os_defines.h:44:5: error: function-like macro '__GLIBC_PREREQ' is not defined

1586658196
pixelherodev
GAH

1586658228
pixelherodev
Maybe I need to specify a different -Dtarget ?

1586658271
mikdusan
this is a blind shot but try anyways: recently changed to no longer generate this file, but can you make sure zig-cache/native_libc.txt is nuked. and ~/.cache/zig/stage1/native_libc.txt is nuked.

1586658275
pixelherodev
With -Dtarget=native I get the include_nexe error again :(

1586658300
pixelherodev
mikdusan,  Neither is present

1586658304
mikdusan
k

1586658356
emekoi
does zig cc always use the bundled libc?

1586658384
pixelherodev
Hmm

1586658388
pixelherodev
When targeting native, it uses /usr/lib/gcc/x86_64-pc-linux-gnu/9.3.0/include/g++-v9/cstdlib

1586658390
pixelherodev
Is that normal?

1586658397
pixelherodev
Compiling C seems to work fine though

1586658609
pixelherodev
Yeah, C is fine

1586658614
pixelherodev
Just C++ that's borked

1586658650
mikdusan
pixelherodev: does this repro?

1586658792
pixelherodev
mikdusan, no

1586658799
pixelherodev
Might be a std.build issue

1586658810
pixelherodev
zig cc itself is fine

1586658820
pixelherodev
Probably shouldn't be using addCSource to add C++ files

1586658886
pixelherodev
Yeah, it's using --c-source

1586658996
pixelherodev
How would I go about adding a "make object" step and then add its output to an exeLibObjStep?

1586659013
mikdusan
in order for this test to work first nuke zig-cache: change `zig cc` to `zig c++` for anything using .cpp files in your project

1586659029
pixelherodev
I'm going through build.zig though

1586659034
pixelherodev
It's not using either of those

1586659034
mikdusan
oh

1586659041
pixelherodev
I think that's the problem

1586659053
pixelherodev
Might need to add C++ support to std.build

1586659064
pixelherodev
It's using `zig clang`

1586659108
pixelherodev
Yeah that repros

1586659116
pixelherodev
If I run `zig clang` on the file you pasted

1586659122
pixelherodev
Just need to change it to `zig cc`

1586659128
pixelherodev
in build.zig

1586659129
shakesoda
you can totally use addCSource for C++

1586659130
pixelherodev
for C++ sources

1586659138
pixelherodev
Oh sure you can

1586659146
pixelherodev
But it currently uses `zig clang`

1586659147
mikdusan
can you show the `zig build` output with `--verbose-cc`

1586659149
pixelherodev
Which doesn't work locally

1586659176
pixelherodev
paste the full thing somewhere you mean?

1586659179
andrewrk
I think you might be mistaken pixelherodev

1586659186
pixelherodev
I wouldn't be surprised

1586659196
mikdusan
aye paste

1586659214
andrewrk
the only thing `zig c++` does is `-lc++` by default

1586659215
pixelherodev


1586659258
mikdusan
andrewrk: an aside, i found another difference. there's an

1586659275
pixelherodev
If I manually run with `zig cc` that fails too :(

1586659296
andrewrk
this looks like the problem that was fixed recently

1586659310
pixelherodev
`zig c++` works thou - I'm out of date, aren't I

1586659313
pixelherodev
Gah

1586659316
emekoi
`zig cc` doesn't work for mingw

1586659334
pixelherodev
Which means stashing the "half-functioning --release-fast" tweaks, pulling, popping

1586659361
emekoi
it wants the windows sdk, but i can't figure out how to pass a different target or libc file

1586659439
andrewrk
pixelherodev, your error looks like your system libc++ includes are getting picked up on a higher priority than the ones zig is providing

1586659461
emekoi
nevermind, now it just seems to compile lib from source

1586659469
pixelherodev
Right, that's what I thought

1586659474
pixelherodev
No idea how to fix that though

1586659515
pixelherodev
Assuming the update isn't enough

1586659536
andrewrk
pixelherodev, it's strange because in the command line the -isystem args that include stdlib.h are first

1586659549
emekoi
and zig targets is broken on windows as well

1586659629
andrewrk
mikdusan, I don't see how that would be the case

1586659675
andrewrk


1586659712
pixelherodev
Still happens after updating :(

1586659712
andrewrk
that if is getting turned on because of want_native_include_dirs which defaults to true for cc/c++

1586659733
pixelherodev
Is it possible to just not have GCC-specific headers included?

1586659757
pixelherodev
I mean

1586659766
pixelherodev
I can probably hijack the build.zig stuff

1586659770
pixelherodev
but that's a terrible idea

1586659786
pixelherodev
ohh

1586659790
pixelherodev
andrewrk, maybe it's because of include_next?

1586659802
andrewrk
that would be nice but they're mixed in with your system libs. if you don't need

1586659819
pixelherodev
I'd also point out that it works fine with `zig c++`

1586659824
emekoi
is it okay to duplicate functions across files if they don't really fit anywhere in the standard library?

1586659843
andrewrk
sure

1586659892
andrewrk
it doesn't make any sense why zig cc and zig c++ would have different behavior. it's the same code path

1586659903
mikdusan
andrewrk:

1586659958
andrewrk
you're talking about lib/libcxx/include? that one makes sense, that's zig providing -lc++

1586659962
mikdusan
yes

1586659964
mikdusan
ok

1586659991
andrewrk
maybe the order needs to be flipped?

1586659997
andrewrk
in add_cc_args

1586660084
andrewrk
pixelherodev, try this:

1586660086
daurnimator
andrewrk:

1586660106
andrewrk
daurnimator, alright well that's what happens when we ignore failure to find certain clang libraries

1586660130
andrewrk
does your os expect zig to link against -lclang-cpp ?

1586660201
daurnimator
andrewrk: I think so (dyanmically)

1586660235
mikdusan
andrewrk: order looks good.

1586660292
mikdusan
meh ok. too many variables I would need a `zig build` repro to look into this further.

1586660307
daurnimator
$ nm -D /usr/lib/libclang-cpp.so.10  --demangle | grep getLastArgIntValue

1586660309
daurnimator
0000000001f84cf0 T clang::getLastArgIntValue(llvm::opt::ArgList const&, llvm::opt::OptSpecifier, int, clang::DiagnosticsEngine*, unsigned int)

1586660442
andrewrk
daurnimator, pass -DZIG_PREFER_CLANG_CPP_DYLIB=ON

1586660450
pixelherodev
andrewrk, no good

1586660489
daurnimator
: CommandLine Error: Option 'mc-relax-all' registered more than once!

1586660492
daurnimator
LLVM ERROR: inconsistency in registered CommandLine options

1586660497
daurnimator
hello old enemy

1586660519
pixelherodev
mikdusan, if you're still talking about `zig clang` not working: that simple file you pasted fails with `zig clang foo.cpp -c -o foo.o`

1586660530
pixelherodev
No need for build.zig

1586660597
pixelherodev
Now that I think about it

1586660602
pixelherodev
How is it even finding that string header???

1586660607
pixelherodev
It's never added to the include path!

1586660687
pixelherodev
Actually

1586660694
pixelherodev
andrewrk, I think that patch breaks it more

1586660697
pixelherodev
Now it fails with c++ too

1586660698
mikdusan
pixelherodev: `zig clang` is too raw. I need to see the `zig build-obj --c-source` that causes it

1586660707
pixelherodev
There isn't one?

1586660728
pixelherodev
It's using `zig build-exe src/main.zig --c-source ...`

1586660733
pixelherodev
No build-obj at all

1586660734
mikdusan
that's fine.

1586660749
pixelherodev
I can upload a zip somewhere?

1586660751
pixelherodev
It's

1586660753
pixelherodev
not very good though

1586660764
mikdusan
sure

1586660790
mikdusan
make a temp git repo if it's convenient. i'll clone to my linux

1586660837
pixelherodev
I have a repo already :P

1586660842
pixelherodev
Can post to a halp branch or something

1586660846
mikdusan
yup

1586660863
andrewrk
daurnimator, can you ask your distro's llvm/clang package maintainer what we're supposed to do?

1586660882
daurnimator
andrewrk: yes... but they're going to ask me "what should we be using"

1586660884
pixelherodev
github.com/zany80/zany80 branch halp

1586660910
andrewrk
daurnimator, tell them to build llvm, lld, and clang from source normally, how they do for all other cmake projects, with default options, and don't use the mono repo

1586660925
daurnimator
andrewrk: do you have a demo of dynamically linking zig against clang/llvm anywhere?

1586660943
andrewrk
not sure what you are asking. it's what is needed to build on homebrew

1586660979
pixelherodev
mikdusan, thanks; let me know how it goes!

1586661029
andrewrk
zig is not doing anything weird re: cmake/llvm config. we've bent over backwards to accommodate everything that both upstream and downstream want, and either way something is broken

1586661085
daurnimator
remind me what the cause of ": CommandLine Error: Option 'mc-relax-all' registered more than once!" is again? that C++ constructors are getting run multiple times? because of linking the same thing twice?

1586661102
andrewrk
yes c++ constructors getting run multiple times because static c++ libs get linked into multiple dynamic libs

1586661176
daurnimator
do we know specifically which libs those are?

1586661194
daurnimator
(which static lib(s) getting linking into which dynamic lib(s)?)

1586661994
mikdusan
pixelherodev: ok I have a good repro

1586662097
pixelherodev
yay?

1586662133
emekoi
hah, zig doesn't build under `zig cc`

1586662152
emekoi
i just find that kinda ironic

1586662532
pixelherodev
I'mma just work on something else for now :(

1586663145
andrewrk
emekoi, it definitely does:

1586663169
andrewrk
but I believe you that you found an environment where it doesn't work

1586663403
emekoi
it wouldn't build because of warning promoted to an error

1586663512
emekoi
clang thought that a switch statement could fall though a label with `assert(false)`

1586663716
emekoi
but now that that's fixed, i'm getting the error `duplicate symbol: vtable for llvm::opt::ArgList`

1586663742
mikdusan
pixelherodev:

1586663750
mikdusan
i believe it to be a bug

1586664432
andrewrk
mikdusan, thank you for the writeup

1586664447
andrewrk
I think we should simply translate -lstdc++ to -lc++

1586664459
andrewrk
-lc++ and -lstdc++ compete with each other

1586664480
andrewrk
we should take -lstdc++ to be an alias of -lc++

1586664492
andrewrk
zig does not support integration with third party libc++'s

1586664555
pixelherodev
ohhh

1586664559
pixelherodev
Huge thanks!

1586664572
pixelherodev
That explains a lot

1586664605
andrewrk
pixelherodev, mikdusan:

1586664670
pixelherodev
You both are awesome.

1586664671
pixelherodev
Thank you

1586664692
andrewrk
oops, that diff isn't quite complete

1586664715
mikdusan
we're going to need to `-nostdinc++` somewhere too

1586664743
pixelherodev
I love that I can just `curl $URL | git apply` :D

1586664796
mikdusan
so if I understand situ correct; we support buliding against host libc, but NEVER host libc++ or libstdc++ ?

1586664807
andrewrk
correct

1586664815
pixelherodev
Why? What's different about libc vs libc++?

1586664833
andrewrk
we can always provide libc++ but cannot always provide libc

1586664847
pixelherodev
Again, Why not?

1586664866
mikdusan
macos for example

1586664872
pixelherodev
ah ugh

1586664876
andrewrk
well take macos for example, there are license issues with the .h files as one of many roadblocks

1586664888
pixelherodev
Gotcha

1586664895
pixelherodev
Wait, they didn't do that for libc++ though?

1586664928
andrewrk
on macos libc is the syscall interface. libc++ is not part of the system

1586664935
pixelherodev
ahhh

1586664957
pixelherodev
What's missing from the diff you sent?

1586664961
andrewrk
just a sec

1586664969
pixelherodev
oh okay, was going to offer to do it :P

1586664981
pixelherodev
This is one of the few sections of the Zig source I'm confident with

1586665045
pixelherodev
Oh wait I can just s/stdc++/c++

1586665053
pixelherodev
Or

1586665054
pixelherodev
or not

1586665062
andrewrk
mikdusan, how's this?

1586665069
pixelherodev
`/usr/local/lib/zig/libcxx/include/cstddef:44:15: fatal error: 'stddef.h' file not found` :(

1586665083
pixelherodev
This still has your last patch though

1586665086
andrewrk
zig provides stddef.h

1586665093
pixelherodev
include_next

1586665099
andrewrk
don't take my last patch with the re-ordered includes

1586665105
pixelherodev
That's what I'm saying

1586665110
pixelherodev
I didn't remove the reordered includes

1586665114
pixelherodev
Going to do that now

1586665117
emekoi
andrewrk, would you be okay with me porting my old code for finding mingw libc to zig and putting it stage2?

1586665134
pixelherodev
Idea

1586665160
pixelherodev
never mind

1586665163
pixelherodev
:P

1586665201
andrewrk
emekoi, take a look at e4eb817f7999a2ee9ff62f59a6bf72a57bdf40a5

1586665238
andrewrk
that logic can be reinstated, but the problem is determining when to run it. the previous logic of looking at builtin.abi is not the correct answer for "should we look for mingw libc"

1586665260
pixelherodev
Maybe mingw should be part of the target, like glibc and musl are?

1586665266
pixelherodev
x86_64-windows-mingw?

1586665277
emekoi
we have -gnu for that

1586665280
pixelherodev
ahh

1586665291
pixelherodev
So, if targeting -gnu, look for mingw libc?

1586665306
emekoi
but zig ships with a mingw libc

1586665318
pixelherodev
...hmm

1586665319
pixelherodev
wat

1586665359
emekoi
you didn't know?

1586665373
emekoi
zig comes with musl libc as well

1586665382
emekoi
perhaps just a `--use-system-libc` flag would suffice?

1586665389
pixelherodev
No I mean

1586665397
pixelherodev
Why should that be different from other platforms?

1586665406
pixelherodev
If I'm targeting `native`, use s - ohhh

1586665408
mikdusan
andrewrk: looks good. by reproduction and pixel's git repository are happy with your patch(

1586665414
pixelherodev
It's a matter of whether mingw counts as system libc?

1586665424
pixelherodev
mikdusan, andrewrk: can confirm

1586665427
mikdusan
it's always nice to drop 3 include search dirs

1586665428
pixelherodev
I have other issues now

1586665429
pixelherodev
:P

1586665432
pixelherodev
But that one is gone

1586665484
pixelherodev
I think I might actually look into caching C files even when the overall build fails

1586665489
pixelherodev
It'd definitely help me personally

1586665500
andrewrk
emekoi, but what is the system libc? is it msvc or mingw? builtin.abi does not tell the answer

1586665525
andrewrk
as an example we use x86_64-windows-gnu and i386-windows-gnu to build zig here:

1586665542
andrewrk
and users of the resulting tarball could run the executable in a msvc context or a mingw context

1586665588
andrewrk
emekoi, can you try using `-target native-native-gnu` ? zig should not need to find mingw libc, since it can provide it

1586665602
emekoi
thats true, but the issue with that commit is that now libc files are invalid unless they contain certain fields that sometimes invalid

1586665655
andrewrk
I don't think zig should integrate with detecting native mingw libc, I think it should use its mingw-w64 that it comes with

1586665658
daurnimator


1586665675
emekoi
for example, i don't have visual studio installed, but zig won't accept my libc file unless i put dummy paths for kernel32_lib_dir and msvc_dir

1586665702
emekoi
but what about compiling c++ programs?

1586665747
andrewrk
emekoi, zig supplies libc++ as well

1586665756
pixelherodev
`I don't think zig should integrate with detecting native mingw libc` seconded

1586665762
pixelherodev
That's the most reasonable solution IMO

1586665774
andrewrk
I'd like to remove msvc integration too, if we can get away with it

1586665781
emekoi
i'm relatively certain i'm getting linker errors from trying to link to llvm with `zig cc` because different versions of libc are being used

1586665788
pixelherodev
All use of native libc should be eradicated IMO

1586665796
pixelherodev
but that might be less feasible

1586665806
pixelherodev
(e.g. macos, as discussed prior)

1586665814
daurnimator
Is mingw actually same ABI as msvc though?

1586665819
emekoi
i'm fine without getting rid of detection if we have a way to explicit opt in

1586665852
andrewrk
emekoi, ok I do agree that libc text file format and the fields that it has, should support a mingw libc setup

1586665926
andrewrk
daurnimator, I can't tell, did this get merged or what?

1586665969
andrewrk
looks like it made it in

1586666006
mikdusan
down the road I can see opt-in packages for "host libc" and "host libc++" which encapsulates all the probes/detection that comes along with that territory

1586666006
andrewrk
well, at least it looks like upstream respects zig enough to make changes, that's nice

1586666038
mikdusan
re llvm upstream: merged for say... 10.0.1 ?

1586666047
andrewrk
hopefully. unclear

1586666204
mikdusan
andrewrk: for the -lc++/stdc++ patch, are you progressing it or would you like me to PR it and... maybe we hold off on merge until after 0.6.0?

1586666280
pixelherodev
Going to have to port the graphics backend from Oryol to Sokol :(

1586666287
pixelherodev
Oryol would be a pain to integrate with build.zig

1586666291
pixelherodev
Sokol is just headers :)

1586666308
pixelherodev
I wanted to do that anyways, this just makes it more pressing

1586666315
andrewrk
mikdusan, if you're happy with the patch, I'll commit it to master. I'm confident enough in this being a more stabilizing change than destabilizing

1586666387
andrewrk
emekoi, I would be interested to know what linker errors you get if you do that thing you mentioned above

1586666414
emekoi
what thing?

1586666414
andrewrk
oh, because of mixing c++ compilers / c++ ABIs

1586666433
andrewrk
you can build llvm with zig cc

1586666456
andrewrk
it's tested

1586666468
emekoi
oh, i just get `lld: error: duplicate symbol: vtable for llvm::opt::ArgList`

1586666527
pixelherodev
I'm happy with the patch personally.

1586666533
pixelherodev
It fixed the problem for me :D

1586666678
pixelherodev
and I do agree conceptually that there's no reason to support both libc++ and libstdc++

1586666715
pixelherodev
down the line TM, being able to use entirely custom libc and libc++'s would be nice

1586666725
pixelherodev
But there's no reason to support it

1586667078
emekoi
zig parser combinators -> upgrade libc file syntax -> profit

1586667436
mikdusan
andrewrk: happy with patch with 1 minor edit:

1586667438
mikdusan


1586667460
andrewrk
thanks

1586667469
andrewrk
are you comfortable pushing that?

1586667475
mikdusan
yup

1586667903
andrewrk
go for it

1586668160
mikdusan
done

1586668570
mikdusan
pixelherodev: fyi master 20b2457388c924ec01cc6ea9d5331edbf27176ff has the patches

1586669014
daurnimator
andrewrk:

1586669789
pixelherodev
mikdusan, :)

1586674373
daurnimator
andrewrk: ^ thoughts on copying what ldc did in that link?

1586674941
andrewrk
idk this doesn't look like it will solve the problem to me

1586676469
daurnimator
sorry, I don't know enough CPP to do this with any reasonable speed

1586676504
pixelherodev
In other words, you're a good person?

1586678029
mikdusan
i invented a new word via typo. Consecurity .

1586678062
mikdusan
how I got that instead of consecutive is anyone's guess

1586678203
andrewrk
oh that's funny, I noticed that and assumed you had an amazing vernacular

1586678203
pixelherodev
Skill?

1586678247
andrewrk
I hit my quota for the day on release notes, gonna take a break now before bed

1586678264
andrewrk
mikdusan, would you perhaps be interested in doing the Memory Usage Reduction section?

1586678290
mikdusan
don't know how you do it andrew. I started to write up a bit with `zig cc` section and said wtf... don't even know where to begin. lol.

1586678303
mikdusan
yeah I think I can take a stab at the memory usage section.

1586678329
andrewrk
it doesn't have to be too involved, just give yourself some credit, show off the cool stuff you did

1586678332
daurnimator
andrewrk: after your CTA before I also had a go at writing some release notes. suffice to say, don't let me write anything but code

1586678338
andrewrk
lol

1586678368
andrewrk
the noasync section can probably be backported to be used as docs in the lang ref

1586678587
mikdusan
yes, once we release, someone (not you) maybe me, can go through the 0.6.0 release notes and backport stuff of value to lang ref

1586678757
andrewrk
who wants to schedule/host/manage the online release party? :)

1586678992
andrewrk
I could do a celebratory stream, but it would probably just be me asleep at my desk

1586679110
pixelherodev
Two things worth celebrating now

1586679118
pixelherodev
Zig 0.6

1586679121
pixelherodev
and I just fixed my server!

1586679164
pixelherodev
and it just beeped obnoxiously. :(

1586680135
daurnimator
andrewrk: I'm happy to. let me know the times you're available....

1586680145
daurnimator
timezones are hard

1586680403
pixelherodev
That's not true.

1586680405
pixelherodev
They're *evil*.

1586680468
pixelherodev
Writing a compiler is *hard*. Writing an OS is *hard*. Playing through or reading wiki entries about the plotline of Kingdom Hearts without bursting into laughter is *hard*.

1586680478
pixelherodev
Time zones? They  make all of those pale in comparison...

1586680839
foobles
good morning

1586680949
pixelherodev
Morning

1586681053
Snektron
Mogge

1586682681
ikskuh
someone here told me about a configurable assembler some day ago

1586682684
ikskuh
pixelherodev, was that you?

1586682731
pixelherodev
Might have been?

1586682733
pixelherodev
I know of a few

1586682772
pixelherodev
The one I'm using currently is scas (disclaimer: I'm the de facto maintainer since Drew no longer works on it and I'm the one only one left with experience with its internals)

1586682782
pixelherodev
There's also customasm, which looks neat but I've never really used

1586682837
pixelherodev
With scas, you define the ISA and either a) embed the table into the executable instead of the default z80 one (that's what I'm doing for LIMN) or b) bundle the table with scas / use it locally (`scas -a /path/to/isa.tab`)

1586682853
ikskuh
can you link me to scas?

1586682861
pixelherodev


1586682867
pixelherodev
With customasm, you define the machine info within the asm file

1586682872
pixelherodev
Never used it, but it looks good

1586682900
pixelherodev
I use scas because I understand its internals and I don't need anything else

1586682920
pixelherodev
If there's a bug I can fix it (though the most recent bugs I've had to deal with, I introduced prior :P)

1586683124
daurnimator


1586683277
daurnimator
wow. so os.fstatat is broken

1586683280
daurnimator
incoming fix

1586683306
mikdusan
well first is the name. I mean atatatat is just weird :)

1586683442
daurnimator
ouch, and fstatat is not only broken.... it doesn't have a windows implementation

1586683504
mikdusan
here's a name that clears things right up: `os.@"fstat@"`

1586683528
Snektron
st@@

1586683553
mikdusan
ah yes. `os.@"fst@@"`

1586683696
mikdusan
here's an easy way to remember mem is undefined: `var @"0xaaaaaaaaaa": [5]u8 = undefined;`

1586683837
pixelherodev
pft

1586683843
pixelherodev
That got a chuckle

1586683990
nmeum
I would like to provide my own panic function, the documentation for @panic says that the default is located in `std/special/panic.zig` but either I am blind or that file doesn't exist

1586684046
pixelherodev
It doesn't anymore

1586684048
pixelherodev
apparently

1586684083
pixelherodev
Ah

1586684088
pixelherodev
nmeum, it's in std/builtin.zig

1586684091
pixelherodev
std.builtin.default_panic

1586684128
nmeum
ah!

1586684177
nmeum
should I send a pull request updating the documentation?

1586684214
pixelherodev
If you want to

1586684264
nmeum
will create one to prevent other people from running into this :)

1586684289
daurnimator
nmeum: and FYI you provide it in your root file; or in your BYO-os

1586684319
nmeum
yep, that's correctly stated in the @panic documentation then

1586684710
nmeum
one more question regarding panic handlers: how can I convert an error to a []const u8 so I can output it through my panic handler?

1586684739
pixelherodev
You don't

1586684757
nmeum
what would I do instead?

1586684758
pixelherodev
If an error is cause for a panic, you'd do e.g. `catch @panic("Panic message!!!");`

1586684760
daurnimator
nmeum: huh? panic handlers have the signature `fn (msg: []const u8, error_return_trace: ?*StackTrace) noreturn`

1586684789
pixelherodev
A panic means "print this fatal message and die"

1586684798
nmeum
ah ok

1586684805
nmeum
so I would output the error separatly

1586684808
nmeum
that works as well

1586684817
pixelherodev
std.debug.warn("Error occurred!");

1586684824
pixelherodev
That will print to stderr and let you keep going

1586684831
nmeum
can't use std.debug.warn because I am using zig on a freestandig target

1586684834
pixelherodev
It is impossible to recover from a panic.

1586684835
pixelherodev
Ahh

1586684840
pixelherodev
Then it depends on the target

1586684845
pixelherodev
What forms of I/O do you have?

1586684853
daurnimator
nmeum: hook up std.debug.warn to go to something sensible for your target

1586684867
pixelherodev
^ that's the correct option, yes

1586684879
daurnimator
(I'm not 100% sure you can)

1586684883
pixelherodev
I am

1586684884
pixelherodev
I've done it

1586684885
nmeum
I have implemented support for a UART, the uart has a function which allows me to output an array of bytes

1586684893
pixelherodev
So you'll want to just output to the UART

1586684898
nmeum
yes

1586684906
nmeum
that's what I do in my custom panic handler currently

1586684908
pixelherodev
Once you know that works, I can help you hook that up to a virtual /dev/stderr if you want?

1586684921
pixelherodev
I've done it on x86 before

1586684923
daurnimator
pixelherodev: oh? I hit

1586684948
pixelherodev
Well, I kinda cheated

1586684952
pixelherodev
For stack traces I mean

1586684953
nmeum
pixelherodev: as in: implemented support for std.debug for my custom target?

1586684958
pixelherodev
Nah

1586684960
pixelherodev
Basically

1586684969
pixelherodev
The Bring-Your-Own-Os layer lets you write a function `open`

1586684974
pixelherodev
Which, given a path, returns a file descriptor

1586684990
daurnimator
pixelherodev: but then you have to fake-errno which is a huge mess (see

1586684991
pixelherodev
What I did was return hard-coded numbers for /dev/stderr, /dev/stdout, etc

1586684993
nmeum
but my target doesn't have a file descriptor concept yet ':)

1586684995
pixelherodev
daurnimator, yes I know

1586684998
pixelherodev
I did it cleanly

1586684999
pixelherodev
Sorta

1586685002
pixelherodev
Not really

1586685005
pixelherodev
I cheated again

1586685011
pixelherodev
Had it return a constant value from errno IIRC

1586685031
pixelherodev
nmeum, doesn't need one

1586685035
pixelherodev
I sure as heckdidn't have one

1586685036
daurnimator
I think nmeum should wait for #4166 and #4167 before implementing my recommendation

1586685043
pixelherodev
Probably, yes

1586685049
pixelherodev
But it's definitely doable now

1586685051
daurnimator
nmeum: in the mean time; yes call out to your own outstream in your panic handler

1586685062
nmeum
yes, that's what I am intending to do anyhow for now

1586685069
pixelherodev
The initial option I did was to not even bother checking the fd in write

1586685075
nmeum
I haven't really looked into the zig standard library at all yet

1586685075
pixelherodev
I made all writes regardless of FD go to the terminal

1586685084
nmeum
just started playing around with zig yesterday

1586685087
pixelherodev
daurnimator, the biggest cheat I had was that this was pre-BYOS layer

1586685094
pixelherodev
I forked the stdlib

1586685123
pixelherodev
Fixed a bug or two in stack trace handling (by completely nuking anything I didn't need so it couldn't possibly crash)

1586685134
nmeum
if you don't mind me asking: what exactly is the "BYO OS" layer?

1586685140
pixelherodev
Bring Your Own OS layer

1586685150
pixelherodev
It lets you implement a custom system API

1586685161
nmeum
ah

1586685165
pixelherodev
Basically, instead of using e.g. POSIX or Windows syscalls, it uses arbitrary functions you define

1586685184
nmeum
so basically that allows using the standard library on a custom OS?

1586685187
pixelherodev
Yeah

1586685197
pixelherodev
It glues together the standard library with your API

1586685206
nmeum
great, that might be useful for my purpose

1586685211
nmeum
can I read up on that somewhere?

1586685216
pixelherodev
Like I said, I had a custom `write` function (which normally maps to syscalls) which just dumped it's arg to term

1586685223
pixelherodev
Docs are sparse probably

1586685234
nmeum
hehe

1586685236
pixelherodev
AFAIK I'm one of maybe

1586685277
daurnimator
nmeum: I think without #4166 fixed its pretty unusable unless your custom OS implements POSIX

1586685308
nmeum
nope, it's targeting a hifive1 I don't think it will ever implemented posix ;)

1586685322
pixelherodev
I respectfully disagree :P

1586685331
pixelherodev
That you need 4166 fixed

1586685354
foobles
if I am generating an `IrInstrGen` from a binary operator, should I special case when the lhs and rhs are comptime known? Or will that be resolved somewhat automatically?

1586685440
pixelherodev
Ah wait

1586685441
nmeum
anyway, thanks for the information so far. I need to do some work on driver code anyhow before I can interact with this "byo os" layer at all, so I will do just that in the meantime :)

1586685452
pixelherodev
Never mind, I kinda agree

1586685457
pixelherodev
Mixed up 4166 and 67

1586685471
pixelherodev
good luck!

1586685476
nmeum
thanks

1586685545
nmeum
it's a toy project for experimenting with zig so it doesn't need to go anywhere really :)

1586685567
nmeum
but so far really like how pleasant bare metal development is with zig

1586685573
pixelherodev
Same

1586685579
pixelherodev
It's what got me into Zig in the first place

1586685592
pixelherodev
Bare metal is one spot I honestly think Zig has C beat

1586685597
pixelherodev
As in

1586685608
foobles
alright who is named "so" :@

1586685617
foobles
but yeah, zig seems already really great

1586685623
pixelherodev
?

1586685626
pixelherodev
"so"?

1586685633
foobles
if you say so it highlights

1586685643
pixelherodev
... whoops.

1586685651
pixelherodev
I think we just pinged someone like 20 times.

1586685664
pixelherodev
Oh wait, that

1586685667
daurnimator
so what ;)

1586685669
pixelherodev
I was thinking of "stat"

1586685687
ikskuh
<pixelherodev> Bare metal is one spot I honestly think Zig has C beat

1586685688
ikskuh
true dat

1586685693
pixelherodev
For regular tasks, I'd honestly say it's better to stick with C for now until Zig stabiliszes

1586685697
pixelherodev
But for bare metaLL?

1586685698
pixelherodev
s/LL/l

1586685702
pixelherodev
Zig wins hands down.

1586685704
foobles
s/LL/I?

1586685717
pixelherodev
s/TEXTTOREPLACE/TEXTTOINSERT

1586685730
pixelherodev
"edit"ing the above line

1586685738
pixelherodev
s/bare metaLL/bare metal

1586685750
daurnimator
nmeum: well please do share your project/progress; and give feedback

1586685753
pixelherodev
(that's a lowercase l, not uppercase I)

1586685758
pixelherodev
Seconded!

1586685761
pixelherodev
:)

1586685815
daurnimator
nmeum: oh, and, um, prepare for frequent breakages as zig stabilises

1586685830
nmeum
daurnimator: it's on github

1586685850
nmeum
I am used to things frequently breaking :)

1586685860
daurnimator
nmeum: you might find

1586685861
nmeum
as I said: I just want to experiment with the language a bit

1586685883
nmeum
will look into it, thanks!

1586686040
daurnimator
nmeum: misc notes as I look through your code: `const off: u5 = @intCast(u5, irq % 32);` => this could be `const off = @truncate(u5, irq)`

1586686110
daurnimator
`_: u15 = 0, // reserved` => is the 0 actually checked for? if not, use `undefined` instead

1586686121
nmeum
free code review, great! :)

1586686138
daurnimator
write your start.S in zig instead :) see

1586686147
pixelherodev
^

1586686152
pixelherodev
The ability to do the full thing in Zig is alwso nice

1586686155
pixelherodev
s/alwso/also

1586686161
pixelherodev
No need to jump in from asm

1586686166
nmeum
oohhhh

1586686176
nmeum
that's nice

1586686205
daurnimator
`set_threshold` => convention is to use camelCase for function names in zig

1586686254
nmeum
oops, occasionally mixed up the convention for variable and function names

1586686266
pixelherodev
... we should really add that to `zig fmt`

1586686273
nmeum
that would be great

1586686275
pixelherodev
I keep forgetting and it'd be nice not to have to do it manually

1586686284
daurnimator
pixelherodev: zig fmt never changes meaning of code

1586686300
ikskuh
having a guideline linter would be cool though

1586686300
daurnimator
it is essentially limited to only whitespace changes

1586686344
ikskuh
"zig lint" :D

1586686355
ikskuh
"this should be camelCase" "this should be snake_case"

1586686369
daurnimator
ikskuh: too many exceptions though, e.g. snake_case is recommended when copying well-known existing APIs

1586686537
ikskuh
yeah, true again

1586686568
daurnimator
nmeum: `const UART_REG_TXFIFO: u32 = 0x00;` I think this should be `usize` not `u32`?

1586686623
nmeum
there are a bunch of data types I probably need to change just went with u32 everywhere in the beginning ':)

1586686633
daurnimator
nmeum: you should use namespacing more too: you're already in the `uart` file, so I'd put: pub const Reg = struct { pub const TXFIFO: usize = 0x00; ..... };`

1586686709
nmeum
my original intention was to keep the address constants "private", as in: not make them part of the public api

1586686732
nmeum
not sure if I succeded at that, didn't manage to read up much on the Zig namespacing concept yet

1586686789
daurnimator
nmeum: why keep them private?

1586686865
pixelherodev
I'd counter with, why make them public?

1586686867
nmeum
idk, intuitively my intention was to provide functions for accessing memory mapped uart registers and only interact with those through the functions and only use memory mapped io (i.e. those address constants) in those functions

1586686884
pixelherodev
IMHO the only things that should be public are those that absolutely need to be (are part of the intented API)

1586686918
daurnimator
pixelherodev: IMO make everything public unless it gives people too much leeway to shoot themselves in the foot

1586686946
daurnimator
for something like specifying the memmap layout.... that can end up useful for someone debugging or working around something else

1586686986
pixelherodev
That's definitely a good point

1586687027
pixelherodev
I'd think the goal should be that correct usage feels natural and incorrect usage feels weird

1586687031
pixelherodev
All else should extend from that

1586687046
daurnimator
not really....

1586687091
daurnimator
at the forefront of your mind should be putting the user of your library/application in control. so that they don't have to hack around your thing or come begging to expose something that wasn't before

1586687107
nmeum
daurnimator: just slowly reading up on all of your recommendations. just wondering what is the advantage of a @truncate over an @intCast?

1586687124
daurnimator
nmeum: @truncate does the modulo for you

1586687137
nmeum
ah!

1586687147
pixelherodev
daurnimator, yeah thinking about it further I agree with you

1586687157
daurnimator
pixelherodev:

1586687158
pixelherodev
In my defense, I've been awake for an unholy amount of time

1586687195
pixelherodev
That's a good line :)

1586688111
Snektron
Happy easter, btw

1586688597
foobles
when composing `IrInst`objects, is it ok for several different instructions to have aliasing pointers to the same instruction?

1586688616
nmeum
daurnimator: regarding address constants: doesn't it make more sense to use `const PLIC_CTRL_ADDR = 0x0C000000` (i.e. comptime_int?) instead of const `const PLIC_CTRL_ADDR: usize = 0x0C000000`?

1586688622
foobles
like could I have an `IrInstGenBinOp` where op1 and op2 point to the same thing

1586688674
daurnimator
nmeum: if they're relative addresses then `usize` makes sense. if they're absolute then use `@intToPtr(*T, 0x12345678)`

1586688703
nmeum
alright, thanks

1586689155
foobles
how should i go about adding tests for compiler behavior?  I am extending the 2nd pass, but i only see 2 functions tested in tests/stage2/compare_output.zig

1586689169
mikdusan
tests/stage1/

1586689196
foobles
even though I am doing the 2nd compiler pass? Or does stage2 mean something else

1586689207
mikdusan
yes, stage2 != pass2

1586689211
foobles
ahhhh ok i see

1586689214
foobles
thank you

1586689233
mikdusan
stage2 means "implemented in .zig" instead of ".cpp"

1586689343
mikdusan
typically you'll end up dealing with 2 different kinds of tests; one that does not compiler-error, and one that does

1586689396
mikdusan
so if you want to test for compiler errors, that's test/compile_errors.zig, otherwise test/stage1/behavior.zig

1586689478
mikdusan
test/compile_errrors runs via `zig build test-compile-errors` and you have -Dtest-filter="match_these_chars" to speed things up during iterative dev

1586689553
mikdusan
behavior tests can be run through `zig build test-behavior` or directly `zig test test/stage1/behavior.zig` and you have --test-filter "match_these_chars"

1586689625
mikdusan
another trick is tests run interactively don't output in batch mode. the only way I know to do that, is pipe stdout+stderr (both) to cat to force non-tty mode

1586689731
mikdusan
so if 10 tests are run, and you want to make sure filter is correct: `zig build test-compile_errors -Dtest-filter="yeehaw" |& cat` to show 1-line-per-test

1586689878
ifreund
so for my `protocol_dirs_path` array here

1586689890
ifreund
i'm having trouble understanding why though, or how to fix it

1586689934
FireFox317
nmeum, i think you will like these functions:

1586689957
FireFox317
nmeum, i was also working on a risc-v kernel thing :)

1586690074
nmeum
FireFox317: looks useful indeed, thanks!

1586690466
mikdusan
ifreund: `const protocol_dir_paths = [_][]const []const u8{`

1586690527
ifreund
mikdusan: thanks, worked great

1586690838
Cadey
has anyone gotten zig compiling 3ds binaries?

1586690846
foobles
like nintendo 3ds?

1586691013
foobles
also: when should you use UndefOk vs UndefBad when resolving comptime values?

1586691159
foobles
oh, it means undefined values, not undefined behavior, is that right?

1586691205
Cadey
foobles: yeah

1586691283
foobles
so what is LazyOkNoUndef/LazyOk?  i can guess that UndefOk/UndefBad mean that it will be an error or not based on if it evalues to something undefined

1586691333
Cadey
oh i mean yeah the nintendo 3ds

1586691478
foobles
oh oh oops '=D  sorry i havent heard anything

1586691800
mikdusan
foobles: maybe ir_num_lit_fits_in_other_type sheds some light; a fn that checks if a number lit fits in another type... and fn says number literal is LazyOkNoUndef meaning lazy is ok, but it cannot be a value of `undefined`

1586691837
foobles
hmm ok

1586691839
foobles
thanks

1586691842
mikdusan
so an example would be... `[:0]u8` -- the sentinel cannot be specified as `[:undefined]u8`

1586691878
foobles
ah alright. what does Lazy mean in this context?

1586692122
daurnimator
foobles: things in zig don't exist until you use them

1586692143
daurnimator
foobles: `pub const foo = @compileError("foo!");` => you don't get a compile error under you use `foo`

1586692154
daurnimator
s/under/until/

1586692217
foobles
alright, thanks

1586692221
foobles
that makes sense

1586692230
foobles
so does LazyOk imply undefBad then?

1586692418
mikdusan
that's my understanding. if you said resolve(UndefBad) and later said... same deal but make allow lazy, resolve(LazyOkNoUndef)

1586693278
foobles
interesting: at comptime, comparing a C-pointer with null will just propagate undefined values upwards, while comparing any optional T directly with null, will cause an error immediately

1586693287
foobles
does this make sense?

1586693323
foobles
I dont understand why this is :v

1586693541
FireFox317
foobles, you really need andrewrk for this type of work i think, but he's busy with releasing 0.6.0 ^^ probably in a week or so, he will have a bit more time xd

1586693576
foobles
X) gaah ok

1586694238
FireFox317
foobles, maybe someone knows the answer, so asking the question is always better than not, but still andrewrk would be able to answer it in a minute if he wasnt busy with releasing zig 0.6.0

1586694281
pixelherodev
foobles, I think that's because C pointers

1586694291
pixelherodev
What's the behavior of `allownull` Zig pointers?

1586694311
foobles
this is for undefined, not null

1586694329
foobles
pixelherodev

1586694345
foobles
although maybe that's related?

1586694485
pixelherodev
You said `comparing a C-pointer with null` gives undefined

1586694587
mikdusan
it's comptime yes, but a C-pointer is raw, and there aren't any bits for zig to play with. so how would a compare know if it's undefed, or suppoed to be 0xaaaaaaaa

1586694708
mikdusan
interfacing with C limits zig

1586694720
foobles
pixelherodev what i said was that if the pointer itself is undefined, that is just propagated upwards. comparing it with null will do a proper check

1586694730
pixelherodev
Ahh

1586694775
foobles
mikdusan hmmm. but the ZigValue object isn't determined to be undefined or not based on the 0xaaaaaaa thing at compile time. it just has a member specifying if it is known to be undefined or not

1586694813
pixelherodev
Yeah, `var a: [*c]u8 = undefined;`; Zig knows it's undefined

1586694822
pixelherodev
That does sound odd

1586694965
mikdusan
how would comptime knowledge of a [*c]u8 = undefined ... be used with C? [*c] is bad and only used in auto-gen cimport.zig right?

1586695004
mikdusan
so maybe it's not a matter of can Zig track it at comptime, it's more... why should it? this is a [*c]

1586695653
foobles
but it is still tracked... just not immediately turned into an error when comparing with null

1586695716
mikdusan
it could simply be a missing comptime feature then

1586696167
pixelherodev
^

1586696927
daurnimator
:( Stat/Mode is much more of a mess than I expected

1586696938
daurnimator
I'm like 600 lines of diff down this rabbit hole now

1586700838
Xavi92


1586702179
nmeum
Could someone explain this compile error, regarding packed structs, to me:

1586702205
nmeum
but somehow the compiler is of the opinion that this packed struct has a size of 5 byte

1586702224
fengb
Packed structs have some bad bugs

1586702241
nmeum
ah

1586702266
fengb
You might get away with splitting up the u23 manually so the bytes donâ€™t cross over

1586702277
nmeum
should I report this as a bug or is this generally known to be an issue?

1586702282
fengb
u16 + u7

1586702289
pixelherodev
It's known

1586702296
fengb
Thereâ€™s a few issues on it

1586702296
nmeum
ok, good

1586702376
nmeum
if I split the u23 I end up with a unreachable-error in the compiler itself. I guess I will just use bitshifts then

1586703480
dimenus
anrewrk: is the plan to eventually cache c artifacts created in zig build?

1586703485
dimenus
*andrewrk

1586703525
foobles
did you mean andrewk?

1586703529
foobles
wait

1586703532
foobles
nvm, sorry

1586704194
nmeum
has anybody written a git commit hook for zig fmt yet that checks if any files are not properly formatted before comitting them?

1586704216
pixelherodev
I haven't needed it; I set my text editor to autoformat on write

1586704662
darithorn
yeah, most of the zig editor plugins are preset to format on save.

1586705788
dimenus
when did zig start building its own c++ objects?

1586706728
Xavi92
Does anyone know the reason for the issue I posted above?

1586706821
TheLemonMan
what issue?

1586706855
pixelherodev
Xavi92, did you define an entry point?

1586706874
pixelherodev
If you're targeting freestanding, you need to provide `start`, not `main`

1586706879
pixelherodev
(or provide a custom linker script)

1586706922
Xavi92
pixelherodev: sorry, I'm just insisting on the issue we discussed yesterday. See

1586706989
Xavi92
'mipsel-unknown-elf-objdump -S main.o' returns

1586706997
TheLemonMan
Xavi92, change _start into __start

1586707089
Xavi92
TheLemonMan: right, that's a huge step. Now zig returns 'lld: error: undefined symbol: __bss_end', yet if I rename __bss_end to something else (_bss_end for example), then it does not even compile

1586707226
TheLemonMan
afair lld only export __bss_start

1586707239
Xavi92
So I need to provide a custom linker script?

1586707354
TheLemonMan
that's the spirit

1586707445
Xavi92
:)

1586708069
BaroqueLarouche
Xavi92: You should look at

1586708340
Xavi92
BaroqueLarouche: wow, that is really inspiring :)

1586709119
asie
oh, cool

1586709142
asie
it's interesting; I'm evaluating Zig as the basis for candyk, a modern homebrew toolkit for odd platforms I was developing

1586709168
asie
the main issue with this usecase is that LLVM doesn't have many of those odd platforms, and writing LLVM backends isn't exactly easy

1586709219
BaroqueLarouche
Asie: Do you a git for this project?

1586709265
asie
only for the current GCC/C-based variant, and it's mostly a lot of rough code for the PS1 and some pacman packages

1586711243
opidopiopi
Hi, I'm trying to build

1586712678
foobles
opidopiopi maybe try changing it to `[]const Block`?

1586713163
opidopiopi
then I get the next error: .\src\main.zig:256:29: error: cannot assign to constant. if I use all_blocks: = [3]Block, it works fine ?

1586713731
shakesoda
i wonder what a good approach for implementing this kind of macro madness in zig would be

1586713749
shakesoda
it can certainly do it, but i don't know what kind of wacky construct i'd make for it intuitively

1586713864
shakesoda
funky mangling stuff i'd probably need @export for i guess

1586714798
ifreund
hey, anyone know if there's an implementation of weak pointer already out there somewhere

1586718787
FireFox317
andrewrk, release day today? :^)

1586718811
andrewrk
probably about 20 hours from now

1586718822
demizer
hooray!

1586718967
emekoi
shakesoda

1586719028
emekoi
you could create an instance of that struct and use a inline loop to populate the fields

1586719124
emekoi
use meta.fields and `@field`

1586719273
emekoi
on second glance 1717 looks somewhat related

1586719292
shakesoda
emekoi: ?

1586719431
shakesoda
my issue isn't gl stuff, it's the name mangling for exported symbols

1586719532
emekoi
appending `sdl_` to them?

1586719718
emekoi
`@export(field_name, .{ .name = "sdl" ++ field_name, .linkage = .Strong });`

1586719743
TheLemonMan
you can build the mangled name with some comptime logic

1586719810
shakesoda
emekoi: heh, not that - the later stuff

1586719828
shakesoda
appending the sdl isn't so funky

1586719862
shakesoda
the define_prim bits are the weird ones

1586719899
shakesoda
TheLemonMan: yeah i figure that should work

1586719943
TheLemonMan
you could get funky and directly parse the typeinfo to gather the fn params/return type

1586719970
shakesoda
that would be pretty fancy although i know nothing about the typeinfo whatsoever

1586720002
TheLemonMan
the best way to learn something is by doing

1586720083
foobles
its pretty easy

1586720087
foobles
just read builtin.zig

1586720092
foobles
it has all of the structs and stuff

1586720314
Snektron
i can learn stuff by doing fingerguns?

1586720455
TheLemonMan
that's how I learned all I currently know

1586724055
Sphax
Hi. I'm wondering if the HashMap defined here is supposed to work for the Key type I defined.

1586724105
Sphax
right now getAutoEqlFn returns a function that compares the pointer so it's never equal

1586724825
mikdusan
Sphax: roll your own equal fn for map: `fn eqlKey(a: Key, b: Key) bool { return std.mem.eql(u8, a.name, b.name); }`

1586724940
Snektron
theres also std.BufHashMap i think

1586724957
Snektron
no wait, std.StringHashMap

1586725127
Sphax
yeah that's what I did, was just wondering if it's intended.

1586725219
Snektron
it is

1586725275
mikdusan
if Key is really your db record, then you need to roll your own. if key is simpls a string []const u8, then convenience StringHashMap can be used

1586725293
mikdusan
s/simpls/simply/

1586725519
Sphax
Ok. I was thinking that since getAutoHashStartFn with .Deep does the right thing in this case maybe there could be an equivalent for getAutoEqlFn but maybe it doesn't make sense

1586725591
mikdusan
autohash .deep can kind of generically visit the struct fields. but for equal, how does it know which fields, which compare function, which logic

1586725836
Sphax
hm. right

1586726304
foobles
in the 2nd pass of the compiler, I need to generate a bin op instruction, but also analyze it. Because I need the analysis to be done, i dont think I can just do `ir_build_bin_op_gen`, since that will never fail and does no type checking. However, if I try to just use `ir_build_bin_op`, the op1 and op2 paramaters have to be IrInstSrc objects, not

1586726304
foobles
IrInstGen objects

1586726317
foobles
but I only have IrInstGens

1586726322
foobles
is there a way to go back?

1586726395
foobles
also, what does "safety_check_on" do?

1586726658
TheLemonMan
no, you can't go back

1586726710
TheLemonMan
safety_check_on is a flag that allows you to insert as many safety checks you want during the codegen

1586726742
foobles
hmm ok

1586726752
foobles
so do you have any suggestion for what to do here?

1586726781
foobles
what i am trying to do more generally, is to generate comparison between optionals where their child types are comparable

1586726811
foobles
so I want to check: are both null? return ir_const_bool(...)

1586726906
foobles
do they both have a value? if so, generate a comparison of their child values, and recurse with `ir_analyze_bin_op_cmp` on that

1586726922
foobles
else ir_const_bool(<not equal>)

1586726941
TheLemonMan
well the only suggestion I have for you is to do all this work in ir_analyze_bin_op_cmp

1586726942
foobles
also, this is all at comptime, i have much less of an idea how to do this check at runtime

1586726952
foobles
that is where i am working

1586726970
foobles
im looking at the other possible code paths

1586726994
foobles
but none of them generate anything more than const bools or things like that. no recursive comparison analysis or anything like that

1586727137
TheLemonMan
yeah you're fist-deep into spaghetti, forget about recursively lowering the comparisons

1586727233
TheLemonMan
if you get the LHS/RHS as InstGen you can easily unwrap them

1586727256
TheLemonMan
and eventually call ir_analyze_bin_op_cmp_numeric

1586727288
TheLemonMan
but if the inner types are not numeric there's nothing more you can do :)

1586727539
foobles
I do have them as InstGen

1586727771
foobles
so there is no way to analyze an InstGen?

1586728051
TheLemonMan
they are already analyzed

1586728599
foobles
:'(  but there is no way it seems, to generate InstSrc instructions from InstGens D:

1586728622
foobles
oh wowah this is going to take more work than i expected

1586728734
mikdusan
andrewrk: just fyi, Async I/O section, {#code_begin|syntax#} errors on macos; I'll switch to linux to workaround, just giving you heads up

1586728757
foobles
oh wait I DO HAVE `InstSrc` I just forgot!

1586728759
foobles
yes!!!

1586728763
foobles
:D

1586729046
foobles
oh no turns out I dont xd

1586730320
andrewrk
mikdusan, ah thanks

1586730353
andrewrk
yeah I think it's ok to show off the stuff that only works on linux, there's the caveat of needing to add the "glue" code there for other OS's

1586730361
andrewrk
but it's annoying for you when trying to help with release notes, sorry bout that

1586730380
andrewrk
did you read the async i/o section? I think it came out pretty nice

1586730387
mikdusan
hmm.. write_file_evented and concurrent hang waiting on archlinux for me.

1586730394
andrewrk
hmmmm

1586730401
mikdusan
i even pullled out the write_file_Evented it's standalone file same deal

1586730422
mikdusan
latest zig, latest archlinux

1586730428
andrewrk
well that's good to know because it seems you found a bug in the event loop implementation

1586730433
mikdusan
:(

1586730461
andrewrk
this is fine, it doesn't endanger the release. it's already noted that this part is still experimental

1586730466
andrewrk
but yeah it's annoying for writing release notes

1586730497
andrewrk
feel free to comment out the code block with a "TODO" and we'll enable it just before posting

1586730992
Sphax
I don't understand this error

1586731110
foobles
wait, unrelated, are you the Sphax from minecraft?

1586731370
Sphax
ah, nope

1586732131
mikdusan
Sphax: can you open a PR for that one?

1586732145
mikdusan
err... s/PR/issue/

1586732174
Sphax
sure

1586732702
Xavi92
Does anyone know Zig string handling examples?

1586732714
Xavi92
No heap allocation preferred

1586732764
pixelherodev
What sort of string handling?

1586732796
Xavi92
Very basic stuff e.g.: something itoa-like

1586732858
pixelherodev
That's integer-to-string, right?

1586732867
Xavi92
Yup

1586732874
pixelherodev
`std.fmt.bufferPrint(&buffer, "{}", .{number});`

1586732879
pixelherodev
or bufPrint

1586732881
pixelherodev
One of the two

1586732892
pixelherodev
bufPrint

1586732908
pixelherodev
That returns BufPrintError![]u8

1586732926
pixelherodev
Which is the same as error.NoSpaceLeft ! []u8

1586732936
pixelherodev
Where that error means the buffer is too small for the data you're giving it

1586732971
pixelherodev
So e.g. `var a: [4]u8 = undefined; const formatted = std.fmt.bufPrint(&a, "{}", 3948493) catch @panic("Need to increase the size of buffer a!");`

1586732993
pixelherodev
Then, if buffer big enough (not in that example), `formatted` will contain the number you pass it as a string

1586732999
pixelherodev
s/if/if the

1586733003
pixelherodev
s/big/is big

1586733014
pixelherodev
Gah, sorry; barely awake

1586733032
pixelherodev
Piece of advice: the standard library is simple, and you have it installed locally ;)

1586733265
Xavi92
pixelherodev: thanks a lot for your help

1586733309
pixelherodev
No problem

1586733420
Xavi92
Is it trivial to perform conversions between []u8 and [*:0]u8?

1586733480
pixelherodev
.ptr

1586733481
pixelherodev
Well

1586733488
pixelherodev
If it's null-terminated, it should be a `[:0]u8`

1586733496
pixelherodev
`that.ptr` gives a [*:0]u8

1586733501
Snektron
You need to guarantee the :0 part

1586733514
pixelherodev
^

1586733516
Xavi92
Does std.fmt.bufPrint guarantee it?

1586733555
pixelherodev
I think so?

1586733563
fengb
Nope

1586733571
pixelherodev
Ah wait, there's a bufPrintZ or something?

1586733580
fengb
Oh maybe

1586733600
pixelherodev
Doesn't seem to guarantee it

1586733607
pixelherodev
Just do a \00 at the end of the format string?

1586733707
pixelherodev
@ptrCast([*:0]u8, std.fmt.bufPrint(&a, "{}\0", .{num}));

1586733708
pixelherodev
?

1586733890
Xavi92
error: invalid character: '0'

1586733902
Xavi92
Seems like Zig does not define \0 as opposed to C-like languages

1586733978
fengb
\x00

1586733995
Xavi92
fengb: thanks!

1586734007
Xavi92
const formatted = std.fmt.bufPrint(&buffer, "{}\n\x00", .{a}) catch return;

1586734007
Xavi92
_ = puts(@ptrCast([*:0]const u8, formatted.ptr));

1586734178
frett27_
Does anyone has a smooth path to compile a program on rpi ? i setup a program to monitor iot devices (mqtt),

1586734189
frett27_
on x64 and i want tocompile it on rpi

1586734208
frett27_
cross compile seems painfull , there are a couple of dependencies

1586734219
frett27_
compiling llvm10 , on rpi .....

1586734246
frett27_
any ideas ?

1586734266
afontain_
can't you use -target?

1586734297
frett27_
i tried, but i had to get all the rpi dependencies for link

1586734333
frett27_
quite painfull,, because i linked the mqtt client library also

1586734338
frett27_
statically

1586734351
frett27_
so i have to compile it also

1586734410
fengb
There will be a binary for v0.6.0 that runs on the rpi

1586734415
fengb
Comes out tomorrow

1586734420
frett27_
YOOOO !!!

1586734431
frett27_
awesome :-)

1586734442
foobles
does anyone know the best way, given a ZigValue*:

1586734444
frett27_
how do you compile zig on pi ?

1586734477
afontain_
`while sleep 10; do apk upgrade -U; done`

1586734485
frett27_
fengb, for zig binary, you recompile also llvm10 ?

1586734485
foobles
given a ZigValue*: to create an IrInstGen containing that value, and then create an IrInstSrc with it's child pointer refering to the InstGen?

1586734618
frett27_
afonain, :-)

1586734728
fengb
Well I didnâ€™t compile it no. The binary was created with the bootstrap script that does cross compile

1586734729
Xavi92
pixelherodev, fengb: works like a charm. Thanks again!

1586734755
fengb


1586734839
fengb
Xavi92: np

1586734844
pixelherodev
^

1586734897
frett27_
fengb, ok, i'll look at it, thank's for your attention and help

1586734953
fengb
I donâ€™t think the Pi has enough ram to compile LLVM

1586735194
shakesoda
tons of swap

1586735198
shakesoda
and a loooooooooooot of time

1586735284
fengb
Probably easier to crosscompile with that script :P

1586735288
Xavi92


1586735331
frett27_
fengb, very usefull, yes, it avoid a long run to get all dependencies

1586735381
frett27_
i'll git it a try on my laptop, to cross compile to rpi

1586735393
marijnfs


1586735400
marijnfs
seems there is some raspberry pi docker

1586735456
frett27_
it use qemu

1586735466
marijnfs
thats probably better

1586735649
frett27_
thank's for the links, i'll give it a try and document this, for ease recompilation

