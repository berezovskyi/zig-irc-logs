1582675339
pixelherodev


1582675449
pixelherodev
Best part is that this time, support won't be just whatever random features were needed short term

1582675493
fengb
I feel like I should learn this so I could generate LLVM directly

1582675664
pixelherodev
It's not

1582675666
pixelherodev
s/though//

1582675713
AndroidKitKat
pixelherodev: do you use cool retro term unironically?

1582675717
AndroidKitKat
not trying to flame jw

1582675774
pixelherodev
Yeah, but only with minimal settings

1582675778
pixelherodev
And like 2FPS

1582675786
pixelherodev
Mostly just for the glow honestly

1582675831
pixelherodev
Literally, all I really have active are 43% bloom, tiny screen curvature, and either 1/3 or full transparency depending on what the term is for

1582675870
pixelherodev
Each window averages maybe 2% CPU, which is so low as to not affect battery life at idle, and to not seriously slow down e.g. compilation

1582675987
AndroidKitKat
w/e floats ur boat tbh

1582676016
jaredmm
I won't disagree with that. Digging through the dark magic of these headers trying to figure out why a variable name stops populating. 4 cases when you import Windows.h.

1582676137
pixelherodev
To be fair, 2% CPU is actually

1582676139
pixelherodev
... mundane?

1582676151
jaredmm
I'm pretty sure the issue is that the name of the value is a #define that evaluates to nothing, which I'm sure there's a reason for.

1582676394
jaredmm
So I guess by that logic, translate-c is correct that it doesn't have a name, but if it doesn't have a name would the idiomatic Zig code be to use the name of the define as the member name? Is there a better way to represent that Windows-or-C-ism in Zig?

1582676462
pixelherodev
If it's defined to nothing, it's usually for `#ifdef`s

1582676502
jaredmm
/ For compilers that don't support nameless unions/structs

1582676514
jaredmm
#if defined(NONAMELESSUNION) || !defined(_MSC_EXTENSIONS)

1582676576
jaredmm
I defined that when importing and it got rid of the problem, but I'm trying to understand if that's the right solution or just a solution.

1582677219
jaredmm


1582677270
jaredmm
Basically that. I guess that anonymous unions aren't a thing in C99 and that's why the define exists.

1582680399
pixelherodev
C11 or GNU extension to C99, yeah

1582680491
pixelherodev
Though I've seen a claim (I haven't verified this) that the original 1974 compiler supported them

1582680565
pixelherodev
(where Original means Dennis Ritchie's)

1582681820
frmdstryr
Was @typeId removed?

1582681847
fengb
Yes, @typeInfo does everything you need

1582682757
frmdstryr
fengb: Thanks

1582682776
frmdstryr
andrewrk: Using llvm10 works for the @intToFloat thing

1582682946
andrewrk
frmdstryr, interesting. that probably means the difference earlier was 9.0.0 -> 9.0.1

1582684783
frmdstryr
the size is almost 4x bigger though?

1582684813
frmdstryr
the llvm 9 debug build was 109kb, the llvm 10 build is 387kb

1582684894
andrewrk
debug builds are allowed to be big. is that new size a problem? how about the size of your release build?

1582685001
pixelherodev
That concerns me more if it scales

1582685020
andrewrk
by what scale factor?

1582685028
pixelherodev
Would e.g. a build that's 10MB in 9 be 40MB in 10? Or would it be 10.3MB?

1582685060
pixelherodev
Does it shift a build size graph up linearly or proportionally to existing size?

1582685065
frmdstryr
The release build is 334k

1582685090
frmdstryr
before the release build was around 35k if I remember correctly

1582685109
pixelherodev
*That*'s a much bigger deal than debug builds...

1582685116
pixelherodev
release-fast or release-small I assume?

1582685123
frmdstryr
release-safe

1582685131
pixelherodev
Ah

1582685145
pixelherodev
As long as release-fast and release-small aren't overly affected I'm not terribly concerned

1582685164
pixelherodev
... suddenly the fact I'm going to need to extend the parser to support LLVM 10 feels more real :(

1582685181
andrewrk
pixelherodev, maybe you should develop against the llvm10 branch

1582685191
pixelherodev
Eh, it's fine for now

1582685202
pixelherodev
As I mentioned earlier, I'm maybe an hour or two of work away from working codegen

1582685231
pixelherodev
As my free time is limited, I'd rather get this working on nine and then add moving to ten to the TODO list for after more important work

1582685241
fengb
If it’s anything like my estimates, that’s another 2 weeks >_>

1582685277
pixelherodev
I bet you ten internet points that I get it done

1582685538
daurnimator
pixelherodev:

1582685648
pixelherodev
?

1582685664
pixelherodev
... ohhh, it's additional debug info?

1582685799
andrewrk
quite possibly. which reminds me, I should look into bumping the DWARF version emitted

1582685831
fengb
Would compiling with —strip help?

1582686115
daurnimator
pixelherodev: no I'm saying if size of debug info is a concern then perhaps we should prioritise supporting compressed debug info

1582686215
pixelherodev
Ah

1582687440
pixelherodev
It's amazing how much more reliable software is when written based on a spec and not a random specific example :D

1582687873
BaroqueLarouche
andrewrk: Is there a way to call a function from reflection ? This is what I'm trying to do:

1582687925
fengb
@field(Type, name) can get you the actual function

1582687938
BaroqueLarouche
ohhh

1582691427
pixelherodev
Part of the fun of writing this parser is finding bugs in the upstream LLVM parser

1582691718
pixelherodev
While I don't doubt mine is incorrect in far far more places than upstream, I can now name at least one spot in which it's

1582691928
pixelherodev
Or maybe I should do more testing before getting excited: it's the regex in the spec that's wrong, not the parser :P

1582692444
pixelherodev
s/wrong/misleading

1582692473
pixelherodev
InitializerConstant is optional lexically, but not semantically in the context where I thought it was

1582695206
andrewrk
i'm still amazed when I modify thousands of lines of zig code, fix the compile errors, and then everything actually works

1582696436
daurnimator
andrewrk: whenever I try that I get compiler segfaults ;)

1582707180
Snektron
<BaroqueLarouche "andrewrk: Is there a way to call"> If you use the length of std.meta.declarations(AllImageFormat) you have an upper bound for the result array size

1582707242
Snektron
Besides, i think the break statement adds a bug, since youre exiting a scope with a pointer to a local variable

1582719048
BaroqueLarouche
Snektron:  the break statement works because it is inside a comptime block, also thanks for the suggestion :)

1582719140
Snektron
Im not quite familiar with lifetime of comptime variables, but i'd guess that they should be similar to runtime lifetimes

1582719483
alexnask
Afaik comptime values don't have a lifetime, they are always valid, so you can leak pointers (at least with current stage1 compiler)

1582719881
alexnask
Iirc the plan for stage2 (self hosting compiler) is to implement a garbage collector for comptime values

1582724596
fengb
They have permanent lifetime ;)

1582725253
alexnask__
Sure, good point

1582729727
fengb
Really weird idea: can I lookup a runtime pointer value at comptime? It's in a globally static array

1582729739
fengb
I suppose I can lookup the offset

1582730007
fengb
... this is so much better than sorting at comptime

1582730312
fengb
Sometimes it's just better to do the simple thing :/

1582731725
andrewrk
alexnask, fengb: they have the same lifetime as any value in a garbage collected language

1582731752
andrewrk
e.g. if you use a comptime value only inside a comptime function call to produce a different value, the intermediate values can be freed

1582731762
andrewrk
stage1 does not do this

1582736379
betawaffle
is there some way to determine if the

1582736408
andrewrk
why do you need to know?

1582736434
betawaffle
maybe to switch between returning an array pointer or slice?

1582736463
betawaffle
not that important, i suppose

1582736467
andrewrk
wouldn't it be better to always return a slice, since that works for both cases?

1582736514
betawaffle
i'm writing a minecraft server, and i'm trying to design a really nice interface for parsing the protocol

1582736519
andrewrk
I see

1582736531
betawaffle
so i'm trying different ideas

1582736845
pixelherodev
Comptime is nice, but until performance is improved (or some optimizations are implemented) I'm being very hesitant with how much work I shift to comptime

1582736875
pixelherodev
If there was e.g. a builtin for string comparison, that would majorly improve the biggest issue I had

1582736899
pixelherodev
A comptime function that does a lot of `std.mem.eql(u8,`s will massively inflate compile times :(

1582737010
pixelherodev
The problem with a builtin though is that it increases language complexity, whereas detecting std.mem.eql(u8 calls and replacing them leave the language simpler and complicate the compiler

1582737356
TheLemonMan
andrewrk, picking a thumb1 only architecture as default for the ARM target isn't a wise move IMO

1582737388
TheLemonMan
I mean, you picked a -m variant without ARM instructions

1582737886
fengb
pixelherodev: yeah I noticed; was sorting on strings at comptime and it was really slow :(

1582737929
pixelherodev
I'd try to optimize it but I honestly don't want to touch the C++ any more than I already have

1582738462
andrewrk
TheLemonMan, you're referring to

1582738505
andrewrk
it should probably be an 'a' variant right?

1582738523
andrewrk
how about v7a?

1582738616
TheLemonMan
yeah that's much better

1582738627
andrewrk
ok pushing to master

1582738674
TheLemonMan
the m variants are badly supported by the stdlib, we should add some checks for noarm feature here and there

1582738740
andrewrk
TheLemonMan, btw why do we have arm and thumb architectures? could we possibly remove the thumb arch and rely on detecting whether "thumb_mode" cpu feature is enabled?

1582738758
andrewrk
that has always confused me

1582738957
TheLemonMan
the feature means thumb is supported iirc, it doesn't change the instruction set being used

1582739168
xackus
andrewrk, sourcehut CI seems to have hanged on

1582739315
andrewrk
xackus, can you try to see if an admin in #sr.ht can fix it for you?

1582739346
xackus
i'll try

1582739356
andrewrk
also I'm not worried about that, it's good enough to pass the other ones for this case

1582740274
FireFox317
you can also "force" a recheck on the CI, by closing and opening the PR

1582740360
mikdusan
good to know

1582740716
alexnask
Is there any way to create a new tuple with an element removed from some existing tuple?

1582740733
alexnask
E.g. to keep the first element in a function call then forward the rest to @call

1582740840
BaroqueLarouche
alexnask:  I would like to know that as well

1582741103
andrewrk
TheLemonMan, fyi here's the changes it took to fix behavior tests with --test-evented-io:

1582741213
andrewrk
note that dwarf.zig and elf.zig are not forced to have these annotations; those files remain agnostic. it's debug.zig which is trying to create a "seam" for the purpose of stack trace printing

1582741421
TheLemonMan
hmm, I remember trying to run the tests with that flag

1582741573
andrewrk
the interesting changes in the above commit are in std.fs

1582741640
andrewrk
btw what should be the convention? (1) `openAtC` (2) `openAtZ` (3) `openAt0`

1582741662
andrewrk
sorry, typo fixed: (1) `openatC` (2) `openatZ` (3) `openat0`

1582741673
fengb
mikdusan mentioned Nullz 🙃

1582741693
andrewrk
(4) `openat🙃`

1582741709
mikdusan
`openat␀`

1582741767
frmdstryr
andrewrk & TheLemonMan thanks for all the help yesterday, finally got it all working

1582741783
andrewrk
frmdstryr, so it was a bug fix in llvm then?

1582741794
BaroqueLarouche
my vote for 1, since null-terminated sentinel as used when interracting with C

1582741798
BaroqueLarouche
*are

1582741808
TheLemonMan
frmdstryr, awesome!

1582741811
frmdstryr
Yes, Seems like it, with 9.0.0 at least

1582741827
andrewrk
BaroqueLarouche, I veto the C one because it's not only for C related things. when you compile for windows with no libc or linux with no libc, the OS still has a bunch of ABIs that use null terminated strings

1582741881
andrewrk
one day C will be dead and zig lives on, there should be no functions with "C" in their name, referring to C programming language

1582741896
BaroqueLarouche
andrewrk:  I see! 2 then

1582741957
BaroqueLarouche
"one day C will be dead and zig lives on, there should be no functions with "C" in their name, referring to C programming language" this is the way

1582741970
mikdusan
mando!

1582741984
BaroqueLarouche
haha yes!

1582742093
andrewrk
TheLemonMan, damn, even with that new debug info improvements, stage1 stack traces not working for me in debug builds:

1582742103
andrewrk
this regressed for me about a month ago

1582742125
andrewrk
(this is my wip branch rebased on master)

1582742144
TheLemonMan
uh that's weird

1582742151
TheLemonMan
can you fax me the zig binary?

1582742157
andrewrk
sure, what's your phone number

1582742222
shakesoda
for null terminators I like the Z suffix

1582742299
TheLemonMan
1-800-SWEET-BBY

1582742446
andrewrk


1582742509
andrewrk
I doubt you can run it; the dynamic library paths are all in /nix/store. but the elf/dwarf info could be interesting

1582742675
TheLemonMan
eh, I hoped to be able to run it but my glibc is too old

1582742692
TheLemonMan
can you backtrace where the EndOfStream is coming from?

1582742734
andrewrk
sure

1582742759
andrewrk
damn if this was zig I could have just passed -target-glibc and called it aday

1582743327
andrewrk
TheLemonMan, it's hitting EndOfStream in scanAllFunctions

1582743406
TheLemonMan
uh that's weird, can you trace down the exact line where that's returned?

1582743448
andrewrk
yeah working on it

1582743495
andrewrk
dwarf.zig:515   try s.seekable_stream.seekTo(after_die_offset)

1582743562
andrewrk
btw I don't think we have to scan all functions - I think there's a way to do it more lazily

1582743577
andrewrk
that's a separate issue though

1582743716
TheLemonMan
that's very weird, after_die_offset comes from getPos

1582743760
andrewrk
I think this should be reproducible by opening the elf file I sent from a separate zig program, right?

1582743789
TheLemonMan
let me check really quick

1582747631
TheLemonMan
andrewrk, hmm, should seekByFn for SliceSeekableInStream allow a seek to the latest byte in the slice + 1 ?

1582747669
TheLemonMan
this code regressed when I changed the file stream to a slice-backed one

1582747717
andrewrk
TheLemonMan, yes I think so

1582747781
andrewrk
also these interfaces are so awkward :-/

1582747797
andrewrk
well, the lang isn't done yet

1582747927
TheLemonMan
there are no tests for SliceSeekableInStream or am I blind?

1582748120
andrewrk
I think there are no tests

1582748210
TheLemonMan
oh those fucking dependency loops again

1582748989
fengb
I think the solution is "don't do stupid shit" :P

1582749056
fengb
I feel like I started this whole thing by adding my dumbass loop -_-

1582749172
TheLemonMan
nah, the old code worked because it was way too permissive

1582749206
andrewrk
I wonder how to describe the lazy value system into the language spec

1582749241
andrewrk
it's essential for several language features to work

1582749347
TheLemonMan
just describe what they enable, how (lazy values) is an implementation details

1582749468
andrewrk
yeah, that makes sense

1582749594
pixelherodev
Can you specify an enum value as equal to another value?

1582749598
pixelherodev
i.e. `pub const a = enum { A, B, Default = A }`?

1582749629
Snektron
I think you might be able to do that with non-exhaustive enums

1582749666
andrewrk
pixelherodev, you could define a const and initialize both elems to it

1582749698
pixelherodev
No way to do that with an untagged enum?

1582749713
andrewrk
I recommend to not have duplicate enum tags. it would be better for "Default" to be pub const Default = a.A; inside the enum

1582749751
andrewrk
allowing same-value tags is a compromise to support external ABIs

1582749753
TheLemonMan
andrewrk, can you try #4563 ?

1582749757
andrewrk
it's bad practice for internal code

1582749777
andrewrk
TheLemonMan, yes just a moment

1582749783
pixelherodev
`pub const Default` ... ohhh

1582749789
pixelherodev
Didn't realize you could do that in an enum

1582749795
mikdusan
and that way it forces you to use one enum during switch

1582749831
andrewrk
you can even still use it in a switch too

1582749846
andrewrk
switch (foo) { Enum.Default => blah, else => baz }

1582749889
mikdusan
if using .(enum literal) syntax that is

1582749890
pixelherodev
that's brilliant :)

1582749931
Snektron
too bad you cant make use of enum literal syntax with that

1582749945
andrewrk
I don't think it's too bad, I think it makes perfect sense

1582749960
alexnask
Is 'error: function with inferred error set must return at least one possible error' expeced behavior when try-ing a function with an explicit empty error set return value in the body?

1582749968
alexnask
I know this sounds stupid

1582750020
andrewrk
alexnask, that error is planned to be removed. you will be able to not return any errors from an inferred error set function. the inferred error set will be error{}

1582750024
alexnask
But there is no way to check the return error set of functions that take var arguments before calling them, so I'm trying to use empty error sets as a workaround

1582750038
andrewrk
as a workaround you can explicitly put error{}

1582750040
pixelherodev
Seconded

1582750054
pixelherodev
That not being able to use enum literal makes sense

1582750070
andrewrk
TheLemonMan, brilliant:

1582750076
pixelherodev
In my case for instance, if A is default, I should be comparing against A, not default

1582750138
alexnask
andrewrk, my current usecase is finding the error set of a method of a given type and attaching it to the return type of a function, so I can't just pass error {} atm.

1582750161
pixelherodev
Whoa, neat! stage2 panic looks awesome :D

1582750169
alexnask
The root issue is the type erasure of any function that uses a comptime/var argument imho though

1582750362
andrewrk
alexnask, you are welcome to implement

1582750367
andrewrk
pixelherodev, that's stage1!

1582750450
andrewrk
we don't ship binaries with debug info on the download page, but one of the benefits of stage1 being a hybrid of c++ and zig is that we get stack traces even in c++

1582750509
andrewrk
it could be an interesting open source project to make "libdebuginfo" or something like this, which is intended to be used by C/C++ and provide stack traces

1582750520
andrewrk
all it would do is export some C ABI functions that are backed by zig std lib

1582750727
fengb
So backporting Zig into C?

1582750750
fengb
The more I think about the bootstrap process, the more circular it sounds >_>

1582750776
andrewrk
the crazy thing is that zig's bootstrap process is significantly less circular than most other langs

1582750822
alexnask
I used to maintain a compiler that just shipped generated C sources and there was no non-self hosted implementation at all

1582750843
andrewrk
yeah. that creates work for maintainers though, every time you introduce a bootstrapping stepping stone

1582750847
alexnask
(Well obviously there was one at the very beginning)

1582750870
mikdusan


1582750882
alexnask
It also made it tricky to change syntax

1582750920
andrewrk
mikdusan, yeah like this

1582750991
andrewrk
I think we could make a more useful, powerful API too

1582751001
mikdusan
the source would be cleaner too

1582751059
alexnask
I'm pretty close to an interface implementation that works at compile time :) (at least for non-owning interface types)

1582751398
mq32
alexnask, what do you mean by non-owning interface type?

1582751409
mq32
like "referene to a thing of that implements this interface?"

1582751423
alexnask
Pretty much

1582751429
mq32
neat

1582751433
mq32
how do you approach it?

1582751454
alexnask
The current scheme provides Owning, NonOwning, Inline(N) and InlineOrOwning(N) storage types

1582751488
alexnask
Basically you define an interface type given a vtable type (struct with fn fields) and a storage type

1582751533
alexnask
And you can initialize it given an object of any type that implements those functions (and an allocator if the storage type needs it)

1582751558
mq32
hmm

1582751563
mq32
sounds similar to an idea i had

1582751571
mq32
but i failed at crafting and calling the right function pointers

1582751576
fengb
Can you show an example?

1582751581
alexnask
This is an old implementation I wrote back in the day:

1582751594
alexnask
(it didnt work at comptime)

1582751691
alexnask
mq32, generating the vtable can be a bit tricky but it is possible ;)

1582751691
BaroqueLarouche
Similar to the ideas in this talk

1582751727
alexnask
Yeah I was inspired by that talk

1582756015
FireFox317
TheLemonMan, i pushed #4566 (empty inferred error sets) 6 minutes later than you, whoops XD

1582756052
andrewrk
wow

1582756066
TheLemonMan
heh, I couldn't wait to get that damn error out of my way

1582756066
andrewrk
both so quick

1582756080
FireFox317
i guess andrewrk can choose which one to merge hahah

1582756105
FireFox317
btw, i wouldn't mind if you chose TheLemonMan andrewrk XD

1582756109
TheLemonMan
every damn time I was refactoring shit I had to come back and add `anyerror` to stop the compiler from complaining

1582756163
alexnask
Nice, I will be able to remove my workarounds soon it seems :P

1582756243
andrewrk
I like the one with the more complicated test case

1582756309
FireFox317
which is obviously TheLemonMan's PR :)

1582756408
FireFox317
and actually my PR won't pass the tests since i didnt remove the compile error.

1582756883
TheLemonMan
yay, 4562 is not my fault

1582757079
daurnimator
andrewrk: "we don't ship binaries with debug info on the download page" => this is where the debuginfod issue comes in :)

1582757106
TheLemonMan
not really

1582757153
TheLemonMan
the idea is to ship separate debug infos using the build-id/gnu-debuglink/dSYM mechanisms

1582757169
TheLemonMan
debuginfod is meant for debuggers

1582757185
daurnimator
TheLemonMan: that would be

1582757206
daurnimator
I did have

1582757218
daurnimator
uh,

1582757236
daurnimator
and see also,

1582757664
TheLemonMan
yeah I remember, that's on my radar too

1582758022
daurnimator
IMO debug.zig needs almost a rewrite: the scanAll stuff should be more object-oriented.....

1582758247
alexnask
Can I concatenate tuples somehow?

1582758275
alexnask
(I need to add a 'self' argument to a parameter pack)

1582758448
pixelherodev
Nested tuple maybe?

1582758458
pixelherodev
i.e. `{self, other_tuple}`

1582758462
alexnask
Ah, doing ".{self_ptr} ++ args" wasn't working, splitting .{self_ptr} to a const first works

1582758498
BaroqueLarouche
doing `const temp = .{self_ptr}` ?

1582758508
alexnask
Yes

1582758520
BaroqueLarouche
need to try that

1582758537
BaroqueLarouche
to improve this:

1582758587
BaroqueLarouche
wanted to do `comCall(obj, "Func", .{args...}` but needed a way to concatenate tuples

1582758609
alexnask


1582758613
alexnask
We are doing similar things ;)

1582758635
BaroqueLarouche
yes 😁

1582758740
alexnask
I can call into undefined function pointers both at runtime and comptime now :D

1582758749
alexnask
Just the vtable generation left

1582759590
daurnimator
alexnask: hmm? I couldn't get tuple concat working

1582759610
alexnask
The code I linked in the screenshot works

1582759664
daurnimator


1582759691
BaroqueLarouche
`.{self} ++ args` should be fixed

1582759708
alexnask
Yes, using it directly didn't work, the compiler doesn't seem to be able to make a constant temporary

1582759720
alexnask
Explicitly making a temporary worked

