1591144917
leeward
pixelherodev: Huzzah!

1591149975
pixelherodev
leeward: :)

1591160020
marler8997
easy way to turn a comptime_int into a string at comptime?

1591160621
fengb
I usually create a "comptime var buf: [100]u8" and run bufPrint

1591160633
fengb
Change 100 to a smaller number :P

1591160642
marler8997
yeah that's what I ended up doing

1591161007
marler8997
ah new allocator found bug in std.fs.path.zig

1591161685
ttmrichter
The introduction says, "Note that you can leave off the ! from the return type because warn cannot fail."  It really should say "must leave off" because I just got a run-time error with the ! in place in the second Hello program.

1591162020
daurnimator
ttmrichter: which intro? and care to send a PR? :)

1591162052
daurnimator
ah

1591162090
daurnimator
ttmrichter:

1591162147
ttmrichter
Can't send a PR.  No Github account.

1591162157
ttmrichter
Digging deeper and it gets weirder.

1591162169
ttmrichter
This fails from PowerShell but works fine from CMD.exe.

1591162189
ttmrichter
There's something in the exit code that makes PowerShell freak out, but that CMD ignores.

1591162208
daurnimator
ttmrichter: for the hello world example?

1591162216
ttmrichter
The second one.

1591162232
ttmrichter
If you leave the ! before void, Powershell freaks out.

1591162265
ttmrichter


1591162269
daurnimator
oh right. sorry the docs

1591162288
ttmrichter
If you run the same program (not even recompiling) from CMD, though, no errors.

1591162403
daurnimator
ttmrichter: perhaps something wrong/weird with the exit code? what does cmd.exe say the exit code was?

1591162436
daurnimator
`echo %errorlevel%` I think?

1591163052
ttmrichter
It's a 0.

1591163082
ttmrichter
I checked that it's the right variable by doing dir \doesntexist and testing.

1591163191
daurnimator
ttmrichter: huh. according to

1591163249
daurnimator
(std.debug.warn prints to stderr)

1591163407
ttmrichter
Ugh.  What a terrible design choice.

1591163764
fengb
I mean... Microsoft 🙃

1591164909
scientes
<3 llvm

1591164926
scientes
i was doing a [4]u64. switched it to a u256 and it just worked

1591164927
scientes
nice

1591164959
scientes
compilers do so much for us

1591165602
pixelherodev
Eh

1591165606
pixelherodev
I hate LLVM

1591165719
scientes
I don't like C++

1591165776
pixelherodev
Well, yeah

1591165780
pixelherodev
I also hate LLVM in general

1591165782
pixelherodev
The design

1591165784
pixelherodev
ugh

1591165795
pixelherodev
We talked about how comptime performance isn't a thing they care about

1591165799
pixelherodev
here, earlier, I mean

1591165806
pixelherodev
They only recently started even paying attention to it

1591165820
pixelherodev
(comptime performance == time to compile, not Zig comptime)

1591166091
torque
"it compiles slowly" seems like a strange hill to want to die on re: llvm being bad I guess

1591166596
pixelherodev
It compiles

1591166600
pixelherodev
torque: it's

1591166607
pixelherodev
It isn't about absolute speed to me, not really

1591166619
pixelherodev
It's that it's possible to have the same thing but significantly faster

1591166623
pixelherodev
but they

1591166637
pixelherodev
until it got to here

1591166727
torque
that doesn't seem like a design flaw but rather a matter of priorities, though?

1591166754
scientes
pixelherodev, I am sure the most efficient way to fix that is to rewrite the whole thing /sarcasm

1591166820
scientes
Like I really doubt the backends are slow

1591166828
scientes
you could just skip the middle end entirely

1591166951
pixelherodev
scientes: heh

1591166954
pixelherodev
heh heh

1591166956
pixelherodev
I mean

1591166957
pixelherodev
I'm definitely not rewriting

1591166960
pixelherodev
it*

1591166962
pixelherodev
what are you talking about

1591166964
pixelherodev
no idea

1591166978
pixelherodev
torque: call it poor priority selection then, if you want

1591167005
torque
I haven't ever looked at the llvm codebase, but I'd much rather have a good abstraction 99% of the time than raw speed. I realize the two are not necessarily mutually exclusive

1591167017
torque
but there are a finite number of hours in the day

1591167061
pixelherodev
Sure

1591167066
pixelherodev
my goal is to have both

1591167079
pixelherodev
I'm of the opinion libLLVM has exactly neither of those

1591167095
torque
when it comes down to it, compiling code doesn't usually have hard requirements for realtime performance, unlike, say, video decoding, so it makes sense their priorities would lie elsewhere

1591167114
hermier
there are no such thing as a good abstraction unless you can predict the future

1591167177
pixelherodev
Ehh

1591167190
pixelherodev
torque: it's not about performance though, it's about efficiency

1591167202
pixelherodev
If you can do a task in ten seconds, or in sixty seconds, and get the same results

1591167211
torque
since most software gets distributed as pre-compiled binaries, I'd wager you actually save many computer-cycles of computation even if you slow compilation down an order of magnitude to speed up runtime by 1%

1591167212
pixelherodev
and you *deliberately choose the latter for short-term convenience*?

1591167228
pixelherodev
Right, but that's what I'm saying

1591167231
torque
is it "deliberate" if you don't do the comparison

1591167234
pixelherodev
It's not about "trading comptime for run-time"

1591167243
pixelherodev
It's

1591167260
pixelherodev
I'm saying it could produce equally well optimized code in much less time if the implementation was more well-designed

1591167304
torque
given the scope of the project, I'm not necessarily convinced that is true

1591167339
torque
but again, I'm considering the practical realities of the problems the developers are interested in and have time to solve

1591167344
scientes
its more a trade-off

1591167400
torque
I mean I could say I hate zig for being inefficient

1591167407
torque
but there are bigger fish to fry, as it were

1591167411
scientes
^^

1591167603
hermier
inefficiency is only the visible direct cost, if you add reusability/maintenance/practicallity costs in the ballance, inefficiency starts to be a smaller fish

1591167704
pixelherodev
Right but

1591167712
pixelherodev
I'm saying that it doesn't have those either.

1591167736
pixelherodev
I simply do not think the design has any real advantages (but I've only spent a few hours in the source so)

1591167747
scientes
>  (but I've only spent a few hours in the source so)

1591167776
torque
that claim seems patently untrue given that multiple languages have been implemented using llvm as a backend

1591167936
torque
(which lends itself to the claim of it being reusable/practical. hard to talk about maintainable given it is written in c++)

1591168035
hermier
if language is the problem, then it is not the real problem

1591168078
hermier
it would be nice to have everything in the same language, but even in C one needs to throw assembly into the mix from time to time

1591168103
scientes
hermier, verdad? Entonces tú puede hablar en Español?

1591168107
hermier
so the language issue is a falcy

1591168118
hermier
scientes: nope, french here

1591168186
hermier
scientes: the fact I can't speek, doesn't mean I can't understand and tune to my needs

1591168320
hermier
it is true it would be niecer to unify a whole pipeline into a unified langage, for the sake of the completeness, but then you need to have a new maintenance cost to deal with

1591168338
torque
well, I wouldn't miss an opportunity to take an oblique jab at c++, but generally I'd claim that language choice absolutely affects code maintainability, by providing more or less constructs that can be used to produce ridiculous messes

1591168375
torque
lord knows I've committed more than my fair share of crimes in python in ways that I wouldn't be able to in e.g. C

1591168426
daurnimator
not to mention the "newspeak" effect

1591168457
scientes
hermier, that language is the C ABI

1591168488
scientes
and LLVM is designed to be modular

1591168625
marler8997
found an ownership bug deep in rational.zig...what a headache

1591168757
hermier
C ABI is the worse excuse ever, there are more efficients ways to deals with the stack than the C ABI. And lets not speak about the mangling mess that it imposed to C++ symbols. But tradeoff were settled once and you have to deal with it

1591168774
pixelherodev
lol

1591168783
pixelherodev
The C++ mangling issue isn't C's fault

1591168806
pixelherodev
I don't recall C demanding that C++ use their ABI

1591168811
pixelherodev
C++ chose to

1591168819
pixelherodev


1591168826
daurnimator
hermier: there have been new C ABIs throughout the ages

1591168827
pixelherodev
That's not a particularly bright combination

1591168834
pixelherodev
That too

1591168839
pixelherodev
C ABI != POSIX SystemV ABI

1591168853
pixelherodev
C ABI for x64 != C ABI either

1591168858
daurnimator
if you

1591168874
pixelherodev
Spoiler alert: you probably can't, because it's really not that bad.

1591168880
pixelherodev
And mangling isn't an ABI issue.

1591168882
pixelherodev
It's a naming one

1591168886
pixelherodev
That's a separate issue from ABI

1591168897
pixelherodev
Technically, I think you can use anything as a name

1591168899
pixelherodev
Yeah

1591168905
pixelherodev
Which I know because Andrew demoed using emoji

1591168906
daurnimator
pixelherodev: mangling is part of the ABI though....

1591168917
pixelherodev
C++ could've just injected function sigs as the mangling

1591168921
pixelherodev
daurnimator: what? Huh?

1591168926
pixelherodev
I don't recalling seeing that in the spec

1591168929
pixelherodev
recall*

1591168934
pixelherodev
It's not impossible that I missed it though

1591168948
pixelherodev
Going to take anohter look

1591168952
pixelherodev
another*

1591168969
hermier
it is required because of tooling issue and practicality

1591168983
daurnimator
pixelherodev: is it stdcall that has the stack space required as part of the symbol?

1591168990
pixelherodev
daurnimator: ... uh...

1591168996
pixelherodev
I'm looking at the C ABI right now

1591169001
pixelherodev
Fun fact:

1591169004
pixelherodev
C++ doesn't use the C ABI

1591169009
daurnimator
> STDCALL functions are name-decorated with a leading underscore, followed by an @, and then the number (in bytes) of arguments passed on the stack.

1591169018
pixelherodev
That's not the C ABI

1591169024
pixelherodev
STDCALL != C ABI

1591169026
hermier
if you remove the mangling, then you have to change every tools in existance from assembly to compilers

1591169030
pixelherodev
Sure

1591169031
pixelherodev
But

1591169034
pixelherodev
They never had to add it

1591169038
hermier
anyway that is not the point of the orignal subject

1591169040
pixelherodev
They could've used something smarter from the beginning

1591169040
daurnimator
pixelherodev: it's the default ABI used by some C compilers. That's a C ABI

1591169048
pixelherodev
What compilers?

1591169065
daurnimator
pixelherodev: most things that grew up on windows

1591169071
hermier
every compiler in existance

1591169074
pixelherodev
(But yeah, x64 SystemV C ABI explicitly states that C++ has its own ABI and links to it)

1591169077
pixelherodev
hermier: lol

1591169080
pixelherodev
no

1591169084
pixelherodev
daurnimator: Windows doesn't have an official C compiler.

1591169091
pixelherodev
MSVC is officially speaking

1591169091
daurnimator
some parts of visual studio; borland IIRC.... turbo C?

1591169105
pixelherodev
MSVC explicitly states "Do not ever compile in the deprecated C mode"

1591169113
daurnimator
pixelherodev: MSVC

1591169119
pixelherodev
It can compile C.

1591169122
pixelherodev
Yes.

1591169130
pixelherodev
But the official docs claim that you should never use it as one

1591169135
pixelherodev
I'll take them at their word.

1591169139
daurnimator
It was a C compiler; then it was a C/C++ compiler; then it was a C++ compiler; then it was a C/C++ compiler

1591169158
pixelherodev
Sure, practically

1591169160
pixelherodev
but

1591169161
pixelherodev
officially, it's C++ only

1591169177
pixelherodev
Again, if MS wants to tell me not to use it as a C compiler, fine

1591169178
pixelherodev
I won't.

1591169181
pixelherodev
Bye, Windows.

1591169182
daurnimator
officially from 2014-2018 or so. before that it was officially a C compiler. and more recently too

1591169191
hermier
anyway

1591169197
pixelherodev
It's still officially C++, unless they changed it in the last month or so

1591169201
pixelherodev
s/C++/C++ only

1591169203
pixelherodev
Point is

1591169216
pixelherodev
stdcall is not, despite the name, a standard callconv

1591169229
pixelherodev
And Windows doesn't use it anymore either IIRC

1591169233
pixelherodev
msbuild ABI or something?

1591169243
pixelherodev
I think it's offered as an attribute

1591169247
pixelherodev
but not by default anymore

1591169258
pixelherodev
I could easily be wrong though

1591169277
pixelherodev
it's 3 AM, I took multiple sleeping pills, and I don't care enough about Windows to remember

1591169281
pixelherodev
let alone obscure ones

1591169294
pixelherodev
anyways

1591169299
pixelherodev
I'm avoiding chat for the next few days

1591169308
pixelherodev
I waste way too much time in rants that I'm only half serious about

1591169320
pixelherodev
I really couldn't care less if you call MSVC a C++ compiler

1591169330
pixelherodev
I'm still just pissed that they don't properly support C99

1591169335
pixelherodev
The 2-decade-old standard.

1591169348
pixelherodev
That was probably the final straw that had me wipe Windows entirely.

1591169373
pixelherodev
daurnimator: more seriously though, to the best of my knowledge, stdcall is non-standard on every platform

1591169378
pixelherodev
I could be wrong though

1591169393
hermier
it is normal, they deal with their own mess and sometimes you can't never achieve to be conformant to some standards

1591169418
pixelherodev
Actually, about that

1591169426
pixelherodev
It got closer to conformant with the 2016 upgrade IIRC

1591169436
pixelherodev
as someone put it, they probably have some ninja coders secretly fixing C support

1591169442
hermier
if you look at every compiler they are always conformant to a certain degree

1591169445
pixelherodev
Officially unsupported though

1591169446
pixelherodev
:P

1591169456
pixelherodev
Ehh

1591169464
pixelherodev
GCC for instance can be made to be truly conformant

1591169469
pixelherodev
maybe not 100%, but at least 95% easily

1591169475
pixelherodev
MSVC isn't just non-conformant

1591169481
pixelherodev
It explicitly doesn't support like, half the language

1591169494
daurnimator
pixelherodev: 2017 added nearly everything

1591169507
pixelherodev
Wait, really? Designated struct initializers?

1591169518
pixelherodev
That was the biggie for me IIRC

1591169544
pixelherodev
Honestly though, I couldn't care less at this point

1591169555
pixelherodev
Windows is an atrocious platform, for anything, but especially for dev

1591169562
hermier
until spec designers become implementors, and provides a solid reference implementation that you could ship in your project, that beeing conformant is a futile joke

1591169590
pixelherodev
The compiler situation is a mess, it's hell to get everything building properly, and even if you can get it building, proper debugging is a pain

1591169631
pixelherodev
I simply don't care anymore

1591169637
pixelherodev
SEP field is activated

1591169641
pixelherodev
and ugh

1591169646
pixelherodev
I've been a downer for like

1591169648
pixelherodev
20 minutes now, at least

1591169651
pixelherodev
ugh

1591169652
pixelherodev
better topic

1591169661
pixelherodev
... so how bout that stage2? :P

1591169684
pixelherodev
hermier: that's a solid point

1591169691
pixelherodev
It's one reason I like RISC-V

1591169697
pixelherodev
Spec authors have an official conformance testing suite

1591169721
pixelherodev
Honestly, RISC-V = <3

1591169728
pixelherodev
Can't wait for a RISC-V laptop lol :P

1591169730
pixelherodev
That would be awesome

1591169747
ikskuh
heh

1591169747
pixelherodev
oh wait

1591169754
pixelherodev
there go the sleepies

1591169755
ikskuh
i think we have to wait some time still for that

1591169756
pixelherodev
nights

1591169769
pixelherodev
Years, for sure

1591169774
pixelherodev
Hopefully within 5-10 though

1591169793
pixelherodev
An actual open chip implementation, with fully open hardware?

1591169795
pixelherodev
Would be a dream

1591169806
pixelherodev
Especially if it was like that

1591169809
pixelherodev
uh

1591169811
pixelherodev
what was it?

1591169813
pixelherodev
wait no sleepies

1591169813
daurnimator
IIRC VS2019 is going to even add _Generic support

1591169815
pixelherodev
Not losing those

1591169817
pixelherodev
night

1591169819
pixelherodev
daurnimator: whoa, really?

1591169821
pixelherodev
huh

1591169827
pixelherodev
Good job ninjas!

1591169831
pixelherodev
You too `ninja`

1591169832
pixelherodev
you're awesome

1591169836
pixelherodev
keep being awesome

1591169852
ikskuh
/kick pixelherodev "Go to sleep"

1591169869
pixelherodev
Sorry about the ugh conversations. Going to sleep now. I'm going to feel awful about this in the morning, if that's any consolation :P

1591169872
pixelherodev
bye

1591169885
daurnimator


1591169973
hermier
well x86 and its PCXX specifications has way too much lugage, it is true that risc V is more fresh

1591170248
shakesoda
i definitely want more non-x86 laptops

1591170252
shakesoda
keeps things interesting

1591170455
hermier
laptop or not does not matter, but yes there is a need for a new platform to iterate from

1591170800
shakesoda
oh, i just want laptop shape so i don't have to switch the plugs so much on all my displays and keyboards and such

1591170809
shakesoda
i'm totally fine with boxes

1591170872
shakesoda
on a deeply related note, i've got a new pi 4 (8gb) showing up today

1591170898
shakesoda
excited to play with that, it's quite an upgrade over the ones i've been using

1591171165
hermier
have a pi4 4gb, and it is quite nice, but I struggle with the available distro/software :/

1591171686
shakesoda
i mostly just develop stuff on mine, and pretty much everything i'm interested in works fine on arm

1591171703
shakesoda
been using pi zero and 3's for years

1591175799
ttmrichter
For purposes of defining peripherals, I'm assuming, from a once-over here, that a packed struct would be the way to go to ensure that something like usart1.input_data_register gets the right place?

1591175811
gonz_
shakesoda: Are you booting into your own stuff directly or compiling for linux-arm?

1591175818
gonz_
For the Pi, I mean.

1591175869
ttmrichter
I'm investigating Zig for small embedded systems, so very low level.

1591175980
shakesoda
gonz_: usually linux, but i boot my own stuff directly on zero when i'm in the mood to work on that

1591176074
shakesoda
note that i've been working in c on these things, the zig compiler works fine but takes too long

1591176098
gonz_
ttmrichter: If it still compiles or not I don't know, but you might want to take a look at

1591176139
ttmrichter
That's orders of magnitude higher level than what I'm aiming for.

1591176194
shakesoda
was it you asking about the cortex m series support

1591176196
ttmrichter
And it doesn't seem to have memory-mapped peripherals in it.

1591176198
ttmrichter
Yes.

1591176211
gonz_
ASM is orders of magnitudes higher level than what you're doing?

1591176237
gonz_
What upside do you see to writing raw machine code, because I guess that's what you're doing in that case...?

1591176239
shakesoda


1591176266
shakesoda
this would need to have some (likely) zig code to poke at the memory mapped peripherals on the pi

1591176277
shakesoda


1591176277
ttmrichter
He's writing an operating system with generic devices (where he has devices at all).

1591176295
ttmrichter
I'm fiddling with individual bits in memory-mapped peripheral registers.

1591176320
ttmrichter
It's a radically different world.

1591176487
gonz_
I don't know why anyone would think just because someone pastes a related thing that they should *do that entire thing*.

1591176509
gonz_
It's about taking in things, stealing things that make sense for what you're doing.

1591176527
shakesoda
as for packed structs i haven't used them much so i'm not sure if the semantics are exactly what you want, but i think so

1591176535
gonz_
Instead you took this moment to humble-brag in some fashion about doing something different.

1591176541
ttmrichter
OK, I think we're talking across purposes.

1591176543
ttmrichter


1591176550
ttmrichter
That is a USART in an STM32.

1591176573
ttmrichter
If I have to access that by manually flipping bits and doing the equivalent of "peek" and "poke" this is a non-starter of a project.

1591176635
ttmrichter
What I'd do in C, C++, Modula-2, Modula-3, FreePascal, etc. is have a struct defined in some way so I can access the USART_SR by name from a pointer.

1591176637
shakesoda
eh, a couple functions doing bit twiddling isn't so bad if you have the need

1591176649
shakesoda
but if you can map it to a struct in c, you can in zig

1591176651
ttmrichter
And in the better languages of that list (i.e. not C) individual bits or bit collections by name.

1591176668
shakesoda
c lets you define bit widths in structs

1591176685
ttmrichter
This isn't "a couple of functions".  In a SMALL MCU we're talking hundreds of these.

1591176693
shakesoda
the syntax is pretty uncommonly used though

1591176708
ttmrichter
It's also undefined as to what the layout is.

1591176714
ttmrichter
Nobody sane uses bit fields for that.

1591176748
shakesoda
i have certainly known people to do exactly that, but i won't call them sane :)

1591176750
ttmrichter
Anyway, leaving the office.  I'll have to dig through the manual.

1591176764
shakesoda
packed structs probably do what you want.

1591177147
hermier
packed struct the most horrible necessary language hack in every language when you need to conform to some low level bit requirements...

1591177707
drp
what's the difference between zig0(stage1) and zig(stage2)? speed? features?

1591177736
shakesoda
hermier: struct packing is also really useful for binary files and otherwise serializing stuff

1591177765
shakesoda
you just want to avoid it in the general case

1591177769
tdeo
drp: some parts of the compiler are implemented in zig

1591177781
tdeo
zig0 does not include them because there is no zig compiler to compile them with

1591177799
tdeo
translate-c is implemented in zig

1591177804
tdeo
so it won't work in zig0

1591177928
hermier
drp: stages corresponds to the degree of autonomy the compiler depends on its host system, you want stage 2 (full self hosted) to be has full featured has possible, other stages are throw away necesities to reach stage2

1591178008
drp
Thank you!

1591178143
hermier
to explain it more simply, stage0 is compiled on host, stage 1 is proof that stage 0 is able to compile the compiler, and stage 2 is proof that a compiler is able to compile itself

1591181781
ttmrichter
hermier: That's one of the best, succinct descriptions of that I've ever heard.

1591182095
hermier
ttmrichter: Details are complicated, but concept are usually simple to explains when really understood.

1591182383
ttmrichter
Right, the devil is in the details.

1591182402
ttmrichter
But often when people get compiler bootstrapping explained to them they're given all the details.

1591182405
ttmrichter
None of the overview.  :D

1591191482
FireFox317
Hey, can someone connect whitequark? It seems like the certificate for

1591191555
ifreund
if i ignore the risk and continue it seems to work fine

1591191599
FireFox317
well firefox is not letting me :D "eenode.irclog.whitequark.org has a security policy called HTTP Strict Transport Security (HSTS), which means that Firefox can only connect to it securely. You can’t add an exception to visit this site.

1591191608
companion_cube
if you have twitter:

1591191691
fengb
Use a less secure browser like IE11

1591191894
FireFox317
companion_cube, thanks, I DM'ed the person

1591191984
companion_cube
✔

1591192036
FireFox317
its already fixed!

1591194208
pmwhite
It would be interesting, once the self-hosted compiler is written, to test it by computing it's fixed-point; that is, compiling itself via itself ad infinitum. How quickly, if ever, would we reach an executable that produces a byte-identical version of itself.

1591194311
ifreund
I've always kinda assumed that's something most people wrting compilers try

1591194318
ifreund
never read about any results though

1591194573
fengb
I think it's been said that stage 3+ should be identical

1591203829
demizer
Hey guys, I am having trouble using C++ api from Zig. See

1591204926
FireFox317
Hey demizer, welcome to Zig! Unfortunately C++ does not have a stable ABI, which means that we can't call C++ code from Zig. Only C has a stable ABI and thus you have to use `extern "c"` in the C++ header to make sure that it uses the C ABI. The webview header you are using does this correctly, so you should be able to @cImport this header. I'm not sure if you have a compiled version of the webview library, but if you don't, then you

1591204926
FireFox317
need to compile this with `g++` or `zig c++`

1591205001
FireFox317
You can than link this library with the zig code and it should work

1591205241
leeward
I keep forgetting to put my changes in branches for PRs.

1591205308
FireFox317
demizer, I'm not available for the next 1,5 hours, but probably other people in here can help you for sure!

1591205607
leeward
demizer: I think you may have some misconceptions about how header files work. There's no need to compile webview.h to work in zig; you just have to @cImport it like FireFox317 suggested.

1591205723
leeward
You know what? I'll put something in reddit.

1591206067
demizer
FireFox317: thanks for the response. In the reddit post I show the "zig c++" command, and was successful with that. But not sure how I go about converting webview.h into a library that zig can use. The C++ implementation code is also contained in webview.h. Also, do I have to call "zig c++" from build.zig over cli, or is there an api I can use?

1591206082
demizer
leeward: thanks for the response!

1591206086
leeward
demizer: reddit post incoming

1591206146
demizer
👍

1591206535
leeward
Hopefully that's helpful. Let us know if you need help getting the library to link; the build system is not super well documented yet.

1591207138
demizer
leeward: thank you. I will try building a library and linking against it. I've done the latter before in zig. Not sure yet how to turn webview.h into a library yet though as it also contains the C++ implementation of the classes

1591207376
leeward
Oh goodness, looking at their actual code and...hmm

1591207414
leeward
so webview.cc is just #include "webview.h"

1591207418
leeward
Way to go, C++.

1591207445
ifreund
the easiet way to do this is likely to wrap in simple C bindings

1591207494
ifreund
i'm already doing this for a few C functions that can't be automatically translated yet

1591207495
leeward
The header does export C bindings. I think what you want to do is build webview.o from webview.cc.

1591207512
ifreund
but you can't @cImport this header right?

1591207541
leeward
Is that the problem?

1591207574
ifreund
idk, maybe I'm lost

1591207589
leeward
I think the problem is trying to `zig c++ webview.h`

1591207594
demizer
correct

1591207604
demizer
zig c++ main.cc works

1591207621
leeward
Have you tried `zig c++ webview.cc`?

1591207644
ifreund
i don't think compiling the header is a thing you do

1591207663
leeward
Yeah, that's where I was going.

1591207667
ifreund
you compile the .cc and @cImport the header

1591207668
demizer
main.cc from

1591207706
demizer
i am going to try creating webview.cc on lunch break

1591207744
ifreund
lol, webview.cc is one line

1591207751
ifreund
what is this spaghetti

1591207756
leeward
Yeah.

1591207758
ifreund
why is all the code in the header

1591207774
torque
single! header! library!

1591207778
leeward
Short answer: C++

1591207780
demizer
yeehaw

1591207782
demizer
:D

1591207788
ifreund
but yeah what you need to do afaik is compile and link agains `webview.cc`

1591207795
torque
the most c++ solution to having no package management infrastructure

1591207801
ifreund
and @cImport the header which will hopefully work

1591207817
demizer
thanks guys, I will try that. Appreciate the help!

1591207847
ifreund
if translate C fails, then you can always wrap a subset in C and translate that

1591209725
pixelherodev
ikskuh: thanks for the kick ;)

1591209979
pixelherodev
daurnimator, hermier, sorry about being snappy and, dare I say, antagonistic last night. I should be in a a Snickers-esque commerical: "You're not you when you're exhausted. Take a goddamn nap."

1591210006
pixelherodev
"And now, back to your regular pleasant programming"

1591210043
leeward
pixelherodev: I'm a third of the way through your stream from yesterday. You should really consider naming the videos in twitch.

1591210055
leeward
When there are more than 2, it will matter.

1591210056
pixelherodev
I will. Probably.

1591210062
pixelherodev
leeward: I put them up on diode.zone anyways

1591210065
pixelherodev
Which reminds me

1591210084
pixelherodev
Need to split yesterday's stream in half and post those

1591210085
leeward
mmm, P/N junctions...

1591210094
pixelherodev
P/N?

1591210100
leeward
diodes

1591210129
leeward
are made of P and N type semiconductors. Where the two meet is where the diode magic happens.

1591210134
pixelherodev
Ahh gotcha

1591210139
leeward
(positive, negative)

1591210144
pixelherodev
Still waking up :P

1591210431
pixelherodev
What have I wrought onto this world?!

1591210484
leeward
Reminds me of a famous telegram: WHAT HAVE PIXELHERODEV WROUGHT

1591210490
leeward
wow, fail

1591210492
leeward
Hath?

1591210506
leeward
s/HAVE/HATH/

1591213946
pixelherodev
andrewrk: is there a way to retrigger a specific CI without pushing? Alternately, what's a good way to debug a CI failure on an OS I don't have?

1591213991
andrewrk
get access to the OS

1591214001
andrewrk
somehow

1591214226
pixelherodev
:P

1591214357
leeward
pixelherodev: Lots of CI setups will have a way to remotely connect to a session. Which CI is failing?

1591214365
euantor
If using sr.ht, you can SSH into a build VM and run tests there

1591214560
pixelherodev
Or

1591214562
pixelherodev
other option

1591214564
pixelherodev
figure out what platform-specific changes I made :P

1591214801
leeward
Sure, if you're a member of the "guru meditation" school of debugging.

1591214834
pixelherodev
It's not that big.

1591214836
pixelherodev
~50 lines maybe

1591214843
pixelherodev
Platform specific should be miniscule

1591214891
leeward
I'm not saying there's something inherently wrong with

1591214917
leeward
Not my style though. I like to watch it fail.

1591214928
pixelherodev
THat would require installing Windows

1591214931
pixelherodev
Which would be a pain

1591214932
pixelherodev
Take forever

1591214939
pixelherodev
and probably be harder than just reading the code

1591214961
leeward
Or using remote desktop to connect to a windows VM hosted by the CI people...

1591215006
pixelherodev
I don't think that's possible lol

1591215015
pixelherodev
and I think I found the problem anyways

1591215021
leeward
I don't know what the gentoo incantation is, but rdesktop is a thing that runs on Linux.

1591215094
pixelherodev
right but

1591215098
pixelherodev
I don't think CI offers that ?

1591215102
pixelherodev
and

1591215104
leeward
Which CI?

1591215110
leeward
I know that some do.

1591215110
pixelherodev
I don't think it'd be easier than this anyways

1591215148
leeward
For your 50 lines where you've already found the problem? Probably not. For the future? It's a good tool to have in the belt.

1591215183
pixelherodev
That depends on a single assumption

1591215191
pixelherodev
I'm ever going to touch Windows code in a way that's more than this :P

1591215202
leeward
True!

1591215234
pixelherodev
I'd have to be either very desperate or receive a loooot of zeroes to consider that lol

1591215276
pixelherodev
and the latter probably wouldn't work either TBH

1591215278
leeward
Personally, I've only ever had 1 project where I cared enough about Windows to build CI for it. That actually targeted cygwin, which made life a bit easier.

1591215285
pixelherodev
I don't have much use for a lot of zeros

1591215290
pixelherodev
I have a lot of motivation to avoid Windows

1591215293
leeward
It's that 1 before them that helps.

1591215310
pixelherodev
You know what I mean :)

1591215358
pixelherodev
I'm not interested in e.g. being a millionaire. Money is only worth what it can buy, and frankly, my total material desires probably amount to a rounding error most people that rich :P

1591215371
leeward
Zig is a good example of a reason to care about Windows code though. If you write something and you want lots of people to use it, Windows support is somewhere between "must" and "probably should."

1591215380
pixelherodev
Good laptop, comfy place to nap, good wifi. That's it.

1591215381
pixelherodev
:P

1591215402
leeward
Spoken like someone who grew up comfortable.

1591215407
pixelherodev
Nah

1591215408
pixelherodev
Not remotely

1591215417
pixelherodev
More than many, sure

1591215425
pixelherodev
But my parents were... not something I'm discussing on here :P

1591215461
pixelherodev
To put it better: relative to Americans, no.

1591215484
pixelherodev
I still recognize how fortunate I am relative to many parts of the world

1591215503
leeward
You have time. Young, single, and broke is a fine place to be.

1591215557
pixelherodev
That's the hope

1591215727
leeward
I don't want to get into the wonders of having money. They're not much of a reason to compromise principles.

1591215792
leeward
Making your stuff useful to the most people possible, though, that's all the wedge windows needs. These days, anyway.

1591215826
pixelherodev
Not for me.

1591215835
pixelherodev
I agree with you, principles are vastly more important than money to me

1591215842
pixelherodev
I disagree on the WIndows thing

1591215850
pixelherodev
I've officially dropped Windows support in most of my stuff

1591215863
pixelherodev
I don't go out of my way to not support it, but if it's broken,

1591215887
pixelherodev
If someone wants Windows support, and they send a patch, I'd merge it, but I won't waste my time supporting a platform I consider unethical

1591215915
leeward
Would you accept patches that fail the Windows CI?

1591215934
pixelherodev
I wouldn't

1591215939
leeward
After that hypothetical person's patch is merged, obviously.

1591215951
leeward
Because they're thorough and they included it.

1591215966
pixelherodev
Ah, then no.

1591215975
pixelherodev
I wouldn't allow patches that break any platform - I just won't be the one to support it.

1591215995
pixelherodev
If there's enough support for someone to add that CI, then they've done what I'd consider the reasonable minimum, and I'm not going to spite them by doing that.

1591216026
Xavi92
if using gdb, how could I read a memory address with an arbitrary size? In C, I'd use e.g.: `p *(int *)0x80010000`

1591216056
leeward
It's the same as C.

1591216072
leeward
Oh, you mean instead of p?

1591216076
Xavi92
leeward: so it's still using the C data types?

1591216091
leeward
x /72xb 0x80010000

1591216096
leeward
In gdb it is.

1591216225
Xavi92
leeward: thanks!

1591216545
sacredbirdman
pixelherodev: would you have time to help me with the compiler crashing?

1591216569
sacredbirdman
or should I just post the problem somewhere

1591216656
pixelherodev
sacredbirdman: what's the issue?

1591216660
pixelherodev
Segfault?

1591216666
pixelherodev
Ehh, post it to GitHub Issues

1591216671
sacredbirdman
not segfault.. it just says it quit unexpectedly

1591216671
pixelherodev
(or mailing list)

1591216691
pixelherodev
I'll take a look if I have time, but it means anyone else can too :)

1591216730
sacredbirdman
at some point I'd be interested in knowing how to drill down on issues like this

1591216735
pixelherodev
Anyone know if the leak checker for the stdlib applies to stage1, too?

1591216743
sacredbirdman
but I'll post it to github

1591216766
sacredbirdman
I got a minimal non-working example =)

1591217181
leeward
Wow, I just discovered that the thing I told Xavi92 was kinda wrong. You can cast to a u64 or a usize or whatever in gdb too.

1591217197
leeward
Fun times.

1591220185
shcv
does anyone have examples of UDP networking, or documentation references? Based on looking at the std.os source it looks pretty similar to C, but I'm not sure if there are differences I should be aware of

1591220230
lunamn
you can look at std.net as well, it isn't complete, but it could help

1591220776
FireFox317
shcv, jup std.net is supposed to be a high level networking api IIRC. However currently only linux has quite okay support i think

1591220822
FireFox317
high-level cross-platform i should say

1591220867
pixelherodev
std.net is the long-term API, but short-term, std.os is the way to go

1591220870
pixelherodev
Or, you can build up std.net ;_

1591220872
pixelherodev
;)

1591220873
pixelherodev
*

1591221437
FireFox317
daurnimator, while implementing the complete (without vector stuff) systemV ABI for x86_64, I looked at the Clang source code and found where they handle bitfields. I think this might be relevant for your 'Linux kernel module project' and PR #4165 that you submitted. The relevant Clang code is in

1591221438
FireFox317
which type a paramater should be passed in (stack, register etc). The Zig code that does this classifying is currently in analyze.cpp:7951 -> function `type_system_V_abi_x86_64_class`.

1591221460
FireFox317
Maybe I should have added this to the relevant issue/PR tho

1591221716
pixelherodev
FireFox317: what parts of the ABI did you implement? This is for stage1?

1591221765
ikskuh
shcv,

1591221777
ikskuh
pixelherodev: did you forget about me and kristoff?

1591221803
pixelherodev
ikskuh: busy with IRL stuff for a bit, sorry

1591221808
ikskuh
oh, okay

1591221811
pixelherodev
Give me an hour or so :(

1591221823
ikskuh
we already talked our stuff, i'm going to bed now

1591221824
ikskuh
:D

1591221829
pixelherodev
night :)

1591221834
ikskuh
await ikskuh.sleep();

1591221860
FireFox317
pixelherodev, yes stage1 indeed. passing c types as paramaters and returning them too. Basically complete support for all structs/unions, but also arrays. basically issue #1481 and then all the x86_64 points

1591221869
pixelherodev
Ahh, nice :)

1591221873
pixelherodev
I still only have integers for my stuff :P

1591221876
pixelherodev
Well, INTEGERs

1591221883
pixelherodev
I'm sure

1591221885
FireFox317
:D

1591221897
FireFox317
definitely

1591221912
shcv
ikskuh: thanks, I'll look at it

1591221941
ikskuh
it's even tested! :D

1591221952
shcv
pixelherodev: I don't mind contributing to std.net, though I don't know what the plan is for the API

1591221952
FireFox317
but luckily (?) we have llvm in stage1, so i dont have to look at all the small details (which register etc)

1591221966
pixelherodev
shcv: I think the API is already largely decided

1591221978
pixelherodev
If you implement stuff platform-specific in your own project, it should be relatively simple to port it later

1591222016
ikskuh
pixelherodev: not really

1591222033
ikskuh
windows sockets are different enough from linux to require a special care for async

1591222039
pixelherodev
Ugh, really? Dammit

1591222045
pixelherodev
There I go making assumptions about sanity again :)

1591222052
FireFox317
shcv, pixelherodev I dont think it is. andrewrk just added it for his needs (i think?). The API can definitely still change

1591222065
FireFox317
lol ikskuh fast

1591222071
pixelherodev
Ahh

1591222072
pixelherodev
Good o know

1591222076
pixelherodev
to*

1591222085
pixelherodev
I'll stick to stage2, thanks :)

1591222090
ikskuh
zig-network actually will support async soon for windows

1591222110
ikskuh
it should work in theory for linux, but seems like the real world is a bit different

1591222233
ikskuh
will look into this soon. if it's "good enough", we can merge the lib into zag

1591222245
ikskuh
and have actual networking code in there!

1591222252
leeward
zag?

1591222256
shcv
yay

1591222256
ikskuh
zig std

1591222268
shcv
also http looks a bit sparse...

1591222274
ikskuh
yeah, sadly

1591222280
shcv
so I might look into helping out with that a bit too

1591222281
ikskuh
h11 is there, but not really good :(

1591222297
ikskuh
both API vise and quality of implementation :(

1591222322
ikskuh
shcv: using https with zig is in here:

1591222353
pixelherodev
Yeah, too bad Andrew wouldn't let me get that name merged ;)

1591222357
ikskuh
and now: bye until tomorrow

1591222362
ikskuh
i've seen it!

1591222538
Kingsquee
is there a way I can query whether the current machine is 64bit or not?

1591222558
satchmo
uname -m

1591222562
satchmo
oh wait from zig?

1591222582
Kingsquee
ye

1591222591
Kingsquee
I mean technically that answer is still correct but

1591222610
Kingsquee
there's complicated stuff like aarch64 vs aarch64_32 vs idfk

1591222611
ifreund
look in std.builtin

1591222619
Kingsquee
I YAM

1591222636
Kingsquee


1591222675
Kingsquee


1591222754
FireFox317
Kingsquee, jup that is the function

1591222828
leeward
A thing that's consistently bothered me about Zig is that there's no type for "whatever the register width is."

1591222841
leeward
Sometimes pointers aren't the same size as registers, so usize doesn't cut it.

1591222862
leeward
I end up using c_uint, but...that's crappy.

1591222871
pixelherodev
uregister is a potential type IIRC

1591222873
pixelherodev
Proposed, I mean

1591222883
leeward
I would vote for that.

1591222915
Kingsquee
so like this?

1591222929
Kingsquee
I see in std.builtin it says "Deprecated: use std.Target.cpu.arch"

1591222949
Kingsquee
which doesn't seem to work

1591223022
leeward
pixelherodev: Do you know which ticket it's associated with? I don't see uregister anywhere in ziglang/zig

1591223086
satchmo
Kingsquee: I don't see that deprecated warning in my std, is that in target.zig?

1591223100
Kingsquee
satchmo:

1591223158
ifreund
leeward: related:

1591223175
satchmo
I think they just moved the function to target.zig, that's where I found ptrBitWidth

1591223241
pixelherodev
leeward: never mind then :(

1591223245
pixelherodev
maybe I imagined it

1591223258
pixelherodev
I do remmeber a discussion on the matter

1591223266
pixelherodev
Might have been a comment in an unrelated thread though

1591223277
leeward
ifreund: That is certainly relevant, and full of good points.

1591223946
arekishi
How do i cast a pointer (to a struct) to a []const u8? im trying to send a serialized struct over an unix socket with the File.writeAll function

1591224093
satchmo
mem.asBytes?

1591224189
ifreund
@ptrCast([]const u8, ptr) really

1591224225
fengb
asBytes is safer as it adds some size checks

1591224231
ifreund
oh on, use asBytes if you don't want things to go bad

1591224235
arekishi
thanks, i thought i tried that but i guess i didn't

1591224236
ifreund
*oh no

1591224253
fengb
But... regular structs don’t have well defined memory layout so be warned

1591224265
ifreund
yeah this doesn't seem like a thing you really want to do tbh

1591224320
satchmo
would using packed structs help for serialization or nah

1591224395
arekishi
hmm @ptrCast doesn't work in that way but mem.asBytes works for me. ` error: expected pointer, found '[]const u8'`

1591224401
arekishi
and here is the code: `@ptrCast([]const u8, &buffer)`

1591224433
leeward


1591224445
arekishi
yeah im using packed struct

1591224490
arekishi
im making a zig version of xcb, lots of structs and fields. It cleaned to use as struct than manually copying each field with arithmetic and memcpy

1591224500
arekishi
cleaner*

1591224500
leeward
That last bullet concerns me. "Non-ABI-aligned fields are packed into the smallest possible ABI-aligned integers in accordance with the target endianness."

1591224528
leeward
Does that mean that SPARC can't have fields smaller than u32 even in packed structs?

1591224605
leeward
Or is it saying that there will be padding if I try to put a u32 after a bool?

1591224706
leeward
Oh, never mind. I misread it. It's saying that 16 bools make 2 bytes if bytes are allowed.

1591227052
daurnimator
arekishi: if you have a pointer type you slice it: `@ptrCast([*]u8, ptr)[0..@sizeOf(ptr)]`

1591227063
daurnimator
arekishi: though note we have helpers for this: `std.mem.toBytes` I think?

1591227075
daurnimator
or asBytes

