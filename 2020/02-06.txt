1580947809
ky0ko
is there a way to disable .h file generation in build.zig

1580947876
ky0ko
i'm running into #2173 and don't actually need the .h file at all

1580948228
ky0ko
i tried doing exe.setDisableGenH(true); but it still runs into it

1580948843
ky0ko
ah wait i see, it needs to be set on the individual objects, not the exe

1580948844
ky0ko
got it

1580949851
daurnimator
andrewrk: is `myslice[start..][0..len]` well-optimised?

1580950029
daurnimator
as in: I'm hoping it won't bother to calculate an intermediate length.

1580955802
shakesoda
shouldn't `for (thing) |i| { ... }` be equivalent to `var i: usize = 0; while (i < thing.len) : (i += 1) { ... }` ?

1580955836
shakesoda
i've got a case here where the former is giving me index out of bounds errors but the latter isn't and i'm really confused

1580955858
fengb
Itâ€™s `for (thing) |element, i|`

1580955884
shakesoda
oh!

1580955943
shakesoda
fengb: thanks

1580959334
pixelherodev
LSP?

1580959352
fengb


1580959358
pixelherodev
Ah, okay

1580959426
pixelherodev
`going slow because aiming for protocol-completeness-from-the-outset` Yeah, that's always smart

1580959429
pmwhite
<pixelherodev "Ah, okay"> Linux Systems Programming

1580959466
pixelherodev
Threw away LLVM parser v1 because I

1580959476
pixelherodev
New version can almost lex itself, hopefully by the end of tomorrow :)

1580959478
pmwhite
Oops, I didn't mean to do a reply to that. I'm on the matrix bridge to the IRC channel

1580959500
pixelherodev
No worries. I mean, aside from the fact that you're using Matrix instead of using IRC as nature intended.

1580959616
pmwhite
Haha, well fengb is also using matrix.

1580959807
fengb
IRC doesn't work with mobile. Need some intermediary

1580959813
fengb
work well*

1580960062
pmwhite
that's one thing for me. I also like being able to keep with a conversation without having to have a client always running.

1580960094
shakesoda
same reason i use irccloud

1580960355
pixelherodev
I have a bouncer :)

1580960496
fengb


1580960560
shakesoda
pixelherodev: i got tired of running mine at some point

1580960786
SyrupThinker
What did you use? My ZNC has been running for a year without touching it

1580961571
seoushi
fengb: I wish I could still contribute to open source and put stuff on github. My gitmemory page in comparison is bare because I haven't posted anything new in years

1580961823
shakesoda
SyrupThinker: znc, it wasn't much burden but i just wanted to not think about it at all and have something that played nice on mobile without fuss too

1580961825
adamkowalski
is the format api documented somewhere? I want to provide custom format printing for my type

1580961828
shakesoda
i was running it for a very long time

1580961871
SyrupThinker
Alright, thanks :)

1580962192
fengb
adamkowalski:

1580962310
fengb
Example custom formatter:

1580962500
adamkowalski
awesome thanks!

1580962597
adamkowalski
yeah I found that uefi example before and I was confused what the context is exactly.

1580962631
fengb
Ah yeah it's a little confusing. It's just annoying boilerplate :P

1580962665
adamkowalski
okay, i'm also confused by the output function pointer. what happens if you call it haha

1580962690
adamkowalski
it seems like both of them are just forwarded to fmt.format and you just act as a middleman

1580962724
adamkowalski
I got something working for now though, i'll do a deep dive on what all the API offers later to fully utilize it

1580962809
fengb
You can call output directly if you want. It consumes any []const u8

1580963131
adamkowalski
okay will this also work with allocPrint if I want to output to a string instead of stdout?

1580963217
fengb
Yeah, context/output/error are fed through to make all of that work

1580963252
fengb
Context should contain the string buffer that's accruing the value.

1580963324
adamkowalski
ah okay perfect, thanks!

1580963572
ky0ko_
i have an error building some zig code that i'm not sure what to do about. it's while trying to reference a struct imported from c code, and involves... allowzero?

1580963598
ky0ko_


1580963695
ky0ko_
there's a global struct, svs, in c, that contains an array of struct client_s, which i am trying to iterate through

1580965773
mikdusan
ky0ko_: sounds like

1580966931
ky0ko_
hah, i just keep hitting all sorts of bugs with this project

1580966970
ky0ko_
hm, looking at that i'm not sure

1580967082
ky0ko_
the thing here is, i'm not writing freestanding code and i am not using allowzero

1580967101
ky0ko_
the allowzero is coming from an imported c header, which seems... weird, to me

1580967134
ky0ko_
it

1580967238
ky0ko_
hmm, maybe it is that

1580967597
daurnimator
ky0ko_: the allowzero isn't coming from your code?

1580967610
daurnimator
I didn't think translate-c/c-import could ever generate allowzero....

1580967837
ky0ko_
it is most assuredly not

1580968023
daurnimator
ky0ko_: could you share the C header/snippet?

1580968148
daurnimator
I don't see `allowzero` (or similar tokens) in translate-c.zig at all.

1580968174
mikdusan
or --verbose-cimport

1580968270
daurnimator
mikdusan: btw, any chance you can look at

1580968732
ky0ko_
unfortunately the project is

1580968735
ky0ko_
s/repor/repro

1580968864
ky0ko_
i just did a grep -r of my entire src/ and there is definitely not allowzero anywhere in there

1580969836
ky0ko_
daurnimator: here's a minimal repro

1580970068
plumm
andrewrk: currently using -fdump-analysis is there any way to get the type of a declaration from the package?

1580970147
plumm
right now im trying to do basic file completion, so getting the declarations from the root package, but going from pkg->decls only gives me the position in src where they are defined and their name

1580970526
fengb
Reduced:

1580970549
fengb
Slicing `[*c]` returns allowzero pointers...

1580970571
daurnimator
fengb: that sounds wrong. time to file a bug methinks

1580970620
fengb
I can't even get it to compileLog :(

1580970630
mikdusan
and if you make `|c|` mutable `|*c|` seems to not error

1580970668
fengb
`| *allowzero u32` it's still wrong, but it's not complaining :P

1580970674
mikdusan
and there's no error if the `|c|` var is not used

1580970694
daurnimator
looks like it was introduced at the same time as `allowzero` itself

1580970707
fengb
So it's been around? >_>

1580970735
ky0ko_
maybe so, and we're only seeing it because of the issue linked above?

1580970749
ky0ko_
this same code compiled in 0.5

1580970787
fengb
I'll create an issue

1580970930
fengb


1580970941
fengb
Markdown doesn't work in the title whoops

1580970954
daurnimator
fengb: we all understand it anyway :P

1580970991
fengb
I'd go remove it but then it'll show my edit forever

1580971024
daurnimator
also editing the title splits the thread in my inbox

1580971064
fengb
I'll keep that in mind ðŸ™ƒ

1580971076
mikdusan
for now coerce before slice should work: `var clientList = @as([*], c.svs.clients)[0..16];`

1580971363
ky0ko_
thanks mikdusan and everyone else

1580971420
mikdusan
typo fixed: `var clientList = @as([*]client_t, c.svs.clients)[0..16];`

1580971639
ky0ko_
oh fun, now i'm reaching unreachable code

1580971669
ky0ko_
porting a game engine seems to be a

1580971710
fengb
Ah, I think this is exacerbated by the dereference bug that LemonBoy opened

1580971738
mikdusan
I blame young John Carmack

1580971741
fengb
It seems to have always convert to allowzero pointers, but now it can't dereference and generating compiler errors

1580971821
ky0ko_
young john carmack wrote some terrible code. i learned c by studying that code and it took me years to recover

1580971868
mikdusan
I seem to recall something in ir-clean-up branch and saw that error -- (erroneously) concluded that error existed pre PR and we moved on

1580972048
ky0ko_
hm. so if i have .h file generation enabled i hit the "TODO implement get_c_type for more types" issue

1580972065
ky0ko_
and if i disable it i get an unreachable from an assert that wants h file generation enabled

1580972099
mikdusan
confirmed: regression caused by #4152 and here's the comment I marked as offtopic:

1580972101
mikdusan


1580972270
fengb
I seriously hosed my compiler. Nothing is working now -_-

1580972802
ky0ko_


1580972804
ky0ko_
any ideas here?

1580972862
mikdusan
somewhere generation of .h files is disabled, and it's expecting it to NOT be disabled

1580972896
ky0ko_
i have generation of .h files disabled in my build.zig, because otherwise i hit the TODO. my understanding was that if

1580972922
ky0ko_
but clearly some code path is being hit that expects those

1580973388
mikdusan
are you using setOutputDir ?

1580973412
ky0ko_
yyyyyes

1580973421
ky0ko_
however disabling it made no difference

1580973433
mikdusan
just today andrew mentioned it was deprecated. ok, was wondering if it caused issue

1580973496
mikdusan
s/mentioned/not_reallly... I read it somewhere _today_/

1580979496
mq32
oh, wonderful

1580979509
mq32
"void" isn't a keyword anymore, so i can name my struct fields void!

1580980779
jzck
Hi guys! we're doing a day of open-source at work. I'm working on issue #1519 (build system documentation)

1580980834
mq32
jzck, neat!

1580982696
jzck
actually it seems that the main documentation has this already solved but it hasn't been pushed to master

1580982902
jzck
Ah, I was looking at the homepage. The docs are in sync with master

1580998356
forgot-password
The compiler always starts crashing when I use a function from a MacOS Framework. Is this related to linking?

1580998407
mq32
i don't think the compiler should crash in any way

1580998415
mq32
but i'm no MacOS user, i cannot reproduce this

1580998442
betawaffle
well... the compiler crashes for all kinds of things

1580998464
betawaffle
forgot-password: what's the error?

1580998476
forgot-password
I know, I'm sorry for the broad description, but the compiler is not exactly accurate with its message ^^

1580998537
forgot-password
Well, it just says "The following command terminated unexpectedly" when I execute "zig build run"

1580998542
forgot-password
And it fails at the build step I think

1580998562
mq32
ah

1580998566
betawaffle
so it's probably a seg fault or something. try running the command directly

1580998570
mq32
you can just call the command that failed by hand

1580998578
mq32
this will yield a more descriptive output

1580998580
forgot-password
Yes, I will try that

1580998583
andrewrk
happy to report all tests passing in llvm10 branch, with llvm assertions enabled

1580998596
betawaffle
what's new in llvm10?

1580998674
andrewrk
as far as zig project is concerned, mostly bug fixes

1580998689
mq32
\o/

1580998704
forgot-password
Now I removed the call that causes the issue with "zig build run", so it works fine. But when I execute the command by hand it reports that there are undefined symbols

1580998707
betawaffle
when's the next stream gonna be?

1580998717
andrewrk
it's a nontrivial amount of work to keep up with new llvm versions. some projects are several major versions behind

1580998737
andrewrk
betawaffle, today

1580998750
betawaffle
forgot-password: linking macos frameworks isn't trivial, last i tried. you had to specify the right framework dir

1580998772
forgot-password
Okay, but why does it work fine when I use "zig build run", but not when I execute the command directly?

1580998774
betawaffle
cool, and what's the topic?

1580998846
betawaffle
forgot-password: i can only imagine you're running a different command than zig build is when it works

1580998871
forgot-password
I think it's related to the directory... When I moved into zig-cache/bin it works fine as well

1580998918
mq32
andrewrk: random thought that crossed my mind: Are you aware that the current way of doing varargs probably hit a local maximum? it creates code bloat per call, which is probably not the thing you want to have on a embedded target. C-style varargs have a single function, but can accept different argument types.

1580999135
forgot-password
Okay, nevermind, I failed to copy a few parameters from the 'zig build' command... Now it actually fails with a segmentation fault. Is there any way to get more information from that?

1580999293
shakesoda
i'm trying to pass a page_allocator around but unlike arena allocator it wants to be const, which breaks everything else

1580999307
shakesoda
this leads me to believe i'm doing it wrong, so what should i be doing instead?

1580999332
mq32
shakesoda: for page allocator, are you using std.heap.page_allocator?

1580999373
betawaffle
forgot-password: run it under gdb or lldb

1580999405
betawaffle
i think that's generally as easy as lldb -- <the command and args>

1580999423
forgot-password
Yes, I just did that, but the information is not really helpful to me, hehe

1580999424
shakesoda
mq32: yes, i'm trying to

1580999442
shakesoda
mq32: but actually, i just passed it wrong - disregard

1580999447
betawaffle
forgot-password: bt?

1580999461
forgot-password
betawaffle: bt?

1580999481
betawaffle
type bt<enter> and put the output in a gist?

1580999489
shakesoda
mq32: i switched it from the arena i had first and forgot to fix the indirection of it, and the error i got led me to believe i'd done something very different

1580999497
betawaffle
(bt is a shortcut for backtrace)

1580999512
forgot-password
Sure, give me a second

1580999517
shakesoda
naturally, i figure this out after i mention it on irc instead of 20 minutes ago :P

1580999561
fengb
Rubber ducking is great

1580999614
betawaffle
in a switch with a non-exhaustive enum, when doing `_ => |val|`, what is the type of val? the enum, or the tag type?

1580999645
shakesoda
i'm working on my basic zig-fu, which today means "write a tga file" ->

1581000004
andrewrk
mq32, I'm aware of this problem. I have a plan to address this. The fact that we have a release-small build mode helps, since the compiler can choose to deal with generic functions differently (although it currently is not capable of doing so)

1581000068
mq32
okay, good :)

1581000575
shakesoda
is @as the only way to specify the size of an int/float in an anonymous struct or is there some syntax for it

1581000641
shakesoda
` .{ .foo = @as(u8, 5) }` works, just don't know if there's another form to know about

1581000645
wilsonk
betawaffle: clang-10 is faster than 9 by about 9% when building itself...just so you know. So there might not be large differences for zig with llvm10 but there may be for building large code bases with clang. Strangely I can build llvm/clang/lld 10 in 8:10 with gcc-7.4, whereas clang-9 takes 8:35?  I thought clang-9 would be, and was faster, the last time I checked (but I may have to rebuild clang-9 with itself to get the best performance

1581000674
wilsonk
that is for release builds, btw

1581000685
betawaffle
k

1581000789
forgot-password
Seems like I resolved my problem. I just forgot to link against CoreFoundation...

1581003462
metaleap
say you have this: fn foo() !MyStruct { return .{ fld = 123 }; }

1581003540
metaleap
"type 'MyErrorSet!MyStruct' does not support struct initialization syntax"

1581003541
fengb
you have this: fn foo() !MyStruct { return .{ fld = 123 }; }

1581003549
metaleap
heh

1581003614
metaleap
in the long run i think it "should" -- as error enumerants cannot be constructed via struct-initialization-syntax

1581003622
metaleap
objections? agreements?

1581003638
metaleap
(at least in a self-hosted future)

1581003655
fengb
I think the goal is to actually allow inferred construction

1581003692
metaleap
meaning? (note same msg on anyerror!MyStruct return, not sure if this also involves inference)

1581003778
fengb
It'll understand error unions and create a struct for you rather than bombing

1581003801
fengb
Don't quote me though. I'm trying to find the issue

1581003804
metaleap
also when you know you wont ever error and thus annotate with `error{}!MyStruct` (lets say the signature with ret `anyerror!T` was prescribed by some lib)

1581003844
metaleap
so no error ever, the struct-initializer

1581003848
fengb
Same issue with optionals:

1581003875
fengb
I guess it doesn't have a resolution or tag so I'm not sure which direction it'll go

1581003961
metaleap
well, i'll keep these things in my head's backburner area until the self-hosted zigcompiler comes up. rather than flooding with mostly-mere-convenience requests right now

1581004779
fengb
I didn't realize the usefulness of `for |*foo|`

1581005065
pixelherodev
Wait, what? You mean e.g. `for (a) |*b|`?

1581006364
frmdstryr
Does enumToInt have any runtime cost?

1581006378
andrewrk
no

1581006600
fengb
pixelherodev yeah, I just used `for (alloc()) |*item|` to simplify so much

1581006686
pixelherodev
Huh, that's an interesting pattern

1581008525
betawaffle
what types are allowed in the "iterator value" of a for loop? anything besides slices/arrays?

1581010423
fengb
Only arrays and lices

1581010523
mikdusan
maybe we should genericize it to accept anything with .ptr and .len

1581010556
betawaffle
heh, that'd be neat, though not sure how useful it would be

1581010569
fengb
I'd love to do for (range)

1581010579
betawaffle
you can easily make a slice out of a ptr and a len value

1581010607
mikdusan
yeah we'd need a fn call to make it useful

1581010635
betawaffle
but we already have while for that use-case, so...

1581010664
betawaffle
i'd like to see `until` and `unless` added, though

1581010713
betawaffle
for situations where you only want the `else` block

1581010725
fengb
Disagree

1581010787
andrewrk
var it = range(10); while (it.next()) |i| {}

1581010797
andrewrk
if anything `for` should be removed

1581010810
betawaffle
i guess we already have things that cover the use-case, fengb

1581010815
betawaffle
like orelse and catch

1581010853
betawaffle
andrewrk: what time is the stream and what will the topic be?

1581010917
andrewrk
17:00 EST, topic not determined yet

1581013162
seoushi
My pine phone arives today. Will be fun to see if zig cross compiling will run on ubports.

1581013283
andrewrk
seoushi, I bet the aarch64 download tarball will work correctly

1581013313
seoushi
I will give it a shot for sure

1581013358
seoushi
speaking of cross compiling tho. Are there any plans for cross os compiling? like compiling on linux and build a windows build?

1581013398
andrewrk


1581013418
andrewrk
seoushi, you are about to be pleasantly surprised

1581013433
andrewrk
zig is completely unmatched when it comes to cross compiling

1581013439
seoushi
oh, hey that is awesome.

1581013479
seoushi
How does this work with dynamic libraries. Like say I depend on SDL, I'm guessing it's just a matter of including the dlls?

1581013516
seoushi
mac is also a bit odd because it has .app folders for executables and not just a binary.

1581013548
andrewrk
seoushi, here's an example of cross compiling targeting windows, including SDL:

1581013565
andrewrk
`zig build -Dtarget=x86_64-windows-gnu` and you have yourself a .exe file. you can even test it with wine

1581013577
seoushi
very nice

1581013593
andrewrk
zig's power isn't even tapped into yet, until we have the package manager

1581013673
seoushi
yeah code organization is something I'm still kinda learning in zig. I converted my code base to use files as structs and it feels a lot cleaner. I do have an enum in a single file tho and would like to treat it kinda the same, like the whole files is that enum

1581013715
andrewrk
not gonna happen, just do const your_thing = @import("foo").bar;

1581013771
fengb
Oh Iâ€™m thinking of getting a Pnephone. You have to tell me how it goes :P

1581013776
seoushi
yeah. that is what I currently do. I assume that comptime structs are in the same boat of not going to happen?

1581013783
seoushi
fengb: will do.

1581013821
andrewrk
I received my pinephone last night. Put postmarketOS on it. The phone doesn't support 5Ghz wifi, or my sim card, so it's basically a brick

1581013840
andrewrk
the OS software was barely usable as well

1581013846
companion_cube
wait, you don't have "normal" wifi?

1581013848
seoushi
I thought i does support 5ghz. Or do you mean the os doesnt'?

1581013859
andrewrk
the hardware only supports 2.5GHz

1581013875
seoushi
yeah I wanted to try ubports because it's suppose to be more of an out of the box experiance

1581013883
andrewrk
in summary: it won't work as a real phone any time soon. but it's exciting if you want to be an early part of the development process

1581013968
Snektron
if its a brick you could always try to make it run the zig arm ci

1581014003
seoushi
I also have the librem 5 coming but I have no idea when that will be at this point.

1581014012
Snektron
theres linux for smart phones, as in, desktop-derived versions

1581014031
Snektron
not sure if theyre any good

1581014098
andrewrk
Snektron, we have drone ci ready to run arm32 CI, the ball is actually in zig's court to get those tests passing

1581014217
Snektron
oh thats cool

1581014253
Snektron
i heard there are these cool arm server cpus now

1581014480
shakesoda
huh, pinephone wifi really is only single band. haven't seen one of those in a while

1581014504
ky0ko
andrewrk, so: i have some code that triggers ""TODO implement get_c_type for more types" doing .h file generation. i don't need the .h file, so i disabled that. but then i get this.

1581014569
andrewrk
ky0ko, can I send you a patch to try?

1581014574
ky0ko
yes

1581014645
andrewrk


1581014786
Snektron
andrewrk, do you think its viable to extend whatever is now calculating comptime code to also calculate non-comptime code for quick interpretation?

1581014796
ky0ko
andrewrk, that appears to have fixed the issue

1581014814
andrewrk
ky0ko, ok thanks, pushing to master

1581014914
andrewrk
Snektron, I think you're imagining that it works a lot differently than it does

1581014941
Snektron
(not like now, but more in general)

1581014990
Snektron
might be, i didn't look up yet how it works

1581015037
Snektron
In my uni compiler i just implemented simple constant propagation on the AST, but i could imagine a solution working on IR

1581015045
Snektron
both of which could be extended to non-comptime code

1581015094
Snektron
Native code might be harder, but its probably possible to fashion something jit-like

1581016861
fengb
Oh you donâ€™t even have a 2.4 band? I needed to set one up for my printer and thermostat

1581016905
andrewrk
I have it disabled

1581016921
andrewrk
could turn it on. but this is a mobile phone. the point is that you go into a wifi you've never been to before and use it

1581017029
Joefish
hi. Is there a tutorial or something like the rustbook to learn zig or are the docs the only way right now? tbh the docs seem fine to learn the language because of all the example code in it. just curious and I am wondering if it is kept up to date with changing syntax.

1581017103
andrewrk
hi Joefish. the docs are the best we have currently. that, and a bunch of example projects

1581017120
Joefish
example projects that are in the commnuity tab?

1581017165
Joefish
no wait.. they were somewhere.. like tetris and a few others

1581017291
Joefish
ah Â´zig in the wildÂ´. found it

1581017312
Joefish
alright. thanks andrewrk :)

1581017473
Joefish
btw is the (unofficial) discord server still active? theres a link on

1581017533
andrewrk
it's active. I forwarded your report to the discord channel

1581017541
Joefish
thanks

1581017790
lunamn
Joefish: I manage the server. the invite is valid, weird

1581017993
Joefish
yea I tried disabling my adblock but same. helped in the past where is showed an invite as invalid but it was because of blocked cookies/js

1581018392
wilsonk
metaleap: have you seen

1581018403
metaleap
havent

1581018491
fengb
Thereâ€™s also

1581018491
metaleap
freakish, he seems intent on porting much of go's stdlib to zig in this project:

1581018553
wilsonk
yeah, it is a little different but it was somewhat useful for me in vscode so I figured I would mention it

1581018555
metaleap
at least numerous files like this in there :P

1581018648
shakesoda
`while (i<n) : (i += 1)` pattern is bizarre

1581018652
metaleap
truth be told i'm too absorbed too deeply into it now to even remotely consider any other's half-a-year-ago-attempts at the subject matter. who knows at what point they stopped? would i spend my time bringing that stuff up to nightly? fuggeddaboutit :D

1581018670
shakesoda
does anything else use : that way in zig?

1581018722
metaleap
occasionally do. its part of the while construct. but only in the beginning as most uses turned out to be `for`able upon revisiting

1581018730
andrewrk
I've found zig code to be surprisingly resilient to language changes

1581018732
Joefish
lunamn, could you add a PR for the link with a non-expiring invite? would be great :)

1581018746
wilsonk
oh, yeah that had bitrotted a while ago...I had to build an old zig to actually get hoodie to build, but it did work once I got it built

1581018761
andrewrk
but to be fair that may have something to do with writing most of the compiler code and language design

1581018795
andrewrk
metaleap, labels

1581018800
lunamn
Joefish: the invite is set to never expire

1581018817
Joefish
huh..

1581018836
metaleap
andrewrk thought shakesoda meant the `:` in while

1581018864
andrewrk
metaleap, oops yes I meant to tag shakesoda

1581019027
companion_cube
soon zig will have more language servers than rust

1581019034
wilsonk
metaleap: not sure if you also saw this

1581019066
metaleap
to the

1581019251
shakesoda
andrewrk: i see

1581019308
metaleap
wilsonk i wrote my own go "lsp-like" for vscode (before LSP was really devised/published much) because their go-ext sucked so bad back then. once i'm infatuated with "my next decade's fav non-work / hobby lang", i always ensure top tooling tweakable / extendable / fixable at a thought's notice. if i had to dig into some 3rd party code the momentum would already be lost and the usecase dismissed by the inner sluggish-animal lizard brain

1581019371
metaleap
but thx for the links nonetheless because for the part of actually analyzing those fat -fdump-analysis jsons soon, i'll have to look around if and how others have done it

1581019414
wilsonk
ah, ok no problems...just mentioning things. I understand your preferences with regards to this, as well

1581019415
metaleap
(will see how smart it can get while staying at ast level, not much i'm afraid unless type-inferencing)

1581019444
metaleap
yeah as i said might come in handy soon for sure so thx

1581020989
jaredmm
Do you need to build LLVM in debug mode to build the Zig compiler in debug mode?

1581021676
andrewrk
jaredmm, on posix: no, in fact the recommended debug build of zig is with release mode llvm

1581021680
andrewrk
on windows: unfortunately yes

1581021972
akavel
Hi! I need to watch stderr & stdout of a child process separately, immediately reacting to any output, differently for each descriptor

1581021986
akavel
Can I do that in Zig? If yes, how?

1581022004
akavel
Should I use event.Loop for this somehow? If yes, how? I couldn't find any guide :/

1581022053
akavel
(I'm a complete noob)

1581022075
andrewrk
akavel, the API does not handle this case gracefully yet. i'm working on async i/o which helps a lot

1581022113
andrewrk
with status quo you'll have to use the "pipe" option for each stream, and poll() to find out which one to read from

1581022144
akavel
will this poll work on Windows?

1581022146
andrewrk
in summary, if you find a tutorial for how to do it in C, it will be the same in Zig right now, until the API is improved

1581022152
jaredmm
andrewrk, thanks, that's what I thought. I was having problems building llvm on Windows and the errors told me release mode wouldn't work, but I wanted to double check before I tried to figure the LLVM build out.

1581022189
andrewrk
akavel, no; there is no graceful cross platform API to handle this yet

1581022237
akavel
is there an issue I can subscribe to track progress on this front?

1581022351
akavel
also, IIUC some work on IOCP seems already started? at what state it is? would it be much work if I wanted to try extending child process to support it?

1581022390
andrewrk


1581022419
andrewrk
I have a branch I will be pushing later today that takes a big step in this direction

1581022518
akavel
@andrewrk Thanks for the link! Subscribed. Will you mention some details in a comment in #938 after doing this push?

1581022530
andrewrk
yes

1581022568
akavel
Ok, cool, I'll read through. Still, is there any guide or example of event.Loop usage somewhere? in zig repo or third-party?

1581022613
akavel
some test?

1581022703
andrewrk
event.Loop is an implementation detail; no need to use it directly

1581022768
akavel
oh; hm, so I must be missing/misunderstanding something :/

1581022781
akavel
I'm coming from Go, with C/C++/Asm background

1581022801
andrewrk
what you're missing is documentation, and a working implementation

1581022847
andrewrk
what I'm describing is currently vaporware

1581022859
akavel
oh

1581022926
akavel
In Go, I can do "select{}" on channels; is async/await and event.Loop somehow going to provide a similar mechanism? or is it something completely different?

1581022998
mq32
akavel, it's completly different

1581023033
mq32
async/await is not for channels, but you describe "inherent" concurrency as in "i don't care in what order the stuff is executed, but please be done 'here'"

1581023063
andrewrk
zig has channels in userland: std.event.Channel

1581023069
andrewrk
select() isn't implemented yet but it will be

1581023098
andrewrk
akavel, check out

1581023114
andrewrk
go's runtime has zig's beat, but not for long ;)

1581023162
andrewrk
`async foo();` in zig using evented I/O mode can be thought of as equivalent to `go foo();` in Go. But instead of being forced to use a channel, you can get the return value with `await`

1581023216
andrewrk
also when I say "zig's runtime" I mean the event loop written into the standard library, which is optional, and can be swapped for your own, and can be implemented on freestanding targets

1581023230
akavel
Will there be something like `select { await foo, await bar }` available ?

1581023277
andrewrk
it will be a userland function that operates on std.event.Channel

1581023313
pixelherodev
There a good tutorialy article on Zig async?

1581023322
pixelherodev
Suddenly discovered a use for it

1581023352
andrewrk


1581023365
akavel
@andrewrk Ok, thanks, so I assume I'll wait on #938 until I see mention of this stuff (incl. `select`) being done (?)

1581023429
andrewrk
that sounds reasonable. async std will be a big focus for me for the rest of the release cycle

1581023534
seoushi
is this compiler bug known or should I submit an issue?

1581023564
mq32
i'm still not safe on the semantics of async (in terms of how the compiler is actually doing the async)

1581023582
akavel
One more, completely unrelated question: on Windows, in C, I can link to a DLL library if I only have a .def file describing it; can I do it in Zig somehow?

1581023598
mq32
so: where is a suspension point (which is clear from the docs) but more important: where does it suspend to?

1581023645
mq32
akavel, you can create def files from DLL files via implib

1581023678
akavel
mq32 uh, I see my question is unclear:

1581023701
akavel
I want to write a Zig app that links to a libfoobar.def

1581023718
akavel
can I do this? if yes, how?

1581023753
andrewrk
akavel, --object libfoobar.def

1581023761
fengb
@suspend dumps the raw frame somewhere that needs to be @resume. await will suspend and assume the suspend will resume somewhere else in the code (like await file io)

1581023801
akavel
cool, thanks! is there some similar mechanism that will work on Linux too? can .def files be made for .so libraries?

1581023840
fengb
Iâ€™m not sure why I wrote @suspend and @resume

1581023890
andrewrk
akavel, on linux you @cImport a .h file or have pre-made .zig file with extern fn definitions

1581023946
akavel
andrewrk: on Windows, can I pass the `--object libfoobar.def` somehow as part of build.zig?

1581023991
andrewrk
addObjectFile

1581024009
akavel
andrewrk: cool, thanks!

1581024056
seoushi
found this

1581025289
companion_cube
andrewrk: have you looked at mopidy?

1581025318
andrewrk
yes

1581025340
andrewrk
mpd protocol is hopeless

1581025362
companion_cube
mopidy seems to use something different, and it has tons of plugins

1581025376
companion_cube
(like, at last, I can listen to spotify without the electron monstruosity)

1581025993
andrewrk
I'm postponing the stream today. I'm late getting to the gym

1581026050
betawaffle
until when?

1581026102
andrewrk
same time, tomorrow

1581026107
betawaffle
ah, ok

1581026114
andrewrk
if you miss it you can catch the upload later

1581027687
andrewrk
oh wow. spot the fail:

1581027689
andrewrk
mikdusan, ^

1581027700
andrewrk
(not related to what you're working on, just thought you might find this interesting)

1581027711
andrewrk
hint: zig's * vs [*] would have caught this

1581027738
andrewrk
it's a wonder any async functions work at all

1581028048
mikdusan
looping for the fun of it :)

1581028079
BaroqueLarouche
whoups

1581028101
fengb
Hmm would that fix one of my bug reports? :P

1581028147
andrewrk
possibly more than one

1581028198
jaredmm
Anyone have a Windows debug build of llvm sitting around? Apparently this machine's 12GB are not enough to link it.

1581029801
TheLemonMan
andrewrk, ping

1581029964
andrewrk
sorry I'm about to head out

1581030016
forgot-password
Has the c-string syntax, like `c"foo"`, been removed?

1581030020
TheLemonMan
np, I think we have the first miscompilation of the llvm-10 branch heh

1581030177
metaleap
forgot-password: yes

1581030268
geemili36
Hello

1581030310
geemili36
I'm thinking of trying to take on issue 4311 (

1581030488
andrewrk


1581030520
andrewrk
TheLemonMan, I did successfully run the full test suite with a debug build of llvm10. release/10.x which was at 2d9954dd8244c7a9d6a1e160fcbb22fe2b9b514f

1581030531
andrewrk
bye! afk

1581030968
fengb
Theyâ€™ll run Electron before they run Zig ðŸ™ƒ

1581031163
companion_cube
mikdusan: boot would be too short to notice the logo

