1587255139
pixelherodev
Using buffered stdio is almost always a good idea

1587258827
jwmerrill
I've been working my way through "Crafting Interpreters" in Zig, and I'm wondering if there's a recommended way to do "Struct Inheritance" as described here

1587258898
jwmerrill
I've been referencing this nice implementation, which handles this situation with a struct that has a union as a field

1587258915
fengb
Ah yeah I think unions are your best bet

1587258924
fengb
Specifically extern or packed

1587258955
jwmerrill
That seems to work out pretty well, but I think it means that the union will always take up enough space for the largest kind of Obj. I think the "Struct Inheritance" way lets different kinds of objects take up different amounts of space.

1587258987
fengb
There’s a trick to do it without using up the space

1587259017
fengb
By passing around just the pointer, it doesn’t take up any additional space

1587259037
fengb
And it’s “safe” if you only access the active field

1587259058
jwmerrill
That makes sense to me, but it means there's one more level of pointer indirection than there is in the C implementation

1587259069
fengb
There’s a few C structs that do this natively. Sockets I think

1587259144
fengb
The other way is to clone the fields

1587259176
fengb
And make sure the fields corresponds to the “base” one-to-one

1587259216
fengb
Oh I think you can do it this recommended way too

1587259273
fengb
Just have to be defined as extern. Normal structs in Zig don’t have well defined memory

1587259403
jwmerril1
That makes sense. So far I've used the same representation as in the zox project I linked above, but I might try switching to a structure that's more like the book using extern and see how it goes.

1587260061
fengb
There’s also this issue which makes it a little nicer:

1587260087
fengb
I’m mostly hand waving since I haven’t read crafting interpreters yet :P

1587260319
foobles
I am so glad the const sytax debate is over :v

1587260331
foobles
s/sytax/syntax

1587260362
mikdusan
nice video foobles  :)

1587260442
foobles
hah, thanks :)

1587260444
foobles
i had fun with that

1587260450
foobles
glad you like it

1587260922
oats
foobles: hah, that's silly

1587260924
oats
love it

1587260986
foobles
:^)

1587261000
foobles
looks like the next thing to argue about is for-loop syntax hehe

1587261007
companion_cube
so, stupid question: how much of tcc could be reused to get a simple backend for zig?

1587261091
oats
foobles: which issue is that

1587261145
foobles
oats

1587261153
mikdusan
companion_cube: what part is of interest, just the x86 code generator part?

1587261493
companion_cube
yeah I think so

1587262846
GreaseMonkey
alright,

1587262929
GreaseMonkey
went from 907 lines down to 848 lines, so i've had some really productive commits there

1587264869
GreaseMonkey
...OK, how does a deflate decompressor written in Zig manage to use less RAM than GNU's implementation of "yes"?

1587265135
oats
well, `yes` is yeeting bytes like a tree chipper

1587265181
mikdusan
foobles: here's what I came up with for #1332 ; zig build test passes on local macos,linux:

1587265183
mikdusan


1587265811
daurnimator
marijnfs: heh; I added the bloom filter to the std lib. I hope you find it useful!

1587266025
daurnimator
grr. anyone else having the CRLF issues with SoftFloat?

1587266036
daurnimator
I thought we fixed those :(

1587266197
daurnimator


1587266405
mikdusan
git ls-files --eol master -- deps/SoftFloat-3e

1587266434
daurnimator
GreaseMonkey: I saw your deflate_ring.zig I think you reimplemented part of std.LinearFifo

1587266453
daurnimator
mikdusan: no output

1587266701
mikdusan
works for me. maybe you missed the `--` ? anyway only 2 files in entire repo with `eol=crlf` are: deps/SoftFloat-3e/COPYING.txt, deps/SoftFloat-3e/README.txt . are those same ones giving you issue?

1587266782
daurnimator
mikdusan: oh whoops, I ran it from inside of my build/ dir

1587266821
daurnimator
mikdusan:

1587266843
daurnimator
and yes; those are the two files giving me issues

1587267003
GreaseMonkey
daurnimator: perhaps, but i do need a 32,768-entry sliding window for LZSS

1587267041
daurnimator
GreaseMonkey: to me that sounds like a non-sequitur. could you elaborate?

1587267186
GreaseMonkey
perhaps "ring" was the wrong word, its primary purpose is not to give a FIFO, but to allow one to either add bytes on the end, or copy a byte a certain number of steps from the end repeatedly

1587267220
daurnimator
GreaseMonkey: isn't a sliding window a ring?

1587267231
foobles
mikdusan why dont you use `ir_analyze_optional_payload_value` when they are runtime?

1587267233
GreaseMonkey
in this case it is

1587267233
daurnimator
well not really

1587267240
daurnimator
GreaseMonkey: anyway; use std.LinearFifo :0

1587267250
daurnimator
GreaseMonkey: I'm cloning your repo now. How do I test it?

1587267285
GreaseMonkey
daurnimator: feed in a .gz file (a .tar.gz file will be fine) and see if it manages to get to the end without crashing or failing

1587267311
GreaseMonkey
i know it'll need unit tests, i'll get around to that at some point

1587267334
GreaseMonkey
...it'll also need some decent error codes instead of just spitting out error.Failed whenever it's unhappy

1587267337
mikdusan
foobles: I ran into a strange bug that manifests with tests 2,4 here:

1587267339
mikdusan
37b0b7dfba70adcc81247946b62cd17a

1587267343
mikdusan


1587267360
mikdusan
"attempt to use null" or somesuch error, iirc, from codegen.

1587267390
foobles
huh

1587267391
foobles
super weird

1587267395
mikdusan
only when using ir_analyze_optional_payload_value

1587267405
foobles
i wonder if it uses slightly different settings

1587267423
foobles
because it literally just calls ir_get_ref, unwrap, deref

1587267431
daurnimator
GreaseMonkey: feed how? `zig build run` seems to immediately exit

1587267508
GreaseMonkey
zig build run path/to/your/whatever.gz

1587267840
mikdusan
daurnimator: don't know why you're hitting that crlf issue. it's almost like when you do something, some special .txt overrides come in and that's creating a difference

1587267867
GreaseMonkey
...taking a look at LinearFifo, my use case requires reading stuff from behind the read index

1587267882
GreaseMonkey
i can create a LinearFifo just fine, but... yeah

1587267958
GreaseMonkey
so, thanks for your suggestion, but it's not the right thing to use

1587268025
GreaseMonkey
i technically

1587268120
mikdusan
daurnimator: fwiw, the i=crlf w=crlw mean what your index/workdir has for the files and that paste looks the same as my output

1587268570
daurnimator
GreaseMonkey: PR sent with what I meant

1587268678
GreaseMonkey
alright

1587269209
GreaseMonkey
is there a standard on how to name things in Zig?

1587269239
GreaseMonkey
from what i can see, variables are lower_snake_case, functions are lowerCamelCase, and types tend to be UpperCamelCase

1587269242
GreaseMonkey
or at least structs anyway

1587269245
mikdusan


1587269280
GreaseMonkey
awesome

1587269297
GreaseMonkey
i've got some camels i need to attack with a snake

1587270672
daurnimator
GreaseMonkey: I think you have a weird set of terminology here

1587270681
daurnimator
GreaseMonkey: "in" the fifo here is "in" the window

1587270955
GreaseMonkey
daurnimator: the way that i have it set up, the read index moves along as you grab bytes from the buffer. i only ever add bytes to the buffer once the read index has reached the write index. however, i refer to stuff which typically tends to be

1587271037
GreaseMonkey
so basically: 00 * 01 02 03 |readindexgoeshere| 04 05 06 |writeindexgoeshere| <-- i can still read the byte marked by * and onwards

1587271052
GreaseMonkey
or actually any byte in there as long as it's not more than 32KB ago

1587271230
daurnimator
GreaseMonkey: ah okay; I confused what `*` and the read index is. Either way LinearFifo is the right choice :)

1587271241
daurnimator
I'll fix the PR

1587271245
GreaseMonkey
have you attempted to run the program

1587271256
daurnimator
yeah. but only on a small archive.

1587271267
daurnimator
so I probably never went over either limit

1587271296
GreaseMonkey
it'd have to be preeeeetty small to not be able to screw up there

1587271368
GreaseMonkey
to be blunt, i'd wager that every single call to copyPastBytes is going to read behind the read index

1587271728
foobles
mikdusan are you going to submit your PR?

1587272954
StateOff
Does anyone have a good sample for fmt usage?

1587273201
StateOff
never mind. bufPrint is what I needed.

1587274927
pixelherodev
andrewrk, would you prefer if I didn't tag my backported repo with e.g. 0.6.1 to avoid giving the impression of official releases?

1587274979
daurnimator
pixelherodev: my first question is: when/why do you tag?

1587274993
daurnimator
time based?

1587274996
pixelherodev
Yeah

1587275003
pixelherodev
And mostly because it makes it easier to maintain

1587275028
pixelherodev
If I version it weekly, and then I make a mistake, I can reset to the latest tag and then have less than a week's worth of commits to deal with

1587283024
daurnimator
I see

1587283120
StateOff
For what it's worth ... my first zig game progress:

1587283610
pixelherodev
daurnimator, seconded

1587283736
andrewrk
pixelherodev, I don't care what you do with a fork!

1587283829
pixelherodev
Alright thanks :)

1587284068
sanaris
Guys, where should LLD_

1587284081
sanaris
LLD_LIBRARY:FILEPATH point to??

1587284132
sanaris
I set up for CLang compiler and it was assigned properly like LLD_LLDCOFF_LIB:FILEPATH=/usr/lib/llvm-10/lib/liblldCOFF.a

1587284159
andrewrk
sanaris, if you are manually configuring this value, then you are already overcomplicating the build process

1587284160
sanaris
but variable LLD_LIBRARY exists unfilled

1587284175
andrewrk
let's start over. what is the first problem you run into when you follow the README.md steps?

1587284196
sanaris
zig0 does not link against Clang, what looks like Cmake issue

1587284211
andrewrk
please send link to paste with error output

1587284402
sanaris


1587284938
pixelherodev
andrewrk, Comptime semantics is basically just executing code within the compiler while emulating target quirks, correct?

1587284984
andrewrk
sanaris, please see

1587284991
andrewrk
it is an upstream issue with known workarounds

1587285034
andrewrk
pixelherodev, sure basically. the devil is in the details

1587285056
sanaris
okay, basically my fault to not use my source-based distro

1587285253
pixelherodev
Right, but a thought occurred

1587285261
pixelherodev
If that's the case, why is CPython performance the goal?

1587285273
pixelherodev
Shouldn't it be possible to vastly outmatch it?

1587285304
pixelherodev
I think it's obvious where I'm going with this

1587285306
pixelherodev
JIT!

1587285342
pixelherodev
As long as the translator is aware of the target's quirks, it should be able to work without issue and with great performance

1587285431
andrewrk
sanaris, I am sorry, unfortunately llvm upstream has made it impossible for zig to have a configuration that works on all systems

1587285449
pixelherodev
Can confirm that

1587285455
pixelherodev
I can't build zig on my laptop anymore

1587285460
pixelherodev
LLD is installing weirdly

1587285489
pixelherodev
Your best bet is likely building a static Zig compiler within a chroot and then extracting it to the base system

1587285491
andrewrk
pixelherodev, I think you're right about JIT and performance. I think that would require more personell than zig has available

1587285498
pixelherodev
For most platforms sure

1587285505
pixelherodev
But this is about performance, not features or compatibility

1587285523
pixelherodev
Which means it's fine if some platforms support it, as long as there's also an interpreter and the behavior of both can be proven to be identical

1587285546
andrewrk
I think CPython perf is a reasonable goal and performance baseline for users, which we should aim for. JIT would be possible, but more complicated and too ambitious, and not enough benefit for the cost

1587285599
pixelherodev
What would be the cost? Maintenance?

1587285603
andrewrk
of course, if it can be shown that it would be reasonable to integrate, in a way that did not introduce bugs or instability, then it would be welcome

1587285606
andrewrk
yes

1587285611
pixelherodev
Yeah, that's what I thought

1587285612
sanaris
Does Zig has functinal features like REPL in Scheme?

1587285616
pixelherodev
I'd be willing to maintain it at least for x64

1587285633
pixelherodev
I'm finishing up a GNU Lightning-esque library for Zig anyways

1587285640
andrewrk
it might be more complicated than you are considering. consider for example inline while loops

1587285655
andrewrk
there is comptime code mixed with emitting runtime instructions here

1587285668
andrewrk
or maybe I am lacking imagination

1587285675
pixelherodev
I'm fairly certain it can be done

1587285678
andrewrk
which I will fully admit as a possibility

1587285679
pixelherodev
One simple reason:

1587285692
pixelherodev
`try self.emitter.Call(...runtime.emit, .{args});`

1587285724
pixelherodev
The only real problem there is it cannot be done without a defined ABI for all functions the generated code needs to invoke

1587285758
pixelherodev
But these are all solvable problems

1587285789
pixelherodev
I'm equally certain that I'm underestimating difficulty and that you are overestimating it :)

1587289221
marijnfs
hmm having trouble debugging a segfault. The crash is in a c-library and is called from a thread, but the stacktrace doesn't show the call from zig

1587289262
marijnfs
actually I guess its because the library itself has threads and doesn't crash at the callpoint directly, annoying

1587289480
pixelherodev
IMO threading is never worth it.

1587289498
pixelherodev
and before anyone says I should try Rust: it's not a language thing.

1587289510
ikskuh
pixelherodev, threading depends on the job you do :D

1587289513
pixelherodev
(though I do plan on looking into Rust at some point)

1587289528
pixelherodev
ikskuh, for sure, but in most cases the benefit isn't worth the cost

1587289549
pixelherodev
I prefer applications to not scale

1587289557
ifreund
in many cases yes, but there definitely valid use cases

1587289569
pixelherodev
because when multiple applications try stealing all available resources, it just makes me uninstall all of them

1587289577
pixelherodev
ifreund, I don't disagree

1587289588
pixelherodev
I just think that most cases where they're used they shouldn't be

1587289598
pixelherodev
and there a number of places where they should that they aren't

1587289604
ikskuh
hm

1587289609
ikskuh
can you elaborate this?

1587289621
ikskuh
i usually use threading to speed stuff up when there is no other possibility left

1587289631
ikskuh
or to make stuff that is inherently concurrent, concurrent

1587289637
pixelherodev
For starters, I disagree with that premise

1587289643
pixelherodev
There is no case where threading is the only option for performance

1587289648
pixelherodev
which leads to my next point

1587289662
pixelherodev
When people use threading to improve performance, they do it at the expense of proper profiling and optimization

1587289671
pixelherodev
(speaking in the general case of course)

1587289714
pixelherodev
One place I've used threading in the past was for a plugin-driven application framework

1587289727
pixelherodev
For performance reasons, I had each plugin run in a thread

1587289752
pixelherodev
I ended up making it faster by removing threading, simplifying the framework, and spending a few hours digging through profiling info

1587289761
ikskuh
<pixelherodev> There is no case where threading is the only option for performance

1587289772
ikskuh
what if i told you that i utilize my cpu in some projects with 120%?

1587289777
ikskuh
a single cpu core

1587289785
pixelherodev
I would say "How much time have you spent in profilers?"

1587289786
ikskuh
(so having an average of 1.2 instructions per cycle)

1587289791
pixelherodev
Have you tried shifting algorithms?

1587289798
pixelherodev
Adjusting data structures?

1587289802
ikskuh
yes ;)

1587289810
marijnfs
i'm doing networking stuff, so threading is quite needed there

1587289812
ikskuh
there was just no place anymore on a single core to speed stuff up

1587289818
ikskuh
marijnfs: not really

1587289836
ikskuh
networking isn't really a thing for threading, using poll() makes your code way more robust

1587289846
ikskuh
i once used one thread per client as well

1587289852
ikskuh
but in the end, this just does not scale

1587289879
pixelherodev
I don't think threading is never a good idea

1587289884
pixelherodev
I think in the vast majority of cases it isn't

1587289894
pixelherodev
Multiprocess > multithread

1587289906
pixelherodev
e.g. compilation

1587289918
ikskuh
depends on if you need shared memory

1587289935
pixelherodev
I'd rather run four copies of a compiler than to have a single compiler use four threads

1587289954
ikskuh
depends

1587289961
ikskuh
for C/C++ that really hurts performance

1587289967
ifreund
pixelherodev: did you happen to do AoC this year? you woulda hated my solution to one of the problems (it was spinning up 50 threads)

1587289985
ikskuh
because compilers could cache the headers and precompiled headers could be a thing of the past

1587290018
pixelherodev
Sure but

1587290023
pixelherodev
performance of the one process isn't my concern

1587290035
pixelherodev
my concern as a user is that no one process is consuming all my resources

1587290041
pixelherodev
whether that's cores, RAM, bandwidth, or anything else

1587290057
ikskuh
it depends

1587290075
ikskuh
it's really a matter of "i want throughput" or "i want good latency" on my system

1587290113
ikskuh
i would happily spend 30 seconds of "blocking system" when i could use "3 minutes of non-blocking system"

1587290236
shakesoda
there certainly are cases where threading is pretty much all you can do anymore

1587290332
shakesoda
I end up in tons of situations where you'd be a fool not to thread it in games + graphics

1587290403
ikskuh
oh yeah

1587290413
ikskuh
good example is Doom Eternal i heard

1587290427
ikskuh
they have such good thread/cpu utilization

1587290439
marijnfs
so would you put everything in one large event loop?

1587290448
marijnfs
sounds quite unwieldy

1587290535
ikskuh
marijnfs: if you write a networking library, it's the saner way anyways

1587290546
ikskuh
to have your caller do the dispatching calls

1587290566
ikskuh
you lose a bit of latency, but for most cases, it's way more convenient

1587290732
marijnfs
can lld do something like find the point where a variable originated across threads?

1587290737
marijnfs
i guess i need valgrind for that

1587290800
ikskuh
what do you mean?

1587290811
ikskuh
you have to use c allocator for valgrind to work

1587291372
marijnfs
I see

1587291399
marijnfs
Its probably better to just review my code, must be doing something stupid

1587293416
Snektron
<ifreund "pixelherodev: did you happen to "> Which day?

1587293473
Snektron
So by the looks of it, both clang and gcc cannot generate code with dsp instructions for arm v7e-m, but LLVM and Zig can

1587293475
Snektron
Nice

1587293742
ifreund
Snektron: day 23

1587293776
ifreund
i know threads weren't the best choice, but i was learning rust and wanted to abuse the "fearless concurrency"

1587293875
Snektron
oh, that one

1587293912
Snektron
I just used single loop yea

1587294143
ikskuh
andrewrk, i could just hug you atm ☺️

1587294163
ikskuh
crosscompiling with zig is just a joy and the toolchain i'm building is now available on windows and linux :)

1587294173
ikskuh
with zero pain :)

1587294288
Xavi92
Quick question: if `const a = @import()` works on a local scope, why `usingnamespace @import()` doesn't? Isn't it possible by design?

1587294319
Snektron
doesn't it?

1587294341
ikskuh
i think atm it isn't possible by-design

1587294353
ikskuh
and i don't really think it's needed

1587294366
ikskuh
i use usingnamespace only for mixins

1587294756
Xavi92
Not that I need it. I was playing around with the language and noticed placing into a local scope caused a compile error

1587296229
fengb
marijnfs: that’s how nodejs does it and it has one of the most efficient models for non CPU bound concurrency

1587298717
daurnimator
(repeating myself): marijnfs: I added the bloom filter to the std lib. I hope you find it useful!

1587302762
Sphax
Hello. I'm confused why this segfaults

1587303141
mikdusan
Sphax: line 16. `result` is stack and you're letting addr into it escape

1587303425
mikdusan
this pattern might work better if you switched to a Bar.init with self; maybe this:

1587303427
mikdusan


1587303452
mikdusan
this way Bar memory is already allocated before init

1587303756
ifreund
^ this is the pattern I use pretty much everywhere

1587304106
fengb
Hmm why? With result location, returning the created bar directly would have the same semantics

1587304170
mikdusan
fengb: then how to init aggregate that wants pointer to arena

1587304204
fengb
Oh I didn’t notice that part -_-

1587304326
fengb
I feel like that’s kicking the can down the road. If you copy the Bar instance then it’ll start breaking again

1587304395
mikdusan
correct. bar is on stack but it doesn't have to be. bar can just as easily be heap, and still the same init is used.

1587304443
mikdusan
callsite decides :)

1587305573
Sphax
mikdusan: oh right, I didn't even think of that. Thanks for your help, I'll take a look at your gist

1587308382
ikskuh
hey

1587308399
ikskuh
what do you think, would it be useful to establish the topic/tag "zig-package" on github?

1587308399
ikskuh


1587308406
ikskuh
for zig libraries/packages?

1587308558
ifreund
probably a good idea, i've been kindof assuming a few public package registries will spring up once we have a package manager

1587308590
ikskuh
yeah

1587308605
ikskuh
afaik there's the GitHub API which we could utilize for this

1587308617
ikskuh
so using git+github api for package search and similar

1587310024
ifreund
we definitely would need a way to support packages hosted elsewhere as well too

1587310039
ikskuh
yeah true

1587310056
ikskuh
but it would be a way to search packages in

1587310060
ikskuh
nothing about the others :D

1587310093
ifreund
definitely a good first step

1587310128
ikskuh
i just added my two packages in the path

1587310137
ikskuh
also going to add another one later :)

1587310144
ikskuh
zig-serial will help with serial port support :)

1587310152
ifreund
i don't have any packages yet :/

1587310921
ikskuh
ifreund: then write some!

1587310992
ifreund
spending all my time on my compositor right now, I do plan on writing a zig-wayland package at some point though

1587311015
ifreund
probably just wrap libwayland at first, only going to reimplement in zig if i have a lot of time on my hands

1587312280
pmwhite
I have a zig windowing module that I've been using. Until the package manager comes along, and perhaps after, I'm keeping all my programs that use it in the same repository, called "wayland-stuff". The idea is also to develop ui widgets for each program, so I'm especially appreciating the low friction of the monorepo approach.

1587312371
ifreund
pmwhite: link? i'm always interested in wayland stuff

1587315564
pmwhite


1587316020
ifreund
nice!

1587316185
pmwhite
window.zig is the window setup code. I bought the Wayland book when I started working on that, so that's where my understanding of the protocol primarily comes from.

1587316336
ifreund
cool, i haven't written a client in zig yet, but almost certainly will soon

1587316388
ifreund
kinda waiting on #1717 functions in zig so i can make a nice wrapper for libwayland-client first

1587316421
ifreund
may try to wrap wlroots someday, but i'd rather wait for it to get more stable first

1587316501
pmwhite
Ah, that's right, you're working on a compiler. I guess you have the opposite side of the problem than I do.

1587316677
ifreund
yeah

1587316693
ifreund
it's almost to the point where i'm willing to use it as a daily driver

1587317268
pmwhite
I'm the early adopter type, so I may be willing to give it a try.

1587317310
pmwhite
You were the one that uses kakoune, right? I decided to give it another try, and this time it might stick.

1587317368
ifreund
yep that's me, glad you're enjoying it

1587317482
pmwhite
Rather off-topic to this channel, but I stumbled upon this issue -

1587318092
ifreund
pmwhite: i haven't dug into how it works too much, but I can confirm it works in markdown

1587318122
ifreund
(you can read the code for it here:

1587318164
pmwhite
So your able to write a markdown file with, say, embedded C snippets, and get the C snippets to get highlighted?

1587318239
ifreund
yeah

1587318276
ifreund


1587318310
pmwhite
I read that file actually. How do I specify the language to highlight - I was trying ```c but all I get is a file that has no syntax highlighting.

1587318323
ikskuh
success of the day:

1587318324
TheLemonMan
meowray, if you're still in review mood there's also D78011

1587318364
TheLemonMan
`.read = true, .write = true` eh that's some special kind of ugly

1587318398
TheLemonMan
I wonder if read = write = false works

1587318403
ifreund
pmwhite: i'm running the master branch of kakoune, might have something to do with it? anyhow we should probably move to #kakoune

1587318429
pmwhite
true...

1587318498
ikskuh
TheLemonMan: not my decision :D

1587318638
TheLemonMan
it's (probably) a low hanging fruit for new contributors ;)

1587318676
ikskuh
i was confused first, but it's better than some xor of flags

1587318684
ikskuh
especially as we don't have xor for enums

1587318751
TheLemonMan
what's wrong with `enum { Read, Write, ReadWrite }` ?

1587318788
fengb
What if I want read = false, write = false????

1587318850
ikskuh
TheLemonMan: there are more flags :D

1587318858
TheLemonMan
that's when you fork Zig!

1587318882
ikskuh


1587318889
ikskuh


1587318902
TheLemonMan
don't you think I know that there are other flags?

1587318906
ikskuh
:D

1587318914
ikskuh
one cannot know everything

1587318986
TheLemonMan
cool story

1587319028
ikskuh
what would be your solution to such things?

1587319036
ikskuh
it's better than bitfields

1587319107
TheLemonMan
`struct { how: enum { Read, Write, ReadWrite }, <other flags go here> }`

1587319115
ikskuh
hm

1587319256
mikdusan
`.{ .how = .ReadWrite, .lock = .Advisory }` vs. not_supported_syntax `.{ .read, .write, .lock = .Advisory }`

1587319570
ikskuh
can i run tests with wine automatically?

1587319586
mikdusan
there's a prefix option to execution iirc

1587319618
mikdusan
--test-name-prefix

1587319643
ikskuh
--test-cmd wine --test-cmd-bin

1587319695
mikdusan
some combo should work. we already have qemu used on CI

1587319716
ikskuh
yeah it works now :)

1587319820
ikskuh
whoppa

1587319829
ikskuh
i ran into .OBJECT_NAME_INVALID => unreachable,

1587320233
ikskuh
hm

1587320535
ikskuh
anyone here on native windows?

1587320713
BaroqueLarouche
Me

1587320866
ikskuh
care for a little bit of help? Oh, and do you have, by chance, a serial port on your computer? :D

1587320903
BaroqueLarouche
no serial port :(

1587320941
ikskuh
damn :D

1587320950
ikskuh
wine fails to open it with NtCreateFile

1587320958
ikskuh
and it errors with unreachable

1587320963
fengb
Who has a serial port?

1587321050
ikskuh
people who do embedded devices

1587321084
fengb
Embedded windows?

1587321104
ikskuh
any embedded device

1587321114
ikskuh
it's the easiest form of communication

1587321118
ikskuh
"plug it in and it works"

1587321125
ikskuh
no other protocol has this wonderful feature anymore

1587321258
ikskuh
you can also interface your RPI with the serial port

1587321275
ikskuh
(and pretty much any linux/unix system, if the corresponding getty is enabed)

1587321290
fengb
I got this universal thingy. It’s called serial too 🙃

1587321306
ikskuh
fengb: USB sucks

1587321308
ikskuh
really.

1587321321
ikskuh
from a programmers point of view, USB is hell

1587321340
ikskuh
USB is on the same horribleness than Bluetooth

1587321367
mikdusan
aren't there still variables? bps=115200 data_bits=8 parity=false stop=1

1587321393
ikskuh
yes

1587321404
ikskuh
but these are usually fixed and known-beforehand

1587321410
ikskuh
or you use autobaud and just detect them ^^

1587321691
ikskuh
LOL

1587321698
ikskuh
i just remote-killed the manjaro terminal emulator

1587322008
ikskuh
and another library done:

1587322011
ikskuh
(windows not tested)

1587322939
ikskuh
okay this is definitly a bug in zig std

1587323040
TheLemonMan


1587323157
ikskuh
TheLemonMan: i have now tested it on win7

1587324267
ikskuh


1587324269
ikskuh
so, made an issue

1587324277
ikskuh
and now, off to something else :D

1587324280
ikskuh
enough coding for today

1587331131
Sphax
what's the recommended way to "enrich" errors with data ? for example a basic formatted string

1587331237
marijnfs
maybe c style?

1587331244
foobles
what do you mean?

1587331245
marijnfs
a global get_error_str func?

1587331254
foobles
that sounds really bad to me

1587331257
marijnfs
yeah

1587331278
marijnfs
normally because you deal with errors quickly, you have the data you need

1587331300
marijnfs
what kind of data would you wanna add

1587331345
marijnfs
you can still log the error you have? it's not like your code is gonna use all types of data given by the error right?

1587331352
marijnfs
something fails or not kinda

1587331357
marijnfs
from the code perspective

1587331401
foobles
Maybe not a global get_error_str, but you could have an out-parameter object containing a string

1587331411
foobles
and if the function returns an Error, check that

1587331414
foobles
for the message

1587331442
fengb
That’s how you end up with concurrency bugs

1587331445
gonz_
I've resorted to this one in a few cases when I needed to associate data with errors.

1587331459
gonz_
There is a proposal for having error unions carry data

1587331468
gonz_


1587331928
Sphax
in my use case I'm communicating with cassandra where all sorts of thing can go wrong (invalid CQL query, network problems, unavailable replicas, etc), in these cases having some context would be nice.

1587331966
gonz_
Sphax: I think the idea of having an error structure with possible null fields that are populated in case of certain errors is your best bet atm

1587332023
ifreund
hmm, trying to set up a basic github action for CI but i'm getting an error I don't get locally

1587332026
gonz_
It requires more work on your part, but it's better in the general case than having your errors not be first class errors since we interact with errors as a special construct in zig.

1587332053
ifreund
anyone have any ideas?

1587332160
Sphax
gonz_: hm do you maybe have an example ?

1587332299
gonz_
Have a structure with fields that are either some data or null, take the structure as an out parameter, have your error union as usual and decorate the structure with values corresponding to whichever error you're returning.

1587332405
gonz_
An example could be parsing errors that really need to be decorated to be useful; `ParseError` could contain `sourceSpan: ?SpanData` & `expected: ?TokenType` that will be set accordingly when an `error.ExpectingToken` is returned, but not on success.

1587332414
gonz_
(or for some other error)

1587332419
fengb
Here’s what andrewrk recommends:

1587332482
Sphax
gonz_: ah thanks, that makes sense.

1587332537
gonz_
Right, this is roughly what I'm talking about

1587332566
gonz_
It's not optimal, but it beats giving up first-class errors completely and putting errors in your tagged union returns.

1587332601
ifreund
ah figured it out, i was doing somethig dumb (a leftover from when I had just started learning zig)

1587332638
THFKA4


1587333435
Snektron
TheLemonMan, you around?

1587335325
jwmerrill
I was asking yesterday about how to implement "Struct Inheritance" as described at

1587335407
jwmerrill
Diff where I made a change from using a union based representation to using this new more struct-inheritance like pattern:

1587335833
fengb
Be careful. Zig structs don’t have defined memory

1587335874
fengb
We don’t do it now but some point in the future, the obj will no longer be guaranteed to be in the first location

1587335912
fengb
Hence my suggestion of extern, which preserves memory order

1587335974
jwmerrill
I think it doesn't actually need to be in the first position for this to work.

1587335979
oats


1587335988
oats
what's the [*c] doing in this line?

1587336061
fengb
C struct inheritance typically relies on the identifier being in the first slot so you know which type to cast to

1587336087
fengb
I’m not quite familiar with this code to know for sure though

1587337225
oats
ohh, this is a C pointer

1587337244
oats
derp, forgot to just search the reference :P

1587337255
oats
I thought it was dereffing the c namespace or something weird

