1607042304
hlolli__
I have a segfault crash, which I don't know if I'm doing some wrong or not. If I print the addresses of the struct pointers involved, what happens is that an address goes from @7ffcb3054938 to @0 from just being passed as parameter to a function.

1607042650
hlolli__
I've very shy posting the side project I'm working on, but since I'm absolutely stuck here, I was wondering if there's someone here that can spot quickly why there could be a segfault from here

1607042664
andrewrk
hlolli__, what OS are you developing on?

1607042670
hlolli__
nixos

1607042676
andrewrk
have you tried running it in valgrind?

1607042689
hlolli__
I compile to wasi32 and musl, both similar

1607042694
hlolli__
no..

1607042707
andrewrk
it might give you some clues, try that - if that comes up empty I have more suggestions

1607042717
hlolli__
ok thanks!

1607043236
andrewrk
kubkon has 3 in the oven, after that there will be 6 issues left for 0.7.1

1607044686
hlolli__
andrewrk, valgrind was a lifesaver. Turned out I was storing address to ?*AutoHashMap in a struct, changing this to ?AutoHashMap fixed it. The hashmap was probably only stored in the stack of a function.

1607046072
mla
so how do i convert an array like [5]u8 to a slice []u8 for tests / at comptime?

1607046873
mla
oh i guess arr[0..] works

1607048668
ugla
&arr should work too

1607051670
mla
ugla: good to know, yeah thats a bit cleaner

1607063499
mattnite
test

1607063511
mattnite
sweet irssi is finally set up nice

1607070301
ikskuh
heya marler8997. yeah, that was kinda my point. writing that by-hand for each interface with 100 times the same code is error prone and hard to maintain

1607072418
gonz_
marler8997: Does zigup build on latest (or even recent) zig?

1607072423
gonz_
(on Windows)

1607072457
gonz_
With my previous version I got a path error for `../ziget` even though it exists, for current master I just get an `unreachable` crash.

1607084833
g-w1
the path extension .. doesn't work on windows and even if it did work, windows support is not complete yet for zigup

1607099907
vesim
I managed to break the compiler:

1607100027
vesim
stack trace:

1607106061
marler8997
gonz_, it builds on latest zig but I haven't finished the Windows implementation...it depends on openssl (to download HTTPS) but I got a tip that on Windows I could use SChannel, since you've asked for it, maybe I'll look into finishing the windows implementation

1607106192
marler8997
gonz_ what version of windows do you use?

1607106995
plakband
Hey all, I'm experimenting with writing a zig interpreter and I have an implementation question. What's the reason for having a difference between `type` and the `TypeInfo` union? Would it not be sufficient to have every type resolve to a valid TypeInfo descriptor during compilation?

1607109235
novaskell
lazy language with i/o or bytecode/zir interpretation?

1607109283
plakband
Half-hoping to invoke Cunningham's law; I think the reason is that two values of TypeInfo can be equivalent but not equal, whereas two equivalent types are also equal (what the docs call memoized)

1607109524
plakband
novaskell: for now just lazily with io, although at the moment it doesn't do much of anything

1607109789
novaskell
as long as io doesn't become lazy it's fine

1607110496
andrewrk
hlolli__, glad to hear valgrind worked for you. the good news is this debugging trick works for C/C++ code too, so you just picked up a new skill :)

1607110520
plakband
novaskell: In what way, do you mean Haskell-style lazy IO? Or is there some interaction with lazy compilation that would change the behavior?

1607110717
novaskell
if you've resolved all lazy nodes it's fine but if you haven't it's the same with file access being non-det. I may be wrong though now that I think about it a bit more

1607111501
plakband
just to expand on my own answer, types have a bunch of properties that are not representable in the language itself (decls etc.)

1607111558
marler8997
ikskuh, yeah ok looks like we're on the same page with the issues that proposal is trying to solve

1607111632
marler8997
I made that example because in order to gauge the proposal's usefulness, the biggest thing Andres needs to be convinced is to 'see the alternative'.  So I wrote the alternative so we could see the ugliness

1607111651
marler8997
s/Andres/Andrew/   I've done that multiple times now...weird

1607111688
marler8997
However, you might be disappointed because the ugliness of DRY (don't repeat yourself) doesn't seem to be enough to warrant new language features (see

1607112528
fengb
When was the specs meeting? fomo

1607112565
marler8997
Wednesday, you can access the notes as well

1607114617
ifreund
are the spec meeting minutes posted yet?

1607115225
marler8997
ZSF has a publically available google drive, it has a meeeting minutes folder here:

1607115466
ifreund
marler8997: as far as I can tell the minutes there are for ZSF meetings not about language spec meetings

1607115535
marler8997
oh yeah I think you're right

1607115706
andrewrk
Loris linked them in the showtime letter:

1607115737
andrewrk
oh it's the same link as every week, Martin has been adding new pages to the doc

1607115821
ifreund
ahh, thanks

1607115834
ifreund
bookmarked :)

1607116064
BaroqueLarouche
It is too far stretch to add a ArrayList writer to std.io.StreamSource ?

1607116224
ifreund
huh, I have never seen StreamSource, what's that useful for?

1607116258
BaroqueLarouche
a common stream source for fixed memory buffer and file, for reader writer and seekable streams

