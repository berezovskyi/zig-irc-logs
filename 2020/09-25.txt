1600992253
justin_smith
andrewrk: right, it's a nullable pointer

1600992286
justin_smith
I'm following the design of the async stack for a lockfree variant, it uses a null pointer for the bottom of the stack

1600992367
justin_smith
the same test that atomic stack uses passes, except once every N runs a failed op near bottom of stack is mistaken for a success and then there's an NPE

1601002307
andrewrk
justin_smith, so the return type of the cmpxchg will be ??T and the outer layer represents the cmpxchg value and then the value underneath will still be optional

1601006658
justin_smith
that seems strange, but OK

1601011332
andrewrk
it's the same concept as a double pointer: **T

1601011718
justin_smith
with a double pointer there's a difference between a single deref and a double deref, but unless I'm very confused, there's no way to tell if a null from @cmpxchgWeak is a success (null on success) or a failure (returns actual value on failure, in this case it can be null)

1601013615
andrewrk
have you tried it?

1601013648
andrewrk
if (@cmpxchgWeak(...)) |optional_ptr| { // it didn't work } else { // it did work}

1601022964
haliucinas
0

1601023393
ikskuh
1

1601026460
jjsullivan1
three

1601026520
ifreund
0b100

1601027704
justin_smith
andrewrk: yeah, that's effectively what my code was doing, and I think I had the wrong explanation for my once-in-thousands-of-executions bug. I still don't have the test in a state where it fails every time.

1601055776
frmdstryr
How can I set define enum fields based on a comptime value?

1601055778
frmdstryr


1601055806
frmdstryr
Why does it attempt to access fields in a branch that is not used?

1601056595
frett27_
H7F is not a member

1601056604
frett27_
of fields

1601056653
frett27_
const fields = switch (chip) {

1601056653
frett27_
.g4 => G4F,

1601056653
frett27_
.h7 => H6F,

1601056653
frett27_
};

1601056666
ifreund
yeah, looks like you typo'ed H6F for H7F on line 25

1601056674
frmdstryr
Oh, typo, should be H7F, but it still doesn't work

1601056779
frmdstryr
It seems to eval both switch branches

1601056876
ifreund
not sure if that's supposed to work or not tbh

1601056895
ifreund
this seems like a rather roundabout way to accomplish the task though maybe I'm missing context

1601056962
frmdstryr
Trying to reuse code between different stm32 chips and the headers use different names for the same thing.

1601057014
frett27_
why don't you just define the struc depending on the arch ? using comptime ?

1601057053
frett27_
i feel the const means at "comp time",

1601057060
frett27_
?

1601057145
ifreund
frmdstryr: why not this?

1601057306
frmdstryr
ifreund: Hmm, that should work I guess

1601058099
frmdstryr
Wrapping an an anon struct works...

1601058124
ifreund
weird

1601058133
ifreund
I think you have indeed found a bug there

1601058362
frett27_
isn't that simplier ?

1601058363
frett27_
?

1601058416
ifreund
uh, mapping isn't an enum there

1601058499
frett27_
don't think this is requierd ?

1601058501
frmdstryr
The chip headers are imported from another file so repeating the full path is not ideal, also some chips use the same fields

1601058942
frett27_


1601059043
frmdstryr
Yeah that would work.

1601063145
mattnite
AlbinoDrought yoooooo

1601068155
AlbinoDrought
hi mattnite

1601068221
mattnite
how long have you been on irc?

1601068229
mattnite
for zig*

1601068243
mattnite
are you a ziguana now?

1601068852
AlbinoDrought
maybe like a week or something, but nope not yet

1601068880
AlbinoDrought
working on it though... maybe for hacktoberfest ðŸ˜Ž

1601069274
mattnite
ooh that's awesome

1601074145
andrewrk
ifreund, I'm interested to hear your experience using tdeo's opaque patch

1601074162
andrewrk
after you've had a chance to play with it for a while

1601074198
ifreund
andrewrk: for sure, I'll ping or comment on the PR or something

1601074221
ifreund
started playing with it already and it looks like it will clean things up a lot

1601074222
andrewrk
you're doing great work tdeo

1601074228
tdeo
thanks :)

1601074490
ifreund
using the PR makes zls break and I lose my semantic highlighting :(

1601074508
ifreund
first world problems I know

1601074520
tdeo
compiling zls with the patched zig fixes that

1601074524
tdeo
no changes actually needed

1601074598
ifreund
oh neat, lemme do that real quick

1601075875
ifreund
tdeo: you may have already fixed it, but I had to swap this int for a size_t on your latest commit

1601075908
tdeo
oops

1601075914
tdeo
compiled fine for me, weird

1601075930
ifreund
i'm on gcc 9.3.0

1601075951
tdeo
think i'm using clang 10

1601076109
ifreund
hmm, I'm getting a crash trying to use it, but idk if it's directly related to your changes or not

1601076146
tdeo
i think it is

1601076168
ifreund
let me push this code to a branch real quick then

1601076182
tdeo
i think i have a solution, wait

1601076245
tdeo
try adding `    opaque_type->data.unionation.resolve_status = ResolveStatusSizeKnown;` at the end of resolve_opaque_type in analyze.cpp

1601076251
tdeo
not unionation, opaque*

1601076266
tdeo
ah no that doesn't compile, sorry

1601076334
tdeo
are you trying to use it as an error union type?

1601076339
tdeo
without a pointer indirection

1601076347
tdeo
ifreund:

1601076381
ifreund
oh yeah I totally am but that's not what I wanted

1601076403
tdeo
i think that might have already been a bug

1601076407
ifreund
bet it works if I fix my broken code

1601076535
ifreund
nice, works now

1601076639
tdeo
opened #6422

1601076730
ifreund
thanks

1601076786
ifreund
here's the diff migrating my highly WIP wayland-client bindings to opaque{}

1601076879
ifreund
it's a lot cleaner, and the implementation detail of the wrapper struct with a single opaque pointer field doen't leak into the listener callbacks

1601077038
tdeo
this isn't related to the feature, but are you planning to use wl_proxy_add_dispatcher instead of wl_proxy_add_listener?

1601077061
tdeo
i'd model events as a tagged union

1601077082
ifreund
Haven't decided yet, I need to look at the details

1601077090
ifreund
just went with what I'm familiar with for now

1601077095
tdeo
makes sense

1601077737
ifreund
yeah, add_dispatcher looks promising, I think I'll have to try it out

