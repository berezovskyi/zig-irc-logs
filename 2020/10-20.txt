1603152293
kandinski
waleee-cl: I'm about to download and compile zig from github master, or is there a particualar checkpoint commit that you can recommend?

1603152367
waleee-cl
kandinski: have you tried the builds from ziglang.org first? They should (probably) work on nixos too

1603152380
waleee-cl


1603152383
kandinski
waleee-cl: right, hadn't thought of it at all

1603152423
kandinski
so these are daily?

1603152444
waleee-cl
last succesful CI-build passing all tests is my understanding

1603152457
kandinski
waleee-cl: thanks!

1603152508
DonnieWest[m]
Playing around with zig again as a programmer w/ a non-C background. Trying to run `translate-c` on a c file to mess around with stuff and getting `libxml/HTMLTree.h file not found`. Weird thing is that I have `libxml2` installed and present in `/usr/include`. Furthermore, I'm able to compile the project using the included Makefile and gcc

1603152509
DonnieWest[m]
I'm figuring this is just something silly I'm missing, so if the answer isn't super obvious I'm happy to include more details, etc

1603152714
g-w1
try exe.linkSystemLibrary("libxml2")

1603152768
kandinski
DonnieWest: or -llibxml2 if you're running it from the command line

1603152787
kandinski
DonnieWest[m]: also, sometimes the library that you link and the one you import are not called the same name

1603152853
DonnieWest[m]
`zig translate-c llibxml2 /path/to/file.c` isn't working for me. Hrm.

1603152862
DonnieWest[m]
* `zig translate-c -llibxml2 /path/to/file.c` isn't working for me. Hrm.

1603152869
DonnieWest[m]
err, `-llibxml2`

1603152984
kandinski
for instance, I installed pcre2, but I'm linking to pcre2-8 (for utf8 and ascii), so my command line switch looks like -lpcre-8 and my build line looks like exe.linkSystemLibrary("pcre2-8"), despite the fact that the zig import looks like `@cImport({@cInclude("pcre2.h");});`

1603153034
kandinski
DonnieWest[m]: I have a non-C background too, so what I'm sharing is what I learnt literally yesterday. Sorry I can't help you further.

1603153099
kandinski
try -lllibxml, without the 2

1603153142
kandinski
too many l's though

1603153248
waleee-cl


1603153256
DonnieWest[m]
Tried that, didn't work. I did poke around the Makefile though and it looks like they're calling `xml2-config --libs` and it's outputting `-lxml2` among other things

1603153267
DonnieWest[m]
Substituting that in the script and it still doesn't work. Weird.

1603153374
DonnieWest[m]
`-I/usr/include/libxml2` seems to do the trick though ala that the link shared. More errors but I'm one step closer! Thanks :)

1603153454
DonnieWest[m]
Follow up, it's both :P

1603153454
DonnieWest[m]
`-I/usr/include/libml2 -lxml2` that worked successfully.  Thanks!

1603154572
kandinski
DonnieWest[m]: this is good to know, and I'm writing this down n my notes

1603154693
DonnieWest[m]
Note: It appears I could've reverse engineered this from the Makefile. There's variables called CFLAGS and LDLIBS, which seem to be a sort of C convention. Either way, each of them are calling `xml-config` to grab different bits

1603154735
DonnieWest[m]
`xml2-config --cflags` returns the `-I/usr/include/libxml2` bits, `xml2config --libs` returns the `-lxml2` bits

1603154745
DonnieWest[m]
s/bits/parts/

1603154806
DonnieWest[m]
Turns out, Java/Javascript programmers can learn new tricks :P

1603155982
kandinski
ifreund: it turns out that pcre2 is nice enough to provide a way to pass an allocator explicitly, but I think I'll pass for now.

1603157099
kandinski
can an error have a payload? I'd like to return something like PCRE2CompilationError(<string_with_pcre2_error_message>)

1603157120
kandinski
it seems that an error set is an enum, and I want it to be a union

1603157238
kandinski
not the Error Union Type, but a Tagged Union

1603157481
kandinski
I see it's already a proposal

1603158262
ryuukk__


1603158274
ryuukk__
i still wish there was operator overloading

1603158286
ryuukk__
but i guess this will do the job, even if i hate having to type .cpy()

1603158334
ryuukk__
it's either .cpy or Vec3.zero(), both are ugly, but .cpy is shorter

1603158384
ryuukk__
i have the feeling this gonna introduce a bug, forget to call .cpy() for example

1603158485
ryuukk__
and tbh i haven't thought about how it's gonna handle cases where i'd do calculations inside parenthesis

1603158490
ryuukk__
this will be ugly af

1603158504
ryuukk__
this make me sad..

1603158559
companion_cube
is `copy` a reserved word?

1603158580
ryuukk__
if i start to make methods with different lengths, it's gonna be ugly^2

1603158662
ryuukk__
cpy, add, scl, div, sub

1603158701
companion_cube
that's the first time I hear this requirement

1603158708
companion_cube
what is it useful for?

1603158713
ryuukk__
because other languages have operator overloading

1603158725
companion_cube
hmm, maybe C++

1603158730
ryuukk__
the one that doesnt have, and follow similar naming convention is Java

1603158741
ryuukk__
wich nobody uses for math stuff

1603158742
g-w1
in haskell, all the operators make it very hard to read imo

1603158756
ryuukk__
you can say a + b is hard to read

1603158769
ryuukk__
how do matematician read formulaes without operators?

1603158773
g-w1
like >>= <=>

1603158776
g-w1
that is hard to read

1603158777
ryuukk__
cant*

1603158795
ryuukk__
they have their meaning

1603158820
companion_cube
I don't think you'll change andrew's opinion on hidden control flow

1603158824
ryuukk__
.add .scl .sub is even harder to read, AND to write

1603158824
g-w1
once you start making ur own meanings, it becomes very hard to understand

1603158830
torque
the argument as I understand it is not that a + b is hard to read, it's that it's too easy to read, which means the programmer is much less likely to actually understand it

1603158839
ryuukk__
so math should be forbidden?

1603158853
ryuukk__
it's not easy to read wth

1603158868
ryuukk__
i demonstrated yesterday once your operations are long, it becomes unreadable

1603158887
ryuukk__
if all you do is a  + b, .add is no big deal of course

1603158911
ryuukk__
i feel like, nobody here had to write math operations, therefore they are against the idea

1603158937
ryuukk__
hence nobody to comeup with that suggestion or concern, because it is forbidden

1603158957
ryuukk__
not allowing operator overloading = no games, no math libraries

1603158967
ryuukk__
it is essential for the ecosystem

1603158970
torque
it would be interesting if adamkowalski showed up when you were around. IIRC he was someone who initially bounced off of the no operator overloading as well

1603158974
companion_cube
well, unless  you want high performance

1603158982
ryuukk__
version 0.6, it's still early, but long term will pay the price

1603158990
companion_cube
for stuff like matrices or GMP, you need to be able to specify intermediate results

1603158994
companion_cube
so + takes 3 args, not 2

1603158996
torque
he was writing a machine learning framework, which as I understand it is pretty math heavy

1603159056
torque
anyway, I think the conclusion that you can't write games or math libraries without operator overloading is a very dramatic conclusion to reach

1603159073
ryuukk__
i never said that, i said it works against that idea

1603159087
ryuukk__
it is not supportive, does not empower people to write that kind of applications

1603159131
companion_cube
people do write games in java, though

1603159131
torque
I don't know how else to interpret "<ryuukk__> not allowing operator overloading = no games, no math libraries"

1603159144
ryuukk__
you'll see in the long term

1603159175
torque
I don't think you're wrong

1603159193
companion_cube
ryuukk__: in any case it's totally incompatible with zig's explicit allocators

1603159197
torque
but I think every language has its niche and if you want a language that tries to do everything and be everything, zig is not the right candidate

1603159212
companion_cube
you just can't allocate a matrix without passing the allocator

1603159238
torque
people who chose to use zig for games etc. can make their own decision about the importance of syntactic "sugar" features like operator overloading

1603159254
torque
s/chose/choose/

1603159350
g-w1
i have a feeling a common pattern will be used and eventually it will seem normal

1603167093
kandinski
I'm having trouble casting a zig string ([]const u8, as its length is only runtime known) to a c string ([c*]const u8, so I can pass it to a C library)

1603168542
jabb
slice.ptr could work i think

1603168592
kandinski
it did, thanks!

1603168602
kandinski
(I forgot to report back)

1603169655
torque
if the api is actually taking a c string and doesn't take an explicit length argument along with it, it's probably expecting it to be a null-terminated string

1603169670
kandinski
torque: thanks, pcre2 does take a length

1603169706
kandinski
it's not so much the API as the compiler that was not letting me pass anything that wasn't a c-style pointer.

1603169723
torque
most sanely designed C APIs do take a length

1603169795
kandinski
my issue now is that pcre2.h uses size_t, but zig can't find it even though I've @cIncluded limits.h, stdlib.h and inttypes.h

1603169809
kandinski
error: use of undeclared identifier 'size_t'

1603169809
kandinski
pub const PCRE2_SIZE = size_t;

1603169826
torque
hm, I thought 0-sentinel slices would implicitly cast to the c string type

1603169862
torque
I think size_t is in string.h?

1603169865
kandinski
torque: at this point I don't have a slice yet, because I'm only developing, so I have compiler-konwn strings, which are Zig arrays.

1603169869
kandinski
torque: thanks!

1603169963
kandinski
torque: string.h didn't do it either, hmm

1603169966
torque
interesting

1603170054
kandinski
this is what pcre2.h.in has to say about it:

1603170625
kandinski
this is where I'm currently at:

1603171713
kandinski
ok, fixed it by defining the size as c_int

1603171737
kandinski
now the issue is I need to pass the C library a pointer to a struct member

1603171761
kandinski
so pcre2 can write the error code, etc into my struct.

1603180185
daurnimator
kandinski: size_t should be in <stddef.h> I think?

1603188814
kandinski
daurnimator: thanks, but I tried that too and no dice

1603192716
semarie
kandinski: what is your OS ? stddef.h is a valid header (from posix point of vue) for having size_t . another is <sys/types.h>

1603193369
tundrax


1603193424
tundrax
Some thoughts from a zig/rust enthusiast. Can relate on several points.

1603193943
tundrax
Two questions I have, can someone help with?

1603193956
tundrax
1.How to loop anonymous numbered struct fields?

1603193997
tundrax
2. var declared inside struct block is not global, but local to struct?

1603194115
tundrax
*2: docs say that "Global variables may be declared inside a struct, union, or enum" - which is not correct?

1603194170
Nypsie[m]
1. Take a look at std.meta.fields()

1603194333
Nypsie[m]
2. Maybe this makes it more clear to you:

1603194361
Nypsie[m]
sorry: pub var globalField: u32 = 5*

1603194781
tundrax
Nypsie[m] thanks, switch is what I am using right now as well.

1603194814
tundrax
Struct global vars are not global for the module/file (out of struct scope) right?

1603194832
tundrax
Global to struct instances instead?

1603195066
Nypsie[m]
No, not to struct instance. That's what struct fields are for.

1603195137
tundrax
OK, so it's like static field for struct?

1603195356
Nypsie[m]
Yeah, it's accessible from anywhere

1603195469
tundrax
Thanks.

1603196172
ttb
I'm a day late to the party on the operator overloading discussion.  If I wanted to do extensive matrix math in Zig, I would put my matrix data into a separate set of text files and write a Zig parser that reads them, constructs the matrix structs, and converts the '+' in the files to add function calls.

1603196247
g-w1
whould this be at compile time

1603197977
kandinski
semarie: I'm on NixOS

1603197985
kandinski
but I could have been doing it wrong

1603198043
wilsonk
tundrax: great writeup on your 'scattered thoughts'. Quite comprehensive for a comparison to Rust. It could probably be used on the community wiki to direct Rust coders to the differences between the two languages, if you wanted to add it there  (or perhaps ask one of he maintainers?). Anyways I enjoyed reading it! :)

1603201022
ttb
g-w1 - I hadn't thought about using it that way, I was thinking that I would write the tool to read text files with matrices and do the operations once.  Then I could run it against different inputs as needed.  I don't mean to downplay the effort involved, but I think after that initial hurdle I get the same productivity with matrix manipulation as

1603201022
ttb
a language with operator overloading, minus the code readability issues.

1603202886
tundrax
wilsonk not my thoughts, this post is by another person. Anyway, I can relate to many points author talked about.

1603214269
traviss
can anyone spot whats going wrong here? this is a reduction from some benchmark code that is failing in HashMap.grow on latest master:

1603214280
traviss
code and error trace is here:

1603214361
traviss
forgive me for cross-posting to discord#zig

1603214443
traviss
not sure but it looks like the key 'Aani' is being mistakenly found in the newly grown map.

1603214563
traviss
just making sure i'm not doing something dumb before making an issue for this

1603214656
traviss
this was working a few monthis ago i believe was the last time i ran these tests.

1603218921
Sahnvour
traviss: StringHashMap accepts slices as keys, but it does not own copies of the strings, you have to allocate them yourself

1603218964
Sahnvour
in this example all your hashmap keys are slices pointing more or less to the same memory address which is reused with new contents

1603218993
Sahnvour
it happens to work for insertion up to a certain point but it's not correct

1603219082
traviss
thank you. i wondered if something like this was happening. makes perfect sense now. i forgot about allocating keys.

1603220229
tane
I had some "old" zig code using std.Buffer and std.io.readLine. All stuff is gone, where is it?

1603223983
wilsonk
tane: I think you can use const stdin = std.io.getStdIn().inStream();  and then stdin.readUntilDelimiterOrEof instead of readline. Also, perhaps you can use the new General Purpose Allocator to get a dynamic buffer  (or use an array for a static buffer)

1603224030
g-w1
is there a way to access a [*]i64 at a negative index

1603224046
tane
wilsonk, thanks for the pointers!

1603224049
g-w1
im writing zig as a library to assembly so i know where the memory is.

1603224074
g-w1
i kinda screwed up the assembly, so i want the negative index to unscrew myself up

1603224163
g-w1
actually nvm

1603224179
g-w1
i want it to be compatible with the c abi

1603231560
justin_smith
g-w1: worst case you can cast to integer and back, but it seems weird to end up in that position

1603231608
g-w1
yeah. i messed up my assembly (had the stack backwards in my head) and figured it would be easier to fix it from zig, but i can just fix it in assembly with a little more work.

1603234193
ikskuh
Nypsie[m], mattnite, aurame and me did a thing:

1603234210
ikskuh
Please contribute your packages to the main repository so other ziguanas can find and use them!

1603237477
kandinski
Is there a way to reserve a space in a struct for a slice that will be filled at runtime?

1603237524
kandinski
the context is an error string that will be filled by a C library, and I want to store it as a slice, but I need to reserve the maxsize of all potential error messages.

1603237754
jayschwa
A slice is just a pointer and a length. A slice by itself does not contain a buffer. If you want to have a buffer inside your struct, then you'll have to have a field of type [maxsize]u8.

