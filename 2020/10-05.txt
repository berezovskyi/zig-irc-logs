1601857067
andrewrk
man we just can't catch a break from windows CI

1601857232
cr1901_modern
s/CI// :)

1601896424
s-ol
hey, how should I build a string iteratively at comptime?

1601896438
s-ol
I'm trying to define it using var and then append using ++

1601896457
s-ol
but its type changes: error: expected type '*const [0:0]u8', found '*const [11:0]u8'

1601896643
s-ol
ok, seems like declaring it as a slice (var str: []const u8 = "") worked

1601896672
s-ol
now I'm getting a strange error in the assembly block where I am using the (partially) comptime-generated string:

1601896693
s-ol
error: expected a '%' or '['  ; pointing towards the start of a line that contains only  "asm volatile ("

1601896848
fgenesis
zig cc? or just zig?

1601896884
fgenesis
because asm volatile via zig cc segfaults for me using the 0.6 release

1601897034
scientes
fgenesis, you should post a test case

1601897070
scientes
andrewrk found a exit(1) in ldd recently, but that is probably unrelated.

1601897073
fgenesis
i'm not 100% sure and ikskuh said the compiler changed a lot since then so whatev?

1601897082
scientes
oh 0.6 yes

1601897089
scientes
all development is on master

1601897107
scientes
but zig cc does not change as much

1601897108
fgenesis
i wish i could use the master but nope sorry

1601897115
ikskuh
why not?

1601897120
fgenesis
4gb ram

1601897142
ikskuh
do you know

1601897150
ikskuh
you don't need to compile on-platform ;)

1601897178
ikskuh
s-ol, can you post a example of what you pass into the asm block?

1601897244
fgenesis
but i WANT to compile on-platform. it's like developing on PC when targeting the C64. who DOES that.

1601897273
scientes
except zig is built for that

1601897281
scientes
(and so is llvm)

1601897303
fgenesis
obviously needing almost 6gb of ram is not an issue for llvm

1601897310
ikskuh
fgenesis: i'M talking about "compile your zig compiler cross, then compile zig on-platform"

1601897336
fgenesis
aaaactually that would work yes

1601897339
scientes
zig can do both better than any other compiler

1601897343
Michcioperz
i'm on 0.6 still too

1601897353
fgenesis
quite literally because it doesn't build on arm32 due to usize != u64 mismatches

1601897374
scientes
fgenesis, patches on that would be welcome

1601897384
fgenesis
i did hackfix the places where this was a problem but i'm sure i botched it

1601897397
ikskuh
luckily, we have a test suite :D

1601897400
scientes
^^^

1601897402
ikskuh
that takes up 5gb of RAM as well :D

1601897411
fgenesis
yes but it's also ugly

1601897430
fgenesis
it's like a perfect face and then it has this really ugly pimple on the forehead

1601897432
scientes
usually usize stuff is not ugly

1601897434
fgenesis
that's those patches

1601897445
fgenesis
as i said, hackfixed

1601897451
scientes
unless you actually have a need for more than 4GB of VM

1601897654
Michcioperz
s-ol: i just checked and it seems if you have a weird thing in your asm string the error points to asm volatile ( line

1601897663
Michcioperz
so maybe your asm string is bad?

1601897683
scientes
oh you mean the zig "asm volatile" and no C-lang?

1601897759
Michcioperz
looks like it from the rest of problem definition

1601897863
Michcioperz
s-ol: i'd try printing that asm string with @compileLog or something so we can see if it's correct

1601897947
Michcioperz
scientes: in my reproduction an analogous error in zig cc is "invalid register name" rather than "expected a % or ["

1601898033
scientes
Michcioperz, that syntax is not easy even in GCC, and llvm doesn't use the identical syntax and is basically undocumented

1601898061
Michcioperz
yeah it's defo not easy

1601898062
scientes
Michcioperz, but in zig it is not showing you all the errors

1601898070
scientes
that clang would show you for example

1601898074
scientes
it only shows the first error

1601898090
scientes
needs love

1601898112
ikskuh
the inline assembler doesn't need love

1601898114
ikskuh
it needs replacement

1601898126
Michcioperz
and the error points to start of asm statement and not to string

1601898127
scientes
ikskuh, an assembler is not one piece of softwre

1601898145
scientes
and requires too much maintinance that is beyond the scope of the zig project

1601898156
scientes
look at how horrible the go assembler is for an example of what not to do

1601898179
fgenesis
wait what, go supports inline asm?!

1601898186
Michcioperz
go has its own "asm" doesn't it?

1601898199
ikskuh
scientes: i know how much work an assembler is

1601898201
ikskuh
i've written one

1601898206
Michcioperz
isn't go asm more like llvm ir?

1601898219
fgenesis
i've TRIED writing one and never finished :P

1601898227
scientes
ikskuh, oh ok, never mind me then

1601898239
ikskuh
scientes: do you know

1601898271
Michcioperz
anyway zig's docs for its asm stmt seem much more practical than gcc's

1601898278
fgenesis
"Architectures - All of them."

1601898282
s-ol
sorry, was gone for lunch

1601898301
s-ol
i actually found it, porting from C I forgot to change one occurence of %2 to %[name]

1601898323
Michcioperz
i spent some time fighting gcc's asm before learning from a teacher that you can `register int x __asm__("r11");` or something

1601898340
pixelherodev
Michcioperz: the latter is what Zig uses for the CBE now

1601898379
Michcioperz
i'll just uh

1601898379
scientes
no, but I kinda got disgruntled with zig because I thought it was trying to fix things that are not excessively broken, instead of polishing up what are some really cool features: 1. trapping undefined, 2. comp-time, 3. awareness of multiple ways to allocate memory

1601898379
pixelherodev
Being able to bind values to registers like that is much more convenient

1601898384
Michcioperz
never look inside CBE code

1601898394
pixelherodev
Michcioperz: CBE is actually really straightforward

1601898424
Michcioperz
i don't doubt it

1601898426
scientes
so I started feeling that it would be better to try to improve C, and bringing these features to C

1601898440
Michcioperz
i just feel like i've seen enough C last year

1601898480
scientes
because zig and C, and C's SSA dialect LLVM-ir are all very similar languages

1601898493
pixelherodev
Michcioperz: CBE is written in Zig ;)

1601898499
pixelherodev
It generates C code :P

1601898509
Michcioperz
yes and i'm talking about not looking at that C code

1601898517
pixelherodev
Ahh gotcha

1601898521
scientes
like to cbe?

1601898546
pixelherodev
scientes: ?

1601898555
scientes
ahh this?

1601898566
pixelherodev
?

1601898591
pixelherodev
...

1601898593
scientes
<pixelherodev> Michcioperz: CBE is written in Zig ;)

1601898595
pixelherodev
whoever drew the art on that post... it's so cute

1601898596
scientes
what is CBE?

1601898599
pixelherodev
scientes: C backend

1601898625
pixelherodev
I know I could just stop using the initialism and then I'll never need to explain it again... but CBE is much easier to type :P

1601898655
scientes
ahh yes I see this hot code swapping, which andrew had as one of his initial ideas

1601898702
scientes
Ian Airs who wrote the Gold linker was working on that once

1601898747
scientes
Ian Lance Taylor

1601898787
scientes


1601898788
scientes
cool

1601898854
scientes
I have been thinking about some highly theoretical non-turing complete C-like language (it means you can't have function pointers), and I realized I would need something like this, but the line number would be calculated by a regular expression

1601900653
pixelherodev
andrewrk: lemme know when you're on to discuss the CBE issue

1601900702
s-ol
how can I cast a []struct{r,g,b, = u8} to a []u8 (with four times the length)?

1601900709
FireFox317
fgenesis, what platform do you want to run zig on? Arm32?

1601900754
FireFox317
fgenesis, there were some bugfixes regarding segfaults after the 0.6 release and unfortunately they didnt end up in the tar file that is on the website

1601900762
pixelherodev
s-ol: with what intent?

1601900780
FireFox317
I will start building it for arm32 and make sure we dont have these issues for the next release cycle (which is not far away)

1601900781
s-ol
to send data out bytewise

1601900793
s-ol
its a bitbanging protocol for driving LEDs from an AVR

1601900820
s-ol
sorry, to []const u8 actually

1601900828
pixelherodev
s-ol: struct needs to be packed for that

1601900839
pixelherodev
otherwise, there's no guarantee that the order will be what you want

1601900872
pixelherodev
if it's packed... `std.mem.toBytes(&struct)` ?

1601900877
pixelherodev
I haven't done that in a while, so I'm not 100% sure

1601900907
s-ol
thanks, i'll take a look

1601900968
s-ol
std.mem.sliceAsBytes sounds like it

1601901237
s-ol
if I'm hitting LLVM ERROR: Cannot select... is that a Zig bug? Or am I doing things the architecture doesn't support?

1601901270
pixelherodev
Probably an LLVM bug :P

1601901290
pixelherodev
It could be that what you're doing is untested with LLVM on the given architecture

1601901355
s-ol
hm, i really can't amke much of the error output

1601901439
pixelherodev
You could try just `@intToPtr(T, @ptrToInt(`

1601901467
pixelherodev
That removes safety, but it might potentially use different primitives which are better tested on LLVM-avr?

1601901498
ifreund
what safety does it remove?

1601901527
s-ol
i'm not even sure what statement this is about bh

1601901529
s-ol
tbh*

1601901531
s-ol


1601901554
s-ol
ws2812:68 is the for loop

1601901735
pixelherodev
ifreund: e.g. alignment, I believ?

1601901739
pixelherodev
believe*

1601901755
ifreund
nah it still checks that

1601901759
pixelherodev
Ah right

1601901767
pixelherodev
if e.g. `packed` is removed, it'd keep compiling

1601901768
ifreund
the @alignCast is implicit though

1601901961
pixelherodev
I think the lack of notice of `packed` is the biggest issue there, and it's not that bad

1601904823
Michcioperz
thanks to this conversation i dug around and found out how to compile zig code for avr, thanks y'all

1601904829
s-ol
hm, found another example of something that doesn't work:

1601904830
s-ol
0x562582d26000: i16,ch = CopyFromReg 0x5625825f3108, Register:i16 %4, ws2812.zig:68:5 @[ main.zig:54:16 ]

1601904835
s-ol
whoops

1601904847
s-ol
const CLKPR = @intToPtr(*volatile u8, 0x61); CLKPR.* = 1 << 7;

1601904994
s-ol
it seems to only work for addresses between 0x20 and 0x5f?

1601905028
Michcioperz
i pasted that blindly into my working example code and it compiled

1601905039
s-ol
Michcioperz: huh... how are you compiling?

1601905055
Michcioperz
zig build-obj --release-small -mcpu atmega8 -target avr-freestanding-none --strip blink.zig

1601905065
Michcioperz
(on 0.6.0)

1601905069
s-ol
oh, i probably should add -mcpu

1601905092
s-ol
wow, that seems to have done the trick :)

1601905112
Michcioperz
nice

1601905138
Michcioperz
i just learnt how to do that today so double nice

1601905254
ikskuh
Michcioperz: nice!

1601905270
ikskuh
after the LLVM 11 merge (which should happen soonish), we should also be able to link for AVR

1601905308
Michcioperz
i found that line in

1601905436
ifreund
you have leeward to thank then :)

1601905440
Michcioperz
it's pretty cool that if you @intToPtr the peripheral registers to packed structs with u1 for each bit, it compiles to instructions that just set and clear bits, no reading

1601905562
Michcioperz
ifreund: is that their repo? i tried to find the repo author on the internet to not much effect haha

1601905615
ifreund
yup, he's got a website too:

1601905632
ikskuh
Michcioperz: what would be super-awesome: if we could have a "atmega" package which would provide a basic HAL which exposes all registers

1601905654
Michcioperz
well i could write that for atmega8 because it's the only atmega i have

1601905681
Michcioperz
but it sounds futile

1601905683
ikskuh
and on top of that, build a "arduino" package which either depends on the correct "atmega" or "atsam""

1601905695
ikskuh
well, i wouldn't write it by hand

1601905696
Michcioperz
i tried to use avr-rust a few months ago but everyone there seems to be using atmega328p

1601905709
ikskuh
yeah, the atmega328p is from the Ardunios

1601905725
ikskuh
but they only differ in minor stuff

1601905729
ikskuh
most code is literally the same

1601905740
Michcioperz
autogenerating it would be nice but

1601905751
Michcioperz
are there other sources of knowledge than datasheet pdfs?

1601905802
ikskuh
not sure

1601905813
ikskuh
we could check out avr-libc

1601905848
Michcioperz
avr-libc looks beautiful with all the ifdefs

1601905883
ikskuh
:D

1601905950
ikskuh


1601905954
ikskuh
looks like they have a codegen

1601906018
Michcioperz
oh, a .dtd

1601906203
ikskuh
"device tree data" :D

1601906204
Michcioperz


1601906212
Michcioperz
lol no

1601906222
ikskuh
yeah i know DTD :D

1601906225
ikskuh
but it would fit ^^

1601906239
Michcioperz
i had to parse a 2.5gb xml in class last year

1601906296
ikskuh
heh

1601906515
Michcioperz
ah, i think those xmls might be from atmel studio

1601906562
s-ol
I'm using an atmega32u2, still figuring stuff out with zig though

1601906584
s-ol
now it seems like the zig code ends up in the wrong segment (.progmem.data, not .text)?

1601906658
Michcioperz
oh, i never flashed an elf back in my high school days, only ihex

1601906683
Michcioperz
so not sure if i can help you

1601906691
s-ol
Michcioperz: but the elf is the inbetween step

1601906711
s-ol
i'll take a look at the testbed code you linked

1601906716
Michcioperz
yeah but i believe ihex doesn't carry the information about segments so i never had to worry about that

1601906723
s-ol
right now I'm going off zig issue #3637

1601906727
ikskuh
Michcioperz: ELF is the "good" format with debug info and symbols

1601906737
Michcioperz
ikskuh: i know

1601906738
ikskuh
ihex only is raw data and a entry point

1601906739
ikskuh
:)

1601906747
Michcioperz
kinda had to write a parser another time last year

1601906769
ikskuh
heh

1601906773
ikskuh
it's easy to parse

1601906780
ikskuh
i have a zig package for that as well :)

1601906785
Michcioperz
it is, the rest of the task was more "fun"

1601906822
Michcioperz
unfortunately i don't have an english task description

1601906878
Michcioperz
but tldr: link given object file into given already linked executable elf

1601906891
ikskuh
oh

1601906892
ikskuh
fancy

1601906907
ikskuh
i'm not sure if it is possible

1601906918
Michcioperz
under further constraints it is

1601906920
ikskuh
but i want to write a undynamic linker

1601906930
Michcioperz
oh

1601906932
ikskuh
so

1601906939
ikskuh
you give it a dynamically linked program

1601906945
ikskuh
and you receive a statically linked program :D

1601906945
Michcioperz
oh

1601906971
Michcioperz
actually that doesn't sound that bad?

1601906978
ikskuh
yeah, it should be possible

1601906984
ikskuh
and would make some deployment easier

1601906986
Michcioperz
just barely possible, yes

1601907430
fgenesis
FireFox317: rpi4, 32bit raspbian

1601907443
fgenesis
4gb model

1601907455
FireFox317
fgenesis, :thumbsup:

1601907473
fgenesis
i'm intentionally not choosing the worst machine i have

1601907491
Michcioperz
the kernel on raspbian isn't 64bit?

1601907499
fgenesis
but i WILL eventually coax people into supporing win98+KernelEx :P

1601907509
Michcioperz
lol that's a fun idea actually

1601907539
fgenesis
and the pentium90+DOS machine i thiiiink is too far off so i'll pass on that

1601907589
ikskuh
fgenesis: i think you can actually make that already possible

1601907596
ikskuh
but "zig std" won't support it

1601907630
fgenesis
but but but

1601907647
Michcioperz
idk i know a few friends who in 2020 would like to make a game for dos

1601907668
ikskuh
there's already a dos program written in zig :)

1601907669
fgenesis
same! except i have too many projects and too little time D:

1601907674
ikskuh


1601907703
fgenesis
ohoh

1601907713
fgenesis
well then the obvious next step is

1601907759
ikskuh
someone shhould to an 8086 and 8088 backend

1601907765
ikskuh
maybe i'll wait 2000 issues for that… :D

1601907771
ikskuh
to make a new issue

1601907823
fgenesis
and there is also the HX dos extender / DPMI64 that supports 64bit extended DOS but don'T even ask me how that works

1601907857
fgenesis
i do draw the line somewhere and this is clearly way past that point :P

1601907900
fgenesis
for(x) for(y) a[y][x] = new pixel(r,g,b)

1601908196
fgenesis
(yes i have once seen a java person do that. scientific image manipulation code. 2d array of pixel objects...

1601908493
s-ol
Michcioperz: could you share what `avr-objdump -t main.o` does with the main.o from `zig build-object...` in your setup?

1601908599
Michcioperz
sorry, i turned my computer off literally a minute before you asked

1601908647
s-ol
actually i mightve just found two problem sources

1601909866
s-ol
yes, got a blinking led now :)

1601909872
ifreund
\o/

1601909938
ikskuh
whooo!

1601909941
ikskuh
let it blink!

1601909995
leeward
This is on an avr of some sort?

1601910374
s-ol
yeah, custom keyboard / PCB with an atmega32u2

1601910385
leeward
nifty

1601910393
s-ol
it normally runs the QMK firmware but I'll need custom sooner or later for what I have planned :)

1601910407
s-ol
also... finding a reason to do some Zig :P

1601910451
s-ol
comptime cleaned up this bitbanging / NOP logic good:

1601910456
leeward
Did I read right that Zig managed to link for you without extra hackery?

1601910461
s-ol
...now I just have to get it to work as well ;)

1601910489
s-ol
leeward: no, I'm linking myself with avr-gcc

1601910517
leeward
ah, ok, no changes from the last time I looked at zig on avr then

1601910540
s-ol
someone mentioned that might be possible

1601910550
leeward
That would be nice.

1601910723
ifreund
if llvm11 has better avr support I guess

1601910735
leeward
It could hardly be worse.

1601910750
leeward
Last I checked, llvm shelled out to avr-gcc to link.

1601911103
cr1901_modern
Same w/ msp430. At least for Rust, it shells out to msp430-elf-gcc

1601911125
cr1901_modern
So I imagine msp430 zig would do the same

1601911228
leeward
Yeah, I've got an msp430 running Zig code but it's basically the same as the avr testbed.

1601911255
leeward
I think there were extra problems there. I don't remember exactly what the problem was though.

1601911363
fgenesis
one thing i remember is that it still had problems with PROGMEM data

1601911378
fgenesis
because harvard architectures are freaky

1601911404
leeward
and everywhere

1601911408
s-ol
yeah i was struggling with this, my code ended up in .progmem.data

1601911425
s-ol
avr-gcc fixed it in linking, but originally i had -gc-sections on and so it stripped out my code oO

1601911447
cr1901_modern
progmem is an AVR thing, right?

1601911458
ikskuh
yeah

1601911467
ikskuh
zig could address this with addrspace

1601911480
fgenesis
last big thing i coded was on a 24bit extended AVR with the funny RAMPZ pointer... had to hack data into the .fini0 section to make use of the upper memory (pointers are still 16bit)

1601911481
ikskuh
but i have absolutely no idea how that would work in practise

1601911495
cr1901_modern
Meaning zig needs to organically grow __near and __far pointers :P

1601911501
fgenesis
and while we're at it, fuck linker scripts

1601911502
ikskuh
fgenesis: i think zig should support proper progmem pointers

1601911508
ikskuh
and not fuckhack that stuff GCC does

1601911524
ikskuh
cr1901_modern: we don't need those, we can do that with addrspace

1601911539
cr1901_modern
No,

1601911551
cr1901_modern
Though addrspace is prob fine too

1601911582
cr1901_modern
The AVR backend of LLVM already uses addrspace for Rust automagically

1601911592
FireFox317
does one of you have a small avr program that i can test?

1601911593
cr1901_modern
err, rearrange some of those words*

1601911596
ikskuh
addrspace would be __near and __far ;)

1601911603
ikskuh
*addrspace(FAR) i32

1601911608
cr1901_modern
yay :D

1601911620
FireFox317
I have llvm 11 build and would like to see if we can get a simple program to compile and link

1601911648
leeward
FireFox317:

1601911658
fgenesis
only thing i have is this, but definitely not "small" <.<

1601911669
fgenesis
also c++

1601911669
FireFox317
leeward, fgenesis, thanks!

1601911682
FireFox317
hmm a zig only would be easier to begin with hahah

1601911703
ikskuh
fgenesis: stop posing

1601911705
FireFox317
but it looks like leeward example should be fine

1601911708
ikskuh
even if it's awesome

1601911712
fgenesis
the plan is to get there eventually

1601911743
ikskuh
oh, addrspace isn't even there yet :(

1601911745
fgenesis
i can't wait until the day arrives where i can ditch c++ for good, but that won't arrive anytime soon for me

1601911761
ikskuh
hehe

1601911765
ikskuh
Zig 1.0

1601911766
ifreund
the daemon part of this is pure zig

1601911838
ikskuh


1601911840
ikskuh
oh wow, that's old

1601911847
fgenesis
3-digit issue!

1601911852
ikskuh
yeah

1601911855
ikskuh
not like #6502

1601911868
fgenesis
it's like 5-digit ICQ numbers back in the day

1601911889
fgenesis
hrhr

1601912382
FireFox317
leeward, were you able to build object files from zig files before?

1601912458
leeward
I was.

1601912485
Michcioperz
scary dot

1601912492
leeward
The Makefile in that repo worked with some version between 0.6.0 and now.

1601912520
Michcioperz
the line for building .o works on 0.6.0 too

1601912611
leeward
Yeah, it looks like it worked with 932d096029433b75bed3a6c21eae190ee91d5c20

1601912902
s-ol
fgenesis: bit late, but that's a pretty sick demo

1601913026
fgenesis
s-ol: thx!

1601913076
fgenesis
it was fun making it tho. working on a system where you can't just malloc(1GB) certainly has its charms

1601913099
ikskuh
<s-ol> fgenesis: bit late, but that's a pretty sick demo

1601913105
ikskuh
fgenesis: told you already, but this is just true. sick!

1601913113
ikskuh
i need better art direction on my next demo…

1601913131
fgenesis
well there WAS an "esp32-sick" demo right next after this one

1601913143
fgenesis
but it was kinda crushed and i feel sorry

1601913191
ikskuh
fgenesis: spoiler: i can probably do proper rasterization on my stupid heater control

1601913219
ikskuh
HCNICC incoming :D

1601913227
fgenesis
of course you can, you have all the mhz

1601913247
fgenesis
(and all the ROM)

1601913320
ikskuh
ROM is the problem actually

1601913323
ikskuh
fuckin' flash

1601913367
pixelherodev
ikskuh: you saw my comment on z80 speed? ;P

1601913394
ikskuh
yes. this is cheating

1601913403
pixelherodev
Pft

1601913406
pixelherodev
Not the point.

1601913420
ikskuh
but: you discovered that modern CPUs are more or less a magic piece of stone

1601913421
pixelherodev
It hits PHz levels! Who cares if I have to cheat a little [and not even load a program] in order to do that!

1601913422
ikskuh
that does things

1601913447
pixelherodev
ikskuh: Actually, I could probably get a 4MHz physical z80 running the emulator at the lower THz level too :P

1601913453
pixelherodev
Well, no

1601913457
pixelherodev
GHz at least though

1601913474
pixelherodev
It's turned at runtime into an infinite loop of "PC += 0x10000; cycles += 0x40000"

1601913501
ikskuh
^^

1601913515
ikskuh
that's a quite useless microoptimization :D

1601913519
pixelherodev
Not quite

1601913530
pixelherodev
It uncovered a few nice improvements while profiling ;)

1601913534
ikskuh
^^

1601913539
pixelherodev
Reading the opcode is now much much faster than it was before, for instance

1601913546
fgenesis
the best code is code that doesn't exist

1601913553
pixelherodev
fgenesis: effectively, yeah :P

1601913565
pixelherodev
ikskuh: what it does mean is that nops are truly zero-cost now

1601913590
pixelherodev
So if I have a program that's 1000 nops followed by real code, it'll basically jump right to the real code without bothering with the normal processing for the nops

1601913608
pixelherodev
Still relatively useless, but it comes at no cost to other code

1601913649
ikskuh
this might be problematic for system emulation though

1601913652
fgenesis
good luck doing that with self-modifying code

1601914596
pixelherodev
fgenesis: no luck is needed

1601914603
pixelherodev
cache invalidation is trivial

1601914632
pixelherodev
Doing it in the most efficient way possible is not

1601914647
pixelherodev
But the simple method of "invalidate pointer on write" is

1601914675
fgenesis
set memory to trap on write and handle things in a page fault?

1601914680
pixelherodev
That's one way

1601914689
ikskuh
hehe, probably the most efficient one

1601914702
pixelherodev
Hmm, I think I can do better.

1601914709
pixelherodev
Static tracing, maybe?

1601914746
pixelherodev
Basically, statically pre-compile most of it; run it through with randomized inputs [fuzzing, basically]; cache all possible code blocks with the corresponding in-memory values

1601914787
fgenesis
pixelherodev: related:

1601914793
pixelherodev
that's just cheating, though...

1601914797
pixelherodev
fgenesis: I'll take a look later probs

1601914810
fgenesis
"all possible values" is attempting to solve the halting problem when it comes to self-modifying code

1601914852
ikskuh
yep

1601916257
pixelherodev
fgenesis: hence using the equivalent of the Zig max backwards block evaluations

1601916288
pixelherodev
Executing up to N cycles, tracing all the while (and potentially profiling for optimizations?), and bundle the recompiler for anything that wasn't caught

1601917960
s-ol
huh, something very curious with the zig asm statement on AVR: "rjmp .+0" assembles to "rjmp .-2" (infinite loop)

1601917989
s-ol
in GCC asm macro, "rjmp .+0" comes out as the seame "rjmp .+0" in objdump diassembly

1601918100
leeward
That is very strange. Are you sure it's true?

1601918105
pixelherodev
probably using a different base if that's true

1601918122
s-ol
i'm going to try to make a small repro thing I guess

1601918125
pixelherodev
One might be based on current instruction while the other is based on next?

1601918130
s-ol
certainly seems to be happening :D

1601918146
s-ol
pixelherodev: yeah thats what I'm thinking, but its kind of a massive bug if true?

1601918239
leeward
definitely sounds like a huge bug

1601918273
leeward
Does it reproduce under llvm?

1601918541
pixelherodev
s-ol: not particularly

1601918842
pixelherodev
"Behavior differs from GCC" isn't really a bug

1601919029
ikskuh
pixelherodev: it is, if the assembly language is well-defined ;)

1601919034
ikskuh
which it usually is ;)

1601919041
leeward
AVR's certainly is.

1601919056
ikskuh
yeah

1601919083
pixelherodev
Zig's inline assembler is explicitly meant to be target independent, isn't it?

1601919093
ikskuh
nah

1601919102
pixelherodev
Source?

1601919122
ikskuh
can you please read your sentence again ;)

1601919133
ikskuh
how the heck should an inline assembler ever be target independent

1601919136
ikskuh
that doesn't work

1601919188
ikskuh
and: if the assembly language is well defined (like ARM, AVR, MIPS, …) zig should exactly use that syntax

1601919200
Michcioperz
are you saying there's no FJCVTZS instruction on x86? :P

1601919238
ikskuh
WHAT

1601919291
s-ol
ok this is making no sense; first repro came out without bug, now in the real project both "rjmp .+2" and "rjmp .+0" assemble to "rjmp .+0"?

1601919323
s-ol
does zig build-obj use any kind of global cache that I can point a finger at or am I going crazy?

1601919343
leeward
It does use a cache.

1601919348
leeward
in zig-cache

1601919361
s-ol
leeward: there is no zig-cache in my dir

1601919362
leeward
It's not global though.

1601919366
s-ol
i know that, but only from zig build

1601919371
s-ol
but im doing zig build-obj

1601919384
leeward
oh, huh, build-obj doesn't cache?

1601919392
leeward
I guess that makes sense. I never thought about it.

1601919393
ikskuh
there's ~/.cache/zig

1601919396
ikskuh
as a global cache

1601919406
ikskuh
that's where stuff like the libcs are stored

1601919513
larme
Hi all, zig noob here. I have a question about method invocation on struct. I wondered why codes like

1601919520
larme
Google search leads to

1601919540
larme
but why are they treated differently?

1601919678
pixelherodev
larme: function pointer != struct member

1601919708
pixelherodev
`pub fn blah` within a struct T,

1601919773
pixelherodev
With `blah: fn()void`, you have a function

1601919780
pixelherodev
Function pointers don't support implicit self passing

1601920102
larme
thanks for the clarification. I assumed the underlying implementation of struct member function is also done in function pointer. seems that my assumption is wrong

1601920182
pixelherodev
I think the distinction is that the member function is part of T whereas the function pointer is part of t

1601920245
s-ol


1601920258
s-ol
smallest I could get it, can someone verify?

1601920295
s-ol
its not happening exactly like it originally did to me, but rather right now i'm

1601920341
larme
pixelherodev: thanks!

1601920501
s-ol
actually a little smaller:

1601920751
leeward
s-ol: rjmp .+0

1601920837
s-ol
only becoming more lost now, similar C program now also outputs .+0 for other cases, and I cannot reproduce my original problem anymore?

1601920999
leeward
I just built it with gcc, and I see an "rjmp .-2"

1601921168
s-ol
strange, i'm not even getting it to do that rn

1601921203
leeward
asm("nop\n nop\n nop\n nop\nhello:\n rjmp .-2\ngoodbye:\nnop\nnop\nnop\nnop\n");

1601921279
s-ol
nope, thats a rjmp .+0 for me - hex 00 c0

1601921300
s-ol
avr-gcc 10.2.0 ; objdump 2.35

1601921446
leeward
avr-gcc 5.4.0 ; avr-obj-dump 2.26.20160125

1601921464
leeward
Interesting.

1601921469
leeward
Too bad I don't really have time to dig.

1601921528
s-ol
no worries, i also gtg. thanks for checking tho

1601923361
FireFox317_
andrewrk, i'm working on zig-bootstrap and i have a question. Is it correct that i can use the zig compiler from the host as a replacement to zig0? So for cross-compiling we can do `zig build-obj` and then the arguments that normally go to the zig0 compiler.

1601924687
FireFox317_
andrewrk, can i push to the llvm11 branch somehow?

1601924759
ifreund
FireFox317_: you can push to your fork and open a PR against it

1601924801
FireFox317_
ifreund, ah thanks. I didnt know that also works for other branches than master xd

1601924828
ifreund
no problem

1601934924
u0jQx9gPyrYg
woohoo, you did it andrewrk \o/ thx!

1601934936
andrewrk
FireFox317_, yes it's in theory possible but probably some enhancements to the build script / cmakelists are needed before it works

1601934989
FireFox317_
andrewrk, yes i was able to get zig-bootstrap to compile a working zig compiler again :)

1601934994
andrewrk
nice!

1601935000
andrewrk
with llvm11 branch?

1601935003
andrewrk
welcome u0jQx9gPyrYg

1601935020
FireFox317_
yup, with the llvm11 branch and llvm11.0.0-rc5

1601935025
andrewrk
brilliant

1601935054
u0jQx9gPyrYg
i found a thing that is not quite right in std.os.waitdpid:

1601935056
u0jQx9gPyrYg
this should be fixed

1601935112
u0jQx9gPyrYg
you can all call me stef or stf i have hilites on both. my nick changes from time to time randomly, never mind that. my whois is static.

1601935244
ifreund
I agree that os.waitpid() isn't a good abstraction as it loses functionality

1601935300
ifreund
I suppose an out parameter for the status wouldn't be the worst thing

1601935427
u0jQx9gPyrYg
i have written my own waitpid, which creates a different problem, but worksforme(tm)

1601935447
u0jQx9gPyrYg
i guess a combination of the original and mine would make sense

1601935653
andrewrk
if you open a bug report it will be addressed eventually

1601935662
andrewrk
I'll be streaming a demo of the recent big changes to Zig in 1.5 hours. Tour of the new organization of self-hosted compiler code, how bootstrapping works, how the caching system works, and how the optional LLVM extensions work.

1601935960
FireFox317_
does someone know how i can see a patch that has been done by a debian packager? It is this link:

1601936464
FireFox317_
nevermind, found it

1601936721
u0jQx9gPyrYg
i opened an issue for this:

1601937009
andrewrk
u0jQx9gPyrYg, I think the confusion here was that whoever implemented std.os.waitpid (probably me) thought that the return value was the same as the pid parameter

1601937124
ifreund
it is usually, but you can pass e.g. 0 to wait the next child to exit or -1 to wait the current process

1601937146
u0jQx9gPyrYg
exactly what i do

1601937165
u0jQx9gPyrYg
i have a bunch of childs and wait until one returns, and i wanna know which it was

1601937167
andrewrk
yes then clearly we should not be destroying this information

1601937223
u0jQx9gPyrYg
this is what i do:

1601937363
u0jQx9gPyrYg
if you see anything stupid in that code, my excuse is that this is my very first zig project. i've been learning zig for 3 days now...

1601937695
andrewrk
thanks for the report u0jQx9gPyrYg, we'll get this fixed. feel free to submit a patch if that is something you would like to do

1601937946
FireFox317_
andrewrk, so there is a bug in the new libcxx used by llvm11 and i searched a bit, and found a patch from the debian package. Am I allowed to use that or something? I fixed the issue tho

1601937965
FireFox317_
s/I/it

1601938276
andrewrk
FireFox317_, yes we can carry patches in zig-bootstrap. the idea is to put the patch in a separate commit for auditing purposes

1601938309
andrewrk
FireFox317_, we can also carry patches in zig upstream for libcxx. is it something fixed in llvm trunk?

1601938314
u0jQx9gPyrYg
huh, i looked through std/os.zig and std/os/linux.zig but did not find an example of returning a struct.

1601938347
FireFox317_
andrewrk, yeah it has to go in zig upstream, because it fails building anything when doing `zig c++ -target arm-linux`

1601938353
FireFox317_
lets see if they fixed it in trunk

1601938368
andrewrk
u0jQx9gPyrYg, I believe getrlimit is an example

1601938400
andrewrk
ideally we would only carry patches when they are fixed upstream already

1601938508
FireFox317_
andrewrk, looks like it hasn't been fixed upstream

1601938537
FireFox317_
or downstream idunno.

1601939105
andrewrk
downstream is us since we copy from them :)

1601939221
pixelherodev
andrewrk: what's the issue with the CBE patch? I clearly misunderstood how resolvePeerTypes works, mind explaining what I'm missing?

1601939257
andrewrk
yeah, try it with the left peer being comptime_int and the right peer being u32

1601939264
andrewrk
or vice versa. one of those is going to be broken

1601939274
pixelherodev
Will do

1601939285
pixelherodev
I should get in the habit of adding tests anyways

1601939295
pixelherodev
For fixes*

1601939312
pixelherodev
I usually add tests when adding features, but I haven't been doing it when doing fixup commits

1601940265
pixelherodev
Thanks for the pointer :) (sending this ten minutes late because I forgot to hit enter lol)

