1579478427
Snektron
Should stf.heap.ArenaAllocator.denit not take `self: Self` instead of `self: *Self`?

1579478603
fengb
svmhdvn: pfg_: the compiler actually isnâ€™t smart enough to introspect the first type. You can call any struct level function as a method and the compiler will happily try (and report a mismatched type error)

1579478840
metaleap
Snektron: it's still a struct with state (fields). without ptr self, would risk getting a copy and wouldn't be allowed to modify itself. which deinit does . might not look like it

1579478878
metaleap
wait now im not so sure lol

1579479218
metaleap
well it tried it :

1579479268
metaleap
maybe they wanted to just avoid a copy by-all-means, like psychologically.

1579479778
pixelherodev
What's the command to run basic tests locally?

1579479785
pixelherodev
Want to avoid relying on CI at this point

1579479796
pixelherodev
No need to abuse the infrastructure when I have a perfectly good PC to test locally

1579480105
mikdusan
pixelherodev: `zig build test -Dskip-release -Dskip-non-native`

1579480175
mikdusan
if messing with stage1 compiler, maybe just build zig0 instead. it's faster. `make zig0` and then fav first tests after that are `zig0 test test/stage1/behavior.zig` and `zig0 test lib/std/std.zig`

1579480256
mikdusan
then if either of behavior or std test fails, it can usually be narrowed down to individual test, like `zig0 test lib/std/array_list.zig`

1579480281
daurnimator
Oh, I'm reminded: can everyone please add some ideas to the GSoC page?

1579480305
daurnimator
mikdusan: any projects you might want to mentor?

1579480408
treeshateorcs
how do i properly concatenate command line arguments?

1579480480
mikdusan
daurnimator: I don't have any ideas for projects to add, but of the existing ones FreeBSD is probably something I can mentor

1579480727
metaleap
treeshateorcs: you need to `try`

1579480816
metaleap
the err msg of pattern "expected type foo, found <errs>!foo" indicates not handling an error-union

1579480870
treeshateorcs


1579480896
metaleap
so `args.append(try arg)` or `if (arg) |a| args.append(a) else |e| myErrHandler(e)`

1579480917
metaleap
"expression value is ignored" means a call that returns non-void and you dont use the return value

1579480934
metaleap
now append returns an error because all things that allocate can OOM

1579480963
metaleap
so `try args.append(` .. annoying at first until it becomes motoric

1579481004
mikdusan
metaleap: just scraped most of this from lib/std/process.zig:

1579481010
mikdusan
that iterator is a bit tricky

1579481011
metaleap
you could also ignore it via `_ = append(` i think

1579481026
mikdusan
er sorry I mean treeshateorcs:

1579481090
treeshateorcs
btw

1579481111
treeshateorcs
OOM doesn't happen when it's done through a variable

1579481139
treeshateorcs
var args = std.process.args();

1579481159
metaleap
why do you wanna call .args() every iteration anyway

1579481164
mikdusan
std.process.args() is NOT an iterator. it CREATES an iterator for you. call it once.

1579481169
metaleap
it creates the iterator everytime

1579481175
metaleap
ah yes indeed =)

1579481219
treeshateorcs
yeah, i'm so stupid :(

1579481237
metaleap
i know the feelnig =)

1579481290
metaleap
actually jumping into a new lang i tend to be extra dumb with common silly things for the first few days, guess from the distractions by the new semantics+syntax being bombarded with

1579481335
metaleap
like learning to crawl before walking, all over again

1579481340
daurnimator
mikdusan: I just threw those ideas together

1579481350
mikdusan
ah ok.

1579481357
daurnimator
mikdusan: but if you can think of anything you feel like mentoring

1579481394
daurnimator
Particular OS? particular arch?

1579481524
metaleap
mikdusan: this week i can finally start on my LSP endeavour in zig and that means JSON-struct-mappings! so i will be pestering ya finally. sadly i only get a few evening hours per workday so will be slow going. which branch of your zig fork repo was it again?

1579481535
Snektron
<metaleap "Snektron: it's still a struct wi"> I dont think Zig holds any guarantee whether fn a(b: T) will cause b to be passed by-value or by-reference, or so i was told

1579481549
daurnimator
metaleap:

1579481560
Snektron
Furthermore, self is not modified, so i think it might just be a typo

1579481600
metaleap
aah daurnimator: i misremembered who did the json stuff, sorry. mind was all over the place the first few days with zig

1579481684
metaleap
so the "dump" stuff is comptime-codegen of serializers?

1579481697
metaleap
ooh there are tests, noice

1579482030
metaleap
treeshateorcs: as soon as you're iterating

1579482067
treeshateorcs
>std.os.argv

1579482071
metaleap
suspecting the iterator does the same thing, although .. it allocs, std.mem.toSlice doesnt

1579482082
treeshateorcs
that's what i was looking for, but std.process.args was the first hit

1579482187
metaleap
i havent fully analyzed the underlying differences between the 2 tbh. but argv is an array pre-filled before your main() enters

1579482236
metaleap
the other similar such arr is std.os.environ. well i'm off for the night

1579482248
daurnimator
metaleap: os.argv is POSIX only

1579482251
daurnimator
IIRC

1579482273
metaleap
aaah there we go, that was the catch indeed now i remember. went for it because local throwaway

1579487257
pmwhite
hmmm, so I finally fixed the bug that was only showing up on ARM. I have a `union(enum)` that has three cases, but only one of them is ever switched on. The one that was in use was the last one. When I reordered the cases so that the one in use was the first one, it started working again. Before, it would have an issue unwrapping the value with the case it was created as. Haven't yet been able to get a small repro yet.

1579487545
mikdusan
pmwhite: reminder: unwrapped values are the

1579487774
pmwhite
I don't think that is my issue. I do know that unions have their members occupy the same space.

1579487962
pmwhite
const e = Event{ .KeyRepetition = 32 }; std.debug.warn("e = {}\n", .{e}); //works

1579487963
pmwhite
`key_event_handler(e);` where `key_event_handler` is a function pointer, and the assigned value's first statement is `std.debug.warn("e.value = {}\n", .{e.KeyRepetition})`.

1579487963
pmwhite
That yields an error that I'm accessing an inactive union case.

1579488034
pmwhite
Amend the first print statement to be the same as the second. I'm basically doing the same thing before the function call and inside the function call, but the second statement triggers the error.

1579488035
pmwhite
So perhaps the copying into the parameter ruins the data.

1579488559
pixelherodev
mikdusan, thanks!

1579488660
pixelherodev
And for the record, regarding GSoC, I'll be entering college this coming year so I think I'm elegible to participate as a student; if someone comes up with a good Ziggy project, I'd be very interested in participating

1579488813
adamkowalski
pixelherodev: are you interested in machine learning? I've been working on a library for doing that to compete with tensorflow/pytorch, but written purely in zig. There's a ton of work there for many many months to come

1579488890
daurnimator
pixelherodev: students are also allowed to propose projects :)

1579489790
mikdusan
pmwhite: curious which arm hardware?

1579489816
pmwhite
Pinebook Pro

1579489937
pmwhite


1579489967
pmwhite


1579490020
pmwhite
These are the two functions that are relevant. They're a little different they don't have the print statements, so the program fails by ignore the key press rather than flat-out erroring.

1579490145
pmwhite
Note that KeyRepetition is the last element of this union -

1579490319
pmwhite
Also, apparently it works in the second position as well. I feel like it has to do with which items of the union are used a certain way in the rest of the program. Like perhaps Zig tries to remove them as dead code.

1579490391
mikdusan
if KeyRepetition is in last position (and not working), is PointerPressed working in first position?

1579490740
pmwhite
Yeah, it is.

1579490776
pmwhite
wait, actually, that wasn't a valid check...

1579490914
mikdusan
also this is just a hail mary: for the failing switch on .KeyRepetition (when it's in last union position), add this to top of `handle_key_event`:

1579490929
mikdusan
`std.debug.assert(@frameAddress() % 16 == 0);`

1579490937
mikdusan
I'm assuming you are not doing release builds

1579491125
pmwhite
No, I'm not doing release builds. I added the assertion, but it didn't get tripped.

1579491186
pixelherodev
adamkowalski, not particularly. TBH I look upon "machine learning" with distaste

1579491212
pixelherodev
As someone put it, when you say "machine learning," I hear "we'll have the computer make a bunch of guesses using training data devised by humans"

1579491221
pixelherodev
daurnimator, interesting, good to know

1579491322
pmwhite
Also, I tried more rearranging. I added a print statement on `PointerPressed` to the switch statement in `handle_key_event`. If `PointerPressed` is the firsts or second element of the union, then it works, but if it is the third or fourth, then it gets ignored. Same for KeyRepetition. I was able to ignore both, neither, or one of them through rearranging of the union.

1579491712
pixelherodev
After watching the compile time stream: so comptime expressions are literally just run by an IR interpreter in stage1?

1579491841
mikdusan
pmwhite: (with .KeyRepetition in the 4th union slot), can you put in a trivial switch(event) BEFORE `_ = async current_slider.....` case for .KeyRepetition and just put in a @panic("whups") for the branch

1579491878
mikdusan
at top of fn handle_key_event would be fine

1579491952
pmwhite
Wait, everything started working like normal when I changed `union(enum)` to `union(enum(u3))`. I wonder if it chose too small of a tag type for the num.

1579492026
mikdusan
pmwhite: I wonder if looking at IR would shed light

1579492074
pmwhite
Well, I can do a comptime log of the tag type, right?

1579492163
pmwhite
`@compileLog(@TagType(@TagType(Event)));` prints `u2`

1579492204
pmwhite
Presumably that would be okay for four values, right?

1579492232
pixelherodev
Yeah

1579492241
pixelherodev
2^2 = 4 possible values

1579492262
pixelherodev
I would

1579492575
pmwhite
How do I do that?

1579492738
pixelherodev
`zig --verbose-ir` / `zig --emit ir` depending on version IIRC

1579492811
mikdusan
bare with me a sec. I'm checking something in IR locally

1579492825
mikdusan
bare. bear? i dunno

1579492888
pixelherodev
the latter, I think

1579493003
pmwhite
I'll try that after I install a pure wayland terminal. suckless terminal is making my pinebook chug, and I suspect it's mostly xwayland being the problem.

1579493039
pixelherodev
I don't think XWayland is all that heavy

1579493048
pixelherodev
I use it constantly and it uses

1579493071
pixelherodev
Most I've ever seen it at was ~1.5%

1579493182
pmwhite
Well, st has been way less snappy than weston-terminal for some reason, but weston-terminal is rather buggy because it makes everything get underlined after exiting vim.

1579493508
pmwhite
Maybe it's time I make a terminal emulator in pure Zig and Wayland.

1579493517
mikdusan
+1

1579493562
daurnimator
use arcan :)

1579493564
pmwhite
Is there a library that handles actual emulation of a character grid? I feel like that should already exist

1579493706
mikdusan
pmwhite: so here is the LLVM-IR difference between a switch on an 4-member enum (default to u2 I suppose), and explicit u3 as you did:

1579493712
pmwhite
Arcan is an alternative to both X and Wayland?

1579493716
daurnimator
pmwhite: yes

1579493812
pmwhite
This is probably what I'm thinking of -

1579493816
mikdusan


1579493833
mikdusan
so weird it is signed. but it doesn't look incorrect

1579493864
mikdusan
unless something went wrong with final machine code on ARM

1579493903
pmwhite
Was that building my code, or building your own mini version of it?

1579493914
mikdusan
just a mini enum I mocked up

1579493925
pmwhite
Were you able to trigger the bug?

1579493936
pmwhite
Or whatever it is.

1579493949
mikdusan
no I'm on x86_64 just wanted to see it differentiating on u2 vs u3

1579493973
mikdusan
then again.... what's your arm target?

1579494033
pmwhite
arm target? wouldn't that just be ARM? Sorry, not trying to be difficult.

1579494044
daurnimator
pmwhite: would be very cool to try and use arcan from zig.

1579494069
pixelherodev
Anyone have a Zig Vim syntax highlighting file?

1579494103
daurnimator
pixelherodev:

1579494118
pixelherodev
Huh

1579494119
pixelherodev
Thanks

1579494143
pmwhite
daurnimator: can you give a sentence or two pitch for the value of arcan. I was trying to read about it, but I'm having trouble understanding what it's value proposition is.

1579494208
pmwhite
Wayland was not too hard to get working with Zig. The repo I'm working on has a dmenu-like color picker that prints the final hexcode to stdout.

1579494238
pmwhite
Just adding mouse support has forced me to rethink part of the structure of my UI library.

1579494267
daurnimator
pmwhite: its an alternative to X/wayland. It makes a lot more sense (to me) architecturally than any other GUI system

1579494434
pmwhite
Is that what you use on desktop?

1579494460
mikdusan
pmwhite: this will panic if switch fails:

1579494482
daurnimator
pmwhite: I'd like to; not

1579494581
daurnimator
letoram: is there an arcan "hello world" we should try and port to zig?

1579494756
pmwhite
mikdusan: just tried that example on my PBP. No panic.

1579494786
mikdusan
ok last idea for me before I just shrug. can you comment-out the `_ = async ...` line?

1579494987
pmwhite
Just tried. No success. Thanks for the help anyway. I'm feeling better since I can just work around by using a larger tag type.

1579495024
pmwhite
Any way to print the exact bytes of a value?

1579495037
mikdusan
what does `current_slider.element.handleEvent(event)` do?

1579495094
pmwhite
At passes the event to the current slider bar. If that slider bar handles the event, it returns true, otherwise it returns false. Based on that result, the containing element can decide whether to handle the event itself.

1579495186
mikdusan
std.mem.asBytes() should get you a slice of bytes

1579495426
daurnimator
maybe aloadimage ...

1579496945
pmwhite
Honestly, libtmt is only 500 lines, so I could just port it to zig.

1579498007
andrewrk
I wonder how far translate-c would get, given the recent improvements

1579502314
daurnimator
andrewrk: please add a few ideas to the GSoC page when you get a chance

1579502323
andrewrk
thanks

1579502518
daurnimator
(I'm referring to

1579502558
daurnimator
After the application itself, the ideas page is the most important thing they look at when judging a project

1579502574
andrewrk
good to know

1579502614
pixelherodev
Gonna be honest, watching that comptime stream is what swayed me to using Vim

1579502624
andrewrk
GeneralPurposeDebugAllocator and a GeneralPurposeReleaseFast allocator would be good projects

1579502628
pixelherodev
Especially since I don't really use all that much from Geany in the first place

1579502651
andrewrk
pixelherodev, the layneson-cpus_and_features branch is building, if you wanted to do the porting of detecting host cpu/features

1579502676
pixelherodev
It's almost 2 AM; I'll get started on it tomorrow

1579502679
andrewrk
if you run `zig targets` in that branch it segfaults, because `zig targets` is self-hosted now (in that branch) and I didn't figure out what is wrong

1579502690
andrewrk
but basically the task is to make `zig targets` print the current CPU name and feature set

1579502694
pixelherodev
Now that we have translate_c self hosted, what's remaining for stage2?

1579502714
andrewrk
1. pay off some technical debt (

1579502719
pixelherodev
I mean, with the AST builder, generating crappy LLVM IR should already be possible, albeit annoying, no?

1579502734
andrewrk
2. improve std lib async I/O (related:

1579502763
andrewrk
main issue:

1579502786
andrewrk
3. serious work on self-hosted can begin

1579502806
andrewrk
prerequisite of non-llvm backends is working on

1579502861
andrewrk
yeah we could just make another crappy zig compiler written in zig, but I want stage2 to be good :)

1579502871
pixelherodev
Well sure, but I like to think of it as... stage 1.5 :P

1579502882
andrewrk
stage1 already is stage1.5

1579502896
pixelherodev
More curious in a POC than anything else honestly

1579502914
pixelherodev
Or me finally redesigning my LLVM parser and making an actually good interface and implementation that can compete with zasm :)

1579502917
andrewrk
that's why we build zig0.exe which builds src-self-hosted/stage1.zig, which then makes zig.exe

1579502926
pixelherodev
I was wondering about that!

1579502936
andrewrk
zig0.exe is stage1, without the self-hosted stuff

1579502961
pixelherodev
Then it builds e.g. translate-c and links that in instead of parts of stage1, that explains a lot

1579502966
andrewrk
yep

1579502976
andrewrk
now you are in a position to understand this file:

1579503004
andrewrk
arguably should be renamed to stage0.cpp

1579503014
pixelherodev
That a C++ binding? Yeah that explains it

1579503057
pixelherodev
There's something delightful about cool-retro-term + futuristic profile - flickering - jittering + Vim + colorscheme darkblue + Zig :)

1579521045
betawaffle
feature request: allow me to use "static" methods on a struct, which return that struct, in places that accept the .{ fields } syntax? ie. some_call_which_accepts_foo(.init("bar", "baz"))

1579521268
mq32
betawaffle, how exactly is that supposed to work?

1579521281
mq32
I think it's confusing because i don't know which function is called

1579521305
betawaffle
right, from a readability perspective it might be too much

1579521319
betawaffle
but it would be like calling ArgType.init(...)

1579521339
betawaffle
(as opposed to what we have now, which is like ArgType{ ... }

1579527414
frmdstryr
Is there a builtin special error type for a "null" error? I can't make a function that returns "?anyerror"

1579527443
fengb
anyerror!?void

1579527491
frmdstryr
then it has to be caught? I guess that works

1579527495
Snektron
error.Null

1579527515
frmdstryr
Is error.Null an actual type?

1579527516
mq32
frmdstryr: where's the problem with "catching" the error?

1579527523
fengb
Oh hmm that works? I wouldnâ€™t expect ?void to be a thing >_>

1579527525
mq32
error.Null is freshly defined error :D

1579527541
mq32
?void should be equivalent to bool D:

1579527553
frmdstryr
There's not it's just confusing

1579527564
fengb
anyerror!void might be the least confusing

1579527571
fengb
Catchable error or nothing

1579527573
frmdstryr
I want to convert a error flag (set by a hardware register) to the error message

1579527580
frmdstryr
*error type

1579527601
frmdstryr
in this case i don't want to actually "throw" the error but save it into a struct

1579527618
mq32
then just store the error union

1579527631
mq32
or return a typed error instead of anyerror

1579527641
frmdstryr
and it makes me wonder why zig decided to not make throw and return different keywords

1579527642
Snektron
Why coulnd't you can't return `?anyerror`

1579527669
frmdstryr
error: unable to make error union out of null literal

1579527681
fengb
anyerror is a keyword, not a type

1579527707
frmdstryr
Well if that's the case the keyword can be stored in a struct

1579527713
fengb
The type is errorset but Iâ€™m not sure if you can reference it

1579527717
frmdstryr
been doing it for a while now

1579527749
Snektron
afaik anyerror is just an int wide enough to hold all error variants

1579527753
fengb
Curious... can you use @TypeOf(error.Blah) ?

1579527849
frmdstryr
error: unable to evaluate constant expression

1579527867
fengb
Darn

1579527948
frmdstryr
It doesnt like pub fn toError(self: Errors) ReadError!?void {

1579527951
frmdstryr
either

1579527971
frmdstryr
task.data.cancel(errors.toError() catch |err| err);

1579527982
frmdstryr
error: expected type '?anyerror', found '?void'

1579527985
Snektron
`anyerror!anyerror` seems like an impossible to construct type to me

1579528013
frmdstryr
yeah, i think that's why many languages use separate throw and return keywords

1579528032
frmdstryr
or it'd be a reason to do this

1579528191
frmdstryr
or have some builtin @toError(null)

1579528193
Snektron
you could always return an error explicitly by using `try error.Oof;`

1579528383
fengb
"error: expected error union type, found 'error{Oof}'"

1579528468
fengb
Silly throw function:

1579528863
frmdstryr
That's a compiler error?

1579528915
mq32
huh

1579528924
mq32
is it forbidden to change a value of a struct literal?

1579529099
frmdstryr
Also error.Null breaks the compiler.. broken LLVM module found: Operand is null

1579529103
fengb
Oops, was playing with the other function:

1579529268
mq32
if we had @Type() for structs, i could do user space closures :)

1579529729
frmdstryr
fengb: Doesn't seem to work right?

1579529915
fengb
I think you need to catch it to compare?

1579529940
fengb
Might be easier to manually wrap it with a struct

1579530065
frmdstryr
Well this works

1579530084
frmdstryr
Still seems extremely error prone

1579530155
mq32


1579530219
mq32
frmdstryr, why not just use the throw mechanism in doit?

1579530241
fengb
I feel like weâ€™re adding a bunch of layers for funsies ðŸ™ƒ

1579530249
mq32
fengb, yeah me too

1579530253
fengb
Seems so detached from solving the actual problem

1579530285
mq32
uart_err.toError() catch |e| assert(e == ReadError.FrameError);

1579530303
mq32
fn toError(â€¦) ReadError!void

1579530328
frmdstryr
because it can't be saved to an "?anyerror" variable

1579530396
mq32
why do you want to use anyerror anyways?

1579530398
frmdstryr
the actual use case is to cancel a future and have the code "throw" the error later

1579530439
frmdstryr
an IRQ sets the error, the user code is is awaiting for the future to complete

1579530620
mq32
does anything speak against storing the error union directly?

1579530621
mq32
const IrqResult = struct {

1579530621
mq32
result: u8!ReadError,

1579530621
mq32
};

1579530819
frmdstryr
Actually it makes sense to just store the original "Errors" then use a generic error on the future

1579530916
fengb
mq32: lol I thought you were making a smiley

1579530947
mq32
with }; ?

1579530948
mq32
:D

1579541770
TheLemonMan
pmwhite, you may be hitting

1579542138
andrewrk
check out this use of SIMD:

1579542174
andrewrk
this is parsing syntax like "sse,avx2,fxsr" or "+sse,-avx2,+fxsr", with slightly different behavior depending on whether there are + and - found

1579542202
andrewrk
the function does a single pass through the input, using SIMD to compute both answers, and then returns whichever one is correct, based on whether it saw + or - along the way

1579542779
TheLemonMan
speaking of that branch, I also thought we may want "pseudo" architectures like clang has

1579542811
TheLemonMan
eg. i686 -> x86 + SSE, i386 -> bare-bones x86, i586 -> x86 + ...

1579542849
TheLemonMan
admittedly it's only useful for the x86 family, unless y'all come up with other use cases

1579542988
andrewrk
those are in there, represented as cpus that you can choose

1579542996
andrewrk
so it would be: -target-cpu i686

1579543034
andrewrk
the branch disables using the flags together but maybe that should be allowed: -target-cpu i868 -target-feature +sse

1579543072
TheLemonMan
oh that's neat

1579543081
fengb
i868 ðŸ¤”

1579543084
andrewrk
haha

1579543095
mikdusan
is there a `-target-cpu native` ?

1579543118
andrewrk
that's missing but I think it's a good idea

1579543171
TheLemonMan
everybody's hyped af by this patch heh

1579543178
fengb
Silly tangent: why did Intel decide to increment the middle number?

1579543252
TheLemonMan
x86 -> <revision>86

1579543264
TheLemonMan
so you have 286, 386 and so on

1579543481
pmwhite
fg

1579543494
pmwhite
oops, wrong window focused.

1579543611
mq32
^Z

1579543704
pmwhite
:wq

1579543753
TheLemonMan
ZZ

1579544011
pmwhite
I'm having trouble using this libtmt code properly. While trying to loop over the terminal contents, I'm apparently trying to dereference 0, but it seems wrong.

1579544042
pmwhite
In C, I have a `struct TMTLINE{ bool dirty; TMTCHAR chars[]; };`

1579544106
pmwhite
In Zig, I have a valid-looking pointer to a value of this type called, say, `x`. To get `chars`, I have to do `x.*.chars`, right?

1579544147
TheLemonMan
eh, trailing VLAs are not really supported

1579544172
pmwhite
VLA?

1579544186
TheLemonMan
Variable Length Arrays

1579544213
FireFox317
pmwhite, you did not forgot the link libc? `-lc`

1579544224
TheLemonMan
TMTLINE has only a single field, 'dirty', the other one has zero size (or 1 for some compilers...)

1579544233
pmwhite
correct, I did not.

1579544330
pmwhite
oh, so I should just change it to a pointer.

1579544346
TheLemonMan
you can access `chars` with something like @ptrCast([*]u8, &x.*.chars)

1579544391
TheLemonMan
the idea is that x points to a block of memory large enough to store 'dirty' and some TMTCHAR

1579544437
TheLemonMan
if the array is zero-terminated you can use [*:0]u8 as type (I'm assuming TMTCHAR is an u8 here) to avoid some headaches

1579544662
pmwhite
ahh, looks to be working properly.

1579544940
metaleap
treeshateorcs: made a PR (babbies first zig PR! woot) for your yesterday's suggestion

1579545383
mq32
MMIO leads to weird lines of code: UDR0 = UDR0;

1579545487
andrewrk
congrats metaleap :)

1579545514
metaleap
moar to come i'm sure =)

1579545740
TheLemonMan
BaroqueLarouche, I got some Zig code running on the nds o/

1579545761
andrewrk
pixelherodev, check out the latest layneson-cpus_and_features branch, and try running `zig targets`. the goal here is to replace the reflection in src-self-hosted/print_targets.zig, the part using reflection on Target.current to print "native"

1579545790
andrewrk
idea being to port llvm's sys::getHostCPUName and sys::getHostCpuFeatures to self-hosted and use that instead

1579545848
andrewrk
because the reflection-based approach does not work when, for example, using the downloads from ziglang.org because they have been cross compiled for a generic cpu; whereas the point of this code is to detect more specifically what CPU and features are native, not what zig compiler was compiled with

1579545879
TheLemonMan
can't we just ask LLVM?

1579545881
andrewrk
until we have a self-hosted implementation of this, I will directly call the llvm functions and then parse that output

1579545898
pmwhite
TheLemonMan: For some reason, `&x.*.chars` is 4 bytes past the correct value.

1579545916
andrewrk
yeah we can ask llvm. pixelherodev wanted to help work invest in a non-llvm future, and this is one related task

1579545933
TheLemonMan
pmwhite, how have you defined TMTLINE?

1579546059
pmwhite
You mean TMTCHAR? I already gave you TMTLINE.

1579546103
pmwhite


1579546106
TheLemonMan
I mean the Zig definition, are you using translate-c ?

1579546169
pmwhite
Oh, well, I guess I could go look at the output of translate-c, but I've just been importing the header.

1579546180
TheLemonMan
yeah, translate-c should refuse to translate that structure definition

1579546186
pmwhite
using @cInclude

1579546280
pmwhite
`pub const struct_TMT = extern struct { dirty: bool, chars: [*c]TMTCHAR };

1579546284
pmwhite
Ahh, that makes sense why it would be 4 bytes too large.

1579546324
TheLemonMan
if you are on a 32-bit platform yes

1579546398
pmwhite
I think I'm on 64-bit arm.

1579546468
pmwhite
`uname -m` gives `aarch64`

1579546495
TheLemonMan
anyway, the addressof operator should give you the address right after 'dirty'

1579546520
TheLemonMan
do you have a small example to play with?

1579546551
pmwhite
I'll see if I can make one.

1579546770
mikdusan
metaleap: re #4249 take a look at `lib/std/special/build_runner.zig` . it already captures args after '--' and is available to RunStep

1579546847
metaleap
mikdusan: its a fiery coincidence that i was just idly browsing through that file, having caught eye of a 'lib/zig/std/special/' dir in my install

1579547006
metaleap
but i dont see it being used by run.zig so far so it's not "readily loaded" or anything in a `zig build` context i'd think?

1579547025
metaleap
only mention of build_runner is in build.zig 2x "/// This function is intended to be called by std/special/build_runner.zig, not a build.zig file."

1579547034
metaleap
guess the build_runner is for `zig run`

1579547064
mikdusan
build_runner creates the Builder object from zig command line driver

1579547112
metaleap
i see, so its that way around

1579547135
mikdusan
and b.run() creates RunStep which has self.builder . thus, `if (self.builder.args) |argv| {...}`

1579547140
TheLemonMan
pmwhite, what's @sizeOf(struct_TMT) and @sizeOf(bool) ?

1579547155
metaleap
ok it sets `builder.args = argsRest(args, arg_idx)` in

1579547193
mikdusan
metaleap: really? I do `zig build run -- one two three` and they show up

1579547195
metaleap
could be a bug but when i checked that i figured maybe its something for the user to fill in or such

1579547247
metaleap
zig version? nowadays not happening

1579547326
mikdusan


1579547419
metaleap
i mean i can see the whole logic now in build_runner and it's true it "should" be occurring. something to investigate

1579547551
mikdusan
metaleap: just added comment to gist. hope it helps

1579547641
metaleap
ahh so then the whole thing would be as simple as `runstep.addArgs(runstep.builder.args)`  :D

1579547679
TheLemonMan
andrewrk, I hope that `zig targets` output won't be only in json

1579547743
pmwhite
Clone

1579547749
pmwhite
TheLemonMan: ^

1579547894
pmwhite
error: no size available for type '.cimport:2:16.struct_TMT'

1579547903
andrewrk
TheLemonMan, I was about to make that change so that it could have all the CPUs and feature sets data

1579547922
TheLemonMan
pmwhite, thanks, I'm having a look

1579547923
andrewrk
You prefer the text format for easy reference?

1579547945
TheLemonMan
andrewrk, but I'm not a machine :( I'd love to have a terse overview of what's available

1579547946
mikdusan
metaleap: yeah I'm just wondering if `runstep.addBuilderLeftoverArgs()` is worth it

1579547962
TheLemonMan
because I can never remember the correct ARM revision to use

1579548001
metaleap
mikdusan: thx for bringing this bld.args to my attention, you were right. why that was null when i checked it earlier i have no idea but whatever fluke or other kinda oversight it was, bld.args is really properly populated. will close the PR

1579548003
andrewrk
I was hoping it would work to grep, use jq, or view in Firefox

1579548088
andrewrk
Because text format with all the CPUs and feature sets will be an overwhelming amount of information

1579548148
andrewrk
And we could have various flags to display different stuff, but then it's basically implementing an ad hoc jq API anyway

1579548200
TheLemonMan
maybe it could just display a general overview, `zig targets` -> show all targets, `zig targets <cpu>` -> show subtargets -> `zig targets <cpu> <subtarget>` -> show flags

1579548219
TheLemonMan
some kind of hierarchical display

1579548276
andrewrk
that's what piping to jq would do: zig targets | jq arch

1579548299
andrewrk
I'm afk, not sure of exact syntax

1579548342
TheLemonMan
this reeks of the early-2000 let's-use-xml-everywhere heh

1579548362
TheLemonMan
sure thing, I can query a json document, but it's not as easy as typing `zig ...`

1579548905
TheLemonMan
pmwhite, you found a(nother) bug in the code computing the struct layout

1579548922
TheLemonMan
the good(?) news is that it also happens on x86_64

1579548929
andrewrk
True. Im fine with adding fancy CLI stuff to targets. doesn't hurt anything or complicate the lang spec

1579549158
pmwhite
TheLemonMan: Of fun. Can you file it? You probably know better what the actual bug is.

1579549313
TheLemonMan
pmwhite, sure thing

1579549583
pmwhite
I guess I'll just rewrite libtmt first.

1579549620
TheLemonMan
if anybody wants some easy compiler work to get their feet wet I've just filed 4251

1579549774
mikdusan
metaleap: if you're interested...

1579549802
mikdusan
(need to wait for approval first tho)

1579549840
metaleap
ok will watch that

1579549911
BaroqueLarouche
TheLemonMan: wow! Any source code somewhere yet ?

1579550140
TheLemonMan
pmwhite, oh there's no bug (beside translate-c producing an incorrect struct), the four extra bytes are padding inserted because we don't consider the `chars` field to be zero-sized

1579550174
BaroqueLarouche
yesterday I started looking at

1579550178
TheLemonMan
until VLAs are somehow supported you're stuck with some nasty pointer manipulation

1579550216
TheLemonMan
BaroqueLarouche, not yet, it's mostly devkitPro crt0 & linker scripts tied together with a build.zig at the moment

1579550295
adamkowalski
if you allocate an array on the heap of size zero, does any allocation occur or is it a noop?

1579550481
adamkowalski
never mind fn alloc(allocator: *Allocator, n: usize, alignment: u29) error{OutOfMemory}![]u8 {

1579550481
adamkowalski
if (n == 0) return &[0]u8{};

1579550520
TheLemonMan
it depends on how the allocator is implemented

1579550634
adamkowalski
I was using an arena allocator on top of the page_allocator. I'm using it to encode the shape and stride of a tensor. However, if it's a scalar then the shape and stride are both the empty array. The only thing I'm worried about is that the branch predictor will probably not expect n to be 0. So maybe it's better to have a union and do something differnt for scalars entirely? Or I can at least use compile time traits to check if it's a

1579550634
adamkowalski
scalar and then do &[0]usize{} directly rather then putting an if around it

1579550665
adamkowalski
i'll profile it and make sure it's an issue first though I guess

1579552411
TheLemonMan
mikdusan, can you isolate what declaration causes #4250 ?

1579552422
TheLemonMan
I hate bugs I cannot reproduce :(

1579554737
mikdusan
TheLemonMan: ah got you a decent reproduction I think.

1579556331
TheLemonMan
mikdusan, thank you so much, I'm already on it

1579556788
mikdusan
unicode aficionados, I assume that font kerning for monospaced fonts is not required, but is it required for unicode combining codepoints?

1579556804
hryx
TheLemonMan + mikdusan I left a comment on 4155, hope it makes sense. I'm realizing it's been difficult to ask the right questions because I still lack some fundamental understanding of IR

1579560011
Snektron
Huh

1579560018
Snektron
Is zig fmt now running automatically?

1579560025
mikdusan
with vi?

1579560031
Snektron
sublime

1579560047
Snektron
oh wait, maybe because i tried to official syntax highlighting again

1579560190
Snektron
I was using someone else's because the official one highlights all types as built-in which im not quite fond of

1579560214
Snektron
also it highlights the variable name in `const a = 10;` and `const a: i32 = 10;` differently

1579563956
Snektron
Every time i think the Vulkan api registry can't get worse but then it gets worse

