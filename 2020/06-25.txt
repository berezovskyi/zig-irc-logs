1593048583
andrewrk
ok pixelherodev

1593049105
pixelherodev
Okay cool

1593049113
pixelherodev
andrewrk: rebasing now.

1593049208
pixelherodev
andrewrk: you changed Execution to be stdout only?

1593049265
pixelherodev
Yeah, okay

1593049274
pixelherodev
andrewrk: Mind letting me finish up my PR tonight before you merge yours?

1593049299
pixelherodev
I just need to rebase against yours, and do a bit of cleanup (fix docs, clean up tests, etc; it's listed in my PR)

1593050797
pixelherodev
andrewrk: why are obj tests the default for errors, and not exes?

1593050810
pixelherodev
I think it came up for me, and I needed to switch it back at some point, but I can't remember why

1593052244
pixelherodev
Okay, just about done rebasing and cleaning up

1593052550
pixelherodev
Done!

1593052713
pixelherodev
andrewrk: mind if I ask what the problem is with the cleanup commit I posted?

1593052791
andrewrk
I was about to take a look

1593052796
andrewrk
did you close it?

1593052807
pixelherodev
No, you did?

1593052809
pixelherodev
Ohhh

1593052815
pixelherodev
I rebased it against your branch :P

1593052819
pixelherodev
GitHub closed it

1593052822
pixelherodev
When you merged yours?

1593052829
andrewrk
oh I see, github says that I closed it because I deleted the branch it was based on

1593052835
pixelherodev
Yeah

1593052853
andrewrk
ok, finally, you should be able to base your PR on master branch :)

1593052872
pixelherodev
Yeah, but I can't reopen it :P

1593052909
pixelherodev
andrewrk: if you reopen it, it should be good

1593052921
andrewrk
which one?

1593052934
pixelherodev
#5704

1593052941
pixelherodev
I renamed it after your last commit

1593052959
pixelherodev
I rebased it (`git rebase origin/zig-ast-to-zir`) and fixed collisions

1593052974
andrewrk
I can't reopen it either. I suggest to `git checkout -b new_branch_name` and then open a PR against master with that

1593052979
pixelherodev
It ended up just being a cleanup of the harness you added instead of adding an entirely new one, so I renamed it

1593052981
pixelherodev
Gotcha

1593052992
pixelherodev
Better yet, rebase against master now first :P

1593053037
pixelherodev
#5708

1593053081
pixelherodev
One of the biggest improvements is replacing `catch unreachable`s with `try`s :P

1593053099
pixelherodev
There's a lot of deduplication, too

1593053243
pixelherodev
Going to be doing a bunch more on this

1593053425
pixelherodev
andrewrk: did you not like the idea of a Compiles stage?

1593053430
pixelherodev
I mean, I could just add a wrapper TBH

1593053437
pixelherodev
An error test with zero expected errors, for instance

1593053609
andrewrk
I didn't have an opinion on it, it was just dead code

1593053617
pixelherodev
Gotcha

1593053632
pixelherodev
Todo list added to the PR

1593053633
andrewrk
trivial to add back if the need arises

1593053682
pixelherodev
Nah, the error wrapper's a better idea

1593053694
pixelherodev
Code paths that aren't actually needed shouldn't be added

1593053706
pixelherodev
That's also why I merged the Zig and ZIR paths

1593053723
andrewrk
ah so we did the same thing? :)

1593053730
pixelherodev
Largely :P

1593053738
pixelherodev
Half my PR vanished with your last commit :)

1593053745
andrewrk
beautiful

1593053748
pixelherodev
Ended up replacing it with the cleanup

1593053768
andrewrk
I'm sincerely sorry you had to rebase so much

1593053775
pixelherodev
I'm sincerely not

1593053778
pixelherodev
I learned a lot :)

1593053779
andrewrk
but yeah I gotta reserve the right to do work in my own branch :)

1593053793
pixelherodev
I'm going to be asking many questions about stage2 tonight and tomorrow :)

1593053799
pixelherodev
For instance, when are positionals analyzed?

1593053820
andrewrk
in the call graph that starts at analyzeInst

1593053850
pixelherodev
That'll point me in the right direction, thanks :)

1593053894
pixelherodev
Huh

1593053899
pixelherodev
I could probably use `watch` in GDB to find it :P

1593053903
leeward
Of course, that's a language feature, not necessarily a thing I can use: broken LLVM module found: cannot guarantee tail call due to mismatched ABI impacting function attributes

1593053904
pixelherodev
If GDB liked Zig types a bit more

1593053935
andrewrk
leeward, we don't have zig compile errors hooked up for that, so be very careful using it

1593053998
leeward
andrewrk: Yeah, it looks like it's not working correctly. I have an implementation of the same function with `while` so I'll just use that until Zig is more implemented. I'm still super happy it's in the language though.

1593054050
leeward
Trying to tail call a function that has comptime arguments...I would kinda have been surprised if it worked.

1593054073
leeward
(also runtime args)

1593054266
andrewrk
pixelherodev, I'm pretty particular about how I want the files which contain test cases to look like

1593054333
pixelherodev
Righty

1593054402
andrewrk
these files are advertisements

1593054417
andrewrk
"put your test cases here!! it will be easy and won't take a lot of time, it will be worth it!!"

1593054420
pixelherodev
Gotcha, makes sense

1593054437
pixelherodev
hmm

1593054456
pixelherodev
andrewrk: in that case, how about e.g. `ctx.exe` / `ctx.obj` which are the same as addExe(.Zig)?

1593054479
andrewrk
now we're talking :)

1593054499
pixelherodev
One of the checkboxes /is/ `add convenience wrappers` ;)

1593054536
pixelherodev
Hmm, should the context be made static?

1593054542
pixelherodev
There's only ever going to be one context, clearly

1593054572
pixelherodev
we could make it `usingnamespace @import("src-self-hosted/test.zig")`

1593054583
pixelherodev
e.g. `exe(` instead of `ctx.addExe(.Zig`

1593054677
andrewrk
nah

1593054695
andrewrk
that's not really the purpose of usingnamespace

1593054725
pixelherodev
True :P

1593055188
pixelherodev
ooh, addressing PRs I see

1593055197
pixelherodev
I should work on other stuff and try to ddrive PR count to the triple digits lol

1593055265
pixelherodev
andrewrk: I think `catch unreachable`

1593055329
pixelherodev
also, why is chaining method calls an antipattern?

1593055391
pixelherodev
Kakoune is definitely making `try` -> `catch unreachable` much easier

1593055395
pixelherodev
Multi-selections = <3

1593055439
andrewrk
a function does not need to return a parameter, the callsite already has access to the parameter, by definition

1593055465
pixelherodev
True

1593055466
andrewrk
it would be changing the semantics of a function to work around the language's syntax

1593055483
pixelherodev
Well, more like to avoid paying attention to a value that is fundamentally temporary

1593055495
pixelherodev
e.g. `case.addExe` <- we don't actually care about the returned value

1593055500
pixelherodev
We just want to modify it a bit before moving on

1593055513
pixelherodev
Chaining works for single-use cases though

1593055524
pixelherodev
e.g. `case.addExe(...).addCompareOutput`

1593055528
andrewrk
"We just want to [care about] it a bit before moving on"

1593055532
pixelherodev
True

1593055536
pixelherodev
I think this is actually good

1593055784
pixelherodev
Going to be getting back to real stage2 work soon

1593055794
pixelherodev
Going to get more of the currently-disabled tests passing :)

1593055883
andrewrk
wilsonk, what were the test failures here, do you remember?

1593055985
pixelherodev
Heh, the line endings

1593055988
pixelherodev
I remember the old days

1593055993
pixelherodev
I don't miss them.

1593056285
pixelherodev
andrewrk: we don't care if it's more annoying to add ZIR tests than Zig ones?

1593056320
pixelherodev
That is, `.exe` for Zig, but addExe(.ZIR) for ZIR?

1593056358
andrewrk
.exeZIR()

1593056363
pixelherodev
Gotcha

1593056541
pixelherodev
Oh hey!

1593056545
pixelherodev
Down to 48 PRs!

1593056551
pixelherodev
That means I'm now responsible for more than 10%!

1593056553
pixelherodev
/s

1593056585
leeward
47 by my count

1593056657
pixelherodev
Ah, true

1593056747
pixelherodev
andrewrk: the PR still says Zag, the commit doesn't.

1593056750
pixelherodev
:P

1593056772
pixelherodev
Rebased and pushed, we'll find out the test failure shortly

1593067481
wilsonk
Ugh, my daughter spilled nail polish remover on her Macbook Pro 13" keyboard (the A1708), and I just spent hours tearing it apart and getting the new keyboard set in place!! What a pain in the ass those things are! Now I need to wait for another part and then see if I can figure out where all those microscopic screws go again...sheesh :)

1593069415
leeward
That does not sound fun.

1593069429
leeward
At least it's clean on the inside.

1593069608
torque
I thought nail polish remover was mostly acetone, does that really screw up the keyboard? (I guess it would if the keycaps are ABS)

1593070591
wilsonk
torque: yeah, they pretty much melted (looked like bad orange peeled paint). No real damage on the inside or corrosion that I can see...thankfully. It still turned on the day after the accident (after the acetone had evaporated) so hopefully things are going to work out here ;)

1593098185
tgschultz
I have a usage of async code that works as intended in debug and release-safe, but segfaults in release-fast. This leads me to believe I'm relying on undefined behavior, but I can't see what.

1593098236
tgschultz
It might be a compiler bug, but I feel like it is much more likely a gap in my understanding of how async works. I'd be appreciative of insight.

1593099755
marler8997
andrewrk, new allocator interface is done, PR still needs work but the interface should be done if you want to take a look

1593099925
tgschultz
nevermind about the above. I think I see what I missed: I made an assumption about the funcWrapper stack frame that wasn't necessarily true.

1593101841
mq32
funky things that don't make sense:

1593101850
mq32
return return x; // is valid syntax

1593102936
ifreund
whut

1593103104
marler8997
I would expect the type of the expression "return x;" to be "noreturn" (ironically)...so I wouldn't expect return return x; to pass semantic analysis...is this the case?

1593103295
marler8997
yeah I get "unreachable code detected" with return return x

1593103331
marler8997
if we restricted "return" to only be a statement (not an expression) then we could make return return x a syntax error, but then you wouldn't be able to return in the middle of an expression

1593104020
mq32
marler8997: i thik it's just a quirk in the semantic analysis

1593104025
mq32
current behaviour is 100% fine

1593105146
mq32
@field() assumes that "status" and "deleteallexcept" are equal?

1593105601
ifreund
>Call this request with the magic received from drmGetMagic()

1593105622
ifreund
graphics stuff is magic all the way down it turns out

1593105731
mq32
mroe magic

1593108862
marler8997
not sure if this is correct, but the Linux Azure build with the new allocator interface only took 1h 25m,  it seems like before it was consistently taking over 1h 55m

1593108878
marler8997


1593108995
marler8997
oh wow, and the dron CI only took 29 minutes, it usually take around 1h 15m !!!

1593109049
marler8997
sourcehut took 30 minutes, not sure how to see build times for other runs on sourcehut, anyone know?

1593109369
marler8997
the big change here is that arraylist now takes advantage of the full capacity of allocations, if we really got this much performance boost from just that it will be incredible

1593109784
fengb
Wow

1593109865
andrewrk
hmm that's suspicious

1593109876
andrewrk
seems too good to be true

1593109907
mq32
respect

1593109937
mq32
so, ArrayList now uses the fact that when we allocate 4 bytes, but the allocator returns 8, we don't need another allocation when we only need an additional 4 bytes more?

1593110101
andrewrk
right that's the main purpose of marler8997's changes

1593110165
mq32
\o/

1593110165
andrewrk
well and avoiding double-copying for some other operations

1593110166
mq32
awesome

1593110174
mq32
gotta go fast

1593110191
shachaf
whoa, is this the thing I was talking about a while ago?

1593110287
tgschultz
normally wouldn't realloc do that anyway? looking at the implementation, testing code uses a ThreadSafeFixedBufferAllocator, which unconditionally reallocs instead of seeing if it can grow in place.

1593110341
andrewrk
see

1593110457
tgschultz
what I mean is, it seems like the speed increase is an artifact of the testing allocator implementation not handling growing in place, not a direct result of the API change.

1593110593
marler8997
yes seems suspicious to me as well...that seems like to much performance gain

1593110635
mq32
tgschultz: this is still a sign that the optimization works

1593110649
shachaf
Neato, I'm glad people are trying this kind of allocator API.

1593110649
mq32
it may be less significant for other allocators, but still relevant

1593110666
marler8997
the only other thing I see that could explain it is that I had to disable the "recursive async function" test, but I would be surprised if that one test took 30 minutes

1593113807
leeward
Trying to link to a Zig library from C, I'm getting errors about Zig not generating position independent code. How do I get -fPIE into ZBS?

1593113857
mq32
grep -i "pie|pic" build.zig

1593113860
mq32
will yield the answer

1593113873
mq32
its a property on the libexeobjstep

1593113882
andrewrk
foo.force_pic = true

1593113916
leeward
Ah, pic. I was looking for pie.

1593114392
leeward
Hmm, bundle_compiler_rt works fine, but if I set disable_stack_probing to true instead I still get undefined references to __zig_probe_stack.

1593114407
leeward
Ah, release-fast

1593114415
leeward
Obviously it doesn't work in safe build modes :P

1593114620
marler8997
tgshultz, the previous API didn't allow the client to say how much data should be copied, so if an allocator needed to move memory, it would always copy the entire buffer.  The new API allows the client to decide when to move memory and how much to copy

1593114642
gonz_
More control is nice

1593114688
gonz_
This reduction in build time is something else, though. Has anyone been able to see what it comes down to? Is it actually believable that it's from the change?

1593114717
marler8997
the new API also allows the client to know how much is available without having to try every size.  For example, if you ask for 100 bytes, but the allocator has to give you 4096 (like mmap), then there was no way for you to know that you actually had 4096 bytes available, you would just have to keep resizing until it moved memory

1593114795
marler8997
I'll let you know if I find anything else about the build times

1593115057
shcv
what's the right way to test that a computed string is the same as a test string?

1593115066
shcv
though I guess the test itself may be mostly pointless

1593115097
shcv
testing.expectEqual complains of [44]u8 vs *const[44:8]u8; I presume I need to cast one of them?

1593115100
marler8997
std.testing.expectEqualSlices?

1593115134
ifreund
or testing.expect(mem.eql(u8, foo, bar));

1593115157
ifreund
which is probably what expectEqualSlices does :D

1593115178
leeward
shcv: You have an 8-terminated slice?

1593115220
ifreund
that does seem unusual :D

1593115246
fengb
I never thought about it... but we can start leveraging sentinel termination with things like `const lines: [][:'\n']u8`

1593115276
leeward
Yeah, I've been wondering if it will be useful for tokenizing.

1593115280
ifreund
that is a good idea

1593115310
shcv
er, sorry

1593115316
shcv
typo

1593115326
leeward
There's a problem if the last line of your file doesn't end with a newline though.

1593115331
marler8997
might not be useful though because any code that takes a string ending in newline would usually also have to handle it not ending ina newline

1593115334
fengb
Yeah, that file is wrong :P

1593115346
ifreund
I'm rather disappointed that there isn't a valid use case for an 8-terminate slice

1593115351
leeward
fengb: And anyone who has it deserves buffer overflows!

1593115404
leeward
I can imagine something like a [:0xffff]u16 being useful somewhere.

1593115412
fengb
ASCII 8 = SOH. What's SOH?

1593115422
leeward
Um, 8 is BS.

1593115427
leeward
SOH is 1

1593115454
leeward
(Start of Heading)

1593115463
fengb
... I'm reading this chart wrong

1593115465
shcv
SOH would be a particularly odd terminator

1593115470
shcv
BS is kinda funny though

1593115472
companion_cube
there's a bunch of useless junk in ascii

1593115477
leeward
It's like the ascii version of <h1>

1593115488
leeward
er, <head>

1593115490
fengb
Yeah it's BS. Ones are vertical in this chart

1593115502
leeward
That chart is BS.

1593115511
marler8997
lol

1593115527
fengb
"ASCII was developed from telegraph code."

1593115610
marler8997
ok speed boost is gone, I don't know what happened, both dron and azure showed speed boosts but now the latest run doesn't have them

1593115652
ifreund
too bad

1593115662
fengb
It was a one time turbo feature

1593115665
marler8997
too good to be true

1593115684
leeward
It was a taste of the future.

1593115713
leeward
Maybe they let you run on their super-secret good silicon by accident.

1593115724
shcv
hmm, still getting "expected type '[]const u8', found '[44]u8'"

1593115741
shcv
need to read more about the type system I guess

1593115750
fengb
That's an array. Gotta convert to slice using `&array`

1593115770
marler8997
leeward, yeah they did it just to tease me

1593115774
shcv
magic

1593116016
fengb
Arrays are raw bytes in Zig. When you pass around an array, it's actually (sorta) copying the bytes directly

1593117628
tgschultz
marler8997: i'm not disputing the utility of the new allocator API, only the degree to which it is responsible for any improvement in speed in CI. Seems I was wrong anyway.

1593119361
shcv
how do I construct a Reader from a buffer? Or is there a better way to split one into an ArrayList by newlines?

1593119393
leeward
.reader

1593119397
leeward
oh

1593119399
leeward
a buffer

1593119407
mq32
shcv: std.mem.separate()

1593119418
mq32
apply it to ArrayList.items

1593119522
shcv
ok

1593119541
leeward
Do what mq32 said, but if you ever want to get a reader from a buffer, make a FixedBufferStream and call .reader() on it.

1593119567
mq32
or just call ARrayList.reader() :D

1593119576
mq32
when you have an arraylist anyways

1593119578
leeward
Right, if you have an ArrayList.

1593119592
mq32
#justOneObviousWayToDoThings

1593119602
shcv
heh

1593119606
leeward
I was thinking a [_]u8

1593119630
shcv
it's apparently been renamed from separate() to split()

1593119657
leeward
That's a good name.

1593119660
mq32
ah, finally

1593120001
andrewrk
see also tokenize()

1593120090
shcv
how do I use the iterator with a loop?

1593120115
andrewrk
while (it.next()) |item| { ... }

1593120121
shcv
ah

1593120144
andrewrk
`while` and `if` support the same syntax regarding optionals and error unions

1593120398
ifreund
do we not have a setenv implementation yet?

1593120402
ifreund
maybe I should add one

1593120898
shcv
how do I append to a file?

1593121165
andrewrk
ifreund, what for? the child process API supports passing a different environment set

1593121195
leeward
shcv: file.seekTo(try file.getEndPos)) then write to it?

1593121204
leeward
er, file.getEndPos()

1593121233
andrewrk
file.seekFromEnd(0)

1593121236
shcv
I tried file.seekFromEnd(0)

1593121254
shcv
so I think I must have opened it wrong?

1593121254
leeward
Mm, that does seem like it would work.

1593121267
andrewrk
what happened instead of the expected behavior?

1593121303
shcv
I did createFile with exclusive = false, seeked to the end, and used file.outStream.print(); it overwrite the file with the line I printed

1593121324
shcv
so if I call the function twice, the file only contains the second line

1593121461
andrewrk
exclusive = false is the default, so that didn't change anything. you need to do .truncate = false

1593121469
shcv
ok

1593121486
shcv
that worked; thanks

1593121490
andrewrk
np

1593121548
ifreund
andrewrk: so it does, though it's a little more conveniento set it once so that I don't have to remember every time I spawn a child

1593121602
andrewrk
that affects global state in a potentially problematic and tricky to debug way

1593121657
marler8997
you might want to be able to call setenv if you are calling an external library that uses getenv for configuration (this is pretty common in libraries)

1593121679
andrewrk
sure if you're interacting with C code then the C environment block becomes part of the API

1593121704
marler8997
ok that workds

1593121783
ifreund
hmm, so my options are calling libc's setenv (what I'm doing right now), modifying std.c.environ manually, or setting it for each child process

1593121855
ifreund
I agree, it make sense not to have a way to do this when not linking libc

1593126137
Snektron
andrewrk, do you know which part in stage1 analyzes tuple to array cast in parameters? The general implementation is a TODO, but `fn a(b: [3]u8) void {} a(.{1, 2, 3});` seems to compile fine

1593129441
dimenus
i very much appreciate how seamless it is to use Zig on my pbp :)

