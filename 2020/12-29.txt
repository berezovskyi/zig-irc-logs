1609200124
andrewrk
does anyone understand this C warning?

1609200323
leah2
remove the & tho

1609200399
ikskuh
andrewrk: you're taking a "pointer-pointer" there, so you receive a pointer to an array instead of letting the array decay into the correct pointer type

1609200422
andrewrk
I don't think it's a pointer pointer

1609200440
leah2
but removing the & fixes it ;)

1609200452
leah2
and that makes "it a pointer fewer"

1609200457
ikskuh
andrewrk: yeah, that's why i quoted it :D

1609200467
ikskuh
you get a pointer to an array though

1609200472
ikskuh
instead of a pointer to the first element

1609200531
andrewrk
but I want a pointer to an array

1609200537
andrewrk
and puts also wants a pointer to an array

1609200576
ikskuh
puts wants a pointer to a char :D

1609200591
andrewrk
is there a way to fix it by changing the definition of puts?

1609200601
fengb
Pointer to array would be a double pointer

1609200609
ikskuh
andrewrk: don't use "&" here

1609200614
ikskuh
arrays decay to pointers in C

1609200620
andrewrk
it's not a double pointer

1609200631
ikskuh
so doing the "&p" is "wrong"

1609200647
ikskuh


1609200664
ikskuh
btw: why are you including inttypes.h instead of stdint.h?

1609200679
ikskuh


1609200692
andrewrk
it's not a double pointer, check the output:

1609200711
ikskuh
yeah, but it's a pointer to array :D

1609200720
ikskuh
*[N]u8 instead of [*]u8

1609200729
ikskuh
that's why the pointer types are incompatible

1609200744
andrewrk
inttypes was just a typo

1609200755
ikskuh
:D

1609200794
andrewrk
*[N]u8 is correct tho. so how do I make the fn sig for puts be a [*]u8 instead of *u8

1609200814
fengb
There’s no such thing in C

1609200821
ifreund
it's C, you can't barring complier extensions I'm not aware of

1609200829
ikskuh
[*]u8 and *u8 are the same in C

1609200833
fengb
u8 is identical to []u8

1609200836
ikskuh
so the fnsig is correct

1609200848
andrewrk
this is dumb

1609200856
ifreund
yes

1609200858
ikskuh
yes

1609200860
fengb
Well it’s C. This is why you made Zig

1609200886
andrewrk
I hadn't hit this particular thing yet, or at least I don't remember it

1609200889
ifreund
this is also why you'd have a #define MAIN_ANON_0_LENGTH 13

1609200909
ifreund
and use that everywhere because you can't get the length from the variable

1609200989
ikskuh
also, puts

1609201049
ikskuh
char is neither uint8_t nor int8_t

1609201078
leah2
it is, but you dont know which...

1609201094
andrewrk
this will be solved by C backend emitting #includes instead of function signatures for extern "c" functions

1609201096
leah2
(on a posix system)

1609201112
ikskuh
leah2: NO. it's not "one of both", but "neither"

1609201120
ikskuh
uint8_t is "unsigned char", int8_t is "signed char"

1609201123
leah2
but the warning says

1609201146
ikskuh
char has a "unspecified" signedness

1609201153
ikskuh
btw, andrewrk:

1609201160
leah2
parameter of type 'const uint8_t *' (aka 'const unsigned char *')

1609201162
ikskuh
you can see that passing "array" is correct here

1609201163
ifreund
ah so you're not allowed to know if it's signed or not?

1609201171
leah2
so on this machine its unsigned chars

1609201173
ikskuh
ifreund: correct :D

1609201185
leah2
ah wait, this is just uint8_t. my bad

1609201187
ikskuh
leah2: that array is using "uint8_t", not "char" ;)

1609201189
leah2
yes

1609201194
ikskuh
"char" is wild

1609201218
ifreund
ugh, does this mean that zig needs a c_char type?

1609201230
ikskuh
actually, yes :D

1609201239
ikskuh
you can define the signedness as a compiler param though

1609201247
andrewrk
ikskuh, this is helpful, thanks

1609201248
ifreund
it's at least guarenteed to be 8bits though right?

1609201254
ikskuh
C char is horrible

1609201255
andrewrk
ifreund,

1609201267
ikskuh
andrewrk: _Generic can be used to debug a lot of stuff

1609201270
leah2
ikskuh: in C, at least 8 bits. in POSIX, exactly 8 bits

1609201283
ikskuh
btw, another neat trick (which works in C++) is referencing non-implemented templates :D

1609201303
ikskuh
ifreund: only guarantee for char is sizeof(char)==1

1609201308
ikskuh
oh, and while we're at it:

1609201327
ikskuh
sizeof(char) <= sizeof(short) <= sizeof(int) <= sizeof(long int) <= sizeof(long long int)

1609201370
ifreund
so char can be 64 bits?

1609201383
ifreund
cause long long int is required to be at least 64 iirc

1609201486
ikskuh
ifreund: give me a second

1609201521
ifreund
ok so if I understand correctly c_char is only needed when exporting C abi functions right?

1609201607
andrewrk
right

1609201610
ikskuh
btw, andrewrk: for the c backend, you might want to read §5.2.4.1 of the C99 standard

1609201616
ikskuh
5.2.4.1 Translation limits

1609201630
andrewrk
thanks

1609201640
ikskuh
which defines how extreme your translated code can get

1609201646
ikskuh
quote: > — 127 nesting levels of blocks

1609201773
ikskuh
ifreund: long has no defined size i think

1609201869
andrewrk
ugh rendering types is a nightmare

1609201990
ikskuh
yes.

1609203145
ifreund
ikskuh: I was just going off of

1609203237
Cadey
does zig target the original gameboy?

1609203816
andrewrk
not yet

1609204502
pjz
ifreund: you said "the std.mem.Allocator interface doesn't work at comptime" ... but I don't see that I'm trying to make it do so.  It's not marked comptime.

1609209963
pixelherodev
andrewrk: I missed something; why does CBE need to use #includes instead of fnsigs for extern "c" fns?

1609213119
andrewrk
pixelherodev, never mind that. but check the branch I just merged into master, as well as

1609213156
andrewrk
I added the new type of test that lets you run the C code that you emitted, and got hello world working. your cbe code doesn't handle update() correctly tho

1609213183
pixelherodev
Nice!

1609213186
pixelherodev
Less nic!

1609213212
pixelherodev
Hey wait... you said CBE was supposed to be separate from incremental compilation, so updates shouldn't occur?

1609213220
pixelherodev
(so was never tested)

1609222332
pixelherodev
andrewrk: wait, so do we want to go back on the earlier decision then? We want CBE to be incremental now? :(

1609222888
andrewrk
my stance has always been the same on this, all the backends support the same API. the extent to which they take advantage of it is flexible

1609223094
pixelherodev
we explicitly decided that CBE would not support incremental compilation, since there was no use case for it - which is why update was marked unreachable

1609223135
pixelherodev
we could just have it @panic instead of unreachableing, to make it explicit that it's not supported? ("C backend does not support incremental compilation!" for instance)

1609223176
andrewrk
the frontend, which supports incremental compilation, gets to have the same API for every backend

1609223195
pixelherodev
Wait, hold on - which function is update? We use updateDecl, don't we?

1609223224
andrewrk
I think you are overestimating the changes required to conform to the API

1609223232
pixelherodev
Yeah no, I see

1609223267
pixelherodev
Compilation.update, right?

1609223298
pixelherodev
Okay, I was thinking in terms of the pre-Compilation API

1609223315
pixelherodev
I'll tackle that issue within the next ten hours or so, depending on when I end up sleeping

1609223338
pixelherodev
Thanks for the clarification :)

1609223369
andrewrk
I think if CBE wants to be maximally simple, you would just ignore updateDecl(), ignore deleteDecl(), and do everything inside flush()

1609223376
andrewrk
right now it's doing deleteDecl() => unreachable

1609223382
pixelherodev
Right...

1609223409
pixelherodev
Okay, so is the idea to change Compilation.update to invoke CBE differently, so we don't updateDecl, or to support incremental?

1609223429
andrewrk
no changes to Compilation.zig, it's already calling the backend API correctly

1609223434
pixelherodev
Gotcha,

1609223443
pixelherodev
Ahh okay, I see

1609223548
pixelherodev
... need to pull a new static Zig :P

1609223558
pixelherodev
my stage1 build is too out of date to build stage2 lol

1609223617
pixelherodev
Okay, good to go :)

1609223652
pixelherodev
Sheesh this is not going to be pleasant... codegen now takes long enough to be visible! :(

1609223711
pixelherodev
Whelp, on the bridge side, this just inspired me to redo swathes of the zyg design :P

1609223746
pixelherodev
Uh... master fails on test-stage2 after wiping the cache...

1609223754
pixelherodev
This'll be fun. Global cache, maybe?

1609223836
pixelherodev
With the latest static zig installed, I'm unable to build an unmodified stage2 from master after nuking all caches :( I get an index out of bounds finding the zig path in the test runner? Weird...

1609223970
pixelherodev
There breaking changes since the last nightly?

1609224362
pixelherodev
7ca9f3bc7ba1a413ea7f8b88dfafba3d0f842f6e breaks test running for me, but looking at the code, I don't see

1609224369
andrewrk
you always need to rebuild zig after pulling master

1609224383
pixelherodev
Ohhhh, I see what happened, yeah

1609224417
pixelherodev
andrewrk: do you happen to have a static build you can upload somewhere? :P Library is fine, but my stage1 binary doesn't pass its own path to the test runner

1609224427
pixelherodev
Otherwise, I'm going to just have to wait for the next nightly :P

1609224834
pixelherodev
or, more likely, send an untested PR :P

1609225160
pixelherodev
andrewrk: is it fine to just call `codegenDecl` for everything in the decl_table on flush() ?

1609225170
pixelherodev
Or should it be starting with exports and then dependencies?

1609233096
ikskuh
<ifreund> ikskuh: I was just going off of

1609233108
ikskuh
yeah, i was going after the C99 standard

1609233131
ikskuh
there is a limits.h description where it explicitly says "the implementation should exchange the limits diplayed with the actual values"

1609237565
koakuma
So, forgive me for being rude but

1609237574
koakuma
Is there any plans for multithreaded compilation?

1609237799
koakuma
I find that (at least, stage0/1) builds are still single-threaded

1609238040
ikskuh
koakuma: yeah, there is

1609238056
ikskuh
problem with building zig itself is that the linking takes like 95% of the time :D

1609238065
ikskuh
and this is single-threaded

1609238083
ikskuh
the stage1 compiler actually builds C projects multithreaded already

1609238098
ikskuh
and this will continue with zig sources as well in the future ):

1609238100
ikskuh
* :)

1609238129
koakuma
Oh, that's nice

1609238282
koakuma
Here the linking is fast, it's zig1.o that takes a long time to build

1609238316
koakuma
Spending some 25 mins everytime I have to rebuild stage1 is something I don't particularly like :p

1609238363
ikskuh
i think that's the linking part tho, it just shows zig1.o :D

1609238494
koakuma
Ahh so it's linking

1609246214
koakuma
Ah yeah, I just remembered that I hit this weird f128 printing bug on sparc64

1609246284
koakuma
std.debug.print("{} {}\n", .{num, @floatCast(f64, num)}); prints different values

1609246314
koakuma
Even though the formatter will call std.fmt.formatFloatScientific which will cast its parameter into f64 anyway

1609246473
koakuma
But if the code is cross-compiled on an x64 host then everything's okay

1609246521
koakuma
Are there some comptime magic I missed here?

1609265992
andrewrk
it's not linking that takes 95% of the time, it's building zig1.o

1609266016
andrewrk
25 mins sounds like a release build on oldish hardware. do you perhaps intend to be doing a debug build?

1609267805
ikskuh
andrewrk: wow, why does it take

1609267832
ifreund
stage1 is slow and llvm is slow

1609267847
andrewrk
ikskuh, slap on a -ftime-report and you'll have a detailed answer

1609267894
ikskuh
i wonder if i built wrong all the time, i'm using cmake :D

1609268017
g-w1
if you have ~8 gb of ram and no swapping it will probably take a while.

1609270920
kbd
Hi there. Just started learning Zig a few days ago. As a first exercise, I'm rewriting my shell prompt in Zig so that it's portable to non-posix shells in case I want to use Nu or Xonsh etc. Been poring over the stdlib for a while trying to find where "atoi" is and I haven't been able to find how to convert a string to an int so I figured I'd just

1609270920
kbd
hop on IRC and ask.

1609270962
ifreund
kbd: std.fmt.parseInt()

1609271241
kbd
ty ifreund!

1609271267
kbd
didn't expect that to be in 'fmt'

1609271334
ifreund
it does feel a little weird for it to be there but I don't know of anywhere else it would make more sense

1609273498
companion_cube


1609277474
alexpana
is that pascal? :D

1609277708
pixelherodev
andrewrk: is it fine to just call `codegenDecl` for everything in the decl_table on flush(), or should I start at exports and recursively check dependencies? With most backends, the usage of updateDecl allows for not thinking about it, since they're added to a work queue; we don't have that, which means all of the logic of "what needs to be done" needs to be replaced with "for decl in all_decls". I'm

1609277711
pixelherodev
just not certain what `all_decls` is in this case...

1609277849
andrewrk
it's fine to iterate the decl_table on flush()

1609277899
pixelherodev
I wasn't sure, thanks for clarifying!

1609277972
andrewrk
I'm gonna live stream some stage2 development in 20 min.

1609278012
pixelherodev
Anything in particular?

1609278035
pixelherodev
Might be good to catch up on the changes in internals since I last looked; Compilation.update should not have caught me by surprise! :(

1609278125
FireFox317
andrewrk, ah nice!

1609279355
ifreund
pixelherodev: comptime function calls is listed as the agenda

1609279392
pixelherodev
Ah, neat!

1609284173
pixelherodev
andrewrk: question for some point after the screen (hence here and not irc.twitch): why does sema operate on IR and not AST? Is it faster? Easier?

1609284603
ifreund
pixelherodev: afaik it is because IR is typed

1609284716
g-w1
no, sema turns zir into typed ir. my guess is less code in zir_sema.zig and a little more in astgen (for example, catch and orelse are simmilar, if for and while simmilar)

1609285099
pixelherodev
hmm

1609285104
FireFox317
isnt that for comptime?

1609285134
FireFox317
pixelherodev, see top comment in zir_sema.zig

1609285241
pixelherodev
FireFox317: yes, but

1609285259
pixelherodev
I'm confused why sema doesn't operate on the AST, and astgen doesn't just produce typed IR

1609285269
pixelherodev
(instead of using two IRs...)

1609285294
FireFox317
yeah okay, i dunno actually

