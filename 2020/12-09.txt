1607473109
preyalone
Look, I was really eager today to learn Zig and help contribute. But when I'm banned from assisting with problems on the GitHub repo, there's not much I can do to address any bugs I come across. I can't be a part of something with a policy clapping your hands over your ears to ignore the bugs. So I'm out.

1607473365
andrewrk
you're welcome to try again in 30 days

1607475153
pixelherodev
wowers

1607475165
pixelherodev
s/(ers)/z&/

1607476778
ifreund
yeah, bit of an effort vampire that one

1607477216
leeward
Zig isn't in Debian. That's a private repo.

1607477251
fengb
But it’s our fault it isn’t updated

1607477261
fengb
Gotta police the internet

1607477335
leeward
Yep. Whoever maintains that package probably ought to have included a -doc package to go with it.

1607477352
andrewrk
meanwhile, this is actually kind of exciting:

1607477370
andrewrk
zig cc being used with cgo to cross-compile cgo applications

1607477429
leeward
Interesting.

1607477430
ifreund
yeah, that is pretty exciting

1607477440
g-w1
its very exciting that the person doesn't have any background with zig

1607477459
ifreund
A great way to get a zig binary on more developers machines

1607477481
leeward
This whole "no dependencies" thing seems to be pretty popular.

1607477538
fengb
It convinced Whitequark to take a second look too :P

1607477819
g-w1
Would it be a good project to just do the static-clang thing without zig, or is a good idea to have zig in it to expose more people?

1607478018
ifreund
g-w1: no reason to have 2 separate codebases implementing the same thing, and getting a zig compiler everywhere is certainly a nice side effect :D

1607478044
g-w1
yep thats what I thought, just checking with other people

1607478054
andrewrk
the static-clang thing depends on zig, that's what our compiler-rt is implemented in :)

1607478077
andrewrk
also the zig cc feature is implemented in zig, and the caching system, and the linker driver, and also partially linking...

1607478099
fengb
Why can’t LLVM compiler-rt work cross platform?

1607478144
andrewrk
you could work on it to make it do that and it would look a lot like what the zig project is doing, except with C code instead

1607478160
andrewrk
most of the code works cross platform fine

1607478193
andrewrk
a lot of the value zig provides is in the details of "glue code" making things just work

1607478204
andrewrk
I know it often doesn't feel like it because we have a bunch of open bugs

1607478235
andrewrk
but we really have massivly simplified what is normally a complex problem domain

1607478789
karchnu
I was first interested in Zig to get rid of gcc and clang bullshit, and replace them for an OS. So I'm not really surprised here. :)

1607480287
g-w1
andrewrk: I was watching your old stream about the self-hosted compiler, and you mentioned single static assignment tree and that zir, wasm, and scopes use it. I cant find anything about it online though. Are there any articles/blog posts/papers I could read to learn more about it? I assume the biggest difference with ssa is that there is mutability so no need for phi instruction.

1607480339
a92


1607480427
g-w1
I know about ssa, what im trying to figure out is what ssat is and what the differences are. but thanks anyways

1607480484
andrewrk
g-w1, I couldn't find anything about it either. it does not introduce mutability

1607480509
andrewrk
here's the example that lritter gave me

1607480520
andrewrk
it's just the idea of organizing in a tree form

1607480648
g-w1
ok, I saw that it has load operation so I thought that made it mutable

1607480745
dominikh
same as in SSA; not everything is in a register, there are still memory loads and stores

1607480775
g-w1
ah thanks

1607480844
dominikh
(see for example

1607482868
andrewrk
meowray,

1607484170
daurnimator
even if things aren't correct they could be consistent :/

1607484207
daurnimator
I was sitting here wondering if there was a notable distinction on which should be used when

1607484370
powerofzero
Hi, I just ran into the problem of the compiler not letting me a have a struct that includes a pointer to a value of the same type. What is the prefered workaround for these kinds of structures?

1607484858
HollMax
Hi, when I run `zig run foo.zig`, it compiles in -O Debug by default, right?

1607485184
HollMax
Because I'm getting a segfault without much to go by, so I'd like to know, if my code is wrong, or it never gets to run because of an ICE

1607485199
daurnimator
powerofzero: I don't understand, could you share an example of what you're trying to do?

1607485217
daurnimator
HollMax: a segfault in the compiler or in your program?

1607485255
daurnimator
HollMax: use `build-exe` to get your application, then run it under gdb and/or valgrind.

1607485303
HollMax
my bad, should've used `build-exe` from the start

1607485316
HollMax
anyway, it's an ICE, will file after lunch

1607485371
HollMax
I don't know what I'm doing, but it's my 4th time trying to use Zig, and I always find an ICE/missing feature

1607485497
powerofzero
daurnimator: Here is code and the error message:

1607485769
daurnimator
powerofzero: hmmm. that's a little weird. you might be able to use @This() instead

1607485858
powerofzero
That didn't work, same error. I also tried indirection through a const Self = @This() but that also gave the same error.

1607485913
daurnimator
powerofzero: I think the error might be when generating an error message....

1607485935
daurnimator
powerofzero: `atomic.Int(?*Block)` doesn't really make sense... that's not an integer type you're passing

1607485978
powerofzero
as far as I can tell from the atomic.Int source, it should work just fine like that. Plus there is no atomic.Ptr

1607485989
daurnimator
it's probably trying to compile e.g. `@atomicLoad(?*Block, ....)` and then trying to generate an error message

1607486025
daurnimator
hmmm. I guess the operation does make sense.....

1607486075
powerofzero
Oh shoot yeah I checked whether it could be a pointer, but not an optional pointer, which it can't be.

1607486101
powerofzero
ok yeah that fixed the problem.

1607486143
powerofzero
though now I have the new one of needing to emulate a ?*Block.

1607486161
daurnimator
powerofzero: it does sound like you should file an issue though: either we need to make @atomic take optional pointers; or we need to fix the error message

1607486195
daurnimator
powerofzero: as a workaround use a `atomic.Int(usize)` and @intToPtr/@ptrToInt ?

1607486412
powerofzero
Yes, I'll probably do both of those things. Thanks for the help.

1607486658
daurnimator
powerofzero: maybe there should be a `atomic.Pointer()` that does the @intToPtr/@ptrToInt for you

1607486680
daurnimator
I'm not sure atomic.Int taking a pointer

1607486742
daurnimator
wait, does @intToPtr even work on an optional pointer?

1607486753
daurnimator
if it does that seems like a wart

1607486811
powerofzero
I think so, based on the docs "If the destination pointer type does not allow address zero and address is zero, this invokes safety-checked Undefined Behavior."

1607490090
andrewrk
yes @intToPtr works with optional pointers and it's intentional. why wouldn't it?

1607490739
daurnimator
andrewrk: because an optional pointer isn't of type pointer: its of type optional.

1607490739
HollMax
so apparently switching on a slice is valid, but only if it has 1 slice branch

1607490808
andrewrk
HollMax, switching on a slice is intended to always be a compile error

1607490856
daurnimator
andrewrk: it brings up inconsistencies like @ptrToInt only allowing optionals if the base pointer type is not allow-zero

1607490858
HollMax
I'm on 0.7.0 and it segfaults with more branches, but appears to work with 1 branch

1607490904
HollMax
and it behaves the same on master

1607490935
andrewrk
daurnimator, that's fine, everything makes sense

1607492046
andrewrk
there is precent for zig treating ?*T as both a pointer and an optional

1607492730
daurnimator
andrewrk: so you think the issue above is really that @atomicLoad should take `?*T` when `T` is incompletely known?

1607492873
andrewrk
I don't understand what you mean by "incompletely known" - you mean like an opaque type?

1607492901
andrewrk
I'm skeptical of the value of std.atomic.Int, I suspect this person would be better off using the atomic builtins

1607511370
TheLemonMan
leeward, sorry for the long delay, LLD's error is telling you there's something fishy with how the object file is laid out

1607511396
TheLemonMan
the text section ended up at 0x10000, that's way over the 16bit limit

1607511434
TheLemonMan
so, you need a linker script, I've succesfully compiled your example using TI's msp430elf.x

1607511548
TheLemonMan
don't forget to comment out the `OUTPUT_FORMAT` part, LLD doesn't recognize the elf32-msp430 string

1607512036
TheLemonMan
andrewrk, std.atomic.Int is awesome, it stops you from using non-atomic ops by mistake (and it also serves as a self-documenting type, when you see atomic.Int being used you know to watch out for concurrency issues)

1607512388
gonzus
I am trying to understand how the key gets stored in a StringHashMap. Looking at the code, I think the place where a new key,val pair is stored in the hash looks like this: `entry.* = .{ .key = key, .value = undefined }` -- however, if the key is a slice of u8, this is not actually creating a copy of those u8s; is that correct?

1607512388
dutchie
nice. i still don't understand when i should be using the various Ordering types :(

1607512480
TheLemonMan
dutchie, this

1607512491
ifreund
gonzus: yes that's right, you are responsible for ensuring the slices is valid for the lifetime of the StringHashMap

1607512523
ifreund
there's aslo BufMap which will dupe slices for you but has a more limited API

1607512676
gonzus
Oh... this is a bit surprising then. I though the whole point of having a specific HashMap type for strings was precisely to ensure the keys being properly copied into the map, and not just referenced.

1607512696
gonzus
Can you point me to an idiomatic example of zig putting data in a StringHashMap?

1607512733
ifreund
the point of StringHashMap is the hash function it uses

1607512779
gonzus
My use case: I have a fixed buffer, which I use to read lines from a file using `readUntilDelimiterOrEof()`, and I want to store data in the map, keyed on a substring of each line. But clearly the keys will be overwritten, if I understood you correctly.

1607512836
gonzus
Got you. This might be an improvement to the docs (or perhaps they already contain that explanation about the hash function).

1607512840
ifreund
yep, so you probably want to call std.mem.Allocator.dupe() on each key and put the result in the hashmap

1607512855
gonzus
Aha, sweet. Will try that.

1607512872
ifreund
(and then free all the keys right before calling deinit() on the map)

1607512929
ifreund
in some cases you wouldn't need to dupe the keys though, e.g. if the keys were all slices into a buffer that outlives the map

1607512948
ifreund
and so if StringHashMap duped the keys for you in that situation it would be sub optimal

1607512952
gonzus
And since I am already on this topic: I found myself wanting to create a key from several other strings / slices (and maybe some other scalar values). What would be the idiomatic way to create a formatted string (a la sprintf) from a bunch of values (on which I would later want to call dupe())?

1607512988
gonzus
Right, understood. Not my use case, but of course something that could happen (for example, if you read the whole contents of the file into a buffer at once).

1607512992
dutchie
gonzus: ArrayList(u8) has a Writer interface so you can format to it

1607512994
ifreund
you could use std.fmt.AllocPrint(), and you wouldn't need to dupe() the result as it allready allocates a new slice

1607513018
dutchie
oh yeah, or AllocPrint

1607513054
ifreund
if you just want to join them, there's std.mem.concat() as well

1607513161
dutchie
TheLemonMan: thanks, i've read quite a few things along those lines. I'm guessing .Monotonic is the same as relaxed?

1607513186
gonzus
You know what, I didn't even know about the existence of ArrayList until now... :-)  -- I guess I need to spend some more time trawling through the std lib code.

1607513186
dutchie
or Unordered?

1607513219
gonzus
ifreund does `std.mem.concat()` allocate memory as well? (checking myself now...)

1607513232
ifreund
yes

1607513244
ifreund
it takes an allocator as a parameter which is a pretty solid hint :D

1607513330
gonzus
X-P

1607514736
TheLemonMan
dutchie, monotonic is memory_order_relaxed

1607514756
TheLemonMan
dutchie, you probably want to cross-reference this document too

1607514882
dutchie
yeah, i read that too. i think i ended up deciding that .Monotonic was correct for a simple "total number of successes across a bunch of threads"

1607514929
dutchie
i.e. `@atomicRmw(usize, &counter, .Add, 1, .Monotonic)`

1607515046
TheLemonMan
it depends on what you need that counter for

1607515109
dutchie
i spawn a bunch of threads, which do their work, incrementing the counter when they "succeed". then i wait for them all and report the counter at the end of the run

1607515170
TheLemonMan
oh then that should be fine

1607515344
dutchie
could i even use unordered for that?

1607515509
TheLemonMan
that's dangerous for a rmw

1607516082
TheLemonMan
leeward, I've sent a PR to fix the OUTPUT_FORMAT problem, you can track its status here

1607516214
gonzus
ifreund say I want to create something like a list of interned strings. So I want to read the strings from somewhere, allocate a copy of each and then add that to an `ArrayList`. I would love to declare that as `ArrayList([]const u8)` but I am not sure I will be able to later iterate over the list and deallocate all the copies. If that is the case,

1607516215
gonzus
should I declare this as `ArrayList([*]u8)`? And if so, how would I later find the length of each string in the list?

1607516358
dutchie
gonzus: []const u8 will be fine. free does some magic to cast it to non-const

1607516370
TheLemonMan
dutchie, the int.atomic wrappers are also meant to protect the user from specifying invalid orderings (eg. acquire on a store or unordered on a rmw)

1607516373
gonzus
Great, trying that now.

1607516390
TheLemonMan
but that's not yet implemented, I'll bump it up in my todo list

1607516402
dutchie
TheLemonMan: cool!

1607518139
protheory8-new-m
How do I pass an async function as argument? I tried just doing `fn() void`, but the compiler gives me an error: `error: expected async function, found 'fn() void'`.

1607518329
ikskuh
you need to explicitly set the callconv(.Async)

1607518334
ikskuh
fn() callconv(.Async) void

1607518644
protheory8-new-m
thanks

1607519290
protheory8-new-m
So now I'm trying to get @asyncCall to work, I'm creating frame buffer, but compiler complains about `error: unable to evaluate constant expression: `var bytes: [1024]u8 align(@alignOf(@Frame(async_fn))) = undefined;`

1607519303
protheory8-new-m
* So now I'm trying to get @asyncCall to work, I'm creating frame buffer, but compiler complains about `error: unable to evaluate constant expression: var bytes: [1024]u8 align(@alignOf(@Frame(async_fn))) = undefined;`

1607519355
protheory8-new-m
and points to `async_fn` with a caret character

1607519400
ikskuh
is async_fn a pointer?

1607519411
ikskuh
or a comptime known value?

1607519473
protheory8-new-m
It's function argument with type of `fn() callconv(.Async) void`, that's a function pointer, right?

1607519506
ikskuh
yeah

1607519531
ikskuh
so you have to make it comptime to be able to query this kind of information

1607519567
protheory8-new-m
how?

1607519572
protheory8-new-m
ah

1607519576
protheory8-new-m
just add comptime?

1607519587
protheory8-new-m
to argument type

1607519900
ikskuh
yeah :)

1607519910
protheory8-new-m
well that didn't work

1607520599
protheory8-new-m
what do I do now?

1607521090
protheory8-new-m
`std.debug.print("Val: {}\n", .{@alignOf(@Frame(async_fn))});` also doesn't work :(

1607521340
TheLemonMan
can you show us some more code?

1607522902
TheLemonMan
protheory8-new-m, you want `comptime <param name>: <type>`

1607523010
ifreund
and see @frameSize() if you need it to be runtime known

1607523187
protheory8-new-m
TheLemonMan: After I did that, it seems like just calling `async_fn();` works, without doing `@asyncCall();` at all

1607523244
ifreund
well yeah, it's comptime :D

1607523276
protheory8-new-m
Thanks for help everyone

1607523285
protheory8-new-m
what is @asyncCall used for then

1607523407
ifreund
if the function is runtime known, you need it

1607525401
fengb
asyncCall seems to be really buggy when calling a non pointer

1607529866
betawaffle
what happened to the `zig builtin` command?

1607529883
TheLemonMan
dead

1607529926
TheLemonMan
zig build-exe --show-builtin, replace build-exe with build-lib or something other subcommand

1607530724
TheLemonMan
leeward, #7366 should fix many problems, getting the whole stdlib 16bit-usize clean is a bigger (and harder) task

1607533749
g-w1
/join #aerc

1607533757
g-w1
sry about that

1607536707
leeward
TheLemonMan: Nifty! I'll try it.

1607539270
andrewrk
TheLemonMan, I see your point about std.atomic.Int

1607539510
andrewrk
0.7.1 is looking like quite a tasty release

1607539555
andrewrk
no breaking changes, 60+ bugs fixed

1607539697
ifreund
:)

1607539703
ikskuh
andrewrk: with full release notes?

1607540039
andrewrk
I still need to catch up for 0.7.0

1607540067
ikskuh
take your time

1607540081
ikskuh
i know you want to finish stage2 earlier than everything else, and i can relate :D

1607540128
ifreund
it will be a glorious day when stage 2 can compile river :D

1607540177
ikskuh
oh yeah

1607540181
ikskuh
or showdown

1607540184
ikskuh
or any other projec

1607540189
ikskuh
*project

1607540198
ikskuh
but the most glorious day is when stage2 will be able to compile stage2

1607540212
ifreund
indeed

1607540482
andrewrk
TheLemonMan, do you think largest_atomic_size going from 16 to 8 on modern CPUs could possibly regress perf?

1607541161
TheLemonMan
andrewrk, none of those intrinsics is actually emitted on x86/x64

1607541172
andrewrk
I see

1607541198
andrewrk
these look like some nice compiler_rt improvements

1607541262
andrewrk
TheLemonMan, mind slapping this in there real quick before I hit merge?

1607541319
TheLemonMan
sure thing, one sec...

1607541388
TheLemonMan
done!

1607541426
TheLemonMan
we missed the deadline to request some LLVM 11.1.0 backports :(

1607541587
andrewrk
damn

1607541765
andrewrk
we got about a 1-2 month window now to get bug fixes into master branch before the 12 release is cut

1607542287
andrewrk
all aboard the merge train! choo choo!

1607543005
FireFox317
andrewrk, im not able to repro #7042 anymore

1607543116
andrewrk
FireFox317, I suspect that was #3825 (lld calling exit())

1607543157
andrewrk
we still need to fix the locking problem though right?

1607543192
FireFox317
lol ofcourse it was, forgot that

1607543203
viashimo
w/in 18

1607543226
TheLemonMan
win 19

1607543309
FireFox317
andrewrk, yes i think so. However it is a usecase that is not that common, running multiple `zig build` instances, however also the use case where you have a `zig build run` running and then modifiying the build script or the sources

1607543337
FireFox317
Im not that pleased that we have to copy the build executable every time

1607543353
andrewrk
hmm yeah let me think about it some more

1607543583
andrewrk
ifreund, good news: I researched crtbegin.so/crtend.so and indeed they come from bad glibc legacy decisions and in zig we don't need them in the linker line

1607543594
andrewrk
s/so/o/

1607543637
andrewrk
since zig also provides the libunwind source we control the entire mechanism

1607543834
ifreund
andrewrk: I assume you saw my messages in #musl? that is good news indeed

1607543846
ifreund
as far as I can tell all were missing is libc.so instead of libc.a

1607543852
ifreund
which is what I'm working on now

1607543881
andrewrk
yeah

1607543901
FireFox317
andrewrk, so currently when i have `zig build run` running (just a sleep loop) in one terminal and then in another terminal `zig build run` again, it blocks on the second command, because of the lock

1607543904
andrewrk
that sounds right. some other interesting tidbits are that musl helpfully puts everything into libc.so so you can just ignore all those other libs

1607543934
ifreund
yeah, so far the more closely I look at musl the more I love about it

1607543955
andrewrk
FireFox317, sorry I have a meeting right now will be back in an hour ish

1607543969
ifreund
If I can get river running on it I'll probably try and switch to a musl based void install

1607543993
FireFox317
The PR (#7041) I submitted fixes that issue, by not locking. But on Windows we have to copy the build exectuable, because we cant change a running executable.

1607543997
FireFox317
andrewrk, Okay no problem! :)

1607544935
leeward
TheLemonMan: It looks like it compiles with your change without errors, though I'm having trouble getting Zig to link the interrupt vector table in for me.

1607544970
TheLemonMan
are you using TI's linker scripts?

1607544984
leeward
No, I'm trying to do the whole thing in Zig.

1607544998
leeward
It works fine if I have zig build-obj and link it myself.

1607545049
leeward
But build-exe and freestanding doesn't bring the C runtime in with it so I'm duplicating it in my Zig code.

1607545059
TheLemonMan
using gnu's ld?

1607545070
leeward
Yeah, using gnu ld works fine.

1607545081
leeward
The thing I'm trying to get working now is zig build-exe

1607545090
leeward
because that would be awesome

1607545104
TheLemonMan
you can use that if you specify a linker script

1607545117
leeward
Oh, I can specify linker scripts for Zig to use! Of course I can.

1607545138
TheLemonMan
I got your program to build and link with lld using one

1607545150
leeward
nifty

1607545219
leeward
I think I'll only need a minimal one to locate the interrupt vector table. I've got the watchdog/stack/data/bss setup already in _start.

1607548777
leeward
TheLemonMan: Did you write that linker script yourself? I'm getting an error from Zig saying elf32-msp430 isn't supported.

1607548794
leeward
(as OUTPUT_FORMAT)

1607548842
TheLemonMan
leeward,

1607548879
TheLemonMan
and that lld bug is fixed

1607548899
leeward
oh, cool

1607548920
TheLemonMan
comment OUTPUT_FORMAT away and it'll work anyway

1607549123
pixelherodev
I think I'm going to stick to CBE for now - Ineed it for other projects, and the official plan is CBE-based compiler, so it's probably better for now

1607549138
pixelherodev
Problem is, I don't know that I'll have the motivation to work on a new compiler once that plan is done :(

1607549145
pixelherodev
ah well, not a big deal

1607549331
leeward
Cool, it linked. Now I just have to get that stupid isr table in.

1607549383
TheLemonMan
@export should do the trick

1607549427
leeward
TheLemonMan: It's saying my vector table won't fit because it overflowed by 32 bytes. That's exactly the same amount I would expect if it were using 32-bit function pointers instead of 16-bit. Coincidence? Maybe.

1607549471
TheLemonMan
is @sizeOf(*T) right?

1607549477
leeward
checking

1607549481
TheLemonMan
that and @sizeOf(fn)

1607549587
andrewrk
FireFox317, back. hmm, and we didn't have this problem before the caching overhaul because we didn't have incremental compilation, so we would put all the input files as part of the cache hash

1607549708
FireFox317
andrewrk, yes that could be the case indeed.

1607549936
leeward
TheLemonMan: @sizeOf (fn () callconv(.C) noreturn) is indeed 2, and the table's size is 64. Now I don't know what's going on.

1607549953
TheLemonMan
A L I E N S

1607549976
leeward
I'm gonna try just dropping half the table and see what it emits.

1607549987
TheLemonMan
oh, what's the @alignOf for a function?

1607550002
leeward
ooh, good question

1607550012
leeward
though I would expect that to affect the table size

1607550064
leeward
Well, it does emit something when I chop the table in half. Gotta figure out what to give objdump to convince it to show it to me.

1607550064
TheLemonMan
it depends on how you're defining the table

1607550096
leeward
-j .vectors

1607550115
leeward
actually, it looks right

1607550118
andrewrk
FireFox317, do you know what all the rules are for what you are allowed to do to running executables in windows? for example, are we allowed to rename the .exe of a running executable? can we then rename something else into the old path?

1607550184
leeward
Huh, maybe the user's guide and my linker script disagree about how big the interrupt vector table is.

1607550310
leeward
Yep, the UG (

1607550311
FireFox317
andrewrk, i have no idea really. I could do some checks. But im not really using windows to code, normally i use linux for that. But i just find hacking on the compiler fun :D

1607550362
leeward
The bottom 16 are all device-specific, so maybe this chip just doesn't use any of them.

1607550372
andrewrk
FireFox317, I just tested it, it works

1607550405
andrewrk
so that's a tool in our windows toolbox - we can overwrite a running exe by renaming it and renaming something else into its place

1607550421
TheLemonMan
leeward, don't forget we support the .Interrupt calling convention for msp430

1607550449
FireFox317
andrewrk, oh that works yeah? Thats awesome

1607550458
leeward
TheLemonMan: Yep, I have ISR defined as `fn () callconv(.Interrupt) void`

1607550465
andrewrk
FireFox317, I suspect we could even skip the first step...

1607550477
leeward
It did correctly generate reti instructions in my empty isr.

1607550518
TheLemonMan
cool, 'tis the year of zig on msp430 then

1607550617
leeward
TheLemonMan: Incidentally, I noticed that .Interrupt generated extra crap when building for AVR. I ended up using .Signal as the calling convention for ISRs there as a workaround. IIRC, it's like that in the LLVM test suite too.

1607550647
TheLemonMan
what kind of crap?

1607550660
leeward
just a few extra instructions

1607550674
TheLemonMan
probably some kind of prologue

1607550677
leeward
ah, an sei

1607550693
leeward
I took notes! "llvm emits an extra sei instruction"

1607550949
leeward
hmm, no blinky

1607551071
TheLemonMan
the extra sei is probably there to make it work across different revisions

1607551093
leeward
of the chip?

1607551110
TheLemonMan
if you look into this manual

1607551179
leeward
Oh wow, that's fun. I must have told GCC what processor I was using.

1607551212
leeward
yep, passed -mmcu=atmega328p to it

1607551241
TheLemonMan
is the sei inserted at the very beginning?

1607551262
leeward
I think so.

1607551266
TheLemonMan
if so that may be a way to enable nested irqs

1607551295
leeward
I'll have to compile it to check...

1607551397
leeward
Yep, the first instruction is sei.

1607551438
TheLemonMan
my money is on the nested irq hypotesis

1607551478
leeward
Could be. It's different behavior from avr-gcc, but that doesn't make it wrong.

1607551702
leeward
Anyway, back to msp430-land. objdump shows me the vector table for the C version, and for the elf I link with gcc, but not (unless I force it to with -j) for the pure zig one. Time to see if anything else is different.

1607551778
TheLemonMan
hmm, how do you define the table?

1607551837
leeward
const VectorTable = packed struct { intX: ISR = isrFn, ... const ISR = fn () callconv(.Interrupt) void;};

1607551843
leeward
export const vector_table linksection(".vectors") = VectorTable{};

1607551898
andrewrk
FireFox317, I think the ideal user experience would be to try to do the standard in-place binary patch of an exe on windows, and if we get the error from changing the running executable, then we resort to the trick of moving the executable to a random temp path, copying it to its original location, flagging the moved exe file with DELETE_ON_CLOSE, and then doing the in-place binary patching on the copy

1607551925
andrewrk
basically, detect the error, and handle it by doing a bunch of syscalls to bend windows to our will

1607551928
TheLemonMan
try with `comptime { @export(vector_table, .{.name = "foo", .section = ".vectors" }) }`

1607551950
TheLemonMan
I think the compiler is eliding the exported variable since no code is touching it

1607552007
leeward
When I pass -D to objdump, it's there.

1607552109
TheLemonMan
check out readelf -l on both the elf files, is the output the same?

1607552127
TheLemonMan
err, readelf -lS

1607552172
leeward
There are a bunch of extra sections in the one Zig generated.

1607552254
TheLemonMan
more is fine, less is ... depends

1607552282
leeward
Yeah, I think it's fine.

1607552317
leeward
Ooh, the align is different.

1607552340
leeward
0x1000 instead of 0x1

1607552353
leeward
I forgot to check that.

1607552385
leeward
and, yeah, they're pretty different

1607552404
leeward


1607552459
TheLemonMan
looks good to me

1607552479
TheLemonMan
the padding is a bit too much but meh

1607552493
FireFox317
andrewrk, yeah that solution sounds way better than copying stuff on all the platforms

1607552516
leeward
Here's a more complete version of that

1607552534
leeward


1607552542
FireFox317
i will see if i have time to implement that tomorrow, but if you want to do it for 0.7.1 you can also do it :)

1607552560
andrewrk
well we can start by simply releasing the lock on the build exe right?

1607552596
FireFox317
yeah definitely!

1607552600
FireFox317
I will adjust my PR to only do that

1607552612
FireFox317
and then we can open an issue to track the problem on windows

1607552645
andrewrk
sounds good. I don't think it has to block 0.7.1

1607552652
leeward
Hmm, I should check if I'm actually using the same linker scripts.

1607552653
FireFox317
i dont think either

1607552680
andrewrk
FireFox317, thanks for talking it through with me :)

1607552689
TheLemonMan
I can't spot anything wrong :\

1607552695
FireFox317
you are welcome :)

1607552758
leeward
Hmm, I'll take a look at the executable and see if there's anything different in the instructions that are emmitted.

1607552803
TheLemonMan
oh wait, .vectors is A in one and AX in the other

1607552841
TheLemonMan
that may explain why you're not seeing the section content in `objdump -d`

1607552870
leeward
ooh

1607552890
FireFox317
andrewrk, #7041 has been updated!

1607552896
andrewrk
thanks

1607552942
leeward
Yeah, that would explain it. I don't think it needs to be X in the ELF; it doesn't store instructions.

1607553285
leeward
Hmm, interesting. The compiler is doing things to my inline assembler. I passed it "mov #0, r15" and it generated a "clr r15" which saves 2 bytes of code space

1607553358
FireFox317
leeward, did you put a volatile on it?

1607553363
FireFox317
or just an asm block?

1607553370
leeward
asm volatile

1607553376
FireFox317
oh interesting

1607553407
TheLemonMan
sometimes the assembler is smart enough to pick another encoding

1607553432
leeward
Oh, right, it could have been the assembler. That makes sense.

1607553694
leeward
Interesting. It also took `mov &0x0200,0x0120` and made it into `mov &0x0200,288(r0)` where r0 is the 0-register and 0x120 is 288

1607553877
TheLemonMan
yeah, you can get pretty creative while generating constants

1607553916
ikskuh
andrewrk: how much would you recommend using libsoundio for gamedev?

1607554056
leeward
Blinking!

1607554081
leeward
I had to `jmp main` instead of `call main` at the end of _start.

1607554152
andrewrk
ikskuh, I think it's a pretty solid library. been meaning to convert it to zig of course :)

1607554165
ikskuh
translate-c it and go? :D

1607554192
leeward
TheLemonMan: I just went from `zig build-exe (many arguments) something.zig` straight to `mspdebug tilib prog something` with no extra steps in the middle, and it worked!

1607554205
ikskuh
i wonder how much work is it to write a game-quality mixer on top of it

1607554226
TheLemonMan
leeward, the next step is wrapping that in a build.zig

1607554245
leeward
TheLemonMan: At the moment, it's in a Makefile, but...you're right.

1607554247
andrewrk
congrats leeward & TheLemonMan  :D

1607554274
leeward
\o/

1607554302
leeward
Alright, I'm going to let this blink by itself for a while and get some dinner. laters

1607554327
TheLemonMan
homemade christmas lights, powered by Zig

1607554598
andrewrk
ikskuh, one of the side-projects I want to make is a game engine designed for rapid prototyping (such as game jams)

1607554620
andrewrk
just some sloppy, dirty 2D fun

1607554647
ikskuh
ah, sounds good :)

1607554674
ikskuh
zig showdown needs some sound

1607554711
andrewrk
I do think libsoundio is a good place to start

1607554735
ikskuh
yeah, i think so, too

1607554751
ikskuh
doing audio in 100% zig is a too hard job for now

1607554755
andrewrk
happy to give out maintainer hats to zig-showdown people

1607554769
ikskuh
:O

1607554782
andrewrk
the hardest thing about libsoundio is when you get a pull request, it's impossible to test it on all the relevant hardware

1607554783
TheLemonMan
yak sharing

1607554799
ikskuh
andrewrk: i can imagine

1607554811
andrewrk
so you get people saying here this patch improves stuff for me

1607554882
ikskuh
question is: does it worsen it for others?

1607554975
ikskuh
oh and andrewrk: is "all platforms are in scope" still true?

1607555003
andrewrk
ikskuh, yes - some notable ones are missing but would be welcome additions

1607555031
ikskuh
i'll go with adding some "tracking/reminder" issues

1607555084
ikskuh
i was discussing calling convs with eleanor earlier

