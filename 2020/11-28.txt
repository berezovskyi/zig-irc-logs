1606529729
RubJubbins
Is there a schedule for Zig hack-athons or are they just ad hoc?

1606529821
RubJubbins
like the ones andrewrk does on YouTube

1606530330
pixelherodev
I'm thinking of going over the CBE in a video Sunday if anyone's interested

1606530389
RubJubbins
pixelherodev: What's the cbe?

1606530410
pixelherodev
C backend

1606530420
RubJubbins
ohh

1606530423
pixelherodev
It produces C89+ code from Zig IR :)

1606530431
RubJubbins
cool!

1606530477
RubJubbins
I'm new to Zig, I've been learning Golang and thinking about Rust but Zig caught my eye

1606530623
RubJubbins
perhaps this Christmas will be Zigmas!

1606530632
pixelherodev
Cannot wait for stage2 to be self-hosting

1606530650
pixelherodev
Going to work on a plan9 backend tonight probably

1606530788
RubJubbins
would plan9 executables work on Inferno?

1606531418
pixelherodev
I doubt it

1606531444
pixelherodev
No

1606531451
pixelherodev
Inferno would require Dis bytecode support

1606531638
karchnu
wow, people knowing plan9, that's quite impressive

1606531655
pixelherodev
karchnu: it's my daily driver :p

1606531663
pixelherodev
I'm more surprised someone

1606531752
karchnu
I wonder how the system is going

1606531931
karchnu
I know that the plan9 OS had a stripped down version of C, without much of the pitfalls.

1606531981
karchnu
But if

1606532215
pixelherodev
karchnu: plan9 supports C99 + POSIX via the ANSI/POSIX Emulation layer

1606532226
pixelherodev
(in addition to the plan9 c)

1606532242
pixelherodev
It also supports Go

1606532273
karchnu
Do you talk about a specific version of plan9 ?

1606532288
karchnu
There were a few of them iirc

1606532323
waleee-cl
9front I think

1606532363
waleee-cl
(per a line in the scrollback/log)

1606532527
pixelherodev
9front, yeah

1606533006
marler8997_
andrewrk, one thing I didn't really consider, choosing not to drop support for platforms in the standard library not only means programs for those platforms need to use alternate libraries, it also means they can't make use of the Zig build system.  So to have a Zig project that works on an older system, you'd have to not only support an alternate standard library, but find an alternative build system...I'm trying to see what the

1606533007
marler8997_
plan is for these things?  Is the plan that you just won't be able to use Zig code on these older platforms?

1606533184
pixelherodev
marler8997_: what platforms do we not support?

1606533213
pixelherodev
but generally, if a platform isn't supported, you're on your own (outside zigland at least)

1606533221
marler8997_
pixelherodev, the one that came up today is Windows 7, since I can't run "zig build" on windows 7 anymore because we're now using unsupported functionality

1606533283
pixelherodev
What functionality?

1606533306
marler8997_
A couple of unsupported class values in NtQueryFileInformation

1606533449
marler8997_
This issue is giving me pause on how much time I'm investing in writing Zig code, it sounds like I won't be able to use that code in all the places I would like

1606533513
marler8997_
Something doesn't "feel right" here and I think I need some clarification on the plan/goals

1606534764
pixelherodev
...

1606534833
andrewrk
marler8997_, can you open an official proposal to specifically change the windows version range? I want to take this proposal seriously

1606534857
andrewrk
s/windows version range/minimum supported windows version/

1606534946
marler8997_
sure

1606534980
marler8997_
although, even if we just said "let's support Windows 7", I'm still pondering and thinking about this problem in the general case...I'm not sure what we should be doing to address it

1606535625
marler8997_
I created an issue specific to windows 7 where I propose extending support until 2022

1606535643
marler8997_
but I still think something doesn't feel right with our approach here

1606535670
marler8997_
I've been thinking about solutions and I'm having a difficult time with it, maybe you've thought about this already and have thoughts/insight to share

1606535723
marler8997_
one idea I have is that even if Zig STD only supports modern platforms, we may want to make the Zig build system support all platforms we can

1606535786
marler8997_
maybe we need to have a competing standard library that aims to be a drop in replacement for the main standard library but supports as many platforms as people want to add to it...a compatibility standard library?  Just throwing around ideas

1606535987
marler8997_
I feel like with a good package manager the standard library issue can be solved through packages, but if the Zig build system doesn't work then we're really make it hard on people to make Zig work on unsupported platforms

1606535996
pixelherodev
marler8997_: or we support everything in stdlib and have people contribute?

1606536007
andrewrk
thanks marler8997_

1606536025
andrewrk
I think it's an important topic & discussion to have

1606536082
marler8997_
pixelherodev, that's one approach, there are downsides though, the time it takes to review/design a good library that supports everything is non-trivial

1606536119
marler8997_
I'm fine with Zig limiting official support, I just want to know there's a reasonable path to unofficially support things as well

1606536177
andrewrk
I do want to make that possible too. I don't have a fully formed idea but I have this vague notion of being able to make an "OS package" that brings support to arbitrary OS's

1606536235
marler8997_
andrewrk, yeah that makes sense, for example we could have a packages that support older versions of windows, but would that approach work with our zig build system?

1606536303
andrewrk
I see your point

1606536348
marler8997_
btw, I'm on Windows 10 now so I'm not blocked by this Windows 7 issue, and I think I can work around not having windows 7 support on my other machines (knowing some day I'll have a path around it).  So I would say let's only support windows 7 if it's more than just me who is wanting it

1606536396
marler8997_
should I create an issue about the "bring your own os" working with the Zig build system, so we document this issue?

1606537141
marler8997_
well here it is:

1606537718
dominikh
given

1606538001
pixelherodev
andrewrk, marler8997_: idea: improve BYOS support so e.g. Win7 can be fully supported with the stdlib by  third parties

1606538024
pixelherodev
Currently, it's limited, and pretty arbitrary

1606539470
ZigPope
Hello Zigpals, I was called here by the spirit of Zig! Does anyone need to unburden (or unban) themselves of #zig related sins?

1606540306
pixelherodev
... wut

1606540511
ZigPope
Our lord and savior, hex, was banned from this channel due to a chicken-and-whiskey related transgression

1606540575
ZigPope
I am here to throw myself at the mercy of andrewrk for the unbanning of a man who, by no fault of his own, was afflicted with chicken-ands

1606540581
ZigPope
er, chicken-hands

1606540815
marler8997_
pixelherodev, yes, improving BYOS to be able to do that would solve any concerns I have

1606540921
ZigPope
what's BYOS? I saw that related to Windows 7 earlier..

1606540945
marler8997_
bring your own os

1606540955
ZigPope
ohh

1606541375
ZigPope
That reminds me of BYOU, Bring Your Own Un(burden/banning)

1606541415
ZigPope
a core tenant among the Zig-faithful

1606542216
pixelherodev
... wut?

1606542566
torque
trying to get yourself unbanned for obnoxious gimming posting by doing more obnoxious gimmickposting is certainly a new one to me

1606542585
torque
*gimmick

1606542894
pixelherodev
Yep

1606543007
JeffBezos3000
torque: I certainly appreciate your sin theta but I've read in the scriptures.txt that our l0rd and savior hex was silent for 34 minutes before being kbanned... kbanned on Zigmas eve? How terrible!

1606543062
JeffBezos3000
kicked, sure, that's a Zigmus tradition but klined, tsk tsk

1606546569
l0rd_chicken
you might as well kick ban me too :(

1606563933
dominikh
here's a fun one: if std.debug.print segfaults, it deadlocks trying to print the crash

1606564348
daurnimator
dominikh: there is a variable to prevent that.....

1606564399
dominikh
daurnimator: tell me more?

1606564900
daurnimator
dominikh:

1606567148
dominikh
daurnimator: I think that only handles nested panics; this case isn't a nested panic, though.

1606568066
semarie
looking at .always_tail @call modifier, it seems to me it is working only with function returning void, which is a bit unexpected for me (I am usually working with scheme language where tail call is a well-defined compoment of the language)

1606568071
semarie
does it is on purpose ?

1606568144
ikskuh
no, you can also return values with always_tai

1606568146
ikskuh
*tail

1606568372
semarie
ikskuh: well, it isn't my experience :) a simple factorial function with tailcall fail to build (stage1) as LLVM complains it can't do it. looking at IR, between 'call' and 'ret', there is code for putting the returned value in storage and load the storage to 'ret' (defeating LLVM 'mustail' attribute)

1606568968
ikskuh


1606568969
ikskuh
oh :O

1606571050
marler8997
should we add sentinel pointer variations in std.mem?  like startsWithZ etc?

1606572124
ikskuh
marler: wdym?

1606572147
ikskuh
it's kinda weird to expect something to startWith a zero-terminated string :D

1606582192
TheLemonMan
marler8997, how's the win10 upgrade going?

1606588287
semarie
ikskuh: I made some advance regarding .always_tail : if the return type is passed as pointer, codegen made code possible with tailcall, but not else. so with u64, it failed

1606588330
ikskuh
hm

1606588346
semarie
the related code is ir_analyze_instruction_return(), specially the if condition with handle_is_ptr(ira->codegen, ira->explicit_return_type)

1606588482
marler8997
TheLemonMan, all updated

1606588483
semarie
I think the codegen is too generic in such cases, and the generated code doesn't permit tailcall (due to "call, store, load, ret" sequence instead of "call, ret")

1606588517
TheLemonMan
semarie, LLVM's tailcall requires a few invariants that Zig doesn't really check

1606588529
TheLemonMan
so don't expect it to really work

1606588542
TheLemonMan
marler8997, got some time to hunt down the CI bug? :D

1606588553
marler8997
sure

1606588717
semarie
TheLemonMan: yes, it should be possible to do bad things. for now, I am able to do recursive calls without filling the stack, so it is fine

1606588765
TheLemonMan
it's not even a matter of doing bad things, if you're not careful enough the result is a LLVM error

