1607732288
andrewrk
ahh that makes sense

1607732327
andrewrk
ifreund, the "auto generated" steps are allowed to be human instructions in

1607732377
andrewrk
e.g. if `run readelf -d | grep whatever` and then paste that into tools/generate_musl_stub.zig or something

1607732704
ifreund
sounds good

1607733899
andrewrk
ifreund, now there are 68 issues closed in the 0.7.1 milestone, so the one you are working on will be the last one ;)

1607735498
ifreund
alright, it's 2am and I'm done socalizing, back to work :D

1607736293
andrewrk
haha

1607736724
ifreund
oh was that a 69 joke that flew over my head?

1607736840
andrewrk
hehe

1607740486
ifreund
andrewrk: PR is good to go afaik, I can update the wiki page with more detailed instructions than the example in the comments tomorrow sometime

1607740516
ifreund
off to sleep now though, it got late

1607744475
proteusguy
Does zig use C-style calling conventions or is it more efficient with function calls? I see it claims to be faster than C, what's the reason for this claim? Looks pretty interesting.

1607746138
llimllib
I have a function that accepts a `[10][10]u8`, but then if I try to change the array I get "cannot assign to constant"

1607746160
llimllib
I'm surprised that this is a constant - how would I know that, and why is it a constant?

1607746180
llimllib
```

1607746723
llimllib
it's something like I'm stuck in a C mindset that the array is a pointer

1607747471
proteusguy
llimllib, all parameters come in as constants.

1607750432
leeward
proteusguy: I think there was a blog post somewhere where some vector code was being better optimized by Zig than by C. That's the source I've seen for the "faster" claim. Zig does what in C is called link-time optimization, which is a speed thing. I don't know if I would describe it as faster than C in general, but Zig tends to emit assembler code that looks a lot like what a C compiler emits in my experience.

1607750474
leeward
It's in the same class, certainly, and if you actually need "faster" it won't get in the way.

1607751660
radgeRayden
I think at some point the claim got updated to being faster at default settings

1607751671
radgeRayden
I always personally thought that claim was a mistake :)

1607752966
karchnu
Zig has many operators, some of them tend to fix undefined behaviors in C. Could one of them be translated into a specific assembly code that the C compiler can't?

1607753393
rowbee
i placed // zig fmt: off/on around a code block i don't want formatted but zigfmt seems to still format it, any ideas?

1607767268
ifreund
rowbee: those comments need to be at the top level for it to work

1607767497
rowbee
hm... can't have just a few lines un-formatted?

1607767524
rowbee
ah well

1607772776
betawaffle
should i be using 0.7.0 or master for my doc generator experiments?

1607772870
ifreund
betawaffle: probably master, though there isn't much difference in terms of language/std features currently, mostly bugfixes

1607777570
ifreund
do we have a way to compare ascii slices alphabetically in the std somewhere?

1607782817
betawaffle
are there things i can do to tell zig's `make install` to be faster?

1607782893
ikskuh
make -j install

1607782900
ikskuh
but the linking step is the longest afaik

1607784523
betawaffle
the slow part for me is zig_build_zig1

1607784533
betawaffle
is that what you mean?

1607784580
ifreund
yeah that's definitely the slowest because the stage1 compiler is slow and a memory hog

1607784604
ifreund
not anything that can be done about that really aside from waiting for stage2 to be ready

1607784616
betawaffle
ah, ok

1607789955
ikskuh
is there a quick way to get the executable directory?

1607789971
ikskuh
nevermind

1607789974
ikskuh
std.fs.selfExeâ€¦()

1607793203
marler8997
Trying out the new windows build option w/out MSVC, but I'm confused by the --override-lib-dir argument

1607793238
marler8997
it says it's the path to the zig source code...so is that supposed to be a subpath to my zig repo somewhere?

1607793279
marler8997
example is C:\zig\lib....but if it's zig source shouldn't it be the src directory?

1607793381
ifreund
well, the source of the std is in the lib dir, maybe that's what it means?

1607793404
marler8997
yeah I'll try that and if it's correct maybe I'll update the wiki

1607794088
marler8997
worked

1607794097
marler8997
I don't understand why that argument is needed though

1607801675
TheLemonMan
yo ifreund, are you setting libc.so soname?

1607801736
ifreund
TheLemonMan: oh no, that's totally it. I just went "musl's .so isn't versioned we don't need that" in my head

1607801744
ifreund
will try and report back

1607801784
andrewrk
ifreund, I was also curious what the rpaths are in the hello binary

1607801818
andrewrk
readelf -d hello

1607801836
andrewrk
ideally it wouldn't have anything in there in the zig-cache

1607801857
ifreund
andrewrk: yeah, it totally does:

1607801883
andrewrk
that should ideally just be a basename

1607802014
ifreund
just setting the soname seems to have fixed it :)

1607802261
andrewrk
wonderful

1607802324
ifreund
do either of you thing getting the link sections rigth for the stubs matters?

1607802340
andrewrk
ehh not really. but I think it would be a 1 liner if you want to do it

1607802368
ifreund
not quite a one liner, there are some edge cases from what I saw

1607802411
ifreund
objdump prints ABS and UND for some symbols and I'm not sure how I would recreate that in asm

1607802436
andrewrk
I'm not either

1607802494
ifreund
actually musl doesn't seem to have any symbols in that category currently, I'll implement it real quick and ignore the edge case :D

1607802523
TheLemonMan
UND symbols are skipped in glibc's abilist.awk

1607802551
TheLemonMan
and so are ABS ones

1607802696
ifreund
thanks lemon

1607802860
leeward
Is unsigned integer overflow really undefined in unsafe build modes? If I overflow my u8, is it possible I'll get 256?

1607802921
ifreund
I'd think so

1607802929
leeward
cool

1607803629
ifreund
got the diff between real musl and the stub objdumps down to

1607804593
llimllib
I'm surprised that creating a struct with a usize member is resulting in a reference rather than a copy (`&Move { .x = x}` where x is a usize) - what's the idiomatic way to ensure that x is copied instead?

1607804657
ifreund
llimllib: why do you say that's resulting in a reference? it should be a copy

1607804684
llimllib
that's certainly what I expected? let me see if I can boil it to a test or prove that I'm being dense

1607804687
llimllib
(very probable)

1607804753
llimllib
nope I'm being dense, and asking made me realize it. apologies.

1607804769
ifreund
no worries!

1607804863
llimllib
(I was thinking that &Move was a type, and I was constructing a new one on the stack, but instead I was changing the literal value of a single const Move)

1607813578
andrewrk
ifreund, what do you think about tying the default link mode to is_native_os rather than is_native_abi?

1607813664
andrewrk
hmm maybe not. I think the way you have it is nice

1607813926
ifreund
andrewrk: my reasoning was that it was weird that building for native-native-musl on a glibc system would link dynamically by default

1607813945
andrewrk
omg `const ally = &arena.allocator` that is so cute

1607813978
ifreund
I stole that from SpexGuy :D

1607813989
andrewrk
I agree, I think your additions for native ABI are an improvement

1607813995
ifreund
it's so much better than `allocator` or `alloc`

1607814015
andrewrk
I love it

1607814032
andrewrk
although I've started using gpa or arena

1607814110
ifreund
yeah I use gpa for gpas too, ally is nice when it's a generic allocator though

1607814118
andrewrk
nice work! just finished reviewing it

1607814180
andrewrk
that was a neat little project. you had to learn some new stuff, it took a good chunk of time, but it's a big deal to have it working now :)

1607814242
ifreund
yeah I definitely learned a lot more about how linking works and how zig does the magic it does

1607814254
ifreund
thanks for the hand-holding :D

1607814423
andrewrk
np, it seemed like you did everything on your own to me, all I did was brainstorm ideas when things were not working

1607814579
ifreund
well it probably would have taken me 10x as long without you and TheLemonMan lol

1607816583
andrewrk
ifreund, that looks squeaky clean. thanks!

1607816677
andrewrk
ready for a merge?

1607816752
ifreund
yep!

1607816887
ifreund
can't wait to merge my river branch blocked on 0.7.1 \o/

1607817025
andrewrk
haha sweet I just made a dynamically linked musl hello world that I can't run on my native machine

1607817098
ifreund
heh

1607817217
andrewrk
it's pretty cool how little that added to our installation size to be able to support that

1607817267
andrewrk
roughly 100 KB install size, 14 KB tarball size

1607817301
ifreund
yeah, it also took very little code once I figured out what the right code was

1607817303
ifreund
musl is great

1607817305
andrewrk
mind updating the relevant wiki instructions?

1607817317
ifreund
sure, no problem

