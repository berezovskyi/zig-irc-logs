1581727299
mq32
i've just read the

1581727322
mq32
you can comptime unroll and optimize the brainfuck code into a native program

1581729608
andrewrk
mq32, yep and you can even run the brainfuck code at compile-time...

1581729715
andrewrk
"how does zig compare to a theoretically perfect programming language?"

1581739407
fengb
Is that a trick question? :P

1581743609
daurnimator
the stream ended rather abruptly

1581750500
daurnimator
silly (?) idea: should usize on x86_64-linux actually be u63?

1581751435
Snektron
Why though

1581751626
mikdusan
what does `zig -target-cpu [cpu]` do? should it effect translate-c/@cImport ?

1581751844
andrewrk
mikdusan, it does - zig passes -Xclang args to clang to tell it about the cpu

1581751940
mikdusan
ah I think I was incorrectly linking -march= to that value

1581753514
daurnimator
Snektron: because you can't have an array or address outside of u63

1581753720
daurnimator
As long as we know we're dealing with only user-mode addresses or only kernel-mode addresses, then 63 bits is more than enough.

1581753802
Snektron
Then you could argue that it should be u48 instead

1581753824
daurnimator
56 bit systems already exist

1581753850
daurnimator
63 bit isn't going to break going forward

1581753890
Snektron
I doubt it

1581753913
Snektron
Rather introduce a intptr

1581753926
daurnimator
Snektron: `usize`

1581753935
Snektron
Currently, yes

1581753949
andrewrk
usize is uintptr_t

1581753963
daurnimator
intel spec that includes 56 bit:

1581753977
Snektron
Either that or have a "native word' size type

1581753987
Snektron
Either way i don't really think its useful

1581754028
daurnimator
FWIW, this came up when I was trying to automatically generate lua bindings for zig libraries. lua only supports 64 bit

1581754036
daurnimator
s/u64/usize/

1581754095
daurnimator
and I realised that the 64th bit was always going to be unused

1581754114
daurnimator
so it would be stupid to campaign for it to be suppored by lua

1581763083
daurnimator
andrewrk: yeah.... so then it would take a u64, not a usize...

1581767223
daurnimator
hmmmm.... @export isn't working for me

1581767329
marijnfs
what's the normal way to build and install zig with zig

1581767337
marijnfs
zig install just silently does nothing it seems

1581767419
daurnimator
marijnfs: hmm? stage2 isn't ready/finished yet

1581767441
marijnfs
i see, so it compiles some stuff but no binary yet

1581767512
daurnimator
marijnfs: stage2 (the zig compiler written in zig) is far from ready.

1581767552
daurnimator
marijnfs: however parts of stage2 are used by the current compiler; e.g. translate-c is written in zig; and linked into "stage0" to make stage1

1581767575
daurnimator
marijnfs:

1581767632
marijnfs
ah thats pretty cool already

1581767746
daurnimator
essentially: it parts of zig (the executable) that aren't needed by the zig compiler itself are eligible to be written in

1581767757
daurnimator
`zig zen` may be the simplest example of that

1581771131
mq32
on the topic earlier: what size does usize have on AVR?

1581771139
mq32
AVR has a lot of different pointer sizes

1581771164
mq32
16 bit for data pointers, or (depending on the device) 15,16 or 17 bit for code pointers

1581771206
mq32
so you have different pointer size for data- and code segments

1581778065
Xatenev
hello, why does fmt.bufPrint takes a slice as first param and not an array?

1581778668
metaleap
Xatenev: would have to be a pointer to an array to not write into a temp copy of your passed array (the arg could be stack-allocated-then-discarded-on-return)

1581778684
metaleap
and a pointer to an array? that's called a slice  =)

1581778897
Xatenev
metaleap: understood

1581778899
Xatenev
makes sense :)

1581778909
Xatenev
metaleap: is it correct that zig does not have post/prefix operators?

1581778920
Xatenev
if yes, I cant find them in the docs :P

1581778929
Xatenev
post prefix increment operators*

1581778965
metaleap
++ and -- are not included, only += and -=

1581778975
Xatenev
I see, thanks !

1581779355
Xatenev
sorry, one more question. what is the best practice for constness? I have many structs that e.g. take a *obj type (pointer to obj), i would like it to accept const obj pointers and obj pointers, can i do that?

1581779399
Xatenev
I'd have guessed that const pointers would cast down to non const obj pointers just fine but thats not the case :)

1581779427
shakesoda
Xatenev: prefer const wherever possible, but note things can cast up to const but not down unless you forcefully cast it away (bad!!!) or copy the object

1581779477
Xatenev
shakesoda: understood, thank you

1581779554
Xatenev
I am rewriting my raytracer from c to zig, its a pleasurable experience :)

1581779598
shakesoda
nice, i've been doing some texture generation and raytracer is on the todo list :)

1581779656
shakesoda
porting some of my gamedev libraries has been (slowly, as i learn) in progress, it has been pleasant

1581779673
Xatenev
cool

1581779729
Xatenev
yea I thought about porting to c++ or rust, but I can't take a lot of pleasure in both languages :( they are just.. to big, you have to waste a lot of time by digging through language features to find out whats the correct way to do something

1581779743
Xatenev
when you really just want to focus on your program, zig seems to be a good fit for me here :)

1581779848
shakesoda
i found rust incredibly frustrating, but not zig

1581779882
shakesoda
zig has everything i like about c, and also improves on most everything i wish were better in c... without bringing in the complicated junk in c++ and rust

1581779893
Xatenev
yeah, exactly.

1581779944
shakesoda
i've been thinking of zig being to c as rust is to c++

1581780103
mq32
i can remove intricacy without removing complexity

1581780202
shakesoda
mq32: on my list for when zig matures slightly more is doing the same for many of my programs

1581780243
shakesoda
hopefully not in too many releases :)

1581780315
mq32
yeah, i love zig too much now that i want to continue hacking around in C++

1581782576
forgot-password
Is it still possible to format floats in non-scientific notation? I recall being able to use "{.3}" to do that, but now "{:.3}" prints the scientific notation

1581783364
metaleap
{d:3.3} gives 123.456

1581783369
metaleap
with a float

1581783387
metaleap
so yeah just d prefix even for floats

1581783903
forgot-password
Oh cool, thanks, I couldn't make that part out in the fmt source :)

1581783974
Xatenev
what is the zig way of ignoring a param?

1581783982
Xatenev
e.g. for(arr) |_, y| { }

1581784278
mq32
forgot-password:

1581784400
metaleap
Xatenev: that looks right but the arr item comes first, the index second (unlike go's `for i,val := range arr`)

1581787283
betawaffle
is a `?void` return type a good or bad idea?

1581787392
fengb
It‚Äôs kinda weird. Why not bool?

1581787407
andrewrk
?void can happen in generic code and make sense. but yeah otherwise it seems you want a bool :)

1581787424
andrewrk
or maybe even an enum with 2 items

1581787425
fengb
Colloquially it‚Äôs ‚Äúnull or void‚Äù üôÉ

1581787434
betawaffle
i'm using it for my SDL_Init wrapper

1581787457
betawaffle
does anyone have a good idea for how to make sdl errors more zig-friendly?

1581787510
andrewrk
betawaffle, maybe this sio_err function from this example can be inspiring:

1581787544
betawaffle
but SDL just has garbage string errors

1581787555
andrewrk
oh. R.I.P.

1581787591
betawaffle
i suppose if that's the case... they don't expect me to handle any of them without crashing. so maybe panic is a reasonable idea?

1581787974
andrewrk
I think panic on initialization is very reasonable

1581787992
shakesoda
betawaffle: i've always handled sdl errors by bailing if it's anything i can't fix by changing gl context version or so

1581788004
shakesoda
i think almost all of them are worth a panic

1581788065
shakesoda
certainly every one related to init

1581788316
andrewrk
heh, found this in ziglang.org referrer logs:

1581789020
metaleap
a fellow voidlinuxer and zigger. the dude's got taste

1581789127
betawaffle
i don't like zigger

1581789443
metaleap
zigster then

1581789452
betawaffle
much better

1581789473
metaleap
my zigga  =)

1581789480
andrewrk
+1, let's avoid a lot of unnecessary problems by avoiding that other word

1581789505
metaleap
lol duly noted

1581789663
andrewrk
I have a branch with an abstraction to do multiple operations in parallel, with no heap allocation, a nice & clean API, and it is a "zero cost abstraction" for both evented I/O and blocking I/O

1581789697
betawaffle
what does that look like?

1581789702
andrewrk
example usage:

1581789725
betawaffle
&async?

1581789758
fengb
There‚Äôs a lot of buzzwords in that sentence :p

1581789782
andrewrk
betawaffle, batch.add(&async self.findNativeIncludeDirPosix(allocator)); is equivalent to batch.add(&(async self.findNativeIncludeDirPosix(allocator)));

1581789793
andrewrk
it's taking the address of a temporary

1581789798
betawaffle
ah, ok

1581789863
andrewrk
this function expresses concurrency and will take advantage of it in evented I/O mode, yet also can be compiled with blocking I/O and it would be as if you didn't put the Batch thing in there

1581789888
andrewrk
this is what I dreamed of years ago

1581791279
andrewrk
oops, those awaits are bogus from the example. updated:

1581792310
Xatenev
metaleap: thanks :) yes I've realized then that that is the way

1581798120
pixelherodev
"zero cost abstraction" in the C++ way, or for real?

1581798127
pixelherodev
That is, is there a comptime cost?

1581798242
companion_cube
looks like fork/join

1581798933
FireFox317
that looks so cool andrewrk!

1581799470
FireFox317
how is the self-hosted libc detection coming along?

1581800131
metaleap
pretty hyped about this async-await story evolving in zig. in c#/ts it blows because infectious/function-colors, and go channels are a right pita to pamper+caress

1581802247
fengb
I like go channels

1581803783
jaredmm
cImport creates an assignment to an undefined variable (__builtin_va_list). Is that #515 or me doing something wrong?

