1595808079
pixelherodev
Assuming CI doesn't catch anything else, that means I can move on to the Next Big Thing :)

1595809392
gruebite
:)

1595809480
pixelherodev
Except that for some reason it's now detecting `wasm64-unknown-wasi-musl` for the triple for wasm32-wasi. Oops.

1595811414
fengb
64 is basically 32

1595811515
pixelherodev
Lol

1595811518
pixelherodev
Seems to be good now, at any rate :)

1595811536
pixelherodev
The enum in std.Target is also used as the value given to LLVM

1595811553
pixelherodev
So by inserting a new one into the middle, LLVM's "wasm32" value and Zig's "wasm32" value were no longer the same

1595811661
pixelherodev
Yay, passing! :)

1595812062
fengb
Ah order matters :P

1595812115
gert_
hey I'm having trouble debugging this error message "cannot assign to constant" it's really stopped me in my tracks, I'm trying to run a self-mutating update method but all my self.vars give me this on assignment

1595812138
gert_
and the instance is var, not const

1595812206
leeward
gert_: Can you paste a snippet somewhere?

1595812247
gert_
it's a little large, where do we like zig snippets? godbolt sadly doesn't have it

1595812266
leeward
godbolt does support Zig

1595812304
leeward
It kinda sounds like you're trying to mutate a function parameter though. If that's the case, pass in a pointer.

1595812334
gert_
even if it's like self.x ?

1595812385
gert_
oh my godbolt has a lot of languages I just haven't looked around proper

1595812622
gert_


1595812861
gert_


1595813544
leeward
gert_: Yep, you have to pass self as *Vec

1595813566
gert_
ah ok, surprised I got this far without my mutables!

1595813576
leeward
Also, you might want to consider using `const Self = @This();` so that `self` can be a `*Self` instead.

1595813612
gert_
I saw that in the ArrayList code, I can skip over the self argument with that too right?

1595813668
leeward
Skip over it?

1595813709
gert_
I'm getting ahead of myself the `fn step (self : *Self)` argument here is still needed

1595813721
leeward
yep

1595813742
leeward


1595813809
gert_
thank you! very excited about this language, I was able to guess function pointer syntax, something I have to look up every time with C

1595813814
gert_
fantastic stuff

1595813821
gruebite
srs

1595813830
leeward
Yeah, function pointers are actually intuitive.

1595813944
leeward
Go style type declarations help.

1595814110
gruebite
i've always preferred that

1595814557
pixelherodev
Dammit, new Zig breaks my code :(

1595814560
pixelherodev
`zig: /var/tmp/portage/sys-devel/llvm-10.0.0/work/llvm/lib/Transforms/Scalar/SROA.cpp:2573: bool llvm::sroa::AllocaSliceRewriter::visitLoadInst(llvm::LoadInst&): Assertion `DL.typeSizeEqualsStoreSize(LI.getType()) && "Non-byte-multiple bit width"' failed.`

1595814584
pixelherodev
At least this time it's an assertion failure and not an infinite loop.

1595814587
pixelherodev
Stupid LLVM.

1595816389
gruebite
zig. is. amazing.

1595843727
ifreund
agreed

1595844193
Snetry
Zig is the best C compiler :)

1595844271
ikskuh
<gruebite> zig. is. amazing.

1595844271
ikskuh
+10

1595844972
ggVGc
hi, I just started looking at Zig, and I'm specifically looking for something "like C", but with local continuations. the async functionality in zig seem to fit the bill, but I'm wondering if there's a way to check if an async function has returned, based on the frame?

1595845005
ggVGc
I am basically asking for a "select" rather than await, I hguess

1595845200
ifreund
ggVGc: something like that is indeed planned, one sec I'll find the issue

1595845221
ifreund


1595845278
ifreund
this one may also be worth reading:

1595845311
ggVGc
ah, great, thanks!

1595845346
ifreund
zig's async/await is currently at functional proof of concept stage, and probably wont progress beyond that in the stage1 compiler. Stage2 is the current focus of development

1595845567
ggVGc
yeah, I understand. I really like what I see currently though, as I've been looking for a language where I can easily make sure I don't have heap allocations, but also have local continuations

1595845574
ggVGc
currently I do it with very hacky macros in C...

1595845691
ifreund
heh, yeah zig does seem to fit that use-case

1595846015
ikskuh
ggVGc: you can just do something like that:

1595846031
ikskuh
fn async(has_returned:

1595846046
ikskuh
note that the pointer requires lifetime management

1595846941
ggVGc
yeah, that's what I do currently, and after reading the github issues, I realise this is basically what a language-supported implementation would need to do also

1595846969
ggVGc
except that every async function would pay the price of having the has_returned flag

1595846976
ggVGc
which isn't great

1595846988
ggVGc
so maybe passing in the flag manually is actually the right thing

1595851624
pixelherodev
ikskuh, andrewrk: all that remains for the initial SPU II support is testing, and I'm not sure the best way to do that. Should we integrate either ikskuh's or my emulator the same way as e.g. WINE / wasmtime? Should the test harness be extended to support raw byte-wise comparison of the output?

1595852029
ikskuh
pixelherodev: i think running a modified version of the emulator would be wise

1595852046
ikskuh
so one that is tailored for the test harness

1595854284
pixelherodev
Hmm, maybe

1595854591
pixelherodev
ikskuh: in the same way as with e.g. wasmtime, as a ChildProcess, right?

1595854778
pixelherodev
I could extract the interpreter from mine and make it so we feed it the binary over stdin or something

1595855145
pixelherodev
ikskuh: better yet, if we can standardize a way of providing the input, we can make it so that the tests can run with

1595855172
pixelherodev
(given a standardized path, perhaps, or have the test harness check for both)

1595855236
ikskuh
pixelherodev: why as a child process?

1595855244
ikskuh
we can just link that as a library and use it directly from zig

1595855274
ikskuh
you still think in terms of "defined systems", like wasmtime uses wasi (probably)

1595855287
ikskuh
SPU Mk II doesn't have

1595855306
ikskuh
so you cannot even test input/output without having any kind of definition how to do these

1595855347
pixelherodev
True

1595855360
pixelherodev
gtg back later

1595855392
ikskuh
so we have to define a I/O layer anyaways

1595855408
ikskuh
and we still have undefined instructions that can be used for this :)

1595855425
ikskuh
so for example you can write tests that verify that the code emitted a struct in a certain memoryspot

1595855439
ikskuh
and the test itself will end with a "struct_here 0x1234" instruction

1595855457
ikskuh
which will tell the test harness that the compiled placed the structure at this position

1595859095
pixelherodev
ikskuh: for those, we could just analyze the produced binary directly

1595859098
pixelherodev
No need to actually execute it

1595859120
ikskuh
i'm talking about instruction access, not serialization

1595859122
ikskuh
so

1595859123
ikskuh
if

1595859140
ikskuh
ptr.* = Point { .x = 10, .y = 20 }; // gets serialized correctly

1595859141
pixelherodev
I think I gotcha

1595859143
pixelherodev
Yeah

1595859181
pixelherodev
Need to wait for feedback from Andrew, but I'll probably just write a new from-scratch interpreter specifically to test the backend

1595859196
pixelherodev
Using the common imports which are already used for instruction generation

1595859199
fengb
Write a wasm backend

1595859224
pixelherodev
I'm planning on expanding CBE + SPU II backends before I work on any new ones

1595859360
pixelherodev
fengb: if you have a useful backend header thingy so I don't have to squint at the spec for six hours, then sure

1595859367
pixelherodev
Not like it's that much work

1595859376
fengb
Header thingy?

1595859399
ikskuh
pixelherodev: it's not like it's hard to write a SPU II emulator .)

1595859412
pixelherodev
Exactly, I just want to make sure Andrew's on the same page

1595859424
pixelherodev
fengb: If you look at my SPU II PR, you'll see src-self-hosted/codegen/spu-ii.zig

1595859436
pixelherodev
There's also x64 + x86 files in that folder in master

1595859563
pixelherodev
fengb: basically, architecture defines

1595859584
pixelherodev
Heck, mind going to a private chat and I'll just bother you with WASM questions? :P

1595859725
fengb
Sure, not guarantees I'll respond though >_>

1595859742
pixelherodev
That's fine :)

1595859767
pixelherodev
andrewrk: any objections to the plan ikskuh and I were discussing re: integrating an interpreter for testing?

1595859931
protheory8-new-m
Hi, if I want to accept string as function argument should I use `[]const u8` or `[:0]const u8`? Both seem to work.

1595860069
ifreund
protheory8-new-m: []const u8 unless you need the terminating 0

1595860085
ifreund
(e.g. if you need to pass it to a C function)

1595860122
protheory8-new-m
Thanks, that makes sense. Also, what does `const` mean in `[]const u8`?

1595860202
protheory8-new-m
Does that mean that I can't change u8 values in array?

1595860221
fengb
Yeah, "slice of constant u8s"

1595860234
ifreund
[] means its a slice, which is like a struct with ptr and len fields

1595860252
ifreund
const means you cant modify the memory being pointed to

1595860335
protheory8-new-m
It seems like default string type in Zig is `*const [6:0]u8`?

1595860358
ifreund
that's the type of string literals yes

1595860382
protheory8-new-m
Is that constant pointer to array of `u8` with 6 elements and a 0?

1595860392
ifreund
yep

1595860409
protheory8-new-m
Thanks, so I'm wondering why is pointer needed here?

1595860470
ikskuh
protheory8-new-m: it's a array, so writing const str = "foo"; would create a copy of that array instead of referencing the literal

1595860483
ikskuh
also arrays don't coerce to slices, but pointers to arrays do

1595860508
ifreund
also you usually don't want to pass arrays around by value everywhere

1595860511
ikskuh
so if you have a function foo(slice: []const u8) you can pass a "foo" in there, but you cannot pass a array directly

1595860646
protheory8-new-m
Thanks!

1595862133
fengb
Zig optimizes arrays-by-value into a reference if it'd be faster

1595862149
fengb
The bigger problem is that arrays must have a known fixed size

1595863779
scientes
fengb, on --release-fast that shouldn't matter

1595863828
scientes
(however llvm doesn't understand what slices are, so maybe...)

1595863852
scientes
MLIR however could probably be taught what slices are

1595879384
leeward
Am I just failing to find path manipulation utility functions, or do they not exist?

1595879601
leeward
ah, fs/path

1595884674
pixelherodev
andrewrk: any objections to including a tiny interpreter with which to test the SPU backend?

1595884688
pixelherodev
it passes CI now, the last thing to do is figure out testing

1595884699
andrewrk
pixelherodev, no objections. let's put it in the std lib

1595884732
pixelherodev
andrewrk: I'm not sure stdlib is right for this

1595884763
andrewrk
wouldn't you want to use it with `zig build` to run SPU Mark II tests?

1595884769
andrewrk
same deal with WASI

1595884777
pixelherodev
Ah, true

1595884799
pixelherodev
I think that we're getting close to the point that ZBS should be extracted from stdlib

1595884841
andrewrk
what does that mean, in practice?

1595884868
pixelherodev
If we're keeping it in the same repo, probably moving it from lib/build{/,.zig} into lib/build/

1595884873
pixelherodev
lib/std/build *

1595884877
pixelherodev
From lib/std/build into lib/build

1595884916
andrewrk
what problem is that intended to address?

1595884922
leeward
So then `const build = @import("build")`?

1595884952
pixelherodev
Yeah - it's mostly that I don't think that an interpreter for a single target belongs in the

1595884954
pixelherodev
want*

1595884975
pixelherodev
That's not to say it shouldn't be considered a part of Zig proper the way stdlib does, but that it should be treated as its own library

1595884996
andrewrk
what you are proposing has no impact on the user and basically amounts to pointlessly moving files around

1595885021
pixelherodev
It's mostly about keeping things clean

1595885026
pixelherodev
`ls lib/std | wc -l` -> 88

1595885044
pixelherodev
But it's really not a big deal

1595885135
pixelherodev
andrewrk: so, keeping future targets in mind, should this be part of std/build/targets or something?

1595885185
shakesoda
it's not really strictly a problem if there are a lot of things in a folder

1595885200
shakesoda
subfoldering things a lot is a great way to lose track of where anything is anymore

1595885225
pixelherodev
True

1595885265
andrewrk
pixelherodev, if there's one thing I've learned in 19 years of software development, it's to solve the hard problems first, and the easy problems last. where to put the .zig file is one of the easy problems. let's talk about this once you have a working emulator

1595885265
leeward
The standard library has tons of target-specific code. See std.os (-> std.posix)

1595885269
shakesoda
especially for those among us who are prone to losing things

1595885342
andrewrk
the biggest problem with discussing the color of the bike shed is the opportunity cost of the energy spent on it, that could have been spent on anything else

1595885371
andrewrk
for example, here I am taking a break from stage2, typing 3-4 sentences about where to put files in the file system

1595885372
shakesoda
are we expecting to take some passes at cleaning stdlib out in future pre-1.0 versions

1595885387
pixelherodev
leeward: true

1595885400
pixelherodev
andrewrk: very good point

1595885405
andrewrk
shakesoda, yes

1595885412
pixelherodev
To be fair, I can have a working interpreter in like ten minutes

1595885413
leeward
But what will the bureaucrats do? That committee to revise the color of the folder that holds the regulations are in needs to generate minutes.

1595885416
pixelherodev
It's really not that hard :P

1595885434
shakesoda
andrewrk: cool

1595885445
andrewrk
great. put it somewhere that makes sense to you, open a PR, and then we'll figure out what to do

1595885489
leeward
I would argue that "naming things" qualifies as a hard problem, but that doesn't justify spending tons of effort on it before the "things" work.

1595885496
pixelherodev
It's part of the SPU II PR

1595885501
leeward
</pedantry>

1595885530
pixelherodev
Coming shortly

1595885540
leeward
It's one of the top 2 hardest problems in computer science.

1595885542
shakesoda
leeward: it's especially bad when the piece is either really abstract or really specific

1595885552
fengb
andrewrk: is there a plan on standardizing `@import("build_options")` more? It feels awkward to need a separate flow for running tests

1595885573
shakesoda
or there is no name you could possibly use which is semantically valuable anyways

1595885575
andrewrk
fengb, yes - that API is barely beyond proof of concept at this point, and it needs some love

1595885579
shakesoda
(this happens constantly in math)

1595885581
fengb
Ah okay

1595885597
andrewrk
but it is very intentional that you can pass values on to your code from the build system

1595885635
fengb
Right, it just feels a little awkward that it crashes when not enabled so there needs to be internal juggling

1595885748
pixelherodev
For now, going to have it be part of stage2 and integrate it with the test suite; I'll need to shuffle some other pieces into stdlib with it afterwards anyways

1595885784
pixelherodev
Actually...

1595887141
pixelherodev
I'd bring in my JIT support, but that would mean a much bigger dependency :(

1595887287
andrewrk
hmm I'm at the point in stage2 where I'm deciding between making `@as(u32, foo) = bar;` work or emit a compile error "cannot use @as expression as L-Value"

1595887301
andrewrk
probably the latter :)

1595887341
andrewrk
`@bitCast(T, foo) = bar;` on the other hand 🤔

1595887420
pixelherodev
?

1595887431
pixelherodev
Why would the former be allowed?

1595887452
pixelherodev
Why would

1595887499
pixelherodev
`@blah(T, foo) = bar`?

1595887594
ikskuh
@bruh(T, foo)

1595887651
leeward
Yeah, I don't see an advantage of `@bitCast(T, foo) = bar;` over `foo = @bitCast(U, bar);`

1595887667
lemmi
foo could be a struct field

1595887688
fengb
I needed to squelch an alignment check

1595887690
leeward
So? It's still got a type.

1595887706
lemmi
leeward: yeah, didn't think it through

1595887723
fengb


1595887732
lemmi
on the other hand, why wouldn't you allow it?

1595887735
fengb
This would look slightly less gross with @bitCast lhs

1595887748
fengb
Arguably it should be gross looking

1595887887
leeward
lemmi: I think the burden on including a new feature should be on the introducer to justify its existence, and casting l-values would be a pretty big departure from other languages.

1595887928
leeward
s/burden on/burden when/

1595887965
leeward
fengb: That should definitely look gross.

1595887975
lemmi
leeward: maybe. to my mind not allowing it on the left side looks like a exception to me

1595887987
pixelherodev
andrewrk: is there a specific reason to be considering it?

1595888056
leeward
`value = expression` is pretty universal, and keeping the type of value fixed to the type of expression makes sense.

1595888140
pixelherodev
I think @as in LHS

1595888159
pixelherodev
Whether that's in and of itself a reason to not support it is up for debate

1595894070
ronsor
I think zig might be the only thing that could replace C for me

