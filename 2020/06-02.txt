1591056357
pixelherodev
Of course, if I then max out all four cores with compilation, it goes down noticably :P

1591057292
pixelherodev
andrewrk: something like

1591057297
pixelherodev
(error_tests)

1591057341
pixelherodev
shakesoda: is there anything other than powertop that is worth using as well?

1591057366
andrewrk
pixelherodev, yeah something like that

1591057378
pixelherodev
gotcha

1591057406
shakesoda
pixelherodev: i just use powertop

1591057425
pixelherodev
Going to leave the other three in place for now, merge their functionality into Stages, add addZIRCase functions (and port the existing ones so that they generate single-stage cases), port over tests

1591057430
pixelherodev
That's the path for this specific PR

1591057442
pixelherodev
adding more tests / reenabling old tests could come later

1591057462
pixelherodev
One nice feature about this design is that it allows seamlessly adding additional stages later on

1591057466
pixelherodev
e.g. OptimizationStage

1591057570
leeward
Alright, here's a kinda-minimal version of a problem I'm having:

1591057661
pixelherodev
... okay this is the last help I'm giving for today, I swear

1591057663
pixelherodev
Taking a look

1591057702
leeward
;)

1591057708
pixelherodev
(I really need to get more work done :P)

1591057761
pixelherodev
Hmm

1591057769
pixelherodev
That's what I would've expected to see with maybe 0.5

1591057770
pixelherodev
not 0.6

1591057903
pixelherodev
This is almost definitely a bug, unless I'm missing something

1591057923
leeward
I was afraid you'd say that.

1591057947
fengb
I don’t think you can stick `var` in a struct

1591057956
pixelherodev
ahh, yeah

1591057958
pixelherodev
Good catch

1591057963
pixelherodev
The compiler should be refusing that

1591057974
leeward
Well, that's 1 bug then.

1591057975
pixelherodev
leeward: give me one sec and I'll paste a fixed version

1591058024
leeward
Does it involve passing the type in to a function and constructing the struct with that type?

1591058147
pixelherodev
Yeah

1591058149
pixelherodev
just about done

1591058167
pixelherodev


1591058198
pixelherodev
You could probably make Thing more convenient to use

1591058218
pixelherodev
e.g. make it take in `var`, and do the `RealThing(@TypeOf(arg)).init(arg)`

1591058234
leeward
Yep, that's where I was headed.

1591058236
leeward
Thanks.

1591058247
pixelherodev
Thank fengb :)

1591058277
pixelherodev
anyways, I've got a stage2 to fill up with erros

1591058279
pixelherodev
errors*

1591058282
pixelherodev
in a good way

1591058285
pixelherodev
;)

1591058287
leeward
Also thanks to fengb! I'll look to see if there's a compiler bug about `var` in structs not being noticed.

1591058291
leeward
ttfn

1591060669
ttmrichter
Is there a backend for zig that targets the ARM Cortex-M line at all?  I'm out of touch with LLVM and not sure if they ever did that.

1591061045
daurnimator
ttmrichter: the cortex m line is just normal arm

1591061053
daurnimator
very well supported by LLVM

1591061358
fengb
Oh I think that was added to support var in typeInfo, but it forces the struct to be comptime only

1591061381
fengb
So maybe not a bug as much as syntax ambiguity

1591061667
shakesoda
ttmrichter: you should be good to go as long as you specify the correct cpu features for your target

1591061675
shakesoda
barring any odd bugs

1591061758
daurnimator
shakesoda: no need; we have the cpu models built in IIRC

1591061771
shakesoda
daurnimator: well in that case, just making sure you specify the right one :)

1591061803
daurnimator


1591061849
ttmrichter
Cool. I'm going to give zig a try for embedded systems then.  I'm tired of C.  Like REALLY god-damned tired of it.  :D

1591061876
shakesoda
i've been really happy with it, although i think c will continue to have a place in my life

1591061889
shakesoda
i think my bias toward being happy with it is fairly clear based on, well, being here

1591061969
ttmrichter
I'll start assembling a quirky Zig toolchain in my Copious Free Time and maybe start wrapping peripherals in libraries and such.

1591062027
leeward
Be warned, ttmrichter: header file generation is not done, so if you want to link to Zig libraries from C you may hit some bumps.

1591062029
pixelherodev
The only problem with targeting ARM is that you currently

1591062035
pixelherodev
Wait, what?

1591062037
pixelherodev
That's not true

1591062040
pixelherodev
Headers generate just fine IIRC

1591062043
pixelherodev
-femit-h

1591062043
leeward
There are bugs.

1591062045
pixelherodev
Ahh

1591062053
pixelherodev
Gotcha

1591062057
pixelherodev
Good to know

1591062083
ttmrichter
leeward: I'd be doing things from scratch here.

1591062083
leeward
I have a medium sized project that's waiting for that bit of the codebase to stabilize.

1591062084
pixelherodev
But yeah, once I'm done with the errors_test branch (which

1591062096
leeward
No problems then. Enjoy.

1591062108
ttmrichter
The idea being a whole-hog switch to Zig.  It's not as if these beasts are multi-billion transistor devices after all.  :D

1591062119
pixelherodev
Whole-hog?

1591062122
pixelherodev
Ahh

1591062123
pixelherodev
Gotcha

1591062163
ttmrichter
Just ground-up write of the libraries to C.  Starting with using the register description files to generate the structures, etc. for the various devices.

1591062169
ttmrichter
s/C/Zig/

1591062176
ttmrichter
Damned language infects everything.  :D

1591062179
leeward
hah

1591062183
leeward
Yeah, that sounds fun.

1591062189
daurnimator
I think someone did a generation thing from.... srt files?? I don't recall wel

1591062201
ttmrichter
That's where I'd go for ARM for sure, yes.

1591062208
ttmrichter
So ... RISC-V?

1591062210
pixelherodev
srt?

1591062214
pixelherodev
... subtitles?

1591062216
pixelherodev
ttmrichter: ooh

1591062218
pixelherodev
RISC-V?

1591062220
ttmrichter
SVD I think he means.

1591062220
pixelherodev
What about it?

1591062232
ttmrichter
Does LLVM support RISC-V as a back-end yet?

1591062235
pixelherodev
Yep!

1591062243
pixelherodev
in LLVM 10, it's an official target

1591062249
pixelherodev
Zig will support it, too.

1591062252
pixelherodev
That's not a question.

1591062252
ttmrichter
Crap!  Uh ... Let me desperately pull something out of the air.  STM8?

1591062260
pixelherodev
because I'm going to make sure of it.

1591062267
daurnimator
ttmrichter: infact

1591062267
pixelherodev
STM? Doubt it.

1591062273
pixelherodev
There's an AVR backend though IIRC

1591062283
leeward
There is, though it's not great.

1591062286
leeward
I fiddled with it for a bit.

1591062288
ttmrichter
There.  Now I have something to complain about!  Yay!

1591062289
pixelherodev
Yeah, not surprised

1591062291
daurnimator
ttmrichter: ^ basic project that gets zig running on a freestanding risc v device

1591062312
pixelherodev
Would be awesome to compile the stage2 compiler to run in bare metal

1591062314
ttmrichter
I have a GD32V103 device at home that I haven't touched yet.

1591062321
pixelherodev
GD32?

1591062333
ttmrichter
Gigadevices I think the company nameis?

1591062338
pixelherodev
Ohh, that's an actual physical model number?

1591062341
pixelherodev
I was like

1591062344
pixelherodev
GD32 isn't a RISC-V base!

1591062347
pixelherodev
:P

1591062348
leeward
I'm pretty sure llvm doesn't and will never support xap.

1591062353
pixelherodev
RV32, I assume?

1591062356
leeward
It supports arc though, right?

1591062360
pixelherodev
Ueaj

1591062362
pixelherodev
Yeah

1591062372
pixelherodev
ttmrichter: RV32I or 32E?

1591062373
fengb
But... we’ll have a C backed so it’ll work right?

1591062381
fengb
Backend

1591062384
pixelherodev
in theory, yeah

1591062390
ttmrichter
My doc package is at home, but it's the really small RISC-V option.

1591062406
pixelherodev
That's 32E

1591062407
pixelherodev
Embedded

1591062413
pixelherodev
16 registers, then?

1591062414
ttmrichter


1591062415
pixelherodev
Instead of 32?

1591062417
ttmrichter
That's theline.

1591062418
pixelherodev
ahh thanks

1591062430
ttmrichter
They just entered the RISC-V field.

1591062432
pixelherodev
Casually w3ms it

1591062437
daurnimator
RV32I is pretty damn tiny FYI

1591062448
pixelherodev
I know?

1591062454
pixelherodev
But RV32E is literally designed for embedded

1591062459
pixelherodev
hence 16 registers instead of 32

1591062459
daurnimator
the FOMU fits a RV32I core on an FPGA that fits inside a usb port

1591062469
pixelherodev
daurnimator: I'd hope I know that

1591062474
pixelherodev
given I'm implementing the great thing :)

1591062478
pixelherodev
was going to say the damn thing

1591062481
pixelherodev
but it's freaking awesome

1591062505
pixelherodev
I've mentioned that Project Tricarbon uses RISC-V as its IR now :)

1591062514
ttmrichter
I'm really excited to see RISC-V breaking out into the embedded field myself.

1591062529
ttmrichter
It'll be nice not to be beholden to the ARM licence on things.

1591062557
pixelherodev
Yeah

1591062598
pixelherodev
Only downside is what it might do to the markets if ARM is out of the equation

1591062620
pixelherodev
It might potentially help Intel consolidate power, for instace

1591062627
pixelherodev
Though that's far enough away not to be worth worrying about

1591062642
leeward
I don't think we have to worry about ARM dropping out any time soon.

1591062672
pixelherodev
I know

1591062679
pixelherodev
I'm talking reaallly long term

1591062686
pixelherodev
Like I said, not worth thinking about

1591062689
pixelherodev
Anywho

1591062692
leeward
By then, we'll all be running the HURD on SPARCstations.

1591062694
pixelherodev
that side opens in w3m w/o issue

1591062697
pixelherodev
site*

1591062699
pixelherodev
but

1591062709
pixelherodev
there's not a single instance of RV32 anywhere on the page.

1591062711
pixelherodev
Not. One.

1591062723
pixelherodev
I mean really, if I'm buying a chip, can't I at least know the ISA first?

1591062731
leeward
No!

1591062735
pixelherodev
"RISC-V" isn't really enough info to go off of there

1591062747
pixelherodev
clearly it's a 32-bit standard (GD32)

1591062751
pixelherodev
but which one?

1591062753
ttmrichter
There's downloadable spec sheets.

1591062754
pixelherodev
Which base, rather?

1591062757
leeward
I once worked on a processor where we had to sign an NDA to get the instruction set, and the PDFs were password protected and watermarked.

1591062764
pixelherodev
That's..

1591062767
pixelherodev
hilarious and stupid

1591062768
leeward
I'm not sure what they thought their product was.

1591062777
ttmrichter


1591062787
pixelherodev
Thanks

1591062811
leeward
Oh, you want to USE our processors? Well, they're super advanced and our competitors would kill to know how to use them, so...you'll have to sign these.

1591062826
ttmrichter
Sounds like effin' NXP to me.

1591062843
daurnimator
TI had a similar thing for their DSPs

1591062864
ttmrichter
"Here's a data sheet that doesn't actually give you the information you need to evaluate whether our product is suitable or not.  If you want the full datasheet, you have to order at least 10,000 units."

1591062868
pixelherodev
You have got to be kidding me.

1591062871
leeward
Well, I get a "No route to host" when I try to go to that particular company's web site now.

1591062873
pixelherodev
Seriously.

1591062878
pixelherodev
The datasheet doesn't mention the ISA.

1591062883
pixelherodev
That's ridiculous.

1591062889
leeward
NXP: because Freescale got such a terrible reputation.

1591062895
pixelherodev
I might have to e.g. find the register count or something

1591062924
ttmrichter
I know one of their docs did because I decoded the whole alphabet soup to figure out what was inside.

1591062938
ttmrichter
Maybe I have to go to the "Bumblebee Core" docs.

1591062974
ttmrichter
Wait, page 22: RISC-V compliant little-endian RV32IMAC (32GPRs) ;

1591062979
ttmrichter
It was from the datasheet.

1591062997
pixelherodev
we're looking at different sheets then

1591063009
pixelherodev
`GPR` gives zero results

1591063028
pixelherodev
and page 22 doesn't say that...

1591063048
pixelherodev
Which sheet?

1591063076
leeward
Does anyone know the magic incantation to get the `test` executable to plop down in the directory where `zig build` is run?

1591063088
pixelherodev
leeward: which test executable?

1591063094
ttmrichter
The sheet that downloads when I hit

1591063094
pixelherodev
addExecutable?

1591063097
leeward
the `zig build test` I mean

1591063104
pixelherodev
... for what project?

1591063112
pixelherodev
That's dependent on the build.zig of the project in questin

1591063114
pixelherodev
question

1591063123
leeward
Right, I want to know what to put in the build.zig.

1591063132
ttmrichter
There's some magic redirection going on.  Let me see if I can find the terminal URL.

1591063148
pixelherodev
I'll take your word for it, it's fine

1591063158
pixelherodev
leeward: you mean, to

1591063159
pixelherodev
One sec

1591063171
ttmrichter


1591063175
ttmrichter
That's the one that opens at the end.

1591063181
pixelherodev
Pretty sure that's what I'm looking at

1591063182
daurnimator
ttmrichter: for me at that url I get GD32VF103_Datasheet_Rev_1.2-2.pdf

1591063183
pixelherodev
No wait

1591063186
pixelherodev
^

1591063188
pixelherodev
yeah

1591063191
ttmrichter
Weird.

1591063200
ttmrichter
Why would we get two different docs?

1591063205
daurnimator
you logged in?

1591063214
leeward
I have a basic b.addTest("src/filename.zig") type thing, and can't figure out how to get it to dump the test executable someplace easy to find/debug.

1591063242
pixelherodev
leeward: LibExeObjStep in build.zig has `output_dir: ?[]const u8`

1591063242
ttmrichter
Nope.  Must be GeoIP weirdness.

1591063243
ttmrichter


1591063245
pixelherodev
Change the output_dir

1591063255
ttmrichter
That's where the Bumblebee Core itself is documented.

1591063262
leeward
pixelherodev: I tried setting that to ".". No joy.

1591063264
pixelherodev
e.g. if `a = b.addTest...`, a.output_dir = "blah"

1591063269
pixelherodev
std.fs.cwd()?

1591063277
pixelherodev
There might be a way to get cwd as a path

1591063291
ttmrichter
Anyway, weirdness aside, god DAMN am I glad that Zig will be supporting RISC-V as well as my Cortex-M devices.

1591063304
pixelherodev
Anyways, heading off

1591064579
pixelherodev
andrewrk: you still on?

1591064637
pixelherodev
Eh

1591064642
pixelherodev
Worst case you have me redo some work

1591066126
pixelherodev
andrewrk: stage2 incremental compiler idea: a way to serialize the current state, so that if you're working on a giant (think Chrome) project, and you reboot or something, it still can continue where you left off instead of needing a fresh build

1591067041
andrewrk
yeah, planned

1591068475
pixelherodev
cool :)

1591068613
pixelherodev
glad to hear we're on the same page

1591068640
pixelherodev
That means more focus for the next bikeshed!

1591068647
pixelherodev
Should it be green, or blue this time?

1591068649
pixelherodev
:P

1591071138
andrewrk
blue

1591071563
daurnimator
transparent red.

1591074334
ttmrichter
Peach, leaning more to the yellow end.

1591074375
ttmrichter
Looking over the Zig manual, am I correct in reading suspend/resume as coroutines and async/await as reactors?

1591074800
daurnimator
ttmrichter: what is a "reactor" here?

1591074857
daurnimator
ttmrichter: think of `async foo()` as "start running foo(), but I don't want the result yet"

1591074875
daurnimator
while `await frame` is "okay I want that result now"

1591074895
daurnimator
`await async foo()` is equivalent to `foo()`

1591076115
ttmrichter
daurnimator: The most well-known reactor would be Node.js right now.

1591076137
daurnimator
ttmrichter: so reactor=event loop implementation?

1591076148
ttmrichter
Event loop plus callback Hell, yes.

1591076181
daurnimator
ttmrichter: ah. no then. zig's "reactor" is std.Event.loop

1591076214
ttmrichter
OK, so this is more like a futures thing?

1591076227
daurnimator
ttmrichter: depends what you mean by futures....

1591076274
ttmrichter
I call a function and it goes its merry way until I want the results.  It may or may not be executing in parallel, but when I ask for the result it either returns an extant one or it stops and waits for one.

1591076291
ttmrichter
So I'm saying "I want the result to this at some undetermined point in the future".

1591076298
daurnimator
sounds close enough.

1591076335
ttmrichter
So the designer has thrown the entire concurrency kitchen sink into it?  :D

1591076356
daurnimator
ttmrichter: so there's a few settings that control it

1591076415
daurnimator
ttmrichter: in your root .zig file, you can have a `pub const io_mode` -> the standard library looks at this and decides if it should use e.g. blocking IO, or a threadpool.

1591076574
daurnimator
ttmrichter: e.g. see

1591076635
daurnimator
if `read()` returns `EAGAIN` and you have an event loop, then give it to the event loop (which

1591077222
ttmrichter
I am looking forward to experimenting with Zig in the embedded world.  What's a good stress test for its ability to keep small?  I have a few MCUs with about 4KB of SRAM and 16KB of Flash.  Is that too small or could I feasibly do something useful in that space?

1591077268
daurnimator
ttmrichter: I don't know... what would you implement in that much space with C?

1591078245
ttmrichter
Last time I worked with one, I implemented a power switch.  :D

1591078255
ttmrichter
Oh, no.  A joystick controller too.

1591078395
daurnimator
ttmrichter: try doing that in zig then?

1591089124
ttmrichter
daurnimator: First step is a blinky, obviously.  :D

1591099213
gonz_
ttmrichter: It's unlikely that you'll see a kitchen sink approach in Zig generally speaking.

1591105881
pmwhite
Someday I'd like to see a language who's design philosophy is to have every feature imaginable.

1591105906
fengb
C++? Scala?

1591105978
leeward
Lisp?

1591106017
leeward
Really though, sounds like modern C++.

1591106048
ifreund
pretty much yeah

1591106077
BaroqueLarouche
D also

1591106106
companion_cube
or scala, indeed

1591106175
ifreund
yeah D is beating C++ in that it has a freaking "optional" garbage collector

1591106221
gonz_
D is a lot more targeted also in that Walter Bright's tried to add "the future" to D several times.

1591106232
leeward
Boehm is an optional GC for C++.

1591106237
pmwhite
If D, Scala, or C++ were actually the kitchen sink language, they would have logic programming too.

1591106271
ifreund
true, someone should make a proposal!

1591106274
fengb
I’d expect logic programming to be complete incompatible with imperative

1591106289
companion_cube
pmwhite: heh, monads can do that in scala™

1591106290
fengb
Although I suppose C++ would be willing to prove me wrong

1591106297
companion_cube
and implicits are already logic programming at type level :D

1591106302
ifreund
inline prolog subroutines

1591106308
leeward
Take the Lisp approach and write a prolog in C++?

1591106342
fengb
Hmm... can we use comptime to implement prolog?

1591106349
leeward
almost certainly

1591106353
fengb
I dub it... nooblog

1591106382
leeward
There's an interesting idea: using comptime Zig code to implement other languages.

1591106404
leeward
Not a good one, mind.

1591106428
pmwhite
How would you write a line of prolog if you were to do that?

1591106444
companion_cube
in a []u8 :p

1591106446
alehander92
you can use it as a type system inference engine

1591106447
pmwhite
Zig doesn't have syntax quoting.

1591106449
companion_cube
and the comptime executes it!!!

1591106450
alehander92
i tried once for python

1591106463
leeward
@embedFile

1591106465
alehander92
it was very naive as i am not good at those

1591106468
fengb
You can stick anything into a comptime string and create an ast

1591106470
alehander92
but it kinda fits

1591106479
fengb
Feels a little cheaty though

1591106488
pmwhite
Oh, lol, I guess a string would work. I like @embedFile though.

1591106500
shakesoda
the crazy metastuff people are doing in zig and the package manager nonsense are already pushing beyond the things i actually want, language-wise :D

1591106512
pmwhite
I see what y'all are thinking...compile-time evaluation of other languages.

1591106515
shakesoda
PLEASE NO MORE, MY POOR BRAIN NEEDS SIMPLICITY

1591106516
alehander92
and you dont even have http downloads in macros yet

1591106517
fengb
At that point it’s basically a runtime parser but we can get away with doing it at comptime

1591106520
alehander92
you're so missing out

1591106544
fengb
Jai has arbitrary syscalls at comptime.... maybe

1591106545
shakesoda
really looking forward to all the new work going into fast builds, that aside

1591106554
alehander92
many langs have that

1591106566
alehander92
ok, not

1591106567
shakesoda
fengb: jai may or may not have anything but it doesn't exist

1591106571
shakesoda
until it's out ;)

1591106575
alehander92
but rust, nim can also execute many io things

1591106576
alehander92
on CT

1591106579
fengb
Jai is the only other language that has comptime in the same way Zig does

1591106592
fengb
Sorry, it may have comptime :P

1591106594
companion_cube
shakesoda: what's your problem with the PM?

1591106595
shakesoda
or would, if it existed

1591106600
leeward
What about D?

1591106613
companion_cube
it'd happen anyway, no modern lang doesn't have a PM

1591106634
shakesoda
companion_cube: package managers have this inherent way of increasing the complexity of utterly anything that gets near them by breaking things up into these tiny little hells of recursive dependencies

1591106648
alehander92
do you guys like nix

1591106651
shakesoda
companion_cube: incidentally, i have this gripe with essentially every "modern" language

1591106656
companion_cube
shakesoda: it's a question of culture

1591106658
pmwhite
alehander92: yeah

1591106668
shakesoda
it is a question of culture for sure.

1591106673
alehander92
a friend of mine often talks to me about it, but i mostly read general stuff about it

1591106680
fengb
Funny enough, Ruby didn’t have this problem

1591106681
shakesoda
don't get me wrong, it's not like i want managing dependencies to suck

1591106698
companion_cube
shakesoda: I read somewhere that C has a package manager, it's just priviledged enough that it's the OS's PM directly

1591106706
shakesoda
but at the same time i'd take managing deps being terrible over ending up with some cargo or npm disaster

1591106733
shakesoda
companion_cube: i go out of my way to avoid os package managers too.

1591106740
shakesoda
since they're also all disasters

1591106747
companion_cube
so, slackware or nothing? :s

1591106763
shakesoda
heh, i just build my deps in-tree so i can have some consistency across platforms.

1591106783
companion_cube
well cargo lets you do that too 🤷

1591106791
companion_cube
it's really a question of culture, not tools

1591106795
shakesoda
my problem with cargo is more cultural, not tools

1591106798
gonz_
As long as I can reasonably avoid other peoples' code it's not that big a deal if it turns into npm/cargo.

1591106818
shakesoda
builds take foreeeeeever and that's just normal

1591106819
companion_cube
cargo is good at its job, it's just that people use deep chains of dependencies

1591106826
shakesoda
i agree

1591106839
companion_cube
(more or less the same with npm/yarn)

1591106841
gonz_
In JS unless you plan to reimplement everything everywhere you end up with a thousand 2-line packages in your repo.

1591106858
fengb
npm is culturally the worst

1591106858
companion_cube
but currently I'm doing a bit of rust with a core library that has 0 deps

1591106864
shakesoda
it's more sane to just implement everything yourself in js anyways.

1591106868
fengb
People love 2 liner repos

1591106869
companion_cube
and then a wrapper around that has a few deps

1591106874
companion_cube
pretty happy so far

1591106902
gonz_
companion_cube: Right, I think Rust can still allow you to not have to pull in extra deps for basic stuff. JS doesn't feel the same way.

1591106924
companion_cube
yeah, the rust stdlib is, imho, very good

1591106928
companion_cube
it's not big, but it's very good

1591106932
shakesoda
really i'm just strongly in the camp of bringing in only exactly the code you need, which largely means eliminating deps entirely to the degree possible and putting things in tree for consistency and maximum deletion etc

1591106945
shakesoda
this is not very friendly for splitting things into libraries to begin with.

1591106947
pmwhite
I don't think small packages are a bad thing. 2 lines is probably too small, but  100 lines is fine to me. I'd be fine if every file were considered it's own "package"

1591106952
companion_cube
cargo vendor + features (a lot of packages allow you to disable their features that bring deps)

1591106964
fengb
shakesoda: that's what npm was designed for. And that's also why there's a million 2 line packages

1591106964
companion_cube
like, clap with `default-features=false` is pretty lightweight

1591107034
shakesoda
a thing i really don't like that is universal to package managers being in the picture is that you have to untangle the messes they bring in :(

1591107043
shakesoda
including if they are well designed

1591107071
shakesoda
it can be quite a task just to figure out what the heck you even have brought in and how much needs to be disabled

1591107074
shakesoda
such that most... don't.

1591107093
companion_cube
if you follow the shiny and trendy, for sure

1591107102
fengb
Well sure, but a well designed ecosystem never has a tangle in the first place

1591107108
companion_cube
but, since it's mostly a question of culture, I'm not worried for Zig

1591107113
fengb
Ruby typically doesn't have a crazy nest of deps

1591107122
fengb
So it's solvable

1591107140
shakesoda
such trust has to be earned

1591107196
companion_cube
I think Zig's PM will not do transitive deps implicitly? (I'm way out of date)

1591107206
companion_cube
so you'd be very aware of what you pull in anyway

1591107250
shakesoda
well that's good

1591107260
ifreund
i would be a fan of that. It'd be a good incentive to keep your dependency tree small

1591107274
gonz_
The good news is that regardless of situation, Zig will be very appropriate for building fundamentals. If you hated dependencies in some languages you'd have to learn another just to make good fundamental libraries yourself.

1591107277
pixelherodev
Morning all! :)

1591107305
afontain_
damn I've been reading PM as Prime Minister for a few minutes

1591107306
ifreund
I'm optimistic about the culture of Zig package management as well, I feel like many zig users come from C and have a more sane take on dependencies

1591107308
companion_cube
yo pixelherodev

1591107333
afontain_
"I read somewhere that C has a package manager, it's just priviledged enough that it's the OS's prime minister directly"

1591107334
companion_cube
C has a more sane take because the tools have been terrible, imho, not because it magically has a better culture :p

1591107361
companion_cube
afontain_: well on unix that's true :D

1591107364
shakesoda
now if we can do better than c's build times, that would make me very happy

1591107393
leeward
shakesoda: Do you mean C++'s build times?

1591107394
shakesoda
lower memory usage during builds would be great too

1591107398
shakesoda
i mean both.

1591107408
shakesoda
but i do mean c

1591107423
leeward
C's build times are not absurd. I've worked on multi-million line codebases that took a few minutes to build.

1591107431
shakesoda
a few minutes is an insane build time

1591107440
shakesoda
that's glacially slow

1591107453
companion_cube
for millions of lines?

1591107454
leeward
For 2 MLoC for a build from scratch?

1591107455
mondra
compared too?

1591107471
gonz_
There have historically been compilers that manage a million lines per second. I think most of us are just not attuned to the idea that most compilers are slow.

1591107478
afontain_
to be honest, in my experience, C is much faster to build than zig

1591107488
shakesoda
yes, c builds way faster than zig does right now

1591107498
companion_cube
comptime will not help

1591107513
shakesoda
mondra: most things that... aren't c, c++ or use llvm

1591107517
fengb
I think our target is a million per second

1591107537
companion_cube
shakesoda: I can only think of pascal for compiling that fast

1591107538
fengb
Stage 1 compile times are not reflective of stage 2

1591107539
mondra
most of stage 0's time is spend on llvm was it not?

1591107540
gonz_
It's not unreasonable at all for a compiler that does very little optimization.

1591107543
leeward
I'm not concerned with build times from scratch. 99% of the builds I do are after changing 1 or 2 files. As long as that can be fast, I'll be happy.

1591107544
companion_cube
millions of locs/s… that's tough

1591107559
fengb
Sorta. We also have not focused on performace in the C++

1591107565
shakesoda
i'm concerned about all build times, especially on the old/weak machines i actually use.

1591107573
shakesoda
and the amount of memory they use too

1591107603
companion_cube
memory required for build is also a bigger concern to me

1591107625
leeward
For what it's worth, that few minutes (3-5) was over NFS on SPARCs running SunOS.

1591107625
companion_cube
cause the stakes are not "wait a bit more" but "you can't build that, sorry"

1591107628
shakesoda
dodging build times is a huge reason i have massive amounts of code that i just jit or transpile to jit stuff

1591107635
shakesoda
e.g. haxe->luajit

1591107711
mondra
well an incremental compiler helps a lot with the 2 line change build times

1591107739
shakesoda
incremental compilation is also still a workaround for the build being fundamentally slow, but yes it absolutely does.

1591107761
shakesoda
i'd like waiting to be enough less painful that i'm willing to actually do it, instead of doing far more than needed with what is often the wrong tool for the job

1591107780
mondra
a little C compiler I like using when I change a few lines in a big program is TCC, there are probably better options out there, but ye

1591107813
gonz_


1591107824
shakesoda
yeah i like tcc

1591107829
pixelherodev
Regarding stage2 perf: there's a number of tricks already

1591107854
companion_cube
it's all about debug build vs release build anyway

1591107859
pixelherodev
e.g. the enums used to represent value types (and type types) and actually extern unions, which are either pointers to the real value or just a raw enum

1591107871
bgiannan
hey there, so i'm trying to update a zig project i've not touched in 4 months. I have a weird issue with AutoHashMap which complains i'm not giving a comptime parameter and I'm not sure why/how:

1591107875
pixelherodev
Since the first page is unusable on most OSes, that gives 4096 types

1591107892
gonz_
I personally don't mind waiting for release to take a while, but debug builds are painfully slow in lots of languages. You shouldn't have to wait seconds for some editor feedback, regardless of it waiting on a compiler.

1591107892
pixelherodev
Which means we have specializations like u8_array_sentinel_0

1591107912
leeward
bgiannan: comptime *Unit

1591107919
companion_cube
full debug build can still take time because you output a ton of dwarf

1591107928
companion_cube
gonz_: `cargo check` is the kind of thing that helps

1591107935
bgiannan
leeward, i tried that and am still getting the same error

1591107938
mondra
yeah, debug builds should absolutely be sanic speeds ;)

1591107945
pixelherodev
companion_cube: what if you keep the DWARF in RAM only?

1591107954
companion_cube
why generate it then? :D

1591107956
pixelherodev
Or replace it with something else within the compiler, and have the compiler manage debug builds?

1591107958
leeward
oh, wait, that doesn't make sense anyway

1591107970
pixelherodev
The is, patch the debugger to talk to the incremental compiler

1591107973
companion_cube
a language server shouldn't "build" at all

1591107996
pixelherodev
Well, yeah. So?

1591108001
pixelherodev
What's that got to do with anything?

1591108005
bgiannan
leeward, zig is complaining about it deep into a stack of call where the parameter is everytime declared as comptime

1591108007
pixelherodev
Dod I miss a bit of the convo?

1591108009
pixelherodev
did*

1591108036
companion_cube
I think it's just that "debug" builds are not the fast ones either

1591108044
fengb
I'm hoping for a -O1 with the self-hosted backend

1591108048
pixelherodev
shakesoda: I disagree that incremental compilation is just a "workaround"

1591108050
companion_cube
there should be a "fast" build that does as little as possible to give you a binary

1591108052
fengb
So I can actually test stuff

1591108068
shakesoda
pixelherodev: it comes about as a direct result of the build being slow to do in full

1591108076
shakesoda
i.e. it is a workaround

1591108084
shakesoda
it's a useful one that i think is good to have in context here

1591108085
pixelherodev
Yes, but it's still useful is the build is faster

1591108088
pixelherodev
if*

1591108090
shakesoda
but that doesn't change that it is a workaround

1591108094
leeward
bgiannan: What's a Unit?

1591108147
shakesoda
and hey if you're fast enough you can just jit... now there's something i want

1591108149
bgiannan
leeward, `pub const Unit = struct { // a looot of stuff }`

1591108150
shakesoda
zigjit

1591108155
mondra
no

1591108160
shakesoda
:D

1591108163
mondra
X^R

1591108202
fengb
comptime might become a jit :P

1591108217
shakesoda
zig compile is so slow currently that it is utterly impractical to use it for my regular workflow on slow machines (where i can still reasonably enough use c)

1591108228
shakesoda
a situation which should improve a lot with the ongoing work on this

1591108235
shakesoda
very, very much looking forward

1591108257
mondra
how is it comptime if it is jit?

1591108270
fengb
comptime is an interpreter running inside the compiler

1591108285
fengb
And it's balls slow right now

1591108315
companion_cube
so, separate compilation for comptime? 🙃

1591108335
mondra
I don't really see that as jit, but that might be my narrow definiton

1591108363
fengb
It's not a jit right now; it's just an interpreter. But maybe it's worth jitting to speed it up

1591108363
mondra
for me jit is a compiler living in the runtime

1591108372
shakesoda
that's a definition issue here

1591108412
mondra
yeah, because I'm all good with doing anything to speed-up comptime stuff, but no runtime jit'ting

1591108437
scientes
mondra, that wouldn't be comptime, would it?

1591108457
mondra
yeah, that's why I was confused xD

1591108477
shakesoda
we're talking jitting as in compiling comptime stuff to machine code during the process instead of just interpreting it throughout

1591108497
scientes
fengb, in order to compile it with llvm we need to teach llvm about slices, so that more stuff can be pure

1591108501
shakesoda
nothing to do with runtimes

1591108531
pixelherodev
Workaround shakesoda I mean

1591108531
mondra
yeah, I get that now, it's about a jit in the compiler, not a jit in the runtime

1591108533
shakesoda
but of course there's so much gains to be had long, long before doing that

1591108540
pixelherodev
Whoops

1591108555
shakesoda
pixelherodev: sorry there are no workarounds for shakesoda, i have looked

1591108558
scientes
comptime is seriously limited

1591108563
pixelherodev
shakesoda: I mean, I'm actually planning on trying to connect Tricarbon to Stage2 for a (potentially unofficial) comptime JIT

1591108565
fengb
Then we'll be able to import the jit into the runtime and have a copy of the official Zig interpreter :P

1591108568
shakesoda
will get back should i ever find one

1591108569
shakesoda
;)

1591108574
pixelherodev
lo

1591108576
pixelherodev
l

1591108628
scientes
even a fully interpreted comptime would be more featureful than what we have now

1591108640
scientes
which doesn't even have a memory model

1591108663
fengb
andrewrk has mentioned that current comptime is held together by duct tape

1591108669
scientes
it is

1591108689
scientes
it still is pretty awesome

1591108691
scientes
as it is a first

1591108706
companion_cube
not entirely, D was mostly there :p

1591108709
leeward
^^

1591108726
companion_cube
(the new aspect is that it's the only powerful construct in Zig, even for generics, imho)

1591108727
pixelherodev
Is there really supposed to be a defined memory model?

1591108734
pixelherodev
THat seems unnecessary for an interpreter

1591108744
bgiannan
leeward, daurnimator, if i understand the error, zig wants `key` to be comptime here

1591108749
scientes
pixelherodev, you can't do any memory operations in comptime

1591108755
pixelherodev
Ahhh, gotcha

1591108756
scientes
types have to match

1591108779
pixelherodev
I thought you meant that we wanted a virtual address space to map parts of the interpreter in or special values or something lol

1591108786
pixelherodev
just imagine, at comptime:

1591108808
pixelherodev
`const COMPTIME_VRAM = @intToPtr([*]u8, 0xB8000)`

1591108810
pixelherodev
lol

1591108811
shakesoda
i find comptime stuff gets really crazy and i usually don't want to see it for more than basic type substitutions D:

1591108879
gonz_
shakesoda: It's great for small strings representing data, though. Being able to write a simple thing that takes a string to something else and have it be properly checked, etc., is nice.

1591108886
gonz_
Format strings being one of the good examples.

1591108937
shakesoda
every now and then i'll screw up a format and get some kind of cryptic error message deep in the formatting code

1591108947
shakesoda
and it is code i never, ever want to see

1591108951
shakesoda
lol

1591109082
shakesoda
also very much citation needed here but i recall that stuff also compiling into quite a mess, like it just doesn't optimize properly

1591109094
shakesoda
i think that was formatted prints, but i don't remember now

1591109123
shakesoda
not sure it matters a whole lot since prints are going to be slow as heck anyways

1591109126
fengb
There's a lot of duplication when compiling format strings yes

1591109242
pixelherodev
That's not fundamental though

1591109250
pixelherodev
The optimizer should be able to deduplicate the output

1591109254
pixelherodev
(Ideally)

1591109281
pixelherodev
It's more akin to overagressive inlining, really

1591109303
pixelherodev
In the sense that if you turn the inliner too high in e.g. GCC, you'd probably have the same issue

1591109308
pixelherodev
Kinda funny that we have the reverse lol

1591109344
mondra
is that in release or in debug mode tho?

1591109354
pixelherodev
Both

1591109359
pixelherodev
It's nothing to do with optimizations

1591109363
leeward
bgiannan: I think it wants K to be comptime there, which means *Unit has to be comptime.

1591109370
pixelherodev
(thogh it sticks around because we need to optimize it later on)

1591109385
fengb
I don't think LLVM can detect the different generated functions as dupes

1591109385
pixelherodev
Basically, formatters are generated at compile tiem

1591109389
pixelherodev
time*

1591109390
fengb
And Zig definitely doesn't at the moment

1591109393
pixelherodev
each one is its own function

1591109394
leeward
bgiannan: I'm not sure though, since my little toy example works.

1591109404
pixelherodev
We need a Zig optimizer later to clean it up :P

1591109406
pixelherodev
Or, better yet

1591109412
pixelherodev
Tweak how comptime generation works instead

1591109418
pixelherodev
Don't rely on something else to fix it down the line

1591109469
pixelherodev
e.g. the actual codegen part itself should have a list of every permutation of a comptime function

1591109483
companion_cube
the classic way of sharing code is by defining functions, so the compilation of format strings should generate functions

1591109488
companion_cube
(without duplicates)

1591109489
pixelherodev
Before ever generating asm / ZIR, it should - yeah exactly!

1591109509
pixelherodev
It should find duplicate sections above a minimum threshold, and turn them into their own functions

1591109514
pixelherodev
Sort of reverse-inlining

1591109514
companion_cube
:D neat

1591109532
shakesoda
i hope the zir stuff will have an -O1 or so to get at least a decent amount of performance before jumping to waiting eons for llvm

1591109535
pixelherodev
This would let the actual inliner tackle it

1591109542
pixelherodev
shakesoda: neither

1591109550
pixelherodev
LLVM isn't going to be the official stage2 optimizer

1591109560
pixelherodev
It's going to be an option, yes

1591109566
pixelherodev
But we're also going to have our own optimizers

1591109579
shakesoda
anything to spare me from waiting eons for llvm

1591109584
pixelherodev
lol

1591109586
pixelherodev
yeha

1591109588
pixelherodev
yeah*

1591109605
pixelherodev
anyways, I'mma get back to the stage2 compiler now

1591109612
pixelherodev
I... somehow have WiFi up here. I never do.

1591109616
pixelherodev
Weird

1591109629
mondra
as someone who isn't a compiler guru, why is llvm so insanely slow?

1591109634
pixelherodev
Bloat.

1591109638
shakesoda
because they do not give a crap about compile time

1591109640
pixelherodev
^

1591109650
shakesoda
it isn't even on the list of things they care about afaik

1591109659
pixelherodev
They don't give a damn

1591109666
shakesoda
they care about the output, but not the time it takes to do it

1591109671
fengb
They've started a performance regression test suite just recently

1591109682
shakesoda
oh that is excellent news

1591109683
mondra
I see...

1591109687
fengb
Back in mah day, LLVM was snappy 🦖

1591109702
shakesoda
i will happily revise my statements if the trend reverses as a result

1591109704
leeward
Also, it started life as a C++ compiler, which...well, C++ is not a thing that can be compiled quickly.

1591109795
mondra
yeah, I've pretty much avoided since I got into programming because it just looks obfuscated to me (or it is basically C with classes) xD

1591109805
leeward
bgiannan: Try to reduce your code to something like this:

1591109844
leeward
mondra: Avoiding C++ is a good thing to do if you can get away with it.

1591109846
shakesoda
c++ is truly insane and convoluted

1591109859
shakesoda
i have to deal with it for work and have to really push to keep anything straightforward

1591109867
leeward
What's a decidable grammar?

1591109870
mondra
leeward: lucky I can :)

1591109873
leeward
Why would I need that?

1591109882
mondra
I'm forced to use C# tho 0.0

1591109900
shakesoda
that's more sane than c++ at least

1591109906
shakesoda
even if i also don't like it

1591109918
shakesoda
both c++ and c# utterly fail in the language simplicity department

1591109920
leeward
The last time I used a language from MS it was VB6. I hear good things about C#.

1591109921
fengb
I wish they called it something else. It's nothing like C >_>

1591109932
shakesoda
fengb: well they couldn't call it what it is

1591109936
fengb
J# or something

1591109945
fengb
CoffeeSharp

1591109954
mondra
J is an array programming language, no?

1591109959
ifreund
do we have constants for e.g. u32 max value somewhere in the std?

1591109970
shakesoda
isn't there an @ for that

1591109976
ifreund
maybe

1591109985
afontain_
std.limits?

1591109985
fengb
`std.math.maxInt(u32)`

1591109993
shakesoda
oh, std.math

1591110002
leeward
I did play around with a Microsoft J++ thing that existed in the '90s. It...did not work.

1591110022
fengb


1591110027
fengb
Apparently it exists... wat

1591110029
ifreund
fengb: thanks

1591110031
companion_cube
there's F# too

1591110046
mondra
well, that's weird

1591110058
mondra
if I where the people behind J I'd be suiting up at that point XD

1591110063
leeward
F# is OCaml.NET

1591110071
fengb
Their naming is all over the place

1591110078
fengb
Replace Java with C#. Replace OCaml with F#

1591110091
pmwhite
A# is also a thing - Ada.NET.

1591110097
leeward
Seriously?

1591110124
pmwhite
It's not a big thing, but it is a thing.

1591110127
mondra
I still find it sad people dropped Caml is it like the pretty quite little brother of OCaml :/

1591110134
leeward
A# is GPL'd, holy crap

1591110149
pmwhite


1591110166
fengb
Gotta have them objects... ?

1591110201
companion_cube
leeward: yeah and F# seems pretty cool

1591110202
mondra
... No, please leave me alone evil objects ;-;

1591110204
pmwhite
There was also IronPython and IronRuby I believe.

1591110212
companion_cube
would be my go-to lang if I was programming on windows

1591110222
leeward
See also: Perl 5

1591110241
leeward
Yeah, IronPython is Jython for .net

1591110271
fengb
Why didn't they call it Python#? Or Y#

1591110287
leeward
Visual Python Sharp Dot Net

1591110304
mondra
because python wanted to be special, it was to complected like reduce >.>

1591110334
mondra
complicated*

1591110397
shakesoda
i just want more things with lua's relentless simplicity

1591110402
fengb
TBF, Iron sounds better than .NET or sharp

1591110418
mondra
true, but nothing about windows is iron >.>

1591110434
fengb
It rusts :3

1591110450
mondra
XD

1591110451
fengb
Also... Rust is a terrible name for a language

1591110490
fengb
"Bitrot the language!"

1591110499
companion_cube
it's named after a fungi, tss tss

1591110563
mondra
it also spreads like a fungus, when it gets close and those spores though your community it's over, everything needs to be rewritten in rust

1591110577
mondra
touch*

1591110581
shakesoda
maybe it was named with such self awareness

1591110594
mondra
shakesoda: could be

1591110965
pixelherodev
Petition to rename Zig to Iron?

1591110973
leeward
Apparently iron stands for "It Runs On .Net

1591110975
leeward
"

1591111010
pixelherodev
Ooh, or Iroh (if not for copyright infringement)

1591111023
pixelherodev
Wise and old, but not afraid to burn the mistakes of the past

1591111025
pixelherodev
:P

1591111060
pixelherodev
Whelp, adding that to the list of potential names for future projects lol

1591111076
pmwhite
Can't burn it if it's made of iron.

1591111180
leeward
What?

1591111187
leeward
Iron totally burns.

1591111191
pixelherodev
anywho

1591111192
mondra
you can burn iron, just make powder out of it

1591111197
pixelherodev
How do I force a cherry-pick?

1591111199
pixelherodev
f5167f73e8765eaba6bd342cd81b0dbe2205519d

1591111201
pixelherodev
I need it

1591111203
pixelherodev
I need it so much

1591111209
leeward
Mix a little Al in, and you have thermite.

1591111238
mondra
yeah, >Iron doesn't burn xD

1591111325
scientes
saturating llvm intrinsics would be really nice to have

1591111360
fengb
Iron burns at high enough temperatures

1591111361
scientes
they are great for avoiding corner cases

1591111412
leeward
fengb: Another way to say that is that iron fires are very hot.

1591111418
nephele
Hellu, I would like to write a SCTP server in zig (later linking against whatever DTLS support there is), could someone point me to examples of SCTP in zig? (or maybe the zig tcp server example andrew wrote?)

1591112519
gonz_
It's not unlikely that you're the one writing the example

1591112796
ikskuh
nephele: i have used BearSSL with zig, but haven't used DTLS

1591112806
ikskuh
you may want to look up MasterQ32/zig-bearssl

1591112810
ikskuh
on github

1591112812
ikskuh
as a starting point

1591113063
nephele
Ah, i don't know if bearssl supports dtls at all (their website lists it under not supported, but i dont know if that is accurate), I'll have a look at that package anyway, thanks :)

1591113254
ikskuh
ah well, then it's not supported

1591113259
ikskuh
BearSSL is really stripped down

1591113275
ikskuh
i think you have to use something like LibreSSL or OpenSSL

1591113294
nephele
Libressl does not support DTLS :D

1591113317
nephele
I only know of OpenSSL and WolfSSL to support it

1591113326
ikskuh
hm

1591113331
ikskuh
i didn't get WolfSSL running with Zig

1591113336
ikskuh
maybe you are more lucky with that

1591113570
nephele
Well, wolfssl seems like the better choice of the two, but then wolfssl is gpl which i don't like that much, i suppose it's fine though, i can still dual license the wrapper and anything build with that wrapper would hardly be a "derivitive" of wolfssl :3

1591116838
leeward
Thank you, hg.sr.ht, for not being bitbucket.

1591117384
pixelherodev
lol, yeah

1591117398
pixelherodev
nephele: the question is whether the wrapper qualifies as a deriviative

1591117407
pixelherodev
I'm not a lawyer, so I can't answer that

1591117454
nephele
the wrapper probably does, yeah

1591117479
pixelherodev
But the wrapper's license doesn't really matter, as long as you take care to keep it distinct from your application built over it

1591117512
pixelherodev
andrewrk: is there a reason ZIR comparisons don't need a cross target?

1591117518
nephele
but the gpl does not prevent me from licensing the code under a different license too, so i think i can license it MIT aswell, so if someone obtains a commercial license from wolfssl they can use the wrapper too under MIT anyhow :3

1591117535
andrewrk
pixelherodev, integer comparisons?

1591117539
pixelherodev
Ah wait, I see

1591117546
pixelherodev
Nah, OutputComparisons

1591117549
pixelherodev
because it has to run natively

1591117557
pixelherodev
I think we should revamp that?

1591117573
pixelherodev
Tests can e.g. require QEMU, and use QEMU to run the application

1591117577
pixelherodev
QEMU-user mode

1591117599
pixelherodev
nephele: it doesn't?

1591117602
pixelherodev
That's... odd

1591117609
pixelherodev
I mean, your code sure

1591117614
pixelherodev
Ahhh I see

1591117639
pixelherodev
If you license

1591117646
pixelherodev
That... I'd really check with a lawyer for that

1591117656
pixelherodev
I think

1591117661
pixelherodev
but IANAL

1591117670
pixelherodev
andrewrk: it's fine to require QEMU for some tests, right?

1591117675
pixelherodev
if cross_target != native?

1591117683
pixelherodev
(Or WINE, or WASI, or...)

1591117704
pixelherodev
That's the last thing I need to check, them I'm offlining to finish this

1591117710
pixelherodev
Pretty close to done :)

1591117752
nephele
pixelherodev, well, that wouldn't be my problem, but whoever gets a commercial license from wolfssl ;), assuming anyone ever wants to use my potential wrapper xD

1591117767
andrewrk
pixelherodev, there is an option, -Denable-qemu, that tells whether the tests have qemu available

1591117769
pixelherodev
I mean, why not?

1591117772
pixelherodev
andrewrk: gotcha

1591117773
fengb
I don't know if reimplementing headers is fully tested in court

1591117783
pixelherodev
It's not

1591117787
pixelherodev
Oracle vs Google, right now

1591117789
fengb
Linux has a specific out for this reason

1591117793
pixelherodev
oof

1591117801
pixelherodev
nephele: it kind of

1591117815
pixelherodev


1591117818
pixelherodev
AFAIK

1591117826
nephele
Not really, i don't have a license, for me the wrapper stays gplv2

1591117832
pixelherodev
Right but

1591117836
nephele
isn't it i can't /use/ it under a different license?

1591117848
fengb
Yeah it gets tricky what's a derivative. Clean room is probably okay but it's not certain yet

1591117853
pixelherodev
When you select a license, you're giving people the right to use your code in a certain manner

1591117861
nephele
i still have the copyright to all my code, if i distribute it violating the gpl then i loose the right to use the wolfssl code

1591117862
pixelherodev
in order to be able to give a right, you need to have it yourself

1591117886
pixelherodev
Right, but I'm saying that distributing a deriviative work of a GPL project under non-GPL might be a GPL violation

1591117886
nephele
but if someone else uses it and does not need to concern themselves with the gpl they should be able to use it under mit if i allow that :3

1591117893
pixelherodev
Yes, but again

1591117896
pixelherodev
The issue isn't them

1591117896
fengb
But  you must relicence under GPL if you're doing a derivative

1591117904
pixelherodev
Legally, you have to use GPL

1591117908
pixelherodev
not dual-license

1591117914
pixelherodev
I would really really check with a lawyer first

1591117917
pixelherodev
Or at least ask them

1591117919
fengb
Yeah, only upstream can choose to dual license

1591117921
pixelherodev
^

1591117934
pixelherodev
You don't have the rights given by the MIT license, so you can't grant them to others AFAIK

1591117934
nephele
Eh, that seems incredibly wierd

1591117942
pixelherodev
How so?

1591117943
fengb
No that's the whole purpose of GPL

1591117945
pixelherodev
^

1591117948
nephele
I do for my code :)

1591117950
fengb
Forcing downstream to remain GPL

1591117951
pixelherodev
Yes, but

1591117953
pixelherodev
Not really

1591117962
nephele
I don't have the right to use it under the non-gpl if i want to use the upstream code

1591117968
pixelherodev
If your code is a deriviative of a GPL license, you don't legally have the right to relicense it

1591117976
pixelherodev
Even your code qualifies here.

1591117983
nephele
I legally have the right to license all my code

1591117988
pixelherodev
Legally, your code

1591117991
fengb
No, not if you use GPL

1591117998
fengb
You don't own GPL code so you cannot relicense it

1591118001
nephele
Nope, the gpl cant take away my right

1591118008
nephele
it can only take away my right to use other gpl code

1591118009
pixelherodev
Except that it's not about your right

1591118016
pixelherodev
It's about *WolfSSL*'s

1591118037
pixelherodev
Your code is considered to contain theirs, legally speaking

1591118045
pixelherodev
Which means that you can't license your code in a way incompatible with their license

1591118050
nephele
wolfssl has no way to force me to license my code, other than the threat that i /cant/ use wolfssl code anymore

1591118071
pixelherodev
Seriously, *talk to a lawyer*.

1591118072
pixelherodev
Don't make assumptions.

1591118083
fengb
You cannot use WolfSSL without abiding to their terms. They can literally sue you for breaking the license

1591118089
pixelherodev
^

1591118098
nephele
There is no way the gpl can take away my copyright

1591118099
pixelherodev
licensing your code in such a manner is

1591118104
pixelherodev
yeah, there is.

1591118112
pixelherodev
Because their copyright is affected too

1591118130
companion_cube
nephele: it's called "viral" for a reason

1591118138
pixelherodev
This is

1591118138
nephele
A gpl violation would mean i loose my right to use the software :)

1591118141
fengb
You can't derive work off GPL code and relicense it to something permissive

1591118146
pixelherodev
No, it means you get taken to court.

1591118151
fengb
That's the entire the point of GPL

1591118154
nephele
Yes i can, aslong as i don't have the gpl part anymore

1591118156
pixelherodev
It's the same way you can't relicense a fork

1591118163
pixelherodev
nephele: only with LGPL

1591118166
pixelherodev
Not GPL

1591118172
pixelherodev
It applies to

1591118181
pixelherodev
Like I said, you really need to talk to a lawyer and make sure this doesn't qualify

1591118185
pixelherodev
I would

1591118189
nephele
no, not just with the lgpl, if i move my code over to use openssl instead of wolfssl for instance i still have all rights to relicense it

1591118221
pixelherodev
Yes, but this is about a wrapper explicitly

1591118227
pixelherodev
WolfSSL Zig bindings, effectively?

1591118245
pixelherodev
Like I said, IANAL, but I would at least

1591118257
nephele
Well, primarily a way to use DTLS over SCTP in zig

1591118258
pixelherodev
Let's say you're right and it's not a violation; what if

1591118270
pixelherodev
If they take you to court, it doesn't matter if you win

1591118287
pixelherodev
It's still a giant hassle which could easily be avoided by just

1591118296
pixelherodev
I doubt they'd have an objections to what you want to do

1591118303
pixelherodev
It's your project

1591118304
nephele
I never said i plan to do that without talking to them :D

1591118310
pixelherodev
Jsut my two cents

1591118312
pixelherodev
Just*

1591118367
nephele
anyhow, i'll just do my wrapper, which would be gplv2 then and deal with that later, assuming zig gets commercial interest :P

1591118430
nephele
(or alternatively use openssl for dtls, but then openssl is openssl :3... i wonder if zig will build native DTLS heh)

1591118534
pixelherodev
What's wrong with OpenSSL?

1591118572
ikskuh
OpenSSL = 😱

1591118573
nephele
the api is easy to misuse :/

1591118581
ikskuh
it's a horrible API mess

1591118589
ikskuh
way too easy to use wrong

1591118614
fengb
What about LibreSSL?

1591118630
ikskuh
they removed a lot of cruft from OpenSSL

1591118677
pixelherodev
Ehh

1591118681
pixelherodev
LibreSSL has had its own problems

1591118691
pixelherodev
(security wise at least)

1591118701
pixelherodev
Both of them have had issues that the other has not

1591118701
nephele
mainly on linux :D

1591118725
pixelherodev
I'd need a source for that :P

1591118777
nephele
well, getting a prng on linux is somewhat harder than on openbsd, atleast the kernel one, since urandom can't be trusted, random sometimes blocks etc

1591118814
nephele
I think there was somewhat of a problem for the getrandom syscall too, but not sure what it was, i think that it was to be changed to also behave wierdly (and its not on olderrrish linux kernels)

1591118879
pixelherodev
uhh

1591118881
pixelherodev
false.

1591118885
pixelherodev
urandom can be trusted.

1591118893
pixelherodev
It's a common misconception that it's not trustworthy

1591118901
pixelherodev
gimme a sec to pull up the source

1591118920
ikskuh
/dev/urandom is afaik getentry, whereas /dev/random is getrandom

1591118922
nephele
no, it can't, it returns uninitialized prng data at boot

1591118942
pixelherodev
It can't be trusted

1591118949
pixelherodev
For most uses, urandom is preferred over random

1591118960
pixelherodev
there's probably a way to verify that it's initialized

1591118962
nephele
name one case where random is preffered over urandom :D

1591118972
pixelherodev
At boot?

1591118977
pixelherodev
Since it blocks until... oh wait

1591118981
pixelherodev
Yeah, no, that's a terrible idea

1591118983
pixelherodev
Actually

1591118992
ikskuh
how to slow down boot 101

1591118994
pixelherodev
urandom doesn't return uninitialized data at boot on some systems, IIRC

1591119004
pixelherodev
They store entropy between boots, or something?

1591119009
pixelherodev
Not 100% on the details

1591119013
pixelherodev
Vaguely remember seeing something like that

1591119019
fengb
We should simply plug in a background radiation sensor directly into the kernel

1591119020
pixelherodev
That might be a distro thing, though

1591119021
pixelherodev
Not a Linux one

1591119025
nephele
urandom on FreeBSD blocks till the pool is inialized and then never again, easy to use api :D, having to watch out not to use urandom on boot is a bit "eh"

1591119040
nephele
systemd stores some entropy to seed the pool afaik

1591119063
nephele
but it is a userspace thing so may not be available everywhere :3

1591119087
pixelherodev
Obligatory

1591119089
pixelherodev
not just systemd

1591119096
pixelherodev
Pretty sure some OpenRC systems do too

1591119109
pixelherodev
It's a distro thing, not a system platform one

1591119113
nephele
Yeah

1591119118
pixelherodev


1591119146
nephele
I shall check if libressl supports dtls somewhat... hard to find docs about that (only vague mentions of it in the changelog somewhere... :g)

1591119634
pixelherodev
fun one:

1591119909
pixelherodev
ikskuh: actually, both random and urandom give the exact same data

1591119912
pixelherodev
Same source, I mean

1591119919
pixelherodev
It's not "getentry vs getrandom"

1591119925
pixelherodev
/dev/random doesn't use getrandom either

1591119932
ikskuh
okay

1591119936
ikskuh
good to know

1591120002
andrewrk
marler8997, have a moment?

1591120016
marler8997
sure

1591120073
pixelherodev
ikskuh:

1591120077
pixelherodev
Seriously, worth five minutes to read it :)

1591120087
sqwishy
Hi! Is it possible to write something like `union { struct { x: i32, y: i32 }, struct { w: i32, h: i32 } }` using packed whatevers? It looks only possible if each struct has a member name

1591120110
fengb
Yeah zig doesn't have nameless fields

1591120143
nephele
pixelherodev, i think its a bit more complex than that, on some kernel versions they dont give exactly the same since they have seperate pools and such :3

1591120168
nephele
heh, i already read that post :D

1591120361
andrewrk
marler8997,

1591120370
pixelherodev
nephele: on any reasonably modern Linux system.

1591120381
pixelherodev
I'm not talking about systems stuck on e.g. 3.x

1591120402
andrewrk
I think stable debian is still on 3.16

1591120427
pixelherodev
Notice the use of the word "reasonable" ;)

1591120447
pixelherodev
I don't find myself very impressed with Debian, at all.

1591120447
andrewrk
it's pretty bold to call stable debian unreasonable

1591120448
marler8997
andrewrk, removing the requirement that lengths have to be exact will making the allocator simpler

1591120460
pixelherodev
Debian stable goes to unreasonable lengths for stability

1591120474
andrewrk
marler8997, yeah, and note that the higher level abstractions can still be built upon this proposed interface

1591120478
pixelherodev
andrewrk: to paraphrase QBE, "70% of the stability with 10% of the age"

1591120491
marler8997
this fits my 5151 proposal more closely as well

1591120503
pixelherodev
Debian stable goes waaaaay beyond "stability" into the territory of stagnancy

1591120523
marler8997
but will require some work to get that interface to work with current clients who expect the length to be exact

1591120524
nephele
debian 8 was on 3.16 i think

1591120535
andrewrk
the ArrayList use case would call the lower-level function which allows getting more bytes than requested, so that actually would improve ArrayList efficiency I believe

1591120542
marler8997
it would

1591120556
andrewrk
ok so you're on board with this?

1591120560
fengb
I like returning larger buffers. It's been weird just pretending the buffer is smaller

1591120562
marler8997
yeah

1591120570
marler8997
it was something I already was thinking of

1591120647
andrewrk
cool. if you have the motivation to do another pass on the branch, go for it, but also feel free to hand off if you are tired of it and want to move on to something else

1591120656
leeward
I've been running Debian stable on web servers for almost 20 years. Rock solid is the only way to describe it. Meanwhile, I've been running unstable on my desktop for the same period.

1591120686
marler8997
I'll get to work on it today

1591120687
fengb
pixelherodev  runs Gentoo so bleeding edge is his idea of stable ;)

1591120710
leeward
It's got plenty of things going for it.

1591120736
leeward
I went to school with some gentoo developers. I like being able to install a browser in less than 8 hours, but cool.

1591120750
andrewrk
marler8997, I like that we won't be pointlessly passing alignment for reallocs. it's a nonsense use case to try to increase the alignment of something

1591120764
marler8997
yeah that was a nice bonus

1591120782
pixelherodev
fengb: lol

1591120783
marler8997
however, this interface doesn't have a path to call C's realloc

1591120787
pixelherodev
nah, I don't consider this stable

1591120790
pixelherodev
At all

1591120797
pixelherodev
But Linux kernel is on

1591120803
pixelherodev
It's been around a looooong time

1591120806
pixelherodev
and Debian is on

1591120809
fengb
I'm still running 2.4 >_>

1591120828
fengb
(I'm not but those were the good old days)

1591120854
pixelherodev
leeward: also

1591120857
pixelherodev
for the record

1591120867
pixelherodev
on my relatvely weak laptop, I can install qutebrowser in closer to

1591120871
pixelherodev
Or firefox in two minutes

1591120874
pixelherodev
Gentoo has binary packages

1591120896
pixelherodev
The official repos only have them for larrrrge stuff though

1591120902
pixelherodev
Like FireFox, and LibreOffice

1591120914
pixelherodev
Gentoo isn't a traditional distro, it's a *meta*-distribution

1591120921
pixelherodev
You could build a fully binary distro using Gentoo

1591120948
andrewrk
marler8997, hmmm. good point. maybe c_allocator could take advantage of malloc_usable_size ?

1591120971
pixelherodev
All you have to do is set up mirrors, configure the distro how you want it (maybe replace emerge with alpine's apk for instance, set USE flags), and create an installer

1591120978
leeward
pixelherodev: Sure, but you're living in the future. In 2004, Firefox was 8-10 hours.

1591120992
pixelherodev
Binary packages ;)

1591121001
leeward
And for what it's worth, my system is running a 5.4 kernel

1591121026
leeward
Yeah, binary packages: not at all why people use gentoo.

1591121042
marler8997
andrewrk, oh I've never heard of that, looks like that would alleviate not being able to call realloc

1591121047
pixelherodev
leeward: I know

1591121058
leeward
If I were up to date, I'd be on 5.6.14

1591121060
pixelherodev
I wouldn't call that distro Gentoo, but if I were to make a distro, that's how I'd do it

1591121068
pixelherodev
I'm on 5.6.15 rn :P

1591121072
fengb
Wait, what's the blocker for realloc now?

1591121086
leeward
Debian's a single point release behind Gentoo? Sounds pretty bleeding edge to me.

1591121095
andrewrk
marler8997, I think it could be used heuristically. e.g. it would determine whether or not to call realloc. we'd still have to check realloc return value to see if it moved the ptr and in that case free it and return failure

1591121135
marler8997
andrewrk, that's one way to do it, that's fine with me

1591121141
pixelherodev
leeward: Debian stable?

1591121146
leeward
Hells no

1591121148
pixelherodev
Exactly

1591121149
leeward
Who uses that on the desktop?

1591121152
andrewrk
fengb, libc realloc can move the ptr. we can provide c_allocator with this interface, no problem, but if there was any efficiency in using realloc() rather than malloc()/memcpy()/free(), it would be lost

1591121156
leeward
Like who uses gentoo on servers?

1591121159
pixelherodev
...

1591121160
leeward
They're different things.

1591121161
pixelherodev
uhh

1591121165
pixelherodev
heh

1591121167
pixelherodev
heh he

1591121168
pixelherodev
Hi

1591121184
leeward
Yeah, unless you're serving a web page I've heard of, you don't count.

1591121192
andrewrk
well we have a handful of benchmarks now that will let us know what perf changes happend from messing with c_allocator :)

1591121201
fengb
But can't we try resize first before doing a move+copy?

1591121211
marler8997
fengb...nope

1591121212
leeward
I mean, I've run a web server on a mac mini, but I wouldn't call it a good idea.

1591121219
marler8997
c heap doesn't suppor tit

1591121246
fengb
Ohhhh sorry, I was thinking the other direction (exporting malloc)

1591121251
pixelherodev
`ssh pixelleefair

1591121254
pixelherodev
leeward: fair

1591121256
pixelherodev
whoops

1591121256
andrewrk
fengb, right we can, but consider what happens if we end up having to do move+copy: realloc() -> does the work of allocating a block. damn the ptr moved. free() -> does the work of freeing it. malloc() -> a second time! memcpy() (second time)

1591121281
pixelherodev
leeward: you

1591121286
andrewrk
oh and a second free()

1591121292
pixelherodev
Even if's not the default

1591121314
pixelherodev
andrewrk: what if we use heuristics?

1591121319
leeward
Sure, and you can make Windows XP secure.

1591121321
pixelherodev
"if size < x try reallocing?"

1591121324
pixelherodev
no you can't

1591121331
pixelherodev
you don't control the kernel, or the components

1591121335
pixelherodev
Gentoo is only unstable if you make it so

1591121339
leeward
Sure you can. Fill the USB ports with super glue and unplug the ethernet cable.

1591121351
pixelherodev
That's.... very different

1591121354
andrewrk
pixelherodev, that's why we would use malloc_usable_size

1591121355
pixelherodev
Gentoo can be easily made stable

1591121358
pixelherodev
andrewrk: gotcha

1591121364
pixelherodev
was only hearing half the convo :P

1591121367
nephele
leeward, how does that help against my wifi card :D

1591121374
pixelherodev
remove it

1591121377
pixelherodev
screwdriver

1591121380
leeward
nephele: XP doesn't have drivers for your wifi card.

1591121388
nephele
Ha, but it does :D

1591121391
leeward
:P

1591121404
andrewrk
I think what we learned from all this is that the libc malloc/realloc/free interface isn't quite low level enough. it's not quite the right primitives

1591121424
leeward
andrewrk: sbrk?

1591121431
marler8997
yeah

1591121439
marler8997
c's heap is a bit cripped because of it

1591121548
andrewrk
I would be OK with an optional reallocFn which is the same as resizeFn except the return value is Error![]u8 and it allows moving the pointer. a default implementation can be provided

1591121570
andrewrk
then we would not need malloc_usable_size heuristics

1591121592
leeward
The problem is that some allocators only want to support malloc and free.

1591121608
pixelherodev
hence the default impl

1591121614
andrewrk
leeward, why is that a problem?

1591121648
leeward
I don't know, I remember there being some issues with some bits of Allocator not working when I tried hooking up one that didn't realloc.

1591121668
leeward
I could be misremembering though.

1591121718
andrewrk
if (new_len == 0) free() else if (new_len > old_len) return error.OutOfMemory else return ptr[0..new_len]

1591121752
leeward
Yep, that looks familiar.

1591121773
leeward
It just doesn't support actually shrinking.

1591121799
andrewrk
that's fine though. the interface supports it, but the implementation doesn't have to

1591121823
leeward
fine for implementors; misleading for users without good documentation

1591122611
marler8997
yeah an optional reallocFn could solve that issue

1591122632
marler8997
something we could decide to add if needed

1591122839
leeward
That would be cool.

1591126120
pixelherodev
andrewrk: ready for a first look?

1591126141
pixelherodev
I haven't bothered running tests yet

1591126149
pixelherodev
I want to make sure the design is good before making sure the implementation is :)

1591126246
pixelherodev
(that's also why only Transforms actually run right now, anything else would error.unimplemented; implementing those would be trivial, given the other three harnesses)

1591126250
pixelherodev
Pushed to the PR

1591126405
gonz_
Well done to everyone on Zig Showtime

1591126413
gonz_
And well done to everyone else for being great as well :D

1591126449
pixelherodev
:)

1591126452
pixelherodev
Thanks :)

1591126457
pixelherodev
(I'm in the latter group)

1591126471
pixelherodev
I'm going to be a speaker on one soon though :)

1591126577
leeward
Ok, this is a thing I've been trying to figure out for a while and today is the day it actually happens. I have a very simple project (zig init-lib) and I want to dump the test executable in the same directory as build.zig. What do I have to add? I don't see anything in LibExeObjStep that does it.

1591126589
pixelherodev
output_dir

1591126594
leeward
Nope, it's not there.

1591126596
pixelherodev
?[]const u8

1591126599
pixelherodev
yeah it is...

1591126601
pixelherodev
I just saw it today

1591126616
pixelherodev
Yeah

1591126619
pixelherodev
Just checked again

1591126626
pixelherodev
it's the first result for output_dir in std/build.zig

1591126628
leeward
I just set main_tests.output_dir to "."

1591126634
pixelherodev
That's relative.

1591126639
pixelherodev
Try absolute

1591126645
pixelherodev
My guess is it's not relative to the dir you think it is

1591126654
pixelherodev
The tests don't run next to build.zig

1591126657
leeward
just tried absolute

1591126660
pixelherodev
build.zig doesn't, I mean

1591126669
leeward
no joy

1591126686
leeward
I meant the binary wasn't there, not the property :P

1591126689
pixelherodev
setOutputDir

1591126692
pixelherodev
Try that

1591126694
pixelherodev
It duplicates the path

1591126705
pixelherodev
Ahh

1591126708
pixelherodev
and handles path separators

1591126718
pixelherodev
step.setOutputDir(abs_path)

1591126719
leeward
nope

1591126722
pixelherodev
ugh

1591126726
pixelherodev
THat's a bug, then.

1591126734
pixelherodev
Unles it's not supported for tests?

1591126744
leeward
Well, at least I feel okay with not having found it.

1591126751
pixelherodev
I mean, you did find it, technically

1591126754
pixelherodev
It just doesn't work

1591126757
pixelherodev
:P

1591126759
leeward
The crazy thing is I know it can be done. I've seen it.

1591126764
pixelherodev
For tests?

1591126765
leeward
I just don't remember where or how.

1591126771
pixelherodev
Or for executables?

1591126781
pixelherodev
try it with addExecutable and see if it behaves differentl

1591126783
pixelherodev
differently*

1591126789
pixelherodev
If so, ping me here and I'll investigate

1591126790
leeward
Yeah, andrewrk gave me some magic argument to pass on the command line once when I was running Zig's test suite.

1591126798
pixelherodev
I mean, yeah

1591126805
pixelherodev
If you're invoking Zig directly, it probably handles it

1591126810
leeward
It does behave differently with addExecutable. output_dir works fine there.

1591126813
pixelherodev
I'm guessing the build system discards ooutput_dir for tests

1591126814
pixelherodev
Gotcha

1591126824
pixelherodev
Will investigate while I wait for Andrew's feedback on 5422 :)

1591126830
leeward
fun times

1591126866
pixelherodev
Should be straightforward to fix

1591126874
pixelherodev
I have a good amount of experience with the build system by now :)

1591126877
pixelherodev
which for the record

1591126880
pixelherodev
we need a better name for

1591126881
pixelherodev
ZBS is meh

1591126891
pixelherodev
build.zig is too vague

1591126898
pixelherodev
(It can refer to a specific project's build file)

1591126916
leeward
take off every zig?

1591126922
pixelherodev
toez?

1591126925
pixelherodev
heh

1591126949
pixelherodev
Zig Intelligent Generator

1591126952
pixelherodev
lol

1591126958
leeward
Not ambiguous at all.

1591126962
pixelherodev
ZBS Build System

1591126964
pixelherodev
Just to make it worse

1591126972
pixelherodev
Ooh

1591126973
pixelherodev
Buildz

1591126976
ikskuh
bzr

1591126977
pixelherodev
Simple

1591126981
ikskuh
build.zig runner

1591126990
leeward
where ZBS stands for Zag Build System?

1591126995
pixelherodev
Zigbar?

1591127011
pixelherodev
Zig BuildSystem Automated Runner

1591127017
leeward
bzr: because the last program to have that name has failed so completely that we can just replace it.

1591127027
pixelherodev
That's... hah

1591127030
pixelherodev
I like that

1591127032
pixelherodev
but no

1591127034
pixelherodev
terrible idea

1591127041
pixelherodev
I'm going with ZBS or buildz for now

1591127047
pixelherodev
As long as you know what I'm talking about it's fine

1591127052
marler8997
andrewrk, one modification, I think it would be better to have resizeFn just return usize instead of Error!usize

1591127055
pixelherodev
I just don't like writing the whole thing out every time I talk about buildz

1591127063
pixelherodev
marler8997: why's that? What if it fails?

1591127069
pixelherodev
Ahh wait, I see

1591127075
pixelherodev
The program shouldn't rely on it succeeding?

1591127083
pixelherodev
Or, rather

1591127084
leeward
Well if you have managed to actually grok the build system, feel free to write up a guide for the rest of us. It's pretty severely lacking in explanation that isn't example.

1591127088
marler8997
well this is just the allocator interface, most programs wouldn't call it directly

1591127088
pixelherodev
the size is idntical

1591127102
pixelherodev
... hmm

1591127106
pixelherodev
leeward: you know what, sure

1591127109
pixelherodev
Give me ~20 minutes

1591127111
andrewrk
marler8997, makes sense to me

1591127115
leeward
\o/

1591127115
marler8997
ok cool

1591127118
pixelherodev
And I'll do a stream explaining the Zig Build System's internals?

1591127128
leeward
I would watch that.

1591127133
pixelherodev
Sure thing

1591127133
leeward
Though probably not live.

1591127144
pixelherodev
Let me just have tests use output_dir real quick

1591127147
pixelherodev
PR incoming

1591127160
pixelherodev
andrewrk: When you get a chance, thoughts on 5422 would be nice :)

1591127166
pixelherodev
So i can finish implementing it :)

1591127168
andrewrk
will look now

1591127174
pixelherodev
Perfect

1591127177
pixelherodev
:)

1591127219
pixelherodev
... I was like, "why is build.zig showing up as blank?"

1591127225
pixelherodev
Me: `kak kak lib/std/build.zig`

1591127230
pixelherodev
:P

1591127250
gonz_
ifreund: Did you ever use XMonad?

1591127266
ikskuh
kak => 💩

1591127293
leeward
That's what I thought.

1591127326
ifreund
gonz_: bounced off the haskell, though if I understand correctly it's basically dwm in haskell?

1591127339
gonz_
AFAIK, yeah.

1591127353
pixelherodev
lol

1591127356
pixelherodev
kakoune

1591127359
pixelherodev
:P

1591127364
pixelherodev
and yes I know

1591127368
gonz_
Though I'm not sure exactly how dwm handles active windows, etc.

1591127396
gonz_
As far as I heard they're about the same. The complaint about not tiling automatically into a set layout seemed like it suggested something like XMonad

1591127427
leeward
Hmm, urge to write zwm? No, X is awful.

1591127490
gonz_
I started using XMonad before I learned Haskell. Wasn't long after, though. The config is still very easy to handle without much Haskell knowledge, IMO

1591127500
ifreund
yeah, river implements the default tiling layout of dwm

1591127510
ifreund
which afaik is also the default for xmonad

1591127524
leeward
I used xmonad on a laptop for a while. It was ok, but...I like fluxbox.

1591127536
leeward
also wmii, but it's too crashy

1591127566
ifreund
yeah, but to tweak it you need more and more haskell :D

1591127570
companion_cube
i3 is top-notch

1591127585
ifreund
i disagree, but it seems that many think that

1591127599
gonz_
I dunno, Haskell in such a small context is very simple.

1591127608
ikskuh
companion_cube: @as(i3, +1)

1591127613
gonz_
Creating bigger things in Haskell and bringing in type-astronaut stuff is where it fails.

1591127624
gonz_
Or where it's more likely to fail, at the very least.

1591127627
pixelherodev
leeward: Found it :D

1591127630
pixelherodev
companion_cube: sway is better IMO :)

1591127634
leeward
pixelherodev: \o/

1591127641
pixelherodev
Yeah, it's pretty simple

1591127654
pixelherodev
There's an if (isTest) branch in LibExeObjStep.make

1591127661
pixelherodev
the output dir is set

1591127698
companion_cube
ifreund: I like i3 with a vanilla config, I should specify

1591127699
pixelherodev
Here's the thing

1591127701
companion_cube
(or almost vanilla)

1591127704
pixelherodev
I have

1591127706
pixelherodev
It might be test

1591127709
pixelherodev
It might be based on the file

1591127712
pixelherodev
i didn't check :P

1591127753
pixelherodev
Basically, for non-tests, it executes with the builder, then copies the produced file

1591127787
pixelherodev
What I'm going to do here is add an `install` flag for test steps

1591127805
leeward
That seems reasonable.

1591127826
pixelherodev
Currently, Test.install gives unreachable

1591127833
pixelherodev
Just going to provide an actual implementation

1591128471
ifreund
gonz_: may very well be. For me it was more friction that working with C at the time and I wasn't willing to put much time into it

1591128526
ifreund
anyhow, i'm not a huge fan of the "config through editing the source code" model so I've taken a different approach with river

1591128826
pixelherodev
andrewrk: regarding the error labelling: you wanted notes - e.g. warnings?

1591128832
pixelherodev
The problem with that is the way error cheks are implemented

1591128838
pixelherodev
It iterates over failed_decls etc

1591128862
pixelherodev
Which means we'd need a way to access warnings without needing to run a separate process

1591129040
pixelherodev
... just saw the other comment on getAllErrorsAlloc

1591129172
andrewrk
I'm just saying, use the code that already exists, instead of writing bespoke functions for the test harness that don't need to exist

1591129248
andrewrk
test harness code is a liability, better to keep it as lean as possible

1591129276
pixelherodev
For sure

1591129283
andrewrk
if the test harness code needs tests, that's a smell

1591129287
pixelherodev
Thanks for feedback, I know where to take this now

1591129289
andrewrk
np

1591129297
pixelherodev
Actually, that test was only there because I

1591129300
pixelherodev
but I was calling it wrong :P

1591129309
andrewrk
right but the point is you don't need the impl in the first place

1591129335
pixelherodev
It wasn't meant to stick around

1591129338
pixelherodev
Actually

1591129347
pixelherodev
Now that I think about it, you'll see a "TODO: remove, this was for ZLS" in the commit :P

1591129498
marler8997
anyone able to explain when @memset(..., undefined, ...) should be called?

1591129510
marler8997
and/or what it's doing

1591129533
pixelherodev
Telling the compiler that blah is no longer needed

1591129550
pixelherodev
Which means that if you try using it in debug mode, it should trigger a panic

1591129559
marler8997
it's being used on newly allocated memory

1591129607
ifreund
perhaps that's how newly allocated memory gets set to 0xaaaaaaa in debug mode

1591129626
marler8997
that would make sense

1591129672
marler8997
so it sounds like a way to set memory to "undefined", which in debug mode should cause access to panic/assert in some way

1591129725
ifreund
yeah, zig needs something like that since allocation is userland

1591129733
andrewrk
marler8997, note:

1591129776
marler8997
change makes sense

1591129814
andrewrk
@memset to undefined is a no-op in unsafe build modes. in safe build modes, it sets all the bytes to 0xaa, and if valgrind integration is enabled (which is the default when available and debug mode), it also makes a valgrind client request to note that the entire range is undefined

1591129816
marler8997
I think it would be easy to make it a separate change, don't know for sure though

1591129832
andrewrk
doing the valgrind client request is much slower if you do it for each byte independently

1591129840
andrewrk
up to you

1591129844
marler8997
ok

1591131379
xackus
why are the std lib docs so outdated?

1591131390
pixelherodev
They're from 0.6, I assume?

1591131401
xackus
i'm looking at master

1591131402
pixelherodev
Is there docs for the master branch?

1591131404
pixelherodev
Are*

1591131408
xackus


1591131413
pixelherodev
I think they're generated from 0.6 and erroneously labelled master?

1591131415
pixelherodev
Or something like that

1591131423
ifreund
i think they either are not automatically generated or the generation is broken

1591131428
leeward


1591131459
pixelherodev
Switching to x11 for stream, back shortly :)

1591131486
companion_cube
"wayland is the future" heh pixelherodev ? :p

1591131494
ifreund
pixelherodev: what's wrong with wayland?

1591131535
companion_cube
OBS doesn't work on it I think?

1591131567
ifreund


1591131591
ifreund
or if you want a minimal and probably more performant alternative

1591131613
pixelherodev
ifreund: obs does work

1591131615
pixelherodev
but

1591131620
pixelherodev
wlrobs is what I have installed right now

1591131622
pixelherodev
and it, well

1591131626
pixelherodev
segfaults occasionally

1591131628
pixelherodev
randomly

1591131630
pixelherodev
without pattern :P

1591131645
pixelherodev
At least, in the scpy backend

1591131652
pixelherodev
I'd need an OBS fork to try the dmabuf one

1591131661
pixelherodev
I'll try txproto in the future, but for now, just installing feh

1591131669
pixelherodev
because I know it's stupid, but it feels so weird having a blank background

1591131685
pixelherodev
Just about done though, so it'll only be a minute :P

1591131702
pixelherodev
companion_cube: yes, it is

1591131702
ifreund
my background has been blank since i started using tiling window managers

1591131705
pixelherodev
but it's currently the present

1591131708
pixelherodev
:P

1591131722
pixelherodev
Wayland is better than X11 because there is no "The wayland server"

1591131728
pixelherodev
Whereas there's noly one real X11 server

1591131736
pixelherodev
Okay, starting momentarily

1591131745
ifreund
i don't buy into the transparent terminal emulator bs so there's not really a point if it will never be seen

1591131758
pixelherodev
I'm not using CRT anymore

1591131759
pixelherodev
don't worry

1591131768
pixelherodev
I just like having a background?

1591131771
companion_cube
pixelherodev: that's a bit of a weak arg, but ok :D

1591131773
pixelherodev
It doesn't cost me anything

1591131775
companion_cube
I was a bit trolling anyway

1591131775
sacredbirdman
zig compiler terminates unexpectedly.. how do I find out why :P

1591131798
ifreund
sacredbirdman: do you get a stack trace?

1591131802
pixelherodev
sacredbirdman: depends. If you want to fix it yourself, I can help talk you through it later, otherwise, report it to the mailing list or github issues

1591131818
pixelherodev
companion_cube: how about this?

1591131826
pixelherodev
Wayland properly handles multi-DPI?

1591131831
companion_cube
yes I know

1591131835
pixelherodev
It's

1591131836
companion_cube
I need to re-try it :p

1591131837
pixelherodev
:P

1591131841
sacredbirdman
no stack trace.. it just says: The following command terminated unexpectedly:/usr/bin/zig build-exe /home/sampo/code/zig/haldclut/src/main.zig --library c --library SDL2 --library SDL2_image --library SDL2 --cache-dir /home/sampo/code/zig/haldclut/zig-cache --name haldclut -I /usr/include/SDL2 -I /usr/include/SDL2 -D _REENTRANT -D _REENTRANT

1591131841
sacredbirdman
--cache on

1591131859
pixelherodev
Anyways

1591131865
pixelherodev
Going to start that ZBS stream now

1591131874
sacredbirdman
where's the stream?

1591131875
companion_cube
please post url

1591131883
pixelherodev


1591131885
pixelherodev
I think

1591131888
pixelherodev
typed that from memory though so

1591131914
leeward
Well, that's someone at least.

1591131938
pixelherodev
If it has the Tricarbon video it's me :P

1591131963
pixelherodev
delay for a minute

1591131970
pixelherodev
spammer in a discord channel I mod

1591131977
pixelherodev
need to sign in to the client :P

1591132274
pixelherodev
whelp, here goes nothing

1591132354
leeward
twitch still says offline, fwiw

1591132545
pixelherodev
I know

1591132551
pixelherodev
Had to refill tea real quick :P

1591132580
ifreund
i can't wait to learn how the ZBS works

1591132582
companion_cube
you could stream the tea

1591132587
companion_cube
just like andrew does

1591132616
pixelherodev
:P

1591132625
ifreund
i think i already use it pretty effectively, but i got to my current build.zig by cargo-culting/trial and error

1591132653
pixelherodev
Anyways, good to go now

1591132656
pixelherodev
Finally

1591132679
pixelherodev
Just removing wayland plugin

1591132680
pixelherodev
jic

1591132682
pixelherodev
ten seconds probs

1591132702
alexnask
Just read build.zig /s

1591132713
pixelherodev
That's my goto advice

1591132717
pixelherodev
Figured I'd explain it better though

1591132729
pixelherodev
Reading the code is the second-best teach

1591132731
pixelherodev
er*

1591132737
pixelherodev
Experience is the best

1591132737
ifreund
yeah i read a little bit, but build.zig is long

1591132751
pixelherodev
Okay, starting now

1591132764
ifreund
for real for real?

1591132801
pixelherodev
Okay yeah

1591132805
ifreund
music, nice

1591132814
alexnask
hi mom

1591132820
alexnask
Oh you tabbed out :(

1591132836
ifreund
pixelherodev: audio is kinda fuzzy

1591136730
gonz_
How good is zig-lsp generally?

1591136763
ifreund
zls is quite good is that what you mean?

1591136773
gonz_
Someone complained about it gobbling up memory or something a while ago. Is it a reasonably good experience most of the time and is it trending upwards?

1591136778
gonz_
zls, yeah.

1591136792
ifreund
strong upward trend yeah

1591136845
ifreund
and it's quite useful already, though you probably want to update daily to stay on top of the development

1591136852
gonz_
Mhm

1591136859
fengb
Bleeding edge, just like the language

1591136862
gonz_
This I sort of expect anyway, it's the usual routine with zig

1591137051
gonz_
Only way to find the edges is to use it, I suppose

1591137075
gonz_
Though I have to say, Zig isn't particularly hard without super advanced tools.

1591137149
ifreund
no, it really isnt

1591137175
ifreund
most valueable thing for me is goto-definition and completions for the std i think

1591137374
gonz_
I like the completion in general for discoverability, yeah.

1591137801
pixelherodev
...

1591137808
pixelherodev
ifreund: did I leave my music running? :P

1591137819
pixelherodev
gonz_: it was I

1591137823
pixelherodev
I complained about memory usage.

1591137825
fengb
But we don't have goto 🤔

1591137826
pixelherodev
As the complainer:

1591137828
pixelherodev
ZLS is awesome.

1591137835
ifreund
pixelherodev: nah, just for the first minute

1591137838
pixelherodev
it was more an issue on my end, I'm 99% sure

1591137842
pixelherodev
ifreund: ahh, gotcha

1591137905
pixelherodev
leeward: patched :D

1591137942
pixelherodev
#5514

1591137945
pixelherodev
;)

1591137956
pixelherodev
Was more than I expected, needed to patch stage1 2

1591137959
pixelherodev
Sorry, I mean, stage1 too

1591137962
pixelherodev
:P

