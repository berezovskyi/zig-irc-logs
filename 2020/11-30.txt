1606700995
Bekwnn
hey, just thought I'd pop in and ask how you generally go about running unit tests for all parts of a project (or for a particular few directories)?

1606701626
g-w1
see lib/std/std.zig in its `test "" { std.testing.refAllDecls(@This); } essentially runs all tests for all files that it imports. if the files are all connected I would use this.

1606701660
Bekwnn
thanks, that looks like about what I'm looking for

1606726903
drelo
Hi! Is there a condition variable implemented for zig?

1606727477
novaskell
drelo: do you mean optionals or?

1606727497
gonz_
No, it's a synchronization construct in C++ (`std::condition_variable`)

1606727511
gonz_


1606730795
daurnimator
andrewrk: thoughts on reviving errno as an enum? (

1606741606
l1x
hi folks, I am working on a reproducible build project for linux so we can deliver binaries to customers and both side can verify that they got what they think they got

1606741611
l1x
this is a bit trickier problem than it sounds because how we currently build software

1606741619
l1x
since Zig is coming up as a better C i was wondering if you any take on this (building / compiling software a reproducible way)

1606741624
l1x
so what i would like to achieve is an idempotent function that has a few inputs and it always produces the same outputs

1606741628
l1x
the inputs would be the compiler, source files, architecture, something i am not yet aware -> binary that can be verified by checksums

1606741655
ikskuh
i think that might work already assuming everyone uses the same zig compiler

1606741730
l1x
so you do not have any dependency on the outside world? like hostname, time for example

1606741744
g-w1
try it

1606742039
daurnimator
l1x: things zig builds (including when zig is acting as a C compiler) should be reproducible.

1606742051
daurnimator
`zig build` excluded.

1606742100
l1x
daurnimator: sorry zig build is reproducible?

1606742129
daurnimator
l1x: `zig build-exe`, `zig build-lib`, `zig build-obj`, `zig cc` should all be reproducible. `zig build` might not be.

1606742164
l1x
thanks daurnimator !

1606742164
g-w1
you have to make sure that the target is not native, but baseline, though

1606742189
daurnimator
g-w1: its still reproducible, as long as you consider the architecture an input

1606742391
g-w1
I just tried it on 2 different machines and it just worked! I am pleasantly surprised

1606744479
semarie
I want to note that something having

1606744559
daurnimator
semarie: that's fine if you declare it as an input somehow: e.g. you could introduce a `--layout-seed=12345678`

1606744572
ifreund
you can intentionally make `zig build` unreproducible fairly easily

1606746171
komu


1606746173
komu
featuring GingerBill and Andrew

1606748088
cren
hey all. Sorry if this is a bad question, but how do I free heap allocations I have made? I'm looking at FixedBufferAllocator and it doesn't have, say, a `free` method

1606748210
ifreund
cren: std.mem.Allocator.free()

1606748213
ifreund
or destroy()

1606748257
ifreund
(the first field of FixedBufferAllocator is an std.mem.Allocator)

1606748281
cren
is std.mem.Allocator like an interface?

1606748300
ifreund
yes

1606748816
cren
what is the difference between .free() and .destroy()

1606748892
g-w1
you use destroy with create and free with alloc (one is for arrays and one is for single objects)

1606750303
cren
I'm allocating an i32 and then calling `try allocator.destroy(ptr);` where `ptr` is what's returned from `.create()`, and I am receiving the error `expected error union type, found void`

1606750316
cren
is this because of the return type of the function (which is `!void`)?

1606750352
g-w1
destroy ALWAYS works (this is in the zen of zig) so you don't need to do try allocator.destroy, just allocator.destroy

1606750353
ifreund
cren: destroy can't fail

1606750508
cren
cool. Is the Zen of Zig written down anywhere like the Python one?

1606750531
ifreund
zig zen

1606750931
ifreund
I really wish I didn't have to handle windows only errors when using std.os and targeting posix only

1606751146
ifreund
#6600 I guess

1606753724
marler8997
saw this interview with Greg Kroah-Hartman from yesterday, talks about what he's learned from 20 years of maintaining the linux kernel.  Might be good advice to consider when Zig hits version 1.0:

1606761736
andrewrk
l1x, "reproducible" is listed as a property of the "release" build modes:

1606761849
l1x
thanks andrewrk

1606762503
GrooveStomp
Has anyone tried using Zig on Plan9?

1606762549
karchnu
GrooveStomp: wait, a second person trying zig on Plan9? Is there still an active community somewhere?

1606762570
g-w1
you should talk to pixelherodev, I think they use plan 9 as a daily driver. I don't think you can use it now, but once the cbe (c backend) is ready, you should be able to.

1606762591
GrooveStomp
karchnu: Maybe a grassroots movement. :-)

1606762598
GrooveStomp
Thanks g-w1

1606762932
marler8997
andrewrk, how do you cherry pick a PR and get github to mark it as merged?

1606762982
marler8997
or wait, I think I misunderstood your comment, you were just saying you cherry picked the PR to another branch

1606763316
andrewrk
marler8997, yeah I was just announcing that I had done it

1606763422
pixelherodev
karchnu: yes?

1606763430
pixelherodev
9front is in active development :P

1606763454
pixelherodev
but, I'm not (and won't be) trying Zig on plan9

1606763479
marler8997
pixelherdev why is that?

1606763494
pixelherodev
a) stage1 cannot be ported due to the usage of C++

1606763511
pixelherodev
b) I wouldn't want it ported for that and other reasons

1606763535
g-w1
you will use stage2 with the cbe though?

1606763551
marler8997
^ and also, what are "other reasons"?

1606763560
pixelherodev
c) I have no real motive to use Zig in that space

1606763589
pixelherodev
Even on Linux, there's specific types of tasks where I prefer Zig, and others where I'll probably stick with CC indefinitely

1606763614
pixelherodev
On Plan9, the number of cases where I have a motive to

1606763637
pixelherodev
If only because plan9's C compilers are actually sane (unlike e.g. LLVM or GCC :P)

1606763732
pixelherodev
g-w1: I've been contemplating adding plan9 support directly without needing the CBE, but I'm not sure I want to

1606763747
pixelherodev
It'd really just be a separate linker format

1606763765
g-w1
it doesn't use elf?

1606763769
pixelherodev
nope

1606764518
karchnu
sane C compilers? Is this really exists in our universe?

1606764582
karchnu
I will check 9front a bit more then.

1606764595
marler8997
yeah, I realize one of the biggest draws for me with Zig is the sane tooling

1606764767
pixelherodev
karchnu: there's one or two I like on Linux too, but a) not enough backing (9front doesn't have the activity of e.g. GCC, but it does have at least a few dozen people watching it, whereas e.g. cproc has approximately one maintainer :( I still started using it regularly a while back, but I couldn't really recommend it for stable usage at this point ) and b) on Linux, you kinda expect the compiler to

1606764769
pixelherodev
deal with all the Linux crapware that's been made ever :P

1606764794
pixelherodev
I can't use cproc as the system compiler, for instance, because while it will work with

1606765522
ifreund
is it close to being able to compile the kernel? is that even a goal?

1606765523
earnestly
karchnu:

1606765913
pixelherodev
and

1606765970
pixelherodev
ifreund: It cannot build it atm for sure, but I don't think that's a goal

1606765995
pixelherodev
Well, actually - given that the author runs a fully static linux distro where cproc is used for currently ~80% of the system, it might be

1606766144
ifreund
ah, same dude that made oasis and that other wayland compositor lib

1606766421
earnestly
He was the first to try

1606766592
companion_cube
The packages that don't compile with cproc, do they use Gnu extensions?

1606766625
ifreund
earnestly: at writing a wayland compositor other than weston?

1606766643
earnestly
ifreund: More or less, yeah.  He tried to port dwm

1606766662
earnestly
Well, he did port dwm and then ported dmenu, and then st.  That was long ago though

1606766711
ifreund
interesting, I forget how long wayland's been around sometimes

1606766956
andrewrk
tdeo, it's your favorite thing: deleted code:

1606767001
pixelherodev
That's one of my favorite things too!

1606767004
pixelherodev
:)

1606767025
pixelherodev
companion_cube: see "What's missing" at

1606767079
andrewrk
poor xmarto submitted a nice improvement and then in response the entire data structure got deleted instead

1606767116
companion_cube
"preprocessor"

1606767120
companion_cube
wat

1606767158
pixelherodev
companion_cube: it currently depends on an external preprocessor

1606767170
pixelherodev
that can be from GCC, or any of the many other implementations around the net

1606767206
companion_cube
right

