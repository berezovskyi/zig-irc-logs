1579738592
fengb
const Bool = enum{ True,  False, FileNotFound }

1579739736
pixelherodev
daurnimator, when is a feature a maybe?

1579739839
fengb
I think zig test is eating the seg fault message :(

1579740085
fengb
Curious, what's the usecase of a tagless union?

1579740164
andrewrk
fengb, when the knowledge of which tag is active lives elsewhere

1579740201
fengb
Oh yeah, my emulator uses one >_>

1579740230
andrewrk
Im really happy with how tagless unions turned out

1579740255
fengb
There's still a check in release-safe right?

1579740268
Snektron
Finally starting to get somewhere on this vulkan thingy

1579740299
andrewrk
Yeah release safe has union safety

1579740317
andrewrk
It's planned to support disabling it per type

1579740325
andrewrk
Havent needed that yet tho

1579740348
Snektron
Curious, do extern unions also have type safety?

1579740354
daurnimator
pixelherodev: at compile time the target

1579740392
fengb
`unsafe union` :P

1579740398
andrewrk
No because extern unions have well defined memory layout and non zig code modifies the data

1579740489
Snektron
Guessed so

1579740559
pixelherodev
daurnimator, no I got that

1579740564
pixelherodev
I'm saying, when might that happen?

1579740569
fengb
After I'm more accustom to Zig, writing a sexpr parser is actually pretty nice and elegant

1579740679
mikdusan
tagged-union + switch-unwrap is the first thing that grabbed me about using zig to write a parser

1579741063
pixelherodev
Switch unw - oh right yeah

1579741071
pixelherodev
Used that for the LLVM parser :P

1579746183
mikdusan
when adding breakpoints by lineno to the wrong source file it's time for a coffee refill

1579746281
pixelherodev
s/coffee/tea

1579746281
pixelherodev
FTFY

1579751105
fengb
How did I live before errdefer?

1579751305
pixelherodev
Probably the same way the rest of us did

1579751308
pixelherodev
With lots and lots of regret

1579752220
fengb
Should I put braces around guard clauses?

1579752229
fengb
if (foo) { return null }

1579752249
daurnimator
Only if it goes to multiple lines

1579755814
pmwhite
I wonder if one could implement an in-language parser generator using comptime features.

1579756307
daurnimator
pmwhite: for sure

1579756598
pmwhite
It would be cool if the parser generator could require the grammar to be valid LL(1), or whatever the most efficient thing is.

1579756708
daurnimator
not all formats

1579756788
mikdusan
I'm going to take a stab at fixing incorrect packed struct @sizeOf, and @byteOffsetOf, if anyone else is on this let me know so we don't compete

1579756804
daurnimator
mikdusan: many have tried. go for it :)

1579756889
pmwhite
daurnimator: Yeah, but if the grammar is LL can be than it would be nice to statically check that the specification for the grammar is that way. That way you don't end up with a non-terminating parser.

1579756942
pmwhite
No, wait. I guess anything produced by a generator should pretty much be terminating, right?

1579756994
pmwhite
I think what I mean is that allowing enforcement of LL would provide confidence that you haven't made some mistake that causes the parser to be really slow.

1579757200
mikdusan
sound right? @sizeOf(packed struct{ field: u24 }) should be 3? and @sizeOf(packed struct{ field: u23 }) should also be 3?

1579757261
andrewrk
mikdusan, I wrote a bit about this recently... let me find it

1579757271
daurnimator
mikdusan: I'm not sure..... @bitSizeOf was in a recent proposal

1579757275
mikdusan
#3133 i have read

1579757276
andrewrk


1579757285
daurnimator
mikdusan: @sizeOf is defined to be the size in an array.

1579757304
daurnimator
mikdusan: if I have an array of `packed struct {x:23}`.... is there a padding bit between items?

1579757316
daurnimator
*:u23

1579757330
mikdusan
andrewrk: perfect. that's the exact test case I was looking at

1579757349
daurnimator
Based on the existence of PackedBitArray... I guess not. But I've never thought that that should exist

1579757722
mikdusan
daurnimator: what is PackedBitArray?

1579758096
mokafolio
is there a dynamic array in the zig std lib?

1579758114
fengb
std.ArrayList

1579758126
mokafolio
thanks

1579758655
daurnimator
mikdusan: if you want an array of e.g. u4, you need to use std.PackedIntArray. otherwise they take up a u8 each

1579758760
mikdusan
ah ok. for some reason my grep-fu failed to find that

1579759260
andrewrk
I think if I can find out what LLVM believes the cpu / features string to be when cross compiling for -

1579759319
andrewrk
`-target aarch64v8_5a-linux-none` and for `-target x86_64-windows-none` that will lead to solving the ci failures in #4264

1579759346
andrewrk
unfortunately this patch just prints out empty strings:

1579759377
daurnimator
andrewrk: shouldn't we be checking actual feature flags rather than looking at reported model?

1579759427
daurnimator
or at least: if there

1579759631
andrewrk
not sure what you're asking

1579759644
andrewrk
for native or cross compiling?

1579760367
daurnimator
for discovering native

1579760386
daurnimator
I haven't looked at the code; but it sounded like we trust the model name reported over the cpuid feature flags

1579760436
andrewrk
nah we trust llvm for figuring out native features

1579760447
andrewrk
for now

1579760481
andrewrk


1579760679
mokafolio
Since zig does not support any kind of polymorphism, would you use tagged unions instead? i.e. if you needed a tree structure to host different types

1579760711
mokafolio
just found the language so bare with me if I am blurting out stupid things :)

1579760804
andrewrk
tagged unions is a good solution if you are ok with having each object take up the space of the maximum sized one

1579760824
andrewrk
otherwise you can use a different pattern of embedding the "base" as a field of the child

1579760833
andrewrk
see std/zig/ast.zig for an example

1579760852
andrewrk
also std.mem.Allocator for an "interface" and the implementations in std/heap.zig

1579760867
andrewrk
there are problems with this approach, several important open issues related

1579760872
mokafolio
thank you, will check it out

1579760906
mokafolio
the tagged union approach has the same issue as in C i guess in that you need to define all the types the tree can ever hold beforehand

1579760910
daurnimator
mikdusan: while you're looking at the packed struct stuff... do you know where the layout of `extern` structs is done?

1579760933
daurnimator
mokafolio: yes. also you want types all roughly the same size

1579760953
andrewrk
daurnimator, llvm inserts padding into structs in accordance with the c abi

1579760979
daurnimator
andrewrk: the reason I ask is for bitfields in extern structs. I wasn't sure where to look

1579760993
andrewrk
but check out analyze.cpp, resolve_struct_zero_bits and resolve_struct_type

1579761012
andrewrk
there are several "phases" of struct resolution, corresponding to the ResolveStatus enum

1579761085
andrewrk
I'm kinda stuck on the cpu target features branch. the next step in troubleshooting this is for llvm to tell me WTF it's doing when empty strings are passed (such as in master branch)

1579761107
daurnimator
andrewrk: empty strings as the target feature list? that worked for me....

1579761107
andrewrk
I'll send an email to the mailing list, and meanwhile go digging through the sources

1579761152
andrewrk
what's happening is empty string is choosing some "baseline" cpu/features that was passing CI tests. now we're explicitly passing a list that is supposedly identical to the empty string. but ci tests fail now

1579761174
andrewrk
I haven't figured out how to get llvm to tell me what cpu/features it was actually choosing, based on passing the empty string

1579761397
mokafolio
andrewrk: by adding the "base" field I assume you'd still have to access it like a regular member right>

1579761436
mokafolio
is there any issue for proposals how to improve that? I

1579761521
andrewrk
yes, and yes there are open proposals

1579761545
andrewrk
personally I don't mind the access. it solves the "multiple inheritance" issue

1579761621
mokafolio
yeah it is no easy problem to solve and maybe should not be, I am just curious what people are thinking

1579761721
andrewrk
this proposal is popular:

1579761757
andrewrk
I'm a bit resistant to the idea, on grounds of it being not strictly necessary

1579761937
mokafolio
This is my favorite solution to the problem, too. But I hear you, at least there is no urgency to it

1579762616
pixelherodev
i'd definitely agree that if it's not *necessary*, and there's no compelling demand for it, and it increases the language's complexity, it's probably not worth it, but that's just my two cents

1579763024
mikdusan
andrewrk: how do we define @byteOffsetOf for packed struct fields? I guess the answer could vary for today's align=1 for packed struct, and #3133 where field aligns must be considered

1579763257
andrewrk
mikdusan, it's defined to be the "host integer" address minus the base address

1579763281
andrewrk
so if you have 2 u1 fields, they both have @byteOffsetOf() == 0

1579764246
tdeo
is there a way to get the current source file line/name?

1579764704
andrewrk
tdeo,

1579772061
s-ol
hey, in latest zig, how do I get std.debug.warn to format in a C string ([*c]const u8)? its just printing it as a pointer for me at the moment

1579772075
s-ol
(latest from git)

1579772630
HesamR
s-ol: I would do something like this : "std.debug.warn("{s}\n", .{@ptrCast([*:0]const u8, c_string)});"

1579773240
s-ol
ooh right, theres that new type of slice

1579773252
s-ol
i'll give it a shot, thanks HesamR

1579775169
mq32
one wish: zig needs a good,

1579775199
mq32
i have problems with a double-based date/time lib right now in that term that "too many day increments on a date time may skip some days eventually"

1579787873
s-ol
how about casting a nested array to a linear slice? e.g. [_][3]f32{ [3]f32{ ... }, [3]f32{ ... } } to []const f32?

1579787992
s-ol
doing it as @bitCast([9]f32, array)[0..] now but that means repeating the size, which isnt clean

1579788116
fengb
Might be easier to start with linear array and manually slice it up

1579788153
fengb


1579788552
s-ol
ok true, in my case it actually doesnt matter

1579792523
betawaffle
is zig ever going to have a `linktime` concept, similar to comptime, but for values/expressions that can only be known at linktime?

1579792557
betawaffle
like, addresses of things, stack sizes, etc

1579792702
fengb
You mean link time variables? Or actually running code at link time

1579792839
mq32
i think betawaffle is talking about "linktime code"

1579792860
mq32
or, i think, post-linktime code execution

1579792864
mq32
which would be really nice

1579792903
betawaffle
someone already mentioned post-comptime

1579792922
betawaffle
i'm curious if there's a difference between the two (linktime vs post-comptime)

1579792994
betawaffle
the usecase i've got in mind right now are basically assertions of things that can really only be checked at or after linking (i think)

1579793007
fengb
Linktime would require a special linker just for Zig code. That might be a really hard buy-in unless it's hoistable into runtime

1579793101
betawaffle
i feel like it could fit in with the idea of ditching linker scripts

1579793123
fengb
Hmm that might be pretty cool

1579793139
betawaffle
which obviously kinda requires a custom linker anyway

1579793158
fengb
Yes but the object files still need to be backwards compatible

1579793178
fengb
I don't think it'd be a good idea to force our linker onto every toolchain

1579793187
betawaffle
right, i'm thinking you'd have really limited abilities

1579793230
betawaffle
what i'm not sure about is whether that would even allow us to do what i think i want

1579793246
mq32
hm

1579793252
BaroqueLarouche
on some platforms, I think it would require that use their linker, like some console that encrypt their ELF

1579793274
mq32
zig

1579793287
mq32
so there's a link.zig which defines the stuff similar to linkerscripts

1579793297
mq32
BaroqueLarouche: yeah that would be one use case actually

1579793312
betawaffle
mq32: oh that's an interesting idea

1579793324
mq32
the LPC1786 requires a checksum in the list of execption handlers

1579793433
betawaffle
so here's a sort of related question... is it

1579793456
betawaffle
i know it

1579793492
betawaffle
at least every time i've tried it tells me it's a runtime value

1579793542
betawaffle
but presumably that's only because it needs information only the linker has access to

1579793598
fengb
Post comptime:

1579793652
betawaffle
how does @frameSize currently work, and how would post-comptime change it?

1579793822
fengb
wasm was clearly not designed for physical hardware :P

1579794527
betawaffle
yeah, pretty sure i was designed to be easy to interpret and/or translate to native code at runtime

1579794530
betawaffle
it*

1579794603
fengb
Right. It's exhibiting none of the bit patterns I've seen in other assembly

1579794630
fengb
I'm curious how difficult it'd be to create a physical wasm machine. Maybe that could be a future project

1579794663
betawaffle
all you need is something that does the translation in hardware

1579794674
betawaffle
x86 is basically that at this point

1579794686
betawaffle
everything gets translated to micro-ops

1579795337
forgot-password
Hey guys, how can I convert a null-terminated c-string to a slice?

1579795383
forgot-password
When trying to print the c string directly I get the following error: "Expected tuple or struct argument, found [*c]const u8"

1579795405
mq32
forgot-password, use std.mem.toSlice or toSliceConst

1579795413
forgot-password
Here's the call: "std.debug.warn("{}", NSRunLoop.*.name);

1579795419
forgot-password
Alright, I'll give it a try, thanks :)

1579795579
fengb
You need to wrap the last argument: `.{NSRunLoop.*.name}`

1579795587
mq32
std.debug.warn("{}", .{ NSRunLoop.name }); // would be the right way atm

1579795623
forgot-password
Oh okay, when and why did that change?

1579795649
mq32
some time after 0.5

1579795650
mq32
:D

1579795661
forgot-password
Oh, how enlightening :D

1579795663
mq32
it's the new tuple syntax that removes the need for varargs completly

1579795674
mq32
i think it's now at least one month in action already

1579795691
forgot-password
Do I still need to convert it to a zig slice?

1579795698
forgot-password
I've been abstinent from Zig for a while

1579795811
forgot-password
Wait, even when I do `std.debug.warn("{}\n", .{1 == 1});` it doesn't print anything...

1579796097
adamkowalski
try doing that in a new project to check if your compiler is up to date and no other issues are responsible. create a  folder and do zig init-exe

1579796134
fengb
forgot-password:

1579796145
forgot-password
That's basically what I did, but I'm gonna delete the cache folder really quick

1579796255
adamkowalski
also not sure if this is documented anywhere, but something that's rather useful is if you want to debug a test case you can create a binary with: zig test src/main.zig --cache off --verbose-link

1579796270
adamkowalski
then you can lldb test and you're off to the races

1579796304
forgot-password
Does std.debug.warn output to stderr?

1579796311
adamkowalski
yeah

1579796324
adamkowalski
tries to*

1579796332
forgot-password
So, it turns out that Vim doesn't show the stderr output, only stdout

1579796337
forgot-password
At least it seems like it

1579796359
forgot-password
When running it in a terminal

1579796376
adamkowalski
yeah I would use tmux and launch it inside of a seperate pane.

1579796418
forgot-password
Hm, I'm using a gui client for neovim

1579796426
forgot-password
The terminal app doesn't render it correctly :(

1579796429
adamkowalski
or better yet join me over at emacs

1579796479
fengb
Ah yeah, debug.warn needs some upgrades:

1579796485
forgot-password
I don't wanna put in the effort to learn a new text editor right now, but thanks :p

1579796586
adamkowalski
theres nothing to learn. just get evil (Emacs VI Layer) and you already know the keybindings

1579796617
companion_cube
and just redo your whole config! 😏

1579796653
forgot-password
Exactly

1579796691
companion_cube
joining emacs is like joining a cult

1579796710
adamkowalski
A good cult though

1579796727
fengb


1579797208
companion_cube
adamkowalski: I swear, the cult can't shut up about org-mode :D

1579797577
adamkowalski
Yeah it's pretty good but that's not why I like emacs at all

1579801567
mikdusan


1579801771
mikdusan
and for store "When writing a value of a type like i20 with a size that is not an integral number of bytes, it is unspecified what happens to the extra bits that do not belong to the type, but they will typically be overwritten."

1579801928
mikdusan
I suppose this is one of the reasons why we have TypeStructField.gen_index and "host integer"

1579802072
andrewrk
gen_index can disagree with src_index if there are 0 bit fields

1579802282
fengb
TIL vim has an "easy" mode

1579802590
andrewrk
alright I think I solved the aarch64 cpu features issue

1579803196
metaleap
whats the size of an optional: 2 words (value being hidden ptr), or 1 + full sizeof underlying?

1579803260
Snektron
Depends on the type

1579803265
mikdusan
usually { payload: T, isNull: bool }

1579803279
Snektron
for ?*T its @sizeOf(*T)

1579803582
metaleap
thx =) makes sense too

1579803596
metaleap
"hidden ptrs" would be weird in a ziglang

1579804043
andrewrk
mikdusan, the bit is the other way around: is_non_null

1579804049
andrewrk
that way writing 0 to it makes it null

1579804828
traviss
is there already an issue for this compiler bug? its struct initialization with a mismatched type.

1579804918
TheLemonMan
traviss, does it give you a 'broken LLVM module' thing ?

1579804962
traviss
yes

1579805002
traviss
`broken LLVM module found: Call parameter type does not match function signature!`

1579805010
TheLemonMan
it's the most hated error at the moment

1579805028
TheLemonMan
together with "instruction doesn't dominate all the uses"

1579805068
TheLemonMan
mikdusan, are you on osx?

1579805074
mikdusan
aye

1579805126
traviss
was looking for an issue to possibly post this repro. sounds like its not necessary.

1579805152
fengb
dominate is more intimidating :P

1579805175
andrewrk
TheLemonMan, I solved the aarch64 issue with cpu features. now it's just down to windows

1579805210
TheLemonMan
what's up with windows? I see the CI failed with an OOM error

1579805253
andrewrk
yeah that's weird. I checked how much more ram we are using in the branch for std.zig tests compared to master and it's 200MiB. maybe that was the last straw

1579805272
andrewrk
I'll see about lowering it

1579805288
fengb
Is there a leak?

1579805305
TheLemonMan
yeah, std.zig sometimes triggers the OOM killer on my box

1579805313
TheLemonMan
fengb, it's yuuuuuge

1579805331
Snektron
Is there an ordered associative container in Zig?

1579805337
andrewrk
we need a garbage collector that runs at comptime

1579805338
Snektron
Something like a linked hash map or a tree

1579805358
andrewrk
biggest memory leak is ZigValue

1579805362
Snektron
(insertion ordered)

1579805407
andrewrk
fengb, it's less that there's a leak, and more that stage1 until recently never freed any memory ever

1579805409
TheLemonMan
there's also a lot of temporary Buf made with constant strings

1579805419
fengb
Ah

1579805423
andrewrk
TheLemonMan, I measured that though, it accounts for something like 1% of the memory

1579805431
fengb
I remember mikdusan mentioned porting over an arena

1579805456
andrewrk
an arena wouldn't really help in the case of ZigValue, if you think about it the compiler is already one big arena

1579805461
TheLemonMan
1% of 6GB is still a sizable amount of memory heh

1579805483
mikdusan
fengb: I was and let "ideas" features creep in and take my eye off the ball

1579805499
andrewrk
is it though? 6 GiB - 1% is 5.94 which doesn't really get us closer to our 3.5 GiB goal

1579805530
andrewrk


1579805560
andrewrk
one thing we could do is free all zig stuff before telling llvm to go for it

1579805614
Snektron
Is that memory consumption just the AST?

1579805655
andrewrk
check out the link, it shows a breakdown. AST is a tiny fraction

1579805667
andrewrk
AST also never wants to get freed, everything ultimately wants to know where it occurs in the source code

1579805703
andrewrk
Unknown_1 is buf bytes

1579805741
Snektron
Im not familiar enough with the compiler internals to know at first glance what part of the compiler a type belongs to at first glance, so they all seemed like AST nodes to me

1579805959
andrewrk
here it is with AstNode annotated:

1579805967
andrewrk
AstNode: 401273 items, 160 bytes each, total 61.229 MiB

1579806273
Snektron
andrewrk, did you add malloc overhead in your profiler?

1579806285
Snektron
Im not sure how drastic it is though, or whether its correct to just add 8 for each allocation

1579806418
andrewrk
that's not the point of the tool. `time -v` is a better tool to find out actual memory usage. this profiling is to figure out how to change zig source code to use less memory

1579806605
andrewrk
argh, c++ does not allow strings in template args

1579806616
Snektron
Nope, not untill c++20

1579806637
andrewrk
sometimes I forget the main reason to avoid c++ is because the features don't just work

1579806685
Snektron
if you really want to you could of course use a parameter pack

1579806743
andrewrk
what I really want is @typeName()

1579806753
Snektron
you can do that

1579806767
Snektron
but you're probably not going to like it

1579806783
andrewrk
I looked into this, and you are correct, I do not like it

1579806865
Snektron
Which one did you look into, rtti or PRETTY_FUNCTION

1579806882
Snektron
theyre both headache worthy though

1579806964
TheLemonMan
I've never seen a project not using -fno-rtti

1579807428
Snektron
Remind me of a project i had to work on for uni

1579807479
Snektron
The students who worked on it the previous year left some nice things for us

1579807483
Snektron
such as `delete this;`

1579807540
TheLemonMan
hah

1579807564
Snektron
Along with a segfault caused by a destructor

1579807578
TheLemonMan
talk about pulling the rug from under your feet

1579807582
Snektron
but was fixed by creating a cyclic reference to itself with a shared_ptr

1579807621
TheLemonMan
two wrongs make a right!

1579807690
Snektron
My uni's "main" language is c++, so that goes about as well as you'd expect

1579807717
Snektron
Not that i really have a problem with it, i have a love/hate relationship with c++

1579807722
TheLemonMan
it's not C++98, you can't complain (that much)

1579807758
Snektron
Well its not like they teach c++11, you have to figure that out by yourself

1579807761
fengb
You love to hate it? >_>

1579807813
Snektron
I don't really think its that horrible to program in

1579807818
Snektron
At least, if you stay away from macros

1579807818
fengb
So... if at comptime you try looking up the declarations of @This(), the compiler segfaults >_>

1579807851
fengb
I feel like every day, I make the compiler cry in new ways

1579807884
andrewrk
if I wrote a compiler I would simply make it never segfault

1579807901
fengb
catch(segfault) return 0

1579807924
TheLemonMan
replace all the macros with too much SFINAE and you're back to square one :P

1579807932
fengb
I mean, I keep telling it nonsensical operations, so I get it >_>

1579807982
TheLemonMan
fengb, the rules of the fight club are clear, who finds a bug has to fix it!

1579807986
Snektron
I don't use SFINAE too much but i'm never shy of a bit of metaprogramming in templates

1579808001
fengb
I guess I should log it

1579808351
andrewrk
thx

1579808550
andrewrk
hmmm. on posix `zig test` does execve which replaces the compiler with the test binary in memory; so the memory taken up by the compiler is gone

1579808574
andrewrk
windows doesn't really have this afaik so it executes as a child process, the any allocations while running std tests are on top of whatever the compiler used

1579808963
fengb


1579808981
fengb
I don't think it's a really useful case since it's nonsensical heh

1579809045
andrewrk
it should either work or report a dependency loop

1579811074
mikdusan
is there a std fn to convert string from `[16]u8` where it could be max size 16, or null terminated if shorter ?

1579811333
andrewrk
not that I'm aware of

1579811783
Snektron
mikdusan, if you're adding stuff to std.mem anyway, could you do a quick countScalar?

1579811798
Snektron
otherwise i'll add it

1579811801
TheLemonMan
countScalar?

1579811831
Snektron
Counting occurances of a value in a slice

1579811858
Snektron
Surprised me that its missing

1579811985
TheLemonMan
I think `count` is a better-suited name if you consider all the other fns in mem

1579812030
Snektron
I thought that name would be reserved for something that counts occurances of a subsequence

1579812040
TheLemonMan
you can probably come up with some nice simd-accelerated algorithms for that

1579812063
Snektron
yeah but is that worth it

1579812094
Snektron
I mean, considering Zig is uses LLVM it will probably autovectorize it anyway

1579812239
BaroqueLarouche
is the autovectorizer that good ?

1579812256
Snektron
LLVM's, at least on clang, is pretty crazy

1579812297
andrewrk
I tested and using @Vector in zig speeds up even debug builds which have no autovectorization

1579812307
andrewrk
even with safety checks, it's faster

1579812330
Snektron
Did you actually test a count function or is that in general?

1579812334
andrewrk
in general

1579812359
Snektron
In the general case is not surprising because its not omnipotent of course

1579812439
Snektron
I think if you use @Vector (at least, its the case with xmmintrin86 in c), LLVM will even try to autovectorize that

1579812527
Snektron
Hm, by a quick look the generated assembly could be simpler

1579812545
Snektron
Ill take a look at it in a moment, now i got interested

1579812808
mikdusan
Snektron: re: adding stuff to std.mem; not planning on adding anything right now

1579812830
Snektron
oh, alright

1579813278
andrewrk
Snektron, if you use @Vector it's not auto vectorization, it's just lowering

1579813292
andrewrk
@Vector is manual vectorization

1579814100
Snektron
i know

1579814112
Snektron
What i mean is that LLVM tries to autovectorize manual vectorization too

1579814845
aequitas_
hi, I'm new to Zig, thought I'd try it out for my next pet project to parse some binary data from a serial device to reverse engineer the protocol but I'm getting stuck on type conversions.

1579814927
Snektron
Which kind of conversion?

1579814938
Snektron
and whats the error

1579814964
aequitas_
I have a []u8 where I want to step over in u16 values, but I don't want to convert the []u8 to a []u16

1579814987
aequitas_
as I don't know if the starting byte is half of a u16 so to say

1579815022
aequitas_
my approach now is to take a slice of the input data of 2 u8's, but I don't know how to convert it into a u16

1579815053
aequitas_
var crc: u16 = data[start .. start + 2];

1579815059
aequitas_
error: expected type 'u16', found '[]const u8'

1579815068
andrewrk
why not convert the []u8 to []u16? slices are reference types so it's just a pointer cast

1579815166
Snektron
For a single value, you can use either `@bytesToSlice(data[start .. start + 2])[0]`, or you can cast to an array and use a bitcast: `@bitCast(u16, []const u8{data[start], data[start + 1]})`

1579815189
andrewrk
std.mem.readIntSliceLittle(u16, data[start .. start + 2])

1579815201
Snektron
eh, yes thats even better

1579815242
aequitas_
thx, i'll try your suggestions

1579815917
TheLemonMan
andrewrk, any plan for the switch to llvm 10?

1579816063
andrewrk
yeah same plan as last time. now that llvm did the release/10.x branch it's time to update zig's llvm10 branch to be compatible. when llvm releases we merge into master

1579816075
andrewrk
I did some work on llvm10 but there is more to do before it builds

1579816078
aequitas_
andrewrk readIntSliceLittle does the trick, readIntSliceBig in this case for me, thx

1579816101
andrewrk
np

1579816103
aequitas_
out of curiousity, when I try to cast the []u8 to []u16 I get this: casting []u8 to []u16 gives me this: error: expected type '[]const u16', found '[]const u8'

1579816166
andrewrk
it should be @bytesToSlice(u16, data)

1579816239
andrewrk
I think there is std.mem.bytesAsValue

1579816253
andrewrk
which is maybe an argument for removing the builtin entirely

1579816294
aequitas_
I probably should dive into the stdlib a little bit more :)

1579816387
andrewrk
TheLemonMan, note that zig 0.6.0 release date is scheduled for a couple weeks after llvm 10's scheduled release

1579816464
TheLemonMan
that doesn't leave us with too much time to report any bug that may surface :\

1579816518
TheLemonMan
when LLVM9 dropped we hit that nasty bug with switches on aarch64 a patch was only shipped with 9.0.1

1579816520
andrewrk
well I was planning on getting the branch building today, and once per week running the full test suite in llvm debug mode with asserts on

1579816585
andrewrk
the aarch64 thing didn't have test coverage until this release cycle - I don't think it was a regression

1579816624
andrewrk
there were several regressions in llvm 9 release candidates found by zig's test suite, which I reported upstream and they got fixed before 9.0.0 was released

1579816629
TheLemonMan
it was, see #3271 #3526 #3288

1579816666
andrewrk
you filed those issues when trying to add test coverage for aarch64 right?

1579816673
andrewrk
before you did that we didn't have coverage

1579816690
andrewrk
are you saying this bug did not exist in llvm 8?

1579816712
TheLemonMan
yeah, LLVM 9 introduced it

1579816740
andrewrk
ah. well if zig had test coverage for it when llvm 9 release candidates were announced we would have caught it

1579816761
TheLemonMan
I used to run the aarch64 tests by hand before the qemu-user thing went mainstream :)

1579816795
andrewrk
yeah your point is still valid. how much time would you prefer between llvm10 merge and zig 0.6.0?

1579816857
TheLemonMan
I'd say that as soon as they cut the first RC it's time to merge the branch

1579816886
TheLemonMan
that'd give us ~1 month to find any eventual release-blocking problems

1579816922
andrewrk
that's problematic for people trying to build zig from source or with apt.llvm.org. we already get a bunch of complaints for merging on release day

1579817057
andrewrk
but I see your point. the goal is to get real actual testing of the release candidate, before it is released

1579817103
andrewrk
my preference would be to have people build llvm10 branch from source and test using that

1579817137
andrewrk
that will be possible within a day or two, and it gives people 3+ months

1579818700
andrewrk
TheLemonMan, llvm10 branch builds now. haven't run the test suite yet

1579818717
andrewrk
some good news is that zig_clang.cpp & friends were relatively easy to update

1579821012
akavel
Hi! How should my build.zig look like to build a .DLL on Windows?

1579821108
andrewrk
akavel, b.createSharedLibrary("name", "foo.zig", .{.major = 1, .minor = 0, .patch = 0})

1579821132
akavel
Hi andrewrk! :)

1579821146
akavel
Hm; maybe I should actually ask a different question:

1579821164
akavel
how can I add current directory as the one to search for .h files?

1579821195
akavel
I tried     b.addNativeSystemIncludeDir("."); but can't seem to see my @cInclude

1579821209
akavel
I'm trying to write a Lua module in Zig

1579821222
andrewrk
your_dll.addIncludeDir(".")

1579821265
daurnimator
akavel:

1579821285
akavel
andrewrk: muuuuch better, thanks!!! <3 :)

1579821286
daurnimator
I guess that gist turned into an automatic zig -> lua binding generator

1579821314
daurnimator
Also probably needs to be updated to current zig master

1579821388
akavel
daurnimator: this is a huge gist; any hints how to use it? :/

1579821487
akavel
hmmm, ooook, I see some test, I guess I can try to get something out of it...

1579821505
daurnimator
akavel: I don't think I can say its ready for use yet. but as you note, there are lots of tests :)

1579821528
daurnimator
in particular look at the final test

1579821534
daurnimator
it sort of brings it all together

1579821543
akavel
daurnimator: could you make it into a proper repo to make it possible for me to watch it? :)

1579821561
daurnimator
not right now at least

1579821566
akavel
I'm a complete Zig newbie :)

1579821579
daurnimator
or maybe I can... one min

1579821774
Snektron
Its really annoying that error traces seem to point to the wrong origin

1579821797
andrewrk
Snektron, it's likely that they point to the correct origin, but with some noise in there

1579821831
Snektron
Well they point to the correct origin

1579821836
Snektron
But its not the correct trace

1579821856
andrewrk
Sahnvour has a plan to fix that

1579821909
Snektron
Great

1579821974
daurnimator
akavel: doh. something seems broken in new zig translate-c :(

1579821988
akavel
daurnimator: ?

1579821989
daurnimator
`pub const luaL_newstate = @compileError("unable to resolve function type ZigClangTypeClass.Paren");`

1579822011
akavel
daurnimator: are you using 0.5 or master?

1579822016
daurnimator
akavel: master

1579822028
akavel
maybe 0.5 would work?

1579822040
daurnimator
It should with the current gist contents

1579822046
daurnimator
I wrote it around the time of 0.5

1579822095
akavel
oh ok; though I'm still fighting with build.zig; missing libc headers now, not very sure why but lua seems to want stdio.h;

1579822103
daurnimator
akavel: pushed to

1579822108
akavel
maybe I should modify luaconf.h to disable it

1579822108
andrewrk
akavel, zig can probably provide libc for you if you ask zig to link against libc

1579822142
andrewrk
foo.linkLibC();

1579822153
andrewrk
this makes the libc headers available

1579822155
daurnimator
akavel: it needs stdio.h because e.g. the `luaL_Stream` struct contains a FILE*

1579822170
akavel
andrewrk: cool, will try, thanks! I read your awesome article about "zig is c too" ;)

1579822194
akavel
daurnimator: ok, thanks

1579822271
akavel
"Unable to link against libc: Unable to find libc installation: file not found"

1579822294
akavel
there's some suggestion to "See `zig libc --help`"

1579822308
andrewrk
out of curiosity what os are you on?

1579822319
akavel
Windows 10, I installed Zig with chocolatey

1579822321
daurnimator


1579822334
daurnimator
akavel: do you have MSVC installed? or mingw?

1579822338
akavel
nope

1579822347
andrewrk
you can set the target to x86_64-windows-gnu and zig will provide libc

1579822358
mq32
andrewrk: i hope that this question will be much less relevant in the future of zig development :)

1579822375
akavel
andrewrk: what's the magic incantation for this? :)

1579822386
daurnimator
akavel: -target x86_64-windows-gnu

1579822399
akavel
can I put it in build.zig?

1579822440
andrewrk
foo.setTheTarget(.{ .Cross = .{ .os = .windows, .arch = .x86_64, .abi = .gnu } });

1579822490
andrewrk
side note, it would be nice to support using the gnu abi and having the target still considered to be native

1579822524
andrewrk
I plan to look into avoiding msvc integration entirely

1579822534
andrewrk
which is a big step towards what mq32 mentioned

1579822546
daurnimator
eh; I don't think we can or should avoid it entirely

1579822548
akavel
andrewrk: zig fmt complains about the `.` before `{`

1579822551
akavel
(v0.5)

1579822554
daurnimator
windows essentially has 3 totally different ABIs

1579822571
daurnimator
akavel: indeed. that's a new feature

1579822616
andrewrk
I believe 0.5.0 api is foo.setTarget(builder.Target{  .os = .windows, .arch = .x86_64, .abi = .gnu } )

1579822622
andrewrk
something like that

1579822646
andrewrk
you might have to read std/build.zig

1579822669
andrewrk
did you go back to 0.5.0 because of the translate-c regression?

1579822741
akavel
it was just what Chocolatey had as newest

1579822755
andrewrk
are you aware of the download page?

1579822763
akavel
also, last stable sounds... more stable?

1579822777
andrewrk


1579822786
daurnimator
akavel: problem is: its been a while since we were stable; and much has changed in the mean-time

1579822800
andrewrk
zig has never been stable, that's why the version is sub-1.0.0

1579822853
akavel
uhuh, riiiight, kinda makes sense... 0.5.0 is sub-1.0, so not stable, and master is also not stable...

1579822869
akavel
so everything is very unstable :)

1579822872
andrewrk
we're all surfing on waves of blood

1579822892
akavel
still good that on surface :D

1579822980
daurnimator
andrewrk: 0.5.0 is stable in that it's never changing ;)

1579822987
akavel
so, do you suggest I use the master zip? what about the translate-c regression, won't it hit me?

1579822992
andrewrk
yes it has been a while since 0.5.0

1579823010
akavel
darunimator: that's a good point

1579823014
daurnimator
akavel: yes I do recommend master. However yes this translate-c issue will bite you on lua in particular

1579823043
akavel
heh, so no go for me :)

1579823094
andrewrk
daurnimator, is the issue with a macro?

1579823149
daurnimator
andrewrk: with both macros and functions...

1579823153
daurnimator
andrewrk: something really weird going on

1579823170
andrewrk
do you have a nice small test case?

1579823197
daurnimator
`LUA_API void       (lua_close) (lua_State *L);`

1579823212
daurnimator
that gets translated to `@compileError("unable to resolve function type ZigClangTypeClass.Paren");`

1579823302
daurnimator
remove the parenthesis around lua_close and it works

1579823459
andrewrk
that sounds like an easy fix, and not macro related

1579823559
andrewrk
if you search for the error message it puts you exactly where the patch is needed

1579823770
akavel
daurnimator: managed to set target flags on 0.5.0, now getting an error: "container '.cimport:5:11' has no member called 'luaL_checkversion'"

1579823780
akavel
is it because it's a macro?

1579823936
daurnimator
akavel: are you calling luaL_checkversion?

1579823947
akavel
yep; commented it out for now

1579823956
akavel
and now getting: "lld: error: undefined symbol: memcpy"

1579823999
akavel
as well as others, including lua_createtable and others

