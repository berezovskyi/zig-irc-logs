1585094695
Snektron
it seems `-nostdlib` is required when linking using `-target i386-freestanding-none`

1585094880
diltsman
Question on std.json.stringify.  What types of streams can be passed to it?  Anything that returns an error causes a compile error.

1585095031
fengb
Oh shoot I don’t think this was tested. Might be a recent regression

1585095251
diltsman
Do you have any suggestions on how to work around it?

1585095400
fengb


1585095533
diltsman
Wow!  Fast service.

1585096541
swills
thought i'd try zig devel version, but: ld: error: undefined symbol: lld::coff::link(llvm::ArrayRef<char const*>, bool, llvm::raw_ostream&, llvm::raw_ostream&)

1585096912
swills
n/m, using wrong lld

1585099080
swills


1585100809
freemint
I have 2 questions:

1585100868
freemint
Can zig cc build Linux? If so can it do so on all architectures supports?If

1585100900
mikdusan
freemint: the answer will eventually come down to: can clang build Linux?

1585100948
freemint
Ah ok, so what steps are necessary to build a zig from

1585100959
freemint
scratch

1585101006
mikdusan


1585101064
freemint
Why would clang being able to build Linux matter? Zig cc came to my attention bc it was mentioned as a drop in replacement for GCC.

1585101082
freemint
GCC can built Linux

1585101259
mikdusan
clang has high compatibility with gcc; and until relatively recently, clang couldn't compile linux kernel. I haven't tracked it really closely, but apparently there has been success as of llvm/clang 9.x

1585101340
freemint
So Zig uses LLVM internally?

1585101363
mikdusan
yes, zig embeds llvm+clang+lld

1585101443
freemint
So if you are trying to bootstrap Linux/cross compile Linux on a new architecture  using zig cc has no real benefits?

1585101527
fengb
zig cc doesn't do anything you couldn't already do. It just makes cross compiling a lot easier to get started

1585101528
freemint
Other than fancy caching and (maybe?) less pre-compilation for years.

1585101542
freemint
*headers

1585101547
freemint
Thanks

1585101619
freemint
if i wanted to add a new CPU arch to zig i would first need to add it to LLVM, what would be the next steps?

1585101819
mikdusan
`zig targets` has a .json dump of known targets so if LLVM gets a new target, zig would need to learn it and some .cpp and .zig code needs to be updated, so that Zig can drive llvm codegen and tell it the correct new target to use. that's a minimum, and I'm not the subject matter expert on that, so take with grain of salt

1585101883
freemint
Thanks that clarifies stuff.

1585101901
freemint
Goof Night

1585101916
mikdusan
cheers

1585107906
adamkowalski
have any of you been able to get llvm@10 from brew?

1585109337
fengb
It hasn't been merged in yet:

1585112469
watzon
My poor computer is slowly chugging along

1585114346
scientes
oh wait, you are talking about which libraries it uses...

1585115015
watzon
When installing zig from a tarball is there an environment variable I have to set or something?

1585115047
watzon
When running `zig targets` it's telling me it can't find the zig lib directory

1585115060
watzon
Or maybe I just need to drop that in /usr/local/?

1585115115
mikdusan
it locates lib/ from the executable position

1585115135
mikdusan
you can symlink, but hardlinks will not work

1585115354
watzon
Got it, thanks :)

1585115370
watzon
Is there a way to get a more condensed target list? Lol

1585116622
wilsonk
Surprising, clang-10 compiles itself about 9 percent faster than clang-9.0.1 (take that with a grain of salt as the server had one VM running during those compilations...but I was only using 55 out of 64 cores, and no disk activity by the VM, so probably pretty accurate).

1585116667
traviss
watzon,

1585120789
FSX
I downloaded the master binary, tried to run it and got 'Unable to find zig lib directory: FileNotFound.'

1585120863
FSX
I can't find anything docs about this.

1585121617
afontain_
hi. I know some C and C++, and I am trying to get used to Zig. I was wondering if there is an equivalent to C++'s vector.push_back() in Zig or if you have to try to find an upperbound and splice it afterwards

1585121657
wilsonk
FSX: which OS?

1585121680
FSX
Arch Linux, x86_64,

1585121724
afontain_
I was quite hopeful about slices, given that "the slice's length is known at runtime" according to the language reference, but I've only seen splices of arrays there (so compile-time size)

1585121756
FSX
I'm guessing this is the same issue:

1585121768
afontain_
I've also looked at the standard librairy reference, but I didn't find something that looked very useful

1585121887
wilsonk
FSX: darnit I don't run Arch. Weird that the issue seems closed but there isn't a real solution cited. The binary on the website would certainly have been rebuilt since 20 days ago

1585121957
traviss
afontain_, look for ArrayList append()

1585121981
wilsonk
afontain_: I think Array_List with .append is what you are looking for...maybe?  (lib/std/array_list.zig)

1585121990
wilsonk
lol, beat me to it

1585122075
afontain_
it 404 when I click on the init function link here

1585122139
wilsonk
afontain_: did you download the source or just install from a tarball or package?

1585122197
afontain_
I used the binairy tarball, because I'm not on Alpine right now

1585122216
traviss
the std lib docs are a work in progress. they're incomplete atm because zig uses lazy analysis. for now best bet is to browse the source.

1585122242
wilsonk
yeah, check out the source for array_list on github

1585122249
afontain_
*binary

1585122274
wilsonk
there are usually examples (tests really) near the bottom of each file of the std lib also

1585122287
traviss


1585122313
scientes
my god, I had no idea there was so much to know about mtime and ctime

1585122329
afontain_
I've downloaded the source tarball to allow grepping the files

1585122384
traviss
if you have a local copy: grep "pub fn" zig-master/lib/std/array_list.zig  | sort

1585122493
traviss
actually may be better not to use sort so you can see the type defining functions aren't indented

1585122558
wilsonk
FSX: any chance to build from source?

1585122592
wilsonk
of course llvm-10 will take quite a while :(

1585122628
FSX
Yes, I can do that. I'm working now, I'll start a build when I got time. I'll report back later. :)

1585122639
wilsonk
Sounds good

1585122863
daurnimator
scientes: and atime? :)

1585122892
wilsonk
One note for anyone else here: if you have previously built llvm/clang/lld as dynamic libraries and then attempt to build zig without building llvm-10/clang/lld dynamically also, then you will get linking errors. It seems like there is a preference for picking up the old dynamic libs instead of using the llvm-10 static libs

1585122918
daurnimator
wilsonk: oo, interesting; I was about to try and build against 10 now

1585123072
wilsonk
daurnimator: that was on my linux server...just waiting for my MacOS vm to finish up building llvm-10 and then I will see if it builds cleanly  (no previous dynamic libs). Then I will do the WIn10 vm builds and my personal linux machine and report back if there are any issues

1585123891
afontain_
ArrayList.init asks for an allocator. In the language ref, the only mention of an allocator is std.heap.page_allocator. I guess it will allocate on the heap and avoid creating issue during normal use, like regular malloc, right?

1585123906
afontain_
(regular C malloc)

1585123917
afontain_
(and assuming there is free memory left)

1585123998
mq32
afontain_: there are some allocators in Zig atm

1585124013
traviss


1585124026
mq32
page allocator is slow, as it calls mmap() for every alloc() and munmap() for ever free()

1585124090
afontain_
ok, it totally wasn't the only mention in the doc, silly me

1585124143
traviss
if you want to use std.heap.c_allocator you'll need to pass -lc when you build

1585124225
traviss
c_allocator is a thin wrapper around malloc/free

1585124335
afontain_
I'm wondering if -target linux-something-musl counts as "linking with libc"

1585124696
daurnimator
afontain_: no.

1585124706
daurnimator
afontain_: that's the

1585124746
daurnimator
afontain_: the -musl there is the ABI: musl dictates certain things: e.g. size of c_int, default calling convention, etc.

1585124755
daurnimator
afontain_: you need -lc to link libc

1585124782
afontain_
don't you have to choose one of musl or glibc?

1585124793
daurnimator
afontain_: yep: you have to choose which ABI you want

1585124802
daurnimator
which implies which libc zig should use...

1585124806
afontain_
isn't the ABI a kernel matter?

1585124812
afontain_
(on Linux, at least)

1585124813
daurnimator
nope

1585124828
daurnimator
the kernel only dictates which syscalls are available and the kernel structs

1585124846
afontain_
so it's just that glibc is compatible with musl binaries?

1585124857
daurnimator
no. and it's not :)

1585124901
afontain_
so -target …-musl binairies are statically linked with the libc, but are not linked to the libc?

1585124921
daurnimator
no. you only link against libc if you pass -lc

1585124965
afontain_
hmm, okay

1585126979
wilsonk
yep, ran into the same errors building zig on my personal linux machine, where I had a mix of dynamic and static llvm libs.  Only lld had dynamic libs but they still got picked up before/instead of the static libs when building zig. (I assume there is a way to tell cmake not to allow this but I just uninstalled llvm-9 and went from there)

1585127295
traviss
i'm trying to figure this out myself as building zig now fails with: Could NOT find LLD (missing: LLD_LIBRARIES LLD_INCLUDE_DIRS)

1585127382
traviss
i tried cmake .. -DLLD_INCLUDE_DIRS=/usr/lib/llvm-10/include -DLLD_LIBRARIES=/usr/lib/llvm-10/bin/ld.lld

1585127442
traviss
but then make -j8 results in: zig/src/zig_llvm.cpp:55:10: fatal error: lld/Common/Driver.h: No such file or directory

1585127442
traviss
#include <lld/Common/Driver.h>

1585127703
wilsonk
traviss: did you build llvm from source? I always install to /usr/local and haven't had any need for LLD_INCLUDE_DIRS

1585127882
FireFox317
traviss, you can't just use `cmake .. -DCMAKE_PREFIX_PATH=/usr` ?

1585128016
traviss
i installed llvm-10 with apt on debian

1585128025
traviss
FireFox317, i'll try

1585128132
traviss
no that gives the same error

1585128171
FireFox317
so you did install liblld-10-dev?

1585128257
afontain_
traviss, wilsonk: ArrayList works for me, thanks

1585128269
wilsonk
afontain_: cool

1585128275
traviss
thank you FireFox317 it works now after installing liblld-10-dev :)

1585128291
FireFox317
traviss, nice :)

1585128305
afontain_
I've settled for the arena allocator

1585128466
traviss
oops i missed a linking error: /usr/bin/ld: /usr/lib/llvm-10/lib/libclangCodeGen.a(BackendUtil.cpp.o): in function `(anonymous namespace)::EmitAssemblyHelper::EmitAssemblyWithNewPassManager

1585128479
traviss
undefined reference to `getPollyPluginInfo()'

1585128543
traviss
right after [ 99%] Linking CXX executable zig0

1585128577
FireFox317
traviss, yeah i think that is a known issue with apt packages currently. The CI servers are using a small patch, you can find the patch in this file:

1585129095
traviss
that worked too. thanks again FireFox317

1585129130
traviss
zig version: 0.5.0+778dbc17a :)

1585130136
kenaryn
Hello computer guys. Please what does it mean in a few words a "drop-in" compiler? (related to `zig cc` as a drop-in C compiler).

1585130200
scientes
kenaryn, in place of

1585130202
traviss
make CC="zig cc"

1585130212
mq32
i think it was "drop-in replacement"

1585130224
mq32
if you have used gcc/clang until now, you can just replace it with "zig cc"

1585130229
mq32
without further work needed

1585130245
scientes
"en lugar de"

1585130310
kenaryn
is there a discrepancy with 'out-of-the-box' concept?

1585130336
daurnimator
kenaryn: "out of the box" means you don't have to bring along your own.... anything. it just works as-is

1585130351
daurnimator
kenaryn: "drop-in replacement" means you can swap out an existing utilities

1585130366
kenaryn
Allright! Thank you scientes, traviss, mq32 and daurnimator

1585130608
kenaryn
Do you know why llvm's team did suggest c++14 instead of c++17 for llvm10 6 months ago? (I saw the commit message in the graph commit log's zig). Do the core contributors think are a too few people using c++17's coding convention to maintain the code base?

1585131091
kenaryn
ce56ae8af: Wed Oct 2 13:05:10 2019 -0400 - we have to use c++14 now for llvm10

1585131179
FireFox317
kenaryn, because apparently now the llvm 10 source code is using c++ features that require the use of c++14?

1585131543
kenaryn
Obviously, but I still don't know why c++20 isn't adopted in the project, or at least c++17 for better maintenability, not only features's requirements.

1585131622
kenaryn
It was Andrew who committed the message in git log, saw may be he'll explain briefly during the day.

1585131659
mq32
i would not use c++20 for any project yet

1585131673
mq32
it's not established in any way and even c++17 is hard-to-use

1585132048
kenaryn
Why it is harder than c++14? I do not understand.

1585132060
mq32
it has nothing to do with language spec

1585132066
mq32
but compiler and platform support

1585132076
mq32
afaik no compiler has a c++20 compliant lib right now

1585132083
redfast00
I just read the post on hackernews about `zig cc` and wanted to try it out for myself. Unfortunately, when running `zig cc -o hello hello.c -target riscv64-linux-musl`, I get `/usr/bin/ld: unrecognised emulation mode: elf64lriscv`. This is kinda expected, since Arch's ld is only for x86-64. I installed risv64-binutils, but zig does not seem to use

1585132083
redfast00
that linker. Is there a way to force it to use the correct ld?

1585132084
mq32
c++17 is not available on a lot of systems

1585132296
scientes
redfast00, ahh that is a problem. we use to build lld internally to avoid those type of problems

1585132319
scientes
if you download the tarball you avoid that

1585132336
scientes
except...../usr/bin/ld.....zig uses liblld directly so i'm confused

1585132370
scientes
so I guess I don't know the answer to your question

1585132424
redfast00
scientes: should I install zig-static then?

1585132440
scientes
you should try it

1585132453
FireFox317
redfast00, zig should not run the system lld. How did you build/install zig?

1585132479
redfast00
FireFox317: pacman -S zig

1585132496
scientes
FireFox317, it does use the system liblld and lld-dev now

1585132518
scientes
since 0.6.0

1585132520
kenaryn
Thanks mq32, I switch back to zig's subject :)

1585132550
FireFox317
redfast00, i'm pretty sure that pacman has zig 0.5.0, for this feature to work you need master at least. You can download binaries from ziglang.org

1585132604
traviss
would passing this flag help? --dynamic-linker [path]      set the path to ld.so

1585132610
redfast00
I now installed zig-static, this seems to give a different error "/usr/include/stdio.h:33:10: fatal error: 'stddef.h' file not found"

1585132629
redfast00
so I guess it's linking now, but cannot find needed libraries

1585132635
FireFox317
redfast00, zig-static is not master build either. can you run `zig --version`?

1585132759
redfast00
`zig version` gives 0.5.0, so I guess that's not master either

1585132844
FireFox317
redfast00, fortunately it is really easy to use master zig. Just download the x86_64 linux binary from

1585133100
FireFox317
scientes, there is no 0.6.0 yet :)

1585133466
redfast00
FireFox317: that works, thanks!

1585137425
wilsonk
Ok, an issue that may come up for OSX users. If someone is building on MacOS Catalina (might be the same for Mojave with an updated Xcode) and they had CC and/or CXX set to /usr/local/bin/clang because they built from source...then they may end up with errors related to a missing cmath or other c++ header.   I fixed this by updating Xcode and then 'unset CC; unset CXX' and delete the build directory, rerun 'cmake ..' and then things should

1585138098
Snektron
<kenaryn "Obviously, but I still don't kno"> Clang 10 implements many features of c++20, it would be weird make a compiler which can only be built using its own latest version

1585138153
Snektron
I would guess they use c++14 because many people are still using an older system, or a distro which is quite slow in distributing updates

1585138224
Snektron
Personally, i just use the latest c++ version and tell people to download a more recent compiler, but my projects are quite limited in scope compared to clang

1585139598
wilsonk
Zig built perfectly fine for me on Win10 using the instructions on the wiki. Just so people know. I have working versions of zig with llvm-10 on Ubuntu 16.04, Ubuntu 18.04, MacOS Catalina and WIn10 so far. There were a couple issues that I noted above, but that was not really zig's fault as I had dynamic libs lying around and had updated from Mojave to Catalina today (and updated Xcode).

1585140502
jaredmm
wilsonk: Any chance you managed to get a debug build working on Win10?

1585140604
wilsonk
jaredmm: haven't gotten around to doing those as it takes an hour or more to build llvm per target here. I should be able to get to it on linux tomorrow (I will probably only build debug on my server as I have 128GB and 64 cores to speed the process along).  I can let you know if I get it running

1585140631
wilsonk
sorry the hour per target is on the non-server machine or VM's

1585140729
wilsonk
I can spin up a Debian buster vm tomorrow and test that also (though I wouldn't anticipate any problems)...can also try some other OS's if someone wants. Perhaps FreeBSD/NetBSD.

1585143044
fengb


1585143057
fengb
We need a BDFL successor 😇

1585143462
swills
i'm building zig snapshot on FreeBSD

1585143466
swills
i posted the one change i had to make

1585144307
andrewrk
5 ppl other than me have admin access to the github org

1585144366
swills
i send a pull request

1585144367
mq32
andrews blog article still on slot 17 on HN

1585144447
fengb
But nobody would be in charge or have the vision

1585144464
gchristensen
you can't designate somebody to have vision

1585144760
swills


1585144774
swills
output of ./install/bin/zig build test -Dskip-release -Dskip-non-native

1585144894
swills
missing a lib link i guess

1585147169
swills
can't quite work out how to tell it what libs to link with

1585147552
swills
looks like manually adding --object /usr/lib/libgcc_eh.a lets the test build, but it core dumps on startup

1585147563
swills
backtrace available

1585148152
swills


1585148547
andrewrk
swills, I believe this is

1585148601
swills
hmm, i'm running ./install/bin/zig build test -Dskip-release -Dskip-non-native

1585148610
swills
is that building c++ code?

1585148646
swills
"It also serves the use case of using zig as a build system and package manager for C/C++ projects." -- that IS the use case that i'm very much interested in... :)

1585148734
andrewrk
yeah c++ support libraries are not available yet, but planned

1585148735
swills
the resulting command that fails is:

1585148758
andrewrk
oh I see

1585148785
swills
sorry i explained that in a confusing way

1585148808
andrewrk
this is the relevant code:

1585148835
andrewrk
this works with llvm,clang,lld built from source. apparently not using the system packages

1585148879
andrewrk
if you just want to get unblocked, you could download the same freebsd tarball the CI server uses and link against that. or you can try to submit a patch upstream to fix the build using the freebsd packages

1585148882
swills
i built my llvm10 from source, created a package for it, and installed the package

1585148888
andrewrk
hmm ok

1585148892
swills
i'm running FreeBSD CURRENT

1585148901
swills
r359255

1585148939
andrewrk
when zig0 gets linked, this unwind dependency is satisfied. the build.zig code is trying to satisfy the dependency in the same way

1585148984
andrewrk
cmake is driving the linking of zig0, and it's working for you. build.zig / zig compiler is driving the linking of the pastebin you sent. our goal is to figure out what is the difference between former and latter, and fix the latter

1585149015
swills
+        try addCxxKnownPath(b, ctx, exe, "libgcc_eh.a", null);

1585149019
swills
adding that fixed the link

1585149038
andrewrk
I would accept a pull request to add that to build.zig inside the isFreeBSD() block

1585149082
swills
ok

1585149084
andrewrk
btw can you explain the LLD_LIBDIRS fix? is this so that you can add an additional cmake option?

1585149086
swills
the resulting test binary still fails

1585149091
swills
yeah

1585149105
adamkowalski
anybody able to get a success build of master on mac os?

1585149109
swills
-DLLD_LIBDIRS=/usr/local/llvm10/lib/

1585149129
swills
that's from the llvm10 package

1585149135
andrewrk
can you instead hard code this path so that other freebsd users do not need to add this flag?

1585149153
swills
sure

1585149160
swills
but it may not necessarily be the same for all FreeBSD users, so the option to specify it will still be needed

1585149181
andrewrk
oh, I see, because you have chosen this path arbitrarily

1585149195
swills
well, /usr/local is default

1585149197
swills
so most will have it

1585149204
andrewrk
there is a better way to do this, no patch needed. -DCMAKE_PREFIX_PATH=/usr/local/llvm10/lib/

1585149208
swills
but it's possible to arbitrarily change it to anything if one wants

1585149215
swills
say /opt/local/llvm10/lib or whatever

1585149239
andrewrk
sorry: -DCMAKE_PREFIX_PATH=/usr/local/llvm10

1585149245
andrewrk
it's a prefix path, not lib path

1585149292
andrewrk
but I would still accept a PR to add additional hard-coded path /usr/local/llvm10/lib/ to Findlld.cmake

1585149314
swills
ok, i guess i figured it made sense to match the other vars

1585149324
swills
-DCMAKE_PREFIX_PATH=/usr/local/llvm10/lib/ did work

1585149389
swills
-DCMAKE_PREFIX_PATH=/usr/local/llvm10 did as well

1585149409
andrewrk
ok now in what way is the test failing?

1585149453
swills
core dump, pasted the backtrace above

1585149533
andrewrk
can you link it again, I do not see it

1585149605
swills
[10:55:52 am] <swills>

1585149720
andrewrk
hmmm

1585149763
andrewrk
can you confirm that you used the same compiler to build llvm/clang/lld and zig?

1585149771
andrewrk
the c++ ABI requires this

1585149793
andrewrk
also that the libc++ matches

1585149840
swills
i don't think i can

1585149855
swills
i used llvm10 to build zig

1585149869
andrewrk
in this case you must also use llvm10 to build llvm,clang,lld

1585149879
andrewrk
sorry, I don't make the c++ rules

1585149905
swills
well, let me ask the person who maintains llvm10 if the resulting thing was built with itself...

1585149905
andrewrk
I'm pretty annoyed that llvm depends on c++, tbh

1585149922
swills
i know libc++ was built with llvm 9

1585149935
andrewrk
that could be the problem

1585149936
swills
i can't really change that

1585149948
swills
without rebuilding literally everything on my system :(

1585149953
andrewrk
I mean you can, it just requires rebuilding 3 things

1585149980
swills
llvm 9 is the base compiler right now

1585150010
andrewrk
my suggestion is to build llvm, clang, and lld 10 from source, and put it in your home directory, like this:

1585150021
andrewrk
this is known to work; it's what the freebsd ci does

1585150052
andrewrk
it doesn't really matter which compiler you use, as long as it's the same one for those dependencies and zig

1585150069
andrewrk
I do apologize for this. this is the pain that llvm depending on C++ brings us

1585150097
swills
well, i think this is a bug in our llvm10 port

1585150098
swills


1585150135
swills
we have llvm, clang and lld in there

1585150140
swills
i'm using all those bits

1585150169
swills
env CC=/usr/local/bin/clang10 CXX=/usr/local/bin/clang++10 LD=/usr/local/bin/lld10 cmake -DLLVM_CONFIG_EXE=/usr/local/bin/llvm-config10 -DCLANG_INCLUDE_DIRS=/usr/local/llvm10/include/clang -DLLD_INCLUDE_DIRS=/usr/local/llvm10/include/lld -DCLANG_LIBDIRS=/usr/local/llvm10/lib/ -DCMAKE_PREFIX_PATH=/usr/local/llvm10 -DCMAKE_INSTALL_PREFIX="/usr/home/swills/Documents/git/zig/install" -GNinja ..

1585150211
dottedmag
andrewrk: I saw you use NixOS. Does it make it easier to work with the zoo of compilers?

1585150283
andrewrk
dottedmag, yes, nixos generally makes everything easier to work with any zoo of dependencies

1585150315
andrewrk
mostly because you can have your base system be minimal with almost nothing available, not even `make`

1585150339
andrewrk
and then when you want to build something you can explicitly choose exactly what set of things and what versions are available, per terminal window

1585150575
waleee-cl
dottedmag:  there's guix, but then you have parenthesis overflow & only libre-stuff as the default

1585150586
companion_cube
plz make it typed

1585150641
dottedmag
waleee-cl: last time I tried half of the stuff was 5 years of date

1585150658
dottedmag
companion_cube: I can't, if it's just a different syntax.

1585150680
dottedmag
But that's definitely an offtopic here.

1585150698
waleee-cl
last offtopic then; there is

1585150768
adamkowalski
andrewrk: I'm having issues building on macos, I updated to clang10 but I am unable to build

1585150794
andrewrk
homebrew has llvm 10 already?

1585150832
adamkowalski
Well brew install llvm --HEAD

1585150835
adamkowalski


1585150843
adamkowalski
thats how I invoked cmake

1585150887
adamkowalski


1585150892
adamkowalski
thats the build log

1585150923
adamkowalski
andrewrk: are you suggesting to build from source instead?

1585151043
andrewrk
I don't think llvm --HEAD is 10

1585151087
andrewrk
on macos your options are (1) wait a few days until homebrew gets it or (2)

1585151095
adamkowalski
clang version 10.0.0 (

1585151112
adamkowalski
/usr/local/Cellar/llvm/HEAD-2c4ca68/bin/clang

1585151116
adamkowalski
I can build from source though

1585151118
andrewrk
I don't think that's 10

1585151149
andrewrk
that's HEAD which is 10 + 6,735 commits

1585151221
fengb
Wow already 6000 commits since last release?

1585151222
adamkowalski
damn sounds like I get to spend a few hours building from source haha

1585151246
andrewrk
adamkowalski, oh another option. download the tarball that the CI uses, and follow those instructions

1585151280
andrewrk
you'll have to use a bit of critical thinking, but the resources you need are

1585151282
adamkowalski
could I download the latest zig binary?

1585151286
adamkowalski
and use zig cc

1585151293
andrewrk
yes

1585151305
adamkowalski
thats clearly the only acceptable solution

1585151330
TheLemonMan
andrewrk, yo, what's up with the failures on drone?

1585151342
adamkowalski
that should be the recommended way to build zig. how many languages can say that

1585151372
andrewrk
TheLemonMan, I spent a couple hours looking into it yesterday. I was able to reproduce it in an aarch64 alpine docker image, but not on an aarch64 debian system

1585151383
andrewrk
it's frustrating because gdb does not work inside the docker image, and it's slow as fuck

1585151434
andrewrk
I don't know what the problem is yet, but it's happening inside LLVM when we call TargetMachineEmitToFile

1585151496
adamkowalski
andrewrk: do you have any good resources you can recommend for parsing into an ast? specifically dealing with precedence of things like operators, function calls, conditionals, etc

1585151504
TheLemonMan
hmm, that's bad... can you pull out of the VM a statically-linked zig? qemu-user should be able to run it and you can attach gdb to it

1585151510
andrewrk
TheLemonMan, oh, scaleway lets me start an aarch64 alpine linux image. I'm going to try that

1585151522
andrewrk
that's a nice idea, I will try that

1585151545
andrewrk
adamkowalski, imo just write some code and try it. you'll learn quickly

1585151647
adamkowalski
yeah thats what I figured haha

1585151663
adamkowalski
I think my first pass approach is to just follow PEMDAS

1585151681
adamkowalski
and just try to parse things in that order, and if it can't then fall back to the next one down

1585151688
fengb
adamkowalski: just use sexprs. Easy peasy parsing

1585151718
adamkowalski
I would if it was for my own language, I love lisp

1585151737
adamkowalski
but I need to build this out for a client and it needs to follow a very specific syntax they decided on

1585151784
fengb
Oh poop >_>

1585151792
Snektron
In theorey, `zig cc` should accept `-T` right?

1585151794
adamkowalski
my simplest approach just used the shunting yard which worked

1585151817
adamkowalski
but now I need to think about function calls, conditionals, etc

1585151908
andrewrk
spoke too soon. not true: "oh, scaleway lets me start an aarch64 alpine linux image. I'm going to try that"

1585151945
andrewrk
Snektron, yes, all the linker related commands need to have detection added

1585151973
andrewrk
here's the code if you want to contribute:

1585151983
andrewrk
linker_script is already in scope, you just have to set it

1585152023
Snektron
ah, that explains why my kernel doesn't build properly with zig cc

1585152038
andrewrk
it should be printing warning: unsupported linker arg

1585152062
andrewrk
this is a really easy patch if you want to try it

1585152102
Snektron
it didn't print anything like that

1585152150
andrewrk
oh right, never mind, I got mixed up with arguments that directly forward to the linker

1585152178
Snektron
This should just be a clang argument

1585152182
andrewrk
let me just implement this real quick

1585152357
adamkowalski
andrewrk: It seems like zig cc is having issues

1585152375
andrewrk
detailed bug reports only plz

1585152383
adamkowalski


1585152388
andrewrk
thx

1585152396
andrewrk
Snektron, done in 6cbe589b51c9404a0f485733cbc4e3b46499d480

1585152412
adamkowalski
heres my build.sh

1585152443
andrewrk
adamkowalski, this is

1585152459
Snektron
thanks, andrewrk. I didn't set up an LLVM10 build yet so i'll have to wait

1585152478
Snektron
in the mean time, does anyone happen to know how i can disable extensions on clang?

1585152504
andrewrk
unfortunately you'll have to wait until I troubleshoot this aarch64 failure too

1585152506
Snektron
It also happens with zig cc: if i pass in -target i386-freestanding-none, all x86 extensions get enabled

1585152560
adamkowalski
andrewrk: so building from source seems to be the best way forward if I don't want to be blocked until brew has a update?

1585152613
swills
andrewrk: backing up, i am not sure now about this:

1585152613
swills
[11:22:43 am] <andrewrk> can you confirm that you used the same compiler to build llvm/clang/lld and zig?

1585152614
swills
[11:22:51 am] <andrewrk> the c++ ABI requires this

1585152614
swills
[11:23:13 am] <andrewrk> also that the libc++ matches

1585152626
swills
are you saying llvm10 has to be used to build llvm10?

1585152736
fengb
No but both need to be compiled with the same compiler

1585152747
swills
both of what?

1585152767
swills
both llvm10 and zig?

1585152774
swills
zig only builds with llvm10

1585152783
swills
so that is basically saying the same thing, llvm10 has to be build with llvm10

1585152785
fengb
Whatever built your LLVM10 has to be used to build Zig as well

1585152853
swills
zig only builds with llvm10, right?

1585152865
Snektron
ah, i had to pass in -march=i486

1585152873
fengb
No, Zig has to be linked with LLVM10, but it can be built with whatver spec compliant compiler you want

1585152877
andrewrk
swills, check the readme and tell me how to word it more precisely

1585152887
swills
oh!

1585152930
andrewrk
Snektron, ok hang on let me add -march support to zig cc real quick :)

1585152963
andrewrk
most c flags work without any support needing to be added, but some things like cpu features need detection, otherwise zig starts doing its own thing

1585152973
swills
so i have llvm 9 in base, but it lacks llvm-config

1585152984
swills
it's what build llvm10 and libc++

1585153011
swills
btw, i got my build config down to cmake -DLLVM_CONFIG_EXE=/usr/local/bin/llvm-config10 -DCMAKE_PREFIX_PATH=/usr/local/llvm10 -DCMAKE_INSTALL_PREFIX="/usr/home/swills/Documents/git/zig/install" -GNinja ..

1585153019
andrewrk
llvm-config 9 would be incorrect; llvm-config corresponds to the libraries you link against

1585153096
swills
ok, then what i have there should be using the base llvm 9 to build and llvm10 to link

1585153140
andrewrk
I think you're over complicating this whole thing

1585153149
swills
-- Check for working C compiler: /usr/bin/cc -- works

1585153154
swills
-- Check for working CXX compiler: /usr/bin/c++ -- works

1585153155
Snektron
andrewrk, if you're at it anyway i noticed in order to build for the target i386-freestanding-none i need to pass in -nostdlib

1585153161
Snektron
Otherwise i receive "Zig is unable to provide a libc for the chosen target"

1585153162
swills
maybe

1585153169
swills
i'm trying to do it the simplest way i can, i dunno

1585153172
andrewrk
Snektron, ah right, I can adjust the logic to not try to add -lc on freestanding

1585153198
Snektron
Great!

1585153214
swills
oh, i'm mistaken, base is 10 now

1585153219
swills
llvm10 that is

1585153246
swills
but it lacks llvm-config

1585154272
swills
oh, my llvm10 is out of date, that could be part of the problem...

1585154293
swills
rc2 from march 9, i've updated the base system since then

1585154307
swills
llvm10 from ports/packages out of date that is

1585154413
andrewrk
again my suggestion is simply to compile llvm 10 from source if you wish to contribute to zig

1585154442
andrewrk
you'd have it up and running by now if you just followed the directions instead of trying to go down a different path

1585154486
andrewrk
we don't need any Robert Frost poems in here, just take the road well traveled

1585154545
TheLemonMan
then we should just use C, no?

1585154548
fengb
Or use the nightly download like the rest of us plebs :P

1585154552
swills
andrewrk: i hear you :)

1585154574
swills
building and testing packages is kinda my main focus tho

1585154583
andrewrk
fair :)

1585154684
fengb


1585154730
TheLemonMan
please update the llvm10 port, my VM is too weak to rebuild LLVM :(

1585154844
swills
using the cache for package building is actually the main reason i'm looking at zig

1585155109
andrewrk
oh interesting

1585155120
andrewrk
I didn't realize that was your use case

1585155334
swills
hence my interesting c++ support :)

1585155347
swills
interest in

1585155348
swills
sheesh

1585155353
swills
i can't brain today

1585155389
qbradley
/set irc.server.freenode.command "/msg nickserv identify XczuvtIzgYdLegGsKGAHCKou"

1585155395
swills
hmmm

1585155403
swills
might want to change that password :)

1585155414
qbradley
haha

1585155665
andrewrk
TheLemonMan, btw we still have access to that aarch64 server which can be used to repro the drone ci failure

1585155687
andrewrk
I'm currently working on your idea of qemu + gdb

1585156317
TheLemonMan
I can have a look at that if you want

1585156582
andrewrk
that would be lovely

1585156906
andrewrk
TheLemonMan, hmm I don't see you as a user on this system, send me your pubkey/username if you need an account

1585158249
andrewrk
TheLemonMan, repro steps are: docker run -it --entrypoint=sh ziglang/static-base:llvm10-$(uname -m)-1

1585158277
andrewrk
and then follow the commands from ci/drone/linux_script up until make install, which will fail

1585158341
zahary
andrewrk: somebody just incorporated the new Zig C compiler into Nim:

1585158343
zahary


1585158395
zahary
I'm curious regarding the purpose of the C compiler in Zig. Would you be happy to provide some comments in the issue?

1585158433
TheLemonMan
hey zahary

1585158469
zahary
hey TheLemonMan, good to see you again :)

1585158602
TheLemonMan
small world, isn't it? glad to see a possible collaboration between Zig and Nim heh

1585158703
mikdusan
andrewrk: maybe this gives a hint to the drone CI problem:

1585158705
mikdusan


1585158844
andrewrk
mikdusan, hmm I'm not sure what to make of that. do you?

1585158879
TheLemonMan
jesus, building stuff on a 30 core ARM server is a hell of a experience

1585158893
andrewrk
yeah, lol

1585158893
TheLemonMan
that's the future I've been dreaming of

1585158909
andrewrk
just wait though, linking takes ages

1585158925
andrewrk
zahary, yes I'm happy to coordinate / collaborate with the nim community if you want to experiment with the use case of using `zig cc` as a backend for nim

1585159001
zahary
is "zig cc" an alternative front-end btw or just a statically linked version of clang into Zig?

1585159051
andrewrk
it's a tiny layer on top of zig to support parsing clang's command line options

1585159067
zahary
The integration so far seems quite straigh-forward, but the interesting possibility will be extending Nim with some support for compiling and linking Zig progragms

1585159070
andrewrk
yes there is a statically linked version of clang in zig

1585159085
andrewrk
ooh that would be interesting indeed

1585159102
andrewrk
right because the zig binary that you would be using for `zig cc` is fully capable of compiling zig as well

1585159122
andrewrk
(and in fact is doing exactly that, for example, to build compiler-rt from source)

1585159297
fengb
Oh Zig is inserting itself into zig cc now? :P

1585159310
andrewrk
hm?

1585159324
andrewrk
`zig cc` adds nothing except clang command line parsing

1585159351
andrewrk
everything else was already there, for example with `zig build-exe --c-source foo.c`

1585159385
zahary
well, you can leave a short comment in the issue. I think there will be interest in the Nim community for this interop

1585159392
fengb
I thought before it was invoking clang and nothing else

1585159466
mikdusan
andrewrk: ok red herring. that is a very new warning cmake 3.17 and up. but it does tell us the drone ci is using latest of latest

1585159646
andrewrk
zahary, done, let me know if there's anything else I can do

1585159712
zahary
thanks, I'll try to advocate for this :)

1585159906
adamkowalski
andrewrk: std.testing.LeakCountAllocator is awesome

1585159941
andrewrk
you can thank fengb for that

1585159985
adamkowalski
fengb: thanks! I can't belive I can write unit tests that verify I'm not leaking

1585160204
fengb
I’m glad it’s useful :)

1585160225
fengb
And hopefully one day it can be replaced by the debug allocator >_>

1585160238
shakesoda
i started using it, too

1585160241
adamkowalski
can you go into more details about that?

1585160244
shakesoda
very convenient

1585160255
adamkowalski
I would love to help with the debug allocator if I can

1585160276
adamkowalski
If we can actually watch which memory addresses are being freed, and if the same address is freed twice then error out

1585160317
adamkowalski
not sure if it's possible to catch use after free in the allocator itself, but I've been trying to force that error condition and find it otherwise in my tests

1585160337
fengb


1585160337
andrewrk
adamkowalski, go for it, the debug allocator is open source

1585160361
shakesoda
if free wipes the memory to something obvious you can at least identify use after free easily

1585160392
adamkowalski
yeah thats not a bad idea, because that means whatever you do next in your tests should clearly fail

1585160403
shakesoda
and in general you can do a lot by shoving some metadata before the pointer you return

1585160413
adamkowalski
hmm

1585160462
adamkowalski
can you track the number of times a certain region was read/written to and actually find the line numbers/file names

1585160465
shakesoda
AFAIK most allocators end up doing some tricks like this, slightly lie about the memory they actually got for the sake of some bookkeeping

1585160545
adamkowalski
I think it could really interesting to combine the work rust is doing with lifetimes with the allocator model of zig

1585160546
shakesoda
I don't know about that, but you could record the origin of an allocation and spit that out if leak check fails or you get a double free

1585160562
shakesoda
i think writing in dummy data is the best you can do for use after free

1585160568
adamkowalski
allocators calling alloc create a new lifetime which is then tracked by the compiler until you call free

1585160605
adamkowalski
you still enforce the strict single owner model and allow non mutable borrows to several others at once

1585160629
fengb
The debug allocator will actively unmap on free to force a segfault

1585160645
adamkowalski
fengb perfect!

1585160658
shakesoda
sounds good to me

1585160682
shakesoda
the regular ones should probably do that if safety stuff is enabled :)

1585160717
adamkowalski
shakesoda: i'm not sure. I still want good performance in debug mode

1585160727
fengb
That’s much harder because freeing 4bytes probably shouldn’t incur a syscall

1585160727
shakesoda
this shouldn't hurt performance that badly?

1585160735
adamkowalski
if I want to track that, it's not hard to wrap an existing allocator with the debug

1585160738
shakesoda
unless you're doing a

1585160748
shakesoda
I tend to agree though

1585160763
andrewrk
the primary technique of the debug allocator is (1) when mapping memory, provide an address hint that is always marching forward in address space (not reusing pages) and (2) unmap pages as soon as possible

1585160781
fengb
Linked list allocations would end up being close to useless

1585160801
shakesoda
if you're using an allocation for tiny bits of memory you're already losing the performance game

1585160815
shakesoda
not that you should be made to lose it more than needed

1585160816
fengb
Not true at all in Zig

1585160850
fengb
Just use an allocator that does small memory well

1585160852
shakesoda
anyway, I was thinking about the page allocator, really

1585160865
adamkowalski
shakesoda: I think zig programs tend to utilize arenas more frequently so idk if it's a huge issue

1585160882
fengb
I’d like to see object pools to be converted to Zig allocators

1585160919
adamkowalski
sounds pretty easy, just have an array of objects and mark them alive/dead

1585160932
adamkowalski
then if you ask for a new object and there are dead objects reuse them

1585160962
mq32
a friend of mine wrote a small allocator optimized for Lua:

1585160963
adamkowalski
otherwise allocate another array and start again

1585160981
shakesoda
most small allocations should definitely be pooled

1585160983
mq32
this could be ported to zig for a faster allocator using object pooling

1585161008
shakesoda
mq32: nice

1585161012
mq32
yep

1585161025
mq32
i have to nag him a bit as soon as he has finished his PhD D

1585161032
mq32
to use more zig and do less C++ :D

1585161032
shakesoda
wish i could use such things with luajit :(

1585161046
shakesoda
luajit blocks you from using your own allocators on 64 bit unless you hack it

1585161048
fengb
The allocator can already pool it for you. No need to add another mechanism

1585161098
mq32
fengb: the allocator itself is doing the pooling

1585161100
mq32
that's what i meant

1585161108
mq32
with several bucket sizes

1585161120
TheLemonMan
andrewrk, do you have a copy of LLVM10 with debug assertions enabled?

1585161139
fengb
Yeah that’s what I mean. We can have these special allocators that basically do what you’d do manually in C++

1585161152
fengb
Ah slab allocation

1585161158
TheLemonMan
I've built my copy with x86 and RISC-V targets only :(

1585161193
shakesoda
fengb: zig's allocators were a strong draw for me because of exactly reasons like this

1585161196
adamkowalski
fengb: C++ is starting to get allocators, look at John Lakos at bloomberg

1585161226
adamkowalski
but the problem is all the existing code is not allocator aware

1585161233
shakesoda
heh, i'd be extremely surprised if c++ weren't cursed until the end of time on this issue.

1585161246
shakesoda
they can fix the language all they want, and it'll still have this problem no matter what

1585161255
adamkowalski
you'd be surprised how much better c++20 is

1585161259
andrewrk
TheLemonMan, no, sorry

1585161269
companion_cube
doesn't C++ have `operator new`?!

1585161281
fengb
One of the main reasons I love Zig is no default allocator

1585161285
adamkowalski
concepts, constexpr, soon reflection

1585161296
mq32
companion_cube: it has :D

1585161300
mq32
it's funny :D

1585161303
shakesoda
I'm not especially on board with any of those things

1585161313
adamkowalski
you don't like concepts?

1585161319
adamkowalski
or reflection?

1585161329
adamkowalski
reflection is a core tenant of Zig it seems like

1585161333
shakesoda
every single thing in c++ that gets added has some way of imposing pain

1585161336
mq32
adamkowalski: I'm not hyped for that stuff. I have Zig!

1585161356
fengb
C++ is an ~octopus~ centipede made by nailing extra feet on a dog

1585161368
adamkowalski
I mean they are not perfect, but I would argue is var is zig is where templates were in C++ in 2011

1585161373
pmwhite
compile-time reflection

1585161377
adamkowalski
it's essentially passing by void pointer

1585161381
adamkowalski
you have no idea what you're getting

1585161398
shakesoda
I want a simpler language than anything C++ will ever let me have

1585161400
adamkowalski
we want some way of adding types/requirements for generic code

1585161409
TheLemonMan
andrewrk, and does the docker image have `llc` somewhere?

1585161417
mq32
adamkowalski: no, it's not. you can switch on the type, you can print the most pretty error messasges, even with coloring and ponies in it!

1585161417
shakesoda
incidentally, this is why most of my personal projects have been C

1585161419
adamkowalski
I don't like apis like f(x: var, y: var) @TypeOf(x)

1585161445
shakesoda
on the contrary, I like the simplicity of zig's mechanisms for this stuff

1585161448
companion_cube
adamkowalski: by "reflection" you mean comptime reflection?

1585161462
shakesoda
and if you start writing monsters that need weird things they

1585161465
shakesoda
because you shouldn't be doing it.

1585161476
pmwhite
do you like `f(T: type, x: T, y: T) T``?

1585161486
shakesoda
instead of in C++, where they don't look like monsters until the monster bites your head off.

1585161496
mikdusan
i like it better than template syntax

1585161500
andrewrk
TheLemonMan, yes it should have all those binaries that build with clang, llvm, lld

1585161519
FireFox317
andrewrk, do you have a small async io example? I want to try to get async io working on windows.

1585161530
andrewrk
TheLemonMan, /deps/local

1585161549
shakesoda
that said, constraints in the var syntax seem like they'd be useful (in abstract), not that I know what that'd look like

1585161551
TheLemonMan
andrewrk, no luck, there's only llvm-config

1585161573
andrewrk
TheLemonMan, oh, my mistake, I guess I was trying to keep the image size down

1585161578
adamkowalski
companion_cube: yeah copmtime reflection

1585161582
shakesoda
I've got a few var typed things which are pretty well defined, but var doesn't express that.

1585161589
adamkowalski
pmwhite: that works for simple types

1585161593
andrewrk
FireFox317, you could start with getting the behavior tests passing with --test-evented-io

1585161597
adamkowalski
it doens't scale when you have many things that are generic

1585161598
shakesoda
so you could try passing in an int or something and you get some cryptic message

1585161599
companion_cube
ok, that makes more sense than gaining runtime reflection

1585161622
shakesoda
building everything to be generic is itself a code smell and a path toward pain

1585161622
mq32
adamkowalski: same goes for C++ as well. Compile time gets horrible

1585161623
fengb
shakesoda: there’s a proposal for function based constraints by returning a boolean

1585161627
mq32
and that stuff is already optimized!

1585161627
adamkowalski
companion_cube: D takes it one step further and is something I'm missing in Zig

1585161633
adamkowalski
we want to be able to generate new types at compile time

1585161634
andrewrk
FireFox317, if you want a really simple one, start with "hello world" with `pub const io_mode = .evented;` and then start doing some basic file system stuff

1585161640
shakesoda
not that there aren't always the edge cases

1585161648
companion_cube
yeah D has some good ideas

1585161654
adamkowalski
or generate branches of a switch statement given an enum

1585161668
adamkowalski
no macros required, just a static foreach

1585161669
companion_cube
I think it's quite intersting to have foo!(…)(…) where the first set is comptime and the second one runtime

1585161694
shakesoda
that sounds far deeper into magic than I want anything to do with.

1585161696
adamkowalski
i prefer zig approach

1585161701
adamkowalski
I like having first class types

1585161708
shakesoda
there's no way in hell that'll be easy on the brain

1585161717
adamkowalski
you can pass types around, store them as variables, and put them in data structures

1585161722
adamkowalski
in D you end up having two sets of libraries

1585161727
fengb
Yeah I do want to generate switches

1585161732
adamkowalski
one that work on the type level, and one that work on the value level

1585161737
adamkowalski
so i'm against having that split

1585161753
companion_cube
heh, ok

1585161764
andrewrk
TheLemonMan, here's the script that generates the image:

1585161766
adamkowalski
like they have static_map(lambda, types)

1585161766
companion_cube
it does go into full dependent types, but well

1585161777
adamkowalski
and map(lambda, values)

1585161780
adamkowalski
implementation is the same

1585161783
andrewrk
I see now that it only copies llvm-config

1585161823
TheLemonMan
I wonder if I can just compile llvm locally

1585161827
companion_cube
adamkowalski: heh, but zig doesn't have `map` afaict

1585161851
shakesoda
TheLemonMan: all it takes is like 1tb of ram, a lot of time and an entire hard drive!

1585161860
shakesoda
or so i hear ;)

1585161866
adamkowalski
companion_cube: it's trivial to write though

1585161887
adamkowalski
we just haven't really focused on iterators too much yet I believe

1585161904
companion_cube
well seems like andrewrk doesn't like iterators :)

1585161909
companion_cube
(or syntax for them, rather)

1585161910
pmwhite
zig is missing first-class functions at the moment, so higher-order functions are rather inconvenient.

1585161945
andrewrk
the only thing stopping you from first class functions is inconvenient syntax

1585161964
fengb
Anon functions or closures? The former is coming™

1585161969
shakesoda
the former

1585161975
shakesoda
closures are a different bag of worms

1585161984
adamkowalski
shakesoda: I believe it's in the pipeline

1585161990
fengb
Besides, you always have `(struct { fn doit() void {} }).doit`

1585161991
shakesoda
yes, 1717

1585162000
adamkowalski
functions will be const f = fn(x: int, y: int) int { return x + y; }

1585162003
fengb
My internet is slow >_>

1585162003
shakesoda
fengb: I've got several of them

1585162012
adamkowalski
then everything will be anonymous and beautiful

1585162016
shakesoda
adamkowalski: yeah, that's what I want exactly

1585162044
adamkowalski
but right now I do const f = struct { fn call(x: int, y: int) int { return x + y; } }.call;

1585162076
pmwhite
transducers when?

1585162094
companion_cube
`map` without closures is kind of useless though

1585162107
adamkowalski
companion_cube: you can already do that

1585162110
FireFox317
andrewrk, okay will try that :)

1585162262
adamkowalski
companion_cube: look at this

1585162291
adamkowalski
and here

1585162487
shakesoda
something I'd like is essentially lua tables, but I don't really know if/how that makes sense in the context of zig

1585162498
companion_cube
adamkowalski: ok but that's hideous

1585162503
companion_cube
welcome to java 1.4

1585162505
adamkowalski
haha

1585162519
nephele
will zig cxx follow zig cc?

1585162585
scientes
there is a bug for that, but I hope not

1585162621
scientes
nephele, you can already do that with the language option to clang

1585162626
scientes
IIUC

1585162630
scientes
(untested)

1585163290
andrewrk
nephele,

1585163599
nephele
Oki, thanks

1585164440
swills
All 129 tests passed.

1585164440
swills
1323 passed; 17 skipped.

1585164441
swills
amazing

1585164444
TheLemonMan
andrewrk, the problem seems to be in the debug info we generate in the LLVM IR, the build succeeds if you pass --strip

1585164447
swills
something up with the llvm10 build i was using

1585164480
andrewrk
TheLemonMan, ah, that's a great clue

1585164519
andrewrk
TheLemonMan, so it must be something to do with the debug info that ended up being generated for __divtf3, right?

1585164549
TheLemonMan
let me see if I can get a minimal reproducer

1585164560
TheLemonMan
building llvm10 took something like 10mins

1585164566
TheLemonMan
what a wonderful beast

1585164640
mikdusan
avg 7 .o per second

1585164673
TheLemonMan
mikdusan, do you still have that netbsd vm?

1585164679
mikdusan
aye

1585164711
TheLemonMan
can you check if selfExePath returns an absolute path there?

1585164733
TheLemonMan
your ticket about OpenBSD made me realize that it may not be the case there

1585164774
mikdusan
os_self_exe_path has a #ifdef section for netbsd but ok

1585164787
TheLemonMan
oh I mean in the stdlib

1585164804
mikdusan
resolveZigLibDir or somesuch?

1585164814
mikdusan
oh nm i see. one sec.

1585164818
TheLemonMan
std.fs.selfExePath

1585165112
mikdusan
yup std.fs.selfExePath() is returning a nice long zig-cache path on netbsd @ f313ab18aecea1ade0b6a90d671352a641ad351a

1585165151
TheLemonMan
did you compile llvm10 yourself?

1585165203
mikdusan
yes

1585165277
mikdusan
i have llvm10 suitable for zig for freebsd121,netbsd90,openbsd66,dragonfly580

1585165295
TheLemonMan
can you upload it somewhere? I'd love to give netbsd+llvm10 a spin in this VM

1585165946
mikdusan
yup

1585166583
swills
i made a shell wrapper called zcc which just calls zig cc "$@", but i find that if i have HOME set, it calls itself and forkbombs. i guess this is a silly thing to do, what am i misunderstanding?

1585166814
fengb
That's gotta be the weirdest forkbomb I've heard of

1585167023
nephele
without seeing the script that will be difficult to answer

1585167060
swills
#!/bin/sh

1585167061
swills
exec /usr/home/swills/Documents/git/zig/install/bin/zig cc "$@"

1585167110
mikdusan
TheLemonMan:

1585167147
nephele
swills, oh, you might want to prepend a shift maybe? $0 is the executable path of the called thing

1585167218
swills
no

1585167237
swills
tried, same

1585167284
nephele
oh, seems $@ doesn't include $0, dunno then :)

1585167372
swills
and doing make CC="/usr/home/swills/Documents/git/zig/install/bin/zig cc" results in: Unable to link against libc: Unable to find libc installation: unable to spawn system C compiler

1585167393
ifreund
why are you using exec?

1585167428
swills
just something to try, i didn't have it there when the problem started

1585167477
swills
removing it doesn't change anything

1585167531
swills
seems having CC="zig cc" should work, but something else is off

1585167543
nephele
sh seems so overkill to just redirect a command .-.

1585167550
fengb
exec prevents an extra fork but shouldn't do anything else

1585167616
fengb
My guess is that CC="zig cc" looks for the binary named "zig cc"

1585167629
fengb
Related:

1585167817
swills
yes

1585167825
andrewrk
swills, oh, zig doesn't ship with freebsd libc yet:

1585167864
swills
i would say you probably don't want to ship a libc

1585167874
swills
use the system one, it changes, a lot

1585167877
andrewrk
well we want to do the same thing as glibc

1585167890
andrewrk
ship the start files & headers only and then dynamic link

1585167920
nephele
FreeBSD has a compatibility layer for libc changes between releases

1585167921
swills
even the start files and headers change a lot more than glibc

1585167927
andrewrk
ok yeah this is a problem. zig should probably now detect when it is being used as the system c compiler. because for systems that don't have the ability to cross compile for, we interact with the system c compiler

1585167932
nephele
i think it checks the ELF file to see what release it is for

1585168025
andrewrk
I'm glad to discover this issue, a fork bomb is a pretty nasty user experience

1585168145
andrewrk
I estimate #2876 to be about 1 day of work for someone who knows what they're doing

1585168233
andrewrk
swills, there's a limit to how much freebsd would change the start files because it would potentially break existing binaries

1585168251
andrewrk
the static bits of dynamically linked libraries are by nature stable

1585168259
swills
right, we support running binaries way way back... like 4.x i think

1585168266
swills
(well, 1.x if you try hard...)

1585168293
andrewrk
yeah, so zig will stay on top of it with each freebsd release, but also there should be no problem producing binaries with older start files

1585168304
swills
true

1585168327
swills
but you can also rely on the source files existing in /usr/src/

1585168342
andrewrk
not when cross compiling

1585168352
swills
oh, from another OS? ok, sure

1585168406
nephele
swills, why can you rely on that? isn't that an install option?

1585168458
swills
nephele: well, from a certain perspective, you can't rely on anything (even the sun coming up...)

1585168493
nephele
Does portage even allow you to see that far? :)

1585168505
nephele
err poudriere

1585168521
swills
sorry?

1585168549
nephele
I thought it builds in jails, why should /usr/src from the host be available?

1585168557
swills
it's not from the host

1585168559
swills
it's from the build jail

1585168610
swills
(well, it can be from the host, if you want, but that's another issue...)

1585169117
andrewrk
bug report for the forkbomb thing:

1585169198
swills
thanks

1585169260
swills
I think i can close

1585169830
traviss
anyone know if there is already an issue for switching on multiple values? match in rust supports this and i've found it really nice at times. i couldn't find an issue.

1585169894
traviss
i.e. switch (a, b) { 1, 2 => ..., else => ...}

1585170080
andrewrk
that looks useful and it's unlikely to get added to zig

1585170155
andrewrk
you are welcome to open a proposal and make a case for it

1585170227
traviss
ok i'll give it some thought. i thought it might be possible with tuples but that doesn't seem to work.

1585170453
traviss
i'm guess switch only supports primitive types. makes sense.

1585170717
traviss
*guessing

1585170984
andrewrk
hmmmmmmmmmmmmm. libc++ is basically all stuff we already have in std, but in C++ instead of Zig. Is anyone thinking what I'm thinking?

1585171033
andrewrk
here are some example filenames: filessytem/directory_iterator.cpp  mutex.cpp  chrono.cpp  random.cpp

1585171050
companion_cube
translate-cxx?

1585171080
kenaryn
I can't manage to make zig working again since the latest pre-built tarball. Do I have to use `chmod +x` after downloading the .tar.xz archive?

1585171108
andrewrk
kenaryn, with more details I'm sure we can figure it out

1585171139
kenaryn
you are right, i have a 'no permission' error

1585171164
kenaryn
whe I type `zig --version`

1585171268
traviss
did you try chmod +x ?

1585171287
traviss
sorry what system are you on?

1585171304
kenaryn
here is my process:

1585171336
kenaryn
it worked before, so I'm really confused.

1585171371
TheLemonMan
executing a tar file is not gonna work

1585171419
kenaryn
I agree but did I do that??

1585171441
TheLemonMan
mv zig-linux-<arch>-<version>+<pre-release>.tar.xz zig

1585171468
kenaryn
It is a mere renamming for ease of use

1585171483
ifreund
thing is, you need to extract it first

1585171536
kenaryn
Agreed, but i did type `tar -xvJf <tarball>`

1585171539
TheLemonMan
ah, you're adding that to PATH later

1585171562
TheLemonMan
you need `chmod +x ~/.local/bin/zig/zig`

1585171578
kenaryn
ah? I'll try in a few seconds

1585171616
sammich
How would i go about converting a c voidpointer and the length of its elements into a zig arraylist or something?

1585171658
TheLemonMan
cast to [*]T and slice it

1585171678
ifreund
kenaryn: it looks to me that you extracted it, then renamed the tarball to zig, put the renamed tarball in your path, then tried to run it

1585171827
sammich
TheLemonMan: Thank you!

1585171883
nia
hey, i'm trying to build zig unprivileged on NetBSD. it fails making libuserland on this command

1585171940
nia
i'd like to trace which paths it's trying to access. ktrace doesn't seem useful for this. any advice?

1585171942
TheLemonMan
nia, are you using the version from git?

1585171951
TheLemonMan
truss is your friend

1585171970
nia
TheLemonMan: no, my local tree is 0.5.0 with your recent fixes backported. I can share the patches if you'd like

1585172050
TheLemonMan
oh well, 0.6.0 is around the corner

1585172087
jwh
isn't it /usr/pkg?

1585172095
TheLemonMan
do you experience any problem using `master` ?

1585172099
jwh
(just judging from the --prefix arg)

1585172103
nia
how around the corner? we're branching pkgsrc-2020Q1 this weekend

1585172111
nia
i'd like to get working zig into it ;)

1585172142
ifreund
april 13th is the target date for zig 0.6.0 i believe

1585172227
nia
in the case that it's trying to touch --prefix, it should be working within DESTDIR

1585172230
kenaryn
TheLemonMan I did move the extracted directory (instead of the renammed tarball) to '~/.local/bin' and `chmod +x ~/.local/bin/zig/zig` but I have still '/home/aurele/.local/bin/zig: Permission denied.' when I type `zig --version`

1585172254
TheLemonMan
`/home/aurele/.local/bin/zig:` <- your shell is trying to execute the folder

1585172342
TheLemonMan
andrewrk, that LLVM problem is so nasty, I couldn't get llc to crash... Tomorrow I'll try again with a debug copy of llvm/clang/lld

1585172351
andrewrk
nia, llvm 10 came out just yesterday- it might be wise to wait to branch pkgsrc for a couple weeks to let programs and libraries test with the new version and update

1585172377
jwh
speaking of, is support for 10 in master now?

1585172380
andrewrk
zig is basically in release crunch now; just need to do some bug fixes and polishes now that llvm 10 branch is merged

1585172381
andrewrk
yes

1585172384
jwh
ah cool

1585172397
andrewrk
TheLemonMan, damn. I'll look into it too. I agree it's quite a nasty problem

1585172407
nia
right, true, we won't be able to get llvm 10 in, so it'll have to be 0.5.0

1585172437
andrewrk
ah that's a bummer

1585172455
TheLemonMan
andrewrk, reverting the __divtf3 patch didn't help tho, that's even weirder

1585172458
andrewrk
oh!

1585172473
andrewrk
damn

1585172518
TheLemonMan
I have the faulty zig binary here, I forgot to take the ld.so with me tho

1585172572
andrewrk
hmmmm

1585172577
andrewrk
maybe mikdusan's clue is useful after all

1585172580
andrewrk
why would the cmake thing be different?

1585172588
andrewrk
maybe we can use alpine:stable or something instead of alpine:edge

1585172626
TheLemonMan
hmm, the plot thickens, running zig0 under valgrind (on my x86 box) shows a few warnings in some seemingly related code paths

1585172652
TheLemonMan
maybe it's just a false flag, maybe it's the key to this mistery

1585172671
kenaryn
yes you were right, thanks TheLemonMan and ifreund :)

1585172673
andrewrk
we need scooby doo and nancy drew

1585172702
TheLemonMan
or better, a cocaine-fueled 72h bug hunt

1585172708
kenaryn
Have fun and keep going.

1585172819
TheLemonMan
nia, check out lib/std/build.zig:797

1585172848
TheLemonMan
it seems that something goes wrong there and some path becomes '/something'

1585172859
TheLemonMan
that would explain the access denied error

1585172974
kenaryn
is `target` compilation's option in 0.5.0+39589cffe broken? `zig targets` returns 'Unable to find zig lib directory: FileNotFound.'

1585172976
kenaryn
Reinstall Zig or use --zig-install-prefix.

1585172978
kenaryn
unable to find zig installation directory: ZigLibDirNotFound

1585173005
kenaryn
Sorry, I mean is `targets` command broken?

1585173014
TheLemonMan
kenaryn,

1585173032
TheLemonMan
mikdusan, fixed that in #4811 just a few minutes ago

1585173069
kenaryn
My apologies.

1585173123
TheLemonMan
no need to apologize :)

1585173204
kenaryn
Is there a way to make bug-related issues graphically or semantically relevant or prioritary (I mean more obvious) in git or even github?

1585173290
kenaryn
I mean, there're 256 open bug and I don't want to spam again in the future.

1585173574
nia
ah yeah, it's trying to touch the install prefix during build

1585173575
nia
that won't work

1585173591
nia
i can hack around it, possibly

1585173600
nia
providing nothing passed to --prefix gets embedded anywhere

1585173751
kenaryn
This is it. Good night from France :)

1585175027
wilsonk
adamkowalski: did you get zig building on MacOS?

1585175531
fengb
Silly aside: can we rename "undefined behavior" to "nasal demons"?

1585175780
wilsonk
adamkowalski: I was running into similar issues when I had CC and CXX set to a different clang that the system clang (ie. CC was set to the non-system /usr/local/bin/clang like I see in your cmake output). Try to unset both of those, delete your zig build dir, rerun cmake and hopefully that will work.  It worked for me with MacOS Catalina and an updated Xcode from yesterday.  You should see that the Apple-11.0... compiler is being picked u

1585176623
mikdusan
PSA for Apple Xcode users: in light of regular Xcode update, NUKE the following file to force zig to re-populate with latest correct paths:

1585176626
mikdusan
~/Library/Application\ Support/zig/stage1/native_libc.txt

1585176924
andrewrk
hmm. it was not my original intention to globally cache that file with no redetection

1585176941
andrewrk
why did we move it from local to global again?

1585177133
andrewrk
uh oh mikdusan, I'm seeing some Use-After-Free when running the behavior tests of zig. this appears to be a regression introduced a while back, even before merging llvm10 branch

1585177162
andrewrk


1585177178
mikdusan
andrewrk: re: global that was at my behest, idea was it was bad to cache _libc.txt in global + N-local caches

1585177180
andrewrk
we should try to remember to run tests in valgrind in the future when we mess with trying to reclaim memory

1585177218
mikdusan
yes that is sound advice

1585177221
mikdusan
I should have done so

1585177235
andrewrk
hmm yeah I think the global one is better than N local ones

1585177242
andrewrk
but maybe better yet would be no caching

1585177309
andrewrk
for all I know it could have been my commits too, I haven't run valgrind in a while

1585177337
andrewrk
a bisect would be useful, but first I'm going to try to just fix it

1585177408
mikdusan
i was actually thinking

1585177538
mikdusan
It's sad that valgrind is probably never going to work on macos again

1585177930
andrewrk
that is indeed sad

1585177964
andrewrk
yeah i'm fine with revisiting the native_libc.txt file after self-hosted is what we ship

1585178000
FireFox317
im not a windows export, but i think its not possible to have async io on stdout/in on windows. We need the same workaround as on linux (making a seperate thread). see this link:

1585178125
squeek502
experimenting with zig cc, running into `__GLIBC_USE is not defined` errors from limits.h in /zig/libc/include/generic-glibc/limits.h; a simple `#include <limits.h>` in test.c and then `zig cc -o test.o -c test.c` is enough to reproduce it for me. any ideas?

1585178224
mikdusan
andrewrk: if valgrind found something after zig_llvm_emit_output, maybe try disable `g->pass1_arena->destruct(&heap::c_allocator);` . that's a big stick tho.

1585178291
andrewrk
squeek502, what target?

1585178316
squeek502
native on ubuntu

1585178440
mikdusan
and my most recent heap free was with commit 770631cc79a655bc5e21184ca15bdb6192e905de ; see ira_deref loop on constants.length, destroying instr with refcount==0 and no-sideeffects

1585178457
andrewrk
squeek502, hmm, I'm confused why I can't repro it

1585178502
squeek502
no worries, i'm probably doing something dumb

1585178523
andrewrk
hm I'm not ready to blame you yet :)

1585178542
andrewrk
ooh I should implement -### which does --verbose-cc

1585178653
squeek502
i can show you my failing zig clang call if that helps?

1585178717
andrewrk
sure

1585178750
squeek502


1585178885
andrewrk
squeek502, hmm, ok so /usr/include/limits.h is interfering with zig's header files. I think I understand the problem. Zig is adding your system native lib dirs because -lc is implied by `zig cc`, and I think any `-l` arg triggers adding native lib dirs

1585178906
andrewrk
and then zig is adding those dirs with -I rather than -isystem, which are incorrectly taking precedence over zig's libc headers

1585178929
andrewrk
as a test can you try replacing -isystem with -I in that command line?

1585178959
andrewrk
there are 5 occurences

1585179006
squeek502
that indeed fixes it

1585179065
squeek502
should i file an issue?

1585179099
andrewrk
hmm ok so that's one possible fix. normally we would want -I args to be able to override -isystem stuff. the problem here is that we only want to ignore the conflicting native system includes, but they're mixed in with potential library header files that we don't want to ignore

1585179117
andrewrk
let me spend 5 minutes trying to fix this while it's fresh in my mind, and otherwise yeah an issue

1585179148
squeek502
ok sounds good

1585179248
andrewrk
this is also a problem with regular zig (when building c files), not just zig cc

1585179277
squeek502
makes sense

1585179308
BaroqueLarouche
So it could potentially fix

1585179310
BaroqueLarouche
?

1585179353
andrewrk
BaroqueLarouche, this looks unrelated

1585179372
andrewrk
a nice workaround right now for #4772 is to use `-target native-native-gnu`

1585179393
andrewrk
(this avoids dependency on msvc entirely)

1585179442
BaroqueLarouche
In this project, I do need msvc though because I link prebuilt static librairies

1585179805
r4pr0n
why is it not allowed to do _ = func() on func where func may return an error?

1585179845
r4pr0n
i don't want to have the return value and i don't care about the error either

1585179862
ifreund
_ = func() catch unreachable;

1585179895
r4pr0n
but that's not the same, is it? doesn't that panic when the error happens?

1585179896
fengb
It’s to prevent accidentally swallowing an error

1585179907
r4pr0n
yeah i understand that

1585179916
fengb
_ = func() catch undefined;

1585179921
r4pr0n
but i actually want to not care even if it errors

1585179923
fengb
To really throw it away

1585179929
andrewrk
BaroqueLarouche, foo-windows-gnu is compatible with msvc

1585179941
ifreund
it's not allowed because zig wants you to either handle errors or explictly ignore them

1585179957
BaroqueLarouche
<andrewrk "Michaël Larouche, foo-windows-gn"> Ohh!

1585179975
ifreund
_ = foo() explictly ignores a return value, not an error

1585179979
andrewrk
yeah, one thing I want to investigate is doing away with the msvc dependency entirely

1585180028
r4pr0n
ifreund: yeah, i totally understand that, I phrased it poorly, but I actually wanted to know if and how it's possible to just throw it away instead of panicking when it arrives

1585180040
r4pr0n
but i guess that's what catch undefined does

1585180091
BaroqueLarouche
You should keep msvc support imo, but I agree it should work without msvc installed

