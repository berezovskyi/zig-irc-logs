1590537945
pixelherodev
alexnask: ZLS now has hover?

1590537989
pixelherodev
Nicely done :)

1590537995
pixelherodev
My stashed entry now only has to handle references :)

1590538008
alexnask
Yup! I also made all capabilities we dont handle explicitly false

1590538038
alexnask
("referencesProvider":false is in there)

1590538060
pixelherodev
I did that and it didn't work, but I suppose I should try it and see what happens

1590538070
alexnask
Ah, good to know

1590538090
pixelherodev
What's zinput?

1590538098
pixelherodev
I mean, "Zig input" I assume

1590538107
pixelherodev
Ahh, README, yay :)

1590538143
alexnask
We also respond with "not implemented" when we get a method we dont handle but I guess that already didnt work either  so... :P

1590538206
pixelherodev
Actualy

1590538208
pixelherodev
That was the problem

1590538223
pixelherodev
I was getting the "not implemented" message as a constant error every freaking millisecond

1590538235
pixelherodev
That's what my patch changes

1590538262
alexnask
Ah, well that sounds like a weird decision on kak-lsp's side

1590538290
pixelherodev
Alrighty, slaughtered all ZLS processes

1590538293
alexnask
I dont think we can just ignore requests we already explicilty told the client we dont support T_T

1590538294
pixelherodev
Let's see what happens...

1590538303
pixelherodev
Just the opposite

1590538313
pixelherodev
If the client knows you don't support it and asks anyways, don't bother sending an error

1590538318
pixelherodev
Just... ignore it

1590538325
pixelherodev
It means the client is being dumb

1590538343
pixelherodev
Dammit packages still no good :(

1590538376
pixelherodev
But if they worked, everything else new would :)

1590538385
alexnask
Is the zig in PATH on master branch?

1590538390
pixelherodev
... no

1590538396
pixelherodev
That'd do it?

1590538402
alexnask
It should yes

1590538403
pixelherodev
Is there a way to feed it the input separately

1590538407
pixelherodev
?

1590538423
alexnask
wdym?

1590538427
pixelherodev
A way to replace the `zig` invocation with a custom command

1590538437
pixelherodev
Being able to `remotezig` it would be nice :)

1590538441
alexnask
No, let me add an option

1590538449
pixelherodev
For now though, I'll just update the static build

1590538485
pixelherodev
Going to have to kill ZLS, I assume?

1590538520
alexnask
I dont think so

1590538548
alexnask
We just use the zig in path to run `zig run build_runner.zig` next to your build.zig files so just updating zig should do

1590538563
pixelherodev
Dammit

1590538566
pixelherodev
Still doesn't work

1590538573
pixelherodev
Updated Zig, nothing

1590538583
pixelherodev
... never mind

1590538586
pixelherodev
Just took a bit longer

1590538588
pixelherodev
:D

1590538593
alexnask
It takes a while the first time around yes :)

1590538600
pixelherodev
Really nice work

1590538604
pixelherodev
Hover is awesome too

1590538611
alexnask
It should take < 200 ms if you reopen a file that depends on th same build.zig

1590538623
pixelherodev
That's neat

1590538628
pixelherodev
Plus, I never close it so I'm good anyways

1590538633
alexnask
:-D

1590538639
pixelherodev
Kakoune within tmux has such low overhead that I literally never need to close it

1590538648
pixelherodev
I think I have, like, a dozen open editors at any given momeny

1590538651
pixelherodev
moment*

1590538669
pixelherodev
I'm really impressed, nice work

1590538682
alexnask
Thanks ^_^ More improvements coming soon (tm)

1590538707
pixelherodev
Anyways, going to head in early to make up for lack of sleep last night, hopefully in the morning I'll be able to clean up that stage2 PR :)

1590539664
andrewrk
FireFox317, llvm does not implement the c calling convention for us, sadly. we have to do it ourselves

1590539678
andrewrk
it has a c calling convention attribute, but it does not do everything. we still have to do it anyway

1590540429
pmwhite
Is the redisconf talk available yet? Or has that not happened yet?

1590540483
alexnask


1590540658
pmwhite
Oh, nice. Thanks for the heads up.

1590542337
THFKA4
i enjoyed it

1590542627
pmwhite
Lol, great talk.

1590545781
andrewrk
lol

1590545793
andrewrk


1590545795
andrewrk


1590545932
pixelherodev
andrewrk: you still on?

1590546199
pixelherodev
In the morning then :)

1590547813
pmwhite
Ah nice, they exist.

1590554838
pixelherodev
alexnask: I'm guessing usingnamespace isn't supported yet?

1590555773
pixelherodev
Unrelated: `try jit.reserveI(1).?[0].reserve(3)` I think I like this more, for the API

1590555792
pixelherodev
Instead of returning an error union, the JIT's reserve method returns an optional slice (either the reserved blocks, or nothing)

1590555814
pixelherodev
Reserving instructions

1590555834
pixelherodev
... no, this is a bad idea; I shouldn't optimize the API for a rare use case

1590578669
synaps3
is zig used in production anywhere ?

1590578754
ikskuh
i hope not

1590578761
greenfork
lol

1590578792
ikskuh
i want to do my hoem automation based on zig

1590578797
ikskuh
but that's all private, extensive testing

1590579558
synaps3
haha, when will it be ready for production ?

1590579671
ifreund
when 1.0 is released :D

1590581271
fengb
My emulator is totally production >_>

1590581335
ikskuh
\o/

1590581341
ikskuh
/o\

1590584383
greenfork
ikskuh: what home automation are you going to write in zig? something like alarm/locks?

1590584859
ikskuh
greenfork: i have a completly self-built system here

1590584913
ikskuh
which communicates over serial,tcp,udp and a custom network protocol

1590584924
ikskuh
and i want to write some of my serves in zig

1590584934
ikskuh
they're currently written in rust and i'm not happy about the compilation times

1590584997
ikskuh
and i have to change some stuff anyways

1590585009
ikskuh
so why not use the option to rewrite it in zig

1590585050
greenfork
that sounds nice, a lot of custom parts, I like stuff like this

1590585108
ikskuh
yeah, it's cool :)

1590585117
ikskuh
doens't work right now for most of the parts

1590585124
ikskuh
(only thing that works is clock/weather display)

1590585132
ikskuh
music control is completly broken atm

1590585137
ikskuh
same as deivce power

1590585210
greenfork
sounds familiar :)

1590585315
pixelherodev
andrewrk: ping

1590589807
oats
can anybody here doing zig dev with emacs share with me what their setup is like?

1590590123
pmwhite
Sure: "alias emacs=vim"

1590590279
pixelherodev
Boo

1590590284
ikskuh
alias emacs=ed

1590590302
ikskuh
alias vi=ed

1590590309
pixelherodev
alias vi=kakoune

1590590326
nephele
what's with all those sophisticated editors, a needle and a steady hand.. :)

1590590333
pixelherodev
inb4 butterfly

1590590333
BaroqueLarouche
alias emacs=code

1590590590
pixelherodev
... okay, I know I'm going to feel stupid in a minute but

1590590596
pixelherodev
What's the correct way to get a [][]cons... oh wait

1590590600
pixelherodev
... dammit

1590590607
pixelherodev
I

1590590614
pixelherodev
The parameter

1590590619
pixelherodev
facepalms*

1590590633
pixelherodev
It was supposed to take [][]const u8, but was taking []const u8 instead :P

1590590756
pixelherodev
gahhh

1590590758
pixelherodev
`expected type '[][]const u8', found '*const [1][]const u8'`

1590590809
ikskuh
yeah?

1590590815
ikskuh
there's a const missing!

1590590827
pixelherodev
?

1590590832
alexnask
[]const []const u8

1590590833
pixelherodev
Ohhhhh

1590590835
pixelherodev
Yeah

1590590844
pixelherodev
Gah, I hate working with multiple layers of pointers :(

1590590856
pixelherodev
I always make some stupid mistake here

1590591082
fengb
const * const int const

1590592573
pixelherodev
I think we need a way of splitting up tests from within the running test

1590592583
pixelherodev
`./zig build test-stage2` shows one test, for instance

1590592596
pixelherodev
But in reality, there can be dozens of cases all utilizing the shared harness

1590592622
pixelherodev
Maybe a builtin, or something?

1590592738
andrewrk
pixelherodev, you're trying to only run 1 test? is that what you're saying

1590592846
companion_cube
hmmm I could watch the "zig for writing a redis module" talk, but the async/await talk was the, hum, short version ðŸ™ƒ

1590592850
companion_cube
is the long version around?

1590592853
pixelherodev
andrewrk: no

1590592859
pixelherodev
I'm saying self-hosted tests show as a single test

1590592862
pixelherodev
`test 1/1: self-hosted`

1590592874
pixelherodev
It would make more sense for each test case to be distinct

1590592885
pixelherodev
but there's no good way to do that currently, as far as I know

1590592946
pixelherodev
andrewrk: on a different note, figured out a solution to the contributor-friendliness issue with 5422 :)

1590592983
pixelherodev
You give it strings as you showed (`line:column:msg`), it extracts the three components, calculates the byte offset in the source, and generates an ErrorMsg

1590592993
pixelherodev
Then, all three error types are compared against the single array

1590593158
andrewrk
pixelherodev, interesting. my instinct would tell me to do it the other way - convert the actual error message to line:column just like it already does when printing errors to the console, then compare that

1590593172
andrewrk
the code to go in the reverse direction doesn't need to exist

1590593211
pixelherodev
Either way, it's about the same amount of work

1590593226
pixelherodev
The biggest difference is when it happens; this way, it only happens once per expected error message

1590593235
pixelherodev
Otherwise, it'd happen once per received error message

1590593320
pixelherodev
At the end of the day, I don't think it's worth bikeshedding the exact implementation of something so trivial :P

1590593332
pixelherodev
If this is the biggest problem you find with the PR, I'll be happy :)

1590593642
andrewrk
yeah, thanks for doing that. I'll be happy if it's easy to add new test cases :)

1590593655
andrewrk
(and update existing ones when they break)

1590593683
pixelherodev
That's the goal :)

1590593695
pixelherodev
Oh, and while you're here

1590593695
pixelherodev
The reason the coercion is needed is

1590593712
pixelherodev
That is, it's reading the call target's name as an [N:0]u8 instead of a slice

1590593723
pixelherodev
I think that's a deeper bug, so I'm going to need to remove the coercion and investigate before merging

1590593747
pixelherodev
When the call target exists, the coercion is unneeded (which implies it's read as a slice)

1590593750
andrewrk
why is it reading a name instead of referencing a @foo or %foo ?

1590593797
andrewrk
I don't fully understand the problem but the solution is certainly not to break the rules of type coercion

1590593866
pixelherodev
Right, I know

1590593875
pixelherodev
I'd assumed the coercion was

1590593881
companion_cube
ah, found the actual async/await talk URL in the logs, nvm

1590593881
pixelherodev
Which was a faulty assumption, clearly

1590593892
pixelherodev
It

1590593894
pixelherodev
@notafunc

1590593906
pixelherodev
The name of the function is being read in by analyseInstCall

1590593913
pixelherodev
It's given type [8:0]u8

1590593929
pixelherodev
Then it tries coercing to a u8 slice, which fails/failed

1590594388
andrewrk
pixelherodev, that's the actual type coercion function of zig! :D

1590594426
andrewrk
after I finish up this vaddr allocation scheme I'll take a look at the example you're talking about

1590594601
pixelherodev
Nah, I'll get it :)

1590594607
pixelherodev
I've already figured out most of the code paths involved

1590594685
pixelherodev
Alrighty, error cases working again :)

1590594976
andrewrk
nice

1590595012
pixelherodev
... okay, this is weird. After reverting the coercion, I don't see the "failed coercion" error anymore, I just get "missing expected error"

1590595134
pixelherodev
Error trace is actually completely empty...

1590595214
pixelherodev
Back to gdb...

1590595532
pixelherodev
Ahh, okay; this is weird

1590595556
pixelherodev
`call(%notafunc)` errors even when the containing function isn't referenced

1590595560
pixelherodev
`call(@notafunc)` does not

1590595565
pixelherodev
andrewrk: which of those is correct?

1590598264
pixelherodev
If the func is exported,

1590598312
pixelherodev
The problem is in resolve_const_string, I believe

1590598841
pixelherodev
Hmm, do `@foo` and `%foo` get resolved differently by analyzeInst?

1590599518
pmwhite
ArrayList insert is segfaulting if I try to insert at index 8 when it has length 8. is the `self.ensureCapacity` call not doing its job?

1590599743
pixelherodev
pmwhite: no, that's correct

1590599753
pixelherodev
If length is 8, the valid indices are from 0..7

1590599874
pmwhite
but `ArrayList.insert` calls `self.ensureCapacity(self.items.len + 1);`, so the length becomes 9.

1590599906
pixelherodev
Ohh, you meant ArrayList.insert :P

1590599912
pixelherodev
Hmm

1590599924
pmwhite


1590599926
pixelherodev
ensureCapacity definitely works correctly...

1590599966
pixelherodev
paste?

1590600053
pmwhite


1590600083
pixelherodev
... ohhhhhh

1590600088
pixelherodev
Not your issue, but I think I figured out mine :P

1590600094
pixelherodev
Looking now

1590600108
pixelherodev
pmwhite: pretty sure the insert isn't the problem

1590600112
pixelherodev
`self.points.items[self.point_cursor_index - 1]`

1590600115
pixelherodev
That is

1590600119
pixelherodev
Try moving that to a separate line

1590600130
pixelherodev
cursor_index is likely incorrect

1590600143
pixelherodev
I'm willing to bet *that*'s what's segfaulting

1590600153
pixelherodev
My issue, if I'm correct, wasn't the call at all

1590600155
pixelherodev
It was the reference

1590600230
pixelherodev
... okay, so that was wrong, but fixing it just exposes the call coercion bug I mentioned :P

1590600244
pmwhite
Looks like you were right, but maybe not how you expect.

1590600254
pixelherodev
?

1590600259
pixelherodev
What was it?

1590600268
pmwhite
I moved it into its own line and it stopped segfaulting altogether.

1590600280
pixelherodev
... what the

1590600289
pixelherodev
... That should definitely evaluate

1590600317
pmwhite
I don't understand what the problem is, and I don't understand why that fixed the problem.

1590600323
pixelherodev
Ohhhhhhhh

1590600325
pixelherodev
I get it!

1590600328
pixelherodev
Reallocation!

1590600349
pixelherodev
No, wait

1590600354
pixelherodev
That should be happening first though...

1590600356
pixelherodev
Unless inlining?

1590600370
pmwhite
It should copy the parameter, in the original version, right?

1590600385
pixelherodev
Yeah

1590600399
pixelherodev
Hmm

1590600402
pixelherodev
No idea

1590600405
pixelherodev
andrewrk: figured out the underlying bug :)

1590600419
pixelherodev
analyzeInst gives the wrong result for unknown declrefs

1590600440
pixelherodev
Which the caller than attempts to coerce to the correct type

1590600537
pixelherodev
Back to GDB to figure out a solution...

1590600676
pixelherodev
pmwhite: maybe compare the generated IR, or asm?

1590600782
pmwhite


1590600790
pmwhite
Minimal repro ^

1590600883
pmwhite
Using a `u8` instead of `[2]f32` is fine, so I bet it has something to do with this being a pointer instead of an array.

1590601548
pixelherodev
Ahhhhh

1590601559
pixelherodev
If the declref doesn't exist, it's read in as "bytes" instead of as a "declref"

1590601567
pixelherodev
which then fails to coerce

1590601716
pixelherodev
Rather, the name is

1590601797
pixelherodev
Hmm

1590601802
pixelherodev
No, was right the first time

1590601806
pixelherodev
It reads it differently

1590602000
pmwhite
Submitted an issue:

1590602569
dermetfan
Sorry, pedantic question: When I pass a struct somewhere which memory the calling code owns, would you consider it a better practice to take a pointer explicitely? `fn init(ref: X)` vs `fn init(ref: *X)`

1590602616
pixelherodev
No

1590602634
pixelherodev
Unless you

1590602644
pixelherodev
The compiler will convert it to a pointer if it so chooses

1590602673
pixelherodev
If you want to modify the original, you

1590602682
dermetfan
Thanks, that sounds good. Will do :)

1590602856
pixelherodev
No problem! :D

1590603059
pixelherodev
I think Azure is broken

1590603101
pixelherodev
It seems to complete successfully, report that it failed, and then just wipe the logs

1590603124
pixelherodev
andrewrk: 5422 is good to go

1590603132
pixelherodev
Unless there's anything else you want me to fix

1590603626
pixelherodev
Keeping an eye on Azure CI, to see if it's actually passing or not

1590603939
pixelherodev
Hmm

1590603971
pixelherodev
stage2 incremental compiler thoughts: what happens if you want to change target midway through? e.g. change musl versions, or libcs?

1590603974
pixelherodev
need to restart?

1590603982
pixelherodev
At present, I assume that's the case

1590603997
pixelherodev
Would be interesting to have a mode to compile for various targets, preserving the majority of the ZIR analysis

1590607971
satchmo
totally forgot that the compiler chooses what's best

1590607988
satchmo
one of the nice things in life

1590609154
pixelherodev
Something looks wrong with the ggf numbers...

1590609166
pixelherodev
self-hosted with std_gpa looks to be 45% above baseline on the latest commit

1590609286
pixelherodev
Yeah

1590609296
pixelherodev
Try e.g. `cat records.csv | grep self-hosted-parser | grep std_gpa|cut -d, -f4,8,23|tail -n3`

1590609302
pixelherodev
and `cat records.csv | grep self-hosted-parser | grep libc|cut -d, -f4,8,23|tail -n3`

1590609308
pixelherodev
The numbers don't add up, at all.

1590609319
pixelherodev
andrewrk: Azure passed.

1590616229
pixelherodev
alexnask: Would it be possible to have build_runner.zig be created in a tmp folder, or deleted after gathering info?

1590616246
pixelherodev
Ooh, or make it in the zig-cache

1590616255
alexnask
It should get deleted, does it stay there?

1590616258
ikskuh
i think the problem is the @import() this

1590616263
alexnask
Putting it in the zig cache is a good idea

1590616269
pixelherodev
Yeah, it does

1590616269
ikskuh
oh wait

1590616275
alexnask
The relative import will prob work in there

1590616279
ikskuh
you can just add build.zig as a package ;)

1590616318
alexnask
Im not using `zig build` because that would require us to ship the whole std with ajust a modified build runner

1590616334
alexnask
Which is why I need to copy a file and import with a relative path

1590616344
alexnask
Idk perhaps shipping std is the way to go

1590616404
pixelherodev
Why?

1590616408
pixelherodev
We have std path anyways ;)

1590616482
ikskuh
alexnask: huh what?

1590616488
ikskuh
you can just do

1590616514
ikskuh
const buildfile = @import("build-ref");

1590616516
ikskuh
then do

1590616537
ikskuh
zig run --begin-pkg build-ref build.zig --end-pkg /zls/build-runner.zig

1590616543
alexnask
Good point

1590616747
pixelherodev
... hmm.

1590616895
alexnask
Hm changing the pkg path doesnt seem to trigger a recompile, probably not taken into account in the cache hash

1590623239
andrewrk
oof

1590623601
pixelherodev
?

1590623604
pixelherodev
What happend?

1590623782
pixelherodev
happened*

