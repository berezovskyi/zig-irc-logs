1595725797
pixelherodev
QEMU 2 is *ancient*, yeah

1595725809
frmdstryr
When using a package in build.zig, zig appends ".package" to the name. This make gdb give a syntax error when I try to use `p .mypkg.some.var`,  how do I print a value from a package with gdb?

1595725862
pixelherodev
I don't think that's a build.zig thing

1595725891
pixelherodev
I think it's Zig's internal naming - if you have `const a = @import("something.zig")` in your root file, and a contains a global `b`, then it'll be named `.a.b`

1595725904
pixelherodev
I could be entirely wrong, I've not had the best experience with it so far either

1595726103
frmdstryr
Hmm, ok, I wonder if there's any issues on this

1595726392
frmdstryr
Maybe

1595728803
keegans
experienced what I believe is a bug, but am not sure how to track down if it has been reported yet. for a statement that can return a set of errors, say X Y Z, if you explicitly handle X and also have a `else => return err;`, X is still in the set of errors that can escape out of that function

1595728850
keegans
(when in reality since Y and Z cases resolve to a return err, only Y and Z can actually be returned from the function)

1595729420
keegans


1595729432
keegans
hmm seems `else` entirely breaks ErrorSet anyway :(

1595729448
keegans
so this behaviour is just a result of that

1595734696
pixelherodev
keegans: it isn't a bug, I don't think

1595734745
pixelherodev
Never mind, looked at godbolt

1595734747
pixelherodev
That does look off

1595741059
jabb
o/

1595752728
ifreund
o7

1595763890
ikskuh
hello

1595764340
Nypsie
Hello

1595765012
ikskuh
i wonder if the std debug panic handler should use std.log instead of writing to stdout directly…

1595775441
THFKA4
anyone else getting a cImport failure building on HEAD?

1595775558
ifreund
THFKA4: looks like you need to link libc

1595775579
ifreund
either pass -lc or call linkLibC() in your build.zig

1595775590
ikskuh
ifreund: this is building stage1

1595775604
ifreund
ikskuh: oh

1595775625
ifreund
let me pull and try

1595775673
THFKA4
i'm half suspecting the <> instead of "" on that #include

1595775720
ifreund
hmm it built fine for me on void

1595775733
ifreund
looks like you were running tests though?

1595775757
THFKA4
yeah, i noticed that's new. it wasn't running them in the past

1595775766
THFKA4
i'll try to turn them off, thanks

1595775952
THFKA4
just werkz, problem SOLVED

1595776315
ifreund
\o/

1595776382
THFKA4
kind of makes me wonder how CI is green though

1595778779
pixelherodev
... there haven't been any major PRs since I last looked. This feels weird. I'm so used to them just popping out of nowhere lol

1595779806
danyspin97
I have a os.sockaddr_in*, how can use @ptrCast to convert it to os.sockaddr*?

1595780081
danyspin97
found, @ptrCast(*os.sockaddr, myptr)

1595780289
isolier
danyspin97: Purely out of curiosity, what are you working on?

1595780310
danyspin97
isolier:

1595780328
danyspin97
I wanted so

1595780345
danyspin97
some small project to try zig on

1595780448
isolier
Very cool

1595780457
danyspin97
thanks!

1595780465
isolier
What do you think of source hut?

1595780490
danyspin97
it's great but not yet aimed at everyone

1595780501
danyspin97
due to its mail based workflow

1595780513
danyspin97
do you have projects there?

1595780527
isolier
I see. I self host Gitlab, but it is a beast.

1595780534
danyspin97
ah, yea it is

1595780553
danyspin97
I use gitlab often because the distro I use has a selfhosted instance

1595780575
danyspin97
and sometimes it becomes slow. I have also seen that freedesktop pays a lot for its instance

1595780586
isolier
It is definitely featureful, but I think I am going to switch to source hut or gitea or something.

1595780618
isolier
Yeah, they defintely make it easy to set up your own instance, despite the amazing complexity.

1595780649
danyspin97
gitea is good, but I disklike go..

1595780680
fengb
You prefer Ruby over Go? 🤔

1595780686
danyspin97
yup

1595780688
isolier
Indeed. I just want to use though, so hopefully the implementation language doesn't matter so much.

1595780723
danyspin97
ruby: modular packages, easy to bootstrap (afaik)

1595780744
danyspin97
go: hell to bootstrap, huge packages, bad practices until last year

1595780783
fengb
Um... Ruby best practices are... amazing

1595780822
fengb
And not sure what you mean by bootstrapping because Ruby doesn’t build itself

1595780852
danyspin97
never developed in Ruby, but I am biased packaging some software

1595780876
fengb
Oh GOPATH was shitty

1595780877
danyspin97
yea, that's why ruby it's good, you can compile it in C

1595780881
fengb
I’m glad they finally figured that out

1595780902
cren
what exactly did Go do with GOPATH?

1595780917
danyspin97
the language choosed how to deal with packages

1595780921
fengb
Every “package” in Go needed to be in GOPATH

1595780924
danyspin97
and GOPATH was used

1595780933
cren
That sounds reasonable enough

1595780936
danyspin97
the headaches trying to understand it

1595780941
danyspin97
only for local development

1595780970
fengb
It’s a global space where all packages go

1595780982
ifreund
that sounds horrible

1595780994
cren
That doesn't sound much different from what python does

1595780997
fengb
And there’s no way of loading a different path

1595781004
danyspin97
no, python is good for this

1595781010
ifreund
python package management is also horrible

1595781019
danyspin97
it's workable

1595781020
fengb
Python let’s you add stuff like virtualenv

1595781028
danyspin97
I actually like python package management

1595781041
cren
I like that there are a lot of packages

1595781046
danyspin97
you can install packages in /usr/lib, use local files or user installed packages

1595781047
ifreund
aye with venv it's workable

1595781049
fengb
Anyway, Go has actual modules now

1595781052
cren
I do not like that you cannot recursively remove a package and its dependencies with pip

1595781065
danyspin97
pip without --user it's bad

1595781145
fengb
Most package managers don’t let you exclude a transitive dependency

1595781481
cren
Is the last expression in a Zig function returned automatically?

1595781490
fengb
No

1595781514
ifreund
not anymore at least

1595781520
cren
I think that's good

1595781525
ifreund
I agree

1595781538
cren
As a Python person I don't like implicit things

1595781598
fengb
It wasn’t implicit though: return by dropping the terminating semicolon

1595781610
fengb
Not very obvious either >_>

1595782061
leeward
pip is only good in virtualenv; anywhere else use the distro's package manager

1595782492
pixelherodev
I use `pip --user` for local installs when packages aren't available in the normal repos

1595782548
pixelherodev
Which isn't often, but happens occasionally

1595782550
pixelherodev
Like, twice, ever

1595782553
pixelherodev
:P

1595782720
leeward
I have a work thing that has to run on CentOS, and the packages I need aren't in the distro so the whole thing goes in a virtualenv that gets installed to the SD card image at build time. Makes it super easy to manage dependencies and debug on the target hardware.

1595782774
pixelherodev
I don't use venvs :P I just install to wherever `pip --user install foo bar` goes lol

1595782784
pixelherodev
Haven't had any conflicts yet :P

1595782804
leeward
"yet"

1595782812
pixelherodev
It's been two years.

1595782819
pixelherodev
I'm pretty confident that it'll be fine

1595782855
leeward
I've been using Python for...a lot longer than that.

1595782868
pixelherodev
I haven't had this laptop set up for all that long lol

1595782882
fengb
I’ve been using python before you were born 🦖

1595782887
leeward
Being able to have python 2 and 3 venvs coexist on the same server is useful.

1595783023
leeward
Also knowing that CI, prod, and dev machines have the same set of packages even when they're running distros, and being able to wipe the whole thing and reinstall without worrying about hosing your system is good.

1595783046
fengb
This is the reason Docker exists :P

1595783050
leeward
I think the first time I looked at Python was either 1999 or 2000.

1595783079
leeward
It is, but I'm not putting docker on my production system.

1595783495
leeward
er, running different distros

1595784363
pixelherodev
Relevantly, finally got mnemosyne running without WINE :)

1595784383
pixelherodev
In a glibc chroot for now, until I get around to patching PyQtWebEngine

1595784402
pixelherodev
But this is still a major improvement, since I already had most deps in the chroot anyways, and now I can wipe WINE out of it

1595784443
leeward
\o/

1595784451
leeward
No idea what mnemosyne is, but...cool

1595786113
leeward
looks like I found a regression in translate-c

1595786119
danyspin97
can I convert a packed struct to a []u8?

1595786154
leeward
@bitcast

1595786171
leeward
Though I think it would be a [N]u8 first.

1595786184
Nypsie
There's also std.mem.toBytes

1595786202
leeward
^probably better

1595786324
danyspin97
I'll try it right away

1595786388
danyspin97
what about the opposite?

1595786396
danyspin97
from []u8 to a packed struct?

1595786640
scientes
@memcpy

1595786655
scientes
(that is how it should be implemented)

1595786664
leeward
std.mem.bytesAsValue gets you a pointer.

1595786668
scientes
or just @ptrCast()

1595786672
pixelherodev
slice.ptr gives [*]u8, which can be ptrCasted

1595786718
pixelherodev
std.mem is probably better, since a lot of its functions handle low-level details (like endianness) which everyone tends to overlook

1595786725
leeward
Maybe bytesAsValue should be called fromBytes fro symmetry.

1595786738
leeward
Also for symmetry

1595787446
danyspin97
hmm, this struct cannot be packed because it contains []const u8

1595787461
gruebite
Are there any ideas for what the name Zag would be used for? Package manager? :P

1595787506
pixelherodev
I used to call the standard library that

1595787515
pixelherodev
Then Andrew whacked my PR with a rolled up newspaper and I stopped :P

1595787594
ifreund
gruebite: only use case I've heard andrew mention was a name for an unstable/testing branch post 1.0

1595787659
ifreund
I have a theory that 50% of first zig projects are named zag though

1595787661
leeward
ahah, made a minimal example that shows translate-c being broken

1595787672
leeward
Now to turn it into a bug report...

1595787677
gruebite
i already have two projects named zag

1595787704
ifreund
gruebite: ahead of the curve, I like that :D

1595787759
ifreund
my main project was named zag for the first few days, before I found all the others and realized that I was not, in fact, original at all

1595787769
leeward
Er, no I haven't. That was the wrong code.

1595788056
gruebite
i haven't written much zig yet. waiting on c abi

1595788181
danyspin97
allocator.alloc(u8, 18) why does it return []u8 of size 16?

1595788259
pixelherodev
gruebite: we have a C ABI...

1595788270
pixelherodev
Wait, is it not fully implemented or something?

1595788275
pixelherodev
That wouldn't surprise me too much

1595788292
ifreund
pixelherodev: there's some low-hanging fruit with passing structs by value and whatnot

1595788317
Nypsie
danyspin97: What did you expect it to return?

1595788325
danyspin97
[]u8 of size 18

1595788336
pixelherodev
ifreund: gotcha

1595788345
ifreund
I haven't hit any of it in practice though, and I think I have one of the larger zig projects interfacing heavily with C

1595788350
Nypsie
My bad, for some reason I couldn't see the difference between 18 and 16 haha

1595788357
danyspin97
np xD

1595788373
danyspin97
i have a packed struct of size 18

1595788380
danyspin97
and @bitPack complains

1595788390
Nypsie
Packed structs are still quite buggy

1595788406
danyspin97
ah, I see

1595788410
leeward
Are all the elements in your packed struct aligned to word boundaries? If not, expect problems.

1595788419
danyspin97
no idea about aligning

1595788460
ifreund
and get excited for stage2 to fix all the bugs :D

1595788463
leeward
Those bugs will get fixed once self hosted is working. They're not necessary for writing a compiler, so they got put on the shelf.

1595788527
ifreund
pixelherodev: found the tracking issue:

1595789214
danyspin97
leeward: i removed "packed" declaration and left the struct. However it's alloc that does not want to work :/

1595789270
fengb
Hmm why can’t call allocator.create(Struct) ?

1595789292
danyspin97
source coming

1595789294
leeward
danyspin97: Which allocator are you using?

1595789299
danyspin97
leeward: c.heap

1595789329
danyspin97
std.heap.c_allocator

1595789341
danyspin97
afk

1595789940
BaroqueLarouche
speaking of packed struct bugs ☹️

1595790314
ifreund
danyspin97: that seems strange, but I think you'd need to post code if we're to make any sense of why the allocator is returning the wrong size

1595790668
danyspin97
ifreund: code coming

1595790670
danyspin97


1595790707
danyspin97


1595790866
ifreund
danyspin97: which line there is the one causing issues?

1595790888
danyspin97
last one

1595790891
danyspin97
@bitPack

1595790906
danyspin97
./src/benice.zig:42:21: error: destination type 'Rule.Rule' has size 34 but source type '[]u8' has size 16

1595790939
leeward
[]u8 is the actual slice pointer type, not the length of the array.

1595790974
ifreund
^

1595790996
ifreund
you want binary_rule.ptr

1595791029
danyspin97
and use @ptrCast?

1595791038
ifreund
yes

1595791056
leeward
I think what you actually want is std.mem.bytesAsValue

1595791063
ifreund
slices are special structs with two fields, ptr and length

1595791063
leeward
which will give you a pointer to a Rule.

1595791066
fengb
Why not allocator.create(Rule)

1595791084
ifreund
yeah and your Rule struct has to be packed or this is UB

1595791084
leeward
Oh, that too

1595791107
fengb
Your Rule would be misaligned in this case

1595791130
ifreund
the rule is on the stack in this case

1595791145
ifreund
he is trying to read from a socket into the stack variable

1595791154
fengb
Er... the *Rule could be misaligned. That’d require a memcpy to fix

1595791167
fengb
Whereas allocator.create() does the right thing for you

1595791182
leeward
Yeah, allocator.create is the way to go here.

1595791240
ifreund
I don't follow

1595791260
danyspin97
me neither :/

1595791317
danyspin97
allocator.create allocate a struct

1595791323
danyspin97
understood

1595791350
ifreund
theres no reason to heap allocate the struct, it's better to have it on the stack

1595791389
ifreund
the problem is how best to transform the raw bytes read from the socket into the struct

1595791396
danyspin97
wouldn't it be misaligned?

1595791413
gruebite
ahh, yeah. C structs by value

1595791455
gruebite
ifreund: what is your project?

1595791457
ifreund
danyspin97: as I understand it, the complier aligns all stack variables properly

1595791466
ifreund
gruebite:

1595791475
leeward
Pretty sure std.mem.bytesAsValue is the way to do that, assuming the target struct is packed.

1595791480
gruebite
awesome!

1595791480
ifreund
yes

1595791491
gruebite
i used to use dwm

1595791494
gruebite
but now i3

1595791535
danyspin97
leeward: with mem.bytesAsValue I don't even need to allocate the space for Rule struct

1595791549
danyspin97
I just get the pointer to the already allocated one but treated as *Rule

1595791605
ifreund
yes, you don't need to heap allocate the rules struct

1595791624
fengb
You can do something like `mem.asBytes(&rule)` to get a slice

1595791625
leeward
You don't even need it on the stack.

1595791633
fengb
And read the data directly into the slice

1595791640
leeward
You just turn the pointer to the array into a pointer to the struct.

1595791667
ifreund
i like fengb's way better :D

1595791769
ifreund
and afaik a packed struct should work ok in this case since all the members are byte-aligned

1595791789
fengb
They're not aligned

1595791805
fengb
Well... they're aligned in inconsistent ways. They're not supposed to be aligned

1595791833
danyspin97
asBytes compiles fine

1595791844
danyspin97
same for valueAsBytes

1595791862
ifreund
fengb: I'm sure you know more about it than I do, this is danyspin97's struct:

1595791898
fengb
extern struct might work the best there

1595792053
danyspin97
hmm I see

1595792071
danyspin97
I am also reading the doc for casting [N]T into []const T

1595792074
danyspin97
what about the opposite?

1595792075
fengb
Regular struct doesn't have guaranteed memory layout, and packed struct adds padding in a buggy way

1595792141
fengb
Slicing with comptime known values will give you a pointer to a fixed array: `foo[0..4]` gives you `*[4]const T`

1595792148
fengb
And you can deref that to get the actual value

1595792175
fengb
Something like `const array = foo[0..4].*`

1595792182
danyspin97
does not work with the return value of alloc.dupe

1595792222
ifreund
well, in that case the length wouldn't be comptime known

1595792247
ifreund
if you just called allocator.dupe there's no need to copy again though

1595792250
danyspin97
it would if I use dupe(u8, myarr[0..16])

1595792268
danyspin97
even better dupe(u8, myarr, 16)

1595792276
ifreund
no need for dupe then

1595792297
ifreund
const foo = myarr[0..16].*

1595792333
danyspin97
and it gets copied?

1595792350
fengb
Dupe creates a new heap allocation

1595792356
danyspin97
yea, that's the point

1595792365
danyspin97
ah, no wait

1595792374
fengb
ifreund's suggestion copies it into a stack variable

1595792434
ifreund
never heap allocate unless you have a runtime-known size

1595792458
ifreund
(or maybe if you need very large chunks of memory)

1595792478
danyspin97
I see

1595792546
danyspin97
the struct needs a compile time known size, so I picked 16

1595792564
danyspin97
but I read the value from a Json object, which can be smaller than 16

1595792596
danyspin97
and I need to copy that because I the parser will be dealloc'ed before

1595792934
danyspin97
resolved with @memcpy

1595794554
leeward
Whew, allocator interface change was fun...just caught up to that.

1595794561
leeward
Well, in the project where it matters.

1595795126
pixelherodev
Oh me, more changes

1595795129
pixelherodev
yay

1595795213
leeward
Where is marler? I have questions.

1595795221
pixelherodev
Ping in GH?

1595795277
leeward
I could probably find the answers there anyway.

1595797095
leeward
Is there any way to catch a segfault with a test to ensure that it generates one?

1595797160
fengb


1595797247
leeward
fengb: That's the thing. I wonder how important it is to be able to build tests in environments without fork.

1595797253
leeward
Seems like not.

1595797312
pixelherodev
Hmm, I disagree, it should be considered important

1595797473
leeward
Why?

1595797750
leeward
fengb: Amusingly, when I use that (modified to make it work) I get an error return trace printed out with my segfault, followed by "All 12 tests passed."

1595797774
fengb
Yeah I have a special thing that hides stderr

1595797779
fengb
It’s not optimal

1595797851
fengb


1595797995
leeward
Yep, that's...a way to do it.

1595798029
fengb
A better way is overwrite the panic handler and understand that it's a child

1595798153
fengb
Hmm... or create a FIFO right before fork, and have the master forward that to stderr

1595798614
ronsor
keegans: thanks for the advice on updating the QEMU. it works fine with a newer version.

1595801571
blinghound
what does the 'Avoid local maximums' part of the Zen mean in the context of programming?

1595801653
ifreund
it means that one should take the path that leads to the best outcome, even if it requires bactracking/throwing out some work to get there

1595801814
blinghound
ohh I see! A long-term oriented design rather than cobbling something 'good enough'

1595801975
ifreund
exactly

1595806488
pixelherodev
Tests marked as `std-native-Debug-bare-multi`: what's `bare-multi` there?

1595806651
pixelherodev
The SPU II branch fails locally too, I just accidentally muted the tests

1595806960
pixelherodev
I eagerly await the day we can use stage2 to work on stage2 :P

1595807131
gpanders[m]
Hey all, when I run 'zig targets' it lists my CPU, OS, and ABI under the "native" section as "x86_64", "macosx", and "gnu", respectively (running macOS). Running 'zig build' with no target specified works just fine, but when I try 'zig build -Dtarget=x86_64-macosx-gnu' I get an error with C importing ("error: C import failed"). I'm assuming the problem is that I'm not actually specifying the correct target, but how do I

1595807131
gpanders[m]
determine what the right target is?

1595807150
gpanders[m]
(For context, I'm trying to write a build script that compiles my program for different architectures, and I'm trying to find the right way to build for macOS)

1595807214
fengb
I don’t think macOS cross compile works right now

1595807226
pixelherodev
I'm 99% sure it doesn't

1595807239
fengb
Might want to try -Dtarget=native_native

1595807251
fengb
Er... native-native

1595807276
pixelherodev
You could do something like `if (host is macos) { build with native_native } else { error that cross-compilation for macos is not supported yet }`

1595807277
gpanders[m]
fengb: yea -Dtarget=native works, but then that wouldn't translate when running the build script on a non-macOS machine, so I was trying to find a more portable solution

1595807332
gpanders[m]
I think for now I'll just cross compile for Linux in my script and manage the macOS binaries manually

1595807345
fengb
We need to port libc headers at the very least

1595807820
pixelherodev
Woot, fixed the bug :)

