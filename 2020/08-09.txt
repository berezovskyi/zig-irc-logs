1596934241
andrewrk
this zig build integration with std.log is improving my debugging process big time

1596934358
andrewrk
great. I just accidentally pressed the hexchat keyboard shortcut for hiding the gui menu and now I can't figure out how to get it back

1596934384
ronsor
this is why I stick with irssi :)

1596934401
ronsor
anyway: /gui menu toggle

1596934427
andrewrk
nice thank you

1596937641
andrewrk
brainstorming: what kind of DWARF .debug_info tags can be used as "NOP" padding?

1596937721
andrewrk
example:

1596938064
andrewrk
maybe DW_TAG_lo_user will be properly ignored by gdb and other debug info consumers

1596939548
ronsor
man what the heck is this.

1596940265
fengb
“As a long way as Zig is anxious, the predominant advantages of the original LLVM version are worm

1596940265
fengb
fixes”

1596940285
fengb
Looks like someone double translated the English

1596940289
ronsor
yep

1596940292
mikdusan
yup double trans

1596940304
ronsor
`take a look at "coerce array pointer to reduce" {`

1596940306
ronsor
lol

1596940316
fengb
“Now now we grasp Zig as a incorrect compiler.”

1596940328
ronsor
not sure how they translated it

1596940333
ronsor
random code is translated too

1596940351
mikdusan
this is an excellent reference on how not to say anything: "This purpose will seemingly be thought to be deprecated by an legitimate occasion"

1596940396
ronsor
So that's how the suits manage to say so much and mean so little

1596941475
torque
one pudgy-time developer

1596941478
torque
this is rude

1596941535
andrewrk
hahaha

1596941585
andrewrk
"That is the finest pickle"

1596941614
ronsor
it's interesting because when I first saw the article, I didn't really read it and it seemed fine at first glance.

1596941624
ronsor
i thought it was just copied from the site

1596941629
ronsor
then I began to read

1596941632
torque
man this entire website is like this, bizarre

1596941724
andrewrk
"For that reason I determined to open the Zig Tool Foundation"

1596941731
ronsor
> Anandkumar is a frequent supporter of initiatives for the equitable medication of ladies.

1596941736
ronsor


1596941739
ronsor
it is weird

1596941793
andrewrk
"unblocking contributors from conducting their dreams"

1596941951
andrewrk
$ zig take a look at json_parse_struct.zig

1596941953
ronsor
RISC-V toughen in Zig is now improbable! We even grasp

1596941953
ronsor
riscv64 binary tarballs now on account of the Bootstrap Tarball.

1596941961
ronsor
all "test" has turned into "take a look at"

1596942010
andrewrk
I do like how "Let’s reboot programs programming" calls out the fact that "systems programming" is kinda redundant

1596942068
ronsor
ATM machine

1596942149
andrewrk
that's why I say "ATM achine"

1596942197
andrewrk
how about that stock photo of someone writing release notes onto a piece of paper with a pen? maybe I should try that next time

1596942295
andrewrk
might take a while. the 0.6.0 release notes are 94 pages printed

1596942327
ronsor
I wonder if the stock photo is stolen too

1596943746
andrewrk
ifreund, i'm solving a similar problem as you in DWARF with regards to a list of types. my plan right now is to duplicate all the dwarf type information for each Decl. e.g. if there is `fn foo() *i32 {...}` and `fn bar() *i32 {...}` then it will emit the dwarf type info for the `*i32` type once per Decl. this will allow updating them each independently

1596943824
andrewrk
however, something like `const T = struct {...};` is its own decl; in this case `fn foo() T {...}` and `fn bar() T {...}` could both point to the T Decl. In theory. This might require some improvements to stage2 to make it work

1596945389
pixelherodev
How good

1596945395
pixelherodev
Do we have numbers yet?

1596945406
pixelherodev
Curious whether it consistently beats, say, c_allocator

1596947824
andrewrk
it's bad

1596947853
andrewrk
next step is to establish some benchmarks and put them into ziglang/gotta-go-fast

1596949608
andrewrk
the debug mode (and testing) experience just got a huge upgrade though

1596949644
andrewrk
one neat thing is it even works in freestanding mode, if your freestanding project provides a page allocator

1596959041
aruniiird
Hey Ziguans, a newbie question,

1596959041
aruniiird
how will you reverse traverse a string, I tried something like

1596959042
aruniiird
var curNumIndex = num.len - 1;

1596959042
aruniiird
pub fn multiply_2(num: []const u8) void {

1596959042
aruniiird
while (curNumIndex >= 0) : (curNumIndex -= 1) {

1596959042
aruniiird
<do something here>

1596959043
aruniiird
}

1596959045
aruniiird
}

1596959047
aruniiird
I am getting an integer overflow,  as curNumIndex is an unsigned type.

1596959050
aruniiird
Any easier way to reverse traverse an array ?

1596959109
andrewrk
aruniiird, var i: usize = num.len; while (i > 0) : (i -= 1) { ... }

1596959133
andrewrk
oops. var i: usize = num.len; while (i > 0) { i -= 1; ...; }

1596959242
aruniiird
andrewrk: Thanks, trying it out...

1596959461
aruniiird
So we have to use `num[curNumIndex-1]` to access the array, right?

1596959543
aruniiird
Oh! sorry , now I got your difference in the second line...

1596962493
danyspin97
const Self = struct { ... };

1596962497
danyspin97
is this valid?

1596962534
danyspin97
I am trying to avoid the redundant @import("Struct.zig").Struct;

1596962691
ifreund
danyspin97: you files are structs, you can use toplevel fields

1596962711
ifreund
e.g.

1596962716
danyspin97
ifreund: yup, I am reading your source cod

1596962749
danyspin97
ah, I see

1596962760
danyspin97
but this way I can't add neither extern or packed

1596962797
ifreund
no, that's true

1596962833
ifreund
I have yet to use either in river though at least

1596962856
danyspin97
I see, thanks!

1596969061
cren
This isn't quite a Zig question, but I'm getting an error trying to create a receiving socket bound to localhost when I run the binary without root

1596969065
cren
as root it works

1596969076
cren
the error is "Access Denied"

1596969086
cren
should I be expecting this?

1596969302
andrewrk
cren, I believe you need root for lower port numbers but for higher port numbers (try a 5 digit number) it shouldn't need root

1596969368
cren
thanks andrewrk, that seems to work.

1596969852
lemmi
cren: for ports below 1024 you need at least CAP_NET_BIND_SERVICE (see man 7 capabilities)

1596970525
cren
lemmi: thanks

1596980370
ifreund
uh, if I want to get a [*] pointer to an arbitrary element in an array, is there a clean way to do it withoug @ptrCast()?

1596980395
pixelherodev
&array[index] ?

1596980402
pixelherodev
Ahh, right

1596980417
pixelherodev
array[index..end][0..].ptr?

1596980417
ifreund
that's just a * pointer not [*] yeah

1596980429
pixelherodev
Slice it first, then take the slice's ptr

1596980439
ifreund
why slice twice there

1596980447
ifreund
but yeah that's probably the way do to id

1596980462
ifreund
that sentence got away from me at the end :D

1596980556
ifreund
looks like what I really wanted was arr[i..(i + 5)]

1596980573
ifreund
which gives a *[5]u8

1596980662
pixelherodev
:)

1596981915
ifreund
andrewrk: RE stage2 type handling for DWARF/wasm, that sounds very reasonable to me, and is in line with what I've implemented so far

1596983177
ifreund
what's important imo is that each entry in the types section is tied to exactly one Decl, otherwise the lifetime management becomes far more complicated

1596986460
marler8997_
what does the new return address parameter to the allocator functions do?

1596987414
Sahnvour
marler8997_: it's used to save 2 stack levels in the gpa when collecting allocation stacktraces

1596987491
Sahnvour


1596992441
danyspin97
is `# define SCHED_BATCH 5` correctly handled by @cImport?

1596992459
marler8997_
Sahnvour, thanks

1596992653
leeward
danyspin97: It should be.

1596992673
danyspin97
leeward: it isn't though

1596992681
leeward
Because of the space?

1596992693
danyspin97
I think so

1596992720
danyspin97
this include is guarded by #ifdef __USE_GNU, but I have used @cDefine("__USE_GNU", {})

1596992739
danyspin97
i am using @cImport("sched.h") on Linux

1596992828
leeward
Maybe try a minimal test case, and if it's the space report a bug?

1596993074
oats
are packed unions still borked, or am I thinking of something else?

1596993091
danyspin97
leeward: how though?

1596993124
danyspin97
I am trying but no luck importing a custom file

1596993254
danyspin97
sometime I forget that zig do not compile what isn't used

1596993428
danyspin97
nope, `# define` works

1596995876
leeward
Must be the __USE_GNU isn't making it in?

1596996559
oats
can one write down tuple types yet?

1596996571
oats
like `struct { u16, bool }`

1596997262
ronsor
shameless hack: const MyType = @TypeOf(.{ @as(u16, 0), false });

1596997282
oats
dirty, I love it

1596997284
oats
thanks <3

1596997316
oats
also, why don't packed unions support enum tag types?

1596997764
fengb
Need a packed enum

1596997772
fengb
Or extern enum?

1596997778
fengb
Enums, like structs, don't have well defined memory

1596997813
fengb
ronsor: the typeof hack doesn't actually work. It takes quite a bit more effort to make a real type, unfortunately

1596997909
fengb
Zig converts that into a `struct { 0, false }` — comptime known values so the struct itself is 0 sized

1596997994
oats


1596998001
oats
I was trying to do something like this

1596998026
oats
I can't apparently just do `packed union(packed enum(u16))...` either

1596998108
fengb
tagged unions can't be packed

1596998113
fengb
What are you trying to do?

1596998115
oats
was kinda hoping I could make this super packed so I can go directly from some bytes to this nice data structure :P

1596998122
oats
I'm doing the synacor VM challenge thing

1596998143
fengb
It'll take manual effort if you want to pack everything

1596998194
danyspin97
leeward: __USE_GNU shouldn't be used, I used _GNU_SOURCE and it workid

1596998196
danyspin97
worked*

1596998838
oats
wooooooooo general purpose allocator \o/

1596998841
oats
congrats everyone

1596998845
oats
but mostly andrew I think :P

1596999252
ronsor
wait we have that now?

1596999283
leeward
\o/

1597000539
oats
ooh, the starship shell prompt thingy also shows you what zig version you're using :D

1597000576
oats


1597001205
pixelherodev
Neat

1597005076
xackus
has there been any proposal to allow error set subtraction?

1597005113
xackus
I can't find one

1597005289
andrewrk
xackus, switches operate as error set subtraction if you capture the value in the else. I think there's a proposal to allow error set types to represent a group of errors in a prong. that would provide subtraction on a value

1597005338
xackus
I guess I just encountered a bug where it didn't work

1597005392
andrewrk
I'm not aware of any such bug

1597005399
xackus
andrewrk but it would still be useful for functions with explicit error sets

1597005411
andrewrk
yeah I think it's worth proposing

1597005449
xackus
would be handy with copy_file_range to remove error.SystemOutdated from error set and use fallback

1597005566
andrewrk
that really should work, we do it in a bunch of other places. can I see the code snippet?

1597005666
andrewrk
in my opinion error.SystemOutdated should not be in any of the write/copy_file_range/read error sets in the first place

1597005705
xackus
you mean implementing fallback in syscall wrapper?

1597005737
andrewrk
yes in os.zig

1597005757
andrewrk
we already have the fallback code right? all we need is the real code path to be attempted first

1597005786
xackus
yeah fallback just uses pread, pwrite

1597005847
xackus
but then you will attempt and get ENOSYS every time in the loop in copyRangeAll

1597005849
andrewrk
yes we have an established pattern for os.zig eliminating some error codes by doing fallback implementations

1597006002
andrewrk
2 things on that. (1) utilize the target os version range to make some of the logic comptime instead of runtime where possible. (2) as for wasted syscall getting ENOSYS, write a TODO comment and link to

1597006012
andrewrk
I can elaborate more on (1)

1597006130
xackus
andrewrk thanks, i will restructure the code, write some tests, and copy_file_range should be ready

1597006169
xackus
and make the proposal

1597006226
ifreund
ugh, how do I ensure that freeDecl() cannot fail if I want to maintain a free list and need to allocate to do so

1597006284
ifreund
I could just ensure that the free list always has enough capacity to hold all the things that could be free'd, but that seems wasteful

1597006423
andrewrk
ifreund, I solved it by making the freelist heuristics based only. so if it doesn't make it onto the free list, it's fine, it just means possibly less efficient allocation

1597006448
andrewrk
because there's always the fallback of adding the new thing to the end, right?

1597006482
andrewrk
we really are solving the exact same problem over and over again

1597006540
ifreund
well if it doesn't make it into the free list it's essentially leaked no?

1597006565
ifreund
It wouldn't break anything, just lead to more bloat in the binary

1597006594
andrewrk
the way I did it, a free list entry does not point to empty space. it points to objects that have extra capacity. here read this:

1597006640
andrewrk
point being here that the free list is denormalized data, meaning you could delete the free list and re-create it based on scanning over the text blocks if you needed to

1597006654
ifreund
I see

1597006663
andrewrk
which means that failure to add items to it is not really a problem

1597006685
ifreund
Yeah that doesn't map too well to my current implementation unfortunately

1597006706
ifreund
wasm is a bit less flexible it seems, which makes things awkward

1597006763
ifreund
I guess I could also just maintain a ArrayList(bool) or equivalent

1597006778
andrewrk
are you sure? as long as you can put padding after an object, it should be possible to model it this way

1597006794
ifreund
I can't pad the types no

1597006833
andrewrk
can't you put a bunch of unused types in the list?

1597006941
andrewrk
also in case this wasn't clear: we don't absolutely need to have incremental compilation for every architecture. if you just wanted to make the wasm one simpler and write everything in a final pass at the end, that would be an improvement over status quo. however if you're interested in the challenge, that's great and I'm happy to help

1597006986
pixelherodev
We should probably have an `option` for whether we should use incremental compilation

1597007021
andrewrk
options shmoptions

1597007167
andrewrk
that option would not precisely communicate the user's intent

1597008043
ifreund
sorry, a friend called. Yeah having a bunch of unused types is fine, but they all have to be in a single list with no padding

1597008100
andrewrk
isn't unused types padding?

1597008130
andrewrk
they take up space in the wasm file, and you can overwrite them with something else

1597008141
ifreund
not really, as you can't add new ones to the middle without shifting the indexes

1597008185
andrewrk
does an unused type take up an index?

1597008193
ifreund
so you just have a bunch of dead types, and keep track of which entries are dead so you can overwrite them and reuse the index

1597008196
ifreund
yes it does

1597008233
andrewrk
I see, so the problem is overwriting bytes both has a byte alignment problem and an index alignment problem

1597008275
ifreund
yeah, you have to search for a "dead" type of exactly the size you want or otherwise append to the list

1597008321
ifreund
I think I'll just waste some memory for the free list for now, it's hard to review without the context of the rest of the code I think

1597008369
andrewrk
if you had a way to represent dead types with different byte sizes it would help a lot. because then you could turn multiple large dead types into an alive one, followed by small dead types to take up the same number of indexes

1597008419
ifreund
that's true, there's a lot of room for optimizations like that here

1597008420
andrewrk
essentially you need the ability to waste bytes without wasting indexes. if you have that, you have solved the problem

1597008447
andrewrk
it's a fun puzzle :)

1597008466
ifreund
the way I've structured things stuff like that should be easy to implement without leaking all over the code

1597008475
andrewrk
nice

1597008770
xackus
andrewrk should i check for unknown flags in fallback code?

1597008795
ifreund
and yeah I realize that we may not

1597008816
ifreund
I've never done any work on a compiler before :D

1597008915
xackus
sendfile fallback doesn't check flags

1597009892
pixelherodev
Woot, got parameters working in the C backend

1597009911
pixelherodev
`exit(0);` translates now :)

1597009997
pixelherodev


1597010000
pixelherodev
Also made it a bit easier to debug

1597010081
ifreund
nice!

1597011139
pixelherodev
how would I find argument

1597011164
pixelherodev
I

1597011226
pixelherodev
The Value.Function just has the Module.Fn, which itself just has the instructions + Decl reference

1597011305
ifreund
don't think the memory taken by storing argument names in a Decl directly would be worth it

1597011343
pixelherodev
Where

1597011417
ifreund
maybe have a look at astgen?

1597011446
ifreund
that's probably when they get stored, and you could look where they go

1597011975
pixelherodev
Good call

1597012033
pixelherodev
I don't think they

1597012205
ifreund
that could very well be the case

1597012254
ifreund
if so, I'd just to arg1, arg2 etc. and leave proper names for a followup PR

1597012260
pixelherodev
Yeah

1597012343
ifreund
anyhow, I'm off to bed. Got super basic functions implemented, just need to implement exports then I can see if any of this stuff actually works :D

1597012426
pixelherodev
Night :)

1597012870
pixelherodev
Almost...

1597012981
pixelherodev
Works!

1597013705
pixelherodev


1597013763
pixelherodev
Hmm, that asm support seems to be a GCCism (Clang doesn't support it)

1597013766
pixelherodev
That'll require more work

1597013844
Kingsquee
is there a way of finding what version of glibc zig is using?

1597013853
pixelherodev
You can target any glibc version you want

1597013859
pixelherodev
(terms and conditions apply)

1597013868
pixelherodev
There's a limit to how far back you can go

1597013888
Kingsquee
that'd be a setter flag, which I'd also like to know

1597013894
Kingsquee
but what about a getter

1597013904
pixelherodev
? What do you mean?

1597013907
pixelherodev
What do you want to "get"?

1597013909
pixelherodev
The default?

1597013922
Kingsquee
zig build, build.zig says use libc, I want to know what version of libc it's using

1597013936
pixelherodev
There's no specific version there, that's based on target IIRC

1597013949
pixelherodev
e.g. `native-linux` uses musl by default, not glibc

1597013959
Kingsquee
that's..odd

1597013961
pixelherodev
`native-linux-glibc` would use the default glibc, presumably

1597013969
pixelherodev
Nah, glibc doesn't support static linking

1597013976
pixelherodev
musl is the only option there

1597013991
pixelherodev
`native-linux` builds by default produce fully static binaries

1597014018
pixelherodev
Pretty sure I have the same behavior on glibc systems, but I

1597014048
Kingsquee
okay, so if I'm on x86_64 linux, and I just run zig build with standardTargetOptions specified in build.zig, the target should be "x86_64-linux-musl"?

1597014088
pixelherodev
I

1597014101
pixelherodev
I use musl systems 99% of the time, so I don't really remember what the behavior is on glibc systems TBH

1597014105
Kingsquee
because my project uses gl and x11, and when I actually pass `-Dtarget="x86_64-linux-musl", I get X11.h not found

1597014120
Kingsquee
I also get the same for passing x86_64-linux-gnu

1597014128
pixelherodev
How are you linking X11?

1597014137
Kingsquee
linkSystemLibrary("x11");

1597014152
pixelherodev
I don't have X11.h anywhere in /usr/include

1597014166
pixelherodev
Are you sure your code is right?

1597014199
pixelherodev
`test -z $(find /usr/include -name X11.h) && echo Not found` outputs `Not found`

1597014205
Kingsquee
when I don't pass -Dtarget it works fine

1597014215
pixelherodev
Maybe I just don't have the header installed

1597014218
Kingsquee
so I am assuming my code is right

1597014227
pixelherodev
Ah, right

1597014234
pixelherodev
linkSystemLibrary doesn't really make sense for cross-compilation IIRC

1597014247
pixelherodev
So with any explicit target, they aren't actually linked (?) Not sure

1597014258
Snektron
I think i'm gonna make a binding generator for spir-v. This should be significantly easier than vulkan as its registy is a standard json file

1597014302
Kingsquee
how would you deal with that then

1597014358
Kingsquee
afaikt it doesn't make sense that x11 and gl would be statically linked

1597014371
Kingsquee
so all it needs is the header files

1597014388
Kingsquee
(if my understanding of os shenanigans is correct)

1597014572
Kingsquee
if it finds the header in one case what's wrong with find it in another

1597014595
Kingsquee
in any case, still not seeing how to find the glibc version

1597014926
Kingsquee
pixelherodev: how do you target whatever libc version you want?

1597015008
Kingsquee
asking because I'm trying to solve some symbol errors that llvm dudes say would only come up if the libc version is ancient

1597017303
pixelherodev
Kingsquee: I think it's part of the target?

1597017312
pixelherodev
e.g. -gnu-VERSION ?

1597017319
pixelherodev
Best way to check is to read the source

