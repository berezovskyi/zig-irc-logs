1596414125
companion_cube
ifreund: wut, ok, so weird. So there will be a physical machine with this ISA at some point

1596414136
companion_cube
(in, maybe, 10 instances? :D)

1596414352
pixelherodev
companion_cube: there's already one ;P

1596414360
alexnask[m]
companion_cube:

1596414386
daurnimator
5.8 kernel is out. anyone want to do the honours?

1596414466
pixelherodev
... of what?

1596414472
pixelherodev
... installing one?

1596414568
daurnimator


1596414586
daurnimator
looks like I missed 5.7 too :(

1596416504
companion_cube
oh wait, it was on showtime?

1596416711
companion_cube
I see, assembler in zig

1596416714
companion_cube
funny :D

1596416721
companion_cube
bootstrapping down to the metal, heh

1596417347
andrewrk
"<no .debug_str section" ??

1596417368
andrewrk
what do you call this then:   [ 9] .debug_str        PROGBITS         0000000000000000  000001dc

1596417571
pixelherodev
andrewrk: fake?

1596417593
pixelherodev
Maybe it wants Cyrillic letters!

1596417763
pixelherodev
andrewrk: I split out the short-term-usable parts of the ELF PR  into #5976

1596417779
pixelherodev
Going to redo from scratch the 16-bit support tomorrow

1596417817
pixelherodev
I closed the original one for now

1596417850
pixelherodev
also, holy

1596417861
companion_cube
I wonder why spu mark 2 has its own ISA and not risc-v, though

1596417868
pixelherodev
5 hours*

1596417876
pixelherodev
companion_cube: because SPU Mark II

1596417877
pixelherodev
:P

1596417884
pixelherodev
You mean the computer (Ashet)?

1596417888
companion_cube
yes

1596417894
pixelherodev
The two aren't really comparable

1596417897
companion_cube
(I mean, I can imagine it's super fun to do)

1596417904
pixelherodev
The ISAs are very different

1596417908
pixelherodev
Very,

1596417913
pixelherodev
RISC-V wouldn't be usable for this

1596417936
pixelherodev
RISC-V is a register machine, SPU II is a stack machine

1596417943
pixelherodev
RISC-V has

1596417949
pixelherodev
(with rv32i base at least)

1596417963
pixelherodev
it's also 32-bit vs 16-bit, among other differences

1596417995
pixelherodev
andrewrk: jokes on you, oldest one is #5972 now :)

1596418020
companion_cube
32 registers? pfiu

1596418036
pixelherodev
SPU II has zero [GPRs].

1596418043
companion_cube
so do you mean it's not doable to do a risc-v board as a hobbyist?

1596418051
pixelherodev
It is, but it's a completely different system

1596418060
pixelherodev
You might as well ask "Why use RISC-V instead of the z80?"

1596418063
pixelherodev
They're both ISAs

1596418071
pixelherodev
That's their greatest commonality :P

1596418124
companion_cube
hmm ok ok

1596418142
companion_cube
(well, I only know of risc-v because it's a modern ISA, and it's open, I guess)

1596418186
pixelherodev
snerk

1596418430
companion_cube
I need to finish the talk though

1596418435
companion_cube
to know what's the point :p

1596419704
andrewrk
nice, the debug info is crashing gdb

1596419728
andrewrk
dare I... gdb gdb

1596419830
leeward
Seems like the thing to do.

1596419852
pixelherodev
But then you'll have to pow(gdb, 3) !

1596419858
andrewrk
yo dawg i heard u liked debugging

1596419883
pixelherodev
haha

1596419883
gruebite
hahaha

1596419887
pixelherodev
hahahaha

1596420124
companion_cube
well damn :D

1596420211
shachaf
rr apparently has a ptrace emulation feature that lets it trace a program that uses ptrace, by emulating its ptrace calls.

1596420231
shachaf
(Since a program can only have one tracer.)

1596420231
andrewrk
computing at its finest

1596420508
andrewrk
??? readelf: Warning: file index 0 > number of files 1

1596420515
andrewrk
last I checked 0 < 1

1596420544
mikdusan


1596420614
andrewrk
good thinking

1596420686
ronsor
is it possible to async call a function pointer?

1596420708
andrewrk
ronsor,

1596420747
ronsor
crap I just read that the other day too

1596420748
ronsor
my bad

1596420774
mikdusan
hmmm macos has `dwarfdump --verify`

1596420835
mikdusan
and there's also `llvm-dwarfdump --verify`

1596420956
gruebite
perhaps you need to check again

1596421125
andrewrk
llvm-dwarfdump --verify found something

1596421193
andrewrk
ok that wasn't the main issue though, and now llvm-dwarfdump --verify gives clean output

1596422348
gruebite
vulkan or vulkan_intel has too many memory leaks

1596422376
gruebite
they should have used zig

1596423447
andrewrk
hmm llvm-dwarfdump says the line number data is fine. I suspect this is gdb and readelf not supporting DWARFv5 yet

1596423770
andrewrk


1596428152
pixelherodev
Whoops

1596428179
pixelherodev
andrewrk: fixed the PR

1596428192
pixelherodev
Looking at the commit which I `drop`ed, I see what I was doing wrong

1596428598
pixelherodev
Huh

1596428604
pixelherodev
I think the CSS for the post is actually fine

1596428618
pixelherodev
It's Jekyll extending the size of the main area because of a large code block which I didn't manually wrap :P

1596428717
andrewrk
gdb you're killing me

1596428752
andrewrk
I thought for sure gdb 8.3.1 would support DWARF v5 (3 years old)

1596428762
pixelherodev
"I did not hit [that unreachable]! I did not! It's bullshit! Oh, hi gdb."

1596428778
andrewrk
ha

1596428928
andrewrk
ughhh I think I have to downgrade to dwarf v4

1596429022
pixelherodev
Oof, really?

1596429026
pixelherodev
That makes no sense...

1596429043
pixelherodev
I vaguely recall seeing DWARF 5 structures in my freestanding code when I was figuring out how to get the panic handler working

1596429052
pixelherodev
andrewrk: you know what we need to do if GDB doesn't support it, right?

1596429078
pixelherodev
std.debug.ChildProcess time!

1596429082
pixelherodev
/s

1596429090
andrewrk
I don't get it

1596429101
mikdusan
huh. if gdb doesn't support it do you have lldb avail to try?

1596429102
pixelherodev
RiiZ :P

1596429113
pixelherodev
Add a GDB replacement to std.debug ;)

1596429119
andrewrk
mikdusan, yeah I just tried v10, didn't seem to recognize the info either

1596429125
andrewrk
mikdusan, you want to play with the branch?

1596429134
pixelherodev
Link me an ELF?

1596429137
pixelherodev
I'll test it out

1596429166
daurnimator
andrewrk: while vaguely on this topic; did you have any opinion on how we should support other debug formats? (like ORC)

1596429194
mikdusan
i'm kinda restricted to macos (all VM tech on macos 10.15.6 has fatal mem leak) until 10.15.7

1596429220
andrewrk
ah yeah I haven't attempted macho yet

1596429247
andrewrk
pixelherodev, curl

1596429258
pixelherodev
lol nice

1596429267
andrewrk
test.zig is

1596429271
pixelherodev
`[1]    31100 invalid system call  file test`

1596429277
pixelherodev
I keep forgetting that `file` is brokend

1596429308
pixelherodev
andrewrk: what should I see?

1596429311
pixelherodev
Seems fine to me

1596429315
pixelherodev
`break _start` works, for instance

1596429337
andrewrk
you should see full source and line info

1596429345
andrewrk
you should be able to step over each line

1596429346
pixelherodev
You don't though, right?

1596429362
pixelherodev
Hmm

1596429367
andrewrk
right and `info sources` shows nothing

1596429370
pixelherodev
If I curl test.zig next to exectable, it works fine

1596429375
andrewrk
orly

1596429379
pixelherodev
Yeah

1596429385
pixelherodev
info sources shows /home/noam/test{,.zig}

1596429386
andrewrk
what gdb version

1596429403
pixelherodev
9.2

1596429408
andrewrk
there's the answer

1596429412
pixelherodev
What are you on?

1596429422
andrewrk
8.3.1

1596429423
pixelherodev
8.c?

1596429425
pixelherodev
x*

1596429427
pixelherodev
Yeah

1596429429
pixelherodev
That's probably it

1596429439
mikdusan
8.dwarfless

1596429440
pixelherodev
Can you upgrade?

1596429456
andrewrk
doesn't matter. 8.3.1 is a comman version of gdb to be installed on people's systems

1596429461
pixelherodev
... wrong question, yeah

1596429470
pixelherodev
So we should support both 4 and 5 for now, right?

1596429477
pixelherodev
Keep 5 support, default to 4

1596429492
andrewrk
I don't see any reason to support more than one format

1596429505
pixelherodev
Is there any eral differene between the two?

1596429508
pixelherodev
real*

1596429511
andrewrk
not really so far

1596429517
pixelherodev
Then I agree, yeah

1596429522
pixelherodev
No point in supporting two nearly identical formats

1596429538
andrewrk
damn I didn't even get to see my own code working correctly

1596429539
pixelherodev
There's got to be

1596429544
pixelherodev
I can screenshot?

1596429561
mikdusan
I would think dwarf version 2 and higher supported version spec... and gdb 8.3.x would at least check for supported dwarf version instead of just core'ing out

1596429594
andrewrk
the incremental compilation dwarf thing is working so far :D just gotta add a bit more code for updating functions

1596429601
pixelherodev
andrewrk:

1596429623
mikdusan
haha the money shot

1596429641
andrewrk
what about stepping tho

1596429652
pixelherodev
Didn't try

1596429672
pixelherodev
`Single stepping until exit from function _start, which has no line number information`

1596429678
pixelherodev
Then exits :P

1596429680
andrewrk
fail

1596429695
pixelherodev
`info line` -> no line number info available

1596429698
pixelherodev
(at the breakpoint)

1596429736
andrewrk
that's a load of B.S.

1596429786
pixelherodev
Don't curse the messenger

1596429790
pixelherodev
:P

1596429799
andrewrk
anyway, down to dwarf 4 then I guess

1596429803
pixelherodev
`list` works though

1596429805
pixelherodev
which is weird

1596429814
pixelherodev
Well, it starts at line 1

1596429817
pixelherodev
might just be default

1596429861
pixelherodev
Hmm

1596429890
pixelherodev
Doesn't show up in `info files`

1596429894
pixelherodev
The section doesn't, i mean

1596429900
pixelherodev
Though none of the debug ones do I think

1596429936
pixelherodev
I get the same output from `llvm-dwarfdump` tho

1596430073
mikdusan
fwiw: post re dwarf 5 support in gcc/gdb:

1596430200
andrewrk
well here's the branch if anyone wants to play with it.

1596430210
pixelherodev
Night

1596434464
ronsor
thanks to the power of zig, I now have a working task scheduler

1596434979
Kingsquee


1596434985
Kingsquee
can't nest functions?

1596435081
daurnimator
Kingsquee: need to wrap in a struct for now

1596435120
daurnimator
Kingsquee: `struct {fn nested() i32 { ..... }}.nested`

1596435499
Kingsquee
aiieee, thanks

1596436527
shakesoda
Kingsquee: my understanding is that issue 1717 (functions as expressions) will let you do that naturally

1596436531
shakesoda
whenever we get that in the future

1596440576
andrewrk
gdb, notice me senpai

1596440588
ikskuh
heyo

1596440748
andrewrk
"...which has no line number information." yes it does :'-(

1596440779
shachaf
Is DWARF 5 not backward compatible?

1596440792
andrewrk
I tried v4 now too

1596440798
andrewrk
bout to try 2

1596440846
shachaf
Looking at the gdb source code it talks about DWARF-5 a bunch.

1596440869
andrewrk


1596440872
andrewrk
makes no sense to me

1596440891
andrewrk
readelf --debug-dump=decodedline also tells me it's good

1596441057
shachaf
Does it work with lldb?

1596441165
andrewrk
no

1596441200
andrewrk
maybe it wants DW_AT_ranges

1596441745
andrewrk
nope that wasn't it.

1596442798
alexnask[m]
Incremental DWARF is so sick :)

1596444525
andrewrk
ok looks like gdb doesn't like my extended opcode trick. it's a shame, arguably it's gdb doing it wrong

1596444589
andrewrk
that's OK I still have the 2-byte NOP {DW_LNS_negate_stmt, DW_LNS_negate_stmt} trick left. it's just unfortunate because it means the padding bytes have to actually be written to the file which costs perf, and there's the annoying thing that they have to be in sets of 2 or else the stmt register gets incorrectly inverted

1596444627
andrewrk
I should file an issue asking for DWARFv6 to have a DW_LNS_jmp

1596447042
Snektron
What about 16 byte nop

1596448752
gruebite
can i have variable number of struct members at comptime? :P like say `fn Foo(comptime nmembers: i32) type { return struct { fn foo1, fn foo2 } }`

1596448893
ikskuh
no, that's not possible atm

1596448936
gruebite
anything akin to attributes when going through an anytype?

1596449228
ikskuh
nope

1596449234
ikskuh
but you can pass tags

1596449239
ikskuh
manually created tags

1596449267
ikskuh
struct { pub const tags = .{ .format = .{ .a = "{d}", }; a: f32, b: i32 };

1596449277
ikskuh
could be used to tag "a" with a "format" tag

1596449291
gruebite
nice

1596449310
gruebite
more or less a trick by using a special field

1596449337
gruebite
i like it :p

1596449354
alexnask[m]
Closest you can get to generating a struct at comptime currently is using the Tuple trick (

1596449405
alexnask[m]
(you could store the generated tuple + a list of "field names" in a struct and make a getter + some init function that takes an anonymous struct literal with the correct field names)

1596449512
gruebite
nice, i'll take a look at this

1596449514
gruebite
thanks

1596449710
alexnask[m]
I will make a small StructType(fields...) to make this easier actually

1596449731
alexnask[m]
Ive seen a couple of people that want @Type(.Struct) recently and this is the closest you can get so there ought to be some easy way to do it even if it relies on pretty... interesting, hacky things :P

1596450302
ikskuh
i still wonder if it's a good idea to forbid @Type(.Struct)

1596450333
alexnask[m]
Its still not ruled out

1596450343
alexnask[m]
But yeah I would argue its better than the abomination Im about to write

1596450361
alexnask[m]
As long as you cant generate functions in the @Type(.Struct) scope

1596450400
ikskuh
yeah, exactly

1596450425
ikskuh
people are already hacking around that restriction

1596450429
ikskuh
you, me, others

1596450855
ikskuh
if you are allowed to add symbols to a namespace (instead of just creating struct fields), you can also add functions

1596450961
alexnask[m]
Well, the way the TypeInfo structs are made you couldnt actually reify a function even if you could reify other decls (which personally I think would be fine)

1596450980
ikskuh
why that?

1596450994
ikskuh
i could make a function taking `anytype` :D

1596451010
alexnask[m]
The FnDecl doesnt include the function code

1596451019
alexnask[m]
Only the signature, calling convention etc

1596451045
ikskuh
you can make it a FnPtr though ;)

1596451049
alexnask[m]
Even if it did you couldnt make a function that takes Self because Self doesnt exist yet (even if we had @specialize)

1596451051
ikskuh
const fnptr

1596451063
alexnask[m]
True

1596451068
ikskuh
alexnask[m]: yeah, i'm aware of that

1596451101
alexnask[m]
ikskuh: When I wrote TypeInfo I actually wanted to make it in a way that would support this (foolishly) but I never came up with an elegant design

1596451130
ikskuh
heh

1596451137
ikskuh
i think it's good that it's not possible :D

1596451154
ikskuh
even if we could make a beautiful interface API with that in userspace

1596451252
forgot-password
I have a semi-zig-related question regarding macos: When I build an executable the compiler says that it cannot find the libc headers. From "cc -E -Wp,-v -xc /dev/null" I can see that the include directory with the libc headers is missing in the list. The question is how can i tell it to look there? Last week it worked fine and I don't know what I did to fuck it up :/

1596451292
forgot-password
Same thing when I compile a simple c-file which includes libc.h with clang. Somehow I removed (xcrun --show-sdk-path)/usr/include from its global include paths.

1596451417
alexnask[m]
Hmm anonymous struct literals dont seem to have len

1596451418
alexnask[m]
T_T

1596451505
alexnask[m]
I can meta.fields.len though

1596452347
alexnask[m]
Behold:

1596452365
alexnask[m]
(StructType simple implementation, could be improved with default fields etc)

1596452442
ikskuh
the hell :D

1596452445
ikskuh
nice work!

1596452459
ifreund
ok, that's pretty funky

1596452570
ifreund
alexnask[m]: I think you sould link that in the issue for @Type(.struct)

1596452578
alexnask[m]
Just did ;)

1596452585
ifreund
nice

1596452640
ikskuh
crazy :D

1596452654
ikskuh
zig userland is just so overpowered :D

1596452670
alexnask[m]
That Tuple hack unlocks a bunch of things

1596452683
ikskuh
"But does your language have feature X?" - "No, but we have lib-X that implements that in userland"

1596452686
alexnask[m]
Its the only way to take some iterable of types and make some runtime storage out of it afaict

1596452730
ikskuh
why is the second parameter of StructType2 a anytype?

1596452734
ikskuh
can't that be a []type ?

1596452785
alexnask[m]
Yeah it could be []type, just left it anytype for flexibility :shrugs: Although I guess with this logic I could have made the names anytype too

1596452928
alexnask[m]
Someone should use this in a big zig library so that we can strongarm @Type(.Struct) in /s

1596461738
danyspin97
can I call a custom command in build.zig?

1596461787
danyspin97
like running a shell script

1596461800
andrewrk
gdb gonna fix their code for us

1596461814
danyspin97
found, builder.exec

1596461885
ikskuh
danyspin97: You probably want toi use addSystemCommand ;)

1596462147
danyspin97
hmm, not sure

1596462173
ikskuh
what do you need the command for?

1596462175
ikskuh
as a build step?

1596462185
ikskuh
like "pregenerate some files" or "package my output"?

1596462191
danyspin97
adding a capability to an executable

1596462200
danyspin97
after building it

1596462236
ikskuh
yeah, then addSystemCommand is probably the right thing to do

1596462248
ikskuh
it has access to the cache-itnernal paths

1596462250
andrewrk
good news: I came up with an even better way than the 2-byte NOP thing, which involves skipping an arbitrary number of bytes by taking advantage of Extended Opcode User-Defined which encodes the length of the operation and expects consumers to ignore operations they don't support. So you can put any number here, and skip forward, over padding bytes, avoiding the need to write NOPs to disk.

1596462255
andrewrk
Bad news: even though it's handled correctly in most places - binutils readelf, llvm-dwarfdump, zig's own stack trace code - it's not handled correctly by GDB, which silently ignores the .debug_line data when it sees a user-defined extended opcode.

1596462268
andrewrk
Good news: They're gonna fix it for us

1596462277
ikskuh
andrewrk: neeeead

1596462278
andrewrk
Bad news: A version of GDB with the fix won't be widespread for years

1596462280
ikskuh
*neat!

1596462303
daurnimator
andrewrk: that's cool; zig code will be widespread by then too ;)

1596462330
ikskuh
danyspin97: const cmd = b.addSystemCommand(&[_][]const u8 { "cmd", "arg0", "arg1" });

1596462336
ikskuh
cmd.addArtifactArg(my_exe);

1596462341
ikskuh
cmd.addArg("another-arg");

1596462509
ikskuh
andrewrk: I've read your comment on pixelherodevs PR for std.ihex

1596462528
ikskuh
i think you're right, i could rewrite that to use a push-oriented parser instead of callbacks

1596462546
daurnimator
ikskuh: push? should be pull.

1596462561
ikskuh
daurnimator: push data in, pull a single event back

1596462565
danyspin97
ikskuh: i'll try that

1596462567
danyspin97
thank you

1596462614
ikskuh
i've made a parser based on that mode

1596462639
ikskuh
you tell the parser to parse X bytes, and the parser tells you that it used Y bytes of that data

1596462809
daurnimator
ikskuh: IMO the best pattern should be: `while(true) { try source.read(somebuffer.freespace()); p.feed(somebuffer.availabledata()); while(try p.next()) |thing| { ...... } }`

1596462842
daurnimator
where that read+feed may be encapsulated in the `.next()` method

1596462865
ikskuh
daurnimator: that may need allocation though

1596462883
daurnimator
ikskuh: `somebuffer` there would be something like a `std.LinearFifo`

1596462887
ikskuh
because you may need to store up to X things that will be returned by p.next()

1596462912
ikskuh
ah

1596462914
ikskuh
hm

1596462915
daurnimator
for LinearFifo you can: s/freespace/writableSlicw/ s/availabledata/readableSlice/

1596462945
daurnimator
and note that LinearFifo has 3 modes for backing storage: static buffer; slice you pass; or it can do dynamic allocations

1596463199
ikskuh
daurnimator: would you mind setting up a nice usage example for that? maybe we can even use the ihex parser as a example

1596463213
ikskuh
i'm also happy to help here

1596463232
ikskuh
because i think it would be nice to share some good ways of implementing stuff like parsers and such in a zero-alloc way

1596463251
ikskuh
i

1596463881
daurnimator
it becomes a lot easier with an iterator<>async protocol

1596463887
daurnimator
I'll have a quick go though

1596464055
daurnimator
okay yeah without an iterator<>async thing you essentially have to write out the state machine explicitly

1596465113
andrewrk
Snektron, how would you make a 16 byte nop?

1596465677
daurnimator
is there a form of `try ` that you can call when you

1596465701
daurnimator
`catch unreachable` is unwrapping an error union you know is not an error. but what is the inverse?

1596465715
companion_cube
try foo; unreachable ?

1596465790
daurnimator
companion_cube: I need it as an expression of type `noreturn`

1596465818
daurnimator
`x orelse return someerrorunion_that_I_know_is_error`

1596465846
alexnask[m]
Not very elegant but: `blk: { try foo; break :blk unreachable; }` perhaps?

1596465847
daurnimator
I guess `x orelse return try ....`

1596465907
companion_cube
daurnimator: good point

1596467162
daurnimator
ikskuh:

1596467185
daurnimator
sorry for the async<>iterator hackery.... I didn't feel like rewriting it

1596467249
Snektron
andrewrk: you can stack the REP prefix any number of times

1596467385
Snektron
Or one of the other prefixes

1596467398
Snektron
`data16 data16 data16 data16 data16 nopw cs:[eax+eax*1+512]` should be 16 bytes

1596467530
Snektron
Turns out its a CPU feature whether a stack of data16 can be efficiently decoded

1596467754
ifreund
wasm is a lot simpler, I can just pad any expression with as many 1 byte nop instructions as I want

1596467885
Snektron
oh you can do that on x86

1596467896
Snektron
but then you have exactly that: n single-byte nop instructions

1596467907
Snektron
which takes up to n cycles

1596467921
Snektron
These long nops actually only take a single cycle

1596467929
ikskuh
daurnimator: not sure if i like it that way

1596467932
Snektron
So you can do nothing, but more fficiently

1596467946
daurnimator
ikskuh: is that because of the iterator thing? >.<

1596467958
ifreund
Snektron: ah, I see

1596467963
ifreund
that is pretty neat

1596467969
ikskuh
daurnimator: yeah

1596467972
Snektron
its mainly for alignment purposes of code

1596467973
daurnimator
also I realised it can be a little terser by putting the `resume frame` in the loop continuation: `while (item) |result| : (resume frame) {`

1596468003
daurnimator
ikskuh: with an actual state machine you wouldn't need it

1596468040
ikskuh
the problem i see with this code is that it's blocking

1596468054
daurnimator
ikskuh: what is?

1596468055
ikskuh
i cannot parse half an entry and continue with whatever i was doing

1596468062
ikskuh
the usage is blocking

1596468070
daurnimator
can't you?

1596468121
ikskuh
well, the code right now is definitly blocking

1596468148
ikskuh
so reading a single byte ':', then receiving a single byte 'F' will block the outer scope until another character is available in the stream

1596468170
ikskuh
the idea with FiFo is more elegant imho

1596468186
ikskuh
because i can

1596468199
daurnimator
You can though.... just don't resume until you want more

1596468231
ikskuh
the point is: maybe i don't know when i

1596468236
ikskuh
but i want to react to when i

1596468285
ikskuh
imagine you have a really slow and sloppy connection to some end point

1596468291
daurnimator
I don't think that's a good idea

1596468298
daurnimator
you shouldn't be able to force your downstream to consume you

1596468341
ikskuh
hm?

1596468392
daurnimator
the consumer should be the one that causes forward progress.

1596468411
ikskuh
so?

1596468439
ikskuh
the parser should still be tolerant against incomplete data being fed into it

1596468443
ikskuh
and not block then

1596468453
daurnimator
yes.

1596468453
ikskuh
until enough data is there

1596468457
daurnimator
yes.

1596468462
ikskuh
the ihex example right now does this though

1596468468
ikskuh
which is my main critique

1596468478
daurnimator
not if you give it an async stream

1596468490
ikskuh
then i have async code which is imho not always desirable

1596468496
daurnimator
why?

1596468498
ikskuh
it should be possible, but i for myself won't be using a lot of async

1596468507
ikskuh
because i find it harder to read and reason about

1596468517
ikskuh
it also

1596468526
ikskuh
which is something i usually don't have

1596468527
daurnimator
not at all.

1596468562
ikskuh
comment on which? event loop or readabiltiy?

1596468580
daurnimator
no need for an event loop

1596468591
daurnimator
zig async/await doesn't imply or require an event loop

1596468592
ikskuh
how do i use async then?

1596468605
daurnimator
async just means "start a function and don't wait for it to finish"

1596468636
ikskuh
it still makes code a lot more complex without bringing much benefit in most cases (imho)

1596468654
daurnimator
not really IMO

1596468665
daurnimator
we just don't have the syntactic sugar for it

1596468674
ikskuh
i'm thinking about how to implement async/await

1596468676
ikskuh
from scratch

1596468684
ikskuh
but i struggle to get all corner cases right

1596468690
ikskuh
"having a plan to resume" isn't a trivial job

1596468705
ikskuh
and having code

1596468709
ikskuh
especially for non-I/O code

1596468809
daurnimator
there is no depedence on non-blocking IO beyond what the stream you pass in expects

1596468875
ikskuh
and that's my problem :D

1596468888
ikskuh
what if i don'T have a stream available that is async?

1596468933
ikskuh
the code would

1596469168
ikskuh
i don't see how it should work without requiring a async i/o reader

1596475139
ronsor
Does @asyncCall() happen to create a new stack?

1596478277
andrewrk
Snektron, this is a DWARF line number program nop

1596478283
andrewrk
not x86 :)

1596478292
andrewrk
anyway gdb has the fix now:

1596478305
andrewrk
all we gotta do is wait 2 years until it is widely available everywhere ;)

1596478327
alexnask[m]
Quick fix though, nice

1596478352
pixelherodev
lol

1596478357
pixelherodev
Maybe it'll get backported?

1596478370
pixelherodev
... that was stupid of me, sorry.

1596478374
pixelherodev
I know better than that

1596478457
pixelherodev
That was really impressively fast though

1596478459
pixelherodev
Kudos to them

1596479129
pixelherodev
andrewrk: I think it's your turn again :)

1596479579
Snektron
andrewrk: oh, my bad

1596480513
pixelherodev
Hmm

1596480539
pixelherodev
Is it possible to have standalone DWARF info?

1596480541
pixelherodev
Without ELF?

1596480868
Sahnvour
I think mingw can do dwarf

1596480904
pixelherodev
hmm

1596480927
pixelherodev
"Independent of object file formats"

1596480948
Sahnvour
that I don't know :)

1596480951
pixelherodev
It is :)

1596480954
pixelherodev
I just checked

1596480976
pixelherodev
andrewrk: idea: we should build DWARF info in self-hosted *independent of the linker target*, and the ELF backend should embed that info as part of flush()

1596481016
pixelherodev
This would allow, for instance, flushing that info to its own file when we're not targeting ELF

1596481411
Sahnvour
what would be the usecase ? only target one debug info format and use it on all platforms from zig ?

1596481563
andrewrk
this idea would not do incremental compilation, so it's a non-starter

1596481600
pixelherodev
andrewrk: Why wouldn't it?

1596481614
pixelherodev
File.updateDecl would handle it before routing downwards

1596481631
pixelherodev
Sahnvour: yeah, basically

1596481651
pixelherodev
The entire idea is incrementally compiled debug info independent of object format

1596481762
Sahnvour
you'd still need "native" debug format to use platform's tools though, for example PDBs on windows

1596481912
andrewrk
yeah. better to integrate with the target's tooling conventions

1596482302
pixelherodev
So what I'm hearing is

1596482312
pixelherodev
"Convince Microsoft to use DWARF and then your idea is valid?"

1596482317
pixelherodev
s/?"/"?

1596483507
Sahnvour
that'd be a mean way to put it haha, but people expect their native dev tools to work especially since stage1 complied with them

1596483645
pixelherodev
;P

1596486574
gruebite
is it fooUint or fooUInt?

1596486787
ifreund
gruebite: the former afaik

1596486812
ifreund
you'd definitely do foo_uint over foo_u_int

1596486834
alexnask[m]
I think Cygwin gdb uses dwarf :p

1596486862
ifreund
I reall hope #1097 gets accepted though, I'm really not a fan of camelCase function names

1596487002
gruebite
it's a method :P

1596487015
gruebite
makeUint or makeUInt

1596487087
ifreund
yeah, so makeUint() is what I'd say

1596490588
pixelherodev
The awesomest thing ever is being able to use a git repo on a personal server :D

1596490704
torque
psh, cool kids use git repos stored in a different folder on the same machine

1596490764
ifreund
branches? never heard of em. I just make more clones :P

1596490812
pixelherodev
ifreund: I'm working branchless rn actually ;)

1596490855
leeward
Well crap. Looks like I'm in the market for a new laptop.

1596490867
ifreund
well if you only work on one thing at a time, you don't reall need branches

1596490894
ifreund
s/reall/really

1596490923
pixelherodev
Branches are just references are just commit IDs

1596490931
pixelherodev
ifreund: I refactor frequently at this point

1596490937
pixelherodev
Largely because Zig has ingrained that habit in me TBH

1596490941
mikdusan
git worktree ftw

1596490978
ifreund
yes branches are just labels for commits

1596490989
shakesoda
branches are a lot more of a headache if you don't work on one thing at a time

1596490993
ifreund
I find this useful to organize work on mulitple things

1596491005
shakesoda
i am vastly too scatterbrained for that lol

1596491021
shakesoda
so usually i only make branches after the fact in order to submit prs

1596492858
pixelherodev


1596492876
pixelherodev
To avoid GNU extensions in a Makefile, we literally wrote a Python file to generate a Makefile heh

1596492887
pixelherodev
The worst part is this is now the second-best build system I've used, after ZBS

1596492907
pixelherodev
a 100 line python file beats out almost everything else I've used. I don't know how to feel about that.

1596493132
companion_cube
if you generate something, why not generate ninja, then? :D

1596493218
pixelherodev
Because we already did this

1596493223
pixelherodev
And we were

1596493228
pixelherodev
and it didn't occur until afterwards

1596493233
pixelherodev
and we're not wasting more time on it

1596493239
companion_cube
:D fair enough

1596493259
ifreund
pixelherodev: pretty sure -march=native implies -mtune=native

1596493327
pixelherodev
ifreund: technically, it should, yes.

1596493335
pixelherodev
I use it explicitly anyways, just from habit

1596493345
pixelherodev
Didn't you see the help description for it?

1596493353
ifreund
yes :P

1596493357
pixelherodev
`--pixel           Enable additional development flags because you're pixelherodev and you make bad life choices`

1596493359
pixelherodev
:P

