1585785905
fengb
How hard is compiler_rt? Just port over the LLVM code?

1585786262
mikdusan
andrewrk: diff and basic notes for qemu static:

1585786323
mikdusan
the diff is just a cherry pick and rebase from alpine's port of qemu (currently at 4.2.0)

1585787639
Kingsquee
rise again, lovecraftian crash messages

1585787666
Kingsquee
rust would not have ye, but zig shall be thy vessel

1585787694
Kingsquee
if but till the moon rises

1585788567
pixelherodev
Kingsquee, what?

1585789274
Kingsquee
pixelherodev:

1585789343
Kingsquee


1585789789
mikdusan
it's unfortunate the naming pattern `pointer` and `pointee` is just asking for trouble if applied to `slice` and `slicee`

1585790215
fengb
Slicer?

1585790437
mikdusan
that makes sense but I'll still end up with a slice/slicer/slicee and it's the slice/slicee existing in same block/context that's eww

1585790472
Kingsquee
fengb: slice/slicer => pointer/pointerer?

1585790488
mikdusan
slice/cheese

1585790495
Kingsquee
:thinkign:

1585790538
mikdusan
sliceable

1585790562
mikdusan
or maybe just the target; bah

1585791487
Kingsquee
target sounds nice for both

1585791519
fengb
target / targee

1585791798
Kingsquee
time to write the zig docs in lojban

1585791999
Kingsquee
so, is there a way to generate a prettier error than this?

1585792032
andrewrk
fengb, yes exactly, just port over the llvm code

1585792100
andrewrk
mikdusan, nice work. if I host this on ziglang.org want to try hooking it up in the CI on a branch and merging TheLemonMan's "moar simd" PR into it? (or feel free to hand off the task, of course)

1585792118
Kingsquee
some condition I can use to typecheck for Qi and generate a @compileError if it's not

1585792420
andrewrk
mikdusan,

1585794136
mikdusan
andrewrk: yes I'll try that but first against my local archlinux VM and then CI

1585794678
mikdusan
LemonBoy comment in #4737 says linux failed due to qemu and the log shows a qemu-x86_64 execution... and I can see the test, but how can I tell on my re-run if it is a qemu test? is the "behavior-x86_64-..." vs. "behavior-native-..." indicate qemu?

1585794898
andrewrk
mikdusan, the -Denable-qemu should do it

1585794944
andrewrk
if you pass that to `zig build` then you should see all the architectures from

1585794961
andrewrk
at least the musl and no-libc ones (the glibc ones require additional setup that takes a long time to obtain)

1585794987
mikdusan
ok I think there is progress; with new qemu, #4737 rebased to master, local VM:

1585794990
mikdusan
behavior.vector.test "behavior-aarch64-linux-none-Debug-bare-multi vector shift operators"...expected 1, found 8388607

1585795018
mikdusan
I'll prep a CI change and PR soon

1585795325
andrewrk
nice!

1585795351
andrewrk
the great thing about that is that we now have a process to upgrade to newer qemus quickly

1585795378
mikdusan
yeah and qemu dropped into my VM just fine too so that helps

1585797328
mikdusan
andrewrk: #4905 is already merged

1585797401
mikdusan
err hell I'm confused. #4905 is based'd off latest master, plus #4737, plus CI change to qemu. what else needs to be merged?

1585797544
andrewrk
mikdusan, oh I was suggesting to do it

1585797570
mikdusan
ah ok

1585797593
andrewrk
then the ball is back in TheLemonMan's court

1585797848
mikdusan
ok so I'll close #4905 and the PR with ci bump to static-qemu5 is already open #4906

1585798129
andrewrk
great work

1585798969
fengb
Egads, these C macros make everything so hard to read :(

1585799561
andrewrk
you might benefit from poking around zig's compiler-rt sources, some of those macros might have already been factored into some common helper functions in zig

1585799658
fengb
I've never seen spaghettified code like this before >_>

1585799684
fengb
I guess I have but it's been buried for awhile

1585799686
andrewrk
mikdusan, looks like it's working great!

1585799728
mikdusan
i can't believe that qemu tar.xz is only 28 MB

1585800011
andrewrk
qemu is incredible

1585801461
mikdusan
we can slice an array, slice a (pointer to an array), slice a slice, but how about slice a (pointer to a slice) ?

1585801682
andrewrk
all the other ones have 1 indirection. a pointer to a slice has 2

1585801805
fengb
`void __atomic_store_c(int size, void *dest, void *src, int model)` the order comes in as a runtime argument. Should I manually unroll that into comptime args?

1585802123
andrewrk
it looks like __atomic_store_c is actually the __atomic_store symbol. so the ABI is important here

1585802164
andrewrk
the model comes in as a runtime arg

1585802207
andrewrk
I see what you mean about macro spaghetti

1585802376
fengb
Yeah I pasted the easier to unwind piece :P

1585802424
fengb
The Zig side requires a comptime order. I guess for more explicit maintenance, we should manually map the values over huh?

1585802612
andrewrk
not sure if I understand, but generally to get from runtime to comptime you have to switch over the value and then each prong can use the comptime value

1585802823
fengb
Right, I just mean manually switch each number instead of relying on @intToEnum

1585802873
andrewrk
hm if you're asking whether the zig enums are ABI-compatible with the compiler-rt values I think the answer is no

1585802888
andrewrk
so yeah I think the switch will be the best bet

1585802892
fengb
This Zig code looks so much better than macros though :P

1585802896
andrewrk
:)

1585802933
andrewrk
in theory the optimizer would figure out if a switch was just mapping numbers to the same numbers and turn into a no-op

1585802945
fengb
Ah good point

1585803334
boothby
so I patched the //!(eof) and ///(eof) to emit doc tokens which won't be terminated in newlines.  if that threw an error instead, it wouldn't be a special case for people building doc tools.  thoughts?

1585803682
fengb
Alright, I'm calling it for now. Have a good night!

1585803690
andrewrk
night

1585811601
junon
andrewrk: are you around by any chance?

1585816978
pixelherodev
Using `errdefer` to reset state makes things so much easier

1585819449
daurnimator
junon: he usually goes to sleep ~3 hours before you asked. usually back in ~5 hours from now

1585819468
junon
cool, thanks daurnimator :)

1585823889
junon
Trying to make a fix in the standard library but `zig test` is behaving oddly. Built master zig and installed it system-wide, then running `zig test lib/std/unicode.zig` gives me a plethora of errors (that don't normally exist when using the standard library).

1585823892
junon
Am I doing something wrong?

1585823924
daurnimator
junon: you shouldn't need to install to test

1585823936
daurnimator
just run directly from your git clone

1585823958
junon
running `build/zig test lib/std/unicode.zig` causes a permission error since `zig-cache` isn't generated.

1585823969
junon
(where `build/` has the cmake compilation within it)

1585823974
daurnimator
permission error? are you on windows by chance?

1585823977
junon
amcos

1585823979
junon
maocs*

1585823983
junon
my goodness

1585823984
junon
macos*

1585823989
daurnimator
what is the permission error?

1585824008
junon
`Unable to check cache: zig-cache/h: access denied`

1585824018
daurnimator
why doesn't zig-cache exist?

1585824028
daurnimator
it should get created as required.

1585824041
junon
So if I run using the system installed `zig`, it generates it when I run `zig test`

1585824056
junon
If I remove `zig-cache` and then run using `build/zig test` instead, it doesn't generate it at all.

1585824080
junon
There's a bug somewhere, just not sure where or why - I thought that `build/zig` was the same executable that was installed system-wide.

1585824084
daurnimator
that's odd....

1585824087
daurnimator
yeah it is

1585824106
daurnimator
can you try and run under `dtruss` and see for any weirdness?

1585824109
junon
Yeah just confirmed with `shasum`, they're the same.

1585824157
junon
o-o this is weirder

1585824168
junon
running with dtruss gives me the same output as running it with the system installed zig

1585824183
junon
performs the analysis and attempts a build, etc.

1585824636
junon
oh the difference is elevated permissions daurnimator

1585824649
junon
if I run `build/zig test` under sudo it works fine.

1585824657
junon
(not that I want to do this long-term...)

1585824694
junon
does `zig` get the sticky bit or something on macos?

1585824741
daurnimator
nope

1585824938
daurnimator
maybe some new apple mechanism?

1585824973
daurnimator
maybe your home dir mounted noexec?

1585825219
junon
daurnimator: the code isn't in my home directory

1585825244
junon
I have a /src/<github_user>/<repo_name> layout - never been an issue before.

1585827978
pixelherodev
If I need to call a Zig function from JITed code, I need to `export` the function and use the platform's native C ABI?

1585828094
ikskuh
you don't have to export it

1585828097
ikskuh
just make it callconv(.C)

1585828114
pixelherodev
Ah right

1585828115
pixelherodev
Thanks!

1585829270
daurnimator
(or any other calling convention you care to use)

1585829882
ikskuh
dermetfan: just looked at the source of your directory includer

1585829905
ikskuh
you can make that 100% allocation-free with just a bunch of string compares

1585831263
pixelherodev
It works!!!

1585831303
pixelherodev
I implemented a variadic function for generating function calls

1585831321
pixelherodev
And based on argument type, it'll assign it a class and then register / stack space as per the x64 ABI

1585831366
pixelherodev
`block.call(ebus.reset, self.parent.ebus); block.ret(); block.run();` JITs the equivalent of `self.parent.ebus.reset();` :D

1585831963
mikdusan
junon: it is likely that because you have run zig as root, it create files/dirs with root permissions; now zig running as user will never be reliable until a cleanup is done. that cleanup involes nuking local and global caches, and anything else created by root

1585832025
junon
mikdusan: that's not the issue; removing zig-cache entirely and running unprivileged results in the same error.

1585832056
mikdusan
clarify: this also includes removing global cache ?

1585832133
pixelherodev
Maybe do an `strace`?

1585832819
mikdusan
junon: running on catalina?

1585832838
junon
mikdusan: there's a global cache?

1585832862
junon
and no, mojave

1585832865
mikdusan
~/"Library/Application Support/zig"

1585833075
dermetfan
ikskuh: i should benchmark the difference in performance then. this suggests compares would be even faster:

1585833217
fengb
Best to measure and possibly inspect the assembly output

1585833256
fengb
I had to do some rain dances to convince LLVM to optimize if/else chains into a jump table

1585833566
pixelherodev
daurnimator, thanks for the fifo support :D

1585833618
daurnimator
pixelherodev: hmm?

1585833727
pixelherodev
in std

1585833730
pixelherodev
std.fifo?

1585833731
dermetfan
i'm not yet an assembly wizard, could just implement both and let the user choose

1585833735
pixelherodev
that was you, right?

1585833809
daurnimator
pixelherodev: yes it was

1585833817
daurnimator
pixelherodev: but why the sudden appriciation?

1585833922
pixelherodev
Well, I appreciated it earlier already, but I'm using it for part of a dynarec and it's making life a lot easier

1585833989
fengb
dermetfan: don’t need to be an expert. Godbolt is your friend :)

1585834079
daurnimator
pixelherodev: cool :) there's some parts of its API that aren't obvious

1585834108
daurnimator
e.g. that you read/write from a network or file buffer then you can use readv/writev for optimal syscalls

1585834108
junon
mikdusan: yep, that was it - for some reason, had root perms

1585834121
junon
why is there a global cache? :( that seems like bad design

1585834180
junon
yep fixed it right up

1585834237
mikdusan
👍

1585834536
dermetfan
fengb: looks interesting, thanks!

1585834612
pixelherodev
daurnimator, interesting; care to elaborate?

1585837712
ikskuh
andrewrk: should a non-pub function in a pub strut be callable from another file?

1585838268
ikskuh
f.get() // works

1585838268
ikskuh
F.get(f) // doesn't work (get is private)

1585838363
ifreund
yeah that kinda threw me too when I discovered it

1585838972
pixelherodev
How would I cast from `[42 * 4]u8` to `[42]u32`?

1585838978
pixelherodev
Using `mmap`

1585839010
pixelherodev
to allocate a register file (because it has to be in the lower 32-bit of the address space)

1585839050
ifreund
uh, can you @ptrCast()

1585839074
ikskuh
pixelherodev: @bitCast

1585839101
pixelherodev
ifreund, slices != pointers; I tried that :P

1585839103
pixelherodev
ikskuh, thanks!

1585839121
ikskuh
oh wait

1585839122
ikskuh
that's a slice

1585839124
ikskuh
:scream:

1585839127
ikskuh
pointercast then

1585839182
pixelherodev
...

1585839186
pixelherodev
neither one works :(

1585839215
pixelherodev
"Expected pointer, found [42]u32`

1585839218
ikskuh
or use sliceToBytes and bytesToSlice :D

1585839234
ikskuh
it's arrays, not slices

1585839239
ikskuh
so go bitcasting

1585839281
pixelherodev
oh right, that's an array :P

1585839302
pixelherodev
Unable to bitcast from pointer type

1585839304
pixelherodev
gahh

1585839395
mikdusan
pointer? you said 2 arrays

1585839429
ikskuh
this is getting confusing

1585839457
pixelherodev
From mmap-ed memory (slice) to array

1585839503
pixelherodev
`mmaped.ptr`

1585839508
ikskuh
having comptime known indices?

1585839525
ikskuh
mmaped[0..42*4] => [42*4]u8

1585839546
pixelherodev
I have a `[42*4]u8`

1585839550
pixelherodev
I want a `[42]u32`

1585839559
ikskuh
this should be bitcastable

1585839563
pixelherodev
The raw slice?

1585839568
ikskuh
there is no slice

1585839573
ikskuh
these are arrays

1585839583
ikskuh
if you have pointers to them, then use ptrCast

1585839586
pixelherodev
... gahhhh

1585839596
pixelherodev
Sorry, tired

1585839630
pixelherodev
Ah wait

1585839636
pixelherodev
I have a `[]u8` with len 42*4

1585839639
pixelherodev
Not a `[42*4]u8`

1585839651
ikskuh
then use known-size slicing

1585839654
ikskuh
=> yields array

1585839658
ikskuh
then use bitcast :D

1585839709
pixelherodev
`mmaped[0..4*42]` gives a pointer-to-array? :confusion:

1585839730
pixelherodev
./src/dynarec/emitter.zig:20:98: error: unable to @bitCast from pointer type '*align(4096) [168]u8'

1585839736
ikskuh
ah yeah

1585839738
ikskuh
now only dereference

1585839745
ikskuh
and yes, this is new behaviour and it's daaaamn useful :D

1585839753
pixelherodev
I can just ptrCast

1585839791
ikskuh
yep

1585839795
ikskuh
cast all the things!

1585839796
pixelherodev
Thanks!

1585839822
pixelherodev
Had to change the type of the field to `*align(4096)[48]u32` but it's good now

1585839838
pixelherodev
I didn't realize that `[0..]` and `[0..known_len]` gave different types

1585839886
ikskuh
it's not that long ago

1585839958
ikskuh


1585840103
ikskuh
mikdusan: added the slicing thing to

1585840229
mikdusan
oh could you put that at top of March? top is more recent

1585840254
ikskuh
okay

1585840286
ikskuh
btw, thanks for doing this list :)

1585840297
ikskuh
i'll try to keep an eye out and update that as well

1585841419
pixelherodev
Found the single best use for errdefer

1585841435
ikskuh
oh

1585841436
pixelherodev
It's the first line in my main() function

1585841439
ikskuh
i'm scared now :D

1585841443
pixelherodev
Want to guess?

1585841453
ikskuh
nah, i prepare for running away screaming

1585841456
pixelherodev
`errdefer std.debug.warn("\x1b[31m", .{})`

1585841476
pixelherodev
The nice thing is, the stack trace logic

1585841489
pixelherodev
So you have red-colored `error: the_error` then a normal stack traace

1585841493
pixelherodev
s/aa/a

1585841537
pixelherodev


1585841585
ikskuh
i cannot understand how you can work on CRT

1585841598
ikskuh
better use a real one than this thing

1585841611
pixelherodev
Because I honestly don't like any of the available options

1585841617
pixelherodev
and CRT with all options disabled is sufficient

1585841637
pixelherodev
It's barely distinguishable from e.g. lxterminal

1585841645
ikskuh
hm. i use termite

1585841652
ikskuh
it just does nothing ^^

1585841670
ikskuh
it has "some" features, but afaik less then xterm and is even more usable

1585841738
pixelherodev
Only reason I don't use a TTY is the inability to take a screenshot

1585841746
pixelherodev
and that's only a problem because I can't remember what tool can do that

1585841767
pixelherodev
There's a way to snapshot the framebuffer but I only ever remember it when I'm away from my computer :P

1585841786
pixelherodev
Anyways

1585841796
pixelherodev
the point of the picture wasn't my terminal :(

1585841842
ikskuh
:D

1585841869
ikskuh
but i cannot see a red "error: something"

1585841872
ikskuh
but another message that is red

1585841923
pixelherodev
Oh whoops that was before I made the change

1585841949
pixelherodev


1585841958
pixelherodev
I have waaaay too many screenshots polluting ~

1585841975
ikskuh
use a script that does auto-uploading

1585841978
ikskuh
and hashing

1585841979
ikskuh
and deleton

1585841987
ikskuh
→ clean environment and quick links

1585842007
pixelherodev
Or just `rm ~/*png`

1585842017
ikskuh
that would delete way too many stuff :D

1585842068
pixelherodev
for i in ~/*.png;do eom $i; read; if [[ $REPLY == y ]];then rm $i -f;fi;done

1585842223
pixelherodev
and done

1585842229
pixelherodev
that wasn't too bad

1585842276
pixelherodev
Unrelated: pretty proud of this one

1585842361
pixelherodev
The full thing runs in single-digit milliseconds and I can trace all of what it's doing and honestly say that there's not much room for optimization

1585842908
fengb
So ultra-fast debug build time?

1585843282
companion_cube
what's that profiling tool?

1585843300
pixelherodev
KCacheGrind

1585843307
companion_cube
pretty cool!

1585843309
pixelherodev
It's a frontend for CallGrind files

1585843319
pixelherodev
I don't use KDE, but I still love it

1585843362
pixelherodev
The alternative I've used is a small shell script that integrated with a GNU perf tool to generate a PNG

1585843365
pixelherodev
Which was good

1585843370
pixelherodev
But this is

1585843622
TheLemonMan
the new gnome sysprof is also nice

1585843950
andrewrk
I've never tried gnome sysprof, I'll have to give it a spin

1585843987
pixelherodev
Link?

1585844000
pixelherodev
I found a page from 05

1585845028
TheLemonMan
I wonder how much time we could shave if the docgen steps were executed in parallel

1585845108
andrewrk
that's all in zig code too

1585845121
andrewrk
might be worth implementing a little something even before async I/O is stable

1585845129
andrewrk
same with compile errors

1585845205
pixelherodev
fengb, super fast, yes; however it still depends on the frontend speed

1585845220
pixelherodev
Currently, waiting for Zig to emit LLVM IR takes most of the time

1585845234
pixelherodev
Well, it would if not for the cache

1585845874
TheLemonMan
andrewrk, isn't #938 a prerequisite for that?

1585845959
andrewrk
TheLemonMan, that would be a prerequisite for the async I/O route (which is where I want to get to eventually). But it's possible today to implement a simple thread pool and run (blocking) child processes in separate threads

1585846009
andrewrk
it's such a shame too, the drone ci box has an insane number of cores and we only use 1 at a time

1585846093
andrewrk
I've been focusing on climbing the "global maximum" (e.g. work on async I/O) rather than the "local maximum" (implement some thread pool thing for now to speed up test runs). but it is tempting

1585846369
TheLemonMan
compile-error takes ~3min, docgen ~5min

1585846407
pixelherodev
Isn't it better to have short-term speed to make long-term gains easier?

1585846907
FireFox317
TheLemonMan, time to debug another bug with me?

1585846915
TheLemonMan
FireFox317, sure thing!

1585847199
FireFox317
behavior tests are passing, std tests not yet. Its hitting an udf in `hash_const_val`, but i can't reproduce it with a test case and also putting a breakpoint on there doesn't work because its called so often. backtrace:

1585847341
FireFox317
did figure out the source_instr -> /home/pi/zig-source/lib/std/fmt.zig:182:35

1585847346
TheLemonMan
hmm, line 5341 is empty for me

1585847403
TheLemonMan
get a disasm so we can see why it's getting to the udf

1585847481
andrewrk
are these udf's coming from building with zig cc in debug mode so that -fsanitize=undefined is enabled?

1585847502
FireFox317
yes i think so andrewrk

1585847506
andrewrk
neat

1585847518
FireFox317
well i'm pretty sure this one also crashed in release mode

1585847525
andrewrk
ah

1585847547
FireFox317
not sure tho XD

1585847581
andrewrk
well what was the -DCMAKE_BUILD_TYPE arg, if any?

1585847592
andrewrk
the bootstrap repo hard codes it to Release

1585847618
FireFox317
Yeah i changed it to Debug now, because i'm debugging and want a proper back trace :)

1585847694
andrewrk
yep so zig is passing -fsanitize=undefined to clang, unless you overrode that flag with -fno-sanitize=undefined

1585847742
andrewrk
it's likely you could reproduce this with zig built natively, passing -target to the std lib tests

1585847823
FireFox317
TheLemonMan, oh probably this binary wasn't compiled with master, but its pointing at the beginning of the function, because that is where the udf is. I can't break on the function to see where exactly it is jumping to there, because `hash_const_val` is called so often

1585847853
TheLemonMan
nice, get a disasm once you hit the udf

1585847869
TheLemonMan
if it's stuck at the beginning the input may be null/non-aligned garbage

1585847928
FireFox317
one moment, will build a zig binary of current bootstrap/master

1585849235
FireFox317
hmm andrewrk, build release now (unintentionally) and still hitting the sigill.

1585849269
andrewrk
hmm that is a mystery that I cannot explain

1585849766
FireFox317
TheLemonMan, i'm not able to see how it ends up at the udf, because i can't break on `hash_const_val` because it is called so often. How would you conditionally break on that one?

1585849797
TheLemonMan
uh, can't you just let it crash on the sigill and then get the backtrace?

1585849830
FireFox317
yes, but it is a backtrace of functions. not a backtrace of what happend in the function itself

1585849913
TheLemonMan
err, I meant disasm

1585850172
FireFox317
i can, but it won't be clear which branch actually jumped to udf, there are a lot of checks which could branch to the udf. disasm:

1585850240
FireFox317
that is why i need to break on the function so i follow which check actually jumps to the udf. but i'm not able to break on the function :)

1585850566
TheLemonMan
well you said the backtrace points to the function start, if the debug infos are correct it means you're not going past the zig_assert

1585850596
TheLemonMan
that narrows it down to only 4 possible branches

1585850697
TheLemonMan
you can try with `b hash_const_val if $r0 == 0`

1585851094
FireFox317
hmm yes it does point to the assert, but i have a feeling that it is just pointing there because it doesnt know. addr2line on the udf also returns the beginning of the function, but it could end up there from anywhere in the function

1585851383
TheLemonMan
right, debug infos are often untrustworthy, especially in release mode

1585851509
FireFox317
but its zig in debug mode, but i found a way to break on the function. will check which branch will jump to the udf

1585851562
TheLemonMan
I said _especially_, not only... the udf is introduced by llvm and so it has no mapping to the source file

1585851616
FireFox317
ah yes indeed, my bad

1585851860
FireFox317
TheLemonMan, okay its line 1252 in the disassembly that jumps to the udf. compiler_rt.__mulodi4 bug?

1585852115
TheLemonMan
you have an overflow there

1585852192
TheLemonMan
r0-r1 are a, r2-r3 are b and the overflow pointer is passed on stack

1585852369
TheLemonMan
the ZigTypeIdEnumLiteral case

1585852387
FireFox317
yes indeed, it should be doing a 32 bit multiplication there?

1585852395
FireFox317
but compiler rt is doing a 64 bit one

1585852505
FireFox317
TheLemonMan, maybe i have to put a (uint32_t) in front of the number?

1585852559
FireFox317
or the number should be smaller such that it is not a long?

1585852704
TheLemonMan
...how can a multiplication between two u32 overflow an u64?

1585853056
pixelherodev
Can't?

1585853083
pixelherodev
Quick calculation says that the highest 32-bit number squared is 8589934590 less than the highest 64-bit number

1585853119
pixelherodev
(pow(2,64)-1)-(pow((pow(2,32)-1,2))

1585853149
pixelherodev
(pow(2,64)-1)-(pow(pow(2,32)-1,2))

1585853174
TheLemonMan
oh wait, __mulodi does a signed multiplication

1585853178
ikskuh
(1<<32)^2 = 18446744073709551616

1585853179
ikskuh
to me

1585853189
TheLemonMan
adding a (uint32_t) should work

1585853259
TheLemonMan
FireFox317, there's another stray signed literal in ZigTypeIdOptional

1585853413
pixelherodev
ikskuh, if you shift a bit starting as bit 1 over 32 times it becomes bit 33

1585853418
FireFox317
TheLemonMan, whoop! nice find! we are making stage1 safer over time :)

1585853456
pixelherodev
you need to then subtract to get the highest 32-bit number

1585853457
FireFox317
now it's cristal clear to me why we need zig, c/c++ is not made for cross-compilation code basically

1585853481
TheLemonMan
we're hitting pretty much every kind of UB

1585853643
FireFox317
TheLemonMan, what about the xor's?

1585853670
TheLemonMan
you don't spill any bit with xor (nor or nor and nor not)

1585853780
fengb
Sometimes I find it amazing C even has a standard >_>

1585854477
pixelherodev
ikskuh, the highest two-bit number is three, (2^2-1); the highest 32-bit number is `(pow(2,32)-1)`, not `pow(2,32)`

1585854519
pixelherodev
` (1<<32)^2` doesn't give the highest result of a 32-bit mult; ((1<<32)-1)^2 does

1585854539
ikskuh
yes

1585854544
ikskuh
but doesn't change a thing ;)

1585854571
ikskuh
((1<<32)-1)^2 = 18 446 744 065 119 617 025

1585854586
ikskuh
it's the uupper 31 bit set and the lowest bit set

1585854648
pixelherodev
Actually, there's a very big difference

1585854666
pixelherodev
pow(pow(2,32),2) is the same 2^64 oh wait

1585854684
pixelherodev
I think we were both showing the same thing in two different ways :P

1585854694
ikskuh
haha :D

1585854700
ikskuh
well

1585854901
ikskuh
btw, recommendation for such stuff: use speedcrunch!

1585854902
FireFox317
andrewrk, how would i partially test the std? running all the tests at once needs to much ram for my raspberry

1585854907
ikskuh
very fine programmers calculator

1585854951
andrewrk
FireFox317, you can use a combination of `zig test file.zig` and `--test-filter foo`

1585854982
FireFox317
hmm yeah, but pretty cumborsome for all files xd

1585855041
andrewrk
FireFox317, in std.zig you can remove "refAllDecls()" and explicitly reference only the ones to test

1585855065
andrewrk
for example: `_ = ArrayList;`

1585855070
FireFox317
ah yes indeed, that would be easier i guess

1585856539
andrewrk
oh wow. multiply by an integer literal, invoke UB

1585856546
andrewrk
that's so easy to do on accident

1585856561
andrewrk


1585856615
fengb
Oh yuck

1585856768
FireFox317
jup, i'm still wondering why this was also caught in release mode

1585857032
TheLemonMan
integer promotion rules are tricky

1585857589
FireFox317
Finally! Passed all the behavior and std tests on the raspberry :) So happy!

1585857608
andrewrk
wow well done FireFox317 and TheLemonMan

1585857657
andrewrk
that really made the difference between having a v7a tarball for 0.6.0 or not having one

1585857690
andrewrk
I believe we can enable 32-bit arm on drone CI now too

1585858041
FireFox317
one last thing i want to know is why it is still emitting all the safety checks in release mode

1585858061
FireFox317
nvm i know why

1585858495
TheLemonMan
andrewrk, #4737 is green, llvm is still fucking up the "nonstandard-sized" vectors on many arches

1585858640
andrewrk
nice

1585858662
andrewrk
idk what llvm expects us to do, this is how they set up debug info to work

1585858767
FireFox317
andrewrk, it was my fault :) i still had a zig compiler on the aarch64 box that did not understand the -O3 flags yet, because i was so early using the bootstrap repo :)

1585858781
TheLemonMan
well they begged us not to generate those weird vector shapes

1585858803
andrewrk
I thought they said only to not store weird vector shapes in memory

1585858813
andrewrk
but that's the only way to do debug info

1585858913
FireFox317
wait, -O3 is a linker arg as well?

1585858915
TheLemonMan
the weirdness doesn't stop there, in #4737 there's something going wrong with the array->vector->array conversion

1585858947
TheLemonMan
and sometimes there are problems with such vectors being fn params

1585859611
andrewrk
TheLemonMan, why does llvm miscompile? it looks like your new test only uses power of 2 bit sizes

1585859631
TheLemonMan
the shifts are u5/u6 vectors

1585859638
andrewrk
oh I see it now

1585859654
andrewrk
wow you implemented a lot of SIMD ops

1585859683
andrewrk
can you add a runtime safety test for the new safety checks you added?

1585859739
andrewrk
(or let me know if you want a hand off)

1585859801
TheLemonMan
if writing some test cases tickles your fancy then go for it! I was wondering how to do that without having to write a new case for each runtime check

1585859930
TheLemonMan
and GH is down! time to log off then!

1585860024
andrewrk
why not a new test case for each runtime check? that's how it's done now

1585861195
andrewrk
a github page that was already open and had the information I wanted already displayed, just changed itself into a 500 error page

1585863479
yrashk
anybody aware of

1585863565
yrashk
"undefined behaviour is not allowed in ZZ"

1585863655
fengb
Hmm, it looks like it's trying to embed formal methods into an actual programming language?

1585863705
yrashk
something like that (using an SMT solver)

1585864549
pixelherodev
`a github page that was already open and had the information I wanted already displayed, just changed itself into a 500 error page` Just say NO to yavascript!

1585865490
via
can you have a struct with fields that are or are not there based on comptime values?

1585866959
shakesoda
pixelherodev: ah, twitter syndrome

1585867024
andrewrk
via, not really but you can have the field have a different type

1585867040
andrewrk
such as void

1585868781
andrewrk
I was able to build an i386-linux tarball with ziglang/bootstrap, check off 1 more tarball for the release

1585868942
Yardanico
maybe I should try Zig again now that

1585868976
Yardanico
ah nvm I can use "x86_64-linux-musl" which is OK

1585868993
andrewrk
see the note about musl vs glibc

1585869010
Yardanico
yeah I saw, just forgot that Zig uses musl by default (which is cool) :)

