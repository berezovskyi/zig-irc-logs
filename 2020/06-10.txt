1591750566
leeward
pixelherodev: the list of CVEs fixed in this kernel.

1591750666
leeward
CVE-2020-10732 CVE-2020-10751 CVE-2020-10757 CVE-2020-12114

1591750666
leeward
CVE-2020-12464 CVE-2020-12768 CVE-2020-12770 CVE-2020-13143

1591750670
leeward
whoopsie

1591750677
leeward
Apparently I'm bad at computer.

1591752360
THFKA4
are there any concrete plans for dynamic linking support yet?

1591752695
andrewrk
THFKA4, dynamic linking has worked since the first release of zig

1591752779
THFKA4
do you mean linkSystemLibrary() in build.zig?

1591752801
THFKA4
that allows you to link a C library by also cImporting its headers, right?

1591752846
THFKA4
how would i link against a shared lib written in Zig? how does the compiler enumerate the exposed symbols?

1591753580
daurnimator
THFKA4: you need to `export` the symbols you want.

1591753996
THFKA4
looking at the docs, @export makes symbols written in Zig available in non-Zig projects

1591754012
daurnimator
also export keyword

1591754022
THFKA4
it also generates a header file, that way other compilers know what the Zig library contains

1591754052
THFKA4
what is the "header file" when i'm going the other direction, when i'm trying to link against another Zig shared lib

1591754153
THFKA4
do i basically have to do this?

1591754154
pixelherodev
`extern`?

1591754164
pixelherodev
I mean

1591754171
pixelherodev
Maybe you could translate-c the generated .h lol

1591754194
THFKA4
right..hah

1591754243
THFKA4
extern seems like it would work, but that means specifying the signature for every method by hand

1591754469
THFKA4
anyway..the current workaround seems to be to use the generated .h. thanks everyone

1591788197
ask6155
Hello!

1591788269
ifreund
hi

1591788346
alexnask
o/

1591788357
ask6155
Someone said to me to have a growable array I need to use ArrayList, but I'm confused what an array list is. the documentation says its a function and it also has fields(??) and also an init and deinit function. How do I use it?

1591788468
ifreund
ask6155: It's a comptime function that returns a type, this is how generics are implemented in zig

1591788489
ifreund
var mylist = ArrayList(u32).init(allocator);

1591788497
ifreund
mylist.append(42);

1591788567
ask6155
huh, thanks!

1591788871
ask6155
and... what allocator to use?

1591788959
ask6155
std.heap.heapallocator?

1591788978
alexnask
Depends on what you are doing. For a general purpose allocator there is not a really good option except for std.heap.c_allocator rn but std.heap.page_allocator is good enough for testing

1591790479
ask6155
Hey what does expression value ignored mean?

1591790515
ask6155
./fac.zig:19:25: error: expression value is ignored array.append(i);

1591790525
bgiannan
append returns the added element

1591790530
bgiannan
you can't ignore the returned value

1591790540
bgiannan
or you have to write _ = array.append(i)

1591790564
bgiannan
well you can ignore it you just have to do it explicitely

1591790580
ask6155
but the declaratio says return !void

1591790676
ask6155
oh wait !void means it may return an error.

1591791160
alexnask
Yes append doesnt return the element, you are ignoring the error

1591791183
alexnask
You have to `try arr.append(...);` or `arr.append(...) catch |err| // Do stuff with the err`

1591791278
ask6155
ok

1591793230
ask6155
ok I've been trying to work with ArrayList but I guess I'm dumb and I am only getting errors. I have a const with points to std.heap.page_allocator and I pass that to ArrayList(i32).init(alloc) but I cannot append.

1591793444
ask6155
append says value is ignored and when I discard it, it says error is discarded.

1591794117
alexnask
ask6155, YOu have to handle the errors, either using try or catch. (`try expr;` is equivalent to `expr catch |err| return err;`)

1591794149
alexnask
You can't discard errors

1591795356
ask6155
what does span do?

1591795513
alexnask
It returns the items slice, its deprecated you should use .items directly instead

1591795544
alexnask
Not sure why it wasnt turned into a compile error, the other deprecated stuff is

1591795697
ifreund
i think that deprecated stuff sticks around for one release cycle before becoming a comipile error or something

1591795730
scientes
where is zig fmt's canonicalization?

1591795755
ask6155
well I want to convert my ArrayList to a list literal (because easier to pass?) which function would do that?

1591795764
scientes
oh nvm

1591795769
scientes
i was confusing format.zig and fmt.zig

1591795792
ifreund
mylist.items

1591795807
ifreund
which is a slice and what I assume you mean by "list literal"

1591795925
ask6155
After my work with a growable array I wanted to make it fixed size so I can pass to another function which would read it. (If there's a better way please suggest I'm from C land)

1591796018
alexnask
As ifreund said items is the slice (aka pointer + length), if you also want to transfer ownership you can call toOwnedSlice which will shrink the memory to exactly what is needed and return the slice (obviously then you have to manually free the slice)

1591796524
bgiannan
how do i append a string literal to a ArrayListSentineled(u8, 0) ?

1591796568
alexnask
.appendSlice

1591796650
bgiannan
ah thx i see it now

1591797417
ask6155
how do I take Cli input?

1591797551
ask6155
std.os.read?

1591797867
ask6155
is stdout defined?

1591797932
alexnask
std.io.getStdIn() will return stdin as a File

1591797958
alexnask
Same with stdout and stderr

1591797972
alexnask
(a std.fs.File, that is)

1591798038
ask6155
thanks I guess my first program is finally finished. It doesn't do much, just pukes out all the factors.

1591798045
ask6155
of a number

1591798736
bgiannan
How do i bufPrint into a ArrayList buffer? Before i was doing a std.fmt.format with a callback that counted how much bytes i needed so i could resize my Buffer and bufPrint into it

1591798751
bgiannan
but std.fmt.format has completely changed

1591798802
leeward
I think you can make a stream out of an ArrayList and .print to it.

1591798820
bgiannan
right, just saw ArrayList.outStream

1591800495
shakesoda
zls has substantially improved my zig experience

1591800556
scientes
shakesoda, what is zls?

1591800560
shakesoda
zig language server

1591800566
shakesoda


1591800632
bgiannan
so Buffer is gone and along with it toSliceConst. How do i make slice const now?

1591800903
alexnask
usingnamespace coming soon to a zls near you

1591800924
leeward
I'm not certain what you mean, but maybe mem.spanZ?

1591800965
leeward
Ah, yes. `pub const toSliceConst = @compileError("deprecated; use std.mem.spanZ");`

1591801135
bgiannan
seems to work thanks!

1591801142
leeward
\o/

1591808121
marler8997_
I'm having an issue with package-path, not sure if it is a bug or not

1591808145
marler8997_
In my http client project, I use package path to set the "ssl" package to either an openssl or nossl variation

1591808181
marler8997_
but now when I'm using that library in another project, even though I'm setting the "ssl" package, the modules in my http client project cannot find the "ssl" package

1591808189
marler8997_
is that as-designed?

1591809178
r4pr0n
is it planned to have an iterator interface in the stdlib with some abstract functions like there are in rust?

1591809240
fengb
So far, the pattern seems to be `var iter = create(); while(iter.next()) |val|`

1591809270
fengb
Since we don't have traits (yet), I'm not sure making anything more concrete is on the plate

1591809331
karchnu
fengb: traits?

1591809345
r4pr0n
yes, but if there is some kind of interface, you can get a lot of higher level functions just by implementing .next() and maybe .len()

1591809345
r4pr0n
it's not about the iterating over it

1591809357
fengb
Rust traits are concretely defined

1591809369
fengb
You can do that already with Zig and duck type generics

1591809373
r4pr0n
well there's a interface for allocators

1591809385
fengb
That's runtime based

1591809425
r4pr0n
hm yeah

1591809431
fengb
I suppose it's possible... but I wouldn't expect Zig to go that direction

1591809438
fengb
Our functional patterns are pretty limited

1591809443
karchnu
ack, sounds like abstracts in java

1591809450
fengb
No map/filter/reduce in stdlib

1591809476
leeward
Is there a plan to put traits in Zig?

1591809498
fengb


1591809504
ifreund
there are several proposals, and an already working implementation of trait-like interfaces

1591809520
fengb
We have adhoc traits atm, but it relies on pretty vague semantics

1591809529
companion_cube
btw, the talk of Wadler on "featherweight Go" is quite interesting

1591809538
companion_cube
(talking about traits/interfaces)

1591809545
companion_cube
(and generics!!1!)

1591809549
fengb
e.g. `fn format` is a trait. It just doesn't look like one

1591809591
fengb
So in a way, we already have traits... but it's just enough to confuse Rust users :P

1591809637
fengb
Maybe a better name for that is "comptime Go interface"? But that also has some imperfect connotations

1591809938
marler8997_
I've experimented with a range library (see reddit post:

1591809955
companion_cube
range, as in D?

1591809962
marler8997_
name comes from D

1591809964
fengb
lol zog

1591809968
marler8997_
:)

1591809986
fengb
Buckling the zag trend

1591810023
ifreund
ew, did anyone else get opted back in to the new reddit automatically?

1591810028
companion_cube
so, same concept, ok

1591810049
marler8997_
yeah pretty much

1591810086
fengb
I opted back to old reddit and it's sticking for me

1591815928
gonz_
I have a browser extension that forces old reddit

1591816069
alexnask
Is this necessary? You can just opt out of new reddit in your acc settings

1591816181
gonz_
I don't know, apparently it didn't take for ifreund. I don't remember when I added it, to be honest, or whether or not there was an option to opt out then either.

1591816920
JimRM
Hi all! I've got a question for you

1591816952
JimRM
I am playing with some code I found on GH, which hasn't been updated in a while. So I am guessing a lot of stuff has changed with zig. The part I am struggling with is this:

1591816953
JimRM
pub var mbox: [36]u32 align(16) = []u32{0}**36;

1591816962
JimRM
Any code which looks like:

1591816963
JimRM
mbox.mbox[7] = 0;

1591816967
JimRM
Fails to compile with:

1591816978
JimRM
error: array literal requires address-of operator to coerce to slice type '[]u32'

1591817011
JimRM
Can someone explain how the code should look now?

1591817350
fengb
`[]u32{0}**36` needs to be `[_]u32{0}**36`

1591817411
JimRM
Thanks! What does that do? Is it explained in the docs?

1591817556
JimRM
Does he `[_]` make it a slice?

1591817577
fengb
Nope, it was previously ambiguous parsing

1591817587
alexnask
No, this is array literal syntax `[N]T { init list }`, `_` just infers the number of elements

1591817602
fengb
`[_]u32{0}` creates an array of an implied size (equal to 1 here)

1591817614
JimRM
Ahhh!

1591817623
fengb
Previously we used `[]u32{0}` for the same construct, but it was confusing to both new users and the parser

1591817645
fengb
So the underscore was added `[_]`

1591817683
JimRM
So what was the compiler generating when it was `pub var mbox: [36]u32 align(16) = []u32{0}**36;`

1591817704
JimRM
I mean I could get it to compile if I commented out any array accesses.

1591817718
fengb
It should generate a syntax error since `[]u32{` is no longer correct

1591817723
fengb
Oh that's probably because Zig is lazy

1591817731
JimRM
Hm, yeah I was just about to say

1591817754
fengb
If a variable isn't referenced, it won't get compiled in. So only basic parsing runs without semantic analysis

1591817756
JimRM
It looks like commenting out that code was commenting out all uses of it

1591817773
fengb
Yeah, Zig is allowed to erase `const` references

1591817778
JimRM
Is there a way to enable "eager" compilation?

1591817828
JimRM
for example I may define a bunch of code that isn't used immeadiately, (say a bunch of consts from a hardware manual) I'd rather know I've messed something up now than in 6 months time when I come to use one for the first time

1591818875
leeward
JimRM: That's a common issue, and the best solution that you can use now is to refer to things in tests.

1591818918
leeward
I'm pretty sure there are proposals. Here's one example:

1591818950
leeward


1591819196
JimRM
Thanks for the info

1591819764
JimRM
So I have spent about 4 hours so far looking at Zig and I really like it so far. Reading the objdump output for AARCH64 is super nice too. It's pretty close to reading dumped C code (ie easy ;) )

1591819829
JimRM
I am trying Zig after spending quite some time writing Bare metal with Rust.. but decided I really wanted a nicer C

1591819865
gonz_
Zig certainly fits that description a lot more than many alternatives. Welcome. :)

1591819906
JimRM
Thanks :) - I was curious what the development process was like for the zig toolchain. Is it community driven/multiple contributors?

1591819915
tencho
Hello

1591819928
tencho
Is this valid zig code

1591819983
leeward
JimRM: That's basically what brought me to Zig. Rust is...big.

1591820271
alexnask
tencho, Yes

1591820321
tencho
alexnask, but .text seems at wrong offset

1591820463
alexnask
Yes there are currently a collection of bugs with packed struct offsets

1591820478
alexnask
So you are porbably hitting this

1591820601
tencho
I'm browsing the issues on github, but I can't find anything relevant

1591820644
fengb


1591820650
fengb
Size is wrong :(

1591820803
ifreund
of course it's a packed struct :(

1591820819
ifreund
I'm glad I don't need to use them yet

1591821036
fengb
So the basic rule of thumb is... anything that's power-of-2 is safe. Anything under 1 byte is safe. Everything else... needs testing

1591822794
andrewrk
sorry folks. the dilemma here is opportunity cost. if we can ship stage2 with working packed structs then we can actually just delete packed structs from stage1

1591822812
mq32
andrewrk: sounds like a perfect plan to me

1591822827
mq32
don't waste time on stage1 packed structs, it's not worth it

1591822837
mq32
it's not necessary for writing a compiler

1591822846
ifreund
andrewrk: yeah I think that makes a lot of sense

1591822863
ifreund
I don't need them at all personally of course :)

1591822864
BaroqueLarouche
I used packed struct in my PE code

1591822926
andrewrk
I'm working on wiring up Zig AST to ZIR right now, so once that's in place, it will start to feel like progress is accelerating because there will be more and more behavior tests passing in self-hosted

1591822929
leeward
They're useful for anything that has to talk to networks too, but it's not like we can use Zig in production yet, and getting packed structs working in stage1 will actually delay that.

1591823044
mq32
leeward: exactly

1591825100
tdeo
hmm, can we have non-exhaustive unions to match with non-exhaustive enums?

1591825194
ifreund
hmm, does tagging a union with non-exhaustive enum do that already?

1591825213
andrewrk
tdeo, there is an open pull request for that

1591825216
andrewrk
by xackus

1591825240
andrewrk
I took a quick peek at it and I just want to make sure I understand all the ramifications before merging

1591825247
tdeo
ooh, didn't know

1591825289
tdeo
> I think they are useful, however they should not need a _ => branch in switches, since they cannot be initiated with unnamed values.

1591825293
xackus
nah, my pr is just a bugfix

1591825304
tdeo
hmm, i actually want that behaviour for future api compatibility

1591825314
tdeo
since wayland can add messages in api-compatible protocol versions

1591825318
andrewrk
it would basically mean all the unnamed values get the `void` type, as I understand it

1591825330
tdeo
but it's not a big deal if the zig type system can't enforce that

1591825398
FireFox317
nice andrewrk! I'm looking forward to seeing the first Zig code be compiled with the self-hosted compiler (this time using our own codegen :D) Is it coming along nicely?

1591825426
andrewrk
yes; I'm hoping to have a very primitive hello world in master today

1591825438
BaroqueLarouche
neat!

1591825443
tdeo
wow!

1591825454
FireFox317
wow did not expect that :P

1591825456
xackus
i was fixing non-exhaustive enums and encountered the same bug in union code

1591825457
andrewrk
(with incremental compilation fully working)

1591825482
ifreund
that is crazy awesome

1591825489
FireFox317
:mindblown:

1591825497
andrewrk
there's still a lot to do. native codegen increases the scope of work

1591825526
andrewrk
still need to solve debug info, for example, and other executable and linking formats than ELF

1591825569
andrewrk
it's good stuff though. this is an investment in the last 10%, so we don't get to 90% and then hit a wall

1591825609
ifreund
gotta dodge those local maixima

1591825617
andrewrk
yep :)

1591825620
ifreund
oops to many is

1591827045
tgschultz
goddamn I hate git

1591827179
ifreund
anything i can help with?

1591827804
pmwhite
Git is great -

1591828358
tgschultz
despite merging upstream/master with my own master, and rebasing my branch on that, there are files missing.

1591828457
tgschultz
I only changed one file, so all I want to do is blow away everything, rebase on current master, and plop my file back down.

1591828524
tgschultz
I'm sure there's some branch of mathematics where this behavior makes sense

1591828841
tgschultz
I sorta got it, but there still a file I didn't change in my pull request somehow

1591828914
tgschultz
screw it. change isn't worth the effort.

1591829290
ifreund
tgschultz: for future reference the most foolproof way to do this is `git fetch upstream; git rebase upstream/master` from the branch you want to get up to date

1591829310
ifreund
no need to mess around with keeping a local master up to date or anything

1591829315
tgschultz
I did that

1591829360
ifreund
if you do a `git rebase -i upstream/master` are there changes listed that you don't expect?

1591829378
ifreund
if so you can drop those commits in the interactive rebase

1591829422
tgschultz
I'll make a not for the future but I've already deleted that branch

1591829550
tgschultz
thank you for the help, regardless

1591829667
ifreund
no problem, git is a stupidly complex beast :D

1591829686
ifreund
it is quite useful and has become indispensible to me though

1591829759
pmwhite
Is anybody here active on mastodon/fediverse? I would enjoy hearing people's progress on Zig projects and having Zig related discussion. It might help attract new users from there as well.

1591829881
ifreund
nah, github is my only social media these days if you don't count various chat service

1591830019
ifreund
i guess I can give progress updates here though, my compositor is coming along nicely and I've started to get a few contributors!

1591830475
rooke
ooh I really enjoyed your talk on that ifreund got me thinking about writing one now :x

1591830564
ifreund
rooke: go for it! wayland is a lot of fun

1591830708
pixelherodev
ifreund: if you had to sell me on your compositor over e.g. Sway, what would you say?

1591830743
ifreund
pixelherodev: dynamic window manament makes manual tiling feel slow and clunky after you get used to it

1591830753
pixelherodev
... dynamic tilign?

1591830755
pixelherodev
tiling*

1591830758
ifreund
also its simpler cause I'm not supporting all the features of i3

1591830785
ifreund
dynamic tiling means that the windows arrange themselves based on a predefined layout

1591830812
rooke
haha I'd be basically porting hlwm to sway, too used to manual tiling

1591830824
ifreund
you generally have one "master" window that is larger and several smaller windows which you can travese through and promote to the master slot

1591830865
ifreund
I didn't come up with this idea of course, it's what dwm, xmonad, awesomewm, etc. do but nobody made one for wayland yet

