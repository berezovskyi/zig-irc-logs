1591489158
pixelherodev
ikskuh: wassup?

1591490704
pixelherodev
ikskuh: what did you want me to try?

1591496825
satchmo
is there a way to initialize a File struct from the retval of syscallN()?

1591496894
pixelherodev
I mean

1591496899
pixelherodev
The file is just fd, right?

1591496923
pixelherodev
The only field you need to set is `handle`, which is a FD

1591496961
pixelherodev
If a syscall returns a FD, then `f = File { .handle = returned_value } ` should work

1591496968
satchmo
well File expects an i32 for .handle while syscallN() returns usize, so conversion doesn't exactly work out

1591496987
pixelherodev
Hmm

1591496990
pixelherodev
Check how open casts it?

1591497034
pixelherodev
It uses std.os.open IIRC

1591497049
pixelherodev
Which also returns a usize, from a syscall?

1591497061
satchmo
os.open returns i32 :/

1591497069
pixelherodev
That makes no sense

1591497071
pixelherodev
Wait

1591497073
pixelherodev
What OS are you on?

1591497082
satchmo
linux

1591497110
pixelherodev
a FD is i32 on Linux, yeah

1591497121
pixelherodev
and open also returns usize

1591497123
pixelherodev
hmm

1591497159
pixelherodev
It uses os.openatZ's return value

1591497182
pixelherodev
Okay

1591497190
pixelherodev
satchmo: just @intCast to std.os.fd_t

1591497197
pixelherodev
That's what std.os.openatZ does

1591497204
pixelherodev
You need to check the error value though

1591497215
pixelherodev
So I'd check if std.os supports what you want before doing it directly

1591497350
pixelherodev
e.g. `f = File { .handle = @intCast(std.os.fd_t, std.os.syscall(...) }`

1591497351
satchmo
:O, I think it worked

1591497354
pixelherodev
:)

1591497378
satchmo
thanks!

1591497383
pixelherodev
No problem :)

1591497387
pixelherodev
When in doubt, read the code ;)

1591497461
satchmo
ah, i see what I was doing wrong, was looking at os.zig instead of os/linux.zig..

1591497529
pixelherodev
:)

1591510017
daurnimator


1591510493
pixelherodev
?

1591510508
daurnimator
pixelherodev: its interesting

1591524102
Tharro
Trying to make a sprintf implementation but somehow the array (`buffer` in the sample code) is not copied when returned as a slice because the output is garbage:

1591524219
daurnimator
Tharro: sprintf8 returns a slice into the stack buffer `buffer` that is now stale

1591524289
daurnimator
Tharro: a slice is just a pointer and a length

1591524328
Tharro
Ok. Is there a way to transparently return an array of arbitrary length?

1591524370
daurnimator
Tharro: have caller pass in buffer or allocator

1591524600
Tharro
I've looked into the option of using an allocator but it seems there is no default/global allocator to allocate memory on the heap (e.g. the C malloc equivalent). Is that right?

1591524642
daurnimator
correct

1591524803
pixelherodev
I mean

1591524809
pixelherodev
std.heap.page_allocator does that

1591524813
pixelherodev
It's just not efficient

1591529692
ask6155
hey, I'm trying to build cmake but cmake .. gives error 'could not find clang (missing: CLANG_LIBRARIES)'

1591529710
ask6155
oops I'm trying to build zig

1591529789
ifreund
ask6155: zig needs to link against clang, llvm, and lld. do you have the development libaries/headers for all of these installed?

1591529873
ask6155
I have clang, lld, llvm, llvm-libs

1591529929
pixelherodev
Ugh

1591529930
ifreund
some distros split these into *-dev and normal packages, perhaps yours does that?

1591529932
pixelherodev
LLVM 10 problem, probably

1591529945
pixelherodev
Clang 10, rather

1591529953
pixelherodev
It's a PITA on a number of distros

1591529968
ifreund
but yeah could be that too

1591529989
ifreund
my distro managed to package llvm10 in a non-broken way luckily

1591530073
ask6155
I use arch BTW

1591530176
ask6155
I requires the clang compiler, llvm and the linker, shouldn't that be it?

1591530220
ifreund
yeah they don't split -dev packages

1591530237
ifreund
i feel like someone on here mentioned that it worked fine on arch though

1591530320
daurnimator
ask6155: are you using:       -DZIG_PREFER_CLANG_CPP_DYLIB=ON

1591530364
ask6155
no?

1591530478
daurnimator
try it then :)

1591530505
ifreund
hmm, didn't need that on void

1591530596
ask6155
ok it worked with that

1591531032
ask6155
I decided to use translate C on a C file and it says stdio.h not found

1591531078
daurnimator
ask6155: did you link libc?

1591531089
daurnimator
-lc

1591531108
daurnimator
i think that should work

1591531135
ask6155
why isn't that mentioned. Basically everyone links to libc

1591531215
ask6155
I think I'm being a baby now

1591531238
pixelherodev
ask6155: Zig doesn't link libc by default

1591531246
pixelherodev
Because we're not C ;)

1591531261
daurnimator
we're trying to replace C here after all ;)

1591531286
ask6155
well translate-c needs to link to C so it should be made default

1591531294
pixelherodev
No it doesn't ;)

1591531300
pixelherodev
You can write C code w/o lib

1591531301
pixelherodev
libc*

1591531404
ask6155
ok...

1591535007
arend
hello guys, how do you pass arguments to the binary using 'zig build run'?

1591535526
mikdusan
arend:

1591535576
ifreund
you can also just do ./zig-cache/bin/foobar

1591535634
arend
mikdusan but that doesnt work for me

1591535694
ifreund
odd, what are you trying to run?

1591535708
arend
nevermind

1591535717
arend
I removed the zig-cache folder and rebuilt

1591535719
arend
works now

1591535763
arend
thanks guys

1591538003
DrDeano
Hi, I am having some problems with ChildProcess where after I call `wait()`, I get a `OutOfMemory` but the error return trace says `PathAlreadyExists`

1591541781
ifreund
zig showtime starting in 5 min

1591542254
squeek502_
link to zig showtime btw:

1591542259
squeek502_
starting in 3 mins

1591543074
THFKA4
CS 1.6 footsteps

1591548788
leeward
Are there any graphics libraries that don't depend on libc?

1591548874
pixelherodev
none that I'm aware of :(

1591548893
leeward
:/

1591551571
ifreund
one downside of zig's lazy compliation is that code can stick around after a refactoring that never gets used

1591551590
ifreund
do we have a plan to combat this?

1591551619
ifreund
just found a function in my code that should have been deleted weeks ago

1591552021
Xavi92
ifreund: +1. Also I've found some functions that had different kind of errors but zig would not check them since they're lazily compiled

1591552097
leeward
I don't know of a plan, but something like `zig check` following all the comptime branches and noting dead code would certainly be useful.

1591552118
leeward
Of course, it would have to know to ignore libraries.

1591552240
ifreund
yeah a tool listing all the dead code would be a good start

1591552272
ifreund
even better would be a tool that tests all permuations of target and build options

1591552449
leeward
More important than just listing dead code, trying to compile branches not taken would expose errors.

1591552506
ifreund
yeah, that would be crazy useful for CI

1591552537
leeward
`if (someplatform) arr[17] else arr[2]` on an array with comptime known length of 3 won't fail unless someplatform is true.

1591552613
leeward
Is there a new translate_c bug that's keeping SDL2/SDL.h from importing?

1591552638
ifreund
don't know, I'm not using sdl

1591552653
ifreund
also still on 0.6.0 :P

1591552658
leeward
heh

1591552665
leeward
Do you use any graphics libraries?

1591552847
ifreund
wlroots i guess

1591552868
ifreund
though it's a lot more than a graphics library

1591552906
ifreund
probably will need to though for some future wayland clients I'm planning on writing

1591552961
leeward
mm, would consider if I were using wayland

1591553047
ifreund
to be clear it's a library for wayland servers, not the average client :P

1591553082
ifreund
all the graphics I do is just compositing what the clients send and drawing it to the display

1591553114
ifreund
plus some borders and a background color

1591554375
frett27
ifreund: +1, face the same, it seems a best practice to add a unit test, then it is compiled when run ?

1591554581
ifreund
frett27: yes, in an ideal world we wouldn't have this probelm as all code paths would be tested, however this is rarely the case in practice :)

1591554728
frett27
ifreund: yes, but from my experience this saves a lot of times to have a small test to check memory allocation, or dump parameters,

1591554746
frett27
ifreund: i must admit i don't have tests for all :-)

1591554763
ifreund
yeah, tests can save a ton of time

1591554791
ifreund
unfortunately writing tests for a wayland compsitor isn't all that easy and I have yet to look into how best to do it

1591554809
ifreund
probably need to write a bunch of test clients and some kind of testing framework

1591554869
frett27
ifreund: when compiling with build-obj, it should not strip symbols, is that a solution ?

1591554883
ifreund
I think weston has a fair bit of test coverage, I think I can take inspiration from there

1591554948
ifreund
frett27: not familar enough with how the compiler works to say

1591558459
jwmerrill
I'm working my way through the Zig cc blog post (

1591558533
jwmerrill
I just installed QEMU through homebrew, and I see there's a binary called `qemu-system-aarch64` that can bring up an emulated machine, but I don't see how to get it to just run a single command like in the blog post.

1591558667
satchmo
I think you're referring to QEMU's user mode emulation

1591558677
satchmo


1591558826
jwmerrill
Oh, thanks. Maybe that isn't available through homebrew?

1591559277
satchmo
It looks like user mode is only for linux hosts

1591562735
Xavi92
ifreund: BTW, is there any reason why zig does lazy compilation? Is it to achieve faster compilation speed?

1591562990
ifreund
Xavi92: that, and it makes stuff like having differente dependencies based on a build option work

1591563022
ifreund
In C you would do this with macros, but with zig comptime is the way

1591563044
ikskuh
Xavi92: lazy compliation makes "not having a preprocessor" possible

1591563050
alexnask
This is the way

1591563063
ikskuh
and stuff like recursive data stuctures are also easier

1591563072
ifreund
yeah

1591563108
leeward
Xavi92: I think it's mainly about binary size. It only compiles the code that's used, even from the standard library.

1591563168
fengb
It’s a pervasive design philosophy. I’m not sure why it was chosen but things like OS features are completely dependent on it

1591563173
alexnask
^

1591564656
frmdstryr
Can I catch a whole error set in a switch?

1591564753
leeward
frmdstryr: You mean like `ErrorSet.FirstValue, ErrorSet.SecondValue =>`?

1591564782
frmdstryr
No like `ErrorSet =>` so i don't have to break each one out?

1591564783
leeward
Or do you want to check for membership in the error set with a single switch branch?

1591564844
frmdstryr
^^ yes that

1591564873
leeward
I'm not sure, but I don't see an obvious way to do it. Looking through the builtins.

1591564894
leeward
I don't think switch will do it.

1591564966
leeward
I think I had this problem recently.

1591565011
leeward
Yep, the code I ended up with sidestepped it.

1591565093
alexnask
I tried writing a comptime ErrorDispatcher that did this at some point but Im pretty sure we need @Type(.ErrorSet) for it

1591565169
frmdstryr
I'm trying to reduce a global error set to a known error set so I can use streams but it doesn't seem to work. I have to catch and explicitly return each one...

1591565200
alexnask
Yes this is a weakness atm I think there was some github issue with a proposal that did something similar

1591565220
Xavi92
thank you all for your comments. I'm not so sure about the binary size reason: many C compilers separate symbols into their own sections so the linker removes unused code, but I don't know how the compilation process works in zig tbh

1591565227
alexnask
It would be pretty easy to do as a custom type with @Type(.ErrorSet) btw

1591565243
alexnask
s/btw/though

1591565354
leeward
Right, that's the thing, and it's not implemented yet.

1591565467
leeward
Xavi92: Yeah, you're probably right.

1591565499
alexnask
Yes as I said its a weakness atm

1591565545
leeward
Well, that's distracting. That's a large number of people walking down the street.

1591565583
alexnask
Not sure every linker eliminated dead code

1591565611
alexnask
Anyway just compiling what you need in the first place is less wasteful imo

1591565620
Xavi92
alexnask: surely not every linker, that's why I said "many"

1591565663
alexnask
zig uses lld atm btw (in the C++ compiler)

1591565663
Xavi92
alexnask: well, it ensures all code remains valid even if not used, but I understand why it was decided otherwise for zig

1591565744
fengb
In Zig, not all code is valid. OS features are implemented with this caveat

1591565878
leeward
Oh hey, fengb, I've been meaning to ask: what do you use to draw on your wasm target?

1591565891
ifreund
to be clear, you need lazy evaluation to be able to do many things that would be enabled by a preprocessor in C

1591565928
ifreund
and a preprocessor has the same drawback of not compiling all the code

1591565932
leeward
It's true, C compilers won't complain about code that's #ifdef'd out. Even if it doesn't parse.

1591565936
ifreund
(among others)

1591565948
leeward
At least Zig code that isn't compiled still has to parse.

1591565952
ifreund
yeah

1591565972
frmdstryr
alexnask: Using @TypeOf(write).ReturnType.ErrorSet, thanks for the tip!

1591565995
Xavi92
sure

1591567055
leeward
Anyone know if there's an easy way to turn a sentinel-terminated pointer into a slice?

1591567096
alexnask
std.mem.spanZ I believe

1591567527
leeward
alexnask: yep, thanks

1591567611
leeward
Seems like span is just better than spanZ.

1591567619
leeward
er, other way around

1591567626
leeward
spanZ is safer.

1591567641
Xavi92
oh, just realized I'm also having issue #5340

1591567929
Xavi92
I hope packed structs get fixed soon :)

1591567946
leeward
That would be nice.

1591572699
fengb
leeward: manual conversion to canvas atm:

1591572742
fengb
Still debating whether to make the data match canvas output, in which case that’d be a simple-ish memcpy

1591572768
leeward
fengb: thanks, and...oof

1591572800
fengb
The raw code is nicer. Those magic numbers are from LLVM that seemed to help performance

1591572825
fengb
The data format is raw Gameboy Color values

1591572827
leeward
Wait, what's this for (let i = 0; i < pixels.length; i++) thing? Did Zig get C's for loops?

1591572837
fengb
No this is all JS

1591572841
leeward
ohhhh

1591572851
fengb
You can’t do web stuff in wasm so the glue must be in JS

1591572887
leeward
That makes way more sense now.

1591572901
leeward
Also makes me a bit more sad, but that's JS for you.

