1589587239
fengb
mikdusan: yes, commented with the now fixed behaviors

1589587258
mikdusan
awesome. ima closin' it

1589592707
daurnimator
GreaseMonkey: ah. you want @as then, not @intCast

1589592787
GreaseMonkey
daurnimator: ah alright, i might as well switch to @as for that

1589593011
GreaseMonkey
merged and pushed

1589595639
tyler569
qa

1589595643
tyler569
aah oops

1589595939
andrewrk
Type  :qa  and press <Enter> to exit Vim                      0,0-1         All

1589596236
pixelherodev
andrewrk: If I patch your x64 backend (as promised yesterday), would that be a PR against your PR-ed branch? :P

1589596364
andrewrk
pixelherodev, yeah, make sure you pull right now tho, just pushed something

1589596542
pixelherodev
Wowzers

1589596566
pixelherodev
Refactor yay

1589596577
pixelherodev
Alrighty, fixing up moves now...

1589596675
pixelherodev
andrewrk: what's MC stand for? Machine Code?

1589596706
andrewrk
yes

1589596714
pixelherodev
ALrighty, thanks

1589596725
andrewrk
it also stands for Moo Cows

1589596764
pixelherodev
... while reluctantly grinning

1589596809
andrewrk
`./zig build test-stage2` isn't passing in that branch yet but that's the next thing I'm working on

1589596817
pixelherodev
Alrighty

1589596848
andrewrk
btw in that branch, there is no more bit rotted self-hosted compiler code

1589596861
andrewrk
all the files are legit now

1589596869
pixelherodev
Nice :)

1589596876
pixelherodev
andrewrk: what's the max line length used for this?

1589596890
pixelherodev
I usually use 80 but that's clearly not it, and I'd rather configure kak now then have to clean up the PR afterwards

1589596898
andrewrk
my policy is: whoever last touches the code gets to have their preference

1589596904
pixelherodev
:P

1589596920
andrewrk
so if you wanna make a nice patch and modified lines are wrapping at 80, be my guest

1589596945
pixelherodev
:)

1589596953
pixelherodev
Oh, and to ZLS folks: thanks again, it's awesome

1589596974
andrewrk
error set awareness is going to be killer

1589596993
andrewrk
it's going to drive people crazy knowing all the ways that their code can fail

1589597013
pixelherodev
Oooooohhh, that sounds

1589597025
pixelherodev
Gah, have to break out the manual again

1589597035
pixelherodev
It's weird actually

1589597043
pixelherodev
Compile times are usually pretty good for most things

1589597054
pixelherodev
It takes longer to load the Intel manual than to compile most of my projects :P

1589597101
andrewrk
you can sorta get a picture of it with some generated docs urls:

1589597134
andrewrk
when I look at this, it makes me ask the question, "wtf why is 'NotDir' one of the possible errors for getting the path to your own executable?"

1589597161
andrewrk
...which is a good question, which leads to understanding the code deeply, and possibly improving the logic

1589597202
pixelherodev
And with

1589597224
andrewrk
yeah. my hope is that it will lead to more robust software, that ultimately is a better user experience for the end user

1589597235
pixelherodev
Roughly 6.1 seconds to load the manual, longer to be able to access the table of contents in the sidebar :P

1589597265
pixelherodev
~nine seconds until manual is usable. Every single one of my Zig projects compiles faster than that *on my laptop*, let alone with my PC builder

1589597288
pixelherodev
Also I just wasted time modding my stopwatch script to show milliseconds just so I could measure it. This is why I never get anything done lol

1589597396
pixelherodev
Oh, and andrewrk: my biggest takeaway from yesterday's stream is that I'm not the only one who uses gas + objdump to figure out x86 encodings :D

1589597421
pixelherodev
That's literally how I tested my JIT initially, before I added a proper test suite

1589597427
pixelherodev
"Does it agree with as?"

1589597563
pixelherodev
I'm going to overcomment the codegen, so that anyone reading can use it to figure out the manual :P

1589597616
andrewrk
haha yeah I spent a bunch of time trying to read docs and tbh basically gave up

1589597623
pixelherodev
I figured it out, eventually

1589597630
pixelherodev
But only because I could compare against gas to prove myself right

1589597632
andrewrk
I'll return to it again at some point, but for now I'm unblocked to work on the other components

1589597636
pixelherodev
Or, more often, ocmpletely and utterly wrong

1589597644
pixelherodev
Yeah, it's really annoying

1589597647
andrewrk
yeah... my intuition has been correct 0/3 times

1589597652
pixelherodev
Maybe my comments will prove enlightening :)

1589597656
andrewrk
:)

1589597785
pixelherodev
andrewrk: is it okay if I tag the x64 register enum?

1589597805
pixelherodev
Each register has a 4-bit id

1589597831
pixelherodev
... wait that's a dumb question, that's literally the point of what I'm doing

1589597837
pixelherodev
What else am I going to do, implement a giant switch? :P

1589597903
pixelherodev
Oh wait, now I remember why I didn't do an enum for mine

1589597908
pixelherodev
Multiple values share an id

1589597913
pixelherodev
e.g. rax and eax both have id zero

1589597920
andrewrk
pixelherodev, just do what seems right to do, and explain it to me in the PR and we'll figure it out

1589597925
pixelherodev
:)

1589597952
andrewrk
oh boy, 46 pull requests

1589597961
pixelherodev
Sheesh

1589597962
andrewrk
after this branch is merged I'm going to have to pay the pied piper

1589597965
pixelherodev
That's a lot of contributions :)

1589598020
pixelherodev
Might as well update x86 while I'm at it

1589598035
pixelherodev
Going to turn it from an enum to a tagged union (Reg8, Reg16, Reg32, Reg64)

1589598073
pixelherodev
Need to ensure we don't give e.g. r10l as a 32-bit reg

1589598190
GreaseMonkey
if you're having trouble with x86 encoding, this site helps:

1589598211
pixelherodev
Interesting optimization idea that only occurred to me because of this situation: when passing a tagged union for which all values other than a single tag produce unreachable, in optimized builds, the compiler could just pass the underlying type directly and optimize out the check, correct?

1589598215
pixelherodev
GreaseMonkey: thanks, but I'm good

1589598224
pixelherodev
Manual is annoying, but it's worth it to me

1589598266
andrewrk
GreaseMonkey, nice! thanks for the link

1589598377
pixelherodev
... that does look good... no, no, I'll stick to the manual! Intel engineers must have put in the effort making it, it'd be wrong not to use it!

1589598423
pixelherodev
Jokes aside

1589598431
pixelherodev
Mind if I move the arch-specific stuff into a separate file?

1589598449
pixelherodev
e.g. Reg(.x64) will return @import("arch/x64.zig").Register?

1589598455
andrewrk
that sounds nice

1589598468
andrewrk
are you leaving e.g. the genRet function tho?

1589598472
GreaseMonkey
do the Intel CPU manuals have bit fields where you have a group of bits saying "reserved", followed by a single bit saying "reserved", followed by another group of bits saying "reserved"?

1589598507
pixelherodev
Yeah

1589598514
pixelherodev
Only focusing on register definitions and moves for now

1589598527
pixelherodev
GreaseMonkey: I dunno, why?

1589598570
pixelherodev
There's definitely some reserved bits that are sequential  but defined

1589598585
pixelherodev
e.g. "this was reserved for X, so must be 0 for now; this is reserved for Y, so must be zero"

1589598593
pixelherodev
But I don't see anything like that at a "quick" glance

1589598600
GreaseMonkey
i keep thinking i've seen that phenomenon in the GPU manuals where it just says "reserved, SBZ" or something

1589598726
pixelherodev
andrewrk: idea regarding arch-specification

1589598774
pixelherodev
Instead of having a single genRet (as you mentioned) that switches over the arch, should there be e.g. x86.genRet / ARM.genRet in their own backends, with the main codegen just setting the backend?

1589598780
pixelherodev
That makes it easier IMO to extend down the line

1589598797
pixelherodev
No need to sift through the x86 code to extend the ARM backend, for instance

1589598888
pixelherodev
That's a larger scale refactor though, so I'm definitely not doing it

1589598891
pixelherodev
That would come later

1589599356
andrewrk
maybe, I think it's worth considering. my goal is to make the code really contributor friendly, so that it is inviting to work on adding new architectures. I'm sure the code will evolve over time to achieve that goal

1589599479
pixelherodev
That's what I was thinking of when I suggested this

1589599507
pixelherodev
Especially as we actually implement backends, we're going to need some form of organization

1589601280
andrewrk
pixelherodev, `./zig build test-stage2` passing tests in 294bfb3321f

1589603316
pixelherodev
:)

1589606951
kenaryn
Hello, please in a few words, can someone explain to me why we switched from `warn("Hello, world!\n")` in zig 0.5.0 to `warn("hello, world!\n", .{})` in 0.6.0?

1589607079
foobles
variadic functions were removed

1589607081
foobles
kenaryn

1589607094
foobles
so now the arguments are passed in as a required tuple parameter

1589607115
kenaryn
It's a clear explanation, thank you foobles.

1589607364
kenaryn
Does the leading dot before the curly breaces mean that the whole statement is from now on a enum?

1589607444
foobles
it means it's an anonymous struct/tuple

1589607460
foobles
basically it creates a new type on the spot

1589607475
foobles
that may be able to coerce to a named tuple/struct type

1589607492
foobles
and doing `.identifier` is an anonymous enum literal

1589607503
foobles
that can coerce to a value of a named enum as well

1589607587
foobles
by "anonymous tuple/struct", i dont mean its declaring a type; rather it's declaring an instance of an anonymous type, with the provided fields

1589607625
kenaryn
I understand, you're very kind.

1589607655
foobles
no problem :)

1589631974
daurnimator
it bundles clang and calls it with:

1589642200
sjm
can anybody explain why i'm getting "error: expected type 'void', found 'std.fs.IteratorError'" with

1589642216
sjm
for the line "while (try it.next()) |item| {"

1589642277
alexnask
Your function returns void

1589642295
alexnask
It should return !void or InsertYourExplicitErrorSet!void

1589642777
sjm
alexnask: ahh. thanks.

1589642831
r4pr0n
andrewrk: hey, how did you actually do the completion in your livestream? i'm not aware that vim is type-aware or something like that and that the completion works across files (that vim knows in which files to look...)

1589642973
r4pr0n
i also couldn't find anything about it in your vimrc

1589643068
mikdusan
while inserting text, type a minimal amount of letter(s) and hit ctrl-x,tab

1589643139
andrewrk
you can get surprisingly far with the simple token-based ctr+n completion

1589643274
r4pr0n
well that doesn't search in other files for the token for me

1589643352
ifreund
r4pr0n: it should search all open buffers by default iirc

1589643370
r4pr0n
oh

1589643372
r4pr0n
that makes sense

1589643409
andrewrk
it even searches in buffers that you opened once and then closed

1589643778
r4pr0n
good to know, thanks

1589644268
ifreund
andrewrk: thoughts on removing the panic from std.log.fatal and letting the caller decide if a panic is needed?

1589644691
andrewrk
ifreund, in this case, we may as well remove "fatal" entirely, in favor of err followed by panic, right?

1589644729
andrewrk
that might make sense. we can also define the default panic handler to log an error before aborting

1589644926
ifreund
hmm maybe fatal would still have a place as the highest tier of error than can't be filtered out

1589644953
ifreund
i'm not sure about that though, getting rid of it completely would also make sense

1589644997
ifreund
software written in zig hopefully wont be logging so many errors that ignoring them is desireable

1589645076
andrewrk
we're going to want the concept of setting different log levels per package

1589645085
andrewrk
we already want this for other things

1589645090
andrewrk
such as optimization mode

1589645120
andrewrk
I have some ideas on how to set this up but haven't completely solved it yet

1589645140
andrewrk
one idea is that @import("builtin") could give you different values for each package

1589645160
andrewrk
the problem there is when std lib accesses it on behalf of a different package

1589645187
andrewrk
it would get its own @import("builtin") and not the callsite's @import("builtin")

1589645202
ifreund
i'm working on adding some kind of "scope" parameter to the logging functions that would allow for more finely grained filtering

1589645270
ifreund
i'd like to make it something more that just a []const u8, but i haven't found a way to abuse enums and comptime enough yet

1589645280
andrewrk
this might be related to

1589645320
andrewrk
idea being that you could accept a comptime parameter such as `callsite: sourcelocation`

1589645343
andrewrk
and you would call it with log.warn(@src(), "{}", .{foo})

1589645399
andrewrk
this is introducing a new type called `sourcelocation` which you would be able to use to access properties about the callsite, such as the optimization mode of the scope, log level of the scope, float mode of the scope, etc

1589645423
andrewrk
possibly also put line/column/file info in the log messages

1589645433
ifreund
that seems super powerful

1589645488
andrewrk
yeah more consideration is needed before accepting this idea, to make sure it's not too powerful and problematic. but it might solve a few problems for us

1589645502
andrewrk
the actual implementation would not be very difficult, I think

1589645612
ifreund
hmm, would it give info about the callstack as well? if so we could call this internally to std.log and look at whatever called it

1589645641
andrewrk
not sure I follow

1589645680
ifreund
no that was a bad idea, it doesn't make any sense :D

1589645730
ifreund
i was trying to think of some way to avoid having to pass @src() every time you log

1589646022
andrewrk
ah I see. I understand the desire to remove it but I think it's simpler to make it explicit

1589646054
andrewrk
it's not really possible to change this without some invasive language feature such as macros

1589646305
ifreund
yeah, say no to macros kids

1589646352
r4pr0n
while I don't have any better idea at the moment, changing std.debug.warn to need such an parameter makes it even longer, which it already got through the switch from varargs to tuples

1589646361
r4pr0n
that may be a problem since it is often used as a debug tool

1589646374
ifreund
i'm trying to figure out if

1589646416
andrewrk
r4pr0n, I agree this is a problem

1589651825
alehander92
hm, do you have currently sourcelocation-like primitive

1589651913
alehander92
a cool thing in nim is that one can pass a parameter to `instantiationInfo`, so you can get compile time info upper in the "expanding stack" for your sourcelocation

1589651929
alehander92
but not sure if this happens actually in zig, as you dont have templates

1589651943
alehander92
but you have ct callstack

1589651976
ifreund


1589652685
alehander92
hm, how big deal is it

1589652705
alehander92
i wonder if i should aim for caching of functions or files

1589652755
alehander92
but maybe this can force people to not write big modules, so recompiling a module is not much slower than a function

1589652763
alehander92
(if zig/another system caches only on module level*)

1589653224
andrewrk


1589653233
andrewrk
caching on disk is a matter of serialization/deserialization

1589653626
andrewrk
is anyone excited about setting up a repo for tracking the performance of various zig things over time?

1589653643
andrewrk
something like

1589653666
andrewrk
one place to start would be tracking the perf of the self-hosted parser, and of zig fmt

1589653732
andrewrk
we would also want this for tracking various self-hosted compiler benchmarks

1589653843
pixelherodev
andrewrk: dumb question, sorry, but: how do I build ZIR?

1589653852
pixelherodev
"zig compiler out of tree, rejected" (paraphrasing)

1589653901
andrewrk
assuming an up to date self-hosted-incremental-compilation branch, `./zig build` will build you the self-hosted compiler

1589653915
andrewrk
which will go into zig-cache/bin/zig

1589653928
andrewrk
then you can use build-exe, build-lib, build-obj like normal with the self hosted compiler

1589653935
andrewrk
the --watch CLI option gives you the repl

1589653971
andrewrk
you may also be interested in -femit-zir or -femit-zir=path

1589653997
pixelherodev
Got it, thanks

1589654234
pixelherodev
Where does it find build.zig out-of-tree? I didn't know that was possible

1589654246
pixelherodev
Rather, it looks up a folder to find it?

1589654251
andrewrk
yes it looks up until it finds one

1589654257
andrewrk
like git

1589658024
andrewrk
I don't need money, just hosting

1589658044
andrewrk
oops, meant to /msg that to ddevault regarding using peertube to store live coding videos

1589658523
r4pr0n
oh you wanna post your videos to peertube?

1589658526
THFKA4
funds sent

1589660608
alehander92
andrewrk thanks, i'll eventually play with it

1589664955
pixelherodev
andrewrk: is the breaking down of values into registers done at a higher level?

1589664975
pixelherodev
That is, if there's e.g. a u128 and we're targeting x64, will that have already been broken up into multiple 64-bit register accesses?

1589664991
pixelherodev
Mostly curious because I might want to add an official z80 backend, not just my Operation Tricarbon one

1589665076
pixelherodev
Also, is genSetReg supposed to be atomic? (That is, a failure will leave the output completely unmodified)

1589665429
pixelherodev
... I'm going to assume yes and just use a different code path for extended registers instead of emitting the REX prefix separately

1589665726
pixelherodev
Also, just so I can give an idea of what I'm doing before actually committing it

1589665729
pixelherodev


1589665780
pixelherodev
Probably going to extend comment line lengths to 100 or something though

1589665810
pixelherodev
Oh, and s/reg8/r8d in the comments

1589665885
ifreund
not a fan of the trailing comma i see :D

1589665938
pixelherodev
?

1589665971
pixelherodev
ifreund: what do you mean?

1589665996
ifreund
pixelherodev: if you add the trailing comma in the slice zig fmt will wrap things

1589666048
pixelherodev
Ahh

1589666056
pixelherodev
Nah, I'm just copying the style Andrew was using

1589666072
pixelherodev
... I think now that it's more than just the raw bytes it should be wrapped though

1589666090
pixelherodev
I really wish there was a `zig fmt` tool that didn't depend on Clang or LLVM

1589666095
pixelherodev
Because I

1589666101
pixelherodev
'm not dealing with getting those building on Gentoo again

1589666121
ifreund
i mean, you could use the static tarball

1589666127
pixelherodev
Not in a form Zig can link against, anwyays

1589666131
pixelherodev
... there's a static tarball.

1589666140
pixelherodev
Of

1589666153
pixelherodev
Worth having if only for formatting

1589666158
ifreund
for sure

1589666218
pixelherodev
anyways, I'm going to actually implement the register structures now

1589666224
pixelherodev
...might just copy them from OT though

1589666226
pixelherodev
:P

1589666235
pixelherodev
It'll need a tad of patching, but it's easier than redoing them from scratch

1589666269
pixelherodev
Oh, and I just noticed

1589666279
pixelherodev
We can return an error union value directly?

1589666284
pixelherodev
I've been using `return try` the whole time!

1589666499
ifreund
lol

1589666700
pixelherodev
Ahh, resize() exists; that's what you'vebeen using to make writes atomic when there's multiple bytes

1589666775
pixelherodev
ifreund: I take that as a yes? That's a thing?

1589666776
pixelherodev
ARGH

1589666804
ifreund
pixelherodev: yes

1589666867
pixelherodev
ifreund: I don't see it there...

1589666891
pixelherodev
where `a()` returns `!T`, `return a();` isn't mentioned there as valid

1589667114
pixelherodev
Just about done with the x64 genSetReg rework

1589667368
pixelherodev
All I need to do is implement ethe register type and every single register should be usablle

1589667371
pixelherodev
s/ll/

1589667445
ifreund
pixelherodev: oh i see what you mean, yeah it'll let you do that

1589667465
pixelherodev
Neato

1589667770
andrewrk
pixelherodev, in most of the code paths in codegen.zig you can fail with garbage inside the "code" ArrayList. it won't get used if you report/return an error

1589667819
andrewrk
looks like you're doing some clean refactorings!

1589667866
pixelherodev
The one thing that's probably going to need a few iterations is the Register type

1589667891
pixelherodev
Currently, I'm using a structure with a `width` enum (W8,W32,etc), u4 `id`, etc

1589667913
andrewrk
pixelherodev, regarding u128, I think you can get a sense for how that will work by looking at MCValue

1589667916
pixelherodev
Might be worth defining an enum containing all the registers and writing an automatic converter

1589667942
pixelherodev
So that `x64Reg(.EAX)` becomes the structure automatically or something

1589667946
pixelherodev
andrewrk: good to know, thanks

1589667947
andrewrk
yeah keep in mind this code is brand spanking new, so maybe some of the ideas in there, which are just the first thing I thought of, are going to be iterated on or reworked

1589667958
pixelherodev
That's completely fine

1589667968
pixelherodev
If anything, that means more ideas on how to improve my own backends

1589667989
pixelherodev
Except I'm doing mine more for fun than anything else so I'm not moving nearly as quickly as you are :)

1589667996
andrewrk
gotta go fast

1589668011
pixelherodev
Once this is done, I might e.g. implement function calls and such

1589668033
pixelherodev
See if I can't help finish off that merging checklist

1589668035
pixelherodev
:)

1589668070
pixelherodev
Actually... I can probably leave the registers as enums!

1589668086
pixelherodev
enums can have methods IIRC, which means it can just be a giant switch internally

1589668174
andrewrk
one idea that I think might turn out quite nice is converting the arch tag value into a comptime parameter early on in the call stack, and so that the arch is available as comptime value pretty much everywhere in that file

1589668201
andrewrk
that's a way of organizing a compiler backend that is unique to zig

1589668230
pixelherodev
That would be really nice, yeah

1589668305
andrewrk
atomicity is

1589668350
pixelherodev
I saw

1589668357
pixelherodev
I might still try to ensure it's atomic anyways

1589668379
pixelherodev
Because it might be useful later anyways, and as far as I can tell it currently is atomic in most uses

1589668400
pixelherodev
Oh, and that compiler backend organization might be unique to zig the language, but it's not unique to `zig` the compiler :)

1589668406
pixelherodev
I'm already using it for mine

1589668496
pixelherodev
ifreund: thanks for suggesting the static build

1589668504
pixelherodev
auto-formatting is working again :)

1589668790
pixelherodev
Came up with a nice organization for the register enum that makes it efficient to check IsExtended and such

1589668794
pixelherodev
:)

1589669134
ifreund
nice!

1589669421
andrewrk
pixelherodev, I'm not sure what you mean about "atomic" because it's not in any sense. the array gets resized before written to, and even appends to array lists are not atomic

1589669440
andrewrk
if `generateSymbol` returns an error, the value in `code` is ignored

1589669475
pixelherodev
I mean that either it returns unmodified or it returns resized and with all bytes written to it

1589669477
andrewrk
plus it would be really easy for the wrapping code - not the individual functions - to remember the original length of the array and shrink it in case of an error

1589669482
pixelherodev
But it doesn't really matter

1589669484
pixelherodev
Anywho

1589669486
pixelherodev
Thoughts on

1589669522
pixelherodev
The idea is that you can check width based on range, and isExtended just returns `(@enumToInt(value) & 0x08) != 0`

1589669553
pixelherodev
And id is just `@enumToInt() - (comptime_known_value_based_on_range)`

1589669559
pixelherodev
Need to shift the regs around a tad more for that though

1589669570
pixelherodev
(since e.g. eax,ecx,edx,ebx are 0,1,2,3 respectively)

1589669703
andrewrk
seems reasonable

1589670133
pixelherodev
One minor note actually

1589670137
pixelherodev
Apparently bph isn't valid?

1589670157
pixelherodev
That is, you can't access the upper byte of {bp,sp,di,si}

1589670178
andrewrk
good to know. I'll be honest I guessed and did not verify

1589670216
pixelherodev
Is there even a reason to support accessing the lower bytes of those?

1589670224
pixelherodev
Which, IIUC, is invalid in x86 mode anyways

1589670248
pixelherodev
Yeah, "bad register name" with --32

1589670258
pixelherodev
Needs a REX prefix to access :P

1589670311
pixelherodev
That's... weird

1589670344
pixelherodev
With a REX prefix, `mov IMM -> %ah` becomes `mov IMM -> %spl`

1589670357
pixelherodev
With a REX prefix, `mov IMM -> %al` becomes... `mov IMM -> %al`

1589670398
pixelherodev
Now I feel the need to actually check the manual and not just GAS, because this feels off

1589670519
pixelherodev
Meh, doesn't really matter

1589670549
pixelherodev
I'm not adding in support for the {sp,bp,di,si}l

1589670555
pixelherodev
If someone else wants to afterwards they can

1589670561
pixelherodev
But those require special-casing of their own

1589670565
pixelherodev
There's no real point IMO

1589670574
andrewrk
yeah that's fine, you can always emit a compile error that says, "TODO audit this code"

1589670585
pixelherodev
I mean, I'm not even adding them to the enum

1589670603
pixelherodev
I mean, it's not

1589670624
andrewrk
I think they should go into the enum since you could potentially want to mess with them with inline assembly

1589670625
pixelherodev
but it doesn't mesh well with the rest of the codegen

1589670638
pixelherodev
I guess

1589670649
pixelherodev
Going to make e.g. `.id` return a compile error on those though

1589670660
pixelherodev
They can't be used the way you'd use other registers.

1589670668
pixelherodev
The id is exactly the same as other registers

1589670694
pixelherodev
That is, with e.g. rax vs r8x, you have 0 and 8; bit 3 goes into REX and the 3-bit id is zero for both

1589670695
andrewrk
that sounds fine

1589670707
pixelherodev
But one has id 8 and the other has id 0, because there's a REX byte vs no REX byte

1589670722
andrewrk
idk maybe you could call the enum "StandardRegister" or something

1589670722
pixelherodev
With e.g. %sil, there's a REX byte

1589670740
pixelherodev
Which means the

1589670750
pixelherodev
So it's not extended, but it also can't be used as-is or it'll cause a code-gen error

1589670762
andrewrk
call the enum something that indicates the intention, and then leave out the regs that don't belong

1589670785
pixelherodev
It's literally all of the registers except thos efour though :

1589670833
andrewrk
GeneralPurposeRegister

1589670856
pixelherodev
It's not general purpose registers though

1589670873
andrewrk
what is the fundamental property that makes a register belong in that enum, which excludes those 4?

1589670888
pixelherodev
"Can be used in a sane manner"

1589670892
pixelherodev
SaneRegisters?

1589670895
andrewrk
something objective

1589670903
pixelherodev
It is

1589670908
pixelherodev
Consistent?

1589670926
pixelherodev
They're the only four registers that require a REX prefix with B set to zero to access them

1589670928
andrewrk
"the other registers cannot be used sanely because ____"

1589670949
pixelherodev
Which is

1589670952
pixelherodev
in theory

1589671127
pixelherodev
ConsistentRegisters?

1589671157
pixelherodev
They're the set of usable registers because they're the set that follow consistent access rules

1589672686
tdeo
does zig try to create builtin.zig in its install directory when compiling something?

1589672696
tdeo
trying to build zls through nix and getting `Unable to create builtin.zig: access denied`

1589672836
pixelherodev
Uh... that's new

1589672843
pixelherodev
I don't use nix though, so I can't help

1589672896
mikdusan
that sounds like a permissions error trying to create a file in global zig cache

1589673047
andrewrk
tdeo, zig honors the xdg cache dir environment variable

1589673051
andrewrk
XDG_CACHE_HOME

1589673076
andrewrk
there's already a nix zig package, you can probably fork it for your purposes

1589673270
oats
is there an equivalent to (s)scanf in the stdlib?

1589673346
THFKA4
tdeo: i ran into that error on guix, nix is a bit more lenient though

