1585440109
daurnimator
marijnfs_: yeah.... you can't just tell a piece of code to keep going when it threw an error...

1585440329
shakesoda
daurnimator:

1585440376
shakesoda
this isn't particularly unusual code, rhs is just offsetof

1585440696
daurnimator
`((ENetProtocolHeader *) 0) -> sentTime` isn't that a straight up null pointer dereference?

1585440977
shakesoda
it's `(size_t)&(t*)0->field)` is offsetof(t, field) heh

1585440983
shakesoda
s/it's//

1585440993
shakesoda
C is bizarre

1585441029
shakesoda


1585441042
shakesoda
but it doesn't actually access the memory

1585441135
shakesoda
i ended up building the library with vcpkg and linking that version for now

1585441136
daurnimator
huh. TIL the (old) implementation of offsetof

1585441684
Snektron
shakesoda:

1585441717
shakesoda
Snektron: wonderful, this will be useful

1585441719
shakesoda
thanks

1585441722
Snektron
Its getting late here so i kinda cut corners after i wrote partialRadixSort

1585441766
Snektron
You can see it needs a temporary buffer to sort into, and a small amount of stack memory to keep the prefix sum

1585441809
Snektron
Cheeky test showed 14.7 seconds to sort 100M u32's with std.sort.sort, and only 3 with this

1585441845
shakesoda
I'll have to try that with my other sorts too

1585441859
Snektron
you need to do some tricks to make it work for signed integers though

1585441877
Snektron
I think you can also sort floats with it, if theyre normalized

1585441945
Snektron
I can update it later with the in-place variant added

1585442077
diltsman
What are the rules for "self: *MyType" vs "self: MyType"?

1585442143
Snektron
Use *MyType if you want to write to self

1585442283
diltsman
So, drop the * when the function won't modify the object?

1585442490
marijnfs_
c and zig interaction is much nicer now

1585442535
fengb
diltsman: yep that’s true in general. Without the *, Zig can choose to pass by value or reference depending on which is faster

1585442660
diltsman
For this file:

1585442688
diltsman
As near as I can tell, the variable buffer shouldn't be const.

1585442697
daurnimator
diltsman: you don't implement a stream like that

1585442711
diltsman
Is there documentation on how to implement a stream somewhere?

1585442749
daurnimator
you use io.OutStream to get an out stream

1585442789
daurnimator
Also for an expanding buffer, see ArrayList and LinearFifo.\

1585442812
fengb
lol... the ArrayList version hasn’t been merged yet. I already recommended it :P

1585442840
daurnimator
oh wow; why hasn't it been merged

1585442865
daurnimator
oh lol, I forgot that

1585442866
daurnimator


1585442880
daurnimator
looks like there are merge conflicts; I should rebase

1585442977
diltsman
I accept that I need to rewrite to use io.OutStream.  Is there something obvious that I did that causes it to think that the buffer is const?

1585443067
daurnimator
diltsman: parameters are const.

1585443177
diltsman
Are talking about the out_stream parameter for stringify()?

1585443188
daurnimator
yes

1585443357
diltsman
Thanks.  New languages always have a bit of a learning curve.

1585443408
fengb
You’re doing it wrong™

1585443602
daurnimator
So..... anyone able to help me compile zig against a fresh llvm build?

1585443613
daurnimator
Is there a way to ask cmake for a list of build options?

1585443725
andrewrk
daurnimator, maybe this can help:

1585443769
daurnimator
I'm trying to do it without a ~/local or other common "build" directory

1585443819
daurnimator
i.e. I want to invoke zig's cmake something like: `cmake -DLLVM_DIR=../../llvm-project/build ..`

1585443998
fengb
Is it spring cleaning time?

1585444084
mikdusan
daurnimator: when you invoke cmake's build, this option is where it finds llvm stuff: -DCMAKE_PREFIX_PATH=/opt/llvm-10.0.0

1585444103
mikdusan
correction; when you invoke zig's cmake build

1585444138
daurnimator
mikdusan: > I'm trying to do it without a ~/local or other common "build" directory

1585444250
mikdusan
ok so DCMAKE_PREFIX_PATH=../../llvm-project/build

1585444283
mikdusan
but i am not sure if an "uninstalled" llvm is usable

1585444337
daurnimator
mikdusan: it is... but paths returned by e.g. llvm-config aren't going to be correct

1585444501
mikdusan
is that the goal? build llvm and do not install, then build zig ?

1585445452
marijnfs_
are there some tricks to do closures?

1585446502
daurnimator
mikdusan: yes

1585446697
shakesoda
are there any good examples for std.json

1585446710
shakesoda
the tests are kind of cryptic as examples

1585446711
daurnimator
andrewrk: thoughts on a packed bit array being created with: `[4]align(0) u2` ?

1585446718
daurnimator
shakesoda: the autojson facility?

1585446732
daurnimator
shakesoda: serialisation or deserialisation?

1585446747
shakesoda
deserialization

1585446802
daurnimator
shakesoda: the examples aren't that cryptic at all... `try parse(bool, &TokenStream.init("false"), ParseOptions{})` => parse the string "false" into a `bool`.

1585446879
shakesoda
well, i wasn't looking for the right thing it seems

1585446882
shakesoda
thanks

1585447092
daurnimator
I want to refactor it: get rid of the separate lexing and tokenisation. if you're parsing into a `bool` then if you see anything that isn't a 't' or an 'f' then you can immediately bail out

1585450712
yrashk
Is there a way for build.cfg to use a libc allocator?

1585450723
yrashk
err, build.zig :)

1585455182
junon
daurnimator: I tried doing what you're trying to do just the other day and couldn't get it to work (I'm not exactly 'bad' at cmake, either). I don't think llvm-config was handing out strange paths IIRC. I just ended up installing llvm system wide and building zig, but it would be nice to be able to do it how you're wanting to do it, too.

1585457975
daurnimator
andrewrk: 4665 rebased.

1585458139
mikdusan
daurnimator: I took a quick look at building against un-installed llvm+clang+lld build dir. While llvm-config may be quite clever, the include/ are not yet consolodated; for example clang would need includes from both that build/ and also from clang/ source tree. I suspect same for lld and maybe even llvm. libdir might be fairily straightfwd for archive.a

1585458164
daurnimator
mikdusan: yeah I ended up doing it all in a temporary directory for now :(

1585470310
kenaryn
andrewk: Does this pull request could help improve std.sort? It is based on GrailSort, another implementation of wikiSort based on the same research paper.

1585470317
kenaryn


1585471878
Cogitri
Hello. I'm sure this has been asked too often in the last days, but is there an ETA for the next release? I'm currently bumping LLVM to 10.x on Alpine Linux and Zig isn't compatible with that as of now

1585471922
Cogitri
We do have multiple versions versions of LLVM in our repos for such cases, but we don't have that for clang and lld and I'm pretty sure that mixing major versions between llvm/clang/lld is a recipe for certain doom

1585472487
daurnimator
Cogitri: april 13

1585472677
daurnimator
Cogitri: dates in

1585472748
Cogitri
Ah, okay. I suppose there aren't some seperate patches for LLVM10, so how stable is git so we can use that in the meantime?

1585472772
Cogitri
We can't really wait until April 13 + testing to upgrade LLVM10 since Alpine 3.12 is due in May and I want more than 15 days for testing all of that

1585472810
Cogitri
(The change only affects Alpine Linux Edge, the stable 3.11 release will keep using zig 0.5 w/ LLVM9)

1585473355
daurnimator
Cogitri: LLVM 10 was merged into master just a few days ago

1585473421
daurnimator
git master is about as stable as the 0.5.0 was

1585473443
Cogitri
Alrighty, I guess we'll switch to that for the time being then. Thanks!

1585479635
mps
which git commit is safe enough to upgrade zig on alpine linux

1585481349
mps
this one?

1585481492
ifreund
mps: I believe master is trending towards stability, so probably just the most recent?

1585481499
ifreund
0.6.0 is scheduled for april 13th

1585481582
mps
yes, I'm noted this morning about schedule for 0.6.0

1585481622
mps
but we need to build zig with llvm10 before alpine freeze, which will be soon

1585486284
daurnimator
hmmm, no nice way to set errno in zig?

1585486757
daurnimator
`std.c._errno().* =` I guess...

1585487471
daurnimator
no mention of `noasync` in the manual

1585496819
marijnfs
can i pass a switch statement to a function as an argument?

1585497068
ifreund
if you put it inside a function, sure

1585497070
ifreund
3

1585497405
marijnfs
to make an anymous function it has to be defined in a struct right?

1585497421
marijnfs
like .{ fn bla() void {stuff}}.bla?

1585497432
fengb
Yeah

1585497459
fengb
struct { fn blah }.blah

1585498211
pmwhite
Aren't switch statements treated as expressions?

1585498242
fengb
They can be yes

1585498284
pmwhite
So couldn't you pass a switch statement directly as an argument to a function?

1585498306
fengb
You should be yes

1585498337
ifreund
i thought the goal was to apply the switch statement within the function

1585498403
pmwhite
you could be right that that was the question.

1585498449
mps
andrewrk: I'm preparing zig upgrade on alpine linux, is the fix-build.zig.patch (you posted to me some time ago) is still needed?

1585498543
ifreund
mps: I think that was fixed by

1585498607
mps
ifreund: thanks for info, will test when the llvm10 build on alpine

1585498620
ifreund
cool, no problem

1585498836
marijnfs
pmwhite: what type should the argument be then?

1585498845
marijnfs
to pass a switch

1585498879
ifreund
you wouldn't be passing a switch, but the result of a switch. so what ever the switch breaks with

1585498917
pmwhite
yeah, ifreund is right. I misunderstood what you are asking.

1585498950
marijnfs
yeah i see, you can't use the switch as a function type or something and pass it

1585498978
pmwhite
for example, `f(switch(x) { else => 5 })` is equivalent to `f(5)`

1585499009
ifreund
not currently, though I think nicer anon functions are planned

1585499022
andrewrk
mps, can you try it with no patches and tell me if it works?

1585499078
mps
andrewrk: ofc, but waiting till llvm10 is built. when it finish I'll test and inform you

1585499525
andrewrk
my goal is no patches needed on any os

1585499684
mps
nice goal :)

1585504650
shakesoda
Snektron: this radix sort is significantly faster than the one I wrote

1585504658
shakesoda
very nice

1585505251
Snektron
:) nice

1585505252
TheLemonMan
andrewrk, yo

1585505274
Snektron
Its such a nice algorithm too

1585505328
Snektron
I took a look at porting the GPU version, but it requires some intrinsics which i think are avx512

1585505410
andrewrk
yo

1585505438
Snektron
yeah you need a scatter operation, and those were only added in avx 512

1585505472
Snektron
(even though the scatter would never cause memory problems)

1585505553
TheLemonMan
andrewrk, wrt #4840, should we just allow the user to index the sentinel as any other element?

1585505589
TheLemonMan
the comptime machinery doesn't reserve a slot for the len+1 element as it assumes the sentinel is there and is correct

1585505590
andrewrk
I was just about to look into that

1585505611
TheLemonMan
wunderbar, I'll jump to the next question then

1585505706
TheLemonMan
NetBSD libc requires us to use a few non-standard names (eg. fstat -> __fstat50), I did that for a few occurrences that happened to break the tests but I've discovered that there are many more

1585505771
TheLemonMan
I'm not sure if we can do something better than the status quo (select the symbol name with a switch and then call it with @field(sym_name)(args...)

1585505804
andrewrk
2 things: (1) setting the sentinel to 0 manually should not be required; it is supposed to be set by the variable declaration. (2) maybe it should be allowed to "mutate" comptime memory, even if the pointer is const, when the value would not be changed?

1585505850
andrewrk
regarding weird names, could we perhaps put the extern name correctly in c.zig and then make an alias?

1585505934
TheLemonMan
hmm, thinking more about the sentinel issue, what does &array[sentinel_idx] return?

1585506036
TheLemonMan
hmm, we can put the versioned names in c/netbsd.zig (or whatever the path is) and then have std/c.zig pick those and define some aliases if the os is NetBSD

1585506717
andrewrk
yeah that makes sense to me

1585506742
TheLemonMan
lel, all the sentinels have the same address

1585506774
andrewrk
hmm that's a bug

1585506788
TheLemonMan
not really, llvm generates a different constant for each one

1585506797
TheLemonMan
but they have a completely different address

1585506808
andrewrk
the sentinel is supposed to be in memory adjacent to the rest of the array

1585506815
TheLemonMan
they're in .rodata or .bss or god knows where

1585506851
andrewrk
it would be legal for a zig program to ptrtoint and subtract to read data from the array before the sentinel

1585507373
lunamn
andrewrk: is there a specific reason why std.net.Address.parseIp6 does not support alphanumerical scope IDs (e.g %wlp3s0)? I'm tracking down how to do it and it involves creating sockets and doing ioctls (how musl does it), but I'm not sure if that should be put in parseIp6...

1585507438
andrewrk
lunamn, hmm it seems like a code smell that parsing an addr would involve any syscalls. maybe that should be a different function called "resolveIp6" or something

1585507713
lunamn
andrewrk, would that be an okay change to do? I think we can still peek parseIp6, but guide everyone to using resolveIp6

1585507725
lunamn
s/peek/keep

1585507946
andrewrk
that sounds reasonable to me

1585508074
ifreund
hmm this feels a little weird, but i think it's actually a pretty clean way to do logging

1585509001
TheLemonMan
ifreund, hm, iirc the enum to ordinal mapping is left unspecified for non extern enums

1585509060
ifreund
guess I should probably explictly set them then, it did seem to work as intended from brief testing though

1585509158
TheLemonMan
the compiler atm doesn't take advantage of none of those extra degrees of freedom

1585509325
ifreund
i quite like the syntax of `Log.Error.log("I messed up", .{});`

1585510279
andrewrk
ifreund, you may be interested in

1585510295
frett27
hi, i switched to llvm - 10, on master, i got an undefined reference at link : référence indéfinie vers « getPollyPluginInfo() , what may i missed ?

1585510317
andrewrk
frett27,

1585510368
frett27
andrewrk, ok thank's

1585510420
Sphax
Hello. I'm wondering if there's an easy way that I missed to get a enum value from its name

1585510484
mikdusan
std.meta.stringToEnum() ?

1585510596
frett27
works like a charm :-)

1585510626
mps
andrewrk: build log on alpine edge is here

1585510648
mps
source is zig commit 86795c03f918dbcc0fc06811cc7c496d275deae1

1585510869
Sphax
mikdusan: thank you

1585510913
mps
oh, looks like lld is not yet upgraded

1585510947
mps
will check tomorrow again

1585511202
ifreund
andrewrk: that looks pretty neat, are you hinting that I should implement it :D

1585512857
junon
andrewrk: does the zig compiler have suggestive functionality/autocomplete to any degree? Would love to integrate it with ncm so I get hints inside my editor.

1585514642
Snektron
Since the zig parser is part of the standard library, i think you can implement autocomplete to a certain degree pretty easily

1585514713
Snektron
Although i guess the parser needs to be able to recover and im not sure if it can do that

1585514756
pmwhite
At the very least, it could autocomplete from the last successful parse, which is not useless at all.

1585516178
pixelherodev
Figured out why Zig wasn't building

1585516194
pixelherodev
Due to the tweaked ebuilds not installing correctly, I had to manually install the Clang libs

1585516205
pixelherodev
I forgot to rerun `ninja install` in the abi_64 folder

1585516217
pixelherodev
The only libs it was finding were the 32-bit ones :P

1585516221
pixelherodev
Got it built now :D

1585517517
pixelherodev
There's a bit of overhead for the network parts, but overall it still makes compilation faster :D

1585517542
pixelherodev
Pushes `src/` and `build.zig` over, runs `zig $@`, pulls `zig-cache` back

1585517580
pixelherodev
Time for just the build locally is 5.216 seconds, time to do that is 4.062, so this actually helps

1585517871
afontain_
Did somebody try to use SDL from Zig?

1585517880
pixelherodev
Andrew did IIRC

1585517882
pixelherodev
In one of the streams

1585517965
afontain_
I think I hit one current limit of the C import logic

1585517977
afontain_
"Semantic Analysis [593/1011] zig-cache/o/Vqx3T6ZY-WyTESagrpdAPxsW2kJwausDklI4gTy1zoKM6cy_U8uRQDPPj0gaApmu/cimport.zig:12362:61: error: unable to evaluate constant expression"

1585518008
afontain_
It happens basically as soon as I call SDL_LoadBMP

1585518060
afontain_
it appears to be working for simpler tasks, like coloured rectangles

1585518079
ikskuh
how do you call SDL_LoadBMP?

1585518109
afontain_
(the second line of the error message:) "pub inline fn SDL_LoadBMP(file: var) @TypeOf(SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1)) {"

1585518121
adamkowalski
do we have anything in the standard library for reading csv

1585518130
ikskuh
adamkowalski: yes, std.mem.tokenize

1585518134
ikskuh
and std.mem.separate

1585518149
ikskuh
afontain_: ah looks like SDL_loadBMP is not a function, but a macro

1585518157
ikskuh
try calling the macro content by-hand

1585518184
afontain_
const loaded_surface = SDL_LoadBMP(path);

1585518201
afontain_
with `path: [*:0]const u8`

1585518205
ikskuh
SDL_oadBMP_RW(SDL_RWFromFile(path, "rb"), 1)

1585518225
adamkowalski
ikskuh: thanks! I'll use those, but I was hoping we had something that paved over all the weirdness of csv files haha

1585518295
afontain_
oh, that's quite smart

1585518311
afontain_
why didn't I thought of that

1585518320
afontain_
it appears to work

1585518397
ikskuh
yeah macro translation in zig is rough

1585518407
ikskuh
but it's better than nothing

1585518612
afontain_
is there an equivalent to returning a tuple (python) or a std::pair (C++) ?

1585518625
ikskuh
return a struct

1585518639
afontain_
if there isn't, I could just pass a pointer à la C

1585518658
ikskuh
afontain_: use structs

1585518662
ikskuh
it's just "not a pain"

1585518708
afontain_
hmm, structs can be anonymous

1585518719
ikskuh
fn multireturn() struct { a: i32, b : i32 } {

1585518719
ikskuh
return .{ .a = 10, .b = 20 };

1585518719
ikskuh
}

1585519330
oats
hmmm, regular tuples would be a nice feature

1585519357
oats
fn multireturn() (i32, i32) { return (10, 20); }

1585519369
oats
I get that there's other priorities though at the moment :P

1585519391
ikskuh
there's a proposal for that already

1585519950
ikskuh
how do i fail a process with build.zig?

1585519958
ikskuh
should i just @panic or?

1585520124
fengb
oats:

1585520663
pixelherodev
The one problem with my remote zig solution is that it's generating LLVM 10, and my parser is 9-only for now :(

1585523433
Snektron
Did llvm ir change a lot?

1585523657
pixelherodev
Nah, but there's now a willreturn function attribute :P

1585523670
pixelherodev
And I don't want to do partial lexer fixes

1585524358
yawniek
hi, im new to zig. trying to use it to compile mruby on macos. but i get fatal error: 'stdarg.h' file not found. isnt that included with zig?

1585524382
ikskuh
it is, but you have to use a libc

1585524387
ikskuh
what is your current target?

1585524407
mikdusan
yawniek: have you both recently upgraded xcode and used zig before that xcode upgrade?

1585524434
yawniek
mikdusan: i dont think so

1585524450
yawniek
i simply set CC to zig cc and nothing else so far

1585524465
mikdusan
one sec. i have mruby on my machine let me try

1585524517
yawniek
(actually i want to compile the h2o server but it failed at mruby and plain mruby does the same)

1585524633
mikdusan
try this first: rm ~/Library/Application\ Support/zig/stage1/native_libc.txt

1585524736
mikdusan
btw, mruby master worked for me: export CC and CXX with `zig cc` and `zig c++` respectively; note you will see warnings about "-MD" option don't worry about that for now

1585524923
yawniek
no luck. i dont have native_libc there (installed zig via homebrew)

1585524948
mikdusan
`zig version`

1585524985
yawniek
0.5.0 (just installing head now)

1585525016
yawniek
failed :/

1585525032
mikdusan
just grab latest build of zig from website

1585525065
pixelherodev
There a way to force the progress output on a non-TTY?

1585525227
yawniek
mikdusan seems to work with that one, thanks!

