1588296562
foobles
woah wait

1588296595
foobles
you don't always need a phi instruction to "converge" 2 different writes to the same variable from different branches?

1588296619
foobles
because I am looking at some LLVM IR directly, and each block just writes to an existing variable

1588296647
foobles
instead of creating a new one and assigning it phi

1588296724
foobles
I named all of my local variables `foobles_varname` to make them easily searchable

1588296754
foobles


1588297398
cow-orker
SSA does not apply to memory?

1588297553
foobles
I guess I don't understand when to use a store instruction vs making a new variable for ssa

1588297588
foobles
i thought the point of ssa was to represent the program in a way such that nothing is mutable

1588297696
cow-orker
in a perfect world....

1588298194
foobles
huh, i just read "A key design point of an SSA-based representation is how it represents memory. In LLVM, no memory locations are in SSA form, which makes things very simple. This section describes how to read, write, and allocate memory in LLVM."

1588298203
foobles
but isn't everything in memory?

1588298259
fengb
Memory is not memory üëç

1588298260
fengb
ü§î

1588298261
fengb
Wrong emoji

1588298319
foobles
......... ;(

1588298452
cow-orker
llvm values are not "in memory".  Or, they may end up there, but maybe not.

1588298501
cow-orker
better: they're just stored in registers

1588298658
foobles
interesting

1588298682
foobles
so the actual llvm values (like the stuff prefixed with % ) are not in memory

1588298698
foobles
but what they sort of "refer to" are

1588298701
foobles
but they aren't pointers

1588298717
foobles
like in the example I posted, all of them are initially assigned with alloca

1588298744
foobles
so you can't re-assign to %0 or something, but you can write into its memory

1588298943
cow-orker
yes, %foobles_result is subject to SSA, but the memory it points to (on the stack) it not

1588299495
foobles
thanks, this will take some getting used to :v

1588299722
cow-orker
so this is SSA wrt LLVM, other backends may differ

1588300015
foobles
haskell as a backend for guaranteed, for real, single assignment O_O

1588300822
cow-orker
Haskell is nice, but beyond STG (ghc) there are different backends offering different strategies wrt compilation... :-)

1588302955
foobles
what does the handle_is_ptr() function in codegen.cpp do?

1588302971
foobles
it seems to do more than just testing if the type is a pointer type

1588304583
foobles
like error unions, regular unions, and some non-pointer optionals still quailfy

1588304715
pmwhite
is there a way to take function parameters that may or may not fail?

1588304727
foobles
what do you mean?

1588304737
foobles
like accepting an error union?

1588304754
pmwhite
My trouble is that if I specify the parameter type as anyerror!void, I can no longer pass in void functions.

1588304768
pmwhite
That is, I can't pass in functions that are guaranteed to not fail.

1588304793
pmwhite
Are those not implicitly castable?

1588304803
foobles
i think it should be

1588304816
foobles
why do you want to accept error unions?

1588304884
pmwhite
I'm not sure we're on the same page. I'm not trying to have error unions as parameters. Maybe I should give an example...

1588304922
pmwhite
`fn A(f: fn() anyerror!void) anyerror!void { f(); }`

1588304951
pmwhite
`fn nop() void {}

1588304956
foobles
Ooooh i see

1588304959
pmwhite
`A(nop);` - I don't think that works.

1588304970
foobles
yeah, function pointers can't cast like that

1588304983
foobles
since that would require creating an entirely new function

1588304990
foobles
bc of allocations and all that

1588305009
foobles
so you need to write a different noop with your intended signature

1588305024
foobles
#1717 should make this easier in the future

1588305123
pmwhite
I guess I don't really know the internals at all, but I would expect the same assembly or whatever would be output regardless of the error-ness of the function.

1588305152
pmwhite
I mean, the same instructions would be used to call the function.

1588305261
foobles
no, since if it returns an error union, the function has to be represented differently

1588305269
foobles
to actually return a value saynig "no error"

1588305278
foobles
instead of just returning no value

1588305478
pmwhite
oh, i guess so.

1588306870
foobles
so, what does the handle_is_ptr() function in codegen.cpp do?

1588307608
mikdusan
foobles: looking at the handle_is_ptr() and seeing which types

1588307645
foobles
ohhhh huh

1588307679
foobles
oh I see: maybe handle_is_ptr is saying whether it will be passed by pointer or by value to functions and such?

1588307717
foobles
I also just found this comment:

1588307731
foobles
For functions that have a return type for which handle_is_ptr is true, a result location pointer is the secret first parameter ("sret"). This instruction returns that pointer.

1588307799
mikdusan
yeah that makes sense too; we don't have result-location for u32 ...those are just copied

1588307925
foobles
ok cool!

1588307936
foobles
wow cool insight, thanks so much that will defintely clear things up

1588308150
mikdusan
the handle is in superposition; and handle_is_ptr measures it. we have quantum tech!

1588325875
ikskuh
hm

1588325890
ikskuh
i think the decision to use NtCreateFile instead of CreateFile will create problems in the long term rum

1588325901
ikskuh
for one, it's not possible to open non-files with this

1588325947
ikskuh
andrewrk, daurnimator: what's the correct way to open "COM3" or "\\.\COM3" or "\Global??\COM3"

1588325963
ikskuh
COM3 is not found, others either yield unreachable or BadPathName

1588327608
alexnask
Dealing with windows T_T_

1588327618
alexnask
gl

1588327659
ikskuh
alexnask: CreateFile works‚Ä¶

1588327669
ikskuh
so i wonder why NtCreateFile is used

1588328140
FireFox317
Its a lower level api that allows for more configuration. I think it was used for stuff like seeking, not completely sure tho

1588328481
mikdusan
ikskuh: just to confirm escaped the string? "\\\\.\\COM3"

1588328494
ikskuh
mikdusan: passing in the string from CLI

1588328619
ikskuh
but tried with hardcoded and escaped paths as well

1588345034
sarmonsiill
Hi! I've been curious about Zig for quite some time but I've haven't been able to get into it yet. Anyone got any resources to get started? Is it the official docs or something else? I wanna find examples for how to handle files for example

1588345569
afontain_
I just started reading the official doc

1588345719
sarmonsiill
afontain_: thanks, I'll try doing that too. I'm a php-hacker from the start and then a Go-lover since about 6-7 years. Don't know if that's against me or in favor :)

1588345799
afontain_
Well, gotta start somewhere ^^

1588345818
blueberrypie7
sarmonsiill: you can get an overview from just the main page:

1588345857
sarmonsiill
blueberrypie7: awesome info. thanks! I've checked some of those sources but can't find much info on how to interact with files. Have I missed it..?

1588345940
blueberrypie7
are you unsure how to make use of the standard library in your project?

1588346873
Nypsie
Alot of informating regarding file interaction can be found here:

1588347258
sarmonsiill
Nypsie: awesome, thank you!

1588347330
Nypsie
You're welcome. You'll find yourself looking into the source code alot, but in the end it will help you understand the language alot better than any tutorial could.

1588348472
Snektron
<mikdusan "ikskuh: just to confirm escaped "> ah, the elder backslash

1588348820
pmwhite
no iter() for arraylists?

1588349345
fengb
Don't need it anymore. Just do `for (list.items)`

1588349443
companion_cube
by what magic?

1588349992
fengb
list.items always stores the slice of added items, and internally it breaks out of the slice

1588350009
fengb
Previously it stored a slice of the available size so we needed the extra methods

1588350053
fengb


1588350054
companion_cube
ahhh, nice.

1588350072
companion_cube
so when pushing a new element, you always modify the slice

1588350083
fengb
Yep

1588350106
companion_cube
fresh take, I guess

1588350139
fengb
Embrace the unsafe :P

1588350166
companion_cube
feels weird, as I've been writing a bit of rust, but well

1588350303
ikskuh
companion_cube: it's not that it gets really unsafe at any point

1588350451
companion_cube
you just have a realloc-like of the slice even if the capacity is enough

1588350498
fengb
We know better than the compiler :P

1588350514
fengb
It's not proveable but still auditable

1588350526
companion_cube
(that's the idea behind rust's unsafe, btw)

1588350552
ikskuh
i like that you can do just

1588350559
ikskuh
slice = slice.ptr[0..slice.len + 1];

1588350564
ikskuh
‚Üí makes slice 1 larger

1588350580
fengb
Right, which is why I mentioned embracing the unsafe

1588350591
fengb
I know in Rust, it can be frowned upon to do this kind of stuff. We just don't care >_>

1588350607
fengb
Maybe not always be a good attitude heh

1588350659
ikskuh
hmm

1588350665
ikskuh
anyone firm with the Dir api?

1588350674
ikskuh
i want to save-and-restore my cwd(

1588350677
ikskuh
cwd()

1588350801
Nypsie
Currently using Dir api here

1588350808
companion_cube
in rust it'd be more annoying indeed

1588350882
ikskuh
there's a lot of functions, but none to change cwd?

1588350978
Nypsie
There's OpenDir that returns a new Dir object

1588350994
Nypsie
OpenDirList if you're using master

1588351081
ikskuh
hm

1588351093
ikskuh
then it looks like i have to change some API :D

1588351098
ikskuh
and pass the dir parameter explicitly

1588351170
Nypsie
You can also use chdir to set the current working directory towards the given path

1588351188
Nypsie
And then use cwd() as you're used it.

1588351199
Nypsie
Part of the std.os API

1588351247
ikskuh
ah no

1588351252
ikskuh
it's better to use dir handles i think

1588351721
Nypsie
Suppose so, but don't know the context of what you're trying to achieve :p

1588351733
Nypsie
Using dir handles myself

1588351753
ikskuh
and i want recursive file inclusion

1588351760
ikskuh
with correct relative-path handling to each file

1588351967
Nypsie
Ah gotcha

1588351983
ikskuh
current wishlist:

1588351998
ikskuh
get a path relative to one dir relative/absolute to another :D

1588354331
ikskuh
looks like openDir isn't that stable :D

1588354350
Nypsie
You're getting errors? I haven't gotten an error yet

1588354393
ikskuh
unexpected errno: 9

1588354393
ikskuh
[19:29]

1588354433
ikskuh
nah, i was just stupid

1588354624
pixelherodev
Oh this is cool

1588354628
pixelherodev
Don't know why I was motivated to try but

1588354636
pixelherodev
`grep -w N /usr/include/asm-generic/errno-base.h`

1588354655
pixelherodev
For the lower numbers, errno-base.h, for higher ones, errno.h

1588354803
ikskuh
yeah it's a horrible structure

1588357973
foobles
what does the `initializing` tag mean on a zigvalue?

1588357980
foobles
i can sort of assume what it means

1588357985
foobles
but i dont know when it is enabled

1588358061
foobles
err, IrInstGen i mean

1588358136
nephele
Someone have an example of openssl used with zig? I want to write a server application using DTLS over SCTP, seems my only options are openssl or wolfssl (unless zig has dtls itself heh)

1588359271
andrewrk
foobles, it's true when the instruction is being used as part of an initialization expression such as Foo{.a = b} or [_]T{a, b}

1588359317
andrewrk
I can't remember why exactly that's needed, would have to look at the logic to remember

1588359860
foobles
ok alright, thanks

1588359865
foobles
so intialization of a struct?

1588359878
foobles
or just `var x = a + b;`

1588360013
andrewrk
not sure

1588360076
foobles
alright, thanks '=D

1588365234
gpanders
Hi all, how do I convert a [*]u8 into []u8? In particular, I am reading arguments using std.os.argv, which returns type [][*]u8, but many of the APIs I'm trying to use want a []u8. I've searched through the docs and haven't been able to find anything on this

1588365280
ikskuh
gpanders: argument parsing is better done via std.process.argsIterator or something

1588365292
ikskuh
but to answer the initial question: slice it!

1588365301
ikskuh
[*] has no length, so you need to slice the pointer to get a slice:

1588365305
ikskuh
ptr[0..length]

1588365328
ikskuh
self-promotion: there is zig-args that does the args parsing in a "standard manner":

1588365329
gpanders
ikskuh: excellent, thank you. And I'll look into the std.process.argsIterator too

1588365346
ikskuh
even if you don't use my lib, you can use to it soo how args work

1588365372
gpanders
Very cool, thanks!

1588365422
alexnask
std.mem.spanZ also does [*:0]u8 -> []u8

1588366089
ikskuh
we don't have a generic http-request api yet, right?

1588366102
ikskuh
(even if it's external)

1588366244
mikdusan
ikskuh:

1588366253
marler8997_
if I install "gcc_multi" on my nixos box then I can no longer build Zig, it fails with undefined symbols while "Linking CXX executable zig0".  Does this sound like an issue or do you think there's nothing Zig can do?

1588366277
ikskuh
mikdusan: thanks! :)

1588366329
marler8997_
here's the linker output, looks like it can't find symbols that would probably come from LLVM:

1588366496
ikskuh
oh, interesting! h11 does not have network support itself

1588366724
ikskuh
mikdusan: and there goes my dream of a quick hack :D

1588366732
mikdusan
oh well :(

1588366734
ikskuh
github doesn't allow http API

1588366743
ikskuh
so‚Ä¶ linking libcurl-easy it is ‚Ä¶ :D

1588369891
foobles
huh, I just checked, and optional unwraps will NEVER be constructed with 'intializing' flag true

1588369929
foobles
ir_build_optional_unwrap_ptr is called with `initializing` hardcoded to false in every instance

1588370515
andrewrk
dead code in stage1 would not be surprising given how much churn the codebase goes through

1588370688
mikdusan
foobles: this looks to be redundant residual of src/gen instruction split; good find. #5247

1588370815
foobles
huh, thanks for doing that!

1588374377
fengb


1588374827
andrewrk
that's the idea

1588374841
ikskuh
so zig can be bootstrapped with tcc?

1588374879
fengb
So we‚Äôll have feature parity with V? üôÉ

1588374923
ikskuh
fengb: i have my /slap ready üòÇ

1588376380
fengb


1588376445
ikskuh
use () for generics!

1588376454
fengb
ü•≥

1588376477
fengb
I like his arguments against <> but I don‚Äôt like how he mandates []

1588376540
ikskuh
also i like having [] for indexing

1588376541
ikskuh
array(0) = 23.42

1588376545
ikskuh
this is just a function invocation

1588376583
ikskuh
also, i fucked up my parser :(

1588376602
ikskuh
now i have to write this:

1588376604
ikskuh
push 0-1

1588376613
ikskuh
because ‚Ä¶ '-' is a binary operator

1588376909
Snektron
Petition to add ¬†‚ü® bra | ket ‚ü© notation to standard keyboards

1588376960
foobles
how about the „Äê„Äë brackets from chinese keyboards

1588376995
ikskuh
these look significant

1588377004
ikskuh
var str = ¬´quote¬ª;

1588377092
ikskuh
or "german" quotes for strings:

1588377096
mikdusan
var str = ‚Äúinterpolate‚Äù; var s2 = ‚Äònointerpolate‚Äô;

1588377103
ikskuh
var str = ‚Äûhello‚Äú;

1588377151
ikskuh
var array = ‚Äπ1,2,3‚Ä∫;

