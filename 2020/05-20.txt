1589932950
stripedpajamas
is there an idiomatic way to pass []const u8 into functions that accept []u8 ?

1589932989
pixelherodev
Don't?

1589932998
pixelherodev
More seirously, what's the context?

1589933002
pixelherodev
s/seiro/serio

1589933038
pixelherodev
There's definitely no idiomatic way, because that's not supposed to happen

1589933050
pixelherodev
Where is the string coming from? What's the function doing with it?

1589933138
stripedpajamas
hmm sorry, still exploring the language. i wrote a func that operates on []u8 and in my test i was using a string literal as input, which doesn't work ofc. instead i tried passing a manually created [_]u8{a, b, c,...} to it, but it complains that the function expects []u8 and not [11]u8

1589933179
pixelherodev
Yeah, `[_]u8` != `[]u8`

1589933193
pixelherodev
`[_]u8` means "an array of u8s with the ssize inferred by the compiler"

1589933195
pixelherodev
s/ssize/size

1589933205
pixelherodev
`[]u8` is a

1589933219
pixelherodev
`&[_]u8` gives a slice though

1589933221
pixelherodev
IIRC

1589933239
fengb
Technically it gets an array pointer which coerces into a slice

1589933245
pixelherodev
^

1589933324
stripedpajamas
ok i am still a little confused. if i have a func that accepts only []u8, how would i go about testing it?

1589933344
stripedpajamas
the couple of combinations of input data i've tried to make are all rejected due to type expectations

1589933385
pixelherodev
What you can do is allocate a mutable copy, and pass that in

1589933391
pixelherodev
See `std.mem.dupe`

1589933407
pixelherodev
e.g. `std.mem.dupe(allocator, u8, "literal");` gives a `![]u8`

1589933410
stripedpajamas
i see i see

1589933413
fengb
I’d recommend switching to `[]cost u8` if you aren’t mutating it

1589933416
pixelherodev
DOn't forget to free it though :)

1589933420
pixelherodev
^ that too

1589933423
fengb
Const

1589933423
daurnimator
stripedpajamas: e.g. `var foo: [50]u8 = undefined; yourfunc(&foo)`

1589933480
stripedpajamas
i was thinking []const u8 would signal (to humans) that a string is expected. is it more correct to say that []const u8 simply signals an immutable byte array ?

1589933494
pixelherodev
Yes

1589933508
stripedpajamas
got it

1589933509
pixelherodev
That typically represents a string, yes, but an

1589933509
stripedpajamas
ok

1589933517
pixelherodev
[]u8 is similarly used to represent

1589933554
fengb
Or just bytes. We don’t have real strings yet

1589933586
pixelherodev
I mean

1589933589
pixelherodev
Bytestrings are strings

1589933600
pixelherodev
It's a bunch of *bytes*...

1589933602
pixelherodev


1589933616
fengb
Most things are UTF8 or ascii by convention but nothing is guaranteed yet

1589933654
pixelherodev
True

1589933664
oats
Any chance that zig fmt could clean up unused top-level non-pub consts? :)

1589933667
pixelherodev
Proposal: make UTF-8 the default :P

1589933671
oats
anything like that been brought up before?

1589933687
pixelherodev
I mean, maybe, but people probably wouldn't want that

1589933694
pixelherodev
What I'm thinking is we should have a separate utility

1589933696
pixelherodev
`zig lint`

1589933710
pixelherodev
Instead of formatting, it finds things like that, and lets the user decide what to do with them

1589933718
pixelherodev
e.g. `zig lint --cleanup-unused-consts`

1589933734
oats
mm, that'd be nice

1589933740
pixelherodev
With the explicit understanding that the linter is only intended to provide advice to humans

1589933749
fengb
There’s a few discussions for UTF8. Most of the ideas leans towards a userland type

1589933750
pixelherodev
and should never be used as the be-all and end-all source

1589933760
pixelherodev
I support that

1589933764
pixelherodev
That's not a bad idea

1589933786
fengb
A lot of low level stuff tends to do better with bytes without encoding

1589933813
fengb
e.g. we can do Unicode formatting already even though the stdlib is wholly unaware

1589933835
fengb
Of course... then somebody wants to uppercase things and things break >_>

1589933837
pixelherodev
True...

1589933908
andrewrk
upper casing things considered harmful

1589933968
pixelherodev
Considered harmful essays considered harmful

1589934082
stripedpajamas
oh its all making sense now. since []u8 coerces to []const u8 the function is usable with []u8 and []const u8. whereas how i had it before, only accepting []u8, it was a pain to test

1589934119
pixelherodev
:)

1589934121
fengb
Yep, const is generally easier to work with in general

1589934135
fengb
Generally general. I’m a pro at English

1589934274
pixelherodev
:)

1589936886
andrewrk
my changes to the self-hosted parser in this branch today:

1589936891
andrewrk
throughput: 45.6 MiB/s => 55.6 MiB/s

1589936897
andrewrk
maxrss: 359 KB => 342 KB

1589936930
andrewrk
I wonder what a realistic target throughput value is, how this is to the theoretical max. I'm sure there is still a lot of room for improvement

1589937342
fengb
Wow, is that constant memory for the parser?

1589937420
andrewrk
this is using the gotta-go-fast benchmark. maxrss measures the peak resident memory, which means the maximum of how much the process ever used. that benchmark iterates over the entire std lib and parses every file

1589937633
andrewrk
ok I tried making TokenIndex u32 instead of usize, and somehow it results in worse throughput

1589937644
andrewrk
riddle me this batman

1589938238
oats
are there equivalents to std.math.{add,sub,mul} for floating point types?

1589938344
pixelherodev
andrewrk: on a 64-bit target?

1589938353
pixelherodev
Could be that LLVM isn't promoting to 64-bit

1589938359
pixelherodev
and 64-bit ops can be faster than 32-bit

1589938562
andrewrk
pixelherodev, ya

1589939296
foobles
YES!!!! FINALLY TESTS PASSING!

1589939311
andrewrk
woot woot

1589939317
foobles
:D

1589939329
foobles
ill submit a new pr soonish i just want to clean it up a little

1589939352
andrewrk
wonderful

1589939626
foobles
thanks :)  on my last PR, you mentioned adding tests for ?*T == *T

1589939643
foobles
but that already is in the language, so should I put that in a seperate test?

1589939655
foobles
since that logic is fundamentally different for non-pointer optionals

1589939725
andrewrk
no, my mistake, if it was already tested, no problem

1589939746
[rg]
didn't meet the requirements for mlh, where should new folks start browsing the code base?

1589939775
dimenus
[rg]: what do you want to do?

1589939817
[rg]
parser stuff, os stuff, anything really

1589939837
[rg]
interested in parsing though, most experience there

1589939870
[rg]
or learning more about assembly :-)

1589940052
pixelherodev
Assembly's always fun :)

1589940072
pixelherodev
I haven't heard back yet, so I'm still hopeful

1589940079
GreaseMonkey
except for when your codebase is large, then it's kinda horrid

1589940178
dimenus
if you're going to learn assembly, i'd recommend aarch64 or risc-v, going to need a debug backend for other targets :)

1589940187
pixelherodev
Uh

1589940196
pixelherodev
ixnay on the aarch64

1589940202
pixelherodev
I'm going to be tackling that in the morning :)

1589940218
pixelherodev
Unless you want to, in which case I can work on something else instead?

1589940237
[rg]
no go ahead

1589940245
[rg]
risc-v is intersting too

1589940253
pixelherodev
Cool, thanks :)

1589940294
[rg]
syscall stuff is all done?

1589940308
pixelherodev
Which syscall stuff?

1589940313
pixelherodev
You mean in the standard library?

1589940367
[rg]
yeah

1589940378
pixelherodev
fPretty sure it is

1589940386
pixelherodev
There might be bits and pieces here and there though

1589940396
[rg]
I mean zig has too since it competes with c right

1589940459
pixelherodev
It definitely has syscalls in place

1589940486
pixelherodev
e.g. std.os.write uses the write syscall

1589940635
[rg]
does zig use a posix emulator for windows?

1589940701
dimenus
[rg]: it uses mingw if you target gnu but otherwise no

1589940737
[rg]
ok, thanks for anwering my questions

1589940834
dimenus
at one point i contributed some code to use COM to find the MSVC CRT/SDK but i'm not sure if it's still being used

1589940840
dimenus
MSVC tends to make drastic changes

1589940872
dimenus
i'm now on linux full time (including

1589940892
dimenus
**including work

1589940934
pixelherodev
Nice :)

1589941036
dimenus
pixelherodev: it's been positive overall, i did buy a hidpi monitor recently though and that's been more challenging

1589941044
dimenus
sway/wayland is almost there but X11 is a mess

1589941062
dimenus
where as windows works just fine with mixed dpi

1589941097
pixelherodev
Sway = <3

1589941509
pixelherodev
... I'm about to send a 1-line PR>

1589941512
pixelherodev
It only changes comments

1589941515
pixelherodev
CI is still going to run

1589941518
pixelherodev
:P

1589942078
dimenus
you should apologize to andrewrk :)

1589942344
companion_cube
git push -o skipci? :p

1589943327
pixelherodev
I don't think that exists

1589943329
pixelherodev
It's github, not git

1589944425
companion_cube
ah thought it was sr.ht

1589944623
pixelherodev
lol :P

1589944632
pixelherodev
I don't think ziglang is actually on there for much beyond CI

1589944642
pixelherodev
Ahhh wait, sr.ht accepts an option like that?

1589949051
scientes
andrewrk, I created a perfect hash that 3X the tokenizer speed

1589949066
andrewrk
cool

1589949067
scientes


1589949093
scientes
or rather, a perfect bisection generator

1589949100
scientes
with interpreter

1589949135
scientes
the idea is to allow switch on [:0]u8

1589949177
scientes
I wasn't going to mention it, but i see you are working on speeding up the parser

1589949509
fengb
Would an O(1) jump table help? Swhash is designed for this usecase:

1589949536
fengb
Max length of 16 >_>

1589949541
scientes
where is the code?

1589949558
scientes
oh i see, its a hash

1589949558
fengb


1589949566
fengb
It's a perfect hash

1589949573
scientes
yeah, this is a perfect bisection

1589949577
scientes
so actually not a hash

1589949590
scientes
which avoid degenerative cases that gperf suffers from

1589949621
fengb
This has almost no logic for hashing

1589949637
fengb
Just relies on letters = bytes up to u128

1589949652
fengb
No cache because there's nothing to do other than a memcpy

1589949659
scientes
it also isn't flexible

1589949678
fengb
It's flexible... up to 16 chars

1589949682
scientes
I support all [:0]u8 (which no embedded nulls)

1589949726
scientes
and it is guaranteed to run in O(log n) time, with O(n log n) construction

1589949733
scientes
and O(n) space

1589949787
scientes
the only issue is that it is a big ram-heavy (4KB interpreter), so it needs to be a hot code path to be worth the cache

1589949866
scientes
oh, and it needs @popCount() hardware support

1589950012
scientes
fengb, llvm has a O(1) jump table, you just have to switch on a dense set of case statements

1589950301
scientes
what you are doing does not generate a dense switch, so it isn't O(1) jump table, as llvm can't really generate sparse jump tables

1589957443
GreaseMonkey
well, i finally cleaned up that copy-paste in my deflate decompressor

1589965279
alehander92
so basically you can use this inside a tokenizer?

1589965495
alehander92
i might try this for my tokenizer

1589965667
scientes
alehander92, well, the idea would be to allow [:0]u8 in switch statements

1589965697
alehander92
ah i see, that's completely different than what i thought

1589965726
scientes
that is an overview of how it works

1589965728
alexnask
Hello

1589965776
scientes
it maps strings to a enum, and then constructs a jump table with that

1589965796
scientes
but I am having difficulty building zig

1589965815
alexnask
Are you hitting LLVM linking issues?

1589965816
alehander92
ah, yeah so you infer them from the case branches?

1589965816
scientes
no problem with 0.6.0, but master I get /usr/bin/ld: /usr/lib/llvm-10/lib/libclangCodeGen.a(BackendUtil.cpp.o): en la función `(anonymous namespace)::EmitAssemblyHelper::EmitAssemblyWithNewPassManager(clang::BackendAction, std::unique_ptr<llvm::raw_pwrite_stream, std::default_delete<llvm::raw_pwrite_stream> >)':

1589965816
scientes
(.text._ZN12_GLOBAL__N_118EmitAssemblyHelper30EmitAssemblyWithNewPassManagerEN5clang13BackendActionESt10unique_ptrIN4llvm17raw_pwrite_streamESt14default_deleteIS5_EE+0x1f15): referencia a `getPollyPluginInfo()' sin definir

1589965820
scientes
alexnask, yeah

1589965831
alehander92
i feel i read about similar zig thing in the past, perfect hashing?

1589965861
alexnask
Can ou try this workaroun:

1589965870
scientes
alehander92, no, it constructs multi-way bisect on individual characters, but it isn't a hash, its actually a bisect that serves all the use cases of a hash, but with guaranteed performance characteristics that makes it usable in a compiler

1589970884
cren
is an ArrayList a type? If so, what type is it?

1589970966
ikskuh
ArrayList itself is a function

1589970972
ikskuh
that returns a type based on a type

1589970972
ikskuh
so

1589970984
ikskuh
ArrayList(u8) is an expression that calls ArrayList with u8, returning a struct type

1589970988
ikskuh
that implements an array list

1589970994
cren
right

1589971015
cren
so how do I refer to that type in my program

1589971039
ikskuh
ArrayList(u8)

1589971057
ikskuh
or, if you want a function that takes a generic array list

1589971066
dermetfan
that's evaluated at compile time so no overhead as you might think

1589971069
ikskuh
fn foo(comptime T: type, list: std.ArrayList(T)) void

1589971124
cren
ok

1589972385
cren
Can I use index notation `arr[i]` on an ArrayList?

1589972413
dermetfan
arr.items[i]

1589972431
cren
that makes more sense, thanks

1589972876
cren
How should I concatenate two ArrayLists?

1589972893
ikskuh
.appendSlice

1589972918
cren
I thought so. Does .items return a slice?

1589972927
ikskuh
yes

1589972934
ikskuh
it returns the current slice of elements

1589973444
alexnask
and toOwnedSlice() shrinks the memory, returns items and clears the ArrayList so you probably want to arr1.appendSlice(arr2.toOwnedSlice())

1589973461
alexnask
(not exactly that but you get the idea)

1589973564
cren
ah but I don't want to just concatenate them and destroy their existence as separate lists. I want to pass `correctLetters` and `missedLetters` to a function which takes one argument, `guessedLetters`, but still have separate `missedLetters` and `correctLetters` in `main`

1589973630
alexnask
Right, appending items is the way to go then :-)

1589983252
pixelherodev
Is it just me or has this channel been less active lately?

1589983300
ifreund
perhaps a bit, i haven't noticed any massive change though

1589983328
ikskuh
i noticed that too

1589983342
ikskuh
people are more concernd writing fancy stuff than doing noisy chatter :D

1589983372
pixelherodev
That's always good :)

1589983740
fengb
`concernd` looks like a daemon

1589983787
ikskuh
systemctl stop concernd

1589983816
pixelherodev
boo

1589983825
pixelherodev
`rc-service concernd stop`

1589983829
pixelherodev
^ that's how it's done

1589983831
ikskuh
killall concernd

1589984102
ifreund
i think you meant `sv down concernd` :P

1589984107
nephele
it's obviously rm /service/concernd; s6-svscanctl -an /service ;)

1589984300
alehander92
scientes awesome, ill think abou tit

1589984319
alehander92
eventually

1589984378
pixelherodev
nephele: I'd say "I have to try s6," but I really couldn't less about freaking PID1

1589984395
pixelherodev
OpenRC is good, my system works fine

1589984399
pixelherodev
Why worry about it?

1589984457
nephele
and s6 works fine too :), i don't use it as process 1, although i probably could

1589984477
pixelherodev
ahh, it runs

1589984492
nephele
not sure i understand your question

1589984509
nephele
it's a supervisor, how you setup your system is your choice

1589984513
pixelherodev
Gotcha

1589984652
cren
I have heard that s6 is good but I have not heard of any distro that uses it

1589984722
ikskuh
andrewrk: about #1717 and the function pointers: I think it would be possible to have function values at compiletime

1589984727
ikskuh
which can then be exported

1589984740
ikskuh
this would require function pointers to be explicit instead of how they're done atm

1589984830
ifreund
cren: well obarun and artix do, but neither is very large/well maintaned yet

1589984851
ifreund
anyhow, this is off topic

1589985073
pixelherodev
Is anything off topic?

1589985077
pixelherodev
It's all tangentially connected :)

1589985315
fengb
Rules say "No discussion of things that are both controversial and off-topic."

1589985319
fengb
So you're fine :P

1589985539
ikskuh
but systemd is controversial!

1589985568
companion_cube
is it though? it's accepted in almost every distro

1589985570
companion_cube
:P

1589985576
Akuli
:D

1589985579
pixelherodev
That doesn't define controversy

1589985585
ifreund
^

1589985586
pixelherodev
You know what else is accepted in every distro?

1589985609
pixelherodev
people

1589985615
pixelherodev
Those are

1589985617
pixelherodev
AIs for all

1589985621
pixelherodev
Down with the humanity!

1589985623
pixelherodev
/s

1589985637
pixelherodev
Well

1589985638
pixelherodev
Half /s

1589985640
pixelherodev
/?

1589985653
ifreund
0.5/

1589985658
BaroqueLarouche
I, for one, welcome our AI overloads

1589985680
nephele
But do they welcome you?

1589985847
ifreund
of course, we are their batteries

1589985983
companion_cube
such a ridiculous part of that film :D

1589986029
fengb
Apparently they wanted to use people as neural networks but producers nixed that idea

1589986050
fengb
It also explains super powers a lot better

1589986082
fengb
"Rules can be broken" like what is this crap. The sysadmin would patch that out immediately

1589986181
pixelherodev
... see that would actually be kinda interesting

1589986189
pixelherodev
also yay bikeshedding

1589986189
fengb
Hmm... The Matrix is basically proto-Lucy 🤔

1589986244
fengb
It really wouldn't change most of the movie but the plot holes are a lot more limited. So hopefully it improved your enjoyment :P

1589986312
afontain_
"meat brain", "human computing modules", I'm sure we can come up with creative names!

1589986353
afontain_
"Oh yeah, I trained a pair of neural nets, Emily and Kevin, to respond to support tickets."

1589986511
fengb
I think it was more of borrowing brain power for computing. So people actually do use only 10% of their brains

1589986519
fengb
So... Lucy

1589986552
gonz_
People can't patch out bugs for shit

1589986650
pixelherodev
lol that's not true

1589986654
pixelherodev


1589986665
pixelherodev
Actual skilled engineers can

1589986688
pixelherodev
It

1589986725
companion_cube
some bugs are harder than others, though

1589986786
fengb
I'm not talking about people. MACHINES

1589986855
gonz_
If you hadn't noticed pretty much every machine/program in The Matrix is the very opposite of infallible

1589986952
fengb
But they don't fix anything ever

1589986975
gonz_
They've gone through 5 iterations of attempting to fix their biggest bug.

1589987001
companion_cube
and are still vulnerable to EMP

1589987019
gonz_
pixelherodev: That's a "no true scotsman" if I ever saw one.

1589987033
gonz_
"No true engineer would be unable to fix bugs!" :D

1589987038
pixelherodev
No, I mean that it's an actual skill and requires practice

1589987043
pixelherodev
It's not "no true engineer!!!"

1589987056
pixelherodev
It's, "any engineer can

1589987082
pixelherodev
It's a disparate skill from programming, but still connected and very important

1589987106
pixelherodev
Learning to debug is like learning to use Git: it's annoying initially, it has a notable time investment, but the payoff is frankly massive

1589987112
pixelherodev
and

1589987118
companion_cube
depends on tools, too

1589987125
companion_cube
using gdb is quite different from debugging with printf

1589987132
gonz_
This presupposes that the main thing preventing people from fixing bugs is their own knowledge.

1589987155
gonz_
Just like initial code quality these aren't things that are actually inhibited mainly by engineer knowledge.

1589987165
gonz_
Not in the majority of cases, at least.

1589987172
gonz_
Give someone enough time and they can do anything.

1589987178
pixelherodev
I think that in the vast majority of cases, GDB + Valgrind tools are more than sufficient

1589987185
gonz_
Give them the hustle and bustle of modern development and they'll do a crap job.

1589987193
pixelherodev
and I sincerely hope you don't think the GitLab solution is a good one :P

1589987195
companion_cube
pixelherodev: if you use a language where these make sense

1589987199
pixelherodev
companion_cube: true

1589987211
pixelherodev
but if you're deliberately choosing a language that you know you don't know how to debug...

1589987243
pixelherodev
gonz_: the GitLab solution to bugs is "have the process periodically commit suicide and replace itself with a new copy"

1589987256
pixelherodev
I think their site puts the average lifetime of a GitLab worker at four freaking seconds

1589987271
companion_cube
I've been debugging with printf for years, it's just another skill

1589987332
fengb


1589987444
gonz_
pixelherodev: This seems like it should have limited usefulness. I'm all for the erlang model in some cases but that would have the nuance that you let things die if they catastrophically fail, not necessarily have the commit suicide because you can't fix them stalling.

1589987446
ikskuh
printf-debugging is imho one of the easiest and fastest ways of debugging

1589987455
ikskuh
it's also working on nearly all platforms you can use

1589987458
gonz_
But I'm not familiar with what you're talking about, so

1589987513
fengb
pixelherodev: that's just the Ruby way :P

1589987515
pixelherodev
The entire point is that GitLab is apparently full of memory leaks all over the place

1589987521
pixelherodev
and instead of fixing the leaks...

1589987536
pixelherodev
ikskuh: agreed :)

1589987540
pixelherodev
But

1589987547
pixelherodev
If you have a text channel, you can run a GDB stub :)

1589987549
ikskuh
reading code + printing f

1589987562
fengb
F

1589987569
ikskuh
gdb won't help you with larger data sets

1589987579
pixelherodev
Why not?

1589987588
pixelherodev
(genuine curiousity; haven't been in such a situation)

1589987592
ikskuh
having a bug that happens after 1.5 Mio steps?

1589987600
ikskuh
you don#t want to singlestep

1589987605
pixelherodev
... yeah but you don't have to

1589987609
pixelherodev
GDB is scriptable

1589987618
ikskuh
you don't even want to do conditional breakpoints

1589987618
pixelherodev
You can tell it "run until X"

1589987622
pixelherodev
Ahh, overhead

1589987626
ikskuh
yes, indeed

1589987628
pixelherodev
You could tell it "run exactly X times"

1589987636
gonz_
pixelherodev: I agree, I guess, this clearly isn't the way to (not) solve the issue.

1589987637
ikskuh
doesn't help when you don't know the index :D

1589987640
ikskuh
then printf helps :D

1589987645
pixelherodev
True

1589987646
ikskuh
and then you already have your answer :D

1589987662
ikskuh
you cannot debug raytracers with breakpoints

1589987670
ikskuh
except for like, the trivial cases

1589987675
pixelherodev
Ahh, 'cause it's on the GPU?

1589987680
ikskuh
nah

1589987698
ikskuh
because you have 16_128_000 steps done

1589987700
pixelherodev
Anywho, I'mma get started on self-hosting ARM feature detection

1589987701
ikskuh
with MSAA of 8

1589987706
pixelherodev
ikskuh: ohhh ouch

1589987707
ikskuh
\o/

1589987708
pixelherodev
good point

1589987716
pixelherodev
printf debugging is still debugging :)

1589987726
ikskuh
yep

1589987728
pixelherodev
but it's also a skill

1589987735
ikskuh
kids, don't let someone else tell otherwise!

1589987741
ikskuh
code reading is as well

1589987744
pixelherodev
You need to know what to print and what's not worth it, where to print it...

1589987753
pixelherodev
"Programming" isn't really a skill in and of itself

1589987759
pixelherodev
it's a collection of disparate skills

1589987769
ikskuh
yeah, true

1589987826
gonz_
I've been really enjoying how somehow the version of Zig I'm using on Windows seems to have all symbols defined properly, etc., lately. I'm definitely a fan of step-wise debugging, etc., but printf still comes very much in handy.

1589987898
gonz_
For the last 5 or so years I haven't really used languages where step-wise debugging made much sense, though, so I wasn't too into it.

1589987920
gonz_
And I guess before that I used languages that plain didn't have proper tooling or I didn't have access to it.

1589987983
fengb
Speaking of which... I need to enable printf in my emulator >_>

1589988034
ikskuh
pixelherodev: the discussion about function stuff on Discord inspired me:

1589988265
pixelherodev
andrewrk: does self-hosted ARM feature detection need to care about running on Windows?

1589988307
pixelherodev
I don't think LLVM does :P

1589988335
ikskuh
afaik we support windows-on-arm in theory

1589988351
pixelherodev
Yes, but I'm fairly sure LLVM doesn't support it :P

1589988359
pixelherodev
as a host I mean

1589988382
pixelherodev
llvm/lib/Support/Host.cpp only has an impl for Linux

1589988393
pixelherodev
`grep -r` shows no other implementations hidden elsewhere

1589988456
pixelherodev
ikskuh: interesting

1589988459
pixelherodev
I like that proposal :)

1589988494
ikskuh
it's one thing that bugged me when coding my embedded demo with C++

1589988498
ikskuh
you get all those fancy optimizations

1589988508
ikskuh
but collapsing two arrays into each other is not allowed

1589988512
ikskuh
because they have a different name

1589988547
pixelherodev
And if you really need minimal binary size, you can have an aggressive pass that looks for anywhere in the binary that happens to match the symbol's value

1589988561
pixelherodev
e.g. if const data matches machine code by random chance :P

1589988584
pixelherodev
I'm only going to add Linux support initially

1589988591
pixelherodev
Someone else can add Windows support later if they want

1589988596
ikskuh
<pixelherodev> e.g. if const data matches machine code by random chance :P

1589988597
ikskuh
exactly!

1589988625
gonz_
Do any core/regular contributors use Windows?

1589988638
pixelherodev
What's needed in order to build a static Zig binary?

1589988650
pixelherodev
I'm considered updating my PC's zig updater to generate a static binary for my laptop :P

1589988656
ikskuh
gonz_: afaik yes

1589988657
pixelherodev
Does it require a custom static LLVM

1589988659
pixelherodev
?

1589988672
ikskuh
err, good question

1589988679
ikskuh
look at ziglang/bootstrap for that probably

1589988687
ikskuh
afaik zig is by-default statically linked

1589988696
pixelherodev
It's not :(

1589988714
ikskuh
[felix@denkplatte-v2 zig-current]$ ldd zig

1589988714
ikskuh
statically linked

1589988716
pixelherodev
`ldd /usr/local/bi/zig`

1589988719
pixelherodev
many many deps

1589988723
ikskuh
the thing from the website is statically linked

1589988730
pixelherodev
Yes but that's not what I'm using :(

1589988734
pixelherodev
I build locally

1589988738
ikskuh
hm

1589988742
pixelherodev
because I have a few small patches on top of it

1589988755
pixelherodev
That aren't fit to eveer be upstreamed :P

1589988962
oats
are there vesions of std.math.{add,sub,mul} that work with floating point types?

1589988968
oats
s/vesions/versions

1589990828
cren
Is it a bad idea to make multiple calls to `warn` because I don't want to have a really long line containing all the message? (I'm using `warn` for the main output of my program)

1589991011
scientes
oats, just use + - *, there is no concept of "overflow" in IEEE 754 floating point

1589991043
fengb
You can add new lines or use multi strings

1589991044
oats
scientes: ok, I'll just roll my own that 'return a + b;' then :)

1589991056
fengb
Multi line strings

1589991075
cren
fengb: I mean a long line in the code, I know about newlines

1589991090
fengb
It’ll eventually overflow into infinity though 🙃

1589991734
andrewrk
pixelherodev, yes

1589991793
andrewrk
but you don't have to implement it for non-windows native ARM cpu feature detection to be merged

1589998840
dimenus
do you guys typically use raw gdb or a frontend?

1589998901
andrewrk
I use raw gdb but it's pretty annoying. would love a good frontend

1590001112
foobles
andrewrk what is the difference between c_allocator.allocate and c_allocator.allocate_nonzero?

1590001174
andrewrk
oh, in stage1

1590001185
andrewrk
whether it calls malloc or calloc I'm guessing

1590001232
foobles
hmm ok

1590001233
foobles
thanks

1590001247
foobles
i am immediately overwriting what's there, so i guess ill stick to nonzero

1590001299
andrewrk
yep that's the intention. don't worry about it too much; when in doubt use allocate as default. it won't make that much of a perf difference

1590001722
alehander92
hm

1590001737
alehander92
do you have pretty printers

1590001918
foobles
alehander92 for what?

1590008206
xackus
I made a pretty printer for ZigList

1590008220
xackus
I wonder if anyone used it yet

1590008261
xackus
I should probably mention it in contributing.md

1590008799
xackus
alehander92

1590008838
xackus
it's in tools/zig-gdb.py

1590010725
stripedpajamas
any idiomatic way to define a comptime set of key/values ? i see some hashmaps in std, but as far as i can tell they'd have to be runtime-ish. is the recommendation to hack together something with comptime arrays/slices?

1590010760
fengb
There’s a pr for comptime hashmaps

1590010769
stripedpajamas
oh nice :D

1590011380
ikskuh
do you want to built it at comptime or just access it?

1590011390
ikskuh
when only accessing: use anonymous struct literals!

1590012819
FireFox317
andrewrk, do you use any profiling tools to improve the benchmarks? Ive been following SerenityOS lately and Andreas build his own function level profiler which samples and shows in which function most of the time is spend. I think that makes it so easy to improve code.

1590012837
andrewrk
that sounds really useful

1590012843
andrewrk
I need to find and learn how to use some of these tools

1590012864
companion_cube
perf record/perf report?

1590012890
companion_cube
(or perf + flamegraph, it's awesome)

1590012924
FireFox317
andrewrk, so how did you find these speed improvements then?

1590012936
andrewrk
intuition

1590013008
FireFox317
Ah yes indeed

1590013486
fengb
And measuring right? :P

1590013660
FireFox317
I think he measures the complete runtime, but that doesnt tell you anything about where the time is actually spend right

1590013826
fengb
I'm just making dumb comments. Please ignore

