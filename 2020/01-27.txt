1580088616
mooch
hey, when i'm using zig build run,

1580088623
mooch
how do i pass arguments to my program?

1580089159
mikdusan
currently something like this: `if (b.args) |args| run_cmd.addArgs(args);`

1580089236
mikdusan
and from command line `zig build run -- one two three`

1580089280
mooch
okay, thank you

1580094130
pixelherodev
andrewrk, thanks for that freestanding debug info fix!

1580095091
daurnimator
andrewrk: yes. that's why I'm using generic_rv32

1580095333
andrewrk
"generic" is overloaded here

1580096630
rageoholic
Hi. I'm getting an error where I can't include vcruntime.h or other compiler specific include files

1580096634
rageoholic
How can I fix this

1580096640
daurnimator
rageoholic: are you linking libc ?

1580096645
rageoholic
Yup

1580096655
daurnimator
What is your host and what is your target?

1580096673
rageoholic
Windows for both

1580096677
rageoholic
x64

1580096757
daurnimator
`zig libc` ?

1580096812
rageoholic
What about it?

1580096835
daurnimator
what is the output?

1580096874
rageoholic
sys_include_dir=C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\lib\x64\..\..\include

1580096923
daurnimator
and is that correct?

1580096927
rageoholic
Yup

1580097120
rageoholic
I even reinstalled zig and rebooted my machine. I don't wanna purge VS too

1580097135
mikdusan
check and compare the possible locations for cached versions of that information. `zig-cache/native_libc.txt` and `%LOCALAPPDATA%/zig/stage1/native_libc.txt`

1580097158
mikdusan
you can safely delete them.

1580097274
rageoholic
OK we're good

1580097277
rageoholic
Thank you

1580097285
mikdusan
let me guess, you upgraded the compiler recently

1580097301
rageoholic
Yeah VS updated

1580097420
rageoholic
Cannot wait till I can just do audio and video in zig standalone. Even if I have to write my own platform layers to do it

1580097605
rageoholic
You know what

1580097608
rageoholic
Fuck it

1580097611
rageoholic
I'm going to do it

1580097629
rageoholic
After this project I'm going to make a Zig only SDL-like

1580097636
rageoholic
Sorta like Sokol

1580097664
pixelherodev
Zokol?

1580097665
pixelherodev
:P

1580097680
shakesoda
rageoholic: many pains await you, best of luck

1580097722
daurnimator
rageoholic: indeed. this will hurt alot. enjoy :)

1580097734
daurnimator
rageoholic: ps, check out arcan

1580099846
fengb
`raw: 16[u8]` I think it's time for me to give up for the night

1580099892
pixelherodev
:P

1580099897
pixelherodev
Not all of us have that luxury

1580099906
pixelherodev
Major deadline tomorrow, and the

1580099937
pixelherodev
So I'm hacking together a debugging interface over an external UART <-> converter I found in my spare parts drawer :panic:

1580100091
shakesoda
pixelherodev: D:

1580100113
pixelherodev
Don't worry, I see how it would be amusing if it wasn't happening to

1580100114
shakesoda
much as i find doing uart stuff actually kind of fun, not with an impending deadline

1580100204
pixelherodev
I'm literally just hacking together a fake printf that uses vsprintf + dump_to_xuart

1580100238
pixelherodev
Then rewriting the currently commented-out printfs to go through a #defined print function that either goes to printf (on PC) or hacked_together_mess (ESP8266)

1580102619
daurnimator


1580103186
pixelherodev
That's interesting

1580103220
pixelherodev
How does the handling work now?

1580103226
pixelherodev
On a different note, in seeking to fix this communications error, I accidentally fixed an entirely different bug that was butchering the performance of the "simulated" MCU I was using for testing :)

1580103603
adamkowalski
How do you check if two enums have the same active tag?

1580103615
adamkowalski
without nested switch statements*

1580103625
pixelherodev
Wait, do you mean unions?

1580103633
adamkowalski
yeah union(enum)

1580103641
pixelherodev
Pretty sure you can retrieve the tag

1580103645
pixelherodev
Though I don't remember how

1580103659
adamkowalski
I want to compare two of them for equality, so I want to say their tags must match, or return false. If their tags match check their data members

1580103726
pixelherodev
Yeah, @as(enum_type, u1) == @as(enum_type, u2)

1580103740
pixelherodev
Where u1 and u2 are both tagged unions which have enum_type as the tag type

1580103808
adamkowalski
actually I think std.meta.eql does the job in this case

1580103829
pixelherodev
That works too, probably

1580103860
adamkowalski
how would @as(enum_type, u1) work? that would only work if it's not a union(enum) just a regular enum right?

1580103878
adamkowalski
I feel like you need to extract the tag out of the union(enum) first then compare as an int

1580103891
pixelherodev
No

1580103906
pixelherodev
`@as(tag_type, union_tagged)` gives the tag

1580103910
pixelherodev


1580104002
adamkowalski
ah perfect so I could do @as(@TagType(T), u)?

1580104020
adamkowalski
thanks!

1580104066
pixelherodev
Yeah

1580104082
pixelherodev
Well

1580104091
pixelherodev
Yeah

1580104241
pixelherodev
Or even @as(@TagType(@TypeOf(u)), u)

1580104271
pixelherodev
That works even in a comptime function where `u` is of type var and all you know is that `u` is a tagged union,

1580106065
pixelherodev
Oh my god it's communicating! ... occasionally. About 70% of packets fail to transmit properly, but 30% functional is better than 0% functional!

1580106195
adamkowalski
awesome! what are you building?

1580106374
pixelherodev
A medical device thingy - can't say too much though, because the whole reason I have to stay up and get it done tonight is that there's a potential investor

1580106424
adamkowalski
that sounds exciting. good luck

1580106425
pixelherodev
I can definitely go into details of how it

1580106467
pixelherodev
The client frontend is in Zig, which is nice :)

1580106487
pixelherodev
but the protocol library and the MCU parts are in C, because I wasn't about to rely on LLVM-xtensa

1580106491
adamkowalski
I'm not sure if you all are using any machine learning, but I had a big breakthrough in my library (compute graph). I finally implemented reverse mode automatic differentiation so you can take derivatives of scalars/vectors/matrices/nd tensors automatically!

1580106511
adamkowalski
watch out python/tensorflow, neural networks in pure zig are around the corner

1580106530
pixelherodev
Nooooo

1580106537
pixelherodev
... not because I use python / tensorflow

1580106548
pixelherodev
I'm just opposed to neural networks on principle

1580106590
adamkowalski
haha, yeah but this library has nothing to do with neural networks. It's linear algebra + automatic differentiation

1580106610
adamkowalski
you can build neural networks on anything else you want on top of them

1580106612
pixelherodev
You say machine learning I hear computer program that wastes insane amounts of processing power on an RNG

1580106637
adamkowalski
I recommend using models which are explainable, but you learn the parameters using gradient descent

1580106661
adamkowalski
thats what we do in my industry since we have to be able to legally explain why our models make the decisions they made

1580106698
adamkowalski
for example solving the initial conditions of a differntial equation using backprop. but the actual model is easy to understand and explain to domain experts

1580106735
pixelherodev
I don't think NNs should be used in any way other than to research a problem space

1580106747
pixelherodev
Anything that can be solved with NNs

1580106758
pixelherodev
and solving it properly means a better understanding of the problem

1580106779
adamkowalski
I'm not sure I agree, I think people who apply them blindly without understanding how they work are the issue

1580106823
pixelherodev
I had this debate recently elsewhere, give me a sec to grab a screenshot of what I argued there instead of rehashing the whole thing again - I'd rather you responsed to points I've already made than go over them again

1580106836
adamkowalski
if you understand the math behind it, they are fairly straightforward and can be applied to many different tasks very effictively and honestly share a lot in common with "classical methods"

1580106884
adamkowalski
for example computer vision is "classically" solved with hand engineered kernels that you use for your convolutions, but learning the kernels using data is fine

1580106933
pixelherodev
But it also is a massive waste of resources

1580106952
pixelherodev
"programmer time is more expensive than CPU time" is just a fancier way of saying "we're wasting tons of CPU time"

1580106968
adamkowalski
thats an implementation detail, people who say that are lazy

1580106984
pixelherodev
It's really really not

1580106992
adamkowalski
at work we have very few data points so we need to be able to extract all the juice possible out of just a few (10 points) data points

1580106993
pixelherodev
It's fundamentally more expensive to use NNs than classical programming

1580107047
adamkowalski
we use bayes rule + differentiable programming (optimaztion using gradient descent) to be able to leverage prior knowledge but allow the data to overwhelm them if they are vastly different

1580107119
pixelherodev
If the NN can figure it out, so can engineers

1580107160
pixelherodev
My fundamental argument is that relying on NNs isn't really scientific - instead of researching the problem and devising the solution, we set up a computer to guess-and-check and use that data to calibrate what is effectively an RNG

1580107192
daurnimator
hey now.... engineers can be RNG too

1580107206
adamkowalski
anyway, different strokes for different folks I guess. I'm interested in solving problems that require using the right tool for the job. Some things are learned from data, others are done using heurisitic and large sets of rules implemented by the programmers. Either way it's very rigirous engineering and I would be foolish to ignore a solution just it's implemented one way or another

1580107340
pixelherodev
Reasonable

1580107362
pixelherodev
As I've said a thousand times, every argument about tech - programming languages, NNs, whatever - ultimately comes down to totally subjective values

1580107369
pixelherodev
... ugh. This communications layer is failing for the stupidest reason possible

1580107390
pixelherodev
The protocol code tries to wait until enough bytes are available to continue - which is approximately 11 for a standard packet.

1580107409
pixelherodev
The external UART feeds info on demand

1580107422
pixelherodev
So the buffer is never full until I actually try reading

1580107443
pixelherodev
It'd be amusing if not for the fact that it's requiring serious code restructuring

1580108416
mq32
pixelherodev, thanks for showing me that i'm not a lone guy not liking NNs for everything :D

1580108982
pixelherodev
Huh. GDB is actually working. That's unexpected.

1580109070
mq32
\o/

1580109088
pixelherodev
Over serial to the MCU

1580109140
daurnimator
pixelherodev: ooooo I'm doing the same thing right now :D

1580109228
pixelherodev
`value has been optimized out`

1580109509
pixelherodev
On the bright side, I was right that optimizations would make this just as efficient as a C++ abstraction?

1580109906
pixelherodev
daurnimator, does yours also involve a situation where GDB actually functions... but isn't usable anyways due to timing issues?

1580109926
daurnimator
almost!

1580109930
pixelherodev
Since the code I'm debugging is extremely timing-heavy - all work is done in *ms*, and a reply is expected in that time - it times out while I debug

1580109965
daurnimator
I'm having issues where something goes wrong after ~20ms of running and then stops responding to gdb

1580109973
pixelherodev
Ah, even more fun :)

1580110085
pixelherodev
Huh. This is... weird.

1580110094
pixelherodev
If I run GDB and then hit continue... *everything works*.

1580110114
pixelherodev
Communication over the XUART is 100% reliable, despite the fact that GDB doesn't touch it.

1580110128
pixelherodev
Okay so... like 90% reliable. Still much better

1580110171
pixelherodev
... and also there's a memory leak, which explains a lot.

1580110185
pixelherodev
Still, I'm mildly surprised the OOM catching behavior functioned

1580110202
pixelherodev
Good news is, I know what I need to do; bad news is, this is

1580110900
pixelherodev
Or, maybe, I shouldn't be surprised that it

1580110902
pixelherodev
*none*.

1580110921
pixelherodev
Correction: none in

1580110959
pixelherodev
The only memory bug was actually caused by non null-terminated strings getting printed and thus strlen()ed

1580111795
shakesoda
pixelherodev: heh, yeah, running valgrind on systems with intel graphics consistently is quite annoying

1580112382
pixelherodev
On the bright side, got 100% reliability! By cheating.

1580112408
pixelherodev
One thing I noticed is that for whatever reason, it seems to need "warm up time" - the first few commands tend to fail, then it gets a tad more reliable

1580112432
pixelherodev
If each command is attempted ~5 times, it will almost

1580112443
pixelherodev
Can definitely still improve this, still got a few hours, but this is probably sufficient

1580112482
daurnimator
How does zig find the default panic function?

1580112519
pixelherodev
A `grep -r panic` should find that pretty quickly

1580112545
daurnimator
ah... in std/builtin.zig... and it looks for std.os.panic

1580112548
pixelherodev
builtin.zig has `pub const panic: PanicFn = if (@hasDecl(root, "panic")) root.panic else default_panic;`

1580112549
pixelherodev
Yeah

1580112567
pixelherodev
default_panic is defined in builtin.zig as well

1580112620
shakesoda
pixelherodev: long as it works through the imminent deadline i guess, heh

1580112627
pixelherodev
shakesoda, precisely.

1580112654
pixelherodev
Ended up actually using the XUART as the main data channel, mostly because it makes emergency prints much much easier to add

1580112677
pixelherodev
Also, it means that the exposed USB connection

1580112736
pixelherodev
The other nice thing is that the typical command packet is ~24 bytes, so even at 9600 baud trying five times is pretty damn fast

1580112747
pixelherodev
(that includes some padding + checksum)

1580112844
daurnimator
std.os.panic is not part of "BYO os" is it? :(

1580113077
pixelherodev
It is

1580113083
pixelherodev
daurnimator, but that's

1580113097
pixelherodev
If it doesn't exist, then the rest of default_panic in builtin.zig is used

1580113111
pixelherodev
Alternately, you can override default_panic

1580113167
daurnimator
pixelherodev: right... I'm trying to sort of make an "SDK"

1580113175
daurnimator
and I'm providing a panic function

1580113209
pixelherodev
Needs to be included by the root source file

1580113214
daurnimator
but it seems like my user has to do `pub fn panic(message: []const u8, stack_trace: ?*builtin.StackTrace) noreturn { return mysdk.panic(message, stack_trace); }`

1580113223
pixelherodev
Not necessarily

1580113229
daurnimator
?

1580113230
pixelherodev
Could easily do `using SDK.panic`

1580113242
pixelherodev
Well, `pub using SDK.panic`

1580113242
daurnimator
ooooo. good idea

1580113246
pixelherodev
Or `pub usingnamespace SDK`

1580113275
pixelherodev
You could also have the SDK show up at the OS level

1580113283
pixelherodev
e.g. `pub os = @import("SDK")` in the RSF

1580113309
pixelherodev
Then, override what you want, and use `pub using` from e.g. libc for the rest

1580113319
daurnimator
ah right; it's `root.os` isn't it. not `std.os`

1580113332
daurnimator
that gives me at least a little flexibility

1580114014
daurnimator
o.o has anyone had an issue before where it seems like a `linksection` is getting ignored

1580114091
pixelherodev
Don't think so?

1580114540
daurnimator
figured it out I think

1580118071
pixelherodev
lesson learned: calling a function in GDB over serial doesn't end well.

1580119878
pixelherodev
Then I was having troubles because I was using relative paths and the FS on the Flash memory doesn't like that

1580119891
pixelherodev
Good news is, everything works now*!

1580119898
pixelherodev
*given a sufficiently high retry value

1580127004
betawaffle
are the fields on `type` values deprecated?

1580127294
alva
Is there a way to turn a comptime []const u8 into an identifier, or something along those lines? Trying to port G_DEFINE_TYPE from GLib.

1580127733
daurnimator
alva: are you looking for @field ?

1580127755
daurnimator
Where does @breakpoint() turn into a call to abort() ?

1580127785
daurnimator
==> if I try and use @breakpoint() on riscv I get a linker error: lld: error: undefined symbol: abort

1580128209
alva
daurnimator: No, I'd like to create a new identifier from the slice. Or programmatically create a type, on which I can set the name.

1580128232
daurnimator
alva: and then do what with the name?

1580128242
daurnimator
alva: types don't have to have names in zig

1580128422
alva
daurnimator: Given the name "big_chungus", I want to create some functions like "big_chungus_get_type() { ... generated code ... }", and I'm wondering if that can be done with comptime programming, or if I need a code generation step in my build process.

1580128447
daurnimator
alva: you can't create function names at comptime

1580128463
alva
daurnimator: I see. Thanks!

1580128563
TheLemonMan
daurnimator,

1580128720
daurnimator
ah, so I should use `asm ("ebreak")` instead for now?

1580129364
betawaffle
is it possible to define methods on `[*]T`? for example, by defining `fn example(self: [*]T)`?

1580129373
daurnimator
betawaffle: no

1580130885
daurnimator
andrewrk: is there a download link that always points at latest master build?

1580130896
daurnimator
e.g.

1580132252
Snektron
daurnimator, you could extract it from the json downloads page

1580132279
daurnimator
Snektron: or whatever makes the json download page could also put up a redirect to the most recent :)

1580132328
daurnimator
context: in a CI job I want to just put: `curl -L

1580132629
betawaffle
what's the right way to link to Hypervisor.framework in build.zig?

1580132776
daurnimator
.linkFramework("Hypervisor")

1580132833
betawaffle
i've got that, but it says it's still not finding the header file i'm trying to cInclude

1580136869
fengb
"function returns address of local variable"

1580136873
fengb
Was this added recently?

1580136919
fengb
Huh, apparently it was part of the IR split

1580136940
fengb
Free wins 🎉

1580137664
andrewrk
great, only 63 conflicts in ir.cpp rebasing #4152

1580137689
fengb
Is there a way to detect if the current execution is at comptime?

1580137704
andrewrk


1580137755
fengb
Ah okay

1580137788
daurnimator
Reminder to all: put up GSoC ideas on the wiki!

1580137886
Snektron
I was wondering if there is any roadmap for simd intrinsics

1580137914
Snektron
apart from @reduce i couldn't find anything

1580137918
andrewrk
there are a lot of issues marked "contributor friendly" that could go on this wiki page daurnimator

1580137928
fengb
scientes had a branch with a lot but it ran concurrent with a bunch of internal refactorings

1580137938
andrewrk
Snektron, there's a big ol checklist here:

1580137943
daurnimator
andrewrk: they need to be tuned a bit.... and mentors should volunteer

1580137952
daurnimator
I'm about to write up a mail to the mailing list with more details

1580137972
Snektron
ah thanks andrewrk

1580137981
Snektron
nothing urgent btw, just wondering

1580137996
fengb
Would it be useful to have a GSoC project just to pull some of these commits in?

1580138015
andrewrk
fengb, no, most of these commits don't really do things the right way

1580138031
andrewrk
I found it to be more productive and less buggy to ignore that pull request

1580138188
andrewrk
they also build upon each other in problematic ways, so if you fix the first commit in the branch, the rest of the commits break

1580140235
daurnimator
andrewrk: might need your help over here:

1580140417
andrewrk
0 bit types are not emitted in debug info. if they are, it's a bug in izg

1580140507
andrewrk
if they're willing to support 0 bit integers that would be wonderful. both signed and unsigned 0 bit integers have the value 0

1580140544
daurnimator
Want me to quote you on that? or do you want to make a comment yourself?

1580140657
andrewrk
I'll comment

1580140841
daurnimator
👍

1580140850
andrewrk
good night!

1580140863
daurnimator
great success with the FOMU today :)

1580141400
andrewrk
what progress did you make?

1580144384
metaleap
i'm implementing a (pre-existing) jsonrpc protocol (classic req/resp aka call/ret pattern) where a request always produces either result-value or error-code-with-msg. my callbackfn-types are almost about to look like this:

1580144458
metaleap
handlerFoo: fn(cur_call_scoped: *Allocator, params: FooParams) anyerror!union{result: ?FooResult, err: struct{code,msg}}

1580144498
metaleap
this sorta return type (regardless of whatever domain-specific thing `Foo` is per such exposed API method) begins to creep me out here

1580144572
metaleap
do i gather correctly that zigs native global-`error`-set is an enum not a union ie. funcs can return `error.SomeName`s but not `error.WithContextData{.....}`s

1580144597
metaleap
(and also catch the former not the latter)ß

1580144677
metaleap
i probably ditch the anyerror! union part and require handlers to catch locally and translate such catches back to the userland union's `err` tag to return..

1580144702
mikdusan
correct, no custom payload with zig errors -- they cannot themselves be a "union(enum){...}"

1580144738
metaleap
thx for confirming, thought i'd probe the channel in case sth like this was planned / in the works / undocumented-hidden

1580144763
fengb
There's a proposal to allow additional data

1580144785
mikdusan
iirc the big question for that usually come down to "who would manage the extra memory required?" :)

1580144844
metaleap
good point, cant see a way that wouldnt be dirty hacky and fraught

1580144921
fengb
Trying to find the issue... I remember a nice idea to extend the inferred error to allow unions, and it can auto downcast to an errorset

1580144942
metaleap
(tho .. could allow only fixed-size payloads and gather similarly to the global error set to be reserved in the DATA section but would yield only distressingly cumbersome realworld usages i'm sure =)

1580144963
mikdusan
I would shudder if the sizeOf(err) is globally changed from some machine int size, to the

1580144964
metaleap
oh no scratch that above, stupid & silly

1580144997
metaleap
also there's unknown nr of errors floating around in theory

1580145003
metaleap
so no point

1580145030
fengb
Number of errors is comptime known

1580145037
metaleap
not the instances.

1580145045
metaleap
people dont always immediately exit on them..

1580145053
metaleap
you can pass them around etc

1580145094
metaleap
ah dont mind me, mind mushed from day job

1580145106
metaleap
.net cripples the synapses

1580145108
fengb
Is there a way to show watched issues in Github? >_>

1580145169
fengb


1580145208
fengb
It exists but at the account level, not repo level

1580145649
fengb
I think the standard pattern is to initialize a container in the "root" function:

1580150293
Snektron
fengb

1580150311
Snektron
maybe that doesnt work for watched

1580156871
andrewrk
zig as a drop-in c compiler can be done in zig instead of c++

1580157052
mikdusan
if that is done, stage1 doesn't need to embed clang anymore? (by clang I mean not the LLVM backend)

1580157099
andrewrk
never mind, I got mixed up. a prerequsite for the drop-in replacement of a c compiler is

1580157148
andrewrk
but then doing #3089 (which depends on that other one) will want to parse the command line in main.cpp and set up the stage1 CodeGen properties accordingly

1580157195
andrewrk
however... it's a fairly manageable project size to implement c compilation in self-hosted. this involves implementing the cache system, command line parsing, building the libcs, etc

1580157212
andrewrk
once all that is done, then stage1 could simply forward the args to a single libcall

1580157241
andrewrk
and... this would get us to parallel builds of c objects much sooner than self-hosted for zig code will be available

1580157262
andrewrk
in fact we could then delete all the libc building stuff for stage1, I believe

1580157398
andrewrk
in fact, all 2,702 lines of link.cpp from stage1 could be moved to self-hosted

1580157415
andrewrk
because stage1 only needs to create libuserland.a

1580157561
andrewrk
the cache hash stuff can also move to self-hosted. cach_hash.hpp is a reasonably small set of functions

1580157578
mikdusan
yeah we don't need cache once self-hosted is up

1580157582
mikdusan
(in stage1)

1580157591
andrewrk
maybe even now though, it could move to libuserland

1580157621
mikdusan
grep'd src-self-hosted... it does some @cImport stuff

1580157652
andrewrk
there's no dependency on that for these things though

1580157660
mikdusan
awesome

1580157719
andrewrk
for example src-self-hosted/{translate_c.zig,print_targets.zig,stage1.zig,c_tokenizer.zig,clang.zig,dep_tokenizer.zig} these are all hot

1580157741
andrewrk
"hot", meaning get compiled into libuserland.a which is linked into zig.exe which we ship on ziglang.org/download

1580157786
andrewrk
there's a lot of low hanging fruit for self-hosting right now

1580158325
andrewrk
pixelherodev, ^ this would speed up that uncached musl libc build of yours by a factor equal to number of CPU cores you have

1580158885
mikdusan
what is target abi "macabi" ?

1580158901
metaleap
WELP! i dont do threading and yet my `try std.io.getStdOut().outStream().stream.write("whatev")` calls runtime-fail at:

1580158903
metaleap
EBADF => unreachable, // Always a race condition.

1580158911
metaleap
lib/zig/std/os.zig:499:22: 0x24bd68 in std.os.write

1580158924
mq32
a race condition does not mean it's a multithreaded problem

1580158938
mq32
it just means that you are using a resource that was not created yet (in that case: you use an invalid FD)

1580159029
metaleap
OOOH i should have taken the addr of the ....stream , now no such issue

1580159042
andrewrk
mikdusan, llvm comment says "Mac Catalyst variant of Apple's iOS deployment target"

1580159334
mikdusan
oh it's for cross iOS/macOS apps. even with a single-company at helm, the Catalyst apps look like mud compared to specialized for each of iOS and macOS

1580162719
jessermeyer
var WAIT_FAILED2 = 0xFFFFFFFF; gives me  error: variable of type 'comptime_int' must be const or comptime

1580162726
jessermeyer
Why can't I set that as a var?

1580162733
jessermeyer
I want it as a var because I want to change it later.

1580162784
andrewrk
if you want to change it at runtime, then zig has to know how much memory to allocate for it at runtime

1580162788
jessermeyer
Looks like if I tell Zig it's a u32 it'll go along with it.

1580162811
jessermeyer
Makes sense!

1580162996
jessermeyer
Think I found a bug with this, or at least unexpected behavior.

1580163019
jessermeyer
var r1: u32 = 164; var WAIT_FAILED2: u32 = 0xFFFFFFFF; var r3 = r1 == WAIT_FAILED2;

1580163024
jessermeyer
Is false.

1580163025
jessermeyer
But...

1580163068
jessermeyer
var r1:u32 = 222;   const WAIT_FAILED2 = 0xFFFFFFFF;   var r3 = r1 == WAIT_FAILED2; is true

1580163076
jessermeyer
Sorry, I don't know a sane way of copying code into IRC.

1580163115
jessermeyer
Sorry, Don't know why I chose different numbers for r1, don't think it matters.

1580163139
jessermeyer
The real bug is that while (MsgWaitForMultipleObjects(1, &window_handle, 1, 1, QS_ALLPOSTMESSAGE) != WAIT_FAILED) returns false but it should not.

1580163159
jessermeyer
MsgWaitForMultipleObjects does not return WAIT_FAILED, by inspection.

1580163162
Snektron
(you could use a paste service)

1580163169
jessermeyer
(That's probably smart)

1580163178
mikdusan
`r1 == WAIT_FAILED2` is false

1580163213
jessermeyer
But the compiler cannot make up its mind, based on the type WAIT_FAILED2 has.

1580163290
jessermeyer
I agree it should evaluate to false.

1580163520
mikdusan
make a small reproduction. I cannot reproduce "true" result from what is shown. oh, also why `!= WAIT_FAILED` instead of WAIT_FAILED2 ?

1580163521
jessermeyer
Ruh Row

1580163529
jessermeyer
I'm getting     var returned = MsgWaitForMultipleObjects(1, &window_handle, 1, 1, QS_ALLPOSTMESSAGE);    var WAIT_FAILED1:u32 = 0xFFFFFFFF;        var eval = returned == WAIT_FAILED1;    var eval2 = returned != WAIT_FAILED1;

1580163539
jessermeyer
that both eval2 and eval are false.

1580163570
jessermeyer
WAIT_FAILED in the real code is comparing against a comptime_int

1580163581
jessermeyer
but I agree my examples are not consistent between each other.

1580163699
mikdusan
andrewrk: what is the ideal goal for build.zig to use for target-triple when completely not specified?

1580163707
jessermeyer


1580163713
mikdusan
ideal as in future with self-hosted, etc.

1580163749
mikdusan
bad wording. I guess what is the ideal default?

1580163914
mikdusan
jessermeyer: which platform?

1580163936
jessermeyer
win10

1580163951
mikdusan
oh win . so I don't know that debugger. but making hello world with top 3 lines easily verifies `r3` to be false

1580163960
jessermeyer
I know.

1580163961
jessermeyer


1580163966
jessermeyer
But that doesn't mean the bug doesn't exist!

1580163985
mikdusan
so this is not a console app?

1580164023
jessermeyer
Well I'm not technically specifying subsystem: windows

1580164031
jessermeyer
zig build-exe -ldxgi -ld3d12 -ldxguid -ld3dcompiler bug1.zig -L "C:\Program Files (x86)\Windows Kits\10\Lib\10.0.18362.0\um\x64"

1580164045
jessermeyer
I built both programs the same way

1580164052
jessermeyer
only difference is the root source file

1580164070
jessermeyer
let me see if winmain() triggers it

1580164091
mikdusan
can you try something like... `if (r3) @breakpoint();`

1580164100
mikdusan
(to let zig do the eval)

1580164136
jessermeyer
Sorry I'm not following exactly... What will that tell us?

1580164173
mikdusan
if debugger breaks at that line, it means that zig's generated code caused it. I'm trying to rule out a debugger issue

1580164284
jessermeyer
Ah

1580164341
mikdusan
I suppose @panic("waaat") would work just as well

1580164372
andrewrk
mikdusan, std.Target.Native

1580164397
andrewrk
mikdusan, btw, I finally solved

1580164410
FireFox317
Aren't you forgetting to link libc?

1580164411
jessermeyer
Smart.

1580164411
andrewrk
the good news is that the solution wasn't a hack, it improved a bunch of edge cases to make sense

1580164424
jessermeyer
The debugger is falsely reporting that value!!

1580164436
jessermeyer
I'll submit a bug report.  Thanks for your superior debugging skills.

1580164457
jessermeyer
VS's debugger doesn't seem to suffer from this issue.

1580164483
mikdusan
side note: @brekapoint on macos/lldb doesn't break for me on the correct line in main(). haven't used it that much to narrow down production more.

1580164565
mikdusan
jessermeyer: which debugger had buggy value?

1580164637
jessermeyer
RemedyBG

1580164644
mikdusan
thanks

1580164715
jessermeyer
Uh oh.

1580164717
jessermeyer
It's a heisenberg bug.

1580164725
jessermeyer
It's suddenly reporting the correct value now.

1580164760
Snektron
concurrent modification

1580164764
Snektron
oof

1580164800
Snektron
shouldn't have tried to refAllDecls before generating all symbols

1580164814
mikdusan
jessermeyer: smells like ub.

1580164849
jessermeyer
Yeah, the debugger is really built around debugging C code, which it does just fine.

1580164856
mikdusan
but being that breakpoint was on a line at the right spot, i don't see any ub chance there

1580164913
mikdusan
jessermeyer: is it possible some line numbering changed from the binary and source, and png debug session was from out-of-sync bin/sources ?

1580164926
mikdusan
(png paste

1580164926
jessermeyer
Yeah I'm sorting to think something like that is going on.

1580164932
jessermeyer
starting~

1580164949
mikdusan
so if the bin/source was out of sync during debugging, I could believe some ub

1580167639
andrewrk
finally, the fixes to result location stuff are making sense rather than being total hacks

1580167716
andrewrk
thanks for the help mikdusan

1580167745
mikdusan
heh i built `zig` by mistake and it linked :)

1580167765
mikdusan
it's always nice zig0 -> zig starts to work

1580167771
andrewrk
yeah always a relief

1580167782
andrewrk
especially with translate-c covering a lot of syntax

