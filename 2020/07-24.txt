1595550705
pixelherodev
If anyone wants to s

1595550707
pixelherodev
Dammit whoops

1595551146
pixelherodev
#1717 is accepted? :D

1595551167
pixelherodev
Oh it's been accepted for a year lol

1595574472
belse
HI, I was toying around with zig 0.6.0: Is it still possible to init a stack var buffer with a non zero terminated string? for example: var buffer: [16]u8 = "deadbeef" ++ [_]u8{0xa5} ** 8;

1595575536
andrewrk
I would expect that to work

1595575616
andrewrk
belse, in master branch it works if I surround the whole expression with ().*

1595575625
andrewrk
that probably works in 0.6.0 too

1595575663
andrewrk
it's less the problem of null termination and more going from pointer to array

1595575676
andrewrk
hence the deref

1595575987
belse
error: expected type '[16]u8', found '*const [16:0]u8'    var text_buffer: [16]u8 = ("99 bottles" ++ ([_]u8{0xa5} ** 6)); this the error I got.

1595576012
belse
yes the pointer conversion is the error

1595576183
belse
so thanks for the deref hint now it compiles ;-)

1595580827
ikskuh
huh

1595580837
ikskuh
i got a weird analysis bug(?)

1595580875
ikskuh
self-dependency for a pointer in a callback

1595581176
ikskuh


1595581191
ikskuh
andrewrk: can you confirm this as a bug?

1595581310
andrewrk
ikskuh, yes

1595581323
andrewrk
it should be fine

1595581379
andrewrk
might not be that hard to fix either

1595581391
andrewrk
probably a lazy value being triggered to evaluate too early

1595581426
andrewrk
good night

1595581437
Nypsie
andrewrk: Thanks for the feedback on the substraction PR. I'll work on it today after work.

1595581450
ikskuh
gn8 and thanks for the heads-up

1595581452
Nypsie
Also, good night :)

1595581462
ikskuh
i'm going to work around that for now

1595582440
danyspin97
Is there any way to have a generic error other than inferred error or big union?

1595582505
ikskuh
pass the error type

1595582607
danyspin97
in a single function I have a lot of errors, @TypeOf(err) is not good I think

1595582633
ikskuh
what do you want to achieve?

1595582650
danyspin97
Basic error handling

1595582712
danyspin97
in c++ you use exceptions, you catch the basic type, print the error and either throw it again/exit

1595582724
danyspin97
in c you print the error and exit

1595582735
ikskuh
you can do that in zig as well

1595582739
danyspin97
what about zig? How should you do error handling?

1595582762
ikskuh
foo() catch |err| { std.log.err(.mything, "foo() failed: {}\n", .{err}); return err; }

1595582764
ikskuh
;

1595582786
danyspin97
it becomes cluttered when in a single function you have many types of errors

1595582788
ikskuh
if you don't care, you can also just bubble up errors the whole stack

1595582795
danyspin97
wdym?

1595582810
ikskuh
just use try/catch, inferred error sets and let main return !void

1595582849
danyspin97
however it does not work with recursion

1595582849
ikskuh
if the program errors, it will print a nice error return trace and quit

1595582882
ikskuh
do you know that zigs errors are set types?

1595582896
ikskuh
errors are just like C error codes

1595582902
ikskuh
but you know what error codes are possible

1595583514
ikskuh
ifreund: i just noticed that i cannot change the log level of std.log at runtime

1595583534
danyspin97
the union set has 32 errors in it..

1595583573
ifreund
ikskuh: sure you can, but you need to implement that yourself with a custom logging function

1595583625
ikskuh
ah!

1595584530
ikskuh
i am confused :D

1595584546
ikskuh
the bug i reported above is really diffuse

1595584838
ikskuh
i have one case where it happens and another one where it doesn't happen :D

1595585042
ifreund
tun

1595585048
ikskuh
tap?

1595585049
ifreund
er, fun

1595586233
ikskuh
yeah :(

1595586240
ikskuh
i can do a small workaround

1595587120
ikskuh
ifreund: workaround is inlining :D

1595587156
ifreund
nice, guess that makes sense why it sometimes happened and sometimes didn't then

1595587319
ikskuh
yeah

1595587365
ikskuh
daurnimator: i'm now excessive user of nonexhaustive enums :D

1595587389
ikskuh
i have a huge load of u32 based IDs which are all in distinct namespaces and enum(u32) {_} is just great

1595587615
ifreund
ikskuh: link to that code? I havent been successful in my attempts to find uses for them yet

1595587628
ikskuh
all over dunstblick

1595587634
ikskuh
but i'll search you an example

1595587663
ikskuh
libdunstblick has now changed from 100% c++ to 100% zig with no C imports anymore

1595587666
ikskuh
\o/

1595587670
ikskuh
only the C header file remains

1595587846
ikskuh


1595587849
ikskuh
here's an example

1595587867
ikskuh


1595587891
ikskuh
in C, it's easy to mess up the parameter list

1595587896
ikskuh
i can pass any u32 to any parameter

1595587920
ikskuh
in zig, with nonexhaustive enums, i can now only pass a EventID to callback and a WidgetName to caller

1595587932
ikskuh
it would be a compile error otherwise → increased type safety

1595587937
ikskuh
oh, and those are IDs

1595587942
ifreund
I see, yeah that's pretty nice

1595587944
ikskuh
i cannot do "event += 1;"

1595587949
ikskuh
because it's non-arithmetic

1595587961
ikskuh
i can only compare for equality, no order defined

1595587961
ifreund
makes sense

1595588021
ikskuh
so … now i can finally start creating the rack light control :D

1595588031
ifreund
\o/

1595588035
ikskuh
because "dunstblick-app" is now not a pure C library but a zig library

1595588041
ikskuh
that has a C binding exported :)

1595591662
ikskuh
LOL

1595591669
ikskuh
suddenly, i get the error for Application as well

1595591672
ikskuh
it worked before :D

1595594524
ask6155
hello!

1595594657
Nypsie
Hi

1595594674
ask6155
I used expectEqual to check 24 with func_which_gives_i32_24() but the compiler says it expected comptime_int

1595594698
Nypsie
Change it to @as(i32, 24)

1595594704
ask6155
oh

1595595529
ifreund
or change the order of the args you pass to expectEqual

1595595559
ifreund
as you can see, the type of the first arg determines the expected type of the second arg

1595595641
ask6155
I feel like explicit casting is better as people who look at code 'know' (as if I put my code into public)

1595602581
zigusr
hi, is there any good zig / python interop ?

1595602652
ifreund
zigusr: I don't know of any examples, but zig can export a C ABI so using python's cffi shouldn't be an issue

1595602667
zigusr
yeah, so in rust, but they have a nice (few) interop libraries

1595602680
zigusr
I want to write a python moudle in zig (or try atleast)

1595602725
zigusr
guess I can write one :)

1595602754
ifreund
go for it!

1595602802
leeward
ctypes is super easy to use, if you don't want to go all in using the C extension features.

1595603354
zigusr
ctypes is pretty dead

1595603361
zigusr
today most use cffi

1595603427
zigusr
how stable is the API of async I/O ?

1595603453
fengb
Not very. It’s still mostly a proof of concept

1595603501
zigusr
ohh

1595603522
zigusr
so just like in python :)

1595603562
fengb
Async has been doing pretty well, but anything related to the event loop has had some major changes

1595603570
ifreund
if you're curious about async/await, you might want to give this issue a read:

1595604116
zigusr
should I d/l 0.6.0 or master ?

1595604210
leeward
That depends. How willing are you to update regularly, and how likely are you to submit patches to Zig?

1595604226
zigusr
I see :

1595604227
zigusr
:)

1595604292
zigusr
which are recommended vscode extensions to use ? "zig" ? "zls" ?

1595604300
BaroqueLarouche
both

1595604349
zigusr
leeward: I first want to see what I can do with the language as-is, not debug it's bugs

1595604491
leeward
zigusr: Stay away from packed structs then. The language and standard library have changed a bit since 0.6.0, but it stays pretty usable. I've been tracking master and I occasionally find regressions, though they get fixed fast.

1595604907
leeward
There are people doing real projects based on 0.6.0, and it's a stable target for learning the language. Any code written in Zig will have to get updated regularly to keep it working until 1.0. If you want to learn the language, I think learning the latest version of it is worth while. If you want to write something big, you're probably better off with 0.6 until 0.7 comes out.

1595608137
ikskuh
ifreund:

1595608140
ikskuh
show-off :D

1595608785
ifreund
ok, that's pretty damn cool

1595608804
ifreund
also love the single german word in the UI :D

1595608826
ikskuh
yeah that's the app-name

1595608845
Nypsie
Awesome work xq!

1595608851
ikskuh
thanks! :)

1595610053
pixelherodev
FireFox317: you're completely right

1595610097
FireFox317
pixelherodev, np :P

1595610124
pixelherodev
Going to add detection of noreturn functions returning at some point

1595610223
pixelherodev
Hmm, the bigger problem is the Azure failure

1595610229
pixelherodev
I can't repro that

1595614230
leeward
How do I make a C function pointer?

1595614240
leeward
I need to accept one as an argument to a Zig function.

1595614358
ikskuh
leeward: standard function pointer, callconv(.C)

1595614362
ikskuh
fn() callconv(.C) void

1595614367
ikskuh
is void (*)(void)

1595614461
leeward
So if I have to take an argument that's a function that returns a void pointer, `export fn doThing(callback: fn() callconv(.C) *c_void) void` would be a valid way to express it?

1595614476
zigusr
is there a prebuilt ZLS server?

1595614524
leeward
Ooh, zls is a good reason to track master.

1595615827
Nypsie
andrewrk: Thanks for the merge! Glad to have contributed. I hope next pr's will be of higher quality :)

1595616576
pixelherodev
oh lol

1595616609
pixelherodev
`Remove hard tabs from C backend test cases. Shame on you Noam, you are grounded, you should know better, etc. Bad boy.`

1595616614
pixelherodev
hahaha

1595616624
Nypsie
I laughed at that :p

1595616628
Nypsie
No offense xD

1595616664
pixelherodev
None taken lol

1595616687
pixelherodev
First time I've ever gotten called out by name in a commit message like that lol

1595616707
pixelherodev
andrewrk: out of curiousity, what was the issue there?

1595616722
pixelherodev
Stage2 explicitly supports hard tabs, doesn't it? I mean, the tests passed ;)

1595616742
leeward
You don't run zig fmt on save?

1595616760
Nypsie
The tests contain string literals

1595616775
leeward
ohhhh

1595616934
pixelherodev
Yeah lol

1595616940
pixelherodev
I was using hard tabs for some tests :P

1595616947
pixelherodev
(deliberately :)

1595616985
FireFox317
:(

1595617005
FireFox317
hard tabs are badddd :P

1595617052
leeward
Are they though? I found the accessibility argument compelling.

1595617107
pixelherodev
Same

1595617130
leeward
On the other hand, people who think "indent 4 spaces" means "hit spacebar 4 times" make me angry.

1595617227
leeward
My editor is older than Andrew, and the tab key indents the current line to whatever the correct level is.

1595617653
fengb
You make it sounds like he's ancient lol

1595617661
leeward
I'm older.

1595617715
leeward
I couldn't say it's older than I am, because it isn't.

1595617779
leeward
And any piece of software that's old enough to be POTUS is ancient software.

1595617869
andrewrk
pixelherodev, you accidentally incorrectly mixed tabs and spaces, just like everyone always does when hard tabs are involved. the accessibility argument is invalid, tabs are not inherently more accessible, and if they happen to be in practice today, that's not necessarily going to be true in 30 years. and finally, one way to do things. test cases that are not testing tokenization/parsing will be `zig fmt` applied

1595618225
leeward
I don't think "that's not necessarily going to be true in 30 years" is a strong case for invalidating an argument. Of course the whole argument (in the ticket I'm thinking of) was entirely irrelevant since they're allowed in the language.

1595618282
shakesoda
hard  tabs are better anyways

1595618290
shakesoda
FINALLY, MY TIME HAS COME, WE GET TO ARGUE ABOUT THIS AGAIN!

1595618292
shakesoda
:D

1595618382
companion_cube
:ohno:

1595618383
shakesoda
the adjustable width is reason enough that they are massively better, and it's also kind of ridiculous to even care what the indents are when they are of no relevance to the syntax

1595618390
shakesoda
companion_cube: isn't it fun!

1595618395
shakesoda
oh joyous day

1595618432
companion_cube
the adjustable width is why it looks good for you and butt ugly for me

1595618452
shakesoda
then adjust ya width

1595618470
companion_cube
well what if it's in cat? or github? :p

1595618475
leeward
So, the advantage is that you can adjust the width and other people can't?

1595618509
companion_cube
and it has to be done per language, or even per project? ugh

1595618528
shakesoda
for cat i guess you're screwed, github has settings for gist and i'm not going to value paste formatting in a browser in the language

1595618540
companion_cube
well i read code on github sometimes

1595618555
companion_cube
that just sucks if they're using tabs assuming tabwidth=2

1595618589
shakesoda
me too. i barely even notice the indents when they are any value other than 8 (i use 3, myself)

1595618604
companion_cube
I use 2 or 4 depending on the language

1595618631
shakesoda
dunno why i'd change based on the language

1595618648
shakesoda
zig is the only one where i have to do that, because it has a fit about my formatting if i don't.

1595618718
companion_cube
well some languages have naturally a lot more indentation than others

1595618722
companion_cube
or just different conventions

1595618940
leeward
You could just write a sed script to replace "^(    )+" with tabs after running zig fmt on file open.

1595618956
leeward
Silly hacks for ridiculous problems.

1595619001
shakesoda
i could, although i'd prefer greatly if it didn't give a shit lol

1595619100
shakesoda
that's enough on it for me i'm really just sitting here dealing with this headache

1595619121
shakesoda
i want to think about thread task scheduling stuff if it'll go away :(

1595619169
shakesoda
the overhead of the lock in my current setup is way, way too much

1595619209
shakesoda
i knew it'd have contention, but that contention is dominating the runtime when workers are >1

1595619213
Akuli
speaking of tabs, don't use spaces if you care about developers who have trouble seeing

1595619263
Akuli
i also know a blind programmer, i haven't asked about their opinion on tabs vs spaces

1595619268
companion_cube
some people have said the opposite, but that's a good reason

1595619281
shakesoda
that is a stronger reason than any of our bikeshedding will ever be

1595619290
andrewrk
it's not real

1595619304
shakesoda
i certainly hope you're not calling accessibility needs fake

1595619323
andrewrk
certainly not. I'm calling tabs not an accessibility feature

1595619338
companion_cube
seems to me like having a zigfmt that can be parametrized is better

1595619344
companion_cube
cause you can also control vertical spacing

1595619347
companion_cube
more line returns, etc

1595619363
shakesoda
having adjustments for things is nearly always an accessibility feature in the end

1595619376
shakesoda
even if you didn't know it

1595619391
andrewrk
the fact that zig can be line-independently-tokenized contributes to accessibility because it makes it easier for an editor to display whatever kind of spacing it needs to for visually impaired users

1595619417
ifreund
disagree, zig fmt has become my favorite code formatter I've ever used

1595619417
Akuli
in a formatter-formatted project, teaching an editor to convert back and forth should be easy enough without introducing huge diffs, so maybe just let users specify number of spaces used for indentation when running 'zig fmt'?

1595619426
companion_cube
shakesoda: you could take leading spaces and multiply them by 2, too

1595619428
companion_cube
or 4

1595619432
ifreund
config options would ruin it

1595619445
andrewrk
same deal for screen readers. the fundamental difference this makes completely eclipses anything to do with indentation control charactors

1595619466
shakesoda
screen readers certainly don't seem likely to give a crap about the control characters

1595619475
shakesoda
(dunno why they would)

1595619482
ifreund
the best part is that it doesn't know about line length, which keeps things so much simpler

1595619504
companion_cube
ifreund: what's "it"?

1595619512
ifreund
and it doesn't do dumb things like use spaces for alignment

1595619518
ifreund
companion_cube: it is zig fmt

1595619521
companion_cube
ah right

1595619541
fengb
My favorite part is that adding trailing commas will force wrap

1595619548
shakesoda
i've spent an inordinate amount of time fighting people to stop aligning their damned equals/vars

1595619555
Akuli
alignment-spaces tend to be quite annoying, especially when people put them with like 60 spaces in front of each aligned line

1595619555
fengb
So you can have shorter lines if you want to

1595619568
companion_cube
alignment is a waste of time

1595619575
shakesoda
because someone always comes in and tries to align after the indent with hard tabs

1595619585
shakesoda
and this is the one case where you should unquestionably never use hard tabs, ever

1595619597
Akuli
emacs (ew) does the align-with-hard-tabs by default, at least for c code

1595619599
shakesoda
you also just shouldn't bother with the alignment

1595619608
shakesoda
Akuli: that's disgusting

1595619626
Akuli
at least i think it did last time i tried, same with gnu indent

1595619633
andrewrk
just want to put it on the record that we had our first instance ever in the zig repo of incorrectly mixed tabs/spaces last week, and it's due to stage2 accepting hard tabs

1595619655
shakesoda
does it error on mixing?

1595619671
andrewrk
no, stage2 accepts but zig fmt corrects

1595619685
shakesoda
so someone didn't zig fmt

1595619687
andrewrk
right

1595619705
andrewrk
status quo is: anything that zig fmt can correct, stage2 accepts

1595619711
fengb
We should revoke their contribution rights

1595619723
andrewrk
it's ok I already put them in time out

1595619727
shakesoda
andrewrk: that's reasonable

1595619729
Akuli
:D

1595619763
Akuli
maybe recommend a pre-commit hook that checks whether files have been zig-fmted?

1595619764
leeward
I think Emacs uses GNU style for C by default, which is awful and nobody ever uses it.

1595619777
shakesoda
precommit hooks make me uneasy

1595619779
andrewrk
this "tabs are for visually impaired accessibility" is nothing but "think of the children". of course accessibility is an important use case, but that doesn't mean to turn your brain off

1595619804
leeward
The only worse thing I've ever seen is bluez's style guide.

1595619815
Akuli
andrewrk, i agree, and i don't use tabs in programming languages that strongly recommend against it like python or zig

1595619833
shakesoda
andrewrk: nor is writing it off as "think of the children" sufficient to totally ignore the claim

1595619834
Akuli
that would just annoy so many more people than it would benefit

1595619845
shakesoda
the brain should remain on either way

1595619875
andrewrk
agreed

1595619906
leeward
Akuli: Emacs's zig-mode runs zig fmt on save by default, fwiw.

1595619923
Akuli
nice

1595619935
companion_cube
shakesoda: it's also a strong argument against python, btw

1595619935
andrewrk
the 4coder editor abstracts indentation entirely

1595619948
companion_cube
whitespace sensitive must be hell if you're visually impaired

1595619950
fengb


1595619955
andrewrk
the programmer is completely insulated and can use variable width fonts, or whatever else they want

1595619964
andrewrk
this would be a visually-impaired-friendly editor

1595619968
shakesoda
sounds like a good design

1595619976
companion_cube
ligatures for indent, wooo

1595619996
leeward
fengb: See? It's totally coconut brains.

1595620011
fengb
Why would you right align to 80 columns?

1595620028
leeward
Coconuts. For. Brains.

1595620029
shakesoda
companion_cube: python causes headaches for people just for being python even before that, so i'd believe it

1595620038
companion_cube
:D

1595620046
Akuli
waaaaaaat fengb :D

1595620139
leeward
Also putting forward declarations before preprocessor #defines, but mostly the indentation thing.

1595620170
fengb
It took me 5 rereads to figure out how that indent was working

1595620198
Akuli
is there some code that actually uses this style? they don't seem to be always doing it  themselves either

1595620279
Akuli
oh here's some

1595620298
shakesoda
andrewrk: fwiw, though, my advocating for accessibility things does not come from nowhere

1595620310
shakesoda
blindness not on the list, mind you

1595620315
shakesoda
* for me

1595620352
shakesoda
i've had to get in a lot of arguments directly related to my hearing and memory problems

1595620353
fengb
My eyes hurt trying to follow that whitespace

1595620371
shakesoda
so i might be rather... zealous... on such issues

1595620454
andrewrk
shakesoda, with that context in mind, I'd be interested in hearing about your personal preferences and beliefs about this topic

1595620468
andrewrk
related:

1595620990
leeward
andrewrk: I like how that article provides context for what this Microsoft corporation is.

1595621063
shakesoda
andrewrk: the (particularly short-term) memory problems are actually exactly what drive me toward languages like zig to begin with, with the focus on clarity.

1595621064
shakesoda
and, more broadly, toward simplicity in designs (and especially away from needless abstractions that force you into needing lots of context)

1595621196
shakesoda
designs that don't hide what's actually happening, and don't provide facilities to sweep everything under the rug (looking at you, inheritance), really help with the overhead of needing to pick up lost context frequently

1595621413
andrewrk
I guess we are the same in that regard

1595621432
andrewrk
I feel like I forget things easily too

1595621503
leeward
Where was that quote about debugging complexity...

1595621535
shakesoda
maybe, i'm way off the deep end in the degree of it but it's not at all uncommon. it causes issues at work sometimes, though, when i've been tasked with working on some multiple-levels-inherited disaster

1595621536
leeward
Oh yeah, Kernighan: "Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?"

1595621558
shakesoda
and the only way i can work on it is by ripping that part of the system apart and building it directly, as it should've been to begin with :)

1595621663
pixelherodev
andrewrk: do we have register shuffling in stage2 currently?

1595621688
pixelherodev
It's the one thing I had in #5411 that I thought was worth salvaging

1595621689
andrewrk
not yet

1595621692
pixelherodev
Gotcha

1595621699
pixelherodev
Should I just close it?

1595621706
pixelherodev
I decided to clean up my old ones to save you a bit of time

1595621728
andrewrk
there, closed

1595621749
pixelherodev
:P

1595621759
andrewrk
I'm working up to a test case to implement the more complicated register allocation bits

1595621770
andrewrk
there's plenty to do that doesn't depend on that

1595621795
pixelherodev
I'm going to try getting #5514 fixed; that's the only other PR I have open rn (other than SPU II, which is active)

1595621807
shakesoda
and as for the hearing stuff... it makes my life easier if any zsf related videos, should they start to exist, provide captioning :)

1595621838
shakesoda
captioning is also great for memory stuff, a lot less repeated rewinding

1595621852
shakesoda
little to do with the language itself, of course.

1595622491
fengb
Well news to Mr. Kernighan, double 0 is still 0

1595622500
shakesoda
?

1595622511
fengb
Okay that came off as poorly done

1595622537
leeward
Are you saying your max level of cleverness is 0, fengb?

1595622611
companion_cube
that's because he overflowed when doubling

1595622632
leeward
Oh is cleverness signed now?

1595622633
shakesoda
re: cleverness in programming. i'm always up for removing my prior arrogance (fka cleverness) upon later discovery

1595622638
fengb
Yes that was what I attempted. But I failed pretty hard

1595622649
fengb
I guess I'm not as clever as I thought

1595622662
companion_cube
leeward: have you never met any moron? :p

1595622669
companion_cube
(or seen them on tv, say)

1595622696
fengb
I haven't watched the White House press in awhile no

1595622705
leeward
companion_cube: I was making an undefined behavior joke. Apparently it worked as well as fengb's cleverness joke.

1595622728
companion_cube
well it's because we're in a safe space

1595622740
companion_cube
not a --release-fast one 🙃

1595622747
leeward
/facepalm

1595622876
andrewrk
politics strictly off topic here

1595622970
leeward
shakesoda: I find that clever people and simple code are positively correlated.

1595623013
leeward
Anyone can brute force their way to something that works, but it takes smarts to make it comprehensible.

1595623021
Akuli
i'm working on a thing and it started out as a huge and complicated script that auto-generated thousands of lines of code, now i don't have that script anymore at all :D

1595623036
companion_cube
sometimes brute force won't even get you to something that works

1595623059
leeward
Sure, if you have time constraints.

1595623114
companion_cube
or if the problem is just too hard

1595623142
pixelherodev
lol

1595623143
leeward
Right, time constraints. Like "must execute before the universe cools."

1595623150
pixelherodev
Haha

1595623154
shakesoda
leeward: yeah, i'm often impressed at the simplicity of code by people far more clever than i

1595623156
companion_cube
"before my body cools" is sooner :s

1595623173
leeward
companion_cube: We can hope.

1595623225
companion_cube
not sure if it's an attack on me, or worry the universe will die very soon

1595623238
pixelherodev
Just walk into an incinerator before you die, then your body will cease to exist before it has a chance to cool!

1595623260
pixelherodev
Can't have a time constraint relative to your body cooling...

1595623264
shakesoda
that said, cleverness isn't one dimensional and some people most certainly more powerful than i create some terrifying monsters pretty regularly too...

1595623266
leeward
Nothing personal, companion_cube, but if the universe cools before your body does we're all screwed.

1595623293
companion_cube
pixelherodev: I tend to be thrown into incinerators, not walked thereinto

1595623316
leeward
That is an unfortunate tendency.

1595623423
pixelherodev
Yeah

1595623430
leeward
Is async/await in good enough shape to use these days? I've got a pthreads event loop that I'd like to reimplement in Zig.

1595623438
pixelherodev
I believe so, but I don't use it mysefl

1595623440
pixelherodev
myslef8

1595623443
pixelherodev
myself*

1595623445
pixelherodev
Damit

1595623446
pixelherodev
Dammit*

1595623470
andrewrk
leeward, it's good enough for proof of concept applications but I wouldn't call it production ready yet

1595623495
leeward
andrewrk: Good enough. I wouldn't call Zig production ready :P

1595623570
fengb
Just don't be surprised if LLVM tells you it doesn't dominate everything

1595623607
leeward
I think we need an IRC client with a plugin that forces a 1-second delay between messages. Hit whatever the "send" button is too soon and you're forced to re-read the line you just wrote before actually sending it.

1595623640
leeward
fengb: I don't get it.

1595623668
fengb
It's andrewrk's favorite error message

1595623692
shakesoda
i kinda feel like zig is more production ready than most languages actually in production. i don't know who this is a stronger statement about.

1595623715
fengb


1595623737
ifreund
shakesoda: maybe, but C is the competiton here

1595623759
ifreund
not the javascript dialect of the month

1595623786
shakesoda
ifreund: i rest my case ;)

1595623835
shakesoda
...i say, as still very much a current c user

1595623886
leeward
shakesoda: "production ready" means it implements the language spec with no known bugs, or at least none in commonly used areas. I've found maybe 4 bugs in production C compilers in the last 15 years.

1595623908
leeward
Also that the language spec is complete.

1595623921
shakesoda
leeward: that's a lot more specific than i feel the common usage of the phrase tends to be

1595623969
shakesoda
and yeah, i can't remember the last actual bug i ran into with a c compiler. c++, on the other hand...

1595624040
leeward
shakesoda: I've never worked on a project where working around a rapidly changing language was a thing we did. C++ is a hot mess, but I know people writing code for surgical robots in it.

1595624072
fengb
Even JS the language doesn't change all that much. The ecosystem OTOH...

1595624089
companion_cube
JS grows quite quickly, does it not?

1595624105
pixelherodev
I've run into multiple LLVM bugs

1595624106
shakesoda
leeward: it's not like i believe c++ to be unsuitable for serious work. i've just certainly run into more problems (actual bugs) than c

1595624114
pixelherodev
^ yes, exactly

1595624115
fengb
No, there's minor updates to the language every year (like 2-3 things)

1595624122
leeward
I think Python is the most rapidly changing language I've actually used in production. We used a new feature that came out in 3.6 before 3.8 was released.

1595624153
fengb
Up until 2015, there's been a total of 4ish versions

1595624153
leeward
shakesoda: Oh, I do believe it's unsuitable; it's just that people use it anyway.

1595624170
shakesoda
leeward: heh, fair enough

1595624243
leeward
pixelherodev: How many of the LLVM bugs you've found caused it to emit incorrect machine code given valid C input?

1595624257
shakesoda
leeward: the fastest changing thing i've used in production, by a long shot, is haxe

1595624287
shakesoda
but it's a transpiler anyways, and what it actually builds to doesn't change

1595624332
shakesoda
i've run into a multitude of bugs in it but i quite happily have a lot of games built largely with it

1595624424
leeward
That raises a big point about what "production" means. The gulf between "entertainment product that can be updated by users after launch" it's very different from "thing that lives inside a human being for 10-15 years and administers drugs."

1595624433
shakesoda
yep, exactly

1595624474
andrewrk
I wonder if we'll beat rust to a lang spec

1595624480
andrewrk
we beat them to a non-profit org :)

1595624528
shakesoda
andrewrk: aren't they run by mozilla still?

1595624558
leeward
I don't know if I would be willing to bet a company I ran on Zig, but if the risk is that we have to rewrite everything in C for hundreds of thousands of dollars I probably wouldn't veto game developers who wanted to use it.

1595624559
shakesoda
last i was aware mozilla is a nonprofit, it's just not a rust-dedicated one

1595624596
shakesoda
leeward: that seems fair to me

1595624599
leeward
There are people working on a language spec for a subset of Rust, but I would not be surprised if Zig had something before they did.

1595624617
shakesoda
rust happens to have the language problem known as "being complicated"

1595624656
leeward
Rust is the language people who like "modern C++" use, plus a borrow checker. It's incredibly complicated.

1595624692
shakesoda
that's about consistent with my observation of it, too, although i'd certainly prefer encountering the rust to said modern c++

1595624698
shakesoda
in the general case

1595624703
leeward
Well, to be fair, minus some awful bits of modern C++.

1595624715
ifreund
it has some nice things like fancy pattern matching to ease the pain brought on by complexity

1595624737
shakesoda
it has some nice things like <complexity> to ease the pain brought on by complexity

1595624741
shakesoda
:D

1595624757
shakesoda
to be sure, i'm all for nice pattern matching.

1595624780
leeward
Hey, pattern matching is awesome. Rust stole a lot of good ideas from the FP world.

1595624803
ifreund
I'd take rust over c++ hands down if given the choice

1595624807
shakesoda
it's fine, i just can't help but read it as addressing complexity with complexity.

1595624810
pixelherodev
leeward: none

1595624815
shakesoda
it's a useful complexity, though.

1595624817
ifreund
but zig is even better

1595624828
leeward
pixelherodev: none which?

1595624843
pixelherodev
No bugs in LLVM caused incorrect output for me

1595624848
leeward
oh

1595624849
pixelherodev
They were more often infinite loops

1595624862
pixelherodev
Which ate up RAMworse than other people's web browsers

1595624886
shakesoda
i'd be willing to rewrite our product at work in zig if i could get my coworkers on board for the transition.

1595624895
shakesoda
i have at least that level of confidence

1595624897
leeward
Well, if it was triggered by valid C code I'd say it qualifies. No output can be incorrect output.

1595624923
pixelherodev
leeward: valid Zig, actually

1595624925
pixelherodev
Not C

1595624929
pixelherodev
Never once had an issue with any C compiler

1595624938
pixelherodev
Well, no x64 C compiler at least

1595624938
leeward
Yeah, my thesis was about Zig not being production ready so that kinda supports it.

1595624941
leeward
:P

1595624945
pixelherodev
Not really

1595624954
pixelherodev
leeward: it wasn't a Zig bug, Zig was 100% correct in all such cases

1595624967
pixelherodev
They were LLVM bugs which would have affected similar C

1595624968
leeward
The fact that the only implementation of Zig had a bug?

1595624969
pixelherodev
Optimizer bugs

1595624983
shakesoda
there are a few potential complications though (for example, i don't know if zig would cause me problems for consoles - this is an unknown that would need to be addressed)

1595624985
andrewrk
llvm bugs are zig bugs if llvm is the only backend

1595624991
pixelherodev
True

1595624991
leeward
^^

1595625001
pixelherodev
That's one reason I don't want LLVM support :P

1595625034
leeward
I don't think that's a good reason not to want LLVM support, but that's a separate issue. I'll be happy to concede that they're different as soon as there's a Zig implementation without the bugs.

1595625042
leeward
Ecstatic, actually.

1595625077
pixelherodev
;)

1595625114
ifreund
I don't think a self hosted optimizer to truely replace llvm would make any sense before 1.0, if ever

1595625126
pixelherodev
I disagree

1595625128
leeward
ifreund: Agreed.

1595625132
pixelherodev
For stage2 it makes perfect sense

1595625138
pixelherodev
Ah wait

1595625148
pixelherodev
I don't think it would ever make sense to have that level of optimizations at all

1595625157
andrewrk
I think there are 1 or 2 optimization passes we can do that would be simple, maintainable, and get us 50% of the way to matching llvm runtime perf

1595625159
pixelherodev
But some basic stuff would make sense the instant we're good

1595625160
FireFox317
leeward, is the thesis public?

1595625188
pixelherodev
DCE + CSE elimination + constant propagation would probably be more than 50% of LLVM perf

1595625196
leeward
Optimizing code is a hard problem, and zillions of developer hours have been spent on it. I don't see a reason to reinvent that particular wheel before we have "working" down.

1595625213
pixelherodev
It's really not as difficult as a lot of people think. Basic optimization isn't that hard

1595625213
andrewrk
agreed leeward

1595625219
leeward
FireFox317: Umm, it's whatever I said in the chat history here: C is production ready; Zig isn't.

1595625221
andrewrk
"working" is priority number one for me

1595625226
pixelherodev
It's the really complex stuff - which we don't have any reason to do

1595625232
pixelherodev
Basic optimizations are jus tthat

1595625235
shakesoda
i just want faster debug turnaround and just enough optimization that it's tolerable

1595625236
leeward
andrewrk: That's why we love you.

1595625246
pixelherodev
I do agree that "working" is easily the priority though

1595625259
pixelherodev
On that note, going to try figuring out why it's trying to target WASM64

1595625264
andrewrk
I'm happy to report the result locations in stage2 are clean so far

1595625270
pixelherodev
Awesome

1595625279
pixelherodev
we're making really really good progress here :)

1595625289
shakesoda
as it stands, debug turnaround is pretty bad, doesn't help that zig builder doesn't do concurrency

1595625291
andrewrk
not fully implemented, and still need to add comptime into the mix. but looking good

1595625294
FireFox317
nice andrewrk!

1595625311
shakesoda
but concurrency in the build is already a workaround for slow builds :)

1595625353
andrewrk
also not sure if anyone saw this the other night:

1595625357
andrewrk
<andrewrk> it's not uncommon to see a successful test output this in stage2: [info] (compiler): Update completed in 0 ms

1595625366
andrewrk
and that's a debug build of stage2

1595625374
Akuli
:D

1595625376
leeward
whoah

1595625388
shakesoda
sounds like you need to make it report in micros

1595625402
andrewrk
I'm sure it will get slower with more complicated test cases ;)

1595625403
Akuli
is it actually that fast or is it just not doing anything?

1595625411
Sahnvour
andrewrk: care to expand a bit on what it means ? recompiling a test case ?

1595625435
leeward
Doing as little as possible is the key to being fast, right?

1595625437
shakesoda
i usually have to report with better granularity than milliseconds, but again i work in games

1595625452
Sahnvour
leeward: no code is faster than no code :)

1595625471
andrewrk
Sahnvour, I believe it was this test case:

1595625496
andrewrk
super trivial code

1595625515
andrewrk
but that 0 ms includes tokenization, parsing, analysis, codegen, and writing the ELF file

1595625525
Sahnvour
that's cool

1595625563
Akuli
zig will be soo much faster than c++ compilers lol

1595625569
shakesoda
Akuli: the bar is low...

1595625576
Akuli
that bar is really low yeah

1595625605
fengb
Faster than Rust too :P

1595625643
andrewrk
let's see a couple more PRs and then I think I can justify getting back to work on stage2 :)

1595625699
shakesoda
andrewrk: will stage2 be wired up with flags/info for build profiling? that kind of stuff is useful

1595625750
companion_cube
t r a c y

1595625751
shakesoda
cl has such things and it really comes in handy for finding build anomalies

1595625754
Sahnvour
zig will probably do frontend way faster than C++ compilers, but the backend time (for optimized builds) will be similar due to LLVM

1595625775
andrewrk
yeah we have pretty nice tracy integration already

1595625786
shakesoda
works for me

1595625794
andrewrk
I'll take another screenshot after I get some more features working, but here's an old one

1595625829
Sahnvour
shakesoda: tried the new microsoft cl profiler on my code recently, it said that the code was too fast to bother measuring, and didn't output anything valuable

1595625835
andrewrk


1595625851
shakesoda
Sahnvour: d2cgsummary?

1595625868
Sahnvour
not that, the new build profiler thingy

1595625885
shakesoda
i've only dealt with d2cgsummary

1595625892
Sahnvour


1595625898
andrewrk
shakesoda, all you have to do is `./zig build -Dtrace=path/to/tracy/build`

1595625900
companion_cube
so did you just bind the C client, andrewrk, to get tracy support?

1595625907
andrewrk
shakesoda, all you have to do is `./zig build -Dtracy=path/to/tracy/build`

1595625914
shakesoda
andrewrk: is this documented

1595625924
andrewrk
uhh it's documented in ./zig build --help

1595625935
shakesoda
wonderful

1595625954
andrewrk
as long as you count "Enable Tracy integration. Supply path to Tracy source" as documentation

1595626002
andrewrk
companion_cube, this file should answer your question:

1595626062
andrewrk
callsites look like

1595626083
shakesoda
oh, the tracy stuff is in zig's build.zig

1595626113
shakesoda
no wonder i wasn't seeing it

1595626133
andrewrk
oh yeah, and we build the TracyClient.cpp as part of the build script. that was so so convenient. it's like these projects were made for each other

1595626165
andrewrk


1595626186
andrewrk
I have 0 regrets about making zig able to compile C/C++ code

1595626217
shakesoda
zig being able to do that is huge for zig's practicality

1595626281
andrewrk
in 30 min I'm going to live stream creating the llvm11 branch and the process to update zig for a new llvm version

1595626304
shakesoda
place your bets now! how many % slower than llvm10?

1595626307
Nypsie
Cool!

1595626335
blinghound
sounds interesting, I'll watch

1595626357
companion_cube
andrewrk: bindings are sweet.

1595626382
blinghound
andrewrk congrats on setting up the non-profit org, I just read about it!

1595626394
andrewrk
thanks blinghound!

1595626413
andrewrk
it's going pretty well so far, just had a board meeting last night and got approval for a couple hires :)

1595626449
Nypsie
couple? :O Sweet!

1595626455
Sahnvour
is there a place where we can read the statutes or anything about it ?

1595626467
andrewrk


1595626481
Sahnvour
thanks

1595626576
Sahnvour
couple hires, meaning Loris and full-time dev ?

1595626578
blinghound
awesome to hear it's moving so fast :D

1595626668
ifreund
Sahnvour: check the meeting minutes :D

1595626680
Nypsie
^ worth it :P

1595626737
Sahnvour
awesome

1595626951
fengb
Whoa there's some secret stuff in here

1595626993
companion_cube
wooooooa what

1595627003
ifreund
openness is pretty awesome

1595627008
companion_cube
the name of the finite time contractor :o

1595627053
andrewrk
next chore on my end is to set up a meeting with vexu :)

1595627066
fengb
Wait he doesn't know yet? >_>

1595627123
Sahnvour
andrew will make him an offer he can't refuse

1595627151
andrewrk
well I had to get approval to make the offer

1595627162
andrewrk
I did ask him if he was interested already and he said Very Yes

1595627174
fengb
Are you the boss?? :P

1595627182
fengb
Aren't

1595627187
andrewrk
nope! the board members have legal power to kick me out if I misbehave

1595627273
shakesoda
"benevolent dictator for the duration of the board's approval" may be accurate but it just doesn't have the same ring to it.

1595627312
Sahnvour
I'm not familiar with US legislation: article III says "No members." does that mean the foundation will only be composed of board members ?

1595627333
scientes
I have been convinced that zig does not need confusing strict aliasing. Because we can just make structs never alias (and strict aliasing is only cross-type---MLIR is doing all the cutting edge work on intra-type aliasing), as we can just say that zig stucts (which do not follow the C ABI) never alias

1595627340
andrewrk
Sahnvour, I'm not sure what the alternative is

1595627350
fengb
Benevolent dictator who can be deposed by a military coup :P

1595627362
andrewrk
scientes, that's a nice observation, I hadn't thought of that

1595627477
leeward
Boards hire people to run their corporations all the time. That's why president and CEO aren't always the same job.

1595627511
leeward
My last company actually replaced the CEO as president, but he stayed on as CEO on the board.

1595627511
fengb
I think members are synonymous with owners here. And a non-profit has no owners by definition

1595627523
scientes
this does mean that single-element structs are NOT guaranteed to be the same as just the type

1595627576
Sahnvour
one could imagine community members wanting to be part of the foundation, but I guess that's only relevant if they'd have some say over how the whole project is run

1595627611
fengb
I think they can be elected to the board, but they still won't derive percentages from the foundation

1595627618
fengb
They can also be hired as a contractor or employee

1595627648
andrewrk
scientes, yes it's already true that memory layout of single field structs is not guaranteed

1595627671
andrewrk
this is a nice realization, I think we can avoid some potentially buggy and confusing aliasing language features with this knowledge

1595627811
andrewrk
I'll go live as soon as llvm 11 finishes building

1595627859
Sahnvour
fengb: so this means that anyone can candidate to the board, with ne requirements ?

1595627872
Sahnvour
s/ne/no/

1595627876
blinghound
how long does llvm take to build these days?

1595627884
fengb
"Each Director will have such qualifications as may be determined by the Board."

1595627890
fengb
The cabal determines the cabal :P

1595627957
Sahnvour
hmm

1595627974
Sahnvour
foreign country legalese is not easy :)

1595628038
Sahnvour
blinghound: mostly depends on your number of CPU cores

1595628085
Sahnvour
last hardware upgrade got it down from ~2 hours to under 10 minutes for me

1595628101
blinghound
jesus that's an insane upgrade

1595628127
ifreund
ram is also quite important

1595628152
ifreund
quantity and speed

1595628188
Sahnvour
yep apparently it has so much to link that if your build system is efficient (as in, you use ninja) you can get oom quite easily

1595630053
pixelherodev
LLVM is simply massive

1595630070
shakesoda
sounds like i'd be waiting many hours then

1595630083
shakesoda
with my near-decade old i7

1595630117
pixelherodev
Building llvm-reduce alone took a ridiculous amount of time fo rme

1595632862
torque
llvm has simply followed the path of all good software projects, becoming an enormous, incomprehensible blob of millions of lines of code

1595633068
yeti
32bit, dualcore, 240MHz, 8½M RAM... IBM AT/03 was "smaller" and did not need a nanny

1595633096
yeti
complexity will kill us

1595635078
shakesoda
yeti: i think about this every time i work on one of my rpis

1595635130
shakesoda
they don't need a nanny, but software does really hold them back

