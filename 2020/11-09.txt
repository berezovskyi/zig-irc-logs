1604887483
adamkowalski
how does zig define intrinsics? like adding two ints or floats?

1604887492
adamkowalski
and how are ints themselves defined?

1604887510
adamkowalski
is there a way to create a "primitive" type which has some number of bits?

1604887510
adamkowalski
or

1604887537
adamkowalski
is there some internal notion of i64 built into the compiler? and when you type x + y some compiler logic kicks in?

1604887562
g-w1
you could use @Type to create a type

1604887587
adamkowalski
well yeah but I mean the "builtin types" are those actually built into the compiler?

1604887606
adamkowalski
or is there some core zig module which defines them, and then it gets implictly imported into every other module?

1604887634
adamkowalski
so i64 i32 bool etc

1604887666
g-w1
I dont think so. const x: u5 = 2; works. any width intger types (should) work

1604887688
adamkowalski
well but the question still holds right

1604887699
adamkowalski
where did all these types get defined

1604887711
adamkowalski
Are they implictily defined by the compiler?

1604887733
adamkowalski
and how does addition/multiplication etc work for all them

1604887743
adamkowalski
clearly + is a polymorphic function right?

1604887765
adamkowalski
but can we create our own version? or is it built in with compiler magic

1604887788
g-w1
I think zig is unlike other langs in that nothing is automatically imported (correct me if im wrong). since nothing can be overloaded, im pretty sure that * and + are just built in to the compiler and that they can operate on any integer/float/vector type.

1604887806
adamkowalski
ahh I see, yeah thats what I thought

1604887825
adamkowalski
i'm making a language for learning purposes and am trying to tackle that problem

1604887843
adamkowalski
I've been thinking that I want as little as possible to be built into the compiler

1604887878
adamkowalski
so i've been debating making it possible to just say (let u8 (primitive 8)) which defines u8 as a type which is 8 bytes

1604887897
g-w1
that seems cool

1604887920
adamkowalski
then you can overload + on that type, and call a compiler intrinsic add-u8 or something

1604887935
adamkowalski
but I wanted to know how Zig tackles that

1604887976
g-w1
imo and zigs, operator overloading makes things VERY confusing (this is why i can't read haskell)

1604888008
adamkowalski
i'm designing a lisp, so I don't actually have operators

1604888018
adamkowalski
everything is just functions, but you can overload them

1604888022
g-w1
ah

1604888034
adamkowalski
(+ (* 3 4) 5)

1604888040
adamkowalski
precedence is always obvious

1604888085
adamkowalski
and since it's primary purpose is as a numeric / linear algebra language then overloading is nice

1604888101
adamkowalski
(+ 3 [1 2 3])

1604888102
adamkowalski
will give

1604888107
adamkowalski
[4 5 6]

1604888119
adamkowalski
elementwise addition of scalar 3 and vector [1 2 3]

1604888156
adamkowalski
otherwise you need functions for add i64, i64. add i64, vec of i64, add i64 mat of i64

1604888162
adamkowalski
you think thats more readable?

1604888170
adamkowalski
all possible permutations of add?

1604888210
Snektron
the problem with operator overloading is that it adds overloading in general to the language

1604888214
adamkowalski
honestly curious, since i'm trying to figure it whats the right path forward

1604888215
Snektron
this makes it a lot more complex

1604888240
adamkowalski
zig has overloading too, just not obvious

1604888253
Snektron
before you know it you'll have people wanting to refer to operators as functions, and now you suddenly need a way to disambiguate functions by parameter type

1604888257
adamkowalski
if I have two structs, they can both have a function with the same name

1604888280
adamkowalski
so a function name can refer to different things depending on the subject

1604888285
adamkowalski
foo.bar()

1604888286
Snektron
those would still have a different name, X.func and Y.func

1604888291
adamkowalski
not really

1604888304
adamkowalski
it's syntactic sugar over func(x) and func(y)

1604888314
adamkowalski
then depending on x or y you dispatch to a differnt function

1604888323
Snektron
it is, but they are namespaced by X and Y respectively

1604888339
adamkowalski
if you have func(x, y) you can say it's static dispatch over the type of both x and y

1604888343
adamkowalski
neither "owns" it

1604888354
Snektron
i can refer to either function uniquely given just the name and the struct(s) it appears in

1604888358
adamkowalski
who owns adding a matrix and a scalar?

1604888369
Snektron
the module where you define it in

1604888369
adamkowalski
okay suppose you are right

1604888380
adamkowalski
if we go back to the numeric examples

1604888397
adamkowalski
how do you suppose you deal with adding/multiplying/subtracting matrices/vectors/scalars

1604888404
adamkowalski
and all possible combinations of them

1604888414
adamkowalski
matrix * vector gives a matrix

1604888421
Snektron
i agree with you that its messy to have no operator overloading for mathematical types

1604888423
adamkowalski
vector * scalar gives vector

1604888433
adamkowalski
scalar * scalar gives scalar

1604888439
adamkowalski
if you cover all those use cases

1604888447
adamkowalski
now you get into dense vs sparse matrices

1604888456
Snektron
i'm just saying that operator overloading adds a lot more complexity to the language, so such a feature must be well considered

1604888484
adamkowalski
yeah I agree it adds complexity, but I'm curious what is the alternative?

1604888491
Snektron
of course, you can emulate 'overloading' in zig by creating a generic function and inspecting parameter types

1604888498
Snektron
for operators that would need some intricate interplay between compiler and code though

1604888498
adamkowalski
true

1604888509
adamkowalski
but I don't like that becuase it's not open to extension

1604888523
adamkowalski
suppose you now came about and came up with a sparse symmetic matrix

1604888531
adamkowalski
symmetric*

1604888538
Snektron
well the obvious alternative is to define your function as 'add' and stuff. I'm not happy with it though

1604888561
adamkowalski
right so now we need to know whether we are dealing with a user defined type or a built in

1604888567
adamkowalski
if it's builtin, use +

1604888577
adamkowalski
otherwise use user.add

1604888587
adamkowalski
now I want to write a generic library

1604888591
fengb
Common Lisp has multi methods

1604888595
adamkowalski
that works with anything as long as it is a matrix

1604888609
adamkowalski
i don't care if it's sparse, dense, on the gpu, cpu, whatever

1604888609
fengb
Dispatch is based on name and type

1604888621
adamkowalski
I just care thats it is random access and contains floats

1604888623
fengb
Erlang too

1604888631
Snektron
One method would be to allow defining operators as member functions only. This solves the 'overloading' part

1604888635
adamkowalski
multi methods and overloading are the samething

1604888649
Snektron
but now you can't 'overload' <builtin> and <custom type>

1604888655
adamkowalski
just one is runtime, other is compile time

1604888660
adamkowalski
yeah exactly snektron

1604888668
adamkowalski
only solution which truely is generic is overloading

1604888677
adamkowalski
and having something akin to concepts

1604888694
adamkowalski
i want to accept ANY type as long as it acts like a matrix, and I can add it

1604888705
adamkowalski
user defined, built in, it's all good

1604888712
adamkowalski
and if you didn't implement add for your matrix

1604888719
adamkowalski
I shouldn't have to create a wrapper type

1604888728
adamkowalski
I should just implement + for your matrix type

1604888734
adamkowalski
and now I can use it with the generic algorithm

1604888744
adamkowalski
because the compile time constraints are met

1604888752
adamkowalski
unless I'm missing something

1604888770
adamkowalski
I've been thinking about this for weeks, and can't think of a better way

1604888791
adamkowalski
every other solution seems to introduce coupling between types and functions

1604888801
Snektron
I think sadly the best way is to just bite the bullet and use .add

1604888802
adamkowalski
either you can add new types, but they won't work with exising functions

1604888822
adamkowalski
or you end up with a bunch of hacks, which seem worse then the overloading we wanted to get away from

1604888848
adamkowalski
nobody will use my language if they need to write .add everywhere though

1604888855
Snektron
there are quite a few languages which seem to do fine without operator overloading

1604888877
adamkowalski
(+ x (* y z))

1604888879
Snektron
if your use case is that math heavy, maybe some kind of dsl is in order?

1604888893
g-w1
i found out that you can do obj.@"+="(other_obj); this is pretty cool

1604888895
g-w1
in zig

1604888905
adamkowalski
or (x.add (y.times z))

1604888934
adamkowalski
why does x and y "own" the add and times methods respectively

1604888946
adamkowalski
neither the left hand or the right hand own in my opion

1604888957
companion_cube
are you doing multiple dispatch?

1604888968
adamkowalski
at compile time yeah

1604888977
adamkowalski
if you do a dense matrix * a sparse matrix

1604888990
adamkowalski
you should clearly do something different, then a sparse * sparse

1604888996
adamkowalski
and different then dense * dense

1604889024
companion_cube
it's what julia does, I think

1604889027
adamkowalski
AND you want to keep a graph of all the operations that you performed

1604889035
adamkowalski
because you need to take derivatives of the entire computation

1604889049
adamkowalski
thats how tensorflow/pytorch/jax/flux all do deep learning

1604889062
adamkowalski
I want to build that graph at compile time

1604889077
adamkowalski
because when you lower the AST into SSA form it's essentially a computation graph

1604889091
companion_cube
seems far too magical for zig :p

1604889099
adamkowalski
then you just walk the SSA in reverse order and call the derivative function

1604889107
companion_cube
well, you can use functions to build the AST to symbolically derive, I guess

1604889114
adamkowalski
hence the need for the new language haha

1604889123
adamkowalski
it's not quite symbolic

1604889129
adamkowalski
it's reverse mode automatic diff

1604889158
adamkowalski
every function takes in the gradient thus far, and the arguments that you used on the forward pass

1604889164
adamkowalski
then you compute your portion of the gradient

1604889174
adamkowalski
and send back to the nodes connected to you

1604889357
companion_cube
all arguments will have to be explicit anyway

1604892875
g-w1
is the zig build dirname loop going to be patched in 0.7.1?

1604894163
andrewrk
yeah

1604894335
andrewrk


1604894351
andrewrk
feel free to request something else (bug fixes only)

1604899990
teratorn
how do you parameterize a fn to take a variable length array?

1604909789
data-man
Congratulations on the 0.7.0 release!

1604909813
goldcell
yeah congrats :]

1604909827
goldcell
the release party stream was cool, saw some replay

1604910057
alexnask[m]
Yeah it was a tonne of fun

1604910077
alexnask[m]
So many cool little showcases :)

1604910219
ikskuh
oh yeah!

1604910223
ikskuh
heya alexnask[m], goldcell! o/

1604910380
alexnask[m]
morning ;)

1604910611
goldcell
I've been following zig's progress so it was nice to see, the bootstrap project got me really curious

1604910626
novaskell
the ziguana drawings were great

1604910713
alexnask[m]
Bow to your King 👑

1604915009
ifreund
teratorn: if the length is comptime known, something like fn foo(comptime N: usize, bar: [N]u8) void

1604915035
ifreund
if the length is runtime know you probably want to pass a slice ([]u8) which is a pointer + a length

1604921362
hch
(re 0.7.1 bugfix suggestions) would asking for a fix of std.build.Builder lib.femit_h bee too much? I was informed it's a regressed feature

1604921882
daurnimator
hch: yes. emit-h is turned off for a release or 2 while we fix other things.

1604921907
hch
thanks, got it

1604921934
hch
which gh is tracking this?

1604921962
hch


1604922456
ifreund
I believe the plan is for femit_h to be integrated with/part of the C backend for the self hosted compiler

1604924349
Kena
Hello, why all of miscompilation labelled issues are targeting 0.9.0 release and none of them are planned to be solved for 0.8.0 branch?

1604924399
ikskuh
Kena: probably because 0.8.0 will focus on self-hosted and

1604924407
daurnimator
Kena: I don't know; it could either be a mistake; or andrew decided that stage1 doesn't matter and 0.8.0 is all about stage2

1604924488
Kena
Yes I hope you're right, I didn't think of that.

1604924553
Kena
If 0.9.0 is all about stage3, it is likely there'll be a 0.10.branch :)

1604924720
Kena
RISC-V tier 1 support for all major OS for 1.1.0 lol

1604925072
ifreund
stage3 is just stage2 compiled with stage2

1604925087
ifreund
once stage2 is feature complete we have stage3

1604925098
ifreund
maybe even slightly before then

1604925425
Kena
Then it will language specification forthcoming!

1604925445
Kena
*will be

1604925514
Kena
which will make the language production-grade perceived by the industry, which will in return mean a new bunch of job opportunities in Zig.

1604925939
g-w1
does zig build use multiple cpu cores, and is there a way to only make it use 1, like make -j1?

1604925998
daurnimator
no I think; and hence yes, but also no.

1604926008
g-w1
ok

1604926027
daurnimator
as in: it only uses a single core right now, in future it will use multiple cores; it's not planned to add a flag to limit the number of cores.

1604926601
Kena
Then why does the built-in `@Vector(N, T)` was removed? Isn't it the first step to use multiple cores thanks to SIMD mechanism?

1604926617
g-w1
this is just for compilation.

1604926678
Kena
I do not understand, you mean using generic data structure via `struct` do the same thing at run-time?

1604926692
Kena
and therefore enact SIMD capability?

1604926721
g-w1
compilation is usually sped up when using multiple cores to compile code. I was asking if multiple cores were planned to be used. this has nothing to do with runtime

1604926869
Kena
Yes but my first question with regard to @Vector() remains.

1604926895
Kena
isn't a compile-time feature?

1604926923
g-w1
i think it is for runtime simd

1604926948
novaskell
Kena: the type can be constructed via `@Type()` and thus `@Vector` (iirc) was removed in favour as it's use isn't as common to have a builtin just for that. There are proposals for explicit syntax (`u4x6`  or similar) but as far as I know there hasn't been an update on accepting any of them.

1604927037
novaskell
same as `@Opaque()` was removed where `@Type(.Opaque)` was suggested as a replacement until opaques with methods `opaque {}` was accepted.

1604927093
ifreund
@Vector() is now std.mem.Vector()

1604927099
ifreund
s/mem/meta/

1604928314
Kena
Allright! You're really helpful! Thanks g-w1, novaskell and ifreund

1604935697
Kena
Does someone know what is the TypeId `BoundFn` represent?

1604935726
alexnask[m]
BoundFns are the types of expressions like someObject.someMethod

1604935795
Kena
Very nice. So it could be of type @This()?

1604935820
g-w1
I don't think. @This() is for structs

1604935856
Kena
Ah you're right, that's the type of the innermost struct.

1604936115
Kena
alexnask[m] I'm currently watching your "a practical guide to compile-time evaluation" video. You seems like a nice guy and you're talented, even if you describe the code presentend in such a hurry. I hope you'll find a job related to programming.

1604936132
alexnask[m]
thanks

1604936153
alexnask[m]
Presenting again this w/e ;)

1604936183
Kena
On which topic this time?

1604936255
Kena
It would be nice to explain in quite layman terms the introspection and reflection mechanisms.

1604936280
Kena
That would help to identify which use cases they can be applied to.

1604936296
Kena
s/can/could

1604936404
teratorn
ifreund, I'm writing a lib that will expose a C API. Should i just accept like a void* and size_t, like a C API would? or can Zig use a fat pointer type, and expose it for C?

1604936406
goldcell
perphaps making printf

1604936474
ifreund
teratorn: zig doesn't have a way to expose it's fat pointers (slices) as a C API, you'll want a [*]u8 and usize yeah

1604936524
teratorn
ifreund,  ok cool

1604936535
g-w1
are slices garuneteed to always have the same memory layout?

1604936539
ifreund
g-w1: no

1604936553
g-w1
ok

1604936587
ifreund
teratorn: you can easily convert that to a slice for interal usage as well, just `const slice: []u8 = ptr[0..length];`

1604936628
teratorn
cool!

1604937182
teratorn
how do you pop an item from an ArrayList?

1604937200
teratorn
really a deque would be perfect

1604937223
ifreund
teratorn: std.LinearFifo

1604937259
ifreund
also ArrayList has a pop() function iirc

1604937260
dutchie
std.fifo.LinearFifo

1604937266
ifreund
dutchie: thanks :D

1604937267
dutchie
and yeah, ArrayList has a pop

1604937278
teratorn
are the docs not up to date?

1604937278
dutchie
though it's better as a stack than a fifo

1604937317
ifreund
teratorn: if you're talking about the generated std docs, no probably not

1604937351
ifreund
I recommend just searching the std source code, its surprisingly readably

1604937352
teratorn
yeah fifo would be good. its for a queue of packets that a consuming process will flush out of a decoder

1604937409
teratorn
ifreund, cool

1604943184
teratorn
getting error: use of undeclared identifier 'LinearFifo'

1604943363
g-w1
are you using LinearFifo as a function or struct? it is a function

1604943536
teratorn
i need a struct member of that type

1604943594
Nypsie[m]
`std.fifo.LinearFifo(u32, .Dynamic).init(allocator);` for example to create a dynamic list of u32's

1604943600
g-w1
ah. const X = struct {fifo: std.fifo.LinearFifo(WhateverTypeYouWantInTheFifo, .Slice)}

1604943613
Nypsie[m]
Aah struct membero

1604943616
Nypsie[m]
I didn't read :P

1604943631
g-w1
the function doesn't init it, but creates a type

1604943641
teratorn
cool

1604943645
Nypsie[m]
I am aware

1604943652
g-w1
I was talking to teratorn

1604943669
Nypsie[m]
My bad. I shouldn't be online after work I guess :P

1604943716
teratorn
so how do you init it?

1604943746
g-w1
std.fifo.LinearFifo(u32, .Dynamic).init(allocator);

1604943808
teratorn
yes but as a struct memeber

1604943816
teratorn
i dont know where i call the init method

1604943846
g-w1
add an init function to ur struct and then init it. or just pass an initted fifo to ur struct when u create it

1604943895
teratorn
MyStruct { fifo: .init() }

1604943935
g-w1
MyStruct { fifo: std.fifo.LinearFifo(u32, .Dynamic).init(allocator) }

1604943939
g-w1
this should work

1604944029
g-w1
var thing = MyStruct { .fifo =  std.fifo.LinearFifo(u32, .Dynamic).init(allocator) }; (ive been writing too much rust :))

1604944059
idk
If i use a try statement in a function that returns a value will i have to mark the return value with a "!" because it may return a err?

1604944079
travv0
idk: yep

1604944153
idk
so then are there alot of functions in your code that return a "!" value

1604944163
g-w1
yes

1604944210
idk
also will zig throw an error on compliation if i put a "!" even if the function doesn't throw an error?

1604944272
travv0
nope

1604944291
idk
oh ok

1604944295
scientes
yes it will

1604944298
travv0
well maybe for the inferred error set (so just a ! with nothing to the left), not sure about that case

1604944315
scientes
it will say "functions that return ! must throw at least one error"

1604944335
scientes
you can lie to it with if (false) return error.NotAnError;

1604944336
scientes
however

1604944398
idk
nice

1604944416
idk
wait so every feature of zig is compiletime or ..?

1604944514
scientes
idk, type check is comptime, because zig is a static language

1604944564
ikskuh
<scientes> it will say "functions that return ! must throw at least one error"

1604944566
ikskuh
not anymore

1604944575
ikskuh
that error was removed

1604944593
scientes
oh ok

1604944601
scientes
my knowledge of zig is based on ~0.6.0 time-frame

1604944642
ikskuh
yeah, some stuff changed in the last 6 months :D

1604945337
travv0
i was wondering why it wouldn't just infer an empty error set

1604945390
scientes
travv0, that is irrelevent to the type

1604945398
scientes
if there is ! you have to unwrap the error

1604945406
scientes
even if it an empty error set

1604945417
scientes
well, yeah error set is part of the type...

1604945428
travv0
i think you're misunderstanding me

1604945439
scientes
when I actually used the error type as they were designed I ran into compiler bugs

1604945475
ikskuh
scientes: can you give an example?

1604945479
ikskuh
i never encountered compilerbugs

1604945484
ikskuh
even withy empty error sets

1604945490
scientes
error set merging

1604945494
Kena
I have a noobie question. Is caching a desirable effect or is a drawback? Alex state in a video that "anonymous struct literals have a different type at each creation, thus avoiding caching of functions.

1604945496
scientes
is unimplemented

1604945544
g-w1
do you mean error set merging is unimplimented in stage2?

1604945549
scientes
stage1

1604945583
ikskuh
can you explain this?

1604945587
ikskuh
i use error set merging

1604945591
ikskuh
the stdlib uses error set mergin

1604945609
scientes
there are a bunch of crashes because it cant compare error sets for equality, et cetera

1604945648
g-w1
im thinking of implimenting error set inference in stage2. do you think it would be hard?

1604945720
ikskuh
scientes: I see

1604945742
ikskuh
"(A||A) == A" is currently false

1604945756
scientes
no, its zig_panic("TODO")

1604945764
scientes
or at least it was

1604945773
ikskuh
i verified that code above

1604945777
scientes
oh ok

1604945781
ikskuh
must be a very old compiler version

1604945785
ikskuh
it worked for as long as i use zig

1604945787
scientes
no, this was 0.6.0

1604945797
travv0
that's very old in zig time

1604945850
ikskuh
0.6.0: works

1604945859
scientes
hmm

1604945861
ikskuh
0.5.0: works

1604945871
ikskuh
0.4.0: works

1604945884
travv0
lol do you have all the versions on your machine?

1604945887
alexnask[m]
xq are you a zig historian?

1604945887
ikskuh
0.3.0: works

1604945890
ikskuh


1604945891
fengb
All the zigs

1604945894
travv0
oh

1604945896
travv0
duh

1604945901
alexnask[m]
;)

1604945904
ikskuh


1604945962
ikskuh
funny thing: that code didn't change since 0.3 :D

1604946370
FireFox317
andrewrk, what is the lock on line 2356 in main.zig supposed to lock? Because currently it is a lock around the manifest file used when linkingWithLLD (i.e. ./zig-cache/h/b2fbb7ee8329c4685737834a259b3cbd.txt). Is this correct?

1604946439
andrewrk
FireFox317, the lock is protecting the `build` executable produced from build.zig

1604946537
g-w1
this is probably why zig run fails #6939

1604946571
FireFox317
andrewrk, okay thanks. So then what i'm seeing is a bug? I printed the lock and it is saying it is locking ./zig-cache/h/b2fbb7ee8329c4685737834a259b3cbd.txt.

1604946609
andrewrk
FireFox317, that .txt file is the file used as the lock to protect the `build` executable

1604946626
andrewrk
this would make another `zig build` hang until the lock is released

1604946645
FireFox317
andrewrk, yeah exactly that is what i'm trying to solve now

1604946686
andrewrk
FireFox317, I think it would make sense to release the lock before executing the child process

1604946757
FireFox317
andrewrk, Well now i see the issue, because you can have one instance of `zig build` running then change the underlying build.zig file and then run `zig build` again, and now the two instances use different zig build files. Do we want to protect this situation?

1604946817
teratorn
error: container 'std.heap' has no member called 'arena_allocator'

1604946834
teratorn
im trying to init an allocator (c allocator would be fine...) ..?

1604946900
andrewrk
FireFox317, it's a good question. I think probably the best behavior would be to release the lock just before executing the child process

1604946934
andrewrk
since it is common to have long running `zig build run` or similar and expected that they could run at the same time

1604946980
FireFox317
andrewrk, okay. But that won't protect for the situation i described above (which i think is a fair trade-off, because otherwise we can't run multiple `zig build` instances at the same time)

1604946993
andrewrk
hmm I think there is a new consideration though - with the updated caching behavior, this might actually cause a problem on windows where the exe can't be touched because it is being executed. previously we did not have this situation because hashing the input files was part of the cache namespace

1604947054
andrewrk
just brainstorming here, but one possibility would be to copy the `build` executable (which is likely to be small) to a unique file name before executing it, and then release the lock

1604947082
andrewrk
this would essentially match the semantics of the old cache behavior but with the performance benefits of the new one

1604947121
andrewrk
(in this proposal the unique file name would be based on the hashes of the input files)

1604947150
ikskuh
teratorn: std.heap.ArenaAllocator

1604947151
alexnask[m]
it could just be the digest, no?

1604947181
ikskuh
what kind of allocator do you want?

1604947187
novaskell
teratorn: `std.heap.ArenaAllocator.init(std.heap.page_allocator);` ?

1604947302
FireFox317
andrewrk, okay thanks for the information, i'm gonna work on this tonight :)

1604947333
FireFox317
I guess it's pretty stupid to change the build.zig file inbetween two running instaces of `zig build` anyway right

1604947359
alexnask[m]
users gonna dumb

1604947388
andrewrk
FireFox317, ehh not necessarily, maybe one of them is a long running process unrelated to the changes

1604947418
teratorn
.\amp.zig:58:55: error: expected type '*std.mem.Allocator', found '*const *std.mem.Allocator'

1604947418
teratorn
var alloc = std.heap.ArenaAllocator.init(&std.heap.page_allocator);

1604947439
ikskuh
std.heap.page_allocator is already a pointer

1604947441
alexnask[m]
std.heap.page_allocator is already a *std.memAllocator

1604947443
ikskuh
no need for adressing

1604947446
ikskuh
operator

1604947466
FireFox317
andrewrk, alexnask[m], yeah true actually.

1604947495
andrewrk
alexnask[m], yeah I'm just suggesting a way to avoid an ever-increasing number of copies every time it is executed - if it is hashed based on something consistent then it will not need to be copied if nothing is changed (or if it matches a previous state)

1604947513
teratorn
then i get, .\amp.zig:59:28: error: expected type '*std.mem.Allocator', found 'std.heap.arena_allocator.ArenaAllocator'

1604947513
teratorn
var a = AmpDecoder.new(alloc);

1604947658
andrewrk
teratorn, there is an example of what you are trying to do on

1604947733
novaskell
need to get the allocator from it `&arena.allocator`

1604948297
teratorn
i dont understand why zig tells me i have to init a struct member in the definition of the struct

1604948300
teratorn
.\amp.zig:27:9: error: variables must be initialized

1604948301
teratorn
pub var box_buffer: std.fifo.LinearFifo(AmpBox, .Dynamic);

1604948314
teratorn
but if i try to call init() there i get another error

1604948358
teratorn
.\amp.zig:27:67: error: expected type 'type', found 'std.fifo.LinearFifo(AmpBox,std.fifo.LinearFifoBufferType { .Dynamic = {}})'

1604948358
teratorn
pub var box_buffer: std.fifo.LinearFifo(AmpBox, .Dynamic).init(std.heap.page_allocator);

1604948433
g-w1
you want pub var box_buffer = instead of :

1604949813
teratorn
in the struct definition??

1604949946
g-w1
you dont use var to declare struct members, you use it to declare variables inside structs

1604949965
g-w1


1604954103
FireFox317
andrewrk, I just implemented it for linux and tried to do it for windows, however there is different issue which i cannot debug since i have no debug version of zig on windows :(

1604954289
andrewrk
FireFox317, I have good news on that front - give me a minute and I'll explain

1604954412
teratorn
g-w1, in the struct definition??

1604954427
teratorn
g-w1,  i thought you used ":" there between var name and type

1604954457
g-w1
could you send a little mode code? I can't really understand what you are trying to do

1604954493
teratorn
declare a LinearFifo in a struct def

1604954497
teratorn
thats all

1604954502
teratorn
with c_allocator if possible

1604954515
teratorn
and initialize it where and how im not sure

1604954564
data-man
Zig topic on GH

1604954597
g-w1
ah `const P = struct { lfifo: std.fifo.LinearFifo(u8, .Dynamic), }; var thing: P = P { .lfifo = std.fifo.LinearFifo(u8, .Dynamic).init(alloc) };` teratorn, does this make sense

1604954643
teratorn
g-w1, makes sense ill try it

1604954644
teratorn
thx

1604954731
teratorn


1604954737
teratorn
it doesnt compile on 0.7.0

1604954749
teratorn
afaict im doing it as suggested

1604954766
teratorn
is there an online web compiler / pastebin for zig?

1604954772
g-w1
godbolt.org

1604954877
teratorn


1604954937
ugla
teratorn: looks like you want that variable to be a struct field.

1604954980
ugla
Both of them I guess

1604954993
g-w1
teratorn, this still doesn't compile, but its better than what you hard before. i dont know where you are getting ptr[0..size].

1604954999
g-w1
s/hard/had

1604955102
justin_smith
that declaration for box_buffer - is LinearFifo supposed to be returning its type?

1604955237
teratorn
i think yes

1604955243
teratorn
its a  fn that returns a type?

1604955246
andrewrk
FireFox317, so now with zig-bootstrap we could distribute a "work on zig" tarball which includes zig, lld libraries, clang libraries, llvm libraries, and then you could build zig from source using zig cc and this will give you * no MSVC needed to be installed * release LLVM + debug zig

1604955472
Snektron
that would be pretty great

1604955555
ikskuh
yes, indeed

1604955623
alexnask[m]
Is release LLVM + debug zig possible? I thought on windows the libcs had to match (in both dynamic vs static linking and build mode)

1604955639
andrewrk
it's an msvc limitation I believe

1604955647
andrewrk
but we would be compiling everything with zig cc

1604955663
alexnask[m]
Hm fair enough

1604955675
andrewrk
you could make this tarball right now, there is nothing preventing it from working

1604955696
alexnask[m]
I was intending on compiling LLVM in debug mode but this is probably the way to go

1604956227
novaskell
teratorn: try to give a name to computed types e.g `const AmpBoxFifo = std.fifo.LinearFifo(AmpBox, .Dynamic);`, makes it easier to work with and keep track of things. Goal is to have to remember as little as possible as the names tell you the whole story.

1604956786
FireFox317
andrewrk, ah yeah that would be nice. I will try out that method

1604957415
teratorn
so no one is quite sure how to make this code compile?

1604957448
g-w1
where did you get ptr[0..size]?

1604957496
teratorn
oh thats a  mistake but i think (hope) unrelated

1604957545
g-w1
and the switch statement with nothing in it is a compile error too, and you dont want vars for struct elements but `pub var state: ParseState;`-> `state: ParseState,` iirc there isn't a concept of public or private fields on a method

1604957551
teratorn
still says variable must be initialized in reference to the box_buffer definition

1604957585
g-w1
read my last message

1604957612
g-w1
pub var box_buffer: std.fifo.LinearFifo(AmpBox, .Dynamic); -> box_buffer: std.fifo.LinearFifo(AmpBox, .Dynamic),

1604957874
novaskell
teratorn: It compiles but I'm not sure what you want to do

1604959355
hch
the network game presented in yesterday's zig birthday party, is that public?

1604959495
hch
ah now he mentioned that it's on gh

1604959931
plakband
Hey all, I've been experimenting with Zig and was wondering if somebody could answer two questions about this snippet:

1604960342
ifreund
plakband: avoid anytype unless you have to used it, which you don't here

1604960368
ifreund
fn gt(comptime T: type, a: T, b: T) bool { return a > b; }

1604960393
ifreund
but also yeah writing tiny functions like this is unidiomatic I'd say

1604960402
ifreund
why not just use the > operator?

1604960675
alexnask[m]
@hch

1604960694
hch
got it, crawling through it already. thanks anyway

1604960857
plakband
ifreund: The > is arbitrary, I just needed some function to pass around. I'm trying to see to what degree I can do functional programming in Zig, and how much type inference I have to do "manually".

1604960866
plakband
What's wrong with anytype?

1604960893
ifreund
trying to do functional programming in zig is going to create a lot of friction

1604961738
plakband
I'm OK with some friction. I have a Haskell game library that I want to port to a systems programming language. It's tricky because of the types (Rust's type system wasn't flexible enough, which brought me to Zig), but the actual runtime code should be fairly easy, it doesn't need e.g. closures.

1604962570
novaskell
using FRP or?

1604962884
plakband
No, ECS. If you do it right, most of your ECS logic can be fixed size vectors and bit masks

1604964048
teratorn
hmm stuck on another compile error i dont really understand :-(

1604964171
ifreund
what's the error?

1604964305
teratorn
.\amp.zig:64:34: error: expected token 'Symbol', found 'error'

1604964305
teratorn
self.error = ParseError.KeyTooLong;

1604964335
ugla
perhaps because error is a keyword

1604964355
teratorn
ouch

1604964395
ugla
there is some syntax to use keywords as identifiers, @"error" perhaps?

1604964418
ifreund
yeah, @"foo" lets you use literally anything

1604965261
FireFox317
andrewrk, i'm trying out your suggestion regarding building zig for windows-gnu using zig-bootstrap, but i'm getting the following error:

1604965300
andrewrk
FireFox317, ah yes actually

1604965333
andrewrk
ok so first of all llvm::cfg::Update<llvm::BasicBlock*>::dump() is a debug function

1604965353
andrewrk
we shouldn't try to call it for an llvm compiled in release mode

1604965363
FireFox317
yeah i build llvm with release and zig in debug

1604965401
andrewrk
one thing to check: is that simply a missing library from this list?

1604965492
FireFox317
ah i guess because llvm-config build in release mode might be outputting different libs compared to debug mode?

1604965602
andrewrk
FireFox317, yes perhaps. when we build with zig-bootstrap the list of libs is explicitly set - no invocation of llvm-config

1604965636
FireFox317
yeah but i mean the list you just pointed out is probably generated with a llvm-config built for release mode

1604965641
andrewrk
ahh yes

1604965663
andrewrk
I think this is going to be a simple fix

1604965765
andrewrk
hmm I can't find that function in the llvm sources

1604965823
FireFox317
that is super strange

1604965907
andrewrk
uhh wtf is this macro LLVM_DUMP_METHOD

1604966004
andrewrk
anyway I would be happy with a patch to disable zig's call to that function until we get it sorted out

1604966144
FireFox317
andrewrk, yeah but just grepping for dump() in the zig source tree finds no cpp files

1604966162
andrewrk
ok looks like this has to do with the #if !defined(NDEBUG) || defined(LLVM_ENABLE_DUMP) guard in front of the definition

1604966173
FireFox317
well expect for some stuff in libcxxabi

