1597202277
epmills
hey, all.  looking for regex processing code.  anything in std lib or has someone written anything in zig?

1597203421
traviss
epmills:

1597203481
traviss
i haven't used it myself so i'm not really sure what to expect

1597205652
epmills
traviss: thx!  i'll check it out.

1597247813
cren
Hey, is it possible to initialise a slice with a fixed size?

1597247837
pixelherodev
andrewrk: should CBE compare_output tests invoke `zig cc` on stage1, use the system compiler, or...?

1597247875
pixelherodev
I think `zig cc` is probably the most consistent option there, but I could see arguments for why that makes it bad for automated testing

1597247910
andrewrk
not `zig cc` the CLI, but yes use zig's built in ability to compile C code

1597247920
andrewrk
cren, can you elaborate?

1597247922
ifreund
cren: you can set the .ptr and .len fields of slices to whatever you like

1597247993
ifreund
andrewrk: in case you were wondering, I haven't given up on wasm backend. Just got sidetracked working on river

1597248083
pixelherodev
ifreund: no one's going to get annoyed at you for taking a break from a project you're volunteering on :)

1597248102
cren
at the moment I'm doing `array: [n]T = undefined;` followed by `slice = []T = array[0..];`

1597248115
cren
I was hoping there'd be a way to do that in a single line

1597248128
cren
oops, I mean `slice: []T =`

1597248130
pixelherodev
A slice of undefined memory? Huh

1597248143
cren
it gets written by a function

1597248146
ifreund
cren: I don't think that does what you want

1597248151
pixelherodev
Write, of course (pun intended)

1597248167
ifreund
what you want is for the .ptr to be undefined but the .len to be defined

1597248175
cren
I guess

1597248186
ifreund
so var s: []T = undefined; s.len = x;

1597248187
fengb
He wants both to be defined, but the contents remain undefined

1597248198
pixelherodev
^

1597248208
pixelherodev
You don't want the pointer undefined there

1597248209
ifreund
ah I see

1597248216
cren
I don't actually need the array

1597248216
pixelherodev
Pointer undefined would require allocation within the function

1597248224
cren
that was why I was trying to reduce it to one line

1597248238
cren
just need to get the output from this function that writes into a buffer you supply

1597248246
ifreund
what memory do you want the slice to end up pointing to?

1597248258
fengb
Zig forces you to create the array so it's explicit where the stack variable goes

1597248263
cren
a string. Here, I'll post the code someplace, that'll make it easier

1597248295
pixelherodev
cren: if you want it writing to a new stack buffer, you

1597248301
ifreund
sounds like you need to supply a buffer then

1597248307
pixelherodev
The array

1597248316
cren
ohh yeah cause slices are just pointers

1597248317
ifreund
which could be an array on the stack or something you allocate

1597248328
pixelherodev
Slices are just special pointers, yeah

1597248352
cren
I was getting confused because I was then reading the value (into debug.print) from the slice, but that's just reading it from the array...

1597248359
pixelherodev
Yep! :)

1597248362
cren
:)

1597248368
pixelherodev
You could

1597248379
pixelherodev
Then call the func with `func(arr[0..])` and use the array

1597248402
cren
while we're on the subject, what if I don't know how much data might be read into the buffer? How can I ensure the buffer is long enough

1597248410
cren
so that the text doesn't get cu

1597248417
cren
like that

1597248426
cren
(it's a string buffer)

1597248449
ifreund
well if the api you're using tells you the length, you can allocate

1597248462
cren
yes

1597248463
fengb
Either give it a nice max or you need to allocate yeah

1597248578
cren


1597248598
cren
That's the program. Do you think you could give a quick example of how to do the allocation?

1597248635
ifreund
oh this is a socket thing

1597248651
ifreund
you can probably just call recieve again if you run out of space

1597248678
cren
how would the program know that it hadn't got the whole message, though?

1597248807
ifreund
well, that's not up to the transport layer really. Usually the protocol defines a fixed size header or something that says how long the message is

1597248987
fengb
Yeah, with raw TCP sockets, you only really know of packet sizes. Messages don't really exist at that layer

1597249057
companion_cube
whereas zeromq gives you framing, woo

1597249271
cren
ah, good point. I'm aiming for this thing to become an IRC client eventually, so it will need to detect the end of IRC messages. I have yet to read the spec

1597249297
fengb
Gosh, ancient technology :P

1597249304
fengb
Back before everything decided to use HTTP

1597249361
cren
HTTP is like the de facto protocol for the internet now

1597249479
companion_cube
you can just read lines

1597249483
companion_cube
IRC is line oriented

1597249953
cren
by the way, is there any difference between passing a slice to a function so it can write to an array, and passing a pointer for the same purpose?

1597250238
fengb
No, a pointer to array coerces into a slice automatically

1597250352
cren
OK, thanks

1597259001
pixelherodev
"HTTP is like the de facto protocol for the internet now" Unfortunately, yeah.

1597259012
pixelherodev
It's not a particularly good protocol, but it's what we've got

1597259098
leeward
For the web, yes. For the internet? No.

1597259125
companion_cube
de facto, alas, it is

1597259174
pixelherodev
leeward: Yeah, fair

1597274332
pixelherodev
I think I figured out how to maintain interest in the CBE. I'm rewriting some of the tricarbon components; I'm going to make sure they compile to C from the beginning :D

1597274468
Snektron
I didn't even know tricarbon (the molecule) existed

1597274919
pixelherodev
lol

1597274926
pixelherodev
Snektron: do you remember my other name?

1597274928
pixelherodev
I barely do

1597274932
pixelherodev
Cyclopropatriene

1597274936
pixelherodev
It

