1579567672
pixelherodev
" pixelherodev wanted to help work invest in a non-llvm future, and this is one related task" Honestly, I'm more interesting in investing in a

1579567715
pixelherodev
If we use LLVM IR internally, but have our own rapid backend (like zasm) that can instantly generate unoptimized code from that IR without using libLLVM / C++ I am perfectly happy

1579567761
pixelherodev
In other words, if we reimplemented all of LLVM in Zig, I'd have no problems; It's the dependency on another language that really gets to em

1579567763
pixelherodev
s/em/me

1579567788
pixelherodev
And yes I know that substitution wouldn't actually do what I want; this is a text chat, it doesn't matter.

1579567794
companion_cube
also llvm has its own semantics

1579567824
pixelherodev
Sure, but if they're Zig-compatible it's fine

1579567977
fengb
Pretty sure it used to map directly into LLVM IR but it got super complicated

1579568035
companion_cube
if you want a spec of comptime evaluation, maybe it's better to not embed the whole llvm IR into it :)

1579568044
companion_cube
(assuming zig 1.0 gets a proper spec)

1579568054
pixelherodev
Why not?

1579568063
pixelherodev
Shouldn't make a difference

1579568067
companion_cube
llvm IR is not stable

1579568078
companion_cube
and why would zig depend on an unrelated project on which it has no control?

1579568079
pixelherodev
Oh wait - stuff like @testComptime is probably also not easy to do in LLVM IR

1579568085
pixelherodev
True

1579568112
pixelherodev
Especially if it's still largely controlled by Apple

1579568145
hryx
both LLVM and zig IR are implementation details of the reference compiler, not part of the spec

1579568148
companion_cube
and catering to C and C++

1579568212
hryx
companion_cube: milestone for the language spec is 1.0

1579568231
companion_cube
[subscribe]

1579568248
andrewrk
fengb, yeah, we used to go straight from AST -> LLVM IR

1579568525
mikdusan
when self-hosted comes functional it's going to be a lot of work keeping stage1 at parity; is the plan to let things like runtime safety checks and other broad swaths that stage1 won't really need?

1579568555
mikdusan
err let things like safety checks be self-hosted only?

1579568627
hryx
yeah good question, I was recently wondering if "multibuild" could be self-hosted-only too

1579568905
pixelherodev
`unreachable` checks don't show up in release builds, right?

1579569027
hryx
pixelherodev: this explains the unreachable behavior for each build mode:

1579569086
pixelherodev
Right, brilliant

1579569095
pixelherodev
Now I

1579569100
pixelherodev
So I can redo this library in Zig

1579569112
pixelherodev
So much that'd be better...

1579569140
pixelherodev
Hell, not using a heap (using a FixedBufferAllocator instead) alone would make me much more comfortable with this code

1579569142
terinjokes
i've noticed some of the os function signatures are different between linux and c, so that `system.fn` doesn't work. is this a bug or intentional?

1579569164
pixelherodev
example?

1579569250
Snektron
pixelherodev, youre working on llvm->machine code right?

1579569260
terinjokes
os.setsockopt, opt is `[]const u8`, in linux.zig the parameter is defined `[*]const u8`, and in c.zig it's `*c_void`. error if you call setsockopt while compiling against c is "cast discards const qualifier"

1579569271
Snektron
Why that instead of working on zig IR directly?

1579569291
pixelherodev
Snektron, because Zig IR is just as unstable long term

1579569307
pixelherodev
LLVM IR at least means that I'll be able to continue using this for LLVM 9 theoretically indefinitely

1579569334
pixelherodev
and it'll be simpler to go from LLVM IR 9 to 10 than from Zig IR unspecified -> whatever comes in the future,

1579569339
Snektron
Not if LLVM is updated right

1579569349
pixelherodev
Furthermore, this allows in theory for C support

1579569357
pixelherodev
And some of my backends don't have any other C compilers yet

1579569363
pixelherodev
I'm hoping to add a z80 backend, for instance

1579569375
pixelherodev
And there are few good z80-targetings compilers

1579569378
pixelherodev
s/targetings/targeting

1579569379
Snektron
<pixelherodev "and it'll be simpler to go from "> I suppose thats true, but it seems like a strange step to me

1579569399
pixelherodev
Like I said, Zig also isn't intended to be the only frontend

1579569419
Snektron
Anyway

1579569426
mikdusan
heh clang->ll->pixelherodev->z80

1579569434
pixelherodev
?

1579569436
Snektron
Are you going to add fancy optimizations too?

1579569452
Snektron
Or will you just make naive code generation

1579569452
mikdusan
would that pipeline work?

1579569455
pixelherodev
Possibly

1579569457
pixelherodev
mikdusan, ?

1579569462
pixelherodev
Why am I in there?

1579569463
pixelherodev
ohhh

1579569467
pixelherodev
Right

1579569472
pixelherodev
Yeah, in theory

1579569473
pixelherodev
Why?

1579569479
mikdusan
just curious

1579569480
pixelherodev
Snektron, probably

1579569501
pixelherodev
Already does a few, but those are more like torturing the IR into a simpler form that the backend has an easier time parsing than actually optimizing

1579569508
Snektron
Or, since you depend on LLVM IR, will you let LLVM handle generic IR optimization and then do naive code generation?

1579569527
pixelherodev
Initially, naive]

1579569529
pixelherodev
s/]//

1579569543
pixelherodev
But long term, definitely would be adding backend-specific optimizations

1579569570
pixelherodev
e.g. for z80, some optimizations would probably focus on minimizing amount of registers needed

1579569597
pixelherodev
or, for e.g. u32s, would probably attempt to convert to

1579569598
Snektron
Did you see this?

1579569607
pixelherodev
Link sounds familiar

1579569610
pixelherodev
Ah, yeah!

1579569642
mikdusan
pixelherodev: I only thinking in broad strokes, but fyi, I am not sure llvm-ir is going to be as suitable for incremental building as zig-ir is (or will be). because we can change zig-ir to be whatever it needs to be.

1579569644
hryx
OT: anyone else here see "LLVM" and hear "fifty fifty five one-thousand" in your head?

1579569661
pixelherodev
mikdusan, I don't doubt it

1579569664
pixelherodev
But this is purely short term

1579569678
pixelherodev
hryx, I don't work with Roman numerals generally :P

1579569712
andrewrk
mikdusan, yeah that's the plan, stage1 only has to be good enough to get us to self-hosted, but we shouldn't have to compromise the quality of the std lib

1579569752
pixelherodev
Huh

1579569758
pixelherodev
Snektron, yeah, that's not a bad idea

1579569767
pixelherodev
To use QBE IR instead of LLVM IR, that is

1579569773
pixelherodev
But it would make Zig support much more difficult

1579569774
mikdusan
hryx: waiting for your PR to add roman-numeral-literals :P

1579569792
pixelherodev
Unless I write a Zig IR -> QBE IR translator for stage1

1579569795
pixelherodev
But that's harder short-term

1579569804
pixelherodev
In the short term, LLVM IR is easier to work with

1579569816
Snektron
I didn't suggest that, i just thought that project might interest you

1579569833
pixelherodev
Ah

1579569836
pixelherodev
Heh, my bad

1579569849
pixelherodev
Found the IL link on my own then :P

1579569853
Snektron
You'd have to add Z80 support anyway

1579569864
pixelherodev
Well yeah, but I need to do that regardless

1579569939
hryx
mikdusan: ha, guess it's time to prepare for another syntax flamewar! x___x

1579570090
hryx
I recall Rust doing a pretty good job of explaining why they should (and did) move to their own IR:

1579570219
andrewrk
zig's ir is how we do comptime

1579570238
pixelherodev
That's what I thought

1579570250
mikdusan
back when zig was AST->LLVM-IR, was there any comptime at all?

1579570275
andrewrk
only really simple stuff like 3 + 4

1579570292
pixelherodev
Evaluating Zig IR is easier than LLVM IR?

1579570299
andrewrk
if/switch/for/while were all really complicated

1579570315
andrewrk
zig ir pass 1 is typeless

1579570333
andrewrk
and generics were buggy. zig ir made generics robust

1579581687
andrewrk
it's caught by semantic analysis, which then gives a helpful compile error message

1579581690
hryx
pixelherodev: this may have been an oversimplification in the grammar, deferring the work of disallowing non-extern VarDecls to the parser

1579581699
hryx
oops, jinx

1579581708
pixelherodev
Yeah, that makes sense

1579581732
pixelherodev
Looking at the grammar to ensure that the AST examination is 100% legal

1579581742
pixelherodev
Rejecting invalid inputs, and accepting all valid inputs

1579581831
mikdusan
macOS man page for fcntl: "This interface follows the completely stupid semantics of System V and IEEE Std 1003.1-1988 (POSIX.1)"

1579583404
andrewrk
heh it's funny when man pages are passive aggressive

1579583560
terinjokes
aren't most of the macOS man pages from one of the BSDs?

1579583567
terinjokes
i feel like I've read that somewhere before

1579583596
mikdusan
freebsd

1579583603
mikdusan
and yup their man page has it

1579583765
pixelherodev
Alright, very naive refactoring works

1579583770
pixelherodev
No namespace lookups or anything yet

1579583789
pixelherodev
And it still needs to update references...

1579584238
mikdusan
andrewrk: is this locking intended to be exclusive for same-process, same file? via `os_file_open_lock_rw`:

1579584240
mikdusan


1579584318
andrewrk
mikdusan, it's intended to be exclusive across processes for the same file. that's how the cache eviction will avoid messing up ongoing compilations. we don't currently have eviction implemented

1579584533
daurnimator
andrewrk: I looked into making signals an enum: wasn't sure how far to go. e.g. os.sigaction should take an enum; but should linux.sigaction? c.sigaction needs to take a c_int..... should the Signal enum be of different size depending on linking libc or not?

1579584572
daurnimator
possibly related to

1579584648
mikdusan
#2724 has some activity and rdunnington suggests that win32 CreateFile fails with sharing violation when same-file,same-proc

1579584663
mikdusan
whereas fcntl does not fail same-file,same-proc

1579584751
mikdusan
concern being: if single zig process calls os_file_open_lock_rw on the same file simultaneously is there deadlock potential on windows

1579584763
mikdusan
s/simultaneously/overlapping_open

1579584840
andrewrk
the desired outcome is one process blocking until the other is finished with the cache

1579585543
daurnimator
I got used to the pace of the last few weeks. seems odd to not have 10 fixes waiting today! :P

1579585600
hryx
Can anyone with a mac reproduce this bug? I can't and I suspect it can be closed:

1579585611
andrewrk
target cpu/features is a big deal

1579585726
daurnimator
agreed. it unlocks lots of interesting embedded use cases

1579585854
andrewrk
ok here's an idea I did not consider before

1579585880
andrewrk
stage1 could emit a zig ir text format, which is picked up by stage2

1579585904
andrewrk
no no, this can't work, this is a dependency cycle

1579586112
daurnimator
I figured next thing to move to stage2 would be .h file generation

1579586179
andrewrk
that's not really practical to be part of the hybrid

1579586228
daurnimator
oh? why not?

1579586321
andrewrk
it touches a lot of the c++ semantic analysis data types, which is tightly coupled to stage1

1579587008
daurnimator
Do we want to de-C++-ify them so that they are similar between stage 1 and 2?

1579587240
andrewrk
that question doesn't really make sense to me

1579587374
pixelherodev
I was actually wondering

1579587383
pixelherodev
While I completely understand needing to know target features

1579587390
pixelherodev
Why does Zig need to know host features?

1579587409
andrewrk
for the default compilation target

1579587416
andrewrk
by default zig takes full advantage of your cpu

1579587435
daurnimator
andrewrk: as in: make the C++ data types suitable for extern-ing (i.e. plain C); and then 'binding' them from zig

1579587521
andrewrk
it's not so much C vs C++ that is the problem, but the fact that everything is tightly coupled to everything. introducing a layer in the middle is likely to cause more problems than it would solve

1579587536
terinjokes
If i pass the same target as my host, do I get a generic build, or do I get a host-optimized build?

1579587617
daurnimator
terinjokes: right now you get a "baseline" of e.g. pentium 4 if you specify the target

1579587623
andrewrk
passing a target gives a cross compiled target

1579587633
daurnimator
terinjokes: vs if you don't specify the target you get a build optimized for your

1579587719
terinjokes
perfect, that's what I assumed

1579587768
daurnimator
andrewrk: will there be the possibility to target a subset of two cpus?

1579587772
terinjokes
though P4 is a

1579587800
daurnimator
andrewrk: i.e. an intersection of features?

1579587804
andrewrk
the way that will work is to specify a union of the cpu features of each

1579587815
andrewrk
sorry, intersection like you said

1579587917
daurnimator
something like `--target-cpu=cpu1 --target-cpu=cpu2` would do an intersection?

1579587952
daurnimator
--> how would you denote a union vs an intersection?

1579587953
andrewrk
once this branch is merged, status quo will be that you would specify -target-feature a,b,c,d

1579587961
andrewrk
and you would have to do the intersection manually

1579615967
betawaffle
is it expected for objdump to puke on some binaries produced by release-fast and release-small?

1579615985
betawaffle
or does that indicate a zig bug?

1579619238
grayhatter
betawaffle: define "puke"

1579619310
betawaffle
"... objdump: error: 'zig-cache/bin/...': truncated or malformed object (bad section index: 3 for symbol at index 2)"

1579619333
betawaffle
with exit code 1

1579619487
grayhatter
I'd be more willing to suggest it's a bug in both, but I don't know enough to have an opinion worth listening to

1579619781
fengb
Many of us are just flailing around in here with a modicum of hubris

1579619834
fengb
That was unintentionally posh >_>

1579631448
xackus
If anyone is interested, I made a very basic language server

1579631661
andrewrk
xackus, did you find the std.json.Writer API?

1579631662
adamkowalski
awesome! do you have a list of what's implemented so far? Have you seen

1579631907
xackus
andrewrk, I am using std.json.WriteStream if that's what you mean

1579631967
xackus
it basically runs std.zig.parse on the file and displays errors

1579632006
xackus
I also added autocompletion of builtins as a test

1579632018
andrewrk
ah, I made an incorrect assumption based on seeing Primitive and Number types

1579632034
andrewrk
neat

1579632125
xackus
my automatic conversion between zig structs and json makes it easy to add features

1579632159
adamkowalski
andrewrk: Do you have any videos where you discuss why you use NixOS? It looks pretty interesting from a reproducability and deployment perspecitve. But does it take an enourmous amount of disk space since it keeps all these previous generations? It even has a garbage collector to remove some of them right.

1579632243
adamkowalski
xackus: do you have zig fmt integration?

1579632303
xackus
no, I use vscode-zig for that

1579632365
xackus
I made a fork which registers my server

1579632569
betawaffle
xackus: aww cool!

1579632584
xackus
thanks

1579632677
betawaffle
xackus: does your fork fix error reporting with master zig?

1579632734
betawaffle
(for me, everything gets reported with /. as a prefix to the file paths, so none of the reported errors/warnings link back to the files

1579632792
xackus
I didn't mess with that, I didn't know there is a problem, because it works for me

1579632829
betawaffle
huh, interesting

1579632836
betawaffle
it worked for me with 0.5

1579632846
betawaffle
but broke when i switched to master

1579632916
mikdusan
betawaffle: typo? did you mean "./" relative paths ?

1579632961
betawaffle
nope.

1579632987
betawaffle
i'd be able to understand that at least

1579632992
betawaffle
but /. doesn't make sense

1579633073
mikdusan
I am missing context, is this about scraping error output from stage1 and gleaning file paths?

1579633123
betawaffle


1579633202
mikdusan
ok so as of fc20a589931ab9aac6f51e7685d724cbec52dd9e the compiler errors strip cwd from pathname output to help humans when the file is in cwd it will output as relative "./......" and otherwise absolute.

1579633212
mikdusan
i think that server is not anticipating the choice

1579633240
betawaffle
yep, that's my guess

1579633326
betawaffle


1579633345
betawaffle
not sure how vscode.Uri.file works, but presumably that's the issue?

1579633628
metaleap
doesnt the stdlib get "does-it-all-compile"-tested prior to publishing a nightly binary? because just using std.io i'm getting:

1579633629
metaleap
zig/lib/zig/std/io.zig:853:32: error: no member named 'readByte' in struct 'std.fs.file.InStream'

1579633670
metaleap
could be tricky with the "lazy" compiler but surely there's an option to sanity-check every decl in srcfile

1579633699
mikdusan
metaleap: tricky is understatement. right now things need to be covered in test cases

1579633818
mikdusan
it's almost as difficult as... having the C++ unit test all possible .h macro definitions

1579633822
metaleap
so might wanna have a path to where nothing gets published in the stdlib that wouldnt compile when referenced i reckon.. i mean it's the

1579633890
metaleap
i seem to remember someone mentioned there's a "reference-all" kinda flag somewhere

1579634187
mikdusan
metaleap: that error... stream should be

1579634293
metaleap
so i was passing in `std.io.getStdIn().inStream()` but if i pass in std.io.InStream it wont use stdin now would it

1579634352
metaleap
wonky stuff, might use the InStream's builtin readUntilDelimiter type methods directly without this io.readLine helper

1579634392
mikdusan
does this work: `var impl = std.io.getStdIn().inStream(); const in = &impl.stream; _ = in.readLineFrom(....);`

1579634632
metaleap
well it compiles now. so that's

1579634666
andrewrk
adamkowalski, it's a bit old but maybe this one

1579634730
metaleap
mikdusan oh btw in the method form it didnt compile but in the std.io.readLineFrom(&stdin.stream, &buf) it did

1579634809
mikdusan
in method form did you use a pointer?

1579634849
metaleap
both without and with: no member named 'readLineFrom' in struct 'std.io.in_stream.InStream(std.os.ReadError)'

1579634857
mikdusan
ok just curious

1579635040
metaleap
its an interesting corner case here tho for general zig compile-error reporting: we had a caller-at-fault but the report was for lib/std/io.zig. guessing due to the arg type `var`. so this is kinda like "caller-provided type" so type errors could then report such for the call site, not the impl being wrongly-used

1579635274
mikdusan
so it seems we do not accept method syntax for generic functions?

1579635341
metaleap
the thing that trouble me there in std.io.readLineFrom isnt a struct method in the first place

1579635350
fengb
iirc, readLineFrom isn't a method

1579635449
metaleap
in most stacks stdin is "open" from birth til death, same in zig? do i need to open explicitly? i'm getting EndOfStream on the first readByte occurring in a "minimal in/out console app" for crikey's sake  :D  guys this stuff really manages to send one back to one's earliest fumbling coding-baby days

1579635636
mikdusan
nah it should just work like you expect

1579635826
metaleap
so i mean what on EARTH could a meagre newb still be missing here??

1579635831
mikdusan
metaleap:

1579635996
metaleap
ooooh fuark just noticed the binary itself works just zig build run by default doesnt open the stdinput i guess =/

1579636018
metaleap
no pass-through

1579636019
mikdusan
metaleap: heh i tried `zig run foo.zig` but not `zig build run...`

1579636066
metaleap
i gotta get used to it that `zig build foo` does whatever you tell it `foo` is-or-does :D thx for bearing with me

1579636198
andrewrk
might be more simple to use the standard `zig build` to install; manually run your program from the install directory (install directory can be inside your project dir)

1579636209
andrewrk
$ zig build

1579636214
andrewrk
$ ./zig-cache/bin/foo

1579636330
metaleap
yeah it just occurred to me way too late

1579636569
mikdusan
andrewrk: can I get your thoughts on having two instructions "*Src" vs "*Gen" instead of just one where it elevates itself by populating more fields in analysis pass? I've read the comment about type-safety but thinking about self-hosting, we're probably going to have more passes...

1579636630
andrewrk
mikdusan, I'm thinking any extra passes will all be "pass 2" instructions. e.g. they will have type info

1579636675
mikdusan
i c

1579639441
fengb


1579639538
pmwhite
Benevolent BDFL For Life.

1579640064
fengb
Maybe... but we’ve also had a history of imperfect dictators

1579640093
fengb
Speaking of OSS, not just historical countries :P

1579640139
shakesoda
it's certainly not a perfect model

1579640148
fengb
And it doesn’t give confidence in the bus factor

1579640160
shakesoda
yeah, that's a huge problem

1579640202
andrewrk
BDFL is a good way to bootstrap a project, not sustainable forever

1579640226
andrewrk
but the compiler isn't even bootstrapped yet :)

1579640227
shakesoda
i absolutely agree, and it's also a really hard role to get out of when the time has come

1579640234
leeward
Python did pretty well with it for, what, 25 years?

1579640246
leeward
And by "did pretty well" I mean was a successful project.

1579640268
fengb
Benevolent Sith for Life? Always have 2 masters

1579640294
fengb
And hope the apprentice doesn't kill the master 🤔

1579640346
shakesoda
leeward: it's quite impressive, honestly

1579640347
pmwhite
Have you ever heard the story of Darth Guido the wise?

1579640439
fengb
Guido also stepped down because of rampaging egos :(

1579640536
leeward
I think that article is not wrong though. Written rules for social systems have complex consequences. There's no reason to think that because a person wrote the first line of code in a project they'll be good at managing social interaction though.

1579640586
shakesoda
leeward: it can frequently enough be a better indicator of the opposite, lol

1579640629
fengb
Good engineers can often be terrible at social IQ >_>

1579640652
leeward
No idea what you're talking about. I've never met a good engineer who didn't get along with everyone.

1579640661
shakesoda
<- guilty

1579640716
fengb
You're assuming that you're good 🙃

1579640720
shakesoda
leeward: hah

1579640914
fengb
I really hope Zig doesn't boil over some SJW issue :(

1579640982
shakesoda
in my experience it's the people who are causing the issues to begin with that boil over such things

1579640999
shakesoda
so i'd rather hope zig stays true to the channel topic

1579641009
shakesoda
"be excellent to each other"

1579641063
fengb
Most problems are nuanced and have multiple bad actors

1579641079
shakesoda
yes, and most simple explanations of social problems are wrong as such

1579641082
fengb
Most social problems*

1579641132
fengb
But there's been a big upheaval lately. Many of them are old problems that are finally boiling over, but the trend is a little scary

1579641136
shakesoda
the worst project related social fiasco i've ever been involved with spawned from what i perceived to be a benign request to lay off on insults

1579641153
shakesoda
at which point i received an explosion of anger for all kinds of things i'd never so much as heard of

1579641189
fengb
I'm really concerned that we're becoming really good at mob justice

1579641238
pixelherodev
Hey, that's awesome! I always assumed mobs would be terrible at doling justice!

1579641238
shakesoda
i'd place the game on being the social media numbers game, which actively places incentive on being incendiary

1579641247
shakesoda
s/game/blame/

1579641279
shakesoda
so you can get massive amounts of anger rallied around something trivially if you ignore all the nuance in the reality of whatever the situation is

1579641281
companion_cube
if a project is entirely absent from social media, is it isolated from mobs?

1579641291
shakesoda
no - because links exist

1579641304
pixelherodev
"entirely absent from social media" that's a hilarious concept

1579641309
companion_cube
if you can't hear twitter scream, does it matter? :D

1579641315
companion_cube
pixelherodev: I don't count IRC as social media :)

1579641321
pixelherodev
Not what I meant

1579641325
pixelherodev
I don't have

1579641327
shakesoda
and i don't just mean hyperlinks, links also in the form of just referencing it elsewhere

1579641330
pixelherodev
Discord / IRC are the closest I get

1579641345
pixelherodev
I'm willing to bet I've been tagged on sites on which I have no presence dozens of times

1579641347
leeward
As long as you don't look at reddit, it doesn't matter what they're saying. Right?

1579641348
pixelherodev
As an

1579641378
fengb
Github is a social network of sorts :P

1579641385
companion_cube
leeward: exactly :p

1579641398
shakesoda
unfortunately your awareness of issues or not doesn't mean it won't become your problem later, independent of how it spread or its truth

1579641401
companion_cube
(well, you do need to modate github issues, indeed, I imagine)

1579641437
pixelherodev
Heh - reminds me of the argument I got into with someone on Reddit who was saying C++ for kernel-level code was a good idea in response to my blog post about Zig

1579641527
companion_cube
isn't the standard answer to taht to cite Linus?

1579641537
companion_cube
(not that I'd agree, but still, it seems like a time honored tradition)

1579641550
fengb
I was gonna say, Linus would allow Zig far earlier than C++ :P

1579641586
shakesoda
in the spirit of being good to people, i will withhold my opinions about c++ and its users ;)

1579641673
leeward
shakesoda: Good idea. /join #c++-flaming

1579641681
leeward
Wait, did I type that?

1579641712
shakesoda
:D

1579641724
pixelherodev
That's a real channel?

1579641734
shakesoda
everything is a real irc channel if you believe

1579641734
leeward
Define real.

1579641748
pixelherodev
Didn't think so

1579641757
pixelherodev
... and yes I checked anyways

1579641778
shakesoda
the act of checking is enough to make it real, such is the beauty of irc

1579641804
pixelherodev
I'd define real as having more than one user.

1579641818
shakesoda
reasonable

1579641855
shakesoda
per freenode policy though, it should probably be a ## channel if it were to be real

1579641857
leeward
shakesoda: I checked without joining it.

1579641864
pixelherodev
shakesoda, true

1579641879
pixelherodev
Hence me languishing alone in the #limnstation and #zany80 channels here until such time as a) someone gains interest in those projects and b) they also use IRC

1579641883
shakesoda
leeward: i've been had!

1579641893
leeward
:P

1579641899
pixelherodev
The intersection of A and B seems to be approximately zero :P

1579641995
leeward
It looks like a set with 1 member.

1579642091
pixelherodev
I don't believe I qualify for set A

1579642122
pixelherodev
Especially not for #zany80 ; I started that in my freshman year of high school, and put it on hold earlier this year due to lack of time

1579642365
trilead
Hi, I'm new to zig and trying to build for armv7-freestanding, but I'm having trouble with build.zig. Particularly with this "exe.addCSourceFile("src/blink.c", [_][]const u8{"-O3"});". I am getting ".\build.zig:13:41: error: array literal requires address-of operator to coerce to slice type '[][]const u8'". But even when I prefix the array with '&'

1579642366
trilead
I still get the same error.

1579642440
pixelherodev
& goes before the [_]

1579642497
trilead
Yeah I put one there, but I got the exact same error

1579642589
leeward
trilead:

1579642591
pixelherodev
whelp, beats me, sorry; haven't worked with arrays in Zig all that much

1579642663
trilead
ok

1579642666
trilead
thanks anyways

1579642737
mikdusan
trilead: put an `&` in front of the array rhs --> `&[_][]const u8....`

1579642742
BaroqueLarouche
In my GBA build.zig assuming zig master, addCSourceFiletileDemo.addCSourceFile("examples/tileDemo/brin.c", &[_][]const u8{"-std=c99"});

1579642753
mikdusan
oh sorry pixelherodev  beat me to it

1579642774
andrewrk
another example:

1579643055
trilead
Ok, thanks, I think I had combined various attempts in every way except the correct one.

1579643063
trilead
Seems to error out later on now

1579643095
leeward
Error later sounds like success.

1579643121
trilead
Ill take it

1579643374
pixelherodev
Wait

1579643388
pixelherodev
How's that zig-sdl example different  from what mikdusan and I suggested?

1579643455
andrewrk
it's the same

1579643472
daurnimator
xackus: see also

1579643510
trilead
pixelherodev: I thought I had tried that but I had made another small change which probably borked it. Didn't notice it until then.

1579643520
trilead
pixelherodev: "small"

1579643559
daurnimator
I miss having the builtin docs in the main documentation

1579643605
DorianXB
Hey, I'm a bit new to zig and its compilation mechanism. I'm wondering how to have both i386 and x86_64 binary in the same elf file. Is there a way to do this in pure zig (like the [BITS 32] and [BITS 64] in nasm) or do I need to mess with linker settings ?

1579643760
andrewrk
you'll have to make 2 different object files

1579643779
andrewrk
and then link them together with messing with linker settings

1579643812
andrewrk
this is a use case that is in scope to support in a better way however

1579643872
DorianXB
Alright, I feared that was the case, but now I'm set, thx ^^

1579643878
daurnimator
:( segfault in llvm::BasicBlock::getContext

1579644473
daurnimator
(#2727)

1579645237
pixelherodev
ugh

1579645240
pixelherodev
I freaking

1579647403
mq32
#181 (keyword: let) is a pretty hot topic ^^

1579647525
fengb
It's ballooning out of control

1579647535
mq32
yeah a bit

1579647567
mq32
i think let and var is totally fine, but i don't really care as long as it is not that much to type for something i do nearly every line of code

1579647636
fengb
I was in favor of context based declarations (let / static / threadlocal) but walked back because of anon functions

1579647687
fengb
This looks super gross: `static method = fn(self: Self) {`

1579647699
mq32
yeah, also: more keywords

1579647807
mq32
but it's not that much of a thing

1579647922
fengb
It's almost anti modern OO, since static and method are antitheses of each other

1579647928
daurnimator
mq32: FWIW I don't like let and var: I think they should be different lengths

1579647945
mq32
daurnimator: i would also be happy with "let mut" or similar

1579647952
andrewrk
reopening that issue is mainly to save 2 keystrokes when declaring functions, to counter #1717 punishing function definitions a bit

1579647956
companion_cube
(yesssss, closer to rust, closerrrr)

1579647979
shakesoda
fengb: the world needs more anti-OO :P

1579647983
pixelherodev
I honestly vastly prefer status quo

1579647997
fengb
Let's do Jai: `method := fn()`

1579647997
mq32
but i think it's a good feature to differ between "const value" (let x = …) and const refernce ([]const u8) to something

1579647998
companion_cube
`status quo x = fn(…)` ??

1579647999
shakesoda
i rather like let and let mut

1579648004
shakesoda
or let and const

1579648004
mq32
as this seems something that is often confused

1579648052
shakesoda
let and var seems the worst option by far

1579648058
fengb
shakesoda: but you're taking something that's OO based (methods) and shoving it into an overloaded context that looks anti-OO

1579648072
daurnimator
andrewrk:

1579648117
fengb
It's like how Go decided that it doesn't want inheritance, but implemented embedded structs... which is a (admittedly nice) implementation of inheritance

1579648176
companion_cube
where does zig have OO methods‽

1579648192
shakesoda
just having methods doesn't make something oo

1579648195
companion_cube
embedded structs feel more like composition than inheritance to me

1579648201
companion_cube
yeah, it's just UFCS in a way

1579648201
shakesoda
+1

1579648234
pixelherodev
var / const > mut / let if you ask me

1579648291
fengb
¯\_(ツ)_/¯ methods originate from OO land

1579648293
shakesoda
pixelherodev: i think they're sufficiently unambiguous, but i think it's a good point that the language has business in guiding you toward better practice

1579648312
companion_cube
and lambdas originate from lisp, doesn't mean java is a lisp ;)

1579648324
shakesoda
const being more effort to type discourages exactly this imo

1579648333
fengb
But it's a function construct

1579648344
fengb
functional*

1579648408
companion_cube
roughly as much as `foo.bar()` is OO :D

1579648430
fengb
Anyway, my point is, it takes something familiar to many people and makes it really foreign and different

1579648436
shakesoda
having made that argument, like everyone else in here and on the issue, i don't really care so much for the keyword itself so much as just having anonymous functions everywhere

1579648463
mq32
function literals are are really ckol thing :)

1579648465
mq32
*cool

1579648470
mq32
as well as sleep, so: gn8!

1579648493
fengb
+1 to anon functions

1579648506
shakesoda
it closes a big gap with how i write programs in other languages (e.g. lua), which have this

1579648514
shakesoda
or even (urgh) c++

1579648515
fengb
And hopefully we get actual lambdas "soon"

1579648527
companion_cube
how do you do closures, though… that's always the hard part

1579648533
shakesoda
one step at a time :)

1579648540
fengb
I'm gonna keep ignoring closures :P

1579648555
companion_cube
it'll pop up as soon as you can do `let f = fn() { … }` in a block :p

1579648558
shakesoda
even in c++, most of my anonymous functions don't need to do variable capture

1579648589
fengb
It's already popping up whenever we deal with a callback / fp

1579648604
companion_cube
that's quite surprising to me, if you do even a for_each or whatever you'll want to update something outside the lambda

1579648711
mq32
fengb: i would rather have a nice interface system that uses vtables instead of embedded vtables. zig is flexible enough to use this instead of some capturing lambdas

1579648740
shakesoda
by default, i pass everything of relevance, and i don't regularly use for_each or similar at all

1579648750
shakesoda
not to say one shouldn't - just that for my use case it doesn't come up all the time

1579648754
fengb
Internet argument > sleep 🙃

1579648765
mq32
yep

1579648767
shakesoda
aye

1579648967
mq32
what is the current idiomatic way of storing a "pointer to any"?

1579649124
fengb
Uh... *c_void? :P

1579649155
mq32
:D

1579649258
watzon[m]
So I've noticed there haven't been many updates in the HTTP area since the `http.headers` module got added. Anyone know if there's something I could do to help out in that area? I want to contribute and that's an area where I have some decent knowledge.

1579649397
fengb
That’s been held up by async OutStream

1579649445
fengb


1579649542
watzon[m]
Looks like a fun one haha

1579649553
fengb
I have an attempt to resolve the core issue but it has other problems and is exposing some complex compiler bugs

1579650026
plumm
do comptime ifs in inline while loops work?

1579650054
plumm
or is this just me using the feature incorrectly

1579650331
plumm
nevermind, i have to be wary about const

1579650468
watzon[m]
I think I saw it in one of the livestreams or something, but I don't remember. What's the difference between the zig and zig0 executables?

1579650620
andrewrk
zig0 builds the self-hosted components that zig uses

1579650849
daurnimator
Anyone able to checkout the branch I linked above and confirm that the traceback is odd?

