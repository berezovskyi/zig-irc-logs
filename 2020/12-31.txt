1609372877
ugla
andrewrk: thanks!

1609372895
ugla
std docs still show the old one for some reason

1609372902
andrewrk
that's the 0.7.1 docs

1609372922
ugla
Oh right, I'm not on that one any more ðŸ¤¦

1609372942
andrewrk
I don't have the master branch std lib docs  auto updating yet

1609373666
ifreund
man compiling musl on 0.7.1 feels so slow now compared to master

1609373714
andrewrk
haha

1609373812
andrewrk
we're starting to feel the benefits of stage2 creeping into stage1

1609374116
ifreund
Oh for sure, I doubt I would have felt like working on dynamic musl if that code was still in C++

1609374535
ifreund
pjz: got it, you need to get rid of the @TypeOf() on the return type

1609374560
ifreund
clap.Whatever() is already a type so taking @TypeOf() that gives type type

1609374581
ifreund
which is comptime only and forces the whole call to be comptime-known

1609376104
pjz
ifreund: thanks!

1609376619
pjz
heh, I got 'unreachable code: unreachable;'

1609376681
pjz
I think it'd be okay for the compiler to cut me some slack there, really :)

1609377865
pjz
ifreund: seriously, thanks much - I spent a couple of hours poking at that.

1609377912
ifreund
pjz: no problem, I remember you asking here a day or two a go but I didn't have time to take a serious look then

1609377926
ifreund
definitely room for compile error message improvement here

1609377946
ifreund
s/a go/ago/

1609378017
daurnimator
huh... does zig build support DESTDIR?

1609378020
pjz
It's less terrible once you realize that the 'const expression' may mean comptime as well as const, and once you know all the things that cause a function to be comptime.

1609378046
pjz
daurnimator: it support --prefix

1609378053
daurnimator
pjz: that's different

1609378062
daurnimator
but yes it appears to support DESTDIR as a env var

1609378063
ifreund
daurnimator: yes

1609378110
ifreund
pjz: yes the error message is logicaly if you are familiar with how zig works

1609378129
ifreund
it would be way better if it explained why the thing was required to be comptime-known though

1609378181
fengb
Yeah thereâ€™s an accepted issue to notate where in the stacktrace is forcing comptime

1609378224
ifreund
daurnimator: by the way, I fixed the ugliness with zig-wayland putting generated code inside its own source tree, should be possible to package properly now in theory

1609378253
daurnimator
ifreund: I'm updating the river-git package now for the new /etc/river/init support

1609378258
ifreund
nice

1609378258
g-w1
andrewrk: just to clarify after #7296 there will also be zig-cache

1609378295
ifreund
I have one more breaking change I want to do for river then it's 0.1.0 time

1609378311
ifreund
also need a wlroots (patch) release first

1609378330
andrewrk
g-w1, correct

1609378346
daurnimator
It's annoying that `zig build` doesn't have a non-install step

1609378355
g-w1
cool, should have a patch by tmrw night

1609378390
ifreund
daurnimator: I don't follow, wouldn't that just be `zig build`?

1609378413
daurnimator
ifreund: no, I want to build without installing

1609378420
ifreund
oh I guess it would still install to zig-cache yeah

1609378421
daurnimator
at the moment I have to just not pass --prefix

1609378432
daurnimator
but --prefix might be used as

1609378439
daurnimator
e.g. to hard-code the path to some config file

1609378455
ifreund
indeed, and I should probably be doing that as well

1609378494
ifreund
right now I have `/etc/river/init` hardcoded but it should really be `$PREFIX/etc/river/init` with an exception if $PREFIX is /usr

1609378507
g-w1
um, with `zig init-exe` zig build run -Drelease-safe doesn't print anything for me? only works on debug

1609378512
g-w1
is this a known regression

1609378561
ifreund
g-w1: if that uses log.info it won't print anything

1609378577
g-w1
ah, maybe we should change that. I got very confused

1609378604
ifreund
we should probably have init-exe use std.debug.print

1609378678
daurnimator
ifreund: see

1609378820
ifreund
TIL I don't need to be setting -Dfoo=true and that -Dfoo works if foo is a bool

1609378830
ifreund
time to fix that in river's readme

1609379001
daurnimator
also FYI

1609379015
daurnimator
andrewrk: ^ I think each of those things is a misc open issue

1609379027
oats


1609379034
oats
shouldn't this trigger an out-of-bounds runtime error?

1609379038
oats
I thought slices are bounds-checked

1609379108
ifreund
daurnimator: would you happen to know if doing that git config submodule.foo.url thing would let me use e.g. a single zig-wayland clone for all my local projects having it as a submodule?

1609379134
ifreund
and thanks for packaging and that paste of errors, will investigate

1609379363
ifreund
oats: there are valid uses for that, see std.ArrayList.allocatedSlice()

1609379407
ifreund
I believe if you were to access the array directly that would be safety-checked UB

1609379433
daurnimator
ifreund: that paste isn't errors; its missing "good practices" for the package

1609379472
daurnimator
ifreund: most are blocked by support in zig. e.g.

1609379523
Ankhers
Maybe a dumb question, but why does `zig init-lib' give me a main.zig instead of lib.zig or something?

1609379690
ifreund
daurnimator: ah I see. I think the PIE perhaps just needs to be enabled by setting LibExeObjStep.pie

1609379728
ifreund
if I don't set that to true the build system doesn't pass -fPIE to zig build-exe

1609379768
daurnimator
yep. I want to add a standard build option for -Dpie. see

1609379804
ifreund
makes sense to me

1609379827
daurnimator
andrewrk: ^ I don't suppose you feel like accepting that issue? if so I might work on it tomorrow

1609379851
ifreund
Glad river can serve to show where the ZBS needs work

1609380432
g-w1
Ankhers: it is arbitrary, it can be anything. the person who wrote it just liked main.zig

1609381048
andrewrk
daurnimator, there ya go

1609381093
andrewrk
Ankhers, in zig there is always a root source file, even for libraries

1609381124
Ankhers
andrewrk: Which makes sense. I was just expecting it to be lib.zig or something.

1609406745
ikskuh
heya

1609431138
g-w1
andrewrk: it seems like 7616 differs to stage1 because it allows stuff like `var x = undefined; x = 1; x = null;` is this correct?

1609432368
betawaffle
which one of you is working on a zig wayland compositor?

1609432475
pixelherodev
ifreund: ^

1609432486
pixelherodev
betawaffle: ifreund has a project called river IIRC

1609432508
ifreund
betawaffle:

1609432513
betawaffle
oh right, i'm actually in #river already :P

1609432682
ifreund
lol

1609432813
pixelherodev
haha :)

1609437704
betawaffle
does zig already have a thing that converts C to maybe-working zig?

1609437717
betawaffle
or is that just for headers?

1609437888
scientes
i think it was removed recently

1609437894
scientes
but that doesn't mean you can't use it from an old version

1609437966
betawaffle
i changed my mind, i don't need it

1609438565
g-w1
translate-c?

1609438587
g-w1
scientes you are thinking of emit-h

1609442064
andrewrk
g-w1, no, that's one of the items in the todo list (see the BRANCH_TODO file - I like to make this as a text file that should be deleted before the branch is merged)

1609443574
data-man
Happy New Year, Zig Community! Good health to everyone, the rest will compile.

1609448834
andrewrk
happy new year!

1609455366
justin_smith
happy new year!

1609456491
tane
yay, happy new one

1609458492
mikdusan
how were 0.7.0 release binaries for macOS x86_64/aarch64 built? Azure? it seems special like it was built without explicit macos min_version settings

1609458776
andrewrk
mikdusan, 0.7.0 is superseded by 0.7.1

1609458808
andrewrk
I made the x86 one using zig-bootstrap. kubkon built the aarch64 one

1609458822
andrewrk
but nobody should be using 0.7.0

1609458842
mikdusan
yeah I was just looking at

1609458892
mikdusan
ok np. your 2nd line to comment answers it for me

1609459116
andrewrk
macos support is rough right now with so many things changing at once

1609459136
andrewrk
kubkon has been doing great work though, I think we're going to see some really nice and stable support soon

