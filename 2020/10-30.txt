1604016744
dominikh
does Zig have a native way of doing this?

1604016892
g-w1
You mean calling a func without parens?

1604016928
dominikh
g-w1: I mean passing a bound function as a function

1604016936
g-w1
oh yeah i misread

1604016940
fengb
Nope, no closure support

1604017012
dominikh
alright, thanks

1604020746
g-w1
does anyone know why this project is closed?

1604023474
wilsonk_
g-w1, I think that was merged into the main repo? Andrew had mentioned that it would be merged once it was at a certain point...maybe during the big stage2 upgrade?

1604023760
g-w1
probably. so I should just look for the stage2 tags now on issues to find a good one?

1604024611
wilsonk_
I think so, yes

1604024888
daurnimator
Ristovski: capnproto is designed to not be parsed/serialized; but be used as-is in memory

1604024925
daurnimator
for good capnproto support we need

1604025080
companion_cube
capnproto is based on codegen, isn't it?

1604025091
companion_cube
so you could have a []u8 and read from there

1604025132
daurnimator
companion_cube: the usual way to implement capnproto is to run codegen that generates all your struct definitions; with getters and setters

1604025140
companion_cube
yeah

1604025154
daurnimator
with #6478 we wouldn't need the getters and setters

1604025263
companion_cube
you only need byte-addressability I think

1604025283
companion_cube
I can't imagine the capnproto guy packed stuff more tightly than byte level

1604025813
daurnimator
companion_cube: correct I think. but you need e.g. union members that aren't all together

1604025859
daurnimator
I suppose you might still need getters/setters for endianess

1604025990
companion_cube
it's probably simpler to go via []u8 anyway

1604025997
companion_cube
but we'll see :)

1604026007
companion_cube
(same goes for flatbuffers I imagine, never looked into that one)

1604026268
pjz
with zig that compilation can be in the zig code instead of an external tool

1604026605
companion_cube
if you implement the whole parser+compiler of capnproto schemas in zig, sure

1604028908
g-w1
I think dirname strikes again, but in a weird way: I am getting the infinite zig build but in a directory with build.zig, it cannot find the standard library because I moved the binary relative to the stdlib. This was very confusing to me when I first saw it, I dont know if this is a priority before 0.7.0, but here it is

1604028910
g-w1
but it cant find zig standard lib i think

1604029125
g-w1
I downloaded the zig to ~/.local/bin/zig-asdfanfua/zig but then moved it to ~/.local/bin/zig. I think it should tell you if it cant find the stdlib instead of doing this.

1604029360
g-w1
this is on the latest linux tarball downloaded from ziglang.org

1604029917
g-w1
#6872

1604053968
Kena
Hello electric pulses computing people. In the documentation, at Type coercion Arrays and pointers, there is the following snippet: // Single-item pointers to arrays can be coerced to// unknown length pointers.test "*[N]T to [*]T" {    var buf: [5]u8 = "hello".*;    const x: [*]u8 = &buf;    expect(x[4] == 'o');    // x[5] would be an uncaught out

1604053969
Kena
of bounds pointer dereference!

1604054060
Kena
Yet `expect(x[5] == 0);` compiled just fine. Is it unexpected or does it mean an unknown-length pointer was implicitly casted into a sentinel-value pointer?

1604054297
daurnimator
Kena: `[*]` have no bounds checking. indexing past the end of the array is you

1604054446
Ristovski
daurnimator: re: capnproto: Yes, capnproto also has the added benefits of being able to mmap large, raw messages on disk

1604054512
Kena
Allright, thanks daurnimator.

1604054534
Ristovski
hmm, I wonder, bare structs are pretty easy to to serialize with std.io.serializer, custom types just need a serialize/deserialize implementation, but how would one handle generic types like a List for example?

1604054709
Ristovski
Or for example, to serialize std.ArrayList

1604074584
frmdstryr
Is there a way to make print format int struct field values in hex? Similar to how `p/x *some.struct` does with gdb?

1604074634
Nypsie[m]
`print("{x}", .{some_int_value})`

1604074654
Nypsie[m]
Aaaah wait, for a struct field

1604074663
Nypsie[m]
You'll have to write a format() function on the struct

1604074803
frmdstryr
Hmm actually that does seem to work, for some reason I thought that gave an error before.

1604074839
Nypsie[m]
Great!

1604074868
frmdstryr
Thanks!

1604077890
andrewrk
wow amazing, I woke up to green CI

1604077898
andrewrk
it's like christmas

1604077976
travv0
\o/

1604078002
companion_cube
christmas would be green

1604078033
bfredl
31 oct = 25 dec

1604078036
bfredl
BECAUSE SCIENCE

1604078046
companion_cube
30 oct, no?

1604078065
Nypsie[m]
Timezones ;)

1604078668
bfredl
well 30 oct = 24 dec, julafton here in sweden : D

1604082655
andrewrk
OK this list of issues in the 0.7.0 milestone is now an accurate list of what I want to try to get done by the release

1604082658
andrewrk


1604082957
Nypsie[m]
Great work Andrew, looking forward to it

1604083017
ifreund
if you decide to go for #1097 just before a release is definetly better than just after

1604083055
ifreund
(IMO the change makes sense and that camelCase is a local maximum, but that will cause a LOT of churn)

1604083075
betawaffle
std is expected to change (possibly significantly) before a 1.0 release, right?

1604083133
ifreund
yes, though it's generally better to break things earlier rather than later if you know they need to be broken at some point before 1.0

1604083163
jayschwa
I have 2 of 3 steps awaiting PR review on

1604083185
g-w1
out of curiosity why is snake_case better?

1604083234
ifreund
g-w1:

1604083290
g-w1
this makes sense

1604083555
ifreund
andrewrk: Is moving the std to snake_case enum/union fields per #2101 something you want to happen before 0.7.0 is released? if so I could probably flex some text editor muscles this weekend

1604083662
ifreund
(Looking for something I can take off your plate)

1604083747
andrewrk
ifreund, oh I just meant to make a decision on the proposal

1604083762
andrewrk
good to know you're up for that though :)

1604083789
ifreund
well #2101 is already accepted :P

1604084232
andrewrk
oops, got that one mixed up with the other one! it's moved to 0.8.0 now. I'm too afraid of regressing something because of lazy analysis to do 2101 right now

1604084287
betawaffle
i have to say, XML_HTTP_Request is ugly, but it's better than XmlHttpRequest

1604084312
ifreund
makes sense

1604084367
betawaffle
is there going to be a Solution™ to lazy analysis in the future?

1604084453
g-w1
when writing a library, are the public functions not analyzed?

1604084480
andrewrk
betawaffle, closest idea is:

1604084497
andrewrk
I think we might just be stuck with it as a pro/con of the language

1604084583
betawaffle
interesting.

1604084626
betawaffle
isn't this something that some sort of code coverage report can help with?

1604084668
betawaffle
like, as long as

1604084985
Kena
I have a noobie question, in the documentation, there is the following snippet: test "ignoring expression value" {    foo();}fn foo() i32 {    return 1234;}

1604085004
Kena
Please, why the expression value is ignored? I do not understand the reasoning behind this.

1604085020
a92
You just call the function foo and do nothing with it

1604085031
a92
There's no reason it would be used; so it is considered to be ignored

1604085085
Kena
Allright, I think I understand, thank you.

1604085306
a92
Is it too OO/bad practice/against the zen to have a single-field struct and define methods/functions associated with it instead of just defining "free-floating" functions with the struct's field type as a parameter?

1604085565
ifreund
nah

1604085765
ifreund
OO is bad because of stuff like inheritance causing implicit things to happen

1604085770
earnestly
Depends on the language; the former can produce horrific code explosion

1604085783
a92
What channel are we in, earnestly?

1604085816
earnestly
I don't know how zig generates code in this case

1604085816
betawaffle
we're in #zig

1604085980
ifreund
shouldn't make a difference afaik

1604085983
earnestly
ifreund: (It's the main reason rust compiles so slowly, according to thestinger)

1604085989
earnestly
Because it doesn't use free functions

1604085997
earnestly
But this was many years ago

1604086005
earnestly
"Boost on steroids"

1604086013
ifreund
how does that relate to code explosion though?

1604086021
companion_cube
earnestly: rust has free functions

1604086023
earnestly
ifreund: I don't think it does in Rust's case

1604086040
companion_cube
it's slow mostly because it creates a ton of LLVM IR

1604086041
earnestly
companion_cube: The std back then was basically boost

1604086066
companion_cube
maybe, but these days rust is not close to boost; it doesn't even have headers

1604086088
companion_cube
(that being said, monorphization is costly in rust too, and it'll be in zig too if people are not careful)

1604086112
earnestly
(I don't think the use of "headers" is relevant in terms of library design)

1604086209
ifreund
yeah, that's totally orthagonal

1604086234
companion_cube
putting templates in headers is not orthogonal

1604086244
companion_cube
it means you have to recompile the whole thing at every call site

1604086280
companion_cube
if you have things like modules+concepts (C++ names) or modules+traits (rust), you can typecheck the template only once, produce some IR, and then use that IR at each callsite

1604086309
companion_cube
(still have to do some type-specific optimizations at each call site but that's unavoidable)

1604088002
Kena
Please, what is monorphization in a few words? I too would like to avoid some bad practices.

1604088086
betawaffle
creating unique implementations of a generic thing, iirc

1604088112
companion_cube
it's just that when you parametrized code by some types (like ArrayList), and then you use it with a bunch of different types, the code is duplicated for each concrete type

1604088143
companion_cube
so typically in rust or C++, the code of `vector`/`Vec` is duplicated for a large number of types, since it's such a pervasives container

1604088175
betawaffle
it doesn't necessarily cost more than the equivalent

1604088195
companion_cube
no, clearly not, especially if you can duplicate it per function (instead of the whole module)

1604088208
companion_cube
but it's why some C++ binaries are super big

1604088215
betawaffle
yep, which you can't do in Go

1604088221
companion_cube
yeah of course

1604088232
companion_cube
just not having generics is a super bad solution

1604088257
betawaffle
i write go for $dayjob, and i agree

1604088298
betawaffle
that's why i'm waiting for the day when zig can do everything i would otherwise do in go

1604088505
Kena
Thank you both.

1604088806
ifreund
hmm, will I suffer any kind of ill effects from telling zig to link to a library that I don't actually use?

1604088821
ifreund
I don't know enough about how elf files work

1604089403
ifreund
yeah that seems like something I want to avoid

1604090869
earnestly
betawaffle: Be avant garde and use ada instead

1604090873
earnestly
(instead of go)

1604090897
earnestly
You get your algol, with manually instantiated generics :p

1604090910
betawaffle
heh, i ain't got time for that

1604090967
ifreund
I feel like ada is pretty close to the polar opposite of go

1604091114
earnestly
ifreund: They both come from the school of algol/pascal.  Go is almost identical, even in syntax, to algol

1604091115
companion_cube
as in, it's carefully designed?

1604091181
earnestly
ifreund: As for Ada, that also comes from algol/pascal but with a very rigorous design document (steelman) which in many cases was not possible to fulfil 35 years ago lol

1604091239
earnestly
But the scope is different, for sure.  Ada is more for embedded realtime systems and so many of the conveniences aren't available

1604091291
ifreund
yeah, they are in the same language family syntax-wise but they have very different feature sets and use-cases

1604091292
earnestly
(Like a GC)

1604091306
companion_cube
doesn't ada have generics though?

1604091312
earnestly
Although apparently, so I'm told, the ada spec doesn't rule out the ability for it to be implemented with a GC

1604091313
ifreund
ada has everything

1604091332
earnestly
companion_cube: Yeah, it does generics.  It has 'class' objects, but they're closer to typeclasses than structs

1604091333
companion_cube
can ada run on the jvm, in theory? :)

1604091343
earnestly
companion_cube: It has native FFI to java :p

1604091347
earnestly
(and fortran)

1604091358
companion_cube
via JNI?

1604091368
earnestly
I'm not sure how it's implemented

1604091380
companion_cube
interesting, in any case

1604091395
earnestly
The one nice thing about Ada, which I'd love all languages to do, is a) Have an ISO standard that is

1604091408
earnestly
The b was the test suite, but b got lost

1604091424
earnestly
compiles/comes ...

1604091445
earnestly
When was the last time a language standard came with a comformance test suite?

1604091457
earnestly
So you can ensure that your compiler follows it

1604091482
ifreund
we should do that for zig

1604091553
earnestly
ifreund: This is a bit old but may be an interesting skim:

1604091580
companion_cube
hu, David Wheeler is interested in Ada?

1604091581
companion_cube
(or, was)

1604091593
earnestly
Yeah, very much so

1604091597
ifreund
we already have a test suite for the compiler, it would just need to be made easy for other implementations to use as well

1604091602
companion_cube
earnestly: you know him?

1604091604
earnestly
ifreund: grep for appendix

1604091611
earnestly
companion_cube: No no, just read stuff he has written

1604091619
companion_cube
ah, yeah, cool

1604091623
companion_cube
he's also involved with metamath (?!)

1604091632
earnestly
He tried to make Ada a thing in FOSS circles

1604091649
ifreund
earnestly: the appendix makes me think he has different priorities than I do :D

1604091667
earnestly
ifreund: The table?  That table contains the steelman requirements

1604091722
companion_cube
it'd be interesting to compare rust to Ada following this table, tbh

1604091736
ifreund
yeah the table

1604091805
earnestly
ifreund: (The US gave out documents starting with strawman, tinman, ironman, etc. to teams (red team, green team, etc.) to implement the requirements.  The final document was the steelman, which Ada is an implementation of, by Jean Ichbiah)

1604091883
ifreund
where do these requirements come from? and why are they all weighted the same in the comparison?

1604091889
earnestly
companion_cube: Heh, "steel"man and rust

1604091898
earnestly
ifreund: The DOD came up with them

1604091899
companion_cube
:D interesting

1604091920
earnestly
ifreund: That's quite interesting is that the US DOD required that the implementation be licensed under the GPL

1604091924
ifreund
e.g. why is function overloading a requirement with no justification

1604091938
ifreund
that is interesting

1604091948
earnestly
The document probably expands on these points

1604091995
earnestly
companion_cube: Apparently?

1604092156
earnestly
ifreund: (Also I do appreciate that Ada's syntax is explicitly designed to a 1-pass parsable, or was initially anyway.)

1604092192
ifreund
that is very nice, parsing C++ e.g. is a huge mess

1604092203
companion_cube
hmm, 2B is objectionable, rust is also designed to be easy to parse…

1604092286
earnestly
Hm, no that wasn't it... the grammar is context-free, iirc

1604092352
earnestly
companion_cube: Rust has the << <T> >> problem, no?

1604092368
companion_cube
no, not at all

1604092388
earnestly
How does it cope with << < T > >>?

1604092392
companion_cube
it's always clear whether you're parsing an expression or a type

1604092400
earnestly
Hm

1604092419
companion_cube
(hence the famous "turbofish" ::<>, which is used to specify a type argument to a function)

1604092424
companion_cube
(like f::<i32>())

1604092445
companion_cube
it's fugly but relatively rare

1604092446
earnestly
They're still getting issues with parsing troubles this month

1604092458
earnestly


1604092487
companion_cube
that's a bug, not a grammar issue :)

1604092501
companion_cube
good one though

1604092655
earnestly
Heh

1604092682
companion_cube
ahah interesting :D

1604092690
companion_cube
the perils of tokenizing `>>`

1604092732
earnestly
This is the one thing I find endearing about Ada, is that the designers actively try to learn the lessons of the past

1604092758
companion_cube
there's the "lexer hack" that exists elsewhere for languages that have a mostly regular grammar, but need a bit of context at the lexer level

1604092774
companion_cube
you could have a lexer for types and one for expression, here, and alternate… but it's not worth it

1604092783
companion_cube
what's shift right in ada?

1604092812
earnestly
shift_right

1604092818
companion_cube
ah, good call indeed.

1604092824
earnestly
(the syntax is case insentive)

1604092824
companion_cube
in OCaml it's `lsr`

1604092831
earnestly
lol, or shr

1604092838
earnestly
(in others)

1604092847
companion_cube
lsl, lsl, asl, lor, land…

1604092857
earnestly
There's also shift_right_arithmetic, it can be quite wordy

1604092870
earnestly
rotate_right

1604097435
Biolunar
There is no way to mark a stack variable as volatile, is there? My use case is a global variable that is modified in a signal handler. In C these variables must be volatile or the read outside of that handler can be optimized out.

1604097841
yZ5vlALg86lP
is the maintainer/author of zig-mode in this chan? i have an annoying bug where when i save a zig buffer the cursor jumps to some fixed location in the file

1604097986
travv0
is it maybe format on save-related? i disabled that because it was causing lots of problems for me

1604098883
pjz
where would I look to find info on what @TypeInfo returns for things like functions?

1604099223
klltkr


1604099505
ugla
Biolunar: pointers can be marked as volatile, `*volatile T`,

1604099611
Biolunar
ugla: yeah, I saw that. Now I’m questioning whether I need to change globals in signal handlers through volatile pointers or not. If I need the pointer indirection that is quite uncomfortable

1604100220
frmdstryr
Biolunar: I think you want to use atomic, not volatile

1604100334
yZ5vlALg86lP
travv0: let me try that

1604100417
yZ5vlALg86lP
travv0: wow. yeah. that's it.

1604100429
travv0
cool

1604100447
yZ5vlALg86lP
finally zig-mode is fun again \o/ :)

1604100468
travv0
i've been thinking about taking a stab at making the format on save work better but i haven't gotten around to it yet

1604100481
travv0
cause it's easy enough to just C-c C-f lol

1604100504
Biolunar
frmdstryr: relaxed atomic operations would certainly work, but it feels like overkill for “don’t optimize this read out”.

1604100689
yZ5vlALg86lP
even if i do c-c c-f it jumps to this one location

1604100780
travv0
well that's weird

1604101407
frmdstryr
Biolunar: Yeah I agree... if you search for volatile in the issues list there's a few discussions on the topic

1604101455
Biolunar
frmdstryr: thx, I’ll have a read for bed time then ;)

