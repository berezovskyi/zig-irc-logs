1587693428
foobles
alright, i opened another issue for comparing ?T and U if T can be compared to U

1587694422
pmwhite
Comptime allocation works if you use a fixedbufferallocator from stack memory, right?

1587694444
fengb
It’s not working at all right now

1587694470
fengb
There’s some pointer math that doesn’t work at comptime

1587694482
pmwhite
Wait, why not? I thought the issue was syscalls?

1587694483
pmwhite
Oh

1587694512
pmwhite
What, the fixedbufferallocator, or comptime allocation.

1587694516
pmwhite
?

1587694531
fengb
Comptime allocation

1587694647
fengb


1587694676
pmwhite
Okay. So, I could make an array on the stack, right? If I passed it into the fixedbufferallocator, there would be no real dynamic allocation happening.

1587694704
fengb
No the allocator interface is kinda borked with that bug

1587694746
fengb
Well maybe not the interface but FBA does some pointer math that it’s not happy with

1587694752
pmwhite
Gotcha, so you can do real dynamic allocation, just not with that interface?

1587694787
fengb
What I’ve done is preallocate using an array and increment the value

1587694796
fengb
Er, the tail pointer

1587694827
fengb
Which works but keep in mind there’s no deallocation or GC so it’ll take up memory forever

1587695155
pmwhite
That's kind of annoying. I guess it'll get fixed eventually and then I can switch to a real allocator.

1587697737
foobles
does anyone want to review my proposal?

1587698459
aerona
since #1332 is accepted then that's the next logical step in my mind. though i wonder if the implementation of #1332 would solve your proposal at the same time

1587698492
aerona
since it's already done with non-nullable int types: var x: usize = 0; if (x == 10) {} // no @as() needed

1587698546
foobles
right, thats what I'm thinking

1587698579
foobles
I am the one implmenting 1332 at the time, so that is why i brought up this proposal in the first place XD

1587698605
aerona
haha fair enough

1587709735
andrewrk
look ma, no llvm!

1587713055
daurnimator
andrewrk: fancy :)

1587713072
daurnimator
andrewrk: and I have a feeling a lot of it will end up being usable to implement a JIT

1587719933
tdeo
why does std.testing.expectEqual use the type of `expected` instead of `actual`? it'd be a lot less casting if it were the other way around, but the argument order would also have to be flipped

1587720026
ikskuh
tdeo: because you want to test for an expected type

1587720038
ikskuh
imagine you want to test if a function returns a u3, but it returns a u9

1587720056
ikskuh
u3 is implicitly castable to u9, when using the type of expected, this will fail

1587720065
ikskuh
when using the type of actual, it will silently work

1587720070
tdeo
ah, i see

1587720783
TheLemonMan
ikskuh, it's not the linker that's dropping the symbol, it's Zig lazyness at play once again

1587720955
ikskuh
no

1587720957
ikskuh
it's both!

1587720966
ikskuh
wait a minute, i'm writing a response

1587721019
TheLemonMan
oh the linker GC may kick in, right

1587721039
ikskuh
nah, not even that is the problem

1587721044
ikskuh
the problem is that the section is zero-sized

1587721258
TheLemonMan
oh well, I tested a non-empty array, a zero-sized array is certainly dropped

1587721360
ikskuh
yeah doesn't make much sense to emit it anyways

1587721368
ikskuh
you can just chose any address with an RNG :D

1587721376
ikskuh
same difference in the end :D

1587721586
TheLemonMan
I wonder why he's exporting an empty vector table

1587728709
fengb
Wow so self hosted and new backend are working?

1587728960
FireFox317
fengb, i think andrewrk currently implemented a mapping from zir -> elf

1587728969
FireFox317
there is no mapping from zig source code -> zir yet

1587731729
tdeo
is there a convenience function in std for a bounds checked slice access?

1587731765
tdeo
like `fn at([]T) ?T`

1587732070
dimenus|home
fengb: it's just code ZIR emission at this point, no connection with the existing frontend

1587732115
fengb
Hmm where’s the code? I wanna make a wasm backend :D

1587732187
fengb
nvm it was literally the post I just read

1587732191
fengb
I’m not very bright today

1587732256
dimenus
fengb: consume more coffee :)

1587732868
sanaris
Guys, why is everybody is so obsessed with safety in languages?

1587732906
sanaris
Dangerous programming is most joyful

1587733516
ifreund
i like my programs simple, correct, and fast. Langauges that are truely safe generally fail at at least one of those

1587733524
ifreund
zig seems to be the best bet so far

1587733617
fengb
People make mistakes. It’s nice for a compiler to catch my stupidity

1587733643
fengb
That said, sometimes a compiler can be too anal and gets in the way

1587733669
ifreund
safety is nice, but it usually comes at the cost of complexity

1587733782
fengb
Zig is a good middle ground. A lot better at catching things than C, but much lower cognitive overhead than Rust

1587733863
ifreund
my thoughts as well. I learned enough zig to write fairly idiomatic, non-trivial code in a matter of days

1587733872
ifreund
for rust that process took me months

1587734081
dimenus
tdeo: slices have `.len` properties so you can just check it on the spot

1587734130
tdeo
ended up writing my own one liner so i could do `switch (at(text, 0) orelse return null)`

1587734170
tdeo
i have three lines like that one in the function

1587739927
fengb
In general, are jump tables faster or call indirect?

1587741550
nephele
I've added __powidf2 to compiler-rt for zig, so get a bit further in compiling minetest, but now i get lld: error: undefined symbol: __cxa_thread_atexit_impl; but i don't seem to find an implementation in llvm compiler-rt to port over, am i missing something?

1587741566
nephele
Is that just not part of compiler-rt maybe?

1587741827
nephele
ah seems to be in libcxx or libc... don't understand why it doesn't work then... compiling on alpine linux if that matters

1587742562
pixelherodev
z

1587742567
pixelherodev
Whoops, sorry

1587743007
BaroqueLarouche
i

1587743009
BaroqueLarouche
g

1587749661
andrewrk
nephele, zig can provide -lc++

1587749777
afontain_
wait, `zig cc` can compile c++ code?

1587749864
ikskuh
yep

1587749920
nephele
andrewrk, I think it's using zig c++ anyway

1587749939
nephele
was using zig cc and zig c++ for CC and CXX respectively passing them to cmake as such

1587751900
pixelherodev
Initial Lightzing test working :)

1587752181
pixelherodev


1587752338
cren
congrats

1587752356
BaroqueLarouche
Using ZIR pixelherodev  ?

1587752446
andrewrk
BaroqueLarouche, ZIR is not capable of more than hello world yet

1587752525
pixelherodev
BaroqueLarouche, no

1587752533
pixelherodev
I do plan on using this for a Zig backend, yes

1587752542
pixelherodev
But it'll require a ZIR parser first

1587752551
pixelherodev
And that'll require the x64 backend to be actually usable

1587754031
andrewrk
I'm hoping to make self-

1587754041
andrewrk
I'm hoping to make self-hosted contributor friendly as soon as possible

1587754779
yrashk
what's the target release for self-hosted? 1.0?

1587755811
andrewrk
it would be a major accomplishment to ship self-hosted with 0.7.0 but I have not given up on that prospect yet

1587755853
andrewrk
I think with proper design and keeping it contributor friendly it is a possibility

1587755948
fengb
Will ZIR be self-hosted only?

1587756230
FireFox317
andrewrk, #5122 passed the tests :)

1587756286
fengb
If I stick align in the first field of a packed struct, does that guarantee the alignment of the struct?

1587756417
andrewrk
nice work FireFox317

1587756441
FireFox317
had to disable quite some tests, but its one more target supported by zig :D

1587756456
andrewrk
as long as the issue number is greppable that should be fine

1587756486
andrewrk
really, this constitutes a lot more test coverage than before! great work

1587756517
andrewrk
fengb, I think the answer to your first question is "yes". what would a "no" answer mean?

1587757431
andrewrk
the answer to the alignment question is yes

1587757443
fengb
I meant whether you were gonna backport ZIR into the stage 1 compiler

1587757461
fengb
Great, thanks

1587757683
andrewrk
if it's clear that doing so would fix all the bugs, then that's a strong possibility

1587757693
andrewrk
too early to tell

1587757764
andrewrk
since outputting C is one of the planned options of self-hosted, it might be interesting, once we're shipping self-hosted, to backport ZIR + the C output code only, and replace all of stage1 with that

1587757792
fengb
Oh wow, I didn't think direct C output was on target

1587757794
andrewrk
then bootstrapping (without llvm+clang+lld abilities) will depend only on a C compiler

1587757843
fengb
Hmm, didn't you mention that maintainers don't trust generated code?

1587757876
andrewrk
stage1.c (source, not generated) -> stage2.c -> zig1 -> zig2 -> zig

1587757900
gonz_
I was thinking about writing a type parser for creating types in different languages, but then I realized I could just write zig types and have zig tell me about them

1587757904
gonz_


1587757906
gonz_
<3

1587757937
fengb
Oh I misread what you typed

1587758010
andrewrk
that would land you with a fully self hosted zig, capable of whatever targets zig supports without llvm

1587758019
andrewrk
not capable of translate-c or zig cc

1587758111
fengb
Oh wow

1587758718
andrewrk
of course, the follow-up question is, "if we already have std.c.tokenizer and std.c.ast and we have a fully capable backend... why not write the glue code to make zig cc work even in the non-llvm compiler?"

1587758754
companion_cube
why would it be in the stdlib though? and not a package?

1587758777
andrewrk
same reason zig tokenization and parsing is in the std lib

1587758782
scientes
oh RLY

1587758789
scientes
C parsing is not simple

1587758827
gonz_
Everything is relative

1587758830
gonz_
:P

1587758842
scientes
I don't see trigraph support

1587758842
gonz_
It's not Lisp, but it's not exactly Haskell either.

1587758879
companion_cube
(seems to me like haskell is probably easier to parse than C)

1587758880
scientes
or special casing for #include <stdbool.h>, and the other special headers

1587758892
scientes
or

1587758903
scientes
or the new [[attribute]] support

1587758914
companion_cube
andrewrk: why is C compilation at the same level as zig compilation, though?

1587758922
gonz_
companion_cube: I dunno, it doesn't feel like it'd be all that easy. It has a lot of gunk thrown into it. You can have tons of different things in a lot of places.

1587758950
gonz_
companion_cube: Type applications, for example, were added relatively late and suddenly you can now have those in the beginning of all function calls.

1587758971
gonz_
You can have package names before imports to specify where to pull a module from, etc., which you couldn't before(?), all because of an extension.

1587759011
gonz_
Apart from being a maintenance nightmare in those circumstances I think the grammar itself is probably not super friendly.

1587759080
gonz_
Other than that you have the offside rule instead of just reading until an `in` or some other token, etc.. I don't think they ever even considered making it easy to parse.

1587759119
companion_cube
gonz_: I'm assuming haskell 98,  though

1587759139
companion_cube
it's indentation sensitive but otherwise it seems much cleaner than C

1587759202
gonz_
That's one hell of an assumption. Pretty much no one is using just Haskell 98 in 2020. People aren't even only using 2010.

1587759280
gonz_
That's not to say that wouldn't be a great idea. I personally would want to peer into a hypothetical project that restricted itself to something a bit more basic.

1587759310
gonz_
But yeah, everything is relative. I guess I'm underestimating the issues of parsing C a bit.

1587759337
companion_cube
and haskell extensions are not too hard to parse, I think, it's when you want to typecheck that the fun starts

1587759359
gonz_
They're hard enough for Haskell tooling to fail at auto-formatting, that's all I know. :D

1587759372
gonz_
#justhaskellthings

1587759374
companion_cube
what does formatting mean for a whitespace language? :D

1587759402
gonz_
It means peace of mind instead of sitting there formatting manually like a troglodyte... :/

1587759421
gonz_
There are standards, or at the very least there should be.

1587759430
gonz_
Someone please make a standard...

1587759449
companion_cube
I mean, it can't guess indentation for you, since indentation is part of the syntax, right?

1587759502
gonz_
That part you have to get right, but then it can set other stuff up for you. There are tools, but they sometimes literally will break code. It'll usually figure out how to break lines for you in a reasonable fashion, etc.

1587759525
gonz_
`purty` does the same for PureScript, though it's made some choices I'm not a fan of. But I'm honestly happier to have a formatter than having my own style.

1587759583
gonz_
companion_cube: Do you use ocpindent?

1587759618
companion_cube
yes, but not ocamlformat

1587759627
companion_cube
(also note that OCaml is whitespace insensitive)

1587759664
gonz_
Sure, but they'll accomplish the same thing in many cases. I format(ted) our OCaml code exactly like I would my Haskell code.

1587759701
gonz_
(in the places where it made sense)

1587759731
companion_cube
I hope you didn't use the `;`-prefix style for records

1587759736
companion_cube
or we won't be friends :p

1587759753
gonz_
It's confirmed, we will

1587759759
pixelherodev
Noooooo

1587759762
gonz_
If you mean item separators at the start of lines.

1587759767
pixelherodev
Sorry, this is the closest thing to a drama that I watch

1587759771
pixelherodev
;)

1587759784
companion_cube
gonz_: yeah, it's bad style in OCaml imho

1587759792
companion_cube
we have trailing `;`, use them, it's not hsakell

1587759793
gonz_
It's great style everywhere IMO :D

1587759794
companion_cube
haskell*

1587759804
companion_cube
that's stockholm syndrome

1587759810
companion_cube
the syntax doesn't make sense

1587759822
companion_cube
`;` is a suffix, not a prefix

1587759836
companion_cube
`{a; b; c;}` works, but `{;a ;b ;c}` doesn't

1587759843
companion_cube
(note that `|` is a prefix)

1587759858
gonz_
Wow, I see I've hit an Elm nerve

1587759859
gonz_
:D

1587759871
gonz_
(by way of Haskell, I guess)

1587759879
fengb
Elm is lame 🙃

1587759881
companion_cube
no, it just irks me to see that ugly syntax in OCaml

1587759900
companion_cube
(or dhall, or other things reached by the dubious taste of haskell)

1587759916
gonz_
Meh, it's fine IMO

1587759948
fengb
Aren’t they cousin languages?

1587759957
companion_cube
not syntactically

1587759965
fengb
Never seen so much infighting before 🙃

1587759978
gonz_
If we had made open source stuff I would've cared, but it was literally just code for us.

1587760271
dimenus
is anyone working on aarch64? having weird issues with my repo when running a binary directly, everything works fine with the elf file though

1587760282
dimenus
works fine in release-fast, prints garbage in debug

1587760295
dimenus


1587760963
andrewrk
dimenus, what is the hex or binary interpretation of the garbage?

1587760969
andrewrk
zig emits "undefined" as 0xaaaaaaaaa

1587760982
dimenus
it's actually printing out the variables passed in 'logf' correctly

1587760986
dimenus
just not the ro strings

1587761078
FireFox317
dimenus, PiOS nice! My next project was an aarch64 kernel thing on the RPI too XD

1587761104
dimenus
it's just weird that it works correctly in release-fast but not debug (and works fine when passed a real elf instead of a flat file)

1587761282
dimenus
andrewrk: console.logf("{}", .{"Hello from PiOS v0.1\n"}); prints correctly

1587761403
FireFox317
dimenus, passed a elf to what?

1587761416
dimenus
FireFox317: qemu

1587761447
FireFox317
so it never works with a flat file?

1587761461
dimenus
nope, it works with a release-fast flat file

1587761477
dimenus
but doesn't print the compiled in strings in debug

1587761517
FireFox317
so the entry stuff is correct. Maybe an alignment issue or something? Because ELF files sections are 4k aligned, and a flat binary isnot

1587761622
FireFox317
you have set the exception handlers and stuff, so it will print if an exception happens?

1587761644
dimenus
i have not set the exception handlesrs yet

1587761700
FireFox317
so maybe an exception trigger, that could give you more info. Maybe you dont need the handlers and qemu can tell you more

1587761871
dimenus
that's totally the problem, thanks Firefox317

1587761876
dimenus
it's an alignment issue

1587761941
dimenus
i take that back

1587762019
FireFox317
aarch64 is really picky about alignment, it doesnt allow unaligned memory access, and stack pointer should always be 4 byte aligned and stuff. :)

1587762027
frett27
Hi folks, i had no success in building cross compile for armv7a, any succeeded here ?

1587762057
frett27
when compiling, with arm-linux-gnu armv7a

1587762068
frett27
parameters for zig-bootstrap

1587762103
frett27
i had an error telling me the arch is not supported (list then the target and armv7a is not present in the list)

1587762167
frett27
i also tried the "generic+v7a" in mcpu, with no success ?

1587762251
fengb
v7a is listed as a feature. Which cpu are you targeting?

1587762322
frett27
Architecture:          armv7l

1587762322
frett27
CPU(s):                4

1587762322
frett27
Byte Order:            Little Endian

1587762322
frett27
On-line CPU(s) list:   0-3

1587762322
frett27
Thread(s) per core:    1

1587762323
frett27
Core(s) per socket:    4

1587762324
frett27
Socket(s):             1

1587762330
frett27
Model name:            ARMv7 Processor rev 5 (v7l)

1587762445
FireFox317
frett27, tried this: ./build -j<number of cpus> arm-linux-musleabi generic+v7a ?

1587762516
frett27
FireFox317, this is the same as the binary 0.6.0, but my need is to compile my iotmonitor (

1587762522
frett27
i need the gnuabi

1587762540
frett27
gnuabihf, more specificly

1587762548
andrewrk
you need to dynamic link against glibc?

1587762560
frett27
non, but leveldb

1587762570
frett27
mosquitto is statically linked

1587762596
frett27
ok, lets try then

1587762604
FireFox317
so you just want to cross compile some c/c++ code or you actually want a working zig compiler on armv7a?

1587762623
FireFox317
frett27 ^^

1587762676
frett27
i want to have zig ARM, for building the project iotmonitor on the orangepi, the orangepi has some library (leveldb) i have to link the project to ?

1587762684
frett27
s/?/:-)/

1587762696
andrewrk
dimenus, was there a missing safety check for alignment somewhere?

1587762769
frett27
building iotmonitor depends on having zig on arm :-)

1587762772
andrewrk
frett27, no matter which target you select when using ziglang/bootstrap, the resulting zig compiler will have the same target capabilities

1587762791
dimenus
andrewrk: false alarm, i didn't find it yet. still working on getting setup with gdb on qemu-multiarch

1587762833
dimenus
i commented out all of the asm routines (other than start.S) and it still didn't do anything different

1587762847
andrewrk
frett27, therefore I suggest to use `./build -j$(nproc) arm-linux-musleabihf baseline`

1587762877
andrewrk
frett27, once you have zig executable on your orangepi machine, then you can use the native target (no -target option) and link with leveldb

1587762914
andrewrk
you can also download a binary to skip bootstrapping it yourself:

1587762956
fengb
Is there a list of how subarchs map to cpus?

1587762957
frett27
andrewrk, ok, i used this binary previously, and face an issue about an illegal instruction (yield)

1587762975
frett27
i wanted to rebuild one to look at the issue encountered

1587763006
andrewrk
I see

1587763007
frett27
we look at it with lemonboy, and there were an UB

1587763009
afontain_
hi. Is someone using a musl-based system that isn't Arch?

1587763018
FireFox317
frett27, and he fixed the issue in master

1587763051
afontain_
*Alpine

1587763053
frett27
Firefox ?

1587763087
afontain_
I'd like to test if some issue with the linker is Alpine-specific or rather related to musl

1587763112
frett27
Firefox, to efficient guys :-)

1587763120
frett27
i can't follow :-)

1587763128
afontain_


1587763167
afontain_
oh, maybe I could try to disable optimisations

1587763221
mikdusan
afontain_: yes `zig cc` produces an unusable exe when building on host alpine, and linking to a .so

1587763270
andrewrk
ah is this the part where assuming musl is always static is being problematic?

1587763313
afontain_
ah

1587763316
afontain_
known issue then

1587763344
mikdusan
i think yes, there is no way to tell `zig cc` to use host musl. if musl is in target, it's going to be static.

1587763445
afontain_
I guess I'm too used to the "if it compiles, it works" then

1587763508
afontain_
but then it is not possible to make --target=…-musl using shared objects anywhere?

1587763552
FireFox317
frett27, the issue you were found was fixed by TheLemonMan and is now in the master branch of zig. the zig-bootstrap repo though still has zig 0.6.0, so the fix is not in there yet.

1587763611
FireFox317
You have to clone the ziglang/zig repo and move that one in the zig-bootstrap repo or something along those lines

1587763942
mikdusan
afontain_: what I can say is if -musl is in the target, it's going to be built statically by zig when needing a libc; and libSDL.so has undef symbols it wants which are not going to get resolved by musl.a

1587764028
afontain_
ok

1587764048
afontain_
I'm trying to build it with libSDL2*.a at the moment

1587764052
afontain_
there are missing symbols though

1587764062
frett27
FireFox317, thank's for your update, i currently have replaced the zig subfolder with master in bootstrap, it compiles .. :-) stay tuned

1587764078
mikdusan
libSDL2.a is probably going to need some X11 libs

1587764093
mikdusan
which then would need to be .a too.

1587764097
frett27
i recompiled my project with the master, and did need any more the -lc++ and -lc++abi ... sweet !

1587764116
frett27
s/did /did not/

1587764223
fengb
It's working? Yay

1587764279
afontain_
`ar t /usr/lib/libSDL2main.a` says SDL_dummy_main.c.o

1587764281
afontain_
soo…

1587764296
afontain_
let's link with the gcc linker then

1587764844
dimenus
andrewrk: maybe i'm running an unsupported config. Your ClashOS runs the elf file instead of the flat binary file as well when using qemu

1587765168
GreaseMonkey
hmm, is there a list of built-in errors i can refer to while there happens to be no list of built-in errors in the 0.6.0 docs?

1587765203
FireFox317
GreaseMonkey, what do you mean by built-in errors?

1587765216
GreaseMonkey
there are several errors in the error.* space which are built in

1587765227
FireFox317
no? there arent

1587765232
GreaseMonkey
...welp, alright then

1587765257
GreaseMonkey
with that said there are definitely errors which have common meanings, e.g. error.EndOfStream

1587765278
GreaseMonkey
i'm not sure if error.Underflow is what i should be using when underflowing a buffer, as it tends to be used for numerical underflow

1587765330
GreaseMonkey
looking at some of the collection types in the stdlib, it seems they'd rather use assert() than return an explicit error when empty

1587765353
FireFox317
uhm yeah if you really want to know that you should indeed look at the std library source

1587765366
FireFox317
the docs aren't complete yet

1587765392
GreaseMonkey
is there a good place to help w/ getting the docs complete?

1587765437
pixelherodev
daurnimator, what was the issue with mixins?

1587766032
FireFox317
GreaseMonkey, uhm well the zig code base xd. I mean there are issues with the docs generation, but also with code not having proper docs in it

1587766945
GreaseMonkey
andrewrk: quick q, are there any guarantees on how long usize will be? for my purposes i'll need to make sure that it can handle enough for a very large file - so 32 bits won't be enough, but 64 should be good for now

1587766980
fengb
usize = ptrsize

1587766995
GreaseMonkey
...ouch.

1587767001
fengb
So it varies between platforms. If you need exact size, use a u64

1587767049
GreaseMonkey
this

1587767099
GreaseMonkey
said sliding window is intended for use in the LZ77 component of a deflate decompressor i'm working on

1587767153
GreaseMonkey
for compression it's fine to not care about the offset from the start

1587767216
nephele
andrewrk, I played around with minetest a bit more, addinc "-lc++" to the zig c++ commandline (and the zig cc commandline) did not help it for linking the __cxa_thread_atexit_impl symbol

1587767256
nephele
And i somehow doubt -lc++ should be needed? Atleast minetest compiles without that explicit flag with gcc (and i think clang too)

1587768456
andrewrk
GreaseMonkey, is your data all in memory in this example?

1587768546
GreaseMonkey
andrewrk: no, it's being read from a file

1587768575
GreaseMonkey
and i

1587768579
andrewrk
file offsets use u64

1587768600
andrewrk
e.g. the offset parameter to pread and pwrite is a u64

1587768602
GreaseMonkey
thanks for that, would uoff or uoffs be a sensible type to propose for that?

1587768637
andrewrk
you want to change pread and pwrite to use a different type for file offsets?

1587768641
GreaseMonkey
or would that be confused with somehow being equal to off_t in such a way that off_t could be 32-bit

1587768660
GreaseMonkey
internally it should always be at least 64-bit

1587768690
andrewrk
so far I don't see a reason for std lib to change in this regard

1587768695
GreaseMonkey
so u64 is fine technically, i just happen to be a bit of a fan of explicit semantics, that's all

1587768714
GreaseMonkey
yeah i think u64 should be fine for now

1587768718
andrewrk
u64 is pretty explicit, what are you trying to accomplish by changing it?

1587768777
GreaseMonkey
...y'know what, when we start seeing exabyte-level files it can be readdressed

1587768791
GreaseMonkey
until then, i'm sold on u64

1587769256
andrewrk
hm? pow(2, 64) > pow(1000, 6)

1587769333
GreaseMonkey
>>> 1000**6/2**64

1587769333
GreaseMonkey
0.05421010862427522

1587769358
GreaseMonkey
1 exabyte is about 5% of the way towards the use of u64 for file offsets becoming a problem

1587769374
GreaseMonkey
and i've yet to see a terabyte-sized file although they probably exist

1587769402
pixelherodev
If people are making insanely large files that's their problem.

1587769419
GreaseMonkey
exactly

1587769425
pixelherodev
If you have a file big enough that it can't be represented in a 64-bit address space, pointer size is the least of your worries

1587769429
GreaseMonkey
and also you'd need an OS that can handle files larger than that yeah

1587769441
pixelherodev
A bigger one is probably that it

1587769448
pixelherodev
Worth noting: we don't even have 64-bit address spaces yet

1587769460
pixelherodev
I think the highest you can get today is 56-bit?

1587769473
pixelherodev
and consumer hardware isn't even that high yet IIRC

1587769481
GreaseMonkey
eh, systems with 32-bit address spaces can still handle multigigabyte files

1587769487
GreaseMonkey
and i mean > 4GB

1587769494
GreaseMonkey
they just can't mmap() the whole thing, that's all

1587769497
pixelherodev
48-bit on amd64 systems, currently

1587769512
pixelherodev
Sure, but you're still going to have issues

1587769532
GreaseMonkey
and as for pointless facts, the N64's virtual address space i think is 40-bit, so 1TB

1587769863
pixelherodev
So I just realized the lightzing example only works because the allocator is set to the page allocator :P

1587769872
pixelherodev
It uses a `defer allocator.free(mmaped_memory);` :P

1587770673
GreaseMonkey
well that's interesting, after all that rearchitecting, my test archive now takes 21 seconds instead of 24 seconds w/ -Drelease-fast to decompress into a black hole

1587770702
GreaseMonkey
and i now have a new collection which could be stdlibbable

1587770779
GreaseMonkey
(for reference, gunzip into /dev/null takes about 8 seconds for this archive)

1587771057
pixelherodev
37% of a gunzip faster is nothing to scoff at :)

1587771480
GreaseMonkey
i'm mostly trying to get this into a form where you could actually use it in the stdlib

