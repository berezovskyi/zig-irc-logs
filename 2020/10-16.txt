1602820400
adamkowalski
is there something like putNoClobber for AutoHashMap that doesn't assert that it's not contained, and instead returns and error if it already exists

1602821204
pixelherodev
I'd have answered if you stuck around for another two minutes...

1602821213
pixelherodev
(well, six, but still)

1602825308
justin_smith
pixelherodev: so for those following along at home, what's the answer?

1602825523
Nypsie[m]
Probably by using getOrPut() and return an error yourself if it was found

1602843066
m4r35n357
hi all!  looking at zig translate-c, main example works, so I tried my own code.  First two functions OK, but third fails because: tsm-test.c:3:10: 'stdio.h' file not found

1602843087
m4r35n357
adding stdio to main example is ok

1602843102
m4r35n357
my functions are here:

1602843112
m4r35n357
any ideas?

1602843183
m4r35n357
I put stddef in my own code because I wanted to see that it worked OK outside main example

1602843200
ifreund
m4r35n357: pass -lc to zig translate-c

1602843215
ifreund
(i'm not sure why this isn't default, you could open an issue)

1602843281
ifreund
also be aware that it's primarily targeted at translating header files not full codebases

1602843536
m4r35n357
ifreund, OK cheers that cured the error. I didn't get the header bit from the docs "a gradual transfer from C to Zig within a codebase is a supported use case."  The example here

1602843581
m4r35n357
I am attempting to doing this one function at a time until I get something that runs

1602843586
m4r35n357
do

1602843604
omglasers2
is the if here

1602843627
ifreund
yes it definitely is supported, I was just saying that most of the development focus has been towards translating headers for @cImport()

1602843639
ifreund
omglasers2: yes

1602843682
ifreund
in general zig will evaluate as much as it can at comptime

1602843705
m4r35n357
ifreund, OK cheers for that I will continue bit by bit for the time being

1602844021
ask6155_
Hello!

1602844023
omglasers2
ifreund, thanks; related to this, should I expect @typeInfo and @TypeOf will always be evaluated at compile-time?

1602844082
ifreund
omglasers2: yep, they deal with types as values which can only be done at comptime

1602844172
m4r35n357
ifreund, OK the code no longer gives a compile error, but I get "TODO. Unable to dump stack trace: debug info stripped.  Aborted" with build-exe, build-lib and run subcommands.  The "TODO" bit sounds a bit fatal.  Is there any hope or should I stop here?

1602844504
ifreund
it's probably some small edge case, could I see the code?

1602844544
ifreund
unfortuneatly the stage1 compiler isn't the greatest :/ stage2 is coming along nicely though

1602844908
m4r35n357
ifreund, was that for me? if so

1602844987
omglasers2
ifreund, thanks, was expecting it to be comptime

1602845737
ifreund
m4r35n357: yeah, I'd probably just manually translate this code. the generated output isn't very good code and you'd end up rewriting basically all of it to be idiomatic anyways :/

1602845949
m4r35n357
ifreund, TBH I tried the translation as a last resort, can't find enough info in the docs to do it manually (not really expert in c, never mind zig!), so I think I'll try again in a few months.  Thanks very much for your help!

1602845970
ifreund
no problem!

1602855600
ask6155_
hello!

1602855661
FireFox317_
ask6155_, hello!

1602855774
FireFox317_
bye :(

1602857618
WilhelmVonWeiner


1602857664
WilhelmVonWeiner
I'm sure this used to compile on 0.6.0_0 or _1 but after upgrading to _2 I get an error on line 20

1602857670
WilhelmVonWeiner
expected error union type, found 'void'

1602857750
WilhelmVonWeiner
if anyone can see my issue please help. Thanks!

1602858009
omglasers2
you should: 1) make cwd var instead of const on line 10; 2) remove the _ = from _ = cwd.close() on line 23 because close() returns void; 3) remove the try from line 20 because you already catch the error with catch return 1;

1602858325
ask6155
aah finally my nick works

1602860050
travv0
is the merging/inference of error sum types a zig invention?  i just started playing with zig and honestly that's one of the most exciting parts of it for me

1602860108
ifreund
zig's the only language I know of that takes this approach at least

1602860385
companion_cube
it's not very different than checked exceptions

1602860391
companion_cube
doing it with values is new, afaik

1602860395
omglasers2
I remember a video with Herb Sutter about the future of c++ where he talked about a similar approach as an alternative to c++ exceptions (using try at the call site etc.), hope I'm not confusing things though, so maybe it will be adopted by other languages

1602860649
WilhelmVonWeiner
omglasers2: compiles now. Thanks

1602860976
WilhelmVonWeiner
is this a compiler bug?

1602861005
WilhelmVonWeiner
in this code:

1602861146
wilsonk
not a compiler error. You are getting a race condition (ie. bad file descriptor) when calling os.close

1602861471
wilsonk
not sure how the cwd gets closed prematurely, but I think that is the problem. Maybe the cwd.openFile call fails and closes the handle to cwd? Some one with more experience probably has to weigh in on that ;)

1602861526
stro
Is there a way to define a struct that initializes internal members at compile time with self-referential pointers? e.g. similar semantics to LIST_HEAD_INIT:

1602861588
WilhelmVonWeiner
wilsonk: this was also happening with the args.nextPosix() loop commented out

1602861689
wilsonk
hmm, sorry, I am not familiar enough with cwd to be sure what is going on there...hopefully someone else will chime in

1602861905
Ondingen
Is it possible to pass flags to the linker through build.zig? Or some other alternative to passing -nodefaultlib:libc and -safeseh:no

1602862868
marler8997__
For those interested in Windows, I've got an initial implementation of my autogenerated Zig windows bindings, along with a concrete set of Goals for this project:

1602863430
Ondingen
marler8997__ useful, thanks!

1602863927
ifreund
wilsonk: you don't close the cwd

1602863946
ifreund
WilhelmVonWeiner: ^

1602863979
WilhelmVonWeiner
ifreund: I do, line 11

1602863984
WilhelmVonWeiner
defer cwd.close();

1602863989
ifreund
don't do that

1602863991
WilhelmVonWeiner
ohhh

1602863993
WilhelmVonWeiner
i see

1602863996
ifreund
it will always give you EBADF

1602863998
WilhelmVonWeiner
why's that?

1602864013
ifreund
it's how the kernel works?

1602864018
WilhelmVonWeiner
lmao tyvm

1602864037
WilhelmVonWeiner
appreciated

1602864045
ifreund
I'll try and find the man page

1602864182
g-w1
does anyone know how to get the linux programmers manual on arch linux. i try man 2 open and it doesn't work

1602864186
WilhelmVonWeiner
I see it in the docs now. "Closing the returned Dir is checked illegal behavior.", must've missed that initially

1602864253
ifreund
g-w1: iirc there's a blurb about man pages in the install guide on their wiki

1602864256
g-w1
yeaah

1602864264
g-w1
its just pacman -S man-pages

1602864266
g-w1
thanks

1602864690
ifreund
WilhelmVonWeiner: openat(3) has some info

1602864705
WilhelmVonWeiner
cheers!

1602864717
ifreund
the cwd fd isn't a real fd, it's just a special value you can pass to openat(3)

1602864735
ifreund
i.e. doing other normal fd things on it is invalid

1602865191
ryuukk_
one thing that has been a little annoying is having to type self: *MyStruct, all the time for functions, i feel like it is redundant and makes functions larger in width for no real benefits

1602865291
frmdstryr
How can I run zig's stage1 tests?

1602865305
ifreund
ryuukk_: how else would you like to pass the pointer to functions? implicitly?

1602865316
ifreund
frmdstryr: iirc it's just zig build test-stage1

1602865353
ifreund
er, just read zig build --help

1602865370
ryuukk_
ifreund: i don't know really know, but it feels noisy

1602865370
ifreund
there are lots of different tests

1602865388
frmdstryr
Ah ok, I see, just want the compile tests

1602865393
ifreund
ryuukk_: it feels explicit

1602865405
frmdstryr
thanks!

1602865421
ryuukk_
ifreund: yes you are right, it's the right word

1602865422
ifreund
note that you can do `const Self = @This();` if you want to avoid retyping the name of the struct

1602865429
ifreund
explicit is good

1602865526
ryuukk_
can use self: *@This() ?

1602865567
ryuukk_
well i don't mind having to write the full type

1602865569
ifreund
sure

1602865605
ifreund
@This() returns the type of the enclosing struct, so you can use it anywhere a type is expected

1602865748
g-w1
you can also do const Self = @This(); in the struct body and then you have it for all the functions

1602865796
g-w1
oh didn't see that was said already

1602865807
ifreund
:P

1602869673
g-w1
does llvm take a long time to compile

1602869732
g-w1
i am on arch linux but have nix installed. if i install

1602869740
g-w1
i am kinda stuck on zig development

1602870301
g-w1
i might just have to build it from source

1602870442
g-w1
huh, it found llvm but not clang

1602870455
g-w1
can i point it to the llvm prefix

1602870673
g-w1
my libraries are in ~/.nix-profile/lib, but how can i point cmake to that?

1602870754
frett27
g-w1: there is bootstrap to help

1602870768
g-w1
wdym

1602870774
g-w1
in the zig-bootstrap repo?

1602870780
frett27


1602870790
g-w1
thanks

1602870805
g-w1
well i already have the llvm libs

1602870805
frett27
it recompiles the needed llvm components (.. clang, .. and zig)

1602870810
g-w1
i just need to point cmake to them

1602870815
g-w1
I dont really wanna recompile

1602870852
frett27
i did that this morning, moving to llvm11

1602870858
frett27
AND recompile zig

1602870871
frett27
i got the ubuntu package names

1602870875
frett27
if it helps

1602870884
g-w1
im on arch :) but thanks anyways

1602870885
frett27
the cmake works nicely then

1602870909
g-w1
i think my llvm is working now. i just need clang

1602870910
g-w1
cool

1602870959
frett27


1602870974
frett27
there is also lld, and C++ libs abi

1602870983
g-w1
ok

1602871003
frett27
zig is then 10 mins away

1602871038
g-w1
cool! im trying a slightly different route using nix but ill try that if my way doens't work. thanks

1602871928
frett27
g-w1: nix seems cool, what the benefits regarding arch, it seems to have the same objective ?

1602872572
g-w1
really the only reason im trying it is that it has  llvm11

1602872586
g-w1
it basically allowss you to keep your whole system configuration in one place

1602872591
g-w1
so its nice for develeopment

1602872603
g-w1
where you have lots of versions of packages that conflict

1602872730
frett27
ok, i just see

1602872756
g-w1
but it still didn't work

1602872774
g-w1
ill just wait a few weeks or install nixos. whichever comes first

1602872812
frett27
what's the trouble ?

1602872918
g-w1
its getting llvm 11 but the clang libs are clang 7

1602872926
g-w1
im not that good at nix yet

1602872931
g-w1
i dont know how to do package versions

1602873097
g-w1
i got it.

1602873099
g-w1
nice

1602873116
g-w1
i had to do clang_11

1602874278
g-w1
if anyone knows anything about nix and would provide me with a default.nix file for development that would be great. i still cant get it to work. thanks :)

1602875166
frett27
have you tried to upgrade

1602875271
tdeo
g-w1: i use `with (import <nixpkgs> { }); (zig.overrideAttrs ({ ... }: { hardeningDisable = [ "all" ]; })).override { llvmPackages = llvmPackages_11; }` as my default.nix

1602875651
g-w1
ok

1602875767
frett27
tdeo: thank's, it works for me

1602875874
g-w1
frett27: you installed nix?

1602875910
g-w1
tdeo: thannks sooo much!!! i tried for a VERY long time and now it works

1602875929
tdeo
np

1602876038
frett27
g-w1: yes ! :-)

1602879206
waleee-cl
ryuukk__:  do instead

1602879218
waleee-cl
oops I hadn't scrolled down

1602880432
Dominic[m]
I'm getting errors like

1602880700
notpiika
stupid question - but how would i get the absolute path that a Dir points to?

1602880701
notpiika
can't seem to find any field or method that can do this...

1602881174
Dominic[m]
Ah, I think I figured it out by myself.  The generated cimport is using G_CONNECT_SWAPPED which should be .G_CONNECT_SWAPPED to indicate it's from the enum.  I guess that's a bug then.

1602881393
Dominic[m]


1602881952
g-w1
notpiika: maybe use std.fs.realpath with pathname as "." as a workaround

1602884286
g-w1
im getting this weird error when trying to build on debian under nix-shell /home/jacob/repos/zig/build/zig0: error while loading shared libraries: libffi.so.6: cannot open shared object file: No such file or directory

1602884788
g-w1
it is trying to run zig0

1602885319
tdeo
g-w1: sounds like a nix-on-non-nixos issue i think

1602885397
g-w1
oh

1602885409
g-w1
yeah i was using nix because debian is behind

1602885414
g-w1
ill try zig bootstrap

1602885416
g-w1
its a server

1602885420
pixelherodev
g-w1: have you tri - ah nevermind thenn

1602885429
pixelherodev
(my suggestion isn't fit for a server, ignore me)

1602885440
g-w1
i mean its in my house just running all the time

1602885458
pixelherodev
Have you considered using unstable?

1602885467
pixelherodev
I abhor Debian these days, but back in the day I used that regularly

1602885474
g-w1
ok

1602885479
g-w1
ill try zig-bootstrap first

1602885696
g-w1
I am getting this when try to bootstrap ./build: 16: ./build: Bad substitution

1602885745
g-w1
nvm it needs bash

1602885890
pixelherodev
g-w1: are you sure?

1602885910
pixelherodev
Ahh, I see them, never mind

1602885914
g-w1
yeah. i had to change #!/bin/sh to /bin/bash

1602885957
pixelherodev
Idea: we could redo it to require three separate arguments, arch, platform, and abi, instead of taking the full triple?

1602885966
pixelherodev
That'd avoid using bashstitutions to extract them

1602885975
g-w1
good idea

1602885999
pixelherodev
and the replacements can be replaced (pun intended) with conditionals

1602886005
pixelherodev
"if macos then Darwin"

1602886151
g-w1
doesn't posix have sed

1602886154
g-w1
or is that gnu

1602886276
earnestly
sed is POSIX, sure

1602886293
earnestly
GNU does add a feature or two on top of what POSIX defines

1602886321
pixelherodev
but it's also not something that requires sed.

1602886332
g-w1
yeah ig

1602886335
pixelherodev
Heck, if anything, it'd be more correct with conditionals, wouldn't it?

1602886348
pixelherodev
Since e.g. `linuxa` is an invalid target anyways, we don't care if it doesn't turn into Linuxa

1602886436
earnestly
pixelherodev: POSIX parameter expansion can cut up a triple quite easily as each part cannot contain '-'

1602886468
earnestly
When it comes to shell scripting though, unless you're a #bash regular, good luck doing anything well

1602886581
andrewrk
how are everyone's projects doing post #6250 merge? anyone still waiting on regressions to be fixed?

1602886594
pixelherodev
I haven't... actually... well

1602886604
pixelherodev
I haven't touched any of mine since then :P

1602886607
earnestly
pixelherodev: If you don't already, use shellcheck as a minimum

1602886633
pixelherodev
... it has... 45 dependencies...

1602886636
pixelherodev
why

1602886655
pixelherodev
Just this once I'm installing the binary package lol

1602886673
earnestly
pixelherodev: Haskell,

1602886677
pixelherodev
earnestly: wait, the parameter expansion is POSIX?

1602886681
pixelherodev
Then why would it need bash???

1602886708
earnestly
pixelherodev: bash adds / and // (and /?, //?), but the rest is POSIX

1602886710
pixelherodev
Ahh, it's

1602886715
pixelherodev
Yeah, just noticed

1602886725
pixelherodev
All that needs to be changed is // -> conditional

1602886772
earnestly
shellcheck will warn you of any non-posix constructs when using a sh shebang

1602886809
earnestly
It's a good baseline that tries to avoid opinion, but it's a tool that came from #bash, so it embodies quite a lot of wisdom as it stands

1602886874
earnestly
So in essence; use wooledge and avoid google/stackoverflow for shell scripting advice because it's almost all wrong

1602886907
earnestly
(Don't use set -e either)

1602886938
pixelherodev
earnestly: thanks!

1602886939
earnestly
pixelherodev: conditional here would be a case statement

1602886958
pixelherodev
What's wrong with `set -e`?

1602886965
pixelherodev
And yeah, I don't ever use SO

1602886982
earnestly
pixelherodev: /query greybot set-e

1602886983
pixelherodev
Man pages, official docs, and experimentation, in that order :P

1602886988
pixelherodev
earnestly: ?

1602887005
earnestly
What's confusing?

1602887012
pixelherodev
Ahh, there's a bot that responds to dms?

1602887023
earnestly
Sure, all bots are like that

1602887030
earnestly
"DM" heh

1602887061
earnestly
pixelherodev: You may like /query greybot varcap

1602887066
travv0
anyone willing to do a quick code review of a couple advent of code days i did in zig?  i don't really have much experience doing stuff in low level languages so i want to make sure i'm not doing anything too dumb right off the bat.

1602887344
pixelherodev
earnestly: you know what I mean :P

1602887354
pixelherodev
Yeah, I'm going to send patches for zig-bootstrap shortly

1602887442
pixelherodev
earnestly: set -e is actually fine here

1602887462
earnestly
Yeah, you and a thousand others say the same thing

1602887467
earnestly
It is what it is

1602887492
pixelherodev
earnestly: look at the script and say that ;)

1602888071
ifreund
andrewrk: my last wish post #6250 would be a way to expose full custom output filenames using -femit-bin=foo in the zig build system

1602888107
andrewrk
ah right

1602888118
ifreund
I had a look at implementing it but didn't find a good way to do it given that -femit-bin=foo copies the file back out of the cache dir

1602888156
ifreund
not really a release blocker, but you asked :P

1602888160
andrewrk
fair enough :)

1602888183
andrewrk
ok I'm going to keep tackling PRs and if I get down to yours that is revelant to this topic I'll see if I can solve the use case for ya

1602888234
ifreund
alright cool

1602888300
ifreund
I could also just use a Makefile for this project tbh, but I'd rather not

1602888358
andrewrk
I wouldn't be offended if you did but I do think if you force yourself to use zig build it will cause the right kind of pressure we need to make sure this use case is handled satisfactorily

1602888689
ifreund
my thoughts exactly

1602888722
ifreund
I was also planning on using it as the first zig project packaged for void linux to test things out

1602888788
earnestly
Oh that will be interesting.  Both Go and Rust are excructiating to integrate anywhere those psuedo-package-managers don't quite expect

1602888812
earnestly
And that's not merely lacking "support" for distributions, that's just straight up bad design

1602888893
andrewrk
I think it's something more subtle - a power struggle between package maintainers who want to patch packages to make the user experience on that system better vs application developers who want to use language specific package managers to make the user experience consistent across all systems

1602888907
andrewrk
it's interesting because both parties have the user experience in mind, yet it is still a power struggle

1602888923
andrewrk
zig is caught in the middle of this, just like those other languages, we are not exempt from this

1602888969
earnestly
They don't want to patch anything

1602888985
andrewrk
but I am optimistic that we can try to address both parties' concerns, rather than just ignoring the use cases and needs of system package maintainers

1602889014
ifreund
it's mostly debian that patches stuff

1602889020
earnestly
They rarely have to patch things because language build system/package managers are outright broken.  The Ada gprbuild is a good example

1602889023
ifreund
arch and void don't much

1602889060
andrewrk
what do arch and void do for npm applications? do they force nodejs dependencies to be in separate arch/void packages, or do they allow "vendoring" node_modules/ ?

1602889064
earnestly
What makes Rust and Go painful is how they expect to not only find their packages, but what they can and cannot link with

1602889067
ifreund
anyhow, my project wouldn't be a full test as we don't have a zig package manager yet of course and the project has no zig dependencies other than the std

1602889093
earnestly
A good example of how to do things as a language is python, oddly

1602889096
andrewrk
yeah that would be the "hello world" equivalent of difficulty packaging

1602889098
earnestly
It uses the filesystem as a package manager

1602889120
andrewrk
the python experience is horrible for the application developer

1602889130
andrewrk
but it's nice for the system package maintainer

1602889152
andrewrk
nodejs is the exact opposite

1602889184
ifreund
andrewrk: not familiar with packaging npm stuff really, but void at least lets rust/go/haskell packages vendor all their stuff using their respective package managers

1602889189
earnestly
andrewrk: If you're curious, Arch does have a wiki:

1602889217
earnestly
andrewrk: What makes python horrible?

1602889251
andrewrk
dependencies on system installed packages, making it very difficult to have a consistent development environment

1602889271
earnestly
Python doesn't require that

1602889281
ifreund
earnestly: you need to deal with virtual environments to do the stuff that e.g. cargo lets you do without

1602889302
andrewrk
yeah virtual environments is a hack

1602889313
andrewrk
like setting global variables to pass parameters instead of just passing a parameter

1602889317
earnestly
ifreund: You really don't need those but, well, that's the path people have taken

1602889355
ifreund
I'd say they've taken the path of least resistence, the alternatives are worse :P

1602889367
companion_cube
how else do you do if you have two projecs with different requirements?

1602889380
companion_cube
the problem with system-wide libraries is that they're, well, global

1602889381
andrewrk
project-local dependency management

1602889398
andrewrk
zig package manager won't even support installing packages globally

1602889431
companion_cube
yes, I mean, wrt python

1602889435
andrewrk
ahh

1602889437
ifreund
yeah, gloabal installation of anything is the job of the system package manager and the system package manager alone

1602889445
andrewrk
glad we're on the same page there :)

1602889487
andrewrk
but do you see my point about how the global package installation of python actually does make life easier for system package maintainers (at least debian)

1602889491
companion_cube
python follows C (well, "modern" C with pkg-config)

1602889511
earnestly
The only thing zig has to do is not make assumptions about the locations of things.  With python one can isolate entire sets of libraries through PYTHONHOME

1602889516
earnestly
C has -I and -L

1602889564
earnestly
andrewrk: If you're interested, GoboLinux wrote up a paper comparing different package management approaches and explains their idea of using the filesystem itself as a package manager

1602889583
ifreund
earnestly: I'd be interested

1602889606
earnestly
That is, instead of "pm list-installed", theirs would be: ls /packages/installed, heh

1602889673
companion_cube
it's still global, then?

1602889696
companion_cube
tbh I'm not sure what the point of having

1602889706
earnestly
ifreund:

1602889707
companion_cube
if you're developping, it's just better to have per-project dependencies

1602889734
companion_cube
if you're a user, well, programs is what matters, and they should link to libraries as statically as possible imho

1602889739
earnestly
companion_cube:

1602889754
earnestly
Closest thing to plan9 linux has so far, heh

1602889756
ifreund
earnestly: thanks

1602889771
companion_cube
yay, more magic?

1602889784
earnestly
There's no magic, that's the point

1602889796
earnestly
If you want magic, that's nix

1602889840
companion_cube
the magic is in the filesystem, isn't it?

1602889862
earnestly
If that's your threshold, then everything is magic

1602889884
companion_cube
I mean, is it based on a union fs or something like that?

1602889897
earnestly
Runner uses overlayfs.  Plan9 had bind by default

1602889904
companion_cube
yeah, /System/Index seems to be magical

1602889906
companion_cube
oh well

1602889972
earnestly
There's a degree of complexity needed to express anything, the purpose is to not be more complex than necessary

1602890010
earnestly
But not to be needlessly simple either as that ends up producing more code, more complexity, as a result of people fighting with it

1602890025
earnestly
Everything is tradeoff, sadly

1602890041
companion_cube
I mean, it's an interesting idea

1602890044
companion_cube
kind of bypassing the problem

1602890045
earnestly
And to be practical you're stuck with working with what you've got

1602890100
earnestly
I'm not suggesting any of this to zig, it's not zig's place to concern itself with this.  What zig has to do is be humble in its design so that it can be used in all these manifold environments

1602890128
earnestly
(And it's easier than people think; the main thing is not making assumptions, or allowing the user to tell zig where things are)

1602890267
earnestly
Not many people seem to take seriously the reasons why C has remained so dominant, for this long.  Things like actual stability, "Better the Devil you know" - Holtzmann when asked why NASA still uses C.  Things like the flexibility to be adapted to anything; almost any build system can be used to integrate C's build flow

1602890284
earnestly
I can't do the same with Rust, or Go.  I can't easily use `make' to build Ada files

1602890334
earnestly
Let along wanting to integrate it into anything newer like bazel or ninja

1602890366
earnestly
(One is forced to use the language's NIH system instead because it gets tied up with it and its assumptions.)

1602890560
companion_cube
earnestly: C typically has a special status in distros, which also explains why it works so smoothly

1602890575
earnestly
companion_cube: There's nothing about C that makes it special

1602890585
companion_cube
you mean, like the presence of /usr/include ? :D

1602890593
earnestly
Yes

1602890595
companion_cube
no, the

1602890612
companion_cube
they're revolving around C in the way they handle libraries

1602890619
companion_cube
other languages are just an imitation of that

1602890629
earnestly
They don't.  Compilers like gcc/clang have a set of default locations where they look for libraries which is set at compiletime

1602890664
earnestly
There's nothing special about C, that distros install their libraries for various things is because bootstrap tooling needs it

1602890702
earnestly
The entire thing can be controlled through -I and -L flags

1602890708
companion_cube
I'm not denying that

1602890721
companion_cube
just pointing out that I have /usr/lib and /usr/include, but not /usr/ocaml/ for example

1602890724
earnestly
Does rust have default search locations?

1602890726
earnestly
Nope

1602890738
companion_cube
no, because it doesn't even try :)

1602890749
earnestly
companion_cube: I do, it's in /usr/lib/ocaml though

1602890766
earnestly
And ocaml is a very good about it too

1602890769
companion_cube
yep, a subdirectory, as it's an afterthought

1602890774
g-w1
is there a development guide for the zig compiler like this?

1602890779
companion_cube
and all my .cmi are in /usr/lib and not /usr/include

1602890782
earnestly
companion_cube: You want /usr/lib/c?

1602890798
companion_cube
I don't want anything, I'm just pointing out that C has a special treatment :p

1602890799
earnestly
If so, you can have it

1602890804
earnestly
Nothing about C prevents it

1602890838
earnestly
Or even distros, the compilers can integrate with it no problem

1602890838
companion_cube
maybe some day we'll have /usr/rust indeed, with precompiled libraries, so it would all compile faster

1602890841
earnestly
Can't do that with Go or Rust

1602890851
earnestly
(And many others)

1602890859
g-w1
ive never worked on a codebase this big before. do you have any suggestions on reading it?

1602890906
tdeo
the zig part or the c++ part?

1602890912
g-w1
zig

1602890943
g-w1
i actually found the c++ easier to read. idk y. ive never written very much zig or any c++

1602890965
g-w1
maybe its because similarity to rust which I have written a bunch

1602891186
companion_cube
earnestly: even with OCaml, it supposedly works with system libs, but no one uses that cause it plays badly with opam

1602891209
companion_cube
I don't really know a language that has both a language-level package manager and a good story wrt. system libraries

1602891213
earnestly
companion_cube: I do and it works beautifully.  I don't understand people who fall for pits like opam and virtualenv and co.

1602891214
companion_cube
probably because it's hard to be split brained

1602891223
companion_cube
so you don't use opam? woah

1602891231
earnestly
No, I just use my package manager

1602891237
earnestly
That's why it's there

1602891240
companion_cube
did you package all the dependencies you use then?

1602891246
earnestly
Sure, it's a doddle

1602891254
companion_cube
I'd be curious to see a list

1602891255
earnestly
Start locally though

1602891297
earnestly
companion_cube: Not much:

1602891311
earnestly
distro already has a bunch

1602891322
earnestly
Enough to get things like why3, frama-c, spark, etc. building

1602891327
g-w1
maybe its just because Ive never really done that much with code written by anyone other than myself. i have put it on my kindle, so ill just read it a bunch

1602891349
earnestly
companion_cube: Although the new Dune thing is once again causing problems

1602891418
companion_cube
right, that's not much

1602891429
companion_cube
(you do smt stuff? we should talk :p)

1602891447
companion_cube
I'm surprised, dune is among the best thigns that happened to OCaml in the last few years

1602891453
companion_cube
maybe we should move to #ocaml or something though

1602891455
earnestly
I hate it ;D

1602891480
earnestly
But it has been a long time since I tried to wrangle it so I've forgotten the specifics

1602891586
earnestly
companion_cube: Looking at some newer examples it seems fine, perhaps the project using it was doing something wrong (which is possible with all build systems)

1602891620
earnestly
Looks nice even

1602891641
companion_cube
yes, also it takes care of a lot of things ocamlbuild sucked at (like .cmt or .cmxs files)

1602891705
earnestly
All of that, though good, is incidental to how well it inegrates.  The borders/environment is often ignored, even by formally proven systems, which end up with bugs (although much fewer) for stupid reasons such as assuming the network is reliable, or that they'll never get a half completed packet

1602891764
earnestly
integerates* This is really my only concern with zig.  Language build systems/managers, I understand why they exist, but so often they forget the rest of the world and become impossible to use outside of a narrowly defined role

1602891888
companion_cube
for zig it's pretty clear it must play well with at least C

1602891896
companion_cube
for mixed C projects

1602891905
earnestly
That was impressive to see

1602891971
earnestly
zig does pretty much everything right and I see a lot of people who use C quite happy with it

