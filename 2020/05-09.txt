1588982409
fengb
How about we target Lua and pipe the results into fengari

1588983258
daurnimator
go for it :P

1588983628
oats
zig.  on.  javascript

1588985784
fengb
Actually... thatâ€™d be a pretty cool idea

1588985843
fengb
Be like Typescript but without needing backward support

1588985950
waleee-cl
seems kind of done a bunch of times now

1588987009
fengb
But Zig is better

1588988337
fraktor
I'm trying to link to glibc, but when I add `b.linkLibC()` to my build.zig files, my build fails.  Running the `build-exe` command directly yields "illegal hardware instruction."  I'm using zig-bootstrap from the master branch; what should I do to fix this?

1588989174
andrewrk
fraktor, does this help?

1588989240
fraktor
What if I'm not invoking any C code, but just trying to include the C library?

1588989276
fraktor
(I will be invoking C code, but I've got the default hello world program for now).

1588989278
andrewrk
are there any more error details you can share?

1588989485
fraktor


1588989565
andrewrk
yeah that's helpful. it looks like the zig compiler itself crashed

1588989624
andrewrk
the next step to troubleshooting this would be to get a debug build of the compiler and get a stack trace

1588989628
fraktor
Yeah, it's when I try to build, not when I try to run.

1588989697
fraktor
How would I get a debug build? Do I have to rebuild zig?

1588989702
andrewrk
illegal instruction hints that perhaps the zig you are using was cross compiled with different cpu feature flags than are available on your CPU

1588989728
andrewrk
yes you would have to rebuild zig with -DCMAKE_BUILD_TYPE=Debug rather than -DCMAKE_BUILD_TYPE=Release. that option is in the `build` script of the bootstrap repo

1588989764
andrewrk
did you bychance compile for the native target and then copy the resulting binary to a different computer?

1588989791
fraktor
I did not.

1588989793
fengb
What CPU target do we use for the nightly builds?

1588989799
andrewrk
baseline

1588989825
fraktor
Should I build for baseline instead of native?

1588989843
andrewrk
native is correct if you're intending to use it natively

1588989898
curtisf
Could someone explain this "error: cannot assign to constant" error to me?

1588989901
fraktor
That is the plan.  That only determines the architecture for the compiler itself, that is I can still cross-compile, right?

1588989993
fengb
curtisf:

1588990048
andrewrk
curtisf, as a workaround, maybe try extracting that arg to a const. e.g. const workaround: std.builtin.CallOptions = .{.modifier = .never_inline };

1588990058
andrewrk
sorry, that looks like a really annoying bug

1588990330
curtisf
hmm extracting doesn't seem to work

1588990387
curtisf
what is the error trying to say exactly?

1588990539
andrewrk
curtisf, oh, hm, maybe it's simply pointing at the wrong ast node

1588990591
andrewrk
curtisf, double check that @This()._parseField is not a function pointer

1588990646
curtisf
it looks like it's just a regular method definition

1588990686
andrewrk
would be easier to debug with a debugger and a breakpoint set on add_node_error

1588990745
curtisf
Is that still not really possible on windows?

1588990779
andrewrk
unfortunately it still requires a debug llvm/clang/lld build

1588990830
curtisf
oh shoot, is #2727 still a problem? I was trying to fix some weird looking code but one of them has a todo mentioning it

1588990900
curtisf
I guess comptime parser combinators are a real stress test of the Zig compiler ðŸ˜…

1588991291
andrewrk
that's probably true. the good news is that the design of self-hosted is coming along and it's rock solid so far

1588991311
andrewrk
we'll see if it survives implementing all the language features :)

1588991428
curtisf
OK, so how do I get the tag-enum-value associated with a tagged-union? Before I had `@TagType(@TypeOf(un))(un)`, but that doesn't work anymore

1588991501
andrewrk


1588992810
curtisf
ah thanks, didn't realize that's what that was

1588994175
fraktor
Doing another build because I can't to 8 jobs with only 16G of ram

1588994184
fraktor
s/can't to/can't do/

1588996072
curtisf
ah, pulling the argument out did actually work, I missed the `comptime`

1589003583
scientes
is it possible to use non-natural alignment on a slice type?

1589003596
scientes
or do I need to use a pointer?

1589003881
scientes
is there a convenience function for this?

1589003881
scientes
mem.copy(u8, strsCur, entries[i].key[0..entries[i].key.len + 1]);

1589003882
scientes
strsCur = strsCur[entries[i].key.len + 1..];

1589004344
scientes
uggh, also annoying you can't have a zero-length slice pointing to the end of another slice

1589022207
marijnfs
did the pub qualifier become more strict?

1589022280
ifreund
marijnfs:

1589043020
donaldallen
Are there any options for zig fmt, such as maximum line width? I have an enum with a long list of variants and zig fmt insists on putting them on one extremely long line.

1589043129
ifreund
donaldallen: no, but if you throw a trailing comma in there zig fmt will wrap

1589043164
donaldallen
Thanks -- I'll try it.

1589043170
ifreund
(this goes for everything, not just enums)

1589043250
donaldallen
Works great. Just what I wanted. Thanks again.

1589043354
ifreund
no problem!

1589043535
andrewrk
donaldallen, zig fmt also respects line breaks after binary operators

1589043582
ifreund
and if you want your ternary's to wrap (those aren't binary are they?

1589043597
ifreund
hmm, guess that would be ternaries

1589043636
andrewrk
what ternary?

1589043679
ifreund
i mean if/else without using a block

1589043692
ifreund
if (true) 1 else 0;

1589043771
ifreund
ternary definitely isn't the right word cause you can do just `if (true) return;` or `if (thing1) 1 else if (thing2) 2 else 3;`

1589043780
ifreund
but zig fmt will respect your line breaks

1589044021
donaldallen
ifelse without a block doesn't work as I would like, e.g., a function call in the else clause doesn't get indented properly (function name and args all at same indentation level).

1589044038
donaldallen
Wrap it in brackets and it works properly.

1589044305
donaldallen
But I just noticed an assignment statement in an if that was unbracketed and the rhs of the assignment is a function call and that got indented correctly.

1589044339
donaldallen
"was unbracketed" -> "is unbracketed"

1589044682
INSANU
can you guys tell me if there is any company using this language?

1589045492
gdh
andrewrk, or pixelherodev, there are no constructors in Zig, are there?

1589045549
ifreund
gdh: no

1589045599
gdh
Thanks.

1589045677
demizer
Hi everyone, is it possible to use file.write into an ArrayList or a buffer of some kind so I can test the output? Haven't been able to find an example of this in the stdlib.

1589046050
tdeo
you can call .outStream() on an ArrayList(u8)

1589046073
tdeo
which gets you an OutStream, not a file, but it should help

1589046353
demizer
Thanks for the response. The function I want to test takes a std.File as a parameter. So I need something that satisfies that type. I might just have to write and read a file to test this function unfortunately unless there is some other way.

1589046473
tdeo
linux has memfd_create if you want a File without actually opening one, but it's probably better to just use a temp one

1589046507
demizer
thank you!

1589047206
oats
speaking of out streams, do you pretty much have to use 'var' for a function argument that takes one? Looks like you'd need a fairly complicated function signature otherwise...

1589047229
andrewrk
oats, yes

1589047262
oats
and 'var' means type inference based on how it's used in the function body, yeah?

1589047279
andrewrk
it's less than ideal, there are open issues for it, the most relevant one is probably

1589047325
oats
ah yes

1589047329
oats
traits would be <3

1589047344
oats
I get that it's a tricky thing to figure out though

1589047647
oats
semi-related, why do you still have to specify a max size when reading from an InStream to an ArrayList, or with an allocator?

1589047775
fraktor
If I use `defer` in a for loop, when does that get run?

1589047809
oats
I think at the end of each loop?

1589047852
fraktor
Hmm.  That's a little frustrating.  Is there a way of making those statements run when the function exits?

1589047862
fraktor
Assuming that I have multiple return points that is.

1589047872
tdeo
why would you want that?

1589047935
fraktor
I'm using SDL, which means I don't have control over allocation.  I have a list of textures that I'm loading up, and I want to free them when I'm done with them.

1589047983
fraktor
Oh wait; I can just do a second loop and defer the entirety of that loop.

1589050418
fraktor
I'm attempting to use a C library that accepts an enum as a parameter, but the definition of the enum is a c_int for some reason.  Here's a code snippet and the error message:

1589050619
ifreund
fraktor: that paste isn't loading for me, but you should try using an enum literal `.EnumName`

1589050719
fraktor
ifreund: What I have is a c_int, and I need to turn it into an enum.

1589050743
fraktor
By the way the service seems to have gone down for a sec, but it just loaded again for me

1589050779
ifreund
fraktor: ah yep, loaded for me

1589050782
ifreund
try removing the c

1589050789
ifreund
just .SDL_FLIP_HORIZONTAL

1589050856
fraktor
c is the namespace that it lives in.

1589050864
ifreund
did you try it?

1589050886
fraktor
...I did.  I don't understand what just happened.

1589050927
ifreund
so as far as I understand it zig translates two separate things for c enums

1589050945
ifreund
1. the c.SDL_WHATEVER which is a c_int

1589050952
fengb
translate-c provides 2 copies of the enum definition: one as a c_int because C likes to use enums as ints, and one as an actual enum

1589050959
fengb
Oh Iâ€™m slow again

1589050979
ifreund
and 2. an enum corresponding to it, which will be c.enum_typename

1589051001
ifreund
and since this is zig you can infer the enum type by starting it with a dot

1589051199
fraktor
I didn't know about that second feature.  Excuse me while I go and remove some extraneous typing

1589051392
ifreund
fraktor: fyi, you can inspect the zig code translate_c is generating if you're curious.

1589051412
ifreund
it will put a c_import.zig somewhere in your zig-cache

1589051419
st4ll1
so .SDL_FLIP_HORIZONTAL is the same as c.enum_unnamed_93.SDL_FLIP_HORIZONTAL? or how does is work?

1589051430
ifreund
st4ll1: yeah that's right

1589051459
fraktor
I'm now trying to store .SDL_FLIP_NONE into a variable, but I'm getting the error "cannot store runtime value in type '(enum literal)'"

1589051462
ifreund
see

1589051464
st4ll1
i knew it worked but i did not know why :D

1589051525
jwmerrill
I've been working on a (now mostly complete) Zig implementation of the Lox language from Crafting Interpreters. I implemented the garbage collector following the Allocator protocol, but I'm wondering if someone more knowledgeable can double check whether I'm correctly obeying the required invariants. Code:

1589051544
oats
jwmerrill: shit, me too!

1589051558
oats
right now I'm trying to come up with an elegant way to handle expression evaluation

1589051563
oats
mine's kind of a mess right now

1589051566
jwmerrill
oats: cool!

1589051598
ifreund
fraktor: it will probably work if you do const myvar: c.enum_name = .SDL_FLIP_NONE;

1589051604
oats
crafting interpreters is really nice

1589051625
jwmerrill
Here's the Zig source comment saying what a reallocFn must do:

1589051658
jwmerrill
I'm a little bit worried that running the GC from inside reallocFn (which may end up recursively calling reallocFn and/or shrink) may violate the contract.

1589051662
fraktor
So I need to do c.enum_unnamed_93? What if that number changes?

1589051663
ifreund
i believe how enum literals work is that they are of a special enum literal type and may coerce into enum types which use that name

1589051667
jwmerrill
But tests are passing, so that's good.

1589051706
jwmerrill
And the Zig implementation looks very similar to the C implementation of reallocate from the book, so that also seems promising

1589051713
ifreund
fraktor: yeah, it's a little nasty, though these numbers have been made to use a namespace-local counter instead of a global one on master

1589051743
ifreund
if you're sticking with 0.6.0 like me you may be interested in my hack

1589051975
Barabas
Good evening everyone

1589052091
ifreund
hello

1589052113
Barabas
I was writing a simple command line program. On windows. And to my surprise when a user presses enter it doesn't end the line with \n but with \r

1589052128
Barabas
Is this normal? Is it the same on Linux (probably not)?

1589052155
ifreund
no, \r is not a thing on linux

1589052167
ifreund
(and I have no idea how windows works sorry)

1589052230
oats
jwmerrill: how did you decide to use c_allocator?

1589052254
Barabas
So Linux will have \n at the end of a user input line, right?

1589052264
jwmerrill
I started of using fixed buffer allocator, but was getting OOM on some benchmarks from the book repo.

1589052284
jwmerrill
I think c_allocator is still the only general purpose allocator available.

1589052306
oats
jwmerrill: I like how you've limited where you pass around the allocator

1589052323
oats
I've basically threaded mine throughout the whole thing :<

1589052328
nephele
windows line endings and unix line endings are different, because history :D

1589052374
jwmerrill
Once you have a GC, it doesn't seem like there's a good time to deinit a whole arena except when the program actually completes.

1589052444
Barabas
I know, but in windows files it's \n\r, right?

1589052453
fraktor
I believe it's \r\n

1589052493
Barabas
Oooh... then maybe that's what it does and I got confused because it didn't show me the \n

1589052838
oats
jwmerrill: it's been weirdly fun trying to translate these OOP concepts that I'm only vaguely familiar with

1589052850
Barabas
ew OOP :P

1589052878
oats
and actually, since you kind of have proper algebraic types in Zig, implementing the AST was much simpler than the java version

1589052886
oats
almost haskelly

1589052904
jwmerrill
I found implementing the OOP section to be a bit of a grind because I don't like using those features much myself. But it was still educational in hindsight.

1589052915
oats
makes sense :)

1589052951
jwmerrill
I only did the bytecode interpreter, which doesn't have an AST. But algebraic data types are awesome for ASTs.

1589052978
oats
oh, this is the bytecode VM!

1589052985
oats
jesus, how did I not realize lol

1589053002
oats
I just thought this was way further along in the tree-walking interpreter lol

1589053006
jwmerrill
Haha, that's probably why it looks very different :-)

1589053049
oats
wait, does it end up being a kind of JIT bytecode?

1589053054
oats
you still have lox scanning code

1589053104
jwmerrill
You compile to bytecode, which means an array of u8 where every byte represents an operator or an operand. Then the vm interprets those operands one by one at runtime.

1589053120
oats
oh that sounds fun

1589053135
jwmerrill
A JIT would be if you generated machine code to run at runtime, but this never generates machine code. It just does the operations that they bytecode says to do.

1589053248
jwmerrill
Yeah, it's really neat. I've done a few tree-walking interpreters before, but never a bytecode interpreter. I had heard a lot of the concepts, but actually doing it was very educational.

1589053303
oats
I wonder how a lox tree-walker would compare to the bytecode vm, both written in zig

1589053306
oats
without the java overhead :P

1589053315
oats
er, for performance

1589053322
fengb
Hmm, I should take a look at that book too

1589053328
oats
fengb: it's real good

1589053343
jwmerrill
+1

1589053356
oats
the guy's a really great writer

1589053363
Barabas
What's this book?

1589053369
fengb
He is. I really liked Game Programming Patterns too

1589053373
jwmerrill
Crafting Interpreters

1589053385
jwmerrill


1589053396
Barabas
Oh that guy, yeah his GPP was nice.

1589053399
fengb
I'm from a different world. I've only written bytecode interpreters :P

1589053433
Barabas
I took a look at... wren I think it was back then.

1589053478
jwmerrill
oats: in a way, you're setting yourself a harder challenge by doing the AST interpreter in Zig, because you have to think about how to manage the memory for all those nodes. Java and its garbage collector take care of that for you.

1589053534
oats
yeah, it's been a bit of a challenge

1589053536
jwmerrill
The bytecode interpreter does less allocating, so it's actually easier to deal with a language with manual memory management (like C or Zig).

1589053553
oats
lots and lots of 'try'ing

1589053568
oats
thankful it exists though lol

1589053697
jwmerrill
Yeah, 'try' shows up 191 times in my compiler.zig.

1589053726
jwmerrill
I've been wondering if I should be doing something to cut down on that, but I think it's just what you're supposed to do.

1589053895
oats
I think the only language where you could get rid of the 'try' noise and still have safe code is haskell :P

1589053927
Barabas
I guess most of the tries are for memory allocation?

1589053935
oats
sorry, I really like haskell, I'll refrain from bringing it up too much :P

1589053938
oats
Barabas: yeh

1589053980
jwmerrill
Yes, 99.9% of them are in case you hit OutOfMemory while allocating.

1589053995
Barabas
You can of course try moving the memory allocation up, but that means you have to somehow know how much memory you will be using (at most) further down.

1589054035
Barabas
I'm reading the book now :D

1589054041
jwmerrill
Yeah, that sounds smart for a lot of applications, but seems impossible to predict in an implementation of a dynamic language.

1589054048
jwmerrill
You don't know what programs someone else will write.

1589054164
jwmerrill
One thing that's nice about having to write "try" for everything that allocates is that I know that my garbage collector won't run on any lines that don't have "try" on them.

1589054200
jwmerrill
Helps with a few cases where you have to temporarily violate a GC invariant, and then make sure it's fixed up again before the GC can have a chance to run.

1589054214
Barabas
Yeah I have no idea what your code looks like ^^

1589054250
jwmerrill
You can find out if you want, but it's a lot to read if you haven't already read the book.

1589054447
Barabas
I'm curious, so I'll take a look :)

1589054837
Barabas
Oh, it doesn't look that bad. Just the compiler has a lot of try.

1589055174
jwmerrill
Yeah, it really isn't a problem. Mildly repetetive to type, but I don't mind this kind of repetition because it's easy and represents something important.

1589055883
oats
I also often want to construct an error message string from multiple parts deep down in the call stack, and I need an allocator for that :(

1589055893
oats
doesn't feel super great, I should probably try to come up with a better pattern

1589055929
oats
I wish you could do a tagged-union-like thing with error values

1589055939
oats
like attach a struct to your error value with more info

1589055997
jwmerrill
I also wonder a little bit why you can't attach extra data to errors. Possible it's a performance consideration?

1589056035
jwmerrill
You could do this by returning a datastructure that might have "errors" without actually using Zig's built in error system. Then you can do whatever you want.

1589056046
oats
yeah

1589056063
oats
or when you're doing the oopy thing of an object with methods, keep a field with an optional error struct

1589056091
oats
hrrrrrmmmm

1589056119
oats
This channel is now known as #zig-langdev

1589056333
ifreund
see

1589056416
jwmerrill
oats: if you start feeling too bogged down with these kinds of issues doing the AST interpreter, you should think about jumping ahead to the bytecode interpreter. The design is a better match for Zig's capabilities, IMO.

1589056470
jwmerrill
I'm sure all the difficulties with the AST approach are solvable, though, if you're enjoying the challenge.

1589056889
jwmerrill
ifreund: thanks, interesting read

1589057084
oats
jwmerrill: just gotta give it a bit of extra thunk :)

1589057091
oats
but yeah, I'm mostly just having fun

1589057926
oats
I really like the union(error) solution

1589057933
oats
that seems like a nice simple way of doing things

1589058322
foobles
andrewrk so I am trying to incorporate your idea for 1332, but I don't see how to use ir_create_basic_block_gen

1589058334
foobles
from what I can see, it does nothing to change the ira's current_basic_block

1589058352
foobles
could I do this manually?

1589059808
oats
what happens if you try to free a slice of memory that did not come from the allocator?

1589059814
oats
ie, a stack-allocated slice

1589060025
tdeo
undefined behaviour

1589060032
tdeo
i don't think there's safety for this yet

1589063338
dputtick
Does anybody know of a way to unwrap an optional + error union in one statement? Something like `const arg = arg_it.next(allocator) orelse catch 8 // default value`, except orelse catch is illegal syntax.

1589063463
ikskuh
use parens

1589063470
ikskuh
(x catch y) orelse z;

1589063589
dputtick
ah excellent, ty

1589064047
dputtick
hm, i can't get it to work with the opposite order: (x orelse y) catch z. the return type of x is ?std.process.NextError![]u8, and I'm trying for something like the nice catch syntax for a default value if there are no command line args

1589064077
dputtick
similar to this example

1589064549
Barabas
dputtick use a block with a return value instead of returning the error as in the example. See

1589065036
dputtick
thanks Barabas! works nicely, quite elegant

1589065521
Barabas
you're welcome :)

