1593994813
pixelherodev
oof

1593994820
pixelherodev
andrewrk: do you have the notes?

1593994826
pixelherodev
I can do the implementation if you finished the design ;)

1593994946
andrewrk
are you trying to work on exactly the same thing as me again? :P

1593994960
pixelherodev
except now you said you're not working on it ;)

1593995002
andrewrk
I am now actually

1593995028
pixelherodev
oh huh

1593995030
pixelherodev
good

1593995033
pixelherodev
CBE it is

1593995043
pixelherodev
stupid net split

1593995047
pixelherodev
messing with my logs

1593995161
pixelherodev
ah okay

1593995199
pixelherodev
andrewrk: so I should probably add a CFile next to ELFFile and use that instead?

1593995246
pixelherodev
should there be an Allocator-like interface that goes to both?

1593995304
andrewrk
use your best judgement and let's see what you come up with

1593995383
OmegaDoug40
Hi, does using a c-library require installing a c compiler? Does cross-compiling still work if using c-libraries?

1593995465
andrewrk
OmegaDoug40, the beauty of how it works with zig is that it can cross compile c libraries too. but you have to mess with the build system of the C library to make that work. it will be part of the role of a package manager to help make this easier

1593995580
OmegaDoug40
andrewrk Messing with the c libraries build system sounds like it isn't a "hello world" kind of change for someone who doesn't program in c

1593995596
andrewrk
that's correct

1593995616
andrewrk
in the future the idea is that it will be as easy as adding a package dependency to your build file

1593995622
andrewrk
but we're not quite there yet

1593995779
OmegaDoug40
That's a good goal. Once you achieve that you'll have a fantastically unique feature.

1593995804
pixelherodev
I mean, we could probably add basic e.g. Makefile support straight to the ZBS

1593995808
OmegaDoug40
Are there any docs for how to use c libs?

1593995812
pixelherodev
That might be a nice break from stage2 after CBE

1593995826
pixelherodev
OmegaDoug40: mostly just reading the source, unfortunately

1593995835
pixelherodev
Well

1593995842
pixelherodev
That's true for most docs with the build system

1593995848
pixelherodev
Feel free to ask away on here

1593995853
andrewrk
OmegaDoug40, yeah:

1593995875
pixelherodev
Whoa

1593995877
pixelherodev
When did that happen?

1593995879
pixelherodev
:)

1593995881
andrewrk
years ago

1593995897
pixelherodev
Oh huh

1593995900
pixelherodev
...

1593995906
pixelherodev
I haven't looked in forever

1593995909
pixelherodev
:P

1593995911
pixelherodev
ZLS FTW

1593995977
OmegaDoug40
So when you say mess with the build system of the c-library, do you mean the Zig build system, or c build system (ex: make)?

1593996051
pixelherodev
There's multiple ways to do it, really

1593996062
pixelherodev
You can build a static library using the C build system, and link to it from ZBS

1593996070
pixelherodev
You can build the library using build.zih

1593996072
pixelherodev
zig*

1593996232
pixelherodev
andrewrk: I was asking what interface to use because I don't know what's considered idiomatic anymore :P

1593996493
pixelherodev
I'll just do whatever

1593996497
pixelherodev
The interface can always be changed anyways

1594000260
pixelherodev
Copying the interface used for Scope instead

1594000499
pixelherodev
Internal consistency, and I'm more familiar with it

1594003735
andrewrk
lemmi, I'm curious if you got a chance to try your example from

1594004238
stripedpajamas
what does "function with calling convention 'C' cannot be async" mean? i don't see it mentioned in the docs

1594004295
dimenus
functions with the C calling convention conform to the C ABI, which has no concept of async

1594004366
andrewrk
if you're getting that error it probably means you need to set up your async stuff in main() or something like that

1594004460
andrewrk
stripedpajamas, if you don't mind video as a medium, I go over it a little bit here:

1594004482
stripedpajamas
will watch! thanks

1594004519
stripedpajamas
god the video still shot has my exact trace :o

1594004672
andrewrk
haha

1594004743
andrewrk
ugh, redis labs still kept those videos unlisted. I'm going to mirror them now

1594005571
lemmi
andrewrk: will do

1594005626
andrewrk
lemmi, note that if your ensureCapacity is correct, you should be able to use putAssumeCapacity() rather than `try put()`

1594006910
dimenus
don't look now but JAI is taking 5 seconds to compile a program

1594007288
daurnimator
dimenus: is that good or bad? is it a big program?

1594007428
dimenus
daurnimator: it's more of a joke than anything. He wants everything to compile on the order of 100s of ms

1594007434
dimenus
iirc it's about 100k loc

1594007492
dimenus
Jon is a great programmer but JAI has a lot of complexity compared to zig for example

1594007517
dimenus
life is full of tradeoffs...

1594007553
andrewrk
dimenus, this is with his x64 backend, not llvm?

1594007632
dimenus
i didn't happen to notice what backend it was, the 5s was just the frontend time

1594007671
dimenus
probably debug build

1594007682
dimenus
of the compiler

1594007719
andrewrk
ah ok, so just a joke, not a real data point

1594007869
dimenus
indeed, i'd like to see JAI succeed as well tbh

1594007924
andrewrk
I'm... not sure I can say the same, given that it is proprietary software, with no clear intention of making it open source

1594007950
andrewrk
tbh I'm a little bit put off by blow's attitude toward the open source community in general

1594007976
shakesoda
all i really want is for compiles to be either fast or not needed

1594007985
andrewrk
now that is something I can get behind

1594007987
shakesoda
i have made a lot of engineering choices to this end

1594008031
shakesoda
if jai happens to give us some good ideas to this ends and others in the name of things going faster, great

1594008067
dimenus
andrewrk: does it need to be opensource?

1594008068
daurnimator
shakesoda: what if they have great ideas but the implementation is hidden?

1594008101
shakesoda
daurnimator: usually the implementation itself isn't what i'm interested in

1594008160
shakesoda
daurnimator: more like thoughts i would not have otherwise had - automatic aos-soa transforms are something i don't think i'd have ever thought about if jai didn't bring it up

1594008161
andrewrk
dimenus, I certainly believe so, but I'm not prepared to make a well thought out case at the moment. maybe I can put some effort into that another time

1594008196
shakesoda
just as an example of the kind of idea i mean, just paths i don't think i'd have arrived at any time soon independently

1594008450
shakesoda
something i'd be interested in existing eventually: some alternate zig compiler (perhaps a zig jit or so, that would be very cool)

1594008460
dimenus
andrewrk: fair enough. i don't have strong opinions on this. i'm just curious

1594008469
shakesoda
in the sense that when a language exists in a form that can happen, i'm pretty confident in it being around to stay

1594009063
andrewrk
shakesoda, I agree with you

1594009087
yeti
I wasnt impressed by go, rust, v, and lots of other newcomers.  maybe I'm "rusted to C", but zig got me curious!

1594017643
andrewrk


1594018183
scientes
yeti, go also has the "no implicit control flow" rule

1594018213
scientes
andrewrk, by the encoding of the register name

1594018322
andrewrk
hmm I see, so in this web page, "AL" is just an example, it could be a different register

1594018365
scientes
oh those are immediates

1594018370
scientes
no, but the length of the immediate

1594018405
scientes
yeah that is confusing

1594018415
scientes
x86 multiple-length instructions are really confusing

1594018449
scientes
you have to look at the instruction's bits for the answer to your question

1594018541
scientes
compiler explorer knows this stuff for x86

1594018560
andrewrk
how do you get it to show the bytes?

1594018562
daurnimator
andrewrk: operand-size override prefix

1594018663
daurnimator
andrewrk: IIRC, each code segment has a default register/operand size.

1594018681
daurnimator
andrewrk: if you're in a 32bit segment, then its EAX; if you're in a 16bit segment, then its AX

1594018698
daurnimator
you can use the operand-size override prefix to change.

1594018712
andrewrk
what does it mean to be "in a segment"?

1594018713
daurnimator
so e.g. if you're in a 32bit segment, use 0x66 to swap to 16bit

1594018926
daurnimator
uh; I guess back in early days it actually meant the segment registers? but now I just know it as writing e.g. `.code 16` in assembly....

1594018945
daurnimator
andrewrk:

1594023993
ikskuh
<dimenus> andrewrk: does it need to be opensource?

1594024041
ikskuh
in my opinion: using a closed source toolchain is negligent

1594024058
ikskuh
i have the closed-source-toolchain at work

1594024063
ikskuh
*closed-source-hell

1594024076
ikskuh
oh, you want to read the debug symbols yourself? good luck, pup, there's no documentation on that

1594024090
ikskuh
why would you need to do this anyways? our debugging tools are perfect!

1594025428
scientes
ikskuh, indeed

1594025499
scientes


1594025516
scientes
closed toolchain vs. open toolchain built on top of closed tool chain

1594025524
scientes
*using closed tool-chain as a back-end

1594025535
scientes
(and GCC has basically the same history_

1594026701
ifreund
yeah there's no way I'm using a closed source language

1594032682
lemmi
Sahnvour: thanks for your comment. replacing all modulo operations with bitmasks sped things up by about 30ms

1594032736
lemmi
Sahnvour: and your comment about load factor makes a lot of sense. i rarely saw any probing beyond the first couple elements, if at all.

1594032754
lemmi
i also notices that the map used quite a bit less memory

1594032798
lemmi
so i ran benchmarks without preallocating memory and my impelementation was getting about 10-20% faster compared to the old stdlib hashtable

1594033042
lemmi
and bumping up the load factor near one lets the vectorized version gain a bit on the scalar, but not overtake it

1594033498
scientes
lemmi, on --release-fast?

1594033513
lemmi
scientes: everything on release-fast, yes

1594033523
scientes
hmm, sounds like a optimization bug

1594037041
lemmi
scientes:

1594037084
lemmi
scientes: i have a very hard time figuring out what's what from the disassembly, maybe you can spot something, if you are interested

1594037190
scientes
lemmi, well you said % is the problem

1594037193
scientes
and that should be optimized

1594037319
lemmi
scientes: i don't think the code is written in a way that the compiler could infer that this is always a power of two

1594037327
lemmi
so that's kind of expected

1594037337
scientes
oh ok

1594037571
scientes
lemmi, sounds like an excessive amount of meta-programming if you ask me

1594037672
lemmi
scientes: it kind of is. but otherwise it's hard to toy around with the parameters and the whole point was to see if you could actually write simd in zig without limiting yourself by the current hardware

1594039083
daurnimator
There's a little thing in LinearFifo that does a mod vs bitwise-and change

1594039115
daurnimator


1594045929
andrewrk


1594046013
ifreund
o.O

1594046128
ikskuh
loris is now doing zig.show as a fulltime job

1594046130
ikskuh
:D

1594046269
daurnimator
wow

1594046492
ifreund
very cool news

1594046519
daurnimator
I haven't even had time to watch the last episode yet :(

1594046569
dch
ditto how are we supposed to keep up now :)

1594046752
ifreund
kristoff_it: congrats!

1594046762
kristoff_it
thank you very much!

1594046818
kristoff_it
ikskuh: just to be clear, showtime is still my "sidegig" and I'll work on it when I'm not working for the ZSF. I'll talk more about the precise relationship between the two things (and more) on saturday.

1594046864
ikskuh
hey, spoilers!

1594046875
ikskuh
haven't read the full article yet, but sounds good already

1594046924
BaroqueLarouche
congrats kristoff_it

1594046925
BaroqueLarouche
!

1594046929
BaroqueLarouche
Living the dream!

1594046991
kristoff_it
thanks, we'll see, we need to make the right moves, otherwise it's going to be a short-lived dream, at least when it comes to my ability to work full-time for the ZSF :)

1594047045
BaroqueLarouche
my dream: either doing games in Zig full-time and/or work on Zig full-time

1594047109
ikskuh
kristoff_it: > I will reveal my (until now) secret recipe for a nice summer pasta.

1594047114
ikskuh
that's a daaaamn good incentive :D

1594047131
kristoff_it
yeah I still have to negotiate with andrew the goal we want to put behind it

1594047145
kristoff_it
but I'm going to push for a pretty high one

1594047148
kristoff_it
hah]

1594047154
ikskuh
over 9000!

1594047515
ikskuh
kristoff_it: but nice read, i can relate to that :)

1594048049
kristoff_it
thanks!

1594048136
ikskuh
also, looking forward to sunday :D

1594048177
kristoff_it
Sunday because you're in Australia (or whereabouts), right?

1594048196
ikskuh
nah, german, CET :D

1594048205
ikskuh
i can't let 23:59 be saturday anymore :D

1594048206
kristoff_it
haha ok then that makes sense too :D

1594048295
fengb
Off by 1 minute error

1594048684
kristoff_it
urgh it seems the mods have tanked the lobsters post

1594048697
kristoff_it
went from #2 to the bottom of the page in a blink

1594048753
fengb
You got -2 off topic

1594048757
daurnimator
kristoff_it: care to explain the dig at jepsen?

1594048758
fengb
Not sure why

1594048834
kristoff_it
daurnimator: jepsen and Redis have a long history. the guy is tecnically very correct in all he does, but I think it's no secret his dislike for Redis

1594048873
kristoff_it
and in the end his was just yet another voice that screamed in one specific direction simply because he makes a living out of calling out database companies

1594048874
daurnimator
I can't say I even knew he had an opinion about redis

1594048907
kristoff_it
the problem is the nature of the audits he does: he can only prove stuff it's broken and never that it's correct

1594048945
kristoff_it
and when you mix that with his history with Redis, I think he should very well get one good plate of boogers and cum

1594048948
dch
such is the nature of science. proof by invalidation only requires 1 example.

1594048981
kristoff_it
anyway, it's just part of my explicitly over-the-top analogy

1594048985
kristoff_it
don't take it too seriously

1594050070
Sahnvour
lemmi: cool! what max ratio did you use?

1594050273
Sahnvour
just checked actually, 9/8 it seems

1594050439
Sahnvour
kristoff_it: congrats, taht's a huge milestone for Zig

1594050485
kristoff_it
thanks!

1594050496
kristoff_it
next step: take over the world

1594050519
Sahnvour
I'd be ok with just not having to write c++ anymore, but heh :)

1594050528
lemmi
Sahnvour: this ratio was giving best performance. you can go higher, like 257/256 and ist still works ok, but there is very little point in doing that

1594050619
Sahnvour
yeah, ideally that's something the (advanced) user can control because this is one of many compromises that can be made in a hashmap, depending on your usecase

1594050770
Sahnvour
anyways I have been convinced than most of the recent discourse on hashmaps is about making up for bad hash functions, which is kind of the wrong approach

1594050874
lemmi
possible. but this was a fun project for a zig newbie like me. also this was my first hashmap implementation ever :>

1594050882
Sahnvour
(by recent I mean various blogposts etc. not zig specifically)

1594050956
Sahnvour
sure, i find it gratifying and you didn't go for the easiest one :)

1594051016
lemmi
my guess is another speedup is to be had by using aes instructions for fast hashing like the go implementation does and i need to have a closer look at the new std map

1594051123
scientes
Sahnvour, kyotocabinet is a great database with no press whatsoever

1594051159
Sahnvour
hmm aes-based hash functions are good for large data, but for small keys (main hashmap usage) not so much i think

1594051187
scientes
just use BLAKE3

1594051196
scientes
chacha20-based

1594051257
Sahnvour
these are cryptographic-level, we don't need that for a hashmap (plus they're slower :p)

1594051310
lemmi
no the idea is to just use a single round or two of aes-ni to get something fast and not broken.

1594051319
scientes
Sahnvour, i was saying that aes-based is dumb

1594051361
lemmi
and if not available, there are tons of other suitable noncrypto hashfunctions

1594051377
Sahnvour
that's useful in this case because you can hack the hardware support recent x64 CPUs have to make non-cryptographic hash function that go very fast, this is what lemmi is referring to

1594051403
Sahnvour
this is what meowhash (and others) do lately

1594051443
scientes
kristoff_it, lol, I got zig.party at one point

1594051448
scientes
i think it is about to expire

1594051498
kristoff_it
nice, I don't know how expensive party domains are, but if you have some spare cash, renew it, you can make something with it in the future

1594051517
kristoff_it
zig partytime?

1594051547
kristoff_it
actually Zig Party sounds so much better than ZigConf to me lmao

1594051596
scientes


1594051639
kristoff_it
lmao that title

1594051687
scientes
kristoff_it, the problem what the shitty web site of the register

1594051722
scientes
its load AWS or google cloud

1594051733
scientes
so bloated you need a cloud desktop to view it

1594051795
fengb
Did you reserve zig.party?

1594051826
kristoff_it
you could still transfer it, there's namecheap that supports a bunch of weird top level domains

1594051846
scientes
when the price is $2/year your are limited with reigsters

1594051875
kristoff_it
if it's that cheap you should totally try to renew it :D

1594051889
kristoff_it
if you don't someone else will

1594051898
fengb
Haha I read that as Andrew R.K.

1594051921
kristoff_it
and as zig becomes more popular, that someone might very well be an amazon employee or god knows what

1594051951
kristoff_it
on the topic of making zig popular, anyone got any more of them upvotes for HN? :D

1594051981
companion_cube
what's the post?

1594052013
leeward
^

1594052045
kristoff_it
can't link it, otherwise the vote would not count

1594052066
kristoff_it
but a trick is to try to resubmit the link

1594052070
kristoff_it
acts as an upvote

1594052077
kristoff_it


1594052079
kristoff_it
this is the link

1594052236
jaredmm
When cIncluding a library that imports OS headers causes redefinition errors because of translate-c errors, how would I prevent translate-c from creating that duplicate definition and instead use my own implementation of it?

1594052271
jaredmm
Other than fixing the cause in Zig/translate-c (because I have successfully failed at accomplishing that).

1594052328
ifreund
jaredmm: one way would be to generate the translation manually, then edit the outputted zig and include the zig file in your project

1594052376
ifreund
you can do this with zig translate-c path/to/head.h

1594052414
jaredmm
Hm. I have been manually running translate-c to try to solve the problem but did not consider that. Thanks.

1594052485
ifreund
no problem

1594052744
kristoff_it
aaand here's the aws astroturfer, precise like an atomic watch

1594053110
THFKA4
shills out in full force

1594053117
THFKA4
so uhh are you living off savings now or what?

1594053150
kristoff_it
andrew is investing some good money in allowing me to work for the ZSF

1594053153
fengb
Living off the foundation!

1594053165
THFKA4
sick. the dream.

1594053174
THFKA4
about to take the plunge myself

1594053191
THFKA4
leave a very very comfortable FAANG job in this pandemic

1594053220
THFKA4
uuh yeah i might cut my contribution a bit

1594053288
scientes
kristoff_it, what blows me away the most about them is when they say that AWS is cheap

1594053354
scientes
AWS has

1594053467
kristoff_it
yep

1594053486
kristoff_it
the margins they have over what they sell, especially once you move away from pure compute, are borderline idiotic

1594053512
kristoff_it
which is in part why they can afford to spend equally idiotic amounts of money on astroturfing

1594053517
scientes
the sphere of mind-control goes so far that people were saying that YouTube must be operating at a loss because they use so much bandwidth

1594053523
kristoff_it


1594053532
kristoff_it


1594053542
kristoff_it


1594053544
kristoff_it
etc

1594053552
scientes
even the compute is really expensive

1594053564
scientes
the only reason to use them is that you need AVX-512BW

1594053657
scientes
to test

1594055734
leeward
So, I don't want to be that guy (I don't use AWS personally) but there are other reasons to use them. They just aren't technical.

1594055765
kristoff_it
it should also be noted that if you're big enough they offer fat discounts

1594055774
kristoff_it
especially if you decide to move with them from a competitor

1594055778
kristoff_it
redis labs knows that well too

1594055813
leeward
I used to work at a company that had all its software written in Ada. The CTO was a big fan. By the time they hired me they had rewritten the vast majority in C because they couldn't hire Ada programmers.

1594055859
leeward
AWS certifications are a big deal, and encourage people to use AWS at several levels.

1594056024
fengb
I remember they were one of the blessed services for credit reports

1594056044
fengb
Had to stick with AWS or go through a lengthy audit process

1594056078
marler8997
saw there was a discussion last night about open/closed source.  My two cents, the more experienced I've gotten, then more I've realzied how important it is to have full control of your system, to be able to build/reproduce/debug and make changes anywhere in the system.  If I have a closed source component, it becomes a rigid black box that I can't fix myself, and now I have to rely on others to support it for me.

1594056179
ifreund
100% agree

1594056210
ifreund
I will never use closed source software out of choice

1594056233
leeward
If only software people got to decide what tools to use...

1594056253
leeward
"This chip costs 6 cents less. We're using it."

1594056286
marler8997
There's some open source hardware that's been coming out recently, that's exciting

1594056406
leeward
marler8997: Do you mean like raspberry pi open source hardware or Risc-V?

1594056417
leeward
Or, for that matter, Arduino

1594056418
leeward
?

1594056431
ifreund
pine64 stuff as well

1594056432
marler8997
librem 5 phone

1594056442
leeward
Oh, OpenMoko

1594056446
marler8997


1594056469
ifreund
there's also this awesome looking but expensive laptop:

1594056474
marler8997
been seeing articles about them recently

1594056486
ifreund
i've been longing for a trackball ever since I saw it

1594056505
marler8997
oh yeah that looks cool too

1594056537
ifreund
it also has a legit mechanical keyboard

1594056564
marler8997
ifreund, I just read that !!!!

1594056574
leeward
Wait, their phone isn't an android fork?

1594056586
marler8997
I've spent so much time looking for a laptop with mech keyboard, I've given up

1594056609
marler8997
leeward, if I remember right that's correct, not android

1594056638
leeward
I miss laptops with track balls.

1594056648
marler8997
goodness Android is quite a project, we put it on our products and it was my job to get that working...

1594056690
Sahnvour
too bad the librem doesn't have a ryzen cpu

1594057238
marler8997
I'm half tempted to get one of those MNT laptops, but I think I'm going to have to hold out until there's an open source laptop/PC with a RISC-v CPU

1594059050
leeward
marler8997, re:

1594059190
marler8997
leeward thanks for the link

1594059191
ifreund
imo //// would be the most consistent, but that's arguably too ugly

1594059298
leeward
It may be most consistent, but it sacrifices a lot in readability.

1594059337
leeward
It's easy to tell // from ///, but at //// I have to count to tell if it's //// or /////.

1594059436
ifreund
fair

1594059483
marler8997
I didn't realize this was already implemented

1594059549
leeward
Yeah, that PR was because people keep showing up in here asking about it. Gotta tell people about new features.

1594059568
marler8997
gotcha, carry on

1594060112
pixelherodev
Ooh!

1594060119
pixelherodev
register_allocation branch is nice

1594060123
pixelherodev
coming along nicely*

1594060154
pixelherodev
marler8997: my thoughts exactly

1594060159
pixelherodev
re: laptop *

1594060195
marler8997
what's this register allocation?  link?

1594060206
pixelherodev
register_allocation branch

1594060214
pixelherodev
e.g. `gco register_allocation` in a source tree

1594060216
pixelherodev
`git checkout`*

1594060222
pixelherodev
Sorry, used to abbreviations :P

1594060273
marler8997
says' there's no remote ref named "register_allocation"

1594060280
marler8997
is it in your fork?

1594060329
pixelherodev
no

1594060331
pixelherodev
it's in upstream

1594060335
pixelherodev
git fetch?

1594060347
marler8997
that's what I used, fetch

1594060358
pixelherodev
It's there

1594060361
pixelherodev
Check your remote?

1594060368
pixelherodev
Maybe you're using a fork as your defaulT?

1594060371
pixelherodev
t*

1594060374
marler8997
oh it's a dash, not underscore

1594060378
pixelherodev
Oh

1594060381
pixelherodev
sorry

1594060388
pixelherodev
my bad

1594060408
marler8997


1594060564
marler8997
liveness analysis...is there any github issue that discusses what this is?

1594060665
pixelherodev
- vs _ is a reasonable distinction

1594060671
pixelherodev
marler8997: no

1594060675
pixelherodev
tl;dr:

1594060680
pixelherodev
it determines when a value is alive

1594060681
pixelherodev
and when it's dead

1594060692
pixelherodev
let's say we have e.g. `var a: u8 = blah;`

1594060705
pixelherodev
liveness analysis detects when a is needed, and when it isn't

1594060723
pixelherodev
So if we put a in some hardware register A, we know when we can use A for something else

1594060751
marler8997
is this going to affect semantics from the programmer level at all, or is it just for the optimizer?

1594060931
pixelherodev
Neither

1594060934
pixelherodev
It's for raw codegen

1594060959
pixelherodev
If you don't plan on working on stage2, and aren't interested in internals, you don't need to know this exists

1594060975
pixelherodev
Anyways, working on adding a C test harness to stage2 :D

1594060983
pixelherodev
andrewrk: should the CBE work with ZIR using the same path as Zig?

1594060986
marler8997
oh I see, just an implementation detail for the codegen

1594060993
pixelherodev
marler8997: yeah, basically

1594061002
pixelherodev
Hmm, I think CBE should work at the same level ELFFile does, so yeah

1594061003
leeward
pixelherodev: I'm not saying git shouldn't make the distinction, but it should tab complete branch names and it should also be friendly about typos: "branch X doesn't exist, but x does. Is that what you meant?"

1594061011
pixelherodev
leeward: sure, that's fair

1594061021
pixelherodev
I mean

1594061026
pixelherodev
leeward: it does tab complete branch names for me

1594061031
pixelherodev
But the latter would definitely be useful

1594061034
leeward
Well that's something.

1594061035
marler8997
the term "liveness analysis" reminded me of Walters "liveness" feature for D, where it implements some Rust-like lifetime features

1594061094
pixelherodev
Hmm

1594061098
pixelherodev
Should `pub` fns be non-static?

1594061107
pixelherodev
Main is typically defined as `pub fn main`

1594061117
pixelherodev
So `static void main(void)` would probably not be what we want for instance

1594061152
pixelherodev
Okay, so for the CBE, `main` shouldn't be main

1594061161
pixelherodev
We need to translate `start` as main, effectively

1594061230
pixelherodev
Which makes this a bit more complex than just 1:1 translation

1594061254
pixelherodev
Wait no, we'd be replacing crt0, that's all

1594061306
leeward
pub functions definitely do not map to C's static functions.

1594061325
pixelherodev
That's not what I said

1594061328
pixelherodev
leeward: I said the opposite

1594061330
leeward
I know.

1594061332
leeward
I'm agreeing.

1594061336
pixelherodev
Non-pub functions should be static, pub should be normal

1594061341
leeward
Yes.

1594061350
pixelherodev
Hmm, need to figure out how to translate noreturn

1594061366
pixelherodev
Probably just an assert(false)-esque bit at the end of the function?

1594061383
leeward
GCC uses __attribute__((noreturn))

1594061402
leeward
Probably don't want to go using non-standard compiler extensions though.

1594061428
pixelherodev
Definitely not.

1594061431
pixelherodev
That's a no-go.

1594061437
pixelherodev
Appreciate the input though :)

1594061467
leeward
Ooh, C11 adds <stdnoreturn.h> with _Noreturn.

1594061525
pixelherodev
Huh

1594061537
pixelherodev
So now we need to keep C standard in mind? :P

1594061545
pixelherodev
That's actually a really good idea

1594061547
leeward
We didn't before?

1594061555
pixelherodev
CBE didn't exist before lol

1594061577
pixelherodev
Hmm

1594061590
pixelherodev
According to `catinc stdnoreturn.h`, noreturn is defined as _Noreturn

1594061645
leeward
I maintain a fairly large C code generator that's strictly ANSI C because that's the least common denominator, and it's intended for embedded systems. If we're generating C code that isn't C89, we should probably have a switch for the supported standard.

1594061648
pixelherodev
Now it's just a matter of figuring out unreachables

1594061658
pixelherodev
leeward: that's what I'm doing

1594061665
pixelherodev
Standard

1594061683
pixelherodev
I'm going to use C11 for now, because e.g. noreturn is waaay too convienent

1594061692
pixelherodev
But I'll implement the rest long before this is merged

1594061694
leeward
unreachables are easy. Only allow --release-fast and --release-small, and make them UB. :P

1594061697
pixelherodev
lol

1594061701
pixelherodev
That's not an option

1594061730
leeward
So much for the easy path.

1594061765
pixelherodev
Yeah

1594061957
pixelherodev
`function declared 'noreturn' has a 'return' statement`

1594061958
pixelherodev
Implicit returns

1594062147
pixelherodev
Or

1594062149
pixelherodev
for non-main functions

1594062152
pixelherodev
`'noreturn' function does return`

1594062158
pixelherodev
Needs an explicit `unreachable` of some sort

1594062319
leeward
You know, a working C back end could actually be a path to using Zig in my work stuff. We have qualified C compilers, and generated C code can be audited. It might be horrible though.

1594062342
pixelherodev
My primary goal is for it not to be

1594062353
pixelherodev
I'm writing some test cases explicitly geared towards readable code

1594062359
pixelherodev
e.g. comments will be copied over properly if I have my way

1594062375
pixelherodev
Formatting should be straightforward, and potentially configurable

1594062379
leeward
Oh, I don't mean the generated code would be horrible, just the process of using Zig and auditing every line of C it generates.

1594062384
pixelherodev
Ah, gotcha

1594062400
pixelherodev
I mean, it should be close enough to 1:1 that it shouldn't be necessary

1594062410
marler8997
to catch up, is the plan to create a "C Code Generating Backend", then compile the self-hosted zig compiler to C using that backend, then just maintain that going forward?

1594062416
pixelherodev
marler8997: unclear

1594062422
pixelherodev
I'm working on the CBE because there's general use for it

1594062422
marler8997
ok

1594062430
pixelherodev
That has been floated by Andrew

1594062433
pixelherodev
But it's not remotely set in stone

1594062449
marler8997
I saw another langauge that does this:

1594062498
leeward
Definitely will be necessary, unless we want to qualify the Zig compiler, which is not an option before the language stabilizes and self-hosted is working.

1594062511
pixelherodev
leeward: one option is to just do a from-scratch stage1 in C

1594062525
pixelherodev
I'm personally in favor of a one-time translation to C

1594062530
marler8997
I think he first wrote a "Mirth to C" compiler in python, then wrote his "Mirth to C" compiler in Mirth, then he was done

1594062563
marler8997
he keeps the generated C code commited to his repo, so anyone with a C compiler can bootstrap it

1594062977
pixelherodev
leeward: do you think it's worth tracking extensions too?

1594062989
pixelherodev
there's a GCC / Clang extension for __builtin_unreachable()

1594063007
pixelherodev
It might be worth supporting these types of extensions via flags

1594063043
leeward
Is that part of one of GCC's supported "standards?" Like gnu99? If so, we could just adopt that nomenclature.

1594063056
pixelherodev
Problem is, I also want to support compilers that don't implement them

1594063098
leeward
If you want a compiler that doesn't implement GNU extensions to C99, pick "c99" instead of "gnu99"

1594063147
pixelherodev
I

1594063149
pixelherodev
I'm using that

1594063160
pixelherodev
I've been using `gcc a.c -o a -pedantic -std=c99 -Wall -Wextra -Wshadow -nostdlib` for my tests

1594063167
pixelherodev
(to test ideas for generated code)

1594063175
pixelherodev
The idea here being to

1594063179
pixelherodev
Huh

1594063181
pixelherodev
That's

1594063185
pixelherodev
Actually exactly what we should do

1594063193
pixelherodev
Just add GNU99 to the Standard enum, not just C99

1594063202
leeward
Yes, that.

1594063210
pixelherodev
Yeah, sorry

1594063220
pixelherodev
Still on my second cup of tea ;)

1594063265
leeward
No worries. You might be on to something though: breaking down features more granularly internally might make for cleaner code.

1594063303
pixelherodev
Hmm

1594063352
leeward
`if (features.noreturn) { use_noreturn() } else { append_unreachable() }` instead of checking for standards everywhere.

1594063378
pixelherodev
Cleaner internals

1594063380
leeward
Then there's a single place with a map from standards to featuresets.

1594063402
pixelherodev
yeah

1594063410
pixelherodev
Thanks for the feedback, you've been really helpful

1594063415
leeward
Any time.

1594063430
pixelherodev
Literally?

1594063437
pixelherodev
how about two weeks ago?

1594063439
pixelherodev
;)

1594063444
leeward
Mmm, almost.

1594063462
pixelherodev
Hmm... is noreturn separate from return type in C???

1594063471
pixelherodev
... yep

1594063473
pixelherodev
weiiird

1594063482
leeward
Yeah, tacked-on features.

1594063530
leeward
noreturn int foo(void); // Totally a thing.

1594063596
leeward
In fact, I have the following code in a real repository: `int main(void) __attribute__((noreturn));`

1594063626
pixelherodev
lol

1594063648
leeward
The standard requires main to return int.

1594063655
pixelherodev
Hmm, okay, we want to support building without libc still

1594063671
pixelherodev
So I shouldn't use e.g. assert.h for unreachables

1594063681
pixelherodev
Call a panic function, maybe?

1594063719
pixelherodev
exit(1) for now

1594063730
pixelherodev
Need to translate exit for that, too :P

1594063764
leeward
It still has to use crt though, since it's depending on a C compiler, right?

1594063769
pixelherodev
nope

1594063771
pixelherodev
`-nostdlib`

1594063778
pixelherodev
Same thing you'd do for freestanding

1594063882
leeward
Huh, fun. My AVR thing links to libgcc, but only because it sets up the interrupt vector table.

1594063912
pixelherodev
Does e.g. stdnoreturn.h count as part of libc?

1594063917
pixelherodev
Or is it considered to be part of the compiler?

1594064110
leeward
_Noreturn is built into the compiler, I think anything in a header file is part of the standard library.

1594064133
pixelherodev
Right, which is why I'm using _Noreturn by default

1594064142
pixelherodev
I'm constructing the expected output of the first test

1594064151
pixelherodev
From there, I can expand the test harness, which will show where to expand the internals

1594064185
pixelherodev
... do you have a good example of asm volatile syscalls in GCC?

1594064188
pixelherodev
I freaking hate inline asm

1594064197
leeward
stdnoreturn.h does just use the preprocessor to define noreturn, so it's about where you draw the line.

1594064209
pixelherodev
Which is why I'm defining noreturn manually

1594064210
leeward
At link time, there's no libc

1594064253
pixelherodev
I know :P

1594064260
leeward
There is no such thing as a good example of asm volatile <anything> in GCC. Inline asm in GCC is such a pain.

1594064262
pixelherodev
But the idea is to make it possible to use without the headers

1594064266
pixelherodev
Hence

1594064269
pixelherodev
I want to copypasta

1594064371
leeward
You want to call a syscall or expose one?

1594064407
pixelherodev
Call

1594064412
pixelherodev
I want syscall1, effectively

1594064423
leeward
Why not just call it?

1594064427
pixelherodev
If we can translate inline asm, it makes the basic tests much easier

1594064429
pixelherodev
Because i need it in C

1594064480
leeward
I'm confused.

1594064700
leeward
Does it make sense to make a syscall with -nostdlib?

1594066163
pixelherodev
okay I can't figure out the syscalls lol :P

1594066223
pixelherodev
and now I've got it

1594066228
pixelherodev
just when i complain I couldn't

1594066303
leeward
\o/

1594066319
leeward
It's the ask for directions phenomenon. By the time you ask, you're almost there.

1594066333
pixelherodev
Lol

1594066348
pixelherodev
almost every time I ask for help on IRC, I either figure it out before or just after someone responds

1594066408
pixelherodev
How do I mark a syscall as noreturn? :thinkingface:

1594066562
pixelherodev
Without __builtin_unreachable...

1594067122
pixelherodev
Gah

1594067123
pixelherodev
I don't got it

1594067127
pixelherodev
It's using the wrong register???

1594067539
pixelherodev
Yay! Got it!

1594067541
pixelherodev
Constraints are dumb

1594068422
pixelherodev
Huh

1594068429
pixelherodev
musl uses ` for (;;) __syscall(SYS_exit, ec);` for `unreachable`s

1594068431
pixelherodev
I think I'll copy that

1594068437
pixelherodev
Except no

1594068444
pixelherodev
Hmm

1594068476
pixelherodev
maybe tho

1594068525
leeward
Calling SYS_exit isn't likely to do good things on freestanding or any non-posix.

1594068532
pixelherodev
True

1594068542
pixelherodev
Maybe I should just call an UNREACHABLE function?

1594068549
pixelherodev
Or panic?

1594068555
pixelherodev
@panic("Unreachable") equivalent?

1594068659
forgot-password
Is there any documentation on calling conventions?

1594068666
pixelherodev
Not really, sorta, kinda

1594068677
pixelherodev
LLVM docs currently, for most of em

1594068696
forgot-password
Is `Stdcall` the default one?

1594068762
forgot-password
I just want to export a function for use by another Zig program, so I don't need any c compatibility or anything.

1594068790
leeward
Use the default then.

1594068807
leeward
pub functionToExport() !void

1594068821
pixelherodev
forgot-password: the default is Unspecified

1594068836
pixelherodev
Which is explicitly, well, unspecified

1594068840
pixelherodev
the compiler can do whatever

1594068861
pixelherodev
If you export it, it needs to be specified explicitly IIRC

1594068867
pixelherodev
if it's @import-ed, the compiler handles it for you

1594068884
leeward
Oh, you mean with `export`?

1594068897
pixelherodev
That's what I was referring to

1594068900
pixelherodev


1594068908
pixelherodev


1594069023
leeward
\o/

1594069029
forgot-password
pixelherodev: I'll just chose one then, thank you :)

1594069053
pixelherodev
forgot-password: you're using with Zig stuff, right?

1594069057
pixelherodev
Are you @import ing it?

1594069062
forgot-password
I can't

1594069072
forgot-password
Well I will just import the type definition, but I need to produce a shared library

1594069073
pixelherodev
Shared libraries?

1594069075
pixelherodev
Gotcha

1594069081
forgot-password
Yep ;)

1594069093
pixelherodev
One option is to have the callconv defined by the build system

1594069108
pixelherodev
So you can use e.g. `zig build --callconv blah`

1594069123
pixelherodev
That way, as long as the library and client use the same callconv, you're good

1594069149
forgot-password
It's one codebase anyways, so I'll just have it share the definition

1594069175
forgot-password
Is there a reason to prefer some calling convention above others?

1594069205
forgot-password
over*

1594069246
pixelherodev
fastcc is fastest, coldcc is good for functions that aren't called often, ccc is... only worth it if you want C libraries to work

1594069249
pixelherodev
etc

1594069297
leeward
Someone probably ought to add a callconv section to

1594069342
pixelherodev
Not it

1594069344
pixelherodev
I

1594069349
leeward
Maybe under #Keyword-Reference?

1594069349
pixelherodev
But I'm much better at the actual code

1594069352
pixelherodev
:P

1594069374
leeward
I think until we get a tech writer that will be true of every contributor.

1594069400
forgot-password
I stumbled across ziglearn a few days ago. Looks really promising.

1594069411
forgot-password


1594069430
pixelherodev
I mean, I

1594069434
forgot-password
It's obviously not as in-depth the docs, but it gives a very nice overview

1594069435
pixelherodev
Problem is, I can

1594069443
pixelherodev
and code tends to be more in demand :P

1594069910
pixelherodev
leeward: now for the fun part

1594069918
pixelherodev
I mentioned static earlier: Zig by default does the whole module as one

1594069936
pixelherodev
So should the CBE do that too, and mark everything static? Well, yes and no

1594069956
pixelherodev
It's useful as a default mode for simplistic output, yes, but if you want to actually look at the C afterwards, we need to auto-generate multiple files

1594070000
leeward
#include "module_thing.c"

1594070009
leeward
^abomination

1594070024
pixelherodev
lol, not what I meant

1594070030
pixelherodev
I meant auto-generation of headers and such

1594070049
pixelherodev
so e.g. std.os.exit(1) should result in auto-inclusion of a header std/os.h

1594070058
pixelherodev
and exit would be put into std/os.c

1594070071
leeward
If you wanted to make everything static, that would be a way to do it. Not a good way.

1594070082
pixelherodev
Not everything would be static

1594070086
pixelherodev
Everything non-public would be

1594070091
pixelherodev
Every public would be non-static

1594070099
pixelherodev
(and visible in the header)

1594070103
leeward
Yeah, that's the right way to do it.

1594070110
pixelherodev
That's... what I meant all along?

1594070114
leeward
I know.

1594070129
pixelherodev
"That wouldn't be a good way" -> "that's the right way"

1594070134
pixelherodev
I didn't change what I was saying though :P

1594070149
leeward
Oh, the way I said.

1594070159
pixelherodev
Ahhhh

1594070162
pixelherodev
#include ".c"?

1594070164
pixelherodev
yeah ew

1594070167
leeward
"that wouldn't be a good way" was at something I said, the right way was something you said.

1594070179
leeward
Text: not the best of media.

1594070181
pixelherodev
This'll be harder to conveniently test

1594070195
pixelherodev
Well

1594070200
pixelherodev
Tests could use single-file output

1594070217
leeward
A nice thing that might fall out of this is sensible header file generation. That's one of the things blocking a project I have.

1594070259
leeward
If --emit-h hooked into the C backend, it would be better.

1594070306
pixelherodev
Currently, we don't have that?

1594070309
pixelherodev
Or, not well?

1594070321
leeward
It's...not the best.

1594070322
pixelherodev
leeward: mind taking a look at a sample real quick?

1594070331
leeward
sure

1594070344
pixelherodev


1594070355
pixelherodev
Wait ugh

1594070358
pixelherodev
One sec

1594070360
pixelherodev
that's not right

1594070367
leeward
looks suspiciously familiar

1594070376
pixelherodev
Yeah I know

1594070378
pixelherodev
Wrong thing

1594070380
pixelherodev
Give me ~two minutes

1594070564
pixelherodev
Or not. stupid inline asm

1594070956
pixelherodev


1594070981
pixelherodev
leeward: does that look reasonable for an auto-generated `pub fn main() u8 { return N; }` ?

1594071030
pixelherodev
Actually, some of those calls are marked always_inline

1594071034
pixelherodev
We should do that at the CBE level

1594071333
leeward
That does look reasonable, though most of it probably ought to be in rt.c or something.

1594071373
leeward
Too bad C's "inline" keyword is basically useless. The only effect it has in GCC is to disable the unused warning.

1594071385
ifreund
the order of evaluation for initialization of struct fields is defined right?

1594071414
ifreund
like, I can do this and expect it to work:

1594071458
pixelherodev
leeward: most of it would be in start.c

1594071464
pixelherodev
(for multi-file output)

1594071466
leeward
ifreund: Oof, side effects. I believe I did read something about that.

1594071484
leeward
pixelherodev: Yeah, that looks good then. For single-file output we have to tolerate a bunch of boilerplate.

1594071496
pixelherodev
Most of that would be in std/{start,os}.zig

1594071500
pixelherodev
s/zig/c

1594071515
ifreund
i know this has bit me in C++ before wrt order of evaluation for function parameters

1594071531
pixelherodev
unreachable probably needs to be user-defined for freestanding, but on standard targets we can probably define it as std.os.exit(1) or something like that

1594071534
ifreund
if you use an initializer list in C++ the order of evaluation is well defined

1594071549
pixelherodev
Or, down the line, do the optimizations and remove the unreachable before hitting cgen

1594071584
pixelherodev
The biggest problem here is e.g. never_inline

1594071592
pixelherodev
Can't translate those without compiler-specific extensions

1594071604
pixelherodev
So, by default, they probably shouldn't be translated at all

1594071623
pixelherodev
Going to be volleying a test harness modification patch shortly

1594071628
ifreund
does that actually break anything? or is it just bad for perf

1594071641
pixelherodev
ifreund: hopefully, neither

1594071658
pixelherodev
never_inline can be used if you want to force the compiler to evaluate inline asm without doing anything else

1594071660
ifreund
i mean, there's a reason we have never_inline right?

1594071673
pixelherodev
e.g. on freestanding, to read registers from the firmware before the compiler overwrites them

1594071676
pixelherodev
So yeah

1594071682
pixelherodev
But IMO there should be a better way anyways

1594074525
andrewrk
marler8997, yeah it's just for register allocation, so that the codegen knows when it can re-use registers

1594074547
andrewrk
when an instruction "dies" then it's not referenced anymore, so the stack memory or register it was stored in can be reused

1594074581
andrewrk
I'm pleased with the scheme I came up with to store the results of the liveness analysis

1594074624
andrewrk
nearly free in terms of memory usage, and only requires 1 pass over to compute, which is the theoretical minimum

1594074833
ifreund
sounds quite optimial indeed

1594075884
pixelherodev
Recommended compiler flags will probably end up being along the lines of `-pedantic -std=c11 -Wall -Wextra -Wshadow -nostdlib -nostdinc -fno-builtin -Wno-main` lol

1594075916
pixelherodev
(since we effectively replace libc with zig's stdlib)

1594076049
leeward
So...what happens if I use the C backend to generate a bunch of C code, then zig cc it? I'm not sure what I think should happen, but "smite" is probably involved.

1594076222
pixelherodev
lol

1594076225
pixelherodev
It should compile without issue

1594076240
pixelherodev
Given that zig cc is currently just clang :(

1594076251
pixelherodev
If I eventually get my way and add a CFE, it'll still probably be supported

1594076258
pixelherodev
I can't imagine why it wouldn't

1594076275
pixelherodev
Hmm, C tests need to use a separate harness

1594076282
pixelherodev
They can't partake in the normal update process

1594076832
andrewrk
pixelherodev, are you sure they can't? even if it mean redoing all the work

1594076875
andrewrk
update() just means do the same compilation again

1594076973
pixelherodev
Well, true

1594076975
pixelherodev
Some of it can just be unreachable

1594076986
andrewrk
for a C backend that means just recompile the changed files

1594076987
pixelherodev
I'm not obsessing over this rn

1594076999
pixelherodev
I'm only setting this up so I can use it to work on the actual CBE

1594077007
pixelherodev
This part can be fully redone later if desired

1594077027
andrewrk
yeah this is sort of what I was getting at earlier regarding making "destructive" changes to the code, and then reworking them back in later

1594077038
andrewrk
you saw me do that technique when adding Zig AST->ZIR support

1594077746
ifreund
hmm, why can't I do Foo{ .x = 3 }.methodOnFoo();

1594077795
ifreund
i guess the syntactic sugar isn't quite sweet enough :P

1594077833
ifreund
gotta do Foo.method(Foo{ .x = 3 }) instead

1594078206
fengb
Foo.method(.{ .x = 3 })

1594078250
fengb
I think adding parens makes the method syntax work: (Foo{}).method()

1594078578
ifreund
indeed, adding the parens works

