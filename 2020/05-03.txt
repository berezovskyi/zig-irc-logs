1588464499
joey152
I am getting a compile error with: 1 << i

1588464503
joey152
where i is a u32

1588464513
joey152
error: LHS of shift must be a fixed-width integer type, or RHS must be compile-time known

1588464544
joey152
ive tried @intCast(u32, 1) << i

1588464590
joey152
but I get error: expected type 'u5', found 'u32'

1588464593
ikskuh
yeah

1588464610
ikskuh
zig doesn#t allow you shifting with int sizes that is possible out-of-bounds

1588464627
ikskuh
so you have to use @intCast on your shift distance

1588464680
joey152
oh ic

1588464695
fengb
It’s UB in C. u32 <<32 is a nop on x86, but other archs can clear the register instead

1588464696
joey152
so I'm supposed to cast the i to a u5

1588464721
fengb
Yep

1588464737
joey152
thanks

1588465986
oats
is there only one syntax for tagged enum literals?

1588466004
oats
Enum{ .Variant = foo }

1588466935
andrewrk
async I/O is shaping up

1588466948
chapl
Explain. :D

1588466955
andrewrk
we have behavior tests with --test-evented-io passing on all CI test targets except freebsd

1588466977
andrewrk
it's about time to enable CI testing of async I/O

1588466981
fengb
Oh wow

1588467001
chapl
On all CI test targets... Does that include Windows? IIRC, Windows wasn't initially supported

1588467034
andrewrk
windows has behavior tests passing with evented I/O and file system integration

1588467051
chapl
Wowzers! Good to hear

1588467329
chapl
andrewrk: Would it be reasonable to implement varint and varlong encoding into the std lib? Like, just providing it as neat little batteries included feature?

1588467363
andrewrk
what is that, a big integer implementation?

1588467373
chapl
Fiddling a lot with Minecraft's protocol and I just figured that I have to do a lot of varint encoding

1588467378
chapl
Never heard of VarInts?

1588467407
shachaf
There are a lot of different kinds of varints so if you're implementing some format you'll probably have to reimplement it anyway.

1588467459
chapl
Yeah, there's the protobuf way and something called zigzag. I don't know a lot about VarInts. And I actually don't know what Minecraft uses.

1588467462
ikskuh
yeah, true

1588467472
ikskuh
zigzag will be helpful i think

1588467481
ikskuh
varint is "encode smaller values with less bytes"

1588467509
mikdusan
but what's the largest value?

1588467555
ikskuh
in theory: none

1588467568
ikskuh
for the varint encoding i use in dunstblick it's 32 bit (encoded as 5 byte)

1588467573
mikdusan
ok so bigint that's efficient at the tiny-end

1588467577
ikskuh
but that's just convention

1588467581
chapl
I don't know whether Wikipedia explains it good enough. So I'm just gonna throw this one in here for everyone wondering what varints are:

1588467640
ikskuh


1588467644
ikskuh
here's a good explanation for that

1588467747
ikskuh
mikdusan: the format is especially well suited for any communications

1588467754
ikskuh
as small numbers will always have less bytes

1588467787
mikdusan
sure but how useful is it for locals, globals and fields ?

1588467798
ikskuh
not at all

1588467800
chapl
It's not. It's useful for networking.

1588467812
chapl
It just uses less bytes.

1588467827
ikskuh
i think chapl talked about implementing something like std.mem.writeVarInt()

1588467837
chapl
That'd be nice.

1588467852
chapl
std.mem.writeVarInt(buf) or something like that

1588467866
fengb
There’s a readVarint in debug?

1588467874
fengb
Somewhere weird that I didn’t find it

1588467881
chapl
Where? Can you provide me a link?

1588467919
fengb


1588467962
chapl
I think you're referring to this?

1588467981
fengb
Probably not zigzag though

1588468031
chapl
Is there VarInt encoding with no particular style? We've covered zigzag and protobuf. Is there a 'none'-style? Or is zigzag the canonical?

1588468080
chapl
"LEB128 or Little Endian Base 128 is a form of variable-length code compression used to store an arbitrarily large integer in a small number of bytes. " Interesting

1588468114
chapl
Gonna go ahead and try decode the handshake packet the Minecraft client sends.

1588468290
mikdusan
extra points for making Zero and Ziggy ziguana skins

1588468305
chapl
Yo that'd be dope :D

1588468332
chapl
Implementing a Minecraft limbo server and when you join, you're gonna wear a Ziggy skin!

1588468335
chapl
lol

1588468498
andrewrk
there's a LEB128 decoder in the debug info parser

1588468522
chapl
I'm not familiar with LEB128. Is it another term for VarInt?

1588468558
fengb
Varint is a generic term. LEB128 is a specific algorithm

1588468566
chapl
Oh, alright

1588468569
chapl
Thank you for elaborating

1588468607
fengb
Protobuf’s zigzag is another varint but pretty sure it’s not LEB128 compatible

1588468869
oats


1588468873
oats
huh, just ran into this bug

1588468886
oats
while trying to implement a recursive formatter too

1588469509
oats
yeah, so I've got a recursive data structure for an AST

1588469548
oats
I was trying to implement format() so it could be printed nicely, but on any case that needs to recurse to format a sub-expression, the Semantic Analysis step asplodes

1588469677
chapl
Is there a difference using io.getStdOut().outStream().print() vs std.debug.warn()?

1588469875
andrewrk
quite a few. stdout vs stderr. default evented/blocking mode when async I/O is enabled. whether there is a mutex protecting writes.

1588469904
chapl
Which would you recommend then?

1588469910
chapl
The most canonical one

1588470077
chapl
Like basic output. Like you were doing some form of logs

1588470095
andrewrk
those two things are different use cases: basic output vs logs

1588470103
chapl
Console only

1588470110
chapl
I'd just go with std.debug.warn

1588470112
andrewrk
if you were implementing `ls` or `find` you would use stdout

1588470126
chapl
so io.getStdOut() then

1588470166
andrewrk
you should look into buffering the output as well. there is std.io.BufferedOutStream to help with this

1588470273
chapl
Alright, clarification time. I implementing a limbo server, in Zig, for Minecraft. A limbo server is basically a server you can put players on while they wait for something to happen. Maybe getting moved onto another server, waiting for a queue to dequeue... It's a timeless space where you can basically do nothing. You just wait. I'd like to print incoming packets and whenever a player connects or disconnects.

1588470280
chapl
Now, I'm wondering what to use. Either std.debug.warn or io.getStdOut().outStream().print(). I'm not doing file-based logs. It's console only.

1588470283
chapl
I'm implementing*

1588470341
andrewrk
in this case probably std.debug.warn is appropriate

1588470349
chapl
Alright, thank you!

1588470350
andrewrk
also keep an eye on

1588470361
chapl
Def. will do!

1588470377
chapl
Is there an ETA for this?

1588470385
andrewrk
yes, it's the milestone on the side bar

1588470391
chapl
I just figured that out lol

1588470395
chapl
Sorry

1588470417
chapl
And 'move std.debug.warn to std.log.warn' seems like a really good idea

1588470512
chapl
Now, I noticed that there is something like '@setCold()'. I did read what it does. It marks a function as cold, implying it not getting called frequently. But what does the compiler under the hood? @andrewrk

1588470527
chapl
do under the hood*

1588470533
chapl
I should stop writing that fast

1588472789
foobles
chapl I just read the compiler internals, and it just adds an LLVM  attribute to the function

1588472802
foobles
Attribute::Cold, which is just handled by LLVM

1588472803
chapl
Oh, ok

1588472809
chapl
Thank you!

1588472828
chapl
So. Kinda trivial. When to accept an allocator as argument? I'm having troubles figuring out when to use allocators and when not. I'd like to stick to stack mem but I feel like that's wrong to do. And yes, I know, generally accept an allocator when you're developing a lib. But that's not very helpful.

1588472850
fengb
If you don’t need an allocator, don’t use one

1588472863
chapl
But what's the criteria???

1588472873
fengb
Stack is always better, unless you need to control lifetimes

1588472897
foobles
yeah, any time in other languages where you would use the heap or something

1588472898
pmwhite
yeah, it's not wrong to stick to stack memory if its the best thing to do.

1588472907
foobles
but its better to use stack is possible

1588472915
foobles
and dont use an alloca allocator ;P

1588472917
fengb
Things like returning dynamic data. You can’t return that on the stack

1588472936
fengb
Arbitrary strings, creating things from parsing, etc

1588473009
chapl
I have a struct called NetworkConfig, and it is actually a file which resides in the same directory. It will be read by the server I'm currently implementing. The file uses the JSON format so at some point I have to call readFileAlloc. That's all danty. Now I don't know whether to accept an allocator first hand, when calling the type's init() fn, or when I call let's say readFromFile().

1588473045
chapl
I'm using a page allocator

1588473107
pmwhite
Either way would be fine I think. It depends on whether you want to allow the user of that API to use different allocators on multiple readFromFile calls.

1588473165
pmwhite
If you take the allocator inside init(), then you should probably also have a deinit function that de-allocates any memory that you used during the lifetime of the NetworkConfig object.

1588473232
chapl
The file reading process is the only case where I would need an allocator to be passed. So requiring the allocator when reading the file seems more reasonable

1588473252
pmwhite
If you receive it in readFromFile, then its up to the person who called that file to deallocate the memory, since NetworkConfig will have no idea what allocator was used to allocate each piece of memory, so it will have no idea how to free it.

1588473255
chapl
I don't. I'd like to have a cheatsheet for something like this. But there's none.

1588473259
chapl
I don't know.*

1588473436
pmwhite
There are too many cases to cover for their to be a cheatsheet. I'm no expert here, but my thinking is that experience will give one an intuition for what to do. I think the kind of question you're asking is typical of the kind of problems you have to solve all the time. That is, every situation is going to call for a different solution.

1588473598
pmwhite
I would think the allocator should be received in the init function, since then NetworkConfig can abstract all the memory allocation and deallocation with a deinit function. Otherwise, the caller of readFromFile will have to reach inside the NetworkConfig to deallocate the JSON data itself.

1588473614
chapl
Seems reasonable

1588473619
chapl
Thank you!

1588476262
chapl
pmwhite: Still there?

1588477807
pmwhite
Yeah

1588478908
chapl
It got resolved :D

1588478911
chapl
gtg

1588482870
andrewrk
chapl, have a look at

1588484406
foobles
anyone want to review my PR for optional comparison? #5161

1588484434
foobles
also is this kind of request good practice / frowned upon? i am very new to open-source

1588484594
daurnimator
Is there a workaround for

1588484710
daurnimator
foobles: that's fine. on the PR you can also click on a reviewer at the top right

1588484744
daurnimator
often projects set up multiple "teams" so that you would e.g. request a review from someone in the "stage1" team

1588484754
daurnimator
andrewrk: ^ do you think we're at a point yet where that makes sense?

1588484846
andrewrk
I think github's suggested reviewers feature is quite accurate

1588484889
daurnimator
andrewrk: its accurate... but I always feel a bit odd just picking someone

1588484893
andrewrk
foobles, generally, it's reasonable to repeat a request for review or other attention every so often if you don't get any attention

1588484904
foobles
ok thank you!

1588484910
foobles
very good to know :)

1588484911
daurnimator
and e.g. should you request multiple people? or just one?

1588484985
andrewrk
zig is at the point right now where pull requests have outpaced the available time to spend on merging them. I'm working on getting some funding for more paid full time developers to close this gap, but there will be a period of time now where the number of open PRs grows

1588485005
andrewrk
growing pains

1588485024
foobles
just wait until the `1000+` open PRs :)

1588485045
daurnimator
andrewrk: would you like me to merge PRs that e.g. 1. are for the std library and 2. aren't from myself?

1588485091
andrewrk
let me consider that and get back to you

1588485116
andrewrk
right now your access controls are intended for issue labeling

1588485130
foobles
huh, there are not any suggested reviewers. it's just empty

1588485185
daurnimator
andrewrk: FYI github also supports a special file called "CODE_OWNERS" which lets you specify which files/directories can be approved/merge by which people.

1588485225
andrewrk
foobles, try this: git shortlog -sne -- src/ir.cpp | head -n 10

1588485263
daurnimator


1588485265
andrewrk
you can get even more accurate by limiting to recent commits

1588485300
andrewrk
git shortlog -sne HEAD~300..HEAD -- src/ir.cpp | head -n 10

1588485308
foobles
ah, to get a list of contributors?

1588485326
andrewrk
yeah it sorts by commit counts of commits that touched that file

1588485343
andrewrk
in the last 300 commits

1588485352
foobles
huh, cool

1588485362
foobles
heh, superjoe

1588488311
andrewrk
tbh the easiest workaround is to edit the ir.cpp code to add the coercion

1588488850
chapl
Just before I head to bed: andrewrk, I'm willing to give you 10 bucks on demand via PayPal if you resolve the LEB128 encoding issue in 24 hours. Up for the challenge? :D

1588488925
chapl
Up to the challenge*

1588488941
daurnimator
andrewrk: I was looking for a workaround (e.g. some series of casts) that would allow the code to work with the 0.6.0 release

1588488992
daurnimator
chapl: his bribe-rate is higher than that :P

1588489043
chapl
Man I really need this feature and I don't jack shit about it D: I'd implement it myself but I to dumb for this

1588489051
chapl
I don't know*

1588489057
chapl
I'm

1588489064
chapl
I should really go to sleep

1588489065
daurnimator
chapl: what issue is this?

1588489078
chapl
The one you have assigned the std lib tag to.

1588489095
daurnimator
that's not so much a bug as a feature request

1588489097
daurnimator
I can have a look

1588489111
chapl
Wanna take the 10 bucks? xd

1588489135
chapl
:P

1588489172
chapl
Wowzers. Didn't know this was a thing

1588489200
daurnimator
^ that's how andrew earns his living

1588489214
chapl
"Your sponsorship will not be matched at this time.

1588489214
chapl
"

1588489253
daurnimator
chapl: oh? where did you see that?

1588489310
chapl
On GitHub. I don't know what it's trying to tell me. I can sponsor nevertheless. Gonna sponsor you and andrewrk. Now I know it was a good decision to cancel my amazon prime subscription. :P

1588489436
chapl
(tada) You’re sponsoring daurnimator

1588489647
chapl
(tada) You’re sponsoring andrewrk

1588489649
chapl
Yaayy

1588489754
chapl
Oh and I just noticed, the new Zig logo is now being used! Awesome! Looks real neat

1588489836
chapl
(This should be closed btw. since the relating pull request got merged:

1588489844
chapl
related pull request*

1588489844
chapl
omg

1588490362
chapl
I'm gonna head off and have a little snooze. Cya

1588490670
andrewrk
daurnimator, maybe @as(anyframe, &async foo())

1588490679
andrewrk
that should help it along

1588490707
andrewrk
oh wait... that won't work, you can't coerce anyframe to anyframe->T

1588490758
andrewrk
if you make the error set explicit you can @ptrCast

1588494832
daurnimator
andrewrk: ah ha; updated

1588514934
pmwhite
ya know, zig is pretty well-suited for a wayland wrapper that provides non-trivial value. I'm currently working with the linux-dmabuf interface. To create a wl_buffer, one has to register a listener and send a request. The wl_buffer is received in the listener. A zig interface could suspend when the request is sent, and resume inside the listener.

1588515048
pmwhite
The C API usually uses the `wayland-scanner` program to generate client code for. I bet something similar could be done at comptime directly from the xml file that describes protocol extensions.

1588515499
ifreund
hmm that would be pretty neat

1588515527
ifreund
i know tdeo has been working on a zig implementation of the protocol as well

1588515758
pmwhite
does he got a repo somewhere?

1588515989
ifreund
hmm, did some snooping around on github but couldn't find it

1588518104
blueberrypie7
"This is a bug in the Zig compiler" ... so how do i go about finding the bug i triggered so it can be fixed?

1588518135
blueberrypie7
i suppose i'll need a debug build of zig?

1588518240
alexnask
The stack trace would be useful, otherwise some stripped down testcase that triggers the bug

1588518366
blueberrypie7
i'm working on fixing memory leaks found with "zig test" in

1588518399
blueberrypie7
since i'm not familiar with the code, making a minimal test case might not be so simple

1588518409
blueberrypie7
so i'll build debug zig and see what that shows

1588518479
alexnask
Sure thing, I would suggest you open an issue on github anyway

1588518519
alexnask
People will be able to repro and make minimal testcases anyway. Does the code in question have anything to do with @TagName?

1588518525
blueberrypie7
sure thing, thanks

1588518575
blueberrypie7
what's "@TagName"?

1588518596
oats


1588518606
alexnask
It's a builtin, nvm ;) It's just the only issue currently open with this llvm error

1588518631
blueberrypie7
hmm let me see

1588518668
blueberrypie7
i don't think so

1588518970
alexnask
Hmm it seems to be related to issue #5197 although not triggered by @tagName

1588519423
blueberrypie7
hmmm i'm having trouble building zig from source using my system's packages.  i'll try to build llvm too

1588520005
blueberrypie7
well this is going to take a while

1588520187
alexnask
I'm pretty confident this is another case of #5197, it would be great if you commented there with the code.

1588520229
alexnask
The stack trace won't be that illuminating anyway since this is a codegen bug ;)

1588520314
blueberrypie7
ok i'll see if i can distill the issue

1588520452
alexnask
Thanks, I appreciate it, I will look into this issue later, it looks relatively trivial

1588520567
blueberrypie7
np

1588521370
blueberrypie7
alexnask: ok here's the simplified version. do you think it's the same issue?

1588521515
blueberrypie7
lol llvm is still building

1588521544
tdeo
pmwhite: i don't think a clean request/response stuff happens enough to really have an interface like that

1588521557
alexnask
Oh wow this is worse than I thought :p It looks like the same issue to me yes, some wrong generation of union(enums)

1588521578
blueberrypie7
ok i'll add the code to the issue

1588521608
tdeo
what are you doing with linux-dmabuf though? usually only mesa uses that extension directly

1588521673
tdeo
linux-dmabuf

1588521705
tdeo
and same with dri3 on x11 (also non-nvidia systems...)

1588521754
alexnask
autocad startup is so slow...

1588522448
pmwhite
tdeo: I didn't know it was Mesa-only...I thought that was the case for the wl-drm extension, and that linux-dmabuf was what I was supposed to use instead.

1588522488
tdeo
well, it isn't mesa-only, it's just that usually mesa uses it on behalf of you

1588522550
pmwhite
Yeah, that's what I meant.

1588522925
chapl
I read Mesa and suddenly I think of Black Mesa. Gman's coming for you. Prepare for unforeseen consequences.

1588522929
oats
what's the difference between io.OutStream and fs.File.OutStream?

1588522971
oats
oh wait nvm, silly question :P

1588523673
oats
is it possible to set up an OutStream that writes to a growable string? like an ArrayList(u8)

1588523735
tdeo
ArrayList(u8).outStream() :)

1588523807
pmwhite
tdeo: emersion on the wayland channel has just enlightened me, so now I'm no longer clueless, lol.

1588523893
tdeo
what are you working on with wayland?

1588524001
oats
tdeo: they've thought of (almost) everything

1588524025
fengb
It actually took awhile to add that >_>

1588524158
pmwhite
tdeo: terminal emulator at the moment. I'm also building a weird opinionated GUI library, so I'm just making random widgets when I feel like it. Sort of hoping to make some graphic design tools as well.

1588524178
tdeo
nice, sounds pretty interesting

1588524432
oats
has anyone had trouble writing a recursive .format() function? Mine sends the compiler into an infinite Semantic Analysis death loop...

1588525462
oats
I've got this recursive type representing an AST, and I thought I'd write a .format() pretty printer for it. Trying to compile it though, the compiler seems stuck on the Semantic Analysis step, the numbers growing without end

1588525514
tdeo
i'm not sure if anyone can help without seeing some of the code

1588525656
oats


1588525687
oats
I wonder if the compiler is caught on trying to resolve the type of out_stream somehow or something

1588525741
tdeo
.Negative and .Not from unary are always recursive

1588525747
tdeo
or not?

1588525755
oats
yeah, they're recursive

1588525773
tdeo
nah i misread `self: Expr` as `expr: Self`

1588525779
oats
gotcha

1588525801
tdeo
then assumed since zig doesn't allow shadowing (which is nice) that expr was recursing

1588525821
tdeo
(unconditionally)

1588525846
oats
yeah, I get a bit annoyed sometimes, but no shadowing has saved me from doing silly things more than once

1588525964
blueberrypie7
soo... if i've got a slice of bytes and I know for certain that those bytes the slice refers to can be safely cast to some struct how would i do so?

1588525995
tdeo
@bitCast or @ptrCast

1588526024
blueberrypie7
ah thanks didn't know about ptrcast

1588526088
tdeo
oats: yeah i don't know what's happening here either... it's probably a bug in the compiler

1588526101
tdeo
or

1588526126
tdeo
it really is recursive, because every single format call has to be partially evaluated at comptime

1588526149
tdeo
and every one of those partial evaluations partially evaluates a function that recurses

1588526168
oats
mmmmmm

1588526170
oats
that could be

1588526194
oats
k then, I'll just write my own pretty printer :<

1588526206
oats
469273

1588526212
oats
ignore that :P

1588526227
oats
totally not a misplaced 2fa code

1588526287
alexnask
blueberrypie7, You shoould use a packed struct though, technically the compiler is allowed to rearrange struct fields unless it is extern or packed

1588535251
pltrz
!join #gomux:mautrix.org

1588535271
pltrz
!join  #gomux:maunium.net

1588535519
ikskuh
i think you should use

1588535524
ikskuh
/join #gomux:maunium.net

1588535677
pltrz
oh derp on several levels. sorry for the spam folks

1588535902
sanaris
Hey guys, do you have anything new, something like newsfeed or digest "what's new in Zig"

1588535932
ifreund
sanaris: well there's the changelog every release

1588535977
ifreund
a "this week/month in zig" blog post series would be nice though

1588535999
ifreund
i just stalk the github repo to stay up to date myself

1588536063
andrewrk
it would be a nice service for someone to provide to do a "this week in zig" email or something like that

1588536073
andrewrk
I'm at full capacity, I definitely can't take on this task

1588536164
ifreund
yeah totally understandable

1588536578
sarmonsiill
would be awesome with some kind of letter like that

1588536609
dingenskirchen
there's

1588536645
sarmonsiill
think the way of delivering it is more important than the source. people need it in their inbox or in their rss feed

1588536764
sarmonsiill
people need ease, not more ways of reaching it

1588536780
andrewrk
a good place to start would be sending mail to

1588536857
sarmonsiill
could we put together a group of people interesting in spreading the word perhaps?

1588536992
ikskuh
i thought about that already, but digging through the commits is kinda annoying ☹

1588537017
ikskuh
andrewrk: are you the only one who can push directly to master?

1588537062
andrewrk
everyone with commit access can but generally exercise good judgement

1588549392
dbandstra
what's the easiest way to have an outside script send messages to my zig program (which is an SDL thing with a main loop)?

