1584492458
Bekwnn
hmm, anyone have a good example of building a c program in build.zig?

1584492591
Bekwnn
currently just getting this mix of iob_func, cxa_guard_acquire, cxa_guard_release, and chkstk_ms being undefined

1584492608
Bekwnn
(when trying to use the make file provided with cimgui)

1584492974
andrewrk
Bekwnn, does imgui depend on libc++?

1584493018
andrewrk
if so:

1584493223
shakesoda
Bekwnn: you libc++abi

1584493227
shakesoda
* you need

1584493297
jwh
andrewrk: ah just saw your comment on issue 4682

1584493318
jwh
(zig assumes libstdc++)

1584493423
Bekwnn
hmm, I have mingw but I think it's having difficulty picking up the right files

1584493468
jwh
andrewrk: its abyss in this case (experimental)

1584493469
Bekwnn
I'll check build.zig mentioned in the issue, thanks

1584493787
andrewrk
jwh, what's the correct way to link against c++ on that system?

1584493983
jwh
-lc++ should be enough, clang is built with libc++ as stdlib also

1584493993
jwh
as the default rather

1584496524
andrewrk
hmm, I'm not sure how zig can detect that it should do -lc++ rather than look for libstdc++.a

1584496559
andrewrk
I would have it try the latter and fall back to the former, but that is worse for the use case of e.g. fedora linux where the solution was to install libc++-static package

1584496573
jwh
hm

1584496614
jwh
does clang give any indication of what default it was built with

1584496616
andrewrk
I suppose this is the same problem as detecting the native libc abi

1584496632
jwh
yeah

1584496639
andrewrk
hmm not quite, because a non-native system compiler may have been chosen to build zig

1584496718
andrewrk
jwh, if you don't mind, what does this command do on your system? `c++ -print-file-name=libstdc++.a`

1584496733
andrewrk
where "c++" is whatever c++ compiler you use to build zig

1584496749
jwh
abyss-amd64 [~/m/devel/llvm]# clang++ -print-file-name=libstdc++.a

1584496750
jwh
libstdc++.a

1584496751
jwh
:(

1584496766
andrewrk
that's actually the "we don't have that file" output

1584496770
jwh
oh

1584496793
andrewrk
for comparison, you can try -print-file-name=crt1.o

1584496796
jwh
it should probably be clearer, or at least not exit with rc=0 heh

1584496800
andrewrk
yeah...

1584496830
andrewrk
if I send you a patch can you try it?

1584496847
jwh
sure

1584497028
andrewrk
it would be nice if there was a flag you could pass --tell-me-how-to-link-libc++

1584497046
jwh
yeah

1584497134
jwh
could you get away with just not passing anything?

1584497151
jwh
assuming clang++m that is

1584497164
andrewrk
jwh,

1584497204
andrewrk
this is actually for zig's linker

1584497223
jwh
ahhh

1584497228
andrewrk
which is currently LLD

1584497266
andrewrk
but the point is that it doesn't have any system dependency or interaction (so that cross compiling works correctly) and so this build.zig code has to do the detection

1584497307
andrewrk
it's the correct place for it, since this is where there is an assumption that stage1 is building self-hosted for the native target, rather than in the linker itself

1584497322
jwh
looks good

1584497375
andrewrk
hmm building self-hosted is currently disabled though

1584497384
jwh


1584497465
andrewrk
that's stage1, but stage2 is currently bit rotted, so this didn't actually test it for you. let me fiddle with it for a moment

1584497482
jwh
ah

1584497704
jwh
hm, I got libzigstage2.a and 'zig'

1584498102
andrewrk
that's the hybrid c++/zig stage1 compiler that we currently ship

1584498146
jwh
ah

1584500871
andrewrk
jwh, alright well I have some more serious work to do on the self hosted compiler before we can check ldd on it for you after building it successfully, but I believe the issue is fixed. let's revisit when self-hosted is resurrected

1584501038
pixelherodev
Is the behavior of `allocator.free((try allocator.alloc(T, 2))[1..])` defined or allocator-dependent?

1584501155
andrewrk
that's currently Illegal Behavior. the Allocator interface promises the implementation that the slice pointer and length will be tracked by the client

1584501553
jwh
andrewrk: cool ok

1584501556
jwh
thx

1584501692
Bekwnn
The output here gave me a chuckle

1584501719
Bekwnn
"???:?:?: 0x14000ffff in ??? (imgui_draw.obj)"

1584504169
pixelherodev
andrewrk, thanks!

1584504173
pixelherodev
I figured as much

1584504183
pixelherodev
but also didn't want to overlook an obvious solution

1584540241
mq32
i code C++ at work and i miss "defer" sooo much

1584540294
fengb
I’d miss my sanity :p

1584540421
mq32
ah, hey

1584540425
pixelherodev
I honestly don't hate C++ all that much

1584540426
mq32
i'm insane anyways

1584540428
mq32
:D

1584540430
pixelherodev
I loathe the stdlib though

1584540437
mq32
nah, modern C++ is quite fine

1584540442
pixelherodev
C++ itself is *bad*, but honestly it's not worse than most languages

1584540447
pixelherodev
Most languages suck in different ways

1584540487
pixelherodev
I think the problems with C++ are worse than the problems with a lot of other languages, but the advantages if used properly can be worth the trade ofof

1584540490
pixelherodev
s/ofof/off

1584540501
pixelherodev
I say that as someone who hasn't used C++ in at least a year and sticks to C/Zig whenever possible :P

1584540504
fengb
Have you seen other people’s code? >_>

1584540507
pixelherodev
^

1584540515
pixelherodev
I like to think I can write decent C++

1584540525
pixelherodev
Having seen code written by others who think the same, I'm forced to doubt it

1584540558
mq32
pixelherodev: is this sane code?

1584540559
mq32


1584540569
fengb
All languages have warts. The better ones make them not as apparent

1584540573
mq32
it even uses goto!

1584540579
fengb
C++ has warts in every damn feature

1584540621
fengb
Sure, but then someone else uses a different subset and this don’t work well

1584540630
diginet
C++ is unacceptably gigantic

1584540645
mq32
cpp would require a cleanup of "old features" like C casts

1584540681
mq32
but they don't want to break backwards compatibility

1584540696
mq32
which is a reasonable thing to do, but it makes newer projects carry old stuff

1584540716
mq32
something like "if you define THIS flag, all old stuff will be exlucded

1584540876
pixelherodev
^ that would actually make me consider using it again

1584540894
pixelherodev
For some of my side projects anyways

1584540905
pixelherodev
Gotos ain't fundamentally bad

1584540920
pixelherodev
Nothing is, and convincing people that they are causes problems

1584540938
mq32
pixelherodev: yeah, this is one of the use cases where i consider goto useful

1584540949
mq32
in zig we have named continue which would've solved the problem

1584540977
mq32
i still think about building a libc++ package for zig, so we can easily create crossplatform C++ projects with zig

1584541042
fengb
I used a goto to jump into a middle of a function. It was... kludgy but there’s no proper control flow for that

1584541078
fengb
I needed to skip half of the loop logic for the first iteration

1584541139
pixelherodev
The only times I've needed that, I've had access to an arraylist I could use as an effective counter

1584541147
pixelherodev
So I could just do `if (list.len == 0)`

1584541156
pixelherodev
Or `!= 0`, in this case

1584541243
fengb
Well sure... but I didn't want the logic in my loop body. I also didn't actually analyze the asm output to see what came out >_>

1584542208
diginet
fengb: multi-entry is a common pattern in asm and I've often thought about how you could support that in a structured way

1584542224
diginet
I mean in some sense definitionally that's impossible

1584542246
diginet
but in the looser sense I think it could work

1584547278
pixelherodev


1584547281
pixelherodev
Got Zig compiling :D

1584547287
pixelherodev
(My backend works!)

1584547339
mq32
using CRT, huh? :D

1584547347
pixelherodev
yeah

1584547348
pixelherodev
Not finished yet, and there's ~40 `error.unimplemented`s, along with one or two dozen TODOs

1584547354
pixelherodev
But it freaking works!

1584547363
mq32
hehe

1584547366
mq32
what does it do exactly?

1584547376
pixelherodev
It integrates with build.zig at present

1584547381
pixelherodev
Uses zig to emit LLVM IR

1584547387
pixelherodev
Then it runs on that IR and produces asm

1584547399
pixelherodev
best part is, it's written in Zig

1584547434
pixelherodev
It can lex its own IR, but not parse it (yet), as i'm using an iterative development methodology

1584547439
pixelherodev
Basically, I implement a half-functioning piece

1584547442
pixelherodev
Then implement the pieces that need it

1584547450
pixelherodev
Then improve them one at a time

1584547467
mq32
sounds cool

1584547468
pixelherodev
It's not a good style, but the 40 unimplementeds show why i'm doing it

1584547472
mq32
target platform is x86/64?

1584547479
pixelherodev
If each of those would take five minutes, that's >3 hours

1584547482
pixelherodev
Not yet

1584547486
pixelherodev
That's a future backend

1584547490
mq32
i think iterative development is the only way of doing stuff like this

1584547491
pixelherodev
For now, it's a custom 32-bit ISA

1584547494
mq32
ah!

1584547500
pixelherodev
Next up is z80

1584547504
pixelherodev
Then x86

1584547511
pixelherodev
I also plan on eventually adding a QBE frontend

1584547544
pixelherodev
That would allow bootstrapping `cproc` to the target

1584547634
pixelherodev
Even better would be if I can integrate cproc + QBE with my x86 kernel

1584547641
pixelherodev
and have a compiler baked into the OS

1584547661
pixelherodev
Which would allow for all sorts of neat tricks

1584547684
pixelherodev
IR as the binary form, JIT'd into executables, and optimized for the exact CPU being run

1584547696
pixelherodev
Heck, would be cool to have most of the kernel run like that :D

1584547747
mq32
hrhr

1584547764
pixelherodev
But while each component is simple, the whole is much more complex

1584547771
pixelherodev
So that's probably months off, minimum

1584547773
mq32
would be generally a cool concept to have a kernel JITing LLVM IR executables

1584547785
mq32
so you compile to LLVM ir

1584547794
pixelherodev
Also speeds up compile times (technically)

1584547805
mq32
and you can run the same executables with a AoT-cache on any platform

1584547825
pixelherodev
That's basically what WASM is meant to be, isn't it?

1584547831
pixelherodev
Just with a different "IR?"

1584547844
mq32
kinda

1584547855
mq32
but right now i think nobody AoT-Compiles WASM

1584547907
pixelherodev
Huh, this also enables

1584547925
pixelherodev
As in, strong enough to allow disabling nearly all modern hardware security features

1584547937
pixelherodev
You can examine the IR ahead of time and scan for threats

1584547946
mq32
yep

1584547951
mq32
i'd like to see such OS

1584547951
pixelherodev
The only problem would be e.g. running another VM

1584547964
pixelherodev
But that's not *impossible*, just painful

1584547967
mq32
maybe i should hack together a PoC with wasm3 or something

1584547977
pixelherodev
Maybe detect common VM patterns and reject it at the OS level?

1584547986
pixelherodev
And then require a specific API?

1584548006
pixelherodev
That would be awful though...

1584548033
pixelherodev
The

1584548043
pixelherodev
and those wouldn't even be worth having because they're not good enough

1584548082
pixelherodev
Heck, it doesn't matter if a VM runs; all of the points of escaping the VM still only give you access to what the VM can do

1584548114
pixelherodev
If the only methods to, say, delete a file still require going through a "syscall" that's caught and requires explicit user approval, it doesn't really matter

1584548258
fengb
mq32: you should use wazm instead... if I get around to making it work

1584548528
mq32
do you have a link?

1584548559
mq32
ah wait :D

1584548563
mq32
now i understand

1584550324
Snektron
`const DAS_USABLE = 0x40000000;`

1584550327
Snektron
das not good

1584551083
TheLemonMan
andrewrk, can you check out #4747 when you have some time? that'd unbreak my zig build :\

1584551493
pmwhite
I bet nightly builds could be easily distributed through cachix.org

1584552051
andrewrk
TheLemonMan, sure thing

1584552111
andrewrk
TheLemonMan, btw I reverted a couple lines in 63a4dbc30d3ef3c7f8a8c6a2ba2087eaab8b830a before merging your PR for array abi size, let me know if that's a problem

1584552227
TheLemonMan
oh I wasn't so sure about that, my idea was to just consider the sentinel as an extra element (albeit having a fixed value depending on the type)

1584552289
pmwhite
Just tested uploading a build of a somewhat recent zig build -

1584552300
pmwhite
All someone would have to do is use `cachix use pmwhite`

1584552338
pmwhite
You would have to trust me though, so don't actually do that.

1584552593
fengb
Trust me™

1584552596
andrewrk
I think part of the benefit of hosting builds on ziglang.org is that people already have to trust the language author, so it does not represent additional trust

1584552767
andrewrk
TheLemonMan, oh, I called the wrong Dir function?? goodness, those names are super confusing

1584552782
andrewrk
that API is getting a breaking change pronto

1584552789
pmwhite
That doesn't work for Nix users. Admittedly, that's a small group. I actually forgot that master builds were already available.

1584552800
andrewrk
pmwhite, what doesn't work for nix users? I'm a nix user

1584552917
TheLemonMan
andrewrk, yep, I had to squint really hard to notice the missing O_PATH in the other version

1584552962
pmwhite
I would love to be corrected, because this has been a source of annoyance. As a NixOS user, I can't just download a tarball/binary and build/run it. I have to figure out how to make a Nix file to build it. So a Nix user doesn't get much use out of the releases page from ziglang.org.

1584553033
waleee-cl
pmwhite  there's a zig in nixpkgs, I usually override the version to get a master build

1584553082
pmwhite
With cachix, you could make one at ziglang.cachix.org, and people could do `cachix use ziglang`. The tool signs stuff when you push it to cachix, so people still only need to trust andrewrk if he is the one that signed it.

1584553110
andrewrk
pmwhite, try it :)

1584553119
fengb
That sounds pretty cool actually

1584553136
andrewrk
I challenge you to find a linux distribution for which the ziglang.org tarballs do not work out of the box

1584553176
pmwhite
waleee-cl: I do the same thing, but that requires the minor inconvenience of building zig myself, which is bearable, I guess.

1584553184
pmwhite
okay, I'll try it...I bet you included a default.nix

1584553195
andrewrk
idk what default.nix does

1584553223
andrewrk
it's just correct software that doesn't do unnecessary unportable things, so it works on nixos

1584553264
pmwhite
wait...i guess that makes sense. it's just that nothing else is like that, so I've assumed that isn't possible.

1584553325
andrewrk
the only nixos-specific logic is in the "native system library detection" code, which respects the nix environment variables for where to find libraries

1584553338
andrewrk
that code is necessarily system-dependent

1584553360
andrewrk
and it's not activated for cross compiling

1584553548
pmwhite
well waddya know...the binary just works.

1584553587
pmwhite
i guess dynamic linking is the main problem then.

1584553649
pmwhite
fyi, default.nix is a nix file that you could put in your project so that people can run `nix-build` to build your project in the same way that everything in nix is built. Sounds like it isn't necessary here.

1584553698
andrewrk
I do prefer the cross-platform solution when possible

1584574309
andrewrk
I have the behavior tests passing for #4752 (slicing with comptime start&end results in a pointer-to-array)

1584574325
andrewrk
a few std lib compile errors to look into next

1584574419
andrewrk
this will probably be the last big language-breaking change before 0.6.0

1584574878
daurnimator
andrewrk: breaks just before a release are good

1584574890
daurnimator
though...... introducing new bugs is not

1584574932
andrewrk
there is still 1 month for bug fixes

1584575370
ifreund
pretty exciting

