1592700117
andrewrk
I did some work on zig fmt today (got carried away merging DrDeano's pull request) and now formatting the entire std lib (when it is already formatted correctly and fs cache warmed up) is taking 0.3 seconds on my linux laptop, 0.6 seconds on my mac laptop, and 0.6 seconds on my windows laptop

1592700362
squeek502
nice, i'm assuming you fixed the AccessDenied error on windows? was starting to look into that

1592700618
andrewrk
yeah, about to push

1592700749
Snektron
andrewrk: in the zig compiler, whats the general style for breaking long if conditions?

1592700753
squeek502
cool, should have a PR ready soon afterwards to add `zig fmt` to the cli tests so that these types of zig fmt regressions are tested

1592700754
Snektron
(in the c++ part)

1592700796
andrewrk
squeek502, good call. We have as a sanity check zig fmt run against build.zig, but not against a directory

1592700939
Snektron
and should i add a special error message about -unsigned?

1592701597
andrewrk
your call

1592702297
shachaf
If you're doing a file system traversal thing you don't probably need to stat it, getdents will tell you whether it's a file or directory.

1592702318
shachaf
Oh, but I guess this is about supporting symlinks.

1592702403
shachaf
So maybe you do have to stat it (or probably you can optimistically open and getdents).

1592702506
leeward
Unreachable at ./zig/src/link.cpp:1799 in getLDMOption. This is a bug in the Zig compiler.

1592702508
leeward
Sad trombone sounds.

1592720012
leeward
Is there magic to turning a comptime_int into a *u8?

1592720044
leeward
Never mind, missed @intToPtr

1592721048
leeward
So much for avr support: getting an LLVM error when I try to build a trivial program.

1592721086
leeward
hmm, maybe it's a regression since 0.6?

1592721135
leeward
Well, godbolt thinks so but when I build it myself I get the same error. Tomorrow's problem.

1592732144
andrewrk
I think avr is still experimental within llvm

1592732424
mq32
yeah, AVR isn't fully-featured in LLVM10

1592735251
scientes
I doubt it ever caught up to gcc-avr

1592737497
scientes
but seriously, Z80 is stonger in that market, and otherwise arm-M

1592738060
mq32
scientes: there's a new backend for AVR

1592738077
scientes
but why do people use avr-8?

1592738080
scientes
it is slow and expensive

1592738087
mq32
because they have a nice purpose

1592738089
scientes
z80 is cheap, and arm-M is fast

1592738092
mq32
cheap, simple

1592738098
mq32
z80 has a lot more problems than AV

1592738111
mq32
Also, i've never seen an industrival device since 2000 that is z80

1592738113
mq32
but a lot of AVR

1592738161
scientes
this uses z80

1592738186
mq32
have you ever used z80? or avr?

1592738190
scientes
only avr

1592738196
mq32
AVRs are really great

1592738200
scientes
they are OK

1592738205
mq32
bad for other devices, but electricly near-indestructible

1592738210
scientes
I would prefer arm-M

1592738219
mq32
with the additional complexity?

1592738223
scientes
as arm-M is the same cost

1592738226
mq32
you can get AVRs for cents

1592738233
scientes
and has infinite more capability

1592738242
mq32
6 pin, sot-6 package

1592738263
scientes
mq32, you can get chinese Aarmv7 chips for pennies

1592738280
scientes
probably A53 these days

1592738290
scientes
so even more capable

1592738310
scientes
those things blow avr-8 out of the water, and you can really do anything with them

1592738330
mq32
in all terms? ;)

1592738331
mq32
the point is

1592738335
mq32
computing power is not everything

1592738344
mq32
it's the stuff you usually need at least

1592738346
scientes
yeah, but having a modern compiler environment is nice

1592738354
mq32
avr-gcc isn't bad

1592738364
scientes
but you don't have a timer

1592738396
mq32
timer of what?

1592738478
scientes


1592738504
scientes
in avr-8 you just have to busy loop

1592738511
scientes
and you can't measure time

1592738554
scientes
arm also has in-circuit debugging

1592738559
scientes
it really is way better

1592738611
mq32
serisouly? you have several timers, high precision on AVR

1592738647
scientes
well then the avr code i was working with was total shit

1592738651
mq32
AVR is super-low power consumption

1592738667
mq32
if you haven't read AVR Datasheet for your chip, you haven't written AVR Code

1592738668
scientes
according to this, avr timers is only avr-32

1592738679
scientes
but usually you only have avr-8

1592738682
mq32
the fuck

1592738688
mq32
"Arduino" is not representative for anything near AVR power leevel

1592738704
scientes
I don't see the point of avr-32

1592738706
scientes
just use arm-32

1592738723
scientes
mq32, it wasn't arduino

1592738724
mq32
see here:

1592738726
scientes
but it was shit

1592738734
mq32
that's one of the smallest AVRs you can get

1592738745
scientes
oh ok

1592738746
mq32
4 timers

1592738788
mq32
there's even an attiny with 6 pins, sot-6 package (that's SMD transistor size)

1592738792
mq32
4 I/Os

1592738793
scientes


1592738802
scientes
like that uses a avr-8 with a nice little CAN chip

1592738806
scientes
but the drivers suck balls

1592738819
mq32
just don√Ñ't use drivers on AVR

1592738826
mq32
(or anything embedded, seriously)

1592738844
scientes
no, i'm talking about feeding the can bus to linux

1592738865
scientes
this is the same chips

1592738876
scientes
but they released a JAVASCIPT (no kidding) driver

1592740660
Xavi92
mq32: what about STM8 compared to AVR?

1592740675
mq32
haven't used that yet

1592748023
scientes
gcc has __builtin_shuffle, and clang has __builtin_shufflevector

1592748029
scientes
just because they WANT to be incompatible

1592749287
Xavi92
mq32: gcc does not support STM8, but SDCC + stm8-binutils-gdb can be used instead. The STM8S003F3 is significantly cheaper (0.25 US$) than its AVR competitors

1592752337
blinghound
Is there an equivilant to calloc anywhere? or shall I allocate and then use @memset?

1592752390
blinghound
ah nvm

1592752403
blinghound
does allocator.alloc clear the memory too?

1592752410
daurnimator
blinghound: zero initialising is considered bad in zig. (it only exists for compat with external APIs)

1592752433
blinghound
ok awesome, alloc and then memset?

1592752435
daurnimator
blinghound: in release modes no. in debug modes it sets it to 0xaa

1592752469
daurnimator
blinghound: std.mem.set if you need it.... though why?

1592752556
blinghound
I'm using the freetype library and I want to allocate and zero out to construct a bitmap

1592752574
blinghound
although I could just set to 0 manually as I create the glyphs

1592752684
blinghound
thinking about it now it doesn't really matter if the unused bitmap memory is zero'd out or not

1592752725
blinghound
I'm translating a 40,000ish line c++ project and it's hard to get out of the c/c++ mindset

1592752861
ifreund
that's quite ambitious, what made you decide to switch?

1592753144
blinghound
zig's compile times, @import system instead of #includes, headers and macros, zig's comptime, better error management

1592753150
blinghound
I could go on, I'm in love with zig

1592753186
blinghound
I've translated approx 7000 lines already and it's working beautifully

1592753250
ifreund
yeah I also love zig, always curious to hear what others find most awesome about it

1592753285
ifreund
my personal favorite feature is probably stronger, more granular pointer typing

1592753304
ifreund
though it's not the most exciting or revolutionary thing, it makes writing correct code so much easier

1592753361
gonz_
A lot of the smaller things make me much more confident in my code. Just the basics making you more aware of null in places, switch exhaustiveness checks, overflow awareness, etc.

1592753439
blinghound
exactly. I was writing my own language for a few months to try to fix a subset of the problems I was having with c/c++, but then I found zig

1592753440
gonz_
These are things you can count on for the most part in higher level languages but to have essentially a C these things added is a breath of fresh air.

1592753488
blinghound
I'm kinda fond of the explicit casts too

1592753522
ifreund
yeah, I personally feel kinda icky when using higher level languages that pile on the abstraction or do things like GC.

1592753528
ifreund
i want my code to be optimal

1592753563
ifreund
though quick python hacks certianly have their time and place, i want something serious like C for major projects

1592753603
gonz_
I feel the same way but rather than I want to know what's going on to a much higher degree. I honestly can't tell when a higher level language is going to allocate for the most part, for example, and playing games with the language to see if you can make it fast isn't fun.

1592753653
blinghound
even with c++ that's a big problem in game development

1592753654
gonz_
Ultimately one of the end goals of knowing what's going on is certainly to make it fast if I need to, but also I'd just like to feel like I have more clarity with regards to my code.

1592753701
gonz_
It's almost disturbing that I feel so much more confident reading Zig code than I do in languages that I've read on/off for many years.

1592753720
blinghound
definitely, I can barely read my own c++ template code after a week

1592753740
blinghound
zig's generics solution is the best I've seen in any language

1592753791
blinghound
just wish I had more income to sponsor andrew

1592753823
gonz_
I think Zig has legs on it to some degree, I wouldn't worry too much about it right now.

1592753851
ifreund
yeah, i'm absolutely in love with how zig solved generics. The rules are so simple yet so powerful

1592753855
mq32
<blinghound> zig's generics solution is the best I've seen in any language

1592753856
mq32
true

1592753913
ifreund
I think one of the best things you can do to help out aside from throwing money at andrew is writing non-trivial software in zig

1592753929
ifreund
which it sounds like you're already doing :D

1592753943
gonz_
I was gonna say, this conversion is a few steps in that direction already.

1592754015
blinghound
I'll let the chat know when I release the project I'm working on. It'll be open source too

1592754063
gonz_
Please do :)

1592754123
ifreund
yes for sure!

1592754390
ifreund
oh right, zig showtime is happening again today in like 15min

1592754440
mq32
join the pre-show, talk about italien food!

1592754532
ifreund
vegetable ice creams are italian food?

1592754656
mq32
it seems so

1592754661
mq32
not super common though

1592755152
blinghound
is it on twitch guys?

1592755162
squeek502


1592755193
blinghound
sweet! I haven't seen this show before

1592755217
mq32
then join watching!

1592755361
ifreund
it's pretty awesome. If you're feeling short on zig media, there're also links at

1592756631
gonz_
Uhh

1592756644
gonz_
This might be an odd question, but can we really return slices to stack allocated arrays?

1592756664
gonz_
I mean, returning arrays is safe, right, but slices...?

1592756688
gonz_
I was under the impression that slices were off limits for this

1592756950
ifreund
that sounds like a great way to hit a use-after-free

1592756956
blinghound
do you mean like 'fn returnSlice() []u8 { var arr: [5]u8 = {1, 2, 3, 4, 5}; return arr; }'

1592757025
gonz_
blinghound: `return arr[0..upper_bound]`, but yes.

1592757043
gonz_
It compiles but this feels like I'm just returning an invalid pointer

1592757058
ifreund
yes you are

1592757063
gonz_
The thing about returning an array is that it works, but I feel like this one shouldn't...?

1592757065
blinghound
shouldn't that be a compile error?

1592757073
gonz_
I feel like it should, yes

1592757083
mq32
blinghound: it's a non-trivial analysis feature, but yeah, it should be

1592757086
ifreund
i think it's tricky

1592757124
mq32
cases like this aren't that hard

1592757134
gonz_
But returning `[N]T` is safe, yeah? Since I'm now learning new things all of a sudden, let's confirm this one.

1592757135
mq32
but you have to keep track of local variable assignments for this

1592757147
mq32
gonz_: yes, returning [N]T is a value, not a pointer

1592757152
gonz_
good, good

1592757168
mq32
usually, when you want to return a slice to something, pass the memory in the function itself:

1592757178
mq32
fn foo(backing_buffer: []T) []T { }

1592757182
gonz_
Mhm

1592757230
ifreund
to be clear, a slice is just a special struct with pointer and length fields

1592757243
ifreund
it doesn't hold any of the memory directly

1592757264
gonz_
Mhm, hence my hesitation about this working

1592757268
ifreund
arrays on the other hand are a block of memory of fixed size

1592757284
blinghound
yeah don't you have to pass the backing_buffer by address for that to work?

1592757329
blinghound
hmm I'm confusing myself a bit now

1592757355
mq32
blinghound: slices are just "struct { ptr: [*]T, len: usize }"

1592757359
ifreund
you would call foo with { var buf: [100]u8 = undefined; const my_slice = foo(&buf);

1592757473
blinghound
@mq32 would the function declaration need to be 'fn foo(backing_buffer: *[]T) []T'

1592757474
blinghound
or something

1592757483
blinghound
to pass the actually array memory in

1592757505
blinghound
actually that would be a pointer to a slice

1592757514
mq32
no

1592757522
mq32
you just pass the slice

1592757526
mq32
a slice doesn't contain the memory

1592757530
mq32
it's just a reference/pointer

1592757568
blinghound
ohhh got it

1592758370
dch
is there a dedicated irc|chat for zig.show?

1592758444
ifreund
dch: nope, you can just ask questions in here

1592758486
kristoff_it
yeah, just make sure to @kristoff_it so I don't miss them

1592758495
kristoff_it
:D

1592758521
dch
no worries this is my first live stream with questions. I'm cross-advertising the next segment in elixir slack & irc so want to point people to the right place

1592758537
dch
kristoff_it: sterling job mate curating the community, thanks so much

1592758647
dch
huh iphone app is ~ 30s behind the webpage

1592758677
ifreund
twitch can be kinda weird sometimes :D

1592758697
kristoff_it
dch: thanks!

1592759245
blinghound
is there a way to print an integer as a char?

1592759295
mq32
{c}

1592759412
blinghound
perfect thanks mq32

1592760006
mq32
we have `const foo = @import("generated.zig");`

1592760019
mq32
make a thing that runs a code generator at build time and alows

1592760032
mq32
`const foo = @generate("generator.zig")`

1592760047
mq32
which is a module that returns code on stdout ^^

1592761329
leeward
I know I'm many hours late to the discussion, but I do tend to agree that ARM is a better fit for pretty much everything than AVR these days. I just happened to have an Arduino Uno sitting around and wanted to see if I could get Zig code to run on it. Answer: no; LLVM bugs.

1592761374
leeward
An STM32F0 sips power and can actually (barely) run an RTOS.

1592761461
mq32
leeward: that's imho a non-argument that if an experimental toolchain that doesn't work 100% yet, does not work yet

1592761545
leeward
mq32: I'm not saying AVR isn't good because Zig doesn't build for it. I really like working with them, there just isn't a reason to do it any more.

1592761556
leeward
It's not like I can use Zig at work anyway.

1592761558
mq32
it's simpler

1592761567
mq32
for simpler jobs AVRs are easier to setup and code

1592761576
mq32
using the UART on an AVR is a 4-liner

1592761587
mq32
using it on a arm processor is way more complex to my experience

1592761592
mq32
you have to set up a PLL first

1592761602
mq32
you have to route pins in a more complex way

1592761619
leeward
It is simpler, but cost per unit is usually our biggest concern. If we're only building 1 of a thing then AVR's an option.

1592761646
mq32
first place of cost per unit is currently held by a chinese 6ct microcontroller :D

1592761658
mq32
for for small tasks, the attiny are really cheap

1592761680
leeward
Sure, but I can get a 24 cent Cortex-M0 on digikey where the cheapest AVR is 27 cents.

1592761703
leeward
Oh, and that 24 cents is for 1. The 27 cent ATiny was for 2,500

1592761725
mq32
24ct for attiny10

1592761729
mq32
ah wait

1592761739
leeward
Granted, Digikey doesn't have the best prices, but they're comparable

1592761755
mq32
yeah

1592761757
mq32
i just noticed

1592761763
mq32
interesting that ARM is now even cheaper

1592761769
leeward
They're taking over.

1592761799
dch
what do you use something that small for?

1592761805
leeward
The only stuff I see other processors in is extremely power constrained and specialized, like MSP430s in medical implants.

1592761828
mq32
dch: one (real life) example is the controller for a laser gun

1592761857
mq32
you can do battery management, impulse length, fire modes, maganzine counting

1592761865
mq32
but you don't need a lot of pins or precision for something like that

1592761878
dch
mq32: neat

1592761888
leeward
dch: Things I've worked on that use tiny processors: smart cards, speakers, headphones, medical implants, bootup processors on network equipment, battery powered sensor platforms

1592761911
mq32
pretty much anything that doesn't require high-perf computing or high pin counts

1592761932
mq32
dch:

1592761936
leeward
And anything where cost or power consumption are more important than performance

1592761973
mq32
we have a dual-processor board at our company

1592761989
mq32
one processor is only woken up for communications, the other one is just there to wake up the other one :D

1592762011
leeward
Oh, satellites. Anything in space needs either gigantic transistors or redundancy.

1592762030
dch
cccccclbvubbfbjtkfrtghithevlivccbiiejgkivvjh

1592762043
dch
woops, yubikey

1592762053
leeward
HAX!

1592762057
leeward
Huh? Who said that?

1592762058
mq32
OTPs!

1592762069
mq32
more like yubikeyboard

1592762077
dch
it's the new kitten on the keyboard

1592762081
leeward
hah

1592762174
leeward
Another thing that leads to multiple processors with varying capability is in safety critical systems: less-critical code generally has to be isolated from the more-critical code. One way to do that is with separate processors. Nobody wants to spend huge money or power or board space for that secondary processor that doesn't need it.

1592762252
leeward
At least it's ARM not x86.

1592762317
mq32
yeah or you have medical stuff where both processors agree on what they do

1592762323
mq32
or one surveills the other one

1592762391
leeward
My senior project in school involved 3 ARM processors (made by Intel!) running the same code in lockstep, with an FPGA in the middle to reset the system if one disagreed on where they should be.

1592762531
leeward
Probably should have used simpler processors though. ARM is, as mq32 said earlier, fancy.

1592762546
ifreund
gotta protect against those cosmic rays :D

1592762549
mq32
yeah

1592762557
leeward
ifreund: Exactly.

1592762570
mq32
but: i own a blue pill (STM32) now, just for the sake of doing zig on a embedded platform

1592762608
leeward
I have a complete AVR toolchain set up just waiting for Zig to work.

1592762612
leeward
Back on the shelf, I guess.

1592762641
mq32
haha, same here :D

1592762760
leeward
I guess building Zig for this RPi 1B is as close as I'm going to get for a while.

1592762973
leeward
hmm, I wonder if I could sneak an MSP430 dev kit out of work long enough to get Zig to build something for it.

1592763057
leeward
Mmm, try to build a no-op program for msp430-freestanding-none and "Unreachable at /home/nathan/zig/zig/src/link.cpp:1799 in getLDMOption. This is a bug in the Zig compiler."

1592763065
mq32
haha, is that a problem?

1592763069
mq32
(the sneaking out)

1592763091
leeward
Well I'd have to go into the office, which I haven't done since...March? April?

1592763095
leeward
I don't even know any more.

1592763123
leeward
Gotta get approval from the president to be in the building.

1592764960
leeward
Ooh, got 0.6.0 to assemble something

1592765104
andrewrk
leeward, that "unreachable" sounds like a missing linker feature. if you look at the code it's pointing at it should be fairly obvious what's going on

1592765142
andrewrk
check if lld supports msp430 and what -m flag should be used for it

1592765161
leeward
It's the same error I get with avr; I think I might be passing the wrong arguments somewhere.

1592765207
andrewrk
check the code and you'll see what's going on - it's not your code that is the problem

1592765288
leeward
getLDMOption isn't matching my ZigTarget. It looks like it's not in the list.

1592765305
andrewrk
exactly. but I just looked at LLD source and it looks like they may have added support since that code was written

1592765351
leeward
Well that's nice of it.

1592765360
leeward
I'll see if I can add it and get it to build.

1592765397
andrewrk
you can also pop into #llvm and ask

1592765473
andrewrk
leeward,

1592765530
andrewrk
I don't see msp430 here. I would ask in #llvm what -m flag is expected when making an ELF file for MSP430

1592765571
andrewrk
or - if that architecture does not use ELF, then it means zig should be using a different binary format, or using LLD in some other way, rather than hitting that unreachable

1592766766
leeward
andrewrk: This is some solid documentation: "-m: set target emulation"

1592766793
leeward
No list of allowed values, no suggestion of what target emulation might be.

1592766924
andrewrk
yeah, to use the LLVM project APIs often means reading source code

1592766933
andrewrk
it's not so bad

1592766984
andrewrk
the next step is to find out what should be happening for the msp430 target, then we can figure out where in the toolchain the control flow needs to be modified

1592767001
leeward
also avr

1592767020
leeward
starting with that one, since I can actually test the output with what I have here

1592767515
leeward
Mmm, looks like the avr target is running into issues with usize being 16-bit.

1592767672
leeward
It's not clear why my build is calling std.math.exp2_64, but...that function does not like 16-bit usizes.

1592767779
leeward
whew, that was not the only case

1592768210
leeward
And after all that I end up with "LLVM ERROR: Not supported instr"

1592773301
gonz_
mq32: Your idea about `const module = @generate("./generator.zig");` is intriguing.

1592773335
mq32
oh wow, someone noticed that :D

1592773353
mq32
not sure if i really like it, but i think the basic idea is kinda nice

1592773366
gonz_
It might easily get out of hand, but it's certainly interesting.

1592773383
gonz_
Granted, you could generate code in a build step even now and just import the result, right?

1592773386
mq32
as a lot of people want to generate code with comptime anyways, why not add a facility to generate code with a standard interface

1592773417
gonz_
The standard interface would be nice because at least you can enforce rules, but at the same time the result if normal code generation is also immediately available.

1592773426
gonz_
s/if/of

1592773489
mq32
but something like this could also be included in the zig build system

1592773490
mq32
instead

1592773494
mq32
making it more obvious

1592773511
gonz_
Yeah, I agree.

1592773813
ifreund
I agree, this doesn't need language-level support since it can be done through the build system

1592773838
frett27
ZLS is awesome, thank's alex and august !

1592774005
leeward
^^

1592774058
mq32
yes, indeed. ZLS is really nice

1592774069
gonz_
+1

1592774086
frett27
yep saves me time to dive into zig std lib !! awesome !

1592774126
mq32
still recommended!

1592776420
mq32
pixelherodev: Kristall 0.3 was just releaed

1592776804
blinghound
if I have a function 'fn foo(values: []u8) void'

1592776841
blinghound
what's the best way of coercing a single value to a slice there?

1592776860
blinghound
so I can call 'foo(single_u8_value)'

1592776884
mq32
i think with master, (&ptr)[0..1] is possible?

1592776904
ifreund
foo(&[1]{ value }); should also work

1592776924
mq32
that will not yield a mutable slice though

1592776931
ifreund
indeed

1592776968
blinghound
hmm I'm getting error: slice of a single-item pointer using the (&ptr)[0..1] syntax

1592776980
blinghound
I'm using today's master

1592776992
mq32
you probably need @as([*]T, &v)[0..1]

1592777167
blinghound
that gives me error: expected type '[*]u8', found '*u64'

1592777225
blinghound
sorry, 'found '*u8'

1592777227
blinghound
not u64

1592777253
mq32
ah then it's probably not merged :D

1592777364
blinghound
that might be it then! ;D

1592777378
blinghound
for now I'll just make a slice manually

1592777383
blinghound
cheers guys

1592777463
blinghound
that sounds like a first world problem, making a slice manually, I just thought I could have been missing a shorthand

1592777497
mq32
you can also just pointer-cast that :D

1592777501
mq32
@ptrCast() instead of @as()

1592777527
mq32
@ptrCast([*]T, &v)[0..1]

1592777565
ifreund
can you init slices like structs? e.g. const foo: []u8 = .{ .ptr = &v, .len = 1 };

1592777760
ifreund
no, doesn't look like it

1592777761
blinghound
@ifreund I couldn't get that to work

1592777777
blinghound
@mq32 that works thanks!

1592777852
ifreund
you can also do this, but it's much more verbose

1592777920
ifreund
this PR will make things nicer

1592777977
blinghound
I was only just reading through that issue last night

1592777980
blinghound
already forgot :D

