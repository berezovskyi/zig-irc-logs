1605571839
hlolli
probably a general question on strings, when creating a stream+reader combo for the following "üíØhello" string, I notice that I can't represent that 100 in u8 range, but if I call readInt, I get astronomical values for all the characters. How would I go about reading these values individually as integer?

1605571899
hlolli
correction, I get the high numbers if I call it like this reader.readInt(u32, std.builtin.endian), for u8 I get correct values but not on the first char.

1605572018
companion_cube
üíØ is multiple bytes in utf8

1605572038
companion_cube
you can't look at individual bytes and expect to get a meaningful result

1605572060
fengb
Are you trying to extract numbers from a string? That‚Äôd be std.fmt.parseInt

1605572113
fengb
Oh wait, I thought that emoji was for funsies

1605572121
hlolli
I'm trying to create a simple parser by scanning trough strings, I'm looking for something that would work like java's java.io.StringReader.

1605572130
companion_cube
look at

1605572139
fengb
You‚Äôll need to do proper UTF8 parsing if you‚Äôre working with Unicode

1605572149
companion_cube
you need to iterate at least on codepoints, if not better

1605572161
hlolli
hmm ok ahh nice

1605572198
companion_cube
not sure what java would do there, it's utf16 iirc and emojis might be outside the scope of single char utf16?

1605572259
hlolli
thanks that probably saved me bunch of time. companion_cube: maybe, coming from js/pyhon/java, strings are something that I've never spilled a gray hair over thus far :P (except wasm->js bindings, still easy)

1605572339
companion_cube
you never had a decoding error in python? lucky you üôÉ

1605572427
hlolli
I had that in nginx recently, python was involved indirectly. But I'm more refering to aliging string bytes to array/memory, I know it's doing all that under the hood.

1605572530
companion_cube
python3 makes a difference between string and bytes

1605572535
companion_cube
zig doesn't

1605572557
companion_cube
(but provides some basic functions to manipulate utf16/utf8-encoded strings from the underlying []u8)

1605572679
hlolli
so it's like c, which what I expected of zig, the joke here is on me for not learning low level languages properly after so many years of software development.

1605572732
daurnimator
hlolli: generally you don't need to care about codepoints

1605573199
ugla
it's not easy to make a simple API for unicode. even python3 can be surprising, depending on what you actually want. the len() of a single emoji can be, say, 6.

1605573227
daurnimator
or even 22

1605573243
ugla
swift does a nice job, and just gives you different views of the data, but then you have to know what all those options are and which one you want

1605573277
hlolli
>>> len('üíØ')

1605573277
hlolli
1 # got 1 here

1605573279
ugla
I don't think there's an easier way out

1605573310
ugla
hlolli: try üßõüèº‚Äç‚ôÄÔ∏èÔ∏è or something (if that survives this matrix to irc bridge)

1605573314
daurnimator
likewise you can't just trim unicode codepoints off; take them out of context; or elipsize them without using the correct non-trivial algorithm

1605573330
hlolli
ugla: icelandic?

1605573347
hlolli
>>> len('üßõ')

1605573347
hlolli
1

1605573385
daurnimator
hlolli: that's a different emoji

1605573429
hlolli
true, wtf

1605573436
daurnimator
hlolli: likewise, Ô∑Ω

1605573454
daurnimator
that's a single character that's 22 codepoints wide IIRC

1605573534
ugla
hlolli:

1605573549
hlolli
python says it's 1 :P but yeh, I've read about these wide strings recently in the book "C in nutshell", I guess all the possible chars aren't still occupied, but I know very little about the millions of symbols:)

1605573575
daurnimator
hlolli: your general philosophy should be; don't care. handle strings opaquely

1605573626
hlolli
ugla: I wish I could screen shot what I see in my terminal, I get the sign for women, the black dracula and a box. And indeed, it's 6.

1605573649
daurnimator
hlolli: that'll probably be due to your font

1605573720
hlolli
Very off topic, still interesting. I guess I'll not be the last one to fall into this pitfall. Keeping the Utf8View function in close proximity in beginner tutorials would make sense.

1605573725
ugla
hlolli: yeah, that's how emoji are composed. the box is a "zero width joined" probably. vampire + zwj + female symbol turns into a vampire woman. then you can add skin tone modifiers too, further increasing the len

1605573737
ugla
s/joined/joiner/

1605573893
daurnimator
hlolli: why do you want/need Utf8View?

1605573898
hlolli
also "very off topic" not percise choise of words. I never got deep into irc culture, I see many of my colleagues itching for "threads PLZ" on slack in such a topic :)

1605573986
hlolli
I want to iterate over string character by character. Rewriting some esoteric parsers to learn the language.

1605574010
hlolli
Zig there's to say

1605574055
daurnimator
hlolli: why do you want to iterate over it character by character?

1605574079
daurnimator
(for a parser you likely want to do it char by char)

1605574088
hlolli
the original parser which I'm copying after is doing it that way

1605574089
daurnimator
as in, iterate over it in u8

1605574257
hlolli
that could be but as long as I'm able to create switch statements with signle quote string literals 'üíØ', I'd be good, I don't think I need such atomic view of the bytes. It looks like the iterator built into the utf8 view will cover all characters.

1605574275
justin_smith
hlolli: if you want to operate on unicode, there are unicode libraries (eg. libunistring), I can't tell you which is best though

1605574306
daurnimator
libunistring is good; its where I'd go if I ever need to e.g. line-wrap a unicode string

1605574381
hlolli
not sure that's something I need to achieve, if I can type icelandic characters like √Ü√ñ√ê√ö√Å and german √§√´, I'd be happy enough

1605574402
hlolli
maybe dressing dracula in green jacket as female, I'll have a look around :D

1605574498
pfg_
std.mem.startsWith(u8, the_text, "üíØ") will work too with just a byte iterator, but switch is much easier to use

1605579226
yZ5vlALg86lP
i'm running into this line in my code:

1605579302
yZ5vlALg86lP
i don't really want to set the socket to nonblocking. i just want to regularly return if there is no incoming connection, but i'm ok to have a few seconds timeouts on that...

1605579351
yZ5vlALg86lP
i think of lifting that code and modifying it to my needs. but i suspect others might also run into this, shall i open an issue for this?

1605587208
andrewrk
yZ5vlALg86lP, yes please do

1605587296
daurnimator
yZ5vlALg86lP: SO_*TIMEO aren't generally very useful: they don't work well with any polling schemes

1605587301
andrewrk
daurnimator, re:  #7136 you're not wrong, but like, man, I would rather work on other stuff

1605587328
andrewrk
you mind if I close the issue but PRs welcome to add to the list?

1605587330
daurnimator
andrewrk: `find . -name .zig`. just put them all in there.

1605587364
andrewrk
that's fine by me

1605587367
daurnimator
false positives are fine; you just don't want false negatives.

1605587411
andrewrk
fair enough

1605587711
daurnimator
alternatively, maybe zig could gain a `-MD`-like flag that emits a list of files touched during a build?

1605594498
andrewrk
that wouldn't solve the conditional compilation issue that you just brought up

1605596159
pixelherodev
daurnimator: `find . -name .zig` returns empty list for me - `s/\.zig/\*&/`

1605596161
pixelherodev
:P

1605608771
ask6155
Does zig differenciate between system(kernel) dependant and independant libraries?

1605608788
ikskuh
can you elaborate?

1605608799
ikskuh
i've heard those terms first time today

1605608968
ask6155
I mean If use the standard library, is there differenciation between functions which make syscalls and ones which don't? Or do all functions make syscalls? Can I use the standard library on bare metal?

1605609034
ikskuh
you can use most of the non-i/o stuff of std on bare metal

1605609059
ikskuh
not working is stuff like timers, fs, network

1605609149
ask6155
Yeah but how do I which of the functions can be used? There should be some kind of 'tag' saying this function requires a system in order to function

1605609165
ask6155
*How do i know

1605609231
ikskuh
just use them

1605609238
ikskuh
and if it won't compile, it won't work :D

1605609252
ikskuh
it's a mix of experience and knowledge

1605609306
ask6155
Isn't it better to keep them seperate?

1605609338
ikskuh
if you know that stuff does I/O

1605609338
ikskuh
you can' use it on freestanding

1605609338
ikskuh
but pure algorithms and data structures don't require I/O

1605609463
ask6155
Hmm

1605609511
ask6155
If I make a zig library, how should I distribute it? Just like a c library?

1605609579
ifreund
if you're exporting a C ABI then sure, otherwise just distribute the source

1605609751
ask6155
Yeah but I make a library, put it on github, someone makes a zig program with it by using my source, what if I update my lib? Doesn't he have to download my source again, link to it and check if his program still works?

1605609793
ikskuh
exactly

1605609874
ask6155
Is that... Good?

1605609908
ask6155
I mean... i have to do it for every library I use.

1605609953
ask6155
Also every program that uses the lib has a copy of it in it.

1605609953
ikskuh
yeah, for zig, you reference libs by source

1605609957
ikskuh
no as a binary

1605609966
ikskuh
the same goes for any other system as well ;)

1605609980
ifreund
the best option currently is git submodules imo

1605609991
dutchie
yeah i was about to say most people seem to use submodules atm

1605610006
novaskell
yes since the user may tweak it to their use case, compile with different flags, etc etc. With a binary you can only really link against it and only for what you compiled it for

1605610012
dutchie
i believe the plan is for there to be a better package management story once the self-hosted compiler is done?

1605610014
ifreund
eventually we will need an official manifest format for packages so that the zig build system/package manager can handle versioning

1605610039
ifreund
dutchie: indeed, self hosted is the main blocker for an official package manager

1605610060
ask6155
What about distros? Will there be no dependencies anymore?

1605610060
ifreund
andrew wants the compiler to be fast before people start compiling massive dependency trees

1605610099
ifreund
ask6155: imo zig should make it easy for distros to put zig libs in e.g. /usr/include/zig/

1605610117
ifreund
these would be compile time only dependencies though of course

1605610220
ask6155
I meant if say ubuntu wants to add a zig program to their repo. A binary package.

1605610220
ask6155
They have to get the program's source, source of every dependency, and compile all of it. So basically static linking. They would have to do it for every program. Even if they have the same dependencies, right?

1605610237
ikskuh
ask6155: yes, correctly

1605610242
ikskuh
and it's good this way

1605610259
ask6155
Remind me why people hate static linking?

1605610266
ikskuh
dunno

1605610270
ikskuh
i love it

1605610273
ikskuh
makes stuff painless

1605610281
dutchie
updates are harder, bigger binary size i think are the main complaints

1605610288
ifreund


1605610295
ask6155
Archlinux package devs hate it

1605610305
ask6155
That's why I get no .a files ;(

1605610311
ikskuh
updates are the same level of hard

1605610333
dutchie
i didn't say i agreed with the complaints, only that those are what people normally complain about ;)

1605610352
ikskuh
zig is not

1605610364
ifreund
sure it can, but C ABI only

1605610367
ikskuh
:D

1605610374
ikskuh
well, i consider those C libraries :D

1605610385
ikskuh
the most complaints about "building from source" i hear is that it sucks

1605610387
ikskuh
in general

1605610396
ikskuh
as it's hard, diverse, underdocumented

1605610422
ifreund
the main issues are caused by tooling and crappy build systems

1605610434
ikskuh
yep

1605610441
ikskuh
zig can change that :)

1605610452
ask6155
No the people who use the software don't have to 'build from source' the people who manage the packages have to

1605610463
ikskuh
also people who want to develop stuff

1605610473
ikskuh
joining a zig project is awesome

1605610476
ikskuh
you need zig

1605610480
ikskuh
and usually that's it

1605610531
ask6155
I heard stuff about Go too. How archlinux guys hate it. Is zig similar to that in that sense?

1605610571
ikskuh
dunno

1605610638
ikskuh
and i really don't care

1605610657
ikskuh
i am in favour of including all deps as source

1605610662
ikskuh
as it allows me independency

1605610684
ikskuh
it also allows building stuff everywhere

1605610692
ikskuh
if you depend on system libs, you depend on that system

1605610696
ikskuh
and you might even require it

1605610700
ask6155
What about including c libraries as source too?

1605610704
ikskuh
ye.s

1605610706
ikskuh
*yes.

1605610779
ask6155
The main arguement I hear is that if you link something like openssl and they find a bug in it then they can't just fix it. They have to wait for everyone to fix it.

1605610805
ask6155
*everyone to update their software

1605610807
ikskuh
yes

1605610809
ikskuh
that's true

1605610827
ikskuh
but if you have the openssl source in your source tree

1605610832
ikskuh
you can build that software in 20 years

1605610833
ikskuh
again

1605610835
ikskuh
and fix bugs

1605610844
ikskuh
which might not be true anymore if you depend on externs

1605610897
ask6155
Hmm maybe I should do this

1605610915
ikskuh
it's a problem ignored by a lot of people

1605610932
ikskuh
create

1605610942
ikskuh
only your last USB drive with your stuff on it

1605611059
daurnimator
good luck trying to build an old openssl; it relies on the specific glibc details of those times

1605611097
ask6155
Maybe the static linking problem stems from C and the unlinkable glibc

1605611131
daurnimator
glibc developers encourage dynamic linking so that you can use old applications on new systems

1605611159
ikskuh
daurnimator: i would just not use openssl for several reasons :D

1605611180
karchnu
I still don't quite understand why static linking isn't mainstream nowadays.

1605611181
ask6155
daurnimator: how does that work?

1605611198
daurnimator
static linking tends to be preffered by application developers; dynamic linking by library and system developers

1605611218
daurnimator
karchnu: because then you can't fix a bug in e.g. libc without recompiling programs

1605611240
karchnu
Recompiling a program should not be a problem.

1605611253
daurnimator
open source isn't a given: a huge proportion of software is closed source

1605611307
daurnimator
libc needs a fix? better hope the application developer is willing to pull in the update and rebuild for you.... hopefully they still are in business; if you're lucky they might only charge you a small fee for it...

1605611328
karchnu
daurnimator: sure, but still. You don't find a fully statically compiled OS very often.

1605611344
karchnu
Even in OSS.

1605611352
daurnimator
karchnu: freertos is all statically compiled IIRC

1605611368
ifreund
there's oasis too

1605611392
karchnu
Yep, there are some, but it is really, REALLY underground.

1605611404
daurnimator
karchnu: but note that most OSes don't have a stable ABI apart from dynamically linking libc. linux is the exceptional one for having stable syscalls

1605611441
ifreund
I think the best o both worlds would be statically linking most things and only dynamically linking things like libc and mesa

1605611463
daurnimator
why not e.g. your ssl library?

1605611472
ifreund
yeah that too of course

1605611492
daurnimator
why not your unicode tables?

1605611517
ifreund
I guess your point is that it's hard to draw the line?

1605611553
daurnimator
I think everything with a different lifecycle should be a point of dynamic linking

1605611660
karchnu
daurnimator: having a stable ABI is great for static linking. OS with other kernels should recompile their applications once per release, not a big deal. They already do it.

1605611739
karchnu
And I prefer a program with a behavior that won't change because of a library update.

1605611802
daurnimator
karchnu: so, freebsd has a new release..... users have to wait for e.g. spotify corporation to recompile before they upgrade?

1605611804
karchnu
I think that we are used to dynamic linking to the point that most people would find it heresy not to do so.

1605611854
karchnu
daurnimator: I don't see the connection.

1605611898
daurnimator
karchnu: without dynamic linking or a stable syscall ABI how would closed source applications work with new OS releases?

1605611980
ask6155
I'm still confused... How to manage libraries? Wait for the package manager? Will there be an abi?

1605612014
daurnimator
For now you need to manage libraries manually. within the next year we should have a package manager

1605612033
daurnimator
There may not be an ABI for zig types for a long time; so you'll need to use the C ABI in the mean-time

1605612054
karchnu
daurnimator: you don't have to forbid dynamically compiled libraries to offer statically compiled applications.

1605612055
ikskuh
daurnimator: i don't see an option for zig types to have an ABI in the first place

1605612086
ask6155
Should I then ship my libraries as an .so?

1605612099
ikskuh
if you create C libraries: yes

1605612104
ikskuh
if you create zig libraries: no

1605612111
ikskuh
also: always ship the source

1605612130
daurnimator
if you create zig libraries: you can; but for open source work the convention is to just ship source.

1605612183
daurnimator
we don't yet have a good pattern for zig "headers"

1605612279
daurnimator
ask6155: please don't needlessly take discussions to PM

1605612316
ask6155
Well I didnt know if it would work since I use a transport :D

1605612322
ask6155
Sorry

1605612352
ask6155
You're saying to ship the source. But any program which uses it will have to keep it up to date. But the guys to archlinux said they will never take a program like that... Or something

1605612374
daurnimator
ask6155: you ship your application/library source; and mention your dependencies in the README (as well as potentially using git submodules; and in future whatever package management zig settles on)

1605612384
ifreund
well, they already do for rust programs at least :P

1605612412
ifreund
I think zig can do better than rust/go here though

1605612442
daurnimator
ask6155: packaging for archlinux; they would not use e.g. your vendored dependencies. They will package your dependencies as their own packages.

1605612470
ask6155
Yeah but how would that work?

1605612478
daurnimator
what do you mean

1605612515
ask6155
When I get a library dependency on archlinux, it is actually just a dynamic library

1605612528
daurnimator
ask6155: usually yes; but header-only libraries exist

1605612550
daurnimator
for now (without a stable ABI); zig dependencies would be treated like header-only libraries

1605612591
ask6155
What is a header-only library?

1605612620
ifreund
a library where the full source is in the header

1605612629
daurnimator


1605612645
daurnimator
surprisingly there is a wikipedia article for it

1605612669
ifreund
heh

1605612703
ask6155
Yeah but wha.... i'm confused

1605612961
ask6155
I used to think in context of C/C++ there is a program and a library, package maintainers compile the program and link to a dynlib. They ship this program as a package. Then the compile a dynlib and ship it as a package. On the user side he installs 2 packages and the programs does dlopen() and bada bing bada boom, everything works!

1605612995
dominikh
"and [...] everything works!", that is adorable :P

1605613020
ask6155
Well that's the theory

1605613054
ask6155
How would this happen in the context of Zig?

1605613071
ask6155
Assuming both the program and library are written in Zig?

1605613240
dominikh
everything gets thrown into a single compilation unit, and in the ideal case gets compiled into a static binary

1605613342
ask6155
I hope that is how things go.

1605613342
ask6155
Now I have to go otherwise the phone will die. Bye! o/

1605613409
daurnimator
ifreund: btw did you see

1605613494
earnestly
That is a surprisingly competent pkgbuild

1605613503
earnestly
Oh, you made it, that explains why

1605613538
ifreund
daurnimator: indeed I did, thanks for taking that over

1605613569
daurnimator
ifreund: I'll need to split off zig-wayland into its own package at some point

1605613589
daurnimator
ifreund: how far from a release do you feel you are for river?

1605613621
ifreund
yeah that may end up being trick as zig-wayland generates its source in a function called in river's build.zig

1605613655
ifreund
I want to get river ported to zig-wlroots before releasing so that it builds more portably

1605613679
ifreund
I also want the output-management PR merged as that's the biggest currently missing feature

1605613691
ifreund
the PR is done but needs some more testing/debugging

1605613729
ifreund
after those are done I'll do some cleanup of low hanging fruit and tag a release

1605614525
ikskuh
ask6155: zig packages and c++ libraries are quite similar

1605614539
ikskuh
you need to have both as source and there's no "binary version" of them

1605614745
ifreund
I thought c++ had an ABI no?

1605614763
ikskuh
not one

1605614765
ikskuh
one per compiler :D

1605614769
ifreund
ofc

1605614775
ikskuh
and: you cannot compile templates to binary

1605614778
ikskuh
same problem as comptime

1605614873
daurnimator
we could compile to zir...

1605615022
ikskuh
true

1605615033
ikskuh
but the question is: would we benefit?

1605615043
earnestly
ifreund: If you want to stare into an abyss, look up gcc's Dual-ABI

1605615046
ikskuh
we could apply some optimizations on ZIR level already and ship that‚Ä¶

1605615345
daurnimator
well yes. but that would be assuming ZIR is stable

1605615357
ifreund
earnestly: amazing

1605615391
ifreund
yeah I don't think we want to stablize ZIR

1605615429
alexnask[m]
Just ship C from the C backend :-)

1605616551
ifreund
heh

1605630622
g-w1
since this works, does this mean that an error can automatically coerce to a superset of its set? :

1605630689
dutchie


1605630729
g-w1
thanks, do you happen to know the zir instruction that does this?

1605630923
g-w1
interesting, it seems like ir.cpp:12048 just manually expands the error set

1605639843
andrewrk
daurnimator, I'm happy we got the cmake issue sorted out thanks to johnLate

1605639905
TheLemonMan
isn't cmake itself the real problem?

1605639935
andrewrk
yes, I see cmake as a sub-par solution to the problem of having a cross-platform build script

1605639991
andrewrk
maybe we could make an argument for bootstrapping the compiler only being supported on unixy systems and then we could ditch cmake, and to build zig on windows you would have to download a previous zig binary

1605641151
g-w1
if the first check in an and fails, will the second be evaluated? if (x and b.y(z)) // will b.y be evaluated?

1605641167
earnestly
iow, is and short-circuiting

1605641224
andrewrk
g-w1, no. `and` and `or` are control flow

1605641258
g-w1
thanks

1605644553
dominikh


1605644803
dutchie
is there a way to do @intToEnum without the risk of UB if the int isn't a valid enum value?

1605644832
ifreund
dominikh: probably a bug in stage 1 :/

1605644847
ifreund
dutchie: use a non-exhaustive enum

1605644859
dutchie
it's an enum from a C header

1605644880
dominikh
ifreund: so it shouldn't work?

1605644956
ifreund
dutchie: there's probably an std.meta functions that lets you do the cast while handling failure

1605644977
ifreund
dominikh: afaik no, but we don't have a spec yet so I'm not 100%

1605645076
ifreund
dominikh: related

1605645094
dominikh
assuming it shouldn't work, I have a follow-up question on namespacing and style. I obviously ran into this because I

1605645130
dominikh
interesting, thanks

1605645166
ifreund
that'd be what I'd do here

1605645200
ifreund
I usually only nest struct decls like that when the nested struct is used as one of the fields of the parent and nowhere else

1605645260
dominikh
hm yeah, that might make more sense than what I've been doing. this is me trying to map wlroots APIs to zig

1605645274
dominikh
(and yeah, I'm aware of your efforts on the same)

1605645303
ifreund
you've seen zig-wlroots?

1605645340
ifreund
why do the same work in parallel if I may ask?

1605645344
dominikh
Aye. but I wanted to experiment with this myself, see if I came up with something different. also in part because my own wayland bindings are ever so slightly different

1605645372
ifreund
wasn't aware of your wayland bindings, you have your own scanner impl and everything?

1605645375
dominikh
it's mostly a learning experience and experimentation

1605645378
ifreund
cool

1605645399
ifreund
I'm doing this solely because I want to use the bindings in river

1605645408
dominikh
nah, no scanner etc yet. your work is more ahead in that regard. but I have a type-safe wl_list ;)

1605645425
ifreund
oh? with ABI compatability?

1605645438
dominikh
if I didn't mess up, yeah

1605645442
dutchie
ifreund: ah i'll have a look, thanks

1605645443
dominikh
hold on

1605645457
ifreund
I didn't see a clear way to do that but I have type safe wl_signal and listener at least

1605645476
dominikh


1605645488
dutchie
aha yeah, std.meta.intToEnum is exactly what i want

1605645559
ifreund
dominikh: that looks reasonable, but don't forget that wlroots may set prev/next to NULL

1605645568
ifreund
which would be UB with that impl

1605645644
dominikh
ifreund: that's fair, but arguably it's as UB as accessing the undefined value. you shouldn't be doing anything that reads those fields if wlroots had reason to null them out

1605645684
dominikh
it's not a case of "these might be NULL and I should be handling that" if I am not mistaken

1605645709
ifreund
setting them to null is also useful in some cases

1605645742
dominikh
can you provide an example?

1605645854
ifreund
say you want to check if an element is part of a list or not

1605645897
ifreund
the case where prev == next == self is ambigious, is it a list with one element or a floating element

1605645930
dominikh
it's an empty list, actually

1605646017
ifreund
yeah, though that doesn't really make sense when done to a member of the list not the head

1605646019
dominikh
the way that wl_list is used, anyway. since the list itself is defined by the list head, a sentinel value, and you can't really cut lists in half

1605646039
dominikh
(which is why I have the ListElement alias, to make it clear which fields are lists vs links)

1605646052
ifreund
memberes are set to null/null on removal by libwayland

1605646058
dominikh
that is true

1605646073
dominikh
but since you don't treat members as lists, you don't read those fields when they're null

1605646095
ifreund
I might go as far as to remove iteration/init from ListElement

1605646095
dominikh
i.e. you start traversal from the head sentinel, not from a member

1605646128
dominikh
yeah, that would be more correct

1605646164
dominikh
you'll also notice that my remove function sets next and prev to self. which is‚Ä¶ eh. a good workaround for not having null

1605646186
ifreund
I'd be more inclined to use undefined there

1605646305
ifreund
really though these are bindings to a C API and I think it's important to maintain the same semantics when possible, I wonder if wlroots checks for prev/next == NULL anywhere

1605646317
dominikh
hm. with the way it is now, calling remove more than once on an element is defined and works

1605646357
ifreund
but enough on that, what's cool about your compositor?

1605646453
dominikh
so far nothing, as it's not usable yet :) the first version will be a simple port of my clone of cwm, but after that it'll act as a playground for UI experiments. I'm overall unhappy with modern GUIs and window management and want to build something smarter‚Ä¶ also it's a floating WM, which apparently is a novelty among wayland compositors :P

1605646480
ifreund
heh, hikari and wayfire are both floating-first

1605646492
ifreund
I think there's a fairly far along openbox clone as well

1605646513
ifreund
you might like hikari, it also started off as a cwm clone iirc

1605646608
dominikh
yeah, it's on my list of projects to "take inspiration" from. at the end of the day, I'm mostly writing it for myself, so it'll probably end up as an amalgamation of features.

1605646673
ifreund
nice, I'll be interested to see where you end up in terms of features

1605646707
ifreund
and if you ever feel like using my wayland/wlroots/xkbcommon/pixman bindings let me know if you run into any shortcomings or issues :D

1605646711
dominikh
btw, what's your approach to writing the wlroots bindings? mine's translate-c + a whole ton of manual cleanup

1605646745
ifreund
I mostly just ran translate c on a file then copy and pasted some parts of the output + kakoune magic

1605646762
ifreund
it was a lot more monotonous to write than zig-wayland was

1605646798
dominikh
oh yeah, zig-wayland does still use libwayland, right? you're just replacing the scanner?

1605646815
ifreund
zig-wlroots should have everything I need to port river now though, I'm on to slowly rewriting all of river's code to use it and fixing minor error I find in the bindings along the way

1605646831
ifreund
yeah it's just a scanner + bindings for libwayland

1605646882
dominikh
tbf, the main reason I have my own wlroots bindings is because it's a lot faster to work on those than it is to send patches

1605646906
ifreund
I'm pretty fast at merging trivial stuff usually

1605646919
ifreund
and bindings stuff is generally trivial

1605646938
dominikh
circling back to wl_list, optional pointers do work with the C ABI, so it should be fairly easy to change the wrapper to support NULLs

1605647006
ifreund
yeah, I want to make the one I have in zig-wayland typesafe now having seen yours and split the Head/Element implementations

1605647097
dominikh
at that point I can probably switch to zig-wayland; I haven't done anything else with my bindings yet, other than wl_list and stealing your type-safe signal and listener

1605647116
dominikh
I've been pondering type-safe resource, but that's not really as important, seeing how we use wlroots for most things

1605647140
ifreund
I used opaque pointers for the server side as well as the client side

1605647169
ifreund
I don't have the proper ones everywhere in my wlroots bindings yet though, there's still a lot of wl.Resource where it should be wl.Seat or whatever

1605647183
dominikh
ah

1605647218
ifreund
idk why libwayland didn't do this, it's much easier to keep track of what is what

1605647491
dominikh
fun fact: I made the mistake of writing a pure Go implementation of a wayland client and server, before realizing that wl_drm pretty much forces one to use libwayland (for now, anyway) and that wlroots is quite handy‚Ä¶ so I started learning Zig‚Ä¶

1605647568
ifreund
yeah, zig is pretty much the best option for wayland if you don't want to do C IMO :)

1605647588
dominikh
it looks that way, yeah

1605647611
ifreund
writing a wayland implementation from scratch sounds kinda fun though, but I've been too busy working on river for that

1605647661
dominikh
the protocol isn't all that complex tbh

1605647683
ifreund
no, the wire protocol isn't bad at all

1605650943
dominikh
ifreund: huh,

1605651131
earnestly
(Ada is nice here, case doesn't matter, lol)

1605653041
ifreund
dominikh: yeah, that's a namespace

1605653078
ifreund
(structs without fields are namespaces)

1605653326
dominikh
yeah, I wasn't aware namespaces are lowercase

1605653797
ifreund_
snake_case to be specific, see e.g. std.fs or std.meta or std.os

1605653938
ifreund_
earnestly: case doesn‚Äôt matter in zig either, it‚Äôs just a coding style thing

1605653999
g-w1
rust gives a compiler warning, is this planned for zig too?

1605654083
ifreund_
rust really does that? I hope zig never does

1605654111
ifreund_
zig doesn‚Äôt have warnings only errors so far and I believe the plan is to keep it that way

1605654166
g-w1
so no unused variable warnings, or an error for that instead?

1605654206
ifreund_
I believe an error for that is the plan, but it‚Äôs tricky

1605654206
dominikh
the plan is to make it an error. of course complicated by lazy evaluation right now

1605654212
dominikh
c.f. the multibuild proposal to fix

1605654294
dominikh
what I find unfortunate is that these errors make it harder to work on code and test it as it is being written. for example, you can't just "comment out" code by using an unconditional early return, because then zig complains about unreachable code‚Ä¶ which is great for finished code, not so great during debugging

1605654311
earnestly
ifreund_: No, case doesn't matter.  You can type your code in all caps if you wanted

1605654356
earnestly
Iow, it's case insensitive

1605654383
dominikh
so a variable named foo can be addressed as FOO?

1605654474
earnestly
Yes

1605654484
ifreund_
ew?

1605654506
earnestly
And not only that, but Œî can be written as Œ¥

1605654517
earnestly
ifreund_: It has to work on systems which had no lowercase

1605654536
dominikh
oh right, Ada. for some reason I was thinking of Rust

1605654563
dominikh
would've been shocked if a modern language was case insensitive

1605654565
earnestly
It works beautifully, but you can't use case to signify meaning like Go/plan9 C does with types being capitalised

1605654596
earnestly
It's a shame more aren't insensitive, I think SQL is like that still.  Oh well

1605654646
earnestly
You never end up with nasty things like FooHttpTcp or FooHTTPTCP

1605654661
earnestly
(But you can pick whichever poison you want)

1605654770
ifreund_
well you can‚Äôt throw snake_case into the mix unless it ignores underscores as well (does it?)

1605654838
justin_smith
in clojure there's a "camel-snake-kebab" library to translate cases of identifiers at runtime

1605654884
justin_smith
so your env can have SHOUTING_SNAKE_CASE, normal vars kebab-case, db snake_case, etc. and you can translate between them

1605654935
justin_smith
this comes up because it's common to use hash-maps for everything

1605655695
daurnimator
kebab-case is weird

1605655715
justin_smith
it's normal in lisp, where there's no infix -

1605655733
daurnimator
it's normal in HCL (hashicorp config language) where there

1605655737
andrewrk
dominikh, ifreund: decls can shadow decls. locals cannot shadow anything. ambiguous decl references are not allowed

1605655745
justin_smith
daurnimator: ok that's demented

1605655778
dominikh
andrewrk: what's considered an ambiguous decl reference?

1605655807
andrewrk
const foo = struct { const foo = struct { test "" { _ = foo; };};

1605655843
andrewrk
you would need to use dot syntax to make the reference unambiguous

1605655878
ifreund
andrewrk: thanks that makes sense, can't wait till we have that written up in a spec :D

1605655888
andrewrk
haha same

1605655898
andrewrk
poke SpecsGuy :P

1605655900
dominikh
is that any more ambiguous than the (working) example I showed?

1605655930
dominikh
i.e. the reference to init in line 5

1605655951
g-w1
I have never fully understood a decl, is it just an enum, struct, union, or errorset? or is it something else?

1605655996
ifreund
dominikh: I think that should be allowed, they are all decls

1605656009
andrewrk
dominikh, yeah, here the bug is a missing compile error. You're supposed to have to use Pad.init or Tablet.init

1605656018
dominikh
gotcha

1605656027
ifreund
g-w1: a decl is anything declared at a namespace level

1605656033
g-w1
thanks

1605656134
dominikh


1605656385
ifreund
hmm, does extern struct { foo: extern struct { ... } } have the same ABI as the "inner" extern struct?

1605656393
ifreund
I think it does but I'm not totally sure

1605656423
ifreund
I've also yet to find where the C ABI for structs is actually specified

1605656668
andrewrk
ifreund, yes

1605656689
ifreund
cool

1605656690
andrewrk
you mean like in the C specification?

1605656693
ifreund
yeah

1605656714
andrewrk
I don't know the answer to where it is in the spec either

1605656721
andrewrk
I just know the rules for struct layout by heart now

1605656751
ifreund
I think I actually found the paragraph specifying it for amd64 at least

1605656757
ifreund
in the system V abi spec

1605656767
ifreund
which confirms what you said

1605656882
dominikh
andrewrk: so from what you said about decl shadowing,

1605656929
andrewrk
dominikh, yes

1605656942
andrewrk
I think it's one of the oldest accepted proposals to fix it, just not implemented yet

1605656955
dominikh
well, on the bright side, the shadowing rules are a lot less obnoxious than I thought :P

1605656968
andrewrk


1605657013
ifreund
not as old as #131 :P

1605657525
andrewrk
haha

