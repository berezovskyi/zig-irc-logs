1599155690
andrewrk
klltkr, if you install qemu you should in theory be able to reproduce failures on drone CI

1599155756
klltkr
Ah cool, I'll give that a go

1599162188
ifreund
wow, that msvc CI build has been chugging along for all of four hours now

1599162968
andrewrk
we're right up against the 6hr limit

1599162987
andrewrk
the good news is that most PRs don't need a windows CI pass

1599163010
leeward
ouch

1599163033
leeward
Is it CPU bound?

1599164479
KoljaKube
Using a fluent builder for large C structs in Zig - yay/nay? (Basically I want to know if I'm missing a good/more idiomatic Zig alternative)

1599164510
ikskuh
fluent builder?

1599164574
ifreund
is that the Builder.foo().red(2).green(5).wheels(6) pattern?

1599164575
KoljaKube
const result = SomeStruct.configure().paramA(.OptionX).paramB(.OptionQ).build();

1599164601
ifreund
i think the zig pattern is passing an options struct

1599164632
ifreund
see e.g. std.fs.File.OpenFlags

1599164636
KoljaKube
That's an anonymous struct that gets its set fields copied to the result?

1599164688
ikskuh
KoljaKube: look at std.mem.zeroInit

1599164719
ifreund
you can set default values for all the fields so that to get a "default" struct you just do Foo(.{});

1599164746
KoljaKube
Yeah, I'm using std.mem.zeroes right now, but builder makes it relatively easy to do the Zig->C type conversions inline

1599164753
ikskuh
zeroes != zeroInit!

1599164779
KoljaKube
zeroInit is what I described two lines above, right?

1599164788
ikskuh
kinda :D

1599164832
ikskuh
it initializes all fields with default value or a zero value and overrides the values given

1599164870
KoljaKube
Maybe I didn't express myself well, but I think we mean the same thing

1599164897
KoljaKube
I'm still figuring out how to nicely bridge between Zig and C values

1599164911
KoljaKube
Don't want to @ptrCast or @intCast everywhere on initialization

1599165009
KoljaKube
This stuff is great for finding the not-yet-fleshed-out parts of the compiler btw ;-)

1599169440
dkibi
do I see it correctly, that the zig parser is hand built? is there a reason for that?

1599169494
andrewrk
what's the alternative?

1599169546
ikskuh
dkibi: to my experience, everything else will lead to more problems in the end

1599169563
companion_cube
andrewrk: parser generators

1599169572
ikskuh
i'm super-happy atm that i've rewritten a parser and switched from a generated parser to a hand-written one

1599169577
dkibi
aren't parser generators super common? and there is a PEG grammar in the documentation I thought at first that was used

1599169585
dkibi
this is really just curriosity on my side

1599169591
ikskuh
easier to understand, maintain and it's more convenient to recover

1599169629
andrewrk
companion_cube, shhh, I'm doing socratic method

1599169652
ikskuh
also, andrewrks question is real: do we have parser generators for zig yet? :D

1599169668
companion_cube
you could have written a parser generator

1599169709
andrewrk
a third party parser generator is an additional bootstrapping dependency

1599169732
andrewrk
it also puts some things outside of zig's control such as error messages, memory usage, and how state is stored

1599169735
dkibi
I thought would be the most likely answer ^^

1599169831
andrewrk
anyway I think hand building is the null hypothesis

1599169865
companion_cube
could still be worth having a reference yacc parser, just to make sure the grammar is well behaved

1599169874
companion_cube
(like a typechecker for parsers, really)

1599170098
ifreund
hmm, gpa.create(std.SinglyLinkedList(Session).Node) or gpa.create(@TypeOf(sessions).Node)

1599170129
ifreund
I kinda like the second one but had never considered it before now

1599170934
andrewrk
companion_cube, we have a reference PEG:

1599170998
cr1901_modern
I had a friend help me improve my Zig code... are there any special rules re: using comptime vars with vars that aren't comptime:

1599171022
cr1901_modern
Maybe this is a bad assumption, but I feel like comptime vars should only be allowed to be set via other comptime vars

1599171047
companion_cube
andrewrk: PEG doesn't help you find ambiguities, does it?

1599171054
companion_cube
since it resolves them by order of declaration

1599171068
ifreund
huh, I thought that the std event loop was supposed to work with --single-threaded

1599171141
ifreund
well, looks like it works on master but not 0.6.0

1599171164
leeward
Oh, it's fixed on master?

1599171185
leeward
Last time I tried it, my program never terminated.

1599171196
ifreund
well, I haven't run my program yet :P

1599171201
ifreund
but it compiled

1599171223
leeward
hah, ok

1599171235
ifreund
I don't actually intend for this program to terminate anyhow lol

1599171732
leeward
Well no problem then.

1599172396
andrewrk
ifreund,

1599172404
andrewrk
it's fixed on master? that's news to me

1599172454
andrewrk
--single-threaded event loop not to be confused with std.event.Loop.initSingleThreaded() which still uses threads internally but gives you a single-threaded async/await model to code your application against

1599172509
andrewrk
cr1901_modern, I think your assumption is correct. you may have found a bug

1599172577
cr1901_modern
sweet :D! If I knew what the hell I was doing, then I would make a bug report

1599172653
ifreund
andrewrk: well, it compiles on master and partially works but something fishy is definitely happening

1599172750
ifreund
how do I make it use initSingleThreaded if not by building with --single-threaded?

1599173456
andrewrk
ifreund, that's a great question. I think maybe start.zig is missing a feature that would be handy to get this behavior (by inspecting @import("root") and looking for `i_want_single_threaded_event_loop`)

1599173539
ifreund
yeah it seems that the only option currently is to declare @import("root").event_loop; and write your own custom startup code

1599173550
andrewrk
you can always set it up yourself. the start.zig code for setting up the event loop is not doing much

1599174374
ifreund
I think I'll end up shaving this yak eventually, but not tonight

1599174463
ifreund
single threaded async zig code seems to express what I want my program to do very nicely

