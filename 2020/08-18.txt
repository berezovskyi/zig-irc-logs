1597709859
ronsor
so is zig on ntdll yet?

1597716088
andrewrk
ronsor, almost, there are just a few dependencies on kernel32.dll left

1597716163
andrewrk
ifreund, for elf files we have to close the file so that you can run the executable in between updates. for wasm files this shouldn't be necessary. I think makeFileExecutable can be a no-op and makeFileWritable can also be a no-op for wasm

1597716174
andrewrk
that's why the function is named makeFileExecutable and not closeTheFile

1597716186
andrewrk
"specify intent precisely" :)

1597716515
andrewrk
ronsor, the main thing left is child processes I believe

1597716550
andrewrk
all of std.fs is using ntdll now I believe

1597717143
andrewrk
ifreund, I still need to look into updateDeclExports being called out of order right?

1597717360
pixelherodev
andrewrk: I thought we'd solved that?

1597717375
pixelherodev
updateDeclExports is called

1597717631
andrewrk
ok I think that the only thing that needs to be changed is the doc comment that says it has to be called after updateDecl

1597717641
andrewrk
the elf code has:  if (decl.link.elf.local_sym_index == 0) return;

1597717679
andrewrk
that gets assigned by allocateDeclIndexes

1597718448
daurnimator
oooo; child processes on windows is gonna be fun

1597718457
daurnimator
who wants to go for a forking adventure?

1597718586
andrewrk
I think daurnimator wants to go on a forking adventure

1597718842
daurnimator
so not sure you know the difficulties with windows and forking... or if you want to know

1597718855
daurnimator
but zig is about as best situated for it as any language/runtime can be

1597718865
andrewrk
I don't see any reason to implement fork on windows

1597718885
daurnimator
unique selling point?

1597719330
andrewrk
I just want to execute a child process without heap allocation

1597719413
daurnimator
I'm reminded of

1597725991
andrewrk
ifreund, when I run the wasm test case with wasmtime I don't see any output

1597726005
andrewrk
maybe I have an old version

1597726173
andrewrk
ah yeah I have a really old version

1597733682
andrewrk
I'm kinda bummed about

1597733702
andrewrk
all I want is a way to tell if a file is changed since last time I looked at it. apparently this is too much to ask

1597734527
gonz_
Since I know at least a couple of people were curious in the channel about coding by voice (and likely don't exactly know what they'd expect), I made a video of writing some Zig code:

1597734630
gonz_
It's a very simple program but still a fairly raw experience since it's me thinking while doing it and not just dictating ready-made changes I already know (which is what a lot of demonstrations are).

1597734874
andrewrk
wow those vscode auto completes seem really helpful for this use case

1597734895
KoljaKube
Only a few minutes in, but do you mention the software used?

1597734925
gonz_
Ah, no, I'll put that in the description. The software it's based on is Dragon Professional Individual 15

1597734940
gonz_
Nuance (the company that makes it) hacked Python scripting support into it at some point.

1597734973
gonz_
And I use a base set called dragonfly to script the things I want, like the basic alphabet, ways of saying things (the variable casing types, for example).

1597735069
gonz_
Auto-complete is a huge boon, yes, and zls made this a lot better overall.

1597735219
andrewrk
one thing I'm noticing - I get the impression that you could say a lot more things faster if the latency was smaller. It seems like you spend a lot of time waiting to make sure the system correctly interpreted the instructions before saying the next one

1597735232
gonz_
This is in part configurable

1597735248
gonz_
You can have it spend less time per thing and execute things faster

1597735273
gonz_
Generally it's also that I'm slower at it now than I was before as well.  You can become a lot more efficcient than this.

1597735287
gonz_
You want to batch as many vim operations as you can in one go.

1597735335
gonz_
Though I'll say that when f.e. exploring some API via auto-complete you're unlikely to batch many of them, obviously.

1597735366
gonz_
I think part of it is also me being nervous to some extent.

1597735386
andrewrk
thank you for providing this video, it's very insightful for me

1597735424
gonz_
I should note that OBS adds some latency as well

1597735447
gonz_
Dragon doesn't do super well with this for whatever reason and screen sharing is even worse.

1597735469
andrewrk
my hypothesis is that the latency is CPU-bound

1597735515
andrewrk
"prick" and "slap" are such satisfying names for '.' and \n

1597735533
gonz_
I look at OBS sometimes and it's not really using a ton of anything, not so much that I would think other apps were SoL but there it is anyway.

1597735589
gonz_
Heh, yeah, I used to use "dot" for '.' but switched because sometimes it wasn't unambiguous enough and I needed something very clear.

1597735603
gonz_
"prick" also means "dot" in Swedish, so it was oddly appropriate as well.

1597735636
gonz_
"slap" I stole from a guy that did an excellent coding by voice talk at PyCon which is where I saw this the first time.

1597735639
andrewrk
am I correct in understanding that the vim key bindings for vs code are pulling a lot of weight here?

1597735650
gonz_
In that they enable it, yeah.

1597735685
andrewrk
idea being that "keyboard golf" is now promoted from a game into the most practical way to input

1597735709
gonz_
You really need a strong way to control things by keyboard and to string things together, so vim is probably the way you want it to work.

1597735749
gonz_
With that said you can make your own commands that string together other things in editors. This is just a much better way to get started and base your thinking on if you know vim.

1597735762
andrewrk
I see

1597735836
gonz_
Lots of people have had success using emacs and making their own thing out of it there, though, and there are deep programming language-specific things you can get into.

1597735869
gonz_
I've gone more for a vim base for everything and on top have made language layers. Zig is the first language I've (almost) emptied out my language layer for in favor of snippets.

1597735919
gonz_
It used to be that I said "while" and it immediately just output an entire while loop with some anchor characters I could jump to and change.

1597735970
gonz_
This makes the voice bits a bit more fluid sometimes, but you have to put manual sleeps in there if you're dealing with VSCode because the insert mode isn't instant and exiting it isn't either

1597736642
andrewrk
hmm I see so queuing up voice commands doesn't work with vs code? that seems really frustrating

1597736673
gonz_
I mean, it does, but not for exactly everything, like moving in and out of insert mode.

1597736687
gonz_
Not to the degree that you want for voice scripting, at least.

1597736735
gonz_
I think this newer scheme I'm using will be good when I get more used to saying "say constant tabby snake some cool name" which has you batch all of "const some_cool_name = ;" in one go, for example.

1597736770
gonz_
As opposed to having it be 3 steps like in the majority of this video.

1597736875
andrewrk
it seems like if you could eliminate the pauses to make sure errors aren't made, you could actually get a pretty high WPM with this

1597736920
gonz_
Yeah, when you get comfortable with a scheme and you do it to a certain degree you do get very efficient.

1597736922
andrewrk
maybe even faster than traditional keyboard typing

1597736934
gonz_
Add to that a more capable terminal with `fzf` for terminal searching, etc.

1597736948
andrewrk
yeah I see how these kind of tools are invaluable

1597737977
KoljaKube
When I @call a function that may or may not return an error union, and need to catch if it does, do I need to write two @calls or can I somehow handle both cases in one?

1597738193
andrewrk
what do you mean may or may not return an error union? are you doing some kind of reflection / generic code?

1597738227
andrewrk
you could capture the return value in a variable and then handle the return value separately depending on the type

1597738343
KoljaKube
I'm doing something similar to

1597738381
KoljaKube
Line 201 contains the @call in question

1597738400
ikskuh
there goes the matrix party

1597738461
KoljaKube
Does that happen often?

1597738533
ikskuh
haven't noticed that the matrix bridge dies

1597738538
ikskuh
but netsplits are common

1597738583
ikskuh
andrewrk: where are the compiler errors/warnings emittet in stage1?

1597738600
ikskuh
i'd like to do a small pr improving quality-of-live in vscode :D

1597738639
andrewrk
look for add_node_error

1597738655
ikskuh
thanks

1597738673
andrewrk
I'm so frustrated about #6082

1597738683
andrewrk
all I want is a way to tell if a file has changed since the last time I looked at it. apparently this is too much to ask

1597738784
ikskuh
sounds ugly

1597738887
KoljaKube
You already tagged it linux, but I can confirm that it works on macOS

1597738956
Nypsie[m]
gonz_: That is so cool! It's amazing to see how advanced this is.

1597739021
ikskuh
btw, the new log api is nice

1597739028
ikskuh
const log = std.log.scoped(.sdl2);

1597739029
ikskuh
log.debug()

1597739031
ikskuh
neat!

1597739082
andrewrk
KoljaKube, when you say works, what do you mean?

1597739138
KoljaKube
count is always 1

1597739146
andrewrk
aha. that's good news

1597740559
ifreund
andrewrk: is it not required that allocateDeclIndexes be called before any call to updateDecl or updatedDeclExports?

1597740656
ifreund
I'm pretty sure it is, will do a PR adding/correcting comments

1597741337
KoljaKube


1597741411
KoljaKube
When I add the comptime in L49 (and remove the prints), the code compiles. Does the compiler evaluate wrap() for every possible input (=decl in TestClass)

1597741729
ifreund
yeah it should afaik

1597741738
ifreund
can use @compileLog() to check

1597742124
KoljaKube
Somehow I expected more automatic comptime-ness from a function that operates on a comptime type argument

1597742149
KoljaKube
I guess with the prints it should have been obvious

1597742751
KoljaKube
This crashes the compiler:

1597742769
KoljaKube
Inlining the loop works

1597742789
KoljaKube
Segfaults in can_mutate_comptime_var_state

1597742840
KoljaKube
Something I should create an issue for? Can't seem to find an existing one

1597743197
ifreund
yes please

1597743205
ifreund
#itwillworkinstage2 though

1597743868
KoljaKube
stage2 really is an eierlegende Wollmilchsau, huh? ;-)

1597744684
ikskuh
KoljaKube, well the plan is to make stage2 actually good :D

1597744692
ikskuh
and not just "work" as stage1 right now

1597744718
ikskuh
btw: i'm starting to hate the guy that made the decision that git has autocrlf enabled by default

1597745298
ifreund
easy soultion: forget windows exists

1597749375
ikskuh
hmm

1597749383
ikskuh
ifreund: cannot do that :D

1597749392
ikskuh
what's the current way of casting a float safely to an integer?

1597749402
ifreund
@floatToInt()?

1597749420
ifreund
or is that not safe enough for you?

1597749443
ikskuh
floatToInt will crash when it's not a integer, out of bounds or similar ;)

1597749459
ifreund
maybe there's something in std.math

1597753187
ifreund
why does't File.seekBy() return the offset?

1597764936
shakesoda
i wonder how nasty it'd be to get zig going on old windows (9x, 2000 + xp)

1597765051
ikskuh
shakesoda: i don't think 2000 and XP support should be hard

1597765065
ikskuh
the PE files are the same, except for some minor entries

1597765069
shakesoda
ikskuh: i don't get the impression those two would be particularly bad, they aren't

1597765069
ikskuh
9x is different though

1597765184
shakesoda
I assume much of the os dependent stdlib stuff just wouldn't work on 9x, afaik a good bit of those use nt apis

1597765204
shakesoda
i don't know the details of any differences with the binaries

1597765601
fengb
stdlib won't officially support <8

1597765660
shakesoda
well that's a shame since i run 7

1597765695
CodeSpelunker
is there any SIMD support in zig?

1597765709
ifreund
CodeSpelunker: yes, what do you want to know about it?

1597765713
shakesoda
i don't expect official support for pre-7, certainly, thinking about 2k and 9x is just an idle curiosity

1597765735
CodeSpelunker
ifreund: dunno haha, just how it works

1597765745
ifreund
shakesoda: why would we officially supported a deprecated proprietary os :P

1597765747
CodeSpelunker
I'm just getting started with zig

1597765768
ifreund
well, you can make SIMD vectors with std.meta.Vector()

1597765779
ifreund
you can splat values with @splat()

1597765785
shakesoda
ifreund: 7's practical, vendor support be damned

1597765823
shakesoda
a situation which won't last forever. i've been considering never upgrading again ;)

1597765839
ifreund
you can then do stuff like `vec + @splat(16, 1);` to add 1 to every element in vec

1597765857
CodeSpelunker
ifreund: that's awesome, thanks for sharing

1597765873
shakesoda
the vector stuff is magical

1597765890
ifreund
yeah, llvm is doing the heavy lifting in this case

1597765907
CodeSpelunker
liking zig so far

1597765911
ifreund
codegen for that's going to be fun for self-hosted

1597765952
shakesoda
ifreund: at least it's fine if it starts out very naive in that case

1597765961
companion_cube
can't self hosted "just" fallback to non simd ops?

1597765974
ifreund
well yes, but what would be the fun in that :P

1597766011
shakesoda
companion_cube: zig has infected my brain and i keep reading your name as comptime_cube

1597766049
CodeSpelunker
lol

1597766168
companion_cube
because you haven't seen me at runtime ;)

1597766217
shakesoda
my expectation is that at runtime you are simply cube. already calculated and ready!

1597766254
shakesoda
that or nonexistent, it was all compiler work all along

1597766315
ifreund
yeah, hate to break it to you but you get GC'd before runtime :P

1597766331
companion_cube
that sounds like chistian rapture stuff

1597766341
companion_cube
the reaper comes for me

1597766415
shakesoda
something interesting for the risc v crowd

1597766679
ifreund
I would love to have a beefy risc v laptop

1597766719
KoljaKube
What is the best way to compare a slice and a C string? std.cstr.cmp doesn't like slices, and std.mem.eql doesn't like C strings

1597766756
KoljaKube
ifreund: Do those exist? What's the big advantage of risc v anyway?

1597766790
ifreund
KoljaKube: probably std.mem.span() the C string

1597766818
ifreund
and no they don't yet, but will eventually

1597766838
companion_cube
a beefy wasm laptop

1597766848
ifreund
risc v is a open standard unlike x86 or arm

1597766863
KoljaKube
ifreund: Would span traverse the C string to find its length?

1597766869
ifreund
yes

1597766895
KoljaKube
Mhkay. So hand-rolling the comparison would be faster, I guess :-/

1597766913
ifreund
marginally, but does it really matter in your use case?

1597766952
KoljaKube
Very likely not. I just had hoped for a better solution, given that std.cstr exists at all

1597767019
KoljaKube
While I get that an open architecture is nice, is there any advantage on top of that?

1597767068
ifreund
well it's also vastly simpler and nicer to work with than x86

1597767103
KoljaKube
That's not too hard from what I understand ;-)

1597767126
KoljaKube
And compared to e. g. ARM?

1597767180
KoljaKube
My interest was piqued when Chris Lattner joined SiFive, but I'm not sure I'm getting the big benefit for consumer hardware

1597767206
KoljaKube
Brb, bringing the little one to bed

1597767517
ifreund
well, not needing to pay licensing fees is a solid advangate. It's also extensible in a way that ARM isn't afaik

1597767559
ifreund
I believe it also has potential for greater theoretical efficiency, but am not an expert

1597768244
Bastian[m]
I recently saw

1597768409
KoljaKube
Bastian[m]: That's what I meant when I said "consumer hardware". Being able to design/build special-purpose chips relatively easily is cool, but I'm not sure why I would want to have the architecture in my next general purpose laptop

1597768511
KoljaKube
And, given the introduction of Apple silicon, if the dominant architecture of other vendors switches away from x86, I'd bet it will be ARM

1597768551
KoljaKube
But I will watch any risc v news with great interest. It does sound neat

1597768707
Bastian[m]
yeah, but at least arm could get some long term competition, I've also seen riscv just in an emulated fuzzing application, compile the target for riscv and run it in a jit-ed emulator for improved performance by stubbing syscalls and better per core scaling

1597769844
fengb
I'm curious how RISC-V will play out. The core instructions are a little... weak so what's the ecosystem going to gel around

1597769953
companion_cube
are they weak even with the various extensions>

1597769956
companion_cube
?

1597770571
fengb
Those are pretty comprehensive. I'm curious if it'll develop into 2 ecosystems

1597770586
fengb
Embedded and "full"

1597770689
companion_cube
embedded probably has a better chance of growing (like HDD chips and stuff)

1597770758
KoljaKube
Hm, the no-variable-shadowing is starting to get a little annoying

1597770798
KoljaKube
So what if my generic struct needs to have a field named like a parameter of its template?

1597770926
fengb
If nvidia absorbs arm, I can see a lot of vendors potentially jumping ship

1597771055
KoljaKube
Given the momentum arm has, I'd be surprised

1597771184
KoljaKube
Also, the value of arm depends on its adoption. I'd expect any buyer to behave accordingly

1597771510
marijnfs
mutex changed?

1597771933
Nypsie[m]
Yes, I believe it's simply std.Mutex now

1597771956
Nypsie[m]
Yes, I believe it's simply std.Mutex now

1597772941
eiro
hello people

1597773205
ifreund
hello!

1597773993
oats
what? Is arm getting bought?

1597774028
Nypsie[m]
Yes, it's for sale

1597774067
fengb


1597775372
ifreund
hrm, my rewrite of the wasm for in-memory incremental compilation seems to be silently corrupting memory elsewhere in stage2

1597775381
ikskuh
:O

1597775415
ifreund
it does produce valid wasm binaries an the incremental compilation works, all with about half the LoC

1597775458
ifreund
annoying I can only get the memory corruption to reproduce when running the test harness

1597775466
ifreund
*annoyingly

1597775500
ikskuh
maybe it's the test harness then?

1597775530
ifreund
well, it doesn't seg fault on master :P

1597775534
ikskuh
lol

1597775559
ifreund
but yeah I don't really know what's happening

1597775594
ifreund
my best guess is that Decls are getting free'd without link.File.freeDecl() being called

1597775624
ifreund
and then my code does a good old use-after free

1597775640
ifreund
which doesn't manifest until the next test runs

1597775646
ikskuh
does stage2 already use the GPA?

1597775651
ifreund
yeah

1597775673
ifreund
already caught several leaks before I comitted them :)

1597775900
ifreund
anyhow, I need to go buy food before the store closes so I'll have to debug later

1597775901
ikskuh
neat

1597778276
andrewrk
ifreund, run it with valgrind

1597778322
andrewrk
stage2 should be immune to use-after-free memory corruption on the heap, but it could happen with stack variables

1597778377
andrewrk
this could potentially also be a good time to learn to use

1597778411
andrewrk
if you capture the corruption happening 1 time, you can then use it to debug the same execution deterministically, and you can even do reverse-continue + hardware memory watchpoint to find when the memory got corrupted

1597778435
andrewrk
IMO it's worth learning. it actually only took 1 minute to learn once I decided to try it out. it's really simple

1597778460
andrewrk
damn, another endangered species mozilla project

1597778479
ikskuh
andrewrk: nice showoff in the stream btw :)

1597778493
ky0ko
re:zig on old windows (9x/2000), that would actually be more useful to me than zig on current windows

1597778493
andrewrk
heh, which one?

1597778496
ky0ko
(i'm an outlier!)

1597778508
ikskuh
andrewrk: just zig in general

1597778517
ikskuh
btw: what's YOUR  favourite zig feature?

1597778520
andrewrk
ah :)

1597778555
andrewrk
catch |err| switch (err)

1597778579
ikskuh
yeah this is definitly a good one

1597778605
ikskuh
i was team comptime at first, but i think error handling and pointer types are just so much more convenient than C equivalent

1597778812
ikskuh
you have achieved that i now feel unsafe programming C/C++/C#

1597778817
ikskuh
because error handling is so much more clumsy

1597778875
andrewrk
I think it really comes down to control flow

1597778920
ikskuh
"everything expression" is quite nice

1597778931
ikskuh
try foo.create(switch(bla) { })

1597779043
ikskuh


1597779045
ikskuh
this is just great :)

1597779099
ifreund
andrewrk: thanks for the tips, I have made my dinner now and will give it a try

1597779219
andrewrk
ifreund, I'm invested in this because in theory memory corruption should only be possible via dangling stack pointers now

1597779282
andrewrk
(and I have a plan to solve that too!)

1597779311
ifreund
well I'm not 100% sure it's memory corruption, but i'm not sure what else it could be. Heres the stack trace:

1597779351
ifreund
something is messing with a hash table in Module that I don't think I directly had anything to do with

1597779360
andrewrk
ah, to be clear, a segfault could very well be use-after-free - but it means that a segfault happened instead of corruption

1597779414
ifreund
good to know

1597779449
andrewrk
oh hm this is in the -femit-zir code

1597779479
ifreund
yeah it seems very strange to me, which is why I jumpped to "memory corruption"

1597779519
andrewrk
this is in code that I recently added, I probably did something silly

1597779625
ifreund
alright well I have my branch which triggers it pushed here if you want to dig in

1597779641
andrewrk
ok will take a look as soon as I fix master branch

1597779675
ifreund
thanks, I will move on to implementing function calls then

1597780530
heidezomp
hey andrewrk, I was still investigating bug #6082 about the mtimes on Linux which you just closed. I found out that the actual granularity is set by the CONFIG_HZ kernel configuration, which on my laptop is 250Hz. Do you still want me to investigate further for a "proper" Linux implementation of isProblematicTimestamp, or are you ok with your fix?

1597780654
andrewrk
heidezomp, I'd be interested in a further improvement. what do you think it might look like?

1597780702
andrewrk
I'll re-open the issue

1597780877
heidezomp
I don't have a solution yet, I was still in investigation mode ;)  But once the actual granularity on the system can be found (which might involve writing some temp files (yuck!) and then doing some math), at least we know the actual number of significant digits to discard... I'm afraid I haven't found a better solution yet

1597780949
heidezomp
This only applies if the kernel isn't compiled "tickless" (which is done for real-time kernels I guess?)

1597780983
heidezomp
If this sounds too ugly/hacky to you, I guess I can just let it be... or I'll dump my observations in the issue, if you've reopened it

1597780991
andrewrk
the problem with opening temp files to determine granularity is that it might fail, and also the temp file might be a different filesystem than the actual file we are trying to observe, which may be on a read only file system

1597781029
heidezomp
hmm you're right, this would only work if the granularity of the fs is greater than the CONFIG_HZ of the kernel

1597781073
andrewrk
the real answer is for operating systems to provide a way to determine if a file has changed since you last looked at it. all it would have to do is increment an integer. or update a few random bytes to new random bytes on open-for-writing

1597781093
andrewrk
it's ridiculous that we as application developers don't have such APIs available to us after all these years

1597781154
heidezomp
yes, if only everyone in the world did things in a sane and proper way :D  well we're trying raise the status quo with Zig at least ;)

1597781166
andrewrk
:)

1597781247
heidezomp
I'll look into it some more and then dump my findings in the issue, even if I don't find a proper solution, at least what this "kernel bug" is will be documented a bit more for posterity... is that okay with you?

1597781354
andrewrk
yes absolutely

1597781364
heidezomp
cool!

1597781396
andrewrk
it doesn't make sense to me that linux would not update the mtime when we are writing to the file anyway

1597781419
andrewrk
it's not like atime where it turns a read-only operation into a read-and-write operation

1597781540
heidezomp
especially since there is `utimensat` which

1597781574
andrewrk
ifreund, I'd like to unify Wasm.zig and codegen.zig so that they follow the same code skeleton, (1) are you on board with that? and (2) would it be better for me to do that before or after looking at s2-wasm-rework ?

1597781632
ifreund
you mean codegen/wasm.zig? or link/Wasm.zig?

1597781642
andrewrk
codegen/wasm.zig

1597781687
andrewrk
idea being rather than codegen.zig generateSymbol and codegen/wasm.zig genCode being seperate functions the logic from the latter is spliced into the former

1597781721
andrewrk
benefit would be that the logic that is architecture-independent gets de-duplicated

1597781732
ifreund
yeah I agree that that should probably happen, there's a bit of experimentation left to do still with regards to the rework to the in-memory incremental compilation approach

1597781797
ifreund
bascially need to get function calls working to prove this approach of emiting some kind of escape sequence into the in-memory code and then replacing it with the function index on flush is sound

1597781810
andrewrk
I'm also ok with letting it diverge some more and seeing what happens. maybe we find out that it wouldn't be worth it after all

1597781850
ifreund
so yeah I'd rather wait unitl I get this rework done

1597781864
ifreund
is it blocking you on anything or just come up on the todo list?

1597781889
andrewrk
sounds good. I'm looking into the stack trace you linked me now

1597781896
ifreund
sweet

1597781937
ifreund
that's what I get from zig-git build test-stage2 -Denable-wasmtime=true

1597781950
andrewrk
ah, I have to figure out how to update my wasmtime

1597781972
ifreund
I recently packaged it for void, wasn't too bad

1597782056
ifreund
oh, you might not need wasmtime to reproduce

1597782108
andrewrk
I got it installed

1597782131
ifreund
yeah just being on my branch triggers it even without the -Denable-wasmtime=true

1597782134
ifreund
that's weird

1597782177
ifreund
or well I guess it still compiles the test cases but doesn't check their output?

1597782680
fengb
Yes, the test runner always does a cross compile. Actually executing the test is enabled via flags

1597783142
andrewrk
pretty sweet right

1597783180
andrewrk
to be clear it executes all the tests that it can. -Denable-wasmtime informs the test harness that you are able to execute wasi tests

1597783225
fengb
Did I miss a stream? D:

1597783307
ikskuh
it looks like

1597783382
dec05eba
is anyone working on a http client? im working on one right (starting with the tls layer)

1597783405
ikskuh
dec05eba, do you know zig-bearssl?

1597783448
dec05eba
ah, i meant in pure zig

1597783457
ikskuh
oh, including tls?! :D

1597783462
dec05eba
yes

1597783521
fengb
:o

1597783568
fengb
truemedian has implemented protocol handling only: hzzp and wz

1597783594
ifreund
theres some http header stuff in the std as well no?

1597784144
KoljaKube
The code owes a lot to daurnimator, but I'm finally moving in the right direction. Man, Zig's comptime metaprogramming is cool!

1597784220
ikskuh
neat!

1597784494
KoljaKube
It really is! I haven't had this much fun discovering a language since I got into Ruby in like '08 or so

1597784511
ikskuh
hehe

1597784526
ikskuh
something in my base does this:

1597784545
ikskuh
"\n" gets unescaped, stored, loaded and unescaped in printing :D

1597784672
dec05eba
i like how small static binaries zig generates. For such small binaries the only options i really have is musl and zig

1597784786
dec05eba
i had a program written in python and it ended up using around 70mb ram for some reason. Then i rewrote it in c with musl and it uses 50kb with 0 dependencies. Now I get that but with extra nice features with zig

1597784796
KoljaKube
Yeah, I think Drew DeVault had a blog post comparing binary sizes of languages, with Zig being at or close to the top

1597784815
companion_cube
I think he was comparing numbers of syscalls

1597784823
ifreund
both actually

1597784831
ifreund


1597784854
KoljaKube
ifreund: Angeber ;-)

1597784860
ifreund
but it's really not a meaningful benchmark, just kinda neat :P

1597784865
KoljaKube
Where did you pull that from this quickly?

1597784866
dec05eba
i got my binary smaller than that. I got it to 2kb

1597784874
KoljaKube
Sure, but still interesting

1597784892
ifreund
I have all the links

1597784958
KoljaKube
The linkmaster :-o

1597787629
andrewrk
ifreund, this crash is perplexing

1597787723
ky0ko
is it (or could it be) possible to target ms-dos/freedos with zig

1597787838
andrewrk
oh neat, I didn't know about freedos

1597787856
ifreund
:/

1597787875
ky0ko
16 bit would be a hassle, obviously, but i know a few other languages can target ms-dos with vsci or dpmi

1597787879
ifreund
I think function calls are on the verge of working and then I will try and help debug

1597787900
andrewrk
ifreund, ok, I followed my own advice with using rr, watchpoint, and reverse-cont and it led me directly to the problem, haha

1597787908
ifreund
lol

1597787924
andrewrk
this really is awesome, you gotta try this

1597787948
ky0ko
and one of the various machines i like to do development on runs dos+desqview/x

1597787971
andrewrk
ky0ko, I could see that being in scope, especially given the existence of freedos

1597788002
ifreund
I've been eyeing rr for a while, it certainly looks awesome

1597788005
pixelherodev
ky0ko: 16-bit wouldn't be the

1597788011
pixelherodev
I'm working on a 16-bit target

1597788023
pixelherodev
And I want to work on z80 (8-bit!) eventually

1597788118
andrewrk
ifreund, check it out:

1597788254
ifreund
nice, so it was a use after free of the metadata hashmap between testcases?

1597788264
andrewrk
yeah that led directly to the issue

1597788268
andrewrk
it's a spot-the-fail

1597788298
andrewrk


1597788325
ifreund
heh, yep

1597788339
ifreund
one of them is though!

1597788360
andrewrk
so this was a use-after-free. it was not memory corruption, however, and the fact that it wasn't memory corruption is why debugging it with rr was so straightforward

1597788379
ifreund
yeah

1597788391
ifreund
the funny part was that my code triggered it

1597788391
andrewrk
this still counts as "safe"

1597788394
andrewrk
yeah

1597788471
andrewrk
will push to master shortly

1597788482
ifreund
nice

1597788517
ifreund
I've come to realize that putting escape sequences in the code is a dumb idea and just made an arraylist of offsets instead

1597788562
ifreund
Decl.fn_link is getting a little chunky for wasm though, I may investigate moving that to Module.Fn or whatever that was

1597788818
andrewrk
tfw Decl.fn_link is a chonky boi

1597791323
pixelherodev
Thought there was another netsplit for a minute :P

1597791860
ky0ko
that'd be cool! for my current purposes 32-bit dpmi or vcpi interface is what i'd want

1597791881
ky0ko
if 8 bit stuff works an sm83 target would be cool too (the cpu in the gameboy. which is not a z80.)

1597792009
andrewrk
ky0ko, architectures like sm83 and z80 are one of the reasons we have a non-llvm backend :)

1597792415
andrewrk
ugh so many llvm11 regressions to report

1597792561
pixelherodev
Behold, the field in which I grow my shock.

1597792565
pixelherodev
Note that it lays barren

1597793878
ifreund
nice, function calls work

1597794259
andrewrk
I wonder what it would look like to start making wasm builds of stage2 for an in-browser sandbox

1597794524
ifreund
that would be pretty slick

1597794586
ifreund
though I guess you'd need a VM of some kind to run non-wasm code

