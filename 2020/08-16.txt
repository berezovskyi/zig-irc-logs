1597538249
ky0ko_
so, I have a piece of code that i've whittled down to a much smaller test case, i'm trying to figure out if i'm doing something wrong or if it can be considered a bug

1597538297
ky0ko_
basically, i have a typedef in some C code i am importing, a variable of that type, and a function that accepts a variable of that type. i am trying, in zig code, to pass that variable to that function. it does not compile.

1597538298
ky0ko_


1597538456
ky0ko_
hm. actually you know what that's not a good representation of the original code, since it can be fixed with an & and the original can't

1597543696
daurnimator
andrewrk: re: frank's PR: what do you think about the `inline` on the functions?

1597568287
danyspin97
do Windows and Unix have the same strerror messages?

1597568334
daurnimator
no]

1597568375
daurnimator
they aren't even consistent between unices, libcs, releases of libcs, or language settings

1597568438
danyspin97
Ah, I see :/

1597568475
danyspin97
so zig strerror function should call system strerror

1597568488
daurnimator
or make up its own

1597568563
danyspin97
I thought about a simple `return switch (errno) { ERRCODE => "message", };`

1597568640
daurnimator
danyspin97: usually the (english version of the) error code is the most useful thing..

1597568647
daurnimator
its the thing to google; or to find in docs

1597568668
daurnimator
often the string are localized... but don't provide enough information

1597568712
danyspin97
However, an application should show the error message instead of a code (imho)

1597568746
pixelherodev
Error message doesn't provide much useful info either

1597568749
pixelherodev
Code is at least Duckable

1597568754
danyspin97
"unable to do X: 22" it's unfriendly

1597568791
danyspin97
they gives you an idea, like "no more memory", "system is fucked up" or just "no permission"

1597568864
pixelherodev
I'd think e.g. ENOENT is more useful than the number

1597568874
pixelherodev
But codes don't really map to messages

1597568878
pixelherodev
There's too much context for that

1597568893
gonz_
Error codes/values are for the application to decide what to show, though. Generic "You know what you're doing strings" are useless both to end users and the application logic.

1597568963
gonz_
Any app using networking that decides to punt error strings forward to the user comes to mind. "Broken pipe"; useful.

1597568983
gonz_
"Connection reset by peer", I'm sure that means something to Joe Average

1597569035
gonz_
"But at least we showed a string"... You may as well have shown a code at that point, but better yet you could've just handled codes and dispatched proper messages based on them.

1597569060
danyspin97
I think strerror messages are the best tradeoff

1597569065
daurnimator
gonz_: is "Connection reset by peer" really that much more useful than ECONNRESET ?

1597569098
gonz_
daurnimator: That's my point. It's not useful and it's not something that should end up in end-users' information flow.

1597569140
daurnimator
IMO it should end up the error message, so that the user can google it and try to diagnose; or alternatively copy/paste into a support request

1597569146
gonz_
Clearly values should've been dispatched on at some point and a useful error message should've been shown instead.

1597569157
daurnimator
the support agent having the french translation of "Connection reset by peer" isn't super helpful

1597569188
daurnimator
also often errors like that have common solutions

1597569205
daurnimator
e.g. "Connection reset by peer" might be caused by a misconfigured firewall

1597569360
gonz_
I think if the person who's expected to end up with the information is technically inclined and wants to have a clear picture of the situation, error codes are more concise and about as useful to the end-user.

1597569386
gonz_
If all they're going to do is forward the information to support, you may as well just have magic codes and be done with it.

1597569435
gonz_
If you're actually trying to help the end-user, bite the bullet and write real, informative error messages based on the error codes.

1597569528
gonz_
This garbage people do in the middle of the spectrum where they use generic strings that mean next too nothing to normal people is just the worst of two worlds.

1597582477
sam0x17
hey is there somewhere I can find some basic info on the SIMD support?

1597582565
sam0x17
and also (since I'm unfamiliar with SIMD stuff in general), what is the max size of a SIMD vector and/or at what point do they become too large to be practical?

1597582640
sam0x17
also I've been creating them at compile time like this: `const one: @Vector(size, u8) = [_]u8{1} ** size;` however as `size` gets large, the compile time goes up exponentially (at runtime it's fine though)

1597582847
ifreund
sam0x17: the idea is that you should use whatever you want and llvm will do The Right Thing. In practice you might want to limit total size of your vectors a power of 2 (e.g. 128 bits)

1597582878
ifreund
for making a vector just use @splat(size, 1);

1597582938
sam0x17
ok cool

1597582948
sam0x17
is it possible to take a slice of a vector and add a vector to that slice?

1597582968
sam0x17
(what I want to do is add 1 to a subrange / slice of a vector)

1597583141
ifreund
not sure I follow, generally you only want to use vectors when you are doing the exact same opreation on all elements

1597583243
sam0x17
in my use case, I need to add `1` to all elements after the `ith` position regularly

1597583285
sam0x17
I wonder if there is some casting magic that could get me that

1597584774
ifreund
sam0x17: here's a messy example

1597584818
ifreund
dunno if this is actually faster than a non-vector version, you'd have to benchmark

1597585123
ifreund
sam0x17: actually, you can @ptrCast the vector directly

1597594297
KoljaKube
Is it possible to get a function pointer from a TypeInfo.Fn, or in any other way when I have an unknown struct passed to me?

1597595812
ifreund
KoljaKube: you can get the name of the function from TypeInfo and then use @field()

1597595842
ifreund
(yes @field() works for decls as well as fields)

1597595913
KoljaKube
After writing here I remembered builtins and started scanning them, but somehow missed that. Thanks!

1597596158
KoljaKube
Why is FnArg.arg_type optional btw? And what is is_noalias about?

1597601985
sam0x17
ifreund thx!!

1597607646
pixelherodev
andrewrk: ohhh, i think I get it; allocateDeclIndexes sets aside space in the GOT for each symbol, allowing calls to be emitted before the function itself, which is why it's useful for parallelizing incremental compilation?

