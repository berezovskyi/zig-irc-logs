1602202071
tdeo
hmm now i've spent a while more trying to solve #131 and still haven't gotten anywhere

1602202151
tdeo
should every variable reference be lazy now?

1602206575
tdeo
hmm this really feels like a types problem too

1602206591
tdeo
we need to know the type of a to know the type of b, but it's the same both ways

1602206738
tdeo
i can't see a way to correctly solve this issue without adding some sort of advanced type inference so far

1602206810
tdeo
or it could just say "couldn't infer type", that probably works too

1602206835
pixelherodev
tdeo: I honestly don't see the issue with the "inference"

1602206848
pixelherodev
If there's no type specified, the compiler should error out IMO

1602206865
pixelherodev
If there's no possible way to infer the type, don't make one up, just report it

1602206874
g-w1
I am just a beginner at compilers, but could we search for b after we see a reference to it, or would that be really bad space time complexity

1602206874
tdeo
are you talking in general or about the loops?

1602206901
pixelherodev
tdeo: I was talking in general, but I think I confused it with 137 again :P

1602206918
tdeo
i mean there is a possible way to infer the type but zig doesn't use advanced type inference like some other languages

1602206935
tdeo
like rust lets you `let vec = Vec::new(); vec.push(1i32);` and vec is inferred to be of i32

1602206967
tdeo
i'm not saying zig should do this, it's just the only possible way i see to make that test case work is with something similar

1602206978
pixelherodev
Why?>

1602206988
tdeo


1602206990
pixelherodev
I know

1602206992
pixelherodev
I'm looking at it

1602206997
pixelherodev
Why would that be needed?

1602207021
pixelherodev
Heck, why is type inference needed at all?

1602207032
pixelherodev
It should be explicit as the type of Node.next

1602207048
tdeo
inferring the type of an expression that refers to another variable needs to know the type of that variable

1602207050
tdeo
in general

1602207073
tdeo
but to know the type of b we need to know the type of a and so on

1602207081
pixelherodev
That makes no sense IMO

1602207093
pixelherodev
That's needed for type *validation*, sure

1602207095
pixelherodev
`const a = Node { .next = &b };`

1602207108
pixelherodev
But &b there semantically must be `*Node`

1602207122
pixelherodev
The type of b can then be assumed to be Node, which can be validated later

1602207125
tdeo
&b has to be something that implicitly casts to *Node

1602207173
pixelherodev
ah, true

1602207183
pixelherodev
but why's that matter?

1602207255
tdeo
hmm

1602207276
tdeo
well there's no general way to know what type is expected i think

1602207277
pixelherodev
basically, why does that need to be resolved *first*?

1602207297
pixelherodev
131 is specifically about recursive addresses of globals, no?

1602207307
pixelherodev
in that case, it's always going to be a pointer

1602207313
pixelherodev
the address can be resolved before the type, can't it?

1602207399
tdeo
well, the zig compiler has no way to say "i finished resolving this expression, but i don't know its type"

1602207444
tdeo
i think adding that and making it work would need to be a big type inference change

1602207552
tdeo
like, i think making circularly inferred constants would require making type inference in general more powerful

1602208410
tdeo
ok, so i think it makes sense to just fail inference for that

1602208581
tdeo
the compiler doesn't have a way to fail inference without failing evaluation though

1602208594
tdeo
which was the whole problem i guess, but at least i don't think the language has to change

1602212396
redj
/a/sd/d/zig/bootstrap/out/zig-x86_64-linux-musl/bin/zig --version

1602212396
redj
Illegal instruction

1602212432
redj
this is what I ran: ./build -j9 x86_64-linux-musl

1602212636
redj
sorry for not asking a proper question... is anyone aware of some issue with bootstrap?

1602212636
redj
this is master 42f01b333

1602212636
redj
Linux 5.8.4-artix1-1 #1 SMP PREEMPT x86_64 GNU/Linux

1602212695
redj
out/zig-x86_64-linux-musl/bin/zig: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped

1602212710
redj
not a dynamic executable

1602212732
redj
the "not stripped" is surprising me as this is supposed to be the release configuration

1602213134
redj
I see c581efa0c was pushed 4-5 hours ago... llvm11 and updated zig... nice! I will try that..

1602213317
redj
trying native

1602222255
redj
and it works! it took a little over 2 hours but I got zig! :D

1602222265
redj
fresh zig :)

1602224144
daurnimator
redj: 2 hours is a while; that was just solving compilation issues?

1602224211
redj
daurnimator: that was just running the build script from zig-bootstrap.. aka the compilation time

1602224267
redj
how long it tool to get a working zig-x86_64-linux-musl-native zig binary :)

1602224273
andrewrk
it includes building llvm, clang, and lld twice, so 2 hours sounds about right

1602224280
redj
yes

1602230098
ikskuh
andrewrk: nice, you closed #130 :O

1602230122
ikskuh
i think interface.zig is already close-to-awesome

1602238687
ifreund
tdeo: right now I'm thinking we should just require explicit type annotations of gloabal variables involved in recursive deps for stage1

1602238711
ifreund
stage2 can have the better type inference

1602240443
andrewrk
ifreund, they tricked us with that opaque{} thing, now they tryna take our struct files away from us :P

1602240468
ifreund
it was a trap!

1602240490
ifreund
what is it, like 4am where you are?

1602240497
andrewrk
yes

1602240505
andrewrk
I've been... not handling release month very well

1602240534
andrewrk
pushed a little too hard last month

1602240554
ifreund
yeah, I could tell you were burning out a little on 6250

1602240607
ikskuh
andrewrk, go to bed!

1602240627
andrewrk
good idea

1602240643
ifreund
and now release stress as well, remember that your long term health is much more important for the project than any small details for this release

1602240657
ikskuh
^=

1602240663
andrewrk
true. I'll be ok, I'll take it easy

1602240692
ikskuh
says the man up at 4 am

1602240712
ifreund
well i was up to 3 last night, I can't judge

1602240724
andrewrk
in my defense I am playing monster train and watching anime

1602240733
ifreund
sounds good for the soul

1602240740
ikskuh
okay, that's a good thing

1602240761
ikskuh
Oh man, i feel bad for countering CodeHz :(

1602240779
ifreund
on the opaque(u32) proposal?

1602240782
ikskuh
yeah

1602240789
ikskuh
it's not opaque if we back it with an integer

1602240797
ifreund
yeah I feel kinda bad too but it's just not a good idea

1602240824
ikskuh
also: what ABI rules to apply? they even made the example why their code is a bad idea :D

1602240871
ifreund
yeah, what they want is totally orthagonal to opaque types

1602240876
ifreund
they want distinct types

1602240881
ifreund
or something

1602240914
ifreund
which I would also be in favor of if done right

1602241147
ikskuh
yeah, cloning an integer to be distinct would be awesome

1602241158
ikskuh
and enforce something like @as() or @intCast on them

1602241164
ikskuh
or just arithmetic types

1602241480
ask6155
Hello! I wanted to static link a c library with zig. Do I just do -llibx.a at the end?

1602241563
ifreund
ikskuh: good point on #6615, I'm starting to really like the idea

1602241641
ifreund
ask6155: with #6250 I think you can just pass the library to build-exe along with your root source file

1602241649
ifreund
zig build-exe foo.zig libx.a

1602241837
ikskuh
ask6155: andrew told me that it's correct to link static libs as object files (if you have them locally in your repo)

1602241853
ask6155
How do I import the header file? c has "x.h" and <x.h> How do I tell zig with header file to include?

1602241869
ikskuh
ask6155: zig only knows <x.h>

1602241876
ikskuh
you have to add your include path manually

1602241909
ask6155
How do I do that?

1602241933
ifreund
-I

1602241971
ask6155
so I add -Ipath at the end of the zig command?

1602242022
ifreund
yes

1602242102
ask6155
okay thanks!

1602242120
ikskuh
ifreund: yeah, i also like this proposal very much

1602243031
tundrax
Is there a way to set function argument as optional?

1602243116
ikskuh
so that you can omit it?

1602243124
ikskuh
no

1602243131
ikskuh
but you can pass optionals:

1602243672
tundrax
so `.{ }` is a tuple? there is no mention of tuples in docs

1602243757
ifreund
yeah, the docs are rather lacking on tuples

1602243771
redj
hi all, how would you differentiate between the user running a zig binary and that same binary being run via $() for using the output in a variable for example?

1602243827
earnestly
Is this a shell question? ;D

1602243833
ifreund
redj: File.isTty()?

1602243863
redj
ifreund: that should be it...

1602243871
redj
earnestly, ifreund: thanks, will try

1602243878
earnestly
Yeah the only way is to check if stdin is attached to a tty

1602243931
ifreund
tundrax: the tuple .{a,b,c} is like a struct { .@"0" = a, .@"1" = b, .@"2" = c, } that you can iterate over in a for loop

1602243985
ifreund
the language feature isn't very complete yet though, see

1602244038
g-w1
you could use isatty in std.os

1602244069
g-w1
thats what ls uses to print stuff line by line if ur in a shell script but all together if not

1602244082
ifreund
g-w1: that's what File.istTty() calls...

1602244086
g-w1
oh

1602244094
ifreund
more relevant may be File.supportsAnsiEscapeCodes()

1602244096
g-w1
cool

1602244124
tundrax
ifreund thanks, that's what i was looking for

1602244143
ifreund
no problem

1602257153
g-w1
I am getting a lot of undefined references to memcpy and memset when I try to link a zig library to a file in assembly that includes _start. It is not a compile time error, but a link time error. I thought all zig libraries were statically linked, so shouldn't this not be a problem?

1602257595
g-w1
Since zig ships with libc, shouldn't memcpy be in zig's libc. I am on arch linux.

1602258877
scientes
g-w1, llvm requires certain symbols (such as memcpy) to build anything, so those are linked to every binary

1602258962
scientes
sounds like the library has not been linked

1602258990
scientes
anyways, you need to include more details

1602258999
scientes
about how you are building these things

1602259002
g-w1
ok

1602259058
g-w1
heres my assembly. the important thing is that it has extern square

1602259080
g-w1
and my main.zig is just this export fn square(a: i64) i64 { return a * a; }

1602259100
g-w1
i just use nasm to build the assembly and zig build to build the zig to a lib

1602259125
g-w1
ld to link them together

1602259141
scientes
it will probably fix it if you add a zig_panic function or build with --release-fast

1602259149
scientes
I think its the debug code that is pulling in those symbols

1602259188
scientes
but otherwise, I am struggling to be a proper support person because I know a decent amount about zig 0.6.0, the pride of ownership just isn't there anymore

1602259237
g-w1
Ok. I still don't understand why the debug code cant be statically linked or those symbols cant be statically linked. well thanks anyways.

1602259249
g-w1
ill try --release-fast

1602259308
g-w1
it worked! thanks

1602259383
scientes
g-w1, feel free to ask more questions as you have them

1602259450
g-w1
cool thanks. I am writing a compiler in rust, but want to write the standard library in zig, just to learn it.

1602259536
g-w1
ill probably start working on the zig compiler after I feel done with mine.

1602260539
ifreund
g-w1: got a link?

1602261059
kristoff_it
does anybody know of a simple way of causing a stderr write to fail?

1602261285
g-w1
github.com/g-w1/ezc

1602261291
g-w1
ifreund

1602261366
ifreund
kristoff_it: maybe pipe stderr to something and break the pipe?

1602261376
ifreund
just off the top of my head

1602261521
ifreund
g-w1: heh, haven't seen [] for comments before

1602261543
g-w1
yeah. i think imma change it to {} so i can use arrays

1602261597
ifreund
I also appreciate the usage of periods and commas to make things flow like english

1602261657
ifreund
do you have a use case for this language or is it just to learn/for fun?

1602261672
g-w1
Just to learn about compilers.

1602261692
ifreund
nice

1602261959
g-w1
I don't see a way to print a u8 to the terminal not as a number, but a character

1602261999
ifreund
{c}

1602262023
ifreund
see the doc comment for std.fmt.format

1602262045
g-w1
oh. ok. I was trying to read the docs for std.debug.print

1602262046
g-w1
thanks

1602262055
ifreund
no problem!

1602262078
nikki93
anyone try using llvm c api from zig? :o

1602262128
ifreund
nikki93: we have a wrapper for llvm that is used by the self hosted parts of the compiler. Have you seen that?

1602262193
nikki93
oo cool, will check it out

1602262292
ifreund


1602264685
tdeo
ifreund, nikki93: that's only used for the parts of LLVM that aren't exposed by llvm-c

1602264694
tdeo
using llvm-c should work fine using cImport though

1602264707
tdeo
it doesn't define any complex macros that you need to import as far as i know

1602264754
tdeo
though zig_clang.h

1602266648
nikki93
cool :O

1602266746
nikki93
might play around with making a language

1602267052
Piraty
congrats on LWN mention

1602267087
marler8997_
is Rocknest on here?  I wanted to ask some clarifying questions on his proposal without littering the github comments too much

1602269576
kristoff_it
Piraty, thanks :D

1602273529
nikki93
wonder if u could express a weird comptime ssa with zig struct literals

1602273539
nikki93
like each "member" is just result1 result2 and so on

1602273549
nikki93
and you reflect on it and unroll eval code

1602276293
g-w1
what is the best local development setup for the compiler. Should I have 2 repos, one ziglang/zig and one g-w1/zig? I feel like that wouold be inneficient. Or just one and merge it with the compiler whenever a new pr gets merged. (I dont know if you can auto do that on github)? What are you doing.

1602276407
ifreund
just one local repo with two remotes

1602276428
ifreund
I call the ziglang/zig remote "upstream" and my fork "origin"

1602276494
g-w1
oh. Im not that good at git so ill have to figure it out :). Thanks

1602276517
ikskuh
ifreund: i don't want to talk about to active working copies :D

1602276531
ifreund
do you do that? :P

1602276555
ikskuh
no :D

1602276561
ifreund
good

1602276561
ikskuh
but i heard that people use that :D

1602276567
g-w1
so you git pull from upstream and git push from origin?

1602276576
g-w1
so you git pull from upstream and git push to origin?

1602276657
ifreund
g-w1: yes, the workflow is usually git checkout master, git pull upstream master, git checkout -b my-new-feature, git commit, git push origin my-new-feature

1602276678
ifreund
then open the PR on github

1602276687
g-w1
awesome thanks.

1602276733
g-w1
i just opened a pr

1602276744
BaroqueLarouche
fixed the zig new cache system on Windows:

1602276808
ifreund
nice!

1602276813
ifreund
(to both of you)

1602276868
ikskuh
niiice!

1602276902
ifreund
g-w1: if you want to get really good at git I'd recommend reading this chapter on the lower level details:

1602276934
g-w1
ok. i started reading that book. I don't understand why people don't reccomend it from the start. it's very good

1602276940
ifreund
knowing how it works makes using it much more intuitive imo

1602276961
ifreund
I've only read that one chapter tbh, the man pages are fine for the rest

1602278721
u0jQx9gPyrYg
i changed my struct to use [32]u8 instead of u256 and now everything works as intended. thanks for pointing out the cause of my trouble. <3

1602278844
pixelherodev
:)

1602279191
redj
andrewrk: I'm wondering if I should have posted tese PRs against llvm11 branch instead of master.... sorry, should I change it?  this would apply to the 3 PRs I just posted:

1602279288
andrewrk
redj, it looks like your branch is based on the llvm11 branch, so yes you should then make the PR against the matching branch

1602280361
redj
andrewrk: fixed

1602287680
ifreund
tdeo: this seems like it might be progress?

1602287708
ifreund
I think what I've done so far probably isn't OK, but I made it to codegen

1602287720
tdeo
that's good

1602287724
ifreund
(yeah that's a stack overflow)

1602287932
tdeo
btw if you test with zig0 you don't have to wait for the self-hosted part to compile

1602287988
ifreund
that'd probably be smart

