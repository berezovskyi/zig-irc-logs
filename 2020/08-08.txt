1596846719
ronsor
logical xor: xor(a, b) => (a && !b) || (!a && b)

1596851314
gruebite
underscores for private struct members?

1596851319
gruebite
_member1

1596852190
andrewrk
no, just give it a descriptive name and document it clearly

1596852251
fengb
How about any field that has no docstring is considered private?

1596852615
lemmi
how do you document private fields then?

1596853200
ronsor
zig is like C: there are no real "private" fields

1596853300
leeward
Anything that isn't pub is private.

1596853325
leeward
Or are you talking about struct data?

1596853329
ronsor
struct data

1596853375
leeward
Yeah, there's no fake encapsulation there.

1596853403
leeward
You can take the public data and put it in a sub-struct and let people play with that, but it gets pretty hacky pretty fast.

1596854707
gruebite
well, there's still a convention regardless of language support, yeah?

1596854739
leeward
You're free to make one up. There isn't one in the coding standard.

1596854758
ronsor
I just note that you aren't supposed to mess with it.

1596854777
gruebite
any thoughts on making something a standard convention?

1596854778
ronsor
If some other dev thinks they have a fancy solution or problem that requires accessing it, that's their problem, not mine.

1596860726
gruebite
can you match on a tagged union by reference?

1596860747
daurnimator
what do you mean match?

1596860759
gruebite
if i have a pointer to a tagged union and switch on it i am led to: switch (un.*)

1596860788
daurnimator
gruebite: what's wrong with doing that?

1596860796
gruebite
is there a copy here?

1596860803
daurnimator
no

1596860814
gruebite
well then nothing :P

1596860838
daurnimator
though note.... a capture might be a copy (it didn't used to be; but then we got into aliasing troubles0

1596860849
daurnimator
so... make your captures by reference if you want that

1596860863
gruebite
Union.Foo => |*capture| ?

1596860865
daurnimator
i.e. `.Foo => |*foo|` if you want a reference

1596860871
gruebite
cool

1596861143
gruebite
thanks

1596864883
daurnimator
andrewrk: I'm rewatching the stream now; just caught one of your replies to me I didn't when watching live

1596864921
daurnimator
re: vendored dependencies: its weird to me that everything in lib/ except for lib/std/ is vendored stuff

1596865286
andrewrk
the organization of lib/ is clear: it's all the files that is directly copied to the installation directory

1596865451
daurnimator
ah hmm; I haven't thought about it from that angle before

1596865543
daurnimator
hmmm. I just realised; it ends up in /usr/lib..... because its not architecture specific shouldn't it end up in /usr/share?

1596867278
gruebite
i feel like try should have a high precedence

1596867288
gruebite
so i can do: try doFoo() * bar;

1596868003
andrewrk
zig will require that to have parentheses.

1596871874
andrewrk
LLVM Emit Output...error: <unknown>:0:0: in function mem.Allocator.reallocAtLeast void ({ %"[]hash_map.Entry", i16 }*, %mem.Allocator*, %"[]hash_map.Entry"*, i32): Non-Emscripten WebAssembly hasn't implemented __builtin_return_address

1596871876
andrewrk
oof

1596874873
leeward
andrewrk: 114 doesn't make any mention of where `try` belongs. Personally, I think it should bind more tightly than arithmetic operations. `SomeErrors!u32` * u32 doesn't make any sense, and no arithmetic operators result in error unions.

1596874927
andrewrk
it's going to require parens with arithmetic ops

1596874938
leeward
It also adds symmetry, since `a + try foo()` if a is u32 and foo returns !u32

1596874952
leeward
Is that mentioned anywhere in 114? I can't find it.

1596874992
andrewrk
well I see your point, especially because there is no operator overloading. it would be abundantly obvious how to resolve that order of operations

1596875042
leeward
Yeah, operator overloading would change the picture dramatically, but it's completely off the table for Zig.

1596875159
leeward
Holy crap I just saw the timestamps. I should not be awake. To be continued.

1596882663
shakesoda
the need for parentheses on `try` has been one of those things i run into frequently that feels a bit absurd/unambiguous

1596888912
Ristovski
What's the reason Zigs compiler doesnt do multithreaded compiling?

1596888932
Ristovski
even external C/C++ files seem to be compiled one by one

1596889097
ifreund
Ristovski: because the zig compiler you are currently using is the stage1 compiler written in C++

1596889107
ifreund
it's also horribly slow and a memory hog

1596889139
ifreund
the main focus of development currently is writing a self-hosted stage2 complier in Zig which will be much faster

1596889155
Ristovski
aah, I see

1596900055
danyspin97
How can I cast a []const u8 to []u8?

1596900117
Nypsie[m]
Create a new slice and copy over the bytes from the original []const u8 into the new []u8 slice. Altho, what are you trying to do?

1596900185
danyspin97
Nypsie[m]: i am trying to call std.fs.basename

1596900213
danyspin97


1596900469
ifreund
hmm? fs.path.basename() takes a []const u8

1596900490
danyspin97
ifreund: yup, but the problem is that exe is a []u8

1596900492
Nypsie[m]
I think what he's trying to achieve is to set the exe

1596900507
Nypsie[m]
basename returns a []const u8, but he's trying to save it as a []u8

1596900570
danyspin97
yea, that's the issue

1596900608
Nypsie[m]
You could resize exe using an allocator and then copy over the bytes into it from the result you got from basename()

1596900623
danyspin97
about the copy

1596900631
danyspin97
is it @memcpy?

1596900709
Nypsie[m]
Not sure if that works in this case, but std.mem.copy definitely does

1596900717
Nypsie[m]
(I never used @memcopy before)

1596900754
Nypsie[m]
std.mem.copy basically just loops over the slice and sets each value individually, so not the fastest way

1596900778
danyspin97
it compiles, thanks!

1596900804
danyspin97
the slice is 10-15 chars max, so it is fine

1596900919
Nypsie[m]
Architecture wise, you could probably solve this in an easier way

1596900938
ifreund
std.mem.copy() optimizes to @memcpy()

1596900951
ifreund
don't use @memcpy() without good reason

1596900981
ifreund
here you should just dupe() the slice that you get returned

1596900988
Nypsie[m]
Ooh good to know

1596901017
Nypsie[m]
Oof, completely forgot about dupe()

1596901066
danyspin97
yea, dupe is exactly what I needed

1596901069
danyspin97
thanks guys :)

1596909514
andrewrk
Ristovski, multithreaded compilation is on the todo list for self-hosted

1596909619
ronsor
I think using (try doFoo()) * bar is less confusing personally

1596909628
ronsor
hmm. I forgot to scroll dwon.

1596911696
scientes
MLIR is built for multi-threaded

1596911716
scientes
(of course LLVM, which was designed for it, has mistakes that prevent it)

1596912074
andrewrk
MLIR is not the right tool for the job for zig

1596919647
andrewrk
hmmmmm if Windows VirtualAlloc is giving us 64K aligned pages, that kind of implies that the page size is 64K not 1K

1596919693
Sahnvour
you mean 4K, not 1 ?

1596919746
andrewrk
yes, oops

1596919782
andrewrk
I think the tests will pass on #5998 now

1596919982
andrewrk
think about it: if you request 32K only from the page allocator, you basically have 32K of memory inaccessible. since VirtualAlloc will never return that second 32K because it is not 64K aligned

1596920001
andrewrk
may as well ask for all of it, right?

1596920029
Sahnvour
right, I remember bringing the point for the allocator allocating pages directly from the OS (don't remember the name)

1596920503
andrewrk
yeah. I think we have a lot of interesting improvements yet to be made to allocation in zig. I think the next step here is going to be making a series of gotta-go-fast benchmarks for allocation

1596920809
Sahnvour
also I discovered recently there's a VirtualAlloc2 that handles alignment, we might get rid of that loop in PageAllocator with it ? alas it's windows 10 only

1596920841
Sahnvour


1596922304
pixelherodev
Sahnvour: That still means improved performance on newer systems

1596922308
pixelherodev
Better than nothing

1596922445
Sahnvour
sure

1596922969
andrewrk
it's not necessarily better, it might just be doing the same logic we are

1596922978
andrewrk
unless it's an addition to NtDll

1596923297
Sahnvour
it is

1596923396
Sahnvour
hm, the docs says it's in kernel32, don't know if that makes a difference

1596926350
shakesoda
andrewrk: general purpose allocator is exciting

1596926812
andrewrk
shakesoda, about time, eh? :)

1596926822
shakesoda
yeah

1596926842
pixelherodev
Ah neat

1596927921
shakesoda
now if we can just get that 1717... ;)

1596928353
pixelherodev
Haha, yeah

