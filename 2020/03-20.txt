1584683749
adamkowalski
do we have a trait or anything that will let me check if something is a float?

1584694484
traviss
you could do a switch on @typeInfo(@TypeOf(somevar)).  for a float it will be: TypeInfo{ .Float = Float{ .bits = 32 } }

1584695732
marijnfs
I have a struct with function pointers that I set, how can I still use the syntactic sure where i can call the function like a method and the first 'self' argument is set?

1584696066
traviss
adamkowalski this works too: std.meta.trait.is(.Float)(@TypeOf(somevar))

1584710619
marijnfs
hmm i'm trying to figure out a pattern

1584710662
marijnfs
I'm working on my event queue, and there is a base event type. Then there are specialized types that embed a base type and set appropriate function pointers (kinda like allocators).

1584710677
marijnfs
But I'm not sure how to manage the memory for those guys

1584713365
ugi
hello everyone, i have a question about referencing the struct type idenfifier inside the same struct

1584713433
ugi
i need this to create a valid init method for the struct, but the struct is generic, so it can not be defined at top level

1584713448
ugi
is there a solution for this?

1584713863
fengb
@This():

1584714028
ugi
ah i see

1584714033
ugi
thank you for the answer!

1584714733
fengb
marijnfs: if all the types are defined up-front, simplest way is to use a union

1584714766
marijnfs1
fengb: thanks i'll check it out.

1584714768
fengb
Or you can go the allocator route and define an interface with FPs

1584714775
marijnfs1
FPs?

1584714779
marijnfs1
of function pointers

1584714804
fengb
function pointers yeah

1584714808
marijnfs1
yeah i was doing that, but how do you make a nice interface. The init function should take an allocator?

1584714823
marijnfs1
return a pointer to it's type?

1584714838
fengb
Look at how allocators are implemented

1584714902
fengb
Use a child struct, break out with @fieldParentPtr to find the rest of the data

1584715035
marijnfs1
fengb: yeah I was using that pattern. However somewhere you want to create these structs and manage them.

1584715050
marijnfs1
ideally the deinit of the super method releases it but that's not really possible i think

1584715224
fengb
If the total number of implementations is known ahead of time, I'd recommend just using a union. It'll be similar to how C unions or functional languages handle polymorphic dispatching

1584715242
fengb
Preferably tagged union

1584715523
fengb
Something like:

1584715564
marijnfs1
fengb: hmm interesting

1584715576
fengb


1584715754
marijnfs1
could a struct free itself? like if it has an allocator do .free(@This())

1584715860
fengb
Generally we use deinit()

1584715890
fengb
And yes it's possible, but I'm not sure if it's a common pattern to do so

1584716017
marijnfs1
fengb: yeah i see deinit used to release resources managed by the struct. But not the struct itself

1584717089
bsrd
Is it possible to mutate Strings with Zig?

1584717137
fengb
[]u8 is mutable but []const u8 is not. Literals are generally stored as []const u8

1584717154
shakesoda
yeah you just have to copy into something mutable

1584717213
fengb
You can do something like `var foo = "hello world".*;` That makes a mutable copy

1584717347
shakesoda
i revisited my file copying problem now that it's morning and i'm not half asleep and it was solved in ~5 minutes, heh

1584717368
shakesoda
i'm not entirely sure what i expected to happen with the original approach, but the brain was definitely not working.

1584717445
fengb
Your subconscious thought about it for 8 hours

1584717459
bsrd
Thanks ^^

1584717671
fengb
bsrd: be careful passing it around though. Immutable strings are allocated in the data section so they're always valid, but mutable strings have lifetimes that must be manually managed

1584717735
fengb
Literals are allocated in the data section*. Not all immutables are >_>

1584718013
TheLemonMan
read-only data is usually stashed in the rodata segment (only on systems using the ELF format)

1584718087
shakesoda
fengb: my subconscious can't think about something for 8 hours any better than the regular one could

1584718120
shakesoda
besides that, I'm almost certain it'd have been thinking about the book I was reading instead.

1584723462
andrewrk
TheLemonMan, can I send you a patch to try?

1584723504
andrewrk
it should solve undefined symbol when linking: __tls_get_addr #4748

1584723538
TheLemonMan
sure

1584723564
TheLemonMan
you can also try it yourself by running it on top of #4731

1584723625
andrewrk
sure I'll do that as well. it's the glibc-add-ld branch

1584723738
TheLemonMan
you didn't update link.cpp at all?

1584723779
andrewrk
nope. glibc has .abilist files for ld, the update_glibc script just wasn't looking at them

1584723829
andrewrk
I'm running tests locally with this branch, and then also the branch with 4731 merged in, if tests pass then I'll merge into master

1584723880
andrewrk
btw if you didn't hear it's looking like llvm 10 will release on monday

1584723895
andrewrk
my goal is to have all zig ci ready by then (using rc5)

1584723901
TheLemonMan
but we need a fake ld.so...

1584723930
TheLemonMan
eh fuck LLVM10, because of

1584723959
ifreund
how do I access something inside an unnamed union in a c struct?

1584723963
ifreund
this one here

1584723982
andrewrk
TheLemonMan, using your system package manager? they'll probably put a patch in for you to make it work

1584724015
andrewrk
for zig development purposes, for the next couple weeks one will likely need a source build of llvm 10 to contribute to zig

1584724028
TheLemonMan
of course, I'm not a caveman (nor I have a CPU that's powerful enough)

1584724094
scientes
TheLemonMan, CPU isn't the problem, it is disk space and ram

1584724104
scientes
with CPU you can just leave it running overnight

1584724104
TheLemonMan
picking the right name for ld.so is tricky, it should be either 'ld-<glibc version>.so' or 'ld-linux-x86-64.so.2'

1584724121
scientes
I did a LLVM bisect on a 5-year-old laptop overnight

1584724141
TheLemonMan
scientes, with ThinLTO disabled I don't hit any OOM error during the build

1584724173
scientes
also

1584724179
scientes
you don't have to build it if you run Debian

1584724192
andrewrk
TheLemonMan, regarding ld.so, I do not think there is a problem, because we already carefully choose the dynamic linker path name based on the target. whether the symbols are exposed in a .so file named ld.so or another doesn't matter, they're provided at runtime

1584724219
TheLemonMan
that's what I do, but

1584724261
scientes
ugggh, they said they would not use github issues, and now they are using them...

1584724262
TheLemonMan
andrewrk, I'm worried about .so built from Zig and linked by another toolchain

1584724319
TheLemonMan
if you add a VER_NEEDED for 'ld.so' that doesn't exist you'll get a nasty error

1584724363
andrewrk
oh is this the "SONAME" concept?

1584724376
TheLemonMan
I hope they migrate to github issues, I think andrewrk is getting tired of relaying my bug reports to the LLVM devs :P

1584724462
TheLemonMan
good question, I think VERNEED sections refer to the file name rather than the soname

1584724502
TheLemonMan


1584724523
TheLemonMan
ok it refers to the soname, I stand corrected

1584724579
andrewrk
oh, derp, glibc.cpp has a list of libs and ld is not in it

1584724655
TheLemonMan
readelf on ld-2.28.so says `Library soname: [ld-linux-x86-64.so.2]`

1584724738
andrewrk
right I see, so instead of e.g. ld.so.2, we need to name it ld-linux-x86-64.so.2

1584724778
andrewrk
I wonder if we can use std.Target.standardDynamicLinkerPath

1584725129
ifreund
ah, it's called unnamed_158 it seems. That number's going to change if the imports change right?

1584725246
andrewrk
ifreund, yeah that's not reliable. I think there is an open issue for this

1584725308
andrewrk
TheLemonMan, do you happen to have any non-x86 ld.so files lying around that we could learn what the SONAME is?

1584725345
TheLemonMan
nope, sorry

1584725347
ifreund
andrewrk: found

1584727805
forgot-password
When compiling to wasm32-freestanding, do I need something other than mark my functions with `export` for them to show up in JavaScript?

1584727858
fengb
export should be enough

1584728120
forgot-password
Hm, weird my exports object only contains `memory` and `_start`

1584728324
fengb
Can you inspect the generated wasm file with wasm2wat?

1584728367
forgot-password
Sure, let me find out where I can get that first

1584728493
forgot-password
While I'm waiting for that to finish: When I run `zig build --verbose-<anything>` I don't get any output. Is that right?

1584728535
fengb
zig build uses your build.zig args parser, not the compiler ones

1584728594
forgot-password
I see

1584728624
andrewrk
stage1 compiler:

1584728640
andrewrk
mikdusan, ^

1584728674
mq32
:D

1584728681
mikdusan
awww he cute

1584728770
forgot-password
fengb, here's the output from wasm2wat:

1584728935
andrewrk
forgot-password, which are you using? build-obj build-lib build-exe

1584728968
fengb
Hmm, build-exe doesn't export anything but maybe that's intended?

1584728973
forgot-password
I ran Builder.addExecutable, should I use a library?

1584728998
fengb
Web wasm files are considered libraries yeah

1584729011
forgot-password
Makes sense now that you say it

1584729012
fengb
build-lib works as you'd expect

1584729065
fengb
wasi is the only really supported executable atm. Maybe wasm32-freestanding should disable build-exe?

1584729235
forgot-password
Works now, thanks a lot :)

1584729502
andrewrk
fengb, maybe. I'm not sure. at least zig should help make the situation more clear

1584729526
andrewrk
doesn't wasm - even freestanding - have the concept of a main entry point?

1584729605
andrewrk
TheLemonMan,

1584729613
andrewrk
does the commit look ok?

1584729949
TheLemonMan
aye

1584730125
andrewrk
ok, I'll merge this into master (along with your debug.zig fixes) once the tests pass

1584730142
TheLemonMan
the next problem is: when start_windows_tls.zig is included in a library all the exported variables are output in the .h file

1584730153
andrewrk
hmmmmm

1584730159
TheLemonMan
and that trips several asserts in the gen_h thing

1584730174
andrewrk
maybe it's time to stop advertising this feature, disable it by default, and then add it in self-hosted only

1584730189
andrewrk
(then advertise the feature when it actually works)

1584730251
TheLemonMan
is anyone using the header-generation feature at all?

1584730308
shakesoda
I've been considering it

1584731268
andrewrk
I don't really want to support header-generation in stage1

1584731390
fengb


1584731456
fengb
So start does exist in wasm, but it's meant for "module init", not the traditional "_start"

1584731500
andrewrk
fengb, oh right. I got confused by that

1584731581
ifreund
hey, is there a way to work around translate_c errors like these until the bugs are fixed?

1584731607
ifreund
can I manually translate some of the functions? where would I put those?

1584731622
TheLemonMan
define xkb_map_new_from_names yourself

1584731671
andrewrk
ifreund, you can always make your own .h file, #include stuff there, expose some macros, and then @cImport that file

1584731703
ifreund
alright, will give it a try

1584732699
TheLemonMan
andrewrk, is #1265 accepted or still in the limbo?

1584732857
TheLemonMan
and should `foo() catch |_| { ... }` warn that `_` is unused?

1584733720
andrewrk
I'll resolve that for you right now

1584734995
andrewrk
TheLemonMan, there ya go

1584735000
marijnfs
why does the std.buffer.size give len() - 1

1584735005
marijnfs
can't i have an empty buffer?

1584735037
andrewrk
marijnfs, because it maintains a sentinel null byte. perhaps you want std.ArrayList(u8) instead of std.Buffer

1584735089
marijnfs
ah yeah and the buffer init needs the sentinel to be there already i guess

1584735098
marijnfs
shouldn't it take a [:0] or something then?

1584735183
marijnfs
ow wait it reserves the space. Then how do I get a buffer without a size

1584735213
marijnfs
i get a integer overflow when calling span because the buffer is empty. I will investigate

1584736361
forgot-password
When I use a custom panic handler, how do I make sure it doesn't call itself? If I don't add an unreachable to the end, the compiler complains that is not of type `noreturn`, but `void`.

1584736472
marijnfs
the init() in std.Buffer is a bit strange to me

1584736512
marijnfs
it uses mem.copy but targets self.list.items which should be from the arraylist. however this has one more element than input buffer so it will copy too much no?

1584736520
marijnfs
at least that looks to be causing my issue

1584736656
marijnfs
though i'm not sure

1584736762
andrewrk
forgot-password, you'll have to deal with that possibility in your handler. you can look at how the default panic handler does this for inspiration

1584736781
andrewrk
TheLemonMan just landed an improvement to this exact situation an hour ago

1584736806
andrewrk
forgot-password, here's the default panic handler:

1584736846
forgot-password
Awesome, thank you :)

1584736880
andrewrk
I'm planning to stream today

1584736900
BaroqueLarouche
continuing game dev ?

1584736932
ifreund
cool, I watch a bit of the stuff on youtube but haven't caught one live yet

1584736955
ifreund
s/ch/ched/

1584737117
andrewrk
let me think about the topic for a moment

1584737234
fengb
`self.instance.memory[start + offset .. start + offset + length];` this won't auto coerce into `*[length]u8`

1584737246
fengb
Is the best workaround to do `self.instance.memory[start + offset..][0..length]`?

1584737277
fengb
Length is comptime

1584737478
andrewrk
yeah that's the best thing we have right now

1584737518
andrewrk
I'm going to open a proposal to change slicing to [offset,len]

1584737527
andrewrk
that would be a really annoying change

1584737535
andrewrk
but it has to be considered

1584737539
fengb
Oh yeah are you still considering to slice by length instead of by end?

1584737548
fengb
Doh I'm slow :P

1584739568
forgot-password
Is it currently possible to have a custom handler for debug.warn?

1584739580
TheLemonMan
no

1584739588
andrewrk
forgot-password, the plan for that is

1584739665
TheLemonMan
the windows build seems stuck, again

1584739766
marijnfs1
how do i make a [:0]u8 out of a string constant

1584739768
andrewrk
I'll run a local build

1584739801
andrewrk
lld: error: undefined symbol: _tls_index

1584739833
andrewrk
marijnfs1, string literals already can coerce to `[:0]const u8`. if you want a mutable one you have to decide where to put the memory

1584739859
TheLemonMan
yeah, you have to include start_windows_tls.zig even for DLLs

1584739886
TheLemonMan
and then you'll hit the gen_h problems I told you before

1584739908
andrewrk
ah, I merged prematurely

1584740018
TheLemonMan
well I didn't know what to do about that, generating the header by hand is maybe the only viable alternative

1584740179
FireFox317
andrewrk, what time will you be streaming?

1584740336
andrewrk
TheLemonMan, want to send me your diff and i'll take it from there? will just disable gen-h by default and update ziglang.org to not claim this feature

1584740357
andrewrk
I'm guessing it's a small patch to start.zig?

1584740393
TheLemonMan
yep, copy the @import from WinMainCRTStartup into _DllMainCRTStartup

1584740397
andrewrk
ok

1584740410
andrewrk
I should look into

1584740450
andrewrk
FireFox317, 18:30 EST which is in 50 minutes from now

1584740515
FireFox317
nice :)

1584740529
TheLemonMan
Windows has a lot of entry points, WinMain DllMain wWinMain wDllMain WinMainCRTStartup DllMainCRTStartup and I'm pretty sure there are even more

1584741362
ifreund
down to my last error, but I can't seem to figure out how to work around translate c here as it's not an error with something I'm directly using

1584741412
ifreund
it's from a header that is imported by one of the headers I import

1584741941
marijnfs1
nice late night stream

1584741998
ifreund
alternatively, if someone could give me a pointer on how to fix

1584742179
andrewrk
I know what the stream topic will be

1584742190
andrewrk
it will be

1584742207
BaroqueLarouche
cool!

1584742974
ifreund
why aren't variable length arrays just translated to c pointers?

1584743114
andrewrk
c var args functions? that's not really how it works, some of the args might be in registers

1584743151
ifreund
this is just field of a struct

1584743236
ifreund


1584743271
marijnfs1
you can send a reminder on youtube i think

1584743304
ifreund
like that `uint64_t modifiers[];` should be `modifiers: [*c]u64,` right?

1584746441
ifreund
ok no, it's a good bit weirder than that

1584746455
ifreund
this is why I'm using zig not c :D

1584746686
mq32
<ifreund> like that `uint64_t modifiers[];` should be `modifiers: [*c]u64,` right?

1584746691
mq32
this should be [*]u64

1584746697
mq32
not c pointer

1584746704
mq32
you know that it's an array, not a pointer-to-one

1584747352
ifreund
true

1584747413
ifreund
yeah I think it does work, I was initially thinking the fact that it's a flexible array made things different, but for the purposes of linking at least it's just a pointer

1584747477
fengb
Oh it’s a struct vararray? Zig doesn’t support that :/

1584747606
fengb
One way to emulate it is defining it as `modifiers: [1]u64` and accessing with `@ptrCast([*]u64, &foo.modifiers)`

1584747658
ifreund
all I need to do is link to it, I just changed the c header to read `uint64_t *modifiers;` and it compiled/seems to run fine

1584747692
fengb
But that’s probably broken because the data is stored inside the struct, not as a pointer

1584747717
ifreund
yeah i see what you mean

1584748798
fengb


