1580429763
dimenus
enterprise software is so soul crushing

1580430143
daurnimator
yup

1580430153
daurnimator
did you expect something else?

1580430740
fengb


1580430757
fengb
I hope we can keep compile times sane :)

1580430823
gruebite
easy way to inspect memory (bytes) of a struct?

1580430881
fengb
You can print a human readable version by passing it into fmt (e.g. std.debug.warn)

1580430999
daurnimator
gruebite: std.mem.asBytes ?

1580431925
BaroqueLarouche
Has someone made a highlight.js jightlighter for Zig?

1580431964
BaroqueLarouche
I want to use it for a presentation that Iâ€™m making with reveal.js

1580432631
daurnimator
BaroqueLarouche: no; but I had that as a request here the other day :)

1580432649
daurnimator
there was someone that seemed sort of interested...

1580432719
daurnimator
lukeholder: ^

1580432809
BaroqueLarouche
Good

1580439285
dimenus
daurnimator: nope, my whole professional career has been in this kind of software

1580439287
dimenus
it's just so awful

1580439296
dimenus
lol

1580439435
leeward
Fun fact: I just hacked up a Zig wrapper around some bits of libsodium that I wanted to use, and it's so much cleaner than the C version.

1580439460
leeward
I had to write basically the same thing in C for work today, and really wish I could just do it in Zig.

1580439489
leeward
</end whine>

1580439503
leeward
wow, </end> I'm good at xml.

1580439731
fengb
</end-whine>

1580439745
pixelherodev
I'll do you one better

1580439747
pixelherodev
</xml>

1580439770
fengb
}

1580439779
pixelherodev
No no no...

1580439785
pixelherodev
I was indicating an end to XML itself.

1580439792
pixelherodev
Not a specific file.

1580439801
fengb
)))))))))

1580439813
pixelherodev
Noooo, s-exprs are good!

1580439823
pixelherodev
Relatively, anyways

1580439900
pixelherodev
On a completely different note, how do Zig stack traces work?

1580440056
pixelherodev
Oh wait, that's all in the stdlib probably, so I can just look there

1580441475
leeward
I usually just `gdb zigprogram`

1580441556
fengb
llvm_value = 0x0000000000000000

1580441559
pixelherodev
Right, should have clarified

1580441560
fengb
That's a null pointer right?

1580441568
pixelherodev
How the builtin.stack_trace type functions

1580441572
pixelherodev
I think so?

1580441581
pixelherodev
Wait

1580441595
pixelherodev
Depends on the type of `llvm_value`

1580441610
pixelherodev
And whether it's a Zig optional; I think Zig optional pointers have an extra bit for null instead

1580442066
leeward
Only allownull pointers do.

1580442088
leeward
Otherwise they use address 0 to represent null.

1580442193
fengb
Oh yeah it's ?usize so null makes sense

1580442762
pixelherodev
If it's `?usize`, I assume it has the extra bit

1580442772
pixelherodev
So whether it's null is unknown

1580443001
leeward
This code keeps passing tests on the first try. I'm suspicious.

1580443615
pixelherodev
Of the code, or the tests?

1580443634
pixelherodev
Ooh! Maybe someone did a trusting trust attack on GCC that targets the Zig compiler to make it look like tests pass when they don't, wasting resources greater than the GDP of a small nation on a prank!

1580444328
leeward
That seems more likely than that I'm writing code that works on the first try.

1580444761
pixelherodev
Or maybe you're not giving yourself enough credit?

1580444907
leeward
No, I've been doing this a long time. I'm pretty sure I don't not make mistakes.

1580445054
pixelherodev
I think those two statements are in opposition to each other

1580445109
pixelherodev
Been doing this a long time -> gotten better at it -> make fewer mistakes

1580445111
pixelherodev
I recently wrote a full C library with

1580445116
pixelherodev
I wrote the whole thing, and didn't do any memory tests until a week ago or so, and not

1580445179
pixelherodev
And since the universe doesn't revolve around me, I suspect most people get better with more experience (even if some people seem determined to prove me wrong :P)

1580447294
daurnimator
Are tracebacks meant to work on windows?

1580447596
andrewrk
yes. is there a regression?

1580447620
gruebite
can i format arguments in different ways? padding, hex, rounding to decimals, binary, hex

1580447680
gruebite
said hex twice :D

1580447745
daurnimator
andrewrk: I just get "Unable to dump stack trace: Unable to open debug info: FileNotFound"

1580448171
gruebite
found the src, nvm

1580448375
daurnimator
(and yes I did copy across the .pdb file)

1580448835
gruebite
okay, i have a weird bug. i'm passing a c struct (extern) to a c function. on zig side i see 3 fields exactly how i set them, on the C/C++ side (C ABI to a C++ function), it's completely different and null fields have stuff in them.

1580448841
gruebite
any idea what could be happening?

1580448855
gruebite
passing by value

1580449258
gruebite
this is an overview:

1580449272
gruebite
i feel like it's something simple, but haven't found it

1580449396
gruebite
i've checked size of the struct on both sides: C side 24 bytes, zig side 24 bytes.

1580449725
gruebite
only thing left i can think of is if sysv_abi means something

1580449739
gruebite
for this case

1580450565
gruebite
i feel like this is a calling convention error, gut feeling

1580451780
mikdusan
andrewrk: 32 files changed, 1681 insertions(+), 862 deletions(-) gets to this (still WIP) and more; including mem::Allocator interface, and all code shifted to use mem::c_allocator:

1580451783
mikdusan


1580451934
mikdusan
no more string-literals -> `AstNode *node = heap::c_allocator.allocate<AstNode>(1);`

1580452097
daurnimator
andrewrk: I'm looking into the makePath on windows thing

1580452141
daurnimator
interesting observation is that with the CREATE disposition you can't tell failure modes of ENOTDIR and EEXISTS apart.

1580463731
mq32
yeah, me too

1580463750
mq32
it would be funky to provide a GDNative/Zig scripting directly brought with the engine

1580464518
gruebite
:D

1580468200
mq32
gruebite: comptime would allow stuff like GDNative.registerClassByType("MyClass", MyClass)

1580468217
mq32
where comptime introspection allows automatic translation of function calls :)

1580471478
Snektron
Is that possible, mq32?

1580471517
Snektron
I would think you run into the issue where you can't generate struct fields at comptime

1580472450
mq32
Snektron, i don't need to generate struct fields for that :)

1580472464
mq32
i only need to call register-functions and argument translations

1580472475
mq32
both doable with state-of-the-art zig code

1580472515
betawaffle
is it possible to link an external symbol with a different name from the name you want to use in zig code?

1580472555
betawaffle
similar to @export, but in the other direction?

1580472715
mq32
betawaffle: const MySym2 = struct { extern fn MySym1() void; }.MySym1;

1580472727
mq32
don't know if the syntax is right, but that's the idea

1580472755
betawaffle
yeah, i guess i was wondering if there was a nicer way than that

1580476345
betawaffle
why does the compiler abort if I try to get the @typeInfo of a @cImport?

1580476357
betawaffle
concurrent modification

1580476357
betawaffle
Panicked during a panic. Aborting.

1580478464
betawaffle
can i format a comptime_int to include it in a @compileError?

1580479617
fengb
betawaffle:

1580479636
betawaffle
ok cool

1580479662
fengb
I never tried that before. Pretty neat :P

1580481625
phillyiscool
I think I'm having trouble understanding defer and its timing. I am creating a std.SinglyLinkedList in a function, and passing that into another function. If I call `defer list.destroyNode(node)` then there will be a segfault.

1580481643
phillyiscool
Does defer not run after the current function exits?

1580481672
mq32
okay, i think i found fundamental a problem with translate-c

1580481678
phillyiscool
Oh, end of current "scope"

1580481856
BaroqueLarouche
mq32: which is ?

1580481909
phillyiscool
So my issue is not related to defer I think, because even if I call list.destroyNode()

1580481949
mq32
BaroqueLarouche: something tries to translate function pointers to c-pointers to functions

1580481949
mq32
so

1580481949
mq32
[*c]extern fn () void

1580481951
phillyiscool
So the passing into a function part isn't the problem, calling destroyNode() at all, anywhere seemingly, causes a segfault

1580481951
mq32
which should be just "extern fn() void"

1580482006
fengb
phillyiscool: can you show your code?

1580482044
BaroqueLarouche
mq32: I see!

1580482089
fengb
mq32: it's supposed to be an optional:

1580482119
phillyiscool
fengb:

1580482129
mq32
yeah, my current test is actually translating it into an optional

1580482179
mq32
but more complex stuff seems to be translated wrong

1580482186
mq32
and wants pointers-to-function-pointers

1580482298
fengb
phillyiscool: it looks like you're using the more raw API. `ListOfTransitions.init()` should have captured the allocator. My guess is that `destroyNode()` is trying to use the uninitialized "allocator" variable

1580482330
fengb
Oh wait you passed it in, hmm

1580482346
phillyiscool


1580482358
phillyiscool
SinglyLinkedList(type).init() doesn't take an allocator

1580482379
phillyiscool
Which is unfortunately because it means there's not a list.destroy() to destroy them all, hence my need to iterate

1580482389
fengb
Oh sorry, I was thinking of ArrayList

1580482416
phillyiscool
If there's a better data structure to filter an array, which is what I'm doing, I'm open to that

1580482559
mq32
fengb: oh, 17 hours

1580482560
fengb
Oh result location footgun

1580482561
mq32
i should update

1580482565
mikdusan
phillyiscool: try taking (it = node.next) out of sub-parens, and put it at end of loop block.

1580482575
mikdusan
and put node into a tmp var

1580482580
fengb
You also need to make a copy

1580482587
fengb
Yeah this has been a problem >_>

1580482596
betawaffle
that copy is weird

1580482626
fengb
`|node|` represents the original memory location, so it's use-after-free if you destroy it in the block

1580482640
phillyiscool
ah

1580482643
phillyiscool
let me try this...

1580482660
fengb
It's a design flaw :(

1580482678
mikdusan
meh personally I like it; consistent with result location semantics

1580482686
phillyiscool
Ok, this works:

1580482687
phillyiscool
while (it) |node| {        var n = node.next;        candidates.destroyNode(node, allocator);        it = n;      }

1580482690
phillyiscool
woops

1580482701
phillyiscool
Well you get the idea

1580482704
betawaffle
mikdusan: it just needs to be communicated better

1580482704
phillyiscool
Thank you all very much

1580482761
fengb
Eh, `|*node|` makes it explicitly in memory. I sorta feel like `|node|` should hoist it out as a copy by default, and reuse memory only as an optimization

1580482964
mq32
fengb, BaroqueLarouche: i found the culprit

1580482970
mq32
it's "__attribute__((sysv_abi)) void (*callback2)(void);"

1580482995
mq32
this gets translated to "[*c]fn () callconv(.C) void"

1580483076
frmdstryr
Is there a "zig" way to cast a u16 to [2]u8?

1580483084
mq32
@bitCast

1580483103
mq32
whereas the same thing without the attribute gets translated right

1580483109
mikdusan
std.mem.something ? :)

1580483118
frmdstryr
ah thanks

1580483191
mq32
do we have an issue for that already?

1580483198
fengb
readInt{Native,Little,Big}

1580483376
dimenus
i have an off topic question, does anyone know the hotkey to go down a visual line in vim instead of an actual line?

1580483387
dimenus
eg when code wraps

1580483412
TheLemonMan
dimenus, gj

1580483422
TheLemonMan
mq32, that issue has been fixed yesterday, wasn't it?

1580483450
TheLemonMan
are you

1580483487
dimenus
TheLemonMan: thank you sir

1580483499
andrewrk
daurnimator, I don't think it makes sense to add windows support for openat at the std.os layer

1580483500
mq32
TheLemonMan: doesn't seem so

1580483501
andrewrk
mikdusan, that looks promising!

1580483519
TheLemonMan
dimenus, I've mapped gj/jk to j/k

1580483520
mq32
TheLemonMan, yeah, me too now :D

1580483536
andrewrk
dimenus, I think it's `gj` and `gk`

1580483554
andrewrk
the #vim channel is quite helpful

1580483569
dimenus
thanks all

1580483570
mq32
TheLemonMan: i have the latest zig update (0.5.0+926a7adb3)

1580483572
TheLemonMan
mq32, gimme some code and I'll fix it

1580483582
TheLemonMan
no code, no fixes

1580483584
mq32
hm

1580483597
mq32
i'll write you a "how to" to reproduce my problem

1580484030
fengb
andrewrk: ran into an actual regression with generators

1580484058
andrewrk
thanks I'll take a look

1580484089
fengb
Not solvable without comptime async or actual generators

1580484108
fengb
Plus that weird footgun where the generator breaks if you try to use async in tandom

1580484117
fengb
So this abstraction is getting pretty leaky :P

1580484296
fengb
Oh sorry, I meant actual regression in the implementation, not the codebase

1580484301
fengb
Don't mean to start a panic

1580484316
fengb
In the implementation if we choose to proceed forward*

1580484328
fengb
... sometimes I wish I could go back in time and change my words

1580484457
mq32
TheLemonMan,

1580484465
mq32
my internet sucks a lot right now, but hey: code!

1580484478
andrewrk
afk for a bit

1580484483
mq32
looks like it's "easy" to fix, but i don't know

1580484486
TheLemonMan
mq32, worksforme

1580484519
TheLemonMan
I think you forgot to run `make` after pulling master :P

1580484593
fengb
Working here too

1580484623
fengb
Although I get a spam of "unable to translate C expr: unexpected token Id.Identifier" afterwards

1580484658
fengb
Ah that's a separate issue

1580485604
mq32
TheLemonMan, i probably should build from source again :D

1580485617
mq32
i'm always using the prebuilt version as it works "enough" for me

1580485657
fengb
The source build is blazing fast now

1580485663
mq32
neat

1580485665
mq32
but i'm a lazy man

1580485669
mq32
i do "zig-update"

1580485676
mq32
and get the latest build from the website :D

1580485685
fengb
... I say as a spoiled guy with 6 hyperthreaded cores

1580485706
betawaffle
only 6?

1580485716
fengb
Sorry I'm not on Ryzen

1580485725
TheLemonMan
the source build is only moderately fast when you have 2 cores :(

1580485745
mq32
fengb: i have 4*2 cores on my laptop

1580485746
fengb
The best part about not having an extra "lib" directory: I don't have to use override-lib-dir anymore!

1580485784
fengb
I sometimes dream of building a desktop machine just to see how far I can push it

1580485848
fengb
Oh, the new Macbook Pro 16 has 8 physical cores. I should upgrade

1580485933
fengb


1580486637
mq32
TheLemonMan: fixed â™¥

1580486804
TheLemonMan
now I can finally breathe again

1580486821
mq32


1580486833
mq32
it compiles now correct, now i'm looking forward for non-crashing

1580486840
mq32
but! not tested yet, so may work first short

1580486993
TheLemonMan
I usually do `zig run file.zig || poweroff` so that I'm forced to get it right the very first time :P

1580487313
mq32
HARDCORE

1580487653
fengb
zig run file.zig || sudo rm -rf /

1580487677
BaroqueLarouche
hahahahah

1580487697
BaroqueLarouche
the nerdy version of the russian roulette

1580487891
mq32
BaroqueLarouche:

1580487983
mq32
anyone here participating in global game jam?

1580488084
TheLemonMan
nah, I don't like jam

1580488101
BaroqueLarouche
not this year

1580488280
frmdstryr
How can I make one package depend on another?

1580488312
frmdstryr
I have both in build.zig but package B cannot use package A

1580488418
metaleap
frmdstryr: b.addFoo(..).addPackagePath("pkgname", "...../srcfilepath.zig") should work?

1580488453
metaleap
( where Foo is Executable / StaticLibrary etc and "pkgname" is what B uses for A via @import("pkgname") )

1580488478
seoushi
frmdstryr: maybe the gba builder.zig will be a helpful example

1580488601
frmdstryr
const elf = b.addExecutable("firmware.elf", "startup.zig");

1580488606
frmdstryr
elf.addPackagePath("stm32", "../../lib/stm32/index.zig");

1580488611
frmdstryr
elf.addPackagePath("tft", "../../lib/tft/tft.zig");

1580488614
frmdstryr
is what I have

1580488627
frmdstryr
the tft.zig cannot use @import("stm32")

1580488660
BaroqueLarouche
build tft as a static library ?

1580488752
metaleap
still.. i would have expected the above to work. why make a static lib here? thought all the packages would still be pulled in into the "big everything-joined internal single .zig source file" (whatever the moniker is for this concept) here

1580488790
fengb
Weâ€™ve mostly punted on making libraries shareable until package manager is a real thing

1580488791
metaleap
aka becoming equal compilation units with access to all the named-package-paths

1580488803
fengb
So itâ€™s pretty raw atm and will most likely change soon

1580488928
metaleap
so is this just a missing feature that one could PR in? build system should remain and continue to be top notch regardless of whatever pkg-mgr stories come and go over time =)

1580488985
fengb
Iâ€™m pretty sure there exists an incantation that works but Iâ€™m not too familiar with it either

1580489020
fengb
Also build docs could use some love :p

1580489083
metaleap
(aka independent of any pkg-mgr superstructure, as now it is self-contained, fully-programmable, and independent of some-or-other "package" super notion, package.jsons or yamls or .locks and all that blergh =)

1580489148
metaleap
well i'll run into the same issue as frmdstryr in ~a few days according to my schedule so i'll report back then

1580489349
metaleap
by the by! i've taken such a liking to zig's informal ident-casings (snake / pascal / camel) philosophy that im now startled everytime seeing another `error.PascalCasedEnumerant`

1580489411
betawaffle
metaleap: i thought pascal-case was the right one for errors?

1580489525
metaleap
dunno it's certainly everywhere in zig code but i mean the "types are PascalCased, funcs are camelCased, everything else snake_cased". taking it too literally i reckon. fine if convention for error enumerants is like it is

1580489567
fengb
Errors are pascal:

1580489569
metaleap
just got so used to "parsing by case" already  =)  anyway

1580489602
betawaffle
i'm used to camel/pascal case from Go, but for some reason i feel like zig functions should be snake case... maybe it's be cause of all the c code i'm interfacing with

1580489615
betawaffle
because*

1580489955
seoushi
I'm assuming there has been discussion on multiple return values in zig? Is it something that might make it in or is just creating a struct with multiple values to return just the way to go?

1580490024
companion_cube
I think tuples are the way to go

1580490040
seoushi
oh. I will read up on those then.

1580490054
betawaffle
there are no docs on tuples yet, right?

1580490073
fengb
Yeah using a struct for now. Vote for declared tuple types here:

1580490090
seoushi
ok

1580490223
pixelherodev
`I usually do `zig run file.zig || poweroff` so that I'm forced to get it right the very first time :P` wait, you run `zig` as root?

1580490340
metaleap
companion_cube: the difference between current-zig's anonymous structs (as passed to std.debug.warn etc) and "tuples" is still eluding me

1580490361
fengb
Those are tuples

1580490373
seoushi
I've also been using the latest stable of zig from brew on mac and whatever is in arch's repos. Is that the best way to go or is using master generaly safe? The pace of this project makes me want to use master plus then I can file bug reports without feeling they have already been fixed

1580490387
fengb
Tuples are `.{ 1, 2 }` (unnamed arguments)

1580490396
metaleap
oh i can see now in your linked thread fengb --- all good then

1580490404
fengb
`.{ .a = 1, .b = 2 }` is anon struct

1580490447
metaleap
understood, in my head i called them "anon structs with anon fields" but also at the same time "tuples"

1580490518
metaleap
if `tuple{` is just sugar for the same under-the-hood-mechanisms thats cool by me

1580490520
fengb
seoushi: master is pretty stable. The CI catches a lot of the errors. There's been a lot of breaking changes past 0.5.0 so you probably don't want to use that anymore

1580490565
seoushi
thanks. I'll work on getting the lastest on my systems then before I devel too far into my project.

1580490620
fengb


1580490668
fengb
metaleap: yeah I think right now all it needs to do is give tuples a declared type. I have some deeper questions but they don't have to be done yet

1580490706
fengb
lol that was my exact followup

1580490723
metaleap
heh. paste it in there for record / history

1580490738
seoushi
just that documentation alone for master is worth the upgrade hah. so nice to have the TOC on the left side

1580491595
seoushi
ah damn Assertion failed at /Users/sean/Projects/zig/src/codegen.cpp:9484 in gen_root_source. This is a bug in the Zig compiler. I'll try and track down what is causing this tonight

1580491920
seoushi
ah nm. seems to be my fault. I just copied the zig from bin to replace what was in /usr/local/bin and that causes issues. running from the build folder works as expected

1580492360
fengb
It needs the lib files

1580492399
fengb


1580493544
gruebite
mq32: you are following the exact path i have followed :P

1580493619
gruebite
mq32: i have a repo, do you want to use that?

1580493910
gruebite
anyone familiar with c translation and zig's ffi wanna take a look at this:

1580494452
gruebite
mq32: i am also hanging out in gdnative on godot's discord

1580494848
metaleap
desire: a top-level `pub comptime var ...`

1580494911
metaleap
scenario: importer of a .zig can override certain logics (perhaps related to field-names -> logics injected/overridable by importer, if so offered by importee)

1580494942
metaleap
is there an Issue for that? haven't found when searching. dont wanna spam there, so asking beforehand

1580494972
metaleap
(incidentally the `var`s I'm talking about would be `fn`-typed)

1580495018
metaleap
wait i seem to remember top-level decls are "intrinsically comptime", will try if that works setting some `fn`-typed `pub var` from the outside to some `fn` with comptime args in it

1580495117
metaleap
"unable to evaluate constant expression", so use-case not currently addressable. so the question remains

1580495318
betawaffle
what's the closest zig equivalent to Go's `copy` (where it returns the number of elements copied)?

1580495453
shakesoda
if anonymous structs and tuples/lists use the same syntax anyway, would it not be possible to do both at the same time (giving you an anonymous struct with an array part)?  i haven't thought this through in any kind of detail, i'm just thinking of how useful that ability is in lua

1580495604
shakesoda
i guess it's easy enough to debate if it's any better than just embedding said array, just thinking out loud about it

1580495793
shakesoda
betawaffle: @memcpy? you'd need to divide the size of the type by the byte length yourself, though

1580495874
shakesoda
there's mem.copy, too

1580496189
gruebite
assembly of zig vs. c:

1580496210
gruebite
my calling convention knowledge is oooold

1580496397
gruebite
TheLemonMan: i have another bug

1580496414
TheLemonMan
yeah the compiler got the calling-convention wrong

1580496462
gruebite
you've solved it? i figured it was that but it was slow for me to check

1580496547
gruebite
i'm going to create an issue

1580496569
TheLemonMan
I can have a look, my advice is to avoid passing/returning anything but scalars

1580496584
TheLemonMan
eh, fuck that, only scalars

1580496811
gruebite
:D

1580496821
gruebite
don't have control over the api. third party.

1580496858
gruebite
TheLemonMan:

1580496892
TheLemonMan
just to be extra sure we're on the right track... are you on osx?

1580496962
gruebite
linux

1580496970
gruebite
Linux zork 5.4.13-arch1-1 #1 SMP PREEMPT Fri, 17 Jan 2020 23:09:54 +0000 x86_64 GNU/Linux

1580496994
jayschwa
does Zig have a built-in like `rotate_right` in Rust? nothing is jumping out at me when I search the langref for "rotate" or "shift".

1580497021
TheLemonMan
jayschwa, math.rotr

1580497067
jayschwa
Thank you

1580498712
metaleap
give it to me straight:

1580498754
metaleap
i cannot pass around at comptime `fn`-typed values, right? i try all kinds of shenanigans for this but it always compile-errs

1580498784
metaleap
now sure an arg or a field of type `fn (....) ..` is generally a function-pointer hence a runtime value

1580498825
metaleap
but thought whether through some hackery i can "pass comptime-logic around (from one .zig to another .zig) while staying at comptime"

1580498928
pixelherodev
Pretty sure you can pass comptime function pointers...

1580498938
pixelherodev
s/pointers/`fn ()void` at least

1580499138
metaleap
well it's just that in my latest attempt to do so, i couldnt possibly make sense of this compiler-error, given that "all top-level decls are order-independent":

1580499185
metaleap
aaaargh my bad

1580499186
metaleap
ignore

1580499289
fengb
shakesoda: I think there's competing ideas of whether we should treat tuples as just structs or split them conceptually

1580499324
fengb
I'm not sure either way, and my proposal was intended only to expose a real type to the compiler

1580499384
shakesoda
fengb: i'm generally in favor of them being the same concept, gets me a little closer to having my beloved lua tables :)

1580499422
fengb
daurnimator mentioned it's weird that we have foo[0] == foo.@"0"

1580499485
gruebite
i like them being the same

1580499499
gruebite
is there a way to dynamically get a tuple's nth member?

1580499578
gruebite
foo.@0 or, `var i = 0; foo.@i`

1580499581
metaleap
gruebite: it would certainly involve a lot of compiler smarts to turn into the appropriate ptr-arith based on the sizeof.

1580499604
fengb
Yeah I'd doubt it because the tuple has heterogeneous types

1580499612
gruebite
well even inlining

1580499618
gruebite
like an inline loop is hard, yeah?

1580499641
fengb
Oh I mean it won't be possible at runtime. You might be able to do comptime magic

1580499656
gruebite
yeah runtime would be more of a bonus

1580499681
metaleap
well that you can already do, just a bit noisy looking with the @"0" etc

1580499692
gruebite
i meant being able to iterate at comptime

1580499744
fengb
You can access it with `@field(struct, comptime string)`

1580499755
fengb
So you should be able to do an inline for loop of sorts

1580499768
metaleap
yeah together with @memberName .. it gets a bit wordy

1580499770
metaleap
but works

1580499779
metaleap
(if you loop with index)

1580499824
fengb
Anyway, this discussion is getting too complicated lol. I just wanted to declare a tuple type in the function :(

1580499935
fengb
Cause this is gross:

1580500088
gruebite
that is gross

1580500203
fengb
Explaining this to Rocknest... I may have stumbled upon a better solution lol

1580500221
gruebite
nice. wasm interpreter

1580500263
fengb
I keep getting sidetracked. So far, I've barely created an AST

1580500717
gruebite
i am currently blocked on my project

1580501055
fengb


1580501131
BaroqueLarouche
there's already a commercial product that uses it ?

1580501295
fengb
My proposals are so minimal. I wish I could write a book like some of you

1580501373
fengb
"Nim, Zig, Jai, Odin, Beef" what a motley crew of silly names ðŸ™ƒ

1580501570
metaleap
trending towards smaller and smaller names.. no more "borland turbo modula Enterprise Edition" (made up but captures the past)

1580501612
gruebite
eventually they're just be alphabetical and then we've come full circle

1580501615
gruebite
they'll

1580501619
metaleap
and then you get down to "V" and you're back at "C" and "B".. ah well.

1580501634
gruebite
might switch to single unicode characters

1580501658
gruebite
alpha, snowman, smiley

1580501676
BaroqueLarouche
the U+1F4A9 language

1580501753
gruebite
that has to exist already

1580501766
gruebite
do you know that code off-hand?

1580501792
BaroqueLarouche
I searched it lol

1580501801
gruebite
easy mnemonic: one "f" for a no

1580501817
fengb
I love how "pile of poo" is its official name

1580501843
fengb
"A swirl of brown poop, shaped like soft-serve ice cream with large, excited eyes and a big, friendly smile."

1580501844
gruebite
or: one fuck for a no

1580501860
gruebite
i love it. someone enjoyed writing that

1580501876
pixelherodev
True minimalist programming language name:

1580501884
pixelherodev
It's just a single whitespace character

1580501884
gruebite
the space

1580501896
gruebite
goodluck searching it

1580501897
fengb
But... which whitespace character

1580501908
pixelherodev
The world may never know

1580501914
gruebite
it changes every day

1580501929
pixelherodev
It changes every time someone asks which character it is

1580502027
fengb
Searching for a type declaration in C is actually pretty hard :(

1580502064
pixelherodev
Isn't it just a `gd`?

1580503340
metaleap
can never make sense of this err-msg: "values of type '(enum literal)' must be comptime known"

1580503443
metaleap
ah usually it's resolved by changing from `.MyEnumerant` to `my_import.MyEnumName.MyEnumerant` .. which i remember after 30 seconds

1580505086
sirnaysayer
Hey all, when attempting to use stdout from stdio.h Im getting a unable to evaluate constant expression error. Line 13 of

1580505197
sirnaysayer
translate-c gives me (__acrt_iob_func(@bitCast(c_uint, @as(c_int, 1)))) as the argument to the function, but it doesn't recognize the identifier for the builtin

1580505910
pixelherodev
You could just use Zig's stdout functionality?

1580505935
pixelherodev
`std.io.getStdOut().outStream().stream` returns a writable stream IIRC

1580507196
dimenus
is [*:0][*:0]const u8 a valid type

1580507198
dimenus
*?

1580507446
TheLemonMan
every time I try to use translate-c to save some time I get a damn segfault

1580507649
dimenus
hmm, i have not had that experience. It worked for vulkan, vulkan memory allocator, libmpg, and libsoundio (thanks andrewrk!)

1580507916
TheLemonMan
don't count too much on your luck, you'll slam face-first into a segfault sooner or later

1580508739
pixelherodev
It works fine for me

1580508750
pixelherodev
ACPICA is the only big thing I've used it on though

1580508775
fengb
dimenus: no but you can do `[*:null]?[*:0]const u8`

1580508824
pixelherodev
`[*:0]T` requires T to be terminatable by zero; 0 is not a valid `[*:0]T`

1580508845
pixelherodev
s/valid `[*:0]T`/valid `[*:0]const u8`

1580508854
dimenus
got it

1580508856
dimenus
thanks

1580508915
fengb


1580511293
traviss
tuple indexing?!? mind slightly blown that this works: `const tup = .{ 0, 1, 2 }; inline for (tup) |val, i| warn("val {} {}\n", .{ val, tup[i] });`

1580511338
traviss
i didn't realize that tup.@"0" == tup[0]. cool. go tuples! :)

1580511739
marijnfs_
yeah just code running during compilation

1580511999
andrewrk
TheLemonMan, I fixed an incorrect enum in clang.zig in the llvm10 branch

1580512012
andrewrk
I should probably backport that to master

1580512044
andrewrk
fengb, so.....

1580512099
andrewrk
I just got off a plane, laptop is dead. But I tried just making the "output" function of std.fmt.format comptime, and it totally fixed the async issue

1580512152
andrewrk
Also I think the generator approach is inherently flawed because it doesn't catch errors at compile time

1580512182
andrewrk
So I'm blazing along with better async I/O support in std

1580512199
fengb
Sure sounds good

1580512239
metaleap
this compiles: `var should = if (comptime (field_type_id == .Optional)) (field_value != null) else true; if (should) {...}`

1580512252
metaleap
this wont: `if (if (comptime (field_type_id == .Optional)) (field_value != null) else true) { ...  }`

1580512252
andrewrk
A few bug fixed,  some cross platform work, maybe some event loop fuzz testing,  and then I plan to put serious effort into self hosted

1580512272
metaleap
ie. a mere expression re-location. bug or am missing sth?

1580512281
andrewrk
The comptime there is superfluous

1580512295
metaleap
ok, same without

1580512364
fengb
"you win zig" -- andrewrk 2020-01-04T03:13Z

1580512367
fengb
I had this commit message waiting, but you deserve it more :P

1580512397
andrewrk
Yeah sorry. You put so much effort into that

1580512408
andrewrk
Turns out there was a low effort solution all along

1580512419
fengb
Not a problem. I ran into a bunch of snags too

1580512435
fengb
And it's free learning

1580512485
metaleap
the error given for the above is "control flow attempts to use compile-time variable at runtime". but again, just expressions being re-positioned

1580512504
metaleap
interestingly: change the `var` into a `const` and same compiler error

1580513902
daurnimator
andrewrk: why wouldn't windows participate in "BYO OS"?

1580513927
daurnimator
like..... if microcontrollers have an `openat`; why wouldn't windows

