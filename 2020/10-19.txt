1603065809
waleee-cl
ryuukk_:  I think you need to create steps for hello/.../cube for that to work?

1603066670
ryuukk_
waleee-cl:

1603067022
ryuukk_
if i remove: "exe.install();" it works

1603067131
ryuukk_
not sure if that's a a bug or it's intended?

1603067163
ryuukk_
by it works i mean, when i call "zig build cube" it only creates the exe for the cube step now

1603067205
waleee-cl
ryuukk_:  what happens if you try a run command?

1603067240
ryuukk_
zig build run doesn't work

1603067272
ryuukk_
but i get the behavior i wanted once i removed the exe.install(), so it's fine

1603067328
ryuukk_
"zig build cube" will create and run the exe i want

1603067349
ryuukk_
previously, it would create an exe for all steps

1603067367
ryuukk_
removing exe.install() solves that "issue"

1603067403
ryuukk_
maybe the compiler doesn't check for the step name before calling the install function, i'll need to check, but dunno where :p

1603067480
waleee-cl
It's in

1603073125
kandinski
what's the expected way to use regexps in zig as of today? import a C lib, is there a good zig-pcre alternative, other?

1603076339
ryuukk_
hmm there is no operator overloading in zig? :( how i am supposed to do math operations with structs (vectors mainly)

1603076481
daurnimator
correct.

1603076491
daurnimator
vectors are built in to the language

1603076509
daurnimator
otherwise you use methods.

1603076585
ryuukk_
methods is hard to read for math operations

1603076592
ryuukk_
> vectors are built in to the language

1603076594
ryuukk_
what do you mean?

1603076769
daurnimator
std.meta.Vector(N, T)

1603076850
ryuukk_
but that doesn't fix my problem with operator overloading

1603076893
ryuukk_
var result = a + b / 2;   VS  var result = Vec3.div(Vec3.add(a, b), 2)

1603076901
ryuukk_
you can see wich one is easy / hard to read

1603076919
daurnimator
vectors are a primitive type

1603076924
daurnimator
--> they come with operators working.

1603076945
ryuukk_
with about matrices?

1603076957
ryuukk_
what's the fields of the vector?

1603076957
daurnimator
no matrices.

1603076986
ryuukk_
then it doesn't solve my problem

1603077018
daurnimator
one of the important parts of zig's design is no-hidden-control flow

1603077031
ryuukk_
but it clases with readability

1603077034
ryuukk_
clashes

1603077039
daurnimator
I disagree

1603077054
daurnimator
if I'm reading code that contains `a + b`, I know that it's not some weird overloaded thing.

1603077083
ryuukk_
same for Vec3.add, what it does? maybe some weird overloaded thing too :p

1603077093
ryuukk_
a + b, we all learn at school

1603077108
ryuukk_
that's math

1603077142
daurnimator
ryuukk_: yes, but function call `()` means "go look over there"; and the `Vec3.` tells you where to look

1603077157
ryuukk_
same for the +

1603077167
daurnimator
it doesn't though

1603077177
ryuukk_
you know what are the types

1603077179
ryuukk_
compiler too

1603077225
daurnimator
please see the closed issues for more rationale. e.g.

1603077283
ryuukk_
yes i read them already, it doesn't make sense to not allow people to use  + - / * for doing math

1603077285
daurnimator
also

1603077313
ryuukk_
i

1603077325
ryuukk_
> No hidden control flow

1603077325
ryuukk_
this is not good argument

1603077347
ryuukk_
we are talking about math

1603077377
ryuukk_
we even allow 1.2 + 1.5

1603077382
ryuukk_
floating points, what it does?

1603077403
ryuukk_
0.0 == 0.0, not always true, so hidden control flow

1603077516
daurnimator
that's not control flow.

1603077571
ryuukk_
that decision is to not allow people to do math at all

1603078355
kandinski
ryuukk_: not true at all

1603078558
ryuukk_
it is, that is why python is used a lot in that field

1603078572
ryuukk_
they allow operator overloading, wich make things easier

1603078709
ryuukk_
i hope it is not final word for oprator overloading

1603078735
kandinski
it's one of the first reasons for the language, so...

1603078757
kandinski
I mean, julia is a lovely language

1603078857
ryuukk_
i don't know what julia is

1603078876
kandinski
a language with operator overloading

1603078889
ryuukk_
so you tell me to use an other language?

1603078897
kandinski
which already exists and has a jit

1603078912
kandinski
I'm not telling you to do anything

1603078955
ryuukk_
> [5:39:17 am] <kandinski> I mean, julia is a lovely language

1603078962
ryuukk_
why even mention julia in a zig irc

1603078998
kandinski
why keep insisting on operator overloading in a zig irc, when zig is designed to have no hidden control flow

1603078999
ryuukk_
the point is not what other people do, the point is, what does solve my problem

1603079011
ryuukk_
because it clashes with readability

1603079019
daurnimator
as I said: we believe it does the opposite

1603079021
ryuukk_
wich one to pick when both are the reason this language exists?

1603079027
daurnimator
it helps with readability when reading all code.

1603079036
daurnimator
there's a trade off here

1603079042
ryuukk_
math isn't just a + b

1603079043
daurnimator
and zig has picked one side.

1603079049
kandinski
what daurnimator said, it's a tradeoff, and zig is defined by choosing one side.

1603079057
ryuukk_
complex operations exists, hence peopel came up with operator overloading

1603079060
kandinski
jinx and all that

1603079071
ryuukk_
that's not a valid argument

1603079081
ryuukk_
you pick wich you prefer

1603079086
ryuukk_
wich is not valid

1603079194
ryuukk_
Vec3.mul(Vec3.div(Vec3.add(a, b), 4), Vec3.sub(b, 8))

1603079198
ryuukk_
nice readability

1603079209
daurnimator
ryuukk_: as I mentioned above, Vectors are built in.

1603079217
daurnimator
but yes; for e.g. matrices, you do need to write thatr

1603079220
ryuukk_
Matrices is same problem

1603079273
kandinski
ryuukk_: maybe you can contribute an std.meta.Matrix type and then the problem will be over

1603079274
daurnimator
but as it says in the issue I linked earlier: it looks much better on multiple lines: `const c = Matrix.add(a, b); const d = Matrix.div(c, 4);` etc.

1603079305
daurnimator
now; imagine that it was something like bignums: you need to handle allocations in there

1603079308
ryuukk_
it doesn't, that's not how people write formulaes

1603079440
daurnimator
and we accept that trade off.

1603079456
ryuukk_
trade off? i don't see where the trade off is

1603079496
daurnimator
"operator overloading makes generic code harder to read from a control flow perspective" vs "operator overloading makes math code easier to read from a math perspective"

1603079572
ryuukk_
math, that's all computers are about

1603079647
pjz
What about an expression compiler instead?

1603079665
ryuukk_
i don't know what that is

1603079671
ryuukk_
all i want is do math sanely

1603079682
pjz
some math mini-lang that so you could write expressions how you want, and they'd get compiled into good code.

1603079694
pjz
kind of like how formatting is done

1603079709
ryuukk_
that sounds like too much for doing a + b

1603079719
pjz
but it's not just a+b is it?

1603079726
ryuukk_
if it's not built in into the language, it makes it just not viable at all

1603079765
ryuukk_
it is, it is just operator overloading

1603079786
ryuukk_
telling compile i can do a + b on my structs, just like he does for i32

1603079867
pjz
hmm

1603079917
pjz
you kind of have a point. I grok + for ints - math there is easy.  but extending it to floats seems 'special'

1603079927
pjz
and if to floats, why not to ... ?

1603079981
pjz
Honestly, a + b might not be clear if it's int + float

1603080015
kandinski
which one is coercd to which?

1603080017
kandinski
and why?

1603080032
pjz
or does it type-error/

1603080060
kandinski
if you're allowed overloading, it might launch a missile

1603080102
pjz
it's already allowed... float + int, no?

1603080109
pjz
I mean, + works for both int and float

1603080113
pjz
so it's already overloaded.

1603080144
kandinski
what I mean is, if we allow overloading by users

1603080175
daurnimator
pjz: no.error: incompatible types: 'u32' and 'f32'

1603080198
pjz
daurnimator: ah! thanks! I was just opening another window to test that :)

1603080231
pjz
well, as long as zig admits that floats are somehow special in that they get operator overloading, sure.

1603080233
daurnimator
pjz: f32 and comptime_int is allowed though.

1603080247
daurnimator
so you have to be a little careful when testing it :)

1603080258
pjz
ohh, interesting.

1603080320
pjz
so here's a stupid idea: have zig fmt write a comment at the end of lines with overloaded operators.

1603080329
pjz
if the point is readability, call it out.

1603080363
kandinski
pjz: but it's not overloading, it's coercion

1603080377
pjz
I thought ryuukk wanted overlaoding?

1603080402
kandinski
I mean what happens when you add a float and a comptime int is not so much overloading as coercion

1603080415
kandinski
the + sign does what it does for floats

1603080426
kandinski
it's just that the compiler knows to upgrade the comptime int to a float

1603080433
kandinski
and then uses the same + at runtime

1603080437
kandinski
without overloading it

1603080450
pjz
oh, right.  Gotcha.

1603080454
oats
ah, the joys of figuring out how to make my homebrew circe notifications hook

1603080470
kandinski
floots from now on

1603080481
daurnimator
f32-and-friends

1603080485
oats
32 bit flooting point numbers

1603080511
pjz
but the point is that + is overloaded since it works for ints and floots.

1603080535
kandinski
pjz: I would dispute this

1603080535
daurnimator
pjz: overload means to give

1603080550
daurnimator
pjz: what + does is

1603080563
kandinski
but I"llagree that ** seems overloaded since it means both "raise to the power" for numerics and "repeat pattern" for string literals.

1603080582
pjz
right.  A stricter version of 'overload' is 'works with multiple types'

1603080589
pjz
which is what I was thinking of

1603080618
pjz
mostly from a method-overload stance

1603080644
kandinski
pjz, technically you're right, but emotionally these feel all like "numerics"

1603080658
pjz
but so do complex numbers and vectors.

1603080669
kandinski
ah also you have a point

1603080681
pjz
what about allowing explicit overloading?

1603080686
daurnimator
zig does not have complex numbers

1603080688
kandinski
my solution would be to add the standard mathematical types (complex numbers, matrices) to the std library

1603080699
pjz
so, like

1603080713
pjz
or something - notation/syntax TBD

1603080714
kandinski
I mean, I'm

1603080734
daurnimator
pjz: see the issue(s) I linked earlier. they have such proposals in them.

1603080744
pjz
ah? kk, will look.

1603080754
kandinski
but if someone saw lack of matrix_a + matrix_b syntax as a real problem, I think that's the correct solution for them, in zig

1603081242
pjz
hmm, k.  method chaining can make it look decent, but still not as fluent as operators.

1603081255
pjz
but I heartly agree with the lack of magic.

1603081264
pjz
er, the importance of explicitness, I mean.

1603093053
kandinski
this is a minimal test case where I try to import pcre2 but fail because I can't set the value of PCRE2_CODE_UNIT_WIDTH:

1603093256
kandinski
can anybody suggest a way to pass the #define up to the c library?

1603094756
ifreund_
@cDefine()

1603094815
kandinski
ifreund_: thanks

1603095433
kandinski
since I'm interacting with C libraries, I'm using 0-sentinel terminated u8 arrays a bit. Can anyone point me to some code I could crib from for best practices?

1603095500
kandinski
For instance, was this ever implemented, or is there plan to implement it?

1603095516
kandinski
I mean especifically this bit:

1603095547
kandinski
const ptr = buf[0..3 :0];

1603095574
kandinski
for getting null terminated slices out of regular arrays

1603095719
kandinski
hmm, seems so, just that it's not in the docs yet, but it was merged:

1603095783
daurnimator
kandinski: I consider best practice to be adding the null byte at the last possible moment

1603095807
kandinski
daurnimator: so in the pcre wrapper before calling the c functions, then

1603095808
daurnimator
e.g. ArrayListSentineled should only be used when you need to retain a sentinel at all times

1603095829
kandinski
daurnimator: but string literals are already 0-sentineled

1603095883
kandinski
so if I'm mixing string literals and user input, why not 0-sentinel the user input as well?

1603096019
daurnimator
because then if your

1603096071
kandinski
the users of the pcre wrapper, you mean

1603096144
kandinski
daurnimator: if I slice an [N]const u8, does the slice share memory with the array, or is it a copy?

1603096159
kandinski
I'm going to write myself some code to test

1603096187
ifreund_
slices are just pointers with a length field

1603096213
kandinski
so they point into the array they're slicing from?

1603096231
daurnimator
kandinski: note that libpcre2 has both length-taking and zero-terminated-taking forms

1603096231
kandinski
I guess you already answered that

1603096242
kandinski
daurnimator: oh nice, thanks!

1603096281
daurnimator
kandinski: infact you indicate zero-terminated by passing ~0 as the length

1603096314
daurnimator
(PCRE2_ZERO_TERMINATED)

1603096319
kandinski
daurnimator: gotcha, I'm not a C programmer so I'm learning the C APIs along as I learn zig. Thanks much.

1603097298
omglasers2
what does the nosuspend keyword do?

1603097664
ikskuh
omglasers2: it's a runtime assertion that the function call does not suspend

1603097676
ikskuh
it makes the calling function synchronous, even if the called function is async

1603097690
ikskuh
fn not_async() void { noasync is_async(); }

1603097741
omglasers2
ok, thanks

1603104474
jorangreef
Hey everyone! What's the safest way to cast a []u8 slice to a slice of packed structs?

1603104487
jorangreef
i.e. something like: @ptrCast([*]PackedStruct, @alignCast(@alignOf(PackedStruct), u8_slice))[0..count];

1603105592
daurnimator
jorangreef: mem.bytesAsSlice ?

1603106010
jorangreef
(y)  Thanks, the source of that looks perfect. Is there any difference between the snippet above and bytesAsSlice, e.g. how they do alignment, assuming the divExact check is done for both?

1603108307
Piraty
is `zig cc` capable of compiling c++ ?

1603108368
pixelherodev
`zig c++` I think?

1603108372
Piraty
ah

1603108434
Piraty
--help doesn't mention

1603108444
Piraty
yet it seems to at leat try

1603108476
Piraty
yeah works

1603108487
Piraty
cross target fails to find a system header though...

1603108692
earnestly
You'll have to tell zig where to look for them iiuc

1603110400
Piraty
got it

1603111151
ifreund
Piraty: passing -lc should be all you need

1603111158
ifreund
or -lwhatever

1603111165
earnestly
-lstdc++? heh

1603111174
ifreund
oh yeah this is C++ :P

1603111242
ifreund
-std=c99 is what I pass to zig cc actually

1603116967
FireFox317
andrewrk, i created #6746 regarding the infinite loops when doing dirname. I'm not sure if this is what you had in mind, but i know that this issue was still on your todo list before 0.7.0.

1603122177
ikskuh
can someone explain why zig always sets FILE_SHARE_DELETE on windows when opening a file?!

1603122179
ikskuh
￼

1603122181
ikskuh
Nachricht an #zig

1603122183
ikskuh
andrewrk, daurnimator?

1603129454
pixelherodev
ikskuh: what does that flag do?

1603130729
ikskuh
it allows me deleting this file but not deleting it

1603131050
pixelherodev
...?

1603131715
ikskuh
windows things:

1603131722
ikskuh
opening a file locks it against deletion by default

1603131727
ikskuh
zig prevents this behaviour by-default

1603134586
justin_smith
ikskuh: one hunch to check - this means that the behavior would match the default posix behavior, which means fewer corner cases to keep track of

1603134600
justin_smith
that's just a blatant guess though

1603134651
ikskuh
yeah that's my guess as well

1603142336
marijnfs
I have a zig conundrum

1603142339
marijnfs
I want to have an arraylist of callbacks, but the callbacks might get different inputs. So i'm not sure how to design the callback

1603142376
marijnfs
I was trying to have a standard struct that would be a member of other structs, and get the pointer with getParentPtr

1603142855
ikskuh
what about union(enum) { cb_a: fn() void, cb_b: fn(i32) void, … } ?

1603142912
kandinski
can anybody point me to zig code wrapping a heap-using C library so I can crib on best practices? I'm new to both Zig and C, know a lot of the theory but this is my first time managing memory by hand.

1603143113
ifreund
kandinski: it might be a lot to read, but:

1603143134
kandinski
ifreund: thanks

1603143167
ifreund
mostly just use std.heap.c_allocator aliased to util.gpa plus a few arenas on top of that in places

1603143184
kandinski
hmm

1603143213
kandinski
for now I'm not writing a library for others to use, just a one-file wrapper with barely enough functionality for my own use

1603143241
kandinski
but it's a learning project and I want to learn "the right way"

1603143271
kandinski
I'm implementing python's `re.compile(): Pattern` and `Pattern.findall()` on top of pcre2-8

1603143287
kandinski
so I'll have something nice to use for my actual-program-that-needs-regexps

1603143315
ifreund
well, unless the C code is nice enough to accept a custom allocator as a parameter you're pretty much stuck with using the C allocator as well

1603143388
kandinski
that's what I've figured out. Yes, it's a good library, but it's any colour you want as long as it's the C heap

1603147781
ryuukk_
how can i make this work ?

1603147782
ryuukk_


1603147799
ryuukk_
is there a similar thing as const Vec2& ?

1603147838
ryuukk_
and as you can see, Vec2.zero() is kinda ugly because no operator overloading.. :(

1603148311
marijnfs
ikskuh: interesting, I could pass this to function that creates the struct right?

1603148321
marijnfs
can you define a specific enum for the union?

1603148471
marijnfs
ryuukk_: doesn't it work?

1603148495
ryuukk_
i get error: expected type '*const Vec2', found 'Vec2'

1603148560
marijnfs
zero probably needs a self

1603148585
marijnfs
o wait i see what you do

1603148679
ryuukk_
c++ accepts both value and when i initialize directly if the function parameter is const Vec2&

1603148692
ryuukk_
in*

1603148701
ryuukk_
nvm last msg

1603148724
marijnfs
not sure why the rhs doesn't propagate to const

1603148766
marijnfs
but if you get rid of the const, and supply b like &b it works

1603148840
ryuukk_
next question, how can i make it to also accept .add( Vec2 {.x = 1.0, .y = 1.0} ) ?

1603148871
ryuukk_
hence the need to do something liek const Vec2&

1603149075
kandinski
what's a good way to print a struct? I'm trying to get a printout of the full namespace of a @cImport()-ed C library.

1603149116
kandinski
tried std.debug.warn("pcre2={}\n", .{pcre2}) but it only prints "type"

1603149153
kandinski
well, "pcre2=type", but same difference

1603149195
alva
@typeName maybe

1603149303
ryuukk_
there is no operator overloading, so i try to comply and add methods, but even this way it doesn't provide a solution to my problem

1603149314
kandinski
haha @typeName is "cimport"

1603149349
ryuukk_
and i can't have 2 .add to accept pointer and value because u can't have 2 function with same name

1603149414
kandinski
hmm, is there a way to iterate over the labels in a struct?

1603149434
ryuukk_
so far the language works against me, i don't understand how people said no to operator overloading for zig, i just don't understand at all

1603149483
ryuukk_
even with that, const Vec2& seems not possible, so that adds up

1603149535
ryuukk_
it's sad because otherwise the language is nice

1603149559
alva
kandinski: Labels as in fields? const ti = @typeInfo(T).Struct; inline for (ti.fields) |f| ...

1603149579
kandinski
alva: thanks a lot

1603149854
kandinski
TODO

1603149862
kandinski
I guess I've met the end of this particular line :)

1603149904
kandinski
TODO, Unable to dump stack trace: debug info stripped

1603149966
ryuukk_
so nobody have an idea about my problem? there is no const Vec2&?

1603150003
waleee-cl
kandinski:  are you using zig 0.6.0?

1603150010
kandinski
yes, from nixpkgs

1603150032
waleee-cl
ah, it's not-TODO in master,

1603150087
kandinski
waleee-cl: thanks!

1603150482
ryuukk_
ok i got my answser here:

1603150487
ryuukk_
Structs, unions, and arrays can sometimes be more efficiently passed as a reference, since a copy could be arbitrarily expensive depending on the size. When these types are passed as parameters, Zig may choose to copy and pass by value, or pass by reference, whichever way Zig decides will be faster. This is made possible, in part, by the fact that parameters are immutable.

1603150508
ryuukk_
what the size compiler decide it's gonna be value or reference?

1603150547
ryuukk_
: Vec2 is enough to let compiler pass by reference when it's good?

1603151079
marijnfs
ryuukk_: &Vec2{.x=1, .y=2} works with the const*

1603151778
ryuukk_
marijnfs: thanks

1603151803
ryuukk_
in perfect world &.{} would be perfect, but looks like it's not a thing

1603151921
marijnfs
ryuukk_: &Vec2{.x=1, .y=2} works with the const*

