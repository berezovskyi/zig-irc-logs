1593564569
ifreund
mq32: is kristall GPL-3.0-or-later or GPL-3.0-only?

1593564583
ifreund
(packing for void)

1593564678
ifreund
hrm, i guess it is nearly 3am in germany, I shouldn't really expect an answer

1593565395
waleee-cl
are you making a template for river?

1593565419
ifreund
no, this is for

1593565438
ifreund
i will definitely package river for void when I do the first release

1593565460
ifreund
still a bit of work to do before I'm ready to do that though

1593565484
waleee-cl
ah, I read it as "is it kristall [clear] ..."

1593565564
waleee-cl
(it's 3am in Sweden too)

1593565580
ifreund
yeah I should really get to sleep (I'm also in germany)

1593566403
marler8997
what is a "backward branch" when talking about @setEvalBranchQuota?

1593567160
pixelherodev
andrewrk: so what's the conclusion?

1593567343
pixelherodev
How do you want the C backend to work?

1593571621
aerona
Is it planned for TailQueue to be changed to a similar API as SinglyLinkedList?

1593572540
daurnimator
aerona: huh? aren't they already quite similar?

1593572735
aerona
andrew removed init() and all the node helper functions: allocateNode, destroyNode, etc.

1593572781
aerona
not a big change but now they differ by that little bit

1593572811
andrewrk
pixelherodev, no progress today, I had to deal with a battery swelling issue. I'm on a backup laptop now, still setting up my environment

1593573586
daurnimator
misc idea: mem.readIntBig and friends could take `(comptime T: type, buf: *[@sizeOf(T)]const u8)`

1593573614
daurnimator
actually could it be: `buf: [@sizeOf(T)]u8`?

1593574104
stripedpajamas
how do you do an anonymous list of anonymous structs

1593574116
stripedpajamas
i tried but got immediate segfault

1593574131
daurnimator
stripedpajamas: "list" meaning slice, array or tuple?

1593574139
stripedpajamas
slice

1593574219
daurnimator
either take the address of an array of them, or allocate some room...

1593574241
stripedpajamas
oh i may have meant array

1593574252
stripedpajamas
i'm trying to do just a list of test cases

1593574262
stripedpajamas
with input/expected structs

1593574276
stripedpajamas
anonymously

1593574285
daurnimator
you're going to need to share some code

1593574423
stripedpajamas
const testCases = .{ .{ .input = "asdf", .expected = "fdsa", }, .{ .input = "xyzz", .expected = "zzyx", } };

1593574429
stripedpajamas
something like that in a test block

1593574449
stripedpajamas
where i can then loop over test cases and call e.g. a reverse func on input and assert it is expected

1593574576
stripedpajamas
oh actually that example works fine

1593575110
pixelherodev
andrewrk: oof, ouch

1593575132
pixelherodev
Should I just focus on the internals and leave the frontend for later?

1593575139
pixelherodev
I could add a temporary test harness I suppose

1593575147
pixelherodev
and use that to work on it

1593575152
stripedpajamas
daurnimator: opened this

1593575709
pixelherodev
I'm going to be away from Zig for a few days  as well, most likely

1593575715
pixelherodev
I sorta borked my main install, and I

1593575718
pixelherodev
'm working on fixing it still

1593575722
pixelherodev
I borked it on purpose though

1593575740
pixelherodev
Wiping out PAM, as was mentioned elsewhere :P

1593576672
pixelherodev
And now I"m going for broke and wiping elogind and polkit too

1593576679
pixelherodev
Remove all the crap in one go

1593600980
pixelherodev
andrewrk: don't you just

1593601011
andrewrk
haha

1593601013
andrewrk
good night

1593601027
pixelherodev
Night!

1593601039
ifreund
night o7

1593601058
pixelherodev
andrewrk: real quick, what was the resulting RSS usagae?

1593601060
pixelherodev
usage*

1593601102
andrewrk
5.14 GiB => 5.13 GiB

1593601110
pixelherodev
lol

1593601115
pixelherodev
that's still pretty bad

1593601121
pixelherodev
... I'd look into it but

1593601123
pixelherodev
stage1 scares me

1593601126
pixelherodev
a lot

1593601142
andrewrk
it's mostly unfreed ZigValues

1593601159
pixelherodev
Would fixing that be a major rework?

1593601163
pixelherodev
Or can they be fixed incrementally?

1593601170
andrewrk
yes it would be a huge undertaking

1593601177
pixelherodev
Not it

1593601189
andrewrk
I've solved it in self-hosted

1593601195
pixelherodev
I already need to fix the things I broke when fixing memory leaks in scas lol

1593601203
pixelherodev
And scas is tiny compared to stage1

1593601230
pixelherodev
9K LoC lol

1593601280
yeti
hi!  which triple (for the bootstrap) would match an A20 (armhf, arm7l)?

1593601360
andrewrk
yeti, use `-mcpu=generic+help` and it will print some helpful options for you

1593601381
yeti
thanks, I'll look

1593601400
andrewrk
zig build-exe foo.zig -target arm-freestanding -mcpu=generic+help

1593602320
yeti
would    arm-linux-musleabi cortex_a7   as args for bootstrap make sense?

1593602339
yeti
(a cubietruck)

1593602361
scientes
yeti, musleabihf

1593602387
yeti
yip... gcc has that eabihf in the triple too

1593602389
yeti
\o/

1593602407
yeti
I'll try a bootstrap with it

1593605045
rooke
Due to the current c abi limitations I have written a tiny function in c to be called by zig. What's the easiest way to call that function?

1593605076
scientes
rooke, probably @cImport @cInclude

1593605086
scientes
rooke, it will tell you if you hit the limitations

1593605157
ifreund
^ this and addCSourceFile() in your build.zig

1593605202
rooke
I think that last step is what I was missing, it complained about not being able to find the c file

1593605340
ifreund
there's two parts there, you need to addIncludeDir() so it can find the header and addCSourceFile() so it compiles the object

1593616553
ask6155
Hello

1593616716
mq32
Hi

1593617135
alexnask
hi

1593617181
fengb
Hi

1593617218
pixelherodev
Salutations, human!

1593617225
marler8997
I asked this yesterday but maybe someone knows the answer today, anyone know what a "backwards branch" is when talking about @setEvalBranchQuota?

1593617248
pixelherodev
Presumably, a branch that goes backwards

1593617251
pixelherodev
e.g.

1593617255
pixelherodev
`a: b(); c(); goto a;`

1593617262
pixelherodev
`goto a` => backwards branch

1593617297
ask6155
So I was thinking of using notcurses in my zig project to make some cool terminal programs. How should I go about doing some cool stuff in the most coolest way? (Remember coolness is more important) I had an idea. Get the code compile the library statically using the zig compiler with musl as libc (If that makes any sense) and then statically link it to my (cool) zig program. Can it get any more cooler?

1593617310
pixelherodev
I mean

1593617318
pixelherodev
static compilation with musl is trivial with Zig

1593617337
pixelherodev
Just `--library c --target x86_64-linux-musl` for instance

1593617595
ask6155
yeah so can it get any cooler? I wan to make it leet h3cker xxX_program_Xxx

1593618027
alexnask
write it in kakoune

1593618179
fengb
Most cool = no libc. Gotta write a curses library

1593618292
ifreund
kakoune has a branch with no ncurses support

1593618320
ifreund
er, no ncurses cause he implemented builtin terminal stuff

1593618332
ifreund
just gotta rewrite kak in zig

1593629925
shcv
PackedIntIo isn't exposed by std; how do I load it?

1593629957
shcv
or do I need to copy the pieces I need into my library?

1593630660
leeward
std.packed_int_array.PackedIntIo

1593633078
tgschultz
shcv: I'm curious why you need to access PackedIntoIo directly, since it was designed just as a way to share a bunch of code between the various PackedIntArray/Slice implementations.

1593633929
shcv
I think I'll probably need to implement my own variant, but I wanted to test with it some first

1593633979
fengb
I used it directly in WasmPageAllocator. Saved a few bytes over using a PackedIntSlice

1593633985
shcv
I want to be able to get chunks out of an array that may not be an even multiple of the chunk size

1593634058
shcv
the odds of actually needing to retrieve the last few bits are very low, but it would be nice to handle that case with truncation

1593637624
shcv
does branch prediction normally assume the if rather than the else?

1593637684
pixelherodev
Hardware-dependent.

1593637694
pixelherodev
There's no real way to answer that

1593637786
fengb
It's both compiler and hardware dependent

1593637791
fengb
So... no not really?

1593637811
fengb


1593638858
mq32
self.items.len = self.capacity;

1593638865
mq32
i â€¦ didn't know that this was allowed

1593638869
mq32
i am shocked

1593639776
fengb
Back to mq32?

1593639808
pixelherodev
lol

1593640194
mq32
fengb: happens from time to time

1593640209
ikskuh
problem is: mq32 is owner of a channel here, i have to log in with this nick :D

1593644896
ifreund
alexnask: wow you get a lot of "I can't compile zls cause I'm using 0.6.0" issues :D

1593644909
alexnask
Yeah :p

1593645192
andrewrk
I can't believe the complete rewrite of HashMap had basically zero impact on any perf or memory issues

1593645760
ifreund
:(

