1601769809
fengb
\o

1601769821
companion_cube
o/

1601770729
pixelherodev
andrewrk: would you have any issue with accepting patches through the mailing list as an alternative to GitHub?

1601770761
andrewrk
no issue

1601770798
andrewrk
you might lose some priority, just due to convenience factors

1601781337
nikki93
was diving through the `Builder` code but couldn't figure this out -- i wanted to, at the end of the build, copy the artifact 'zig-cache/lib/blah' to the root of the project

1601781375
nikki93
(i'm serving the root of the project when developing and wanted a .html file that was there to be able to refer to the sibling main.wasm file)

1601781498
andrewrk
nikki93, how do you expect your application to find this file when it is "installed" properly?

1601781578
nikki93
tbh the main way was that i'd just `zig build` it as above and then i have a 'publish' rsync command that just pushes index.html and main.wasm and some other things to a static web server

1601781607
nikki93
so far i've just been doing `zig build-lib ...` at the command line and the resulting file has been working out -- both for dev and publish

1601781691
andrewrk
I wonder if we need a different concept of "installation" that is not based on the unix file system hierarchy standard

1601781706
nikki93
most wasm zig projects i've found seem to just write the direct `zig build-lib` command in the readme and don't actually have a 'build.zig' file --

1601781726
andrewrk
one that just puts all the output artifacts in the same output directory. and make windows default to use this one

1601781768
nikki93
that seems fine. then i could name the index.html and index.css and whatnot files in the build.zig and then have it copy them to some dir i'm serving locally (during dev) or a diff dir that i just rsync to publish

1601781851
nikki93
but yea as it stands i just want some quick way to have zig build copy an artifact to the project source directory so i can serve it

1601781942
nikki93
maybe i can just add some step that does `fs.updateFile`

1601781960
andrewrk
as a workaround you can do a system command that runs cp

1601781983
nikki93
cool

1601782009
andrewrk
but I think the real fix for this is improving zig build system's abstraction of an "installation"

1601782010
nikki93
i was wondering if there was some way i could just use some zig code written within build.zig -- but the only kinda 'flexible' addX step seems to be `addSystemCommand`

1601782021
nikki93
yeah agree that that seems like a good route

1601792411
andrewrk
alright whose project is no longer building correctly from the merge of #6250? lay it on me

1601794541
pixelherodev
andrewrk: I'm fine with losing priority if it means I can drop my GitHub account finally

1601796885
alexnask[m]
I think xq has a couple of broken projects but I believe they all have to do with #6250

1601803179
mq32
andrewrk: you broke a lot of stuff in my projects :D

1601805262
andrewrk
mq32, hoping to get it all sorted out tomorrow

1601805268
mq32
no worries

1601805280
mq32
i either fixed/worked-around/reverted the stuff locally

1601805296
mq32
i can continue programming with a pre-6250-compiler for most projects

1601805309
mq32
and i try finding what broke in 6250 with a current git-build

1601805332
mq32
also: sorry for #6501, i was impatient

1601809528
moinstar
Are there any documentation on std library and for common things like files and string handling, and collections

1601809580
Nypsie[m]
Chapter 2 of ziglearn has a little bit on collections and file handling:

1601809580
Nypsie[m]


1601809706
moinstar
Nypsie, thanks

1601809855
Nypsie[m]
No problem :)

1601810720
earnestly
Heh, afaics zig doesn't have something like Ada's loop ... end loop; or Rust's loop {...} to indicate infinite loops.  C typically uses the idiom if for(;;), what is zig's?  while (true)?

1601810808
earnestly
s/if for/of for

1601811526
Nypsie[m]
Yes, in Zig an infinite loop would be `while(true){}`

1601811910
earnestly
Nypsie[m]: Can it be expressed with for?

1601811929
Nypsie[m]
No

1601811948
earnestly
Okay that makes it less of an idiom which is probably for the best

1601829988
companion_cube


1601834700
Barabas
Hiya, it looks like my zig compiler (master, version: 0.6.0+0e2d858d6) is stuck trying to compile my code (or probably the std)

1601834718
Barabas
It just does 100% cpu and after 5 minutes still nothing.

1601834742
Barabas
I'm on Windows. Any suggestion on how to figure out what's going on?

1601839027
Piraty
companion_cube: i recommend tcc

1601840637
nikki93
the "Building self-hosted component" step is supposed to take a while right? just checking in case it's stuck or something

1601840670
nikki93
aha got past it :D

1601845232
andrewrk
companion_cube, I bet that book will be really educational! I have a lot of respect for Rui

1601846990
companion_cube
I hope that some day there'll be similar efforts for zig

1601847004
companion_cube
(for rust, too, but it's a

1601847053
ikskuh
i think the same goes for zig

1601847067
ikskuh
comptime and lazyness makes compilation harder

1601847369
andrewrk
yes, zig is a fundamentally more complex implementation than C

1601847382
andrewrk
not using the language, but implementing it

1601847886
companion_cube
you can't make a one pass compiler

1601847893
companion_cube
but it might still be not that hard

1601847906
companion_cube
after all C also has ugly implementations details, like cpp

1601850629
pixelherodev
ikskuh: I'm so so sorry

1601850631
pixelherodev
I've sinned.

1601850641
pixelherodev
My 130THz estimate?

1601850643
pixelherodev
That was pessimistic.

1601850645
pixelherodev


1601850671
bfredl
why do we terahertz?

1601850709
pixelherodev
3.8 million terahertz - when the entire address space is nops

1601850725
pixelherodev
It's basically being JITed to "PC += 0x10000; cycles += 0x40000;"

1601850750
pixelherodev
which it can apparently do multiple times per physical cycle

1601850782
pixelherodev
38000000000GHz on a effectively 1.6GHz CPU

1601850782
bfredl
i need to do more beamracing

1601850794
bfredl
not sure if "emit char to pty" should be the primitive

1601850808
pixelherodev
23750000000 emulated cycles per physical cycle...

1601850808
bfredl
or rather a RRGGBB + Ã¼nicode thing already

1601850824
bfredl
zig would be the reference implementation

1601850832
bfredl
but ideally bash or something, so it is "portable"

1601850847
pixelherodev
POSIX sh > bash for portability

1601850860
pixelherodev
Some people use zsh/fish/mrsh/dash/ash/etc

1601850860
bfredl
bourne shell + powershell polyglot

1601850860
bfredl
oops

1601850867
bfredl
i mean .bat batch file

1601850891
bfredl
and 6502+vic-ii asm just because it is fun

1601850941
pixelherodev
Anyone know of a more useless z80 benchmark I can optimize for? :p

1601850949
pixelherodev
I can't think of any lol

1601850993
bfredl
hmm, with z80

1601850999
bfredl
it should run on my ti82+stats also

1601851006
bfredl
but bw only (low energy)

1601851038
bfredl
hmm

1601851046
bfredl
can you "do" 4k in UEFI already

1601851052
bfredl
then i can quit linux already

