1584232225
Kingsquee
"By default floating point operations use Strict mode, but you can switch to Optimized mode on a per-block basis"

1584232255
Kingsquee
so if I set the floatmode to Optimized,

1584232503
Kingsquee
(the example here is giving me the 'Strict' output for both, btw

1584232727
Kingsquee
oh wait, release-fast

1584232730
Kingsquee
there we go

1584236108
Kingsquee
how would language-level fixedpoint support even work with literals + type inference :I

1584236119
Kingsquee
const existential_crisis = 4.2;

1584236134
Kingsquee
break all the code \o/

1584236149
fengb
Without explicit types those are comptime types

1584236246
Kingsquee
but comptime_float or comptime_fixed?

1584236329
fengb
Right now it’d be comptime_float but it should be renamed to comptime_decimal or something

1584236376
Kingsquee
it'd have to be a bigfixed under the hood or something

1584236394
Kingsquee
bigsoftfloat

1584236492
Kingsquee
this gets tricky when you end up with trying to represent `const satanlaughed = 1.0/3.0;`

1584236503
Kingsquee
at what precision do we store the const_decimal

1584236616
mikdusan
I'm lost. what does "decimal" mean?

1584236667
Kingsquee
"it can hold a subset of the real numbers"

1584236706
Kingsquee
I'm becoming less convinced that comptime_T should be a thing and more that something like @comptime(T) should be

1584236754
fengb
mikdusan: superset of floating and fixed point

1584236767
fengb
Something I just invented to disambiguate literals :P

1584236775
Kingsquee
if we want no surprises we need to allocate explicit sizes for explicit types

1584236797
fengb
Kingsquee: nah just disable math for the literals unless it’s been marked fixed or float

1584236816
Kingsquee
what could possibly go wrong

1584236868
Kingsquee
const a = 5.0 + 1.0; // obviously a compile error

1584237834
Kingsquee
"for (some_integers) |*item, i| { .. }"

1584237837
Kingsquee
a) why are there two params

1584237846
Kingsquee
b) what is the *prefix

1584237857
Kingsquee
pointer deref is item.*

1584237860
mikdusan
i is index and optional in the syntax

1584237873
mikdusan
and '*' indicates that `item` is mutable

1584237880
Kingsquee
wot

1584237895
mikdusan
waat

1584237926
Kingsquee
when I make it |item, i| { .. }, attempting to deref it in the brackets gives "error: attempt to dereference non-pointer type 'i32'"

1584237937
Kingsquee
so it seems more like it indicates it's a pointer rather than a value

1584237946
Kingsquee
I guess that's what you meant

1584237969
Kingsquee
why wouldn't it be |&item, i| ?

1584237969
mikdusan
`*item` is mutable. but if your `some_integers` are u32, you cannot deref a u32

1584238021
mikdusan
one sec. let me verify

1584238032
Kingsquee


1584238036
Kingsquee
just working through this

1584238146
Kingsquee
*x is not mentioned in the operator list at all

1584238156
Kingsquee
so this feels rather out of place

1584238245
mikdusan
yeah i made a bozo comment re "cannot reref a u32" <-- ignore that part. here's a simple illustration:

1584238267
mikdusan


1584238301
Kingsquee
that doesn't look like const vs var to me

1584238313
Kingsquee
looks more like value vs ref

1584238320
mikdusan
find the section regarding function params

1584238508
Kingsquee
"Here, `point` could be a reference, or a copy. The function body can ignore the difference and treat it as a value."

1584238512
Kingsquee


1584238562
mikdusan
without explicit '*' it's up to compiler. you'll find similar syntax for tagged union payloads, optional payloads

1584238575
Kingsquee
so f(x) may modify x

1584238584
Kingsquee
unless I inspect the function body

1584238684
mikdusan
`f(x)` - if it modifies a u32 then f(x: *u32) and you would have to pass a addr/pointer

1584238856
mikdusan
it's pretety clear: `*` indicates mutation

1584238894
Kingsquee
mm

1584238917
mikdusan
heh barring '* const' of course

1584238927
Kingsquee
woot

1584238931
Kingsquee
woooooooht

1584238944
Kingsquee
now you just messin with me

1584238963
adamkowalski
passing by value means it's implementation defined (maybe it fits in a register or it's actually faster to pass by reference) but it means you will not mutate

1584238966
adamkowalski
that should be the default

1584238974
adamkowalski
passing by pointer means I will mutate this

1584238990
adamkowalski
passing by const pointer means I will not mutate this, and I want to garauntee it's passed by pointer

1584239012
Kingsquee
I guess that's fair

1584239024
Kingsquee
basically the same behaviour as C, but with an additional optimization

1584239055
adamkowalski
yeah don't think about the optimization. just think pass by value signifies no mutation

1584239109
adamkowalski
I actually think we should flip the notation to be honest

1584239117
adamkowalski
I wish both pass by T and *T were immutable

1584239123
Kingsquee
well, not quite, since passing by const pointer also signifies no mutation

1584239126
adamkowalski
and *mutable T

1584239137
Kingsquee
*var T

1584239167
adamkowalski
yeah I wish var got renamed to mutable so it's long and ugly and people avoid it. and you have to pay the ugly tax if you want to use a mutable variable

1584239196
Kingsquee
being from rust, I'm not a fan of the ugly tax

1584239197
adamkowalski
right now var is short than const which is no fair

1584239293
Kingsquee
mutable might not be so bad, but with regards to how they handle unsafety, it sounds nice but in practice you need to do a lot of unchecked get/sets after your parameters are sanity checked

1584239357
Kingsquee
so the ugly is concentrated in <literally every hot code path>

1584239410
adamkowalski
not sure I follow

1584239476
Kingsquee
well, with gamedev you're doing tons of container gets/sets

1584239494
adamkowalski
that sounds like a particular design

1584239501
Kingsquee
and in rust the idiomatic approach is to have everything be bounds checked

1584239531
adamkowalski
when you say gets/sets are you just talking about accessing things inside of an array?

1584239551
Kingsquee
or some custom container, yes

1584239594
adamkowalski
i'm not sure I agree, I think all writes should be visible and obvious and yelling out to you

1584239605
adamkowalski
shared mutable state is the biggest source of bugs in most programs

1584239621
adamkowalski
it's a huge performance pitfal too since it means everything requires syncronization

1584239647
adamkowalski
however, yes sometimes i'm guessing in your domain you might have positions or something you want to update

1584239664
adamkowalski
I would argue that you still want that broadcasted to the world so when a reader sees it they know "here be dragons

1584239696
Kingsquee
the approach I use is have handles representing whatever object I'm looking up, and getters/setters for each field of object

1584239725
adamkowalski
and shouldn't those getters setters have wildly different properties?

1584239745
Kingsquee
so something like `let health = item_db.get_health(item_handle).expect("Could not get health");`

1584239747
adamkowalski
getters being mostly fine, don't require syncronization (maybe a reader lock) and very little coordination

1584239759
Kingsquee
most of the time, the expect is only called if item_handle is invalid

1584239782
Kingsquee
so in practice asserting item_handle is valid and then calling unchecked getters from there-on is desirable

1584239799
Kingsquee
but in practice, rust makes your eyes bleed when you do that and calls your mother names

1584240401
Kingsquee
if only their borrow checker treated structs and arrays as many individual variables rather than a single variable :(

1584240406
Kingsquee
life would be easy

1584240472
pmwhite
Yeah, if only P=NP.

1584240597
adamkowalski
Kingsquee well there are issues with that approach

1584240608
adamkowalski
if you access a single element in an array you bring in a whole cache line right

1584240616
Kingsquee
pmwhite: its fine, throw machine learning at it

1584240617
adamkowalski
so if I access that element, and you access the next element

1584240629
Kingsquee
yup

1584240635
adamkowalski
it's just as bad as if we are writing to same variable

1584240665
adamkowalski
but I suppose in a single threaded context it could work

1584240676
adamkowalski
just give each element it's own lifetime and ownership model

1584240718
Kingsquee
you're referring to the point of accessing individual values rather than a cache-line's worth of them?

1584240727
Kingsquee
I've thought of this, and I don't see a way to get around it in practice

1584240728
adamkowalski
right

1584240740
adamkowalski
x[0] = 5   on thread one

1584240745
adamkowalski
x[1] = 10     on thread two

1584240785
adamkowalski
Thats why my strategy is to partition the array into sub sections whose length is a multiple of cache lines

1584240788
Kingsquee
thing is, if you use a custom container, you can have the get/set queries be per-object, but internally have the data be tightly packed in an array

1584240799
adamkowalski
then you can distribute the segments between threads

1584240808
Kingsquee
so the frontend is a sparse lookup table while the back is cache-friendly

1584240811
adamkowalski
within each thread you process the segmend in a serial fasion using simd

1584240847
adamkowalski
also try not to operate on individual objects if possible, that's my main issue with getters/setters

1584240853
adamkowalski
try to operate on the whole pack at once

1584240860
adamkowalski
then the branch predictor is on your side

1584240861
Kingsquee
so for functions where you are just ripping through the same operation applied to some fields of these objects, can just work directly on the internal array

1584240872
adamkowalski
and the prefetcher

1584240885
Kingsquee
but when you need to access individual objects, go through the getter/setter indirection

1584240897
adamkowalski
you're going to take a cache miss but yes

1584240940
Kingsquee
the assumption being the functions that operate on the field arrays are going to be hotter and more involved than the ones which don't

1584240949
Kingsquee
and the ones which don't..I don't know how to improve it

1584241030
Kingsquee
maybe some kind of intelligent sorting of the whole pack, which might end up being slower if there aren't enough queries to justify it

1584241152
adamkowalski
I wouldn't sort

1584241164
adamkowalski
I would enter them into the system in a sorted fashion in the first place

1584241187
adamkowalski
that way you can avoid the if down the road, the data is already grouped together in such a way that it should be accessed together

1584241228
Kingsquee
oo true

1584241262
Kingsquee
things change each frame though, so the sorting needs to be kept up

1584241278
Kingsquee
reminds me, one guy did a partial sort each frame

1584241295
Kingsquee
so if not much changed it converged to optimality

1584241331
Kingsquee
if lots did, things were usually slightly better

1584246476
pixelherodev
There a way to have an anon union accessed as part of a struct? e.g. `struct {union{a:,b:}}.a`?

1584247032
pixelherodev
Actually, that was a poorly designed data structure; redesigned to not need that

1584251220
pixelherodev
... huh. andrewrk, Zig's comptime implementation actually gives me a good idea on how to implement an optimization I was doing on LLVM IR earlier :)

1584251230
pixelherodev
Basically going to copy Zig's model

1584290020
jessermeyer
Is there a way to query for the maximum positive value represented by an integer type?

1584290049
fengb
std.math.max(usize)

1584290053
jessermeyer
<3

1584290096
jessermeyer
Errr, that's just the max of two values.

1584290114
jessermeyer
pub fn max(x: var, y: var) @TypeOf(x, y) {

1584290197
TheLemonMan
std.max.maxInt

1584290213
TheLemonMan
s/max/math/

1584290248
fengb
Oops yeah what LemonMan said >_>

1584290319
jessermeyer
<3

1584291240
TheLemonMan
andrewrk, yo, do you still have the latest glibc ready and built?

1584291930
mq32
has anyone tried building a c++ standard library with zig build yet? :D

1584291947
mq32
would be cool to remove that dependency on the system tree

1584292698
jessermeyer
Is the intention to @enumToInt() to support bitwise operations for C enums used as bitflags?

1584293348
mq32
i think its more for serialization

1584293354
mq32
bitflags in zig are done with packed strucs

1584293497
jessermeyer
I'm dealing with a C API with extern enums.

1584293538
mq32
hm, you can do bit operations with @enumToInt and @intToEnum

1584293547
mq32
but note that your enum must be non-exhaustive

1584293553
mq32
which are extern enums by default i think

1584293657
jessermeyer
That's what I was doing -- so that's how Zig intends for that to occur?

1584293724
jessermeyer
Yeah, translate-c is importing them as non-exhaustive.

1584293792
andrewrk
TheLemonMan, yes I do

1584294465
TheLemonMan
andrewrk, can you also pull stuff from `dl.abilist` ?

1584295104
TheLemonMan
oh wait, I see you've uploaded the `update_glibc.zig` source too

1584295832
andrewrk
yeah and you've also seen the wiki instructions right?

1584295837
andrewrk
I keep these up to date

1584295893
andrewrk
it takes an entire day and 74 GiB of disk space to obtain a build of glibc for every target

1584295944
fengb
Testing that on CI would be out of the question? 🙃

1584296246
pixelherodev


1584296285
shakesoda
that sounds an awful lot like a massive engineering fail in glibc

1584296290
TheLemonMan
no way I'm rebuilding it

1584296551
andrewrk
I can send you just the abilist files if you like

1584296561
andrewrk
actually you can get those simply from a source checket

1584296564
andrewrk
*checkout

1584305026
danyspin97
Hi there!

1584305061
mikdusan
allo

1584305069
danyspin97
I have a little codebase written in Dlang that I would like to convert to zig

1584305089
danyspin97
however it makes heavy use of OOP

1584305113
mq32
hey danyspin97

1584305136
danyspin97
how is the state of OOP in zig? I read the issue #130 and it is seems like it is planned but I'd like to ask if there are more details

1584305148
mq32
OOP as in "inheritance" is not planned for Zig

1584305180
mq32
right now, there are three interface patterns

1584305191
andrewrk
only? I was only aware of 2

1584305199
andrewrk
*orly

1584305219
mq32
the old one from Allocator, the new one (pretty similar, but still different)

1584305228
mq32
we have pure duck typing

1584305237
mq32
and we have alexnask approach

1584305288
mq32
danyspin97: what features of OOP do you need?

1584305311
danyspin97
sadly, I use inheritance a lot in that codebase

1584305320
adamkowalski
danysppin97: is there a reason it needs to be done in a OOP style? It might be worth thinking about the problem you are trying to solve and then ask what the best tool for the job is

1584305332
mq32
yep

1584305338
mq32
you can "work around" inheritance a lot

1584305344
adamkowalski
if you are just using inheritence it is probably quite straigh forward to use composition instead

1584305352
mq32
i converted three c++ projects of mine to zig, one pending

1584305366
mq32
and some made use of inheritance, now they don't use it anymore

1584305399
adamkowalski
if you want runtime polymorphism then you can start to ask about using some sort of vtable abstraction

1584305409
adamkowalski
of which my personal favorite is type erasure

1584305428
adamkowalski
but just using structs for grouping together data is well supported in zig

1584305488
danyspin97
I guess inheritance can be simulated with some effort

1584305509
mq32
if you have fixed number of classes, you can use tagged unions

1584305512
adamkowalski
well what is your application about, it sounds like we have a hammer so we are looking for nails

1584305516
adamkowalski
what is your problem statement

1584305555
danyspin97
mq32: yea, I have a fixed number of classes

1584305582
adamkowalski
do you know which will be chosen at compile time or only at runtime

1584305590
danyspin97
I am writing a rc manager that uses s6 library under the hood

1584305618
adamkowalski
compile time known -> static polymorphism

1584305643
adamkowalski
runtime known and you have a closed set of structs -> use a union

1584305649
danyspin97
it takes service definitions from files and then change its internal status based on the action the user requested

1584305669
adamkowalski
runtime known and you need to be able to extend the set of possible types -> vtable + dynamic dispatch

1584305681
adamkowalski
perfer them in the order listed there as each step down has worse performance

1584305692
danyspin97
I don't know which type is a service until I parse the file

1584305697
danyspin97
so it's runtime

1584305707
adamkowalski
okay that makes things easier

1584305714
adamkowalski
how many possible types do you have

1584305721
danyspin97
but there are only 3 types

1584305730
adamkowalski
oh thats a perfect candidate for a union

1584305738
danyspin97
this number is fixed

1584305758
adamkowalski
even if it changes you will have that freedom, it just can't change dynamically while the program is running

1584305779
danyspin97
yea, which is exactly what I need

1584305788
danyspin97
nice to know it can be done

1584305789
adamkowalski
however, you might be able to do better

1584305803
adamkowalski
why do you need a single type which can represent different types of objects

1584305817
adamkowalski
can you have three arrays, each array stores one type of object

1584305824
adamkowalski
now you will have contiguous layout in memory

1584305845
adamkowalski
as you parse the file you store the appropriate service in the appropriate array

1584305864
danyspin97
that's a great idea!

1584305867
adamkowalski
no polymorphism needed, great cache utilization, great performance

1584306191
danyspin97
does zig supports interfaces i.e. different structs that must implement function x and y?

1584306203
mq32
zig nativly supports duck typing

1584306213
mq32
so you can pass stuff to a function that implements an interface

1584306225
mq32
if you need that at runtime, you need a more complex solution

1584306241
danyspin97
nice, thanks for the answer and the help!

1584306411
adamkowalski
well it's only a little more complex, I can show you the code in my library to do that. Or I recommend reading the standard library allocators, they implement that pattern

1584306432
adamkowalski
but you can do much better then just checking interfaces in Zig

1584306437
adamkowalski
you have compile time execution

1584306459
adamkowalski
you can write a function which accepts a type as a parameter and queries arbitrary things about it, such as what methods it supports or anything you want

1584306482
adamkowalski
then you can write your own custom error messages, so you can check things that have much more semantic meaning in your domain then just do you implement this interface

1584306829
danyspin97
you can write a function which accepts a type as a parameter and queries arbitrary things about it < Really good for studying things

1584306879
danyspin97
I guess I'll package it for exherbo and try the language features

1584307055
danyspin97
Oh, and thanks for this: "we continue to maintain the C++ zig implementation enough to the point that it can build the latest self-hosted compiler."

1584307095
danyspin97
after having headaches for days using bootstrap setup of other languages, reading this is a relief

1584308865
shakesoda
anyone know what type i'd use for an array like { "foo", "bar", null }

1584308881
shakesoda
(i've got a c interface that expects this, and I'm not sure how to deal with it)

1584308960
fengb
Possibly `[*:null]?[*:0]const u8`

1584309330
shakesoda
fengb: that seems to work if I use [_:null]

1584309358
shakesoda
although now i need to get this into [*c][*c]const u8

1584309484
shakesoda
oh, got it

1584309502
shakesoda
just had something as const that needed to be var

1584309506
shakesoda
fengb: thanks

1584309780
shakesoda
aw, it crashes

1584310122
shakesoda
I'm going to just adjust the API itself since I have that power this time, but I'd still like to know how to address this in the future

1584310271
TheLemonMan
what's the expected C type?

1584310290
shakesoda
[*c][*c]const u8

1584310340
TheLemonMan
you need some ptrCast

1584310355
pixelherodev
null should implicitly cast to `[*c]const u8`...

1584310431
TheLemonMan
I've explained the very same problem a few days ago, implicit casts only affect the outermost type

1584310640
pixelherodev
Thanks!

1584310703
TheLemonMan
found the ticket, #4596

1584311000
pixelherodev
"Safety-checked illegal behavior" Ah, trying to beat C in the most important war of all: the war of

1584311002
pixelherodev
(I'm sorry)

1584311022
pixelherodev
I couldn't resist

1584311281
fengb
You’d be surprised how negatively people react to UB

1584311299
shakesoda
figured out my real problem here, I solved this array problem a little while ago already

1584311303
shakesoda
my string just isn't null terminated.

1584311306
mq32
yeah because they don't understand why UB is necessary

1584311315
shakesoda
i.e. a different one being passed into the same function

1584311324
mq32
it's not nice, but if you don't define UB, you don't have a performant language

1584311325
shakesoda
curse you, null terminators

1584311400
fengb
I think it’s more that in C, it’s literally “anything goes”

1584311422
fengb
Whereas we check most of it so it’s not really undefined in safe modes

1584311441
mq32
yeah, this as well

1584311458
mq32
i think it's good to have "runtime-checked illegal behaviour" vs. "uncheckable illegal behaviour"

1584311472
mq32
last thing is just impossible without huge overhead

1584311919
shakesoda
if I add a null terminator to a string myself, how can i convince zig that my []u8 is now a [:0]u8

1584311957
shakesoda
take a new slice or something?

1584311977
fengb
You can manually slice it with `foo[0..len:0]`

1584312712
adamkowalski
Would you all say that this is readable?

1584312748
adamkowalski
I'm making a library for tessor algebra and gradient based optimization

1584312765
adamkowalski
I'm aiming for something which is easy to read coming from numpy/tensorflow/pytorch

1584313167
fengb
Might want to checkout std.testing.allocator. It'll do some rudimentary leak counting for you

1584313219
fengb
The code looks fine but I don't understand any of it probably because I don't have any ML experience

1584313441
adamkowalski
thanks for the tip about the testing allocator, I guess I should switch to it all for my unit tests. It might not report to much because the graph currently uses an arena to back all it's allocations so it will just be freed at the end of scope

1584313494
adamkowalski
regarding the code, is there anything in particular you can recommend as far as it being hard to understand?

1584313516
adamkowalski
I would love to know what to focus on for the documentation, and or how to change the API to make it more intuitive

1584313610
fengb
It's just a lot of verbiage I don't understand. sigmoid, gradient

1584313620
fengb
I'm probably the wrong audience :P

1584313641
adamkowalski
ah okay, well just some super brief context

1584313676
adamkowalski
The goal is to able to create and manipulate matrices, vectors, scalars, or even high dimensional tensors

1584313689
adamkowalski
so "a" is a 2x2 matrix

1584313713
adamkowalski
sigmoid is defined towards the top of the file, in terms of more primitive operations such as adding and dividing

1584313741
adamkowalski
gradient lets you take the partial derivative of any tensor with respect to any number of tensors

1584313746
adamkowalski
const gradients = try gradient(&graph, c, &[_]Tensor{a});

1584313756
adamkowalski
means take the partial derivative of c with respect to a

1584313823
adamkowalski
in order to take derivatives of arbitrary expressions I need to know the whole computation you are trying to perform

1584313829
adamkowalski
hence the library 'compute graph'

1584313855
adamkowalski
you record all your operations on the graph, then feed them to the session to actually run them

1584314367
jjido
why do you need "try" before every function?

1584314517
shakesoda
jjido: only ones that can error

1584314525
jjido
setting up the arena allocator uses many lines of code... and why do Graph and Session use allocator instead of arena.allocator? I find it confusing

1584314583
jjido
ok, "constant" can error out?

1584314606
shakesoda
you're right, there is a

1584314828
jjido
The notation &[_]Tensor{y} is not particularly shocking, but I'd recommend explaining why it is needed for the users. (the [_])

1584315220
fengb
I’ve been doing a lot of parsing so my try-to-lines ratio is about 1.2 >_>

1584315267
adamkowalski
jjido: thanks for all the points

1584315289
adamkowalski
the reason you need try before every function is due to two reasons

1584315327
adamkowalski
first you are adding the operation to the graph, this means the graph may need to grow in size, hence you may run out of memory and will fail

1584315353
adamkowalski
secondly, I do shape checking and type checking, so if you try to add to matrices and they have different shapes you will get a shape mismatch and will fail

1584315456
adamkowalski
jjido: the graph and session both internally create an arena anyway and will manage their own memory, the reason why I create an arena is because in other examples I create many constants (which are allocated on the heap)

1584315485
adamkowalski
this way I don't have to clean up all the constants that are created, and instead they will all be cleaned up when the arena goes out of scope due to the defer

1584315486
jjido
can you do no-ops on a failed graph and report an error only when you try to run it?

1584315520
adamkowalski
good question, if you perform an operation on the graph and it fails, the graph was not mutated and so it is still in a valid state

1584315560
adamkowalski
I try to give you error messages as soon as possible though because you would much rather get an error when adding two matrices then later when calling session.run

1584315594
adamkowalski
however, session.run still does error checking as well because you may have loading a graph in dynamically rather than creating it yourself using the syntax shown

1584315603
jjido
wait, are the matrices being added before running anything?

1584315607
adamkowalski
nope

1584315610
adamkowalski
it's completely lazy

1584315617
adamkowalski
it will do no work untill session.run

1584315627
jjido
then my suggestion would work.

1584315629
adamkowalski
this means I have the full program available to me and can act as a compiler and optimize it

1584315660
adamkowalski
i'm confused by your suggestion I guess

1584315664
jjido
get rid of all the "try" except on run, just store a status variable saying there was an error

1584315665
adamkowalski
can you elaborate

1584315680
adamkowalski
well you can't do that

1584315687
adamkowalski
adding operations to a graph allocates memory

1584315701
mikdusan
if everything is lobbed into a session, maybe it can be the context? and provide arena? or do you want some components to outlive session

1584315702
adamkowalski
for two reasons, the nodes on the graph are polymorphic, and you don't know the operations until runtime

1584315703
jjido
that's a failure mode

1584315716
adamkowalski
so you ned to allocate the operation itself

1584315739
adamkowalski
you also need to allocate space on the graph to store the operation (in practice it's an array list but you shouldn't know that)

1584315744
adamkowalski
either of those steps can fail

1584315770
adamkowalski
and also as I mentioned, I still infer the shapes and propagate that information down even though no addition has happened yet

1584315783
jjido
For example: "const b = try sigmoid(&graph, a);"

1584315785
adamkowalski
precisely because I want to fail early and get an error message on the line where the error occured

1584315794
adamkowalski
rather then every error occuring at session.run

1584315810
jjido
ok fine, that's a design choice

1584315828
adamkowalski
in theory if you were able to construct the graph, it should not crash when calling session.run

1584315836
adamkowalski
baring running out of memory

1584315857
adamkowalski
in fact if you can do your graph construction in a comptime block then those runtime errors turn into compile time errors

1584315866
adamkowalski
and you can get more garuantees about the safety of your program

1584315878
jjido
your choice is to fail in any graph construction step, if it was me I would fail only on run

1584315894
adamkowalski
you can't only fail on run for the reason I already mentioned

1584315898
jjido
I see

1584315903
adamkowalski
adding any operation to the graph requires memory allcoation

1584315911
adamkowalski
the graph is a growing data structure

1584315925
adamkowalski
so you would need to try even if no shape checking was happening

1584315931
jjido
and? if it can't be allocated, then the error was in adding the step

1584315951
adamkowalski
right but why keep going if you have a failed graph?

1584315967
jjido
just to avoid having "try" everywhere

1584315988
adamkowalski
Yeah I understand that, and originally tried to avoid it

1584316001
adamkowalski
but then decided that this is better, because I can unify compile time and run time checking

1584316006
jjido
cool

1584316025
adamkowalski
and debugging would be a nightmare otherwise

1584316038
adamkowalski
if I just say that adding failed because of a shape mismatch

1584316045
adamkowalski
and you have multiple adds in the graph

1584316052
adamkowalski
how do you know which one?

1584316066
adamkowalski
zigs error handling doesn't let you attach data to the error union

1584316079
adamkowalski
it must be error.ShapeMismatch or at best error.AddShapeMistmatch

1584316107
jjido
you can store the data elsewhere, that's not really an issue

1584316133
jjido
anyway you have good reasons for that design

1584316153
jjido
so it's just a question of getting used to it

1584316179
adamkowalski
and I'm not against changing it, I welcome the feedback and just wanted to present my thought process about how I arrived there

1584316197
adamkowalski
I encourage you to keep attacking it and questioning every decision I made

1584316206
adamkowalski
otherwise I won't end up with the best design

1584316267
jjido
I think yor point about compile-time graph construction is valid

1584316277
adamkowalski
I believe you also had a concen about the &[_]Tensor{y} syntax

1584316303
adamkowalski
the rational for that is that when you call session.run you may want the value of several nodes in the graph

1584316313
jjido
Yeah [_] looks out of place coming from non-zig languages

1584316328
adamkowalski
so you can give me a list of tensors to compute, and I find the minimum set of nodes in the graph needed to find their values

1584316338
adamkowalski
if a node is not necessary to find the answer it will never be computed

1584316345
adamkowalski
the [_] means infer the length of the array

1584316358
adamkowalski
then & will cast it to a slice of []const Tensor

1584316390
adamkowalski
however, if you think just being able to run session.run(.{y}, .{}) is better I could make that work

1584316428
jjido
no I think the current one is ok

1584316508
adamkowalski
i could accept a var, look at the type info if it's a array then do what I'm doing right now, otherwise if it's an anonymous list then collect all the members and do something with it

1584316531
adamkowalski
but if it's fine for now I have other big ticket items left on the list

1584316536
jjido
So, why not use "Graph.init(arena.allocator)"?

1584316546
jjido
in your code

1584316575
adamkowalski
well let's back up for a second

1584316591
adamkowalski
the graph uses an arena internally already, it will wrap whatever allocator you pass in

1584316610
jjido
is it necessary?

1584316625
adamkowalski
the reason is all the nodes in the graph must live the same amount of time as the graph itself

1584316652
adamkowalski
so the nodes of the graph have the same lifetime as the graph, hence it will use an arena and when you get rid of the graph you get rid of all the nodes in one go

1584316683
adamkowalski
keep in mind the graph does not actually store tensors (besides constants which get allocated on the heap using the graphs arena and make a copy of the value being passed in)

1584316715
adamkowalski
the session is what actually does the work and can use a differnet allocator then the graph, but will also use a arena internally wrapping the passed allocator

1584316722
adamkowalski
the session and graph have disjoint lifetimes

1584316744
adamkowalski
you may run the session many times, and each time it will allocate all the memory it needs to give you the answer, then blow everything away when it's done

1584316782
adamkowalski
we also down below in the example have the expected value which is defined with the eager.constant

