1580515472
pixelherodev
Different incentive structures, I'd presume

1580515500
pixelherodev
Microsoft has no incentive to increase POSIX compatibility

1580515519
daurnimator
pixelherodev: I noticed

1580515538
daurnimator
pixelherodev: the windows kernel is perfectly capable of an openat operation

1580515548
pixelherodev
I didn't say they weren't

1580515559
pixelherodev
Microcontrollers do, because they don't have a preexisting brainwashed rabid fanbase that'll keep buying for no good reason, or the tremendous market power of MS

1580515565
daurnimator
infact I'd argue the win nt syscall for that is much better designed

1580515580
pixelherodev
So yet another reason for them not to support openat

1580515591
pixelherodev
daurnimator, that PR should be disregarded for now; the logic is wrong.

1580515596
pixelherodev
Going to fix it later

1580515603
daurnimator
I should follow up with cyphar about fixing the linux syscall...

1580515830
Snektron
interested in how the comptime fmt looks

1580515951
fengb
Itâ€™s just converting the output argument to comptime

1580515979
fengb
No real API changes, but it unblocks async os.write

1580516019
fengb
Which I probably should have attempted before my spirit journey :P

1580516415
daurnimator
howso?

1580518324
pixelherodev
daurnimator, whatever ended up happening to mixins?

1580518458
daurnimator
pixelherodev: andrew didn't like that mixins weren't namespaced within an object which could result in different mixins being incompatible with each other if they both implemented the same method

1580518545
pixelherodev
:(

1580518586
pixelherodev
What if there was e.g. a `pub usingnamespace T as T1`?

1580518631
pixelherodev
That would be a simple tweak that should allow for mixins to be blended completely

1580518674
fengb
The method names collide

1580518993
pixelherodev
fengb, no, because it wouldn't be part of R

1580519001
pixelherodev
Where R is the struct containing that line

1580519023
pixelherodev
If you have `var r: R`, where R has `pub usingnamespace T as T1`, it'd be r.T1.method and not r.method

1580519054
fengb
Ah I see. So T1 would be a pointer to r still? But with new methods

1580519071
daurnimator
pixelherodev: you could already do that as `pub const T1 = T`. the issue is what gets passed as `self` when you do: `r.T1.method()`

1580519080
pixelherodev
Hmm, there might actually be a way to achieve something similar with just comptime logic...

1580519116
daurnimator
pixelherodev: there's also the issue of people taking T1 out of `r`... which would be solved with e.g. the `fixed` proposal

1580521064
Snektron
You could pass in a struct literal with references to the functions

1580521088
Snektron
Instead of implicitly using functions of the implementer

1580521103
Snektron
But that doesnt fix using namespace collisions

1580541239
ntgg
is there something like `switch(<u32 or whatever>) { 1 => .A, 2 => .B, else |val| => something }`?

1580545771
metaleap
ntgg: there is but it looks like this ;)   switch(val) { 1 => .A, 2 => .B, else => something(val) }

1580550108
metaleap
i want to use a hashmap at comptime but on `.put()` FixedBufferAllocator we come to "lib/zig/std/heap.zig:620:9: error: cannot store runtime value in compile time variable"

1580550130
metaleap
so whats the preferred alloc for comptime guys?

1580550258
metaleap
if using `std.heap.page_allocator` then "lib/zig/std/mem.zig:125:36: error: unable to evaluate constant expression"

1580567422
forgot_password
Hey andrewrk, regarding the issue with Core Audio headers and `translate-c`: I removed the `-x c` flag in `codegen.cpp`, but the issue still persists. Do you have any idea why that is? I don't have a clue to be honest...

1580568957
mikdusan
forgot_password: is it failing via `zig translate-c` or @cImport ?

1580569571
jessermeyer
Should taking the address of a temporary variable be disallowed? e.g. &@ptrCast(type_dst, identifier);

1580569579
jessermeyer
Is there any value allowing taking the address of a temporary?

1580569875
metaleap
totally

1580569893
metaleap
because while it goes dead when returning..

1580569900
metaleap
beforehand you can pass it around much

1580569913
jessermeyer
How is that valuable?

1580569916
metaleap
aah sorry, i thought

1580569928
jessermeyer
I can show how it's a footgun waiting to happen.

1580569930
metaleap
i read "a temporary" and thought "a local". my bad

1580569950
jessermeyer
Ah, got cha.

1580570406
jessermeyer
I submitted a proposal to consider this an error.

1580576669
betawaffle
what is builtin.Target.Abi.code16 ?

1580578128
pixelherodev
Anyone have good resources on recursive descent parsers?

1580578531
forgot_password
mikdusan, hey, sorry for answering so late. I haven't tried `@cImport`, because I don't know the location of the headers. However, clang, by default, can resolve the files. So what I did was to first run the pre-processor via `clang -E` and then `zig translate-c` the output.

1580578568
forgot_password
When I run `clang -x c` on the output it works fine, but translate-c fails

1580578583
fengb
pixelherodev: I learned quite a bit following

1580578636
pixelherodev
fengb, thanks!

1580578647
mikdusan
try --> zig translate-c foo.h -F`xcrun -show-sdk-path`/System/Library/Frameworks

1580578661
pixelherodev
Might try writing a LL parser first, as I think I understand it a bit more

1580578761
pixelherodev
this is for the LLVM backend; figured a real parser would be a better idea than fixing up the hacked together kludge

1580578772
forgot_password
When copy that 1 by 1 it says that it expected another argument after '-show-sdk-path'

1580578777
pixelherodev
Also improving the design a bit, so that the parser can be easily replaced without needing to tweak anything else

1580578828
forgot_password
Oh wait, now I know what `-F` does

1580578837
pixelherodev
That way, it can have e.g. an LLVM 9 parser and an LLVM 10 parser and swap them on demand

1580578853
forgot_password
I get the same error :/

1580578854
pixelherodev
And since the AST generation isn't part of the parser anymore, the same AST can be generated regardless of the parser

1580578893
mikdusan
forgot_password: don't use output from `clang -E`. use your header directly.

1580578934
forgot_password
Yeah I noticed my mistake as well, hehe... Now it cannot find TargetConditionals.h

1580578935
mikdusan
in case irc garbles the sigils:

1580578964
forgot_password
No it works fine, I'm just using fish so I had to adjust something

1580579032
mikdusan
what is the .h file you're using?

1580579084
forgot_password
It just includes <CoreAudio/CoreAudio.h> and <AudioToolbox/AudioToolbox.h>

1580579187
forgot-password
A fews days ago I uploaded a link to a pastebin containing the errors, should I send it again?

1580579200
forgot-password
posted*, not uploaded

1580579201
wilsonk
I thought that three back-ticks was the markdown symbol to get code to show properly in an issue?

1580579210
mikdusan
ok so another path is needed:

1580579212
wilsonk
is is something else?

1580579219
forgot-password
wilsonk: It is, afaik

1580579221
mikdusan


1580579226
forgot-password
Did you add a line break?

1580579230
wilsonk
weird

1580579273
forgot-password
Does it not show up at all or is it only missing syntax highlighting?

1580579277
wilsonk
yeah, line break didn't change anything

1580579287
wilsonk
just missing the highlighting

1580579315
forgot-password
You can add the language after the three ticks at the beginning

1580579319
wilsonk
maybe that takes a minute or two? Not sure

1580579334
forgot-password
Like "```zig\n code \n```"

1580579334
pixelherodev
Highlighting requires specifying the language, e.g. ```zig

1580579346
wilsonk
ah, ok

1580579349
forgot-password
mikdusan: That didn't change anything, sadly

1580579364
pixelherodev
GitHub also is more sensitive than most markdown parsers, and so requires empty lines before the opening ``` and after the closing ```

1580579376
wilsonk
yep that did it. Thanks

1580579378
mikdusan
forgot-password: when's the last time you updated xcode?

1580579390
forgot-password
Phew, is there a quick way to find that out?

1580579400
forgot-password
I mean I can update it now

1580579404
wilsonk
bbl

1580579427
mikdusan
forgot-password: no let's just check caches

1580579438
forgot-password
I'm running "Version 11.2.1 (11B500)" if that helps

1580579452
mikdusan
and output of `xcrun -show-sdk-path` ?

1580579466
forgot-password
"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk

1580579501
mikdusan
and include_dir value in zig-cache/native_libc.txt ?

1580579564
forgot-password
Running the command doesn't cause a zig-cache directory to appear, apparently

1580579585
mikdusan
ok how about ~/Library/Application Support/zig/stage1/native_libc.txt

1580579642
forgot-password
"include_dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include

1580579654
mikdusan
erase native_libc.txt

1580579673
mikdusan
run translate command again, with ONLY the -F (-I should not be needed)

1580579689
forgot-password
Wow, yeah, that worked

1580579710
forgot-password
Awesome, thank you very much!

1580579729
mikdusan
so long story short, you will always need -F for frameworks until we enhance zig to start figuring that out,

1580579767
forgot-password
Okay, I assume that the `MacOSX10.14` directory was leftover from earlier zig installations?

1580579769
mikdusan
and anytime you upgrade xcode compiler or move stuff around that causes that cached path location to be wrong, the file has to be removed

1580579772
mikdusan
yup

1580579778
forgot-password
Alright

1580579800
forgot-password
I will try to remember the native_libc file when I hit such an issue again :)

1580579804
forgot-password
Thanks again :)

1580579816
mikdusan
fyi... we're on a track to make this outdating of cache less painful but not there yet

1580579846
forgot-password
Well, it's not that painful if you know what you need to do :p

1580583010
pixelherodev
Heh, figured out what to call the LLVM IR Zig library: ziggirat :P

1580583029
pixelherodev
Might be something better but I think this is sufficiently face-palmingly stupid

1580583141
ntgg
is there something like `switch(some_number) { 1 => .A, 2 => .B, else |val| => something }`?

1580583173
pixelherodev
`switch (val) {1 => .A, 2 => .B, else => something}`

1580583182
pixelherodev
val is still usable there

1580583190
pixelherodev
e.g. `else => something(val)` is perfectly valid

1580583628
pixelherodev
What's the build.zig equivalent of --pkg-begin --pkg-end?

1580583648
pixelherodev
Never mind, found it

1580583655
pixelherodev
Scrolling through build.zig is fun :P

1580584942
pixelherodev
Well, this is useful: `%s/std.debug.warn(".*"/\=submatch(0).", .{}"`

1580584996
pixelherodev
Though it probably would've been faster to type it manually than to figure out how to do that :P

1580585094
pixelherodev
Other neat Vim/Zig integration: if an error is returned all the way through main (e.g. `try a()` in main), it'll automatically jump to the

1580585103
pixelherodev
This is *awesome*, and huge thanks to whoever set this up

1580588100
pixelherodev
There a way to add arbitrary args to the Zig invocation of a exe in `build.zig`?

1580589368
BaroqueLarouche
for outputting raw file in the build system, does installRaw("kernel.bin") function to LibExeObjStep make sense ?

1580589422
pixelherodev
Read build.zig directly is my suggestion

1580589423
pixelherodev
It's what I'm doing

1580589597
BaroqueLarouche
I'm going to implement it, asking feedback for the function name and parameter

1580589856
pixelherodev
Ohh

1580589857
pixelherodev
Whoops

1580589865
pixelherodev
If you ask me, yeah

1580591604
mikdusan
pixelherodev: `zig build run -- myarg0 myarg1 ...` and add those args to your run command:

1580591605
mikdusan
`if (b.args) |args| run_cmd.addArgs(args);`

1580591628
pixelherodev
Not run though

1580591631
pixelherodev
I meant the zig invocation

1580591640
pixelherodev
Doesn't matter anyways

1580591648
pixelherodev
On a different note: `target triple\b|target datalayout\b|source_filename\b|[%@][-a-zA-Z$._][-a-zA-Z$._0-9]*\b`

1580591655
pixelherodev
That's the

1580591663
pixelherodev
Matches LLVM identifiers in my lexer :P

1580591673
pixelherodev
(I don't actually use regexes in the lexer, but in the docs)

1580591831
jessermeyer
Is this "has no member" error more likely a Zig .pdb error or VS .pdb parse issue?

1580591835
jessermeyer


1580592003
pixelherodev
I'd guess nnot

1580592026
pixelherodev
That's VS Code using debug info for a Windows DLL

1580592044
pixelherodev
Zig doesn't generate debug info for dx12, Microsoft does (AFAIK)

1580592102
jessermeyer
Isn't Zig providing debug info for it's structs?

1580592106
jessermeyer
its~

1580592122
jessermeyer
plot thickens

1580592123
jessermeyer


1580592143
pixelherodev
Ah wait I see what you mean

1580592148
jessermeyer
the function has a plausible address

1580592168
pixelherodev
You used translate-c

1580592177
jessermeyer
Yessir.

1580592180
pixelherodev
Check the header?

1580592187
jessermeyer
It looks fine.

1580592198
pixelherodev
I'm saying, the value shows up in the C header also?

1580592201
pixelherodev
Zig didn't magic it up?

1580592230
jessermeyer
By value you mean EnableDebugLayer?

1580592234
jessermeyer
Yeah it's all there and accounted for.

1580592236
pixelherodev
yeah

1580592263
jessermeyer
The whole bit looks like

1580592264
jessermeyer
const ID3D12DebugVtbl = extern struct {    QueryInterface: fn ([*c]ID3D12Debug, [*c]const IID, [*c]?*c_void) callconv(.Stdcall) HRESULT,    AddRef: fn ([*c]ID3D12Debug) callconv(.Stdcall) c_ulong,    Release: fn ([*c]ID3D12Debug) callconv(.Stdcall) c_ulong,    EnableDebugLayer: fn ([*c]ID3D12Debug) callconv(.Stdcall) void,};pub const ID3D12Debug =

1580592264
jessermeyer
extern struct {    lpVtbl: [*c]ID3D12DebugVtbl,};

1580592269
jessermeyer
eh

1580592272
jessermeyer
That's hard to read.

1580592279
jessermeyer
But it's there properly.

1580592293
jessermeyer
And the last image shows that an address is being assigned there.  It's just not showing up in the watch window.

1580592324
pixelherodev
I mean is it in DirectX.h or whatever it's called?

1580592348
jessermeyer
Originally, yes. d3d12sdklayers.h

1580592362
jessermeyer
I had to fix the macro tho, since translate-c couldn't handle the \ character.

1580592368
pixelherodev
Then I don't think that'd be on Zig

1580592377
pixelherodev
Unless it's a C++ header?

1580592389
pixelherodev
In which case, I wouldn't expect translate-c to even work

1580592396
jessermeyer
It's technically both but I'm using the C COM interface macros.

1580592407
jessermeyer
Nah it does. It's a very simple macro after the fix.

1580592425
jessermeyer
#define ID3D12Debug_EnableDebugLayer(This)    ( (This)->lpVtbl -> EnableDebugLayer(This) )

1580592550
pixelherodev
No clue, sorry

1580592558
jessermeyer
Thanks for the sanity check :)

1580592579
jessermeyer
I'll wait until someone with some experience with the debug output shows up before filing an issue.

1580593128
jessermeyer
Ok, I'm noticing a pattern.

1580593141
jessermeyer
functions whose return type is void are not discoverable by VS.

1580593444
jessermeyer


1580593490
jessermeyer
This smells more and more like a Zig debug output issue...

1580593498
jessermeyer
Going to risk an official issue post on Github...

1580593506
pixelherodev
That's not a risk

1580593510
pixelherodev
Worst case you're wrong and it's closed

1580593553
jessermeyer
:)

1580593914
jessermeyer
Yup, I think I have a mini repo.

1580595099
jessermeyer


1580595271
pixelherodev
It's safe to assume system LLD has the needed patches by now, correct?

