1608509004
seadragon-droid
marijnfs: Have you tried stepping through with a debugger to see what goes wrong? It looks like nng_socket is just a struct containing a single uint32_t so I'd be surprised if you're hitting a C FFI bug

1608509133
seadragon-droid
Does it work if you build a executable and run that, instead of using the test harness?

1608511566
pixelherodev
I'm stuck on the hardest part of my zig compiler: the name! :(

1608511575
pixelherodev
cig is too obvious, and dumb

1608511582
fengb
Just do zig backwards

1608511586
pixelherodev
No.

1608511648
pixelherodev
For a reason that's obvious if you say that out loud

1608511657
a92
Zag?

1608511664
pixelherodev
Pretty sure that's reserved

1608511670
pixelherodev
Andrew had a use for that IIRC

1608511680
pixelherodev
Even if not, I know of at least one project using that already :P

1608511687
a92
Zog? Zug? Zeg? Zyg?

1608511710
pixelherodev
Zyg is a good enough temporary name, actually ;)

1608511734
a92
:D Is this thing published online anywhere?

1608511751
pixelherodev
I'm literally starting on it rn

1608511756
pixelherodev
Needed to figure out what to pass to mkdir ;)

1608511810
pixelherodev
...

1608511813
pixelherodev
> #zyg is already registered to freenode-placeholder-account.

1608511816
pixelherodev
:(

1608511844
a92
Zog, Zug, and Zeg are still suggested

1608511864
a92
Or Yig, or Zif, or Zih

1608512093
g-w1
lig (light zig)

1608512100
pixelherodev
##zyg i guess

1608512142
fengb
zig--

1608512144
pixelherodev
Now for the actually hard part: figuring out the design :P

1608512647
andrewrk
I think the actually hard part will be sticking to the project for any duration of time

1608512676
pixelherodev
That's probably very true, yeah

1608513527
companion_cube
is it written in C?

1608513631
pixelherodev
companion_cube: yes

1608513895
companion_cube
What's its reason to be, if I may ask ? (not critizing)

1608514137
pixelherodev
companion_cube: emphasis on simplicity

1608514174
a92
That's a design goal, not a reason for creation

1608514181
pixelherodev
Actually, it's both

1608514192
pixelherodev
IMO, stage2 is too complex

1608514194
companion_cube
Like the zig tcc?

1608514201
pixelherodev
Sorta, yeah

1608514209
pixelherodev
tcc/cproc analogue, basically

1608514213
a92
TZC!

1608514221
pixelherodev
zproc ;)

1608514442
pixelherodev
tzz is decent too :)

1608514553
a92
But doesn't the second C stand for compiler?

1608514568
a92
Or would it be a Tiny Zig Zompiler

1608514661
pixelherodev
Tiny ZigZags?

1608514668
pixelherodev
I'm going to focus on the actual work lol

1608514684
pixelherodev
I have a temporary name, that's all I need

1608519211
pixelherodev


1608519543
g-w1
why is the parser so special that it requires a subprocess? speed?

1608519683
pixelherodev
Yeah

1608519689
pixelherodev
I'm fully parsing, without lazy eval

1608519701
pixelherodev
lazy eval is at the sema stage

1608519717
pixelherodev
Not just speed though - it's to make up for the fact that Zig expects only one main compilation process

1608519736
pixelherodev
with C, you can do e.g. make -j4, and lexing/parsing/sema are done in one process per file

1608519740
pixelherodev
This recoups that loss

1608519755
pixelherodev
The biggest motive is to get all the I/O out of the way in parallel

1608519758
g-w1
ah

1608520471
pixelherodev


1608520497
pixelherodev
I think the design is good; ran through a more complex example involving comptime duck-typing and it looks to work fine

1608520513
pixelherodev
(Though of course I'm doing this with a cognitive model, which could be wrong)

1608520986
pixelherodev
Unrelated: kudos to Zig for having a well-designed documentation webpage

1608520994
pixelherodev
Loads in mothra in like 50ms tops :)

1608521053
pixelherodev
and I mean

1608521976
pixelherodev
heck, I can integrate cproc for `zig cc`!

1608522016
pixelherodev
(or just add a C lexer+parser myself; shouldn't be too bad)

1608523428
companion_cube
cig zz

1608523540
pixelherodev
lol

1608528590
camconn
Hello, any maintainers here? I'd like to help out with Zig's docs in the standard library and was looking for some guidance on that.

1608531485
pixelherodev
/buffer 31

1608531488
pixelherodev
... oops

1608536483
pixelherodev
Got a working subprocess spawning solution :)

1608536671
pixelherodev
Bonus: it uses a linear allocator instead of malloc ;P

1608541185
briyoman
hi guys ! So i'm new to zig but i've been watching videos from both Andrew and Zig showtime channels. I'm looking forward to writing code in this language !

1608541195
briyoman
but i've recently run into a weird problem

1608541293
briyoman
so i use this Void Linux virtualbox instance with 2 CPU cores and about 1.5 gigs of RAM to play around with stuff

1608541311
briyoman
so its a very low resource machine...

1608541338
briyoman
when i try to build zls, or any other zig code using `zig build` i run into a problem where

1608541341
pixelherodev


1608541358
pixelherodev
briyoman: Zig's stage1 uses atrocious amounts of memory

1608541361
briyoman
the cpu shoots up to 100 % and the virtualmachine hangs

1608541367
pixelherodev
You'll need probably 4GB+

1608541373
briyoman
pixelherodev ah i see

1608541381
briyoman
oh wow... damn

1608541385
briyoman
xD

1608541388
pixelherodev
Stage2 is much much more efficient

1608541404
pixelherodev
And my compiler (which I started working on last night :P) will be as well

1608541414
pixelherodev
But stage1 isn't quite ready and mine isn't

1608541426
briyoman
xD

1608541563
briyoman
that means i'm going to have to try and do what i was doing in C now ðŸ˜­

1608541595
briyoman
oh well... i'll keep up with zig's development and wait for stage2 ðŸ˜œ

1608541633
pixelherodev
:)

1608541766
FireFox317
briyoman, you can also build the zig program on your host machine and then run it in the vm :P

1608541817
pixelherodev
That's heavily contextual

1608541826
pixelherodev
There's plenty of legitimate reasons not to want to

1608541918
briyoman
FireFox317 yeah i could ðŸ˜‚ but then ðŸ˜‚

1608541941
FireFox317
I know, pixelherodev, but it is an option :D

1608541942
briyoman
i'll probably just end up running it on the host machine itself ðŸ˜‚

1608541964
briyoman
i mean i was using the virtualmachine for fun, so its all cool xP

1608541971
pixelherodev
:)

1608542036
FireFox317
briyoman, zig won't put files all over the place on your machine (only in known locations, such as global cache), so its pretty easy to clean up on your host machine :P

1608542107
briyoman
heh yeah ig

1608542109
briyoman
ðŸ˜‚

1608544574
ifreund
pixelherodev: this is the suckless C zig compiler you were talking about? nice

1608544780
ifreund
also is that acme?

1608544857
pixelherodev
ifreund: yes, and yes :)

1608544883
pixelherodev
I "remotely" logged into my 9front box :P

1608544906
pixelherodev
More design notes than code so far :P

1608544988
ifreund
lack of syntax highlighting is a little jarring but it works alright for simpler languages like C I guess

1608545045
pixelherodev
Honestly, it took like a day of getting used to

1608545050
pixelherodev
But now I haven't noticed

1608545067
pixelherodev
I think syntax highlighting is a waste of information

1608545110
pixelherodev
Highlighting can be very useful, but syntax highlighting is *not*. Syntax highlighting means that I'm processing the syntax whenevr I glance around; without it, it's easier to focus

1608545131
pixelherodev
Tactful highlighting to bring attention to specific details, sure; highlighting

1608545184
ifreund
I agree that there's a balance to be struck, but I'm not sure I'd be happy with absolutely none

1608545194
ifreund
maybe I just need to try it out for a bit

1608545202
pixelherodev
I'm not trying to convince you

1608545230
pixelherodev
I don't care if you prefer it with; that's the beauty of individual choice (which is of course just an abstraction over determinism, but that's not the point)

1608545243
ifreund
true that

1608545577
pixelherodev
Oh god it's five am. I've spent nearly seven hours on this now...

1608545816
ifreund
night o7

1608545825
pixelherodev
Who said I was stopping? :P

1608545836
pixelherodev
I just got it lexing its first tokens, I can't stop now!

1608545844
ifreund
heh

1608545870
pixelherodev
Feels weird to be doing this properly from the beginning, to be honest

1608545880
pixelherodev
Last time I did a compiler, I half-assed the whole thing with the intent of whole-assing it later

1608545912
pixelherodev
This time, I designed the entire thing, then the entire AST, then ran through some tests cognitively, then wrote the whole parsing architecture...

1608546382
ifreund
you have the source online yet?

1608546479
pixelherodev
Nope

1608546485
pixelherodev
Sample fully lexed, I think this is a decent commit spot

1608547217
pixelherodev
ifreund:

1608547253
pixelherodev
It 100%

1608547262
pixelherodev
there's one line missing for shm usage :P

1608547305
pixelherodev
Also, no Makefile :P

1608547381
scientes
what is this?

1608547414
pixelherodev
mkfile?

1608547416
pixelherodev
plan9 mk

1608547425
pixelherodev
!= POSIX Make (!= GNU Make)

1608547445
scientes
I knew a guy in San Francisco that was really into plan 9

1608547457
scientes
I think he was the main push on porting go-lang to plan9

1608547479
scientes
(which is ironic, given that most of the core go team is the former core team of plan 9)

1608547486
ikskuh
pixelherodev: what are you working on?

1608547505
pixelherodev
ikskuh: lightweight zig compiler

1608547512
scientes
ikskuh, look at the link, it is a zig tokenizer+parser

1608547512
ikskuh
oh no :D

1608547513
ikskuh
have fun

1608547524
scientes
pixelherodev, are you going to try to just compile to C?

1608547524
ikskuh
writing a compiler for a language without spec :D

1608547526
pixelherodev
Oh yeah, and it requires libmp (arbitrary precision math lib from Plan9)

1608547530
ikskuh
i don't think that's a good idea right now

1608547542
pixelherodev
Why not?

1608547549
pixelherodev
ahhh

1608547551
pixelherodev
Truew

1608547553
pixelherodev
s/w//

1608547557
scientes
I think it is a great idea

1608547561
pixelherodev
scientes: no

1608547573
scientes
I would love to see another implementation

1608547579
pixelherodev
Might not bother with a CBE for this

1608547591
ikskuh
scientes: it's a horrible idea as it is doomed to fail

1608547593
scientes
I also would like to port my favorite zig features to C

1608547596
pixelherodev
ikskuh: false!

1608547615
ikskuh
are you going to implement all accepted proposals right from the start?

1608547619
pixelherodev
Yep

1608547621
ikskuh
as it would be kinda stupid not to do it :D

1608547624
scientes
ikskuh, you are doomed to fail

1608547627
ikskuh
always

1608547634
ikskuh
even then, having a language that is changing

1608547638
scientes
or rather

1608547640
scientes
ikskuh, your a towel

1608547657
ikskuh
i just don't think it's worth the time before a language spec

1608547661
ikskuh
because anything might change

1608547669
ikskuh
and then phd needs to change that stuff live

1608547675
scientes
yeah, but it isn't implementing zig

1608547679
scientes
it is implementing zyg

1608547681
scientes
look at the name

1608547703
ikskuh
i think that's just the name and the compiler should be zig compliant

1608547715
pixelherodev
^

1608547720
pixelherodev
It is 100% intended to be compliant :P

1608547735
scientes
ikskuh, lua manages to continue despite having 5.1, 5.2, and 5.3 which are all incompatible, and the highest performing implementation, luaJIT is 5.1

1608547736
pixelherodev
I might end up cutting stuff out

1608547755
pixelherodev
but I'm definitely not

1608547766
ikskuh
scientes: i think it's sad that luajit doesn't go up to more modern versions

1608547774
ikskuh
that's one reason i don't use it

1608547780
ikskuh
it makes stuff harder for people

1608547790
scientes
ikskuh, except that the later versions broke compatibility for no good reason

1608547807
scientes
and they are not "lua 6"

1608547847
scientes
it is like the perl 6 or python 3 mess

1608547847
ikskuh
true, but afaik they don't follow semver ;)

1608547863
ikskuh
daurnimator, can you elaborate on the lua versioning?

1608547877
ikskuh
and scientes: when we have two non-compatible zig compilers

1608547880
ikskuh
the zig project failed

1608547894
ikskuh
because it's about maintainable software

1608547902
ikskuh
and when your other compiler has extensions or whatever

1608547908
scientes
ikskuh, that is not a reason to dissuade people

1608547909
ikskuh
the code will not be portable and maintainable anymore

1608547954
ikskuh
but it's okay you don't agree with mie

1608547955
scientes
to speak or a word whose meaning changed

1608547956
ikskuh
*me

1608547969
ikskuh
i just think the energy is better spent on creating a zig spec

1608547976
ikskuh
instead of another compiler that might differ from the main one

1608547984
ikskuh
and then there are two unfinished versions of the "same" language

1608548079
ifreund
multiple compiler implementations is a good thing to have

1608548095
scientes
"unfinished"

1608548141
ifreund
We don't have a spec yet, but by the time pixelherodev's compiler is reaching usability I expect a complete spec will be a lot closer

1608548183
ikskuh
i don't disagree with having multiple compiler implementations

1608548191
ikskuh
but i disagree with the chosen time to create one

1608548246
ifreund
I feel very strongly that people should work on whatever they are most passionate about when it comes to free time open source work

1608548288
pixelherodev
Okay, got it building on Linux :)

1608548318
ifreund
having an alternative implementation already usable before zig hits 1.0 would a great thing IMO

1608548359
ifreund
also a pure C implementation prioritizing simplicity is pretty ideal for bootstrapping

1608548762
pixelherodev
SHM fails on Linux :P

1608548781
pixelherodev
> main.c.93: failed to allocate SHM

1608549023
pixelherodev
Got it!

1608549063
pixelherodev
Now works on Linux as well :)

1608549293
pixelherodev


1608549352
pixelherodev
ikskuh: also, as I said, there

1608549367
pixelherodev
I absolutely will not add anything that isn't supported by the official compiler

1608549372
pixelherodev
No exceptions.

1608549408
pixelherodev
I might choose

1608549411
ikskuh
good :)

1608549473
ifreund
I really hope "sloppy mode" gets rejected

1608550223
scientes
pixelherodev, parental consumption?

1608550234
pixelherodev
scientes:

1608550339
pixelherodev
Parsing is done by subprocesses, which write the results into memory shared with the parent, which does the restof the work once all parsers are done

1608550371
pixelherodev
The best part is that there's

1608550391
pixelherodev
took a bit of effort, but I found a straightforward way to do it without breaking POSIX :)

1608550402
ifreund
oh that's not bad, I was about to question if parsing was enough of a bottleneck to make the complexity worth it

1608550539
pixelherodev
ifreund: the reason it's only parsing is that only parsing is simple enough for it to be worthwhile

1608550552
pixelherodev
I tried figuring out a design for sema, but it required wayyyy too much effort

1608550577
pixelherodev
With parsing, we can do it per-file, and there's no worry about recursive dependencies

1608550627
pixelherodev
Sema might still be doable if I can think of a simple enough design

1608550639
pixelherodev
The key requirement is that processes need to not

1608550659
pixelherodev
The parsing processes have

1608550670
pixelherodev
Which means they get 100% of the benefits of parallelism

1608550736
ifreund
nice

1608550748
pixelherodev
oh yeah, and just to poke a bit of fun:

1608550757
pixelherodev
Notice anything about the test? ;P

1608550808
ifreund
tabs :P

1608550817
pixelherodev
I know, it's so annoying!

1608550820
pixelherodev
I asked `isspace`!

1608550822
ifreund
you might want to add a license by the way

1608550828
pixelherodev
tabs are *not spaces*, ansi!

1608550830
pixelherodev
:P

1608550839
pixelherodev
ifreund: I know

1608550864
pixelherodev
done

1608550867
pixelherodev
thanks

1608550928
ifreund
no problem, the FSF would still be disappointed in your lack of copyright headers though ;P

1608550949
pixelherodev
The FSF can go FSF themselves

1608550977
ifreund
also sr.ht says your commit was made "4 hours from now", might want to check your system clock

1608550981
pixelherodev
Headers in files have no legal effect

1608550987
pixelherodev
ifreund: ughhh right I know

1608551005
pixelherodev
THAT's why mk is always rebuilding when I switch systems!

1608551217
pixelherodev
Alrighty, imports time :)

1608551243
pixelherodev
might  do a stream later; haven't done one since before term started :P

1608551261
pixelherodev
and it'll be a good opportunity to play with libva lol

1608551278
pixelherodev
s/opp[a-z]*/excuse/

1608551354
ifreund
s/\[a-z\]/\./

1608551376
pixelherodev
that'd match the rest of the line, no?

1608551421
ifreund
s/\\\./\[^ \]/

1608551447
ifreund
you're right, I missed your intent :P

1608551461
pixelherodev
;)

1608552968
pixelherodev
ifreund: i lied! There is a tiny bit of synchronization, but it's just the parent waiting for a child to either give it a path to spawn a parser for or exit

1608558753
pixelherodev
Another design bonus: since each process runs on its own, I can use a single `static struct {} ctx` to store all lexer / parser state, and not need to pass everything around :P

1608563462
semarie
pixelherodev: with shm, are you able to run several zig compilation concurrently ? or will they share the same memory segment (at least on POSIX) ?

1608563488
pixelherodev
semarie: It's concurrent

1608563502
pixelherodev
As of a minute ago, it's now able to parse multiple files in parallel

1608563551
semarie
yes, but you are not running on POSIX :p

1608563567
pixelherodev
It works on POSIX

1608563567
semarie
if I didn't mess myself, calling shm_open("/zyg", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR)

1608563575
pixelherodev
Yep, it does that

1608563581
semarie
on all several processes should get the same shm segment

1608563588
pixelherodev
#ifdef _PLAN9_SOURCE segattach(...) #else {15 lines of doom}

1608563599
pixelherodev
Not quite

1608563614
pixelherodev
It currently does one segment per process

1608563620
pixelherodev
(which is one per input file)

1608563635
pixelherodev
I'm going to improve that later, since that won't scale well

1608563681
semarie
for POSIX reading, if process1 uses shm_open("/zyg") and process2 uses shm_open("/zyg") too, it is the same

1608563723
pixelherodev
Only the parent process uses shm_open

1608563729
pixelherodev
it then fork()s off workers

1608563748
pixelherodev
which inherit the shared memory segment

1608563754
companion_cube
watching a talk on "reducing C++ accidental complexity"

1608563762
semarie
but if I call "zyg foo.zig" in one term, and "zyg bar.zig" in another term ?

1608563764
companion_cube
I think zig has some room :D

1608563776
pixelherodev
semarie: then currently it'll crash :P

1608563780
pixelherodev
It

1608563799
pixelherodev
e.g. shm_open(aprintf("/zyg.%d", getpid())

1608563806
pixelherodev
)

1608563824
semarie
pixelherodev: ok. for now it isn't important. all the best for your project :)

1608563829
pixelherodev
Thanks :)

1608563851
semarie
:D

1608563854
pixelherodev
not asprintf

1608563857
pixelherodev
aprintf

1608563865
pixelherodev
It's a custom util function which allocates or FATALs :P

1608563921
pixelherodev
Oh yeah, another side benefit of the design: the parser processes never need to bother freeing memory

1608563926
pixelherodev
The OS will take care of it when they exit() :P

1608563939
g-w1
do you handle circular dependencies?

1608563942
pixelherodev
Yes

1608563944
pixelherodev
Already :)

1608563987
pixelherodev
g-w1:

1608564287
pixelherodev
I honestly think I can get basic tests compiling within a day or three

1608564307
pixelherodev
But "basic tests" aren't exactly useful :P

1608564335
pixelherodev
The only real pain point I see is the comptime engine

1608564356
pixelherodev
Everything else is smooth sailing from here, now that the design is completed and (at least somewhat) tested

1608564422
mfiano
Hello

1608564463
g-w1
I would say you can make it even simpler than stage2 if you want by making one ir instead of 2 and just making sure you dont have any comptime stuff left over after analyzing it.

1608564994
pixelherodev
g-w1: it's already designed to be simpler than stage2 :P

1608565046
pixelherodev
No incremental compilation, no embedded linker...

1608565684
g-w1
that is what im saying ... I think analysis can be done with 1 ir instead of 2

1608566300
pixelherodev
@g-w1 Yes, but partly because my design involves doing analysis on the AST instead of on an initial IR

1608566385
LanceThePants
So I use zig-bootstrap to create toolchain for arm-linux-musl. Doesn't look like it's been updated for 0.7.1, and when I manually update zig in the repo it fails with musl error. When might zig-bootstrap be updated to build for 0.7.1?

1608566686
ifreund
LanceThePants: you want the 0.7.x branch of zig-bootstrap

1608566696
ifreund
the master branch tracks zig master

1608566721
ifreund
note that there was an 0.7.1 tag pushed to the repo as well

1608567412
LanceThePants
ifreund: Oh sweet, thanks for that info!

1608570201
ifreund
sigh, looks like memoization of comptime functions taking slices as parameters is busted

1608570243
pixelherodev
ifreund: good news! I can make it even simpler!

1608570245
pixelherodev
Turns out I'm an idiot!

1608570258
ifreund
wonderful1

1608570262
pixelherodev
I've been using lockfiles to avoid spawning multiple processes for the same file

1608570272
pixelherodev
How do you think I clean up at the end?

1608570278
pixelherodev


1608570285
pixelherodev
This is a serious facepalm moment

1608570292
pixelherodev
I have an array of the

1608570295
pixelherodev
Not the actual files

1608570299
pixelherodev
like... why?

1608579984
andrewrk
ifreund, can you try reverting 84549b42678fa1f2755b2ec7bf4f4936d8f513af

1608580123
ifreund
andrewrk: doesn't seem to have made a difference

