1586217612
andrewrk
invalid IR still shouldn't hang the verifier

1586217642
pixelherodev
It's not the verifier that's hanging though

1586217649
pixelherodev
It's instcombine, and only if other optimizations run first

1586217710
andrewrk
if the verifier says it's invalid, then instcombine is allowed to UB

1586217748
pixelherodev
Verifier doesn't say that pre-reduction though...

1586217773
andrewrk
I think you should submit the pre-reduced code then

1586217779
pixelherodev
Yeah, double-checked...

1586217789
pixelherodev
Think the reduction might be wrong

1586217825
pixelherodev
Attempting a reduction with test=opt and test-arg=-O3 doesn't have a timeout

1586217831
pixelherodev
So it never actually does anything

1586217892
andrewrk
I think your reduce script is not detecting the correct thing

1586217901
andrewrk
your reduce script should look for the crash instead of a verifier error

1586217912
pixelherodev
I know

1586217915
pixelherodev
That's what I said

1586217916
pixelherodev
:P

1586217923
andrewrk
ah apologies I missed that

1586217939
pixelherodev
no worries

1586217945
pixelherodev
Thanks for pointing out i should be using a script

1586218658
pixelherodev
No wonder the test was producing invalid IR

1586218667
pixelherodev
I was accidentally using "can it compile" as the test

1586218676
pixelherodev
so it broke it down further and further until it couldn't :P

1586218703
pixelherodev
Seems to be working now, but it's taking a while (because it's ~5s per failed attempt and the goal is to keep going until it stops failing)

1586218880
pixelherodev
Gah, test is still wrong :(

1586219666
andrewrk
I have a 32-bit windows bootstrap tarball now too

1586219671
pixelherodev
Awesome!

1586220412
andrewrk
dare I try aarch64-windows-gnu??

1586220419
andrewrk
I've never even heard of an arm machine running windows

1586220701
daurnimator
andrewrk: windows RT laptops/tablets

1586220724
daurnimator
oh that was arm32

1586220795
andrewrk
mingw-w64 supports both 64 and 32 bit arm

1586220833
daurnimator
seems like the Lenovo Miix 630 is one such device

1586220849
daurnimator
I remember seeing them in stores

1586220921
daurnimator
andrewrk: did you see my note yesterday about using a git subtree in the bootstrap repository?

1586220937
daurnimator
(I agree with you about submodules being bad!)

1586220980
andrewrk
anyway compared to 0.5.0 we're going to have +7 new binary tarballs as part of the release, and +1 new source tarball

1586221026
andrewrk
oh, are "git subtrees" different than submodules?

1586221032
daurnimator
yes

1586221042
daurnimator
submodules are a reference to an external repository

1586221060
daurnimator
subtrees are a way to keep a copy of another repository as a subdirectory

1586221111
andrewrk
that does sound relevant. but why would I want it when not having it is working perfectly?

1586221136
daurnimator
means you can track references easier; and there's a built in way to update it :)

1586221151
daurnimator
essentially its the git blessed way of doing what you're already doing

1586221171
daurnimator
in bootstrap it would look something like: `git rm zig/ && git commit -m "Delete zig in preparation for subtree" && git subtree add --prefix=zig

1586221219
shakesoda
andrewrk: there are a few modern arm windows machines

1586221220
daurnimator
then you update with: `git subtree pull --prefix=zig --squash

1586221245
pixelherodev
There are modern Windows machines? Blasphemy

1586221247
shakesoda
you can also run windows on pi 3's etc if you like

1586221254
shakesoda
not that you, like, should

1586221256
shakesoda
you just can

1586221300
andrewrk
cool. well, I'll leave it to an enthusiast to work on the ability to get zig bootstrapping for arm-windows-gnu and aarch64-windows-gnu

1586221314
andrewrk
daurnimator, let me look into that after the release is tagged

1586221329
andrewrk
right now I'm throwing patches around left and right and happy with the workflow

1586221397
andrewrk
btw, can somebody please appreciate that despite this bootstrap repo supporting all these targets, the clang, lld, and llvm sources have no patches against them, and the build script has no branching logic

1586221416
daurnimator
andrewrk: I noticed you deleted the `test` directories out of them :)

1586221431
andrewrk
yes, however I think it's fair to not call that a patch

1586221444
andrewrk
really, it's shaving off cruft so that the source tarball can be smaller

1586221446
daurnimator
also some vscode config file is missing (not that it matters)

1586221462
andrewrk
no affect on logic; with those files restored the behavior is the same

1586221874
daurnimator
andrewrk: but yes; aside from removal of inconsequtial files, its nice that there's nothing changed from upstream llvm release

1586221884
daurnimator
I'm also impressed you managed to write a POSIX shell script.

1586221895
daurnimator
I had to check a couple of things but it seemed all clear :)

1586221896
pixelherodev
...?

1586221911
pixelherodev
What's so impressive about a POSIX shell script?

1586221931
daurnimator
pixelherodev: its far too easy to accidentally use a bashism

1586221941
pixelherodev
True

1586222108
andrewrk
posix shell is more portable. usually it's pretty pedantic to care, but the explicit goal of this project is "minimal system dependencies"

1586222137
andrewrk
it also should have an equivalent `build.bat` script, which Sahnvour has a WIP version of

1586224011
mikdusan
`${TARGET_OS_LOWER^}` is that posix?

1586224100
pixelherodev
Easy way to check: run it with /bin/sh

1586224115
pixelherodev
Yep

1586224120
fengb
Thatâ€™s linked to bash under many systems

1586224124
pixelherodev
Not mine

1586224132
pixelherodev
Or.

1586224134
pixelherodev
drat

1586224138
pixelherodev
Stupid lying PoS

1586224161
fengb
I only remember Alpine and Ubuntu as the last holdouts

1586224167
pixelherodev
That's one reason I love Alpine

1586224188
waleee-cl
voidlinux uses dash as /bin/sh

1586224259
pixelherodev
That's scarcely better innit?

1586224273
pixelherodev
Can't believe I had to

1586224287
pixelherodev
I don't even want to know how much power it's wasted on this

1586224369
waleee-cl
mostly in comment to Alpine and Ubuntu as the last holdouts of /bin/sh != bash

1586224502
pixelherodev
I know, I'm saying that dash isn't exactly much of an improvement

1586224513
pixelherodev
Alpine and Ubuntu are the last holdouts of /bin/sh == POSIX

1586224830
fengb
Ubuntu uses dash... I just meant they aren't bash

1586224836
fengb
What's wrong with dash?

1586224890
pixelherodev
Isn't it also not POSIX?

1586224970
fengb
I don't think any shell is strictly only POSIX, but it's the one people talk about supporting when getting rid of bashisms

1586224976
pixelherodev
Yes! It worked!

1586224985
pixelherodev
Reduced from 8.7MB to 11KB

1586224992
pixelherodev
:D

1586225026
fengb
That's a slight improvement ðŸ™ƒ

1586225046
pixelherodev
Yep!

1586225092
pixelherodev
Going to attempt to run it again and see what happens

1586225155
pixelherodev
Shouldn't take all that long this time, and might be able to reduce it a tad more

1586225176
pixelherodev
Yeah, a couple more nodes it can seem to ignore

1586225422
pixelherodev
Yep!

1586225429
pixelherodev
1.4KB smaller now; under 10KB!

1586225716
fengb
You didn't drop another 99.9%. Fail!

1586225724
pmwhite
In reference to posix shells, there's

1586225745
pixelherodev
Heh, yeah I know of that one :)

1586225749
pixelherodev
fengb, sure, but counter point

1586225752
pixelherodev
Did it

1586225769
pixelherodev
7671 bytes now

1586225791
pixelherodev
The goal isn't minimal size though

1586225804
pixelherodev
I'm doing this because it's stripping out functions that I might have thought were related to the crash

1586225831
fengb
Oh neat

1586225851
fengb
We should write a new shell, in zig. Call it zsh

1586225901
pmwhite
Has anybody made a shell called rush?

1586225903
pixelherodev
hah

1586225911
pixelherodev
Also, it wasn't 99.9%

1586225927
pixelherodev
It was 99.9156%

1586225930
pixelherodev
SO hah

1586225953
pixelherodev
Well, 99.88 initially

1586225955
pixelherodev
99.9156 now

1586225975
waleee-cl
pmwhite:  if you're thinking of ru(st)sh(ell) there's ion

1586225985
fengb
Same rounding error. No progress ðŸ™ƒ

1586226005
waleee-cl


1586226056
waleee-cl
and a shell called rush implemented in rush, I thought that was a joke on /r/rust

1586226089
waleee-cl
*implemented in rust

1586226148
pmwhite
Good, I didn't want to feel obligated to make it.

1586226180
pixelherodev
There we go, another one gone

1586226187
pixelherodev
readByte is no longer there :)

1586226291
fengb
Is Raspbian not fully on systemd yet?

1586226444
pixelherodev
Might not be able to go down any further :(

1586226551
pixelherodev
Yep

1586226563
pixelherodev
Final reduction: 7441 bytes

1586226758
andrewrk
shiz

1586226762
andrewrk
shell in zig

1586226928
mikdusan
pixelherodev: final reduction, does it fail with --O3 and pass with no optimization?

1586227017
pixelherodev
Yeah

1586227038
mikdusan
there seems to be `--verify-each` Verify after each transform

1586227046
pixelherodev
Works with -O0 and -O1 but now with -O2

1586227049
pixelherodev
Oh interesting

1586227082
pixelherodev
Doesn't help

1586227153
pixelherodev
hmm, this is odd

1586227165
pixelherodev
If I run it through -O1,, then run

1586227276
pixelherodev
Generates basically nothingness but /shrug

1586227815
shakesoda
what is being reduced

1586228253
pixelherodev
shakesoda, dynarec IR

1586228263
pixelherodev
LLVM hangs indefinitely trying to compile it

1586228531
pixelherodev
Now to figure out where to submit the reduction

1586234634
pixelherodev
There a way to deliberately allow multiple enum values to have the same tag?

1586234864
daurnimator
pixelherodev: it's allowed in extern enums

1586236035
pixelherodev
okay but why isn't it allowed normally?

1586236280
pixelherodev
mq32, you have a point about mov being more than one op

1586236285
pixelherodev
also, I see you reverted your name :P

1586236294
pixelherodev
Currently, the implementation is ~160 lines and counting

1586236306
pixelherodev
and I don't think I even support a third of the potential permutations

1586240621
pixelherodev
Added three more permutations just now :(

1586240715
pixelherodev
Also :)

1586240717
pixelherodev
but also :(

1586240997
pixelherodev
I think my "not even a third" was optimistic

1586267335
ifreund
hey, anyone have a momment to explain this compile error to me?

1586268087
dingenskirchen
ifreund: that means that for some reason zig wasn't able to evaluate `server.root.master_factor` and/or `delta` at compile-time

1586268134
ifreund
ok, maybe I can't use std.math.clamp then as I need to call it with runtime known values

1586268145
ifreund
i though only the types had to be comptime known?

1586268186
dingenskirchen
clamp

1586268212
dingenskirchen
as the function has var as argument types everywhere

1586268234
ifreund
yeah, I suspect that's what's happening, thanks

1586269581
fengb
Why isn't raspberry pi interesting? :(

1586269953
pixelherodev
Says who?

1586270659
fengb


1586270740
pixelherodev
that's specifically pi zero

1586270762
pixelherodev
Except that's not true either

1586270770
ikskuh
fengb: i think pi zero isn't an interesting target to comile on :D

1586270772
fengb
Pi Zero arch is identical to <Pi 3

1586270774
pixelherodev
I think Andrew was saying it's

1586270781
pixelherodev
it's in strikethrough

1586270827
fengb
Oh hrmm

1586270860
pixelherodev
that's probably part of why it's uninteresting

1586270926
TheLemonMan
the whole armv6+linux combo is not that interesting

1586270977
TheLemonMan
most of the v6 users I've seen target bare-metal

1586271025
fengb
I mean, I'm complaining but I don't think I'd run the compiler on my Pi :P

1586271042
fengb
Easier to cross compile and copy over >_>

1586271084
pixelherodev
... Zig can't target bare metal... can it?

1586271111
pixelherodev
(to run the compiler on I mean)

1586271144
TheLemonMan
that's not what target means, but no, you need an OS

1586271211
fengb
Bleh, this ABI thing is very confusing. I'll be glad once it gets split as well

1586271278
pixelherodev
TheLemonMan, I know

1586271282
pixelherodev
hence the correction

1586273405
shakesoda
fengb: not quite

1586273410
shakesoda
pi zero arch matches the pi 1

1586273412
shakesoda
not 2

1586273469
shakesoda
the 2's were first v7a, later models the same v8 that the pi 3 uses (but running slower)

1586273484
fengb
Oh

1586273581
fengb
They need to upgrade the zero :(

1586273616
shakesoda
yeah, they do, but i'm not complaining too much given what it is!

1586273896
TheLemonMan
what should they upgrade it to? afaik the zero is meant to be a low-power model

1586274384
fengb
New architecture / fab downclocked to provide the same performance

1586274402
shakesoda
ideally a downclocked version of the pi 4 soc

1586274405
fengb
I'm assuming the newer stuff is more power efficient

1586274407
shakesoda
since it's exactly that

1586274456
fengb
Call it, Pi Naught? ðŸ™ƒ

1586274472
fengb
Pi Zero two

1586274477
shakesoda
+1 for pi zero two

1586274479
fengb
Pi Zero S

1586274631
fengb
Having an IPS backlight on doesn't harm the screen right?

1586274668
shakesoda
it wears the backlight out over time

1586274673
shakesoda
but no, not the screen

1586274712
shakesoda
how much this matters depends on the backlight, the older ccfl ones didn't age as gracefully as leds

1586274875
TheLemonMan
oh, don't know why but I always assumed the rpi zero had some kind of cortex in it

1586274896
TheLemonMan
it has a beefy(-ish) soc instead

1586274898
shakesoda
like, an M?

1586274913
shakesoda
it's a shrunken regular rpi

1586276251
TheLemonMan
gotcha, the only rpi I've ever played with is a rpi1

1586276275
FireFox317
fengb, you send the wrong link. The on you were sending has musleabihf as an ABI. Notice the hf, hard float. And since hard float is not available on armv6kz the target triple doesn't make a lot of sense. The correct one is armv6kz-linux-musleabi and its already working 4 days ago:

1586276383
fengb
But the Pi (Zero) has hard float

1586276471
shakesoda
yeah it absolutely has hard float

1586276505
shakesoda
check for yourself with the possibly easier to find via google "arm1176jzf-s"

1586276558
fengb
Might be a stupid question... but ARM 11 = armv6?

1586276599
FireFox317
oh yeah i see actually, then its the abi that can't pass floats in hardware registers, but hardware float is still enabled inside the binary

1586276618
shakesoda
fengb: yes

1586276625
FireFox317
well that depends on the cpu-features that zig enables

1586276636
shakesoda
they changed their naming scheme after that

1586276740
shakesoda
the relevant floating point support for the pi zero would be vfp2

1586276836
FireFox317
shakesoda, that's enabled for the arm1176jzf-s cpu in zig:

1586276905
shakesoda
so it is

1586276908
FireFox317
but it should defitely work on a rpi 1/rpi zero, maybe someone who has such a rpi laying around can test it

1586276938
shakesoda
i've got a whole pile of them, just need to make some time

1586276940
FireFox317
i tested zig on a rpi3

1586276948
fengb
So does `eabihf` not exist for armv6?

1586277015
fengb
Is there a nice prebuilt binary I can just download to test with? :P

1586277042
FireFox317
for which rpi? :)

1586277049
FireFox317
i can upload a binary if you want

1586277068
fengb
Pi0 / armv6

1586277085
Snektron
i have an old rpi

1586277106
fengb
I still don't understand the whole ABI thing but that's always confused me anyway ðŸ¤·

1586277162
FireFox317
fengb, i'm not sure about the eabihf for armv6. but it is only relevant for linking objects against the zig binary, because then the abi matters.

1586277188
Snektron
Is there a specific reason bootstrap-zig has a copy of zig master instead of a git submodule?

1586277196
Snektron
It seems more appropriate

1586277210
mikdusan
because submodules are pita?

1586277223
fengb


1586277250
Snektron
TIL

1586277324
Snektron
Whats bad about them?

1586277439
BaroqueLarouche
it's a hack and require extra git commands to be usable

1586277441
fengb
We should go back to SVN monorepos ðŸ™ƒ

1586277457
companion_cube
I'm trying `git subtree` currently

1586277468
companion_cube
it's supposed to avoid such problems

1586277483
fengb
Actually maybe I'm not sarcastic. Being able to checkout sub trees directly is pretty useful

1586277581
Snektron
I thought SVN didn't have branches

1586277584
Snektron
Outside of copy pasting

1586277620
fengb
It has branches. It doesn't have proper merging so people often don't use branches

1586277645
fengb
Oh wait, maybe you're right. I remember using a directory structure for "branches"

1586278104
FireFox317
fengb, building the binary now, uno momento

1586278461
mikdusan
git subtree looks like it's moving in the right direction. first hint that submodules is mis-designed is that it tweaked .git/config ; I don't see anything added it .git/config for subtree, so it must be using git objects for meta

1586278516
mikdusan
but sadly `git log --stat` file paths do not prefix with subtree's prefix.

1586278602
ifreund
it seems kindof odd to me that the first of these is a compile error while the second works

1586278626
ifreund
would that be considered a bug? or is that issue worth

1586278659
ifreund
(the error is

1586278966
fengb
FireFox317: does that require rebuilding LLVM? Sounds painful ðŸ˜¬

1586279311
FireFox317
fengb, it does but with a server that has 32 cores its not that bad :)

1586279727
fengb
I think maybe I should start doing that too

1586280259
FireFox317
well aparantly building zig broke -_-

1586280377
FireFox317
TheLemonMan, Semantic Analysis [3444/4565] ./lib/std/target.zig:505:25: error: unable to perform binary not operation on type '@Vector(5, usize)' -> ~@as(@Vector(usize_count, usize), other_set.ints);

1586281215
TheLemonMan
hm?

1586282189
TheLemonMan
I'm really hating every single moment I have to spend on nixos

1586282218
KoljaKube
I've been interested in it, care to elaborate?

1586282274
TheLemonMan
no

1586282313
fengb
lol

1586282317
KoljaKube
OK :D

1586282326
ikskuh
yeah it's hard to explain

1586282334
ikskuh
nixos isn't made to do "quick hacks"

1586282379
KoljaKube
Funny, all that rollback talk would have me thinking the opposite

1586282416
ikskuh
it's made for projects where you want to express your dependencies pretty clearly

1586282427
ikskuh
not for stuff where you just throw random libraries together until it works :D

1586282524
ikskuh
we don't have an MD5 hasher in zig, have we?

1586282538
KoljaKube
So more like an ansible-in-the-os?

1586282591
fengb
MD5 is the devil ðŸ™ƒ

1586282650
ikskuh
KoljaKube: i friend told me so, just that nix uses single files instead of bundles of them :D

1586282653
ikskuh
fengb: why so?

1586282700
ikskuh
it's not a crypographic hash, sure, but it's enough to roughly identify files by size+hash

1586282903
andrewrk
TheLemonMan, my bad, should have requested debian on that box. maybe you could do this?

1586283039
andrewrk
I enabled lxd on that box just now and gave everyone ldx group access

1586283062
andrewrk
so you can create lightweight persistent VMs for whatever linux distro you want

1586283104
andrewrk
oh, nvm sorry, just got this error: Package â€˜criu-3.12â€™  is not supported on â€˜aarch64-linuxâ€™, refusing to evaluate.

1586286133
ifreund
are union field names supposed to be TitleCase or snake_case?

1586286137
ifreund
the docs use both

1586286162
ifreund
reading the style guide section suggests that snake_case is correct though

1586286186
ikskuh
I think canon is that TitleCase is type, camelCase is function and snake_case is field name

1586286275
andrewrk


1586286404
ifreund
ah, of course there's an issue for it :D

1586286564
ikskuh
we have an issue for everything!

1586286577
ikskuh
i start to dig the build system now that i'm using it more and more in my projects

1586286584
ikskuh
somewhere declare an executable

1586286589
ikskuh
later in the thing:

1586286593
ikskuh
const step = exe.run();

1586286599
ikskuh
step.addArgs();

1586286607
ikskuh
something.step.dependOn(&step.step);

1586286624
ikskuh
now i can depend building files on building the compiler for those files first :)

1586286672
TheLemonMan
one step closer to sparc64 o/

1586286772
TheLemonMan
Thalheim, it'd be cool if you could try using lld with that patch as drop-in replacement of binutils ld, I've only tested it with some binaries built by the Zig compiler but nothing too big

1586286806
TheLemonMan
and I've only implemented the relocations used by the TLS model we use

1586287177
andrewrk
sweet!

1586287265
andrewrk
TheLemonMan, do you think we should rename the arch from sparcv9 to sparc64?

1586287499
andrewrk
ikskuh, we're not even reaping the benefits yet of the declarative nature of the build system. for example it will be possible to merge 2 build scripts together, print a graphical display of the dependency tree, parallelization of jobs

1586287523
ikskuh
yeah i know

1586287530
andrewrk
also possibly build script sandboxing

1586287532
ikskuh
but i think the current way of use is quite nice

1586287545
andrewrk
since you end up with a serializable declarative set of things to do

1586287744
ikskuh
neat

1586288326
Thalheim
TheLemonMan: will do. would you like me to do so or do you want to?

1586290296
kristoff_it
FireFox317: saw your message from yesterday, I'm going to update to the latest changes in the stdlib and let you know what's the current state of things

1586290600
kristoff_it
what's the new equivalent of SliceOutStream?

1586290783
andrewrk
`const s = std.io.fixedBufferStream(slice); s.print("{}\n", "hi");

1586290824
kristoff_it
thanks!

1586290831
andrewrk
uh you might need outStream() on there.

1586290851
andrewrk
var fbs = std.io.fixedBufferStream(slice); // you can now do inStream(), outStream(), or seekableStream()

1586290895
andrewrk
one piece of good news is llvm is much better at optimizing this new stream API

1586290919
andrewrk
so you might try running some benchmarks or something if you have any and maybe the numbers will improve

1586291623
TheLemonMan
Thalheim, I'll leave the testing work to you if you don't mind :P

1586291870
TheLemonMan
andrewrk, no idea, iiuc sparcv9 with mcpu=v8 lets you target the 32bit variants while v9 is 64bit only

1586291885
andrewrk
interesting

1586291894
TheLemonMan
so it works as a catch-all of some sort

1586291950
andrewrk
v9 is a cpu feature but "v8" is a cpu model that has an empty set of cpu features

1586291977
andrewrk
none of the cpu features are "64" or "32" bit related

1586292001
andrewrk
maybe the "v9" cpu feature implies 64 bit

1586292080
TheLemonMan
yep

1586292167
andrewrk
if a v10 came out (I understand this is unlikely) it would probably still be 64 bit, and so sparc64 for the arch would make more sense than sparcv9

1586292226
mikdusan


1586292274
andrewrk
TheLemonMan, did you already do this?

1586292347
TheLemonMan
yeah, I'm still sitting on the Zig PR because of the lld problem & the fact the sparc backend doesn't like fp16/fp128

1586292447
andrewrk
I'm confused why llvm didn't solve fp16/fp128 in a generic way and then allow target-specific overrides

1586292513
mikdusan
v9 apparently supports 32/64/128 float. and 32/64/ integer. oh maybe this complicates things: The 32- and 64- bit floating point types conforms to IEEE Std 754-1985. The 128-bit floating-point type conforms to IEEE Std 1596.5-1992

1586292536
TheLemonMan
well they appeared later, fp32/fp64 was/is the norm

1586292599
TheLemonMan
fp16 is often legalized by promoting them to bigger types so you basically use a fp16 during the load/store instructions

1586292719
TheLemonMan
and fp128 was PPC only, afair x86_64 uses SSE* instructions when possible and every other arch falls back to compiler-rt builtins

1586292758
TheLemonMan
mikdusan, I did a bit of research and it seems that no CPU was produced with support for fp128

1586292772
mikdusan
oh the "optional" thing. gotcha

1586292779
TheLemonMan
I really hate fp16/fp128

1586292797
andrewrk
in what sense? you think the language should not have these types?

1586292887
TheLemonMan
well they're the main source of problems in porting Zig to new architectures

1586292932
andrewrk
I think it's more revealing a limitation of llvm as a dependency

1586292986
andrewrk
I'm imagining in the non-llvm backend, a general solution for f16 and f128 across all architectures, with some overrides for x86_64 and PPC. the overrides don't even have to happen immediately, it's an optimization really

1586293055
andrewrk
TheLemonMan, maybe we can do a better organization of the f16 and f128 tests, so that there are fewer places that tests have to be disabled when it's not working on a particular architecture yet

1586293059
Thalheim
TheLemonMan: it's a little more subtle. "-m64 -mcpu=v9" is 64-bit v9, "-m32 -mcpu=v9" is 32-bit v9 a.k.a. v8plus, and "-m32 -mcpu=v8" is binary-compatible with v7 which is also 32-bit -- v7/v8 are "sparc" and v9 is "sparc64", while v8plus is technically its own thing

1586293068
Thalheim
(a 32-bit subset of v9, but not binary compatible)

1586293100
TheLemonMan
andrewrk, that's a nice idea

1586293126
TheLemonMan
Thalheim, oh I didn't take into account the v8plus variant

1586293147
andrewrk
hmm, does -m64 translate to a cpu feature? so far this is the first architecture where that's not the case

1586293184
andrewrk
e.g. on x86_64 vs i386, -m32 vs -m64 affects the "64bit" cpu feature flag

1586293256
andrewrk
if v9 supports both 32 and 64 bit, then I think "sparcv9" (status quo in zig) is more appropriate for the architecture than "sparc64"

1586293326
andrewrk
if this is accurate regarding -m32 and -m64 then I would propose for us to add a "64bit" cpu feature flag

1586293343
andrewrk
zig doesn't have -m32 -m64 flags

1586293351
Thalheim
how to reconcile the fact that 32-bit v9 (v8plus) is not binary compatible with 64-bit v9? one is 32-bit ELF MSB the other is 64-bit ELF MSB

1586293380
andrewrk
that sounds the same as i386 vs x86_64 and arm vs aarch64, no?

1586293428
Thalheim
I mean in terms of naming

1586293433
andrewrk
you can run i386 32-bit ELF binaries on x86_64 systems, and you can run arm 32-bit ELF binaries on aarch64 systems. is this not the case for 32-bit v9 running on a 64-bit v9 system?

1586293457
andrewrk
ah I see re: naming

1586293533
andrewrk
as far as zig is concerned, it could be both "sparcv9" as the architecture, and "64bit" cpu feature (default on) that decides between 32 or 64

1586293673
andrewrk
another option would be: only have `sparc` (get rid of both `sparcel` and `sparcv9`) and rely on CPU features: `64bit`, `v9`, and `le` to distinguish

1586293696
andrewrk
this second option would have implications for potentially also doing this with x86, arm, and others

1586293827
ikskuh
andrewrk: thanks for making "zig cc" possible in the way it is now!

1586293830
TheLemonMan
hmm, the LLVM backend has no '64bit' nor 'le' cpu feature

1586293855
ikskuh
received a link to some c file for windows, just crosscompiled it from linux for i386-windows and it just worked â™¥

1586293916
andrewrk
TheLemonMan, right, zig would diverging here in an attempt to clean up. we've already done this a little bit: consider that we don't have "vendor" as part of the triple, and no longer have "sub-arch" as part of the triple

1586293954
andrewrk
when specifying target details to llvm, zig would determine the sub-arch to pass or -m flags or whatever based on cpu features. we still have access to all the same information, and pass it to llvm however it wants. the question is how to organize the info for the user

1586293959
kristoff_it
andrewrk: thanks for the help, I've successfully updated to the latest changes, all tests pass :)

1586293968
andrewrk
glad to hear

1586293979
andrewrk
sounds like you're ready for 0.6.0

1586294051
kristoff_it
looking forward to it :D

1586294077
andrewrk
btw kristoff_it I'm speaking at the virtual redis conf right? somebody on discord mentioned my name is not on the speakers list

1586294130
kristoff_it
uhhhh I'd have to ask, strange as it might sound I'm not actively part of that process

1586294147
kristoff_it
and everything is messy now for the same global reason

1586294161
andrewrk
makes sense. no worries just thought I'd check in

1586294173
kristoff_it
I apologize I should have followed it more closely, I'll get back to you tomorrow

1586299043
FireFox317
TheLemonMan, the issue i was pointing out earlier was my own fault, my bad :)

1586299153
andrewrk
I'm guessing: updated std lib files but not rebuilt compiler

1586299662
FireFox317
andrewrk, exactly

1586299739
FireFox317
fengb, shakesoda, here is a link to a zig tarball for rpi0/rpi1 cpu=arm1176jzf_s:

1586299844
shakesoda
\o/

1586299896
andrewrk
oh nice, you made one for exactly that cpu model

1586299926
fengb
I just screwed up my pi D:

1586300232
andrewrk
hmm I wonder if there is a way to do a `git log` but only show commits against master branch. e.g. yes merge commits, but not commits of that branch

1586300243
andrewrk
(and also show commits made against master directly)

1586300278
shakesoda
fengb: how so

1586300282
andrewrk
this would help my release notes task in the future

1586300348
fengb
Doesnâ€™t shut down properly and Iâ€™m not sure why. I need to reflash the sdcard

1586300354
andrewrk
maybe --first-parent

1586300453
andrewrk
oh wow this is so much easier

1586301578
andrewrk
Mon Nov 18 2019, Benjamin Feng: Optimize binary search algorithm

1586301590
andrewrk
Fri Jan 31 2020, LemonBoy: stdlib: Add binary search function

1586301596
fengb
Did I break things?

1586301603
andrewrk
ðŸ¤”

1586301613
shakesoda
andrewrk: the timeline has been altered, pray git does not alter it further

1586301625
andrewrk
there's an even simpler explanation

1586301632
andrewrk
there are multiple implementations in std

1586301646
fengb
Ah yeah the one I touched was internal to sorts

1586303327
Sphax
Hi. I'm confused about this compile error

1586303683
andrewrk
Sphax, you could also resolve the problem by changing []u8 to []const u8

