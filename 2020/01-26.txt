1579996883
pmwhite
Units of measure are not complicated to understand from a user's perspective, in contrast to more fancy type theory stuff.

1579997027
pmwhite
By algebraicness, I mean that m/s^2*(s/m) = 1/s.

1579997055
fengb
Except you have to code all of that context into somewhere

1579997103
pmwhite
Right, but I assume that units which have the same name are indeed the same.

1579997139
pmwhite
I think F# does it rather well.

1579997139
fengb
How would it handle angular measurements?

1579997322
pmwhite
It wouldn't. Units are arbitrary tags that get treated like variables and combined into equations automatically by the compiler in the same manner as expressions.

1579997333
pmwhite
Probly not a good answer though.

1579997345
pmwhite
I doubt I understood what you were asking.

1579997523
Snektron
This sounds like a job for `template <typename T> Distance<T> operator "" _km(const T& x)`

1579997568
fengb
Oh I think I get it. Add / subtract only supports identical units. Multiply / divide will merge the units

1579997628
pmwhite
Yeah

1579997973
pmwhite
It's been a while since I looked at other userland attempts, so maybe it is possible to be ergonomic.

1580003697
daurnimator
andrewrk: FYI I locked

1580003920
andrewrk
thanks. that user appears to be a troll, blocked now

1580003961
daurnimator
jcharbon: happy to help you out; what are you not sure about?

1580004006
daurnimator
andrewrk: re: zig software foundation... I guess you're starting it as an american org?

1580004024
andrewrk
yes

1580005200
daurnimator
andrewrk: how goes the yak shaving?

1580005310
fengb


1580005335
fengb
I think the Wuhan virus is written in Zig 🙃

1580006620
pixelherodev
... I don't get it

1580006674
fengb
Debug mode sets undefined data to 0xaaaaaa

1580006680
fengb
nvm it’s a stupid joke

1580006702
pixelherodev
...ohhhhhhh

1580006703
pixelherodev
Right

1580006755
andrewrk
I thought it was funny

1580006771
andrewrk
daurnimator, just finished dealing with compile errors. now debugging regressions.

1580006896
andrewrk
me too

1580006916
pixelherodev
Not that it wasn't funny; I should've gotten that a lot sooner

1580006921
andrewrk
woo only a couple simple things needed to be fixed. about to find out how much memory this saved 🤞

1580006989
BaroqueLarouche
I'm almost ready to submit a PR for

1580007044
andrewrk
nice BaroqueLarouche

1580007096
andrewrk
here's the yak PR:

1580007494
daurnimator
`->base.base.`

1580007511
daurnimator
all your base, your base, base, base

1580007531
andrewrk
hahah I was thinking the same thing

1580007601
andrewrk
this branch makes std lib tests on windows go from using 5.6 GiB peak memory (in the memory profiling build) to 4.5 GiB peak memory

1580007643
daurnimator
huzzah

1580007651
andrewrk
that should be enough to merge cpu features, I hope :)

1580007661
andrewrk
this yak stack is about to collapse

1580007682
daurnimator
I've had a draft blog post around for ~8 years titled "shave your yaks"

1580007778
BaroqueLarouche


1580007810
andrewrk
nice! are you testing your branch integrated with the gba project to avoid calling llvm-objcopy?

1580007839
BaroqueLarouche
yup

1580007844
andrewrk
beautiful

1580007860
andrewrk
love that gba hello world will work with nothing but zig installed

1580007877
andrewrk
well and an emulator of course :)

1580007883
BaroqueLarouche
better than devkitPro for sure

1580007926
daurnimator
andrewrk: don't you mean flashcart? :)

1580008025
BaroqueLarouche
well you do need devkitPro if you want to use GDB remote debugging

1580008027
daurnimator
BaroqueLarouche: I'll also make use of that for the FOMU :)

1580008820
BaroqueLarouche
and done!

1580008833
andrewrk
brilliant will take a look over the next couple days

1580009107
daurnimator
BaroqueLarouche: I don't think `--custom-ext` is what we'd want?

1580009143
BaroqueLarouche
use a different name for the command line switch ?

1580009163
BaroqueLarouche
or the concept of specifying custom extension ?

1580009217
daurnimator
the concept of specifying extension

1580009234
daurnimator
the build process might emit multiple files: it's not clear which it applies to

1580009251
daurnimator
but also, it would be better to be able to specify the entire file name

1580009264
BaroqueLarouche
yeah

1580009303
BaroqueLarouche
because now the file extension is appended by both the stage1 compiler and std/build.zig

1580009329
daurnimator
BaroqueLarouche: have to seen

1580009331
daurnimator
*you

1580009346
BaroqueLarouche
nope!

1580009375
fengb
Are you and Wendigo the same person?

1580009388
BaroqueLarouche
yes

1580009404
BaroqueLarouche
I use this pseudonym because homebrew is a grey area

1580009445
fengb
Well your secret is out now!

1580009478
BaroqueLarouche
if I change job one day, I may move it back to my real Github

1580009839
andrewrk
wow, after just a couple easy to fix issues at runtime, no regressions in this +10,996 −8,978 branch

1580009853
BaroqueLarouche
nice!

1580009881
andrewrk
zig: now with 200% more "base"

1580009967
BaroqueLarouche
if someone code a Genesis/Megadrive emulator in Zig, the first game it must emulate is Zero Wing

1580009992
andrewrk
makes sense to me

1580010347
tdeo
hmm... i've written a pure zig implementation of the wayland protocol, but some extensions fail with this and i'm not sure how to work around it

1580010363
tdeo
in C, you can have dependency loops for constant structs fine

1580010697
fengb


1580010710
fengb
Interesting how Odin is similar yet different

1580010743
andrewrk
tdeo, are you able to reduce it to a small test case?

1580010769
andrewrk
zig supports this kind of thing unless it is a true dependency loop, e.g. a struct embedded inside itself

1580010781
andrewrk
but there may be a couple cases that aren't migrated to the new lazyvalue system

1580010930
pmwhite
Not sure if it'll get rejected really quickly, but I felt like writing a proposal for units of measure just for fun -

1580011173
tdeo
andrewrk:

1580011177
tdeo
(that should work, right?)

1580011285
andrewrk
tdeo, I believe you are hitting

1580011298
andrewrk
planned to work, but requires an improvement to the compiler

1580011309
tdeo
ah, good that it's planned

1580011330
tdeo
i've also just realized it's not essential to my project working, it just provides nicer debug logs

1580012804
andrewrk
#4290 merged into master. cpu/features PR is running CI tests again, with master merged in.

1580016210
mikdusan
👍👍 macOS Maximum resident set size before #4290 --> 5.59 GiB, after --> 4.27 GiB

1580016226
mikdusan
Command being timed: "zig test lib/std/std.zig"

1580019622
daurnimator
not sure why, but I only just got an email notification about #4284 now

1580019704
daurnimator
andrewrk: so for the fomu stuff, I ended up with a sort of annoying pattern for the MMIO: see e.g.

1580019730
daurnimator
I had tried to make it just one extern struct and use `align(4)`; but that didn't seem to work

1580019767
daurnimator
as volatile was on the struct pointer itself; and not the field....

1580020433
daurnimator
andrewrk: what is the way I'm meant to get a cpu in the new build.zig api?

1580031966
daurnimator
Why does `isWasm` end up in all debug builds for all platforms?

1580032341
FireFox317
hooray! #4264 (cpu-features) passed the CI tests <3

1580037612
forgot-password
Hey :)

1580037664
forgot-password
Which compiler does `zig translate-c` use? Because I get some syntax errors for a c-file, but executing `clang -x c $file` works fine

1580037851
daurnimator
forgot-password: it uses libclang under the hood...

1580038558
forgot-password
So does that basically amount to being the same when I'm compiling with clang?

1580038644
forgot-password
Or could there be differences? I'm attempting to convert apples CoreAudio headers to Zig, but it fails at a line that seems to be related to swift compatibility

1580041696
mq32
andrewrk: i both like and dislike @volatileLoad at the same time

1580048101
andrewrk
forgot-password, yes it amounts to being the same as clang

1580048140
andrewrk
what error exactly do you get?

1580049610
mikdusan
1,000 issues

1580050301
pixelherodev
"5.6->4.5" wow, nice work!

1580050480
mq32
andrewrk, how do i have to interpret your "eyes"-reaction?

1580050807
andrewrk
I looked at your comment

1580050823
andrewrk
cpu features is merged

1580050906
pixelherodev
Whelp, that means I can't procrastinate implementing getHostFeatures anymore, right? :)

1580050924
mq32
nice @ cpu features

1580050928
mq32
<andrewrk> I looked at your comment

1580050935
mq32
so this is just a "ack, i've seen your comment"

1580051020
betawaffle
andrewrk: when are the std docs going to be updated?

1580052021
andrewrk
betawaffle, they're updated now

1580052034
betawaffle
awesome, thanks

1580052044
andrewrk
std docs are still experimental

1580054334
betawaffle
is there something I should be subtracting from `@sizeOf(@Frame(foo))` to get the actual needed

1580054391
betawaffle
when i use that on an empty function, it gives me something non-zero, presumably to account for space needed for dealing with async

1580054681
mq32
andrewrk: kyle asked an important question on the volatile topic: "is volatile a property of a variable or a store-action"

1580058047
andrewrk
betawaffle, we don't have ability to measure stack size yet. the issue for that is

1580058073
betawaffle
well then how are you measuring frame size?

1580058081
andrewrk
frame size has to do with async

1580058108
betawaffle
but isn't some stack size info necessary to figure out frame size?

1580058203
andrewrk
mq32, it's a property of a store/load action

1580058250
mq32
i'd say it's the property of a memory location, as non-volatile access to an MMIO address is usually wrong

1580058279
andrewrk
in theory it's possible for a memory mapper to change which address is mapped to mmio

1580058317
mq32
yes, that's true

1580058328
mq32
but then all pointers/variables that were previously mapped are now also invalid

1580058440
andrewrk
yes but having volatile be a property of a store action guarantees that it is possible for software to correctly model the problem

1580058461
andrewrk
betawaffle, in async functions, local variables are pulled from the stack into the async frame

1580058482
andrewrk
there is still a stack frame when calling an async function. it's just devoid of the local variables

1580058499
betawaffle
what about functions called by an async function?

1580058509
andrewrk
well, to be clear: calling an async function like foo() is a tail call. so there is not still a stack frame. but calling it with `async foo()` there is a stack frame

1580058895
jessermeyer
Hey everyone, how do I convert a LPVOID (?*c_void) to HWND ([*c]c_int)?  I don't understand all the safety / robustness layers of Zig's compiler promises that seem to make this not straightforward.

1580058929
jessermeyer
I'm starting a thread via CreateThread which passes the parameters as a LPVOID, and I have to cast that to the types I expect inside the function.

1580058956
andrewrk
jessermeyer, it should coerce

1580058970
andrewrk
easy fix if it doesn't

1580058981
jessermeyer
.\win32_tbd.zig:26:36: error: expected type '[*c]c_int', found '*c_void'    const handle: HWND = @as(HWND, thread_parameters);

1580058993
jessermeyer
or are you saying I don't need as?

1580059008
jessermeyer
<tries>

1580059023
andrewrk
@as does nothing in this context. @as is the same thing as found foo, expected bar

1580059039
andrewrk


1580059053
jessermeyer
Yeah I've been referring to the documentation quite a bit to sort this out (thanks for making those!)

1580059067
jessermeyer
.\win32_tbd.zig:25:46: error: expected type '[*c]c_int', found '*c_void'    const handle: HWND = in_thread_parameters.?;                                             ^.\win32_tbd.zig:25:46: note: pointer type child 'c_void' cannot cast into pointer type child 'c_int'    const handle: HWND = in_thread_parameters.?;

1580059071
andrewrk
I had it backwards though, the coercion works going to c_void, not from

1580059095
andrewrk
you need @ptrCast to get from *c_void to something else

1580059116
jessermeyer
I get alignment complaints when I do that.

1580059126
andrewrk
you'll need an additional @alignCast then

1580059141
jessermeyer
Ok, just being sure I wasn't walking into a trap doing that.

1580059145
andrewrk
`?*c_void` is extremely unsafe, so it looks nasty casting away from it

1580059191
jessermeyer
I assumed there was a sane reason. ;)

1580059219
andrewrk
jessermeyer, usually when you are casting from

1580059256
andrewrk
you're using some windows API giving you a ?*c_void - I'm guessing it is regurgitating the same value you passed in another API call

1580059281
jessermeyer
Right, there are a number of layers between my code at the function call and when I actually see the data passed in again.

1580059340
andrewrk
BaroqueLarouche, sorry for making you toss out a bunch of perfectly good code

1580059356
andrewrk
but it's for great justice

1580059365
andrewrk
keeping the stage1 compiler simpler

1580059367
BaroqueLarouche
andrewrk: well, not that much, all the Zig code will be reused

1580059376
jessermeyer
BTW, andrew, Zig is such a high value product.  Thank you for all the effort (and your contributors) have invested in thus far

1580059390
andrewrk
<3

1580059407
jessermeyer
And it's value prospects are even more promising. It's a joy to feel to play a tiny part in the beginnings.

1580059433
andrewrk
I'm so relieved to have finally merged the cpu features branch

1580059436
BaroqueLarouche
yeah, I feel I discover the language at the right time, it's usable enough but still so much to do and influence

1580059439
andrewrk
it was stressing me out having that sitting there

1580059471
andrewrk
BaroqueLarouche, I wonder, does the cpu features branch affect GBA? maybe if you pass the specific CPU it will generate better code?

1580059480
BaroqueLarouche
I have not tried it yet

1580059487
s-ol
hmmm...

1580059520
s-ol
am i overlooking something or is this silly?

1580059544
andrewrk
s-ol, is your gl.zig auto generated?

1580059553
s-ol
no

1580059559
s-ol
its what im writing

1580059561
andrewrk
it looks like glGetnUniformfv wants to mutate value

1580059569
andrewrk
so your value must be declared var not const

1580059587
s-ol
its not... this is switch (self.*)

1580059598
s-ol
and self is 'self: *UniformValue'

1580059606
s-ol
(UniformValue is a tagged union)

1580059609
andrewrk
oh I see, put |*value| instead of |value|

1580059615
andrewrk
and no &

1580059617
s-ol
ah!

1580059621
s-ol
perfect ;)

1580059678
s-ol
oh and a small thing: apparently &&var doesnt work because it warns about boolean AND

1580059692
s-ol
but it can be useful sometimes to take pointer-pointers

1580059768
andrewrk
BaroqueLarouche, looks like `-target-cpu arm7tdmi` is appropriate for GBA

1580059804
BaroqueLarouche
andrewrk: that's the one, and seems to be properly supported by LLVM when I looked in the .td file

1580059932
s-ol
hm, still getting that cast error, andrewrk: blob:https://imgur.com/58ead036-a748-46f6-aebe-9e995be1b914

1580059945
s-ol
'signed 32-bit int cannot represent all possible signed 32-bit value'

1580059963
s-ol
im running some random zig-git version though, so maybe its an intermittent bug

1580059989
andrewrk
BaroqueLarouche, in gbaThumbTarget() you can add .cpu_features = std.Target.CpuFeatures.initFromCpu(&std.Target.arm.cpu.arm7tdmi),

1580060008
andrewrk
a bit verbose, but easy to solve with a helper function if we want to

1580060024
BaroqueLarouche
andrewrk: was just looking in the code for that haha

1580060086
andrewrk
I don't think it will matter. the feature set is identical to the armv4t sub-architecture

1580060126
andrewrk
still, it's correct to specify that CPU for this use case

1580060217
BaroqueLarouche
the arch argument seems superficial in initFromCpu, if you specifiy the CPU, it should know its own Arch

1580060315
betawaffle
how can i compute the Log2T from a T (

1580060319
BaroqueLarouche
I have to do " .cpu_features = std.Target.CpuFeatures.initFromCpu(std.Target.Arch{ .thumb = std.Target.Arch.Arm32.v4t }, &std.Target.arm.cpu.arm7tdmi)

1580060325
BaroqueLarouche
which is a bit ugly

1580060387
BaroqueLarouche
but at the same time, you do need to specify if you want ARM or thumb

1580060387
andrewrk
BaroqueLarouche, yes I agree, I plan to do another breaking change here

1580060400
andrewrk
as part of this issue:

1580060408
andrewrk
I would like to change the "arch" part of the triple to "cpu"

1580060422
BaroqueLarouche
neat!

1580060470
andrewrk
but clearly as you pointed out, the cpu_features field and arch field of Target currently have redundant data

1580060471
s-ol
whoops, that was not a working link... here it is:

1580060492
andrewrk
betawaffle, std.math.Log2Int

1580060553
andrewrk
s-ol, that looks like a bug

1580060580
andrewrk
"signed 32-bit int cannot represent all possible signed 32-bit values" 🤔

1580060616
andrewrk
a reasonable workaround would probably be making your data c_int instead of i32

1580060641
jessermeyer
Suppose I have in some 'main' source file: usingnamespace @import("Windows.zig"); usingnamespace @import("dx12.zig");.  But many declarations inside dx12.zig requires declarations from Windows.zig, so it

1580060641
jessermeyer
ultimately cause more work for the compiler that isn't necessary?

1580060862
andrewrk
the pattern is fine. it's equivalent in terms of what the compiler must do to having one big file with everything in it

1580060889
betawaffle
is there somewhere i should be looking for existing names in the error set? (ie. using something existing rather than error.UnexpectedEndOfInput)

1580060947
andrewrk
no; use what makes sense in the context that the error is created. later, up the call stack, where you deem appropriate you will want an error set or to handle all possible errors. here you will discover if some errors should be grouped or not and it will be clear how to refactor your code

1580060976
andrewrk
or, if you never feel the need for that error set or handling all errors (e.g. returning an error from main()) then everything is fine. user will get an appropriate error.Foo message

1580060980
jessermeyer
Thanks Andrew

1580060993
BaroqueLarouche
at quick glance, the generated code looks the same with target-cpu

1580061012
andrewrk
BaroqueLarouche, yes I looked and it's exactly the same cpu feature set as if only the sub-arch is specified

1580061015
betawaffle
i just mean, i've got an error that is semantically common, but I don't know what name might have already been standardized for that error

1580061564
pixelherodev
I've gotten bugs like that before ("x cannot represent x") and it was usually a bug in my code IIRC

1580061577
pixelherodev
i.e. the error message is wrong, but there was an underlying bug in my code anyways

1580062151
jessermeyer
Do I have to specially declare which file is the 'root' source file?  Wanting to override the default panic handler to @breakpoint.

1580062230
pixelherodev
No

1580062243
pixelherodev
jessermeyer, the root source file is whatever file is being compiled

1580062251
pixelherodev
e.g. if you do `zig build-exe test.zig`, test.zig is the RSF

1580062258
jessermeyer
Thanks.

1580062267
jessermeyer
(I was hoping it was that simple / straight forward)

1580062275
pixelherodev
:)

1580062346
forgot-password
andrewrk: Hey, I'm replying to your message from 15:15, I just read it just now, sorry :P

1580062367
forgot-password
Here's a pastebin-link:

1580062433
forgot-password
`zig translate-c` doesn't seem to have the include path set by default, so I used `clang -x c -E core_audio.h` to run the pre-processor first

1580062449
forgot-password
`core_audio.h` just containing the necessary includes

1580063745
student069
can someone help give tips on ways I can improve this little program i made? I was trying to make a basic copy of "head". Anything would be appreciated as this is my first zig program besides hello world.

1580063923
pixelherodev
student069, first, arg processing

1580063937
pixelherodev
Something like `if (args.len < 2) usage();`

1580063967
pixelherodev
Also, I'd replace the `try head` with `head(n, args[1]) catch |err| {` and print error info

1580063975
pixelherodev
and make main return void instead of `anyerror!void`

1580064020
pixelherodev
Also, std.debug.warn is for when you don't care if the output succeeds

1580064031
pixelherodev
I'd use stdout.print and catch the possible error

1580064077
pixelherodev
I'd also use a different loop to read the file

1580064101
pixelherodev
That shouldn't be a `try`; if there's a 257-byte line it'll return an error when it could continue without issue

1580064124
student069
oh shoot that makes sense

1580064201
pixelherodev
I'd also replace `try parseInt` with a catch that prints an error message like `length must be a number!`

1580064212
pixelherodev
(if that's the error ofc)

1580064233
student069
sure that makes sense. I didn't realize there was a just "catch".. probably should have looked a bit more for that

1580064236
pixelherodev
Maybe replace try argsAlloc with an "out of memory!" panic

1580064246
pixelherodev
Yeah, try is syntax sugar over `catch |err| return err`

1580064253
pixelherodev
(catch the error and return it)

1580064261
student069
ahh i c

1580064269
pixelherodev
Well, hopefully you Zig, but yes :)

1580064274
student069
lol

1580064309
student069
i am starting to like a lot of the stuff im seeing in Zig

1580064342
pixelherodev
Writing a full POSIX userland toolset?

1580064351
AndroidKitKat
yep

1580064354
pixelherodev
Nice :)

1580064356
AndroidKitKat


1580064361
AndroidKitKat
our barely functional website

1580064370
student069
its for a neat class we are taking this semester

1580064372
AndroidKitKat
feel free to star on github

1580064374
pixelherodev
Better a barely functional website than a modern design

1580064381
pixelherodev
... no offense to any web devs in here

1580064384
pixelherodev
... okay some offense

1580064393
AndroidKitKat
just wait im going to pump 10 megs of JS into the website shortly /s

1580064398
pixelherodev
Noooooo!

1580064407
AndroidKitKat
muh smooth scrolling

1580064408
pixelherodev
Anyways, I'd be curious to see a comparison between your tools and e.g. coreutils

1580064446
AndroidKitKat
at no point will we recommend replacing coreutils with our versions

1580064470
student069
but if you like random errors and less flags and functionality... i'd recommend our project

1580064515
pixelherodev
Eh, I don't particularly like coreutils as is

1580064519
pixelherodev
There's already better alternatives

1580064621
pixelherodev


1580064705
pixelherodev
Not complete yet though

1580064727
student069
ahhh i see

1580065031
jessermeyer
Is there a way to tell zig.exe not to stop on the first compiler error?

1580065100
pixelherodev
AFAIK no

1580065108
pixelherodev
It only does that for syntax errors though IIRC

1580065264
jessermeyer
Ah shame.

1580065878
student069
hey pixelherodev, when you said to "use a different loop to read the file", i was wondering if you could elaborate? do you mean like using a for loop instead or just changing the way i call the while

1580065918
pixelherodev
The latter

1580065929
pixelherodev
`That shouldn't be a `try`; if there's a 257-byte line it'll return an error when it could continue without issue`

1580065943
pixelherodev
I'd

1580065950
pixelherodev
Then, use an index to find the end of line

1580065968
pixelherodev
If none, print full buffer; otherwise, print slice up to it, increment line count, repeat

1580065973
pixelherodev
Read buffer as needed

1580065997
pixelherodev
That reduces the number of syscalls made and increases time spent processing the file, which should theoretically be a tad faster

1580066035
pixelherodev
An interesting option would be to write a utility to estimate average line length of every non-distro file on the system, and derive the buffer length from that

1580066051
pixelherodev
but that would be getting into premature optimization territory I think

1580066166
ScentedFern
Bruh

1580066181
student069
ahh ok ok so you would say to stray away from the readUntilDelimiterOrEof and move to a different call also then to read the whole thing?

1580066255
pixelherodev
Not necessarily the whole file, but maybe memory pages?

1580066260
pixelherodev
e.g. 4KB?

1580066270
pixelherodev
However

1580066277
pixelherodev
That's a tradeoff

1580066282
pixelherodev
It'd be giving up simplicity

1580066299
pixelherodev
So, for a simple project, probably best to just handle the error

1580066323
pixelherodev
e.g. catch if the buffer is too small, and if so dump the buffer and continue the loop

1580066345
pixelherodev
That keeps the code simple, but adds support for extremely long lines

1580066446
student069
hmm ok that makes sense, I will try that out then. if you want, we ARE open to contributions on github 😏

1580066503
pixelherodev
Heh :P

1580066508
pixelherodev
Wish I had the time for that

1580066557
student069
o rip. Yea the semester hasn't ramped up for us yet

1580066638
pixelherodev
Should have a bit more free time in a week or two, but for now I'm rushing through deadlines for projects, and making sure all needed documents are in for college applications (FAFSA, SAT, transcript, etc), plus finishing off a couple of other projects (Zig refactoring tool is getting close to usable for instance), plus studying three foreign languages, the beginnings of Calculus II, Microeconomics...

1580066670
pixelherodev
Admittedly a lot of my workload right now is entirely my fault

1580066732
student069
where you looking at for school?

1580066734
AndroidKitKat
dang son

1580066734
ScentedFern
Wow sounds like quite the workload

1580066745
pixelherodev
MIT, WPI, and Princeton are my top three choices atm

1580066789
pixelherodev
Grades aren't the best, but SAT score almost literally is, so I'm optimistic

1580066797
student069
ok beast

1580066807
ScentedFern
Grades aren't everything anyways

1580066816
ScentedFern
A lot of those top schools look at a lot more

1580066821
AndroidKitKat
you sound like you're well prepared for anything lmao

1580066835
ScentedFern
Just flex your zig knowledge on 'em

1580066970
pixelherodev
I think my employment as a compsci teacher for my school's middle school is more likely to influence their decision, but this is getting a

1580066989
ScentedFern
Oohhh

1580066999
ScentedFern
OK BEAST

1580067001
student069
dang your school has a middle school thats sick

1580067010
student069
i bet ur gonna be fine bor

1580067156
FireFox317
I've got my first Zig code running on an ESP32 :^)

1580067185
student069
wow

1580067187
student069
nice

1580067373
jessermeyer
Nice!

1580067855
pixelherodev
Nice work!

1580067862
pixelherodev
That use XTensa?

1580068196
FireFox317
Yes, it uses a fork of LLVM (

1580069976
metaleap
so what happens when some_arbitrary_allocator gets a free/destroy twice for the same pointer. no-op or bad bad stuff? or depends whether there are new alloc/create calls in between the 2?

1580070143
metaleap
eg. os/syscall-based allocator works page-based, right? so the page when "fully freed" (supposing the kernel tracks such) can be reused? in that case a delayed 2nd free/destroy against that addr would screw things majorly. ok I reckon it's sth to rather avoid

1580070454
pixelherodev
Depends on the allocator.

1580070460
pixelherodev
The only consistent answer is "bad"

1580070481
pixelherodev
AFAIK the only allocator at present that explicitly detects that is the libc allocator

1580070562
metaleap
yeah i quickly dropped even entertaining the notion =)

1580070583
fengb
The debug allocator will detect most double free and use after free bugs

1580070609
fengb


1580070627
fengb
By detect, I mean assert and crash >_>

1580070988
jessermeyer
What more do I have to do to override the default panic handler other than redefining it in the root source file?

1580070994
jessermeyer
Do I have to write that address somewhere?

1580071127
mq32
jessermeyer: afaik that's enough to override it

1580071143
jessermeyer
It's not getting called when unreachable is hit.

1580071190
jessermeyer
To be exact, all I have is a function called panic (with its specifications) in my root source file.

1580071250
pixelherodev
That's all that's needed

1580071261
jessermeyer
Smells like a bug.

1580071264
pixelherodev
Double check that it's your RSF

1580071273
jessermeyer
It is.

1580071276
pixelherodev
Is it public?

1580071281
jessermeyer
At least it's the file I tell zig to compile.

1580071282
pixelherodev
`pub fn panic`?

1580071291
jessermeyer
Nope ...

1580071293
pixelherodev
That would do it

1580071298
mq32
are you compiling safe mode?

1580071311
jessermeyer
Adding pub to see if that does the trick...promising.

1580071314
jessermeyer
Yes, mq32

1580071452
jessermeyer
Hmm, is msg parameter really not null terminated?

1580071507
pixelherodev
For panic?

1580071523
pixelherodev
Potentially

1580071527
pixelherodev
... wait, no

1580071538
pixelherodev
99% sure it's always null-terminated practically speaking

1580071566
jessermeyer
It just that I'm passing that message to OutputDebugStringA and it expects null-termination.

1580071577
jessermeyer
But the type explicitly states that it is not..

1580071791
metaleap
i had a union with dozens fields all typed `fn (SomeVaryingArgType) void` and it compiled. then i change their return types to my actually-intended ones and out of the blue

1580071918
mikdusan
hash the

1580071972
metaleap
i'm not "hashing the value of a slice" intentionally anywhere . BUT i found the culprit

1580071994
pixelherodev
jessermeyer, it's almost certainly null terminated

1580072002
pixelherodev
Panic strings have to be comptime string literals

1580072012
pixelherodev
Which are internally null terminated as of zig trunk

1580072099
mq32
pixelherodev: i would not rely on that

1580072114
jessermeyer
Not entirely following -- msg: []const u8 is null-terminated?

1580072116
mq32
it may be that a panic handler is a slice or something when you comptime calculate the message

1580072119
jessermeyer
I thought msg: [:0]const u8 was.

1580072190
mq32
you are right. pixelherodev is assuming compiler internals :D

1580072194
metaleap
mikdusan: thx, was being overly impatient just now here.  =)  it even hints at the "solution" at the end on second glance :D

1580072194
mq32
bad practise!

1580072213
jessermeyer
Here's another weird one.  Randomly I get an incorrect alignment from const handle = @ptrCast(HWND, @alignCast(4, thread_parameters));, where thread_parameters is of type LPVOID.  How can that fail only sometimes?

1580072270
mq32
this may fail when thread_parameters has one of the last two bits set

1580072286
fengb
That may be an intrinsic C problem. Zig complains about misalignment a lot but it would work in x86 hardware (albeit much slower)

1580072360
jessermeyer
So what do I do if I want to write correct Zig code and write threaded win32 apps that throw LPVOID parameters around?

1580072407
fengb
Or... the *c_void didn’t actually match what you expected

1580072418
mikdusan
+1

1580072432
fengb
I don’t know anything about Windows API >_>

1580072468
jessermeyer
I very much hoping this is my fault and not something more systemic ...

1580072472
mq32
the parameter to CreateThread is just "something"

1580072483
mq32
what do you want to pass to the thread?

1580072487
mq32
a pointer-to-struct?

1580072501
jessermeyer
Specifically a window handle.

1580072506
mq32
hm

1580072511
mq32
those aren't 4-aligned

1580072521
jessermeyer
Right, that's why I have to force align it. Zig won't otherwise.

1580072525
mq32
why is HWND enforcing 4-aligment anyways?!

1580072535
mq32
that looks like a bug to me

1580072541
jessermeyer
It's actually a pointer underneath, I think.

1580072552
mikdusan
then you need align 8?

1580072567
jessermeyer
Is there a way to tell zig to just figure it out?

1580072620
jessermeyer
Oops, I'm wrong.

1580072630
jessermeyer
HWND is an c_int.

1580072655
jessermeyer
Thus the 4 byte alignment.

1580072679
mq32
huh?

1580072707
jessermeyer
Sorry it's a spider web.

1580072719
jessermeyer
I'm looking at both what translate-c is saying it thinks it is, and then comparing that to MSDN.

1580072757
mq32


1580072761
mq32
MSDN is ground truth

1580072767
jessermeyer
HWND is really just an alias for HANDLE, which is an alias for void pointer.

1580072770
mq32
HWND is "*align(1) c_void"

1580072783
mq32
if zig translates this wrong, it's a bug

1580072798
mikdusan
@alignCast(@alignOf(HWND), ... )

1580072810
jessermeyer
I'll try that...

1580072857
jessermeyer
This is what translate-c thinks HWND is...

1580072857
jessermeyer
pub const struct_HWND__ = extern struct {    unused: c_int,};pub const HWND = [*c]struct_HWND__;

1580072870
mq32
okay, this looks wrong

1580072879
mq32
because that struct has align 4

1580072884
jessermeyer
Right.

1580072976
fengb
Hmm why is that inside a struct?

1580072998
jessermeyer
No idea but that's a very popular pattern translate-c uses for Windows.h.

1580073031
mq32
huh

1580073037
mq32
can you look up the source windows.h zig uses?

1580073047
fengb
I wonder if Windows.h was being clever and making “opaque pointers”

1580073167
mq32
libc/include/any-windows-any/wtypes.h:338:typedef void *HWND;

1580073168
mq32
hm

1580073211
jessermeyer
Fixing that type issue did solve the spurious alignment error.  But now I have a function that later depends upon '

1580073223
jessermeyer
'handle', but it states that it's invalid via GetLastError().

1580073322
jessermeyer
Hmm, I feel I now need to be much more cautious about translate-c here.

1580073333
jessermeyer
My code is probably littered with tiny time bombs.

1580073362
jessermeyer
that said, once it's up and running it'll probably be a valuable contribution to zig's test suite for win32 support.

1580073376
mq32
what are you working on?

1580073389
jessermeyer
Multithreaded DX12 renderer.

1580073444
mq32
neat!

1580073462
jessermeyer
The renderer portion can be cut if it's beyond the CI capabilities, but I'm touching quite a few win32 APIs in the process which can be ran via wine.

1580074297
student069
is there any way to keep the delimiter when splitting w/ tokenize?

1580074371
mq32
student069, afaik not, but i don't see the point. you can always add the delimiter later on when you need it

1580074378
mq32
with defined semantics (left side, right side, both sides)

1580074431
student069
hmm yea i might just be thinking wrong lol

1580074638
metaleap
"`setCold` Tells the optimizer that a function is rarely called" --- doesnt matter for one's rarely-called-but-always-running main / entry-point / main-loop eh?

1580074698
fengb
It usually prevents inlining. But if there’s only 1 call then not inlining is slower so it probably gets ignored

1580075919
metaleap
fengb good to know, thx

1580080577
daurnimator
andrewrk: with the cpu features branch now merged; how do I "invent" my own CPU?

1580080718
daurnimator
oooooo, looks like FireFox317 got the extensa working. that's awesome! glad I gave them the push :D

1580081294
andrewrk
daurnimator, in build.zig? cli? can you explain the use case a bit more?

1580081345
daurnimator
andrewrk: yeah in build.zig: I have an FPGA that you invent your own CPU for: it obviously doesn't belong in the standard library; but I'd like a way to create one in build.zig

1580081424
daurnimator
or is

1580081429
andrewrk
build.zig is ultimately going to use the cli to communicate to zig, so it will end up using -target-features by not -target-cpu

1580081579
andrewrk
I would recommend to initialize with baseline features, and then add/remove from  the set

1580081619
daurnimator
andrewrk: given that baseline features might evolve, I prefer to start from nothing and add features I have (which for now... is nothing)

1580081642
andrewrk
for most architectures, "empty" doesn't make sense. "baseline" is closer to empty than you might think

1580081679
andrewrk
for generic_rv32, it would look like this:

1580081694
andrewrk
.cpu_features = std.Target.CpuFeatures.initFromCpu(&std.Target.riscv.cpu.generic_rv32),

1580081724
andrewrk
you may note this is redundant information with arch. I would like to get to a place where specifying the full CPU would not require also specifying the arch

1580081761
andrewrk
for riscv, "generic" is truly empty

1580081774
daurnimator
andrewrk: yep... which is why I picked it

1580081799
daurnimator
is there some other more generic way to get a featureless cpu?

1580082100
andrewrk
are you sure you need a way to get a featureless cpu?

1580082116
andrewrk
s/a way/a generic way/

1580082136
andrewrk
oh, also note that generic_rv64 is not an empty feature set. it has the "64bit" feature

1580082715
Snektron
eh

1580082732
Snektron
printing with 0x{X:0>8} shouldnt output 0x+0000001 right?

1580082767
Snektron
maybe because i was using a signed type

