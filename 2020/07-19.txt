1595121164
Penguinl0l
hi, does anyone have a link to where i can read on zig's platform portability?

1595121181
Penguinl0l
cant really find much

1595121249
GreaseMonkey
Penguinl0l: think of a use case and we can probably tell you how well it's going to work

1595121265
GreaseMonkey
in general the Big Three™ (linux, windows, macos) works from my understanding, and so does at least one BSD

1595121288
GreaseMonkey
both as build machines and as targets

1595121316
GreaseMonkey
although outside of amd64 you might struggle for a build machine, i'm not entirely sure how well it works

1595121330
Penguinl0l
how hard is it to produce sym

1595121338
GreaseMonkey
what do you mean

1595121348
Penguinl0l
symlinks**** (folders, files)

1595121352
Penguinl0l
sorry my keyboard bonked

1595121365
Penguinl0l
do i invoke shell in zig, or is it supported via the language?

1595121422
GreaseMonkey
i don't know if the stdlib has support for the syscall required, but you can either use that approach or you can link against the libc and use a C import

1595121443
Penguinl0l
gotcha

1595121464
GreaseMonkey
ok it seems that symlink support is in the stdlib

1595121475
Penguinl0l
i havent actually started learning zig, but i want to use it for cli apps. i was just wondering how much it would be like C vs rust

1595121519
Penguinl0l
im about to start, but basically i wanted to see if zig had any standard libraries for misc file ops that in C i would normally have to invoke shell for (mkdir, symlink, etc)

1595121555
lemmi
why would you need to shell out for these Oo?

1595121664
Penguinl0l
i guess im just used to doing everything with sprintf and shell because mkdir() by itself isn't portable. I could ifdef it and do _mkdir but this gets harder with symlink so i usually just sprintf everything and call system()

1595121729
Penguinl0l
i thought rust handled this without a hitch but i've run into an issue when it comes to symlinks. Keep in mind this isn't that big of a deal, I'm just sorta fishing for what zig does for portability. C usually hasn't dif headers and dif functions, rust abstracts it out (for the most part) =P

1595121740
GreaseMonkey
what are your target OSes

1595121802
GreaseMonkey
...OK, seems there's support for symlinks on Windows as well

1595121830
GreaseMonkey
std.os.symlink() is what you want

1595121840
GreaseMonkey
pub fn symlink(target_path: []const u8, sym_link_path: []const u8) SymLinkError!void

1595121869
Penguinl0l
Thanks! I couldn't find this on my own... and I've been looking, but I probably just don't know what to google yet

1595121920
Penguinl0l
my target oses are linux (amd64 i guess) and windows??? I'm not used to desktop development. I normally do embedded but i wanna try and make some cool cli progs

1595149606
danyspin97
Last month I saw a nice tutorial on a third party site

1595149620
danyspin97
but now I can't find it. Does anyone know about it?

1595149724
ikskuh
did you mean ziglearn.org?

1595149758
danyspin97
I think yea

1595156231
komu
Penguinl0l: you can use sourcegraph to search(it has better search than github IMHO).

1595156243
komu
Here is a search of `fn symlink`:

1595163495
Sahnvour
what's the best option to create a slice from a separate pointer and length ? if it's at all possible

1595163551
ifreund
Sahnvour: var x = undefined; x.ptr = y; x.len = z;

1595163586
ifreund
well, var x: []T = undefined; would be needed

1595163832
Sahnvour
ifreund: thanks, was trying to do it with struct initialization only ... :)

1595163904
ifreund
yeah, I'm not totally sure why that's not allowed, maybe someday

1595164604
ikskuh
there's no option to do a "analyse only" step, right?

1595164609
ikskuh
so no code gen, just validity checking

1595164819
ifreund
not that I know of

1595164856
ikskuh
would allow faster iteration cycles i think

1595172451
KKRT
hi guys, can anyone explain to me why i cannot access variables in this returned struct?

1595172453
KKRT
i tried to google it, but didnt get anything fitting, only found Zig's assertion tests, but it didnt clear things up for me

1595172501
scientes
KKRT, you set it as const

1595172510
scientes
you can't change a const

1595172514
scientes
you have to use "var"

1595172530
scientes
oh nvm

1595172546
scientes
KKRT, you have to unwrap the error

1595172551
scientes
like start the call with "try "

1595172590
scientes
"try std.ChildProcess.exec(..."

1595172642
KKRT
omg, it was so simple

1595172648
KKRT
thanks

1595172711
KKRT
i saw the error handling within the code of this exec function ->

1595172752
scientes
KKRT, with a return, try does nothing

1595172753
KKRT
so i thought i dont need to handle it on my side, but still the message was kinda confusing to me, like variables within the struct were set to private mode or smth

1595172771
scientes
as try is just a short-circuit to return the error

1595172793
scientes
this is not C++, errors are just values

1595172806
scientes
its basically what C code would look like if you did it correctly

1595175311
manikawnth
Hi, I'm new to zig and finding if there's a way to mutate struct fields when passed to function as a parameter, the docs say func parms are immutable.

1595175488
Akuli
you could pass by pointer

1595175560
Akuli
fn foo(thing: *MyStruct) void { thing.stuff = 123; }

1595175684
manikawnth
I tried, but the compiler is interpreting it always as constant pointer

1595175692
manikawnth
fn reverse(p: *Point) void{  ... }

1595175701
manikawnth
var p = &Point {.x = 32, .y = 45 };

1595175704
manikawnth
reverse(p);

1595175801
Sahnvour
do `var p = Point{...}; reverse(&p);` instead

1595175828
Akuli
hmm, 'var p = &...' makes a pointer that can be changed, not a struct that can be changed

1595175839
Sahnvour
in your case, the `var p` is a pointer to a constant `Point` struct

1595176493
manikawnth
Thanks a lot, took some to digest, but it is very clear now.

1595177166
manikawnth
This code is resulting in segfault, on the surface it looked like stack memory got popped. But I'm still able to print but not pass into another function. Where am I doing wrong?

1595177168
manikawnth
```

1595177171
manikawnth
return ptr; //escapes?

1595177539
scientes
manikawnth, I generally do _thing: *MyStruct..and then var thing = _thing;

1595177560
scientes
not sure if IRC kept the underscore there...

1595178090
yeti
it did

1595179272
Sahnvour
manikawnth: try to upload your code on a gist/pad on the web, it'll be easier to read and help you

1595179600
manikawnth
Here it is, thanks

1595180557
Sahnvour
in reverse_facade, you can't return the address of q, because it is a local variable. it's located on the stack and will be overwritten in the future by other possibly unrelated code

1595180846
manikawnth
Yeah kind of guessed that, but somehow this `copyValPtr.print()` seems to be alive and printing consistently. And this is on windows.

1595181099
Sahnvour
this can either work or not, depending on many factors, because that is malformed code

1595181339
fengb
It’s probably working because the memory space hasn’t been overwritten yet

1595184661
Akuli
hm

1595184672
Akuli
zig has no way to prevent returning a stack variable (yet)?

1595184684
Akuli
eeh, returning pointer to stack variable

1595184698
Akuli
i guess it's not something that's easy to do accidentally after some experience with the language

1595184719
fengb
Not yet. I think some escape analysis and potential use-after-free are planned

1595184765
scientes
Akuli, no way to prevent it entirely

1595184777
scientes
except with an expensive run-time safety check

1595184809
scientes
but a simple check would be nice

1595185390
Akuli
right

1595187194
pixelherodev
Whoa, more nice stage2 work lately :)

1595187200
pixelherodev
Hopefully I"ll be able to get back into it this week

