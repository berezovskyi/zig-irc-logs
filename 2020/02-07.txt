1581033868
forgot-password
How does one create a null-terminated string now? Zig won't let me do "foo\0". Do I need to use the [*c] syntax?

1581033888
fengb
All literals are automatically null terminated

1581033916
fengb
Er... all strings are auto zero terminated

1581033936
fengb
String literals. 3rd time’s the charm >_>

1581033964
forgot-password
Haha, alright, thank you ^^

1581035064
geemili36
forgot-password:

1581035117
geemili36
Also, you can do "\x00" instead of "\0"

1581040347
pixelherodev
If a function is called with a comptime arg, but the parameter isn't specified as comptime, does it receive comptime optimizations?

1581040350
pixelherodev
I'm going to guess no?

1581040479
geemili36
How does someone who wants to start working on zig development the errors in this issue:

1581040568
geemili36
In the issue, it says that `-DCMAKE_BUILD_TYPE=Release` is meant for packaging, but without the flag zig won't compile

1581040635
geemili36
So what I am supposed to do? Fix the compile error and submit a pull request?

1581040638
pixelherodev
That makes absolutely no sense; ZIg should compile fine w/o that flag

1581040656
pixelherodev
Source: my local copy isn't built with that

1581040694
geemili36
Hmm. Maybe it's the version of LLVM/Clang that I'm using?

1581040717
pixelherodev
Could be?

1581040720
pixelherodev
I'm on 9.0.1, if that helps

1581040729
pixelherodev
LLVM and Clang built from source locally

1581040779
daurnimator
geemili36: also proper packaging shouldn't use `-DCMAKE_BUILD_TYPE=Release` either. I guess its for low effort packaging

1581040903
geemili36
I'm using version 9.0.1

1581040919
geemili36
Also I'm on NixOS using `nix-shell`, if that helps

1581040965
geemili36
I'm getting the same errors that Jan200101 was getting

1581040993
geemili36
*was getting in the issue I linked above\

1581041280
fengb
Would it help if you use the nightly package?

1581041506
geemili36
That works, but I want to compile it from source

1581041617
mikdusan
geemili36: as a package maintainer or clone the repo and just get a build?

1581041747
geemili36
mikdusan: I want to start contributing to zig

1581041768
geemili36
So, just get it to build, I guess

1581041799
mikdusan
ok so clone the repo; start from clean. you have llvm 9.0.1 available. how is that available? from some rpm or did you build it yourself?

1581041812
fengb
Thoughts on style?

1581041826
fengb
I like while-else but the million lines of parsing makes it hard to follow

1581041932
geemili36
mikdusan: I'm getting llvm from nixpkgs:  `nix-shell -p cmake llvmPackages_9.clang-unwrapped llvmPackages_9.llvm libxml2 zlib`

1581042004
mikdusan
and what's your cmake command look like?

1581042050
geemili36
`mkdir build; cd build; cmake ..; make install`

1581042115
daurnimator
fengb: I would prefer while-break

1581042157
daurnimator
that said... why do you have a million lines of code there? why isn't that broken up into functions?

1581042172
mikdusan
geemili36: can you paste cmake output to hastebin.com

1581042195
fengb
It's parsing specific stuff. Breaking it up only gives it semi-nicer names

1581042215
fengb
And leads to a potentially half-built tree

1581042544
fengb
Streams aren't easily composable huh?

1581043038
geemili36
mikdusan:

1581043697
mikdusan
geemili36: ok from build dir, do this: rm ./CMakeFiles/zig_cpp.dir/src/zig_clang_cc1as_main.cpp.o

1581043710
mikdusan
and then paste the output from: make -n src/zig_clang_cc1as_main.cpp.o

1581043796
mikdusan
CMakeFiles/zig0.dir/flags.make should help too

1581044458
geemili36
miksudan:

1581044625
mikdusan
what does gcc-wrapper-9.2.0 do?

1581045280
mikdusan
the weird thing is I have gcc-9.2.0 on archlinux. the `make -n` command shows identical options for me. yes, I have -Werror, and yet never get a maybe-unitialized problem

1581045322
mikdusan
I'd like to know what build options were used for llvmPackages_9.clang-unwrapped

1581045336
geemili36
It looks like the gcc wrapper adds a bunch of flags to make gcc work on nixos:

1581045436
mikdusan
even those flags don't trigger it for me

1581045603
geemili36
It looks like they use the cmake flags `-DCMAKE_CXX_FLAGS=-std=c++11` and `-DCLANGD_BUILD_XPC=OFF`

1581045612
geemili36
Relevant file:

1581045718
pixelherodev
It's amazing how much cleaner a properly designed program can be than a hacked together one

1581046153
mikdusan
geemili36: don't know what to say. just manually edit zig's CMakeLists.txt and nuke `-Werror`

1581046205
pixelherodev
Or fix the maybe-used-uninitialized issue?

1581046219
pixelherodev
Still a bug, no?

1581046224
mikdusan
pixelherodev: i can't even see the issue, nor reproduce the warning/error on my sys

1581046237
pixelherodev
Sure, but I've had similar cases with GCC vs Clang

1581046251
mikdusan
i'm using same gcc-9.2.0, but a diff linux distro

1581046335
geemili36
I'll probably nuke `-Werror` for the short term

1581046398
geemili36
However, this was apparently happened on Fedora as well, so I'll comment on the issue

1581046692
pixelherodev
Might be a slightly different compiler revision?

1581046806
mikdusan
it irks me looking into one of the warning/errors I can see a code path where it may not get initialized, and I suppose the compiler can see it too (inlined template function) but my compiler isn't moaning about it.

1581046892
geemili36
The comment above the line claims that it can't fail, but I can't verify that claim

1581047513
mikdusan
geemili36: curious, what does `llvm-config  --cxxflags` show for you

1581049101
geemili36
mikdusan:

1581050830
pixelherodev
I love how a small refactor can make code smaller, easier to read, and open up the door to even further refactoring accomplishing more of the same :)

1581050845
pixelherodev
Changed the signature of a single function in my LLVM lexer, and the resulting changes shrunk the lexer ~20 lines

1581050870
pixelherodev
In the process, around a dozen branches on a large if/else if/else chain became similar enough to merge into one piece :)

1581050894
pixelherodev
Just cut down code size by nearly 30%, became

1581051009
pixelherodev
and Zig has only made this

1581051088
pixelherodev
Checking whether any instruction matches, for instance, basically looks like `if (self.substr_match(.{ "alloca ", "call " })) |s| token.?.token_type = .Instruction;token.?.source = s[0..s.len-1];`  :D

1581051112
pixelherodev
Writing this as proper Zig instead of trying to use C idioms in Zig makes everything much much nicer

1581051435
seoushi
yeah. I started down the path of a direct port of my ecs from c. Then I saw some of things you can do and my code is smaller, more readable and safer. Still learning a lot of things too, it's just gonna get better

1581051685
pixelherodev
tl;dr: Zig is awesome, and it makes everything it touches better :)

1581051755
seoushi
I'm honestly suprised I didn't hear about it sooner. I randomly heard about it from another guy that was making a text editor in it hah

1581051831
pixelherodev
:)

1581052388
daurnimator
wow.... std.Buffer is used in so many places that it makes

1581053088
pixelherodev
Got it lexing the first 804 lines of its own IR! (up from ~650 twenty minutes ago :D)

1581053102
pixelherodev
Pretty sure the first version would've failed in the first ten lines

1581054507
pixelherodev
`%s/\(self.substr_match(\.{.*}\))/\=join([submatch(1), ", null" , ")"],"")` I knew learning this would be useful in the future :)

1581054523
pixelherodev
Automatically appends a `null` argument to every `self.substr_match` call

1581055773
geemili36
Is there a way to run tests on only a part of `std`?

1581055819
geemili36
Actually, I might not need to, it looks like it's the first time through that is slow

1581057016
geemili36
I'm trying to run the zig std library test suite, but one of the tests is being built with the wrong interpreter (I'm on nixos, so the usual `/lib64/ld-linux*` file doesn't exist)?

1581057576
andrewrk
geemili36, -Dskip-libc will skip the tests that are building dynamically linked glibc and trying to run it

1581057607
andrewrk
personally, I followed the guide in CONTRIBUTING.md and I use `-Denable-qemu -Denable-foreign-glibc=/home/andy/Downloads/glibc/multi/install/glibcs`

1581057663
andrewrk
hmm I wonder how one creates a pipe on darwin with O_NONBLOCK

1581057717
andrewrk
I guess fcntl

1581057753
geemili36
Ah, okay

1581057884
geemili36
Oof, a day to build all foreign `libc`s? I think that's going to be a pass for now.

1581059293
mikdusan
geemili36: that llvm was not built with `-fno-rtti` . whether that changes some things, I can't say.

1581059489
mq32
<pixelherodev> Writing this as proper Zig instead of trying to use C idioms in Zig makes everything much much nicer

1581059499
mq32
yeah, i've noticed that, too

1581088072
betawaffle
is std expected to be heavily re-organized before a 1.0 release?

1581088466
mq32
betawaffle: yes, it is. std right now is allowed to contain "anything that just works and seems kinda related"

1581088488
mq32
but afaik the plan is to strip it down and put stuff into packages

1581088539
betawaffle
what's your favorite part of std right now?

1581088618
mq32
"std.*"

1581088644
mq32
the point that nearly all of it works also on freestanding targets

1581088654
mq32
"oh, you want json parsing on AVR? Let's do this!"

1581088688
shakesoda
mq32: i just hope that said packages don't make building stuff practically require being online

1581088719
mq32
shakesoda, no. there's an issue about the package manager and what are the plans for it

1581088723
betawaffle
i'm really looking forward to documentation

1581088744
mq32
basically it's a fully decentralized package manager that doesn#t require any "repositories"

1581088761
shakesoda
mq32: i'll have to give it a good read

1581088792
fengb
@import(“leftpad”)

1581088797
betawaffle
heh

1581088827
mq32
nice thing is that leftpad is a zero-alloc operation in zig :)

1581088839
mq32
ah no.

1581088843
mq32
lefttrim would be zero-alloc

1581088887
mq32
shakesoda, i think andrew can give you more info about what he wants to keep in std for 1.0

1581088903
mq32
but i also think that something like a json parser isn't the right thing in a standard library

1581088934
fengb
I think it’d be pretty minimal. I hope we’ll have a concept of “blessed” packages

1581088960
fengb
So std can remain small but we still have high quality standard packages

1581088964
mq32
but stuff like containers (ArrayList, PriorityQueue), basic i/o (async or not, network/file/...),  should be in a "group" std

1581088967
shakesoda
i'm not sure what i think about json in std but it happens to be convenient that it's there in use cases i actually have

1581088970
mq32
fengb, yeah that sounds reasonable

1581088979
shakesoda
so... i kinda support it

1581089008
mq32
maybe create something like pacmans "groups" where you can reference "xorg" and get 50 different packages

1581089029
shakesoda
but otherwise, i definitely prefer standard libraries to tend toward being minimal

1581089042
fengb
Right that’s what I’m thinking. Last thing I want to see is the Wild West of npm

1581089053
fengb
And everybody dependent on some random dude’s leftpad

1581089069
mq32
it's also a thing about compatibility

1581089080
mq32
that's what i love about (old) .NET

1581089097
mq32
everybody just uses System.Collections.Generic.List or System.Collections.Generic.Dictionary

1581089105
mq32
because "they are there anyways"

1581089113
mq32
whereas C++ is the absolut other way

1581089144
mq32
oh yeah, we're using std::vector, QVector AND boost::vector!

1581089159
shakesoda
to be sure, c++'s standard library is frequently horrible

1581089185
mq32
it's okayish. Qt has a lot of problems as well (mostly typing errors)

1581089212
shakesoda
god help you if you ever get some stl related compile error, or have to use msvc's stl

1581089224
shakesoda
to say nothing of the horrible things it all does to compile times

1581089233
mq32
:D

1581089244
mq32
my C++ compile times aren't that horrible

1581089261
shakesoda
and of course when bringing up compile times the retort from people is "get a faster computer" as if that makes it okay that everything is slow

1581089264
betawaffle
are type names only decided once? if i do `const A = B`, and then get the name of A, will it be the name for B?

1581089285
shakesoda
build times are a lot of what i hate about rust's package situation

1581089293
mq32
betawaffle: yeah, as it's the same time

1581089295
shakesoda
the million packages involved in everything inflate build times

1581089302
shakesoda
and it's really slow to begin with :(

1581089305
mq32
shakesoda: +2

1581089316
mq32
building my mini-tool on my RPI takes forever

1581089333
mq32
and uses about 2.3 GiB of disk space for build artifacts

1581089346
fengb
There was a discussion about Rust on HN. Best response was “it’s not as slow as C++”

1581089347
mq32
i think Rust relies too much on compiler optimizations

1581089369
mq32
it would be nice if zig had better compile times, but it's not worse either

1581089376
mq32
debug builds are also reasonably fast

1581089397
fengb
Yeah its LLVM IR output is really bloated

1581089414
shakesoda
zig's build times have been okay for me, could certainly be better

1581089451
mq32
go is doing a good job on showing "how fast can we actually be"

1581089480
fengb
Zig will do better once we have our own backend

1581089491
betawaffle
is there a difference between an extern fn and a (non-extern) fn with callconv(.C)?

1581089502
fengb
I don’t think performance has been a priority because it’s stage 1

1581089510
shakesoda
build times in general have informed a lot of technical decisions i've made over the years

1581089533
fengb
I think extern function was replaced with callconv(.C)

1581089549
mq32
<fengb> I think extern function was replaced with callconv(.C)

1581089550
mq32
this

1581089564
betawaffle
oh, so it's just deprecated syntax then?

1581089567
mq32
yep

1581089575
mq32
zig fmt fixes it also on some places already

1581089582
fengb
Yeah zig fmt is replacing it

1581089594
mq32
i think build times should never be a concern when doing optimized builds

1581089601
betawaffle
is there a build mode where it will complain about uses of deprecated things?

1581089606
fengb
I honestly wouldn’t have noticed if zig fmt didn’t help me

1581089624
mq32
betawaffle: nope

1581089631
mq32
there'S no way to declare deprecation

1581089639
shakesoda
is there an issue for that?

1581089641
mq32
but for debug stuff, the build should be as fast as possible

1581089642
betawaffle
we need tags...

1581089649
shakesoda
declaring things like deprecation is very useful

1581089747
fengb
I don’t think deprecation will be a priority before 1.0

1581089798
shakesoda
it's incredibly useful for selfish reasons and not just standard library ones :)

1581089810
fengb
Everything can change!

1581089883
mq32
i'm not sure about "tags" as a language feature

1581089890
mq32
i think we can do tagging completly in user space

1581089971
shakesoda
my language bias is showing with that particular ordering

1581089999
companion_cube
attributes/tags are really nice to have in the syntax though

1581090009
fengb
Java has annotations. Python has decorators which can work as tags

1581090013
companion_cube
(see

1581090096
fengb


1581092328
metaleap
as far as std-libs go, tricky to strike a good balance. .net framework or jdk feel to bloated and blown out of all sensible proportion, but "minimalist, fetch 100s of tiny pkgs and their endless nano-deps via yaml/json" is another ugly extreme as in js/ts. zig is the lovelier language vs go to me, but their stdlib approach has always impressed + satisfied me. yes json/http/sockets at least as a general / not-particularly-specialised/-use-case-optimized

1581092329
metaleap
"reference edition" in a stdlib is

1581092413
metaleap
in the "you must be able to reach for said battery-included even on a desert island" sense.. tho putting it this way, maybe it isnt such a sane desire on 2nd thought :D

1581092928
shakesoda
another concern is being robust against remote resources vanishing (which it sounds like has been considered in the issue about the package manager)

1581092979
shakesoda
even if you aren't on a desert island, if what you originally needed just goes away you might as well be, and this isn't even slightly uncommon

1581093020
betawaffle
sometimes i wish i was on a dessert island, yum

1581093945
Snektron
a bit off-topic but i know there are some OS people here: i'm working on a small kernel with a friend, but the cpu errors when executing a far jump to set the cs register

1581093955
Snektron
(similar to

1581093966
Snektron
Except it works when i use a far-return based strategy

1581093984
betawaffle
what's the error?

1581094010
Snektron
general protection fault

1581094013
Snektron
(no error code)

1581094027
betawaffle
have you set up your gdt entry correctly?

1581094079
betawaffle
and can you link to your actual code that's not working? (ie. how similar is it to what you linked there?)

1581094116
Snektron
The current solution is

1581094175
betawaffle
you might also want to double-check that the jump is actually being compiled correctly

1581094216
betawaffle
do you know which instruction is getting the GP? is it the jmp?

1581094293
betawaffle
i'd like to see what you've got for the GDT entry, and what the address of gdt_load_cs_reload is

1581094297
Snektron
yes

1581094320
Snektron
the gdt is set up in

1581094332
betawaffle
if you look at

1581094377
Snektron
yes, i assumed that #GP(new selector) and #GP(segment selector) raises a nonzero error code

1581094478
betawaffle
is this in qemu or on real hardware?

1581094518
Snektron
qemu

1581094808
betawaffle
i think GDT_ACCESS_SYSTEM may be wrong?

1581094875
betawaffle
that bit should be *set*, not sure if that evaluates to a 1 or 0 for that bit

1581094994
Snektron
let me check

1581095069
Snektron
"This bit should be set for code or data segments and should be cleared for system segments"

1581095077
Snektron
according to osdev

1581095083
betawaffle
right, it's not a system segment

1581095093
betawaffle
it's a code segment

1581095099
Snektron
I assume set means 1

1581095104
betawaffle
a system segment is like a TSS, for example

1581095107
betawaffle
correct

1581095118
Snektron
yes

1581095146
betawaffle
so what's the value of `GDT_ACCESS_SYSTEM`?

1581095174
Snektron
16

1581095204
betawaffle
hmm, ok, that seems correct then

1581095227
betawaffle
what's the code that's given with the GP?

1581095324
Snektron
its 0, so looking at the reference of jmp, i would think thats some kind of access violation

1581095358
betawaffle
this is in protected mode?

1581095382
betawaffle
or maybe just before?

1581095411
Snektron
We use multiboot, so i think this is already in protected mode

1581095415
betawaffle
yep

1581095727
betawaffle
afaict, the only thing that could cause it would be "effective address in the CS, DS, ES, FS, GS, or SS segment is illegal"

1581095762
betawaffle
is it possible you shouldn't be using GDT_FLAG_GRANULARITY?

1581095809
betawaffle
0xFFFFFFFF * 4096 is a big number

1581095856
Snektron
no cigar

1581095862
betawaffle
"Hence, if you choose page granularity (4 KiB) and set the limit value to 0xFFFFF the segment will span the full 4 GiB address space."

1581095904
betawaffle
and what is the address of gdt_load_cs_reload?

1581096040
betawaffle
also, i

1581096074
betawaffle
don't think it would trigger the GP, but you'll probably hit something eventually

1581096167
Snektron
hm, i can't find anything about the -1

1581096178
Snektron
let me check load_cs_reload

1581096179
betawaffle
"The size is the size of the table subtracted by 1."

1581096219
betawaffle
and it's the size in bytes, not entries

1581096219
Snektron
oh, weird

1581096232
betawaffle
not sure if sizeof is bytes or entries

1581096238
Snektron
bytes

1581096319
Snektron
let me check the address

1581096405
betawaffle
i wonder if it's important to load the other segment registers before the jump

1581096412
betawaffle
that's what kernel-zig does

1581096425
betawaffle
but you're loading them afterward

1581096441
Snektron
I tried loading them before, it didn't help

1581096467
Snektron
ah, one weird think is that the jump is assembled to

1581096476
Snektron
EA 12 0A 10 00 08 8E

1581096490
betawaffle
yikes

1581096526
Snektron
So that would translate to jmp 0x08:0x10A12 which corresponds with the address as observed in gdb

1581096535
Snektron
except im not sure what the 8E is about

1581096549
Snektron
i dumped it into oda earlier since gdb also had issues with it

1581096558
betawaffle
are you sure about that translation?

1581096568
Snektron
and it didn't recognize it either

1581096680
Snektron
eh not quite

1581096693
Snektron
jmp 0x08:0x100A12

1581096818
betawaffle
it looks more like jmp 0x8e08:... does it not?

1581096864
betawaffle
yep... jmp    0x8e08:0x100a12 is what the internet say

1581096877
Snektron
ah hm, thats weird

1581096914
betawaffle
i have zero idea why it's compiling to that

1581096930
Snektron
Thanks for noticing that

1581096952
betawaffle
np

1581097007
Snektron
most me nasm doing something wrong

1581097362
andrewrk
happy commit:

1581097407
andrewrk
(also this is why I like to put links to issues next to workarounds)

1581097489
fengb
Lots of LLVM 10 updates. Does this mean release soon?

1581097596
andrewrk
I think my estimate of April 13 is accurate

1581097612
andrewrk
they post the release schedule of llvm on

1581102169
jaredmm
Where do the lld linker settings get, uh, set?

1581102361
andrewrk
link.cpp

1581102558
Snektron
Alright, so it turned out not to be the nasm thing, i reported that wrong of course

1581102564
Snektron
Friend can run my kernel binary

1581102573
Snektron
so qemu seems to be the problem

1581102951
Snektron
although it works with kernel-zig, so maybe we do something wrong

1581104297
Snektron
mystery solved: osdev was wrong

1581104384
Snektron
no wait, it was just a typo

1581105318
metaleap
chasing typos for hours .. been there, palmed my face o_O

1581111576
seoushi_
zig on pinephone

1581111623
mq32
<3

1581111670
mq32
is there already the change for "remove 'set to uninitialized in allocator interface'"?

1581111708
andrewrk
seoushi_, and that has some zig code running too (e.g. if you ran zig fmt on a file, that would be zig code running on your phone)

1581111806
mq32
andrewrk: how bad would you call my idea to store immutable strings with an allocator and pass a null-allocator (always returns OutOfMemory, free does nothing) to use it with string literals?

1581111907
andrewrk
happy to discuss in a bit; I'm getting ready to stream

1581111935
mq32
ah, oh!

1581111963
mq32
have to watch the recording asap, don't have time to follow the stream atm

1581112064
betawaffle
Snektron: explain?

1581112134
seoushi_
andrewrk: yeah I don't have time at the moment to play with it more. the terminal on the device is a bit painful as well. atleast if you tap on a file from ls it will paste it into your current keyboard input

1581112145
seoushi_
there is no tab so that really messes with me

1581112243
seoushi_
one minor annoyance is that zig is packaged as a .xz would much rather see gz or bz since I had to install something that could extract 7z format

1581112275
fengb
Or zstd? 😇

1581112315
andrewrk
seoushi_, that's good to know, thanks

1581112317
seoushi_
zstd? I was just trying tar -xf which fails. ended up install unar

1581112345
andrewrk
xz is installed by default on many systems, good to know it was missing on this one

1581112384
andrewrk
fengb, I'm ending up fixing a lot of async fn codegen bugs in this branch

1581112416
andrewrk
for #4404

1581112522
pixelherodev
xz > bz/gz :)

1581112564
fengb
Arch has started its migration from xz to zstd. Might finally be the compression that replaces everything

1581112567
andrewrk
for `./zig test ../test/stage1/behavior.zig --test-evented-io`, codegen completes, but then there are several missed spills to fix

1581112578
andrewrk
getting close though!

1581112587
andrewrk
the promise of no function colors is coming true

1581112595
fengb
Sweet!

1581112606
andrewrk
this makes file system stuff automatically use a separate thread too

1581112626
andrewrk
(when the os does not provide non-blocking file system I/O)

1581112663
fengb
Oh so we can still simulate async manually?

1581112735
andrewrk
not sure what you're asking

1581112756
betawaffle
what's today's topic?

1581112762
fengb
We can make it async using threads instead of a proper primitive

1581112768
andrewrk
something fun

1581112835
mq32
andrewrk: afaik a modern tar can extract xz by just using tar xf

1581112846
pixelherodev
mq32, yes, but only if `xz` is installed

1581112847
betawaffle
aww, i was hoping for something really dull

1581112853
pixelherodev
Yeah me too

1581112863
mq32
ah, good to know!

1581112868
pixelherodev
mq32, try running that with a modified PATH so `xz` isn't present

1581112877
pixelherodev
It's the same way its gzip decompression works

1581112896
mq32
ah, so they just have convenience unwrap and re-execute :D

1581112913
pixelherodev
Basically, `inline for (compression_methods) |c| { if (file.isCompressedWith(c)) { system(//decompress);}}` before the actual extraction

1581112919
andrewrk
starting now:

1581112955
betawaffle
game dev!

1581112966
pixelherodev
You weren't joking about fun :)

1581113027
seoushi_
wish I wasn't at work or I would watch it.. will catch the recording later

1581113045
mq32
seoushi_, i'm at the hacker space right now, same here

1581113054
mq32
but something nice to do tomorrow afternoon

1581113085
seoushi_
yeah for sure.

1581113177
pixelherodev
Do you still pay attention here when streaming, or only to Twitch chat?

1581118757
metaleap
so full-file-reads are to be done from std.fs.Dir, right? IIRC one would do fs.Dir.openDirFoo("/").openFile("/my/file.path")

1581118808
metaleap
BUT what i'm getting may be a /foo/bar path or a X:\foo\bar path for the windozers

1581118831
metaleap
so where's the OS' path-sep, not finding it in std.os nor std.fs

1581118863
metaleap
ahhh fs/path.zig

