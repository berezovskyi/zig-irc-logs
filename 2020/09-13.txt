1599957030
Snektron
Red black tree probably

1599974411
bambams
At

1599974418
bambams
comptime assert(@TypeOf(foo).Payload == i32);

1599974447
bambams
But I get: error: type 'type' does not support field access

1599974764
pixelherodev
Okay, I finally got LLVM + Clang working in Gentoo for Zig linkage :)

1599974785
pixelherodev
I'm going to set up an overlay for it today :)

1599984947
andrewrk
0.7.0 release postponed to october 26:

1599994378
ask6155
Hello!

1599994389
ifreund
o7

1599994522
ask6155
I was using DefaultPrng in my program. It needed a seed so I was thinking of using... OS time? How would I do that?

1599995209
ifreund
ask6155: std.time has various function for doing that

1599995767
ask6155
all the funcs in std.time return i64 whereas DefaultPrng requires u64 Numbers...

1599995959
ifreund
ask6155: it's just a seed, so it doesn't matter what the actual number is

1599995970
ifreund
just @bitCast() it to u64

1599995995
ask6155
oh okay

1599996870
ask6155
Can I random assign an option to a enum?

1599996875
ask6155
*randomly

1599997020
ifreund
ask6155: sure, use @intToEnum()

1599997088
ifreund
and you can get the number of fields with @typeInfo(foo).Enum.fields.len

1599998191
ask6155
if I getStdIn and pass it to std.os.read(stdin, buffer) isn't it supposed to wait and take input while running?

1599999069
ask6155
wait read takes a fd but getStdIn gives a File... What to do?

1599999150
Nypsie[m]
You can get the fd from the File, pretty sure it's called .handle.  The easiest way to read from stdin however, would be by using the reader interface like so: std.io.getStdIn().reader().readAll(buffer);

1599999277
ifreund
getStdInHandle() returns the fd directly alternatively

1599999300
ifreund
but yeah, you most likely want to use the reader interface

1599999679
ask6155
when I called the reader with readInt and gave it type u2 it gave error as exact division had a remainder

1599999779
ask6155
oh wait it has to be divisible by 8

1600001269
ask6155
I gave readAll a file and a buffer (stdin's File) but it's not pausing to get input

1600001383
Nypsie[m]
What size is the buffer you're providing?

1600001406
ask6155
[]u8 undefined

1600001503
ifreund
uh, that's not a buffer, that's an undefined slice

1600001519
ifreund
a slice is like a pointer, it needs to be backed by some memory

1600001533
ask6155
How do I provide a buffer?

1600001569
ifreund
so you could do e.g. var buffer: [1024]u8 = undefined; file.read(&buffer);

1600001662
ifreund
or you could use something like reader.readUntilDelimiterAlloc() if you want to read input one line at a time and allocate memory to read into

1600001765
ask6155
I made a buffer [1024]u8 = undefined and then gave *buffer to readAll. I gave error expected 'type' found [1024]u8

1600003088
dec05eba
are zig compiled binaries portable? or does the compiler do the equivalent of -march=native by default?

1600003160
ifreund
the default is -march=native

1600003184
ifreund
you can set the target with -target though,

1600003329
dec05eba
i thought -target was only for choose the target architecture, and not which generation of instructions to use

1600003660
ifreund
oh my bad, I meant -mcpu

1600003784
ifreund
though wait, I think if you use target with x86_64-linux-gnu over native-linux-gnu it already disables the cpu-specific stuff

1600004210
dec05eba
i see, thanks

1600007068
daurnimator
dec05eba: yeah as soon as you specify x86_64 it changes to use the baseline CPU feature set for x86_64

1600019728
kristoff_it
The stream is live, Zig SHOWTIME starts in 10mins

1600020034
ifreund
\o/

1600026043
andrewrk
ifreund, for future reference recommend std.crypto.randomBytes for the seed rather than time

1600026059
andrewrk
I'll put that in the doc comments

1600026092
ifreund
good to know, I haven't really done anything with that part of the std yet

1600026431
andrewrk
for pseudo random numbers it doesn't matter as much but for cryptographically secure ones it's the difference between exploitable code or not

1600026558
ifreund
neat, looks like I can build my pam module thing without linking libc

1600026658
andrewrk
cool!

1600026797
ifreund
hmm, that does mean that I don't share the allocator with PAM though, allocating a whole page just to use 4 bytes of it seems wasteful

1600027021
andrewrk
I think if your plugin is going to get used by other code that already links libc, linking libc in your plugin is probably the way to go

1600027032
andrewrk
that's sorta why we have the ability to do both

1600027080
ifreund
yeah, the daemon part is pure zig now though since the prctl thing got merged

1600027219
andrewrk
after I get this beast #6250 landed let's reexamine your use cases and make sure everything is solved

1600027229
andrewrk
it's gonna have a main.zig instead of main.cpp

1600027274
ifreund
the only outstanding issue in master is that I can't get rid of the "lib" prefix on the dynamic library

1600027312
andrewrk
gotcha. yeah I think that can be an option. you willing to wait a couple weeks for me to finish this work or would it be beneficial to update master in the meantime?

1600027319
ifreund
this could be solved post #6250 by simply exposing the -femit-bin=foo thing in the zig build system, which we probably want to do anyways

1600027332
ifreund
nah it's really not a big deal, I can be patient

1600027402
ifreund
I think I'm gonna write some more idiomatic wlroots bindings next, which will 1. make river's code cleaner and 2. make it build on musl

1600027612
andrewrk
nice

1600027619
ifreund
I also want to get back to wasm in stage2 at some point, though that may wait till october when I have more brainpower to spare from Uni

1600027874
andrewrk
looking forward to that

1600028337
andrewrk
oh man I'm about to use readlink in stage2 to store hash digest in the file system metadata instead of contents, and I think it's actually a good idea

1600028363
andrewrk
shave off 2 read()s and a close()

1600028392
andrewrk
thank you to whomever contributed ReadLink for windows

1600028447
andrewrk
looks like it was kubkon :)

1600028681
ifreund
nice

1600032548
pixelherodev
Whoa, nice

1600040836
andrewrk
nvidia is buying arm

1600041079
pixelherodev
...

1600041086
pixelherodev
What's the channel's rule on cursing?

1600041539
bfredl
Openrisc desktops and phones when?

1600041550
bfredl
Sorry meant risc V

