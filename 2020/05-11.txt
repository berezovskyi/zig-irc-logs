1589156171
daurnimator


1589156233
fengb
I just read that :P

1589157593
wilsonk
jwmerrill: nice work on that Lox interpreter. Seems to work fine with Brave browser (based on Chrome)...just so you know

1589157984
oats
works nicely in qutebrowser too

1589165221
curtisf
Did something change about how type-producing-functions get their identities? I'm getting strange looking errors `error: expected type 'grammar.Leaf("Iden")', found 'grammar.Leaf("Iden")'`

1589167130
andrewrk
I'm looking forward to setting up compilation speed benchmarks and regression testing for self-hosted

1589167155
andrewrk
it's coming up very soon on my task list

1589167434
oats
andrewrk: I have not paid attention to self-hosted progress, how far along is it?

1589167482
andrewrk
it's in the very early stages as far as language support, but I'm getting all the difficult design problem sorted out at the very beginning

1589167508
andrewrk
the only passing tests are here:

1589167530
andrewrk
but I have nearing completion implementation of incremental compilation

1589169419
foobles
andrewrk when using ir_create_basic_block_gen, is there any need to append them to the irb basic block list?

1589169502
foobles
i see there is ir_set_cursor_at_end_and_append_block, but that's only for IrBasicBlockSrc

1589169504
foobles
not gen

1589169673
foobles
oh: do I just call ir_finish_bb?

1589171094
foobles
huh, now I am getting unreachable code errors

1589171211
foobles
@andew

1589171224
foobles
andrewrk any advice?

1589172706
andrewrk
foobles, by convention the "create" ones don't append but the "build" ones do

1589172763
foobles
ohhhh thank you

1589172768
foobles
i didnt see that

1589172781
foobles
will that also fix the false-positive for unreachable code?

1589172821
foobles
wait, there is no ir_build_bb

1589172833
foobles
or basic_block

1589172875
andrewrk
hm doesn't the "if" analysis have to output such instructions?

1589172908
foobles
the only function that exists for making them requires an existing IrBasicBlockSrc

1589172928
foobles
oh, wait

1589172935
foobles
the build function does NOT append anthing

1589172956
foobles
it just calls ir_create_basic_block_gen, and then sets the IrBasicBlockSrc's child to be the new one

1589172977
foobles
so really, calling ir_create_basic_block_gen would be the best choice i think

1589173071
andrewrk
you might need to add a little bit of glue code to hook this up

1589173291
foobles
alright, ill see what the "if" analysis does

1589173293
foobles
thanks :)

1589173450
foobles
alright, im going to go to bed now, thanks so much for the help

1589173472
foobles
this does feel way cleaner than generating llvm ir directly, despite all this :p

1589188381
ifreund
so, i have a feature that is enabled by a build option which requires adding extra members to some structs when the option is enabled

1589188412
ifreund
my current pattern is `my_field: if (build_options.thing) MyType else void,`

1589188442
ifreund
am I correct in assuming that having a void member will have no effect if the option is false?

1589188516
ifreund
if so, anyone know of a better way to do this? I like the current solution but want to make sure it's not bloating my builds if the option is disabled

1589188778
daurnimator
ifreund: correct. a void field will take no room

1589189733
ifreund
one thing I haven't found a clean way to remove based on a build option is a variant of a tagged union

1589189794
ifreund
voiding the type is fine in theory, but would then require adding a check in every switch statement to do nothing if the build option is disabled

1589189873
ifreund
i'm using this tagged union to implement an interface of sorts, so I've swapped out the type with a dummy implementation with 0 size and every function simply containing an unreachable for now

1589189887
ifreund
i feel like there might be a better way though

1589190074
daurnimator
yeah I've hit that same issue before

1589190095
daurnimator
IMO @reify despite the drawbacks is the most sensible solution

1589190169
daurnimator
I've still got a tab open reminding me to finish

1589193109
ikskuh
i really wonder why the maintainer of the AUR package "libc++" thought it was a good idea to run all tests on install :D

1589194597
daurnimator
ikskuh: build without running check?

1589194618
ikskuh
well

1589194622
ikskuh
yay -S libc++

1589194624
ikskuh
will build all tests

1589194626
ikskuh
:D

1589194630
ikskuh
by-default

1589196192
cren
I'm learning Zig. How do I ask for a slice as the argument to a function (what's the syntax)?

1589196240
ikskuh
"[]T" for a slice to mutable data, "[]const T" for a slice to immutable data

1589196244
ikskuh
function taking a slice:

1589196256
ikskuh
fn foo(slice: []const u8) void { }

1589196345
cren
If the data is not going to be modified by the function, does it matter whether I use `const` or not (better performance?).

1589196389
ikskuh
it does matter. not for performance reasons, but for documentation and usability

1589196396
cren
good answer

1589196403
cren
I will use `const`

1589196413
ikskuh
you cannot pass const data to a non-const slice

1589196425
ikskuh
and it's always preferrable to have data const

1589196518
cren
I had specified the array as `const` so I guess I would be using a `const` slice anyway

1589196551
ikskuh
you wouldn't be able to use a mut slice then

1589197078
cren
When I use std.rand.Random, do I need to initialise it? I've seen it done in places but the example std/rand/ziggurat.zig doesn't seem to do it anywhere

1589197166
ikskuh
std.rand.Random is an interface

1589197175
ikskuh
if you want to get an instance to it, use a random generator engine

1589197211
ikskuh
var rng = std.rand.DefaultPrng.init(seed);

1589197222
ikskuh
rng.random.boolen(); // returns random boolean

1589197230
cren
ah I see

1589197255
cren
are all these random number generators going to always be available? or are they just being tried out because the language is new?

1589197410
ikskuh
zig std will be reviewed and reshaped before 1.0

1589197419
ikskuh
nothing in std is guaranteed to be kept

1589197430
ikskuh
but the code will probably still be available in separate packages

1589197443
cren
ok

1589199908
ifreund
trying to update the zig packaage for void but getting an error building stage2

1589199913
ifreund
anyone seen this before? any ideas?

1589200294
waleee-cl
do /etc/conf contain it perhaps?

1589200343
ifreund
nope

1589200368
ifreund
ah, found this

1589200714
ifreund
nice, removing `-DZIG_PREFER_CLANG_CPP_DYLIB=ON` fixed it

1589200721
ifreund
guess i didn't need that after ally

1589200727
ifreund
s/y//

1589200860
Dominic[m]
How can I pass the equivalent of `-l` to zig (cc)

1589201357
Dominic[m]
Nvm, I hadn't done something I thought I had :)

1589201872
Dominic[m]
I'm failing to get sys/types.h to #include from a `.h` file in my system. I notice that should be part of e.g. musl.  Do I need to do something to get zig to provide that file? I'm not expecting to need to install glibc-devel on my machine to get the file to exist.

1589201927
ikskuh
i think you have to use "-target native-native-gnu"

1589202163
Dominic[m]
ikskuh: Trying `-target x86_64-linux-gnu` seems to be tripping up on needing stddef.h. I can see zig has that under `musl` and also `any-linux-any`, but I don't know how to "trigger" those

1589202222
ikskuh
is your source publicly available?

1589202226
ikskuh
i#d take a look

1589202237
Dominic[m]
Actually, it only got that far because I installed `glibc-devel`.

1589202248
drp
don't you have to use the -lc flag to bring in the libc?

1589202281
Dominic[m]


1589202302
Dominic[m]
Adding `-lc` was one of my attempts, same error with/without.

1589202468
ikskuh
are you on windows?

1589202552
Dominic[m]
No, linux

1589202560
ikskuh
which version of zig?

1589202565
ikskuh
mine "just works"

1589202573
Dominic[m]
Oh. 0.5

1589202581
ikskuh
maybe use 0.6 ;)

1589202585
Dominic[m]
I guess there was improvements in 0.6 here

1589202590
ikskuh
0.5 doesn't really support "zig cc"

1589202596
ikskuh
it's a whole new feature

1589202609
ikskuh
"zig cc" in 0.5 is something completly different than in 0.6

1589202630
Dominic[m]
Oops, my mistake.

1589202642
Dominic[m]
I need to see if I can bump void linux's zig release really.

1589202671
fengb
You can try the downloads page. It’s a static build so should just work

1589202692
Dominic[m]
Something seems to be happening... :D

1589202897
Dominic[m]
ikskuh: did you manage a full build? Mine can't seem to find mu_pop_id which is defined in ../src/microui.x

1589202900
Dominic[m]
* ikskuh: did you manage a full build? Mine can't seem to find mu_pop_id which is defined in ../src/microui.h

1589202909
cren
I'm on Void Linux now and am happier now that I am using a 0.6.0 tarball instead of the package

1589203003
ikskuh
i have an a.out that crashes with the UBsan :D

1589203075
ikskuh
when i pass O2, it works:

1589203117
Dominic[m]
ikskuh: what was the exact build you used?

1589203130
ikskuh
zig cc main.c renderer.c  ../src/microui.c -I ../src/ -Wall -std=c11 -pedantic `sdl2-config --libs` -lGL -lm -O3 -g -O2

1589203135
ikskuh
the cli from build.sh

1589203158
Dominic[m]
Oh, missed the `../src/microui.c`. That would be helpful wouldn't it :)

1589203191
Dominic[m]
Thanks, that got it!

1589203216
Dominic[m]
(As an aside, I did not expect it to open a window with windows inside... trippy.  I expected native windows)

1589203276
Dominic[m]
Exploring options for building apps for the pinephone. I saw

1589203295
fengb
Oh you’re on a pine phone? How is it?

1589204448
samtebbs
Hi everyone, I saw that the extern keyword was replaced recently, does anyone know what I'd replace it with if when using externally declared functions?

1589204463
samtebbs
I don't care about the calling convention

1589204488
fengb
extern is still used for forward declarations

1589204506
fengb
I think there’s an issue to discuss replacing it but it hasn’t been replaced yet

1589204583
ikskuh
extern fn SDL_Init(…) callconv(.C) void;

1589204586
ikskuh
is the right syntax atm

1589204598
samtebbs
Ok thanks. I am getting a compilation error when using it though. error: invalid token: 'extern' for line `EFN_OVOID: extern fn () void,`

1589204620
samtebbs
Perhaps it can't be used in function types any more

1589204666
ikskuh


1589204669
ikskuh
works for me

1589204671
ikskuh
ah

1589204677
ikskuh
in function types, you cannot mark a function as extern

1589204686
ikskuh
you

1589204750
ikskuh
<samtebbs> I don't care about the calling convention

1589204756
ikskuh
that's not possible for extern functions ;)

1589204767
ikskuh
they have a calling convention and your zig equivalent must match them

1589204823
samtebbs
ikskuh: That does make sense :) Zig format converts it to callconv{.C) so I'll keep it like that until I see any problems

1589204890
ikskuh
what function do you want to call?

1589204921
fengb
They don’t default to C call conv anymore?

1589204940
fengb


1589204953
fengb
I need to get WASI tests running in CI :/

1589204971
ikskuh
@fengb: dunno actually, maybe they still do?

1589206407
foobles
omg i realized the reason the branching code i was generating was giving me errors because I forgot to make the then/else blocks branch into the end block

1589207666
Dominic[m]
fengb not yet, but when it arrives! I want to be prepared though.

1589209627
marler8997
I'm confused, I'm suddenly getting this error that Address.getOsSockLen is private, but I doin't see any recent changes around it ???

1589209705
marler8997
so given a *Address, how am I supposed to call bind without the length?

1589209735
fengb
There was a recent bug fix to make the compiler respect `pub` on methods

1589209742
marler8997
oh!!

1589209747
fengb
So... this could be a regression where we forgot to add pub

1589209757
marler8997
thanks fengb

1589209772
fengb
np

1589211197
marler8997
23 seconds to build zig now...so glad I got this new machine

1589212799
samtebbs
fengb. marler8997 I'm seeing that with StackIterator.next as well

1589213292
fengb
There's probably quite a few of these regressions. Probably best to make a PR

1589218208
oats
are function parameters only ever const?

1589218219
ifreund
oats: yep

1589218229
oats
huh, that's a bit irritating

1589218232
oats
ah well

1589218234
ifreund
though they can point to mutable things of course

1589218237
oats
sure

1589218243
ikskuh
oats: uncommon, but allows some neat optimizations

1589218260
ifreund
makes things more readable too imo

1589218273
ifreund
you want them to be const like 99% of the time

1589218292
ifreund
so you expect them to be const 100% of the time, and when they aren't const it needs to be explicit

1589218312
oats
makes sense

1589218316
ifreund
zig requires you to define a new local variable, which meets that requirement

1589219002
oats
props to whomever added testing.expectEqualSlices()

1589219018
oats
good stuff

1589219587
marler8997
Looking at lib/net.zig, I see that tests are pulled out into another file, net/test.zig

1589219612
marler8997
is this a new pattern? an old pattern? when should tests be put in the source file or pulled out into another?

1589219644
scientes
not important

1589219683
fengb
I think more complex/in depth test cases are pulled out

1589222420
Spex_guy
I've been thinking a lot about optimizing coroutines.  They present an interesting problem, in that they introduce a feedback loop between compile-time execution and the optimizer.  The core of it is that the optimizer needs to be able to reduce the size of the frame struct for an async function (possibly to zero), but comptime code is allowed to

1589222421
Spex_guy
check the size of the frame and do arbitrary things with it.  At first it seems like you could run the optimizer to completion on parts of the code before executing other parts that are dependent on the result of the first, but this doesn't work.  It would make things like mutual recursion between async functions with a heap allocator for frames

1589222421
Spex_guy
impossible to compile due to circular dependencies.  Instead what we will need is a way to run optimization passes and comptime resolution passes iteratively to handle these cases.  This will ultimately mean that we can't put a hard separation between the optimizer and the comptime execution engine, and probably that we'll need our own optimizer

1589222422
Spex_guy
that isn't LLVM.  Is that something that you guys have thought about?  Am I missing something?

1589227494
ifreund
Spex_guy: I think you should put that in an issue if you haven't yet, don't want it to get lost here

1589227511
ifreund
I haven't spent too much time thinking about it, but what you say makes sense to me

1589227651
tdeo
whoa, clang already has _Nullable, _Null_unspecified, and _Nonnull qualifiers on pointers, and exposes them through the ast api, i'm going to try to add them to translate-c

1589227800
ifreund
that is very cool

1589227822
Spex_guy
ifreund I'll add it to the issue about teaching LLVM to optimize async.

1589229953
tdeo


1589230153
tdeo
hmm, [*c] pointers should really be non-nullable

1589230220
ifreund
is that doable using these clang qualifiers?

1589230227
ifreund
that would honestly be amazing

1589230246
tdeo
i mean, [*c] being nullable makes it hard to do a lot with the clang qualifiers

1589230260
ifreund
right, I totally see that

1589230317
ifreund
my question is more as to the strength of the clang qualifiers (i'm not at all familiar)

1589230339
tdeo
the gcc qualifier only works on function pointers, but the clang qualifier works for any pointer

1589230346
tdeo
on function parameters*

1589230454
tdeo
and i guess another meaning of "strength" is what they do to codegen, which is nothing in the case of the clang qualifiers

1589230462
tdeo
unlike __attribute__((nonnull))

1589230473
tdeo
which makes calling that function with a null pointer UB

1589230495
tdeo
and your compiler can delete your null checks

1589231637
leeward
Did the auto-generated standard library docs move?

1589231787
dingenskirchen
no, the master branch build of it is just broken for reasons beyond my knowledge. more up to date would be the 0.6.0 version

1589231845
leeward
weird sauce

1589231883
leeward
maybe worth a bug report, a fix, or changing the link on

1589232024
leeward
Well, that didn't fix things. I'm porting a thing I wrote mid-0.5 to 0.6, and getting an error about  `'misc/bits/syscall.h' file not found`

1589232326
leeward
And indeed I don't see a misc/bits/syscall.h anywhere in my zig source.

1589232692
leeward
Ahah, there was some cruft left over from the 0.5 installation in my lib directory.

1589232758
leeward
Well that was easy.

