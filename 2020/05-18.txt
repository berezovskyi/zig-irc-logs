1589760039
daurnimator
andrewrk: hmmmm. you added errors but not error unions?

1589760058
daurnimator
andrewrk: also you broke the escaping :(

1589760068
andrewrk
how is that possible?

1589760080
daurnimator
error.@"foo\"bar"

1589760102
andrewrk
oh, you mean I didn't implement it correctly in the first place

1589760125
andrewrk
the other thing I noticed is that tagged unions don't get emitted correctly

1589760134
daurnimator
yeah sorry, I meant "you broke the invariant that you can't escape into invalid json without a custom trait"

1589760136
andrewrk
the tag is missing so you can't serialize/deserialize

1589760150
daurnimator
see the comment on the union thing

1589760168
daurnimator
`// try each of the union fields until we find one that matches`

1589760217
daurnimator
andrewrk: what I was working on last night:

1589760218
andrewrk
information is lost during serialisation

1589760333
andrewrk
anyway good point about error.@"foo\"bar"

1589760416
daurnimator
andrewrk: a serialisation can't infer what to use as the tag field; so if you need to emit the tag you'd have to implement a jsonStringify trait.

1589760430
daurnimator
I hope to have a jsonParse trait working soon

1589760440
andrewrk
if it's a tagged union, then the tag can be used as the tag

1589760480
daurnimator
?

1589760542
andrewrk
{"tag": "tag_name", "payload": ...}

1589760542
daurnimator
`struct { foo: union { .A = u32, .B = struct { x: u8, y: u8 } } }` -> serialise how?

1589760556
daurnimator
that's just inventing "tag" and "payload" as special fields

1589760576
daurnimator
which isn't going to interoperate with (m)any JSON documents out there

1589760595
andrewrk
ok I see what you were going for

1589760623
daurnimator
I added union support to express the common situation that you want to parse `{"foo": bool|number|object_with_key_bar}`

1589762369
pixelherodev
Wha'ts the ZLS change that was supposed to be here now? Local labels?

1589762370
pixelherodev
... oh wait

1589762376
pixelherodev
s/sm/ms

1589762379
pixelherodev
I did a dumb ignore me

1589762751
pixelherodev
... okay now I'm worried

1589762758
pixelherodev
local vars dno't seem to be workign with ZLS :(

1589762760
pixelherodev
gahh

1589762766
pixelherodev
s/no/on s/gn/ng

1589762970
pixelherodev
Ahhh okay, it doesn't recognize packages yet

1589762970
pixelherodev
patch time...

1589772189
pixelherodev
Okay, two patches to work on for ZLS: packages, and structures

1589772192
pixelherodev
instances*

1589773758
pixelherodev
To any ZLS folks: what's the easiest way to access debug output?

1589779506
pixelherodev
Hmm, I can actually skip a proper register allocator for now

1589779538
pixelherodev
Short-term, I can use a really simplistic "assign until we run out or are done" allocator

1589779554
pixelherodev
Which means more functionality with which to test a good allocator later on

1589789740
hooo
hi guys, I thought I'd share some criticism for zig here

1589789766
hooo
This: `std.debug.warn("hello world", .{});` is completely and utterly insane.

1589789801
torque
what is insane about it?

1589789816
hooo
you dont actually think that I want to write that giant line everytime I want to print something, right? I could somehow get behind the weird .{} syntax - potentially - but not the general verbosity

1589789857
torque
well, you could print "hi world" if you don't want to have to type so much

1589789879
hooo
kk, I'll wait until somebody more serious comes along

1589789913
daurnimator
hooo: what sort of answer are you looking for?

1589789923
daurnimator
"yes its not super easy to type"

1589789925
hooo
"yes sir, we are working to fix this for you asap"

1589789946
hooo
I state that with a bit of humor but yeah

1589789974
torque
you didn't really mention what you think should be fixed about it, and "it's too long" is far too generic a complaint to be particularly useful

1589789980
hooo
there are several indications that Zig is going to hard fail soon

1589789987
hooo
the tab issue is another objectively false stance

1589789996
bgiannan
`const warn = std.debug.warn;` there you go

1589790004
torque
you could bind the "warn" function to a shorter variable name as mentioned above

1589790010
daurnimator
I think I find the number of special characters it the annoying bit: periods, commas, parentheses and curly braces.... its too much

1589790060
daurnimator
I'm used to e.g. `print(asd)` in lua or `printf("%p\n", asd)` in C, which was already a bit too much.... and then zig's is longer

1589790158
daurnimator
even `console.log(asd)` in javascript is a bit much

1589790175
hooo
yes bgiannan, I know what it is. The point is that it's not the default and it has actually gotten worse over the lifetime of zig's project

1589790196
hooo
so clearly the project has no intention of going into the right direction

1589790204
daurnimator
I wonder if we can something like lua does with LUA_INIT and have some automatically injected piece of zig code in all scopes?

1589790245
daurnimator
ZIG_MAIN_PREFIX='usingnamespace @import("/home/daurnimator/.zigsnippet");`

1589790275
bgiannan
hooo, right like System.out.println stopped Java from being popular

1589790291
hooo
that was 20 years ago, that wouldn't fly anymore today

1589790303
torque
namespaces are a good thing, and you can opt-out of them trivially anyway

1589790305
bgiannan
if std.debug.warn being too long, and hard tabs are your only points against zig i think we're fine3

1589790327
hooo
no they arent my only points, they are canary in the coalmine

1589790350
bgiannan
so use something else?

1589790373
hooo
const one_plus_one: i32 = 1 + 1;

1589790373
hooo
warn("1 + 1 = {}\n", .{one_plus_one});

1589790387
hooo
why would I possibly have to wrap the variable in .{} before I can print it?

1589790409
hooo
The only reason why I even bring this up is because I'm not convinced that it will never get fixed

1589790419
hooo
it's so obviously wrong and insane but nobody sees it

1589790433
bgiannan
the .{} is fairly recent actually

1589790450
torque
why is it wrong and insane?

1589790450
hooo
now*

1589790454
bgiannan
i wasn't for it but i don't see it as a huge issue

1589790466
torque
you're throwing a lot of strong language around without any actual arguments?

1589790476
hooo
none of these things are huge issues, but put them all together and it makes it huge

1589790500
torque
while I agree that syntactically I think it's a bit clunky, semantically it makes a lot of sense

1589790571
torque
the language does not have variadic functions, so functions that must take an indeterminate number of arguments (e.g. a string formatting function) take a tuple as a structured collection of ordered arguments

1589790572
jhamren
almost my first time here, is it common with such rude persons as hooo?

1589790605
bgiannan
jhamren, it's not

1589790624
jhamren
alright, good

1589790627
jhamren
ty

1589790681
torque
this incidentally makes the edge-case scenario of no additional arguments (and therefore an empty tuple) stand out a bit more

1589790719
GreaseMonkey
an easy way to deal to the std.debug.warn thing is, well

1589790724
GreaseMonkey
const warn = std.debug.warn;

1589790743
GreaseMonkey
there we go, now you only need to type warn("Hello World!\n", .{});

1589790744
torque
note that the language is still under design and is open to reasonable, well-explained design suggestions, but hooting and hollering about it being insane and wrong isn't really going to change a lot of minds very effectively

1589790752
jhamren
isn't there a std.log proposal as well?

1589790903
torque
for example, it may be reasonable to suggest a vararg-like syntax at the call site that implicitly wraps arguments in a tuple (though this introduces its own complications for the definitions)

1589791486
alehander92
hooo, i think with modern ide-s

1589791495
alehander92
and autocompletion, having a bit longer code is not too bad

1589791509
alehander92
even if i also dislike depending on autocompletion

1589791546
alehander92
but e.g. python also did `a %s %d' % (a, b)`

1589791555
alehander92
look: a tuple for formatting

1589791568
alehander92
yeah, it uses `()` not `.{}` but not too different

1589791637
hooo
alehander92: that's always the same argument and it doesnt turn out to be true for endusers. I really dont want to write .{} instead of (). It may seem like a small thing but it all adds up

1589791707
alehander92
yeah, trust me, i dont like verbosity

1589791727
alehander92
but after all language consistency is much bigger in the whole picture

1589791740
GreaseMonkey
one of Python's biggest mistakes was its tuple syntax

1589791744
alehander92
now, if you just dont like `.{}` syntax, this means this should be changed in the whole language

1589791762
GreaseMonkey
seriously, i'd rather type .{} than deal with yet another case where something silently was a tuple without me noticing

1589794701
daurnimator
alehander92: I don't want to require the crutch of an IDE

1589794719
alehander92
well, i meant any editor with autocomplete

1589794724
alehander92
but i do agree

1589794853
jhamren
is there anything on the roadmap wrt editor support like autocompletion?

1589794877
jhamren
crutches or not, it will be popular

1589795022
alehander92
wouldn't you just have lsp support?

1589795074
jhamren
yeah, I assume so.

1589795878
dermetfan
daurnimator: Thanks for lua-http. We use it at work to configure a Jitsi server. Noticed I had seen your name before...

1589795911
daurnimator
dermetfan: it needs some love :(

1589795920
daurnimator
Have sort of lost interest in it lately

1589795998
dermetfan
Understandably when there's zig ;) We just do some simple requests with it so it's fine

1589796164
daurnimator
there's not a good windows story for it; I sort of hope zig might close that loop

1589796200
daurnimator
otherwise I learned that robust conection reuse is *hard*. so hard that no one has done it while keeping a fully featured client

1589796637
wilsonk
jhamren: zls has some autocompletion and it is probably the lsp that is furthest along

1589796689
daurnimator
dermetfan: still though; nice to be recognized; and thanks for the compliment

1589796698
jhamren
wilsonk: ah, i see, thanks

1589796904
alexnask
jhamren, I believe it is planned for the stage 2 compiler to eventually include a language server itself

1589796952
jhamren
understandably not a high prio thing, just curious and spoiled by Go.

1589796961
alexnask
I would use zls or zig-lsp for now

1589797007
alexnask
zls supports a lot of the basic completions, I will add "go to definition" today. Not sure how far along zig-lsp is

1589797183
jhamren
the basic things get you to like 80% of the way luckily.

1589798061
FireFox317
hooo, also if you just want to print something without formatting in the case of hello world, you can just make a different warn function that only takes a slice of bytes as input, such that you dont have to type the empty tuple.

1589799143
daurnimator
`pub fn p(x: var) void { std.debug.warn("{}\n", .{x}); }` seems like it could be useful

1589799210
mq32
daurnimator: my browser tells me that std.debug.warn is not a valid domain :(

1589799442
alexnask
.warn tld when?

1589799453
daurnimator
only costs 150K

1589801011
mq32


1589801018
mq32
I'm laughing waaay to hard at this site

1589801021
mq32
great satire

1589801049
ifreund
lol

1589801248
ifreund
just noticed the author names :D

1589801322
alexnask
wilsonk, any way you can check if it still crashes with

1589801402
alexnask
I think the other issue is also fixed by it. At least `panic` specifically completes fine for me

1589802151
alexnask
(nvm misread the second issue, I didnt know about `;` deleting the snippets in other language servers, I will look into it)

1589803433
daurnimator
so... you know how I was saying how complex http headers are when you try and be robust?

1589803435
daurnimator


1589803448
daurnimator
alexnask: ^ bad news...

1589803541
joepie91
mq32: you call it satire, I call it something I have genuinely seen people expect... :(

1589803550
joepie91


1589804120
alexnask
daurnimator, What a treat /s

1589804154
daurnimator
and have I mentioned how the spec is different per http version?

1589804175
daurnimator
so do we want content-length semantics for http 0.9, 1.0, 1.1, 2.0 or 3?

1589804294
alexnask
Im happy I've never had to know the difference :D

1589804538
daurnimator
alexnask: so.... what do we implement for ZLS?

1589804581
alexnask
I'm guessing most if not all clients do HTTP/1.1 style (?)

1589804590
alexnask
I'll have to look at some other servers and see what they do

1589804594
alexnask
Like clangd or something

1589805077
daurnimator
I'm going to guess the answer is incorrectly

1589805122
alexnask
lol

1589806527
bitmapper
so i found sorta a way to get zig to work with llvm 10 on macos?

1589806537
bitmapper
you need to link with libPolly and libPollyISL in llvm

1589809017
jhamren
bitmapper: I think that issue is already in the setup instructions, albeit abit hidden

1589809026
bitmapper
yeah it's mentioned

1589809275
pixelherodev
alexnask: Is it worth trying out your PR + vexu's Zig patch in current state and providing more feedback? Or should I wait until it's finished?

1589809319
pixelherodev
daurnimator: if everyone does it the same way, then arguably it's the spec that's incorrect

1589809338
pixelherodev
If everyone agrees on HTTP/1.1, but the spec says "use whatever," the spec's in the wrong IMO

1589809340
alexnask
It's missing some of the newest features and fixes. It doesn't improve much from a user's standpoint except for a couple of completions that dont trigger on master

1589809354
pixelherodev
Yeah, which I think I'm missing :(

1589809373
pixelherodev
Probably worth waiting though

1589809380
alexnask
It wont fix stuff like the allocator example you gave earlier (looking into this specific case now)

1589809407
pixelherodev
The biggest issue I have right now is accessing fields of a generic type

1589809408
daurnimator
pixelherodev: its more a problem with a slowly diverging spec

1589809415
alexnask
It will just correctly trigger for stuff like `functionCall().`

1589809431
pixelherodev
... it doesn't for me

1589809450
daurnimator
pixelherodev: language server A may work with LSP clients X and Y, but not Z. while language server B may work with LSP clients Y and Z, but not X

1589809451
alexnask
I mean with the PR (and for functions with supported return types)

1589809465
pixelherodev
Ahh, yeah

1589809468
pixelherodev
With the PR :)

1589809477
pixelherodev
Define "supported return type?"

1589809481
pixelherodev
Does `type` count?

1589809481
alexnask
pixelherodev, Yes generic types aren't supported atm this is definitely a priority item on my todo list

1589809488
pixelherodev
:( gotcha

1589809491
daurnimator
pixelherodev: and yeah: I asked for clarification in the spec... and they closed the issue

1589809493
pixelherodev
Thanks :)

1589809496
pixelherodev
daurnimator: yeah I saw

1589809499
pixelherodev
That was ridiculous

1589809502
alexnask
No, types that would trigger completions if you did `someVar: TheType` now

1589809514
alexnask
(with `someVar.`)

1589809554
pixelherodev
I appreciate all the work you've put into it, ZLS is awesome :)

1589809592
alexnask
I will be working on go to definition today then will tackle at least the simplest form of generic stuff (like functions with single return statements that return types)

1589809628
alehander92
sounds interesting

1589809642
alehander92
how do you guys limit compilation time : hardcoded instruction limit or?

1589809645
alexnask
Obviously if you switch over comptime parameters, do some calculation and decide to return a type this way I wont really be able to help you without making a compiler :P

1589809666
alehander92
sorry if all those are answered in the manual, i am maybe too chatty these days

1589809688
alexnask
alehander92, The compiler has a limit on branches on any given comptime calculation

1589809697
alehander92
ok, can i change it

1589809706
alehander92
and what happens if it e.g. changes between versions

1589809715
alexnask
You can request more with the @setEvalBranchQuota builtin

1589809724
alehander92
ah

1589809725
alehander92
thanks

1589809741
alehander92
so do you have like a repl based on the interpreter?

1589809751
daurnimator
no

1589809954
pixelherodev
FTFY s/no/not yet

1589809956
pixelherodev
:)

1589809972
daurnimator
s/not yet/not anymore/

1589809981
daurnimator
jimmi wrote one at one point

1589809984
daurnimator
IIRC

1589810012
pixelherodev
Huh

1589810016
pixelherodev
Also not yet :P

1589810080
pixelherodev
Okays, time to finish hello world with Thor and then get back to work on Zig stage2...

1589810139
pixelherodev
Ohhh, I see what was going on in insert mode

1589810144
alehander92
huh interesting

1589810162
pixelherodev
Errors aren't showing up because ZLS isn't processing changes the way it does new documents

1589810167
alehander92
yeah, maybe a low-level-code-running repl is more useful

1589810169
pixelherodev
So it works if I close and reopen, but not as I type

1589810183
daurnimator
alehander92: you might call e.g. gdb that.

1589810199
alehander92
yeah i just read about swift llvm + repl

1589810207
alehander92
but i dont see how: i am trying to imagine for nim

1589810243
alehander92
but how to add a custom function

1589810252
alehander92
except for reloading a dll etc

1589810254
daurnimator
alehander92: sorry I might be missing context: what are you talking/asking about?

1589810270
alehander92
about using gdb as a repl-like tool for languages like zig, nim, c

1589810297
daurnimator
theres a few ways to go about that

1589810299
alehander92
it's easy to call/manipulate, achievable to interpret other manipulations

1589810306
daurnimator
the first thing to note is that gdb is very scriptable with python

1589810313
daurnimator
so you can essentially "do anything"

1589810315
alehander92
yes, my job consists of that :D

1589810324
daurnimator
now... that's probably not what you want to do for

1589810345
daurnimator
in a debugger like gdb it's more practical to think in terms of what's inside of artifacts (e.g. ELF files)

1589810352
daurnimator
--> you can call and introspect symbols in ELF files

1589810367
alehander92
ok.

1589810388
daurnimator
so if you want to compile a snippet on the fly: you'll need to compile it to an ELF file, and then make the symbols available from it available in the interpreter

1589810428
alehander92
smart

1589810437
alehander92
so in this case there is another problem

1589810442
alehander92
you want to redefine `a`

1589810446
alehander92
and `b` is calling `a`

1589810456
daurnimator
note: I just made everything up just then off the top of my head. I'm not talking from experience here

1589810466
alehander92
so you need to change somehow the reference in `b`'s instructions

1589810483
alehander92
of course another option is to maybe nop-pad

1589810485
alehander92
all functions

1589810494
alehander92
and basically replace the existing definition

1589810501
alehander92
if there is enough place

1589810512
daurnimator
couple of possible ideas: 1. maybe gdb does some magic symbol search path thing. 2. use the GOT. 3. always go via symbol table?

1589810563
alehander92
hm, maybe GOT is a good option

1589810567
alehander92
but replacing the function directly seems also ok to me

1589810574
alehander92
for many cases

1589810627
alehander92
basically you need to maintain a dependence tree of that stuff tho, so you know what to update each time

1589810657
daurnimator
and now we're getting into the territory of how the new zig incremental compiler works

1589810660
daurnimator
:)

1589810664
daurnimator
all roads lead to rome?

1589810666
daurnimator
or something.....

1589810673
alehander92
in nim what people did was compiling most code to different `.so`-s and adding something like a trampoline(? terminology) between changeable definitions

1589810684
alehander92
so one can do hot code reloading and on theory repl based on that

1589810694
alehander92
but i wondered if the debugger approach can somehow simplify that

1589810705
daurnimator
alehander92: maybe watch some of andrew's recent streams?

1589810727
alehander92
yeah, i planned to do that

1589810752
pixelherodev
Yeah, incremental compilation is nice

1589810752
alehander92
i need to learn more about `got`, `elf` anyway: thanks for the pointers

1589810758
pixelherodev
0xDEADBEEF

1589810762
pixelherodev
0x948FA8E8

1589810772
pixelherodev
0xA8FC6A011

1589810774
pixelherodev
(sorry)

1589810788
alehander92
yeah but

1589810820
alehander92
because i am thinking of adding IC/parallel to a toy compiler of mine, i wondered about repl: and i feel its mixing stuff a bit

1589810837
alehander92
as you need to combine CT caching with RT info caching/state there

1589810842
alehander92
which is not obvious

1589810848
daurnimator
one thing I've been meaning to investigate in the area is dwarf abuse

1589810849
pixelherodev
That's what incremental compilation needs to do too

1589810863
alehander92
well, it doesn't really care for runtime state, does it

1589810863
daurnimator
IIRC the dwarf format is a turing complete VM

1589810888
pixelherodev
RT state is left alone in the ELF, true

1589810889
alehander92
you can run it in a loop, so you can easily update stuff, but you start the newcompiled program with fresh state each time

1589810897
daurnimator
==> you can probably compile compile-time functions into DWARF so that you can just run them in a debugger

1589810898
pixelherodev
not necessarily

1589810914
pixelherodev
One goal is to update the binary while it's running

1589810923
alehander92
yeah, hot code reloading

1589810927
pixelherodev
e.g. pause the executable, perform incremental compilation and override memory

1589810935
daurnimator
pixelherodev: that's not even possible with W^X is it?

1589810941
alehander92
but yeah, would this work

1589810946
pixelherodev
... W^X?

1589810967
daurnimator


1589810996
alehander92
daurnimator hmm

1589811007
pixelherodev
AHh, that's true, yeah

1589811019
pixelherodev
There are solutions though

1589811027
daurnimator
alehander92: compile-time code => functions that run at compile time (in C this would be macros)

1589811046
pixelherodev
daurnimator: would probably have to attach to the binary the way GDB does

1589811055
pixelherodev
Not sure how GDB does it, but it proves that it's possible

1589811066
daurnimator
pixelherodev: ptrace

1589811074
pixelherodev
GDB can also modify the program though

1589811090
pixelherodev
You can e.g. update variables and suc - oh right

1589811096
pixelherodev
That's in the

1589811098
pixelherodev
Not write-protected

1589811114
pixelherodev
One option would be to map in new code sections and unmap old ones?

1589811129
daurnimator
yep. that's called dlclose/dlopen ;)

1589811132
alehander92
daurnimator sorry!

1589811134
pixelherodev
Not quite what I meant

1589811143
pixelherodev
I mean, similar concept, yeah

1589811151
daurnimator
pixelherodev: why not? that's how I've done "hot code reloading" in C before

1589811152
alehander92
but how would this work , like thiose functions are using an interpreter

1589811154
pixelherodev
But I mean that we could just disable W^X

1589811164
pixelherodev
daurnimator: because an easier option is available?

1589811167
alexnask
`one thing I've been meaning to investigate in the area is dwarf abuse` this sounds so funny without context

1589811170
daurnimator
pixelherodev: it's not something you can disable. at least not easily (e.g. with a single process)

1589811187
pixelherodev
... I mean, I basically do that for my JITs

1589811196
alehander92
hm, guys, you write JITs

1589811215
pixelherodev
The idea being that you store the code as data, MAP in executable | writable pages, copy the "data" to that section, jump in

1589811245
pixelherodev
It'd require a custom start() function, and the equivalent using linksection(".codeasdata") with a custom linker script

1589811252
pixelherodev
alehander92: I do :)

1589811261
daurnimator
pixelherodev: I'm not 100% sure if it works, but you'd mremap a page to writable; edit it; then mremap it back to executable. however you have to be 100% sure you're not currently executing that page

1589811276
daurnimator
(if that doesn't work; then I at least know you can unmap and then map in new memory)

1589811280
pixelherodev
Right, suspending the process is the tricky part

1589811290
pixelherodev
What I'm suggesting is a bit different though

1589811299
pixelherodev
Instead of remapping pages, you map them in

1589811318
daurnimator
that's just being a dynamic linker :p

1589811319
pixelherodev
That is, you have the

1589811329
pixelherodev
Yeah, basically

1589811353
alehander92
ok guys, but isn't it easier to  just use reloading shared objects

1589811358
pixelherodev
Yeah, easier, sure

1589811360
alehander92
automatically behind the scenes

1589811371
pixelherodev
Depends

1589811375
pixelherodev
That would unload data too

1589811388
pixelherodev
The idea here is to preserve data while running

1589811393
alehander92
because i'd love to replace binaries dynamically , sounds fun, but obviously also with traps

1589811419
daurnimator
indeed

1589811427
pixelherodev
I mean, you could probably use incremental compilation to a SO with a thin wrapper, but that's the kind of hot reloading that requires careful work to maintain runtime data

1589811428
alehander92
well this depends on how you implement it

1589811428
daurnimator
and you might want to read the musl posts on the idea

1589811444
pixelherodev
I'm trying to devise a way to maintain runtime data autonomously as part of the hot swapping process

1589811445
daurnimator
musl purpossefully doesn't implement dlclose because the semantics are icky/impossible

1589811454
pixelherodev
True

1589811462
pixelherodev
But glibc is, unfortunately, the norm right now

1589811483
pixelherodev
Plus we need to be able to support other OSes, which might have unknown or undefined semantics

1589811486
pixelherodev
We can't depend on host behavior

1589811510
daurnimator
?

1589811521
daurnimator
it doesn't matter if dlclose is a no-op though

1589811528
daurnimator
it just means you waste memory keeping dead code around

1589811603
alehander92
ok, why don't you use llvm's jit btw?

1589811615
alehander92
this is literally another of the ideas for our nim repl

1589811624
pixelherodev
Because we don't want to depend on LLVM

1589811629
alehander92
ah

1589811632
pixelherodev
We're working towards removing it as a dependency

1589811635
pixelherodev
Also, not gonna lie

1589811638
pixelherodev
LLVM kinda sucks

1589811640
alehander92
yeah

1589811644
alehander92
i mean its a big dependency

1589811650
alehander92
but it does give you cool stuff, right

1589811650
pixelherodev
I'm working on an alternate LLVM backend

1589811651
pixelherodev
But still

1589811667
daurnimator
pixelherodev: that's not entirely true

1589811669
pixelherodev
I hope to be able to use my LLVM parser and transformer as an input to my JIT

1589811674
alehander92
i thouight you would need your own fast to compile debugging backend

1589811676
daurnimator
alehander92: we're not removing LLVM at all

1589811678
alehander92
and llvm for releases?

1589811686
pixelherodev
We're working towards removing it as a

1589811689
pixelherodev
For stage2

1589811691
alehander92
yeah, exactly

1589811693
pixelherodev
?

1589811702
pixelherodev
I mean, it's probably always going to be a stage1 dependency

1589811714
pixelherodev
And it's potentially going to be an optional dependency for stage2

1589811716
daurnimator
yeah; that's better: LLVM is going to be an

1589811730
pixelherodev
Which means we don't really

1589811736
daurnimator
which isn't at all a reason to not make e.g. LLVM's JIT an optional dependency

1589811748
fengb
It’s still gonna be our optimizing backend for the foreseeable future

1589811774
alehander92
what about cranelift?

1589811802
daurnimator
for now, it's really just what people want to work on

1589811818
daurnimator
andrew is working on a debug-friendly incremental compiler.

1589811844
daurnimator
if anyone was to step up and say "I know GIMPLE; I'm going to write a GCC zig backend" we'd certainly help them out where we could

1589811950
pixelherodev
I'm working on a self-hosted Zig backend separate from stage2

1589812006
fengb
It might be easier to have a C backend and pump that through GCC :P

1589812037
pixelherodev
Not really

1589812040
pixelherodev
Well, not for me

1589812053
pixelherodev
Ohhh, you mean then a GCC frontend?

1589812056
pixelherodev
Yeah, probably lol

1589812072
pixelherodev
Heck, I could probably write a crappy C backend in a matter of days if I really wanted to

1589812083
pixelherodev
The hard part would be to ensure that semantics are 100% correct

1589812094
pixelherodev
and it'd be hellishly inefficient

1589812103
pixelherodev
I find that writing backends is actually quite simpmle

1589812108
pixelherodev
s/simpmle/simple

1589812115
pixelherodev
Writing

1589812119
alehander92
interesting

1589812126
alehander92
i can write a backend for fun

1589812149
alehander92
backend to .. javascript

1589812154
pixelherodev
Anyways, I'mma get back to work now

1589812155
alehander92
targetting*

1589814551
pmwhite
So, with ZLS in kakoune (though probably more general than that editor), when I type "std." I get an autocomplete list as expected. If I start typing one of the entries, say "ascii", then the entry itself actually disappears from the list of entries, even though it ought to be one of the only ones. Has anyone else experienced this?

1589815962
r4pr0n
pmwhite: are you using latest master?

1589816380
alexnask
^

1589817179
plumm
pmwhite not sure if you saw but theres a pr to fix that

1589818096
pmwhite
As of mid-yesterday I was using master.

1589818123
mq32
pmwhite: that is sadly not helpful wit ZLS

1589818126
mq32
those guys are an fire!

1589818151
r4pr0n
pmwhite: try to pull current master, that will most likely fix it

1589818190
pmwhite
plumm: I followed the repo on GitHub yesterday, so I am aware of that lol. I didn't see a PR for that specifically, so i must have missed it

1589818203
plumm
It was discussed in discord and posted there

1589818213
r4pr0n
yeah it was merged on the course of a minute

1589818251
plumm
O dam

1589818255
pmwhite
Ah, well done folks

1589820089
pmwhite
What is the deal with the snippets? Doesn't look like kak-lsp recognizes them by default

1589820358
ifreund
pmwhite: you can disable them by making a zls.json file with the right keys

1589820403
pmwhite
Yah, I know, but I kind of want to use them if I can.

1589820431
pmwhite
I guess this isn't the right place to ask though.

1589820880
alexnask
I dont really know which clients support them, they should probably be off by default

1589820921
alexnask
The ${N} things are tab stops, you can tab through them in editors that support them

1589821435
greenfork
pmwhite, do you have by chance the config for your kakoune? I'm not sure I can set it up with zls myself, could use an example

1589821547
ifreund
greenfork: this is all it took for me

1589821574
ifreund
plus adding zig to the list of filetypes for which kak-lsp is loaded

1589821592
greenfork
ifreund, thanks a lot, I think I can figure it out from here

1589821631
pmwhite
Yup, same. Also, I have been manually running :lsp-enable to turn it on. You can probably do something more automatic though

1589821700
ifreund
i use a hook based on filetype

1589822159
r4pr0n
btw alexnask , are you currently implementing gotodefinition or why is your dev branch called like that?

1589822187
alexnask
I was finishing off a zig PR, I will start goto definition soon yeah :)

1589822338
r4pr0n
that's great! thanks for all your and superaugustes work on zls, it's great to see you progressing so fast 😄

1589822354
ifreund
yeah yall are crazy

1589822412
andrewrk
:D

1589822420
andrewrk
can't wait to try this

1589822431
pixelherodev
Yeah it's awesome

1589823256
r4pr0n
does anyone know of a library for zig comparable to this rust crate?

1589823573
andrewrk
I don't think there is one yet

1589823749
mq32
i have interest in such a library as well

1589823755
mq32
r4pr0n, what's your main OS?

1589823838
r4pr0n
linux

1589823912
mq32
damn

1589823915
mq32
i'm on linux as well

1589823929
mq32
but we have code for the Known Folders for windows as well

1589823943
pixelherodev
It should be straightforward to port such a library from e.g. C

1589823948
r4pr0n
yeah

1589823949
pixelherodev
There's a single header library for C that does that IIRC

1589823995
r4pr0n
what might be interesting is a possibility to use the xdg part also on macos since afaik most cli applications use xdg on macos and gui applications use the other ones

1589824017
mq32
hm, care to join forces?

1589824089
r4pr0n
yeah, we can do that

1589824183
mq32
i'm a bit busy now, but will be back later, i'll PM you

1589824217
r4pr0n
ok but i'm not in the us so it's 7pm for me right now, i might not be there in a few hours

1589824220
pixelherodev
Nooo, don't take it to PMs! We need to know every bit of progress! :P

1589824271
r4pr0n
ok, will post full diffs of every commit in here :P

1589824274
Akuli
one thing to keep in mind: directory names can be translated if the system is not english

1589824286
Akuli
for example, i have no ~/Music/ but i have ~/Musiikki/

1589824315
alexnask
On windows the translated system paths are valid but so are the english names

1589824363
nycex
there is a place where you set those locations thought Akuli

1589824371
nycex
either it was an env variable or an file iirc

1589824384
pixelherodev
r4pr0n: perfect!

1589824451
mq32
r4pr0n: it's 8pm here, you have one hour more than i do :D

1589824496
mq32
Akuli: good point! But note that for example windows has an API to query the location of ".Music"

1589824513
r4pr0n
oh well, I just thought it would be like 2pm or something for you so later would be your evening when i'm sleeping but that would be ok then i guess

1589824520
mq32
for linux, there's the XDG spec

1589824549
mq32
i just stopped working and want to play soe minecraft and watch videos, will be back in an hour or so

1589824553
Akuli
yeah, my point was that you should use api or read spec instead of hard-coding ~/Music/

1589824560
mq32
yeah sure

1589824583
mq32
but thanks Akuli for that thing, i'll set up a Ubuntu and Manjaro VM in German and $OtherLanguage to verify this

1589825630
BaroqueLarouche
Just created a task to track PE link in  stage 2:

1589825715
BaroqueLarouche
Since I never done any of this stuff, I found that it's better that I rewrite coff.zig from scratch so I understand the format better

1589825986
pixelherodev
That makes sense

1589825996
pixelherodev
That's basically how I learned x86 codegen

1589826005
pixelherodev
I've now written about three different backends lol

1589826027
pixelherodev
Only one of them can be found anywhere on the internet

1589826027
BaroqueLarouche
pixelherodev:  lol

1589826047
pixelherodev
The other two are... well, let's just say that if I released those I'd be embarassed to ever show my face in public again xD

1589826131
pixelherodev
tdeo: `request failed: Post "

1589826133
pixelherodev
:(

1589826546
tdeo
#ircdiscord :p

1589826562
tdeo
that's a bug in the library i'm using probably though

1589826703
pixelherodev
Oh right there's an actual channel!

1589831823
mq32
why must some youtube videos be longer than you wwant? :D

1589831925
mq32
also started reading about the standard directory stuff

1589832129
r4pr0n
uh yeah i'm there

1589832207
mq32
i looked at the rust crate a bit

1589832229
mq32
i think we pretty much need an API consisting of two things only:

1589832234
mq32
an enumeration SpecialFolder

1589832236
mq32
and a function

1589832255
pixelherodev
Ooh, or

1589832256
mq32
fn get(*std.mem.Allocator, folder: SpecialFolder ) ![]const u8

1589832271
r4pr0n
yeah sounds good

1589832272
pixelherodev
`comptime val: enum_literal` (if (std.mem.eql(u8, @name(val))`

1589832279
r4pr0n
you wanna talk about it in pm though?

1589832282
pixelherodev
s/val/folder/g

1589832321
r4pr0n
pixelherodev: oh you actually want us talk about it here?

1589832325
mq32
yeah, will probably spam the holw channel otherwise :D

1589832326
r4pr0n
thought you were ironic

1589832328
pixelherodev
I mean, yeah?

1589832330
pixelherodev
Why not?

1589832334
pixelherodev
I was joking, but also serious

1589832362
r4pr0n
is it possible to make a three-people-chat in irc somehow?

1589832366
mq32
sure

1589832371
pixelherodev
Wait really? sure

1589832376
mq32
/join #zig-specialfolder

1589832380
pixelherodev
Ah that's true :P

1589832384
pixelherodev
Or

1589832388
pixelherodev
/join #zigsf

1589832388
mq32
IRC is ad-hoc

1589832393
pixelherodev
:P

1589832400
mq32
first channel it is. period.

1589832400
r4pr0n
yeah, of course,

1589832407
r4pr0n
well then lets go to mq32s channel

1589832417
pixelherodev
mq32: yeah :P

1589832421
pixelherodev
I was joking

1589835094
alexnask
wilsonk, About the ';' completion thing, which server does this? I need to take a look to see what they do, can't find anything relevant in docs

1589835379
pixelherodev
; completion?

1589835451
alexnask
Bad phrasing but they know what I mean :D Apparently some other servers will let you tab in a function snippet then immediately typing ';' will delete the snippet

1589837495
foobles
i really gotta get back working on the compiler :/

1589837501
foobles
feels bad not doing anythnig in a while

1589837536
foobles
i suppose i have got to get wsl set up, or maybe i should just focus on other issues for a  while >_>

1589837556
alexnask
Plenty of stdlib stuff to do too if ir.cpp is a bit much atm :D

1589837629
foobles
yeah that could be a fun distraction for a bit!

1589837632
foobles
good suggestion

1589837673
foobles
hmm i wonder if I could do something really evil, to find the assertion error.

1589837696
foobles
undo the import of stdassert.h, and define my own assert macro

1589837703
foobles
that prints out line numbre and file name

1589837713
alexnask
that could work for sure

1589837723
alexnask
You dont even need to remove the include

1589837728
alexnask
Just redefine it

1589837732
alexnask
C preprocessor ftw /s

1589837737
foobles
:DDDDDDDD

1589838938
andrewrk


1589839085
squeek502_
very cool

1589839213
andrewrk
I'll run it on my personal machine for a week or so to babysit it, then I'll move it to a vps

1589839275
alexnask
"ok fine I'll use actual commas" :(

1589839307
ikskuh
btw, there's a new player in town!

1589839317
ikskuh
new team on github for community library projects

1589839317
ikskuh


1589839325
andrewrk
neat

1589839328
ikskuh
similar to the zigtools org, but for libraries

1589839347
ikskuh
ping me, nycex or r4pr0n if you wanna join and do community library efforts there

1589839357
alexnask
👍

1589839365
pixelherodev
"ok fine I'll use actual commas" lol

1589839519
andrewrk
alright so what else should we track? std lib tests probably

1589839542
andrewrk
the self-hosted compiler of course

1589839574
andrewrk
oh, the crypto algorithms

1589839591
andrewrk
json parsing and serializing

1589839621
andrewrk
it's pretty easy to write a benchmark with this framework:

1589839672
pixelherodev
I was about to look

1589839675
pixelherodev
then I yelled at myself

1589839677
pixelherodev


1589839679
pixelherodev
No more distractions

1589839683
pixelherodev
I just wasted like two hours :(

1589839735
fengb
Will this test compile speed or runtime speed?

1589839773
andrewrk
it'll test whatever you put inside the run() function

1589839799
ikskuh
zig submodule add

1589839805
ikskuh
andrewrk, why doesn't this owrk?! :D

1589839822
ikskuh


1589839840
andrewrk
fengb, if you want to use it to test compile speed, then you would execute a child proecss in the run() function

1589839864
andrewrk
which you can see in this benchmark:

1589840048
fengb
An neat

1589840055
fengb
I can't tipe

