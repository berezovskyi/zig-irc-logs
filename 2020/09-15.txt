1600129572
andrewrk
thanks I'll take a look

1600129597
andrewrk
I might need to strategically merge it with the monster that is #6250

1600129713
pixelherodev
That's fine

1600136833
mkchan
is there a linear algebra library for zig? something like numpy or openblas for neural network related stuff

1600140375
andrewrk
mkchan, I'm not aware of one

1600140894
justin_smith
blas is usually fortran exposing a c api anyway, shouldn't be any worse to use from fennel than c

1600140903
justin_smith
err, from zig, sleepy brain

1600141026
justin_smith
50% fortran, 25% assembly

1600153790
ikskuh
hello people!

1600154216
andrewrk
hi ikskuh

1600154295
ikskuh
huh

1600154312
ikskuh
referencing stuff in a package will yield two spurious compiler errors in std.debug.???

1600154420
ikskuh
the hell

1600154524
ikskuh
refercing a structure from the package will yield the following error log:

1600154536
ikskuh
copying the struct verbatim into my code and using that definition: no error message

1600154582
ikskuh
any idea what can cause this, andrewrk?

1600154625
andrewrk
not off the top of my head

1600154629
andrewrk
it's also late

1600154652
andrewrk
so my brain is not so sharp at the moment

1600154694
ikskuh
heh, okay

1600154703
ikskuh
i have no idea how to make an issue for that …

1600154708
ikskuh
i need to track it down further

1600154711
ikskuh
and make it smaller

1600155382
ikskuh
ooof

1600155389
ikskuh
i cannot get a repro on smaller scale :(

1600155534
andrewrk
this bug sounds really frustrating

1600155741
ikskuh
yep

1600155754
ikskuh
tried to make a minimal repro, didn't happen…

1600155860
ikskuh
i might have found it! \o/

1600155888
ikskuh
yep, found it

1600155902
ikskuh
the behaviour is weird, but at least i can now explain what happens:

1600155917
ikskuh
i included all modules via _ = @import("bla.zig") in my library root

1600155967
ikskuh
this forces something into existence which uses std.debug.print

1600156007
ikskuh
now i made that part dependent of tests (if(std.builtin.is_test) { _ = @import("..."); })

1600156015
ikskuh
which removes the unwanted forced references

1600156531
ikskuh
ah i found the culprit!

1600156669
ikskuh


1600160279
ikskuh
ha, it works!

1600160283
ikskuh
it finally works

1600162184
KoljaKube
What's the equivalent of a *c_void in Zig?

1600162601
ifreund
usize

1600162668
KoljaKube
So, @ptrToInt-ing the original pointer?

1600162765
ifreund
yeah

1600162776
ifreund
though there may be more idiomatic ways to do what you want to do

1600162827
KoljaKube
Now that you mention it, I might have seen usize used that way somewhere before... But I think it's a little weird

1600162878
KoljaKube
Well, I need to store a list of `fn Something(comptime foo: Foo) type`s

1600162921
KoljaKube
Or rather the function call results, so structs

1600165163
ifreund
well at comptime you may be able to just ducktype it

1600187638
ifreund
looks like someone posted a link to the statement on zen to lobsters

1600187660
betawaffle
and hackernews

1600188420
ifreund
oh it's on the front page there, neat

1600190262
bfredl
the only feature zen adds is mandatory payment?

1600190406
ifreund
apperently they've added some OOP antifeatures as well, but yeah that's the main one

1600191223
betawaffle
the behavior of the zen people just seems bizarre to me

1600191356
bfredl
people is driven by the weirdest of motives

1600191429
leeward
The ducks are failing me. Link?

1600191566
ifreund
leeward: the statement is here:

1600191589
leeward
thanks

1600191597
ifreund
there are also links with comments on the front pages of hacker news/lobsters

1600191602
marler8997
hey, when I build on my 64-bit linux NixOS linux machine, the elf interpreter is set to the correct one in the nix store, but when I set an x86-64-linux-gnu target, I get an absolute path interpreter that doesn't exist on NixOS?

1600191622
leeward
WTF?

1600191631
marler8997
yeah anyone heard of this?

1600191850
leeward
Non-compete clauses in employment contracts are...controversial. Depending on jurisdiction, also sometimes illegal.

1600191863
leeward
Sorry marler8997, I was responding to the Zen thing. I don't know anything about NixOS.

1600191894
marler8997
oh ok, well I'll creating a reproducible issue

1600192338
marler8997
As I'm filling out this issue, I have a feeling that there is no solution to this

1600192363
marler8997
I think the linker is setting the interpreter to /lib64/ld-linux-x86-64.so.2, because that is the most common one it can set...

1600192676
leeward
I have noticed some hard coded paths in llvm. I wonder if you're bumping up against one of those.

1600193176
andrewrk
marler8997, I can explain this

1600193190
marler8997
...

1600193193
andrewrk
there's no bug here, this is an advanced feature of zig working well for you

1600193215
andrewrk
when you compile for the native OS, zig figures out what your dynamic linker is, even if it's a weird one like on nixos

1600193246
andrewrk
when you cross compile, zig has to pick by default the "standard" dynamic linker path. if you want it to work on nixos then you have to override with the --dynamic-linker option

1600193260
marler8997
right I understand that

1600193271
marler8997


1600193299
marler8997
> I understand that a fix for this issue might prove difficult. There's no way to set an absolute path to a loader that will work on all distributions. The only fix I can think of is to never use an ELF interpreter. We we need dynamic libraries, we could compile the loader into the final executable...or maybe a better solution would be to include startup code that looks for the system loader that works on as many distributions as we

1600193300
marler8997
can support.

1600193321
andrewrk
ah I see you're trying to come up with an innovative solution to this. cool!

1600193337
andrewrk
I just wanted to make it clear that the behavior is working as designed so far

1600193351
marler8997
well I'm glad you confirmed what I thought it was

1600193368
marler8997
I did have to think about it for a bit before I realized that's what it was

1600193371
andrewrk
it is pretty neat how zig figures out the native dynamic linker path though right? that's a "just works" experience on nixos

1600193389
marler8997
yeah...how does it do that?

1600193416
andrewrk
zig actually looks at its own dynamic linker to figure it out :D and if zig itself is statically linked then it looks at /usr/bin/env (which is highly portable because it's commonly used in shebang lines)

1600193419
marler8997
off the top of my head, I would try to go up my process tree and find the first ELF that uses it

1600193440
andrewrk
ooh going up the process tree is a neat idea

1600193471
marler8997
ooo, gotta run, thanks for the explanations though

1600193481
andrewrk
I think this issue is related to the one for video games that work on multiple distributions

1600193483
marler8997
I'm running into issues with illegal instructino because of unaligned access

1600193487
andrewrk
e.g. loading graphs drivers

1600193502
marler8997
I was thinking of using the generic target to see if that would make the final exe more lenient on unaligned access

1600193517
marler8997
(compiling the doom source code, thinking about porting it to Zig for fun)

1600199855
andrewrk
it would be interesting to try to get `zig translate-c` able to do it :)

1600199860
andrewrk
I think it's mostly there

1600200431
marler8997
would be a cool test case, of course, I'd still do the port by hand for educational purposes

1600204090
Barabas
Why does `struct{ usingnamespace OtherStruct }` not 'use'/transplant the fields of `OtherStruct` in the new struct?

1600204315
ifreund
why should it? fields are not decls

1600204348
ifreund
usingnamespace only "transplants" public decls

1600204450
Barabas
Ok, yeah that makes sense. Too bad.

1600204508
ifreund
not sure i agree on the "too bad," that sounds like it would get very confusing

1600204522
Barabas
Well, too bad that my idea didn't work out.

1600204542
ifreund
if you want to include all the fields of another struct in your struct just add it as a field

1600204543
Barabas
I thought I could inherit the fields that way.

1600204604
Barabas
Yes, but that struct is passed to another class which does a struct -> structure of arrays conversion and that only happens for the top level fields.

1600204630
ifreund
sounds complicated :D

1600204747
Barabas
It's this one

1600204830
Barabas
(I wanted to build a hashmap which can have more than one value tied to the key on top of that)

1600208188
Barabas
I rolled my own solution and it works. I'm actually surprised. It both feels very hacky and kinda cool that it's relatively easy in Zig to do these things.

1600209321
andrewrk
:)

1600212750
yorickpeterse
andrewrk: what are you using for presenting the Zig API docs? Is it something custom built?

1600212785
andrewrk
yorickpeterse, are you referring to

1600212812
yorickpeterse
The latter

1600212823
andrewrk
I'm using this really nice framework called VanillaJS:

1600212828
yorickpeterse
It looks like it's loosely based on the documentation template Rust/Cargo uses

1600212831
yorickpeterse
heh

1600212888
yorickpeterse
Vanilla.js looks a little too 2010 though, you really need to use Reason, React, and Vue to get those stonks

1600212894
andrewrk
lol

1600212901
andrewrk
source is here:

1600212909
yorickpeterse
In all seriousness, did you ever consider Sphinx? I'm considering using it myself for generating some API docs, but it's been like 10 years since I last used it

1600212912
yorickpeterse
Ah thanks

1600212943
andrewrk
for our case I think a custom made code is the right tool for the job

1600212973
yorickpeterse
Ah gotcha, thanks :)

1600213006
andrewrk
part of the role that zig plays is to help your toolchain have fewer dependencies so that your projects are more portable

1600213019
andrewrk
so it helps when zig itself doesn't depend on too many third party projects

1600213045
yorickpeterse
Yeah that makes sense, which is why I'm a bit unsure about Sphinx: it's a bit of a beast

1600213062
yorickpeterse
This is a recurring issue with basically any modern documentation generator, sadly

1600213101
yorickpeterse
I thought about integration my documentation into the corresponding website (which is already about as vanilla as it gets), but that makes the docs less portable (e.g. no PDF output)

1600213192
ccube
In the 0.6.0 documentation, tuples are not documented, var_args is still referred to, and the form tuples take in function calls is not as indicated in the issue discussion or stack overflow.

1600213252
daurnimator
ccube: I don't think tuples existed in 0.6.0

1600213258
daurnimator
they've been added since.

1600213280
ccube
Well that's the only way print works!

1600213366
ccube
And 0.6.0 is the most recent pre-built release

1600213394
torque
the master branch documentation also does not appear to document tuples

1600213416
torque
the only place "tuple" appears in that document is in the description of the "for" keyword

1600213425
ccube
Yep

1600213735
ccube
Kept trying print("{}: {}\n",  [i, arg]) and got error: expected token ']' and found ',' --- finally guessed that  you folks had silently changed the syntax.

1600213784
ccube
And changed it to .{i, arg} which worked.

1600213875
ccube
By the way, does this use of  "." with no identfier on the left hand side have a defined meaning, an implied context perhaps?

1600213977
ifreund
it's the syntax used for anon struct literals and tuples

1600214073
ccube
OK, what about "_" used as a variable on the left hand side have an explicit meaning, or just a convention for dummy variables?

1600214123
ifreund
it just discards the value yeah, though it is language level and not just a convention

1600214139
ccube
Is it documented somewhere?

1600214146
ifreund
zig doesn't let you ignore return values so this is needed

1600214150
ifreund
not sure :/

1600214225
ifreund
I mean it's certainly used in the examples in the docs, and it's pretty intuitive syntax imo

1600214267
waleee-cl


1600214303
ccube
Yes, I guessed that they were dummy variables, but I've been programming for many decades.

