1594692051
leeward
Getting close to Zig code on an msp430

1594692077
leeward
And by "close" I mean it's running, it just doesn't do anything.

1594692385
pfg_
how is address of going to work with zir?

1594692488
andrewrk
pfg_, probably the same way as stage1

1594692635
andrewrk
I'm doing some related work now

1594695223
andrewrk
pfg_, you looking to contribute?

1594695231
andrewrk
I can help you find something to do

1594695231
pfg_
yeah

1594695242
andrewrk
what are you interested in?

1594695253
pfg_
I don't know

1594695262
pfg_
stage2 stuff

1594695303
andrewrk
here are some ideas: * catch up another architecture up to x86_64, such as aarch64 or RISC-V

1594695332
andrewrk
* add DWARF annotations for debugging * support Windows PE files

1594695361
andrewrk
* perf improvements to the parser

1594695379
andrewrk
* implement std.os.copy_file_range (will help for incremental linking)

1594695395
andrewrk
* add compile error notes

1594695404
pfg_
what are compile error notes?

1594695434
andrewrk
like when it says error: these types are incompatible. \n note: type Foo here \n note: type Bar here

1594695454
pfg_
ah

1594695466
andrewrk
there are a few places we already need them (marked with TODO comments)

1594695504
pfg_
// TODO error notes pointing out each type

1594695508
andrewrk
* make progress on inline assembly support (see

1594695536
andrewrk
basically we need an entire assembler, which is its own big project. would be huge if someone took that on

1594695547
andrewrk
could even do it in your own repo, work on it until you want to upstream it

1594695571
andrewrk
although it would make sense to share some code with self-hosted codegen.zig probably

1594696426
sqwishy
Can an assignment be done in a while expression?

1594696464
andrewrk
yes with a block

1594696787
sqwishy
andrewrk: only after the `:` ... `while (foo) : (assignment = here)`?

1594696825
gavra
is the best way to open a file "std.fs.cwd().openFile(filename)"

1594696926
andrewrk
gavra, yes unless you already have a directory handle open

1594696935
andrewrk
in which case you can do dir.openFile

1594696966
gavra
thanks for the help

1594697091
andrewrk
here's an example of doing the self-hosted AST memory layout adjustments I mentioned earlier:

1594697112
andrewrk
there are plenty more changes needed like this, still lots of wasted memory to reclaim

1594697251
lemmi
sqwishy: you can also du stuff like this

1594697820
gavra
how different do you thing the language will be at 1.0?

1594698146
ifreund
It seems to be stablizing nicely, If you want to see some of the planned changes you can check out the accepted proposals on github

1594698189
ifreund
#1717 is probably the biggest one that has yet to be implemented

1594698190
fengb
The language has been pretty stable since 0.6. The stdlib is still iterating pretty rapidly

1594698216
fengb
But of course... stage2 might change a few things

1594698233
gavra
is the fast iteration causing the lack of stdlib docs?

1594698254
daurnimator
gavra:

1594698286
fengb
Part of it is that stage2 is depending a lot on userland

1594698287
gavra
i have seen the docs but i have heard they can be a little outdated

1594698298
fengb
But in general, we've changed a bunch :P

1594698329
daurnimator
gavra: that's just because updating the docs currently requires manually running a command

1594698339
daurnimator
so it only gets ran every couple of months

1594698340
fengb


1594698352
fengb
I think this is missing a few things

1594698361
daurnimator
once the docs get better coverage; and multibuilds are complete; then I expect doc generation would run with every merge

1594698477
gavra
would functions as expressions allow for lexically scoped functions?

1594698536
fengb
No, closures are still out of scope

1594698557
fengb


1594698668
daurnimator
fengb: closures would make them in scope ;)

1594698689
fengb
I totally didn't intend a pun

1594699704
leeward
I don't think Zig is respecting my volatile pointers.

1594699754
leeward
Oh, never mind. It's clearing that register.

1594699759
leeward
What the heck, then?

1594700121
leeward
Interesting. GCC and LLVM generate exactly the same code for the C version, but Zig is generating some weird stuff. Time to figure out what that macro actually does.

1594700475
andrewrk
`zig translate-c` in a nutshell: "Time to figure out what that macro actually does"

1594700654
leeward
hah

1594700675
leeward
Well, this macro is #define sfrb_(x,x_) volatile unsigned char x __asm__("__" #x)

1594700695
leeward
and I have no clue what __asm__("__" FOO) means

1594700704
daurnimator
leeward: #x is turn x into a string

1594700711
leeward
Yeah, that part I knew.

1594700715
daurnimator
leeward: and two strings next to each other are concatenated

1594700716
leeward
WTF is "__" though?

1594700721
leeward
Oh, holy crap

1594700722
leeward
thanks

1594700740
daurnimator
and x_ doesn't seem to be used?

1594700790
leeward
It's a 2-layeIt...does not.

1594700798
leeward
Wow, backspace fail.

1594700869
andrewrk
is that just @fence() ?

1594700911
leeward
Hmm, maybe it is. It generates: extern volatile unsigned char P1DIR __asm__("__" "P1DIR");

1594700949
daurnimator
leeward: it's probably just using it to pull things out of the linker script?

1594701017
leeward
Yeah, probably. It generates asm like "mov.b&__P1DIR, r15"

1594701142
andrewrk
I think you can just make an extern variable named __P1DIR and take the address of it

1594701196
leeward
Huh, translate-c just turns that into "pub extern var P1DIR: u8;"

1594701208
daurnimator
andrewrk: I think the point is so you can write e.g. `P1DIR |= 1` without having to write & anywhere

1594701218
andrewrk
oh I see

1594701257
leeward
Yeah, C code treats it like a variable that happens to have its address set to the right memory-mapped register.

1594701260
daurnimator
while in zig right now; `volatile` is a pointer attribute

1594701282
leeward
So I tried this: const p1dir = @intToPtr(*volatile u8, 0x0022);

1594701296
daurnimator
which brings us back to

1594701308
leeward
Which worked fine for avr, but on msp430 it's not generating correct read-modify-write code.

1594702267
leeward
I think Zig is actually generating more efficient correct code than llvm here; just not sure why it's not working.

1594702943
leeward
Linker issue. Naturally.

1594714715
discipulus
daurnimator: on issue 5836 can you remove the "standard library" label please? The proposal is to change the language documentation not the standard library documentation.

1594714969
daurnimator
discipulus: its docs about using the standard library

1594715010
discipulus
No, it's to change use of assert to expect in test code in the language documentation

1594715065
discipulus
I think I know what you mean, though.

1594715095
daurnimator
std.debug.assert vs std.testing.expect is a standard library distinction. I understand what you mean though....

1594715107
daurnimator
labeling is an inexact science

1594715140
discipulus
Yeah, I realized your meaning and how you understood it. I just didn't want to confuse making changes in the standard library documentation.

1594716162
discipulus
had to step away...anyways, I wanted to clarify because the "standard library" label is described as "This issue involves writing Zig code for the standard library."

1594717064
Shucks
Heya

1594717075
ikskuh
hey Shucks

1594718717
ikskuh
i'm working on zig-network these days, have fixed some bugs yesterday for linux

1594720042
Shucks
Finally having success with zig. It's getting easier and easier.

1594720198
Shucks
I was pretty surprised that calling defer in a loop works how its "expected" to be. I guess in go all defers get called once you leave the loop scope.

1594720382
andrewrk
go appends defers to a function-local array list and runs them when the function returns

1594720404
andrewrk
in zig defers are scope-local

1594720414
andrewrk
in go, defers allocate memory

1594721953
Shucks
Great. Is there a decission yet if std.os.windows will cover the complete windows api now or just that stuff which is required by zig itself?

1594724521
Shucks
How would I iterate over a range?

1594725135
ikskuh
a range as in "from X to Y"?

1594725141
ikskuh
var i : usize = start;

1594725147
ikskuh
while(i < end) : (i += 1) { â€¦ }

1594725216
ifreund
or if you have a slice: for (items[start..end]) |i| { ... }

1594725484
Shucks
Ah, was looking for something built in.

1594725489
Shucks
But that works ofcourse. Thanks

1594729288
gonz_
Shucks: If you want WinAPI stuff there is

1594729468
Shucks
Oh cool. I didn't had to wrap all that stuff manually >.<

1594729497
gonz_
I think your version is fine in general when you know exactly what you want and there's less than 10 things or whatever.

1594729526
fengb
Ultra lean and mean

1594729529
gonz_
This was how I started out doing it and it worked fine when I had one thing I wanted to do, but I started experimenting with having zig translate all of `windows.h` at some point

1594729550
gonz_
And then I spent a few hours annotating a bunch of functions with their lib after that

1594729764
Shucks
Well atleast it's good to know where I could look up. Does zig eliminate dead code in case I'm importing that whole api?

1594729781
gonz_
Yeah

1594729788
gonz_
You'll only get what's used

1594729792
gonz_
Even in terms of checks

1594729817
gonz_
Only the paths your code go through end up getting checked and in the artifact

1594729882
Shucks
Great

1594729893
gonz_
Part of why I usually mention it to people when they bring Win32 up is so that I get more users and can find bugs, etc.

1594729909
gonz_
It's legitimately useful, IMO, but also something that just needs more code paths travelled

1594731309
Shucks
gonz_, seems like its missing:

1594731366
gonz_
Yeah, it also doesn't have `psapi.h`

1594731400
gonz_
I'm thinking of adding a lot more of the other headers, though

1594731413
gonz_
I have a project where I'm using `psapi.h` and it's annoying

1594731453
gonz_
I'm kind of trying it out at the moment; I might just transfer the translated `psapi.zig` into `zig-win32`

1594731464
gonz_
Probably the same would apply to `tlhelp32`

1594733035
Shucks
any example somewhere how to use varargs?

1594733039
ikskuh
<andrewrk> in zig defers are scope-local

1594733039
ikskuh
<andrewrk> in go, defers allocate memory

1594733059
ikskuh
andrewrk: thanks for being reasonable. i really had a WTF face when i learnt the go way m(

1594734274
fengb
Shucks: std.fmt.format uses anytype for accepting tuples

1594734787
Shucks
I guess anytype is `var`. Im just a bit confused how I would iterate over it.

1594734803
Shucks
called here

1594734851
ifreund
Shucks: check out the printf example from the docs:

1594736452
shcv
is it possible to switch on a string value?

1594736495
fengb
Not out of the box. I do this:

1594736534
fengb
Caveat in my implementation: only supports up to 16 chars max

1594736549
fengb
And not necessarily too performant (I haven't tested too thoroughly)

1594736573
shcv
I had thought about doing something like that actually

1594736635
shcv
another option for short, fixed-length strings might be to cast them to ints...

1594736674
shcv
would work best for strings that fit in a usize

1594736800
shcv
looking at your Swhash implementation, it looks like you're doing that for smaller strings?

1594736835
shcv
I guess I was expecting it to be an actual hash :P

1594741223
leeward
So I figured out why my msp430 code wasn't working correctly. The asm output didn't include `.section .init9,"ax",@progbits` which the linker wanted. After having Zig generate asm, adding that line made it so gnu ld put main in the right place. I guess I'll try to get ld.llvm working next.

1594741341
leeward
Silly linkers needing main to be in an executable section...

1594741457
frmdstryr
leeward: Is your msp430 project public somewhere?

1594741471
leeward
frmdstryr: It will be once I get it to work at all

1594741483
leeward
Well, without hand-editing generated asm files

1594743715
marnix
I just heard in zig.show #6 that ppl are interested in seeing Zig projects. So for what it is worth, as a Zig noob (and with C/C++ ~15 years behind me), I'm working on

1594743741
marnix
...a Metamath proof verifier, see

1594743783
companion_cube
ahah funny collision

1594743787
companion_cube
are you on the mailing list?

1594743813
marnix
No, don't think I know of a mailing list, lemme check.

1594743821
companion_cube
a google groups, really

1594743918
ifreund
that's super neat!

1594743953
companion_cube
keeping my eye on MM0 personally

1594744113
marnix
Subscribed to mailing list (

1594744188
companion_cube
marnix: oh I meant the metamath list

1594744236
marnix
companion_cube: :-) Oh, yes, I'm on there for a long time already.

1594744401
marnix
(No progress on zigmmverify for 3 weeks now though, long holiday, which I spend hiking, not having any computer with me except my phone, watching zig.show, installing this bleeding edge IRC client on my phone, and more hiking. :-) )

1594746421
Shucks
Could I mark a function return type as "ignoreable"? Or do I have to ignore it explicit with `_ = Foo()`

1594747075
leeward
Shucks: If it returns void, you don't have to do anything with the return value.

1594747097
Shucks
It's returning a value which i don't need

1594747106
leeward
Yeah, then you have to explicitly ignore it.

1594747129
Shucks
alright thanks

1594749251
KoljaKube
Can I use Allocator.free with memory a C library allocated with malloc?

1594749284
KoljaKube
c_allocator.free I mean

1594749439
ifreund
KoljaKube: yes that should be fine

1594749695
KoljaKube
Coolcoolcool

1594749770
Shucks
how could I create a array with a size which isn't known at comptime?

1594749772
KoljaKube
Too bad malloc does not use some sort of userdata void* by default

1594749792
KoljaKube
Would make delegating to different allocators a lot easier I would think

1594749798
leeward
Shucks: look into ArrayList

1594749819
Shucks
once again, thanks ;)

1594749823
leeward
np

1594749825
KoljaKube
Shucks: Or use an allocator, if its size won't change

1594749905
KoljaKube
ifreund: Got around to watching your river zig show presentation yesterday, quite interesting

1594749937
ifreund
KoljaKube: glad you enjoyed it!

1594750002
Shucks
basically trying to get that running:

1594750189
leeward
Yeah, for that you can just use an allocator.

1594750289
KoljaKube
Or, since you seem to know the size at the caller, pass in a slice

1594750311
KoljaKube
That way you won't have to add an *Allocator param

1594750349
fengb
Yeah we often use an out buffer for that

1594750445
leeward
Oh hey, good point

1594750525
KoljaKube
ifreund: If you don't mind me asking, is english a native language for you?

1594750566
KoljaKube
And that's how you Cmd+W the wrong window :D

1594750575
ifreund
heh

1594750587
ifreund
yeah I'm from the states

1594750618
ifreund
I speak pretty decent german now too though

1594750633
fengb
He speaks 'murican

1594750674
Shucks
So I'll create a array which will be big enough and create a slice with my size from it right?

1594750675
KoljaKube
Wouldn't doubt that, but I was a little confused by Aachen + the missing accent ;-)

1594750701
KoljaKube
Shucks: You can only create comptime-known sized arrays

1594750749
KoljaKube
Shucks: But you can leave it up to the caller where to get the memory from if you pass in a slice, passing in an allocator makes the function a little more complicated

1594750768
KoljaKube
-complicate +inflexible I guess

1594750799
ifreund
Shucks: yeah that sounds like a reasonable thing do to

1594750805
ifreund
*to do

1594750842
ifreund
your other option would be to dynamically allocate an array of the size you want

1594750855
marnix
Na schÃ¶n, I'm looking from ein Ausland at German trees at the moment-- which reminds me, any Dutch folks here / in the Zig community? (Think a Zig 'GitHub action' or something is by someone from NL?)

1594750992
leeward
marnix: I'm pretty sure there are some Nederlanders, but I don't remember who.

1594751009
leeward
Where was that map of ziguanas?

1594751185
leeward
Oh, it's frozen.

1594751209
leeward


1594751235
fengb
Snektron, Nypsie are dutch

1594751237
fengb
A few others

1594751332
KoljaKube
A map would be nice, but that website doesn't seem fit for the job

1594751345
fengb
Bait and switched

1594751359
leeward
Yup

1594751378
leeward
It had a bunch of pins before it collapsed.

1594751841
KoljaKube
I bet it would be possible to hack something together using OpenStreetMap and Github Pages or some other relatively low maintenance solution

1594752241
KoljaKube
Are there any best practices when it comes to managing memory ownership?

1594752309
KoljaKube
I'm contemplating whether it's a good idea to have the same struct manage memory that may be passed in and is not owned or that is malloced by a C library

1594752473
KoljaKube
"Always call deinit(), but maybe it's a no-op" doesn't sound amazing, but duplicating all the other code isn't great either

1594753817
andrewrk
Shucks, re: windows API:

1594753857
Shucks
Aye, saw that one

1594754842
KoljaKube
And just now I noticed that `defer foo.deinit()` needs foo to be var. Which makes sense, but for some reason I always read deinit() as basically a dtor

1594754974
ifreund
well, foo only needs to be mutable if deinit() needs to modify members. Often all deinit() needs to do is free memory so foo can just be passed by value

1594755235
KoljaKube
Mh, right

1594755259
Snektron
marnix hello yes ik ben Nederlands

1594755332
KoljaKube
OK, other way around: what are the consequences of `self.* = undefined`? Does it only matter in debug/safe builds?

1594755493
Shucks
What exactly is `writer` on std.fmt.format? I'm trying to save a byte as its hex representation.

1594755532
leeward
KoljaKube: If the compiler can tell that you're accessing undefined memory, it will fail in any build mode. `var x: u32 = undefined; var y = x;` will always fail to build.

1594755694
leeward
For the destructors clearing out their structs, I'm less sure. Safe builds will catch it and unsafe builds aren't required to.

1594755784
KoljaKube
leeward: Thanks. So I have to choose between some sort of debugability/safety and being able to declare something as const

1594755862
KoljaKube
Shucks: writer is basically a stream, as long as it provides a specific list of functions it can be anything

1594755906
KoljaKube
You can format your byte with the picture {x} for hexadecimal representation, regardless of which writer is in use

1594755963
Shucks
mh yea all I wanna do is: var foo = std.format("{X}", .{mybyte})

1594755968
Shucks
So thats confusing ;p

1594755982
ifreund
accessing undefined memory is UB, it's not something you should ever knowingly do

1594755991
leeward
KoljaKube: This issue came up a little while ago, and...yeah. You could take a const pointer to it and use that to do all your work on it, but `var foo_ = Thing(); defer foo_.deinit(); const foo = &foo_; ...` is a bit awkward.

1594756025
ifreund
Shucks: you might be looking for std.fmt.bufPrint() or std.fmt.allocPrint()

1594756036
andrewrk
KoljaKube, yes, `self.* = undefined;` is a no-op in unsafe build modes. in safe build modes it will cause 0xaa bytes to be written to the members, which is the bit pattern for undefined. it also by default has valgrind client annotations to mark the memory range as uninitialized

1594756037
leeward
Shucks: zig/lib/std/io/writer.zig

1594756066
andrewrk
valgrind is especially powerful with zig code because of the ability to assign `undefined`

1594756076
KoljaKube
Shucks: if you want to writer to a buffer, ArrayList can provide you with a writer

1594756112
andrewrk
ifreund, to be clear, accessing undefined memory is well defined, however branching on it is illegal behavior

1594756137
andrewrk
you are allowed to do this: var a: i32 = undefined; var b = a;

1594756151
leeward
really?

1594756163
leeward
b is just undefined?

1594756167
andrewrk
yes but you cannot then do for example `if (b == 0)`

1594756172
ifreund
I see, that makes sense. Thanks for the clarification

1594756176
leeward
Huh.

1594756208
KoljaKube
leeward: Just out of curiosity, that const pointer could in principle suffer a performance penalty due to indirection, or is that optimized away?

1594756262
andrewrk
also: any operation which takes a set of inputs for which there exists some combination of inputs which would cause illegal behavior, any inputs which are undefined are assumed to be the most adversarial values, and if that would cause illegal behavior, then the operation causes illegal behavior

1594756277
andrewrk
all that is to say, @intCast(u8, @as(i32, undefined)) is illegal behavior

1594756329
companion_cube
if you have an i64, checked it's in 0..u32.max, can you not cast it to u32?

1594756331
leeward
KoljaKube: Andrew probably knows the answer to that, but I would be shocked if it did actually incur any performance penalties.

1594756338
KoljaKube
Strike that, I don't think that makes sense

1594756357
andrewrk
companion_cube, if the value is undefined, then checking if it is within range would be branching on an undefined value

1594756375
companion_cube
ahhh my bad.

1594756376
KoljaKube
I guess for every non-trivial struct, in a function call the same pointer should be passed

1594756387
companion_cube
I thought you were saying all such casts were bad -_-'

1594756426
andrewrk
ah. yeah I was specifically clarifying undefined values

1594756432
companion_cube
ðŸ’¯

1594756481
andrewrk
also, `a + b` where `b` is undefined is illegal behavior. Because it could cause overflow. But `a +% b` where `b` is undefined is allowed, and the operation results in an undefined value

1594756495
marnix
So does Zig have something like Java's blank final? So `const x: usize = undefined; if (...) { ...assign x exactly once...} else {...same again...} ...use x...` ? Because even replacing `const` by `var` fails in zig 0.6.0 I seem to remember? (Can't double-check now.)

1594756529
companion_cube
so being undefined is a taint, that propagate through operations, and is removed via assignment

1594756530
andrewrk
marnix, const x = block_label: { ...; break :block_label value; };

1594756538
andrewrk
correct companion_cube

1594756543
companion_cube
neat.

1594756569
andrewrk
however it's not guaranteed that an undefined value will always show up as the undefined bit pattern (0xaa bytes)

1594756588
andrewrk
although safe build modes strive to make this happen, since it improves safety properties to uphold this

1594756595
marnix
Thanks andrewrk , clear!

1594756635
FireFox317
marnix, hello fellow dutchman!

1594756645
KoljaKube
Shiny, that labeled break

1594756669
andrewrk
yes, that's a "go-to" control flow mechanism ;)

1594756780
leeward
What's the use case that led to labeled blocks? It seems like the job for a function to me.

1594756803
marnix
FireFox317: HÃ© hallo daar! :-)

1594756821
andrewrk
leeward, mainly the one that marnix pointed out above. It helps you to have more locals `const` instead of `var`

1594756855
andrewrk
plus it's the reason we don't need goto (hence my pun above)

1594756895
marnix
About those labeled blocks: the need to need to invent a label strikes me as-- overly complex. Perhaps allow : as a label? Or would that lead to line noise code?

1594756909
andrewrk
there's an issue or maybe several open for this

1594756911
companion_cube
the syntax has been discussed many times :-Â°

1594756915
andrewrk
you're not alone in this

1594756930
KoljaKube
andrewrk: The advantage over functions is the access to other local variables, or am I misunderstanding?

1594756977
fengb
We need to break (:o) compatibility with C

1594757033
leeward
I still don't see it. `const x: usize = decideWhatXShouldBe();` serves exactly the same purpose, no? And for something trivial, `if` is an expression, so `const x: usize = if (...) thing else other_thing;`

1594757062
companion_cube
a function is a lot mory work to define

1594757083
andrewrk
there's nothing wrong with long functions

1594757112
companion_cube
more*

1594757133
leeward
I guess the only advantage I see is the one KoljaKube mentioned: implicit access to all the locals.

1594757138
andrewrk
a function is a nice tool in your toolbox and so are labeled blocks

1594757142
KoljaKube
leeward: The blocks can have side effects and a single path (no else), that is a difference

1594757222
leeward
KoljaKube: Ok, I guess I can see that. I mean, functions can too, but free access to locals is nice.

1594757236
KoljaKube
From the docs: `var y: i32 = 123; const x = blk: { y += 1; break :blk y; };`

1594757257
leeward
That code smells bad, but sure.

1594757268
KoljaKube
Yeah, well

1594757274
KoljaKube
I didn't write it ;-)

1594757278
leeward
:P

1594757299
KoljaKube
But I guess it would be hard(er) to do otherwise

1594757303
fengb


1594757322
fengb
I just realized the new implementation is really easy so I should probably refactor

1594757392
fengb
Mutation + return value is really annoying to stick into a function

1594757474
KoljaKube
Off-topic re fundude, river: Fun thing about zig is how all the authors of the more well known projects can be found in one place. Reminds me of my old #clonk days (not that I expect any overlap)

1594757475
leeward
Mmm, returning from the outer function would make it complicated.

1594757551
KoljaKube
(Clonk was/is a C-like scriptable game with a very tight-knit community)

1594757719
leeward
KoljaKube: It is cool, but I look forward to the day when there are significant projects written in Zig by people who don't rebuild the compiler from master at least a few times a week.

1594757800
leeward
That said, having an actual community with a large portion of the users is pretty great.

1594757872
KoljaKube
leeward: Sure, I get that. I was just being nostalgic, that was the time I was a) really getting into programming and b) basically living in IRC. It's nice to repeatedly recognize names.

1594757924
KoljaKube
Also I don't think I have had so much fun with a language since I started learning ruby

1594757946
ifreund
hey river is still 0.6.0 for now

1594757978
KoljaKube
And I download tarballs due to the polly linker problem ;-)

1594757988
ifreund
don't want to track master as it would make packaging pretty much impossible

1594758167
leeward
I have a patch for the libpolly thing that I keep in my repo. Want to build? Push the patch, then build, then pop the patch.

1594758179
leeward
It's a 1 line change.

1594758354
leeward
msp430 blocked for the moment, but I just got a pair of nRF52840s. Looking forward to being able to actually use Zig for the whole chain.

1594758738
KoljaKube
Is there a lot of advantages to building master over using the tarballs? I have a script that jq's the latest version from the homepage and installs it into /usr/local

1594758758
leeward
Only if you want to make changes.

1594758805
KoljaKube
The limitation I wanted to mention next (I don't) ;-)

1594759699
KoljaKube
Well, it's getting late. See you very fine people later

1594759804
marijnfs
invalid token: 'var

1594759809
marijnfs
what did i miss

1594759844
ifreund
var -> anytype when used as a type

1594759931
marijnfs
danke mein freund

1594759952
andrewrk
`zig fmt` auto fixes it

1594759978
leeward
Oh, when did that happen?

1594759997
ifreund
last couple days?

1594760004
leeward
nifty

1594760314
marijnfs
the var keyword was indeed overused, so its better

1594760933
Shucks


1594760958
Shucks
Do I need to recode that? ;D Is there some strip builtin?

1594761113
pixelherodev
`while (indexOf(str, blah)) |index| { str = foo(str, index); }`?

1594761122
pixelherodev
(not actual code, just an example of structure)

1594761567
marijnfs
Shucks: in zig you would use 0 terminated string [:0]. You wouldn't explicitly look for a terminator

1594761638
andrewrk
Shucks,

1594761671
Shucks
trim is what im looking for. Thanks once again

1594761909
pixelherodev
Ugh, docs don't work in w3m :(

1594761966
andrewrk
why not?

1594761989
andrewrk
this is a pretty reasonable use case for javascript on a web page

1594762502
Shucks
I guess trim doesn't works for whitespaces huh

1594762528
Shucks


1594762846
andrewrk
gonna need to see expected output / actual output

1594763214
leeward
Shucks: It trims the edges, not the middle.

1594763321
Shucks
oh yea

1594763406
leeward
Shucks:

1594763475
Shucks
Yea just saw it. Gonna figure out how I could trim all spaces.

1594763836
leeward
Do you want a working example, or is this a learning exercise kind of thing?

1594764141
leeward
I love it when people decide that 216 columns is a reasonable number for source code.

1594764231
leeward
Oh, wait, never mind. I meant 232

1594764337
andrewrk
I'm probably guilty of that

1594764374
leeward
Probably, and it probably bugs me when I come across it.

1594764412
leeward
Humans are not good at dealing with wide text.

1594764451
andrewrk
my philosophy is the person who edits code (for a reason other than style) gets to do the style they want

1594764687
leeward
My philosophy is that my style is right and if you disagree you're wrong. Of course, I'm definitely wrong.

1594764695
companion_cube
leeward: I agree!!

1594764705
companion_cube
except when your style disagrees with mine, in which case you're wrong.

1594764727
leeward
companion_cube: That is the correct answer to style wars. Good job.

1594764740
companion_cube
ðŸ’ª

1594764788
leeward
Still, I keep my editor windows 80 characters wide and that lets me fit 3 across per monitor on most displays.

1594764827
leeward
This is why I don't use tiling window managers. Hard to divide by 3.

1594764930
ifreund
why so? I often do the same thing with my tiling

1594764945
leeward


1594764947
ifreund
guess it depends on the wm

1594764961
leeward
I've only tried wmii and xmonad.

1594765007
leeward
It's better when dealing with large files. I can keep different parts of the same file in different windows.

1594765296
ifreund
xmonad is dynamic tiling like dwm and river, you'd just need the right layout

1594765342
leeward
I remember trying a bunch of different layout options with xmonad.

1594765371
leeward
At this point, though, I've been using fluxbox for so long that it would take a lot to make me want to switch.

1594765384
companion_cube
leeward: try i3, maybe? it's not algorithmic layout, but kind of manual

1594765391
companion_cube
you create stacks and splits, and move stuff around

1594766150
leeward
Expression of frustration with people who think "modal" is an indication of good UI design. Doesn't look like i3 is the solution for me.

1594766195
companion_cube
hmmm, where is that?

1594766227
leeward
#5 on i3wm.org

1594766270
companion_cube
ah, well

1594766279
leeward
I looked a bit deeper, and they do seem to have mostly sensible principles otherwise. Maybe I'll try it the next time I set up a laptop.

1594766281
companion_cube
that's only to resize

1594766288
companion_cube
it's like wmii, if you ever tried that

1594766295
companion_cube
(but with a config file)

1594766316
leeward
Hopefully less crashy too.

1594766326
companion_cube
never had it crash on me, tbh

1594766340
companion_cube
there's also an IPC system and stuff but I don't use it

1594766363
companion_cube
for once a video can help, I guess:

1594766595
leeward
yep, looks like a tiling wm

