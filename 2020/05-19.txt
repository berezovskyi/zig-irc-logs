1589847152
Snektron
The sorting algorithm sounds like a good candidate

1589847152
Snektron
<andrewrk "alright so what else should we t"> Maybe some other smaller parts of the standard library

1589847217
andrewrk
yeah sorting algorithm, that's good

1589847287
Snektron
Bigint also

1589847322
andrewrk
ya good one

1589847412
Snektron
Theres also rb for what i assume is a red black tree, and bloom_filter

1589847436
Snektron
Although i doubt the latter is used very often

1589847814
fengb
Also comptime sorting? :P

1589847967
shachaf
Is anything using the red-black tree?

1589847988
shachaf
I guess the main reason to use something like a red-black tree would be to make it intrusive.

1589850394
foobles
yooo i used macros so that ir_assert and src_assert print the line of the caller if they failed

1589850405
foobles
that could be really awesome to have, ill open an issue for it

1589851320
foobles
andrewrk i found the assertion error using my macros, without having to build in debug

1589851324
foobles
:D

1589851329
foobles
i can finally progress!!

1589851360
andrewrk
nice work

1589851730
pixelherodev
:)

1589855683
andrewrk
mikdusan, thanks to wozeparrot we now have a graph of (among other things) stage1 peak rss usage over time:

1589855709
andrewrk
only 2 commits of data in there so far, but it's now set up to add data points with master branch commits

1589856325
foobles
aha! some of the blocks are not being rendered, causing the phi instruction's incoming values to not have llvm_values

1589859869
pixelherodev
Is there a YAML lib yet?

1589864671
andrewrk
pixelherodev, yeah, it's only 1 line in zig

1589864681
andrewrk
@compileError("pick a better serialization format");

1589864691
andrewrk
j/k

1589864824
andrewrk
I don't think there is one yet

1589864831
pmwhite
Lol, true. Same for JSON though.

1589864854
pmwhite
Sexps are the way to go.

1589864915
pixelherodev
:P

1589865510
andrewrk
btw pixelherodev I'm back to hooking up functions in self-hosted

1589865519
pixelherodev
Nice :)

1589865525
pixelherodev
I"m just about done with a simplistic register allocator

1589865529
andrewrk
what's this interval thing you're working on? just curious, it seems interesting

1589865530
pixelherodev
Maybe ten more minutes of work

1589865542
andrewrk
oh it's a register allocator?

1589865560
pixelherodev
A live interval register allocator

1589865594
pixelherodev
based on the Linear Scan Register Allocation paper from poletto et al 98

1589865605
pixelherodev
s/al/al circa

1589865638
andrewrk
live? does that mean JIT?

1589865645
pixelherodev
It

1589865648
pixelherodev
In this case it is

1589865650
pixelherodev
but it doesn't have to be

1589865652
pixelherodev
live != JIT

1589865662
pixelherodev
Live interval == the interval in the IR in which a variable is alive

1589865667
pixelherodev
That is, the first use to the last

1589865669
andrewrk
oh I see

1589865677
andrewrk
this sounds like it might be relevant to stage2 pretty soon

1589865683
pixelherodev
It's marginally less efficient than graph coloring

1589865687
pixelherodev
But it's

1589865695
pixelherodev
So for a JIT, it's the optimal path IMO

1589865710
pixelherodev
For incremental compiling too, I daresay ;)

1589865718
pixelherodev
Do we have regalloc in stage2 yet?

1589865721
andrewrk
no

1589865724
pixelherodev
If not, I can work on adding it later :)

1589865730
pixelherodev
Now that I have a better idea of what I'm doing

1589865791
andrewrk
one thing I plan to try is to not doing any register allocation - if it's fast enough at runtime to use stack memory and it saves compilation perf, then that seems worth it

1589865803
andrewrk
but I'll be sure to measure it and make a judgement call on that tradeoff

1589865818
pixelherodev
This should be fast enough to outperform that easily

1589865830
pixelherodev
Compile time overhead is near zero, and runtime boost is massive

1589865846
pixelherodev
But I definitely support measuring

1589865847
andrewrk
ok that definitely sounds worth :)

1589865860
pixelherodev
Measure measure measure

1589865862
pixelherodev
Always

1589865869
pixelherodev
Because there's always factors you don't consider

1589865880
andrewrk
yep that's why we have gotta-go-fast

1589865884
pixelherodev
e.g. it might wreck cache behavior, or the branch predictor, or...

1589865936
pixelherodev
hmm

1589865940
pixelherodev
tdeo: suggestion for fallback

1589865942
wilsonk
blast from the past...I had to read that Linear Scan Register Alloc paper for a course in Uni (and a graph coloring paper also to compare/contrast)  ;)

1589865947
pixelherodev
fallback to std.debug.warn for unimplemented pieces

1589866028
pixelherodev
wilsonk: neat :)

1589866032
pixelherodev
I guess that puts me a leg up

1589866037
pixelherodev
... or however that idiom goes

1589866238
andrewrk
hmm I just realized that kcov works fine for zig executables

1589866468
andrewrk
check it out:

1589866473
andrewrk
std lib test coverage

1589866511
andrewrk
don't believe the percents, code that was never even semantically analyzed is shown in white and not counted as the percent. that's even worse than red

1589869610
bgiannan
that's awesome

1589870045
pixelherodev
So it needs to track whether or not code is ever analyzed?

1589873666
daurnimator
andrewrk: oh wow, awesome that kcov works

1589873676
daurnimator
andrewrk: we should publish stats with each PR

1589873693
daurnimator
hook codecov or coveralls up to CI

1589883412
puzzleddev
Hello, what is the purpose of 'std.os.windows'? To represent the entire windows API and it's just not done, or will it only contain what the standard library needs?

1589883485
ikskuh
puzzleddev: there's an issue asking exactly this question on github

1589883490
ikskuh
it's not decided yet

1589883496
puzzleddev
Thanks

1589883539
ikskuh
i think it's better to have a WinAPI package and only have only the required functions in the base package

1589883889
alexnask
Yes I believe there is some package that includes all the windows api stuff without win32-lean-and-mean somewhere

1589883899
alexnask
(c-translated)

1589884106
ikskuh
oh really?

1589884373
daurnimator
puzzleddev:

1589884396
daurnimator
I of course agree with my own comment in there :P

1589884439
alexnask


1589884470
puzzleddev
Thanks, I already had a look at it. I believe that the standard library should either not export any part of the underlying platform, or all of it.

1589884599
daurnimator
puzzleddev: what about "just the parts needed to bootstrap"

1589884648
daurnimator
also how do you define "underlying platform": ntapi? kernel32? user32? everything (which includes e.g. opengl?)

1589884656
puzzleddev
They have to be in there somewhere, but shouldn't be exported, so that there is only one - good - way to do things: Get the proper package.

1589884823
puzzleddev
My personal ideal of a standard library is to provide a common interface with the platform, without the user having to know anything about it. This means excluding some capabilities only some of your target platforms have.

1589884845
daurnimator
puzzleddev: that is indeed how some parts of the standard library work

1589884854
daurnimator
puzzleddev: e.g. `std.fs` is mostly just common functionality

1589884873
alehander92
but what's the difference

1589884883
alehander92
between importing stdlib.winspecific.stuff

1589884888
alehander92
and importing it from a winspecific package

1589884895
daurnimator
alehander92: nothing

1589884896
alehander92
stdlib is about usefulness as well

1589884905
daurnimator
alehander92: except that e.g. std.fs

1589884934
daurnimator
std.fs doesn't expose

1589884937
alehander92
i am talking about "get the proper package"

1589885010
alehander92
it's an interesting idea: on the other hand i fear of cases where one needs e.g. an optional flag for something on a platform

1589885023
alehander92
but still wants to use `fs` for 80% of the code

1589885032
daurnimator
exactly

1589885034
alehander92
but yeah that's probably doable

1589885069
daurnimator
you should try and use `std.fs` for cross platform compat and good semantics + good errors. but sometimes you need non-portable things

1589885097
alehander92
also , `std.fs` and others are in a way examples of how good zig code looks

1589885132
alehander92
so it would be a bit confusing for me as an user to not be able to use `std.os.windows` as well

1589885159
daurnimator
there is a philosophy of "as little code is 'special' as possible"

1589885172
daurnimator
std.fs is code anyone could write: it just uses std.os.windows

1589885178
alehander92
exactly

1589885191
alehander92
i was wondering about the "not exporting" idea, i misunderstood

1589885192
daurnimator
std.os.windows is code anyone could write, it just wraps dlls and adds some zig semantics. + some inline asm

1589885198
alehander92
it might mean its usable only in other stdlib modules

1589885206
daurnimator
we don't have (or want) that barrier

1589885220
daurnimator
if someone wants to fork std.fs; we don't want them to fork std.os.windows too

1589885232
daurnimator
just ignore the bit of std.fs you don't like and hook in one level lower

1589885235
alehander92
yeah, ok

1589885492
puzzleddev
In the issue about the windows API the possibility was raised that only parts of it should be included in the standard library. On its own this is sensible, it reduced the amount of code to be written and maintained. However, new users are drawn to what the standard library contains, so the will naturally use this, partial, interface. What happens now if they need to grow out of it, if they need some functionality the standard library

1589885492
puzzleddev
doesn't?

1589885684
puzzleddev
There are then two or more ways to interact with Windows and the likelihood of them being partially incompatible is quite high. The way I'm seeing this it goes against one of Zig's principles of 'One obvious solution'.

1589886014
daurnimator
puzzleddev: the correct answer is meant to be "the higher level module" :P

1589886590
cren
Is there an easy way to make all the characters in a string lowercase?

1589886635
ikskuh
i don't think so, yet

1589886648
ikskuh
there is no string(as in text) handling in stdlib yet

1589886657
alexnask
std.ascii.allocLowerString

1589886669
alexnask
If we are talking about ascii ofc

1589886685
opDispatch
well  for unicode this is another story

1589886748
cren
ah I didn't see the `ascii` module because I was looking for the word `string`

1589890142
fengb
Philip White: I wrote a sexpr parse already! (Not that it’s hard...)

1589894150
ifreund
i thought null terminated pointers would coerce to slices so I could compare them with std.mem.eql

1589894174
ifreund
this seems to not be the case, and std.meta.eql compares them by pointer i believe

1589894191
ifreund
is there a proper way to do this with the std that I'm missing?

1589894195
ikskuh
use std.mem.eql and std.mem.spanZ

1589894205
ifreund
nice, thanks

1589894301
ifreund
a little more verbose than I would have liked, but works great

1589894323
ikskuh
no hidden control flow

1589894331
ikskuh
searching the null terminator is that

1589894345
fengb
Most of stdlib still doesn't understand null

1589894350
ifreund
agreed

1589894372
ifreund
though maybe an std.mem.eqlZ would be useful

1589894400
ifreund
when working C you need to do strcmp fairly often

1589894463
fengb
Zig now has badazz APIz

1589894506
ikskuh
i think it's okay to repeat some of the spanZ

1589894518
ikskuh
you can always import it into your namespace if you need it more often

1589894625
ifreund
i mean i could, but i always go for the full std.mem.eql(u8, std.mem.spanZ( ...

1589894627
fengb
memset isn't as fast as I had hoped :(

1589896828
alva
ifreund: there's this

1589896891
alva
Maybe cstr should have an eql as well

1589897071
ifreund
perhaps

1589897091
ifreund
that would also avoid needing to @ptrCast() to a [*:0] first

1589897532
dimenus
i just wrap cstr's in spanZ and then use regular eql from there

1589897553
dimenus
that way i'm only calculating the length once

1589903412
oats
is there a recommended way to use an allocator when you have to allocation across multiple diferent tests?

1589903438
oats
I see there's a std.testing.allocator

1589903470
ikskuh
std.testing.allocator is great as it also checks allocation count :)

1589903483
oats
what do you mean by that? leak checking?

1589903487
ikskuh
yep

1589903490
alexnask
Yes it uses a leak checking alloc

1589903495
oats
oh neat

1589903495
ikskuh
each test will fail when it leaks memory

1589903497
alexnask
Does it automatically call `validate()`?

1589903506
ikskuh
and don't assume tests are run in a specific order or even at all

1589903510
ikskuh
afaik yes

1589903520
alexnask
Hmm interesting didnt realize this

1589904198
ikskuh
alexnask, thanks for your contribution

1589904254
ikskuh
is someone here using MacOS X?

1589904309
dermetfan
When I want to free a slice obtained from ArrayList.toOwnedSlice(), I need to use the same allocator as in ArrayList.init(), right?

1589904312
alexnask
haze on discord uses macos I believe

1589904317
alexnask
dermetfan, yes

1589904333
dermetfan
alexnask: Thanks

1589904363
dermetfan
Does that mean the easiest way to store an owned []u8 in a struct is to store a pointer to an allocator along with it?

1589904404
dermetfan
(so i can free the []u8 later when I no longer need the struct)

1589904420
alexnask
It is common for structs that own some data to also hold an allocator pointer yes

1589904440
alexnask
(or somethimes an Arena constructed from the passed in allocator instead)

1589904500
dermetfan
Thanks a lot, that cleared things up for me

1589904501
dimenus
dermetfan: typically you'd use the same allocator for most of your allocations. Think of allocation at the 'systems' level instead of the more granular object level

1589904522
dimenus
systems or lifetimes

1589904714
alexnask
Right, if you are making a tonne of these structs (let's say some kind of node with a name) you wouldnt store the allocator in each of them

1589904770
dimenus
eg in my vulkan backend, i have a simple bump allocator that I reset every frame. No need to even worry about the allocator on the individual resources

1589905209
fengb
I'm on macOS

1589905225
fengb
Oh you switched

1589906202
andrewrk
pixelherodev, do you know what is the encoding of x86_64 call to a 32-bit hard coded address?

1589906400
andrewrk
looks like:  9a xx xx xx xx    call addr

1589907686
ikskuh
known-folders is now at version 1.0:

1589907691
ikskuh
supporting MacOS, Linux and Windows

1589907877
pmwhite
Wow, that's kinda risky, isn't it? Is it even being used/tested in anything yet?

1589907932
andrewrk
for libraries like this, 1.0 isn't scary because the cost of rolling the major version is low and well-understood

1589907954
andrewrk
it's a nice thing to do to hit 1.0, it means you are going to be meticulous about documenting when breaking changes happen

1589907968
andrewrk
it's not a guarantee to not make breaking changes

1589907982
ikskuh
pmwhite: tested on 8 different systems, 5 of them are fresh installs, except for zig

1589908010
ikskuh
and now i'm going to use it :)

1589908059
ikskuh
actually, i was creating the whole library only in a submodule, not as a standalone repo :D

1589908073
fengb
1.0 is the new 0.1

1589908100
ikskuh
i really hate having something working and calling it a "0" versiob

1589908108
ikskuh
all this fear of big numbers

1589908118
ikskuh
people in my company complained that their document is now "Version 78"

1589908127
ikskuh
well, they hit "save" 78 times, doh

1589908185
fengb
Back in mah day, nodejs jumped from 0.12 to 4.0

1589908258
ikskuh
also, as andrew said: bumping versions with semver is documenting breaking changes

1589908267
ikskuh
1.0 just means "first release of the first API design we got"

1589908314
ikskuh
a well tested library is probably 1.3.2 or something

1589908323
ikskuh
"we forgot stuff and we had some bugs"

1589908371
andrewrk
consider how little developer time it would take to check what happened in 1.0->2.0 in a known-folders package update, and update your application to use the new version

1589908414
ikskuh
yep

1589908432
ikskuh
also, 2.0 would mean "breaking changes in the API" which may happen

1589908438
nephele
Somehow, an api that gives a settings file handle would be much nicer than having to deal with XDG ;)

1589908441
ikskuh
but an API consisting of 1 type and two functions :D

1589908446
andrewrk
and the benefits are huge: the package can iterate towards the ultimate version of a robust, optimal package for that purpose, not constrained by past mistakes

1589908469
ikskuh
nephele: we deliver that! at least, partially :)

1589908487
ikskuh
const cfg_dir = try known_folders.open(.roaming_config);

1589908496
fengb
leftpad when? 🙃

1589908516
ikskuh
this returns the config root, where you should create your folder or whatsoever

1589908526
dimenus
nice

1589908564
dimenus
where do we appy to have projects added to ZigLibs? :)

1589908568
dimenus
*apply

1589908577
ikskuh
ask me, r4pr0n or nycex

1589908656
dimenus
ikskuh: understood

1589908679
andrewrk
does anyone understand what the "cd" and "cp" are here?

1589908696
pixelherodev
More x86 codegen stuffs?

1589908702
pixelherodev
What's going on? Just woke up :)

1589908702
ikskuh
cheese pizza!

1589908724
ikskuh
const byte, const word, const dword

1589908732
andrewrk
pixelherodev, I'm just trying to emit a jmp to a hard coded 32 bit addr

1589908793
pixelherodev
Ahhh

1589908797
andrewrk


1589908804
andrewrk
here I'm trying to jump to 0x06000005

1589908818
andrewrk
my cpu does not appreciate it

1589908824
pixelherodev
... what's the 0xEA?

1589908834
pixelherodev
I can understand the CPU's position lol

1589908835
andrewrk
I'm looking at

1589908843
andrewrk
"Jump far, absolute, address given in operand."

1589908845
pixelherodev
Oof no

1589908849
pixelherodev
Definite no

1589908852
pixelherodev
You don't want a far jump

1589908854
ikskuh
doesn't far jump has a segment ?

1589908855
pixelherodev
Like,

1589908858
pixelherodev
^

1589908860
ikskuh
nope, don't do far jumps

1589908868
ikskuh
they use segmenting and change the current code segment

1589908879
andrewrk
oh I thought far/near was not relevant on modern computers

1589908880
pixelherodev
Far jumps in protected mode are never what you want

1589908880
pixelherodev
It is

1589908880
pixelherodev
Backwards compat, remember?

1589908880
pixelherodev
:P

1589908883
pixelherodev
You want a FF encoding

1589908884
ikskuh
no, you need them!

1589908888
andrewrk
oh I see so there actually is not an encoding for what I want

1589908894
ikskuh
a far jmp switches from kernel to user space and back

1589908900
pixelherodev
/4 means a R/M byte with the middle three bits as 100

1589908902
ikskuh
(well, if that would be allowed)

1589908929
pixelherodev
Section 2.1.5 of Volume 2 of the Intel manual shows how to encode that...

1589908935
pixelherodev
Here we go

1589908939
pixelherodev
You want an absolute 32-bit address, right?

1589908965
andrewrk
pixelherodev, what is the full title of the manual you are looking at?

1589908969
pixelherodev
Disp32 is mode zero with the lower three bits set to five

1589908991
andrewrk
yeah absolute 32 bit addr

1589908998
pixelherodev
"Intel 64 and IA-32 architecture's software dev manual, combined volumes"

1589909006
andrewrk
ok downloading

1589909016
pixelherodev
That's 0xFF 0x25 DISP32

1589909025
andrewrk
oh so 6 bytes

1589909032
pixelherodev
Yeah

1589909035
andrewrk
thanks!

1589909035
pixelherodev
0xFF, R/M, disp32

1589909039
pixelherodev
No problem :)

1589909044
pixelherodev
Testing in gas just to confirm

1589909054
pixelherodev
... hmm

1589909054
foobles
aaay i fixed the assertion error. I just wanst appending a basic block, so a bunch of instructions were not being rendered at all

1589909057
ikskuh
is it possible to disable UBsan for certain C files?

1589909075
pixelherodev
Ah whoops

1589909077
pixelherodev
Wait

1589909079
pixelherodev
It's /2

1589909081
pixelherodev
Not /4

1589909089
pixelherodev
That's... 0x15?

1589909100
ikskuh
welcome2x86

1589909113
andrewrk
ikskuh, you can use the -fno-sanitize=undef on those files

1589909115
pixelherodev
0xff 0x15 0 0 0 0 => (callq *0x0(%rip))

1589909119
pixelherodev
Right, rip-relative...

1589909123
ikskuh
thanks ):

1589909149
pixelherodev
Gah, rip-relative addressing

1589909209
pixelherodev
Okay, need a SIB for this then

1589909215
andrewrk
what's that

1589909219
pixelherodev
Scaled index byte

1589909225
pixelherodev
That's... hmm, one sec, going back to the manual

1589909242
pixelherodev
0x14 0x25, I think?

1589909245
pixelherodev
seven bytes instead of six

1589909260
pixelherodev
Yeah!

1589909262
pixelherodev
That works!

1589909266
pixelherodev
0xFF 0x14 0x25

1589909270
andrewrk
testing

1589909274
pixelherodev
callq *0x0

1589909283
andrewrk
oh that's indirect?

1589909290
pixelherodev
... it looks it, yeah

1589909313
pixelherodev
I... can't tell because the freaking asm syntax always confuses the hell out of me

1589909320
pixelherodev
I somehow have an easier time with raw machine code lol

1589909355
andrewrk
I don't think there is an encoding for call direct a 32 bit immediate address

1589909363
pixelherodev
Yeah, I don't think so either

1589909375
pixelherodev
RIP-relative, yes, but that's not really what's wanted here either

1589909377
andrewrk
hmm in this case there was no point to setting up the trampoline table

1589909405
andrewrk
I should just do `0xFF 0x14 0x25 xx xx xx xx` with the same global offset table as all the decls are in, nothing special for functions

1589909413
pixelherodev
:)

1589909421
ikskuh
andrewrk: why no riprelative?

1589909433
pixelherodev
RIP-relative is also an option, yeah

1589909436
ikskuh
you know the address of RIP anyways, right?

1589909442
pixelherodev
&

1589909444
pixelherodev
s/&/^

1589909455
pixelherodev
Plus it's six bytes instead of seven

1589909461
andrewrk
ikskuh, this is the part where all function calls are intentionally indirect in debug builds, so that they can be moved around in the elf file without causing O(N) updates to the elf file

1589909468
pixelherodev
Hmm

1589909469
pixelherodev
Actually

1589909475
pixelherodev
Ohhh, right

1589909478
pixelherodev
okay then nvm

1589909492
ikskuh
moving a function around without recompilation?

1589909495
andrewrk
yep

1589909497
pixelherodev
that also explains why 0xE8 encoding is off the table

1589909511
andrewrk
moving it around in virtual address space

1589909602
pixelherodev
Have fun with that :P

1589909669
pixelherodev
Huh

1589909680
pixelherodev
it would actually take

1589909695
pixelherodev
We'd need a `mov addr -> reg` `call reg` pair :P

1589909703
andrewrk
yeah that's what I'm saying

1589909727
dimenus
you're trading runtime speed for faster code reloading

1589909733
dimenus
:)

1589909735
pixelherodev
Nope, not quite

1589909737
pixelherodev
It's also faster

1589909747
dimenus
the trampoline table?

1589909751
pixelherodev
No

1589909754
pixelherodev
That would be slower

1589909771
pixelherodev
Using the GOT directly is faster to generate

1589909775
dimenus
sorry by 'you' i mean Andrew / the debug backend

1589909782
pixelherodev
Yeah, that's what I'm referring to

1589909784
pixelherodev
Ohh

1589909786
pixelherodev
The backend in general?

1589909800
dimenus
sorry, not familiar with the 'GOD'

1589909803
dimenus
*GOT

1589909808
pixelherodev
Yeah

1589909816
pixelherodev
The GOT is used for all calls in the incremental compiler

1589909823
pixelherodev
and it is slower than direct calls

1589909830
pixelherodev
but necessary for the "incremental" part

1589909830
andrewrk
dimenus, yeah that's correct

1589909851
pixelherodev
So yeah, the backend as a whole

1589909861
andrewrk
it's going to take some more development efforts to improve release builds as well, but that's the point. the compiler does the complicated work so the programmer can enjoy simplicity

1589909894
pixelherodev
Hey, it's been a full day since I've accidentally put an IRC command into IRC chat! Huzzah!

1589909920
pixelherodev
:)

1589910282
andrewrk
cool, got function calls working. thanks pixelherodev :)

1589910295
BaroqueLarouche
nice :)

1589910320
pixelherodev
:)

1589910323
dimenus
andrewrk: Your progress on that backend so far is pretty epic, how many times have yo had to iterate on the ZIR design?

1589910324
pixelherodev
More than welcome

1589910333
pixelherodev
Figured out why I thought it was /4

1589910337
pixelherodev
That's jmp

1589910339
pixelherodev
:P

1589910350
pixelherodev
Mixed up the call and the jump encodings

1589910364
andrewrk
dimenus, I spent an entire week just messing with struct definitions without testing anything

1589910471
dimenus
hah awesome

1589910626
dimenus
i'm working on a wayland native stack for a vnc client to work with wayvnc

1589910952
andrewrk
cool

1589910963
dimenus
(in zig of course)

1589911627
ifreund
wayland + zig is wonderful

1589911827
fengb
X + zig is wonderful :P

1589911889
companion_cube
X + rust is wonderful

1589911893
companion_cube
oops

1589911934
fengb
Ew a four letter word

1589911979
ikskuh
oops?

1589911988
companion_cube
cool

1589912043
pmwhite
oops is my favorite programming paradigm.

1589912869
fengb
OOP = oops oriented programming

1589913405
pixelherodev
Objects of Power

1589913416
pixelherodev
Managed to crash ZLS like ten times in the last sixty seconds

1589913483
ifreund
weird, hasn't crashed on me once today

1589913499
fengb
ZLS can't handle the power

1589913537
pixelherodev
ifreund: it crashes ten times in the exact same file

1589913542
pixelherodev
Reallllly didn't like the partial AST

1589913557
pixelherodev
Probably wouldn't have happened if I disable the auto check for errors while typing thing

1589913934
[rg]
what is zig status now? last time I checked advice was to use master

1589913947
pixelherodev
Still the case

1589913953
[rg]
ok, ty

1589913958
pixelherodev
Or a nightly build from the site

1589914029
ifreund
well, depends on your project

1589914051
ifreund
0.6.0 has been been fine for me for something a little more long term

1589914061
andrewrk
[rg], I think 0.6.0 is still viable at this point

1589914087
andrewrk
but please test with master before reporting bugs

1589914098
pixelherodev
Isn't the advice to use master because breaking changes are the norm and thus you're going to need to update over time anyways?

1589914107
pixelherodev
(and thus, you should do it incrementally by sticking with master)?

1589914123
ifreund
zig fmt should be able to update most things between stables

1589914158
fengb
Minimal breaking changes since 0.6 so far

1589914159
andrewrk
pixelherodev, that's up to the individual. when I suggest to use master, it's because I anticipate that they will run into already-solved issues

1589914198
ifreund
breaking changes will hopefully be coming in the form of #1717 though

1589914247
fengb
Uh huh. I've waiting an entire release cycle for that :P

1589914280
ifreund
anonymous functions will be so nice

1589914574
pixelherodev
No more struct wrapping?

1589914852
andrewrk
I'm a bit confused why everyone is so excited about this

1589914893
dimenus
exit

1589914897
dimenus
oops lol

1589914899
pixelherodev
same

1589914941
pmwhite
So we can make zig-lodash.

1589915118
ifreund
it'll make the ergonomics of stuff like setting up callbacks and using filter functions for iteration a lot niceer

1589915137
ifreund
i also just like the syntax

1589915147
ikskuh
^-

1589915171
companion_cube
using filter/map? how is that C like? :p

1589915302
pmwhite
It's not C like, but that's okay.

1589915322
pmwhite
Async/await isn't C like.

1589915471
pmwhite
I was also kind of joking about zig-lodash. If you aren't careful with that, you could end up writing slow code.

1589915522
companion_cube
or high level code, who knows

1589915557
pixelherodev
The good news is, my register allocator works! Yay

1589915585
fengb
I was previously waiting for #1717 to make function pointer dispatch, but I eventually went another direction

1589915595
[rg]
pixelherodev: you work on the compiler as well?

1589915674
dimenus
[rg]: i think he's doing embedded stuff

1589915702
pixelherodev
[rg]: Yes

1589915707
pixelherodev
dimenus: not quite

1589915712
pixelherodev
I do work on stage2, though I'm not right now

1589915714
pixelherodev
Well

1589915724
pixelherodev
I'm writing a simple register allocator, which

1589915730
pixelherodev
Or at least, a different implementation will

1589915732
[rg]
interesting

1589915740
pixelherodev
But I'm doing this for a JIT project

1589915749
[rg]
zig jit? xD

1589915755
pixelherodev
I work on both, finding places where one is beetter than the other and improving them both in the process

1589915756
pixelherodev
[rg]: yeah

1589915759
fengb
So it'll be a part of the comptime engine right?

1589915769
pixelherodev
This specifically is part of codegen

1589915774
dimenus
all the backends!

1589915782
pixelherodev
Parts of lightzing will be useful for accelerated comptime though

1589915840
[rg]
is the project public?

1589915866
pixelherodev
Most of it is, yeah

1589915872
pixelherodev
ALl of it

1589915878
pixelherodev
Some parts are a bit too WIP for that yet though

1589915919
[rg]
ok, I'll wait, hopefully I'll have finished my codegen material and can contribute

1589915940
pixelherodev
long term link is

1589915968
pixelherodev
Currently up are an LLVM IR parser and the status of the JIT / assembler stuff from three weeks ago

1589916347
scientes
how do i do a array of i24 that is densely packed?

1589916357
scientes
its packing it to 4-wide, instead of 3-wide

1589916361
scientes
even if i do align(1)

1589916363
pixelherodev
Bug

1589916373
pixelherodev
Packed stuffs are bugged atm

1589916382
scientes
its just [*]align(1) i24

1589916389
scientes
not a struct or array

1589916420
andrewrk
I just had a phone call with a representative of MajorLeagueHacking Fellowship. they're interested in sponsoring a handful of students for 12 weeks to contribute to Zig. and they provide their own mentors too

1589916449
andrewrk


1589916461
fengb
o_O

1589916470
andrewrk
it's a public benefit corporation, seems like it might be a great fit!

1589916471
pixelherodev
Hmm

1589916477
pixelherodev
I mean,

1589916477
fengb
That's amazing

1589916480
pixelherodev
:P

1589916485
pixelherodev
I probably don't qualify though

1589916488
andrewrk
pixelherodev, you should for sure apply and try to get funded

1589916499
pixelherodev
worth a shot, that's for sure

1589916542
pixelherodev
There an application link on their site, or?

1589916562
ifreund
very cool!

1589917205
dimenus
amazing

1589917245
dimenus
andrewrk: are the mentors people we might recognize?

1589917256
andrewrk
hm I'm not sure

1589917306
alexnask
Time to indoctrinate some young people in the ways of zig

1589917329
pixelherodev
alexnask: I'll have you know I'm already indoctrinated, thanks

1589917332
pixelherodev
;)

1589917492
ikskuh
pixelherodev, you are faaar beyond that already :D

1589917613
[rg]
oh cool!!!

1589917697
[rg]
mlh sounds great, but I'm also looking for work, does sponser mean you get paid also?

1589917712
GreaseMonkey
i would be surprised if it didn't

1589918027
andrewrk
yes they pay students. it's an alternative to internships

1589918313
[rg]
ok, I'm hopefull to get through

1589918350
andrewrk
good luck!

1589918378
GreaseMonkey
had a thought i would have to apply when i finish work for the day: for implementing a deflate compressor i think the first thing to do would be to do Huffman compression without using the LZ stuff, the LZ stuff can come later

1589918581
GreaseMonkey
i'm thinking that the pre-Huffman chunks should be split into a maximum of 2^15 entries, when i get around to the LZ stuff i'd probably opt for a 32KB sliding window

1589918690
GreaseMonkey
in the interest of cleanliness i'd be happy to use a bit more space to keep the distances in a separate buffer, and the offsets from the base lengths and distances in a separate buffer still

1589918766
GreaseMonkey
that way i can calculate dynamic Huffman trees against the literal and distance buffers fairly cleanly

1589919120
pixelherodev
andrewrk: where's the application to?

1589919158
andrewrk
I sent a follow-up email asking this, will let you know when I get a response

1589919312
pixelherodev
Thanks :)

1589919853
pixelherodev
I really need to port my Register improvements from stage2 to Thor

1589920141
blueberrypie
pretty cool andrewrk.  nice to see development of Zig getting sponsored.

1589920426
andrewrk
pixelherodev, [rg], and other students: apply here:

1589920443
andrewrk
will make an announcement on other channels about this today as well

1589920502
pixelherodev
:)

1589920529
pixelherodev
Ugh, need to update my resume :P

1589920550
pixelherodev
At least I can add "Stage2 Zig contributor" now :)

1589921043
FireFox317
¨We’ll be funding up to 1,000 students to work full time on major open source projects under the mentorship of experienced engineers.¨ Damn, that is cool!

1589921088
pixelherodev
Nice :)

1589921330
pixelherodev
msg andrewrk ... I'm going to guess high school

1589921619
pixelherodev
Oohh, ZLS changes look awesome :)

1589921712
alexnask
pixelherodev, We have simple generic typefn support now :-D

1589921734
pixelherodev
I saw :)

1589921735
alexnask
ArrayList wont quite work but other std types do

1589921735
pixelherodev
:D

1589921737
pixelherodev
Updating now

1589921745
pixelherodev
I'm hopeful some of my custom types work :)

1589921771
alexnask
It should work if you have a single return with a container decl expression

1589921784
pixelherodev
:(

1589921787
pixelherodev
That's a "probably not"

1589921826
alexnask
I cant really see how to do anything but single return statements without evaluating comptime expressions

1589921847
alexnask
I will prob have to do this for simple booleans based on builtin + build option stuff

1589921866
alexnask
To enable std.os stuff too

1589922638
pixelherodev
Figured out why kak was running so slowly

1589922659
pixelherodev
There were like three hundred processes attempting to connect to the kak-discord daemon plugin :face_palm:

1589922666
pixelherodev
Which was dead

1589923147
pixelherodev
Hey, it works!

1589923153
pixelherodev
Now I just need packages, and I'm good!

1589923866
pixelherodev
alexnask: ZLS has access to build.zig, correct?

1589923918
alexnask
We dont do anything useful with it but we are planning to parse it and get build options etc

1589923957
scientes
when i try to build zig master I get (.text._ZN12_GLOBAL__N_118EmitAssemblyHelper30EmitAssemblyWithNewPassManagerEN5clang13BackendActionESt10unique_ptrIN4llvm17raw_pwrite_streamESt14default_deleteIS5_EE+0x1f15): referencia a `getPollyPluginInfo()' sin definir

1589923962
andrewrk
alexnask, one thing that's always been planned with build.zig is that an IDE or ZLS project would be able to run it in a special mode that outputs machine-readable information about the build. it is declarative, after all

1589923979
pixelherodev
Right, that's what i'm thinking

1589923986
pixelherodev
I might take a break later and add package support

1589924028
pixelherodev
Temporary patch idea:

1589924033
andrewrk
alexnask, so let me know if you get to that point and we can figure out what will work for you

1589924048
pixelherodev
In the config.JSON, add a `packages` array thats maps imports to paths

1589924065
pixelherodev
It adds a working short-term solution until proper parsing is done

1589924083
ikskuh
andrewrk: brainfart, but that means that build.zig is actually a full-featured project file where we can write an IDE with a project tree and everything

1589924084
alexnask
andrewrk, Sure, that makes a lot of sense

1589924084
ikskuh
:

1589924085
ikskuh
:D

1589924097
pixelherodev
ikskuh: yeah, I think that's the point :)

1589924104
ikskuh
it's awesome :D

1589924111
andrewrk
alexnask, in fact, one thing that's even possible now, since ZLS has access to the zig binary, is to have the ZLS have an alternative build runner zig file (e.g. implementing a different main() than std/special/build_runner.zig) which collects the build information and then does whatever you want with it

1589924160
andrewrk
you'd just @import("the-user-build-zig") using --pkg-begin the-user-build-zig path/to/build.zig --pkg-end and run it

1589924166
andrewrk
then call build()

1589924169
andrewrk
and then do whatever you want

1589924228
andrewrk
collecting package info in this way should be pretty straihtforward I think

1589924251
pixelherodev
I'll tackle that tomorrow, if nobody else wants to do it :)

1589924273
pixelherodev
I just need to get some other stuff done tonight, and then head to sleep early (since I was up at five this morning :P)

1589924280
pixelherodev
But I can probably get that done by noon tomorrow

1589924506
pixelherodev
Drats, onImport doesn't have the config :(

1589924555
pixelherodev
If it did this would be trivial

1589924596
pixelherodev
... meh, locally patching analysis to have Config isn't a big deal

1589924598
pixelherodev
It's temporary anyways

1589924630
alexnask
pixelherodev, On latest master we pass the zig_lib_path to the analysis context anyway, you can just modify that to take the whole config

1589924667
pixelherodev
Ohh yeah

1589924669
pixelherodev
Good point

1589925110
pixelherodev
Okay, that's simple enough

1589925616
pixelherodev
ugh, doesn't work though

1589925901
pixelherodev
Oh whoop

1589925904
pixelherodev
allocation missing

1589925954
andrewrk
damn I got nerd sniped by the perf benchmarks, I'm 2 hours into reworking the self hosted parser to go faster

1589925968
pixelherodev
Sniped?

1589925996
andrewrk
nerd sniping:

1589925998
fengb
Can’t know how fast you go without measuring it!

1589926058
pixelherodev
h

1589926060
pixelherodev
ah

1589926062
pixelherodev
lol

1589926122
pixelherodev
Screw it, not wasting more time on this

1589926675
[rg]
does zig have regular expressions?

1589926728
andrewrk
not in the std lib

1589926771
[rg]
that by design? or planned

1589926800
andrewrk
whether regex in the std lib is planned or not is yet to be determined

1589926820
[rg]
ok fair enough, regex is pretty complex

1589926822
pixelherodev
It's planned to plan whether to plan for regex

1589926846
andrewrk
true

1589926846
jhamren
lol

1589930234
foobles
when you use heap::c_allocator, do you have to free anything?

1589930246
foobles
or is that just done automatically when the compiler exits

1589930271
andrewrk
allocation with std.heap.c_allocator is equivalent to calling malloc() and freeing is equivlent to calling free()

1589930293
pmwhite
The is frees everything once the process exits.

1589930299
pmwhite
OS*

1589930313
andrewrk
the OS frees all your memory when your program exits, but if you do anything in a loop, that won't be quite enough

1589930532
pixelherodev
Is it worth sending a PR to fix a single typo, or should I look for more first? :P

1589930678
foobles
andrewrk I am allocating a buffer to pass to ir_build_phi_gen

1589930690
foobles
just like what ir_analyze_phi or whatever does

1589930696
foobles
and they dont free their ziglists

1589930750
andrewrk
oh yeah stage1 is pretty bad about freeing memory

1589930787
foobles
oh ok

1589930794
foobles
so its ok if I just don't worry about that?

1589930832
andrewrk
yeah it's ok. it matters more or less depending on context but we can work out these details during PR review

1589930868
pixelherodev
...

1589930876
pixelherodev
if I send patches to free memory, would they be accepted?

1589930887
andrewrk
of course, if they don't introduce use-after-free

1589930891
foobles
alright thanks

1589930893
pixelherodev
Coolio

1589930896
pixelherodev
I might look into doing that

1589930917
pixelherodev
Also, Thor works :D

1589930924
pixelherodev
Really freaking excited

1589930926
pixelherodev
It actually works

1589930928
andrewrk
register allocation?

1589930932
pixelherodev
and then some

1589930934
andrewrk
well done

1589930948
foobles
also one thing i noticed is that all the static `constexpr IrInstGenId ir_inst_id(Foo *) {` functions are never actually evaluated at compile time

1589930958
foobles
wow it put a winky face in my code

1589930969
foobles
but anyway, they are all passed runtime pointers

1589930976
foobles
so it still invokes them at runtimes

1589930994
pixelherodev
`EntryPoint(); msg = allocateRegister(.Pointer); LoadRegister(msg, &"hello, world"); Call(write, .{ 1, msg, len(msg) }, .{ VirtualRegister.Discard }); ExitPoint()`

1589931001
pixelherodev
Sorta pseudo-code to keep it small

1589931036
pixelherodev
Basically, there's a virtual ISA

1589931042
pixelherodev
You build code for

1589931054
pixelherodev
`msg` is a register on this virtual chip (obtained by allocateRegister)

1589931061
pixelherodev
The

1589931081
pixelherodev
Takes care of passing through to host functions (such as `write`, which is just a callconv(.C) shim over std.os.write)

1589931109
pixelherodev
Correctly handles multiple args, and supports multi-return

1589931161
pixelherodev
I plan on improving efficiency of generated asm before adding more; I want to make it within 3% as fast as using the raw backend for any given platform, to encourage usage of the high-level abstraction

1589931185
pixelherodev
One goal of this is to be able to hook it up to comptime processing in stage2

1589931204
pixelherodev
So that comptime code can be passed through to Thor, and from there to the native backend (x86, ARM, RISC-V, etc)

1589931765
andrewrk
foobles, you're welcome to try to re-arrange that code if it has same or better maintenance properties and better performance properties

1589931820
foobles
alright cool. would it be ok to use template overloading instead? if anything, maybe just getting rid of the `constexpr` since its misleading

1589932095
andrewrk
better yet would be something that doesn't depend on c++ features at all since we eventually want to not use any c++ in stage1

1589932105
andrewrk
but if that's better than status quo, go for it

1589932193
pixelherodev
ooh, I can port stage1 to C?!

1589932553
andrewrk
not yet

1589932569
andrewrk
first we have to be shipping stage2

1589932583
pixelherodev
Drats

1589932590
andrewrk
then stage1 needs to generate C instead of llvm

1589932596
andrewrk
then you can port stage1 to C

1589932597
pixelherodev
Even if it doesn't break anything and I do it incrementally? :P

1589932599
pixelherodev
Ohhhhh

1589932601
pixelherodev
I see

