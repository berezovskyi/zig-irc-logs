1594350760
pixelherodev
Looks almost like it's actually hitting OOM

1594351477
leeward
I do not get why TI felt the need to call their programmer a FET. It's not a field effect transistor. Grumble grumble.

1594357638
fraktor
Does anything like a channel exist in Zig? I'm looking at maybe doing some multithreading/async stuff and work queues would be super helpful.

1594357802
daurnimator
there's a std.atomic.Queue. not sure if that's the best choice

1594357885
daurnimator
its just a mutex around a tailqueue I think?

1594357885
fraktor
Cool.  Are there also condition variables and muticies in the standard library?

1594357911
fraktor
...well I'm dumb, I just found mutex.zig.

1594357915
daurnimator
mutex yes; "condition variable" has several different meanings depending if you're coming from compsci vs POSIX vs c++ vs ... etc.

1594357975
fraktor
I would like something that allows me to block until something else notifies it.

1594358780
daurnimator
fraktor: std.ResetEvent ?

1594383641
goodthingshappen
I have a little trouble packaging a project written in Zig for linux; I have error like "no access to builtin.zig". The source of problem is that a package build system of my linux distro doesn't provide a $HOME environment variable and doesn't create $HOME/.cache, $HOME/.cache/zig directories, so i have to

1594383699
goodthingshappen
create a pre-configure phase where i set HOME env variable and create ~/.cache/zig directory. Can Zig change it's behaviour to only use zig-cache from project specific directory?

1594383750
goodthingshappen
It would make packaging of projects written in Zig for various linux distros much easier.

1594383986
goodthingshappen
By the way good job with bootstrap process! I have great pleasure building Zig, especially after I discovered that to build Rust without depending on binaries from Mozilla you have to build like 30+ compilers, each new compiler depend on previous one

1594384934
goodthingshappen
fraktor: sadly, async doesn't work on wasm32-freestanding-musl and wasm32-wasi yet, see

1594385072
ifreund
goodthingshappen: I think the best thing to do would be to open an issue to discuss things. I think being easy to package is certainly a goal for zig

1594385316
goodthingshappen
I have some troubles with registering github this month, but if someone will create an issue about this, i'll appreciate it

1594387020
fraktor
daurnimator: Not quite. I guess I meant something more like a posix-compatible one, since this one needs to be set and then reset.  I suppose I could just call set and then reset immediately, but does that defeat the purpsoe of this?

1594387293
pixelherodev
Anyone have any idea how much RAM the non-FreeBSD CIs have?

1594387448
pixelherodev
This looks very much like an actual OOM issue

1594387555
pixelherodev
Except that it's the same issue on both CIs, regardless of platform

1594387561
pixelherodev
I'd expect at least a marginal difference if that was it..

1594387585
pixelherodev
... huh.

1594387587
pixelherodev
`Assertion failed at D:\a\1\s\src\ir.cpp:14180 in ir_analyze_widen_or_shorten. This is a bug in the Zig compiler.`

1594387595
pixelherodev
The Windows one gave more info than the other ones. Shocking.

1594387667
pixelherodev
Ohhhhh, I see; it's not my fault lol

1594387674
pixelherodev
It was based on the wrong commit

1594387687
pixelherodev
This failure was in the master branch, not me; just going to do a force-push and retrigger CI

1594392885
fraktor
I see that the builder in build.zig seems to have a pretty robust command-line parser.  Does that exist in the standard library?

1594393111
pixelherodev
I don't believe so

1594393121
pixelherodev
IMO We should extract it from build.zig into std.arg and use that

1594393130
pixelherodev
or std.cli.args or something like that

1594393144
pixelherodev
Alternately, the build system should be separated from stdlib

1594393187
pixelherodev
e.g. lib/build instead of lib/std/build

1594395545
pixelherodev
Ha!

1594395548
pixelherodev
I knew it wasn't my fault!

1594395583
pixelherodev
andrewrk: planning on handling @import anytime soon?

1594395590
pixelherodev
If not, I think that'll be my next big undertaking

1594395908
pixelherodev
Or maybe I'll refactor the test harness to allow defining multi-file tests, while maintaining the convenience wrappers for single-file stuff

1594395949
pixelherodev
That would allow for testing @import, shared libraries, static linking, etc

1594396907
ifreund
is it planned for zig to have shared libs?

1594396956
scientes
ifreund, you mean a standard library?

1594396972
ifreund
well c abi ones for sure, but I don't know about zig abi shilbs

1594396980
scientes
ifreund, zig supports shared libraries, but shared libraries are a PITA to maintain

1594396999
ifreund
scientes: I mean dynamic linking

1594397005
scientes
ifreund, yeah you can do that

1594397012
scientes
ifreund, it is compatible with the C ABI if you do

1594397025
scientes
but zig is not limited to such an interface

1594397053
scientes
I would really like to see a C-like language that targets FPGAs for example

1594397104
ifreund
yes I know that we have C abi dynamic linking, was wondering if zig abi dynamic linking was in the cards

1594397116
scientes
C-machine-language

1594397121
ifreund
not sure if it's a good idea tbh

1594397125
scientes
even if FPGAs are not C machines

1594397145
scientes
ifreund, zig does not have an external abi, it's external abi is the C ABI

1594397183
scientes
and the entirety of it's external ABI

1594397190
fengb
Zig ABI is not planned atm

1594397196
scientes
oh, zig also calls into the LLVM assembler

1594397206
scientes
so two external ABIs

1594397212
fengb
But it is brought up semi-regularly and not ruled out either

1594397260
scientes
fengb, I think you are missing the forrest for the trees

1594397277
fengb
I'm just stating facts

1594397289
shcv
zig seems like it would have multiple ABI options, that you select at compile time...

1594397293
fengb
It's not planned but it's also not completely ruled out

1594397318
scientes
shcv, what I am talking against is a over-ambitious scope of the zig project

1594397356
scientes
that I feel is losing track of one of the initial goals: replace C

1594397415
scientes
I just this that X86 is a really ugly language and that writing an assembler is not part of the goal of the zig project

1594397420
scientes
*feel that

1594400034
pixelherodev
ifreund: we already have shared libraries

1594400040
pixelherodev
and dynamic linking

1594401100
scientes
I hate how long C++ takes to compile

1594401471
leeward
scientes: verilog is a C-like language (syntactically, at least)

1594401488
leeward
So is SystemC

1594401496
scientes
leeward, I am talking about global memory addresses then

1594401520
scientes
with DRAM

1594401592
leeward
I'm not sure how that relates to FPGAs.

1594401661
scientes
i think a x86 assembler in zig is a waste of everyone's time

1594401664
leeward
Personally, I like VHDL better, but I think I'm rare there.

1594401693
leeward
scientes: I think that's true now, but hope it won't be true forever.

1594401729
scientes
then why are we doing it?

1594401742
leeward
We are?

1594401748
scientes
as Knuth says, the most important thing is the data structures

1594401761
scientes
leeward, check the git

1594401777
scientes
in the src-self-hosted

1594401804
ifreund
pixelherodev: not with zig abi, only C abi

1594401833
scientes
ifreund, what would this hypothetical "zig abi" do?

1594401837
leeward
huh

1594401847
leeward
Well, at least it's not a hard problem.

1594401856
shcv
what's wrong with assembler in zig? It seems pretty reasonable to me, and is done pretty regularly in C programs too...

1594401875
leeward
shcv: scientes is talking about an assembler, not inline assembler language.

1594401884
shcv
oh

1594401886
ifreund
uh, have zig types like error sets and tagged unions

1594401903
leeward
I think, anyway.

1594401909
scientes
ifreund, error sets are dynamic

1594401914
scientes
there is no ABI

1594401919
ifreund
right

1594401951
leeward
I think once ZIR is stable we can use it to ship "object code"

1594401957
shcv
I think the ABI should be somewhat configurable, so it can match other languages and runtimes more easily, or support the development of new ABIs

1594401965
leeward
It could serve the purpose of an ABI.

1594401966
shcv
plus, that removes the burden of "getting it right"

1594401975
scientes
leeward, but WHY is X86 a useful language to implement?

1594401983
ifreund
i dont think ZIR is planned to be stable

1594402023
scientes
there are many much better languages that can target X86

1594402030
ifreund
it's an implementation detail that makes debugging easier not an interface last I heard

1594402030
leeward
scientes: It's super common, but...not my call. I'd focus elsewhere and shell out to one of the many working assemblers out there.

1594402038
scientes
LLVM and MLIR and GCC/GIMPLE being the big ones

1594402119
scientes
I don't see the usefulness of attaching our boat to the intel boat

1594402133
ifreund
forgive me if I'm wrong, but don't you need a lot of control over codegen for incremental compilation?

1594402148
scientes
ifreund, I think we can use the LLVM JIT

1594402168
leeward
ifreund: It makes a lot of things easier. I don't know that it's planned, but I think it would be cool.

1594402185
leeward
I remember someone saying recently that llvm and incremental code gen are incompatible.

1594402198
leeward
I don't know enough about the subject to have an opinion though.

1594402207
scientes
well LLVM does have a global use list

1594402213
scientes
so it doesn't multi-thread well

1594402227
scientes
but that is a completely differen't problem

1594402254
scientes
ahh I see, as you have to compile the whole LLVMModule()

1594402262
ifreund
I agree that stable ZIR would be cool, you gotta convince andrew that it'd be worth the maintainence cost though

1594402281
scientes
I guess in that case MLIR would be better

1594402311
scientes
-global-isel means that the llvm compiler is getting faster

1594402329
scientes
It is not Javascript-class, but it would be fine for comptime

1594402386
leeward
I think a stable ZIR is the kind of feature that is worth adding post-1.0. I'll make the case to Andrew when the language itself has less churn.

1594402403
ifreund
I also think there's a lot of value in llvm not being a hard dependecy, it's not exactly one of those lightweight deps you can forget about

1594402442
ifreund
I mean, look at the recent packaging mess

1594402446
scientes
ZIR is exactly the thing that MLIR is designed so that you DONT need

1594402473
scientes
I also don't like branding everything Zig

1594402490
scientes
given that I think the project lost sight of its initial goal: replace C

1594402556
scientes
ZIR is a differn't language from Zig, and one that I don't see as useful

1594402567
leeward
Can't replace C (for me) without better architecture support than LLVM has. Granted, the effort could be put towards improving LLVM.

1594402602
scientes
leeward, that is the whole point of LLVM to solve the NM problem

1594402603
leeward
by architecture, I mean variety of CPU architectures

1594402627
scientes
that for N languages and M arches, you need N x M compilers

1594402704
leeward
Right, it's just that the actual LLVM implementation (today) fails to do that for several architectures. ARM support is great, but Apple doesn't care about weird chips they don't use.

1594402718
scientes
leeward, LLVM is not a Apple project

1594402728
scientes
not even slightly

1594402737
scientes
sure, they have a non-free AppleGPU target

1594402746
scientes
and they started the AArch64 backend

1594402769
scientes
leeward,

1594402797
scientes
leeward, LLVM actually does, it is just a matter of lack of interest in maintaining them

1594402807
leeward
I know it wasn't started by Apple, but Apple has put a lot of money into it.

1594402821
scientes
leeward, the real problem is that super small chips don't really need an optimizing compiler, so in that case a non-optimizing C compiler is easier to write

1594402846
leeward
All the chips I'm thinking of are supported by GCC.

1594402850
scientes
leeward, Google has put as much, and IBM hired people to do the Power backend, et cetera

1594402856
scientes
now Xilinx is working circt

1594402858
scientes
et cetera

1594402869
scientes
leeward, GCC also is a reasonable target

1594402887
scientes
I wouldn't think Zig had strayed it was targeting gcc JIT

1594402950
scientes
or just doing a simple interpreter

1594403461
shakesoda
my gpu compute style task system is almost working, if i can brain a little bit harder to get the last bits behaving

1594403530
scientes
shakesoda, what programs are you running on your GPU?

1594403532
shakesoda
it isn't really that much different from a regular thread pool/task thing, work submission is just in big groups

1594403557
leeward
So no pipelining?

1594403558
scientes
and what language/toolchain?

1594403558
shakesoda
scientes: this is for the cpu, but i wanted a scheduler that behaves more like the ones i use for graphics

1594403582
scientes
what are you scheduling?

1594403609
shakesoda
but to be sure i work on games, so this is things like weather, lighting, particle systems, general entity updates...

1594403662
shakesoda
leeward: some ability to do pipelining is in the design, but that's not a primary need up front

1594403738
leeward
shakesoda: Yeah, I didn't realize it was aimed at CPUs when I asked. It's not as important when you don't have more cores than tasks.

1594403770
shakesoda
yeah, i've got a plan for that but for my initial needs i have more tasks than cores

1594403797
fengb
downloadmorecores.com

1594403805
fengb
lol that's an actual website

1594403848
scientes
fengb, and it really lets you download more cores

1594403880
pixelherodev
scientes: we don't have an x86 assembler...

1594403903
pixelherodev
We have codegen, yes

1594403909
pixelherodev
But it's not x86 -> machine code

1594403913
pixelherodev
It produces raw machine code from IR

1594403921
shakesoda
leeward: a lot of my motivation here is just being used to thinking about group execution for threading in gl/vulkan, so this is a good step toward refactoring out a lot of single threaded code

1594403939
scientes
<pixelherodev> But it's not x86 -> x86

1594403943
scientes
FTFY

1594403968
shakesoda
i thought a bit about it and realized i kept having things that fit that model just fine, but were tremendously difficult to think about when thinking about tasks as individual things

1594404215
fraktor
I'm still a little hazy on why ZIR is the plan instead of using LLVM.  I understand it's a big dependency, but is it so complex that it would be easier to write a new set of "assemblers" from scratch?

1594404237
fraktor
s/easier/easier or better in some way/

1594404275
shakesoda
fraktor: faster compiles

1594404289
fengb
ZIR already exists in some degree. It's currently undocumented and kinda janky

1594404299
marijnfs
whats up with the HashMap?

1594404304
marijnfs
put changes i see

1594404311
scientes
fengb, this is the problem MLIR was generated to solve

1594404321
pixelherodev
scientes: not that, either

1594404329
pixelherodev
it's IR -> machine code

1594404332
pixelherodev
fraktor: yes.

1594404335
pixelherodev
LLVM is really that bad.

1594404342
pixelherodev
LLVM is six million lines of code.

1594404349
scientes
pixelherodev, I don't think you can do any better

1594404351
pixelherodev
We can get everything we need from it in a percent of that

1594404366
pixelherodev
scientes: it doesn't have to produce better code.

1594404373
shakesoda
scientes: building faster than llvm is not a high bar

1594404374
pixelherodev
This is about lightning fast

1594404376
scientes
pixelherodev, no, it is the data structures

1594404390
pixelherodev
? What is?

1594404393
shakesoda
building a faster executable

1594404405
scientes
pixelherodev, getting the data structures right is the most important thing

1594404421
shakesoda
well that's a general truth

1594404425
pixelherodev
Yeah

1594404434
pixelherodev
It's also important to remember the goals here

1594404440
scientes
and what is wrong with the data struvtures in MLIR/LLVM?

1594404442
pixelherodev
* Don't depend on a C++ compiler

1594404460
pixelherodev
* Targets that aren't supported by LLVM. Lots of them.

1594404464
shakesoda
i don't know about llvm's guts but it is hellishly slow

1594404472
pixelherodev
* As-fast-as-possible compilation in debug mode

1594404481
pixelherodev
LLVM misses all three of those, plus more besides

1594404487
fengb
Back in mah day, LLVM was fast!

1594404504
shakesoda
fengb: back in my day, llvm was... still slow! but faster than the other things!

1594404521
scientes
if you could make LLVM fast you would be rich, and you are not rich

1594404537
scientes
as LLVM is not GPL you could just fork it and then sell a "fast" version of LLVM

1594404539
scientes
and get rich

1594404548
scientes
the problem is that it is too much work

1594404554
shakesoda
that's making an awful lot of assumptions about the reader

1594404559
scientes
so the real problem: what is wrong with the LLVM/MLIR data structures

1594404575
pixelherodev
scientes: this isn't about making it

1594404579
pixelherodev
Rather

1594404583
pixelherodev
This isn't about making

1594404590
pixelherodev
This is a from-scratch design with

1594404600
scientes
pixelherodev, what are the various instruction selectors for LLVM?

1594404610
pixelherodev
LLVM supports many

1594404614
scientes
(this is a quiz)

1594404623
pixelherodev
lol

1594404633
shakesoda
pixelherodev: whens zigjit

1594404633
scientes
<pixelherodev> LLVM supports many

1594404635
shakesoda
:D

1594404637
scientes
hello superman

1594404670
scientes
yeah, if you think that is a good idea, I clearly am talking to a brick wall

1594404671
pixelherodev
shakesoda: technically, I could hook up ZIR to my JIT interface pretty easily, but I won't

1594404679
pixelherodev
It's not a good idea lol

1594404683
shakesoda
if you aren't trying to do everything in the world, and just want to get valid output as fast as possible, llvm will never be a path to victory

1594404691
pixelherodev
I want to accelerate

1594404698
pixelherodev
I don't want to make a JIT for actual Zig

1594404710
pixelherodev
One of them is already for all intents and purposes an emulator.

1594404713
fengb
I mean... isn't a comptime JIT basically a full Zig JIT already?

1594404720
scientes
pixelherodev, what are you accelerating?

1594404720
shakesoda
i dunno about making said jit for actual zig, but i would like to

1594404741
shakesoda
isn't comptime all interpreted, like, extremely slowly right now?

1594404744
pixelherodev
Yes

1594404744
scientes
anyways, I clearly am talking to a brick wall

1594404749
pixelherodev
lol

1594404754
scientes
comptime is also COMPLETELY UNIMPLEMENTED

1594404760
scientes
as in that it cannot alias at all

1594404777
pixelherodev
It's

1594404804
scientes
so why are you trying to run before you can walk?

1594404806
shakesoda
quizzing about llvm here just isn't a productive argument to be having, so yes, you're talking to a wall

1594404808
pixelherodev
I'm not.

1594404815
pixelherodev
scientes: I'm

1594404824
pixelherodev
I've so far floated it for

1594404833
pixelherodev
It's an idea for

1594404841
scientes
shakesoda, its just familiarity with the general structure

1594404862
pixelherodev
I've worked with LLVM IR, but libLLVM is just ugh.

1594404995
pixelherodev
scientes: one key reason to use our own backend is that a 20 minute build for the compiler won't be considered impressively fast.

1594405024
pixelherodev
The goal is to deliberately trade optimizations for as-fast-as-possible

1594405030
pixelherodev
And no, turning off optimizations with LLVM doesn't help.

1594405035
scientes
that is what the -fast-isel backend is about in llvm

1594405038
pixelherodev
Startup time for LLVM is nearly 10 milliseconds

1594405041
scientes
but now it is moving to -global-isel

1594405113
pixelherodev
Even if LLVM's compile speed w/o optimizations was able to match ours (it won't), it still doesn't change the numerous other reasons

1594405143
scientes
the only reason should be that you have better data structures than LLVM

1594405172
pixelherodev
I'm fairly certain we do, but I'm not willing to dig into LLVM to verify.

1594405184
scientes
you could also write bitcode

1594405186
scientes
and pipe it

1594405205
pixelherodev
Smaller compiler binaries, simpler to add new (even custom) backends, the

1594405216
scientes
all completely unprooven

1594405221
pixelherodev
LLVM isn't a good fit for stage2's goals, and there's really nothing that will change that

1594405222
scientes
and your confidence is scary

1594405255
pixelherodev
The entire impl is self-hosted / no external deps is

1594405256
shakesoda
the proving is building it ;)

1594405260
scientes
I don't like C++, but I ceetainly know that you don't have the man-power to write something like GCC or LLVM

1594405265
pixelherodev
Okay, so?

1594405267
pixelherodev
That's not our goal.

1594405269
shakesoda
uh, the explicit point is not making something like them

1594405274
shakesoda
that was the whole discussion

1594405277
pixelherodev
We're explicitly not

1594405280
scientes
even something like v8 or spidermonkey

1594405286
scientes
is way beyond our man-power

1594405287
pixelherodev
Again, not

1594405306
pixelherodev
Everything you've listed has one shared quality: complexity.

1594405309
shakesoda
generating machine code quickly from an ir isn't an intractable problem

1594405321
scientes
shakesoda, no, the problem is WHAT is the IR

1594405324
shakesoda
generating optimal code is what makes those kinds of things hard

1594405368
pixelherodev
We're designing said IR specifically for Zig.

1594405381
scientes
and having more than one back-end for the same platform is not good for debuggability

1594405382
pixelherodev
It won't be possible to target it with anything else (we're explicitly not supporting other people using it)

1594405414
pixelherodev
scientes: what other backend are you talking about?

1594405450
shakesoda
the only relevant backends here are different cpu architectures?

1594405460
pixelherodev
yes

1594405473
scientes
RIP Zig

1594405478
pixelherodev
(CBE doesn't really count here)

1594405482
pixelherodev
scientes: lol, why do you say that?

1594405485
scientes
it will end up x86-only

1594405489
pixelherodev
no, it won't.

1594405492
shakesoda
um, no lol

1594405503
shakesoda
first off lots of us use arm, second off, nobody said llvm is going away

1594405504
scientes
or you will have both custom and llvm back-end for x86

1594405505
pixelherodev
heh, just to prove the point, I'll add a SPU Mark II backend rn

1594405510
scientes
which is the two backends problem

1594405512
pixelherodev
neither of those is happening.

1594405546
fengb
We also have a C backend

1594405581
pixelherodev
LLVM support would probably be CBE | Clang, and not dedicated support

1594405633
companion_cube
scientes: is it unrealistic to still have llvm and self hosted as backends?

1594405641
companion_cube
I don't see why it wouldn't work

1594405648
companion_cube
it's what D does

1594405673
scientes
companion_cube, its possible, it is just that you have to handle all the custom stuff

1594405693
pixelherodev
Yeah, that's kinda the

1594405741
pixelherodev
Actually, just to confirm

1594405750
pixelherodev
ikskuh: you have no problem with me working on the SPU II backend, right?

1594405755
pixelherodev
You don't want to do it yourself or anything?

1594405854
pixelherodev
Silence will be taken as permission ;D

1594405891
fengb
That's not exactly how contract laws work

1594405904
ikskuh
pixelherodev: feel free

1594406065
pixelherodev
fengb: clearly, it is :D

1594406068
pixelherodev
ikskuh: Gladly :D

1594406078
pixelherodev
I suppose that means adding it to CrossTarget

1594406106
leeward
engb: What do you mean? Are you telling me that the tiny print on this thing that says "PRIOR TO USING <THING>, THE USER MUST REVIEW ... STANDARD TERMSAND[sic.] CONDITIONS FOR <THING>" isn't legally binding?

1594406138
leeward
er, fengb ^

1594406141
companion_cube
scientes: special stuff like simd, you mean?

1594406158
companion_cube
having a custom backends for a bunch of architectures isn't that hard

1594406168
companion_cube
what's hard is to reach the level of optimization of LLVM

1594406189
ikskuh
<pixelherodev> I suppose that means adding it to CrossTarget

1594406196
ikskuh
lol this is gonna be fun!

1594406198
pixelherodev
yep

1594406208
pixelherodev
First non-LLVM target in there, right? :D

1594406216
ikskuh
i think so

1594406260
ikskuh
i think i'll spec out the CPU today

1594406278
ikskuh
there's only two things on the todo list: cpuid instruction and some "cpuctrl" instruction

1594406332
scientes
why not just write to SSE2?

1594406376
scientes
uggh

1594406384
scientes
thinking about what a clusterfuck x86 is gives me a headache

1594406481
ikskuh
scientes: enjoy the spu2 :)

1594406590
leeward
Gotta love duplicated documentation, where in one place it tells you that the argument is ignored, and in the other place it doesn't tell you how to use it.

1594406636
pixelherodev
scientes: what about SSE2?

1594406685
leeward
And, special added bonus: it's not ignored.

1594406700
pixelherodev
lool

1594406703
pixelherodev
leeward: what's that from?

1594406711
leeward
msp430-gcc

1594406715
pixelherodev
lols.

1594411603
Cadey
andrewrk: congrats on the nonprofit

1594411935
andrewrk
thanks! gonna be able to make showtime?

1594411956
andrewrk
wait, are we both sponsoring each other?

1594413206
pixelherodev
XD

1594414134
marijnfs
what's up in zigworld

1594414136
ikskuh
andrewrk: i thought about that. when two people sponsor each other and github doubles the sponsoring…

1594414138
marijnfs
did you remove llvm yet

1594414144
pixelherodev
ikskuh: lol

1594414148
pixelherodev
marijnfs: no :P

1594414164
marijnfs
i saw some cool work there, zig could be the new llvm

1594414176
pixelherodev
That's not happening, sorry

1594414178
leeward
That seems...unlikely.

1594414181
pixelherodev
Zig is focused on ZIg.

1594414181
leeward
Also, not the goal.

1594414183
pixelherodev
Zig*

1594414185
pixelherodev
Yeah

1594414207
marijnfs
not with that spirit

1594414213
shakesoda
the zig level virtual machine

1594414228
marijnfs
that would be fine too

1594414238
pixelherodev
Our IR is for Zig only, for instance

1594414256
shakesoda
how constraining actually is that, though

1594414258
marijnfs
that's how llvm started

1594414277
marijnfs
that's the vm

1594414292
pixelherodev
ikskuh, andrewrk: any preference on how spu-ii should be named in std.Target.Arch?

1594414292
ifreund
being llvm is not a sane goal or a good one

1594414304
shakesoda
+1

1594414311
pixelherodev
Is there a specific naming convention / typical way you refer to SPU II?

1594414316
pixelherodev
Agreed

1594414316
shakesoda
llvm is fine at being llvm

1594414319
pixelherodev
LLVM is not what we want, at all.

1594414381
andrewrk
marijnfs, yep, the self-hosted compiler so far has no llvm dependency

1594414387
andrewrk
it's planned to be an optional dependency

1594414404
pixelherodev
I'm still hoping I can convince Andrew that we don't even need it for that lol

1594414408
shakesoda
the idea is that it will be for opt builds, right

1594414421
pixelherodev
Or at least to make sure that we don't need it for anything other than optimizations even when it's optional

1594414433
andrewrk
yeah, it would unlock llvm's optimization, and features such as translate-c and `zig cc`

1594414445
shakesoda
those are all very valuable things

1594414448
pixelherodev
I'm still wanting to work on a C frontend / semantic analysis :P

1594414512
ifreund
pixelherodev: imo that shouldn't be a priority, not a great cost/benefit ratio when there is still so much else to do

1594414521
pixelherodev
I'm well aware.

1594414528
pixelherodev


1594414552
pixelherodev
But I also recognize it's not worth it to the Zig community at large

1594414557
pixelherodev
And you all come first ;)

1594414565
ifreund
<3

1594414591
pixelherodev
That's why I'm working on SPU II backend, for instance

1594414598
pixelherodev
Helps test our current design and find shortcomings

1594414702
ifreund
I kinda want to try my hand at implementing a backend at some point in the far future, never done any codegen before

1594414734
companion_cube
maybe someone should do a bytecode interpreter, too

1594414737
companion_cube
for comptime :p

1594414893
ikskuh
<pixelherodev> Is there a specific naming convention / typical way you refer to SPU II?

1594414900
ikskuh
i'd prefer spu-2

1594415706
pixelherodev
ikskuh: is - valid in Zig identifiers?

1594415712
pixelherodev
nope

1594415717
pixelherodev
spu_2? spu_ii

1594415719
pixelherodev
?

1594415736
ikskuh
spu_2

1594415812
pixelherodev
Okay

1594416914
ikskuh
pixelherodev: i could do the stupid…

1594416928
ikskuh
latest document revision of spu mark ii spec is 1.9

1594416935
ikskuh
updating it would be 1.10 or 2.0 :D

1594417123
pixelherodev
2.0 pls :P

1594417165
ikskuh
nah

1594417169
leeward
1.9 plus minor rev is 1.10

1594417186
ikskuh
lemmi: you can't tell me how to version my CPU! :D

1594417194
ikskuh
*leeward

1594417199
ikskuh
there will definitly be a .11 and .12 though

1594417231
leeward
ikskuh: I can't, but I can tell you what is a sensible versioning scheme that won't cause major confusion.

1594417246
ikskuh
using only pow2s:

1594417249
ikskuh
1 2 4 8 16 32

1594417266
fengb
Yes but only list the exponent value

1594417267
leeward
Don't you mean, 1 10 100 1000 10000?

1594417281
ifreund
1.a

1594417296
shakesoda
scientific notation for sure

1594417329
shakesoda
maybe really mix it up and do it in a strange base

1594417348
ifreund
once you get to 1.z you can rethink things

1594417361
ikskuh
Version 1e4

1594417378
ikskuh
next minor release is 2e4, next major release is 1e5

1594417382
ifreund
and don't skip 1.ö

1594417391
fengb
Followed by 1f4

1594417391
ikskuh
1.ß

1594417415
shakesoda
now this is a spicy versioning scheme

1594417422
shakesoda
i am in full support

1594417450
ikskuh
version = unicode codepoint

1594417536
shakesoda
i like how this would mean you have nonprintable version numbers

1594417582
leeward
Every point release is an extra diacritic.

1594417733
shakesoda
ah yes, version  ̶̛̳͓̳̌̑͂̈́͆̐̅͝

1594417754
shakesoda
not to be confused with version  ̶̛̛̫̼̭̞̫̳͚̹̼͉̥̦͉̱̹̞̮̳̥̽̊̇̋̈́͂̌̈́̌͐̍́̑̚͝, which came much later

1594417801
fengb
My screen is melting

1594417843
ifreund
all I see is this:

1594417858
ifreund
oops, add a .png

1594417904
shakesoda
the fact that lots of things can't actually render this correctly really adds to the mystique of this versioning scheme

1594418099
leeward
syntactic versioning?

1594418481
pixelherodev
ikskuh: you support ELF, right?

1594418488
ikskuh
errrm

1594418491
pixelherodev
Technically

1594418493
ikskuh
support ELF where?

1594418501
pixelherodev
Then you use binutils to convert to ihex?

1594418509
ikskuh
that's possible, yes

1594418516
ikskuh
but i have only a IHEX loader

1594418522
pixelherodev
What machine number would you use, for ELF?

1594418527
ikskuh
$(random)

1594418530
ikskuh
no idea

1594418544
pixelherodev
Hmm

1594418549
pixelherodev
Maybe it's time to add a non-elf backend

1594418552
pixelherodev
:P

1594418590
ikskuh
no. just use $(RANDOM)

1594418622
leeward
Debuggers like ELF.

1594418634
pixelherodev
lol nah

1594418639
pixelherodev
This is worthwhile regardless

1594418640
leeward
Even if it gets objcopy'd to ihex later

1594418701
pixelherodev
I might do elf *too*, but it's probably better to add non-ELF support too

1594418713
ikskuh
pixelherodev: tip of the day: FOCUS

1594418726
pixelherodev
I am

1594418734
pixelherodev
Keep in mind, why did I say I was doing this?

1594418761
pixelherodev
> Helps test our current design and find shortcomings

1594418771
pixelherodev
Only supporting platforms that support ELF is a shortcoming IMO

1594418778
pixelherodev
I want to make sure we properly support other formats from the start

1594418790
pixelherodev
And I already know exactly how to do it, too

1594418793
pixelherodev
Same thing I did for CBE :)

1594419131
pixelherodev
Hmm

1594419137
pixelherodev
ikskuh: if you prefer, I can do it as ELF first?

1594419152
ikskuh
why implement objcopy again? ;)

1594419157
leeward
^^

1594419163
ikskuh
objcopy does the job already if there is a ELF output already

1594419163
pixelherodev
lol, I wouldn't ne

1594419165
pixelherodev
be*

1594419177
pixelherodev
Because we should make sure there's proper support for other formats first

1594419186
pixelherodev
It'd be generating IHEX directly

1594419259
marijnfs_
sweet, a foundation

1594420729
pixelherodev
Hmm

1594420732
pixelherodev
ikskuh: I think you have a point

1594420735
pixelherodev
I'll work on machine codegen first

1594420740
pixelherodev


1594420753
pixelherodev
Seriously though, mind tossing me an ELF number?

1594420755
pixelherodev
:P

1594420770
pixelherodev
Meh, I'll pick the first unused one I guess

1594420811
pixelherodev
`/// SPU Mark II. This is not a legitimate number. Don't rely on it.`

1594420813
pixelherodev
:P

1594421602
pixelherodev
so much easier building the actual compiler than testing it lol

1594421735
bastienleonard
hi, is Zig's colorblind async/await similar to what's described here?

1594422093
ifreund
yes, you can think of zig's async await syntax as the minimum needed to implement coroutines in userland with nice ergonomics

1594422115
bastienleonard
thanks

1594422157
ifreund
the details obviously differ a bit from lua ofc

1594422160
ifreund
np

1594422390
pixelherodev
...

1594422395
pixelherodev
does ELF not support 32-bit address spaces?

1594422429
pixelherodev
Yeah...

1594422431
pixelherodev
`The ELF header defines whether to use 32-bit or 64-bit addresses.`

1594422570
pixelherodev
Hmm, but AVR supports it, so maybe if I can find the AVR ELF spec...

1594422649
pixelherodev
Found motorola 8-bit spec, which should be enough

1594422754
pixelherodev
tl;dr: going to use a 32-bit header, and simply not use the upper sixteen bits of the address space

1594423088
Cadey
andrewrk: we are both sponsoring eachother on patreon, yes

1594423105
Cadey
the net difference leaves you +$15 though lol

1594423133
Cadey
my only regret is not being able to really afford to contribute more :(

1594423276
companion_cube
Cadey: are you the nix blogger?

1594423280
Cadey
yes

1594423290
Cadey
and increasingly the rust blogger too

1594423331
pixelherodev
`a.zig:9:1: error: TODO implement function parameters for Arch.spu_2`

1594423333
pixelherodev
woot

1594423409
pixelherodev
Need to figure out how to handle these

1594423414
pixelherodev
Going to be purely on the stack, probably

1594425142
pixelherodev
andrewrk: any objections to a test harness to compare generated raw machine code?

