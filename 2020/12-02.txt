1606867724
andrewrk
17

1606867924
pixelherodev
Nice!

1606868119
andrewrk
16

1606868286
andrewrk
15

1606873780
g-w1
andrewrk: I figured out why llvm-ar.id is in the cwd (#6943). it is because it is trying to save the digest of the cache hash of all the stuff in the archive. but it is putting it in the output directory, which is in this case the cwd(). the relevant line is llvm.zig:558. I do not know what the intended way to fix this is? is there a check in Compilation whether zig build called build-lib or a human

1606873782
g-w1
on the cli called it? or should llvm-ar.id be put in zig-cache?

1606874616
g-w1
I think it could go in base.options.module.?.zig_cache_artifact_directory

1606875756
g-w1
ok I made a pr

1606875802
andrewrk
nice g-w1 - I'll take a look at this tomorrow

1606904524
vesim
Hi, i have problems with versioned symbols in glibc, "lld: error: undefined symbol: memfd_create [...] did you mean: memfd_create@GLIBC_2.27" is there any workaround for that?

1606905047
ifreund
vesim: what OS/zig version?

1606905123
vesim
ifreund: 0.7.0+39336fd2e and arch linux

1606905249
ifreund
vesim: hmm, could you put the output of `zig build-exe --show-builtin` in a pastebin or something?

1606905276
ifreund
I feel like it's detecting the wrong target or something

1606905330
vesim
ifreund:

1606905365
ifreund
yup, arch definetly has a newer glibc than 2.17

1606905432
ifreund
you can try specifying the target explicity, -Dtarget=native-native-gnu2.32

1606905446
ifreund
i think that's the wrong syntax for the glibc version though...

1606905502
vesim
yep, it doens't recognize it

1606905601
vesim
hmmm, there is x86_64-linux-musl

1606905725
ifreund
ugh, there's someway to set the glibc version to target but I can't figure it out

1606905744
ifreund
this is a bug that it's detecting the wrong version though

1606905816
vesim
and also i was trying to use musl via the "libc file", it linked fine

1606905824
vesim
but set wrong RPATH

1606905861
vesim
I had "crt_dir=/usr/lib/musl/lib" in my libc file, but it set the rpath(or libc.so) to /usr/lib

1606905902
vesim
and with LD_LIBRARY_PATH=/usr/lib/musl/lib the binary was crashing

1606905922
vesim
but that can be related to targets

1606906320
ifreund
vesim: ah, it's native-native-gnu.2.32

1606906357
ifreund
. not a -, had to find the code parsing it :/

1606906650
vesim
ifreund: is that bug already reported?

1606906786
ifreund
well I had the issue on void but that got fixed, the issue itself is still open though:

1606906820
ifreund
would be nice if you could add a comment with info about your system and the output from --show-builtin

1606907856
ikskuh
heya

1606907871
ikskuh
isn't it possible to use try inside a inline-while loop?

1606908466
ifreund
uh, yeah I don't see why that shouldn't work

1606908700
ikskuh


1606908705
ikskuh
this is why :D

1606913908
pixelherodev
I am once again considering spending time on a totally distinct Zig compiler...

1606913923
pixelherodev
I

1606914004
pixelherodev
but I really want to :P

1606914109
ikskuh
why?

1606914122
g-w1
do you mean like a totally different implimentation?

1606914125
pixelherodev
Yeah

1606914130
pixelherodev
A pure C99 one

1606914131
ikskuh
especially why before a specification

1606914132
ikskuh
;)

1606914145
ikskuh
it's not really worth the effort

1606914166
pixelherodev
Because stage1 is awful, and while I like stage2, I dislike incremental compilation

1606914198
pixelherodev
and I think I can make a simpler implementation...

1606914211
ikskuh
then just make a non-incremental backend for stage2? :D

1606914216
ikskuh
we need that anyways for release modes

1606914227
pixelherodev
Eh, that kinda misses the point

1606914235
ikskuh
why?

1606914235
pixelherodev
"I dislike a feature" !-> "disable it!"

1606914245
pixelherodev
I think stage2 is a tad overcomplex for my tastes

1606914289
pixelherodev
Also: I think a pure C99 implementation from-scratch would be a better solution for bootstrapping than twisted the CBE to produce stage2-but-in-c

1606914303
ikskuh
i think making a non-complex zig compiler is not possible :D

1606914305
pixelherodev
CBE has always been intended as a fallback for where we don't have a working backend

1606914321
g-w1
would you use assembly as output, or something else?

1606914325
pixelherodev
Yeah

1606914341
pixelherodev
I know I'm one of the ones who advocated for it, but... I find the idea of CBE-ing stage2 kinda repulsive after more thinking about it

1606914561
pixelherodev
ikskuh: I heavily disagree

1606914584
pixelherodev
Zig is inherently more complex than C, yes

1606914592
ikskuh
by a lot

1606914616
pixelherodev
Not as much as it appears at first glance

1606914630
pixelherodev
There's one or two really big sources of complexity on which everything else is built

1606914655
pixelherodev
comptime is the obvious one - but a

1606914782
pixelherodev
plus,

1606914785
pixelherodev
e.g. preprocessing

1606914984
pixelherodev
everything non-comptime is pretty simple

1606915098
g-w1
do you think that your compiler could not have comptime, and just do manual generics and the sort?

1606915114
pixelherodev
Nah

1606915118
pixelherodev
I mean, yes, but I wouldn't

1606916146
ifreund
why not use qbe as the backend?

1606916212
ifreund
from what I can see it would make implementing the C ABI stuff quite easy as well

1606919027
pixelherodev
ifreund: limited targets, mainly

1606919233
ifreund
ah, yeah, x86 only so far

1606919379
pixelherodev
and experimental arm!

1606919716
ifreund
nice, the homepage made it sound like implementation hadn't started yet for arm

1606920008
pixelherodev
Not mainlined

1606923444
companion_cube
Translate qbe to zig, then it can be improved

1606923523
fengb
Does Cranelift have a usable C ABI?

1606923763
ifreund
isn't cranelift part of wasmtime now?

1606923798
fengb
Really? I thought they were experimenting to port rustc over

1606923801
ifreund
also rust is the opposite direction from where pixelherodev wants to go

1606923848
fengb
We should implement translate-rust ðŸ™ƒ

1606923864
ifreund
yup:

1606923876
ifreund
and the cranelift repo just links there

1606924166
ifreund
neat, there's a QBE thread towards the top of HN right now

1606929389
jaredmm
If I'm blocked by

1606929743
ifreund
jaredmm: use `zig translate-c` on the header then manually clean up the output and import the result as a normal zig file

1606930502
jaredmm
That's what I've been doing. If I have multiple types shared between different libraries, will I need to manually generate them all to ensure that the type checking...checks out?

1606930639
jaredmm
IE library B has `struct Some_Thing` that is defined in library A. Is there any way to alias those so that library A can still use cimport if library B has a problem?

1606930764
ifreund
unfortuneatly not

1606930791
ifreund
I recommend making a small c header that imports everything you need and then running translate C on that

1606931180
jaredmm
Aye. I was trying to add a new library after generating / cleaning up a few other ones and was looking for a way to not have to do that again. Not as reproducible as I'd like. Thanks for the confirmation.

1606931211
marler8997
haven't read it all yet but this looks good:

1606931226
ifreund
well you can always just paste the relevant extern defs from the new library into your already cleaned up code

1606931227
marler8997
advice to programmers on how to make it easy to review their pull requests

1606931280
g-w1
thanks. i needed that

1606931387
marler8997
QUOTE "I often see authors treat their reviewers like personal quality assurance technicians"...lol

1606931773
jaredmm
ifreund: That works for inconsistent type names, but it also generates duplicate definitions that I need to remove. Isn't difficult, but I am lazy.

1606931956
marler8997
and this ones about how to review:

1606934313
FireFox317
andrewrk, are you available for a quick question about stage2?

1606934428
ifreund
if you ask the question instead of asking to ask there's a chance someone else may be able to answer it as well

1606934470
FireFox317
true ifreund. Its actually about code that you wrote, the wasm backend. Nypsie is working on stream currently to improve it

1606934493
ifreund
oh cool

1606934521
FireFox317
and for wasm you have to declare a section which stores which locals are used, however we are not sure where we should get this information from.

1606934544
FireFox317
Like we can look at the Zir instructions and figure it out using that, or maybe this information is available in the module or something

1606934571
ifreund
locals in wasm are like infinite registers

1606934586
ifreund
look at the code doing register allocation

1606934654
andrewrk
FireFox317, yep

1606934733
ifreund
also be aware that the wasm codegen should almost certainly be integrated into the main codegen code path instead of being completely separate

1606934754
FireFox317
andrewrk, so we are currently in codegen/wasm.zig and we have to figure out all the mutable local variables in a functions. Is this information avaialbe somehwere?

1606934804
ifreund
I put it in a separate file just so I didn't have to understand the much farther along x86 code when figuring out the incremental compilation for wasm

1606934813
FireFox317
ifreund, i see

1606935132
marler8997
g-w1, just saw your PR, the realpath substituation may not work

1606935392
FireFox317
so andrewrk, there is no information in Module or something, that tells us the mutable variables in a function? We have to look at the zir instructions for that?

1606935600
ifreund
yes, you need to look at the zir. it may not correspond directly to the zig source code due to e.g. an optimization pass or similar

1606935702
FireFox317
ifreund, okay yeah that sounds indeed logical, because maybe some variables are optimized away or something similar

1606935799
Nypsie[m]
ifreund, thanks for the help btw. Much appreciated. Would it be correct to assume an Inst of tag alloc, would be a local in this case?

1606935877
ifreund
afaik yes

1606935899
Nypsie[m]
I see, thanks!

1606935900
ifreund
I haven't done much with zir yet though

1606935932
andrewrk
FireFox317, a local variable corresponds to an "alloc" instruction

1606935936
Nypsie[m]
No problem, any help is appreciated. Just trying to understand more of stage2 as I go along. Would be cool to have some more wasm backend features implemented by the end of the month :)

1606935967
andrewrk
FireFox317, the IR instructions in zir.zig are reasonably well documented

1606935986
g-w1
does a comptime local variable have to have an alloc? trying to work on those and having trouble because codegen is trying to alloc a type

1606935990
ifreund
I think the first step that needs to happen for wasm progress is getting it integrated into the main codegen.zig

1606936004
Nypsie[m]
andrewrk, I think that also confirms my question to ifreund above, thanks

1606936017
FireFox317
andrewrk, Thanks! That is really helpful

1606936050
Nypsie[m]
ifreund, is that something you wanting to do by yourself, or something I could give a shot at?

1606936054
andrewrk
g-w1, FireFox317, Nypsie[m]: the zir.zig instructions are pre-analysis; they are generated by astgen.zig. sema.zig takes these and outputs the instructions in ir.zig. then codegen.zig turns that into machine code

1606936098
andrewrk
comptime stuff happens in sema.zig. by the time codegen.zig is doing anything, all comptime stuff has been resolved

1606936106
ifreund
Nypsie[m]: go for it, My TODO list is 10 miles long

1606936189
g-w1
the problem that I am running into is in rnWrap.ptr I have a function that returns a type, but astgen can't know that so it rlwraps a pointer. this causes a CoerceToPtrElem in the zir, so when trying to make alloc on a comptime variable emit mod.constVoid, it doesn't work because CoerceToPtrElem doesn't expect a constVoid

1606936210
g-w1
s/rnWrap/rlWrap

1606936282
Nypsie[m]
ifreund, great! Will keep you updated on the progress.

1606936302
Nypsie[m]
andrewrk: That makes it a lot more clear. Thanks for that!

1606936337
g-w1
it rlWraps it to a ptr in varDecl astgen.zig:514. Should I add a zir inst to check if it is a comptime or runtime value and do stuff based on that?

1606937385
andrewrk
g-w1, it's hard to understand - can you show some example zig code / zir with your question?

1606938171
g-w1
andrewrk: hopefully this is more clear

1606938462
andrewrk
thanks, it helps to see the case you're working on

1606939249
andrewrk
g-w1, I think you might be taking on a very difficult task. In order to answer your question I essentially have to go implement it myself

1606939435
g-w1
ok. I guess comptime locals are harder than I thought. Ill work on another part of the compiler, thanks. its funny how solving one TODO about checking mutability in alloc spirals into implimenting comptime :)

1606940026
andrewrk
yeah haha. everything is related

1606946638
pjz
why does zig complain about extra ;s ?

1606946687
pjz
eg. if I put a ; after a for or while

1606946709
pjz
I guess empty statement isn't a valid statement?

1606947409
andrewrk
the more "negative space" there is, the less likely that a typo or other human error ends up manifesting in runtime behavior

1606947426
andrewrk
that is why zig syntax is generally strict

1606947582
andrewrk
Congrats to Jakub Konka who is now a part time paid contractor for ZSF! ðŸŽ‰

1606947595
BaroqueLarouche
woot!

1606947603
pjz
maybe better error location then?  adding an extra ; after a block doesn't throw an error until the

1606947616
pjz
wow, gz!

1606947698
pjz
<-- trying the advent of code

1606947802
andrewrk
yep there is always room for improving error messages. I hope you can understand why I would tend to prioritize spending effort other things though. for example finishing the language

1606947976
pjz
sure sure

1606947993
pjz
just one of those things that noobs will bump into that more experienced people won't

1606948031
pjz
though I'm not sure about the rationale of 'negative space'

1606948187
pjz
empty

1606948189
pixelherodev
Congrats!

1606948478
andrewrk
pjz, we need a way to represent the void value

1606948922
pixelherodev
andrewrk: how much change do you expect between 0.7 and 1.0 to the language itself?

1606949754
ifreund
well, all the accepted proposals for one

1606949926
pixelherodev
Well yeah :P

1606949953
pixelherodev
I need to plan out my current projects, but I think I have time for a Zig compiler...

1606949968
pixelherodev
Especially if it's intended for maximum simplicity

1606950025
ifreund
an alternative implementation before 1.0 would be quite unusual :D

1606950228
pixelherodev
andrewrk: if I get a C-based implementation ready, would that be an acceptable alternative to the CBE bootstrapping plan?

1606950313
ifreund
that seems like a lot of duplicated effor

1606950316
pixelherodev
Not really

1606950325
pixelherodev
Just the opposite; it's intended to

1606950347
pixelherodev
It'd probably replace the CBE on my priority queue, but I'd still be able to help others who wanted to help out (as I did with tetrux's emit-h PR)

1606950349
ifreund
as I understand it the plan is to wait until shortly before 1.0

1606950357
ifreund
to do the one time translation

1606950376
pixelherodev
Yeah, but it means a) distorting CBE into something it's not meant to do and b) cleaning up the generated code afterwards, which is explicitly mindless tedium

1606950390
pixelherodev
and the result

1606950402
pixelherodev
What I'm proposing is a vastly simpler solution

1606950427
ifreund
you don't have to implement codegen for all targets twice

1606950442
pixelherodev
I wouldn't be supporting every possible target, of course

1606950442
andrewrk
why don't you start by replacing stage1's buggy comptime implementation with a super clean one that uses less memory?

1606950455
pixelherodev
Because I'm not convinced stage1 is salvageable?

1606950456
pixelherodev
:P

1606950470
pixelherodev
More helpfully, isn't it already tightly integrated?

1606950557
pixelherodev
Also, one of my goals here is to get a compiler I actively *like*; stage2 is much closer than stage1 for me, but a simple and clean design would be much much closer

1606950648
pixelherodev
Cleaning up stage1 would be nice... but it'd still depend on LLVM, it'd still be a memory hog without

1606950664
ifreund
I mean, if you want to do it, I say do it

1606950697
pixelherodev
Thing is, it'd detract from my CBE efforts

1606950714
pixelherodev
and while

1606950743
ifreund
personally I think that the CBE one time translation path is the most reasonable way forward

1606950751
pixelherodev
Why's that?

1606950778
pixelherodev
To be clear, CBE is explicitly designed to generate binaries masquerading as C, not C source code

1606950809
pixelherodev
The entire point is to support platforms which have a C compiler but no Zig backend; there have been a number of design decisions already that harm generated code readability

1606950845
pixelherodev
CBE one time translation means, effectively, rewriting the CBE to make more readable source, doing a one time generation, *deleting that CBE rewrite entirely*, and then cleaning up the generated code - which will not be trivial by any means

1606950851
ifreund
It means that the focus is 100% on the self hosted compiler from the moment it can replace stage1 until shortly before 1.0 when the translation occurs

1606950878
pixelherodev
Yes, which is only a plus if you consider the self hosted compiler to be a superior alternative to a from-scratch design anyways

1606950907
ifreund
which I do, I want crazy fast compilation for big projects

1606950909
BaroqueLarouche
the sooner I get packed struct that works, the sooner I'll be happy :D

1606950914
pixelherodev
If I haven't made it clear, I don't; entirely subjectively, I have a major dislike for the incremental pipelining, direct machine codegen, etc

1606950914
ifreund
and a built in language server

1606950918
pixelherodev
That too

1606950922
pixelherodev
That's another thing I consider abhorrent

1606950928
pixelherodev
For, again, entirely subjective reasons

1606950944
pixelherodev
I'm of the opinion that my compiler should be a compiler

1606951035
ifreund
you're right that your version of the compiler would be a hell of a lot easier to maintain for bootstrapping

1606951061
andrewrk
zig eats a lot of complexity to provide simplicity for the programmer

1606951082
pixelherodev
andrewrk: yes, but there's additional complexity which I'd argue doesn't serve that purpose

1606951084
andrewrk
sometimes this complexity can leak, especially pre-1.0

1606951110
pixelherodev
As mentioned in the last few minutes: incremental compilation, in-compiler LSP support

1606951151
ifreund
incremental compilation is an awesome feature for users IMO

1606951155
andrewrk
zig compiling things fast prevents people from reaching for hacky half-measure solutions to the problem

1606951174
pixelherodev
I also think it's a tad hypocritical of us to explicitly say that the CBE should only ever be used to produce binaries and not for source generation and then to turn around and do exactly that :(

1606951185
pixelherodev
If source generation is a reasonable idea, then the CBE should support that more generally

1606951198
ifreund
It doesn't really belong in a compiler written in C intended for bootstrapping though

1606951208
companion_cube
(what's "CBE"?)

1606951211
pixelherodev
C backend

1606951215
companion_cube
oh, I see.

1606951215
pixelherodev
Zig->C translation

1606951225
pixelherodev
I'd also argue that compilation can be plenty fast without it

1606951227
companion_cube
useful for some targets, like embedded, I guess

1606951273
pixelherodev
tcc can manage 30MiB/s of compilation+assembly+linking on a Pentium.

1606951291
pixelherodev
Even half of that should be more than enough

1606951305
pixelherodev
and I don't think Zig is so much more complex than C that it'd need twice the compilation time

1606951323
ifreund
depends on how much people abuse comptime

1606951326
companion_cube
it might not be that easy to compile release-safe to C?

1606951327
pixelherodev
True

1606951335
pixelherodev
comptime abuse would be a problem

1606951351
pixelherodev
But honestly, if someone abuses the language, it's not our job as compiler devs to help them

1606951365
ifreund
I for one think that caching of comptime evaluated stuff through incremental compilation will be

1606951395
ifreund
If comptime abuse is what it takes to replace C++ I'm all for it

1606951399
pixelherodev
I'm not

1606951429
pixelherodev
I think it says more about the language if it's capable of replacing C++ like that :P

1606951461
andrewrk
" if someone abuses the language, it's not our job as compiler devs to help them" => wrong. it is always our job to help users. if they are abusing the language it is because they have some need that is not being met. our job is to have a solution to that use case that does not involve abusing the language, whether it is an unrelated improvement, or providing better documentation to help users find other projects to use instead

1606951478
pixelherodev
Our job isn't to help them

1606951485
pixelherodev
To help them not

1606951501
BaroqueLarouche
well said andrewrk

1606951510
pixelherodev
but if someone abuses C++ templates, and then complains that compilation takes forever, the solution is to stop abusing templates and find a better solution

1606951536
pixelherodev
if someone abuses comptime, the solution isn't "make comptime faster" (throw more software at the problem!), it's to find a solution that doesn't require such abuse

1606951554
pixelherodev
Or, more generally: we should prioritize correct use of the language over misuse

1606951564
companion_cube
and that's why there will be several compilers :)

1606951575
fengb
Comptime rainbow tables ðŸ¤”

1606951586
pixelherodev
If a compiler change makes it simpler, and improves performance generally by ~3%, but decreases it for comptime abuse by 50%, I'd still support it

1606951592
BaroqueLarouche
am I the only one that doesn't want several compilers ? Just focus on 1 great compiler

1606951616
pixelherodev
BaroqueLarouche: might as well complain about GNOME/KDE/XFCE/LXDE/Sway/i3/dwm/openbox/etc

1606951617
fengb
Iâ€™d settle for 1 mediocre one if it fixed packed structs ðŸ™ƒ

1606951618
BaroqueLarouche
(except for the bootstrap one of course)

1606951629
BaroqueLarouche
pixelherodev:  I already do

1606951632
andrewrk
fengb with the hottest of takes

1606951637
pixelherodev
For anything in that list, there are a

1606951644
dominikh
IMO you want at least two compilers. it helps a lot with creating a more precise spec and solving ambiguities

1606951652
pixelherodev
I consider both GNOME and KDE garbage, and wouldn't touch them if you paid me

1606951660
pixelherodev
Plenty of people would say the same thing about the systems I use

1606951663
pixelherodev
That's not a

1606951669
greisean
:O

1606951672
pixelherodev
People have different philosophies and desires

1606951688
pixelherodev
There's no such thing as a one-size-fits-all solution

1606951728
pixelherodev
"The linux desktop is too fragmented!!" is a ridiculous argument, because it implies that there is "a linux desktop". KDE and GNOME are both huge bloated ecosystems IMO, and I consider them to be totally awful - but that doesn't mean that I'm going to pretend that they're identical

1606951742
BaroqueLarouche
I'm not using Linux anymore because it's a fuckin' mess

1606951743
pixelherodev
All that wouold happen if they tried working on "one grand desktop!!" would be a system users of

1606951745
companion_cube
BaroqueLarouche: if you want a language to have a true spec and standard, you have no choice but having several compilers

1606951749
companion_cube
you may not want that, of course

1606951765
pixelherodev
Multiple compilers doesn't mean work is being spread too thin; it means different people are all getting what they want out of the language

1606951792
companion_cube
amusingly, I think SML and Scheme are probably among the most precisely standardized languages

1606951795
pixelherodev
I like cproc as my main C compiler; other people prefer GCC; others will stick with Clang, or TCC; I use the plan9 compilers daily nowadays;

1606951807
pixelherodev
If any one of these didn't exist, we would all be worse off

1606951821
pixelherodev
and I say that as someone who hates half the items in the list!

1606951857
pixelherodev
I loathe GCC and Clang; I dislike Rust and C++, Windows and OS X. I'm still glad everything on that list exists, even though I don't like them.

1606952209
pixelherodev
Heck, Zig as it is today probably wouldn't exist without half the items mentioned on that list. You might as well complain that effort on Zig is wasted and that Andrew and all of the other devs should have just improved the C compilers instead; it's just not a reasonable idea

1606952279
g-w1
imho, pixelherodev: i can see that you really want to write another compiler and I say: go for it! even if you decide it's not worth it, it will teach the community a lot

1606952590
andrewrk
14 issues left for 0.7.1

1606952602
pixelherodev
nice :)

1606952654
ifreund
My take is that the global maximum bootstrapping compiler would look very similar to what pixelherodev is describing. It would almost certainly be easier to maintain than the source generated from the CBE and would be far easier to work on than stage1

1606952795
ifreund
if people like using it for more than just bootstrapping, that's cool too

1606952928
ifreund
hmm, I wonder if I can fix any of the 0.7.1 issues. waiting on that release to merge a large branch into river

