1589673823
tdeo
ah, that makes sense, nix should probably set that

1589673834
andrewrk
oats, I don't think we have that yet, would be handy tho

1589673836
tdeo
note i was packaging something written in zig, not zig itself

1589673855
oats
andrewrk: hmm, maybe could be a fun project

1589673915
oats
would something like that probably go in std.fmt?

1589673923
andrewrk
yes

1589674499
pixelherodev
Patch almost done

1589674615
andrewrk
good because I'm about to implement function calls :D

1589674621
pixelherodev
Oh nice :)

1589674629
pixelherodev
While you do that, anything else I can help with?

1589674670
andrewrk
yes there are plenty of things. I'll start naming things and you tell me what sounds more interesting

1589674688
andrewrk
windows PE support or mach-o object file / executable support

1589674696
andrewrk
debug info

1589674712
pixelherodev
Anything more codegeny? :)

1589674716
andrewrk
an assembler / inline assembly parsing

1589674746
andrewrk
implementing math operations

1589674752
pixelherodev
That sounds good :)

1589674767
andrewrk
other architecture support

1589674824
andrewrk
improving the allocation strategy of ELF sections / .text blocks

1589674837
pixelherodev
Lots of things to do I see :)

1589674880
pixelherodev
Just need to run tests, I think

1589674884
pixelherodev
Would tests cover codegen?

1589674886
andrewrk
./zig build test-stage2

1589675037
pixelherodev
Ugh, need to update compiler first :P

1589675050
pixelherodev
Pukes on nosuspend

1589675183
pixelherodev
On a different note, thanks for the opportunity to improve my Register definitions in my own project :)

1589675199
andrewrk
:)

1589675488
andrewrk
pixelherodev, what machine code should zig generate for an indirect call based on an offset table?

1589675539
andrewrk
we could split off another offset table for functions, and make a "trampoline" offset table with jumps. I think this is what .got.plt does

1589675553
andrewrk
in this case you would simply call the appropriate offset table address

1589675616
mq32
andrewrk: what about a full trampoline table? Just have the "function symbol" be a "jmp patched_locatioN"

1589675622
mq32
and everything just calls into that jump

1589675647
mq32
or did i understand you wrong and you just proposed that?

1589675671
andrewrk
I think we're talking about the same thing

1589675739
mq32
i think that's the simplest variant to implement and should be quite fast as well

1589675798
andrewrk
sounds good

1589675813
andrewrk
now I just have to convince an assembler to tell me the encoding for that call instruction :)

1589675974
mq32
i386: // B844332211        mov eax,0x11223344

1589675975
pixelherodev
I can give it

1589675976
mq32
wait

1589675977
pixelherodev
What call form?

1589675980
mq32
/ FFE0              jmp eax

1589675999
pixelherodev
Jump or call?

1589676000
mq32
which is sad, because oyu can only jump-relative

1589676009
mq32
although, should be working as well, right?

1589676060
mq32
andrewrk: do you know

1589676067
pixelherodev
Yeah, absolute 64-bit jump is FF /4

1589676069
mq32
(the whole site, it's awesome docs on x86)

1589676127
pixelherodev
To use a register, the second byte should be 0b11100RRR

1589676133
pixelherodev
Where RRR is the register's ID

1589676153
pixelherodev
For an extended register (e.g. r8), it'd be 0x41 0xFF 0b11100RRR, where RRR is the lower three bits of the id

1589676264
pixelherodev
Uh hm

1589676295
pixelherodev
Need to implement memory and such now :P

1589676473
pixelherodev
Holy craps

1589676480
pixelherodev
zls just munched up my entire RAM!

1589676481
pixelherodev
:(

1589676818
ifreund
i think there have been a couple bugs like that fixed already

1589676832
ifreund
infinite loops in the parser if theres an errror or somethjing

1589676879
pixelherodev
... I'mma update just in case

1589676948
mq32
Outstream.print() is not made for long messages :D

1589676956
mq32
i just hit eval branch quota

1589677020
blueberrypie
what is the quota?

1589677105
pixelherodev
1000 by default IIRC?

1589677113
pixelherodev
You can change it

1589677117
pixelherodev
@setEvalBranchQuota

1589677540
pixelherodev
Hmm, does ZLS mention errors with broken ASTs?

1589677703
tdeo
it should

1589677888
pixelherodev
Not important right now

1589677901
mq32
afaik ZLS only refreshes analysis when the tree can be parsed

1589677903
pixelherodev
andrewrk: should genSetReg support all sized registers?

1589677919
pixelherodev
8-bit, 16-bit, etc; when the operand fits?

1589678794
pixelherodev
Doesn't seem to update with a partial AST after the partial AST patch :P

1589678805
pixelherodev
Actually, I take that back

1589678814
pixelherodev
My AST was apparently

1589679056
pixelherodev
Alrighty, almost done...

1589679073
pixelherodev
Just need loading from regs and loading from memory, then pass tests...

1589679121
pixelherodev
Yeah it definitely works

1589679127
pixelherodev
AST was just

1589679153
pixelherodev
I'm even going to implement

1589679589
foobles
andrewrk sorry to bother you, but any idea off the top of your head of what could cause an assertion error at compile time, when using ir_create_basic_block_gen, and then appending it to ira->new_irb.exec.basic_block_list?

1589680012
andrewrk
mq32, pixelherodev: if we use a trampoline, then we need a call to a hard coded address

1589680032
mq32
yeah, that would require something like the offset table atm

1589680061
andrewrk
if we use an offset table then we need a call to an address that is stored in compile-time known memory addr

1589680061
mq32
but that table would consist of a whole lot of jmp-instructions where we just patch the offset in the jmp instead of some integer value

1589680085
andrewrk
that's what I mean about a trampoline

1589680114
andrewrk
foobles, can I see the full error message?

1589680134
andrewrk
also no need to feel like you are bothering me, as long as you understand that I may not always respond! it's ok to try to ping me

1589680136
mq32
what's the difference to the indirect call via a offset table? We still need to know the hardcoded address of the offset table, right?

1589680434
andrewrk
currently, the hard coded address of the offset table is known by the compiler

1589680445
andrewrk
and the index of each decl within the offset table is also known by the compiler

1589680467
andrewrk
so the vaddr of the offset table entry is known as a numerical value

1589680540
andrewrk
we can make the offset table be whatever we want it to be

1589680578
andrewrk
the simplest thing would be if there was a call instruction like this: `call [got_addr]`

1589680588
foobles
Ah sorry, i got caught up in something. All it says is "assertion failed" :/

1589680601
foobles
do i need to compile LLVM again in debug and then do a debug build?

1589680628
foobles
assertion failed. This is a bug in the Zig compiler.Unable to dump stack trace: debug info stripped

1589680665
andrewrk
foobles, once we get past stage1 and onto self-hosted as the main compiler, this should get better, but for now - do you have access to a posix environment? linux perhaps? it's easier to set up release llvm + debug zig there

1589680690
andrewrk
maybe even wsl? I hear some people have that working

1589680709
mq32
andrewrk: there's an instruction "call [got_addr_rel]"

1589680732
mq32
where the address is relative to the position after the call instruction

1589680732
foobles
i will try wsl, unfortunately I don't have linux

1589680750
mq32
ah wait, got means "global offset table", right? :D

1589680789
andrewrk
ya

1589680841
mq32
andrewrk

1589680844
mq32
i found it

1589680848
mq32
48 FF 25

1589680874
mq32
jmp [addr]

1589680930
andrewrk
ok, so then we would have a separate section ".got.plt" for functions, each entry would be `call addr`, and then function calls would be `jmp [got_plt_addr]`

1589680990
mq32


1589681069
mq32
quick question: i compiled my project with x86_64-linux-musl

1589681079
mq32
what could be the reason that my file is not executable?

1589681099
andrewrk
what, it's missing the +x bit?

1589681140
mq32
nope, xbit is set, file exists, "file" stats that it's a ELF64 … file

1589681148
mq32
but using /lib/ld-musl-x86_64.so.1 as a dynamic linker?

1589681156
andrewrk
foobles, the alternative is to have an additional build of llvm,clang,lld built in debug mode. the wiki has instructions for setting this up

1589681166
andrewrk
this is really slow and I don't recommend doing normal development this way

1589681173
foobles
oh alright thanks

1589681182
andrewrk
but if you need debuggability you can do this to get introspection into a crash

1589681190
andrewrk
and it's worth it even though it's annoying

1589681198
foobles
ill try that, i dont really know how to use linux even if i do get wsl >_>

1589681204
foobles
thanks, thats a good lead

1589681247
andrewrk
I do it occasionally on windows when debugging the compiler

1589681283
andrewrk
mq32, currently zig assumes musl implies static linking

1589681300
andrewrk
I'm not sure how you could have used zig to build an executable that dynamically links musl

1589681303
mq32
yeah that was my plan anyways :D

1589681320
tdeo
well, there are a few linux distros that use dynamically linked musl

1589681338
andrewrk
yes but zig does not integrate with them - it builds its own musl source files from source

1589681368
foobles
by the way, when did the "performance or safety. choose two" slogan come about? because that is very similar to Bazel's "{fast, correct} choose two"

1589681405
mq32
my default is .arch_os_abi = "native-native-gnu.2.25..2.25"

1589681405
mq32
but it looks like musl has this as well?

1589681405
mq32
because i need getentropy

1589681430
tdeo
"good/cheap/fast, choose two" is the phrase it comes from i believe

1589681460
mq32
oh…

1589681465
mq32
wait

1589681492
mq32
i link a C library that was built against system libc, but: static link ,it's an archive (.a) file

1589681506
andrewrk
foobles, idk, I just wrote that along with the rest of the home page content one day. it's intentionally slightly provocative

1589681676
daurnimator
mq32: does musl guarantee ABI compat across versions?

1589681691
daurnimator
(I was going to ask you that in #musl to provoke a conversation but you're not in there)

1589681697
mq32
daurnimator: not sure, i just do the thing now i wanted to do anyways:

1589681699
mq32
build BearSSL with zig!

1589682252
tdeo
well musl went through a bunch of effort to keep abi for 64 bit time_t

1589682283
mq32


1589682287
mq32
am i allowed to be confused?

1589682325
fengb
No

1589682349
mq32
this is sad. then someone should help me unconfuse myself :D

1589682373
andrewrk
what library are you expecting to provide getentropy?

1589682394
mq32
right now my target is native-native-musl

1589682417
andrewrk
ok I see that musl provides getentropy

1589682419
mq32
musl/src/misc/getentropy.c:7:int getentropy(void *buffer, size_t len)

1589682457
andrewrk
I also see that we compile that file when building musl

1589682497
andrewrk
libc.so.6.0.0 - this is not musl

1589682508
mq32
yeah that's what i figured as well

1589682515
andrewrk
are you using a build script?

1589682520
mq32
yes

1589682522
andrewrk
are you sure you have set the target on all the build artifacts?

1589682530
mq32
yes

1589682535
mq32
(trivial, there is only one)

1589682546
mq32
with -Dtarget=native-native-gnu.2.25..2.25 it works

1589682617
andrewrk
mq32, can I see a --verbose-link ?

1589682637
mq32
sure, i can also link you the repo :)

1589682651
andrewrk
whoa, whoa, i'm not sure I'm ready for that kind of commitment :P

1589682703
mq32
for which onE? the musl build i suppose?

1589682714
andrewrk
the one with the confusing error

1589682837
mq32
wall of text:

1589682846
mq32
i may have some idea what is the problem

1589682855
mq32
i use the same config for test runner and executable

1589682860
mq32
including target

1589682885
mq32


1589682887
mq32
this is my build file

1589682902
andrewrk
pro tip: :%s/ /\r/g

1589682913
andrewrk
for vim users

1589682944
mq32
replace space with \r? :D

1589682957
andrewrk
mq32, I see no setTarget for gurl

1589682969
mq32
it's in the loop

1589682976
mq32
module.setTarget(target);

1589682981
andrewrk
oh I see, nice

1589682990
andrewrk
sorry :)

1589682995
mq32
no problem

1589683037
mq32
btw, big love for BearSSL as building is just "throw all C files into the compiler and press go"

1589683053
andrewrk
mq32, ok so this is definitely trying to link against a zig-built dynamically linked glibc

1589683066
andrewrk
mq32, ah yeah I love it when that works too :D

1589683098
mq32
i want all my projects from now on to be: "do zig build, then use your full suite of programs coming out of this repo"

1589683209
andrewrk
mq32, maybe try --verbose and then figure out why the -target is not being set correctly?

1589683231
andrewrk
based on the linker output, zig definitely thought you wanted glibc as the target libc

1589683240
mq32
it is!

1589683245
mq32
see the paste, search for -target

1589683272
andrewrk
I don't see target in there

1589683290
andrewrk
-target is not sent in the linker line

1589683305
mq32
look in "line 9"

1589683318
mq32
The following command exited with error code 1:

1589683335
mq32
then comes a whole lenghty thing and then there's the -target invocation to zig build-exe

1589683343
andrewrk
oh I'm sorry, I failed to copy+paste

1589683430
andrewrk
interesting, this is very strange. this is starting to look like bug territory

1589683453
mq32
yep, i fear so

1589683472
mq32
i just updated to the latest build from the website and i'll try again

1589683475
andrewrk
but it does look like maybe straightforward to troubleshoot bug territory

1589683708
mq32
andrewrk: i have narrowed down the bug quite well

1589683721
mq32
zig build -Dtarget=x86_64-linux-musl

1589683721
mq32
works

1589683745
mq32
so it's something in the "native" detection setting

1589683767
andrewrk
interesting

1589683774
andrewrk
that might be in self-hosted code in fact

1589685481
mq32
i get a bug report that gurl does not compile on freebsd atm

1589685483
mq32
<styan> xq: It did not compile on FreeBSD 13-CURRENT "InvalidAbiVersion"

1589685572
foobles
heck yeah

1589685582
foobles
i accidentally compiled llvm in debug a long time ago

1589685590
foobles
and just left it there in case

1589685597
foobles
well, the case has come B)

1589693046
foobles
eigh, im trying to build zig in debug. linking is working fine -- it's just giving me erros about how /O2 and /RTC1 are incompatible options :/

1589693894
pixelherodev
Alrighty, going to finish this tonight.

1589693898
pixelherodev
So close to done...

1589693967
pixelherodev
Going to fully implement genSetReg for x64 (*no* TODOs) then PR

1589693976
pixelherodev
Mostly done, just need loads from registers and a single branch in loading from memory

1589694577
foobles
anyone have similar issues with building on windows?

1589694694
foobles
building release seems fine

1589694742
foobles
what i am doing for invoking cmake is just taking the recommended `cmake .. -Thost=x64 -G "Visual Studio 16 2019" -A x64 -DCMAKE_PREFIX_PATH=[...]\llvm+clang+lld-10.0.0-x86_64-windows-msvc-release-mt -DCMAKE_BUILD_TYPE=Release`

1589694774
foobles
but replacing -DCMAKE_BUILD_TYPE=Debug, and also changing it to llvm+clang+lld-10.0.0-x86_64-windows-msvs-debug

1589696375
pixelherodev
andrewrk: test passes!

1589696640
pixelherodev
Just adding in a bit more (removing some of the TODOs) then sending your way :)

1589696953
pixelherodev
andrewrk: should invalid operations trigger self.fail or unreachable?

1589696966
pixelherodev
Given that codegen should never produce them, I'm leaning towards unreachable

1589698282
pixelherodev
Every form of genSetReg for x64 is now implemented :)

1589698316
pixelherodev
Not confirmed to be working though, as they're untested AFAIK

1589698344
pixelherodev
Final tally: 10 lines shorter than previous state, and implements

1589698432
pixelherodev
andrewrk: #5363 opened

1589704302
pixelherodev
Two PRs in one night :)

1589704541
pixelherodev
daurnimator: just to confirm, what exactly was the question on the x86 (NOT x64) registers?

1589705529
daurnimator
pixelherodev: which question?

1589705593
daurnimator
pixelherodev: I think you're missing BPL, SIL, DIL, SPL?

1589705744
pixelherodev
Ahh

1589705748
pixelherodev
daurnimator: those don't exist?

1589705750
pixelherodev
s/?/

1589705754
pixelherodev
there's no such thing :)

1589705758
pixelherodev
Ah wait

1589705765
pixelherodev
The

1589705770
pixelherodev
There was a conversation about this earlier

1589705783
pixelherodev
tl;dr: it's impossible to use those four registers in a manner consistent with the others

1589705798
pixelherodev
They require an empty REX prefix in order to use

1589705812
pixelherodev
They also don't exist in x86 mode, which is why I was confused by the question

1589705821
pixelherodev
You asked about al, bl, cl, and dl on the x86.zig file

1589706082
daurnimator
pixelherodev: that was just me being blind

1589706088
daurnimator
pixelherodev: though many of your @intCast should be @as

1589706153
pixelherodev
daurnimator: I fixed that one already :)

1589706162
daurnimator
I think I saw more than one?

1589706184
pixelherodev
Look at the most recent commit ;)

1589706252
daurnimator
`0xC0 | (@intCast(u8, @truncate(u3, reg.id())) << 3) | @truncate(u3, reg.id()),` when `reg.isExtended() ==true` looks wrong

1589706295
pixelherodev
That's an @as now, isn't it?

1589706333
pixelherodev
`0xC0 | (@as(u8, reg.id() & 0b111) << 3) | @truncate(u3, reg.id())` is what you're referencing I think

1589706343
pixelherodev
And I'm fairly certain that's correct

1589706354
pixelherodev
Mind giving a line number to be sure we're on the same page?

1589706382
daurnimator
oh github being weird: I was on the "compare commits" page rather than the "PR diff" page

1589706389
daurnimator
so when I refreshed I didn't get the new commits

1589706418
pixelherodev
GitHub hasn't been impressing me lately

1589706468
daurnimator
`(if (reg.isExtended()) @as(u8, 4) else 0) | (if (src_reg.isExtended()) @as(u8, 1) else 0)` can probably be written nicer?

1589706481
pixelherodev
Definitely, yeah

1589706485
pixelherodev
Expanded into a multiline one

1589706530
pixelherodev
`const B = if (src_reg.isExtended()) @as(u8, 1) else 0; const R... 4 else 0; B | R`?

1589706564
ifreund
is there a way to take an enum literal as an agrument without using `var`?

1589706592
pixelherodev
Is it of a specific enum type?

1589706593
ifreund
var works, but i'd like to restrict the things passed to enum literals

1589706599
pixelherodev
Ahhh

1589706601
daurnimator
pixelherodev: `(if (reg.isExtended()) @as(u8, 4 | 1) else 0)`  ?

1589706603
pixelherodev
A literal of any type of enum?

1589706609
pixelherodev
daurnimator: nope

1589706624
pixelherodev
It's one bit if reg is extend, a different bit if src_reg is extended

1589706637
ifreund
this is for std.log, so the idea is that each library would pass an enum literal which the user would then add a tag for in their LogScope enum

1589706638
daurnimator
ohh

1589706638
pixelherodev
Since they're two different registers, the fourth bit of each goes to a different part of REX

1589706647
pixelherodev
:)

1589706661
daurnimator
otherwise I was considering if `@boolToInt` would be useful in a few places

1589706671
ifreund
i prefer doing it with an enum over strings as it makes filtering easier as you can use a switch

1589706727
pixelherodev
ifreund: so the idea is, effectively, an enum with field generated at usage spots?

1589706740
ifreund
yeah

1589706767
pixelherodev
Maybe take in the enum as the first param?

1589706768
ifreund
ok, doing @TypeOf(.dummy) works, but i'd prefer an actual keyword

1589706779
pixelherodev
`comptime e: enum, val: e`?

1589706801
pixelherodev
`const MyEnum = { only_val }; logger.function(MyEnum, .only_val`

1589706805
ifreund
but then each library must know about all the others, that doesn't work I don't think

1589706834
alexnask
ifreund, @Type(.EnumLiteral)

1589706841
alexnask
Pretty sure that should work

1589706876
alexnask
Ah nvm

1589706882
alexnask
<source>:2:20: error: TODO implement @Type for 'TypeInfo.EnumLiteral': see

1589706884
ifreund
alexnask: hmm, that seems like what i want but it's a TODO sadly

1589706897
ifreund
hey, that would be trivial to implement though right?

1589706900
alexnask
Yes

1589706908
alexnask
It has no payload (well, a void payload)

1589706909
ifreund
maybe i should make my first compiler contribution

1589706924
alexnask
The typeInfo code is definitely some of the easiest to contribute to imo

1589706934
alexnask
And @Type is the reverse

1589706938
ifreund
right now @TypeOf(.my_thing) works but is ugly :D

1589706942
alexnask
I mean, not in difficulty :P

1589706967
ifreund
i think I'll give it a go

1589706976
pixelherodev
:)

1589706980
pixelherodev
daurnimator: anything else?

1589707017
daurnimator
pixelherodev: trailing empty line after your `id` methods

1589707045
pixelherodev
That was intentional

1589707049
pixelherodev
but i'll remove it

1589707063
daurnimator
pixelherodev: I wouldn't mind doc comments explaining what `id` is

1589707078
pixelherodev
Ahhh, good call

1589707090
pixelherodev
Should document extended registers while I'm at it

1589707106
pixelherodev
... ugh, I should turn other comments into doccomments, probably

1589707146
daurnimator
`reg.id() == 0` is... opaque; perhaps .id() should return an enum?

1589707181
pixelherodev
That's... actually, easier idea

1589707182
daurnimator
something like `reg.id() == .A` would be more explanatory

1589707184
pixelherodev
`reg == .Rax`

1589707197
pixelherodev
We're currently only allowing 64-bit ops

1589707215
pixelherodev
Returning an enum doesn't work though

1589707217
daurnimator
but .id() returns things for non-64 bit registers

1589707222
pixelherodev
True

1589707230
pixelherodev
But look at the 8-bits

1589707231
daurnimator
you'd have to invent a new enum here: RegisterID or something

1589707239
pixelherodev
RegisterID wouldn't be consistent though

1589707245
daurnimator
`enum (u4) { A, C, B, D,  .... }`

1589707250
pixelherodev
Yes,

1589707254
pixelherodev
Look at the 8-bits :P

1589707262
pixelherodev
`al, bl, cl, dl, ah, ch, dh, bh`

1589707266
pixelherodev
They break the pattern

1589707276
pixelherodev
For good reason, but still

1589707277
daurnimator
"Dumb question: what does "perfect" hash mean? Got a quick answer, thanks haze :)" => hmm? where did haze answer you

1589707283
pixelherodev
Discord :P

1589707288
daurnimator
oh.

1589707290
pixelherodev
Yeah

1589707293
daurnimator
anyway. for anyone else:

1589707298
pixelherodev
/buffer 37 for me :P

1589707311
pixelherodev
(IRC <=> discord bridge = :heart:)

1589707312
daurnimator
hehe; looks like I linked the same as haze

1589707317
pixelherodev
Yep

1589707321
daurnimator
brb dinner

1589707367
pixelherodev
:)

1589707374
pixelherodev
If I go missing for a few hours, i fell asleep :P

1589707390
pixelherodev
Yay, checks passed again :)

1589707460
pixelherodev
Looks like the GCC 5 fix should also have checks passing again

1589707476
pixelherodev
Quick note regarding it: it builds but doesn't link for me, as it's linking against LLVM which is built with GCC 9

1589707574
pixelherodev
Time to look through the list of contributor-friendly issues...

1589707694
pixelherodev
Maybe I'll tackle #5008...

1589707793
pixelherodev
Ah never mind

1589707824
pixelherodev
Can someone with permissions close #5008?

1589707848
pixelherodev
A fix was merged today in #5032 :)

1589709569
pixelherodev
Three PRs in one night :D

1589709582
pixelherodev
Surprisingly productive

1589709744
ifreund
nicely done

1589709817
pixelherodev
Yep :)

1589709883
pixelherodev
Might get to work on self-hosted detection of ARM CPUs next

1589709912
pixelherodev
That's a larger one, but it'll come in handy once I end up getting a PineBook (which I plan on ordering within the next week or two if they're still in stock)

1589710020
ifreund
I'm eying one too for when my current laptop dies

1589710034
ifreund
i barely use a laptop though at the moment

1589710264
alexnask
Hmm Im writing a better debug allocator for zls and then I will try porting the zir stuff for PE executables

1589710273
alexnask
Although Im pretty clueless, should be fun

1589711135
pixelherodev
#4106 and #5008 can both be closed

1589711141
pixelherodev
They've been solved already :)

1589711524
pixelherodev
Similarly, #4205 is no longer applicable, since std.Buffer is gone

1589711529
pixelherodev
Rather, it should be applied to Fifo?

1589711554
pixelherodev
No, doesn't apply there

1589711600
pixelherodev
Ahh, array_list_sentineled

1589711615
pixelherodev
Okay, #4205 can be closed also

1589712056
ifreund
pixelherodev: probably best to just comment on the issues so it doesn't get lost here

1589712361
pixelherodev
good call

1589712558
ifreund
are "module level" doc comments a thing? like one comment at the top of the file giving a general overview and maybe an example?

1589712583
alexnask
I don't think so, pretty sure doc comments must be attached to declarations

1589712597
greenfork
hello, I hope it's appropriate to post some questions here. I'm trying to write a simple game of tic-tac-toe in terminal and I have this strange bug that error messages appear twice, here is a pastebin link

1589712727
alexnask
Is the Bi specifier supposed to work for floating point types? I'm getting an error using it but not sure if it is a bug or not

1589712780
ifreund
yay! found it

1589712787
ifreund
i knew i saw something about this

1589712799
alexnask
Huh, TIL

1589712817
alexnask
This is gonna be super useful since I'm using files-as-structs a lot now

1589712822
ifreund
same

1589712832
ifreund
i love not having my funtions intented

1589712846
ifreund
*indented

1589712849
alexnask
Yes, 1 less indent level is bae

1589712871
alexnask
Also const MyType = @import("my_type.zig") instead of @import("my_type.zig").MyType;

1589712888
ifreund
i really suck at spelling, maybe i need to figure out how to get a spellchecker in weechat

1589712900
ifreund
yeah the imports are way cleaner too

1589713031
alexnask
greenfork, readIntNative(u8) will read one byte

1589713058
alexnask
So in this example, it will read 'a' in the first loop, error then the stream still has the '\n' char so it will also read '\n' and error

1589713093
greenfork
alexnask, I see, thank you!

1589713097
alexnask
You probably want to do something like readUntilDelimiterOrEof or one of the readUntilDelimiter variants with a '\n' delimiter and then parse the line yourself

1589713815
alexnask
You probably want to do something like readUntilDelimiterOrEof or one of the readUntilDelimiter variants with a '\n' delimiter and then parse the line yourself

1589713817
alexnask
woops

1589713885
alexnask
woops

1589713890
alexnask
omg >.>

1589713936
pixelherodev
I've accidentally sent "/buffer" messages three times in the last few days :P

1589713953
pixelherodev
glad to see I'm not the only one :)

1589715206
pixelherodev
There we go :)

1589715638
pixelherodev
Is there a way to say "pointer to any type of function"?

1589715663
pixelherodev
I want to store a function pointer to an arbitrary (user-provided) function type, and use type reflection to pass it arguments in a JIT

1589715683
pixelherodev
I'm thinking I might just restrict calls though, as that seems much simpler

1589715720
alexnask
You would have to store a type erased ptr and some runtime representation of the TypeInfo

1589715837
pixelherodev
That's what I figured, thanks

1589715859
pixelherodev
One alternative might be to pass the function call straight to the native JIT or something

1589715865
pixelherodev
Maybe use it as a graph edge for register allocation

1589715882
pixelherodev
Unnecessarily compmlex though

1589715886
pixelherodev
s/compm/comp

1589716662
alexnask
ifreund, I think it would be clearer to define EnumLiteral = @Type(.EnumLiteral) in std.meta or something instead of repeating it everywhere

1589716711
alexnask
Minor nitpcik though, I like the idea of using it this way

1589716795
ifreund
hmm, yeah I don't think it reall justifies having it's own keyword, maybe std.meta is the right place for it

1589716815
ifreund
or maybe std.builtin? idk

1589716833
ifreund
honestly @Type(.EnumLiteral) is pretty clear

1589716926
alexnask
I can live with it I guess ^_^

1589717063
pixelherodev
Hmm

1589717073
pixelherodev
"Have to ststore type erased ptr + TypeInfO"

1589717085
scientes
we need a better hex dump

1589717088
scientes
{x} is lame

1589717106
pixelherodev
I can literally use the type info from @TypeOf, right?

1589717107
pixelherodev
:)

1589717120
pixelherodev
scientes: `0x{x:0<W}` where W is bytes to pad?

1589717132
pixelherodev
e.g. `0x{x:0<2}` for 8-bit values

1589717137
pixelherodev
s/bytes/nibbles

1589717143
scientes
I want something like hd produces

1589717150
pixelherodev
hd?

1589717164
scientes
in the shell

1589717171
scientes
echo "foo" | hd

1589717297
alexnask
pixelherodev, TypeInfo is a comptime only type

1589717304
alexnask
Since it stores comptime_ints and types

1589717306
scientes
all types are comptime only

1589717310
alexnask
And vars

1589717370
alexnask
Yes all types are comptime-only, Im not talking about TypeInfo as a type but about TypeInfo values obviously

1589717394
alexnask
all types are comptime-only values*

1589717524
scientes
and how do I dump an array?

1589717535
scientes
I seriously don't know how to use fmt

1589717609
pixelherodev
Plain {} might be useful

1589717615
alexnask
^

1589717620
pixelherodev
alexnask: disappointing, but unsurprising :(

1589717629
alexnask
You can use most types out of the box with fmt

1589717629
pixelherodev
I mean, the info

1589717631
scientes
pixelherodev, but i have to list ever array element

1589717635
scientes
and i want it to just enumerate them

1589717648
pixelherodev
`fmt("{}", .{ array })` might work

1589717661
pixelherodev
problem is, info is comptime known but I don't want to use it until later :(

1589717662
alexnask
It does work but prints them without separators I believe

1589717671
scientes
don't work with slices

1589717701
pixelherodev
It should

1589717706
pixelherodev
Hmm, here's an idea

1589717709
scientes
i just get an address

1589717724
scientes
i'm not trying to complain

1589717751
alexnask
What type are you trying to prin?

1589717753
alexnask
print*

1589717764
scientes
strings

1589717767
scientes
[][]u8

1589717768
pixelherodev
Heading AFK, I'll be back later

1589717790
scientes
or maybe even []struct

1589717797
scientes
but i get that that wouldn't be supported

1589717805
scientes
in Go you can write your own print() function

1589717815
alexnask
pixelherodev, You should be able to make some comptime hashmap that gets updated to hold the typinfo

1589717835
alexnask
scientes, You an write your own format method but the default format does handle structs

1589718110
alexnask
Slices do print the address though, yeah, this is annoying

1589719024
pixelherodev
alexnask: figured out a better solution :D

1589719037
pixelherodev
Instead of storing the function as is, it breaks it down into pieces

1589719051
pixelherodev
various LoadArgument instructions, the Call, then some instructions to deal with the outputs

1589719055
pixelherodev
e.g. Clobber, Alias, etc

1589719079
alexnask
You still need to hold the type of the arguments in some data structure though right?

1589719093
pixelherodev
Not really

1589719099
pixelherodev
Well

1589719104
alexnask
Ah, I guess you only need size info

1589719104
pixelherodev
Yes, but it doesn't really matter nearly as much

1589719123
pixelherodev
It's a matter of storing minor type info for e.g. integers

1589719128
pixelherodev
and not

1589719129
alexnask
Right

1589719132
pixelherodev
it's much much simpler

1589719133
alexnask
Just for the ABI stuff

1589719141
pixelherodev
Nah, don't even have to worry about that lol

1589719144
pixelherodev
That's at a lower level :)

1589719151
pixelherodev
This is a high-level abstraction ISA

1589719163
pixelherodev
It then gets translated to e.g. amd64 at runtime

1589719219
alexnask
Gotcha :)

1589719252
alexnask
If you havent recompiled zls master in the last 19 hours or so you should, local variable completions work now thanks to aurame :D

1589720116
ifreund
nice! time to recompile :D

1589720125
ifreund
y'all are moving super fast on zls

1589720159
alexnask
I owuld recommend recompiling a couple of times a day :P

1589720182
scientes
switch to gentoo ;)

1589720197
scientes
and spend endless hours watching compiles scroll

1589720200
scientes
and think you are learning something

1589720220
nephele
I'm sure it will be the fastest installl after it is done wasting my time :)

1589720244
greenfork
scientes, very true about gentoo :)

1589720259
scientes
what a stupid idea

1589720290
ifreund
alexnask: would a PR adding xdg base directory support for loading the config be welcome?

1589720375
alexnask
Sure thing

1589720402
alexnask
It should prob fallback to the self exe directory for now though

1589720418
alexnask
eventually we will look for build.zig and for the config in that folder

1589720441
ifreund
ah yeah, that probably wouldn't be hard

1589720474
ifreund
traverse up till you find build.zig and look there, i guess I'll try that instead

1589720675
alexnask
ifreund, This will probably be a little more involved since it would have to be file specific but knock yourself out :) The home directory is fine too, whatever you prefer is good ;)

1589720729
ifreund
indeed, i just pulled up the code and realized that it wouldn't be quite as straightforward :D

1589721765
scientes
$ whoami

1589721767
scientes
crazy

1589721937
alexnask
daurnimator, languageId: "zig", syntaxes pointing to the zig extension's tmLanguage seems to be what sublimelsp wants

1589721950
alexnask
Let me give it a shot, I have sublime text installed

1589722400
pmwhite
Is zls use using compiler libraries for autocomplete and stuff? Or is it home made?

1589722405
alexnask
daurnimator, Yes it used to do a lot different

1589722412
alexnask
daurnimator, Shopuld have been renamed :P

1589722424
alexnask
something a lot different*

1589722519
daurnimator
fun to see all the json types declared!

1589722629
alexnask
I get errors just installing the zig language package >.>

1589723306
alexnask
Yes it would be nice. There is quite a bit of this going on, I tried to fix it where I spotted it

1589729453
pixelherodev
Neat, ZLS update :)

1589729590
pixelherodev
Just need to implement live range register allocation and the Thor Hello, World is done for amd64 :D

1589729613
alexnask
Nice!

1589731657
xackus
in stage1 some functions returning ZigType* return nullptr and some an invalid type when they fail

1589731669
xackus
which one should i choose for a new function?

1589731841
andrewrk
xackus, if it returns a ZigType* then the calling code already will have to check for an invalid type, so it would be simpler to not additionally introduce the possibility of nullptr

1589731960
xackus
yeah, i just checked and type_is_invalid doesn't check for null

1589732730
xackus
i am trying to prevent the creation of illegal error union types, but the functions used for creating types don't have access to an AstNode

1589732757
xackus
needed to add an error

1589732916
xackus
hm, get_opaque_type has an AstNode* parameter

1589733001
alexnask
It uses it to get the line number it appears in

1589733066
xackus
i know, but thanks anyway

1589733110
xackus
i have done some work in stage1 already

1589733133
xackus
by the way, could someone finally merge

1589733139
alexnask
Sure, I was curious about it too so I looked it up ;)

1589734149
andrewrk
thanks xackus

1589734228
xackus
thanks for merging :)

1589734942
dimenus
andrewrk: that live coding example is awesome

1589734950
dimenus
*code reloading

1589734952
andrewrk
:)

1589734995
dimenus
did you have any experience with x86 generation before Zig?

1589734998
andrewrk
no

1589735028
andrewrk
machine code generation is new territory for me

1589735045
andrewrk
well, that's not true, I did a pascal-to-mips compiler project at uni

1589735089
dimenus
yeah well the Intel manual is miles long compared to eg ARM or RISC-V

1589735093
dimenus
it's crazy how much cruft there is there

1589735222
oats
❯ zig build-exe --release-small hello.zig -target riscv64-linux && qemu-riscv64 ./hello

1589735224
oats
fish: “qemu-riscv64 ./hello” terminated by signal SIGSEGV (Address boundary error)

1589735225
fengb
50 years of cruft now

1589735226
oats
hrm

1589735238
oats
doesn't happen in debug mode

1589735394
daurnimator
absurd idea before I fall asleep: what if all pub const declarations were just 0-bit fields ?

1589735532
dimenus
oats: does it happen in release-fast?

1589735538
oats
dimenus: yep

1589735561
oats
std.io.getStdErr().writeAll("Hello, world!\n") catch return;

1589735566
oats
that's all the code does

1589735571
oats
just was trying out cross-compiling

1589735760
dimenus
oats: I get the same crash no on x86_64 & aarch64 as well

1589735766
dimenus
maybe an issue with that particular invocation

1589737605
dimenus
oats: anything other than debug build with symbols crashes for me on all 3 emulators (x86_64, aarch64 and risc-v)

1589737866
mikdusan
dimenus: for x86_64, build with `-mcpu=baseline` and seems to work

1589738034
mq32
Merged #5307 into master. \o/

1589738086
alexnask
🎉

1589738140
mq32
🎉🎉🎉

1589738327
andrewrk
if anyone is looking to contribute on this, I think it might be at a point where there are some non-conflicting areas to work on simultaneously

1589738410
andrewrk
might be worth it to coordinate a little bit first tho

1589738489
andrewrk
also I think it's time for me to go set up the performance tracking / resource usage tracking repo now

1589740518
dimenus
mikdusan: with `release-small` or `release-fast` still crashes over here

1589740835
dimenus
hmmmm, the hello world example with zig build generates SIGILL when run with qemu

1589741143
mikdusan
yeah I probably just got lucky with --release-safe, x86_64 and -mcpu-baseline . the -fast and -small still segfault for me

1589741147
mikdusan
qemu 5.0.0

1589741434
mq32
short question: how do i resolve ~ in paths? Look up $HOME and replace it with that?

1589741469
andrewrk
in what context?

1589741485
mq32
i want to resolve a path like ~/.local/

1589741521
mq32
want to use the defaults for .config / XDG_CONFIG_HOME

1589741524
mikdusan
if you do that, it's usually called "expanding path" in my exp. And it should only work if the path[0] == '~'

1589741554
mq32
oh wait. ~ is expanded by my shell :D

1589741561
mq32
so that should not be a problem

1589741568
ifreund
was about to say, ~ should probably be handled by the shell

1589742480
mq32
hm, still the question: how do i get the home directory of the user? is there already a function for thaT?

1589742513
lunamn
os.getenv("HOME")?

1589742533
mq32
that does not work on windows i suppose?

1589742542
ifreund
yeah probably not

1589742552
mq32
std.fs.getAppDataDir() is something…

1589742559
lunamn
oh, just saw the other messages. yeah, $HOME is what I'd do, it wouldn't work on windows

1589742589
andrewrk
mq32, there is a cross platform way to get the concept of a home directory

1589742599
andrewrk
it's not in zig std lib (yet?)

1589742619
andrewrk
the table here is useful:

1589742655
mq32
yeah something like "getSpecialFolders" from windows would be cool to have in zig std

1589742661
mq32
i'll do some research

1589742666
andrewrk
that + be sure to check for XDG environment variables

1589742703
mq32
yep

1589742714
mq32
have the link you posted still open

1589743018
Akuli
for looking up '~', also make sure to expand ~foo, which means foo's home directory. so on this system for example, ~ and ~akuli are the same

1589743043
Akuli
python's stdlib has os.path.expanduser which handles all that

1589743068
mq32
hm

1589743077
mq32
i think i can work without ~ for now

1589743079
mq32
$HOME is enough

1589743124
Akuli
also i thought windows has HOME env var?

1589743138
Akuli
hm it doesn't

1589743145
BaroqueLarouche
It's %USERPROFILE% on Windows

1589743285
mq32
yeah, i keep it in mind

1589743339
mq32
.windows => @compileError()

1589743340
mq32
done :D

1589743346
mikdusan
heh

1589743367
mq32
comment with BaroqueLarouches text above :)

1589743387
BaroqueLarouche
hahahaha

1589743395
mikdusan
windows support: ☑️

1589743428
BaroqueLarouche
time to grab a beer after all this hard work

1589743445
mq32
but %APPDATA% is better

1589743479
mq32
for that use case

1589743488
mq32
storing some configuration and trusted certificates

1589743546
BaroqueLarouche
indeed

1589743590
mq32
LOCALAPPDATA would be the place to store cachings

1589748713
mikdusan


1589749038
mq32
mikdusan: what if we just use arena allocators? 😱

1589749735
GreaseMonkey
TLB shootdowns, not to be confused with TLB shutdowns on MIPS which are absolutely horrible

1589749748
GreaseMonkey
if it happens, typically the only option you have is to reset

1589749907
mikdusan
VM 1.0 GiB per job building llvm with gcc 9 or higher not enough -> "c++: fatal error: Killed signal terminated program cc1plus"; when am I going to learn my lesson. 1.5 GiB per job

1589750118
mq32
GreaseMonkey: i have a similar thing in my arch

1589750124
andrewrk
I thought you needed 4

1589750126
mq32
you can un-memory-map the memory-mapping-tabe

1589750127
mq32
*table

1589750142
mq32
→ you can lock yourself into not being able to change anything in the paging setup

1589750154
GreaseMonkey
ouch

1589750169
mq32
i just noticed…

1589750173
mq32
that's actually damn great :D

1589750189
GreaseMonkey
does your arch not expose physical memory

1589750195
mq32
nope

1589750199
mq32
you can implement "sand boxing" with that

1589750207
mq32
as RAM is persistent across soft-system-resets

1589750214
GreaseMonkey
neat

1589750224
mq32
just reset the CPU and you'll be back to the OS

1589750255
mq32
GreaseMonkey: i need the MMU because system bus width is 24 bit, but cpu width is 16 bit

1589750269
GreaseMonkey
fair enough

1589752988
mikdusan
yaay... zig seems to boostrap with gcc-10.1.0 just fine

1589753031
mq32
neat!

1589756128
mq32
andrewrk: you successfully made me planning to send a request to the BearSSL team

1589756132
mq32
the ubsan hit!

1589756231
andrewrk
oh wow that's actually an accomplishment right?

1589756456
pixelherodev
andrewrk: did you end up getting to work on implementing function calls?

1589756475
mq32
well, it prevents me from debugging that code path with any safe mode, but i'll send a mail to Thomas Pornin to notify him of the UBsan hit :)

1589756486
mq32
so hopefully zig makes SSL libraries more safe

1589756508
andrewrk
pixelherodev, that's next on my list. today I switched over to working on a new project to track various zig performance benchmarks over time

1589756543
pixelherodev
Oh neat :)

1589756590
pixelherodev
andrewrk: regarding "implement local variables," are they implemented in the ZIR format but not the incremental compiler?

1589756598
pixelherodev
Looking for a next task :)

1589756614
andrewrk
pixelherodev, how about math operations? local variables is actually going to require some chin scratching I think

1589756633
andrewrk
by chin scratching I mean like, maybe needing to change the semantics of the language

1589756923
andrewrk
we actually don't have a way to get a runtime value yet in ZIR without inline assembly, hah. so what that might look like is implementing more inline assembly parsing and using that to make a runtime known value, then do math ops on it

1589756941
andrewrk
otherwise that would be blocking on functions, globals, or local variables

1589756964
pixelherodev
It'll need reworking at that point anywyas though, so I might as well wait

1589756976
pixelherodev
Hmm, maybe removing dead decls?

1589756989
pixelherodev
Oh, i know

1589756998
pixelherodev
Self-hosted ARM feature detection

1589757004
andrewrk
ooh that would be excellent

1589757023
pixelherodev
It'll be useful, and thanks to Thalheim I can actually test it on real hardware :)

1589757024
andrewrk
I'll try to get these other components to be contributor friendly ASAP

1589757054
pixelherodev
Plus, it familiarizes me with ARM

1589757069
pixelherodev
Which I'm going to need to extend Thor soon (since the hello world is finally just about done for x64 :D)

1589757086
pixelherodev
Soon, I'll have a single API for a JIT that generates both AMD64 and ARM64 code :D

1589757094
andrewrk
neat

1589757100
pixelherodev
I think working on the self-hosted codegen while I do this has been really useful

1589757112
pixelherodev
Helps me find places where one does something better than the other, and then improve them both

1589757116
andrewrk
:D

1589757152
andrewrk
I think this is what it feels like when you start to acquire expertise in a particular domain

1589757167
pixelherodev
Anyways, heading AFI (away from internet) because my desk is too far away from WiFi :P

1589757177
pixelherodev
I'll probably have something done when I get back :)

1589757280
pixelherodev
oh my how did I never see #666 before

1589757328
Thalheim
that's from Christmas Evil

1589757444
pixelherodev
One quick note regarding emitting DWARF info before I head off

1589757472
pixelherodev
I think daurnimator mentioned that std.debug largely needs to be rewritten, so it's probably best to have that done first

1589757496
andrewrk
I don't think std.debug is relevant to self-hosted emitting dwarf

1589757521
pixelherodev
I mean, the DWARF types are already in std.debug, should we not use those?

1589757536
pixelherodev
I can definitely see certain, uh, other applications using DWARF emitting if it's in stdlib :)

1589757569
andrewrk
the dwarf_bits.zig file will be relevant

1589757581
andrewrk
emitting dwarf is going to be tricky, it also needs to participate in incremental updates

1589757602
pixelherodev
Oof, which means the emitted info needs to be tracked as well

1589757607
pixelherodev
So that we can update and remove references...

1589757622
andrewrk
with potentially some weird tricks like having line numbers computed as offsets from previous decls, so that only 1 pwrite() is needed when , for example, a blank line is inserted in the middle of a file

1589757645
pixelherodev
Sounds fun :)

1589757656
andrewrk
I'm pretty sure no one has ever done this

1589757697
andrewrk
then we get to solve the problem all over again with microsoft's undocumented PDB format!

1589758336
AlecTaylor
hi

1589758353
andrewrk
hi AlecTaylor

1589758371
AlecTaylor
I read that Zig can be used as a run-of-the-mill C compiler… should I expect anything interesting here, e.g., more optimisations, smaller executable size, fast compile times?

1589758423
andrewrk
yes you should expect different defaults for a few important things

1589758465
andrewrk
(1) without optimization flags, it defaults to debug mode, which enables undefined-behavior sanitizer

1589758489
andrewrk
(2) there is a cache system

1589758504
andrewrk
(3) it will use LLD as a linker, not the system linker

1589758565
andrewrk
(4) it will default to the native target, taking advantage of your host CPU features

1589759337
AlecTaylor
Thanks andrewrk

1589759376
AlecTaylor
I've been building a bunch of tiny C89 projects, and am about to cross-compile and cross-package their output, with as many different compile flags as I can think of

