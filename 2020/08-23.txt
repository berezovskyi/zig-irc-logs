1598141934
ky0ko
so if, hypothetically, i were wanting to work on getting zig to build for win9x... where would i start?

1598142055
marler8997_
I would say start by seeing a counselor so you can try to cope with the deep dark hole of self loathing that you're digging yourself into

1598142109
marler8997_
Then...maybe see if you can get cmake to work? :)

1598142162
marler8997_
Then...build llvm/clang/lld

1598142209
ky0ko
its ok, i run irix on a 150mhz mips machine and do real (paid) work on it, in 2020. i already know how to cope :)

1598142214
marler8997_
and see how far this gets you:

1598142232
marler8997_
irix? never heard of that one

1598142241
marler8997_
do you have access to all the source for it?

1598142316
ky0ko
nope! irix is sgi's closed source unix os

1598142317
ky0ko
it... does not resemble other unix systems in most ways

1598142384
marler8997_
interesting...I personally would never elect to use an OS that I don't have source to...of course I have to use Windows all the time, but it's not by choice

1598142428
marler8997_
anyway, see how far you can get compiling LLVM, let us know how far you get

1598142452
marler8997_
not sure which compilers work on win9x...

1598142544
ky0ko
my normal primary os is netbsd, and i'm with you there as far as wanting to use operating systems i have the source to

1598142560
ky0ko
but i also like messing around with really old stuff, for which sometimes that is not an option

1598142623
ky0ko
most sgi hardware can run netbsd, and some can run linux, but for a few of them, irix is the only possibility

1598142834
leeward
ky0ko: That is amazing. I haven't heard anyone talk about running irix since...1999?

1598142928
ronsor
porting zig to IRIX?

1598143008
ky0ko
ronsor: a couple folks are working on an llvm target for it, so it's probable that could happen :)

1598143169
ky0ko
which is great for me - the more zig is able to support obscure and unusual platforms, the easier it is for me to justify using it for any given project

1598143235
ronsor
I hope zig gets full support for riscv32 + UEFI personally

1598143246
ronsor
then I can run it on vexriscv on an FPGA

1598143409
ky0ko
the portability of c, its ability to run on hardware spanning back many decades, is one of the reasons i use it. zig's already got the other reasons covered pretty well

1598143470
ky0ko
if it can be made to target dos, win9x, irix, and mac os 7, i have basically no reason to use c for my own projects anymore

1598143542
ky0ko
i have an interesting bit of riscv hardware that could be neat to run zig on

1598143543
ky0ko
i've been trying to get linux going but having issues because it uses an old revision of the supervisor spec and mmu

1598143554
ky0ko
which falsely makes current spec software detect no mmu (and so there's a bunch of info out there falsely saying it doesn't have one)

1598143687
ky0ko
so there's a uclinux port, but i want the full thing

1598143950
marler8997_
I think we'll be in a much better position to support win9x once we have the stage2 compiler

1598152064
daurnimator
ifreund:

1598152133
pixelherodev
Oh neat, spu_ii branch merged :D

1598152149
pixelherodev
Time to do more SPU-II and CBE work :)

1598152192
daurnimator
marler8997_: I'd rather support NT 3

1598152209
daurnimator
win9x is a total mess

1598152256
marler8997_
wow that's going waaay back

1598152259
marler8997_
before my time

1598152396
ronsor
win9x: C:\CON\CON

1598154249
pixelherodev
Microsoft: Putting the con back in the economy since the 90s :P

1598154322
springworm
Does zig have its own assembler for self hosted?

1598154520
pixelherodev
Sorta

1598154530
pixelherodev
We don't produce asm, we produce raw machine code

1598154567
pixelherodev
e.g. for the SPU II backend, I use `@bitCast(u16, Instruction{ .condition = .always, .input0 = .zero, .input1 = .zero, .modify_flags = false, .output = .discard, .command = .undefined0 })`

1598154574
pixelherodev
(as one example)

1598185708
bsrd
Is there an or a combination of internal functions that maps floats of any size to unsigned of equivalent size, i.e. @bitCast(uint, float), where @sizeOf(uint) == @sizeOf(float)?

1598185857
KoljaKube
Don't think so, but since there are only 4 float types, you could just use a switch

1598186731
daurnimator
bsrd: @floatToInt ?

1598186828
bsrd
That doesn't preserve the bits and still has the problem of having to manually set the int type.

1598187101
alva
You could use @bitSizeOf and std.meta.IntType (IIRC)

1598187360
alva
std.meta.IntType(false, num_bits)

1598188737
bsrd
Exactly what I was looking for ^^ Thanks a lot!

1598188759
alva
:)

1598190131
cr1901_modern


1598191047
daurnimator
cr1901_modern: the `comptime` keyword like that makes its unary operand get evaluated at compiletime

1598192386
cr1901_modern
I see

1598192469
cr1901_modern
is there any case where comptime like that is useful besides "I've already used comptime in a higher scope to refer to the same variable"?

1598192509
cr1901_modern
And with that, first generic function I've written:

1598196558
cr1901_modern
Alright, I'm stumped on this one... I'm trying to coerce an array to a slice, but I get an error saying the array turned into a constant pointer to the array. What could possibly be happening?

1598196593
cr1901_modern
error is "expected type '[]u16', found *const [3]u16" on line 51

1598201736
ifreund
cr1901_modern: a little late, but you need to capture with |*tri| if you want tri to be mutable

1598201883
ifreund
or am I making things up? at the very least you can do `var foo = tri; and pass &foo

1598202475
manikawnth
Hi, I'm new to zig and this might be a stupid question. Is there any hidden top-level await feature? I mean, if the function invoking await is not invoked using async, instead of suspending will it return the value?

1598202605
ifreund
manikawnth: pretty sure zig doesn't allow suspend points (this includse await) in non-async functions

