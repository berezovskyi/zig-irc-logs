1592180463
pixelherodev
andrewrk: is there a way to use a local zig binary to build stage2 w/o needing LLVM installed?

1592180487
pixelherodev
I want to get back to stage2 work w/o needing LLVM

1592181098
andrewrk
pixelherodev,

1592181156
pixelherodev
andrewrk: that just builds LLVM, no?

1592181178
pixelherodev
I have a static Zig master build, which should be enough to build stage2

1592181185
pixelherodev
But stage2 says "out-of-tree compiler not allowed"

1592181186
pixelherodev
oh wait

1592181190
pixelherodev
I can just copy it to the build folder

1592181197
pixelherodev
... this will definitely not work but it's worth a try

1592181231
pixelherodev
... it's actually working

1592181232
pixelherodev
huh

1592181245
pixelherodev
... or not

1592181246
pixelherodev
drats

1592181321
pixelherodev
Unless I sync over the config.h from the buildbuddy, in which case...

1592181367
pixelherodev
Ha!

1592181369
pixelherodev
That actually worked!

1592181513
pixelherodev
All that's needed is a static up-to-date zig, and a pregenerated config.h

1592182248
pixelherodev
andrewrk: 5422 will be done by this time tomorrow night.

1592182874
andrewrk
pixelherodev, you might want to rebase - I already did the work for one kind of test case

1592185609
pixelherodev
ahok

1592188066
pixelherodev
andrewrk: thanks for the heads up :)

1592188610
andrewrk
np. don't want to step on your toes but also want to make sure I keep making progress on self hosted :)

1592189627
pixelherodev
No yeah that's fine

1592189633
pixelherodev
I wouldn't want it to stall because I've been busy :)

1592194983
pixelherodev
andrewrk: you on?

1592194992
pixelherodev
Not sure what time zone you're in :P

1592195103
andrewrk
hello

1592195119
andrewrk
currently on arizona time

1592195179
pixelherodev
Okay

1592195195
pixelherodev
you modified the cases so that Transform and Error are separate

1592195196
pixelherodev
Right?

1592195225
pixelherodev
Rather, I never pushed the change removing them, and you refactored it so both have internal series of updates?

1592195407
pixelherodev
andrewrk: is it fine if I remove those error case types and move them all to ZIRCase?

1592195458
andrewrk
remove them from #5422?

1592195493
pixelherodev
I rebased-ish onto master

1592195497
pixelherodev
not done merging yet

1592195499
pixelherodev
yes

1592195505
pixelherodev
So that #5422 only has ZIRCases

1592195518
pixelherodev
Where Error and Transform cases are just single-update ZIRCases

1592195548
andrewrk
I think ZIRTransformCase is already solved

1592195581
pixelherodev
Okay, so I should go the other route?

1592195592
pixelherodev
Remove ZIRCases?

1592195601
pixelherodev
Okay better way of asking

1592195605
pixelherodev
What is the intended pathway here?

1592195634
andrewrk
I don't see a need to put too much investment into the code structure of the test suite. As long as the test cases look friendly to contributors, and it does what you need it to do, I'm not going to scrutinize it

1592195644
pixelherodev
Okay

1592195646
pixelherodev
:)

1592195651
andrewrk
I expect the test harness to get rewritten a couple times as stage2 matures

1592195661
pixelherodev


1592195684
pixelherodev
aborts rebase, rather

1592195692
pixelherodev
didn't actually finish the manual cleaup

1592195694
pixelherodev
cleanup*

1592195725
pixelherodev
andrewrk: one other real quick point

1592195737
andrewrk
put another way: my goal here is just to unblock you so you can contribute to stage2 as you want to, please let me know how I can do that :)

1592195749
pixelherodev
the only remaining unresolved convo on the PR is the "find a way to mark cases as individual tests"

1592195762
pixelherodev
e.g. currently I get "1 test passed" even if there are a thousand cases

1592195766
andrewrk
ah right

1592195770
pixelherodev
What's the correct solution here?

1592195771
pixelherodev
Leave that be?

1592195812
andrewrk
well it's not really a pressing issue. but, brainstorming here, there could be something like std.testing.disableAutoProgressOutput() or something like that, as part of the test runner

1592195825
pixelherodev
Ahh, test runners are like build runners?

1592195842
pixelherodev
One other option then is a std.testing API to override test counts

1592195844
andrewrk
yeah. this is the "main" when you use `zig test`:

1592195851
pixelherodev
e.g. `std.testing.subtest`

1592195883
pixelherodev
I'm going to be offline for most of tomorrow (hence needing a static compiler working for stage2), which is why I want to know as much as possible so I can be productive when that happens

1592195889
pixelherodev
On that note, need to charge some spare batteries :P

1592219601
ifreund
you know, it would be pretty neat if we could share custom build.zig steps as packages

1592219633
ifreund
I've now got two custom steps that would be more widely useful: one scanning wayland protocols and another generating man pages with scdoc

1592222564
daurnimator
build.zig needs to be more composable: there's no way to e.g. for a zig library to declare C libraries it depends on

1592223228
ifreund
daurnimator: how would that look? isn't that up to whatever metadata we add to make the package manager possible?

1592223310
daurnimator
yep

1592223316
daurnimator
we need to define that metadata!

1592223422
ifreund
this gets complicated by optional features which require extra dependencies

1592224294
mq32
yeah i noticed that too

1592224302
mq32
right now, i make functions that just link the stuff or not

1592224306
mq32
but it's not really scalable

1592227304
daurnimator
makedepends, depends, optdepends, checkdepends

1592227323
daurnimator
^ the 4 types of dependencies supported by archlinux PKGBUILDs. it has worked quite well

1592227399
ifreund
void has hostmakedepends, makedepends, checkdepends, and depends

1592227429
ifreund
it cares alot more about cross compliling than arch does

1592227460
ifreund
I think zig also cares about cross compiling, so we probably want hostmakedepends as well

1592227537
daurnimator
What is non-host-makedepends for in a zig world?

1592227564
ifreund
linking against a C library that's not built from source?

1592227596
daurnimator
ah right; not everything is zig yet

1592227602
ifreund
sadly :D

1592227833
scientes
I don't like that attitude

1592227842
scientes
the NIH is excessive

1592227848
scientes
C is just fine

1592227912
ifreund
sure C is fine, but I'd rather write new code in zig

1592227914
daurnimator
at the same time; I don't really want the zig package manager to do more than manage zig. i have an os package manager for that

1592227941
ifreund
right, but the zig package manager will also be mananging zig wrappers for system libraries

1592227992
ifreund
i'm not sure if we can or should included tracking of what system libraries are needed to build your zig project though

1592228000
ifreund
rust doesn't afaik

1592228030
daurnimator
What I learned with luarocks is that a package manager where another package manager can "provide" things is very useful

1592228055
ifreund
It would be totally reasonable to take the same established approach of C projects and list your system dependencies in your readme

1592228068
daurnimator
e.g. system package manager might "provide" libcurl for the native target

1592228069
ifreund
how does that work? integration with ever OS's package manager?

1592228085
daurnimator
ifreund: yeah. (it doesn't exist in luarocks.... I've been meaning to add it for ages)

1592228116
ifreund
sounds hard and complex tbh

1592228127
ifreund
though also cool

1592228195
daurnimator
you'd install e.g. a "zpm-pacman" provider. if its not written yet, then you would pass it in manually: `libcurl = .{.link = "/usr/lib/libcurl.so", .include = "/usr/include/curl"}`

1592228298
daurnimator
ifreund: yeah; listing in the readme works for the interim too :) though it does get messy with >2 layers of deps

1592228346
daurnimator
"the http library links again the TLS library which optionally links against the hardware token library which optionally links against libusb...."

1592228352
ifreund
agreed, it works better for C since dynamic linking and shared libs are the norm and you don't have to list the deps of your deps

1592228369
daurnimator
depends on the platform. on windows that's not really the case

1592228380
ifreund
i really don't know about windows :D

1592228841
ask6155
hello!

1592229008
alexnask
Hi

1592229020
ask6155
:)

1592229026
greenfork
=)

1592231392
ifreund
why isn't c_void treated like an integer instead of a pointer? I feel like that would make more sense in many cases

1592231680
leeward
void? Not void *?

1592231768
ifreund
meant *c_void yeah

1592231775
ifreund
maybe its nonsense

1592231816
ifreund
it's just that every single time i use a *c_void (ususally ?*c_void really) i need to @ptrCast(@alignCast(@alignOf( ...

1592231842
ifreund
@intToPtr(@ptrToInt( ... also works, but kinda feels like a hack

1592231883
ifreund
semantically, a void pointer in C is really just a random address that some one told you has something you want at it, might as well just be an integer

1592231951
leeward
It has different semantics from an integer. 0 means something special; negative numbers don't exist; the person who put that number in place is claiming it points to something valid.

1592232084
daurnimator
`*align(x) c_void` is also meaningful

1592232116
daurnimator
though I've been wondering for a while if `align(A)` actually could be allowed on integer types...

1592232351
ifreund
yeah I think it's a bad idea, i'll just make myself a helper function that makes the verbose casting less verbose

1592232598
leeward
I wonder if translate_c should do the @alignCasting.

1592232793
ifreund
how would it know what I want to cast my *c_void to?

1592232952
leeward
Oh, you're using the alignment of the actual type.

1592232966
leeward
I was thinking they were completely unaligned.

1592233045
leeward
Hmm, that sounds like a worth while standard library function. mem.alignTo(target: type, ptr: *c_void) *align(target) c_void

1592233048
leeward
or something like that

1592233060
daurnimator
?

1592233077
ifreund
i don't think alignTo is the right name

1592233090
daurnimator
its called `@alignCast(@alignOf(T), myptr)`

1592233104
ifreund
it's a combination of @ptrCast, @alignCast, and @alignOf

1592233128
ifreund
what annoys me is needing to pass the target type twice and the general verobosity

1592233138
daurnimator
I think that was on purpose

1592233159
daurnimator
you can probably rationale in an old issue about why @ptrCast doesn't allow casting alignment at the same time

1592233161
ifreund
probably yeah, though I do it everywhere in my code cause callbacks in C

1592233184
ifreund
i agree, @ptrCast shouldn't cast alignment

1592233188
daurnimator
ifreund: declare your C callbacks userdata as aligned?

1592233212
daurnimator
otherwise, it really is just exposing the nastyness of C...

1592233255
ifreund
maybe my understanding of alignment is poor, wouldn't I still need to do *align(@alignOf(*MyType))c_void

1592233295
daurnimator
yep

1592233303
shakesoda
horrifying

1592233307
daurnimator
though maybe you can #define or typedef that away

1592233354
daurnimator
I'm not sure if you're writing the C code here or binding an existing library

1592233364
ifreund
the latter

1592233377
ifreund
this is for my wlroots based wayland compositor

1592233383
ifreund
and wayland is very callback based

1592233406
daurnimator
write a (private) helper function?

1592233408
shakesoda
alignments are nasty enough that i've been taking the approach of just aligncast & pray

1592233424
shakesoda
which, to be sure, i recognize as bad code

1592233427
daurnimator
shakesoda: then I pray you use --release-safe

1592233448
ifreund
fn ptrAlignCast(comptime T: type, ptr: var) *T { return @ptrCast(T, @alignCast(@alignOf(T), ptr)); }

1592233452
ifreund
this is what I want

1592233459
shakesoda
daurnimator: i don't, and it also hasn't come up as a problem anywhere, but it is a pretty bad code smell

1592233459
ifreund
and yeah --release-safe for the win

1592233484
shakesoda
daurnimator: but this is really to say that i'm interested in this discussion :)

1592233507
ifreund
though it should either return just T or the other references should also be *T

1592233519
daurnimator
ifreund: maybe instead of taking `var` take `*c_void`?

1592233525
shakesoda
i couldn't come up with any respectable solutions last this came up, so i just gave up and did what worked

1592233536
ifreund
probably better to do so yeah

1592233625
daurnimator
ifreund: can also turn on runtime safety in your function scope

1592233653
ifreund
I'm aware, haven't had reason to mess with it yet though

1592233669
ifreund
haven't even done any profiling yet

1592233710
ifreund
i dont think my code will be the bottleneck though, that's likely the wlroots code actually rendering stuff

1592233737
ifreund
though I do need to implement proper damage tracking at some point which will be the biggest possible performance win I can make

1592233802
daurnimator
ifreund: did you ever read through some of the arcan stuff?

1592233864
ifreund
daurnimator: I've heard of it but have not read up

1592234003
daurnimator
ifreund: hmmm, maybe start with

1592234080
ifreund
this does look interesting, thanks for the links

1592252766
leeward
5590 could use the documentation tag, if anyone with permissions to add tags to PRs is around.

1592261794
watzon
Hello peeps

1592261913
watzon
Question for anyone familiar. Does zig have a hard time with creating large comptime arrays?

1592261928
watzon
By large I mean 4096 items or more

1592262364
xackus
watzon i think a few thousand shouldn't be a problem

1592262369
xackus
just try it

1592262385
watzon
I

1592262396
watzon
I'm trying to put together something right now

1592262430
watzon
Don't completely understand how to create a comptime array like that though. I guess I'll see if I can figure it out haha.

1592262502
xackus
you can ensure it is comptime this way: const array = comptime makeArray();

1592262522
xackus
(for example)

1592263220
watzon


1592263244
watzon
Seems to have a hard branch limit set at 1000, unless I'm doing something terribly wrong

1592263294
watzon
This one works

1592265280
fengb
You can increase the quota:

1592265554
fengb
It’s there to protect against infinite comptime spinning

