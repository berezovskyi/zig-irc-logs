1580605658
pixelherodev
If I have a pointer to a structure, and I do `var a = p.*; a.blob = newval;`, `a` is a copy of whatever p pointed to, correct?

1580605950
fengb
Yep

1580606022
pixelherodev
Context: wanted to make sure that if I do that with a @ReturnType(std.mem.separate) (an iterator), I can then do a `.next()` w/o modifying the original

1580606036
pixelherodev
Lexer v2 is finally at the "actually writing code stage" :D

1580606362
Snektron
Test

1580606375
Snektron
Matrix kaputt

1580606724
Snektron


1580606736
Snektron
Lengthy read but it looks like they got something similar to Zig errors

1580606892
Snektron
I think that an effect system (botton of the page) would be a nice addition to Zig as well

1580606901
Snektron
In some form or another

1580606927
Snektron
Because theres still a problem with the whole doubly defined methods for const and non-const

1580606957
Snektron
You can probably do it with status quo but i dont really think thats the right way ahead

1580607295
pixelherodev
Does seem interesting, but I'd point out the warning he mentions at the bottom

1580607306
pixelherodev
"Gratuitously clever / hard to reason about"

1580607442
Snektron
Yes that does seem like a point

1580607496
Snektron
Nevertheless, i think its something to think about whether it fits in zig, possibly in some steralized way

1580607582
fengb
‚ÄúOur fundamental belief was that each is a condition the program cannot recover from.‚Äù Out-of-memory ü§î

1580607597
pixelherodev
I don't think that's entirely wrong though

1580607610
pixelherodev
Of course I know that Zig can catch OutOfMemory

1580607626
pixelherodev
I think that whether that's correct is heavily allocator-dependent

1580607656
pixelherodev
With a standard allocator - like, say, the std.c.c_allocator (or std.heap.c_allocator? either way), I think panicking is perfectly valid

1580607680
fengb
In Zig, each library is capable of recovering from OOM

1580607683
pixelherodev
Modern computers have a minimum of 4GB; if your system is using that much, programmers need to take responsibility and fix that

1580607684
pixelherodev
I know

1580607690
fengb
Instead of blowing out the entire program

1580607701
pixelherodev
Sure, but at the same time, in most programs there is no real response

1580607715
pixelherodev
Hence why most programs will do e.g. `catch @panic("Out of memory!")`

1580607730
pixelherodev
For the occasional program, you might be able to free some memory that can be recovered later

1580607739
pixelherodev
But most programs aren't structured in such a way

1580607740
fengb
For programs sure, but we‚Äôve decided in most languages that any library can panic and crash the stack

1580607743
Snektron
Its the usual panic in application code but return error in library code

1580607772
Snektron
So i think zig is taking the right way here

1580607777
fengb
At least Zig is the only language I know that designs around gracefully communicating OOM

1580607785
pixelherodev
Not disagreeing

1580607821
Snektron
Well, malloc in C doesnt crash by default so i guess it communicates OOM

1580607836
fengb
But nobody checks üôÉ

1580607853
Snektron
I usually do

1580607906
Snektron
I usually define errors for each type and make the initialization function return those

1580607929
Snektron
Not so nice for error compositions though

1580607941
Snektron
So its basically a manual error set

1580608003
Snektron
A message in riotx glitched and is now constantly at the bottom of my screen in this room :(

1580608076
pixelherodev
fengb, not nobody;

1580608115
pixelherodev
I mean, you could

1580608131
pixelherodev
But it would be much much more annoying to work with than Zig's

1580608179
fengb
I like Andrew‚Äôs talk where he showed the standard error ‚Äúchecking‚Äù of C

1580608639
daurnimator
pixelherodev: many programs have reasonable ways to react to out of memory

1580608654
daurnimator
pixelherodev: e.g. in a http server, you just throw the current request on the ground

1580608667
daurnimator
in a game engine you can skip a frame or drop the render distance

1580608775
Snektron
.

1580608779
Snektron
Damn

1580608784
Snektron
Message is still here

1580609051
Snektron
Finally

1580609062
Snektron
Alright sorry for that

1580609306
BaroqueLarouche
Snektron: at least the Matrix bridge is working for you, I wasn't able to reuse it using the official IRC bridge

1580609316
BaroqueLarouche
so I went back to IRCCloud

1580609561
Snektron
Yeah its a bit clunky

1580609603
Snektron
Im not much of an irc fan tbh

1580609615
Snektron
I'm probably to young for it

1580609628
BaroqueLarouche
me neither

1580609666
BaroqueLarouche
I stopped using IRC a really long time ago but rejoined because of Zig

1580609707
Snektron
This is the only group i regular

1580609812
Snektron
Weird that after such a long time there are only a few possibly successors for irc

1580609991
pixelherodev
Snektron, I'm 18 and I prefer IRC to any other form of chat

1580610000
pixelherodev
And it's really not that weird

1580610006
pixelherodev
IRC as a protocol is quite good

1580610023
pixelherodev
I can write a simple IRC client in maybe ten minutes

1580610045
pixelherodev
And you don't have to sign away your data to companies that don't have your best interests in mind

1580610077
pixelherodev
Plus, there are some really good clients

1580610187
pixelherodev
Heck, a free account on IRCCloud is better than Discord IMO

1580610279
Snektron
I didn't say discord is a good alternative

1580610313
Snektron
But things like sending images is rather useful in instant messaging programs

1580610328
Snektron
Also multiline messages, for small code snippets

1580610334
pixelherodev
Eh, maybe; I think image links are fine as is

1580610356
pixelherodev
I'm okay with the inconvenience of needing a minute to upload to e.g. imgur if it means everyone else has to do it also

1580610366
pixelherodev
I don't like unsolicited images; I can ignore unsolicited links

1580610384
Snektron
I think matrix actually lets me send images to irc

1580610387
daurnimator
I've never found a satisfactory IRC mobile flow

1580610424
pixelherodev
Yeah, but that just posts a link anyways

1580610434
pixelherodev
I wasn't joking about it taking ten minutes to make a client; maybe I'll make one for Android using e.g. libGDX

1580610538
Snektron
<daurnimator "I've never found a satisfactory "> As long as the matrix bridge holds up its actually quite nice

1580610551
BaroqueLarouche
I'm trying to remember how long it look me to have a basic IRC client working when I did it in C# when I was 17

1580610556
BaroqueLarouche
maybe a month?

1580610566
BaroqueLarouche
(I'll be 34 in 21 days)

1580610650
Snektron
I think i started on one but never finished it

1580610658
Snektron
Similar age

1580610680
Snektron
Happened quite a lot to my projects in that time

1580610936
fengb
I still never finish projects :P

1580610991
daurnimator
huh. "error: TODO: type coercion of anon struct literal to union"

1580610998
daurnimator
I didn't realise that wasn't implemented

1580611458
Snektron
<fengb "I still never finish projects :P"> Ive just gotten less time for side projects

1580611819
fengb
That doesn‚Äôt stop me from starting up more >_>

1580611936
pixelherodev
Welcome to the life of an engineer :)

1580613978
shakesoda
irccloud is nice, i've been using it for a couple years

1580613999
shakesoda
and i, too, have written a small pile of irc clients in the past

1580626285
pixelherodev
`(1 of 5): broken LLVM module found: cannot guarantee tail call due to mismatched ABI impacting function attributes` Hmm

1580626292
pixelherodev
Anyone know what that means?

1580626298
pixelherodev
`mismatched ABI impacting function attrs`?

1580626359
pixelherodev
This is in a function tail calling itself via `@call(.{.modifier = .always_tail}`

1580626423
pixelherodev
`return self.next();` works, but `return @call(.{.modifier = .always_tail}, next, .{self});` gives that message

1580626436
pixelherodev
The return type of `next` is ?!some.structure

1580626440
pixelherodev
s/?!/!?

1580626758
pixelherodev
Ah never mind, pretty sure it's the inferred error set

1580626760
metaleap
daurnimator: you mentioned the other day your "autojson" endeavour can also handle unions now, now for marshaling this is smooth to do, but how do you handle them on unmarshaling?

1580626844
pixelherodev
Better yet: `error: incompatible types: 'anyerror!?.ziggirat.LexerTree.Token' and '.ziggirat.LexerTree.Token'`

1580626965
daurnimator
metaleap: what do you mean? have a look at the code :)

1580627047
metaleap
you dont analyze the json.Value-at-hand against all possible members and rank each one's suitability picking the top candidate do you :D

1580627125
daurnimator


1580627170
pixelherodev
What if it can match multiple members?

1580627179
pixelherodev
Isn't it better to store which member is active in the JSON?

1580627196
daurnimator


1580627198
pixelherodev
Also, apparently declaring the token of optional type and then returning that constant works

1580627218
pixelherodev
Right, but I'm saying isn't that wrong?

1580627226
metaleap
ah "first match", yeah could work out for most practical uses

1580627241
pixelherodev
Wouldn't it be better to actually store the active / tagged member?

1580627279
daurnimator
sure. but not everyone does

1580627280
metaleap
pixelherodev: for sure if you have 100% control over the JSON-"schema" you're dealing with

1580627303
daurnimator
and usually you have a union of struct and number; rather than compatible types

1580627487
pixelherodev
True

1580627495
metaleap
OR you have a union of structurally-overlapping objs .. now these tho are sometimes best union-modelled at the field level but it depends

1580627557
metaleap
daurnimator: haven't parsed through the full diff but while i rolled something custom for "practicing zig" purposes in my libjsonrpc effort (needed by my liblsp effort needed for an upcoming ziglangserver effort =) i'd in the long term of course favour on your autojson when it does land in stdlib. as such, let me share some "corner-cases" from mere reflection-based traversing i found needed handling in practice so far, more might come up --- you might

1580627558
metaleap
have covered them or decide them out of scope for general-purpose but just to share:

1580627558
daurnimator
I have vague plans to also have a trait `jsonParse` that e.g. unions can provide

1580627568
daurnimator
but it got messy with the token-lookahead; so I skipped that for now

1580627611
metaleap
(btw i operate on already-parsed / -synthesized json.Values not Tokens but nvm)

1580627623
metaleap
ok cases i had to cover so far:

1580627678
metaleap
1. user-provided mapping function from json-obj-field-names to zig-struct-field-names and back to handle keywords such as `type`

1580627724
pixelherodev
Bug found in trunk: I have a function with return type `!?A`, if it does `return A{};` the compiler refuses, if it does `const a: ?A = A{};return a;` it works fine

1580627731
pixelherodev
Anyone know off hand if that's known?

1580627764
daurnimator
metaleap: re 1. I already added jsonDump trait support which cover this in one direction; jsonParse is sort of planned (see above).

1580627785
daurnimator
pixelherodev: yes that's known I think

1580627856
metaleap
2. "embedding" (think Go-like struct embeds or JS/TS/C#/etc simple single inheritance) via fields detected as "embeds" by user-specified predicate. ie. in the JSON the embed fields live at the same level as the embeddee fields and at the non-JSON side you want them in some embedded-field / "base instance" etc.

1580627871
pixelherodev
newly found bug: if you do a readUntilDelimiterOrEof where buffer size is zero, the first byte of the stream is discarded

1580627875
pixelherodev
Going to fix that shortly

1580627911
pixelherodev
I'm using a dynamically increased capacity; whenever StreamTooLong is encountered, it doubles buffer size and performs a tail call to reread the line

1580627921
pixelherodev
More generally, I think the last byte is just gone on a StreamTooLong

1580627927
metaleap
3. option for the unmarshaler to set optional-typed destinations to null on invalid inputs rather than erroring

1580627929
daurnimator
pixelherodev: I really want to fix those functions to not use std.Buffer

1580627945
pixelherodev
daurnimator, they already don't

1580627954
pixelherodev
`pub fn readUntilDelimiterOrEof(self: *Self, buf: []u8, delimiter: u8) !?[]u8`

1580627958
daurnimator
metaleap: not sure what you mean by 2. can you give me an example

1580627998
metaleap
4. option to either set missing optional fields to null or error if explicit `null` isnt there (not so crucial perhaps tho in reality)

1580628018
daurnimator
pixelherodev: I mean `readUntilDelimiterAlloc`

1580628031
metaleap
can do hang on

1580628076
daurnimator
metaleap: 3. sounds possible as a parse option. once autojson is merged you should send a PR for that one.

1580628102
daurnimator
though it would need to be supported with a use case

1580628104
pixelherodev
daurnimator, okay, but I'm not using that :)

1580628120
daurnimator
I don't know what sort of program would want to coerce invalid input to `null`...

1580628190
metaleap
2. example: now this is out-of-date / will be refactored into new proj, but as a showcase for "embedding": many of the structs in this source have the pattern of certain fields having PascalCased names exactly equal to their types' names. example in line:

1580628253
metaleap
you can instantly imagine that for those such a field doesnt existing in the LSP json. instead, the fields of the "embed struct" live at the same level in json as the "own" fields. but you dont want the duplication in your own data types

1580628284
metaleap
especially when `WorkDoneProgressParams` gets changed in a future version you dont want to change your 20 places in .zig

1580628300
daurnimator
metaleap: that just sounds like you want anonymous fields in zig; which is an open proposal

1580628373
metaleap
yeah but i mean for the present while the future hasnt arrived yet =)

1580628441
metaleap
5. capture "general free-form object" field use-case. some `any`-typed or `object`-typed fields usually come up in some schemas that would be mapped to std.json.Value / Vlue.Object

1580628492
daurnimator
1, 4, 5 all sound like they would be solved with jsonDump/jsonParse

1580628499
daurnimator
even 2

1580628527
metaleap
6. detect if destination is StringHashMap(Foo) and then dont treat it like any-old-user-struct , this one's probably obvious. same goes for ArrayList(Foo) if one didnt want to impose slice-only-by-convention (in the dest type structures) to the user or such

1580628549
metaleap
you mean as traits, not as today's stdlib funcs?

1580628558
daurnimator
yes

1580628570
daurnimator


1580628612
daurnimator
To get 6. I would expect StringHashMap to implement a jsonDump method.

1580628696
metaleap
yeah ultimately this sort of tunability is very desirable for std.json absolutely. reality always hits with cases where fine-tuned custom handling is called for.

1580628733
metaleap
i found this in golang practice quite often and was glad for their Unmarshaler / Marshaler 1-method interface to be implementable for any userland typedef

1580628872
daurnimator
also note that you can create helpers for custom parsers/dumpers and then use them like: `pub usingnamespace json_helpers.renameFields([_]struct {old: const[] u8, new: const []u8}{ .{.old = "foo", .new = "bar"}, ........ });`

1580629005
metaleap
7. "option" (i do it by default for now tho) to allow cross-convertibility on unmarshal: expected int but got float & vice versa, enum from either int or float or string, bool from "true"-string or "false" string or 0/1 nums if present. now this is debatable but more like "incoming payloads are buggy wrt to the schema at hand but the outside-world owners of those wont/cant fix in the schedule that matters"

1580629066
metaleap
for LSP i might turn it off actually, as long as one serves a buggy client can be rejected early

1580629098
metaleap
like "optionally allow maximum sloppyness from the counterparty" setting :D

1580629108
daurnimator
that sounds like a terrible idea

1580629159
daurnimator
but again... can be done with a custom jsonParse if we supported that

1580629174
metaleap
i know, but non-negotiable 3rd-party inputs can be a terrible place :D

1580629282
metaleap
yeah so traits would be the most apt design here, because general-purpose std.json shouldnt special-case on such situational dealings indeed.

1580631991
daurnimator
redj: the oldest item is a book recommendation

1580632626
mikdusan
metaleap: accepted:

1580632862
metaleap
daurnimator: is it "getting things done" :P

1580633005
metaleap
mikdusan: it's on the agenda at my end =) have an unrelated segfault i want to prep a mini-repro for first to file beforehand tho. clarification question however, new field "usage" isnt the existing one where userland code describes "mystep", ie. "does foo", but a new one (defaulting to null) for the possible "[-- [args]]" appendum when `addArgsFromBuilder` would be called?

1580633355
mikdusan
yeah probably don't touch .description and add an optional beside .description

1580633356
mikdusan


1580634493
redj
daurnimator: hehe, I thought maybe it was a huge pile of nice coding tasks and projects ;)

1580634601
daurnimator
redj: plenty of those in there

1580634614
daurnimator
~400 items long...

1580637906
nrdmn
hello!

1580638275
nrdmn
I've been away for a while and I've tried out the new array sentinel syntax yesterday

1580638342
nrdmn
I created an array using [_:0]u16{300} and printed out the bytes, expecting to get 2c 1 0 0

1580638356
nrdmn
however, if I compile my program with --release-safe, there seems to be no 0 at the end

1580638362
nrdmn


1580638363
nrdmn
example code

1580638375
nrdmn
Am I using it wrong? Is this a bug?

1580638449
nrdmn
the loop seems to be required to trigger this behavior

1580638912
Snektron
ndrmn, the array size is excluding the terminator

1580639055
nrdmn
Snektron: the issue is not that the loop doesn't hit the terminator, it's that the new array f inside the loop is not terminated

1580639081
nrdmn
I've got to go now, sorry. If you have any ideas why the program doesn't output what I expected, please leave me a comment under the code.

1580639085
nrdmn
I'll be back later today

1580639087
Snektron
I see what you mean

1580639088
nrdmn
thanks!

1580648364
nrdmn
and both assert(g[1] == 0) and assert(g[1] == 1) pass

1580648856
daurnimator
nrdmn: it doesn't add the sentinel for you: you have to add it yourself

1580648908
daurnimator
nrdmn: see

1580648991
nrdmn
daurnimator:

1580649001
nrdmn
otherwise access to array[4] in that example would be UB, no?

1580649035
daurnimator
huh..... I guess I'm wrong about that then

1580649346
nrdmn
I've got to leave, my laptop's battery is about to die

1580650675
betawaffle
how do i produce a flat binary with zig build? it doesn't seem to like OUTPUT_FORMAT(binary) in my linker script

1580651691
daurnimator
betawaffle: 'flat' binary?

1580651702
betawaffle
yeah, like not elf

1580651714
daurnimator
I had to use objcopy to convert it

1580651727
betawaffle
lame...

1580651731
daurnimator


1580652028
betawaffle
huh... why do i not even have objcopy...

1580652136
daurnimator
betawaffle: you may have llvm-objcopy

1580652147
betawaffle
yep, i do

1580652173
betawaffle
but i can't find the file it's producing in zig-cache

1580652199
daurnimator
betawaffle: you may want to use/copy my hack here:

1580652309
betawaffle
oh i found it, nvm

1580652642
daurnimator
fengb: your domain is parked?

1580657947
fengb
Probably!

1580663505
pixelherodev
What's the point of u0 / i0?

1580663518
pixelherodev
Do zero-bit integers actually serve any purpose whatsoever?

1580663522
pixelherodev
I can't think of any real use for them

1580663605
pixelherodev
The only thing I can think of would be, say, `?u0`, which is basically just u1/bool

1580663614
pixelherodev
(but with optional semantics)

1580663643
fengb
Maybe useful for generic numbers

1580663668
fengb
0 would no longer be a special case

1580663901
pixelherodev
?

1580663904
pixelherodev
Generic numbers?

1580665366
BaroqueLarouche
Generic BIOS call:

1580672021
fengb
pixelherodev: generic integer types, like std.math.max. Sometimes it‚Äôs easier to build a function or struct to have @Int(size) and degenerating to u0 is easier

1580672578
metaleap
or u0 is the "real void" and void is just readability sugar alias for fleshy verbal mortals

1580672654
mq32
metaleap, void is more a "empty struct", which you can create with the empty-block: `{}`

1580673704
pixelherodev
I'd argue that std.math.max should return a u1 in that scenario, but /shrugs

1580673753
fengb
I meant passing u0 into math.max would ‚Äújust work‚Äù

1580674006
pixelherodev
Right but I don't think it

1580674038
pixelherodev
I don't think a zero-bit number makes senser

1580674043
pixelherodev
s/senser/sense

1580674088
pixelherodev
I saw Andrew's logic - (0 .. (2^0) - 1) as the range - and I disagree

1580674114
pixelherodev
The actual definition of `u0` isn't `a number with the range 0 .. pow(2, 0) - `, it's `a number with zero bits`

1580674127
pixelherodev
I'd argue a `u0` shouldn't be able to hold `0` at all

1580674152
pixelherodev
That range is just a more intuitive definition of the range, which happens to be true for n > 0

1580674184
fengb
It doesn‚Äôt hold 0 but it

1580674205
pixelherodev
No, that would be null

1580674212
pixelherodev
We have a value for `absence of value`

1580674213
metaleap
or void :P

1580674218
pixelherodev
Nah, void is the type

1580674221
pixelherodev
s/the/a

1580674223
metaleap
ok {} bah

1580674229
metaleap
absence of even absence

1580674241
fengb
Absence in the math sense. Number theory is confusing

1580674261
pixelherodev
It has zero bits. It doesn't have a bit set to zero.

1580674264
pixelherodev
Therefore, it's NaN

1580674275
andrewrk
you're making a special case

1580674302
pixelherodev
For what?

1580674318
andrewrk
for a 0 bit number. if u0 has the value 0 then it is not a special case

1580674378
fengb
It also doesn‚Äôt store anything by definition since it‚Äôs 0bit. It‚Äôs just defined to always == 0 by the compiler

1580674392
fengb
NaN exists only for floats. There‚Äôs no equivalent for integers

1580674476
andrewrk
here's an example use case of generic code, where zig's status quo u0 makes things work correctly:

1580674533
mq32
+1 for "u0 is a set with only 1 value"

1580674561
mq32
as in a math sense, an integer is a set that can hold 2^n distinct values where n is the number of bits

1580674580
mq32
and thus 2^0 == 1 which means u0 should hold a set of a single value

1580675053
pixelherodev
fengb, I meant it's not a number

1580675058
pixelherodev
Not literally the NaN value

1580675079
Snektron
"u0 makes things work correctly" except you need a special check to see if the type is u8

1580675094
mq32
pixelherodev, why shoud it not be a number? :D

1580675109
pixelherodev
By that logic, we could have u1/2 which has sqrt(2) possible values

1580675128
pixelherodev
uN is an integer where N is the number of

1580675132
pixelherodev
If there's zero bits, you can't have a value

1580675152
pixelherodev
u0 already

1580675161
pixelherodev
There's no other type that has a real value without storage

1580675183
mq32
void, any empty struct may have a real value

1580675201
mq32
in a math sense, it's completly logical to have a set of a single value

1580675205
mq32
all operations are well defined

1580675215
pixelherodev
Right, but it also doesn't

1580675218
pixelherodev
This is a set of no values

1580675241
Snektron
<pixelherodev "There's no other type that has a"> comptime types

1580675289
mq32
pixelherodev: It's a set of exactly 1 value (which is zero)

1580675313
mq32
and the nice thing about "storing a single value from a set with only one possible value" is that we don't need any bits

1580676445
jaredmm
Windows, new directory, `zig init-exe`, copy the stdin code from

1580676466
jaredmm
Maybe someone can help me figure out what I'm missing here. I think I conceptually understand what could be happening, but I couldn't find any existing issue with the keywords I picked.

1580676678
pixelherodev
Huh, worktrees look interesting

1580676753
mikdusan
biggest thing to keep in mind - you can't move worktree's around manually. and the main worktree can't be moved as long as other worktree's exist.

1580677364
nrdmn
andrewrk: I've been observing weird behavior of sentinel-terminated arrays. Is this a bug?

1580677504
andrewrk
Snektron, are you referring to

1580677529
andrewrk
that is due to the shift operator incorrectly special casing 0 bits

1580677558
andrewrk
and once that linked issue is solved, the special case goes away

1580677981
fengb
nrdmn: I think Zig only auto terminates literals

1580678069
andrewrk
nrdmn, it's a bug. array literals with runtime elements is failing to initialize the sentinel

1580678109
fengb
Oh

1580678191
Snektron
andrewrk, right i see

1580678298
andrewrk
nrdmn,

1580678462
nrdmn
alright, thanks

1580678614
nrdmn
aren't sentinels of the same type as the array elements? If yes, then I think the array in your example should be terminated with a 99 byte and a 0 byte

1580678861
andrewrk
good point, I accidentally introduced endianness into the test. I'll make the sentinel 0x9999

1580678884
andrewrk
done

1580678909
andrewrk
I used a non-zero value so that the test will likely fail in debug builds

1580679986
mikdusan
andrewrk: I'm not understanding stage1 assertNoError() (about a dozen sites, mostly in analyze.cpp). by calling type_resolve isn't that a major side-effect that is present in debug builds, and missing in release?

1580680010
metaleap
asked this before but.. i need to hash-set strings at comptime and both the page_allocator nor the fixedbuf compile-error on me via their reallocFn

1580680065
metaleap
has nobody ever kept a dynamic list or hashmap at comptime?  :D  guess can roll my own fixed-buf-backed-slice/arraylist mashup

1580680066
fengb


1580680085
metaleap
thx fengb , subscribing

1580680102
fengb
No workaround yet

1580680184
fengb
I‚Äôve used binary search arrays for this

1580680193
metaleap
good tip

1580680249
metaleap
generally i mean fixedbufalloc would suffice IMHO for comptime and is just a trait-ish-layer over a fixed-size array right? might clone a comptime version then try to reduce to the error point some day. but will read thread first, was probly tried already

1580680285
andrewrk
mikdusan, assertNoError() on type_resolve seems like a bug

1580680287
fengb
Any allocation assigns undefined, which I believe is still broken at comptime

1580680357
andrewrk
mikdusan, unfortunately the very idea of types resoving in phases did not used to be how it worked, and the codebase slowly evolved to accomodate that

1580680365
andrewrk
which is a major source of bugs

1580680573
mikdusan
on a branch I may have introduced a bug, which was hidden with this side effect. picture is clearer now, thanks!

1580681961
aperezdc


1580681986
aperezdc
Oi, sorry, wrong window

1580681997
aperezdc
Well, I hope people here also fond that amusing

1580682983
pixelherodev
std.ascii.isAlpha checks if something matches `[a-zA-Z]`?

1580683024
Snektron
imagine walking around with 100 smartphones

1580683027
Snektron
even if second hand

1580683059
pixelherodev
My first-hand smartphone was $100

1580683080
pixelherodev
I wouldn't be surprised if you could get 99 second-hand for... say... $4K?

1580683128
Snektron
still a lot of money to carry around in a cart

1580683131
pixelherodev
True

1580683147
pixelherodev
But if it saves you time, it might be worth it even if someone steals them, say, every month?

1580683159
pixelherodev
Time is money, after all

1580683173
Snektron
<metaleap: has nobody ever kept a dynamic list or hashmap at comptime?> i've not in this language

1580683201
Snektron
but my c++ ones aren't very nice to use

1580683405
metaleap
Snektron it would be so beautiful in contrast in zig =) so many niceties in std to reuse except some rely on

1580683444
aperezdc


1580683465
Snektron
As a temporary workaround you could use a FixedBufferAllocator?

1580683469
pixelherodev
aperezdc, that's the second time this hour you pasted that here :P

1580683485
Snektron
hm

1580683489
metaleap
Snektron see above, it doesnt work with any sort of fixed-size [n]u8

1580683508
metaleap
that i tried

1580683525
Snektron
oh i see

1580683571
aperezdc
Sorry

1580683621
fengb
A quick fix could be disabling assign undefined at comptime

1580683625
aperezdc
Keyboarding around with one hand is hard

1580683688
fengb
ü§î

1580684293
andrewrk
what's wrong with undefined at comptime?

1580684467
Snektron
i wonder, how are comptime values calculated?

1580684478
Snektron
Is the IR being interpreted directly?

1580684598
fengb
memset undefined at comptime crashes the compiler

1580684655
pixelherodev
So apparently, caught -> discarded errors show up in the stack trace...

1580684763
Snektron
ive noticed stuff like that too

1580684768
Snektron
something is definitely wrong with it

1580684777
Snektron
didn't dive into it though

1580684939
andrewrk
fengb, ah. that should be straightforward to fix

1580685261
Snektron
looks like its also having some trouble with slice pointers

1580685852
Snektron
So i tried to implement a smal comptime allocator to see what kind of issues i'd run into

1580685869
Snektron
seems theres another very specific error

1580685886
Snektron
if you have a slice with a comptime known address, @ptrToInt works on it

1580685892
Snektron
@intToPtr works also

1580685916
Snektron
but `@intToPtr(*u8, @ptrToInt(ptr))` doesn't work

1580686008
Snektron
oh

1580686024
Snektron
also only if you put it in a temporary variable first

1580686150
Snektron
alright, i've narrowed it down, i'll make an issue

1580686732
Snektron
almost 1024 issues

