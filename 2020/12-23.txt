1608681635
dominikh
zyg?

1608681662
a92
An alternative, simpler compiler for Zig pixelherodev is starting to make

1608681726
pixelherodev
Name is temporary; I'll settle on a real name by 0.1, at which point I'll just `find -type f -exec sed 's/zyg/new name!!!/g' \;`, commit the results, and then be surprised that I broke it

1608681733
pixelherodev
:)

1608681754
pixelherodev
For now, spending another 20 minutes working-working

1608684375
pixelherodev
Starting zyg stream shortly :)

1608685407
pixelherodev
Starting :)

1608685845
a92
Where can it be accessed?

1608686088
pixelherodev


1608686125
pixelherodev
If someone could send a ping in the chat to let me know it's working, that'd be helpful :P (using weechat over ssh to access it lol

1608686227
a92
I see writing about Zyg, but it's in a recording; you appear to be offline

1608686237
a92
Oh, you're online

1608687022
seadragon-droid
fengb: You're right. That wouldn't make any sense. Is there any way to correctly cast a []const u8 to []u8, then?

1608688318
daurnimator
seadragon-droid: no

1608688638
seadragon-droid
So the correct pattern in this case is to retain a []u8 in the struct, and then provide a copied const version of the same, either by a method or a redundant field?

1608689768
seadragon-droid
or just to give up on exposing a []const u8 at all?

1608697111
pixelherodev
Zyg design video:

1608697114
pixelherodev
Feedback welcomed :)

1608698355
pixelherodev
Ohhh, the mic was noisy because the nonexistent front mic was set to 100 and generating static! :P

1608698465
pixelherodev
Great thing to realize

1608706306
dcand
hi

1608715721
TheLemonMan
ifreund, I just read you're having some problems with comptime params, got a link?

1608715771
ifreund
TheLemonMan: for you, always :D

1608715782
ifreund
yet again I failed to reduce a test case

1608715795
ifreund
but that branch doesn't compile

1608715954
TheLemonMan
should it stop at "error: container '.wayland.wayland_server_core.list' has no member called 'Direction'" ?

1608715993
ifreund
TheLemonMan: no, you need to update your submodules

1608716016
ifreund
(can't wait tilll I can get away from submodules :/)

1608716042
TheLemonMan
oh right, submodules

1608717355
TheLemonMan
oh, I think it's the same bug that makes this

1608720075
ifreund
TheLemonMan: it's not really blocking forward progress tbh, just a refactor that will have to wait for now

1608720081
ifreund
so don't spend all day on it

1608726933
pixelherodev
yayy, emit-h in stage2 was merged!

1608726943
pixelherodev
I'm probably going to be working on Zig again soon, in addition to Zyg :)

1608726948
pixelherodev
Need more CBE / emit-h support!

1608726981
ikskuh
\o/

1608726992
pixelherodev
hello :)

1608730770
rowbee
will zig auto-cast comptime_int to a type fitting the integer down the road or will we always have to specify the type in the variable declaration?

1608730848
ifreund
rowbee: I don't think zig will every choose the type for you if it is ambigous

1608732025
pixelherodev
Very worthwhile read:

1608738823
parshua
hi all, how do you format a string in zig? something like sprintf?

1608738924
dutchie
std.fmt.formatBuf or std.fmt.allocPrint

1608739034
dutchie
wait, formatBuf isn't what i thought.

1608739060
fengb
std.fmt.bufPrint too

1608739076
fengb
They all use std.fmt.format under the covers

1608739086
parshua
thx; I can't find any mention of these anywhere on the web; where are the docs? Failing that, the source?

1608739099
dutchie


1608739120
fengb
ziglearn.org might be more useful as a learning resource

1608739126
dutchie


1608739652
parshua
is there a defailt memory allocator defined in the std?\

1608739672
parshua
is there a default memory allocator defined in the std?

1608739719
ifreund
parshua: std.heap.GeneralPurposeAllocator?

1608740330
m4r35n357
hello?  looking for any docs, examples etc. for zig translate-c, I've tried

1608740385
m4r35n357
tried passing it a c file, got: 'stdio.h' file not found

1608740415
m4r35n357
is it for whole files, or just functions & small chunks?

1608740502
earnestly
m4r35n357: You may need to tell zig where to find stdio.h, which itself can be done but iirc might be magicked with -lc

1608740646
m4r35n357
earl, OK will try that. thx . . .

1608740683
m4r35n357
well it behaves differently: Segmentation fault ;)

1608740738
m4r35n357
also with --library c

1608740828
m4r35n357
ooooooh!, platform issue!

1608740882
ifreund
translate-c is mostly intended to be used for automatic inclucion of C headers

1608740896
m4r35n357
fails on armv7l, works on aarch64 (quite verbose!)

1608740928
ifreund
if you want to port a C codebase to zig you're probably best off doing it manually otherwise the result will not be very pretty

1608740954
m4r35n357
ifreund, OK, cheers.

1608741102
m4r35n357
ifreund, it certainly has a go at a lot more than that though!

1608741127
ifreund
m4r35n357: yeah, well people put arbitrary C code in headers no?

1608741161
m4r35n357
ifreund, I suppose that would mean it should cope then? ;)

1608741172
m4r35n357
ifreund, nm I'm just kidding

1608741200
ifreund
It should do fairly well as long as the marcros aren't too wierd

1608741210
m4r35n357
ifreund, I wouldn't dream of putting my code in a header!

1608741259
m4r35n357
I'll have a quick through the output anyway . . .

1608741264
m4r35n357
look?

1608741281
earnestly
header-only libraries are becoming more popular

1608741390
parshua
ok, took me 'only' an hour to finally format a damn string, after 25 years of programming with system languages

1608741393
m4r35n357
in c?

1608741517
parshua
The language supports optionals, and there's the std.heap.GeneralPurposeAllocator, why not allow people to optionally skip passing allocators and use the default allocator?! The way it works now is an ergonomic nightmare and is legally punishable by hardwork in gulag

1608741540
ifreund
there is no default allocator

1608741555
parshua
even worse

1608741556
dominikh
the standard library is optional :)

1608741561
ifreund
generally library functions take an allocator parameter and use that

1608741570
dutchie
there is a helpful flowchart here

1608741589
ifreund
which makes using things like arena allocators a breeze

1608741594
earnestly
Is a "system languages", Go?

1608741598
parshua
C

1608741614
dominikh
25 years in Go would be truly impressive :P

1608741618
ifreund
heh

1608741700
parshua
this is truly brain-dead; there MUST be a default allocator, and passing an allocator should be optional, and if none is passed, the default should be used

1608741719
dominikh
why MUST there be one? because you think so?

1608741720
companion_cube
Odin (jai?) has this "context" that is passed implcitely, and it contains an allocator

1608741728
companion_cube
I wonder if it'd be a good fit for zig: P

1608741730
companion_cube
:p

1608741752
ifreund
definitely not

1608741764
ifreund
zig trys to be explicit not implicit

1608741765
dominikh
passing my own allocator is about as difficult as passing null to an optional

1608741768
parshua
because 99% of the time, that same allocator would be used, and no one cares?!

1608741789
dominikh
<arbitrary percentage> of the time, I use an arena allocator

1608741809
ifreund
that 99% number may be true in the C code you're used to because that's the only ergonomic option

1608741834
ifreund
zig makes using stuff like arenas much nicer, and so that 99% is not accurate in my experiance

1608741851
dutchie
also, things like ArrayList store the allocator so you don't have to re-pass it every call

1608741878
ifreund
bascially what I'm saying is that there's a reason this is the way the std is designed

1608741902
ifreund
I'd encourage you to gain a bit more experiance with it before passing judgment

1608741953
ugla
I'm using C libs in the program I'm working on and it's annoying me that I can't pass an allocator. They just do heap allocations for me with malloc, when they could be avoided completely.

1608742009
fengb
I've found myself be lazy now that GPA is a thing

1608742033
companion_cube
be lazy in programs, not libraries, heh

1608742082
dominikh
even with the GPA, I'm just one build option away from wrapping that in Tracy magic

1608742183
dutchie
i should try tracy out at some point

1608742189
fengb
It's too easy to reach for it instead of thinking

1608742212
dominikh
Tracy works about 80% great with Zig

1608742658
forgot-password
â€œ/exit

1608742663
forgot-password
Oops :D

1608742729
parshua
I'm not saying that allocators should be removed; they should be optional. The language supports it, why not use it? Every one will be happy, and the use of the stdlib will be more ergonomic

1608742826
dominikh
because it would encourage lazy programming, not making use of custom allocators. realistically, a lot of your calls shouldn't rely on a default. also, unless you make it a language feature that magically inserts a default allocator when none was passed, every function accepting an optional allocator would have to check for null and decide what the default is

1608742866
ifreund
and you can't assume a default allocater in libraries

1608742951
ikskuh
parshua, have you ever written programs outside classic desktop applications?

1608742963
ikskuh
limited memory, embedded, wasm, realtime?

1608742978
ikskuh
you want to have allocators there (if any) and you want to have control over allocation

1608742999
ikskuh
zig is the only language where you can use most of the stdlib in any place you want conveniently

1608743005
ikskuh
because nothing has implicit allocators

1608743016
parshua
WTH are you people even talking about? You understand that optional allocator just makes most people's lives easier, while not making your life any harder right?

1608743036
parshua
iksakuh: yeah I've done all of that outside if wasm

1608743043
ikskuh
optional allocator means that we either implement everything twice => harder work, double the work

1608743058
ikskuh
it also means that you have an implicit dependency on a global allocator if none is passed

1608743066
ikskuh
it makes

1608743072
ikskuh
but it doesn't make programming in general easier

1608743078
ifreund
^

1608743089
ikskuh
because being forced to think about requiring an allocator makes your software more performant

1608743100
ikskuh
because you are forced to chose at write-time

1608743104
ikskuh
what allocation strategy is used

1608743117
ikskuh
and if you are

1608743119
parshua
by optional I mean: func XXX(alloc: ?*Allocator)

1608743138
dominikh
and where does the default allocator come from? does XXX check if alloc is null?

1608743140
dutchie
what i've been using zig for mostly recently is Advent of Code problems. i just write 3 lines of boilerplate at the top and type init(allocator) a few times

1608743156
dutchie
sometimes allocator.alloc(..) and allocator.free(..)

1608743174
companion_cube
dominikh: if there's no default allocator and the passed allocator is null, it could return OutOfMemory?

1608743179
companion_cube
or whatever the failure is

1608743190
ikskuh
parshua: what's the fallback then?

1608743199
ikskuh
using a global allocator? who defines that? definitly not the library

1608743204
dominikh
companion_cube: I'm trying to figure out if each and every function has to check if the argument is null and then use the default instead, or if there's going to be compiler magic

1608743250
ifreund
the former would be better than compiler magic but is definitely worse than the status quo imo

1608743298
parshua
no compiler magic; you'll have another [inlined] function call inside the XXX function that will try to return the allocator, and will either use the one that is passed, fallback to the default, or return an error if no default is set for some reason

1608743358
dominikh
seems harder to write every single function that takes an allocator, then. also, you're basing this whole "there should be a default allocator" on what, an hour of using Zig? I'm not sure that's enough time to get a feeling for how often you want to pass in custom allocators

1608743426
ikskuh
i think the status quo is near-perfect when it comes to allocation strategies

1608743438
ikskuh
using that `null` argument makes stuff harder to use instead of easier

1608743472
ikskuh
if you want a global allocator, you can do that in your programs

1608743483
ikskuh
but writing libraries with a global allocator is more work

1608743499
ikskuh
afaik Odin has a global swappable allocator

1608743505
ikskuh
but i really don't like that design, it makes stuff weird

1608743505
parshua
I'll get used to all the ergonomic warts after extensively using the language. If I can use C, then I bet I'll be able to use Zig or anything else over time; take the feedback for what it is

1608743519
companion_cube
ikskuh: I thought odin had a scoped allocator in the `context`

1608743531
ikskuh
yeah, it's still kinda weird imho

1608743535
dominikh
Odin will have whatever Jai has :P

1608743546
ikskuh
i didn't really grasp the concept from seeing code examples

1608743551
companion_cube
ikskuh: I think it's quite ergonomic

1608743558
ikskuh
never used odin though

1608743559
companion_cube
every function has a hidden "context" argument (

1608743568
ikskuh
so if you have more insight there: please share! :D

1608743573
companion_cube
and you can overload it locally before calling subfunctions

1608743575
dominikh
I'm already not huge on thread-local storage, a hidden context only seems marginally better

1608743578
companion_cube
it's dynamic scoping

1608743594
ikskuh
it's definitly better than having a global for that

1608743598
ikskuh
but it's still weird imho

1608743612
dominikh
a lot of effort to avoid having to pass one more argument to functions

1608743622
companion_cube
2, actually

1608743628
dominikh
what's the 2nd one?

1608743631
companion_cube
I think the context has an allocator and a scratch allocator

1608743643
ifreund
it could be one context arg

1608743643
companion_cube


1608743651
companion_cube
it is one context arg

1608743661
companion_cube
I imagine it's allocated on the stack and passed by refâ€¦

1608743661
dominikh
yeah; even if the context were a good idea, I'd pass it explicitly, not implicitly

1608743678
ifreund
it is one hidden context arg instead of one explicit arg

1608743687
dominikh
(then again, some people seem to absolutely hate Go for doing that with context)

1608743692
fengb
The context is too implicit. I like my function signature indicating whether allocation is happening

1608743697
companion_cube
it's probably nice if you want a more ergonomic language

1608743707
ifreund
worse, people can put arbitrary stuff in the context iirc

1608743709
companion_cube
something a bit higher level, where you have hasmap literals and stuff

1608743712
dominikh
fengb has a good point. in Zig, you can immediately tell if allocations will happen

1608743713
companion_cube
hashmap*

1608743720
ikskuh
i think both solutions are good, i just prefer the very explicit way

1608743725
ikskuh
had way too much pain in the past with implicit shit

1608743740
dominikh
makes it a lot easier to avoid allocating accidentally, too

1608743746
ifreund
yeah I'd take odin over C++ without a second of hesitation

1608743748
dominikh
my function doesn't take an allocator? guess I won't allocate

1608743768
dominikh
(unless I call into C, which is pure sadness each time)

1608743783
ifreund
yeah zig really pushes you into writing efficient code I feel like

1608743787
companion_cube
it's just a different tradeoff on expliciteness

1608743802
companion_cube
like if you want something concise like python, you probably don't want to pass allocators explicitly around

1608743805
companion_cube
jsut a different use case

1608743820
dominikh
ifreund: I've certainly had a bunch of "wait, this can actually go on the stack" moments

1608743837
ikskuh
ifreund, dominikh: yeah, i agree. zig makes you think more efficient

1608743843
ikskuh
and it leaks into other languages

1608743860
ikskuh
and i cry ever time i need to write `new TForm` in C++

1608743887
dominikh
try being me, my main language is garbage collected :P

1608743920
ifreund
dominikh: go also seems incapable of putting a static array on the stack

1608743933
ifreund
though I guess if I care about performance I should just write zig :P

1608743969
dominikh
ifreund: depends if you mean an array or a slice. I presume slices: for slices, there are some optimizations, when it can be sure the slice won't have to escape to the heap, and the size is known at compile time

1608744003
dominikh
but as is the way with the GC, you have to rely on optimizations, and those optimizations not changing

1608744292
ifreund
yeah, that somewhat in depth knowledge about how the language is implemented being important for performance annoys the heck out of me

1608744333
dominikh
in Go, you clear a slice with a for loop, writing the zero value to each element. the compiler then optimizes that to a memclearâ€¦

1608744340
dominikh
it's both pretty and stupid at the same time

1608744911
CommunistWolf
probably easiest just to build a new slice

1608744934
CommunistWolf
it uses SSA behind the scenes anyway

1608744971
dominikh
the backing array probably lives on the heap, so you want to reuse it, not allocate a new one

1608745259
fengb
Does Go have escape analysis?

1608745264
dominikh
sure

1608745422
viashimo
CommunistWolf: what's SSA?

1608745466
CommunistWolf
static single assignment

1608745492
CommunistWolf
it's an optimisation pass that tries to turn all `x =  ...` statements into x1 :=, x2 :=, etc

1608745602
CommunistWolf
introduced in go 1.7, it's actually pretty popular:

1608745629
viashimo
cool, thanks

1608745634
ikskuh
SSA is quite nice as it's easy to understand

1608745637
ikskuh
and in theory to implement

1608745665
ikskuh
ifreund, did you do some work on stage2? i wonder whats the difference between SSA and SSAT

1608745679
CommunistWolf
>  SSA is formally equivalent to a well-behaved subset of CPS excluding non-local control flow, which does not occur when CPS is used as intermediate representation.[3] So optimizations and transformations formulated in terms of one immediately apply to the other.

1608745765
ifreund
ikskuh: SSAT is static single assignment tree

1608745770
ikskuh
yeah i know that

1608745773
ikskuh
but try googling that

1608745773
ikskuh
:D

1608745797
companion_cube
what's the tree for?

1608745803
ifreund
ikskuh:

1608745803
ikskuh
that's what i wonder as well

1608745810
ifreund
more structure than just blocks

1608745821
ikskuh
ah well

1608745823
ikskuh
paniq :D

1608745849
companion_cube
so like what wasm has?

1608745857
companion_cube
looks a lot like CPS

1608745865
ikskuh
so SSA, but with stuff like loops?

1608745906
ifreund
loops:

1608746851
dominikh
pretty much looks like SSA with indentation :P

1608746868
dominikh
dunno, I prefer the classic form with blocks and linear instructions

1608746904
ikskuh
dominikh: they are kinda harder to compile i think

1608746943
dominikh
ikskuh: hm. my background is in static analysis, not compilation. SSA (well, SSI for me) is pretty much my final representation

1608746954
ikskuh
oh, fancy

1608747017
dominikh
(static single information, not social security :P)

1608747177
ikskuh
do you think zig has a good potential for even further static analysis?

1608747518
dominikh
I don't know yet. it's certainly more difficult to write static analysis for Zig, on account of the compile time stuff. but I haven't looked into the zig IR yet, either. in general, you can think of most static analysis as an additional type system, enforcing more rules than the base language's type system can express. except your users won't help you out by using keywords of any sort and you have to

1608747520
dominikh
guess intentâ€¦

1608747570
companion_cube
you could do static analysis after all comptime is resolved

1608747594
ikskuh
yeah that was my idea as well

1608747600
ikskuh
you can output zig IR (which is SSAT)

1608747604
ikskuh
and resolve that to SSA

1608747608
dominikh
yeah, you just need tighter integration with the compiler then, as opposed to implementing your own parser and type checker (unless you want to reimplement all of the comptime stuff)

1608747618
companion_cube
what kind of static analysis are you thinking about anyway?

1608747619
ikskuh
which doesn't sound that bad imho

1608747631
dominikh
or hope that the IR is high level enough for your needs. compilers and bug finding tools tend to have different IRs

1608747659
dominikh
(and some checks you want to implement on the AST + type info, as the AST encodes more of the user's intent)

1608747746
dominikh
std.meta will probably be able to cover a lot of checks you'd otherwise see in a separate tool

