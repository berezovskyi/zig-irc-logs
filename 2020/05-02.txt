1588377867
ikskuh
huh

1588377883
ikskuh
alexnask, you looed for runtime eval of stuff in tuples, right?

1588380639
oats
are there stdlib tests in the main repo?

1588380771
aerona
yes

1588380801
oats
I'm having trouble finding them

1588380846
aerona
they're in the same files of the functions they're testing

1588380853
oats
ahhh

1588380891
aerona
yeah, zig has built-in support for tests so no external testing library required

1588381826
foobles
`vector1 == vector2` returns a vector right?

1588381845
foobles
but `optional_vector == null` returns a bool, right?

1588381986
foobles
so should `optional_vector == vector` return a vector or a bool?

1588382075
oats
so I can't figure out what the recommended way to open a file is

1588382141
oats
aha, openFileAbsolute!

1588382146
oats
that took some digging

1588382435
oats
or fs.cwd().openFile

1588382969
mikdusan
foobles: yes, `v0 == v1` expression type is @Vector(...); optional_vector == vector should also express as vector

1588382990
foobles
alright thats what I was expecting

1588382995
foobles
thanks, ive never actually used them

1588387907
daurnimator
ikskuh: that's intentional: otherwise its impossible to e.g. open a file called "COM"

1588388501
daurnimator


1588388517
daurnimator
^ interesting! I wonder if this would be a useful thing to do in zig

1588389480
foobles
like having an alloca exposed as a function?

1588389538
shakesoda
i've used alloca a couple times in c code but it is incredibly difficult to use both safely and such that it's actually a reasonable tool for the job (versus

1588389570
shakesoda
doesn't it also break zig's ability to know at compile time how big the stack is?

1588389585
shakesoda
i could see complications arising

1588390779
yrashk
Curiosity-wise, is ZIG_STATIC=ON supposed to work on master or is it currently broken?

1588391552
fengb


1588391584
fengb
I had to manually convert it into a more intelligent copy (and hope the alignment is correct)

1588391969
shakesoda
the fact that you had to aligncast is probably why

1588392167
fengb
I tried alignCast without the manual slice conversion and still no good

1588392182
fengb
Zig isn't recognizing it as a memcpy :(

1588392425
marler8997
I've put together a patch for a qemu issue.  I've built it and tried it out.  Where can I find the configuration to build qemu for ziglang.org/deps/qemu...?  And then how would I upload it?

1588393551
mikdusan
marler8997: this is how we build qemu for continuous integration tests:

1588393564
marler8997
perfect thank you

1588393728
marler8997
you've given access to the entire repo to the docker build, was that on purpose?

1588393857
marler8997
I don't think the docker build needs access to README.md and LICENSE for example right?

1588393905
mikdusan
are you speaking to .dockerignore ? we can odd those. not terribly important imo

1588393945
marler8997
docker is weird, when you perform a build, it recursively copies all files and directories in the Dockerfile's containing directory to the virtual build image

1588393968
marler8997
so typically I put the Dockerfile in a subdirectory, so I can limit what files it copies to the build image

1588393997
mikdusan
it recursively copies files, but files not used are not a dep of the image. however, there is the overhead of the copy to consider.

1588394013
daurnimator
:( child process needs to love

1588394014
marler8997
true

1588394018
daurnimator
too many things I want to work on right now

1588394027
marler8997
they are copied for the build, but not copied to the image unless you explicitly copy them

1588394296
mikdusan
docker has shortcomings in that way and imo they

1588394332
mikdusan
or at least build up an env as RUN commands are issued

1588394342
daurnimator
anyone able to help with

1588394477
marler8997
yeah, it doesn't bug me too much because I can't really get behind docker anyway.  The "layer" approach doesn't seem right to me.  I'd rather having something like Nix where you just pull in all the packages you need into your container, you could even share the memory with the host because they are all named from hashing their contents

1588394576
marler8997
IMO you shouldn't have to rebuild all the things in your image just because you made a change in the middle.  I understand why you have to, because linux packages can be installed anywhere, which is why a nix-container would solve that problem

1588394783
mikdusan
docker could use a .dockerinclude file; really what I need here is include 2 dirs and that's it. but I guess the docker-way would be make 1 subdir, and change the instructions to build with that subdir

1588394808
marler8997
yeah, that's what I end up doing

1588394826
marler8997
the real reason is to prevent other people from accidently adding files to the docker build

1588394864
mikdusan
oh yeah for publishing images ; this particular image is a bit... off the norm. the image is never published and we only need a containter to fetch the file.

1588394939
marler8997
actually we do the same, we just use docker to create a stable dev environment

1588394956
marler8997
we mount a host directoy and build directly in the host-mounted volume

1588394984
marler8997
but I find nix does just as well :)

1588395042
Kingsquee
so I've been playing around a bit with how well struct state changes are optimized

1588395043
marler8997
goodness the qemu-static build takes a while

1588395068
Kingsquee


1588395069
mikdusan
5 minutes on a 6-core (not smt) for me

1588395075
Kingsquee
versus when you swap the commented versions and use the allocated ('Boxed') version

1588395086
Kingsquee
apparently the moment you heap allocate something in Rust the state-switching optimizer goes to shit

1588395099
daurnimator
Kingsquee: rust subdomain (tut tut :P )

1588395106
Kingsquee


1588395137
Kingsquee
and zig doesn't do it at *all*, not even with stack allocation

1588395166
Kingsquee
I would have expected this to be handled on the llvm side

1588395258
Kingsquee
(also this zig asm is absolutely horrifying why are there mutexes D8)

1588395286
shakesoda
presumably because you used warn

1588395330
shakesoda
definitely not optimal, regardless

1588395431
marler8997
my qemu-static build been going for like 20 minutes and still no end in sight, might be time to upgrade my 10 year old linux box

1588395478
foobles
if you want to access a field of a temporary struct, does it need to be alloca-ed, stored, and then GEP-ed?

1588395486
foobles
since you need a pointer

1588395646
foobles
and you can't just do GEP on a value directly

1588395759
Kingsquee


1588395793
Kingsquee
so it was warn

1588395799
Kingsquee
impressive

1588396103
andrewrk
Kingsquee, printf's implementation uses mutexes too, you just don't see the libc assembly in godbolt

1588396122
Kingsquee
andrewrk: interesting

1588396142
Kingsquee
the fact the others inhibit optimization is really weird though

1588396200
marler8997
ryzen 9 3900x?

1588396272
mikdusan
that would do ti

1588396273
mikdusan
it

1588396345
marler8997
any excuse to buy new shiny hardware right?

1588396415
Kingsquee
hmm, with allocation it seems to have the same problem Rust did

1588396583
andrewrk
Kingsquee, I'm curious but I haven't been following the chat. what are you experimenting with?

1588396691
Kingsquee
andrewrk: well, for context, in Rust I wrote a macro that essentially generates a renderer based on declarative render passes, with the idea that it would remove the unnecessary branches at compiletime and do more-optimal codegen than a traditional do-everything-at-runtime library

1588396713
Kingsquee
but then I thought wait a minute, I should actually check that the optimizer is as intelligent as I think it is

1588396720
shakesoda
that sounds horrifying

1588396725
mikdusan
marler8997: did your build finish and patch does what is needed?

1588396734
Kingsquee
shakesoda: it's actually really comfy to use :)

1588396742
marler8997
build finished, let me check it real quick

1588396768
shakesoda
it sounds like a design where by the time you've made it you've already lost :(

1588396773
shakesoda
to hellish complexity

1588396779
Kingsquee
I already made it so ¬Ø\_(„ÉÑ)_/¬Ø

1588396806
Kingsquee
andrewrk:  I'm testing to see if, with a struct with arbitrary fields, if the language can tell if some fields are not changed within the cacophany of branches and loops

1588396831
Kingsquee
and therefore remove the branches that are conditional on them

1588396848
Kingsquee
I'm trying to test that by inspecting the labels generated from the associated printfs

1588396853
marler8997
looks like it fixed my issue

1588396862
marler8997
but I haven't done any substantial testing with my patch

1588396875
mikdusan
marler8997: üëç

1588396886
marler8997
is there a way we could run zig's CI without first before we integrate it?

1588396886
andrewrk
ahh yes. llvm is not good at this. zig the language should be since zig is allowed to re-order fields and remove unused fields

1588396893
mikdusan
yup

1588396893
andrewrk
I don't think llvm is allowed to remove unused fields from structs

1588396895
Kingsquee
there should be two 'A' strings, since 'foo.a' can be modified at runtime, but only one 'B' string, since it's never changed

1588396909
mikdusan
marler8997: yup I alway PR the qemu bumps to zig ci

1588396912
Kingsquee
andrewrk: I'm not interested in removing the fields, just removing code that is conditional on the unchanged fields

1588396913
marler8997
perfect

1588396930
mikdusan
marler8997: I think I'll experiment with pushing those dirs to a subdir. might as well.

1588396940
Kingsquee
like if 'b' is false and never changes, anything that requires 'if b == true' should be stripped

1588396944
andrewrk
Kingsquee, ahh interesting

1588396970
Kingsquee
what we're seeing here is that when allocated on the stack in Rust, the stripping occurs

1588396974
Kingsquee
when allocated on the heap, it's not

1588396985
Kingsquee
in C++, it seems to be stripped with both stack and heap

1588397000
Kingsquee
in Zig, it's only stripped on stack if std.debug.warn isn't used

1588397010
Kingsquee
and is not stripped w/ heap

1588397032
andrewrk
in clang c++?

1588397057
Kingsquee
ye

1588397064
mikdusan
marler8997: are you seeing any consistent naming for the subdir to hand to docker build ?

1588397074
Kingsquee


1588397084
Kingsquee


1588397089
Kingsquee


1588397092
marler8997
not really

1588397121
marler8997
at my job we usually have a "docker" directory and I build the Dockerfile in a subdirectory called "build"

1588397133
marler8997
so: docker/build/Dockerfile

1588397139
mikdusan
hmm... reading the dockerfile reference... "context". I might just use that

1588397141
marler8997
but this repo is for the docker

1588397146
marler8997
context sounds good

1588397156
andrewrk
Kingsquee, interesting. I wonder what's different

1588397210
Kingsquee
I mean, the data for storing gl state changes is pretty tiny, so storing it on the stack is trivial from a practical point of view

1588397241
Kingsquee
but it's a little unsettling to see the optimizer undulate so eldrichly

1588397272
shakesoda
trust no one

1588397284
Kingsquee
not even zig

1588397290
andrewrk
Kingsquee, oh you're using a page allocator and we don't have annotations for noting a syscall has not being a memory fence

1588397323
andrewrk
every time you call allocator.create() you're doing an mmap which invokes a syscall and the compiler understands that any memory could have changed in between syscalls

1588397352
Kingsquee
w-what

1588397356
Kingsquee
"any memory"?

1588397375
shakesoda
the power of syscalls

1588397377
shakesoda
a mighty force

1588397396
Kingsquee
that sounds unnecessarily majestic

1588397414
andrewrk
Kingsquee, is this better?

1588397416
Kingsquee
andrewrk: is there anything we can do about it?

1588397453
Kingsquee
andrewrk: scroll to bottom of source code

1588397460
Kingsquee
er, assembly code

1588397476
Kingsquee
the four strings are still there

1588397492
andrewrk
what are you expecting to see?

1588397510
Kingsquee
should only be "1 A True", "1 A False", 1 B False"

1588397520
Kingsquee
as foo.b is never true

1588397527
Kingsquee
see: the C++ version

1588397540
Kingsquee
(brb)

1588397564
andrewrk
hmm I see

1588397591
andrewrk
well it would be pretty straightforward to continue narrowing this down and also produce the equivalent C code and once the test case is small enough we can see how the IR is different

1588397891
Kingsquee
not sure I follow

1588397929
Kingsquee
how could I narrow it down more than two bools in a struct :V

1588397948
Kingsquee
you mean call c.malloc?

1588398207
Kingsquee
mm, I think I see

1588398521
mikdusan
I need to add a "serial" number for versioning qemu tarball that bumps even when qemu upstream version doesn't bump. does this look too silly?:

1588398555
mikdusan
qemu-linux-x86_64-5.0.0-z0.tar.xz ; I was thinking `-zN` for zig. rather than `-rN` which is used by alpine APK

1588398615
Kingsquee
sorry, how do I convert a ?*c_void to a ?*Foo?

1588398735
daurnimator
Kingsquee: @ptrCast

1588398744
Kingsquee
thanks

1588399529
fengb
andrewrk: is there something I'm doing here that's prevent Zig from doing a better memcpy?

1588399580
Kingsquee
um

1588399583
Kingsquee
I'm not going crazy am I

1588399585
Kingsquee


1588399590
daurnimator
fengb: alignment unknown

1588399592
Kingsquee


1588399615
Kingsquee
inb4 "zig is a better c compiler than a c compiler"

1588399617
fengb
I tried alignCast to 8 and still had the same problem

1588399661
mikdusan
whoa compiler explorer dark theme :)

1588399706
daurnimator
fengb: `std.mem.copy(u8, @alignCast(8, self.dyn.rom[BANK_SIZE..]), @alignCast(8, self.cart[offset..][0..BANK_SIZE]));` or similar?

1588399747
fengb
Yeah

1588399768
fengb
Kingsquee: Clang has shorter output than GCC in this example

1588399817
Kingsquee
fengb: clang 10.0.0 still has four labels

1588399860
Kingsquee
I guess building a library around a compiler optimization isn't a good idea :D

1588399876
fengb
Oh probably comptime known stuff

1588399885
Kingsquee
but C++ does it!

1588399887
Kingsquee
C doesn't!

1588399900
fengb
Zig knows when you change a runtime value. So if you never change it, Zig knows and carries forward the info

1588399976
Kingsquee
fengb: if you scroll up you'll be noticing we've been playing the Language Comptime Benchmark Game with this

1588399980
Kingsquee
C++'s been winning

1588399991
Kingsquee
which is weird

1588400037
fengb
Oh wow

1588400167
Kingsquee
andrewrk: are the last two godbolt links what you were thinking?

1588400187
Kingsquee
because apparently the C version doesn't optimize it and the Zig version does

1588400208
Kingsquee
(both using the same c apis)

1588400395
fengb
`xor     eax, eax` why is the compiler repeatedly zeroing out this register?

1588400426
Kingsquee
oh, making the C 'tester' fn 'inline' fixes it

1588400427
Kingsquee
there we go

1588400438
fengb
Ah I see. The C++ one switches printf for puts because there are no args

1588400772
fengb
Hmm, I think the Zig one is suffering because it loads the strings into registers. The C++ one simply uses the pointer to data

1588400804
foobles
IT WORKS!!! :D

1588400813
foobles
RUNTIME COMPARISON OF ?T to T

1588400854
foobles
It might be kinda messy, but I think it is good. I am not sure, it feels good to me

1588400864
foobles
except that it doesn't work on vectors

1588401053
foobles
i am so happy i have been learning the compiler for WEEKS to implement this

1588401058
foobles
i have learned a lot :-)

1588401080
foobles
i thought it would have been easier (I should have found something contributor-friendly)

1588401122
daurnimator
I'm still failing to get `anyframe` working.... andrewrk: could you help with

1588403675
mikdusan
let's say I'm making a 3rd-party package in zig and one comptime setting is a choice of crypto hasher; the idiom `@hasDecl(root, "foo_Hasher")` doesn't quite work because someone else's package could use the same root decl. I can gen a UUID and use that for root.@"<UUID_GOES_HERE>" but it's not very friendly. any ideas?

1588404178
daurnimator
mikdusan: name it after your package? `@hasDecl(root, "mypackage_options")` ?

1588404213
daurnimator
and then look for a field in that struct: `root.mypackage_options.Hasher`

1588404218
mikdusan
doesn't quite work when there won't be global package naming

1588404262
marler8997
mikdusan: when will the new qemu be uploaded and available in the CI tester?

1588404267
daurnimator
IMO we need a central registry of package names. not having one was a huge problem in the lua community

1588404293
daurnimator
we ended up with e.g. 10 packages all named "md5", all with different APIs, and no idea which one was compatible with what

1588404340
mikdusan
marler8997: see comment in #5245 . i think you need a conditional to handle both cases

1588404381
marler8997
ah I just saw that, will take a look

1588404387
mikdusan
daurnimator: yes exactly why I think the @hasDecl idiom only works for `std`

1588404468
mikdusan
note; I'm not suggesting one way or another if we need a central registry; just wondering if I overlooked something obvious with @hasDecl(root,...)

1588404627
mikdusan
marler8997: maybe `if (host_addr != MAP_FAILED) { if (old_size > new_size) {...} else {...} }`

1588404677
mikdusan
s/else/else if (new_size > old_size)/

1588404680
marler8997
that's what I suggested to LemonBoy but he said it wasn't necessary in the next comment

1588405457
marler8997
ok I've replied on #5245, I think I understand what's going on now.  I think LemonBoy's original patch was correct.  It was counterintuitive, which is probably why the bug happened in the first place

1588405487
marler8997
It is calling memory_reserve, on the memory that was just freed

1588405573
andrewrk
daurnimator,  this might just be a missing coercion from *@Frame to E!anyframe

1588405699
andrewrk
yeah, that's supposed to coerce

1588405856
mikdusan
marler8997: makes sense; can you make a PR to qemu-static

1588405866
marler8997
yeah building it now

1588405890
marler8997
probably take another 20 to 30 minutes to build/test

1588405933
marler8997
Ordered the new ryzen 3900x pc though :)

1588405946
mikdusan
for real? nice

1588406004
marler8997
yeah I've been overdue for a new linux PC, took forever to find a good motherboard for it though

1588406067
marler8997
spent $435 on the CPU, and around $400 for the rest (memory, motherboard, SSD, power supply), but it's completely headless, no gpu, just raw cpu power to build things :)

1588406076
mikdusan
btw I think there's something of a race-condition in qemu's build. I'm seeing large variances during build.. sometimes 270s, sometimes 400s where the latter doesn't seem to run all my cores as much

1588406086
mikdusan
how much RAM?

1588406175
marler8997
32 GB

1588406207
marler8997
I just upgraded my old linux PC from 4 to 8...building LLVM/Clang/ZIG with only 4 GB is not fun

1588406222
mikdusan
especially with gcc.

1588406234
marler8997
ah

1588406253
andrewrk
after #5246 it should be reasonable to bootstrap zig with 4 GiB (without the optional LLVM features enabled)

1588406288
mikdusan
during optimizing builds gcc9 got noticably hungrier building llvm/clang

1588406370
marler8997
oh weird, I manually edited the diff file with emacs and it automatically modified the line counts for me

1588406377
marler8997
kinda cool

1588406413
marler8997
looking at a diff of a diff file is pretty weird by the way

1588406555
mikdusan
andrewrk: reading between the lines... so #5246, a ci-build would _not do unit tests for zig0.exe, zig1.exe, zig2.exe; in other words only zig.exe ?

1588406905
andrewrk
mikdusan, if bootstrapping only took a couple minutes then probably the CI would do the entire process every time. why not? if bootstrapping ends up taking longer than, say, 10 minutes, then probably it will be 1 CI's job to do bootstrapping to make sure it works, and another's to simultaneously use a cached zig binary for the main test suite

1588407241
marler8997
build/test finished, appears to be working

1588407711
mikdusan
marler8997: building now

1588408082
marler8997
k, well I'm off to bed, will have to come back to this tomorrow

1588408176
andrewrk
night

1588415828
daurnimator
andrewrk: okay awesome; should I open an issue for that coercion in particular?

1588416741
kenaryn
damn you it works!

1588416781
kenaryn
wrong channel, my apologies :)

1588420514
ikskuh
daurnimator: preparing some response for the openFile thingy

1588420931
daurnimator
ikskuh: take out the check in windows.sliceToblahblahblah that the BadPathName is coming from

1588421080
ikskuh
reaches the same unreachable

1588421134
ikskuh
yes, both on windows 10 and win64

1588421445
daurnimator
ikskuh: that was when trying `\Global??\COM3`?

1588421463
daurnimator
ikskuh: also can you share e.g. a screenshot of object manager?

1588421471
daurnimator
I forget what this stuff looks like

1588421517
ikskuh
oh wait

1588421548
ikskuh
\Global??\COM3 gives me filenotfound

1588421555
ikskuh
\\global??\com3 reaches unreachable

1588421576
daurnimator
ikskuh: so follow up on the FileNotFound..... you

1588421583
daurnimator
ikskuh: show me object manager contents :)

1588421614
ikskuh
how do i open object manager?

1588421620
ikskuh
i have device manager and it shows me COM1 and COM3

1588421685
daurnimator
ikskuh: uh; I think its in this util:

1588421826
ikskuh


1588421967
daurnimator
ikskuh: hmmm... maybe its case sensitive? does \GLOBAL??\COM3 work?

1588421997
ikskuh
that's what i'm using all the time

1588422013
ikskuh


1588422073
daurnimator
ikskuh: does e.g. COM7 give the same error?

1588422086
ikskuh
yes

1588422228
daurnimator
ikskuh: interesting; can you print the path as given to NtCreateFile?

1588422555
ikskuh
i just had a funky idea for format: {c:utf-8} {c:utf-16} ‚Ä¶

1588422561
ikskuh
"print character encoded as "

1588422680
daurnimator
and wtf-16 :)

1588422687
ikskuh
oh yeah :D

1588422738
ikskuh
\??\\GLOBAL??\COM3

1588422822
daurnimator
correct! again you can fix things by commenting code out in sliceToPrefixedSuffixedFileW

1588422842
daurnimator
`!std.fs.path.isAbsolute(s)` I think the ! is incorrect

1588422871
ikskuh
i'll try

1588422877
daurnimator
though if so... why have the `startsWith` at all

1588422889
daurnimator
just set `start_index` to 0 unconditionally.

1588423037
ikskuh
if (mem.startsWith(u8, s, "\\?") or std.fs.path.isAbsolute(s)) 0 else blk: {

1588423038
ikskuh
//     const prefix = [_]u16{ '\\', '?', '?', '\\' };

1588423038
ikskuh
//     break :blk prefix.len;

1588423038
ikskuh
//     mem.copy(u16, result[0..], &prefix);

1588423038
ikskuh


1588423041
ikskuh
ah wait :D

1588423046
ikskuh
error: WindowsError

1588423046
ikskuh
NtCreateFile(\??\C:\Users\xq\Desktop\Ashet\debugger.exe)

1588423046
ikskuh
NtCreateFile(C:\home\felix\projects\lowlevel\spu-mark-2\zig-cache\o\Vkqq3tWVdxBKNDQ7oD71NWCHgXiAvCG7qe6witsBuGfsCD26Pcce0cV2xKZusWKf\debugger.pdb)

1588423050
ikskuh
reached unreachable code

1588423052
ikskuh
NtCreateFile(\??\C:\Users\xq\Desktop\Ashet\debugger.exe)

1588423054
ikskuh
NtCreateFile(C:\home\felix\projects\lowlevel\spu-mark-2\zig-cache\o\Vkqq3tWVdxBKNDQ7oD71NWCHgXiAvCG7qe6witsBuGfsCD26Pcce0cV2xKZusWKf\debugger.pdb)

1588423057
ikskuh
that's what i wanted to paste

1588423063
ikskuh
windowserror is nice, it means: for this case, the fix worked

1588423094
ikskuh
but it looks like we just killed the panic handler as it will pass a wrong path if the file does not exist

1588423293
daurnimator
ikskuh: need to check if it starts with `$SOMELETTER:\` and prepend `\??\`

1588423397
daurnimator
ikskuh: hmmm wait. does `\??\COM3` work?

1588423423
ikskuh
yes, it does

1588423484
daurnimator
ikskuh: ah.... then maybe you can get that existing \??\ prepending logic to work

1588423508
ikskuh
yeah, i reverted to the old code

1588423521
ikskuh
and using \??\COM3 now works

1588423624
ikskuh
so, the fix is to allow ? in paths? ::D

1588424021
daurnimator
ikskuh: IIRC \??\ is just a shortcut for \DosDevices\ ?

1588424043
daurnimator
ikskuh: though check at the top level what DosDevices is a symlink to... I think that's how they do login/session management

1588424131
ikskuh
hmm

1588424142
ikskuh
i really dislike windows pathing :D

1588424181
daurnimator
the idea of the `\??\` shortcut is so they can load it into a 32bit register and compare it

1588424325
daurnimator
but yes; windows paths are stupidly complex

1588425559
ikskuh
error return traces can get quite crazy and annoying some times

1588425597
ikskuh


1588425990
mikdusan
ikskuh: I think that's #1923

1588426035
ikskuh
yeah, probably :D

1588426528
mikdusan
so return is triple-purposed... return { payload or error or error-union }; maybe we should make this explicit - return payload type of fn only. and `fail error.ThisIsReal;`

1588426661
ikskuh
"throw"

1588426691
mikdusan
`raise`

1588431012
chapl
Man, I've been using Discord for a while and I just realized how great IRC is. Dude, should have checked out IRC way earlier lol

1588432352
oats
is there an idiomatic way to read a full line of input from stdin?

1588432374
oats
(or any file I guess)

1588432395
tdeo
OutStream.readUntilDelimiterOrEof?

1588432440
daurnimator
s/Out/In/

1588432499
oats
cheers, InStream looks nice

1588436020
oats
is there a format for slice literals?

1588436026
oats
er, *syntax?

1588436049
ifreund
oats: take the address of an array literal

1588436059
ifreund
&[_]const u8

1588436061
tdeo
&[_]T{...} will give you a *[N]T, which coerces to a []T

1588436086
oats
ahh, I need the _

1588436091
oats
thanks! :)

1588436149
ifreund
note that it won't coerce if the constness isn't the same, it's tripped me up in the past

1588436246
oats
pub fn scanTokens(self: Scanner) []Token {

1588436248
oats
return &[_]Token{ Token{}, Token{} };

1588436250
oats
}

1588436252
oats
is the constness different here?

1588436257
oats
still won't coerce

1588436267
oats
./src/main.zig:67:25: error: expected type '[]Token', found '*const [2]Token'

1588436307
tdeo
yes, you're returning a const slice but the return type is non-const

1588436333
oats
bleh

1588436333
tdeo
[_]Token{...} is stored as an immutable part of your binary, you can't modify it

1588436350
tdeo
you need an allocated slice if you want to return a variable length one

1588436354
oats
it's been a while since I wrangled some bytes with my bare hands

1588437534
ikskuh
fengb, any idea why i'm hitting an "unreachable" in my wasm code?

1588438191
ikskuh
hmm

1588438199
ikskuh
how do i "kill" the wasm execution?

1588439969
pmwhite
How come std.os.linux.timerfd_create returns a u64 when fd_t is equivalent to i32?

1588440370
tdeo
it's just a raw syscall wrapper, it doesn't wrap the return

1588440391
tdeo
if the return (as signed) is between -4096 and -1, it's an error, you have to check for that manually

1588440482
pmwhite
How can it be negative if the return value is a `u64`?

1588440505
pmwhite
You mean after it's cast?

1588440600
tdeo
yes

1588440613
tdeo
i think there's a function that gets the return value actually

1588440630
tdeo
yeah, std.os.linux.getErrno

1588442605
andrewrk
pmwhite, there's a missing abstraction layer in std.os as a wrapper API for this to give it zig types and errors

1588442639
andrewrk
it would be std.os.timerfd_create (even though it only compiles on linux) and it would have e.g. an error union as the return value

1588442679
andrewrk
you can think of `std.os` as "if there was a POSIX API for this and it used zig types"

1588444085
Flaminator
andrewrk are there any plans to add a defer that only runs when no error is returned? We have defer for every possible return and errdefer for when an error is returned but nothing for when a non error is returned.

1588444134
andrewrk
Flaminator, no plan for that

1588444249
Flaminator
That's fine, it's not as useful as the other 2.

1588445360
andrewrk
if anyone wants a fun contribution of deleting code, look for "TODO: Remove nakedcc/stdcallcc once zig 0.6.0 is released. See

1588445757
joepie91
I'm working on an experimental programming thing that targets embedded devices like microcontrollers (a bit like

1588445757
joepie91
Zig as the IR

1588445802
joepie91
would Zig be a usable option for this? considering that my main goals are to catch code/IR gen errors early, and it being relatively easy to get something working going

1588445840
joepie91
(and what would some caveats be that I might run into? aside from the language syntax occasionally changing as someone else already told me about)

1588445921
andrewrk
joepie91, it's definitely too early now, but I wonder if once self-hosted is done, it would make sense to target ZIR:

1588445946
andrewrk
what are your target architectures?

1588446185
joepie91
andrewrk: sorry, one sec, unexpected phonecall :P

1588446337
foobles
andrewrk I got ?T == T to work! :D

1588446347
foobles
it doesn't work on vectors though

1588446350
foobles
but yeah! :)

1588446448
constptr
andrewrk:  are you planning to add gcc backend too for zig?

1588446510
andrewrk
nice work foobles

1588446541
andrewrk
constptr, that's a good use case but I don't think the "reference compiler" will do it. I would weclome a third party to take on that project (and it will be helped by having a language spec)

1588446590
constptr
Ok, thanks

1588446695
fengb


1588446755
tdeo
it feels too inconsistent with generic structs so i don't like it

1588447110
ifreund
I like how it saves on indentation

1588447406
tdeo
> I'll open a separate proposal to remove support for async fn in favor of callconv(.Async) for uniformity.

1588447419
tdeo
andrewrk: can't find this, was it forgotten?

1588447432
tdeo
wait async fn is gone now right

1588447480
tdeo
no, still seems like the syntax exists

1588447520
fengb
It's only a type definition now

1588448006
andrewrk
it's a calling convention which can be inferred

1588448030
chapl
These join messages are so weird to see lol

1588448066
andrewrk
I think most IRC veterans disable join/part messages

1588448091
chapl
Using HexChat. Can this be done client-wise?

1588448096
tdeo
so `async fn` does still exist in the language, is it redundant and can be removed now?

1588448101
andrewrk
chapl, yes - that's what I use too

1588448123
andrewrk
settings -> preferences -> chatting -> general -> miscellaneous -> hide join and part messages

1588448149
andrewrk
tdeo, yes it should be removed in favor of callconv(.Async)

1588448152
chapl
You are a treat. Thank you andrewrk!

1588448220
chapl
(Oh and is HexChat gonna highlight every message for me if the message contains my name?)

1588448356
andrewrk
yes and that is also configurable

1588448369
andrewrk
chapl, ^

1588448376
chapl
That's neat. Gonna leave it unconfigured though

1588448412
andrewrk
your settings now match mine. default + disable join/part messages

1588448413
waleee-cl
ifreund:  river looks intresting, I don't think I have seen a tiling wm where you can use a different mod-key in each keybinding

1588448460
chapl
So, I'm using the vim plugin/extension for Zig and I was wondering whether the used color scheme is the default color scheme of Vim. I like it a lot and I'd like to use it in VS Code too.

1588448516
andrewrk
the vim plugin only communicates to vim things like "this is a keyword", "this represents storage", "this is a string" and vim maps that to its color scheme

1588448533
chapl
Ah. So it must be the default color scheme then. Gotcha.

1588448558
andrewrk
can't wait to ditch vim for a zig IDE

1588448567
andrewrk
I'd do it in a heart beat

1588448601
Nypsie
I'd do it if it comes with a good visual debugger :p

1588448605
fengb
wat

1588448608
fengb
Traitor!

1588448634
andrewrk
I'd stab anyone in the back for editor type awareness and advanced refactoring capabilities

1588448634
chapl
You'd switch Vim with an IDE? Really? Wowzers. Not in the sense of "Wow you dirty stinking rat. Traitor.". Actually kinda surprised because: Vim, Dvorak, actually typing real fast etc..

1588448693
tdeo
nobody's made a language server based on the dump-analyis output yet :(

1588448710
alexnask
The IDE could have a vim mode ;)

1588448727
ifreund
waleee-cl: i think you can in most tiling wms I know of, but glad you find it interesting!

1588448728
chapl
Like VS Code has a Vim mode too. Right.

1588448741
chapl
(Achievable with extension)

1588448743
fengb
It's terrible but it exists yes

1588448913
chapl
I think I'm watching Andrew's presentation "The Road to Zig 1.0" for the fifth time. Something's pulling me back every single time.

1588448917
waleee-cl
ifreund: mod1 is usually limited to one key, in the ones I have tried you cant have eg 'logo key'+q = kill window, alt+space = run dmenu

1588448933
joepie91
andrewrk: well, that took a little longer than I expected, sorry for that. my immediate goal is to ideally target the typical cheap microcontrollers (Arduino, STM32, ESP8266/ESP32), though I realize that the LLVM backends for two of those are experimental at best. I'm not too concerned about having to update codegen to deal with syntax changes and such, so long as it doesn't mean any serious structural rewrites, because this is

1588448933
joepie91
just a hobby project and not something that needs to run in prod any time soon :P

1588448960
joepie91
more important is that I have something that can work Right Now, basically

1588448970
ifreund
waleee-cl: well my knowlege of wms is far from complete, i see no reason to impose artificial restrictions on my users though :D

1588449049
andrewrk
joepie91, I want zig to support this use case but the reality is that to make this work Right Now you are probably better off targeting C and using the arduino compiler

1588449083
andrewrk
check back in a year or two :)

1588449111
joepie91
andrewrk: any particular reasons that make it unsuitable?

1588449123
chapl
andrewrk: You need to do more livestreams ma boi. :D

1588449142
andrewrk
joepie91, the llvm backends being experimental as you noted

1588449177
andrewrk
joepie91, oh, stm32 is ARM? that actually is pretty well supported already

1588449248
andrewrk
ESP8266: "Processor: L106 32-bit RISC microprocessor core based on the Tensilica Xtensa Diamond Standard 106Micro running at 80 MHz" - is this a bespoke ISA?

1588449337
andrewrk
anyway, I want to make it easy to contribute support for a huge range of target architectures in the self-hosted backend but we're just not quite there yet

1588449343
joepie91
andrewrk: ESPs are Xtensa

1588449370
joepie91
andrewrk: which is kinda sorta like a lego block architecture, you feed the instruction set you want into a tool and then it craps out a custom Xtensa derivation with toolchain, chip design, etc.

1588449382
joepie91
but Espressif, the company behind the ESPs, is contributing to LLVM now

1588449394
andrewrk
interesting

1588449395
joepie91
so support for that will be improving over time

1588449400
tdeo
does `async functionInferredNotToBeAsync();` make that function async? rewriting the tests

1588449413
andrewrk
tdeo, yes, it forces the calling convention to be async

1588449421
joepie91
(it's unfortunate that Xtensa is proprietary because the premise behind it is really cool)

1588449441
andrewrk
yeah that is really cool. It would be interesting to try to support that in a real way

1588449457
chapl
I'm wondering too what `async` actually does. I'm having a hard time understanding async/await/suspend/resume.

1588449499
andrewrk
chapl, good timing, because today I am working on a redisconf2020 talk titled "Modeling Data Concurrency with Asynchronous I/O in Zig"

1588449507
joepie91
andrewrk: anyhow, on the more practical side of things, AFAIK Xtensa and AVR both

1588449515
joepie91
(I really really really do not want to codegen C, can you tell :P)

1588449520
andrewrk
chapl, it will be available on may 12

1588449533
chapl
Boy am I excited to see that talk. :D

1588449618
andrewrk
joepie91, mainly based on LLVM support concern, and lack of a zig backend alternative. one more thing: zig source code is designed to be source, not generated code, so it's not the exact correct abstraction level for your project. however it would be easy to switch your codegen from zig to ZIR (Zig Intermediate Representation) once that is stable

1588449678
joepie91
andrewrk: so all in all, when comparing the options of 1) LLVM IR, 2) Zig, 3) ZIR, which would you expect to be the optimal solution in my case?

1588449679
andrewrk
this would then have the ability to be rendered directly into binaries, to C, or through LLVM to any of those backends

1588449699
waleee-cl
is the "do not allow interleaved field declarations in structs"-proposal merged?

1588449704
oats
I'm getting a weird build error with a string:

1588449705
oats
./src/lexer.zig:52:42: error: expected type '[]u8', found '*const [21:0]u8'

1588449707
oats
else => return lox.err(line, "Unexpected character."),

1588449711
joepie91
while LLVM IR would be the abstraction level I'm looking for in principle, AFAIK it would also include less correctness/safety checks

1588449724
joepie91
and I don't know enough about these options to make an informed choice :P

1588449731
joepie91
(yet)

1588449742
andrewrk
joepie91, if you want to place your bets on zig for the future, then (2) for Right Now, with a plan to switch to (3) in 1-2 years

1588449775
joepie91
so it's difficult to weigh for me whether the extra checks provided by going through Zig would make up for it being the wrong abstraction level, for example

1588449777
andrewrk
I'm guessing a lot about your project but probably LLVM IR is the most correct abstraction level that is available to you right now, and I don't think the safety checks issue is what you think it is

1588449797
oats
I've never had an issue giving a string literal to something that took a []u8 yet

1588449802
joepie91
andrewrk: I'm listening :P

1588449808
andrewrk
LLVM IR is well documented and the undefined behavior that you have to avoid makes complete sense

1588449835
andrewrk
e.g. you have the option to specify "non null" on a parameter. if that parameter is null, it's UB. so make sure you don't use that attribute unless it's correct

1588449842
andrewrk
all UB in LLVM IR is like this

1588449867
andrewrk
there is a common misconception that it has the same UB problems as C, where a missing trailing newline technically means your entire program is UB

1588449881
joepie91
(what.)

1588449898
andrewrk
oats, const / mutable mismatch

1588449905
andrewrk
string literals are immutable

1588449917
andrewrk
waleee-cl, yes

1588449925
oats
ahh, I gotta mark the recepient as const

1588449937
chapl
I'm so thrilled. Actually want to help a lot with Zig and everything around it, but I just don't know where to start. Originally coming from Go and Java. Had a look at the issues in the Zig repository and I figured that I can't contribute to a single issue. Maybe it's because of my little to no knowledge about memory etc. - That being said, I do plan on doing documentation work. Improving the documentation generator and documentation

1588449937
chapl
design itself. It's time to kick C crud to the curb (please don't be offended by that lol)

1588449958
joepie91
andrewrk: and how would the two non-C options available today (Zig vs. LLVM IR) compare in terms of memory safety? in my usecase

1588449965
andrewrk
chapl, have you read CONTRIBUTING.md and looked for the label "Contributor Friendly" ?

1588450016
chapl
I indeed did. What you might call "Contributor Friendly" might not be contributor friendly to people that don't have done a lot of stuff with C or C++ in the past.

1588450050
andrewrk
chapl, some issues are as simple as, "submit a bug report to this other project"

1588450058
andrewrk
that might help get started

1588450061
andrewrk
joepie91, essentially the same. you will be doing manual memory management either way

1588450071
ifreund
if you want something mindless to do, migrating parts of the std to take advantange of top level fields might be desireable :D

1588450081
chapl
andrewrk: Aight, gonna have a second look then. ^^

1588450093
andrewrk
joepie91, there are some things in the works to provide use-after-free protections for heap allocations in zig but I don't see how that would apply to using zig as a code generation target

1588450112
chapl
ifreund: Mind elaborating on that a bit more? :)

1588450143
ifreund
chapl: see

1588450164
joepie91
andrewrk: I see, thanks for the answers. I think my conclusion from this is to target LLVM for now, and keep an eye on Zig from afar for potential future use :P

1588450175
andrewrk
that seems quite reasonable

1588450195
andrewrk
you could write your application in zig that generates the LLVM IR tho :)

1588450229
joepie91
heh, for the actual application stuff I'm sticking with the tools I have and know for now :P

1588450237
andrewrk
fair :)

1588450239
chapl
ifreund: Discovered your comment on the issue. I see what you did there. ;)

1588450300
andrewrk
ifreund, I was thinking about starting to capitalize the file names in that case since it ends up being the type name. e.g. Decoration.zig

1588450319
chapl
Please don't. I like the consistency. D:

1588450327
ifreund
andrewrk: yeah i was considering that, I think it's the right way to go

1588450334
chapl
yikes

1588450339
oats
ooh, that's cool

1588450344
ifreund
since the files are the objects now, not namespaces containing the objects

1588450352
andrewrk
chapl, I think you misunderstand the situation, this is making things more consistent

1588450449
chapl
I don't know how to feel about this. I'm scared thinking about Zig becoming a victim to convoluted OOP. "ObjectFactoryCreatingFactoryBean.zig" hell yeah

1588450460
chapl
This might be a bit extreme as an example

1588450478
andrewrk
the only thing happening here is reducing one unused namespace level

1588450486
ifreund
^

1588450508
chapl
so that x.decoration.Decoration becomes x.Decoration?

1588450518
andrewrk
precisely

1588450525
chapl
I see.

1588450560
andrewrk
I don't think you have to worry about these OOP things, since zig doesn't and won't have constructors or destructors

1588450577
andrewrk
we don't even have language-supported vtables, although that's an open issue

1588450580
ifreund
or inheritance :P

1588450587
andrewrk
you can spend your anti oop energy here:

1588450597
chapl
I know. I was about to chatter about this today but stopped thinking about this.

1588450688
ifreund
i'm starting to bring polymorphism into my codebase as well, though I've decided to keep it simple and just use a tagged union of impls + switch statements

1588450713
ifreund
well it's already implemented, but there's currently only one impl

1588450737
chapl
I wanted to express that I think concepts/contracts are a way better solution to polymorphism than interfaces/traits. Now, one might ask what's the difference. Well concepts/contracts are the idea of expressing behavior and/or the ability to do something while interfaces (runtime-based) and traits (compile-time) are only specifying behavior. Oh and I'm actually talking about traits in terms of Rust traits. I don't like them. They just

1588450737
chapl
hide stuff. It's magic for me.

1588450754
oats
but they don't "hide" anything :o

1588450759
oats
they're just descriptions of behavior

1588450775
chapl
So

1588450781
chapl
Hold on right there :D

1588450784
oats
trait-based polymorphism is best polymorphism

1588450785
fengb
We already have traits. They‚Äôre just adhoc and not we‚Äôll defined

1588450826
fengb
`fn format` is a trait that you just need to know

1588450844
joepie91
hopefully this doesn't end in classes/inheritance :P

1588450844
chapl
All I know it's hard to track down which function comes from which trait in Rust. All this prelude import bullshit. Idk

1588450865
chapl
Pardon for my foul language

1588450876
oats
s'all good :)

1588450887
andrewrk
I think that's an inherent property of polymorphism

1588450889
joepie91
chapl: the concept of a pipeline operator may be interesting here

1588450902
joepie91
where you sorta kinda do method calls except the methods are identifiers declared in scope

1588450909
joepie91
so they are always traceable

1588450911
ifreund
andrewrk: one other thing I thought about while doing this was that we could have different file extensions for toplevel enums and unions (e.g. thing.enum.zig)

1588450911
chapl
Rust actually could have been really wonderful if people hadn't started abstracting the hell out of it.

1588450916
ifreund
isn't that just a terrible idea?

1588450917
andrewrk
it means looking at code and only knowing at runtime(!) where in your codebase a function call will go to

1588450960
andrewrk
ifreund, that's a natural direction for this to go, but I think if we take a step back, it is clear that we should not do something weird like that

1588450984
oats
chapl: haha, some folks (myself included) wouldn't mind if rust's type system took some shrooms and abstracted a bit more :P

1588451001
oats
I don't think rust was ever meant to be a simple language

1588451002
andrewrk
making all files structs instead of a bespoke "import" type was a simplification. making different "kinds" of source files is a complication

1588451028
foobles
how do you get a vector type? I see @Vector no longer exists and I don't know how to use @Type

1588451051
ifreund
yeah that totally makes sense, to be clear I don't actually support that as a proposal just wanted to bring it up

1588451058
andrewrk
foobles, there is std.meta.Vector and the implementation shows you how to use @Type

1588451062
chapl
foobles: They do exist in 0.6.0?

1588451071
andrewrk
foobles, it's also on the table to add vector type syntax, if we can come up with something good

1588451086
foobles
oh cool, alright

1588451087
foobles
thanks

1588451090
andrewrk
also the builtin still exists

1588451105
chapl
oats: What type of abstraction are we talking about here?

1588451178
chapl
If I think about this, I originally came from Java, where everything gets abstracted in some way. Kinda funny to think about this, me now ranting about too much abstraction lol

1588451183
oats
chapl: rust's type system enables the kind of polymorphism it uses. I wish it had even more powerful polymorphism, but it would require a more powerful type system

1588451195
oats
ahhh, I'm talking about like higher-kinded types and such

1588451247
oats
most OOP woes IMO are caused by multiple inheritance

1588451262
oats
I very much doubt zig (or rust for that matter) will get anything like that

1588451333
chapl
If Zig becomes C++2, I'm outie. I'm gone faster than you can blink. (That should not happen as andrewrk states he won't let that happen in one of his presentations)

1588451461
ifreund
yeah not a chance

1588451467
chapl
andrewrk: Is the async/await threadpool always being initialized with the available cores? Like, if I had 8 cores and 16 threads avail, would it use all 16 threads?

1588451486
tdeo
i still really like both rust and zig, though

1588451507
tdeo
i feel like rust is really good at a lot of things but some problems just give you a lot of friction in it

1588451551
chapl
I don't say Rust is shit. I'm actually very glad having Rust around because people can build safe and robust software with it. I'm just saying me as a developer I'm not happy with it. It doesn't bring to me, as a developer, programming in Zig.

1588451574
chapl
doesn't bring me joy*

1588451581
oats
*spark joy :P

1588451597
chapl
Ok, I'm having troubles writing rn, because it's late and I'm typing too fast

1588451618
tdeo
rust is fun until i have to pull out Weak<RefCell<T>>

1588451634
chapl
All that sexy lifetime and generics syntax noise... mmmhhhhhh

1588451637
chapl
Love it

1588451656
ifreund
rust has it's place, but suffers from complexity

1588451659
chapl
Really excited about Go's new contract feature

1588451671
ifreund
still take it any day over c++/java though

1588451708
ifreund
for real systems level stuff simlicity is king which means C or now Zig

1588451738
tdeo
i like how go made a simple language popular, but i don't enjoy writing it at all

1588451753
chapl
I'm actually kinda surprised that Zig is being sold as 'general purpose programming language', not as 'systems level programming language'.

1588451770
ifreund
chapl: it is general purpose

1588451786
chapl
One might say it's systems level :D

1588451810
foobles
I actually quite like Rust's complexity, since it feels complex in the right places

1588451825
foobles
like lifetimes and such are really complicated issues, im glad the compiler is picky

1588451871
chapl
Rust is good in solving complex problems but I don't if it self has to be that complex. But sure, complex problems might need an expressive and complex language.

1588451877
chapl
I don't know

1588451929
chapl
Somebody else using HexChat? What do these gray-colored names mean? Some of them are black, some of them are gray.

1588451995
pmwhite
Possibly. Some people here are on Matrix as well, and we are able to identify each other.

1588452023
chapl
I think it means they're away/afk. Just had a look into the settings.

1588452097
joepie91
pmwhite: bet you couldn't identify me as a matrix user :P

1588452124
chapl
The red pill or the blue pill?

1588452178
ifreund
i'm both

1588452197
pmwhite
I guess, not if you aren't using the matrix client to connect.

1588452242
joepie91
I am! I'm just using a different bridge :P

1588452289
pmwhite
oh, nice.

1588452541
chapl
Gonna try connecting via IRSSI :D

1588452742
chapl
interesting

1588452950
ifreund
andrewrk: another thought on toplevel stuff, one other (dumb) alternative would be replacing @import with @struct, @enum, and @union

1588452993
ifreund
it doesn't really seem like it would work well though

1588453045
ifreund
cause like tagged unions are a thing, but the status quo doesn't allow for toplevel generic structs either since they are functions

1588453082
chapl
Hm, I don't know. See the thing with @struct, @enum, @union is that you have to know what the file contains/exposes. With @import you don't. imho it adds more developer friction.

1588453205
ifreund
yeah i think it's a bad idea too

1588453249
chapl
Starting to love irssi already. Always have been and will be a terminal user. :D

1588453289
ifreund
the status quo is quite good in practice as almost all my files were a single toplevel struct

1588453300
ifreund
enums/unions generally don't get their own file

1588453326
chapl
I like how often "status quo" is being used by the Zig folks. :D

1588453387
chapl
I wonder what happens if somebody pings me when using irssi

1588453401
ifreund
chapl: idk i use weechat

1588453416
chapl
Ah, the name's getting colored yellow. nice

1588453437
ifreund
never did find a way to make irssi look pretty enough

1588453471
ifreund
though i'll admit I didn't spend too long trying

1588453520
chapl
I find the simple look of IRSSI quite awesome. I do like it more than HexChat

1588454180
alexnask
On the runtime dispatch topic, this:

1588454351
oats
is there no "force unwrap" operator for an error value?

1588454361
oats
*error union

1588454365
ikskuh
what should that do?

1588454370
ikskuh
crash on error?

1588454374
ikskuh
`foo() catch unreachable`

1588454377
oats
what does .? do?

1588454381
oats
oh, catch unreadable

1588454384
oats
perfect

1588454386
ikskuh
`foo orelse unreachable`

1588454391
alexnask
.? unwraps an optional

1588454392
ikskuh
is `foo.?`

1588455079
foobles
`foo.?` = `foo orelse unreachable`

1588455084
foobles
there is no equivalent for errors

1588455093
foobles
just do `foo catch unreachable`

1588455101
oats
:thumbs-up:

1588455139
ikskuh
foo.bles?

1588455141
tdeo
i wish it either worked on error unions or didn't exist at all, not just for one of them

1588455719
ifreund
idk, i feel like it's not uncommon for there to be a valid reason to unwrap an optional while unwrapping an error shouldn't be taken lightly

1588455749
tdeo
that's true

1588456179
fengb
Yeah it was deliberated and decided that unwrapping errors should look like the nuclear option

1588456258
pmwhite
Can we have a launch_nukes keyword?

1588456265
chapl
xD

1588456950
oats
what's the convention for capitalization of built-in functions?

1588456963
oats
@TypeOf and @typeName etc

1588456982
tdeo
same as normal functions, camelCase unless it returns a type, in which case PascalCase

1588457117
oats
gotcha

1588460817
andrewrk
oh wow, my gui file manager app has a builtin "rename multiple files" feature and it is really nice

1588460822
andrewrk
(thunar from xfce)

1588461221
ikskuh
neat!

1588461226
ikskuh


1588461257
companion_cube
thunar is so cool

1588461512
oats
I know it doesn't really jive with the language's goals, but I really wish you could do string slice comparison in a switch statement

1588461549
oats
switch (somestr) { "someliteral" => ...

1588461953
ikskuh
oats, where's the problem with if-else cascades?

1588461976
oats
ehhhh I think they're ugly :<

1588461992
ikskuh
but fast ;)

1588463455
fengb
I have this silly hack:

1588463568
oats
that is a silly, beautiful hack

1588463573
oats
fengb: lovely work

1588463591
fengb
Doesn‚Äôt work beyond 16 chars though. Thanks LLVM :(

1588463605
fengb
When will we get u65536? :(

1588463844
andrewrk
soon

1588463870
andrewrk
wait, no that's outside the range. you only get u65535

1588463876
andrewrk
nice try

1588463884
oats
awww hehe

