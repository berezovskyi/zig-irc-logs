1593388819
ifreund
nice, I'm only at 2am

1593388980
pixelherodev
2000 here :P

1593389131
daurnimator
creationix: FWIW zig already has gimli in the standard library. no need for libhydrogen ;)

1593391706
aerona
is there any way to print an array of u8 (string) as their numeric values?

1593392051
pixelherodev
aerona: `for (arr) |a| { std.debug.print("{}, ", .{a}; ) }

1593392054
pixelherodev
?

1593392054
leeward
{d}

1593392061
pixelherodev
Or that :P

1593392071
pixelherodev
Oh wow that was off

1593392194
aerona
{d} isn't a valid format string :(

1593392196
leeward


1593392217
aerona
at least not for an array of u8

1593392234
leeward
Right, replace {} in pixelherodev's code with {d}

1593392313
aerona
{} already defaults to printing the numeric value for a u8

1593392329
aerona
i was hoping for a format string that would do the same as that for loop

1593392462
pixelherodev
There isn't one AFAIK

1593392464
pixelherodev
I just use a loop

1593392474
pixelherodev
Often with `0x{x:0<2}` as the formatter

1593392582
aerona
i didn't think so either. it's not a big deal, the loop is an extra 2 lines

1593394782
leeward
fn arrayDbgPrint(arr: []const u8) void { for (arr) |c| { std.debug.print("0x{x:0<2} ", .{c});} std.debug.print("\n", .{});}

1593394785
leeward
Now it's 1 line!

1593394857
aerona
haha good deal

1593395250
pixelherodev
better yet

1593395254
pixelherodev
Send a patch to std.fmt ;)

1593395278
pixelherodev
Have it accept {d} and {x} for arrays of numbers, and call format for each entry with the given options

1593395297
pixelherodev
One line, in standard library, and gives better behavior :)

1593395381
leeward
maybe after I figure this thing out

1593396082
pixelherodev
Ooh, andrew's function params merged :)

1593396213
pixelherodev
andrewrk: nice work :)

1593404403
marler8997
andrewrk, where is the data on the ArenaAllocator perf regression?

1593404472
marler8997
oh you left it in the comment, I'll take a look

1593405193
marler8997
andrewrk, I'm running the benchmark manually and it's consistencly running faster with the latest version of ArenaAllocator

1593405395
marler8997
Using C allocator as the underyling allocator, compiling with --release-fast and -lc, new ArenaAllocator is consistently 33% faster

1593405829
pixelherodev
marler8997:  What about page_alloc?

1593405883
marler8997
I'll try that, one moment though, I think I was testing the wrong branch

1593406028
marler8997
ok with page allocator, I think I am getting a consistent slowdown, from .004s to .005s

1593406165
pixelherodev
:(

1593406367
andrewrk
marler8997, interesting, I wonder why we are seeing different results

1593406381
marler8997
andrewrk, I think I'm seeing the same results now

1593406385
marler8997
I was using the wrong branch

1593406405
marler8997
I'm trying some experiments, my best guess is that storing the metadata at the end of the allocation could be messing up cache predictability

1593406429
andrewrk
that sounds likely

1593406444
andrewrk
I tried to make the benchmark mimic the access patterns of real world use cases

1593406457
marler8997
Going to take my branch and keep all the changes but move the metadata back to the start of the buffer and see what I get

1593407631
marler8997
ok I'm getting the slow speeds even when I move the BufNode back to the start of the buffer

1593407655
marler8997
I think the problem may be that the old version was allocating larger arenas than the new version

1593407673
marler8997
new version says, give me at least as much memory as the client requested from me

1593407687
marler8997
old version said, bug me at least 150% of what was requested from me

1593409264
marler8997
old version is also adding the size of the previous buffer to the size of the next buffer, so it makes much larger allocations later on

1593409312
marler8997
modifying mine to do that as well makes it faster, but I think the old version is still faster than mine with those changes

1593409338
marler8997
I'll make  PR to revert to the old version, but just keep the change in to use the full capacity of allocations

1593415183
andrewrk
marler8997, oh I didn't realize you reverted the superlinear growth

1593415194
andrewrk
yeah the superlinear growth is intentional

1593425528
owl_000
in raspberry pi zero (arm6) simple hello.zig program takes too long to compile.

1593425546
pixelherodev
Not surprised

1593425565
pixelherodev
Stage1 isn't the fastest compiler around.

1593425608
owl_000
oh

1593425646
owl_000
i knew that, i just wanted to inform you about that

1593425760
alexnask
How long does it take? Just curious

1593425803
owl_000
too long, even rust compiles earlier than zig

1593426159
pixelherodev
wow

1593426166
pixelherodev
that's really bad...

1593426189
pixelherodev
owl_000: thanks, good to know

1593426195
alexnask_
yeah this is surprising every time Ive used rustc I wondered if it hang

1593426206
pixelherodev
I'm going to be working on improving ARM support today, so I appreciate the info

1593426221
owl_000
welcome,

1593426466
pixelherodev
andrewrk: whenever you see this: any objections to making CPU feature detection part of stdlib instead of src-self-hosted

1593426475
pixelherodev
I can definitely see uses for it in other applications (JITs for instance ;)

1593426506
pixelherodev
It could also be used to switch between hand-optimized asm for CPU-intensive workloads

1593435297
Aransentin
Is there a way of checking whether a variable is used anywhere else in the code? If so, it'd be kinda useful for function-loading libraries (e.g. for OpenGL and Vulkan). If you know that the function "vkDoStuff" is never called you don't have to bother with loading it from the driver.

1593435346
pixelherodev
You could hook that up to the build system

1593435445
Aransentin
How so? I guess "scan the code for the string 'vkDoStuff' and set 'vkDoStuff_used' to true if found"...?

1593435518
pixelherodev
Exactly

1593435523
pixelherodev
That's definitely going to be your best bet

1593435530
pixelherodev
I'd have it scan via the AST

1593435552
pixelherodev
Use std.zig to parse the source code, make a list of all function calls, and then check by prefix

1593435558
ifreund
it seems like there should be a better way than parsing the code

1593435564
pixelherodev
I disagree

1593435574
pixelherodev
Parsing the code gives you advantages that can't be obtained through any other method

1593435584
ifreund
if what you want to achieve is optional dependencies just make a build option and disable branches at comptime

1593435599
pixelherodev
For instance, you can check for usage as function calls and ignore usage in e.g. strings

1593435607
pixelherodev
It also means lazy evaluation applies

1593435718
Aransentin
Ah, lazy evalution is totally needed for my toy Vulkan example, for sure. Don't want to load "vkDoSomeWindowsThing" on Linux when it's just in a `if(windows)` block.

1593435774
pixelherodev
That's exactly what I was thinking of :)

1593436016
alexnask
This is basically what zls does to find references to rename. I build a basic symbol table for every file then traverse asts and resolve the type of expressions and get declarations from identifiers

1593436093
alexnask
(though I dont do any comptime evaluation exceept for binding type parameters in type function calls)

1593436435
nerthus
is it possible to do that for C imports in the future as well?

1593436440
nerthus
alexnask

1593436796
alexnask
I tried getting cImport support at some point, there are a couple of roadbloacks

1593436803
alexnask
But it will be possible at some point

1593436843
alexnask
Mostly the difficulty is getting the correct cache hash, it depends on a tonne of stuff and the std lib cache hash api is not compatible with the compilers C++ implementation

1593436875
pixelherodev
Yet

1593436877
pixelherodev
Rather

1593436880
pixelherodev
Soon, it won't matter

1593436888
pixelherodev
Once the self-hosted cache hash is done, right?

1593437202
alexnask
The plan is to transition the libcs in the global cache to using it first

1593437210
alexnask
From what Ive seen

1593437230
alexnask
I think someone was working on that, I pointed them to relevant parts in discord, idk if they abandoned it

1593437263
alexnask
Then I suppose we could also transition C source files to use the a self hosted cache hash but this would be a little more involved

1593437317
alexnask
But even then I would have to extract a bunch of data from the build file and make some assumptions to calculate a hash

1593437332
alexnask
But anyway yeah in theory its possible :P

1593446001
Aransentin
A slightly annoying thing with how errors work:

1593446005
Aransentin
A lot of code uses functions that return errors to check whether some piece of data is valid, e.g. `getAddressList()` first checks if the string you passed to it is an IP address, and only does an acutual DNS request if the IP parsing fails. Fine.

1593446017
Aransentin
The problem is that the failed "is this an IP address"-check adds an entry to the traceback, so when something

1593446024
Aransentin
Can this be fixed in some way, or do we just live with it?

1593446179
leeward
I'm not sure what you mean by fix. It sounds like "this is not an IP address" is valuable information, and so is "getAddressList call failed."

1593446198
Aransentin
Ah, no, getAddressList worked fine

1593446230
leeward
That sounds like your problem there. Fail early.

1593446269
alexnask
Aransentin, you are talking about the error trace right?

1593446273
Aransentin
Yeah

1593446317
alexnask
Yeah I feel you, I also handle FileNotFound and get error traces for it anyway sometimes

1593446569
Aransentin
Hmmm, let me explain a bit better

1593446577
Aransentin
If you do a DNS lookup of a non-IP string at the start of your program, every return trace after that will start with an error from `std.net.Address.parseIp4` because that's what led you to the point in the program you are currently.

1593446692
Aransentin
Call a few other functions that do the same thing and the error trace will get filled to the brim with confusing lines you don't care about.

1593446717
leeward
Oh, because the error was handled but still shows up in the trace?

1593446722
Aransentin
Yes

1593447049
Aransentin
Example:

1593447116
blinghound
would std.time.Timer be the most appropriate clock source for calculating delta time between frames?

1593447429
mq32
blinghound: yeah, i think so

1593447446
marler8997
andrewrk, adding superlinear growth to the new version made it faster, but I'm not sure it was as fast as the original.  The old version also added more length to the initial allocations, alignment, plus added 150% of what was requested

1593447480
shcv
is there a way to declare types for literal values?

1593447503
shcv
I want to do 1<<i, but it says that the LHS has to be typed or the RHS known at compile time...

1593447512
blinghound
mq32 seems to work well now, there were more nanoseconds in a millisecond than I thought

1593447518
fengb
`@as(u32, 1) << i`

1593447522
shcv
thx

1593447544
blinghound
marler8997 is this for an allocator?

1593447561
marler8997
Yes, ArenaAllocator

1593447587
blinghound
could growth rate be a user provided comptime parameter?

1593447592
mq32
blinghound: there are a lot of nanoseconds

1593447608
fengb
Seems weird that it just adds more to the original request

1593447624
fengb
"Hey you said 4K but I know you mean 6K"

1593447636
blinghound
mq32 lol yup, my initial u32 was starting to sweat

1593447642
marler8997
yeah...lol

1593447685
marler8997
I don't think it's a big deal either way, it's a standard allocator, meant to serve the general case.  If an app wants something more specific they can always roll their own allocator

1593447755
blinghound
yeah true, it's easy enough to allocate a big chunk using any allocator and use your own growth factor rules

1593447829
blinghound
by the way, I haven't looked at the source code, but I assume that c_allocator just wraps malloc right?

1593447856
blinghound
or mmap et al?

1593447873
marler8997
here's c allocator (cAlloc and cResize)

1593447886
marler8997
mmap is wrapped by PageAllocator in same file

1593448006
blinghound
thanks for that!

1593450694
Akuli
often it's fine to use unsigned integers for timers and just let them overflow

1593450729
Akuli
here is torvalds explaining how that works:

1593450942
scientes
Akuli, overflow is always a special case, and you have to be explicit you expect it in zig

1593450963
Akuli
yes, and this is one of the cases where overflowing subtraction is useful

1593451027
scientes
i think you should just rewrite it to avoid the overflow

1593451033
scientes
the overflow is always more confusing

1593451046
scientes
(not that I always do that)

1593451056
Akuli
if you use unsigned integers for tracking time, then how do you check if some amount of time has passed?

1593451073
marler8997
time checking is a case for using overflow

1593451074
Akuli
just use a huge type that won't overflow in a sane amount of time?

1593451098
scientes
Akuli, how often do you deal with actual time?

1593451105
scientes
time almost always comes from the OS in some way

1593451114
scientes
and you need to set a wake-up timer etc

1593451125
Akuli
most recently i used SDL_GetTicks() which returns 32-bit unsigned

1593451127
scientes
even in OSes like seL4

1593451134
Akuli
in milliseconds

1593451206
Akuli
hmm actually, i'm limiting a loop to run FPS times per second, and i increment a counter in that loop

1593451213
Akuli
a 32-bit unsigned counter

1593451295
marler8997
timeDiff = newTime -% oldTime

1593451295
shakesoda
getticks for frame limiting, or any accurate time measurement at all, is so awful D:

1593451303
marler8997
that should handle overflow as well

1593451317
scientes
you need to call into the OS to avoid a busy loop

1593451352
Akuli
shakesoda, afaik you can't vsync in sdl2?

1593451357
shakesoda
um, yes you can

1593451362
Akuli
hm

1593451364
shakesoda
but also ticks is the worst time measurement it offers

1593451374
Akuli
works for me lol

1593451375
Akuli
anyway

1593451397
Akuli
i remember someone complaining about not being able to vsync in pygame, which is essentially sdl2 for python

1593451398
shakesoda
you can set the swap interval to make the OS vsync, but millisecond precision isn't anywhere near enough to maintain consistent timing

1593451401
Akuli
so i thought it was an sdl2 issue

1593451415
shakesoda
you almost always want the perf counter

1593451447
Akuli
for FPS=60, the loop runs 16.666... ticks per second

1593451457
Akuli
given that, off by less than a tick doesn't seem too bad to me?

1593451487
scientes
you mean ticks per frame

1593451496
Akuli
umm yes, ticks per frame

1593451497
shakesoda
that means you're missing the frame timing... basically always, and accumulating a fair bit of error if you've got anything which should stay even close to real time

1593451516
scientes
and you can't really assume linux is 1000mhz

1593451526
scientes
it has 240 and 250 and 100mhz settings

1593451538
shakesoda
you usually want SDL_GetPerformanceCounter() to do better than this, divide by SDL_GetPerformanceFrequency() to turn it into seconds

1593451541
Akuli
shakesoda, frame timing might not be very close to real timing anyway, with a shitty computer and some other program doing something randomly it may drop quite a lot sometimes

1593451574
shakesoda
you'll basically never ever be able to get even slightly consistent timing at only millisecond resolution.

1593451574
Akuli
so i just calculate all other stuff from frame time

1593451591
Akuli
how consistent is "even slightly consistent" to you?

1593451672
Akuli
and when would non-"even slightly consistent" timing matter?

1593451763
shakesoda
if you're driving animations with this, it matters a hell of a lot, because you can easily miss vsyncs if your timing isn't precise enough, or if you are driving a fixed time step on this you'll be missing

1593451779
shakesoda
timing will also drift very quickly and screw up basically everything

1593451788
Akuli
hm

1593451794
Akuli
maybe it's just me not being a gamer

1593451800
Akuli
i can barely tell the difference between 30fps and 60fps

1593451810
shakesoda
and if you're waiting on something that imprecise you'll miss your vsyncs every time

1593451826
Akuli
i'm quite sure i'm getting it right most of the time

1593451834
shakesoda
also, god help you if someone isn't using a 60hz display

1593451859
shakesoda
but syncing on a 60hz timer screws them to begin with

1593451871
shakesoda
non-60hz displays aren't even that uncommon

1593451890
scientes
extremely common

1593451906
scientes
NTSC and PAL is still a ting

1593451907
shakesoda
59.94 is extremely common, 120+ is common now (high refresh rate/variable sync gaming monitors), 72 and 90 are common in VR...

1593451916
shakesoda
pal exists

1593451976
shakesoda
anyway, inaccurate time deltas ruin your timing and you also end up with not having enough precision for animation to be smooth at only millisecond accuracy

1593451989
shakesoda
it'll have weird jitter, because your input data is no good

1593452001
fengb
You can tell 30-60 once you get used to it. Pretty noticeable

1593452003
Akuli
i was about to ask what unsmooth animation and ruined timing look like

1593452014
fengb
Even going up to 144 you’ll be able to tell

1593452026
Akuli
because i have never noticed either of those with my millisecond precision code

1593452049
shakesoda
unsmooth = jitters, a smooth scroll won't be perfectly smooth. ruined timing = 1 second not being 1 real second - you won't be able to sync timers up with

1593452080
Akuli
and why exactly is ruined timing an issue?

1593452108
Akuli
depends a lot on what you do i guess

1593452130
Akuli
i imagine it would matter for any kind of thing that has to be in sync with many people interacting with it from different computers

1593452154
leeward
or running different levels of simulation at different time steps

1593452214
Akuli
so yeah

1593452218
shakesoda
all of these issues get magnified if you have any kind of time accumulation

1593452223
Akuli
this is the kind of garbage you get when a non-gamer tries to build a game :D

1593452224
shakesoda
because the error increases very, very quickly

1593452252
shakesoda
handling for variable refresh rates is where this really gets nasty, especially as the rates get higher

1593452273
Aransentin
You pretty much need to have your windowing system tell you "Hey, I've flipped your image so please give me a new one" and react to that.

1593452290
Akuli
as in requestAnimationFrame in javascript world?

1593452303
shakesoda
that's one mechanism for this, yeah

1593452325
shakesoda
inaccurate time deltas will cause you problems whenever you do integration really

1593452351
shakesoda
any position += speed * delta will turn into a mess if your delta is inconsistent or imprecise

1593452355
fengb
gameprogrammingpatterns.com

1593452367
fengb
Game loop describes this in detail

1593452381
shakesoda
sounds better than me dumping this in the channel :)

1593452412
Akuli
hmm

1593452423
Akuli
the recommended way in pygame is pygame.time.Clock().tick

1593452424
shakesoda
gaffer on games has some good articles about these things too

1593452432
Akuli
and that uses SDL_Delay and SDL_GetTicks() :D

1593452444
shakesoda
...oh no

1593452455
shakesoda


1593452506
shakesoda
i'm getting the impression that perhaps pygame needs... work

1593452561
shakesoda
it's really easy to not take timing seriously, but timing issues can be really sinister

1593452657
shakesoda
if i seem very insistent about this, it is from being burned very badly (incl. on commercial projects, where people ought to have known better up front, and made messes which essentially could not be fixed)

1593452743
shakesoda
bad time accumulation can manifest even in simple games by things like sometimes an animation just not stepping when expected, or stepping twice when unexpected, or mysteriously missing a target

1593452957
Akuli
yeah i have had players running through walls in this project :D

1593452994
Akuli
i thought about implementing something like semi-fixed timestep, but just setting fps high enough "fixed" it

1593453125
shakesoda
in practice i do a fixed timestep for everything and interpolate moving objects between current/next state for display, so slight desync with the updates and the display don't result in jitter

1593453141
shakesoda
the solution i use is almost exactly the same as the one in the article i just linked, near the bottom

1593453162
Akuli
their last example code?

1593453176
shakesoda
yeah.

1593453192
shakesoda
the details are the slightest bit different, but it's functionally equivalent to what i do everywhere.

1593453281
Akuli
maybe i should tell a bit more about this project

1593453300
Akuli
it's my attempt at making something playable with not much game-specific knowledge, and learning a lot along the way

1593453315
Akuli
turns out that i ended up rediscovering a lot of 90's game programming techniques, lol

1593453332
shakesoda
as one does

1593453490
Akuli
i read the thing you posted

1593453501
Akuli
the last code example is ... better than i expected :D

1593454931
scientes
Akuli,

1593455055
scientes
lots of hsync vsync tricks there

1593456938
fengb
It's always nice to rediscover patterns. Makes you feel like you're on the right track :P

1593457352
shakesoda
fengb: it's also nice to rediscover where they went, if they're ones which are gone

1593457380
shakesoda
some of the answers are very, very interesting

1593457488
andrewrk
pixelherodev, it already is, did you see the x86_64 cpu feature detection code?

1593457497
fengb
I "rediscovered" double buffering for my Gameboy emulator. It was pretty fun and interesting

1593458290
Aransentin
I wrote a little text on how I want the windowing library I'm writing to work:

1593458300
Aransentin
If anybody wants to read it. :) Any feedback would be gratefully accepted.

1593458508
ifreund
looks promising, no opengl support planned? that'd probably be the easiest hardware accelerated thing to get going

1593458521
Aransentin
Not so easy, I'm afraid

1593458539
ifreund
also instead of implementing KMS/DRM you could just implement wayland and use

1593458546
Aransentin
OpenGL is rather tightly coupled with the X11 C libs

1593458593
shakesoda
wasn't that fixed with the glvnd stuff?

1593458603
shakesoda
at least, largely

1593458611
shakesoda
last i checked that was the point

1593458615
mq32
Aransentin: what about EGL? i wanted to try EGL

1593458618
ifreund
I believe all almost hardware acceleration options will either require a lot of reimplementation or depending on C libs

1593458623
shakesoda
egl + glvnd

1593458658
shakesoda
you likely don't need to even have a glx codepath anymore

1593458708
ifreund
egl is the normal way to do things on wayland, though usually this is achieved with libwayland + mesa

1593458775
Aransentin
I really don't want to depend on system C libs though...

1593458797
ifreund
fair

1593458832
ifreund
well for wayland this is how you'd achieve that:

1593458846
ifreund
I know tdeo also has this goal

1593458877
Aransentin
Yep, and e.g. MIT-SHM on X11

1593459000
tdeo
wl_shm doesn't need c libraries, and linux-dmabuf doesn't

1593459021
Aransentin
Yeah, there's the vulkan extension to do it

1593459041
tdeo
but one goal is to use a pure zig x11/wayland library while also linking to the C libraries for opengl/vulkan, which is possible with x11 DRI3 or wayland linux-dmabuf

1593459064
Aransentin
That's exactly the plan :)

1593459086
tdeo
but linux-dmabuf won't work on nvidia, if you care about that

1593459089
tdeo
(not that you should :p)

1593459092
Aransentin
haha

1593459100
tdeo
nor will dri3

1593459391
Aransentin
Now that's a little concerning. I have to figure out if there's a way of sharing GPU memory between X11 and nvidia+Vulkan, then... Hacing "EGLstreams" into it I suppose, however that works.

1593460240
shakesoda
yeah nvidia is really problematic here

1593460273
shakesoda
it's very frustrating

1593460875
Aransentin
Hm, from a cursory googling it seems possible, as you can just get an opaque fd from Vulkan that represents the nvidia memory which you then feed into X11.

1593460881
Aransentin
It won't be a

1593461038
shcv
how do I get a []u8 when I have a []const u8? I presume it's const because I used a literal?

1593461089
shcv
though I don't actually need it to be mutable; maybe it would be better to copy the PacketIntArray code and make an immutable version without setBits, etc.

1593461114
shcv
assuming that would avoid the complaint about expecting a []u8...

1593461149
shakesoda
shcv: you have to copy it to get a mutable reference to it

1593461156
shakesoda
shcv: the literals are always going to be const

1593461223
shakesoda
in general turning things const is one-way, and the only way back is a copy (that's the point!)

1593461270
shcv
what's the right way to initialize a slice then?

1593461458
tdeo
Aransentin: link? that's interesting

1593461507
Akuli
shakesoda, i think you linked the thing that weighted-averages out the previous and current state so that it goes between the game time steps nicely, how do you structure your data? if you have lots of moving enemies, for example, do you have a struct Enemy and just make copies of all Enemies even though you really only need new averaged locations for them?

1593461561
Akuli
i guess the code that shows the stuff could take the location as an argument instead of looking it up from the struct, but that feels a bit ugly

1593461576
Aransentin
tdeo: Well, there's this:

1593461621
tdeo
interesting

1593461624
JimRM
Hey. Anyone know how I can disable Neon when compiling arm64?

1593461647
shakesoda
Akuli: my entities have a flag set on them if they're active and they keep a copy of their previous locations.

1593461673
Akuli
where do you calculate the mixed location?

1593461688
Akuli
right before it's needed in the drawing code?

1593461709
shakesoda
i do a pass over the entities to figure out the drawables before render and do it there

1593461741
Akuli
so, your rendering functions look like render(entity, alpha)

1593461765
Akuli
rendering needs to know alpha, the number describing how to mix new and old positions?

1593461773
shakesoda
no, i mix beforehand, but it's equivalent anyways

1593461794
Akuli
so rendering function uses your entity structs and a mixed location that comes as a separate argument?

1593461799
Akuli
that seems about as clean as it can be

1593461800
shakesoda
i don't render one at a time, i gather all entities into an array and render that.

1593461822
Akuli
yeah you're not stuck to the 90s like i am :D

1593461838
shakesoda
that gathering is a good opportunity to also do the mixing since i'm already there, so that's where it happens

1593461891
shakesoda
doing things one at a time is really bad for performance, heh

1593461907
Akuli
yeah i have some vectorized code too

1593461916
JimRM
Or a way for me to pass "-fp-armv8" to llvm?

1593461937
shakesoda
JimRM: are there actually any armv8 devices without neon fpus?

1593461939
shakesoda
i thought it was required

1593461959
shakesoda
if there are specific cores that don't have that, you can probably specify the cpu type to get the right flags set for you

1593461975
JimRM
Yes, but I don't want neon enabled in my binary :)

1593462029
shakesoda
odd, but okay

1593462053
JimRM
(it's a bare metal thing, and I do not enable FPU instructions - so any NEON instructions cause an illegal instruction fault)

1593462095
shakesoda
oh, that makes sense, although i should think you usually would just enable the fpu... i will trust you have your reasons

1593462121
shakesoda
i don't know the incantation for it, but i'm quite sure you can do what you're after here

1593462270
JimRM
All I am looking for is a way to pass that compiler flag to LLVM - I cannot find anywhere in the docs which show me how to do that. I assume passing custom flags is a fairly common thing to do?

1593462428
andrewrk
JimRM, you can can set cpu feature flags in the target

1593462513
andrewrk
JimRM, use `zig build-exe foo.zig -target arm-freestanding-none -mcpu=help` to see the list of cpus available

1593462536
andrewrk
and use `zig build-exe foo.zig -target arm-freestanding-none -mcpu=generic+help` to see the list of cpu features available

1593462562
andrewrk
you can see that fp_armv8 is in the list

1593462571
JimRM
andrewrk: Thanks!

1593462579
andrewrk
so you want -mcpu=yourcpuchoice-fp_armv8

1593462603
tgschultz
neat, thanks to .modifier = .always_tail, it looks like jump tables and continuations are totally doable now.

1593462626
andrewrk
JimRM, if you choose generic be sure to add in the cpu sub-architecture feature, e.g. generic+v8a

1593468204
shcv
how can I switch on a tagged enum I'm getting from a next() method, in such a way that I can replace the value?

1593468214
shcv
I'm trying to write an insert function

1593468256
shcv
it would be nice if I could do something like switch(table.next(key)) { .Empty => |e| { ...insert stuff... }}

1593468276
shcv
but I'm not sure how to do that, since e is just void

1593468317
ifreund
var thing = table.next(key) switch(thing) { .Empty => { thing = .{ .Full = whatever } } }

1593468341
ifreund
er, would probably be const thing since it's a pointer I assume

1593468468
shcv
does the switch change any when dealing with a pointer?

1593468492
ifreund
well, you'd probably do switch(thing.*)

1593469975
shcv
how can I trace where the constness is coming from?

1593470057
shcv
trying to update a field of a struct in a method, "table.map |= ...", and it says "can't assign to constant"; so I assumed I needed "self: *Table" instead of "self: Table", but now it's complaining about receiving *const Table

1593470197
shcv
are the |value| results from a switch statement always const?

1593470305
alexnask
yes you can do |*value| to get a pointer

1593470308
alexnask
to the payload

1593471987
pixelherodev
andrewrk: ah sick, didn't know that

1593471993
pixelherodev
Teaches me to ask before looking :)

