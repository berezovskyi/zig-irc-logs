1579220459
fengb
I think andrewrk wanted to keep the red lines for himself:

1579220733
pixelherodev
wat

1579220742
pixelherodev
I think you're right\

1579220746
pixelherodev
s/\\//

1579220789
torque
8 additions and 217,692 deletions

1579220796
torque
pretty good kd ratio on that one

1579221097
daurnimator
So I've got a FOMU that I want to try and target with zig

1579221111
daurnimator
It came with a riscv core installed on it

1579221131
daurnimator
Trying to figure out the details of how the toolchain works....

1579221267
andrewrk
torque, yeah, it's the result of years of working with upstream LLD to get issues resolved, 3 different zig community members sending patches, pinging when we got no response, until finally we have no outstanding patches on top of lld

1579221294
andrewrk
deleting the embedded LLD fork is a sign that we have been a good open source community member

1579221308
daurnimator
:D

1579221343
daurnimator
the cpu target PR is coming at a good time

1579221353
daurnimator
I'm pretty sure this riscv core has almost nothing

1579221387
andrewrk
it's ready for a handoff. whenever Layne feels done I'm going to merge the shit out of it

1579221419
daurnimator
last day of conf today :( sadly I was unable to get bitfields working and hence didn't sign up to do a lightning talk

1579221478
andrewrk
bummer. sounds like you had some productive interactions though

1579221524
daurnimator
yep. lots of interesting use cases in front of us

1579221560
daurnimator
as soon as the language stabilises we have a route in front of us to zig in the linux kernel....

1579221577
daurnimator
Probably a 3 year journey

1579221723
andrewrk
you mean something other than a kernel object?

1579221745
andrewrk
I don't think we need 3 years to make kos

1579221851
andrewrk
I'm really happy about #4206 mikdusan

1579221923
daurnimator
andrewrk: aside from bitfields i already can make a .ko :)

1579221974
daurnimator
andrewrk: i mean in terms of writing an actual kernel module in zig and sending it for upstream inclusion. which means every distro needs a zig compiler....

1579221980
mikdusan
yay

1579222128
AndroidKitKat
hi there, i'm having some issues getting started with zig. I'm trying to do a simple Hello World, and I'm getting an error, using the examples straight from the website. Here's what I mean:

1579222136
andrewrk
daurnimator, ahh that's a good use case

1579222180
daurnimator
your code is zig master. did you download a zig release?

1579222201
AndroidKitKat
Tried using both the official version from Brew on my iMac and a version from COPR on my Fedora box

1579222213
AndroidKitKat
both show me the same issue

1579222226
daurnimator
AndroidKitKat: those are outdated :) you should compile latest zig master yourself or just download a binary from the ziglang.org website

1579222250
AndroidKitKat
huh, okay

1579222266
AndroidKitKat
might want to poke the people at homebrew since it's listed as a method to instal Zig from

1579222294
AndroidKitKat
I'm not very comfortable at all compiling my own software

1579222296
andrewrk
AndroidKitKat, they know - this is what it feels like when a language is highly unstable

1579222308
daurnimator
AndroidKitKat: homebrew (rightfully) only package releases. Your snippet is using new syntax that hasn't made it into a release yet

1579222311
andrewrk
as you can see there are some downsides

1579222320
fengb
The download page has nightly binaries

1579222323
AndroidKitKat
Ah, that makes sense.

1579222339
daurnimator
AndroidKitKat:

1579222364
andrewrk
we have long (6 month) release cycles for now, which favors fast-paced progress towards 1.0.0, but does not favor people trying to use zig for stable day-to-day activities

1579222375
AndroidKitKat
Ah

1579222382
alva
AndroidKitKat: you can also check the docs for your specific version

1579222424
AndroidKitKat
I'm actually starting work a somewhat basic implementation of something like coreutils in zig as a school project. I'll make sure I use proper versions of the language then

1579222479
mikdusan
AndroidKitKat: one neat thing about downloading from ziglang.org, is open langref.html with your browswer. it's exactly in sync and all examples are actually compiled/tested with CI before the tarball is made

1579222698
andrewrk
yeah, website doesn't update unless all tests pass for all targets

1579222838
AndroidKitKat
thanks for the information. I'm sure I'll be having more questions, so i'll probably hang out here :>

1579222856
andrewrk
welcome :)

1579222863
daurnimator
AndroidKitKat: please do stick around :_)

1579222879
AndroidKitKat
if you're at all interested in following our progress, we'll have updates here:

1579222904
AndroidKitKat
not anything yet but we'll have stuff soon haha

1579222911
frmdstryr
Would it be possible to retain the original stack frame when a frame is suspended and then resumed by the event loop?

1579222923
fengb
That’s a pretty vain acronym :P

1579222941
AndroidKitKat
it's named after our professor haha

1579222971
fengb
No it’s clearly posix bsd

1579222983
frmdstryr
or maybe it's just gdb

1579223060
andrewrk
AndroidKitKat, neat! my suggestion regarding zig would be, when you start working on this, choose the latest version of zig from the download page at the time (e.g. it is currently zig-0.5.0+bac27731e), write down the version number, and stick with that for the whole project

1579223092
andrewrk
then you can choose to upgrade at your own pace (e.g. if still working on it in april you probably would want to upgrade to 0.6.0)

1579223130
alva
AndroidKitKat: the website ends up with light text on light background for me, best to specify a text colour if you specify a background, to ensure that it's readable

1579223143
AndroidKitKat
yeah i was making sure to settle on a version and whatnot. need to get the rest of my team up to speed on stuff.

1579223153
AndroidKitKat
also alva thanks for the information i will fix that asap

1579223245
andrewrk
I do think that this is a nice use case for zig; the builtin safety and debugging capabilities are helpful for students who don't know how to, e.g. use gdb to get a stack trace

1579223286
AndroidKitKat
our group had originally thought about doing one in go/rust but those have been done to death and we want to make something brand new

1579223294
AndroidKitKat
and learn a lot in the process

1579223411
BaroqueLarouche
AndroidKitKat: がんばって下さい！

1579223436
BaroqueLarouche
(only if your IRC client supports UTF-8)

1579223461
AndroidKitKat
ありがとうございます！

1579223508
BaroqueLarouche
speaking of languages, anybody here speak French or better Québecois tabarnak ?

1579223575
Snektron
I wanted to use Zig for an uni project a few weeks back, but i chose python instead so i could finish the project quickly

1579223788
mikdusan
imagine teaching first-timers with zig vs. c: no more questions about .h vs .c files. or macros. or ordering of global decls. or ... aww shucks I ran out of IRC space

1579223841
BaroqueLarouche
Zig killed all my hype for C++20 and Jai

1579223884
AndroidKitKat
The first language I learned was C++, then python, and i've settled for ruby as my favorite language.

1579223897
AndroidKitKat
hopefully i become pretty intimate with zig tho

1579224101
mq32
<BaroqueLarouche> Zig killed all my hype for C++20 and Jai

1579224102
mq32
+1

1579224111
mq32
now i'm hyped for minor zig updates :D

1579224168
fengb
I do want to see what cool features we could snipe from Jai

1579224192
BaroqueLarouche
my guest is that Zig 1.0 will arrive before all compilers support C++20 properly (including closed platforms like consoles)

1579224221
mq32
heh, that would be awesome

1579224236
mq32
i really wonder how zig will look in 1.0 feature-wise

1579224262
andrewrk
mq32, hopefully not that much different

1579224271
andrewrk
nothing majorly breaking is planned

1579224293
mq32
i hope so too

1579224315
andrewrk
it's going to be a big deal once std lib async I/O is robust

1579224330
mq32
my main problems with zig right now are actual compiler bugs regarding packed structs

1579224340
andrewrk
yes that's high on my priority list

1579224358
mq32
wasn't my intention to boost the priority of that btw

1579224373
mq32
i just wanted to say that i'm really happy with how the language is right now

1579224399
mq32
you can get some cool stuff together pretty quickly

1579224414
andrewrk
I am a little worried about #1717

1579224447
mq32
i already posted some screenshtos/videos of my newest stuff, but here's the actual source code:

1579224452
mq32
andrewrk: yeah i can imagine

1579224460
daurnimator
andrewrk: so I have some freestanding code here that uses string.h... how should that be provided?

1579224489
mq32
daurnimator: you can probably export the used functions from zig and supply string.h yourself

1579224495
andrewrk
daurnimator, elaborate?

1579224504
andrewrk
oh you need some freestanding libc functions?

1579224524
mq32
#1717 would break with a lot of conventions other languages have established (in terms of "functions are declared like vars/consts")

1579224565
andrewrk
daurnimator, all of libc that is not OS-dependent should be added to lib/std/special/c

1579224567
andrewrk
example:

1579224624
andrewrk
daurnimator, select a C ABI as part of the target, and then go ahead and add -lc even though it's freestanding

1579224650
andrewrk
might need to add another case in the compiler to enable this. it's already enabled for wasm32-freestanding-musl, which you can see in `zig targets`

1579224696
andrewrk
but we should really be able to support basically any C ABI for any arch for any freestanding OS. especially with the new bring-your-own-OS-layer, we can even have OS-dependent libc functions, which hook into that

1579224744
andrewrk
it would be especially nice with --bundle-libc (which would need to be added; we already have --bundle-compiler-rt), because then your object file would have your zig code, as well as exporting libc functions for external C code to use, and your OS layer would not be duplicated

1579224769
andrewrk
a few little things need to be modified, but zig is extremely well-positioned for this use case

1579225024
andrewrk
I suspect that `const f = fn(a: i32) bool { ... };` will look normal after a few weeks of using it. but it looks scary and different right now

1579225054
mq32
andrewrk, i had the same thing in a language i designed and you get used to that pretty fast

1579225074
mq32
but yeah, it's definitly weird at first

1579225100
andrewrk
qwerty people, is `let` easier to type than `const`?  both are pretty comfortable & fast on dvorak

1579225120
mq32
i use that syntax in C++ now pretty often with lambdas as they make nice

1579225121
andrewrk
let seems a lot nicer on qwerty

1579225139
mq32
for me, let has a lot less movement than const which is nice

1579225145
mikdusan
i use 3-fingers to down `let` and 4 to down `const` and they're both fast

1579225167
BaroqueLarouche
function as expression is more consistent with the rest of the language, but yeah it's not a usual syntax

1579225195
andrewrk
it also makes it more obvious how to make traditional generic functions

1579225208
mikdusan
fn expr to me is about the same (and worth it) friction of `const std = @import("std");`

1579225223
BaroqueLarouche
mikdusan: exactly

1579225237
andrewrk
let foo = fn(comptime T: type) { return fn(x: T) T { return x + 1; } }

1579225250
andrewrk
foo(i32)(1)

1579225260
mq32
objective analysis of let vs. const: 10-finger-system makes let pretty easy as you use 2/3 fingers on their natural position, whereas for const you use 2/5 fingers on their natural position

1579225282
fengb
I actually don’t know why Go opted for a different fn define since the syntax is basically there already

1579225284
mq32
i think that's why it feels better to type

1579225294
tgschultz
I prefer const because it makes more sense to my brain, but it's not a big deal.

1579225323
andrewrk
coming from C it's a lot of overhead when you need all these extra tokens: `const`, `fn`, `=`

1579225327
andrewrk
but yeah I think the consistency is worth it

1579225341
mq32
+1 for consistency

1579225354
andrewrk
we used to have `struct foo {}`

1579225369
tgschultz
I'd agree. It'll seem weird at first, but objectively the traditional way is the weird one.

1579225381
daurnimator
andrewrk: so when the C code does `#include <string.h>`, what should provide that? note that I'm compiling code with `zig build-obj --c-source`

1579225383
fengb
Yeah people already need to get used to “backward” variables

1579225385
mq32
and as mikdusan said, "const std = @import()" was also pretty unintuitive at first, but now it's just "there" with no friction

1579225397
fengb
So backwards functions are at least consistent :P

1579225403
tgschultz
also I won't have to declare structs inside of functions that do nothing but wrap a function.

1579225407
andrewrk
daurnimator, we ship freestanding libc .h files

1579225451
daurnimator


1579225457
tgschultz
at least I assume that would be a consequence of this change, it's possible it isn't.

1579225497
mq32
the nice thing with the funtion-local declarators is that we can reduce scope of a name to the bare minimum required

1579225513
andrewrk
daurnimator, for example if you do -target wasm32-freestanding-musl, then you get lib/libc/include/generic-musl in the -I paths, and that has string.h

1579225521
mq32
i enjoy using that for types already, but having some small local helper functions are always practical as well

1579225530
daurnimator
andrewrk: see paste..

1579225537
BaroqueLarouche
oh right, it will give you local functions for free

1579225543
andrewrk
daurnimator, yep looking into this, probably just need a wee little adjustment

1579225570
BaroqueLarouche
well almost free if you want local function to access the stack of the parent function

1579225616
andrewrk
daurnimator, try adding your target to target.cpp libcs_available

1579225649
mq32
BaroqueLarouche, i don't that's even a concern right now

1579225652
andrewrk
then there will probably be a next step to solve

1579225704
andrewrk
daurnimator, we should probably have an error there: "requested to link libc, but no libc available for target xyz"

1579225707
mq32
BaroqueLarouche, but i have a lot of "const Helper = struct { };" structs that only introduce some local functions required in the scope of the function

1579225725
daurnimator
andrewrk: libcs available only has the one freestanding (wasm32): intentional?

1579225748
andrewrk
yes; the use case that you're exploring right now is still experimental - go ahead and add riscv64-freestanding-musl

1579225756
mq32
got to go... it's nice to know now why "let" feels easier to type than "const" :)

1579225825
shakesoda
both shorter and easier key placement?

1579225854
mq32
shakesoda, read above (and search for "objective analysis")

1579225887
shakesoda
that's pretty much where i was going with this

1579225890
shakesoda
:)

1579225959
daurnimator
so adding to target.cpp got a bit further; now bits/alltypes.h is missing (which is something inside of string.h)

1579226169
keegans
hey, just getting a little bit confused with interfacing with c strings, I have a function that accepts name: []const u8, but i'd like to pass that to a C function, I believe that []const u8 is NUL-terminated, but I am not sure how to get it so i may pass it to the C func

1579226179
keegans
am I supposed to cast it? apologies if i misunderstand the procedure

1579226219
hryx
I was surprised how fired up people on GitHub get about syntax discussions (1717, let vs const, etc.) But maybe it makes sense because one will see syntax before anything else

1579226254
daurnimator
keegans: 0.5.0 or master?

1579226273
keegans
0.5.0, I think there is something special like [*:0] in master, but I haven't explored that yet

1579226285
daurnimator
yes there is. you may want to swap to master :)

1579226305
keegans
ok will do, but if possible can you explain that to me or point me in the direction, that syntax is a little bit magic to me

1579226345
daurnimator
keegans: in master `[:0] const u8` is a null terminated slice. `[*:0]const u8` is a null terminated pointer to many

1579226365
keegans
excellent, thanks

1579226710
keegans
just built from source, works like a charm, thanks again

1579226715
fengb
I’m not a big fan of let + var

1579226805
BaroqueLarouche
#TeamConstVar

1579226829
daurnimator
I don't mind `const`. I think `var` isn't great.

1579226843
daurnimator
I wouldn't mind if we had `let` and `let mut`. or `const` and `mutable`

1579226873
daurnimator
I don't think we should have `var` and `let`: its useful for vertically scanning that they are a different number of characters

1579226899
fengb
I do like let mut

1579226899
daurnimator
Also `let` means mutable in JS: lots of people these days have that as context

1579226900
fengb
daurnimator: agreed

1579226903
pmwhite
What if the var keyword is renamed to `_var` just so people abhor using.

1579226944
fengb
There’s nothing wrong with using var. we’re not all functional here

1579227015
daurnimator
fengb: still, we should make non-mutable 'easier'

1579227026
companion_cube
let/let mut is cool imho

1579227041
companion_cube
(rust's syntax is cool, generally)

1579227100
pmwhite
Yeah, fair. I guess the goal is to encourage stating something as immutable when it already is, rather than pushing someone either way. No matter what keywords are there, people should be thinking critically about their design.

1579227393
companion_cube
the default should be an immutable binding, then if you actually need to mutate it you can use `let mut` or `var` or whatev

1579227482
andrewrk
I have a meeting with a lawyer tomorrow about officially starting Zig Software Foundation as a not-for-profit organization. this is a step towards being able to pay people in the zig community to work on zig stuff. I'll keep everyone posted about progress

1579227497
fengb
Oh wow

1579227499
companion_cube
💃

1579227537
BaroqueLarouche
Nice!

1579227557
hryx
Awesome!

1579227607
andrewrk
I also have an ongoing application to Software Freedom Conservancy, so at some point here I have to pick a path to go down

1579227630
andrewrk
thanks daurnimator for poking one of their staff members the other day :)

1579227645
andrewrk
alright, so let's figure out the next step for your freestanding libc use case

1579227832
andrewrk
daurnimator, look around lib/libc/include/ to get a general idea of the directory layout

1579227846
andrewrk
`find -name "alltypes.h"` to get a sense of what that does

1579227899
andrewrk
I suggest to make an empty directory `lib/libc/include/riscv64-freestanding-musl/` and to copy bits/alltypes.h into there from riscv64-linux-musl

1579227938
andrewrk
I believe `lib/libc/include/riscv64-freestanding-musl` is already one of the -I paths passed for your target, so this should make alltypes.h picked up

1579228001
andrewrk
it might even serve us well to rename all the *-linux-musl dirs to *-any-musl, and modify the corresponding code in codegen.cpp

1579228093
andrewrk
^ if we wanted to make it so that the musl C ABI had identical headers for linux and freestanding targets. which is probably reasonable

1579228380
keegans
just wondering if there is a better way to do this:

1579228480
andrewrk
keegans, I believe the @ptrCast is not needed

1579228483
keegans
also, are there any plans to add datetime functionality to the zig standard library or would that make more sense as a library

1579228498
keegans
oh, maybe I was wrong let me see if i can get away with not using it

1579228526
keegans
yes, I do not need it my bad haha

1579228530
andrewrk
buffer.len would be preferable to @sizeOf(@TypeOf(

1579228583
keegans
of course, thank you

1579228593
andrewrk
as for your actual question, I'm not sure what the problem is. the code looks fine. what behavior are you observing?

1579228625
keegans
so if I do not specify the slice dimensions in the print, it will print the time then garbage: 2020-01-16 21:35:55�����

1579228650
keegans
since it is reading past the buffer, but I

1579228666
andrewrk
right because `buffer` is 64 bytes and formatted printing has no way to know you wanted a null byte to terminate printing

1579228689
andrewrk
but with buffer[0..size] it should work

1579228772
keegans
yeah I was hoping I could do a better job at specifying my intention in types, but this works just fine

1579228784
andrewrk
datetime functionality in std would be nice if there was a way to solve it and be done with it. but taking on a dependency of locales and countries/cities changing timezones, might be better to be a third party package

1579228823
keegans
that is a good point, I did not think about shipping all that supporting data

1579228870
andrewrk
and more importantly, the fact that it changes in response to non-technical things

1579228879
andrewrk
it can even be a political statement, which way your time zone works

1579228903
andrewrk
e.g. do you respect one country's claim to a city or another

1579228919
andrewrk
I really would love to avoid having zig std lib depend on something like that

1579228937
keegans
I just checked out how Go does it, seemingly theyt load it from the system

1579228947
keegans
but they also have a zoneinfo.zip as a fallback (?)

1579228957
andrewrk
ah, adding a system dependency. that has its own pros and cons

1579229006
keegans
yeah i really am not sure what is best

1579229046
andrewrk
this is a similar problem as https certificates

1579229086
keegans
well actually, I am curious. I see people shipping statically compiled go executables in docker containers with no base image, are they just completely breaking the time library?

1579229102
andrewrk
good question

1579229216
keegans
anyway, thank you for your help I'll stick with the libc dependency for time for now

1579229785
andrewrk
mikdusan, CONTRIBUTING.md mentions -DZIG_SKIP_INSTALL_LIB_FILES=ON

1579230588
keegans
how can I convert a []const u8 to a [*:0]const u8 ? Will I have to perform an allocation and copy, or can I use the fact that the string itself should be NUL-terminated

1579230599
keegans
in my fit to try to figure it out for myself I just crashed the compiler :(

1579230652
andrewrk
keegans, you can use slice-and-assert-sentinel syntax: foo[x..y :0]

1579230686
andrewrk
this gives you a `[:0]const u8` which will implicitly cast to both `[*:0]const u8` and `[]const u8`

1579230699
andrewrk
it also asserts that `foo[y] == 0`

1579230743
keegans
very cool, thank you

1579230771
andrewrk
thanks for the bug report

1579230800
keegans
ok it seems I just triggered an abort with your suggestion :(

1579230816
keegans
i ask for your help then just drown you in bug reports, this is no reward hahaha

1579231098
keegans
I am having some trouble reducing the test case for the new crash:

1579231211
andrewrk
another user recently figured out how to use creduce with zig

1579231346
andrewrk
keegans, this is definitely a compiler bug, but name[0.. :0] is almost certainly incorrect, because you're accessing outside the name slice

1579231374
andrewrk
if the byte after the name slice is 0 then it should be `name: [:0]const u8` rather than `name: []const u8`

1579231437
andrewrk
so you don't need name[0.. :0] at all, just name. but update the parameter type. and update currentTime to return [:0]const u8 instead of []const u8, by changing buffer[0..size] to buffer[0..size :0]

1579231460
andrewrk
give the type system all that juicy info

1579231576
daurnimator
andrewrk: back now. was at lunch

1579231620
daurnimator
andrewrk: I think going with sfc/spi is a much better choice than doing it yourself: they handle all sorts of tax-free statuses for us; and are essentially lawyers on free retainer

1579231683
daurnimator
oh also, I should mention I poked the xtensa people and they pushed the latest version of their branch:

1579231889
daurnimator
andrewrk: lib/libc/musl/include/alltypes.h.in exists.... why do I have to copy it to a relevant subdir?

1579231975
lukeholder
andrewrk, I am interested in helping by contributing to the website/docs etc. Is the best place to put forward ideas and discuss the `

1579232041
daurnimator
lukeholder: oh you're a JS developer that wants to help with zig?

1579232060
daurnimator
lukeholder: would you be interested in writing a highlight.js plugin for zig?

1579232170
lukeholder
daurnimator, yes, web developer

1579232198
lukeholder
Can look into that, what is ziglang.org using ?

1579232212
andrewrk
hi lukeholder!

1579232233
daurnimator
lukeholder:

1579232262
lukeholder
hi andrewrk :)

1579232288
andrewrk
ziglang.org uses its own self-hosted tokenizer for highlighting

1579232345
daurnimator
lukeholder: Various things (pastebins/blog engines/web IDEs/etc) use highlight.js for highlighting: to get such things to support zig highlighting we need to get support into the upstream highlight.js

1579232386
andrewrk
lukeholder, there is also

1579232423
andrewrk
the

1579232521
andrewrk
my mind is open to changing the design/layout of the home page, as well as how it is generated. but I do consider it a matter of pride that it respects the user's light/dark preferences, has easily accessible code examples, and entire page loads from cold cache with 22 KB transferred

1579232601
andrewrk
what you showed clearly looks more appealing to me, which is a bonus. but losing these other things would be noticed by zig's target audience of programmers

1579232609
lukeholder
andrewrk yes I have seen those docs too.

1579232644
lukeholder
Not looking for you to loose anything to loose focus on the audience

1579232650
lukeholder
Not looking for you to loose anything to lose focus on the audience

1579232740
lukeholder
There is the website / github wiki / docs / and std lib docs

1579232821
lukeholder
If we had a design system set up, we could roll out consistency through them all, and also look to combine/unify the build system (static site generators etc)

1579232836
lukeholder
in a secondary step

1579232864
lukeholder
Agree on usability/accessibility/speed all really important

1579232927
lukeholder
I will start with getting a highlight.js plugin made as a contribution to start

1579233570
daurnimator
I forget... does --c-source take assembler files? I remember something about that

1579233647
lukeholder
haha just found

1579233698
daurnimator
apparently yes :)

1579233922
andrewrk
daurnimator, yes and planned to just honor extensions:

1579234273
daurnimator
andrewrk: is there a way to use zig as a linker? i.e. `zig build-lib a.o b.o c.o`?

1579234478
andrewrk
yes that works

1579234526
andrewrk
use --object, and then again note #3508

1579234844
mikdusan
oh linux failed with cmake commit :(

1579234981
mikdusan
mismatch on install dir.

1579235012
mikdusan
scratch that -- that's just a bad install-msg I forced from cmake. duh

1579235143
andrewrk
at least it didn't "succeed" and make a bad tarball

1579237228
lukeholder
What IRC client(s) do you people use?

1579237288
adamkowalski
erc for emacs, irssi when i'm using vim/tmux

1579237356
andrewrk
hexchat

1579237848
torque
weechat

1579239938
pmwhite
Matrix bridge, so Riot.

1579239948
pmwhite
Which is also why I have a space in my username.

1579240017
pmwhite
Also, I'm on my Pinebook Pro at the moment. Been trying to get my zig wayland program to work on this ARM processor, but there is some weird bug that isn't present on my usual laptopo.

1579240125
pmwhite
I'm getting "reached unreachable code" along with an error trace that doesn't contain an unreachable keyword in it.

1579240226
daurnimator
lukeholder: weechat

1579240244
daurnimator
andrewrk: sorry, only getting minutes here and there to work on this

1579240257
daurnimator
can zig act as objcopy?

1579242979
daurnimator
getting closer :)

1579243122
daurnimator
adding -lc gives: Assertion failed at /home/daurnimator/src/zig/src/link.cpp:1484 in get_libc_crt_file. This is a bug in the Zig compiler.

1579245433
andrewrk
objcopy issue is

1579264047
keegans
andrewrk: ah my thinking was that I wanted to make as few things use the [*:0]u8 as possible, to make it a more idiomatic Zig interface (so you feel like you're just calling zig), I will adjust to use the zero-terminated array for those functions. i'll also explore the creduce idea

1579264063
keegans
(unless the person that did it documented the process)

1579267961
betawaffle
how do i declare an array of something

1579267977
betawaffle
(and i also want it to be volatile)

1579268030
betawaffle
i want `@intToPtr([*]volatile vga.Entry, 0xB8000)` except with a known size

1579268107
betawaffle
actually... i also want it to be a multi-dimensional array

1579268186
alva
betawaffle: did you see this?

1579268204
betawaffle
yeah, i may be able to figure it out myself, sec

1579268621
BaroqueLarouche
betawaffle: this is what I did to create a slice from a volatile pointer:

1579269634
mikdusan
andrewrk: something squirrely with linux build failures. In ci/azure/linux_script `[ IndividualCI != PullRequest ]` section somehow starts another stage1 build, and the error is thrown after that. I'm just not following how/why the 2nd stage1 build is done, and why it's using gcc 9.2.0

1579269694
mikdusan
oh maybe `docker run ...`

1579274394
SyrupThinker


1579274481
SyrupThinker
Shouldn't analysis of this branch be skipped as I am not targeting Windows/Uefi?

1579274495
SyrupThinker
Or am I missing something

1579275205
fengb
Weird... @compileLog(DebugInfo) => std.debug.DwarfInfo

1579275310
fengb
Yeah I dunno why it's triggering

1579275385
fengb
`.uefi, .windows => WinDebugInfo,` pulling it out like this makes it work. Looks like a bug with lazy analysis

1579276089
fengb
SyrupThinker: I created a bug report

1579276113
SyrupThinker
Thank you :)

1579276209
fengb


1579276226
fengb
How do we prevent the Zig community from devolving?

1579276252
companion_cube
oh damn

1579276291
fengb
I know other communities have similarly suffered. Guido stepped down for similar reasons

1579276434
BaroqueLarouche
dealing with humans is always hard

1579276531
fengb
Always true. However some communities work better together than others

1579276557
companion_cube
so far rust had been pretty examplary…

1579276563
companion_cube
I wonder what communities do better?

1579276608
fengb
Maybe Rust core does. But there's a vocal minority of "Rust-bros"

1579276622
companion_cube
the RiiR squad? :D

1579276651
fengb
e.g. "why don't you just rewrite it in Rust?? It fixes all problems!!"

1579276686
fengb
Haha yeah

1579276718
gonz_
The discourse around safety for people getting into Rust generally speaking seems to breed this kind of outrage and histrionic behavior around unsafe languages and features.

1579276719
companion_cube
often I don't think this is bad, it's just the accumulation that can be annoying

1579276766
gonz_
I'm sure most of the Rust community isn't as dogmatic, but the aforementioned "bros" definitely put on a show whenever the issue of memory safety comes up.

1579276774
fengb


1579276783
fengb
A warning from 3 years ago >_>

1579276840
gonz_
I remember a HN comment that ended with (paraphrasing): "I use Rust because it matches my ethics ..." with the implication that a language lacking memory-safety was unethical.

1579276896
fengb
I remember that too

1579276946
companion_cube
otoh I do understand that people dismissing segfaults and buffer overruns as inevitable is super annoying

1579276950
fengb
My favorite HN commenter is "pron". I have no idea who he is and his handle is terrible, but he's a Zig follower and discusses tradeoffs really well

1579276965
companion_cube
like, so many vulnerabilities come from that, it'd be nice to just avoid them…

1579276986
companion_cube
(I mean I understand the feeling behind RiiR)

1579277000
fengb
I think part of the problem is that people look at Rust and C as the only 2 solutions

1579277017
fengb
Either 100% safety, or leave me alone. NO MIDDLE GROUND

1579277046
gonz_
fengb: His name is Ron Pressler

1579277055
gonz_


1579277065
fengb
That explains the handle... lol

1579277111
companion_cube
on the actix thing, I think people felt comfortable with the idea of being protected against memory errors

1579277125
companion_cube
and then whenever a bug caused by `unsafe` poped, they would get angry

1579277242
gonz_
That last part is where I feel like people are missing the point. The software is iterative; bugs can be fixed one by one. It's unlikely that the actix-web development model is any worse than any other in the long run.

1579277273
companion_cube
in this case, I find it a bit worrysome the guy redid his own `Cell` when it's a touchy abstraction

1579277320
fengb
Too many programmers have ego-centric models

1579277380
gonz_
I dunno, things like this just remind me why I wanted to become a code hermit and why I will.

1579277384
fengb
We need to stop bickering about why we're right, but instead focus on getting better

1579277392
companion_cube
thanks for linking the post from klabnik, fengb

1579277395
companion_cube
well written as usual

1579277398
BaroqueLarouche
fengb: +1

1579277439
fengb
(I say this even though I have a raging ego)

1579277571
tane
fengb, to be honest, I dislike the concept of "the X community" in the first place, as it generates the in-group/out-group dichotomy in the first place

1579277573
companion_cube
other people are egotistic, I'm just aware of my worth!

1579277608
kristoff_it
hey all, I was stalking the discussions through the irclog, it's a tough nut to crack for Rust, the theorem-proving approach is a concept strong enough that people can understand but many don't get the nuance

1579277620
gonz_
At some point I'll disappear from the Internet and just amass a mountain of zig code for myself for 10+ years. When that happens depends entirely on when this particular community sours (as they all do).

1579277649
kristoff_it
and so you get fans and haters that take a fundamentalistic stance

1579277688
kristoff_it
paulg wrote recently something relevant in my opinion

1579277712
fengb
gonz_: but you're more valuable providing insight amongst heathens

1579277725
companion_cube
(I feel more like a hater of some things than a fanboy of other things :s)

1579277775
tane
companion_cube, you still like ocaml, don't you? :)

1579277797
fengb
I feel like haters are a natural byproduct of fanboys

1579277847
companion_cube
tane: a lot, I'm comfortable with it and it's quite expressive

1579277852
fengb
... Steve Klabnik does not look like what I had in mind

1579277857
gonz_
fengb: Right. The infamously great tactic of "No, you're wrong!" :D

1579277858
tane
it's opinionated things that drive the division, and rust is really opinionated

1579277880
companion_cube
gonz_: no,

1579277910
fengb
Example: I don't really think much of Odin, but I'm really disliking Jai for all the wrong reasons

1579277932
fengb
Even though they're very similar

1579277970
fengb
The Jai fanboys have really clouded my judgement

1579277989
BaroqueLarouche
Jai has been too long in closed-door development

1579277997
companion_cube
what about the fact it's done behind closed doors?

1579277999
companion_cube
ah, same

1579278003
kristoff_it
fengb: but how much of that is really dislinking the language (of which you can only see a reflection in twitch streams) vs disliking jblow and the fanboys?

1579278014
kristoff_it
fengb: ah yeah you said it

1579278055
fengb
I disagree with it... but I don't think it warrants hatred

1579278089
kristoff_it
I wonder how Zig fanboys will look like

1579278094
gonz_
I don't think disliking languages and their fanatics is actually a good thing. The only reasonable move is to not play, though.

1579278095
fengb
I also feel like JBlow has the ego the size of a mountain, and being a game dev feeds into that

1579278115
gonz_
s/good thing/bad thing/

1579278132
fengb
But... he's smart and has great ideas and I really want Jai to succeed. But I also want to spite the fanboys somehow

1579278161
tane
fengb, just ignore them :) the problem, as in rust comes, when the fanboys keep harassing you for not using Jai in the "right way"

1579278174
companion_cube
I'm most annoyed by Go personally, there's a lot of fanboys around Rob Pike, even though his taste in PL is… er… dubious

1579278190
fengb
Well good thing I can't use Jai at all! :P

1579278285
kristoff_it
I think we all here will have a moment of illumination once the first Zig fanboyism/haterism incident happens.

1579278303
kristoff_it
once you see from the other side of the fence, you get a better understanding of the whole picture

1579278327
BaroqueLarouche
well there's the Zen incident

1579278347
kristoff_it
ok, but that's different no?

1579278352
kristoff_it
am I missing something?

1579278368
BaroqueLarouche
yeah it's a different matter

1579278372
fengb
I like Andrew's approach so far. He's generally pretty good at explaining tradeoffs and opinions, and not about gospel

1579278393
BaroqueLarouche
Very good at saying no and explaining why

1579278395
fengb
But it's also something we can try to do better in general

1579278465
fengb
We can always do better

1579278469
fengb
I feel like a Hallmark card

1579278547
BaroqueLarouche
haha

1579278560
gonz_
I feel like being reasonable about it essentially means not getting involved in dogmatically fueled language discussions at all.

1579278603
kristoff_it
that's a good stance

1579278637
kristoff_it
some people will challenge you anyway about it, but it's just a matter of brushing them off

1579278712
kristoff_it
when I wrote "Why Go and not Rust?" I got a few of annoyed (even angry) priv messages about it. Even though the whole article concludes with

1579278713
kristoff_it
"Let’s avoid tying our identity to a single language and embrace practicality first and foremost. Tribal names like Rustacean or Gopher should be avoided, as they are inherently a marketing tool for inducing stronger branding."

1579278963
gonz_
As nice as all this seems, the truth is that communities always end up pretty garbage and the real value is in finding a few friends and confidants that share your values.

1579278986
companion_cube
someone to rant to 💞

1579279000
gonz_
companion_cube += 1

1579279017
companion_cube
kristoff_it: I understand what you say, but I feel irrationally angry at Go still :(

1579279027
companion_cube
such a lost opportunity to make things right :(

1579279107
fengb
I generally like Go's simplicity

1579279122
companion_cube
it coudl have been simple and yet, so much better

1579279123
fengb
But... things like error codes and generics are a hot topic

1579279130
kristoff_it
companion_cube: on the bright side your favorite language is not going to be controlled by Google

1579279146
companion_cube
and nil, and lack of sum types

1579279148
companion_cube
that makes me angry

1579279160
fengb
I'm surprised at how hostile Go's community is against fixing errors

1579279179
fengb
6 of the top 10 community packages are making errors less shitty

1579279444
kristoff_it
the other angle of this story that I think is relevant is about the burnout that OSS maintainership can cause:

1579279506
companion_cube
antirez is one of the people that makes me thing "ok maybe C isn't that shitty" :D

1579279513
tane
true

1579279522
tane
I still need generics, hence zig seems promising :D

1579279542
kristoff_it
I'm definitely one of the last persons that's ever going to absolve Rust fanatics, but the maintainer needed a strategy to keep a balance and avoid getting burnout completely

1579279565
companion_cube
knowing how to delegate is crucial

1579279719
andrewrk
fengb, I really like steve klabnik

1579279725
andrewrk
I had the pleasure of meeting him once

1579279774
companion_cube
Ashley Williams is also nice, they live in Austin

1579280107
mikdusan
andrewrk: what does this line do?

1579280522
andrewrk
mikdusan, it runs this script

1579280600
andrewrk
the main benefit of the docker image is that it is alpine linux, which makes it easier to static link libc

1579280768
andrewrk
mikdusan, since the message is "unable to find zig lib directory" I'm guessing that this is catching a problem with the cmake thing. because this is the only place where we run `zig` binary from outside a tree where it could otherwise look up the directory structure enough times and find the lib directory

1579280786
andrewrk
in this script it's run from a separate install directory, which ensures that the lib files have been installed. so I think the new cmake thing is not working

1579280808
mikdusan
my thoughts too. now that I can see the build script, I'm going to try to reproduce here. there is something diff about the docker run.

1579280845
mikdusan
also what is the birds eye view / logic of why it matters to check for if [ "${BUILD_REASON}" != "PullRequest" ]

1579280852
mikdusan
in linux_script

1579280899
andrewrk
that way the script does not try to do the stuff related to updating the download page for pull requests

1579280939
andrewrk
it would fail if it tried because pull requests do not get access to the secret tokens, but then the CI would fail for PRs and we want them to succeed

1579280982
andrewrk
the ci actually does make branches available for download. it's not exposed anywhere, but if you know the URL you can get them

1579281026
mikdusan
oh so there is a distinction between pull and merges. and the commits we see typically with "Merge pull ..." are the ones made available for download?

1579281241
andrewrk
the distinction is whether the commit is in a ziglang/zig branch, or if it is in a fork

1579281273
andrewrk
`if [ "${BUILD_REASON}" != "PullRequest" ]` will trigger when the commit is in any branch of ziglang/zig

1579281283
andrewrk
whether it's a pull request or not

1579281295
mikdusan
I'm confused: not understanding why 9348609 failed. and af9eb7a succeeded. the latter did not run docker stuff

1579281310
mikdusan
(commits on master branch)

1579281423
mikdusan
ie: why does one run docker and the other not. maybe you explained it to me, I just don't get it

1579281665
andrewrk
mikdusan, part of the logic is encoded in the pipelines.yml file:

1579281696
andrewrk
the "OnMasterSuccess" job runs when BuildMacOS, BuildLinux, and BuildWindows all succeed

1579281703
andrewrk
that executs ci/azure/on_master_success

1579281725
mikdusan
oh the tip

1579281727
mikdusan
got it

1579282249
metaleap
earlier was asked: "how do we prevent the zig community from devolving" wrt to the rust/actix thing --- if everyone never worries about it and keeps on coding or talking about the code, it's already well protected! my take on the linked blog that says: "It’s been very clear from the beginning that the Rust project saw Rust as more than just the language. The community and the people mattered. From the earliest days, leadership explicitly took th

1579282249
metaleap
e position that it wasn’t just the code, but the people around the project were important" --- stay immune to this "not just about the code" sinkhole in an intrinsic/systemic/ingrained/habitual manner (so far zig is terrifically naturally on track here) and danger mostly averted. imho.  =)  good thing zig has also nothing much to be preachy about, instead it's merely the next-gen swiss-army-knife par excellence. now back to the channel's schedule

1579282250
metaleap
d programming =)

1579282306
companion_cube
idk, these days you can't really avoid having a community

1579282331
andrewrk
we're immune to it

1579282343
kristoff_it
metaleap: I suspect other people have already walked this path and they too inevitalby got caught in the usual pitfalls

1579282420
andrewrk
rust community & steve are already doing us a favor with the news item of today, because now the tech community at large is more aware of these sorts of problems, more receptive to ideas about how to keep a more peaceful environment

1579282427
fengb
We've had users come and go because they disagree with Zig's direction

1579282464
fengb
And soon™ we'll start having some rivalry with Jai

1579282472
andrewrk
hoo boy that will be interesting

1579282473
fengb
We've already seen some with V, for better or worse >_>

1579282498
tane
andrewrk, I asked this before, but is there some document regarding work on consistency of the stdlib, e.g. naming, whatever. I ask because I'd like to rename `compareFn` in `priority_queue.zig` to `lessThan` and propose to only use `compareFn` or functions returning `mem.Compare` and `lessThan` for functions `(T,T) bool`.

1579282515
companion_cube
rivalry can be ok, I think?

1579282519
metaleap
fengb: and who knows how much headaches were spared this way  =)  by keeping allowing low-level primitives incl unsafe and also the "embedded also matters" / "clib-less / OS-kernel-less also matters" sub-focus

1579282528
companion_cube
V is a different problem, it's a shitshow from the start

1579282549
metaleap
...certain classes of "community" will not touch zig with a 42-foot pole

1579282562
fengb
But they're on 1.0 stable now right??

1579282629
andrewrk
tane, no such document exists; however see related issue

1579282668
andrewrk
tane, I agree with your suggestions, would accept PR

1579282679
tane
andrewrk, alright, thanks

1579282747
andrewrk
tbh the rival I actually respect the most right now is beef

1579282778
companion_cube
it's windows-only though

1579282790
fengb
Not Odin? Somewhere a ginger is sad

1579283317
andrewrk
mikdusan, you working on a patch, or are you ok with reverting the cmake stuff until ready to try something new?

1579283380
mikdusan
reproducing failure is taking longer than expected; so far manually on archlinux has failed. So I'm trying to use this dang-fangled docker thing of which is alien to me

1579283386
mikdusan
so yeah maybe time to revert

1579283437
mikdusan
would you like me to do that?

1579283828
andrewrk
sure, if you're up for it, go ahead and push to master

1579283852
andrewrk
don't feel bad btw, it's not a big deal to break master, since we have the CI only update the download page when it succeeds

1579284497
metaleap
so we have == for prim-types, std.mem.eql for "slices", what do folks do for other eqs of two same-typed operands. say structs or unions. force-cast into "slices" by taking both operands' addr-and-@sizeOf for passing to std.mem.eql?

1579284695
andrewrk
usually whether structs are considered equal is problem-domain-specific

1579284726
andrewrk
however if you want a field-wise comparison you could look at std.meta.eql

1579285187
metaleap
andrewrk: nice will take a look thx. with the domain stuff, yeah and here a good practice is to have a custom "equiv" (not "equal") method etc. but in a C-like one'd still appreciate "compare in-mem-bytes behind these 2 equal-sized operands", right? i mean so many structs are just packaging api stuff back & forth, whether between ffis or tooling or endpoints or whatever, not necessarily "complex business-domain level with peculiar semantic rules". go has

1579285187
metaleap
very simple consistent equality for "whatever type you throw at it": mem bytes in the indicated range are compared. so also pointers are not followed but merely addr-equality there. it looks like std.meta.eql will do the same trick mostly, except slices would still have to be done via std.mem instead of std.meta for usual "cmp-mem" purposes

1579285310
metaleap
that is an awesome showcase for comptime btw, just being able to `fn (a: var, b: @TypeOf(a))` is so damn neat!! to consider the towers of abstractions haskellers must traverse to get the same net effect..  :D

1579285384
andrewrk
comparing bytes of structs is not sound unless you use packed or extern, because with normal structs zig reserves the right to put metadata in them, for safety or other purposes

1579285489
metaleap
andrewk: i'd suppose any 2

1579285520
metaleap
ah dang now i got it, sorry

1579285567
metaleap
if such metadata is per instance, then no bytes-cmp (trivially) feasible esp. no asm-based later on =/

1579285629
andrewrk
but you can get such a comparison if you want; you just have to communicate that to the language by using packed

1579285694
tgschultz
also padding bytes can be anything

1579285769
metaleap
good point too, stuff isnt auto-zeroed here. ok lesson grok'd  :D

1579287717
fengb
Tangentially related: Go randomizes iterating through maps so you can't rely on that

1579287741
fengb
Maybe Zig in debug mode can insert random data into structs?

1579288149
leeward
I think Beef is Windows-first, but not quite Windows-only?

1579288165
leeward
The tools first approach is solid.

1579288173
metaleap
fengb: well yeah they have some "no can do" exceptions to `==` such as funcs and maps and channels where `==` can only be against `nil`. crikey even slices (tho not fixed-size arrs) now that i remember! so not all rosy there either.

1579288180
companion_cube
ah indeed, binaries are windows only, but not the rest

1579288185
companion_cube
I think the IDE is windows only tho

1579288192
leeward
Yeah, it is.

1579288210
companion_cube
making a custom IDE is… something I don't like, as well

1579288215
companion_cube
give me LSP so I can keep vim

1579288271
leeward
My problem with most of Zig's rivals is that I spend most of my time working on very embedded stuff, and most of these languages are aimed at other domains where things like performance per clock cycle matter more than they do for me.

1579288288
leeward
Yeah, I'm not saying I would leave Emacs for it, but Go took years to get a decent profiler.

1579288322
leeward
Of course, the fact that I can use GDB and Valgrind with Zig makes me plenty happy.

1579288354
metaleap
companion_cube: implementing LSP is another kind of bummer tho. there still isnt a JSON-Schema (jsd) file for machine-processing-and-doing-custom-scaffold-code-gen'ing from it, last i checked (and I check regularly).

1579288390
companion_cube
you mean, for not writing the json code yourself? yeah

1579288399
companion_cube
but it doesn't seem worse than writing a

1579288403
companion_cube
and it's more useful imho

1579288486
companion_cube
oh no, beef has boxing :(

1579288487
andrewrk
fengb, that's a good idea. related:

1579288494
metaleap
companion_cube: i mean they also keep evolving those protocols so at the very least a jsd like "vscode debug adapter protocol" project does would be a must. but LSP doesnt really care about how much friction to implement their stuff

1579288511
companion_cube
wait, does LSP break compat in their protocol ‽

1579288520
companion_cube
I know the debugger adapter is still in motion

1579288562
andrewrk
fengb, in general, I like the idea of taking extra runtime penalties to gain more safety, as long as the penalties can be disabled

1579288578
fengb
andrewrk: cool, I can write up a proposal

1579288589
fengb
Yeah in this case I think it's more of "don't provide a hidden footgun"

1579288613
metaleap
companion_cube: probably not so much outright breakage (soft depreciations more likely) but keep adding stuff still. gotta run & keep up or else accept inevitable slow bit rot

1579288627
fengb
Working most of the time by accident isn't very friendly

1579288639
companion_cube
metaleap: for implementing LSP you don't have to care, afaik

1579288649
companion_cube
all methods are optional, so…

1579288707
leeward
Working most of the time by accident is something a language like INTERCAL would do.

1579288707
metaleap
speaking of LSP, who's doing the Zig one? if there's no such thing in progress, it would be my next project though more of a custom daemon prog first (stdin/stdout json over longlived pipe), with an optional LSP layer on top or left for others to add on top

1579288707
leeward
Also, for fun, C!

1579288719
fengb


1579288733
metaleap
thx! will watch

1579288734
fengb
I haven't seen him around lately

1579288787
fengb
leeward: yeah I think that's why Go randomized map iteration. It worked until it doesn't and you end up having a spirit journey to figure out why

1579288803
andrewrk
metaleap, these flags are relevant: -fdump-analysis -fno-emit-bin

1579288825
andrewrk
also the unfinished merge_anal_dumps tool

1579288838
leeward
That tool sounds wrong.

1579288839
andrewrk
( ͡° ͜ʖ ͡°)

1579288868
metaleap
andrewrk: what for lsp? oooh shiny compiler metadata to easily parse through you say? thx for hint

1579288903
andrewrk
metaleap, yes it's a large json dump of the results of semantic analysis. firefox has a nice tool for viewing large json files

1579288931
andrewrk
there are some things that don't work so well; zig's lazy analysis is a problem here

1579288954
companion_cube
why have a custom protocol rather than targetting lsp directly, metaleap?

1579288993
metaleap
companion_cube: speed of initial development without getting bogged down in others' brains' constructs  :D

1579289002
companion_cube
heh! :D

1579289054
metaleap
but given everything is optional in lsp as you, i might even take a less ignorant stance this time around.. for once!

1579289087
companion_cube
well, you need to implement the part where you get buffer updates, otherwise there's no point

1579289102
metaleap
for sure

1579289106
companion_cube
and publish diagnostics based on that if you want; the rest (completion, hints, etc.) is optional

1579289122
companion_cube
jump-to-def, show the comptime value on hover… :p

1579289159
metaleap
...and diags can be empty initially so de-facto optional. yeah knowing me i'll first mock out the full protocol with dummy values before doing any real intel, if stamina left =/

1579289226
metaleap
one thing i notice @andersfr has a custom zig parser in there but i gather the repo also has a longer history, am itching to see how mature the zig-builtin-ast-lib stuff is

1579289251
adamkowalski
If anybody has used tensorflow or any other deep learning library can you all take a look at my progress on compute-graph? What do you all think about the syntax for dealing with linear algebra / building and running your graph

1579289253
adamkowalski


1579289277
adamkowalski
That test case shows creating a graph, defining a model, running it in a session, checking the output

1579289292
companion_cube
proper LSP (or equivalent) means you need a error-resilient parser, but that can come later anyway

1579289293
adamkowalski
no backpropagation yet, but it's the next thing to add now that I have the forward pass working

1579289295
andrewrk
metaleap, I believe the goal of that custom parser was to be forgiving of parse errors

1579289358
adamkowalski
andrewrk: yeah it was, but it's really out of date now. I submitted a PR to zig lsp and it was the last commit made. That was months ago

1579289364
andrewrk
one thing I want to experiment with, to address IDEs, is to take into account whitespace for parsing. because maybe the person types { and hasn't typed } yet, but nobody starts typing into an IDE with weird indentation

1579289367
adamkowalski
It doens't support any of the anonymous structs, literals

1579289456
metaleap
andrewrk: i see! once in a different parsing context (non-lsp) i dealt with that by parsing not a full-file from start to finish but top-level defs as separate chunks (was intentation-based not brace-braced tho) --- so if one was temporarily broken (and usually at most 1 anyway in practice) the others could still provide intel

1579289498
companion_cube
andrewrk: at least to recover you can skip to the next beginning-of-line statement

1579289678
metaleap
i wont go for real-time as-you-type full feature-set anyway, more like refresh-on-save. i press ctrl+s often enough and dont need annoying red squiggles and temporarily-flashing diags while typing out lines.. annoying enough to see that "live" stuff in action while typescripting. so then no functionality for a file that wont parse isnt such a heartache either

1579289702
andrewrk
companion_cube, yeah! I think line-independent tokenization was a good decision. I think it will be an undervalued decision until we have IDE support :)

1579289791
companion_cube
metaleap: the thing is, LSP saves you from thinking about that

1579289802
companion_cube
you get buffer updates, you publish diagnostics, that's it

1579290139
metaleap
companion_cube: but in my custom go extension (written way back when vscode's/ms's own go ext was especially rubbish) i got the diags easily from `go build` which i triggered not on buffer updates but on-saves. buffer updates happen as you type, no? even if i can accumulate them for some interval, wouldnt wanna `zig build` in-mem buffers when i can trigger build-on-save and gather the diags from there.

1579290166
metaleap
now what do see in the spec: notifications for onclose, onopen, onchange, but no onsave...... meh

1579290180
companion_cube
because that's not your job, I think

1579290187
companion_cube
each editor can decide when to talk to LSP

1579290196
companion_cube
(can be on save, or as you type)

1579290241
faranwath
I am sorry if this violates any guideline since I am about to ask a question not related to Zig, but since there might be people here with more experience than me, it's worth the shot. Has anyone tried to run Barebox (

1579290242
faranwath
missing but either their documentation is scarce or I am really overlooking something).

1579290260
metaleap
companion_cube: oh there's some "save" stuff in the spec after all, ok. well will attack when my current other small project is done

1579290331
companion_cube
ah, there are capabilities indeed

1579290388
andrewrk
faranwath, generally, topics related to "system programming" are welcome here. only when it starts to get controversial or mean spirited does the off topic rule start to get enforced heavily

1579290459
andrewrk
you might also try #osdev

1579290501
faranwath
andrewrk: I imagined as much, but it's always better to ask first. And yeah, it might be a better shot to try that channel, thanks for the suggestion.

1579291790
TheLemonMan
yo andrewrk, I have a few questions about how #978 behaves when it's not in a function scope

1579291984
andrewrk
yo

1579292017
andrewrk
happy to answer and I have some more context for this as well

1579292266
andrewrk
@optimizeFor is one of those things where the language is more expressive than llvm is capable of handling

1579292289
andrewrk
while zig allows setting the build mode at any scope, llvm will let us set optimization levels only at a function level

1579292359
andrewrk
I also want "package scope" to be a thing for this, so you could have for example your blake2 dependency in --release-fast mode but your main application in debug mode

1579292435
andrewrk
we don't currently have a "mode" setting for types such as structs. I believe we would need to introduce this, because it's not the same as build mode, which has more to do with code gen than types & memory layout

1579292850
zfoo_
faranwath: not sure if it works on a UEFI PC, but the barebox bootloader will need a device tree

1579292859
andrewrk
btw if any contributors are looking for something to do,

1579293117
BaroqueLarouche
andrewrk: I'm planning to look at #2826 soon

1579293165
faranwath
zfoo_: Right, I've used it to load Linux on ARM-based devices and it has worked like a charm. This is the first time I built with ARCH=x86 but I see no `make` target to generate a device tree. I'm muddling through the project to try and better understand it and hopefully figure out what's missing. I was told on #barebox that someone had replaced

1579293166
faranwath
GRUB with it on his/her laptop do it does seem possible.

1579293212
faranwath
*so it does

1579293274
TheLemonMan
andrewrk, oh I see, we should create a hierarchy of compiler-set optimization mode -> decl-scope-set mode -> function-decl-scope optimization mode

1579293294
andrewrk
TheLemonMan, yes that's my idea at least

1579293312
andrewrk
each struct introduces a sub-scope (and files are structs)

1579293319
andrewrk
I also want packages to be scopes

1579293349
andrewrk
so: global -> package -> struct/union/enum/function

1579293366
TheLemonMan
but what about a @optimizeFor in a block inside a function? Should that be an error?

1579293366
andrewrk
llvm's granularity is only functions afaik

1579293371
TheLemonMan
yep

1579293396
andrewrk
it's still valid; it can affect safety checks for example:

1579293417
andrewrk
also who knows? maybe non-llvm backend will support some kinds of sub-function optimization passes

1579293447
andrewrk
it communicates what the programmer intends, and whether the compiler can do anything with that information is a separate concern

1579293453
TheLemonMan
roger that

1579293455
BaroqueLarouche
I use #pragma optimize("", off) a lot with game code, so @optimizeFor will be very useful

1579293479
andrewrk
maybe a future compiler outputs metadata in the debug info, which a third party tool reads (something like valgrind) to make a hot spot within a function faster without the checks

1579294721
metaleap
looks like i'm doing @tagName wrong: "expected enum or union type, found '(enum literal)'" --- well sure, docs say (and compiler does too) only 1 arg is needed, and what would the "union or enum type" arg produce as a "tag name"...... headscratcher!

1579294779
metaleap
should add i pass it a comptime-known tag but decl'd as `comptime tag: var`

1579295753
metaleap
ah dang looks like tagName takes the union field's value not its tag, so @memberName would be it, and now I need to obtain the enumerant's-aka-field's index

1579295842
metaleap
...which should be enumToInt but feels shaky

1579295962
metaleap
and results in the same err :'(

1579296053
andrewrk
metaleap, @tagName should work on enum literals it's a missing feature

1579296118
metaleap
andrewrk: thx so its just WIP-missing? use-case is: given `(comptime TUnion: type, comptime tag: var, it: TUnion)` , how to "emit" `it.<tag>` so to speak

1579296149
andrewrk
yes

1579296176
andrewrk
it's a pretty contributor friendly issue too

1579296238
metaleap
#1099 isnt it, is it?

1579296309
metaleap
(for above case, i have a `switch` version working so its not pressing, just thought i'd go with activeTag and direct dot access instead)

1579296390
andrewrk
metaleap, no that's to do with meta data on struct fields

1579296403
andrewrk
I think there is not an issue for the thing you just mentioned, feel free to create it

1579296464
metaleap
(i just searched issues for tagName) --- will do!

1579297775
keegans
i do not know if i am very unlucky or what, but i am getting some strange behaviour with the :0 slices suggested by andrewrk in the following program

1579298091
daurnimator
keegans: what error do you get?

1579298172
keegans
well thats the thing, there is no error

1579298178
keegans
but there is obviously something funky happening

1579298198
keegans
that is washed away in release safe, without error

1579298230
keegans
ah LemonBoy responded

1579298247
keegans
I assumed that it would be

1579298256
keegans
i clearly need to read up on how these semantics work in zig

1579298313
fengb
Slices are fancy pointers

1579298327
andrewrk
oh, oops I missed the buffer thing when I looked at the code last night, sorry

1579298331
fengb
As soon as you return it, it's a pointer to stack memory that'll get wiped

1579298364
andrewrk
the issue to detect this with a safety check is

1579298444
keegans
ok, I will adjust accordingly, I am not sure why I expected what I did

1579298459
fengb
It's a ocmmon problem because slices look like arrays

1579298473
fengb
The usual solution to something like this is passing in the buffer

1579298546
keegans
yep, good idea

1579299371
andrewrk
one trick to remember is that `var` is a memory location

1579299389
andrewrk
all the `var`s in a function are destroyed when the function returns

1579299511
daurnimator
andrewrk: unless the var was in a struct definition :P

1579299684
frmdstryr
Release-safe optimizes out error messages & traces?

1579299730
andrewrk
frmdstryr, I believe error tracing is enabled in release-safe by default. the implementation allows separately enabling/disabling error tracing however this option is not currently exposed

1579299947
frmdstryr
Hmm... well the panic in debug i can print the error and backtrace but in release-safe it just says optimized out

1579299974
frmdstryr
maybe it's because it's in a nop loop toggling an led

1579300009
daurnimator
with non-exhaustive enums merged we have lots to improve!

1579300057
daurnimator
andrewrk: ^ are you good to accept patches to convert things? e.g. AF_ constants, windows.STATUS

1579300079
daurnimator
hell, the errno values themselves!

1579300191
daurnimator
getErrno will actually be able to return a `?Errno`

1579300239
andrewrk
daurnimator, generally, yes, but let's not overcomplicate things that are working perfectly well, with regards to cross platform

1579300293
andrewrk
errno as an enum is preferable, no arguments there - as long as it doesn't result in having to add workarounds or undue complexity to deal with differences across systems

1579300370
andrewrk
I guess what I'm saying is, I'm on your side on this one, but I also want to not give up seeing the forest for the trees, if that makes sense

1579300419
andrewrk
AF_ constants makes sense to me, since that transcends operating system

1579300823
daurnimator
It also namespaces them

1579300845
andrewrk
yeah, AF.INET, AF.INET6, clearly this is what was meant to be

1579300874
andrewrk
sorry, above I meant to say "changing AF_ constants to enums ..."

1579300879
daurnimator
let me try and pick out a possibly more controversial one.. hmmm

1579300898
andrewrk
errno might be a good example

1579300907
andrewrk
are the names even consistent across all platforms?

1579301158
daurnimator
What do you mean?

1579301172
daurnimator
Different OSes share some errnos, but also have their own

1579301196
daurnimator
each os/bits/<os>.zig would have an enum for that OS.

1579301235
andrewrk
hmm, that might work out quite nicely. does that even have to be non-exhaustive?

1579301251
andrewrk
I suppose so

1579301278
fengb
If we don't, then a kernel update can potentially break Zig userland

1579301338
andrewrk
yes that's correct, since the errno listings does not cover the full range reserved by syscalls

1579301354
andrewrk
until I checked just now my memory was fuzzy about whether or not all the errno values were reserved with names

1579301408
daurnimator
actually, I'm not sure what range is reserved by syscalls on different OSes.... linux reserves 4096. what do others do?

1579301431
andrewrk
wasi has actual c_int return types

1579301458
andrewrk
apologies, it's u16

1579301574
fengb
So we can be silly and do Errno = enum(u10)?

1579301713
daurnimator
fengb: why u10? and why silly?

1579301745
fengb
I can’t maths. It’s u12

1579301799
andrewrk
fengb,

1579301808
fengb
logically that caps at 4096 but it’s ABI unfriendly

1579301833
andrewrk
it works fine in practice because u12 implicit casts to the larger unsized integers

1579302086
daurnimator
fengb: so yes: I'm proposing we write: Errno = enum(12) { PERM = 1, NOENT = 2, ....., HWPOISON = 133, _ };

1579302522
andrewrk
I support this endeavor

1579302537
andrewrk
let's see how it ends up looking in the os.zig layer

1579302553
andrewrk
I suggest to do errno alone

1579302565
andrewrk
I mean separately than e.g. AF_* and others

1579303967
fengb
How was the lawyer meeting?

1579304115
andrewrk
it went well. she answered my questions and I feel I have a good understanding of each of the paths forward: Independent not-for-profit organization vs joining SFC or similar

1579304138
andrewrk
I'm going to give it the weekend to mull it over, and then pick a path

1579304198
andrewrk
estimated $5,000 USD cost to get from zero to 501(c)(3) status

1579304241
andrewrk
but then we would have an official organization, and a united states Tax Identification Number, which is elligible for charitable donations. that's

1579304284
andrewrk
it would enable applying for grants for example

1579304439
andrewrk
I've also been thinking about governance structure

1579304544
andrewrk
I think after 1.0.0 is established, I'd like to set up a governance structure for the zig project and the organization that runs itself without me. Basically once it's stable, reduce everything to "maintenance mode". No surprises, no "let's go crazy and make zig 2.0", just steady bug fixes and dilligent project maintenance

1579304575
shakesoda
passing the bus test would certainly be great for having confidence in it as a tool to rely on

1579304612
andrewrk
yeah, I think we're getting closer to there

1579304620
tane
andrewrk, what's your estimate on 1.0.0, in terms of years?

1579304634
kristoff_it
I was about to ask the same question

1579304648
andrewrk
I estimate 2 years

1579304655
kristoff_it
too short of a timeframe means that you don't leave much space to revisit design decisions

1579304680
companion_cube
andrewrk: the rust people are looking at the same thing and they're considering doing it outside the US :)

1579304686
andrewrk
but I also think that as we get closer to 1.0.0, we can change the release structure from this 6 month thing, to a release cycle that is closer to what it will be post-1.0

1579304688
companion_cube
(given the foreign policies of the US it makes sense)

1579304714
andrewrk
that seems smart, but that might be too difficult for me to do with my financial resources

1579304727
companion_cube
is there no one in germany here? :D

1579304783
wilsonk
what are the benefits of doing it in Germany vs US?

1579304795
andrewrk
as zig stabilizes, the releases will become more reliable and will resemble post-1.0 releases

1579304825
andrewrk
basically the point of 1.0 is that you stop breaking stuff; but even if you are allowed to break stuff, as the language and std lib get "finished" then stuff naturally stops breaking

1579304874
andrewrk
so you'll know that zig is starting to stabilize and become more reliable when you see the first bug fix release (e.g. 8.0.1)

1579304884
andrewrk
oops, I meant, e.g. 0.8.1

1579304897
companion_cube
wilsonk: not blocking people from countries the US doesn't like

1579304942
andrewrk
I would consider myself to be a global citizen first, and a US citizen second

1579304957
companion_cube
(see recent events where people in Iran were basically blocked from all US-based cloud services, ie... most of them)

1579304973
companion_cube
that's very laudable andrewrk

1579304978
companion_cube
(btw you're in NYC right?)

1579305000
andrewrk
yes I currently live in NYC but planning to move within 1 year. my gf is pursuing a PhD

1579305019
tane
OT: anyone going to FOSDEM in a few weeks?

1579305032
andrewrk
I wish. I have a prior commitment

1579305038
companion_cube
oh, moving to where?

1579305046
companion_cube
(PhD is a big challenge, good luck to her)

1579305058
andrewrk
it depends on where she gets accepted, but hopefully california

1579305075
companion_cube
ah well, more sun for y'all

1579305080
companion_cube
more advocado toasts

1579305085
andrewrk
haha

1579305116
wilsonk
companion_cube: ah, ok I see

1579305196
companion_cube
(that said, 501c3 are nice)

1579305223
wilsonk
andrewrk: my identical twin brother did his PhD for years at USC  (back and forth to Japan also, but all the scholarships were from USC). Beautiful out there :)

1579305293
andrewrk
oh neat! that's the one we're hoping she gets into :)

1579305301
wilsonk
he could choose between Columbia and USC (or wait one more year for Harvard)...and ended up at USC because of the weather and we have friends there

1579305314
andrewrk
it's close enough to SF to make it to the LLVM conferences, at least

1579305372
wilsonk
Yeah, sweet

1579305403
companion_cube
what'd her ideal PhD be about?

1579305533
andrewrk
urban sustainability. e.g. making cities more resilient to climate change

1579305565
companion_cube
that's pretty cool.

