1591920294
leeward
I knew it had to be something simple. For some reason my searches weren't finding it.

1591921756
leeward
andrewrk: Trying to build an SDL application with host x86-64-linux-gnu and target x86-64-windows-gnu, I got "undefined symbol: __declspec(dllimport) timeBeginPeriod" Is that one of those symbols you were talking about?

1591927758
skrzyp
Hello, has anyone explored the TUI interface programming in Zig language? Are there any libraries, or even already made TUI (full-screen terminal) programs?

1591927767
skrzyp
I'mc

1591927819
skrzyp
I'm considering doing something between 'dd' and 'partimage' with Zig, but generally described as 'dd with status window and sendfile()/zerocopy support'

1591929380
leeward
skrzyp: You can always just use ncurses.

1591929392
skrzyp
of course I can

1591929474
skrzyp
but, you know, ncurses gets quite old in the world of fancy modern terminals, and it's not cross-platform (many UNIX variants use their own curses impleentations and so on)

1591929503
skrzyp
I was thinking more about termbox or even some "immediate" approach to terminal drawing

1591929652
leeward
I don't know of anything in the standard library, but any library that's written in C is likely to work with Zig. Most work right out of the box.

1591929726
shakesoda
barring the macros at least

1591929747
shakesoda
macros frequently encounter translation bugs

1591929773
leeward
Simple macros work, but...complex stuff is different.

1591929780
shakesoda
well, lots of simple ones fail too

1591929794
shakesoda
they're just still pretty unreliable

1591929814
shakesoda
i've had to fight with them a fair bit working with lua and sdl

1591929838
skrzyp
mhm

1591929841
skrzyp
nice to know about macros

1591929865
shakesoda
simple #define A 1234 macros are just fine, to be more clear

1591929895
shakesoda
macros with parameters tend to find ways to break and you have to write your own function to do what they do.

1591929941
shakesoda
otherwise, for normal c code, the thing to watch out for is passing and returning structs by value - that's the only gotcha i'm aware of

1591929973
shakesoda
unless something has changed in the last month with this, at least

1591930135
leeward
Well, there was a translate-c bug fixed relatively recently.

1591930148
leeward
I don't remember what it was though.

1591931156
pmwhite
Is anybody doing backward iteration over arrays?. It's not too common, but when I need to do it, it always feels more awkward than I'd like. Has anybody ever proposed reverse for-loops?

1591931181
shakesoda
i do backwards iteration frequently

1591931263
pmwhite
What's your usual strategy? It's awkward with unsigned indices, so i'm using an isize.

1591931378
shakesoda
just basic var i: usize = N; while (i > 0) : (i -= 1) { ... }

1591931427
leeward
That will skip the last item if it's at index 0.

1591931458
shakesoda
adjust as needed :)

1591931495
leeward
Also viable: j = len-i

1591931497
shakesoda
i've been writing this pattern in haxe lately, not zig, so the form has been i-- > 0

1591931529
shakesoda
which is slightly different.

1591931577
shakesoda
i really like lua's solution here of the for loop having a step argument

1591931584
shakesoda
i don't screw those up.

1591931633
ttmrichter
Haxe is from the Neko guy, right?

1591931650
shakesoda
lua reverse for: for i = #table,1,-1 do ... end

1591931668
shakesoda
same as a regular one but you swap the start/end and step with -1

1591931701
shakesoda
ttmrichter: neko is one of the haxe things yes

1591931739
shakesoda
i've been using their newer thing, hashlink, for quite a while now

1591932022
pmwhite
shakesoda: I'm doing `var i: isize = N; while (i >= 0) : (i -=1) { ... }` because what you showed doesn't reach the 0 index I believe.

1591932043
pmwhite
The annoying thing is that you can't index arrays with an `isize`

1591932093
shakesoda
could also decrement i inside of the { instead of with the : ()

1591932314
pmwhite
that would be the same though. I'm trying `while (true) : (i -= 1) { ...; if (i == 0) break; }`, which allows i to be a usize.

1591933036
daurnimator
^ that's what I've used

1591933126
pmwhite
it would be kinda nice to have a `rof` keyword or something that does the same thing.

1591933141
pmwhite
maybe it's not a major enough thing to include.

1591933167
shakesoda
i don't think it justifies a keyword

1591933175
daurnimator
i think we need an iterator protocol

1591933239
pmwhite
shakesoda: probly right about that. I wonder if there is another way to make that simple enough.

1591933277
shakesoda
clearly, we need another syntax tacked on as hellish as the : (foo) is

1591933278
shakesoda
;)

1591933695
pmwhite
lol

1591934846
leeward
@reversed()?

1591934882
pmwhite
Like `@reversed(array)`?

1591934891
leeward
yeah

1591934904
pmwhite
Or `@reversed(for) (array) ...`, lol.

1591934946
leeward
for (@reversed(array)) |tnmele| {}

1591934956
leeward
I can't lleps

1591935000
leeward
Though really, in iterator protocol would make it easy to do in a pure Zig library.

1591935008
pmwhite
Would @reversed(array)[0] == array[array.len - 1]?

1591935064
leeward
That would make sense. Actually, if it just translates the indices, it wouldn't be hard.

1591935072
pmwhite
Iterators would have worse performance, though.

1591935084
leeward
Not necessarily.

1591935114
pmwhite
How about this, then. Iterators would be harder to reason about.

1591935137
leeward
If it just has 1 usize for state and a "next" method, it's not worse than doing it manually with a while loop.

1591935210
pmwhite
It would still be worse than array looping, though, right? I haven't thought to deeply about it.

1591935239
leeward
I don't see why it would be worse.

1591935346
leeward
I think iterators will be useful regardless; lots of standard library data structures already provide something.

1591935405
pmwhite
Would the usize and next method be on an Iterator struct? If each next method modifies the Iterator struct, then you are writing to memory more than if you just increment a loop register, which is what I'm imagining is happening with array looping.

1591935594
leeward
Iterator.next() is small enough to fit in icache, or inlined since Zig does LTO, and the usize will fit in a register. Maybe without any optimizations it would be slower, but speed doesn't matter in that case.

1591935646
leeward
At least, usize will fit in a register if 5185 is accepted.

1591935854
pmwhite
So, if I made a userland iterator for arrays, would that be just as good as a for-loop?

1591935929
pmwhite
If so, then I imagine the same would be true for a reverse-array iterator.

1591935965
leeward
Only one way to find out.

1591936029
pmwhite
Look at output assembly? I think I will leave that for another day, since it's late. If you want to do it, be sure to let me know what you find.

1591936060
leeward
I will if I do.

1591936069
leeward
It is late though.

1591936601
fengb
Hmm, my tests stopped running. Might be a compiler bug :(

1591936633
fengb


1591940565
Tharro
Can I assume there is not penalty in using defer to increment in a loop to be able to exit the body of the loop? E.g. is while(i < 1) { defer i += 1; if (condition) continue; } as efficient as while (i < 1) { if (condition) { i += 1; continue; } i += 1; }.

1591940787
Tharro
*no penalty at runtime

1591941145
daurnimator
Tharro: yes. though it means e.g. an error in the loop body does an increment....

1591941446
Tharro
Ok. Makes sense, I'll keep it in min, thanks.

1591941457
Tharro
*mind

1591952996
Snektron
<pmwhite "Is anybody doing backward iterat"> var i = N; while (i > 0) { i -= 1; ... }

1591959064
ask6155
Hello!

1591959224
ifreund
o7

1591959607
ask6155
How do I read Stdin do I get a file descriptor and read it as a file as in std.io.getStdin?

1591959640
ask6155
but there's also std.os.read which takes fd which is an i32

1591959671
alexnask
The std.os functions are low level

1591959682
alexnask
I would recommend using the reader/instream interface

1591959761
ifreund
std.io.getStdIn().inStream()

1591959777
alexnask
So e.g. `const reader = std.io.getStdin().reader();` then you have functions like readAll, readUntilDelimiterOrEof etc

1591959803
alexnask
(this assumes master, Reader is the new name for InStream although you can still use inStream for now)

1591959944
ask6155
but there's also std.os.read which takes fd which is an i32

1591959949
ask6155
oops

1591960066
ifreund
std.os.read is a thin wrapper around the syscall

1591960115
ifreund
unless you have an unusual use-case the higher level std.fs.File interface will be sufficient and nicer to work with

1591961185
ask6155
uhh why doesnt this work

1591961188
ask6155
const stdin_text: []u8 = undefined;

1591961189
ask6155
const stdin = std.io.getStdIn();

1591961189
ask6155
_ = try std.fs.File.read(stdin, stdin_text);

1591961373
ifreund
ask6155: your slice isn't pointing to anything

1591961398
ifreund
var buf: [1024]u8;

1591961410
ifreund
std.fs.File.read(stdin, &buf);

1591961449
ifreund
there's also a readFileAlloc function

1591961904
ask6155
std.fs.File.read only fills the buffer the rest of the text goes to the next stdin

1591961914
ask6155
isn't that bad?

1591961986
ask6155
like if i overflow the buffer the text after the buffer length gets cut off and sent to stdin of my shell and gets executed.

1591962505
ifreund
yeah, buffer overflows are generally a bad thing

1591962549
ask6155
is there a fix for this?

1591962556
ifreund
use a bigger buffer?

1591962563
ifreund
read only 1024 byte?

1591962584
ask6155
how do I read only 1024 bytes>

1591962678
ifreund
i think the easiest way is to use an InStream

1591962778
ask6155
std.io.instream or std.fs.File.inStream?

1591962802
alexnask
the File.inStream returns an io.InStream

1591962803
ifreund
File.inStream() returns an std.io.InStream

1591962821
shakesoda
i can't be the only one who thinks the stream apis are confusing

1591962851
shakesoda
every time i get into anything with them i feel like i'm chasing stuff all over the place to figure out wtf to do

1591963367
donaldallen
Can someone please explain to me why      var foo:[3]*const [3:0]u8 =.{"foo", "bar", "baz"};    warn("foo: {}, {}\n", .{@TypeOf(foo), foo[0]});

1591963387
donaldallen
results in this: foo: type, foo

1591963424
donaldallen
I'm specifically asking about the result of @TypeOF.

1591963492
donaldallen
I am using the latest download on FreeBSD.

1591963526
shakesoda
if you use another type there what do you get?

1591963535
shakesoda
i32, or the name of some struct or something

1591963554
shakesoda
i would expect those to also say type if nothing is afoot

1591963580
shakesoda
and their proper names otherwise

1591963606
donaldallen
I would expect @TypeOf to produce the type of foo, which in this case is [3]*const [3:0]u8

1591963625
shakesoda
you might want @typeName

1591963691
alexnask
@TypeOf returns the type, but the format package prints out `type` for any type value

1591963763
donaldallen
Yep -- thanks. this is part of a test program I use to sort out zig questions and I've printed types elsewhere in the program -- and used @typeName(@TypeOF). Forgot about it here. Thanks.

1591963898
ask6155
what is built.endian?

1591963921
shakesoda
the target endianness

1591963953
shakesoda
most systems you'll encounter will be little endian, in case you're unfamiliar.

1591963991
ask6155
is this value given by the compiler?

1591963994
shakesoda
big endian was popular in a lot of older machines (powerpc, etc)

1591964002
shakesoda
yes

1591964676
ask6155
How do I get values from the arg iterator

1591964730
ifreund
call next() or nextPosix()

1591971129
fengb
Ah big endian. Killed by x86 :P

1591973910
leeward
ARM can run big endian, but nobody does.

1591973942
fengb
Even POWER supports little endian now

1591973953
leeward
I once worked on a PPC microcontroller with a little endian USB peripheral. It was not well thought out.

1591974270
shakesoda
fengb: isn't every modern power machine running LE?

1591974272
shakesoda
this is also true of mips

1591974305
shakesoda
there are still some stragglers of machines that technically sometimes are BE, it's just really uncommon

1591974321
shakesoda
but hey, programming old machines exists.

1591974347
leeward
There's always 68k

1591974394
companion_cube
endianess only matters when serializing, anyway, right?

1591974455
pixelherodev
Or emulating ;)

1591974455
leeward
It matters for debugging.

1591974458
pixelherodev
or compiling

1591974503
leeward
"only" implies that's not a thing that gets done all the time.

1591974524
fengb
Yeah, I meant that the last holdout POWER has given up :P

1591974536
leeward
Every bit that goes on a network or into a log.

1591974564
leeward
I'm amazed that an IBM processor has gone little endian. They were hard core about big endian.

1591974585
pixelherodev
Why?

1591974589
pixelherodev
That's a stupid thing to care aboujt

1591974590
pixelherodev
about*

1591974593
leeward
Bit 0 was the MSB in the PPC manuals.

1591974611
leeward
I'm not saying they cared a lot, just that they didn't take half measures.

1591974622
fengb
I think they realized they'd be even more irrelevant if they don't switch

1591974661
companion_cube
leeward: well, hopefully, serializing directly into binary isn't something you do every day

1591974683
companion_cube
or rather it's done via a library that uses the proper _le/_be functions for dumping integers onto a stream

1591974714
fengb
I don't bother in my emulator :P

1591974727
fengb
Mostly because BE is totally hosed trying to do anything >_>

1591974734
leeward
companion_cube: I used to work on network devices. Basically all of our data was big endian.

1591974762
leeward
When we switch from ARC to Tilera, there was pain.

1591974784
companion_cube
ah, I guess it's different domains indeed :D

1591974810
companion_cube
still, I wouln't like to read an int without specifying its endianess anyway

1591974817
leeward
The fun part is when a layer 7 protocol has little endian data over a big endian transport. BLE does that.

1591974847
ifreund
don't forget to call htonl and ntohl kids

1591974864
leeward
iBeacon is little endian, but BLE isn't. Or maybe it's the other way around? I forget.

1591974870
ifreund
unless you're in the mood for some fun

1591974884
jaredmm
As someone who deals with IBM on a daily basis, it is always fun to hear them called irrelevant.

1591974908
leeward
I was calling POWER irrelevant.

1591974927
leeward
Not that I'm saying IBM is relevant. They're not relevant to what I do, but I've never worked for a bank.

1591974941
fengb
Remember the previous gen consoles where IBM looked like they'd stage a comeback?

1591974993
leeward
I miss PPC. It had some great stuff and x86 is a trash fire.

1591975029
fengb
x86 is successful because it's a trash fire

1591975040
leeward
I know, and it makes me sad.

1591975051
companion_cube
fengb: s/x86/a lot of things/ :p

1591975055
jaredmm
I work in the past, where you still year z/OS, DB2, and iSeries daily.

1591975080
fengb
Hell, Intel tried burning it to the ground. Then AMD staged a coup :P

1591975087
leeward
Mmmm, DB2

1591975091
leeward
Yeah, itanium didn't suck.

1591975109
leeward
Well, except as a business decision. AMD exploited the heck out of that.

1591975113
shakesoda
itanium didn't even try to make itanium exist outside of servers

1591975118
shakesoda
* intel didn't

1591975129
shakesoda
i always wanted an itanium machine :(

1591975163
leeward


1591975164
shakesoda
i'm pretty happy with arm, though. very much interested in the rumored upcoming arm macs

1591975170
leeward
$14

1591975189
shakesoda
leeward: well, sure, but i'd also need a machine around it

1591975220
shakesoda
and even linux has dropped it :D

1591975221
fengb
RISCV or bust

1591975233
shakesoda
i am interested in riscv in the future

1591975233
leeward
There's a 1U server for $500

1591975234
fengb
Does NetBSD run on Itanic?

1591975235
jaredmm
In some ways, I wish that Apple would switch to ARM, then Lakefield would pop out and be better.

1591975241
leeward
NetBSD runs on everything.

1591975253
shakesoda
jaredmm: they're expected to be doing exactly that this/next year

1591975270
shakesoda
lol, itanic

1591975280
shakesoda
an apt name

1591975299
pixelherodev
RISC-V? boo

1591975303
pixelherodev
RISC-VI!

1591975326
ifreund
6 instructions instead of 5?

1591975330
pixelherodev
Whoa whoa whoa

1591975333
ifreund
:D

1591975335
pixelherodev
You can actually get Itanium?

1591975343
shakesoda
yeah

1591975344
pixelherodev
ifreund: ha-ha. So funny.

1591975352
shakesoda
just nothing that runs on it. except netbsd.

1591975355
pixelherodev
lol

1591975375
fengb
... I was laughing at "dominate" and now my coworkers think I have a kink

1591975388
leeward
You're near coworkers?

1591975392
shakesoda
fengb: good

1591975398
leeward
I haven't been to the office in 2 months.

1591975402
fengb
I'm not sure I should tell them "No, I just get amusement about LLVM dominating all usages"

1591975402
shakesoda
run this joke/assumption into the ground

1591975414
shakesoda
it's way funnier

1591975416
pixelherodev
^

1591975417
pixelherodev
For sure

1591975445
pixelherodev
Then, in six months, casually refer to the LLVM thing and watch their brains just stop

1591975445
fengb
"I'm too nerdy to be kinky"

1591975467
shakesoda
that statement doesn't make sense at all!

1591975469
fengb
Was on a conference call. Someone mispelled dominantHand as dominateHand

1591975474
jaredmm
shakesoda: I heard that there was (another) ARM Mac rumor, but I haven't heard any strong rumblings that Lakefield will actually be an x86 competitor to ARM.

1591975475
shakesoda
you'd just have extremely nerdy kinks.

1591975495
pixelherodev
shakesoda: nah

1591975501
pixelherodev
"I'm too nerdy to have time for kinks"

1591975502
pixelherodev
FTFY

1591975513
shakesoda
there's always time for kinks

1591975520
shakesoda
your kink just might be faster compiles

1591975536
pixelherodev
Do you know how many LoC I can write in a minute?

1591975551
pixelherodev
I mean that's a terrible metric

1591975552
pixelherodev
but still

1591975608
shakesoda
imagining right now: dirty talk about cache optimal data structures

1591975660
companion_cube
in french you don't have to go that far: even "string" and "byte" are funny

1591975661
shakesoda
the kink where it's not just your optimization which is premature!

1591975666
shakesoda
i will see myself out for that one

1591976454
DrDeano
andrewrk, I was able to fix my problem, The issue was I was using and arraylist and calling span() to get the argv for the process to run, when I changed this to toOwnedSlice(), it didn't throw the OOM

1591976557
ifreund
weird

1591976659
DrDeano
I know right, idk whether it is to do with that the items in the array list wasn't initialised and when calling span return the items and other memory with garbage

1591976759
ifreund
one thing to note is that ArrayList.span() is deprecated, you can just use the .items field directly now

1591976798
ifreund
toOwnedSlice() will reallocate the memory to the exact size of the slice if the ArrayList had larger capacity, maybe that has something to do with it?

1591977186
afontain_
(span() being deprecated) ah, well, that's good to know

1591977198
afontain_
I was using it simply because that's what the doc uses

1591977203
pixelherodev
whoops

1591977207
pixelherodev
docs out of date again :P

1591977257
ifreund
afontain_: link to the doc? i'm bored I might as well fix it

1591977262
leeward
I think that one was in the 0.6.0 release notes, but yeah. It should get fixed.

1591977352
ifreund
found one mention in the core docs for master

1591977420
afontain_


1591977430
afontain_
"Use span instead of slicing this directly, because if you don't specify the end position of the slice, this will potentially give you uninitialized memory."

1591977444
afontain_
about the items field ^

1591977471
ifreund
yeah, that's what the old comment said before the source was updated

1591977486
leeward
Speaking of doc fixes, #5590

1591977488
ifreund
i guess the std docs need to be regenerated but I don't know how that works

1591977506
afontain_
I don't know how docs are generated tbh

1591977511
leeward
ifreund: Yeah, nobody seems to know.

1591977556
afontain_
there is technically one mention of span() in the master doc (

1591977558
leeward
There's a -femit-docs switch, but I'm not sure exactly how it gets used to generate the stuff in the std documentation.

1591977713
ifreund
oh, I just opened a PR updating that example

1591977731
ifreund
it still makes sense with .items I think

1591977748
leeward
Better docs are better.

1591977931
ifreund
i think this might be one of those things that isn't worth implementing well in stage1 and will wait for stage2 to get farther along

1591978046
leeward
Are we still talking about ArrayList.items?

1591978067
ifreund
oh I'm talking about std docgen

1591978129
ifreund
there seems to be something built into the stage1 compiler for it, but I'm not 100% sure what it does

1591978181
leeward
ah

1591978578
pixelherodev
Hmm

1591978580
pixelherodev
```Carefully chosen undefined behavior. For example, in Zig both signed and unsigned integers have undefined behavior on overflow, contrasted to only signed integers in C. This facilitates optimizations that are not available in C.```

1591978589
pixelherodev
I think this is inaccurate

1591978605
pixelherodev
Isn't it more that we explicitly

1591978618
pixelherodev
Ahh right, this is probably from before the UB -> Illegal switch

1591978626
pixelherodev
terminology switch*

1591983421
pixelherodev
Going to finally get back to stage2 in the next few days :)

1591983453
pixelherodev
The emulator for showtime is now Good Enough TM, so I just need to finish a few changes in other projects and then I can get the error tests done

1591983457
pixelherodev
Then, function calls! :)

1591983461
pixelherodev
With arguments!

1591985369
leeward
Why can't they get along? Why must the functions be arguing all the time?

1591985541
bsrd
Hi! Has anyone tried importing picohttpparser? Getting

1591985555
pixelherodev
leeward: well, why must six be afraid of seven?

1591985561
pixelherodev
Some things are just meant to be

1591985576
leeward
I suppose.

1591985587
pixelherodev
Though then again

1591985592
pixelherodev
I mean we know that one

1591985595
leeward
I mean 7 earned it.

1591985599
leeward
Cannibal.

1591985599
pixelherodev
What? No.

1591985604
pixelherodev
6 * 7 = 42

1591985609
pixelherodev
Six just can't handle responsibility.

1591985614
leeward
hah

1591985615
pixelherodev
bsrd: I haven't tried that, sorry

1591985638
bsrd
Does pointer arithmetic on c pointers work?

1591985640
pixelherodev
What OS are you on?

1591985645
pixelherodev
I thinkso

1591985649
pixelherodev
s/thinks/think s

1591985660
bsrd
Void Linux

1591985673
pixelherodev
std.net should work on Linux

1591985697
bsrd
Have no issue doing basic unix socket stuff.

1591985700
pixelherodev
I'm assuming picohttp works in C code?

1591986032
ifreund
pointer arithmetic works fine, but you shouldn't really use [*c] pointers in your zig code

1591986057
ifreund
they coerce to whatever zig pointer you want, e.g. [*] if you want to do pointer arithmetic

1591986319
leeward
There is a reason why C pointers aren't listed in the "pointers" section of the docs.

1591986446
pixelherodev
C pointers are for translated code only, really

1591986517
leeward
And only auto-generated translated code, at that.

1591986754
leeward
Hmm, I wonder if some day we'll be able to put translation hints in our .h files to make it so a Zig translator can tell if a pointer is actually a [*:0]

1591991925
FireFox317
andrewrk or somebody else, so we had this issue with some guy saying that zig cc is not working on arm32 (#5572). It segfaults immediately in DepTokenizer.next(). I looked into it, and it has something to with a c interop thing. in stage2.h we define stage2_DepTokenizer with a void * to a handle. Now in the zig equivalent code it is an extern struct with a pointer to the actual DepTokenizer struct. I think this is causing a segfault,

1591991926
FireFox317
but i dont know enough about c void* (alignment etc) to know exactly what is going on.

1591994403
andrewrk
FireFox317, I don't see a mismatch here

1591994425
andrewrk
it looks like it is a struct in both places

1591994513
andrewrk
all pointers have the same ABI

1591994527
FireFox317
hmm okay

1591994986
dch
found

1591995010
dch
bonus points for pixellated fonts it seems appropriate

1591995278
andrewrk
dch, you thinking about doing a talk? :)

1591995326
dch
well if you imagine somebody who hasn't written any C in mmm almost 20 years ... not sure if it would advance the world's understanding of low level programming

1591995352
dch
but I have my computer set up now for livestreaming so I might have a crack at streaming my first zig-stumbles

1591995386
fengb
I’m a dirty JS programmer pretending to understand low level

1591995434
dch
fengb: I'm an erlang programmer who likes understanding the layers below. it's turtles all the way down AFAICT

1591995484
FireFox317
okay andrewrk, it seems like OOM is not handled in the stage1 compiler right? That is basically what is happening when trying to use `zig cc` on a rapsberrypi :P

1591995586
andrewrk
FireFox317, it's handled by panicking - a segfault is still surprising

1591997004
leeward
dch: How did you pull off being an Erlang programmer? I keep running into walls at places because "it's weird."

1591997079
dch
honestly its the first programming language since z80 & 6502 assembler that really made sense to me. I've since dabbled in ocaml, but no decent concurrency story so I didn't really do much.

1591997123
dch
leeward: its a sweet spot between concurrency, distributed systems, functional programming, without shoving functors and monads in your face all the time.

1591997128
leeward
Sure, but you found jobs somewhere? I guess I've tried converting employers; never actually looked for people hiring for Erlang.

1591997185
leeward
dch: You don't have to sell me on it. It's one of my favorite languages; I've just never had an employer willing to pay me to write in it.

1591997190
dch
yep. it helps to have some community links, and be familiar with some of the main apps (rabbitmq, couchdb, riak ...), and elixir & phoenix are very very nice

1591997265
dch
remote work is tricky, its much harder to find the right mix of tech & culture

1591997366
leeward
I mostly work on embedded stuff, so pure remote work is off the table. Shipping hardware and lab equipment around is too much time and effort.

1591997425
dch
I actually ran into zig while looking for a safer way to integrate NIF code into erlang, I wanted to see if I could use FreeBSD jails & capsicum with erlang.

1591997722
andrewrk
you know about that erlang nif project, right? just checking

1591997730
andrewrk


1591997734
dch
yep its very cool

1591999653
dch
ifreund[m]: just watched your zig show talk, nice to have somebody walk through the C -> zig stuff. tyvm.

1592001274
gonz_
leeward: If one's in the market for a backend job Erlang can hide around almost every corner. I think a persistent but plenty ephemeral service like online soft real-time ones usually are will have a higher hitrate than anything else.

1592001303
gonz_
Erlang is one of the languages I think has less job ads than it has users, out of proportion.

1592001438
gonz_
There are two positions in all of Bulgaria (that seem credible), down from 4 when I searched back in ~2015.

1592001453
gonz_
One of them is Bet365, this one would be your prototypical Erlang job

1592005197
leeward
gonz_: Interesting. Maybe that's what I'll do when I retire.

1592005395
ifreund
dch: glad you enjoyed it!

1592005407
leeward
(where by retire I mean stop with the full time job)

