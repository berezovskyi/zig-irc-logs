1603332353
DonnieWest[m]
Silly question here from a zig/C newbie. I'm trying to call this function zig-side

1603332437
DonnieWest[m]
And perhaps more importantly, where could I read up on that?

1603333297
ryuukk_
does anyone have good examples how to do interface? this is confusing

1603333300
jayschwa
DonnieWest: I'm just guessing, but have you tried something like this: var err: [*c]u8 = 0; the_function(text, &err);

1603333539
DonnieWest[m]
jayschwa: that does the trick. Thanks!

1603337492
ryuukk_


1603337502
ryuukk_
i don't understand how can this be called "interface"

1603337738
ryuukk_
i feel like something zig is auto limiting itself to not add new syntax, the result to solve common problems become an unreadable and unmanageable mess

1603337742
ryuukk_
sometimes*

1603337785
justin_smith
ryuukk_: how do you define interface?

1603337828
ryuukk_
i would have expected to be as simple as GO at least

1603337869
justin_smith
so "how can this be called interface" wasn't a question, it was a complaint?

1603337900
ryuukk_
a little bit of both to be honest

1603337929
ryuukk_
compare with GO

1603337930
justin_smith
well "how do you define interface?" "I expect something simpler" - I have no follow up for that

1603338093
ryuukk_
that is what i expect from modern language, go or rust type interface

1603338111
ryuukk_
not all that confusing code in the zig interface link above

1603338149
ryuukk_
it just asks for bugs and hard to maintain code

1603338212
ryuukk_
just like enum, i expect something in the same vein for interfaces

1603338261
ryuukk_
it feels like inconsistent, on one hand you have nice features that simplify your life, on other you do job of a compiler

1603338300
justin_smith
if I'm reading the zig and go examples correctly, in the go example you implement the functions at the top level of the file, in the zig version the functions are inside a data structure

1603338304
ryuukk_
i picked zig recently, maybe there are some things i don't understand and that doesn't clic yet, but it's becoming frustrating tbh

1603338345
jayschwa
The current interface pattern is not set in stone.

1603338382
justin_smith
jayschwa: but it's just a convention right? a struct with a member of a given name with a shared function signature

1603338407
justin_smith
you could do the same thing in c, scheme, whatever

1603338470
ryuukk_
no, in zig you have more code to time, duplicates, function pointers, @parentPtr thing, and u have to take the interface struct as reference from the struct

1603338473
jayschwa
Yep. There are some issues in GitHub for potentially improving the experience by adding feature(s) to the language though.

1603338482
ryuukk_
in go it is simple, u define the itnerface, and implement them for your struct

1603338485
ryuukk_
easy

1603338533
ryuukk_
what the final design will be?

1603338551
jayschwa
It hasn't been decided as far as I know.

1603338633
ryuukk_
i hope they take a look at GO

1603338935
ryuukk_
interface is super common and very helpfull, i find it weird that is not something that was thought earlier and implemented as language feature

1603339707
travv0
note that zig has generics which can fill a similar role a lot of the time

1603339791
travv0
here's the go example in zig without using an interface

1603339816
justin_smith
travv0: right, both are methods of late binding, an interface makes the functions a posession of the object, generics make a new object parameterized by a type plus an instance

1603339823
justin_smith
if I understand correctly

1603339982
ryuukk_
it's not the same travv0

1603340108
ryuukk_
i can't find information on interface not final desin on github

1603340114
ryuukk_
all interface disscussion are closed

1603340136
ryuukk_
i found this, but it's weird tbh

1603340258
travv0
what do you find weird about that? seems like exactly what you want

1603340270
ryuukk_
it's always more typing for nothing

1603340279
jayschwa
Ah, it looks like the status of some of the issues changed recently. My bad.

1603340377
ryuukk_
andrewrk: what is status of interface? do you think it's gonna be something like in GO?

1603340415
ryuukk_
is there more developpers of the language on the IRC we could ask?

1603340804
ryuukk_


1603340809
ryuukk_
looks like it is a nope

1603340815
ryuukk_
hmm

1603340878
ryuukk_
i can't understand the official way to do interfaces will be this

1603340892
ryuukk_
this is a deal breaker to be very honest

1603342205
ryuukk_
maybe i just need to read more examples idk

1603350388
daurnimator
jayschwa, ryuukk_: you should never write [*c] in your own code

1603350441
daurnimator
we considered calling it `[*automatically_translated_from_c_if_you_wrote_this_its_a_bug]`

1603351098
ikskuh
someone broke my windows build again! :D

1603351375
ikskuh
andrewrk: did you change something in regard to window symbol generation?

1603354804
andrewrk
ikskuh, hm nope don't think so. this is a good week to get your project working in master with the release coming up

1603356091
wilsonk_
just testing a new irc client here...want to see if this statement word wraps properly. Sorry for the spam...and on a lighter note I did get a new Ryzen 3600xt system today that seems to be working nicely. Good upgrade from my old one anyways (I tend not to keep up with the cutting edge for my personal machines, because I can usually just use the servers downstairs for most things :) ).

1603356127
wilsonk_
seems to have worked properly in the chat window and input window ;)

1603356460
omglasers2
was thinking of getting a ryzen 3600 but the 5600x will be released next month so was thinking of waiting for it, though the 5600 would probably be a better choice if it releases

1603357729
omglasers2
on windows with zig master I get "error: unable to detect native libc: LibCRuntimeNotFound" for ".\zig libc"; any idea why?

1603358861
ikskuh
andrewrk: i was asking because i had a regression overnight in the cg-workbench CI

1603359662
wilsonk_
omglasers2: just built from scratch on windows and ./bin/zig libc works fine here. Do you have to be in the build dir and not the exe dir?

1603360954
omglasers2
wilsonk_, well, I built zig using this

1603375189
Michcioperz
on 0.6.0 i can't use an array of packed enum(u2) in a packed struct, is this intentional?

1603375228
Michcioperz
(trying to describe a microcontroller register as a volatile pointer to a packed struct)

1603376329
ikskuh
Michcioperz: you cannot use non-abi aligned types in arrays

1603376335
ikskuh
you can use packedintarray though

1603376874
Michcioperz
mmmmh too bad really

1603376899
Michcioperz
last time i had this problem i just manually unrolled the array

1603376930
Michcioperz
but that was avr and it had just 8 pins per register, this has 16 haha

1603376971
Michcioperz
i had to blink a led in c today and it was a terrifying experience frankly

1603377064
ryuukk_
processor.key_down.?(e.event.key_down.key);  key_down is an optional, but it complains: attempt to use null value, doesn't the .? handle that case for me? or i misunderstood what .? is for ?

1603377195
ryuukk_
i don't know how it's called, and .? is hard to google

1603377200
Michcioperz
.? panics if value is null

1603377202
travv0
afaik .? is like rust's .unwrap(), it'll let you use the value if it's not null, but if it is null it'll crash

1603377205
Michcioperz
yes

1603377239
ryuukk_
oh i see, thanks

1603377801
Nypsie[m]
ryuukk_: .? is syntax sugar for `orelse unreachable`. This means in release-fast and release-small this will result in undefined behaviour. I think it will only crash in debug and release-safe.

1603377839
ifreund
well, it may crash if you're lucky. The behavior is truely undefined though

1603377866
ryuukk_
hmm

1603377890
ryuukk_
_ = processor.key_down(e.event.key_down.key) orelse false; it complains: error: expected function, found '?fn(i32) bool'

1603377898
ryuukk_
key_down is function that supposed to return a bool

1603377908
ryuukk_
i'm not sure how to solve this problem

1603377927
ryuukk_
processor is also an optional, but i handle that case already earlier

1603377930
Nypsie[m]
Is this coming from c?

1603377940
ryuukk_
no, it's in zig

1603377954
ifreund
if key_down is optional you can't call it directly

1603377960
Nypsie[m]
What's the signature of key_down? It looks like is an optional

1603377994
ryuukk_
full code of the function

1603378120
ifreund
yes, so you cant do `key_down(key);`

1603378139
Nypsie[m]
key_down is an optional function. So either call it with process.key_down.?() or `const downFn = process.key_down orelse return false; downFn(key);`

1603378144
ifreund
you need to do e.g. `if (key_down) |kd| kd(key) else ...`

1603378155
Nypsie[m]
Or ^

1603378898
ryuukk_
ok it works thanks

1603378921
ryuukk_
if(processor.key_down) |cb| _ = cb(e.event.key_down.key);

1603378922
ryuukk_
vs

1603378923
ryuukk_
_ = processor.key_down.?(e.event.key_down.key);

1603378931
ryuukk_
i find it's harder to read

1603378950
ryuukk_
is there no way to still use .? way but not crash if null instead return a false?

1603378969
ryuukk_
_ = processor.key_down.?(e.event.key_down.key) orself false; <= doesn't work

1603379014
ryuukk_
in c# it would be processor.key_down?.Invoke(e.event.key_down.key) ?? false;

1603379063
ryuukk_
the if methos i have to repeat the variable 3 times, in if, in || and then to use it cb()

1603379104
ikskuh
ryuukk_: .? is really an unsafe operation

1603379129
ikskuh
it will always crash or do undefined behaviour

1603379148
ikskuh
i think "return if(key_down) |kd| kd(key) else false;" is quite readable

1603379162
ikskuh
but the if/capture-construct is unusual at first, true

1603379168
ikskuh
you can also do this:

1603379178
ryuukk_
if makes the switch body very noisy with repeated stuff

1603379179
ikskuh
if(key_down != null) return key_down.?(key);

1603379180
ryuukk_
it*

1603379190
ikskuh
switch is always noisy

1603379209
ryuukk_
with .? it's not noisy

1603379219
ryuukk_
i don't want return value

1603379247
ryuukk_
i will try the != method and see how it looks

1603379268
ikskuh
you can also ignore in all places ;)

1603379285
ryuukk_
wait nvm, it's longer

1603379295
ryuukk_
it's annoying

1603379318
ikskuh
why is it annoying?

1603379340
ryuukk_
having to type more, wich ends up convoluting the entire body

1603379352
ryuukk_
what supposed to be clean and simple method ends up noisy and hard to read

1603379389
ikskuh
hm

1603379396
ikskuh
i don't think "more text" is harder to read

1603379404
ifreund
what about const f = keydown orelse return; f();

1603379409
ikskuh
it's more to type, but that isn't a problem imho

1603379415
ikskuh
i usually type stuff only once

1603379426
ifreund
or what about finding a way to make this thing not optional in the first place

1603379770
ryuukk_
that is a good point

1603379821
ryuukk_
but that would mean rethinking the whole input system, wich i'm not ready to do right now, i just need to move on quickly to iterate faster

1603379856
ikskuh
why iterate faster?

1603380141
ryuukk_
because i don't have time to redo something that works

1603380198
ryuukk_
if i explicitly check for not null, it should not crash .? should let me do something without crash

1603380213
travv0
but that's the whole point of .?

1603380247
ryuukk_
you told me i have to use if(processor.key_down) |cb| _ = cb(e.event.key_down.key);

1603380261
ryuukk_
_ = processor.key_down.?(e.event.key_down.key) orelse { false; };

1603380266
ryuukk_
this is more readable but doesn't work

1603380283
dutchie
orelse is an operator for unwrapping a ?T

1603380288
travv0
because that's not the syntax for safely unwrapping nulls

1603380302
dutchie
it doesn't usually make sense to use orelse and .? at the same time

1603380322
dutchie
if you know rust, .? is .unwrap(), and orelse is .unwrap_or()

1603380332
ryuukk_
why not, if not null do that, or else do that

1603380337
dutchie
you can do that

1603380354
dutchie
if (optional) |wrapped| { do_that();} else {do_something_else();}

1603380357
ryuukk_
i didn't go past 1st day with rust i don't like that language

1603380403
ryuukk_
cb?.Invoke() ?? false;

1603380412
ryuukk_
C#, they solve the problem clean

1603380432
travv0
c# has very different design goals compared to zig

1603380435
ryuukk_
less type, you see what null check it doesn and what else it does

1603380448
travv0
terseness is explicitly not a design goal of zig

1603380498
ryuukk_
that is another thing that held the language back, all that stackup end up with unreadable and noisy code

1603380527
ikskuh
ryuukk_: c# doesn't have optionals, c# has null propagation

1603380532
companion_cube
that's low level languages for you, ryuukk_

1603380533
ikskuh
looks similar, is a 100% different operator

1603380567
ryuukk_
low lever language mean nothing

1603380568
ikskuh
(cb orelse return)(e.event.key_down.key);

1603380573
ryuukk_
compiler and runtime makes it low level

1603380580
ryuukk_
language is syntax that help solve people's problem

1603380582
ifreund
heh, that's a nice one ikskuh

1603380598
ikskuh
you have to operate on the optional, not on the return value of your call

1603380600
companion_cube
well, having a GC makes a lot of things easier, ryuukk_

1603380604
ikskuh
^= this

1603380631
ryuukk_
GC has nothing to do with it

1603380658
companion_cube
oh really.

1603380662
ryuukk_
ikskuh: i don't want return, can i replace with something like "break" ?

1603380668
companion_cube
for example, one thing GC makes much easier: closures.

1603380732
ifreund
ryuukk_: no, false isn't a function

1603380736
ikskuh
ryuukk_: yes, you can break

1603380752
ikskuh
blk: { (cb orelse break :blk)(…) }

1603380762
ifreund
oops I can't read

1603380770
ikskuh
const result = blk: { break :blk (cb orelse break :blk default_value)(…) };

1603380779
ikskuh
which is definitily way less readable than

1603380788
ikskuh
const result = if(cb) |c| c(key) else default_value;

1603380796
ikskuh
which i find perfectly fine

1603380800
ikskuh
as there is control flow happening

1603380803
ikskuh
if you want it or not ;)

1603380805
dutchie
yeah that is the way i'd do it ikskuh

1603380811
ikskuh
the second one?

1603380813
ikskuh
yeah, me too

1603380816
ikskuh
wonderfully readable imho

1603380819
ryuukk_
_ = (processor.key_down orelse break)(e.event.key_down.key);

1603380821
ryuukk_
it works

1603380828
ryuukk_
i prefer this solution

1603380836
ryuukk_
readable, without noise

1603380873
ryuukk_
you read it, you understand what it does, no if, no duplicate, no extra typing

1603380882
ryuukk_
perfect

1603380884
ikskuh
ryuukk_: it breaks your loop

1603380887
ikskuh
not the expression

1603380897
ikskuh
break without block label will always break the enclosing loop

1603380928
ryuukk_
i don't understand

1603380937
ikskuh
so if you do that in your game main loop (which i assume you are coding), you will exit your game on keydown if no callback exists

1603380939
ryuukk_
it'll break the switch case?

1603380941
ikskuh
no

1603380946
ikskuh
you'll break the enclosing loop

1603380947
dutchie
looking back at the original function in

1603380961
travv0
it'll break out of the while loop

1603380961
ikskuh
you will break  while (i < self.processing_queue_C) : (i += 1) {

1603380983
ryuukk_
why is that??

1603380990
ikskuh
because break will break the enclosing loop.

1603380990
ryuukk_
i want break the switch

1603380993
dutchie
why not just `if (processor.key_down) |key_down| key_down(e.event.key_down.key)` with no eles

1603380995
travv0
zig switch statements don't have falltrough

1603380997
ikskuh
give the switch a name

1603381003
ikskuh
zig switches aren't breakable

1603381007
dutchie
else*

1603381011
ryuukk_
dutchie: because i have to type key_down 3 times, i don't want that

1603381019
dutchie
so give it a shorter name

1603381033
ikskuh
just name it "k" or "cb" or whatever

1603381036
dutchie
if (processor.key_down) |kd| kd(e.event.key_down.key)

1603381058
travv0
i think your goals and zigs goals are very different

1603381067
ryuukk_
it's the same dutchie, i have to type the thing 3 times keydown kd kd

1603381071
ryuukk_
it's noise

1603381084
ikskuh
then write a function

1603381087
ikskuh
which does it

1603381096
ikskuh
call_if(key_down, .{ event.foobla });

1603381105
ikskuh
one question:

1603381114
ikskuh
why does your callback has a return value if you don't use it?

1603381184
ryuukk_
i use it but not in EventQueue, the EventQueue is here to forward the events from GLFW callbacks so user can handle them properly

1603381245
ikskuh
okay

1603381248
ryuukk_
travv0: how can readable be against zig's readable goal?

1603381250
ikskuh
was just wondering

1603381262
travv0
i find zig very readable

1603381263
ikskuh
ryuukk_: i think we have different values of readable

1603381278
ikskuh
i dislike any operators that do more than trivial work

1603381294
ikskuh
.? is just "access the enclosed value, ignoring the possibility of null"

1603381298
travv0
i find terseness makes reading things harder.  i have a hard time reading my own null propagation chains sometimes in c#

1603381313
ikskuh
^= yeah, c# can get horribly unreadable in such cases

1603381323
dutchie
ikskuh: .? is more than that imo

1603381324
ikskuh
or even worse: linq stuff

1603381330
ikskuh
dutchie: it isn't

1603381331
dutchie
it's "i know this isn't null, just unwrap it"

1603381338
ikskuh
well, kinda

1603381343
ikskuh
it depends on your view

1603381349
ikskuh
it's "access the value"

1603381356
ryuukk_
"Hello, i am a humain, a humain on earth, a humain on earth with black hair", you can read it, but the intent is not "readable" repetition is noise

1603381359
ikskuh
for release-fast/small, it will just do that and crash

1603381401
travv0
human languages and programming languages are not comparable

1603381402
ikskuh
ryuukk_: did you mean "hello, i am maybe a human. if i'm a human, call me bob. Bob is now doing stuff."

1603381441
ryuukk_
ikskuh: no, null is not type, it to tell if you are here or not

1603381473
ryuukk_
"hello, i am here, i am here on earth, i am here on hearth with black hair"

1603381489
travv0
hello, i am human? call be bob?? i'm not real

1603381560
ikskuh
ryuukk_: "hello, i am here, here is london, london is nice"

1603381570
ryuukk_
Hello, is mike here? tell him to call mum or send him a message

1603381571
ikskuh
if(condition) |declaration| usage

1603381586
ikskuh
you are repeating the condition three times ;)

1603381594
ikskuh
afk

1603381619
dutchie


1603381636
ifreund
I thought your goal was to "iterate quickly" but 30min later your still on the same line of code

1603381654
travv0
dutchie: lol

1603381678
ryuukk_
ifreund: that's what frustrate me

1603381678
ifreund
UB!

1603381690
companion_cube
ryuukk_: have you tried F#? I heard it's good for iterating quickly, and is terser than C# :p

1603381713
ryuukk_
i'd stick with C# if it compiled to native and without a GC

1603381736
companion_cube
but again, if you don't want a GC, some things become harder, at least in all the languages I've heard of

1603381737
travv0
if you don't want a gc then you're gonna have a hard time with terseness

1603381741
ifreund
ryuukk_: there's nothing wrong with most of the many solutions you've been shown over the past 30 min

1603381767
dutchie
* Focus on code rather than style.

1603381775
ryuukk_
ifreund: i know, but it makes things less readable, at least for me, wich is a problem for me

1603381787
Nypsie[m]
Would it be possible to restructure it so `key_down` is not an optional?

1603381807
ifreund
i suggested that 20min ago :D

1603381830
Nypsie[m]
Ah sorry, I'm only looking now and then at the chat.

1603381850
ifreund
ryuukk_: they don't make things less readable, incorrect code doesn't count

1603381861
travv0
but yeah, not having the function be nullable would be the cleanest solution for sure

1603381877
ryuukk_
ifreund: what is incorect code? having to use optionals?

1603381909
ifreund
ryuukk_: the foo.?(key) thing you started with

1603381930
ifreund
which I assume is what you're comparing against for readability

1603381965
ryuukk_
my understanding of that code was: if it is not null, call it

1603381974
dutchie
that part is correct

1603381977
ryuukk_
the else crash is hidden

1603381989
dutchie
no it isn't

1603381994
dutchie
it just crashes or gives UB

1603381994
Nypsie[m]
It's well defined :)

1603382012
ryuukk_
foo.?(key) else false; but it doesn't work

1603382027
travv0
and now we're back to where we started lol

1603382031
dutchie
.? is different to c# null-coalescing

1603382036
Nypsie[m]
Because that's syntatically incorrect

1603382072
ryuukk_
so what's the point of having .? ?

1603382085
travv0
i'm new to zig but i find it useful in tests

1603382089
Nypsie[m]
Shorthand of writing `orelse unreachable`

1603382114
ryuukk_
so i should be able to write, orelse false?

1603382121
ryuukk_
without using .?

1603382126
travv0
no, you can't call false

1603382140
travv0
the function is what's optional, not the result

1603382155
Nypsie[m]
You could read your example as `(foo orelse unreachable)(key)`

1603382156
ifreund
the best way to do this is if (foo) |f| f() else false;

1603382173
Nypsie[m]
^

1603382212
Nypsie[m]
I find the structure a bit odd to be honest. You already know it's the key_down event. Why would the function be optional? (just curious btw)

1603382234
ryuukk_
if(foo) foo(), why is that not possible?

1603382258
Nypsie[m]
Because `foo` is still the optional, and not unwrapped

1603382264
ifreund
how about this, instead of making the function optional have a default that always returns false

1603382271
ifreund
then you can just call it directly

1603382285
ryuukk_
Nypsie[m]: user can register to specific events, so i only forward if he registered to that event type

1603382318
Nypsie[m]
Ah I see

1603382335
Nypsie[m]
So `key_down` is a callback function, defined by the user.

1603382337
Nypsie[m]
Got it :)

1603382342
ifreund
so use a default that always returns false if they don't define one

1603382344
ryuukk_
yes

1603382362
ifreund
then you don't have to deal with the optional

1603382376
Nypsie[m]
Yeah I think that's a great suggestion

1603382422
ryuukk_
what do you mean a default?

1603382446
Nypsie[m]
Define your own callback function that you set, then have it be overriden by the user's if they provide one.

1603382470
ryuukk_
oh i see

1603382472
ryuukk_
hmm

1603382478
ryuukk_
yeah that could work

1603382483
ryuukk_
i'll try and see how it goes

1603389906
dutchie
blargh, was feeling a bit low, thought i'd do something nice for the zig community and make a PR with the changes I had to make to get the sine example on the webpage working on recent compiler versions

1603389911
dutchie
but it got merged months ago! wah

1603390096
dutchie
ah well, maybe i should just go and do something that doesn't involve computers

1603396592
ryuukk__
hmm

1603396594
ryuukk__
error: incompatible types: 'i32' and 'f32'

1603396594
ryuukk__
const deltaX: f32 = -self.engine.input.delta_x * self.degrees_per_pixel;

1603396614
ryuukk__
it points to the *

1603396628
ryuukk__
delta_x is i32

1603396636
ryuukk__
why does it complain here?

1603396656
ryuukk__
i tried to @floatCast delta_x but same issue

1603396694
ryuukk__
error: expected float type, found 'i32'

1603396698
x2C25
gotta use @intToFloat

1603396705
ryuukk__
thanks

1603397747
ryuukk__
return if (value > 0.0) 1 else (if (value < 0.0) -1 else 0);

1603397761
ryuukk__
it complain about 1 0 -1 being compttime_int, but i want to return i32

1603397765
ryuukk__
how can i make this clean?

1603397793
ryuukk__
i tried int cast, as, i32(1) none work

1603397831
ryuukk__
can't compiler figure out what i return from the function return type??

1603397843
ryuukk__
pub inline fn sign(value: f32) i32

1603397849
ikskuh
you have to coerce the first value

1603397872
ikskuh
return if(value > 0) @as(i32, 1) else if(value < 0) -1 else 0;

1603397873
ikskuh
this should work

1603398007
ryuukk__
that's another annoying thing..

1603398016
ryuukk__
it stacks up

1603398017
ikskuh
hm? comptime_int?

1603398023
ikskuh


1603398028
ryuukk__
yes, and having to do that to fix the issue

1603398046
ikskuh
isn't really a problem if you change your code a bit

1603398048
ryuukk__
originally it should look like as simple as this: return v > 0.0 ? 1 : (v < 0.0 ? -1 : 0);

1603398052
ikskuh
you kinda hit the only special case

1603398053
ryuukk__
had to convert to if else

1603398056
ryuukk__
and now add @as

1603398058
ikskuh
it doesn't look simple

1603398061
ikskuh
not at all

1603398064
ikskuh
hard to read

1603398081
ryuukk__
@as(i32) for 1st but not all, what abou this?

1603398094
ikskuh
you give the statement a type

1603398102
ikskuh
which will trigger type coercion

1603398106
ryuukk__
? : is readable

1603398108
ikskuh
which will then make your if runtime-viable

1603398112
ikskuh
nah, definitly not

1603398114
ryuukk__
? is if, and : is else

1603398119
ikskuh
your example is a perfect example for unreadable :D

1603398155
ryuukk__
that's math

1603398168
ryuukk__
anyways, ok for if else

1603398175
ryuukk__
but why i has to @as the 1st and not all?

1603398181
ikskuh
because type coercion

1603398188
ikskuh
it makes the expression i32, not comptime_int

1603398200
ryuukk__
why? pub inline fn sign(value: f32) i32  ask for i32, not competime_int

1603398209
ryuukk__
if i return 1; it should be i32

1603398213
ikskuh
doesn't work for return afaik

1603398221
ikskuh
might be be design, might be a todo in the compiler

1603398247
ryuukk__
if that is by design,then  it is another inconfistency

1603398270
g-w1
I think I heard this somewhere as a todo in the compiler

1603398330
ryuukk__
how can such basic thing stay as todo?

1603398356
ikskuh
it isn't basic

1603398360
ikskuh
type coercion is hard

1603398362
ikskuh
super-hard

1603398410
ryuukk__
if i use language, all i care about is it works as intended, naturally, people doesn't know what being the scene, if i didn't chat with you, i'd be left with a confused mind

1603398418
g-w1
this language is not 1.0 yet

1603398452
ryuukk__
that's valid point

1603398490
ikskuh
you always have to keep in mind that you're still using an alpha product

1603398492
ryuukk__
are you sure it is todo btw?

1603398493
ikskuh
unfinished software

1603398495
g-w1
im not sure

1603399935
ryuukk__
it took me multiple minutes to do a simple multiplication

1603399936
ryuukk__


1603399943
ryuukk__
..

1603400000
ikskuh
you sure your rounding is correct?

1603400099
ryuukk__
i already don't want to touch that part of code anymore

1603400123
ikskuh
but is it correct?

1603400139
ryuukk__
the original code works yes

1603400144
ryuukk__
i ported it from my c++ code

1603400175
ikskuh
doesn't mean it was correct there

1603400180
ikskuh
is truncation the correct rounding mode?

1603400229
ryuukk__
truncation?

1603400288
ikskuh
you're converting a float to an integer

1603400293
ikskuh
with non-integer scaling

1603400301
ikskuh
(otherwise you wouldn't need a float here)

1603400315
ryuukk__
i know, i wanted to highlight the amount of noise @ adds

1603400318
ryuukk__
in comparison:

1603400321
ikskuh
so you get numbers like 3.14 or -2.718

1603400336
ikskuh
which can be cast to:

1603400343
ikskuh
towards-zero: 3, -2

1603400348
ikskuh
towards-inf: 4, -3

1603400353
ryuukk__
??

1603400355
ikskuh
floor: 3, -3

1603400358
ikskuh
ceil: 4, -2

1603400365
ikskuh
which are all correct float-to-int conversion

1603400369
ikskuh
which one do you want?

1603400396
ryuukk__
so you are telling me this is not casting?

1603400428
ryuukk__
how you would translate my c++ code above?

1603400430
ryuukk__
in zig

1603400437
ikskuh
i don't know ;)

1603400462
ikskuh
it probably uses towards-zero/float truncation

1603400479
ikskuh
which is what @floatToInt also does (it cuts of the parts after the comma)

1603400482
ryuukk__
i have no idea, all i want is to replicate the old behavior

1603400484
ikskuh
but is that correct for your code?

1603400533
ryuukk__
(float) my_int

1603400542
ryuukk__
how do you translate that from c++ to zig?

1603400547
ryuukk__
so zig matches c++ behavior

1603400552
companion_cube
@as(f32, my_int) I think?

1603400566
ikskuh
@intToFloat(f32, my_int)

1603400577
ikskuh
also, that isn't good c++ code, it's C code

1603400592
ikskuh
c++ would be static_cast<float>(my_int)

1603400615
ryuukk__
that is what i used, why tell me it's wrong then?

1603400632
companion_cube
ikskuh: oops my bad

1603400646
ryuukk__
or there is something you want to tell me that i don't understand?

1603400674
ikskuh
ryuukk__: i'm talking about @floatToInt

1603400684
ikskuh
so your (int)(…) code

1603400691
ryuukk__
oh

1603400704
ryuukk__
so how you would do (int) my_float in zig?

1603400745
ikskuh
what rounding mode do you want? (i listed them above)

1603400746
companion_cube
it's been answered above

1603400755
ryuukk__
i want same behavior as the C code

1603400766
ikskuh
okay

1603400785
ryuukk__
it's not anwsered, he keep telling me i do the wrong thing

1603400802
ikskuh
ryuukk__: companion_cube was talking to me

1603400811
ryuukk__
oh ok

1603400817
ryuukk__
so i do nothing wrong here?

1603400819
ryuukk__
i'm confused

1603400872
ryuukk__
there should be a @c_cast()

1603400878
ikskuh
floating-point to integer implicit conversion and casts (always towards zero)

1603400880
ikskuh
i found it

1603400881
ryuukk__
so i'm not confused into picking X different things

1603400888
ikskuh
use @floatToInt(…)

1603400894
ikskuh
looks like it's correct

1603400899
ikskuh
does the same as C

1603400908
ryuukk__
ok thanks

1603400928
ikskuh
ryuukk__: zig is about correctness. C just does a thing implicitly, but zig tells you that there might be a problem when you convert float to int

1603400944
ikskuh
as (as explained above) the conversion is ambigious

1603400956
ikskuh
and has four modes that can be used which might be correct in all ways

1603400989
ikskuh
oh, there's also mathematical rounding

1603400996
ikskuh
which rounds to the closest integer part

1603401020
ikskuh
and if that is ambigious, rounds towards the next even number

1603401085
companion_cube
rounding modes are such a nightmare

1603401090
ikskuh
↑

1603401756
ikskuh
ryuukk__: if you want to learn more:

1603401776
ikskuh
float to integer conversion is complex

1603402405
fengb
You can write your own c_cast helper

1603403735
ryuukk__


1603403740
ryuukk__
thanks for help

1603404609
ryuukk_
now textures and model loading and port is complete

1603404614
ryuukk_
and animations

1603405269
ryuukk_
fengb: can i create custom global functions like this @ ?

1603405375
ifreund
ryuukk_: no, those are compiler builtins

1603405413
ryuukk_
oh ok

1603405636
ikskuh
ryuukk_: compiler builtins aren't functions in a "function" sense

1603405642
ikskuh
that's why they have the @ prefixed

1603405663
ikskuh
most builtins either map to CPU instructions or map to no runtime code at all

1603405678
ikskuh
best example: @intToFloat and @field

1603405867
ryuukk_
ok so it's like __traits in D

1603407824
data-man
ryuukk_:  But you can create functions like @"anyname". E.g. fn @"+="(v: f32) :)

1603407871
ryuukk_
hmm interesting, data-man

1603407910
ryuukk_
how can you call it?

1603407929
ryuukk_
with @"+="(5.0) like that?

1603407956
data-man
Yes.

