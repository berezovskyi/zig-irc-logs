1607385850
jamii
I'm very confused by the alignments produce by arrays inside packed structs -

1607385874
jamii
Can anyone explain this? I would expect them all to just be byte aligned.

1607386057
justin_smith
jamii: maybe I'm misunderstanding your question, but most CPUs do not allow arbitrary data offsets - eg. a 64 bit value must often be 8 byte aligned

1607386104
justin_smith
you can store things how you like but this would mean a lot of extra work just to construct the value, instead of just being able to read / write the memory

1607386232
justin_smith
oh but I see in your example the arrays are all arrays of u8...

1607386277
justin_smith
the alignment data might be there to ensure cast correctness?

1607386296
justin_smith
I'm sure someone else has the answer

1607386343
fengb
Packed structs are buggy

1607386367
leeward
I feel like we should put that in the channel topic.

1607386397
leeward
Be excellent to each other. | Packed structs are buggy.

1607386415
jamii
fengb: I was afraid that might be the answer :)

1607386425
jamii
I guess I'll have to do this the old fashioned way

1607386493
jamii
Here's a problem more closely related to what I'm trying to do -

1607386510
fengb
You might be able to get away with using an extern struct

1607386553
jamii
It seems like the (now poorly named) bytes field gets an unnecessary align(1) which then propagates into the element and makes all my code sad.

1607386615
jamii
fengb: That might work. I'll have to look up the abi rules. I'm trying to pack a tree branch into page. Might be easiest to just do this with pointer arithmetic for now.

1607404424
companion_cube


1607406132
andrewrk
Windows users: here's that surprise for you that I promised:

1607408027
rowbee
hi, is the if (fun()) |value| syntax customizable by user types, or does the language only permit it for optionals and errors?

1607408763
andrewrk
rowbee, the latter

1607408825
rowbee
gotchu

1607428248
betawaffle
does (or will) the zig build system allow users to bring their own stdlib, if they need to modify some aspect of it that isn't extensible yet?

1607428407
ikskuh
andrewrk: very neat!

1607428446
ikskuh
betawaffle: you mean the startup code? for alle other things, there isn't a requirement on the stdlib (except on std.builtin)

1607428477
ifreund
even the startup code isn't forced on you

1607428489
ifreund
you can export __start() yourself

1607428514
ikskuh
true

1607428523
ikskuh
only thing you need is the std.builtin part

1607428551
betawaffle
i suppose you're right, but does that really allow you to bring a

1607428579
ikskuh
yeah

1607428582
ifreund
sure, copy paste the code to a new folder and call it mystd

1607428587
ikskuh
^=

1607428608
ifreund
though I'd personally try to get whatever patch I needed upstreamed first

1607428851
betawaffle
for people writing kernels in zig, is it possible to support custom threading and threadlocal vars in freestanding?

1607428902
betawaffle
we definitely need some docs on all the various hooks you can put in your root module

1607428919
ikskuh
grep -rnIi '@import("root")'

1607428920
ikskuh
:D

1607428944
betawaffle
why don't i ever think of stuff like that

1607429983
betawaffle
ifreund: are you saying that if you don't import std, and you export the right symbol, it won't even include the start.zig file?

1607430023
ifreund
betawaffle: I'm saying that start.zig checks if you exported the proper symbol for the target and does nothing if you did

1607430125
betawaffle
oh i see, it doesn't do anything for freestanding or other

1607430416
rowbee
does zig have an LSP server or is one in the works?

1607430424
dutchie


1607430439
rowbee
thanks

1607431516
dutchie
is there a better way to go from std.builtin.EnumField to the enum than @intToEnum(Enum, field.value)?

1607431758
ifreund
not that I know of, that doesn't seem to unwieldly IMO

1607431842
dutchie
mmm, it's not too bad, just feels slightly clunky when i'm already in an `inline for (@typeInfo(Enum).Enum.fields)`

1607434657
rowbee
i went through the stdlib a bit but couldn't find anything that can help me split or tokenize a string, what's the best way to split a string by spaces?

1607434712
g-w1
std.mem.split

1607434754
g-w1
or std.mem.tokenize to split by multiple delims

1607434775
rowbee
i see, thanks

1607435432
dutchie
something about using void as a real type, not just a marker for no return value makes me think of great big gaping black holes in all my data structures

1607435444
dutchie
"ah yes, this is a map from string keys TO THE VOID"

1607435495
dutchie
i think there's a joke about set theory in there somewhere

1607435541
fengb
If it makes you better, Zig void is equivalent unit in type theory

1607435563
fengb
e.g. `()` in an ML

1607435685
dutchie
yeah, i think it's just the name. rust just uses () as void (and allows you to not write it in return types if it's all that's coming back)

1607435706
dutchie
isn't Haskell's Void type an empty enum though i.e. unreachable

1607435747
fengb
We have an actual unreachable via `noreturn`

1607435760
fengb
I donâ€™t think you can use that in a struct

1607436224
sdixon
Hey folks, just installed zig! Very dumb question... where would the std lib be located if I installed via Ubuntu/snap? ZLS is saying it can't find it :(

1607436347
ifreund
is there some way you can list the files installed by a snap thing?

1607436402
ifreund
Generally I'd recommend using a tarball from the website over snap...

1607436406
sdixon
i can which zig and see its located in /snap/bin/zig -- I know like nothing of snap haha

1607436408
sdixon
yeah coolio

1607436411
sdixon
I'll do that

1607436460
ifreund
at a guess your lib is at /snap/lib/zig then

1607436522
betawaffle
how long do previous master builds survive in ziglang.org/builds?

1607436525
sdixon
no dice. but think I figured it out looks like /snap/XXX they store related files

1607436534
g-w1
i just found it

1607436542
g-w1
/snap/zig/weirdnumber/lib

1607436553
ifreund
betawaffle: a couple weeks, until andrew deletes them manually to save on AWS costs

1607436570
ifreund
g-w1: lol, of course

1607436594
sdixon
/snap/zig/current/lib/zig/std -- that was silly of me. thanks again for rubber ducking with me @ifruend stoked to start learning zig :)

1607436619
ifreund
snap being logical as usual :/

1607437485
companion_cube
dutchie: void is a bit of a misnomer if it's actually just i0/u0/unit

1607437510
companion_cube
I think it's good to have a proper type and not C's void

1607437517
companion_cube
Much more uniform

1607437542
dutchie
oh yeah, 100% agree that it's way better than C's void

1607437781
cren
what's the difference between i0 and u0?

1607437784
betawaffle
when the package manager is in place, is std going to be available via that, such that we can have an up-to-date std with a slightly older zig compiler?

1607437923
fengb
i0 returns signed zeroes ðŸ™ƒ

1607438202
g-w1
betawaffle, I think std has to be in sync with the compiler or else bad things happen (from experience). some things like @TypeInfo are given by the compiler

1607438279
betawaffle
maybe that will change after 1.0. or perhaps the solution is to just have less in std, and make that stuff available as official packages

1607438303
g-w1
maybe other parts of std would work, but i think std.meta and std.builtin would have a 50% chance of breaking

1607438314
cren
fengb: how does that work?

1607438342
companion_cube
It does not, it's a joke

1607438343
betawaffle
g-w1: well, std doesn't break in every single master version

1607438362
companion_cube
0 byte types are all the same

1607438412
g-w1
when i was working on stage2 1/10 times when I was using the tarball from the website to compile a slightly older stage2, the stdlib was mismatched and it didn't compile, so the solution was rebasing

1607438649
betawaffle
heh

1607439146
cren
companion_cube: then why are there different 0-byte types?

1607439168
companion_cube
Because they're special cases of general constructs?

1607439187
companion_cube
I mean, if you have in and un for every n, why not 0?

1607439209
cren
i guess

1607439223
cren
but why have them in the first place, actually? when would i need to use it?

1607439278
fengb
It's useful with generics

1607439330
companion_cube
Well it's important to have at least one zero sized type

1607439343
companion_cube
Several is just cherry on the cake I guess

1607440087
jorangreef
Hey everyone! Is there a way to iterate anonymous array literals, using for or while loops without running into "unable to evaluate constant expression"?

1607440090
jorangreef
I want to use Zig as a DSL for cluster config, and iterate these nodes to parse addresses:

1607440093
jorangreef
const nodes = .{ .{ .ip = "127.0.0.1", .port = 3001 }, .{ .ip = "127.0.0.1", .port = 3002 } };

1607440169
ifreund
jorangreef: not yet, but there is an open proposal to allow that iirc

1607440205
jorangreef
Great, thanks ifreund

1607440266
ifreund
you could alternatively use zzz:

1607441867
betawaffle
is anytype the new var, and is var just an alias for that?

1607441925
ifreund
betawaffle: anytype replaced var being used as a type, using var where a type is expected should no longer compile

1607441944
ifreund
var is still used for variables and you can't use anytype there

1607441947
betawaffle
the docs for 0.7 still have var in places

1607441963
ifreund
the stdlib docs?

1607441969
betawaffle
yeah

1607441972
ifreund
the language ref doesn't I hope

1607441974
betawaffle


1607441988
ifreund
yeah the generated std lib docs are rather broken/incomplete

1607442013
ifreund
I recommend everyone to just read the source code (and get zls)

1607442021
betawaffle
but how does it result in `var` if that isn't actually the signature of format?

1607442033
betawaffle
does zig.vim use zls?

1607442106
g-w1
no

1607442126
ifreund
betawaffle: the stdlib doc gen falls back to var when it gets confused afaik

1607442135
betawaffle
i haven't figured out how to set up coc yet

1607442150
ifreund
you'll also find stuff that takes a []const u8 or something but the generated docs say it takes var

1607442166
jorangreef
ifreund going back to that earlier discussion, I saw that `inline for` also works to iterate anonymous array literals

1607442182
g-w1
betawaffle, do you use neovim, because coc might not work with regular vim, ive not tried

1607442192
ifreund
jorangreef: afaik that treats them as a tuple

1607442194
betawaffle
i use neovim, yeah

1607442203
ifreund
which is fine to iterate at comptime but not at runtime

1607442230
jorangreef
ifreund that's fine since I was wanting to iterate at comptime, thanks for the help

1607442238
g-w1
first make sure you have node, then use whatever plugin manager to install it, then type `:CocConfig` to get to the lsp config file and follow the instructions. this worked for me

1607442243
ifreund
jorangreef: no problem!

1607442265
betawaffle
"make sure you have node" is my main problem

1607442287
g-w1
neovim has some builtin lsp support that you could try

1607442296
g-w1
its beta so its kinda buggy ive heard, but its better than nothing

1607442314
companion_cube
I use LanguageClient in neovim 0.4

1607442316
companion_cube
it works well

1607442350
companion_cube
autozimu/LanguageClient-neovim more precisely

1607442357
betawaffle
honestly, i'd like proper docs ;) even just ones that let me navigate and look at the code

1607442381
betawaffle
if the language server can find definitions, i'd assume a doc generator could too

1607442395
ifreund
it's just waiting for someone to write it

1607442410
ifreund
the current old crappy docgen is C++ and quite bitrotted

1607442432
ifreund
we need a self hosted implementation at some point, but there are other priorities

1607442439
betawaffle
does zig have stuff for parsing zig and working with the ast?

1607442444
g-w1
std.zig

1607442445
ifreund
yes, std.zig

1607442465
betawaffle
nice

1607442477
g-w1
thats what zls uses

1607442511
ifreund
Yeah I honestly don't think it would be very hard to write a good docgen tool using std.zig, might be a fun project

1607442530
ifreund
personally my todo list is 10 miles long though :/

1607442610
betawaffle
i might experiment with that, we'll see

1607451412
andrewrk
jorangreef, that will let you iterate over a homogenous list too

1607451417
andrewrk
*heterogeneous

1607451711
jorangreef
Thanks andrewrk, that's awesome! I have it working here

1607451738
jorangreef
P.S. Yes, we're writing an accounting database in Zig!

1607451797
andrewrk
hmm it doesn't look like you're taking advantage of comptime values in this loop

1607451822
andrewrk
oh I see you just wanted to not have to specify a type on `nodes`

1607451878
jorangreef
Yes, trying to explore Zig as a config DSL... but if we can use comptime in that loop that would be good.

1607451916
andrewrk
yeah when you use `inline for`, it makes both of the captures comptime known within the loop

1607451935
preyalone
Hi! I am curious about using zig as a drop-in replacement for gcc/clang. How well does Zig support C17, C++17? What about compiler flags like -Wmost, -Weverything?

1607451978
andrewrk
preyalone, this feature of zig is powered by clang and lld

1607451992
preyalone
So... all of the above :) ?

1607451992
andrewrk
so the answer to the question is the same question as, what does clang 11 support

1607451998
preyalone
baller.

1607452046
andrewrk
what zig brings to the table on top of clang is (1) no system dependencies and (2) cross-compilation support with the -target option

1607452068
andrewrk
well and the handy binaries from ziglang.org/download :)

1607452111
andrewrk
jorangreef, this project looks ambitious - I'll be keeping an eye on it

1607452196
jorangreef
awesome andrewrk appreciate the pro-tips!

1607452213
preyalone
How stable is the Zig language, given its current, pre-v1.0 state? I got burned several times in Go and Rust before they hit 1.0

1607452229
andrewrk
very unstable. if you're concerned about getting burned you should wait a year or two

1607452250
g-w1
in this context, what does burned mean?

1607452272
andrewrk
your code bit rots because the language made breaking changes

1607452279
g-w1
ah

1607452284
preyalone
Hmm. I'd also like to see the `zig` CLI itself stabilize, so that I don't have to run back to my old C/C++ projects and make sure they still compile as the language progresses

1607452326
andrewrk
the `zig cc` / `zig c++` feature is determined by clang's CLI. so that's bound by the stability of clang CLI

1607452362
andrewrk
literally, we parse their table of CLI options and match it exactly

1607452432
preyalone
slick.

1607452480
andrewrk
are you mcandre on github?

1607452791
leeward
preyalone: The only good reason I have for writing code in Zig right now is to make Zig better. For projects I have to actually ship and support, Zig will be the wrong choice until it (and its standard library) stabilizes a bit more.

1607452855
preyalone
Bated breath for Linus to convert the kernel to Zig, Rust, D, something other than crusty ol C

1607452937
leeward
D is not going to happen. Rust looks like it's making inroads, at least in modules. Zig would be a really good fit once it hits 1.0.

1607452937
preyalone
As a Debian/Ubuntu user, does the zig package automatically install clang, or should I explicitly add this for `zig cc`, `zig c++` support?

1607452949
leeward
There's a zig package?

1607452972
preyalone
yeah, in a bintray third party repo

1607452972
g-w1
it doesn't install clang, its in the binary. it

1607452979
preyalone
!

1607453007
andrewrk
preyalone, "what zig brings to the table on top of clang is (1) no system dependencies" ;)

1607453015
leeward
Huh, hadn't seen that one. Will have to try it out on systems where I don't need to build it.

1607453068
preyalone
Guessing that in the best case, many Zig applications will continue to import some native dependencies for some time, and end up needing xgo to manage these kinds of impure ports

1607453142
preyalone


1607453176
preyalone
Is there a built-in flag to loop over ALL available ports? Or even a flag to list available target platforms?

1607453198
g-w1
im confused, the clang in zig can cross compile to any llvm-supported arch, iirc. is there a reason for a new tool?

1607453231
leeward
zig targets?

1607453246
preyalone
g-w1: Only in the case that a project depends on some non-pure Zig libraries

1607453272
g-w1
zig can just include c sources from the build.zig

1607453432
rowbee
i'm running doom emacs, whenever i save a file with zig-mode enabled, it seems to turn off lsp. should i create an issue on zig-mode repo?

1607453578
preyalone
Okay, `zig targets` is frankly impressive. Now how do I build for ALL of these targets in an automated fashion? Parse the output with `jq` and do a shell for loop?

1607453599
andrewrk
preyalone, zoom out a little bit, what are you trying to do?

1607453628
preyalone
andrewrk: I have no ulterior motive. Let's say I want to port hello.c to as many platforms as physically possible. For the hell of it.

1607453677
andrewrk
I recommend to start with one target, then start adding more to an explicit list

1607453689
leeward
rowbee: sounds like it. I'm not having that problem with gnu emacs.

1607453692
preyalone
In the past I developed projects like goxcart, cartel, and tonixxx to manage cross compilation. I'm curious how I can use Zig to the same effect. Build all the ports!!!

1607453698
andrewrk
see for example

1607453727
rowbee
leeward: this is also gnu emacs, just with pre-installed packages

1607453742
rowbee
let me see here

1607453745
g-w1
you can use std.Target to find it. its easy just to do a O(n**3) loop over everything to get all possible combos

1607453854
preyalone
Note to self:

1607453907
leeward
rowbee: hmm, let me check if there's anything newer in zig-mode than what I'm running.

1607453943
leeward
nope...sounds like a configuration issue

1607454064
rowbee


1607454292
preyalone
Does Zig work with Doxygen for generating HTML API docs?

1607454355
preyalone
ah, -fgenerate-docs

1607454418
ifreund
be aware that that flag is by no means production ready and quite bitrotted atm

1607454447
ifreund
it's waiting for someone to reimplement it in zig (currently its functionality is written in C++)

1607454459
leeward
Anyone who knows things about LLVM have a clue what I'm looking at here?

1607454490
andrewrk
leeward, "cannot select" basically means you hit a TODO panic in LLVM

1607454498
leeward
ahh

1607454503
Nypsie[m]
ifreund: I noticed that the old wasm tests generate an error currently because codegen.zig does not yet support u64 and floats for constants. Would it be ok to disable 2 of the tests?

1607454533
Nypsie[m]
(This is for the current PR I opened for moving the wasm backend to codegen.zig)

1607454535
leeward
Thanks, andrewrk. That probably saved me hours of pointless digging. Back to linker scripts with me.

1607454539
andrewrk
leeward, it could mean the codebase needs an improvement, or it could mean a missing compile error because that target, with the selected CPU feature set, could not generate any code to match your zig

1607454547
andrewrk
s/codebase/LLVM codebase/

1607454580
andrewrk
given that it has to do with atomics, I think what happened is a missing compile error saying that this target cannot support usize atomics

1607454596
andrewrk
if you think that is a mistake then it's LLVM's instruction selection needing a patch

1607454630
leeward
I'm pretty confident it's that. I've gotten Zig to generate a .o file from that source file already.

1607454665
andrewrk
you are welcome to file a zig issue for LLVM bugs

1607454676
preyalone
Zig doesn't need separate header files like C for pure code, right?

1607454678
andrewrk
we track them until they are fixed

1607454689
leeward
Ooh, that's an idea. I'll do that.

1607454709
leeward
preyalone: Right.

1607454738
ifreund
Nypsie[m]: sure, do whatever makes sense

1607454742
preyalone
Thinking about how I want to structure my Zig projects. Might borrow the ./*.go, src/cmd/<name>/main.go convention and use .zig extension

1607454756
preyalone
er, ./cmd/<name>/main.go

1607454773
Nypsie[m]
ifreund: Thanks for confirming and the previous feedback you gave me :)

1607454799
ifreund
Nypsie[m]: are you planning on reverting your changes to how function indexes are handled or have you come up with something new that works and is better?

1607454831
preyalone
What's the significance of the Zig logo? Just looks cool?

1607454888
TheLemonMan
leeward, let me guess, msp430 uses 16bit integers?

1607454889
preyalone
cmd/<name>/main.zig is helpful for any projects with multiple distinct binaries, like how git is actually split up into a dozen binaries

1607454923
leeward
TheLemonMan: You got it.

1607455021
Nypsie[m]
ifreund: I couldn't come up with a strategy that accesses both the target declaration as well as the current declaration to append the target to the current declaration. I think the implementation I made is pretty sane, but I want to perform more testing before I'm confident in it. (Such as randomly inserting and removing functions all over the place).

1607455022
leeward
TheLemonMan: I ran into something like this when fiddling with avr support, but worked around it by linking manually. On msp430, gnu ld expects main to be in a section called .init9, and zig puts it in .text, so I was hoping that maybe I could skip the linker script but no.

1607455064
TheLemonMan
you should put a c_int where I used i32, that'd match the C definition for such targets too

1607455081
leeward
Ooh, ok, thanks.

1607455138
leeward
Same llvm error.

1607455145
TheLemonMan
link?

1607455180
leeward
Cannot select: 0x5557a03d9060: ch = AtomicStore<(store release 2 into %ir.6, align 64)> 0x5557a11de1d8:1, 0x55579fd2c9b0, Constant:i16<0>

1607455197
preyalone
Can Zig allow semicolons to be omitted for simple procedural code? Many modern languages leave these out unless you are tightly expressing multiple statements within a single text line.

1607455199
leeward
filling out an issue on github...that'll probably be easier to talk about

1607455216
ifreund
Nypsie[m]: what you have now hardcodes function indexes into the in-memory generated code. This means that whenever e.g. the function at index 0 is deleted ALL code needs to be regenerated

1607455222
ifreund
which kills incremental compilation

1607455246
ifreund
(unless I'm missing something)

1607455264
g-w1
no semicolon omission

1607455268
TheLemonMan
leeward, gimme a few minutes, I'll fetch a MSP430 manual

1607455285
karchnu
preyalone: I guess this will imply an ambiguous grammar, therefore slower compilation.

1607455298
TheLemonMan
it seems that either MSP430 or LLVM don't support atomics on `usize`-wide memory cells

1607455304
ifreund
it wouldn't necessarily be ambigous, but it would be inconsistent

1607455310
TheLemonMan
that's the bare minimum we need for the fallback atomics to work

1607455313
ifreund
and not very "one way to do things"

1607455327
Nypsie[m]
ifreund: That makes perfect sense. I'll revert it and give it another try to make it work

1607455378
ifreund
cool, sorry the comments/commit message didn't make it clear why things were the way they were :D

1607455379
preyalone
I see in the GH issues the syntax is fixed for now. It's just surprising, given how Google's Go and Apple's Swift have dropped semicolons for visual simplicity. Although Rust keeps the semicolon.

1607455399
ifreund
emulating Go/Swift isn't a goal

1607455436
ifreund
IMO semicolons make code more not less readable

1607455458
ifreund
like how proper punctuation makes english work much better

1607455473
Nypsie[m]
ifreund: No worries, I appreciate it

1607455534
ikskuh
<ifreund> IMO semicolons make code more not less readable <= this

1607455557
preyalone
Hmm.

1607455567
preyalone
The hello world example produces a compile error on my machine

1607455568
preyalone


1607455577
ikskuh
which version do you have?

1607455589
preyalone


1607455614
ikskuh
that sounds horribly outdated

1607455622
ikskuh
what compiler version do you have?

1607455628
ikskuh
(use "zig version" to get it)

1607455630
preyalone
Ah, the Debian repo has Zig at v0.6.0

1607455641
TheLemonMan
leeward, have you tried setting `largest_atomic_cas_size` to zero for msp?

1607455648
ikskuh
don't use the OS packaged one, use the master tarball from the website

1607455652
andrewrk
preyalone, are you mcandre on github?

1607455662
preyalone
@ikskuh sure

1607455664
leeward
TheLemonMan: I have not.

1607455665
preyalone
@andrewrk yes

1607455669
leeward
But will!

1607455819
andrewrk
preyalone, so far 4/4 of your issues are questions you could get answers for here, please try to keep the issues related to the zig codebase

1607455855
preyalone
sure

1607455869
preyalone
Is there a zvm yet?

1607455878
g-w1
zigup

1607455883
leeward
TheLemonMan: No change.

1607455892
ikskuh
preyalone: there are several out there

1607455897
ikskuh
i just use a stupid bash file for that

1607455940
ifreund
I just build zig from source with whatever commit I want :D

1607455950
ikskuh
^= or this

1607455958
preyalone
Link to zigup?

1607455963
andrewrk


1607455995
leeward
TheLemonMan:

1607456056
TheLemonMan
leeward, I'll give it a spin, does passing `--single-threaded` make any difference?

1607456079
leeward
TheLemonMan: Nope, same result.

1607456080
TheLemonMan
can't try right now as the compiler is building and all my ram is occupied

1607456135
leeward
TheLemonMan: sounds like a familiar problem

1607456287
preyalone
Pre 1.0, with too old a version of the compiler in the Debian repo... Basically, I'm getting the same early days behavior with Zig as I had with Swift on Ubuntu. There, the thing compiled but segfaulted lol

1607456318
ikskuh
preyalone: yeah, zig is still in a very early phase

1607456335
ikskuh
but even now, it's more pleasure to work with zig than with C/C++

1607456348
ikskuh
it's less pain to write new libraries than using existing ones in their main language :D

1607456355
preyalone
You'll know we're blowing up when Microsoft creates yet another language clone instead of adopting it

1607456362
andrewrk
TheLemonMan, sorry about the CI failure - gonna try to push a quickfix to arch-gate kubkon's macho code signing thing only for aarch64 for now

1607456368
andrewrk
aarch-gate

1607456422
TheLemonMan
yeah, the patching logic is smart as is fragile :\

1607456437
preyalone
Zig claims it has no macros. So if one does choose to wrap native libraries, then how are we supposed to inform Zig, use

1607456448
TheLemonMan
stupid apple and its stupid signed binaries

1607456451
companion_cube
preyalone: zig# ?

1607456453
companion_cube
that'd be fun

1607456455
ifreund
preyalone: comptime

1607456472
ikskuh
preyalone: switch(std.builtin.os.tag) { .windows => {}, .linux => {}, â€¦ }

1607456480
ifreund
there's an example of this on the ziglang.org homepage

1607456488
fengb
Comptime is a magic solution that replaces macros, templates, generics, metaprogramming, and cancer

1607456500
ikskuh
zig has compile time execution, you can select stuff at compile time and exclude other code

1607456503
ikskuh
without different syntax

1607456543
preyalone
cool

1607456556
leeward
fengb: It would be nice if we didn't come up with a new kind of cancer.

1607456591
companion_cube
I mean, it's rust whose mascot is a crab

1607456606
andrewrk
preyalone,

1607456610
leeward
Though I can't argue about comptime sometimes forgetting how to die.

1607456670
preyalone
I feel dumb. How am I supposed to use comptime to distinguish between different platform-specific code?

1607456694
preyalone
Define some type synonyms when the build executes?

1607456701
fengb
Zig is very lazy, so things that are detected to be inactive at comptime will not be compiled

1607456737
leeward
preyalone: look at std.builtin.os.tag or std.builtin.arch, which are populated at build time.

1607456739
andrewrk
if (std.Target.current.os.tag == .windows) { a(); } else { b(); }

1607456757
preyalone
cool

1607456790
preyalone
Can I insert such conditionals in imports as well?

1607456799
ikskuh
you can insert them

1607456822
andrewrk
I encourage you to read through that language reference section I linked

1607456838
ikskuh
const SomeType = if(std.Target.current.os.tag == .windows) u32 else f32; // u32 in windows ;)

1607456875
leeward
const library = switch (std.Target.current.os.tag) { .windows => @import("windows_library"), else => @import("non_windows_library")};

1607456998
preyalone
Does Zig stdlib offer CLI flag parsing? Any third party docopt/getopt implementations?

1607457022
companion_cube
there's `clap` I think

1607457032
companion_cube
or you can bind getopt

1607457078
ikskuh
clap, zig-args

1607457105
ikskuh


1607457167
g-w1
how does the * person work. this has confused me for a while?

1607457185
ifreund
g-w1: /me

1607457196
g-w1
thanks

1607457199
ikskuh
/me is not amused

1607457200
ikskuh
=>

1607457204
ikskuh


1607457218
preyalone
getopt is okay in UNIX but a pain to integrate regarding Windows targets. So pure Zig is really helpful there!

1607457229
ikskuh
/say will make you say stuff literal, even if it starts with /say

1607457307
ikskuh
my absolute favourite is /slap though

1607457347
leeward
That one's more client specific.

1607457357
fengb
Old school trout

1607457366
TheLemonMan
so many large trouts died for this

1607457367
ikskuh
^= that is slap

1607457383
ikskuh
TheLemonMan: it's a tradition

1607457383
ifreund
weechat doesn't support this by default :/

1607457401
fengb
Our next generation IRC users won't understand trout references

1607457412
leeward
I haven't slapped anyone with a trout since the '90s with mIRC.

1607457412
preyalone
what's irc

1607457413
fengb
Just kidding, next gen won't use IRC ðŸ™ƒ

1607457414
preyalone
lelel

1607457423
leeward
fengb: s/next/this/

1607457442
preyalone
anyone in the Reddit zig cat? Gitter? Discord?

1607457446
preyalone
*chat

1607457459
ikskuh
Discord: ack, Reddit: sometimes

1607457467
leeward
The discord is pretty...high volume.

1607457473
TheLemonMan
reddit has.. a chat?

1607457489
ifreund
i think the new javascript site does

1607457507
preyalone
and mobile

1607457510
ifreund
i of course don't use the new javascripty site though so I'm not sure about the details

1607457510
fengb
It does?

1607457517
TheLemonMan
oh right, the new website

1607457521
ifreund
who uses the default mobile reddit app

1607457527
ifreund
its horrible

1607457536
fengb
Oh right, I switched off once it was spamming me to use the chat

1607457538
fengb
I remember now

1607457553
preyalone
reddit.{ios,android,winrt}.zig, do it

1607457564
TheLemonMan
I have a firefox extension to redirect me to old.reddit.com

1607457580
Nypsie[m]
I should get that :o

1607457589
TheLemonMan
suck a large trout reddit, I won't use your shitty redesign

1607457594
earnestly
If that ever breaks there's also teddit.net

1607457636
earnestly
(Which I use for the few times I look at reddit simply because it doesn't collapse any comments by default (which needs javascript and third-party scripts to function, even on old.)

1607457638
TheLemonMan
Nypsie[m],

1607457663
Nypsie[m]
Lovely, apparently you can also disable it in the settings itself on reddit. TheLemonMan: Thanks!

1607457672
andrewrk
the mobile reddit app, and the new reddit mobile website, are both slower than the old desktop website on a phone

1607458724
oats
if you must use reddit on a phone, slide for reddit is pretty good. FOSS and it's on f-droid

1607458815
TheLemonMan
I print a few pages off the frontpage and stuff them into a good old-fashioned binder

1607458829
TheLemonMan
no need for apps

1607458917
TheLemonMan
leeward, you can temporarily get rid of the problem by editing compiler_rt.zig, just remove the import of "atomics.zig"

1607458960
TheLemonMan
beware that some parts of the stdlib may need adjustments because of the 16bit usize

1607459023
leeward
TheLemonMan: Just read your comment on the issue. I'll try that.

1607459375
leeward
Well, all these u32s that are being used as usize should probably get fixed anyway.

1607459398
leeward
Though it would be nice if there were a register-sized type instead of just a pointer size.

1607459419
TheLemonMan
yeah, gotta check the libgcc definitions to see what's a c_int and what not

1607459570
leeward
oof, there's some stuff in the math library that will probably be incorrect if I just naively replace u32 with c_uint...will look into that later

1607460078
leeward
Woot! A new error: "warning: unexpected LLD stderr: ld.lld: warning: cannot find entry symbol _start; not setting start address"

1607460100
leeward
I think this is related to the problem I've been having when linking manually.

1607460275
leeward
Yeah, it's not linking it.

1607460317
TheLemonMan
no _start?

1607460320
leeward
Yeah.

1607460333
leeward
That should be put in by...start.zig?

1607460372
TheLemonMan
yeah

1607460394
leeward
objdump of what it generated:

1607460409
leeward
oh, hmm, never mind

1607460410
TheLemonMan
unless you're -freestanding

1607460412
leeward
that's not right

1607460439
leeward
I am -freestanding

1607460449
leeward
This is what it generated:

1607460463
TheLemonMan
then that's right, you gotta define/export it by hand

1607460465
leeward
That was an older version of the dump file that I had generated yesterday.

1607460516
leeward
Oh, well I should have known that. It's just `export fn _start() noreturn { ...}`?

1607460523
TheLemonMan
`pub export fn _start() void`

1607460536
TheLemonMan
or noreturn, if you're feeling fancy

1607460571
leeward
Well, that's a new and interesting error message.

1607460643
leeward


1607460758
leeward
I feel like there's something missing here. I should probably set up a stack.

1607460833
TheLemonMan
get the .o binary and run it trough objdump -dr, check what relocation is wrong

1607460872
leeward
Do I need to do the C runtime style stuff like initializing the stack and clearing bss manually in freestanding?

1607460921
leeward
also: this is the objdump of the .o:

1607460929
TheLemonMan
yeah, but that's orthogonal to the linker error

1607460978
leeward
Huh, objdump put that R_MSP430_16_BYTE in indented without my help.

1607461194
leeward
Yeah, it looks like it.

1607461222
leeward
The one I pasted is all the errors I get.

1607461269
leeward
I disabled the atomics import and fixed the errors in std/math/exp2.zig, then it's exactly the command line you see.

1607461680
leeward
heh, cheating with -lc failed: "attempt to unwrap error: LibCInstallationNotAvailable"

1607461732
leeward
I guess I'll just copy the contents of crt0.S.

1607462758
leeward
TheLemonMan:

1607463263
leeward


1607463268
leeward
It built something.

1607463323
leeward
Oh, it didn't install the interrupt vector table.

1607463363
leeward
Is freestanding really supposed to come with 0 runtime overhead?

1607463693
leeward
Hmm, anyone know how to tell Zig to put a bit of data at a particular address? Comptime pointers?

1607463729
ifreund
I think you can @intToPtr the address and deref it?

1607463798
leeward
ifreund: Sure, but can I do that at comptime?

1607463856
leeward
Well, that's what I'm trying, anyway.

1607464085
ifreund
I'm not sure, I feel like I've seen code doing this somewhere but I can't recall where

1607464304
leeward
Maybe what I need is just an array and a linker script to locate it.

1607464333
leeward
But Zig doesn't seem to do linker scripts...

1607464394
leeward
Mmm, looks like I'm out of time for now. Might come back to this tonight.

1607464430
ifreund
I'm almost certian I've seen zig code in some sr.ht repo setting up the interrupt vector table

1607464434
ifreund
but I can't find a link

1607465829
leeward
Ooh, a hack that will work has been discovered!

1607465896
leeward
It does work! Just setting main to `linksection(".init9")` lets me run gnu ld and have it put everything in place nicely.

1607467602
preyalone
What happens in the zig build tool during `exe.install();` ?

1607467638
preyalone
Go tools are traditionally placed into $GOPATH/bin. Is there a similar location for Zig binaries?

1607467720
ifreund
preyalone: they go to the cache directory if no prefix is set with --prefix

1607467731
ifreund
if you set a prefix, they go to the prefix

1607467782
preyalone
gotcha

1607467827
preyalone
I see some references to run_cmd, run_step in the build.zig file that zig generated for me. But I don't know how to properly trigger these tasks.

1607467883
ifreund
zig build run

1607467899
ifreund
see also zig build --help

1607467906
preyalone
thank you, ifreund! i was confusing that with the `zig run` subtask

1607467924
g-w1
it actually calls zig run under the hood

1607467960
preyalone
makes sense

1607468025
ifreund
pretty sure it doesn't actually

1607468049
preyalone
I love that the build system is just 100% Zig code. More programming languages need to take heed.

1607468054
ifreund
just runs the artifact generated by the LibExeObject step using zig build-exe or whatever

1607468132
g-w1
oh huh I saw addSystemCommand and thought it did. nvm

1607468182
preyalone
Mage works that way, too

1607468201
preyalone
Ended up writing my own half ass task managers, dale for D and tinyrick for Rust, to that effect

1607468712
leeward
I may be the only person on the planet who wanted this, but...

1607468723
leeward
laters ziguanas

1607469276
ifreund
andrewrk: I seem to recall you running into something about musl startup code not being run recently, I think I've hit the same issue

1607469339
ifreund
__progname which is used by mesa as a fallback on musl systems is never initialized when running with zig's start.zig startup code

1607469439
andrewrk
ifreund, that was for my PoC for a libc-agnostic binary that can open a window and use the system vulkan driver

1607469512
ifreund
right, so was the conclusion that there is musl startup code that isn't being run?

1607469537
andrewrk
preyalone, I'd appreciate if you'd ask around before opening all these issues that are just getting closed

1607469820
andrewrk
I've given you a 1 day timeout to show you than I'm serious about not spamming the issue tracker

1607469861
ifreund
so musl has this __init_libc() function here:

1607469926
ifreund
should we be duplicating more of this behavior in start.zig if linking libc?

1607469956
ifreund
I'm not even sure how this function gets called

1607470036
andrewrk
ifreund, I think you're hitting

1607470043
andrewrk
this is a musl-based linux distro right?

1607470081
ifreund
indeed, the person feeding me stack traces is runnind a musl distro

1607470129
andrewrk
yeah. zig is broken for such systems if they rely on dynamic linking musl - which any graphics based program does

1607470140
andrewrk
it may be possible to work around using the --libc parameter

1607470152
preyalone
Trouble doing basing loops. Help?

1607470157
andrewrk
ifreund, this is a rather glaring problem, I really should prioritize fixing it

1607470219
ifreund
andrewrk: that would of course be appreciated, it seems the NULL __progname is probably stopping river from getting to this point

1607470242
andrewrk
you really need full dynamic musl linking support to be correct

1607470269
ifreund
yeah I realize that

1607470364
g-w1
preyalone, try `inline for` since it is a tuple. I suspect that making it a regular array will make it work.

1607470380
ifreund
I wouldn't mind trying to fix #5364 myself, but I'm really not sure where to start

1607470400
preyalone
@g-w1: Like, convert this to an explicitly typed array?

1607470403
andrewrk
ifreund, I could help if you're interested in spending some time on it

1607470410
andrewrk
I think it's a 1-3 day project

1607470412
ifreund
I guess by reading how linking glibc works?

1607470421
andrewrk
nah musl is way simpler than glibc

1607470433
ifreund
oo, 1-3 days sounds like I could get it done before 0.7.1

1607470446
andrewrk
hmm yeah I'd be willing to call that a bug

1607470460
g-w1
yes, try to convert it to a typed array

1607470469
andrewrk
step 1 is build musl normally, and get a log of the commands the build used to produce the libc.so file

1607470516
preyalone
Is there a string type, or just an array of u8's?

1607470546
ifreund
preyalone: no builtin string type no

1607470551
andrewrk
there is no string type and there are closed issues you can go read to learn why

1607470582
preyalone
Eh, I'm used to Haskell's similar string type structure, where strings are, for the most part, simply arrays that happen to contain characters

1607470648
andrewrk
ifreund, you are right though - there are elements of how zig builds a dummy .so file for glibc that will apply to musl. but it will be much simpler for musl because we don't have to deal with abi versions

1607470700
andrewrk
in summary: find out what linker command the system compiler does on a musl-based system when you build hello_world.c and dyn link against system musl

1607470731
andrewrk
that will tell you what crt files you need to grab from the musl repo. for example crtn.c or crt1.s or something like that

1607470736
preyalone
Are Zig strings null terminated?

1607470749
andrewrk


1607470885
preyalone
I see. But where is the example for declaring a multidimensional array, so that coders can provide arrays of varying-length strings?

1607470929
ifreund
var foo = [_][]const u8{"this", "is", "it"};

1607470947
andrewrk
preyalone, did you try searching that document for "multidimensional array"?

1607470953
preyalone
Yes I did

1607470967
preyalone
ifreund's syntax works. I was trying things like [_][_]u8

1607470974
andrewrk
and what happened when you did that search?

1607471019
preyalone
The search yielded one short example for number matrices, whose syntax failed to compile when applied to u8 matrices of varying length strings

1607471040
ifreund
well arrays have fixed length as stated in the docs

1607471054
andrewrk
I see, you are asking about varying length strings

1607471067
ifreund
you might notice if you scroll down a bit more that there is a section on Slices

1607471122
ifreund
andrewrk: I think you've given me enough to get started, time for me to read code and learn a lot more about how linking works

1607471192
andrewrk
ifreund, the nice thing is you can play with it on the command line without writing any zig code. when it's time to write the patch, basically all you're doing is writing zig code that is doing the work a build system would normally do

1607471210
andrewrk
and trying to integrate it nicely with the cache system

1607471227
ifreund
that's a very helpful perspective, thanks

1607471243
preyalone
I see slices, but no slices apparently featuring multiple distinct strings as members

1607471304
ifreund
preyalone: you can make an array or slice of anything, including slices

1607471420
preyalone
execve is mentioned in the API docs, but not actually documented itself

1607471443
ifreund
read the source, the generated docs are incomplete as I said earlier

1607471475
preyalone
+1

1607471514
preyalone
Unable to report further issues on GitHub. Not a good experience.

1607471600
ifreund
well, your issues haven't had a high signal to noise ratio, most of them would have been better as a message here

1607471611
preyalone
That's one opinion

1607471623
fengb
Thatâ€™s more than one opinion

1607471634
preyalone
From my perspective, any language whose Hello World doesn't work out of the box is not off to a good start

1607471651
ifreund
it does

1607471676
ifreund
if you can can manange to match your version of zig the version of the docs you read

1607471681
ifreund
which isn't really too much to ask

1607471684
preyalone
The Debian release does not support the syntax. It's months out of date.

1607471691
ifreund
blame debian

1607471695
andrewrk
preyalone, would you like to participate in this community? you will have to be willing to listen to the feedback you are getting. I'm not interested in having an argument about it

1607471700
viashimo
i didn't think zig was in debian

1607471709
ifreund
yeah that suprised me to

1607471711
fengb
I mean... item that Debianâ€™s MO: months out of date

1607471723
ifreund
i didn't think they had any software released in the past year :D

1607471727
viashimo
it doesn't seem to be in debian

1607471738
ifreund
probably some third party ppa then...

1607471740
ifreund
sigh

1607471741
preyalone
Could someone help me to locate the file where the std.os functions are defined in the zig source? I tried searching the whole project but get too many results unrelated

1607471757
ifreund
std/os.zig?

1607471771
ifreund
no that would be too obvious

1607471780
preyalone
Nested under lib, okay okay

1607471800
ifreund
also if your're really stuch you can always go to std.zig and follow the @imports()

1607471812
preyalone
good tip!

