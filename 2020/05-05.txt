1588637555
andrewrk
oh, derp. `noasync` should clearly be renamed to `nosuspend`

1588637571
andrewrk
not sure why it took me this long to realize, lol

1588639932
fengb
I was wondering about being able to call async functions within noasync

1588640294
andrewrk
yeah. but with nosuspend it makes sense right?

1588640313
andrewrk
finally finished that redisconf talk, now I can get back to self-hosted

1588640376
fengb
Makes sense yeah

1588640395
fengb
Oh yeah the talk!

1588640417
andrewrk
idk why I agreed to do 2 talks. that was stupid

1588640831
fengb
2 talks? Whenâ€™s the second?

1588640974
andrewrk
they both become available on may 12

1588640994
andrewrk


1588641015
andrewrk
if they don't make them publicly available without registering, I'll just upload them to youtube

1588641030
andrewrk
I didn't sign any nonexclusivity contract

1588641136
fengb
Oh 2 talks the same event? Yowch

1588641153
fengb
Are they still live?

1588641732
andrewrk
no, pre recorded. both done

1588641915
foobles
how do you make a request for review on github? maybe because I am not part of the "zig team" or something, but there is nobody listed under the "reviewers" tab

1588642656
andrewrk
foobles, I think the problem here is not lack of process but lack of contributor time (including mine) and adding process doesn't necessarily save time, and in fact can actually remove time, making the problem worse

1588642720
andrewrk
you joined at a particularly difficult time when pull requests are piling up a lot, but I promise you I'm working on getting more funding and qualified people to merge PRs. it'll take a while though

1588642741
andrewrk
in the meantime there's just going to be a high latency for some PRs, and that's the unfortunate way it goes

1588643144
fengb
Oh boy, sounds like a major announcement soon

1588644865
foobles
oh alright, thanks andrewrk

1588644888
foobles
understood :]

1588648448
foobles
I know you can say `error.foo` to create a new error value

1588648455
foobles
of an anonymous error type

1588648470
foobles
because it expands to `error { foo }.foo`

1588648491
foobles
but then how does just saying `anyerror.foo` work (assuming no other error set defines foo)?

1588648794
foobles
because it seems to behave identically to just `error.foo`

1588650157
andrewrk
anyerror is an error set

1588650661
andrewrk
ahh here are the links to the talks:

1588650664
andrewrk


1588650667
andrewrk


1588650762
foobles
andrewrk but are you able to just invent new error values out of nothing with `anyerror`?

1588650767
foobles
like is that intended behavior?

1588650784
foobles
or does it mean global as in "it contains any possible error at all"

1588650814
foobles
and if so, doesn't the fact that `error.foo` and `anyerror.foo` both do the same thing go against the "one obvious way to do things" principle?

1588650818
andrewrk
foobles, yes, `anyerror` is the global error set, including all errors

1588650837
foobles
ahh, i thought it was just "all errors of error sets in scope"

1588650839
andrewrk
they don't do exactly the same thing

1588650878
andrewrk
`@typeOf(error.Foo)` is an anonymous error set with only 1 error in it

1588650897
andrewrk
`@typeOf(Foo.Name)` is Foo

1588650912
andrewrk
so if you do anyerror.Name then you have the global error set, which will not coerce to a smaller one

1588650916
andrewrk
you almost never want that

1588650952
foobles
Oh i see

1588650969
foobles
but if you have `const Foo = error { foo, bar }`, `error.foo` can coerce to that

1588650979
foobles
interesting

1588651002
andrewrk
exactly

1588651022
foobles
its seems a bit unclear though, an kinda non-obvious. why does `anyerror` support any possible error, and not just the names of already defined error values?

1588651159
andrewrk
that's what it is, any defined error values, global to the entire application

1588651175
andrewrk
you can still get a safety panic from @intToError(anyerror, x)

1588651254
andrewrk
if your argument is that `anyerror.Foo` should not cause a particular error name to come into existence, then I think you may be on to something

1588651270
foobles
yeah, that's what im talking about more

1588651287
foobles
like it makes sense to be able to do `anyerror.AnythingDefinedInTheProgram`

1588651295
foobles
but for it to make new values seems weird

1588651804
retrhelo
leave

1588653285
fengb
anyerror encompasses itself too. You changed the global set by querying it!

1588653423
foobles
right!

1588653428
foobles
but thats super weird!

1588653438
foobles
and probably not very useful

1588690844
companion_cube


1588692128
oats
it always felt kinda weirdly bolted on in lua

1588693355
chapl
Hey! Somebody mind elaborating on what the difference between InStream#read() and InStream#readAll() is?

1588693461
alexnask
read may read less bytes than the buffer length

1588693479
alexnask
readAll reads until the buffer is full or read() returns 0 bytes read

1588693498
andrewrk
operating systems have the concept of "short reads" which unfortunately is sometimes semantically meaningful

1588693512
andrewrk
but almost always you want readAll

1588693567
chapl
Alright. If I have a buffer with 512 cap, and readAll says aight look, read 234 bytes... are the remaining 278 bytes in the buffer still undefined? I'd assume yes

1588693584
andrewrk
yes

1588693648
chapl
Ok cool. I have never done manual memory management in detail so one more question: People already explained to me that the number how many bytes were read is useful for trimming the buffer down to the amt of bytes read. How'd I do that?

1588694527
gpanders
chapl: Allocator.shrink or Allocator.realloc

1588695765
plumm
andrewrk: for out streams, is there any way to have a non async write function?

1588695811
andrewrk
plumm, the async-ness of the write function depends entirely on the underlying write function of the stream

1588695835
plumm
damn, so theres no way to write to a socket from a different thread?

1588695855
andrewrk
you also have the option to use a nosuspend block to assert at runtime that async functions will not suspend

1588695876
plumm
I don't quite fully understand async yet, was waiting for the talk for that

1588695909
plumm
I only opted to use evented io because thats required for the tcp connection

1588695912
andrewrk
if you're using the std lib event loop, I don't see why you would want to write to a socket from a different thread

1588695921
andrewrk
it's not required

1588695926
andrewrk
you can use blocking I/O with networking just fine

1588695937
plumm
I get an error about something WOULDBLOCK

1588695943
andrewrk
let me see

1588695946
plumm
ok sec

1588695974
plumm
/Users/haze/zig/build/lib/zig/std/os.zig:2551:61: 0x10579ebb8 in std.os.connect (run) const loop = std.event.Loop.instance orelse return error.WouldBlock;

1588695993
plumm


1588696123
andrewrk
plumm, it builds for me and works as expected when I use netcat to send messages

1588696129
plumm
:sob: im on darwin

1588696137
andrewrk
ah let me slap a -target on there

1588696153
andrewrk
it builds for darwin too

1588696166
andrewrk
are you getting a compile error or unexpected runtime behavior?

1588696175
plumm
runtime i think

1588696188
plumm
yeah, runtime

1588696192
plumm
on line 8

1588696196
plumm
0.6.0+4cb4097b0

1588696204
andrewrk
you get EWOULDBLOCK?

1588696220
plumm


1588696226
plumm
ye

1588696456
andrewrk
ok I can reproduce this

1588696919
andrewrk
plumm, yikes, spot the fail:

1588697022
tdeo
lol

1588697044
plumm
ok explain, i dont think im at that level of programmer yet ðŸ˜¥

1588697056
plumm
maybe just not used to those flags

1588697057
tdeo
first and last lines of the range

1588697078
andrewrk
no domain knowledge required - the values are typo flipped

1588697102
plumm
so the if should be above?

1588697122
andrewrk
ok I confirmed this fixes it. just a sec

1588697151
ifreund
nice one

1588697200
andrewrk
plumm, after this

1588697200
ifreund
i wonder what percentage of all bugs are simple typos as opposed to bad logic/misunderstanding

1588697291
plumm
ok lemme checkomundo

1588697355
chapl
andrewrk: Mind having a look? This fails with an out of memory error but it should work. The file is 56b in size and the buffer is 1024b.

1588697367
chapl
The buffer was 1024*

1588697411
chapl
"Unable to read network configuration from 'network.json': error.OutOfMemory. Falling back to default."

1588697439
plumm
andrewrk: works! thanks :D

1588697504
andrewrk
np

1588697648
plumm
andrewrk: this however is now failing

1588697666
plumm
no errors and my program exits :(

1588697976
andrewrk
you must be getting error.EndOfStream, then yeah?

1588698063
plumm
if that were the case the parent function (connect) would return without error and the test wouldn't fail :/

1588698093
plumm
e.g i put a debug.warn after the loop that it breaks from but that is never printed

1588698121
andrewrk
this is a good chance to learn more about system debugging tools so you can get more introspection into what's happening

1588698150
plumm
I tried to use dtrace but its not liking how i remember it, trying to find an alternative now

1588698157
plumm
s/liking/working

1588698601
plumm
and gdb sucks ass on mac os ugh

1588698693
ifreund
try lldb? that's the one apple uses i think

1588698699
fengb
lldb works decently

1588698736
plumm
dam lemme try that

1588698747
ifreund
i've poked at it a bit on linux but gdb has been better for me on linux so far

1588698763
ifreund
but yeah apple uses their own version of the llvm toolchain, including lldb

1588698921
dimenus
i wish lldb had a more cgdb like frontend

1588698952
plumm
ok everything works i am just big huge dum

1588698960
plumm
thanks for the lldb tip that was so smooth

1588698984
ifreund
no problem

1588699918
chapl
Somebody mind helping me out by pointing out what I'm doing wrong or why this fails?

1588699933
chapl
The 'catch unreachable' is intentional.

1588699953
chapl
Oh wait

1588699955
chapl
wtf

1588699958
chapl
"try array_list.ensureCapacity(math.min(max_append_size, 4096));"

1588701287
oats
hmm, I was really hoping `&.{ foo, bar }` would work as short syntax for a slice literal :<

1588701560
andrewrk
I think that is likely to be improved to work as

1588701568
andrewrk
s/ as//

1588701594
andrewrk
I can't think of any reason to not make that work

1588701615
plumm
do you have any idea why accessing an outStream() from another thread would cause EXC_BAD_ACCESS?

1588701634
tdeo
do you get a backtrace?

1588701720
plumm
no :(

1588701728
plumm
I only found this out using lldb

1588701745
tdeo
`bt` for a backtrace in lldb

1588701821
plumm
well yeah there is one but its just startFn -> posixThreadMain -> libsystem_pthread ...

1588701843
tdeo
what function does it happen in?

1588701922
plumm
i have a function that opens a socket to an address using tcpConnectToAddress, i spawn a thread that has the write outStream and thats where it begins

1588706597
chapl
andrewrk: Mind starting a livestream? Would like to see more No-LLVM work :P

1588706747
plumm
^

1588708347
layneson
^^

1588708366
chapl
if he'd just respond.. :'D

1588718061
plumm
hes heads down in work, we must'nt disturb

1588718508
plumm
:^) hi firefox

1588718534
waleee-cl
FireFox317 got an upgrade today

1588718549
FireFox317
Hey :D

1588718556
waleee-cl
(firefox that is)

1588718832
FireFox317
andrewrk, quick question, we are debugging some networking code on kristoff_it stream. Do you have time to join? We are not exactly sure what the issue is

1588718910
FireFox317
it comes down to the connect function in os.zig, should it be waiting on writable or readable or only on writable?

1588719211
oats
is "error" a reserved keyword?

1588719296
shakesoda
yes

1588719297
tdeo
yes

1588720232
kristoff_it
Hello, during my stream today I discussed with a few people from the Zig community about the idea of doing some kind of Zig virtual meetup in the near future. If you're interested I wrote a (extremely rough) first idea of how it should look like. If you have any comment please feel free to let me know and/or open an issue there:

