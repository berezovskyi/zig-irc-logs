1582249350
jaredmm
translate-c works if I extract the header code that isn't translating to its simplest form. I'm not sure what part of the Windows header causes the problem and they are vast. Any pointers for ways to investigate?

1582253760
mikdusan
full disclosure: I don't know what I'm doing -- just unpinned an issue that was closed; think it was that illegal instruction thing.

1582263456
andrewrk
mikdusan, sounds good, I just wanted that there until the downloads got fixed

1582270538
Snektron
I wonder whats more powerful

1582270554
Snektron
A 3990X or 4.6 million Z80's

1582289125
pixelherodev
`zig fmt` integration in Vim has ruined my ability to indent properly :P

1582289139
pixelherodev
I just leave formatting a total disgusting mess (don't even always bother hitting newline) and let the formatter clean it up :P

1582289167
Xatenev
pixelherodev, I always do that lol

1582289171
Xatenev
in all languages

1582289193
Xatenev
function a() { do something; do something else; yes; }  - Ctrl L

1582289195
Xatenev
done

1582289196
Xatenev
:P

1582293052
pixelherodev
There a standard way of using ANSI escape codes?

1582293379
dingenskirchen
didn't find a proper[tm] way, but I'd personally go with constants like ANSI_RED and ANSI_RESET to use format() with

1582296672
pixelherodev
Yeah, but for now `\x1B[32m` in one or two places is fine

1582296851
fengb
Uh oh... I've been assuming *u64 == *u32. That's a little endian nism right?

1582296917
pixelherodev
Yeah

1582296931
pixelherodev
Unless Zig defines otherwise, which would be interesting...

1582296936
shakesoda
hope u like swapped bytes

1582296945
pixelherodev
Actually, that's an interesting proposal

1582296965
shakesoda
zig should absolutely, for sure, not attempt to correct for endianness lol

1582296965
pixelherodev
All code can assume that it's running on little endian systems, and the compiler implicitly changes pointer accesses on big endian systems to facilitate this

1582296968
fengb
I'll just pretend BE doesn't exist :P

1582296983
shakesoda
BE practically doesn't exist on modern systems, so that's fair

1582296989
fengb
I don't think it's actually bad yet... but I'm too lazy to redesign

1582297002
pixelherodev
There are BE-capable modern systems, aren't there?

1582297006
pixelherodev
IIRC OpenPOWER?

1582297010
shakesoda
yes, but nobody uses them in BE

1582297021
fengb
I'm mostly assuming union locations are fixed, and I don't think I ever actually cross types

1582297023
shakesoda
both arm and power are bi-endian but everyone uses them as LE, iirc

1582297027
shakesoda
mips is LE these days too

1582297057
shakesoda
I think the only users of such hardware in BE would be some crazy network hardware

1582297082
shakesoda
i.e. things crazy enough that avoiding byte swapping for stuff going through the pipes actually saves money

1582297102
fengb
Hmm... HFTs? :P

1582297124
fengb
Those nanoseconds count

1582297125
shakesoda
for my own purposes the last time I had to deal with BE was previous gen consoles

1582297140
shakesoda
x360 etc

1582297171
fengb
Oh that was still on POWER?

1582297185
shakesoda
yep, that was ppc

1582297213
shakesoda
ps3 was also power

1582297239
shakesoda
...and so were the wii and wii u, now that I think about it

1582297259
fengb
The last hurrah

1582297453
fengb
I'm getting into the weird state where both endians are making sense and it's confusing me

1582297622
shakesoda
fengb: abort! abort!

1582297630
shakesoda
endians do that to me, too

1582299099
pixelherodev
I'm going to submit a patch shortly to add ANSI codes to zag

1582299135
pixelherodev
Just as soon as I figure out a good namespace to put it in...

1582299343
pixelherodev
Also, I love that std.debug.assert improves optimizations in releasefast/releasesmall modes

1582299390
pixelherodev
Huh, some ANSI codes are already in std.debug

1582299475
pixelherodev
... but they're not public?

1582299580
pixelherodev
Would a patch to create e.g. std.ansi, move those constants in there and have std.debug use them from there be accepted?

1582300027
metaleap
pixelherodev "std.debug.assert improves optimizations in releasefast/releasesmall modes" how's that work, the compiler actively watches out for any calls to a symbol resolving to exactly std.debug.assert? pretty neat if so

1582300031
Xatenev
I never understood why network byte order is big endian but everything else uses little endian

1582300033
Xatenev
anyone has a clue? :p

1582300046
pixelherodev
metaleap, nah, because it uses unreachable

1582300047
Xatenev
I always thought its just historical reasons.

1582300057
metaleap
ah yeah gotcha, of course. even neater

1582300058
pixelherodev
So the optimizer knows that whatever's inside the call can't be true

1582300198
fengb
BE was popular when networking was invented. DEC, PDP, were all BE

1582300217
fengb
I think x86 was the outlier that ate the industry

1582300229
pixelherodev
AFAICT it's for the same reason tabs are banned in Zig

1582300237
pixelherodev
"It doesn't matter, just shut up about it and get back to work"

1582300272
fengb
But... mah tabs and carriage returns

1582300298
mikdusan
never mind that. what about EBCDIC support /s

1582300318
pixelherodev
If the RFC reference to

1582300322
pixelherodev
I think they flipped a coin. Literally.

1582300420
fengb
"By  the  way,  if  mathematicians had their way, every sequence would be

1582300420
fengb
numbered from ZERO up, not from ONE, as is traditionally done."

1582300485
fengb
They're not wrong >_>

1582300771
Snektron
In my experience its mathematicians who count from one

1582300798
companion_cube
depends on whether they write \sum_{i=1}^n or a actual sequence

1582300806
companion_cube
they also mix indexing afaict

1582300837
Snektron
Matlab, R and Julia (all languages targetted at mathematicians) are 1-indexing

1582300847
fengb
Like Perl? :P

1582300857
companion_cube
heh, not targetted at mathematician, but engineers and statisticians

1582300863
companion_cube
applied math, yeah, agreed

1582301318
nepugia
wasn't the reason tabs are banned just that the stage 3 compiler isn't finished?

1582301576
shakesoda
that's what the wiki says

1582302417
Barabas
What's the best way to set a (C) struct to zero? Ideally I'd want to do: `const myvar: mystruct = {}/0/null/whatever`;

1582302471
andrewrk
Barabas, std.mem.zeroes(mystruct)

1582302515
andrewrk
const myvar = std.mem.zeroes(mystruct);

1582303158
shakesoda


1582303163
shakesoda
that was pleasant

1582303216
shakesoda
adding chunks should be thread safe (as it is in the compute shaders) although I haven't tested that

1582303308
Barabas
andrewrk thanks!

1582304146
xackus
do zero length slices always have  a null pointer?

1582304312
karelb
hey. I like ziglang, but have no clue what to do or build with it. So, I had an idea. I like protobuf. I will write some library (ish) to support protobuf in zig. Is that a good idea?

1582304324
karelb
I have no real idea how zig actually works

1582304329
karelb
so it will be funny

1582304349
karelb
it looks like something at least a bit doable, right...

1582304369
andrewrk
xackus, @as([]T, &[0]T{}) gives .ptr = undefined, .len = 0

1582304387
karelb
probably code generated, like golang protobuf support

1582304406
xackus
thanks, andrewrk

1582304410
andrewrk
karelb, if you're looking for something to do, how about inflate/deflate in zig?

1582304422
andrewrk


1582304464
karelb
hmm

1582304492
andrewrk
here's another one: ryu for printing floats:

1582304493
karelb
not a bad idea either

1582304546
karelb
#zig

1582304550
andrewrk
more inspiration, search open issues for  label:"contributor friendly" label:"standard library"

1582304559
karelb
1299 I have no idea what it’s about, haha

1582304563
karelb
ok thx

1582304655
Barabas
oh, doei

1582304888
fengb
karelb: I have a partially implemented, braindead protobuf:

1582305147
betawaffle
andrewrk: when's the next stream?

1582305200
andrewrk
today, 5pm EST, which is in 4 hr 50 min. topic will be more casual game dev

1582305502
nepugia
finding your twitch channel has been quite difficult for me, perhaps you could add a link to your website for people that follow me in trying to find it :P

1582305511
nepugia
s/to/on/

1582305854
andrewrk
good point

1582306427
andrewrk
BaroqueLarouche, are you available to confirm that ZigGBA works correctly with the sub-architecture-annihilation branch?

1582306431
andrewrk
I sent you a PR

1582306561
BaroqueLarouche
I’ll check that tomorrow, today is my birthday

1582306582
BaroqueLarouche
Or at best tonight before I go to bed

1582306656
frmdstryr
How can I iterate over a tuple?

1582306686
frmdstryr
`for (args) |arg| {` is saying error: unable to evaluate constant expression

1582306753
andrewrk
happy birthday BaroqueLarouche!

1582306825
andrewrk
frmdstryr, that is supposed to work

1582306884
mq32
frmdstryr: std.meta.fields

1582306969
fengb
Not sure we should allow iterating over any tuple since they’re heterogeneous

1582307140
companion_cube
a comptime iteration should be ok, right?

1582307140
companion_cube
I mean, inline iteration

1582307140
fengb
Er... over all tuples

1582307270
andrewrk
fengb, frmdstryr: oh, right. try `inline for`

1582307436
frmdstryr
error: cannot store runtime value in compile time variable

1582307444
frmdstryr
I guess i'm just using this wrong

1582307664
Snektron
andrewrk, wasn't someone already working on ryu?

1582307715
andrewrk
it doesn't look like anyone is actively working on it to me

1582307751
andrewrk
oh, never mind! I just double checked and the latest commit in

1582307769
andrewrk
it's always exciting to see tiehuis contributing :)

1582307780
fengb
He hides

1582307926
Snektron
Oh btw, it doesn't look like there was ever any movement of using mremap in std.heap.page_allocator

1582307971
andrewrk
TIL about mremap

1582307998
Snektron
i'm sure i mentioned it before

1582308006
andrewrk
I believe you. I miss half of what goes on here

1582308205
Snektron
Should improve speed on programs which make heavy use of realloc

1582308284
andrewrk
of large allocations

1582309792
andrewrk
feeling pleased with this UX:

1582310488
BaroqueLarouche
andrewrk: looking nice!

1582310694
BaroqueLarouche
thanks for the birthday wishes, now a 34 year old fart

1582311465
fengb
You have 1 more year before being old! :P

1582311473
BaroqueLarouche
haha yes

1582312858
scientes
andrewrk, wow! that is an amazing number of features

1582312929
scientes
although I would suggest dropping the pre-thumb arches (before armv5t)

1582312943
BaroqueLarouche
please dont

1582312945
scientes
as those are completely unsupported, even by the compilers

1582312975
BaroqueLarouche
unless you mean before armv4t

1582312982
scientes
yes, that is what i meant

1582312986
scientes
got 5 and 4 confused

1582313006
scientes
armv4t

1582313021
scientes
(so that includes the armv4 non-thumb)

1582313038
andrewrk
not sure why you think they are unsupported

1582313071
scientes


1582313079
scientes
Support for revisions of the ARM architecture prior to ARMv4t has been deprecated and will be removed in a future GCC

1582313084
scientes
The values of -march that are deprecated are: armv2,armv2a,armv3,armv3m,armv4.

1582313121
scientes
I don't think claŋg

1582313186
scientes
andrewrk, e.g.

1582313194
scientes
"2.Supports ARMv5+, Thumb, Thumb2"

1582313207
scientes
(although that author has it wrong, and means armv4t+)

1582313262
scientes
for example, if you want documentation of the old non-IEEE compliant floating point in those pre-thumb CPUs you have to do a special request from ARM

1582313271
scientes
its mixed-endian too

1582313358
scientes
the big early feature that we

1582313423
BaroqueLarouche
any cool device that use pre armv4t ?

1582313452
scientes
BaroqueLarouche, I had a armv5t device, and its pretty slow by today's standard, the Nokia N900 phone also had a armv4t chip

1582313459
scientes
(I had the sheevaplug)

1582313476
BaroqueLarouche
unless you want to change the AI of a Super Famicom Shogi game 😁

1582313501
scientes
BaroqueLarouche, hehe, indeed

1582313547
scientes
they are probably used in industrial automation, specifically the strongarm chips, but I don't know what I am talking about

1582313589
scientes
so while that would be an argument against turning it off needlessly, I wouldn't want to be the person to try it

1582313651
scientes
yeah, so I take back what I said---if you try to use it you probably know the limitations and know you will have to deal with bugs

1582313666
scientes
(and know you can't use the floating-point)

1582313703
scientes
cause generally every programmer assumes IEE# 754, and zig should probably have some flag so that zig programs can also assume that, and force soft-float if it is unavailable

1582313735
BaroqueLarouche
I have made a FixedPoint generic struct, still local to my machine

1582313770
scientes
does it only have a single method? i.e. is it actually a generic?

1582313780
scientes
*a single member

1582313823
BaroqueLarouche
you can specify the number of bits of the integral and the fractional part

1582313842
scientes
yeah, but those values need to only be part of the type, and not part of the run-time value

1582313870
BaroqueLarouche
they are part of the type

1582313877
scientes
OK, cool

1582313886
scientes
another feature that doesn't have to be part of core

1582313921
BaroqueLarouche
nope, it will only useful for old computers and consoles that don't have FPU

1582313937
scientes
fixed-point has use even in computers with a FPU

1582313969
scientes
every financial application uses fixed-point math

1582313985
scientes
(or decimal floating point, but that is uncommon)

1582314011
scientes
(again, I don't really know what I am talking about)

1582314103
fengb


1582314153
fengb
I should slap together a Zig project on iOS

1582314306
andrewrk
I wonder if there are any open source projects which are clean-room libc headers for iOS with a MIT-compatible license

1582315239
fengb


1582315254
fengb
I wonder if any of these are C compatible

1582318544
Cadey
has anyone made a nix package for using the zig nightly tarballs?

1582318792
andrewrk
Cadey, not that I'm aware of

1582319101
andrewrk
Cadey, the binary downloads work on NixOS though - no patchelf needed.

1582319155
andrewrk
Also the nixos package doesn't have any patches. Zig respects the nixos environment variables for c compiler and linker flags

1582319210
Snektron
How long are nightlies available?

1582319249
andrewrk
Snektron, every month I manually delete builds older than 1 month

1582319440
Snektron
Ah, so not anything to be relied upon

1582319620
Cadey
andrewrk: i'm probably gonna make something that auto-fetches the binary packages kinda like

1582319869
Barabas
error: expected type '[*c]?*c_void', found '**c_void'

1582319875
Barabas
note: pointer type child '*c_void' cannot cast into pointer type child '?*c_void'

1582319880
Barabas
Shouldn't that be possible?

1582319919
andrewrk
oh shit, I can't stream yet because the "build all glibcs" command I started in the morning is still running and maxing out my cpu cores

1582319932
andrewrk
and it is incapable of resuming if it gets interrupted

1582319967
companion_cube
ctrl-z ? :D

1582319977
companion_cube
(will eat your RAM still)

1582319984
Barabas
Download some more cores :P

1582319999
andrewrk
I have enough ram. that migth actually be the first time ever I had a legitimate use case for ctrl+Z

1582320025
andrewrk
wow amazing it works perfectly

1582320028
companion_cube
I often do `ctrl-z` followed by `fg ; notify-send 'done'` so I can focus elsewhere

1582320031
Barabas
hahaha

1582320046
fengb
I've never trusted ctrl-z >_>

1582320062
companion_cube
ctrl-z always worked super well for me

1582320170
andrewrk
Barabas, consider: you give a

1582320195
andrewrk
so, an automatic type coercion is not allowed

1582320223
Barabas
Aha!

1582320225
Barabas
I see.

1582322469
SyrupThinker
+1

1582322482
nepugia
I must say, betawaffle is a great nickname

1582322487
betawaffle
thanks

1582322788
dimenus
andrewrk: I re-did my PR to move the checking up to targets.cpp and now my breakout clone runs great

1582322795
dimenus
however the tests immediately fail

1582322810
dimenus
Build Dependencies...lld: error: undefined symbol: _Unwind_Resume

1582322810
dimenus
>>> referenced by functexcept.o:(std::__throw_logic_error(char const*)) in archive /usr/lib/libstdc++.

1582323004
Barabas
I thought: "This is the umpteenth time I needed `testing.expectNotEqual(a, b)`, let me write it, it's probably super easy..." and then I saw how big `testing.expectEqual` actually is...

1582323010
Barabas
Maybe some another time :P

1582323201
SyrupThinker
Whilst enjoying the stream nepugia and I try to make use of these machines:

1582324043
mikdusan
what brand is the one on the left? that red light (power indicator?) is pure gold

1582324118
companion_cube
is it me, or is andrewrk's mic quite low?

1582324267
nepugia
Seems very quiet to me too

1582324376
mq32
SyrupThinker: IBM Portable!

1582324396
mq32
(or is it a clone?)

1582324412
nepugia
It's the IBM Personal Portable Computer indeed

1582324446
nepugia
mikdusan, TIS-80 4P

1582324472
mq32
big thumbs up! some friends of mine have an IBM portable as well

1582324480
mq32
or a Compaq variant of it

1582324544
companion_cube
betawaffle: LSP isn't in utf16 once you're on the wire, it's just json ;)

1582324559
betawaffle
oh?

1582324567
betawaffle
maybe i was too quick

1582324570
companion_cube
it's jsonrpc-2.0

1582324593
companion_cube
so, a small header, followed by a json object

1582324595
companion_cube
for each message

1582324671
companion_cube
damn I dislike this twitch chat thing, I don't want to create an account there -_-

1582324703
mq32
companion_cube, sadly you need an account, but: twitch chat has an IRC bridge

1582324704
nepugia
twitch doesn't want to play in mpv properly for me, so using chromium, eh :/

1582324801
companion_cube
so many walled gardens…

1582324840
nepugia


1582324857
Barabas
We live in a free world, just stick to the rules, ok? :P

1582326470
metaleap
betawaffle companion_cube what is there LSP talk on the stream? i'll catch up on that one tomorrow (too late here) but feel free to enjoy my jsonrpc2.0 engine at

1582326498
betawaffle
oh cool

1582326505
metaleap
(all that was just prep work for my wip zig lsp of course... slow going right now)

1582327000
companion_cube
y'all should probably coordinate a bit more

1582327016
betawaffle
coordinate on what?

1582327034
companion_cube
making one LSP

1582327056
betawaffle
i think metaleap is

1582327081
companion_cube
I had the impression there were already several competing efforts, but ok

1582327095
betawaffle
i mean, maybe there are, but i'm not writing one

1582327110
companion_cube
yeah it was a general "y'all"

1582327115
companion_cube
all y'all

1582327125
fengb
This is at least the third :P

1582327128
betawaffle
i'm from Georgia, i get it

1582327138
companion_cube
or should I say "z'all" ? 🤔

1582327149
nepugia
z(all)

1582327155
companion_cube
@z(all)

1582327186
fengb


1582327222
betawaffle
competition is good

1582327272
fengb
Getting one done is better :P

1582327379
fengb
(I'm not sure I should talk about getting anything done)

1582327668
mq32
fengb, you wanted to do stuff on the wasm interpreter, right?

1582327671
mq32
how's it going?

1582327684
fengb
Uh... it parses an empty wasm file

1582327692
fengb
(lol)

1582327708
mq32
oh, i can do that as well!

1582327708
fengb
Actually the entire bytecode parser is "done"... or at least coded directly to spec

1582327738
fengb
I need to convert it to the proper internal code, then actually run it

1582327741
pixelherodev
Yay!

1582327742
pixelherodev
Parsing emptiness is a great second step

1582327761
fengb
Which the opcodes are somewhat done, and I blindly implemented function calls

1582327776
fengb
So it's like maybe 30-40% functional. But it looks like 0% so there's that :P

1582327831
fengb
I stalled a bit trying to find documentation on how the wasm stack works. I'm pretty sure that... there's no standard for it so I just made something up that'll hopefully work decently

1582327943
metaleap
here bed-time wip shot

1582327974
mq32
i just refactored my bytecode parser into something great:

1582327975
metaleap
need to get those locals and func-args out of the symbols-listing :D

1582328009
mq32
metaleap: what font is this?

1582328026
metaleap
the code or the ux font?

1582328048
metaleap
the code font is:

1582328051
metaleap
"editor.fontFamily": "'M+ 2m medium'"

1582328067
mq32
hmm, looks good

1582328077
metaleap
easier to google as "migmix".. got it once way back from some ubuntu fonts pkg and got really into it

1582328133
mq32
yay -S ttf-migmix

1582328135
mq32
let's do this!

1582328150
Barabas
What editor is that?

1582328159
mq32
zig comptime is just such an awesome feature ♥

1582328163
mq32
Barabas: probably VSCode

1582328198
Barabas
Ah yeah probably that webbrowser :P

1582328235
shakesoda
i'd complain about it a lot if it weren't also a really good editor

1582328258
mq32
shakesoda: yeah, it's kinda the thing

1582328260
shakesoda
but it is, so it's kind of hard to do that aside from wishing it used less ram

1582328309
fengb


1582328314
fengb
I hope it actually works

1582328354
mq32
yeah

1582328359
mq32
i thought rewriting my VM is a piece of cake

1582328365
metaleap
re vscode: i have visions of creating a textmode editor "zodium" in zig that loads vscode settings-files and extensions (they're just nodejs proggies anyway) and behaves similarly ux-wise (panels, terminal, diags-view etc) .. once i figure out the termios situation in zig and the LSP is "done enough"  :D

1582328368
mq32
and now i'm sitting here, writing unit test by unit test

1582328376
shakesoda
i've only used a tiiiiny bit of comptime so far

1582328392
shakesoda
for basic stuff like this

1582328490
mq32
shakesoda: my example above is pretty much the stuff you cannot do in a lot of languages

1582328550
mq32
i encode the instruction encoding directly in my Instruction-union

1582328564
mq32
so i can add new instructions and the encoder will decode them happily

1582328616
fengb
Yep same. It feels good if it works

1582328628
mq32
yeah

1582328638
mq32
i can now simplify my code again

1582328762
fengb
“Reimplementation of the LoLa language in C++” 🤔

1582328777
mq32
yeah, now: Zig :D

1582328781
mq32
Iteration v3

1582328878
Barabas
> and now i'm sitting here, writing unit test by unit test

1582328887
Barabas
You should do that before writing your code :P

1582328907
mq32
nah

1582328917
fengb
Hard to unit test VMs

1582328926
mq32
yeah, but i can debug a lot of stuff

1582328928
mq32
*test

1582328944
Barabas
Why not?

1582328957
Barabas
Zig is pretty great for it

1582328957
mq32
because it assumes the impossible:

1582328973
mq32
to know the correct type of API before implementing a thing

1582328978
companion_cube
I thought TDD was something only dynamic language users did :)

1582328986
mq32
just look at zig and how often we have breaking changes

1582328990
companion_cube
I like type-driven development personally 🙃

1582328991
Barabas
Yeah the API thing is also one of my objections

1582329019
mq32
if we would program to fulfil a predefined API instead of a evolutional API

1582329057
fengb
I think it’s fine for specific cases. For VM development, the obvious units are too small and only behavioral tests are concrete tests

1582329058
Barabas
But suppose you're using your unfinished API, it's still good to test your code before it crashes in a production environment

1582329076
Barabas
So, you could argue you should write tests anyway ^^

1582329080
mq32
but TDD is "write tests, then code"

1582329083
mq32
i go the other way

1582329085
fengb
Like there’s no way for me to test my op codes because that’s dumb

1582329094
companion_cube
just write integration tests, man

1582329094
mq32
because i often refactor my APIs one to five times when developing them

1582329187
Barabas
It's very hard to test everything with integration tests.

1582329207
mq32
it's even harder to test stuff with unit tests

1582329217
Barabas
Depends

1582329226
mq32
most stuff in "real software" isn't really testable as it depends on the outer world

1582329248
Barabas
Nah

1582329254
fengb
Yeah it depends. I have a few unit tests in wazm already and it’s been useful

1582329254
companion_cube
it's very to test everything with any technique

1582329266
fengb
Just... nothing in the core logic yet

1582329292
mq32
i got the job to test software a colleague is writing

1582329294
companion_cube
(I guess the one exception I know of is sqlite, and they have 100× more loc for tests than for the DB itself)

1582329298
Barabas
It's easier to write tests for all edge cases for one small class than to write integration tests which cover all edge cases in your whole software.

1582329316
mq32
and i say: it's impossible to test this stuff with "inside tests", black box tests are the way to go here

1582329339
companion_cube
I guess it depends on what you write. If you're writing a compiler, the number of edge cases is absurdly high, and testing components in isolation is very hard

1582329344
nepugia
both types of tests can only protect you against failures you can predict or know about

1582329355
mq32
<nepugia> both types of tests can only protect you against failures you can predict or know about

1582329356
mq32
this

1582329361
Barabas
@nep

1582329372
mq32
you cannot test against failures you don't know

1582329378
Barabas
nepugia that's why with TDD you write tests before you write code ^^

1582329379
fengb
Depends. Many unit tests I find are testing trivial things that are too tiny to be useful

1582329390
Barabas
So you don't have any code you didn't test.

1582329412
mq32
Barabas: how would you develop a serial driver then? ;)

1582329416
nepugia
Barabas, that hardly helps, if you have a new failure case (compiling breaks when you sneeze into your microphone) you cannot protect against that, if that is outside your known enviroment

1582329418
mq32
i cannot write tests for that

1582329428
mq32
neither unit- nor integration tests

1582329428
Barabas
sure

1582329433
Barabas
some things you can't write tests for

1582329435
fengb
Like... I cant unit test Redux at all because all the units are too tiny and have no core logic

1582329448
Barabas
But most software isn't drivers ^^

1582329476
Barabas
Graphics stuff is also hard/impossible to test.

1582329482
companion_cube
how do you unit tests video games?

1582329488
nepugia
for drivers i sure like fault tolerance like minix3 does it, they survive so much compared to other OS drivers :3

1582329501
companion_cube
sounds like "most software" is hard to test :)

1582329507
Barabas
lol

1582329508
Barabas
no

1582329513
mq32
companion_cube: "startGame(); assert(looksGood());"

1582329515
Barabas
There's plenty to test in video games

1582329517
fengb
But some other things I managed to unit test decently. Like parsing varints, or doing sexprs

1582329524
Barabas
just not your graphics side of things

1582329530
companion_cube
I don't know how you would test a graphic engine

1582329533
companion_cube
or gameplay

1582329548
Barabas
sure

1582329566
nepugia
getting too tired to finish physics colision in my game lol... started some days before the first sdl stream, funny coincidences

