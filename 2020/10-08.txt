1602135571
daurnimator
u0jQx9gPyrYg: also `git stash show -p`

1602135575
daurnimator
also `git reset -p`

1602146651
ifreund
git restore -p

1602147384
Michcioperz
the worst part of `git restore` is when you go back to a device that doesn't have a recent version of git on it

1602147406
ifreund
true

1602147429
ifreund
idk why I started using it, I still never use git switch

1602147517
Michcioperz
i use both and zsh doesn't autocomplete them for me and it's awful

1602155484
ifreund
what are the semantics of a pointer to a zero length array?

1602169247
ifreund
tdeo: My scanner's now far enough along that I wanted to implement hello-wayland and I immediately hit the dependency loop in xdg-shell

1602169258
tdeo
yeah :(

1602169267
ifreund
have you looked at fixing this yet? I may give it a go if not

1602169301
ifreund
also is there an issue for it? I couldn't find one

1602169304
tdeo
i looked for a bit but didn't think of anything

1602169310
tdeo
there is an issue, sec

1602169342
tdeo


1602169351
ifreund
that's a low number

1602169371
tdeo
you could have an ugly initGlobalState() function which patches the interface stuff in

1602169377
tdeo
as a workaround

1602169381
tdeo
it's pretty terrible though

1602169385
ifreund
that sounds aweful

1602169404
ifreund
I think I'll bash my head against stage1 a bit first

1602169456
tdeo
i'll happily answer any questions that i can help with while i'm here

1602169476
tdeo
seemed hard to find people to do that with stage1

1602169521
ifreund
appreciate it

1602169592
tdeo


1602169604
ifreund
is there anything that's not in ir.cpp?

1602169621
tdeo
analyze.cpp/ir.cpp/codegen.cpp are the main files

1602169635
tdeo
codegen.cpp does most of the llvm stuff but analyze.cpp also creates some llvm types

1602169678
ifreund
cool

1602169729
ifreund
I guess one way to get started would be to make a simple test case and step through it with gdb

1602169767
tdeo
i like to break on add_node_error and go up the stack

1602169917
tdeo
i think `const x: *const u8 = @ptrCast(*const u8, &x);` would pass with this working, which is kinda neat

1602169926
tdeo
seems like the simplest case

1602170056
ifreund
heh, that's weird but I like it

1602184433
g-w1
r¹HD"áъâñ8LH!ãxw.JäóyLÓü=ï¬(ÓKD+J¥R=Ü2æ¥~í{¼¸ÁWìÌ-lm¢Í ¶6ôUg¢õĭõÄmáËÝ~·ô?Ø'P9ærN,î̒«Ôõ02օ}£¨w ý>Åé¥lDEèC£v5ÓP|æúòXüÞñ)öÖ×I[þ

1602184436
g-w1
ºZÐC©ö£ԩÑ-¶ë«՛c³|>µ

1602184438
g-w1
p±»ÁD¢2$Ù®³B§Uö´ñ2zoÎ(v=IEND®B`

1602184445
leeward
Indeed. Well said.

1602184446
g-w1
sorry about that

1602184474
leeward
:P

1602184484
pixelherodev
/s

1602184499
leeward
Hah, right, you're actually going to spend the next 7 hours on it. We know.

1602184510
pixelherodev
lolnope

1602184642
pjz
but you'll decrypt it using zig, right? :)

1602184929
ifreund
I'm happy that my font handled that

1602184945
pixelherodev
mine didn't :P

1602184956
pixelherodev
g-w1: dare I ask what that was?

1602185350
g-w1
i tried to paste an image into a different server to see what would happen and then the terminal interpreted it as escape codes, switched to zig and pasted it. I have learned my lesson. lol. pixelherodev

1602185415
pixelherodev
heh

1602185415
ifreund
so it really was random binary

1602185428
ifreund
idk how i didn't get any unicode fallback boxes then

1602185497
leeward
Your font is fancier than mine. I got oodles.

1602185541
radgeRayden_
maybe it just skipped all the obviously invalid codes, then you'd only see squares for valid codes that don't exist in your font

1602186741
ifreund
judge for yourself if you like:

1602186795
radgeRayden_
mine doesn't have the spaces

1602189182
u0jQx9gPyrYg
i get a 'LLVM ERROR: Unsupported library call operation!' during zig build. but no other info, how can i debug this?

1602189544
tdeo
u0jQx9gPyrYg: are you doing stuff with non-power-of-two ints?

1602189684
u0jQx9gPyrYg
like with u7? no, but i do use a few u256

1602190158
ifreund
well, you can always pull out gdb

1602190321
tdeo
u0jQx9gPyrYg: yeah it's probably the u256 actually

1602190330
tdeo
even power-of-two but big things are affected

1602190333
tdeo
i'll find the issue

1602190353
tdeo
ttps://github.com/ziglang/zig/issues/1534

1602190760
pixelherodev
I think >u128 is worse than non-power-of-two

1602190781
pixelherodev
e.g. u7 usually gets extended to u8 by LLVM, whereas u256 just fails

1602190790
tdeo
yeah that was the wrong thing to ask, non-power-of-two is broken in packed structs not for library calls

1602191713
u0jQx9gPyrYg
actually i do a `    const CreateReq = packed struct {op: ReqType, id: u256, alpha: u256};

1602191747
ifreund
hah, mixing u256 and packed structs, wcgw

1602192992
pixelherodev
Oof

1602193125
ifreund
man stage1 is kind hard to do anything with, I hate C++

1602193354
pixelherodev
I need to get some other stuff done today and tomorrow, and then rush ahead with some of next week's work to buy some time, then I'm dumping at least ten hours into CBE next week.

1602193394
ifreund
thing is, I want #131 before 0.7.0 so my wayland scanner is actually useful

1602193450
pixelherodev
ifreund: you could cheat for that

1602193454
pixelherodev
tweak translate-c instead ;)

1602193457
pixelherodev
... wait

1602193459
ifreund
huh?

1602193462
pixelherodev
Are you generating from C?

1602193464
pixelherodev
Or from XML?

1602193467
ifreund
xml

1602193472
pixelherodev
Generating Zig, right?

1602193479
pixelherodev
Just generate `@as` in there for now

1602193491
pixelherodev
That'll get you going for 0.7, and then you can clean it up for, hopefully, 0.8

1602193884
ifreund
I don't think that works?

1602193917
ifreund
the problem is recursive dependencies of globals

1602194054
pixelherodev
wait, what?

1602194058
pixelherodev
#131, you said?

1602194062
ifreund


1602194063
pixelherodev
oh oops

1602194066
pixelherodev
I was looking at #137

1602194069
ifreund
heh

1602195142
ifreund
what does this mean?

1602196411
tdeo
ifreund: that function seems to only have to do with debug info at least

1602196418
tdeo
but maybe "actual" means non-debug-info

1602196436
manikawnth
Hi, Can't 1 bit integers be type coerced to bool? `@as(bool, var_u1)` ?

1602196442
tdeo
@intToBool

1602196449
tdeo
wait, that doesn't sound like it exists

1602196452
ifreund
no

1602196459
ifreund
foo == 1

1602196485
ifreund
tdeo: mostly just confused by the comment there, as zig has global variables :D

1602196487
u0jQx9gPyrYg
so you say, packed structs and u256 doesnt mix? :/ i wanted to unpack a thing sent over the network.

1602196505
tdeo
nah, packed structs are just generally buggy and so are ints larger than 128 bits

1602196523
tdeo
but nothing specifically about them together i think

1602196574
ifreund
yeah i think you're likely just hitting u256 bugs, packed structs should work fine with nice power of two stuff

1602196634
tdeo
so any ideas on fixing 131 ifreund?

1602196690
ifreund
not really yet :/ I've spent a couple hours reading through stage1 and gaining understanding of how things work

1602196715
ifreund
zig's laziness makes things a little complicated

1602196736
ifreund
probably need to do the same thing rust did, but I don't see how to implement it yet

1602196825
tdeo
i find it pretty weird that this seems so niche that only wayland users cared about it for rust and now zig

1602196834
ifreund
heh

1602196881
ifreund
you only really run into it if you have some complex interlocking global constants

1602196905
ifreund
which doesn't usually come up in non-generated code

1602197319
ifreund
I'm off to bed now, don't feel like I've made much progress on #131 today but I now have some vague ideas as to how stage1 works at least

