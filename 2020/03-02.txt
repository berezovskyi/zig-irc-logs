1583108281
Snektron
This vga driver im writing for my toy os would be so much nicer in Zig

1583108337
Snektron
Maybe i should rewrite it once its working and add it to jzck's kernel

1583120123
daurnimator
did anyone figure a way to have a (comptime) lookup table of type -> function? something I could pass around at comptime

1583120895
andrewrk
daurnimator, were you planning on getting

1583120981
daurnimator
andrewrk: I asked you a while ago about what should go into os.zig vs fs.zig and your answer suggested my WIP for windows in that PR wasn't the route you wanted

1583120992
daurnimator
we should discuss that further

1583121000
daurnimator
will you be around in ~3 hours?

1583121027
andrewrk
probably not, I should be in bed by then

1583121077
andrewrk
I'm working on the pull requests, oldest to newest

1583121180
daurnimator
andrewrk:

1583121210
daurnimator
(which was in response to

1583136018
TheLemonMan
alexnask, yo, can you dump all the four WSL vdso phdrs?

1583136041
alexnask
sure give me a minute

1583136439
alexnask
TheLemonMan, updated the github comment

1583136456
alexnask
Thanks for taking a look, I appreciate it, I find WSL super useful

1583138580
TheLemonMan
it seems Microsoft decided to ship a prelinked vdso, something that Linux dropped support for back then with the 3.16 version

1583138629
daurnimator
TheLemonMan: what is a prelinked vdso?

1583138662
TheLemonMan
a vdso with a fixed & high load address

1583138722
daurnimator
and is there an auxval that indicates that or not? or how do you know?

1583138778
wilsonk
has anyone built an SDL2 app on win10 lately? I am getting a redefinition of main error when trying to 'usingnamespace @cImport({ @cInclude ("SDL.h"); ...

1583139095
TheLemonMan
daurnimator, eh that's a good question

1583139259
daurnimator
VER_FLG_BASE?

1583139299
alexnask
I can try to install Win10 insider to get WSL2, perhaps they use a concentional vdso

1583139326
alexnask
Can't find any info on it online though (or any vdso related issue in other software on wsl)

1583139348
alexnask
conventional*

1583139387
TheLemonMan


1583139392
TheLemonMan
nah it's something simpler

1583139477
TheLemonMan
I wonder if everything worked just fine only due to C + silently overflowing

1583139786
daurnimator
so what.... change to +% and issue fixed?

1583139804
alexnask
I'm trying that atm

1583139920
alexnask
I overflow elsewhere now

1583139923
alexnask
:D

1583139940
alexnask
I'll just change all overflows to use the unchecked version and report back

1583139960
TheLemonMan
hah

1583139983
TheLemonMan
the idea is to make the symbol lookup fail so that the vdso won't be used

1583140034
TheLemonMan
that's the lazy solution, the proper one is to detect and offset the addresses

1583140051
alexnask
Changing lines 25, 43 and 74 to use the wrapping versions of the operators works

1583140060
TheLemonMan
but 3.16 is an ooold kernel and WSL1 is on the way out so...

1583140107
TheLemonMan
alexnask, "works" as in the symbol lookup succeeds or as there's no more panic?

1583140130
alexnask
1 sec let me try

1583140370
alexnask
Lookup succeeds

1583140438
TheLemonMan
oh well, two (or more) wrongs make a right after all

1583140520
alexnask
lol

1583145813
dhawkie
hi. i am getting compile errors from included C headers: pub const gwset_num_threads = @compileError("unable to translate C expr: expected ')'' here");

1583145827
dhawkie
this is the line from the header: #define gwset_num_threads(h,n)>->---((h)->num_threads = n)

1583145843
dhawkie
most of the "defines" seem broken, is this to be expected?

1583146356
TheLemonMan
what version of the zig compiler are you using?

1583146388
dhawkie
0.5.0+00be93456

1583146398
dhawkie
very recent

1583146427
dhawkie
latest commit actually

1583146489
dhawkie
it was the same with 0.5.0+00be93456 (28 feb)

1583146518
dhawkie
very new to zig, so i am not sure if it's somehow my fault or what. the C libraries are third party, but open source

1583146622
dhawkie
zig manages to translate most of the rather complex header file, but fails on what seems like all the "defines"

1583146745
dhawkie
* it was the same with bee4007 (28 feb)

1583146830
TheLemonMan
yeah please open a ticket for that

1583146850
dhawkie
sure, will do. thanks

1583146864
TheLemonMan
translate-c is not expected to correctly translate

1583146937
dhawkie
I figured it should, I will create a ticket with relevant info

1583147322
daurnimator


1583147325
daurnimator
do we have such a thing?

1583147516
TheLemonMan
function-sections ?

1583147623
daurnimator
ah cool; just not exposed in build.zig

1583148978
mq32
function-sections and data-sections is great

1583149002
mq32
i don't think zig does need that (as it is lazy in what gets compiled anyways), but still quite useful

1583149357
daurnimator
mq32: see the linked article: the linux kernel is going to use it to do fine grained KASLR

1583149402
mq32
ah, oooh

1583149404
mq32
that is smart

1583149427
mq32
but it's sad that we need such stuff :(

1583149980
TheLemonMan
awesome, LLVM is also silently forgetting to spill/reload the clobbered registers for an inline asm block

1583161326
fengb
Is the current way of adding native alignment to a packed union to switch it to an extern union?

1583161949
fengb
Potential flame war: is this attitude common amongst game devs?

1583161994
BaroqueLarouche
I used NuGet with great success for tool development

1583162110
mq32
what attitude exactly? "package managers are shit"?

1583162301
fengb
Yeah

1583162310
mq32
hm

1583162328
mq32
it really depends i think

1583162353
mq32
but i stopped using package managers for native C/C++ projects as well

1583162365
fengb
Based on my sample size of 1 (JBlow), game devs seem to have a huge sense of NIH

1583162369
mq32
i used to rely on my distro manager, but i noticed that it only brings incompatibility

1583162405
fengb
That quote was specifically ragging against Rust due to the package manager

1583162415
mq32
hm, i can understand why

1583162424
mq32
rust package manager will cache your disk to death

1583162457
mq32
at least that's my experience

1583162474
mq32
you get library updates too often and the package manager won't remove old versions

1583162491
mq32
so my project with like 300 LOC was 2.5 GB large after two days of development

1583162522
fengb
Woudln't that imply the package manager is broken, not `*all*` package managers are broken?

1583162528
mq32
yes

1583162536
fengb
He doesn't even use a package manager in Linux. That'd drive me crazy

1583162545
mq32
NuGet has different problems

1583162557
mq32
You can chose your library quite well in visual studio

1583162569
mq32
but as soon as you go command line, nuget will fetch a package for all possible deployments

1583162579
mq32
so you want one library and you get like 8 oder 9 of them

1583162586
mq32
because microsoft fragmented .NET so much

1583162673
BaroqueLarouche
hopefully .NET 5 will fix that

1583162698
mq32
i don't think they can fix that :D

1583162712
mq32
i once had the problem that i had three .NETs intertangled in the same project

1583162724
mq32
because .NET core is not .NET standard is not .NET (classic)

1583162769
BaroqueLarouche


1583162825
fengb


1583162896
mq32
yep, so much 927 in there :D

1583162907
mq32
the main problem with .NET Standard is that it's incompatible to previous versions

1583162920
mq32
so you now have 20 years of .NET libraries

1583162926
mq32
and you cannot use them anymore

1583162950
mq32
and if you have an classic .NET project, you cannot use the newer libraries

1583162973
fengb
Java 8 released a bunch of new standards that pulled in great features from common libraries. The end result: all projects are a mix of all of those common libraries and Java 8 -_-

1583162985
mq32
oh, same problem :D

1583162992
mq32
i think C++ did the same thing

1583163027
alexnask
C++ has been importing Boost stuff in the std a lot yes

1583163184
alexnask
Spilled a half a cup of coffee on my keyboard

1583163194
fengb
It still works!

1583163204
alexnask
Yeah I was cleaning up for like half an hour :D

1583163215
fengb
Just do it the JS way: can't have duplicate standards if there are no standards

1583163248
waleee-cl
I did the same, but the leds in it got "weird" so had to dismantle it to dry everything out

1583163277
alexnask
I unplugged it straight away and checked the switched and pcb, got lucky I guess :p

1583163307
mq32
the good thing about all those package manger stories are: we as the zig community can learn from that before making the same mistakes again

1583163342
waleee-cl
mine is a mechanical one that uses a separate rubberdome-pcb for the media- & led-controls

1583163361
alexnask
Wow weird design waleee-cl

1583163365
waleee-cl
got coffe inside the rubberdome-keys

1583163392
alexnask
mq32, Yeah all we have to do is write a piece of software that literally everyone will like /s

1583163419
waleee-cl
alexnask:  its a semi-newish corsair K65, I would imagine that it's qute common if the media-keys isn't clicky on a mech.keyboard

1583163455
mq32
alexnask: yep, easy as that

1583163467
alexnask
I guess, you can't fit a cherry switch in there anyway.

1583163470
mq32
but i think andrews plan is unusual, but not bad

1583163479
fengb
It's a social problem. I still think it's possible to solve, but not technologically

1583163492
mq32
i think what people hate about package managers is "not being in control"

1583163494
companion_cube
what problem?

1583163503
companion_cube
(it's monday morning, sorry0

1583163532
fengb
All problems ðŸ™ƒ

1583163578
companion_cube
I mean, the main problem of zigpm is that it doesn't exist yet, right? :p

1583163605
TheLemonMan
vaporware is the best software

1583163664
gchristensen
definitely the softest of software

1583163665
Snektron
<alexnask "Spilled a half a cup of coffee o"> Spilled water on mine this morning

1583163673
Snektron
Its surprisingly resillient against it

1583163687
Snektron
Just had to dry it

1583163768
alexnask
Water spills are fine in 99% of cases

1583163769
fengb
Did you boil out the water? :P

1583163781
alexnask
Unless it has a crazy mineral concentration

1583163798
alexnask
Coffee can make switches sticky though

1583163914
alexnask
TIL about `dbg_ir_break`

1583163919
alexnask
nice

1583164223
companion_cube
TheLemonMan: so if you accidentally delete all your source code, does it make your program sublimeware?

1583164365
alexnask
rm -rf is my favorite optimizer

1583164505
TheLemonMan
solving a problem with 0 lines of code is definitely the best outcome

1583164549
mikdusan
I prefer rm -fr

1583164575
fengb
Negative lines is better

1583164710
fengb
Bleh... I keep kicking around the idea that I should finish my templating library

1583164733
fengb
To generate HTML easier. But I have too many half-finished projects

1583164788
TheLemonMan
that's the way to go, drowned in a sea of half-started projects

1583164967
fengb


1583165055
companion_cube
you don't necessarily templates, you could have combinators

1583165065
companion_cube
to build a html AST (with an arena it's fast)

1583165147
fengb
That'd still have nothing to do with whta I want to do -_-

1583165207
fengb
And because Zig's functional stuff isn't great, that code would look nothing like the output so it wouldn't solve my issue here

1583165362
companion_cube
what would "Zig's functional stuff" be anyway? :)

1583165476
fengb
Well, I'd need map/filter for it to look less crappy

1583165533
fengb
Otherwise the control flow will swamp the actual contents and it'd be barely scannable

1583165550
fengb
I should just invent my own Lisp that runs at comptime

1583165735
companion_cube
or use D :p

1583165742
companion_cube
but more seriously, comptime closures?

1583165832
fengb
At the end of the day, the templating engine generates an AST using text, so it'd be almost the same underneath the covers. Except it'd look nicer to use

1583165865
mq32
fengb, what about the approach of std.fmt and use a pub fn renderHTML or something?

1583165872
fengb
I had one half-built before I realized I needed comptime allocation. Then I realized I can work around it by preallocating... but lost interest before I circled back

1583165884
fengb
Yeah that's what I was doing

1583165899
fengb


1583165909
fengb
Also using my weirdo generators, which I should rip out

1583165951
mq32
hm

1583165967
mq32
i think i might have an idea on how to work without having a comptime programmable thing

1583165975
mq32
but it would not have dynamic template dispatching

1583166079
fengb
I'd also have to come up with an actual syntax for control flow

1583166118
fengb
`{% for %}{% endfor %}`

1583166141
fengb
Bleh, it's always harder than I'd like, so I just move on >_>

1583166192
Snektron
<fengb "`{% for %}{% endfor %}`"> Templating syntax is weird

1583166207
fengb
They're all bad. I need to pick one that's less bad

1583166219
alexnask
:D

1583166235
Snektron
I would switch it up and make the templating language the "major" language

1583166241
fengb
Or... I'm gonna keep complaining every 4 weeks but never make real progress because this is such a weird yak shave

1583166244
mq32
precomppile templates

1583166249
Snektron
Actually i would just mimic qml

1583166256
mq32
C#/T4 does that pretty right actually :D

1583166256
Snektron
<fengb "Or... I'm gonna keep complaining"> This is what i'd also so

1583166262
Snektron
do*

1583166455
fengb
I'm not sure I want arbitrary logic. That'd make the parser much harder

1583166471
companion_cube
just write combinators for outputing html into a buffer, srsly

1583166475
fengb
But... this is all handwavey stuff anyway

1583166512
fengb
Yeah that's what I do currently. It's getting a little unreadable already and I'm deferring adding CSS because it'll be even dirtier

1583166521
mq32
fengb:

1583166525
fengb
But... it's also not bad enough that I want to solve the problem for real

1583166614
fengb
I also like to kick around the idea that sexprs map to HTML super well and I want to invent my own language for that

1583166627
companion_cube
fengb: I said combinators, not writing printfs :p

1583166638
companion_cube
sexps? sgml? :P

1583167170
andrewrk
alexnask, what does `uname -r` report in that WSL you're using?

1583167219
alexnask
andrewrk, 4.4.0-18362-Microsoft

1583167253
alexnask
It's the latest build I think, I updated yesterday to check if the vdso code would work

1583167723
andrewrk
thanks, just curious

1583167964
Barabas
`zig fmt` seems to create some backup file with a name like `gIYUjiYHUjwqWLgp`

1583167970
andrewrk
fengb, at handmade seattle, casey never even stopped by to visit zig's booth

1583167997
Barabas
On Windows by the way.

1583168068
andrewrk
Barabas, hmm sounds like there may be a semi-recent regression in std.fs.AtomicFile

1583168124
Barabas
I'm fiddling around to see when it triggers, because it doesn't happen in every case

1583168152
Barabas
Only when using the full path it seems...

1583168174
Barabas
Also it fails to open files which start with ./

1583168183
Barabas
or .\

1583168205
Barabas
unable to open '.\window.zig': error.FileNotFound

1583168212
Barabas
unable to open './window.zig': error.BadPathName

1583168295
Barabas
I'll make an issue I guess or maybe two

1583168304
andrewrk
thanks

1583169339
fengb
Oh I think I've seen some of Casey's streams. He sounds... smart >_>

1583169442
fengb
I remember a rant about undefined behavior when subtracting 2 different pointers

1583169454
andrewrk
like j blow, he's smart, opinionated, and lacks perspective

1583169477
fengb
Yeah that's what I took away too. Trying to be nice :P

1583169593
companion_cube
who's casey?

1583169615
fengb
Guy who made Handmade Hero. I posted a rant-y twitter link earlier

1583169674
companion_cube
ah, the thing on package manager :s

1583169721
companion_cube
rolling my eyes at the assessment of rust

1583169724
companion_cube
lockfiles are a thing, man

1583169760
fengb
Nah, gotta invent your own

1583170144
andrewrk
btw does anyone here run freebsd as their main os?

1583171375
Barabas
Is it on purpose that zig fmt puts my multi-line function calls in one line, while it puts struct initialization on multiple lines, but not tuples? Hmm... looking at the short style-guide it doens't quite follow that.

1583171408
fengb
Adding a trailing comma forces multi line rendering

1583171425
fengb
func(a, b, c, )

1583171429
Barabas
oh

1583171450
Barabas
Let me check

1583171509
Barabas
Yeah that might explain some of the weirdness I'm seeing. Thanks.

1583171636
andrewrk
Barabas, you can make zig fmt switch to one line or switch to multiline with the addition or deletion of that trailing comma

1583171966
Barabas
Yeah I see. That makes it a lot better.

1583171993
fengb
Fake configuration :P

1583172074
Barabas
=D

1583180305
fengb
Hmm... so once I "finish" my wasm vm, I want it demoable online

1583180314
fengb
So does that mean I should compile it into wasm?

1583180325
fengb
Turtles all the way down

1583180344
nepugia
the question is then, can you compile it to js? ;)

1583180358
BaroqueLarouche
So you like wasm so I put an wazm into your wasm

1583180481
fengb
MichaÃ«l Larouche: perfect tagline ðŸ˜‚

1583180535
BaroqueLarouche
fengb:  Put that in the README with the Xzibit picture

1583180626
fengb
LLVM doesn't have a native JS, but it should be pretty easy to use binaryen to convert it

1583180670
fengb
Then I can claim wazm to be a true polyfill -_-

1583180836
alexnask
Compile it into wasm, write a wasm -> js compiler in wasm, run it in the vm on the browser to compile the wasm vm to js

1583180858
BaroqueLarouche
need more layers

1583180870
fengb
Unfortunately Zig isn't wasm compatible yet

1583180897
fengb
But when it is, we can have wazm to compile Zig into wasm to run it on wazm to compile wazm

1583180954
nepugia
Soon computers will have reached enlightenment, where they just push data around instead ;)

1583181223
fengb
I suppose I should get it actually running things :/

1583181243
fengb
I've gotten it to parse/validate an empty wasm file so lots of success

1583181725
andrewrk
fengb, I think it is possible to compile zig to wasm

1583181739
andrewrk
I saw someone get clang/llvm built to wasm in a docker container

1583181802
fengb
Yeah I've been meaning to get around to trying it out

1583181814
fengb
But I meant stage2, which is just as much vaporware as wazm ;)

1583181858
andrewrk
I see

1583183149
fengb
Wow, mapping wasi to wazm will probably be super easy :D

1583183509
alexnask
fengb, I don't think those proposals are equivalent, introducing a tuple { ... } syntax would still not be enough to create such a type at comptime e.g. from a slice of types

1583183589
fengb
Oh... @Tuple would require something like @reify

1583183613
fengb
They seem like competing proposals though. If we had @Tuple, then we wouldn't need the other syntax

1583183615
alexnask
Really this is a proposal for @Type-like function but just for tuples since afaict the plan is not to be able to generate arbitrary structs and unions with it

1583183656
fengb
`struct{ i32, i32 } => @Tuple(.{ i32, i32 })`

1583183683
fengb
Hmm... but then we wouldn't be allowed to define methods on it

1583183773
alexnask
I don't see what the issue is, you can already use @Type to generate types that have another syntax

1583183810
alexnask
This is just a @Type/@reify-lite proposal specifically for tuples since structs are not planned

1583183843
fengb
I think this makes more sense to hook into @Type directly than a different function (since we just removed @Int)

1583183844
alexnask
I think the usecase is worth it, you cannot create non-generic functions that take argument packs of comptime calculated types

1583183949
alexnask
fengb, I kind of agree but I personally think it would be inconsistent to only allow @Type to generate from TypeInfo.Struct when is_tuple = true

1583183998
alexnask
I don't see why you couldn't generate any arbitrary struct at that point. Anyway I'm not hellbent on this feature, my workaround is good enough for now and I would even prefer @Type for arbitrary container types but that's just me

1583184096
fengb
I dunno. I just want any way to generate a tuple type atm :P

1583184133
alexnask
Sure, I agree your proposal makes sense as well

1583184149
fengb
But realistically, I need a packed tuple, so I'm not sure I can use @Tuple. But it feels like 2 ways to skin a cat

1583184243
alexnask
We just want different levels of generation ;)

1583184353
fengb


1583184415
alexnask
Yes, Yes

1583184602
fengb
Can you comment? I don't know anything about Windows... or unicode >_>

1583184681
alexnask
While a 100% correct implementation would support Unicode I think it's fine to only check ASCII, idk

1583185423
fengb
Well now it's definitely buggy because it just reinterprets the []u16 as []u8 ascii :P

1583185442
fengb
Unicode is hard :(

1583185457
BaroqueLarouche
it is

1583185566
fengb
Wow, ascii.toUpper and toLower are pretty neat

1583185733
fengb
I almost feel like it's overengineered since I can't figure it out :D

1583185834
BaroqueLarouche
The worst part of Unicode for me is CJK handling: basically some characters that have the same meaning are now draw differently between Tradional, Simplied, Korean and Japanese but they are mapped to the same codepoint

1583185845
nepugia
ascii to upper and to lower are usually just a specific ofset if the char is within a range :P

1583185855
nepugia
for most implementations

1583185862
fengb
Right that's how I've always coded it. This uses a bitmask from a generated lookup table

1583185888
nepugia
BaroqueLarouche, yeah, the same code point does pose a problem

1583185914
nepugia
funnily enought the noto cjk fonts have the maximum number of chars allowed in a font, so i cant shake the feeling that they wanted to add more into it

1583185915
mq32
btw, there's also a nice way to convert ascii to a decimal number: "c&0xF" :D

1583185937
fengb
Probably faster since doing a double comparison plus branching is potentially slow...

1583185986
fengb
Although I'm not sure a lookup table would be faster either >_>. I'm just fascinated by this code heh

1583186002
Barabas
How do I do this? `const aligned_string : []align(4) const u8 = "my amazing string";`

1583186048
Barabas
With this I get: `error: expected type '[]align(4) const u8', found '*const [17:0]u8'`

1583186165
fengb
This "works" but probably isn't guaranteed: `const aligned_string = @alignCast(4, "my amazing string");`

1583186206
alexnask
Casting to a higher alignment is a bad idea

1583186216
fengb
Hmm, not sure how you align a literal

1583186217
alexnask
Which is why this is not coerced

1583186248
fengb
Yes but he just wants the literal to be aligned. It should be possible

1583186289
Barabas
Probably it's not currently...

1583186303
fengb
I'm pretty sure alignCast will "just work" in x86... so nobody cares about other architectures right? :P

1583186313
Barabas
right =D

1583186374
Barabas
how do I even make an aligned array?

1583186398
fengb
var foo: [N]u8 align(4)

1583186404
Barabas
hm

1583186433
fengb
So you could manually carve out the alignment, but it feels a little kludgy

1583186486
Barabas
I'm just very confused right now xD

1583186500
tdeo
const literal: [4:0]u8 align(4) = "arst".*; const string: []align(4) const u8 = &literal;

1583186525
tdeo
that seems to work, don't know if it can be made shorter/cleaner

1583186631
fengb
That's not as bad as what I was thinking :P

1583186656
Barabas
Yes, not great, but better than the stuff I was trying out =D

1583186693
Barabas
just too bad you can't have an inferred size there

1583186712
alexnask
You could probably wirte some alignedLiteral(comptime alignment: u29, comptime lit: []const u8) ... function if you need multiple literals

1583186782
alexnask
something like `fn alignedLiteral(comptime alignment: u29, comptime lit: [:0]const u8) [lit.len:0]const align(alignment) u8 { ... }`

1583186848
Barabas
Thanks, I'm fine. It's just for a test.

1583186850
fengb


1583186861
fengb
Just wrap it in more layers

1583187508
tdeo
in the "Single Threaded Builds" section of the documentation, it says "The overhead of Async Functions becomes equivalent to function call overhead," does this mean that you can't use the async features in single threaded mode, or is it referring to the integration in the standard library?

1583187586
fengb
I believe the compiler would merge any consecutive async-await semantics back into a normal function

1583187648
fengb
But if you manually split async and await into different locations with manual suspend/resume handling, it actually work

1583187727
fengb
Oh there's some atomic locking mechanism that gets removed upon single threaded too

1583187760
alexnask
Yeah that's about it on the compiler side

1583187815
tdeo
atomic locking in the standard library part or the language part?

1583187837
tdeo
i think i see how it could enable more inlining/similar yeah

1583187906
alexnask
On the language part

1583190848
daurnimator


