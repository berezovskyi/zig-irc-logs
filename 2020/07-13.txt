1594598881
andrewrk
Shucks, yep, they're a lot like python dicts. I recently reworked the implementation inspired by Python's new dicts

1594598887
andrewrk
insertion order is preserved

1594599320
pixelherodev
andrewrk: any ideas how you want to handle specification of e.g. RAM and ROM for embedded chips?

1594599329
pixelherodev
e.g. SPU II, AVR, RISC-V

1594599366
pixelherodev
One idea I had was target-specific CLI options, which would be integrated with build.zig

1594599426
andrewrk
start with adding a struct which you would initialize when setting up a Module, and hard code it for now. we can make some progress on it, then figure out how to expose it

1594599447
pixelherodev
Gotcha

1594600164
fraktor
Is a double-optional possible?

1594600195
leeward
null or null or not-null?

1594600200
leeward
Sounds like null or not-null.

1594600223
andrewrk
fraktor, yes

1594601805
pixelherodev
I freaking love the testing allocator

1594601813
pixelherodev
We know stage2 is memory leak free simply by swapping allocators

1594601824
pixelherodev
For scas, I had to set CI to run everything via Valgrind :(

1594601989
andrewrk
finally have gotta-go-fast running on a server that is not my personal laptop

1594602078
leeward
\o/

1594602084
andrewrk
pixelherodev, tests failed on #5849

1594602402
pixelherodev
Huh

1594602404
pixelherodev
Oops

1594602421
pixelherodev
What the *hell*?

1594602425
pixelherodev
`.yes_default_path => if (cbe)` <- I removed that

1594602428
pixelherodev
That doesn't exist locally

1594602507
pixelherodev
... unless I just ran test-stage2 and forgot to build the actual compiler

1594602513
pixelherodev
Which isn't impossible lol

1594602607
pixelherodev
No, this is actually wrong.

1594602619
pixelherodev
I was on the wrong branch XD

1594602629
pixelherodev
I made a cbe2 branch because the cbe one hasn't been merged yet lol

1594602748
pixelherodev
andrewrk: fixed

1594603251
daurnimator
andrewrk: what do you mean remove the array list of header entries?

1594603273
daurnimator
andrewrk: for http headers the field names are not unique

1594603288
pixelherodev
... can we support a

1594603292
pixelherodev
and require uniquing them?

1594603312
daurnimator
pixelherodev: yes.... but it'll be a shit subset

1594603316
daurnimator
e.g. max one cookie...

1594603316
pixelherodev
Wait, really?

1594603320
pixelherodev
Ahh

1594603331
pixelherodev
... I mean, $redacted cookies anyways

1594603336
pixelherodev
I'd be totally fine with that

1594603338
pixelherodev
:P

1594603347
fengb
Arenâ€™t cookies typically glued together into one giant field?

1594603348
daurnimator
(the most common multiple-of header is Set-Cookie)

1594603356
fengb
Oh response

1594603362
daurnimator
fengb: sending cookies from client-> server yes. server->client no

1594603413
daurnimator
adding uniqueness requirements has lots of other overheads too. e.g. some headers mandate "if multiple, use the last X header" while other headers require "use the first"

1594603449
pixelherodev
... okay, idea

1594603456
pixelherodev
If we can have std.http, can we also have std.gemini ?

1594603464
pixelherodev
Then I can avoid bugging you over how awful HTTP is lol

1594603515
daurnimator
gemini?

1594603535
pixelherodev


1594603546
pixelherodev
`You may think of Gemini as "the web, stripped right back to its essence" `

1594603568
daurnimator
> MIME types

1594603579
daurnimator
I see mime types I scream and run away

1594603585
daurnimator
biggest mistake in internet protocols

1594603608
pixelherodev
lol

1594603610
pixelherodev
How so?

1594603623
fengb
So should there only be two types? Strings and binary

1594603709
pixelherodev
daurnimator: ikskuh wrote a really nice Gemini client, kristall

1594603757
daurnimator
fengb: okay; mime types are okayish for specifying content types (just don't try and use mime type attributes...). but mime packing; mime multipart; mime wrapping.... all dreadful

1594603774
pixelherodev
Then it's a good thing this doesn't use those :P

1594603778
pixelherodev
... I think

1594603804
pixelherodev
Only problem with Kristall is that it's C++

1594603806
pixelherodev
and not Zig

1594603808
pixelherodev
:)

1594603817
andrewrk
daurnimator, the list data structure is redundant now that hash maps preserve order

1594603830
daurnimator
andrewrk: you can't have duplicate keys in a hash map

1594603847
andrewrk
there are 2 list data structures currently used in the http headers abstraction

1594603860
andrewrk
one is for duplicate keys, one is for preserving hash map order

1594603872
andrewrk
the latter can be removed if hash maps gain an orderedRemove method

1594603885
daurnimator
andrewrk: it can't though

1594603892
andrewrk
what can't

1594603900
daurnimator
be removed

1594603921
daurnimator
what would you put in the hashmap as the key and value?

1594603982
pixelherodev
Key, multiple values?

1594603984
daurnimator
if you e.g. did key is header name. value -> arraylist of values for that header name; then you would loose total ordering of headers

1594604007
daurnimator
if you did e.g. key is header name; value is header value; then you can't have more than one of each header

1594604241
andrewrk
daurnimator,

1594604321
daurnimator
andrewrk: then how would you know that you are meant to render in order `Foo: x\r\nBar: y\r\nFoo: z\r\n`b

1594604346
andrewrk
because hash maps preserve order

1594604362
daurnimator
andrewrk: there are duplicate Foo keys there

1594604382
andrewrk
I see

1594604405
daurnimator
also as an aside; is there an "insert 2nd in list" call for hashmap?

1594604411
daurnimator
if you need to prepend a header?

1594604443
andrewrk
no

1594604476
daurnimator
okay; that would be needed too

1594604499
daurnimator
I guess you could always reconstruct entirely.

1594604519
daurnimator
but I hope that shows you two reasons that we still need the ArrayList of entries

1594605045
andrewrk
yeah, makes sense. thanks for explaining

1594605577
daurnimator
andrewrk: before I go off and simplify my json ignore-unknown-fields PR, did you have any reply to

1594605749
andrewrk
daurnimator, I think it's a reasonable limitation, and it's not a footgun because error.TooManyNestedItems is in the error set

1594605780
andrewrk


1594606593
andrewrk
daurnimator, I'd rather encourage users to use a streaming http headers parser rather than storing things in memory

1594606622
shcv
how do I run tests in a file with the same library configurations as my main build.zig? it can't find the library...

1594606659
andrewrk
shcv, test build artifacts support the same API as other artifacts

1594606668
andrewrk
you can set yourself up so that `zig build test` does what you want

1594606704
daurnimator
andrewrk: I don't think a streaming http parser really works as soon as you get to non-trivial usage

1594606715
shcv
andrewrk: do you have an example that does that?

1594606724
andrewrk
shcv, sure, check zig's own build.zig

1594606729
shcv
ok

1594606730
daurnimator
1. http2 requires that you parse

1594606773
daurnimator
2. its pretty common to want to gather all headers and pass them through http handler phases (and even to external processes: see cgi/fastcgi/etc)

1594606963
daurnimator
note though that there is no problem using a stack-based allocator: its considered good practice to put a bound on header size and number.

1594607330
andrewrk
pixelherodev, you didn't end up doing any C ABI work did you?

1594610869
discipulus
I created the proposal 5836 to replace std.debug.assert with std.testing.expect in the language reference documentation to teach and encourage best practices. I've made the changes and left the usage of std.debug.assert when appropriate. However, there's the arrays.zig example where I'm not sure if I should change the asserts to expect inside of

1594610869
discipulus
the comptime blocks.

1594611049
pixelherodev
andrewrk: for stage2?

1594611053
pixelherodev
You were doing that

1594611057
pixelherodev
I was trying not to step on your toes :)

1594611068
pixelherodev
Ah wait, the abstractions, you mentioned that

1594611083
pixelherodev
I can do that tonight or in the morning if you want

1594611526
pixelherodev
I'll get the return test PR done tonight as well

1594611532
pixelherodev
That'll let me reuse the cbe branch lol

1594611913
pixelherodev
andrewrk, daurnimator: maybe add some of that discussion as a comment in the file?

1594611916
pixelherodev
That seems like it'd be useful

1594612282
daurnimator
pixelherodev: hmm? which discussion/file?

1594612441
pixelherodev
HashMap / ArrayList / http

1594612818
daurnimator
pixelherodev: there's already a big explanatory comment in that file

1594612866
pixelherodev
Ah okay good :)

1594612872
pixelherodev
... then why did this discussion start again?

1594612875
pixelherodev
;)

1594612941
daurnimator
because no one reads them >.<

1594614315
andrewrk
TIL `push rbp` and `pop rbp` are 1 byte each

1594614331
andrewrk
pixelherodev, I'm doing it now

1594614397
pixelherodev
Gotcha

1594614408
pixelherodev
But yeah, pushes / pops are one byte + REX

1594614415
pixelherodev
(for r8-r15)

1594614425
pixelherodev
I'll have the other PRs done tonight

1594614434
pixelherodev
"tonight," he says, half an hour after midnight :P

1594614534
daurnimator
pixelherodev: then you have 23 hours :)

1594614658
pixelherodev
lol

1594614664
pixelherodev
I plan on getting it done in a percent of that

1594614679
daurnimator
150% is a percent

1594614685
pixelherodev
lol

1594615250
pixelherodev
Might take slightly longer, actually (closer to an hour, than to thirteenish minutes); need to take of some more important obligations first

1594616463
pixelherodev
andrewrk: comptime values should never make it down to codegen, right?

1594616507
andrewrk
they do as Inst.Const

1594616525
andrewrk
however those instructions are not in the list when iterating over them, they are only pointed to by operands

1594616527
pixelherodev
But not as comptime_int, right?

1594616545
andrewrk
right

1594616545
pixelherodev
e.g. functions returning comptime values won't make it to codegen, at least?

1594616562
pixelherodev
e.g. if something returns comptime_int, we'll never be told to updateDecl it, right?

1594616565
andrewrk
right

1594616572
pixelherodev
then hasCodegenBits should be good, yeah

1594616577
andrewrk
nice

1594616590
pixelherodev
For liveness analysis, we'd want the *call*'s isUnused?

1594616611
pixelherodev
No, I think we'd want assignments, which aren't implemented in ZIR yet

1594616640
pixelherodev
`You can check if the value is used with inst.isUnused()` andrewrk: I don't think we can, because the inst we'd want to check doesn't actually exist yet

1594616650
pixelherodev
The TODO was a reminder for after assignments are implemented in ZIR

1594616660
pixelherodev
As is, all function calls have their values ignored

1594616673
pixelherodev
No wait, if a call is used as an arg, it should be used

1594616757
andrewrk
I don't think that needs to be a TODO

1594616762
pixelherodev
Right, that's what I just realized

1594616770
pixelherodev
with e.g. a(b()), the call for B will be marked used, right?

1594616774
pixelherodev
Whereas with `b()`, it's not?

1594616783
andrewrk
right

1594616791
andrewrk
a(b()) will end up being 2 lines in the generated .c

1594616792
pixelherodev
so that'd be call_inst.base.isUnused(), okay

1594616814
andrewrk
(at least)

1594616843
pixelherodev
Right, I know

1594616862
pixelherodev
Because we go Zig -> ZIR -> C, not Zig -> C

1594616911
pixelherodev
For the record, when I mark something as resolved on GH, it means I've acknowledged it and handled it locally, even if I haven't shown the code yet

1594616934
pixelherodev
Last thing is to split out the prongs

1594616967
daurnimator
pixelherodev: that's a little weird. it makes it easy for comments to get lost if you haven't really solved a comment

1594617003
daurnimator
why not just push early; push often?

1594617200
pixelherodev
CI.

1594617204
pixelherodev
It's extremely wasteful.

1594617220
pixelherodev
I'm not going to trigger all... what, seven? CIs for a tiny bit of convenience

1594617246
pixelherodev
daurnimator: I don't mark them resolved unless a) we've finished the discussion

1594617295
daurnimator
hmmm. good point. I'm not used to CI runs being so expensive

1594617301
pixelherodev
`bccfceecc` lol

1594617304
pixelherodev
That's a nice commit hash

1594617391
pixelherodev
(Seven CIs = five on Azure + SrHt FreeBSD + the ARM one)

1594617979
pixelherodev
daurnimator: another reason is that I occasionally have to amend a commit, or rebase

1594617985
pixelherodev
And that'd mean even

1594618003
pixelherodev
If I could tell GH not to bother w/ CI, it wouldn't be an issue

1594618724
pixelherodev
andrewrk: do you particularly care if there's explicit types given where they don't need to be?

1594618749
pixelherodev
I tend to do that to inform ZLS when it's not able to figure it out on its own, but I can see how only having them for that could be considered problematic

1594618850
daurnimator
whereever it enhances readability..

1594618864
daurnimator
whats an example of where ZLS can't figure it out?

1594618925
andrewrk
ZLS isn't an actual compiler implementation, it recognizes a specific set of patterns

1594618950
pixelherodev
^

1594618961
pixelherodev
It uses the parser, yes, but it's analysis isn't complete

1594618967
andrewrk
which in some ways is actually more useful, e.g. with generic code

1594618986
pixelherodev
For sure; I want it to auto-detect std.ArrayList / HashMap types for instance

1594618995
pixelherodev
That doesn't require proper analysis at all, it just requires detecting the type name :P

1594619044
pixelherodev
andrewrk: stylistically, for if (blah) a if (foo) b else c else d`, do you want braces?

1594619048
pixelherodev
in stage2, of course

1594619074
pixelherodev
I feel like braces actually hurt readability here, since with everything on its own line per `zig fmt` it's really clear what the flow is

1594619095
pixelherodev
But I figured I'd ask before making a style decision

1594619104
pixelherodev
Aside from that, it's done

1594619377
pixelherodev
uhhhh, I pushed to pixelherodev/zig:cbe, but the PR isn't updating...

1594619469
pixelherodev
Reopened as #5864

1594620713
andrewrk
got this source code working in self-hosted:

1594620986
pixelherodev
Nice!

1594621005
pixelherodev
andrewrk: is the code needed for that ready for prime time?

1594621014
pixelherodev
Will I be able to build off of that soon?

1594621016
pixelherodev
:)

1594621093
andrewrk
yeah just need to add a new test case

1594621102
andrewrk
I'll merge your stuff in first too

1594621175
pixelherodev
Awesome :D

1594621193
pixelherodev
Does that mean we have return values working, too? :D

1594621204
pixelherodev
(for x64, at least)

1594621814
andrewrk
nope

1594621870
pixelherodev
Well then, once I have ELF16 done, that'll be my next task :)

1594621895
pixelherodev
(assuming you're not doing it :)

1594621909
daurnimator
there's a 16bit elf variant?

1594621930
daurnimator
I thought it was only 32 and 64

1594622066
pixelherodev
daurnimator: it's ELF32 w/ limited address ranges :P

1594622071
pixelherodev
It's used by e.g. m6800 IIRC

1594622443
pixelherodev
So yeah, technically ELF16 doesn't exist

1594622963
andrewrk
here's the most complicated thing the self hosted zig compiler can do so far:

1594623074
pixelherodev
That's the same test, right?

1594623077
pixelherodev
Just with additional info?

1594623100
andrewrk
yeah

1594623641
ikskuh
andrewrk: nice! that's some cool news :)

1594623674
ikskuh
it's nice to see progress on stage 2

1594624244
andrewrk
pixelherodev, heh, I have to add CBE support for retvoid in order to keep tests passing :)

1594624268
pixelherodev
;)

1594624288
pixelherodev
I love how we're building off of each other's work :)

1594624326
andrewrk
I'm going to move cgen.zig to codegen/c.zig

1594624375
pixelherodev
Should codegen.zig go to codegen/something.zig, too?

1594624380
andrewrk
no

1594624763
andrewrk
pixelherodev, it looks like you're doing some type casting logic inside genRet. why is that necessary? this is post-analysis, all the type casting has already been done

1594624781
andrewrk
`expected_return_type.eql(ret_value.ty)` this is guaranteed to be `true` always

1594624949
pixelherodev
Oh, huh

1594624954
pixelherodev
Yeah, that makes sense :P

1594624960
pixelherodev
The error would have already happened, right?

1594624966
andrewrk
right

1594624974
pixelherodev
Assertion? Or nothing at all?

1594624979
pixelherodev
(to replace it)

1594624996
pixelherodev
Ugh, GH is down again

1594625015
pixelherodev
lol, it failed to serve the "server error" page

1594625196
andrewrk
most important is to simplify the code with the assumption that type checking already happened

1594625207
andrewrk
so that it's easier to maintain

1594625274
pixelherodev
Yeps, will do so shortly

1594625542
andrewrk
pushed

1594625629
andrewrk
pixelherodev, here's a fun task for you, if you want: get stage2 able to build the assert function :)

1594625648
andrewrk
looks like all it needs is support for boolean not

1594625699
pixelherodev
Coolio, will do

1594625701
pixelherodev
... added to the list lol

1594627609
ikskuh
hey. anyone uses vscode and can tell me how to disable automatic downloads for $stuff?

1594627705
pixelherodev
lol

1594627717
pixelherodev
You're using an MS product and want to disable automatic *anything*? Glhf

1594627732
ikskuh
I was opening VScode and it started downloading omnisharp

1594627765
pixelherodev
actually, going to try to get, like, three hours of sleep now

1594627789
ikskuh
glhfsw

1594627791
pixelherodev
Got all my HW that's due today finished, fixed up CBE PRs, figured out the design for the ELF stuff, so a productive four hours all in all

1594627794
pixelherodev
Thanks

1594627867
ikskuh
haha. firejail now prevents bash from accessing the web as well :D

1594627883
ikskuh
and thus, my vscode-internal console cannot be used to do git stuff anymore

1594627889
pixelherodev
lol

1594628060
ifreund
isn't there a de-microsofted version of vscode?

1594628102
ikskuh
afaik it even is the vscode-oss version

1594630104
gonz_
ikskuh: Presumably you're using something that depends on whatever is being downloaded.

1594630351
ikskuh
gonz_: The official C# extension

1594630467
gonz_
That would be it, yeah :D

1594630540
gonz_
Now that you mention it, it'd be neat to have a confirmation box for at least big downloads, or all downloads (with an "allowed auto-downloads"-list that persists)

1594630566
gonz_
They already did this with opening URLs in browsers, etc.

1594630661
ikskuh
yep

1594630752
gonz_
I guess best you can do is to set `"extensions.autoUpdate": false` in your config.

1594630765
gonz_
to at least not get the new stuff automatically when they update

1594630778
gonz_
It'll still check for updates, but allow you to update at your leisure

1594630800
gonz_
Provided you have `"extensions.autoCheckUpdates": true` set

1594634746
antaoiseach
Hi, I wanted to confirm one very basic aspect of Zig compilation - if I have a Zig lib and I compile it (no packed data structures), then the resulting lib is incompatible with C, and only compatible with Zig code, right?

1594634780
antaoiseach
Also, suppose I have libfoo.a built from normal (non-packed) Zig structs, how would I go about loading that in another Zig project?

1594634785
antaoiseach
Is there a flag for it?

1594634843
antaoiseach
I see a "--library-path" flag ... this should work?

1594634953
ifreund
zig only does dynamic linking with th C ABI, so yes that lib would be compatible with C

1594635019
ifreund
if you're using a zig library from zig code you should probably just bulid it from source

1594635078
antaoiseach
ifreund: So right now if I have the libfoo.a artifact, I can use it from C even without having used packed structs/enums etc.?

1594635216
antaoiseach
ifreund: Okay, thanks for the help! Will try it out on some small examples! :-)

1594635219
ifreund
antaoiseach: packed structs are a Zig thing, for C ABI you want extern structs

1594635346
scientes
there should also be extern packed

1594642312
gonz_
When was the last showtime recorded?

1594642341
gonz_
I switched my sponsorship yesterday unprompted because I stumbled upon the link randomly.

1594642374
gonz_
But the pasta recipe was already uploaded yesterday, right?

1594642391
gonz_
And the goal isn't yet met on the ShowTime broadcast.

1594642412
ikskuh
gonz_: was at saturday night

1594642419
gonz_
Aha

1594642422
ikskuh
video is uploaded already

1594642442
gonz_
Yeah, it was uploaded today

1594642466
fengb
The prerecorded stuff like pasta was probably uploaded a week ago

1594642490
fengb
The show itself needed time to process after it was recorded. Youtube is slow or something

1594642505
ikskuh
yeah

1594642512
ikskuh
but dang, the videos were funny :D

1594642663
gonz_


1594642690
ikskuh
NICE

