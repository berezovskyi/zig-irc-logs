1598400377
ronsor
that sounds like something Microsoft does

1598400763
torque
it's very wacky

1598400990
shakesoda
the perils of people writing broken version checks that need accommodations

1598401033
shakesoda
i can only imagine the situation for that was pretty bad if even apple had to mind the compatibility of it

1598401083
fengb
I donâ€™t understand a world with 11 in it

1598406125
andrewrk
pow(2, log(base, string_len))

1598406169
andrewrk
I need an approximation (upper bound) of this equation using only integer operations

1598406333
andrewrk
hmm my equation is wrong

1598406353
andrewrk
anyway I think this calculation is wrong:

1598424852
andrewrk
for the record, never mind that, here was the answer:

1598426043
protheory8-new-m
How do I start an async function from `main`?

1598426097
alexnask[m]
If you are using `pub const io_mode = .evented;` you can just call async functions from main without issues

1598426195
alexnask[m]
Otherwise you would have to do some manual work since main will be a "seam" between sync and async calls

1598426233
andrewrk
yeah that's right. to summarize: you can use the std lib event loop, or you can write your own

1598426235
alexnask[m]
(actually, you could call an async function but could not suspend or resume from main)

1598426245
alexnask[m]
or await**

1598426296
protheory8-new-m
Well I would like to try doing that manual work I guess

1598426344
andrewrk
if you don't mind video format, this is probably going to be helpful to you:

1598426496
alexnask[m]
(just keep in mind `noasync` is `nosuspend` now :) )

1598426535
andrewrk
alexnask[m], that changed approximately 1 day after the video was recorded xD

1598426836
andrewrk
I'd look into hosting my streams there if someone else wanted to provide the hosting

1598426851
protheory8-new-m
andrewrk: thanks, why is changing threads required though?

1598426863
andrewrk
protheory8-new-m, what makes you think it's required?

1598426871
andrewrk
(sincere question)

1598426935
protheory8-new-m
to wait on it?

1598427042
daurnimator
andrewrk: I don't think the event loop implementation is really swappable right now

1598427053
andrewrk
protheory8-new-m, resuming in a new thread is just one example. it could have called resume in any thread

1598427061
andrewrk
daurnimator, agreed

1598427068
andrewrk
we'll get there

1598427090
daurnimator
oh I know. just saying I don't think its doable right now without some changes to the std lib

1598427112
pixelherodev
andrewrk: I've been using diode.zone for now, though I plan on self-hosting eventually

1598427131
andrewrk
GAH big spooky spider just crawled across the wall next to me

1598427159
Nypsie[m]
Burn it

1598427326
ikskuh
befriend it, let it build a web and let it sit on your keyboard, so it can eat all the bugs in zig as soon as they appear

1598427328
pixelherodev
The wall?!

1598427331
pixelherodev
Don't burn the wall!

1598427339
pixelherodev
You need that!

1598427348
ikskuh
walls are optional

1598427419
alexnask[m]
daurnimator: Loris had a PR with some initial changes to make the API the loop needs to expose a bit better

1598427423
pixelherodev
Why does matrix do that? Ugh

1598427434
pixelherodev
Hard to copy URLs from tmux+weechat

1598427551
andrewrk
protheory8-new-m, I'm not sure what you're trying to demonstrate here - can you be more specific with your question?

1598427644
protheory8-new-m
I'm trying to figure out how to launch async function from main, so I wonder if the code snippet that I sent is actually corrent

1598427653
protheory8-new-m
probably not

1598427775
ikskuh
protheory8-new-m: i think you're trying to understand "async" as "async spawns a thread, will be joined on await"

1598427904
protheory8-new-m
Well I know that async function kinda returns back to callsite when `suspend` is reached and then it goes back when resuming if I understand correctly.

1598427955
protheory8-new-m
ikskuh: not really I guess

1598429217
ikskuh
protheory8-new-m: okay good, just making sure ;)

1598429354
andrewrk
to understand async/await in zig, one must actually learn how the memory layout of async functions works. it is a little bit of investment, but it is worth it because you will have full knowledge of what you can and cannot do

1598430245
ikskuh
daurnimator: where did you find that `..` is a valid file/path name on windows?

1598431162
daurnimator
ikskuh: I recall it from somewhere. try with NtCreateFile?

1598431178
ikskuh


1598431187
ikskuh
documentation tells me that ".." is supposed the upper directory

1598431191
ikskuh
maybe you discovered a bug? :D

1598431212
daurnimator
ikskuh: thats done in userspace in win32

1598431831
andrewrk
sounds like we should do it in userspace in zig std lib? unless there's some reason to try to support that

1598431916
daurnimator
andrewrk: yes.

1598431935
ikskuh
current state is at least annoying, breaking pretty much all of my projects on windows :D

1598432047
daurnimator
andrewrk: I think we might need a 'Path' type that could be e.g. `union (enum) { posix: []const u8, win32: []const u16, nt: []const u16}`

1598432117
andrewrk
I'm not saying you're wrong necessarily, but that looks like something nightmarish

1598432212
ikskuh
daurnimator: proper path type is probably more a []const []const T

1598432315
andrewrk
isn't WTF-8 suitable for all platforms?

1598432364
daurnimator
andrewrk: it does ends up in needless conversions back and forth

1598432396
daurnimator
and we have an explosion of {open,move,etc}File{Z,W,blah}

1598432454
daurnimator
ikskuh: I don't know about that....

1598432766
protheory8-new-m
How do I init a C struct with default values in Zig?

1598432963
daurnimator
protheory8-new-m: what default values?

1598433208
protheory8-new-m
I'm interested in `StructName instance;` line

1598433227
alexnask[m]
`var instance: StructName = undefined;`

1598433288
alexnask[m]
Yes, as long as `instance` is `var ` and not `const`

1598433416
protheory8-new-m
Thanks

1598433475
alexnask[m]
Depending on what the C code does there may be a better way to translate it than leaving the value undefined btw, but this is the direct translation :)

1598433523
daurnimator
protheory8-new-m: C doesn't have default values.... so I don't think you're asking the question you think you are

1598433544
daurnimator
for static storage things do get initialised to 0 in C...

1598433557
alexnask[m]
For example, if the C uses an if/else and initializes with different values in each branch, you can just use an if/else expression (`var instance: StructName = if (...) .{ .x = 0, .y = 0 } else .{ .x = 255, .y = 255 }`)

1598451859
fengb
I've noticed that std.debug.panic isn't connected to `@import("root").panic`

1598451921
scientes
fengb, I think it goes through a C symbol, right?

1598451953
fengb
No, it triggers panicExtra directly

1598451976
fengb
Which is what start.zig's default_panic triggers as well

1598452012
fengb
But... shouldn't it go through the root panic? This is the only way in std to use a format string panic

1598452470
scientes
I only know that if you add a panic in the root you can get rid of all that ugly codegen

1598452583
ikskuh
root panic is called by @panic afaik

1598452592
ikskuh
std.debug.panic calls std.debug.panicExtra which calls @panic

1598452613
scientes
yeah, that was my understanding (but I never read the code)

1598452641
jorangreef
Hey everyone, I am new to Zig. What is the safest way to zero the memory of an extern struct? @memset(@ptrCast([*]align(8) u8, struct_ptr), 0, @sizeOf(@TypeOf(struct)));

1598452674
BaroqueLarouche
std.mem.zeroes

1598452682
jorangreef
I tried: struct_ptr.* = {} but one needs to specify all fields.

1598452850
fengb
Nope, panicExtra directly exits

1598452860
fengb
@panic calls default_panic which calls panicExtra

1598452864
fengb
Which feels backwards

1598452986
fengb
I'll create a new issue

1598453103
jorangreef
Thanks BaroqueLarouche

1598463371
protheory8-new-m
How do I ignore returned error?

1598463381
Nypsie[m]
You can't

1598463416
Nypsie[m]
Well, I suppose you could do myErrorSetFunction() catch {}

1598464394
protheory8-new-m
What's the difference between `Fn` and `BoundFn` in `std.builtin.TypeInfo`?

1598464535
alexnask[m]
BoundFns are expressions like `foo.bar` where `@TypeOf(foo)` has a `bar` function with a self parameter

