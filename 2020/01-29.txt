1580263295
andrewrk
thanks for filing the issue Snektron

1580263311
andrewrk
if anyone is looking for something to do, here is a high-value contributor friendly issue:

1580263344
andrewrk
the idea is to move the logic from lib/std/build.zig regarding looking up system library directories, and move it to the self-hosted compiler, and then expose it to the stage1 compiler

1580263761
andrewrk
daurnimator, for GSoC, a nice strategy might be to make the project proposals be limited in ambitiousness; if the student finishes an "easy" task, we have plenty more for them to choose from to fill the rest of their time

1580263792
andrewrk
so basically we would be able to go through the Contributor Friendly issues and nearly any of them could be a project proposal

1580263848
daurnimator
andrewrk: generally you want something of defined scope; otherwise you can't really say they succeeded or failed

1580263941
andrewrk
yes I think we are agreeing

1580263984
andrewrk
my point is that they can "succeed" halfway through the summer; which will probably in practice motivate them to take on another bite-sized task

1580263990
andrewrk
everybody wins

1580264342
PC9801
anyone have a moment to help debug why my wc clone is slow? :)

1580264472
andrewrk
I just filed a high-value contributor-friendly issue:

1580264480
andrewrk
hi PC9801, what's up

1580264505
fengb
Is this following up the implementations in Haskell and D? :P

1580264520
PC9801
fengb yes :D

1580264524
PC9801
andrewrk:

1580264560
PC9801
when compiled with --release-safe --strip it still seems quite slow - i'm sure its a logic problem

1580264591
andrewrk
--release-safe to compare with how safe Haskell and D are, yeah?

1580264614
andrewrk
does the D implementation have the main function "trusted"? (or however that works)

1580264665
PC9801
no idea, I saw the D and haskell posts and just thought I'd give translating it to zig a go to practice

1580264721
andrewrk
oh, ok, I really need to rename this because everybody does this, std.io.readLine & related APIs are actually supposed to be like a terminal UI

1580264734
andrewrk
like gnu readline

1580264760
PC9801
ahh

1580264762
andrewrk
they don't have such features yet, but that is the direction they are going. you probably just want stream.readUntilDelimiter

1580264790
andrewrk
readUntilDelimiterOrEof

1580264807
andrewrk
you should probably also use a buffered input stream

1580264825
andrewrk
zig is kinda "raw", you tend to only get what you ask for

1580264885
PC9801
thank you, I'll play around with it some more with that info

1580264913
andrewrk
here's an example of a buffered in stream:

1580264960
PC9801
oh cool

1580264971
PC9801
having your AoC solutions will be plenty to pour over lol

1580264987
andrewrk
well it would look more favorable for zig in benchmarks if you use --release-fast instead of --release-safe

1580264999
andrewrk
but if you're comparing against safe languages, then it's fair to use the safe release mode

1580265048
andrewrk
this is where rust gets an advantage; only 1 release mode, which is both fast and safe

1580265072
PC9801
whats the precise difference between the two modes?

1580265108
andrewrk
it's explained here:

1580265146
andrewrk
in summary: ReleaseSafe has runtime safety checks. ReleaseFast assumes Undefined Behavior will never happen, and uses that to optimize

1580265165
diltsman
I'm looking at issue 4194 about the multichar character literal.  I assume that is in the C header translation phase, correct?

1580265176
andrewrk
you can override this setting at any scope, but the global setting sets the "default"

1580265216
andrewrk
diltsman, correct. zig code uses clang's API and outputs zig source code

1580265249
diltsman
Is that in the CMake generated zig_cpp project?

1580265287
andrewrk
diltsman, translate-c is now 100% self-hosted!

1580265297
andrewrk
src-self-hosted/translate_c.zig

1580265313
andrewrk
tests are in test/translate_c.zig and test/run_translated_c.zig

1580265331
diltsman
So, is that part of the CMAke generated projects?

1580265354
andrewrk
maybe "100%" is misleading. there's still a C API wrapper on top of clang's C++ API. I'm sorry, I don't understand your question about cmake

1580265403
diltsman
The directions to compile Zig on Windows say to use CMake to generate some projects to do the build.  I'm trying to figure out if those generated Visual Studio projects have the source files that I need to edit.

1580265518
diltsman
Looks like the change should be in transCharLiteral.

1580265526
andrewrk
in order to work on translate-c, the relevant source files are: src/zig_clang.cpp, src/zig_clang.h, src-self-hosted/translate_c.zig, src-self-hosted/clang.zig

1580265744
PC9801
andrewrk: worked great! how does

1580266011
daurnimator
andrewrk: is LLVM able to take advantage of `catch unreachable` for optimization?

1580266035
andrewrk
PC9801, it looks fine to me. do you want a diff of how to make it more idiomatic?

1580266060
PC9801
andrewrk, that would be excellent to help me learn

1580266077
diltsman
If I'm reading this right, transCharLiteral looks like it already generates an integer node for multi-character character constants.  It try's transCreateNodeInt if the value of the character literal is >255...

1580266159
daurnimator
i.e. if I have: `fn foo() !void { if(x >= 5) return error.NotGood; for (array[0..x]) |c| { thing(c); } }; fn bar() void { foo() catch unreachable; }` --> in release-fast mode, could it skip the x >= 5 check?

1580266334
andrewrk
daurnimator, yes zig emits a br with unreachable in release-fast mode, so it communicates to llvm that we have made the not-taken-branch undefined behavior

1580266484
daurnimator


1580266539
naltun
Is anyone available to do a quick code review for me? I'm not sure what I'm doing wrong, or if this is a bug.

1580266547
andrewrk
PC9801,

1580266573
PC9801
andrewrk, cheers, thanks for the advice :)

1580266573
andrewrk
PC9801, also... want to try using evented I/O for parallel resource usage of multiple input files? :D

1580266598
PC9801
sure, where do i start?

1580266600
andrewrk
we're still working on how a lot of this works, but so far input is already working, so this use case is covered

1580266606
andrewrk
it's a 1-liner

1580266849
andrewrk
pub const io_mode = .evented;

1580266863
andrewrk
but give me a minute to show how to make it parallel using async/await

1580266894
PC9801
ok

1580266992
dimenus
is it possible to specify alignment on the first dimension of a two dimenensional array? Running into issues with arrays in uniform blocks with GLSL

1580267017
dimenus
Basically I need [2]f32 aligned on a 16 byte boundary

1580267629
shakesoda
dimenus: the easy way is probably just to specify everything in chunks of [4]f32

1580267654
shakesoda
also, i don't know, but this is the solution i usually use to solve my GL alignment troubles

1580268272
andrewrk
PC9801, if you do this:

1580268298
andrewrk
then it will take advantage of multiple cpu cores and evented I/O to do all the input files in parallel

1580268614
PC9801
andrewrk: 'std.os' has no member called 'EPOLLET'

1580268630
PC9801
on 0.5.0+aa75df36d

1580268919
andrewrk
ah, yes, this is still a bit experimental, and I don't have it working in all operating systems yet

1580268922
andrewrk
is that macos?

1580268956
PC9801
yep

1580269022
PC9801
can try linux/openbsd as well

1580269391
andrewrk
there is a kqueue (macos) implementation of this, it just doesn't have test coverage yet and apparently has regressed

1580269595
andrewrk
another high-impact, contributor-friendly issue:

1580269743
pmwhite
andrewrk: does the issue count on GitHub ever keep you awake at night? It never seems like it goes down. I assume a lot of those are proposals and long-term things that you don't need to worry about now, but it still has got to feel like the goal posts are moving faster than you're moving toward them.

1580269947
andrewrk
pmwhite, the issue count for 0.6.0 is a bit over-budget currently, but that's a more realistic idea of what is actually "open"

1580269978
andrewrk
according to my schedule 0.6.0 milestone should be at 276 issues

1580270025
fengb


1580270027
andrewrk
you can look at the milestone history for how many issues were closed during that time:

1580270100
pmwhite
0.5.0 you were blazing.

1580270144
andrewrk
keep in mind that we've seen more and more contributors with every release

1580270147
andrewrk
it's not just me

1580270148
pmwhite
Tagging issues with milestones seems like a good way to tame the goal-post creep mindset.

1580270171
andrewrk
although merging pull requests is a full time job in and of itself, that's for fucking sure

1580270199
pmwhite
ahh, true.

1580270231
pmwhite
Kinda like how software developers inevitably move into management positions and stop writing code. Hopefully not quite that level.

1580270298
daurnimator


1580270306
daurnimator
source line:

1580270324
daurnimator
the previous line explicitly checks the active field

1580272244
andrewrk
daurnimator, are you able to reproduce it locally?

1580272274
daurnimator
Tests passed locally last night. I'm at work right now so can't check

1580272290
andrewrk
I can help debug this if it's tricky

1580272334
daurnimator
Is what I have on line 1671 in the PR the correct way to assert which is the currently active union field

1580272336
daurnimator
?

1580272790
andrewrk
without looking into it more, i'm confused the same as you are

1580272863
diltsman
Time for bed.  I will hopefully be able to finish this multicharacter char literal tomorrow.

1580273007
andrewrk
good night diltsman

1580274383
mikdusan
>I do think it would be nice to figure out some convenient way to make the easiest way to write data to a terminal, to properly terminal escape

1580274386
mikdusan
text, but also support intentional terminal escapesyes

1580274425
mikdusan
I have a wip formatter that mixes str formatting with tty controls been gathering dust for 5 months. just got it working with master again:

1580274441
mikdusan


1580274815
andrewrk
ooh

1580275198
andrewrk
more high-value, contributor-friendly issues:

1580275203
andrewrk


1580275205
andrewrk


1580277696
daurnimator
andrewrk: 4313 sounds GSoc-able

1580277856
daurnimator
added a stub as

1580284331
daurnimator
andrewrk: are you around? I'd like to try and solve

1580296240
forgot-password
andrewrk: Okay, I just built the compiler with the `-x c` flag removed and it still doesn't compile properly

1580304597
Snektron
If translate_c is selfhosted does that mean zig no longer needs to depend on clang?

1580304599
scientes
OpenBSD mail server: MAIL FROM:<;sleep 66;> <=====this works

1580304601
scientes
wow

1580304603
Snektron
Or is it still used for something else?

1580309154
dimenus
why does alignedAlloc ignore the requested alignment?

1580309271
mq32
dimenus, probably because the allocator ignores it?

1580309314
mq32
what allocator are you using?

1580309326
dimenus
standard allocator interface

1580309336
dimenus
std.mem.Allocator

1580309376
mq32
yeah, but this isn't the thing that implements the alignment

1580309392
mq32
the alignment is implemented by your backing allocator (std.heap.direct_allocator, std.heap.c_allocator, ..)

1580309408
dimenus
i get that, but the interface itself is ignoring the alignment

1580309416
dimenus
see mem.zig:115-118

1580309591
betawaffle
is there a helper for zig build to add a `test` subcommand?

1580309639
mq32
dimenus, it doesn't ignore the alignment, it just is a bit weird...

1580309640
fengb


1580309657
betawaffle
fengb: thanks

1580309668
mq32
if i see that right, the whole thing

1580309702
dimenus
ah, yeah i just misread that

1580309707
dimenus
so maybe it's an issue with the backing allocator

1580309708
dimenus
thanks

1580309868
fengb
The build system needs cookbook style docs

1580309913
mq32
fengb, wait for my next day sick :D

1580310278
dimenus
mq32: am i just misunderstanding alignment? is the alignment for the entire allocation or the elements in it?

1580310302
dimenus
i should just make [4]f32 wrappers lol

1580310311
fengb
The allocation

1580310335
fengb
If it's for elements, they need to be aligned so probably wrapped into a struct of sorts

1580310348
mq32
it's for the entire allocation, as array elements have intrinsic alignment

1580310597
dimenus
thanks guys, sorry for the stupid questions

1580310604
dimenus
wrapping in a struct works as planned

1580310742
fengb
Are you looking for align 16? @Vector(4, f32) has that naturally >_>

1580310759
dimenus
Vec2 and i32 / f32

1580310804
dimenus
i'm adding post processing effects to the breakout clone and the first big snag i ran into with zig was uploading uniforms that weren't aligned properly

1580310814
dimenus
world matricies and the like are naturally aligned enough to not cause issues

1580310822
dimenus
and in vulkan, push constants are align(4) not align(16)

1580310830
dimenus
so those were easy too

1580311034
fengb
Wait... you also code in odin. Heathen! :P

1580311165
dimenus
indeed :)

1580311185
dimenus
i hit a brick wall in Odin with the whole large static struct taking forever to compile thing

1580311195
dimenus
then i switched to linux and at the time he hadn't implemented the System V ABI properly

1580311203
dimenus
i plan on looking at it again soon

1580311257
dimenus
Modeling windows COM components in Odin was so easy, i'm amazed at how well that worked

1580312540
andrewrk
daurnimator, it's a matter of figuring out how to use the clang API

1580312564
andrewrk
Snektron, sorry that was misleading. what is self-hosted is the usage fo the clang API. it's still using clang

1580312668
companion_cube
I wonder if someone will write a GC for Zig

1580312676
companion_cube
comptime generating struct layout info or something

1580314432
nofmal
hello, has termios been implemented in the standard library?

1580314613
andrewrk
nofmal, not yet

1580315053
nofmal
in that case may i implement it myself?

1580315101
andrewrk
of course :)

1580315117
andrewrk
how does it work?

1580315129
fengb
andrewrk: should there be a way to hook into test teardown? I'm not sure how else to implement a default test allocator

1580315162
fengb
Just a FBA that either resets itself or counts leaks after a test

1580315236
andrewrk
fengb, my suggestion is to give up on the idea that a zig `test` entry point has to correspond to exactly 1 conceptual test

1580315240
fengb
I suppose we can manually expose a function to be deferred: `test "" { defer std.testing.allocatorCheckLeaks() }`

1580315262
andrewrk
test "all the xyz tests" { foo.setUp(); foo.doTest("blah"); foo.tearDown(); }

1580315441
nofmal
andrewrk: well i've tried to implement tcgetattr() and tcsetattr() only atm

1580315461
nofmal
it works by making a call to linux.syscall

1580315508
nofmal
something like this: `os.linux.syscall3(os.linux.SYS_ioctl, @bitCast(usize, @as(isize, handle)), os.linux.TCGETS, @ptrToInt(&struct_termios))`

1580315545
fengb
I mean for stdlib, it’d be nice to have a default allocator that “just works”. But I suppose it’s not bad to wire in a line a boilerplate

1580315655
andrewrk
fengb, for testing? or in general?

1580315666
fengb
Just for testing

1580315681
fengb
So people stop using page_allocator or debug.allocator :P

1580315696
andrewrk
ah. yeah I think it would make sense for the default test runner to set up an allocator intended to be used in testing, and check for leaks in between tests

1580315754
fengb
I didn't see any runner code in std. Does it live in C++?

1580316106
metaleap
"So people stop using page_allocator" --- for newbs: is there sth to be concerned about with page_allocator? i heard more than once subtle overtones that it's "fine for demo throwaways but not one's Serious Real-World code"

1580316200
metaleap
(i mean yeah it makes syscalls but what else you're gonna do to scale to often unbounded users' random workloads)

1580316285
companion_cube
it's not efficient for small allocations, is it?

1580316391
andrewrk
fengb, lib/std/special/test_runner.zig

1580316405
mq32
metaleap: page_allocator just allocates/unallocates memory pages, so it has a really high fragmentation. it has a granularity of 4096 byte, so if you allocate 2 byte, you actually get memory for 4096 byte. 4097 byte allocations will yield 8192 byte and so on

1580316426
mq32
metaleap: also mapping/unmapping memory is a really slow process compared to "let's increment this pointer by 15"

1580316494
metaleap
mq32: thq, so the only other substantial alternative is fixed-buf allocs right? (wherever one can estimate a bound, that is)

1580316519
mq32
right now, i would recommend using the C allocator for "real world applications"

1580316543
mq32
you're gonna link libc in most cases anyway, so using the c_allocator doesn't hurt

1580316557
metaleap
huh, that one i didnt consider when scanning stdlib. ignoring everything starting with "c" :D

1580316611
mq32
there is also my pretty badly made linked-list allocator here:

1580316629
andrewrk
metaleap, have you seen this?

1580316636
metaleap
yeah i have

1580316664
mq32
it makes arbitrarily sized allocations in a fixed buffer possible, so it's much more generic than the fixed buffer allocator, but i have to say: it's not a good allocator :D

1580316714
metaleap
andrewrk: hence the question --- it mentions fba and page, so the former is limited to staticallyknown bounds and the latter is "relatively expensive" I now gather (libc not applicable over here)

1580316740
metaleap
mq32: curious! will keep in mind. whats bad about it

1580316765
dimenus
andrewrk: have you ported libsoundio to zig at all?

1580316782
mq32
> whats bad about it

1580316809
mq32
it has no tests, i have noticed that "it works" and i have literally haven't slept in the whole development process

1580316816
mq32
over-night-hack

1580316824
fengb
andrewrk: I'm blind >_<

1580316844
mq32
but it could actually be a nice base for a small scale allocator

1580316888
companion_cube
metaleap: what makes you have no libc, by curiosity?

1580316888
andrewrk
dimenus, no, but porting the build to zig build would make it easier to make windows binaries and put them on the site...

1580316920
fengb
Most of my usecases have been an arena backed with page_allocator, although backing with a general purpose allocator would probably be better

1580316966
dimenus
andrewrk: I'm getting to the point where I need to add audio to my breakout clone, wondering if it's worth starting a sound library

1580316975
dimenus
or porting yours to zig

1580316979
metaleap
just want to avoid both that dep and deps that dep on it.. yeah if i were doing real-world things i might need opengl or libpng or postgresql or sqlite but for now... i seem to get by interfacing with the outside world via []u8

1580316997
companion_cube
that's really fascinating to see that Zig makes arena allocators so easy they're the default go-to

1580317001
mq32
OpenGL doesn't need libc except for dlopen right now :)

1580317009
mq32
well, but making a window needs SDL

1580317013
mq32
until zig-window is ready :)

1580317046
fengb
Arenas solve memory lifetimes really well, and the fact that it's fast and easy is just a side benefit :P

1580317134
metaleap
the "problems" with page_alloc wouldnt seem so bad if pages were say 4MB instead of 4KB. "gimme some fat chunk to chew on and i wont be back so soon". suppose custom-size requests are not supported by relevant os kernels?

1580317207
metaleap
main thing i love about arenas is that they're like a "private micro GC". allocate at will, just know the choice-points in program flow where a bag of garbage can be ditched all at once

1580317211
fengb
metaleap: you can request more but something still needs to manage it. Most general purpose allocators would use the page_allocator as the backing, but it'd do internal bookkeeping to make it faster and more efficient

1580317239
andrewrk
dimenus, you're trying to avoid a libc dependency?

1580317241
fengb
Using it directly is both slow and wasteful

1580317266
dimenus
andrewrk: just looking for more things to move to zig while i have the opportunity

1580317270
andrewrk
dimenus, I have similar goals, but that is difficult to accomplish on linux. graphics and sound each provide an obstacle

1580317272
metaleap
fengb: i see, yeah i reckon it's all in the custom bookkeeping to keep things smooth, will be interesting to see that space evolving in stdlib

1580317273
companion_cube
so, again, no GC in userland planned? 🙃

1580317305
andrewrk
dimenus, as an example, pulseaudio doesn't have a real protocol. you are kinda forced to use the c library client as the protocol

1580317306
dimenus
andrewrk: ah got it, i'll link with the c lib for now then. what obstacles are you referring to?

1580317320
dimenus
are we going to get a zig abi at some point?

1580317331
andrewrk
not planned

1580317423
fengb
companion_cube: old but relevant

1580317519
fengb
metaleap: I also wrote a general purpose allocator

1580317544
fengb
I think it’s a Zig rite of passage to write a toy general purpose allocator :P

1580317576
companion_cube
fengb: I was more thinking about having a `GcPointer(T)` that points to arena+offset, or something

1580317580
companion_cube
for a precise GC

1580317582
metaleap
fengb: saw it earlier! so "general" means not just wasm then?

1580317614
metaleap
might take a lookie. but gonna multithread soon enough tho

1580317636
mq32
metaleap, just use one allocator per thread :D

1580317643
metaleap
true lol

1580317679
fengb
Yeah it should be usable anywhere. It’s just focused on browser characteristics so things like wasting memory aren’t as important as smaller binaries

1580317695
metaleap
that 64k quip heh

1580317833
mq32
fengb: i think i should package my allocator as well and provide it with an option to grow heap size

1580318218
companion_cube
fengb: that's the kind of thinking that makes browsers memory hogs 😜

1580318251
fengb
Infinite memory!

1580318371
mq32


1580318379
mq32
i think there is a small copy-pasta error

1580318696
andrewrk
mq32, thanks

1580318729
Snektron
Oh yeah about the allocators

1580318747
Snektron
Many programs seem to use a stack-based allocation pattern that doesn't fit on the stack for whatever reason

1580318768
andrewrk
well, zig has a C tokenizer and partially complete C parser in the standard library now

1580318772
Snektron
for example, an array's size might be runtime known

1580318773
andrewrk
thanks to Vexu

1580318783
mq32
andrewrk: Oh wow!

1580318792
Snektron
So i thought a useful allocator would be something that allocates in a stack fashion on the heap

1580318823
andrewrk
all because of trying to translate C macros

1580318856
mq32
sounds like my Lite-C-transpiler is now possible? :D

1580318859
Snektron
In the implementation, a free would mark a segment to be freed, but an allocation only allocates from the last segment

1580318864
Snektron
of course, segments that are near eachother are merged

1580318886
mq32
but those are some nice news, i've skipped over the diff of the CPU features merge, looks all quite nice

1580320503
SyrupThinker
>I think we only need 1 field here

1580320517
SyrupThinker
andrewrk: Ironically thats how I did it first

1580320526
SyrupThinker
But I changed it to 'stay in style'

1580321243
andrewrk
SyrupThinker, ah. yeah sorry to make you change your code

1580321484
SyrupThinker
A quick fix, no problem at all

1580322089
andrewrk
SyrupThinker, you can use @tagName in build.zig now

1580322135
betawaffle
is the `"c"` part of `extern "c" fn` deprecated? if not, what does it mean besides the calling convention?

1580322170
SyrupThinker
I usually don't like this kind of thing but I guess it makes sense here as they'll be kept in sync

1580322267
andrewrk
I agree with you

1580322293
andrewrk
the enums in std/builtin.zig are special though, their tag names are generally meaningful strings that match the CLI interface

1580322323
andrewrk
e.g. the self-hosted compiler will also use @tagName to parse them and reflection to list the possibilities

1580322337
andrewrk
they are the actual source of truth

1580322363
andrewrk
one more little thing if you don't mind:

1580322394
SyrupThinker
Darn, sneak comment

1580323095
andrewrk
fengb, damn look at you doing internal compiler bug fixes

1580323186
fengb
Only doing rain dances

1580323210
fengb
I looked at fixing ifs as well but they're structured differently and I don't know the incantation :(

1580323556
fengb
Is there a way to reattach the error trace to some other stack? Having the trace inside the runner is pretty spammy

1580325508
andrewrk
fengb, not sure I follow

1580326233
sirnaysayer
Hey all, how do I specify creating a dynamic library in build.zig?

1580326567
andrewrk
sirnaysayer, does this example help?

1580326573
sean1
is there anyway that I can protect a pointer from being written to, like a read only pointer? EX:

1580326598
andrewrk
sean1, const tPtr: *const Test = &t;

1580326605
sean1
thanks!

1580326612
andrewrk
the first `const` describes whether or not you can reassign tPtr

1580326640
andrewrk
sean1, you could also change `var t` to `const t`

1580326647
andrewrk
then &t will give you *const Test

1580326685
sean1
make sense. I'm just testing out some features before I commit to try and port some c code over. Some of the warts that I dislike in c and how they would be handled in zig

1580326778
andrewrk
you can also play with `zig translate-c` :)

1580326797
andrewrk
although it won't generate idiomatic zig code, of course. it will match the C semantics exactly

1580326832
sean1
yeah I was gonna look at giving that a shot to see what it does with my code.

1580326870
sean1
on issue I noticed and not sure if it is by design but if I use tabs the code doesn't compile

1580326919
andrewrk


1580326925
andrewrk
`zig fmt` will fix that

1580326944
sirnaysayer
andrewrk: I'm looking to set the is_dynamic flag in the build.zig file. Typically this is done with -dynamic but scowering the build code I'm not seeing the possibility

1580326962
sirnaysayer
then it exports a dll

1580326979
sean1
yeah I saw zig fmt as well since I tried the vim plugin but I'm a stickler with braces and like them on thier own line

1580327010
andrewrk
sirnaysayer, you're using addSharedLibrary? what is happening, and what do you want to happen instead?

1580327027
sirnaysayer
addSharedLibrary exports a .lib for me.

1580327048
andrewrk
sean1, just conform :P I use tabs when I write Go

1580327089
andrewrk
sirnaysayer, ah, ok. that sounds like a bug. let me take a look

1580327143
sean1
I don't mind not using tabs but brace on the same line are harder for me to read. For now I just set vim to insert spaces instead of tabs and I'm fine. The faq answer makes sense

1580327210
fengb
You can insert an empty comment at the end of the previous line. fmt will then mangle the next brace :P

1580327245
sean1
hah. interesting.

1580327521
andrewrk
sirnaysayer, I just tried and got a dll

1580327554
andrewrk
I did `zig init-lib` and then changed addStaticLibrary to addSharedLibrary

1580327583
sirnaysayer
Ok, Ill try that out, thanks for looking at it. You're incredibly helpful.

1580327586
andrewrk
I'm using latest master (4fad162)

1580331084
sean1
I gotta say. I'm very impressed with the c ffi or rather lack there of.

1580331515
metaleap
guys, calling an `fn (u: MyUnionType)` with a `MyUnionType { .MyTag = <runtime-value> }` literal --- at compile-time the tag is fully known, BUT:

1580331517
metaleap
how to get at it?

1580331551
metaleap
now i can do `const idx = @enumToInt(std.meta.activeTag(u));`

1580331577
metaleap
but then using it like `@memberName(T, idx)` gives unable to evaluate constant expression

1580331599
metaleap
and `@compileLog(idx)` prints `| (runtime value)`

1580331672
andrewrk
sean1, @cImport will even translate inline functions :)

1580331690
metaleap
(fearing there's no split in comptime/runtime known-ness between the tag and the payload.. but hoping i'm wrong  :D  i had a really ritzy API design devised on that hope hehe)

1580331694
andrewrk
(but note translate-c is not complete yet)

1580331741
andrewrk
metaleap, @memberName is deprecated

1580331768
andrewrk
to get the tag of a tagged union, coerce the type to its tag type

1580331779
andrewrk
@as(@TagType(MyUnionType), u)

1580331841
andrewrk
zig doesn't have the ability to accept a tagged union as a parameter, where the tag is comptime known, but the payload is runtime known

1580331854
andrewrk
I suggest to have an additional comptime parameter with the tag type

1580331863
metaleap
thx for the heads-up. so this gives the known-at-comptime tag (even if runtime payload), at comptime? gotta try

1580332180
andrewrk
SyrupThinker, nice work on the code model PR

1580332187
andrewrk
merged

1580333039
metaleap
andrewrk thx again .. still no dice if my fn-call arg is a .{} literal with statically-knowable (aka hardcoded) tag but runtime payload. turns the whole expr into a `(runtime value)` when attempting to scrutinize at comptime. with hardcoded (statically-fully-known) payload values it works of course

1580333097
andrewrk
metaleap, zig doesn't have the ability to accept a tagged union as a parameter, where the tag is comptime known, but the payload is runtime known

1580333103
andrewrk
I suggest to have an additional comptime parameter with the tag type

1580333242
metaleap
will go in that direction, much appreciated & obliged!

1580334625
metaleap
andrewrk: i'm amazed, this approach now compiles & works without any loss in smoothness for the caller, nor any extra verbosity. after the honeymoon high, i still love this phenomenal lang. brings a subtle joy of work back that was lost 20 years ago moving away from good ole dos pascal to C#. kudos to you & all who poured so much effort into this. looking forward to the self-hosted compiler so non-C guys like me can contribute more proactively/autonomousl

1580334625
metaleap
y/at-all. now back to my codez.. :D

1580334671
jessermeyer
What is the encouraged way to send a zig string to a C api expecting a c string?

1580334705
jessermeyer
Auto coercing doesn't seem to work in my favor here.  error: expected type '[*c]c_ushort', found '*const [11:0]u8'

1580334855
andrewrk
:)

1580334890
andrewrk
I opened a handful of contributor friendly issues last night - things that can move from stage1 to self-hosted

1580334920
andrewrk
jessermeyer, I'm guessing that C API wants UTF-16LE

1580334941
andrewrk
std.unicode may help you here, but you're going to now have to deal with managing memory

1580334979
andrewrk
well if it's a string literal, zig can convert string literals to UTF-16 LE without any memory management trouble

1580334983
andrewrk
I don't think we have a function for that yet though

1580334997
andrewrk
that would be a nice addition to std

1580335015
tgschultz
I used to have one. It's probably outdated now.

1580335032
jessermeyer
LPCWSTR

1580335040
jessermeyer
Which is just a c string.

1580335053
andrewrk
usage would be something like: const W = std.unicode.utf16leStringLiteral; FooWindowsFunc(W("string literal"))

1580335067
andrewrk
jessermeyer, the W in LPCWSTR stands for "wide"

1580335086
jessermeyer
I see now.

1580335089
jessermeyer
The 'L' prefix.

1580335121
andrewrk
yeah. zig can do that with a function

1580335135
tgschultz
Yeah, there is a function for it in the win32 api package I distribute. _L() in win32_macros.zig

1580335149
tgschultz
but like I said, probably out of date with the string changes

1580335213
jessermeyer
That would be nice. =)

1580335265
jessermeyer
I'll add an issue for that.

1580335702
Snektron


1580336343
mq32
random thought: is a .NET/JVM backend in the scope of zig?

1580336381
mq32
that would be pretty awesome because right now i have to write some of my libraries twice. One for native environments and one for .NET envs

1580336576
BaroqueLarouche
P/Invoke is not an option ?

1580336626
andrewrk
mq32, yes

1580336628
mq32
it would be an alternative at least

1580336678
mq32
but i would

1580336678
andrewrk
I think zig is uniquely suited to generate code for vastly different environments

1580336690
mq32
andrewrk, yeah, right. that's what sparked the idea

1580336699
mq32
because we can already generate code für BPF

1580336705
mq32
which is also a quite unity environment

1580336736
mq32
it doesn't hurt when you have a garbage collector while using "manual memory management"

1580336752
mq32
a free would just be "set the pointer to null and let the GC  to the work"

1580336769
companion_cube
that coudl actually help to find double free

1580336789
companion_cube
(assert it's not already null in free)

1580336790
Snektron
mq32, is c ffi not an option in C#?

1580336819
mq32
Snektron, that's P/Invoke and is one of the best FFIs i've ever seen

1580336840
Snektron
ah

1580336847
mq32
you can model pretty much everything in P/Invoke that is foreign code

1580336861
mq32
even the crazy windows stuff like BSTR and any COM interface

1580336953
mq32
i think it's not smart to start working on a CIL backend before 1.0/Selfhosting

1580337062
andrewrk
yeah and the first step will be making zasm able to emit CIL or JVM bytecode

1580337084
andrewrk
there is probably already an assembly syntax for these things, if not, it would mean inventing one

1580337091
mq32
yep, there is one

1580337101
Snektron
So would zasm be a replacement for zig ir?

1580337115
Snektron
or would it be another stage

1580337119
andrewrk
it's an assembler and linker

1580337120
Snektron
or even an llvm-backend

1580337129
mq32
Snektron, no, it's a second stage that will generate code. zig will emit assembler and zasm will assemble/link that code

1580337145
mq32
you can actually create CIL projects in MonoDevelop and write hand-written "assembler" for .NET

1580337172
Snektron
wait so zig -> ir -> llvm -> zasm -> machine code

1580337201
mikdusan
zig -> ir -> zasm -> machine-code

1580337215
Snektron
ah

1580337239
andrewrk
it might not literally turn into assembly, but the code that lowers zig ir into machine code will need to use a lot of the same APIs that an assembler needs

1580337247
andrewrk
"instruction selection"

1580337278
mikdusan
this? zig -> ir -> zasm -> asm -> machine-code

1580337288
pmwhite
Is it possible to eliminate the bootstrap compiler's dependency on LLVM?

1580337305
pmwhite
using zasm, that is.

1580337321
Snektron
i doubt it, since zasm is zig

1580337341
pmwhite
it can't be bigger than llvm

1580337354
Snektron
but then you need zig to compile a part of the bootstrap compiler

1580337370
pmwhite
yeah...

1580337392
andrewrk
once we're shipping self-hosted, it could make sense to change stage1 to emit c

1580337396
Snektron
its probably possible to write a naive code emitter for zig ir directly

1580337402
andrewrk
because c is already a dependency of stage1

1580337455
mq32
A c backend would be funky, but i can image that it's also hard

1580337460
mq32
because of all those weird C quirks

1580337496
companion_cube
doesn't LLVM inherit some of these quirks? (some of the UB)

1580337500
andrewrk
that would provide the ability to bootstrap a fully self-hosted zig compiler without llvm

1580337506
Snektron
It would be liuke google translate, where you translate back and forth until you get a completely incomprehensible result

1580337511
Snektron
but then with c

1580337524
Snektron
and zig

1580337594
fengb
LLVM has wasm output, and there are wasm -> C decompilers

1580337599
fengb
Need moar chains

1580338100
mikdusan
Snektron:

1580338111
mikdusan
top level struct (no namespace) --> void __cdecl foobar<struct Top>(void)

1580338128
mikdusan
namespaced'd struct --> void __cdecl foobar<structmynamespace::Foo::Bar*>(void)

1580338139
mikdusan
the space after 'struct' disappears

1580338177
mikdusan
not a show stopper but yeesh

1580338480
Snektron
thanks microsoft

1580340004
fengb


1580340202
mq32
fengb, because the buffer may not be resized

1580340212
mq32
but it uses the array list internally to back the data

1580340222
mq32
so readLineFrom filles the buffer with data

1580340241
mq32
but as this may never be more than slice.len bytes, you are never required to reallocate memory in the buffer

1580340245
mq32
as the buffer is backed by slice[]

1580340302
mq32
so you either get error.OutOfMemory when your input slice is too small to fit a whole line or it succeeds

1580340304
fengb
Hmm okay

1580340420
metaleap
is that comment linked above outdated? "We cannot use Buffer.fromOwnedSlice, as it wants to append a null byte after taking ownership, which would always require an allocation." but i'm not seeing anything like that in Buffer.toOwnedSlice (it merely alloc.shrink()s and initNull()s which dont seem to alloc)

1580340460
metaleap
aahh scratch that, "from" vs "to"

1580340461
metaleap
too late

1580340685
daurnimator
There's a few uses of `std.Buffer` in the standard library that should be changed/removed (e.g. io.readLine)

1580340785
frmdstryr
Is there any way to make "error unable to inline" just a warning?

1580340807
frmdstryr
For some reason it works fine when I build but errors when trying to test

1580341497
daurnimator
fengb: why not make testing_allocator actually leak_allocator?

1580341573
daurnimator
as in, testing.leak_allocator is a silly name: just call it testing.allocator

1580341790
fengb
I was considering swapping the two names. Having one that doesn’t detect leaks can still be useful for the lazy

1580341821
daurnimator
fengb: I disagree.... you should only get to avoid leak detection if you

