1603411232
ifreund
hmm, i32x4 or 4i32 might be less cumbersome to type than [|4|]i32

1603411482
ryuukk__
that is the first time i see || inside []

1603411484
ryuukk__
what it does?

1603421750
frmdstryr
Can I create a []u8 with an initial value without using mem.dup?

1603421752
frmdstryr
var str: []u8 = "thisdoesnotwork";

1603421774
frmdstryr
? I thought there was some way to do it but I forget..

1603422075
ryuukk__
you can, var str: [] const u8 = "thiswork"

1603422079
ryuukk__
if i remember correctly frmdstryr

1603422116
frmdstryr
but then it's const

1603422636
kandinski
frmdstryr: you want to create a mutable slice and the backing array of u8 in one go?

1603422667
kandinski
(I didn't want to sound incredulous or critical, just to make sure I understand your intent)

1603422678
frmdstryr
yes

1603422718
kandinski
interesting puzzle

1603422738
kandinski
I don't have an answer, but now it will be on my mind as I work on my project

1603422793
torque
you can specify it as an array of bytes, I believe

1603423001
kandinski
frmdstyr trying something...

1603423027
frmdstryr
The only thing I can get to work is to define an undefined array then use std.fmt.bufPrint to print the initial value into it but it seems awfully convoluted

1603423217
kandinski
frett27_: this didn't work:     var str: []u8 = ("lalalala")[0..];

1603423228
kandinski
sorry, frmdstryr ^

1603423402
torque


1603423432
torque
maybe I missed something in the question

1603423450
kandinski
I think the question was about a quick shorthand

1603423465
kandinski
not about how to get a mutable slice of characters by any mean

1603423552
torque
it's not possible to make it from a string literal without duping because literals are stored in rodata

1603423612
kandinski
excuse my ignorance, what is rodata?

1603423650
kandinski
I mean, "ro" probably means "read only", but and I understand "data", but isn't this the same as saying "it's const"?

1603423909
frmdstryr
torque: Ah, ok make sense

1603424783
ryuukk__
TIL: there is a native debugger for vscode and it works great with ZIG, breakpoints, watches, even you can mouse over symbols and see their value

1603424817
ryuukk__
i love it

1603426909
torque
kandinski, yeah, it has to do with storage location of the data in the output binary (see

1603427033
kandinski
torque: thanks!

1603427333
kandinski
is there a way to clobber a mutable array of u8 with a slice that's better than this? mem.copy(u8, self.errorbuffer[0..len], message[0..len]);

1603427352
kandinski
(len already contains the message.len)

1603427996
kandinski
I'm having trouble overwriting struct fields

1603428042
kandinski
I konw structs are passed const into functions, and this includes a struct's own functions sugared to pass the struct as first parameter with "self"

1603428081
kandinski
should I only have struct fields for immutable values? I feel the language is pushing me in that direction.

1603428317
torque
do you have an example of what you're describing?

1603428360
kandinski
yes, let me extract

1603429871
Axiomatic
I'm new so i don't know

1603429932
kandinski
torque: this is a reduced model of my PCRE2 wrapper. the saveError function is actual code, and it manifests my intent but doesn't work because self.errorlength = len can't assign to constant. There may be other issues, but I wonder if this is not the design:

1603430239
kandinski
And this is the kind of thing I'm doing to have the C library write directly into the struct's field buffer:

1603430269
kandinski
I've been writing C/Zig for less than a week, so I wonder if there's some kind of design insight that I'm missing.

1603430288
kandinski
(the code from ges6 would go in Pattern.init())

1603431181
torque
I believe you need to specify the self type as a pointer (i.e. *Pattern) for it to be mutable

1603431253
torque
so something like `fn saveError(self: *Pattern, error_code) void`

1603431345
torque
(I believe c_wrapper_that_returns_an_error_code would also need to be updated because it calls saveError)

1603435886
kandinski
torque: I see, thanks!

1603437018
kandinski
dammit: ./re.zig:49:5: error: opaque types have unknown size and therefore cannot be directly embedded in structs

1603437037
kandinski
this is a type that comes from C and is in the C heap

1603437044
kandinski
I can however store a pointer to it, right?

1603437066
kandinski
silly question, let's try it

1603440119
omglasers2
the docs have some info

1603441773
ifreund
kandinski: you can use a string literal, just dereference it

1603441788
ifreund
var my_arr = "Hello".*;

1603441843
ifreund
torque: you may be interested as well ^

1603443493
torque
interesting

1603443966
ifreund
(string literals are constant pointers, so you can dereference them to get an array and assign it by value)

1603444796
kandinski
ifreund: thanks

1603444814
kandinski
now what do you make of this?

1603445043
ifreund
const zero_matches: Matches = zero_array_of_strings[0..];

1603445048
ifreund
does this line not error?

1603445052
kandinski
nope

1603445060
kandinski
I'm trying to cast the array into a slice

1603445085
kandinski
and it does something, apparently not something stable under assertion of identity

1603445109
kandinski
I'm running 0.6 from nixpkgs

1603445163
kandinski
oh, ifreund, I see what you mean

1603445178
kandinski
this is equivalent to [0..0], which is what?

1603445295
ifreund
no that's actually vaild, constness doesn't matter with zero bit types

1603445323
kandinski
yeah, but there's no clear literal for a zero length slice of anything

1603445344
kandinski
which, since it doesn't need a backing buffer, should be available in its own literal, IMHO

1603445376
kandinski
s/should/could/, why demand like I'm the customer here (apologies)

1603445514
ifreund
kandinski: oh this is actually fine, you just cant use mem.eql like that

1603445522
kandinski
boing of course

1603445534
kandinski
you're 100 right, of course

1603445621
kandinski
how do I figure out if two results are the same, though? how can I see that the bytes from a slice are the same as the bytes from another slice?

1603445630
ifreund
for (zero_matches) |str| assert(mem.eql(u8, str, str));

1603445637
kandinski
oh

1603445641
kandinski
dang ofc

1603445648
ifreund
mem.eql wants the element type not the slice type

1603445654
kandinski
yeah

1603445664
kandinski
I have to iterate through two slices at the same time, though

1603445669
kandinski
expected and returned

1603445673
kandinski
but I'll figure that out

1603445690
kandinski
I mean izip, etc.

1603445692
kandinski
thanks mate

1603445701
ifreund
no problem

1603445762
kandinski
as to the construction of the zero element slice of strings, with a zero length backing buffer, would that be as idiomatic as reasonably expected?

1603445935
ifreund
const zero_matches: [][]const u8 = &[0]const u8{};

1603445938
ifreund
that should work

1603446037
kandinski
ifreund: thanks again

1603459146
frmdstryr
Does anyone know of any examples/repos of using SIMD/Vector's for searching text?

1603459678
radgeRayden
if you have a conceptual interest in it, you could look at SIMDJson, which is written in C++.

1603459715
radgeRayden


1603459977
frmdstryr
radgeRayden: Cool thanks!

1603467561
ryuukk__
i wish we could do something like this: if(abool and optional) |o| {}

1603467578
ryuukk__
i have to break this in multiple line and 2 if{}

1603467705
ryuukk__


1603467709
ryuukk__
the 2nd is much more readable

1603467746
ryuukk__
2 more lines, and 1 more indentation

1603467815
ryuukk__
maybe there is a way but i'm not aware of?

1603467815
g-w1
I think this would be very hard to impliment. I think the parser only expects one thing in the parens if it is unwrapping an optional, so the parser would have to communicate with analyzer

1603467843
g-w1
and I think it hinders readability because you don't know which one of the things is an optional if you are reading the code. imo

1603467865
ryuukk__
it is if variables name are a, b, c ,d ,e

1603467876
ryuukk__
real world it's: enable_something

1603467879
dutchie
you can't design language features around naming conventions

1603467881
ryuukk__
you know by reading it's a bool

1603467892
ryuukk__
but he said it is hard to know what it is

1603467895
dutchie
the compiler doesn't know that "enable_something" is a boolean

1603467907
ryuukk__
it's a language, it should be "readable"

1603467910
dutchie
(when it's tokenising at least)

1603467932
ikskuh
ryuukk__: if(something and parent != null) { std.log.info("{} {}", .{ b.id, parent.?.id }); }

1603467944
ikskuh
which is now the correct application of .? as you are 100% sure that parent is not null

1603467952
ryuukk__
ah thanks ikskuh

1603467991
ryuukk__
it works, perfect

1603473478
Cadey
does zig have any tooling to help you with memory management?

1603473525
companion_cube
the general purpose allocator detects some problems I think

1603473980
ask6155
I think there is a debug allocator too

1603474234
Nypsie[m]
std.testing.allocator is backed by the general purpose allocator since that was merged in

1603474248
Nypsie[m]
The gpa has leak and use after free detection

1603476965
g-w1
andrewk: just saw your video about the crazy landlord (I am subscribed to your rss). I just want to say that I hope you are well.

1603478387
ryuukk_
i saw the video too, if you know him IRL call police so they can check what is wrong, it doesn't look safe the way he ended the video..

1603478425
betawaffle
andrewrk: best of luck with your landlord.

1603485215
andrewrk
thanks

1603485401
kandinski
how can I ensure that my slicing indexes are runtime known only, and not comptime known? I'm trying to write tests, and in tests everything is a literal, therefore comptime known.

1603485430
kandinski
Same for the string buffers that will back the slices, if anybody has a tip so I can ensure they are runtime known in the tests.

1603485476
kandinski
context: wrapping PCRE2, I'm writing utility functions for a slice of slices into the target string, and obviously in the regex library all of those will be runtime known only.

1603485539
kandinski
The issue is that the wrapping code is declaring types as []SomeType, but the comptime known nature of the tests makes my values *[N]Something

1603485552
kandinski
s/Something/SomeType/g

1603485900
jayschwa
kandinski: Why does it matter? Are you concerned that a test with comptime-known data will hide runtime problems?

1603485977
kandinski
jayschwa:

1603485998
kandinski
the types returned when you slice with comptime-known indices and with runtime-known ones are different

1603486010
kandinski
so my tests don't even compile because types don't match

1603486024
kandinski
between the code I'm writing and the values that the tests generate

1603486127
kandinski
jayschwa: after having seen this issue, I would also be concerned that a test with comptime-known data could hide runtime problems, but for that my test has to compile first, and I'm not there yet.

1603486184
torque
kandinski, that page you linked seems to have an example right on it of runtime indexing

1603486201
torque
by assigning to a variable instead of using a literal

1603486220
kandinski
torque: hmmm silly me

1603486602
gonzus
Hey. I just watched Andrew's video about his landlord and wanted to check and see if Andrew is ok.

1603486621
gonzus
Gonna check the channel logs in the meantime...

1603486651
gonzus
Ah, I see him replying in the last half an hour. Good.

1603486800
gonzus
Stay safe Andrew. I would suggest you get some legal advice and even police involvement. Take care!

1603486907
kandinski
oh damn, I'd missed that. Best wishes and good luck indeed.

1603487045
kandinski
torque: it's not just assigning to var, you have to give it an explicit type, or there will be a confusing compiler error. That's what had thrown me last night when I tried just that:

1603487307
kandinski
torque: got these tests running, thanks very much

1603487615
kandinski
a

1603494583
jayschwa
andrewrk: vacating your apartment seems logical, but I hope you still take this guy to small claims or release his name so other people can learn to avoid him.

