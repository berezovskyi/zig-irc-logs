1602375964
g-w1
Is there a standard library function to tell you if you are at the root of the filesystem ("/" or "C:\") If not ill write it to fix a bug in the new `zig build` command where it continually loops because std.fs.path.dirname("/") just returns "/"

1602376189
marler8997__
looks like someone has already gone to the trouble of representing the windows SDK in JSON form:

1602376315
wilsonk
marler8997__: is github.com/GoNZooo/zig-win32 something like what you are looking for?

1602376422
wilsonk
oh, or were you looking for the SDK?

1602376424
marler8997__
wilsonk yes....however, it looks to be pretty bare bones

1602376498
marler8997__
I'm wanting a complete win32 api available in zig modules

1602376519
wilsonk
ah, ok. Maybe gonz_ (who I think is the same user) has a script to generate more zig modules?

1602376540
ifreund
g-w1: I just looked and didn't find one

1602376547
g-w1
ok. i think ill add it

1602376554
marler8997__
I don't see any script or docs on how gonzo generated what he has

1602376618
wilsonk
marler8997__: yeah, I sort of pinged them hoping they would let you know how they did it ;)

1602376631
marler8997__
let me know what he says

1602376647
wilsonk
will do

1602387515
redj
hey, is this a know issue in bootsrap where all the symbols are duplicated or something?

1602387515
redj
/usr/bin/ld: /a/sd/d/zig/bootstrap/out/zig-x86_64-linux-musl-native/bin/zig: in function `_fini':

1602387515
redj
(.fini+0x0): multiple definition of `_fini'; /usr/lib64/gcc/x86_64-pc-linux-gnu/10.2.0/../../../../lib64/crti.o:(.fini+0x0): first defined here

1602387562
redj
this happens when running zig cc

1602387599
redj
zig cc --version for example will give a ton of these errors for all these symbols

1602429155
ifreund
tdeo: I'm seriously considering just linking against the private code generated by libwayland's scanner, I don't think I'm going to have success with stage 1

1602429188
ifreund
I feel like thats marinally better than an initGlobalState() function

1602429625
g-w1
What is the best way to turn a []const u8 to [*:0]const u8? I am trying to execve but I have path as a []const u8. And is [*:0]const u8 just a null terminated c string?

1602429706
ifreund
you need to allocate memory one byte larger than your slice and copy, then set the last element to null

1602429720
ifreund
std.cstr.addNullByte does this for you

1602429741
g-w1
ok

1602429756
ifreund
if you have an upper bound on the size you could of course use a buffer instead

1602429800
ifreund
the execve from the std should take a []const u8 though, execveZ takes the [*:0]

1602429839
g-w1
It is saying this

1602429904
ifreund
indeed, the version taking a slice would be in std.os not std.os.linux

1602429928
ifreund
std.os.linux is "raw" linux syscalls, std.os wraps syscalls to return zig error sets and whatno

1602429933
ifreund
t

1602430029
g-w1
I don't see an execve in std.os.

1602430125
ifreund
heh, I guess we don't have a wrapper for that then

1602430136
ifreund
we do for e.g. execvpe

1602430202
g-w1
Ok. Ill just use addNullByte with execveZ wrapper. I am trying to solve

1602430243
ifreund
oh nice, that's been annoying me

1602430282
ifreund
or, nvm it was zig build forking that was annoying me while trying to use gdb

1602430287
ifreund
that's a separate issue though

1602431769
g-w1
Should I write an std.os.execve wrapper?

1602431802
g-w1
It seems like the execveZ references it as if it existed. `/// Like `execve` except the parameters are null-terminated,

1602432030
g-w1
for now ill just use std.os.execvpe instead of std.os.execve

1602432327
BaroqueLarouche
am I the only on Windows that linking and zig0 is dog slow since the new zig cc branch was merged ?

1602432541
Nypsie[m]
Nah, it's known :)

1602432556
BaroqueLarouche
good :)

1602432706
ifreund
g-w1: I'd say go for it, I thought we already had one

1602433470
g-w1
ok. i just implimented it with execvpe but ill switch it. :)

1602433546
ifreund
just go with whichever is cleaner :P

1602433613
g-w1
I think execvpe is pretty clean. The only bad thing that I think is that it needs memory allocation for env_map to be a std.BufMap.

1602437254
g-w1
if a function just returns an error (ExecveError || error{OutOfMemory}) but not (ExecveError || error{OutOfMemory})!type how would you check if an error was returned? I cant seem to find an example of this in the docs.

1602437295
ifreund
g-w1: execve only returns if an error occured

1602437394
g-w1
oh. that makes sense. is it like exec keyword in bash?

1602437421
ifreund
sure

1602437429
g-w1
Ok.

1602437460
ifreund
see the execve(2) man page for more details

1602438421
frett27
ifreund! is it yours ? git.s-ol.nu

1602438493
ifreund
no? i'd assume that belongs to s-ol

1602438534
frett27
ohhh, i see i've not seen the name

1602438569
frett27
in the irc, because i was trying to use imgui with zig, and he has an effort about

1602438582
frett27
on this git repo

1602438773
ifreund
I've never tried either, but there's also this one:

1602438948
frett27
thk's i was not aware of it, and seems largely more mature .. -> let's give it a try

