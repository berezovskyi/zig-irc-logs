1593216347
pixelherodev
andrewrk: I think incremental compilation of ZIR is worth keeping

1593216354
pixelherodev
A lot of the code paths

1593216367
pixelherodev
The burden of keeping it working is pretty light, relatively speaking

1593216525
pixelherodev
also, food for thought: since we have C support (currently planned as an extension requiring LLVM in stage2), and we have a C parser good enough for translate-c, why not add a C Module type to self-hosted?

1593216562
pixelherodev
I'd be more than willing to do all the work of adding it myself if that was welcomed :)

1593216573
mq32
wait…

1593216579
mq32
you mean translate C to ZIR?

1593216810
andrewrk
I think an experimental C frontend on top of the self-hosted backend is worth proposing

1593216840
mq32
neat

1593216985
leeward
That would be cool.

1593223107
marler8997
andrewrk, looks like valgrind shims malloc_usable_size to return the original size requested to malloc, interesting

1593223171
andrewrk
good to know, hopefully that's a precedent other tools follow, in which case our use of malloc_usable_size will be justified

1593224398
andrewrk
does anyone remember what the gcc backend IR is called?

1593224451
andrewrk
ahh GIMPLE

1593224457
leeward
Right, that's it.

1593224487
leeward
Hard to get at, because RMS.

1593224584
leeward
I really want a backwards version of DragonEgg. LLVM IR -> any backend supported by GCC would be amazing.

1593225882
pixelherodev
Fixed it for ZIR!

1593232850
marler8997
just watched a 4 person game jam:

1593232860
marler8997
makes me think it would be cool to organize a Zig-only game jam

1593234421
andrewrk
that sounds really cool

1593234436
andrewrk
I think it would be unreasonable to do it without c libraries at this point

1593234479
marler8997
yeah

1593247856
antaoiseach
Can anyone please explain bitcasting vs bytecasting in some detail? Or point me to some relevant sources? When would I need to use either?

1593247866
antaoiseach
and how that relates to alignment?

1593247880
antaoiseach
I understand the basics, but I can't seem to understand the specific use-cases

1593248009
antaoiseach
Also, why not always use packed structs?

1593248053
antaoiseach
(I mean vis-a-vis normal structs, I understand the use-case for extern structs)

1593250281
ifreund
well, having an undefined memory layout allows for optimizations that aren't possible otherwise

1593250415
ifreund
oh they left

1593250743
pixelherodev
andrewrk: when you get a chance, can we discuss stage2 a bit more? :)

1593250765
pixelherodev
Figured out why I"m having issues fixing this for Zig code, but while I thought of a few fixes, this is definitely a case where your input is required

1593250927
josias
Hello. I was wondering if there was something like itoa in the Zig standard library. Just something to convert an integer to a u8 array.

1593250950
pixelherodev
Sure is :)

1593250961
pixelherodev
std.fmt.bufPrint is probably what you want

1593250961
alexnask
There are various functions in std.fmt, like std.fmt.bufPrint or std.fmt.allocPrint etc

1593250967
pixelherodev
There's other functions in std.fmt that might be of use too

1593250970
pixelherodev
Yeah :)

1593250973
alexnask
^_^

1593250973
josias
Okay. Thanks!

1593251002
pixelherodev
This is quite possibly the only channel I've been in in which someone asked a question, people responded in tandem with the same answer, and everything was just genuinely constructive :D

1593251004
pixelherodev
I freaking love it

1593251025
pixelherodev
Okay, not the

1593252710
josias
Whenever I try to read from stdin, it gives an EndOfStream error. Any ideas? I am using readByte().

1593253166
ifreund
is there anything in your std when you try to read? could try something like echo "test" | ./zig-cache/bin/my_program

1593253329
ifreund
s/std/stdin/

1593254238
nrdmn
I'm trying to compile `pub fn main() void {}` for target avr-freestanding and I'm getting "LLVM ERROR: Not supported instr: <MCInst 242 <MCOperand Reg:51> <MCOperand Imm:1> <MCOperand Reg:48>>"

1593254256
nrdmn
has anyone had this issue before?

1593254509
nrdmn
Here's the last few lines of output with --verbose-ir:

1593255115
ifreund
hmm, I'm not very familiar with bare metal but maybe you need to declare _start() directly?

1593255126
ifreund
something like export nakedcc fn _start() noreturn {}

1593255170
ifreund
oops nakedcc is gone, would be callconv(.Naked) now

1593255305
alexnask
^

1593255518
nrdmn
nope, same message in the end, although IR output stops at a different location

1593255577
nrdmn
hmm.. no error with --release-small.

1593255584
ifreund
interesting

1593255588
pixelherodev
Weiiiiiird

1593255603
pixelherodev
Oh heh, my Zig kernel is definitely dead of bit rot

1593255605
pixelherodev
Whelp

1593255609
pixelherodev
Time to do a new one! :P

1593255618
alexnask
Hm so it may be some instruction in a safety check?

1593255621
ifreund
I think it'd be worth opening an issue for that then

1593255626
ifreund
yeah that's what I was thinking

1593255628
pixelherodev
Oh, maybe it's a trap?

1593255640
pixelherodev
/ breakpoint / whatchamacallit

1593255648
pixelherodev
The panic handler

1593255650
pixelherodev
Try replacing it?

1593255656
alexnask
Good call

1593255657
ifreund
oh yeah good call

1593255678
pixelherodev
I only have... uh, way too much experience with bare metal in Zig :)

1593255723
pixelherodev
Ugh, this stage2 issue is realy bugging me

1593255725
pixelherodev
really*

1593255732
pixelherodev
It's a design problem, I think.

1593255772
pixelherodev
I've thought of a number of solutions but all of them have serious downsides

1593255820
pixelherodev
Basically, we track analyzed Decls in a Map(NameHash, *Decl) - if you do a redefinition (`const a = foo; const a = bar;`), the name is the same for both

1593255849
pixelherodev
It

1593255902
pixelherodev
And irrespective of the contents (e.g. `const a = foo; const a = foo;` is equally invalid), so a trick like `name_hash XOR contents_hash` as the key wouldn't work

1593255926
pixelherodev
(not to mention that we use name_hash alone *on purpose*)

1593255936
ifreund
and you can't use e.g. line number either cause it's incremental

1593255940
pixelherodev
Exactly.

1593255947
pixelherodev
Incremental compilation is the root of the issue here

1593255954
pixelherodev
I can get it erroring easily

1593255961
pixelherodev
It's really not that hard, at all

1593255984
pixelherodev
But we can't clear the errors on each update (which was my first solution until Andrew pointed out why it's bad)

1593255997
pixelherodev
If neither broken decl is updated, they won't be reanalyzed, but we need the errors to remain

1593256014
pixelherodev
Which means we need to be able to reanalyze both decls

1593256030
pixelherodev
The reason it's failing currently is that it's trying to analyze them both with the same name_hash - which means the same

1593256035
pixelherodev
Rather

1593256052
pixelherodev
The test does a failure (redefines a symbol), then updates the source to remove the second definition

1593256075
pixelherodev
Since it's unable to properly track the second definition, it doesn't realize that it's been deleted

1593256117
pixelherodev
The current symption is that the error message remains, but the source code no longer contains the referenced line, so it errors trying to figure out the line and column from the byte offset, which is no longer in a valid spot in the source

1593256123
pixelherodev
s/tion/tom

1593256155
pixelherodev
The same issue

1593256186
pixelherodev
The actual test I was working on - exported symbol collision - was straightforward in ZIR, because both `export`s have unique IDs

1593256202
pixelherodev
Which led to one idea for a solution: lower Zig to ZIR for each incremental update

1593256225
pixelherodev
But that's terrible for performance and would basically mean a major design change to workaround a single minor edge case

1593256297
pixelherodev
A smaller change which would also have worse performance characteristics would be to turn the map value from a *Decl into a []*Decl, and have it track both

1593256322
pixelherodev
But that means overhead for

1593256327
pixelherodev
So, not great.

1593256330
ifreund
yeah, neither of those are great

1593256367
pixelherodev
Hmm

1593256370
pixelherodev
Here's an idea

1593256377
ifreund
what about an ancillary hashed_name -> []*Decl hash map?

1593256382
pixelherodev
When a redefinition is detected, the original decl could just be invalidated

1593256390
ifreund
that only gets used for redefinitions

1593256392
pixelherodev
ifreund: same problem there,

1593256409
pixelherodev
It'd mean checking an additional map

1593256415
pixelherodev
Which means a map lookup

1593256425
pixelherodev
I think invalidating the original decl is the way to go here

1593256458
pixelherodev
If the original one is invalidated and removed from the map... wait hmm, failed_decls tracks it though

1593256471
pixelherodev
It could mark the original one as invalidated, and leave it in the map though

1593256471
ifreund
well, since this case is so rare it could actually be an ancillary arraylist or something

1593256477
pixelherodev
Yes, but it doesn't even matter

1593256490
pixelherodev
If we have an extra list/map/whatever, that is in and of itself problematic

1593256521
pixelherodev
Best case, it means a single unnecessary list check on

1593256564
pixelherodev
My goal here is a solution that has literally zero cost for any input in which there are no redefinitions

1593256576
pixelherodev
I'm going to try invalidation and see if there's any issues with it...

1593256726
pixelherodev
ifreund: thanks for the feedback :)

1593256756
ifreund
heh, I didn't actually say anything particularly useful :P

1593256756
pixelherodev
Rubber duck progamming :P

1593256765
ifreund
quackl

1593256768
pixelherodev
:)

1593256923
pixelherodev
Totally unrelated

1593256925
pixelherodev


1593256927
pixelherodev
Fun read

1593257388
ifreund
heh, yeah I definitely relate to that style of programming

1593257668
pixelherodev
Ohh, found the real issue! Woo

1593257735
pixelherodev
When the second definition was removed, the first is left alone - and thus, not analyzed again

1593259795
scientes
> if they xor the “next” and “prev” pointers of their linked list into a single DWORD to save 32 bits

1593259796
scientes
oh god

1593259798
scientes
that is horrible

1593259839
scientes
super clever, but horrible

1593259853
ifreund
aye

1593259903
scientes
don't remember Knuth covering that trick

1593261504
marnix
Quick question, using zig 0.6.0. In a while loop with error union with optional type, why is the 'while' type still optional?

1593261593
marnix
So with `fn f() anyerror!?u8` in `while (f()) |item| {...} else |err| {...}`, I would expect item to be u8, but it is ?u8.  Why is that?

1593261835
ifreund
it will only unwrap one layer of optional/error union afaik

1593261855
ifreund
consider what would happen if there was no error, but the optional was null

1593261860
ifreund
then the else branch doesn't really work

1593261876
ifreund
(if the while unwrapped both layers)

1593261945
alexnask
zls now has renaming, here is an example of renaming std.ArrayList

1593261967
ifreund
woah

1593261977
alexnask
(Note: currently renaming doesnt flow through aliases and always checks all open documents)

1593262053
alexnask
So in this example in `std.zig` the decl will become `pub const Vector = @import("array_list.zig").ArrayList;`, eventually it will probably support renaming the inner decl if it does not cross package boundaries

1593262153
ifreund
makes sense, still pretty cool though

1593262353
marnix
ifreund Thanks-- continuing to look for best/simplest pattern for finite iterator that can have errors.

1593262408
ifreund
while (try f()) |item| would work, though then you handle the errors ouside of the current function

1593262464
ifreund
you can also use a block for the while statement: while (f() catch |e| handle(e)) |item|

1593262475
ifreund
er, that's not a block but whatever

1593262613
marnix
ifreund I like that last option, thanks!

1593262626
ifreund
no problem!

1593262635
marnix
ifreund (Well, `handle(e)` could be a block :-) )

1593262689
ifreund
a block would be more like while (blk: { foobar(); break :blk f(); }) |item|

1593262718
ifreund
but yes what you said would make a lot more sense

1593264008
marnix
Is there a pattern for 'does expression ... return error ...?', in tests?

1593264151
marnix
Simply doing assert(... == ...) doesn't work, it seems.

1593264308
traviss
std.testing.expectError i believe

1593264462
traviss
yes its defined as: std.testing.expectError(expected_error: anyerror, actual_error_union: var)

1593264466
marnix
Just discovered `if (...) |_| unreachable else |err| assert(err == ...);` which kinf of makes sense.  Not using std.testing yet, will look in to that later.  (Noob here.)

1593268978
ifreund
marnix: fyi you should be using std.testing.expect not std.debug.assert in tests

1593269009
ifreund
the latter will be UB in release-fast/release-small build modes if the assert fails

1593269185
marnix
ifreund Thanks for that tip, will check it out.  So what form of assert is compiled away in a release mode?

1593269223
marnix
Because I want to use asserts in non-test code as well, without UB.

1593269225
ifreund
marnix: std.debug.assert is just if (!ok) unreachable;

1593269245
ifreund
hitting unreachable code is safety-checked UB

1593269246
marnix
ifreund: Clear, thanks.

1593269353
marnix
Ah, OK, so release-safe checks asserts.  And release-fast/release-small completely ignore the asserts?

1593269394
fengb
Yes but not just ignore. It assumes unreachable as correct and uses that for optimization

1593269395
ifreund
release-safe keeps all of the safety checks enabled, included for unreachable code

1593269486
fengb
So for something like “catch unreachable”, release-fast convinces the compiler that errors cannot happen and optimize accordingly

1593269510
marnix
OK, release-fast/release-small assumes the asserted expression is true, can incorrectly optimize if it's not, hence UB.  Clear, thanks!

1593269531
fengb
Yep 👍

1593269615
shcv
how does zig determine the type of a struct; I presume some sort of tag? Is there any way to have it hide the tag in a tagged pointer contained in the struct?

1593269649
fengb
Types don’t have runtime representations atm

1593269657
fengb
So you’ll have to invent your own identifier

1593269715
fengb
Typically done with an enum of sorts

1593270280
shcv
ok

1593270306
shcv
has anyone done any tagged pointers?

1593270353
shcv
I had an early draft with a packed struct of u2,u30...

1593270374
ifreund
what's the use case?

1593270400
ifreund
I've yet to find one where a tagged union didn't do what I want

1593270456
shcv
well, building a hamt data structure; each entry is either {map,subtable_ptr}, {key,value_ptr}, or empty

1593270495
ifreund
that sounds like a tagged union to me

1593270636
shcv
so how is a tagged union represented?

1593270771
alexnask
its an enum value + enough storage for the biggest of the possible types

1593270771
ifreund
like the binary representation? It's undefined unless you used packed just like structs

1593270803
shcv
since the structs are simple pointer pairs, it seems like it would be nice to have them aligned, which sounds hard to do with the extra enum tag

1593270923
marler8997
Zig is free to reorder structs that aren't tagged with packed/extern.  So if one field requires more alignment than another, it can reorder them to keep @sizeOf and @alignOf to a minimum

1593270950
ifreund
^

1593270982
shcv
ok; in that case I guess for flexibility I'll try the tagged union, and make it so that users can pick their desired map/key sizes, which may not be usize

1593270991
ifreund
i'd say that a non-packed tagged union is what you want here

1593271011
ifreund
if profiling/whatever finds a better solution than by all means change it :D

1593271120
shcv
start simple, optimize later

1593271142
shcv
especially since I don't really know what I'm doing

1593271497
shcv
how do I cast a []u8 to []u5?

1593271503
shcv
or does that even make sense?

1593271625
ifreund
@ptrCast(), but i'm not sure why you would want to?

1593271728
shcv
well, I want to take 5 bits at a time of the key for indexing into the subtable array

1593271736
shcv
it seemed like a good way to do it...

1593272148
shcv
how do I print the type of something? I tried printing @TypeOf, but I think it just printed "type"... unless that is the type

1593272449
alexnask
yeah fmt prints "type" for every type which is annoying

1593272458
alexnask
you have to @typeName(@TypeOf(...))

1593272616
ifreund
is this supposed to be a compile error?

1593272622
ifreund
if I remove the if (true) it compiles

1593272632
ifreund
or if i use curlies

1593272754
alexnask
Looks like `while (it) |node| : (it = node.next) if (true) count` is parsed as the lhs

1593272772
alexnask
Ive encountered this in similar situations before as well with if

1593273015
shcv
hmm; I don't think my cast to u5 did what I wanted it to; though I can't say I'm surprised. It ended up giving me the low 5 bits of each byte, instead of a packed u5 array

1593273036
shcv
guess I'll have to extract 5 bits at a time manually

1593273110
tgschultz
shcv: there is PackedIntArray in std that may be what you're looking for

1593273257
ifreund
neat, I hadn't seen that before

1593273263
ifreund
looks like that would do the trick

1593273272
shcv
ooh

1593273670
oats
is PackedIntArray only useful for non-powers-of-two ints?

1593273703
ifreund
afaik yeah

1593275412
shcv
what happens if it's a power of 2?

1593275425
shcv
though it seems to work perfectly for my 5 or 6 bit usecase

1593275470
ifreund
well, it would still work for things that are a power of two

1593275483
ifreund
but it wouldn't really be worth using since those already align properly

1593275493
shcv
even sub-byte ints?

1593275504
ifreund
not 100% sure but I think so?

1593275512
shcv
I guess that makes sense

1593275518
shcv
it was probably alignment that I was dealing with

1593275537
ifreund
I haven't really done that much bit-twidiling with zig yet, mostly higher level stuff

1593275746
ifreund
alexnask: yo, i noticed that i'm not getting fancy semantic highlighting for the second init() call here

1593275757
ifreund
is this because the build option is default disabled?

1593275820
alexnask
If you dont get highlighting for a function its because it wasnt resolved for some reason

1593275847
alexnask
There are a couple of reasons why it couldnt have been resolved I would have to see the specific type so idk :P

1593275869
alexnask
I could probably default to returning a "function" token in this case

1593275964
ifreund
ah, probably cause the type also depends on this build option:

1593275978
ifreund
I kinda wish I had found a better way to do this

1593275998
ifreund
VoidView is just

1593276000
alexnask
Yeah that would do it

1593276019
alexnask
Any comptime if expression atm

1593276028
alexnask
Not necessarily the build option stuff

1593276032
ifreund
makes sense

1593276071
alexnask
have you explicitly turned off the regular highlighting or does it not highlight function calls by default btw?

1593276091
alexnask
At least on vscode the normal highlighting is applied then semantic tokens on top

1593276129
ifreund
yeah, I didn't add function call highlighting to the regular one yet

1593276139
ifreund
guess that wouldn't be too hard for zig now that I think about it

1593276183
alexnask
Ah, did you write your own highlighting? I thought there were already a couple around for kak

1593276186
ifreund
maybe I should just do that, I only really need semantic highlighting for types

1593276211
ifreund
i wrote the one that got merged to the kakoune master

1593276221
alexnask
Cool!

1593276225
ifreund
but yeah there are a few floating around

1593276252
ifreund
I also was too lazy to highlight escape sequences inside strings, should probably add that as well

1593276419
alexnask
Im gonna add 'namespace' and 'function' default for non-resolved fn calls later

1593276451
alexnask
Also I guess Ill enable the 'generic' modifier where it applied, I defined it but never used it lol

1593276509
alexnask
s/applied/applies

1593276643
ifreund
awesome!

1593277415
kristoff_it
We're live with the preshow, Zig SHOWTIME starts in 1h from now.

1593277475
ifreund
that's a nice long preshow :D

1593283899
shcv
just curious, but would it be possible to make a garbage collecting allocator?

1593283944
shcv
you'd have to explicitly run the GC step, but it seems like it could work

1593284071
ifreund
i'm not sure how you'd track what bits of memory are still being pointed to

1593284083
shcv
you'd have to manage a root set

1593284116
shcv
so there would be some objects that you'd have to explicitly delete

1593284371
andrewrk
I can't imagine how to do it in a sound way

1593284433
ifreund
I think even if you could, the ergonomics would be bad enough to offset any benefit

1593284434
alexnask
Didnt someone make a GC allocator in zig?

1593284473
lunamn


1593284479
andrewrk
maybe it was one of those "conservative" ones where it interprets all 8 byte aligned fields as pointer addresses

1593284695
shcv
I guess most GCs probably work with more strictly defined containers

1593284722
shcv
so a fully general allocator might not be as easy to use

1593284743
shcv
kinda sad I missed most of the talk though

1593284769
andrewrk
it will be available

1593284816
ifreund


1593284825
alexnask
vods are actually recorded live on twitch so its already available in

1593287564
tgschultz
shcv, ifreund: a normal array of po2 ints is still byte aligned, so if you're not a multiple of 8 you are wasting bits. PackedIntArray doesn't waste any bits.

1593293362
andrewrk
marler8997, is #5064 ready for merge?

1593293422
andrewrk
fengb, do you want to have a look at the changes to WasmPageAllocator in

1593293447
andrewrk
(no worries, can always do follow up changes if necessary)

1593293936
marler8997
yes it's ready

1593295628
pixelherodev
andrewrk: did you see the issue breakdown from earlier?

1593295814
andrewrk
no, what are you referring to?

1593297047
pixelherodev
I removed clearErrors, as you mentioned, and was able to easily get the test working for ZIR

1593297067
pixelherodev
For ZIR, the two exports are distinct, so it was just a matter of having analyzeExport clear failed_exports

1593297072
pixelherodev
s/clear/wipe the current export from

1593297090
pixelherodev
For Zig though? If you have `fn a() void {} fn a() void {}` there's no way of distinguishing the two

1593297094
pixelherodev
The contents don't even matter

1593297107
pixelherodev
The name_hashes are identical, so it's impossible to track them both separately in the decl_table

1593297111
pixelherodev
And, thus, deleted_decls

1593297125
pixelherodev
Which means that even if you remove the second one, there's no way to detect that it's been deleted

1593297231
pixelherodev
I was thinking the best option was to wipe the first one from decl_table too

1593297240
pixelherodev
So on the next update,

1593297251
pixelherodev
(or, if you deleted the second one, just the first one, thus resolving the error)

1593297259
pixelherodev
Problem is, if you delete the decl, you can't map it in failed_decls :P

1593297284
pixelherodev
And you obviously can't use an invalid pointer because then it won't be deleted

1593297416
andrewrk
pixelherodev, ok I see. what we need to do is to have a pass that goes over a file and builds the Decl maps and checks for names

1593297430
andrewrk
see also @panic("TODO handle missing function name in the parser");

1593297473
andrewrk
rather than what this text says, what we'll do is build the Decl maps as part of post-process of parsing, and report missing decl names there, as well as duplicate ones. if any such errors occur, then we will fail the entire

1593297492
andrewrk
the error will go into `failed_files` and no further processing of that file will occur

1593297529
pixelherodev
hmm, okay

1593297540
pixelherodev
andrewrk: I actually implemented missing function names already :P

1593297548
pixelherodev
But I'll move it to post-parsing instead :P

1593298132
pixelherodev
andrewrk: wait, is that really worth it? I mean, if we're using failed_files anyways, why not just have it be part of the analysis pass?

1593298180
andrewrk
sure if that works

1593298188
pixelherodev
Worth a shot at least

1593298208
pixelherodev
Missing decl names can definitely be part of this pass, so if the redefinitions can, it should be good

1593298236
pixelherodev
Since decls w/o name can't be added to the table anyways, they're

1593298314
andrewrk
it should be fine to mark the file as failed when encountering a duplicate name or missing name, and then skip that decl

1593298421
andrewrk
TIL about the "red zone": "The 128-byte area beyond the location pointed to by%rspis considered tobe reserved and shall not be modified by signal or interrupt handlers.10Therefore,functions may use this area for temporary data that is not needed across functioncalls.  In particular, leaf functions may use this area for their entire stack frame,rather than adjusting the stack pointer in the prologue and epilogue.  This area isknown as the red zone."

1593298607
ifreund
huh, neat

1593298905
fengb
Oops, I took a nap. WasmPageAllocator looks good enough, and I'll probably submit in-place expand with the new interface

1593298944
fengb
It didn't exist before, but it's now much more obvious how to do it correctly

1593299010
andrewrk
it's so much easier to do the C ABI correctly when you're just actually doing x86_64 machine code rather than having to guess what LLVM is going to do

1593299048
andrewrk
you know what's funny is that the per-architecture code we have to do for self-hosted isn't even wasted, even with llvm we need per-architecture code for the C ABI anyway

1593299552
pixelherodev
and if we can actually get a C frontend working, and add some basic optimization passes for release mode?

1593299558
pixelherodev
We can probably remove the need for LLVM even as an extension

1593299657
pixelherodev
andrewrk: what's the behavior whena file is marked as failed?

1593300188
andrewrk
const fn_type = module_fn.owner_decl.typed_value.most_recent.typed_value.ty; // ty ZLS <3

1593300225
andrewrk
pixelherodev, I'm not sure what you're asking

1593300673
andrewrk
marler8997, ooh it looks like ArenaAllocator could be improved to take advantage of extra capacity. this will make a difference when backing it with PageAllocator

1593300861
pixelherodev
andrewrk: never mind, found the issue :P

1593300866
pixelherodev
failed_files is never cleared

1593300872
pixelherodev
failed_exports wasn't either, but I fixed that one

1593300900
Aransentin
Wrote a little "competitor" to zig-window. It can create an X11 window and listen to keyboard events, no C libraries involved:

1593300921
andrewrk
nice!

1593300924
pixelherodev
Neato!

1593300936
pixelherodev
I'm going to want to work on a Wayland version at some point

1593300940
pixelherodev
... no I'm not :P

1593300943
pixelherodev
too much to do already

1593300971
andrewrk
Aransentin, I really want to solve the problem of providing static linux binaries that can open a window and do graphics

1593300981
andrewrk
I think there are some problems to solve but I think it's doable

1593300987
Aransentin
Yes, I've researched just that

1593300996
Aransentin
With Vulkan

1593300999
andrewrk
yeah

1593301010
companion_cube
wait, on X, or wayland?

1593301015
Aransentin
Both

1593301016
andrewrk
everyone says "just use glvnd" but I want portable binaries that work on all linux distros

1593301026
Aransentin
It's possible, yeah, but you need to use a few Vulkan exensions that aren't  ubiquitous

1593301057
Aransentin
E.g. "VK_KHR_external_memory_fd"

1593301082
andrewrk
alexnask, ^ you and Nypsie have company

1593301140
andrewrk
in theory it should be possible to do this without the extension too. it would involve doing some tricky dynamic linking at runtime but IMO it would be worth it

1593301162
Aransentin
Dynamic linking to XCB or something, yes

1593301174
Aransentin
But that's kinda lame... :P

1593301210
andrewrk
agreed, it's lame. you would have to recognize different kinds of libcs too. like if you detect it's a glibc system then you have to do some tricks to pretend your exe is a glibc binary

1593301239
alexnask
that sounds convoluted :P I will have to research this as well

1593301254
andrewrk
the reward is huge though, a binary that works everywhere

1593301292
leeward
wow, zls just pointed out that my function's name was not the right case.

1593301314
alexnask
B)

1593301328
pixelherodev
It can do that now?!

1593301329
alexnask
You can disable this

1593301343
leeward
I don't want to disable it! It was right!

1593301344
alexnask
Uhh this is the style warning that was there pretty much from the start

1593301365
pixelherodev
Ohh whoops

1593301369
pixelherodev
Wait

1593301370
andrewrk
I want ZLS sound effects

1593301373
pixelherodev
Why is that a style warning?

1593301379
andrewrk
an "ahhhhhh" sound when I fix a zig fmt error and it goes away

1593301381
pixelherodev
... ohh way I see what you mean

1593301383
pixelherodev
wait*

1593301393
leeward
FunctionName is supposed to be functionName (I had changed it from returning type)

1593301448
pixelherodev
Yeah, I disabled those :P

1593301449
leeward
When all the errors are finally gone:

