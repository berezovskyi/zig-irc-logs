1586476839
HollMax
inline for over declarations in SDL might be too much

1586477021
fengb
@compileLog for printing but it’ll stop compilation

1586477213
HollMax
yeah, that won't cut it.

1586477269
fengb
I think general IO is out of scope for comptime

1586477277
ikskuh
i kinda wonder when the first will try to implement ctre in Zig

1586477284
ikskuh
(compile time regular expressions)

1586477436
HollMax
are there any issues I'm missing? I'd assume this to be trivial in Zig (in comparison to most other languages)

1586477655
ikskuh
it will probably just take way too long to compile

1586477743
oats
I haven't looked closely at zig compiler internals at all. How does comptime stuff work? Is there a subset of the language that can be interpreted or something?

1586477838
daurnimator
ikskuh: I've been wanting to do a PEG in zig that works at compile time

1586477851
ikskuh
a PEG? crazy :D

1586477856
daurnimator
ikskuh: though I've also said in here before: re2 probably makes sense

1586477888
ikskuh
oats: there's zig IR which can be executed i think. it's not a subset, it's the full language feature set except for syscalls

1586477935
daurnimator
fengb: I saw that post and started wondering how we should do i18n in zig: should we be supporting fluent?

1586478025
ikskuh
daurnimator, what's "fluent"?

1586478071
daurnimator
ikskuh:

1586478173
ikskuh
looks cool

1586478177
ikskuh
and complex

1586478341
daurnimator
ikskuh: so, what are you doing today? :)

1586478363
ikskuh
heh

1586478375
ikskuh
today=10.04 2:26 am

1586478378
ikskuh
i'm going to bed soon :D

1586478382
ikskuh
otherwise:

1586478389
ikskuh
virtual demopartying until monday

1586478401
ikskuh
oh and coding on dunstblick (UI framework)

1586478576
ikskuh
i feel a bit bad that my current parser is LL(1) for the ui layout definition

1586478585
ikskuh
because i need that look-ahead only in a single place

1586478913
ikskuh
commit of the day:

1586478951
ikskuh
removing 2800 loc (well, including a flex parser) and replacing it with 1k LOC zig, including a handcoded parser

1586478979
BaroqueLarouche
ikskuh: wow

1586478993
ikskuh
this is an awesome step

1586478998
ikskuh
compilation time down again

1586479017
ikskuh
the new parser infrastructure and zigs error handling allow a much better in-place error handling than try-catch blocks

1586479026
ikskuh
also i got a new feature planned, but not-yet implemented

1586479137
ikskuh
example:

1586479169
ikskuh
if i find an invalid identifier, i can now just scan for the next ; or } and be happy, because i know that i can continue parsing the file and emit more errors in one go

1586479253
ikskuh
and now: good night

1586479277
fengb
Good night!

1586479280
HollMax
since `zig c++` is a thing, how about including and calling C++ from zig?

1586479284
fengb
I might take some inspiration from this code

1586479297
HollMax
@ikskuh good nigh

1586479339
ikskuh
HollMax: i've explained it on the Discord just a moment ago

1586479349
ikskuh
sticking to C ABI is the sane option

1586479384
ikskuh
Calling "actual" c++ from zig would mean that zig needs the whole feature set of c++ with templates and everything

1586479405
fengb
Zig doesn’t know how to call C++ but both understand C. So create a wrapper function with extern “C”

1586479408
ikskuh
sticking to C abi means that you can call C++ code (I'm doing that a lot by now) but you are bound to the C type system

1586479442
ikskuh
also you're more flexibel with a C interface anyways, as you can also trivially attach C#, Nim, Python

1586479459
ikskuh
and many other languages that support C bindings (luajit has a nice FFI afaik)

1586479508
HollMax
I suppose I could do anything I could reasonably want once 383 gets in

1586480358
andrewrk
there's a good chance 383 will not be accepted

1586480745
Xavi92
I'd like to experiment with zig by using it on a PS1 (used mipsel-unknown-elf-gcc in the past). I have a couple of questions though

1586480758
andrewrk
PS1 is mipsel?? TIL

1586480776
daurnimator
andrewrk: another reason for 383 came up the other day: creating an enum from a list of struct fields

1586480779
Xavi92
It is a freestanding environment, so does .bss need to be cleared before main in zig?

1586480805
daurnimator
Xavi92: quite possibly

1586480837
companion_cube
ok, controversial idea: why not use npm's package.json for describing zig's modules? gives a lot of tooling for free

1586480845
companion_cube
(including github's tracking of dependencies)

1586480847
andrewrk
Xavi92, the operating system (in this case PS1) will call into some start function that you export from your zig code. You will want to clear the bss here before doing anything else. Example:

1586480859
daurnimator
Xavi92:

1586480875
andrewrk
both examples probably have the same linker script trick

1586480914
daurnimator
andrewrk: I found I couldn't use @memset.... internally it generated something that put a constant in bss!

1586480939
Xavi92
Oh, just remember LLVM didn't support MIPS I:

1586480948
Xavi92
But it looks like this has been patched recently

1586481014
pmwhite
Is there a way to wrap with zig fmt when there are a lot of expressions joined by boolean and.

1586481144
andrewrk
you can line break after binary operators

1586481224
Xavi92
andrewrk, daurnimator: thanks for the examples, good to know it's done the same way as in C

1586481330
andrewrk
daurnimator, hmm yeah I mean zig's codegen assumes bss is initialized, so it might be important to formalize why this is defined behavior or not in the lang spec

1586481366
andrewrk
e.g. maybe we can define @memset to not depend on .bss for the freestanding target or something like that

1586481391
daurnimator
andrewrk: but if it can be faster by using bss.... I wouldn't want to stop it

1586481407
daurnimator
andrewrk: it just means you have to use inline assembly in your _start

1586481411
andrewrk
yeah

1586481426
daurnimator
though one thing I wasn't sure about was if I need to use `asm volatile` or not

1586481436
daurnimator
e.g. would zig/llvm optimise it to something that uses BSS again?

1586481495
Xavi92
BTW, can't 'extern' be used inside a function? I see __bss_start and __bss_end being declared at file scope, but I'd like to move these definitions if only accessed from one function

1586481517
Xavi92
So these definitions are only visible inside that function

1586481548
andrewrk
`volatile` for asm means it has side effects, which clearing bss certainly does

1586481559
andrewrk
without that zig can delete the asm volatile if you don't use the result

1586481577
daurnimator
andrewrk: I thought `volatile` indicated that the compiler is not allowed to optimize the contents?

1586481586
andrewrk
Xavi92, you can do that by declaring a struct inside a function and using that namespace

1586481615
Xavi92
daurnimator: for inline assembly it could mean the compiler can remove code or reorganize it, IIRC

1586481650
andrewrk
we currently have the same definition as llvm:

1586481657
andrewrk
(here it is called "sideeffect")

1586481702
daurnimator
I'm happy for the optimiser to move it around...

1586481716
daurnimator
The side effects I should capture by adding a memory clobber I guess?

1586481850
andrewrk
you don't want the optimizer to move around your bss clear

1586481921
daurnimator
andrewrk: I don't mind if it e.g. does the rodata copy first

1586482240
Xavi92
andrewrk: I didn't get the point completely (sorry, discovered zig a couple of hours ago). Do you mean creating a struct (e.g.: Bss) with two u8 values and then a Bss instance with its values assigned to __bss_start and __bss_end?

1586482608
andrewrk
Xavi92, in zig, all files are structs, and declarations inside structs are namespaced globals. exported or external declarations are not namespaced, however

1586482650
andrewrk
const S = struct { extern var __bss_start: u8; extern var __bss_end: u8; };

1586482660
andrewrk
you can now reference them with e.g. `&S.__bss_start`

1586483011
Xavi92
andrewrk: whoa. It'll take me some time to process that

1586483147
andrewrk
you can see some similar example code in the implementation of std.Thread.spawn

1586483283
Xavi92
andrewrk: so something similar to this?

1586483285
daurnimator
andrewrk: how goes release notes?

1586483315
daurnimator
andrewrk: also... we should organise a (online) celebration for the release :)

1586483337
andrewrk
stressful, especially with the recent developments of #4799

1586483342
andrewrk
I completely agree

1586483352
andrewrk
online release party

1586483370
fengb
Virtual beers for all?

1586483399
daurnimator
Real beers please

1586483866
companion_cube
real beer it is

1586483963
Xavi92
Is there any reason why

1586484053
andrewrk
don't forget to export _start

1586484070
andrewrk
you probably also want --release-fast

1586484074
daurnimator
Xavi92: also make sure you use trunk not 0.4.0

1586484079
andrewrk


1586484142
andrewrk
also might want `callconv(.Naked)`

1586484182
Xavi92
daurnimator: oh, hadn't realize it was using 0.4.0. Thanks for the tip! That made it work

1586484198
daurnimator
Xavi92: also consider @ptrCast instead of @as there

1586484230
andrewrk
why's that?

1586484250
daurnimator
`*volatile [1]u8` isn't exactly correct now is it.

1586484277
andrewrk
@as([*]volatile u8, &S.__bss_start)  should work

1586484281
daurnimator
`@ptrCast([*]u8, &S.__bss_start)` would be more correct IMO

1586484322
andrewrk
the volatile is needed, the store has a side effect

1586484332
daurnimator
andrewrk: i don't think you can use @as to get from a *u8 to a [*]u8?

1586484376
andrewrk
also it only guarantees not reordering according to other volatile operations, so you need a @fence(.Acquire) after it

1586484443
andrewrk
ah yeah in that case @ptrCast is fine. but be careful telling people to use @ptrCast over @as, because it's the other way around. The thing to change here was the dest type (and needing to use @ptrCast is a consequence, not the goal)

1586484528
Xavi92
I read the differences between @as and @ptrCast, but I'm still not sure why I should choose one over the other. Is @as safer?

1586484541
andrewrk
yes

1586484592
andrewrk
the flow chart is: always use @as (or other forms of automatic type coercion which are equivalent)

1586484609
andrewrk
if you can't, because of a compile error, then consider other options

1586484642
andrewrk


1586484668
andrewrk
"Type coercions are only allowed when it is completely unambiguous how to get from one type to another, and the transformation is guaranteed to be safe."

1586485314
Xavi92
andrewrk: why is the [1] needed on @as(*volatile [1]u8, &S.__bss_start), though? Isn't &S.__bss_Start returning a pointer to 1 element, for which '*volatile u8' would suffice?

1586485378
andrewrk
it's harmless now but @memset should probably be improved to emit a compile error for this, since you're asking to copy > 1 byte, but giving it a pointer that supposedly points at 1 byte

1586485579
Xavi92
andrewrk: so how could you cast from __bss_start to [*]T? From what I can read, &x returns a single-item pointer

1586485606
andrewrk
this is one of those occasions where you have more information than the compiler

1586485623
andrewrk
it's not really a one item pointer, is it? it's really a byte that is conveniently aliased to the start of bss

1586485639
Xavi92
Exactly

1586485663
andrewrk
right, so when you have more information than the compiler, is when @ptrCast or other less-safe-than-@as casts are relevant

1586485668
Xavi92
Byte or even word. The underlying type does not really mater, as it is never accessed directly

1586485681
Xavi92
Alright

1586485697
daurnimator
Xavi92: I mentioned that above: > `@ptrCast([*]u8, &S.__bss_start)` would be more correct IMO

1586485730
Xavi92
daurnimator: what about @ptrCast([*] volatile u8, &S.__bss_start) ?

1586485756
daurnimator
Xavi92: that would work too. Though I'm not sure why andrewrk is saying it needs the volatile....

1586485759
Xavi92
Sounds more correct to me - as andrewrk said, it has side effects the compiler should be aware of

1586485768
daurnimator
andrewrk: it's not MMIO: why would it need volatile?

1586485825
Xavi92
daurnimator: I think it's because you're modifying a whole range of items and the compiler could not be aware of that

1586485956
Xavi92
Or probably it ensures @memset is not assuming any value from __bss_start to __bss_end, don't know

1586486062
daurnimator
Xavi92: `volatile` means that reads/writes to the memory have actual side effects e.g. due to MMIO; or because you're debugging with an oscilloscope and want to see an exact values written to exact locations

1586486152
Xavi92
Yup, those are the cases I'm also aware of when writing software in C for embedded devices

1586486190
Xavi92
Probably 'volatile' isn't needed in @memset

1586486475
andrewrk


1586486487
andrewrk
^ @memset can get deleted if zig can prove the memory is never read

1586486510
andrewrk
I suppose with writing to bss, such a proof would necessarily be invalid

1586486519
andrewrk
so I think daurnimator is correct

1586486525
Xavi92
Right, container 'std.os' has no member called 'fd_t' on mipsel-freestanding, for obvious reasons. Is there any way I can provide it, though?

1586486548
andrewrk
Xavi92, ah, yes, welcome to the experimental bring-your-own-OS-layer feature

1586486551
daurnimator
Xavi92: welcome to the world of "BYO os"

1586486599
daurnimator
though note

1586486632
daurnimator
Xavi92: note that that error message means that whatever you did expects an `fd_t` to exist: what operation are you attempting?

1586486846
Xavi92
Just experimenting so far. The micro kernel (aka BIOS or the epic boot screen) on the PS1 provides a working implementation of printf, so I was thinking of ways to use it from zig

1586486880
andrewrk
the null hypothesis is to just call that stuff explicitly and not try to integrate with zig's std lib OS layer

1586486881
Xavi92
The error obviously popped up when I attempted to use stdout.print(), just to see how the compiler would complain at the lack of such definition

1586486902
andrewrk
you can use the rest of zig's std lib without the OS layer. whatever you don't call doesn't get compiled in. so the data structures for example are all fair game

1586487054
Xavi92
Sure, but getting stdout.print() features would be a great addition

1586487069
Xavi92
Not that I'm going to implement that now, I'm just feeling curious

1586487122
andrewrk
the vision for this is that you would be able to make a "ps1" OS package and people would be able to depend on the package, and then put `pub const os = @import("ps1");` next to main() and it would make printing work and do the bss before main and stuff

1586487166
Xavi92
Sounds great

1586487177
daurnimator
Xavi92: you should will be able to create an `OutStream` that uses the BIOS' printf

1586487245
Xavi92
Alright

1586487310
daurnimator
Xavi92: you will function that writes bytes using your bios primitive; then do something like: `io.OutStream(File, PossibleWriteErrors, mywritefunction){}`

1586487321
daurnimator
uh, s/File/void/

1586488580
Xavi92
BTW, is it possible to define custom types for integer data types, like in C's typedef?

1586488614
Xavi92
Not that I like typedef, but sometimes uart_data_bits (contrived example) is more meaningful than u8

1586488634
Xavi92
Probably the correct term would be 'alias'

1586488637
fengb
You can make an alias with const foo = u8;

1586488649
Xavi92
fengb: great, thanks!

1586488666
fengb
Won’t be distinct though, unlike Go

1586488697
shakesoda
to get distinct you need a one field struct, right?

1586488698
Xavi92
I still don't really get the 'const' for type definitions. Are they supposed to allocate any memory?

1586488735
shakesoda
you can use types more or less the same way you use anything else.

1586488770
shakesoda
until 1717 is done, the only thing this isn't true of is functions really

1586488779
Xavi92
I mean, why not simply 'foo = u8' or 'alias foo = u8'? Similarly for 'const Point = struct {x: u8, y: u8};'

1586488808
shakesoda
that's just adding inconsistencies

1586488823
shakesoda
everything being the same is a feature

1586488847
fengb
const and var (and fn for now) are the only ways to declare an identifier

1586488878
Xavi92
Coming from a C background 'const' reads as read-only variable, not type definition. Of course, zig does not have to follow that convention

1586488888
fengb
const in zig just means it’s constant. It doesn’t actually mean stack. Some consts get shoved into the data section

1586488899
Xavi92
I see

1586488911
fengb
Others are comptime, which only exists to the compiler

1586488923
Xavi92
You could never define a struct as var, though, if only the type is being defined

1586488934
fengb
Types are comptime, as are literal numbers (unless they’re coerced into a runtime value)

1586488941
Xavi92
For example, 'var Point = struct {x: u8, y: u8};'

1586488955
fengb
Yeah I don’t think that’s allowed

1586488961
Xavi92
Alright thanks!

1586489001
shakesoda
clearly we need types that you can screw with at any arbitrary time, so you can write zig as if it had lua tables ;)

1586489013
shakesoda
disclaimer: i have utterly no idea how you'd make that sane, but i really do love lua tables

1586489031
daurnimator
Xavi92: you can at comptime

1586489071
Xavi92
daurnimator: something like 'var Point = struct {x: u8, y: u8};' you mean?

1586489153
daurnimator
Xavi92: `comptime var Point = struct {x: u8, y: u8};`

1586489191
daurnimator
and from there you could e.g. use an `inline for` loop to wrap it to some arbitrary comptime depth

1586489340
Xavi92
That's great

1586489345
Xavi92
Anyway, bed time guys

1586489367
Xavi92
Thanks a lot for your help! zig definitely is a very interesting project

1586489388
daurnimator
e.g.

1586489428
daurnimator
(the actual one just `return`s directly; but if it was nicer to write it with a `var` `type` then we would be able to do so

1586489430
daurnimator
)

1586489551
Xavi92
zig's type introspection capabilities look really interesting

1586489571
daurnimator
Xavi92: types are just another... type of variable

1586489590
Xavi92
I see

1586489617
Xavi92
How does the compiler solve this? Using UUIDs for each type?

1586490255
daurnimator
Xavi92: what do you mean?

1586490287
daurnimator
Xavi92: some types (e.g. `type`, `comptime_int`, `comptime_float`) only exist at comptime

1586490375
Xavi92
Oh sorry, missed the comptime requirement

1586490380
Xavi92
Thanks for the clarification

1586490613
Xavi92
See ya!

1586494131
daurnimator
andrewrk: : CommandLine Error: Option 'mc-relax-all' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options

1586494148
daurnimator
^ trying to compile master locally..... (let me try and re-run cmake)

1586494288
andrewrk
this generally means a static library got compiled in twice

1586494301
andrewrk
e.g. 2 different dynamic libraries

1586494306
andrewrk
what os?

1586494321
daurnimator
linux x86_64

1586494360
daurnimator
trying to run cmake again it keeps finding my system llvm instead of the one I'm passing to CMAKE_PREFIX_PATH

1586494484
andrewrk
the only thing that changed in aaf99371b is it looks for -lclang-cpp before other stuff

1586494546
andrewrk
ugh, llvm's configuration is out of control, it does not have to be this complicated

1586494618
daurnimator
cmake is a bad build system

1586494701
andrewrk
you can pass -DZIG_STATIC_LLVM=ON to skip trying -lclang-cpp

1586494847
daurnimator
`-DCMAKE_PREFIX_PATH=../../llvm-project/prefix` is what I'm meant to be passing right?

1586494871
daurnimator
where ../../llvm-project/prefix contains: bin  include  lib  libexec  share

1586494884
andrewrk
yes

1586494912
andrewrk
but I guess cmake is looking first there for -lclang-cpp and then to system default locations and finding it

1586494933
andrewrk
basically the "if we did not find -lclang-cpp" logic is a false negative

1586494964
andrewrk
this is actually not possible to fix. llvm has made it impossible to fix this

1586494994
daurnimator
luckily that wasn't it.

1586495011
daurnimator
problem was you have to add it to your path too: `PATH=~/src/llvm-project/prefix/bin:$PATH cmake -DCMAKE_PREFIX_PATH=~/src/llvm-project/prefix ..` worked

1586495020
andrewrk
that doesn't make any sense

1586495023
daurnimator
otherwise it runs system llvm-config

1586495041
andrewrk
I believe you but it's annoying that it works that way

1586495076
daurnimator
okay. still fails with `: CommandLine Error: Option 'mc-relax-all' registered more than once! LLVM ERROR: inconsistency in registered CommandLine options`

1586495096
andrewrk
I have half a mind to require the bootstrap repository for building zig from source just so we can side-step all the many incompatible ways llvm is packaged and configured

1586495110
daurnimator
that will not fly for distro packaging

1586495136
andrewrk
did you try  -DZIG_STATIC_LLVM=ON yet

1586495166
daurnimator
right now I'm reverting to previous HEAD and checking it was this commit that broke it

1586495172
daurnimator
yep it was

1586495231
daurnimator
-DZIG_STATIC_LLVM=ON has same error

1586495252
andrewrk
it would help for me to see the linker line for all 3 of those cases

1586495268
andrewrk
should be able to do just `make VERBOSE=1`

1586495331
daurnimator
`cd /home/daurnimator/src/zig && /home/daurnimator/src/zig/build/zig0 build-lib src-self-hosted/stage2.zig -target native -mcpu=baseline --name zigstage2 --override-lib-dir /home/daurnimator/src/zig/lib --cache on --output-dir /home/daurnimator/src/zig/build --bundle-compiler-rt -fPIC -lc`

1586495364
andrewrk
oh, zig0 built successfully?

1586495414
daurnimator
apparently.

1586495416
andrewrk
ah, zig0 built successfully but incorrectly, I believe. `rm zig0` and show that linker line

1586495433
andrewrk
it's long

1586495482
daurnimator


1586495837
andrewrk
ok this is nuts

1586495852
andrewrk
-lclang-cpp includes

1586495882
andrewrk
if we don't include llvm static libs, we get the LLVM ERROR: inconsistency in registered CommandLine options

1586495900
andrewrk
if we don't include them, we get undefined symbol linker errors

1586495972
andrewrk
ok, reverting the commit. this is making me crazy

1586496108
daurnimator
back to #4992 ?

1586496169
andrewrk
4992 can't work either, everything is fucked

1586496199
andrewrk
I'm just going to put in a cmake option that homebrew users will have to use

1586496385
andrewrk
btw c++ static initializers are also to blame for this

1586496391
wilsonk
wow, has anyone else built llvm/clang-10.0.0 with LTO+PGO optimizations? It took me hours on a 64 core machine so it isn't for the faint of heart, but it improved build times of llvm/clang-10.0.0 from 9:34 to 7:14 mins...buuuuuttt then building zig0 ends up in an infinite loop!?!??! WTH!! UGH

1586496439
wilsonk
so I can't even use it for zig now after all that build time...darnit!

1586496499
andrewrk
daurnimator, reverted

1586496843
daurnimator
andrewrk: thanks. can build now

1586497482
daurnimator
andrewrk: 7 issues left in the milestone; how you feeling?

1586497489
mikdusan
andrewrk: is it ok for me to create a "qemu-static" repo w/ docker, patches, script, sources?

1586497523
daurnimator
mikdusan: hmm? what does it do exactly?

1586497565
mikdusan
it's an alpine docker to build qemu-static for linux. I already do it from alpine vm, but decided to try this dang fangled docker thing :)

1586497587
daurnimator
mikdusan: who would use it?

1586497606
mikdusan
every linux build uses qemu for various target tests

1586497614
mikdusan
every

1586497617
daurnimator
mikdusan: e.g. on arch I use install qemu-arch-extra and it has everything in it

1586497643
daurnimator
(

1586497652
mikdusan
what version of qemu

1586497697
mikdusan
4.2 is too old

1586497697
andrewrk
mikdusan, yep go for it

1586497740
daurnimator
mikdusan: that appears to be the latest upstream release

1586497744
andrewrk
daurnimator, it's the qemu equivalent of

1586497776
daurnimator
mikdusan:

1586497781
andrewrk
mikdusan, you can probably use ziglang/docker-zig as a template

1586497795
mikdusan
andrewrk: it's pretty much done. just prepping for upload

1586497800
andrewrk
nice

1586497804
daurnimator
mikdusan: as soon as 5.0 actually gets a release arch would package it

1586497814
andrewrk
daurnimator, the point is so the CI gets a newer qemu, so we can run the SIMD tests with it

1586497824
andrewrk
because older qemu was crashing

1586497838
mikdusan
and CI doesn't run archlinux?

1586497849
andrewrk
it's ubuntu yeah

1586497888
daurnimator
I guess I just don't see the point over e.g. a dockerfile that just does `FROM archlinux` `RUN pacman -Syu qemu-arch-extra`

1586497925
andrewrk
I don't understand what that would accomplish

1586497930
andrewrk
we already have it working now without docker

1586497971
andrewrk
and in fact it works in any linux distro, so we're not tied to ubuntu or arch

1586497999
daurnimator
but what mikdusan is proposing is to use an alpine base...

1586498033
mikdusan
alpine (static musl) is what makes it work everywhere

1586498074
daurnimator
mikdusan: can you compile it with `zig cc`? :)

1586498112
andrewrk
daurnimator, do you understand that we're downloading a binary tarball with every ci run?

1586498225
andrewrk
whew. finished going through commit logs. now I just have to flesh out all 91 sections of the page

1586498303
andrewrk
if I put in 36 hours before monday that leaves me with ~23 minutes to spend per section

1586499005
daurnimator
andrewrk: most CI systems (I suspect all that we use) support a "cache" directive where you can tell it to cache binary artifacts between runs. it's useful for large dependencies etc.

1586512922
marijnfs
how is the next release coming along?

1586512988
ikskuh
7 open issues left

1586513267
marijnfs
wow

1586513284
marijnfs
single digits, not bad

1586513379
marijnfs
hmm actually the new cmake has issues for me

1586513397
mikdusan
I believe the cmake stuff was rolled back very recently

1586513425
marijnfs
ah ok, yeah now i clear the whole build directory it configures again

1586519420
daurnimator
oh cool, `std.PackedIntArray(bool, 256);` works

1586519422
daurnimator
maybe it should get a rename :)

1586519519
ifreund
just PackedArray?

1586519920
mikdusan
(f32,) works to get a type but I haven't tried any code coverage

1586521054
Xavi92
Hi there :)

1586521393
ifreund
yo

1586521418
Xavi92
$ zig build-exe main.zig -target mipsel-freestanding -ffunction-sections -mcpu mips1

1586521419
Xavi92
:(

1586521419
Xavi92
LLVM ERROR: Code generation for MIPS-I is not implemented

1586525280
FireFox317
that's sad Xavi92 :(

1586526267
decentpenguin
This may be a dumb way to do things, but is there a way to store a variable's type in runtime? I'm writing this (

1586526310
fengb
Types can’t exist at runtime. You’ll have to invent some enum to manually map them

1586526730
decentpenguin
I see. Thanks.

1586535184
dimenus
how old is the zig compiler that godbolt uses?

1586535209
dimenus
trunk I mean

1586535625
Yardanico
dimenus: it tells if you press the little "i" on the bottom of the right window (the assembly viewer)

1586535626
Yardanico
0.5.0+543031db3

1586535688
Yardanico
seems to be a pretty recent commit from 21 hours ago

1586535695
Yardanico
i'm surprised they update stuff that often

1586536042
fengb
I wouldn't be surprised they just pull the nightly build

1586536071
fengb
I missed a preposition in there >_>

1586536089
dimenus
thanks Yardanico

1586536252
ikskuh
hm, i'm hitting ud2 again…

1586536285
ifreund
yep they just pull the nightly build from ziglang.org

1586536645
dimenus
i was just curious because the godbolt example produces a lot more code than my local one, though I'm not sure what flags godbolt automatically passes

1586536773
ifreund
dimenus: you can find out here

1586537604
dimenus
the zig version of

1586539668
dimenus
also produces smaller binaries, neat

1586540365
fengb
I'd hope it's just as good as clang :P

1586541188
Xavi92
fengb: what exactly :)

1586541191
Xavi92
?

1586541511
fengb
Zig uses clang to compile C so it should be just as good as clang

1586543707
Xavi92
Why does 'const d = dir {.fd = undefined}; const f = dir.makeDir(d, "test");' return error.NotDir?

1586543733
Xavi92
Sorry for the newbie question

1586543937
TheLemonMan
what's `dir` ?

1586543943
mikdusan
as `d` is already available, `d.makeDir("test");` is easier to understand. `d` is undefined

1586543967
mikdusan
correction: `d.fd` is undefined and the OS doesn't like bogus file descriptor

1586544080
Xavi92
TheLemonMan, mikdusan: Sorry. 'const dir = std.fs.Dir;'

1586544145
TheLemonMan
you're passing a bogus Dir handler, you probably want something like std.fs.cwd().openDir

1586544285
dimenus
fengb: I'm referring to an actual implementation in zig not zig cc

1586544302
Xavi92
Thanks. So 'std.fs.Dir.makeDir(d, "test");' is equivalent to 'd.makeDir("test")', right?

1586544460
andrewrk
dimenus, ah, neat :)

1586545327
fengb
Oh okay, I'm being dense :P

1586546894
Xavi92
Given a function that returns !void, how can I assign another local variable according to its result?

1586546930
Yardanico
Xavi92: but !void means that it returns nothing (but can raise an error), how can you compare on it?

1586546931
Xavi92
Contrived example: 'const f = std.fs.Dir.makeDir(d, "test"); const a = if (f) |dont_care| {3;} else {6;};'

1586547007
Xavi92
Yardanico: okay, then how could a different value assigned to 'a' if no error happened?

1586547046
ifreund
Xavi92: I think you're looking for the `catch` keyword

1586549037
jamii
Hi. How can I make an empty slice?

1586549060
jamii
I thought `.{}` would coerce but doesn't seem so

1586549061
nycex
The ziglang.org build.zig example for linking against a zig lib doesn't work anymore on

1586549089
nycex


1586549092
nycex
that's the error i get

1586549241
layneson
nycex: put a & before the [_] of the second argument: &[_][]const u8 ...

1586549398
nycex
yeah that works thanks

1586549541
andrewrk
nycex, thanks, will update

1586549576
jamii
Looks like `&[_]t{}` does the trick.

1586549898
nycex
but i don't know if i'm doing anything wrong but the build.zig does now compile but the example itself doesn't work, I did it like in the example and get the following:

1586549924
nycex
Looks like `&[_]t{}` does the trick. e/bernhard/dev/zig/segfaulthandler/test.c:1:10: fatal error: 'mylib.h' file not found

1586549925
nycex
#include "mylib.h"

1586549927
nycex
^~~~~~~~~~~~~

1586549929
nycex
1 error generated.

1586550045
nycex
or rather here, my clipboard is weird:

1586550537
nycex
ls

1586550776
ikskuh
hmm

1586550844
fengb


1586550849
fengb
Let's introduce him to Zig errors :)

1586550903
ikskuh
we definitly need a libc for freestanding

1586550917
ikskuh
wanted to port a project to embedded platform, but it's missing a libc :D

1586551142
companion_cube
fengb: "The existing language that comes closest to this ideal is Zig" ?

1586551265
fengb
Oh I didn’t read that thoroughly :P

1586551309
fengb
‘Also, they don't treat "silent dropping" as a compile error’ But we do...

1586551468
ikskuh
hm

1586551477
ikskuh
there was an option to "ship" my own libc, right?

1586551479
torque
Based on his examples, I think he means in a catch context

1586551544
torque
which I wouldn't consider to be silently dropping but heck

1586552031
ikskuh
andrewrk, is there a way to ship my own libc for a certain build artifact?

1586552108
ifreund
ikskuh: isn't that just linking against your custom libc instead of using linkLibC()?

1586552116
ikskuh
nah

1586552121
ikskuh
because you also need your includes

1586552136
ikskuh
i need something like arm-freestanding-newlib

1586552333
andrewrk
ikskuh, you can contribute more functions to the freestanding libc. we do have one

1586552362
andrewrk
not sure I understand the problem yet

1586552405
ikskuh
what target to i have to set to link against freestanding libc?

1586552420
ikskuh
e_arm.setTarget(try std.zig.CrossTarget.parse(.{

1586552420
ikskuh
.arch_os_abi = "arm-freestanding",

1586552420
ikskuh
.cpu_features = "cortex_m3",

1586552420
ikskuh
}));

1586552425
ikskuh
right now i set this as my target

1586552431
andrewrk
it should be automatic when you use build-exe

1586552442
andrewrk
if you're doing build-lib we could add the equivalent of --bundle-compiler-rt

1586552447
ikskuh
Zig is unable to provide a libc for the chosen target 'arm-freestanding-eabi'.

1586552456
andrewrk
ah, hmm

1586552517
andrewrk
I really need to focus on release notes, but this is a use case that zig, with some minor improvements, can handle in a nice way

1586552528
ikskuh
yeah, n problem if it works right now

1586552544
andrewrk
gonna close IRC for a bit

1586552550
ikskuh
would've been cool if there is a zero friction solution

1586552553
ikskuh
but: release > my code

1586552558
ikskuh
yeah, sounds reasonable :)

1586552681
plumm
andrewrk: wanted to let you know circleci has ssh access

1586553062
companion_cube
`error: C pointers cannot point opaque types` (on 0.5) is that normal? in a cImport?

1586553553
companion_cube
ah nvm

1586553765
companion_cube
(jsut realized also that arch has a zig nightly package)

1586555036
Snektron
<fengb "

1586555073
Snektron
although in the end its pretty much the same

1586555227
Snektron
I suppose you run into the problem where you accidently mark a function as error-returning while it doesn't return an error in practise

1586555260
Snektron
More preferable than the reverse im sure, but you can add a simple compiler check to prevent that anyway

1586555438
companion_cube
undefined reference to fcntl64 -_-

1586557663
Xavi92
Is '-target arm-freestanding-none-cortexm0-v6m' valid?

1586558439
Xavi92
Right, '-target arm-freestanding-none -mcpu cortex_m0' worked, but a lot of invalid instuction errors appear

1586558466
Xavi92
$ zig build-exe main.zig -target avr-freestanding-none -mcpu atmega328p

1586558466
Xavi92
Unreachable at /deps/zig/src/link.cpp:1719 in getLDMOption. This is a bug in the Zig compiler.

1586558489
Xavi92
(Have tested an empty main also on AVR, but raises a compiler bug, apparently)

1586559767
r4pr0n
andrewrk: a few days ago you told me how to enable the zig segfault handler in c programs. i tried that. is it normal that there is no stacktrace but rather `Panicked during a panic. Aborting.` because it's no zig code but c code?

