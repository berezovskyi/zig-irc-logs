1606091751
andrewrk
marler8997, I published the code:

1606091768
andrewrk
I could use some help troubleshooting figuring out why it is crashing after the execve for me

1606092115
marler8997
looking

1606092408
andrewrk
you said it worked with your c code with -fPIE right?

1606092452
marler8997
I'll have to look to see if I used pie or not..checking

1606092524
marler8997
I used zig cc, what's zig cc's default?

1606092564
andrewrk
no pie

1606092658
marler8997
my example that doesn't use libc, I don't think it needs to be pie

1606092700
marler8997
but...someone doesn't work when I call into libc, I never figured out what that was

1606092712
marler8997
I can call into a custom built so file, but didn't get libc working

1606093127
marler8997
do you have a zig branch you're working from?

1606093744
andrewrk
marler8997, master branch - I also put the sha1 in the readme

1606093760
andrewrk
maybe PIE was a red herring

1606093993
andrewrk
marler8997, what's up with libfoo.so in your reloader project? what purpose does it serve?

1606094014
marler8997
so test that I can call functions from shared libraries

1606094026
andrewrk
I see

1606094042
marler8997
I wanted to start with the simplest example possible, and be able to control how the .so file is built

1606094067
andrewrk
are you getting the same crash as me with zig-window?

1606094077
marler8997
haven't built it yet...

1606094093
marler8997
going to have to get llvm 11 built first...haven't been zig since release

1606094148
marler8997
oh wait

1606094158
marler8997
I can download your zig compiler?

1606094163
marler8997
it's not custom?

1606094169
andrewrk
it's just master branch

1606094206
andrewrk
nixos has llvm 11 now, you should be able to build against that in a matter of minutes

1606094237
marler8997
lame

1606094257
marler8997
actually with my new PC, I can build LLVM/clang in like 5 minutes if I remember right

1606094272
marler8997
Your version isn't available for download on the README

1606094301
marler8997


1606094304
marler8997
does seem to exist

1606094326
andrewrk
yeah it hasn't made it through the CI yet

1606094347
marler8997
ok will build...let's see how long it takes

1606094413
daurnimator
andrewrk: so with the new pie support; to expose it in build.zig, we're going to want a common 'standard' option for it. -Dpie=true

1606094444
daurnimator
which is similar to a different question I was going to ask: .standardTargetOptions doesn't currently allow the user to specify cpu features.

1606094467
daurnimator
I think there's going to be several build options we should expose by default

1606094491
daurnimator
What would you think of a `.standardBuildOptions(.{})`  ?

1606094572
marler8997
compiling llvm...

1606094585
andrewrk
marler8997, nixos doesn't have it already built?

1606094598
andrewrk
daurnimator, sounds like a reasonable proposal

1606094643
marler8997
it probably does, but I'm not sure I know how to use it correctly

1606094650
andrewrk
it's automatic for me

1606094655
marler8997
oh?

1606094668
marler8997
meh, I like to be able to change the llvm source if I need to

1606094686
andrewrk
yeah I just do `nix-shell -p llvm_11` and it's there in 3 seconds

1606094692
marler8997
ah

1606094698
marler8997
I suppose I can try that at the same time

1606094710
daurnimator
andrewrk: k; will make a proposal now so it doesn't get lost

1606094733
andrewrk
marler8997, nix-shell -p llvmPackages_11.clang-unwrapped -p llvm_11 -p lld_11

1606094790
marler8997
I'm on 20.03...don't think it has 11

1606094826
andrewrk
ah

1606094965
marler8997
6 minutes to build llvm...I thought it was faster :(

1606095015
marler8997
need to upgrade to new ryzen 9 5950x

1606095068
marler8997
lld is 27 seconds

1606095147
andrewrk
6 min for llvm is pretty fast

1606095180
marler8997
gotta go fast!

1606095196
marler8997
have you timed yours?

1606095284
marler8997
clang 3m41s

1606095356
marler8997
zig 7 seconds

1606095366
marler8997
oh no!

1606095373
marler8997
error...yeah that didn't sound right :)

1606095382
andrewrk
I was going to say, including generating zig1.o?

1606095504
hlolli__
On top of the head, does someone have know of an example where readline/readline.h is used with zig, I keep getting

1606095506
marler8997
oh wow, actually got a compile error: zig_clang_cc1as_main.cpp:521

1606095560
andrewrk
hm that probably means nixos patched llvm or clang

1606095588
marler8997
I think it's because I'm on gcc 9.2..too old

1606095621
andrewrk
that file is a patched clang source file

1606095703
marler8997
fixed that one, just initialized Value, now getting an aliasing error in Attr.h:262

1606095813
hlolli__
I don't think it takes 3 seconds to enter a llvm shell in nix if it's the first time, the nice thing about nix is the nix store. I bet if you run nix-shell the second time marler8997, it will be 3 seconds or less

1606095903
hlolli__
ah nevermind, building it from sources 6 mins.. it takes me 30 minutes on nix. 5 minutes if cached.

1606095957
andrewrk
it took 3 seconds for me because it only had to download 1 thing and I have a fast connection

1606096012
marler8997
hmmm...getting more uninitialized errors, might need to use a different compiler

1606096024
andrewrk
you could use zig-bootstrap

1606096052
marler8997
I think fastest path to solution is to update nixos

1606096055
hlolli__
I would be interested to know if zig compiles under a wasi32 stdenv host

1606096059
marler8997
and use llvm nixos package

1606096187
g-w1
hlolli__ iirc someone compiled stage2 to webassembly, but i can't remember who/what repo

1606096195
companion_cube
pixelherodev: well, does cproc have as good runtime instrumentation as clang?!

1606096293
marler8997
hlolli__, first time running that nix-shell command, only took a few seconds

1606096350
hlolli__
nice, in nix you would theoretically be able to rewrite the root environment and compile absolutely everything with different architecture, pretty useless, but in theory, compile clang in wasm then have clang compile zig, but since clang cross compiles, it's quite nonesensical challenge. Although I do remember seeing clang in wasm.

1606096429
hlolli__
correct, it was here

1606096880
marler8997
nix-shell is adding the old version of gcc (9.2)...why

1606096930
andrewrk
9.2 works fine

1606096942
marler8997
oh it should?

1606096945
marler8997
r u sure?

1606096983
andrewrk
pretty sure I was testing with 9.2 for some period of time

1606097050
marler8997
I get 34 errors about using uninitialized variables in zig source code

1606097086
andrewrk
are they legit?

1606097111
andrewrk
if they are false positives we should put a flag to disable that warning

1606097135
marler8997


1606097177
andrewrk
add -Wno-maybe-uninitialized

1606097203
marler8997
that's what I was looking for :)

1606097248
marler8997
and...we're built

1606097263
g-w1
out of curiosity, what cpu do you have?

1606097307
marler8997
AMD Ryzen 9 3900X 12-Core Processor

1606097324
marler8997
fast NVME is also crucial for fast builds like this

1606097338
g-w1
zig uses temporary files?

1606097422
marler8997
it uses normal files :)

1606097447
marler8997
so @extern returns whether a symbol has been populated?

1606097492
marler8997
wow NativeTargetInfo is working

1606097495
andrewrk
@extern is a tool for powerful control over external symbols. the thing that makes it determine whether a symbol is populated is using Weak as the GlobalLinkage

1606097683
marler8997
yeah this is weird, ld is segfaulting

1606097732
marler8997
can simplify, just call loader directly

1606097736
marler8997
still segfault

1606097784
marler8997
so...ld is saying that static-window is statically linked

1606097797
andrewrk
yes that is correct

1606097828
marler8997
so...the only reason you're actually calling the loader is to get access to the dlopen/dlsym functions

1606097843
marler8997
but you're not using it to load any .so files from your dynamic section

1606097845
andrewrk
correct

1606097851
marler8997
thinking out loud :)

1606097956
marler8997
I have a working example that does this, and now a non-working example.  I can look at the differences between the 2 but my guess is that ld won't run a static ELF binary

1606097964
marler8997
at least, something that it

1606098008
marler8997
ok we can rule out the ".interp" section, my working example doesn't have one

1606098098
marler8997
what if we tried linking to a dummy so file?

1606098102
marler8997
trick the loader

1606098297
marler8997
ok, when I link to an so...ld no longer says it's a static executable

1606098321
marler8997
but we still get a segfault

1606098777
marler8997
it's pie

1606098780
marler8997
pie is not working

1606098808
marler8997
you can replace main with an empty body, compile it and try to run it with the loader and it will segfault

1606098871
marler8997
so...first, trick the loader by linking to a dummy so file

1606098913
marler8997
and comment out static_window_exe.pie = true

1606098918
marler8997
now loader can load/run the exe

1606099045
marler8997
when I fix that...we get a setgfault somewhere in NativeTargetInfo (probably the segfault I was seeing)

1606099523
marler8997


1606102774
andrewrk
marler8997, interesting, so the weak extern is not working

1606102892
marler8997
weak extern not working?

1606102908
marler8997
it's working to detect whether we are loaded by ld

1606102927
marler8997
oh wait

1606102931
marler8997
no it's now

1606102934
marler8997
no its not

1606102938
marler8997
you're right

1606102966
marler8997
even more interesting....NativeTargetInfo works when we run statically, but not on the second invocation

1606103043
marler8997
these are the 2 problem I worked around by 1. hardcoding the loader (not calling NativeTargetInfo.detect) and 2. using the environment variable

1606103068
andrewrk
that doesn't solve the problem though - we need dlopen

1606103097
marler8997
dlopen might work

1606103104
marler8997
the dynamic section worked in my example

1606103122
andrewrk
how wolud we call dlopen?

1606103162
marler8997
my guess is it's the @extern implementation, but I can see if I can make that work in C to confirm

1606103363
andrewrk
marler8997, just tested. void * __attribute__((weak)) dlopen(const char *filename, int flags); gives the same NULL value

1606103387
marler8997
why wouldn't ld be populating dlopen...

1606103429
andrewrk
maybe because libdl.so is not mentioned in the dynamic section

1606103449
marler8997
yeah that could be

1606103500
marler8997
ok, so that fixes the issue

1606103501
marler8997
but

1606103507
marler8997
now the ELF interpreter is set

1606103528
andrewrk
not sure I follow

1606103549
marler8997
is I add "linkSystemLibrary("dl")"...now dlopen get populated

1606103574
marler8997
but now static-window has an ELF interpreter set, so when the kernel loads it, it doesn't jump to static-window, it goes directly to the loader

1606103599
andrewrk
if you linkSystemLibrary("dl") that's the same as doing linkLibC()

1606103624
marler8997
is there a way to add "dl" to the dynamic section without adding an ELF interpreter?

1606103641
marler8997
maybe patchelf --add-needed

1606103724
marler8997
that did it

1606103730
marler8997
nice

1606103765
marler8997
dlopen gettting populated after this: patchelf add-needed libdl.so.2 zig-cache/bin/static-window

1606103776
andrewrk
oh snap

1606103776
marler8997
*--add-needed (not add-needed)

1606103802
marler8997
love patchelf

1606103819
marler8997
coincidentally, created by the nixos guys

1606103839
andrewrk
yep

1606103872
marler8997
got further, but still a segfault

1606103873
andrewrk
ooh try remove needed on the dummy too

1606103929
marler8997
removing libdummy.so works as well

1606103988
andrewrk
ok now we both get this right?

1606104037
marler8997
yeah

1606104110
andrewrk
oh I know why that is happening

1606104112
marler8997
setgfult in extension.append("VK_KHR_surface")....hmmm

1606104119
andrewrk
look at libc_bits.h

1606104148
andrewrk
I made this file, it's all the libc surface that Vulkan-Loader depends on, and I made everything weak. that means the addrs are NULL if the libc functions don't get loaded. just like dlopen

1606104156
andrewrk
so we would need --add-needed for the other libc libs too

1606104164
marler8997
ah

1606104165
marler8997
simple

1606104167
andrewrk
so the extern weak stuff only works for things you have in the dynamic section

1606104177
andrewrk
basically we want -lc but then delete the interp section

1606104192
marler8997
ah

1606104204
marler8997
I haven't found a way to delete interp section

1606104211
marler8997
but it looks like we can add "needed" after the fact

1606104214
andrewrk
yeah

1606104250
marler8997
these are all the "needed" when I linked "dl": libdummy.so.0 libc.so.6 libm.so.6 libpthread.so.0 libdl.so.2 librt.so.1 ld-linux-x86-64.so.2 libutil.so.1

1606104312
andrewrk
hmm it didn't work for me even after adding all these needed

1606104324
marler8997
yeah me neither

1606104326
andrewrk
I wish I could tell where it was hitting the 0x0 segfault. the debugger doesn't tell me

1606104334
marler8997
it's in arraylist

1606104355
marler8997
it's a weird place

1606104377
andrewrk
how did you find that?

1606104383
marler8997
printf debugging

1606104385
andrewrk
oh

1606104396
andrewrk
wait you might be looking at the segfault handler code failing

1606104412
andrewrk
the first segfault is the thing we care about

1606104419
marler8997
try extensions.append("VK_KHR_surface");

1606104455
marler8997
add printf before/after that line

1606104471
andrewrk
gah this is exciting but I gotta go

1606104481
marler8997
lame

1606104528
daurnimator
IIRC when compile C pie code you usually need `-Wl,--as-needed`

1606104543
marler8997
we disabled pie

1606104562
marler8997
but maybe if we add that option we can re-enable pie...still not sure whether pie is needed

1606104602
andrewrk
there's also -fPIC (foo.force_pic = true)

1606105238
marler8997
failing in allocator.reallocAtLeast in ArrayList.ensureCapacity...still narrowing down

1606106022
andrewrk
marler8997, came back to share this idea really quick: we could maybe avoid the --as-needed thing by setting LD_PRELOAD before execve

1606106038
marler8997
yeah might work

1606106081
marler8997
yeah that works as well

1606106116
andrewrk
that's better because it means we can detect the libc paths at runtime instead of having to put them in the ELF

1606106147
marler8997
oh yeah, more flexible

1606106266
marler8997
got to go for a bit, I"ll see if I can narrow down the next seg fault later

1606108455
daurnimator
hang on, I need to remember what you guys were doing.... isn't the only path you need the one to the dynamic linker? i.e. /lib/ld-linux*

1606108547
marler8997
there's too many variations to know for sure what we need or don't need at this point

1606108635
marler8997
we would only need to know the actual file paths to .so files if we can't leverage the .so file lookup semantics of linux loaders

1606108907
marler8997
ok, there's something wrong with GeneralPurposeAllocator, it's segfaulting in its alloc function

1606108950
daurnimator
marler8997: `strings /lib/ld-linux-x86-64.so.2 | grep libc.so` its in there somewhere :)

1606109139
daurnimator
andrewrk: btw no need to set `LD_PRELOAD` yourself (infact that would be dangerous because it'll be inherited); you can use `--preload` to the dynamic linker

1606109156
marler8997
daurnimator, ah yes that's better

1606109466
marler8997
daurnimator, here's the PR with your suggestion:

1606109519
daurnimator
is it always libdl.so.2?

1606109569
marler8997
probably not

1606109605
marler8997
after PoC, we can insert logic to try to detect which one to use if we need to

1606110542
marler8997
andrewrk, by the way, you can get gdb to load the symbols by reloading the binary file

1606110556
marler8997
(gdb) file ./zig-cache-bin/static-window

1606110579
marler8997
gdb is just confused because it detects that you are running "ld", so it stops trying to use the symbols from "static-window"

1606111773
KIMI_7996__88
how to initialize sentinel array with just \0 ?

1606111794
KIMI_7996__88
font_file: [256:0]u8 = '\0',

1606111798
KIMI_7996__88
this not work

1606111907
KIMI_7996__88
i'm having trouble with array vs in C

1606111997
marler8997
var font_file = [_]u8 {0};

1606112005
KIMI_7996__88
i don't think my 1st message was sent, i try again: "hi, is type inference in struct member planned? also i have nother question:"

1606112016
KIMI_7996__88
marler8997 ty

1606112022
marler8997
var font_file : [256]u8 = undefined;

1606112025
marler8997
font_file[0] = 0;

1606112039
marler8997
that's probably what you are wanting

1606112049
KIMI_7996__88
error: expected type '[256:0]u8', found '[1]u8'

1606112065
KIMI_7996__88
cannot i do that in struct directly?

1606112080
marler8997
if you did it in one statement, you would have to initialize the entire array to 0's

1606112086
marler8997
which I'm guessing you don't want

1606112108
KIMI_7996__88
i want fill path after i create struct

1606112118
KIMI_7996__88
but it complain if i do not

1606112156
KIMI_7996__88
not possible to have array initialized with just 1 element?

1606112177
marler8997
not sure what you're trying to do, but can you leave out the initialized value?

1606112184
marler8997
font_file: [256]u8,

1606112214
KIMI_7996__88
in C i just do similar and i assign jsut with '\0'

1606112235
marler8997
C doesn't support struct types with default initializers at all

1606112256
KIMI_7996__88
yes, but it can in ZIG

1606112282
KIMI_7996__88
i wanted clean the code so put that directly on struct in the ZIG one

1606112286
marler8997
I'm not sure what you're trying to do so I'm not sure how to help

1606112300
KIMI_7996__88
sorry i'm not very good

1606112306
marler8997
I don't have enough context

1606112311
marler8997
but what you're doing looks very odd

1606112341
KIMI_7996__88
i am trying to create struct, it is font data, i fill it as i load file

1606112367
pfg_
do you know how big the font data is?

1606112392
marler8997
first thing I see, there is a MAX_FILE constant (rather than 256)

1606112400
marler8997
second thing, why does it need to be sentinel?

1606112414
marler8997
third thing, why do you need a default initializer?

1606112469
KIMI_7996__88
it is a string null terminated, i need 0 default because i prefer create struct first then i fill data, but right now i can't do that, i don't know how to explain

1606112504
pfg_
do you know the max length of the string?

1606112506
KIMI_7996__88
pfg_ i don't know the font data size, but here is to store the path

1606112523
KIMI_7996__88
i don't know the length, but i don't want to allocate on heap

1606112527
KIMI_7996__88
with allocator

1606112547
KIMI_7996__88
this is why i want default with 0

1606112549
pfg_
ok so allocator.allocZ(u8, length); I think to make a null terminated string

1606112560
marler8997
he doesn't want heap

1606112569
KIMI_7996__88
i don't need allocator, just this struct

1606112577
pfg_
oh you don't want it on heap

1606112590
pfg_
you need to know the maximum allowed length for it to be on the stack

1606112596
marler8997
I'm actually not sure what [256:0]u8 means...does that mean it's a 257 byte array with a 0 at the end? or that it's guaranteed to have a 0 somewhere inside it?

1606112604
pfg_
yes

1606112606
pfg_
first one

1606112617
marler8997
oh thanks pfg

1606112625
marler8997
then KIMI, [256:0] is not what you're wanting

1606112639
KIMI_7996__88
what i need?

1606112654
marler8997
font_path_buffer: [256]u8,

1606112686
pfg_
so probably you could have `path: [256]u8, length: usize` and a `fn pathSlice(v: *V) [:0]u8 {return v.path[0..v.length] }`

1606112707
marler8997
Something like this: pub fn font_file(self: @This) [*:0]u8 { return self.font_path_bufer; } (TODO: insert appropriate cast)

1606112725
marler8997
yeah pfg_ example is better

1606112731
KIMI_7996__88
hmm this is complex :/

1606112761
pfg_
slices are easier to work with but they require heap allocation or a consistent memory location unfortunately

1606112769
marler8997
yes, what you're doing is a bit odd/complex

1606112880
marler8997
his memory is not going to be "consistent" whether or not he uses a slice, that's what he signed up for by avoiding the heap

1606112940
marler8997
I have a feeling your API is making this overly complex...probably should look at that

1606113056
KIMI_7996__88
i'm new i am still trying to learn

1606113063
KIMI_7996__88
but i am also not very good at programming

1606113106
KIMI_7996__88
i need to rethink this struct

1606113110
marler8997
yeah that's fine

1606113127
marler8997
How are you using this struct?  Do you have code to share?

1606113303
KIMI_7996__88
i am not using it yet, i just plan how i will load the file and parse data on this struct

1606113582
KIMI_7996__88
char font_file[256] = { '\0' }; this is in C, but i want store that on the struct

1606113705
KIMI_7996__88
someone said &[_]u8 {0}, but then it says it is 1 length array thing, that is why i don't know then

1606113732
KIMI_7996__88
i want to do that exactly, but with the type [256]u8

1606113778
marler8997
why are you wasting cycles zeroing out that entire array?

1606113809
KIMI_7996__88
not entire, just 1st

1606113827
KIMI_7996__88
because 1st time string is always empty

1606113834
KIMI_7996__88
not undefined

1606113838
marler8997
I believe th C syntax you sent zeros out the entire array

1606113848
KIMI_7996__88
oh

1606113870
KIMI_7996__88
how to zero entire array in ZIG?

1606113892
KIMI_7996__88
so i can do the same thing, maybe this is what i don't understand, fill and not just the 1st

1606113927
marler8997
I'm not sure that's what you want to do though

1606113928
KIMI_7996__88
but i think the best is just the 1st to 0, it is faster as you say

1606113950
marler8997
why do you want to set the first one to 0?

1606113957
marler8997
why do you want to set any of it to 0?

1606113958
KIMI_7996__88
so it is not undefined

1606113965
marler8997
why do you not want it to be undefined?

1606113988
marler8997
undefined means, don't initialize it yet, I'll initialize it later

1606113992
marler8997
which sounds like what you want

1606113995
KIMI_7996__88
i don't want, i want it to be empty

1606114006
KIMI_7996__88
yes

1606114014
marler8997
so you want undefined

1606114023
marler8997
what was the "yes" to?

1606114024
KIMI_7996__88
but for being safe i want to make it empty on the struct

1606114029
KIMI_7996__88
so i don't forget later

1606114042
marler8997
undefined doesn't necessarily mean you aren't being safe

1606114047
marler8997
it means, I'll initialize this later

1606114053
marler8997
you can still have safe code that uses undefined

1606114080
KIMI_7996__88
but i can't check if undefined

1606114103
KIMI_7996__88
that is why i want it empty

1606114110
KIMI_7996__88
because otherwise i can't create struct

1606114112
marler8997
why do you want to check if it is empty?

1606114115
marler8997
need more context

1606114118
marler8997
do you have code to share?

1606114121
KIMI_7996__88
before i load font

1606114140
KIMI_7996__88
it is just struct right now i plan the code

1606114150
KIMI_7996__88
i have nothing written other than struct

1606114192
marler8997
you said you need to be able to check if it is empty...if you don't have any code, you do you know you'll need to be able to do that?

1606114266
KIMI_7996__88


1606114311
KIMI_7996__88
for that fonts

1606114335
KIMI_7996__88
but struct don't matter now

1606114360
KIMI_7996__88
i don't understand about the initialize array with just 1

1606114363
KIMI_7996__88
element

1606114381
KIMI_7996__88
i want make sure it is empty

1606114389
KIMI_7996__88
before i can use it

1606114431
marler8997
andrewrk, I'm at a stopping point for the night on this, I got debug stack traces to work (see previous comment), but, something weird is going on that seems to be causing a segfault when returning from certain functions, seemingly to do with allocation, see this pastebin for a small code snippet to reproduce the error:

1606114493
marler8997
KIMI, I don't think you can initialize an array with just one element

1606114500
marler8997
that's like trying to initialize 1 byte of a u32 value

1606114501
andrewrk
marler8997, what's the connection with that second part?

1606114519
marler8997
second part?

1606114523
andrewrk
oops I got confused, never mind

1606114545
marler8997
pastbin has extra lines for context on where I put it in the code

1606114589
marler8997
I believe you can also reproduce the segfault by calling std.heap.PageAllocator.alloc directly

1606114598
KIMI_7996__88


1606114615
andrewrk
thanks for the debugging tip

1606114620
marler8997
I made it public, and added logging, it works and I print a message before returning, but I never execute any code after calling it

1606114698
marler8997
KIMI, I think you could get it to work if you initialized the whole thing to 0, but I don't think there's a way to just initialize one value, again, that's like trying to initialize 1 byte of a u32 value

1606114720
marler8997
but I don't think this is the struct you want in the first place, so I wouldn't spend any time on that

1606114775
KIMI_7996__88
i think you are right but i am afraid i will use undefined memory after

1606114780
marler8997
I don't know what you're trying to do, write a font library?  but I would start writing some functions and designing your API

1606114812
andrewrk
marler8997, I disassembled it: => 0x000000000028a76d <+445>:vmovdqa XMMWORD PTR [rbp-0xa0],xmm0

1606114819
andrewrk
that's on a vector load instruction

1606114826
andrewrk
it hints that our stack is not properly aligned

1606114834
marler8997
aha!

1606114841
andrewrk
got it thanks to your debugging tip

1606114849
andrewrk
this has been an amazing collaboration

1606114863
marler8997
shared knowledge

1606114893
marler8997
freagin stack alignment...

1606114917
andrewrk
yep, rbp is 0x7fffffff8968 which is not 16 bytes aligned like it needs to be for SIMD

1606114926
andrewrk
ok so why isn't the stack aligned

1606114937
marler8997
there are compiler options for that

1606114953
marler8997
trying to remember

1606114990
andrewrk
but doesn't glibc align the stack before calling main?

1606115002
marler8997
we aren't using glibc

1606115029
andrewrk
hmmmmm

1606115037
marler8997
I'm a bit fuzzy on this, but alignment might be a per function thing as well

1606115091
andrewrk
ok I threw in a @setAlignStack(16) in the top of main() and now the segfault is further along!

1606115099
marler8997
woohoo

1606115178
marler8997
got to VulkanExtensionNotPresent

1606115191
andrewrk
hmm interesting we are getting different results then

1606115201
andrewrk
I pushed a commit btw

1606115208
marler8997
I'm using PageAllocator

1606115242
marler8997
when I switch back to GPA, I don't get that far

1606115249
andrewrk
hmmm

1606115387
andrewrk
btw VulkanExtensionNotPresent is what I got when I used linkLibC() but set the target to native-native-musl

1606115714
marler8997
just fyi, with master gpa is getting me to VulkanExtensionNotPresent

1606115758
andrewrk
hmm I think we're getting different results

1606115774
andrewrk
with the commit I just pushed, I get to here:

1606115789
andrewrk
the next problem I see is that it is calling dlopen@@GLIBC_2.2.5 which is a really old version of glibc

1606115806
andrewrk
we would want it to call a newer dlopen version

1606115834
marler8997
I bet you're getting farther, I'm running on my headless machine, might need to go to virtualbox which has a display

1606115844
andrewrk
that makes sense

1606115926
andrewrk
you might be getting the correct error based on your setup!

1606115937
marler8997
right that's what I'm thinking

1606115947
marler8997
but no good error message :(

1606116016
marler8997
frame #14, libPath address is 0x2d1?

1606116065
andrewrk
oh nice catch

1606116138
andrewrk
what is the @entry thing?

1606116165
marler8997
good question

1606116170
andrewrk
if that means the value when the function is called, that looks correct

1606116191
andrewrk
so my hypothesis might be correct, this old version of glibc has a bug and corrupted that parameter

1606116236
andrewrk
do you know how to specify a function in C with the glibc version suffix thing?

1606116269
marler8997
oh geeze

1606116291
marler8997
The only mechanism I've used is a complex linker script

1606116338
andrewrk
I think we want to make dlopen a static inline function that tries dlopen@GLIBC_new and if that is NULL then falls back to dlopen@GLIBC_old

1606116348
andrewrk
if that makes sense

1606116369
andrewrk
there are sooo many puzzle pieces to this problem

1606116382
marler8997
yeah, definitely a challenge

1606116394
andrewrk
anyway you were trying to go to bed :)

1606116407
marler8997
I got a few more minutes in me :)

1606116435
marler8997


1606116453
marler8997
that's a linker script I put together to wrap the libefivar so file a while back

1606116474
marler8997
but hopefully there is an easier way ?

1606116548
andrewrk
I think we should be able to use an attribute or inline asm

1606116746
andrewrk
good night

1606116753
marler8997
night

1606125036
bryanhonof
Hello! I have been "investigating" zig for a while now, and I noticed a lot of examples user the ```test "" {}``` syntax to demonstrate the subject. My quest is: can this construct be seen, or used, as an unit test?

1606125055
dutchie
yes

1606125078
mq32
bryanhonof: in fact, it is

1606125079
ifreund
bryanhonof: indeed, running zig test foo.zig will run all `test "foo" {}` blocks

1606125084
dutchie
well, you'd normally give the test a better name than ""

1606125087
ifreund
you can also add a test step to your build.zig

1606125090
mq32
test "my test name" { // test your stuff here }

1606125115
dutchie
you can then run a subset of tests by passing some option to `zig test`

1606125147
bryanhonof
freund: Oh cool, didn't know that. utchie: Normally I would :P

1606125181
bryanhonof
Okay cool, I'll have to go play with it myself. Thanks for the fast response!

1606125332
bryanhonof
dutchie: Well, you see, I have my emacs's erc zoomed in quite a bit, and I didn't notice I cut of the firm 2 columns of characters. I'm sorry :).

1606125378
bryanhonof
So, for the record: ifreund: Oh cool, didn't know that. dutchie: Normally I would :P

1606126014
ifreund
heh :)

1606130194
cren
hi. Is there a good example of an up-to-date way to read user input interactively?

1606130237
mq32
afaik not really

1606130238
daurnimator
from stdin?

1606130242
ifreund
usually you just read from stdin until you get a newline

1606130258
cren
uh, yes, i think from stdin

1606130261
ifreund
readUntilDelimiterAlloc() can do that

1606130265
mq32
does only work for cooked input though

1606130273
mq32
not perfect and doesn't allow

1606130297
mq32
so "HeY" BACKSPACE "y" will yield "HeY\by" on windows and "Hey" on linux

1606130305
cren
i want to replicate what python does with its input() builtin pretty much

1606130328
cren
ifreund: which import is that from?

1606130371
ifreund
cren: std.io.Reader

1606130388
dutchie
i found just a naïve .read() on stdin worked fine (into a pre-allocated 4k stack buffer)

1606130402
dutchie
i dunno about windows though

1606130430
dutchie
after perusing termios(3) for a while it seemed Good Enough™

1606130454
daurnimator
cren: FYI you'd do: `std.io.getStdIn().reader().readUntilDelimiterAlloc(...)`

1606130590
dutchie


1606131265
cren
daurnimator: you are using .outStream(), isn't that deprecated?

1606131291
dutchie
yeah, i haven't updated it for 0.7.0 yet

1606131315
cren
oops, yeah, pinged the wrong person whose name begins with d :P

1606132168
hlolli__
strange, that if I add a std.log.err before a while loop I'm able to fix a segmentation fault

1606135402
sjums
are there any functional http(s) libraries for zig? I've found

1606135840
hlolli__
sjmus I've heard about requestz on reddit, I just know it exists

1606135879
hlolli__


1606136126
sjums
That was the library I meant. Got the wrong url as I had a bunch of tabs open :) But it seem like that relies on the http library I posted and all examples are using HTTP.

1606136139
sjums
It looks really good though :) Well written code!

1606136207
ifreund
there's also hzzp

1606136229
ifreund
though I don't think that support https either

1606136318
g-w1
i think haze made a curl wrapper that you could use

1606138090
sjums
Right! That's not an entirely bad idea, g-w1

1606138140
g-w1
for right now, until the ecosystem is mature, it may be the best option

1606139148
cren
either I'm reading it wrong or std.io.Reader.readUntilDelimiterAlloc takes an error as an argument, could somebody explain how/why this is to me?

1606139266
ifreund
hmm? you pass an allocator, the delimiter (probably '\n') and a max size you want to read

1606139289
g-w1
it takes a reader (self), allocator to allocate the memory, delimiter for the end ('\n') and max_size of reading. it returns an error maybe is what you are thinking about

1606139303
ifreund
zig doesn't ignore the fact that memory isn't infinite so you need to pass a max_size

1606139476
cren
the signature on the docs looks like this: fn readUntilDelimiterAlloc(self: io.reader.Reader(*io.fixed_buffer_stream.FixedBufferStream([]const u8),io.fixed_buffer_stream.ReadError,io.fixed_buffer_stream.FixedBufferStream([]const u8).read), *Allocator, delimiter: u8, max_size: u64) ![]u8

1606139504
dutchie
oof

1606139522
ifreund
that's an instantiation for a specific reader type

1606139539
ifreund
if you read the source code the first paramter is just `self: Self`

1606139543
cren
ohh I parsed the brackets badly

1606139570
ifreund
understandable, that massive type is not at all readable

1606139591
cren
especially not with the way my screen squashes it across multiple lines

1606139598
dutchie
i find more often than not the stdlib source code is more readable than the docs (for now)

1606139601
ifreund
really I recommend just ignoring the generated docs and reading the source code until the docgen gets nicer

1606139615
cren
hmm yeah i'll try that. i think i used to do that actually

1606141174
cren
where's the source for FixedBufferAllocator? I thought it would be in std/heap

1606141245
dutchie
lib/std/heap.zig

1606141323
cren
ahh thanks

1606141493
pixelherodev
companion_cube: i mean, I don't particularly care

1606142902
companion_cube
I mean, for all I know, cproc is not production ready... Tcc maybe?

1606143102
cren
... uh, and where's the source for std.io.Reader?

1606143139
g-w1
lib/std/io/reader.zig

1606143173
ifreund
you might want to get zls set up, its goto definition is quite useful for browsing the std

1606143222
cren
thanks ifreund, good idea

1606143241
cren
and thanks g-w1

1606143264
cren
i was distracted by buffered_reader and bit_reader

1606143561
cren
is the buffer you pass to the init() method of an allocator the memory location from which allocations are made?

1606143836
dutchie
for FixedBufferAllocator yes, other allocators don't have such a buffer in their init

1606143885
dutchie
page_allocator takes no args, GeneralPurposeAllocator takes in a config, ArenaAllocator takes a backing allocator

1606147641
pixelherodev
companion_cube: cproc is production ready I think

1606147657
pixelherodev
It's not 100% done, but oasislinux uses it for much of the system

1606147667
pixelherodev
Not all yet - there's some pieces missing currently

1606148410
maringuu
Hello, I'm currently debugging zig code which uses @fieldParentPtr. Does anyone know an easy way (not calculating the address manually) to do what @fieldParentPtr does in gdb?

1606148557
Mat5
G'Day everyone. Finally I success in building Zig 0.7.0 with Manjaro linux. The problem was that the Arch packages for clang seem to be compiled in some way (obscure to me) against the Gnu compiler libraries, reusing them instead of the clang own ones. Because of this prior builds failed as the clang specific shared-libraries can not be found. The solution is building clang from source before compiling Zig with following comma

1606148558
Mat5
) native-linux-gnu native. This should also work for Arch linux.

1606148611
Mat5
ciao

1606148620
ifreund
Mat5: you don't need to build from source

1606148643
ifreund
ugh

1606148651
g-w1
use this cmake ..  -DZIG_PREFER_CLANG_CPP_DYLIB=true -GNinja

1606148668
g-w1
only ninja if u want

1606148683
ifreund
^ arch packages llvm differrently for whatever reason

1606148738
g-w1
they build them as .so instead of .a so the compiler has to be dynamically linked to them

1606148780
ifreund
why don't they distribute both :/

1606148822
ifreund
probably cause they don't split normal/devel packages but are trying to care a little bit about disk space despite that

1606148855
mq32
arch doesn't distribute static libraries

1606148860
mq32
by design/philosophy

1606148931
ifreund
they are useful for development though

1606148944
ifreund
void ships them with the -devel versions of packages for example

1606149062
g-w1
maringuu check this out for @fieldParentPtr in gdb

1606149108
maringuu
g-w1. Thanks! You seem to be better at googleing than I am :D

1606149135
ifreund
g-w1: does that rely on C ABI struct layout?

1606149343
g-w1
hmm it might. since zig uses optimised struct layouts would it be possible to do it in userland, or maybe the compiler could put it in the debuginfo. i can't wait for zig support in gdb

1606150708
TheLemonMan
now that master is green again it's time to update the other PRs o/

1606151953
g-w1
ifreund: actually I don't think it assumes the c abi because gdb can print regular zig structs and that just does some weird casts.

1606152035
ifreund
could be right, I didn't look closely

1606152731
TheLemonMan
andrewrk, if you're in for some easy review there's 7109 for you

1606154838
karchnu
does zig compiles linux?

1606155489
pixelherodev
...?

1606155498
pixelherodev
karchnu: the kernel?

1606155554
TheLemonMan
or the movie?

1606155602
pixelherodev
TheLemonMan: as opposed to applications

1606155635
pixelherodev
I wasn't sure what the intended grammatical form was

1606155641
g-w1
or compiling zig on linux

1606155646
TheLemonMan
or the anime?

1606155666
fengb
The movie the game

1606155694
TheLemonMan
the

1606155828
andrewrk
TheLemonMan, hmm one thing we have to consider, if the user requests a depfile, they may request it in the other format that we don't parse

1606155837
andrewrk
in which case we would have to disable it

1606155857
TheLemonMan
...there's more than a single (and undocumented) format? :O

1606155869
karchnu
pixelherodev: the kernel.

1606155870
fengb
I think phd’s question is... can Zig compile Linux kernel or can Zig compile to a Linux target

1606155919
karchnu
I would like to use zig as a C compiler for a toy OS of mine.

1606155953
karchnu
And it would be great to only use Zig, and nothing else, to compile everything.

1606155980
g-w1
that should definently work. check this out

1606156029
TheLemonMan


1606156219
karchnu
TheLemonMan: thanks. I hope it works out-of-the-box with Zig. That would be awesome.

1606156251
andrewrk
karchnu, give it a try, I think you will be pleased :)

1606156401
marler8997
karchnu, SamTebbs is also writing a kernel in Zig:

1606156442
karchnu
I will… after all the time I spent trying to get clang and gcc to be able to recompile themselves, I really want to drop them.

1606156554
karchnu
marler8997: I saw that, and it's awesome, but I want something usable and stable. Pluto is very much R&D. But I read the logs from time to time. :p

1606156595
companion_cube
does zig compile to ebpf yet? :p

1606159303
ifreund
ah, I think my refAllDeclsRecursive function has hit an infinite loop

1606159310
ifreund
that explains why it was crashing

1606159399
ifreund
Maybe I can track which types I've already seen

1606162519
KIMI
hi, yesterday someone told me how to init array with 0, but i don't remember syntax:   glyphs: [MAX_GLYPHS]?*Glyph = &[MAX_GLYPHS]?*Glyph{}, it not work

1606162535
KIMI
also is possible to enable type inference?

1606162538
KIMI
in struct

1606162554
mq32
what is Glyph?

1606162556
andrewrk
KIMI, try the

1606162573
KIMI
Glyph is struct

1606162585
KIMI
andrewrk what do you mean operator?

1606162595
KIMI
i don't know how use operator

1606162607
andrewrk
[1]?*Glyph{null} ** MAX_GLYPHS

1606162618
KIMI
thanks you

1606162633
andrewrk
are you sure you want every item to possibly be null?

1606162687
KIMI
yes so i can know if character is available

1606162698
andrewrk
ok then that syntax should work for you

1606162761
KIMI
it is working thanks

1606163739
KIMI
i have path: [] const u8, that i pass in function, i want store that string in a struct, how can i achieve this?

1606163808
KIMI
oh nevermind it works i just need both to be const u8

1606164120
andrewrk
marler8997, I suspect the next problem we are running into is that we didn't run some necessary start code. for example musl or glibc does some stuff before calling main() to set up threading

1606164160
andrewrk
let me back up. I think the symbol versioning thing is still relevant, but I also just got a void linux running in a VM which uses musl as the system libc, and that's what I think we are hitting here

1606164422
marler8997
oh right, whatever they do in crt0.o

1606164446
marler8997
like set envp

1606164544
marler8997
execute constructors would be another one I think

1606164700
andrewrk
fuck constructors

1606164715
andrewrk
ahem. excuse me :)

1606164724
marler8997
lol...why the hostility there?

1606164829
justin_smith
I'm dealing with a library right now which won't hand me an instance of a data type without also initialzing communication with an IPC mechanism with real time constraints. So in order to debug my code, I need to make a wrapper around the whole API that allows using an opaque dummy object.

1606164847
justin_smith
alternatively I could muck around with lib internal hacks and hope they don't break it on the next release

1606164854
justin_smith
I'd call that a problem with constructors

1606164890
justin_smith
(third option is hack up a real time debugger of some sort I guess?)

1606164891
marler8997
sounds like a problem with the library misusing constructors to me

1606164954
justin_smith
marler8997: this is extreme, but it's the kind of thing constructors are often used for, the "invariants" that a lib author has in mind don't always match what I need, especially if I want to make my code testable in isolation

1606164992
marler8997
one case I see for them is initialzing multi-threaded synchronization data structrues (like mutexes) in a library

1606165023
marler8997
but then again, an explicit function might also work in most cases

1606165052
justin_smith
the difference of course is that using a constructor makes some intermediate broken state impossible

1606165108
justin_smith
but I think that in what claims to be low level programming, separating the intantiation from data and the initialization (and documenting the constraints!) is probably apropriate

1606167690
ifreund
error: expected type 'fn(?*c_void) callconv(.C) c_int', found 'fn(*View) callconv(.C) c_int'

1606167695
ifreund
huh? shouldn't that coerce?

1606168016
pixelherodev
ifreund: not as arg in a function type, I think?

1606168036
pixelherodev
?*c_void to *View should, I think.

1606168053
ifreund
it's going the other way actually

1606168059
pixelherodev
Either way

1606168067
pixelherodev
(didn't read it too closely :P)

1606168076
ifreund
and similar conversions of functions pointers seem to work in other places

1606168093
pixelherodev
Don't know what to tell you

1606168191
ifreund
guess I'll just pointer cast :P

1606168212
ifreund
probably a stage1 bug, that conversion is safe

1606168430
pixelherodev
Or

1606168447
pixelherodev
(it totally is though)

1606168487
ifreund
I swear this exact same thing works in other places in my codebase though

1606173309
marler8997
I'm thinking of putting together my own baby monitor, first thought I had was to use a raspberry pi, but open to suggestions if anyone has any

1606173755
justin_smith
marler8997: it's definitely going to be relatively turn-key on rpi, I wouldn't be surprised if you couldn't just add a copy/paste config to nginx to serve v4l data off some qeury path

1606173909
justin_smith
marler8997: if your goal isn't to write code, this blog post seems to describe the config needed to make it work

1606173947
justin_smith
if you actually want to write code, I assume gluing gstreamer to some small http lib is possible...

