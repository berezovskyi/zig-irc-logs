1599440804
g_w1
test

1599440939
g_w1
is this working

1599441781
klltkr
g_w1: you're coming through loud and clear

1599441817
g_w1
cool. my first time on irc

1599448360
smolck
is there a way to get the value of a nested anonymous struct, i.e. given .{false, .{5, 6, 7}} get the .{5, 6, 7} and iterate over it?

1599448408
smolck
if I try and access it by @typeInfo(@TypeOf(...)).Struct.fields[1].default_value (in this case) it just returns null

1599448717
daurnimator
smolck: anonymous structs are made to be coerced to something.

1599448771
daurnimator
smolck: but also, anonymous structs are I think comptime fields?

1599448782
daurnimator
not default values.

1599448961
smolck
hmm

1599448990
smolck
I guess I'm trying to use them like arrays that can take any type of value

1599449009
smolck
which is not such a good idea?

1599449024
daurnimator
they'll coerce to arrays....

1599449044
daurnimator
but note that you'll have trouble using them at runtime

1599449068
daurnimator
e.g. your `5` there is of type `comptime_int` -> you need to coerce it into a runtime type for it to exist at runtime

1599449145
smolck
yeah I've noticed that, which can be a bit annoying

1599449168
smolck
but interestingly, the way I have things set up currently, all I have to do is add `comptime` to the start of the nested struct and it works

1599449311
smolck
one unrelated question I have though, is there a way to coerce something like "hello" to []const u8 w/out an @as cast or similar?

1599449337
daurnimator
just assign it to a variable of type []const u8

1599449356
daurnimator
const foo: []const u8 = "hello";

1599449400
smolck
sorry, should have clarified, I mean within a struct, so have it be that type in this sort of situation: .{"hello"}

1599449411
smolck
hmm

1599449416
daurnimator
no. @as

1599449421
daurnimator
anything else would be contrived....

1599449436
smolck
yeah okay

1599449439
smolck
that makes sense

1599449557
smolck
cool, thank you for your help!

1599460766
jjsullivan1
hi, I have a question about zig's compile-time evaluation. Would it be possible to modify an array of structs at compile time? I'm making a virtual keyboard, and I'd like to precalculate the approximate position of each key in a layout based on how wide the key is. I tried writing this down as far as I could here

1599460811
jjsullivan1
I left ellipses for the declarations I couldn't figure out, of course idk if this method is idiomatic/correct in zig

1599463185
daurnimator
jjsullivan1: take in a `[]Key`, and then you'll probably need to declare that array as a `comptime var` and take address of it?

1599463278
jjsullivan1
daurnimator: ahhh, I didn't realize there was a `comptime var`. I think I was digging in the wrong parts of the manual. I'll give that a try, thank you!

1599463909
daurnimator
jjsullivan1:

1599464043
daurnimator
jjsullivan1: actually... you don't even need the `comptime` keywords!

1599464343
jjsullivan1
daurnimator: thank you! it makes more sense now

1599464466
daurnimator
jjsullivan1: so you making a QMK replacement? :)

1599464532
daurnimator
funnily enough I was thinking about the same thing today

1599464569
jjsullivan1
I'm not sure what QMK is, but there's a lack of easy-to-hack on screen keyboards for wayland. So I started working on one in C

1599464584
daurnimator
ah. QMK is a firmware for actual hardware keyboards

1599464601
jjsullivan1
but there's a few things like this that would be helped by compile-time eval. So, I'm seeing if zig can help me out

1599464634
daurnimator
QMK is written in C and uses a unreadable series of macros to let you configure your keyboard at compile time

1599464662
daurnimator
I was looking at

1599464721
jjsullivan1
yeah, there's some similar problems I'm trying to get around

1599464777
jjsullivan1
first I got a simple surface example working in wayland, then I tried porting some of sxmo-svkbd over

1599464920
jjsullivan1
and while it is a 'simple' program, I think a few parts of it could be expressed more easily with explicit ctfe and other tricks

1599465157
daurnimator
jjsullivan1: one application I can imagine is typing my password into a bootloader

1599465190
daurnimator
for tablets and 2-in-1s I don't know of any UEFI password entry systems

1599465221
jjsullivan1
the guys at postmarketOS have that covered, they made one that uses the linux framebuffer

1599465255
jjsullivan1
it uses SDL_Renderer though, so it can only blit to the framebuffer or open as a desktop window

1599465285
daurnimator
I'm talking about in a pre-boot environment

1599465294
daurnimator
zig can target UEFI :)

1599465337
jjsullivan1
oh yeah, I'll keep that in mind actually

1599465487
jjsullivan1
The drawing library I use only needs pixman, and pixman can probably run in a stripped down environment

1599465585
jjsullivan1
might not even need it to begin with, pretty sure it's only doing some fancy buffer fills I could do on my own. It does give me a nice frontend to freetype though:^(

1599466096
daurnimator
jjsullivan1: freetype? why not harfbuzz directly?

1599466263
jjsullivan1
the more you know :^)

1599466278
jjsullivan1
I wasn't even using freetype directly, it's just what pixman was using

1599466298
jjsullivan1
or this drawing library itself, guess that's more reason to drop it

1599466353
jjsullivan1
wayland can just hand me memory mapped buffers to barf pixels on, probably easier to do simple fills + harfbuzz

1599466392
jjsullivan1
the real dragon though is fontconfig

1599466394
jjsullivan1
god help me

1599466424
daurnimator
fontconfig? do you need to touch that?

1599466448
jjsullivan1
to search installed fonts yeah, there's probably an alternative but I haven't looked into it

1599466486
jjsullivan1
maybe I should just skip attribute-based searches for fonts, but most people expect to just give fontconfig pattern strings for most stuff

1599466541
jjsullivan1
for a UEFI environment or something like that I'd definitely skip it and pack in a font file

1599490809
Snetry
It seems to be that someone has created a Wiki entry just advertising themselves

1599491177
ifreund
I sent them an email and deleted it

1599491202
ifreund
wanted to paste a link to the community page in the commit message deleting it, but github didn't give me a chance

1599491232
ifreund
and well, looks like the mail bounced

1599491281
Snetry
weird

1599496854
brotein
hi

1599496875
brotein
I successfully built zig from source! After leaving yesterday on some linking errors

1599496890
Nypsie[m]
What was the culprit?

1599496903
brotein
that's because I only built llvm but not lld,clang from source so there was a version mismatch

1599496925
Nypsie[m]
Aaaah I see

1599496942
brotein
it's actually a bit treacherous from llvm

1599496969
brotein
you need to pass to cmake the option: -DLLVM_ENABLE_PROJECTS="clang;lld"

1599496980
brotein
otherwise they are disabled by default

1599497003
brotein
and of course I had installed clang and lld to be able to build llvm, through the package manager, thus with a different version

1599497059
brotein
so kind of a dumb oversight from me

1599497064
Nypsie[m]
Made me check our docs to see if this is written down, fortunately it is:

1599497064
Nypsie[m]


1599497084
brotein
Right, I had a look at the instructions on the wiki but they differ from the ones on the llvm project

1599497103
brotein
which I favored

1599497152
Nypsie[m]
Aah good to know

1599497205
brotein
I feel it is simpler to follow the llvm instructions where you clone the git repository and you only do cmake; make;

1599497211
brotein
with the right cmake options of course

1599497249
brotein
and you are on the right git tag, e.g v10.0.0

1599497334
brotein
For the curious, the exact commands are:

1599497342
brotein
git checkout llvmorg-10.0.0.0

1599497345
brotein
mkdir build; cd build

1599497350
brotein
cmake ../llvm -DCMAKE_BUILD_TYPE=Release -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD="AVR" -DLLVM_ENABLE_LIBXML2=OFF -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_PROJECTS="clang;lld"

1599497357
brotein
make ; sudo make install

1599497475
brotein
anyways thanks for the help I got here!

1599497963
dmiller
Hello! Is there a function similar to `readUntilDelimiterOrEof` for reading from stdin, except it just reads until EOF rather than also accepting a delimiter? Thanks!

1599499764
traviss__
dmiller, have you tried read(buffer: []u8) or readAll(bufer: []u8) ?

1599501554
KoljaKube
It is not possible to initialize single elements of an array that is a struct member with default values, right? :-/

1599503758
ifreund
KoljaKube: sure it is: [1]u8{42} ++ [1]u8{undefined} ** 5;

1599503789
ifreund
then you get an array of length 6 with the first value initialized to 42 and the rest undefined

1599503949
KoljaKube
My member is `.content: [some_const][some_other_const]?[]u8 = std.mem.zeroes([come_const][some_other_const]?[]u8`

1599503973
KoljaKube
I had hoped for something like `.content[0][0] = only_element_set`

1599504016
KoljaKube
I would have preferred having the rest of the array filled by the default defined in the struct

1599504029
KoljaKube
But that would take two steps I guess

1599504094
KoljaKube
I'm using an initializer block now, repeating the mem.zeroes in there. That way I at least don't need to calculate array sizes

1599504486
marijnfs
I see the allocator.zig now defines the class directly in the zig file? How does this work

1599504526
KoljaKube
Every file is implicitely a struct as well, or am I misunderstanding the question?

1599504537
marijnfs
no that was what i was wondering

1599504543
marijnfs
it that new?

1599504549
KoljaKube
No

1599504551
alexnask[m]
Its been a while

1599504568
marijnfs
it's a bit jarring the first time, but also interesting

1599504695
KoljaKube
It saves you from having to usingnamespace or `const MyStruct = @import("my_struct").MyStruct;`

1599504750
marijnfs
yeah I found that annoying as well. So thats cool

1599504760
KoljaKube
Someone also linked to river's source (on reddit I think?), where the same is in use:

1599504778
KoljaKube
I had to look twice too ;-)

1599504827
marijnfs
yeah mentally I expect to see a struct and some indentation

1599504870
KoljaKube
Yeah, I was surprised about all those global variables :D

1599504873
ifreund
I really like not having everything in the file indented an extra level

1599504884
ifreund
I think I was one of the earlier adopters

1599504900
ifreund
but yeah this has been a thing since before 0.6.0

1599504921
KoljaKube
It was definitely there before I found Zig

1599504956
KoljaKube
That extra level wouldn't be so bad if Zig used only two spaces for indentation >:)

1599505353
KoljaKube
I love that the Zig documentation page has a auto-switching dark mode. Delights me every time it switches while I work with it

1599505467
ifreund
oh I use darkreader so I never noticed

1599505810
marijnfs
don't start indentation wars:P

1599505821
marijnfs
also, tabs are better than spaces

1599505838
ifreund
well, yeah but consistency wins

1599505860
Nypsie[m]
Good thing we don't have this in stage 2 :P

1599506318
andrewrk
the new css media query for dark mode is very much in line with "Communicate intent precisely" :)

1599506336
andrewrk
when you do that right, the user doesn't have to interact at all, things Just Work

1599512295
andrewrk
argh, I can't repro this llvm11 failure using only llvm/clang

1599512572
andrewrk
nvm got it

1599514386
davi2205
Hello! I have a question, is it safe to cast fn(*A)void to fn(*u8)void? (A is any non zero bit type)

1599514418
fengb
Only with a well defined calling convention

1599514439
fengb
e.g. callconv(.C)

1599514555
davi2205
I'm willing to store callbacks in an ArrayList like struct { target: *u8, func: fn(*u8)void }

1599514585
davi2205
const CallbackEntry = struct { target: *u8, func: fn(*u8)void };

1599514638
davi2205
target is a pointer to any sized struct that was previously cast to *u8

1599514647
davi2205
I'm not sure if that's a good strategy tho

1599514855
marijnfs_
I guess alignment can be an issue?

1599515012
davi2205
It apparently works, but I don't know whether I'm just lucky

1599515084
marijnfs_
so in the callback you cast back to the datatype you want?

1599515151
alexnask[m]
`*@Type(.Opaque)` is usually used for this kind of type erasure

1599515168
alexnask[m]
Since it represents a type with unknown size

1599515418
marijnfs_
i'm trying to parse that

1599515464
alexnask[m]
`const CallbackEntry = struct { pub const Erased = @Type(.Opaque); ctx: *Erased, func: fn (*Erased) void }`

1599515472
marijnfs_
I would suggest he just casts to u8 like a human being

1599515474
davi2205
marijnfs, I implement the callback function using the target type like fn myCallback(self: *A) void

1599515512
alexnask[m]
Why? This is the same generated code but clearer, `*u8` is a single item pointer to a u8, `*Erased` is a single item pointer to an item of unknown length

1599515534
marijnfs_
I guess just don't call it Erased

1599515546
davi2205
then I call the callback function using the CallbackEntry struct like entry.func.*(entry.target);

1599515546
marijnfs_
that's very confusign

1599515553
alexnask[m]
But anyway, suit yourself, just mentioning how Ive seen other zig codebases do this

1599515570
marijnfs_
yeah it's probably the most proper way to do it

1599515588
marijnfs_
but a *u8 also says it doesn't know the length right?

1599515592
marijnfs_
it's not a []u8

1599515597
alexnask[m]
And yes Erased is prob bad, Context or something is probably better

1599515624
alexnask[m]
No, `*u8` is a single item pointer, I guess you could use `[*]u8` (which is a pointer to an unknow number of elements)

1599515633
marijnfs_
ah yes

1599515713
davi2205
I'll try the @Type(.Opaque) method

1599515846
marijnfs_
where does .Opaque come from?

1599515894
alexnask[m]
.Opaque is an enum literal, @Type takes std.builtin.TypeInfo which is a union(enum) with `Opaque: void`

1599515911
alexnask[m]
Because the payload is void, .Opaque will coerce to TypeInfo

1599515985
marijnfs_
ah okay @Type takes the enum as argument, and .Opaque is an element therein

1599517224
Nypsie[m]
Hell yeah, zlib/deflate in std!

1599519768
davi2205
well, it crashed the compiler lol

