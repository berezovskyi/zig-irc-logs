1605747799
andrewrk
g-w1, source from the fs

1605747931
pixelherodev
andrewrk: for bool in CBE - since bool doesn't exist pre-C99 - should we add an ifdef set to the header defining bool as unsigned char, false as zero, and true as one for C89 (and including stdbool on later revisions)?

1605747994
pixelherodev
Or just use integer values explicitly?

1605747994
ifreund
why are we supporting pre-C99 now? can't that wait?

1605748010
pixelherodev
ifreund: We're supporting C89 officially

1605748025
pixelherodev
With ifdef-based support for later revisions

1605748106
ifreund
just curious, are there many compilers that support C89 but not C99?

1605748141
pixelherodev
probably not

1605748187
ifreund
what's the logic behind targeting C89 then?

1605748255
pixelherodev
We use the lowest common denominator, while still taking advantage of later support when it is present

1605748265
pixelherodev
So yeah, that actually tells me exactly what to do :P

1605748300
pixelherodev
ifreund: e.g. we use _Noreturn on C11, or __attribute(noreturn) on GCC, but leave it as plain void for compilers which don't support those

1605748310
ifreund
that all makes sense to me

1605748338
ifreund
I'm just wondering if there's a compelling reason to support C89 other than "because we can"

1605748358
pixelherodev
Just because most compilers support C99 doesn't mean we should rely on it

1605748375
dominikh
any love for K&R C?

1605748376
pixelherodev
GCC/Clang both support C11, and people are probably going to argue we should use that as the base as a result

1605748388
pixelherodev
dominikh: nope :P

1605748392
pixelherodev
Only ISO C

1605748397
pixelherodev
ISO/ANSI, at any rate

1605748528
andrewrk
ifreund, pixelherodev: I see no reason to support anything besides C89 for the C backend

1605748565
andrewrk
the output is not supposed to be readable, it's supposed to be widely compatible

1605748601
andrewrk
for #6378 we'll have a branch where we hack up the C backend for the one time transformation to make the output readable, do it, then delete the branch and forget about it

1605748635
pixelherodev
Good news: got header tests working, so tetsuo's emit_h branch is just about ready for merge :)

1605748688
andrewrk
nice

1605748726
pixelherodev
whoa!

1605748731
pixelherodev
`and` for `&&` is part of C95??

1605748758
ifreund
supporting only C89 makes more sense to me than supporting all the more recent versions as well

1605748768
pixelherodev
ifreund: it's not really "supporting"

1605748798
g-w1
after the c self-hosted compiler, will you have to update the c every time you update the zig, or will the c-based compiler be just good enough to compile the the zig compiler?

1605748801
pixelherodev
e.g. unreachable is only present as a GNU extension - so when it's available, we use it, because it's a more faithful recreation

1605748812
ifreund
my point was more that focusing on a single target would probably make getting that target to feature completion faster, but I'm not the one doing the work so feel free to ignore me of course

1605748814
pixelherodev
g-w1: at that point, the language is intended to already be stable

1605748824
g-w1
ah

1605748824
pixelherodev
ifreund: there's no real effort involved lol

1605748838
pixelherodev
it's a tiny 5-line ifdef in a common header file

1605748846
ifreund
nice

1605748858
pixelherodev
As far as the CBE is concerned, e.g. zig_unreachable() is guaranteed to exist

1605748865
pixelherodev
It just happens to be a nop on many platforms

1605748961
ifreund
yeah I see what you mean now, that's quite a nice way of handling things

1605749051
andrewrk
pixelherodev, your proposal regarding stdbool.h and ifdefs sounds reasonable to me

1605749148
pixelherodev
Added a bit of type support to CBE too while I was it

1605749154
pixelherodev
s/it/at &

1605749525
g-w1
when the language is stable and it has a c based compiler, lets say the version upgrades to 2.0, then will the c based compiler be updated? if so, manually or automatically? or will it be so stable that the newer version is just more optimisations and stuff, but the semantics are the same?

1605749719
pixelherodev
g-w1: the idea is to never update the language like that after 1.0

1605749786
pixelherodev
First header test  passing :)

1605750341
andrewrk
g-w1, manually

1605750654
g-w1
thx

1605751570
pixelherodev
Now to just add CBE Execution support via `argv[0] cc` :D

1605751797
pixelherodev
Then CBE test harness will be basically done

1605752233
g-w1
is there a way to do @fieldParentPtr in gdb, or the equavalent?

1605752909
pixelherodev
Uh, so I just updated zig master, and now every attempt to build gives "cacheunavailable" :(

1605753034
torque
it's possible that the cache is not available

1605753497
pixelherodev
lol

1605753505
pixelherodev
Wiped the cache, problem persists :(

1605753514
g-w1
did you wipe the global cache?

1605753567
pixelherodev
Nope

1605753582
pixelherodev
Good call, let's see if that helps

1605753594
pixelherodev
Seems to have helped, good catch!

1605753604
daurnimator
pixelherodev: I once suggested a `#include <zig/common.h>` that does all sorts of ifdefs

1605753628
pixelherodev
daurnimator: that's basically what we do...

1605753681
pixelherodev
daurnimator: we just inject it automatically into every file instead of requiring an include

1605755644
pixelherodev
andrewrk: to run zig cc, should I make main's buildOutputTpe public, use std.process.args (ugh) to find argv[0] and exec it, or something else entirely?

1605755789
pixelherodev
punt_to_clang, maybe?

1605755806
pixelherodev
ZigClang_main might be good...

1605755893
daurnimator
why isn't the zig compiler a library itself (like clang is)

1605755914
pixelherodev
Why should it be?

1605755923
andrewrk
it's structured that way - what changes would you expect to see from status quo?

1605756059
pixelherodev
ZigClang_main will act exactly like running clang with the given arguments, correct?

1605756607
daurnimator
andrewrk: actually it's better than I remember. couple of things: 1. execve is a spanner in the world. 2. entry points (at the moment `mainArgs`) or a C-abi friendly wrappers should be exported 3. don't rely on cwd anywhere: take the working dir as an argument

1605756660
andrewrk
pixelherodev, correct

1605756684
andrewrk
daurnimator, libraries should use Compilation as the library entry point, not main.zig

1605756713
andrewrk
so I think (2) is the only issue

1605756716
andrewrk
not sure what you mean by "spanner"

1605756787
pixelherodev
Ah, right! I can use Compilation to compile C?

1605756795
pixelherodev
Or is that for Zig only?

1605756796
andrewrk
yes

1605756844
andrewrk
it will rely on executing self_exe_path with `zig clang` args

1605756857
andrewrk
so the main problem you have to solve is making that work

1605756861
daurnimator
andrewrk: uh "spanner in the works"

1605756883
andrewrk
daurnimator, I'm still not following, can you elaborate on (1)?

1605756905
daurnimator
> To throw a spanner in the works is to, deliberately or otherwise, cause disruption; to interfere with the smooth running of something.

1605756937
andrewrk
oh, I see. in the u.s. we call that a monkey wrench

1605756953
andrewrk
pixelherodev, I had a plan for this, which is that for testing stage2 we would actually pass the zig_exe_path as self_exe_path

1605756965
daurnimator
andrewrk: there are a few places where main.zig calls `execve`: if someone was trying to use zig as a library in that manner, then they would be unhappy :)

1605757010
andrewrk
I'm not ready to make a stable C API for the compiler, but it is written cleanly, with Compilation being the entry point API and main.zig doing not much more than CLI parsing

1605757163
daurnimator
so if I wanted to e.g. `zig translate-c` as a library, how would I do it?

1605757180
andrewrk
pixelherodev, we have Builder.zig_exe when doing `./zig build test-stage2` so the only problem to solve is getting that path to be available when we invoke `zig test src/test.zig`

1605757232
andrewrk
maybe we can use addArg on the resulting LibExeObjStep for the test, and then get the arg from src/test.zig

1605757327
andrewrk
I think that would be a matter of putting `pub ` in front of `const translate_c = @import("translate_c.zig");`

1605757334
andrewrk
I'm not being sarcastic

1605765001
siraben
Does Zig have a package system?

1605765034
siraben
s/system/manager

1605765098
siraben
I see

1605765243
pixelherodev
Not yet

1605766785
siraben
Any Nix users here with examples of how they build Zig projects?

1605767042
josias
siraben: There are a couple inofficial package managers. Including

1605767152
novaskell
I use guix (similar) and mostly sidestep the package system for now until it's more stable. Handling it properly in package scripts would be the same deal as Rust where you place everything into a reachable directory and then call `zig build` on it and copy the binary. Sadly lose the cache when you do so though

1605767597
siraben
Levy (Elara): Nix has a `buildRustPackage` function abstracts away those details

1605767613
siraben
Potentially one could be made for Zig as well

1605767703
siraben
Building Zig itself seems to fail ATM, src/os.cpp:1105:9: error: use of undeclared identifier 'futimens'

1605767703
siraben
if (futimens(file, times) == -1) {

1605767703
siraben
^

1605767750
siraben
(on macOS)

1605767862
daurnimator
andrewrk: that's a simple fix at least: adding `pub`... and creating a package :)

1605768130
novaskell
siraben: Guix has the same though it doesn't gain anything from guix and the sometimes "smarter than average" build.zig scripts make some of it non-trivial at the moment

1605768162
siraben
I see. Can you specify versions of packags and pin them?

1605768172
siraben
packages*

1605768255
novaskell
same as nix, you can pull packages from the future and the past and pinning is just creating a package/manifest referencing a specific commit/release

1605768320
siraben
Ah yeah I mean in the context of Zig's packages

1605768461
novaskell
inherit/derive a package (if it exists) then specify a fixed commit/release? Nix/Guix don't really care about what version something is as much as they care about where to get it and what the has of the content is

1605768528
siraben
As in, Rust has Cargo.lock, does Zig have some lockfile

1605768558
novaskell
ah, there's no package management at the moment in zig at present

1605768568
siraben
I see

1605768571
novaskell
so no lock file or concept of versions

1605769533
daurnimator
siraben: are you on old OSX? futimes was only added in 10.13 which is the frequent cause of that error message

1605769586
siraben
daurnimator: I'm on 10.15, but I'm using the Nix package manager which hasn't updated its libsystem from 10.12 to 10.13 yet,

1605769655
daurnimator
siraben: they better hurry up and get to 10.16...

1605769659
daurnimator
uh, 10.14 sorry

1605769670
daurnimator
we're likely to drop support for 10.13 soon

1605769676
siraben
10.13 is being EOL'd?

1605769706
daurnimator
I expect so; generally they EOL a month after the 3rd following release

1605769713
siraben
Where would I find Apple's LTS schedule?

1605769714
daurnimator
--> big sur (10.16) was released 7 days ago

1605769725
daurnimator
so 10.13 will fall out of support before the end of the year

1605769735
siraben
Why would Zig require such new dependencies?

1605769749
daurnimator
siraben: we only support what OS vendors support.

1605801266
Kena
Please how can I read what I wrote in a file?  I tried several times with `print` but that does print the bytes written.

1605801309
Kena
I'm not a programmer so everything that is not on ziglang.org or ziglearn.org is beyond me.

1605801340
ifreund
you probably want to print what gets written to your buffer

1605801352
Kena
That's right.

1605801412
ifreund
oh readAll returns a slice doesn't it? thats what you want to print but it won't have an items field...

1605801431
ifreund
nope it does return a usize

1605801447
Kena
Its return a usize, so it doesn't have a field access to items.

1605801448
ifreund
then you want to print buffer[0..bytes_read]

1605801473
Kena
print("{}\n", .{buffer}); returns the bytes written but with a artifact after the string like: Cybernetics¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬

1605801496
ifreund
yeah, because you want to only print the bytes you actually read

1605801499
Kena
I think that the bytes allocated by the bufffer but not used.

1605801509
ifreund
so slice the buffer from 0 to bytes_read

1605801509
Kena
Yes you're right.

1605801561
Kena
Cool, thank you.

1605801751
Kena
Do you know what function to use to read a user input instead of hard code a string into the source?

1605801776
Kena
Instead of `writeAll` from the std.file.File type I mean.

1605801790
ifreund
you want to read from stdin assuming your on linux or something posixy

1605801812
ifreund
or do you mean take a file name as an argument?

1605801870
Kena
I would like to prompt the user to enter a string to it have to be read from stdin, although I'm still on Windows for the moment.

1605801900
Kena
s/for/at

1605801969
Kena
But I'll go back to Debian in a few weeks, that's the plan since I failed a migration towards voidlinux.

1605801979
ifreund
well, std.io.getStdIn() looks to support windows

1605802000
Kena
Allright, I'll take a look right away.

1605802054
Kena
By the way, `std.io` assumes that all methods trigger a system call, I am right?

1605802062
g-w1
I did `const stdin = std.io.getStdIn().reader(); const input = try stdin.readUntilDelimiterAlloc(gpa, '\n', 100000);`

1605802205
ifreund
Kena: not necessarily, std.io.getStdOut() just returns a constant on linux for example

1605802229
g-w1
probably readUntilDelimiterOrEof is better

1605802638
Kena
How can I understand the parameters you passed? readUntilDelimited{Alloc|OrEof} is not present in

1605802677
g-w1
it is in std/io/reader.zig

1605802683
g-w1
part of the reader api

1605802733
Kena
The source code's nomenclatur has nothing to do with the documentation's nomenclatur, I'm lost.

1605802759
g-w1
you can just look at the paramater's name of the function

1605802804
g-w1
fyi, readUntilDelimiterAlloc takes an allacator, delimiter to read until, and max input size

1605802965
Kena
Yes I'm reading the signature at the moment but I don't know which one to choose.

1605803059
Kena
Because I do not know why would there be an allocator in the first place neither what would be the delimiter in a string entered by a user.

1605803131
ifreund
usually pressing return "enters" a string. This shows up in stdin as a newline

1605803155
ifreund
so you probably want to use \n as your delimiter

1605803181
Kena
Yes I understand, then so far there is no need for an allocator it seems.

1605803202
ifreund
well the options are allocator or buffer, the input needs to go somewhere

1605803237
Kena
Lol I agree but I do not understand the difference between a buffer and an allocator.

1605803259
Kena
Is the allocator a kind of curser to navigate through the buffer?

1605803277
g-w1
an allocator gives you the memory, while you have to give it the memory for a buffer

1605803364
g-w1
to make a buffer, "var buf: [1000]u8 = undefined;"

1605803924
dutchie


1605804524
Kena
Please why does a slice of a non-array type should raise an error, isn't a slice of a slice authorized?

1605804629
dutchie
you have a ?[]u8: an optional slice, not a slice

1605804823
Kena
Yes I see it now, but what should I do? Like I said I'm not a programmer.

1605804886
Kena
It's so damn hard to learn programming without a teacher 2 times a week during 5 years.

1605804892
dutchie
there are a few ways to get a value out of an optional: you can use `if (optional) |val| { ... }` `optional orelse ...` and if you are sure that it's non-null `.?`

1605805001
Kena
Yes, I recall these syntaxes from the reference manual but I have not developped algorithmic thinking so it's extremely delicate to convert a task into some code.

1605805008
Kena
Thanks dutchie.

1605805043
dutchie
don't worry, it takes a while to get the hang of things, especially if you are trying to teach yourself

1605805060
dutchie
keep at it and before you know it you'll be answering beginners' questions yourself

1605805090
g-w1
Kena: do you know any other programming languages, so that I can maybe make relations when explaining stuff

1605805105
Kena
Thanks for your support it's warming because I'm failing for several years.

1605805124
Kena
Not I just babbled with zsh last year but now i don't remember anything.

1605805133
g-w1
ok

1605805398
Kena
what shall I do with the `else` branch? because there is nothing useful to do it's it's not an optional value.

1605805442
dutchie
you don't need an else branch with the `if (optional) |value|` pattern

1605805464
dutchie
or if you want to bail out you can just `return` from your main function

1605805485
dutchie
for example if there's more code afterwards that you don't want to run if the optional was null

1605805578
Kena
return from main will exit the program right?

1605805632
dutchie
yes

1605806175
Kena
I encompassed the print function in a `if` like you said but it still raises the same error, and I can't use `.?` because it could be null if the user accidently press enter without a input.

1605806197
g-w1
could you send the code?

1605806336
Kena


1605806373
Kena
the child type return is ?[]u8

1605806482
g-w1
I don't see what the problem is? it is compiling fine on compiler explorer with master

1605806535
Kena
yes but it prints nothing between the ''

1605806555
Kena
the user input is not read.

1605806751
g-w1
you are using buf for two things, reading from stdin, and also reading from a file?

1605806758
g-w1
it is getting overwritten

1605806843
g-w1
kena, this works

1605806942
g-w1
i would reccomend reading the documentation comments on the functions that you are using to see what value that they are returning means.

1605806972
g-w1
they start with /// and are above the function

1605807056
Kena
I'm a bit lost, I just want to read a user input then read from the file afterwards.

1605807120
g-w1
if you are using the same buffer, it will get overwritten

1605807130
Kena
because it would prove that the writing happened successfully instead of reading from the stdout.

1605807407
Kena
Are you saying that it needs a buffer for `readUntilDelimiterOrEof` and another one for  `readAll`?

1605807437
Kena
what's the point?

1605807465
g-w1
when you create a file, you are writing nothing to it

1605807476
g-w1
library.txt has nothing in it

1605807589
Kena
Since the user input reading has finished, it can be overwritten safely to read the the "same" data in the written file.

1605807612
Kena
I agree, create it does nothing else.

1605807615
g-w1
at what line in your example do you write the data to the file?

1605807644
g-w1
since it reads the data from the file and the file has nothing, the buf is just ''

1605807686
Kena
I don't know, either the one with std.io.getStdIn().reader() or the one with readuntildelimiteroreof()

1605807720
g-w1
look at my example that i sent, it is working

1605807721
Kena
I'm not sure about their role

1605807760
Kena
Yes, I read it thanks. But isn't it sub-optimal instead of reusing the same?

1605807823
g-w1
if you reuse the same buffer, it gets overwritten by the data in the file which is nothing.

1605807935
Kena
You're right I misinterpreted the result in the terminal.

1605807997
Kena
But is it std.io.getStdIn().reader(); or stdin.readUntilDelimiterOrEof(&buf, '\n'); which reads the user input?

1605808027
g-w1
reader creates a reader, and then readUntil... actually reads

1605808112
Kena
I didn't even suspect this typology of mechanism, I keep thinking even ziglearn made a shit load of assumptions regarding to silently required prior knowledge. It's really discouraing but thanks for your patience.

1605808155
Kena
thereby, using seekTo(0) isn't needed anymore if I use a second buffer right?

1605808349
g-w1
yes

1605808466
Kena
running your file got the terminal stuck before emitt LLVM output, did you try it?

1605808481
Kena
*emitting

1605808634
Kena
Yours compile too but still doesn't print anything in stdout. :/

1605808638
ifreund
urgh, there is no dev_t definition for linux

1605808680
ifreund
wish I had noticed befor 0.7.0, but maybe I can get it in for 0.7.1

1605808730
ifreund
ok I take that back, it's defined for many linux archs but not x86_64 for some reason

1605808741
g-w1
kena it works on linux, maybe it doesn't work with windows though. im afraid this is the limit of my knowlege

1605808872
Kena
I'm not sure it is due to Windows, nothing is printed because nothing it's written in the file.

1605809806
ugla
Did you change the code so that it writes to the file? Do you even want to write to a file? It's not needed if you just want to print back the user input.

1605809936
Kena
What I'm trying to do is the following:

1605809937
Kena
1. create a file2. read a user input3. write the user input into a file4. print in stdout from the file

1605810016
Kena
But I'm stuck because `writeAll` takes a slice of bytes (i.e. []u8) whereas `readUntilDelimiterOrEof` takes a constant one (i.e. []const u8)

1605810075
Kena


1605810185
Kena
The error suggests it doesn't want a pointer so when I remove the address-of operator in front of `writeAll(input)` i get in return `error: expected type '[]const u8', found '?[]u8'`

1605810282
ifreund
Kena: kernel_stat

1605810289
ifreund
oops,

1605810304
ifreund
you need to unwrap the optional

1605810304
Kena
My bad, it was a optional one so i encompassed a input in a `if`

1605810320
Kena
Yes :)

1605810385
Kena
Now I need a function to read from a file.

1605810468
novaskell
`file.reader()`?

1605810567
Kena
in

1605810581
Kena
only streams

1605810708
ifreund
you get the Reader from the File you want to read

1605810717
ifreund
using File.Reader()

1605811139
Kena
Yes but which argument do I pass into file.readAll()? as I haven't any variable nor address pointing to the file.

1605811293
ifreund
std.fs.File.readAll() takes a buffer into which it will write what it reads

1605811314
ifreund
isn't that the first function we looked at today?

1605811638
Kena
Returns the number bytes read means "write" ? seriously? the naming is quite confusing.

1605811739
Kena
The compiler complains because it wants a usize and found instead an optional type.

1605811792
ifreund
you can't put a usize in an if statement like that

1605811794
Kena
I understand the incompatibily between theses types but what is it necessary to do in order to obtain a usize that can be "returned" or "read" or whatever

1605811835
fengb
There’s no “peek” capabilities in the reader interface

1605811888
ifreund
Kena: you use that usize to know how much of your buffer has been filled with data read from the file

1605811893
Kena
I agree about the usize inadequate in a if but still I don't see which mechanics do I have to use

1605811906
ifreund
scroll up about half an hour, we already went over thies

1605811952
Kena
It was a different case, I was reading from stdin, now I need to read from the file which has just been created and seeded.

1605811983
ifreund
you're using the same function, std.fs.File.readAll()

1605812001
ifreund
which works the same way no matter what file you are reading from

1605812036
fengb
Aside: does readAll() work with stdin?

1605812124
ifreund
probably not what you want to use for that yea, it will hang untill stdin is closed

1605812199
ifreund
orignally Kena was using it to read from a file not stdin though

1605812231
Kena
In fact, I'm trying to but don't follow you

1605812552
Kena
I miss one mental step, the data has been written and I returned the proportion of buffer actually used, what is it missing before printing it in stdout?

1605812655
Kena
I returned the cursor at the beginning of the file with file.seekTo(0), what should I do with the usize?

1605813682
earnestly
ifreund: (But stdin is a file)

1605814864
ifreund
technically correct is the best kind of correct, but don't tell me you don't know what I mean :P

1605815253
earnestly
Seekable files are real files

1605815368
earnestly
™

1605817449
Kena
Please do you know why the characters `'.`replace the first two characters in the print output?

1605817590
Kena
The result will not be `bla bla bla ''<input>'.` but rather `'.a blabla <input>` (without `'.` at the end of line)

1605817651
Kena
I'm pretty sure it doesn't need specifier formats to print correctly.

1605817828
Kena
Not encompassing the curly braces prints correctly the output but would defeat the purpose of what I'll need to do next.

1605818117
ifreund
does windows not care that you didn't open the file with the write permission?

1605818310
Kena
I'll check in the doc the other values possible but you may be right.

1605818329
Kena
*the other possible values, sorry for my language.

1605818455
Kena
In

1605818501
ifreund
indeed, I was being dumb

1605818530
ifreund
creating a file implies write access, it's when opening an existing file that you need to specify it

1605818598
Kena
yes so far I'm successfully writing a string in it, but it is overridden each time the script is executed.

1605818655
Kena
When you run it and enter a user input, do you have the last and before-last characters replacing the two first ones in the printed output?

1605818677
ifreund
ah I bet I know what's happening

1605818697
ifreund
windows has these dumb things called carriage returns

1605818713
Kena
Damn it.

1605818746
ifreund
try stripping your input string of whitespace?

1605818754
Kena
Does it mean my `\n` delimiter in readDelilimiterOrEof is replaced by `\r`?

1605818763
Kena
Allright.

1605818789
Kena
Same here without any whitespace.

1605818801
ifreund
windows uses both, \r\n, and you read until \n so there's a \r at the end of your input string I'd assume

1605818837
ifreund
which causes the terminal to move the writing head back to the start of the current line and continue writing there

1605818846
ifreund
which would cause exactly the behavior you see

1605818867
ifreund
Kena: how are you stripping whitespace?

1605818891
Kena
I entered a input without any whitespace in the sequence.

1605818896
ifreund
as a quick hack you could also just print all but the last character and see if that fixes it and I'm white

1605818917
ifreund
that wouldn't help, the \r is added by windows when you press return

1605818942
ifreund
you'd need something like std.mem.strip() with std.ascii.spaces

1605818979
Kena
2 functions in a row? I will need some time to figure out how write that

1605819056
ifreund
const stripped = std.mem.trim(u8, input, &std.ascii.spaces);

1605819123
Kena
How do you know the existence of std.mem.strip()? It is not even in

1605819169
ifreund
std.mem.strip doesn't exist, I was thinking of std.mem.trim

1605819176
ifreund
see the line of code I just sent

1605819209
Kena
I'm sorry I lack focus.

1605819228
Kena
I must be the only idiot who try to learn programming starting with zig.

1605819278
ifreund
most people would probably start with C or javascript depending on what end of the spectrum they are on

1605819420
novaskell
Kena: just means you're in the perfect position to note down the process of learning zig as a first language such that a tutorial for absolute beginners can be written with input

1605819657
Kena
Yes you're right but that the ideal line of events, I'm frightened in advance where nobody will have the patience to keep answering my questions because it's too boring to help a total beginner.

1605819700
Kena
Nobody likes the noise on this channel and it's pretty easy to understand why.

1605819789
novaskell
I doubt most mind beginner questions and I'd even say some enjoy them

1605819806
novaskell
so don't worry

1605819970
Kena
Allright.

1605820056
Kena
Your solution works ifreund thanks. But now I have a new quest to undertake, the utf-8 encoding support! Because all characters with a accent are replaced with a coma, do you know a function related to streams who allow utf-8?

1605820122
Kena
And on a side note, I wish to learn zig to aim at embedded systems programming. I think it's a stimulating choice of career.

1605820126
novaskell
streams are agnostic to encoding

1605820271
ifreund
isn't windows utf-16 and broken as fuck?

1605820272
Kena
When I entered `La modélisation des systèmes complexes`, the output stream in the file is `La mod‚lisation des systŠmes complexes`

1605820277
Kena
lol..

1605820303
g-w1
maybe your terminal can't handle accents?

1605820328
Kena
tell Microsoft their powershell cannot handle accents lol

1605820342
Kena
Are you sure It's the terminal?

1605820353
g-w1
i'm not

1605820416
Kena
Do you accept to run a test on your machine if a provide again the link to the source code?

1605820476
g-w1
ah, I don't think std.debug.print can handle unicode.

1605820515
Kena
Except C# and F#, Microsft windows does not seems to be developer-friendly, or even targeted for industry in 21st century...

1605820611
Kena
I'll try the master branch instead of 0.7.0 but the probability of an improvement over utf-8 encoding is low.

1605820617
g-w1
it is not

1605820634
g-w1
once that pr gets merged, it will work

1605820723
Kena
That's a pipe dream, there isn't even any milestone assigned, it could be resolved in several months at least.

1605820891
Kena
But I'm going to suscribe to the issue, thanks for pointing this out.

1605820951
ifreund
you can probably work around this by just writing the bytes directly to stdout

1605820960
justin_smith
Kena:  I think the root issue here is that zig doesn't try to address unicode at all, and in the linux and osx ecosystems many things "just work" because of utf8 defaults, and you need extra effort or different tooling to make anything "just work" with the assumptions of windows

1605821064
Kena
Yes I admit the difficulty to implement anything with Microsoft Windows. I just wanted to learn seriously.

1605821278
justin_smith
the lowest friction thing, especially if you are just now learning to program, is probably to use a *nix system (linux or osx or some sufficienly compatible windows subsystem)

1605821304
justin_smith
otherwise your learning is going to be impeded by weird historical differences IMHo

1605821363
Kena
You're right.

1605821487
Kena
I'm terrorized to not be able to reinstall Debian since I lost my entire RAID1. My PC won't even boot it so I'm using a laptop with windows 10 from somebody else.

1605821507
Kena
It affected me real hard.

1605821601
justin_smith
Kena: depending on what you are trying to do you could even use a cheap virtual server, if you are comfortable going 100% CLI

1605821704
Kena
to host a GNU/linux instance from Windows 10 host you mean?

1605821778
earnestly
Any real learning is always a test of curiosity, just struggle

1605821807
Kena
I don't like using the mouse but I'm not 100% CLI-able either.

1605821827
justin_smith
Kena:  I mean renting a cheap remote instance and using ssh to access it

1605821888
Kena
I didn't think about that but it could be a interesting way of dealing with the current situation I suppose.

1605822127
novaskell
100% cli is just a case of removing your file/archive/etc manager

1605822182
pixelherodev
... I mean, no? If you want 100% CLI you need to remove your display server (X11 / Wayland compositor)

1605822189
Kena
In order to append to the file instead of override it each time, I could replace `.{ .read = true} by `.{ .truncate = true}`, but then I have to move the cursor to the next line before writing to again right? I'm not sure to understand " it will be truncated to length 0. " explanation.

1605822205
pixelherodev
Truncated means deleted

1605822214
pixelherodev
It's new length will be zero

1605822220
pixelherodev
That is, there will be nothing left

1605822266
Kena
Allright, so it cannot be used to append anything. What field of std.file.CreateFlags should I use?

1605822404
novaskell
pixelherodev: it ends up with 99% terminal and the only other thing being either gimp or a web browser

1605822556
Kena
pixelherodev are you using 9front or is it LemonBoy?

1605822754
waleee-cl
Kena:  pixelherodev  mentioned it sometime last week

1605822808
waleee-cl
(I think. Might have been this week)

1605822837
Kena
Allright, that's because I told myself that perhaps he could be interested to use and/or contribute to another fork of Plan 9.

1605822976
waleee-cl
3 days ago,

1605823011
Kena
Nice, I didn't know about the search parameter. Thanks.

1605823290
Kena
If I need to append to an existing file, what API should I use?

1605823342
Kena
Is std.json the easier way to do so?

1605826539
ifreund
why isn't std.testing.refAllDecls() recursive?

1605827912
andrewrk
interesting idea

1605828136
ifreund
andrewrk: for context, I had to manually recurse one level and workound the missing opaque support to achieve the desired effect here:

1605828159
ifreund
As you can see though, it caught two things that didn't compile though so that's a win

1605828257
andrewrk
I've been thinking recently about how we could maybe walk back the laziness a little bit and have zig look at all top level decls

1605828323
andrewrk
conditional compilation would have to be with comptime branches

1605828394
ifreund
I think that would be a lot more intuitive tbh

1605828549
g-w1
Right now, I feel like it is python, having code that can run, while it still has weird errors. IMO that would help a lot with development speed.

1605828701
ifreund
could also reconsider the zig check proposal:

1605830145
g-w1
Kena: good news, std.fmt mets UTF-8 just got merged. im pretty sure it will be in 0.7.1

1605830209
ifreund
(they left)

1605830236
ifreund
(I may have been about to tell them the same thing 10 min ago :P)

1605830260
g-w1
lol

