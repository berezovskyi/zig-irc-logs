1605139371
Kena
The lsb?

1605139473
Kena
I'm a beginner, I'm not aware of all the jargon.

1605139660
ifreund
least significant bit

1605139661
Kena
fengb, I'm planning to watch your youtube video regarding to memory allocators. Do you think it's still relevant in spite of it was published several months ago?

1605139671
ifreund
yes it is

1605139677
Kena
Thanks ifreund

1605139849
Kena
The function now works but the initial goal was to learn alignment mechanism because I'm trying to read RISCV-V Assembly Language by Anthony J. Dos Reis. I regret nevertheless that Zig assumes the byte as the smallest addressable unit. It would have been nice to work with embedded devices and micro-controllers in Zig.

1605139931
ifreund
you totally can

1605139936
Kena
Verilog is C-syntax derived after all so Zig could have compete for  a sort of backed for Hardware Description Language.

1605139944
Kena
Really?

1605139967
Kena
s/backed/back-end

1605140003
ifreund
anything c can do zig can (or will be able to) do

1605140044
Snektron
Kena: there are pointers to values which have bit offsets

1605140060
Snektron
packed structs would also get you quite far (if they worked)

1605140100
ifreund
they work great if you just fill them up with bools

1605140137
Snektron
anything that results in byte aligned units

1605140424
Kena
Allright :)

1605146068
teratorn_
hi all, anyone want to take a stab why my len variable is getting corrupted and printing a really big number?

1605146323
andrewrk
damn the CI is erroring again

1605146397
teratorn_
how can i find the asm code that corresponds to dereferencing out_len var? on godbolt.org??

1605146422
a92
Godbolt is one good way, yes

1605146549
g-w1
could it be returning 1 exit code because of the thing you added to fix the self-hosted compiler returning 0 if there were compile errors andrewrk?

1605146579
andrewrk
g-w1, in this case it would be printing a compile error as well

1605146579
g-w1
although it is weird that its only on sourcehut

1605146583
teratorn_
a92, but how to isolate that specific asm code?

1605146602
a92
I think Godbolt shows association; mouse over the assembly

1605146666
g-w1
it has -Dskip-compile-errors, could that be triggering it?

1605146974
andrewrk
g-w1, that skips the tests that cause compile errors and check the output; it does not silence stderr

1605147016
g-w1
ah that is what i though.

1605147032
travv0
teratorn_: the long series of letters and digits is your hexadecimal output from the while loop, not your length

1605147082
travv0
if you put a newline after your length output it'll show what you'd expect

1605147159
teratorn_
fugggggg

1605147165
teratorn_
travv0, good catch

1605147165
travv0
:P

1605147173
travv0
lol it took me a few to figure it out

1605147185
teratorn_
great help here lol

1605147197
teratorn
want to just write my code for me it will go faster

1605147219
travv0
if it's an interesting enough project :P

1605147450
drefr3
Hi. I want to ask why std.math.absCast  use~@bitCast(Uint, x +% -1) instead of @bitCast(Uint, -%x) to get the abs of int?

1605147935
daurnimator
drefr3: corner cases around i0/i1 IIRC.

1605148837
justin_smith
for example, for signed byte the range is -128,127, asking for the negation of -128 would be an error (or require upgrade to a larger bit count)

1605148856
justin_smith
absCast only takes ints, but I don't have that range memorized

1605148893
daurnimator
justin_smith: we do upgrade it

1605148915
daurnimator
justin_smith: absCast returns an unsigned integer with the same number of bits as the passed integer.

1605148916
justin_smith
'm looking at old code, or misunderstanding the code, in that case...

1605148925
daurnimator
unsigned you get an extra bit :)

1605148947
justin_smith
but the math is done before the upgrade

1605148961
daurnimator
yes. but it's done with wraparound arithmetic; and then a bitcast

1605148977
daurnimator
The key reason it's written the way it is, is so that `@as(i1, -1)` becomes `@as(u1, 1)`

1605148981
justin_smith
daurnimator: right, wraparound arithmatic is safe, negation isn't

1605149032
justin_smith
where il is signed int and ul as unsigned int?

1605149278
daurnimator
justin_smith: yes.... that's what the `i` and `u` mean in zig

1605150459
justin_smith
daurnimator: I assumed the 'l' was long, which absCast can't process

1605151388
justin_smith
oh, I see "Integer" isn't a specific width, it's an integral value of any number of bits

1605153575
drefr3
thanks, daurnimator. But I notice that -%x still work while the type is i0/1: in the case of i1, -1, and -%(-1) = -1(1, in binary) after @bitCast to Uint, we get 1.

1605153645
drefr3
and tests still pass

1605154180
drefr3
in the case of i0, i0 can only represent 0, so if(x<0){...} won't be executed

1605157920
daurnimator
justin_smith: there was no l; you might need a font that makes it easier to disambiguate i,1,l,I :)

1605169569
Core3159
daurnimator, how do you think about it? Please correct me if i am wrong

1605169823
Core3159
em.. I'm drefr3

1605203399
Kena
Hello, when I try to build `const file = try std.fs.cwd().createFile("my_file.txt", .{ .read = true });` I got `error: expected type 'void', found 'std.fs.file.OpenError'`

1605203424
alexnask[m]
Your function does not return an error union, just void

1605203424
Kena
But OpenError is an Error set, how can I know the error value?

1605203430
alexnask[m]
Make it !void

1605203458
alexnask[m]
This is a confusing error message though I thought someone had fixed it a while ago :/ Probably just in specific circumstances

1605203481
g-w1
is this wrong syntax?

1605203522
Kena
Thank you!

1605203883
g-w1
it seems like the syntax should be correct, but both the self hosted parser and c++ parser flag it

1605203941
ifreund
g-w1: get rid of the first semicolon

1605203958
ifreund
if () foo else bar;

1605203970
ifreund
all one statement

1605203972
g-w1
ah, so its a statement, thanks

1605204264
marler8997__
I just commented on this issue:

1605204391
hch
how to pass args from cli to my main function?

1605204455
marler8997__
grep for argsAllocator

1605204474
g-w1
std.process.argsAlloc

1605204573
hch
thanks

1605204638
g-w1
it seems std.process.args() is better if you just want to iterate through them

1605204819
hch
that was helpful. the WASI section actually has an example

1605206107
marler8997__
ifruend, it looks like kakoune doesn't work on windows?

1605206375
waleee-cl
marler8997__:  not even the builtin-ui branch?

1605206431
waleee-cl
ah, right, "no native Windows version is planned"

1605207049
yZ5vlALg86lP
is there somehow an example how to link some parts of a project into a static library and then link that static lib to one of the final executables? looking at build.zig, but its not immediately obvious

1605207061
yZ5vlALg86lP
s/somehow/somewhere/

1605207072
ikskuh
builder.addStaticLibrary

1605207081
ikskuh
exe.addLibrary(return_vaue_of_the_previous)

1605207094
yZ5vlALg86lP
oh. nice

1605207128
Nypsie[m]
Wouldn't it be better to directly use exe.addPackage() (If it's a Zig library)?

1605207144
yZ5vlALg86lP
no actually the static lib is made of .c files

1605207157
Nypsie[m]
Got it :)

1605207174
yZ5vlALg86lP
but i did not specify that in my original question.

1605207210
Nypsie[m]
Oh no worries. Now you know both ways if you'd create a Zig library :)

1605207314
yZ5vlALg86lP
this leads me to the question how to pass a bunch of c files to this addstaticlibrary()?

1605207343
Nypsie[m]
lib.addCSourceFile()

1605207484
yZ5vlALg86lP
in which case lib is the object that is returned by addstaticlibrary?

1605207512
Nypsie[m]
Correct

1605207756
yZ5vlALg86lP
huh i get: > error: no member named 'addLibrary' in struct 'std.build.LibExeObjStep'

1605207797
g-w1
will there ever be a comptime debugger?

1605207830
g-w1
because right now gdb gets very confused when i try to use comptime stuff in it

1605207933
Nypsie[m]
Hmm don't think so?

1605207965
Nypsie[m]
Since the logic lives inside the compiler I guess

1605208035
g-w1
will the compiler ever support it, i guess my question was

1605208136
Nypsie[m]
Would be great, but I don't think it will

1605208156
Nypsie[m]
Using @compileLog/Error is quite limited, I agree :P

1605208240
Nypsie[m]
yZ5vlALg86lP: Use `exe.addObject(your_static_library_result_here)`

1605208261
Nypsie[m]
or `linkLibrary`

1605208276
Nypsie[m]
(which is being called by the above function)

1605208294
g-w1
my use case was trying to view comptime arguments to a function at runtime. maybe the compiler/debugger could be smart enough to fill in the comptime args in the debuginfo

1605208302
yZ5vlALg86lP
thx Nypsie[m] !

1605208383
Nypsie[m]
g-w1: Aaah I see. I do believe though, that Stage 2 emits its own Dwarf files (which DWARF already supports I believe). However, that would also mean gdb needs to update their dwarf stuff.

1605208409
Nypsie[m]
So maybe in stage2 that particular use case might just work

1605208417
alexnask[m]
Yes it should be possible

1605208430
g-w1
thats cool!

1605209168
TheLemonMan
andrewrk, did you like the @setScopeOptions proposal?

1605212175
marler8997__
TheLemonMan, why was that issue closed?

1605212185
marler8997__
I mean PR

1605213141
TheLemonMan
marler8997__, I fixed the unrolling problem in another PR

1605213267
marler8997__
ok

1605215836
hch
is there atoi or simiar?

1605215893
frmdstryr
std.fmt.charToDigit

1605215901
Nypsie[m]
`std.fmt.parseInt`

1605217103
Ristovski
std docs still on 0.6.0 :(

1605217138
g-w1
iirc they have to manually be updated

1605217235
Ristovski
indeed, automation of that is on some todo iirc

1605217299
ikskuh
huh

1605217305
ikskuh
std.os.write triggers EFAUL

1605217310
ikskuh
*EFAULT which is marked unreachable

1605218742
Kena
fengb I'm grateful for your "What's a memory allocator anyway?" video, you're brilliant dude.

1605219100
Kena
I hope you'll plan a round 2 or even an addendum to talk in more details about segments of memory on top/bottom of the buffer tactics, the benefits of using swapping into global space and the buffer overrun workaround consisting in writing in a additional buffer!

1605220230
fengb
Thanks

1605220244
fengb
That talk was stretching my knowledge already :P

1605220488
Kena
You made me laugh when you declared that was a topic with which you're not particularly familiar with ^^ I wonder what your streams look like when you tame the topic.

1605220502
andrewrk
TheLemonMan, gonna have to get back to you on that, I'm moving today

1605220538
andrewrk
the good news is I'll be done and all set up with my own office by this weekend :)

1605220649
TheLemonMan
no problemo, good luck with the move heh

1605220909
Core3159
Hello. math.absCast use ~@bitCast(....., x+% -1). but I think @bitCast(.....x-%1) works too. am I wrong

1605220979
Core3159
sorry . I mean   @bitCast(...,-%x)

1605223143
justin_smith
daurnimator: that reminds me of our convo yesterday - the case of 1 bit is the easiest example of what I was saying - the operation is done before the bitcast, x * -1 won't have the right answer for the minimum possible signed int (easiest to see the problem with 1 bit, but you get a similar problem with any bit count)

1605223183
fengb
I definitely did not know anything about allocators before Zig

1605223227
Kena
Did you implement randomizing pages for zee-aloc?

1605223262
Kena
My bad, you do use slab instead of pages, so there is no overlapping data segments.

1605223310
Kena
I wonder why did you stop its development, neither why nobody jumped in to help you as it is a public repository.

1605223450
fengb
I have a slab branch and it works

1605223484
fengb
But it’s an extra 500 bytes in size so I haven’t merged it in yet

1605223495
fengb
Also haven’t run tests to prove it’s faster either

1605223718
Kena
Understood :)  I hope you'll achieve some progress on your project, as WebAssembly could gain some traction if and/or when emscripten is stabilized.

