1595376028
pixelherodev
It's

1595376039
fengb
I can’t grok it. Hence I reference the old design docs which are written in English at least

1595376072
companion_cube
seems pretty similar to BNF

1595376076
companion_cube
(I mean, the same kind of notation)

1595376194
fengb
But... wasm isn’t about defining syntax

1595376228
fengb
That doesn’t help you understand the memory model

1595376263
pixelherodev
It focuses on all the wrong things

1595376283
pixelherodev
Like, it might be good for writing an

1595376283
companion_cube
oh, I saw mostly the spec of hte bytecode format, I guess

1595376342
companion_cube
ah yes I was in `binary format`, duh

1595376368
pixelherodev
Whoops. Accidentallied stage2

1595376373
pixelherodev
Infinite loop looking for free space :P

1595376381
companion_cube
is this that bad:

1595376457
fengb
pixelherodev: maybe look at my decoder? Everything other than opcode decoding is pretty straightforward

1595376482
fengb


1595376510
pixelherodev
I will, thanks

1595376526
pixelherodev
Just found myself missing goto in zig for the first time

1595376546
pixelherodev
I've got a loop that checks for either of two conditions, and restarts the whole thing if either one is true

1595376569
pixelherodev
Ended up using a while(true) which `break`s at the end and `continue :outer`s within two nested conditionals

1595376649
pixelherodev
Or I would have if that wasn't buggy :(

1595377834
pixelherodev
Okays! Got it emitting `error: NoFreeSpace` for SPU II target w/o RAM or RAM added :)

1595381677
pixelherodev
And got it not breaking on x64 in the process :)

1595381864
pixelherodev
Oh god why

1595381872
pixelherodev
There's a build system for C and C++...

1595387832
leeward
Cargo has some nice properties. Worse things exist.

1595388078
pixelherodev
leeward: [citation needed]

1595388080
pixelherodev
Name one :P

1595388416
shakesoda
pixelherodev: npm

1595388662
pixelherodev
you win.

1595390101
daurnimator
andrewrk: we should go through and change occurences of (mac)osx to macos

1595398390
pixelherodev
daurnimator: find -exec sed?

1595398415
daurnimator
pixelherodev: a little more to it than that... but yeah

1595398431
pixelherodev
I mean, with git, you can be a bit overzealous and just fix any extras

1595398445
pixelherodev
Worst case, you `git reset --hard` and be a bit more careful with the sed on the next attempt

1595419340
tsujp
Zig zagging my way into zig

1595419341
tsujp
Ye ye

1595419662
ifreund
\o/

1595428882
companion_cube
damn, dillo is pretty cool

1595428955
leeward
:)

1595433802
ask6155
Hello!

1595433807
leeward
o/

1595433906
ask6155
I just wrote a function which gives !T but when wrote a test, like assert(func() == 34) it gives me error that 34 cannot be coerced into ErrorSet!i32

1595434085
Nypsie
That's because func() returns an errorset as it can fail. try assert(try func() == 34)

1595434204
ifreund
you can also use std.testing.expectEqual() iirc

1595434232
ask6155
yeah I had that doubt between assert an expect

1595434236
ask6155
*and

1595434241
ifreund
ask6155: in fact, you should never be using std.debug.assert in tests

1595434261
ifreund
it will be UB in release-fast/small on failure

1595434266
Nypsie
^ good point

1595434303
ask6155
oh ok

1595434960
adamkowalski
How do you call external processes from zig? For example if you want to call "ls" and then see if the return code was 0

1595435048
Nypsie
Maybe this is what you're looking for?

1595435830
ifreund
alternatively if you need more control you can fork, execve, and waitpid directly

1595436576
adamkowalski
Awesome, thanks!

1595439066
ronsor
hello, might anyone have any advice on exposing an allocator to a C program (i.e. implementing malloc/realloc/free using an instance of *std.mem.Allocator)?

1595439114
fengb
You’ll need to export C compatible functions

1595439142
ronsor
I've already done that

1595439276
fengb
Would it be using malloc/free? If so you should be able to link in your allocator via LD_PRELOAD

1595439293
ronsor
oh no I'm running on UEFI

1595439302
ronsor
I have created a FixedBufferAllocator

1595439445
ronsor
then I ran in to an issue, because it seems you need the original slice to use realloc, not just the pointer

1595439474
fengb
Ah yeah that’s a general problem with Zig->C allocators

1595439500
ronsor
so I tried making a struct that contains a single ?[]u8, and then putting it at the beginning of the allocated slice

1595439508
ronsor
then I add the @sizeOf() that struct

1595439523
fengb
Hmm

1595439556
ronsor
except it looks awful and I'm sure there's a better way to do it

1595439568
fengb
In general, you need an allocator implementation that's C compatible to use realloc/free

1595439593
ronsor
malloc() appears to work fine for a while, but the first time realloc() is called, I get #6 Invalid Opcode

1595439598
fengb
But thinking about it, it might be possible to have a wrapper that converts any allocator to be C compatible

1595439650
ronsor
Right now, the solution I've tried doesn't seem to work

1595439678
ronsor
using a different malloc() implementation with the C code (specifically the wasm3 interpreter with it's owned fixed heap allocator) works fine

1595439709
fengb
Yeah, Zig allocators aren't fully designed for C compatibility in mind

1595439736
ronsor
I'm curious as to why I'm getting "invalid opcode" specifically, instead of another exception

1595439805
ronsor
allocation always succeeds, but that happens when accessing the allocated memory

1595439825
fengb
Hmm that doesn't make sense

1595439868
andrewrk
ronsor, if your allocator implementation does not read the length of the freed slice, you can pass the Allocator interface fake lengths

1595439911
fengb
I think I can write a generic C compatibility allocator. But not right now since I’m at work >_>

1595439915
andrewrk
the lengths are part of the interface, but it's allocator-implementation-defined the semantics beyond that

1595439925
fengb
andrewrk: would that be useful in stdlib?

1595439937
andrewrk
what exactly?

1595439970
fengb
A wrapper allocator that can be compatible with C realloc/free

1595439993
fengb
Be able to wrap any allocator

1595440459
ronsor
andrewrk: so far, I've managed to store the original slice and use that for free

1595440466
ronsor
it appears to work

1595440553
andrewrk
fengb, I'm not so sure. I think in this case one would want to avoid the unnecessary store/offsets and just pass 1 for the length every time

1595440590
andrewrk
oh, I see your point - if you want to use the normal zig allocators

1595440592
fengb
But that wouldn’t allow most allocators to work

1595440595
fengb
Yeah

1595440611
andrewrk
yeah I could see that being useful

1595440790
Nypsie
andrewrk: Could we have `Inst.Tag.fromOp`, similar to `Inst.Tag.fromCmpOp` that is used in cmpNumeric()? Would look cleaner than having switch statements for addBinOp(). Or perhaps you have a better way to get the IR tag from a Zir tag?

1595440881
andrewrk
we're gonna switch on the op anyway - I think it's cleaner to list them out in the main switch than to have a separate branch for it

1595440901
andrewrk
it helps to feel cleaner if you think from the perspective, "what is the computer going to do?"

1595440950
Nypsie
Ah, so you'd expect a function for each operator, rather than a more generic approach where the logic is shared?

1595440965
andrewrk
did I not push the commit yet where the logic is shared?

1595440978
Nypsie
You did, but perhaps I misunderstood it

1595440990
andrewrk


1595440996
andrewrk
is this what we're talking about?

1595441048
Nypsie
Talking about this part:

1595441086
Nypsie
Here each branch has its own implementation, but the logic is very similar between the 2.

1595441114
andrewrk
ah gotcha. I'm expecting that to change to analyzeArithmetic. add, sub, and others all have the same IR type: BinOp

1595441141
andrewrk
castTag(.add)  and castTag(.sub) both will cast the type to BinOp

1595441160
andrewrk
does that make sense?

1595441164
Nypsie
Great, that what I've been doing so far :)

1595441169
andrewrk
:)

1595441216
andrewrk
if I understand correctly this is called "Data-Oriented Programming" where we start with the memory layouts of what will be in the heap, and then work the logic around that

1595441285
FireFox317
andrewrk, will you be streaming on self-hosted/stage2 development anytime soon? :D

1595441302
andrewrk
FireFox317, good point. I actually was thinking about streaming about the process to upgrade from llvm 10 to 11

1595441309
andrewrk
self-hosted would be another good candidate though

1595441330
Nypsie
However, if it requires runtime valuation, we use "addBinOp" to add the IR instruction, but this requires Inst.Tag, which is either .add or .sub in this case, hence requiring a switch inside analyzeArithmetic to set the correct tag. If that makes sense?

1595441331
FireFox317
is this coming up soon again? the switch from llvm 10 to 11?

1595441370
andrewrk
Nypsie, that's perfectly fine

1595441403
Nypsie
Oke great, thanks alot!

1595441481
andrewrk
Nypsie, if you want you can even put `.add, .sub, ... => return self.analyzeArithmetic(scope, old_inst.cast(Inst.BinOp).?),

1595441523
andrewrk
FireFox317, yeah, they just cut the release/11.x branch

1595441553
andrewrk
it's probably a month or two until release but the API is now stable-ish

1595441640
FireFox317
Ah okay, im wondering how many ppl like to see this, it is something that only happends in like 6 months or so, so regarding contributions it is not so appealing as self-hosted :P

1595441659
FireFox317
Obviously most people will find it interesting for sure

1595441820
Nypsie
Ah thanks for the tip :)

1595442655
andrewrk
FireFox317, I was more thinking along the lines of if I got hit by a bus, there would at least be a tutorial of the process ;)

1595443770
FireFox317
Ha andrewrk, then it makes sense :P (Hopefully that won't happen lol)

1595443888
andrewrk
std.fs is getting to be quite a powerful, robust, and portable abstraction

1595445158
leeward
Woot, bug found with rr and fixed.

1595448613
danyspin97
using std.json, why root.Object.get("key") isn't optional? (zig-master version)

1595448630
leeward
Helgrind is telling me I have a data race where two threads are accessing the same region and "Locks held: none" but I'm using std.Mutex and not --single-threaded. Is this just Helgrind failing to comprehend zig mutexes? (mutices?)

1595448759
leeward
danyspin97: It looks like it does return an optional.

1595448786
pixelherodev
andrewrk: PT_LOAD is raw data, right?

1595448846
danyspin97
leeward:

1595448872
danyspin97
what am I doing wrong?

1595448922
ifreund
danyspin97: current_type is no longer optional, you've unwrapped it with the if ( ) | |

1595448926
leeward
current_type is not optional; it's what happens if the value is not null.

1595448979
danyspin97
hmm

1595448990
danyspin97
I think I should reread the docs on the if

1595449026
leeward
if (optional) |unwrapped| { use unwrapped because it's not null } else { optional was null }

1595449077
danyspin97
but isn't the return value of get an optional?

1595449112
leeward
It is.

1595449136
danyspin97
so if (root_obj.get("key")) |unwrapped|

1595449139
danyspin97
should be fine

1595449145
danyspin97
shouldn't it?

1595449156
leeward
Yep, and it is.

1595449161
leeward
The error is on line 18

1595449176
leeward
current_type.?

1595449181
leeward
but current_type isn't optional

1595449191
danyspin97
okay now I see

1595449203
danyspin97
though the error reporting is wrong

1595449214
danyspin97
it says lines 17

1595449217
danyspin97
/src/Rules.zig:17:9: error:

1595449220
leeward
Yeah, it's definitely in need of improvement.

1595449235
danyspin97
thanks the explanation

1595449249
leeward
Once self-hosted is usable, work will get done on error messages.

1595449262
danyspin97
nice

1595449312
danyspin97
the language seems fine but I don't see advantages of using build.zig over meson

1595449325
danyspin97
i don't have testing working and I have no idea of how to enable it :/

1595449358
leeward
Testing, like running test blocks?

1595449371
danyspin97
yup

1595449381
danyspin97
I do `zig test file`

1595449428
leeward
Honestly, I don't think build.zig brings a lot to the table. Its stated reason for existing is to reduce dependencies for Zig source; since not everyone has Meson or Make or CMake or autotools already installed.

1595449465
leeward
danyspin97: This might be helpful

1595449470
danyspin97
it has sense for zig source

1595449489
danyspin97
but it might be good for the zig projects, imho

1595449492
danyspin97
thanks for the link!

1595449530
leeward
Though...it doesn't say how to make a test. Here's a sample that does:

1595449628
danyspin97
do I need to create new var for every source I want to test?

1595449714
ifreund
no, you can have e.g. a test_main.zig that includes all the tests

1595449731
leeward


1595449786
leeward
Hmm, I think the other method might not exist in std any more.

1595449817
leeward


1595450148
danyspin97
Doesn't work though

1595450176
leeward
Time to pastebin some code, I think.

1595450243
danyspin97


1595450275
danyspin97
then `zig test`

1595450322
leeward
zig build test

1595450373
danyspin97
Ah, I see

1595450376
danyspin97
thanks!

1595450380
leeward
no problem

1595452206
leeward
From a comment: "Don't look too closely at them as they will rot your brain."

1595453117
blinghound
is there a way I can embed a precalculated array? It takes a bit too long to just calculate at comptime, so I want to calculate it once and just embed into the executable

1595453217
leeward
@embedFile ?

1595453323
leeward


1595453334
blinghound
wow that might be exactly what I'm looking for

1595453344
blinghound
I'll give it a shot, thanks!

1595453961
ifreund
andrewrk: @intCast(foo) is accepted not @intCast(_, foo) right?

1595453992
ifreund
imo the latter leads to duplicated functionality with @as()

1595454084
pixelherodev
How?

1595454089
pixelherodev
@as(_, foo) isn't valid

1595454120
ifreund
no, but @as(u8, @intCast(_, foo)) would be

1595454168
ifreund
i think it's cleaner to just get rid of the type parameter to @intCast() & co. as per the original proposal

1595454220
ifreund
and I disagree that @as() is clunky in your example by the way :P

1595454378
pixelherodev
@as(u8, @intCast(_, foo)) would be identical to @intCast(u8, @intCast(_, foo))

1595454380
pixelherodev
Both would be senseless

1595454403
andrewrk
ifreund, right. original proposal, no amendments

1595454409
pixelherodev
Unrelated, `TODO buf_read_value_bytes enum auto` gah

1595454540
ifreund
nice, it will certainly clean up a good bit of my code

1595454601
pixelherodev
Well I guess I'm never using Zig again! /s

1595454603
pixelherodev
:P

1595454607
ifreund
lol

1595454612
pixelherodev
Stage2 already has basic casting, right?

1595454640
pixelherodev
dumb question :P

1595454644
pixelherodev
I literally have the source open

1595454665
ifreund
pixelherodev: fwiw grepping through my codebase I have yet to find a place where I'd need @as(u8, @intCast(foo))

1595454771
pixelherodev
If ResultType gets added in, I'd probably end up using a metafunction for all casts

1595454778
pixelherodev
Which checks if dest type != given type

1595454814
pixelherodev
`blah = meta.intCast(u8, @ResultType(), val);` <- if type of `blah` changes, this becomes a compile error

1595454842
ifreund
that looks even clunkier :P

1595454850
pixelherodev
for sure

1595454863
pixelherodev
But it also means that changing a type

1595454897
pixelherodev
In most cases, it'd mean changing the first param to the new type; in some, it might mean adjusted logi

1595454899
pixelherodev
logic*

1595457181
blinghound
is there a way to cast the returned []u8 when reading a file into []f32?

1595457204
fengb
std.mem.bytesAsSlice

1595457318
blinghound
that was a whole lot easier than I was expecting

1595457326
blinghound
thanks fengb!

1595457427
fengb
Make sure you properly account for endianness

1595457454
fengb
Or just ignore big endian :P

1595457550
blinghound
will do ;)

1595457590
blinghound
this is temporary so I'm able to use @embedFile to avoid recalculating some big arrays

