1599009986
pixelherodev
I was disidentified all day lol. I didn't even notice.

1599034615
ikskuh
hey pixelherodev

1599035444
pixelherodev
ikskuh: hello

1599035495
ikskuh
i might do a stupid thing :D

1599035502
pixelherodev
Oooh, let's hear it!

1599035512
ikskuh
spu-2 backend for LoLa :D

1599035518
ikskuh
which completly changes the semantics :D

1599035635
pixelherodev
... okay, I get the first part

1599035645
pixelherodev
How does the backend influence semantics?

1599035667
ikskuh
how do you implement a garbage-collected, memory-automated language to native? :D

1599035694
ikskuh
LoLa allows this: [ "a", "b" ] + [ "c" ] == [ "a", "b", "c" ]

1599035704
ikskuh
this isn't really … viable for the target platform :D

1599035819
pixelherodev
Huh

1599035851
pixelherodev
Maybe implement a GC / runtime that runs the generated native code?

1599035854
ikskuh
but i can do a semantic reduction, remove all types and only allow a single type: "u16"

1599035863
pixelherodev
I joked about writing a kernel-level full-memory GC a while back

1599035870
pixelherodev
For SPU II, that might actually be feasible

1599035875
ikskuh
where 0[x] is memory access :D

1599035883
ikskuh
and x[y] is pointer offsetting

1599035891
pixelherodev
There a channel for this?

1599035909
ikskuh
for what? i have created #lola-lang here :D

1599035913
ikskuh
if you mean this

1599035930
pixelherodev
Either there or #spu-mark-ii is probably better for this

1599035959
ikskuh
yeah

1599035966
ikskuh
if someone wants to follow: join us!

1599043349
ifreund
what's the overhead of using the async with the std event loop in single threaded mode?

1599043383
ifreund
is all the synchronization code disabled/optimized away?

1599044738
cren
hey all!

1599044754
cren
If I have a struct that represents a connection to a server...

1599044759
cren
via a socket

1599044763
cren
what should be in the struct?

1599044769
cren
Do I even need the struct?

1599044787
cren
I suppose I could put the hostname of the server and things

1599044818
ifreund
you should only put what you need

1599044831
ifreund
which may be nothing more than the fd of the socket

1599044925
cren
ifreund: yeah that seems right, thanks

1599045506
pixelherodev
ifreund: yes

1599045520
pixelherodev
with --single-threaded, there should be zero overhead to async IIRC

1599045830
ifreund
nice

1599071465
KoljaKube
If I have the following in C: `typedef struct foo { union { int a, int b }; } foo;`, does that basically mean that instances of foo have members a and b sharing the same space?

1599071482
KoljaKube
Haven't encountered unnamed unions in this fashion before

1599071633
fengb
Yep

1599071655
fengb
We have to name every field, so this style doesn't work in Zig

1599071670
KoljaKube
That would have been my next question, thanks :D

1599073684
Barabas
Hello

1599073694
Barabas
Can someone help me with a networking question I have.

1599073825
Barabas
I basically did on socket a: bind, listen. Then on socket b: connect. And then on socket a: accept. (all in one simple test app) But it hangs forever on the accept. Even if I connect from a console to the port, it never returns from the accept call. (I'm on windows.)

1599074635
DarkUranium
alexnask[m], this might be of interest to you for Zig.

1599074653
DarkUranium
I just talked to the guy who implemented the lexer & parser for TypeScript and Roslyn (the compilers in that video I mentioned!).

1599074667
DarkUranium
We're not done yet, but I got a

1599074987
companion_cube
when it comes to error-recovering parsers?

1599075070
DarkUranium
Haven't gotten around to that yet.

1599075089
DarkUranium
The conversation was about partial parsing, for situations where you have a language server, and want fast parses.

1599075096
DarkUranium
E.g. if user inserts "foo" at position 500.

1599075876
companion_cube
I hope it's the right talk:

1599075890
companion_cube
basically, sorbet (a typechecker for sorbet) ignores this stuff

1599075896
companion_cube
and just focuses on being super fast

1599075923
companion_cube
rha

1599075942
companion_cube


1599075972
companion_cube
anyway, if your parser and typechecker are slow, you need complicated incremental techniques; if it's really fast, maybe you can just reparse the whole buffer

1599076266
DarkUranium
For LSP stuff? I think reparsing gets too expensive

1599076375
fengb
Barabas: I think stdlib's TCP is buggy in Windows. zig-network was created to work better in Windows:

1599076517
companion_cube
DarkUranium: well, how fast is zig's current parser?

1599076537
DarkUranium
No clue.

1599076551
DarkUranium
I'm mostly interested in this for my own lang, but I know alexnask[m] would like to know about my findings.

1599076556
companion_cube
if you write a parser in typescript, sure, it'll be slow

1599076566
DarkUranium
Roslyn's is written in C#.

1599076572
DarkUranium
(Roslyn is the C# compiler)

1599076577
companion_cube
if you write it in C++ or Zig… it should be a few ms on a normal buffer at most hopefully :p

1599076581
DarkUranium
It needs to handle files up to 5MB or so.

1599076588
DarkUranium
135k LOC. They have one like that in the codebase.

1599076604
DarkUranium
No computer can handle 5MB in a few ms.

1599076611
DarkUranium
Consider that reparse also needs to do a ton of heap allocs.

1599076618
companion_cube
one file of 5MB ?!

1599076622
DarkUranium
Yup.

1599076631
companion_cube
heap alloc -> use an arena

1599076639
DarkUranium


1599076643
DarkUranium
Still, 5MB!

1599076658
companion_cube
wtf

1599076669
fengb
How big is ir.cpp

1599076697
DarkUranium
It's not that uncommon to see 50k LOC for bigger projects either (also amalgamations, but those might be relatively worthless or even impossible depending on language)

1599076708
fengb
It's 3.5x ir.cpp D:

1599076712
DarkUranium
That's less than 135k, but still.

1599076742
DarkUranium
My point is: This needs to handle a random insertion at position `3` gracefully. Without a full re-lex or reparse (or re-semantic-analysis)

1599076745
companion_cube
question is, do you expect to open these in an editor and code on them :D

1599076755
companion_cube
a full re-lex should still be super, super fast

1599076777
companion_cube
checking is more expensive for sure

1599076789
companion_cube
(lexing is linear and normally very machine friendly)

1599076809
DarkUranium
companion_cube, that file was written manually.

1599076810
DarkUranium
I asked.

1599076819
DarkUranium
Which means that: yes, people have been doing exactly that.

1599076853
companion_cube
:DDDD over time, I guess

1599076865
companion_cube
that's still kind of terrible, but well

1599076924
DarkUranium
I've seen 50k LOC C files that were not amalgamations (sorry, I forget what software it was)

1599077034
companion_cube
that's frightening, but indeed you need incrementality there

1599077039
Barabas
fengb windows networking doesn't work in zig std basically. I was trying to fix it along the way, but eh... apparently I'm doing something wrong. I managed to rewrite my test with more plain api calls and it works, so I guess I messed something up somewhere.

1599077050
DarkUranium
companion_cube, anyways, you also need incrementality in order to inform semantic analysis.

1599077062
DarkUranium
You can't just do all of it on an entire project (possibly millions of LOC)

1599077083
DarkUranium
But you can't do that incrementally if you don't know what syntax tree nodes are unchanged!

1599077115
Barabas
Just emit a warning: "File too large to parse, please refactor your code" xD

1599077117
companion_cube
DarkUranium: you could have a non incremental parser and an incremental checker

1599077127
companion_cube
it's not incompatible

1599077147
DarkUranium
companion_cube, but how will you know what parsed nodes are unchanged?

1599077153
DarkUranium
(so that you know what you

1599077155
DarkUranium
But to some extent, sure.

1599077424
companion_cube
I'd say some form of hashconsing

1599077485
companion_cube
(in any case, you want to reuse information from the previous version of the buffer; you can do that by either reparsing only part of the input, or by mapping what you parsed and didn't change to the previous version)

1599077499
companion_cube
(just like, say, git does)

1599077499
DarkUranium
They're the same thing, no?

1599077518
DarkUranium
I mean, if you reparse only a part, then obviously you have to somehow map *the rest*.

1599077522
companion_cube
one involves complicated parsing techinques, the other involves a hashmap :D

1599077570
pixelherodev
I think that this discussion is missing the point to a large degree

1599077594
companion_cube
possibly :D

1599077595
pixelherodev
It doesn't really matter if incremental lexing / parsing is

1599077606
pixelherodev
The real question is, is there any reason

1599077621
pixelherodev
Even on small files, a minor speedup is still very nice

1599077630
Barabas
It's complicated?

1599077636
pixelherodev
I was about to say that, yeah :P

1599077639
DarkUranium
^ that's a reason. Not reason enough IMO, but

1599077644
pixelherodev
The

1599077655
DarkUranium
The core issue is that you have 100ms to do lexing, parsing (of the whole file, because you can't really avoid that there),

1599077658
pixelherodev
Complexity

1599077660
DarkUranium


1599077665
Barabas
Could be a very good reason. The more complicated it is, the more bugs it will have and such.

1599077671
pixelherodev
The complexity of incremental lexing isn't that bad

1599077677
pixelherodev
Barabas: of course!

1599077680
pixelherodev
But this

1599077682
fengb
Some of us have been using zig-network in Windows. I dont' have a Windows box so I don't know for sure

1599077685
pixelherodev
It's more compmlex than

1599077695
pixelherodev
But it's still pretty simple

1599077717
Barabas
fengb yeah I could take a look at that. For now I'm just playing around :)

1599077778
companion_cube
DarkUranium: don't forget the LSP response in the 100ms :D

1599077787
DarkUranium
companion_cube, ah, true.

1599077797
companion_cube
including some jsonrpc, because… ugh

1599077801
DarkUranium
Yeah :|

1599077806
companion_cube
(why the fuck did they pick jsonrpc)

1599077811
DarkUranium
That's why Coyote won't have LSP support ... but will have an API that does the same.

1599077812
Barabas
I think I actually hit a compiler bug... but not 100% sure yet.

1599077813
companion_cube
(to transport *buffers*)

1599077824
DarkUranium
LSP support will exist, but as a separate/external project.

1599077827
DarkUranium
(official, but external)

1599077857
DarkUranium
And that'll be a wrapper. Basically a jsonrpc host that forwards calls, etc.

1599077866
DarkUranium
(and deals with LSP-related handshake stuff, like its weird way of exiting)

1599077883
DarkUranium
Barabas, the reason why I'm doing this this early is two-fold:

1599077899
pixelherodev
Hey,

1599077902
DarkUranium
lol

1599077906
DarkUranium
1) It's

1599077912
pixelherodev
That's why it's crashing now! ;)

1599077914
DarkUranium
2) If it

1599077915
DarkUranium
lol

1599077919
pixelherodev
> Assertion failed: isptr (src/vm/vm.c: coy_op_handle_call_: 285)

1599077923
pixelherodev
:P

1599077938
pixelherodev
I'm going to just, uh

1599077941
pixelherodev
Ignore this for now :P

1599077946
pixelherodev
And focus on fixing the architecture first

1599077952
pixelherodev
I'll probably toss out most of the existing codegen anyways

1599077998
DarkUranium
pixelherodev, FWIW, I have a very good idea now w.r.t. how to deal with this up to parsing.

1599078007
pixelherodev
#coyote  ;)

1599078025
Barabas
OK

1599078038
Barabas
I actually hit a developer bug (:

1599078060
Barabas
Just my debugger was fooling my by pointing me at accept.

1599079922
KoljaKube
I feel like I just forgot, but what's a C-compatible *void again?

1599079926
tdeo
*c_void

1599079946
tdeo
void is a zero-sized type, c_void is an unknown sized type

1599079947
KoljaKube
Thanks

1599079994
KoljaKube
I was trying [*c]c_void

1599081898
KoljaKube
Mh, apparently the compiler does not like `[_]*c_void`s. Guess that's a good point to stop and continue tomorrow

1599082129
ikskuh
KoljaKube: note that zig does pointer coercion only on the top level

1599082140
ikskuh
so if you actually need a c"void**"

1599082149
ikskuh
you need a zig `*[*c]c_void` type

1599082159
ikskuh
which is an array of [_][*c]c_void

1599082841
ikskuh
bug of the day:

1599083009
ikskuh


1599083261
Barabas
lol

1599085378
klltkr
Anyone able to just restart this build for me, rather than pushing another commit:

1599085471
Nypsie[m]
A rebase will run the CI again as well

1599085487
Nypsie[m]
Or if there's nothing to rebase, closing and opening the PR will do it too

1599085921
klltkr
Closing and reopening isn't working. I'm going to use this as a sign that my PR needs improvement :)

1599086849
klltkr
The sign was correct.

1599089898
klltkr
A watched build never compiles.

