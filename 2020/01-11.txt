1578702177
Snektron
Considering whether i should generate Zig code directly or through std.zig.ast

1578702450
BaroqueLarouche
First pull request!

1578703601
mikdusan
my brain must be fried. Is 4137 just renaming variables?

1578703760
mq32
mikdusan, looks like there is one addition

1578703817
BaroqueLarouche
No, when looking for executable in your $PATH on Windows, it was using $CWD + the command you passed to spawnWindow

1578703868
BaroqueLarouche


1578703908
mikdusan
thanks I missed it

1578705902
fengb


1578706372
daurnimator
fengb: orange on orange?

1578706377
daurnimator
I see orange on blue :P

1578706395
daurnimator
But also: "why is it blue" is a great question.

1578706426
daurnimator
The answer to both of them may just be: the background is transparent. Seems like different browsers render it differently?

1578706532
fengb


1578706549
fengb
Maybe we should fix the background image for the reddit upload

1578706618
daurnimator
normal reddit for me:

1578706643
daurnimator
dark mode:

1578732772
bgiannan


1578733693
daurnimator
oooo, would be cool to have creationix on board :)

1578738166
mq32
Semantic Analysis [971/982] /home/felix/projects/softrenderlib/src/main.zig:116:31: error: expected type 'enum:69:45', found 'enum:69:45'

1578738167
mq32
huh :D

1578742674
wilsonk
mq32: I had an error like that a while back...did you figure it out?

1578742691
mq32
i know how to provocate it

1578742701
mq32
it's about implicitly defined enums in function parameters

1578742706
wilsonk
I can't remember what it was for me...but I think my case was fixed

1578742726
wilsonk
file an issue? Or is there an existing one?

1578742823
mq32


1578743145
mq32
mikdusan: you ninja'd me!

1578743147
mikdusan
hahah

1578743149
mikdusan
i just saw that

1578743168
mikdusan
also `comptime foo(.a);`

1578743288
mq32
btw, some late-night hack with zig:

1578743289
mq32


1578743292
mq32
software-rasterization

1578747163
mq32
huh

1578747167
mq32
i think i found a kinda weird bug

1578747270
mq32
if you write some runtime code in @bitCast, it will fail to compile because zig tries to enforce comptime eval

1578747625
mq32


1578749520
maerwald


1578749706
mq32
looks like nobody tests the http module D

1578750018
traviss
there are tests for http/headers but i don't see std/http imported anywhere.

1578750175
maerwald
wanted to use zig for a relatively simple cli program that does some file operations, downloading and extracting tarballs, as well as parsing a few config files

1578750182
maerwald
but no http module :o

1578750473
scientes
maerwald, cli is harder as there is no translation facilities in zig ATM

1578750491
scientes
or even a gnu-style argument parsing facility

1578754917
m4ho
Hi, I am starting with zig just now and I started with the documentation. I installed zig-0.5.0 via pacman (Distro is majaro) and compiling the hello world example throws multiple errors, the following being the second:

1578755127
Snektron
m4ho, std.io.getStdOut returns a so-called "error union"

1578755141
Snektron
so its basically an error or another type

1578755148
Snektron
you have to unwrap the error with the try keyword

1578755234
Snektron
in a single line you can write `const stdout = &(try std.io.getStdOut().outStream().stream;`

1578755244
Snektron
Although you might be creating a dangling reference

1578755258
Snektron
also i forgot a closing parenthesis after getStdOut()

1578755292
mikdusan
fyi, zig master both `getStdOut()` and `getStdErr()` no longer can fail, so no error union

1578755599
m4ho
mikdusan and Snektron: Thank you, I think I got it

1578755698
m4ho
And apparantly I should not start learning the language with something else than the master

1578758141
mq32
grah. and i ran against into the problem with packed structs :(

1578758294
mq32
via, i saw that you tried to do the same approach as me on fixing the packed structs problem

1578758465
shakesoda
#1717 pushed back to 0.7.0 -> :(

1578758547
mq32
sad, but reasonable. the 0.6 release is a under the term "stability/safety release"

1578758806
shakesoda
makes sense

1578758822
shakesoda
i just really want that particular change

1578758845
mq32
hehe, i want it too, but what i really really want is that packed structs work with 3-byte-sized types :D

1578758861
mq32
i have now 4 projects that semiish block on this

1578758876
mq32
for the current project i could trivially work around it, but it's not that easy in other projects

1578758966
shakesoda
as in you can't define an i24/u24 that packs correctly?

1578758975
mq32
yep :D

1578759014
shakesoda
frustrating!

1578759061
mq32
just spawn more projects!

1578759063
scientes
shakesoda, just define it with methods

1578759076
scientes
it isn't that hard

1578759077
shakesoda
?

1578759141
scientes
const packed_u24 = struct { data: u24, fn get(n: usize) u24 {...}}...

1578759168
scientes
uggh, that isn't right

1578759171
scientes
but anyways, it can be done

1578759183
scientes
more like array_of_u24 = ...

1578759192
scientes
and you generate the struct with a function

1578759199
scientes
it is more advanced zig, but it can be done

1578759201
mq32
scientes: [2]u24 is 8 byte large, not 6

1578759203
mq32
that's the problem ;)

1578759215
scientes
yeah but you can do it

1578759229
mq32
and as soon as this gets too complicated, it isn't worth the time to write horribly maintainable code just "to get it work"

1578759233
mq32
at least that's my current strategy

1578759264
scientes
mq32, just use [6]u8

1578759276
scientes
and then you also  have to manage endianness

1578759277
mq32
nope, that is also 8 byte large :D

1578759282
scientes
but it really isn't that bad

1578759284
scientes
no it isn't

1578759331
mq32
it is.

1578759332
mq32


1578759346
mq32
trust me on this topic, i've already tried to fix the compiler in this regard

1578759360
scientes
WTF

1578759362
scientes
that makes no sense

1578759365
scientes
u8 is align 1

1578759376
mq32
yes, but the array isn't ;)

1578759379
scientes
so it should be size 6

1578759403
mq32
@sizeOf([6]u8) == 6

1578759412
mq32
but not in a packed struct, because the compiler messes up alignments

1578759414
shakesoda
can you flip this inside out and cast parts of a byte array to your u24 type as a workaround

1578759418
scientes
that doesn't make any sense still

1578759429
scientes
the array should only be the align of the most aligned member

1578759440
scientes
looks like a bug

1578759446
mq32
that's what i'm talking about!

1578759495
mq32
and the problem get's even more complex as soo as you have something like arrays of packed structs with non-power-of-two size

1578759525
mikdusan
arrays don't pack

1578759552
mq32
yep, that's another "problem" right now, because you cannot model some stuff with that

1578759564
mq32
and use funky manual casting all the way around

1578759566
scientes


1578759569
scientes
yeah that is a bug

1578759574
scientes
^^^^^^ in C

1578759672
scientes
mq32, no it isn't a bug look

1578759691
scientes
that said, I really know nothing about "packed"

1578759698
mq32
it is, for packed structs

1578759703
scientes
only extern and "extern packed" (which doesn't seem to be working right now)

1578759706
mq32
packed structs are defined as having

1578759722
scientes
yeah but there is also werid bit packing stuff

1578759733
scientes
and it looks underspecified so i'd just avoid it

1578759738
scientes
as we are now finding

1578759750
mq32
yeah but i need that bit packing stuff ;)

1578759757
scientes
but "extern packed" (which is what I always expect "packed" to be) doesn't seem to be working

1578759762
scientes
as C also has a packed mode

1578759762
mq32
and i cannot work around that other by writing a horrible mess of bit shifts

1578759766
scientes
which is a ABI

1578759776
mq32
C packed != Zig packed

1578759778
scientes
mq32, just use extern

1578759792
scientes
mq32, yeah but zig should also have C's packed

1578759793
mq32
and then do bit shifts?

1578759797
scientes
its another abi to support

1578759812
mq32
well, that's the point: i don't want to work around compiler bugs ;)

1578759819
mq32
just for the sake of "getting something" done

1578759820
scientes
mq32, you have to manually handle endianness

1578759822
scientes
but otherwise

1578759840
mq32
my point is: it isn't helpful to ignore compiler bugs and work around them

1578759852
scientes
well zig is kinda like this these days

1578759859
mq32
but i've seen that via is trying to fix the same topic right now

1578759872
scientes
and I also got frustrated when patches I submitted to fix "TODO" and "FIXME" were fussied over

1578759886
mq32
the point is: i can just put any project that depends on new/buggy compiler features on hold

1578759893
scientes
when the compiler just quits over valid code, cause no-one has used it

1578759899
mq32
as nothing of it is relevat anyways except for testing out the limits of the language and the compiler

1578759923
scientes
such as using the error set merging features

1578759934
mq32
i have no benefit from doing a horrible amount of work just to reverse it two months later

1578760125
SyrupThinker
Well except for getting comfortable writing boilerplate

1578760159
SyrupThinker
I for one am writing all these bitshifts D:

1578760161
mq32
SyrupThinker: that's what i want to prevent in the first plaec :D

1578760172
mq32
i have made so many mistakes with those darn bitshifts

1578760323
mq32
this is just badly readable:

1578760444
SyrupThinker
I solved it for myself like this:

1578760462
SyrupThinker
Luckily some structures share layout :)

1578760527
scientes
mq32, just read a *u32 align(1), mask the extra byte, do an endianness flip

1578760540
scientes
however, llvm will now fix those bit shifts up to the above

1578760549
scientes
i believe

1578760555
mq32
scientes, my zig code for that looks like this:

1578762116
TheLemonMan
mq32, have you tried using the new .Interrupt calling convention?

1578762159
mq32
TheLemonMan, nope, not yet

1578762237
TheLemonMan
you should be able to get rid of the common_isr_handler function with that

1578762336
scientes
where is the docs for that

1578762343
scientes
there is nothing here

1578762368
TheLemonMan
the documentation is a bit sparse, there's

1578762449
TheLemonMan
and it also works on AVR :D

1578762466
mq32
TheLemonMan, i don't think i can get rid of my common_isr_handler ;)

1578762481
mq32
it does more than just building a calling convention

1578762494
mq32
it is required for multithreading for example

1578762598
TheLemonMan
who needs multithreading? no one! I tell you

1578762682
mq32
heh

1578762692
mq32
i also use it for context switches between different modes in my console :D

1578762708
scientes
why do you have to be so macho to do x86?

1578762714
scientes
why no do something saner, like ARM

1578762751
TheLemonMan
you're saving&restoring the registers clobbered by the handler, aren't you?

1578762782
mq32
TheLemonMan: i do more ;)

1578762797
mq32
scientes: i do x86, AVR, ARM, SPU Mk2 (#macho)

1578762850
scientes
das Offset

1578762852
mq32
yeah because i am a lazy and i just neer changed them after copying them :D

1578762858
scientes
are you sure it isn't der or die?

1578762864
mq32
TheLemonMan:

1578762865
mq32
\\ push %%esp

1578762865
mq32
\\ call handle_interrupt

1578762865
mq32
\\ mov %%eax, %%esp

1578762882
mq32
that allows changing the whole stack (thus: execution context) on return of the interrupt handler

1578762887
TheLemonMan
oh

1578762893
TheLemonMan
that's nasty heh

1578762907
mq32
also the register-saving allows modifying all registers via a struct pointer :)

1578762916
scientes
do they just roll a dice?

1578762930
mq32


1578762960
mq32
scientes: it's kinda a natural thing

1578762971
mq32
but it's also regional which gender words do have

1578762983
mq32
germany has two genders for "Butter"

1578763011
scientes
mq32, did it need surgery for that?

1578763020
mq32
some people use "die Butter", some others use "der Butter"

1578763043
TheLemonMan
it's a smart way to fetch the state of the registers, I must admit

1578763047
mq32
officially it's "die Butter", but we southern germans don't really care about what "Der Duden" says

1578763079
scientes
are there any dialects that just use the same gender for every noun?

1578763093
mq32
no

1578763097
mq32
at least not that i know f

1578763098
mq32
*of

1578763131
mq32
german also has a "generic masculinum" which means that there are male words which do not actually refer to a gender

1578763149
mq32
like "Bäcker" which is Baker

1578763171
scientes
coming from English genders are wacky, and then differnt languages have different genders

1578763182
mq32
i can say "Sie ist Bäcker" (she is a baker)

1578763187
scientes
but aparently the same language has different genders

1578763229
mq32
fun thing is that immigrants learning german is that they mess up a lot of those word genders

1578763260
mq32
turkish has afaik only one gender for words, and russian has

1578763301
scientes
georgian also doesn't have gender

1578763314
scientes
Russian is very difficult indeed

1578763465
mq32
i find natural languages fascinating

1578766328
via
mq32: yes, and the problem it currently has is fp load/stores, since it looks like the llvm types become single i8s

1578766362
via
i'm concerned what i see as two unrelated problems are getting put together -- ability to do individual field alignment, and having the right total size

1578766382
via
i'll admit i don't actually see the use case for individual field alignment control in a packed struct, and i think that massively complicates hte problem

1578766397
via
unfortunately i can't really take a look at it, i've got company for the weekend

1578767324
mq32
via: take your time and enjoy the weekend!

1578767331
mq32
i made a PCX/8bpp loader for zig :)

1578767332
mq32


1578767839
mq32
funky zig logo:

1578767994
frmdstryr
Does anyone use gdb with zig? How can I print a var from a non-global module?

1578768144
rageoholic
Hey I've got a question

1578768191
rageoholic
How can I tell zig's build system I need to put a dll (sdl in this case) and an executable in a distribution directory?

1578768277
TheLemonMan
frmdstryr, hm? what do you mean with non-global?

1578768292
frmdstryr
Not the root

1578768317
frmdstryr
eg "p osc.HSI_VALUE"

1578768362
frmdstryr
osc.zig is it's own file imported into main as const osc = @import("osc.zig")

1578768397
frmdstryr
even in debug mode pretty much everything seems to just say "optimized out"

1578768446
mq32
rageoholic: use Builder.addSystemCommand and depend on that step

1578769028
frmdstryr
also for whatever it's worth i modified zig to compile with -Og and it doesn't seem to make any difference

1578769148
mq32
frmdstryr: note that zig only emits what your code actually touches

1578769168
mq32
and pretty much all constants get agressivly inlined

1578769224
rageoholic
Please help out. I really want to use SDL but I have no idea how to set it up with zig

1578769226
frmdstryr
Yeah it seems to just inline every register access

1578769263
frmdstryr
in c i can just read a register with p RCC->CR, in zig i have to print the actual address

1578769287
frmdstryr
it'd be helpful if there'd be some way to turn this off for debugging

1578769307
TheLemonMan
uh that's interesting, I wonder if it's LLVM being too aggressive or we don't emit enough debug infos

1578769425
mq32
rageoholic:

1578769431
rageoholic
ah ok

1578769432
mq32
use this, ask me questions, make improvements )

1578769447
mq32
but it also contains code examples on how to use the raw C api

1578769490
mq32
what's the state of the art allocator to be used in tests?

1578769537
rageoholic
Doesn't work on windows

1578769564
mq32
hm, if you figure it out how to do SDL on windows, please make a pull request

1578769571
mq32
i don't have a windows machine on my hands anymore

1578769577
rageoholic
In the meantime GLFW I guess

1578769578
rageoholic
Shame

1578769584
rageoholic
Was hoping to use SDL instead

1578769592
mq32
what's your problem with SDL?

1578769611
mq32
use a prebuilt version from the website, add include path and the library and it

1578769623
rageoholic
How do I add the library?

1578769642
rageoholic
I tell it to link it but the exe can't find the dll

1578769669
mq32
yeah, then you have to copy the SDL.dll next to your executable

1578769675
mq32
same for glfw ;)

1578769679
TheLemonMan
frmdstryr, wrt your first problem maybe you're hitting

1578769683
rageoholic
Oh I statically link glfw

1578769712
rageoholic
And is there a way to copy it next to the exe with zig build?

1578769719
rageoholic
I want to automate this as much as possible

1578769730
rageoholic
Also is there a way to set the cwd of the run step?

1578769803
mq32
yes, yes

1578769809
mq32
use addSystemCommand in zig.build

1578769820
mq32
and read the source code of the build.zig stuff

1578769827
mq32
it really helps on knowing what it does

1578769834
rageoholic
Alright

1578769942
mikdusan
see `addInstallFile()` and a few of its specializations

1578769999
mq32
mikdusan: oh neat that this exists!

1578770007
mq32
we

1578770031
mikdusan
*everyone steps back as mq32 /steps/ forward :)

1578770128
mikdusan
my fav command for that: `cat lib/std/build.zig | grep 'pub fn' | sort`

1578770488
frmdstryr
TheLemonMan: Yes that looks like it

1578770578
frmdstryr
Also it's probably more of a issue of gdb not supporting zig than with zig itself

1578772916
schme245
is there a way to detect what vector extensions are present when building a zig library?

1578773389
Astronothing
Hello, is there a way to initialize an array from a slice? I'm trying to do this:

1578774612
schme245
Astronothing: array have comptime known length, slices have runtime known length

1578774622
schme245
so there is no way to go from slice to array

1578774631
schme245
(I believe)

1578774807
mq32
you could dirtily pointer-cast around

1578774816
mq32
but i would make a helper function

1578774847
schme245
out of curiosity, how would that pointer cast look?

1578774848
mq32
fn sliceToArray(comptime T : type, input: []const T, comptime size: usize) ![size]T

1578774866
mq32
@ptrCast(*[N]T, &slice[x]).*

1578774932
schme245
neat

1578774947
mq32
i would go for that function

1578774961
schme245
is there anything ptrCast can't do? 😁

1578775039
mq32
yeah, change alignment

1578775047
Astronothing
thank you!

1578777387
andrewrk
Astronothing, std.mem.copy

1578777412
andrewrk
I'm not sure why @ptrCast is being suggested

1578777463
Astronothing
yup, I'm struggling a bit with mem.copy at the moment

1578777496
andrewrk
after

1578777540
andrewrk
oh now I understand mq32's suggestion, which works around this issue not being implemented yet

1578777585
mq32
andrewrk, that syntax for slice-dereference is neat!

1578777879
traviss
schme245, i got 3 benchmarksgame solutions put up that are on par or slightly faster than the fastest c solutions.

1578777917
schme245
traviss: that's awesome! :D

1578777927
traviss
believe there is room to improve the spectralnorm solution. wip

1578777941
schme245
we should try to get Zig into the official benchmarks game somehow

1578777952
schme245
good exposure

1578778077
traviss
yeah. i'm not sure how to get new solutions accepted. i was reading and they say they only want solutions for a given lang if its missing.

1578778093
traviss
so should be no problem for zig i hope.

1578778158
schme245
I believe opening an issue here is the way to go:

1578778320
traviss
thanks! i'll see what i can do.

1578778370
andrewrk
schme245, tiehuis started working on that:

1578778459
schme245
traviss: please keep me posted! :)

1578779049
traviss
oh cool. thanks andrewrk

1578779628
pixelherodev
`cat lib/std/build.zig | grep 'pub fn' | sort` brilliant!

1578779640
pixelherodev
Can't believe I hadn't thought of that :)

1578780090
mikdusan
andrewrk: if you get a chance push

1578780548
andrewrk
mikdusan, yes will do

1578782088
pixelherodev
Okay, question: `const a = struct { var b: u8 = 38; };` is `b` there a global, or a namespaced member of a? Because after reading through GH Issues I no longer am sure I know :P

1578782224
mq32
it's a global variable in the namespace "a"

1578782244
pixelherodev
Ahh, okay

1578782248
pixelherodev
So `global` meaning storage location?

1578782264
mq32
yeah, pretty much

1578782269
pixelherodev
Gotcha

1578782270
pixelherodev
Thanks!

1578782826
Snektron
andrewrk, would you pick std.zig for source generation or just straight up print a source file?

1578782905
Snektron
also, moreover std.zig, why is as an ast tree returned as a pointer to memory owned by itself instead of as a value type?

1578782932
Snektron
and why are nodes implemented by a knock-off discriminated union instead of union(enum)

1578786233
mq32
do we have some kind of lock-free queue/channel in zig.std already?

