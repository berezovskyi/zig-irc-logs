1590451202
pixelherodev
... what do you have against branches in shell?

1590451261
pixelherodev
The biggest reason I didn't Zig it was lack of networking

1590451268
pixelherodev
But now that I think about it you could just ChildProcess it

1590452444
andrewrk
yeah, anything you can do in shell you can do in zig with a handy dandy exec() function

1590452540
pixelherodev
Hmm

1590452541
pixelherodev
Idea

1590452549
pixelherodev
no wait that's a terrible idea

1590457267
fraktor
wilsonk: Thanks!  I'll look up what that means and how to turn it off.

1590459127
satchmo_
If you do an out of bound slice access within a test, 'zig test' catches it. but if you put that access in a normal function and then build in debug, the safety checks provided by zig happen at runtime and basically aborts the program whenever a safety check fails, preventing later misuse

1590459146
satchmo_
Am i understanding zig's safety checks?

1590459256
satchmo_
well i guess tests are like running the program, so safety checks are technically always at runtime?

1590459770
pixelherodev
I think the earlier contribution discussino can be summed up easily: "some people forget that the key word here is *contributing*; to give of yourself for collective advancement

1590459779
pixelherodev
They focus on what

1590460179
satchmo
wait no the zig test case worked cause tests are check compile-time. So safety checks are for runtime

1590460185
satchmo
i think i get it now

1590463756
andrewrk
pixelherodev, #5422 ready to merge?

1590464390
pixelherodev
andrewrk: gimme one sec to check

1590464438
pixelherodev
andrewrk: yes

1590464446
pixelherodev
One of the CIs failed, but I think that was a bug on their end

1590464449
pixelherodev
Because there's no log for it

1590464452
pixelherodev
Also it's Microsoft

1590464455
pixelherodev
so that's my default assumption

1590464483
pixelherodev
"No logs available for this run" Riiiiight

1590469099
pixelherodev
andrewrk: you on? Wanted to discuss the 5422 issues

1590469270
pixelherodev
Ahhh, I see from Discord; alright, later then :)

1590473250
fraktor
Is there a way to defer code that is only run in the absence of an error?  AFAICT `defer` runs regardless of whether an error is returned.

1590473400
leeward
You mean like D's scope(success)?

1590473415
leeward
I don't believe so.

1590473425
lornokto
errdefer?

1590473435
leeward
errdefer runs on error, not on success

1590473457
leeward
Isn't there something in 0.6 that lets you see the error if there is one?

1590473592
lornokto
there is a catch operator that gives you error

1590473604
torque
you defer code to not run in case of an error by putting it before you return

1590473662
torque
if you have multiple places in a function that you return successful values from, that function could probably stand to be rewritten

1590473663
leeward
Yeah, I was thinking of the errdefer payload thing.

1590473699
fraktor
torque: that's fair.  I was thinking of working with database stuff, and having "commit on success, rollback on failure" was the usecase I was thinking of.

1590473712
fraktor
But there should realistically only be one commit in such a case, with a couple of places for a rollback.

1590473758
lornokto
you can also create your own error state if it's needed, like var thereWasError = false; and use it in defer

1590473759
leeward
If you want to roll back each operation separately, you can errdefer after each one, then commit right before the return.

1590473803
leeward
lornokto: That sounds worse though.

1590473824
lornokto
worse than what?

1590473866
leeward
Worse than not putting the thing that would have been in a "scope(success)" block close to where it's relevant.

1590473917
torque
the "successdefer" case has been brought up in here several times, but I've never seen anyone actually post real code that would actually benefit from it

1590473920
leeward
The way I see it, the big advantage of defer and errdefer is that you can have allocation and deallocation right next to each other.

1590473941
lornokto
leeward: if you trying to solve some problem, "not " doing something wont help

1590474010
leeward
lornokto: There are several ways to do what this feature would accomplish. I'm just suggesting that adding state that's twiddled inside a deferred block is not a good one.

1590474044
leeward
For what it's worth, I've never used it in D either.

1590474051
lornokto
leeward: Could you provide alternative solution instead of just forbidding the one I provided?

1590474086
leeward
lornokto: I thought I had; calling the stuff that would be there right before returning would do it.

1590474132
leeward
Refactoring the code to make it unnecessary would also do; something like wrapping the whole thing in a function and calling the relevant code if the function succeeds.

1590474207
leeward
This is a pretty abstract thing, since fraktor didn't give us a concrete example of why it would be necessary. I just have an aversion to messing with state from an outer scope without something explicit like a function parameter or return value.

1590474219
leeward
I wasn't trying to tear you down or anything.

1590474331
lornokto
arent defers and errefers messing with state of same scope, not outer one?

1590474436
leeward
They create scopes. The block inside the defer is its own scope just like a loop's.

1590474466
leeward
I realize this is somewhat arbitrary of me, since they exist solely to fiddle with scope from outside those blocks, but like I said, it's a taste thing.

1590474503
leeward
The idea of adding a boolean variable that can be twiddled inside an errdefer for the benefit of a different defer just smells bad to me.

1590474571
lornokto
is there some usable project in some programming language that "smells good" and has perfect code?

1590474675
leeward
sure

1590474692
leeward
And that's not a reason to argue against good practice.

1590474703
leeward
I mean, we could all just use Perl, couldn't we?

1590474798
leeward
I understand the thing about perfect and good being enemies, but I'm not arguing for perfect; there are alternatives that are good.

1590474822
fraktor
Honestly I think just adding commit at the end is fine for my needs.

1590474852
leeward
It sounds like it.

1590474858
fraktor
If I wanted something more general I would be calling an external function anyway, in which case I could do `if (thingThatCouldFail(conn)) |_| { conn.commit(); } else { conn.rollback(); }`

1590474866
lornokto
I argue against forbidding solution in name of good practice that lead to demoralisation, infinite discussions about common good practices and totaly discourages a programmer to work at all, since actually perfect code is zero code, it has best performance and no space for bug

1590474876
fraktor
Maybe that syntax isn't exactly right, but you get the idea.

1590474981
leeward
fraktor: That is a perfectly valid approach.

1590474994
leeward
lornokto: I think you're arguing against a position nobody holds.

1590486106
afontain_
Hi. I've found a problem I don't know how to solve in zig. I'd like to sort an array using a more complex sort function that takes 3 arguments.

1590486114
afontain_
Let's say it's `fn closer_of(target: i32, a: i32, b: i32) bool { return std.math.abs(a - target) < std.math.abs(b - target); }` to illustrate

1590486161
afontain_
std.sort.sort() takes a sort function that only uses two arguments, so you can't use it directly

1590486234
afontain_
In C++, I'd have used a lambda that would capture the "target" variable, or a struct that provides an operator()

1590486263
afontain_
In C, I'd resort to a GNU extension where you define a function in a function

1590486290
afontain_
(^ you can still get a function pointer from it)

1590486329
afontain_
since in zig there is no function-in-function, structs that provide operator() or lambda functions, I'm a bit stuck

1590486444
afontain_
short of copying std.sort.sort from the stdlib and adapt it, using a global variable (eww, and is that even possible in zig?) or reimplementing sort, I don't really know where to look

1590487048
ikskuh
you can probably misuse a thread_local for this

1590487058
ikskuh
have a local function that uses the thread_local

1590487165
afontain_
hmm, it's true that it seems safer than a regular global variable

1590487190
wilsonk
afontain_:

1590488445
lornokto
cant there be some fn (target: i32, a: i32, b: 32) fn (a: i32, b: i32) that can generate function that'll fit into sort?

1590488474
ikskuh
only comptime

1590488952
ikskuh
is it possible to somehow cast a @Vector(8, u1) to @Vector(8, u8)?

1590490000
pixelherodev
uhhh

1590490007
pixelherodev
I doubt it?

1590490017
pixelherodev
Is there a guaranteed representation of either?

1590490215
ikskuh
for the second one, es

1590490221
ikskuh
it's an array of [8]u8

1590490394
pixelherodev
If there's no defined representation of the former, then I doubt it

1590490404
pixelherodev
I mean

1590490408
pixelherodev
No explicit nop cast

1590490408
ikskuh
hm

1590490417
ikskuh
is there a way to check if a vector comparison returned "all true"?

1590490457
pixelherodev
Haven't used @Vector

1590490471
ikskuh
yeah i'm playing around with it atm

1590490566
pixelherodev
Also I'm barely awake right now

1590490568
pixelherodev
Give me like

1590490571
pixelherodev
Fifteen hours :P

1590490575
pixelherodev
I'm going to crash shortly

1590490631
ikskuh
haha

1590490636
ikskuh
get some sleep, man!

1590490674
greenfork
ye sleep is good

1590490689
ikskuh
more sleep → more code

1590490920
lornokto
good! So there's no runtime function creation

1590491097
lornokto
so you have to write a new simple sort function for that 3-arguments thing instead of hard syntax dancing for reusing existing one with two arguments

1590495403
alehander92
but can't you just return a closure

1590495882
alehander92
ah, no closures, til

1590495885
alehander92
sorry

1590495985
ikskuh
alehander92: closures would be nice, but cannot be trivially created with a non-memory-managed language

1590496331
alehander92
wow

1590496340
alehander92
i never really thought about that.

1590496349
alehander92
btw

1590496360
alehander92
if you can pass allocators everywhere

1590496369
alehander92
has anyone thought of pluggable small gc-s

1590496389
ikskuh
there is afaik an GC for zig already :D

1590496404
alehander92
e.g. running a subsystem with a ref counter etc

1590496424
alehander92
hm, is it purely userland

1590496438
alehander92
like, does zig has the concept of destructors

1590496499
dimenus
alehander92: no

1590496510
dimenus
no constructors or destructors

1590496564
alehander92
so, then a gc is out of the question i guess

1590496589
alehander92
except for something hooking on defer/}

1590496666
dimenus
alehander92: ttps://github.com/yrashk/zig-rcsp

1590496719
alehander92
but as i read in some zig issues + c++/rust : why not an anon struct + func

1590496726
alehander92
no gc required

1590497000
ikskuh
alehander92, dimenus: you can create a GC when having a special reference structure

1590497004
ikskuh
so something like

1590497015
ikskuh
to mark local variables

1590497024
ikskuh
const r = Reference.get(obj);

1590497032
ikskuh
defer r.release();

1590497039
ikskuh
r.item.foo

1590497059
alehander92
i am not sure if one can call that a gc?

1590497068
alehander92
i mean, you can just defer `free` directly

1590497107
alehander92
(of course, a custom `get`/`release` might do much more behind the scenes, but this can be just an allocator )

1590497117
alehander92
custom allocator

1590497207
ikskuh
alehander92: release ain't free!

1590497225
ikskuh
you need refcounting or similar on the stack

1590497235
ikskuh
as you cannot inspect the function call stack with comptime

1590497842
alehander92
but why can't one do that with a custom `free`

1590497867
alehander92
isn't it the same to do internally

1590497886
alehander92
`allocator.new(..stuff)` `allocator.free(stuff)`

1590497952
alehander92
i mean, yea, the whole reference detection stuff wouldnt work nvm

1590498019
ikskuh
alehander92: because free() is usually the operation for "release memory"

1590498023
ikskuh
not "release reference"

1590498028
ikskuh
which is a different operation!

1590498050
alehander92
yeah, you're right, sorry

1590498054
ikskuh
i can have multiple references to the same object

1590498062
ikskuh
and releasing one reference does not mean that the object is to be freed

1590498079
alehander92
so, in this case, short of hooking on `=`

1590498085
alehander92
one needs this workaround indeed

1590498302
alehander92
i can imagine passing `gc: GC` and `r := stuff //calling gc.get / defer release if gc: GC in scope, but this sounds awfully un-zig`

1590498417
ikskuh
nah, why should be do that ? ;)

1590498431
ikskuh
itÄs totally okay to have a get()+release() cycle

1590498542
alehander92
i come from a very different langdesign culture :D

1590498550
ikskuh
hm?

1590498559
ikskuh
non-obvious stuff and a lot of hidden control flow?

1590498693
alehander92
come on, it's an absolutely valid approach

1590498699
ikskuh


1590498703
alehander92
every abstraction hides stuff

1590498714
alehander92
"oh, if hides my goto"

1590498732
ikskuh
with SSA(T) if is actually not a goto :D

1590498738
alehander92
"my goto hides what kind of actual jump instruction this is"

1590498742
ikskuh
but a phi function

1590498768
alehander92
hm, sounds too math-y to be manly

1590498787
ikskuh
the idea behind it is actually really smart

1590498830
alehander92
hm?

1590498909
ikskuh
if(a) { b = c } else { b = d }

1590498916
ikskuh
=> b = phi(a, c, d)

1590498941
ikskuh
the idea is that the phi function selects from a value in your SSA form which values get evaluated

1590498967
ikskuh
it also selects which side effects will be activated

1590505004
lornokto
how to initialize [][]const u8 in code?

1590505029
ifreund
lornokto: initialize with what?

1590505064
lornokto
with anything, like ["some", "thing"]

1590505064
ifreund
const foo: [][]const u8 = undefined;

1590505071
ifreund
if you don't care

1590505083
ifreund
are the values compile time known?

1590505092
lornokto
no

1590505131
ifreund
ok so i'll assume you have a bunch of []const u8's already allocated

1590505159
ifreund
what you need to do is allocate an array of type [_][]const u8 where _ is the number of []const u8s

1590505180
ifreund
then assign the slice of that array to your variable

1590505522
lornokto
Data is already allocated, i just want a bunch of pointers to different parts of text

1590505544
lornokto
and i think it should be possible to have those pointers without additional allocations

1590505618
andrewrk
pixelherodev, hi

1590505700
ifreund
lornokto: if you don't know how many pointers there are, you'll still need to allocate memory to hold the pointers

1590506036
lornokto
ifreund: I could do this with [_][]const u8 {"hello", "world"} into variable and slicing that for getting [][] insted of [N][]

1590506060
ifreund
yes that's right

1590506078
ifreund
there the number of elements is comptime know

1590506087
ifreund
*known

1590506511
lornokto
well I should be able to make something like [max][]const u8 and change inner values later. I only need to remember how to initialize long arrays with same value

1590506530
lornokto
and max is runtime-known

1590506685
ifreund
const my_slice = try allocator.alloc([]const u8, max);

1590506705
ifreund
that will allocate you an array of max items of undefined value

1590506714
lornokto
i have no need for it to be heap-allocated

1590506723
ifreund
you said max is runtime know?

1590506763
ifreund
i mean you can also just stick a [1024][]const u8 on the stack if you know an upper bound

1590506856
lornokto
and cant i replace that 1024 by number that i read from stdin?

1590506914
ifreund
no, because the compiler would not know how much memory to reserve for your functions stack

1590506963
ifreund
any time the amount of memory required by something is runtime known, it must be allocated on the heap

1590506968
lornokto
and does it need to...? Ok, maybe i really need allocator

1590507067
lornokto
I thought functions stack size is defined by operating system and you can do anything you want with it in runtime

1590507081
fengb
The compiler needs to know how much memory is allocated

1590507085
fengb
And we don't support alloca

1590507763
dimenus
ifreund: what are your feelings of using Zig when building River?

1590507779
dimenus
I like having optional pointers, very helpful since Wayland is all async

1590507794
lornokto
can struct have a single comptime field?

1590507798
ifreund
dimenus: yes, optional pointers are huge

1590507828
ifreund
I'm also very happy that zig has @fieldParentPtr as it's pretty much a requirement to use libwayland

1590507879
ifreund
basically it comes down the fact that using the c libraries with Zig has been nearly as low friction as using them with C would be

1590507883
ifreund
and Zig has nicer things

1590507930
ifreund
and all the friction should go away as zig matures (well mostly the translate-c part)

1590507939
dimenus
ifreund: hmm, haven't needed that client side yet, but then again i'm using wayland-scanner -> translate-c

1590507947
dimenus
which isn't bad, but i have a half started zig-wayland-scanner

1590507971
dimenus
we could really tighten up the api since Wayland annotates when nulls are allowed

1590507977
ifreund
hmm? maybe it's more of a server side thing. wl_container_of is the libwayland equivalent

1590508061
ifreund
i'd love a zig wayland implementation for some simpler clients (e.g. my riverctl tool)

1590508095
dimenus
scope right now is a wayland native vnc client with vulkan/gl backends, but we'll see

1590508102
ifreund
don't think i'll ever get crazy enough to try to reimplement wlroots in zig though

1590508103
dimenus
I'm very bad at project focus :(

1590508111
ifreund
heh

1590508116
ifreund
you have a repo up?

1590508159
dimenus
yeah, it's very early on though, haven't implemented any of the spec yet

1590508161
dimenus


1590508231
dimenus
i have a bunch of vulkan code already written for another project I worked on

1590508240
dimenus
that should be fairly straight forward

1590508328
ifreund
nice, i haven't really develed into graphics programming yet myself so I'm very happy to have wlroots do it all for me

1590508350
dimenus
it's a lot more work server side, i don't blame you

1590508393
ifreund
i actually signed up to give a short talk on this on saturday for kristoff's zig stream thing

1590508428
dimenus
nice

1590508873
andrewrk
ifreund, I'm looking forward to that :)

1590508976
fengb
Great minds unite!

1590509180
fengb
kubkon is doing amazing work

1590509550
andrewrk
yeah!

1590509835
ifreund
nice, maybe in 100 years we won't need javascript anymore

1590509858
fengb
JS is dead. Long live JS

1590509906
dimenus
the mainframe is dead, long live the cloud!

1590511385
alehander92
what is the zig stream thing

1590511793
ifreund
alehander92: kristoff is hosting a couple of zig talks on saturday at 20:00 CET

1590511802
ifreund
fengb and I are the speakers for this first event

1590511838
ifreund
his twitch is here if you want to tune in :)

1590511878
companion_cube
20h CET is in a bit more than 1h, isn't it?

1590511911
ifreund
companion_cube: not today, saturday

1590511913
ifreund
sorry

1590511924
ifreund
but yes that would be correct

1590511929
companion_cube
ah yes ok

1590511944
andrewrk
it should be fun - Loris has put a lot of effort into the production values of the event

1590512202
alehander92
awesome: will keep it in mind

1590516658
andrewrk
yooo look at this:

1590516716
dimenus
:o

1590516720
dimenus
andrewrk: noice!

1590516736
leeward
shiny

1590516742
andrewrk
if you look at the diff it's very ziggy

1590516750
andrewrk
like, go ahead and try to do that in c++

1590516782
andrewrk
returning anonymous struct from a comptime block is amazing

1590516813
fengb
Wait till you meet #1717 :P

1590516848
dimenus
why are people so excited about #1717?

1590516874
ifreund
\o/ that's a nice throughput bump

1590516903
ifreund
dimenus: cause it's cool :P

1590516996
dimenus
wasn't there another issue about renaming const to something else?

1590516998
dimenus
eg let?

1590517013
fengb
Lol

1590517030
alexnask
oh no

1590517038
fengb


1590517053
alexnask
^

1590517059
alexnask
Was just about to post this lol

1590517080
dimenus
lol

1590518326
FireFox317
Neat andrewrk!

1590519187
ikskuh
andrewrk: neat! It's also a really small change with a huge effect :)

1590519955
ifreund
anyhow know offhand how fast C or C++ tokenizers are?

1590519959
ifreund
*anyone

1590520096
pmwhite
yeah, they're typically 354 MB/s, so we have some more work to do.

1590520147
pmwhite
jk, i doubt that the speed of your tokenizer has much to do with the language you're tokenizing.

1590520562
ifreund
no it likely doesn't. I was just assuming that C/C++ tokenizers would likely be the most mature/fast

1590520707
pmwhite
yeah, that's true. It would be nice to know what throughput is really good.

1590520975
companion_cube
it would make sense that C++ has super fast tokenizers, given that a typical compilation goes through gigabytes of .h files…

1590520990
ikskuh
yep

1590521504
leeward
Along the same lines, Zig's tokenizer speed probably doesn't matter much.

1590521557
ikskuh
leeward: anyways, the slowest component defines the compilation speed

1590521568
leeward
Right, and the tokenizer is never going to be that.

1590521568
ikskuh
also, faster single components makes faster compilation

1590521657
companion_cube
+1 leeward

1590521868
andrewrk
yeah I don't think it matters much. tbh I was just happy the compiler didn't crash when I did all that comptime stuff :P

1590521966
pmwhite
Keep up the mastodon tooting, andrewrk! I don't Twitter, so I appreciate it

1590522162
andrewrk
okie dok

1590522453
companion_cube
oh, where is that?

1590522468
companion_cube
oh wait, you have 2 accounts?!

1590522487
companion_cube
mastodon.social I guess

1590522680
andrewrk
@andrewrk@mastodon.social

1590522687
companion_cube
thanks, already found it

1590522697
companion_cube
turns out the search feature works even in the federation, I'm surprised

1590523095
andrewrk
wtf, I showed this comptime tokenization thing to drew devault and his response is "you're just showing off" "performance is not the ultimate goal" "really, the answer is be happy with 279 MiB/s" and "not much more compelling than just pregenerating this data in a build step"

1590523123
andrewrk
idk what world this man is living in, but I hope if he ever makes a programming lanugage, his users know what they're getting themselves into

1590523125
BaroqueLarouche
dafuq

1590523139
companion_cube
andrewrk: don't you know he's making a programming language? :DDD

1590523145
companion_cube
(also, remember to not use threads)

1590523200
leeward
I mean, it does seem like you are showing off. It's a cool thing you can do with Zig.

1590523220
ifreund
yeah, you have the right to show off :D

1590523250
leeward
And the fact that the performance difference isn't important here doesn't make it less cool.

1590523259
ifreund
right

1590523282
ikskuh
andrewrk: you ARE showing off, but it's damn awesome to show someone that you can do stuff in-language that other people need two or more precompilation steps for :D

1590523308
andrewrk
yeah damn right I'm showing it off, it took a lot of work to get here!!

1590523317
ikskuh
👍

1590523335
andrewrk
I'm just shocked at the response "you shouldn't try to make it that fast"

1590523348
ikskuh
yes, true.

1590523356
ikskuh
i was also like "WAT"

1590523371
nephele
i certainly agree, zig is too fast, please make a slower language so i can read the compile log ;)

1590523376
andrewrk
ugh whatever. alright, I think I made enough progress on PRs today to justify some more self-hosted work :)

1590523389
ikskuh
heh, i should take a look which you merged :D

1590523437
ikskuh
> Merge branch 'daurnimator-pretty-print-non-exhaustive-enums' …

1590523438
ikskuh
whooo!

1590523661
nephele
self hosted zig is so cool

1590523684
nephele
I hope to use it to put code on a floppy for my ibm laptop at some point :P

1590523776
ikskuh
hehe

1590523782
ikskuh
what IBM?

1590523821
nephele
IBM Portable Personal Computer, the bulkiest laptop i onw

1590523864
fengb
Business machines

1590523885
shakesoda
andrewrk: that's a bizarre reply when more performance is obviously better

1590523897
shakesoda
besides, it can still go faster ;)

1590523915
andrewrk
yes

1590523929
companion_cube
well, drew devault likes simplicity above all

1590523932
andrewrk
I promised everyone that zig will be faster than jai. "whatever jai's performance is, we'll beat it"

1590523941
shakesoda
companion_cube: simplicity and performance are usually correlated

1590523943
andrewrk
just waiting for it to be available, for comparison

1590523946
companion_cube


1590523953
shakesoda
certainly not the same thing, but correlated

1590523962
companion_cube
meh, depends

1590523972
shakesoda
i say this, specifically, as someone who's day job is optimizing stuff

1590523979
shakesoda
a lot of what i end up

1590523981
companion_cube
"too simple" is slower than "reasonably simple but still optimized"

1590523996
companion_cube
yeah but here, the lexer andrewrk is optimizing would be simpler without the optims, wouldn't it?

1590523999
shakesoda
yes, it's more nuanced than just simpler = better

1590524054
andrewrk
companion_cube, you could make the argument that it actually is a simplification, because all the logic is in the getKeyword function, and the keywords list can be changed to simple struct inits now instead of precomputing a hash

1590524078
companion_cube
you could also have a basic hashtable

1590524082
companion_cube
it'd be slower, but still work

1590524096
andrewrk
I'm saying that you could make the argument that this is simpler than that

1590524110
andrewrk
also, Vexu did that and it's very close in perf, nearly as good

1590524117
companion_cube
oh, interesting.

1590524220
andrewrk
the key insight seems to be that it's common for something to

1590524279
fengb
You should add sleep(1000ns) to satisfy him

1590524382
companion_cube
clearly it's SIMD tokenizer or GTFO

1590524401
companion_cube
(can't wait to see his language, really, I think it's basically a revamping of C)

1590524477
shakesoda
simd, cache optimized, threaded as is appropriate... the works!

1590524576
companion_cube
ludicrous speed

1590524596
shakesoda
it makes me incredibly happy every time that nsight has an actual speed of light metric

1590524625
shakesoda
and, true to its name, is quite hard to approach

1590525301
Aransentin
For a 4Ghz CPU, light travels ~7.5 cm each cycle. Kinda makes you appreciate how fast modern computers are.

1590525356
ikskuh
Aransentin: yeah! I calculated that value as well and it's crazy

1590525384
ikskuh
now divide by ~3 and you get distance in an electrical medium

1590525472
ikskuh
so, processors can't really get much bigger (or faster)

1590525576
dimenus
i appreciate Drew for most of his stances but that just strikes me as whiny

1590525581
leeward
I don't know if I'd say they can't get much bigger or faster; it's just an engineering challenge we haven't solved yet.

1590525658
ikskuh
leeward, it's not that easy sadly

1590525667
ikskuh
if we get smaller, the transistors start to get unreliable

1590525674
ikskuh
and we haven't solved 3D design yet

1590525746
ikskuh
bigger means that you cannot reach the other side of the chip in one cycle

1590525754
ikskuh
the solution for that is what AMD does: Chiplets

1590525761
ikskuh
make more chips instead of bigger chips

1590525837
nephele
I think it is amazing how fast modern computers are, and how inefficient some oses run on it :3

1590525845
ikskuh
nephele: SO TRUE

1590525860
andrewrk
3D design! there's a theoretically possible idea, but seems impossible in practice

1590525868
ikskuh
andrewrk: yep

1590525884
ikskuh
some companies trie to do for memory chips

1590525914
andrewrk
what about like an X shape

1590525934
ikskuh
wdym?

1590525940
andrewrk
instead of a cube

1590525946
leeward
ikskuh: I'm not saying it's easy, just that it's not impossible. 3D design is a problem of heat dissipation. If we can improve our manufacturing processes for materials with better properties, it'll be doable.

1590525984
shakesoda
i await seeing the crazy solutions from people far, far, far smarter than i

1590525995
leeward
Optics are also a potential path, but there are plenty of problems to be solved there too.

1590526012
ikskuh
optics will probably yield a factor 3 in speed

1590526013
andrewrk
we need subatomic transistors

1590526025
ikskuh
aat least in transmission speed

1590526109
leeward
Parallelism is a thing too. Modern processors don't live by themselves; it's not super important for one core of a multicore chip to be able to send a signal to another in a single clock cycle.

1590526129
Aransentin
"Don't embed an entire browser to render your basic desktop app" is also a potential solution to improve performance :)

1590526130
ikskuh
that's what i said ;)

1590526134
leeward
I worked on a 64-core chip once, and messages passed across the mesh at 1 chip per cycle.

1590526136
leeward
I can read!

1590526180
ikskuh
:D

1590526183
leeward
Aransentin: The problem is that software developers have been trained by 40-odd years of "wait 2 years and the hardware will be faster" so most people don't think much about efficiency.

1590526189
companion_cube
Aransentin: so true

1590526198
ikskuh
the probably most popular cpu that uses such a design is this:

1590526202
companion_cube
and don't write big apps in JS, either

1590526209
BaroqueLarouche
Programmer productivity is favored over performance

1590526213
andrewrk
I think that cross platform guis are just a fundamentally difficult problem

1590526249
leeward
BaroqueLarouche: In most domains; unfortunately not the ones I tend to work in.

1590526256
fengb
I mean, we lost so much performance switching towards preemptive OSs

1590526263
ikskuh
andrewrk: just remove "native" guis and let everyone render with vulkan!

1590526264
fengb
So let's go back to the good old days

1590526282
andrewrk
ikskuh, I actually think that's not so bad

1590526289
companion_cube
fengb: did we now? :D

1590526302
BaroqueLarouche
most pro applications do this anyway, render their own GUI

1590526303
ikskuh
me neither, but window management is still a problem

1590526305
companion_cube
I'm glad that even if a badly written program (cough slack cough) misbehaves, I can kill it

1590526307
companion_cube
and the OS will cleanup

1590526317
ikskuh
but just give each application a fullscreen buffer as a render target and go!

1590526321
fengb
Hard part of GUIs isn't rendering but layout and synchronization

1590526321
leeward
fengb: You mean like classic MacOS and constant crashes because someone forgot to yield?

1590526333
fengb
Yeah exactly. Super awesome

1590526342
leeward
Good times.

1590526356
ikskuh
fengb: but those are user space problems anyway

1590526357
dimenus
andrewrk: agreed on GUIs

1590526361
ikskuh
nothing that is a problem with multiplatform

1590526371
andrewrk
IMO the hard part of guis is the cross platform part. are you going to use windows widgets? gtk? qt? render your own stuff? does the gui toolkit require you to use C++?

1590526389
ikskuh
andrewrk: the answer is: yes, you need C++

1590526394
ifreund
ikskuh: that's roughly how wayland works, though there are a lot more details :P

1590526398
ikskuh
or you use gtk, which isn't zig compatible as well

1590526405
ikskuh
ifreund: yeah, i know :D

1590526406
fengb
DOM os crossplatform

1590526409
ikskuh
window decorations are a thing as well

1590526410
fengb
is*

1590526421
ifreund
nah, ssd for the win

1590526427
alexnask
ikskuh The Gtk3 experiment didnt go well I assume? :P

1590526428
companion_cube
that's the future Zig killer app: a portable GUI framework that doesn't make you depend on C++

1590526430
companion_cube
:p

1590526431
andrewrk
right, so the fact that you are forced to use C++, which isn't inherently a GUI related concept, is evidence of cross platform GUIs being hard

1590526439
ikskuh
alexnask: didn't had time yet

1590526440
fengb
I've never used a cross platform UI kit that behaves well

1590526460
alexnask
ikskuh, Ah ok the "which isn't zig compatible as well" made me think you hit some roadblock

1590526461
andrewrk
Qt is pretty good. but that's a hulking behemoth

1590526462
ikskuh
Qt is actually really good considering all other options :D

1590526474
ikskuh
it's not zig-compatible out-of-the-box

1590526538
BaroqueLarouche
Qt is such a pain to bind

1590526638
fengb
At the end of the day, JS DOM solves a bunch of problems, and it's usually not JS that makes it slow

1590526814
andrewrk
yes, and this is why we have to deal with electron, not because the kids need to get off our lawns

1590526839
ikskuh
soooo. zig-based crossplatform UI based on vulkan and a MVVM/DOM model?

1590526874
andrewrk
I want a visual form builder like VB6 / .net / Qt

1590526888
fengb
InterfaceBuilder :3

1590526946
ikskuh
andrewrk: you and your wishes!

1590526997
ikskuh
but yeah, seems like zig-window is the first step to that

1590527026
nephele
not only portable to architectures and oses, also portable to windowing toolkits :P /s

1590527058
ikskuh
i'd actually like a non-"native" window toolkit

1590527064
ikskuh
makes programming applications more persistent

1590527085
dimenus
i'm doing vulkan / wayland wsi etc right now :)

1590527086
nephele
Hmm, when is a toolkit native? I would think qt is basically nowhere native

1590527112
waleee-cl
ikskuh:  re mvvm, well there's this in rust-land

1590527131
shakesoda
doesn't qt actually use native widget drawing when it can

1590527133
shakesoda
particularly on windows

1590527134
waleee-cl
argh

1590527153
BaroqueLarouche
when you can get the HWND handle of a button when on WIndows

1590527162
ikskuh
shakesoda: afaik not

1590527171
shakesoda
ok

1590527190
ikskuh
otherwise some stuff would look like win10/win9

1590527194
ikskuh
win9x

1590527202
ikskuh
and the rest would be qt-style

1590527203
companion_cube
I want the gui toolkit of serenity OS

1590527208
companion_cube
with the look and feel of win98

1590527223
shakesoda
i want widget kits to give up on their notions of being some kind of universal and actually just give up in general, give me my windows 2000 ui back

1590527234
ikskuh
companion_cube:

1590527240
shakesoda
and stop halfassing it because some platforms are different ;)

1590527248
ikskuh
i love the win9x look

1590527256
shakesoda
it is pure function

1590527262
companion_cube
:DDD

1590527264
ikskuh
could use better color schemes though :D

1590527264
shakesoda
i'm using it right now

1590527287
shakesoda
specifically win7 classic since it's as old as i can go without things being extremely busted trying to use it in the current world

1590527301
nephele
Heh, native toolkits can be quite nice though :D, aslong as they dont try to port everywhere

1590527324
shakesoda
but i keep my win2k vm ready to go at all times

1590527332
ikskuh
<nephele> Heh, native toolkits can be quite nice though :D, aslong as they dont try to port everywhere

1590527340
ikskuh
that's kinda a contradiction

1590527346
shakesoda
i found that with kernelex/hacked in winxp stuff it happily builds and runs luajit

1590527349
ikskuh
qt isn't native, WinAPI is

1590527359
ikskuh
for X11, there's no "native" u

1590527359
shakesoda
and also sublime text

1590527360
ikskuh
*ui

1590527375
nephele
ikskuh, well, if you don't have any native toolkit then any is native? :)

1590527391
nephele
I wouldn't know what a native linux toolkit is, they all seem to try to be ported everywhere

1590527416
shakesoda
i feel like gtk is the closest to native linux

1590527431
shakesoda
including in that on no other platform does it feel even remotely at home

1590527451
ikskuh
nephele: linux doesn't really have a

1590527473
ikskuh
but all other major systems (mac, windows, android, ios, winphone) have

1590527477
shakesoda
linux doesn't have a native de to begin with, so it kind of can't

1590527492
ikskuh
i really like the looks of modern GTK applications

1590527494
nephele
ikskuh, yeah

1590527500
ikskuh
the header bar is

1590527507
shakesoda
modern gtk stuff usually looks decent and has serious functionality and performance problems

1590527517
nephele
i for one dislike gtk3s ui.. much more happy with Haikus :P

1590527518
shakesoda
which is very frustrating.

1590527529
Aransentin
Native Linux:

1590527541
shakesoda
that's just x11 though

1590527542
ikskuh
Aransentin: lol yes

1590527558
nephele
Aransentin, heh... but openbsd actually has X11 in base

1590527566
nephele
for linux it's all "addon" software :D

1590527591
shakesoda
i was very happy with gtk2's ui, lots of gtk3 software feels chaotic and missing stuff now

1590527598
THFKA4
i'd like to interject for a moment..

1590527601
shakesoda
and headerbars are worse than menus in almost all ways

1590527617
shakesoda
but in general i think the macos global menu gets

1590527643
shakesoda
that only has so much weight though, or my favorite os wouldn't be win2k

1590527734
shakesoda
i do give very high marks to macos 10.4 and 10.6 though

1590529305
Aransentin
Here's an a fun "kids get off my lawn" moment I had this week: check out the build instructions for the new JPEG standard ("XL") reference lib:

1590529309
Aransentin
Step 1: Install Docker

1590529315
Aransentin
Also their official docker container with the build environment is hosted on Dockerhub, so you need sign up for a Docker account.

1590529320
Aransentin
What happened to `./configure && make` grumble grumble...

1590529415
fengb
lol, didn't andrewrk make a video on replacing autotools?

1590529558
fengb


1590529595
dimenus
containers are the new base layer

1590529602
dimenus
containers and chromium

1590529745
dimenus
i should switch to NixOS...

1590530059
BaroqueLarouche
The Road to Zig 1.0 talk is the reason that I'm here

1590530191
alexnask
docker for a build? seriously?

1590530236
shakesoda
that's pretty common now

1590530236
leeward
It's popular for CI

1590530238
companion_cube
cna't wait for "here's the wasi image" instead

1590530243
shakesoda
takes away tons of variables

1590530330
fengb
Yeah, reproducible builds are hard. Maybe everyone should switch to Nix instead

1590530361
pixelherodev
andrewrk: hi

1590530458
leeward
Silly tools putting build times in binaries...

1590533459
FireFox317
andrewrk, what is the reason for not using llvm's calling convention and doing it our selfs? this is regarding the c abi issue. Because im not seeing any attributes regarding calling convention in llvm-ir

