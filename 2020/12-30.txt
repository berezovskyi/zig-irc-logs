1609290416
pixelherodev
Okay, CBE patches incoming soonish :)

1609291641
ifreund
The CBE seems fun to work on, I enjoyed that stream

1609291659
ifreund
probably cause I know C way better than I know any of the other output formats :D

1609291855
g-w1
-Dskip-non-native saves about 8s, pretty nice

1609291864
g-w1


1609293431
andrewrk
I think I have an actually good idea to solve alloc_inferred

1609295748
g-w1
andrewrk: here is a solidification of the inferred error set "superposition" that gets resolved after all functions are resolved:

1609295851
g-w1
it seems that async programming would suit this well: if you encounter an error set that is not resolved, just suspend, when it gets resolved resume. the only exception would be special stuff having to do with recursive error sets. I wonder if there is a way to incorporate this even if the compiler is sync?

1609296270
andrewrk
g-w1, re: async programming: I was thinking along similar lines. unfortunately I don't think there is a good answer to that question

1609296294
andrewrk
reading the paste

1609296342
andrewrk
one observation is that you are essentially constructing a Function Call Graph which is useful for many other things

1609296355
andrewrk
we have something similar already for detecting when we need to recompile

1609296368
andrewrk
plus we need a similar thing for detecting whether functions need to be generated async

1609296374
andrewrk
I wonder if it's all the same problem...

1609296440
andrewrk
another observation is that there are other points that also trigger error set resolution. for example if you do @typeInfo on an error set and then iterate over the fields

1609296529
andrewrk
I wonder how far you could get with a new Type tag for error sets that has a Decl as a payload value, and it simply means the inferred error set of that function? wait, is that perhaps what we already have?

1609297991
g-w1
oh you are right, a Type.Payload.ErrorSet is just a

1609297994
g-w1
logic is for seeing if it is returning an error, and adding it to the inferred error set? I think I could just put that in analyzeInstRet. im pretty sure we still need the Module lazy resolution solution, but this definently reduces some of the boilerplate. thanks!

1609300204
andrewrk
hmm no I don't yet -I haven't closely inspected the error set stuff in stage2 yet

1609300223
andrewrk
I do think there will be some more work to do this "superposition" thing once we start really getting into it, but I think the Decl thing is a good start

1609300247
andrewrk
now might be a good time to add some doc comments to that Payload in Type that would have been useful for your past self when you saw it the first time :D

1609310713
fraktor
Out of curiosity, does anyone know of Zig projects with GUIs?

1609312367
viashimo
fraktor there's at least some example games that I've seen. I've been using zig w/ glfw and vulkan

1609312431
fraktor
Do you know if those can be statically linked?  I'm looking at Zig for possibly developing LV2 plugins.

1609313054
pixelherodev
I have a GUI library in C that I use almost exclusively with Zig lol

1609313790
fraktor
pixelherodev: What is it?

1609316582
pixelherodev
fraktor: I mean I wrote one :P

1609316607
pixelherodev
Not worth using, I threwa  lot of it out and have no intention of revisiting it in the future

1609317104
daurnimator
fraktor: o.o LV2 is a public C++ abi? sounds dreadful :/

1609317202
pixelherodev
I looked it up, thought it said C?

1609317221
pixelherodev


1609317226
pixelherodev
WP says "written in C and turtle" ?

1609317261
daurnimator
looking at

1609317306
pixelherodev
daurnimator: that looks like it's just a really poorly chosen syntax

1609317360
daurnimator
hmmm, maybe

1609320768
pixelherodev
Gah, now I'm back to obsessing over c3z design (c3 == tricarbon == my compiler project, c3z == a way of referring to zyg that I can say out loud without confusing myself XD)

1609320934
pixelherodev
... if anyone has a zig update script, I'd appreciate it if you could link me a copy :P Currently I just do `curl

1609320935
pixelherodev
myself lol

1609320981
pixelherodev
s/xf/xJ

1609321159
pixelherodev
uhhh how much memory does test-stage2 use? I'm getting an OOM in the GPA with over 7GiB free

1609321166
pixelherodev
Sorry,

1609321204
pixelherodev
... oh wait, that's just the uncleared error trace :P

1609321287
pixelherodev
Real issue is with `zig run` subprocess > error: unable to find zig installation directory: FileNotFound

1609321368
pixelherodev
Oh lol oops

1609321373
pixelherodev
I accidentallied my zig lib dir :P

1609321394
pixelherodev
that rsync lib should've been lib/zig :Pp

1609321421
pixelherodev
Yay, now everything is good :D

1609321644
pixelherodev
Anyone interested in a CBE stream? Considering doing one in tennish minutes

1609321801
pixelherodev
eh, nah

1609323427
pixelherodev
andrewrk: got CBE working with updates!

1609323429
pixelherodev
PR incoming shortly ;)

1609323707
koakuma
CBE?

1609323712
pixelherodev
C backend

1609323740
pixelherodev
... with the minor nit that the order of decls has changed since we're using the decl_table instead of the work queue. So, uh, that's not a deliberate thing :P

1609323841
pixelherodev
(e.g. main is before start in the output for the simple start+main test now)

1609324019
pixelherodev
Had to change two of the tests to account for that, but yeah

1609324280
pixelherodev
That's one item off the list; I'll remove the panics and fix the error handling tomorrow, convert the compareoutput tests to execution  the day after, and possibly improve variable tracking (add MCValue for alloc,raw,literal,etc) the day after that

1609337724
g-w1
pixelherodev, consider using zigup,

1609351295
ifreund
ugh, the ZBS does not make it easy to install stuff to /etc

1609351764
ifreund
altertively: ugh, why isn't /etc a symlink for /usr/etc by default

1609352041
ifreund
we should probably just copy meson's logic regarding this stuff eventually

1609352046
ifreund
it's quite sane

1609355032
andrewrk
ifreund, this is the first I've heard of installing stuff to /etc

1609355047
andrewrk
what kind of stuff goes there?

1609355059
ifreund
default config files

1609355061
andrewrk
oh right conf files

1609355120
ifreund
the logic I've stolen from meson is to check if --prefix is "/usr" and if it is install my file to "../etc/river/init". Otherwise use "etc/river/init"

1609355987
ifreund
oh nice, LemonBoy's PR got merged

1609355995
ifreund
I wonder if river builds on FreeBSD now

1609356200
g-w1
is there a way to view zir before it has been analyzed? I am trying to do astgen for `try` but cant check if it works because `.iserr` is not implimented, so the rendering code just gives a compileerror. How did you test astgen for orelse and catch?

1609356262
andrewrk
g-w1, --verbose-ir

1609356336
g-w1
ok thx. I am confsed? is zir typed when you do -femit-zir? why does --verbose-ir have a different format than zir?

1609356511
g-w1
hmm, it seems --verbose-ir renders the ir as a tree after it comes out of astgen

1609358451
andrewrk
let's come up with a name for the 2 different IRs we have, because currently we say "ZIR" for both and it is confusing

1609358468
companion_cube
ZIR and ZMADAM

1609358515
andrewrk
when you do -femit-zir, here is what happens: source -> tokenize -> AST -> untyped ir -> typed ir -> text representation as untyped ir

1609358536
andrewrk
I think ZIR should be the untyped one

1609358603
ifreund
TZIR for the typed one?

1609358610
ikskuh
<companion_cube> ZIR and ZMADAM <= this please :D

1609358717
g-w1
ok, in my head i have `zir` for what comees out of `astgen.zig` and `ir` for what comes out of `zir_sema.zig`. because ir.zig represents typed ir and zir.zig represents untyped ir. now I get it thx

1609358808
ifreund
ZTIR is nicer to pronounce actually

1609358823
ifreund
zeeer and zee-ter

1609363744
andrewrk
maybe both ZIR and TZIR should have text representations

1609363888
andrewrk
did you just sext me?

1609363905
companion_cube
I sexprt you

1609363936
companion_cube
(🍆((🍑)))

1609363944
ikskuh
lol

1609363977
companion_cube
more seriously, it's quite readable (if well indented) and super super easy  to print and parse.

1609364472
remby
is ZIR zig immediate representation?

1609364642
ifreund
yes

1609364661
ifreund
well s/immediate/intermediate/ but I think that's what you meant :P

1609364686
remby
yeah, woops

1609364693
remby
could do something like nock

1609364791
ifreund
nock?

1609364847
remby


1609364869
companion_cube
oh no, not urbit :(

1609364942
remby
just an alternative suggestion :P

1609364964
ifreund
s-experssions are more readable than that IMO

1609365117
remby
s-expressions have a lot of upside, but sometimes devs are afraid of parenthesis

1609365134
companion_cube
who'd be afraid of parenthesis but not of a cryptic esolang like nock?

1609365200
remby
touche

1609366560
andrewrk
I think our existing syntax is pretty nice

1609366581
andrewrk
not shown here: blocks

1609366890
remby
that's just the ir? or can it be used inline somehow ?

1609366897
remby
i'm ok with thise syntax

1609366919
ifreund
that's a text reprensentation of the ir only used for debugging

1609367004
justin_smith
another vote for sexp, there's a lot of editor support, pretty printers, etc.

1609367044
justin_smith
also it's a great format for doing automated transforms on (that can be useful even if it's just for debugging)

1609372565
ugla
`error: container 'std.crypto' has no member called 'randomBytes'`; is there a replacement for that one?

1609372643
andrewrk
ugla, std.crypto.random.bytes

1609372651
ifreund
std.crypto.random.bytes according to the git log

1609372690
andrewrk
now it supports the full Random interface, and it uses a thread local CSPRNG, OS-seeded, fork-safe

1609372720
andrewrk
in summary: better API; fewer syscalls

