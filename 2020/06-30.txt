1593475634
shcv
if all members of a union have a field, does the union also have that field?

1593475664
shcv
I guess that wouldn't help in my case anyway, so nvm

1593475812
pixelherodev
I mean, not really

1593475822
pixelherodev
There's no way to access it without going through the direct parent

1593485768
andrewrk
hmm alright so I have allocated registers for operands of an add instruction, and a register for the result. now I have to do instruction selection. should be fun, I've never done this before

1593486297
aerona
items.len is the proper way to retrieve the length from an ArrayList right?

1593486442
aerona
when i append to the array list the len gets incremented to 2 but later during a test it's only set to 1

1593486472
aerona
funnily enough if i manually change the len to 2 in my test i can retrieve the other. though it's the same value as the first element

1593486589
andrewrk
aerona, that's right

1593487423
pixelherodev
andrewrk: instruction selection?

1593487431
pixelherodev
You mean determining which add variant to use?

1593487436
pixelherodev
Oh, and what type of register allocator?

1593487442
pixelherodev
Is the register allocator platform-specific?

1593487529
andrewrk
so far the register allocator is architecture-agnostic, so it doesn't require reimplementing for new architectures

1593487567
andrewrk
yeah determining the add variant. looks pretty similar to the problem you solved for setting registers

1593487602
pixelherodev
hmm

1593487607
pixelherodev
I think I have that for c3 already...

1593487658
pixelherodev
andrewrk:

1593487670
pixelherodev
That works, but is probably not 100% efficient

1593487699
andrewrk
nice, thanks!

1593487726
andrewrk
wow this looks nearly identical to what I'm about to do

1593487742
andrewrk
One Way To Do Things, eh?

1593487743
pixelherodev
:)

1593487754
pixelherodev
Let me know if yours differs seriously

1593487757
pixelherodev
I'll update mine ;)

1593487801
andrewrk
the register allocator is going to differe seriously. I believe you have actually implemented a solution to the problem that is reasonably fast at runtime, whereas I came up with something that maximizes compilation performance and compromises runtime perf

1593487828
andrewrk
I think it will do just fine though, it still takes instruction lifetimes into account

1593487841
pixelherodev
Uh, no? My register allocator was chosen for the opposite of that

1593487852
pixelherodev
My register allocator was explicitly chosen because it has nearly no compile time overhead

1593487877
pixelherodev
Rather, it provides decent runtime performance at minimal comptime / translation-time cost

1593487921
andrewrk
oh, interesting. I thought you were implementing an academic paper or something

1593487952
pixelherodev
It's based on one, yes

1593487967
pixelherodev
One which was explicitly designed to be low-cost :)

1593487972
andrewrk
cool

1593488004
pixelherodev
Mind pushing to a branch so I can take a peek? :)

1593488016
andrewrk
sure. btw how did you get rid of the `try`s in your add.zig code?

1593488039
pixelherodev
... uh

1593488039
andrewrk
are you able to figure out how much of a memory buffer to allocate ahead of time?

1593488045
pixelherodev
Ah right

1593488053
pixelherodev
It requires the caller to preallocate the full buffer

1593488059
pixelherodev
I have a builder, not just assembler

1593488059
andrewrk
how does the caller know?

1593488065
pixelherodev
It builds the full block before assembling

1593488071
pixelherodev
It does instruction selection :P

1593488078
pixelherodev
I need to rework that a bit

1593488093
pixelherodev
The builder should store the form to use as well, which will make the assembler marginally faster

1593488106
pixelherodev
or I should copy you, and break each form into its own enum tag :P

1593488162
andrewrk
I would love to get rid of all the `try` in codegen, I think it would speed things up. but it's tricky to know an upper bound on how much machine code will be generated

1593488163
pixelherodev
andrewrk: how do you feel about me working on a C backend over other, more... productive things?

1593488165
pixelherodev
:P

1593488200
andrewrk
no prob. might need a lot of coordinate at first, but once things are basically let up it should be smooth sailing

1593488202
pixelherodev
andrewrk: we don't need to get rid of it

1593488212
pixelherodev
We can do it for source with known sizings

1593488222
andrewrk
yeah good point

1593488244
pixelherodev
Hmm, what's more fun, C *backend*, or C *frontend*?

1593488276
pixelherodev
C backend would be awesome because it'd mean potentially replacing stage1 with a one-time dump (as you've mentioned as, how did you put it, "just an idea, not an actual plan"?)

1593488288
pixelherodev
C

1593488303
pixelherodev
and it could potentially be used for stage1 too

1593488308
andrewrk
C backend is a smaller scoped project

1593488314
pixelherodev
The same way that e.g. translate-c is used in stage1

1593488316
pixelherodev
I know

1593488322
pixelherodev
But C frontend is more rewarding IMO

1593488336
andrewrk
idk, replacing stage1 seems like a pretty big reward

1593488339
pixelherodev
Reduce our dependencies with lighter, faster, simpler code which we control and which won't break on Clang 11 or something :P

1593488351
pixelherodev
True, but it would still mean depending on Clang

1593488375
pixelherodev
Simpler bootstraps versus replacing stage1 earlier...

1593488391
pixelherodev
Hmm

1593488391
andrewrk
simpler bootstraps is not a pressing issue

1593488394
pixelherodev
I know

1593488402
andrewrk
I'm just voting :)

1593488408
pixelherodev
But I'm also thinking in terms of what bugs me the most about Zig right now

1593488423
pixelherodev
Bootstrapping / LLVM / Clang bothers me more than the fact that stage2 isn't actually done yet

1593488431
pixelherodev
Ooh, here's a thought

1593488457
pixelherodev
... nah never mind

1593488477
leeward
not me

1593488490
leeward
I'm bothered more by missing features that depend on stage2.

1593488514
pixelherodev
CBE should be simple too

1593488516
leeward
If we're voting, I'd rather have a stable implementation than a fast/lightweight one.

1593488519
pixelherodev
No reason I can't do both

1593488536
pixelherodev
leeward: I don't consider stage1 stable

1593488544
pixelherodev
precisely because it depends on clang + LLVM

1593488556
leeward
Sure, but if it builds stage2 who cares?

1593488570
leeward
I mean, obviously you do.

1593488575
pixelherodev
Stage2 depends on stage1.

1593488580
pixelherodev
Not at runtime of course

1593488586
pixelherodev
But any code needed for stage1 is needed for stage2

1593488595
pixelherodev
Which means any instability brought by LLVM / Clang affects stage2 too

1593488655
leeward
So stage2 doesn't get to use all the bells and whistles, but it means my code, which is built by stage2, does.

1593488700
leeward
And LLVM is a large, well-funded project. The fact that they have issues doesn't deter me from depending on them a bit longer.

1593488802
leeward
Maybe (definitely) I don't understand all the issues, but that's my high level view.

1593488841
andrewrk
to be clear I personally am working full steam ahead on stage2, regardless of what pixelherodev decides to do with his time

1593488852
leeward
I gathered that.

1593488878
leeward
but thanks for being explicit

1593488943
pixelherodev
^ that's very true

1593488971
pixelherodev
Personally, I'd rather do the frontend, but the backend is definitely more useful to the Zig project, so I'm doing that first

1593489194
andrewrk
C frontend => C backend would be amusing

1593489260
pixelherodev
Could be useful, actually

1593489265
pixelherodev
If we did lazy evaluation and such ;)

1593489290
pixelherodev
As a sort of sanity check; any input for which the output doesn't semantically match should be looked over

1593490873
pixelherodev
andrewrk: you said you want to lock down ZIR as an implementation detail, right?

1593490884
pixelherodev
Explicitly don't let people target it from other projects?

1593490944
andrewrk
I'm fairly certain it's going to remain an implementation detail

1593490975
pixelherodev
Good

1593491081
pixelherodev
It causes some minor inconvenience to me right now, but I think it's worth it

1593491129
pixelherodev
anywho

1593491132
pixelherodev
CBE work coming soon TM

1593491134
pixelherodev
:)

1593491288
aerona
so i picked up zig-toml again and rewrote in a recursive style so it should be easier to add the rest of the toml spec

1593491309
aerona
i also added support for array of tables

1593491645
pixelherodev
andrewrk: did you push your changes to a branch?

1593491719
pixelherodev
... hmm, CBE is going to take more work than I thought

1593491725
pixelherodev
`arch` isn't defined

1593491777
pixelherodev
Unless the CBE produces arch-specific C, which would make sense I suppose

1593491794
pixelherodev
but that defeats the purpose

1593491829
andrewrk
pixelherodev, oops. ok it's pushed to the register-allocation branch

1593491841
andrewrk
yes it would produce arch-specific C

1593491851
andrewrk
that's not even a question

1593491870
andrewrk
no that doesn't defeat the purpose

1593492036
pixelherodev
Wait, really?

1593492038
pixelherodev
Why?

1593492046
pixelherodev
That means we need to know all the details of every possible target

1593492075
pixelherodev
With agnostic C, we can require stripped-down details (pointer size, for instance) and leave that to the C compiler (or, eventually, our C frontend :P)

1593492095
andrewrk
zig's semantic analysis does know all the details of every possible target, that's the point

1593492116
pixelherodev
let's say I'm targeting, for instance, $NEW_HIP_ISA

1593492127
pixelherodev
There's a new microcontroller ISA, it's obscure, Zig has no details

1593492143
pixelherodev
What I'm basically envisioning is you just give it the bare minimum, and let the C compiler handle the rest

1593492149
pixelherodev
Or let's use SDCC as an example

1593492157
pixelherodev
SDCC supports some esoteric targets, like Padauk

1593492186
pixelherodev
Programming Zig to know every detail of every target means more work for every target

1593492206
pixelherodev
Why should we need to care about the target if we're emitting C?

1593492300
andrewrk
good question, let's examine how it would work if c replaced the architecture in the triple

1593492363
pixelherodev
?

1593492389
andrewrk
e.g. instead of riscv64-linux-gnu it would be c-linux-gnu

1593492405
pixelherodev
Right

1593492416
pixelherodev
Is that what I should use for the initial implementation?

1593492419
aerona
also here's a mustache renderer if anyone has need for such a thing github.com/aeronavery/zig-mustache

1593492431
pixelherodev
Actually, would the ABI matter?

1593492444
pixelherodev
The C compiler should tackle that

1593492449
pixelherodev
It would be c-$OS I think

1593492461
pixelherodev
Or c-$OS-none

1593492523
andrewrk
one problem would be how many bits to make the pointer size

1593492533
pixelherodev
Not necessarily

1593492545
pixelherodev
There's a definition for pointer-sized-ints, no?

1593492568
pixelherodev
uintptr ?

1593492578
andrewrk
zig code: if (@sizeOf(usize) == 8) foo() else bar(); // zig cannot compile this code without knowing at compile time what the pointer size is

1593492584
pixelherodev
ahh, right

1593492586
pixelherodev
Gotcha

1593492597
pixelherodev
c-$os-ptrsize?

1593492603
pixelherodev
Have ptrsize replace the ABI?

1593492612
andrewrk
ok so I gave you only 1 example

1593492616
pixelherodev
True

1593492626
andrewrk
however this problem is basically present with every single thing that is specific to an architecture

1593492627
pixelherodev
Could have those specified elsewhere?

1593492630
pixelherodev
Rather

1593492636
andrewrk
so.... there's a really convenient way to specify these things

1593492637
pixelherodev
--target c-$os-platformfile

1593492651
pixelherodev
Have a file passed as part of the triple which specifies all of it

1593492663
andrewrk
in fact it involves doing nothing new! just pass an actual architecture

1593492676
pixelherodev
What's wrong with doing it this way though?

1593492693
andrewrk
"platformfile" would have exactly all the details that are encoded by the architecture part of the triple

1593492699
andrewrk
we already have this problem solved

1593492714
pixelherodev
Honestly, I don't think i can think of anything other than pointer size that needs to be specified

1593492724
pixelherodev
Hmm, vectors and SIMD, so some CPU features possibly

1593492730
pixelherodev
for intrinsics

1593492744
pixelherodev
I'm probably missing other things too

1593492748
pixelherodev
Okay, so `arch-os-c`?

1593492780
andrewrk
making it one of the C ABI enums could be an interesting idea. I'm not against it

1593492813
pixelherodev
alternately, we can decouple it from the triple

1593492816
pixelherodev
detriple it?

1593492822
pixelherodev
--target blah --c

1593492877
pixelherodev
Are comments included in the AST parser?

1593492882
pixelherodev
Thinking ahead a bit :P

1593492896
pixelherodev
yeah, they've got to be; that's how docgen and zig fmt work

1593493773
aerona
one last thing before i go to bed, an orm i've been working on in my free time github.com/aeronavery/zig-orm

1593498336
andrewrk
pixelherodev, why is it u7 instead of u8?  if ((try std.math.absInt(IMM)) < std.math.maxInt(u7))

1593498460
pixelherodev
Sign

1593498463
pixelherodev
We don't care about the sign

1593498479
pixelherodev
It's a signed 8-bit value stored as u8

1593498491
pixelherodev
... Rather

1593498499
pixelherodev
Sorry, that was completely wrong

1593498506
pixelherodev
Because it

1593498511
pixelherodev
Notice the absInt

1593498524
pixelherodev
We're going from a signed number to unsigned

1593498541
pixelherodev
But the final encoding is effectively i8

1593498560
pixelherodev
That should probably be <= though

1593498590
pixelherodev
andrewrk: was the remotely clear? :P

1593498615
pixelherodev
Let's say we have, -100, and 244

1593498630
pixelherodev
absInt(-100) => 100, which is less than maxInt(u7), and thus okay, and encodable

1593498642
andrewrk
so the cpu sign extends the immediate

1593498645
pixelherodev
absInt(244) => 244 - it can be encoded as u8, but - exactly

1593498656
pixelherodev
That should probably be in the comments, yes

1593514584
pixelherodev
andrewrk: so what's the conclusion?

1593518344
pixelherodev
I want to get to work on CBE *today*, but I want to make sure that I'm doing it in a way that benefits the Zig community, which means that I need to know the desired behavior before I get to work :)

1593527822
scientes
pixelherodev, what is CBE?

1593527857
alexnask
C backend

1593527860
alexnask
(I think)

1593527864
scientes
pixelherodev, you can't just cut off the signed bit

1593527876
scientes
pixelherodev, because of that sneaky value of MIN_INT

1593527897
pixelherodev
C backend, yeah

1593527902
pixelherodev
scientes: doesn't matter.

1593527914
scientes
it always becomes an unsiged number of the same number of bits that went in

1593527916
pixelherodev
Why would that change anything?

1593527929
scientes
try MIN_INT * -1

1593527935
pixelherodev
... again, so?

1593527936
scientes
and experience a fun SIGFPE

1593527953
mq32
scientes: this should not throw a SIGFPE :D

1593527960
mq32
it's integers

1593527971
pixelherodev
^

1593527975
scientes
mq32, try it

1593527990
scientes
the really strange thing is that % -1 can also throw SIGFPE

1593527995
scientes
but only on older hardware

1593528005
pixelherodev
Plus, That's with / , not * I thought

1593528008
scientes
because it uses division in the back-end

1593528026
scientes
ahh yes, the multiplication just winds-around

1593528031
pixelherodev
`If integer math results in a signal being delivered, POSIX requires it to be SIGFPE`

1593528036
scientes
and you get MIN_INT as the output

1593528039
scientes
which is pretty strange

1593528045
scientes
MIN_INT * -1 == MIN_INT

1593528053
mq32
scientes: yields a warning, runs fine

1593528059
pixelherodev
Again, why is that an issue?

1593528069
pixelherodev
Let's say the value is 10000000

1593528074
scientes
pixelherodev, because you can't cut off the signed bit in abs()

1593528078
pixelherodev
Wait, wrong value

1593528084
pixelherodev
scientes: ... again, why not?

1593528085
scientes
or else that edge-case does not work

1593528090
mq32
division works as well

1593528094
pixelherodev
Talk to me like I'm a child :P

1593528096
scientes
abs(MIN_INT)==INT_MAX+1

1593528099
pixelherodev
Why is there an issue here

1593528110
scientes
^^^

1593528116
pixelherodev
and?

1593528120
mq32
scientes: where's the problem?

1593528122
scientes
so if you cut off the bit you can't fit that value

1593528126
mq32
it's not possible to abs() MIN_INT

1593528138
mq32
because the value is not representable in int

1593528140
scientes
MIN_INT8== -128

1593528147
pixelherodev
Yes

1593528150
mq32
which isn't representable in a INT8

1593528151
scientes
so if you cut it from a i8 to a u7, then you can only it 127

1593528153
scientes
*fit

1593528155
pixelherodev
And that's supposed to be... wait hmm

1593528161
pixelherodev
I think I see your point.

1593528175
pixelherodev
Yeah, I realized that with 10000000

1593528181
pixelherodev
That's -128, not "-0"

1593528186
scientes
exactly

1593528195
pixelherodev
Wait

1593528197
pixelherodev
is it?

1593528202
pixelherodev
... yes

1593528202
scientes
it is

1593528204
pixelherodev
I'm just tired

1593528208
scientes
11111111 is -1

1593528216
scientes
and 10000000 is -128

1593528225
pixelherodev
Right I got that

1593528241
pixelherodev
(I know how two's complement works, but I should be asleep rn :P)

1593528242
scientes
my point is you cant cut off the signed bit because of that corner-case

1593528246
pixelherodev
No I got that

1593528260
pixelherodev
I mean

1593528263
pixelherodev
`or == -128`

1593528265
pixelherodev
:P

1593528273
pixelherodev
That's probably the most efficient way to do the check

1593528316
scientes
pixelherodev, you just multiply by -1 if < 0

1593528318
pixelherodev
Hmm, what's the best Ziggy way to say "if this fits in a signed int"?

1593528331
pixelherodev
That's not any better though, is it?

1593528334
pixelherodev
That's still just 128

1593528346
scientes
pixelherodev, that's fine

1593528350
pixelherodev
"if this fits in signed int of type blah"

1593528361
scientes
abs() should CHANGE the type

1593528364
pixelherodev
`if (val_as_i32 fits in i8)

1593528365
scientes
but keep the bit width

1593528374
pixelherodev
That's the problem though

1593528386
pixelherodev
abs(i7) cannot always fit in u8

1593528399
pixelherodev
-128 is valid i7 but 128 isn't valid u7

1593528401
scientes
abs(i7) can always fit in u7

1593528417
scientes
i7 is -64 to 63

1593528422
pixelherodev
Ah right

1593528426
pixelherodev
abs(i8) rather

1593528434
scientes
can always fit in u8

1593528436
scientes
but NOT u7

1593528441
pixelherodev
ahhhh, gotcha

1593528453
scientes
because of the minint case

1593528456
pixelherodev
Wait

1593528460
pixelherodev
I'm not cutting the sign bit though

1593528470
pixelherodev
I mean, it's using an inefficient form sure

1593528474
pixelherodev
(for that edge case)

1593528480
scientes
its a little tricky to do this conversion in place

1593528487
scientes
when you are changing the type

1593528492
pixelherodev
time for std.math.fitsIn ? :P

1593528495
scientes
no

1593528503
pixelherodev
if (i32 fits in i8)

1593528504
scientes
you should just do it without any standard lib at all

1593528506
scientes
its simple enough

1593528508
pixelherodev
what's the best way to do that

1593528523
pixelherodev
arguably you should do that for e.g. max too

1593528528
mq32


1593528558
scientes
>  the obvious approach, r = (v < 0) ? -(unsigned)v : v,

1593528560
scientes
just do that

1593528576
pixelherodev
but that misses the point

1593528580
pixelherodev
this is a conditional

1593528585
scientes
the compiler is smart

1593528589
pixelherodev
if val_as_i32 == 128 then it's not valid.

1593528591
scientes
it uses llvm's isel

1593528602
scientes
pixelherodev, yeah it works fine in C

1593528605
pixelherodev
If val_as_i32 == -128 then branch a is taken (fits in i8)

1593528613
pixelherodev
If it's 128 then branch b is taken

1593528617
pixelherodev
`if (blah) a else b`

1593528621
scientes
I guarantee you that it uses llvm's isel

1593528624
pixelherodev
So?

1593528625
scientes
select()

1593528630
pixelherodev
That implies it's semantically incorrect

1593528644
pixelherodev
That would set r to 128 for both -128 and 128.

1593528653
scientes
that is what you want

1593528655
pixelherodev
Which means behavior should be 100% identical to current.

1593528657
pixelherodev
No, it's *not*.

1593528663
pixelherodev
We're going from i32 to i8.

1593528674
scientes
you can't do that, you don't have the info

1593528680
scientes
you can only go from i32 to u32

1593528690
scientes
you don't have the value until it is run

1593528699
pixelherodev
Yes, I can do it

1593528701
pixelherodev
i already am

1593528709
pixelherodev
it's just missing an edge case

1593528711
scientes
pixelherodev, paste some code

1593528718
pixelherodev
I linked it earlier lol

1593528748
pixelherodev
andrew was referencing

1593528803
scientes
< std.math.maxInt(u7)

1593528807
scientes
needs to be <=

1593528810
pixelherodev
I know

1593528816
pixelherodev
i said that here earlier lol

1593528870
pixelherodev
and it needs an `or == -128`

1593528880
scientes
I see

1593528903
scientes
do <= 0b1000000

1593528912
scientes
i actually like the absInt cause it explains what you are doing

1593528938
pixelherodev
scientes: that's ambiguous.

1593528955
scientes
try std.math.absInt(IMM)) < 0b1000000)

1593528975
scientes
and why does absInt throw a friggen error?

1593528977
scientes
that makes no sense

1593528981
pixelherodev
That'd be u7 < comptime_int

1593528988
pixelherodev
I didn't mean "the compiler complained, I tried"

1593528994
pixelherodev
I mean that's not readable.

1593529002
pixelherodev
It's not obvious that that's going to do

1593529015
pixelherodev
scientes: overflow

1593529026
pixelherodev
if input to absInt == minInt(@TypeOf(x)) it overflows

1593529035
scientes
pixelherodev, that is why I avoid stdlib when I can

1593529040
scientes
that is idiocy

1593529059
pixelherodev
send a patch.

1593529083
scientes
I will, but I generally avoid it because I get too much bike shedding

1593529093
pixelherodev
To paraphrase: "if you don't vote [by contributing], I don't care about your complaints about the current system"

1593529107
scientes
that is a good attitude

1593529244
pixelherodev
scientes: you actually planning on patching that?

1593529248
pixelherodev
I'll do it if you don't want to

1593529437
pixelherodev
huh

1593529460
pixelherodev
mq32: 'The Single Unix Specification defines SIGFPE as "Erroneous arithmetic operation". It's confusingly named after floating point, but in a normal system with the FPU in its default state, only integer math will raise it'

1593529475
mq32
lol

1593529483
mq32
didn't happen in my case though

1593529490
scientes
yeah you have to use divide

1593529514
scientes
64/32 will also trigger it, but you can't call that from C even though the hardware can do it better

1593529515
pixelherodev
And be on x86

1593529517
pixelherodev
and POSIX

1593529523
pixelherodev
and other platform details

1593529526
scientes
i think arm will throw it too

1593529530
pixelherodev
Nope

1593529547
scientes
then what does it return?

1593529564
mq32
funky

1593529578
mq32
you

1593529585
mq32
otherwise gcc will just remove i /= -1;

1593529607
pixelherodev
Also depends on optimizations

1593529730
mq32
pixelherodev: on arm qemu: uncaught target signal 4 (Illegal instruction) - core dumped

1593529793
pixelherodev
never mind then

1593529805
scientes
arm does normalize NaN which is nice

1593529812
scientes
makes NaN packing much easier

1593529952
scientes
yeah I don't like patching stdlib either because the way it is put together everything depends on everything else

1593530008
mq32
scientes: that's the nature of a "stdlib"

1593530015
scientes
not really

1593530018
scientes
its egregious

1593530026
scientes
like you can just do @import("std")

1593530036
scientes
but no, everything does @import("../../std.zig")

1593530059
mq32
scientes: you know the image of a snake biting it's own tail?

1593530075
mq32
you cannot do @import("mypackage") in package "mypackage"

1593530081
scientes
you can in std

1593530083
scientes
it works fine

1593530094
mq32
huh?

1593530097
scientes
std actually makes sure that it works and will throw an error if you don't do it

1593530110
scientes
*if it doesn't

1593530149
mq32
last time i checked it wasn't like that

1593530156
scientes
its been that way for years

1593530171
scientes
os.zig:    assert(@import("std") == std); // std lib tests require --override-lib-dir

1593530241
mq32
it's only in some places

1593530249
mq32
but should be patched out imho

1593555611
gonz_
fengb: Neat talk. The realest wisdom was the importance of making an informed choice based on the actual use case(s) you have, IMO.

1593558463
fengb
I agree. Zig is one of the few languages that enables this idea

1593558487
fengb
Making it easy and more direct

