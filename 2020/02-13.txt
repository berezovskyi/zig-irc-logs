1581554816
daurnimator


1581555365
mikdusan
only when --release-safe

1581555416
daurnimator
not in --debug? (or whatever the flag is?)

1581555462
mikdusan
checked (debug,release-fast,release-safe,release-small) . safe is only one that shows up with --verbose-cc

1581555504
mikdusan
yeah it's in a case statement for `BuildModeSafeRelease` only

1581555814
daurnimator
mikdusan: sounds like we should turn it on for debug too then :)

1581555918
mikdusan
clarification: it's only used in release-safe and linking with libc

1581555978
mikdusan
multiple levels

1581555979
mikdusan


1581555998
mikdusan
and we have args.append("-D_FORTIFY_SOURCE=2");

1581556156
mikdusan
in my head "release-safe" is defined as all the safety of debug build, without debug info. so yeah, it's odd that release-safe has more safety with glibc than debug

1581556610
daurnimator
mikdusan: speaking of compiler safety options. is

1581565578
fengb
Oh I didn't know you could init a union's void prong using just the enum

1581565664
daurnimator
fengb: yep. enums are just degenerate cases of tagged unions where all value types are void

1581565693
fengb
Yeah I knew you could compare, but I never tried assignment too

1581565713
fengb
Oh I see what you're saying

1581567022
fengb
`mmu.dyn.io.serial.SB >> 7 << self.current_bit`

1581567025
fengb
Sometimes my code is art. Bad art

1581567062
pixelherodev
Better than my attempts at art

1581567161
pixelherodev
When I try drawing people, it looks like if a stick figure tried drawing a person without ever having met one; it looks like a monk spent countless hours carefully etching a pattern into the paper, only to get sick and undo aeons of effort

1581580528
shakesoda
pixelherodev: sounds like my old attempts

1581580535
shakesoda
so i spent a few years on it

1581585342
mq32
hello people

1581585363
mq32
what's the current idiomatic way to pass a std.io.InStream to a function?

1581593814
phillyiscool
I'm running into various issues trying to create a C library from Zig.  A couple of things I need to do:

1581593826
phillyiscool
1. Have functions that accept []u8 (strings)

1581593833
phillyiscool
2. Have functions that returns structs

1581593853
phillyiscool
Both of which gives me "not allowed in function with calling convention 'ccc'" errors...

1581593899
betawaffle
phillyiscool: for 1, i'd suggest two arguments instead. a [*]u8, and a usize

1581593912
betawaffle
and then you can make a slice out of those

1581593922
phillyiscool
So my question is, what

1581593954
betawaffle
and for returning structs, maybe it will let you return an extern struct?

1581593973
betawaffle
(which is equivalent to a C struct)

1581593995
phillyiscool
Ah, ok

1581594002
betawaffle
you just have to think about it from the perspective of the C user

1581594026
phillyiscool
Yeah, well i am

1581594032
betawaffle
they only have C-style structs, and they only have pointers and sizes, no slices

1581594060
phillyiscool
From a C user I would expect char pointers

1581594061
betawaffle
you could define a slice-like type, but that wouldn't be idiomatic C

1581594075
betawaffle
right, char pointers

1581594095
betawaffle
you could accept a [*:0]u8, but that's not recommended

1581594104
betawaffle
(nul-terminated)

1581594111
phillyiscool
I don't write C functions that require a size when passing a char pointer..

1581594130
phillyiscool
(I'm a bit of a beginner at C so I might be doing things wrong there too)

1581594154
betawaffle
right, so that's called a nul-terminated string. it's common in C, but considered a bad idea generally

1581594168
phillyiscool
If I write a c function like void do_something(char *thing) { ... } is this wrong?

1581594187
betawaffle
because those strings: 1) can't contain any zero bytes, 2) have an unknown length

1581594230
betawaffle
it's very easy to have serious security bugs with an API like that

1581594257
phillyiscool
Hm, I can see what you mean by not having zero bytes

1581594283
phillyiscool
But.. now I'm even more confused as I don't know what I would do with the size if it was given to me

1581594302
betawaffle
basically, you're only supposed to use those when they already exist in an api and can't be changed

1581594337
phillyiscool
So what is the alternative?

1581594355
betawaffle
(in zig) if you have a [*]T and a usize, you can do ptr[0..size] to make a slice

1581594389
mq32
daurnimator: it's crazy how much a single * can make a difference :D

1581594486
betawaffle
phillyiscool: basically the consensus in the C world is that nul-terminated pointers were a mistake in almost all cases, but they are part of some APIs now and can't be removed

1581594541
phillyiscool
Ok, I need to learn about non null terminated strings because I've never seen or used them

1581594629
betawaffle
and just to be clear... string literals (in both C and zig) are still nul-terminated, but they can be used in the

1581594680
phillyiscool
How do you use them the correct way in C?

1581594682
betawaffle
the short answer is the "size" is literally just the position of the nul (zero) byte in the string, relative to the start

1581594749
betawaffle
well, in C, there's no way to get the length of a string literal at compile time (afaik), but you can use strlen at runtime

1581594775
betawaffle
which iterates over the string (at runtime) looking for the nul byte

1581594786
phillyiscool
What I'm asking is, I have a char pointer and I have a size, what do I do with that size?

1581594797
betawaffle
in zig or C?

1581594800
phillyiscool
In C

1581594811
phillyiscool
I can't program a C lib from Zig until I know how to do it right in C :)

1581594835
betawaffle
ah, right. well the idea is you'd use the size for bounds checking

1581594854
betawaffle
so that you never try to deref a byte beyond what the size indicates

1581594879
phillyiscool
So I'm really just using strings for strcmp()

1581594884
betawaffle
so for example, if you are iterating over the bytes in a string, you'd use i < size in your for loop

1581594892
phillyiscool
I could probably be using enums instead

1581594905
betawaffle
maybe you want strncmp?

1581594932
betawaffle
considered the "safe" version of strcmp

1581594955
phillyiscool
Maybe, I'm not familiar with it

1581594971
phillyiscool
I see that it adds the size

1581594974
betawaffle
that said... it's only "safe" if your n value is correct

1581595009
phillyiscool
Ok, this gives me something to think about

1581595032
phillyiscool
I think since my program is going to have a limited number of strings I should explore enums instead

1581595058
phillyiscool
Adding sizes would make the C api clunky

1581595080
betawaffle
yeah, if all the strings are comptime-known, an enum would be a good fit, probably

1581595083
phillyiscool
And since it's not handling arbitrary strings I would like to avoid that

1581595137
phillyiscool
So I haven't gotten that far, but how does exporting functions deal with comptime, since there is no comptime?

1581595170
betawaffle
an exported function has limitations placed on it's arguments/return value

1581595208
betawaffle
a comptime argument is an example of something that isn't possible (and wouldn't make sense anyway)

1581595208
phillyiscool
Right, but doesn't that mean it also can't

1581595218
betawaffle
correct

1581595230
phillyiscool
In other words, once you use an exported function then your entire library can't use comptime

1581595240
betawaffle
well, no

1581595267
betawaffle
an exported function can call any zig function

1581595269
phillyiscool
Internal things can

1581595301
betawaffle
so your exported api needs to be finite

1581595417
phillyiscool
Right, that makes sense

1581595514
phillyiscool
Well thank you for explaining this all to me, I have a bit to think about

1581595527
phillyiscool
I'm going to play around with using enums and see what that looks like.

1581596301
phillyiscool
betawaffle I don't think I can use enums because the enum needs to be defined by the C user, not my Zig library.

1581596319
phillyiscool
Which means I would need to use Zig's generics to get the type and I can't use `type` in exported functions.

1581596335
betawaffle
right

1581596351
betawaffle
i thought you meant the strings were known ahead of time by you

1581596368
betawaffle
what's the purpose of this library?

1581596385
phillyiscool
Right, I was thinking of the whole program

1581596397
phillyiscool
It provides a state machine

1581596403
phillyiscool
(the library that is)

1581596420
betawaffle
and why do you need it to export a C api?

1581596455
phillyiscool
Because almost all embedded programming is in C

1581596488
betawaffle
so you're making something that an existing embedded program written in C will use?

1581596586
phillyiscool
No, it's that I don't necessarily get to decide what language will be used so I want to have both a C and Zig version

1581596606
betawaffle
hmm

1581596633
phillyiscool
If I have the choice I'll definitely choose Zig

1581596643
betawaffle
keep in mind that zig is not production-ready

1581596648
phillyiscool
So it might just be that I need to make both a Zig and C version separately, which is fine.

1581596665
betawaffle
(yet)

1581596687
phillyiscool
Yeah, that's true too

1581605487
fengb
Is this a clever use of defer or lazy overengineering? `defer self.cur = 0; return self.out[0..self.cur];`

1581605514
BaroqueLarouche
a mix of both ?

1581605784
fengb
lol... the defer version is actually slightly faster in debug mode

1581606906
betawaffle
how much slightly?

1581606957
betawaffle
fengb: seems legit given result location semantics

1581606995
shakesoda
it smells a bit of trying to be too clever but makes sense

1581606998
betawaffle
i mean, the alternative would be two extra lines

1581607588
fengb


1581607618
fengb
About... 2 instructions

1581607820
betawaffle
well, to be fair, debug mode is

1581607854
betawaffle
lots of stack spilling, etc

1581607885
betawaffle
they are both exactly the same in release-safe

1581608219
fengb
I expected defer to be a little screwy

1581608241
betawaffle
it has very clear semantics

1581608552
metaleap
betawaffle, question about the clear semantics of defer: is there any difference between `if (b) { defer d(); }` and `if (b) defer d();`?

1581608577
betawaffle
heh

1581608586
metaleap
not sure if "block"/"scope" in zig only really "truly does exist" with braces, or even in the braceless case above up there.

1581608616
betawaffle
well, for that answer think about if (b) const foo = 5;

1581608627
betawaffle
that would be nonsensical

1581608639
betawaffle
so my answer is no, they are the same

1581608654
betawaffle
(if they aren't, that seems like a bug)

1581608660
metaleap
ah, so any conditional defer must be stated unconditionally: defer if (b) d();

1581608668
betawaffle
right

1581608688
betawaffle
there are no such thing as conditional defers in zig, afaik

1581608690
metaleap
somehow that possibility eluded me late last night :D

1581608735
betawaffle
metaleap: worth noting though the time that b gets evaluated is different

1581608746
metaleap
sure

1581608760
metaleap
in doubt one would have to capture the state at the time of deferring

1581608765
betawaffle
yep

1581608954
fengb
"Since JavaScript doesn't supports int64 yet, a signature with a int64 in wasm can't be exported to JS." wtf

1581608980
fengb
Sigh

1581609044
fengb
RIP safari support I guess :P

1581609588
mq32
metaleap: if (b) defer d();

1581609598
mq32
i don't think that is valid syntax as defer isn't a expression

1581609604
mq32
but: not sure

1581609773
metaleap
you're right

1581613306
frmdstryr
Is there any way to save a generic pointer then restore it back? I'm trying to support callbacks to a "bound fn" by saving the owner and fn then invoke it later

1581613332
frmdstryr
Ideally without needing to change the fn proto of the fn to use usize instead of *Self

1581613424
SyrupThinker
frmdstryr: If it is compile time known you can try var as the parameter type

1581613613
frmdstryr
Will that work with different "owner" types?

1581613658
frmdstryr
More or less trying to implement this

1581613671
frmdstryr
Line 350

1581613731
SyrupThinker
Hmm, that's gonna take some time over my 2G connection

1581613858
SyrupThinker
So you want a type for the closure?

1581613866
frmdstryr
Yes

1581613894
frmdstryr
The only way I can do it is using a usize then casting it back

1581613914
SyrupThinker
Yes that should work, the closure parameter would be var

1581613931
SyrupThinker
Let me write something up

1581613966
frmdstryr


1581614000
frmdstryr
Is what I have, is there any cleaner way to do that?

1581614058
frmdstryr
Ideally I'd somehow cast the addr back to the proper type in invoke

1581614068
frmdstryr
so each callback doesn't have to do it

1581614282
fengb
var is comptime only so you can't really do that dynamically

1581614511
fengb
There needs to some design around how to represent that at the machine

1581614528
fengb
A function call is basically, "push variables on the stack, jump to the instruction location"

1581614544
fengb
To make that runtime generic, you need to standardize the stack variables

1581614565
frmdstryr
Can a type be saved in a variable?

1581614583
frmdstryr
@ptrCast(self.type, addr)

1581614589
fengb
No

1581614600
betawaffle
types have zero size at runtime

1581614625
fengb
Possible generic signature (C syntax): `invoke(ctx: *void, args: *void)`

1581614694
metaleap
frmdstryr: my recent callback solution looks to the userland like L69 / L78 / L84 in

1581614764
metaleap
alas however i know (and you might not) the "context arg" SizeOf because it is all derived from a (userland-defined) union of "method" signatures

1581614816
fengb
I don't think we have a common solution for runtime callbacks yet. Best we have are interfaces, like Allocator

1581614865
fengb
I think doing callbacks "right" would basically be the same solution as closures

1581614882
betawaffle
would Allocator have been designed differently if @hasDecl and such existed at the time?

1581614937
frmdstryr
@metaleap the problem with that is it only supports one Owner type

1581614953
metaleap
you mean my "State" arg?

1581614990
frmdstryr
I was looking at the Engine

1581614991
metaleap
i support any + void. just not var. yeah ok for "overloads"/runtime-type-switching-without-predefined-unions i have no solution at hand =)

1581615015
SyrupThinker
fengb: Something like D's delegates?

1581615021
metaleap
ah there that "Owner" is just whatever type of "instance" to be passed back out to onOutput, nothing to do with the callbacks

1581615035
fengb
I don't know anything about D >_>

1581615090
SyrupThinker
Its basically a function with context as a type

1581615263
frmdstryr
^^ yes

1581615362
fengb
Lemme see if I can hack something together

1581620602
fengb


1581620604
fengb
This... is not pretty

1581620946
fengb
So in theory, you can pass &closure and &closure.call into C and it'll rip out the binded args

1581621474
frmdstryr
Anon structs make zig hard to read...

1581621497
fengb
It doesn't help that I have nested anon structs :P

1581621498
mq32
frmdstryr, it depends on the topic

1581621523
fengb
This can probably be rewritten to be less confusing

1581621551
frmdstryr
Haha yeah, I'd say it's still easier to read than the c++ Callback code

1581621613
frmdstryr
Calling Contex.bind is generating a new type correct?

1581621742
fengb
I'm already lost in my own code

1581621815
fengb
Ah, Closure.bind creates a new struct that glues together the args and the function pointer

1581621853
fengb
After looking at it... we don't need any of this @fieldParentPtr shenanigans. We can simply create a void pointer

1581621857
frmdstryr
I think the magic there is the parentFieldPtr is allowing you to use the nested closure.call to grab a ref to the original ctx

1581621866
fengb
Yeah but I don't think that's needed

1581621895
fengb
It's following the existing interface style, but we don't need that if we only have 1 function and 1 datapoint

1581621914
fengb
That only really requires func(*args)

1581621918
fengb
I need to get back to my day job lol

1581621930
frmdstryr
me too, ha, already blew off the whole morning

1581621983
frmdstryr
is *any the same as a void ptr?

1581622011
fengb
Yeah basically. I could call it *c_void if it feels better

1581622043
frmdstryr
I don't see that anywhere in the docs... is that new or something?

1581622072
fengb
No, just a convention I made up, like everything else here `const any = @OpaqueType();`

1581622173
fengb
I think someone in here recommended using opaque as an any

1581622228
frmdstryr
"void is distinct from c_void, which is defined like this: pub const c_void = @OpaqueType("

1581622813
SyrupThinker
I spoke in favor of that over *u8

1581623161
pmwhite
Is there a Zig xml library

1581623338
metaleap
fengb: "This... is not pretty" actually from just the userland perspective it's pretty nifty! i think this can be quite handy. also thx to ur snippet I learned about `*const @OpaqueType()` for any-pointers, believe it or not I clumsily used to ptr2int / int2ptr for that usecase!

1581623390
metaleap
the @call with args-tuple thing is also a swell pattern to remember

1581623802
fengb
Yeah I almost said it can't work before I remembered we added @call :P

1581623868
fengb
I think I have a much better solution but I can't get it done right now

1581623879
metaleap
if one wanted to go wild one could even attempt to hack partial-args in there. ie. supply only

1581623956
fengb
🤯

1581628048
andrewrk
greetings

1581628276
companion_cube
🖖

1581629004
fengb
Updated closures:

1581629010
fengb
I'm not sure it's any better

1581629139
andrewrk
what's the goal here? we have a pattern used by std.fmt.format and std.Thread.spawn which takes `context: var`

1581629169
andrewrk
oh I see

1581629174
andrewrk
that looks very lispy

1581629242
andrewrk
I see, the goal is to have a runtime array of thingies

1581629291
fengb
frmdstryr was asking about runtime callbacks. I had something that was horribly slapped together earlier. This is my cleanup... which may not be any better

1581629353
fengb
But this would theoretically support any callback by passing in `fn(*void) ReturnType, *args`

1581629454
fengb
Only in theory. I haven't tried exporting it to C or anything :P

1581629788
betawaffle
andrewrk: it's not friday yet

1581630009
andrewrk
eh, I overestimated the return ETA

1581630049
betawaffle
have you made any more progress on the game since the end of the stream?

1581630359
andrewrk
nope

1581632679
andrewrk
mikdusan, the "out of memory" errors happening on freebsd sr.ht seems to be happening for all the @cImport tests. I'm about to try a simple hello_world.c

1581633127
andrewrk


1581633374
mikdusan
iirc /usr/bin/time -l

1581634232
mikdusan
I am unable to reproduce; debug/zig and release/zig both OK for `zig build-exe hello.zig` with or without -lc is fine too

1581634253
mikdusan
time to see if how I build is any different

1581634286
mikdusan
oh ZIG_STATIC=ON I'll try taht

1581637099
daurnimator
mq32: hmm?

1581637747
daurnimator
mq32: oh were you talking about #4446 ?

1581638227
mq32
yep :)

1581638280
andrewrk
mikdusan, sourcehut does not support giving access to builds, so the closest thing available if you want to troubleshoot is to manually submit a manifest (that matches somewhat close what zig submits) at

1581638383
andrewrk
here's a "manifest" to get you started:

