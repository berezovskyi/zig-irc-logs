1584410976
andrewrk
I love you all

1584410981
andrewrk
stay safe out there everybody

1584411090
hryx
ðŸ’š

1584411387
daurnimator
andrewrk: I assume you're locked up in your apartment?

1584411433
andrewrk
eh not by law

1584411852
daurnimator
andrewrk: no I mean just....  normally :P

1584411861
daurnimator
working from home isn't exactly novel for you

1584411961
andrewrk
my life is basically the same, except, due to a complete coincidence, my building still has no gas for cooking

1584412073
diginet
NYC finally shut down bars, restaurants, etc.

1584412075
diginet
thankfully

1584412078
diginet
long time coming

1584412130
hryx
same, over here in San Francisco

1584412137
diginet
yeah

1584412150
diginet
de Blasio was telling people to go have fun just a couple days

1584412155
diginet
no idea wtf is wrong with that guy's head

1584412185
fengb
UK is trying to spread it as fast as possible

1584412192
diginet
I heard

1584412245
pixelherodev
Should `try` have a higher precedence than arithmetic operations?

1584413020
andrewrk
it should require parens:

1584413966
shakesoda
i want precedence for basic operations (+-*/) but everything else I don't trust inherently and add tons of parens to anyways

1584413976
shakesoda
because of how confusing it all gets

1584414031
shakesoda
also, this encourages writing lines of code that aren't overly complex

1584415177
pixelherodev
I wasn't asking if it

1584415180
pixelherodev
that's a compelling argument that it shouldn't

1584415275
pixelherodev
I like that proposal a lot

1584415329
daurnimator
andrewrk: with the new PR, does that mean that @TypeOf(foo[x..y]) is of different types depending on if x and y are comptime-known or now?

1584415336
daurnimator
s/now/not/

1584415397
andrewrk
daurnimator, yes

1584415415
andrewrk
there are other expressions in master branch where this is true

1584415457
daurnimator
seems.... weird to me. does that mean that in format/json/etc we should start treating pointers to arrays essentially the same as slices?

1584415678
andrewrk
yes - but that transition has been already happening

1584415691
andrewrk
for example `&array` coerces to a slice

1584415730
andrewrk
the difference between single-item-pointer-to-array and slice is merely whether the length is part of the type, or runtime known

1584415780
andrewrk
in the same way that it is generally preferable to have a comptime_int rather than fixed size integer when the value is known at compile-time, it is generally preferable to have a single-item-pointer-to-array rather than slice when the length is known at compile-time

1584416234
daurnimator
what about a sub-array?

1584416260
daurnimator
e.g. if I had `foo = [4]u8` `foo[1..3]` should return a `[2]u8`

1584416390
andrewrk
yep

1584417176
andrewrk
slices and single-item-pointer-to-array are fundamentally the same thing, with the difference only in whether the length is comptime or runtime known. the language should reflect that - it might take some adjustments, but this is in that direction

1584417368
daurnimator
k

1584418209
diginet
has anyone actually done work with zig on s390x?

1584418235
daurnimator
diginet: I recall someone came in for about half a day and did some playing around..... but not really I think?

1584418251
daurnimator
diginet: we'd love for someone to take it on

1584418253
diginet
ok, I was just kinda curious

1584418261
diginet
I know a little about z

1584418275
diginet
I am vaguely entertaining a port of LLVM to vax

1584418279
diginet
just for the hell of it

1584418281
diginet
that or m68k

1584418294
diginet
so it would be fun to see if zig could then be ported to one of those

1584418295
daurnimator
diginet: are you interested in just targetting it? or actually running the compiler on it?

1584418307
diginet
just targetting, not necessarily self-hosting

1584418319
daurnimator
then you don't need to port LLVM...

1584418343
daurnimator
diginet: how do system calls work there? is there a libc?

1584418355
diginet
for VAX?

1584418365
diginet
there is a port of glibc but not musl I believe

1584418378
diginet
VAX is weird in that it kind of has hardware-enforced calling convention

1584418380
diginet
oh, syscalls

1584418386
daurnimator
diginet: you started off with s390x

1584418389
diginet
oh

1584418391
diginet
right

1584418397
diginet
I;m not sure on s390x

1584418621
pixelherodev
Back to work on LLVM codegen :D

1584418640
pixelherodev
Parser is now sufficient for the simple tests I'm giving it (and Lexer is basically completely good when it comes to Zig output)

1584418686
pixelherodev
Register allocator design is simple and straightforward for the first target, so I hope to have the test running in the morning :D

1584418704
diginet
pixelherodev: codegen for what?

1584418818
pixelherodev
Custom 32-bit target called LIMN

1584418834
diginet
nice

1584418836
pixelherodev
I also plan on adding Z80 short-term, and x86 in the longer run

1584418853
diginet
x86 ..? it doesn't already have that?

1584418863
diginet
I've been considering porting LLVM to my own arch

1584418864
pixelherodev
This is a completely custom backend

1584418868
diginet
ah

1584418870
pixelherodev
It's self-hosted in Zig

1584418901
pixelherodev
It lexes and parses LLVM IR directly, builds AST, then passes that along to backend (with some room for optimization passes in the middle)

1584418961
pixelherodev
It's also lightning fast (runs in single-digit milliseconds in release mode), which is crucial because I plan on running it within the emulator it's targeting

1584418970
pixelherodev
And that'll of course have a massive performance overhead

1584419029
pixelherodev
Heck, if I can make a performant x64 backend, it'd probably be useful for reducing compile times in debug mode for Zig

1584419178
pixelherodev
But i haven't worked with x86 asm in so long I'm honestly not sure I'd be able to do that

1584429214
daurnimator
diginet: so what are you going to try? :) I'm intrigued

1584429230
diginet
daurnimator: depends on how much time I have

1584429236
daurnimator
diginet: it would be really cool to just target VAX or s390x from the regular zig compiler.

1584429236
diginet
I have my own compiler to work on

1584429243
diginet
daurnimator: yeah I think so

1584429262
daurnimator
diginet: for high tier support we'd need some record of the system functionality available (syscalls/libc)

1584429273
diginet
it would be neat to see zig code running on 4.3BSD/VAX

1584429303
daurnimator
diginet: what is your compiler? and if you're working on your own language; what brings you to zig?

1584429335
diginet
daurnimator: yes, own language. I've been following zig for awhile and I just like staying in the loop with emerging languages

1584430001
diginet
daurnimator: I am deeply sympathetic to zig's eschewing of any and all macros. the comptime system is conceptually a dual to the staging scheme I have in mind for my language

1584434774
Kingsquee
hol' up

1584434783
Kingsquee
is it possible to have comptime values as struct fields?

1584434788
daurnimator
Kingsquee: sure

1584434824
Kingsquee
error: expected type 'type', found 'comptime_int'

1584434825
Kingsquee
integer_bits: I

1584434848
mq32
what is "I"?

1584434858
mq32
sounds like I is an comptime_int and not a type

1584434858
Kingsquee
I's a comptime_int

1584434877
mq32
you have written "integer_bits: 4" ;)

1584434892
mq32
zig expects a type, if you want to a have a type with 4 bit width, look at @Int

1584434912
mq32
or how was it called?

1584434913
daurnimator
Kingsquee: that's a comptime-type. not a comptime-value

1584434921
Kingsquee
mq32: I essentially want rust's phantomdata on a type parameter

1584434931
mq32
what is phantomdata?

1584434935
mq32
can you elaborate that?

1584434940
Kingsquee
oh god what's a phantomdata

1584434951
Kingsquee
so if I have struct Foo<T>

1584434978
Kingsquee
but T is a type that's used only for storing information at compiletime, rather than defining the type of a field

1584434993
mq32
ah, just export it from your type instead of a field

1584434996
Kingsquee
you still have to store the type as a field somehow, or the compiler will complain about an unused type parameter

1584435004
Kingsquee
so we use a field of type PhantomData<T>

1584435023
mq32
fn(comptime some : Something) type { return struct { pub const phantm = some; }; }

1584435037
Kingsquee
ooh const

1584435048
daurnimator
mq32: I was just writing the same thing :)

1584435050
mq32
just a public "static" war

1584435051
mq32
*var

1584435064
mq32
we don't need war, we need var! :D

1584435068
daurnimator
Kingsquee: comptime struct fields are something else entirely :)

1584435100
Kingsquee
VAR

1584435103
Kingsquee
WHAT'S IT GOOD FOR

1584435132
Kingsquee
alright this makes sense

1584435137
Kingsquee
thanks!

1584435171
mq32
kids, never use C++Builder!

1584435176
mq32
it is pain

1584435218
Kingsquee
so, is there a difference between struct { foo: u8 } and struct { var foo: u8 } ?

1584435229
mq32
yes

1584435232
daurnimator
Kingsquee: 1. is a field. 2. is a namespaced global

1584435234
mq32
the one thing is a field (the first one)

1584435240
mq32
damn you, daurnimator! :D

1584435248
Kingsquee
dat wpm tho

1584435264
daurnimator
traditional cherry blues baby

1584435375
mq32
i should search my usb-ps/2 adapter

1584435384
mq32
model m masterrace

1584435465
diginet
model F is even better

1584435466
diginet
nkro

1584436450
Kingsquee
so if I have fn Foo(comptime T1: comptime_int, comptime T2: comptime_int) and I want to return an integer with the number of bits T1 + T2

1584436453
Kingsquee
how would I do this

1584436485
Kingsquee
i.e. const foo: u3 = Foo(1, 2);

1584436511
mq32
you want an integer with the width on T1+T2 bits?

1584436515
mq32
or with a value of T1+T2?

1584436776
Kingsquee
width

1584436782
mq32
const I = @Type(std.builtin.TypeInfo{ .Int = .{

1584436782
mq32
.is_signed = false,

1584436782
mq32
.bits = 40

1584436782
mq32
} });

1584436789
mq32
just replace "40" with T1+T2

1584436805
mq32
or some other arbitrary math that yields a comptime_int

1584436840
mq32
(note that

1584437103
Kingsquee
what would the return value be?

1584437154
Kingsquee


1584437174
mq32
ah, you're messing up type and value ;)

1584437176
Kingsquee
oh wait I'm being dumb

1584437178
Kingsquee
yes

1584437182
mq32
return value is a number :D

1584437188
Kingsquee
I HAVE A CONCUSSION

1584437287
mq32
it's a bit unusual to have "type is only a expression/value" semantic :D

1584437291
mq32
but its soooo powerful

1584437427
diginet
it would be interesting to attempt to provide a formal account of zip's type-level computation

1584437639
Kingsquee
this language is amazing

1584437649
Kingsquee
and my head hurts

1584437654
Kingsquee
goodnight

1584438179
diginet
ok

1584438227
TheLemonMan
porting Zig to linux/s390x should be pretty straightforward

1584442112
diginet
TheLemonMan: I want to see zig on VM or z/OS

1584442124
diginet
actually, no, MVS is always and I don't want to touch it, ever

1584442130
diginet
s/always/awful

1584442141
diginet
zig on VMS, on the other hand, would be cool

1584442530
TheLemonMan
zig on toasters, zig on mainframes, zig everywhere

1584442557
diginet
I am currently working on targetting my compiler for BLS, sooooo

1584442573
diginet
which is, btw, a sign-magnitude system

1584442586
diginet
well kinda. it's weird. BLS was JS before JS existed. It really on has floats.

1584442603
diginet
(well, and descriptors. but among numbers it only has octal floating point)

1584442684
mq32
diginet: zig has two's comlement integers by-definition, so you have to emualate that thenâ€¦

1584442761
diginet
mq32: I thought default arith operators had error on overflow by definition?

1584442796
mq32
yes, but you have wrapping-operators

1584442812
diginet
well, those could be emulated

1584442816
mq32
Wrapping Addition.

1584442817
mq32
Guaranteed to have twos-complement

1584442830
mq32
also @bitCast: Convert i32 to u32 preserving twos complement

1584450201
marijnfs
how do i print a c string properly?

1584450217
marijnfs
i get u8@7f50108d5115

1584450221
marijnfs
when i format it

1584450821
mq32
{c}

1584450827
mq32
afaik

1584450881
fengb
diginet: thereâ€™s another recent language thatâ€™s writing itâ€™s own OS ðŸ™ƒ

1584450935
fengb
Wait nvm, z/OS is a real thing. Iâ€™m being dumb

1584451020
marijnfs
as {s} seems to work as well

1584451030
marijnfs
how do i get field access to a c struct?

1584451271
mq32
use it like any other struct

1584451279
mq32
extern struct is not different in usage than c struct

1584451283
mq32
except you mean a c pointer

1584451287
mq32
then you need .*.

1584451884
marijnfs
m32 thanks! that works

1584451904
marijnfs
that doesn't work automatically huh

1584452423
mq32
yeah

1584452439
mq32
because zig does not allow direct pointer access to pointer-to-many

1584452452
mq32
and a C pointer is both pointer-to-one and pointer-to-many

1584452472
mq32
if you import your functions yourself, you can always use [*] or * instead of [*c]

1584454672
marijnfs
mq32: ok because a c pointer might be used as an array

1584454744
mq32
exactly

1584462575
forgot-password
Is there an explanation for builtin.AtomicOrder? I'm trying to grasp atomic operations in general, but I can't find any proper resources :/

1584462640
mq32
read the c++ documentation on those :D

1584462656
mq32
they are semantically the same

1584462664
TheLemonMan
forgot-password,

1584462671
mq32


1584462672
mq32
damn :D

1584462679
mq32
today is the day of ninjas

1584462708
forgot-password
Well well, which one am I supposed to click? :P

1584462736
forgot-password
Thanks though

1584462777
mq32
it's a bit of work to get your head wrapped around those semantics

1584462788
mq32
especially as they are not relevant on x86 :D

1584462789
mq32
but on ARM

1584462803
fengb
This one:

1584462892
forgot-password
Yours seem too shady, so I chose this one:

1584462911
fengb
Fair point. I wouldn't trust my links either

1584462928
mq32


1584462939
marijnfs
is there a thread safe queue?

1584462991
forgot-password
There is @import("std").atomic.Queue, afaik

1584463013
marijnfs
ah nice

1584463022
marijnfs
it can be hard to find this stuff sometimes

1584463033
TheLemonMan
this video cleared any doubt I had about atomics

1584463073
forgot-password
Wow, thank you for the enlightenment, I can only suggest everybody else to check it out :)

1584463169
forgot-password
Does an @atomicStore alone prevent torn reads?

1584463378
forgot-password
I feel like my questions seems kind of underspecified?

1584463443
mq32
i think it depends on the mode you pass in

1584463464
mq32
using seq_cst will create a barrier for reordering

1584463489
mq32
so all reads/writes before your store will be executed before the store

1584463493
mq32
no reordering will happen

1584463740
forgot-password
So if I dereference a pointer on one thread, and change the pointer on another one, does it guarantee to fully load the pointee first?

1584463996
mq32
pointers should be inherently atomic as they can fit in a register

1584464018
andrewrk
the way that atomics relate to threads has only to do with data races. so the answer is yes, you will see one value or the other, but not a torn read

1584464062
andrewrk
the other important property of atomics is how they communicate to the compiler, and how atomic operations act on the same thread with respect to each other and other memory operations

1584464090
TheLemonMan
uh I think that since the atomic write locks the cache line it's writing to the deref will either read the old value or the new one

1584464288
mq32
i wonderâ€¦

1584464294
mq32
pointers are not atomic on AVR hardware

1584464341
mq32
so reading/writing a pointer is not an atomic operation and they should be load with an atomic operation (p = @atomicLoad(&ptr) instead of p = ptr)

1584464571
mq32
huh. i just tried to compile a pointer load for AVR

1584464577
mq32
and the code exploded

1584464660
andrewrk
you might try llvm10 branch for AVR

1584464714
mq32
hm. i should update some day anyways :D

1584464721
mq32
but godbolt-avr right now is borked

1584464728
mq32
LLVM ERROR: Cannot select: 0x555556d20c40: i8,ch = load<(dereferenceable load 1 from %ir.result)> 0x555556d20b70, FrameIndex:i16<0>, undef:i16, example.zig:6:5

1584464729
mq32
0x555556d20eb0: i16 = FrameIndex<0>

1584464729
mq32
0x555556d21050: i16 = undef

1584464841
mq32
ah, AVR support in LLVM was experimental until now

1584465093
mq32
andrewrk: How's the 0.6.0 release going on?

1584465105
mq32
one month left if i read the milestone right?

1584465482
fengb
We need to increase the bus factor

1584465519
mq32
exp(bus)

1584465794
andrewrk
mq32, yes that's right. it's about time to start working on release notes

1584465841
andrewrk
I'm sneaking in one more major language change first tho

1584465847
andrewrk
#4752

1584465848
mq32
oh, spoilers?

1584465874
mq32
oh nice! this is useful :)

1584465950
andrewrk
I expect llvm 10 to be released this week

1584465956
fengb
Sweet, thatâ€™d fix some of my weirdo workarounds

1584465963
mq32
nice! i feel sad that i don't have much time right now to continue my projects, but looking forward to it :)

1584465994
fengb
Hmm... would it be a problem if we further blend array pointers and slices?

1584466066
mq32
want to finish my pet language project :)

1584466200
FireFox317
TheLemonMan, the video xd, i had to laugh :^)

1584466225
mq32
FireFox317: one of the best talks about atomics for sure

1584466246
FireFox317
definitely

1584466374
discip
Comptime is very useful but it's bloating compilation times significantly. Are there plans to improve its performance or should I just treat comptime like C++ templates?

1584466406
discip
(aka, use them sparingly)

1584466411
FireFox317
Does someone in here know why a global variable that is set to undefined ends up in the bss section? Like the bss section is for static data that is zero right? Shouldn't it end up somewhere else?

1584466432
forgot-password
discip: I noticed that as well. When I wanted to pre-populate a table with data it took multiple seconds at comptime and only a few milliseconds at runtime.

1584466458
TheLemonMan
FireFox317, is it 0xAA-filled when you read it back?

1584466484
BaroqueLarouche
don't judge comptime performance yet, it should be better in the self-hosted compiler

1584466496
TheLemonMan
yeah comptime is slow, check out #4055 for more info/news

1584466497
discip
forgot-password: My number are 15-20% increase in compilation time per comptime function. One of those functions I wrote myself and the other is allocPrint

1584466500
FireFox317
TheLemonMan, i'm doing bare metal stuff

1584466538
mq32
FireFox317: i think it's actually reasonable to put "undefined" variables into .bss

1584466545
mq32
because it imposes the lowest overhead

1584466564
Bekwnn
shouldn't caching make comptime not really a pain on rebuilds though?

1584466591
TheLemonMan
FireFox317, hm? you can still check the value and flash a led/print a message/blow up if the value is not correct

1584466760
FireFox317
TheLemonMan, yeah sure i'm doing qemu stuff now anyway so all the memory is already 0, but i remember for clashos (rpi) we had a big static buffer and on startup that took a long time to zero all that data

1584466760
TheLemonMan
oh, are you compiling in debug mode?

1584466792
TheLemonMan
you probably had a slow memset implementation heh

1584466793
FireFox317
But in that case i could probably use linksection to put it in a different section which i wouldn't zero out on startup

1584466859
FireFox317
TheLemonMan, yes maybe. But I was expecting global static undefined data in release mode to be really undefined, but it still ends up in the bss section

1584466998
andrewrk
discip, I expect comptime perf to roughly match cpython's perf in the future. right now it is an order of magnitude worse

1584467025
FireFox317
I guess there is no such a section that isn't initialized, we only have .text, .data, .rodata, .bss

1584467103
TheLemonMan
yeah that's somehow expected in release mode, why should LLVM place garbage in those values? that'd be just a waste of space

1584467128
TheLemonMan
were you seeding some RNG with that data? :^)

1584467191
andrewrk
for non-freestanding applications, bss makes the most sense since it's "free". but for freestanding applications, it could make sense to have a truly undefined linker section, that the initialization code would not have to memset

1584467222
FireFox317
andrewrk, that is exactly what i mean, had some trouble explaining it

1584467251
andrewrk
actually we already kinda want something like this even for non-freestanding- I believe I opened a proposal to put undefined stuff in its own linker section and then memset it to 0xaa before main()

1584467271
FireFox317
only in debug modes indeed

1584467286
andrewrk


1584467424
FireFox317
for now i guess i can just put the data in another section which i don't initialize at startup

1584467449
andrewrk
that should work

1584467480
TheLemonMan
I really doubt QEMU will pass you non-zeroed pages

1584467566
andrewrk
I believe the goal is to memset() fewer bytes on startup

1584467582
FireFox317
they pass zeroed data indeed, my code was working when i forgot to zero the bss section

1584467680
FireFox317
but thanks for the insights guys, i'm understanding it better now :)

1584467880
frmdstryr
FireFox317 you could just modify the startup asm / code to just not set the bss at all

1584467927
FireFox317
frmdstryr, that's a problem because if you define a global static variable and set it to zero it will also end up in the bss section

1584467944
pixelherodev
`linksection()`?

1584468114
FireFox317
a wait, i think there is .sbss which is for zero initialized global stuff and normal .bss for uninitialized `var x: u32 = undefined`

1584468150
FireFox317
nvm s stands for small in this case lol

1584468183
TheLemonMan
IIRC it's not even used by ARM

1584468686
frmdstryr
Makes sense, why waste the flash space .... Sounds like you really need a separate section then.

1584468899
FireFox317
TheLemonMan, arm not, RISC-V apparently does

1584468904
andrewrk
FireFox317, you can linksection() all the undefined ones with ".myspecialbss", and then in the script, put .myspecialbss into the end of bss after the other bss, but capture the pointer address at that point. then when you memset, use that address as the end

1584468916
andrewrk
does that make sense?

1584468955
FireFox317
ha andrewrk thanks, yeah i knew how to do that :)

1584469162
FireFox317
maybe i should explain a bit more why i want this. I'm trying to write a bare metal app completely in zig. So obviously i need some inline assembly, but i also need some space for a stack and i defined that as a global undefined variable and did not expect the compiler to put it in the bss. There is no need to zero out the stack :) Thanks for the help guys!

1584469187
FireFox317
But the workarounds are clear now

1584469345
andrewrk
I think this can be improved eventually

1584469538
frmdstryr
Good luck. I spent part of the last 3 months porting parts of the stm32h7 hal to pure zig. It's a nontrivial time consuming task. Pretty sure the biggest reason why people

1584469585
FireFox317
well for now it's still a quite pleasant task actually :)

1584469609
andrewrk
if the hal is in c you can still use zig to cross compile it

1584473155
FireFox317
andrewrk: using `-target riscv64-freestanding-none -mcpu=baseline_rv64-c` still outputs compressed instructions, the c in cpu-features stands for compressed instructions, but i'm removing that. --verbose-llvm-cpu-features outputs `name=kernel triple=riscv64-unknown-unknown-unknown

1584473155
FireFox317
name=kernel target_specific_features=+64bit,+a,-c,+d,-e,+f,+m,`

1584473155
FireFox317
name=kernel target_specific_cpu_args=

1584473187
FireFox317
i'm using llvm10 branch btw, but that shouldn't matter?

1584473238
andrewrk
that debug output means that we have successfully requested "-c" from LLVM, so this may be an upstream bug

1584473254
andrewrk
the next step will be creating a small reproducible test case for an llvm bug report

1584473276
FireFox317
yes but the triple is riscv64-unknown-unknown-unknown is that correct?

1584473295
andrewrk
yeah that's riscv64-freestanding according to llvm

1584473296
pmwhite
I may have asked this here before, but is there a way to not display the command that failed on a compilation failure? I'm on nixos, and I'm linking several libraries, so the command that gets built up is pretty large and scrolls the errors off the screen when I get a compiler error.

1584473323
FireFox317
okay, will try to make a small test case

1584473339
andrewrk
pmwhite, there is not, but maybe there should be

1584473377
andrewrk
FireFox317, if you can reproduce the problem with clang that would be 90% of the work of an llvm bug report

1584473437
andrewrk
if you cannot reproduce with clang, maybe zig is doing something horribly wrong

1584473503
fengb
"No discussion of things that are both controversial and off-topic." lucky for me I'm usually either-or ðŸ™ƒ

1584473589
FireFox317
andrewrk: happens with release-safe and release-fast only, release-small works fine. what is the clang equivalent of release-safe/fast?

1584473751
andrewrk
-O3

1584475548
FireFox317
andrewrk: i was missing a volatile, that was the problem xd

1584475784
andrewrk
hmm how did that end up causing compressed instructions?

1584476169
ifreund
anyone haven a simple example build.zig I could copy from? docs seem to be sparse currently

1584476417
FireFox317
it didnt. I thought it was a compressed instruction, but it wasn't.

1584476466
BaroqueLarouche


1584476521
ifreund
BaroqueLarouche: that's great, thanks

1584476550
mq32
ifreund, what do you need on features?

1584476558
mq32
a default build.zig can be created via

1584476564
mq32
zig init-exe or zig init-lib

1584476572
ifreund
I'm planning on doing advent of code 2018 to get my feet wet

1584476617
ifreund
i think i'd just use addExecutable there instead of addLibrary in the zigimg example

1584476806
andrewrk
FireFox317, ah ok that actually makes me feel better

1584476895
ifreund
mq32: thanks, init-exe was really what I was looking for it turns out

1584476926
mq32
you're welcome

1584483176
danyspin97
Is there any way to treat a literal string as []u8 instead of "*const []u8"

1584483252
danyspin97
found in the docs, thanks anyway!

1584483314
danyspin97
well the doc shows an example but do not solve it

1584483334
mq32
no, you cannot use a literal as a mutable string

1584483344
mq32
you can dereference the literal though, it's a pointer-to-array:

1584483357
mq32
var mut_string = "hello".*; mut_string[0] = 'A';

1584483401
danyspin97
that would be handy to do in tests at least

1584483422
mq32
just go with the reference-method, it's simpler

1584483429
mq32
and mutable string literals are a bad idea since C

1584483445
danyspin97
fn (myarr: [*]u8) ?

1584483480
mq32
this is something different ^^

1584483487
mq32
what do you want to achieve in the end?

1584483510
danyspin97
i have a function that takes []u8 because it will modify the string

1584483530
danyspin97
then in test I call foo("my literal")

1584483552
mq32
that's not the right way, as string literals are immutable ;)

1584483565
mq32
and no, it's not a good idea to allow this for tests or anything anyways

1584483578
mq32
just introduce a variable

1584483585
mq32
you should test the mutation anyways

1584483643
danyspin97
yea but that would mean 3 more variable per test

1584483682
danyspin97
2 variables*

1584483685
mq32
so?

1584483781
danyspin97
hmm I'll try and see first

1584483819
mq32
do that :)

1584484645
danyspin97
if I have `var line : [4]u8 = " foo";`

1584484672
danyspin97
and a function parseKey(line: []u8) *const []u8

1584484688
danyspin97
how can I pass line as the arg of parseKey?

1584484701
mq32
parseKey(&line)

1584484713
mq32
why do you return a pointer-to-slice?

1584484756
danyspin97
const []u8 is considered a syntax error

1584484832
fengb
[]const u8

1584484869
danyspin97
which cannot be used with operator ==

1584484898
fengb
Doing == is bad with any array value

1584484991
mq32
use std.mem.eql()

1584484993
danyspin97
sorry, I forget that zig is low level language

1584484996
danyspin97
Thanks!

1584485339
mq32
happens from time to time

1584486346
danyspin97
if I change line inside this function, the change is not propagated outside: `parseKey(line: []u8)`

1584486411
danyspin97
which I guess is because the argument has been copied

1584486462
mq32


1584486468
mq32
works for meâ„¢

1584486472
mq32
how do you modify line?

1584486494
danyspin97
line = line[start .. end]

1584486499
mq32
well

1584486511
mq32
this should not be allowed in the first place as aarguments in zig are immutable

1584486522
pixelherodev
Got my first function compiled using my new backend architecture :D

1584486533
mq32
also this will not change the slice you passed in

1584486543
mq32
but only exchange the refernce

1584486556
danyspin97
as arguments you mean start and end?

1584486568
mq32
no

1584486574
danyspin97
I get it

1584486590
mq32
if your funtion is "fn parseKey(line: []u8) ???" then you are not allowed to change "line"

1584486595
mq32
because "line" is immutable

1584486603
mq32
note that the contents of "line" are NOT immutable

1584486621
danyspin97
but the size is

1584486633
danyspin97
so I should use instead a pointer to u8

1584486637
mq32
no

1584486647
mq32
what should your function do?

1584486661
danyspin97
parse a line, get a key and the rest of the line

1584486681
mq32
so parsing something like "  foo := bar"

1584486686
mq32
and return both "foo" and "bar"

1584486694
danyspin97
which I resolved using OOP first, but now that I am translating to zig I am changing the paradigm

1584486718
danyspin97
kind of that

1584486743
mq32
look at the following code (pllease wait, i'm typing as fast as i can)

1584486764
danyspin97
no problem, take your time

1584486998
mq32


1584486998
mq32
here ya go

1584487022
mq32
that function will search for ":=" and will return what is in front of := as key, with spaces and tabs stripped

1584487023
mq32
same for value

1584487028
mq32
value is after ":="

1584487058
mq32
if no ":=" is found, "null" will be returned

1584487124
danyspin97
thanks!

1584487135
mq32
ah well

1584487137
mq32
it's index + 2

1584487141
danyspin97
now I think I need a huge refactor..

1584487144
mq32
but hey, aside from that it works :D

1584487151
mq32
danyspin97: much simpler than you initially planned?

1584487171
danyspin97
just different

1584487176
danyspin97
lemme show you

1584487252
danyspin97


1584487329
danyspin97
it parses the line "foo=bar" and returns "=bar", then I call .key to get "foo"

1584487379
danyspin97
then I use another class that takes "=bar" and returns "bar" and another that check for quotes, but I guess it's time to rewrite this mess :D

1584487466
mq32
yep, sounds pretty overengineered

1584488353
danyspin97
mq32: just checked your code (with tests) and works file, thanks for your huge help!

1584488363
mq32
you're welcome

1584488462
danyspin97
and tests now look better :D

1584488778
danyspin97
since you've done the code and it is now on github, do yo

1584488793
danyspin97
u want your name on the copyright?

1584489164
mq32
i don't care

1584489182
mq32
it's nice to know that i helped you but that function isn't worth a copyright notice :D

1584489224
mq32
i'm off to bed

1584489240
danyspin97
g'n :)

