1599783007
leeward
andrewrk: I figured it was something like that, thanks. std.atomic.Queue it is for now.

1599784530
daurnimator


1599784567
daurnimator
^ libgccjit

1599792971
daurnimator
JimRM: I think there was an issue where compiler-rt was not respecting cpu features when cached. does your issue go away if you delete zig-cache (both in project and in your home dir)?

1599793031
daurnimator
JimRM: oh. nevermind, seems you figured it out. you should be able to subtract features from a cpu target in your target string

1599804588
pixelherodev
hmm. VSCode + ZLS is good, right?

1599804650
Nypsie[m]
In my opinion it's really solid

1599817303
ifreund
nice, I'm almost done wrangling the build system to do what I want :)

1599817348
tsujp
Are there any Zig web frameworks out and under the radar yet?

1599817358
tsujp
Similiar to how Flask is for Python, Amber is for Crystal, Sinatra is for Ruby etc

1599817445
tsujp
or even how Hugo is for Go but Hugo is purely static iirc, I'm talking general webserver stuff

1599817480
ifreund
tsujp: well there's

1599827654
ifreund
any tuple experts around? I can't get this to compile

1599827675
ifreund
using it gives

1599827867
WilhelmVonWeiner
If I want to pass an exit status to the shell, is declaring main as `pub fn main() !u8` correct?

1599827882
WilhelmVonWeiner
(I think exit status is 8 bits)

1599827898
Nypsie[m]
args[i] doesn't work, you either need to specify it by index such as [0], [1], or inline for over the tuple itself

1599827944
Nypsie[m]
iirc

1599828059
ifreund
looks like this works

1599828071
ifreund
i'll see if I can put it in a loop

1599828148
Nypsie[m]
```     inline for (args) |arg, i| buf[i] = if (i < args.len) arg;

1599828148
Nypsie[m]
``` works

1599828151
Nypsie[m]
woops

1599828154
Nypsie[m]
inline for (args) |arg, i| buf[i] = if (i < args.len) arg;

1599828186
Nypsie[m]
should check args.len to buf.len, I forgot that part

1599828238
ifreund
nice

1599828438
Nypsie[m]
Btw, not sure if the tuple is user provided, but in that case you may want to ensure the length is correct, or else you may not completely fill the buffer in case they only provide a length of 3.

1599828469
ifreund
yeah I have a @compileError length check already

1599828483
ifreund
but leaving the buffer unfilled is actually ok

1599828505
Nypsie[m]
I see! cool

1599828611
ifreund
huh:

1599828628
ifreund
this is with prctl as

1599828666
ifreund
os.SEC.... is a comptime_int

1599828783
Nypsie[m]
The heck

1599828793
ifreund
oh wait i'm being dumb

1599828803
ifreund
called os.linux.prctl not os.prctl

1599828825
ifreund
builds now

1599828828
Nypsie[m]
Oh lawl, didn't even notice

1599828846
Nypsie[m]
Nice!

1599828929
ifreund
ugh, the error set for os.prctl is gonna be a little ugly

1599828955
ifreund
maybe there's a way to generate it at comptime based on what is passed, as the errors are very dependand on the parameters

1599829101
Nypsie[m]
Can't you catch them, and return a more 'generic' error?

1599829179
ifreund
no, because that would lose information

1599829200
Nypsie[m]
Makes sense

1599829201
ifreund
see the errors section in the prctl(2) man page

1599829211
Nypsie[m]
Alright, 1 sec

1599829309
Nypsie[m]
Hmmm, I see what you mean

1599829417
Nypsie[m]
So you want to provide an error for each error case, rather than those 7-8 error codes?

1599829507
ifreund
well, it's more like a different error set based on what was passed as the first parameter

1599829574
ifreund
maybe I'll just do the single superset for now though, reducing the error set in some cases isn't a very breaking change

1599829850
Nypsie[m]
Yeah I think that's the better option. The caller can then still decide to merge/slim down the error set do they wish to do so.

1599837655
ifreund
oops, that u16 shoulda been a u31

1599842227
WilhelmVonWeiner
is there a reason `_ =` is the canonical way to ignore an expression value as opposed to keyword such as "discard"? or has it just not really been addressed

1599843429
leeward
WilhelmVonWeiner: It's common in other languages.

1599843450
leeward
_ is idiomatic in many languages for "I don't care about this value."

1599843467
WilhelmVonWeiner
in destructuring i suppose

1599843491
WilhelmVonWeiner
i've never thought of it like Zig uses it, makes sense I suppose

1599843732
Michcioperz
i think coming from rust i was surprised there was no `let` in front of it

1599843749
Michcioperz
i mean, `var` or `const`

1599843760
WilhelmVonWeiner
coming from nim I was surprised you couldnt just `discard` it

1599843761
leeward
It's not a bad idea though. "discard" is a lot more obvious in its intent to new readers, and one of Zig's goals is to be easy to read.

1599843766
WilhelmVonWeiner
so used to discarding in nim

1599843767
fengb
It's a special variable. I think there's a proposal to make it a keyword

1599843793
WilhelmVonWeiner
I like explitly handling all return values though

1599843804
WilhelmVonWeiner
languages should enforce that

1599843822
fengb
+1

1599843940
leeward
I particularly like that you can't discard errors.

1599844020
leeward
At least, not the easy way. "catch {}" is a lot harder to type than "try"

1599848309
leeward
Fun story: I have a format string "foo {} {}" and I want it to print either "foo u 1" or "foo d 1" depending on some value. So I create a u8 and assign either 'u' or 'd' to it. Whoopsie.

1599852308
leeward
I'm taking a slice that I got out of tokenize and passing it to a C function (that needs a [:0]u8). Is there a better way than stuffing it in a new array, writing a 0 to the end, and slicing that?

1599852326
leeward
(that's std.mem.tokenize)

1599852370
leeward
const sliced: [:0]const u8 = copy[0..token.len];

1599852466
leeward
I guess there mest be, since that isn't legal.

1599852573
Nypsie[m]
Guess you could use std.cstr.addNullByte(allocator, slice)

1599852656
leeward
Ahah, I didn't use that (because it wants an allocator) but its code told me what to do. buf[0..len:0]

1599852675
leeward
Unfortunately, it looks like the "add a 0 to a copy" is the way to go.

1599854176
ifreund
leeward: maybe you want "foo {c} {}"

1599854188
ifreund
then in will format the int you pass as an ascii character

1599854231
ifreund
i.e. a u8 with the value of 'u' or 'd' would work

1599854323
cren
so `anyframe` is a type that represents a pointer to a stack frame

1599854371
cren
is there something like a `specificframe` type?

1599854377
cren
it's just that the name seems to suggest it

1599854510
ifreund
cren: @Frame(foo)

1599854673
leeward
ifreund: Yep, that's what I ended up using. I was just being silly.

1599854754
ifreund
nice :)

1599855984
fengb
Damn, LemonBoy is on a roll

1599858001
andrewrk
that's package manager progress right there :)

1599858094
ikskuh
uuuuh, nice. do i see right that we now have compression/decompression? \o/

1599858154
Nypsie[m]
No compression yet afaic

1599858157
andrewrk
not compression

1599858178
ikskuh
only decompression? enough formost use cases

1599858880
andrewrk
ifreund, if you had waited ~1 more week, a bunch of these PRs would be in stage2 instead of stage1 :D

1599858891
andrewrk
(this is not a complaint, just musing)

1599858932
ikskuh
time for stage2 hype again?

1599858968
ifreund
that would have been more pleasant that hacking on stage1 :P

1599859043
ifreund
thanks for all the quick merges by the way, just one more to go and then I'm happy for now

1599859291
andrewrk
which one?

1599859331
ifreund


1599859425
andrewrk
ah nice, --full-name is already implemented in my branch (as -femit-bin=foo)

1599859454
andrewrk
if you can wait on that one it would actually be easier for me to ignore the PR and just try to finish up #6250 (the --full-name one)

1599859537
ifreund
oh if we have --full-name/-femit-bin=foo then -omit-lib-prefix is undeeded

1599859600
ifreund
though it might be a little nicer to use if you want zig to determine the proper extension based on the target for you

1599859746
ifreund
Yeah I think I should probably just wait on #6250

1599864583
andrewrk
I'm working on it as fast as I can. That branch is a doozy

