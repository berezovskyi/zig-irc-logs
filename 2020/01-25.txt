1579910423
Snektron
A compromise might be to strip off the VK_ and the enum's type

1579910430
Snektron
so that'd by .INSTANCE_CREATE_INFO

1579910477
Snektron
Since the enum name is only really there for C reasons

1579910487
Snektron
plus it should be rather obvious how to make the change

1579910532
Snektron
There is also another thing, which im not quite sure of what to do with it

1579910565
Snektron
There are two ways of calling vulkan commands, via static or dynamic dispatch

1579910588
Snektron
The dynamic dispatch involves loading functions as function pointers

1579910635
Snektron
However, these are unlike OpenGL where those function pointers can be loaded in advance

1579910677
Snektron
Instead, there are function pointers for the Instance and each Device

1579910724
Snektron
So i'm thinking about whether it makes sense to provide a function to load all those into a struct, or whether its not worth the effort

1579910762
Snektron
Where the idea is that developers make their own function pointer tables

1579912760
rageoholic
Hey guys

1579912765
rageoholic
I have a dumb question

1579912803
rageoholic
So there's a thing on NVidia and AMD laptops to use dedicated graphics exclusively

1579912878
rageoholic
You put  _declspec(dllexport) DWORD NvOptimusEnablement = 0x00000001; in your C file

1579912889
rageoholic
What would be the equivalent in Zig

1579915118
mikdusan
rageoholic: maybe `export const NvOptimusEnablement: u32 = 0x00000001;` or simply `= 1;`

1579915585
mikdusan
andrewrk: does `*align(:3:1) SomeType` mean host integer size is 1 byte, and pointer-child is 3 bits offset into host integer? and what does the missing align num mean?

1579924433
fengb


1579924449
fengb
Thoughts on dropping in "Be excellent to each other"?

1579924469
fengb
Or would that be bad since it's not a real COC

1579930480
andrewrk
let's plz not derail the channel by linking to V's CoC

1579930594
andrewrk
mikdusan, yes. the alignment value that is missing should be the alignment of the host integer. I think the meaning of when it is missing might be incorrect in stage1 right now

1579930618
andrewrk
which might have to do with the incorrect @sizeOf() packed struct which has 3 bytes in it

1579930712
andrewrk
here is what it should mean if it is missing: if it is missing then the alignment of the address, which is the address of the host integer, is @alignOf(@IntType(false, 1 * 8)), where 1 is the host integer byte count (the 1 in *align(:3:1))

1579931504
mikdusan
thanks this helps

1579932939
mikdusan
andrewrk: the first packed-struct at top; am I remotely close with the values?

1579932940
mikdusan


1579937946
andrewrk
mikdusan, that looks correct to me

1579938417
mikdusan
finally I can make some progress :)

1579953377
betawaffle
what's the difference between using `var` as an argument type vs. using something like `comptime_int`, besides the fact that the latter can only be an integer?

1579953436
betawaffle
and also what's the difference between a comptime_int, and a comptime-known regular int type, like u32? (as an argument type)

1579953675
Snektron
comptime int can be any size

1579953775
Snektron
A var can be any value

1579953790
Snektron
The value can be known at runtime

1579953803
Snektron
But the type of the expression has to be known at compile time

1579953857
betawaffle
but a `comptime arg: u32` for example has to have a known value at compile time?

1579953878
Snektron
Exactly

1579953901
Snektron
I do think comptime int stands a bit out

1579954301
frmdstryr
Can struct fields be made const so the value can't be changed after it's intialized?

1579954464
mq32
frmdstryr, nope, that is not possible

1579954585
frmdstryr
Ok thanks

1579961592
Snektron
Can i import an extern fucntion inside a struct?

1579961625
Snektron
`const A = struct { extern fn abc() void; };`

1579962022
mq32
Snektron, there should be nothing that prevents this

1579968046
epmills
anyone shed light on declaring an array of anonymous structs?

1579968115
epmills
trying to do something like table-driven tests in go:

1579968343
Snektron
should be possible

1579968438
Snektron
The only difference with that example you posted is that you need you name the fields

1579968485
Snektron
`const cases = [_]struct{a: u32, b: u32}{.{.a = 10, .b = 20}, .{a = 30, .b = 40}};` should be valid

1579968557
Snektron
You could even use an anonymous list of anonymous structs i think

1579968660
epmills
Snektron: sorry - being an idiot.  was trying to make the struct fields (expected / test value) also anonymous.worked fine like this:

1579968663
epmills


1579968675
Snektron
Then you'd write `const cases = .{.{.a = 10, .b = 20}, .{.a = 30, .b = 40}};`

1579968675
Snektron
oh

1579968716
Snektron
The above also works but you have to use metafunctions to walk through the fields

1579968754
Snektron
`for (std.meta.fields(cases)) |case| testThing(case.a, case.b);`

1579968786
epmills
Snektron: interesting - ty!

1579969149
MrMobius
hi, does zig have ports for any architectures than x86?

1579969178
Snektron
In theory it supports everything that LLVM supports

1579969188
Snektron
but in praktise there are some problems with a lot of them

1579969201
Snektron
some other architectures are quite well supported though

1579969215
Snektron


1579969421
MrMobius
Snektron, thanks. looks like there is an msp430 version, which is one I was curious about.

1579969485
mq32
how much work is it right now to include a custom OS into zig? is the "custom OS abstraction" already done?

1579972524
andrewrk
mq32, yeah the custom os abstraction is working. a posix-like custom os will fit especially easily

1579972551
andrewrk
pixelherodev is taking advantage of this currently, I believe

1579975897
fengb


1579976028
fengb
Is there a short summary of all the crazy things LLVM can optimize?

1579976057
fengb
Okay not all. Enough to poke around

1579976099
fengb
Oh context for the link: Matt Godbolt explaining the history of the compiler explorer

1579976127
andrewrk
fengb,

1579976253
fengb
Ah neat

1579976750
mikdusan
-instnamer for IR passes :)

1579978804
mikdusan
silly question: why is fn return type specified after parens, and not as (optional) final component inside parens? `fn(a:u32, b:u32, u32){return a+b;}`. if this ambiguous?

1579978952
andrewrk
for function prototypes (params have no names) it would be ambiguous

1579978974
andrewrk
const fnType = fn(u32, u32, u32);

1579978997
andrewrk
sorry, it wouldn't be ambigious since the last one would always be the return type. but it does look confusing

1579979065
mikdusan
`const ping := fn{ std.debug.warn("ping!\n",.{}); };`

1579979079
mikdusan
ie: deduce if not specified, void

1579979088
mikdusan
and if no other args, parens could be omitted entirely

1579979123
mikdusan
const run := fn(callback: fn) { callback(); };

1579979222
mikdusan
`const add := fn(a:u32, b:u32, Error!u32) { ... };`

1579979294
fengb
Not a big fan. fn foo(a: u32, b: u32) is called by foo(a, b). Positions match

1579979322
mikdusan
`const sort := fn(comptime T: type, a: []T, f: fn(T,T,bool)) {...};`

1579979498
mikdusan
ah yes andrewrk  now I see it

1579979625
mikdusan
`const fnType = fn(u32, u32; u32)` <-- ok this is cheating

1579979664
mikdusan
`const fnType = fn(;u32)` looks a bit odd but hey...

1579979696
andrewrk
what are you trying to solve?

1579979776
mikdusan
some interesting proposals. was looking at #4170 and the gist of `.|a,b|` to me seems that it always makes return type inferred and that's why it looks clean. so wondering how we could simply compact all fn stuff

1579979859
fengb
What if we had result location based function signatures?

1579979877
fengb
Then the types are inferred but not ambiguous

1579980131
mikdusan
afk. got company

1579980709
andrewrk
only 318 errors left in my branch @_@

1579980736
andrewrk
9 files changed, 10412 insertions(+), 8254 deletions(-)

1579980747
andrewrk
none of that is automated

1579983717
pixelherodev
Yes, yes I am

1579983721
pixelherodev
The custom OS thing that is

1579987676
jessermeyer
Hey everyone.  I'm trying to pass a 0 to a * c_void parameter as part of a C API. How do I do that in Zig?

1579987699
jessermeyer
The obvious @intToPtr(*const c_void, 0) amounts to  error: pointer type '*const c_void' does not allow address zero

1579987767
jessermeyer
Changing 0 to null just changes the error message, about expected sizes.

1579988032
jessermeyer
Exploring more, @intToPtr([*c]const c_void, 0) says that C pointers cannot point to opaque types, but that happens in C all the time?

1579988173
jessermeyer
Well, looks like translate-c translated the parameter in question to an optional pointer, so just passing null did the trick.

1579988488
jessermeyer
What's the defact-o pattern passing Zig arrays to C functions that assume arrays decay to integer (addresses)?

1579988525
pixelherodev
Uh... pass the address?

1579988534
pixelherodev
jessermeyer, do you mean a slice?

1579988545
pixelherodev
Is the type `[*]T` or `[]T`?

1579988558
pixelherodev
If the former, pretty sure it can be passed directly

1579988563
pixelherodev
If the latter, use `.ptr`

1579988570
jessermeyer
error: expected type 'c_ulong', found '*[512:0]c_ulong'

1579988590
jessermeyer
Hmm, let me see.

1579988646
pixelherodev
That's a pointer to an array of 512 c_ulongs, terminated by zero

1579988659
pixelherodev
Try `@ptrToInt`

1579988671
pixelherodev
But caution: make sure it's really expecting a pointer

1579988677
jessermeyer
Yes, I'm passing a string buffer along.

1579988690
pixelherodev
Why is it pointing to c_ulong then?

1579988694
pixelherodev
Custom string type?

1579988726
pixelherodev
Not judging; I literally am using a relatively stupid custom string type in one of my projects atm

1579988742
pixelherodev
s/literally //; it's completely unnecessary

1579988952
jessermeyer
Thanks for helping.  Sorry it's a bit complicated as it's a maze of type aliases from Windows.h.

1579988958
jessermeyer
Trying to simplify it a bit before I respond.

1579988995
pixelherodev
Oh god. Working with Windows.h... you have my sympathy.

1579989011
jessermeyer
That ... on top of MSDN =)

1579989020
jessermeyer
Trying to get FormatMessage working.

1579989035
pixelherodev
... okay so... I can't help there. At least, not off the top of my head the way I could for Linuxisms

1579989061
pixelherodev
I haven't used Windows in months, and all of my Windows programming has been over cross-platform abstractions

1579989062
jessermeyer
Sure, I was hoping the issue was strictly Zig related.

1579989095
jessermeyer
Here's the setup incase you're interested. I wanted a message buffer of 512 bytes, stack allocated, that I pass to FormatMessage.

1579989097
jessermeyer
var error_message: [512:0]u8 = undefined;

1579989117
jessermeyer
Null-terminated just in case FormatMessage doesn't respect the len argument.

1579989160
jessermeyer
FormatMessage's buffer parameter is of type [*c]u8.

1579989214
jessermeyer
But if I just pass &error_message, I get  error: expected type 'c_ulong', found '*[512:0]c_ushort'

1579989239
jessermeyer
Which is ... odd, since that isn't the type of that parameter.. but let me triple check.

1579989285
jessermeyer
I may just be an idiot, actually.

1579989439
jessermeyer
Yeah, I'm just misusing the function.  There was a macro that was doing something funny with parameters that I didn't catch.

1579990092
Snektron
They have different names, right?

1579990114
jessermeyer
Speaking to me?

1579990187
Snektron
jessemeyer, Michaël Larouche 's irc broke

1579991223
pixelherodev
jessermeyer, you shouldn't be taking the slice address like that

1579991237
pixelherodev
You want `error_message.ptr` to get a `[*]u8`

1579991251
jessermeyer
Huh, should the compiler be yelling at me, cause it's not.

1579991259
jessermeyer
But isn't error_message an array?

1579991263
pixelherodev
I  mean... unless I'm misremembering something

1579991269
pixelherodev
Let me just reread them docs real quicl

1579991273
pixelherodev
s/quicl/quick

1579991303
jessermeyer
I know 'string' handling has changed quite a bit since I last dabbled in Zig, so this stumbling block doesn't surprise me.

1579991348
pixelherodev
`[512:0]u8`, unless I'm more tired than I thought, is a slice of 512 u8s, zero-terminated

1579991372
pixelherodev
No wait, you're right; it's an array

1579991416
pixelherodev
jessermeyer, you want `&error_message[0]` IIRC

1579991422
pixelherodev
The address of the first member

1579991435
jessermeyer
So what does &error_message mean?

1579991449
pixelherodev
The address of the array itself

1579991456
pixelherodev
That is, a `*[512:0]u8`

1579991461
pixelherodev
Whereas you want a `[*]u8`

1579991487
pixelherodev
(pointer to array of 512 u8s, terminated by zeroes; versus a pointer to an unknown number of u8s)

1579991490
pixelherodev
The latter is what C uses

1579991739
jessermeyer
I agree that those are technically different at a type level, but isn't the address number of each identical?

1579991772
jessermeyer
For whatever reason, zig is cool with taking the address of the array as input.

1579991784
pixelherodev
Potentially, but having the type be correct is also a good idea

1579991796
pixelherodev
Regardless of whether the generated binary ends up producing the correct result

1579991811
pixelherodev
Having all info be correct on the Zig level allows for more correct info to be exposed to, say, the optimizer

1579991815
jessermeyer
Yeah I do agree with you there

1579991833
pixelherodev
Not necessarily a major concern, but I can imagine the optimizer making an incorrect decision if it thinks the type is something its not

1579991841
jessermeyer
Can you think of an instance where the starting byte address would be different?

1579991853
jessermeyer
Could alignment cause that to get funky?

1579992050
pixelherodev
In C, arrays are just their members - that is, the address of the array == the address of member one

1579992057
pixelherodev
I'm not 100% sure if that's true in Zig, give me two seconds

1579992278
pixelherodev
Seems to be, at a quick glance

1579992327
jessermeyer
The docs don't mention otherwise, at least.

1579992435
jessermeyer
But thanks for the helpful advice and assistance =)

1579992518
Snektron
Im pretty sure that in practise its the same address, though it doesn't mean the same to the compiler

1579993955
pixelherodev
`In theory, theory and practice are the same` <- pretty sure someone used that one yesterday :P

1579995605
andrewrk
pixelherodev,

1579996038
traviss
jessermeyer <pass a 0 to a * c_void parameter as part of a C API> maybe you can use an allowzero type? something like `@intToPtr([*c]allowzero c_void, 0)`

1579996055
traviss


1579996062
pixelherodev
Nah, null is correct there

1579996078
pixelherodev
Source: working on a project that passes null to C code right now :)

1579996117
traviss
oh thanks. will use that next time i run into this.

1579996213
traviss
much simpler

1579996402
pmwhite
What are people's thoughts on language integrated units of measure?

1579996445
pixelherodev
Overkill

1579996451
pixelherodev
In the standard library, maybe

1579996457
pixelherodev
But that doesn't belong in the language itself

1579996466
pixelherodev
My two cents

1579996536
pmwhite
All the attempts at userland versions in other languages seem to either not have real algebraicness, or aren't ergonomic to use, or aren't "zero-cost"

1579996599
metaleap
might be able to whip sth up with comptime as long as "real algebraicness" require "operator-like sigils as func names"

1579996602
pmwhite
Which is merely a guess that a library version might not be possible, not a proof that it ought to be included in the language.

1579996612
metaleap
s/require/doesnt-require

1579996698
pmwhite
In zig at least, you would probably have to forsake using normal math operators.

