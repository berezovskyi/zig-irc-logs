1581467212
FireFox317
Thanks you so much mikdusan! I solved the issue, because of your helpful messages :)

1581469218
mikdusan
nice! hopefully there are no unwanted side-effects from that insert

1581476202
seoushi
hmm that was interesting. I got an array out of bounds error 100%. then I decided to add a warn to print the len and index and the error stopped. removed it and it came back again. updated zig and it works.. Guess I found a regression that was fixed.

1581477252
seoushi
hmm and now it's back again. Seems to be some sorta timing issue or something. Gonna see if I can find a small repro case

1581477925
daurnimator
mmm, I've started getting mysterious errors more often lately

1581477937
daurnimator
errors that seem to be unrelated to the code at hand

1581478032
seoushi
so I can't make a small test case but I know that the same code on my other machine worked fine

1581478066
seoushi
guess I can see what commit I was and bisect to see where it broke

1581478842
seoushi
hmm nope. So it works fine on my macbook but on my arch linux laptop it doesn't

1581478864
seoushi
same revision now

1581479062
seoushi
broken on my pop os desktop as well. so perhaps something was broken on linux.

1581479074
seoushi
daurnimator, what os are you running?

1581479898
daurnimator
seoushi: linux (x86_64)

1581480115
leeward
Is it a bug that @exp2 doesn't work for integer types?

1581480176
wilsonk
seoushi: if you have the code available I can test it on a couple operating systems

1581480194
seoushi
wilsonk, sure I can tar it up

1581480212
seoushi
I don't have a small repro case tho

1581480242
wilsonk
no problem, I can compile up whatever you have there

1581480254
wilsonk
have you tried windows?

1581480335
seoushi
I don't have a windows machine

1581480391
wilsonk
ok, I can test on there as well if needed

1581480498
seoushi


1581480531
seoushi
opps, worng one

1581480569
wilsonk
heh, ok I will delete that one

1581480587
seoushi
that is a c version. nothing private tho hah

1581480598
seoushi


1581480697
wilsonk
index out of bounds and array_list.zig:60?

1581480728
wilsonk
that is what I am getting here with 'zig build play' with the newest zig from 2 minutes ago

1581480728
seoushi
yeah

1581480740
wilsonk
that is on Ubuntu 16.04

1581480758
seoushi
in entitySysteView.zig line 37 if you uncomment the debug.warn then it's fine

1581480763
wilsonk
ok

1581480768
seoushi
err entitySystemView.zig

1581480879
wilsonk
hmm, nope I removed all cached files and it still gives me the same error here

1581480906
seoushi
hmm interesting

1581480927
seoushi
let me try deleting the cache with the warn and see if it happens then

1581480931
wilsonk
actually it is slightly different, it says 'iterator is 0 len is 140494185971728' on the first line of output

1581481018
seoushi
with the warn I get "iterator is 0 len is 1"

1581481037
seoushi
I deleted the zig-cache folder and built again as well

1581481064
seoushi
latest zig from git. "0.5.0+ab4ea5d3c"

1581481167
wilsonk
0.5.0+14970a1  ... that is from a few minutes ago

1581481190
seoushi
ok will rebuild latest then

1581481220
seoushi
hmm. I'm confused. git says I'm on the latest

1581481251
wilsonk
oh, nope sorry  have a merge in there. Your version is the latest

1581481257
seoushi
:)

1581481287
wilsonk
still doesn't explain the different len's though...weird

1581481356
seoushi
is there a standard way for checking for leaks or memory stomping?

1581481372
seoushi
I'm not ruling out that it's my fault lol

1581481681
daurnimator
seoushi: run under valgrind

1581481706
seoushi
did a c allocator and it says an invalid read on line 39. when reading the len of the array I'm guessing

1581481779
wilsonk
sorry, was rebuilding on ubunu 18.04. Still got the same problem with the large len...just so you know

1581481856
seoushi
thanks for testing. not sure what I'm doing wrong.

1581481890
seoushi
the only thing I can think of is entitySystem.zig line 55 doesn't work as I expect

1581483086
seoushi
ok I figured it out. I took a pointer to something that moved because appending it in a arraylist makes a copy (which makes sense). so the pointer got invalided. Why it worked with a debug warn on this system and always on my mac is beyond me tho

1581483214
wilsonk
yeah, that sounds weird

1581483227
wilsonk
which lines did you change?

1581483349
seoushi
in entitySystemView.zig : ~103 I added "self.systemView.__entities = &self.entities;". that fixes it but I'm reworking some design now because it's probably not the only place I made this mistake

1581483360
wilsonk
ah, ok

1581483710
leeward
If anyone wants to use libsodium with Zig, I started a wrapper.

1581483763
daurnimator
leeward: FYI libhydrogen is created to replace libsodium

1581483772
leeward
There's another one?

1581483777
leeward
Sigh

1581483792
daurnimator
essentially libsodium should only be used for compat with existing libsodium applications

1581483798
daurnimator
libhydrogen is by the same author.

1581483875
leeward
Does it have the kind of rigor behind it that NaCl has?

1581483887
daurnimator
yes

1581483890
leeward
I'm not seeing a lot of security engineers in the contributor list.

1581483917
leeward
Though I do see a conspicuous single commit contributer at #10.

1581483917
daurnimator
it's essentially all the lessons of libsodium distilled into a new library

1581483994
leeward
Huh, there's a link to libhydrogen at the top of the libsodium docs, but...no text about it.

1581484105
leeward
Well, too late to do anything with it tonight, but I'll take a look at it tomorrow.

1581484114
daurnimator
leeward: *and*.... you might realise that the zig standard library has most of the lego pieces in it to clone libhydroden

1581484172
leeward
daurnimator: I stay away from actually implementing crypto stuff. Too fraught.

1581484280
daurnimator
yeah you need to really sit down for a whole weekend and read the papers first... at least gimli was easy to write:

1581484475
daurnimator
FWIW I found the gimli papers to be some of the most approchable crypto papers I've ever seen

1581484514
daurnimator
I feel like I really understood how it works and why the decisions were made; instead of getting lost like in other papers and having to trust the math..

1581497500
mq32
i really should start looking at the source instead of the online docs. there's just too many functions missing

1581507097
daurnimator
mq32: that just means you need to add more tests

1581509705
mq32
heh, yeah... :D

1581509709
mq32
i cannot argument against it

1581516421
betawaffle
oh

1581516428
mq32
yep

1581516440
mq32
the current doc generator can only document what is referenced by the code

1581516443
betawaffle
does it skip stuff that has doc comments but aren't referenced?

1581516596
mq32
yes

1581516603
mq32
doc comments dont instantiate functions

1581520271
Barabas
Hey, when I run 'zig fmt' it seems to create a backup file or something next to the source file. How do I disable this? It's really annoying since my editor runs fmt automatically everytime I save a file. So I end up with a gazillion of these.

1581520295
fengb
Zig skips analyzing anything that's not referenced. It's a boon and a curse

1581520396
betawaffle
surely a flag could be added to force analyzing unreferenced things

1581520424
betawaffle
like, it would also be nice to occasionally be able to see "what isn't referenced"

1581520431
fengb
There's an issue for that. It's not as simple, becuase that'd force all of the OS libraries into existence at once

1581520443
betawaffle
fair enough

1581520450
fengb
Laziness is how Zig handles comptime feature detection

1581520517
betawaffle
but surely there could be a certain "level" of forced analysis that would be sufficient for things like doc comments

1581520543
fengb
Lemme find the issue

1581520605
fengb
There's a plan. Library docs weren't really on the plan for stage 1 but people complained enough >_>

1581520724
betawaffle
does llvm have a C backend? it'd be neat to be able to output to C in some situations

1581520756
BaroqueLarouche
unfortunately no

1581520781
Barabas
Why do you want to read C code?

1581520789
betawaffle
i don't want to read it

1581520806
BaroqueLarouche
GCC has more backend for legacy CPU targets

1581520824
BaroqueLarouche
many embedded board has custom forks or proprietary C compilers

1581520827
betawaffle
my thinking was for situations when you want to convert a zig program into C for compilation where zig isn't available

1581520835
Barabas
Ah

1581520859
fengb
Zig's plan is the opposite

1581520860
betawaffle
could be a good way to bootstrap, don't you think?

1581520880
fengb
Stage 1 should work in any C++ native target, then bootstrap the real compiler

1581520916
betawaffle
right, but that requires maintaining enough of a compiler in C++ forever

1581520918
fengb
I think having a C backend is nice, but I don't think it's on anyone's radar atm

1581520927
fengb
We will anyway

1581520961
fengb


1581520986
fengb
Of course, C++ isn't C so... still not as nice

1581521037
fengb
Oh there's a comment on why C backend isn't ideal for the main usecase

1581521060
fengb
I think it's definitely a nice to have though

1581521159
betawaffle
hmm, well his response about C code doesn't make much sense to be, since C is source code (in a sense), it's not the original source, but it can be part of the tarball for the bootstrapping scenario

1581521242
betawaffle
and the reason i think it would be ok, is that the C code would (ideally) be cross-platform, such that it's the same code everywhere, trust is not such an issue

1581521248
fengb
It's generated and unreadable. Distro maintainers tend to trust the actual source instead of intermediate code

1581521268
betawaffle
fair enough

1581521341
fengb
For what you're asking though, it makes perfect sense. But wouldn't it be nicer to port Zig to the platform instead? ðŸ™ƒ

1581521365
fengb
(I know that's not always possible because of proprietary compilers, but I can dream)

1581521366
betawaffle
by writing C++ code? nah

1581521459
betawaffle
for me, C++ means a project i'm OK using, but not contributing to

1581521471
betawaffle
if it was Java, i wouldn't even be super comfortable using it

1581521517
BaroqueLarouche
the stage1 compiler code is more C-like and use C++ features only when really necessary, of what I have looked so far

1581521581
fengb
Yeah most of the C++ is templates, methods, and integrating with Clang/LLVM

1581521583
betawaffle
yeah, from what i saw it didn't seem all that bad

1581521584
shakesoda
i definitely avoid contributing to c++ projects too, as a (begrudging) long time c++ user

1581521645
betawaffle
i wish i wasn't such a rewrite-it-in-ist

1581521676
companion_cube
what about C+basic templates?

1581521678
shakesoda
betawaffle: nice thing about zig is that you don't have to go all in on that just to start

1581521687
fengb
I told an old coworker I'd much rather use C than C++ and he basically gave me the middle finger

1581521702
BaroqueLarouche
I have a stockholm syndrome with C++

1581521708
shakesoda
fengb: it's a good filter for people to not work so much with ;)

1581521721
fengb
Yep, he's the reason I left the job :P

1581521723
betawaffle
i definitely prefer C, but that's because I don't have to use either on a daily basis

1581521739
fengb
Of course, reimplementing generics in C is pretty terrible

1581521740
companion_cube
for me C++ is in projects I'd rather not contribute to, but sometimes I guess C++ was the best choice at the time

1581521744
betawaffle
i can say what i want up on my ivory tower high horse

1581521774
fengb
C++ has that 20% of features people like. Unfortunately it's not the same 20%

1581521777
shakesoda
companion_cube: i'm largely okay with c++ uses c++-isms sparingly

1581521789
companion_cube
fengb: i think pretty much everyone agrees on templates + RAII

1581521795
companion_cube
(simple templates, mind you)

1581521796
shakesoda
not me!

1581521804
fengb
Templates are better than void*, but people also abuse the hell out of templates

1581521812
shakesoda
not much a fan of raii, and templates cause absolute madness :\

1581521815
companion_cube
they should od a subset of the languageâ€¦

1581521816
shakesoda
i vastly prefer c99 or so

1581521824
fengb
Call it... C++--

1581521830
companion_cube
shakesoda: really? can't even write a vector without them :/

1581521831
shakesoda
companion_cube: have you seen "orthodox c++"

1581521833
betawaffle
i still can't get over how much better zig does generics compared to every other language i've seen

1581521833
companion_cube
how do you survive

1581521860
BaroqueLarouche
if the epoch proposal gets accepted, it will allow the commitee to finally remove legacy from the language and clean things up

1581521862
shakesoda
betawaffle: +1, for many other aspects of zig too

1581521866
fengb
I think it's amazing that Zig's generics wasn't even a solution, but a byproduct of comptime

1581521873
companion_cube
shakesoda: haven't

1581521915
shakesoda
zig's design in general tends to align with my interests, enough of the time that i'm here & enthusiastic :)

1581521947
shakesoda
companion_cube: you can do vectors and such without them, but yes they are certainly helpful for doing containers like that

1581521960
companion_cube
not in C you can't

1581521960
betawaffle
i was really surprised to find that zig had solutions to most of the things i was bugged about other languages not addressing at all

1581521971
shakesoda
i'm far too used to doing my data structures in c, they always end up simpler without any of the c++ madness...

1581521972
BaroqueLarouche
Zig is going to be the C++ replacement I wanted for so long, after trying D, Rust

1581522008
companion_cube
shakesoda: i don't want to

1581522021
companion_cube
and C does't give you anything to enable that (please don't say "macros" :p)

1581522058
shakesoda
companion_cube: i don't really want to get too deep into this language fight :(

1581522059
betawaffle
i still think zig could do a lot better in some aspects of close-to-the-metal problems

1581522075
betawaffle
bools in packed structs are not good enough yet.

1581522086
companion_cube
shakesoda: we can take that in pv if you want, I'm really curious, it's what makes C unbearable to me

1581522087
betawaffle
i know there are proposals to address some of my problems, though

1581522088
shakesoda
BaroqueLarouche: i agree

1581522102
shakesoda
and it does it by... not trying to be like c++ :D

1581522122
fengb
I'm just happy that Zig solves all of my needs from C without adding a bunch of things I don't understand or really care about

1581522201
BaroqueLarouche
D has been started in early 2000 and hasn't taken off yet, going with a GC for a system language was a huge mistake

1581522207
shakesoda
companion_cube: i have no aversion to implementing specific data structures nor to throwing a macro around for stretchy arrays - these things are perfectly tolerable and clear to me personally

1581522223
fengb
Go is totally a system language ðŸ™ƒ

1581522233
Barabas
If you use C++ enough you'll learn to hate it. :P

1581522259
Barabas
Some things are nice, sometimes... but most of it just helps you shoot yourself in the foot.

1581522270
betawaffle
fengb: except it doesn't interface well with C or debuggers generally

1581522278
betawaffle
i love go, fwiw

1581522288
fengb
I'm joking. That was a jab at the marketing when it first came out

1581522295
shakesoda
companion_cube: i take no issue with this not being the case for anyone else, but for my purposes i don't actually miss any of the language features c lacks except for lambdas

1581522342
fengb
Barabas: but C++ is so good, you can shoot everyone in the foot!

1581522343
shakesoda
the generics issue just isn't really one that... matters, in the vast majority of my code

1581522382
Barabas
fengb yeah that's the cool thing about it!

1581522405
Barabas
At work I continue to see bugs that happened because of C++ features.

1581522429
Barabas
All kinds of implicit crap, mostly conversions actually, that end up being unintended.

1581522445
shakesoda
Barabas: that's been

1581522476
shakesoda
Barabas: and constructs which are just plain incomprehensible, usually brought in by someone who decided it'd be okay to haphazardly throw in some boost headers

1581522478
fengb
shakesoda: generics lets you write a reusable library that's properly typechecked. I do agree that it's easier to write my own in C, but with generics I can just import a LinkedList instead of writing it for the nth time

1581522487
Barabas
I hate boost with a passion =D

1581522511
BaroqueLarouche
Barabas: who doesn't expect people contributing to boost ?

1581522523
fengb
Same problem in Go actually. Because it has no generics, the libraries have crazy hacks to pretend like there's generics and it's really easy to get wrong

1581522551
betawaffle
and performance/clarity can suffer

1581522557
Barabas
One of the problems with C++ is that it has some things which seem nice... but they have all these ugly hooks and things

1581522572
Barabas
And on top of that all the features it has work together in ways which nobody can every truly understand.

1581522593
shakesoda
fengb: i'm not particularly concerned about the correctness of type checks at all times

1581522595
Barabas
And then people abuse the crap out of it =D

1581522609
shakesoda
similarly, i don't mind thinking about memory myself instead of something trying to hide it away

1581522650
Barabas
That's one thing I hate about OO code in C++

1581522651
mq32
shakesoda: the ability to rely on type checks is a wonderful thing, especially if you have critical software that may never do "a wrong thing"

1581522657
shakesoda
this is not also to say that i don't care, just that my distaste for the ever unpopular void* isn't really that strong

1581522677
shakesoda
mq32: absolutely, i don't mean to doubt the value of good type checking

1581522723
shakesoda
mq32: i just mean that when writing C, not always having it doesn't really matter a lot to me - it's just a bonus in these situations

1581522751
shakesoda
not sufficiently compelling for me to jump ship entirely and use c++ or so, with all the new problems that'd bring in

1581522820
Barabas
Things which are nice about C++ is destructors and simple templates. (But I don't always want destructors and templates quickly become complicated.)

1581522829
Barabas
All the other things I really don't care about.

1581522848
shakesoda
defers are

1581522862
Barabas
Yes! <3

1581522894
Barabas
Also because maybe you don't want to clean up.

1581522897
fengb
I agree with that. RAII has too many semantics and I tend to get confused

1581522908
shakesoda
defers and the error handling mechanism are for me the killer feature for zig

1581522920
shakesoda
wonderfully simple and clear

1581522929
Barabas
Yes, it's great. And I really like the comptime stuff.

1581522935
betawaffle
i

1581522951
betawaffle
i kinda wish i could make custom types with that behavior

1581522965
shakesoda
i'm always a bit hesitant with the concept of comptime for the sake of really wanting to avoid inflating build times

1581522968
betawaffle
like dynamic enums

1581522990
fengb
Ha, I have a sorting algorithm running at comptime. It's... slow

1581523006
shakesoda
slow builds are my kryptonite

1581523030
fengb
andrewrk mentioned that comptime is currently 100x slower than what he wants it to be

1581523038
shakesoda
ow!

1581523048
Barabas
That's one problem with features like these. You can go crazy with them.

1581523080
shakesoda
there are a lot of build performance todos, aren't there? at minimum faster comptime, threaded builds, etc

1581523083
fengb
But... it won't be a priority until stage 2, which start soon ðŸ¤ž

1581523100
shakesoda
and a backend to skip llvm stuff for debug, i think?

1581523114
Barabas
By the way, does anyone know what happened to Vectors/SIMD?

1581523132
fengb
I a verb

1581523134
Barabas
I thought someone was working on that a while ago, but I didn't notice any progress now that I looked.

1581523213
fengb


1581523232
metaleap
i'd like to understand the major motivation(s) for the zig project to drag along a minimal-scoped c++-based zig compiler basically "forever" (iirc)

1581523250
metaleap
do most OSes have a cpp toolchain preinstalled by default? nope.

1581523259
Barabas
fengb aww that's too bad

1581523262
fengb
So any C++ compiler can bootstrap all of Zig

1581523332
fengb
It's important for a new language to receive adoption. e.g. Debian would not allow just any compiler into core unless it was verifiable

1581523354
fengb
Barabas: I think scientes lost interest in carrying the torch, and we haven't had anyone else who's familiar with SIMD and Zig

1581523381
metaleap
fengb: ok if thats the reason (ie. social/cred stuff), i have no need to further elaborate counterpoints. thx =)

1581523447
metaleap
could become a millstone tho --- once adoption is there, it can be dropped to ease & maximize fluid contributions-to-zig currently held back by a cpp and/or and upcoming joint-zig/cpp setup

1581523467
fengb
I think the goal is once stage 2 is real, the C++ compiler will be in maintenance mode and only be tested to compile the stage 2 compiler. No real robustness or anything

1581523468
metaleap
s/and/an

1581523521
Barabas
How do other compilers bootstrap themselves? I guess they start with an old binary?

1581523533
metaleap
fengb: sounds good yeah if it isnt meant to be kept in sync with zig language/compiler capabilities to 100%

1581523602
metaleap
if i were to set up a bootstrappable scenario, i'd devise a byte-code format that's ugly+slow in every aspect except it's easy+most-succinct to write an interpreter for in any lang, any stack, anywhere, any time, in half an afternoon.

1581523618
metaleap
step 2, have that format as one of the compile-output formats

1581523622
Barabas
interesting

1581523646
fengb
Crossplatform byte-code? Sounds like wasm ðŸ™ƒ

1581523653
metaleap
hence there's an interpretable source of the compiler that may take hours to come up and "build itself for real", but who cares

1581523658
betawaffle
metaleap: you could theoretically do that with LLVM, assuming LLVM supports the target in question

1581523661
metaleap
yeah would probably do wasm nowadays here

1581523705
metaleap
it was the old pascal success story with p-code: you could write that interpreter in asm for dozens/100s? of architectures (early 70s was very diverse)

1581523761
metaleap
then you interpret the p-code for "pascal itself" and you get to a binary for your system. maybe not a half-afternoon scope but very succesful & popular back then.

1581523817
metaleap
today it isnt about architectures, but wouldnt it be fun if you could "bootstrap your lang from any python / typescript / go / c#" tiny interpreter hand-coded from a fairly comprehensible recipe =)

1581523846
metaleap
but then soon you'll easily find a good enough wasm interpreter for any system, i expect

1581523892
fengb
Well... wasm isn't a particularly nice language to write by hand.

1581523900
metaleap
not the idea here

1581523910
metaleap
altho it was a nececitty back then with pcode/asm

1581523928
fengb
Hmm I had a stupid thought: what if I create a "full" lisp on top of wasm?

1581523948
metaleap
then you could write a wasm interpreter in that lisp , for one

1581523977
fengb
Since wasm is already sexprs, I should be able to hack in a macro system and translate anything down at the source level

1581523994
fengb
... I need to stop finding new stupid projects

1581524038
BaroqueLarouche
^ my life

1581524062
metaleap
fengb: once you have a few levels of wasm-lisp-wasm-lisp, next, you're gonna wanna get into reynold's definitional-interpreters rhubarb =)

1581524062
Barabas
Another thing I like about Zig is the build-in unit-test stuff

1581524107
metaleap
zig is really full of killer features, but it dawns on one little by little over time. it's almost utopia for me lol

1581524162
Barabas
haha

1581524175
Barabas
HMMMmmm now it found a memory leak in my code...

1581524220
Barabas
Oh, I'm an idiot =D

1581524351
metaleap
i had a beautiful leak the other day. list.ensureCapacity(list.capacity() + foofactor) for a forever-living list. blew up a usually-constant-~3MB-RAM program to gigs in minutes

1581524394
metaleap
this kind of stupid can be caught by no linter compiler or other tooling :D

1581524412
fengb
Try out the new testing.allocator. It counts allocations for you :)

1581524414
Barabas
Was that in a loop or something?

1581524443
fengb
The strategy is super stupid atm but it's uncovered a few leaks in std

1581524444
metaleap
kinda. stdin-processing main loop with regularly in-streaming input

1581524461
metaleap
fengb: good tip will take a look!

1581524559
Barabas
Super stupid and correct is better than super smart and wrong ^^

1581524893
fengb
It's not correct. It just counts the allocations and makes sure it matches the frees

1581524898
fengb
number of frees*

1581524928
fengb
There's a much better debug allocator in the works so I didn't spend too much time on this >_>

1581525185
metaleap
took a gander, good stuff! (it's also on the side very helpful as a nice minimal template for anyone doing from-scratch custom allocators!) so using your .validate() would happen at program end i reckon. i'm gonna use this for dbg-builds

1581525243
mq32
fengb, std.testing.allocator is by you? neat thing! such practical

1581525270
Barabas
Ok, how do I convert an `f64` to a `[] const u8`?

1581525312
mq32
Barabas: what conversion?

1581525313
shakesoda
Barabas: try @bitCast?

1581525320
mq32
string-conversion or bitwise-conversion?

1581525325
Barabas


1581525356
shakesoda
@bitCast to u64 and @bytesToSlice perhaps

1581525388
Barabas
.\hash_map.zig:225:27: error: array literal requires address-of operator to coerce to slice type '[]const f64'    return @sliceToBytes(([]const T{x})[0..1]);

1581525389
mq32
@bitCast([8]u8, @as(f64, 3.14))

1581525400
Barabas
That's the current code's error

1581525400
fengb
There's writeInt[Big/Little]... I'm not sure it works with floats

1581525405
Barabas
And bitcast is broken it says

1581525427
fengb
std.mem.writeIntFoo

1581525459
mq32
Barabas:

1581525487
Barabas
Hmmm ok, let me try that again then.

1581525513
mq32
note that you have to cast to an array of the correct size

1581525517
mq32
and you can slice that array

1581525538
Barabas
Yes

1581525538
mq32
for reinterpreting memory for referencing it later, you can use @ptrCast

1581525589
Barabas
I get: Unreachable at E:\Libraries\Zig\src\codegen.cpp:3327 in ir_render_bit_cast. This is a bug in the Zig compiler.

1581525599
mq32
huh

1581525603
mq32
what exactly are you trying to do?

1581525627
metaleap
Barabas: never forget to report everything "this is a bug in the zig compiler" you hit!

1581525639
metaleap
fengb: it's one idea to count alloc/free calls but couldnt one rather track bytes alloc'd/dealloc'd? if i alloc(10bytes) and then only free(5bytes) is this currently detected? from checking this src i think not but not fully sure (given that allocators implement realloc/shrink, not alloc/free)

1581525648
Barabas
Well, I want to hash my `f64`, and my hash function accepts a `[] const u8`

1581525674
metaleap
fengb: if not might take a stab at hacking that in if feasible. dunno if "old_mem.len" is truthful or rather if it ever

1581525728
fengb
metaleap: yes you can, I just quickly slapped something together that wouldn't throw false positives

1581525753
fengb
No guarantees on false negatives! :P

1581525860
metaleap
what i dunno is whether inside any custom realloc/shrink implementation one can tell exactly how many units were intended to be alloc'd/free'd by the caller. gotta read up again the thankfully detailed doc-comments in std.mem

1581525961
Barabas
There's already an issue for the thing I ran into:

1581525967
Barabas
I'm pretty sure I ran into it before ^^

1581526080
fengb
Try this:

1581526464
Barabas
This also works...

1581526550
Barabas
Ok... cool

1581526580
Barabas
This fails:

1581527753
metaleap
never know how to handle `error.Unexpected` :P

1581528039
metaleap
also `while (canErr() catch |e| switch (e) { error.Foo => continue, }) |item| {}` --- cannot `continue` from the also-technically-existing-in-the-loop parensed-"header" of the `while`  =/

1581530588
betawaffle
that's a goofy use-case metaleap

1581530889
metaleap
yeah a while(true) was cleaner in the end anyway

1581530909
metaleap
(with check and break etc inside etcpp)

1581542156
metaleap
fengb: LeakCountAlloc lookin' good:

1581542202
metaleap
(doesnt happen when not calling .validate() btw)

1581543833
fengb
Hmm it shouldn't get out of bounds :(

1581544667
metaleap
fengb: the print succeeds so no idea here

1581544751
metaleap
basically the validate returns its .Leak just fine, so it's sth happening on the outside but still (in my scenario) provoked by calling .validate()

1581544990
frmdstryr
Does using `const field = somestruct.field` in a fn do a copy & require stack space?

1581545028
frmdstryr
Or does it get optimized out somehow?

1581545102
metaleap
frmdstryr: if it does, i'd wager it isn't guaranteed by the lang but the occasional unpredictable goodie

1581545115
fengb
The emitted code will do a copy, but LLVM can choose to merge it back

1581545124
metaleap
is my newb-to-mem-mgmt interpretation of "reallocFn" semantics here correct? (for the typical case)

1581545148
metaleap
waah imgur link gone from clipboard :D 1 sec

1581545190
metaleap
is my newb-to-mem-mgmt interpretation of "reallocFn" semantics here correct? (for the typical case) ---

1581545237
metaleap
ah bug in L29 already

1581545250
metaleap
no its ok

1581545272
metaleap
but bug in L32 :D

1581545310
metaleap
ok L32 would be in my understanding `me.bytes_allocd += new_size-old_mem.len;` but otherwise? missing anything?

1581545394
metaleap
looks like it can be just 2 lines: me.bytes_freed += old_mem.len; me.bytes_allocd += new_size;

1581547142
metaleap
defer being block-scoped raises an interesting little question: if (foo) { defer bar(); } vs. if (foo) defer bar();  --- same or not? "current scope" is a funky consideration

1581547150
mikdusan
I'm convinced cmake syntax was strongly influenced by COBOL

1581547382
fengb


1581547963
daurnimator
fengb: FYI there are a few places around in the standard library that make their own allocator using a stack buffer that should be converted to your testing allocator

1581548025
daurnimator
e.g. `test_allocator` in http.headers

1581548075
daurnimator
fengb: you can probably find them by searching for `FixedBufferAllocator`

1581548499
fengb
Oh yeah I had a branch that started replacing those

1581549710
fengb
Submitted a PR. I remember having some trouble with some of the JSON as well as a few other files

