1585355383
daurnimator
FireFox317: opening a file can be async on both windows and linux

1585355388
daurnimator
on linux its a new feature though :)

1585355506
daurnimator
marijnfs_: for streaming buffers you probably want LinearFifo

1585355618
Snektron
shakesoda: i implemented a (relatively) high performance radix sort in C++ for an uni assignment

1585355725
shakesoda
Snektron: is it available?

1585356008
Snektron
It's on a private repo currently, i'm not sure how to deal with the whole uni thing

1585356161
Snektron
I have several implementations actually: in place and out-of-place

1585356226
andrewrk
O(1) memory?

1585356240
Snektron
in-place is O(1)

1585356261
Snektron
The problem is that you either need to pick O(1) or stable

1585356290
Snektron
stable is a very useful property for radix sort as it allows to you to process the array in steps

1585356358
Snektron
So i took a hybrid strategy for my implementation

1585356411
Snektron
You can either use the stable variant, process in groups of say 8 bits, repeatedly from array A into array B and then vice versa

1585356489
Snektron
(note that you need a small amount of additional memory, to store the prefix-sum. for an n-bit radix sort you need 2^n prefixes)

1585356521
Snektron
Or you can use the stable variant

1585356548
Snektron
In this case you need to recursively continue the process

1585356560
Snektron
I chose to first sort on 10 bits and then use a counting sort, but this was specific for sorting 32-bit ints

1585356673
Snektron
In the general case, the out of place algorithm is more efficient

1585356710
Snektron
in fact, i also implemented it on a GPU, which means its probably easily SIMD-able

1585357816
Snektron
shakesoda: i can probably soon-ish find some time to make a zig port

1585357836
Snektron
Did you want to add it to the standard library or for something else?

1585357922
shakesoda
Snektron: I wasn't looking for it in the standard library, it's useful for sorting batches in my rendering code

1585357964
shakesoda
seems rather specific use (on my part) to advocate for having it in standard lib

1585358197
Snektron
Ah cool. I think it'd be an interesting Zig exercise anyway, to port it

1585358228
Snektron
What are you making, if i may ask?

1585358434
shakesoda
Snektron: games & graphics demos, radix sorting is super useful for quickly sorting the draw keys

1585358465
shakesoda
learned this particular trick from bgfx

1585358554
Snektron
Is that sorting on gpu or cpu?

1585358593
shakesoda
on cpu, although I could totally see doing it in a compute shader if indirect drawing is being done

1585359982
junon
Evening all :)

1585361430
mikdusan
hi junon

1585362572
andrewrk


1585362591
andrewrk
I got this all the way to successfully creating zig0, next step is to improve build.zig

1585362606
andrewrk
`zig cc` building llvm,clang,lld, and finally zig

1585362815
junon
andrewrk: got a quick guide on #4827 ? Is there updated syntax or does it work with @cImport out of the box? I want to give it a test.

1585362877
andrewrk
there are no plans for @cImport to support c++

1585362959
mikdusan
awesome, which means the zig.exe binary is created with llvm10 optimizer and I assume static-link of bundled libc++ sources?

1585362965
andrewrk
it's merely to expose the powers that were already latent due to linking libclang

1585362972
andrewrk
mikdusan, yes

1585363058
junon
Ah okay, makes sense. Would be kind of neat to support C++ imports. I'd never touch C++ again if I could do that.

1585363072
junon
though I know how difficult it is to do that.

1585363187
andrewrk
bootstrapping is basically done. now it's just a function of how much % is in c++ and how much % is in zig

1585363194
andrewrk
the c++ % will never be 0 because we have to wrap the LLVM, clang, and LLD C++ APIs with a C API wrapper

1585363202
andrewrk
also there's some windows COM API code for detecting MSVC that might as well stay c++.

1585363334
andrewrk
junon, it's not really possible to use c++ APIs with a language other than c++. D can do it a little bit, but that's because D is in many ways c++++

1585363348
andrewrk
you can see why they named it what they did

1585363419
junon
We wouldn't necessarily want to do c++ in zig, though. It'd be more for compat between libs and not having to write C bindings for everything (e.g. game development would be quite annoying). I just went through my engine and about half of the libs in it would have to have C bindings if I wanted to port/rewrite the engine in Zig (hypothetically)

1585363484
junon
So as long as I can invoke things in C++ from zig with certain exceptions (e.g. no lambda support, which should be OK in most cases) then things would be fine.

1585363583
junon
Even if I have to call `.operator=()` manually or something, that'd be fine by me (since Zig doesn't do operator overloads).

1585363641
andrewrk
to use c++ code from zig you have to wrap it with a C API

1585363662
andrewrk
there's not really a way around this

1585364139
junon
I know, I'm talking hypothetical functionality.

1585367279
andrewrk
it works

1585367281
andrewrk
I did it

1585367317
andrewrk


1585367413
mikdusan
does this mean alpine docket image becomes less imporatnt?

1585367417
mikdusan
*docker

1585367419
andrewrk
yes

1585368025
mikdusan
in case you desire to avoid export CC/CXX: cmake ... -DCMAKE_C_COMPILER= -DCMAKE_CXX_COMPILER= have worked for me in the past

1585368036
andrewrk
thanks, good to know

1585368282
andrewrk
it feels weird closing

1585368395
pmwhite
wow, congratulations.

1585368502
mikdusan
so I have my answer ready for Q "How good is zig-cc drop in replacement?" A. "well it's good enough to build or cross-compile LLVM/CLANG/LLD" :)

1585368668
mikdusan
you don't see this everyday -> "andrewrk modified the milestones: 1.0.0 -> 0.6.0"

1585368940
mikdusan
ah nice! when cross-compiling we no longer build zig0

1585369626
pmwhite
andrewrk: do you think there is more potential for things that can be made self-hosted without requiring a C++ version? Like, I assume there will always need to be a C++ compiler and a self-hosted compiler that are separately maintained, but certain things like translate-c do not have C++ alternatives.

1585369865
squeek502
if you're asking about things that can be moved from C++ to zig, then i think the issues with both stage1 and stage2 fall under that category:

1585369931
squeek502
translate-c already was moved out of the C++ code:

1585370648
pmwhite
translate-c does not have a C++ version, which is cool. some things cannot be that way though, such as the parser. i'm wondering if there are more things like translate-c but have yet to be made self-hosted only.

1585370657
pmwhite
maybe it's a stupid question.

1585370674
squeek502
yeah these issues are for things like that:

1585370720
squeek502
there might be some more

1585370723
pmwhite
ahh, okay, so you did understand my initial question.

1585370811
pmwhite
cool, linking is not necessary for the bootstrap compiler.

1585371017
mikdusan
squeek502: I think your filter is "stage1 && stage2" ... just filter on stage2 for potential work in that area:

1585371020
mikdusan


1585371142
squeek502
true, thought there might be too many false positives in there (things that are already self-hosted)

1585405583
Cadey
can you use `zig cc` and `zig c++` from a build.zig context?

1585406093
yrashk
Cadey: I've used `exe.addCSourceFile("src/code.c", &[_][]const u8{});`

1585407597
diltsman
Given this line: try std.json.stringify(t1, std.json.StringifyOptions{}, &stdout);

1585407612
diltsman
I am getting this error: C:\Zig\zig\lib\zig\std\json.zig:2256:22: error: type '*std.io.out_stream.OutStream(std.fs.file.File,std.os.WriteError,std.fs.file.File.write)' has no member called 'Error'

1585407622
diltsman
Any ideas?

1585407960
fengb
It doesnâ€™t take a pointer anymore. Try just stdout

1585408026
diltsman
Thanks!  I missed that part of the change.

1585408232
diltsman
When I debug the program, it outputs the JSON in the debug window, but when I run it from the command line I see nothing.

1585410863
marijnfs_
nice zig can do c++ now?

1585411344
fengb
How difficult would it to have a nightly arm32 build?

1585411435
andrewrk
fengb, well within our grasp

1585411445
ikskuh
fengb: illiterate guess: looking at zig/bootstrap, not very

1585411455
andrewrk
drone ci is capable of arm32 builds

1585411473
andrewrk
I think it's actually improving the stage1 c++ code to be more 32 bit friendly

1585411488
andrewrk
but the motivation to do that is low, since such efforts could instead be focused on getting to self-hosted

1585411498
andrewrk
I'm not sure what ikskuh's point is

1585411606
ikskuh
andrewrk: as you can crosscompile zig now with zig, it shouldn't be that much work ^^

1585411659
andrewrk
ikskuh, ah I misread, I see

1585411717
andrewrk
the next major milestone in self-hosting will be when we do not need to cross-compile the c++ stage1 code

1585411772
fengb
Hmm if we compile it using zig, could we theoretically get rid of stage0?

1585411813
ikskuh
fengb: only if you want to lose the ability to recreate it D

1585411829
ikskuh
if you get rid of stage0, you lose the ablity to bootstrap without a zig compiler

1585411833
fengb
Not get rid of. Compile lib userland first and link it into zig0 directly without a separate stage

1585411936
andrewrk
yeah zig0 goes away after self-hosting. we'll be able to delete a bunch of glue code

1585411964
andrewrk
what zig0 buys us right now is ability to self-host

1585412198
andrewrk
you know what's amazing, the master branch source tarball is 0.5 MiB smaller than the 0.5.0 tarball

1585412218
fengb
o_O

1585412220
andrewrk
oh, that's because we don't ship LLD sources anymore

1585412226
fengb
Ah

1585412361
BaroqueLarouche
compiling zig is also faster because it doesn't need to compile lld anymore as well

1585412463
ikskuh
why isn't this necessary anymore?

1585412491
fengb
We had a patch that finally got merged upstream

1585412495
andrewrk
because we filed upstream bug reports, and sent patches, and followed up on them

1585412562
andrewrk
I believe it was TheLemonMan's patch that was the last one that finally got merged

1585412590
andrewrk
and now, the macho code of LLD will finally be maintained:

1585412693
TheLemonMan
the old mach-o linker is slated for removal, nice

1585414785
adamkowalski
How was the zig documentation generated? Do we have a tool that will let us do that for our own projects?

1585415356
adamkowalski
I ran the zig compiler with -femit-docs and it doesn't seem to pick up any of my files. It only shows the std library docs

1585415367
adamkowalski
zig test src/main.zig --cache off --verbose-link --main-pkg-path . -femit-docs

1585418702
andrewrk
adamkowalski, lazy evaluation can be a bit of a problem here. you can take a look at some of the std lib files and how they intentionally reference declarations in test mode

1585419911
andrewrk
TheLemonMan, was this your bug report?

1585419916
andrewrk
they deleted all the github issues

1585419997
andrewrk
eh seems to be a solved problem anyway

1585422630
shakesoda
re: sorting, I ended up implementing a simple radix sort last night, which works fine, although I'd definitely prefer something in-place instead

1585422647
shakesoda
i wonder if i'd see any benefit of using something similar but in-place or if i should just eat that memory cost

1585423256
adamkowalski
andrewrk: I utilize this     std.meta.refAllDecls(@This());

1585423312
adamkowalski
It's been working pretty well for me as far as running all the tests. If I zig test src/main.zig it will run all 450 tests, but it seems like that's not enough for the docs?

1585423426
marijnfs_
i'm having some trouble with c-pointer conversion. It works automatically in a member-function, but when i call if in another file i get: error: expected type '[*c]const .p2p.cimport:11:11.struct_zmq_msg_t', found '*.p2p.cimport:8:11.struct_zmq_msg_t'

1585423483
marijnfs_
i call the same function, but one case its f(&self.my_pointer) in a member, the other is f(&my_object.my_pointer) from another file

1585425088
mikdusan
is it a const mismatch thing?

1585426340
pmwhite
I'm updating some zig code I haven't touched in a while. What happened to std.io.readLine?

1585426387
andrewrk
people were using it for the wrong use case, so I deleted it

1585426404
andrewrk
you probably want one of the functions that std.io.InStream offers

1585426463
andrewrk
that function was for the terminal prompt of a repl, not for reading a line from a stream

1585426593
marijnfs_
mikdusan: i was also thinking that, tried to make the argument const but didn't help

1585426604
marijnfs_
anyway non-const to const should not be a problem right

1585426728
ifreund
marijnfs_: do you have the code up somewhere?

1585426800
marijnfs_
ifreund: let me see how i can put it together in a friendly way

1585427949
adamkowalski
andrewrk: can we run all tests that DONT match a tag?

1585427972
adamkowalski
I want to have some longer running tests, which are great to ensure a certain algorithm works properly, but it's an end to end test in a sense

1585427995
adamkowalski
I don't want to run it all the time, just maybe before a check in to master

1585428500
marijnfs_
ifreund: So basically, this doesn't work without case:

1585428508
marijnfs_
but here its fine:

1585428651
marijnfs_
without cast i mean

1585429296
shakesoda
anyone have a workaround for cimports that pull in win32 stuff erroring out on LCS_sRGB nonsense?

1585429368
diginet
I have a kind of general question about the zig compiler: what strategy does it use to determine whether a value is actually resolvable at comptime? seems like it would require some kind of complex unification

1585429475
ifreund
marijnfs_: huh, yeah that's pretty weird. maybe worth opening an issue?

1585429498
ifreund
oh wait, can you try making one c.zig file and doing your imports there

1585429512
ifreund
and then include that in the other files

1585429525
ifreund
iirc I had to do that to get things working smoothly

1585429549
ifreund
e.g.

1585429553
marijnfs_
shit double @importC of same file is an issue?

1585429561
marijnfs_
@cImport

1585429568
ifreund
not sure, but I think it's worth a try

1585429570
marijnfs_
i thought it's cached or some shit

1585429575
marijnfs_
k ill try

1585429585
ikskuh
killtry?

1585429589
ikskuh
ðŸ˜±

1585429625
marijnfs_
ifreund: thats also nicer anyway to put it together

1585429636
ifreund
yeah it's quite a bit cleaner

1585429871
shakesoda
andrewrk: any chance of

1585429885
marijnfs_
ifreund: ok it didn't work, but it looks nicer;)

1585429906
shakesoda
it breaks builds entirely if anything by any means ends up including the gdi header, so no winsock :\

1585429910
andrewrk
shakesoda, not from me but possibly from another contributor

1585429937
shakesoda
i'm adding a whole bunch of defines to work around it but it's frustrating

1585429937
shakesoda
andrewrk: ok, just asking

1585429971
ifreund[m]
marijnfs_: hmm, same error message?

1585430000
marijnfs_
yup

1585430062
ifreund[m]
Same numbers for the cimport type as well?

1585430072
ifreund[m]
Notice that those were different earlier

1585430165
marijnfs_
yeah saw that too

1585430177
marijnfs_
i've seen this issue before but it was confusing

1585430230
marijnfs_
what pastebin do you use here

1585430248
ifreund[m]
I like

1585430324
marijnfs_


1585430371
marijnfs_
.p2p.cimport:11:11.struct_zmq_msg_t and .p2p.cimport:3:15.struct_zmq_msg_t

1585430468
gonz_
Did something change with regards to `stdcallcc`?

1585430588
ifreund[m]
Hmm Iâ€™m still reading that as these two structures have different types

1585430632
ifreund[m]
Not that thereâ€™s something wrong with the [*c] vs *

1585430639
shakesoda
ended up just copying the cimport.zig and deleting all the offending code to workaround

1585430642
shakesoda
ugly, but functional

1585430644
fengb
Itâ€™s pointing at two different types, one defined at line 3 and one at line 11

1585430649
gonz_
`callconv(.C)`, huh...

1585430701
marijnfs_
ifreund[m]: no wait, i missed some cImports. got rid of them and now it works!

1585430736
ifreund[m]
Cool, consolidation into a single @cImport is the way to go

1585430744
marijnfs_
thansk!

1585430841
ifreund
no problem

1585431856
gonz_
Ugh

1585431865
gonz_
This callconv change is a maintenance hassle

1585431871
gonz_
Was there a real point to it at least?

1585432639
andrewrk
gonz_, you know that zig fmt fixes it for you automatically?

1585432648
gonz_
No

1585432665
gonz_
And it doesn't help when zig format seems to crash on the file anyway

1585433061
andrewrk
hmm that is surprising. would welcome a bug report for that

1585433090
gonz_
I'll see about making one

1585433097
andrewrk
thanks. but yeah instability a pretty big downside of a pre-1.0 language

1585433099
gonz_
the fix to the repo has been made

1585433110
gonz_
It's just the zig-win32 repo

1585433118
gonz_
The files are massive, obviously

1585433831
gonz_
Honestly `zig fmt` seems to just fail with either `FileNotFound` when given a file path :/

1585433847
gonz_
Normally I just trust the zig VSCode plugin and it does fine, but it crashes with these files

1585433858
fengb
gonz_:

1585434067
gonz_
Being that zig fmt is supposed to take care of it in normal cases it's not really as big an annoyance as I thought.

1585434119
gonz_
It's just that zig-win32 is 67k lines of pathological case in one file

1585435849
Snektron
how does zig nightly find its lib/ folder?

1585436547
mikdusan
zig searches from exe's dirname, and looks for `{lib,lib/zig}/std/std.zig` . if not found, checks parent dir. repeat.

1585436561
Snektron
ah, thanks

1585436624
mikdusan
that way it works from git workspace with "lib/std/std.zig", with a standard APP/bin,APP/lib install, and with zig's distribution where there is no "bin/" dir

1585438573
shakesoda
can i disable some of the safety features in c sources with my build.zig

1585438591
shakesoda
i'm getting some illegal instructions in debug builds for mysterious reasons (trying to use enet) that work fine in release

1585438635
marijnfs_
upon error i'd like to continue with the code

1585438679
marijnfs_
how do i do that? catch printSomething(); doesn't work, catch unreachable is fine

1585439226
daurnimator
marijnfs_: doesn't work how?

1585439261
daurnimator
shakesoda: sounds like enet is relying on undefined behaviour.... you might want to compare with running enet with -fsanitize=undefined

1585439389
shakesoda
daurnimator: i want the check to go away, heh, i just don't want to fight this issue right now

1585439400
shakesoda
i'll look at that though

1585439570
marijnfs_
daurnimator: i mean i call a function bla() that could return an error.

1585439590
marijnfs_
when it does i just want to print an error, but i don't want to exit the function

1585439597
marijnfs_
that seems not possible now.

1585439970
daurnimator
shakesoda: you'll need to figure out which undefined behaviour it hit, but options like -fwrapv exist to make certain things defined

