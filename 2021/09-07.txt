1630990728
discipulus!~discipulu@user/discipulus
what are zig programmer's called?

1630990754
discipulus!~discipulu@user/discipulus
*programmers

1630992111
andrewrk!~andrewrk@mail.ziglang.org
they're called friendos

1630992123
andrewrk!~andrewrk@mail.ziglang.org
how's it going, my friendos?

1630992560
discipulus!~discipulu@user/discipulus
going ok

1630992581
discipulus!~discipulu@user/discipulus
just saw Friend OS is a thing

1630992608
discipulus!~discipulu@user/discipulus
sky computer

1630997417
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
discipulus ziguanas

1630997436
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
andrewrk is just lonely without my dms on discord its ok

1630997442
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ill wrangle my account back soon enough

1630999327
discipulus!~discipulu@user/discipulus
I'm working on a rewrite of the "Zig Test" section of lang ref. I was going to put in a "Hello friendos!" or "Hello Ziguanas" in an example. But, I decided to use a different example to reduce the learning load.

1631003360
discipulus!~discipulu@user/discipulus
zig.news article suggestion: "Teach my ASCII brain Unicode using Zig vision" 

1631004354
andrewrk!~andrewrk@mail.ziglang.org
0.8.1 is tagged: https://ziglang.org/download/0.8.1/release-notes.html

1631004379
ifreund!~ifreund@user/ifreund
oh snap, didn't see that coming :)

1631005006
andrewrk!~andrewrk@mail.ziglang.org
yeah I want to prioritize 0.9.0 stuff now

1631005016
andrewrk!~andrewrk@mail.ziglang.org
I'm headed to bed. good night!

1631005045
xd1le!~xd1le@user/xd1le
goodnight

1631005078
discipulus!~discipulu@user/discipulus
oh yeah, surprise

1631006271
discipulus!~discipulu@user/discipulus
test can be declared inside a struct. is it useful?

1631006440
ifreund!~ifreund@user/ifreund
discipulus: don't forget that files are structs

1631006451
discipulus!~discipulu@user/discipulus
I haven't forgotten

1631006492
ifreund!~ifreund@user/ifreund
if tests couldn't be declared inside a struct, where would it be possible to declare them?

1631006506
ifreund!~ifreund@user/ifreund
so I'd say yes it is useful

1631006555
discipulus!~discipulu@user/discipulus
How to use?

1631007044
bgiannan!~bgiannan@194.206.91.37
0;43;27M0;43;27m0;39;25M0;39;25m

1631007052
ikskuh!~xq@2a0d:5940:6:163::ad7e
nice escape sequence you got there

1631007057
bgiannan!~bgiannan@194.206.91.37
yeah sorry

1631007380
discipulus!~discipulu@user/discipulus
ifreund: Q: "where would it be possible to declare them?" A: Top level (?)

1631007417
ifreund!~ifreund@user/ifreund
discipulus: "Top Level" is inside a struct

1631007425
ifreund!~ifreund@user/ifreund
which is the point I was trying to make

1631007444
discipulus!~discipulu@user/discipulus
How do I run a test declared inside a struct that's not a file?

1631007478
ifreund!~ifreund@user/ifreund
all you need to do is mak sure the struct containing it is referenced

1631007496
ifreund!~ifreund@user/ifreund
e.g. at the top level do `test { _ = Foo; }` if your test is inside the struct Foo

1631007561
discipulus!~discipulu@user/discipulus
got it

1631007709
dutchie!~dutchie@user/dutchie
there's also the helper `std.testing.refAllDecls` which may come in handy

1631010752
discipulus!~discipulu@user/discipulus
yes, handy `@import("std").testing.refAllDecls(@This());`

1631011480
discipulus!~discipulu@user/discipulus
test can be declared inside file/struct, enum, union, opaque. anywhere else?

1631011494
ikskuh!~xq@2a0d:5940:6:163::ad7e
everywhere where toplevel declarations are possible

1631011611
discipulus!~discipulu@user/discipulus
where are they possible?

1631015222
flyx[m]!~flyxflyxo@mail.flyx.org
can I print stuff in a test so that it only gets dumped on stdout/stderr if the test fails?

1631015357
luuk!~luuk@user/luuk
Technically you could use 'errdefer' in your testcase for that

1631015463
flyx[m]!~flyxflyxo@mail.flyx.org
yeah, I was hoping for some builtin feature so that I do not need to manage buffers for that in each test manually

1631016306
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.log will be silent except for log.err

1631016408
discipulus!~discipulu@user/discipulus
std.testing uses std.debug.print to output to stderr. can you use it too with errdefer?

1631016428
discipulus!~discipulu@user/discipulus
flyx[m] ^

1631017042
discipulus!~discipulu@user/discipulus
What is the definition of "top-level"?

1631017134
flyx[m]!~flyxflyxo@mail.flyx.org
ikskuh: how does that help me? calling `log.err()` is not equivalent to 'the test fails'

1631017587
discipulus!~discipulu@user/discipulus
call if from errdefer flyx[m]

1631017607
discipulus!~discipulu@user/discipulus
*it

1631017624
flyx[m]!~flyxflyxo@mail.flyx.org
as I said, the problem with errdefer is that I will need to buffer everything manually

1631017669
flyx[m]!~flyxflyxo@mail.flyx.org
it seems there is no better way, true.

1631017672
discipulus!~discipulu@user/discipulus
what is everything?

1631017697
flyx[m]!~flyxflyxo@mail.flyx.org
everything I print out

1631017813
flyx[m]!~flyxflyxo@mail.flyx.org
see, I do have some `std.debug.print` in various places in my code. they are executed during a test. if a test succeeds, this just clutters my output, but if a test fails, that is important information.

1631017871
flyx[m]!~flyxflyxo@mail.flyx.org
most test frameworks can hide that output for successful tests, so my question was whether zig can do that, and it seems like it can't

1631018005
discipulus!~discipulu@user/discipulus
your test is collecting information being generated as it runs. if it fails, it should output the information.

1631018226
flyx[m]!~flyxflyxo@mail.flyx.org
the problem is that I don't collect the information. I send it to stdout. guess I need to redirect that if I want to hide it for successful tests

1631018961
discipulus!~discipulu@user/discipulus
I understand now

1631020827
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Hello folks. My main goal is to fix something in the standard library. I'm starting by trying "Stage 2: Build Self-Hosted Zig from Zig Source Code".

1631020846
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
This is errors out. I'm using zig 0.8.0 from NixOS to build.

1631021194
luuk!~luuk@user/luuk
You do not need to build stage2 (the self-hosted compiler) to fix something in the standard library. However, if you're not using the latest version of Zig (master) the issue you're running into may have already been fixed. So you may want to update to master to verify first, before attempting to fix it.

1631021285
luuk!~luuk@user/luuk
Note that the website provides binaries for the latest succesful build of the master branch.

1631021310
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
luuk: Thanks, I was just trying master... and it has the same error. Sorry I'm not familiar with the build process yet. I can try the website binary to see.

1631021365
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
FYI, error even happens with 'zig build --help': "./build.zig:73:28: error: enum '@typeInfo(std.build.InstallDir).Union.tag_type.?' has no field named 'lib' .install_dir = .lib"

1631021373
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
But I'll try a prebuild binary...

1631021471
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Also, luuk, I had the impression that the std and c libraries were compiled into the binary in Zig.

1631021485
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
But I am an egg.

1631021514
luuk!~luuk@user/luuk
That's still about building the self-hosted compiler, which is still very much WIP. Right now we're still using the compiler written (partly) in C++ and contains an invoke to cmake/make to build, not `zig build`

1631021561
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Oh, I see. So I should be following the directions for a Stage 1 build.

1631021565
luuk!~luuk@user/luuk
The binaries on the website also contain a 'lib' folder, containing the c libraries and std.

1631021572
luuk!~luuk@user/luuk
acarrico: correct

1631024123
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
...OK: Zig Stage 1 is building now (we'll see if it succeeds). Thanks Luuk! Also, apparently you have to clear cmake cache when you expose a new llvm version.

1631024233
luuk!~luuk@user/luuk
Great, and you're welcome :)

1631024844
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
 Yes it built fine. Later I'll try my std lib patch.

1631026239
eyepatchOwl!uid481934@id-481934.ilkley.irccloud.com
This categorizes documentation by its focus on study or specific problems and by practical application or theoretical foundation. I thought it was a useful framework to analyze Zig docs. https://www.youtube.com/watch?v=qC1OYK5oqDo 

1631041995
andrewrk!~andrewrk@mail.ziglang.org
marler8997, I wonder if zig-bootstrap could create an aarch64-windows build of zig now ðŸ¤”

1631042340
marler8997!~marler899@204.229.3.4
I can try to find out

1631042520
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i love alex and auguste so much

1631042539
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
rust analyzer is eating up ~1g of ram on a 4 dependency project. zls is using 4.8mb on the zig source repo

1631047357
marler8997!~marler899@204.229.3.4
andrewrk, I think I got close, I updated zig, made a few changes to windows_sdk.cpp, and now I think we're missing some more compiler_rt functions

1631047392
marler8997!~marler899@204.229.3.4
https://gist.github.com/marler8997/84262b59b41670aa7857d9074f2811a7

1631047930
marler8997!~marler899@204.229.3.4
nevermind I just needed to add another file from mingw, issue fixed.  I believe I now have an aarch-windows build of zig!

1631048681
andrewrk!~andrewrk@mail.ziglang.org
wow cool!

1631048773
andrewrk!~andrewrk@mail.ziglang.org
what hardware in the wild does that apply to?

1631049277
marler8997!~marler899@204.229.3.4
good question

1631049415
marler8997!~marler899@204.229.3.4
windows on raspberry pi?

1631049776
andrewrk!~andrewrk@mail.ziglang.org
cool

1631050156
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Hello #zig! According to https://github.com/ziglang/zig/wiki/Building-Zig-From-Source it is possible to build Zig with either GCC or Clang.  Are there any special advantages to building with clang?

1631050205
ikskuh!~xq@2a0d:5940:6:163::ad7e
not really. you just have to make sure that zig is compiled with the same compiler as your llvm

1631050256
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Great! Thanks :)

1631054659
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
How do I run the compiler tests after building from source?

1631054771
andrewrk!~andrewrk@mail.ziglang.org
iskarian, https://github.com/ziglang/zig/blob/master/CONTRIBUTING.md#editing-source-code

1631055813
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
andrewrk, thank you, I missed that.

1631055825
andrewrk!~andrewrk@mail.ziglang.org
no problem!

