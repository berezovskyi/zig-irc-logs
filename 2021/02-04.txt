1612409522
marler8997
gimmeMoreOfThoseSweetSweetFileDescriptors...lol

1612410034
andrewrk
haha

1612420104
mk12
I'm trying to make a cross-platform game with Zig. It's really cool being able to use C libraries seamlessly, and build them in build.zig. But the libraries I'm using (glfw, bgfx) use some Objective-C in their macOS builds. Is there any reason why build.addCSourceFile couldn't also support Objective-C? In the end it's just passing it off to clang,

1612420105
mk12
right?

1612427697
motiejus
Andrewrk mentioned yesterday: zig bundles (links in) the cc and c++ compilers, so in order for it to work the same way, it would need to bundle objc compiler and supporting libs too (maybe it does, but I doubt); also see

1612428873
terinjokes
maybe zig can do better, but I've found getting the objective-c headers needed to cross-compile (and then getting a working toolchain) to be very annoying.

1612439188
koakuma
Hi, I need some help with @frameSize

1612439188
koakuma
And @frameSize simply loads it from that place. Am I correct?

1612439188
koakuma
AFAICT each Zig function has its frame size stored in an usize-sized block just before its entrypoint

1612439878
koakuma
So on sparc64 @frameSize(func) compiles to something like `ldx [&func-8], %someregister`

1612439913
koakuma
ldx needs the address to be aligned to 8 bytes, but functions only need to be aligned to 4 bytes

1612439975
koakuma
So if I'm being unlucky, that ldx instruction might crash my program because of unaligned access

1612440098
koakuma
Is it possible to make @frameSize generate something that is more suitable for unaligned addresses?

1612440600
wilsonk_
koakuma, can you just do an actual @setAlignStack right before the call?

1612440828
wilsonk_
I am not sure though, as I haven't used that builtin before...kindof early here in NA still, but maybe someone else with more experience with @setAlignStack will be online soon

1612441011
koakuma
wilsonk_: Still doesn't work - it doesn't seem to make any difference to the alignment of the function code itself

1612441097
wilsonk_
hmm, I seem to remember there was a way to do that though...sorry I can't remember it off hand.

1612441290
ifreund
hmm, std.Target.stack_align is 16 for all targets afaict

1612441710
koakuma
I believe that this is probably a codegen bug - @frameSize should generate an instruction (or sequence) that can handle unaligned addresses

1612441915
ifreund
Yeah certainly

1612441931
ifreund
wonder if it's zig's fault or llvm's fault

1612442255
koakuma
Where does @frameSize get implemented? I wanna try taking a peek there

1612442381
ifreund
koakuma: probably grep for "frame_size" in src/stage1/ir.cpp

1612442387
koakuma
gen_frame_size in codegen.cpp?

1612442390
koakuma
Ah okay

1612442395
ifreund
the codegen part would be in codegen yeah

1612442994
koakuma
Seems like it's Zig's fault?

1612442995
koakuma
It generates a `load align 8` in LLVM IR when it should be `align 1`, I think?

1612443109
ifreund
I don't have enough knowledge to know if that's right or not. I'd recommend opening an issue so the people that do don't miss it

1612444066
koakuma
Yeah

1612447562
zags
hey, what's the idiom for converting a u64 to a slice of bytes, so I can pass it to a function expecting []const u8 ?

1612447630
ifreund
zags: pretty sure there's std.mem.valueAsBytes() or similar

1612447681
ifreund
just std.mem.asBytes acutally

1612447682
zags
.asBytes looks like the one

1612447686
zags
right, thanks

1612447694
ifreund
no problem!

1612447724
zags
ifreund: and the other way around? :D

1612447745
zags
bytesAsValue maybe

1612447749
ifreund
zags: asBytes

1612447761
ifreund
er, no

1612447767
ifreund
bytesAsValue is right

1612447773
zags
good stuff

1612447836
ifreund
there's also bytesToValue() for some reason if you want to save typing a .*

1612450186
tnorth
Hi there. I'm confused about zig cc cross compilation: zig cc foo.c --target=powerpc-linux-gnu (listed in zig targets under "libc") gives: "error: unknown target CPU 'ppc32'" + a list of valid targets. How do I specify that exactly?

1612452349
tnorth
Hmm, do I correctly understand that cross-compiling with zig cc to powerpc targets is not supported yet, because belongs to Tier-3 ?

1612453114
wilsonk_
tnorth, powerpc64 works and it is only Tier 3/4 so I don't think that is it

1612453161
wilsonk_
powerpc64le also works for a simple example

1612453285
fengb
Maybe ppc32 doesn't work

1612453430
mikdusan1
it might be a mapping issue

1612453665
wilsonk_
hmmm, arm-linux-musleabi works but arm-linux-gnu doesn't (can't find stdio.h) even though that exact triple is an example on the release-notes page for 0.6

1612453707
mikdusan1
`zig build-obj` seems ok with the target. but `zig cc` not; so the clang driver is emitting the diag about ppc32

1612453724
wilsonk_
oh, weird

1612453764
mikdusan1
s/clang driver/zig cc driver/

1612453781
wilsonk_
with arm-linux-gnu it ends up in an infinite loop here after outputting the error

1612453800
wilsonk_
that is using master

1612453858
mikdusan1
zig cc or build-obj ?

1612453889
wilsonk_
infinite loop with zig cc

1612453941
mikdusan1
`zig cc -c foo.c -target arm-linux-gnu` gives me a few warnings but no error or loop

1612453945
mikdusan1
master.

1612453976
wilsonk_
yikes...I literally just built it 10 mins ago. Let me clean up and try again

1612454210
wilsonk_
oh, yeah I don't have musl installed universally so I have to use -I to specify the zig copy...works fine then

1612454233
wilsonk_
I haven't tried cross compiling anything in a while :)

1612454381
mikdusan1
still, an inf loop because no header/-I flag is still a bug

1612455588
mikdusan1
I don't have 100% confidence in this but a 1-liner patch seems to fix the mapping issue:

1612455591
mikdusan1


1612455949
tnorth
mikdusan1: thank, I'll try that then...

1612456149
tnorth
mikdusan1: how do you run it though?

1612456159
tnorth
(I keep having the same message)

1612456359
mikdusan1
`zig cc -c foo.c -target powerpc-linux-gnu` and w/ patch this should get you further to a .h error

1612456489
mikdusan1
`zig cc -c foo.c -target powerpc-freestanding` is even more minimal

1612456523
tnorth
error: unknown target CPU 'ppc32' but no .h errors then

1612456539
mikdusan1
you need to rebuild zig with the patch

1612456561
tnorth
yep, let me check if I manage that...

1612456615
tnorth
would this produce a proper PPC32 executable then?

1612456622
mikdusan1
not likely

1612456724
mikdusan1
well i stand corrected. glibc wasn't happy. but musl is:

1612456733
mikdusan1
`zig cc -o foo foo.c -target powerpc-linux-musl`

1612456752
mikdusan1
"foo: ELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (SYSV), statically linked, not stripped"

1612456759
tnorth
Ok, I had the impression that zig could already compile for all arch listed in the support table, but in fact it currently can compile for x86_64, arm64, arm32, mips32 LE, i386, and riscv64 "only"

1612456778
tnorth
ah nice

1612456806
tnorth
will you then submit your patch?

1612456875
mikdusan1
if you can open an issue, I'll follow up with a PR on it. but even though it's a 1 liner, andrew is real busy right now on stage2 work. so it might be a while before review.

1612456930
marler8997
I found a bug in generic function instantiation where the compiler doesn't see 2 comptime strings as equivalent if one of them is a slice, even if their contents are the same,anyone know if this is a known bug?

1612457087
fengb
In theory Zig has better support without libc

1612457106
mikdusan1
marler8997: is one null terminated and the other not?

1612457143
marler8997
no

1612457277
tnorth
mikdusan1: Thanks, I understand. Issue is at

1612457314
mikdusan1
üëç

1612457335
marler8997
mikdusan1, I've opened an issue here if you're interested:

1612458834
zags
rust has wrapping_neg, modular negation. Do I simply do `0 -% num` in Zig?

1612458943
g-w1
yes

1612458966
zags
thanks

1612459109
ifreund
zags: I don't think you need the 0

1612459129
ifreund
-% is a unary operator as well

1612459202
ifreund
marler8997: pretty sure I've hit that before, but I don't remember a bug report

1612459215
marler8997
ifreund ok thanks

1612459316
mikdusan1
why does github butcher linefeeds so much when a horiz scroll bar is added to code block :(

1612461356
zags
I have a task that I want all cpu cores to compete working on, and I need to return the result as soon as a thread has found the answer. I was initially thinking a thread pool, but maybe cpuCount() number of async calls with .evented would do the same job?

1612461381
zags
Then somehow await until one of the frames return

1612462037
ugla
you would still need something for paralellism

1612462594
zags
doesn't .evented fire up a thread per core?

1612464082
andrewrk
zags,

1612464132
andrewrk
by default evented fires up a thread per core but it will only start utilizing extra threads if (1) you use an async fn call and (2) the async function call blocks on I/O

1612464173
zags
i see, i'll do a thread pool for now then. 5263 looks v interesting

1612464185
andrewrk
however you can use std.event.Loop.startCpuBoundOperation() to introduce a point where control flow takes advantage of the thread pool

1612464194
zags
ohhh

1612464202
zags
perfect

1612464207
andrewrk
I recommend to only use this sparingly, when you notice that cores are not being properly utilized

1612464734
zags
right, in my case i need to utilize all cores to get the result asap

1612464811
zags
the async function will loop until it finds the solution, the other calls in flight should then terminate (same function being called N times, once per core)

1612464829
zags
guess I can communicate that with a volatile, or an atomic flag (if the std has that)

1612465105
marler8997
andrewrk, looks like I tracked down the issue I was having with

1612465123
andrewrk
roger that

1612466816
philtor
wondering if there is any binary tree example code in zig that highlights zig language features? Googling for this is pretty much no possible. (you get Binary Tree ZigZag traversal stuff)

1612467351
justin_smith
philtor: stdlib has sets and hash-maps and I'd be surprised not to find trees in the source...

1612467391
ifreund
no trees in the std HashMap

1612467410
ifreund
std used to have a rb tree but that was orphaned

1612467430
mikdusan1
was just looking for it. what does oprhaned mean? not maintained?

1612467441
ifreund


1612467466
mikdusan1
ah thanks

1612467487
mikdusan1
James Bond was an orphan. true fact.

1612468627
ifreund
marler8997: I don't think memoization can/should work for dynamic strings built at runtime, did you mean comptime?

1612468683
marler8997
yes comptime

1612468698
marler8997
thx for correction

1612468732
ifreund
no problem, I think this issue definitely needs attention

1612468748
ifreund
I forgot that I stopped working on that branch because of it

1612468778
marler8997
interesting that the strings that match still have the same pointer, it looks Zig has already anticipated these issues

1612468808
ifreund
mine don't seem too, or something else is causing it to fail

1612468845
ifreund
I suppose what you're seeing is just llvm optimizing stuff tbh

1612468884
ifreund
by the way if you feel like gawking at the stage1 code, grep for "memoized_fn_eval_table"

1612468897
marler8997
could be, that would explain why Zig thinks they are different but LLVM may have optimized them to be the same

1612469784
zags
is there a workaround while waiting for the select in #5263 ? Basic need is fireing off a bunch of async calls, then just pick up the first one with a result

1612469943
zags
I guess I could just wait on a random one and communicate the result through an atomic, or is leaving async calls hanging without awaiting not allowed (for the remaining calls) ?

1612470200
ikskuh
you have to keep them alive until return

1612470217
ikskuh
otherwise the event loop might resume a non-existend frame

1612470236
andrewrk
zags, there's no good alternative right now, it's a big sore spot

1612470268
zags
I see

1612470286
andrewrk
cancellation is also an unsolved problem

1612470642
zags
if it's cpu bound, can you do better than a standardized cancelation token type of thing? Something C++20 jthread-ish

1612470747
andrewrk
I think in any case, even I/O bound, it would be reasonable to make it cooperative; that is the async function would declare a cancellation point

1612470784
zags
very reasonable IMO

1612470848
andrewrk
the devil is in the details of integrating this into the language

1612470851
zags
something like @cancel(frame) and @isCanceled() inside the async function?

1612470880
zags
with an atomic flag... somewhere :)

1612470882
ikskuh
i like this version

1612470890
ikskuh
@isCancelled(@frame())

1612470892
ikskuh
or so

1612470897
zags
right

1612470907
andrewrk
it's a bit trickier than that - the cancellation has to get forwarded to calls, it's not actually per-frame

1612470927
andrewrk
consider a function that forwards its args: fn foo() void { return bar(default_value); }

1612471026
ikskuh
andrewrk: do you mean that nested frames wouldn't get cancelled?

1612471050
andrewrk
if you cancel foo in this example you also want bar to get cancelled

1612471097
ikskuh
can we save up-pointer for frame nesting?

1612471101
ikskuh
@parentFrame(@frame())

1612471119
ikskuh
and isCancelled can now check if the parent got cancelled as well

1612471126
andrewrk
like I said, the devil is in the details :)

1612471140
zags
always is, that fucker

1612471149
ikskuh
damn details!

1612471387
ikskuh
andrewrk: i see we support a memory model parameter in zig

1612471401
ikskuh
what effects does it have?

1612471428
andrewrk
I don't remember but I think it only has a few grep results if you want to poke around

1612471440
ikskuh
yeah :D

1612471442
andrewrk
afaik it has to do with freestanding

1612471630
ikskuh
yeah some architectures have different styles of adressing

1612471788
ikskuh
allowing more or less memory with more or less performance

1612472202
zags
so I'm stuffing async frames into an std.ArrayList(@Frame(worker)), then looping to await inside for (arr.items) |item| {...}

1612472215
zags
but that gives me expected type 'anyframe->u64', found '*const @Frame(func)'

1612472217
zags
on the capture

1612472257
fengb
`for (arr.items) |*items|`

1612472264
fengb
Er... *item

1612472326
zags
what does the * do? I though .* was used to dereference

1612472358
ikskuh
in this case, it gives you a pointer to the slice element

1612472361
ikskuh
instead of a copy :)

1612472388
zags
It also gives me an ICE :)

1612472406
zags
panic: assertion failed. This is a bug in the Zig compiler.

1612472416
zags
stage1/codegen.cpp:1801

1612472432
zags
(master)

1612472456
zags
or close, 843d91e

1612472506
zags
ir_assert(instruction->value->special != ConstValSpecialRuntime, instruction);

1612472507
zags
assert(instruction->value->type);

1612472509
andrewrk
zags, ArrayList with async frames is pretty dangerous because if you resize the array it will cause unchecked UB

1612472522
zags
it's fixed to cpu count

1612472540
andrewrk
then it need not be an ArrayList, it could just be allocator.alloc(Frame, cpu_count)

1612472568
zags
alright, can try that and see if I can dodge the ICE

1612472807
zags
hm, doesn't Frame live in std.builtin?

1612472921
zags
TypeInfo I guess

1612473056
zags
ok, that worked

1612473071
zags
\o/

1612473219
ifreund
@Frame(foo) should also work

1612473238
ifreund
that could probably be removed though now that @Type() exists...

1612473244
zags
that's what I did

1612473481
zags
this actually turned out to be a short'n'sweet thread pool, just async cpu-count times with the frames in an array, then have the workers check if anyone is done based on an atomic flag, which means awaiting in a loop works. Yay.

1612474716
zags
and it runs faster than the fancy-pants Rust program I ported from, might have to break out devto and blog about it :D

1612474991
ifreund
zags: sweet, sounds like a success :)

1612475123
zags
ifreund: indeed :) What a lovely language

1612475233
ifreund
yeah, and I'm too impatient to wait until 1.0 for stability and completeness so I'm already writing pretty much everything in Zig :D

1612475302
zags
yeah, I saw andrews tweet about not using it in production, but screw that :) Too good already.

1612475489
fgenesis
i've downgraded to C-ish C++ but wasn't able to make the jump yet even though ikskuh has been nagging me for basically forever :<

1612475501
fgenesis
(i'm sorry)

1612475554
fgenesis
and with downgraded i mean all of this high-level OO nonsense and STL and please no

1612477097
andrewrk
C-ish C++ is what I coded in before I created zig

1612477300
zags
with Zig I rediscovered that taking away power gives you a lot of power

1612477529
ifreund
I find zig's power to simplicity ratio to be one of the most impressive things about it

1612477556
ifreund
I managed to pick up the basics well enough in a matter of days to write a hello-world wayland compositor :D

1612477604
zags
that's amazing

1612477765
ifreund
now the code definitely wasn't idiomatic at first, but it worked and grew into the compositor I've been using every day for like 6 months

1612477777
ifreund
the code's a lot better now for sure :)

1612477810
zags
only minor thing I don't like about the result is that it's a few while loops (some nested) and I have to pollute the parent scope because the while doesn't have an initializer clause, that's going to cause bugs. I understand I can wrap all the while-loops in {} to scope, but that's too ugly to contemplate in this case.

1612477871
ifreund
maybe I haven't been programming long enough, but I haven't come across a bug caused by that yet

1612477883
ifreund
I agree that it feels unclean though

1612477895
zags
well it's why C99 got declarations in for-loop

1612477904
zags
because the lack of it was causing bugs

1612477937
zags
usually when refactoring

1612477960
Gliptic
accidental variable reuse etc.

1612477965
zags
yep

1612477971
ifreund
heh TIL C didn't have declarations in for loops until C99

1612478010
zags
it was a wonderful improvement, and zig needs it too :)

1612478012
andrewrk
I recommend to use {} to introduce variable scope, not only for while loops but in other places as well

1612478029
zags
yeah, I mentioned that above, but it gets really ugly, especially when nesting

1612478032
Gliptic
people don't do that because it becomes ugly though

1612478037
Gliptic
and extra nesting

1612478070
zags
I tried the { decl; while ... } formatting, but it doesn't help enough

1612478117
ifreund
I think zig format needs to start allowing this to get people to use blocks everywhere:

1612478141
zags
i really dislike that

1612478152
zags
it's a language weakness imo

1612478194
ifreund
I like it better than the extra nesting

1612478256
zags
yeah the formatting is the best you can do, but not a lot of people are going to do "extraneous" braces, and they'll forget when refactoring

1612478256
Gliptic
marginally better

1612478360
fgenesis
23:25 < ifreund> I find zig's power to simplicity ratio to be one of the most impressive things about it

1612478371
fgenesis
same reason why out of all scirpting languages i like Lua the most

1612478378
fgenesis
it just comes together so nicely

1612478390
fgenesis
and it's so braindead simple

1612478390
Gliptic
(except for the 1-based indexing, *cough*)

1612478396
fgenesis
that is actually not a problem

1612478406
Gliptic
for me it is ;)

1612478430
fgenesis
it's very funny to work on a larger thing, lua and C++ at the same time, and coding the lua bindings, and do correct indexing on both sides

1612478450
fgenesis
i've learned to switch seamlessly. is really not an issue after getting into it

1612478460
Gliptic
I've done a lot of lua <-> C/C++ bindings

1612478466
fgenesis
and by this point i actually say both indexing schemes have their right to exist

1612478469
ifreund
fgenesis: yeah I feel that, but lua is too high level for a lot of the stuff I'm interested in

1612478476
fgenesis
except, you're right, fuck 1-based indexing. for efficiency.

1612478491
fgenesis
(for great justice!)

1612478503
viashimo
does align() affect fields in a packed struct?

1612478505
Gliptic
move zig

1612478518
ifreund
viashimo: yes it should, but there may be bugs

1612478596
zags
:)

1612478647
fgenesis
zags: re "I can wrap all the while-loops in {}" -- yeah, like in VC6, where the for-variable leaked outside of the for-scope <.<

1612478668
fgenesis
easiest way to just wrap the for in double {{, like {for(...){ ... }} >.>

1612478692
Gliptic
I did that habitually, it's forever a codesmell now

1612478698
fgenesis
ohno

1612478703
viashimo
ifreund: I guess my case may be contradictory, but I'm not sure. packed struct says there will be no padding between fiels, but for the alignment to work I need the fields to be padded

1612478733
ifreund
viashimo: I'd insert padding fields manually in that case

1612478774
ifreund
also be aware that packed structs have some serious bugs in stage1:

1612478828
ifreund
I recommend comptime asserts that the alignment and size are what you expect (e.g.

1612478829
zags
fgenesis: yeah, the extra scoping will not be used (enough) and there will be bugs :( I hope this gets fixed

1612478866
ifreund
zags: I'd love to see it fixed too, I just have no idea how and nobody else has come up with a compelling proposal yet either

1612478948
zags
ifreund: while (var i = 0; i < 10) : (i += 1) {} was the natural thing that came to mind, but I understand there was an issue with using ; in Zig here

1612478954
zags
but maybe an exception for while could be used

1612479045
zags
c++17 got the same for if to help reduce scope

1612479057
zags
if (initializer; expr) {}

1612479067
ifreund
yeah, that feels pretty inconsistent to me

1612479086
zags
howso

1612479101
ifreund
currently stuff in parentheses is always a single expression

1612479116
zags
so while () : () : () {}  :)

1612479131
ifreund
you have either while (i < 10) or while (blk: { more complex logic break :blk false })

1612479167
ifreund
the best suggestion I saw so far was a with keyword

1612479178
zags
how did that look?

1612479191
viashimo
ifreund: thanks for the suggestions. I'll keep investigating

1612479191
ifreund
with (var i: u32 = 0) while (i < 10) : (i += 1) { ... }

1612479201
ifreund
and you could use it other places as well to scope things

1612479211
zags
i like that, but it was rejected?

1612479232
ifreund
it hasn't been properly proposed yet, just mentioned in passing by marler8997 on a related issue

1612479250
ifreund
you should write it up if you feel strongly about it and have the time :P

1612479290
zags
i feel strongly about making it easy to not pollute scopes, yes

1612479294
ifreund
viashimo: no problem! packed structs in stage1 generally work best if nothing overlaps the byte boundries

1612479302
zags
but i don't know zig well enough to formulate a suggestion properly

1612479315
ifreund
stage2 will fix all our packed struct woes eventually

1612479329
zags
marler8997: you should write it up :)

1612479335
ifreund
+1

1612479405
zags
I still prefer the terse init; expr version, even if it feels inconsistent. Easy enough to learn

1612479437
zags
but would take with any day over current situation

1612479451
zags
with-construct*

1612480897
marler8997
with(decls) expr...it's an interesting idea, though, if I were a betting man I would bet against it being accepted at this point.  Even if I were in Andrew's position I'm not sure I would accept it either.  Zig has taken a pretty strict stance on new features, understandably so

1612481005
marler8997
mostly because today you can do { decls; expr... }

1612481020
ifreund
Yeah I'd be a little surprised to see it accepted as well tbh, but I don't think it's been properly discussed yet

1612481043
marler8997
ifreund yes, an issue just to discuss the merits may be worth it

1612481088
ifreund
I feel like it has the same problem as block do though tbh, it feels optional and people may just as easily choose not to use it

1612481965
mikdusan1
I could swear I saw an issue where someone considered (my lame terms here) auto-expanding the bits (and sign) for integers as a

1612481974
mikdusan1
way to deal with or circumvent overflow

1612482000
mikdusan1
if anyone recalls it, enlighten me with the digits please

1612482085
zags
marler8997: please do make an issue for discussion. This will be a source of bugs if not fixed.

1612482097
fgenesis
23:51 < zags> so while () : () : () {}

1612482105
fgenesis
does this intentionally look like a forkbomb? D:

1612482112
zags
right :D

1612482142
zags
that was a joke, I really want for (;;) but that's not going to happen either afaict :)

1612482159
fgenesis
for (.) (.) (.) is one too much yeah

1612482176
zags
not if you're on Mars with Arnold

1612482198
fgenesis
i must be old that i get these references

1612482214
zags
:)

1612482423
ifreund
mikdusan1: this one?

1612482459
mikdusan1
no but that's why I'm trying to find the other one unless there is no other one.

1612482653
mikdusan1
meh no matter

