1616029358
qbit
how would one convert []const u8 to [*:0]const u8?

1616029840
andrewrk
qbit, you have some bytes that are not null terminated, but you need a null byte afterwards. unfortunately there is no way to accomplish this without using a new memory location for the null terminated bytes

1616029908
andrewrk
if you have an allocator handy, you can use allocator.dupeZ

1616029945
andrewrk
if you control how the `[]const u8` is produced, you might want to introduce null termination earlier, to avoid having to do this conversion

1616030057
qbit
drat, ok

1616030188
andrewrk
does anyone remember what that website is that hosts recorded terminal sessions?

1616030217
qbit
asciinima

1616030220
waleee-cl


1616030220
qbit
or something

1616030224
waleee-cl
bah, too slow

1616030227
andrewrk
that's the one!

1616030232
qbit


1616030243
qbit
:D

1616031440
brzg
why might changing the length of a slice (in debug build) change the values of the items? am i encountering undocumented/unnoticed undefined behavior?

1616031731
brzg
correction: the length change isn't changing the items, but something else mysterious is

1616031777
brzg
the only events between displaying the original slice and the mysteriously change slice are operations that i thought would be read-only

1616034089
v0idify
is there a wayland implementation on zig? cc ifreund

1616034180
v0idify
oh zig-wayland are bindings

1616034222
qbit
can c functions be called at comptime?

1616034227
qbit
getting error: unable to evaluate constant expression

1616034290
v0idify
i assume not because comptime isn't linked to anything(?)

1616034434
qbit


1616034441
qbit
drat

1616034483
g-w1
qbit: extern functions can't be called at comptime

1616034497
qbit
ok

1616034534
qbit
i guess that makes sense :D

1616057837
ifreund
v0idify: no complete pure wayland implementation in zig yet, zig-wayland is pretty nice to use though

1616057925
ifreund
It is constrained by libwayland's design decisions though and is primarily designed to make working with libraries using libwayland like wlroots nicer

1616057990
ifreund
a pure zig wayland implementation is something I'd like to see as it could potentially provide a much nicer API, lots of design space to explore there

1616058822
daurnimator
aconbere: see also

1616058923
ifreund
daurnimator: already linked that one :P

1616059592
daurnimator
ah right

1616066326
miartad
Hello all, I have a question about Zig, specifically about arrays, there seem to be a hidden member "len" in an array. Does Zig plan to keep such hidden fields in arrays or other types in future? Doesn't it go against Zigs theme of not hiding stuff such as "no hidden control flow, no hidden allocations"

1616066473
ikskuh
miartad: they are not hidden, just not well documented :D

1616066478
ikskuh
you can always access array.len

1616066483
ikskuh
you can even assign slice.len and slice.ptr

1616066488
ikskuh
var slice: []const u8 = undefined;

1616066495
ikskuh
slice.ptr = &[_]u8{1,2,3};

1616066496
ikskuh
slice.len = 2;

1616066534
miartad
I mean they are hidden in a way that they are not defined in code you write, you have to look at documentation to know there is such a field there

1616066582
ikskuh
yeah but this is not the thing meant with "hidden"

1616066595
ikskuh
you also have to know that you can use "a" to create a string literal

1616066607
miartad
ok, maybe a better word is implicit

1616066617
ikskuh
so? every type has implicit properties

1616066629
ikskuh
an int has an implicit operator "+" which cannot be used on a enumeration value

1616066637
ikskuh
this is the same level of "hidden" knowledge

1616066652
ikskuh
you have to know that these exist, the same as you have to know the rules when you can apply "+" to a value

1616066667
miartad
I guess so, however a field occupies memory in struct, unless this mechanism is compiler magic

1616066682
ikskuh
neither an array nor a slice are structs

1616066690
ikskuh
an array has thhe ".len" encoded in its type

1616066699
ikskuh
its just the same as writing "3" for an array of length 3

1616066711
ikskuh
but you can express intend and change the array length and update all those constants

1616066712
miartad
ah, so its a compiler construct

1616066715
ikskuh
yeah

1616066724
ikskuh
and a slice is pretty much just struct { ptr: [*]T, len: usize }

1616066764
miartad
ah right, then that makes sense, thanks for explanation

1616066807
miartad
I would be happier with something like @arrayLen instead of .len but I will learn to live with what we have

1616066813
miartad
:)

1616066848
ikskuh
as well as sliceLen?

1616066857
ikskuh
or just a combined one for both?

1616066894
miartad
specifically Im not sure, just the idea would be to have a compile time function instead of using a property

1616066897
ifreund
yeah an array's len field does not take up any memory at runtime

1616066930
ifreund
that would make writing generic code more annoying

1616066930
ikskuh
miartad: structs can also have comptime fields similar to arrays

1616066950
miartad
ifreund I dont think the problem is memory size, its just that if there is additional field that you have not declared, the language is doing something programmer might not expect

1616066978
ifreund
having a len field does not cause anything unexpected to happen

1616066987
ifreund
knowing it is there is just part of the language

1616067002
miartad
as long at it is a compiler construct and does not actually live in memory thats fine I think

1616070652
Talon
Hey, I'm pretty new to all this so sorry if this isn't the right place to ask. I'm trying to build Zig on my M1 Mac, but I'm running into the error "Undefined symbols for architecture Arm64" when it's trying to link. I'm using LLVm from homebrew and had to add the paths for it in the cmake files because when I tried to build LLVm as per the instructions I kept getting segmentation faults. Can anyone point me in the right direction, or is Zig on the m1

1616070653
Talon
not possible yet? Might this have anything to do with me using LLVM 11.1.0 instead of 11.0.0?

1616071175
ifreund
Talon: it should definitely be possible, but I'm not familiar enough with mac to know what specifically is causing your build to fail

1616071195
ifreund
we should have tarballs availabe for M1 macs soon:

1616075384
Talon
yeah I'm pretty sure I'm doing something wrong, but not sure what. Homebrew was able to build llvm from source, but when trying to build zig with it, I get the undefined symbols for arm64 error, and when I try to build LLVM from source manually I get weird segmentation faults. I also tried using the llvm from ziglang.org that that pull request used, but same thing.

1616076848
v0idify
ifreund, there's no wayland-egl bindings no?

1616076887
ifreund
v0idify:

1616076928
v0idify
oh

1616076970
ifreund
to be fair their is next to 0 documentation for zig-wayland :D

1616077027
ifreund
I've been meaning to port emersion's hello-wayland opengl example but haven't had time

1616077148
v0idify
i still need to use EGL/egl.h right?

1616077335
ifreund
yeah that's right, though I have seen some zig opengl bindings floating around

1616077344
ifreund
example client in C:

1616077377
ifreund
wayland-egl just gets you a pointer that you can then pass to eglCreatePlatformWindowSurfaceEXT

1616077397
ifreund
v0idify:

1616077421
ikskuh
ifreund: that's a highlevel binding that (still) relies on epoxy

1616077421
ifreund
never used it though so I don't know if it has what you need

1616077422
ikskuh


1616077425
v0idify
ifreund, yeah but that's just gl not egl. (already using it)

1616077437
ikskuh
this is a pure zig binding (generator, written in mono)

1616077511
v0idify
what epoxy does confuses me

1616077515
v0idify
i'm new to opengl

1616077516
ikskuh
it loads opengl

1616077528
ikskuh
newer opengl (>= 3) will not expose it's api in libGL

1616077536
ikskuh
so you need a way to call these functions

1616077545
ikskuh
there are a lot of libraries out there that load those

1616077553
ikskuh
glew, gl3w, libepoxy, zig-opengl

1616077597
v0idify
ah

1616077604
v0idify
another layer \o/

1616077636
ikskuh
well, it's not another layer

1616077643
ikskuh
all those libs do the same:

1616077645
v0idify
it seems i

1616077657
v0idify
it seems i'm reimplementing part of ZWL lol

1616077658
ikskuh
they load function pointers via some "get proc address" function

1616077738
ikskuh
so it's nothing that

1616077749
v0idify
huh

1616077779
ikskuh
if you remove the step of loading the function pointers

1616077784
ikskuh
you won't be able to call any opengl function :D

1616077812
v0idify
it still means having another component

1616077822
ikskuh
well

1616077828
ikskuh
you can also

1616077834
ikskuh
and do the

1616077847
v0idify
:P

1616077914
ikskuh
i will port over zgl to use zig-opengl at some point in the future

1616077971
v0idify
if i generate a file with zig-opengl it can be just saved in the repo instead of zig-opengl no?

1616077980
v0idify
i don't want to add a mono dependency to my project :)

1616078031
ikskuh
yep

1616078047
ikskuh
the stuff won't change after generation anyways

1616078051
ikskuh
except you need more extensions :D

1616078071
ifreund
v0idify: what are you working on by the way?

1616078103
v0idify
ifreund, some kind of gio and microui style GUI toolkit (toy)

1616078138
ifreund
sounds lovely :)

1616078142
v0idify
:D

1616078155
v0idify
with minimal footprint ideally, memory and CPU wise

1616078172
ifreund
wayland only? or are you going cross platform?

1616078184
v0idify
ideally cross platform but i'm trying wayland first

1616078202
v0idify
i mean i'm writing it so ideally it could be ported

1616078219
v0idify
but again, a toy and not sure if it will even be remotely finished :)

1616078220
ifreund
I personally would be totally happy if it were wayland only :D

1616078236
v0idify
lol yes but I want it to make cross platform things :P

1616078255
v0idify
funny cause i'm running Qubes so I run sway as a window and run the thing there

1616078344
ifreund
that feature of wlroots is absolutely awesome for development :)

1616078406
v0idify
yes!! it's amazing

1616078675
ikskuh
v0idify: ah, cool!

1616078706
ikskuh
i have tackled my UI project today again :)

1616078737
v0idify
ikskuh, any clue on how to install csc in fedora by any chance? :#

1616078747
ikskuh
install "mono"? :D

1616078788
v0idify
already did

1616078794
ikskuh
hm

1616078805
v0idify
it's mono-complete but yes

1616078806
ifreund
does rpm not have a way to search by file?

1616078961
v0idify
apparently it's `dnf provides <query>` but i still can't find it that way.. i'll look, thanks

1616078987
ikskuh
you can also try mcs

1616078987
ikskuh
:D

1616079377
qbit
/window 4

1616079379
qbit
aww

1616081300
v0idify
ikskuh, mcs works

1616082061
sm2n
this is a dumb question, but how do I allocate memory? I'm trying to use GeneralPurposeAllocator, so I initialize it and then do something like gpa.alloc(u8, 10); however this keeps erroring out with "alloc is private"

1616082092
g-w1
gpa.allocator.alloc()

1616082112
g-w1
see this

1616082150
sm2n
oh, the allocator is a field in the returned struct

1616082157
sm2n
I am stupid, I misread that

1616082164
sm2n
I was actually following that exact guide

1616082504
sm2n
question: in that guide there is the line "var gpa = std.heap.GeneralPurposeAllocator(.{}){};" what does the last {} before the semicolon do?

1616082558
g-w1
it inits the struct returned by GeneralPurposeAllocator

1616082564
g-w1
in zig functions can return structs

1616082583
ifreund
s/struct/struct type/

1616082685
sm2n
why is this necessary?

1616082706
sm2n
i.e shouldn't the struct already be initialized?

1616082712
v0idify
i still need to @cInclude EGL right?

1616082758
g-w1
sm2n: no GeneralPurposeAllocator just returns a struct type, you have to initalize it

1616082838
dutchie
consider: `const Point = struct { x: f64 = 0, y: f64 = 0 };` then to make a point you have to do `Point{ .x = 3.1415, .y = 2.7183 }` or (using the defaults) `Point{}`

1616082846
sm2n
oh, I see, it's not a value.

1616082856
sm2n
That is pretty neat

1616082871
dutchie
GeneralPurposeAllocator is the same, but you have to do a function call to get the type (since you can pass it options)

1616082899
dutchie
because the options are passed as an anonymous struct (the odd-looking `.{}` syntax) you get this double {} appearance

1616082910
sm2n
okay this is starting to make sense, thanks!

1616083532
sm2n
I'm really liking zig so far, this is my first hour or so writing code, and I already feel comfortable jumping to definition in the stdlib to understand what is going on

1616083580
g-w1
yep, the best way to learn the std is to just read the code

1616083604
sm2n
there are not too many languages where you can do that, but I love when you can

1616083632
sm2n
In C I have better luck reading disassembly than glibc code, though musl is better about it

1616083917
ifreund
yeah, 100%

1616085163
dutchie
the fun part is in badsort at the bottom

1616085378
dutchie


1616088216
sm2n
hmm

1616088248
sm2n
I tried to shorten the allocator invocation to "var A = (std.heap.GeneralPurposeAllocator(.{}){}).allocator;", but now I'm getting random segfaults

1616088268
sm2n
is it throwing away bookkeeping information or something?

1616088311
g-w1
yes

1616088342
g-w1
you must have a gpa instance for the allocator to call

1616088351
TheLemonMan
you're throwing away (std.heap.GeneralPurposeAllocator(.{}){})

1616088372
TheLemonMan
and A becomes a dangling reference

1616088387
g-w1
basically the Gpa sets some function pointers in the Allocator struct (basically an interface) and they call back into gpa. without the gpa, it has nowhere to call back into and breaks

1616088467
sm2n
okay that makes sense

1616088484
sm2n
have to be careful about structs

1616088557
g-w1
pinned will fix this i think

1616088569
g-w1


1616088587
g-w1
reading that might also help you understand the problem more

1616088617
sm2n
so I changed it back, and then added a line "var A = gpa.allocator;", but now I get "error: cannot store runtime value in compile time variable" when I call A.alloc()

1616088622
sm2n
I will read that thanks

1616088676
g-w1
s/var/const

1616088728
sm2n
still get the same error

1616088750
g-w1
ah it should be &gpa.allocator

1616088766
sm2n
ok that works

1616088770
sm2n
why does that work?

1616088934
g-w1
i

1616089025
sm2n
I see

1616089028
sm2n
thanks for the help

1616089179
sm2n
From the language reference "The initialization value of global variables is implicitly comptime."

1616089187
sm2n
this seems to concur with what you said

1616089257
g-w1
yeah, any global variable's default value has to be comptime known

1616089634
sm2n
I'm reading this:

1616089655
sm2n
and in namespaced_global.zig, it looks off, structs declared in functions are not reinstantiated on call?

1616089735
ifreund
that isn't a struct instance but a struct type

1616089765
g-w1
its a struct type with a global variable. you can think of that like static in java

1616089767
sm2n
wait so the "S.x += 1;" line is operating on a type?

1616089785
ifreund
it's operating on the variable x namespaced inside S

1616089829
sm2n
S is a type, but x is a variable, and the whole thing gets executed at compile time?

1616089850
ifreund
ok so files are also of type struct

1616089876
ifreund
x is a global variable in the namespace of S

1616089917
ifreund
the S.x += 1; can happen at comptime or runtime depending on the context in which foo() is called

1616090011
sm2n
but why can I declare a global variable inside a function scope

1616090070
g-w1
its inside the struct scope in the function

1616090083
g-w1
the struct scope is declarative, the function is imperative

1616090140
ifreund
similarly the `struct { .. }` type is global but the variable in which it is stored (S) is local to the function

1616090278
sm2n
what do I do if I want a reinstantiated struct inside a function then?

1616090303
sm2n
I'm guessing I have to allocate memory and then set the fields manually?

1616090312
g-w1
wdym reinstantiated?

1616090316
sm2n
err

1616090332
sm2n
I want to allocate a fresh struct on the stack, every time I call the function

1616090345
ifreund
var foo = Foo{ .a = 42 };

1616090374
sm2n
the difference being that the type of the struct is predetermined?

1616090391
ifreund
you could also do the type inline:

1616090393
g-w1
struct { ... } is making a

1616090404
ifreund
var foo = struct { a: u32 }{ .a = 42 };

1616090445
sm2n
ok I see, that is decent, if a bit mindbendy at first

1616090475
sm2n
I've never really thought about types and memory lifetimes at the same time before

1616090483
sm2n
or rather, the memory properties of types

1616090501
ifreund
yeah, having types as first class values is a little different from most languages

1616090502
g-w1
types are first class values in zig

1616090546
sm2n
Well, I have done dependently-typed programming before, but obviously that's quite different ;)

1616090627
ifreund
I guess functions that take types as arguments and return a type is kinda like dependant typing

1616090679
ifreund
you can also provide arbitrary comptime values to said functions

1616090684
yyp
?

1616090725
ifreund
the difference between that and something like haskell is that you can only do this at comptime not runtime

1616090736
sm2n
yeah

1616090738
ifreund
yyp: might want to read the logs for context

1616090772
sm2n
though the difference I was referring to was the lack of manual memory management

1616090812
ifreund
true, that's another pretty big difference from other languages that give you this kind of power over types

1616091076
txdv
Is the meeting going to be open to listen to?

1616091085
g-w1
yep

1616091095
g-w1
i assume you mean the stage2 oe

1616091099
g-w1
s/oe/one

1616091110
txdv
the one on thursday 23 cet

1616091135
g-w1
for what?

1616091172
txdv


1616091182
g-w1
22 cet

1616091190
g-w1
it is open for anyone to listen and speak

1616091322
txdv
does it happen on discord?

1616091361
g-w1
yes

1616094482
g-w1
andrewrk: for the new zir layout branch, the doc comment for error set is this: `/// Create an error set. extra[lhs..rhs]. The values are token index offsets.` I am unsure what lhs and rhs mean? it does not say what the payload type is. is it safe to assume that it is Bin since it has lhs and rhs?

1616094546
g-w1
I can't use astgen as a reference since it is not updated

1616095029
andrewrk
g-w1, look at some of the other tag doc comments for example. that one needs to get updated (the sema code for it is commented out with a @panic("TODO"). I recommend to start with one that has a Sema implementation completed (which is most of them)

1616095094
g-w1
thanks, right now I am trying to reslve the sema panic

1616095113
g-w1
seems like it would be `Bin`

1616095184
andrewrk
I was saving that one because I wanted to audit it

1616095211
g-w1
ohh, so I shouldn't do it?

1616095225
andrewrk
I'm pretty sure enums, unions, structs, opaque, error sets, will be handled externally to the astgen/sema pipeline

1616095251
g-w1
why error sets? they can have decls in them?

1616095263
g-w1
or because they are types?

1616095319
andrewrk
hmm an explicit error set can be handled in there, that's right

1616095341
andrewrk
but they have to interact with inferred error sets, and I'm not sure what that looks like yet

1616095364
g-w1
ah, would there be something better for me to work on for now?

1616095375
andrewrk
yeah, nearly anything else :)

1616095389
andrewrk
I think I'm quite close to getting it to compile

1616095423
andrewrk
then it will be clear how to contribute

1616095430
g-w1
ah, I think I can help with the astgen once it starts to compile; thanks

1616095436
andrewrk
yeah that's a great place to help

1616095448
ifreund
what is enumArray? it doesn't seem to be defined anywhere...

1616095471
ifreund
maybe I should make sure it's not explained in the PR description

1616095485
andrewrk
an imaginary abstraction that I thought of, and SpexGuy happened to implement at the same time, out of pure coincidence :)

1616095528
ifreund
ah it's like that trick in C

1616095643
ifreund
but with type safety

1616095658
fengb


1616095726
ifreund
seems like that should be closed by #8171 to me

1616095844
andrewrk
I think that is precisely what spexguy is intending to do

1616095914
Nypsie
Has an attempt been done to measure the differences between ifreund's SoA and andrewrk's?

1616095926
ifreund
#793 isn't mentioned in the PR yet so I'll leave a comment

1616095934
andrewrk
Nypsie, not yet! that would be some welcome information

1616095972
Nypsie
Sounds like something fun to find out. Will give it a spin this weekend :)

1616095977
ifreund
Nypsie: yeah, I've been too busy with other things to do that benchmarking, go for it

1616096018
andrewrk
be sure to take into account the potential benefits ifreund's version has with regards to fewer future allocations due to less wasted overhead

1616096115
andrewrk
running zig fmt on the std lib would probably be a reasonable bench

1616096135
Nypsie
Ah, thanks for pointing that out

1616096265
ifreund
mine also has a somewhat simpler API as turning it into a struct of owned slices is possible

1616096293
andrewrk
g-w1, I don't see where the error_set zir tag is created, do you?

1616096311
g-w1
zir.zig:520

1616096364
andrewrk
I mean where one is actually instantiated- oh! found it, in astgen.errorSetDecl

1616096390
g-w1
yeah, that seemed not to be updated yet

1616096408
g-w1
the compiler treats them as decls, but also as values

1616096417
g-w1
but vexu left a TODO to make them types

1616096465
andrewrk
confused why we bother to pass them to Sema, seems like we could construct them directly in astgen

1616096489
g-w1
yeah

1616096532
andrewrk
anyway I'll look into this more carefully later, I want to focus on getting it compiling first so others can jump in :)

1616096547
g-w1
makes sense :)

1616096609
TheLemonMan
llvm12 merge when?

1616096845
andrewrk
oh snap did they release?

1616096950
mikdusan
no

1616096969
TheLemonMan
not yet (we can still get some bugfixes in, eg. #8117), but it'd be better to catch any regression asap

1616096994
andrewrk
no wai they have so many open bugs

1616096995
andrewrk
the null hypothesis is we merge it the moment that they officially tag the release

1616097060
andrewrk
TheLemonMan, I'll do a complete test suite run overnight tonight with a debug llvm 12

1616097137
TheLemonMan
beware of #8251, I haven't had enough time to triage it yet

1616097149
andrewrk
noted, thank you

1616097290
andrewrk
I wonder if our CI is green

1616097300
andrewrk
I thought jakub's linker changes were tripping something

1616097379
g-w1
he made some of the things use lld before merging

1616097519
andrewrk
ah he adjusted the default selection logic. nice

1616098396
andrewrk
oh snap we have exactly 1000 behavior tests right now

1616098540
andrewrk
check it out:

1616098543
andrewrk
I think there is more low hanging fruit like this

1616098558
g-w1
nice

1616098562
mikdusan
I don't grok how zld merge is green. on 2 x86_64 macs (11.2 and 10.13) standalone/global_linkage fails for me; same error message for a simple build-exe hello.zig

1616098578
mikdusan
and ci just passed the very test failing for me.

1616098659
andrewrk
I'm sure jakub would be very interested in a bug report

1616098717
mikdusan
oh wow. might be related to env ZIG_GLOBAL_CACHE_DIR and ZIG_LOCAL_CACHE_DIR which I set.

1616098728
mikdusan
ok no biggie

1616099108
ifreund
stage1-memory-layout branch when? :P

1616099169
g-w1
lol

1616099198
andrewrk
ha

1616099232
andrewrk
idk there is a legitimate argument to be made to do that

1616099246
andrewrk
I mean I'm doing it to some degree right now so I can merge a PR that is blocking stage2

1616099267
g-w1
the enumarray is blocking stage2?

1616099271
andrewrk
yeah

1616099279
andrewrk
need it :)

1616099283
g-w1
for what?

1616099311
ifreund
Consts

1616099326
ifreund
g-w1: see const_inst_list

1616099383
yyp
enumarray?

1616099390
g-w1
ah i see

1616099401
yyp
What even is that? I've never heard of something like this

1616099642
andrewrk
it's when you want an array item where the elements correspond to enum fields

1616099649
ifreund
it's a thing in C too

1616099650
andrewrk
s/item //

1616099666
yyp
Didn't get it. Any example code?

1616099672
ifreund
yyp:

1616099701
yyp
Thanks!

1616099713
ifreund
yyp: or in wlroots :P

1616099715
yyp
That looks literally unreadable, just like with any C code

1616099731
yyp
Or maybe not really

1616099767
ifreund
I don't have any problem with it

1616099795
yyp
It's like @enumToInt(MyEnum.whatever) as a hashmap index?

1616099810
ifreund
but it's an array not a hashmap

1616099848
v0idify
what is it with c devs making files huge

1616099892
yyp
So, it's like an array where everything is empty except enum fields

1616099900
v0idify
just to confirm, even with zgl and zig-wayland i need to cInclude EGL right?

1616099903
yyp
v0idify: because C :P

1616099912
v0idify
fair enough

1616099951
yyp
v0idify: I don't think you need to use @cImport at all, you only need to .linkSystemLibrary (?)

1616100023
yyp
nevermind

1616100032
yyp
misread the question

1616100414
v0idify
s/zgl/zig-opengl

1616100440
v0idify
how do i call load in zig-opengl? I don't understand the parameters

1616100532
yyp
You should definietly .linkSystemLibrary("opengl") in build.zig

1616100546
yyp
oops, no

1616100567
yyp
.linkSystemLibrary("epoxy")

1616100580
v0idify
i'm pretty sure that would be just gl

1616100586
v0idify
zig-opengl doesn't use epoxy

1616100591
yyp
No, they use libepoxy

1616100602
yyp


1616100605
v0idify
that's not the problem though, the api confuses me

1616100610
v0idify
that's zgl :)

1616100673
yyp
Well, they basically mirror epoxy/gl.h API in Zig, nothing fancy

1616100692
yyp
I'm not an OpenGL expert and have no idea how to use that, sorry

1616100723
v0idify
:)

1616101652
oats
what's this "gyro.zzz" file

1616101660
oats
is there some kind of package manager now :O

1616101684
yyp
Yes, but it's not official

1616101705
oats
is it planned to have an official package manager?

1616101712
oats
or is that going to stay decentralized as well

1616101713
yyp
I think yes

1616101744
yyp
And decentralized too

1616102078
yyp
Is there a way to force Zig compiler to dump LLVM IR to a file instead of producing the binary?

1616102202
g-w1
--verbose-llvm-ir

1616102233
v0idify
answer to myself -> depends on the driver. on EGL: eglGetProcAddress

1616102253
yyp
g-w1: It dumps a lot of unrelated stuff besides the IR file

1616102283
yyp
I want to see what it actually feeds into llvm

1616102321
g-w1
-femit-llvm-ir=path

1616102447
yyp
Oooh I see, --verbose-llvm-ir is what I wanted, thanks!

1616102918
v0idify
error: cast discards const qualifier -> i'm sure this is fine (c stuff), how can i tell it to f off?

1616103074
TheLemonMan
scary

1616103166
ifreund
v0idify: @intToPtr(@ptrToInt())

1616103220
yyp
Does that convert it to const?

1616103269
v0idify
no, const -> non const

1616103291
v0idify
non const -> const are done automatically

1616103317
yyp
Not so sure about non-const -> const

1616103388
v0idify
well i am :)

1616103389
ifreund
v0idify: you can cast away const that way

1616103442
v0idify
yes i understand

1616103461
ifreund
ah, yeah I misinterpereted

1616103461
v0idify
hmm not having wayland-egl along zig-wayland is annoying, i have to ptrCast all over the place I think

1616103475
v0idify
thanks btw

1616103484
ifreund
zig-wayland provides all the wayland-egl functions?

1616103496
v0idify
sorry i meant egl

1616103496
ifreund
or is it missing something?

1616103506
v0idify
using egl with zig-wayland is weird

1616103569
ifreund
you should only need to @ptrCast() like once to initialize egl right?

1616103617
ifreund
If you see ways to improve this, let me know by the way. I haven't actually written a EGL client in zig yet

1616103620
v0idify
i believe i need it a few times during init, i'll get back to you on it though

1616103627
v0idify
<3

1616104026
v0idify
ifreund, i also patched my way into zig master with zig-wayland, i can send it if you want

1616104206
ifreund
v0idify: oh sure, go ahead and open up a PR if you like. Though I wont merge it until 0.8.0 is released it would save me some time :)

1616104290
v0idify
of course

1616105280
v0idify
ifreund, the shell extension is not registering

1616105393
ifreund
hmm? what do you mean?

1616105562
v0idify
can i PM you? this is very zig-wayland and wayland specific :#

1616105613
ifreund
#river would be fine

1616109043
g-w1
andrewrk: I unfortunately missed the part of the stage2 meeting where you talked about the zir memory layout. was there anything discussed that has not been discussed here/on discord?

