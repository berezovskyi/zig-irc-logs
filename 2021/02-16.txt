1613433623
gpanders
posixlix: what is the type of val.tag in this example? a string?

1613433665
posixlix
std.meta.Tag(Foo_Union), I guess.

1613434304
zags
ikskuh: so that's interesting. I do var x = allocator.create(MyThing), then later do allocator.destroy(self). I log that it happens. Still, std.testing.allocator claims that the create call causes a leak.

1613441910
pyrmont
Hi, I'm very new to Zig and am currently going through ziglearn.org. A few times in chapter 1 it mentions coercion. I'm a little confused what it means when it says, for example, '*T coerces to [*]T' (

1613442064
andrewrk
to be clear, *T does not coerce to [*]T

1613442070
andrewrk
there is an open proposal for that, I believe

1613442081
pyrmont
Oh.

1613442094
andrewrk
you can think of coercion like this: does zig let you do this? const x: T = y;

1613442104
andrewrk
if yes, then y coerces to x.

1613442111
pyrmont
Ahhh.

1613442115
andrewrk


1613442121
pyrmont
Greatâ€”thanks :) That helps a lot.

1613443318
squeek502
g-w1, how would stage2 emit an exe even when encountering a compile error?

1613443334
squeek502
am i missing something?

1613443420
squeek502
(in reference to

1613443511
g-w1
the errors for @compileLog are special

1613443586
squeek502
imo compilation succeeding with compile errors seems like a bug

1613443598
squeek502
are compileLog errors meant to be special in that way?

1613443607
g-w1
it will still produce the stub of a binary even with a blatant error

1613443614
g-w1
see

1613443661
g-w1
(let me link to a discussion i had about this a while ago on irc)

1613443694
squeek502
where is the emit happening in that branch?

1613443708
g-w1
compilation.update() ?

1613443742
squeek502
what's this do then?

1613443776
g-w1
ohh im now very confused :D

1613443792
squeek502
note: i have zero knowledge of how stage2 works

1613443805
g-w1
i thought i did but something must have changed ;)

1613443834
squeek502
but it seems like all compile errors would trigger the if branch, meaning if compileLog errors allow emitting an exe, then any error would?

1613443838
squeek502
which seems wrong?

1613443885
g-w1
i have the feeling that my memory is failing me; let me dig through the code for a few minutes

1613443916
g-w1
ok yeah it was

1613444004
g-w1
ignore what i said sorry about that, but it could be

1613444052
squeek502
right, but the compilation failing is intended for now, which is what that proposal is suggesting to be changed

1613444071
g-w1
yeah ill update my comments very sorry about that

1613444096
squeek502
np :)

1613444537
g-w1
but to go back to my previous point, when compiling an even invalid binary, stage2 will still emit a file with the start of an elf thing for incrimental compilation. so i dont think it would be out of the spec to emit a (complete) file because one (non-complete) will be emitted even when compilation fails

1613447248
daurnimator
g-w1: the whole point of a "complete" file is so that the compilation runs again

1613447272
daurnimator
g-w1: @compileLog is inherently uncacheable: you want to do the compilation again to generate the log message again

1613447549
g-w1
Module.zig has a field called compile_log_text that stores the compile log output. with

1613447586
g-w1
this is how I thought of it, not sure if im making mistakes in my logic

1613463454
dch
how does zig deal with speculative execution ?

1613463476
dch
sorry for the handwavey question

1613463652
marler8997
seems like a hardware issue that can't be solved with software

1613463837
ikskuh
heya o/

1613463845
ikskuh
marler8997: i don't think having prebuild.zig is a good idea

1613463862
ikskuh
i talked to andrew a bit yesterday and what gyro is doing is the proper way to do this

1613463872
marler8997
what way is that?

1613463881
ikskuh
compile your own build runner

1613463895
marler8997
huh?

1613463901
dch
marler8997: typically we need microcode update & compiler functionality like retpoline to address these, and yes some of them are basically "get a better cpu"

1613463940
dch
I'm mainly curious if zig inherits any llvm protection mechanisms by default, and how an eventual fully self hosted compiler might change that

1613463982
marler8997
what does "compile your own build runner" mean?

1613464057
ikskuh


1613464066
ikskuh
marler8997: exactly what i'm saying

1613464082
ikskuh
"zig build" is just compiling a build_runner.zig which then invokes Builder.make()

1613464176
marler8997
so what makes this method better than prebuild.zig?

1613464215
ikskuh
it's way more flexible

1613464229
marler8997
how so?

1613464230
ikskuh
you can add packages to build.zig for example

1613464236
ikskuh
you define the build mode

1613464248
ikskuh
you can do multiple runs of the build() function that allows certain things

1613464276
marler8997
oh because you're customizing how build.zig is built, whereas with prebuild.zig, you're not customizing how build.zig is build

1613464284
ikskuh
exactly

1613464373
marler8997
interesting

1613464389
marler8997
what's your github name?

1613464437
ikskuh
mine? MasterQ32

1613464454
marler8997
dch, sorry I'm not too familair with that, you might have to ask another time since it seems no one is responding right now

1613464497
dch
marler8997: np, I'm sure eventually somebody will poke it with a stick. thanks!

1613464566
marler8997
ikskuh, what do you think I should name my subbuild file?  realbuild.zig?  childbuild.zig?

1613464578
ikskuh
no idea

1613464600
ikskuh
for me it feels like a workaround for not having a builtin package manager right now

1613464648
marler8997
I feel like I don't need a package manager, I just need a way to request file trees

1613464679
ikskuh
which is what the zig package manager will do, eventually :D

1613464694
marler8997
well, that's what I'm working on

1613464815
marler8997
hmmm, I'm seeing a problem with this method

1613464827
marler8997
how do I forward all the options from the child build to the main build?

1613464837
marler8997
the options are part of what's generated by my dependencies

1613464921
ikskuh
if done right, you can run build(b: *Builder) twice ):

1613464932
ikskuh
once for determining the options and their values

1613464937
ikskuh
once for updating the refs

1613465020
marler8997
are the options supposed to be determined on the first run or the second?

1613465037
marler8997
because I can't do it on the first pass, they won't be availble till the second pass when I've retrieved my dependencies

1613465086
ikskuh
hm

1613465095
ikskuh
can't you just fetch all deps?

1613465122
marler8997
that's what the first pass is for

1613465141
marler8997
I can't use the deps on the first pass that's the whole point of the first pass :)

1613465159
marler8997
otherwise, I'll just geting compile errors about failing imports

1613465205
ikskuh
not sure if it's a good idea to declare the deps in build.zig

1613465210
ikskuh
but what is possible:

1613465222
marler8997
I'm not sure what you mean by "declare the deps"

1613465230
marler8997
I'm not declaring them in build.zig, there in my subbuild.zig

1613465230
ikskuh
pub fn declareDeps(dependency_manager: *marler.DependencyManager) void;

1613465237
ikskuh
pub fn build(b: *Builder) void;

1613465284
marler8997
I'm not sure what this has to do with getting the options from the dependencies into zig build

1613465317
marler8997
I have project A which depends on project B, and project A wants to import files from project B into it's build.zig file

1613465336
marler8997
so with your solution, I split project A into build.zig, and subbuild.zig

1613465343
marler8997
subbuild.zig is what imports the files from project B

1613465360
marler8997
build.zig just builds subbuild.zig and calls it, but how do I forward all the options from one to the other?

1613465393
marler8997
I don't see a way to forward the call from build.zig to subbuild.zig, the "build" entry point doesn't support forwarding as far as I can tell

1613465450
ikskuh
don't use build.zig for this

1613465451
marler8997
This solution is easily solvable with prebuild.zig, how do I do this with your solution.  I'm not seeing it but you said it was more flexible

1613465455
ikskuh
to build the build runner

1613465468
ikskuh
zig run prebuilt.zig

1613465470
ikskuh
done.

1613465485
ikskuh
this builds a build runner that runs build.zig :)

1613465603
marler8997
interesting, maybe that will work

1613465615
marler8997
I'll need a way to cause "zig build" to print an error that they need to run "zig run build.zig"

1613465695
ikskuh
oh true, that's also possible

1613465713
ikskuh
you can just do that with @hasDecl(@import("root"), "marlers_magic")

1613466021
marler8997
preppedbuild.zig

1613466380
marler8997
hmmm, how do I get the zig executable?

1613466476
ikskuh
invoke "zig env"

1613466502
marler8997
how does that give me the same zig executable that was used on "ZIG run build.zig"?

1613466546
marler8997
zig will have to pass itself to the resulting build executable somehow, is it doing this?

1613466592
marler8997
shoot, this means we'd have to patch "zig run"

1613466654
marler8997
the only viable solution I can think of is to add an environment variable

1613466665
marler8997
ZIG_RUN_EXE?

1613466712
ikskuh
nah

1613466719
ikskuh
argv[0] is the solution ;)

1613466741
marler8997
that's already being used

1613466748
marler8997
in fact there was a bug for that already :)

1613466785
ikskuh
see std.fs.selfExeDirPathAlloc

1613466794
marler8997
for what reason?

1613466806
ikskuh
ah dang

1613466941
marler8997
I can't think of a good solution to this

1613466952
marler8997
it makes me think there's something wrong with this solution, like we're missing something

1613467021
ikskuh
you can also query your parent processes i think

1613467035
marler8997
not with execve

1613467048
ikskuh
ah true

1613467083
marler8997
I think the fundamental problem here is that zig needs to be involved during the whole process, it can't build an exe and peace out in the middle of the build

1613467376
marler8997
the problem with "zig run" is that the zig exe is gone, the problem with "zig build" is that the entry point is not flexible enough

1613467405
marler8997
I think the right solution is going to involve actually hooking into zig build somehow

1613475262
zags
jeezus, I keep doing zig commit and git run :D

1613475275
ikskuh
zags: yeah

1613475289
zags
i'm not alone? :D

1613475292
ikskuh
just write two shell scripts "zig" and "git" that just dispatch the right command

1613475296
ikskuh
no, you're definitily not

1613475297
zags
haha

1613478317
dutchie
oh nice, the fosdem videos are up:

1613481036
Swahili
In Zig, we keep the tests in the file, at the bottom. Sorry, I think I read this somewhere but couldn't find it in the docs now (

1613481236
ifreund
you can put tests wherever you want in zig

1613481830
zags
about that, can i tell zig test not to run tests recursively on imported files?

1613481873
ifreund
no, but you can use --test-filter if you want to isolate a test case or cases

1613482002
zags
yeah, i know about that one, but it's not of much help here

1613482029
zags
a --test-shallow or something would be great

1613483279
Swahili
How to use a type from an import? For example,

1613483461
ifreund
that looks right

1613483715
Swahili
Thanks for looking! What If I wanted to do an array of a particular struct? could I do []foobar.Foobar { { .x = 1, .y = 4} } ?

1613483742
dutchie
[]foobar.Foobar{ .{ .x = 1, .y = 4} }

1613483762
dutchie
or []foobar.Foobar{ foobar.Foobar{ .x = 1, .y = 4 }}

1613483777
Swahili
Interesting! Thanks a lot : )

1613483781
dutchie
you can also do `const Foobar = foobar.Foobar` to make things a bit shorter

1613483793
Swahili
Yeh, that sounds good!

1613483805
dutchie
oh, you'll want [_] instead of []

1613483894
Swahili
Right! to have the length inferred, thanks : )

1613483942
ifreund
[] is a slice not an array

1613487232
marler8997
ikskuh, have a look at this proposal/build.zig example:

1613487241
marler8997
takes elements from what you were telling me earlier

1613487524
ikskuh
i'm not sure if i find that good

1613487543
oats
I really appreciate zig's unnamed struct notation

1613487547
oats
.{ .x = 1 }

1613487555
oats
almost feels like row polymorphism

1613491564
Swahili
Let's say I have const input = "=+", if I do print("{}\n", .{ input[1] }) I get the decimal value for "+", so I assumed that I would get "+" when doing print("{s}\n", .{ input[1] }). What should I study/learn to understand what's going on here? Thanks!

1613491595
ikskuh
Swahili: read the implementation of std.fmt.format

1613491608
ikskuh
there's a huge doc comment on top of it explaining a lot

1613491847
Swahili
ikskuh: thanks for looking! I'll do : )

1613491981
ikskuh
no need to look, i wrote most of that comment :D

1613492256
Swahili
ikskuh: gosh, it did help! I can see the output now "+"

1613492276
ikskuh
\o/

1613494242
tane
howdy

1613494408
ikskuh
'ello!

1613495334
ifreund
andrewrk: how would you feel about // zig fmt: (on|off) working anywhere in the file not just at the top level?

1613495363
ifreund
almost seems like it would be easier/cleaner to implement that way now that comments are no longer tokens...

1613495543
ifreund
I'm part way through trying to implement the current behavior but it's messy and doesn't work yet

1613497303
andrewrk
ifreund, sounds good

1613497339
andrewrk
I think if you want to use your best judgement and modify some of the test cases in a way that seems reasonable, go for it

1613497377
andrewrk
if we break somebody's workflow, I'm sure we'll have time to address it

1613497507
ifreund
sounds good to me :)

1613497566
ifreund
running zig fmt on parts of the std after we are passing the test suite should help find edge cases (for which we can then add more tests)

1613497664
jacob3
would it make sense to put a zig fmt check in the ci? some files in std aren't formatted correctly and i think a check would fix that

1613497757
ifreund
I'd say yes, it could be a simple github actions job

1613497824
g-w1
ok, ill work on that, although i think it would be better to put it in the ci scripts

1613498220
ifreund
g-w1: don't forget about zig fmt --check

1613498229
ifreund
and that you can pass it directories

1613498543
g-w1
yep, doing that rn

1613498571
g-w1
zig fmt --check test/stage1/behavior/bugs/4769_c.zig fails, but it was added on purpose. this is an inconsistency between stage1 and stage2

1613498574
g-w1
should I delete it?

1613498579
g-w1
see

1613499007
ifreund
g-w1: I think adding // zig fmt: off at the top of the file would be the right solution

1613499015
g-w1
ok

1613499028
ifreund
actually wait, that's not vaild zig is it?

1613499042
ifreund
doc comments need a decl I thought

1613499059
g-w1
yeah, thats y i was confused

1613499086
g-w1
stage2 flags it, stage1 doesn't; i think it would be better to just remove it

1613499109
ifreund
I'd delete it then yeah

1613499112
g-w1
ok

1613499419
g-w1


1613499549
ifreund
g-w1: you need // zig fmt: off for  test/stage1/behavior/bugs/4769_a.zig

1613499564
ifreund
the missing newline at the end of the file is intentional

1613499577
ifreund
same with 4769_b.zig

1613499635
g-w1
ah, I was wondering what to do with that. ok

1613500626
andrewrk
I'm not ready to fail pull requests due to improper zig fmt yet

1613500664
andrewrk
zig fmt is not quite up to the quality point that I think it makes sense to do that

1613500734
ifreund
I think with the more granular // zig fmt: (off|on) it would be fine

1613501060
andrewrk
we're about to add a bunch of instability to it though with this branch

1613501076
andrewrk
I predict a couple undetected bugs

1613501128
ifreund
true

1613501143
andrewrk
we'll get there. I just think it's not quite time yet

1613501175
g-w1
should I change the pr into just formatting the code?

1613501202
g-w1
the reason I am doing this is because I get annoyed when my editor formats the code and then the diffs get messed up

1613501243
andrewrk
I think that PR would introduce unnecessary conflicts with the big branch where we have slightly changed the zig fmt rules

1613501256
g-w1
ok, I can do it after, thanks

1613501314
andrewrk
sorry, I agree that is an annoying problem and that your proposed solution would fix it

1613502784
zags
Let's say I have an ArrayList(MyType), i.e elements are values. If I make a local (on stack) struct instance and then immediately append that (and never touch the local again), does that still introduce a copy, or is it elided by the compiler? If not, is the plan to make it so? :D

1613502835
ifreund
llvm should be smart enough to elide that

1613503189
zags
ifreund: i see, it's sometimes not just an optimization, as the object may hold non-copyable things like allocators, so knowing what guarantees exists in 1.0 would be great

1613503226
zags
in c++ i would make these things non-copyable, not sure if something similar is planned (or if it's possible without constructors)

1613503238
ifreund
Once pinned is implemented copying pinned things will be a compile error

1613503246
zags
that will go a long way

1613503289
ifreund
the answer here though is that no, zig does not and probably never will guarentee that the copy will be elided in this situation

1613503299
zags
i see

1613503307
ifreund
use ArrayList().addOne()

1613503350
zags
in this case... excellent point :D

1613503697
zags
hm, then I have to change around error handling. I can't seem to combine decl and catch: var x = list.addOne() catch |err| {...}

1613503718
zags
that's a compile error, what's the correct idiom?

1613503760
ifreund
you can do that, but your catch block needs to evaluate to either noreturn or *T

1613503795
zags
hm

1613503828
zags
ah, gotcha, thanks

1613504136
tane
realizing polymorphism and ownership in a collection doesn't seem super trivial

1613504167
tane
if it's all on the heap, the embedded struct (like Allocator) would also need something like a `deleteFn`, right?

1613504177
tane
to retrieve its parentpointer and then deallocate from there

1613504870
andrewrk
my showtime talk is in 15 minutes, on the topic of portable linux binaries that can open a window and use vulkan drivers

1613504875
andrewrk


1613505061
ifreund
nice, zig fmt: (off|on) works everywhere now

1613505136
ifreund
andrewrk: if you have a minute before the stream, would you rather integrate AutoIndentingStream even more tightly with zig fmt or use a nice mutable global like I'm doing now?

1613505223
andrewrk
uhh not sure, but I will say that I feel a little skeptical about AutoIndentingStream and wouldn't mind special casing it for zig fmt

1613505304
ifreund
Yeah I don't think it's very generally useful outside of our formatting implementation

1613505351
ifreund
I think I'll move it to render.zig and make it not pub

1613505466
andrewrk
I support that

1613506028
ifreund
urgh, the C backend uses AutoIndentingStream as well

1613508004
ifreund
C backend doesn't use much of it though, I'll just leave a minimal IndentWriter in that file

1613510023
zags
going back to error handling in c++ gives me nausea :( dealing with a mixture of bools, ints, error_code's and exceptions >.<

1613510049
Techcable
:laugh:

1613510061
zags
when zig world domination

1613510083
Techcable
Nah, just C domination

1613510111
ifreund
zig replaces C++ for me as well

1613510127
Techcable
Yeah, its very clean :)

1613510132
Techcable
What about Rust?

1613510168
ifreund
I'd take Rust over C++, but Zig or C over Rust

1613510181
zags
:D

1613510195
ifreund
though that does depend more on the use-case

1613510199
zags
i'm reasonably friendly with the borrow checker now, but I still don't like the language

1613510203
Techcable
Really?

1613510215
Techcable
I mean it's a little over-complicated

1613510221
ifreund
more than a little

1613510225
Techcable
he he he

1613510235
zags
lots of unnecessary mental load

1613510250
Techcable
Well a lot of that abstraction is nessicarry to deal with the borrow checker and its safety features

1613510250
ifreund
definitely better than C++ though

1613510252
zags
especially as a second language

1613510263
zags
ifreund: for sure, but that's not saying much now is it? :LD

1613510272
ifreund
nope not at all :D

1613510281
Techcable
One thing I really don't like is how bloated the applications are :(

1613510328
ifreund
compile times and portability are also not good

1613510350
Techcable
Prtability always seemed great to me

1613510356
Techcable
Pretty much all platforms are supported

1613510373
Techcable
But compile times are attrocious due to LLVM and their implementation of generics

1613510389
Techcable
I have a simple command line app that takes 2.4 MB

1613510413
ifreund
Techcable: may I introduce you to

1613510483
Techcable
Hmm

1613510499
ifreund
and compile times can't be blamed entirely on LLVM, C compiles far faster with clang which is also LLVM based

1613510517
Techcable
Oh no no no no

1613510528
Techcable
its 99% because of rust's design choices

1613510550
Techcable
By designn, Rust requires optimization to achieve reasonable performance

1613510557
fengb
They throw millions of junk instructions to LLVM hoping it'd be cleaned up

1613510562
ifreund
heh

1613510563
Techcable
Yes

1613510581
Techcable
Its "zero-cost" abstractions are only zero cost at llvm -O3

1613510582
ss141309
Hi! I am trying out zig, but zig build gives the following error: "error: unable to find zig installation directory: FileNotFound". Zig is compiled from source. How can I resolve this?

1613510623
Techcable
ss141309, Why are you trying to compile from source?

1613510631
Techcable
Is there a specific reason you want that?

1613510636
ifreund
ss141309: it sounds like you've move the zig binary somewhere but not he lib directory

1613510658
ss141309
wanted to try out ziglings, the tar version also gave the same error

1613510698
Techcable
Hmm

1613510703
ifreund
the zig binary needs to stay at the same relative path to the lib dir

1613510707
Techcable
What system are you on?

1613510711
ss141309
linux

1613510720
ifreund
if you simply unpack the tarball and run it withough moving anything it should work

1613510732
ss141309
where should i unpack the tarball?

1613510740
ifreund
wherever you want, it doesn't matter

1613510757
ifreund
the only thing that matters is the relative path between the zig binary and the lib dir

1613510757
ss141309
it does not need to be on the path?

1613510765
Techcable
I would assume so

1613510783
ifreund
if you want to add it to your PATH you can do that yes

1613510802
ss141309
ok thanks, i will try it

1613510809
Techcable
You could just export it at the command line :)

1613510836
Techcable
export PATH="$PATH:path_to_zig"

1613510938
ss141309
it is working now, thanks!

1613511006
ed_t
I want to do something like: self.x = async f();

1613511009
ifreund
no problem, have fun with ziglings!

1613511022
ed_t
how should x be declared in the structure?

1613511039
g-w1
I think @Frame(f)

1613511039
ifreund
ed_t: @Frame(f)

1613511039
fengb
x: @Frame(f)

1613511045
g-w1
lol

1613511047
ifreund
jinx g-w1 fengb

1613511060
fengb
Pfft, you tried to redeclare ed_t

1613511251
ed_t
thanks.  If f is not known at comptime is there a way to declare that too?

1613511318
fengb
Not completely, but you can fake it with a manual bytes

1613511355
fengb
With @asyncCall, you can use an existing byte slice as the frame location

1613511477
ed_t
thanks fengb.  the help given on this channel makes learning zig less frustrating.

1613511509
fengb
Oh well... async might lead you to a lot more frustration >_>

1613511571
ed_t
fengb I am well aware of async and how much of a pita it can be.

1613511629
ed_t
and yes I expect async, when I start really using it, to lead to some 'interesting' buglets

1613511711
ifreund
async is also still quite experimental in Zig, more of a PoC than anything else

1613511807
ed_t
I sort of like the zig model for async.  It should let me create a tool similar to the old IBM pipelines tool fairly 'easily'

1613511881
ifreund
oh yeah I think zig's approach to async is very promising

1613511884
ed_t
two decades back I create a java/netrexx version but java's threading model make it hard.  zig's on the other hand.  fits the problem like a glove

1613511894
ifreund
it's just not quite finished yet :D

1613511947
ed_t
how stable do you guess the interface is?

1613511966
ed_t
stable as in language stable

1613512046
ed_t
and what needs to be added?

1613512109
ifreund
well, select for one

1613512134
ifreund


1613512142
ed_t
reading thanks

1613512189
ifreund
hard to say how much the interaface will change

1613512234
ed_t
for what I want to do select is not needed (at least at the start)

1613514388
Swahili
I've got a struct where I store some input data and a test, where I iterate on the input. On a fn readNextCharacter, I get a "error: the following test command crashed", zig-cache/o/3594b7547857541b4baada4557e68389/test /usr/local/Cellar/zig/HEAD-300ebbd/bin/zig

1613514393
Swahili


1613514419
Swahili
Does anyone know what I'm doing wrong? Thanks!

1613514677
Gliptic
<= is wrong

1613514682
Gliptic
for one

1613514861
ikskuh
Swahili: you are returning a pointer to stack memory in "new"

1613514871
ikskuh
just do not return a pointer but a value ;)

1613514923
ikskuh
instead of

1613514923
ikskuh
pub fn new(input: []const u8) *Foobar {

1613514924
ikskuh
do

1613514925
ikskuh
pub fn new(input: []const u8) Foobar {

1613515293
Swahili
Thanks for looking! I see, I'll try again!

1613515805
Swahili
Gosh! Thanks a lot! That worked! I should have asked before :~(

