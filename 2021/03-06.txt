1614989119
Gliptic
std.mem.zeroes(type)

1614990661
olabaz
Gliptic: very epic, thank you

1615044253
marler8997
being inspired by Andrew's big DOD change, I found the opportunity to use the same technique to improve this tiny-regex-c library:

1615044263
marler8997
it's a pretty cool project, regex in like 500 lines of C code

1615044519
TheLemonMan
tiehuis wrote a nice regexp engine in Zig

1615044655
marler8997
hmmm, not sure it looks very DOD

1615044686
TheLemonMan
Department of Defense?

1615044700
marler8997
Data Oriented Design

1615044715
marler8997
which says nothing about the API, the api could be great

1615044771
TheLemonMan
ah

1615045115
TheLemonMan
g-w1, what happened to your PR for detecting TERM=dumb ?

1615045124
g-w1
closed because it was a hack

1615045160
g-w1
you said we need a terminfo parser

1615045230
TheLemonMan
I said it was a stopgap solution, writing a terminfo parser is boring and a lot of work

1615045231
g-w1
this still got merged, but its for progress so it also enables better progress printing for files/piping to stuff too

1615045487
g-w1
andrewrk: would you reconsider 8026 now that 7920 has been merged?

1615050931
simson
hi! I'm trying to understand Zig Github issue 1717. Does it mean that the more Rust-style function definitions (e.g. `pub fn foo() {...}`) are not possible anymore when this is implemented? Or is the RFC just an alternative way to make function definitions?

1615050998
simson
for reference:

1615051034
ikskuh
simson: yes, that's the current accepted variant

1615051038
ikskuh
so a function definition will be

1615051052
ikskuh
const foo = fn() void { std.debug.print("Hello, World!", .{}); }

1615051052
Raito_Bezarius
Hi there, I'm trying to build a riscv64-uefi target and I'm getting lld-linker errors about "unknown file type" on an object file, could it be I'm doing something wrong?

1615051060
Raito_Bezarius
(version 0.7.1)

1615051104
TheLemonMan
is that a thing?

1615051154
simson
ikskuh: ok, thank you. Won't this hurt readability? It feels alot more lisp-y than C-like.

1615051167
Raito_Bezarius
AFAIK, riscv64-uefi is Tier 3

1615051177
ikskuh
i actually think it's better for readability

1615051191
ikskuh
as now

1615051207
ikskuh
and there is no distinction between functions (which cannot be local right now)

1615051325
TheLemonMan
Raito_Bezarius, I'll have a look

1615051331
Raito_Bezarius
Thanks TheLemonMan !

1615051439
simson
I understand that, its like in scheme every symbol is declared with (define ...). that makes sense since everything is treated like lists (or data if you will). But ALGOL/C-like language treats function and data differently and highlight that in syntax. I was just wondering, I don't have a strong opinion on this.

1615051584
ikskuh
simson: zig doesn't treat them differently

1615051599
ikskuh
you can manipulate types, functions and

1615051655
ikskuh
you can also copy functions around at comptime

1615051660
ikskuh
you can even compute some new ones

1615051852
simson
But functions usually live in a separated memory area. is this not the case with zig? Can I just allocate a function on the heap and mark it executable?

1615051866
ikskuh
welcome to lowlevel

1615051869
ikskuh
that's also possible in C

1615051873
ikskuh
but you need to assemble that function :D

1615051891
ikskuh
in zig you can create new functions at comptime with some workarounds  (aka implementing a comptime programming language)

1615052084
ikskuh
for me, it's the biggest  thing that is missing in zig for me besides having a proper support for address spaces and usize vs upointer

1615052172
simson
and having both ways to declare functions is not preferred to keep it "simple" I assume?

1615052205
ikskuh
* Only one obvious way to do things.

1615052213
ikskuh
"declare something?"

1615052217
ikskuh
"const X = …;"

1615052221
Barabas
Hello, how do I write the type of a function pointer?

1615052221
ikskuh
construct something?

1615052223
ikskuh
"T { … }"

1615052233
ikskuh
Barabas: just use the function signature

1615052238
ikskuh
const FnPtr = fn() void;

1615052289
Barabas
thanks

1615052404
simson
ikskuh, that's fair. thanks for answering

1615052924
olabaz
if I'm trying to write a wrapper for a c header file. Is it better to use just one zig file or can I split it up into sections?

1615052966
g-w1
both work

1615052993
olabaz
it seems like splitting it up into multiple sections I will have to use @cimport multiple times and it will cause it read the header file multiple times

1615053027
g-w1
just make one file called c.zig that does pub usingnamespace @cImport ... then @import() that file from other ones

1615053064
olabaz
g-w1: ooh ok I'll look into that

1615053065
olabaz
thanks

1615053925
olabaz
so previously I had c.func() now is it just func()?

1615054104
olabaz
I had done c = @cImport...; now with pub usingnamespace @cImport I can just directly call the stuff?

1615054152
g-w1
yes

1615054210
olabaz
ok cool everything is working agian!

1615054401
olabaz
oh another question I had: I've been using f(comptime T:type,...) but I just realized I can do f(v :anytype)

1615054405
olabaz
what's the purpose of each

1615056259
TheLemonMan
Raito_Bezarius, llvm doesn't know how to emit a COFF file for RISCV64

1615056411
Raito_Bezarius
ha, TheLemonMan, is there a way to avoid to emit a COFF at all?

1615056544
TheLemonMan
well, the whole EFI thing is just PE/COFF in disguise

1615056713
Raito_Bezarius
ah makes sense

1615056741
olabaz
is there a way to get the f32 from the type Complex(f32)

1615056766
TheLemonMan
you can probably get around that by building an ELF file and then re-assembling it as needed

1615056777
olabaz
I want to return f32 if input is Complex(f32) and f64 if it is Complex(f64)

1615056794
TheLemonMan
olabaz, what's Complex ?

1615056825
olabaz
std.math.complex.Complex

1615056852
olabaz
I am passing it in through comptime T:type

1615056905
TheLemonMan
@TypeOf(instance.re) ?

1615056966
TheLemonMan
Raito_Bezarius, edk2 genfw should do exactly that

1615056994
olabaz
yeah I tried that but then it fails if I put in just a regular f32

1615057019
olabaz
so I guess what I really need is f32 or Complex(f32) return f32 and similarly for 64

1615057054
TheLemonMan
how is that failing?

1615057056
Raito_Bezarius
TheLemonMan: good point

1615057176
olabaz
error: type 'f32' does not support field access

1615057261
TheLemonMan
hmm, can you show some code? it seems you're trying to call .re on a number

1615057291
olabaz
oh is that not what you meant?

1615057294
olabaz
what is instance

1615057304
TheLemonMan
an instance of Complex(T)

1615057400
olabaz
hmm, I'm confused. my T = Complex(f32)

1615057457
Gliptic
olabaz: you want a function that is identity for f32 and .re for Complex?

1615057476
olabaz
yeah and also works for f64

1615057666
TheLemonMan
show some code

1615057670
marijnfs
not a fan of there format changes

1615057683
marijnfs
not i can't use {x} anymore?

1615057692
TheLemonMan
no

1615057701
marijnfs
the {s}/{any} is also annoying, can't we just have {} do regular things

1615057707
TheLemonMan
no

1615057767
TheLemonMan
x/X is still printing the slice/array contents in hex, if you want back the old condensed hexdump format follow the instructions contained in the error message

1615057997
olabaz
my function header is: pub fn asum(comptime T: type, x: *matrix.Matrix(T)) T.re

1615058073
TheLemonMan
oh I see, you don't have an instance

1615058101
TheLemonMan
@TypeOf(@as(T, undefined).re) should work :)

1615058120
olabaz
should I even be using comptime for this anytype?

1615058123
olabaz
ok I'll try that

1615058138
TheLemonMan
but you're better off using some helpers in std.meta to inspect the field types in T

1615058224
olabaz
hmm still says f32 doesn't support field access

1615058245
marijnfs
TheLemonMan: you say {x} should still kind of work? cause it gives me an error

1615058269
TheLemonMan
olabaz, is T f32 or Complex(f32) ?

1615058278
olabaz
it can be either

1615058283
TheLemonMan
marijnfs, no, please read the error

1615058312
marijnfs
ah ok, because you said 'x/X is still printing the slice contents in hex'

1615058343
TheLemonMan
olabaz, then you need a function that switches on the T

1615058360
marijnfs
'wrap your argument in std.fmt.fmtSliceHexLower instead' is a bit unclear

1615058362
marijnfs
which argument

1615058393
TheLemonMan
marijnfs, it

1615058402
g-w1
the one that you want to hex

1615058404
TheLemonMan
the argument you're printing?

1615058530
marijnfs
ok, cause the formatting string is also an argument

1615058536
marijnfs
they are arguments to the function

1615058590
TheLemonMan
but that wouldn't make any sense, no?

1615058617
marijnfs
what's the rationale, don't we want fmt to make printing easy?

1615058630
marijnfs
TheLemonMan: dunno, maybe it does something to the formatting string

1615058659
TheLemonMan
again, once the error is removed you'll get your beautiful slice formatted the way you wanted

1615058665
marijnfs
std.fmt.fmtSliceHexLower in the argument also seems weird, where is this reesulting string allocated?

1615058674
marijnfs
it has to be created before it goes to the function

1615058701
marijnfs
ok so it's temporary

1615058710
TheLemonMan
the {x} stuck out as a sore thumb since it only worked on u8 slices... and we're working to make those regular

1615058718
TheLemonMan
there's no string being allocated

1615058755
TheLemonMan
the argument is wrapped in a struct with a given format function

1615058765
TheLemonMan
check the implementation in the stdlib, it's quite nice

1615058868
marijnfs
ah I see, that's not bad

1615058933
TheLemonMan
check out #8166 and #8137 to see how well this pattern works for custom formatting styles

1615063623
Raito_Bezarius
am I wrong thinking that I can do b.addWriteFile to write a file as per the build process?

1615063715
g-w1
i think you must do something with the 'step' it returns

1615063734
Raito_Bezarius
I have some_step.step.dependsOn(&result.step);

1615063775
Raito_Bezarius
if I understand well, before some_step is executed, result.step must be done, so the file must be written before some_step but I'm seeing nothing in the build directory

1615063780
Raito_Bezarius
s/build/output

1615072105
Raito_Bezarius
is the syntax "use @import(x);" still valid in Zig 0.7.1 ?

1615072477
ikskuh
was it ever?

1615072520
Gliptic
there's usingnamespace, but not valid at the top-level as far as I know

1615072931
Raito_Bezarius
ikskuh: I thought about something like this,

1615072942
Raito_Bezarius
that I have seen in some Zig source trees for previous versions afaik

1615073078
Gliptic
that's not really what you wrote though

1615073099
ikskuh
that issue … quite old :D

1615073117
Raito_Bezarius
true, Gliptic

1615073121
Raito_Bezarius
I have seen it here:

1615073129
Raito_Bezarius
which I suspect has compiled to some point for some version

1615073148
ikskuh
that code is at least 2 years old

1615074535
g-w1
use -> usingnamespace;

1615074621
g-w1
so the syntax is not valid, but was at one point. the reason it switched is to create more friction because its usually a bad idea to use usingnamespace

1615074888
Raito_Bezarius
Alright

1615074916
Raito_Bezarius
Are tuple a thing in Zig? I see a reference to tuple in the

1615075055
g-w1
search for tuple on this page

1615075101
Raito_Bezarius
Awesome, thanks!

