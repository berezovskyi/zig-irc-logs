1616198553
sm2n_
what's the idiomatic way to assert some invariant at at the function call boundary? Am I correct in assuming that you should return an error type in that case?

1616198636
dok
Hi there

1616198671
dok
quick question: Is there an equivalent to scanf or strtoll in zig ?

1616198759
ugla
dok: std.fmt.parseInt

1616198775
dok
ugla: uh ! thanks !

1616198968
dok
my brain is probably too much used to think about weird libc names, that I could have never though to look at "parseX"

1616198997
ugla
:)

1616199433
spacelove
I ask this having checked the documentation: what is the syntax for "for x in range(n)"?

1616199640
dok
spacelove: using a while ?

1616199677
spacelove
Thanks, so to confirm there is no "for [..]" syntax?

1616199692
spacelove
I can do with a while ofc.

1616199709
dok
spacelove:I don't know, I am learning

1616199717
spacelove
Ah o.

1616199719
spacelove
ok*.

1616199745
dok
But I think `for` loops are only for slice and arrays

1616199777
spacelove
Sure, I guess what I mean is, is there a way to quickly say: "array from 0 to n" or something like that.

1616199811
spacelove
Like [0..n], so that you'd do "for ([0..n]) |x| {}" etc.

1616200036
ryan_greenblatt
TLDR no

1616200058
ryan_greenblatt
See also

1616200115
spacelove
How is it done usually? Seems like the most common pattern in the world. Using a while loop?

1616200121
ryan_greenblatt
Yep

1616200146
spacelove
Whoah

1616200172
ryan_greenblatt
standard is:

1616200172
ryan_greenblatt
```

1616200172
ryan_greenblatt
var i: usize = a;

1616200173
ryan_greenblatt
while (i < b) : (i += 1) {}

1616200173
ryan_greenblatt
```

1616200191
ryan_greenblatt
consider also

1616200202
ryan_greenblatt
*you're

1616200309
spacelove
I'm always feeling spicy

1616201822
andrewrk
that's the spirit!

1616201865
noam
Maybe change your diet?

1616201867
noam
:)

1616202366
spacelove
Guys, I built something!!!!!

1616202394
spacelove


1616202403
spacelove
This finds the minimum edit distance between two words <3

1616202412
spacelove
So cool!

1616202453
spacelove
It runs, if you're feeling spicy you can let me know if it's good code or whatever. Somehow I feel that x and y are backwards on my matrix and I'm not sure why... but it works! Muahahaha.

1616202676
andrewrk
spacelove, check out

1616202691
spacelove
WOW!!!

1616202821
spacelove


1616204497
noam
freaking comptime.

1616204521
noam
`struct call_graph runtime, comptime;` ← it's apparently more sensible to build two call graphs for zig

1616204589
noam
:P

1616204785
andrewrk
noam, the zig compiler got a lot simpler when I introduced IR instead of trying to go straight from AST

1616204798
noam
andrewrk: this

1616204819
noam
It's useful information for the comptime engine and for optimizations

1616204825
andrewrk
ah, call graph, nvm :)

1616204830
noam
yep

1616204840
andrewrk
where's our code for rendering something as a string literal syntax?

1616204857
noam
bright side: i think I can tack on a comptime engine that's good enough for duck typing in like ten minutes of effort once the call graphis done :D

1616204858
andrewrk
looks like std.fmt.fmtSliceEscapeLower only does \xNN

1616204911
andrewrk
ah there it is: std.zig.fmtEscapes

1616204917
noam
for every element in the comptime call graph of a function, invoke the comptime engine to produce the result, append the result - properly typed and everything! - to the node list, and return its index

1616207624
noam
> call_graph.c:46: error: TODO call graph analysis of calls depends on identifier resolution

1616207634
noam
okay, so I'm also doing scoping rules now :P

1616210315
noam
Done today so far: call graph generation (comptime+runtime), arm64 codegen, test suite, function call parsing...

1616210328
noam
almost able to compile my first bootloader test file :P

1616210398
noam
hopefully by midnight :P

1616210874
noam
heehee, string interning means checking if something is in scope is blazing fast :)

1616212589
noam
Need to work on error messages, butttttt... > ERROR("Identifier '%s' shadows another!", buf)

1616212591
noam
:D

1616214299
noam


1616214315
noam
whoops!

1616215109
noam
Minor issue that some commits are apparently dated 51 years ago because the system clock was wrong lol

1616221230
andrewrk
ifreund, g-w1: I'm done for the day. this test case is passing: `export fn _start() noreturn {}` (it correctly reports a compile error)

1616221279
andrewrk
next up is hello world which hits a few TODOs :)

1616221289
noam
Nice :)

1616221336
noam
Just finished scoping, just need to analyze all functions present on the call graph instead of direct exports and I should have the first testpassing :D

1616221346
andrewrk
noam, the big change in this branch is the overhaul of source locations so that and error messages survive incremental compilation and still report the correct location even when the decl gets moved around

1616221400
noam
See, this is why I'm still pretty sure I'll have zyg done months before stage2: I do so much less that I can make progress much faster even with the occasional slump in activity :P

1616221422
noam
Today was a very productive day for zyg :)

1616221442
noam
Even if git disagrees XD

1616225802
noam
Got the first rk bootloader test passing :D

1616225804
noam


1616225829
noam
It's really nothing much, just start() noreturn calling an infinite_loop()noreturn function, but that's still much more than was working earlier :)

1616226022
noam
Now to make it more fun, and make the infinite_loop call deferred :)

1616230934
Kuraitou_
can someone explain why x is 000... here?

1616231186
yyp
Kuraitou_: maybe it should be comptime?

1616231243
ikskuh
good question…

1616231244
Kuraitou_
I tried sprinkling comptime in various places but I can't seem to get it to work

1616231278
Kuraitou_
it's always 000...

1616231326
ikskuh
Kuraitou_: i feel like you've found some weird compiler bug

1616231525
ikskuh
yep, that's a bug

1616232296
noam
Defer working :D

1616232346
noam
(though it's currently only correct for function-scope without extra control flow, it can easily be fixed once I can actually handle more :P)

1616232389
yyp
Btw, it I use defer in a loop, will it get triggered before next iteration?

1616232394
yyp
s/it/if

1616232524
noam
i believe so

1616232612
yyp
It doesn't

1616232758
ikskuh
yyp: defer will always trigger at the end of

1616232767
ikskuh
{ defer y(); x(); }

1616232775
ikskuh
x will always be called before y

1616232779
yyp
Doesn't work even if you put it in inner scope: while (true) { { /* code */ } }

1616232795
ikskuh
can you share an example?

1616232800
ikskuh
works for me in over a thousand places :D

1616232801
dutchie


1616232812
dutchie
prints "starting loop 0" "ending loop 0" "starting loop 1" etc

1616232821
ikskuh
dutchie: that code doesn't need defer though :D

1616232837
dutchie
well no, but it's a sanity check to show they run each loop iteration

1616232854
yyp


1616232865
yyp
nevermind

1616232878
yyp
I forgot about sleep at the end

1616232894
ikskuh
looks perfectly fine

1616232900
yyp
Yep, now it works

1616232977
yyp
I put sleep in that scope which meant that mutex is never released, my bad

1616233145
ikskuh
it got released, but not for long :D

1616233195
yyp
Yes, for one tick

1616233208
yyp
Which was not enough for another thread to pick it up

1616233321
Kuraitou_
ikskuh yyp: thanks for having a look, I filed an issue

1616235079
yyp
Are there any usable SSL/TLS libraries for Zig besides zig-bearssl?

1616235107
ikskuh
iguanaTLS

1616235117
yyp
Can you give a link?

1616235151
dutchie
yyp:

1616235157
yyp
Thanks!

1616235315
TheLemonMan
time for zig-boarssl

1616235356
dutchie
all zig tls libs must be named after animals

1616235359
dutchie
new rule

1616235402
yyp
Interesting, why did nobody make openssl bindings?

1616235563
ikskuh
maybe because of OpenSSL? :D

1616235683
TheLemonMan
yyp,

1616235720
yyp
I guess I'll vendor it :)

1616235760
yyp
OpenSSL is the only thing I trust in production

1616235844
TheLemonMan
there's also in-kernel TLS if you're feeling frisky

1616236280
yyp
I could have used socat for SSL <-> unix socket, and then connect to it with std.net :)

1616236338
TheLemonMan
that'd be the unix way™

1616236438
yyp
That's actually what suckless guys think is the best way to use TLS     and that's terrible

1616236531
earnestly
TheLemonMan: I bristle!  Sockets were a blight put upon unix by Berkley students :(

1616236554
earnestly
Real unix would have used bi-directional pipes (which they did)

1616236584
earnestly
Berkeley*

1616236699
TheLemonMan
heh

1616236819
TheLemonMan
well if you squint hard enough sockets are bidirectional pipes

1616236833
TheLemonMan
for some definition of pipe

1616236975
earnestly
TheLemonMan: What plan9port does:

1616236979
earnestly
(also what a slug)

1616237271
TheLemonMan
oh I've seen that trick in quite a few places

1616237789
noam
plan9 has namespace entries ("virtual files", but not really) for network access; tls simply wraps them

1616240910
dok
yyp: can you explain why this is terrible ?

1616240917
yyp
What is terrible?

1616240940
dok
> I could have used socat for SSL <-> unix socket, and then connect to it with std.net

1616240947
dok
> That's actually what suckless guys think is the best way to use TLS     and that's terrible

1616240965
ikskuh
because the TLS is in a second process

1616240986
yyp
Because you need to learn how to use an entire extra program just to connect your stupid small program

1616240998
ikskuh
if the TLS library has a vuln, only this single TLS connection is fucked, but you cannot gain access to any other data

1616241091
dok
ikskuh: isn't that a good thing ?

1616241116
ikskuh
dok: the problem is that it's a horrible way of doing things

1616241120
ikskuh
even if it's the

1616241244
dok
yeah maybe using a socat is a bit ugly but using a program that does tls -> unix socket and then use that socket doesn't sound bad to me.

1616241253
dok
but I am not an network expert

1616241258
ikskuh
dok: true

1616241260
dok
quite the oposite

1616241429
dok
yeah maybe it's gets ugly if the tls connect closes but not the socket, or even if the socket closes: the program will need to restart a new socat process...

1616241531
yyp
Hmmm, ArrayList has a memory leak?

1616241611
yyp
testing.Allocator borked at me for using arraylist.append despite that I deinit it in the end:

1616241726
yyp
Here's the code:

1616241789
ikskuh
yyp: you have to free MessagePrefix.nick

1616241792
ikskuh
with the same allocator

1616241797
ikskuh
are you doing this?

1616241847
yyp
Ooops, I don't

1616241857
yyp
Thanks for pointing out!

1616242025
TheLemonMan
speaking of networking, join ikskuh and me in #7844 and check if the proposed API suits your use-case

1616242117
yyp
Looks like I would have to rewrite all of my networking code if this gets merged..

1616242155
s-ol
is there any pattern for .init() declarations that need a pointer to themselves?

1616242166
s-ol
e.g. when registering with an external C api that needs a "cookie" void* for callbacks

1616242202
s-ol
do I make the init signature `pub fn init(allocator: Allocator, ...) !*@This()` and allocate "self" inside init?

1616242221
s-ol
that doesnt allow using it inside of parent structs though.

1616242234
yyp
s-ol: that sounds like a reasonable thing to do

1616242244
s-ol
Alternatively I can add a second `pub fn postInit(self: *@This(), ...)` that does the rest of the setup once the struct is "in place"

1616242257
s-ol
is there a pattern like this in the stdlib already somewhere?

1616242509
TheLemonMan
the latter looks better as it allows to place @This() on stack

1616242655
s-ol
yeah thats the benefit there

1616242706
s-ol
or a third option: `pub fn init(self: *@This(), ...) void` - let the "owner" allocate w/ undefined contents wherever and then call init on it

1616242713
s-ol
went with that for now

1616242791
yyp
TheLemonMan: new networking API looks good, I like the new structure with TcpClient and stuff

1616242965
ikskuh
TheLemonMan: when the new API is established, the innards need some overhauling. daurnimator proposed that stdlib should use happy eyeballs to connect to both ipv6 and ipv4 simultaneously

1616243431
TheLemonMan
indeed, that use-case is taken into account in connectToAddress accepting a slice of endpoints

1616243660
noam
Ha! Finally got the annoying scoping rules working properly :D

1616244226
yyp
Is it possible to have Reader over a string (aka `[]const u8`)?

1616244417
yyp
nevermind, found io.fixedBufferStream

1616244428
noam


1616247002
yyp
Is there a way to make a function accept ANY io.Reader regardless of what it holds

1616247005
yyp
?

1616247139
g-w1
anytype as the type

1616247263
yyp
Ok, that worked, thanks!

1616250663
marler8997
TheLemonMan, why a Socket struct instead of using os.socket_t directly?

1616250678
TheLemonMan
because everything must be opaque

1616250692
TheLemonMan
in case we want to change the inner representation

1616250697
TheLemonMan
and what the fuck is a socket_t

1616250733
marler8997
isn't socket_t just as opaque as Socket?

1616250747
marler8997
you could replace socket_t with anything as well right?

1616250931
marler8997
is it that you're saying socket_t is a socket handle for platforms that support such a thing, and Socket is a socket object that may or may not be a handle, it could be anything?

1616251005
TheLemonMan
I don't know where the socket_t comes from, the _t suffix makes it sound part of some C API but there's no such thing afaics

1616251023
TheLemonMan
you, the user, should not care of what's inside Socket

1616251027
marler8997
I added socket_t :)

1616251029
TheLemonMan
today there's a file descriptor

1616251084
TheLemonMan
got you!

1616251084
marler8997
The fact that a socket is a handle/file descriptor is required knowledge to use it with certain APIS, such as select/epoll/kqueue/IOChannels

1616251123
marler8997
so, will there be a Socket.asFileDescriptor() or something?

1616251154
TheLemonMan
that'd be wrong on windows, where ws2 sockets are not file descriptors

1616251158
marler8997
some API's actually take an array of socket handles, how would that work?

1616251166
marler8997
on windows they are Handles

1616251177
TheLemonMan
I'd just leave the handle there with no extra accessors

1616251204
TheLemonMan
and Socket lets us stuff more fields without breaking everything

1616251209
marler8997
So on linux, can the user assume that Socket is just a handle?

1616251223
marler8997
so if they pass an array of Socket to a function, then it can be case to an array of file descriptors?

1616251231
marler8997
*cast

1616251251
TheLemonMan
yep

1616251277
marler8997
when would someone use Socket vs socket_t?

1616251283
marler8997
are you saying we should remove socket_t?

1616251287
TheLemonMan
yep

1616251324
marler8997
how would you expect people to pass a Socket to a function that accepts a file descriptor?

1616251333
marler8997
cast?

1616251360
TheLemonMan
no, socket.handle

1616251363
TheLemonMan
that's it

1616251370
TheLemonMan
no casts, no anything

1616251372
Nypsie
It's just a field inside the Socket struct

1616251373
marler8997
and an array of file descriptors?

1616251392
TheLemonMan
that doesn't make sense?

1616251400
marler8997
why?

1616251414
TheLemonMan
it's a single handle

1616251429
TheLemonMan
sure, you can consider that as an array with just one element

1616251438
marler8997
I have an array of Socket

1616251449
marler8997
and I want to pass my array to a function that accepts an array of file descriptors

1616251476
marler8997
how to do?

1616251580
TheLemonMan
don't

1616251601
TheLemonMan
tbh I didn't think of that use case

1616251618
marler8997
well, that's kinda why we have socket_t and/or fd_t

1616251644
marler8997
the fact that socket_t is an fd_t is important for the type system to know

1616251656
TheLemonMan
socket_t is not always a fd_t

1616251668
marler8997
it's platform dependent, just like the APIs

1616251672
TheLemonMan
you're the Windows developer, you should know

1616251694
marler8997
if you're on a platform where a socket is a file descripts, then you want to be able to pass socket_t to functions that accept fd_t

1616251803
TheLemonMan
that's why there's an handle in Socket...

1616251806
marler8997


1616251826
marler8997


1616251841
TheLemonMan
and fd_t nor socket_t follow zig's convention of PascalCase types

1616251864
marler8997
I'm fine changing the casing to Socket

1616251882
marler8997
what I'm talking about is Socket = extern struct { ...}   vs Socket = fd_t

1616251888
Nypsie
Having it wrapped inside a struct also allows for declarations such as readers

1616251950
Nypsie
marler8997: Does this mean you also want something such as File = fd_t?

1616251963
marler8997
Nypsie, nope, we have fd_t

1616251970
marler8997
TheLemonMan is proposing we remove socket_t

1616251999
TheLemonMan
no?

1616252061
marler8997
> are you saying we should remove socket_t?   > yep

1616252107
TheLemonMan
and replace it with a type with proper casing

1616252120
marler8997
socket, Socket = fd_t on linux?

1616252146
marler8997
of Socket = extern struct { handle: fd_t }?

1616252352
TheLemonMan
I need a break from this discussion

1616252379
marler8997
ok no probs

1616252968
TheLemonMan
let's try again, leave socket_t alone.

1616253006
TheLemonMan
Socket is a simple abstraction to let us upgrade the type without breaking the API compatibility with previous versions

1616253021
TheLemonMan
Socket.handle is a socket_t. full stop.

1616253044
TheLemonMan
no, you can't pass an array of Socket to socketpair

1616253062
TheLemonMan
that's done on purpose (and because I didn't think that'd be useful)

1616253500
marler8997
I've seen people create wrappers for Socket too many times and it always seems to make things more complicated

1616253574
marler8997
It makes sense when you're only working with 1 of them, but once you start to get into multiplexing and real-world applications then tend to break down I find

1616253797
TheLemonMan
that's why I opened that PR, collecting opinions

1616253857
marler8997
opening a PR for networking is one good way to get some opinions out of me :)

1616254137
TheLemonMan
at this point I don't know if that's a good thing or not heh

1616254148
spacelove
I'm trying to read a file, but getting an error that "open" takes new parameters "perm" and "flags." What those parameters are is not in the docs. Any tips? My code:

1616254166
spacelove
I'm simply trying to read in data line by line.

1616254201
g-w1
use std.fs.cwd().readFile

1616254203
marler8997
I'm not really sure either, but I do know that introducing a wrapper has some problems and I'm just trying to make everyone aware of them

1616254263
spacelove
g-w1 thanks.

1616254264
TheLemonMan
ok fuck that Socket thing, the type is not exposed to anything outside of net

1616254269
marler8997
here's the docs for "open" as well:

1616254359
TheLemonMan
you've focused so much on that single type and didn't notice where it's used

1616254411
marler8997
it's not exposed to anything outside of net? what do you mean?  it's pub

1616254552
TheLemonMan
it's only being used in the *Client types

1616254553
spacelove
Is there example code floating around for how to open a file? I've found some examples online but none of them work with my version of zig...

1616254586
g-w1
whats ur version

1616254590
TheLemonMan
spacelove, the stdlib is full of examples

1616254604
g-w1
spacelove: are you using master, 0.7.1, ... ?

1616254611
spacelove
0.8-dev

1616254621
g-w1


1616254625
spacelove
I downloaded it so I could practice with ziglings, which required it.

1616254631
g-w1
that should help you

1616254637
spacelove
g-w1Yeah I have that open right now.

1616254667
spacelove
If that's considered simple.. I'm wondering if I'm getting in over my head.

1616254675
g-w1
hmm, the std.fs.cwd().readFile{_, Alloc} should do it

1616254687
g-w1
std.fs.cwd().openFile

1616254768
Nypsie
Plenty of examples in the tests:

1616254768
spacelove
g-w1 Thanks, will try.

1616255493
spacelove
This works:

1616255501
spacelove
Thanks for the help.

1616255564
spacelove
Thanks for the help.

1616255574
spacelove
Shoot! I always hit up + enter lmao. Sorry.

1616255646
Nypsie
`defer` means it executes the expression right of the keyword at the end of current scope

1616255708
Nypsie
Meaning that after calling `readFile()` it will close your file when it leaves the scope by either an error or the return expression

1616256034
spacelove
Wow, that's really cool

1616256054
spacelove
It's like something which turns the stove off automatically in case I forget

1616256183
Gliptic
only if you remember to set the timer

1616256457
spacelove
Why doesn't this work? Replacing the array length with file_size instead of 1024*4:

1616256481
g-w1
arrays must have a comptime known length

1616256499
g-w1
readFileAlloc for variable length

1616256551
spacelove
Assume I am 5 years old. Where can I learn about this at a simple level.

1616256602
spacelove
I think I get it actually

1616256635
spacelove
So, the compiler needs to know the length of the array at compile time. Which it doesn't, because it needs to run the program to get the array length because... it has to run "readFile" or whatever.

1616256664
g-w1
ziglearn.org

1616256664
spacelove
Mamma mia.

1616256679
g-w1
top of this page

1616256730
spacelove
I think you might be overestimating how readable that is to someone seeing it for the first time :-)

1616256741
spacelove
I mean that in the kindest way possible. Curse of knowledge and all that

1616256806
TheLemonMan
you know the difference between stack and heap?

1616256966
spacelove
Sort of, not really. Heap is accessed during execution time, or something, maybe

1616257028
Gliptic
so is stack, that's not the difference

1616257071
Gliptic
the difference is in the allocation pattern, stack has to be deallocated in the opposite order from how it was allocated

1616257082
Gliptic
as the name suggests

1616257132
spacelove
I see. LIFO

1616257139
Gliptic
yes

1616257154
spacelove
I knew that, somewhere down beneath the baseboards of my brain is a piece of paper with that written on it

1616257173
spacelove
I'm not a compsci dude, I did physics, but never had to use a computer

1616257185
spacelove
Except Mathematica. And python

1616257203
TheLemonMan
no Fortran?

1616257204
spacelove
So I'm missing a lot of concepts I think, to get started. But I'm trying

1616257214
Gliptic
although that fact alone doesn't mean you couldn't allocate something of dynamic size on the stack, later versions of C allows that for instance

1616257224
spacelove
Nah. I used C when I did high energy but that was just for a minute, for simulating in GEANT

1616257225
Gliptic
but zig makes the choice not to allow that for various reasons

1616257239
spacelove
Ok

1616257296
Gliptic
one being that the stack isn't very large and the allocation could easily fail

1616257320
spacelove
Got it

1616257430
spacelove
So the way to read a file into memory is to choose a variable length array std.ArrayList, and this memory is allocated on the heap

1616257437
spacelove
Is that right? Do I sound like I know what I'm talking about

1616257494
spacelove
Let me try it before answering

1616257546
TheLemonMan
that's one way of solving the problem

1616257580
TheLemonMan
but if you open lib/std/io/reader.zig you may find something even easier

1616257595
g-w1
just std.fs.cwd().readFileAlloc

1616257646
TheLemonMan
the solution in itself is not important, learning how to get to the solution is what matters

1616257715
g-w1
that makes sense

1616260253
g-w1
andrewrk: just so there is no duplicated work, im taking on astgen if/condbr stuff

1616261156
spacelove
I've been trying for about an hour to get this to work:

1616261167
spacelove
I'm kind of lost.

1616261247
spacelove
The best I can do is a successful compile with an error: fish: 'zig run word_chains.zig' terminated by signal SIGSEGV (Address boundary error) which suggests something about how I'm allocating the memory

1616261256
spacelove
But I really don't know at this point

1616261384
TheLemonMan
readFileAlloc allocates the memory for you

1616261405
TheLemonMan
you only have to pass a valid allocator pointer to it, right now you're giving it garbage `= undefined`

1616261481
spacelove
I need to initialize the pointer somehow

1616261503
dutchie
there are allocators in the standard library, see

1616261531
TheLemonMan
yes, but putting garbage there won't get you anywhere

1616261548
spacelove
Guys, I appreciate the help and I'm not trying to sound ungrateful, but I know where the docs are and I'm finding them confusing, that's why I'm here

1616261559
dutchie
normally you can just put `var gpa = std.heap.GeneralPurposeAllocator(.{}){}; defer _ = gpa.deinit(); const allocator = &gpa.allocator;` at the top of main

1616261631
andrewrk
zig showtime is live, starting in 10 minutes:

1616261642
spacelove
using std.heap.page_allocator as the allocator works, thanks.

1616261682
TheLemonMan
spend some time understanding

1616261854
spacelove
My only guess is that it's a heap vs stack thing. Is there a way to learn Zig without knowing C first? I'm feeling like in order to understand what's in the Zig docs, I've had to read the C docs.

1616261895
TheLemonMan


1616261944
TheLemonMan
the allocator parameter is telling the function you're calling how to ask for memory

1616261988
TheLemonMan
initializing that pointer to undefined gave you a nice crash

1616262019
TheLemonMan
initializing it to something meaningful, an allocator instance, gave you the expected result

1616262025
dutchie
you have to learn how pointers work, i guess. which is also necessary for c, and zig's are quite similar in a lot of ways

1616262069
spacelove
I know the basics of pointers, but I thought when TheLemonMan said "allocator pointer" he meant a pointer to an allocator

1616262077
spacelove
But I guess allocators are already of a pointer type, or something.

1616262105
TheLemonMan
allocators are structure types, nothing less and nothing more

1616262127
TheLemonMan
there's no difference between a *i32 and a *mem.Allocator beside the type they point to

1616262167
andrewrk
spacelove, one way to think about it is that every variable is represented in memory at some particular address. even pointers. so when you set something to undefined, or to a value, try to imagine exactly which bytes of memory are getting set

1616262195
andrewrk
and when you think of pointers, try to think of two sets of bytes: one is the bytes of the pointer itself, and one is the bytes the pointer points to

1616262205
spacelove
Right, address/house analogy is what I keep in mind.

1616262215
andrewrk
but the address is also a house :)

1616262221
andrewrk
it's houses all the way down

1616262240
spacelove
Right. @TheLemonMan what did you mean by pointer to an allocator then? If you can pass the allocator directly as a variable.

1616262262
spacelove
or "allocator pointer" rather.

1616262302
TheLemonMan
read the prototype for `readFileAlloc`

1616262318
TheLemonMan
it's expecting a `*mem.Allocator` as first parameter

1616262365
TheLemonMan
std.heap.page_allocator is of type `*mem.Allocator`

1616262374
spacelove
Jesus.

1616262399
spacelove
Well so, then saying that the allocator was already of a pointer type... wasn't that for off.

1616262407
spacelove
Maybe I used the wrong words or whatever, but that's what I was asking.

1616262468
spacelove
Anyway, thanks for the help, I have a lot more to read I guess.

1616262480
spacelove
I managed to print the lines in a file which was a huge success.

1616262487
ugla
spacelove: You could also have used an allocator that's backed by a fixed-size array on the stack, for example. Doesn't have to be heap. You get to choose, by passing in the allocator. In C you typically don't get to choose, so less to think about, but less flexibility.

1616262517
TheLemonMan
it's a bit more nuanced than that, the page allocator is already instantiated and you only have to get a pointer to it

1616262538
TheLemonMan
if you use a GeneralPurposeAllocator, as dutchie suggested, the initialization is a bit different

1616262568
TheLemonMan
but there you can see how the Allocator (with capital A) is instantiated and how you "extract" a pointer out of it

1616262594
spacelove
I'll try it dutchie's way as well then.

1616262651
dutchie
the point is you have to choose an allocator explicitly from the standard library. you can't just pass undefined in, zig wants you to be explicit

1616262665
dutchie
(or you could always define your own, if you really want/need to)

1616263607
andrewrk
as a general rule of thumb, avoid `undefined`

1616263650
spacelove
I think Zig might be above my level right now honestly.

1616263695
txdv
how many days have you been trying zig out?

1616263987
andrewrk
spacelove, don't give up :) you're learning how computers actually work, at the low level. it will be worth it!

1616266290
spacelove
If data is an ArrayList, is the idiomatic way of reading lines into the array list using "file.reader().readUntilDelimiterArrayList(data, buffer,'\n',);" if buffer is the file data? Or do you loop over the lines using a while loop

1616266379
spacelove
And if it is a while loop, I thought this would work, but it does not: while (file.reader().readUntilDelimiterOrEof(buffer,'\n') != null)

1616266401
spacelove
Since, from the docs, readUntil...Eof returns null if the end of file is reached.

1616266638
andrewrk
spacelove, I recommend to find some example code that uses this - I think probably some Advent of Code repositories will have an example

1616266669
spacelove
Andrew, man, I love you. You are a genius. But please trust that I looked.

1616266685
spacelove
I even found a reddit post on that but it linked to a github repo that had been deleted. lmao

1616266690
spacelove
About AoC

1616266692
andrewrk
ah bummer

1616266726
spacelove
I was even taking notes of my process of trying to solve this in case someone asked... just to give a flavor

1616266810
noam
andrewrk: you mentioned that I should focus on behavior tests. Is the best way to do that to implement `zig test` and start running it manually on stdlib/stage2? That seems like a hassle, but I'm not sure Ican think of anything better long-term

1616266813
ugla
spacelove: it can also return an error I think. So you could do `while (try readUntil...()) |line| { … }` (without the != null)

1616266819
andrewrk
spacelove, if your data is in an array list, probably the most convenient is std.mem.tokenize or std.mem.split on the arraylist.items

1616266918
spacelove
Thanks.

1616268425
spacelove
andrewk that solution works, ugla that one does not seem to, for me. Thanks for the help. Now I am onto putting this stuff into an array of strings.

1616269445
spacelove
I am a genius. I figured it out in the shower.

1616269479
ikskuh
👍

1616272059
v0idify
An Internet ETSes out of the Rust Evangelism Strike Force and enlists in the Zig Foreign Legion. In the comments section, Hackernews divide up and argue about which sets of compiler abstractions are necessary to support human life. thanks n-gate

1616272277
andrewrk
v0idify, let's just keep it zig coding focused in here, no spicy topics plz (because I am a lazy moderator)

1616272298
andrewrk
I hear spicy topics are allowed on the discord if you want ;)

1616272502
v0idify
hehe sorry i didn't realize it could be spicy, it's all fun and games for me

1616273624
v0idify
i don't know much about n-gate, i see how it can be... controversial. sorry

1616273649
andrewrk
v0idify, no worries, you didn't do anything wrong

1616274070
noam
v0idify: it's deliberately written to mock basically everybody XD

1616274186
v0idify
yeah, and i have bad taste so i like it most of the time

1616274192
earnestly
Oh thanks for reminding me about ngate

1616274201
v0idify
then again it's asshole-y

1616274543
noam
v0idify: i love it, it's great; I was  pointing out that it's deliberately

1616274562
noam
Language bashing is for the discord, not here! /s

1616274658
v0idify
that's why i was apologising

1616274905
apotheon
v0idify: I find n-gate amusing sometimes, but yeah, I could see how some might find it a bit uncomfortable.

1616276328
spacelove
I am trying to generate a 2d array at runtime -- wondering what is wrong with this: var matrix = std.ArrayList([] u8).init(allocator); // matrix.append({0,0});

1616276339
spacelove
Basically, an array of zeros of width x_dim and height y_dim.

1616276364
noam
That's an arraylist of slices

1616276365
spacelove
I need to allocate the memory beforehand, and then somehow slice it down to the right length. I think I get that much.

1616276381
noam
Do you intend constant dimensions?

1616276384
noam
e.g. NxM?

1616276392
noam
Or should each line be variable-width?

1616276406
spacelove
Constant dimensions, but the dimensions will change with each function call.

1616276409
g-w1
spacelove: for the append, you want matrix.append(&.{0,0});

1616276418
noam
uhh

1616276427
noam
That's... going to go wrong, if you return from the current scope

1616276428
spacelove
So, in other words, I'm calling it multiple times, each time it generates a new matrix.

1616276444
g-w1
then you dont want an arraylist, but just allocator.alloc([n]u8, m)

1616276450
noam
^

1616276452
spacelove
I'm trying to compute the minimal edit distance between strings, and I do it using a matrix calculation.

1616276456
noam
ArrayList would be if dimensions change

1616276466
noam
If dimensions are static, you want an array / slice

1616276526
spacelove
allocator.alloc([8]u8, 5) returns a 5x8 array? For example

1616276543
noam
Yeah

1616276546
noam
IIRC at least

1616276548
spacelove
That is mindblowing.

1616276558
spacelove
Amazing.

1616276565
noam
It returns [N]T, and you give it T,N IIRC

1616276569
noam
So [5][8]u8

1616276655
g-w1
if you want the second dimension to be runtime known you must alloc that and have an array of slices for example allocator.alloc([]u8, 5)

1616276709
g-w1
multidimensional_array[0] = allocator.alloc(u8, 7)

1616276820
spacelove
Is this in the docs somewhere? I don't want to break your guys' boxes, but I want to learn more

1616276877
g-w1


1616276902
spacelove
Yea I started with that

1616276907
g-w1
but if you know how to allocate a regular array, just extend it to make an allocated arrays of allocated arrays!

1616277546
spacelove
So I need to learn how to allocate a regular array then

1616277575
g-w1
allocator.alloc(T, n) returns a []T, where the len is n

1616277867
v0idify
how do i get a slice from an array? for some reason the type is different

1616277876
g-w1
&array

1616277892
v0idify
fs.path.join(allocator, &.{ path orelse &.{} });

1616277895
v0idify
doesn't work

1616277896
g-w1
well really a *[N]T coerces to []T where len is N

1616277911
g-w1
thats probably a stage1 bug

1616277925
g-w1
i would make path orelse &.{} a seperate variable and then put it there

1616277952
g-w1
maybe even use explicit types: path orelse [_]u8 {} if stage1 does not contain the power

1616278269
v0idify
i already tried doing explicit types

1616278316
g-w1
maybe one is const and the other is not?

1616278321
g-w1
without an error, I cant help you

1616278518
spacelove
g-w1 something like

1616278536
g-w1
almost :)

1616278548
spacelove
Ahahaha

1616278549
g-w1
var mat = try allocator.alloc([]u8, x_dim);

1616278552
spacelove
It hurts

1616278555
spacelove
My brain

1616278563
g-w1
you want it to be an array of slices, not an array of u8s

1616278565
g-w1
nice job!

1616278581
spacelove
It didn't like your suggestion

1616278592
spacelove
error: expected type '[]u8', found 'std.mem.Allocator.Error![]u8'

1616278638
g-w1
put a try on the allocation

1616278648
g-w1
because allocations can return errors if you run out of ram

1616278695
spacelove
mamma mia

1616278705
spacelove
It doesn't work now but at least it compiles. So smart, such a smart boy

1616278787
spacelove
I will let you be the first to use my program g-w1

1616278796
spacelove
When it's done

1616278806
spacelove
I'll give you first dibs when I make an NFT out of it

1616278811
g-w1
lmao

1616279175
andrewrk
g-w1, mind fixing up #8307 real quick so I can merge it?

1616279239
andrewrk
looks good other than one little oopsie

1616280156
spacelove
gw-1 I have basically the whole thing here:

1616280446
g-w1
seems like a logic error to me

1616280470
g-w1
andrewrk: sure thing

1616280527
g-w1
i will delete the token starts to make sure future bugs are harder

1616280558
spacelove
Wait don't tell me

1616280560
spacelove
I think I can get it

1616280654
spacelove
I think it's the memory allocation part

1616280976
spacelove
Works now <3

1616280977
g-w1
andrewrk: done

1616280983
spacelove
I beat you

1616280995
andrewrk
g-w1, thanks!

1616281054
andrewrk
g-w1, I'm working on function calls

1616281058
g-w1
yeah i would def say distinct types are needed

1616281062
g-w1
ok nice

1616281264
g-w1
for CondBr s, it has then_body_len and else_body_len. it says these follow after the cond instruction (extra Data), does this mean I should turn this line `.instructions = try block_scope.arena.dupe(zir.Inst.Ref, block_scope.instructions.items),` into gen_zir.addAll(block_scope.instructions.items) or something? I am a little confused on what to do there

1616281383
noam
+1 for distinct types

1616282020
andrewrk
g-w1, addFnType and addFnTypeCc are examples of how to implement addCondBr

1616282039
g-w1
oh, thanks

1616282114
g-w1
ah, didn't see because in Module

1616282329
g-w1
ohh I see

1616284277
spacelove
What would be the returntype of this function, if not ArrayLIst?

1616284282
spacelove


1616284306
g-w1
its an ArrayList(Node)

1616284313
g-w1
in zig functions can take types and return types

1616284385
spacelove
Ty

1616284426
spacelove
./word_chains.zig:68:18: error: use of undeclared identifier 'ArrayList'

1616284426
spacelove
fn buildGraph() !ArrayList(Node) { <-- same error

1616284450
g-w1
std.ArrayList(Node)

1616284466
spacelove
How are you so smart

1616284537
LewisGaul
Just spent ages narrowing down what looks like potentially a weird bug relating to reporting of a memory leak, does this look weird to others too?

1616284545
g-w1
I have become a ziguana

1616284603
g-w1
LewisGaul: why does it look weird to you?

1616284628
LewisGaul
why does the first testcase give a memory leak error but not the other two?

1616284707
g-w1
just a guess, maybe cuz you copy hthe arena?

1616284763
LewisGaul
that wouldn't explain difference between tests 1 and 2 would it?

1616284766
g-w1
does look weird at second thought yeah

