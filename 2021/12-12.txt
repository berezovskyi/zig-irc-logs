1639267489
marxn!~marx@94.31.98.63
hmm so <slice>.* basically gets you <slice>.ptr, but typed as a fixed array [slice.len]T?

1639268133
ifreund!~ifreund@user/ifreund
marxn: no, slice.* is a compile error if slice is a slice type []T

1639268165
ifreund!~ifreund@user/ifreund
the slicing syntax foo[0..4] will result in a pointer to array instead of a slice if the slicing bounds are comptime known

1639268190
ifreund!~ifreund@user/ifreund
so if foo has type []u32 then foo[0..4] will have type *[4]u32

1639268207
ifreund!~ifreund@user/ifreund
and you can dereference *[4]u32 to get [4]u32

1639268212
ifreund!~ifreund@user/ifreund
that all make sense?

1639268398
marxn!~marx@94.31.98.63
okay, so arrays in zig are value types?

1639268481
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1639276872
mischief!~mischief@wopr.sciops.net
how do i deal with an error union type optional, such as what readUntilDelimiterOrEof returns?

1639276924
mischief!~mischief@wopr.sciops.net
i see that i can use 'try' to return the error, but is there a way to unwrap the optional without using another level of indentation such as if(foo) |thefoo| {} ..?

1639276972
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
(foo orelse return)

1639277205
perro!~perro@072-191-245-069.res.spectrum.com
https://ziglearn.org/chapter-2/#filesystem

1639277209
perro!~perro@072-191-245-069.res.spectrum.com
swa tht there

1639277228
perro!~perro@072-191-245-069.res.spectrum.com
the (try x) orelse null;

1639286794
mischief!~mischief@wopr.sciops.net
implemented very crappy version of openbsd's signify using the built in ed25519 code. very neat!

1639286812
mischief!~mischief@wopr.sciops.net
is there a standard argument parser?

1639292453
squeek502!~squeek502@user/squeek502
mischief, not in the std lib, one option is https://github.com/Hejsil/zig-clap/

1639305560
slowjo!~slowjo@sourcehut/user/slowjo
is it possible to somehow initialize std.ArrayListUnmanaged with an array as backing storage to be able to use it without the allocator?

1639305588
slowjo!~slowjo@sourcehut/user/slowjo
(as long as it doesn't grow over the bounds of the array)

1639305640
slowjo!~slowjo@sourcehut/user/slowjo
seems like i'd just have to set the .capacity to the length of the array, and the .items to a slice backed by the array

1639305666
slowjo!~slowjo@sourcehut/user/slowjo
but i can't seem to figure out how to coerce the array into the .items slice

1639305807
ifreund!~ifreund@user/ifreund
slowjo: you probably want std.BoundedArray

1639305879
ifreund!~ifreund@user/ifreund
you could use std.ArrayListUnmanaged but you'd need to store the array in a separate variable, arrays are values in Zig not pointers like in C

1639305896
slowjo!~slowjo@sourcehut/user/slowjo
ifreund: TIL

1639305906
slowjo!~slowjo@sourcehut/user/slowjo
thanks!

1639305911
ifreund!~ifreund@user/ifreund
if you store it in a separate mutable variable then you can take a pointer to the array which will coerce to a slice

1639305915
ifreund!~ifreund@user/ifreund
no problem!

1639305949
slowjo!~slowjo@sourcehut/user/slowjo
> store array in separate variable: something to remember

1639306005
slowjo!~slowjo@sourcehut/user/slowjo
the stdlib really has a lot more to offer than i always expect 

1639310682
Franciman!~Franciman@mx1.fracta.dev
zigging my way to the top

