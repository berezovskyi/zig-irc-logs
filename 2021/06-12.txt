1623461614
daurnimator!~daurnimat@vultr.daurnimator.com
marler8997: in your .gitattributes you can tell it not to add it

1623464080
marler8997!~marler899@204.229.3.4
daurnimator, ah

1623476331
nikki93!sid200244@id-200244.tinside.irccloud.com
is the c backend likely meant to be something that will be supported long term? or is it just for some bootstrapping thing? (tried to ask this before but i think it didn't go through bc. had to register with libera still, sorry of this msg shows up twice)

1623477388
ifreund!~ifreund@user/ifreund
nikki93: yes, it is planned to be supported long term

1623477432
ifreund!~ifreund@user/ifreund
note that the C output will not be human readable, and the output will be target-specific

1623512578
marler8997!~marler899@204.229.3.4
ok, about to run my publisher tool that will retroactively publish the last 4 days of irc logs :)

1623512620
marler8997!~marler899@204.229.3.4
cross your fingers

1623512680
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
 var vectors: [4]std.os.iovec_const = .{.{ .iov_base = hdr_slice.ptr, .iov_len = hdr_size }, .{ .iov_base = self.text_buf.items.ptr, .iov_len = self.text_buf.items.len }, .{ .iov_base = self.data_buf.items.ptr, .iov_len = self.data_buf.items.len }, .{ .iov_base = sym_buf.items.ptr, .iov_len = sym_buf.items.len }, }; try file.pwritevAll(&vectors, 0); // when I do this, the file length is 1 + the sizes of all the bufs.

1623512683
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
 (gdb) p self.text_buf.items.len + hdr_size + self.data_buf.items.len + sym_buf.items.len 

1623512684
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
$1 = 271

1623512687
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
anyone know why this would happen?

1623512707
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i get 272 when I read the file

1623513222
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, du -b gives 271

1623513226
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i must be reading it wrong

1623513292
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
weird.

1623513523
koakuma!~koakuma@user/koakuma
Hi all, so I found an issue after pulling latest master

1623513523
koakuma!~koakuma@user/koakuma
So I found out that @floatCast(f16, an_f128_value) errors out on SPARC but not on x64: https://godbolt.org/z/Tc9P6odhf

1623513523
koakuma!~koakuma@user/koakuma
Thing is, stage1 also does that cast (eg. in here https://github.com/ziglang/zig/blob/7efd7bc/src/value.zig#L834) so currently stage1 isn't buildable in SPARC

1623513523
koakuma!~koakuma@user/koakuma
Not sure if this is a Zig or LLVM issue, any idea what/where to look for?

1623513871
ikskuh!~xq@2a0d:5940:6:163::ad7e
Segmentation fault at address 0x0

1623513872
ikskuh!~xq@2a0d:5940:6:163::ad7e
dang

1623513879
freshcoffee!~fresh@user/freshcoffee
-lc

1623513995
ikskuh!~xq@2a0d:5940:6:163::ad7e
freshcoffee: who is this targeted at?

1623514012
freshcoffee!~fresh@user/freshcoffee
I've seen segfault at 0x0 when forgetting to link -lc on linux

1623514050
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have it on

1623514081
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
take it off then

1623514112
ikskuh!~xq@2a0d:5940:6:163::ad7e
TheLemonMan: have you seen this code? https://bpa.st/OWYQ

1623514133
ikskuh!~xq@2a0d:5940:6:163::ad7e
luckily, i had a debug build :)

1623514180
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
do you have gdb at hand?

1623514199
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes

1623514223
ikskuh!~xq@2a0d:5940:6:163::ad7e
what do you want to know? :)

1623514241
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
figured out how to print zig slices in gdb :) (gdb) p/x code.ptr@code.len $26 = {0x7fffee275880, 0x1d, 0x0, 0x0, 0x0, 0x7fffffff1b48, 0x7fffffff1bc8, 0x7fffffff1b48, 0x7fffeffd8600, 0x7fffffff1bc8, 0x7fffffff1b48, 0x7fffeffd8600, 0x0, 0x7fffee250030, 0x7fffee250058, 0x7fffefae1a00, 0x12b, 0x7, 0x0, 0x0, 0x7ffff7ff4290, 0x27, 0x7fffffff1df4, 0x7ffff7ff4290, 0x5, 0x100000000000000, 0x7fffee298e00, 0x4, 0x7fffee275000}

1623514241
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
printing br_instruction->src() should tell you the offending line

1623514332
ikskuh!~xq@2a0d:5940:6:163::ad7e
aaand it's @unionInit

1623514378
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
is that inside some inline for/while ?

1623514404
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes

1623514422
ikskuh!~xq@2a0d:5940:6:163::ad7e
var control = blk: {

1623514422
ikskuh!~xq@2a0d:5940:6:163::ad7e
    inline for (std.meta.fields(Control)) |field| {

1623514422
ikskuh!~xq@2a0d:5940:6:163::ad7e
        if (control_type == @field(protocol.WidgetType, field.name)) {

1623514422
ikskuh!~xq@2a0d:5940:6:163::ad7e
            const T = field.field_type;

1623514423
ikskuh!~xq@2a0d:5940:6:163::ad7e
            break :blk @unionInit(Control, field.name, T.init(allocator));

1623514424
ikskuh!~xq@2a0d:5940:6:163::ad7e
        }

1623514427
ikskuh!~xq@2a0d:5940:6:163::ad7e
    }

1623514429
ikskuh!~xq@2a0d:5940:6:163::ad7e
    unreachable;

1623514431
ikskuh!~xq@2a0d:5940:6:163::ad7e
};

1623514433
ikskuh!~xq@2a0d:5940:6:163::ad7e
dang

1623514435
ikskuh!~xq@2a0d:5940:6:163::ad7e
i missed the ctrl-c for https://zigbin.io/60b172

1623514476
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I guess this is just yet another case of inline loop getting messed up in stage1

1623514505
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
or yet another case of break getting messed up in stage1

1623514517
ikskuh!~xq@2a0d:5940:6:163::ad7e
hmm

1623514534
ikskuh!~xq@2a0d:5940:6:163::ad7e
let's see

1623514541
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you can't break out of inline for iirc

1623514551
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh

1623514556
ikskuh!~xq@2a0d:5940:6:163::ad7e
so i need a subfunc then

1623514572
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
not sure if you can return from them either :/

1623514603
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1623514609
ikskuh!~xq@2a0d:5940:6:163::ad7e
return instead of break works

1623514619
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh

1623514657
freshcoffee!~fresh@user/freshcoffee
could just set rv = undefined, and in the if() rv == @unionInit(), and end unreachable change to break :blk rv ?

1623514680
ikskuh!~xq@2a0d:5940:6:163::ad7e
freshcoffee: would work as well, but function is just fine

1623514761
ikskuh!~xq@2a0d:5940:6:163::ad7e
thanks for the help :)

1623514768
ikskuh!~xq@2a0d:5940:6:163::ad7e
one step closer to some nice UI

1623514887
freshcoffee!~fresh@user/freshcoffee
wtf does llvm have a branch `origin/relase/12.x` vs `origin/release/12.x` . I typo'd the first one and couldn't see expected commits

1623514965
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
because typing is hard

1623515576
ikskuh!~xq@2a0d:5940:6:163::ad7e
> broken LLVM module found

1623515579
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have a good time today

1623516211
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
kprotty[m], ping

1623516258
ikskuh!~xq@2a0d:5940:6:163::ad7e
i ...

1623516263
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
g-w1, great job with the unused variable thing, it uncovered so many bugs!

1623516264
ikskuh!~xq@2a0d:5940:6:163::ad7e
a switch over a 2-element union failed

1623516296
kprotty[m]!~kprotty@2001:470:69fc:105::834
TheLemonMan: pong

1623516349
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks TheLemonMan

1623516359
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
btw do you want me to do anything with This is generally wrong as, according to the documentation, there are Capacity items in the hash table that may or may not have a valid value. ?

1623516404
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
re #9028, what do you think about adding a `wasCalled` method to Once? With a big fat warning about possible data races of course

1623516447
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I didn't add one because people are going to misuse that and fall in the TOCTOU trap

1623516477
kprotty[m]!~kprotty@2001:470:69fc:105::834
`call(args) error{Already}!void` gives more info but im still not sure what they can really do with that info

1623516555
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
g-w1, nevermind that comment, LLVM implementation assumes there's no deleted element in the hash table and I haven't yet found a pdb that's failing to parse because of that

1623516578
kprotty[m]!~kprotty@2001:470:69fc:105::834
the unreachable in marley's comment is actually reachable so that looks like a bug

1623516584
ikskuh!~xq@2a0d:5940:6:163::ad7e
"inline for" is very very broken

1623516634
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
kprotty[m], if the function returns an error union that won't work that well..

1623516665
kprotty[m]!~kprotty@2001:470:69fc:105::834
TheLemonMan: oh, is his example moreso about caching the result of the first call as opposed to knowing if it was the first to call?

1623516668
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
yeah, the idea (I guess?) was to panic in case the initialization failed 

1623516788
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
it's not a _great_ use case and the example is quite convoluted, that's why I've been dragging my feet all this time

1623516930
zr!~kiedtl@kisslinux/kiedtl
Oh, is it not possible to return a custom error type with custom data? :/

1623516949
zr!~kiedtl@kisslinux/kiedtl
That would have been useful. E.g. to return, say, the line/col of an error in the case of a parser.

1623516993
kprotty[m]!~kprotty@2001:470:69fc:105::834
not a zig `error.X`, but you can return `union(enum)`'s similar to Rust - they just wouldn't support the monadic `try` and `catch` keywords

1623517045
kprotty[m]!~kprotty@2001:470:69fc:105::834
TheLemonMan: we could cache the result in Once, wouldn't have any overhead for void return types and the Acquire/Release semantics are already there

1623517050
zr!~kiedtl@kisslinux/kiedtl
Hm, but then I can't use the 'MyErrorUnion!Value', kp

1623517084
kprotty[m]!~kprotty@2001:470:69fc:105::834
yea, thats another "monadic" composition you lose - anything built into the lang w.r.t. zig's error types

1623517122
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
kprotty[m], I've added that for error types, making Once a memoizing primitive is IMO not a goal

1623517140
kprotty[m]!~kprotty@2001:470:69fc:105::834
zr:  you can install `switch` on it, "unwrap()" via expected variant field access, and inspect it like you would zig unions

1623517185
kprotty[m]!~kprotty@2001:470:69fc:105::834
TheLemonMan: you recon the once-called function should store its results elsewhere?

1623517240
zr!~kiedtl@kisslinux/kiedtl
So, essentially I define my own 'Result(T, E)' type? Doesn't sound too bad. :^)

1623517250
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
kprotty[m], many of the use cases I've envisioned have no result

1623517878
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
TheLemonMan: so I guess after your pr gets merged, its ready for review?

1623517894
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the only things left are haiku, but I think it would be better to put seperate issues

1623517920
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
g-w1, the PR got merged a few mins ago

1623517946
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh lol :)

1623517987
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I wonder how hard it'd be to implement that in stage1...

1623518023
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think also unused private decls won't be that hard too since astgen runs at the file level and pub acts at the file level too

1623518211
kprotty[m]!~kprotty@2001:470:69fc:105::834
TheLemonMan:  The ones im thinking of do require a result - pthread_key_create(), QueryPerformanceFrequency(), WSAInit()

1623518525
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
note that you can already use them all, define the result as a global variable and pass its address to the once() function

1623518756
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, marked as ready for review

1623518763
koakuma!~koakuma@user/koakuma
TheLemonMan, you know something about this? f128->f16 casts erroring out on SPARC but not on other architectures: https://godbolt.org/z/Tc9P6odhf

1623518763
koakuma!~koakuma@user/koakuma
The same error also results in, among other things, latest master stage1 not being buildable here :(

1623518769
kprotty[m]!~kprotty@2001:470:69fc:105::834
TheLemonMan: the once function must return void, so to check if they succeeded you'd need to store the result o fthe call elsewhere

1623518805
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
kprotty[m], it must return void or an error

1623518888
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
koakuma, it's only the sparc backend being shitty as usual

1623518893
koakuma!~koakuma@user/koakuma
Ahh

1623518938
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
is there a f128 to f16 cast in the compiler? 

1623518967
koakuma!~koakuma@user/koakuma
Yes, in here https://github.com/ziglang/zig/blob/7efd7bc/src/value.zig#L834

1623518987
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that is not used (yet)

1623518998
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you will find it in a .cpp file

1623519041
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I hate f16 with the passion of a thousand suns

1623519124
koakuma!~koakuma@user/koakuma
I'm thinking of working around it by means of an f128->f32->f16 cast, since it seems to work

1623519131
koakuma!~koakuma@user/koakuma
But it's way too hacky I think

1623519573
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
fixing that in LLVM shouldn't be too hard

1623520642
koakuma!~koakuma@user/koakuma
By making it emit a call to __trunctfhf2? Is that safe?

1623520643
koakuma!~koakuma@user/koakuma
I don't remember SPARC ABI defining any _Qp_XXXX function to convert between f128 and f16

1623520849
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the _Qp functions are the ABI-mandated software fallback for f128 arithmetic

1623520883
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
f16 is much newer than the V9 ABI

1623520972
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
ok I have a patch and some tests

1623521348
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
koakuma, https://reviews.llvm.org/D104185 let me know if that works for you

1623521461
koakuma!~koakuma@user/koakuma
Thanks, lemme test that patch

1623524912
z_is_stimky!~quassel@109.70.144.142
what the heck is a kinky br_void

1623524916
z_is_stimky!~quassel@109.70.144.142
lewd

1623524970
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah :P

1623525053
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it is when an instruction does not dominate all use cases ;)

1623525083
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
taken from llvm

1623529310
zr!~kiedtl@kisslinux/kiedtl
Is there a way to add a method to an instance of a generic struct?

1623529331
zr!~kiedtl@kisslinux/kiedtl
E.g., adding a method 'fooBarBaz()' to 'std.ArrayList(Foo)'

1623529336
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no, not now at least

1623529339
zr!~kiedtl@kisslinux/kiedtl
A

1623529342
zr!~kiedtl@kisslinux/kiedtl
Ah

1623529353
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
maybe, if @Type supports declaratinos

1623529947
zr!~kiedtl@kisslinux/kiedtl
So, in C, if I want to store a string of variable width in the stack (but I know the upper bound), I'd do something like 'char foo[SIZE] = {0};'. In Zig I've been (mis?)using sentinels for this, i.e., 'var foo: [32:0]u8'. Is that the idiomatic way, or is another method preferred?

1623530438
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i would use something like this https://github.com/fengb/zigbot9001/blob/master/src/main.zig#L34-L70

1623530445
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i've seen this pattern used in multiple projects

1623530459
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
maybe it should be in the stdlib as StackBuffer or somethin

1623532514
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh no

1623532517
ikskuh!~xq@2a0d:5940:6:163::ad7e
more inline for bugs :(

1623532571
zr!~kiedtl@kisslinux/kiedtl
g-w1: Ah, basically an ArrayVec for Zig

1623532597
zr!~kiedtl@kisslinux/kiedtl
And yeah, having a stack-allocated ArrayList with a static capacity sounds like something I'd like in the stdlib

1623532622
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://zigbin.io/5d7e07

1623532631
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
well, you can use FixedBufferAllocator zr

1623532641
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so maybe something that just wraps that

1623532788
zr!~kiedtl@kisslinux/kiedtl
Yeah, FixedBufferAllocator + ArrayList *is* an option

1623532790
zr!~kiedtl@kisslinux/kiedtl
but it has overhead

1623532801
zr!~kiedtl@kisslinux/kiedtl
I'd rather just build my own type, but maybe I'm alone in this decision, idk

1623532803
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
not sure if it does, but its more code for sure

1623532828
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yea, building your own type is an option too 

1623532856
zr!~kiedtl@kisslinux/kiedtl
I might try to draw up a proposal for this... but mighty fat chance it has of being accepted, when doing 'var x = 0; while (x < len) : (x += 1) {}' is "good enough" ;(

1623532885
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
a for loop?

1623532890
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
c style*

1623532896
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that has been rejected

1623532945
zr!~kiedtl@kisslinux/kiedtl
or a range syntax, or a 'with(x) while (...) { ... }', or anything

1623532970
zr!~kiedtl@kisslinux/kiedtl
My point is that I don't think such a proposal has any chance of being accepted when andrew opts for that level of austerity in the language

1623532986
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ohh

1623533002
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think a StackBuffer proposal has a good chance maybe

1623533024
zr!~kiedtl@kisslinux/kiedtl
Well, if you think so, I'll try tomorrow, then :)

1623533040
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
stringhashmap is in the stdlib, and its just a wrapper over hashmap with a few more stuff

1623533072
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and lots of people have been using that pattern I think

1623533090
zr!~kiedtl@kisslinux/kiedtl
Oh, wait, when you say "StackBuffer" do you mean a wrapper over ArrayList or a separate type?

1623533101
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
seperate type

1623533116
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
basically what fengb had

1623533128
zr!~kiedtl@kisslinux/kiedtl
ah, ok

1623533600
tav!uid4128@id-4128.brockwell.irccloud.com
ACTION waves to kandinski 

1623536930
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
marler8997: it looks like the logs are up here https://marler8997.github.io/zig-irc-webpage/?date=2021-06-12

1623536942
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
are they working?

1623536972
marler8997!~marler899@204.229.3.4
possibly

1623536997
marler8997!~marler899@204.229.3.4
I'll tentatively say yes

1623536998
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what is the time period of publishing?

1623537005
marler8997!~marler899@204.229.3.4
it publishes right away

1623537012
marler8997!~marler899@204.229.3.4
but your browser cache will prevent the request from updating

1623537020
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
:(

1623537022
marler8997!~marler899@204.229.3.4
I need to fix that, probably add some random request variable

1623537032
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
github pages allows that?

1623537047
marler8997!~marler899@204.229.3.4
I'm not using github pages for the log data itself

1623537057
marler8997!~marler899@204.229.3.4
gitpages hosts the web page, then I use raw github for the logs

1623537066
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i see

1623537084
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, so in fetch just specify no cache

1623537085
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
make sense

1623537270
marler8997!~marler899@204.229.3.4
hmmm, may not work though

1623537282
marler8997!~marler899@204.229.3.4
looks like if you just access the web page directly, it might take some time for github to update

1623537292
marler8997!~marler899@204.229.3.4
https://raw.githubusercontent.com/marler8997/zig-irc-logs/live/2021/06-12.txt

1623537331
marler8997!~marler899@204.229.3.4
vs this: https://github.com/marler8997/zig-irc-logs/blob/live/2021/06-12.txt

1623537361
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hm

1623537363
marler8997!~marler899@204.229.3.4
maybe I should request the non-raw version of the log, and parse the HTML

1623537375
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that sounds like a bad idea

1623537381
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does github have an api for stuff like this?

1623537404
marler8997!~marler899@204.229.3.4
https://stackoverflow.com/questions/62785962/get-raw-file-from-github-without-waiting-for-5-minute-cache-update

1623537421
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice :)

1623537483
marler8997!~marler899@204.229.3.4
well not nice, says it's not possible really

1623537503
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
?flush_cache=True does not work?

1623537516
marler8997!~marler899@204.229.3.4
noipe

1623537520
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oof

1623537550
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
worse case, this should be easily portable to just run on a static nginx/applepie server

1623537559
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that could run on community server

1623537563
marler8997!~marler899@204.229.3.4
sure yeah we could always host the live logs on a custom server

1623537599
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ACTION tries to think of workarounds

1623537612
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but the html updates immediatly???

1623537635
marler8997!~marler899@204.229.3.4
yeah

1623537644
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
very weird

1623537644
marler8997!~marler899@204.229.3.4
probably wouldn't be too hard to parse it

1623537704
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its not that hard

1623537710
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
just funny

1623537740
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
looks like this       <tr> <td id="L681" class="blob-num js-line-number" data-line-number="681"></td> <td id="LC681" class="blob-code blob-code-inner js-file-line">1609763328</td> </tr> <tr> <td id="L682" class="blob-num js-line-number" data-line-number="682"></td> <td id="LC682" class="blob-code blob-code-inner js-file-line">ikskuh</td> </tr> <tr> <td id="L683" class="blob-num js-line-number" data-line-number="683"></td> <td id="LC683"

1623537740
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
class="blob-code blob-code-inner js-file-line">i think you can patch in resources into the exe after the build i think</td> </tr> <tr> <td id="L684" class="blob-num js-line-number" data-line-number="684"></td> <td id="LC684" class="blob-code blob-code-inner js-file-line"> </td>

