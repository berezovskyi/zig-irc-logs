1615680090
aconbere
oh!

1615680092
aconbere
actually it does

1615680112
aconbere
when I run with exe.linkLibC() my compiler errors about sys not containing AI_NUMERICSERV also go away

1615680123
aconbere
:mindblown:

1615680183
aconbere
doesn't love that I'm trying to pass null to getaddrinfo, so maybe that's my next challenge

1615682105
bbuccianti
how do I cast an i32 as a usize?

1615682243
waleee-cl
bbuccianti:

1615682415
bbuccianti
I can't

1615682541
waleee-cl
do you get an error?

1615682557
bbuccianti
error: unable to evaluate constant expression

1615682611
waleee-cl
which way did you use?

1615682648
bbuccianti
I made this @intCast(usize, @intCast(u64, w * h)) being w and h i32

1615682749
waleee-cl
assign w  * h to a const and see if it compiles

1615682872
waleee-cl
@as should allow the expression I think

1615682996
bbuccianti
yeah @as(usize, @intCast(u64, w * h)) did it

1615682999
bbuccianti
thanks waleee-cl

1615683022
waleee-cl
bbuccianti:  the @intCast isn't necessary

1615683036
bbuccianti
error: expected type 'usize', found 'i32'

1615683041
waleee-cl
ah. ok

1615690690
oats
are different versions of functions like debug.print() going to be generated for every type you use for the second argument?

1615690701
oats
since the struct types are different

1615693962
andrewrk
oats, yes

1615693976
oats
whew

1615693988
oats
thanks :)

1615694777
mikdusan
this looks wrong to me:

1615694783
mikdusan


1615694805
mikdusan
before the big `Compilation.zig` and `link/MachoO.zig` it was this code:

1615694811
mikdusan


1615695289
andrewrk
is_dyn_lib => -static

1615695293
andrewrk
yeah that's backwards

1615695298
mikdusan
ok just checking.

1615695320
mikdusan
lots of corners with cobwebs here. I think eventually we'll fix one that helps llvm12 zig-bootstrap :)

1615695537
oats
how should I approach allocations made by other libraries that utilize libc? should I just utilize free() from stdlib.h?

1615696051
andrewrk
if an external API expects you to call free() from libc, then you can call std.c.free

1615696774
oats
grrr seems like libedit is leaking memory

1615696777
oats
that's cool

1615698482
oats


1615698484
oats
good song

1615698513
powerofzero
Hi. I'm working on wrapping a c library in zig, and I would like to bundle the c library. Are there any good examples of others who have done this?

1615698592
oats
hah, wrong channel lol

1615698602
oats
not you power

1615698604
powerofzero
Is this not #zig?

1615698607
oats
I'm just a little tipsy

1615698614
powerofzero
oh np

1615698654
oats
just didn't look where I was posting

1615727623
yyp
How does linking lld on base compiler work if you strip down cmake magic? pkg-config didn't help

1615740312
mikdusan1
quit

1615742161
Daimanta
Hi, I have a quesion

1615742250
Daimanta
I noticed when running the Zig tests that I made, that the tests seem to stop at the first failure. Is that correct?

1615742384
ifreund
yep

1615742857
Daimanta
Ok, that answers the question. Question number 2: Is it possible to run all tests and then show the failures in some way?

1615743110
ifreund
/buffer 7

1615743139
yyp
Daimanta: that doesn't seem to be supported

1615743166
ifreund
nope, test failures are just @panic()s

1615743171
Daimanta
Ok, that's clear. Are there any plan for support of that functionality?

1615743222
ifreund
you could surely implement something with

1615743475
marijnfs
i'm still trying to get some insight in a strange loop my program gets in

1615743491
marijnfs
I wonder if the pthread lock in debug.warn is involved

1615743495
marijnfs


1615743499
marijnfs
gdb shows something like this

1615743556
Daimanta
Ok, thanks for the answers

1615747844
marijnfs
Is there something clearly wrong here?

1615747861
marijnfs
especially serialise_msg, the union case

1615747991
marijnfs
the strangest thing is, if I uncomment line 144, i get a compile error at line 137: serialise.zig:137:17: error: control flow attempts to use compile-time variable at runtime

1615748102
ifreund
marijnfs: that gdb output isn't terribly helpful, could you provide a bt full?

1615748424
aconbere
Hi! I've been playing with using zig as a "pragmatic c" and running into some bumps along the way. From ziglearn it mentions `zig translate-c` as a tool to quickly lift c into zig.

1615748447
aconbere
I took a pretty basic c program and ran it, and translate-c complains about not finding `stdio.h`

1615748476
aconbere
gcc happily finds and builds the program, is there something I have to hint translate-c to about the location of headers?

1615748502
ifreund
aconbere: you need to tell zig to link libc

1615748505
ifreund
pass -lc

1615748513
marijnfs
ifreund:

1615748515
marijnfs
like that?

1615748545
marijnfs
there is no obvious recursive call, but it definitely gets stuck in this serialise function

1615748640
aconbere
ifreund: works! thanks

1615749047
aconbere
hmmmmmmmmmm

1615749073
aconbere
okay well zig translates my c (into as it says it will, a bit of a horror)

1615749102
aconbere
but I was hoping to glean from that, how to do good c-interopt with zig and I'm afraid I'm still a bit lost

1615749177
ifreund
aconbere: using a C library from zig is often as simple as importing the headers into your zig code via @cImport()/@cInclude()

1615749203
ifreund
which essentially run translate-c on the headers and @import() the output

1615749209
aconbere
ifreund: really what I want to do is write a simple TCP or UDP client / server in zig

1615749216
ifreund
you don't need any C for that

1615749221
aconbere
would love to have the code /in/ zig for the improved ergonomics

1615749227
aconbere
agreed!

1615749248
aconbere
but I'm failing to get the syscalls to play nice :)

1615749254
ifreund
if you're on linux std.os/std.net should have everything you need

1615749262
aconbere
I want to call getaddrinfo with NULL as the nodename

1615749277
aconbere
but zig isn't happy with me doing that naively

1615749284
aconbere
presumably because it needs to get cast into a c pointer

1615749461
aconbere
ifreund: hmmm std.net feels like it has a lot of assumptions already baked in

1615749486
ifreund
aconbere: agree, std.net is not great

1615749489
ifreund
see:

1615749524
ifreund
getaddrinfo isn't really a syscall, just a libc thing that does some logic and syscalls for you

1615749541
ifreund
ideally std.net would be able to do everything it does

1615749547
aconbere
For what it's worth I don't think that's horrible I just wanted to play with the guts of things

1615749554
aconbere
and found it hard haha

1615749563
aconbere
Understood!

1615749628
aconbere
The pathway here is really something like "oh I heard that zig was a interesting and upcoming c replacement, let's take something I can do in c but isn't much fun, and try it in zig"

1615749648
ifreund
anyhow, you're right that the definition of getaddrinfo in std.c should have the first parameter made optional (PR welcome)

1615749698
aconbere
ifreund: another question while I'm here :-D

1615749728
aconbere
in my journey here I played around in std.net, I've found that I can make obviously breaking changes there, but when I re-compile zig the compiler doesn't error out

1615749740
aconbere
is there a flag to the zig build that's required to compile the std library?

1615749774
ifreund
marijnfs: I haven't been able to glean anything from the stack trace, it looks like you're deadlocking on the stderr mutex which should only happen if something tries to acquire it while it is already held by the same thread

1615749822
ifreund
aconbere: the std (like all zig code) is lazily compiled when it is required by whatever code you have written

1615749848
ifreund
if you were to change something required by the compiler the build would fail

1615749881
ifreund
but if you change stuff the compiler doesn't require and the code still parses fine, you won't get a compile error until trying to use it in a project

1615749898
ifreund
marijnfs: are you doing anything weird with threads?

1615749912
ifreund
putting a breakpoint in the acquire function might help

1615749935
aconbere
ifreund: is there a document that outlines the standard development process for contributors?

1615749953
aconbere
I guess what I'm wondering is, how did the std.net package get tested in the first place :-D

1615749980
ifreund
oh running the standard library tests should build and test it

1615749981
aconbere
my intuition would there would be a flag to either force compilation, or to trigger testing in a way that those units are "used"

1615749988
aconbere
ahh

1615750002
ifreund
if you run zig build --help in the root of the repo you'll see a lot of opitons

1615750046
ifreund
usually I just run zig test /file/im/touching if the changes are limited in scope

1615750059
aconbere
interesting, I've been following the instructions that go through cmake etc.

1615750075
ifreund
oh you need to go through cmake to build the stage1 compiler first

1615750094
ifreund
but once you have that you can use the build.zig to test the std and build the WIP stage2 compiler

1615750103
aconbere
goooooot it

1615750109
aconbere
so i'm bootstrapping the compiler

1615750119
aconbere
but typically once bootstrapped folks would use zig to compile zig

1615750126
ifreund
yeah, and the stage1 compiler is actually written partially in zig as well

1615750161
ifreund
so it's building a very limited zig0 compiler which is 100% C++ and then using that to build the zig parts of stage1

1615750206
aconbere
cool

1615750212
aconbere
pretty impressive how fast it is

1615750234
aconbere
so used to something like GCC or Rust or LLVM where I expect compilation to take 3 hours

1615750238
ifreund
stage1 is really really slow

1615750246
ifreund
just wait till stage2 is done :P

1615750250
aconbere
haha

1615750758
aconbere
oh man

1615750765
aconbere
the CONTRIBUTING section of the readme covers all of this

1615750769
aconbere
sorry for bother you ha

1615750775
aconbere
seems like I'm on a better track now

1615750873
ifreund
heh, no worries :)

1615750875
aconbere
Yay! And the std.net test appropriately fails

1615751276
marijnfs
ifreund: threads are involved. But I manage to get this error also in a simple 'zig build test' that only calls this serialise

1615751330
marijnfs
i don't believe threads are involved there

1615751382
ifreund
marijnfs: are you using zig master?

1615751466
ifreund
more specifically, do you have 89ee4b86?

1615752058
marijnfs
yes, have master from today

1615752104
marijnfs
ifreund: it also doesn't look like a deadlock, because it goes in a crazy printing loop

1615752130
ifreund
oh? what is it printing?

1615752728
marijnfs
ifreund: basically, I add a print statement in the beginning of 'serialise_msg', and that keeps printing like crazy

1615752740
marijnfs
but there is no deep callstack or something, which is very confusing

1615752847
marijnfs
maybe it's a recursive callstack, but llvm is smart to optimise it?

1615752915
ifreund
what output do you get?

1615753091
marijnfs
ifreund: so that test calls 'try serialise_msg(nearest_peer, msg.?);', then the output looks like:

1615753108
marijnfs
if I stop the program in gdb, I get this small stacktrace

1615753677
ifreund
why is it getting called with void?

1615754332
marijnfs
ifreund: not sure, one of the Response enums is void, but not the one I'm testing

1615754571
marijnfs
when i'm trying to print the typeInfo of what i'm serialising, I get a compiler bug:(

1615754575
marijnfs
but i guess that's unrelated

1615758619
aconbere
ifreund_: follow up question from earlier (sorry if you're away), curious about the philosophical stance zig takes on c interopt. For instance it's valid to call getaddrinfo with a NULL hint pointer. But the result is the same as if you had specified a handful of hint values (it's basically shorthand for "default")

1615758641
aconbere
Curious if zig would take the stance of being faithful to the original c interface (null is valid, go for it)

1615758663
aconbere
or would take a stronger position on safety and say "look just pass in the hint, we can do things to help with defaults"

1615758685
ifreund
aconbere: passing in a null pointer there isn't unsafe, zig should allow it

1615758713
ifreund
if you want to open a PR making the first argument of std.c.getaddrinfo optional I'll merge it :P

1615758718
aconbere
haha

1615758723
aconbere
well I'm actually from reading the man page

1615758728
aconbere
suggesting a little bit more

1615758738
aconbere
node, service, and hints are all valid to be null

1615758752
aconbere
(although there is a constraint that both node and service cannot be null at the same time)

1615758780
aconbere


1615758820
ifreund
well, make 'em all optional pointers then I guess :D

1615758823
aconbere
I believe that's the diff I'm suggesting, with just the null node tests pass

1615758824
aconbere
haha

1615758872
aconbere
but I'll run the full stdlib tests now and see what happens

1615758898
aconbere
`./zig build test-std -Dskip-release` is the command I'm running to run the tests

1615758903
aconbere
just to check that I'm doing it right

1615758955
aconbere
(since this is in the std-lib i'm assuming for the sake of testing locally that those are approppriate)

1615759037
ifreund
I doubt allowing null there will break anything, that command is fine though

1615759047
aconbere
yeah I hold the same intuition :)

1615759054
aconbere
but I also prefer to do my due dillegence

1615759079
aconbere
As a person who first read the documentation for zig yesterday

1615759085
aconbere
I don't hold my intuition in particularly high value

1615759124
marijnfs
ifreund: it does seem to have to do with the void in the union, even though it doesn't get serialised

1615759334
marijnfs
yeah, if I make that one a usize or whatever things are fine

1615759344
marijnfs
voids are not handled well I guess?

1615759355
marijnfs
also had issues with parentPtr and voids

1615762079
ugla
I had a void issue in my BARE lib too. A user reported and fixed it for me, and also opened this issue:

1615762235
ifreund
marijnfs: that looks like the exact bug you're hitting ^

1615762252
ugla
Haven't looked into it myself but thought it might be related

1615764737
aconbere
hmmmm

1615764745
aconbere
what am I doing wrong now :P

1615764771
aconbere
`./bin/zig build test-std  -Dskip-release -Dforce-link-libc=true` results in an error `error: dependency on libc must be explicitly specified in the build command`

1615764790
aconbere
I tried `./bin/zig build -lc test-std  -Dskip-release -Dforce-link-libc=true`

1615764808
aconbere
but that complains `Unrecognized argument: -lc`

1615764990
waleee-cl
aconbere:  I think you can only pass -lc with zig build-exe/build-lib

1615765028
aconbere
oh no! haha

1615765048
g-w1
force-link-libc is not what you want

1615765068
aconbere
I'll try anything ;-)

1615765069
g-w1
it tries to use the self-hosted linker to link stuff which is not complete yet

1615765079
g-w1
why do you wanna link libc?

1615765107
aconbere
I'm working on a PR to update getaddrinfo's call signature to match libc's (which allows for passing null points for nodename, service, and hint)

1615765118
aconbere
I figured, I'll write a test for it!

1615765130
g-w1
oh wait nvm thats not what it does, but still not what you want, it forces stage2 to link libc

1615765141
aconbere
but the test depends on libc since that's where getaddrinfo comes from

1615765157
g-w1
hmm, there must be other tests that depend on libc

1615765157
aconbere
anyway so I'm trying to run a test in the stdlib that depends on libc

1615765173
aconbere
yeah! std.net for sure

1615765173
aconbere
:)

1615765184
aconbere
(lib/std/net/test.zig)

1615765206
aconbere
since it in turn depends on std.c

1615765236
g-w1
this means that the test-harness needs to link libc, so you have to update build.zig (I guess no tests have linked libc yet. maybe this is on purpose. you will get feedback on your pr if this is wrong)

1615765247
aconbere
haha

1615765295
aconbere
okay well, maybe I can ask my other question then and push and see what happens

1615765321
aconbere
The reason I decided to make a test, beyond it being a good practice

1615765344
g-w1
i would ask in the pr is there any reason why tests don't link libc

1615765366
aconbere
well this other question is a baby zig question (because that's what I am)

1615765377
aconbere
I'm just not confident I'm constructing a null c pointer correctly

1615765426
aconbere
I was hoping I could bang out a quick test to answer that question

1615765437
g-w1
ok, yeah try it

1615765448
aconbere
I'll push the damn PR and learn a bunch haha

1615765461
g-w1
just do test_step.linkLibC() in build.zig

1615765541
g-w1
i would add a -Dno-link-libc option in build.zig tho where it does if !(no-link-libc) test_step.linkLibC() then in the test that needs libc `if (!std.builtin.link_libc) return error.SkipZigTest;`

1615765704
aconbere
hmmmmm

1615765745
aconbere
g-w1: `error: no member named 'linkLibC' in struct 'std.build.Step'`

1615765827
aconbere
looks like test_stage2's type has that function

1615765848
aconbere
I'm so new to this I'm just kinda... trying stuff though hah

1615765930
g-w1
yeah, ill try it too

1615766045
aconbere
maybe it matters that I do both exe and test

1615766072
g-w1
nah

1615766085
g-w1
its the wrong type, ill find the right one

1615766371
aconbere
in the meantime I'll put up my rough draft :)

1615766379
g-w1
aconbere: see lib/std/io/c_writer.zig:37-end. the test harness is already smart enough to link libc

1615766398
g-w1
-Dskip-libc disables all libc tests

