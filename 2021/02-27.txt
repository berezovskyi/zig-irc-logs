1614386104
marler8997
yeah I was half joking he would do that, but also half expecting him to :)

1614392986
daurnimator
>         /// Returns true if the key was already present.

1614392989
daurnimator
^ liar

1614392991
daurnimator
:P

1614401589
marler8997
I must say, I like how clever our buildpkgs solution is, however, when I think about how long it takes to explain it to people and compare that with @tryImport I'm less enchanted

1614412483
marler8997
g-w1, I got ziget to compile OpenSSL statically from source!

1614412574
marler8997
took a couple hours to get the build.zig file together to get just the right set of source files

1614413002
marler8997
compiling openssl statically does make the ziget binary go from about 800 KB to 9 MB :)

1614418548
andrewrk
mikdusan, I got llvm12 branch up to speed with CPU features of all targets except for arm and aarch64 left to do. I still get that asm error though

1614418584
andrewrk
`./zig build-exe ../test/standalone/hello_world/hello.zig --verbose-llvm-cpu-features` reveals that we are incorrectly passing i386-unknown-linux-gnu to llvm for building compiler-rt

1614418593
andrewrk
in master branch we correctly pass x86_64-unknown-linux-gnu

1614418695
andrewrk
target.cpp is missing corresponding changes to the enum

1614418778
andrewrk
hmm nope, spoke too soon

1614419042
andrewrk
lib/std/target.zig was missing powerpcle

1614419679
andrewrk
ok we're in much better shape now. I just need to finish upgrading cpu features for arm and aarch64 and then we'll be ready to run the test suite and find regressions

1614425755
mmurd


1614426133
mmurd


1614428282
cren
hey, how do I check if a variable is `undefined`? or if I can't, what should I be doing instead?

1614428837
ifreund
cren: you can't, undefined means that the variable could have literally any value

1614428853
ifreund
you probably want to use an optional type

1614428883
ifreund
mmurd: if you don't care about portability you could probably just fork/execve or whatever your OS does

1614430260
mmurd
ifreund, I'm hacking on rundird, do I care about portability? :D I had assumed not and am trying fork/execveZ (based on code in river)

1614430527
ifreund
mmurd: currently rundird uses prctl so it's already linux specific. fork/execeve are fine

1614432926
mmurd
I'm getting '[*:0]const u8', found '[]u8' when passing the return of fs.path.join to os.execveZ, is a ptrCast the way to go or something else?

1614433299
ifreund
you need a null terminated pointer, a []u8 is not gaurenteed to be null terminated

1614433307
ifreund
s/null/0/

1614433809
mmurd
ifreund, how can I create a null terminated pointer from a []u8?

1614433871
ifreund
std.mem.Allocator.dupeZ()

1614434017
mmurd
Thanks! :)

1614435126
ifreund
marler8997: was just looking at the readme of stitch again. I'm not a huge fan of the fact that variables are prefixed with the same symbol ($) as keywords when referencing them. IMO it would be nice to use a different symbol to distinguish them from keywords

1614435146
marler8997
there currently are no keywords

1614435164
marler8997


1614435169
ifreund
perhaps keywords are the wrong name, I think I mean builtins like $echo

1614435215
marler8997
these keywords are actually just variables as well

1614435240
marler8997
$echo is a variable that returns a Builtin object

1614435423
ifreund
hmm, I see

1614435438
ifreund
I think I'd prefer @echo or similar for builtins for readability

1614435499
marler8997
so you'd like to namespace different types of variables with a different symbol

1614435516
marler8997
@foo vs $foo  (@foo is a builtin, $foo is a variable)

1614435537
ifreund
can users redefine bulitins or create their own/

1614435556
marler8997
a builtin is just like any other program

1614435589
marler8997
right now you can do this: $call myotherscript ...

1614435618
marler8997
and maybe I could support this:  $set myotherscript $load myotherscript

1614435627
marler8997
then, $myotherscript would call that script

1614435664
ifreund
ok so builtins are currently just a small collection of simple programs defined by the spec?

1614435675
marler8997
yes

1614435695
marler8997
everything is  program, no functions (haven't found a need for them yet)

1614435724
ifreund
so the value stored in $echo is what, the path to the echo executable?

1614435732
marler8997
of course, the builtin programs are just implemented as internal functions in the interpreter, but from the perspective of a stitch script they behave exactly the same

1614435748
marler8997
$echo is a Builtin object

1614435759
marler8997
there's a handful of Object type in stitch so far

1614435766
marler8997
String, Bool, Builtin, CommandResult

1614435792
marler8997
you're giving me ideas on how to better document this :)

1614435799
ifreund
ah so not everything is text, that's probably good

1614435808
marler8997
I started with everything being text

1614435861
marler8997
as I went on I found that adding a few types made a few things alot simpler

1614436106
ifreund
does '$set echo foo' work?

1614436117
marler8997
yes

1614436122
marler8997
however

1614436128
marler8997
$echo still points to the builtin

1614436159
marler8997
there is a special scope that allows you to set/retreive user-defined symbols that conflict with reserved symbols

1614436178
marler8997
right now it's "g" for "global", so $g.echo

1614436234
ifreund
would you need that if builtins used @echo insted of $echo? are there other resereved symbols?

1614436249
marler8997
yes, like $scriptfile

1614436266
marler8997
I could make that a program though

1614436273
marler8997
you'd have to call it like (@scriptfile)

1614436305
marler8997
that is an interesting idea

1614436306
ifreund
I think that would be a reasonable tradeoff tbh

1614436315
marler8997
make @ be for all reserved things

1614436321
marler8997
and $ for user-defined things

1614436336
ifreund
I strongly feel that using @ for reserved things makes the code more readable

1614436342
marler8997
you might be right

1614436353
marler8997
if that's the case then I will probably use it

1614436388
marler8997
I've started by limiting myself to only a few reserved characters, currently there are only 4: $, #, ( and )

1614436418
marler8997
keeping them limited is good, but not if it sacrifices too much readability

1614436451
ifreund
hmm, would $@"foo" become @@"foo" ?

1614436478
marler8997
$@ would be a syntax error

1614436496
marler8997
dollar doesn't recognize and @ symbol for anything

1614436507
marler8997
oh wait hold on

1614436509
marler8997
sorry

1614436511
marler8997
I forgot

1614436530
marler8997
that's a delimited string literal

1614436533
marler8997
I need to change the name of that

1614436672
marler8997
could go either way, either $@"foo" or @@"foo"

1614436691
ifreund
could also do @$"foo"

1614436694
marler8997
I've also considered shorthand, $"foo", which would also mean @"foo"

1614436711
marler8997
and "foo" is still on the table

1614436728
marler8997
this mean making double-quote a special character

1614436760
ifreund
plain "foo" sounds like more language complexity for questionable value

1614436768
ifreund
I think @"foo" is ergonomic enough

1614436811
marler8997
ok I'll remember that

1614436821
marler8997
I'm updating my docs based on our conversation as we speak

1614436837
ifreund
cool :)

1614437110
g-w1
marler8997: nice, how long does it take to build, and did you get it with zigup yet?

1614437125
marler8997
I could use @"foo" for the shorthand, $@|delimited| for the delimited

1614437129
marler8997
I think that makes intuitive sense

1614437154
marler8997
g-w1, try it out for yourself :)  haven't tried it with zigup yet

1614437187
g-w1
ok cool

1614437195
marler8997
takes 7.4 seconds on my machine

1614437201
marler8997
but my machine is pretty baller :)

1614437248
ifreund
marler8997: isn't $@ leaking a builtin type thing into the non-reserved namespace? @$|delimited| would make more sense IMO

1614437278
marler8997
ah, that's true

1614437316
g-w1
how do I get static openssl? it wants to use system openssl rn with -Dopenssl

1614437330
marler8997
-Dopensslstatic of course :)

1614437367
marler8997
the build code for either actually has no shared code, but the zig module is exactly the same for both

1614437399
g-w1
ah, nice

1614437464
g-w1
did you push? its not showing up for me

1614437477
marler8997
it's a PR

1614437481
g-w1
ah

1614437489
marler8997


1614437841
g-w1
nice the c is compiling in tandem

1614437935
g-w1
hmm, doesn't work for me

1614438013
g-w1


1614438131
marler8997
might need to check openssl/ssl.zig to see if the error reporting is accurate, I'm no openssl expert :)

1614438144
g-w1
ok

1614438155
marler8997
ifreund, I'm making the change to @ for reserved.  I like it

1614438229
g-w1
seems legit

1614438245
marler8997
right, but I'm not sure error code 5 is the info we need

1614438262
g-w1
oh, you mean figure out what 5 means

1614438280
marler8997
and/or, if the error is getting retrieved correctly

1614438305
g-w1
ok, I put a tagname in there

1614438334
g-w1
oh, its not an enum

1614438367
marler8997
I'm saying I may not be calling the right function to get the error, or calling it the right way

1614438428
g-w1


1614438477
g-w1
will debug more later

1614438679
ifreund
marler8997: cool, I think it will be a net positive for cognative load despite bringing stitch up to 5 special symbols :)

1614438712
marler8997
yeah I agree, after I played with it on some code it was more readable and I think it helps to immediately see whether a symbol is defined by the language or the user

1614438802
ifreund
yeah I think making that distinction instantly clear will make learning the language much easier when one does not yet have all the builtins memorized

1614441116
cren
how do I stringify something in Zig? like Python's __str__() or Java's toString()

1614441619
g-w1
std.fmt.format

1614441649
g-w1
you probably want to define a format function though

1614444960
cren
what's the `writer` argument for std.fmt.format for? it doesn't seem to be explained in the documenting comment

1614445362
Nypsie
The result will be written to the given `writer`

1614445370
cren
ahh

1614445379
cren
yeah I just realised it returns `void` and not []u8

1614445502
Nypsie
There's std.fmt.allocPrint if you just need the slice of bytes

1614445795
hidayat
Maybe this something that is already discussed but I did not

1614445796
hidayat
see any topics on it on github.

1614445797
hidayat
I have some concerns about namespaces and aliasing in Zig.

1614445797
hidayat
Titus Winters brings up some of these concerns in C++:

1614445797
hidayat
In C, you don't have namespaces so this problem does not exist in C.

1614445798
hidayat
The problem in C++ is that you can include namespaces in the current scope and that they can be nested.

1614445799
hidayat
For example:

1614445799
hidayat
using std::filesystem::open;

1614445800
hidayat
.... (100 lines of code down)

1614445800
hidayat
open(name);

1614445800
hidayat
Because someone has hidden std::filesystem, you lose context when reading the open function.

1614445801
hidayat
You also lose readability and it makes it harder to search for the name in a large project.

1614445801
hidayat
Searching for open will probably give a lot false positive, searching for std::filesystem::open

1614445802
hidayat
is going to be more unique.

1614445802
hidayat
In Zig we have even more problems, first it has usingnamespace, so it will have the same problems as C++.

1614445803
hidayat
You can have best practices to not use usingnamespace, but in Zig you choose the namespace name yourself,

1614445803
hidayat
so you need best practices to use the same namespace or have well-explained function names.

1614445804
hidayat
Zig also has aliasing for functions, this adds more problems, Let's say we have a function

1614445830
hidayat
I dont know why I got spaces between each line:)

1614445836
hidayat
I dont know why I got spaces between each row:)

1614446137
mikdusan
hidayat: except in zig is anti-shadowing. In c++ the using stuff becomes one big fat searchlist with neverending headache

1614446301
hidayat
as long as you are not expecting someone to write a specific namespace to get more context, I guess you are fine, But being able to alias functions could be a problem in large projects

1614446390
hidayat
python has the same functionality, but python is usually used for small project, If zig was used for example in something like unreal engine, you do not want to allow people to alias functions

1614446719
mikdusan
that's a long video. any hint at where Titus concentrates on fn aliasing?

1614446835
hidayat
starts around 22 min

1614446854
hidayat
not aliasing, but namespaces

1614446861
cren
oh, my data are actually all ?u32, so I could use std.fmt.formatInt() perhaps

1614447144
cren
oh that one still needs a `writer`

1614447166
cren
what I really want is just to convert integers to strings

1614447648
v0idify
is zig's async system similar to the coroutines described under "knuth's coroutines" here?

1614447994
cren
(I'm using bufPrint now, seems to be what I want)

1614448469
mikdusan
andrewrk: fyi looking into -target x86_64-windows-msvc segfault. it's somehow ending up with bogus llvm-ir:

1614448474
mikdusan
target triple = "x86_64-unknown-windows-msvc"

1614448491
mikdusan
CORRECTION: target triple = "x86_64-unknown-windows-musleabihf"

1614448503
mikdusan
on llvm12 branch

1614448598
mikdusan
oh enum is 1-off from msvc. probably a list sync issue

1614449701
mikdusan
andrewrk:

1614452055
mikdusan
rolled a test-fix into same PR

1614452981
mikdusan
yay. llvm12 branch w/ PR just passed `zig build test -Dskip-release -Dskip-non-native`

1614453269
cren
is it possible to check if an optional pointer is a null reference in the condition of a while loop?

1614453641
Nypsie
While loops allow for captures like so: `while(optional)|capture| {}

1614453648
Nypsie
if that's what you mean

1614453814
cren
that's the sort of thing, yes

1614453993
cren
what I need is for iteration to stop when head_p.*.next is no longer a valid pointer

1614453998
cren
(that is, when it's null)

1614454085
Nypsie
You should be able to simply do head_p.next btw, no need to dereference it first

1614454101
Nypsie
Also, Zig has optionals. Pointers cannot be assigned `null` unless it's an optional

1614454102
cren
oh, that's handy

1614454106
Nypsie
In which case you can do:

1614454115
cren
Yeah head_p.*.next is a ?*Node

1614454122
cren
(Node's a struct)

1614454123
Nypsie
Ah ok, gotcha

1614454130
Nypsie
Then you could do something like this:

1614454186
Nypsie
`var current = head_p.next;

1614454227
Nypsie
`while(current)|next| : { current = next.next }`

1614454242
cren
oh, what's that colon for?

1614454302
cren
is it an empty continue-expression?

1614454338
Nypsie
There's some example in the LinkedList source code:

1614454361
cren
ah thanks! did you guess that what I'm trying to do is implement a linked list?

1614454363
Nypsie
For while loops with optionals, you can find the refernce here:

1614454399
Nypsie
cren: That's what I figured with the naming you gave it :P

1614454408
cren
thought that might have given it away :)

1614455657
andrewrk
oops sorry for the broken master branch

1614455663
andrewrk
thanks mikdusan

1614455670
andrewrk
I cherry picked your translate-c test case fix into master too

1614456083
mikdusan
btw has zig lang-spec taken a position on not-strictly-needed escapes "\'" and '\"' in string literals?

1614456197
mikdusan
actually I'll put the question in discord for our resident spec guy :)

1614459020
mikdusan
ah nice. llvm2 success on macos: `zig build test -Dskip-non-native` (debug and release modes passed)

1614459043
andrewrk
x86?

1614459054
mikdusan
yes. I'm holding out for iMac w/ arm64 :P

1614459091
andrewrk
if you're looking for a way to help, there is a big hairy issue to resolve

1614459103
mikdusan
if i can sure

1614459111
andrewrk
I believe we are triggering an llvm assert, even with version 11, in master branch

1614459119
andrewrk
I have not taken the time to attack the issue head on

1614459130
andrewrk
but ideally we would be assertion-clean after upgrading llvm versions

1614459153
mikdusan
does it trigger on x86?

1614459158
andrewrk
I believe so

1614459175
andrewrk
but you have to use a debug build of llvm (clang and lld can still be release mode)

1614459187
mikdusan
ok so a debug llvm + debug zig, and `zig build test` and I should hit it?

1614459194
andrewrk
yes

1614459199
mikdusan
will give it a shot

1614459217
andrewrk
I think I made an issue for it? let me check

1614459241
andrewrk
mikdusan, yep, found it:

1614459249
andrewrk
there's an even simpler repro for you thereo

1614459302
mikdusan
awesome

1614459346
andrewrk
hmm maybe this is an llvm bug?

1614459353
g-w1
oh, so that sret bug was the thing also preventing zig1 from building?

1614459358
andrewrk
looks like FireFox317 found UB in llvm's dwarf code

1614459397
andrewrk
g-w1, the sret thing was fixed by

1614459425
mikdusan
g-w1 yup sret manifested twice for us :)

1614459442
g-w1
ok

1614459457
andrewrk
llvm12 checklist now looks like: 1. finish CPU features script for arm and aarch64, 2. run full test suite with llvm assertions enabled, cross fingers

1614459488
mikdusan
so close. btw tried your update_cpu_features script. awesomeness.

1614459573
LewisGaul
Hey everyone, new here :)

1614459582
g-w1
LewisGaul: hi!

1614459588
marler8997
g-w1, zigup working with opensslstatic, just pushed to master

1614459596
andrewrk
welcome LewisGaul!

1614459615
andrewrk
marler8997, nice does that make it work on windows now too?

1614459617
g-w1
nice, it fails on `ziget

1614459670
marler8997
andrewrk, I have to call the openssl config and make file to generate a few files, so will need perl and make and so on at the moment for windows

1614459681
marler8997
g-w1, it works for me so we'll have to figure out what's going wrong with yours

1614459688
g-w1
what os?

1614459693
marler8997
NixOS

1614459695
g-w1
im on nixos, tried on 2 machines

1614459706
LewisGaul
I've been watching your streams on vimeo recently andrewrk thought I should come along and say hi, also keen to get involved

1614459749
marler8997
I should try on a few other machines and see if it works

1614459765
andrewrk
LewisGaul, looking forward to working with you :)

1614459809
LewisGaul
Thought I'd have a go at writing a parser for NestedText

1614459851
g-w1
here is fine, discord works also

1614459913
LewisGaul
ok cools :)

1614460524
g-w1
hmm, google doesn't work, but zigup works with opensslstatic

1614460691
g-w1
also it breaks when trying static musl

1614460707
g-w1
after that, we can do a curl based install script :D

1614460743
marler8997
yeah I had started one, but then stopped because I realized we would need a static exe for that

1614461148
marler8997
andrewrk, I noticed that you can't set a sub-sub package with the same name to different modules, is this an intentional restriction or an oversight?

1614461166
andrewrk
if I understand correctly it is an oversight

1614461172
andrewrk
each package should have an independent package name table

1614461184
marler8997
and they can have different entries for package of the same name correct?

1614461214
andrewrk
yes, e.g. package a can @import("c") and package b can @import("c") and get completely different results

1614461222
marler8997
ok that makes sense then

1614461247
andrewrk
not sure where the bug is there; seems like we set up things to make this work

1614461256
andrewrk
probably something silly

1614461447
g-w1
marler8997: i only get this when linking musl??

1614461612
marler8997
what -Dtarget=??

1614461689
marler8997
should be *openssl.FILE, now I can build with x86_64-linux-musl

1614461734
marler8997
that's pretty cool Zig was able to find that bug :)

1614461743
marler8997
I've pushed the fix to master, update and try again

1614462795
g-w1
k

1614463104
g-w1
yep, i think you just need to update the ziget_repo in build.zig sha

