1631494169
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I'm trying to add an external package that's stored locally, but when I try to build it, zig panics with 'invalid filename'. This is my build.zig: https://0x0.st/-xLK.zig, this what the external package looks like: https://0x0.st/-xLP.txt and this is the error: https://0x0.st/-xLZ.txt. I'm using zig 0.0.8

1631494308
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its because the executable is "" I think

1631494355
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
That does look like the problem, thanks!

1631494371
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
build.zig should probably error on that

1631494456
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Or at least give a better error message...

1631494464
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats not an error message

1631494715
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Depends on your definition of error, I guess

1631498173
kprotty[m]!~kprotty@2001:470:69fc:105::834
haze: yea it switching between processing tasks (runServer/runClient) and polling for events

1631499918
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hello hello frens from a new bouncer

1631500089
freshcoffee!~fresh@user/freshcoffee
g-w1: your bouncer works :) and ipv6 too

1631506555
Tekk!~tekk@194.110.112.10
Okay, this is definitely silly but how does file io work?

1631506566
Tekk!~tekk@194.110.112.10
I'm not seeing anything for *opening* files on std.fs.File

1631506582
Tekk!~tekk@194.110.112.10
Do I need to construct a Dir on . and then use one of the dir methods for that?

1631506833
andrewrk!~andrewrk@mail.ziglang.org
fs.cwd().openFile

1631506889
andrewrk!~andrewrk@mail.ziglang.org
this practice encourages proper prevention of TOCTOU bugs as well as making the code work on OS's that have permissions about what file descriptors are available

1631507430
Tekk!~tekk@194.110.112.10
makes sense now that I've been told c:

1631509482
discipulus!~discipulu@user/discipulus
Does top-level members being comptime resolved mean that any references they contain are checked for existence? 

1631515009
motiejus!~motiejus@2001:470:69fc:105::38fb
is 0.8.1 a point release from 0.9.0-dev branch, or are these only cherry-picks for 0.8.0?

1631515113
semarie!~semarie@user/semarie
motiejus: it is a point release on 0.8.x branch (so cherrypicks based on 0.80)

1631515118
semarie!~semarie@user/semarie
0.8.0*

1631515125
motiejus!~motiejus@2001:470:69fc:105::38fb
background: I updated zig from `0.9.0-dev.727+aad459836` to `0.8.1` (https://git.sr.ht/~motiejus/bazel-zig-cc/commit/d8fd27c3ae411481176e2942db522f3943e5d252) and it started segfaulting: https://builds.sr.ht/~motiejus/job/586965 ; so asking before I go and start cherry-picking (which is very inconvenient, since zig is downloaded as an archive, not a git repo)

1631515134
motiejus!~motiejus@2001:470:69fc:105::38fb
thanks semarie , will stick to dev then!

1631516419
motiejus!~motiejus@2001:470:69fc:105::38fb
there seems to be a regression between 0.9.0-dev.727+aad459836 and 0.9.0-dev.953+211856693 when using `zig c++` to compile cgo binaries for darwin x86_64. Will dive deeper and file a task a bit later.

1631517306
discipulus!~discipulu@user/discipulus
enum literals can exist on their own `const a = .A;` without being associated with an enum type. When used this way are they thought of as symbols/atoms?

1631519076
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
discipulus i don't think thats the case

1631519084
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
those are just inferred iirc

1631519114
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nvm i lied

1631519137
discipulus!~discipulu@user/discipulus
:-D

1631519145
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
learn something new every day

1631519287
discipulus!~discipulu@user/discipulus
I haven't tried yet: maybe they can be used for hashmap keys

1631519288
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
damn now i wonder what that makes it

1631519522
discipulus!~discipulu@user/discipulus
Also, an enum literal (symbol/atom/anonymouse enum literal) equals any typed enum literal.

1631519533
discipulus!~discipulu@user/discipulus
mouse? oops

1631519560
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
what?

1631519575
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i think when you have an anonymous enum literal it gets matched into whatever type you try to fit it into

1631519591
discipulus!~discipulu@user/discipulus
Ah ya, that makes sense

1631519612
discipulus!~discipulu@user/discipulus
that's right

1631519635
discipulus!~discipulu@user/discipulus
it gets coerced, right?

1631519666
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ima say yes

1631519676
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
https://ziglang.org/documentation/0.8.1/#Type-Coercion-unions-and-enums

1631519677
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
boom pow

1631519738
discipulus!~discipulu@user/discipulus
close enought

1631519926
discipulus!~discipulu@user/discipulus
Now, I wonder how to use anonymous enum literals. They'll match any enum type's variant with the same identifier. Could that cause bugs?

1631519994
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
can u think of a scenario that isnt intended

1631520094
discipulus!~discipulu@user/discipulus
Not yet. It's probably fine.

1631520356
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if you wanna see zig fail quickly try nested anonymous structs

1631520478
discipulus!~discipulu@user/discipulus
As tuples or structs with fields?

1631520769
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the latter

1631520909
discipulus!~discipulu@user/discipulus
do you have an example?

1631534905
Ristovski!~Ristovski@hellomouse/perf/ristovski
Is there a way to apply external llvm plugins to Zigs compilation step? (similar to `opt -load-pass-plugin=...`)

1631534923
Ristovski!~Ristovski@hellomouse/perf/ristovski
I assume not, since Zig does not export `opt` and `llc`

1631538572
flyx[m]!~flyxflyxo@mail.flyx.org
is there some special naming convention on union fields not articulated in the manual?  they should be snake_case but the stdlib likes to do TitleCase, e.g. in std.builtin.TypeInfo

1631538628
ikskuh!~xq@2a0d:5940:6:163::ad7e
snake_case

1631538634
ikskuh!~xq@2a0d:5940:6:163::ad7e
the stdlib is outdated at many places

1631538639
flyx[m]!~flyxflyxo@mail.flyx.org
k

1631544326
Ristovski!~Ristovski@hellomouse/perf/ristovski
Is there a way to get the memory of a struct as a `[]const u8`?

1631544401
dutchie!~dutchie@user/dutchie
std.mem.asBytes

1631544586
Ristovski!~Ristovski@hellomouse/perf/ristovski
dutchie: oh sweet! thanks

1631548301
Tekk!~tekk@194.110.112.10
This seems like just a doc/tutorial bug, but after poking around a while I still have no idea how to open an arbitrary file/directory. My best guess is const file = File {.handle = std.os.open("/somefile", ..., ...)}; is that correct?

1631548339
Tekk!~tekk@194.110.112.10
also fwiw flags are only implicitly documented for std.os.open in that the errors mention a few of them and they happen to max the standard unix ones

1631548358
Tekk!~tekk@194.110.112.10
happen to match*

1631548638
dutchie!~dutchie@user/dutchie
have you seen ziglearn.org? that has a few more fleshed out examples of using std than the main docs, e.g. https://ziglearn.org/chapter-2/#filesystem

1631548655
dutchie!~dutchie@user/dutchie
it'd point you to std.fs.openFileAbsolute at least

1631548720
Tekk!~tekk@194.110.112.10
Ah, it's on fs, not on file

1631548721
Tekk!~tekk@194.110.112.10
I ended up on ziglearn for a couple things but haven't gone through it fully yet, probably worth a read c:

1631548788
Tekk!~tekk@194.110.112.10
Dunno if I got cut off, didn't think to look on fs itself. I'll probably give ziglearn a full readthrough. Thanks dutchie c:

1631548849
dutchie!~dutchie@user/dutchie
it came through :) good to hear you are on the right path

1631549940
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
https://twitter.com/steveklabnik/status/1437442546981036034?s=20

1631549942
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
eyes emoji

1631556924
jasom!~aidenn@ip98-185-238-13.sb.sd.cox.net
So what is the "root_src" option that std.build.LibExeObjStep takes in its initializer?  All the examples I see use "null" as the value for it.

1631558644
freshcoffee!~fresh@user/freshcoffee
if you look at test/standalone/shared_library/build.zig it has an example of spec'ing a source file which ends up passed to that fn

1631560165
kurtis!~kurtis@user/kurtis
Hello. I am super new to Zig and am still learning about the language. By any chance, is there a minimal example of opening a TCP Socket and just echo anything back that it receives? I started looking at `net.zig` in the standard library

1631560203
kurtis!~kurtis@user/kurtis
(Clarification: Server-side, not client-side -- so opening a socket and listening + echoing)

1631561147
freshcoffee!~fresh@user/freshcoffee
kurtis: I haven't used any TCP but iirc, `std.net.x` is a work-in-progress overhaul of tcp for zig and see `lib/std/x/net/tcp.zig` for some "test" examples (look for lines that begin with keyword `test`). hope that helps.

1631561504
kurtis!~kurtis@user/kurtis
Thank you freshcoffee! I didn't even notice that `x` directory in there. I'll hunt down some examples and see if I can get something running.

1631562168
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
test

1631563336
kurtis!~kurtis@user/kurtis
freshcoffee The test functions look like they will be great examples. Thank you!

1631564150
nemith!~bbennett@coachz.brbe.net
i didn't know that existed.  That api looks pretty great.

