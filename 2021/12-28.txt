1640657446
daurnimator!~daurnimat@vultr.daurnimator.com
earnestly: yep. though that is all through several issues filed with the zig project to make it work nicely.

1640658016
daurnimator!~daurnimat@vultr.daurnimator.com
motiejus: interesting rabbit whole there on brotli. 5% performance improvement by using unaligned memory accesses.

1640658075
daurnimator!~daurnimat@vultr.daurnimator.com
It is likely a good piece of anecdata to a conversation we had here probably a year or so ago about arrays of `u24`

1640665955
gpanders!~gpanders@user/gpanders
I want to pass a function as an argument to a C function, i.e. the C function has a parameter of type void(*)(void *context, const void *src, size_t len). Zig translates this into `fn (?*anyopque, ?*const anyopaque, usize)` and if I try to pass a function with type `fn(*std.ArrayList(u8), [*]u8, usize)` as an argument, I get a mismatched type compiler error: parameter 0 '*std.ArrayList(u8)' cannot cast into '?*anyopaque'

1640665981
gpanders!~gpanders@user/gpanders
what is the right way to proceed in a situation like this? the language ref doesn't say much about anyopaque, so I'm not sure how to handle these

1640666050
andrewrk!~andrewrk@mail.ziglang.org
gpanders, that cast should be allowed. it's a compiler bug. if I remember correctly there is even an open issue for it already

1640666058
andrewrk!~andrewrk@mail.ziglang.org
you can work around it with @ptrCast

1640666163
gpanders!~gpanders@user/gpanders
thanks, that works

1640675720
Stalevar!~stalevar@user/stalevar
bw, I'd disagree about "better defaults" though, because my program works in clang and doesn't with zig cc

1640675955
ifreund!2940d10f8b@user/ifreund
Stalevar: your program relies on undefined behavior and guessing how the compiler will lay out the stack, which afaik is not part of the C language spec

1640676053
ifreund!2940d10f8b@user/ifreund
I wonder if -fstack-protector-strong would help you reproduce with clang

1640676381
Stalevar!~stalevar@user/stalevar
ifreund, the program still works fine both with gcc and clang

1640677890
freshcoffee!~fresh@user/freshcoffee
longshot but since `zig cc` enables more cpu features than clang, you might try to match similar cpu features

1640680205
motiejus!~motiejus@2001:470:69fc:105::38fb
Stalevar: I had the same opinion first when I was onboarding zig cc to my stack when I first stumbled on an "illegal instruction". The was directed to this explanation on this very IRC channel: https://github.com/ziglang/zig/issues/4830#issuecomment-605491606

1640680246
motiejus!~motiejus@2001:470:69fc:105::38fb
It was enough to convince me it's the right thing to do, and as a result I dropped the default optimizations from my toolchain

1640684189
Seng!~nick@hurtig.ninja
Hey, I've got this tiny piece of code. https://0bin.net/paste/XN+aBL9n#6PhrnVSADr1KeDNMdU1CqXnyJYciBvqiT3sMOnPf4QM

1640684202
Seng!~nick@hurtig.ninja
When I run it I get the following; .\src\main.zig:9:20: error: expected optional type, found 'std.process.NextError!?[:0]u8'

1640684249
Seng!~nick@hurtig.ninja
So when I try to while over an error union with a nullable type. How would I go ahead and do that? I can find any examples I can make sense of.

1640684318
Seng!~nick@hurtig.ninja
https://ziglang.org/documentation/master/#while-with-Error-Unions from reading the docs I'm not entirely sure if I must add an else statement to handle the error

1640684543
Seng!~nick@hurtig.ninja
If I add an else, I get the optional value in the loop and can loop the args.

1640684567
Seng!~nick@hurtig.ninja
So I think my question is if I MUST handle the error with an else?

1640684655
Seng!~nick@hurtig.ninja
Okay, I had the bright idea to call args.next with a try. Now the value is neither an error nor an optional. This makes no sense!

1640684659
Seng!~nick@hurtig.ninja
Back to reading docs!

1640684676
Seng!~nick@hurtig.ninja
Also I'm getting memory leaks :') Thanks, GPA.

1640686418
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
Hello!  I am just learning my way around Zig. I'm writing a small library that wraps a C library, and whilst it builds correctly with "zig build", I get linking errors when I try to use "zig test".  Specifically "C import failed" and "libc headers not available; compilation does not link against libc", and finally "'libpq-fe.h' file not found".  Do I need to do something extra in the build.zig to have this work for testing? 

1640686738
ikskuh!~xq@v43666.php-friends.de
yeah

1640686751
ikskuh!~xq@v43666.php-friends.de
apply all changes you did to `exe` also to `test_step`

1640686759
ikskuh!~xq@v43666.php-friends.de
both support the same link options

1640686769
ikskuh!~xq@v43666.php-friends.de
if you don't link libc to your test, you cannot use libc in the test

1640686775
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
ah, I added them to the lib I think, Ok let's try that, thanks.

1640686954
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
hmm, nope still failing.  All I had in the lib was: lib.linkSystemLibrary("c"); - but adding that call to the test_step didn't seem to help :-( 

1640687326
ikskuh!~xq@v43666.php-friends.de
can you link the full build.zig?

1640687636
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
yeah, here you go: https://gist.github.com/tealeg/999aeb6f7b1531ee4910b85acc715c7e

1640687823
Seng!~nick@hurtig.ninja
Can I ask zig to increase the amount of allowed backwards branches when comptiming a loop with a known input?

1640687917
Seng!~nick@hurtig.ninja
I found it in the docs :) Expected it to be in the compiler help screens, but it's part of the language (:

1640688422
ikskuh!~xq@v43666.php-friends.de
@setEvalBranchQuota

1640688431
ikskuh!~xq@v43666.php-friends.de
proposal: rename to @setEvilBranchQuota

1640688467
ikskuh!~xq@v43666.php-friends.de
tealeg: you should add main_tests.linkLibC(); instead of linkSystemLibrary("c")

1640688491
ikskuh!~xq@v43666.php-friends.de
but apart from that it looks right

1640688839
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
OK, looking

1640688954
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
hmmm nope, still fails in the same way. 

1640688983
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
I'll have a look again later, I'm probably missing something obvious.  

1640689569
daurnimator!~daurnimat@vultr.daurnimator.com
tealeg: are you running `zig build test`?

1640689782
bw!sid2730@user/betawaffle
Can zig tell the difference between stack overflow and some other memory access violation (in the signal handler) and report a different message?

1640689917
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
daurnimator: no "zig test ./src/pq.zig"

1640689954
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
daurnimator: "zig build test" does indeed seem to work better

1640689955
daurnimator!~daurnimat@vultr.daurnimator.com
bw: I think so/depends on OS.

1640689990
daurnimator!~daurnimat@vultr.daurnimator.com
tealeg: `zig test` is the lower level command (same level as `zig build-obj`).

1640690281
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
ah...

1640690306
tealeg!~user@p200300e79f0567001561816e0182f3e3.dip0.t-ipconnect.de
OK, that's very helpful, between the two of you I've got past this.  Thank you very much. 

1640690881
daurnimator!~daurnimat@vultr.daurnimator.com
tealeg: the other way to think about it is: `zig build` is the only thing that looks at build.zig

1640691548
Franciman!~Franciman@mx1.fracta.dev
hello almighty ziggers

1640692862
bw!sid2730@user/betawaffle
i think the correct term is ziguana

1640692868
bw!sid2730@user/betawaffle
right?

1640692912
Franciman!~Franciman@mx1.fracta.dev
bw: oh ziguanas

1640692914
Franciman!~Franciman@mx1.fracta.dev
then

1640692916
Franciman!~Franciman@mx1.fracta.dev
:P

1640692918
Franciman!~Franciman@mx1.fracta.dev
thanks

1640692958
bw!sid2730@user/betawaffle
Franciman: i still think this is cool, albeit a bad idea: https://godbolt.org/z/eK34KxoWx

1640692997
bw!sid2730@user/betawaffle
sorta wish we could get official comptime introspection of function bodies

1640693006
Franciman!~Franciman@mx1.fracta.dev
that'd be super cool

1640693015
Franciman!~Franciman@mx1.fracta.dev
you would be able to implement continuations, probably

1640693025
Franciman!~Franciman@mx1.fracta.dev
wait maybe you already can

1640693048
bw!sid2730@user/betawaffle
you can, though you probably need architecture-specific code

1640693064
daurnimator!~daurnimat@vultr.daurnimator.com
`suspend` is *already* continuations

1640693077
bw!sid2730@user/betawaffle
daurnimator: well, it's a kind of continuation

1640693105
jjido20!~jjido@90.213.58.125
bw that's cool but don't do it at home!

1640693155
daurnimator!~daurnimat@vultr.daurnimator.com
layout is essentially undefined until late in the compilation stages. it's only guessable right now because of some unimplemented optimisations

1640693172
bw!sid2730@user/betawaffle
jjido20: zig emits debug info for the frame structs, which means you can see what's going on in a debugger

1640693215
daurnimator!~daurnimat@vultr.daurnimator.com
bw: what you *can* do is inspect your own debug info at runtime. that of course means you only work on non-stripped binaries.

1640693216
Franciman!~Franciman@mx1.fracta.dev
does anybody happen to have a libclang and libllvm with debu symbols for arch linux?

1640693226
bw!sid2730@user/betawaffle
daurnimator: right, i noticed zig doesn't eliminate variables that don't cross suspend points

1640693235
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: hmm. let me check if I can upload one

1640693254
bw!sid2730@user/betawaffle
*yet

1640693287
daurnimator!~daurnimat@vultr.daurnimator.com
bw: yep. that's just a juicy project waiting for someone to have time to work on it. 

1640693293
bw!sid2730@user/betawaffle
even in release-fast, zig doesn't seem to notice that it can re-use stack space 

1640693300
bw!sid2730@user/betawaffle
*yet

1640693416
bw!sid2730@user/betawaffle
daurnimator: i noticed this works too, i suppose it makes sense. i wonder if this should be allowed, or if zig should try to warn you: https://godbolt.org/z/8661KTGa7

1640693440
bw!sid2730@user/betawaffle
i mean, maybe there's a use-case too, but it seems super risky

1640693480
Franciman!~Franciman@mx1.fracta.dev
thank daurnimator 

1640693495
daurnimator!~daurnimat@vultr.daurnimator.com
bw: https://github.com/ziglang/zig/issues/7769#issue-785351958 "Frame types will also be considered pinned."

1640693517
bw!sid2730@user/betawaffle
daurnimator: re: juicy project, i assume that work should only happen in self-hosted, right?

1640693535
daurnimator!~daurnimat@vultr.daurnimator.com
bw: likely/yes.

1640693709
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: nevermind/sorry, the infrastructure isn't as ready yet as I thought

1640693916
bw!sid2730@user/betawaffle
i'm definitely looking forward to proper support for self-referential stuff (pinned structs and result location before return)

1640693966
daurnimator!~daurnimat@vultr.daurnimator.com
bw: pinned structs is just an anti-footgun rather than a new feature/ability

1640693990
bw!sid2730@user/betawaffle
right, as my example demonstrates

1640694179
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: which reminds me, we need to do the buildid support for zig

1640694200
Franciman!~Franciman@mx1.fracta.dev
np daurnimator 

1640694205
Franciman!~Franciman@mx1.fracta.dev
i will build one myself

1640695295
daurnimator!~daurnimat@vultr.daurnimator.com
mischief: I finally have ~1 hour now. remind me what the issue was?

1640695692
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
I looked at LLVM IR of emitted by zig when compiling an async function, and regardless of optimization level, it looks like unoptimized code - like it's storing every variable in that @Frame structure even if it's gonna need its value right away. Though I might be wrong, as the IR is hard to read. But it seems as if LLVM can't optimize across zig's @Frame? Not sure though.

1640695755
daurnimator!~daurnimat@vultr.daurnimator.com
Wolf480pl: IIRC that may be correct for @Frame; but not for just @frameSize?

1640695799
daurnimator!~daurnimat@vultr.daurnimator.com
I might be misremembering, but that was why we have both, instead of removing @frameSize and telling people to use `@sizeOf(@Frame())`

1640695802
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
(I wasn't trying to reply to anything above)

1640695852
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
anyway, 2 questions follow, 1. how do people read LLVM IR / assembly emitted by zig, and 2. isn't this gonna be slow?

1640695966
daurnimator!~daurnimat@vultr.daurnimator.com
Wolf480pl: TBH I only really look on godbolt

1640696047
bw!sid2730@user/betawaffle
has there already been a proposal for comptime-accessible annotations on struct fields?

1640696063
daurnimator!~daurnimat@vultr.daurnimator.com
Wolf480pl: only things referenced *across* suspends should end up in the frame. something never used across a suspend should be "normal"

1640696073
daurnimator!~daurnimat@vultr.daurnimator.com
bw: yes. what do you mean by "annotation"?

1640696111
bw!sid2730@user/betawaffle
like field tags in Go, for example, but better

1640696114
daurnimator!~daurnimat@vultr.daurnimator.com
(there are 3 different intepretations I can think of;  pretty sure all have been closed as proposals)

1640696167
daurnimator!~daurnimat@vultr.daurnimator.com
bw: for go-like tags; just... add a field, with your prefix/suffix of choice.

1640696228
bw!sid2730@user/betawaffle
i'm talking about extra information that can be provided in a struct definition, that can be accessed via `@typeInfo`

1640696246
bw!sid2730@user/betawaffle
not just strings, but actual typed metadata

1640696256
bw!sid2730@user/betawaffle
like a tuple, or similar

1640696259
daurnimator!~daurnimat@vultr.daurnimator.com
bw: there is no need though

1640696264
bw!sid2730@user/betawaffle
oh?

1640696329
daurnimator!~daurnimat@vultr.daurnimator.com
bw: what would be the practical difference from `struct { foo: u32, const foo_annotation_blah = "whatever you want"; }`

1640696338
bw!sid2730@user/betawaffle
let me make an example

1640696427
bw!sid2730@user/betawaffle
`const SomeStruct = struct { foo: i32 tag(.{ .json_name = "FOO", .proto_key = 3 }) };`

1640696545
bw!sid2730@user/betawaffle
don't get me wrong, there are certainly ways to implement something in userspace, but having actual syntactical support would be really nice

1640696604
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
daurnimator, doesn't look like godbolt is any better in my case :/ https://godbolt.org/z/7GbsPM9n7

1640696980
daurnimator!~daurnimat@vultr.daurnimator.com
bw: the problem with go tags is that there still is just that flat namespace. all sorts of annotations can interfere with each other

1640697028
bw!sid2730@user/betawaffle
good point

1640697036
bw!sid2730@user/betawaffle
maybe a const would be better... hmmm

1640697062
bw!sid2730@user/betawaffle
something like the "root module" pattern, but for arbitrary structs

1640697246
bw!sid2730@user/betawaffle
hmm, is `addrspace` actually usable in 0.9?

1640697591
daurnimator!~daurnimat@vultr.daurnimator.com
bw: you also have the option of `struct { foo: u32, const proto_keys = .{ .foo = 3 }}`. or `struct { foo: u32, pub usingnamespace proto_serialisation_tag("foo", 3); }` where proto_serialisation_tag is a function your protobuf library provides that returns some relevant field/function.

1640697607
bw!sid2730@user/betawaffle
yeah, that's what i was thinking

1640697694
bw!sid2730@user/betawaffle
(oh i see, `addrspace` is stage2 only)

1640697727
daurnimator!~daurnimat@vultr.daurnimator.com
though when you do so, you might find it ends up nicer to do: `struct { bar: bool, foo: u32, pub usingnamespace proto_serialisation(.{.bar = 1, .foo = 3}); }`

1640697767
daurnimator!~daurnimat@vultr.daurnimator.com
which is how I'd be solving the namespacing problem from e.g. go anyway

1640716856
tsmanner!~tsmanner@096-042-172-116.res.spectrum.com
Is it possible to use the std.json library to parse into recursive structs? (e.g. `struct { name: []u8, children: []*@This(), };`)

1640716962
tsmanner!~tsmanner@096-042-172-116.res.spectrum.com
Currently, trying to do something like this, I'm getting a compile error `cannot infer error set: ... 'std.json.parseInternal' not fully analyzed yet`

1640717017
ifreund!2940d10f8b@user/ifreund
tsmanner: that error means that you need to explictly specifiy the error set your funcion returns in the return type instead of using an inferred error set (e.g. !void) 

1640717050
ifreund!2940d10f8b@user/ifreund
the compiler currently always requires explicit error sets on recursive functions as it is not smart enough to infer the error set in that cse

1640717081
ifreund!2940d10f8b@user/ifreund
so do e.g. `const MyErrorSet = error {FooError, BarError};` and then use `MyErrorSet!void` as the return type

1640717099
tsmanner!~tsmanner@096-042-172-116.res.spectrum.com
Ah ok, that makes sense.  I'll give it a shot, thanks!

1640717106
ifreund!2940d10f8b@user/ifreund
no problem!

1640720579
Stalevar!~stalevar@user/stalevar
Does zig cc work on Windows XP?

1640721095
Franciman!~Franciman@mx1.fracta.dev
Stalevar: if clang and llvm can be made to work on it, yes

1640721098
Franciman!~Franciman@mx1.fracta.dev
i think

1640721155
Stalevar!~stalevar@user/stalevar
Franciman, I'm talking about binaries downloadable from the official site

1640721175
luuk!~luuk@user/luuk
They *may* work, but official support is Windows 8.1+

1640721178
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/download/0.9.0/release-notes.html#Support-Table

1640721216
andrewrk!~andrewrk@mail.ziglang.org
I will consider lowering the minimum windows version during the std lib stabilization phase of the project, which we are not yet in

1640721228
Franciman!~Franciman@mx1.fracta.dev
people sorry

1640721238
Franciman!~Franciman@mx1.fracta.dev
in your experience, is it hard to compile clang/llvm with debug symbols?

1640721246
Franciman!~Franciman@mx1.fracta.dev
may I have better luck in changing distro ?

1640721250
Stalevar!~stalevar@user/stalevar
andrewrk, lowering to where?

1640721259
Stalevar!~stalevar@user/stalevar
like to Windows 2000 or NT4?

1640721293
andrewrk!~andrewrk@mail.ziglang.org
that's a question to be considered during that time. right now I am focused on other things so I cannot give a good answer

1640721306
Stalevar!~stalevar@user/stalevar
Franciman, your distro might already have debug symbols in separate repo

1640721312
andrewrk!~andrewrk@mail.ziglang.org
Franciman, https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#debug

1640721320
Franciman!~Franciman@mx1.fracta.dev
andrewrk: when an issue is marked as milestone for 0.11

1640721330
Franciman!~Franciman@mx1.fracta.dev
can I try to fix it before 0.11?

1640721333
Franciman!~Franciman@mx1.fracta.dev
if i am able

1640721337
andrewrk!~andrewrk@mail.ziglang.org
yes of course

1640721348
Franciman!~Franciman@mx1.fracta.dev
Stalevar: i couldn't find any :<

1640721351
andrewrk!~andrewrk@mail.ziglang.org
the milestone description is "Accept and resolve these issues, reject, or postpone them before releasing 0.11.0."

1640721384
Franciman!~Franciman@mx1.fracta.dev
thanks

1640721387
Franciman!~Franciman@mx1.fracta.dev
thanks for the link

1640721392
Franciman!~Franciman@mx1.fracta.dev
I meant is it computationally intensive?

1640721402
Franciman!~Franciman@mx1.fracta.dev
i vaguely remember it took around 4 hours to compile

1640721405
Franciman!~Franciman@mx1.fracta.dev
but i was on an old pc

1640721420
Stalevar!~stalevar@user/stalevar
andrewrk, but a person I was talking with said that he's using zig on windows 7 somehow

1640721464
andrewrk!~andrewrk@mail.ziglang.org
as luuk mentioned, we do not intentionally block earlier versions of windows from working, but we don't promise to not call system functions from newer versions

1640721637
Stalevar!~stalevar@user/stalevar
Is it possible to control `zig cc` options, such as make it build the same way `clang -Wall -g -o something{,.c}` would?

1640721697
Stalevar!~stalevar@user/stalevar
Also does it support -nostdlib?

1640721716
ikskuh!~xq@v43666.php-friends.de
i found a curious stage1 bug

1640721732
Franciman!~Franciman@mx1.fracta.dev
ikskuh: same ^^

1640721751
ikskuh!~xq@v43666.php-friends.de
./call-wrap.zig:53:21: error: parameter of type '�J���' not allowed

1640721755
ikskuh!~xq@v43666.php-friends.de
beat this :D

1640721802
andrewrk!~andrewrk@mail.ziglang.org
Stalevar, you can set ZIG_VERBOSE_CC=1 to dump the args zig is sending to clang

1640722563
ikskuh!~xq@v43666.php-friends.de
i found a bug in @Type /o\

1640722601
ikskuh!~xq@v43666.php-friends.de
https://bpa.st/CDXA

1640722666
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
can't be, I wrote the first iteration of it so it must be perfect

1640722679
ikskuh!~xq@v43666.php-friends.de
lol

1640722698
ikskuh!~xq@v43666.php-friends.de
i love that it just seems to free the memory for the first argument 

1640722701
ikskuh!~xq@v43666.php-friends.de
and prints out bullshit

1640722747
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
lol, the funny thing is that could be legitimate right?  If the ownership was transfered to the callee

1640722766
ikskuh!~xq@v43666.php-friends.de
i have no idea what happens here

1640722773
ikskuh!~xq@v43666.php-friends.de
it only happens when i use "*Self" and not "Self"

1640722778
ikskuh!~xq@v43666.php-friends.de
it seems like it forgets the pointer type?

1640722785
Franciman!~Franciman@mx1.fracta.dev
now I am frightened 

1640722789
Franciman!~Franciman@mx1.fracta.dev
ops wrong channel

1640722791
Franciman!~Franciman@mx1.fracta.dev
sorry

1640722795
Franciman!~Franciman@mx1.fracta.dev
lol ikskuh this is tricky indeed

1640722814
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
Franciman, meant to type in #ScaryGhostStories?

1640722821
ikskuh!~xq@v43666.php-friends.de
Franciman: frightening is still valid

1640722825
Franciman!~Franciman@mx1.fracta.dev
ahah

1640722887
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
2 Irc channels 1 keyboard challenge

