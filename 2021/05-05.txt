1620178224
olabaz
can you use switch on an enum?

1620178297
g-w1
yes

1620178309
g-w1
what trouble are you running into?

1620178626
olabaz
none, just wondering if it was allowed.

1620178693
g-w1
imo thats the main thing to switch on :)

1620178712
olabaz
Is it possible to have a next function in an enum so that it updates my variable

1620178722
g-w1
yes

1620178746
olabaz
when I did next(self: Myenum) { self = blah} it said I couldn't modify self

1620178766
g-w1
self: *Myenum

1620178772
g-w1
function paramaters are immutable

1620178811
olabaz
ah I see

1620178840
olabaz
it's also asking for an else clause even though I did every branch

1620178852
g-w1
is it a non-exuastive num?

1620178861
g-w1
s/num/enum

1620178937
olabaz
oh I forgot to dereference

1620178943
g-w1
ah :)

1620189220
noam
Thought occurred

1620189239
noam
Is there an analyzer valgrind-style that runs two variants of a program and tracks diverging code flow?

1620189243
noam
because there absolutely should be

1620189285
noam
Heck, just recording control flow would be enough

1620191911
noam
I just felt the presence of Andrew, calling me to use Zig. An hour spent debugging only to realize an implicit cast from u32 to u16 was removing 90% of the dependency list. "Debug your cooooooode," the voice intoned, "nooooot your knowledge of the lannnnguaaage"

1620192246
noam
If I don't say "foo = bar & 0xFFFF", why the heck does the language think it's okay to insert a truncation? :(

1620193276
noam
andrewrk: idea that I'm not sure deserves a proper proposal: compiler error if anytype is used but comptime logic in the function constrains it to a single type (e.g. `if(@TypeOf(foo) != bar)`)

1620197987
antaoiseach
hello folks, basic question here - does switching on a tagged union need to return the same type for all prongs?

1620198050
antaoiseach
(sort of makes sense I think since the switch expression has a single type?)

1620198058
noam
Peer types must always resolve to a single type

1620198079
noam
So you can have e.g. a comptime_int and a u8, because the comptime-int implicitly upcasts to u8

1620198088
noam
but you can't do, say, a random structure and a number

1620198100
antaoiseach
noam: okay, that makes sense. thanks!

1620198115
noam
np :)

1620198161
noam
Basically, every expression has a

1620198191
noam
a,b,c,d, and e each have a type; (b * c) has a type; a + (b * c) has a type; i(f(foo)d else e) has a type...

1620198230
noam
There's other ways of thinking about it; I personally like this one, but my programming habits aren't the norm and you might find a different perspective more useful

1620198751
antaoiseach
noam: thanks for that! :-) ... yes, indeed, sometimes one can get confused when overthinking things! That is a useful aide memoire

1620216935
antaoiseach
hello folks, another basic question - the Zig ref mentions that slices have length known at runtime and also have a `ptr` field. So that would mean that something like my_array[1..3] is not a slice? The next example then calls this a slice as well, so I'm a bit confused.

1620217051
ifreund
my_array[1..3] will actually evaluate to a pointer to an array of 3 items as the slicing bounds are comptime known. a pointer to array coerces to a slice though

1620217100
antaoiseach
ifreund: yes, precisely! That's what I found when I printed the type out - something like *[5]i32.

1620217118
antaoiseach
Ah, okay ... so something like arr[1..3] would coerce to a slice?

1620217132
dutchie
yup

1620217150
antaoiseach
Ah, okay. I think I need to experiment a bit more to get the variations right in my head. Thanks, guys!

1620217178
ifreund
no problem!

1620217181
dutchie
there is a zig showtime about the various pointer types that's pretty informative

1620217241
dutchie


1620217292
antaoiseach
dutchie: Thank you! That should come in useful now... I'll watch it, and get back with any questions I might have. Cheers!

1620220565
antaoiseach
dutchie: okay, so watched the whole video - it was quite useful indeed, especially the coercion rules between the various kinds of pointers. Thanks again for the recco!

1620221096
dutchie
cool :)

1620224175
marler8997
fengb, I got pointed to your Swhash type

1620224194
marler8997
I was curious, in your "hash" function, why do you need to copy the string to a temporary on the stack in order to call readIntNative on it?

1620224201
marler8997


1620224428
TheLemonMan
in case the string is too short

1620224438
TheLemonMan
tmp is zero-filled

1620224452
marler8997
oh right

1620229577
kiedtl
What's the import name of array_list? std.array_list doesn't seem to work

1620229611
mq32
std.ArrayList

1620229651
kiedtl
Ah

1620229695
kiedtl
Still getting used to Zig's module system

1620231148
fengb
Modules are manually managed in the code. std exports ArrayList as a different symbol than what's on the file system

1620232587
andrewrk
noam, there is no compile error planned for the situation you mentioned with `anytype`. also I think it is a non-trivial, nuanced topic

1620239990
ifreund
andrew's streaming in case anyone here isn't aware and would like to tune in:

1620241143
hspak
Sneaky stream!

1620245282
noam
andrewrk: yeah, I figured as much :) I think this is one of those cases where "don't encourage the pattern" is really the best solution

1620250598
kiedtl
Are dynamically-sized stack-allocated slices supported yet? e.g. `var foo: [not_comptime_length]Foo = undefined`

1620250614
mq32
no

1620250621
mq32
(also, this is an array)

1620250621
ifreund
kiedtl: no, and they may never be

1620250633
kiedtl
oops, yeah, array

1620250649
mq32
kiedtl: the pattern here is to make `foo` just

1620250705
kiedtl
uh huh, so I just choose some number that most likely won't be crossed (like, I dunno, 2048)... and that's idiomatic Zig? (I'd prefer to not use an allocator in what I'm doing)

1620250748
mq32
if you know the upper bound: use that

1620250758
mq32
FixedBufferAllocator can still be stack-backed

1620250765
mq32
and also requires a "big enough" array

1620250832
kiedtl
I do know the practical upper bound, so I'll use that. And since I don't want to use an allocator, the only other option is to pass the buffer as an argument, like C, I guess

1620250845
mq32
yeah

1620250858
mq32
but as said: FixedBufferAlloator can still be used

1620250866
mq32
it just uses that array for allocation :)

1620250883
xackus
you can let the caller decide and pass a FixedBufferAllocator when needed

1620250914
kiedtl
Yup, that's the option I'll use if I opt to use an allocator later

1620251675
andrewrk
kiedtl, this is intentionally not supported so that the compiler has a better knowledge of the upper bound stack size

1620251702
andrewrk
however I've been thinking about adding another kind of allocator to std.heap, or maybe a feature to ArenaAllocator

1620251753
andrewrk
idea would be that you pass this one around for temporary allocations that are tied to the stack, but can't be stack allocated because the amount is runtime known

1620251793
andrewrk
it would be equivalent to creating an arena allocator for a stack frame but would be more efficient to reset to a previous state (currently with ArenaAllocator you can only free everything at once)

1620251828
ifreund
would it be different from an arena per stack frame?

1620251842
mq32
i think the idea is that you can allocate again into the same buffers?

1620251848
mq32
i wanted to do something like this as well

1620251870
andrewrk
ifreund, I'm guessing you wrote that after reading 3/4 of my monologue :D

1620251885
mq32
it's stupid to unmap() your pages when you just know that you're going to allocate them again anyways in the next cycle

1620251891
andrewrk
yeah

1620251926
ifreund
andrewrk: indeed :D

1620251927
mq32
i want such a thing for games as well

1620251947
mq32
var temp_allocator = TempAllocator.init(); while(true) { temp_allocator.reset(); â€¦ }

1620251950
andrewrk
this would be a very reasonable alternative when someone inquires about alloca

1620251991
ifreund
would alloca with a comptime known upper bound really be that bad?

1620252087
andrewrk
I considered that and came to the conclusion that it's just too obscure a use case, for not enough of a benefit, with too much of a footgun associated with it

1620252146
andrewrk
especially when the alternative is so comfy and performant

1620252213
andrewrk


1620252250
andrewrk
"obstack" is a reference to a third party library for doing the thing I mentioned above with a new allocator or with a feature of ArenaAllocator, but with a less comfy API

1620252291
ifreund
makes sense to me, I'm very curious to see how the API of the "new allocator" shapes up

1620252349
marler8997
andrewrk, there's another concern about calling WSAStartup as a fallback

1620252353
marler8997
WSAStartup is not thread safe

1620252364
andrewrk
fuck me

1620252386
mq32
oh, yeah

1620252388
mq32
i remember :D

1620252442
andrewrk
marler8997, I'm

1620252464
mq32
^^

1620252467
mq32
ban windows.

1620252503
marler8997
I have a weird idea, creating a wrapper dll around ws2_32.dll and using DllStartup to call WSAStartup

1620252510
andrewrk
no

1620252529
andrewrk
ws2_32.dll is a local maximum

1620252546
mq32
it's not a maximum at all /o\

1620252553
mq32
it#s more a global minimum

1620252561
marler8997
what do you mean by local maximum?

1620252588
andrewrk


1620252619
marler8997
lol, I know what local maximum means, but how is ws2_32.dll a local maximum?

1620252651
andrewrk
ws2_32.dll is all userland. we could use the lower level API and not depend on ws2_32.dll at all

1620252664
marler8997
gotcha

1620252678
andrewrk
we don't have to play games with this wsastartup bullshit

1620252722
marler8997
I'm very unfamilair with AFD to be any help with analyzing that

1620252737
andrewrk
I'd be curious what some of the other std libs do

1620252740
marler8997
I'm extremely familiar with ws2_32. I had to implement my own version of it

1620252983
andrewrk


1620253013
mq32
probably in net_imp module?

1620253019
mq32
self.0.peer_addr()

1620253020
mq32
what

1620253027
ifreund
self is a tuple :P

1620253040
mq32
ah

1620253145
marler8997


1620253169
andrewrk
I see a WsaStartup call

1620253207
marler8997
yeah, not sure if sys/windows/net.rs: init is supposed to be called by the user?

1620253247
andrewrk
probably not since they use the init_once pattern

1620253267
marler8997
D uses a static module constructor:

1620253278
marler8997
very similar to GCC'c c constructor

1620253284
mq32
aaand another user ran into -msvc being the bad default on windows

1620253302
andrewrk
wsastartup not being thread safe is no big deal, we already have the init_once abstraction as well

1620253324
marler8997
init_once makes it thread safe?

1620253327
ifreund
I think that init() gets called here for example:

1620253436
andrewrk
marler8997, yeah init_once is just a mutex + flag so that multiple threads can race to initialize something and only 1 wins and the others wait

1620253491
marler8997
ooo, that might cause an issue

1620253502
marler8997
it's using atomicLoad

1620253535
marler8997
so if the first thread increments the atomic, any thread can come in and start using ws2_32 before the first thread has called WSAStartup

1620253553
andrewrk
nah any other threads will wait until the init is finished

1620253565
andrewrk
atomic load is the first thing a mutex implementation does

1620253569
marler8997
I'm looking at once.zig in "call"

1620253593
marler8997
oh, the atomicLoad isn't setting done?

1620253603
marler8997
I see, then it's good

1620253644
marler8997
so, do you think we should put an "init" call before calling anything in ws2_32, or do a fallback?

1620253729
andrewrk
I don't really care. if I were implementing it, I'd probably do the error handling

1620253832
marler8997
actually the init method may be problematic if an applications want's a specific version

1620253848
marler8997
with the fallback method, if the user calls WSAStartup themselves they can select their own version

1620253868
companion_cube
welp, the zig Tracy stubs helped me do my own tracy bindings

1620253871
companion_cube
ðŸ’ƒ

1620253902
companion_cube
___tracy_emit_zone_begin_alloc and all that jazz

1620253946
andrewrk
looks like go std lib uses ws2_32.dll

1620253958
andrewrk
goodness I had no idea how much of a train wreck networking on windows was

1620253996
andrewrk
windows APIs get some stuff right

1620254002
andrewrk
networking is not one of them

1620254003
g-w1
and it seems like go reimplements everything lol

1620254027
marler8997
networking is especially weird, they've got windows-specific functions, and then a half-baked version of the posix ones

1620254084
marler8997
looks like go is taking advantage of some type of "static module constructor" as well

1620254093
marler8997


1620254208
ifreund
ew

1620254209
marler8997
so andrewrk, if I'm making a zig library that requires some sort of initialization with optional parameters, wouldn't you say that I should provide some type of "init" function?  Couldn't zig's `std.os` do the same thing?

1620254264
andrewrk
yes I would, but I don't think there should be a global os init(). it would not be appropriate to initialize networking for all applications for example

1620254294
ifreund
it also wouldn't be needed if we eventually ditched ws2_32.dll right?

1620254305
andrewrk
right

1620254354
andrewrk
lithdew pointed out ws2_32.dll might be the best short term path, with AFD something to look into in the future

1620254396
andrewrk
another way to design a cross platform abstraction would be if you had to create a "Networking" instance to pass around

1620254438
marler8997
I wonder if there are other platforms that would need something like that?

1620254463
marler8997
UEFI actually might be able to use that

1620254471
andrewrk
the abstraction is still leaky with WSAStartup though, since it's global

1620254513
andrewrk
one thing that comes to mind is globally ignoring the SIGPIPE it is that happens when a client disconnects from a server

1620254530
andrewrk
it's the same problem, global state the OS has rudely forced upon the application

1620254557
marler8997
what's the leaky problem with WSAStartup?

1620254580
andrewrk
you can't contain it to a Networking instance. if you deinitialized one, it would also mess up the others

1620254609
marler8997
WSAStartup does maintain a reference count

1620254623
andrewrk
I see

1620254639
marler8997
double checking...

1620254689
marler8997
> The WSAStartup function typically leads to protocol-specific helper DLLs being loaded. As a result, the WSAStartup function should not be called from the DllMain function in a application DLL.

1620254696
marler8997
scratch the DllStartup idea

1620254716
marler8997
> An application must call the WSACleanup function for every successful time the WSAStartup function is called. This means, for example, that if an application calls WSAStartup three times, it must call WSACleanup three times. The first two calls to WSACleanup do nothing except decrement an internal counter; the final WSACleanup call for the task does all necessary resource deallocation for the task.

1620254737
marler8997
yup, like I remembered

1620254760
mq32
marler8997: DllMain() would be an option hereâ€¦

1620254772
mq32
you get PROCESS_ATTACH and PROCESS_DETACH

1620254783
mq32
but it's also the most horrible hack

1620254790
marler8997
right, but you can't call WSAStartup inside DllMain

1620254791
mq32
and will not make those wonderful single-file executables

1620254802
marler8997
you can't load other Dlls inside DllMain, and WSAStartup can load other Dlls

1620254812
mq32
hand â†’ face

1620254825
mq32
okay, going to bed. just remove networking, nobody needs this

1620254828
marler8997
yeah, I got bit by that one years ago, there's tons of restrictions on DllMain

1620255062
marler8997
WSAStartup would still be leaky though because it's global (not thread local).  So any thread that calls it and changes the version would affect all other threads within the same process

