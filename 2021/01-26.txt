1611619206
daurnimator
zags: llvm optional. not removed

1611619207
g-w1
the latter, but the self-hosted backends will have the low hanging optimisations

1611619241
daurnimator
zags: which is to say: for a release build, you'll want to use LLVM with all its optimizations; but for debug builds and while working on the code, use the self-hosted backend

1611619485
zags
yeah that's what I meant by switching to llvm for release builds

1611619488
zags
cool beans

1611619525
zags
there are important relwithdebinfo cases

1611619553
zags
is optimized debug builds something that is/will be supported?

1611619639
daurnimator
zags: even full release builds have proper debug info

1611619653
daurnimator
(though things might be optimized out etc)

1611619654
zags
oh ok, very nice

1611619678
zags
yeah, we need to get proper backtraces from customers while having them run at full speed

1611619764
g-w1
release-small and fast optimises it out?

1611620261
daurnimator
g-w1: huh?

1611620672
justin_smith
what I found counterintuitive is that "--release-debug" isn't the flag for dev builds - with no release flag you get unoptimized and debuggable, --release-debug is when you want optimizations but also debug info

1611620676
justin_smith
or something like that

1611620717
daurnimator
there is no --release-debug.... zig has Debug, ReleaseSmall, ReleaseSafe, ReleaseFast

1611620738
justin_smith
sorry, I misremembered the flag

1611620740
daurnimator
all of them come with debug info

1611620801
justin_smith
daurnimator: right, but when I used --release-safe that was more optimized, and less friendly for debugging, than what I got when I used no --release-foo flag (the default, which I guess is how you get debug)

1611620827
daurnimator
yes. release-safe is "go as fast as you can; but most undefined behaviour will be safely caught"

1611620863
daurnimator
release-fast is "go as fast as you can; I understand that undefined behaviour may lead to nasal demons"

1611636280
Xatenev
hello

1611636302
Xatenev
even with -O ReleaseFast a simple hello world application seems rather big compared to a c hello world

1611636313
Xatenev
can I reduce it even more anyhow or is this the smallest it can get?

1611636340
Xatenev
theres also -O ReleaseSmall but its still rather big.

1611636478
Xatenev
I thought maybe this was due to llvm being used as compiler infrastructure but iirc clang is also using llvm and it also has a quite small binary size

1611636733
Xatenev
it does still seem to have a bunch of strings in there related to runtime checking stuff .. hm

1611636800
daurnimator
Xatenev: are you linking libc? -lc

1611636824
daurnimator
Xatenev: also if you want a really small binary, consider overriding the panic handler

1611636865
Xatenev
daurnimator, thank you, -lc does help a bit, its reducedf from 850 to 650 lines on godbolt

1611636870
Xatenev
daurnimator,

1611636913
Xatenev
daurnimator, is there no command line switch to disable all the runtime checking for a build?

1611637004
daurnimator
Xatenev: weird... is godbolt adding something after the code we type?

1611637070
daurnimator
yep.. wtf

1611637088
Xatenev
daurnimator,

1611637271
daurnimator
Xatenev: if you don't use error handling things get a little smaller:

1611637301
daurnimator
Xatenev: there's a few blog posts around e.g.

1611637487
Xatenev
daurnimator, thank you, interesting

1611672858
Ashpool
Can I have anonymous fields in a packed struct declaration (e.g. to force some padding here and there)?

1611672978
ikskuh
Ashpool, no that's not possible

1611673720
fengb
Not anonymous, but you can insert auto zeroing fields: `packed struct { foo: u7, _pad: u1 = 0 }`

1611674907
ed_t
how would i handle this error?

1611674909
ed_t
var list = ArrayList(i32).init(a);

1611674909
ed_t
list.items[70] = 66;

1611675056
fengb
Are you trying to create a sparse array?

1611675079
ed_t
at this point just learning

1611675129
ifreund
you need to grow your ArrayList to at least 70 in length first

1611675131
ed_t
if I was to create a sparse array what should I use (arrayHash maybe?)

1611675186
ed_t
yes I know I need to grow the list NOT to get a runtime error.  What I am trying to understand is how to catch it if I do?

1611675207
fengb
You can't catch runtime errors

1611675215
fengb
You need a preflight check

1611675286
ed_t
I could use try and catch errors on the right side of the =, but it does not work on the left side

1611675306
ifreund
there's no error that can be caught there

1611675320
ifreund
errors are values returned from functions in zig

1611675330
ifreund
there's no function called in that snipped that returns an error

1611675358
dutchie
you just have to check the length before you try indexing

1611675385
ifreund
you are simply preforming an illegal operation which is safety-checked in "safe" build modes and undefined behavior in release fast/release small

1611675411
ed_t
Test [1/1] test "std.ArrayList/ArrayListUnmanaged.insertSlice"... thread 130129 panic: index out of bounds

1611675411
ed_t
list.items[70] = 66;

1611675433
ed_t
that is what I would like to catch

1611675456
ifreund
as I just said, there is no error to catch there

1611675507
ed_t
so "index out of bounds" is not an error from a zig perspective

1611675527
ifreund
it's a safety checked illegal operation

1611675559
ifreund
which causes a panic in debug/release safe build modes

1611675620
ed_t
and zig is not providing a way to catch this, unlike most other conditions

1611675642
g-w1
catch it by checking it beforehand

1611675682
ifreund
no, you cannot handle illegal behavior

1611675703
ed_t
g-wl yes I can do this list.items.len has the index limit.

1611675720
ifreund
you just need to fix your code to not cause it, either by checking the lenght first or resizing the ArrayList

1611675734
ed_t
its just not as clean as catching what should be a rare occurance

1611675757
ifreund
this should never happen in correct code

1611675767
ifreund
that's what illegal behavior means

1611675827
ifreund
errors are for things that can occur despite the code being correct

1611675863
ifreund
i.e. opening a file failing because there is no such file with the given name

1611676065
ed_t
I understand what you are saying - been coding in many many languages for over 40 year.  To me, as a zig newbee, this looks like a corner case that would be good to handle.

1611676072
ed_t
for instance:

1611676083
ed_t
var list = ArrayList(i32).initCapacity(a,74);

1611676083
ed_t
list.items[70] = 66;

1611676120
ed_t
I know the space is allocated but the arraylist is not grown...

1611676225
ifreund
var list = ArrayList(i32).init(a); list.resize(74); list[70] = 66;

1611676248
dutchie
(don't forget to `defer list.deinit();` too)

1611676261
ifreund
you can also set items.len manually, though that is more error-prone

1611676297
companion_cube
what does `list.resize(74)` put in the slots though?

1611676304
dutchie
there's also list.expandToCapacity() and list.allocatedSlice()

1611676307
dutchie
companion_cube: undefined

1611676312
companion_cube
heh, fair enough

1611676467
ed_t
(defer is the next line in the test sample) I will need to look at the code in lib/zig/std to understand just what is happening with resize etc.  I would expect there should be a way to detect the undefined slots (eg list.items[40] where i have not set a value)

1611676496
ifreund
it sounds like you want a HashMap tbh

1611676529
ifreund
you can't detect if memory is `undefined` because the value could be literally anything in relase-fast/small build modes

1611676612
ifreund
you could store an ArrayList of optional i32s ArrayList(?i32) but that wouldn't be as nice as a hashmap

1611676633
dutchie
and you'll have to remember to initialise them to null

1611676646
ifreund
^

1611676682
companion_cube
dutchie: I like the approach of languages with closures though

1611676701
companion_cube
you'd have `arr.resizeWith(42, |i| i*2);` or something like that

1611676706
companion_cube
specify what to put in new slots

1611676721
dutchie
there are some methods on ArrayList which let you copy stuff in

1611676728
dutchie
otherwise zig prefers an explicit loop

1611676821
ifreund
there's appendNTimes() for example

1611676826
ed_t
zig test al_test.zig

1611676826
ed_t
list.resize(71);

1611676826
ed_t
./al_test.zig:13:13: error: type '@typeInfo(@typeInfo(@TypeOf(std.array_list.ArrayListAligned(i32,null).initCapacity)).Fn.return_type.?).ErrorUnion.error_set!std.array_list.ArrayListAligned(i32,null)' does not support field access

1611676836
dutchie
you forgot a try somewhere

1611676839
ed_t
why? know I am missing something very basic here

1611676845
ed_t
ahh

1611676852
ifreund
try list.resize(71);

1611676906
ed_t
same thing with the try added

1611676933
dutchie
initCapacity needs a try too

1611676934
g-w1
no, list is an error union, when creating list, you forgot a try

1611676955
dutchie
since it might run out of memory it returns an error union

1611679808
ed_t
thanks for help guys - learning a new language is always both a pita and fun...

1611680142
ifreund
indeed, you're most welcome :)

1611684487
Gliptic
is there some established support/pattern for generating .zig files in build.zig and caching them when inputs don't change?

1611685060
zags
Hey. I'm taking a 32 byte piece of data as 64-char hex bytes from the command line. What's the best way to convert the hex string to a slice of 32 bytes?

1611685088
zags
array*

1611685183
ikskuh
var bytes: [32]u8 = undefined;

1611685207
ikskuh
for(bytes) |*b,i| { b.* = try std.fmt.parseInt(u8, string_slice[2*i..2+(i+i)], 16); }

1611685231
zags
oof, no fromHex? :D

1611685238
zags
I'll try that

1611685239
zags
thanks

1611685250
ikskuh
it's not that much code ^^

1611685262
zags
it is when you do it a lot, but i'll make a wrapper

1611686330
zags
pub fn fromHex(in: []const u8, out: *[32]u8) !void {

1611686330
zags
for(out) |*b,i| {

1611686330
zags
}

1611686330
zags
b.* = try std.fmt.parseInt(u8, in[2*i..2+(i+i)], 16);

1611686337
zags
}Is that a fine signature?

1611686353
ikskuh
zags: "in: *const[64] u8"

1611686353
zags
Not familiar with all the idioms yet

1611686363
zags
ikskuh: good point!

1611686364
ikskuh
you know how long the input string must be :)

1611686387
zags
wait, why pointer and not just the slice for input?

1611686396
ikskuh
because a slice has dynamic length

1611686401
ikskuh
and you'd have an out-of-range error

1611686408
zags
but it worked :D

1611686416
ikskuh
yes, for exactly one input ;)

1611686421
ikskuh
try passing it "foo"

1611686425
ikskuh
and it will crash

1611686433
ikskuh
with the signature taking a const pointer to an array of 64 chars

1611686439
ikskuh
you enforce psasing the right amount of chars

1611686458
zags
i see, thanks

1611686472
ikskuh
note:

1611686484
ikskuh
slicing with comptime known lengths yield pointers to arrays

1611686486
ikskuh
so

1611686501
ikskuh
dynamic_slice[0..64] will return "*const [64]u8" and not "[]const u8"

1611686532
zags
love it

1611686541
ikskuh
it's absolutely rad

1611686545
ikskuh
if you get the implications :D

1611686562
ikskuh
dynamic_slice[0..3].* = other_dynamic_slice[4..8].*

1611686584
zags
ikskuh: how would you write a general fromHex, taking hex strings of any length. Then I guess there's the question of allocation as well.

1611686601
ikskuh
dynamic or static length?

1611686609
zags
length unknown, input from user

1611686633
ikskuh
requires an allocator

1611686649
zags
typically you have that passed in then?

1611686687
ikskuh
fn fromHexAlloc(allocator: *std.mem.Allocator, input: []const u8) ![]u8

1611686688
zags
or require preallocated output?

1611686716
zags
Ok, so who frees though when passing allocator?

1611686724
zags
if it's an arena, it's simple, but...

1611686726
zags
in general

1611686728
ikskuh
the caller

1611686733
ikskuh
owns the memory

1611686739
ikskuh
they decide when to free

1611686741
ikskuh
fromHex(dest: []u8, input: []const u8) !usize

1611686747
ikskuh
would be a idiomatic fixed version

1611686806
ikskuh
fromHexStatic(comptime N: usize, dest: *const [N]u8, input: *const [2*N]u8) !void

1611686880
zags
these hex conversions are so frequent, would be nice if std had them imo even if it's not much code

1611686900
ikskuh
zags: i required them once ^^

1611686914
zags
i do it all the time in various projects hah

1611686917
ikskuh
but nobody prevents you from making a nice pr for std.fmt :)

1611686925
zags
:)

1611687067
Ashpool
Is there a way to declare a function that expects a generic type, e.g. a generic std.io.Writer?

1611687077
Ashpool
as an argument.

1611687079
ikskuh
use anytype

1611687087
ikskuh
fn takesWriter(writer: anytype) !void

1611687113
zags
So I take it std.fmt doesn't have a nice way to print arrays as hex strings?

1611687120
zags
the other way around, that is

1611687123
ikskuh
{h}

1611687128
ikskuh
ah no

1611687131
ikskuh
{x} and {X}

1611687132
ikskuh
sorry :D

1611687139
zags
ooooh nice

1611687239
zags
std.debug.print("{X}\n", .{.bytes});   I added .bytes instead of bytes by mistake and it printed ".bytes".... how does that happen

1611687264
ikskuh
because a enum literal doesn't have a X specifier

1611687278
ikskuh
but using non-existing specifiers doesn't error

1611687290
zags
right same if I do {}

1611688468
ed_t
are if always fully evaluated or does the evaluation stop when the result if fixed (conditional evaluation if I remember correctly)?

1611688554
ikskuh
ed_t: zig will only semantically check branches if their result is either comptime-taken or runtime known

1611688561
ikskuh
if(true) { } else { }

1611688570
ikskuh
only the true-part will be analyzed

1611688578
ikskuh
if(false) { } else { } is the other way round

1611688631
ed_t
so what gets evaluated in if ( e1 and e2 and e3 )

1611688642
ikskuh
if(runtime_value) { } else { } will analyze both

1611688646
ed_t
when e1 is true and e2 is false

1611688656
ikskuh
ed_t: is that related to if or boolean operators? :D

1611688660
ikskuh
i think its the latter

1611688694
ikskuh
and/or are guarantted to be short-circuited

1611688695
ikskuh
so

1611688705
ikskuh
f() and g() will run g() only when f() returns true

1611688771
ed_t
thats what i was looking for.  Thanks

1611688821
ikskuh
note that you can recognize this by the fact that "and" and "or" are keywords and not symbol operators

1611688834
ikskuh
everything that is control flow in zig is required to be a keyword

1611689517
dvaun
I'm enjoying the conversation here and really dig Zig so far. Problem is I've never done much with manual memory management, allocators...does anyone have any favorite/recommended resources for playing around like this? :) if not I'll scour through lobsters, HN etc...

1611689743
justin_smith
dvaun: something that helps a lot is using container structs like std.ArrayList and std.AutoHashMap which are parameterized with a type and allocator

1611689750
earnestly
dvaun: Have you opened files before, network connections, etc?  It's not a million miles from that, with the same lifetime considerations

1611689789
zags
dvaun: I think it's best to just write a bunch of small programs to test things out, that's what I'm doing now. I haven't done manual mgmt in a while, so need to rediscover good idioms. Smart pointers and GC makes you lazy :D

1611689872
justin_smith
oh, and definitely use "defer" with a deallocation after every explicit allocation (unless your allocation is returned / assigned to another scope)

1611689911
dvaun
earnestly: yes, using higher languages e.g. C#, python

1611689924
dvaun
zags: it's been a while since I've used any pointers ;)

1611689934
dvaun
I did see that defer pattern. Thank you for the reminder.

1611689966
justin_smith
I think that's a good comparison, but the gotcha is that the world is full of python programs that don't close their files properly, but the program is just accidentally used in such a way that the error is never visible

1611689966
ikskuh
dvaun: memory is just a resource like files. you open/allocate, so you have to close/free the resource

1611689974
dvaun
See, I've been considering playing with either Rust or Zig for some hobby projects and to get back into lower-level dev. It just seems fun and interesting compared to my work (which is primarily SQL atm so no real work on building tools etc...)

1611689978
justin_smith
with allocations, this is more likely to be a showstopper

1611689988
earnestly
dvaun: It's the same mental model.  resources need to be aquired and then released.  Opened files and sockets need to be closed, etc.  Which thread has access to read/write, etc.

1611690004
dvaun
that makes sense ikskuh and earnestly .

1611690025
dvaun
back when I played with C++ in college I enjoyed going through Beej's guide...might try going through that again but with Zig and mess around.

1611690046
dvaun
also looking at writing a simple allocator. Might look for an OS dev book to get fundamentals down again

1611690051
dvaun
thanks for the suggestions everyone :)

1611690053
justin_smith
dvaun: also with "zig test" you can get errors from allocated memory that isn't freed

1611690065
dvaun
that's great

1611690105
dvaun
You know what I really enjoy so far? Someone in the community created

1611690159
Nypsie[m]
ziglang.org is the official website. Do you maybe mean ziglearn.org? :)

1611690171
dvaun
yes! that :P

1611690897
zags
embarrasing... how do I turn var r: u64 into a []const u8?

1611690910
zags
using an api that takes the latter

1611690948
dvaun
these are the questions/problems that I need to play around with and become comfortable with :P

1611691008
fengb
zags: std.fmt.bufPrint(target_buf, "{d}", .{r})

1611691033
g-w1
do you want to just get the bytes?

1611691039
zags
yeah

1611691046
ikskuh
std.mem.asBytes

1611691052
zags
oh

1611691062
fengb
Bytes or string format output?

1611691071
zags
bytes

1611691073
fengb
I suppose I should have asked that :P

1611691090
zags
I yeah wasn't clear, need the 8 bytes

1611691292
zags
alright, std.mem.nativeToBig and then asBytes does the trick

1611691309
zags
asBytes with endian would be stellar, but hey

1611691361
zags
because now I need a temporary in client code

1611691428
ikskuh
zags: asByte is pretty much zero-cost

1611691465
fengb
Ah endianness

1611691498
zags
yeah this hits network :)

1611691544
fengb
Well if you don't transform it and the other side is the same implementation, it'll probably be fine 🙃

1611691549
zags
which by four decades old convention is big endian when everything else is little endian

1611691560
zags
fengb: the protocol at hand requires network order

1611691600
ikskuh
zags: that's unfortunate

1611691613
zags
very common :)

1611691653
ikskuh
yeah

1611691663
ikskuh
if you want to create network packets

1611691666
ikskuh
or decode them

1611691678
ikskuh
look at std.mem.readIntBig and std.mem.writeIntBig

1611691867
zags
ikskuh: yeah, those look cool, in this case I need asBytes as I have to hash some stuff in network order before serializing

1611692252
dvaun
hm anyone know of any site that has a search interface for looking through std?

1611692262
dvaun
going through the std folder right now checking out the files

1611692298
ikskuh
dvaun: i usually just browse it with my system tools (find, grep, vscode)

1611692311
dvaun
grep would be useful

1611692334
ikskuh
you on windows or unix?

1611692354
dvaun
atm mac but my home machine is windows

1611692358
ikskuh
ah

1611692362
dvaun
i'd run debian but my wife would contest

1611692367
ikskuh
dualboot!

1611692385
ikskuh
but more seriously: i just use vscode for that

1611692389
dvaun
might do that in the future

1611692395
g-w1
here, but it is VERY incomplete

1611692423
dvaun
I need to figure out how to run Plex in linux while retaining gpu transcoding ability

1611692438
dvaun
g-w1: ooh much appreciated!

1611692473
dvaun
I was skipping around the nav on the main site...didn't click on the documentation link

1611692508
dvaun
alright I'll retain the RTFM-esque questions for the foreseeable time...thanks

1611692521
zags
dvaun: yeah vscode is highly recommended - just git clone the zig repo and open in vscode. Makes it super easy to navigate through the source.

1611692527
g-w1
but I wouldn't use it. the auto docs tool is very old and there is a design flaw in it (lazy analysis).

1611692537
g-w1
*wouldn't use the website

1611692561
dvaun
zags: I have found the vscode integration to be quite nice for Zig in general. I got ZLS working by building from source (I don't have admin on this machine) and have been playing around since.

1611692719
zags
yep, zls works great

1611692730
zags
for the most part

1611692741
justin_smith
is there a cloc or cloc workalike configured for zig?

1611692755
justin_smith
maybe there's a file I can throw in /etc/ somewhere to make cloc count zig files

1611692772
ikskuh
scc can do this

1611692832
dvaun
ikskuh: is scc this library?

1611692853
ikskuh
yes

1611692898
justin_smith
ikskuh: ahh, turns out I was using obsolete tools, thanks

1611693574
dvaun
interesting

1611693627
dvaun
in std.os there is getRandomBytesDevURandom. Maybe this is a stupid question...is it safe to not check for the builtin.os.tag to be linux or bsd since it's assumed you'd only call it when in those OSes?

1611693662
ikskuh
yes

1611693666
ikskuh
it won't compile on other platforms

1611693668
dvaun
ah, gotcha

1611693673
ikskuh
if you need random, check out std.rand ;)

1611693676
dvaun
oh, noted that openZ handles it

1611693676
dvaun
nevermind

1611693681
ikskuh
there is a Prng and a crypto provider

1611693733
dvaun
bouncing off that recommendation...(looking at the Random struct)...i really do like the `Self = @This()` idiom

1611693750
ikskuh
:D

1611693777
dvaun
brings me to thinking of a way to create some async functions which execute after returning something like e.g. a promise (thinking JavaScript here)

1611693791
dvaun
overall Zig is much cleaner than C

1611693795
dvaun
imo

1611693803
ikskuh
we have that already :)

1611693811
ikskuh
var promise = await someFunc();

1611693811
dvaun
ooh boy that's better :)

1611693816
ikskuh
var result = await promise;

1611693834
dvaun
i can think of a fun use case

1611693852
dvaun
like making some server which can optionally add guards and other checks to a request

1611693915
dvaun
anyway, thanks for the input :D might practice by rewriting some other tools into Zig and seeing if tests pass

1611693924
ikskuh
have fun :)

1611693926
dvaun
crypto is always fun. Might look at xxhash

1611693932
ikskuh
running tests with zig is always fun

1611693953
ikskuh
btw, zigs crypto is pretty good already i think

1611693960
ikskuh
we have a crypto pro contributor

1611693978
dvaun
that's awesome!

1611693993
dvaun
i'm no pro at any of these fields. I'm pretty new, only a few years under my belt

1611694003
dvaun
they're just fun to read about :) I spend most of my time reading

1611694011
ikskuh
you know libsodium?

1611694015
dvaun
yes

1611694028
ikskuh
frank is writing zig crypto libs as well

1611694037
ikskuh
which is very cool

1611694044
dvaun
was he the author of libsodium or nacl?

1611694049
g-w1
yes

1611694051
dvaun
sorry, I don't know big contributors by name

1611694058
dvaun
that's really cool

1611694061
ikskuh


1611694064
ikskuh
he's that dude :D

1611694203
dvaun
that's awesome

1611694244
dvaun
i'm sure it exists, but it'd be neat to play with something similar to the DPAPI in windows for encrypting data and memory per user, process session etc.

1611694263
dvaun
i'm not familiar with POSIX internals beyond the basics lol

1611695062
zags
dvaun: windows is way ahead of the curve there, other os's offer various keychain apps

1611695124
zags
stuff like libsecret is not fun in comparison

1611695257
ed_t
what is zig trying to tell me here?

1611695258
ed_t
error: variable of type 'type' must be const or comptime

1611695258
ed_t
var hash = [4096][4096]u32;

1611695325
mikdusan
`var hash: [4096][4096]u32 = undefined;`

1611695394
ed_t
thanks

1611695401
ed_t
that was it

1611695457
zags
int x = reinterpret_cast<decltype(x)>(5);    works in c++, ie. x can be refered to on the RHS

1611695466
zags
var x: u64 = @intCast(@TypeOf(x), 5);    fails to compile because x is undeclared

1611695472
zags
What was the reason for this?

1611695559
justin_smith
zags: "var x: u64 = 5;" - or maybe I'm missing your point?

1611695581
mikdusan
i'd hazard a guess that no compelling case was made to allow referring to lhs this type during it's own init

1611695588
zags
justin_smith: it's a silly example, the point is to be able to use LHS in @TypeOf expressions on RHS

1611695619
justin_smith
zags: fair, yeah the clear thing is zig doesn't allow that, I can't answer any deeper than that personally

1611695643
zags
slightly annoying, not a big deal

1611695653
zags
porting some code that does this

1611695668
mikdusan
what does c++ do if `auto x = ... decltype(x) ...;`

1611695682
ikskuh
mikdusan: magic :D

1611695686
zags
that wouldn't work

1611695694
zags
because it's use before deduction

1611695733
zags
iow, compile error

1611697300
ed_t
if you have an array of a structure, can you do &a[88].field ?

1611697407
Gliptic
that's a pointer to the field of the 88th element

1611697413
ed_t
yes

1611697421
Gliptic
then yes

1611697458
ed_t
any idea why this happens then?

1611697460
ed_t
error: expected type '*u32', found '*i32'

1611697460
ed_t
l = &heap.items[i].n;

1611697486
Gliptic
l is of *u32 type?

1611697494
Gliptic
but .n is i32

1611697535
ed_t
no. as a pointer l is i32

1611697553
ed_t
as I understand things (I am a zig newbie)

1611697558
Gliptic
I meant the other way around

1611697583
Gliptic
possibly..

1611697586
Gliptic
I mean, what type is .n?

1611697592
ed_t
u32

1611697597
Gliptic
well, yeah

1611697602
Gliptic
you can't assign a *u32 to a *i32

1611697659
ed_t
but & should give me an address so I should get the address of head.times[i].n

1611697691
ed_t
or I need to tell zig that l is a pointer the u32 values

1611697695
Gliptic
it's not just "an address", it's a specifically typed pointer

1611697714
Gliptic
you need to change either l or .n so that the types match

1611697744
Gliptic
changing l to *u32 is one option

1611697760
ed_t
how would I define l as a pointer to u32?

1611697778
Gliptic
how is it defined now?

1611697788
ed_t
var l = &hash[x][y];

1611697797
Gliptic
well, then you need to change 'hash' as well

1611697817
ed_t
hash is an array of u32

1611697821
ed_t
(s)

1611697840
Gliptic
array of array of u32?

1611697847
ed_t
yes

1611697857
Gliptic
that's odd, because then l should have been *u32

1611697886
Gliptic
are you sure it's not .n that is i32?

1611697886
ed_t
that is what I thought

1611697929
ed_t
n: i32,

1611697934
Gliptic
yeah

1611697939
ed_t
is was suposed to be u32

1611697939
Gliptic
there's your problem

1611697954
ed_t
thanks.  new lang = new errors to learn

1611698738
ed_t
how do i coerce usize to u32, I know it can overflow so I guess try will be involved?

1611699241
ed_t
@intCast(u32, heap.items.len)

1611699333
g-w1
@truncate

1611699641
dvaun
is struct really self-defined as in src/type/Struct.zig or am I missing some other file?

1611699644
dvaun
base: Type.Payload = .{ .tag = .@"struct" },`

1611699644
dvaun
what caught my eye is `

1611699817
g-w1
no, that is the self hosted compiler, you want src/stage1/all_types.zig:1411

1611699830
dvaun
ah, much appreciated

1611700686
dvaun
codegen.cpp, line 406 under stage1

1611700725
dvaun
> // This whole function should be burned to the ground

1611700726
dvaun
lol

1611700756
g-w1
yep, stage2 will replace it

1611702477
daurnimator
ehhhhhh

1611702958
Ashpool
Is there a way to link libc statically?

1611703000
fengb
On Linux, you can use target x86_64-linux-musl

1611703071
andrewrk
check it out: struct-of-arrays implemented in userland, with an API roughly the same as ArrayList

1611703073
andrewrk


1611703090
andrewrk
there's an impl by ifreund there and then my counter proposal to make the implementation only use 1 allocation for everything

1611703123
andrewrk
featuring a call to std.sort.sort at comptime

1611703135
daurnimator
// workaround for stage1 compiler bug ? which bug is that

1611703150
andrewrk
it crashed in the comptime function evaluation memoization code

