1611539955
pixelherodev
Even I intend to support zig cc :P

1611539961
pixelherodev
(just not with llvm :)

1611556727
companion_cube
Will it be part of the spec then?

1611557031
andrewrk
the language spec governs the language, not the toolchain

1611563960
rtpg
Is there a rule of thumb regarding @cInclude @cImport groupings? is it like "if these are referencing stuff within each other they need to be included together"?

1611564722
andrewrk


1611583581
leon-p
Is there something like Cs getline() in std? something that puts a single line from stdin into an allocated buffer. I only found functions that have a max_length arguement, but my use case is for arbitrarily long lines, so those are probably not what I want.

1611583741
g-w1
make max_len std.math.maxInt(usize)

1611583972
leon-p
That is what I have done currently to get the project working. But isn't setting max_length to a very high number, even if it is considerably larger than any realistic input line will ever be, just a hack?

1611584281
dutchie
you are going to have trouble trying to store a line longer than std.math.maxInt(usize)

1611584337
dutchie
even if you somehow don't run out of memory, indexing is going to get weird, so you'll probably need multiple buffers anyway

1611584370
dutchie
it's not a hack, just reflecting the fact that real computers do have actual limits

1611584556
g-w1
im pretty sure the c function would break if it went above the limit, so zig makes it explicit

1611584618
leon-p
i see, hadn't considered it from that angle, thanks!

1611591644
dfrey
Hi.  I'm new to Zig, but I'm an experienced C programmer. I'm reading this section (

1611591685
ifreund
indeed, S is a type

1611591697
ifreund
and x is a global variable in the namespace of S

1611591865
ifreund
if you instantiate the type S and make x into a field, it would be local to the function and return the same result every time:

1611591986
ifreund
dfrey: here's a possibly better explanation, the variable S is indeed local to that function, but the type value it holds is gloabal as all types ar

1611591991
ifreund
*are

1611592098
Gliptic
how would I go about getting the type of a struct field, I suppose I could do @TypeOf(@as(Struct, undefined).field) or something silly like that

1611592104
dfrey
const S1 = struct { var x: i32; };  const S2 = struct { x: i32; };   So is it correct to say that x is a variable associated with the type for S1 and a variable associated with an instance for S2?

1611592106
Gliptic
is there a nicer way

1611592321
ifreund
dfrey: well, the second won't compile, you need a comma to make a field: const S2 = struct { x: i32, };

1611592353
ifreund
but yes that is correct

1611592407
dfrey
thanks

1611592506
ifreund
Gliptic: you could do std.meta.fieldInfo(MySruct, .field_name).field_type

1611592522
ifreund
that's less hacky but not really more concicse

1611592555
Gliptic
right, I forget about std.meta

1611592698
g-w1
the first wont compile either since you need an = when declaring variables

1611592841
ifreund
right, zig requires you to initialize all variables, even if just to undefined

1611614929
zags
Hey. I know it's prolly too late now, but was adding support for general union types and flow-sensitive typing ever discussed? By flow-sensitive typing, I mean automatic narrowing based on type tests so you don't need additional casts.

1611614980
ifreund
I'm not sure I understand what you mean, how is that different from the tagged unions we have today?

1611614998
zags


1611615045
ifreund
oh yeah I've seen that in kotlin before, I'm not much of a fan myself tbh

1611615063
zags
How come? It's been a delight to work with imo

1611615081
zags
Especially in Ceylon which has proper union types

1611615085
ifreund
It makes writing the code less effort but I don't like how implicit it is whlie reading

1611615103
zags
It's not implicit

1611615123
zags
It just collapses the type check and the cast

1611615136
zags
I find it very readable and clear

1611615226
ifreund
What I mean is that a line of code at the start of a block affects what is legal in the rest of the block in a somewhat invisible way

1611615246
ifreund
if you have a large block, this seems like it could cause readability issues

1611615264
ifreund
I haven't used it enough to really speak from a position of authority though

1611615335
zags
Yeah well I think it's a great approach

1611615351
zags
Less noise, same clarity

1611615374
zags
of type (just one type check/cast instead of having them separate)

1611615404
ifreund
zig's || capture things handle this just fine for me

1611615451
ifreund
And they do combine the type check/cast into one step

1611615486
zags
that just unwrapping, not flow sensitive control

1611615501
zags
convenient, but orthogonal

1611615527
ifreund
what would be an example of a check/cast that needs to separate in zig today?

1611615666
zags
Well my original question is about union types :) That's where it becomes useful.

1611615730
zags
I don't know Zig well enough to know if the existing constructs are sufficient with that mind, it may very well be.

1611615779
zags
Something a lot of languages are picking up so was curious if it was discussed

1611615955
ifreund
switching on a tagged union allows you to use || captures on the switch arms

1611616032
ifreund
I'm having a lot of trouble seeing what zig would gain from this feature tbh since it always makes potentially unsafe casting explicit

1611616104
ifreund
I guess if implemented it would allow leaving off the .? on optionals if you've checked for null

1611616122
ifreund
but this seems strictly less readable than the if (foo) |unwrapped| status quo

1611616133
zags
Moving right along

1611617212
daurnimator
huh. where did `zig builtin` go?

1611617265
g-w1
zig build-exe --show-builtin iirc

1611617294
daurnimator
g-w1: thanks! works. that's not in the --help output

1611617679
zags
total zig-noob succinctness question:

1611617805
Gliptic
slices are confusing me somewhat, how come this works: var str: []const u8 = "test"; const slice: [][]const u8 = &[_][]const u8 { str };

1611617837
Gliptic
but not: const slice: [][]const u8 = &[_][]const u8 { @as([]const u8, "test") };

1611617895
Gliptic
should it really matter if the slice temporarily was in a variable

1611617954
ifreund
zags: you want catch |err| switch (err) { ... };

1611618052
ifreund
Gliptic: you're missing a const, this would work; `const slice: []const []const u8 = &[_][]const u8{ "test" };

1611618082
Gliptic
you'd think so, but no

1611618108
Gliptic
error: expected type '[][]const u8', found '[]const []const u8'

1611618133
ifreund
Gliptic: that's an issue with how you are using the slice then...

1611618148
ifreund
do you really need the outer one to be mutable?

1611618210
Gliptic
hm, ah, the const was missing from the parameter type I pass it to

1611618326
zags
ifreund: lol, I did try that but got errors and starting trying increasingly complex things. Turns out I had try x catch ..., removing try works like a charm.

1611618344
zags
Seems like the compiler could say "did you mean to use catch here?" instead of expected error union type, found 'Mod.SomeStruct()'

1611618367
zags
It's not wrong, just some clang-style magical insightful errors would be helpful

1611618384
ifreund
oh yeah, the stage 1 compile error messages are pretty bad

1611618399
zags
I see

1611618416
ifreund
as you might imagine, there's not much motivation to improve them as stage2 is the long term goal

1611618438
zags
so stage1 will be nuked long term?

1611618445
zags
not sure how it's structured

1611618477
ifreund
indeed, stage1 is the C++ implementation that is currently used to build zig

1611618489
zags
ohhhh

1611618493
ifreund
large parts of the compiler frontend are already self-hosted though

1611618496
zags
so it'll be self-hosted

1611618498
zags
right

1611618519
ifreund
so your zig binary is actually a mix of zig and c++ code

1611618545
ifreund
when stage2 codegen is feature complete the C++ implementation can be deleted

1611618545
zags
I see, yeah that must be a torn in the eye for zig compiler devs

1611618582
ifreund
there's also a lot of design issues in stage1, which is why it's so slow and such a memory hog

1611618704
zags
on larger things, the part that emits llvm is slow as well it seems - will that be improved?

1611618712
zags
i guess llvm isn't as fast as it used to be

1611619051
g-w1
stage2 wont depend on llvm

1611619054
g-w1
its optional

1611619189
zags
Is the plan to reimplement optimizations, or is that where you switch to llvm (for release builds) ?

