1610845505
v0idify
CommunistWolf, what is that supposed to mean? lol

1610845598
CommunistWolf
I was just grouping a new one, don't mind me

1610846967
kandinski
any nix/nixos user here? I could use some help debugging a cImport/cIinclude issue

1610847030
kandinski
I was working on this last October, at 0.6, and could run `impls/zigzug$ zig test -lc -lpcre2 re.zig` and it would work, but now I upgraded my channels, got zig 0.7 and I see this error:

1610850309
kandinski
hmm, found the solution for now at least. Posting it here so people find it when googling

1610850965
kandinski
I don't know whether this is a nix issue or a zig issue that changed search paths, but I solved it by using pcre2-config like sebonirc recommended yesterday and then passing options by hand:

1610851287
kandinski
or, more portably: zig test -lc $(pcre2-config --cflags) $(pcre2-config --libs8) re.zig

1610851351
kandinski
kbd: asnwering your question: I'm working on a pcre2 wrapper. Definitely not std-worthy, but maybe contrib-worthy at some point.

1610851389
kbd
very cool. I was wondering what it would take to use pcre from zig.

1610851499
kandinski
I can show you someone using pcre too

1610851518
kandinski
I've decided to wrap pcre2 because I don't want to copy code, I'm trying to learn

1610851751
kandinski


1610851755
kandinski
kbd ^

1610851895
kbd
just import and use 🤯

1610851905
kbd
thanks for the example!

1610851914
kandinski
nw

1610852008
kandinski
kbd: I looked at it briefly, you can just use it if you don't mind writing c-style zig

1610852035
kandinski
I don't know C and I thought this would be a good opportunity to learn about C calling conventions but also write myself a higher level API

1610852119
kbd
good call on the learning project 👍

1610852176
kandinski
I'd be happy to receive any criticism or advice

1610852209
kandinski
(not asking for pull requests yet, because that would preempt the "learning" goal)

1610852247
kandinski
current Yak is to write myself enough of the equivalent of Python's findall() that I can move on with the rest of MAL

1610852272
kandinski
but eventually I guess a pcre2 wrapper would be useful to other Zig users

1610852311
kbd
I don't know C well either, and I'm still learning Zig. In fact I wanted to ask you a basic question -- how does zig find the header&implementation files when you include pcre.h?

1610852336
kandinski
haha

1610852352
kandinski
that's what I've spent 24h finding out, because apparently it changed recently

1610852355
kandinski
so...

1610852358
kbd
haha

1610852369
kandinski
I've still to look at the build script

1610852397
kbd
because I've messed with using c stdlib stuff in zig but I don't know how to use with a library.

1610852397
kandinski
but for running `zig test`, `zig run` etc, just scroll up, just before I answered your question

1610852405
kandinski
and I'm answering mine

1610852414
kandinski
(for search engines to find)

1610852630
kandinski
in fact, maybe someone else can suggest how to add the pcre*-config calls to build.zig so it builds correctly. I have a linkSystemLibrary call, but I'm pretty sure that I want a static linkage, especially given I'm on Nixos

1610859575
sebonirc
hi all! i think ive found a bug in the zig stage 1 compiler. i dont have a github account so if someone else wants to open an issue for it that would be appreciated. code to replicate the bug is here:

1610859593
sebonirc
(i havent tested this on the self-hosted compiler, so i don't know if that's also affected)

1610860144
fengb
Probably this bug:

1610860263
sebonirc
yeah, that bug seems very similar. i think my example still shows some new things, notably the miscompilation and the zig compiler not being able to handle the error (the github issue doesnt have the miscompilation tag)

1610870111
mikdusan1
directly increasing `slice.len += 1` is dangerous, is this a thing the language will continue to permit? (ie. mutation of .len field)

1610873121
sharpobject
hello, I'm trying to use wz which requires me to import hzzp, it seems like I should do this by passing --pkg-begin at the command line, but I'm not sure which file in hzzp is the "root package file"

1610873202
sharpobject
oh, I just messed up and did not check out the right branch of hzzp

1610873216
sharpobject
this seems to work to run wz tests now: zig test main.zig --pkg-begin hzzp ../../hzzp/src/main.zig --pkg-end

1610891464
sharpobject
is there some example of using openssl? currently I am finding that -I/opt/homebrew/Cellar/openssl@1.1/1.1.1i/include successfully includes openssl headers but -L/opt/homebrew/Cellar/openssl@1.1/1.1.1i/lib does not successfully link openssl

1610891599
ifreund
don't know of any yet, there is a BearSSL binding though:

1610891626
ifreund
and an experimental TLS implementation:

1610891645
sharpobject
I mean

1610891682
ugla
I was using openssl without trouble, but not on mac.

1610891708
ugla
Well, there was one (1) issue of macros not being translated, so I had to add some C functions that would just call the macros.

1610891735
ugla
How does linking fail?

1610891773
ifreund
sharpobject: built for me just fine on linux too

1610891790
sharpobject
with the above options, Undefined symbol: /Users/sharpobject/.cache/zig/o/c6c151e8e49487d5ebd3ffa11eaf42e0/main.o: _SSL_read_ex and a dozen other symbols

1610891792
ifreund
just cloned and zig build, no errors for me

1610891806
sharpobject
with -lcrypto -lssl, ld64.lld: error: Unable to find library for -lcrypto

1610891823
ifreund
ok, well that's the problem

1610891847
ifreund
how do you link openssl on macos in a C Makefile for example?

1610892142
sharpobject
ah, it was sufficient to pass -L/opt/homebrew/Cellar/openssl@1.1/1.1.1i/lib -lssl -lcrypto

1610892163
sharpobject
I now must just find a _stderr symbol and then I will be all set (?)

1610892176
ifreund
-lc

1610892196
ifreund
this begs the question why homebrew/macos is like this though, that's ugly

1610892400
sharpobject
that doesn't seem to do it, maybe because my target is not in the list of targets in zig/lib/libc/include

1610892406
sharpobject
not sure!

1610892522
ifreund
could you paste the full error somewhere?

1610892570
sharpobject


1610892622
sharpobject
my line above is speculation based on this issue and the fix to it

1610892803
ifreund
are you using zig master or 0.7? master should have proper libc support for macos

1610892820
sharpobject
master

1610892882
sharpobject
ah yeah it is called aarch64-macos-gnu and it's there

1610893194
mikdusan1
which version of macos is your host

1610893227
sharpobject
macos 11.1

1610893234
mikdusan1
what is the output from `zig targets | grep -A 1 native`

1610893247
sharpobject
"native": {

1610893247
sharpobject
"triple": "aarch64-macos.11.1...11.1-gnu",

1610893304
mikdusan1
`zig version`

1610893332
sharpobject
0.8.0-dev.992+1f65828ec

1610893378
mikdusan1
i thought we forced native linker on big sur?

1610893415
mikdusan1
one of your errors "ld64.lld: error: Unable to find library" i think implies lld linker is used

1610893561
mikdusan1
oh. `export ZIG_SYSTEM_LINKER_HACK=1`

1610893685
ifreund
mikdusan1: yes, I think direct mutation of slice ptr and length fields as well as slicing beyond lenght with foo[0..end] syntax will continue to be supported

1610893705
ifreund
see the current implementation of std.ArrayList, these features are necessary for its nice api

1610893720
sharpobject
thanks! this successfully made it use the system linker, and the system linker pointed out that the use of _stderr was actually in the ssl.zig that I had cribbed from ziget, so I just got rid of it

1610893734
mikdusan1
ifreund: ok there's some ability for us to detect this in comptime. I have a 1 liner that replaces a stage1 assert with decent log message.

1610893766
mikdusan1
sharpobject: see #7715 if you want to do that hack automatically in build.zig

1610893791
sharpobject
I should definitely learn how to use build.zig

1610893799
ifreund
yeah it is fairly easy to cause UB or leak memory if you're not careful when doing these operations on slices

1610893805
mikdusan1
sharpobject: oh n/m then. thought you were already

1610893830
ifreund
but I think doing the operations themselves should always be valid, zig shouldn't get in your way here

1610893839
mikdusan1
ifreund: yeah i get why ArrayList does that. saves passing around a second slice of full capacity to slice from. That's exactly why I was doing it doo.

1610893850
ifreund
slices are just data like any other pointer or struct

1610893944
mikdusan1
ifreund: wiat.. slicing beyond length? that's bounds-checked

1610893962
ifreund
nope

1610893970
ifreund
only for arrays where the lenght is comptime-known

1610894005
mikdusan1
uhm... we do runtime bounds checking in debug/safe

1610894022
ifreund
no we don't, otherwise std.ArrayList wouldn't work

1610894041
ifreund
we only do bounds checks for arrays and slicing arrays, not slicing slices

1610894046
mikdusan1
a bounds check is done on slicing. --> but .len += 1 is not slicing

1610894088
ifreund
mikdusan1:

1610894250
mikdusan1
that should be qualified. .ptr is an unknown number of items.

1610894267
mikdusan1
when you slice a slice, or an array, it is bounds checked

1610894292
ifreund
ah, yeah I see

1610894356
mikdusan1
anyways small point. I think .len manip is ok but this would be safer:  `slice = slice_storage[0..slice.len + 20]` but means u need to have access to slice_storage for the checking to happen

1610894404
ifreund
true, that way you don't dodge the bounds checking

1610896598
sharpobject
I am pleased to announce that I have connected to some websocket API and sent a json blob and received a json blob back

1610896611
sharpobject
that's basically the whole app at this point

1610896675
ifreund
\o/

1610897355
Biolunar
Question: When I do _ = async foo(); that function frame lives on the stack and will vanish when the surrounding block of that statement ends?

1610897367
ifreund
es

1610897372
ifreund
*yes

1610897574
Biolunar
I was confused when I had: var frame = async foo(); and printed out @frame() from inside foo(). Turns out @frame() and &frame are equal in this case.

1610897632
ifreund
that's right yeah

1610897634
Biolunar
I would’ve expected them to have different addresses but that is indeed not true. Optimized

1610897662
ifreund
they can't be different, that wouldn't make any sense

1610897674
ifreund
the memory is only in one place

1610897695
ifreund
usually you want to put your frames on the heap though in real-world use cases

1610897825
Biolunar
I was under the impression that 1st) async foo() creates a function frame and call that function, 2nd) upon suspend or return of foo() that frame will be assigned to whatever is left of that assignment operator

1610897870
Biolunar
Yes, that is one unnecessary step. That’s what I thought

1610897940
ifreund
the frame needs to be stored somewhere before the function can be started

1610897967
Biolunar
Yeah. In hindsight I’m not really sure what I was thinking

1610900641
v0idify
wait so, if the frame disappears before the function the frame represents end that is undefined behaviour no?

1610900653
ifreund
yup

1610900687
v0idify
good to know

1610900696
ifreund
well, only if the function gets resumed or is currently being executed by another thread or something

1610900710
ifreund
if the function is never continued it doesn't matter if the frame is gone

1610900776
koakuma
So, if I run zig build test-behavior it'll print lines like these

1610900776
koakuma
64/997 behavior.async_fn.test "behavior-native-Debug-bare-multi calling an inferred async function"... OK

1610900776
koakuma
How do I find the place(s) where those tests are defined?

1610900816
v0idify
ifreund, so where would the things of the function itself (variables, etc) be stored?

1610900939
ifreund
v0idify: that's what the frame is

1610901002
ifreund
koakuma: those are in test/stage1/behavior

1610901025
koakuma
Thanks!

1610906009
mikdusan
ooh 0.8.0-dev.1000+3562edf13

1610906903
Gliptic
hey, I'm having an issue with the wasm32-freestanding target. "export" functions don't seem to be exported from the .wasm

1610906912
Gliptic
example:

1610906933
Gliptic
tried master and 0.7.1 versions

1610907861
ugla
Gliptic: maybe related to this issue

1610907976
Gliptic
not exactly, that's about exported tables, but maybe it affects that too

1610908144
Gliptic
seems "zig build-lib -target wasm32-freestanding -O ReleaseSmall src/main.zig" works, sort of

1610908159
Gliptic
it seems to not really build it as ReleaseSmall

1610909009
zags
Hey.

1610909020
zags
I agree with some of the concerns about loop syntax there

1610909046
zags
Anything that'll be adressed, or are he/I thinking about it the wrong way?

1610909223
Nypsie[m]
Don't think there will be any further changes to how the while loop works in Zig

1610909294
zags
I see

1610909310
ifreund
The point about the else being required on `while (true)` is a good one, I can't really see any of the other details changing though

1610909340
ifreund
what he should have used there is `else unreachable` though

1610909402
zags
Yeah, I think his main point is that this is a surprising part of the language, I had the same feeling, so was just wondering if any changes were planned

1610909427
fengb
Maybe while(true) can be detected and assume else unreachable?

1610909470
fengb
We probably won’t get sugar for assign/check/iter though

1610909475
Nypsie[m]
It does make it more readable tho. Makes it explicit that it shouldn't be able to be reached and if it does, it's most likely a developer error.

1610909677
zags
Good point. Is this channel bridged with the discord server, or should I join there as well?

1610909710
Nypsie[m]
Nope, it is not bridged, so feel free to join :)

1610909835
ifreund
I just started a discussion of this on the discord since specs_guy is there

1610910243
zags
his user name checks out :D

1610910302
ifreund
It's actually spex_guy but he's earned the other nick :P

1610910349
zags
:D

1610911081
ifreund
dammit, I broke the compiler:

1610911104
Nypsie[m]
Yikes

1610911480
ifreund
have a minimal reproducer for 0.7.1, building master now

1610911870
ifreund


1610912366
datalus
cls

1610912369
datalus
haha, woops

1610912376
datalus
that was for cmd.exe ;)

1610912840
ifreund
now that's a fun crash :D

1610913729
ikskuh
ifreund: did someone miss a zero terminator?

1610913808
Nypsie[m]
Hell yeah have if/else working for wasm backend

1610913827
ikskuh
wooot?!

1610913829
ikskuh
nice work!

1610913831
fengb
Does it generate if/else opcodes?

1610913838
Nypsie[m]
Yes

1610913893
Nypsie[m]
Currently Zig uses the same condBr instruction for both loops and if/else constructs, so I'm playing around and seeing what works best in a generic way

1610913921
Nypsie[m]
Loop instruction exists too tho, but it's just a list of instructions with the first being the condBr

1610913926
fengb
Most compilers seem to ignore if/else and go straight to nested blocks

1610913938
Nypsie[m]
Aaah yeah that was what I had initially

1610913952
Nypsie[m]
But wanted to atleast give this a try and see how it works out

1610913970
Nypsie[m]
Will just use blocks with jumps to block labels

1610914001
Nypsie[m]
As that seems to work for both loops and if/else expressions

1610914490
fengb
How does it work with loops? You can’t jump backwards without a loop opcode

1610914502
Nypsie[m]
It doesn't :P

1610914515
Gliptic
loop is just a block with the label at the start instead of end

1610914537
Nypsie[m]
Hence I'm changing it back to what I had

1610914537
fengb
Right, but wasm doesn’t have arbitrary gotos

1610914554
fengb
>_>

1610914564
fengb
Okay I wasn’t sure I missed something

1610914604
Nypsie[m]
Emit loop opcode, handle condition, at end of body 'break' to loop label

1610914633
Nypsie[m]
Just trying to figure out how it will work with while loops that also have an 'else' branch

1610914642
Nypsie[m]
Hence me playing with if/else opcodes as well

1610914667
Gliptic
need another block that stretches past the else, I imagine

1610914675
Gliptic
which break uses

1610914686
Gliptic
but the loop condition uses the inner block

1610914713
Nypsie[m]
Yeah that's what I had in mind as well

1610914737
Nypsie[m]
Ok makes sense, just have to implement it now xD

1610919676
ifreund
ikskuh: nah just printing stack memory like a boss

1610919684
ifreund
(after returning from the function

1610923183
ikskuh
ifreund: oh, okay

1610923184
ikskuh
:D

1610923309
ifreund
I now have my minimal zero-allocation arg flag parser thing working :)

1610923345
ifreund
I love comptime

1610923353
ikskuh
cool :)

1610923383
ikskuh
how do you do it?

1610923411
ifreund
well, not supporting windows helps :D

1610923444
ifreund
ikskuh: if you're curious:

1610923510
ifreund
oh that second for doesn't need to be inline...

1610923566
ifreund
also using std.cstr annoys me, I use sentinel termintated type pointers cause that's what the OS gives me not because I want to talk to see

1610923570
ifreund
s/see/C/

1610923581
ifreund
std.mem needs a better eql function

1610923688
ifreund
the second for actually does need to be inline unless I use a tagged union in the flags array

1610924661
shachaf
Chet out my flag parser in C:

1610924669
shachaf
It's not quite minimal but I like the API I ended up with.

1610924702
shachaf
I wonder how much that would change in a different language. It certainly felt like C wasn't quite expressive enough for it.

1610924815
ifreund
Mine's a bit more minimal and flexible yeah, looks like a pretty nice API for C though

1610924925
shachaf
Flexible how?

1610924955
shachaf
More comptime things certainly help here.

1610925043
ifreund
doesn't force you to use the classic short/long option conventions for one

1610925055
ifreund
and doesn't do any help/usage text for you

1610925124
shachaf
Ah, sure. I should add a long-only option mode.

1610925174
ifreund
mine doesn't have a way to handle grouping of short options like -odp or whatever

1610925223
shachaf
Right. I just wanted a nicer replacement for getopt.

1610925364
ifreund
I prefer single hyphen long options personally for more featureful CLIs

