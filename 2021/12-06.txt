1638758131
squeek502!~squeek502@user/squeek502
Franciman, an automatically resizing array of structs? std.ArrayList(YourStructType)

1638774047
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: hi. I have prepared the changes on my end for #9439, looking forward for a `linux-x86_64` release I can try it with

1638774278
andrewrk!~andrewrk@mail.ziglang.org
motiejus, nice. I worked on it today but won't have a binary for you to try until tomorrow

1638774385
motiejus!~motiejus@2001:470:69fc:105::38fb
sure, np. let me know once you have it ready

1638774690
andrewrk!~andrewrk@mail.ziglang.org
will do

1638789716
Franciman!~Franciman@mx1.fracta.dev
squeek502: uhm no

1638789722
Franciman!~Franciman@mx1.fracta.dev
sorry, I meant something like this

1638789894
Franciman!~Franciman@mx1.fracta.dev
https://bpa.st/YTZA

1638789910
Franciman!~Franciman@mx1.fracta.dev
https://en.wikipedia.org/wiki/Flexible_array_member

1638790015
squeek502!~squeek502@user/squeek502
Franciman, would a slice not work for that purpose?

1638790067
Franciman!~Franciman@mx1.fracta.dev
I want the memory to be contiguous

1638790084
Franciman!~Franciman@mx1.fracta.dev
i.e. I want both the uint16_t and the elements of the array

1638790087
Franciman!~Franciman@mx1.fracta.dev
to be contiguous in memory

1638790207
squeek502!~squeek502@user/squeek502
ah, don't think there's much that makes that easy in zig

1638790265
Franciman!~Franciman@mx1.fracta.dev
looks like I'll have to manually do it XD

1638790529
Franciman!~Franciman@mx1.fracta.dev
probably I need to manually allocate a chunk of memory

1638790555
Franciman!~Franciman@mx1.fracta.dev
and then do some pointer arithmetic to deallocate it, when I cast it to my struct

1638792117
squeek502!~squeek502@user/squeek502
Franciman, here's a quick/dirty attempt at it: https://zigbin.io/cffe7e (note that I'm not using current zig master, so it's using allocator pointers still)

1638792331
Franciman!~Franciman@mx1.fracta.dev
squeek502: this seems very nice to me, many thanks

1638792451
Franciman!~Franciman@mx1.fracta.dev
I figured I am missing on the concept of alignment

1638792453
Franciman!~Franciman@mx1.fracta.dev
:P

1638792456
Franciman!~Franciman@mx1.fracta.dev
that seems important

1638800096
Franciman!~Franciman@mx1.fracta.dev
I am reading that both pointers and types have an alignment

1638800096
Franciman!~Franciman@mx1.fracta.dev
so uhm, my question is, is the alignment of a pointer *T

1638800096
Franciman!~Franciman@mx1.fracta.dev
related to the alignment info of T ?

1638800381
Franciman!~Franciman@mx1.fracta.dev
no ok, I am lost

1638800405
Franciman!~Franciman@mx1.fracta.dev
ah wait

1638800417
Franciman!~Franciman@mx1.fracta.dev
pointer alignment is important when you do pointer arithmetic, right?

1638800430
Franciman!~Franciman@mx1.fracta.dev
i.e. you have to also consider the alignment of the pointed data, to correctly increment the pointer

1638800433
Franciman!~Franciman@mx1.fracta.dev
to the next location

1638832379
andrewrk!~andrewrk@mail.ziglang.org
huh. we're lacking stat() support in std

1638832440
Franciman!~Franciman@mx1.fracta.dev
*greeting appropriate to your timezone*, is there any news on Zig's SIMD support?

1638832574
andrewrk!~andrewrk@mail.ziglang.org
oh never mind we're not lacking stat() support in std.os, just in std.fs

