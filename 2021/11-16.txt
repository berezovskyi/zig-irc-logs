1637022087
andrewrk!~andrewrk@mail.ziglang.org
marler8997, are you satisfied with https://github.com/ziglang/zig/issues/7948#issuecomment-968594277 as the long term solution to the format problem that you addressed in #8839 and #8846? If so, mind if I close those PRs?

1637022101
andrewrk!~andrewrk@mail.ziglang.org
or do you think one of them would be a good short-term workaround?

1637025236
marler8997!~marler899@204.229.3.4
andrewrk I have a few thoughts 1) I'm not sure how idea 1 solves the fmt problem 2) I see how Idea 2 solves the fmt problem but it's a big change and I'm not sure what all the consequences are.  3) These solutions don't seem to address the general problem for every function that takes comptime s: []const u8. If we found a solution to the general problem then it would also solve the current fmt problem, but maybe you have some insight on a general 

1637025236
marler8997!~marler899@204.229.3.4
solution? For example #9056 should probably be considered 

1637025376
marler8997!~marler899@204.229.3.4
Actually Idea 2 may not solve the problem either (not sure actually).  The problem is with the format string, not the format arguments

1637040708
dcx!~dcx@user/dac
Hey, I'm leaning zig and I have a quick question. How do you read command line arguments?

1637041217
dcx!~dcx@user/dac
Oh I see, you use std.process.args except the allocator is only really used if you're on windows? I guess I can just use os.argv then

1637043453
andrewrk!~andrewrk@mail.ziglang.org
dch, std.process.argsAlloc

1637043458
andrewrk!~andrewrk@mail.ziglang.org
oops, I meant dcx ^

1637043469
andrewrk!~andrewrk@mail.ziglang.org
search the zig repo for that. there are a lot of examples

1637043821
dcx!~dcx@user/dac
andrewrk: thanks! :) 

1637069487
forgot-password!~forgot-pa@i59F4D66D.versanet.de
What's the proper way to compile Zig to wasm? I always get a "bad magic value" error. I recall that it worked by just specifying 'wasm32-freestanding' as the target and building as a static library

1637069865
ikskuh!~xq@v43666.php-friends.de
build a shared library

1637069869
ikskuh!~xq@v43666.php-friends.de
static libs are object files

1637070026
forgot-password!~forgot-pa@i59F4D66D.versanet.de
Oh nice, that worked. Thank you! :)

1637076652
ikskuh!~xq@v43666.php-friends.de
you're welcome

1637079427
dcx!~dcx@user/dac
Is there any way to see the code that's outputted from comptime code execution? Like can I see what the unrolled inline for loop looks like or is that all just inside the compiler?

1637079472
ifreund!~ifreund@user/ifreund
not currently, unless you're good at reading llvm IR or asm

1637079514
ifreund!~ifreund@user/ifreund
I believe this is something we plan to address long term with the stage2 compiler

1637079568
dcx!~dcx@user/dac
That would be pretty cool

1637079599
dcx!~dcx@user/dac
How does it work currently? Is there like an interpreter inside the compiler?

1637080494
ifreund!~ifreund@user/ifreund
dcx: yeah, pretty much. The proper mental model for inline loops would be manually repeating the loop body N times with the loop variables updated for each repetiton

1637101464
freshcoffee!~fresh@user/freshcoffee
dammit. I set drone pipeline_max=8 and set max_procs=4 ... I thought max_procs was per-pipeline. it's not. so right now this is effectively limiting use to 4 concurrent steps.

1637101602
freshcoffee!~fresh@user/freshcoffee
next time I see zinc idle, I'll restart drone-runner-docker

1637101676
freshcoffee!~fresh@user/freshcoffee
yeah their docs are wrong: https://docs.drone.io/runner/docker/configuration/reference/drone-runner-max-procs/

1637102003
freshcoffee!~fresh@user/freshcoffee
side note: ifyou see a build cancelled at "2:00:00", I believe that will go away when I bounce drone-runner-docker

1637102075
freshcoffee!~fresh@user/freshcoffee
right if > 4  steps globally, they start the 2-hour timer while WAITING. so nuking max_procs limit also fixes that.

1637102085
freshcoffee!~fresh@user/freshcoffee
*right now

1637106182
andrewrk!~andrewrk@mail.ziglang.org
noted

