1638669199
ifreund!~ifreund@user/ifreund
https://www.ralfj.de/blog/2021/11/24/ub-necessary.html

1638669779
_javyre!~javyre@2001:470:69fc:105::2162
Is it normal to get "cannot assign to constant" compile error when doing `const t = T{ .A = .{ .x = 1 } };` where `const T = union(enum) { A: struct { comptime y: u32 = 0, x: u32 } };`?

1638669798
_javyre!~javyre@2001:470:69fc:105::2162
The compiler doesn't like this because of the comptime field.

1638675005
_javyre!~javyre@2001:470:69fc:105::2162
hmm if I do `const a = .{.x=1}; const t = T{ .A = a };` it compiles but segfaults at runtime..

1638676356
_javyre!~javyre@2001:470:69fc:105::2162
I'm not sure if the segfault occurs in my contrived example, but here it is in godbolt: https://godbolt.org/z/n4h57b77W At this point I'm pretty convinced this is a bug, just not sure what the intended behaviour is.. My use of comptime for a struct field might be nonsensical since default values are comptime known anyways, but I need it to be declared like this so that the std.json.parse() properly uses the field to discriminate between union members:

1638676356
_javyre!~javyre@2001:470:69fc:105::2162
https://github.com/ziglang/zig/blob/master/lib/std/json.zig#L1768

1638676808
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, I noticed that the on_master_success script on ci.ziglang.org isn't getting passed the VERSION or SRHT_OAUTH_TOKEN

1638676886
andrewrk!~andrewrk@mail.ziglang.org
err it's just VERSION that is the problem

1638679345
freshcoffee!~fresh@user/freshcoffee
ah ok let me look into it. might have happened when I split the scripts.

1638679645
freshcoffee!~fresh@user/freshcoffee
andrewrk: yeah it's a one-liner to fix. will make a PR but it can only be tested on master.

1638680316
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, nice, thanks!

1638687405
Arnavion!arnavion@user/arnavion
Is @bitSizeOf([N]T) supposed to naively return N * @bitSizeOf(T) ? Eg @bitSizeOf([1000]u2) is 2000, which is neither what it would be if it were unpacked (8000) nor if it were packed (250). And the assembly (release-safe on x86_64) indicates it's unpacked

1638689859
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Can I do switch on a string (u8) value somehow?

1638689878
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Or with enum?

1638689974
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
I mean, if I have a direction as string, and I want to do different things depending on the string on a switch expression, how should I do it?

1638690346
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Or how can I map the string to an enum value easily?

1638690404
freshcoffee!~fresh@user/freshcoffee
oh dang.

1638690491
freshcoffee!~fresh@user/freshcoffee
the packing step just happened to move "RELEASE_STAGING" to basename for tarball.

1638690524
freshcoffee!~fresh@user/freshcoffee
this is why I prefer depending-on *and* using gnutar and renaming the basedir . oh well.

1638691826
freshcoffee!~fresh@user/freshcoffee
andrewrk: sorry for mess up. this stuff is so touchy. https://github.com/ziglang/zig/pull/10273

1638712965
Franciman!~Franciman@mx1.fracta.dev
writing the GC in zig is a real pleasure

1638712975
Franciman!~Franciman@mx1.fracta.dev
looks like I'm writing high level low level code

1638712978
Franciman!~Franciman@mx1.fracta.dev
is this even possible?

1638712982
Franciman!~Franciman@mx1.fracta.dev
:')

1638715022
ikskuh!~xq@v43666.php-friends.de
Franciman: Yes, zig allows that :)

1638723629
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
Hi. I'm kind of new to Zig. However, I noticed the `ziglang/zig` repo CI tests take about 1 and 3/8 hours, which seems quite excessive to me. Has anyone thought of running groups of tests concurrently?

1638724026
ikskuh!~xq@v43666.php-friends.de
they are already run concurrently for some parts

1638724053
ikskuh!~xq@v43666.php-friends.de
(at least one per OS)

1638736002
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Hi! I am wondering why this gives an error "expected [12]u32 literal, found [1]u32" (I have bitWidth defined in the file scope): var bits = [bitWidth]u2{0} ** bitWidth;

1638736024
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Why it won't repeat the literal, even though bitWidth should be comptime?

1638736170
ifreund!~ifreund@user/ifreund
peterhil_: to fix that error you want `var bits = [1]u2{0} ** bitWidth;`

1638736214
ifreund!~ifreund@user/ifreund
if you do [bitWidth]u8{0, 0, ... 0} you need to have bitWidth 0s inside the {}

1638736531
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
ifreund: I need 12 values, so bitwidth should be 12. But shouldn't the ** operator repeat the zero value?

1638736563
ifreund!~ifreund@user/ifreund
peterhil_: the ** operator repeats the array of length 1

1638736577
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Ah, I see.

1638736634
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Thanks! Now I get forward on advent of code day 3! :-)

1638736863
ifreund!~ifreund@user/ifreund
no problem!

1638736921
mla!~mla@162.253.176.229
a mixture between a hashmap and a doubly linked list - anyone done something like this in zig?

1638736927
mla!~mla@162.253.176.229
i need to be able to insert at tail/head and also arbitarily delete/lookup items by key

1638737123
mla!~mla@162.253.176.229
heres my design idea atm: http://ix.io/3H7N

1638737175
mla!~mla@162.253.176.229
if arrayhashmap had putTail/putHead thatd be all id need

1638737199
mla!~mla@162.253.176.229
seems like alot of abstraction in my current plan :/

1638737300
ifreund!~ifreund@user/ifreund
mla: you could store the items directly in your doubly linked list and store pointers to the list nodes in the hash map

1638737313
ifreund!~ifreund@user/ifreund
I don't see any need for a 3rd data structure

1638737340
ifreund!~ifreund@user/ifreund
do you really need pointer stability though? If not a linked list probably isn't the best choice

1638737373
ifreund!~ifreund@user/ifreund
a hash map of u32 indexes into a linear buffer would be faster

1638737420
ifreund!~ifreund@user/ifreund
*probably, that depends on your usage of course

1638737463
mla!~mla@162.253.176.229
i guess i need ptr stability since data itself on heap; i wonder if i can just do arraylist + ahm

1638737483
mla!~mla@162.253.176.229
can i pop/push on tail & head with arraylist

1638737534
ifreund!~ifreund@user/ifreund
why store the data separately from your linked list nodes?

1638737753
mla!~mla@162.253.176.229
zig TailQueue only stores ptr data / doesnt take allocator, so data has to live somewhere i guess

1638737767
mla!~mla@162.253.176.229
i suppose data could just live in ahm

1638737775
mla!~mla@162.253.176.229
so i do ahm + tailqueue

1638737935
ifreund!~ifreund@user/ifreund
mla: std.TailQueue can store any arbitrary type as data, not just pointers

1638737976
ifreund!~ifreund@user/ifreund
the user is responsible for allocating their own nodes

1638738097
mla!~mla@162.253.176.229
ifreund: i see, thanks for the help; ill play around w it, first time using tailq

1638738450
andrewrk!~andrewrk@mail.ziglang.org
Supermath101, I think you may be underestimating just how many different combinations are being tested

1638738514
andrewrk!~andrewrk@mail.ziglang.org
regardless, here's a related issue: https://github.com/ziglang/zig/issues/331

1638738684
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
andrekrk: What exactly is tested that takes over an hour, within the link I sent earlier?

1638739016
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
andrewrk, Is there anywhere I can read up on the CI server setup you have? I see you use multiple providers, it seems.

1638739141
andrewrk!~andrewrk@mail.ziglang.org
Supermath101, {4 optimization modes x 9 CPU architectures x {no-libc, musl, glibc} x {behavior tests, std lib tests, compiler-rt tests}} + {test-stage2,test-fmt,test-minilibc,test-compare-output,test-standalone,test-stack-traces,test-cli,test-asm-link,test-runtime-safety,test-translate-c ,test-run-translated-c}

1638739171
andrewrk!~andrewrk@mail.ziglang.org
there is nowhere you can read, you would just have to look inside the ci/ directory

1638739184
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
Ok

1638739301
andrewrk!~andrewrk@mail.ziglang.org
the CI tests a lot of things so that maintainers can have confidence merging pull requests. contributors are expected to run a subset of the tests locally before submitting a pull request. depending on what you are working on, the subset will run much quicker. for example if you are editing the standard library, then you only need to run the std lib tests for the affected OS's, which takes about 30 seconds

1638739395
andrewrk!~andrewrk@mail.ziglang.org
also most free CI provides only provide 2 cores

1638740799
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
andrewrk, Have you considered applying to https://metal.equinix.com/ecosystem/oss/ ? This is a company that seems to have provided CI servers to many other programming languages.

1638740917
andrewrk!~andrewrk@mail.ziglang.org
looks like x86_64 only. not useful to us since we recently started renting a beefy hetzner x86_64 machine 

1638740927
andrewrk!~andrewrk@mail.ziglang.org
we need arm64 and macos

1638740979
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
andrewrk, It looks like they do offer ARM (at least to general customers): https://metal.equinix.com/product/servers/c3-large-arm/

1638741027
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
For Mac OS, idk though...

1638741038
andrewrk!~andrewrk@mail.ziglang.org
that looks good, I will look into this. thank you for sending it my way

1638741049
Franciman!~Franciman@mx1.fracta.dev
i can offer a rotten mac os, with an intel core duo

1638741050
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
You're welcome.

1638741053
Franciman!~Franciman@mx1.fracta.dev
and hdd

1638741069
Franciman!~Franciman@mx1.fracta.dev
totally devoted to CI

1638742832
andrewrk!~andrewrk@mail.ziglang.org
new UI on https://ziglang.org/perf/ - check it out

1638742922
Franciman!~Franciman@mx1.fracta.dev
niz

1638743049
earnest!~earnest@user/earnestly
andrewrk: Mouseover tooltip can extend beyond the bottom of the browser view

1638743076
andrewrk!~andrewrk@mail.ziglang.org
I noticed that too

1638743141
Franciman!~Franciman@mx1.fracta.dev
so uhm, i li'l quetion about allocators

1638743183
Franciman!~Franciman@mx1.fracta.dev
ah I saw you updated its definition

1638743186
Franciman!~Franciman@mx1.fracta.dev
sultry

1638743235
Franciman!~Franciman@mx1.fracta.dev
when I define an allocator, am I expected to define all the three of

1638743239
Franciman!~Franciman@mx1.fracta.dev
alloc, realloc, free?

1638743246
Franciman!~Franciman@mx1.fracta.dev
for example for my allocator, free is a no-op

1638743261
Franciman!~Franciman@mx1.fracta.dev
and realloc is uhm, troubling?

1638743367
Franciman!~Franciman@mx1.fracta.dev
ah I could make it always fail

1638743367
Franciman!~Franciman@mx1.fracta.dev
but I would this impact on the stdlib containers?

1638743414
shachaf!~shachaf@user/shachaf
Why make it always fail?

1638743437
companion_cube!~simon@user/companion-cube
what happened on nov 30th? allocgate?

1638743439
shachaf!~shachaf@user/shachaf
You can presumably just allocate new memory of a bigger size and copy the data to it.

1638743451
Franciman!~Franciman@mx1.fracta.dev
but I must also dealloc it

1638743458
Franciman!~Franciman@mx1.fracta.dev
I am writing a GC

1638743460
Franciman!~Franciman@mx1.fracta.dev
for my language

1638743462
shachaf!~shachaf@user/shachaf
But you already have an implementation of free.

1638743463
Franciman!~Franciman@mx1.fracta.dev
(this is the backstory)

1638743478
andrewrk!~andrewrk@mail.ziglang.org
companion_cube, yes including a little bug in GeneralPurposeAllocator that made it never free any memory

1638743489
andrewrk!~andrewrk@mail.ziglang.org
which was immediately caught by this new perf tracking system

1638743494
Franciman!~Franciman@mx1.fracta.dev
\o/

1638743499
Franciman!~Franciman@mx1.fracta.dev
i need to think more about this

1638743501
Franciman!~Franciman@mx1.fracta.dev
thanks shachaf 

1638743544
companion_cube!~simon@user/companion-cube
yeah there's a spike in memory use :D

1638743549
companion_cube!~simon@user/companion-cube
pretty nice

1638743555
shachaf!~shachaf@user/shachaf
I mean, if your allocator works this way, things that try to use realloc might behave pretty badly. But I think it should at least be "correct".

1638743602
Franciman!~Franciman@mx1.fracta.dev
shachaf: uhm I mean, I don't need realloc lol

1638743616
Franciman!~Franciman@mx1.fracta.dev
basically I wanted, in order to implement closures

1638743689
Franciman!~Franciman@mx1.fracta.dev
to store an std.HashMap in the closure

1638743689
Franciman!~Franciman@mx1.fracta.dev
containing the captured variables

1638743689
Franciman!~Franciman@mx1.fracta.dev
so that's the only part in which zig std lib kicks in

1638743723
Franciman!~Franciman@mx1.fracta.dev
and could possibly realloc

1638743875
Franciman!~Franciman@mx1.fracta.dev
I'll investigate the Unmanaged HashMap impl

1638744629
powerofzero!c2b6947721@2604:bf00:561:2000::225
In `Stage1AirBasicBlock`, is `llvm_block` supposed to be a nullable pointer for lazy computation, or it supposed to be always non-null. If it is nullable, what is the method to cause it to be generated?

1638744744
andrewrk!~andrewrk@mail.ziglang.org
powerofzero, non-nullable, created in ir.cpp

1638744799
Franciman!~Franciman@mx1.fracta.dev
sorry pops, a [*]T is like []T except it doesn't store the array len, right?

1638744822
powerofzero!c2b6947721@2604:bf00:561:2000::225
andrewrk: thanks

1638744834
andrewrk!~andrewrk@mail.ziglang.org
Franciman, https://ziglang.org/documentation/master/#Pointers

1638744845
Franciman!~Franciman@mx1.fracta.dev
many thanks 

1638744863
Franciman!~Franciman@mx1.fracta.dev
I need to save every bit

1638744864
Franciman!~Franciman@mx1.fracta.dev
holy hell

1638744891
andrewrk!~andrewrk@mail.ziglang.org
have you been working without the language reference this whole time? lol

1638744926
Franciman!~Franciman@mx1.fracta.dev
ACTION is dumb

1638745101
Franciman!~Franciman@mx1.fracta.dev
pro tip, never code your programming language, while your father is watching a soft-porn movie in the same room

1638745118
andrewrk!~andrewrk@mail.ziglang.org
let's keep it on topic in here please

1638745127
Franciman!~Franciman@mx1.fracta.dev
sorry

1638745132
Franciman!~Franciman@mx1.fracta.dev
??T.T

1638746547
Franciman!~Franciman@mx1.fracta.dev
does zig have anything like flexible array element of a struct?

