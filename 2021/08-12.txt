1628735691
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thank you squeek502 

1628735701
squeek502!~squeek502@user/squeek502
np :)

1628738711
cot!~kiedtl@kisslinux/kiedtl
Is there any way to modify a global const at comptime without making it a 'var'

1628738714
cot!~kiedtl@kisslinux/kiedtl
?

1628738994
cot!~kiedtl@kisslinux/kiedtl
Reason I'm asking is because that global constant needs to appear in another global constant slice, and the compiler starts whining because I'm putting a variable into a constant slice(?)

1628754974
ikskuh!~xq@2a0d:5940:6:163::ad7e
cot: what exactly is the error message?

1628754979
ikskuh!~xq@2a0d:5940:6:163::ad7e
and why do you need to mutate a global?

1628758380
discipulus!~discipulu@user/discipulus
In an error union type, what kind of types are allowed after the exclamation mark?

1628758439
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes.

1628758443
ikskuh!~xq@2a0d:5940:6:163::ad7e
all of them

1628758462
ikskuh!~xq@2a0d:5940:6:163::ad7e
(at least to my knowledge)

1628758462
ifreund!~ifreund@user/ifreund
well, I wouldn't recommend trying to use another error set or error union

1628758664
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah yeah, i think nesting error types is allowed in theory, but is not practical to use

1628758778
discipulus!~discipulu@user/discipulus
ikskuh, exactly what I've learned. It's possible to create but not use. For example: fn what(x: i32) error{ Barf, FileNotFound }!error{ Beep, Boop }!BeepBoop {...}

1628758796
ikskuh!~xq@2a0d:5940:6:163::ad7e
that looks wild :D

1628758805
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you need this, just nest it into structs :)

1628758822
discipulus!~discipulu@user/discipulus
Can't return error.Beep or error.Boop. If you need it, I think you would just union them instead.

1628758846
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, usually you just union them instead of nesting them

1628758855
ikskuh!~xq@2a0d:5940:6:163::ad7e
otherwise, the semantics are also very unclear

1628758861
ikskuh!~xq@2a0d:5940:6:163::ad7e
"why is a error returned in the case of success?"

1628758962
dutchie!~dutchie@user/dutchie
ðŸ“Ž are you abusing language features to fake sum types

1628758988
dutchie!~dutchie@user/dutchie
seems especially perverse when you have enum/union(enum)

1628759270
discipulus!~discipulu@user/discipulus
Has there been any discussion to restrict the type after the exclamation mark, sometime in the future? Is the type after ! called a "payload"?

1628759512
discipulus!~discipulu@user/discipulus
s/just union them/just merge them/

1628760244
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh no, it looks like libc for {arm,thumb}-linux degraded :(

1628760460
discipulus!~discipulu@user/discipulus
Is the ! in an error union type an operator or syntax?

1628760508
ikskuh!~xq@2a0d:5940:6:163::ad7e
should be a operator

1628760525
ikskuh!~xq@2a0d:5940:6:163::ad7e
not sure though

1628760652
ikskuh!~xq@2a0d:5940:6:163::ad7e
definitly operator

1628760652
ikskuh!~xq@2a0d:5940:6:163::ad7e
pub fn main() (blk: { break :blk error{A}; })!(blk: { break :blk u8; })

1628760655
ikskuh!~xq@2a0d:5940:6:163::ad7e
ugh :D

1628761362
discipulus!~discipulu@user/discipulus
What is the order of operations? error{A}!error{B}!error{C}!u8

1628762666
ikskuh!~xq@2a0d:5940:6:163::ad7e
discipulus: afaik just left-to-right

1628762679
ikskuh!~xq@2a0d:5940:6:163::ad7e
so error{A}!(error{B}!(error{C}!u8))

1628762683
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i still wonder: why do this?

1628766396
discipulus!~discipulu@user/discipulus
ikskuh: thank you

1628766435
ikskuh!~xq@2a0d:5940:6:163::ad7e
discipulus: what do you want to achieve here?

1628766843
discipulus!~discipulu@user/discipulus
I'm updating langref

1628768771
daurnimator!~daurnimat@vultr.daurnimator.com
discipulus: can you write: `const a: error{C} = error.C; return a;`?

1628769864
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
why not

1628770483
discipulus!~discipulu@user/discipulus
I got a compilation error. Is that expected?

1628779362
marler8997!~marler899@204.229.3.4
will Zig be adding a C frontend to the self-hosted compiler?

1628790215
andrewrk!~andrewrk@mail.ziglang.org
marler8997, maybe! it's definitely not a priority

1628790233
andrewrk!~andrewrk@mail.ziglang.org
but if Vexu wants to look into upstreaming https://github.com/Vexu/arocc I would be cooperative

1628790267
ikskuh!~xq@2a0d:5940:6:163::ad7e
it would be very sweet to have that

1628790747
andrewrk!~andrewrk@mail.ziglang.org
I think his main goal is translate-c/@cImport without depending on clang

1628791472
ikskuh!~xq@2a0d:5940:6:163::ad7e
would be sweet already :)

1628800785
ifreund!~ifreund@user/ifreund
zig got a nice shoutout in the defer section of this page: https://sentido-labs.com/en/library/cedro/202106171400/

1628806042
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Is there a way to import files relative to the root of the project instead of relative to the folder a file is in?

