1633565028
andrewrk!~andrewrk@mail.ziglang.org
I should update `zig env` to also print the list of environment variables that will have any effect

1633567950
andrewrk!~andrewrk@mail.ziglang.org
I enabled issue templates on the github repo

1633568426
haze!~haze@2603-7000-a300-1741-a983-c2ed-7c90-0da5.res6.spectrum.com
sweet!

1633570014
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ooh, no proposals

1633570016
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
spicy

1633580248
tgschultz!UserNick@047-034-058-084.res.spectrum.com
andrewrk: re: 9907 "The CI failure is zig fmt related". Is there a way to make zig fmt be more specific about this? I could have sworn I ran zig fmt on packed_array.zig before commit so I'm not sure what the issue is.

1633580332
freshcoffee1!~fresh@user/freshcoffee
in a checkout, run zig fmt on packed_array.zig and git diff 

1633580569
tgschultz!UserNick@047-034-058-084.res.spectrum.com
ok, well I ran zig fmt again and re pushed. seems it didn't like no-newline at end of file? pedantic little squirt. Anyway, hopefully that satisfies ci.

1633580574
tgschultz!UserNick@047-034-058-084.res.spectrum.com
thanks freshcoffee

1633608180
tintin!~tinh@165.22.70.115.static.exetel.com.au
hi all, I am trying to test a function which may return error in zig test, I already unwrap the call with `try`, but the compile keep complain `error: error is ignored. consider using `try`, `catch`, or `if``, here is the code https://pastebin.com/Pa46SJCp. Any help is appreciated

1633608712
ifreund!~ifreund@user/ifreund
tintin: expectEqualStrings() may return an error as well

1633608809
tintin!~tinh@165.22.70.115.static.exetel.com.au
ifreund, right! I must be blind. Thanks

1633608834
ifreund!~ifreund@user/ifreund
no problem!

1633609506
tintin!~tinh@165.22.70.115.static.exetel.com.au
my production code import a C library and runs fine with `zig build run` but fails to compile with `zig test` with `error: C import failed`. From my understanding, the build.zig only setup things for building artifacts/binary but not for test and the main documentation does not mention much about test dependencies. 

1633609608
tintin!~tinh@165.22.70.115.static.exetel.com.au
does anyone have an example to do that?

1633609652
ifreund!~ifreund@user/ifreund
tintin: you need to link the library for your test step as well, the same way you do for the step to build your normal executable

1633610562
tintin!~tinh@165.22.70.115.static.exetel.com.au
ifreund, OK, I am looking at the build.zig of the ziglang itself. It's a little bit complicated

1633610597
ifreund!~ifreund@user/ifreund
tintin: river's is a bit simpler: https://github.com/ifreund/river/blob/3b24e7fcd5abae2fbea8dfcfaf1da955f7a3b95c/build.zig#L165-L175

1633610679
tintin!~tinh@165.22.70.115.static.exetel.com.au
ifreund, thanks. Digging in...

1633611054
discipulus!~discipulu@user/discipulus
when using a test step in build.zig, you'll to run `zig build test` rather than `zig test a.zig`

1633611407
tintin!~tinh@165.22.70.115.static.exetel.com.au
discipulus, thanks. I am getting there....

1633611835
tintin!~tinh@165.22.70.115.static.exetel.com.au
the build.zig now compiles, but I've got unreachable error when `zig build test`. Here is the build.zig file https://pastebin.com/ZxgBKaxA . Sorry for a lot of questions. I am very new to zig

1633611956
ifreund!~ifreund@user/ifreund
tintin: you don't need a run step for tests, you can drop lines 35 and 38-40

1633611972
ifreund!~ifreund@user/ifreund
and 37 should use `t` instead of `run_test`

1633612164
tintin!~tinh@165.22.70.115.static.exetel.com.au
ifreund, thanks alot! It works now.

1633612179
ifreund!~ifreund@user/ifreund
:)

1633612515
tintin!~tinh@165.22.70.115.static.exetel.com.au
hmm, the test output is a little confusing when: `1 tests leaked memory.` Does it mean my production code have a mem leak or the test code have mem leak?

1633612586
Gliptic!~glip@irc.glip.cc
test code presumably calls production code?

1633612589
Gliptic!~glip@irc.glip.cc
so how would it know

1633612613
tintin!~tinh@165.22.70.115.static.exetel.com.au
Gliptic, good point!

1633613081
tintin!~tinh@165.22.70.115.static.exetel.com.au
the prod code use the ArenaAllocator like this `var arena = std.heap.ArenaAllocator.init(std.heap.c_allocator);` and the defer

1633613104
tintin!~tinh@165.22.70.115.static.exetel.com.au
the official doc at https://ziglang.org/documentation/0.8.1/#Choosing-an-Allocator saying that should be enough

1633613177
Gliptic!~glip@irc.glip.cc
and it uses only that arena allocator for everything?

1633613177
tintin!~tinh@165.22.70.115.static.exetel.com.au
but the test code using the std.testing.allocator and it does not have the `deinit` method. Is it the problem?

1633613210
tintin!~tinh@165.22.70.115.static.exetel.com.au
Gliptic, yes, the prod code only use one ArenaAllocator for everything.

1633613297
Gliptic!~glip@irc.glip.cc
how is the test code using std.testing.allocator, is it freeing the memory allocated from it?

1633613399
tintin!~tinh@165.22.70.115.static.exetel.com.au
all of the allocation is via std.ArrayList(sometype).init(allocator) and then append item to the arraylist

1633613407
tintin!~tinh@165.22.70.115.static.exetel.com.au
how do it free the test allocator? it does not have the deinit() method

1633613460
Gliptic!~glip@irc.glip.cc
you need to deinit the arraylist so that it can free its memory

1633613498
Gliptic!~glip@irc.glip.cc
when using ArenaAllocator, you can get away with not doing that since the deinit on the whole allocator will free all of the memory, but other allocators don't work like that

1633613562
tintin!~tinh@165.22.70.115.static.exetel.com.au
Gliptic, does it mean that I have to change my prod code to use the std.testing.allocator?

1633613576
Gliptic!~glip@irc.glip.cc
no

1633613586
tintin!~tinh@165.22.70.115.static.exetel.com.au
sorry, I did not make it clear

1633613614
Gliptic!~glip@irc.glip.cc
if the prod code is using ArenaAllocator, and calling deinit on it, the prod code shouldn't be the issue

1633613704
tintin!~tinh@165.22.70.115.static.exetel.com.au
What I meant is my prod code still takes in the ArenaAllocator as the only allocator, but to make the test code leak free, I need to change the prod code (like manually deinit the arraylist...)?

1633613742
Gliptic!~glip@irc.glip.cc
as I said, no, if you call .deinit on that ArenaAllocator, it should free all the memory allocated by that ArenaAllocator

1633613751
Gliptic!~glip@irc.glip.cc
but you were using std.testing.allocator too, no?

1633613820
tintin!~tinh@165.22.70.115.static.exetel.com.au
Gliptic, here is the function signature of the prod code: `pub fn parse(filePath: [:0]const u8, allocator: *std.mem.Allocator) XMLParsingError!Repository`

1633613832
Gliptic!~glip@irc.glip.cc
and allocator is passed what?

1633613854
Gliptic!~glip@irc.glip.cc
maybe you should show the code

1633613952
tintin!~tinh@165.22.70.115.static.exetel.com.au
this is how I use it in prod code https://pastebin.com/tBVP1vqV and here is how my test code look like https://pastebin.com/JeFf9FAB

1633613981
Gliptic!~glip@irc.glip.cc
yeah, so you _don't_ always use ArenaAllocator in the production code

1633613994
Gliptic!~glip@irc.glip.cc
parse will use the allocator passed in

1633614067
Gliptic!~glip@irc.glip.cc
if parse expects you to pass an ArenaAllocator, why not make the parameter an *std.heap.ArenaAllocator ?

1633614100
Gliptic!~glip@irc.glip.cc
because if it doesn't know what allocator is passed it, it has to free the memory it allocates

1633614130
Gliptic!~glip@irc.glip.cc
only if it's an ArenaAllocator can it get away with not freeing each memory block allocated

1633614135
tintin!~tinh@165.22.70.115.static.exetel.com.au
Gliptic, I can change to that, but how can I detect mem leak in test? the doc say I should use std.testing.allocator to detect mem leak

1633614169
Gliptic!~glip@irc.glip.cc
tintin, you create an std.heap.ArenaAllocator passing in std.testing.allocator

1633614181
ifreund!~ifreund@user/ifreund
tintin: use the testing allocator, create an arena backed by the testing allocator

1633614197
ifreund!~ifreund@user/ifreund
deinit the testing allocator at the end of the test

1633614208
ifreund!~ifreund@user/ifreund
and deinit the arena as well

1633614258
tintin!~tinh@165.22.70.115.static.exetel.com.au
right.

1633614262
tintin!~tinh@165.22.70.115.static.exetel.com.au
let me give it a go

1633614388
tintin!~tinh@165.22.70.115.static.exetel.com.au
ifreund, Gliptic: it works! Thanks a lot! 

1633614942
tintin!~tinh@165.22.70.115.static.exetel.com.au
Gliptic, now I get why you suggest to pass in the ArenaAllocator :) 

1633615568
tgschultz!UserNick@047-034-058-084.res.spectrum.com
when running `zig test` with a non-native target, is there a way to tell it to use qemu or do I have to do that manually with the cached binary?

1633615668
ifreund!~ifreund@user/ifreund
tgschultz: with a raw `zig test` there is no way to tell it to use qemu, you can implement a `-Denable-qemu` option in the build.zig though, see zig's build.zig

1633615743
tgschultz!UserNick@047-034-058-084.res.spectrum.com
actually I don't think that's accurate after digging through the build logs. there's --test-cmd

1633615779
ifreund!~ifreund@user/ifreund
ah nice, good find

1633616612
tgschultz!UserNick@047-034-058-084.res.spectrum.com
oh interesting. @bitCast of a struct to an int on big endian doesn't do what I expect. It actually reverses the bits.

1633616643
tgschultz!UserNick@047-034-058-084.res.spectrum.com
though my brain is really foggy right now so I'm not sure that's me not thinking things through or a bug.

1633616925
tgschultz!UserNick@047-034-058-084.res.spectrum.com
ptrcast has the same behavior so this must be an error in my thinking

1633616980
tgschultz!UserNick@047-034-058-084.res.spectrum.com
....maybe

1633618530
tgschultz!UserNick@047-034-058-084.res.spectrum.com
ok, I'm thinking this has to be some kind of compiler bug because I can change the result of previous accesses by accessing with a ptrCast later in the code. wild.

1633618605
Gliptic!~glip@irc.glip.cc
reverses the bits and not the bytes?

1633618657
Gliptic!~glip@irc.glip.cc
you might be invoking undefined behaviour

1633618683
tgschultz!UserNick@047-034-058-084.res.spectrum.com
possibly. I'm trying to put together a minimal case.

1633618931
tgschultz!UserNick@047-034-058-084.res.spectrum.com
but this is still weird. a `packed struct {u3, u2}` with values `.{6,1}` as seen by `std.mem.asBytes` is 0b11001000, but if I later access that same memory with a specific ptrCast, not only does the access have a different value, the *previous* access using std.mem.asBytes changes to be 0b00011000. 

1633621106
tgschultz!UserNick@047-034-058-084.res.spectrum.com
9912 has exmaple code

1633621745
tgschultz!UserNick@047-034-058-084.res.spectrum.com
aside from that, I think @bitCast of packed structs is just plain broken on big endian, but maybe I'm thinking about it wrong. If I have a packed struct S, @bitCast it to an int, then @bitCast that int back to an S the two S instances do not match.

1633621842
ifreund!~ifreund@user/ifreund
yep, that seems pretty broken

1633624075
ifreund!~ifreund@user/ifreund
hmm, we don't actually have any robust way to match C's rules for the ABI of enums do we?

1633624280
tgschultz!UserNick@047-034-058-084.res.spectrum.com
extern enum?

1633624308
ifreund!~ifreund@user/ifreund
tgschultz: been removed on master, and I'm not sure that actually did anything more than use a c_int for the ABI

1633624334
ifreund!~ifreund@user/ifreund
apparently C implementations may use an unsigned int or even a long int if the values don't fit inside a normal int

1633624440
ifreund!~ifreund@user/ifreund
perhaps just using namespaced constants really is the way to go...

1633624474
ifreund!~ifreund@user/ifreund
but having a type for function signatures/struct fields is nice

1633628593
tgschultz!UserNick@047-034-058-084.res.spectrum.com
after some investigation, @bitCast is definitely inconsistent on big endian.

1633629672
tgschultz!UserNick@047-034-058-084.res.spectrum.com
9914 describes the problem

1633635305
bfiedler!~bfiedler@2a0d:d740:107::3
even on little endian, @bitCast is still a little bit broken

1633636137
andrewrk!~andrewrk@mail.ziglang.org
mmm yeah I do think it should operate based on "bits" not "bytes" which makes my answer to mla earlier wrong about bitcasting u24

1633643031
brandonbloom!~brandonbl@50.34.79.58
hi there! I'm trying to use zig for cross-compiling a Go program from linux targeting macos (sanity check: is this expected to be supported?) I've got this working - except for framework support!

1633643052
brandonbloom!~brandonbl@50.34.79.58
code is here: https://github.com/deref/golang-cross

1633643106
brandonbloom!~brandonbl@50.34.79.58
I've got an macos sdk on the box with frameworks and all, but i'm not quite sure how to tell zig where to find the frameworks. Looking at the zig code, I see addFrameworksDir, but it seems unused by the zig cc/link entrypoints

1633643137
brandonbloom!~brandonbl@50.34.79.58
any help plumbing the paths through to the compiler/linker would be greatly appreciated :)

1633643138
brandonbloom!~brandonbl@50.34.79.58
thanks!

1633643294
andrewrk!~andrewrk@mail.ziglang.org
brandonbloom, hmmm addFrameworksDir should work. I will mention this to Jakub who is currently on vacation and I suspect it can be resolved fairly swiftly

1633643380
brandonbloom!~brandonbl@50.34.79.58
to be clear, i haven't tried calling addFrameworksDir! I am just noting that there doesn't seem to be a command line flag for it. here's the flag for -framework: https://github.com/ziglang/zig/blob/6115cf22404467fd13d0290fc022d51d372d139a/src/main.zig#L825-L828

1633643507
brandonbloom!~brandonbl@50.34.79.58
btw, i wrote a few toy zig programs a few weeks ago - and absolutely loved it! thanks for your hard work on this project :)

1633643582
andrewrk!~andrewrk@mail.ziglang.org
the CLI flag is -F 

1633643596
andrewrk!~andrewrk@mail.ziglang.org
nice, glad that you are getting along :)

1633643895
brandonbloom!~brandonbl@50.34.79.58
d'oh! not sure how i missed that - giving it a try. thanks

1633644004
brandonbloom!~brandonbl@50.34.79.58
success! https://github.com/deref/golang-cross/blob/68b88fe29b4c7d9015b9b4082a2cc4d0d0252d23/bin/zcc#L9 thanks

1633644326
andrewrk!~andrewrk@mail.ziglang.org
nice!

1633645636
brandonbloom!~brandonbl@50.34.79.58
not sure if Loris Cro hangs out around irc, but if so, thanks to him too for writing https://dev.to/kristoff/zig-makes-go-cross-compilation-just-work-29ho because i can now cross compile go for mac, linux, x86_64 and arm64 with relative ease using https://github.com/deref/golang-cross and can get back to working on my damn project instead of build

1633645637
brandonbloom!~brandonbl@50.34.79.58
nonsense :)  thanks all

