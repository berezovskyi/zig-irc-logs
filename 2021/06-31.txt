1625159350
marler8997!~marler899@204.229.3.4
test

1625159452
marler8997!~marler899@204.229.3.4
is there a really significant performance regression with what's currently on ziglang.org/download?

1625159473
marler8997!~marler899@204.229.3.4
I've been building a small project for like 10 minutes

1625159488
marler8997!~marler899@204.229.3.4
I can see the Code Generation for each module in std for multiple seconds

1625159623
marler8997!~marler899@204.229.3.4
oh I know what's going on, I don't have enough ram on this machine.  zig is only taking 10% cpu and kswap is also taking around 15% cpu but zig is taking 72% memory

1625159662
marler8997!~marler899@204.229.3.4
So I guess zig is kinda unusable if your machine only has 1 GB of ram right now

1625159706
marler8997!~marler899@204.229.3.4
is "Code Generation" zig or LLVM?

1625159713
ifreund!~ifreund@user/ifreund
llvm

1625159723
marler8997!~marler899@204.229.3.4
dang

1625159738
marler8997!~marler899@204.229.3.4
so this problem can't get fixed until we have a fully fledged out stage 2

1625159741
ifreund!~ifreund@user/ifreund
oh, wait no that's zig

1625159744
marler8997!~marler899@204.229.3.4
ah ok

1625159749
ifreund!~ifreund@user/ifreund
llvm is "emit output" 

1625159783
ifreund!~ifreund@user/ifreund
still, I don't know of anything that should have impacted stage1's code generation recently

1625159793
marler8997!~marler899@204.229.3.4
nah, it's just this machine

1625161384
noam!~noam@104.232.42.247
Maybe "code generation" includes the new execution of s2 passes?

1625172761
kiedtl!~kiedtl@kisslinux/kiedtl
So, uh, I've just realized that my Zig binary is 8.5M, while the code is just around 7.5k lines of Zig with about 3.5k lines of C compiled with it. I'm pretty sure that much code wouldn't make a binary ~8mb, so any suggestions as to how I can determine what's taking up all that space?

1625172832
andrewrk!~andrewrk@mail.ziglang.org
kiedtl, there are tools to help figure out where binary bloat comes from

1625172887
andrewrk!~andrewrk@mail.ziglang.org
one example would be Bloaty McBloatface

1625172941
andrewrk!~andrewrk@mail.ziglang.org
it's been around for a while so it's probably in your local package manager

1625172957
andrewrk!~andrewrk@mail.ziglang.org
let me know what it ends up being, I'm curious too

1625172996
kiedtl!~kiedtl@kisslinux/kiedtl
Ah, looks like that's what I'm looking for, thanks

1625173267
earnestly!~earnest@user/earnestly
fwiw, https://0x0.st/-fK0.sh

1625173476
kiedtl!~kiedtl@kisslinux/kiedtl
earnestly: ah thanks, guess I don't need to wait for my DNS to come back online >:C

1625173493
kiedtl!~kiedtl@kisslinux/kiedtl
>.data            4232304  46.39%   zig-cache/bin/rl

1625173495
kiedtl!~kiedtl@kisslinux/kiedtl
what the hell

1625173533
earnestly!~earnest@user/earnestly
bloaty iirc does go to greater lengths to uncover bits that objdump doesn't seem to include (these end up as 'unknown' in my cheap tool)

1625173557
kiedtl!~kiedtl@kisslinux/kiedtl
Ohhh... I think I just forgot that I have a giant struct-of-matrixes as a global variable :V

1625173589
kiedtl!~kiedtl@kisslinux/kiedtl
Yup, reducing the size of those matrixes reduces the size of binary to 5mb... problem solved, sort of.

1625173603
kiedtl!~kiedtl@kisslinux/kiedtl
I should probably be heap allocating that... but on second thoughts, who cares

1625173651
kiedtl!~kiedtl@kisslinux/kiedtl
andrewrk: ^^ Turns out I forgot that I have a big global variable

1625173723
andrewrk!~andrewrk@mail.ziglang.org
still, 5 MiB is pretty big

1625173916
kiedtl!~kiedtl@kisslinux/kiedtl
Well, in the age of users regularly downloading binaries on the order of tens of mbs it doesn't really matter, sad to say

1625174043
andrewrk!~andrewrk@mail.ziglang.org
put more optimistically: given that storage space and network bandwidth is cheaper, it gives us room to optimize for other things :)

1625174089
earnestly!~earnest@user/earnestly
Whynotboth

