1612314659
ed_t
why no (not x) where x:bool ?  or am I missing something

1612314737
ed_t
! found it

1612315030
andrewrk
! is not control flow, but `and` and `or` are

1612316639
ed_t
andrewrk came across this (!) when trying if (not x) and had to use if (!bool) how is that not flow control (not disputing you I would just like to understand the reasoning)

1612316668
andrewrk
`if` is control flow. inverting a boolean value is not.

1612316705
andrewrk
`and` and `or` are short-circuiting, which means the right-hand side does not evaluate if the left hand side makes it not necessary

1612316823
brzg
is it intentional or a bug/limitation that i can't get `*Bar` (only `*const Bar`) from element of `Foo` struct which is `?Bar` through `if (...) |...| {...}`, even if the `Foo` is available as `*Foo` or `Foo`?

1612316839
ed_t
andrewrk I have been coding a very long time (eg. my first computer came with 1k memory).  Have used all sorts of languages over the years.  zig has its good points but it is very very picky - compiler is fast though which helps.

1612317268
brzg
never mind i didn't fully understand `if`

1612317308
v0idify
hey, i'm using a C function which takes `*const void`, however passing a value tells me that they are not the same size (which is correct, *c_void in zig is 0-byte). how can I bypass this?

1612317688
andrewrk
v0idify, the C function should take `*const c_void`, not `*const void`, which is a different concept

1612317711
andrewrk
in zig, c_void can be defined by `const c_void = @Type{.Opaque};`

1612317730
andrewrk
*c_void in zig is not 0-byte, but *void is

1612317733
v0idify
oh, i misread the error

1612317750
andrewrk
related:

1612317755
v0idify
yeah I saw that

1612317765
andrewrk
oops, I meant `opaque{}` not `@Type{.opaque}`

1612317793
v0idify
*comptime_int doesn't have memory, that's why it failed

1612318172
v0idify
thanks!

1612320435
v0idify
is there a way to import a C header in the current directory (#include "" vs #include <>)?

1612320689
g-w1
addIncludeDir in build.zig or -I on the cli

1612322411
v0idify
g-w1, thanks

1612325299
andrewrk
if anyone's looking for some small, impactful contributions, I could use some help with #7920. look at the latest commit for example. idea is to start uncommenting parser_test.zig (zig fmt) test cases one by one

1612326200
andrewrk
in summary all of zig fmt has to get rewritten with the new memory layout. it's a big chore, but at least it's pretty straightforward

1612329248
kbd
Is there any kind of --verbose option for zig test that will show the names of the tests that are run?

1612331367
mikdusan
just take away the tty; so if using zsh: zig test foo.zig |& cat

1612339493
kbd
mikdusan ü§î

1612339514
kbd
why

1612350465
daurnimator
kbd: classic usecase of `isatty`

1612353659
ifreund
huh? zig allows having functions with the same name as fields?

1612353729
ifreund
isn't this ambiguous?

1612353824
ifreund
say the field is a function pointer, does my_struct.foo() call the MyStruct.foo or the function pointer stored in field foo

1612353835
ikskuh
ifreund: it's not. you cannot access fields without a struct pointer or value

1612353845
ikskuh
ah, yeah

1612353848
ikskuh
true, that case is

1612353876
ifreund
yeah...

1612353887
ifreund
I guess I should open an issue

1612354139
ifreund
looks like the field shadows the decl in this case

1612354247
ifreund
#6966 would also fix this

1612354848
ifreund
#705 already exists :)

1612354912
ifreund
well no, that doesn't actually propose to make that a compile error, just improve the UX

1612358558
pixelherodev
Thought: compiling libc takes a while, but only happens once, right? Why is stdlib different?

1612358571
pixelherodev
Why does compiling zig stdlib compile each function as part of the consumer?

1612358598
pixelherodev
(excepting comptime, to be clear)

1612358648
pixelherodev
Ah, never mind,  I don't think either upstream compiler's design allows for that in a  reasonable manner (because of comptime)

1612358982
ikskuh
you cannot precompile zig code

1612358988
ikskuh
you can only pre-parse it into an AST

1612358993
ikskuh
no object format possible

1612361233
zags
Hey, I'm porting a reinterpret_cast thing, input is 64 raw bytes array which I need to treat as a pointer to 64 bit integer.

1612361236
zags
I tried `@ptrCast(*const u64, @alignCast(@alignOf(u64), &input[0]));` but get `panic: incorrect alignment` at runtime.

1612361239
zags
Input is a `[32]u8`

1612361246
zags
Where's my basic mistake? :D

1612361261
zags
32 raw bytes*

1612361765
ikskuh
your [32]u8 must not be aligned to @alignOf(u64)

1612361771
ikskuh
so u64 is probably align 4 or 8

1612361777
ikskuh
[32]u8 has align(1)

1612361817
ikskuh
you can also do this:

1612361828
ikskuh
@bitCast(u64, input[0..@sizeOf(u64)].*)

1612361860
zags
cool, but CAN ptrCast work? I really just want the first 8 bytes of the array to be the bytes for my u64

1612361872
ikskuh
yes, it can

1612361880
ikskuh
two ways:

1612361903
ikskuh
1) @ptrCast(*align(1) u64, &input[0])

1612361910
ikskuh
which makes your u64 pointer align(1)

1612361931
ikskuh
2) @ptrCast(*u64, @alignCast(@alignOf(u64), &input[0]))

1612361980
zags
hm, is #2 what I have?

1612361988
zags
isn't*

1612361989
ikskuh
kinda, yeah

1612361998
zags
that barfs at runtime

1612362021
ifreund
you need to make sure input is aligned to @alignOf(u64)

1612362025
fgenesis
so much syntax for what should be a simple cast o_O

1612362041
ifreund
fgenesis: I'd just use @intToPtr()

1612362046
ikskuh
and require

1612362046
ikskuh
var input : [32]u8 align(@alignOf(u64))

1612362062
ikskuh
fgenesis: it isn't a simple cast though ;)

1612362073
zags
i'll do the bitCast thing, thanks

1612362080
ikskuh
even if you're used to do it in C

1612362094
zags
yeah, I actually like that these casts stand out in an ugly way

1612362096
ikskuh
you've invoked a lot of UB before and you were just lucky that the compiler ignored that you did unaligned access

1612362099
ikskuh
start programming arm

1612362105
ikskuh
and you'll be happy to have these checks

1612362185
ifreund
note that @intToPtr() inserts the same alignement safety checks in safe build modes as @ptrCast() + @alignCast()

1612362248
ifreund
though if you make input aling(@alignOf(u64)) you won't need the @alignCast() and can just @ptrCast() directly

1612362502
fgenesis
ikskuh: i was bitten by alignment issues before, so yea :D

1612362518
ikskuh
good :)

1612362520
ikskuh
:D

1612375772
kbd
daurnimator: "classic usecase of `isatty`" - is it? Been programming a long time at this point, familiar with `isatty`, never seen anyone use it like that to mean "verbose test output". Could stand to be documented :)

1612376044
ifreund
kbd: in this case it means "don't use escape sequences to overwrite the same line repeatedly because the output is being piped"

1612376204
kbd
üëç

1612377468
semarie
why std.c.getErrno() is u16 instead of c_int ? I am looking at zeromq (

1612377742
ifreund
good question, POSIX says it's an int right?

1612377764
ifreund
or ISO C or whatever

1612377838
semarie
I just checked POSIX-2013. yes, it is expected to be a int

1612377865
semarie


1612377919
ifreund
semarie: looks like std.c._errno gives you the int

1612378003
semarie
oh, it is public. cool :)

1612378026
semarie
so I should be able to workaround. thanks ifreund

1612378095
ifreund
no problem, I think that std.c.getErrno() should probably just return a c_int tbh

1612378163
ifreund
either that or some unsigned type that can only represent the positive values of a c_int

1612378172
ifreund
but that seems overcomplex

1612380472
fengb
It's converted to each platform

1612380990
ikskuh
andrewrk: if i compile a wasm32-freestanding-none module, a lot of stuff gets emitted into the binary

1612381001
ikskuh
is this a already-known problem/issue on github?

1612381060
fengb


1612381227
ikskuh
nah, if you remove compiler-rt, still some symbols will be emitted

1612381357
ikskuh
so even without compiler-rt, there are some functions included

1612381362
ikskuh
mostly floating point stuff

1612381374
ikskuh
actually

1612381393
ikskuh
memcpy, memmove, memcmp, bcmp, memset and a whole bunch of stuff from math.h

1612381412
Gliptic
there's a workaround here

1612381416
Gliptic
don't know if it still works

1612381497
ikskuh
sweet!

1612381498
ikskuh
works!

1612381507
Gliptic
good to know :)

1612381556
ikskuh
<3 thanks!

1612381933
Gliptic
ikskuh: hm, I tested it and the exported function was not exported any longer in the .wasm

1612381960
ikskuh
for me, it was

1612382333
andrewrk
there is definitely an issue here though

1612382371
andrewrk
I don't remember exactly what the plan is but suffice to say when things are working as desired there won't be unused symbol bloat in outputted wasm

1612382404
ikskuh
yep

1612385024
marijnfs
how are the network capabilities of zig holding up?

1612385031
marijnfs
i want to do udp hole punching

1612385496
ikskuh
use zig-network

1612385505
ikskuh
you can do that with it

1612385521
ikskuh
but note that you need some central server or side channe for this

1612386329
marijnfs
i'm implementing a dht

1612386339
marijnfs
so nodes can use each other for this

1612386350
marijnfs
there should always be some nodes that have open ports

1612386361
marijnfs
ikskuh: is that a library?

1612386379
ifreund
marijnfs:

1612386514
marijnfs
sounds like that should be in std?

1612386538
ifreund
I believe that's the plan eventually

1612386565
marijnfs
the async example is interesting

1612387247
ifreund
ikskuh: why are all the functions of the OsLogic structs in zig-network inline?

1612387339
ikskuh
ifreund: because they are only redirections

1612387383
ifreund
getFdSet seems to be a little more than that...

1612387411
ifreund
though that is windows only

1612387461
ikskuh


1612387470
ikskuh
they are inlined into SocketSet

1612387516
ifreund
ok yeah I see what you're going for, I just don't agree that it matters here

1612387547
ikskuh
removes one level of stack trace

1612387577
ifreund
I'd probably have used @call() with .always_inline too myself

1612387610
ifreund
then you don't have to put it on all the functions of all the specializations

1612388374
marijnfs
that does look like repetition

1612388412
marijnfs
how does @call help there?

1612388852
marijnfs
how would you implement testing with network code?

1612388931
ifreund
marijnfs: @call() allows you to inline functions at the callsite instead of needing to declare them with the inline keyword

1612388998
ifreund
to test network code, you probably need to build a bit of infrastructure

1612389117
ifreund
you can spin up several clients and a server from within a test "" {} block

1612390180
marijnfs
you're right, i can just start some threads and setup a two nodes

1612390276
marijnfs
what if i want to test what is send is the same received?

1612390285
marijnfs
i need to communicate between these threads for the test

1612391491
geemili
marijnfs: why not set up an expected value ahead of time and pass it to both threads?

1612392800
marijnfs
geemili: that's actually smart

1612392850
marijnfs
the only thing is that the 'check' should wait for the 'write'

1612392869
marijnfs
you can't check if 1 is written before you received it

