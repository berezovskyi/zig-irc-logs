1628825604
noam!~noam@104.232.42.247
Flaminator: The only way I can think of is to import them from the top-level file, and then e.g. @import("pkg").foo instead of @import("../foo.zig")

1628830029
devast8a!~devast8a@2001:470:69fc:105::3f46
Hey andrewrk just saw your post here https://news.ycombinator.com/item?id=28165341 - Have you talked about this idea elsewhere?

1628830119
devast8a!~devast8a@2001:470:69fc:105::3f46
I think it's a really interesting view of control flow and if there are more fleshed out thoughts on the idea I'd love to read it

1628830219
andrewrk!~andrewrk@mail.ziglang.org
devast8a, no, it's something I've beenthinking about recently and it's the first time I made any comment about it

1628864377
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
I know that Zig does not currently support returning data with errors; is that on the roadmap, and are there issues I can read for how that design might work?

1628864574
ifreund!~ifreund@user/ifreund
ericam: Here's the issue discussing that: https://github.com/ziglang/zig/issues/2647

1628864631
ifreund!~ifreund@user/ifreund
ericam: I think the chance of something like that being accepted is quite low though. All proposals so far have serious issues and there are several patterns to return context already

1628864639
ifreund!~ifreund@user/ifreund
(e.g. using an out parameter)

1628864853
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
That's fair, but I think this would be very useful

1628864862
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Maybe Zig just isn't really that kind of language

1628865975
ifreund!~ifreund@user/ifreund
ericam: error values owning resources (memory, fds, etc) would make error handling in zig lose a lot of what makes it great

1628866165
companion_cube!~simon@user/companion-cube
Why so, ifreund? You have to handle errors, what would be the issue? 

1628866186
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Would they be really owning the values?  Or just holding slices, etc.

1628866218
ifreund!~ifreund@user/ifreund
ericam: if the errors don't own the memory a slice error value points to, who does?

1628866256
ifreund!~ifreund@user/ifreund
companion_cube: the first issue is knowing which error values require special handling and which don't

1628866266
ifreund!~ifreund@user/ifreund
right now they are just abitrary integers so none do

1628866315
ifreund!~ifreund@user/ifreund
then all code in your project that touches any error that might need special handling has to become aware of what that special handling entails

1628866320
companion_cube!~simon@user/companion-cube
Could they not be a tagged union? Int or struct, or even an owned pointer

1628866380
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Hmm.  On the one hand I almost want to suggest like a "debug allocator" or something that could be used only for error values, but that would break a lot of guarantees.

1628866407
ifreund!~ifreund@user/ifreund
companion_cube: I'm talking about identifing error *sets* that contain errors requiring special handling as well

1628866414
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
ifreund: Surely only the parts of the code that do not pass the error value up?

1628866419
ifreund!~ifreund@user/ifreund
something like a tagged union would work for individual values sure

1628866445
ifreund!~ifreund@user/ifreund
ericam: yes, passing an error up would be fine

1628866471
companion_cube!~simon@user/companion-cube
the error set could contain structures as well, no?

1628866482
companion_cube!~simon@user/companion-cube
and zig is still responsible for allocating the tag for each unique error

1628866514
ifreund!~ifreund@user/ifreund
not sure what you mean by an error set containing structures

1628866518
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Hmm.  I don't suppose we could say "well you can't have pointers or anything heap allocated in the errors," since that would break a lot of Zig's good ideas.

1628866535
companion_cube!~simon@user/companion-cube
well an error set is a set of names, isn't it?

1628866540
companion_cube!~simon@user/companion-cube
each of which gets a unique ID

1628866564
companion_cube!~simon@user/companion-cube
you could also see that as a tagged union with a void payload for all cases

1628866568
ifreund!~ifreund@user/ifreund
ericam: there's no way to stop people

1628866584
companion_cube!~simon@user/companion-cube
relax the payload constraint, and you get a tagged union where the tag is managed by zig, and it's still a "set" of cases

1628866603
ifreund!~ifreund@user/ifreund
companion_cube: error values are unique globally, not just within the set

1628866614
companion_cube!~simon@user/companion-cube
yes

1628866621
companion_cube!~simon@user/companion-cube
doesn't change my point

1628866628
ifreund!~ifreund@user/ifreund
I still don't understand your point

1628866641
ifreund!~ifreund@user/ifreund
what does "the tag is managed by zig" mean

1628866657
companion_cube!~simon@user/companion-cube
the same thing as for errors? zig picks an integer for each error, does it not?

1628866696
ifreund!~ifreund@user/ifreund
right now zig is blissfully unaware of what recources need management/freeing at the language level, though it provides tools to make proper handling easier

1628866716
ifreund!~ifreund@user/ifreund
yes zig does assign each error name an integer, what does your tag mean though?

1628866726
companion_cube!~simon@user/companion-cube
the tag of a tagged union is an integer

1628866736
ifreund!~ifreund@user/ifreund
enum, but sure

1628866765
companion_cube!~simon@user/companion-cube
it could be an integer

1628866775
companion_cube!~simon@user/companion-cube
but then I realize the actual problem is the size of the union in each case

1628866789
ifreund!~ifreund@user/ifreund
as far as I can tell you're explaining that it's technically possible to implement errors with arbitrary data attached without solving any of the usability problems that presents

1628866817
companion_cube!~simon@user/companion-cube
ah, yes

1628866827
companion_cube!~simon@user/companion-cube
but for me that's part of the manual memory management?

1628866831
companion_cube!~simon@user/companion-cube
if you handle an error with a payload

1628866836
companion_cube!~simon@user/companion-cube
you're responsible for the payload

1628866843
companion_cube!~simon@user/companion-cube
just like with a normal returned value

1628866897
devast8a!~devast8a@2001:470:69fc:105::3f46
The problem is you may not know how to handle the resources tied to some generic error.

1628866993
companion_cube!~simon@user/companion-cube
.deinit()?

1628868689
companion_cube!~simon@user/companion-cube
But I see your point, if you just discard an error that can be one of many cases... 

1628868701
companion_cube!~simon@user/companion-cube
That's where Drop is useful indeed

1628874394
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
is there a way to have a struct with a array field ('[4096]u16') without having to initalize the whole thing to 0x0?

1628875407
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
The main issue that I see is: when you return a pointer, a slice, or a struct that contains either, the type information tells you that is being done.  If you return an error, there's nothing telling you that, and it can be done transparently, whereas chains of returns are more explicit.

1628875504
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Also, any struct that owns information is likely to carry an allocator pointer with it.  Either that, or it's been allocated within a particular context, like the json parsing, and so is only used within the context of that allocator.  Returns will tell you when a value escapes that allocator, but not so with error unions.

1628875556
companion_cube!~simon@user/companion-cube
Indeed

1628875569
companion_cube!~simon@user/companion-cube
A limitation of not having lifetimes

1628875588
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
And I would say lifetimes are not possible in Zig, since it presupposes a central allocator

1628875631
companion_cube!~simon@user/companion-cube
Not really, allocators could have lifetimes too 

1628875642
companion_cube!~simon@user/companion-cube
The obstacle is complexity, afaict

1628875664
companion_cube!~simon@user/companion-cube
(lifetimes don't presuppose any sort of allocator) 

1628875700
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
I would say the biggest advantage of being able to pass up data as opposed to say, using a result struct, is the ergonomics of try, catch, and errdefer.  I think I've seen some proposal suggesting that any type can be an error, separating error types from error unions.  Would that possibly be accepted?

1628875715
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
companion_cube: When a piece of data's lifetime ends, how is it freed?

1628875758
companion_cube!~simon@user/companion-cube
ericam: that's a thing with RAII

1628875766
companion_cube!~simon@user/companion-cube
But you could have lifetimes without that? 

1628875794
companion_cube!~simon@user/companion-cube
They only indicate how long stuff lives

1628875796
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
When I think of "lifetimes," I think of "this piece of data will be in memory until at least this point."  Is that what you mean?

1628875804
companion_cube!~simon@user/companion-cube
Not what to do at runtime

1628875809
companion_cube!~simon@user/companion-cube
Yes

1628875833
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
But at runtime, memory would still have to be freed

1628875875
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Oh!  Are you saying that it would be possible to tie the lifetime of a piece of data to an allocator, so that data cannot be passed up "above" the allocator in the call stack?

1628875894
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Which would be completely compile time

1628875895
companion_cube!~simon@user/companion-cube
Yes, I think so

1628875902
companion_cube!~simon@user/companion-cube
Lifetimes are compile time

1628875912
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
That's a really interesting idea, although I'm not sure if that would work with the rest of Zig imo

1628875917
companion_cube!~simon@user/companion-cube
The issue is complexity, and some rigidity too

1628875922
companion_cube!~simon@user/companion-cube
Yeah

1628875927
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
(I say, as if I'm a zig expert, and as if I have any control over this lmao)

1628875943
companion_cube!~simon@user/companion-cube
Definitely not simple, especially in the compiler

1628875974
companion_cube!~simon@user/companion-cube
Rust's reputation of being hard comes almost entirely from lifetimes

1628875996
companion_cube!~simon@user/companion-cube
(and the borrow checker that enforces them) 

1628876008
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
I've tried to learn and they still kill me.  Rust has some really nice guarantees tho, and I would like to do more rust development

1628876126
companion_cube!~simon@user/companion-cube
It's also possible that they wouldn't work well with allocators in practice, when lifetimes are more dynamic and not just nicely following nested scopes 

1628876300
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
This is a very large feature for just returning data with errors lmao

1628876333
companion_cube!~simon@user/companion-cube
Ahah yes, it wouldn't fly

1628884510
tenshi!~red@user/tenshi
How would I go about disabling SSE in build.zig?

1628885740
ifreund!~ifreund@user/ifreund
swl: you can leave the memory uninitialized with the `undefined` keyword

1628885788
ifreund!~ifreund@user/ifreund
tenshi: SSE is disabled by setting the cpu features of the target you pass to LibExeObjStep.setTarget()

1628886168
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
ifreund: Yup I found that after going from ziglearn to the master docs

1628886397
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I'm trying to make a function inside a struct but I can't get a self parameter, the compiler says I have to pass an argument. The error and code are here: https://0x0.st/-JGT.zig

1628887489
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Also, is there a way to force a u8 like 0x0F to be stored in memory as 0b00001111 and not 0b1111?

1628888894
ifreund!~ifreund@user/ifreund
swl: looks like you meant to do comp.load_instruction(), not Chip.load_instruction()

1628888907
ifreund!~ifreund@user/ifreund
Chip.load_instruction(&comp); would also work fwiw

1628888984
ifreund!~ifreund@user/ifreund
swl: also, a u8 is always 8 bits of memory, not 4 

1628888999
ifreund!~ifreund@user/ifreund
i.e. 0x0F is always 0b00001111

1628897153
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
How can I print a u8 as hex with at least two digits? (IE A is printed as 0A)? I tried {x.2} but that doesn't work

1628897472
ifreund!~ifreund@user/ifreund
swl: {x:0>2} should pad with 0s, left aligned, with total width 2

1628897516
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Thanks

1628897531
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
That works

1628898418
ifreund!~ifreund@user/ifreund
s/left/right/

