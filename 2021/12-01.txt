1638322787
companion_cube!~simon@user/companion-cube
have you read "crafting interpreters"?

1638328624
Arnavion!arnavion@user/arnavion
https://stackoverflow.com/questions/65157883/how-to-import-zig-modules-dynamically   This is no longer possible, right? Because I get the error added by   https://github.com/ziglang/zig/commit/adc2aed587d009c0d112063fa0f3d03dedc9e50a

1638328693
Arnavion!arnavion@user/arnavion
I saw   https://github.com/ziglang/zig/issues/2206   and saw that it points out that it's not necessary since @import("string literal") can be used inside ifs to have only one evaluated, though that doesn't work for the loop case

1638329803
andrewrk!~andrewrk@mail.ziglang.org
Arnavion, here's something you can do:  `pub const foo = @import("foo.zig");` for each possible file inside `pub const imports = struct { ... };` then you can use `@field(imports, name)` 

1638329853
andrewrk!~andrewrk@mail.ziglang.org
zig wants to know all the possibly imported files though so that it can eagerly go find them and compile them when you kick off a compilation process. the language is constrained by making it possible for a fast compiler to exist

1638329877
andrewrk!~andrewrk@mail.ziglang.org
that's why you have to use string literals with `@import`

1638330086
Arnavion!arnavion@user/arnavion
Right, right. I was just confirming that the method in the SO answer was supposed to not work

1638330119
andrewrk!~andrewrk@mail.ziglang.org
confirmed

1638330125
Arnavion!arnavion@user/arnavion
Yeah, thanks

1638330695
andrewrk!~andrewrk@mail.ziglang.org
Arnavion, I posted an additional answer to that SO link

1638340463
Arnavion!arnavion@user/arnavion
https://github.com/Arnavion/aoc2021/blob/main/src/day1.zig   Off to a good start :) 

1638340485
Arnavion!arnavion@user/arnavion
(If anyone finds anything to critique, I'm all ears)

1638343358
andrewrk!~andrewrk@mail.ziglang.org
Arnavion, if you have your input pasted as a multiline string, you might find it convenient to use std.mem.tokenize or std.mem.split

1638343380
andrewrk!~andrewrk@mail.ziglang.org
if you look at lib/std/mem.zig there are `test` blocks underneath the functions to show how to use them

1638343409
andrewrk!~andrewrk@mail.ziglang.org
see also std.fs.Dir.readFileAlloc

1638343455
andrewrk!~andrewrk@mail.ziglang.org
you might also want to set yourself up an arena allocator instead of GPA, unless your goal is to practice not leaking memory

1638343485
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/blob/7355a201336c8e3892427e5932fe5cdd46cf96df/lib/std/special/build_runner.zig#L13-L17

1638343589
Arnavion!arnavion@user/arnavion
The tests do use std.mem.split (see input.StringIterator). For the main execution I want to avoid reading the whole file into memory (even though it's small enough to), hence the readUntilDelimiterOrEofAlloc-based iterator

1638343601
Arnavion!arnavion@user/arnavion
And yes, I do want to catch leaking memory

1638343704
Arnavion!arnavion@user/arnavion
(I already leaked a bunch of times while writing this code. I've been used to languages with destructors for too long)

1638345679
voldial!~user@user/voldial
How do I get the commands that replicate a "zig run"? I tried all the --verbose-* https://bpa.st/JSAA

1638345701
voldial!~user@user/voldial
0.9.0-dev.1802+2ca5a859e

1638346019
voldial!~user@user/voldial
eh, got it. "zig build-exe" produces a near same binary, just 2 bytes diff... ok back to learning

1638353781
chgr!~ek@nat-91-137-30-14.net.encoline.de
Hi everyone, since the advent of code has started today, I decided to try doing it with zig this year. The first thing I tried is to create an ArrayList to store some []u8 in. Does that even work?

1638353800
chgr!~ek@nat-91-137-30-14.net.encoline.de
I tried something like this: https://pastebin.com/vb1xXCfb

1638354138
Franciman!~Franciman@mx1.fracta.dev
awesome chgr 

1638354162
Franciman!~Franciman@mx1.fracta.dev
yes it works without further ado

1638354184
Franciman!~Franciman@mx1.fracta.dev
are you planning to put in string literals'

1638354186
Franciman!~Franciman@mx1.fracta.dev
?

1638354347
dutchie!~dutchie@user/dutchie
string literals are []const u8 which you can't cast to []u8 (not allowed to discard const)

1638354382
chgr!~ek@nat-91-137-30-14.net.encoline.de
Yes, maybe. I tried to put in a string literal, but that did not work. I also tried to put in the result of `try in_stream.readUntilDelimiterOrEof(&buf, '\n')`, but that also failed with an error: `error: expected type '*std.array_list.ArrayListAligned([]u8,null)', found '*const [7:0]u8'

1638354384
chgr!~ek@nat-91-137-30-14.net.encoline.de
    data.append("example");`

1638354392
chgr!~ek@nat-91-137-30-14.net.encoline.de
Oh sorry, that got messy.

1638354420
Franciman!~Franciman@mx1.fracta.dev
what dutchie said

1638354427
dutchie!~dutchie@user/dutchie
so you can either change your ArrayList to take []const u8 or if you need them mutable you'll have to create an allocator and `allocator.dupe("literal")` (but then you might have to worry about freeing it)

1638354427
Franciman!~Franciman@mx1.fracta.dev
is the reason why it doesn't work

1638354431
Franciman!~Franciman@mx1.fracta.dev
it's constness

1638354447
chgr!~ek@nat-91-137-30-14.net.encoline.de
oh, I see! thanks

1638354475
dutchie!~dutchie@user/dutchie
ACTION wheels out the showtime that helps get your head around all of these different pointer types again: https://www.youtube.com/watch?v=VgjRyaRTH6E

1638355507
Franciman!~Franciman@mx1.fracta.dev
this MultiArrayList is very fancy

1638355511
Franciman!~Franciman@mx1.fracta.dev
I am scared it may be too effective

1638355513
Franciman!~Franciman@mx1.fracta.dev
ahahah

1638358736
Franciman!~Franciman@mx1.fracta.dev
how do you test the speed of a piece of code in zig?

1638361181
chgr!~ek@nat-91-137-30-14.net.encoline.de
so the error was caused by not calling `init` on my ArrayList and passing an allocator

1638361236
Franciman!~Franciman@mx1.fracta.dev
chgr: how is it going now? 

1638361244
Franciman!~Franciman@mx1.fracta.dev
managede to make progress on the first AoC?

1638361880
chgr!~ek@nat-91-137-30-14.net.encoline.de
Oh I stumbled in a rabbithole checking out all the various Reader methods that are available...

1638361898
chgr!~ek@nat-91-137-30-14.net.encoline.de
Will probably work on the AoC sometime later tonight since I have to get some actual work done :D

1638362645
ikskuh!~xq@v43666.php-friends.de
Franciman: for performance, i typically use "perf stat"

1638362652
ikskuh!~xq@v43666.php-friends.de
and nanoTimestamp

1638362901
Franciman!~Franciman@mx1.fracta.dev
perf be it

1638362903
Franciman!~Franciman@mx1.fracta.dev
thanks

1638362910
Franciman!~Franciman@mx1.fracta.dev
I am astonished by the size of my executable

1638362912
Franciman!~Franciman@mx1.fracta.dev
84kb

1638362919
Franciman!~Franciman@mx1.fracta.dev
the haskell interpreter is 5.6MB

1638362926
ikskuh!~xq@v43666.php-friends.de
perf is awesome

1638363071
Franciman!~Franciman@mx1.fracta.dev
chgr: lol good luck

1638363132
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: 84kb is still quite large unless you have some significant data tables

1638363156
Franciman!~Franciman@mx1.fracta.dev
I included ziglyph

1638363163
Franciman!~Franciman@mx1.fracta.dev
you know what, let's get rid of unicode

1638363205
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: also which release mode are you using?

1638363214
Franciman!~Franciman@mx1.fracta.dev
release-fast

1638365239
tgschultz!UserNick@047-034-058-084.res.spectrum.com
Franciman: there's also std.time.Timer which can be used for internally for benchmarking specific sections.

1638365481
Franciman!~Franciman@mx1.fracta.dev
thanks

1638371200
chgr!~ek@nat-91-137-30-14.net.encoline.de
is it possible to specify an output directory / filename when running `zig build-exe`?

1638371456
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
devast8a: right, I hoped rust went through a solution that moves away "default alising" in any pointer

1638371480
Franciman!~Franciman@mx1.fracta.dev
I second, chgr question, and also add, is it possible to use zig run to run the output of the build?

1638371489
Franciman!~Franciman@mx1.fracta.dev
or do I need to manually do zig-out/bin/program ?

1638371873
ikskuh!~xq@v43666.php-friends.de
zig run will compile and run a single file

1638371880
ikskuh!~xq@v43666.php-friends.de
"zig build run" is a configurable step

1638371883
ikskuh!~xq@v43666.php-friends.de
(if you have that)

1638374079
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
devast8a: so I wondered if we could choose for default noalias in zig

1638377246
ManDeJan!3da94070ba@2604:bf00:561:2000::f6
Hello everyone :)

1638383258
travis_griggs!~travis_gr@127.sub-174-204-82.myvzw.com
most language style conventions double down on snake_case or camelCase, but Zig seems to have embraced both, leveraging the difference. is that unique to zig, or borrowed from another language ecosystem i'm not familiar with?

1638383365
Franciman!~Franciman@mx1.fracta.dev
I think rust does it too

1638383379
Franciman!~Franciman@mx1.fracta.dev
CamelCase for type names

1638383385
Franciman!~Franciman@mx1.fracta.dev
snake_case for variables and function names

1638383395
Franciman!~Franciman@mx1.fracta.dev
except for builtins

1638383847
travis_griggs!~travis_gr@127.sub-174-204-82.myvzw.com
i kind of like it. it gets rid of the one or the other arguments. now if we could only do that with tabs vs spaces :D

1638395522
devast8a!~devast8a@2001:470:69fc:105::3f46
viric: I don't think it matters for immutable references. Whether there is one or a hundred immutable references to the same memory shouldn't affect what optimizations or analyses the compiler can perform right?

1638397635
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
if 'immutable' means super-const, fine

1638397689
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
the point is - can that immutable memory be touched by other means than that immutable reference?

1638397737
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
int i = 2; const int *p = &i; i = 3;     The compiler can't think "*p won't change because it's const*"

1638397752
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
but immutable may mean more than that. I don't know rust.

1638398451
devast8a!~devast8a@2001:470:69fc:105::3f46
viric: In this case, p will not be allowed to be used after `i = 3`. The compiler always enforces this at compile time.

1638399880
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
I meant C. Do you mean rust?

1638400632
devast8a!~devast8a@2001:470:69fc:105::3f46
Yes.

1638401369
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
ah good.

1638401729
ifreund!~ifreund@user/ifreund
Franciman: camelCase doesn't capitalize the first character, that's TitleCase. Also builtins follow the same rules as normal functions as defined by the style guide

1638401774
ifreund!~ifreund@user/ifreund
honestly I'd rather we got rid of camelCase and just had snake_case and TitleCase

1638401793
ifreund!~ifreund@user/ifreund
many functions are just one word so you can't tell the difference anyways

1638401807
ifreund!~ifreund@user/ifreund
and longer function names are far more readable in snake_case

1638401822
freshcoffee!~fresh@user/freshcoffee
it depends on how you type it; "CamelCase" vs "camelCase"

1638401889
freshcoffee!~fresh@user/freshcoffee
but there are so many plays on words/caps, it's not even funny: https://en.wikipedia.org/wiki/Camel_case

1638402288
andrewrk!~andrewrk@mail.ziglang.org
ifreund, there's a nice idea

1638402321
ifreund!~ifreund@user/ifreund
andrewrk: we're already doing it for tigerbeetle :D

1638402339
freshcoffee!~fresh@user/freshcoffee
don't you mean tiger_beetle :P (sorry couldn't resist)

1638402357
companion_cube!~simon@user/companion-cube
TiGeRbEeTlE

1638402360
freshcoffee!~fresh@user/freshcoffee
noooo

1638402365
ifreund!~ifreund@user/ifreund
transition_to_view_change_status() or start_view_as_the_new_leader() are soooo much more readable

1638402572
andrewrk!~andrewrk@mail.ziglang.org
for comparison: transitionToViewChangeStatus() startViewAsTheNewLeader()

1638402613
andrewrk!~andrewrk@mail.ziglang.org
they both look fine to me, but that's probably due to personal experience

1638402624
andrewrk!~andrewrk@mail.ziglang.org
s/personal experience/exposure/

1638402765
ifreund!~ifreund@user/ifreund
I find it much easier to parse sequences of words if they have spaces or underscores between them 

1638402792
andrewrk!~andrewrk@mail.ziglang.org
that makes sense

1638402823
andrewrk!~andrewrk@mail.ziglang.org
gotta admit, some of those builtin functions look pretty derpy in camelCase

1638402854
companion_cube!~simon@user/companion-cube
cOmPaReAnDsWaP()

1638402897
freshcoffee!~fresh@user/freshcoffee
my test: as viewing distance increases, camelCase and TitleCase lose word-boundry to my eyes before snake_case

1638402919
ifreund!~ifreund@user/ifreund
oh yeah, that's a good way to show the difference

1638403053
ifreund!~ifreund@user/ifreund
tigerbeetle file that has the most long function names: https://github.com/coilhq/tigerbeetle/blob/b86e53287395253731a5cbd60a89057b773b2a34/src/vsr/replica.zig

1638403068
ifreund!~ifreund@user/ifreund
(it's the core of the consensus protocol implementation)

