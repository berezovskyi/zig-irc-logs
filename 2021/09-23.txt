1632359302
GreaseMonkey!greaser@user/greasemonkey
is there a way to combine error sets without having to recreate them merged by hand?

1632359316
GreaseMonkey!greaser@user/greasemonkey
...nevermind i just found it, ||

1632360591
freshcoffee!~fresh@user/freshcoffee
crikey `zig build test -Denable-qemu` takes loooooong

1632360659
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
good.. more time to dick around 

1632360991
freshcoffee!~fresh@user/freshcoffee
oh finally qemu 6.1.0 looks like it might take.

1632362343
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
i have a followup question: After getting the import right, I tried calling some C function named phr_parse_request. The compiler recognized the function and complained about various types not being correct. I fixed the types. Now the linker is saying `ld.lld: error: undefined symbol: phr_parse_request`. Why?

1632362489
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
did you add the library? just because you have the header that zig translated doesn't mean the linker knows where to find the objects to link it against

1632362491
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i think

1632362573
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
errantmind: I think builder.addStaticLibrary in your build.zig might help.

1632362749
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
Yea, I think I don't understand the build process very well. So I need to have a separate build step to compile the library, but also import the header for the compiler to check the types?

1632362785
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Are you building the C code with Zig?

1632362901
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
I wanted to if possible, I don't think it is being built currently. All I did was get the @import working with the header

1632362958
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
*@cImport

1632363022
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Yeah, that won't build it. That just translates the header to Zig and imports it.

1632363117
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
Is there a 'Zig' way of building it or should I just hack something together?

1632363167
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
There probably is a Zig way of building it, using build.zig, but I'm not the person to tell you how to get there. I'd just throw it in a Makefile.

1632363202
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
all good, thanks, that helps

1632363245
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
https://hg.sr.ht/~nmichaels/sodium-wrapper/browse might be a useful example. It's pretty minimal.

1632365614
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
I ended up adding `exe.addCSourceFile("src/submodules/picohttpparser/picohttpparser.c", &[_][]const u8{ ... });` which got it to compile

1632365627
discipulus!~discipulu@user/discipulus
errantmind: https://zig.news/xq/zig-build-explained-part-2-1850 has a section building C code from build.zig

1632365736
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
ah yea, it advocates the approach I just pasted which got it to compile

1632365778
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
However, at runtime I get some nasty error at the function invocation `Illegal instruction at address 0x24143b`

1632365960
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
progress at least, haha

1632366749
freshcoffee!~fresh@user/freshcoffee
errantmind: https://github.com/ziglang/zig/wiki/FAQ#why-do-i-get-illegal-instruction-when-using-with-zig-cc-to-build-c-code

1632366926
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
freshcoffee: nifty, so when I disable the sanitizing I see the error occurs on some C code `*method = NULL;`

1632367010
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
`Segmentation fault at address 0x0`

1632367077
freshcoffee!~fresh@user/freshcoffee
`*method = (anything)` is segfault because `method == NULL`

1632367242
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
hmm, yea. I think I know the culprit

1632370780
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
nice! got it working properly, thanks all. I tried two different approaches. One was using build.zig with addCSourceFile and adding a @cImport for the header in my zig source file.

1632370805
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
\o/

1632370807
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
The second was not using build.zig and instead using `zig build-exe` with `-lc` and the path to the C source file. In my code I defined the relevant `extern struct and extern fn`

1632370837
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
I prefer the second approach so will use that with the new automatically enabled lto

1632375356
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
Is there a Zig equivalent of memcmp?

1632375683
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
If you just want to check for equality, std.mem.eql

1632375793
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
sadly no

1632375846
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
std.mem.order then, I think

1632376058
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
hmm, not quite

1632376088
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
i'll port it from glibc if I can, I need something optimized

1632376237
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
If you're linking to libc, you can just use it.

1632376283
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
yea, mainly I don't know if libc has the SSE optimized version

1632376295
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
i'll take a look

1632376364
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
oh, nm, that is the one i need after all, thanks

1632381156
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
Hey is it possible in zig

1632381180
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
to declare function

1632381205
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
in such way to be able to take it arguments

1632381353
Gliptic!~glip@irc.glip.cc
come again?

1632381421
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrzejku: can you explain what you mean?

1632381454
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
well I am writing that in C but I get confused with solutions and that's just a question about zig

1632381471
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
that's kind of 'reflection' feature needed or code generation

1632381475
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
let me explain the problem

1632381480
ikskuh!~xq@2a0d:5940:6:163::ad7e
make an example in C

1632381484
ikskuh!~xq@2a0d:5940:6:163::ad7e
and i'll mirror it in zig

1632381486
ikskuh!~xq@2a0d:5940:6:163::ad7e
that might help

1632381598
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I got a function. void sum(int a, in b); and now I want some nice API which will generate the parameter pack of that function like {int a, int b;} to be able to serialize the function parameters kind of remote function call

1632381616
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
how to do that nicely I have no idea

1632381617
ikskuh!~xq@2a0d:5940:6:163::ad7e
serialize(.{a,b});

1632381657
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
yes but I got my own serialization requirements

1632381754
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
what if the remote call functionw ould be void func(struct {int a, struct { int b }})

1632381773
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
each type lets say got to have own serialization rule

1632381779
ikskuh!~xq@2a0d:5940:6:163::ad7e
serialize(.{a,b})

1632381780
ikskuh!~xq@2a0d:5940:6:163::ad7e
:D

1632381809
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
?

1632381832
ikskuh!~xq@2a0d:5940:6:163::ad7e
fn serializeOne(value: anytype) void { const T = @TypeOf(value); switch(value) { u32 => …, i32 => …, []const u8 => …, ..., else => @compileError("cannot serialize " ++ @typeName(T)), } }

1632381859
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can make that recursive for *any* struct or tagged union type

1632381940
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
and what about struct can we extend serialization by members?

1632381971
ikskuh!~xq@2a0d:5940:6:163::ad7e
inline for(std.meta.declarations(StructType)) |fld| { serializeOne(@field(my_struct, fld.name)); }

1632382113
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
ikskuh, omg

1632382149
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I hadn't expect it

1632382307
ikskuh!~xq@2a0d:5940:6:163::ad7e
easy as that

1632393718
bw!sid2730@user/betawaffle
is there a way to see what code a @cImport actually produces? using `zig translate-c` is proving tedious

1632394201
ifreund!~ifreund@user/ifreund
bw: yes, it can be found in your zig-cache, search for a cimport.zig file

1632394211
bw!sid2730@user/betawaffle
perfect, thanks

1632403943
flux_control!~flux@sourcemage/wizard/flux
bw: Depending on your definiion of "code" you could also inspect the resulting machine code/assembly. ;-)

1632406158
noam!~noam@104.232.42.247
ha

1632423386
bgiannan!giann@2a01:4f8:141:1272::2
how can i: build a zig "lib" object from which i can call functions at runtime in another zig program? context: i'm writing a programming language with a VM, and i'd like to be able to import either other script or "native" libraries built with zig that manipulates my VM state (much like lua does)

1632423460
bgiannan!giann@2a01:4f8:141:1272::2
i think i can use @export from the "lib", but how can i load it at runtime from my VM?

1632423486
bgiannan!giann@2a01:4f8:141:1272::2
hum @extern?

1632423519
ifreund!~ifreund@user/ifreund
yep, or just the export and extern keywords

1632423559
ifreund!~ifreund@user/ifreund
note that you are restricted to passing C ABI compatible types across the boundry

1632423609
bgiannan!giann@2a01:4f8:141:1272::2
what does that imply? is it limiting in any way?

1632423686
ifreund!~ifreund@user/ifreund
if you want to pass a struct from your VM to your library, you need to use a struct with a well-defined memory layout, probably an extern struct

1632423709
ifreund!~ifreund@user/ifreund
also no comptime or error sets on the ABI boundry

1632423714
ifreund!~ifreund@user/ifreund
or slices

1632423721
ifreund!~ifreund@user/ifreund
everything must have a well-defined memory layout

1632423753
bgiannan!giann@2a01:4f8:141:1272::2
ah bummmer

1632423811
bgiannan!giann@2a01:4f8:141:1272::2
and this is the only way to do it? being C ABI compliant?

1632423830
bgiannan!giann@2a01:4f8:141:1272::2
this is going to be a lot of work to convert my struct into that

1632423838
ifreund!~ifreund@user/ifreund
if you want to dynamically load code at runtime, yes

1632423856
ifreund!~ifreund@user/ifreund
this does mean you get compatibilty with all languages that speak the C abi though

1632423860
ifreund!~ifreund@user/ifreund
which is pretty much all languages

1632423866
bgiannan!giann@2a01:4f8:141:1272::2
right

1632423900
bgiannan!giann@2a01:4f8:141:1272::2
if i had known that from the get go i would have structured things differently

1632424069
ifreund!~ifreund@user/ifreund
bgiannan: you do also have the option of treating whatever struct you have currently as an opaque type on the ABI boundry

1632424085
bgiannan!giann@2a01:4f8:141:1272::2
what does that mean?

1632424089
ifreund!~ifreund@user/ifreund
which would mean that you can only access the fields of the struct from your VM code, not from libraries

1632424108
ifreund!~ifreund@user/ifreund
you could however provide getter/setter functions to acces the fields from libraries

1632424122
ifreund!~ifreund@user/ifreund
I don't know if this makes sense for your use-case, but it's an option

1632424155
bgiannan!giann@2a01:4f8:141:1272::2
not sure i got that

1632424199
bgiannan!giann@2a01:4f8:141:1272::2
so a struct i would pass to the library could not be actually used by it ?

1632424281
ifreund!~ifreund@user/ifreund
the library would be able to store a pointer to the struct and pass that pointer back to the VM, as the argument of a function for example

1632424306
ifreund!~ifreund@user/ifreund
the library would however be unaware of the memory layout of the struct and thus unable to access the fields of the struct directly however

1632424353
bgiannan!giann@2a01:4f8:141:1272::2
could it no just @ptrCast to the actual struct?

1632424367
ifreund!~ifreund@user/ifreund
not if the struct doesn't have a well defined memory layout

1632424399
ifreund!~ifreund@user/ifreund
and if it did have a well defined memory layout, there would be no point in making it an opaque type

1632424417
ifreund!~ifreund@user/ifreund
(well, maybe to hide implementation details, but that's a different story)

1632430140
bfiedler!~bfiedler@2a0d:d740:107::3
just got this failure in release-safe mode: test failed: expected 15, found 15

1632430269
bfiedler!~bfiedler@2a0d:d740:107::3
It passes in release-small, release-fast and debug modes

1632430636
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
elite

1632431115
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, thinking about it, the library doesn't need to access the struct fields, it just needs to use functions coming from the VM which know how to use that pointer

1632431129
bgiannan!giann@2a01:4f8:141:1272::2
and pass around the pointer

1632431177
bgiannan!giann@2a01:4f8:141:1272::2
not sure how to write that in zig though

1632431192
bgiannan!giann@2a01:4f8:141:1272::2
what would a minimal example of this look like?

1632431270
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
What do you mean?

1632431281
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
All of your API functions simply take and return pointers rather than structs

1632431287
bgiannan!giann@2a01:4f8:141:1272::2
yes

1632431294
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
That's the only difference :)

1632431333
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
You *might* have to/want to declare your structs as opaque? I know that keyword exists and it's something to do with shuffling things back and forth across the C ABI iirc.

1632431350
bgiannan!giann@2a01:4f8:141:1272::2
that's what ifreund was suggesting earlier

1632431389
bgiannan!giann@2a01:4f8:141:1272::2
and i was saying i don't know how to declare the struct as opaque and still use it on the VM side as the struct i need

1632431590
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Looking at things...

1632431591
ifreund!~ifreund@user/ifreund
bgiannan: hope this clears it up: https://zigbin.io/a8b5f6

1632431598
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
I think on your srever-side you declare the struct as normal

1632431607
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
and then on the other side of the C ABI (your plugin API) you declare it as opaque

1632431619
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, perfect that clears it up 

1632431640
ifreund!~ifreund@user/ifreund
you can also put declarations inside the opaque {}, if you want to do something like foo.bar(); in the lib code

1632431690
ifreund!~ifreund@user/ifreund
this is the pattern I tend to use for binding C code: https://github.com/swaywm/zig-wlroots/blob/d2df3f71578eb767bced89ae1044a046b7fa22a0/src/types/surface.zig#L128-L129

1632431694
bgiannan!giann@2a01:4f8:141:1272::2
how does the library code imports the functions we declared on the VM side?

1632431730
ifreund!~ifreund@user/ifreund
bgiannan: the extern definitions are all you need code-wise

1632431870
bgiannan!giann@2a01:4f8:141:1272::2
alright and how can the VM import the library at runtime?

1632431992
ifreund!~ifreund@user/ifreund
bgiannan: std.DynLib I guess though I haven't used it myself yet

1632432009
ifreund!~ifreund@user/ifreund
it's the equivalent of dlopen(3) in C

1632432016
bgiannan!giann@2a01:4f8:141:1272::2
looking it up

1632432023
ifreund!~ifreund@user/ifreund
(and just wraps that if you link libc i believe)

1632432057
ifreund!~ifreund@user/ifreund
isn't dynamic linking so much fun!

1632432170
companion_cube!~simon@user/companion-cube
Zig doesn't have any notion of a type private to the rest of the program, does it? Like pimpl? 

1632432208
ifreund!~ifreund@user/ifreund
companion_cube: you can do that in zig, it's just a little bit awkward and more than a little pointless IMO

1632432241
companion_cube!~simon@user/companion-cube
With opaque + pointer casts? 

1632432245
ifreund!~ifreund@user/ifreund
(to do it make your struct non pub and @ptrCast() to a pub opaque type at all pub usage locations)

1632432262
companion_cube!~simon@user/companion-cube
Sometimes encapsulation is good

1632432274
companion_cube!~simon@user/companion-cube
Yeah that's what I thought, ouch

1632432378
ifreund!~ifreund@user/ifreund
companion_cube: you don't need that to do encapsulation, just add a doc comment saying /// this field is private, if you touch it and things break it's your own fault

1632432385
companion_cube!~simon@user/companion-cube
Yikes

1632432410
companion_cube!~simon@user/companion-cube
At least fields can start with _ right? 

1632432433
companion_cube!~simon@user/companion-cube
Doc comments are like "this can be null btw ;)" 

1632432442
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
isnt that the job of the type?

1632432444
companion_cube!~simon@user/companion-cube
Instead of a nullable type

1632432490
ifreund!~ifreund@user/ifreund
yeah you don't need a doc comment to tell you something can be null in zig

1632432494
ifreund!~ifreund@user/ifreund
that's part of the type

1632432563
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, should i compile the library with `zig build-lib` ? seems like DynLib.open expectes a .dylib on macos but zig build-lib writes a .a?

1632432582
ifreund!~ifreund@user/ifreund
bgiannan: build-lib -dynamix

1632432590
ifreund!~ifreund@user/ifreund
-dynamic 

1632432602
bgiannan!giann@2a01:4f8:141:1272::2
ah thx

1632432606
companion_cube!~simon@user/companion-cube
My point is that zig tries to avoid this kind of doc comment

1632432677
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, i need to link it somehow so that the extern declaration in the library can be resolved ?

1632432720
bgiannan!giann@2a01:4f8:141:1272::2
maybe i need a build.zig 

1632432728
earnestly!~earnest@user/earnestly
Does zig maintain a list of hazards?  Things such as those which are to be fixed and could cause problems (perhaps an example could be error sets)

1632432762
earnestly!~earnest@user/earnestly
Or iow, pitfalls

1632432776
ifreund!~ifreund@user/ifreund
bgiannan: yes, I believe you should build your vm binary that has the main entry point as a dynamic executable and link against that

1632432793
ifreund!~ifreund@user/ifreund
or alternatively build the lib with -fallow-shlib-undefined, though that feels hacky

1632432804
ifreund!~ifreund@user/ifreund
earnestly: there's a "design flaw" tag on github for stuff like that

1632432845
ifreund!~ifreund@user/ifreund
or hmm, there used to be one...

1632432936
ifreund!~ifreund@user/ifreund
I guess the answer is no, we don't have a concise lists of things that are currently broken/to be avoided

1632432977
earnestly!~earnest@user/earnestly
Those sorts of lists are often great ways to learn, ime.  Especially for mature languages which have accepted their flaws and provide workarounds

1632433178
ifreund!~ifreund@user/ifreund
yes, that certainly seems like a valueable piece of documentation to have

1632433267
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, how do i "link against that" though?

1632433430
bgiannan!giann@2a01:4f8:141:1272::2
ah -l[lib] i suppose

1632433496
ifreund!~ifreund@user/ifreund
bgiannan: if using plain zig build-lib, putting the shared object on the command line should be all you need

1632433503
ifreund!~ifreund@user/ifreund
-l is for system libraries really

1632433597
bgiannan!giann@2a01:4f8:141:1272::2
ah

1632433605
bgiannan!giann@2a01:4f8:141:1272::2
i did -lthelib -L.

1632433628
ifreund!~ifreund@user/ifreund
that should work fine too

1632433630
bgiannan!giann@2a01:4f8:141:1272::2
seems to work only DynLib.open doesn't find the .dylib file that is right there

1632433645
bgiannan!giann@2a01:4f8:141:1272::2
i assume it's searching in cwd which should work

1632433657
ifreund!~ifreund@user/ifreund
hmm, you're on macos right?

1632433695
bgiannan!giann@2a01:4f8:141:1272::2
yes

1632433746
ifreund!~ifreund@user/ifreund
did you do ./foo.dylib or just foo.dylib? they aren't the same

1632433749
bgiannan!giann@2a01:4f8:141:1272::2
ah works

1632433750
ifreund!~ifreund@user/ifreund
you probably want the former

1632433769
bgiannan!giann@2a01:4f8:141:1272::2
yes it was just a silly mistake

1632433789
ifreund!~ifreund@user/ifreund
well, normally they would be the same but dlopen has special rules

1632433817
ifreund!~ifreund@user/ifreund
if there's no / in the name it doesn't treat it as a path but rather as a name and goes looking in various places depending on the environment

1632433830
ifreund!~ifreund@user/ifreund
(not necessarily including the working directory)

1632434003
bgiannan!giann@2a01:4f8:141:1272::2
actually none works ><

1632434062
ifreund!~ifreund@user/ifreund
maybe it's different on macos, I'm reading the linux man page :D

1632434096
bgiannan!giann@2a01:4f8:141:1272::2
the man page for what?

1632434114
ifreund!~ifreund@user/ifreund
dlopen

1632434258
bgiannan!giann@2a01:4f8:141:1272::2
it says when there's a / in there it'll end up looking relative to cwd

1632434412
bgiannan!giann@2a01:4f8:141:1272::2
absolute path doesn't work either

1632434416
bgiannan!giann@2a01:4f8:141:1272::2
i'm out of ideas

1632434444
bgiannan!giann@2a01:4f8:141:1272::2
tried: lib.dylib, ./lib.dylib, /absolute/path/to/lib.dylib

1632434447
ifreund!~ifreund@user/ifreund
what behavior are you actually seeing? dlopen returning an error?

1632434473
bgiannan!giann@2a01:4f8:141:1272::2
File not found yes

1632434590
ifreund!~ifreund@user/ifreund
bgiannan: hmm, the zig std doesn't do a good job of error reporting there

1632434590
bgiannan!giann@2a01:4f8:141:1272::2
here's what i did: https://zigbin.io/bda00c

1632434600
ifreund!~ifreund@user/ifreund
you could try calling dlerror(3) to get more information

1632434723
ifreund!~ifreund@user/ifreund
just `extern fn dlerror() [*:0]u8;` and then call it and print the string

1632434888
bgiannan!giann@2a01:4f8:141:1272::2
dlopen(./libexport.dylib, 1): Library not loaded: @rpath/libcommon.dylib

1632434891
bgiannan!giann@2a01:4f8:141:1272::2
  Referenced from: /Users/giann/git/buzz/zig-test/libexport.dylib

1632434893
bgiannan!giann@2a01:4f8:141:1272::2
  Reason: image not found

1632434898
bgiannan!giann@2a01:4f8:141:1272::2
but is the correct path

1632435295
bgiannan!giann@2a01:4f8:141:1272::2
ah that's the reference to libcommon inside libexport that is the issue

1632435739
bgiannan!giann@2a01:4f8:141:1272::2
alright figured it out

1632435778
bgiannan!giann@2a01:4f8:141:1272::2
zig build-exe common.zig -dynamic

1632435780
bgiannan!giann@2a01:4f8:141:1272::2
zig build-lib common.zig -dynamic

1632435782
bgiannan!giann@2a01:4f8:141:1272::2
zig build-lib export.zig -dynamic -lcommon -L. -rpath .

1632435802
bgiannan!giann@2a01:4f8:141:1272::2
i needed to add a rpath so libexport can resole libcommon

1632435826
bgiannan!giann@2a01:4f8:141:1272::2
used otool to know where the lib was expected to be found and it said @rpath/libcommon.dylib

1632436252
ifreund!~ifreund@user/ifreund
bgiannan: nice work! dynamic linking is fun(TM)

1632436474
bgiannan!giann@2a01:4f8:141:1272::2
will error set work?

1632436488
bgiannan!giann@2a01:4f8:141:1272::2
do i have to specify the error sets by hand?

1632436617
ifreund!~ifreund@user/ifreund
bgiannan: the values zig assigns to errors are specific to the compilation unit, so no you can't pass zig error values across the C ABI and expect them to preserve meaning on the other side

1632436660
ifreund!~ifreund@user/ifreund
you could probably have a function that takes an error set and spits out an enum type at comptime though

1632437526
bgiannan!giann@2a01:4f8:141:1272::2
going to bed, thanks for the help ifreund. i think i know what to do now to have a nice library system that will be usable from my language

1632437578
ifreund!~ifreund@user/ifreund
bgiannan: no problem! interested to hear where the project takes you :)

