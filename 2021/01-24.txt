1611446424
justin_smith
marijnfs: I'd usually use "1 << N" to create the operand, then use ^ to xor the two

1611446449
Gliptic
if it's a [32]u8, you need to compute which byte as well

1611446452
marijnfs
ok then I need logic to find the right u8 and work with that

1611446455
marijnfs
yeah

1611446461
ifreund
you could consider checking out std.PackedIntArray()

1611446491
marijnfs
that sounds interesting

1611446497
ifreund
though I don't know how well it'll map to whatever else you are doing

1611446502
marijnfs
although in general I like the simplicity of [32]u8

1611446521
marijnfs
yeah I also make an AutoHashMap with it e.g.

1611446529
marijnfs
probably starts to get annoying

1611446541
justin_smith
marijnfs: to find the byte for a given bit offset, you could use "N >> 3"

1611446574
justin_smith
then "N & 7" to find the offset in that byte - I thin

1611446576
justin_smith
k

1611446592
justin_smith
but maybe PackedIntArray is easier

1611446639
ifreund
you can also cast to the PackedIntArray and back if you want of course

1611446831
marijnfs
justin_smith: yeah i'm using / and % 256 for now;)

1611446880
marijnfs
but he doesn't like my shift

1611446919
marijnfs
: LHS of shift must be a fixed-width integer type, or RHS must be compile-time known

1611446930
marijnfs
id[byte_id] = id[byte_id] ^ (1 << bit_id);

1611446935
marijnfs
bit_id is a usize

1611447044
Gliptic
you need a specific type for that "1"

1611447235
ifreund
probably @as(u8, 1)

1611447274
ifreund
and bit_id would need to be a u3

1611447465
marijnfs
zig is picky

1611447552
marijnfs
ifreund: ok that worked, has to @intCast to u3.

1611447701
ifreund
can't just make it a u3?

1611447758
Gliptic
does zig understand that x & y becomes the narrower width integer of the two?

1611447781
Gliptic
if so, you'd think x & @as(u3, 7) would work

1611448800
kameliya[m]
that'd be neat

1611481333
frett27_
hi, a small question, i working for a zig sample to use the cimgui, when importing the cimgui.h file, using @cImport , it does not compile

1611481396
frett27_
the code:

1611481558
frett27_
seems there are cpp directive in this C code,

1611481694
ifreund
frett27_: might be worth checking out:

1611481748
ifreund
and yeah it looks like there's c++ in the header you're using :/

1611481772
frett27_
ifreund: yes, i know this, but they reimplement the c definition in zig

1611481780
frett27_
and is sticked to windows

1611481876
frett27_
ifreund: from your perspective (better experience), do you think fixing the cimgui header is better, or make a native binding generator for zig ? (as they does it for c )?

1611481917
ifreund
native bindings will always be better than what @cImport() can provide

1611481927
ifreund
but they are usually more work as well

1611482012
frett27_
i had no experience in binding C++ to zig, any informations, projects or pointer ? is it also an option ?

1611482783
frett27_
ifreund: ho my, i'll looked at Zig-Imgui, the bindings are generated, i was messed up by the files in the repo

1611482798
frett27_
ifreund: 'll dig into it

1611482898
frett27_
ifreund: thank's for you attention

1611483220
ifreund
no problem!

1611489446
sacredbirdman
Hi, I have some trouble wrapping my head around this.. I have a multidimensional array declared like: var cmlen: [M_DIM][M_DIM][M_DIM]u32 = undefined;

1611489551
sacredbirdman
I have two questions.. how is this allocated.. should I be allocating the memory myself or is this sane code (say when M_DIM is 16)

1611489585
sacredbirdman
and what's the best way to initialize the whole thing to zero?

1611489603
ikskuh
heya sacredbirdman

1611489614
ikskuh
the memory is allocated automatically

1611489631
ikskuh
it's just a value like "var foo: u32 = undefined;"

1611489633
ikskuh
but bigger

1611489688
ikskuh
so it will be on the stack

1611489693
ikskuh
if it's a local variable

1611489702
ifreund
std.mem.zeros() to init to zero easily

1611489703
ikskuh
or in the static memory if it's a global variable

1611489718
ikskuh
var cmlen = std.mem.zeroes([M_DIM][M_DIM][M_DIM]u32);

1611489752
sacredbirdman
thanks, that looks good :)

1611489771
ikskuh
std.mem.zeroes is really convenient

1611491185
ifreund
hmm, I think we need non-exhaustive tagged unions

1611491198
ifreund
or can you already do that by setting the enum manually?

1611491262
ikskuh
hm, good question

1611491377
ifreund
looks like you can use a non-exhaustive enum to define a tagged union but it doesn't force you to handle the else branch when switching on the union

1611491405
ifreund
so yeah, we need that

1611491437
ifreund
cause currently zig-wayland isn't properly forward-compatible because of this

1611499322
HarryHaaren
hey folks, anybody used Zig CC mode for cross-compile using Meson build system?

1611500212
ifreund
HarryHaaren: you probably need a master build of zig:

1611500278
HarryHaaren
ifreund: Nice one thanks!

1611501796
HarryHaaren
posted a comment on the PR, i'm having issues configuring the build with Meson and CC="zig cc"  details at:

1611502581
hristo
Hi. I've submitted a pull request but the Microsoft CI thing failed on Linux (`apt-get update` failed,

1611502644
g-w1
rebase with master is usually the best way or have someone close and re-open it

1611503947
Akuli
i have pushed empty commits to trigger ci in the past

1611503954
Akuli
git commit --allow-empty

1611505286
HarryHaaren
hey all - I just downloaded latest Zig master tarball, but there's no README on how to install/use. I know I can use "inplace", but I'm attempting to have Meson (build system) pick up the Zig install, so want the zig binary in /usr/local/bin.

1611505300
HarryHaaren
TLDR: Is there a "proper" way to install Zig from master-tarball?

1611505547
HarryHaaren
(temp workaround identified, use absolute path to Zig, leaving the zig lib/* data in place)

1611505684
ifreund
HarryHaaren: the lib folder just needs to stay in the same place relative to the binary

1611505697
ifreund
so put it in /usr/local/lib if your binary is in /usr/local/bin

1611505711
HarryHaaren
ifreund: thanks again!

1611505717
ifreund
I prefer ~/.local myself though for such things

1611505720
ifreund
no problem!

1611505752
HarryHaaren
yeah good point - i tend to abuse /local a bit, but ~/.local is a better idea

1611513805
andrewrk
welcome HarryHaaren! I have a fond memory of meeting you and chatting with you at the VLC conference many years ago in Dublin :)

1611516450
HarryHaaren
hey andrewrk, you've a good memory, yes indeed, it was good fun

1611516480
HarryHaaren
Working on using ZigCC for some static x86_64 to arm64 cross-compilation, so far making progress

1611516498
HarryHaaren
with Meson build system - you merged some feature support 5 days ago - nice nice, that's confirmed working here

1611516507
HarryHaaren
will report back in a bit how i'm getting on with the rest of it

1611516732
andrewrk
see ya

1611524719
motiejus
hi all. Does `zig cc` bundle/expose `ld`? I am trying to compile `xz`, and `./configure` script fails, as it doesn't find ld. Also/more details on SO:

1611524773
g-w1
zig ld.lld

1611525123
motiejus
thanks. what about `ar` and `as`?

1611525490
g-w1
hmm I dont know, but for the linker, ld.lld is only elf. check main.zig:2897 for the others

1611525845
motiejus
thanks. I can't find it there easily, but don't need it for xz (another time). have a good day

1611525914
andrewrk
motiejus, for ar you can do `zig build-lib` and for `as` you can do `zig build-obj`

1611525939
andrewrk
for as you can also use `zig cc`

1611526003
motiejus
thanks!

1611526806
motiejus
Another question: is `zig cc` a long-term feature, or something you added "temporarily" until you have a self hosted compiler? I am contemplating to create a bazel clang toolchain on top of `zig cc`, but not sure about its plans/longevity

1611526836
motiejus
Will it be useful/necessary for zig itself post v1?

1611526947
andrewrk
motiejus, long term feature that will always be available when llvm extensions are enabled

1611526989
daurnimator
`zig build-lib` isn't 100% compatible with ar... maybe we should have a `zig ar` for compat reasons?

1611527331
andrewrk
I think that's a worthwhile proposal

1611527379
motiejus
Can you elaborate on llvm extensions? Not sure if you are referring to this:

1611527443
motiejus
For my purposes (clang frontend) it seems like I can just ignore the second part of the sentence? :)

1611527886
andrewrk
I gave you an unnecessary amount of detail - I only meant to communicate that Zig's LLVM dependency is optional

1611527928
andrewrk
yes zig cc is here to stay :)

