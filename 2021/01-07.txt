1610004421
mikdusan
a new tag showed up: llvmorg-11.0.1

1610004481
andrewrk
yep

1610004517
andrewrk
no source changes needed on our end. need to update CI tarballs tho

1610004527
andrewrk
just did it for linux

1610025430
xackus
daurnimator I can't use the std.meta.fieldInfo because I wasn't using a fixed string literal

1610025463
xackus
was that a use case considered?

1610028346
koakuma
Is there any way to completely disable optimizations in a build?

1610028346
koakuma
I found out that even with -O Debug it still seems to perform some optimizations (like inlining and some precomputations)

1610028378
pixelherodev
I don't think so - the optimizations it's performing are probably related to comptime evaluation

1610028396
pixelherodev
e.g. a function explicitly marked inline will always be inlined, no matter what

1610035920
olabaz
Hi, is it possible to modify a function parameter? For example f(x: i32) { x += 1}?

1610036037
ifreund
olabaz: no, function parameters are always const

1610036064
ifreund
you can do fn foo(x: i32) { var x2 = x; x2 +=1; }

1610036139
olabaz
if I pass in a pointer, can I change it contents?

1610036197
dutchie
yes

1610036228
dutchie
it'll be as if it was defined with `const ptr: *Foo = ...`

1610036262
olabaz
ok thanks

1610041672
marler8997
hmmm, so yesterday zig build starting putting binaries in debug/bin, but now they are back in zig-cache/bin?

1610041832
g-w1
yes

1610041844
g-w1
it got reverted, there was a regression

1610041860
mikdusan
reverted fc38b42521027b2ddcba688ba07bd2f6eb2737bc

1610041900
marler8997
I've been updating all my scripts and documentation

1610041912
marler8997
so is the plan to unrevert it as some point?

1610041929
g-w1
it will be discussed in the compiler meeting today.

1610043808
olabaz
In the zig docs they have std.io.getStdOut().writer() but in the std doc they don't have getStdOut() function?

1610043816
olabaz
I'm confused where I can get the info

1610043838
marler8997
right now the most reliable docs is the source code

1610043843
fengb
Donâ€™t trust the std docs

1610044014
olabaz
I'm not even sure where to find it in the source

1610044047
olabaz
I'm looking through lib/std/io

1610044078
mikdusan
many times there is file and dir, so `io.zig` and `io/*.zig`

1610044109
olabaz
ah io.zig

1610048888
pixelherodev
Is "true=1, false=0" a defined part of the language, or an implementation detail?

1610048915
pixelherodev
@boolToInt gives those results, so I think it makes sense that they'd be in the eventual spec?

1610048945
justin_smith
pixelherodev: I didn't even expect that to be true?

1610048958
pixelherodev
Why not?

1610048975
justin_smith
I'd expect true == 1 to be a compiler error

1610048983
ifreund
it is

1610048985
pixelherodev
... I meant in terms of codegen lol

1610048995
pixelherodev
Not "Is this a valid comparison?"

1610048998
ifreund
I don't think that needs to be defined

1610049002
pixelherodev
True

1610049023
pixelherodev
For Zyg, I'll probably have them be templates which lower implicitly to integers...

1610049052
ifreund
or maybe it does, I think I actually rely on that behavior

1610049066
ifreund
(true being 1/false being 0)

1610049095
FireFox317
internally it doesnt matter, as long as @boolToInt returns 1 for true and 0 for false

1610049103
FireFox317
i think

1610049105
ifreund
it makes using a packed struct of bools as a bitfield possible

1610049117
FireFox317
ah true

1610049139
pixelherodev
but that's not a supported use case, is it?

1610049152
pixelherodev
Hmm, it should be IMO

1610049157
ifreund
I don't see why it shouldn't be

1610049170
pixelherodev
I think you're right

1610049181
pixelherodev
Fortunately, templating means I can change the generated lowered form later anyways :D

1610053219
fengb
@boolToInt(false) == 1

1610053223
fengb
...

1610053229
fengb
@boolToInt(true) == 1

1610053261
fengb
Hmm... I suppose @bitCast(u1, true) == 1 as well?

1610053318
pixelherodev
That's my question.

1610053324
pixelherodev
fengb: that's exactly the question.

1610053338
pixelherodev
If so, then IMO @boolToInt should be removed in favor of bitcasting.

1610053359
pixelherodev
(Since @boolToInt would just be a specialized bitcast)

1610053365
pixelherodev
This is

1610053470
ifreund
even now it could just be `if (foo) 1 else 0`

1610053484
ifreund
I was very surprised to discover its existence

1610053625
pixelherodev
Yeah, I think boolToInt and intToBool should be removed...

1610053631
pixelherodev
> Only one way

1610053697
pixelherodev
I do think bool as a separate type from u1 is good, because there's a semantic difference

1610053702
pixelherodev
But the casting is weird rn

1610058852
justin_smith
is it not an enum / @enumToInt() situation?

1610059045
pixelherodev
Not really, IMO

1610059055
ifreund
no? enum values can be manually specified

1610059123
justin_smith
I hadn't found the implementation and wouldn't have been surprised if it were an enum

1610059133
pixelherodev
It's a primitive

1610059482
andrewrk
marler8997, have a look at

1610059527
ifreund
daurnimator probably has an opinion as well

1610059585
daurnimator
andrewrk: I don't think `prefix` should mean what you think it means

1610059613
daurnimator
andrewrk: in build systems --prefix is used to tell the toolchain where the final binaries will be installed on a system.

1610059643
daurnimator
common choices being /usr, /usr/local, /opt/myprogram

1610059662
daurnimator
but also e.g. /home/user/.local/

1610059761
daurnimator
the prefix gets used when hardcoding paths into the binary for e.g. DT_RUNPATH, but also where to find config files by default, etc

1610059865
ifreund
yes all of that is true, and installing to the prefix being the only way to get a binary out of the zig build system means that you will always be testing your program "for real"

1610059906
daurnimator
ifreund: only if you care about those hard-coded paths. for a huge swathe of programs.... they don't end up needing any of those

1610059958
ifreund
is there a downside to always installing to the prefix?

1610059963
daurnimator
yes

1610059971
daurnimator
we need to separate the "build" step from the "install" step

1610059998
ifreund
why exactly?

1610060028
ifreund
I know this is what package managers tend to expect but I don't see why it must be a hard requirement

1610060047
daurnimator
because I want to be able to generate binaries that contain "/usr/local/lib/libfoo.so.1" without actually having to install it on

1610060064
daurnimator
--> e.g. I want to build on my desktop, and install on my laptop

1610060088
daurnimator
or build for an embedded device (my router) from my desktop; and then copy the binaries across

1610060111
ifreund
can't you use DESTDIR to do that?

1610060132
pixelherodev
No

1610060140
pixelherodev
It'd have the wrong rpath

1610060163
daurnimator
ifreund: yes.... but that's not how DESTDIR traditionally works....

1610060172
daurnimator
pixelherodev: no it wouldn't?

1610060198
pixelherodev
DESTDIR doesn't affect rpath, generally?

1610060201
daurnimator
ifreund: however that would be a good hack for now :)

1610060205
daurnimator
pixelherodev: correct. which is the point of it

1610060214
daurnimator
(in this situation)

1610060495
marler8997
what's the rationale behind using CWD as default prefix?

1610060518
marler8997
instead of the build.zig directory?

1610060554
daurnimator
that actually makes sense: think about "prefix" as "the path that gets hard-coded into the binary": hardcoding a relative path of... `.` makes sense

1610060560
daurnimator
(as a default)

1610060622
marler8997
> hardcoding a relative path of... `.` makes sense (as a default)?...   but why though?

1610060632
daurnimator
marler8997: what other default would make more sense?

1610060643
marler8997
> instead of the build.zig directory?

1610060663
daurnimator
marler8997: why would I want the build.zig directory hard-coded into my binary?

1610060669
daurnimator
that might make sense as the default install

1610060678
daurnimator
but we need to separate that from the "prefix"

1610060702
marler8997
I dunno, I'm not saying one is better, I'm asking why CWD is being chosen over build.zig directory

1610060710
marler8997
why does it make more sense to you?

1610062735
daurnimator
marler8997: I don't particularly have an opinion on that.

1610062991
g-w1
cwd is default rn

