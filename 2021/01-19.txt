1611015629
daurnimator
ifreund: "libc doesn't offer a cos() that takes a float" -> what about `cosf`?

1611015709
daurnimator
and then there's also tgmath.h

1611017943
marijnfs2
does anyone have opensuse? i have trouble with getting zig to find llvm

1611018177
mjsir911
Hello all o/. I need to assert structs(or, easier: tuples)  with strings are equal but I can't because strings are pointers and testing compares pointers in structs literally. what can I do?

1611018270
marijnfs2
mjsir911: use std.mem.eql

1611018279
marijnfs2
there is more in std/mem.zig

1611018304
mjsir911
ah, so I need to manually compare every field?

1611018337
marijnfs2
yeah or you make a comptime function, that's more complicated

1611018389
mjsir911
alright, thank you marijnfs2 ! Looking through testing.zig it seems to do array comparisons sometimes, but only with actual .Array types which I think need known lengths at compile time

1611021707
g-w1
mem.eql can also do it with slice

1611022199
daurnimator
there's also std.meta.eql, but it too doesn't follow pointers

1611024846
andrewrk
g-w1, have a look at the commit I just pushed

1611024859
andrewrk
it's related to optionals/error sets zir/tzir

1611026017
g-w1
yep, im having to rebase a LOT on 7628 rn ;) but at least its unblocked

1611026143
g-w1
are there any parts of stage2 that are not prone to merge conflicts?

1611026969
g-w1
sooo close to catch at comptime!

1611028860
andrewrk
g-w1, it's organized pretty decently to avoid conflicts I think - you're dealing with conflicts precisely because we implemented the same thing in different ways

1611028913
andrewrk
also the reason I worked on the same thing as you was to help merge your PR - so the conflicts are due to us working together on the same thing. I think it's natural and OK

1611028927
andrewrk
s/it's/conflicts are/

1611028944
g-w1
ok nice. well 7628 is basically ready for review now. I just need to look it over in the morning and then its ready.

1611028989
andrewrk
cool

1611029415
andrewrk
hmm it occurred to me that `zig cc` could be doing LTO automatically (or at least make it as simple as -fLTO)

1611030916
daurnimator
andrewrk: have you had any further thoughts of our discussion after 7638 ?

1611031003
andrewrk
no

1611037658
mjsir911
whats the point of a while(optional) || {} else {} construct? Isn't this equivalent to code after the while loop?

1611037732
kameliya
when you break; from a while, the else {} doesn't get run.

1611037757
mjsir911
Ah, that is useful, ty kameliya !

1611037783
mjsir911
not very clear in the manual :P

1611037787
kameliya
you can also break with a value. if it doesn't break, the else branch's value is used.

1611037795
kameliya
heh, i'm just reading from it :p

1611037838
kameliya
check the "rangeHasNumber" example for an example that uses break and else with values.

1611037863
mjsir911
You're looking at

1611037869
kameliya
i am looking at that.

1611037873
kameliya
that's a good overall reference

1611037884
kameliya


1611037904
mjsir911
ah I see, just needed to look up a bit from the labelled while I was looking at

1611037924
kameliya
finally, the source itself for the stdlib (i.e. the parts written in zig) is very readable, when you need to find a function. the autogen'd docs are not superb at the moment.

1611037925
kameliya
ahh right

1611037960
mjsir911
Yeah I've been having a good time with the source. Thanks a lot!

1611037972
kameliya
great! np!

1611042921
tane
howdy

1611043557
kameliya[m]
howdy!

1611044127
FireFox317
andrewrk, `var opt_val: ?i32 = 10; var val1: i32 = opt_val.?;` does not make it to TZIR. `expected i32, found ?i32`

1611048886
ifreund
daurnimator: even cosf uses doubles internally (at least musl does)

1611050780
tane
is there something like @compileLog that doesn't induce compilation errors?

1611051236
FireFox317
tane: `std.debug.print`?

1611051277
squeek502
tane, unfortunately not, see

1611051387
tane
I see

1611051410
tane
from that discussion I don't get what the future plan is

1611051645
FireFox317
tane, i think in the current implementation of stage2 a `compileLog` does not immidiately end analysis, but still continues, so you can have multiple `compileLog`s. But at the end the compiliation will still fail

1611051664
tane
yes

1611051680
FireFox317
that is better right?

1611051690
tane
it's better but still bad

1611051708
tane
anyway, I can live with that for now :)

1611051723
FireFox317
unfortunately stage2 is still far from finished haha

1611051732
uael
hello, I would like to start playing with the sources, does anyone has a shell.nix to share ?

1611052056
uael
dutchie working, thanks

1611059207
g-w1
andrewrk: are we moving away from the analyzeInst pattern in zir_sema and just doing the name of the inst?

1611081668
andrewrk
yes

1611083824
leeward
Huh, all these constants, when preprocessed, are just translated to symbols for the linker script to replace. The addresses aren't even kept.

1611083844
leeward
This is going to make automating this library's translation a bit harder.

1611084243
FireFox317
leeward, im not sure what you are doing, but maybe using `var` will work

1611084382
justin_smith
how hard would it be to to replace std.test.expect with something that bottoms out at the test location? a standard vim build tool integration will jump to the first item in the failure list, and that means it takes me from my failing test to std.testing/expect where it calls @panic

1611084434
justin_smith
the straightforward thing of course is to replace `expect(foo)` with `if (foo) {} else @panic("test failure")` but maybe there's something nicer...

1611084564
justin_smith
or of course if (!foo) @panic(...) - maybe that's good enough, I guess I rubber ducked it

1611084697
justin_smith
actually that's better than test.expect because it lets me specify a failure message to go with the test

1611086258
leeward
FireFox317: I'm porting the SFR definitions for an embedded platform. All these addresses have to be volatile, so until we have volatile blocks or something like them it's just a bunch of pointers.

1611088021
zags
hey

1611088026
zags
defer file.close();

1611088050
zags
scratch that

1611088053
zags
error: expected type '[]const u8', found '[1024]u8'

1611088063
leeward
Slice it.

1611088065
zags
what's the zig way of converting that?

1611088066
ifreund
you're missing a &

1611088084
ifreund
which will give you a *[1024]u8 which coerces to []const u8

1611088091
zags
oh I see

1611088116
leeward
Or, if you don't want all 1024 bytes, use [0..n] where n is the number of bytes you do want.

1611088117
zags
openFileAbsolute wanted a "[]const u8" so it was surprising to need taking the address here

1611088175
ifreund
you can also do foo[0..] which gives you the full slice, though its a little more typing than just the &

1611088180
fengb
Slices are fat pointers. Arrays are values in zig

1611088283
zags
fengb: fat pointers as in pointer+length?

1611088287
g-w1
yes

1611088361
zags
So *[1024]u8 coercion to []const u8 sets the pointer to the first element and then sets length to 1024

1611088518
ifreund
yep

1611088667
zags
Thanks. Now, is it possible in openFileAbsolute to handle ONLY the FileNotFound error and then all the other errors separately? Listing all possible errors is brutal.

1611088710
zags
In the catch |err| switch (err), that is

1611088726
zags
I guess only catch |err|, and then if it?

1611088739
g-w1
error.FileNotFound => { dothing}, else => {}

1611088747
dutchie
sure, you can do `{ .FileNotFound => { ... }, else => return err, }`

1611088753
dutchie
or {} to ignore it

1611088801
zags
Ok, thanks

1611088997
fengb
Youâ€™ll need to capture it if you want to remove it from the returned error set

1611089013
fengb
else => |e| return e

1611089111
zags
error: incompatible types: 'void' and 'std.fs.file.File'

1611089116
zags
const file = fs.openFileAbsolute(out[0..], fs.File.OpenFlags{ .read = true }) catch |err| switch(err) {

1611089120
zags
on the catch, hm

1611089222
dutchie
your switch is probably a void yeah

1611089276
zags
ahhh right, must return in the FileNotFound case as well

1611089313
dutchie
return or get a File somehow

1611089365
zags
yeah

1611089393
zags
next problem, it works if I pass path as a literal string, passing the slice above yields

1611089396
zags
if (std.debug.runtime_safety) assert(std.mem.indexOfScalar(u8, file_path, 0) == null);

1611089399
zags
:)

1611089451
zags
Nevermind, I passed the out buffer from "realpath" instead of the return value. Second time I do this mistake...

1611089453
leeward
Is it just me, or is std.c.parse broken? I get an error about std.c.tokenizer not having a member 'Source'  that looks internal to std.

1611089657
leeward


1611089675
leeward
er,

1611091254
leeward
Wow, yeah, this looks very broken. I don't see any bugs against std.c.parse, but it looks totally unusable at the moment.

1611091595
leeward
Looks like I have to find vexu.

1611091616
ifreund
What does it exist for? wasn't translate-c recently refactored/

1611091642
leeward
I don't know. I just want to parse me some C code.

1611092500
andrewrk
that might be dead code

1611092523
andrewrk
there is some c parsing happening for macros

1611093119
leeward
andrewrk: Do you happen to know where? That's actually all I want.

1611093448
ifreund
leeward: src/translate_c.zig  transPreprocessorEntities() I think

1611093472
ifreund
which seems to use std.c

1611093708
leeward
Ah, yep. There it is.

1611093725
leeward
parseCExpr seems a bit relevant too.

1611094606
Ristovski
andrewrk: et al: Is there a reason why this proposed fix has not made it?

1611094610
Ristovski
or was it just overlooked

1611094643
Ristovski
can confirm it fixes using `zig cc` with meson

1611094715
andrewrk
there's a way to suggest a diff for master branch

1611094740
andrewrk


1611094819
Ristovski
I know, just wanted to make sure there wasn't a reason before making a PR that would get rejected :P

1611097204
FireFox317
andrewrk, i found another edge case regarding the type inferrence of blocks in stage2. It is at the bottom of this gist (

1611097204
FireFox317
opinion is about this.

1611097294
andrewrk
I think this early in the design we should be extremely wary about things that feel like hacks

1611097304
andrewrk
taking a look now, thanks for the code snippet

1611097310
FireFox317
yep that is what i felt too

1611098950
andrewrk
FireFox317, I get `error: TODO implement rlWrap .block_ptr` for your example

1611099004
andrewrk
this is probably the case I was thinking of for why we would have thath result location

1611099019
FireFox317
andrewrk, yes that is expected. i have a patch

1611099159
FireFox317
andrewrk, hmm yeah that might be the case actually. But then still you cannot emit any instructions since you dont know the type of block yet.

1611099187
andrewrk
I can tackle this test case now if you want

1611099202
andrewrk
it's as good a task as any for stage2

1611099278
FireFox317
andrewrk, that would be awesome yes. I'm interested in learning how you would implement that.

1611099393
FireFox317
andrewrk, i added a diff to gist (

1611099475
FireFox317
actually not of the block type (that is done through the break instructions)

