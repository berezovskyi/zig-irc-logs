1631581050
kprotty[m]!~kprotty@2001:470:69fc:105::834
haze: yo

1631585196
op_4!~op_4@user/op-4/x-9116473
hey all, if i want to (de)serialize stuff in zig, specifically ArrayLists, what are my options? Looking at the source of std.json.serialize it doesn't seem to speclialise to this case. Will it work anyway?

1631589656
discipulus!~discipulu@user/discipulus
op_4: the following is json and array specific that might give you some ideas https://github.com/ziglang/zig/issues/8913.

1631603432
talismanick!~user@2601:644:8500:8350::90c5
I insalled zig from the Void repos (v0.8.1), and tried building zls from source: https://0x0.st/-xxB.txt

1631603450
talismanick!~user@2601:644:8500:8350::90c5
(using the instructions in the README)

1631603701
ibokuri!sid517924@user/ibokuri
@talismanick: 0.8.1 is too old, zls uses the latest of Zig. You can grab the latest version at https://ziglang.org/download

1631603783
talismanick!~user@2601:644:8500:8350::90c5
ibokuri: Oh! I thought 0.9.0 was a moniker for master, rather than a proper release. Will ZLS lint/refactor existing Zig?

1631603866
talismanick!~user@2601:644:8500:8350::90c5
https://github.com/ziglang/zig/wiki/Install-Zig-from-a-Package-Manager says 0.8.1 is the latest release? Is that analogous to a stable/LTS release?

1631603951
ibokuri!sid517924@user/ibokuri
It does linting, but I believe refactoring is done by the ‘zig fmt’ command, which in my case is ran by the zig vim plugin, not zls.

1631603979
talismanick!~user@2601:644:8500:8350::90c5
ibokuri: fmt refactors, altering the meaning of the code?

1631603991
talismanick!~user@2601:644:8500:8350::90c5
Also, what if I use Emacs?

1631604066
talismanick!~user@2601:644:8500:8350::90c5
ibokuri: Is Zig like Haskell and Python in having tools to choose a version per project?

1631604092
talismanick!~user@2601:644:8500:8350::90c5
Should there not be a "system Zig" in the standard PATH, to avoid confusion?

1631604379
ibokuri!sid517924@user/ibokuri
Well, Zig is still in development so stable/LTS isn’t really a thing rn. As for the versioning per project, no. Right now you basically download whatever version/release you want and use that. After 1.0 maybe we’ll get something like what you’re talking about.

1631604413
ibokuri!sid517924@user/ibokuri
Personally, i just have one system zig binary and then i update it often to whatever is the latest version

1631604471
ibokuri!sid517924@user/ibokuri
And for the zig fmt stuff, it doesn’t alter the meaning of your code, it just cleans it up (like whitespace) and updates the syntax if you’re using a deprecated one. Stuff like that

1631604551
ibokuri!sid517924@user/ibokuri
Oh, and idk anything about emacs, there might be a vim plugin idk

1631604565
ibokuri!sid517924@user/ibokuri
Emacs plugin**

1631619949
bfiedler!~bfiedler@2a0d:d740:107::3
How do I handle unix signals in zig? I haven't found anything by searching for "signal" in the docs

1631620099
ikskuh!~xq@2a0d:5940:6:163::ad7e
search for sigaction

1631620964
bfiedler!~bfiedler@2a0d:d740:107::3
ikskuh: perfect, thanks!

1631621235
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I would like for there to be 0 breaking changes after 1.0 so there is no version headache

1631621239
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
or maybe just a 2.0

1631621269
ikskuh!~xq@2a0d:5940:6:163::ad7e
g-w1: that's the plan for 1.0

1631621276
ikskuh!~xq@2a0d:5940:6:163::ad7e
if i understood andrew correctly

1631621280
ikskuh!~xq@2a0d:5940:6:163::ad7e
"have the same stability as C"

1631621466
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
lets go

1631648782
cepheus!~cepheus@user/cepheus
hmm, that's interesting - I'm using `addFrameworkDir` in zig build but it appears those framework dirs are not propagated to zld

1631648837
andrewrk!~andrewrk@mail.ziglang.org
wow, Vexu's project, arocc, can now compile helloworld.c

1631648868
andrewrk!~andrewrk@mail.ziglang.org
looks like he wants to make that the new implementationt of translate-c, instead of libclang

1631649161
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
this is awesome

1631649184
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ahh it uses zig's codegen

1631649186
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
thats nice

1631649514
andrewrk!~andrewrk@mail.ziglang.org
it doesn't

1631649538
andrewrk!~andrewrk@mail.ziglang.org
it only shares a few common things

