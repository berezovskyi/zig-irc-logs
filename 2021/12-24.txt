1640308317
Franciman!~Franciman@mx1.fracta.dev
i think the zig package on arch linux is broken

1640308324
Franciman!~Franciman@mx1.fracta.dev
I get: zig: error while loading shared libraries: libLLVM-13.so: cannot open shared object file: No such file or directory

1640308327
Franciman!~Franciman@mx1.fracta.dev
when running zig --help

1640308335
Franciman!~Franciman@mx1.fracta.dev
or any zig command

1640308359
Franciman!~Franciman@mx1.fracta.dev
isn't it stating the depenendencies correctly?

1640308427
Franciman!~Franciman@mx1.fracta.dev
i had to manually install llvm and clang

1640308528
Franciman!~Franciman@mx1.fracta.dev
uhm i think there is something wrong with my arch linux, actually

1640308717
mischief!~mischief@wopr.sciops.net
xD

1640308929
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: if you installed zig with pacman then it would have installed llvm 13 as a dependency

1640308949
daurnimator!~daurnimat@vultr.daurnimator.com
Franciman: `which zig` `pacman -Qi zig`

1640309917
Franciman!~Franciman@mx1.fracta.dev
daurnimator: for some strange reason pacman is not installing the deps anymore

1640309928
Franciman!~Franciman@mx1.fracta.dev
of anything not just zig, so sorry for the false alarm

1640310231
mischief!~mischief@wopr.sciops.net
daurnimator: were you able to try my bcrypt_pbkdf code?

1640310250
daurnimator!~daurnimat@vultr.daurnimator.com
mischief: nope. have barely sat down at computer since the other day

1640310261
mischief!~mischief@wopr.sciops.net
aha, no problem.

1640344837
Franciman!~Franciman@mx1.fracta.dev
hi, is there an ordered set structure in zig?

1640345445
squeek502!~squeek502@user/squeek502
Franciman, not in the standard library; not sure if someone else has written one

1640345458
Franciman!~Franciman@mx1.fracta.dev
thanks

1640345474
squeek502!~squeek502@user/squeek502
might not be too hard to combine ArrayList and HashMap to make one though

1640345524
squeek502!~squeek502@user/squeek502
Franciman, actually ArrayHashMap might work for you, if you use `void` as the value

1640345589
Franciman!~Franciman@mx1.fracta.dev
thanks squeek502 

1640345707
andrewrk!~andrewrk@mail.ziglang.org
yep that's exactly what you want, ArrayHashMap with void value type

1640345743
Franciman!~Franciman@mx1.fracta.dev
but does it allow an ordered traversal?

1640345754
Franciman!~Franciman@mx1.fracta.dev
by ordered i mean i insert integers in some order

1640345763
squeek502!~squeek502@user/squeek502
yeah it maintains insertion order

1640345764
Franciman!~Franciman@mx1.fracta.dev
and i want to traverse from the smallest to the greatest

1640345772
Franciman!~Franciman@mx1.fracta.dev
no not insertion order

1640345777
Franciman!~Franciman@mx1.fracta.dev
the insertion order may be mixed up

1640345798
Franciman!~Franciman@mx1.fracta.dev
i want to have traverse from the min int to the max int i inserted

1640345906
Franciman!~Franciman@mx1.fracta.dev
i think i can make this easier and just sort my slice :P

1640346749
andrewrk!~andrewrk@mail.ziglang.org
I believe that is called a heap

1640347291
Franciman!~Franciman@mx1.fracta.dev
i see. Does zig stdlib have something similar?

1640347292
Franciman!~Franciman@mx1.fracta.dev
thanks

1640347295
Franciman!~Franciman@mx1.fracta.dev
in advance

1640349063
bw!sid2730@user/betawaffle
Franciman: something like a b-tree is probably going to be the most efficient. i don't think std has one yet. in lieu of that, it's probably pretty easy to whip up a binary tree. it wouldn't be very cache-efficient though

1640349110
bw!sid2730@user/betawaffle
Franciman: what do you plan to store in the set? that might help decide on a good solution

1640349179
Franciman!~Franciman@mx1.fracta.dev
u8

1640349306
Franciman!~Franciman@mx1.fracta.dev
I want to store integers, small ones, for now u8

1640349310
Franciman!~Franciman@mx1.fracta.dev
probably u16 at most

1640349445
bw!sid2730@user/betawaffle
well, for a set of u8, i'd just have a bitmap

1640349481
bw!sid2730@user/betawaffle
it would only be 32 bytes of memory ;)

1640349509
bw!sid2730@user/betawaffle
for u16, the same would be 8 KiB

1640349522
bw!sid2730@user/betawaffle
how dense?

1640349587
bw!sid2730@user/betawaffle
Franciman: try this? https://github.com/ziglang/zig/blob/master/lib/std/bit_set.zig

1640349782
Franciman!~Franciman@mx1.fracta.dev
bw: uhm i am not sure

1640349792
Franciman!~Franciman@mx1.fracta.dev
i think it needs 216 bits

1640349812
bw!sid2730@user/betawaffle
yeah, definitely a bit set then

1640349888
Franciman!~Franciman@mx1.fracta.dev
bw and what if I switch to u16

1640349899
Franciman!~Franciman@mx1.fracta.dev
i would need 65536 bytes

1640349901
Franciman!~Franciman@mx1.fracta.dev
:P

1640349904
Franciman!~Franciman@mx1.fracta.dev
it seems excessive

1640349907
bw!sid2730@user/betawaffle
no, it would need 8 KiB

1640349926
Franciman!~Franciman@mx1.fracta.dev
err bits* hm i see

1640349930
Franciman!~Franciman@mx1.fracta.dev
8kib seems a bit too much

1640349940
Franciman!~Franciman@mx1.fracta.dev
for potentially storing around 5 u16

1640349992
bw!sid2730@user/betawaffle
something like roaring bitmaps would probably be the "most efficient" but if you have an upper bound on the number of bits that will be set (or unset), you might be able to get away with a sorted array

1640350032
Franciman!~Franciman@mx1.fracta.dev
well thanks

1640350047
bw!sid2730@user/betawaffle
https://github.com/ziglang/zig/blob/master/lib/std/sort.zig

1640350128
Franciman!~Franciman@mx1.fracta.dev
ty

1640351284
shachaf!~shachaf@user/shachaf
If you have around 5 entries then a B-tree would just end up being an array anyway.

1640351317
shachaf!~shachaf@user/shachaf
Since a B-tree leaf node would probably be around 32 entries or something.

1640351473
shachaf!~shachaf@user/shachaf
Maybe I should write a B+ tree thing for Zig. My C version (for 64-bit keys and values) was pretty good.

1640351519
Franciman!~Franciman@mx1.fracta.dev
please shachaf do

1640351663
shachaf!~shachaf@user/shachaf
Hmm, I haven't written enough Zig to have a good idea of what the API should be like.

1640352021
bw!sid2730@user/betawaffle
hmm, i'm trying to define my own `_start` function (instead of using the one from `std`, but zig seems confused

1640352043
bw!sid2730@user/betawaffle
>error: root source file has no member called 'main'

1640352143
bw!sid2730@user/betawaffle
oh, i need to make it `pub`

1640357957
Franciman!~Franciman@mx1.fracta.dev
i'd like to write a ranges library for zig

1640357961
Franciman!~Franciman@mx1.fracta.dev
but it is too much work

1640359175
companion_cube!~simon@user/companion-cube
probably too abstract anyway

1640359231
Franciman!~Franciman@mx1.fracta.dev
yeah i guess

1640359238
Franciman!~Franciman@mx1.fracta.dev
i am using zig 0.9.0

1640359246
Franciman!~Franciman@mx1.fracta.dev
and zls 0.9.0

1640359251
Franciman!~Franciman@mx1.fracta.dev
but it is super bugged

1640359254
Franciman!~Franciman@mx1.fracta.dev
or am i doing wrong?

1640359276
Franciman!~Franciman@mx1.fracta.dev
zls 0.8.1 used to be more responsive, i can't even get completions to struct fields most of the time

1640359493
luuk!~luuk@user/luuk
There's no such thing as zls 0.8.1

1640359521
Franciman!~Franciman@mx1.fracta.dev
lol well the previous one xd

1640359557
Franciman!~Franciman@mx1.fracta.dev
0.2.0 sorry

1640359633
luuk!~luuk@user/luuk
There's only 2 commit differences, of which neither should affect performance

1640359655
luuk!~luuk@user/luuk
Maybe try building from source and ensure it's built using release-safe/release-fast

1640359676
Franciman!~Franciman@mx1.fracta.dev
takk

1640359682
Franciman!~Franciman@mx1.fracta.dev
luuk

1640361268
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
what was the rationale behind having an additional keyword `inline` for unrolling loops instead of `comptime while` and `comptime for`?

1640361488
luuk!~luuk@user/luuk
They're seperate things. inline while/for unrolls the loop during comptime but can evaluate code paths at runtime. comptime while/for runs entirely during comptime.

1640361635
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
hmm, ahh ok, makes sense now

1640361709
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
btw, are there outdated docs here? the `inline` description in the keyword reference says " It can also be used to force a function to be inlined at all call sites. " How would that work?

1640361728
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
Wouldn't you do `fn shiftLeftOne(a: u32) callconv(.Inline) u32 {`? That doesn't make use of the `inline` keyword

1640361753
luuk!~luuk@user/luuk
You can also do `inline fn shiftLeftOne`

1640361791
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
oh, I thought I had tried that. But that means there are 2 ways to do it right?

1640361897
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
well, I suppose that alias is fine. It's probably the most common calling convention 

1640362002
luuk!~luuk@user/luuk
There's some GH issues that explain why there's 2 ways.

1640362025
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
Would you mind linking some?

1640362046
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
The GitHub issue search bar is really not that good 

1640362064
luuk!~luuk@user/luuk
That's why I didn't link them yet haha

1640362086
terminalpusher!~terminalp@2a01:586:9397:1:5771:d9e3:b972:9f9c
ah haha

1640364180
Pistahh_!~pistahh@user/pistahh
OA

1640365851
ifreund!~ifreund@user/ifreund
shachaf: the std.HashMap API is pretty good if you want inspiration for a B+ tree API

1640365865
ifreund!~ifreund@user/ifreund
it does err on the side of generality rather than simplicity though

1640368382
bw!sid2730@user/betawaffle
Can zig compile to bpf yet?

1640368579
ifreund!~ifreund@user/ifreund
bw: it's a Tier 3 target: https://ziglang.org/download/0.9.0/release-notes.html#Tier-3-Support

1640368595
ifreund!~ifreund@user/ifreund
so yes but there are caveats and TODOs

1640371407
bw!sid2730@user/betawaffle
What’s the entry point for a bpf program?

1640371685
ifreund!~ifreund@user/ifreund
bw: this talk is a year old but is probably still useful: https://www.youtube.com/watch?v=vZYKq3Dvv0g

