1620000098
cr1901_modern
>error: parameter of type 'type' must be declared comptime

1620000098
cr1901_modern
Oh, would ya look at that

1620000143
g-w1
:)

1620000234
cr1901_modern
ziglearn has a Matrix example I'm stealing for my own use. But seeing as I'm not good at Zig yet, my initial impl looked nothing like the example

1620000325
cr1901_modern
g-w1: >no, you can have runtime consts Do you have an example of the difference between a "runtime const" and "comptime const"? Does the latter use the "const" reserved word at all?

1620000402
g-w1
comptime const: `const i: u32 = 1;` runtime const `const i: u32 = some_runtime_thing;`

1620000431
cr1901_modern
ahhh

1620001296
cr1901_modern
What is the correct syntax for "add an extra byte if cols * rows isn't divisble by 8"?

1620001305
cr1901_modern
./src/gf2mat.zig:6:76: error: invalid token: '!='

1620001305
cr1901_modern
var num_bytes: comptime_int = (cols * rows)/8 + if ((cols * rows) % 8) != 0) 1 else 0;

1620001313
cr1901_modern
Uhh, why is it invalid?

1620001327
g-w1
bool != int

1620001330
g-w1
@boolToInt

1620001381
cr1901_modern
an if statement should take a bool, correct?

1620001409
g-w1
correct

1620001419
cr1901_modern
So why do I need boolToInt?

1620001438
g-w1
ah i misread, i think you have weird parens

1620001453
cr1901_modern
yes... yes I do.

1620002083
cr1901_modern
Oh right, is there an equivalent of Rust's unimplemented!()? I guess unreachable works

1620002221
andrewrk
@panic("unimplemented")

1620002257
g-w1
unreachable is probably not a good idea as it can cause ub in some release modes

1620002716
cr1901_modern


1620003493
cr1901_modern


1620003510
cr1901_modern
b has type "anytype", so why is Zig complaining when it infers?

1620003561
g-w1
because foo is of wrong type

1620003570
g-w1
it is of type struct { ... }

1620003574
g-w1
you must instantiate the struct

1620003629
g-w1
using Gf2Mat(7, 4) { .data = whatever }

1620003671
cr1901_modern
Uhhh, why aren't they compatible types even when I don't initialize them?

1620003687
g-w1
multiply takes Self

1620003711
cr1901_modern
Why is Self() not equal to the struct I returned from Gf2Mat() function?

1620003717
cr1901_modern
not the same type*

1620003724
g-w1
@This() means an instantiated version of the struct

1620003770
cr1901_modern
Why are @This() and struct {...} without instantiation two different types when they are structurally equivalent?

1620003772
cr1901_modern
:)

1620003786
cr1901_modern
err wrong term

1620003802
g-w1
they are not

1620003814
g-w1
@This() just allows you to refer to the struct type within itself

1620003814
cr1901_modern
some langs, two structs are the same if they have the same fields w/ the same types and same names and same order are the same type

1620003830
g-w1
this is not the case in zig nor the source of your issue

1620003873
noam
structural equivalence is not the same as equivalence in zig

1620003890
noam
just as two slices containing the same data doesn't matter if their pointers are different

1620003905
noam
one instance of the struct keyword is one type

1620003913
g-w1
cr1901_modern: what languages do you have background in?

1620003927
cr1901_modern
A bit of OCaml, Rust, C

1620003933
g-w1
thats what i thought :)

1620003959
cr1901_modern
Structural equality "kinda-sorta" works in OCaml, but under the hood it's a nice convenience that OCaml doesn't actually understand

1620003974
cr1901_modern
I don't remember the other one... nominal equality?

1620004019
cr1901_modern
Anyways, for my purposes: In this case, struct { .. } and @This() don't even have the same layout, and thus surely can't be the same type?

1620004064
noam
two different structs are never the same tyype.

1620004070
noam
type*

1620004102
g-w1
> one instance of the struct keyword is one type

1620004108
g-w1
you must remember that comptime functions are memoized

1620004117
noam
that still counts

1620004129
g-w1
so when you call a function that returns type with the same args, the struct keyword is only used once

1620004137
g-w1
noam: telling cr1901_modern

1620004140
noam
:)

1620004206
cr1901_modern
So hows does zig know that you're passing in a struct that takes @This() with some, but not all, fields initialized?

1620004250
g-w1
initialized was the wrong word sorry, it needs an instance of the struct

1620004430
cr1901_modern
is an instantiated struct { .. } also a struct from the compiler's POV (that's is not the same type as the type it was instantiated from, as what noam said)

1620004454
noam
const foo = struct{...};const bar = foo{...};

1620004460
g-w1
no an instantiated struct is SomeStructType { .field = filled_in }

1620004461
noam
foo is of type 'type'

1620004465
noam
bar is of type 'foo'

1620004470
g-w1
^

1620004633
cr1901_modern
Just as a stupid hypothetical, if I wanted to return, say, an i32 from a fn that returns type, how do I do that?

1620004633
cr1901_modern
>(7:54:34 PM) g-w1: const T: type = u32;

1620004634
cr1901_modern
>(7:54:41 PM) g-w1: const T: type = type; ;)

1620004657
g-w1
fn F() type { return i32; }

1620004658
g-w1
??

1620004685
cr1901_modern
Why didn't I think that worked?...

1620004890
cr1901_modern
Anyways these questions came up b/c I got very uncomfortable with "function in return type position":

1620004931
cr1901_modern
But I can't avoid this I don't think, b/c I don't want to return a type. But I don't know the return type until the function needs to be compiled

1620004948
g-w1
then embrace it!

1620004964
cr1901_modern
But it's looks scary :(

1620004998
cr1901_modern
(And is this in fact the "recommended Zig way" to solve the "Idk the return type until compile time" problem?)

1620005080
g-w1
probably

1620005149
cr1901_modern
Last thing for now. Not that I woul have any idea, but... does returning "type" fall under "Higher Kinded Types" (the type of types?)

1620005186
cr1901_modern
Ty noam, g-w1, and andrewrk for the help tonight

1620005193
noam
np

1620006186
siraben
cr1901_modern: returning a type would be most naturally expressed with dependent types

1620006233
siraben
HKTs usually mean you can abstract over type constructors rather than fully saturated types

1620006362
cr1901_modern


1620006397
daurnimator
cr1901_modern: `@TypeOf(self)` and `Self` are interchangable in there.

1620006486
cr1901_modern
Ahhh neat

1620007362
daurnimator
cr1901_modern: btw, an init() method that doesn't do anything aside from initialisation to a constant is considered an antipattern

1620007503
cr1901_modern
init() feels nicer than doing .data = [_]u8{0} ** Gf2Mat(r, c).num_bytes,

1620007506
cr1901_modern
But ack

1620007580
cr1901_modern
./src/main.zig:2:16: error: unable to find 'gf2mat'

1620007580
cr1901_modern
const gf2mat = @import("gf2mat");

1620007601
cr1901_modern
const gf2mat = @import("gf2mat.zig") works

1620007615
cr1901_modern
is that supposed to be how I do it (gf2mat in same src dir)

1620007679
daurnimator
cr1901_modern: you can use `--pkg-begin gf2mat gf2mat.zig --pkg-end` on the zig command line

1620008399
kiedtl
Is there any equivalent in Zig of `from foo import *` (Python) or `use mod::submod::*;` (Rust)?

1620008414
daurnimator
kiedtl: `usingnamespace @import("foo")`

1620008473
kiedtl
Ah, thanks

1620008489
daurnimator
that said, I think it makes hard to read code: it's better to give it a name so you know where symbols come from

1620008535
kiedtl
I think the extra namespacing is unnecessary in this case, I'm just putting a bunch of types that are used throughout the project into a single 'types.zig'

1620008541
daurnimator
it also opens you up to potential breakage if the module you use adds additional exports that may conflict with your own function names or locals (zig doesn't allow shadowing)

1620008553
cr1901_modern
How do I compare arrays in testing?

1620008573
daurnimator
cr1901_modern: `std.testing.expectEqualSlices(ElementType, expected, actual)`

1620008618
daurnimator
cr1901_modern: assuming you meant to say slices. I think actual arrays you can just use expectEqual?

1620008636
cr1901_modern
I meant arrays

1620008682
daurnimator
also note that pointer-to-array coerces to slice

1620008701
cr1901_modern
Why does equal slices need the elementtype?

1620008899
daurnimator
good question. I don't know.

1620008950
g-w1
its for increased type safety

1620008973
g-w1
it makes sure that it has a slice instead of some random type

1620009017
g-w1
that way it doesn't have to do any assertions to make sure thing[i] doesn't give weird compile errors

1620009128
noam
I've found from attempting to find counterexamples that a [:0]u8 coercing to [*:0]u8 is fine in 99.99% of cases

1620009162
noam
If anything, I think that the length disagreeing should be treated as a bug

1620009183
noam
I don't think we should allow [:0]u8 where there's zeroes before the end.

1620009196
noam
(at least, in safety-instrumented modes)

1620009280
daurnimator
noam: you may want to revisit the original issue where I proposed that

1620009311
cr1901_modern
Okay, so I didn't actually make much forward progress this weekend, but I sure as hell am happier w/ how the code is organized now:

1620009334
cr1901_modern
I think it might be worth rolling my own matrix lib for the limited functionality and special requirements I need

1620009610
daurnimator
cr1901_modern: you only increment `curr_byte` on the first iteration?

1620009636
daurnimator
oh wait no

1620009750
cr1901_modern
No, only when I'm sure the byte has been filled, relying on wrapping arith to go straight to next bit

1620009771
recalloc
Hi, I tried different ways to wrap around C bitmask flags and it looks like using structs are probably the most idiomatic. Is this a good idea, or are there other ways I should wrap around it? Here's what I toyed around with so far:

1620009908
recalloc
Specifically a struct of bools like io.File.{Open,Create}Flags that transforms into the u32 bitmask argument the C API wants.

1620009961
cr1901_modern
g-w1: You mentioned that "each struct { .. }" is memoized. Does that include the comptime parameters inside the struct? So only if comptime parameters match is it considered a "cache hit"?

1620010114
daurnimator
recalloc: there's std.EnumSet now. I haven't looked at what actually got merged, but I think you'll find something in there

1620010132
recalloc
aight, I'll look at that

1620010180
andrewrk
recalloc, I like your example that does it with a struct method

1620010342
recalloc
Awesome, sounds like we're thinking on the same page!

1620010374
g-w1
cr1901_modern: comptime fns are memoized, structs are

1620010438
daurnimator
recalloc: have a quick play with: `std.EnumSet(InitFlagsEnum)`

1620010464
cr1901_modern
>(9:08:49 PM) g-w1: so when you call a function that returns type with the same args, the struct keyword is only used once

1620010464
cr1901_modern
Ahhh, this explains how two structs

1620010467
cr1901_modern
whoops

1620010495
noam
More like can

1620010498
noam
Structures

1620010504
noam
All structures have the same type - 'type'!

1620010512
noam
@TypeOf(some_struct) is always 'type'

1620010527
cr1901_modern
>(9:07:44 PM) noam: two different structs are never the same tyype.

1620010534
noam
and in the case where you call a memoized func, it's not two structs being the same type

1620010535
cr1901_modern
Lol

1620010551
noam
the memoized func

1620010556
noam
e.g. const foo = ArrayList(u8)

1620010560
noam
const bar = ArrayList(u8)

1620010562
daurnimator
cr1901_modern: the struct

1620010573
noam
That's the same as if you did const baz = struct{...} ; const foo = baz; const bar = baz;

1620010581
noam
In this case, foo and bar are both

1620010592
noam
It's important to be able to separate the

1620010600
noam
It's

1620010614
noam
or multiple *names*, if that's an easier way to cognize it

1620010668
cr1901_modern
>the memoized func

1620010668
cr1901_modern
But you're not assigning foo to have a value of "type of ArrayList(u8) (err, type)"

1620010681
cr1901_modern
In const foo = ArrayList(u8)

1620010704
cr1901_modern
You're assigning it its return value which is a "type" type (struct)

1620010730
recalloc
DarkUranium: I'm looking at the tests and source code for that -- it looks like the value of the enums's int values are expected to be an index to an underlying BitSet, but not a bitmask itself.

1620010741
cr1901_modern
So how can't the struct have been memoized if you're calling the same function w/ the same parameters?

1620010767
cr1901_modern
Anyways, it's fine I don't have to understand this all tonight... and my energy's fading quickly :(

1620010792
noam
cr1901_modern: because it's not really a

1620010805
noam
Think of ArrayList(foo)

1620010809
noam
just as e.g. struct{...}

1620010813
recalloc
I

1620010820
noam
when you do `const foo = struct{...}`, you're naming the structure foo

1620010822
cr1901_modern
hmmm

1620010831
noam
when you do const bar = foo, you're giving a second name to the same structure

1620010832
recalloc
ahh, meant to ping daru

1620010836
noam
ArrayList(u8)

1620010843
noam
It's not the structure itself, just an identifier

1620010857
noam
(an identifier whose value is the result of the actual call)

1620010871
noam
Honestly, I think that's a really confusing concept that could do with some clarification.

1620010884
g-w1
not actually an identifier, but it works fine if you think of it like that

1620010894
recalloc
daurnimator: ^^^

1620010895
noam
the memoization is important, but it breaks some cognitive assumptions about how function calls work

1620010904
noam
g-w1: semantically, it is

1620010913
noam
semantically, assigning foo = ArrayList(u8) is the same as assigning foo = bar

1620010920
cr1901_modern
const foo = struct{...} gives you a binding "foo" to create structs.

1620010927
noam
and

1620010939
noam
cr1901_modern: yeah, it binds the name to the value

1620010954
noam
With comptime functions which return types, the call is bound to the value in the same way

1620010977
cr1901_modern
And unless you use @This() somewhere inside your struct body, so does ArrayList(u8)?

1620010977
daurnimator
recalloc: as long as the flags are dense you don't need to manually translate anything

1620011015
daurnimator
cr1901_modern: I don't think `bind`-ing is the right thought model.

1620011020
noam
cr1901_modern: huh, what? What does using @This have to do with it?

1620011020
cr1901_modern
(@This() can be used to get multiple "instances" of a particular struct, not just a name binding to the struct type)

1620011027
noam
@This doesn't give you an instance

1620011031
noam
@This is another "binding"

1620011035
daurnimator
cr1901_modern: I treat `=` universally as a (shallow) copy in my mind.

1620011037
noam
const foo = struct {}; const bar = foo;

1620011044
cr1901_modern
Oooooh

1620011051
noam
const foo = struct { const bar = @This(); }; const bar = foo;

1620011054
noam
foo.bar == bar

1620011058
noam
== foo

1620011075
g-w1
you can do very weird stuff with this :)

1620011076
cr1901_modern
Well, that... uh, makes things quite a bit clearer

1620011080
cr1901_modern
well, for me anyway

1620011080
noam
:)

1620011082
g-w1
foo.bar.bar.bar.bar.bar == foo

1620011086
noam
^

1620011096
noam
since foo.bar == foo, foo.bar.bar == foo.bar == foo, and so on

1620011101
g-w1
and it gets weirder with multiple structs!

1620011110
noam
But frankly, I think that such indirection should be prohibited

1620011118
noam
Self-recursive indirectoin*

1620011120
noam
indirection*

1620011133
cr1901_modern
Well, it's not like I'm going to do something like that

1620011141
cr1901_modern
But seeing a contrived example like that does help

1620011148
noam
I don't mean for you, I mean that there's no real valid use case for it

1620011164
daurnimator
I'm sure I could come up with one

1620011164
noam
definitionally, since foo.bar.bar == foo.bar, continuing to self-recurse has no effect

1620011176
noam
daurnimator:

1620011192
noam
it's like `const a = b + 0;`

1620011201
noam
If you hardcode that zero, there's no case in which it has an effect

1620011210
noam
That's

1620011213
cr1901_modern
daurnimator: The "shallow copy" analogy doesn't really help me, but I'm definitely tired after several hours of working on a language I'm new to :P

1620011216
noam
s/equal/equivalent/

1620011217
g-w1
or as someone though of on discord `const a, b, c = thing;`

1620011222
cr1901_modern
So maybe it'll make sense after some sleep

1620011240
noam
"shallow copy" really isn't accurate, because it doesn't make a copy at all

1620011246
noam
Even with a shallow copy, the results aren't 100% the same

1620011254
noam
but with assignments like this, they're more like aliases

1620011256
recalloc
daurnimator: What makes flags dense? Looking at the tests, I'm assuming it means each enumeration has assigned a value, is that right?

1620011268
daurnimator
noam: well for starters, that's an assert that `b` supports addition

1620011282
cr1901_modern
>Even with a shallow copy, the results aren't 100% the same

1620011283
cr1901_modern
What do you mean?

1620011283
daurnimator
recalloc:

1620011286
noam
..."for some integer type n"

1620011295
noam
(where b is of n)

1620050456
antaoiseach
hello folks, would it be possible to use Zig for working through the llvm kaleidoscope tutorial? (

1620050481
antaoiseach
Also, I know that Zig works nicely with C so the llvm c api could be used, but the llvm c api is not maintained (?)

1620050664
TheLemonMan
the C api is a bit behing the C++ one

1620052079
antaoiseach
TheLemonMan: Yeah, that's what I found out while researching too

1620052110
antaoiseach
TheLemonMan: If I wanted to use the c++ api, then there's no straightforward way then, right? I mean, use with Zig

1620052349
TheLemonMan
you can write small wrappers around the C++ methods like we do in zig_llvm.cpp

1620052621
antaoiseach
TheLemonMan: Oh, I didn't know about that. I suspect the work might be be a bit too much for me right now, but I'll take a look at zig_llvm.cpp. That should come in handy in the future as well. Thank you!

1620052703
antaoiseach
TheLemonMan: I see what you mean - ZIG_EXTERN_C in the header, right?

1620052759
TheLemonMan
it's the same trick you'd use to expose C++ symbols to C, use an extern "C" block and write some functions to encapsulate all the C++-specific logic

1620052963
antaoiseach
TheLemonMan: Yup. That makes sense to me.

1620052981
antaoiseach
Actually, reading that file might also give a lot of info about the actual API used, so that looks great!

1620052999
antaoiseach
Thanks for the help... will get back once I get going and run into issuess.... cheers! :-)

1620054897
mikdusan
it seems our ELF criteria to enable "link_in_crt" is `output_mode == .Exe and link_libc`; don't we also need this stuff when building .so ?

1620055610
TheLemonMan
nope

1620055690
mikdusan
on openbsd zig creating a .so with `build-lib` results in __guard_local missing symbol; it's available in crtbegin.o and crtbeginS.o

1620055722
mikdusan
tests are getting pretty far on openbsd now. just trying to fix a few standalone tests

1620055774
mikdusan
(this is with lld patched to make finding system .so work)

1620055791
semarie
mikdusan: i have a diff for libs (on OpenBSD)

1620055806
mikdusan
semarie: I just ape'd it from /usr/ports

1620055834
semarie
my diff isn't in ports :)

1620055840
mikdusan
one sec.

1620055857
semarie
i have the following in my wip directory:

1620055895
semarie
to use different crt files depending if output_mode is .Exe or .Lib

1620056005
TheLemonMan
ah, the various crtbegin/crtend objects

1620056033
mikdusan
semarie: here is lld patch to find (for example) `/usr/lib/libc.so.96.0`:

1620056034
mikdusan


1620056047
mikdusan
that presumably is what openbsd system clang/lld is doing

1620056109
semarie
if you are trying running tests on OpenBSD machine (with the patched llvm12), it will fail on crosscompilation to linux due to -pie . the llvm12 patch is crude and it passes -pie to all targets (so linux too)

1620056141
semarie
mikdusan: yes, it is the code from base

1620056226
semarie


1620056250
mikdusan
semarie: I've progressed to `zig build test -Dskip-non-native -Dskip-release -Dskip-stage2-tests` but haven't tried cross stuff yet

1620056392
mikdusan
semarie: ah yes your Elf.zig patch hoists openbsd crt logic out of `if link_in_crt` block

1620056424
mikdusan
this is what I was trying to determine. why don't we kick in crt logic other elf when building .so like linux?

1620056542
TheLemonMan
mikdusan,

1620056576
TheLemonMan
long story short, the crt usually kickstarts the execution of a binary

1620056594
mikdusan
and they have ___S.o for the shared objects

1620056602
mikdusan
but we don't seem to ever do that

1620056860
mikdusan
gcc on archlinux (glibc) does this for .so: crti.o crtbeginS.o crtendS.o crtn.o

1620056880
mikdusan
for exe: Scrt1.o crti.o crtbeginS.o crtendS.o crtn.o

1620056935
mikdusan
openbsd for .so: crtbeginS.o crtendS.o

1620056973
mikdusan
openbsd for .exe: crt0.o crtbegin.o crtend.o

1620057071
mikdusan
openbsd for STATIC .exe: rcrt0.o crtbegin.o crtend.o

1620057136
mikdusan
archlinux for STATIC .exe: crt1.o crti.o crtbeginT.o crtend.o crtn.o

1620057189
semarie
the decision on objects choice is here:

1620057541
earnestly
There is some contention about who should supply the crtbegin/end

1620057555
earnestly
Some say libc should, others say compiler

1620057570
TheLemonMan
they are not essential as 99% of what they do is legacy stuff

1620057579
earnestly
E.g.

1620057613
earnestly
musl doesn't provide them iirc

1620057635
mikdusan
just looking at a .zig file and musl I think does

1620057680
earnestly
May have changed in the years since I looked

1620057695
semarie
mikdusan: oh, and async should fail too as std expects EVFILT_USER for openbsd, and it isn't implemented (for now, I have wip)

1620057791
TheLemonMan
musl has no crtbegin nor crtend

1620057823
TheLemonMan
and it's libgcc (crtstuff.c) that provides them

1620057858
mikdusan
find lib/libc/musl | grep -i crt

1620057938
TheLemonMan
there's no crtbegin nor crtend ?

1620057959
mikdusan
seems not

1620057981
TheLemonMan
that's what I said heh

1620058013
mikdusan
sure but somehow I don't think we're going to get away with just crtbegin/crtend logic without it being kludgy. Probably going to have to look at the whole picture

1620058023
mikdusan
ie: for a patch

1620058207
mikdusan
our "drop in replacement for cc" `zig cc` doesn't, for example, do any crtbegin/end when creating shared lib on either openbsd or linux

1620059103
TheLemonMan
well if we want to be as drop-in as possible then we may want to add a small crtbegin/end implementation too

1620059139
TheLemonMan
I believe that .init/.fini are long dead, but you never know what kind of weird stuff people are trying to compile

1620059849
mikdusan
semarie: btw did you run into a weirdness when building zig and llvm-config says to link `-lz.so.5.0` ? I did an ugly hack to workaround

1620061851
kiedtl
has the {u} format specifier not been implemented yet? When I use it with std.debug.print and a non-const u21 I get the "Unknown format string: 'u'" error.

1620062097
ifreund
kiedtl: are you sure that you are passing your u21 by value and not a pointer to it or something?

1620062113
ifreund
from skimming the code it looks like it should work on master

1620062122
Nypsie
kiedtl, you need zig master

1620062134
Nypsie
0.7.1 Doesn't support it

1620062433
kiedtl
Nypsie: oopie, I see

1620062899
semarie
mikdusan: see

1620063260
mikdusan
perfect

1620063595
semarie
mikdusan: if you are building directly openbsd, I would recommand building llvm12 with CXXFLAGS="-fno-ret-protector -mno-retpoline" (assuming amd64)

1620063606
semarie
it will help the build time

1620063631
mikdusan
I see also that cmake no longer prunes -O3 flags for optimized builds in 6.9

1620063719
semarie
if I recall correctly, there were cmake changes to do that only when building ports stuff (and not always)

1620063765
mikdusan
it certainly kicked-in on 6.8 (and maybe 6.6?) because I had to manually override cmake command line building llvm to get -O3

1620063797
mikdusan
and that also inflated bins because no DCE

1620063877
semarie
in openbsd, -O3 is avoided (too much unwanted optimizations if I recall correctly)

1620063958
mikdusan
I think we've been getting away with not adding crtbegin.o/crtend.o pairs on linux because there is little c++ going on and those are related to constructor/destructors

1620064018
mikdusan
but openbsd places (in libc I think) a reference to __guard_local which is defined in crtbegin.o forcing us to need to link it

1620064118
mikdusan
(I should qualify both lines above; for cases of building .so)

1620064382
TheLemonMan
linux/musl is fine, on linux/gcc we're skipping the destructors/atexit hooks

1620064589
andrewrk
good riddance

1620064624
andrewrk
all global static destructors and atexit hooks are bugs

1620064699
semarie
maybe, but without atexit it means linking with libc is not properly supported

1620064716
semarie
(as libc might rely on atexit)

1620064746
andrewrk


1620065324
TheLemonMan
mikdusan, was copyFile the only problem with the newer qemu version?

1620065367
mikdusan
TheLemonMan: I never tried to continue beyond that point

1620065456
semarie
mikdusan: I am able to pass the tests with only the following disabled: docgen (linkage failure: can't create dynamic relocation R_X86_64_64 against local symbol in readonly segment) and dumpCurrentStackTrace (signal 6)

1620065478
semarie
but else, it seems fine (on openbsd, for the context)

1620065516
mikdusan
nice; aside from the llvm/lld patches, I don't recall openbsd getting this far before

1620065522
semarie
( zig build test -Dskip-compile-errors -Dskip-non-native -Dskip-release )

1620065577
mikdusan
hmmm I had to -Dskip-stage2-tests (haven't looked into what is causing it)

1620065611
TheLemonMan
semarie, does the linker error go away if you use system's ld?

1620065790
mikdusan
on a side note I got dragonfly bsd building zig.exe but sidelined before I got dig into a child_process failure. It has to do with polling file descriptors

1620066694
TheLemonMan
it'd be nice to have at least {open,net}bsd hooked up to the CI

1620067026
andrewrk
TheLemonMan, we have some systems readily available, as soon as any subset of tests are passing and we do some initial setup work, that can be a reality

1620067220
karchnu
TheLemonMan: I wonder if the OpenBSD kernel will accept Zig async stuff. I don't know that well the implemented mitigations.

1620067599
semarie
karchnu: "Zig async stuff" ? you mean EVFILT_USER or something else ?

1620067804
karchnu
semarie: I don't quite grasp the concept of async functions, from what I understand they are functions inside stack memory.

1620067816
TheLemonMan
andrewrk, provisioning the CI machine and installing the test fixtures is the hardest part heh

1620067871
TheLemonMan
karchnu, there's no stack involved

1620067910
andrewrk
zig async functions are just a way to organize control flow, they don't interact with the OS at all

1620067940
andrewrk
there is however a standard library event loop implementation, which very much does need to interact with the OS :)

1620068023
karchnu
TheLemonMan: my bad, so async functions are in the heap memory. Isn't W^X security feature of the OpenBSD kernel a problem in this case?

1620068054
karchnu
andrewrk: true, but the only interaction is the use of kqueue, right?

1620068066
andrewrk
karchnu, yes and threads

1620068115
andrewrk
the machine code of async functions is the same as the machine code of normal functions

1620068120
TheLemonMan
to be fair one could say that the stack is also part of the heap heh

1620068140
andrewrk
the only difference is where local variables are. they could be in the heap, or the stack, or even in global memory

1620068147
TheLemonMan
functions are placed in a executable area, we're not writing (nor reading) anything from there

1620068172
andrewrk
essentially async functions are just functions which accept a secret struct pointer as the first paramater, which is used for all the locals instead of the stack

1620068196
companion_cube
(in other words, a closure :))

1620068201
andrewrk
yes

1620068323
shachaf
Well, "closure" usually suggests something is closing over external variables. Here it's more like internal variables, which is a bit different.

1620068384
companion_cube
you can have a closure that is the sole owner of what it closes on

1620068388
companion_cube
it's pretty common

1620068395
companion_cube
some might even call that "objects"

1620068408
companion_cube
(heh, that's pushing it, but you can do that kind of things)

1620068431
karchnu
andrewrk: thanks, your last sentence actually made me understand async functions :D

1620068443
karchnu
that pretty simple

1620068511
andrewrk
nice. it's a different sentence for different people :)

1620068617
karchnu
yep, as a 4-year PhD teacher I saw that a few times ^^

1620068633
andrewrk
haha

1620069087
noam
andrewrk: ahhhh, and that means that you can run multiple of them in parallel since they aren't touching the stack, right?

1620069101
noam
That explanation is a lot better than the others I've heard :)

1620069552
earnestly
Funny how the unsugared explanation always seems to make the most sense

1620069574
andrewrk
noam, right

1620069629
g-w1
wow, this makes sense

1620069769
ifreund
yep, all the memory is in the @Frame() :D

1620069854
TheLemonMan
fucking captchas are getting crazier and crazier

1620069918
rxF
captcha arms race

1620070022
TheLemonMan
and it's now stuck in a redirect loop lol

1620070042
TheLemonMan
the internet was a mistake

1620070088
andrewrk
captchas were a mistake

1620070108
andrewrk
discrimination against robots

1620070115
andrewrk
robots are people, too

1620070168
plumm
define person

1620070171
fengb
LemonBot

1620070194
plumm
fengb do you know how to use hzzp to read response bodies

1620070202
plumm
I am trying to adapt your replybot thingy

1620070230
karchnu
so, async functions can (will?) be used by event loops to perform network operations while the event loop itself will only be running for event notification (ex: socket X has something to read, socket Y can be written, then sleep until next event), right?

1620070283
fengb
According to the zCord code, the first event received after the request is .status, and it has an attached code

1620070311
andrewrk
karchnu, yes

1620070327
andrewrk
karchnu, you can see some proof of concept code for this in std.event.Loop

1620070335
karchnu
and mutexes shouldn't be used since they will block an entire thread while async functions could be used on a single one, "simulating" multiple threads

1620070336
andrewrk
there is a kqueue implementation there

1620070375
andrewrk
it's also possible to have a multi-threaded event loop :)

1620070400
andrewrk
in such case you have to beware that when you use `async` that function may be running in a different thread at the same time as the code until `await`

1620070449
andrewrk
this is identical to how concurrency in go works, with `go` keyword

1620070517
karchnu
andrewrk: it seems to be what 80's developpers named "coroutines"

1620070565
andrewrk
yes you might call zig async functions "stackless coroutines"

1620070583
karchnu
OSs weren't all pre-emptive back then, so they had to do hacky stuff like that

1620070623
mikdusan
TheLemonMan: netbsd 9.1 is in "decent" shape; it's currently failing on socket missing from std.c, and os.getFdPath() needs impl. that kind of thing. but we're getting there!

1620070662
mikdusan
order of zigness: freebsd > openbsd > netbsd > dragonfly

1620070917
mikdusan
andrewrk: given an OS like openbsd which differs enough that we'd need to apply small patches to llvm/lld, and those patches are cherry-picked from openbsd's llvm patches, and those patches are not in a state to be upstreamed, how would you suggest we document/support openbsd in our matrix?

1620082290
karchnu
mikdusan: color is a security issue.

1620083681
betawaffle
andrewrk: the GitHub wiki says you want help moderating this irc channel. Can I throw my hat in the running? References available on request.

1620083866
noam
...I've definitely seen your name somewhere...

1620083889
betawaffle
Yep, a lot of places. I’m everywhere.

