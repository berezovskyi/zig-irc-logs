1620864010
g-w1
is there anything else a shell needs besides this?

1620864020
g-w1
if so, ill just use std.os

1620864186
mikdusan
a typical unix shell has a lot of redirect abilities. redirect to a file. to a pipe. the file has options like create or append and which perms to create with,

1620864235
mikdusan
then there's redirecting a single descriptor vs. multiple (eg. stderr and stdout)

1620864235
g-w1
yes so i do f = open("file.txt", "a"); child.stdout = f;

1620864244
g-w1
multiple times for stderr and stuff

1620864247
mikdusan
and these kinds of details are beyond ChildProcess

1620864268
g-w1
so you are not supposed to control the ChildProcess.std{out,in,err} ?

1620864278
mikdusan
in it's current state that is. here's a good example of exposing pretty much every thing one can think of for an API:

1620864283
mikdusan


1620864324
ifreund
g-w1: if you haven't seen it yet, this is probably the simplest posix shell implementation to taken inspiration from:

1620864327
mikdusan
no I'm just saying ChildProcess is a long ways from giving you that kind of flexibility

1620864334
g-w1
ah :)

1620864346
g-w1
ifreund: i have seen that :) it looks nice

1620864352
ifreund
though IMO posix is a dead end in terms of shell design

1620864368
g-w1
you like stuff like nushell?

1620864399
ifreund
no, that's far too complex

1620864417
g-w1
so what is a good direction?

1620864426
AtomToast
what about something like mksh?

1620864472
ifreund
that's still posix compatible no?

1620864520
AtomToast
I think so but it adds a lot of user friendly non posix syntax. Can't say that I really used it myself. But one guy I know loves it

1620864523
ifreund
I want a scripting language that follows something closer to zig's design philosophy, and sofar the only project I know of that seems close to how I imagine that is marler's stitch

1620864584
ifreund
AtomToast: the problem is that posix comapability means you support all the ugly legacy stuff I want to get away from

1620864585
g-w1
my goal is the readline friendlyness of fish (auto completions, nice prompt by default) but posix so i don't have to remember multiple things and can eventually use it as my main shell

1620864621
ifreund
zsh fits that use case for me

1620864623
AtomToast
that aligns quite well with what I want as well

1620864649
ifreund
it's quite complex and far from perfect, but for interactive usage it's good enough

1620864656
g-w1
zsh does not have it by default. i like sensible defaults :)

1620864658
AtomToast
zsh is what I use atm but I am not married to it and I would love sth more minimal that I can easily hack on myself

1620864659
ifreund
I was talking more about a scripting language

1620864662
mikdusan
what we need is a shell that you extend with zig code, then it builds the .so and loads it. fast prompts go brrrrrrrr

1620864683
recalloc
Does Zig happen to have a feature to fuse two structs together? Something like JavaScript's `{a:1,b:2,...{c:3,d:4}} => {a:1,b:2,c:3,d:4}`

1620864684
g-w1
i was thinking `config.zig` with those fast compile times of stage2

1620864705
ifreund
g-w1: I do too, but no enough to motivate me to start writing my own instead of writing a bit of config

1620864737
g-w1
recalloc: you can probably do something like this with @Type( and @TypeInfo( although if they have declarations it won't work as @Type can't accept declarations yet

1620864755
AtomToast
g-w1: suckless style :)

1620864764
recalloc
I see, thanks

1620864794
g-w1
well thanks everyone, i think ill just use std.os, and it will give me a bigger oppurtunity to learn actually how posix works :^)

1620864809
ifreund
I also am very much not a fan of suckless style config :D

1620864836
g-w1
imo its better than .so

1620864839
AtomToast
would hav guessed as much :p

1620865198
ifreund
g-w1: yeah, but that's not a high bar :P

1620865214
ifreund
I think a shell should be configured in itself

1620866856
noam


1620866890
waleee-cl
... "@shit"

1620866911
waleee-cl
description of hardware?

1620866966
noam
Distro :P

1620866976
noam
It was an OEM linux install

1620866983
waleee-cl
ubuntu?

1620866987
noam
manjaro :P

1620867007
noam
and woot, test assembles properly :)

1620867015
waleee-cl
heh, didn't know they had edged into that market

1620867024
waleee-cl
also, congrats!

1620867062
g-w1
noam: you got it assembling?

1620867065
noam
yep!

1620867078
g-w1
woot

1620867096
noam
manually, of course :P Just need to teach the driver to invoke the assembler, and run the result

1620867544
noam
g-w1:

1620867568
g-w1
nice

1620867576
noam
Note that the binary is based at address 0x20, with a high-level emulated BIOS from 0x00 - 0x20

1620867584
noam
Hence the addresses are all 0x20 higher than you'd expect :P

1620867590
noam
(the binary gets loaded in at 0x20)

1620867748
noam
Manually disassembling: first eight bytes are start, which calls main (the test runner), then signals the BIOS the equivalent of exit(0). 0x28 is foo, which just returns. 0x29 is main, which calls foo (0x28) a few times, then loads HL with the panic string (BAR) and signals a panic to the BIOS :)

1620867767
g-w1
ok, i got it working with std.process. it is much better than std.os

1620868668
noam


1620869171
v0idify
hm, wouldn't it be nice to have a "stage2 status" page? are we stage2 yet? or a "this week in zig" in general

1620869233
g-w1
people have asked for that before iirc

1620869416
v0idify
i would volunteer to write a this week in zig if needed but i'm not active enough to compile a list of things that happened (rather, if i received a list of things to review i could make the write-up)

1620869484
g-w1
#showtime in the discord server has a pretty good list imo

1620869491
g-w1
and you could follow #stage2-meetings for some progress

1620869494
g-w1
on stage2

1620869530
g-w1
s/showtime/showcase

1620869556
v0idify
sadly

1620869593
g-w1
i could copy and paste the channel every week if you dmed me :)

1620869611
v0idify
haha okay that could actually work

1620869685
v0idify
although it would be a bit exhausting having to read the log all at once, would <discord admins> be okay with having a bridge to an irc? (I already have the infrastructure (matterbridge and an irc for it) if it's ok)

1620869714
v0idify
(matterbridge is a software that allows bridging many different platforms with each other)

1620869791
v0idify
i can't find any of the discord admins (according to the Community page) here

1620869820
g-w1
alexnask is sometimes here

1620870090
noam
I have working test execution :D

1620870827
noam


1620871271
v0idify
noam: what is zyg?

1620871317
daurnimator
ifreund:

1620871342
daurnimator
andrewrk: I don't think the longjmp issue should have been closed?

1620871342
v0idify
i'm gonna log off for now, if the discord admins are okay with adding a bridge (which will be possibly open to others if wanted) or anyone else wants to discuss making a "this week in zig", please send me an email v0id@riseup.net

1620871375
daurnimator
v0idify: people have asked for an IRC<>discord bridge before and we decided against it

1620871387
noam
v0idify: alternate zig compiler

1620871403
v0idify
daurnimator: oh, may i ask why? it doesn't necessarily have to be on #zig

1620871425
noam
Different communities with different behavioral norms and such, I think

1620871431
daurnimator
v0idify: okay; it was denied in the context of linking to this current #zig channel

1620871459
v0idify
i get why that's the case, it's very possible that this channel would end up spammed with bridge messages

1620871517
v0idify
noam: awesome! i figured because of the log, blah. written in c right?

1620871542
noam
Yep

1620871592
v0idify
does it have any dependencies?

1620871676
noam
A C99 compiler

1620871679
noam
LO

1620871680
noam
:P

1620871734
v0idify
:)

1620871757
noam
A tiny bit of POSIX, I think

1620871765
noam
But plan9 is a first-class target :)

1620871869
v0idify
ohh nice!!

1620878624
noam
is `fn foo() void{} fn bar() void {_ = foo();}` technically valid?

1620880166
daurnimator
noam: sure; why wouldn't it be?

1620880875
noam
cause _ = void{} seems unnecessary /shrug

1620881415
daurnimator
there was an issue to outlaw that; but it was declined because it makes things harder for generic code

1620881509
noam
makes sense

1620881563
daurnimator
also I originally thought you were referring to no newline between functions :P

1620881626
noam
lol

1620882292
andrewrk
hmm after merging master branch into my feature branch I'm getting undefined symbol to libunwind stuff

1620882833
andrewrk
hmm yeah hello world is broken with zig c++

1620882907
noam
(insert dramatic trumpet sounds)

1620883900
andrewrk
fixed

1620884073
daurnimator
andrewrk: sounds like we need a CI test for zig c++ hello world?

1620884103
andrewrk
indeed

1620885732
noam


1620885762
noam
... that "error: emulation finished" should probably have s/error: // :P

1620908013
mikdusan
andrewrk: why are we now building/linking libunwind for native-libc (for linux and *bsd) ?

1620909616
koakuma
TheLemonMan, your D102342 LLVM patch seems to fix the %o5 issue, thanks.

1620913542
koakuma
Hmm so on sparc64, building with -lc results in a lot of linker errors:

1620913542
koakuma
I also tried to link the objects manually with GNU ld, but it gives me this warning: "ld: warning: cannot find entry symbol rror-limit=0; defaulting to 0000000000100720", and produces a binary whose entry point is `__sparc_get_pc_thunk.l7`

1620913542
koakuma
Anyone has an idea of what's going on?

1620913564
mikdusan
nuke the error option; it differs from ld.lld slightly

1620913565
TheLemonMan
hey koakuma, thanks for testing the patch

1620913582
TheLemonMan
gnu ld doesn't support the -error-limit switch

1620913742
mikdusan
one step forward two steps back. I got dragonfly passing `zig build test` :) but some recent libunwind changes has borked *bsd linking again

1620913762
mikdusan
recent master commits that is

1620914147
TheLemonMan
what's up with your newly-found love for DragonflyBSD?

1620914281
koakuma
TheLemonMan & mikdusan, thanks, linking with GNU ld works now :)

1620914511
TheLemonMan
I'll fix the LLD errors if you upload somewhere all the .o files

1620914590
koakuma
I'll try to upload it somewhere, do you need the system and GCC files too?

1620914628
TheLemonMan
only the .o files referenced in your gist

1620914668
TheLemonMan
I guess you've also applied the libunwind patch for sparc

1620914748
koakuma
Oh, I haven't applied that one, sorry

1620914902
TheLemonMan
andrewrk forced the builtin libunwind to be linked even when using the system libc

1620914938
TheLemonMan
but that's not connected to your errors

1620915621
koakuma
TheLemonMan,

1620915661
koakuma
Ah also the patch fails to apply to bundled libunwind - it probably needs some updating

1620922246
bluekeys
Hey peeps. I'm running guix linux and there isn't a package for zig. I'm trying to build zig from source, so I can submit a package, so everyone else using guix can get some zig goodness. Unfortunately, I am struggling to even manually compile zig, likely due to something very obvious. I'm gonna post an error message here, if anyone has any ideas will they please shout back. :)

1620922430
bluekeys
OK. It's at 1% now. I promise it wasn't working last time I tried!

1620923065
bluekeys
Phew. It broke!

1620927259
Kingreil
bluekeys: did you manage to build it? The error sounds like a llvm version mismatch to me (i haven't built zig though)

1620927407
bluekeys
Still working on it. Kingreil, I think I'm not including headers properly. I don't often build things from source, so I'm just trying things and making notes...

1620927474
Kingreil
Nothing to be ashamed of :) The error you got was during the linking phase (the moment where you get an executable from a buch of .o and library references)

1620927526
Kingreil
So, i'm not sure what's >>exactly<< the error but it looks like you had all the include paths properly set up (the project compiled) but something was wrong with the library paths

1620927559
ifreund
bluekeys: zig requires llvm to be built with support for all targets, depending on where your llvm is coming from this may not be the case

1620927575
Kingreil
ohhhhh that sounds like the problem

1620927593
Kingreil
makes sense, the error is on coff::something

1620927706
bluekeys
Oooh, that sounds interesting. Let me ask in the guix channel, how to tell if I've installed an llvm that was built with support for all targets or not.

1620927824
ifreund
you also need to make sure that your are compiling zig with the same c++ compiler used to compile llvm

1620927836
ifreund
this is probably already the case though if you are using your system compiler

1620927857
ifreund
(yes, c++ is horrible)

1620928000
Kingreil
seems like there's llvm12 on guix:

1620928027
Kingreil
don't know how the release cycle of llvm works

1620928127
ifreund
that seems very odd, llvm/clang/lld are all released at the same time

1620928159
Kingreil
they probably forgot to update lld on the package

1620928336
Kingreil
or they are packaging the lib parts of llvm-12 but not the tools (clang/lld/lldb/etc)

1620928375
ifreund
zig links against llvm lld and clang

1620928540
bluekeys
Maybe if I try again, but limit to version < 12?

1620928623
bluekeys
Oh, no that won't work because v12 is mentioned explicitly on the building from source wiki. In which case, maybe I need to get myself a copy of lld 12

1620928628
ifreund
bluekeys: zig master requires llvm/lld/clang all to be version 12

1620928743
bluekeys
I'm just checking in #guix if anyone knows why llvm is 12, but lld maxes at 11 currently.

1620930231
Kingreil
bluekeys: if you change the version in the llvm.scm to 12 it

1620930311
Kingreil
i don't know a lot of scheme but it seems like they automatically use the llvm version to build clang and the runtime libs

1620930353
Kingreil
probably it was all version-bumped by hand at some point. Somebody automated the process for clang but forgot to do it for lldb, lld, etc

1620930658
bluekeys
I wonder if i can figure how to bump the version. guix edit lld takes me to the build code. I just have to figure how to make the change from 11 to 12

1620930667
andrewrk
mikdusan, because some native libcs depends on libunwind

1620930697
andrewrk
as an example, hello-world.cpp regressed on x86_64-linux-gnu

1620930750
andrewrk
apologies for not running that through the CI first

1620930824
andrewrk
does this look correct?

1620930825
mikdusan
this confused me. it's hybrid mode in that native-libc but instead of native-c++ it's bundled-c++ and then we change how native-libc stuff is linked?

1620930849
mikdusan
ie. we change native-libc linking when not even doing anything with c++

1620930850
andrewrk
native libc does not necessarily imply native libc++

1620930869
mikdusan
right so why then libunwind?

1620930885
andrewrk
because when we switched to native libc I got link errors with libunwind

1620930900
mikdusan
even when building a non-c++ thing?

1620930928
andrewrk
no because if that were the case the CI would have failed

1620930965
mikdusan
this may be a confluence of things. but on *bsd what is happening now to build hello.zig, it's building libunwind and linking it

1620931115
mikdusan
ah ok maybe this narrows it down: if using `-lc` then libunwind.a gets built/linked . and that's default mode on *bsd

1620931151
mikdusan
I would think for linux `-lc` building libunwind.a is unecessary too (unless in c++ mode)

1620931349
TheLemonMan
hmm, now that inline is callconv(.Inline) the `noinline` prefix looks out of place

1620931371
andrewrk
tbh i'm not happy with calloconv(.Inline)

1620931384
andrewrk
it's technically not wrong but it feels wrong

1620931449
TheLemonMan
yeah

1620931798
andrewrk
I'll put a up a PR for only building libunwind when linking c++

1620931943
mikdusan
this sounds like a good solve

1620932228
TheLemonMan
oh no, zig fmt is eating the whitespace before a noinline fn

1620932741
TheLemonMan
mikdusan, can you try adding -lgcc_eh and removing the libunwind reference from the lld line?

1620933150
mikdusan
for linux or a bsd with gcc?

1620933280
TheLemonMan
should work on both

1620940145
shachaf
ifreund: Do you not have a huge amount of variance benchmarking zig fmt? I did when I tried.

1620941079
ifreund
shachaf: yeah, my benchmarks aren't very scientific. Mostly just wanted to check for any sign of a significant regression which I didn't find

1620941096
ifreund
I did several runs for each and eyeballed one in the middle

1620941588
andrewrk
shachaf, use perf and look at cache-misses, instructions, and cycles

1620941593
andrewrk
those will be more stable

1620941698
ifreund
andrewrk: I posted those perf stats on the PR if you didn't see yet

1620941724
andrewrk
ahh

1620941767
ifreund
tldr, not much change: a few more cache misses but fewer instructions and cycles

1620941827
shachaf
andrewrk: I seem to remember doing that and still seeing a lot of variance.

1620941828
ifreund
the main reason I want this is because it would make stepping through the parser in a debugger soooo much nicer

1620941856
ifreund
shachaf: did you see any real difference before and after your change?

1620941884
shachaf
It was too noisy to measure easily.

1620942006
andrewrk
merged

1620942023
ifreund
nice :)

1620942067
andrewrk
76a259799d5bac3effabd1df44c0dec9e4fa16d4 will fix the CI; I'll open the libc++ thing as a separate PR

1620942192
shachaf
Oh man, merged just like that? I guess that works.

1620942206
mikdusan
TheLemonMan: yes linking this way worked on pre-libunwind.a patches:

1620942207
mikdusan
zig c++ -o main main.cpp -L/usr/lib/gcc/x86_64-pc-linux-gnu/10.2.0 -lgcc_eh

1620942269
mikdusan
and catch() exceptions works too

1620942278
mikdusan
gotta run.

1620942568
shachaf
It might also be nice to do prefix/postfix operators and other things in the same way eventually.

1620942823
marler8997
andrewrk, I'm not sure I understand your comment about not being able to know what the calling convention is

1620942846
marler8997
call(.NoInline) would mean the default calling convention, but you're not able to inline it

1620942902
andrewrk
this would remove the ability to specify noinline + a non default calling convention

1620942925
marler8997
a non default calling convention infers nonline does it not?

1620942944
marler8997
how could you inline a function with a non-default calling convention?

1620942975
marler8997
unless, you're saying that some callers could inline it and some may not?

1620942987
marler8997
so nonline prevent all callers from inlining it, is that correct?

1620943009
andrewrk
correct, noinline prevents all callers from inlining it

1620943031
marler8997
so if a function has a non-default calling convention, some callers can still inline it?

1620943155
andrewrk
I belive the only calling convention that does not allow inlining is naked

1620943167
marler8997
gotcha

1620943260
marler8997
to follow up on the train of thought, what would happen if we made non-default calling conventions imply nonline?

1620943282
andrewrk
what problem are you trying to solve?

1620943306
marler8997
language spec simplification

1620943354
marler8997
if we did that, I think the question would be, are there any use cases Zig couldn't support?

1620943413
marler8997
In the case where you want to emulator todays behavior, you would have to define the function using the default calling convention, then define a wrapper with an explicit calling convention

1620943554
marler8997
given we could emulator today's behavior, I don't think there's any use cases we couldn't support.  so we have 2 solutions to compare now

1620943562
marler8997
emulator => emulate

1620943814
andrewrk
can anyone run this command on OpenBSD and tell me the result? `c++ -E -Wp,-v -xc++ /dev/null`

1620944550
marler8997
thinking on it, I can't really tell if it's simpler to keep inline orthogonal to the calling convention or not

1620944600
ifreund
I mean, they are related concepts but also not exactly the same thing

1620944610
marler8997
if we decide to keep it orthogonal, then callconv(.Inline) doesn't make sense

1620944623
ifreund
I'd prefer keeping inline as a keyword for functions, just like noinline

1620944625
marler8997
yeah it seems like Zig could kinda go eitehr way

1620944651
ifreund
we already have inline as a keyword in many other places

1620944661
ifreund
having it

1620944691
marler8997
yeah good point in favor of inline

1620944715
marler8997
if we went back to "inline fn", do you think we should make it an error to specify inline with at least some kinds of calling conventions?

1620944784
marler8997
doing so implies it's not orthogonal, they do seem related but the coupling is a bit odd

1620944808
marler8997
it's like a 45 degree relationship :)

1620944864
marler8997
I dunno, I'm going back and forth.  explicitly forcing a function to always be inlined is actually completely orthgonal to any calling convention

1620944903
andrewrk
inline is a calling convention. it's nice to also be able to configure the calling convention with a comptime value. I think we'll just have both, with a preference for `inline fn` when the value would just be hard coded

1620944941
marler8997
that's not a horrible solution

1620944984
andrewrk
arghh the messiness of libc++ is bumming me out

1620945035
marler8997
I'm sure I will regret asking, but what's the messiness?

1620945506
andrewrk
every system has a different, incompatible libc++, and they have different dependencies on other libraries such as libunwind that don't come with libc++

1620945543
andrewrk
I can't even summarize it, it's just 99 different stupid problems that shouldn't exist that make everything Just Fail To Work

1620945582
marler8997
I once looked into writing dlang bindings to libc++....then I realized the same thing, it was going to be a montrous undertaking

1620945900
noam
Forced inline isn't orthogonal to calling convention, but forced

1620945910
noam
If you're inlining, no other callconv is valid

1620945920
noam
If you're *not allowing inlining*, you can still require a specific callconv

1620945978
noam
It might make sense to specify allowed and disallowed calling convs, instead of a specific callconv to require?

1620946015
noam
e.g. callconv(.{}, .{.Inline}) is noinline, callconv(.{.Inline}, .{}) is the current callconv(.Inline)

1620946049
noam
Or, since two tuples makes no sense:

1620946078
noam
callconv(.Disallowed, .{.Inline}) means "any callconv is fine, but no inlining is allowed"

1620946097
noam
callconv(.Allowed, .{.Inline}) means "only inlining is allowed"

1620946118
noam
callconv(.Allowed, .{.Inline, .SysV}) means "you're allowed to inline or use sysv for any given call"

1620946153
ifreund
what use case does that complexity solve?

1620946161
noam
This also frees up the compiler to produce multiple copies of small functions if doing so is beneficial, which can be the case if differing registerization characteristics make one option better than another in specific call sites

1620946270
noam
ifreund: it more gracefully integrates inline and noinline

1620946281
noam
inline

1620946300
noam
This generalizes that logic to

1620946416
noam
It also means that `noinline fn callconv(.Inline)` can't exist lexically

1620946424
noam
but that's an afterthought

1620946727
andrewrk
oh no, I thought of a valid use case for mixing `zig c++` with system compiled libs

1620946996
andrewrk
ifreund, I went for a simpler, less invasive solution to the immediate problem:

1620947072
andrewrk
trying to integrate with native libc++ is way too big of a stressful task to take on casually

1620947345
xackus__
I started adding proper type parsing to translate-c

1620947365
ifreund
andrewrk: that looks very reasonable, yeah linking with the native libc++/libunwind looks like a massive headache (who could've guessed?)

1620947375
xackus__
just got the first test case passing

1620948195
andrewrk
xackus__, you mean for macros?

1620948939
xackus__
andrewrk yes

1620948980
andrewrk
cool

1620949002
andrewrk
might want to coordinate with Vexu - he mentioned possibly wanting to tackle that with his

1620949311
xackus__
what is the best way to message Vexu?

1620949441
andrewrk
you could email him based on his git commit email, or find him on the main zig discord

1620949461
andrewrk
or just file an issue to discuss it and tag him :)

1620949476
andrewrk
perhaps you could open a draft PR with your WIP code

1620949552
xackus__
yeah, I wanted to open a draft PR soon

1620949726
xackus__
I will make an issue for now

