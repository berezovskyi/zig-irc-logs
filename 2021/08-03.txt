1627963352
noam!~noam@104.232.42.247
Stupid question to which the answer is probably "do a better job searching the docs": is evaluation order defined?

1627963367
noam!~noam@104.232.42.247
u32 foo = bar() + baz(); 

1627963388
noam!~noam@104.232.42.247
let's say both functions print their own names; is it defined whether the output is barbaz or bazbar?

1627963417
noam!~noam@104.232.42.247
Note for clarification: NOT interested in the behavior of stage1 or stage2, but of the intended behavior

1627963548
noam!~noam@104.232.42.247
For now, assuming undefined

1627981580
ifreund!~ifreund@user/ifreund
noam: I know that the evaluation order in const foo: Foo = .{ .bar = bar(), .baz = baz() }; is defined to be the lexical order of bar() and baz()

1627981745
ifreund!~ifreund@user/ifreund
Don't know about arithmetic operators, but I would assume that it is also defined for them

1627981810
ifreund!~ifreund@user/ifreund
having it undefined sucks in C and C++ IMO and is the source of subtle bugs

1627981847
ifreund!~ifreund@user/ifreund
especially when some compilers happen to evaluate the functions in the order the programmer intended but some don't

1628006036
noam!~noam@104.232.42.247
I've somehow gone from working on a Zig compiler to designing a hybrid between an IR and a high-level language.

1628006059
noam!~noam@104.232.42.247
Whoops.

1628017829
andrewrk!~andrewrk@mail.ziglang.org
yes it's defined 

1628017863
andrewrk!~andrewrk@mail.ziglang.org
same order as it appears in the source code, with the usual caveats about the compiler's ability to re-order loads and stores which have no memory dependencies

1628018291
amine!~aminechik@li449-221.members.linode.com
Hello, what's the proper way of comparing pointer addresses in Zig ? In C if a,b are char*, one can do `if (a < b) (...)`, is there an equivalent in Zig ?

1628018560
andrewrk!~andrewrk@mail.ziglang.org
@ptrToInt

1628018561
ifreund!~ifreund@user/ifreund
amine: `@ptrToInt(a) < @ptrToInt(b)`

1628018658
amine!~aminechik@li449-221.members.linode.com
thanks !

