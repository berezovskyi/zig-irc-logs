1611339372
justin_smith
in the docs, it says "A for expression can be used to iterate over the elements of a slice, array, or tuple" - I assume in this case "tuple" (not mentioned elsewhere in the docs) refers to an anonymous struct, which is indexed by number but type-heterogenous?

1611339501
g-w1
a tuple is something like this: .{ "thing", .diff_type }

1611339516
g-w1
you use it in std.debug.print as the second arg

1611339658
justin_smith
g-w1: OK - right - the docs call those anonymous structs, and tuples are only meantioned in that one place

1611339748
Gliptic
anonymous structs are a bit more general as the fields can have names (don't think for works on those?)

1611339834
justin_smith
Gliptic: oh, yeah that would make sense

1611339939
justin_smith
Gliptic: oh right, what for is mentioning isn't "anonymous struct literal", it's "anonymous list literal", I misidentified that

1611340198
justin_smith
(I've used all of these in my code, just wasn't super clear on the terminology)

1611340940
ifreund
I think the terminology could probably use work

1611340965
ifreund


1611342081
justin_smith
suddenly I'm curious if I could use type inferred list literals instead of real types for the weird helper types I sometimes need to glue together different parts of my code...

1611347146
marijnfs
I'm trying to deserialize into a tagged union

1611347175
marijnfs
@TagType gives me the enum type right?

1611347183
marijnfs
how do I get a specific union type

1611347212
g-w1
wdym? @TypeOf?

1611347287
marijnfs
it i have t: T = union(enum), does @TagType(T) give me the enum?

1611347302
g-w1
yes

1611347312
g-w1
For a union, returns the enum type that is used to store the tag value.

1611347347
marijnfs
and how do i create the appropriate enum type itself?

1611347357
marijnfs
say I have the enum only

1611347362
ifreund
@TagType(T) is the enum type

1611347383
marijnfs
and how do I 'fill in' the union type?

1611347399
ifreund
marijnfs: you're probably looking for @unionInit()

1611347401
marijnfs
I want to initialize it undefined, and then fill it in given deserialization

1611347404
marijnfs
hmm

1611347419
g-w1
maybe it would be easier to just do enum(MyUnion)?

1611347428
g-w1
*union(MyEnum)

1611347455
marijnfs
ifreund: but thats with comptime enum

1611347460
ifreund
I have an example deserializing a tagged union here:

1611347473
g-w1
you cant do it an runtime, types are a comptime only idea

1611347483
ifreund
beware: theres a lot of meta programming though, this function is the backbone of my wayland scanner

1611347492
marijnfs
ok inline for over Union fields?

1611347515
marijnfs
yeah that would create runtime code indeed

1611347522
ifreund
yup

1611347543
marijnfs
how do i distinquish between C and zig union?

1611347563
marijnfs
I happen to have a c-union, and it trigger the .Union case

1611347644
ifreund
marijnfs: the TypeInfo.Union.container_layout

1611347653
ifreund
er just layout I think

1611347694
ifreund
if you have an extern union you may be able to get away without the inline for as they have a well-defined memory layout

1611347697
marijnfs
thanks, i'll have a look

1611347702
marijnfs
' runtime cast to union 'Request' which has non-void fields'

1611347708
marijnfs
what does that mean

1611347749
ifreund
not sure tbh, do you have the code somewhere?

1611347787
marijnfs
ifreund: indeed, an extern 'c' union is easier, it's just some memory I copy with length @SizeOf right?

1611347808
marijnfs


1611347820
ifreund
extern unions cant be tagged though :/

1611347827
marijnfs
in src/node.zig is my code basically, under deserialize_msg

1611347842
marijnfs
ifreund: then I guess thats not what i have

1611348057
ifreund
marijnfs: this is where you need to be using @unionInit()

1611348085
marijnfs
oww

1611348093
marijnfs
yeah nice spotting

1611348115
ifreund
this is foo.bar = 4; instead of foo = .{ .bar = 5 }

1611348129
ifreund
(the second is what @unionInit() does)

1611348228
marijnfs
ah thats a nice explanation

1611348238
marijnfs
i'm getting the hang of this language:P

1611348418
ifreund
:)

1611348440
marijnfs
yuup works:)

1611348452
marijnfs
t = @unionInit(T, name, try deserialise_msg(FieldType, msg));

1611348460
marijnfs
it's still remarkable it compiles

1611348473
ifreund
comptime does feel like magic some times

1611348532
andrewrk
don't worry the magic feeling will go away when the bugs are fixed :)

1611348618
marijnfs
i'm sure there aren't any:P

1611348678
TheLemonMan
you're not looking hard enough :^)

1611348717
andrewrk
howdy TheLemonMan

1611348719
ifreund
take for example that dispatcher function for my wayland scanner, the equivalent C code in libwayland is something like twice as long and the equivalent rust is even longer

1611348763
andrewrk
you might be interested to know I'm working on the parts of self-hosted right now that are the impossible-to-maintain parts of stage1 and I think it's going well! would value your opinion though if you wanted to have a look

1611348766
ifreund
also the C one is at least has separate implementations for the client and server side, so make that 4 times as long. Not sure about the rust one

1611348771
TheLemonMan
yo andrewrk, what's cooking in zig land?

1611348828
TheLemonMan
I'm quite busy these days :\ I wish I had enough time for some serious work

1611348848
andrewrk
ifreund, you might be interested in this related accepted proposal:

1611348884
andrewrk
summary: switch (my_tagged_union) { inline else => |comptime_known_payload| { ... } }

1611349025
ifreund
andrewrk: yeah I saw that one and it looks quite handy, would replace the inline for/if (field_type == runtime_value) pattern I guess

1611349059
ifreund
I wonder if the generated code would be better or not

1611349072
andrewrk
it certainly would in unoptimized builds

1611349091
andrewrk
because it would generate a switch instead of a for loop

1611349133
andrewrk
in a way, this is our alternative to OOP features in the language

1611349138
ifreund
well the inline for/if pattern gets unrolled to a series of ifs not?

1611349169
andrewrk
yes inline for will unroll into a series of if; switch with inlined cases turns into (probably) a jump table

1611349179
TheLemonMan
andrewrk, wrt #7847 what's the generated ZIR w/o that patch applied?

1611349193
ifreund
yeah I really like how that will clean up those maunal dispatch switches in stage2 (and in river)

1611349203
ifreund
thinking of link.File in particular

1611349307
marijnfs
so with that you can just to inline case switches?

1611349346
ifreund
once #7224 is implemented yeah

1611349386
marijnfs
that would be nice

1611349397
ifreund
andrewrk: by the way, please don't forget about #131 when implementing globals in stage2 :)

1611349509
andrewrk
TheLemonMan, a compile error that says "TODO: implement this" but if you put a dummy instruction then it looks like this:

1611349543
andrewrk
the store_to_block_ptr is a dummy there just to show you

1611349579
andrewrk
ifreund, thanks for the reminder, this is actually a great time to implement that in stage2

1611349594
marijnfs
how to I turn a var t: T to a []u8? The size should be known right?

1611349623
ifreund
marijnfs: mem.bytesAsSlice maybe? there's some function to do that

1611349639
andrewrk
TheLemonMan, the short summary is that astgen will now notice when expr() does not actually use a result location pointer, and fix up the zir to be value-based instead. thanks to the tree structure of the zir this ends up being clean and reasonably straightforward

1611349676
andrewrk
then the semantic analysis phase has a simplified job to do based on this zir that is either value based or pointer based but not both

1611349680
ifreund
andrewrk: yeah, I tried for a weekend to hack partial support for #131 into stage1 and failed pretty throughly. It's really something that is best designed for from the beginning

1611349750
ifreund
marijnfs: std.mem.toBytes

1611349787
ifreund
or mem.asBytes() depending on if you want a value or pointer

1611349836
ifreund
both just wrap a @ptrCast(), if you need to care about endianness you need a different function

1611350286
marijnfs
ah asBytes might be it

1611350745
andrewrk
I'm imagining a function StructOfArray `fn(T: type) type {}` that takes a struct and is essentially ArrayList where multiple fields share the same capacity

1611350774
andrewrk
so that each field of the struct gets its own array, but the length and capacity is shared

1611350823
andrewrk
you would use it if you ever had multiple fields of a struct be ArrayListUnmanaged where the intent was to share the same length and capacity

1611350861
justin_smith
ats2 uses an extended type system to detect resource leaks. similar to how the possibility of returning an error is a part of the type sig that gets transitively applied to callers, the fact that a resource is allocated becomes an annotation on the type, and it needs to be added to the caller's return type too, unless they dispose of the resource

1611350861
ifreund
hmm, you could make it use a single allocation too if you wanted

1611350883
justin_smith
I think that would be a cool feature, if we could make it mix elegantly with existing syntax

1611350910
andrewrk
ifreund, hmm do you think that would be valuable?

1611350932
ifreund
andrewrk: depends on the length of the arrays I think

1611350960
ifreund
like when they are small a single allocation would be better I imagine

1611350961
andrewrk
oh I see, yeah even if you wanted to leave room to grow for each array, you could still have it be 1 allocation

1611350971
ifreund
exactly

1611350996
andrewrk
well I have a Real Actual Use Case for this abstraction in stage2

1611351082
ifreund
well I'm already procrastinating on so many things, maybe I'll write one real quick

1611351094
ifreund
good thing we have @Type() now to make this possible

1611351110
andrewrk
sweet

1611351163
ifreund
MultiArrayList?

1611351169
andrewrk
sounds good to me

1611351239
andrewrk
it wouldn't be purely for optimization too; it would make error handling & resource management easier since you wouldn't have to clean up when some fields succeeded the realloc but others didn't

1611351265
andrewrk
pretty easy to justify using this abstraction IMO

1611351274
ifreund
yeah I definitely see the use case

1611351301
ifreund
the other way to approach this is to have a single array of structs instead of parallel arrays

1611351326
andrewrk
yeah, but the use case I have right now is that later I want to pass a slice of only 1 of the field to something

1611351337
andrewrk
I need to pass a []*Inst to resolvePeerTypes

1611351344
ifreund
makes sense

1611351462
andrewrk
imagine implementing this abstraction in C lmaooo

1611351479
ifreund
oh hmm I'm not sure you can make this without #6709

1611351517
ifreund
at least not with the API I was imagining

1611351526
andrewrk
here's a hint: fn MultiArrayList(comptime S: type) type { return struct { untyped_data: align(@alignOf(S)) u8, len: usize, capacity: usize }; }

1611351569
ifreund
how does access look though? just by index?

1611351607
ifreund
I mean selecting which array to access

1611351628
andrewrk
fn items(self: *Self, comptime field: FieldEnum) []FieldType(field) {...}

1611351640
ifreund
Ok yeah that works

1611351681
andrewrk
IMO this is preferable to #6709 in terms of debugging and how the source location matches up with the actual source location

1611351710
andrewrk
you can still follow the control flow with simple function calls

1611351738
andrewrk
what API were you imagining tho?

1611351801
ifreund
I was initially thinking of something where the fields of the input struct were also fields of the output struct but slices of their former types

1611351822
ifreund
I don't think that's actually better though

1611351824
andrewrk
I think part of the idea here is to have the memory footprint of the struct be ideal

1611351845
ifreund
yup, which that breaks

1611351862
ifreund
I'll make an unmanaged too then

1611351891
andrewrk
feel free to

1611351916
andrewrk
static initialization for one

1611351929
ifreund
yeah I really like just being able to .{} init them

1611351949
zags
var x: [_]u8 = .{0x65, 0xbb, 0xcc};   was surprised that didn't work, shouldn't zig be able to infer size here? I'm porting a bunch of literals from c++ and would like to avoid setting size on everything.

1611351951
ifreund
been meaning to switch river over to them entirely but haven't found th time yet

1611351952
andrewrk
plus it encourages the ensureCapacity / appendAssumeCapacity pattern, which is nice

1611351987
ifreund
maybe we should consider changing the naming conventions such that we have ArrayList() and ArrayListManaged()

1611351996
ifreund
making "unmanaged" the default

1611351997
fengb
zags: [_]u8{0x65, 0xbb, 0xcc}

1611352004
andrewrk
zags, zig wants to know the type of x before it evaluates the initialization expression

1611352022
fengb
`var x = [_]u8{0x65, 0xbb, 0xcc};`

1611352026
andrewrk
(unless you use type inference)

1611352043
fengb
The infer expression only exists on a literal, you were putting it in a type declaration

1611352067
zags
ok, syntax still confuses an old c++ programmer :) Thanks, that worked

1611352104
ifreund
yay, we already have std.meta.FieldEnum :)

1611352128
andrewrk
thank daurnimator for that I believe

1611352153
zags
var x: [_]u8 = .{0x65, 0xbb, 0xcc};

1611352160
zags
still curious why zig doesn't know the type here

1611352168
zags
it's a grammar technical reason?

1611352183
g-w1
its a tuple of comptime int i think

1611352194
fengb
Zig doesn't have partial type inference. [_]u8 is not a valid type declaration

1611352224
ifreund
indeed, thanks daurnimator :)

1611352231
zags
the reason I'm confused fengb, is that var xy = [_:0]u8{0x65, 0xbb, 0xcc}; does work

1611352243
zags
so _:0 works, _ doesn't

1611352260
zags
that's a bit confusing

1611352265
fengb
`[_:0]u8{0x65, 0xbb, 0xcc}` this is a literal definition, not a type declaration

1611352313
fengb
Zig doesn't understand when you try using `[_]u8` as a type

1611352318
zags
var a = [_]  u8{0x65, 0xbb, 0xcc};

1611352318
fengb
Because it doesn't exist in the grammar

1611352318
zags
var b = [_:0]u8{0x65, 0xbb, 0xcc};

1611352340
fengb
The full literal expression is `[_]T{ ... }`

1611352342
zags
so putting those two aside, it's surprising it doesn't work, that's all :D

1611352349
zags
I'll try to understand the difference, thanks

1611352842
zags
makes sense now, last question - does the std library have a portable dynamic library loading facility?

1611352913
zags
so I don't have to do platform specific dlopen/LoadLibrary and all that jazz, preferably pick correct extension and such

1611354212
zags
const lock_init = if (builtin.single_threaded) {} else false;

1611354219
zags
found that pattern in the std lib, seem like

1611354224
zags
const lock_init = if (!builtin.single_threaded) false;

1611354229
zags
would work as well

1611354245
ifreund
nope, {} is void

1611354246
zags
is there a reason for doing it the first way, beyond someone finding it more readable?

1611354259
zags
ifreund: i get void in the second case as well when I tried

1611354298
ifreund
oh interesting

1611354309
ifreund
I definitely find the first more readable

1611354326
zags
I see, that might be the reason then :)

1611355076
zags
hm, seen some userland ideas for closures, but how is deallocation going to work without gc/raii/etc ?

1611355139
zags
maybe a boehmgc allocator could be useful for those cases, unless there's a robust pattern I'm not seeing

1611355267
ifreund
arenas can be useful for stuff where the lifetime management is too annoying

1611355276
ifreund
if you have bounds on the lifetime that is

1611355306
ifreund
kinda depends on your use-case for closures I think

1611355366
zags
yeah, not sure yet, buf async stuff in boost for instance, it would get hairy without smart pointers :D

1611355382
zags
haven't looked much at async networking in zig yet

1611355417
zags
(in terms of completion handlers, if there's anything like it)

1611355684
fengb
You can probably make a ref-counted closure

1611355689
frmdstryr
How can I access type of a "Held" mutex now?

1611355701
zags
fengb: yeah. One more question, can page_allocator work with hugepages?

1611355780
zags
I know this can be a bit annoying to implement on windows, SeLockMemoryPrivilege etc

1611355895
zags
(reason this is done is to reduce tlb cache pressure)

1611356102
zags
Doesn't look like heap.zig utilize any MEM_LARGE_PAGES options

1611358507
ifreund
looks like I may have caused zig to get packaged for CRUX :D

