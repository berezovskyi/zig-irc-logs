1628059493
andrewrk!~andrewrk@mail.ziglang.org
generic functions coming along nicely in self-hosted: https://gist.github.com/andrewrk/011e9b7801595054f63be6779270af7b

1628062664
ikskuh!~xq@2a0d:5940:6:163::ad7e
heya o/

1628062669
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: very nice!

1628062697
ikskuh!~xq@2a0d:5940:6:163::ad7e
is there a way to use the ms libc++ instead of the one shipped with zig?

1628078441
sm2n!~sm2n@user/sm2n
is there a reason zig doesn't have a manpage?

1628079018
ifreund!~ifreund@user/ifreund
sm2n: docs aren't really a priority yet, and that's one more thing that needs to be kept in sync as the toolchain and language evolve

1628079132
sm2n!~sm2n@user/sm2n
ah, fair enough

1628079177
sm2n!~sm2n@user/sm2n
I hope it's something for the future though, I feel sad every time I instinctively type man X in and it doesn't work

1628079205
ifreund!~ifreund@user/ifreund
totally agree

1628080991
sm2n!~sm2n@user/sm2n
is there a way I can set zig fmt to use 80 cols?

1628081005
sm2n!~sm2n@user/sm2n
It's undoing my changes when I break lines up

1628081083
ikskuh!~xq@2a0d:5940:6:163::ad7e
no, there is no way to do so

1628081088
ikskuh!~xq@2a0d:5940:6:163::ad7e
note:

1628081100
ikskuh!~xq@2a0d:5940:6:163::ad7e
a(b,c,) will be formatted with a,b,c on separate lines

1628081185
sm2n!~sm2n@user/sm2n
oh, that's exactly what I wanted, thanks!

1628081333
sm2n!~sm2n@user/sm2n
what's the in-memory representation for multidimensional arrays?

1628081562
ikskuh!~xq@2a0d:5940:6:163::ad7e
sm2n: there are no multidimensional arrays

1628081584
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you mean arrays of arrays: exactly how you declared them

1628081594
ikskuh!~xq@2a0d:5940:6:163::ad7e
so [3][2]u8 is 3 times [2]u8 in memory

1628081596
dutchie!~dutchie@user/dutchie
an array of T is a bunch of T next to each other in memory. a slice of T is a pointer and a length to some array

1628082307
sm2n!~sm2n@user/sm2n
okay, cool

1628082326
sm2n!~sm2n@user/sm2n
(though the zig website does call them multidimensional arrays in the documentation)

1628082465
ikskuh!~xq@2a0d:5940:6:163::ad7e
huh?

1628082469
ikskuh!~xq@2a0d:5940:6:163::ad7e
can you link that?

1628082531
dutchie!~dutchie@user/dutchie
https://ziglang.org/documentation/master/#Multidimensional-Arrays is sort of unclear as to whether they are special i guess

1628082543
ikskuh!~xq@2a0d:5940:6:163::ad7e
> Mutlidimensional arrays can be created by nesting arrays:

1628082551
ikskuh!~xq@2a0d:5940:6:163::ad7e
i mean, that already explains it (to me)

1628082600
supakeen!~user@python/site-packages/supakeen
It's common lingo (both).

1628082613
sm2n!~sm2n@user/sm2n
well I wasn't sure if an array of arrays had a dense memory layout or not

1628082643
sm2n!~sm2n@user/sm2n
I would expect it to, but I thought it was worth checking

1628082697
ikskuh!~xq@2a0d:5940:6:163::ad7e
supakeen: C# has real multidim arrays

1628082704
ikskuh!~xq@2a0d:5940:6:163::ad7e
where you need to clarify layout

1628082712
ikskuh!~xq@2a0d:5940:6:163::ad7e
but nested arrays have a implicit layout

1628088137
ifreund!~ifreund@user/ifreund
sm2n: the memory layout of arrays is well defined and what you'd expect coming from C. a "multi dimensional array" in Zig is not special, it's just an array where the elements also happen to be arrays

1628088288
ifreund!~ifreund@user/ifreund
it's also important to note that arrays are treated as values in Zig, unlike in C

1628088654
sm2n!~sm2n@user/sm2n
that (values) explains it

1628088995
ifreund!~ifreund@user/ifreund
:)

1628089927
sm2n!~sm2n@user/sm2n
is there a generic set container data structure in the zig stdlib? I'm only seeing bufset and bitset

1628090074
viashimo!~viashimo@user/viashimo
sm2n, iirc it's possible to use a hash_map with the value type as void as a set. eg std.AutoHashMap(MyType, void). not sure if I reader your question correctly though

1628090080
viashimo!~viashimo@user/viashimo
s/reader/read

1628090199
sm2n!~sm2n@user/sm2n
ah, I guess that works, thanks

1628090521
ifreund!~ifreund@user/ifreund
yep, that's the recommended pattern for a hash set

1628090929
sm2n!~sm2n@user/sm2n
err, am I missing something? std.testing.expectEqual says the first parameter is the expected value and the second is the one you calculated, but it fails if I use it that way since my expected value is comptime. Reversing it works though

1628090953
sm2n!~sm2n@user/sm2n
It doesn't really matter though, just weird

1628090996
sm2n!~sm2n@user/sm2n
well, I guess it does because the output is wrong

1628090996
ifreund!~ifreund@user/ifreund
sm2n: it's not very ergonomic, but the intended usage is expectEqual(@as(u32, 42), actual)

1628091007
sm2n!~sm2n@user/sm2n
oh, I see

1628091029
sm2n!~sm2n@user/sm2n
is there a reason why the parameters just couldn't be flipped?

1628091058
ifreund!~ifreund@user/ifreund
I think the idea is that you want to check that the expected type is returned as well, though I personally would be happy to see them flipped

1628091086
sm2n!~sm2n@user/sm2n
that makes sense I guess

1628091094
sm2n!~sm2n@user/sm2n
not sure I like it

1628091166
ifreund!~ifreund@user/ifreund
the std is still pretty rough at this point in general fwiw, though some parts such as the hash maps are quite solid

1628094923
jacoscaz!~jacoscaz@host-82-48-132-102.retail.telecomitalia.it
Hi all! Newcomer to Zig here. I'm getting an error I can't quite understand when doing the following: `const str: [:0]u8 = try std.cstr.addNullByte(allocator_, str);`. The error is `error: expected type 'void', found '@typeInfo(@typeInfo(@TypeOf(addNullByte)).Fn.return_type.?).ErrorUnion.error_set'`. What am I doing wrong?

1628094976
ifreund!~ifreund@user/ifreund
jacoscaz: the return type of the enclosing function needs to be an error union to be able to use `try`

1628095019
jacoscaz!~jacoscaz@host-82-48-132-102.retail.telecomitalia.it
Ok, I'm an idiot.

1628095029
jacoscaz!~jacoscaz@host-82-48-132-102.retail.telecomitalia.it
Thanks ifreund!

1628095060
ifreund!~ifreund@user/ifreund
no problem, error messages aren't great yet :D

1628095720
jacoscaz!~jacoscaz@host-82-48-132-102.retail.telecomitalia.it
So far the vast majority of them have been quite helpful, actually!

1628095741
jacoscaz!~jacoscaz@host-82-48-132-102.retail.telecomitalia.it
This is the first one I wasn't able to figure out on my own.

1628105395
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Some <3 for andrewrk in its interview for corecursive, that's really cool

1628121020
andrewrk!~andrewrk@mail.ziglang.org
fucking hell, they tagged llvm 13 rc1 already

