1620778232
ifreund
CI is green for #8737 :)

1620791100
noam
ifreund: what about discrete integration?

1620791102
noam
:P

1620793382
andrewrk
oh man I just learned how to utilize vim's undo tree. this is wild

1620793425
andrewrk
you can go back in time and then choose a different alternate universe where you typed something else and redo that branch

1620809987
ifreund
noam: this isn't math class you nerd, I just want to happily forget all that stuff and am doing pretty well so far :P

1620811334
noam
lol

1620811446
noam
ifreund: I should've tossed in a reference to red/green trees or something, too XD

1620812636
TheLemonMan
mikdusan, if you're interested in some more challenges there's also Haiku

1620812881
ifreund
TheLemonMan: looks like OpenBSD doesn't have dl or rt :/

1620812991
TheLemonMan
aw shit, we need one list for glibc and one for BSDs then

1620813025
ifreund
not one per target?

1620813051
ifreund
or something like is_libc_lib_name() but in reverse?

1620813144
TheLemonMan
ah right, I cygwin/darwin may use some different sets of libs

1620813555
ifreund
TheLemonMan: one other thing I'm confused about that you might have insight on, I now need to explictly add -lffi when linking libc and wayland wayland libraries while I didn't before my changes

1620813688
ifreund
any idea what's up with that? I'm not really sure which behavior is correct

1620813764
TheLemonMan
uh that's strange, libffi is not part of glibc by any means. what symbols are missing?

1620813855
ifreund
none, linking succeeds but I get error while loading shared libraries: libffi.so.7: cannot open shared object file: No such file or directory

1620813861
ifreund
(at runtime)

1620813971
ifreund
which doesn't make sense caes ldd reports "libffi.so.7 => /usr/lib/libffi.so.7 (0x00007f4a2bf72000)"

1620814130
ifreund
hmm, ldd reports all the other shared objects as being in /usr/lib64

1620814146
ifreund
libffi is the only one listed in /usr/lib

1620814165
ifreund
/usr/lib64 is a symlink to /usr/lib on my system though

1620814223
TheLemonMan
none of the libraries you've added should depend on libffi

1620814300
ifreund
maybe it wasn't my change specifically that changed this behavior, I'll test some other commits. Right now I'm comparing 0.7.1 with master

1620814396
TheLemonMan
yeah, bisecting the offending commit is a good starting point

1620814411
TheLemonMan
did you update any of the other wayland libs in the meanwhile?

1620814432
ifreund
no, the same system libraries still work fine on 0.7.1

1620814482
ifreund
I was right though, it wasn't my latest PR that changed this behavior, it's different on  55d235dc vs 0.7.1 as well

1620814515
ifreund
time to do a long slow bisect I guess

1620814637
TheLemonMan
git bisect with an automated script makes the bisection process quite painless

1620814647
TheLemonMan
anyway, brb

1620815818
ifreund
too many breaking changes between 0.7.1 and master to make a bisect practical :/

1620815827
ifreund
well, an automated one at least

1620817041
noam


1620818443
mikdusan
wth is wrong with your prompt? :P

1620818547
motiejus
hi folks. How can I compile a bpf program with `zig cc`? Scrolling through the sources, it seems to be supported, but I can't find the right value for `-target` to generate the object file.

1620818573
motiejus
I tried `zig cc  -target bpf -Wall -Wextra -Werror  -o ebpf_classid_marker.clang.o -g  -O2 -c ebpf_classid_marker.c`, and got `error: UnknownArchitecture`; if I replace `zig cc` with `clang`, it works as expected

1620818630
ifreund
motiejus: I think you need bpfel or bpfeb as the arch in the -target triple, see `zig targets`

1620818697
motiejus
thanks! `bpfel` it is :)

1620818705
mikdusan
the best thing about endian-acronyms is you have to remember their character-ordering for each archictecture. This is some huge conspiracy I tell ya.

1620818768
motiejus
git grep bpfel | tail -1

1620818768
motiejus
src/zig_llvm.h:    ZigLLVM_bpfel,          // eBPF or extended BPF or 64-bit BPF (little endian)

1620818774
motiejus
easy enough ;)

1620818821
ifreund
git bisect says 6 more steps left :)

1620818857
mikdusan
motiejus: `zig targets`

1620818936
motiejus
thanks mikdusan and ifreund, that worked.

1620818992
motiejus
another question: I started dabbing with

1620819079
ifreund
motiejus: yeah, that feature is considered desireable and easy for someone new to the zig codebase to work on

1620819085
ifreund
I say go for it!

1620819087
noam
mikdusan: nothing? :P

1620819092
mikdusan
hmmm it would be nice if `git commit` added as comments or something HEAD's commit message for easy reference

1620819103
mikdusan
during editing

1620819113
ifreund
noam: your powerline glyphs are a little funky/misaligned

1620819133
ifreund
mikdusan: you can totally make your editor do that :P

1620819174
mikdusan
yeah the '>' thingee sticks out above and then highlighting makes it look like the font is also shifted a pixel up

1620819189
mikdusan
ifreund: but I am lazy

1620819217
ifreund
guess you just gotta keep opening up another terminal to run git show then :P

1620819226
mikdusan
hhahah

1620819252
ifreund
actually, my editor lets me run git show in the editor and have the output show up in a new buffer

1620819426
noam
hehehehehe

1620819667
noam
... I'm not committing that, that's awful :P

1620822602
mikdusan
oof oom - std.zig tests now blow out a 14 GiB VM

1620822629
dok
ouch

1620822668
mikdusan
it can't be that high. grr. maybe I had 2 tests running at the same time. I hope that's the case.

1620823424
koakuma
Question: does __floatunsitf really takes an u64? All the other implementation that I can find seem to take an u32 instead.

1620823424
koakuma


1620823847
ifreund
TheLemonMan: my bisect points to the merging of the llvm12 branch causing -lffi to be required

1620823881
ifreund
there a whole slew of commits from that branch that don't compile or produce a broken zig so I was unable to narrow it down further

1620823962
TheLemonMan
what's the output of --verbose-link for river? finding all the libs and ldd-ing them should give you a pretty complete dependency graph

1620823991
ifreund
I know that wayland-client and wayland-server depend on libffi

1620824030
TheLemonMan
ok, try running the link step using your system ld instead of using lld

1620824043
TheLemonMan
that's to rule out some newly-introduced change in the linker

1620824105
ifreund
gimme a minute, rebuilding master zig now

1620824458
ifreund
hmm, my system ld says "ld: warning: cannot find entry symbol rror-limit=0; not setting start address"

1620824524
TheLemonMan
yeah, drop the -error-limit switch

1620824524
ifreund
this is the command I tried:

1620824531
TheLemonMan
that's not supported by GNU ld

1620824582
ifreund
sysetem ld works, no runtime error about not being able to find libffi

1620824594
ifreund
guess that's a lld regression then?

1620824614
ifreund
or just a change in behavior? I'm not sure if the new behavior is wrong or not

1620824621
TheLemonMan
do you have lld-11 installed?

1620824646
ifreund
yeah I think so

1620824698
ifreund
TheLemonMan: yep, lld-11 works

1620824766
TheLemonMan
great, is your system beefy enough to run a LLVM bisection run?

1620824791
ifreund
i've got a beefy cpu but only 16 gigs of ram

1620824879
TheLemonMan
"only"

1620824891
ifreund
don't have time to try that today though, gotta get some other work done

1620824916
ifreund
TheLemonMan: heh, so you're saying I should be fine I guess :D

1620842783
TheLemonMan
koakuma, give this patch a try

1620842853
TheLemonMan
I'm more and more convinced that we should write down the syscall stubs (and the clone impl) in some stand-alone .S file

1620842888
TheLemonMan
andrewrk, what do you think? would that be hard to integrate into the build system?

1620842909
andrewrk
still catching up on the conversation

1620843193
TheLemonMan
well, the problem is that we're hitting a few LLVM bugs in the inline asm handling when targeting SPARC, but in general we'd have some leaner and faster syscall entry points where we can precisely control how the parameters are forwarded to the kernel

1620843217
TheLemonMan
and clone() has a huge problem, it's defined as a naked function... in c.zig

1620843284
TheLemonMan
the problem is that, when optimizations are turned on, you can't really call a naked function defined in the same CU

1620843320
TheLemonMan
because LLVM sees trough all your shenanigans (eg. casting the fn to a non-naked CC) and eventually does something bad with it

1620843335
TheLemonMan
such as corrupting the input registers/frame

1620843353
TheLemonMan
you also wrote a comment about that in c.zig heh

1620843423
andrewrk
ifreund, are you trying to upgrade river from 0.7.1 to master branch?

1620843676
ifreund
andrewrk: no, I was just making a 0.8.0 branch for zig-wayland so someone who was interested could play around with upgrading the code generation to use the new std.fmt fanciness

1620843712
ifreund
to be clear, everything works fine if I explicitly link libffi, it just seems weird that the behavior of lld changed

1620843739
andrewrk
agreed

1620843920
mikdusan
ifreund: do you have anything in progress re: *bsd hosted-lib linking ? it's pretty much broken now and I need to get some fixes in

1620844035
andrewrk
TheLemonMan, ok I'm thinking about the inline asm thing. damn, I really like the tight integration with inline asm. are you sure we can't fix the problems with a some combination of language modifications + lowering to LLVM IR in a more careful way?

1620844698
TheLemonMan
I'll try to dig a bit more to see if LLVM can be convinced to leave the naked fns alone

1620844847
ifreund
mikdusan: No I haven't started anything yet, sorry for breaking things

1620844870
ifreund
I'll probably get to it later this evening unless someone else does it first

1620845010
ifreund
It should be as simple as adding a function to std.Target that returns the list of libc components that need to be linked and then using that over the current hardcoded list

1620845049
andrewrk
you could also put them in src/target.zig depending on whether it seems like a compiler implementation detail, or an interesting property of a particular target

1620845101
ifreund
ah, yeah src/target.zig is probably better

1620845157
andrewrk
TheLemonMan, I'm reluctant to give up the property that a compilation can start with .zig code as a root source file, and load only other .zig files, and be able to do syscalls. I don't want to shut down your efforts here but I do want to make sure we're exploring all the options. we'd definitely be giving up a certain cross-section of simplicity by trying to bring in assembly files into the mix

1620845194
andrewrk
but yeah I just re-read my own comment on top of fn clone and that TODO has just been sitting there for years now

1620845261
andrewrk
I think the first question that needs answering is, which of the three problems is this? (1) a soundness problem in the language? (2) a problem with lowering to sound LLVM IR? (3) bug(s) in LLVM?

1620845285
andrewrk
I might want to recruit Martin to help with this question

1620845297
mikdusan
ifreund: re: some libs are omitted if specified like -lcrypt; I saw ref in irclogs recently but didn't pay attention, but do you know why we eat libc library names and prevent them from going into system_libs ?

1620845342
andrewrk
mikdusan, it's because until now we wanted to be in charge of providing libc

1620845361
andrewrk
so we treated "link libc" as a single bit, yes/no

1620845378
andrewrk
I still think that might be the right approach

1620845420
mikdusan
I'm thinking we let all -lfoo go into system_libs, and then at link-time, we dupe system_libs, and pull out the ones that are ordered, add to argv, then in ordered fashion add the special ones to argv

1620845456
mikdusan
i worded that goofy. but this lets us not assume which libs need to be on command line

1620845460
andrewrk
if zig is providing libc, we need to know if -lfoo is a non-libc system dependency, or if it is one that we will be providing with libc

1620845500
mikdusan
sure but we need to

1620845524
andrewrk
why?

1620845524
mikdusan
and isn't that the spec'd by build.zig author ?

1620845528
mikdusan
well right now,

1620845544
mikdusan
`-lm -lpthread -lc -dl -lrt -lutil` is added

1620845576
TheLemonMan
andrewrk, I hear you, having everything into a single .zig file is a nice property

1620845626
mikdusan
and we don't need to link .so if not needed, right?

1620845634
TheLemonMan
in my notes I've found that you can avoid many problems by 1) marking the function noinline 2) not putting an unreachable as last instruction

1620845683
TheLemonMan
the former avoids inlining and the latter... well, that's sort-of correct as you're messing with the reachability analisys

1620845759
TheLemonMan
I think clone() would be ok with just a noinline

1620845796
TheLemonMan
__clzsi_arm32 is another example of this problem, as I wrote in clzsi2_test.zig

1620845804
andrewrk
back in a bit, food

1620847038
TheLemonMan
alright, stage1 is also buggy af and prevents you from calling a naked function even after casting it

1620847165
motiejus
andrewrk: thanks for your comment in

1620847242
TheLemonMan
motiejus, you may want to talk with kubkon about that, he re-implemented part of the archive reading for his linker work

1620847302
motiejus
ok, what's the protocol? is he on IRC? Shall I ping him on github?

1620847361
TheLemonMan
I think he's on the Discord server

1620847365
g-w1
he is on github and discord. he does not use irc that much

1620847381
motiejus
I will ping on github then

1620847394
motiejus
thanks

1620848027
g-w1
motiejus: i think what is going to happen, is that zig will just use it's own ar

1620848061
g-w1
i think kubkon already did a decoder with Zld

1620848097
motiejus
that means, if I want an `ar`-compatible `zig` subcommand, I'd need to reimplement the front-end in zig?

1620848116
g-w1
i think `zig ar` will be all zig

1620848120
motiejus
i.e. `ar d`, `ar m`, etc

1620848613
motiejus
if that's true, then it's quite a bit more involved (and does not fit/belong to src/main.zig ?)

1620848675
g-w1
well zig already can do libraries with `build-lib` so all it would have do to is parse the args in a different way

1620848769
mikdusan
zig puts everything into 1 executable

1620849994
ifreund
mikdusan: We don't need to no, but I'm not sure if there's any real cost associated with doing so. This is essentially the status quo as until now we have defaulted to using the libcs shipped with zig and linking all components thereof

1620850038
ifreund
if there is a demonstrable cost to linking 3-4 shared object that aren't used, we should reconsider this

1620850077
ifreund
I think that's probably better done down the line, I need to wash some dishes then I will fix the build for OpenBSD

1620850273
mikdusan
ifreund:

1620850274
mikdusan


1620850280
mikdusan
that is a cost

1620850459
mikdusan
we also have `zig cc` drop in replacement. Start linking libs that `cc` doesn't and it won't go down well a lot of devs, imo

1620850489
mikdusan
and sure we can diverge behavior from `zig cc` and `zig build-*`

1620850510
mikdusan
but what's involved in knocking that list down, really? it's not much

1620850527
mikdusan
invariant 1: link what we know or detect to be minimum libc requirement

1620850559
mikdusan
then for each lib known to have ordering requirements, pull it out of libs-list,

1620850595
ifreund
mikdusan: it's probably not that hard to implement, but we end up breaking all code that relies on -lc to pull in the rest of the components

1620850604
mikdusan
add that set remaining to argv, then as needed, add each ordered lib, if it was specified.

1620850635
mikdusan
i'm not following, which code?

1620850677
ifreund
mikdusan: all code that links libc and uses e.g. pthreads right now

1620850709
mikdusan
pthreads is a special case btw. can't we just say `if builtin.single_threaded == true` add pthread?

1620850710
ifreund
what you are proposing is changing linking libc from a binary switch for

1620850718
ifreund
no?

1620850779
mikdusan
that binary switch is precisely inadquate today

1620850811
ifreund
yeah I agree that we should change this, I'm just explaining that this is a pretty widely breaking thing

1620850838
ifreund
I'll just do a quick fix for OpenBSD and then look at how best to implement this

1620850864
mikdusan
netbsd is broken too

1620850906
mikdusan
status is: freebsd/dragonfly can tolerate the current list of .so always given

1620850927
mikdusan
and openbsd/netbsd cannot because they don't have... dl and rt (iirc)

1620850969
ifreund
mikdusan: ok, so the current list minus dl and rt is should be fine for openbsd/netbsd for now?

1620851006
mikdusan
just fyi, I'm not looking to make you do the work for that fix. it's easy enough to do. I'm more interested in how we solve this

1620851112
ifreund
mikdusan: hmm, one problem with making this switch non-binary, this would require changing std.builtin.link_libc from a bool to something else

1620851127
ifreund
or adding other bools for libm, libpthread, etc

1620851164
g-w1
does river work on openbsd?

1620851184
ifreund
very doubtful, it does work on freebsd though (and is packaged ;D)

1620851216
mikdusan
ifreund: hmm not grok'ing that. I assumed the quick fix would be a switch on os.tag around the currrent src.link.Elf code

1620851243
mikdusan
and what about the other funky libs xnet, resolv

1620851245
mikdusan
crypt

1620851282
ifreund
mikdusan: oh that "one problem" wasn't regarding the quick fix

1620851308
ifreund
yeah, just a switch on os.tag but in src/target.zig cause that's a little cleaner

1620851326
ifreund
I don't really know what's up with xnet/resolv/crypt

1620851338
ifreund
is libc required to provide those?

1620851481
mikdusan
well I'll answer that more generally. if zig std references symbols, on some platforms (like macos) they're all fronted by one libSystem. on others they're mostly offered by libc, then some platforms deviate which lib which sym is found in,

1620851505
mikdusan
so the answer is always going to be host-specific

1620851568
mikdusan
I view this as a problem that `./configure` or `cmake` has generally solved

1620851580
ifreund
which is why our current binary switch is very convienient for cross compiling and cross platform code

1620851612
mikdusan
cross-compiling is a little different, zig is in full control there

1620851619
mikdusan
but host-libc not so much

1620851641
ifreund
when cross compiling we always link all the libc components no?

1620851678
recalloc
I'm looking into the STL and found that some structs use const `Self = @This()`, and others use `This` instead. Is intentional, something historic, or something else?

1620851696
g-w1
stl? ;)

1620851728
recalloc
sorry, std :)

1620851732
g-w1
well anyways, i don't think its intentional.

1620851750
recalloc
oh wait, I don't see `This` used at all actually. Where did I see it, then?

1620851750
ifreund
grep doesn't find any `const This = @This()` in the std

1620851771
mikdusan
ifreund: there's many kinds of cross. glibc .so or musl static?

1620851773
g-w1
maybe just self: @This()

1620851821
recalloc
I was going to ask which is current practice, but I guess I've answered my own question

1620851864
ifreund
mikdusan: glibc is the only one one where we provide multiple so files

1620851885
mikdusan
ifreund: for glibc cross the result: m.so, c.so, dl.so, rt.so, ld.so, util.so <-- so the same set

1620851894
ifreund
recalloc: I think best practice is to not use `const Self = @This()` unless writing generic code

1620851906
ifreund
mikdusan: yep, I copied the full list I'm using from there

1620851927
ifreund
because that was the status quo for almost all zig code linking libc

1620851940
recalloc
Looks like generic code use `Self = @This()` too, at least specifically struct-returning-functions.

1620851995
oats
Why is `const = @This();` discouraged?

1620852006
g-w1
because its wrong syntax

1620852022
oats
Oh uhhh const whatever

1620852023
g-w1
and its verbose

1620852032
oats
Shaddup I'm on my phone :P

1620852043
ifreund
recalloc: yes, generic code is the only place I'd recomment the `const Self = @This()` convention

1620852062
oats
Should one just use @This() directly at point-of-use?

1620852079
oats
Such as in a top-level struct

1620852087
ifreund
no, just use the name of your struct and avoid @This() unless it is needed

1620852118
g-w1
or const FileName = @This(); for struct files

1620852145
oats
OK so struct files are a valid use for that

1620852148
mikdusan
ifreund: so looking at glibc source code, seems that { crypt, resolv } are part of it

1620852162
mikdusan
but not part of zig's bundled glibc

1620852183
ifreund
hrm, does musl provide those?

1620852200
ifreund
iirc it doesn't and for some good reason or another

1620852230
ifreund
mikdusan: anyhow, I did the short term fix

1620852265
ifreund
a quick test on net/open bsd would be appreciated if you wouldn't mind

1620852286
mikdusan
looks like crypt/ subfolder in musl official sources. no resolv/ though

1620852339
mikdusan
heh alpine has a bunch of .a that have this content:

1620852344
mikdusan
!<arch>

1620852364
mikdusan
and that's it. for crypt.a, dl.a, m.a, ptherad.a, resolv.a, rt.a, util.a xnet.a

1620852401
mikdusan
checking that PR now

1620852490
ifreund
mikdusan: musl puts everything in libc.so

1620853146
mikdusan
yup that PR looks good

1620853152
mikdusan
#8754

1620853161
mikdusan
pronouns. what could go wrong?

1620853221
mikdusan
ifreund: btw, thanks for the fix

1620853243
mikdusan
now we just need some ci for openbsd, netbsd and dragonfly

1620853275
ifreund
mikdusan: no problem, thanks for testing

1620853289
ifreund
yeah, CI for those would have prevented this in the first place

1620854959
Spex_guy
Hey, anybody know how write-after-read memory hazards affect performance?  Specifically looking at a loop like this:

1620855036
Spex_guy
I haven't been able to find any resources on it, but it seems like in theory, since the address is computed, the processor wouldn't realize these are the same memory address until late in the pipeline.  Once that happens it would have to flush and restart at the read, similar to a branch mispredict.  Unless the issue unit is smart enough to avoid

1620855036
Spex_guy
this somehow?

1620855230
mikdusan
I have no idea about any of that subject but maybe my googlefu is of help:

1620855231
mikdusan


1620855301
Spex_guy
Yeah, I couldn't find much that was relevant.  That lecture and most of the other things I found are about register write-after-read, which is usually resolved in the rename unit before issue, so in that case the processor already knows about the dependency and can delay one of the instructions.

1620858234
ifreund
ooo, #8756 looks juicy

1620858727
ifreund
hmm, now that we have std.mem.sliceTo() I feel like std.mem.span() should be std.mem.slice()

1620859384
andrewrk
ifreund, I think I was considering renaming slices to spans

1620859398
andrewrk
std.mem.span was "let's try this name on"

1620859416
andrewrk
but I agree with you

1620859730
ifreund
andrewrk: cool, I'll get that PR'd tomorrow

1620859744
ifreund
and I should probably update the std for these changes as well

1620859777
ifreund
pretty happy with how the API of sliceTo() turned out :)

1620860058
mikdusan
👍👍 for shorter stack traces. oh yes.

1620860089
mikdusan
pgup/dn keys are finally gonna get a break :)

1620860101
g-w1
which pr is that?

1620860119
g-w1
or is it committed?

1620860136
mikdusan
i think this one did it: c3d4733a00880e2c757b61b66ba18d9b6753aa11

1620860144
g-w1
thanks

1620860715
v0idify
i'm getting "segfault at address 0x10" when trying to get something from a std.event.Channel, i initialized just like in the tests

1620860994
v0idify


1620861719
mikdusan
is the indent representing an inner scope of some kind? if so, how is self escaping to outer scope?

1620861736
mikdusan
and what is up with `var self =` ?

1620862154
andrewrk
mikdusan, don't get too excited, I didn't solve the problem generally

1620862157
andrewrk
(yet)

1620862334
g-w1
I am trying to write a shell (

1620862528
andrewrk
if you're writing a shell, std.ChildProcess might be too high level of an API. you might want to reach into std.os for that

1620863278
g-w1
Thats what i thought at first, but then thought it could also be fun to improve ChildProcess. Ill take a look at std.os

1620863337
andrewrk
it's possible that we could add that feature to std.ChildProcess. the first step would be doing an inventory of what features are possible on various targets

1620863366
andrewrk
some targets in particular to consider are: Windows, WASI

1620863400
andrewrk
can still add a feature that is not supported everywhere, but requires special consideration

1620863464
g-w1
seems like windows has pipes (at least powershell has them, so it must be able to be done), not sure about wasi

1620863492
g-w1
what is the point of

1620863549
mikdusan
don't work?

1620863583
g-w1
see the issue above

1620863610
g-w1
after reading the source code, it seems they are used for collecting the output, hmmmm. maybe i have a flawed understanding of stuff

1620863616
mikdusan
you can pipe to 1 child. that's still a pipe

1620863639
g-w1
how do you define child?

1620863646
mikdusan
fork()

1620863662
g-w1
(I am talking about ChildProcess right now)

1620863700
g-w1
ah you mean you can pipe stuff to it through write on stdin?

1620863712
g-w1
or read on stdout?

1620863746
mikdusan
yes, a good example is `pub fn exec()` . it does the setup for that to read stdout/stderr from the fork'd child

1620863756
mikdusan
fork being the posix path.

1620863867
mikdusan
#7738 is re: creating 2 child procs, and setting up pipe from one to the other

1620863924
mikdusan
if you're looking for a generic spawn() api that does it all, the api design can be a little complex.

1620863932
g-w1
ok i think ill try the suggestion by vesim then with passthrough

1620863938
g-w1
does that seem correct?

1620863971
mikdusan
is this for your shell?

1620863987
g-w1
firstly to solve that issue, then for the shell

