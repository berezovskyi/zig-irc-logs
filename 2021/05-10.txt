1620610805
andrewrk
mikdusan, yeah it does, that's what I use

1620610820
andrewrk
re: does it run linux well

1620616726
koakuma
Okay this might be stupid stuff but how does one start learning LLVM internals?

1620616726
koakuma
I tried to peek at the codebase but it's quite intimidating, especially that I don't know C++ very well in the first place :(

1620618725
noam
koakuma: it's not stupid stuff, at all - LLVM is extremely complicated

1620620196
noam
Stupid question of my own: do exports in unreferenced containers get noticed?

1620620203
noam
I'm fairly sure the answer is no

1620623108
andrewrk
koakuma, probably start by learning this document:

1620623191
andrewrk
noam, `@import("foo.zig")` will cause a shallow "scan decls" of the struct corresponding to foo.zig. if one of those decls is an export it is noticed

1620623211
noam
andrewrk: but only if the import is referenced, right?

1620623218
andrewrk
right

1620623223
noam
That's what I was asking, yeah

1620623228
noam
thanks :)

1620623249
noam
Good news, finally just about done with this stupid rewrite of the analysis pipeline, so I should be working on getting behavior tests working tomorrow :D

1620623460
andrewrk
cool

1620623651
antaoiseach
Hello, folks - Zig newbie back again, experimenting with a small project - just a couple of functions in a couple of "directories". So I managed to make it work, but it feels a bit overly done. Could someone have a quick look?

1620623674
antaoiseach
I have added all the file contents in the paste, around 100 SLOC total (

1620623749
andrewrk
not sure what kind of feedback you want. for such a small project, no need to have more than 1 file

1620623753
antaoiseach
So how import works has me quite a bit confused. Initially, I had addPackage for the main.zig file, and `zig build run` worked just fine, but when I wanted to refer to another "module" (well, a directory with a file inside it) from a sibling one, I ran into all sorts of issues - "file outside package path" etc.

1620623772
andrewrk
but it seems like your goal is to learn how importing stuff works, so I don't see a problem

1620623786
antaoiseach
andrewrk: Oh, yes, I know. This is just a small experiment I was doing to test, and then use it for a bigger project I'm trying out

1620623798
antaoiseach
Just wondering if this is even idiomatic

1620623806
antaoiseach
(I mean, what I have done in the build.zig file)

1620623830
andrewrk
seems fine

1620623834
antaoiseach
andrewrk: yes, I'm slowly getting the picture, but I'm still not fully confident I understand it all.

1620623839
antaoiseach
andrewrk: Oh, okay. Cool!

1620623872
andrewrk
it feels like overkill for such a small amount of code but you can imagine how on a larger project, such fine grained control over tests and binaries would come in handy

1620623912
antaoiseach
andrewrk: That makes sense.

1620623931
cr1901_modern
Okay I'm stumped... what does Zig want me to do here to convert a usize to u3?

1620623936
cr1901_modern


1620623938
antaoiseach
andrewrk: Thank you so much for the help! :-). Cheers!

1620624033
andrewrk
cr1901_modern, there's an issue open that when fixed will make this code compile fine. in the meantime, you'll need `@intCast`.

1620624212
cr1901_modern
Ack, thanks.

1620624360
cr1901_modern
While it's on my mind, that function elementAt can do out-of-bounds access. Is there a way using comptime to create a polymorphic elementAt where one version runs if the values are comptime-known and another version if the vals are runtime-known?

1620624416
noam
Ahahahaha, I did a dumb :P Time for my stupid 100K line test went from ~40ms to ~2.7s because the scoping rework / liveness analysis ended up checking an index against every item in a list of average size

1620624418
noam
:P

1620624472
noam


1620625747
andrewrk
cr1901_modern, if the type of `data` is a slice you're already getting bounds checking that turns off in release builds

1620625834
cr1901_modern
Sure, that's fine. I was just wondering anyway

1620629337
cr1901_modern
Getting there... not exactly elegant, but does appear to work:

1620629380
cr1901_modern
Arbitrary width ints up to 65535 is cool

1620631148
TheLemonMan
mikdusan, a 17" screen is really hard to fit in a decently-sized backpack heh

1620631209
noam
TheLemonMan: So if the laptop is 17" but the screen is smaller, it's fine? :)

1620631220
TheLemonMan
hah absolutely

1620631245
noam
Makes sense! :)

1620631298
TheLemonMan
I don't really like Dells tho, my GF's inspiron makes a horrible hi-frequency buzzing sound every now and then

1620631330
TheLemonMan
and the fan sounds like a jet engine

1620631912
noam
Yeah, I know exactly what you mean

1620632382
TheLemonMan
mikdusan, the i386 problem is quite weird, somehow ld.so is not looking past libc.so... but

1620632599
noam
/buffer 5

1620632600
noam
...

1620632642
mikdusan
that is weird. I am reluctant to install multilib on a somewhat clean archlinux to try to better reproduce. but it occurs to me now - clone the vm. dirty it up and nuke it afterwards :)

1620632850
noam
Stupid question: `const foo = bar();` in a declarative context is illegal, isn't it

1620632894
noam
(where bar is a runtime function)

1620632936
noam
Ah wait, no :)

1620632958
noam
> The initialization values of global variables are evaluated at compile-time. | bar then becomes

1620632961
noam
That makes more sense :)

1620633375
TheLemonMan
I do have a multilib around because of wine (I guess?)

1620634426
noam
andrewrk: Behavior tests are just normal tests, right? :)

1620635025
mikdusan
TheLemonMan: I have a clone of archlinux setup. has various llvm pre-builts in /opt and no multilibs installed yet. you want access?

1620637545
TheLemonMan
mikdusan, I'm currently looking into the SPARC problem, will come back to that later

1620637673
mikdusan
ok. what I can offer is for limited periods of time (ie: 12 hours) access. just need an account name you'd like, and authorized_keys ssh pubkey

1620639712
noam
Woot woot :)

1620640909
dutchie
plz2send utf-8 headers

1620640935
mq32
fix that server

1620640942
dutchie
but cool to see zyg progressing

1620641159
ifreund
noam: by the way, are you aware of this other project called C3?

1620641188
noam
Yes :P

1620641195
noam
Someone else linked it to me a while back

1620641204
noam
dutchie: ... They aren't already?

1620641217
noam
I plan on switching it to gemini at some point, so it'll be moot soonish anyways

1620641316
noam
and yeah, zyg is

1620641318
dutchie
noam: i see `lexer.c: In function â€˜lexer_appendâ€™:` and other such mojibake

1620641327
noam
I know.

1620641331
noam
The first one is staying literally forever

1620641337
dutchie
Content-Type

1620641343
noam
The aliasing one I just haven't gotten around to fixing :P

1620641344
dutchie
: text/plain

1620641352
noam
... yeah, it is text/plain ?

1620641357
noam
I mean, that's 100% correct

1620641359
mq32
Content-Encoding is missing

1620641363
noam
... ah

1620641366
mq32
or the encoding on the mime type

1620641373
dutchie
shouldn't it be text/plain; charset=utf-8

1620641375
dutchie
yeah

1620641378
noam
gotcha, fixing now

1620641394
noam
ah, hm. I think that might be ASCII escape codes, actually? :P

1620641406
mq32
default is ISO-8859-1

1620641421
mq32
so your utf-8 is parsed as latin-1

1620641423
noam
nope, yeah, it's an encoding issue

1620641430
noam
it's using stupid uniquotes instead of just ""

1620641438
noam


1620641454
noam
... okay, that's not fair. UTF-8 should absolutely be the default everywhere :P

1620641458
mq32
doesn't hurt anybode with a reasonable and correct system setup ;)

1620641468
mq32
it's too late for that now

1620641480
dutchie
isn't there some actual historical reason browsers assume latin-1 or am i imagining it

1620641533
mq32
yep

1620641536
mq32
Netscape probably :D

1620641546
noam
Yes but the fact that *that*'s the behavior they respect is moronic

1620641563
mq32
i mean, you break stuff when you don't

1620641612
noam
They break stuff all the time anyways!

1620641856
noam
fixed

1620641862
noam
dutchie: thanks

1620641877
dutchie
np, lgtm now

1620641937
noam
The dealloc one is because, well, nothing actually frees registers yet XD. The lexer one is because compilers are idiots. The last one is because

1620641985
noam
less tl;dr on the lexer: for performance reasons, an identifier is only appended when it's needed. Just zero-initializing the unused value has a significant performance cost, and the value doesn't actually matter, so I don't.

1620642029
noam
(it occurs once for

1620644512
TheLemonMan
koakuma, found the problem and fixing it

1620644743
noam
Always fun optimizing new code...

1620644765
noam
Regained 5% on the new pipeline by fixing redundancies and improving APIs, so far :)

1620650048
m314
I recently upgraded my distro to one based on a new glibc (2.33). This caused my old zig version to fail to link system libraries and I'm trying to figure out why.

1620650052
m314
Minimal example here:

1620650320
m314
I thought zig was pretty dumb about linking plain old system libraries (cross compiling for a glibc-based system is another matter of course). Am I missing something here?

1620650934
TheLemonMan
the pastebin doesn't load here

1620650942
m314
oh

1620650958
ifreund
m314: see

1620650964
ifreund
and the workaround in the linked river issue

1620650976
ifreund
I should really get on fixing this, 0.8.0 is just around the corner

1620651235
m314
ifreund: Ah! That makes sense. I was afraid I was completely misunderstanding something.

1620656727
antaoiseach
Hello folks, how do I debug "erro: the follwing test command crashed" ... exited with error code 1? I'm invoking `zig build test`.

1620656922
ifreund
antaoiseach: copy the command and run it in gdb

1620656975
antaoiseach
ifreund: okay, will try it. Thanks!

1620657765
koakuma
TheLemonMan, thanks!

1620662537
noam
Tests are discovered in the same way as exports, right? (lazily, u

1620662541
noam
in declarative scopes)

1620662552
noam
Gah, really need to dust off this keyboard...

1620662600
Nypsie
Yes, so you'll need to reference the imports of all files that contain tests

1620662615
noam
Heh, I'm working on implementing support for tests in my compiler ;)

1620662628
noam
There's a lot of language corners I never cared about before that suddenly matter a lot more :P

1620676398
ifreund
andrewrk: if you have a minute, I'd appreciate your thoughts on

1620676914
andrewrk
ifreund, looking now

1620676960
ifreund
I got an idea to test it too: that logic hasn't changed since zig 0.7.1 so the patch applies cleanly

1620676973
ifreund
thanks :)

1620677669
andrewrk
ifreund, hmm do we perhaps need the concept of the native libc?

1620677702
andrewrk
we already have independent concepts for native cpu, and native os

1620677716
andrewrk
and you could easily do something like native-native-musl or native-native-gnu

1620677800
ifreund
hmm, that might indeed be a better way to expose this

1620677835
ifreund
I like it, it's a lot more explict and less magic than having native os imply native libc

1620677908
andrewrk
I think my approach in this case would be: * enumerate some of the use cases that would be affected by this new concept * go over each one and see what modifications need to be made to -target / builtin.zig / other stuff, to make the use case match up to the new model of how things work

1620677940
andrewrk
this would hopefully identify all the code that needs updated to implement this

1620678068
ifreund
/// `null` means the native C ABI, if `os_tag` is native, otherwise it means the default C ABI.

1620678096
ifreund
andrewrk: our current doc comment is actually in line with my current patch

1620678124
andrewrk
good point

1620678163
andrewrk
mm but what happens if you do `-target native-native-musl` for example?

1620678208
andrewrk
I think this patch would do unexpected behavior

1620678313
ifreund
true

1620678330
andrewrk
that is not an edge case either - it's a pretty useful target

1620678344
ifreund
indeed, can't statically link glibc :D

1620678414
ifreund
what does "default C ABI" actually mean in that comment?

1620678538
ifreund
I guess default C ABI for the target OS

1620678570
andrewrk
yeah

1620678608
andrewrk


1620678630
ifreund
So I think if I just check if `target.abi == null` as well my patch would work as expected for all use-cases I can think of

1620679477
andrewrk
that sounds fine to me

1620679512
andrewrk
what about the use case where there are no system libraries linked, everything is built statically by zig

1620679528
andrewrk
and we have the option to not depend on system-installed libc development kit

1620679553
andrewrk
you would just not leave the C ABI from the triple right? just pick the libc you want and zig provides it?

1620679673
mikdusan
one invariant I'd like to see is if a target triple means "cross-mode" it should mean that regardless of host running zig

1620679716
andrewrk
I believe that invariant holds up today. Can you think of any exceptions?

1620679730
ifreund
andrewrk: yeah, if you explicitly specify the ABI in the triplet zig will never use the "native" libc unless you also pass --libc

1620679738
ifreund
update the patch

1620679743
ifreund
*updated

1620679843
andrewrk
seems like an improvement to me!

1620679881
andrewrk
your other suggestion makes sense too; it should be an error if requesting a version of glibc we cannot provide

1620679888
ifreund
nice, as usual when working with zig's libc linking code it turned out to be way easier than I feared :D

1620679894
andrewrk
just goes to show you, warnings are always smells!!! no warnings! only errors!

1620679902
ifreund
andrewrk: would you like that in the same PR?

1620679913
andrewrk
up to you, I'm happy with either way

1620679956
ifreund
also, how would you go about testing this before merge?

1620679996
andrewrk
the linux CI will actually go quite a long way to testing this

1620680035
andrewrk
can you verify that it solves the problem for river?

1620680052
andrewrk
other than that, I'm fine with a green CI + my own eyeball review

1620680061
ifreund
I can probably send some arch river a zig 0.7.1 with this patch and ask them to try it

1620680083
ifreund
I know using --libc with the native libc file generated by zig works with zig 0.7.1 on arch

1620680097
ifreund
(arch has glibc 2.33 while zig 0.7.1 ships 2.32 max)

1620680108
andrewrk
mm we might want to take a peek at the corresponding link/Elf.zig code for putting libc stuff on the linker line

1620680149
ifreund
I don't think that code is aware of the target, so it shouldn't be affected

1620680189
ifreund
it just sees a different LibcInstallation

1620680206
andrewrk
ah yes your patch will set libc_installation just like the other code path. perfect! this code is actually fairly well organized

1620680209
andrewrk
good job, myself

1620680247
ifreund
yeah, you did a very nice job when you rewrote the front end in zig, it's a pleasure to work with

1620680305
ifreund
I'll turn that warning into an error then go to bed and check CI in the morning

1620680315
andrewrk
sounds good!

