1611967909
data-man
Hello everyone! Just updated Zig syntax for dte editor. Happy coding! :)

1611968956
ugla
Oh, I have one of those too, but for editors that use GtkSourceView

1611971391
data-man
Announcement: Unicode matchers for Mecha (a parser combinator library). Stay tuned! :-)

1612013596
pixelherodev
Hmm, var decls can exist without the `= Expr`?

1612013622
pixelherodev
I thought that `= undefined;` was necessary, at a minimum?

1612014018
ikskuh
pixelherodev: "extern var foo: u32;"

1612014056
pixelherodev
Ahh, right, makes sense :)

1612016708
ed_t
why are option pointer null de references not catchable?

1612017213
dutchie
because you can use `orelse` or `if (optional) |value|` instead

1612017634
ed_t
so how would that work with while (i.?.field) {...

1612017663
ed_t
so how would that work with while (i.?.*.field) {...

1612018527
semarie
ed_t: it should be: while (i) |value| { value.field }

1612018627
ed_t
what I want to do is catch a null de reference without a panic

1612018971
ed_t
it would would if I could use orelse on expressions like: const c = i.?.* orelse

1612019020
ed_t
but zig complains that the type is not an optional pointer, instead of realizing that the express contains one

1612019569
ed_t
eg this fails to: if (i.?.*) |c| {}

1612019611
ed_t
with the same type error as the orelse

1612019615
dutchie
ed_t: you'd do `if (i) |p|` and then dereference p inside the block if you need to

1612019712
ed_t
what i have been doing, since it leads to more readable code is: while (i != null and (i.?.*.p.x != p.x or i.?.*.p.y != p.y))

1612019734
ed_t
I was tring to zigify it

1612019800
ed_t
and remove the repeated i.?.* in while body too

1612019933
dutchie
you can do something like `while (i) |j| while (j.p.x != p.x or j.p.y != p.y) { ... };`

1612019945
dutchie
(note the trailing ; is necessary there for the one-statement while)

1612020004
ed_t
and when i is null the outer loop exits?  (I was thinking think about too)

1612020441
seadragon-droid
Does anyone know of a write-up that explains some of the differences of the Zig comptime vs. run-time semantics?

1612020473
seadragon-droid
I'm thinking specifically about SpexGuy's comment here:

1612020564
dutchie
ed_t: yeah

1612020834
ed_t
dutchie once again thanks

1612021040
ed_t
wierd that I cannot do: while (i) but must include the |c| which ends up creating a const I just use once...

1612021080
ed_t
unless i use while (i == null)

1612021105
ed_t
that should be not equals

1612042137
ed_t
zig's expressions have some wierd limits,

1612042206
ed_t
for instance var x:32  and later x/2 fails and you have to do @divTrunc making the code harder to read

1612042224
ed_t
and divide throws way some info...

1612042252
ed_t
thats x:i32

1612042299
ed_t
or with var x:u32 and later i<<(x+x) fails

1612042374
ikskuh
ed_t: what's the correct way for integer division?

1612042389
ikskuh
it's clear for unsigned ints, but it's not clear for signed division

1612042498
ed_t
in 40+ years of coding I have never seen a problem dividing signed ints

1612042504
ikskuh
happy you :D

1612042508
ed_t
using many many langs

1612042531
ikskuh
what mode did they use? trunc, floor or ceiling? ;)

1612042584
ed_t
you just need to understand what you are doing (2complement, 1complement) drop the bits.  If i want rounding up or down I will take care of it...

1612042689
ed_t
try coding on a cad program in forth using 64 bit int doing intergrated circuit design...

1612043481
zags
Docs says @as "is the preferred way to convert between types, whenever possible.

1612043505
zags
so should I use that instead of @intCast for casting between integer types too?

1612043553
dutchie
if you can use @as you should, but it won't work for potentially-lossy integer casts

1612043577
dutchie
i.e. shrinking widths or going from signed -> unsigned

1612043594
dutchie
then you have to LBYL and use @intCast

1612043613
zags
this is only about converting integer and float literals to specific types

1612043639
dutchie
then @as should always work (or fail at compile time)

1612043680
zags
cool, i'm writing a bunch of U32, U64, etc wrappers as I have a ton of literals of various sizes and I'm not doing the verbose cast on all of them :d

1612043713
zags
pub fn U64(comptime val: comptime_int) u64 { return @as(u64, val); }

1612043727
zags
^ pretty much a bunch of those so I can write U64(5) :D

1612043765
zags
which makes fmt complain because it's not camelCase, and proper case clashes with the type :D

1612043819
zags
s/fmt/zls

1612043895
zags
interesting that 3.0 converts to comptime_int, but not 3.x, seems inconsistent even if it's safe

1612045357
Gliptic
is there any suggestion to add explicitly typed integer literals, because I find @as clunky

1612046080
zags
i'll push up a lib with those wrappers if peeps wanna use them until (if) std gets them

1612046082
andrewrk
Gliptic, I recognize that @as feels clunky but it's not supposed to

1612046098
zags
sometimes there's lots of literals :D

1612046167
andrewrk
it's pretty rare to need a typed integer literal

1612046200
andrewrk
for initializing a struct or array, or a function call, the int literal will be automatically coerced

1612046215
andrewrk
and var decls can be annotated with types

1612046216
Gliptic
fair enough, I do appreciate that there's a "cast" that doesn't destroy information, most languages don't even have it

1612046260
Gliptic
I find that a major shortcoming in Rust, which is very strict about e.g. array indexes being usize, but "as" casts is the only way to convert

1612046295
zags
my use case that I've bit fiddling code that shifts and masks, so I'm using the wrappers to make that readable

1612046307
zags
other than that, i don't mind @as

1612046319
Gliptic
yeah, same here

1612046334
Gliptic
although I just use @as

1612046534
andrewrk
zags, you may be interested in std.math.shl / std.math.shr as well as this proposal:

1612046611
zags
andrewrk: good point, I'm just converting C++ code so step 1 is making it work. That looks interesting, thanks!

1612046839
zags
a potentially stupid idea: a lot of structs will have open/close, allocate/free, etc pairs. Would it make sense to allow tagging those as opening and closing resources? It would be optional and have no effect other than enabling potentially powerful static analysis. If you called open but don't call close, something fishy is going on.

1612046869
zags
could take scopes and escape analysis into account I suppose

1612047054
zags
something like `pub fn open(path: []const u8) !WindowsDynLib ~close {`

1612047147
andrewrk
zags,

1612047199
zags
lol, wonderful :D

1612047222
Gliptic
that's very nice

1612047255
zags
very very nice

1612047402
andrewrk
it's unlikely to be accepted

1612047408
andrewrk
don't get your hopes up

1612047448
andrewrk
ifreund, check it out, the capacityInBytes function for MultiArrayList, written cleanly using SIMD:

1612047506
andrewrk
arguably it's cleaner than the non SIMD version. here are both side by side for comparison:

1612047605
zags
andrewrk: do you think static analysis will ever be powerful enough to catch our forgot-defer mistakes, or is that an open problem/not solvable/nonhalting/etc ?

1612047627
andrewrk
not solvable because it may be intentional

1612047656
Gliptic
arena allocators etc.

1612047679
zags
yeah, it would need some sort of demarkation I guess

