1632444061
cot!~kiedtl@kisslinux/kiedtl
What's a "dependency loop" and how does one fix it?

1632444100
cot!~kiedtl@kisslinux/kiedtl
Basically, I have `foo = struct { bar = enum { Baz: MyList } }`, and `MyList = MyListType(foo)`

1632444115
cot!~kiedtl@kisslinux/kiedtl
and the "dependency loop detected" is being throwin at the `MyList = ...` bit

1632445584
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
what are you tyring to do

1632448244
freshcoffee!~fresh@user/freshcoffee
andrewrk: ok to merge #9824 ? - upgrading qemu has been a long time in the wait (partially due to a regression I caused in qemu-static)

1632448282
andrewrk!~andrewrk@mail.ziglang.org
oh you found the solution, nice

1632448284
andrewrk!~andrewrk@mail.ziglang.org
yep! thank you

1632448304
andrewrk!~andrewrk@mail.ziglang.org
appreciate your work on qemu-static

1632449159
cot!~kiedtl@kisslinux/kiedtl
haze: It's an AST. Struct X has a union Y, one variant of which is a List(X).

1632449326
cot!~kiedtl@kisslinux/kiedtl
Hm, interesting. The List() function was calling hasField and typeInfo on the type, which seems to hav ebeen the issue; removing it fixes this.

1632449333
cot!~kiedtl@kisslinux/kiedtl
I'll never understand this comptime stuff...

1632449398
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
cot i could've sworn i had gotten that working so its good that you figured it out

1632449404
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
that pattern*

1632449434
cot!~kiedtl@kisslinux/kiedtl
Ah

1632449458
cot!~kiedtl@kisslinux/kiedtl
It never occurred to me that it might be something within List() that was causing the issue, which is why I didn't give any info on what I was doing in there

1632449651
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
no worries

1632474608
bgiannan!giann@2a01:4f8:141:1272::2
how can i convert a []u8 to a [*:0]u8 ?

1632474795
ikskuh!~xq@2a0d:5940:6:163::ad7e
slice[start..end :0].ptr

1632474799
ifreund!~ifreund@user/ifreund
bgiannan: std.mem.allocator.DupeZ

1632474818
ifreund!~ifreund@user/ifreund
ikskuh: that won't work unless there happens to be a 0 at the end already for some reason

1632474825
ifreund!~ifreund@user/ifreund
(which is in no way guarenteed)

1632474826
ikskuh!~xq@2a0d:5940:6:163::ad7e
true

1632474830
ikskuh!~xq@2a0d:5940:6:163::ad7e
so

1632474832
ikskuh!~xq@2a0d:5940:6:163::ad7e
we both assumed things

1632474836
ikskuh!~xq@2a0d:5940:6:163::ad7e
bgiannan: more context!

1632474846
ikskuh!~xq@2a0d:5940:6:163::ad7e
do you have a []u8 with zero termination already? (then use my solution)

1632474857
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you don't: can you add one in-place?

1632474861
ikskuh!~xq@2a0d:5940:6:163::ad7e
if not: use dupeZ

1632474877
ifreund!~ifreund@user/ifreund
ikskuh: a "[]u8 with zero termination" is a [:0]u8

1632474889
ifreund!~ifreund@user/ifreund
please just use the type system for 0 termination

1632474904
ikskuh!~xq@2a0d:5940:6:163::ad7e
ifreund: we cannot build [:0]u8 without having some backing storage first

1632474911
ikskuh!~xq@2a0d:5940:6:163::ad7e
otherwise it will assert and explode

1632475010
ifreund!~ifreund@user/ifreund
ikskuh: I'm saying that you should *never* assume that a []u8 is 0 terminated unless you are implementing dupeZ()

1632475034
ifreund!~ifreund@user/ifreund
in which case you don't have to assume because you put the 0 there

1632475078
ifreund!~ifreund@user/ifreund
basically I'm saying that "we both assumed things" is wrong, because I only used the information the type system provided :P

1632475088
bgiannan!giann@2a01:4f8:141:1272::2
ikskuh, i have to handle both of those cases: c string -> slice and slice -> c string

1632475133
ifreund!~ifreund@user/ifreund
c string to slice should be std.mem.span(c_string) and should give you a [:0]u8 slice

1632475143
bgiannan!giann@2a01:4f8:141:1272::2
c string -> \0 at the end, slice not really possible (yet, since i don't implement escape sequences in my language yet)

1632475145
ifreund!~ifreund@user/ifreund
and a [:0]u8 coerces to a c string

1632475175
bgiannan!giann@2a01:4f8:141:1272::2
right but i'd like a []u8

1632475187
ikskuh!~xq@2a0d:5940:6:163::ad7e
[:0]u8 coerces to []u8 as well

1632475275
bgiannan!giann@2a01:4f8:141:1272::2
perfect

1632475317
ikskuh!~xq@2a0d:5940:6:163::ad7e
ifreund: i think we both have an understanding of the topic, but at least i'm bad at explaining /o\

1632475339
bgiannan!giann@2a01:4f8:141:1272::2
and []u8 -> [*:0]u8 i just do slice[start..end :0].ptr

1632475356
ifreund!~ifreund@user/ifreund
that isn't safe though

1632475369
bgiannan!giann@2a01:4f8:141:1272::2
why?

1632475376
ifreund!~ifreund@user/ifreund
if you intend to do that conversion you should just use a [:0]u8 so that the type system checks things for yonu

1632475396
ifreund!~ifreund@user/ifreund
because not every []u8 happens to have a 0 in memory just past the end of the slice

1632475427
bgiannan!giann@2a01:4f8:141:1272::2
ah

1632475462
ifreund!~ifreund@user/ifreund
ikskuh: yeah, sorry I definitely didn't mean to say you don't understand the semantics of zig here (you totally do) :P

1632475512
bgiannan!giann@2a01:4f8:141:1272::2
so how can avoid using [:0]u8 everywhere, should i implement a helper that checks the end of slice and appends a \0 to it if there is non?

1632475574
bgiannan!giann@2a01:4f8:141:1272::2
and if i want to get rid of the \0 when doing the inverse coercion i should maybe do @ptrCast([]u8, null_terminated[..null_terminated.len - 1]) ?

1632475598
ifreund!~ifreund@user/ifreund
IMO the only valid solutions are to use [:0]u8 everywhere or to allocate when you want to convert from []u8 to [:0]u8/[*:0]u8)

1632475637
ifreund!~ifreund@user/ifreund
you can't check if there's a 0 one past the end of a slice, because if there isn't then that's potentially an out of bounds read and you could segfault

1632475662
bgiannan!giann@2a01:4f8:141:1272::2
i meant checking within the slice

1632475670
bgiannan!giann@2a01:4f8:141:1272::2
slice[slice.len - 1] == 0

1632475697
ifreund!~ifreund@user/ifreund
ah well if you intend to keep the 0 inside the slice that's a whole different story

1632475700
bgiannan!giann@2a01:4f8:141:1272::2
the C ABI is so much fun...

1632475728
bgiannan!giann@2a01:4f8:141:1272::2
if you want to conform to it you just have to sacrifice all zig idioms basically

1632475747
ifreund!~ifreund@user/ifreund
the .len field of a [:0]u8 slice doesn't include the terminating 0

1632475758
bgiannan!giann@2a01:4f8:141:1272::2
ah good to know

1632475765
ifreund!~ifreund@user/ifreund
and coercing a [:0]u8 slice to a []u8 slice leaves out the 0

1632476707
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, can i return an optional and be C ABI compliant? 

1632476714
bgiannan!giann@2a01:4f8:141:1272::2
since i can't return error set

1632476724
bgiannan!giann@2a01:4f8:141:1272::2
what should i do if i could not allocate something

1632476730
bgiannan!giann@2a01:4f8:141:1272::2
i'd like to return null then

1632476774
ifreund!~ifreund@user/ifreund
bgiannan: optional pointers are fine, optional anything else isnt

1632476788
bgiannan!giann@2a01:4f8:141:1272::2
perfect

1632478824
bgiannan!giann@2a01:4f8:141:1272::2
./src/buzz_api.zig:7:21: error: expected pointer, found '[]u8'

1632478826
bgiannan!giann@2a01:4f8:141:1272::2
    return @ptrCast([]u8, c_string);

1632478828
bgiannan!giann@2a01:4f8:141:1272::2
huh

1632479396
ifreund!~ifreund@user/ifreund
bgiannan: std.mem.span()

1632479422
ifreund!~ifreund@user/ifreund
you need to iterate the [*:0]u8 to find the length

1632479425
bgiannan!giann@2a01:4f8:141:1272::2
ah yes

1632479717
bgiannan!giann@2a01:4f8:141:1272::2
can i tell zig build-lib where to emit the .dylib?

1632479937
ifreund!~ifreund@user/ifreund
-femit-bin=foobar

1632480023
bfiedler!~bfiedler@2a0d:d740:107::3
Is the output of -Drelease-safe suitable for profiling with `perf` and similar tools?

1632480072
ifreund!~ifreund@user/ifreund
should be, are you having issues with it?

1632480089
bfiedler!~bfiedler@2a0d:d740:107::3
Only the standard library functions are named, all other things are opaque addresses

1632480334
ifreund!~ifreund@user/ifreund
bfiedler: you aren't stripping debug info somehow are you?

1632480359
bfiedler!~bfiedler@2a0d:d740:107::3
I'm not actively stripping info, and `file` reports "with debug info, not stripped"

1632480407
bfiedler!~bfiedler@2a0d:d740:107::3
Here's a paste of a run: https://paste.sr.ht/~bfiedler/e38d44900bf1060add8edf9d1fe96a4569207647

1632480451
bfiedler!~bfiedler@2a0d:d740:107::3
You can search for "Position." to see that sometimes debug info seems to be there

1632480511
ifreund!~ifreund@user/ifreund
werid, have you tried a debug or release fast build to compare?

1632480602
bfiedler!~bfiedler@2a0d:d740:107::3
Debug builds are fine - I haven't tried release fast yet, I'll do that real quick

1632480678
bfiedler!~bfiedler@2a0d:d740:107::3
Release-fast is equally garbled

1632480737
ifreund!~ifreund@user/ifreund
bfiedler: what OS and zig version are you on?

1632481103
bfiedler!~bfiedler@2a0d:d740:107::3
ifreund: Arch with zig 0.8.1

1632482563
bfiedler!~bfiedler@2a0d:d740:107::3
I just built zig master and the same issue persists

1632482733
bfiedler!~bfiedler@2a0d:d740:107::3
I'm not sure how much this is an actual issue though, because compiler optimizations can restruture code drastically and make it impossible to generate sensible reports

1632482748
bfiedler!~bfiedler@2a0d:d740:107::3
(that said, I have a rust equivalent which generates nice stats in release mode)

1632483311
ifreund!~ifreund@user/ifreund
bfiedler: I think this is probably a zig bug, but I'm not sure how to debug it right now

1632483646
bfiedler!~bfiedler@2a0d:d740:107::3
ifreund: good to know, I'll open a Github issue in that case so it's documented

1632483674
ifreund!~ifreund@user/ifreund
cool, thanks

1632483943
freshcoffee!~fresh@user/freshcoffee
does adding `-g dwarf` to perf command help?

1632484867
bfiedler!~bfiedler@2a0d:d740:107::3
freshcoffee: just tried it, it does not

1632484915
bgiannan!giann@2a01:4f8:141:1272::2
how could i have a null terminated array of null terminated strings? [*:0][*:0]const u8 doesn't work

1632485308
ifreund!~ifreund@user/ifreund
bgiannan: [*:null]?[*:0]const u8

1632485335
bgiannan!giann@2a01:4f8:141:1272::2
ah right

1632485338
bgiannan!giann@2a01:4f8:141:1272::2
makes sense

1632485365
ifreund!~ifreund@user/ifreund
you might want to throw another const in there though: [*:null]const ?[*:0]const u8

1632485393
ifreund!~ifreund@user/ifreund
and in C that's just `char **` of course but could mean anything

1632485401
flux_control!~flux@sourcemage/wizard/flux
What about [:0]const u8 [:0]const u8?

1632485416
bgiannan!giann@2a01:4f8:141:1272::2
speaking about that i stil don't get what the difference between []u8 and []const u8 is and why i can pass a []u8 when a []const u8 is expected but not the other way 

1632485461
ifreund!~ifreund@user/ifreund
flux_control: a [:0]const u8 is not the same size as a [*:0]u8 since a slice stores a length as well, so that wouldn't be compatible with C APIs

1632485488
flux_control!~flux@sourcemage/wizard/flux
bgiannan: []const u8 is uint8_t cosnt * in C (or char const *, same difference)

1632485519
bgiannan!giann@2a01:4f8:141:1272::2
does it mean the the pointer is constant?

1632485523
flux_control!~flux@sourcemage/wizard/flux
But [] is just uint8_t */char *

1632485523
ifreund!~ifreund@user/ifreund
bgiannan: if you have x which is a []const u8, doing x[0] = 1; would be a compile error. You're not allowed to mutate the memory through that pointer

1632485537
bgiannan!giann@2a01:4f8:141:1272::2
oh ok

1632485554
flux_control!~flux@sourcemage/wizard/flux
Sorry, I typed wrong, I meant char * const

1632485566
flux_control!~flux@sourcemage/wizard/flux
And [] is char *

1632485574
bgiannan!giann@2a01:4f8:141:1272::2
not sure how to iterate over a `[*:null]const ?[*:0]const u8` 

1632485633
flux_control!~flux@sourcemage/wizard/flux
ifreund: Would [*:0]const u8 [:0]const u8 give the right size for the C ABI?

1632485644
flux_control!~flux@sourcemage/wizard/flux
I haven't gotten that far yet in my Zig learning :)

1632485706
ifreund!~ifreund@user/ifreund
that type wouldn't compile, becaulse the sentinel of the outer pointer type (0) is not of type [:0]const u8

1632485719
flux_control!~flux@sourcemage/wizard/flux
ah

1632485743
ifreund!~ifreund@user/ifreund
you could use a [:null]const ?[*:0]const u8

1632485760
ifreund!~ifreund@user/ifreund
or a []const [*:0]const u8

1632485791
ifreund!~ifreund@user/ifreund
though for the last one you'd need to allocate to add a terminating NULL inorder to pass it to zig

1632485800
ifreund!~ifreund@user/ifreund
*pass it to C

1632485804
flux_control!~flux@sourcemage/wizard/flux
Ah, the latter is what I was trying to think of. But the latter doesn't guarantee the array itself is null-terminated, just that the individual strings in it are.

1632485811
flux_control!~flux@sourcemage/wizard/flux
Yeah

1632485824
ifreund!~ifreund@user/ifreund
it's still useful though when wrapping a C API for use in zig

1632485827
ifreund!~ifreund@user/ifreund
see std.os.argv

1632486910
flux_control!~flux@sourcemage/wizard/flux
ifreund: If one wanted full C ABI compat while also maximizing the use of Zig, would it be better to allocate chunks of raw bytes and then cast them to Zig types?

1632486938
flux_control!~flux@sourcemage/wizard/flux
Or coerce, where applicable

1632486971
ifreund!~ifreund@user/ifreund
flux_control: I don't exactly follow, but I think there should always be an equivalent zig type

1632486999
ifreund!~ifreund@user/ifreund
though stuff like va_list and C's complex number types are not implemented yet

1632487048
ifreund!~ifreund@user/ifreund
mostly all you need are extern structs, primitive integers/floats, and pointers 

1632487054
ifreund!~ifreund@user/ifreund
oh and unions too

1632487090
ifreund!~ifreund@user/ifreund
flux_control: you might be interested to check out my idiomatic zig bindings for a large C library: https://github.com/swaywm/zig-wlroots

1632487170
flux_control!~flux@sourcemage/wizard/flux
ifreund: I mean instead of const foo []const u8 = {...}; or whatever and then passing foo to the C side, would it be better to directly allocate via a std.mem.foo a block of bytes as u8 and then coerce/cast to the appropriate (multi-dimensional) array type

1632487254
flux_control!~flux@sourcemage/wizard/flux
Then in Zig you can always use the idiomatic Zig types, but you'd still have the "raw" variable to pass back to the C side. The idiomatic Zig would be safe, and you'd know the bounds because you did the direct allocation in Zig, but you'd also have the raw region for C access.

1632487267
flux_control!~flux@sourcemage/wizard/flux
Nvm, I'll just read over the zig-wlroots first :)

1632487274
ifreund!~ifreund@user/ifreund
flux_control: I would allocated the appropriate zig type that models the semantics of what the type means in C, e.g. the [*:null]?[*:0]u8 thing above

1632487328
ifreund!~ifreund@user/ifreund
and then possibly cast/coerce that to a nicer zig type for usage within zig

1632487500
flux_control!~flux@sourcemage/wizard/flux
One pattern I got used to in Lua was having a Lua table with a light userdata of a C pointer as a member of that table, and I was thinking of doing that in Zig as a union of the raw data and of the nicer idiomatic Zig type.

1632487628
flux_control!~flux@sourcemage/wizard/flux
But I guess that's really the same as the [:null]?... pattern, right?

1632487889
ifreund!~ifreund@user/ifreund
I don't know, I find it's hard to talk about this stuff in the abstract sense

1632487911
ifreund!~ifreund@user/ifreund
I just do whatever seems niceset and most type-safe on the zig side

1632487935
flux_control!~flux@sourcemage/wizard/flux
True

1632488045
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, when i try to use [*:null]const ?[*:0]const u8, for { "hello", "world" } i get *p = "hello"

1632488114
ifreund!~ifreund@user/ifreund
bgiannan: I don't follow, maybe pasting the code somewhere would help?

1632488127
flux_control!~flux@sourcemage/wizard/flux
bgiannan: You have an array of null-terminated in strings. If you have only a single pointer in C and you interpret the data pointed to as a string, then it makes sense for it to stop at the end of the first string.

1632488235
flux_control!~flux@sourcemage/wizard/flux
If you wanted it to continue you'd need to concat the two strings together, either by overwriting the null between the two strings (with, say, ' '), manually advancing the pointer to the start of the second string after handling the first, or by having an additional pointer to point at the second string.

1632488281
flux_control!~flux@sourcemage/wizard/flux
It depends on what you're doing with that data, but I'm presuming you're outputting it via something like fprintf(stdout, "%s\n", p), yes?

1632488325
bgiannan!giann@2a01:4f8:141:1272::2
i see

1632488329
bgiannan!giann@2a01:4f8:141:1272::2
no i'm trying to iterate over it

1632488340
bgiannan!giann@2a01:4f8:141:1272::2
one sec i'll paste some code

1632488342
flux_control!~flux@sourcemage/wizard/flux
bgiannan: If you want multiple strings in Zig that appear as only a single string in C, you'd need the "inner" array in Zig to not be null-terminated.

1632488404
flux_control!~flux@sourcemage/wizard/flux
Or modify the array (either on the Zig side or the C side) as I indicated above (i.e. overwrite the null between the strings with a space or something).

1632488449
bgiannan!giann@2a01:4f8:141:1272::2
https://zigbin.io/b35e4d

1632488664
ifreund!~ifreund@user/ifreund
bgiannan: also, if you have control over the API as you do here, there's no strict need to use 0 terminated strings

1632488666
flux_control!~flux@sourcemage/wizard/flux
zigbin doesn't like my non-JS CLI/TUI browsers :(

1632488726
ifreund!~ifreund@user/ifreund
you could pass a pointer and length separately and then convert to a slice on both sides

1632488747
bgiannan!giann@2a01:4f8:141:1272::2
right so openLib and openLibCount

1632488758
bgiannan!giann@2a01:4f8:141:1272::2
not super elegant though

1632488791
bgiannan!giann@2a01:4f8:141:1272::2
i find zig's pointer notation confusing and complex

1632488811
flux_control!~flux@sourcemage/wizard/flux
bgiannan: When you're dealing with raw, low-level memory access things elegance is rare.

1632488841
ifreund!~ifreund@user/ifreund
bgiannan: I find it necessary to model the complexity of the many different ways one can use pointers

1632488886
ifreund!~ifreund@user/ifreund
in C you only have a single pointer type and it sucks

1632488887
bgiannan!giann@2a01:4f8:141:1272::2
i guess

1632488908
ifreund!~ifreund@user/ifreund
without good documentation or reading the source code, you have no idea what a char ** means

1632488924
flux_control!~flux@sourcemage/wizard/flux
ifreund: That's not *technically* true.

1632488932
ifreund!~ifreund@user/ifreund
flux_control: which part?

1632488942
bgiannan!giann@2a01:4f8:141:1272::2
right but `[*:null]const ?[*:0]const u8` is just plain unreadable

1632488951
flux_control!~flux@sourcemage/wizard/flux
You can typedef a pointer to a non-pointer opaque type.

1632489072
ifreund!~ifreund@user/ifreund
bgiannan: i agree that it's super noisy, but the only time I've ever needed to use that type is when interfacing with C code

1632489081
ifreund!~ifreund@user/ifreund
it's just not an idiomatic way to write zig

1632489088
flux_control!~flux@sourcemage/wizard/flux
bgiannan: It may be verbose but I find it quite readable.

1632489099
bgiannan!giann@2a01:4f8:141:1272::2
can i export a constant?

1632489103
ifreund!~ifreund@user/ifreund
sure

1632489111
bgiannan!giann@2a01:4f8:141:1272::2
export const something: usize = 2 ?

1632489213
bgiannan!giann@2a01:4f8:141:1272::2
DynLib.lookup expects a pointer type though

1632489290
jcmoyer!~jcmoyer@user/jcmoyer
bgiannan: https://godbolt.org/z/esh19Y8M7

1632489457
jcmoyer!~jcmoyer@user/jcmoyer
also make sure toCString isn't producing temporaries, lib is a temporary array in your original paste and you're returning pointers into it

1632489472
jcmoyer!~jcmoyer@user/jcmoyer
good chance it just segfaults

1632489540
bgiannan!giann@2a01:4f8:141:1272::2
jcmoyer, exported[i] == one char with your code too

1632489564
jcmoyer!~jcmoyer@user/jcmoyer
what should it be?

1632489601
bgiannan!giann@2a01:4f8:141:1272::2
well exported[0] should be "hello" and exported[1] should be "test"

1632489614
bgiannan!giann@2a01:4f8:141:1272::2
not sure what's different in my code since it seems to work in your paste

1632489679
jcmoyer!~jcmoyer@user/jcmoyer
hmmm, weird

1632489834
jcmoyer!~jcmoyer@user/jcmoyer
does it work without toCString at least?

1632490309
bgiannan!giann@2a01:4f8:141:1272::2
i think that's what i tried

1632490315
bgiannan!giann@2a01:4f8:141:1272::2
i'll try again

1632493110
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, weird thing: i'm calling my imported function from the VM with a pointer to the VM struct, the pointer is not the same once into the function

1632493130
ifreund!~ifreund@user/ifreund
bgiannan: code?

1632493147
bgiannan!giann@2a01:4f8:141:1272::2
i'll try to reduce it to something that make sense

1632493229
bgiannan!giann@2a01:4f8:141:1272::2
https://zigbin.io/06229a not sure that'll help

1632493241
bgiannan!giann@2a01:4f8:141:1272::2
ah let me add some to it

1632493284
bgiannan!giann@2a01:4f8:141:1272::2
https://zigbin.io/b276b7

1632493422
ifreund!~ifreund@user/ifreund
bgiannan: could I see the code in the VM calling the function? In particular where is the VM stored in memory? stack? global? allocated?

1632493476
bgiannan!giann@2a01:4f8:141:1272::2
https://zigbin.io/0491c0

1632493501
bgiannan!giann@2a01:4f8:141:1272::2
i can add you to the github repo if you'd like

1632493514
bgiannan!giann@2a01:4f8:141:1272::2
its not public yet because its far from being finished

1632493557
ifreund!~ifreund@user/ifreund
yeah I'm not really going to be able to help much without seeing more code

1632493568
bgiannan!giann@2a01:4f8:141:1272::2
oh you're in the CCDA team?

1632493570
bgiannan!giann@2a01:4f8:141:1272::2
awesome

1632493572
bgiannan!giann@2a01:4f8:141:1272::2
adding you

1632493579
ifreund!~ifreund@user/ifreund
I personally just make everthing public right from the beginning

1632493599
ifreund!~ifreund@user/ifreund
Yeah, CDDA was how I learned how to program

1632493603
bgiannan!giann@2a01:4f8:141:1272::2
i don't, out of pure shame

1632493617
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
so it's been a while since I've done anything in zig and it looks like unused variables and parameters are no compile errors. How is this supposed to work when you need to have a certain function signature for an interface but just want to ignore some parameters?

1632493641
ifreund!~ifreund@user/ifreund
tgschultz: just gotta do `_ = foo;` for all the unused parameters currently

1632493643
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, you should have an invite now

1632493656
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
alright, thanks

1632493666
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, check out the dylib branch

1632496566
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
andrewrk: #5259 can be closed, it was implemented with 5588

1632496655
ifreund!~ifreund@user/ifreund
tgschultz: done :)

1632500891
Nulo!~Nulo@user/nulo
How can I make StreamServer free the address after killing the program?

1632501061
Nulo!~Nulo@user/nulo
I assume I should call .close before terminating but I have no clue how to listen for when the program is being terminated

1632501121
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Listen for sigint/sigkill/sighub I guess?

1632501158
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Err, sigkill can't be intercepted. You get the idea though :p

1632501196
Nulo!~Nulo@user/nulo
> I have no clue how to listen for when the program is being terminated

1632501202
Nulo!~Nulo@user/nulo
I don't know how to listen for signals in Zig

1632501232
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
https://ziglang.org/documentation/0.8.1/std/#std;os.sigaction seems like it might help.

1632501245
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Sorry, I thought you weren't sure at all, rather than knowing you need signals but not knowing how to handle them c:

1632501291
Nulo!~Nulo@user/nulo
That's what I meant! :P

1632501293
Nulo!~Nulo@user/nulo
Thanks

1632501318
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
No worries.

1632501388
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
I'm pretty sure you want term, int, and hup.

1632511149
Nulo!~Nulo@user/nulo
Don't you ever just https://0x0.st/-Ybu.png

1632511470
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
all the time

1632511589
bfiedler!~bfiedler@2a0d:d740:107::3
can I dynamically generate test "testname" { } statements?

1632511972
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
I don't think so, what are you trying to do?

1632511991
bfiedler!~bfiedler@2a0d:d740:107::3
Generate tests similar to go's schema

1632512009
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
do you have an example I could see? I'm not familiar with go's tests

1632512129
bfiedler!~bfiedler@2a0d:d740:107::3
something like this https://paste.sr.ht/~bfiedler/9cafab3d477baae83bee238aea47a8b76885395d

1632512265
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
I don't think you can generate tests like that, but you could probably use zig build to generate zig tests and hook them up as tests

1632512280
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
I think just using an inline for and having descriptive failure messages would work just as well though

1632512282
bfiedler!~bfiedler@2a0d:d740:107::3
yeah that's the alternative

1632516141
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Alright, this pure Zig implementation of the missing compiler-rt function that I needed works. I think I'll stub out the rest of the ABI.

1632517237
bgiannan!giann@2a01:4f8:141:1272::2
how do express the equivalent of `zig build-lib -dynamic src/buzz_api.zig` in a build.zig? `b.addStaticLibrary` ?

1632517447
bgiannan!giann@2a01:4f8:141:1272::2
addSharaedLibrary rather

1632517453
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yes

1632517675
bgiannan!giann@2a01:4f8:141:1272::2
yes addSharedLibrary? should i do lib.linkage = dynamic?

1632517736
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yes addSharedLibrary

1632517739
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
it will do that for you

1632517950
bgiannan!giann@2a01:4f8:141:1272::2
works thx

1632518086
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ok, is anyone who was involved in porting compiler-rt from llvm here? I have very basic questions.

1632518682
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi! When running a command like ´build-exe´ is there a way to determine the path/name for the output executable?

1632518702
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
-femit-bin=path

1632518758
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Thanks :) The description in the documentation was a bit cryptic

1632518901
flux_control!~flux@sourcemage/wizard/flux
(How) does zig translate-c work? I tried running it on some small C code and it errors that it can't find stdio.h.

1632518930
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
use -lc to link libc

1632519038
flux_control!~flux@sourcemage/wizard/flux
g-w1: So translate-c isn't for translating C source to Zig source? What is it used for?

1632519067
flux_control!~flux@sourcemage/wizard/flux
If it's used for building C then I don't understand how it differs from zig cc.

1632519100
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
In my experience, it's mostly used for converting headers by @cImport.

1632519145
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
flux_control: it is used to translate c source

1632519154
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
just stdio.h needs the compilation to "link libc"

1632519169
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
(just accessing the headers, sorry if my wording was unclear)

1632519215
flux_control!~flux@sourcemage/wizard/flux
I see

1632519246
flux_control!~flux@sourcemage/wizard/flux
Thanks!

1632519327
bgiannan!giann@2a01:4f8:141:1272::2
is there some way to generate some kind of "header" file that defines an extern for each export of what i'm building?

1632519350
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
that is emit-h but its only available in stage2 right now

1632519514
bgiannan!giann@2a01:4f8:141:1272::2
doesn't it emit a c header ? i'd like a zig file with `extern` declarations

1632519527
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That's what translate-c does.

1632519528
bgiannan!giann@2a01:4f8:141:1272::2
stage2 is not activated by default on master is it?

1632519556
bgiannan!giann@2a01:4f8:141:1272::2
leeward, so i should emit a c header and then zig translate-c it ?

1632519578
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
bgiannan: either that, or just use @cImport to do all that for you.

1632519622
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
This is a little out of date, but I don't think it uses anything that's really changed: https://nmichaels.org/zig/wrap-sodium.html

1632519631
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
If you're just trying to call C code from Zig

1632519633
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ahh i see bgiannan 

1632519648
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
there is nothing for that, because zig is meant to be used in source with packages

1632519660
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
not as static libraries

1632519671
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
or dynamic

1632519682
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
from zig code that is

1632519709
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
(you can't export slices or regular structs anyways as the abi is not defined)

1632519732
flux_control!~flux@sourcemage/wizard/flux
leeward: His source is in Zig, but he wants to generate a C ABI compatible dynamic library and (I think) autogenerate the required include header.

1632519734
bgiannan!giann@2a01:4f8:141:1272::2
right but i don't have any other way to load zig code at runtime

1632519741
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ohhh

1632519754
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That's this one: https://nmichaels.org/zig/c-library.html

1632519754
flux_control!~flux@sourcemage/wizard/flux
I could be wrong though ;)

1632519769
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
(sorta)

1632519785
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
No, actually, that's exactly that.

1632519812
bgiannan!giann@2a01:4f8:141:1272::2
leeward, so i already managed to build a library i can load at runtime 

1632519833
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Oh, cool

1632519847
bgiannan!giann@2a01:4f8:141:1272::2
i just don't want to have to maintain a list of `extern` declarations that have to match my api

1632519862
bgiannan!giann@2a01:4f8:141:1272::2
if i could generate it somehow it would be perfect

1632519877
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Yeah, I don't think the generated header stuff was working when that was written.

1632519914
bgiannan!giann@2a01:4f8:141:1272::2
i mean i could just regex some stuff and write it somewhere replacing the export keyword with extern

1632519926
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
bgiannan: I see

1632519985
bgiannan!giann@2a01:4f8:141:1272::2
see example here: https://github.com/giann/buzz/blob/main/tests/utils/testing.zig#L4-L27 that's what i want to generate

1632520025
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
bgiannan: You want to generate this Zig code from some existing C code?

1632520032
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Or from other Zig code?

1632520079
bgiannan!giann@2a01:4f8:141:1272::2
from zig code

1632520098
bgiannan!giann@2a01:4f8:141:1272::2
the functions are coming from here: https://github.com/giann/buzz/blob/main/src/buzz_api.zig

1632520182
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I feel like this what importnamespace is going to do.

1632520193
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
???

1632520244
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
bgiannan: yeah, it seems like for that, some simple sed could work, not sure for more advanced stuff though

1632520248
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
might be worth a proposal

1632520284
ifreund!~ifreund@user/ifreund
I think that's a toolchain thing not a language thing

1632520303
ifreund!~ifreund@user/ifreund
it wouldn't be that hard to write a small zig program to do this using std.zig

1632520314
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
well, the compiler could easily find all the exports and generate externs for them, basically emit-h but zig

1632520329
ifreund!~ifreund@user/ifreund
yeah that's what I'm saying

1632520343
ifreund!~ifreund@user/ifreund
I'm not sure if that should be part of the official compiler/toolchain or not though

1632520347
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
why?

1632520369
ifreund!~ifreund@user/ifreund
it probably should be, yeah

1632520423
bgiannan!giann@2a01:4f8:141:1272::2
i think if we do emit-h we should do emit-zig-h 

1632520458
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
maybe -femit-zig-externs=file.zig just like -femit-h=header.h

1632520475
ifreund!~ifreund@user/ifreund
zig externs makes more sense to me

1632520507
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
but also, I see you are trying to export a function that has a zig struct in it, not extern, and that may not work

1632520519
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
you may have to make the struct extern so that the c abi can understand it

1632520530
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I'm confused. Who's consuming these externs?

1632520533
ifreund!~ifreund@user/ifreund
g-w1: that's fine, they only have a pointer on the ABI and treat it as an opaque type from the other side

1632520541
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
oh nice

1632520546
ifreund!~ifreund@user/ifreund
leeward: this is a dynamically loadable module for a language VM

1632520548
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
leeward: zig code consuming a zig dylib

1632520570
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ohh, dynamic linking. I get it.

1632520570
bgiannan!giann@2a01:4f8:141:1272::2
exactly

1632520573
ifreund!~ifreund@user/ifreund
both the VM and the shared object that gets dynamically loaded happen to be written in zig

1632520584
ifreund!~ifreund@user/ifreund
but either could be written in C or anything else in theory 

1632520853
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That makes way more sense now.

