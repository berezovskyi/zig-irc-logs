1636416619
ifreund!~ifreund@user/ifreund
welcome!

1636417129
freshcoffee!~fresh@user/freshcoffee
-a7d215759.tar.xz just posted on download page. linux tarball comparison matches num files exactly, and executable/tarball sizes align nicely against preceding master. This knocks off about 2+ hours for a total ci (all ci hosts) run

1636417150
freshcoffee!~fresh@user/freshcoffee
num/files and pathnames exactly

1636417156
andrewrk!~andrewrk@mail.ziglang.org
nice work freshcoffee!!

1636417161
andrewrk!~andrewrk@mail.ziglang.org
welcome Franciman :)

1636437112
freshcoffee!~fresh@user/freshcoffee
why do I program better listening to Tron: Legacy soundtrack? /shrugs

1636439916
daurnimator!~daurnimat@vultr.daurnimator.com
freshcoffee: now listen to pendulum hold your colour. particularly "still grey" (bonus track that never made it to spotify)

1636448374
motiejus!~motiejus@2001:470:69fc:105::38fb
[darwin question] how does mach-o linker know which symbols are available on the darwin (osx) libc?

1636448407
motiejus!~motiejus@2001:470:69fc:105::38fb
zig bundles the libc header files, but I can't see the symbol list; or it doesn't need 'em?

1636449593
freshcoffee!~fresh@user/freshcoffee
lib/libc/darwin/libSystem.B.tbd

1636452216
motiejus!~motiejus@2001:470:69fc:105::38fb
freshcoffee: yeah, excellent!

1636453484
Franciman!~Franciman@mx1.fracta.dev
hi, thanks

1636469448
companion_cube!~simon@user/companion-cube
freshcoffee: cause it's Daft Punk? aka awesome for programming?

1636469965
ifreund!~ifreund@user/ifreund
I find The Field even better :D

1636470104
companion_cube!~simon@user/companion-cube
(I warmly recommend the "alive 2007" album)

1636479454
marler8997!~marler899@204.229.3.4
freshcoffee I'm curious to hear about your experience setting up the CI.  Also why we chose to use the Drone hosting software?

1636479900
freshcoffee!~fresh@user/freshcoffee
marler8997: drone because motivated to have agents that run on many platforms. Azure for example, agents are macos/linux and windows, all x86_64 except they also have arm64 for linux,

1636479955
freshcoffee!~fresh@user/freshcoffee
gitlab runners are implemented in go, like drone runners, so that is a huge plus but gitlab is pretty heavy to setup. so I started with easier drone

1636480009
freshcoffee!~fresh@user/freshcoffee
partially because we already have some experience with it (for aarch64 drone)

1636480056
earnestly!~earnest@user/earnestly
(I just wish I could browse the code without needing both cookies and javascript enabled for gitlab instances)

1636480090
earnestly!~earnest@user/earnestly
(But to be fair, these web frontends are so dismal that I should be just cloning them locally instead even if without the history)

1636480169
freshcoffee!~fresh@user/freshcoffee
tbf I hit a wall with drone for vm. they're pretty good for docker runners, but that implies linux. So I forked a simple exec-runner (just shells out, no docker/container/etc) and am implementing the qemu vm pipeline session.

1636480181
freshcoffee!~fresh@user/freshcoffee
having fun doing it actually

1636480259
freshcoffee!~fresh@user/freshcoffee
and that will pretty much give us the ability to install a vm-runner on any host that golang can target, and that has decent hypervisor to run a vm. currently getting good results with qemu-system.

1636480490
freshcoffee!~fresh@user/freshcoffee
I'm making the vm-runner concurrency model slightly different to docker-runner; for any given pipeline, docker-runner _runs_ a container for each step in the pipeline. all steps share the same pipeline ephemeral workspace

1636480597
freshcoffee!~fresh@user/freshcoffee
but vm launching is more expensive and there are complications making 2 vm share same filesystem, so I went with each pipeline launches 1 vm. and the steps are run on the same vm instance . parallel steps are allowed, dictated by the pipeline step DAG

1636480734
freshcoffee!~fresh@user/freshcoffee
for security the vm image is burned with a authorized public key, secret known only to ci server. vm sshd configured to only allow pubkey auth for root account (no passwords allowed)

1636480979
freshcoffee!~fresh@user/freshcoffee
in a perfect world, I'd like to see all the runners tie in to a central scheduler for dynamic scheduling decisions based on free RAM, cpu load, and possibly temporary (time-limited) reservations for users (like andrew) having a need to run some big local jobs. but that's probably over-engineering.

1636481347
freshcoffee!~fresh@user/freshcoffee
one advantage of _not_ hosting runners inside each VM is we don't have to know the vm image before hand. By having a runner launch the vm, it can specify an approved image name, just like docker images.

1636481400
freshcoffee!~fresh@user/freshcoffee
the vm launch time is heavily influenced by the guest os, and how it is installed. So for example, I shaved 10 seconds off freebsd launch time by disabling their boot-menu 10 second delay.

1636481533
Franciman!~Franciman@mx1.fracta.dev
zig stole my codebase :O

1636481535
Franciman!~Franciman@mx1.fracta.dev
ahah

1636481539
freshcoffee!~fresh@user/freshcoffee
re: approved image name <-- so that can go into a drone.yml and

1636481559
freshcoffee!~fresh@user/freshcoffee
try out new images or rollback is just a commit

1636483261
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Marler8997 looks like they fixed the _TREEITEM stuff in the win32metadata.

1636483281
marler8997!~marler899@204.229.3.4
flaminator, yeah I'm actually working on updating now

1636483289
marler8997!~marler899@204.229.3.4
not sure if it will have that fix yet, but I'm a bit behind anyway

1636483338
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
I have my local changes so all is fine.

1636484470
andrewrk!~andrewrk@mail.ziglang.org
webassembly question: https://github.com/ziglang/zig/issues/8633

1636484478
andrewrk!~andrewrk@mail.ziglang.org
is --import-memory as simple as adding a linker flag? or is there more to this use case?

1636484878
Franciman!~Franciman@mx1.fracta.dev
sorry if I'll start with a series of dumb questions :P

1636484895
Franciman!~Franciman@mx1.fracta.dev
but I am reading the tutorial about zig, there is no mention about introducing type aliases

1636484901
Franciman!~Franciman@mx1.fracta.dev
for example I'd like to say

1636484909
Franciman!~Franciman@mx1.fracta.dev
type string = [:0]*u8

1636484922
Franciman!~Franciman@mx1.fracta.dev
is this something that is idiomatic in zig, or am I not understanding anything?

1636485199
ifreund!~ifreund@user/ifreund
andrewrk: I'm not entirely clear what the --import-memory flag does, I'd expect it to take an argument as wasm modules can implement multiple memories...

1636485210
ifreund!~ifreund@user/ifreund
this is definitely a feature that belongs in the linker though

1636485225
andrewrk!~andrewrk@mail.ziglang.org
I suppose we could start with the flag and then re-evaluate the use case later

1636485239
ifreund!~ifreund@user/ifreund
Franciman: types are first class values in zig, so it'd just be `const string = [:0]u8;`

1636485244
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, nice work on making the CI tarballs cached on that giant NVMe filesystem rather than being downloaded with every run :D

1636485260
Franciman!~Franciman@mx1.fracta.dev
thanks ifreund awesum

1636485276
ifreund!~ifreund@user/ifreund
[:0]*u8 is probably not what you want by the way, but that may have just been a typo in your IRC message

1636485353
freshcoffee!~fresh@user/freshcoffee
andrewrk: the math is working out nicely. also consider: we have _growable_ ephemeral VM storage. let's say we support 10 concurrent pipelines and they _can_ grow +20 GiB (not likely!) that's still only 200 GiB.

1636485354
Franciman!~Franciman@mx1.fracta.dev
no it was not, what would I want?

1636485360
Franciman!~Franciman@mx1.fracta.dev
const u8?

1636485367
Franciman!~Franciman@mx1.fracta.dev
or a pointer to u8?

1636485378
ifreund!~ifreund@user/ifreund
[:0]u8 is a 0 terminated slice of u8

1636485379
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, excellent

1636485393
Franciman!~Franciman@mx1.fracta.dev
that's a string, right?

1636485396
ifreund!~ifreund@user/ifreund
a slice is a pointer + a length

1636485402
andrewrk!~andrewrk@mail.ziglang.org
also, all aboard the merge train! choo choo!

1636485407
Franciman!~Franciman@mx1.fracta.dev
ok

1636485407
ifreund!~ifreund@user/ifreund
what a "string" is really depends on who you ask :P

1636485410
andrewrk!~andrewrk@mail.ziglang.org
time to find out if the new ci system manages load properly :)

1636485431
Franciman!~Franciman@mx1.fracta.dev
ahah

1636485433
Franciman!~Franciman@mx1.fracta.dev
dayumn

1636485439
ifreund!~ifreund@user/ifreund
in zig string literals have the type *const [N:0]u8 where N is the length of the string

1636485440
Franciman!~Franciman@mx1.fracta.dev
I just want to represent variable names

1636485453
andrewrk!~andrewrk@mail.ziglang.org
the pesky thing about strings is that you have to put them somewhere

1636485460
ifreund!~ifreund@user/ifreund
unless you need to interface with C code, you probably don't need 0 termination

1636485470
Franciman!~Franciman@mx1.fracta.dev
so I'd better go with a slice

1636485475
Franciman!~Franciman@mx1.fracta.dev
non zero terminated

1636485476
ifreund!~ifreund@user/ifreund
[]const u8 (constant slice of u8) is a fine default

1636485481
Franciman!~Franciman@mx1.fracta.dev
thanks!

1636485495
ifreund!~ifreund@user/ifreund
no problem!

1636485815
ifreund!~ifreund@user/ifreund
andrewrk: ah, I forgot that wasm only allows one "memory" currently, so it makes sense that the flag is binary

1636485837
ifreund!~ifreund@user/ifreund
either you use your own memory and don't import a memory our you import a memory and don't use your own memory

1636485861
ifreund!~ifreund@user/ifreund
so with the current wasm spec, an --import-memory linker flag would be the right interface I believe

1636485869
andrewrk!~andrewrk@mail.ziglang.org
makes sense, thanks for explaining it

1636485876
andrewrk!~andrewrk@mail.ziglang.org
looks like an easy fix to this issue then

1636485902
ifreund!~ifreund@user/ifreund
no problem! I didn't spent a month digging into the wasm spec a year ago for nothing :D

1636485935
andrewrk!~andrewrk@mail.ziglang.org
haha

1636485988
andrewrk!~andrewrk@mail.ziglang.org
I think today is going to be a "spend all day merging PRs" day

1636487191
marler8997!~marler899@204.229.3.4
FYI, here's a little module I just wrote to patch zig build steps: https://github.com/marlersoft/zigwin32gen/blob/main/patchstep.zig

1636487218
marler8997!~marler899@204.229.3.4
I'm using it to patch RunStep so I don't print a huge stack trace if it fails

1636488699
marler8997!~marler899@204.229.3.4
Flaminator, 15.0.1-preview zigwin32 is out

1636488710
marler8997!~marler899@204.229.3.4
I think it has the HTREEITEM fix

