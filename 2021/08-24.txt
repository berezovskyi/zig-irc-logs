1629765405
cot!~kiedtl@kisslinux/kiedtl
Is a text folder iterator out of scope for Zig's std?

1629765464
cot!~kiedtl@kisslinux/kiedtl
Basically, you'd have an iterator that you initialize on a []const u8, and calling next() would return the next <width>-sized section, taking care to not split words or unicode codepoints

1629765580
marler8997!~marler899@204.229.3.4
cot are you looking for std.unicode?

1629765645
andrewrk!~andrewrk@mail.ziglang.org
ifreund, here is one category of `usingnamespace` that can be eliminated by proper use of namespaces: https://github.com/ziglang/zig/pull/9613/files#diff-025172b23f19623e45171a07a82797f34093ab3d67f64b80d226d78fb1469a45R11

1629765653
jjido!~Denis@2a02:c7f:5c91:e700:a4b1:e74b:d226:1434
sounds like Unicode console text wrapping

1629765667
cot!~kiedtl@kisslinux/kiedtl
marler8997: no? text folding/wrapping is what I'm referring to

1629765677
cot!~kiedtl@kisslinux/kiedtl
something analogous to /bin/fold

1629765690
andrewrk!~andrewrk@mail.ziglang.org
observation: usingnamespace is used (incorrectly) as a solution to when the namespace is part of the identifier name, rather than as an actual namespace

1629765692
cot!~kiedtl@kisslinux/kiedtl
I ask because I'm writing one now, and I'm wondering if it's something that could be included in the std

1629765829
marler8997!~marler899@204.229.3.4
interesting I've never heard of fold or this use case, you learn something new every day

1629765876
cot!~kiedtl@kisslinux/kiedtl
:^)

1629765910
cot!~kiedtl@kisslinux/kiedtl
Usually the terminal'd wrap printed text but I'm using termbox and don't have auto-wrapping, so therefore this

1629765928
marler8997!~marler899@204.229.3.4
my guess is this is probably too specific to be included in std unless the compiler/toolchain has a use for it

1629765996
cot!~kiedtl@kisslinux/kiedtl
Gotcha

1629773816
marler8997!~marler899@204.229.3.4
What happened to LemonBoy/Man?

1629778201
marler8997!~marler899@204.229.3.4
andrewrk, I've created a script to recreate the current windows compiler devkit. The only difference I see is that you didn't include the lld executables, does that sound correct that you purposely excluded them?

1629784189
andrewrk!~andrewrk@mail.ziglang.org
marler8997, no idea what happened to him. zig was always a hobby, so my guess is that he just got busy with life stuff

1629784213
andrewrk!~andrewrk@mail.ziglang.org
yes I intentionally and manually excluded them

1629784233
andrewrk!~andrewrk@mail.ziglang.org
nice work

1629784362
marler8997!~marler899@204.229.3.4
hmmm, well I hope he comes back around.  Should I modify the package script to exclude them as well?

1629785140
marler8997!~marler899@204.229.3.4
shoot github says LemonBoy has has 0 contributions since the start of July!!! wth

1629786712
andrewrk!~andrewrk@mail.ziglang.org
marler8997, yes I think so

1629807253
dch!sid1310@couchdb/committer/dch
just bumping my zig from 0.8.0 to 0.9.0-tip and getting a zig0 bootstrap error

1629807275
dch!sid1310@couchdb/committer/dch
I have poked at this in the past, and not understood whats wrong, but I think I've got a bit further

1629807316
dch!sid1310@couchdb/committer/dch
libxml2 is needed, which comes via freebsd ports, and it uses lzma, which comes by freebsd base system in /usr/lib

1629807420
dch!sid1310@couchdb/committer/dch
but sprinkling -L/usr/lib hasn't helped

1629810566
flyx[m]!~flyxflyxo@mail.flyx.org
can `for` loop in reverse order?

1629811144
ifreund!~ifreund@user/ifreund
flyx[m]: nope

1629811226
ifreund!~ifreund@user/ifreund
dch: the zig-bootstrap tries to disable the libxml2 dependency while building llvm, not sure why that would stop working

1629811241
ifreund!~ifreund@user/ifreund
that is, we set DLLVM_ENABLE_LIBXML2=OFF

1629811262
flyx[m]!~flyxflyxo@mail.flyx.org
hmm, that's a shame

1629811343
ifreund!~ifreund@user/ifreund
as for why it can't find your system libxml install in /usr/lib, zig-bootstrap creates and uses it's own rootfs for the second, cross-compiled build

1629811380
ifreund!~ifreund@user/ifreund
if we needed libxml to be linked into the final binary, we'd need to build it from source like we now do for zlib

1629818826
bgiannan!~bgiannan@194.206.91.37
can tagged union be nested?

1629818856
bgiannan!~bgiannan@194.206.91.37
union(MyTypeEnum) { case: AnotherTaggedUnion } 

1629823255
ifreund!~ifreund@user/ifreund
bgiannan: yes

1629829295
andrewrk!~andrewrk@mail.ziglang.org
dch, what error are you getting?

1629829627
ikskuh!~xq@2a0d:5940:6:163::ad7e
ifreund: you there? i'd need some help with void

1629830543
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig links libSDL2.so, but somehow the symbols won't get loaded

1629831481
LostKobrakai!~LostKobra@2001:16b8:2dea:1800:60ae:54e0:6cff:3559
I'm currently trying to get https://github.com/andrewrk/sdl-zig-demo to run on an M1 mac, but somehow zig doesn't want to find the sdl header file. I've got sdl2 installed via homebrew

1629831538
dch!sid1310@couchdb/committer/dch
andrewrk: zig 0.8.0 will build with the FreeBSD devel/llvm12 package directly (no need for a bootstrap compiler). But after that, it looks like that strategy doesn't work.

1629831604
dch!sid1310@couchdb/committer/dch
we already have multiple custom LLVM builds already for other major compilers, and its a gross waste of resources/energy/sanity to add another custom llvm build to bootstrap zig, that will run on every build (2-3x a week on many build servers). I am hoping I can find a way to avoid it.

1629831888
andrewrk!~andrewrk@mail.ziglang.org
happy to help if I can see an error message

1629831954
dch!sid1310@couchdb/committer/dch
:-) I am waiting for the next clean run...

1629832141
andrewrk!~andrewrk@mail.ziglang.org
wow this looks really good: https://paulespinosa.github.io/zig-langref/

1629832157
ikskuh!~xq@2a0d:5940:6:163::ad7e
sexy!

1629832169
ikskuh!~xq@2a0d:5940:6:163::ad7e
very modern

1629832386
dch!sid1310@couchdb/committer/dch
awesome! a classy font away and this could be on the cover of Vogue

1629832406
dch!sid1310@couchdb/committer/dch
andrewrk: https://pkg.skunkwerks.at/poudriere/data/13_0_x64-default/2021-08-24_18h40m14s/logs/errors/zig-g20210824.log 

1629832461
dch!sid1310@couchdb/committer/dch
its very keen on picking up xml2 I wonder where thats sneaking in

1629832569
andrewrk!~andrewrk@mail.ziglang.org
the only errors I see are missing -llzma

1629832578
andrewrk!~andrewrk@mail.ziglang.org
which I guess is a dependency dragged in by libxml

1629832622
andrewrk!~andrewrk@mail.ziglang.org
that seems like an issue with `llvm-config --system-libs` not including -llzma in the output

1629832640
andrewrk!~andrewrk@mail.ziglang.org
if so, this can be filed as either an llvm bug, or a freebsd pkg bug

1629832661
dch!sid1310@couchdb/committer/dch
andrewrk: thanks, I'll poke at this tonight and see where I get!

1629832673
andrewrk!~andrewrk@mail.ziglang.org
I think if you run `llvm-config --system-libs` you will see a missing -llzma and that is the problem

1629832682
dch!sid1310@couchdb/committer/dch
llvm-config12 --system-libs

1629832687
dch!sid1310@couchdb/committer/dch
doesn't actually show *anything*

1629832705
andrewrk!~andrewrk@mail.ziglang.org
hmm well I'm not sure how these got on the linker line then:  -lrt  -lexecinfo  -lpthread  -lm  -lxml2  -Wl,-Bstatic  -lz    -pthread

1629832706
dch!sid1310@couchdb/committer/dch
I will ask the FreeBSD Illuminati 

1629832739
dch!sid1310@couchdb/committer/dch
mmm the ports framework injects many helpful things...

1629832759
andrewrk!~andrewrk@mail.ziglang.org
whatever is injecting -lxml2, needs to be injecting -llzma as well

1629832761
dch!sid1310@couchdb/committer/dch
but I doublechecked and we dont use USES=gnome or a few similar things that sprinkle in unwanted xmls

1629832788
andrewrk!~andrewrk@mail.ziglang.org
and to be clear zig has no libxml2 dependency, so that's coming from elsewhere

1629832797
dch!sid1310@couchdb/committer/dch
so what I need here is *no xml2* and then see if the lzma is still required

1629832798
dch!sid1310@couchdb/committer/dch
right

1629832819
dch!sid1310@couchdb/committer/dch
its easy enough to add *_LDFLAGS and so forth

1629832832
dch!sid1310@couchdb/committer/dch
maybe cmake is doing this

1629833103
dch!sid1310@couchdb/committer/dch
mmm it seems to get added into build.ninja for some reason

1629833381
amine!~aminechik@user/aminechikhaoui
Is there a way in Zig to define a couple of array entries during the declaration, like in C `unsigned int entries[1024] = { [0] = 1, [512] = 1 }` for example ?

1629833430
dutchie!~dutchie@user/dutchie
i think you'd have to use a block for that

1629833480
ikskuh!~xq@2a0d:5940:6:163::ad7e
what dutchie says

1629833525
dutchie!~dutchie@user/dutchie
something like https://0x0.st/-tAh.zig

1629833531
ikskuh!~xq@2a0d:5940:6:163::ad7e
fantasy syntax: `[8]u8 { 0...1 => 3, 5, 7 => 2, else => 0 }

1629833549
dutchie!~dutchie@user/dutchie
(though i guess probably `var entries`)

1629833575
amine!~aminechik@user/aminechikhaoui
thanks dutchie, will try that

1629833585
ikskuh!~xq@2a0d:5940:6:163::ad7e
amine: note that all other values are undefined

1629833589
ikskuh!~xq@2a0d:5940:6:163::ad7e
you might want to prefer 0

1629833608
dutchie!~dutchie@user/dutchie
yeah very easy to shoot yourself in the foot with thata

1629833641
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.mem.zeroes([512]u8)

1629833644
ikskuh!~xq@2a0d:5940:6:163::ad7e
is a nice way :

1629833696
dutchie!~dutchie@user/dutchie
or just `[0]usize{0} ** 512`

1629833706
dutchie!~dutchie@user/dutchie
errr, `[1]usize`

1629833709
ikskuh!~xq@2a0d:5940:6:163::ad7e
haha

1629833782
dutchie!~dutchie@user/dutchie
should always just use `[_]` ;)

1629840159
ldearquer!~user@cm-83-97-235-19.telecable.es
I am trying to compile this:

1629840174
ldearquer!~user@cm-83-97-235-19.telecable.es
~(0b1111 << 20)

1629840181
ldearquer!~user@cm-83-97-235-19.telecable.es
which throws the error

1629840190
ldearquer!~user@cm-83-97-235-19.telecable.es
error: unable to perform binary not operation on type 'comptime_int'

1629840207
ldearquer!~user@cm-83-97-235-19.telecable.es
I ended up replacing it with

1629840207
ldearquer!~user@cm-83-97-235-19.telecable.es
@bitReverse(u32, @shlExact(0x0000000F, 20))

1629840243
ldearquer!~user@cm-83-97-235-19.telecable.es
But I'd rather be using the less verbose former expression, is there a way to do so?

1629840269
ldearquer!~user@cm-83-97-235-19.telecable.es
(this is on master)

1629840431
ikskuh!~xq@2a0d:5940:6:163::ad7e
~@as(0b1111 << 20)

1629840434
ikskuh!~xq@2a0d:5940:6:163::ad7e
will do the job

1629840439
ikskuh!~xq@2a0d:5940:6:163::ad7e
errr

1629840444
ikskuh!~xq@2a0d:5940:6:163::ad7e
~@as(u32, …)

1629840495
ikskuh!~xq@2a0d:5940:6:163::ad7e
the problem that happens is: integer literals are comptime_int. comptime_int is a "big integer" implementation, thus applying ~ would set infinitly many bits to 1

1629840858
ldearquer!~user@cm-83-97-235-19.telecable.es
hmm, ok icic

1629840883
ldearquer!~user@cm-83-97-235-19.telecable.es
so what is @shlExact meant for?

1629840935
ldearquer!~user@cm-83-97-235-19.telecable.es
nice! it worked good. Thanks a lot! :)

1629841016
ldearquer!~user@cm-83-97-235-19.telecable.es
TBH, I still don't fully understand the difference between comptime_int and a regular integer which happens to be known at compile time (such as @as(u32, 0xFF))

1629841046
ldearquer!~user@cm-83-97-235-19.telecable.es
Is it just a way to tell the compiler to be aware?

1629841480
jjido!~Denis@2a02:c7f:5c91:e700:a4b1:e74b:d226:1434
a comptime int doesn't have a set size (number of bits)

1629841642
ldearquer!~user@cm-83-97-235-19.telecable.es
ikskuh jjido thanks for the help!

1629841928
dch!sid1310@couchdb/committer/dch
andrewrk: thanks for the nudge, I've got it compiling nicely. Tomorrow I will see about including the docs too, and then I should be able to push a zig-devel port regularly again.

1629841957
andrewrk!~andrewrk@mail.ziglang.org
dch, glad you got it working, what was the fix?

1629842071
dch!sid1310@couchdb/committer/dch
in the end, just remove `-lxml2` and add `-llzma -L/usr/lib`. I haven't finished a clean build yet, so can't be certain its fine, but "builds on my machine".

