1630911775
marler8997!~marler899@204.229.3.4
test

1630912204
marler8997!~marler899@204.229.3.4
discipulus, I think zig-bootstrap is too old to build what's on master right now

1630912338
marler8997!~marler899@204.229.3.4
you should be able to download the latest zig-binary and replace the first part of your command line with that, but still point search-prefix to your zig-boostrap directory

1630912361
discipulus!~discipulu@user/discipulus
ok, thank you

1630912636
discipulus!~discipulu@user/discipulus
https://github.com/ziglang/zig/wiki/Building-Zig-From-Source#option-b-use-a-pre-built-zig-binary should I change the instructions to say download a build from master rather than use zig-bootstrap?

1630912700
discipulus!~discipulu@user/discipulus
wait, I need to verify this is working first. I just got an error...

1630912775
discipulus!~discipulu@user/discipulus
plus zig-bootstrap is still required

1630913199
discipulus!~discipulu@user/discipulus
there's a few "ld.lld: error: undefined symbol:" errors

1630916811
discipulus!~discipulu@user/discipulus
So, I have moved on from this issue and using the latest master download...

1630916844
discipulus!~discipulu@user/discipulus
"Zig has lazy top level declaration analysis, which means that if a function is not called, or otherwise used, it is not analyzed."  Is this no longer true?

1630917172
bfredl!~bfredl@2001:470:69fc:105::183
astgen is performed on all declarations, so some errors will now be caught even in unused functions.

1630917200
bfredl!~bfredl@2001:470:69fc:105::183
like a local variable with no usages at all.

1630917688
discipulus!~discipulu@user/discipulus
Is the analysis still called "lazy top level declaration analysis"?

1630918234
bfredl!~bfredl@2001:470:69fc:105::183
The semantic analysis step (sema) still works like that

1630940341
bgiannan!~bgiannan@2a01:4f8:141:1272::2
can zig handle mutually referencing structs ? http://sprunge.us/hR8HFZ

1630941791
dutchie!~dutchie@user/dutchie
bgiannan: sure, but you have to specify them at the top level (not in a test)

1630941943
bgiannan!~bgiannan@2a01:4f8:141:1272::2
what's special about top-level then?

1630941968
dutchie!~dutchie@user/dutchie
`test` is syntax sugar for a function which are always executed top to bottom

1630941981
dutchie!~dutchie@user/dutchie
top level is effectively a struct which are lazily evaluated

1630942013
dutchie!~dutchie@user/dutchie
there's some weird segfault thing i don't quite understand when you define the A instance in the print call but https://0x0.st/-wSd.zig works fine for me

1630942064
bgiannan!~bgiannan@2a01:4f8:141:1272::2
thx

1630942127
ifreund!~ifreund@user/ifreund
dutchie: there are many known stage1 bugs caused by putting non trival code in tuple arguments like that :/

1630942172
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
top level is declarative, test is imperative

1630942190
ifreund!~ifreund@user/ifreund
^

1630942199
dutchie!~dutchie@user/dutchie
ifreund: i assumed as much, which is why i didn't bother trying to figure it out properly

1630949772
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Is there a standard LIFO structure in the standard library?

1630949938
ifreund!~ifreund@user/ifreund
swl: std.ArrayList can be used that way without much friction

1630949950
ifreund!~ifreund@user/ifreund
i.e. it has append() and pop() functions

1630950107
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Is there any benfit to using an ArrayList over a [12]u16 + an u8?

1630950142
ifreund!~ifreund@user/ifreund
swl: if you know the maximum size if your data structure in advance, by all means use the fixed size array

1630950243
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Yeah I don't see a huge advantage to having it be dynamic

1630950340
ifreund!~ifreund@user/ifreund
swl: well if you don't know the maximum size at compile time, dynamic data structures are quite useful

1630950364
ifreund!~ifreund@user/ifreund
but it sounds like in your case you should just stick with the array

1630961211
bgiannan!~bgiannan@2a01:4f8:141:1272::2
so i'm confused about how zig does this https://ziglang.org/documentation/master/#toc-Pass-by-value-Parameters

1630961300
Gliptic!~glip@irc.glip.cc
do what exactly?

1630961332
bgiannan!~bgiannan@2a01:4f8:141:1272::2
so i have a weird behavior with this

1630961349
bgiannan!~bgiannan@2a01:4f8:141:1272::2
i pass a struct as an argument to a function

1630961376
bgiannan!~bgiannan@2a01:4f8:141:1272::2
that functions calls another which modifys the struct from which we took that argument earlier and modifies it

1630961383
bgiannan!~bgiannan@2a01:4f8:141:1272::2
now what i thought was a value

1630961388
bgiannan!~bgiannan@2a01:4f8:141:1272::2
is modified

1630961417
bgiannan!~bgiannan@2a01:4f8:141:1272::2
my god those sentences make no sense

1630961511
bgiannan!~bgiannan@2a01:4f8:141:1272::2
can't i force passing by value? should i copy manually my struct to be sure it's left untouched while i'm in my function?

1630961640
shachaf!~shachaf@user/shachaf
I think you should perhaps show actual code that reproduces your problem.

1630961780
Gliptic!~glip@irc.glip.cc
parameters are supposed to be immutable, so yeah

1630961822
bgiannan!~bgiannan@2a01:4f8:141:1272::2
i was not able to reproduce it in a test, because i can't control when zig choses to pass-by-value or reference

1630961848
Gliptic!~glip@irc.glip.cc
but how is the function able to modify the struct

1630961855
bgiannan!~bgiannan@2a01:4f8:141:1272::2
i don 't know

1630961866
Gliptic!~glip@irc.glip.cc
isn't it your code?

1630961955
Gliptic!~glip@irc.glip.cc
never mind reproducing it, show the code that modifies the parameter without dodgy casts

1630962204
bgiannan!~bgiannan@2a01:4f8:141:1272::2
here's  a simplistic reproduction of my issue: http://sprunge.us/eTnecu?zig

1630962275
Gliptic!~glip@irc.glip.cc
ok, so it's an aliasing situation

1630962289
bgiannan!~bgiannan@2a01:4f8:141:1272::2
better: http://sprunge.us/ySKLUQ

1630962426
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
noalias shouldBeValue: B, maybe?

1630962442
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the docs on noalias are bad

1630962519
Gliptic!~glip@irc.glip.cc
doesn't "noalias" mean you promise it isn't aliased?

1630962548
Gliptic!~glip@irc.glip.cc
does zig realize it can't pass by reference then

1630962809
bgiannan!~bgiannan@2a01:4f8:141:1272::2
noalias doesn't work on non-pointer parameters

1630963640
torque!~tachyon@user/torque
this example doesn't make sense to me, you're explicitly making a call to modify self.b and then saying it's modified?

1630963840
torque!~tachyon@user/torque
oh, I missed the second paste

1630964094
bgiannan!~bgiannan@2a01:4f8:141:1272::2
how is this behavior not a bug?

1630964150
torque!~tachyon@user/torque
definitely seems like it to me

1630964248
ikskuh!~xq@2a0d:5940:6:163::ad7e
it is not a bug if you know that zig allows passing *any* parameter as a reference instead of a copy

1630964270
ifreund!~ifreund@user/ifreund
it's defintely a bug in the design of the language

1630964281
ifreund!~ifreund@user/ifreund
though currently it's intentional, so not a bug in the compiler

1630964301
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, that's probably stated better

1630964387
torque!~tachyon@user/torque
in this simple case it seems like you can force a copy by assigning it to another variable inside the function body at least https://zig.godbolt.org/z/3ejMoM3rs

1630964416
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, this is the workaround for the language bug

