1620345630
g-w1
i was thinking about it the wrong way, from the outside, not the inside. i had pub usingnamespace in mind

1620345657
andrewrk
ah

1620345692
g-w1
probably a brainfart, but any reason you can't just use bits.thing instead of just thing?

1620345999
g-w1
with s/usingnamespace/const bits =

1620346797
andrewrk
the main use case that keeps usingnamespace alive is `pub usingnamespace foo;` in order to organize the public declarations of a file for a different file to import

1620346811
andrewrk
for example:

1620347404
g-w1
ahh i see, thanks so much

1620347422
g-w1
yeah it seems like it can't be worked around witout meghans export default thing

1620347429
g-w1
which i am not a fan of

1620347829
andrewrk


1620348757
kiedtl
How does one check if a call to @intCast would truncate bits?

1620348898
g-w1
num > 2 ^ bitsoftarget ?

1620348913
g-w1
wow we got the test harness compiling! yay

1620348993
g-w1
*you :)

1620349076
g-w1
does 2188324676 or 0x826f2f44 look fishy?

1620349081
g-w1
seems like a pointer addr right?

1620362699
andrewrk
kiedtl, std.math.cast

1620365003
andrewrk
fun fact: stage1 is 78795 lines of code; stage2 is 118965

1620365977
mikdusan
just wait until the c-backend rewrites stage1 :)

1620366160
txdv
andrewrk: does it have more code because because of data oriented programming or because it has more features?

1620366189
mikdusan
+more code for memory management too

1620366198
andrewrk
it has more tests, more features, more backends, a self-hosted linker, and also part of stage1 is implemented in stage2 :)

1620366215
andrewrk
when you run `zig fmt` that's not touching any c++ code

1620366269
mikdusan
yeah true that; a visible feature entirely impl in stage2 is zig-cache

1620366340
andrewrk
also translate-c, zig cc, the linker driver

1620366356
andrewrk
CPU feature detection

1620366386
andrewrk
building glibc, musl, libcxx, libcxxabi, libunwind, libtsan

1620366544
txdv
it has so many more features and is only 119k lines of code compared to the old 78k?

1620366623
andrewrk
that's right, however it's also far from complete

1620366640
andrewrk
stage2 is still behind a feature flag

1620366641
txdv
In your last stream I saw that stage2 can compile an empty program, do you have a rough ETA when you will reach feature parity with stage1?

1620366682
andrewrk
I am now confident that we will be shipping stage2 rather than stage1 as the compiler by 0.9.0, in 7 months from now

1620366768
txdv
Compiling an empty program successfully is already a super huge step, having something working and adding incrementally features is so much easier.

1620366883
andrewrk
there are plenty of already passing test cases for stage2, but much remains to be done:

1620366925
andrewrk
I have major progress done in the stage2-whole-file-astgen branch, which is on a trajetory to merge within a few more days

1620367209
txdv
zig is really into TDD, they way you discard code and just reimplement everything until the tests run is awesome to watch

1620367302
txdv
or at least into tests :)

1620367309
andrewrk
TDD doesn't work for every kind of application/problem domain, but you'd be a fool to not do it for a compiler implementation :)

1620367534
mikdusan
someday I hope to see a clever test runner that can run through

1620367648
mikdusan
the current langspec does that to a huge degree but I'm not sure how it will play out with aa formal spec

1620367655
mikdusan


1620367919
txdv
I think that feature would be too concrete, something like returning the metadata of a testrun and then formatting the output accordingly utilizing a language spec would be more future proof

1620368239
andrewrk
mikdusan, that's a neat idea

1620368876
cr1901_modern
I do like how Zig encourages me to write tests early because it'll optimize out my whole program if I don't use code :)

1620369196
txdv
o yeah, it will just parse the syntax tree and see that you are not using it anywhere and not do anything at all with it :D

1620386624
betawaffle
i like how Go does testing, but i think Zig did it even better by allowing (and encouraging) tests to be colocated with the code they are testing

1620388582
antaoiseach
hello folks, how do I print a 2-d matrix? I can print a 1-d array using a slice parameter, but I can't make the types match for the 2-d array. Here is what I have tried -

1620388593
antaoiseach
Could someone please take a look at it? Thanks

1620388597
antaoiseach
:-)

1620388652
antaoiseach
Also, I am a bit unclear about if I should/can pass it by reference directly as a pointer - like so: &my_arr, but maybe I need to sort this slice param style out first.

1620388982
mikdusan
is your matrix always going to be based on `[3]i32` ?

1620389019
mikdusan
or more flexible like sometimes x3 somtimes x2

1620389020
antaoiseach
mikdusan: I don't like where this is going :D ... hahaha, just kidding

1620389029
antaoiseach
mikdusan: yeah, I was thinking flexible sizes

1620389055
antaoiseach
I checked the zig source too - but I find some uses of [][]const u8 in literal form, no other uses

1620389072
antaoiseach
Is it not possible to have an open-sized version?

1620389103
mikdusan
you can but it's always about storage

1620389113
antaoiseach
okay

1620389275
antaoiseach
right, so if I make the signature fn displayMatrix(comptime T: type, mat: *[2][3]T) void {

1620389301
antaoiseach
then it works (predictably), but isn't there a wat to elide the params so that I could pass in any size?

1620389305
antaoiseach
like for the 1d array

1620389326
antaoiseach
I don't mind not using slices, just raw pointers would be fine too

1620389335
mikdusan
the prob is the inside to be of unknown-length needs to be a slice and a slice needs some storage

1620389359
mikdusan
it might be better to comptime this

1620389382
mikdusan
like since you already have i32

1620389394
antaoiseach
I get what you're saying...

1620389396
antaoiseach
Hmm

1620389411
antaoiseach
So this is similar to what you're implying right? fn displayMatrix(comptime T: type, mat: [][3]T) void {

1620389424
antaoiseach
So this works, and I pass the arr in as arr[0..]

1620389431
antaoiseach
but the 3 is fixed

1620389453
antaoiseach
So in this case, would a nested List work? (I haven't reached Lists/stdlib yet)

1620389482
antaoiseach
mikdusan: sorry, I didn't get the comptime bit.. how do you mean?

1620389583
mikdusan
you already have first param as comptime, so let's pass the innermost array kind

1620389584
mikdusan


1620389598
antaoiseach
checking

1620389639
antaoiseach
mikdusan: yes, I think that also works well enough, since the display function is still generic and the client should know the size anyway

1620389643
antaoiseach
Thank you!

1620389653
mikdusan
thus your fn accepts any number of rows at runtime, and cols is static. you'll get 1 specialized function for each comptime T

1620389657
mikdusan
unique comptime T

1620389681
antaoiseach
mikdusan: right, that makes sense..

1620389710
antaoiseach
so, again, just curious - suppose I have a List of List, would this slight problem not exist then?

1620389741
antaoiseach
(I could try it out, but I'm still working through the ziglearn site)

1620389871
mikdusan
a list of a list; because each row has a list, each row would need more than "oh it's an i32". need to know how many i32, in other words a length. simple arrays are tight and don't end with a length in their runtime data. their length is statically (comptime) known

1620390003
antaoiseach
mikdusan: right, so basically you're saying a List(List(i32)), say, would work because it has its length info encoded in it, right?

1620390022
mikdusan
yes that's the idea

1620390036
antaoiseach
mikdusan: Okay, that makes sense again. Thank you so much for you help1 :-)

1620390053
mikdusan
as a raw example, [][3]i32 you want to become [][]i32 so here's the data comparison:

1620390109
mikdusan
first one is a pointer to LEN of { a,b,c } and { a,b,c} is always 3-long .

1620390152
antaoiseach
right

1620390153
mikdusan
2nd on is a pointer to LEN of { pointer to LEN of i }

1620390170
mikdusan
ah I messed that last bit up

1620390174
mikdusan
coffee please

1620390179
antaoiseach
Hahaha

1620390208
antaoiseach
so the second would be the len of a, which must be the len of b and c, right?

1620390231
antaoiseach
oh no, that would be reversed

1620390290
antaoiseach
Hmmm...

1620390294
mikdusan
fyi, you can think of a slice as a struct { ptr, len }

1620390309
antaoiseach
right ... a fat pointer, yeah/

1620390310
antaoiseach
?

1620390331
antaoiseach
so we read it from right to left, or left to right?

1620390368
mikdusan
read nature left to right. where u see "[]" there is a pointer. and it has a runtime length

1620390379
antaoiseach
right

1620390430
antaoiseach
but if the row length is always fixed, why can't that length be inferred?

1620390480
antaoiseach
(assuming that the ptr for the first dimension is again a fat one)

1620390584
mikdusan
maybe I have this matrix rows/cols backwards in terminology. I was assuming for `[2][3]i32` it is 2 rows and in your code it is comptime known to have 2 rows, of 3

1620390594
mikdusan
and the fn we made, as runtime flexible for rows

1620390614
mikdusan
you can make it comptime for rows and cols if you want too

1620390672
antaoiseach
mikdusan: hah, why didn't I think of that? Lemme try that and get back

1620390744
antaoiseach
yes,     displayMatrix([2][3]i32, matrix);

1620390758
antaoiseach
works fine if I change tha signature to: fn displayMatrix(comptime T: type, mat: T) void {

1620390775
antaoiseach
It does seem a bit weird - that signature, but it's fine I think

1620390778
mikdusan
there's a lot of ways to skin this cat; this one may be over the top because it's duck-type city:

1620390779
mikdusan


1620390803
antaoiseach
Nice!

1620390817
antaoiseach
So the anytype one is checked at comptime or runtime?

1620390829
mikdusan
anytype is comptime

1620390834
antaoiseach
That's great!

1620390862
antaoiseach
I think I like this in terms of convenience though the signature does get a bit obscured - would have been nice to have a [][]T signature, but that's okay

1620390863
mikdusan
it will result in an explosion of displayMatrixGeneric functions, 1 each per whatever zig considers to be a unique type

1620390874
antaoiseach
hahaha.... yeah

1620390888
kiedtl
Can you get a mutable (non-const) pointer to an optional type after unwrapping it? Basically, I'd like to change ?Type to ?*Type

1620390921
antaoiseach
mikdusan: thank you so much for the help and the convo, man - it was very very helpful. :-)

1620390939
mikdusan
kiedtl: if you want to mutate after unwrapping, change `|uw_value|` to `|*uw_value|`

1620390945
antaoiseach
I'll get back to the tutorials now, and I'll be back with more scenarios! Cheers!

1620390951
kiedtl
mikdusan: Ah, thanks

1620410862
andrewrk
mikdusan, peak RSS for stage2 to astgen all of the std lib, minus peak rss to print the --help menu, is 45 MiB

1620410876
andrewrk
it goes down to 18 MiB when the cache is warm

1620410966
andrewrk
a bit more efficient than stage1 ;)

1620410975
Nypsie
wow

1620411385
mikdusan
we're going to be able to test on 32-bit hosts soon :)

1620414564
g-w1
is there a way to test the memory of stage1 "astgen"?

1620414569
g-w1
or would you have to hack stuff?

1620414764
ifreund
g-w1: afaict, "astgen" isn't as anywhere near as clearly separated in stage1

1620414817
g-w1
oh yea, iirc function types are Sema'd before the body is "astgened"

1620414841
g-w1
thats how functions that return comptime values execute in a comptime-only context

1620414933
g-w1
i would suspect most of the memory is in sema

1620415101
mikdusan
most of the memory is comptime. I think even induction variables cause alloc on every iteration which are never freed

1620418781
kiedtl
Are there any stdlib function for saturating arithmetic?

1620418829
kiedtl
that is, arithmetic functions that saturate instead of panicking/wrapping on an overflow

1620418844
mq32
not yet, no

1620418855
kiedtl
That's fine, it should be trivial to define

1620418868
kiedtl
If it were added, what stdlib module would it be in? std.math?

1620418885
mq32
there's a proposal for adding it as a language feature

1620418887
ifreund
kiedtl: It is planned to add language support for saturating arithmetic

1620418897
kiedtl
oh... interesing.

1620418907
ifreund


1620418909
kiedtl
that's a lot of operators

1620418971
eyepatchOwl
I personally don't like multi symbol operators.

1620418985
ifreund
I'm not totally sure if the operator or builtin variant is accepted

1620419036
eyepatchOwl
I can make some exceptions for particularly common ones like ++, but I don't like <*>. I think you might as well  use keywords at that point.

1620419087
kiedtl
Given that we already have the +% -% *% etc operators, we may as well add +| -| etc.

1620419089
eyepatchOwl
+|= seem worth it to me.

1620419095
kiedtl
four more operator variants can't hurt :P

1620419098
kiedtl
well, eight

1620419104
eyepatchOwl
Not a fan of +%.

1620419152
eyepatchOwl
Or at least skeptical.

1620419436
andrewrk
it's not really up for debate

1620419475
companion_cube
proposal for floats operators to be +💩, /💩, etc.

1620419510
mq32
i mean, i needed wrapping operators twice yet

1620419531
kiedtl
companion_cube: why would separate operators for floats be needed?

1620419545
mq32
because they're a troll

1620419654
companion_cube
well they're separate in OCaml :-)

1620419674
companion_cube
(it's weird at first but not that bad, after all they're an entirely different beast than integers)

1620419691
mq32
well, you cannot mix int and float in zig either, so i don't really care

1620419730
companion_cube
but yes, the 💩 emoji was indicating my non seriousness.

1620423217
andrewrk
I remembered why I've been using test2.zig for the last 2 weeks

1620423236
andrewrk
I cracked open test.zig today and found the test case that inspired the entire branch, and it passed!

1620423240
andrewrk


1620423451
mq32
that looks quite cool

1620423506
andrewrk
also apparently C allows $ in identifiers? ok

1620423516
mq32
that's a good question…

1620423663
g-w1
andrewrk: thats amazing progress. when I try that I get this :(

1620423680
g-w1
ive been trying to debug this over the past 2 days, but its pretty hard

1620423682
andrewrk
I just pushed something

1620423698
g-w1
2 seconds late, new record

1620423729
andrewrk
lol I didn't push it til you spoke up

1620423737
g-w1
oh lol

1620423774
g-w1


1620423783
g-w1
and its been that same over the past few days.

1620423822
g-w1
do you have anything special in your setup?

1620423893
andrewrk
print the decl_index, sema.owner_decl.name, and sema.owner_decl.namespace.file_scope.sub_file_path, and then run astgen for the file, and look at %decl_index in the file

1620423910
g-w1
sounds good, very happy to help :D

1620424032
andrewrk
expected output is: test.zig:4:9: error: use of undeclared identifier 'thing1'

1620424034
andrewrk
that's what I get

1620424037
g-w1
hmm, not seeing a sema in scope

1620424059
andrewrk
zig should never make it to semantic analysis

1620424072
g-w1
this is in Module.scanDecl

1620424079
andrewrk
that's semantic analysis

1620424094
andrewrk
look at the call stack

1620424122
g-w1
ah, the same thing happens with just `pub fn main() void {}`

1620424139
g-w1
ok, lemme nuke the build, i feel like something weird is going on with cmake

1620424142
andrewrk
make sure your `zig version` is different since that's how it namespaces the cache, otherwise you might be looking at garbage cached ZIR data from an old commit

1620424151
recalloc
Forgive me if this is already answered somewhere, but what's the motivation for `while (cond) : (postloop)` over `for (init; cond; postloop)`

1620424158
g-w1
ohhhhhhhh, could it be globally cached?

1620424167
andrewrk
ZIR for the std lib is globally cached

1620424181
g-w1
that could be it, ok cool trying

1620424266
andrewrk
if you built with `zig build` after pulling there should be no problem though because it puts the commit sha into the version

1620424288
andrewrk
if you built with cmake I could see there being a problem

1620424293
g-w1
i built with cmake

1620424302
andrewrk
ok that explains it

1620424306
andrewrk
cmake doesn't figure out to re-run git

1620424317
g-w1
yayyyyyyyyyyy it works!!

1620424320
g-w1
thanks so much

1620424330
g-w1
time to play around with stuff

1620424343
andrewrk
the next thing I'm doing is getting the stage2 tests passing again

1620424354
andrewrk
looks like extern functions regressed

1620424440
g-w1
ok cool, if i see something up my alley ill try to fix

1620424468
g-w1
it does look like extern functions regressed

1620424473
andrewrk
recalloc, there is already variable initialization syntax, and there is already block syntax for limiting the lifetime of locals. no redundant feature for loop syntax needed

1620424493
recalloc
I see, thanks!

1620424511
ifreund
also, it's consistent with if statements

1620424515
andrewrk
{var i: usize = 0; while (i < 10) : (i += 1) { ... }}

1620424604
g-w1
what are your thoughts about the compitme call stack? tbh i find it kinda annoying and not that helpful.

1620424626
andrewrk
I'm guessing you mean the "referenced here" notes, not the comptime call stack

1620424644
g-w1
yea, the compile errors are verbose in the wrong ways a lot

1620424648
andrewrk
the comptime call stack is the only way to understand where the actual error is when e.g. you have a missing parameter to std.fmt.format

1620424665
g-w1
can't the compile error just tell you?

1620424702
ifreund
it would be really annoying if it didn't point at where you called fmt.format()

1620424705
andrewrk
the "referenced here" notes is a half ass attempt I made to solve a specific problem I ran into regarding async functions, in order to figure out why some compile error was happening. I don't intend to kludge it the same way

1620424725
g-w1
ok cool

1620424844
g-w1
it wouldn't make sense to switch the test cases to `pub fn main` from _start for now because it will eventually just go in test "thing" right?

1620424862
andrewrk
check my BRANCH_TODO file again ;)

1620424897
g-w1
nice,  * get behavior tests passing for stage2 <- does this mean at least one?

1620424930
andrewrk
yeah the test runner and then move some of the standalone tests to be behavior tests

1620424942
g-w1
awesome, i think that will speed up dev time a lot

1620425128
andrewrk
even for stage1 it only takes 6 seconds to compile & run the behavior tests

1620425160
andrewrk
well for the native target anyway

