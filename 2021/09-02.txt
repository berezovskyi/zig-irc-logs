1630574792
bgiannan!~bgiannan@194.206.91.37
for my project tests, i'd like to "capture" any stdout/stderr output, how can i do that? i started implementing a Writer but i'm not sure how to plug it in the projec

1630574933
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.ArrayList(u8).writer() is also a thing :)

1630574942
bgiannan!~bgiannan@194.206.91.37
oh nice

1630577104
bgiannan!~bgiannan@194.206.91.37
zig doesn't allow `@import("../something.zig")` anymore ? i have a `import of file outside package path` error

1630577139
ifreund!~ifreund@user/ifreund
bgiannan: it does, but not outside of the directory containing your root source file by default

1630577157
ifreund!~ifreund@user/ifreund
you can override this root directory with --main-pkg-path though

1630577188
bgiannan!~bgiannan@194.206.91.37
i see

1630577638
bgiannan!~bgiannan@194.206.91.37
this is weird:

1630577641
bgiannan!~bgiannan@194.206.91.37
/Users/giann/zig/lib/zig/std/mem/Allocator.zig:158:73: error: unable to evaluate constant expression

1630577643
bgiannan!~bgiannan@194.206.91.37
    const slice = try self.allocAdvancedWithRetAddr(T, null, 1, .exact, @returnAddress());

1630577645
bgiannan!~bgiannan@194.206.91.37
                                                                        ^

1630577647
bgiannan!~bgiannan@194.206.91.37
./tests/tester.zig:57:50: note: called from here

1630577649
bgiannan!~bgiannan@194.206.91.37
    var vm: *VM = try std.heap.c_allocator.create(VM);

1630578385
ifreund!~ifreund@user/ifreund
bgiannan: "unable to evaluate constant expression" is what you get when your code tries to something that can't be done at comptime at comptime

1630578400
ifreund!~ifreund@user/ifreund
in this case allocation, the current allocator interface doesn't work at comptime

1630578454
bgiannan!~bgiannan@194.206.91.37
i don't get it

1630578487
ifreund!~ifreund@user/ifreund
bgiannan: if you paste tester.zig somewhere I can probably be more helpful

1630585251
ikskuh!~xq@2a0d:5940:6:163::ad7e
marler8997: you asked for some api generation tool some days ago

1630585258
ikskuh!~xq@2a0d:5940:6:163::ad7e
you didn't find anything, did you?

1630592297
cot!~kiedtl@kisslinux/kiedtl
Is there something I'm missing here? `meta.activeTag(@typeInfo(struct { a: usize })) != .Struct`

1630592387
cot!~kiedtl@kisslinux/kiedtl
Oh wait, it's because meta.activeTag is a runtime statement, but I was putting that expression in a comptime block? using a switch statement fixed the issue.

1630592395
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
    @compileLog(comptime std.meta.activeTag(@typeInfo(struct { a: usize })) == .Struct); this prints true for me

1630592402
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
try adding comptime to te activeTag call

1630592444
cot!~kiedtl@kisslinux/kiedtl
Oh hm

1630592473
cot!~kiedtl@kisslinux/kiedtl
>Segmentation fault

1630592482
cot!~kiedtl@kisslinux/kiedtl
Probably because I'm on 0.7.1 still

1630592485
cot!~kiedtl@kisslinux/kiedtl
idk

1630592679
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
idk

1630593448
bgiannan!~bgiannan@194.206.91.37
how do i read cli arguments in main?

1630593537
dutchie!~dutchie@user/dutchie
std.process.args or std.process.argsAlloc

1630593545
bgiannan!~bgiannan@194.206.91.37
thanks

1630593566
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think std.os.argv also works if a unixy system

1630596360
marler8997!~marler899@204.229.3.4
ikskuh no I didn't, I also didn't look very hard either

1630597041
marler8997!~marler899@204.229.3.4
did you have a use case for it?

1630599721
marler8997!~marler899@204.229.3.4
should this work with the new usingnamespace semantics? https://gist.github.com/marler8997/34fcfc69a98c6330b5ad15325638300c

1630599836
ifreund!~ifreund@user/ifreund
marler8997: yep, I think so

1630599838
ifreund!~ifreund@user/ifreund
does it not?

1630599842
marler8997!~marler899@204.229.3.4
nope

1630599899
marler8997!~marler899@204.229.3.4
updated gist with error

1630599911
marler8997!~marler899@204.229.3.4
using the zig I built from master which has the new semantics

1630600287
ifreund!~ifreund@user/ifreund
marler8997: ah I think I know what the problem is. andrewrk didn't actually change the stage1 code at all. The new semantics are enforced entirely through unused indentifier errors in stage2 astgen 

1630600306
ifreund!~ifreund@user/ifreund
which doesn't work in this case

1630600322
marler8997!~marler899@204.229.3.4
ifreund, people on discord are saying the error is correct because "const FOO = 0;" adds FOO do the namespace and the scope

1630600386
ifreund!~ifreund@user/ifreund
hmm, yeah that does make sense

1630603677
marler8997!~marler899@204.229.3.4
ifreund, I created this proposal to potentially address this https://github.com/ziglang/zig/issues/9675  

1630603740
ifreund!~ifreund@user/ifreund
marler8997: I don't think that complexity is worth it tbh

1630603762
ifreund!~ifreund@user/ifreund
the status quo seems perfectly fine to me, and is far simpler for the compiler to deal with

1630603778
marler8997!~marler899@204.229.3.4
simpler in what way?

1630603871
ifreund!~ifreund@user/ifreund
well, not having a feature is almost always simpler to implement than having a feature for startes

1630603888
marler8997!~marler899@204.229.3.4
debatable :)

1630603950
marler8997!~marler899@204.229.3.4
I suppose it's simpler for the tool that has to implement the feature, not necessarily simpler for the language/projects that use it

1630604113
ifreund!~ifreund@user/ifreund
marler8997: I don't think having a new way to add symbols to the current scope makes the language simpler

1630604128
marler8997!~marler899@204.229.3.4
agreed

1630604140
ifreund!~ifreund@user/ifreund
your use-case is for generated code anyways no?

1630604165
marler8997!~marler899@204.229.3.4
yes

1630604230
marler8997!~marler899@204.229.3.4
but this could also be used in std, I noticed there was alot of places that Andrew added qualifiers to

1630604251
marler8997!~marler899@204.229.3.4
like "c.fd_t" instead of "fd_t".  I now realize this was required because of this issue

1630604274
ifreund!~ifreund@user/ifreund
I don't see c.fd_t as a regression

1630604276
ifreund!~ifreund@user/ifreund
I think it's better

1630604293
marler8997!~marler899@204.229.3.4
why?

1630604303
marler8997!~marler899@204.229.3.4
c = @This() by the way

1630604379
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats the whole point of the change

1630604389
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its more clear

1630604402
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and it allows the compiler to check idents w/o checking types

1630604406
marler8997!~marler899@204.229.3.4
I think it depends on the case

1630604527
marler8997!~marler899@204.229.3.4
in this case we can look at lib/std/c.zig, and look at all the "c.*" symbols

1630604605
marler8997!~marler899@204.229.3.4
I'm not sure how "c.X" is more clear than "X" along with @includeNamespaceSymbol(X).  In the first case you need to go lookup what "c" is, and in the second you lookup where "X" is coming from

1630604633
marler8997!~marler899@204.229.3.4
and from the compiler's perspective they would essentially be identical

1630604672
luuk!~luuk@user/luuk
Looking up "c" is done once, looking up "X" is used for for instance where you'd do "c.<something>"

1630604719
marler8997!~marler899@204.229.3.4
and looking up "c.X" would also be done for every instance you do "c.<something>"

1630604739
marler8997!~marler899@204.229.3.4
you've actually just added an extra lookup

1630604754
marler8997!~marler899@204.229.3.4
but it would be the same number of lookups if it was @This().X

1630604992
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
when you do the lookup is different, one is in Sema, and one is in Astgen

1630605025
marler8997!~marler899@204.229.3.4
so the inherit problem this is solving is that previously when you used "usingnamespace EXPR", you have no idea what symbols were coming from it until you analyzed it

1630605056
marler8997!~marler899@204.229.3.4
so whenever you looked up a symbol in the current scope, you had to load every single usingnamespace to check if it had that symbol

1630605086
marler8997!~marler899@204.229.3.4
my proposed change isn't a problem because it's still no mixing in all the symbols, it's only including the explicit symbols

1630605140
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm,it could be done, but then the builtin would have to be special-cased in AstGen

1630605172
marler8997!~marler899@204.229.3.4
g-w1 oh?

1630605177
marler8997!~marler899@204.229.3.4
could you explain that one a bit more?

1630605206
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
all symbols are resolved in astgen

1630605216
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so if you want to add a symbol to be resolved, it has to be in astgen

1630605216
marler8997!~marler899@204.229.3.4
oh you're saying that AstGen normally doesn't analyze builtins, but in this case it would need to know about it?

1630605223
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes

1630605232
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if you want to make all symbols analyzed in astgen

1630605233
marler8997!~marler899@204.229.3.4
gotcha, yes that sounds right

1630605251
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and then it would have to be checked again in Sema

1630605294
marler8997!~marler899@204.229.3.4
sure, but that's no different

1630605313
marler8997!~marler899@204.229.3.4
just like @This().X would be checked in Sema I'm sure

1630605322
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah

1630605582
marler8997!~marler899@204.229.3.4
one thing that feels weird, is that I can use the symbol X in other modules, but not the module that defines it

1630605631
marler8997!~marler899@204.229.3.4
If I have this: "pub usingnamespace struct { pub const X = 0; }",   I cannot use the symbol X inside that module, but in another module I can do const X = import("module.zig").X.  but I can't do that inside the module itself

1630606454
andrewrk!~andrewrk@mail.ziglang.org
agreed that is weird

1630606588
andrewrk!~andrewrk@mail.ziglang.org
I think that can be fixed

1630606671
ifreund!~ifreund@user/ifreund
 

1630606846
marler8997!~marler899@204.229.3.4
oh yeah? you got ideas?

1630607714
andrewrk!~andrewrk@mail.ziglang.org
yeah the stage2 usingnamespace name resolution already addresses this, I should be able to change stage1 to match it

1630607755
andrewrk!~andrewrk@mail.ziglang.org
or just let stage1 rot until it gets replaced

1630607909
marler8997!~marler899@204.229.3.4
oh that's great, how does it address it?

1630608014
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Does the new change to usingnamespace mean that I can no longer pull in things from a file without having to use @This().X?

1630608044
andrewrk!~andrewrk@mail.ziglang.org
when resolving names, it chases pub usingnamespace decls and will find the correct name, and won't report an error on a private match

1630608073
andrewrk!~andrewrk@mail.ziglang.org
Flaminator, that's correct, however you also have the option to import each individual item explicitly

1630608127
ifreund!~ifreund@user/ifreund
andrewrk: nice, that's what I thought the semantics we landed on were, looks like my initial response to marler8997 above was right

1630608147
marler8997!~marler899@204.229.3.4
hmm, not sure I understand

1630608230
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Ah I was afraid so andrewrk, I guess I had been abusing usingnamespace to not have to copy around 20 things I need in almost every file in my project.

1630608230
marler8997!~marler899@204.229.3.4
you're saying this should work?   pub usingnamespace struct { pub const FOO = 0; } pub const FOO = @This().FOO; ??

1630608262
marler8997!~marler899@204.229.3.4
take out the "pub" from the "pub const FOO = @This().FOO"

1630608406
marler8997!~marler899@204.229.3.4
Flaminator which project?

1630608430
ifreund!~ifreund@user/ifreund
Flaminator: look on the bright side, now people reading your code will have an easier time figuring out where the 20 things are defined :P

1630608465
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
My own toy project using zigwin32. Bunch of win32 types I need almost everywhere.

1630608841
andrewrk!~andrewrk@mail.ziglang.org
marler8997, yes

1630608940
andrewrk!~andrewrk@mail.ziglang.org
Flaminator, end-game for this use case is an "Organize Imports" button which magically adds and removes imports making this situation verbose but painless

1630608958
marler8997!~marler899@204.229.3.4
Flaminator, yeah it looks like you're going to need to do something like const w = struct { usingnamespace @import("win32"); } now

1630609004
marler8997!~marler899@204.229.3.4
the usingnamespace restriction makes sense to me when it comes to libraries and enabling lazy evaluation, but when it comes to applications where everything is used, it makes less sense, but not sure what you can do about it

1630609042
ifreund!~ifreund@user/ifreund
marler8997: it may seem a little weird that you could declare `const FOO = @This().BAR;` locally in the file that has the `pub usingnamespace`, but this isn't really an issue as it's not visible outside the file 

1630609100
ifreund!~ifreund@user/ifreund
it's at least no worse than `const FOO = @import("BAR.zig");`

1630609159
ifreund!~ifreund@user/ifreund
marler8997: I've got exactly 1 usingnamespace usage in river, and that's for my c.zig file

1630609174
andrewrk!~andrewrk@mail.ziglang.org
I want to note that this new language restriction is not mainly motivated by increasing friction of abusing usingnamespace - it's a core part of making it possible to implement zig's comptime semantics in a manner that is reasonably efficient in terms of perf and memory usage

1630609176
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Yeah I had that at first marler8997, but all the win32.HINSTANCE/win32.LPARAM/win32.WPARAM really cluthered up my code.

1630609176
ifreund!~ifreund@user/ifreund
it's just not a thing I feel the need for, even in application development

1630609212
andrewrk!~andrewrk@mail.ziglang.org
stage1 leaks a lot of memory and is an order of magnitude too slow, and part of it is how it handles comptime closures. this reduction of the capabilities of usingnamespace is directly motivated by implementing self-hosted and keeping its perf goals on track

1630610290
marler8997!~marler899@204.229.3.4
Flaminator, I think the best you can do now is using "w.FOO" until you have enouh instances of "FOO" to warrant "const FOO = w.FOO"

1630610569
marler8997!~marler899@204.229.3.4
I've updated my proposal issue into just a bug: https://github.com/ziglang/zig/issues/9675

1630610682
marler8997!~marler899@204.229.3.4
now I've got to decide if I want to rely on this new ability to redefine private symbols, or if I want to enhance zigwin32 to combine arch-specific symbols into the same location.  If I do the former, then the new version of zigwin32 will not work with older versions of the compiler

1630611352
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
How do I know when I build a project on WIndows that it's using msvc or mingw?

1630611512
marler8997!~marler899@204.229.3.4
@import("builtin").abi == .msvc (or .gnu)

1630612052
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Seems calling zig build -Dtarget=native-native-msvc doesn't do much, atleast not in the build.zig because it prints 'std.target.Abi.gnu'. I guys maybe it's the wrong parameter to pass.

1630612090
marler8997!~marler899@204.229.3.4
I think that's because build.zig is probably built with gnu

1630612105
marler8997!~marler899@204.229.3.4
-Dtarget=native-native-msvc would only affect the default target in build.zig

1630612192
marler8997!~marler899@204.229.3.4
so if you're using b.standardTargetOptions() and setting that to you exes in build.zig, and you're looking for the abi for those exe's, then that's where you'll find it

1630612318
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Been trying to get a Windows msvc builds to work when you remove the mingw folder from lib\libc but it throws the following error http://aeug.eu/p/fac2.jpg

1630612378
marler8997!~marler899@204.229.3.4
if you want that to work you'll need some way to specify compilation flags to build build.zig

1630612382
marler8997!~marler899@204.229.3.4
not sure if that's possible

1630612407
marler8997!~marler899@204.229.3.4
is it possible to change the target for build.zig?

1630612432
marler8997!~marler899@204.229.3.4
I don't know of a use case why you would want to though

1630612490
ifreund!~ifreund@user/ifreund
what exactly do you mean by change the target?

1630612503
marler8997!~marler899@204.229.3.4
the built target for build.zig itself

1630612503
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
I tried setting "exe.setTarget(.{.cpu_arch = .x86_64, .os_tag = .windows, .abi = .msvc})".

1630612519
ifreund!~ifreund@user/ifreund
marler8997: oh no, that's always native

1630612535
marler8997!~marler899@204.229.3.4
right, but on windows he wants to build that using msvc

1630612549
marler8997!~marler899@204.229.3.4
still native

1630612583
marler8997!~marler899@204.229.3.4
you could imagine the same thing for linux, wanting to build build.zig with gnu or musl for whatever reason

1630612688
marler8997!~marler899@204.229.3.4
Flaminator, do you mind explaining your use case for wanting to build build.zig with msvc instead of gnu?

1630614316
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
I have no real valid reason for wanting to do it marler8997, but I just prefer to not have to use gnu code.

1630614492
marler8997!~marler899@204.229.3.4
ok fair enough

1630614517
marler8997!~marler899@204.229.3.4
you could find the command used to build build.zig (maybe with -v or something) and build it manually just to verify it works

1630614670
ifreund!~ifreund@user/ifreund
it's not a command, the compiler just builds it

1630614706
ifreund!~ifreund@user/ifreund
see cmdBuild() in src/main.zig

1630614771
marler8997!~marler899@204.229.3.4
I feel like I remember seeing zig print the command it used to build build.zig if it failed, but maybe it changed or I'm remembering wrong

1630614783
ifreund!~ifreund@user/ifreund
and the target is hardcoded to whatever is returned by std.zig.system.NativeTargetInfo.detect

1630614842
ifreund!~ifreund@user/ifreund
nope, it only prints the command used to invoke the compiled build.zig if it exits non-zero 

1630614849
marler8997!~marler899@204.229.3.4
ah

1630615559
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
'/me feeds ifreund blueberries

1630615566
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
embarrassing 

1630617656
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
does anyone have any references for using openssl with zig

1630617658
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
or know of any*

1630617684
marler8997!~marler899@204.229.3.4
I use it in this project: https://github.com/marler8997/ziget

1630617701
marler8997!~marler899@204.229.3.4
I got a staticially built version working, and also one that loads the .so file

1630617728
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ty

1630619523
doawoo!~doawoo@149.117.75.13
hey there, figured this may be the best place to ask this question, I've been utilizing `zig cc` to try and compile a shared plugin library on MacOS (x86_64). The issue i'm running into is it seems to still report missing symbols during complication. I've seen issue #3085 on Github which makes reference to `-fallow-shlib-undefined` but that does

1630619524
doawoo!~doawoo@149.117.75.13
not seem to work at all for MacOS, and it also reports "zig: warning: argument unused during compilation: '-undefined dynamic_lookup''"

1630620043
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what are the missing symbols?

1630620212
doawoo!~doawoo@149.117.75.13
I'm using it to compile a NIF for erlang, so the missing symbols are ones that would be resolved at runtime like `_enif_make_atom` and `_enif_alloc` (internal erlang BEAM VM functions), if I target linux-gnu with `-Wl,--allow-shlib-undefined` it works just find and produces an elf SO, but `-Wl,--allow-shlib-undefined` seems to do nothing on Mach-O

1630620212
doawoo!~doawoo@149.117.75.13
libs in `zig cc`

1630622542
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ACTION perfect hashes g-w1 

1630622586
ifreund!~ifreund@user/ifreund
doawoo: are you using zig master or zig 0.8.0?

1630622626
ifreund!~ifreund@user/ifreund
-undefined dynamic_lookup is how you tell apple's linker to --allow-shlib-undefined

1630622629
doawoo!~doawoo@149.117.75.13
I'm on `0.9.0-dev.860+04cafd813`

1630622649
ifreund!~ifreund@user/ifreund
but I'm pretty sure master branch has completely dropped the dependency on apple's linker

1630622654
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thats what i thought

1630622660
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i think you have to add it

1630622728
ifreund!~ifreund@user/ifreund
doawoo: this is probably a regression, this definitely used to work on 0.8.0 but I guess it does not any longer

1630622776
ifreund!~ifreund@user/ifreund
I'd open an issue

1630622803
doawoo!~doawoo@149.117.75.13
Alright, thanks for the confirmation!

1630622831
ifreund!~ifreund@user/ifreund
if you grep the src directory for allow_shlib_undefined you can see that it's only actually used when linking an elf file currently

1630622852
ifreund!~ifreund@user/ifreund
if you do the same on an 0.8.0 checkout it's used for macho as well

1630622922
doawoo!~doawoo@149.117.75.13
interesting, I was initially learning Zig on 0.8.0 and switched to master before this experiment, i'll try and fallback to 0.8.0 to see if it compiles properly

1630622954
doawoo!~doawoo@149.117.75.13
that still uses Apple's linker if I understand correctly?

1630623538
ifreund!~ifreund@user/ifreund
doawoo: I think it uses the lld compiled into zig by default and can be forced to use the system linker from apple if you set ZIG_SYSTEM_LINKER_HACK 

1630623561
ifreund!~ifreund@user/ifreund
I don't have a macos system though, so that's just what I've gathered from reading the source

1630623713
andrewrk!~andrewrk@mail.ziglang.org
ifreund, ZIG_SYSTEM_LINKER_HACK is eradicated!

1630623727
andrewrk!~andrewrk@mail.ziglang.org
zig's self-hosted macho linker is sufficient for any use case now

1630623731
ifreund!~ifreund@user/ifreund
andrewrk: talking about 0.8.0 :p

1630623736
andrewrk!~andrewrk@mail.ziglang.org
ah my mistake

1630623757
ifreund!~ifreund@user/ifreund
as far as I can tell from the source, it doesn't support --allow-shlib-undefined

1630623784
ifreund!~ifreund@user/ifreund
(on master)

1630623819
ifreund!~ifreund@user/ifreund
I don't really have a horse in this race though, I don't use macos and am off to sleep now o7

1630623858
cepheus!~cepheus@user/cepheus
having done a decent amount of work in that space a while back that is indeed how it was circa 0.8.0. in that case it was for linking against frameworks in SDK versionss only shipping with .tbd files. i haven't worked on it much since the zld changes

1630623934
doawoo!~doawoo@149.117.75.13
ifreund: thanks for your help!

1630623968
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
can you turn a global array into a slice?

1630623981
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i know im being silly but & and [0..] both give me *const [1]T

1630624014
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what are you trying to coerce into?

1630624019
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
[]T

1630624028
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but it can be []const T too

1630624029
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ig

1630624054
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
try []const T

1630624110
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
that worked pepega

1630626061
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
is there a writeup somewhere of how the event loop works

1630626298
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
https://github.com/ziglang/zig/issues/5311

1630626705
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
damn when did this happen /Users/haze/src/zig/lib/std/event/loop.zig:490:56: error: container 'std.os' has no member called 'EVFILT_READ'

1630626936
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yesterday?

1630626943
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
try EVFILT.READ

1630626953
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
std.os was reorginazed to be more ziggy

1630627071
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
suffering

1630627090
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
also this https://github.com/ziglang/zig/issues/9680 

1630627102
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
is interesting because i get sentinel mismatch trying to use sentinel slices from the lang ref

1630627190
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
haze they were saying that ziglearn said something that the docs didn't

