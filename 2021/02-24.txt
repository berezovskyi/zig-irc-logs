1614124896
andrewrk
we're gonna merge this branch today, I can taste it

1614125978
andrewrk
all zig fmt test cases passing again!

1614125983
andrewrk
now it's just the CI

1614127714
g-w1
oof the ci failed

1614127758
g-w1
on the cli tests

1614127848
andrewrk
also discovered some more regressions by running zig fmt on the std lib

1614130884
karchnu
I nearly finished the translation of the overview pageâ€¦ the original page is quite verbose. ^^'

1614131498
andrewrk
indeed it is

1614134699
andrewrk
damn, I can only repro that failing CI issue on aarch64 in release mode

1614135161
andrewrk
a tokenizer bug?

1614135694
g-w1
was const std = @import("std"); never tested?

1614135726
g-w1
it is

1614136633
andrewrk
I suspect a MultiArrayList bug

1614137828
g-w1
andrewrk: does the bug trigger if you use libc allocator?

1614141779
marler8997
I think a good word for the programming style I've developed would be "bread crumb programming"

1614141827
marler8997
I work on the things I want to work on but make sure to leave good bread crumbs everywhere else

1614141852
marler8997
I wonder if that's already a "thing"

1614142070
andrewrk
g-w1, yes

1614142091
andrewrk
marler8997, that sounds very similar to the style I have arrived on as well

1614142176
marler8997
yeah I notice you use the same technique when I see you live stream

1614142232
marler8997
it's something I think I started really learning about 5 years ago, around 8 years after I started programming in college

1614142268
marler8997
would have loved to have learned about it back then :)

1614142748
andrewrk
heh, I can repro the zig fmt issue with qemu-aarch64

1614143844
andrewrk


1614144473
mikdusan1
#7138

1614147016
andrewrk
ifreund, we're down to just 2 small zig fmt regressions left!

1614147023
andrewrk
I'm done for the day

1614155439
marler8997
just finished what is probably my longest github comment ever :)

1614155486
andrewrk
wowie zowie

1614155522
marler8997
yeah I'm in talks with a publisher, it's clear I like writing novels when I'm passionate about something :)

1614156122
ifreund
andrewrk: nice, I'll take a look after breakfast :)

1614156277
ifreund
marler8997: stitch looks pretty sweet by the way, interested to see where it goes

1614156305
marler8997
ifreund oh thanks alot, still got stuff to iron out but it's been coming along, made alot of progress that past couple days

1614156466
ifreund
lots of prior art here by the way:

1614156492
ifreund
though it seems stitch is more focused on non-interactive usage (is interactive usage even planned?)

1614156545
marler8997
ifreund, nope, it's purposely left out since I've found features of both can be contradictory

1614156550
marler8997
i.e. optimize for reading vs writing

1614156593
marler8997
thanks for the links, this will be useful reading

1614156663
marler8997
oil is written in python, and translated to C++, that's nifty

1614156730
ifreund
keeping it non-interactive makes sense, should certainly keep thing simpler

1614156807
marler8997
goodness, why do these shells have so much code in them?

1614156823
ifreund
yeah, a lot of them really suffer from complexity :/

1614156871
ifreund
probably one of the reasons I'm still using zsh for interactive usage and posix sh through dash for scripts

1614156891
ifreund
not that zsh is simple, but it's old and stable enough to be a known evil

1614158241
andrewrk
marler8997, added a comment to the @tryImport thread

1614158263
andrewrk
happy to discuss more tomorrow, but for now I'm going to watch some One Piece and then go to bed :)

1614166317
karchnu
Links on

1614166482
ifreund


1614166655
karchnu
right, I should see the current issues on github :D

1614170926
ifreund
andrewrk: got those last test cases fixed, might go looking for more in a bit :)

1614172434
ifreund
urgh, this test case was too simple actually. The current solution isn't sufficient

1614176325
karchnu
can someone explain to me this part of the website? "This target may only support --emit asm and cannot emit object files"

1614176572
ikskuh
karchnu: that means that the compiler cannot link or create object files

1614176969
karchnu
the way it is said, this seems very specific

1614177021
karchnu
but, okay, I'll try to find the right wording in french

1614179024
ikskuh
marler8997, you there?

1614179030
marler8997
yeah

1614179133
ikskuh
answering to your comment here to prevent some lengthy discussions

1614179149
marler8997
sure

1614179150
ikskuh
in this case you'd have two options: accept bearssl as a build dependency

1614179168
ikskuh
flat-copy the bearssl build instructions into your build.zig

1614179192
marler8997
right

1614179194
ikskuh
i'm with andrew here, it's more reasonable to fetch everything to be able to work offline and

1614179211
marler8997
this has nothing to do with the internet

1614179231
marler8997
it is completely orthogonal

1614179236
ikskuh
not quite

1614179245
ikskuh
if i only ever fetch openssl

1614179257
ikskuh
i will not be able to

1614179275
marler8997
you're also going to need the 80 MB zigwin32 repository, even though you're not even on windows

1614179317
ikskuh
yep

1614179325
marler8997
and all it's dependencies.  Every dependency that build.zig depends on now has to be downloaded

1614179330
ikskuh
because i might want to cross-build to windows in two years

1614179334
ikskuh
but don't have internet right now

1614179340
marler8997
this solution doesn't scale, and what's going to happen is people are going to come up with clever hacks to get around this limitation

1614179366
marler8997
They are going to come up with "configure" script to run before Zig build

1614179395
marler8997
ikskuh, it's fine if you want to cross build, we're not talking about that case

1614179406
marler8997
we're talking about the case where you are downloaded dependencies that you don't need and aren't using

1614179470
marler8997
downloading all your dependencies might be fine for small projects, and while Zig is in its infancy

1614179489
marler8997
and it's fine if it's hard to do dependencies because it naturally makes people not use them

1614179523
ikskuh
marler8997: it contradicts maintainability though

1614179523
marler8997
when you see a library you want to use, you now have to decide if you want to require everyone to always download it, even if its not being used

1614179530
marler8997
why are we forcing people to comprimise?!?

1614179586
marler8997
right, because it's easier to maintain everyone's ad hoc solution that gets around the limitation??

1614179621
ikskuh
i am in daily pain that people fucked up their dependency management

1614179627
ikskuh
and only use what they

1614179652
ikskuh
what i want (and zig gives me that right now) is this:

1614179673
ikskuh
"copy the project and compiler onto a stick, move it into an airgapped machine and compile the project there"

1614179692
marler8997
this has nothing to do with our discussion

1614179698
marler8997
again, it's completely orthogonal

1614179706
ikskuh
it has

1614179717
ikskuh
because if i don't have all deps available in this moment

1614179722
ikskuh
i cannot compile the project over there

1614179727
marler8997
of course

1614179728
marler8997
orthogonal

1614179733
ikskuh
why? it's missing win32 ;)

1614179748
ikskuh
because it has other build dependencies on another machine

1614179752
ikskuh
we're in zig

1614179757
marler8997
whether or not a dependency exists has nothing to do with the build systems ability to detect and handle that missinjg dependency

1614179764
ikskuh
we could make packages depend on the freakin' CPU microcode patch

1614179770
ikskuh
so

1614179775
marler8997
we are only talking about the ability to detect and handle missing dependencies

1614179776
ikskuh
what does it do in the case of a missing dependency?

1614179780
ikskuh
ffail?

1614179780
marler8997
this has nothing to do with fetching or managing them

1614179784
ikskuh
and cry? :D

1614179801
marler8997
it's an error like "failed to import missing package "foobuild""

1614179831
ikskuh
and then i'm fucked because i cannot ever get this foobuild

1614179854
marler8997
of course

1614179859
marler8997
again, this is all orthogonal

1614179907
ikskuh
i don't think so

1614179916
marler8997
I think you're making the assumption that if the build system can handle a missing dependency and provide a nice error message, that this also implies that it's not tracked properly as a dependency at all and therefore wouldn't have been downloaded

1614179918
ikskuh
i don't really think there's such a thing as an "optional" build dependency

1614179946
ikskuh
marler8997: this implies that you're building with the exact same configuration

1614179951
marler8997
ikskuh, that is very easily provably false

1614179959
ikskuh
what if i'm suddenly legally not allowed to build with openssl anymore because of $reasons

1614180017
marler8997
what does this have to do with the ability of build.zig to detect and handle missing dependencies?

1614180027
marler8997
again, this has nothing to do with fetching and managing dependnecies

1614180057
ikskuh
even then i think @tryImport is the wrong solution here, as it's too late there already to do anything about it

1614180064
ikskuh
so it can also just fail ungracefully

1614180065
marler8997
ikskuh, nope

1614180068
marler8997
definitely nope

1614180074
ikskuh
what is the thing that should be done then?

1614180077
marler8997
but that's also orthogonal

1614180080
ikskuh
display a nice error message?

1614180090
marler8997
I'm not saying build.zig has to do anything about it

1614180107
marler8997
it could, but that's unrelated to the fundamental ability for build.zig to handle it at all

1614180122
ikskuh
but why should it handle it at all?

1614180134
ikskuh
the only reason i see is to

1614180139
marler8997
because some dependencies are optional

1614180142
ikskuh
otherwise, the dependency would be fullfilled with a guarantee

1614180149
ikskuh
and we don'T need an option to detect this

1614180156
ikskuh
because it is always available

1614180157
ikskuh
by design

1614180170
marler8997
when I build the openssl backend, if the import to "zigwin32build" fails, I don't care

1614180297
ikskuh
then again: why should it fail, we have fetched it ;)

1614180324
marler8997
I don't want to fetch it, that's the point

1614180345
marler8997
if I dont' need it, I don't want to fetch it, I don't want every user to have to download every dependency for every possible build configuration

1614180396
marler8997
and if I'm a project maintainer, this is going to encourage me not to add new dependencies because it means that everyone is always going to have to download this new dependency, even when it is only required for some esoteric build configuration

1614180419
ikskuh
yes, exactly.

1614180425
ikskuh
that's the point though

1614180429
marler8997
maybe I want to add some Android ssl backend, which requires a large Android SDK project, now everyone has to download that very large project for android

1614180440
ikskuh
if you only fetch a partial copy, you are unable to maintain the project

1614180442
marler8997
even if they have ssl completely disabled

1614180462
marler8997
ikskuh, you fetch the dependencies you use

1614180526
ikskuh
and as said: then i might be able to build today

1614180528
ikskuh
but not tomorrow

1614180538
marler8997
let me ask you this question, what if we were talking about the dependencies of the project itself?

1614180551
ikskuh
can you explain me

1614180560
ikskuh
a dependency is something i need to build the project

1614180566
ikskuh
period.

1614180574
marler8997
well you seem to be ok with them being handled differently correct?

1614180586
ikskuh
nah, fetch them.

1614180594
marler8997
you're saying it's ok to download all possible dependencies of a build.zig file, but it's not ok to do that for dependnecies that the project itself uses?

1614180602
marler8997
is that correct?

1614180610
ikskuh
no

1614180620
ikskuh
it's not okay to not fetch dependencies

1614180621
ikskuh
imho

1614180638
ikskuh
i cannot archive the software i'm writing at work

1614180642
ikskuh
and it so freaking sucks

1614180682
marler8997
so say you have a project like a text editor

1614180694
marler8997
and it can compile for every possible known operating system out there

1614180729
marler8997
it's got like 5 GB worth of dependencies if you combine all of them, but you only need the core project and the linux platform dependnecy, which amount to around 2 MB

1614180756
marler8997
you're saying that the package manager should always download all 5 GB of dependencies for all platforms no matter what, even if you just want to build the linux variant

1614180782
marler8997
is that right?

1614180803
ikskuh
if i want to work on the project: yes

1614180821
marler8997
that's absolutely ridiculous

1614180821
ikskuh
if not, i can use a prebuilt distribution and don't need a source variant of it

1614180829
marler8997
I'm not ok with that

1614180868
marler8997
it looks like we have a fundamental disagreement here

1614180900
ikskuh
yep

1614180913
ikskuh
had too much pain with depending on

1614180930
marler8997
what irks me here is you're asserting that your position here is the superior one by not allowing me to support my position

1614180932
ikskuh
including the OS itself (windows project with heave ignorant use of case insentivie file names)

1614180980
marler8997
to say this use case is invalid is too strong of an argument, even if I agreed with your fundamental point

1614181072
mikdusan1
why again is it superior that a maintainer for a native-gui must download qt5 ? I think I'll pass on that.

1614181117
marler8997
a perfect example, ikskuh says you MUST download qt even if you're not using it

1614181127
mikdusan1
not gonna happen. qt5 is the devil.

1614181128
marler8997
that just seems ludicrous to me

1614181139
ikskuh
mikdusan1: because only then you can actually maintain the project properly and see if you don't break stuff with your changes

1614181145
marler8997
it sounds like somethine Microsoft would do

1614181156
ikskuh
also you are able to build for another platform if that is necessary

1614181180
ikskuh
what i think could be an option:

1614181181
mikdusan1
ikskuh: maybe qt5 doesn't even build on my platform. so I have no way to see if my stuff breaks . thus qt5 will never be used for me.

1614181202
marler8997
ikskuh, of course you can, we're not saying you shouldn't be able to download all the dependencies, we're saying it shouldn't be required if specifically build a variant that doesn't need them

1614181233
ikskuh
make the user

1614181258
marler8997
that's exactly what @tryImport allows you to do

1614181274
ikskuh
it's not having that warning

1614181323
ikskuh
mikdusan1: you never know

1614181342
ikskuh
i took roughly 1 full-time week to get a project we have in the company to build

1614181353
ikskuh
because people didn't archive their projects properly

1614181355
ikskuh
result:

1614181363
ikskuh
"download this library" isn't possible anymore

1614181451
ikskuh
so the only solution to maintain this project was: reimplement that library functionality from scratch

1614181474
marler8997
ikskuh, please stop attacking this straw man

1614181491
ikskuh
it's sadly some stuff where i had serious pain with

1614181498
ikskuh
and thus is important to me

1614181503
ikskuh
to prevent future pain

1614181510
marler8997
your use case is safe and sound, this is orthogonal

1614181551
marler8997
granting the ability to handle missing dependencies does not mean that we are removing support to download all the dependencies

1614181583
ikskuh
yeah as said: i can agree on opting out of "download all dependencies"

1614181591
ikskuh
but i am strongly for "it should be default"

1614181596
mikdusan1
shuld be other way around. sorry.

1614181635
ikskuh
i think we have different backgrounds on this then

1614181660
marler8997
>  i can agree on opting out of "download all dependencies"

1614181666
marler8997
fundamental disagreement solved?

1614181687
marler8997
I don't think I've ever seen such a fast turnaround like that :)

1614181768
ikskuh
marler8997: well, that was exactly the point of this discussion

1614181782
ikskuh
not spamming github :D

1614181861
marler8997
yeah real-time discussion is alot more efficient and allows conversationt to be more focused because of the feedback loop

1614181867
ikskuh
yep!

1614182025
ikskuh
but even then, i'm not sure that @tryImport is the right solution

1614182045
ikskuh
imho something like "comptime" build options for build.zig would be better

1614182069
ikskuh
provided from a static file, similar to zig_packages.json

1614182104
marler8997
it's uncanny how much you are adhering to the theoretical example in my "Story Time" comment

1614182143
mikdusan1
i had some early thoughts on this and felt that we'd need to start with, looking from a zig perspective of .zig deps, 2 things: a `@package(spec)` builtin and externalization of `spec`

1614182183
mikdusan1
so `@package()` defines the package name (uuid'sh thing), where to fetch it, etc.

1614182221
mikdusan1
and the externalized .json version is what ends up on a website for each (eg.) tarball

1614182364
marler8997
ok given these idea, how do we tie the command line option -Dbackend=QT to this comptime configuration?

1614182386
mikdusan1
build.zig already has a comptime config mechanism

1614182427
marler8997
-Dbackend=QT isn't available till runtime, so how does it affect a comptime config?

1614182441
mikdusan1
looking for an example. I wrote one a while ago

1614182517
mikdusan1


1614182605
marler8997
hold on, I might be mixing up yours and ikskuh's examples

1614182613
marler8997
is @package() called at runtime or comptime

1614182662
mikdusan1
tbh I should put together a proposal. but `@package(spec)` would be a language builtin with comptime spec.

1614182766
mikdusan1
so build.zig would convey options (the config) to our .zig sources which based on that config, can choose what to supply `@package(spec)` with. @package in my idea is basically just an elaborate `@import`

1614182791
mikdusan1
and the usual lazy use applies. nothing is pulled in unless needed.

1614182878
mikdusan1
one of the cases I wanted it to soundly support, and I think it would, is the mtaintainer vs. release manager

1614182922
mikdusan1
so build.zig would drive a config of "maintainer mode or not?" and if maintainer == trun @import else @package

1614182928
mikdusan1
s/trun/true

1614182990
earnestly
Huh, for a second I thought this might be an Ada channel, heh

1614183160
marler8997
brb

1614184420
ikskuh
<marler8997> it's uncanny how much you are adhering to the theoretical example in my "Story Time" comment

1614184430
ikskuh
keeping to the same example is better for everyone in a discussion

1614184451
ikskuh
switching examples is just a red herring and confuses people

1614186116
mikdusan1
marler8997: this is just shooting from the hip. but this is further along in how I see .zig declaring/using packages:

1614186117
mikdusan1


1614187003
marler8997
looking

1614187121
mikdusan1
i did a "what if" we just put that info in .zig source directly. obviously it applies only to .zig deps

1614187177
mikdusan1
the cost I suppose of moving out of .zig is less type-safety and then @import("foo") would need to match a external .json somewhere

1614187213
marler8997
I'd have to think about the pros and cons of where to put the dependency information, I'm not sure of them at the moment

1614187259
marler8997
but I hope it's clear that all this is completely orthogonal to @tryImport, all @tryImport does is provide a mechanism for build.zig files to handle missing imports.  How dependencies are specified or resolved or how the package manager is somewhat related, but ultimately orthogonal

1614187407
marler8997
just talking about the information you're including in your dependnecy data structure,  I know the data you've given here is addressing real problems.  Things like a package identity, semantic versioning, signing.  All stuff we'll need to address with the package manager.  But I'm sort of laser focused on the @tryImport thing before I can really weigh in on these details

1614187447
mikdusan1
i

1614187448
mikdusan1
yet

1614187468
mikdusan1
i mean for each package that build.zig requires

1614187480
marler8997
yeah

1614187528
marler8997
there's really no way getting around this requirement.  Without this feature, we have to make sacrifices no matter what

1614187568
marler8997
i.e. just throwing our hands up in the air and saying that some dependencies just always have to be downloaded...we don't support any logic to determine when to download them

1614187825
mikdusan1
I am not sure but would it be easier to visualize tryImport in the use-case of say needing to imbue build.zig with ability to fetch using (example) http3

1614188670
marler8997
that might be a bit of a stretch and rub people the wrong way because it sounds like it's trying to be a package manager

1614188711
marler8997
we can stick to examples of just using other libraries to configure our build in various ways

1614188716
marler8997
the Android example is a good one I think

1614188857
marler8997
ok I think I have 3 statements that if people agree are true, shows the need for @tryImport

1614188869
marler8997
Statement 1: build logic is codified in Zig (not BASH or Python etc)

1614188887
marler8997
Statement 2: we want to allow logic to be used to configure dependencies

1614188897
marler8997
Statement 3: the logic we use to determine our dependencies can have its own dependencies

1614188943
marler8997
in thinking about this problem quite a bit, @tryImport was a result of a reduction of the requirements and the current state of Zig

1614189005
marler8997
ikskuh actually helped along the way, it's a generaliztion of the "prebuild.zig" idea I had, where it allows build.zig to serve as it's own "prebuild" so it can bootstrap itself.  This is the same idea he presented when he talked about build.zig building another builder_runner

1614189063
marler8997
Statement 1: I think everyone will agree on

1614189122
marler8997
Statement 2: this was our earlier discussion which shows without this feature, everyone will need to download every possible dependency that a build.zig file might import including the ones they will never use, and keep in mind this also means downloading all your dependencies possible dependencies

1614189174
marler8997
say I'm using zig-bearssl, and it adds support for android, so now suddenly my project which uses zig-bearssl but doesn't support android has to pull down android even though my project can't even use it

1614189231
marler8997
For Statement 3: Android and QT are good examples of why it would be useful to provide libraries to use logic to determine our dependencies

1614189527
marler8997
if anyone has trouble seeing why these 3 statements infer the need for @tryImport, let me know and I can walk you through it

1614190416
marler8997
It might also help to mention that @tryImport is only necesary for the corner cases where dependencies are dynamic.  In most cases, dependencies are static and will therefore not need @tryImport.

1614191337
braket
I'm assuming no, but is there a non-comptime way to construct a struct with an anytype member?

1614191353
g-w1
no

1614191361
g-w1
anytype is an only-comptime construct

1614191384
marler8997
tagged union is probably want you want

1614191591
braket
I'm trying to store a function and its parameters (in another member), so I don't think a tagged union would help there unfortunately

1614191620
marler8997
it's the only solution, asside from using a reference

1614191730
braket
how would the union approach work if you don't mind explaining. I know about them but I've never worked with them before so

1614191750
marler8997
is this function argument going to be a value of a set of known types?

1614191764
braket
no

1614191786
marler8997
so you don't know the storage size of this struct holding the function pointer and the argument?

1614191821
g-w1
if this were c I would use *void, but its not.

1614191827
braket
correct, which I guess is why comptime is required

1614191828
marler8997
for example, for all you know the argument could be a struct that has 100 fields...is that right?

1614191837
braket
right right

1614191849
g-w1
usually when this happens, I think of another way to do it because I am probably using the language wrong

1614191852
marler8997
then you have to use a reference

1614191889
marler8997
but I would also question whether or not you can actually get the set of known types

1614191930
marler8997
for example, you can create a tagged union type like this Variant(i32, usize, []const u8, ...)

1614192012
braket
This is for a task queueing library where I was hoping to be able to take any sort of function and arguments and store them in a task struct to later be executed.

1614192072
braket
But yeah, I'll look into references and perhaps maybe try for a different approach cause I don't people to have to write comptime var and do comptime initialization too. that's just annoying

1614192130
marler8997
I recall it was either Kprotty or Andrew put together a task queue library, and they may have had a solution for this, maybe I can find it

1614192301
marler8997
you might want to take a look at std/event/batch.zig in the standard lib

1614192325
braket
alright, I'll take a look

1614192348
marler8997
looks like it's using anyframe to encapsulate an asynchronous function call

1614192361
marler8997
which would have any arguments passed to the function

1614192392
marler8997
a more generalized version of a functionpointer/argument structure

1614192392
g-w1
thats an interesting idea, or maybe making a context argument as a struct that gets passed to th efunction

1614192574
braket
ooooh, this might work out nicely. thanks! i'll try it out

1614194969
braket
the batch.

1614194969
braket
welp, that didn't work. I thought it would be different b/c of the & for some reason lol, but `&async foo()` just calls foo like normal async stuff, which isn't what I want as tasks may be nonasync. I guess that's why it says Batch only runs async functions in parallel, cause for non-async functions it just runs the function before it adds it to

1614195541
marler8997
I don't know enought about async to help much

1614195589
braket
all good, maybe i'll just make users put a suspend in all their task functions ;D

1614195723
marler8997
one thing you could do, is instead of a function pointer, you could pass a pointer to a Task struct that contains a function pointer

1614195756
marler8997
this function pointer takes a pointer to the Task struct as the first argument, then you can use @fieldParentPtr to create "sub type" of your Task to add whatever data you need

1614195775
marler8997
this is what the Allocator interface does

1614195790
marler8997
and is a common Zig pattern to emulator what classes do in other languages

1614201553
zags
I had a bug where I passed in an arena allocator to a socket handler, which in turned stored a ptr to allocated memory long-term, while the caller nuked the arena. My bad, but is there a good strategy here/any way to get help from the language? That is, how to ensure allocators live long enough.

1614201630
ifreund
if your arena was backed by the std's gpa the use-after-free detection should help you

1614201794
zags
yeah it wasn't, but mostly looking for ways to prevent this form happening in the first place, but don't think there's a static solution

1614203289
braket
is there a builtin for getting the return type of a function? I thought I remember seeing one somewhere..

1614203348
Gliptic
@TypeOf?

1614203349
braket
oh wait nvm

1614203386
braket
yeah @TypeOf(@Call(...)) was what I was looking for

1614203676
g-w1
you can also probably use @TypeInfo

1614204582
braket
gah, i'm so close

1614204592
braket
what's the frame_buffer used for in @asyncCall?

1614204617
braket
in the example it looks like it never gets used

1614204721
braket
ah nvm, found better examples in stdlib

1614205472
andrewrk
ifreund, zig fmt on the std lib looks good :D

1614205512
andrewrk
oh wait a minute, looks like I have a parser issue to tackle regarding a return type that is a labeled block

1614205610
ifreund
\o/

1614205628
g-w1
yep thats the one issue i saw too

1614205640
ifreund
there's definitely some things in render.zig that could use cleanup but nothing that needs to block the merge

1614205692
andrewrk
I think this CI run is going to pass

1614205716
g-w1
is the parser issue a merge blocker?

1614205850
g-w1
ah its a LabeledTypeExpr

1614205920
andrewrk
yeah, I'll fix it after lunch

1614207872
v0idify


1614208106
andrewrk
drews gonna drew

1614208184
earnestly
Cry wolf, anything worthwhile he could add is overshadowed by all of the rest

1614208525
josias
I want to see his language completed.

1614208530
josias
Or at least published.

1614208714
g-w1
harelang.org ?

1614208965
ikskuh
how big is stage2 right now when we exclude std?

1614209025
andrewrk
you mean like how big is the stripped ReleaseFast x86_64 executable?

1614209031
ikskuh
yep

1614209031
andrewrk
or .zig source line count

1614209034
ikskuh
file size

1614209072
josias
g-w1: Oh. I didn't know about that.

1614209073
josias
"Please do not share this website with the others until we believe it's ready for broader distribution." Ah. That explains it.

1614209137
g-w1
oh didn't see that XD

1614209222
josias
Where did you discover it?

1614209238
g-w1
andrewrk posted it on the discord server :D

1614209259
andrewrk
nark

1614209311
andrewrk
ikskuh, 3.2M in the ast-memory-layout branch, where I reduced some of the bloat of zig fmt

1614209335
ikskuh
pretty big

1614209338
andrewrk
statically linked

1614209342
ikskuh
but we have a cool set of nice features :)

1614209384
andrewrk
to be fair, libc-2.31.so is 2.0M

1614209394
ikskuh
wellâ€¦ :D

1614209403
ikskuh
i noticed we cannot fit std on a floppy though

1614209405
ikskuh
in source form

1614209439
andrewrk
that is a price I am happy to pay in 2021

1614209472
mipri
probably cheaper to get old bulk MMC cards than floppies. And those are

1614209498
ikskuh
you mean getting a microsd? :D

1614209503
ikskuh
MMC is ðŸ’©

1614209512
ikskuh
(i have one, 32 MB of MMC gloryness)

1614210353
andrewrk
I think ast-memory-layout is merge ready now

1614210395
marijnfs2
how do i replace std.ArrayListSentineled(u8, 0)

1614210395
andrewrk
gonna do a quick benchmark on master branch vs ast-memory-layout branch of `zig fmt` on the entire std lib

