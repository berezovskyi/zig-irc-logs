1612828858
andrewrk
certainly there are codepaths where cleanup is hard to test, but for a lot of compiler tasks it's embarassingly testable

1612828919
ifreund
Yeah, I saw that :)

1612828958
ifreund
Someday when I have time I should try and set up something similar for river/wlroots

1612828983
ifreund
wlroots is one of the C libraries that at least trys to care about allocation failure :)

1612834757
v0idify
if i have a thing that's `?c.a_c_type` how do i point to the inner non-null value? a bit confusing

1612834816
brzg
the point of `?` is that it's not definite that there's an inner non-null value

1612834849
brzg
so you'd need to use `thing orselse ...` or `thing.?` or `if (thing) |inner| { ... }`

1612834852
v0idify
well, I want to un-null it and pass it to a C function to initialize it

1612834859
brzg
if you're looking to get a *c.a_c_type

1612834864
v0idify
that

1612834868
brzg
`if (thing) |*inner| { ... }`

1612834877
v0idify
yeah but !thing, it's null

1612834886
v0idify
it starts off null and I want a pointer to init it

1612834925
brzg
why do you need a pointer to initalise it but can't make it nonnull

1612834945
v0idify
?

1612834966
brzg
if you need a pointer to initalise it, you need to have it be nonnull

1612834970
v0idify
the context is that I have a variable that contains c.FT_Library and it is lazily initialized when it's needed

1612835004
v0idify
if i set the variable to undefined, would it be non-null and therefore allow a pointer?

1612835028
brzg
it would be undefined and therefore you shouldn't rely on its value

1612835072
v0idify
if (!thing) { thing = undefined; c.init(&thing.?); }

1612835072
mikdusan
`var thing: ?c.FT_Library = null; var p = &thing; p.* = some_value;`

1612835121
v0idify
but that's a pointer to the Optional

1612835143
brzg
ah, another idea: make a variable of type `c.a_c_type`, pass its pointer to the c function, then transfer the initialised value into the `?c.a_c_type` variable

1612835184
v0idify
ooh that could wokr

1612835245
v0idify
kinda annoying but that'll do for now

1612865514
ifreund
v0idify: I think you do var thing: ?c.FT_Library = @as(c.FT_Library, undefined); if (thing) |*t| c.ft_functionn(t);

1612878781
marler8997
wow saw this on reddit, pretty nifty:

1612878807
marler8997
lets' you view github repositories in a browser like you're using VSCode

1612879189
zags
love it

1612879225
zags
need syntax highlighting

1612879241
marler8997
yeah I wonder if they could get plugins to work

1612879270
zags
should be possible to do the simple ones

1612879292
marler8997
imagine getting ZLS to work by compiling it to WASM and running it in the browser ??!!??

1612879311
zags
cpp highlighting works, but maybe they just hack things using a third party renderer

1612879685
DarkUranium
marler8997, there is one for C#, too. I saw it while researching Roslyn.

1612879701
DarkUranium


1612879718
DarkUranium
Well, this one is actually just for Roslyn, but I rather like the idea. I think I might emulate it.

1612880495
zags
mmm, nnn really improves the day

1612880553
v0idify
ifreund, if i do thing = @as(c.FT_Library, undefined); it still thinks it's null

1612880702
v0idify
is std.fs.File thread safe?

1612880948
ifreund
v0idify: interesting

1612880970
ifreund
I think that should work, unless c.FT_Library is a pointer type

1612880976
timeyyy
andrewrk, I was inspired by your article "Announcing the Zig Software Foundation", I am also starting a non profit and would like to copy some of your sentances because they so elegantly say what I want to express. Would this be ok with you?

1612881045
v0idify
ifreund, it is a pointer type! why wouldn't that work?

1612881048
timeyyy
I plan to use them in an announcment post on the website for the NPO. I can also give you some credit and link to your website

1612881273
ifreund
timeyyy: I don't think you need permission to quote andrew's post, only if you pass it off as your own words without acknowledgement

1612881294
ifreund
the website currently doesn't have a license though, we should fix that

1612881355
ifreund
v0idify: optional pointers are the same size in memory as normal pointers and the 0 value is used to indicate null

1612881394
ifreund
optional non-pointer types (and allowzero pointers) use a separate bool to store the null/non-null state

1612881430
ifreund
v0idify: If you share the C header you're using I might be able to give better advice

1612881523
v0idify
ifreund, it's from FreeType2, the type that it exports is a pointer by itself

1612881633
v0idify
oh.. i just didn't have to put a ?

1612881644
ifreund
yeah

1612881646
v0idify
because it automatically turns into a ?*<inner type>

1612881655
ifreund
[*c] may be null already

1612881684
ifreund
or if the struct is opaque, then translate-c will output ?*

1612881697
ifreund
I really hate C librarys that typdef pointer types...

1612881719
v0idify
yeah kinda weird

1612881728
v0idify
do we have something like github.com/ai/nanoid?

1612881784
ifreund
we have plenty of crypto stuff in the std

1612881851
v0idify
yes but i might have to make it myself for this

1612881883
ikskuh
if you're the first user of nanoid in zig, i'd love to see the library ported :)

1612881927
v0idify
don't make me do crypto stuff :P

1612882096
v0idify
how am I supposed to seed a csprng?

1612882280
ifreund
I think the std does that for you?

1612882302
ifreund
just call e.g. std.crypto.random.int(i32)

1612882320
v0idify
oh

1612882336
zags
yeah std uses OS entropy

1612882415
ikskuh
yeah i think you can trust std.crypto quite well (as long as you trust libsodium)

1612882471
v0idify
somehow I made it panic: resumed an async function which already returned

1612882478
v0idify
when calling random.bytes

1612882797
ifreund
are you using 0.7.1 or master?

1612882820
ifreund
I think std.crypto.random got significantly better since 0.7.1

1612882836
ifreund


1612882902
v0idify
i'm using some degree of master, no worries i think i figured it out

1612883189
v0idify


1612883319
v0idify
i'm doing the pos/i thing because it's what nanoid does for compact js.. i'm gonna do this properly

1612883378
v0idify


1612887583
v0idify
is fs.File buffered?

1612887592
ikskuh
no

1612887599
ikskuh
fs.File is direct access to read/write syscalls

1612887614
ikskuh
if you want buffering, you can wrap file.reader() or file.writer() in to a std.io.bufferedReader

1612887651
v0idify
ok

1612887665
dutchie
(or a bufferedWriter)

1612888000
v0idify
what happens if I seek?

1612888816
v0idify
for some reason this panics

1612888831
v0idify
when running with evented i/o

1612889090
v0idify
i tried with master, still fails

1612889436
ifreund
do you get a stack trace?

1612889630
dutchie


1612889819
dutchie
and fwiw i'd prefer `&a` to get a slice from an array to `a[0..]`

1612889839
dutchie
i guess it's a bug in std or async somewhere anyway

1612889903
ifreund
yeah I'd say that's worth a bug report

1612892724
v0idify
dutchie, thanks!

1612892753
v0idify
can somebody file the report for me? I don't have a GitHub account and I don't want one

1612893011
v0idify
is there a way to force it to run as sync while running the rest of the thing with evented i/o?

1612895853
SebastianM
Guys, is Zig devel already shipped with musl 1.2.2 ? Thank you:)

1612895914
ifreund
SebastianM: no, not yet

1612895934
ifreund
I see that a CVE was fixed, I should update it

1612895993
SebastianM
ifreund: Thank you

1612903844
ifreund
man it would be nice to have something for saturating math in std.math

1612903996
andrewrk
note that saturating arithmetic is approved as first class operators in the language

1612904019
andrewrk


1612904039
ifreund
oh sweet

1612904398
ifreund
andrewrk: I'm about to give updating musl to 1.2.2 a go by the way

1612904437
andrewrk
sweet! keep your wits about you, and make any updates to that wiki page you deem necessary

1612904441
andrewrk
it's always a bit of a manual process

1612904496
ifreund
just a patch release so hopefully nothing major will go wrong..

1612904519
andrewrk
yeah if there are no changes to musl's build system files or files moved around, I think it should be quite straightforward

1612906432
voldial
any gentoo users around? do you keep your own fork of the portage tree to cherry pick PR's into?

1612906669
jemius
Hola. There is no pure Matrix-room, is there?

1612906701
motiejus
#zig:matrix.org , though not as lively as this one

1612906734
jemius
isn't that an IRC bridge?

1612906746
motiejus
nope, that's a pure matrix room

1612906773
motiejus
irc-bridged rooms in freenode are of the form `#freenode_#<channel>:matrix.org`

1612906788
motiejus
(bridged by matrix.org, surely)

1612906859
jemius
top

1612906930
jemius
Since fosdem I'm wondering why I've never heard of Zig before. I've been trolling around in search for a C replacement for a while by now, Rust, Go, D

1612906954
ifreund
andrewrk: went smoothly, just a few things in the wiki to update since linking is done by zig code not C++ now :)

1612906962
andrewrk
nice

1612906980
andrewrk
I'll let the CI do a run through since it tests cross compiling on a few different architectures

1612907004
andrewrk
welcome jemius

1612907015
andrewrk
provided you can tolerate some instability and immaturity, I think you've come to the right place :)

1612907104
jemius
andrewrk, C is a hard nut to crack. We will see about that

1612907211
jemius
Zig-Syntax isn't exactly trivial compared to C (not to speak of Go)

1612907694
geemili
jemius: What do you mean by that? I was under the impression that zig was much easier to parse since it's more regular than C

1612908269
v0idify
did anyone happen to report the issue i had? :#

1612908302
g-w1
you may be able to report it to the mailing list too

1612908349
v0idify
this was of course already reported

1612908402
v0idify
it confuses me because i don't see where it is calling anything async in crypto.random or similar

1612908445
andrewrk
crypto.random may need to make an OS syscall to /dev/urandom

1612908594
jemmi__


1612908699
v0idify
jemmi__, "When there are multiple defers in a single block, they are executed in reverse order."

1612908700
g-w1
its reverse order. 2.5 + 2

1612908776
zags
andrewrk: doesn't it already do that through getRandomBytesDevURandom ?

1612908842
v0idify
zags, it seems it should default to syscalling getrandom though

1612908856
v0idify
otherwise it uses that

1612908873
zags
ok, crypto should definitely fail if it can't get os entropy

1612908891
v0idify
this is def not that

1612908898
v0idify
it only fails on evented io, /dev/urandom works

1612909480
v0idify
why doesn't it say where it was resumed? the stack trace i mean

1612909551
daurnimator
v0idify: I'm not sure.... I guess that one of the code paths in tlsCsprngFill is potentially async... need to figure out which one

1612909643
v0idify
it still fails with crypto_always_getrandom

1612909731
daurnimator
hmmm... if you call `std.os.getrandom` directly yourself do you have the same issue?

1612909828
marler8997
getting ready to implement the Win32 COM bindings for Zig :)

1612909879
v0idify
daurnimator, nope

1612910018
daurnimator
v0idify: sorry I can't see the cause of the problem. don't have enough time to investigate further right now

1612910090
daurnimator
I'm getting the bad feeling that it could be a bug with async in general rather than particular to random

1612910215
zags
marler8997: so I can soon IDispatch from Zig?

1612910326
daurnimator
zags: he's doing it at comptime

1612910348
daurnimator
but given that IDispatch is in COM.. you should be able to do it at runtime if you want ;)

1612910392
daurnimator
and infact marler8997: comparing your comptime results to what IDispatch tells you at runtime might be useful for test cases

1612910570
marler8997
calling IDispatch from Zig, yes

1612910580
marler8997
daurnimator, doing it at comptime?

1612910617
daurnimator
marler8997: are you not? I thought this was some of the proceeds of that windows definitions project you were doing

1612910634
marler8997
oh I see, yes you're right

1612910644
marler8997
calling IDispatch on it's own would be easy

1612910693
marler8997
I'm actually going to generate Zig code for all the COM types in win32metadata

1612910722
marler8997
this is the last major thing missing from the bindings at this point

1612911644
zags
marler8997: next, @import("odbc") ? :d

1612912101
marler8997
hmmm, I don't see the odbc functions in there, unfortunately

1612912161
zags
that's ok, nostalgia isn't what it used to be

1612912206
daurnimator
zags: na nostalgia has always been like that ;)

1612912234
zags
aye, it's a joke I heard from the BeOS founder

1612912447
zags
circular jokes are the best

1612913047
zags
hm, i can't do generic unions?

1612913148
zags
oh wait, just have a comptime function make the type I guess

