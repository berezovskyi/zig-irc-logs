1616648280
g-w1
what is the best way to get a doc comment from std.zig.parse?

1616648640
g-w1
hmm, seems like zls will be helpful here (trying to do the ast-based std documentation idea)

1616648752
g-w1
yeah, i can just copy the zls logic here :)

1616649404
g-w1
ok the api is nice :)

1616658980
andrewrk
I just pushed `inline while` support to stage2 and I'm really pleased how it turned out :)

1616659003
andrewrk
although you can't really play with it yet because stage2 does not yet support `comptime var`

1616662396
gracefu
hi #zig, i just started dipping into the language after having read up on it for a few weeks and i struggled re: generic classes/interfaces.

1616662398
gracefu
i put my questions here:

1616662648
yyp
gracefu: No, you're not supposed to put constructors in the type itself

1616662709
yyp
You just use `const stream = SliceStream(i32); stream.data = ...

1616662743
yyp
Or just pass the data directly in SliceStream() function: SliceStream(i32, my_data[0..3])

1616662755
gracefu
ohhh

1616662773
gracefu
what if i wanted to write a function that operates on streams? should they take in anytype?

1616662786
yyp
Yes

1616662807
gracefu
something like `fn stream_mapper(comptime Stream: anytype, stream: Stream) Stream) { ... }`

1616662813
yyp
Though, that's not the best thing as type safety is not a thing with anytype

1616662817
gracefu
yeah

1616662819
yyp
gracefu: Stream doesn't need to be comptime

1616662830
gracefu
oh, just stream: anytype

1616662832
gracefu
i see

1616662840
yyp
fn stream_wrapper(stream: anytype) thing { ... }

1616662849
gracefu
hmm is there a way to take in "a thing that satisfies the Stream interface"?

1616662878
yyp
Maybe this will work?: fn stream_wrapper(comptype StreamType: type, stream: SliceStream(type)) thing { ... }

1616662942
gracefu
ah, so is it very similar to what i have right now, except i simply move the constructor out to the top level scope?

1616662956
yyp
gracefu: there are not interfaces, SliceStream just returns an inline struct which can't be checked

1616662961
yyp
s/not/no

1616662977
gracefu
SliceStream is type -> type, but constructors are outside the struct and i have slice_stream be []T -> SliceStream(T)

1616663036
yyp
fn SliceStream(comptime Elem: type, data: []Elem) type { ... }

1616663076
gracefu
hang on, this is wrangling my brain, so it returns a type but it contains data?

1616663101
yyp
nevermind, it doesn't have data

1616663185
yyp
Or not, now I'm confused too

1616663185
gracefu
is it something like this?

1616663205
yyp
There's an example from stdlib which actually sets default value -

1616663222
gracefu
i think i missed the idiom that generic constructors can just take in the required type parameters as parameters

1616663277
gracefu
ahh

1616663280
gracefu
i see the pattern

1616663334
yyp
And your example also works, that's the pattern that is used by io.Reader I beleive

1616663430
gracefu
couldn't get the pattern used by allocator to work, data wasn't available at compile time so i can't set it as the default value

1616663438
gracefu


1616663519
gracefu
i see reader. that's VERY CLOSE to what i wanted with interfaces :0

1616663597
yyp
The problem is that you still need to use anytime as types returned by Reader are very thicc and it's almost impossible to recreate it (I tried)

1616663604
yyp
s/anytime/anytype

1616663613
yyp
nevermind

1616666001
gracefu
i tried to do the interfaces but inspired by io.Reader and it didn't work out well at all... haha...

1616666006
gracefu
oh yyp left

1616666738
ifreund
andrewrk: thanks, and yeah I kinda expected you'd want to tweak things a little :D

1616666747
ifreund
all your changes make sense by the way

1616669423
gracefu
yyp: not sure if you were interested in seeing my attempt at making interfaces inspired by io.Reader

1616669438
gracefu
didn't really work out haha

1616670447
yyp
That a bit too complicated for me

1616670457
yyp
Why do you need so many wrappers?

1616670472
gracefu
i don't think i do

1616670474
gracefu
haha

1616670485
gracefu
in hindsight i don't think i know what io.Reader is even doing

1616687060
v0idifyy
is there no way to use a `select` style statement, like a function call? couldn't it theoretically be implemented directly as a function in the std event loop?

1616687111
g-w1
i think lithdew made one a few days ago

1616687133
v0idifyy
yeah i got the question because of that, but doesn't that require a special event loop?

1616687155
g-w1
probably

1616687761
v0idifyy
TIL zig has tuples

1616688487
v0idifyy
funny enough a very incomplete and old implementation of select is commented out in std/event/channel.zig

1616689843
gracefu
does zig have interfaces / any proposals for interfaces?

1616689877
v0idifyy
interfaces can be implemented through comptime or runtime (see Allocator)

1616689969
dimenus
$

1616689976
dimenus
whoops

1616692207
txdv
v0idifyy I thinks for you "Allocator" is obvious, but for others it might be not, maybe you can point to the source code?

1616692349
dutchie


1616694045
v0idify
considering that the OpenSSL CVE(s) that made us reconnect just now are mostly use after frees, what can zig do to prevent this sort of bugs?

1616694328
txdv
Hi guys

1616694650
ifreund
o7

1616695312
v0idify
o7

1616708386
remby
I'm reading some zig code, and I'd like to know what these operators are `.*` and `?*` the first is on a variable, the former is on a import function

1616708394
remby


1616708430
g-w1
.* is a deref of a ptr, ?* is an optional pointer type

1616712896
v0idify
zls can't find the packages under names that are not filenames (ex. "wayland" from zig-wayland)

1616712957
ifreund
zls should run your build.zig to find those, but it's always been kinda flakey for me

1616713073
v0idify
also cImport

1616713085
v0idify
but i suppose that

1616713104
v0idify
that's part of the same system, sorry for the multiple messages

1616713394
ifreund
no, @cImport() is different actually

1616713398
ifreund
zls has no support for it yet

1616715225
v0idify
what function can i use to wait for a file descriptor (async-capable)?

1616715320
v0idify
os.read with a zero buffer?

