1626567464
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
is zig ld.lld intended to be used? https://github.com/ziglang/zig/pull/9407 I thought it was just for internal punting use

1626567470
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but maybe it serves a use case

1626567640
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
linux distro based on zig

1626567641
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
based.

1626570440
h4ze!~haze@cpe-68-174-134-17.nyc.res.rr.com
netsplit?

1626570442
h4ze!~haze@cpe-68-174-134-17.nyc.res.rr.com
bruh

1626570467
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ugly

1626572815
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
was it the right decision to check if zigTypeTag == .Bool and use ! rather than ~ here? https://github.com/ziglang/zig/pull/9408

1626572827
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or am I not aware of some weird c quirk?

1626572836
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or should Sema have a not and a not_bool inst?

1626572891
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
(btw I found this by running the test runner, I had to fix some stuff in codegen.zig and comment out the register_manager tests, but it worked!)

1626572943
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
*ran

1626575909
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
hello

1626575915
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hi

1626575916
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
hello everyone

1626575929
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
hey g-w1 :) i was just talking to you earlier on Github

1626575949
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
i've come here because i think i've found a bug in Zig's LTO support

1626575968
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, cool

1626575984
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
i sent it out on the Matrix channel but it doesn't seem like any of the devs are on there, so i'm going to talk about it here haha

1626576005
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
when `zig cc` is invoked with `-flto` and `-o /dev/null`, it gives a `AccessDenied` error

1626576017
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
when `clang` is invoked with the same parameters, it succeeds

1626576038
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does removing -flto fix it?

1626576042
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
yes, it does

1626576056
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
removing `-o /dev/null` also fixes it

1626576067
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
so both of these options have to be on *at the same time* to trigger the error

1626576125
freshcoffee2!~fresh@user/freshcoffee
hmm not sure it's an `-flto` thing. This also gives me error: `zig cc -c foo.c -o /dev/null`

1626576136
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
same

1626576139
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
hmf

1626576155
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
stacktrace: https://paste.rs/55D

1626576174
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh wait, my errors are messed up as the binaries are old, rebuilding

1626576205
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
odd, it works on my machine

1626576225
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
`zig cc -c main.c -o /dev/null` returns exit code 0

1626576229
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
seems to be related to atomics, so maybe non-deterministic

1626576240
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
where `main.c` is `typedef int x;`

1626576272
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, better error trace https://paste.rs/nmH

1626576345
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
hm

1626576369
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
maybe Zig is trying to somehow evaluate the permissions of the file instead of just writing to it?

1626576432
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
ok, so `zig cc -c main.c -flto -o /tmp/main` works

1626576441
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
but `/dev/null` doesn't work (?)

1626576460
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the error is EACCES

1626576463
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so permission denied

1626576467
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
is the fact that /dev/null isn't a real file tripping up Zig?

1626576470
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does /dev/null have some special perms?

1626576472
freshcoffee!~fresh@user/freshcoffee
locking /dev/null is probably not a good idea

1626576502
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
this is `ls -l /dev/null` for me: `crw-rw-rw-    1 root     root        1,   3 Jul 16 10:31 /dev/null`

1626576510
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
so it should be writeable globally

1626576643
freshcoffee!~fresh@user/freshcoffee
so on macos I get a diff stack trace. But it's still permission denied. And it's here:

1626576645
freshcoffee!~fresh@user/freshcoffee
https://github.com/ziglang/zig/blob/9979741bff5867818e4186348e7aa4e271389317/lib/std/fs.zig#L863

1626576700
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, found the bug

1626576710
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
opening /dev/null with .{ .exclusive = true } breaks

1626576741
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://paste.rs/JP5

1626576746
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and atomicFile does that

1626576798
freshcoffee!~fresh@user/freshcoffee
hmm openDir should be "/dev" right ?

1626576815
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh facepalm

1626576863
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
maybe thats not it then

1626577498
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
wleomce peterhil!

1626577502
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
*welcome sorry

1626578060
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
so this works:

1626578065
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
const std = @import("std");

1626578065
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
const fs = std.fs;

1626578065
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
pub fn main() !void { var f = fs.cwd().writeFile("/dev/null", "hello");

1626578065
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
}

1626578075
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
no error

1626578590
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
hey lockdown_! welcome to #zig!

1626578598
jwinnie_!~jwinnie@096-041-034-224.res.spectrum.com
g-w1: any progress?

1626579041
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no, I can't seem to find anything about it online

1626622510
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I'm trying to switch on an u8[] I read from stdin, but I get "error: invalid switch target type '[]u8'". Is there any way to switch on an u8[]? My code's at https://0x0.st/-Vbk.zig

1626622601
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
use std.mem.eql( instead

1626622610
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you can't switch on slices

1626625336
Nulo!~Nulo@user/nulo
How do I get a random field from an enum? I can't find a way to get an array of all the fields of an enum programatically

1626625398
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
std.meta.fields(

1626625552
Nulo!~Nulo@user/nulo
But it returns EnumField which apparently can only be on comptime

1626625570
Nulo!~Nulo@user/nulo
./random.zig:22:60: error: values of type 'std.builtin.EnumField' must be comptime known, but index value is runtime known

1626625571
Nulo!~Nulo@user/nulo
        const color: Color = colors[prng.random.int(usize) % colors.len];

1626625839
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, just use intToEnum

1626625875
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
@intToEnum(prng.random.int(usize) % numberofenumfields)

1626625913
luuk!~luuk@user/luuk
@intToEnum(T, val) :)

1626625928
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
soon it won't ;)

1626625936
luuk!~luuk@user/luuk
Yeah, going to love that one

1626625949
luuk!~luuk@user/luuk
Hopefully at same time change it to enumFromInt

1626625992
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I wonder if zig fmt could do it automatically

1626626003
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
by inserting @as(T, @enumFromInt(val))

1626626008
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
probably

1626626100
luuk!~luuk@user/luuk
Yeah

1626626175
Nulo!~Nulo@user/nulo
It's not allowing me to do @intToEnum as the random number is usize but it only takes u2 because of the size of the enum

1626626190
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
generate a u2 instead of a usize?

1626626212
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or @truncate it as mod makes sure it won't be out of range

1626626241
Nulo!~Nulo@user/nulo
I mean of course I can truncate it but it feels so wrong, why can't it just be accessed as an array?

1626626264
Nulo!~Nulo@user/nulo
How do I know what size of an int I have to truncate it to?

1626626264
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it probably can, not sure what went wrong

1626626279
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
generating a u2 is probably better

1626626283
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
prng.random.int(u2)

1626626342
Nulo!~Nulo@user/nulo
Yes but if I grow the enum I will have to change it, and I want to avoid having to modify other parts of the code if I add stuff to the enum

1626626352
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I see

1626626360
Nulo!~Nulo@user/nulo
I used an array with all enum values before, that worked fine but I want to avoid it

1626626386
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I think there is a way to get the underlying int value that an enum uses

1626626476
luuk!~luuk@user/luuk
Another option would be to use std.enums.values(EnumType) and then get the enum value by indexing the return of that.

1626626514
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
prng.random.int(std.meta.Int(@bitSizeOf(MyEnum)) probably works

1626627142
Nulo!~Nulo@user/nulo
luuk, that's what I was looking for, thanks

1626627154
Nulo!~Nulo@user/nulo
It works with my initial code

1626627188
luuk!~luuk@user/luuk
You're welcome :)

1626629721
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I'm writing a function that can't return an error but Zig still wants me to handle it, which doesn't make sense. When I do try to make it return an error union, I get 'cannot resolve inferred error set, function not fully analyzed yet' (Code at https://0x0.st/-Vc7.zig )

1626629821
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Is there a way to avoid this or do I have to specify what errors it can return? (Oh, and it's `get_winner` at lines 79/59)

1626629845
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
remove the ! from the return type

1626629908
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
this works for me /shrug https://paste.rs/gdJ

1626629915
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I just had to remove some unused captures

1626630006
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Well, when I remove the !, I get 'error: error is ignored. consider using `try`, `catch`, or `if` '

1626630018
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does the code that I pasted work?

1626630026
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i'm not sure what was not working for you

1626630165
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
When I run your version I get this output: https://0x0.st/-VT-.txt

1626630266
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what zig version?

1626630272
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it works on master

1626630287
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and 0.8.0

1626630510
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I've got 0.8.0

1626630513
luuk!~luuk@user/luuk
I think g-w1 meant you still have to remove the '!' from the code he gave you

1626630522
luuk!~luuk@user/luuk
From the return type of get_winner

1626630562
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
luuk, does my solution work for you?

1626630651
luuk!~luuk@user/luuk
Ah, let me check :)

1626630813
luuk!~luuk@user/luuk
Aaah, found the issue

1626630817
luuk!~luuk@user/luuk
It's `try expect()` :)

1626630846
luuk!~luuk@user/luuk
The error union from the `expect()` call is ignored

1626630864
luuk!~luuk@user/luuk
That, plus removing the '!' from the get_winner return type should do the job, swl

1626630871
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Oh, duh, thanks for the help

1626631089
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
wait, why was it not erroring for me?

1626631175
luuk!~luuk@user/luuk
Did you run main, or the test? :)

1626631267
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, I ran main

1626631843
Nulo!~Nulo@user/nulo
What version of Zig am I supposed to use for this? https://github.com/andrewrk/zig-window

1626631858
Nulo!~Nulo@user/nulo
master and 0.7.1 doesn't work

1626631946
luuk!~luuk@user/luuk
The exact git commit is mentioned in the Readme

1626632083
Nulo!~Nulo@user/nulo
Yes, but I don't know how to find that specific artifact

1626632111
Nulo!~Nulo@user/nulo
Also because it was updated for a later version afterwards

1626632153
luuk!~luuk@user/luuk
You can't, really. You'll have to checkout the zig repository and build from source to build a specific version.

1626632197
luuk!~luuk@user/luuk
We do upload 'nightly' artifacts, but iirc, they are not preserved that long.

1626633290
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
What's the ideomatic way to return a string of variable length from a function? (Like, for example, 'if (condition) "foo" else "spam"')

1626633987
olabian!~olabian@ool-4576796d.dyn.optonline.net
hi, is there a way to check for memory leaks when using functions from @cImport? For example if I'm using curl and I call curl_global_init but not curl_global_cleanup?

1626635064
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
swl: []const u8

1626635776
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
g-w1: Right

1626635781
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Thank you!

1626635789
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
You are welcome!

1626641771
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
Hey everyone (trying to get IRC set up - I just sent a message but I don't think it went through... the experimental logs on https://github.com/ziglang/zig/wiki/Community don't seem to be working)

1626641862
dutchie!~dutchie@user/dutchie
that's the first message i've seen from you

1626641878
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
Thanks for confirming, I'll resend :p

1626641897
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
Hey @andrewrk I have some time to look into the stage2 AIR rework stuff this evening - any suggestions on where to take a look first?

1626643222
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
marler8997_: looks like the logs are down https://marler8997.github.io/zig-irc-webpage/?date=2021-07-18

1626643437
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
LewisGaul: it might be helpful to try to run the test runner, and then fix things from there

1626643472
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I had to comment out the register_manager.zig tests as they were not updated, but ultimately, found https://github.com/ziglang/zig/pull/9408 by doing that

1626643477
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and enable -Dskip-non-native

1626643533
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
What's the command for the test runner? Is it just `zig build test -Dskip-non-native`?

1626643546
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
zig build test-stage2 -Dskip-compile-errors -Dskip-non-native is what I used

1626643805
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
thanks

1626643815
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
fixing the register manager tests might also be easy, not sure

1626645716
olabian!~olabian@ool-4576796d.dyn.optonline.net
is there a way to turn a: const str = "hi"; into a [*:0]const u8?

1626646497
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
    const a: [*:0]const u8 = "hi";

1626646720
olabian!~olabian@ool-4576796d.dyn.optonline.net
g-w1: yes, that's what I'm doing right now but I'm wondering if there's something like &(str) or something

1626646748
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it should just coerce...

1626646756
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
@as([*:0]const u8, str)

1626646793
olabian!~olabian@ool-4576796d.dyn.optonline.net
so that shouldn't make any copies

1626646799
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no

1626646819
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the type of a string literal is *[N:0]u8 iirc

1626646829
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
then that can coerce to []const u8, or many other things

1626646858
olabian!~olabian@ool-4576796d.dyn.optonline.net
I see, and what about passing them into a function, I'm assuming if I pass str it would make a copy?

1626646898
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it would not.

1626646902
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it would just copy the pointer

1626646911
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
at least I think.

1626647186
ifreund!~ifreund@user/ifreund
nope, no copies there

1626647220
ifreund!~ifreund@user/ifreund
and there's generally no need to turn a `const str = "hi"` into a [*:0]const u8, it will coerc

1626647223
ifreund!~ifreund@user/ifreund
e

1626647299
olabian!~olabian@ool-4576796d.dyn.optonline.net
ifreund: it gives me an error if I try that: about support for C ABI

1626647388
olabian!~olabian@ool-4576796d.dyn.optonline.net
the @as([*:0const u8, str) doesn't seem to be working either

1626647458
olabian!~olabian@ool-4576796d.dyn.optonline.net
error: expected type '[*:0]const u8', found '[]const u8'

1626647471
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
how do you define str?

1626647526
olabian!~olabian@ool-4576796d.dyn.optonline.net
const str1 = "hello"; and then I pass that to a function myfunct(str: []const u8)

1626647549
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that is the problem, you loose information when coercing it to a []const u8

1626647565
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
make the param [*:0]const u8, and then it will work

1626647604
olabian!~olabian@ool-4576796d.dyn.optonline.net
oh I see

1626647611
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or even a [:0]const u8 will work

1626647648
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
which may be better for use from zig as it has a length, before passing to c if you need to use it from zig

1626647682
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok if I use the [:0] I can't just use it, I will have to coerce it then it seems

1626647865
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1626647888
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
well, the .ptr field of a [:0]const u8, should give [*:0]const u8, if I am not mistaken

1626647955
ifreund!~ifreund@user/ifreund
[:0]const u8 coerces to [*:0]const u8

1626647969
ifreund!~ifreund@user/ifreund
but yes the .ptr field also has type [*:0]const u8

1626647983
olabian!~olabian@ool-4576796d.dyn.optonline.net
oh very nice that works

1626648000
olabian!~olabian@ool-4576796d.dyn.optonline.net
if I do it without the .ptr it complains about C ABI

1626648013
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmmm

1626648018
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
may be a bug with extern functions

1626648054
ifreund!~ifreund@user/ifreund
what's the type fo the extern function definition?

1626648074
ifreund!~ifreund@user/ifreund
is it a [*c] pointer? cause [:0]const u8 won't coerce to that

1626648083
olabian!~olabian@ool-4576796d.dyn.optonline.net
 TODO: support C ABI for more targets. https://github.com/ziglang/zig/issues/1481

1626648134
olabian!~olabian@ool-4576796d.dyn.optonline.net
i'm not sure, it's the parameter field: https://linux.die.net/man/3/curl_easy_setopt

1626648229
ifreund!~ifreund@user/ifreund
"That parameter can be a long, a function pointer, an object pointer or a curl_off_t, depending on what the specific option expects."

1626648231
ifreund!~ifreund@user/ifreund
great

1626648282
olabian!~olabian@ool-4576796d.dyn.optonline.net
I'm using it to set the URL so it should be a char*, I guess

1626648288
olabian!~olabian@ool-4576796d.dyn.optonline.net
but I have no idea how it is implemented

1626648324
ifreund!~ifreund@user/ifreund
I assume it's using varargs, but you'd have to look a the function signature in the code to know for sure

1626648343
ifreund!~ifreund@user/ifreund
and since it's using varargs zig won't know what type to try and coerce your thing to

1626648349
ifreund!~ifreund@user/ifreund
so you need to do the coercion manually

1626648412
olabian!~olabian@ool-4576796d.dyn.optonline.net
oh I see, that makes sense

1626649042
mountaingoat!~mountaing@user/mountaingoat
i'm running into this "instruction does not dominate all uses" LLVM error https://github.com/ziglang/zig/issues/5695 when writing a closure in Zig, is there a known work around?

1626650305
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
@g-w1 I'm taking a look at a test failure from `test.zig` calling `comp.update()` (L920) where an unreachable is hit in `Compilation.zig` (L2022) - just checking we're not doing overlapping work?

1626650323
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, that is the next one I got up to

1626650328
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you applied my patch?

1626650337
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
yep your patch worked for me for the CBE

1626650356
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
is there a way to run specific tests so we can look in different areas?

1626650383
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
comment out the others?

1626650408
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
fair enough! I'll do that with the one I mentioned above then if you're already looking at it

1626650420
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I'm gonna be doing other things, so don't worry about stepping on my toes

1626650432
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
ok sure, will take a look then

