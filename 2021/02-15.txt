1613347300
zags
not gonna lie, i miss smart pointers :) i think someone had been pondering about that for zig, but not sure how well that could work without destructors to release at end of scope/lifetime

1613353817
kbd
Dumb question: How do I compare a null-terminated string? `std.mem.eql(u8, os.argv[1], "...")` doesn't work, what's the right type over u8?

1613353993
daurnimator
kbd: usually get a null terminated slice first. see std.mem.spanZ

1613354143
kbd
that works, thanks. I don't understand why though. Most of my "wasted" time learning Zig is just trying to get the types of slices/arrays/strings right.

1613354459
daurnimator
in C when you get it wrong it silently works except you have a security hole. zig

1613354625
daurnimator
kbd: you may also use `std.cstr.eql` instead of `std.mem.eql`

1613354643
daurnimator
uh,. std.cstr.cmp

1613355403
kbd
thanks again daurnimator

1613358262
kbd
thanks again daurnimator

1613358277
kbd
whoops alt tab + up arrow enter went to the wrong window ü§¶‚Äç‚ôÇÔ∏è

1613363623
braket
Is there a name for the data types that can be constructed with `T{}`? Trying to update some docs but I'm blanking on what to call them.

1613363742
g-w1
struct

1613363757
g-w1
b

1613363760
g-w1
sorry

1613366235
kbd
What's the stance on high level command line argument parsing in the stdlib? Just needs to be written, or out of scope?

1613366306
g-w1
zig-clap is out there, although there seems to be a sentiment that you should roll your own out of simplicity

1613366962
braket
g-w1 arrays, enums, and unions also use T{} though

1613367570
tdeo
i don't think enums do

1613367819
braket
ah, you're right, not enums

1613381408
zags
is there a way to build types in a staggered fashion at compile time? For instance, call various functions that add fields to a struct to produce the final type.

1613381450
ikskuh
heya o/

1613381466
ikskuh
zags: you can build yourself a struct builder :)

1613381478
ikskuh
shouldn't be that much of work actually

1613381489
ikskuh
nice thing with comptime is that you can just append stuff to slices with ++

1613381539
ikskuh
struct { fields: []std.meta.TypeInfo.StructField, fn append(self: *@This(), std.meta.TypeInfo.StructField) { ‚Ä¶ } fn finalize(self: @This()) type { ‚Ä¶ } }

1613381551
zags
what's the ingredients of a struct builder? Note that this is exposed to the user side, so x.a().b().doit(), so only after b() is the type known

1613381568
zags
(x is a type, not a runtime variable)

1613381601
zags
aha, std.meta have the ingredients, interesting

1613381729
zags
type { ‚Ä¶ }, how does the actual finalization step work?

1613381737
ikskuh
@Type()

1613381741
ikskuh
std.builtin, sorry

1613381744
ikskuh
not std.meta

1613381787
ikskuh
note that a builder interface isn't typical zig style

1613381825
zags
I'm disregarding that in this case

1613381887
zags
I have a functional-style streams api going, and those typically have fluid api style, which I like so that's what'll be :)

1613381930
zags
Building the stream pipeline at compiletime will make it completely free of heap allocations, so I wanna look into that.

1613382155
ikskuh
zags

1613382156
ikskuh
have fun

1613382198
zags
ikskuh: that's pretty darn nice, thanks!

1613382211
ikskuh
also straightforward ;)

1613382220
zags
Zig is awesome

1613382231
ikskuh
yes.

1613384820
ikskuh
self-promotion:

1613384835
ikskuh


1613384836
ikskuh
alternative

1613384862
tane
ok nice, thank you

1613384882
tane
one other Q: how to initialize a null-slice? something where .ptr may be garbage, but at least .len = 0

1613384895
tane
I can always make it =undefined, then set .len afterwards. is there a better way?

1613384905
ikskuh
const slice: []const u8 = &[_]u8{};

1613384932
tane
thanks

1613384945
tane
I've invested a bit more time getting into zig, and it's quite fun! :)

1613385048
ikskuh
cool!

1613403677
g-w1
ikskuh, is there a way to use with with a defer, like deniting a withed variable?

1613406020
ikskuh
g-w1: no, it's intentionally not included to keep it simple.

1613407849
g-w1
ok

1613418888
tane
hm, var rng = std.rand.Pcg.init(42).random;

1613418937
tane
that works, but reads some stack-garbage due to @fieldParentPtr and there seems no easy way to actually detect this misuse

1613418981
ifreund
tane: yeah, this is known design flaw, though there is an accept open propsal to fix it

1613418992
ifreund
it just hasn't been implemented yet

1613418997
ifreund


1613419011
tane
ifreund, thanks for the pointer

1613425481
marijnfs
whats up in zig land?

1613425567
ikskuh
hey marijnfs o/

1613425631
ifreund
o7

1613425681
marijnfs
no recent showtime?

1613425694
marijnfs
do functions types yet

1613425702
marijnfs
whatsup

1613425712
marijnfs
o\

1613425731
g-w1
showtime is tmrw

1613425748
marijnfs
sweet

1613425753
marijnfs
topics?

1613425845
g-w1
Year of the Linux Gaming Desktop

1613425847
g-w1


1613427105
andrewrk
marler8997, I want to make sure to give you the spotlight you deserve in this talk ^ :)

1613427120
andrewrk
tbh I haven't started on the talk yet tho, I better get on that

1613427452
marler8997
spotlight huh?

1613427841
andrewrk
yeah remember when we were going back and forth on the linux binary to make the vulkan triangle?

1613427845
andrewrk
that's what the talk is about

1613427908
marler8997
oh cool, I guess I'm gonna be famous now, I'll be sure to get an agent and I'll try not to forget my now peon friends

1613429434
andrewrk
lol I think this is gonna get 4K views, tops

1613430470
zags
pub fn something(slice: anytype) std.meta.Child(@TypeOf(slice))

1613430554
zags
is that supposed to work?

1613430563
ikskuh
yep

1613430572
ikskuh
looks fine

1613430623
zags
ok, must be just a bad compiler error then, it claims I'm returning "slice"

1613430631
zags
probably have some error elsewhere

1613430637
ikskuh
code snippet?

1613430672
zags
nah, it's a big mess, i'll try to sort it knowing it's supposed to work, will make a testcase if I can't :D

1613430860
ikskuh
are you maybe passing in a string?

1613430958
ikskuh
something("foo")

1613431602
zags
oof, was returning the wrong thing, was just a confusing error message.

1613431913
zags
out of curiosity, is it safe, like in c++, to self destruct? Basically alloc.free(self). Any by safe, I mean under the assumption the struct was allocated with the same allocator haha.

1613431941
ikskuh
sure

1613431945
ikskuh
there is no

1613431954
ikskuh
no concept of "self"

1613431964
ikskuh
there is only functions, arguments and values :)

1613431978
zags
yeah, no hidden machinery at all, should be safe then

1613431980
ikskuh
"self-destruct" is actually pretty common over all stdlib

1613432029
zags
I see, good to know

1613432578
posixlix
Hey everyone! Is there a well-defined way of accessing a tagged union's tag and payload? (Basically this issue,

1613432645
posixlix
I made a hack that allows me to do the aforementioned, but it would very quickly become invalidated with any change to tagged unions' layout and probably doesn't account for some edge cases anyway.

1613432996
posixlix
(To clarify, I want to initialize a tagged union with a runtime-known tag value)

1613433098
posixlix
e.g this:  `var val: Foo_Union = undefined; val.tag (this doesn't work) = my_tag_value_that_i_got_from_somewhere;`

