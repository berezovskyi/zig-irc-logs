1624756187
freshcoffee!~fresh@user/freshcoffee
mla: can't say if it's "preferred" or not, but there is a pretty solid example of pollfd used here:

1624756189
freshcoffee!~fresh@user/freshcoffee
https://github.com/ziglang/zig/blob/2ac769eab9b7dba4cd38e5de01dfa6400f7ebd5b/lib/std/child_process.zig#L190-L195

1624774896
anb!~anb@user/anb
Hi, is there any way to field names in an enum to its corresponding upper case string?

1624774923
anb!~anb@user/anb
*convert field names

1624775075
anb!~anb@user/anb
I'm trying to implement a format function, so instead of "MyEnum.one", I'd like to have "ONE".

1624776022
freshcoffee!~fresh@user/freshcoffee
anb: @tagName() to get as string, and pass that to std.ascii.upperString() with a buffer

1624776138
freshcoffee!~fresh@user/freshcoffee
you could even add a method to the enum like so:

1624776144
freshcoffee!~fresh@user/freshcoffee
https://zigbin.io/575dba

1624776599
anb!~anb@user/anb
Thank you, freshcoffee. I wonder is there any way to do it at comptime?

1624776974
anb!~anb@user/anb
and I don't see std.ascii.upperString(), only a version which requires allocation.

1624777180
freshcoffee!~fresh@user/freshcoffee
I had a little trouble getting this to work so others could probably improve on it, but this seems to work at comptime: https://zigbin.io/6cce80

1624778388
anb!~anb@user/anb
I feel that this has to be implemented in builtins

1624791462
bw!sid2730@user/betawaffle
are there any allocators that work at comptime? maybe FixedBufferAllocator? 

1624791727
ifreund!~ifreund@user/ifreund
bw: no not currently, though there is an issue tracking that use case

1624791767
ifreund!~ifreund@user/ifreund
note that the main reason for that is so that the same code can work at comptime at runtime, you can already do anything you'd normally need an allocator for at rumtime with zig's current comptime semantics

1624791789
ifreund!~ifreund@user/ifreund
notably, returning a pointer to stack memory is fine at comptime

1624796598
bw!sid2730@user/betawaffle
what's the current status of `@import("builtin")` vs `std.builtin`?

1624796705
ifreund!~ifreund@user/ifreund
bw: it's a bit of a mess, but if the thing you need is available from @import("builtin") you should use that

1624796731
ifreund!~ifreund@user/ifreund
std.builtin re-exports some of @import("builtin") but those re-exports are deprecated and will be removed eventually

1624796738
bw!sid2730@user/betawaffle
where do i even see what is available from that? there used to be a cli command

1624796747
ifreund!~ifreund@user/ifreund
zig build-exe --show-builtin

1624796811
ifreund!~ifreund@user/ifreund
the end goal here is std.builtin being only type definitions and @import("builtin") providing the information about the current compilation

1624796842
ifreund!~ifreund@user/ifreund
and one or both will almost certianly be renamed at some point to reduce the confusion

1624798298
bw!sid2730@user/betawaffle
is there any way to annotate struct fields with extra comptime metadata yet? (like attrs in rust, struct tags in go, etc.)

1624798826
ifreund!~ifreund@user/ifreund
hmm, if I understand those rust/go features correctly there's no direct equivalent. Zig is certainly flexible enough to encode comptime metadata in other ways though

1624798856
ifreund!~ifreund@user/ifreund
for example, add a constant to your struct T which maps from std.meta.FieldEnum(T) to some arbitrary data 

1624804741
noam!~noam@104.232.42.247
http://pixelhero.dev/tmp/4.c â˜º

1624809755
Pistahh!~pistahh@user/pistahh
could someone pls show me an example for a variable assigned to an fn defined inside a struct? something like var fun = struct { ... fn foo() {...} }.foo ?

1624809898
ifreund!~ifreund@user/ifreund
yep, that should work: const my_local_fn = struct { fn foo() i32 { return 42; } }.foo;

1624819672
bw!sid2730@user/betawaffle
is there some better alternative to `@ptrCast([*]T, @alignCast(@alignOf(T), ptr))` somewhere in std?

