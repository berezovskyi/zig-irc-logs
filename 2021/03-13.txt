1615593612
dimenus
*magic

1615594135
qbit
i have yet to experience the magic directly :D

1615594150
qbit
mac m1 and openbsd (which has a wrapper / some patches that are needed)

1615594210
mikdusan
which version of openbsd?

1615594232
qbit
snapshots

1615594242
qbit
(0.8.0-somethin has landed in ports)

1615594256
mikdusan
my recent bouts with openbsd building llvm (not with bootstrap but my own script),

1615594300
mikdusan
(with llvm 12.0.0-rc3)

1615594339
mikdusan
is that system linker (i think it's lld) borks on a couple of really really large files and emits them without symbols

1615594344
qbit
oo  - ya i don't know of llvm 12 on openbsd

1615594361
qbit
11 is in snapshots

1615594385
mikdusan
so the workaround was to force cmake to use -O3 which caused binary size to reduce  and those same files became ok

1615594398
qbit
oh whoa

1615594406
qbit
crazy

1615594423
mikdusan
and why? because cmake is system patched. to NOT OPTIMIZE. Release does not use any -O option at all

1615594647
mikdusan
here's what I ended up doing on openbsd to build llvm12.

1615594714
qbit
cool

1615594740
mikdusan
dimenus: how far did you get?

1615594742
qbit
are you on snapshots?

1615594751
mikdusan
qbit: nah just 6.8

1615595449
g-w1
TheLemonMan: ah thanks for the patch :)

1615595642
dimenus
mikdusan: still working on building llvm for serenity

1615595650
fengb
Why does it not optimize by default?

1615595656
dimenus
i should probably just try making a static elf binary and copying to the image

1615595687
mikdusan
fengb:

1615595700
mikdusan
have you ever? I've never!

1615595797
dimenus
the modifications to llvm itself for a new target are minor, but cmake on the other hand....

1615596532
andrewrk
mikdusan, have a look at tools/update_clang_options.zig

1615596589
mikdusan
andrewrk: thanks found it. working on a patch to treat `-dynamiclib` in same manner as `-shared`

1615596640
andrewrk
mikdusan, that should be a very simple patch, adding another array element to known_options

1615596646
mikdusan
yup 5 liner

1615596657
mikdusan
it's more testing and putting the before/after in github comments :P

1615596663
andrewrk
:)

1615596783
mikdusan
wha hey now pics :)

1615596963
andrewrk
hmm this is slightly worse:

1615596979
andrewrk
the part where it does not improperly wrap is nice though :)

1615597296
Snektron
How far along is the zig cc/zig c++ part of the llvm12 branch? I need some c++20 features on a remote machine which doesn't have a capable compiler (and i'm not authorized to install one), so zig is probably the easiest option.

1615597504
andrewrk
Snektron, let me sync master right now. afaik it's working fine. what target(s)?

1615597516
Snektron
x86

1615597557
Snektron
(_64)

1615597645
andrewrk
Snektron, ok master is merged in. it should work flawlessly, let me know if you run into anything

1615597789
Snektron
Alright, thanks. I need a musl version of the llvm12 libraries in order to build a musl version of zig, right?

1615598021
andrewrk
no

1615598033
andrewrk
let me sync the zig-bootstrap repo and you'll have an easy time I think

1615598056
Snektron
That was my guess as well :) thanks for syncing for me

1615598059
andrewrk
np

1615598669
andrewrk
mikdusan, you're only supposed to edit clang_options_data.zig indirectly, by modifying tools/update_clang_options.zig

1615598752
mikdusan
ah ok will fix

1615598806
daurnimator
TIL MREMAP_MAYMOVE is a thing

1615598901
andrewrk
Snektron, zig-bootstrap, master branch, is what you want I think

1615598909
Snektron
thanks a lot

1615598912
andrewrk
np

1615598966
g-w1
so zig-bootstrap has llvm12 but zig has llvm11?

1615599007
andrewrk
g-w1, llvm12 branch has llvm12. zig-bootstrap master branch tracks zig llvm12 branch and llvm release/12.x branch

1615599123
g-w1
ah

1615599390
mikdusan
heh byte-for-byte identical :)

1615600966
andrewrk
nice :)

1615601200
mikdusan
it occurs to me all this .td and tbl-gen stuff... if one were to write llvm in zig today... that's all comptime stuff

1615601261
mikdusan
but if really really heavy, yeah I get it might be preferable to pregen

1615601812
andrewrk
yep

1615602451
Snektron
hm, i'm running into a problem. I've compiled everything using zig-bootstrap for target native-native-musl with mcpu=native also.

1615602470
Snektron
Zig cc now reports native-native-unknown-musl as target, and some component of my build system (meson) isn't able to deal with that.

1615602558
Snektron
It seems meson passes `-E -dM -` to `zig cc`, and it indeed reports that as problematic

1615602606
mikdusan
error: macho does not support linking multiple objects into one

1615602637
andrewrk
mikdusan,

1615602655
andrewrk
Snektron, what is the problem? zig cc not handling those cli args correctly?

1615602705
Snektron
I'm not sure whats the desired result here honestly wrt to cross compiling. Setting CXX to `zig c++ -target x86_64-linux-musl` instead of `zig c++` makes everything work.

1615602732
daurnimator
oh that reminds me; we need to add support for x86_64-v2 and v3

1615602747
daurnimator
or at least figure out our equivalents

1615602759
Snektron
if i run `echo | zig cc -E -dM -` on my local build everything works, but the same doesn't work with the native-native-unknown-musl version.

1615602773
mikdusan
daurnimator: is that a clang or gcc or both thing?

1615602780
daurnimator
botg

1615602782
daurnimator
both

1615602804
andrewrk
daurnimator, that's already supported with -mcpu=x86_64_v2

1615602845
mikdusan
i was just looking at llvm triples source code and x86_64_v2 is not an "arch"

1615602914
andrewrk
Snektron, what's the meson error message?

1615603068
Snektron
Note that that error is generated by `zig cc -E -dM -`

1615603127
mikdusan
i don't think "native" is understood by clang. is meson passing it because you told it to?

1615603184
Snektron
No, this is `CXX="zig c++" meson ..` with zig cc obtained from zig-bootstrap with `build native-native-musl native`

1615603201
Snektron
zig cc -> zig

1615603262
mikdusan
oh so when the file is read from stdin, we're not converting the target triple

1615603278
daurnimator
andrewrk: okay cool :)

1615603351
Snektron
Im not sure the file being read in from stdin has anything to do with it, its invoked without stdin

1615603359
andrewrk
Snektron, can you run `ZIG_VERBOSE_CC=1 zig cc -E -dM -` with the broken build?

1615603379
andrewrk
I want to see what we're passing to clang

1615603381
Snektron
No output

1615603385
andrewrk
give it a ctrl+d

1615603393
Snektron
(Apart from the error message, that is)

1615603432
Snektron
This is all there is

1615603545
mikdusan
put a `-v` on the zig cc command line

1615603627
Snektron
Seems like the rc3 version of llvm is still missing a feature required for my project, though master seems to contain it according to godbolt. I think its a problem in libcxx, would i just be able to update the libcxx sources in the zig directory to master and expect it to work?

1615603720
mikdusan
Snektron: and what I saw before is if I switched from `-E ... -` to `-E ... empty.c` a valid -triple is sent to cc1

1615603748
Snektron
yep, it seems you're right

1615603840
andrewrk
is zig passing 'native-native-unknown-musl' to llvm or clang? we have a function for passing a proper llvm triple and it won't have "native" in it

1615603867
andrewrk
I want to know where that 'native-native-unknown-musl' string is getting generated / passed to llvm/clang

1615603887
mikdusan
all we see is the cc1 so can't tell

1615603918
mikdusan
wait. strace. lol

1615603927
mikdusan
oh that won't work. embedded.

1615603934
andrewrk
it will work

1615603945
andrewrk
Snektron, re: libcxx that is worth a try

1615604003
Snektron
Alright, will try that tomorrow.

1615604777
andrewrk
Snektron, I have a workaround for you - in build script change   -DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET"  to x86_64-linux-unknown-musl

1615604798
andrewrk
but we should really find out where zig is incorrectly allowing llvm to use this value instead of overriding it

1615604850
Snektron
Especially strange since its only the case when reading from stdin. At least it narrows the places to look.

1615604870
andrewrk
zig unconditionally passes -target. I think it's an llvm bug

1615604881
andrewrk
but I expect the workaround to work

1615604919
Snektron
Anyway thanks for the workaround. Ill also try that tomorrow, its getting late

1615605099
mikdusan
go go zig1.o

1615605450
mikdusan
punt_to_clang

1615606181
mikdusan


1615606263
mikdusan
exits before nativeTargetInfo is used and all that jazz

1615606766
andrewrk
ah yep there it is

1615606785
andrewrk
so that still needs to do the logic from

1615607831
mikdusan
looking into it. tricky. -target can come before -E or after.

1615609082
mikdusan
heh when drone ci times out at 2 hours:

1615609085
mikdusan
docgen example code 233/267...OK

1615613306
andrewrk


1615613382
mikdusan
not highlighting

1615614106
mikdusan
oh hah press-share-button

1615614114
mikdusan
that is nice

1615614196
mikdusan
I wish github has a selective highlighter for syntax-colored langs. tired of overloading `diff` and losing subject syntax colors

1615614664
mikdusan
andrewrk: #8232 is pr for `zig cc -E -` bug with Snektron; was kind of hoping it would be fewer lines :(

1615643978
s-ol
is there any way to generate functions as decls in a struct (at comptime)?

1615644021
s-ol
I want to wrap a C library that wraps C++ code. It has lots of struct types that contain function pointers (which are optional when cImport'ed) in different sub-structs

1615644111
s-ol
I want to generate a wrapper-type around one such struct that lifts up that creates one decl-function for each vtable-field that is a function-pointer. The decl-function should then delegate to the vtable-fp

1615644211
s-ol
I can use @typeInfo() to look into the vtable and get the fps and their types, but can I even declare functions? Do I need to generate zig code in a separate build step and then import it in a later one to make this happen?

1615644333
ifreund
I think you would need

1615644376
ifreund
I bet there's another way to achieve what you want though. Code generation in a build step would certainly work but I'm not sure it's necessary

1615644456
ifreund
s-ol: is the issue just that the function pointers are optional so they aren't very ergonomic to call directly?

1615645020
s-ol
ifreund: that, and there are two layers of C pointer-nesting to get to them

1615645096
s-ol
the base type is struct{ vtable: [*c]struct{ IfaceA: [*c]struct { method: ?fn(...), ... }, IfaceB: [*c]struct { ... } } }

1615645189
s-ol
ah, I didn't know #6709 wasn't implemented, that explains what I hit the other day doing something simpler. So this kind of type-generation is a nogo currently then

1615645602
ifreund
s-ol: what library is this out of curiousity?

1615645643
s-ol


1615645669
s-ol
they have a C interface, but its built on vararg-defines which zig doesn't translate

1615645686
s-ol
the methods are "wrapped" like this:

1615645695
s-ol
#    define IEngineFactoryVk_CreateDeviceAndContextsVk(This, ...) CALL_IFACE_METHOD(EngineFactoryVk, CreateDeviceAndContextsVk, This, __VA_ARGS__)

1615645746
s-ol
#    define CALL_IFACE_METHOD(Iface, Method, This, ...) (This)->pVtbl->Iface.Method((I##Iface*)(This), ##__VA_ARGS__)

1615645788
s-ol
both macros aren't translated, so I'm just left with the base struct type (the "This")

1615646229
s-ol
My first thought was just to make a proper C wrapper with a header file, but there's no easily machine-readable info about arguments and argument-types, so zig's cImport is actually the best starting point I have atm

1615646605
ifreund
hmm, yeah I see the problem

1615649391
s-ol
going down the code-gen route, whats a good way to replace the module name in an @typeName() like "[*c].cimport:3:11.struct_IRenderDevice" with a known constant?

1615649414
s-ol
e.g. here I would like to replace '.cimport:3:11' with just 'c' and emit a 'const c = @cImport...' above

1615649524
s-ol
what are the :3:11 there? it looks like a position in a file but they are all the same

1615650435
ifreund
s-ol: I think that's the location of the @cImport() in your zig file

1615650449
ifreund
s-ol: also one workaround to avoid the codegen I thought of, this should be possible:

1615650496
ifreund
fn call(self:*IEngineFactoryVk, method: Method()) (function pointer type)

1615650542
ifreund
Method would be an enum of all the methods of the interface

1615650559
ifreund
and the function pointer return type would be determined at comptime based on that enum

1615650586
ifreund
usage would look like factory.call(.create_devices_and_contexts)(arg1, arg2)

1615650598
ifreund
not ideal, but maybe better than codegen?

1615650664
ifreund
s-ol: also with regard to the cimport type, struct_IRenderDevice would be what you actually use in code

1615650678
ifreund
the line numbers are just for the compiler error message since type names may not be unique

1615651395
ifreund
actually, translate-c should generate an alias for the type so just IRenderDevice should work

1615651694
mps
is it possible to build zig 0.7.1 without some targets (hexagon in my current case) and how?

1615652417
s-ol
ifreund: that sounds comfortable enough actually, i will give it a try

1615656752
txdv
Can I comptime read a file, parse the json and embed the values into my binary?

1615656817
ifreund
txdv: @embedFile() will give you the file contents as bytes at comptime

1615656820
ifreund
so yes

1615656894
ifreund
as for parsing the json at comptime, that's actually the example on the homepage:

1615656901
txdv
This is crazy, I have seen so many times when people generate C code from XML or another annotation language, where they have listed for example OP CODE of their virtual machine and in zig it seems like you can do that within zig

1615656928
txdv
That example is comptime?

1615656954
txdv
O, since everything is just an expression it can actually do that

1615656979
ifreund
txdv: all global variables must be initialized at comptime

1615657013
ifreund
so yeah the json parsing in that example happens at comptime

1615660188
dimenus
the simplicity you get from everything being the same language cannot be overstated

1615661503
ugla
I was reading about a new Rust feature (const generics) and tried it in Zig, and it just worked. I also tried some of the planned future features to expand on const generics, and that also worked.

1615661533
andrewrk
haha

1615661536
ugla
I like Rust for some things, but it's so sweet how a few carefully chosen features can replace a whole ton of them.

1615661541
andrewrk
comptime is a really nice language simplification

1615661547
ugla
Yeah :)

1615661691
dimenus
andrewrk: i submitted a very small pr for zig-bootstrap fyi, just adding a line to cmake. I was unable to get llvm12 to build when my host had llvm11

1615661702
dimenus
it matched the wrong llvm-config

1615662022
andrewrk
dimenus, hmm interesting. we're actually wanting cmake to hit the last block in the else-if chain tho for the zig-bootstrap case

1615662162
andrewrk
we might need another cmake option to force it

1615662202
dimenus
andrewrk: in this case i was building native baseline so it triggered the native case rather than the last else block

1615662211
andrewrk
yeah I see

1615662246
dimenus
another cmake option is probably better

1615662271
yyp
I think it should be submitted to upstream ziglang/zig repo instead of zig-bootstrap which just vendors it

1615662275
andrewrk
dimenus, do you mind handing this off to me and I solve it a different way?

1615662282
andrewrk
thanks for the initial investigation :)

1615662293
dimenus
andrewrk: not a problem

1615662309
dimenus
i figured it might not be the most optimal solutoin and might just start the conversation

1615662316
dimenus
*solution

1615662318
andrewrk
yeah you did the hard part already

1615662434
dimenus
yyp: understood, i thought about that but this is an interesting case since the zig folder isn't a submodule, its just a specific snapshot in time

1615662582
yyp
Yeah, that's werid. Submodules do the same (snapshot in time)

1615662775
dimenus
true

1615662920
andrewrk
dimenus, mind testing this for me?

1615665743
mps
andrewrk: sorry for impatience but have you seen my question above, i.e 'is possible to build zig 0.7.1 without some targets (hexagon in my current case) and how?'

1615665782
mps
people on alpine waits and asks about 3 months for zig 0.7.1, when it will be upgraded

1615665873
mps
llvm11 on alpine disabled hexagon target because some tests failed on some arches

1615666013
andrewrk
since a primary use case of zig is cross compiling, you have to patch/fork zig if you want to disable targets. it's not officially supported

1615666059
mps
ah, ok. will wait few days, maybe someone will fix llvm in meantime

1615666107
mps
if not, patch is only option

1615666151
mikdusan
andrewrk: wrt #8218, what is the goal of -fcompiler-rt; to resolve what is

1615666199
mikdusan
I slapped together a "_ = @import("compiler_rt.zig") thing in start.zig, based on a new builtin.embed_compiler_rt and it works, but it

1615666215
yyp
mps: how did you even get LLVM 11 on Alpine?

1615666276
ifreund
uh, alpine has an llvm package?

1615666292
yyp
Yes but it only gives llvm10

1615666299
ifreund


1615666299
yyp
Even on edge I think

1615666303
yyp
wut

1615666334
yyp
Looks like my apk configuration got messed up and it didn't find it ¯\_(ツ)_/¯

1615666379
mps
yyp: I didn't, some other developer made it and for long time, from llvm3 iirc

1615666417
mps
yyp: sorry, misunderstood your question

1615666441
mps
llvm11 is pushed last night

1615666456
yyp
that was too late

1615666530
mps
heh, Date:   Sat Mar 13 09:22:44 2021 +0100

1615666536
mikdusan
andrewrk: here's where I am at; if this is wrong approach let me know :)

1615666537
mps
git commit

1615666539
mikdusan


1615666609
andrewrk
mikdusan, interesting idea, doing it with start.zig. So let's break this problem down:

1615666638
andrewrk
when building a static library, -fcompiler-rt means there should be a compiler_rt object inside the static archive

1615666662
mikdusan
and 100% syms ?

1615666663
mps
yyp: no, sorry, date is  Fri Mar 12 22:51:34 2021 +0100

1615666675
andrewrk
note that we build it with -ffunction-sections so that the linker can strip unused functions, and we also export all the symbols weak, so that someone can override any of the symbols if they want to

1615666717
mikdusan
yup with you so far

1615666757
andrewrk
for ELF, LLD actually supports linking two object files together into one. we currently take advantage of that right now. this is nice because the -ffunction-sections applies only to compiler_rt and not the rest of the zig code

1615666821
andrewrk
for the use case of build-obj combined with -fcompiler-rt, likely the situation is that the user is plugging zig into an existing build system, and perhaps a different linker. they just want the .zig code to work, which requires compiler-rt functions

1615666863
andrewrk
ideally the unused functions would get stripped, but if that's not possible, we'd rather have them all than none

1615666906
mikdusan
ok how about this. do we have ability at comptime to export vs. not export

1615666915
andrewrk
yes

1615666936
andrewrk
but we don't know until LLVM's optimizer finishes running (at the very end) what compiler_rt functions we need

1615666946
mikdusan
effen llvm.

1615667061
mikdusan
what's an example code path I can use in .zig to force llvm to need a compiler_rt sym?

1615667110
andrewrk
target a 32 bit architecture and do multiplication on a u64

1615667139
mikdusan
ok. I'll tinker with this a bit

1615667194
andrewrk
I think the null hypothesis here is to have -fcompiler-rt used with build-obj to, in stage1, do the equivalent of `_ = @import("compiler_rt")`

1615667245
andrewrk
then we would do that for non-ELF targets

1615667728
andrewrk
mikdusan, btw thanks for taking a look into this :) I happen to know rtfeldman - the one interested in this working - and he's working on an interesting project that I think will be announced soon, rumor has it there is some zig powering it :)

1615667758
mikdusan
nice

1615668456
andrewrk
mikdusan, also thanks for #8232 - give me a bit of time to look into whether we want to try to go through the rest of addCCArgs as well, maybe punt_to_clang would have other issues as well

1615668514
andrewrk
we might need to make the control flow go through the main way that clang is invoked

1615669040
mikdusan
sure. #8232 smells for sure. if you want the control flow reworked let me know.

1615669251
andrewrk
mikdusan, I have another approach for you to try- punt_to_clang is only supposed to be called for trivial stuff like --help and "no input files"

1615669275
andrewrk
I think all we need to do is adjust the logic that detects if there are no input files to include `-` as counting as an input file (stdin)

1615669292
mikdusan
ok so let it fall thru and hit the cases below. got it.

1615669300
andrewrk
then `clang_preprocessor_mode = .stdout` happens and I think everything else will work correctly

1615669318
andrewrk
because we already have the "passthrough_mode" concept, which will be enabled in this case

1615671942
dimenus
andrewrk: will do

1615671975
andrewrk
dimenus, hold on I already found a problem and fixed it and am pushing the fix

1615672057
andrewrk
dimenus, pushed. I'm pretty sure the issue is solved now

1615672148
dimenus
andrewrk: sounds good, thanks for your help

1615672228
andrewrk
np, thanks for the initial exploration

1615678130
aconbere
Hi! I'm new to Zig and wanted to try out some network programming. I figured I would just do some simple open socket, read bytes, write bytes stuff to get a feel for the language. I saw that zig has the net library the std lib, and thought I would copy from that to get a simple address list and start messing around.

1615678151
aconbere
However, I can't actually get the code from the std lib to compile?

1615678188
aconbere
This line in particular

1615678198
aconbere
I don't see this error if I build zig from scratch

1615678210
aconbere
Can anyone help me grok what's going on? :-D

1615678307
waleee-cl
aconbere:  the key point was "build zig from scratch". Did you try the std.net code from  the github repo on zig 0.7 ?

1615678356
aconbere
hmmm, I built off of master which I assume is 0.8 + some in progress stuff?

1615678379
aconbere
I'm running 0.8 locally

1615678395
aconbere
0.8.0-dev.1431+c760532be

1615678430
waleee-cl
that looks sufficiently sparkling new at least

1615678444
aconbere
If point at `std.c.AI_NUMERICSERV` my compiler can find the value

1615678451
aconbere
I see the same issue with getaddrinfo

1615678468
aconbere
anyway I'm just kinda... wondering if lib/std/net.zig does something special here

1615678478
aconbere
I figure worst case this is a good learning opportunity

1615678614
waleee-cl
I think you might be better off looking at

1615678649
aconbere
Hmmmm to be clear, std.net is a subset of the unix sockets api

1615678663
aconbere
I was looking to mess around with the sockets api directly

1615678686
aconbere
and so I was using std.net to learn how to ... make syscall and interface with underlying os apis

1615678729
aconbere
But! What I found was that, when I tried to do what they did in std.net it didn't work when I tried to compile it :)

1615678955
waleee-cl
Pastebin the stuff you tried out?

1615679650
aconbere
waleee-cl:

1615679704
aconbere
This is the error I get when trying to compile

1615679714
aconbere
(along with errors about how it can't allocPrint)

1615679777
aconbere
I get further if I switch to std.c.* but it says I need to say I'm using libc in the build

1615679786
aconbere
but the help for build doesn't seem to say how haha

1615679913
waleee-cl
aconbere:

1615679923
waleee-cl
wrong paste

1615679926
waleee-cl


1615679944
aconbere
ah lovely

1615679954
aconbere
right there in the learning site derp

1615679972
aconbere
Still leaves me confused about why net.zig compiles :-D

