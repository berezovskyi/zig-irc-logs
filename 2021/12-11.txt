1639180868
ifreund!~ifreund@user/ifreund
mischief: sadly yes, note the big red warning at the top

1639180886
ifreund!~ifreund@user/ifreund
I'd recommend forgetting the current autogenerated std docs exist and just going to the source code

1639180890
mischief!~mischief@wopr.sciops.net
ah, well. code is fine too :)

1639181020
mischief!~mischief@wopr.sciops.net
ifreund: if std.atomic.Queue is a function and not a type, how do i write a function signature which would accept an argument of the same type as the return value?

1639181037
mischief!~mischief@wopr.sciops.net
i tried to use what @TypeOf printed, but it did not work.

1639181039
mischief!~mischief@wopr.sciops.net
./src/main.zig:41:22: error: container 'std.atomic' has no member called 'queue'

1639181041
mischief!~mischief@wopr.sciops.net
fn thr(q: *std.atomic.queue.Queue(*std.net.Connection)) void {

1639181158
ifreund!~ifreund@user/ifreund
the way @TypeOf() prints currently types is based on the source file they are located in, not based on how they may be accessed in code

1639181180
ifreund!~ifreund@user/ifreund
in this case, there's a `pub const Queue = @import("atomic/queue.zig").Queue;` in std/atomic.zig

1639181207
ifreund!~ifreund@user/ifreund
so the way to access this type in code is just `std.atomic.Queue()` not `std.atomic.queue.Queue()`

1639181224
ifreund!~ifreund@user/ifreund
s/prints currently/currently prints/

1639181250
mischief!~mischief@wopr.sciops.net
aha

1639181531
mischief!~mischief@wopr.sciops.net
.. onto the next problem :-)

1639181664
mischief!~mischief@wopr.sciops.net
it looks like there is a Node member of the Queue struct. in the test code for Queue is is creating nodes with `Queue(i32).Node{..}` to put an element in a Queue(i32). is it necessary to repeatedly call Queue to get the node type? is the node type not accessible as a member of the existing struct?

1639181895
ifreund!~ifreund@user/ifreund
it is not necessary to use `Queue(i32).Node` everywhere as you can give the returned type a new name like `const Node = Queue(i32).Node;` Think a typedef in C

1639181945
ifreund!~ifreund@user/ifreund
I'd probably do something like `const ConnectionQueue = std.atomic.Queue(*std.net.StreamServer.Connection);` though and then use `ConnectionQueue.Node` everywhere

1639181953
ifreund!~ifreund@user/ifreund
that make sense?

1639181973
mischief!~mischief@wopr.sciops.net
i see

1639182061
mischief!~mischief@wopr.sciops.net
that works well

1639182063
mischief!~mischief@wopr.sciops.net
            var qe = ConnectionQueue.Node{.data = &c};

1639182065
mischief!~mischief@wopr.sciops.net
            q.put(&qe);

1639183118
mischief!~mischief@wopr.sciops.net
hm.. what does this mean? there's not really any more information in the compiler trace.

1639183120
mischief!~mischief@wopr.sciops.net
/home/mischief/src/zig-linux-x86_64-0.9.0-dev.1936+77836e08a/lib/std/Thread/Condition.zig:109:34: error: container 'std.os.linux' has no member called 'FUTEX_PRIVATE_FLAG'

1639183122
mischief!~mischief@wopr.sciops.net
                            linux.FUTEX_PRIVATE_FLAG | linux.FUTEX_WAIT,

1639183530
mischief!~mischief@wopr.sciops.net
seems i need to do `zig build-exe --library c`, any way to get that into my build.zig?

1639183915
andrewrk!~andrewrk@mail.ziglang.org
yes

1639183969
andrewrk!~andrewrk@mail.ziglang.org
mischief, this is perhaps the best docs I can link at the moment: https://zig.news/xq/series/2

1639184633
mischief!~mischief@wopr.sciops.net
Franciman: ifreund andrewrk thanks a lot for the information. with your help i made a crappy little server on my first day of zig :-) http://ix.io/3HEo

1639184657
Franciman!~Franciman@mx1.fracta.dev
enjoy mischief 

1639184662
Franciman!~Franciman@mx1.fracta.dev
this is going to be rad

1639184882
andrewrk!~andrewrk@mail.ziglang.org
mischief, not bad for a first day :)

1639184905
andrewrk!~andrewrk@mail.ziglang.org
be warned; networking in the standard library is very immature

1639185355
mischief!~mischief@wopr.sciops.net
seems to work well enough for a baby tcp listener, but there's no datagram support right?

1639186821
andrewrk!~andrewrk@mail.ziglang.org
not sure- you might start with looking to see if zig has the posix API for that

1639197002
mischief!~mischief@wopr.sciops.net
any way to autogenerate C bindings for zig?

1639199016
squeek502!~squeek502@user/squeek502
mischief, if you mean generating a .h file, then it's planned but was removed from the stage1 compiler for now: https://ziglang.org/learn/overview/#export-functions-variables-and-types-for-c-code-to-depend-on

1639199066
squeek502!~squeek502@user/squeek502
https://github.com/ziglang/zig/issues/9698#issuecomment-974719756

1639207521
mischief!~mischief@wopr.sciops.net
how do i link a library in build.zig? `exe.linkSystemLibrary("thelib")` results in the library not appearing in the linker command in --verbose-link, but `zig build-exe -lc -lthelib src/main.zig` works.

1639211213
mischief!~mischief@wopr.sciops.net
well, i figured out that `linkSystemLibraryName` works and `linkSystemLibrary` doesn't. i also figured out how to call a dbus method from zig :-)

1639215357
andrewrk!~andrewrk@mail.ziglang.org
mischief, what went wrong with linkSystemLibrary?

1639215373
andrewrk!~andrewrk@mail.ziglang.org
the docs for that say: "This one has no integration with anything, it just puts -lname on the command. Prefer to use `linkSystemLibrary` instead."

1639236205
ifreund!~ifreund@user/ifreund
andrewrk: updating river to zig master went fairly smoothly although it was a bit time consuming

1639236250
ifreund!~ifreund@user/ifreund
unused variable/parameter warnings didn't catch any major bugs but did lead to code cleanup in several places

1639236272
ifreund!~ifreund@user/ifreund
anyhow, I don't have any regressions to report :)

1639236618
ikskuh!~xq@2a0d:5940:6:163::ad7e
i actually had to restructure some code in LoLa because of allocgate :(

1639236674
ifreund!~ifreund@user/ifreund
really? how so

1639237106
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have a generic c_void context 

1639237110
ikskuh!~xq@2a0d:5940:6:163::ad7e
for functions

1639237114
ikskuh!~xq@2a0d:5940:6:163::ad7e
to enable something like closures

1639237118
ikskuh!~xq@2a0d:5940:6:163::ad7e
and they closed in a allocator

1639237121
ikskuh!~xq@2a0d:5940:6:163::ad7e
which is now not possible anymore

1639237212
tgschultz!UserNick@047-034-058-084.res.spectrum.com
...allocgate? I feel like I missed something. What's the big alloc change?

1639237298
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.mem.Allocator is now a fat pointer and non-intrusive

1639237319
ikskuh!~xq@2a0d:5940:6:163::ad7e
and stores vtable+ptr

1639237425
tgschultz!UserNick@047-034-058-084.res.spectrum.com
thanks. I'm looking at it now. It isn't obvious to me how it would make any previous usecase impossible though.

1639237469
tgschultz!UserNick@047-034-058-084.res.spectrum.com
Is this all because of the optimization issues around @fieldParentPtr?

1639237506
ikskuh!~xq@2a0d:5940:6:163::ad7e
nah

1639237518
ikskuh!~xq@2a0d:5940:6:163::ad7e
because @sizeOf(std.mem.Allocator) != @sizeOf(*std.mem.Allocator)

1639237527
ikskuh!~xq@2a0d:5940:6:163::ad7e
i had type-erased pointers before

1639237535
ikskuh!~xq@2a0d:5940:6:163::ad7e
now Allocator is a temporary object instead of a pointer-to-field

1639237699
ifreund!~ifreund@user/ifreund
ikskuh: if you only use one allocator type in this context, you can just pass the pointer to the arena allocator or gpa itself and then call the .allocator() function inside your callback

1639237718
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have no idea which allocator gets passed into my lib

1639237745
ifreund!~ifreund@user/ifreund
yep, that won't work then

1639240393
ikskuh!~xq@2a0d:5940:6:163::ad7e
is there a safe alterantive to @floatToInt ?

1639241769
tgschultz!UserNick@047-034-058-084.res.spectrum.com
what do you mean by 'safer'?

1639242090
ikskuh!~xq@2a0d:5940:6:163::ad7e
try passing NaN to fti :D

1639242093
ikskuh!~xq@2a0d:5940:6:163::ad7e
it will just panic

1639242098
ikskuh!~xq@2a0d:5940:6:163::ad7e
the same for out-of-bounds values

1639242103
ikskuh!~xq@2a0d:5940:6:163::ad7e
i need an error

1639242107
ikskuh!~xq@2a0d:5940:6:163::ad7e
so i don't have runtime crashes

1639242286
tgschultz!UserNick@047-034-058-084.res.spectrum.com
huh, I thought we had something like that for ints at least, but I can't find it.

1639242358
tgschultz!UserNick@047-034-058-084.res.spectrum.com
oh, we do for ints. std.math.cast. That should be extendable to floats but it doesn't look like anyone has done that yet.

1639242648
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1639242653
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.math.cast and std.math.lossyCast

1639242659
ikskuh!~xq@2a0d:5940:6:163::ad7e
lossyCast will panic on nans :D

1639242673
tgschultz!UserNick@047-034-058-084.res.spectrum.com
yep

1639250477
mischief!~mischief@wopr.sciops.net
andrewrk: it does not link, the option does not appear in the invocation.

1639250547
mischief!~mischief@wopr.sciops.net
something weird seems to be happening if i try to use system headers and libraries with the zig binary tarball i downloaded from the website..

1639251013
mischief!~mischief@wopr.sciops.net
here is the code and build.zig for a simple D-Bus call: https://gist.github.com/mischief/0d771bd33ca34255e4dced5fc4e93ace

1639251064
mischief!~mischief@wopr.sciops.net
if you change exe.linkSystemLibrary("systemd"); to exe.linkSystemLibraryName("systemd");, it works, otherwise, it fails to do the C import

1639251081
mischief!~mischief@wopr.sciops.net
it also works if you run `zig build-exe -lc -lsystemd main.zig`.

1639251100
mischief!~mischief@wopr.sciops.net
(zig version is in the gist title)

1639252061
ifreund!~ifreund@user/ifreund
mischief: linkSystemLibrary() tries to use pkg-config to figure out what linker flags to pass, that must be going wrong somehow

1639252078
ifreund!~ifreund@user/ifreund
It wouldn't surprise me at all if systemd is doing something strange

1639252119
mischief!~mischief@wopr.sciops.net
m(

1639252165
mischief!~mischief@wopr.sciops.net
the .pc files are prefixed with `lib`

1639252559
ifreund!~ifreund@user/ifreund
mischief: you can play with it your self by running `pkg-config --cflags --libs foobar`

1639252576
ifreund!~ifreund@user/ifreund
perhaps `foobar` needs to be something other than `systemd` for what you want

1639252588
ifreund!~ifreund@user/ifreund
or you can just stick with linkSystemLibraryName() :D

1639252697
mischief!~mischief@wopr.sciops.net
yes, it just needed to be `libsystemd`, not `systemd`

1639252755
mischief!~mischief@wopr.sciops.net
updated the gist, and it works. :-) git clone https://gist.github.com/mischief/0d771bd33ca34255e4dced5fc4e93ace dbus && cd dbus && zig build run

1639252785
ifreund!~ifreund@user/ifreund
nice!

1639252804
ifreund!~ifreund@user/ifreund
mischief: by the way, if you ever feel like not depending on all of systemd to use dbus you might want to check out https://sr.ht/~emersion/basu/

1639253079
mischief!~mischief@wopr.sciops.net
my main machines all run debian, but thank you ;-)

1639257136
mischief!~mischief@wopr.sciops.net
is it not ok to call realloc on a undefined slice?

1639257584
andrewrk!~andrewrk@mail.ziglang.org
the slice itself must be defined, i.e. the ptr and len must be defined, but it may point to undefined memory

1639257648
mischief!~mischief@wopr.sciops.net
i ended up writing `data: []u8 = &.{}`

1639257658
mischief!~mischief@wopr.sciops.net
figuring out how to allocate memory was quite an adventure :)

1639262215
mischief!~mischief@wopr.sciops.net
how do i safely make '[*c]const u8' from '[]const u8' to pass to a C function?

1639262287
ifreund!~ifreund@user/ifreund
mischief: does the C function expect a 0 terminated pointer?

1639262328
mischief!~mischief@wopr.sciops.net
yes

1639262343
ifreund!~ifreund@user/ifreund
if so you could use std.mem.Allocator.dupeZ() or otherwise refactor to get a [:0]const u8

1639262502
mischief!~mischief@wopr.sciops.net
hm.. maybe confused about how to use it.

1639262560
mischief!~mischief@wopr.sciops.net
oh!

1639262565
mischief!~mischief@wopr.sciops.net
crazy, it works now :)

1639262867
ifreund!~ifreund@user/ifreund
mischief: a []const u8 isn't guarenteed to have a 0 in memory one past the end of the slice, so if you were to pass that pointer directly to the C API it would read past the end of the slice until it happens to find a 0, resulting in garbage data or a SEGFAULT

1639262887
mischief!~mischief@wopr.sciops.net
it did indeed result in a runtime error

1639262891
mischief!~mischief@wopr.sciops.net
curl did not like the URL

1639262909
ifreund!~ifreund@user/ifreund
garbage data in that case then I assume ;D

1639263087
mischief!~mischief@wopr.sciops.net
ifreund: extremely jank but i can now print the temperature where i live http://ix.io/3HKX

1639263179
ifreund!~ifreund@user/ifreund
mischief: nice! If you feel like getting rid of the dupeZ() you could use bufPrintZ() instead and have your function take a [:0]const u8

1639263259
mischief!~mischief@wopr.sciops.net
not sure how to feel about it yet but here's my lua program i normally use for this http://ix.io/2P67

1639263443
ifreund!~ifreund@user/ifreund
that https library for lua looks to be a lot less verbose than curl for sure :D

1639263788
mischief!~mischief@wopr.sciops.net
well, it's a high level interface instead of massaging cURL api directly..

1639264847
andrewrk!~andrewrk@mail.ziglang.org
I feel that @TagType was better than @typeInfo(Symbol.Type).Union.tag_type.?

1639265102
ifreund!~ifreund@user/ifreund
std.meta.Tag() isn't bad though

1639265132
andrewrk!~andrewrk@mail.ziglang.org
true however I don't think one should have to reach into std.meta for everyday language tasks such as coercing a union to its enum tag

1639265175
ifreund!~ifreund@user/ifreund
I don't really have a strong opinion either way, std.meta.Tag() keeps the compiler implementation a bit smaller which I like

1639265209
ifreund!~ifreund@user/ifreund
I'm just about finised replacing c_void with anyopaque by the way

1639265224
ifreund!~ifreund@user/ifreund
got tired of seeing c_void in my pure zig code

1639265352
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
trying to get in changes before 0.9? :P

1639265533
ifreund!~ifreund@user/ifreund
maybe... :P

1639266225
ikskuh!~xq@2a0d:5940:6:163::ad7e
is there any magic to capture NaN values?

1639266276
marxn!~marx@94.31.98.63
(7th time the charm) hey, so I pretty much just started with zig today and I quite like what I'm seeing so far. One question though where I'm really unsure if I'm holding it wrong or not: I read some stuff from a file and now have a slice, that I want to interpret as a packed struct. But @bitCast only seems to accept arrays ("expected type

1639266277
marxn!~marx@94.31.98.63
[1234]u8"). Is there some way to have bitCast directly work on a slice instead of creating a temporary copy of the slice into a local array and then passing that into bitCast?

1639266309
ikskuh!~xq@2a0d:5940:6:163::ad7e
there's magic that happens when you slice a slice with comptime known length:

1639266324
ikskuh!~xq@2a0d:5940:6:163::ad7e
var arr: *[4]u8 = slice[offset..][0..4];

1639266340
ikskuh!~xq@2a0d:5940:6:163::ad7e
so

1639266353
ikskuh!~xq@2a0d:5940:6:163::ad7e
@bitCast(MyStruct, slice[offset..][0..@sizeOf(MyStruct)].*)

1639266356
ikskuh!~xq@2a0d:5940:6:163::ad7e
will do the job

1639266511
marxn!~marx@94.31.98.63
hmm it still complains: unable to @bitCast from pointer type *[74]u8

1639266520
marxn!~marx@94.31.98.63
the slice is a []u8

1639266590
marxn!~marx@94.31.98.63
oh, missed the .*

1639266605
marxn!~marx@94.31.98.63
thanks!

