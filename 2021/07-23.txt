1626999262
olabian!~olajaro@ool-4576796d.dyn.optonline.net
Hi, I'm trying to build zig from source but I'm getting an issue when linking: http://0x0.st/-VdQ.sh

1626999463
andrewrk!~andrewrk@mail.ziglang.org
olabian, did you use the same compiler for llvm and zig? https://github.com/ziglang/zig/wiki/Troubleshooting-Build-Issues#dual-abi-linking

1626999517
olabian!~olajaro@ool-4576796d.dyn.optonline.net
hmm, maybe, let me try switching to clang for building zig

1626999816
ifreund!~ifreund@user/ifreund
Ayo: hey, your zig ncdu readme lists zig 8.0 instead of 0.8 fyi

1627000601
olabian!~olajaro@ool-4576796d.dyn.optonline.net
andrewrk: ok, that with cmake .. -DZIG_PREFER_CLANG_CPP_DYLIB=true seemed to fix it

1627000625
olabian!~olajaro@ool-4576796d.dyn.optonline.net
thx

1627016325
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
ifreund: oops, fixed

1627051082
olabian!~olabian@ool-4576796d.dyn.optonline.net
Hi, I'm running into an issue implementing a callback function for curl. I am trying to pass an ArrayList(u8) to the callback function and then have it append the ptr[0..size] (data is not null terminated) but I keep getting segfaults. I tried just printing the first char but I'm still segfaulting. Any ideas? Here is the relevant code: https://gist.github.com/gitabaz/52db22b2855ca340a9e077ae3c6be6e6

1627051613
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Unused variable errors make me very unhappy :'(

1627052124
ikskuh!~xq@2a0d:5940:6:163::ad7e
Biolunar: you should use more variables then!

1627052272
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
If I had a magic wand that would finish every function instantly, I’d gladly use it.

1627052304
ikskuh!~xq@2a0d:5940:6:163::ad7e
how many left? D

1627052352
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Now a crap ton of stuff is refusing to compile and that took my will to invest more time into zig projects.

1627052404
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Error: unused variable. Comment that var, error one line above: unused variable because the line below used that one… and so on and on

1627052468
ikskuh!~xq@2a0d:5940:6:163::ad7e
_=myvar;

1627052470
ikskuh!~xq@2a0d:5940:6:163::ad7e
below

1627052472
ikskuh!~xq@2a0d:5940:6:163::ad7e
instead of a comment

1627052476
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Writing _ = foo; is squelching that error for good, but now I’ll forget about that instance but no warning or error in the future

1627052490
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
It’s dumb.

1627052534
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Every line carries intent. _ = foo; says that I’m sure I don’t want to use that variable. But I’d like to in the future…

1627052585
ikskuh!~xq@2a0d:5940:6:163::ad7e
i want to make that a compile error when it's used

1627052590
ikskuh!~xq@2a0d:5940:6:163::ad7e
but that's harder than it sounds

1627052616
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
I could live with that

1627052647
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Or make it a warning instead of an error, so I am constantly reminded that I’m not using a variable.

1627052672
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
why not having the unused variables emit a warning ? and having something like -Werror ?

1627052772
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig has no warnings by design (as people tend to ignore them anyways)

1627052835
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
People alway say that warnings are being ignored, but are they really? I haven’t seen a project yet where warnings are being deliberately ignored

1627052897
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
Some warnings in C and C++ are false positives and are turned off, sure. But that’s not what ‘people’ mean

1627053013
Biolunar!biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a
And by the way. It’s just unused *local* variables that are an error. I should make them all global to silence that… :>

1627053274
kiedtl!~kiedtl@kisslinux/kiedtl
Is the only way to have a nested function 'struct { fn _f() void { ... } }' or am I missing something?

1627053376
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes, right now that is true

1627053377
ifreund!~ifreund@user/ifreund
kiedtl: yes that's right, but before zig hits 1.0 issue #1717 will finally be implemented

1627053384
kiedtl!~kiedtl@kisslinux/kiedtl
Ah

1627057740
olabian!~olabian@ool-4576796d.dyn.optonline.net
how can I convert an ArrayList(u8) into a [*:0]u8?

1627057794
ifreund!~ifreund@user/ifreund
append a 0 and then do list.items[0..list.items.len :0]

1627058113
olabian!~olabian@ool-4576796d.dyn.optonline.net
when I try to pass that to a function accepting a [*:0]u8 it gives me an error

1627058152
olabian!~olabian@ool-4576796d.dyn.optonline.net
says in compiler source at /home/olabian/opt/zig/src/stage1/codegen.cpp:1843: thread 3750 panic: assertion failed. This is a bug in the Zig compiler.

1627058184
ifreund!~ifreund@user/ifreund
rip

1627058191
ifreund!~ifreund@user/ifreund
could you paste your code?

1627058204
olabian!~olabian@ool-4576796d.dyn.optonline.net
yeah give me a sec

1627058356
olabian!~olabian@ool-4576796d.dyn.optonline.net
https://gist.github.com/gitabaz/4648840afc57ffe966d20680564b7ded

1627058402
olabian!~olabian@ool-4576796d.dyn.optonline.net
ifreund: let me know if you need more context

1627058429
ifreund!~ifreund@user/ifreund
what if you do: const ptr: [*:0]u8 = list.items[0.. list.items.len - 1 :0]; and then pass ptr?

1627058446
ifreund!~ifreund@user/ifreund
(the fixes -1 a bug on my part)

1627058516
olabian!~olabian@ool-4576796d.dyn.optonline.net
similar error

1627058681
olabian!~olabian@ool-4576796d.dyn.optonline.net
ifreund: oh I fixed it by adding a .ptr at the end

1627058718
olabian!~olabian@ool-4576796d.dyn.optonline.net
    const ptr: [*:0]u8 = response.items[0 .. response.items.len - 1 :0].ptr;

1627058723
ifreund!~ifreund@user/ifreund
nice

1627058740
ifreund!~ifreund@user/ifreund
you've tamed the stage1 compiler

1627058765
luuk!~luuk@user/luuk
<task completed>

1627058779
olabian!~olabian@ool-4576796d.dyn.optonline.net
lol ezpz

1627058850
kiedtl!~kiedtl@kisslinux/kiedtl
>error: expected type '*list.Node', found '*list.Node'

1627058861
kiedtl!~kiedtl@kisslinux/kiedtl
>note: pointer type child 'list.Node' cannot cast into pointer type child 'list.Node'

1627058867
kiedtl!~kiedtl@kisslinux/kiedtl
Is... there anything I'm missing here?

1627058878
kiedtl!~kiedtl@kisslinux/kiedtl
Or maybe a compiler bug? (I'm on v0.7.1)

1627058966
ifreund!~ifreund@user/ifreund
would need more context to say for sure, but quite possibly a compiler bug yes

1627058971
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, I see the issue. Both 'Node's are both child types of two different types returned by a type-returning function.

1627058976
kiedtl!~kiedtl@kisslinux/kiedtl
So it's a bug with my head, nevermind.

1627059000
kiedtl!~kiedtl@kisslinux/kiedtl
Though I would have expected the compiler to return something more like 'expected @TypeOf(state.mobs).Node, got @TypeOf(state.machines).Node'

1627059065
ifreund!~ifreund@user/ifreund
yeah, naming these types better is a tough problem and I agree that stage1 sucks at it

1627059099
Ristovski!~Ristovski@hellomouse/perf/ristovski
Are there any examples of efficient struct-to-file serialization in Zig?

1627059178
luuk!~luuk@user/luuk
There's <https://github.com/ziglang/std-lib-orphanage/blob/master/std/serialization.zig> but it's not neccesarily finetuned regarding super-efficiency

1627059246
luuk!~luuk@user/luuk
ps: Note that it's part of ophanage, and no longer of std

1627059275
Ristovski!~Ristovski@hellomouse/perf/ristovski
That explains why I did not find it

1627059475
Ristovski!~Ristovski@hellomouse/perf/ristovski
luuk: What was the reason for orphaning serializer?

1627059492
ifreund!~ifreund@user/ifreund
because it doesn't belong in the std

1627059502
Ristovski!~Ristovski@hellomouse/perf/ristovski
hmm, fair enough I guess

1627059957
NuloIn_!~Nulo@user/nulo
Is there a forward and backward linked list in std?

1627060026
ifreund!~ifreund@user/ifreund
NuloIn_: std.TailQueue()

1627060064
NuloIn_!~Nulo@user/nulo
Weird name

1627060114
Nulo!~Nulo@user/nulo
I was searching for something called LinkedList as the counterpart of SinglyLinkedList

1627060122
ifreund!~ifreund@user/ifreund
Nulo: you can find the same name in some old C man pages apparently :D

1627060124
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.TailQueue

1627060141
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh, double answer

1627060181
ifreund!~ifreund@user/ifreund
Nulo: the queue(7) man page in particular on my system

1627060194
ifreund!~ifreund@user/ifreund
I think we should probably drop that legacy though

1627060204
Nulo!~Nulo@user/nulo
+1

1627060211
ifreund!~ifreund@user/ifreund
Also I want to make the std linked lists intrusive by default at some point

1627060220
ifreund!~ifreund@user/ifreund
they are kinda annoying to work with currently

1627060229
Nulo!~Nulo@user/nulo
Why is there BSD man pages from the Linux man pages package lol

1627060250
ifreund!~ifreund@user/ifreund
beats me

1627060269
Nulo!~Nulo@user/nulo
Is there a managed TailQueue?

1627060274
ifreund!~ifreund@user/ifreund
maybe the linux man pages project got lazy and copied that liberally licensed BSD work

1627060287
ifreund!~ifreund@user/ifreund
Nulo: you mean a version that allocates for you? no

1627060317
ifreund!~ifreund@user/ifreund
just do allocator.create(std.TailQueue(T).Node)

1627060326
Nulo!~Nulo@user/nulo
I would say that would be a nice thing to have, would it be accepted upstream?

1627060347
ifreund!~ifreund@user/ifreund
I don't think so, no

1627060375
ifreund!~ifreund@user/ifreund
one of the beautiful things about linked lists is that each node can be allocated by a different allocator

1627060379
ifreund!~ifreund@user/ifreund
or some of them can be on the stack

1627060401
ifreund!~ifreund@user/ifreund
why do you need a linked list in this case?

1627060420
Nulo!~Nulo@user/nulo
I mean, it _can_, I would assume it's normally from a single allocator though

1627060431
Nulo!~Nulo@user/nulo
I'm storing an index of all pages of the site being generatee

1627060444
ifreund!~ifreund@user/ifreund
and you can't use an ArrayList because...?

1627060460
Nulo!~Nulo@user/nulo
I can, but I don't know the number of pages up front

1627060497
Nulo!~Nulo@user/nulo
It wouldn't be a big performance penalty but I wanted to find a chance to use a linked list :P

1627060501
ifreund!~ifreund@user/ifreund
doesn't matter really, the arraylist will still be more efficient

1627060546
ifreund!~ifreund@user/ifreund
linked lists usually only make sense for very large elements where copying them is prohibitvely expensive and iteration speed isn't important

1627060553
ifreund!~ifreund@user/ifreund
or if you need pointer stability for some reason

1627060565
Nulo!~Nulo@user/nulo
Okay memory police I'll use an ArrayList instead. But I will find my chance to use a linked list o7

1627060577
ifreund!~ifreund@user/ifreund
o7

1627060590
Nulo!~Nulo@user/nulo
Pointer indirection would make the iteration slower?

1627060666
ifreund!~ifreund@user/ifreund
iterating a linked list of u32s would be massively slower than iterating an array list of u32

1627060672
ifreund!~ifreund@user/ifreund
mostly because of the cpu cache

1627060695
ifreund!~ifreund@user/ifreund
jumping all around in memory to where your linked list nodes happen to be stored is not cache-friendly

1627060716
devast8a!~devast8a@2001:470:69fc:105::3f46
Prefetchers really like it when you access stuff contiguously or with a small constant stride.

1627060778
Nulo!~Nulo@user/nulo
So it's more of a cache/microcode/magic thing? Instead of costing more instructions or something

1627060882
devast8a!~devast8a@2001:470:69fc:105::3f46
Yeah, probably going to be fewer instructions too.

1627061375
Nulo!~Nulo@user/nulo
What's the recommended way to deallocate things that external C libraries allocated?

1627061543
ifreund!~ifreund@user/ifreund
Nulo: the only way to do so is to use the same allocator used to allocate them, which is almost certainly libc's allocator

1627061561
ifreund!~ifreund@user/ifreund
you can use it from zig with std.heap.c_allocator

1627061567
Nulo!~Nulo@user/nulo
Yes, but there's a few ways to access it through Zig, I'm just using c.free for now

1627061575
Nulo!~Nulo@user/nulo
Right but I have to convert the pointer no?

1627061658
ifreund!~ifreund@user/ifreund
use std.c.free() directly is fine if all you have is a pointer 

1627061914
Nulo!~Nulo@user/nulo
Okay, thanks

1627061922
Nulo!~Nulo@user/nulo
Why is it not downgrading to a C pointer? error: expected type '[*c]const u8', found '[]u8'

1627061995
ifreund!~ifreund@user/ifreund
Nulo: you're losing information there, you can do slice.ptr if you want it to coerce

1627062008
Nulo!~Nulo@user/nulo
Ah, thanks

1627062015
ifreund!~ifreund@user/ifreund
make sure the [*c]const u8 pointer isn't expected to be 0 terminated though

1627062046
Nulo!~Nulo@user/nulo
No, it's not; I'm passing .len right after it

1627065682
Nulo!~Nulo@user/nulo
https://github.com/pfgithub/zigmd :O

1627065698
Nulo!~Nulo@user/nulo
This is a GUI for editing Markdown, clearly an alpha but very interesting

1627065750
andrewrk!~andrewrk@mail.ziglang.org
man I don't get it. are people writing functions by just guessing what parameters they need ahead of time?

1627065994
Nulo!~Nulo@user/nulo
I think I would do something like that :P Although not sure

1627066000
Nulo!~Nulo@user/nulo
Is this re: unused parameter error?

1627066032
andrewrk!~andrewrk@mail.ziglang.org
yes

1627066039
andrewrk!~andrewrk@mail.ziglang.org
seems to be unpopular

1627066112
andrewrk!~andrewrk@mail.ziglang.org
just yesterday I was reworking some linker code and needed to reconsider how a file path parameter would be used across a few systems, then it struck my eye, `_ = sub_path;` in one of the key functions. Unused! That shortcutted my reworking to an obvious solution that I might not have realized without tinkering

1627066156
Nulo!~Nulo@user/nulo
It doesn't annoy me as much (although I don't write a lot of Zig!!) and I understand it's purpose. A --sloppy or --hacking-mode that's strictly (?) disabled on Release* modes sounds like a good idea but /shrug

1627066194
Nulo!~Nulo@user/nulo
But I like how the discussions around this kind of things that I've seen haven't been flame wars

1627066221
andrewrk!~andrewrk@mail.ziglang.org
yeah I mean it's important for people to communicate frustration if that's what they're experiencing

1627066224
luuk!~luuk@user/luuk
andrewrk: To lighten the mood: Managed to get the br_table instruction working for wasm backend. Came with all kind of cool challenges I had to solve!

1627066255
andrewrk!~andrewrk@mail.ziglang.org
great work luuk!

1627066271
andrewrk!~andrewrk@mail.ziglang.org
does it seem like an improvement in the wasm code generated from before?

1627066316
luuk!~luuk@user/luuk
Only when the prong values are close to eachother, once they become sparse it's better to use an if/else-chain. This is what LLVM seems to do as well

1627066331
luuk!~luuk@user/luuk
Same when switching over values with a bitsize > 32

1627066374
andrewrk!~andrewrk@mail.ziglang.org
interesting

1627066386
Nulo!~Nulo@user/nulo
Maybe a --sloppy option could actually reduce the amount of unused code that's actually committed because it would avoid doing `_ = variable;` which is not warned in any shape or form (so if you forget about it, it stays there vs. being notified when trying to compile on Release*)

1627066415
luuk!~luuk@user/luuk
Right now I implemented a way to detect sparseness and use the jump table or the if/else-chain accordingly, and the structure of the code remains quite intact/

1627066424
Nulo!~Nulo@user/nulo
(Also answering to what you said about linker code)

1627066462
andrewrk!~andrewrk@mail.ziglang.org
Nulo, my observation was that `_ = sub_path;` being committed was *helpful* in the reworking

1627066490
Nulo!~Nulo@user/nulo
Ah

1627066503
andrewrk!~andrewrk@mail.ziglang.org
luuk, that's interesting. sounds related to a missing feature in the x86/arm codegen for small/large jumps

1627066551
jaredmm!~jaredmm@user/jaredmm
I think most of my unused variable annoyance is a result of the lack of refactoring functionality rather than annoyance that it is currently unused. 

1627066568
andrewrk!~andrewrk@mail.ziglang.org
jaredmm, can you elaborate?

1627066593
jaredmm!~jaredmm@user/jaredmm
Partial implementation of a function with many callsites where I know I need a full set of parameters for the final implementation, but I don't need it immediately for the paths I'm working on. 

1627066625
jaredmm!~jaredmm@user/jaredmm
In other languages, I'd refactor the implementation to have the params I need as I go, but with only find/replace to work with, that is less trivial. 

1627066633
andrewrk!~andrewrk@mail.ziglang.org
I would argue in this case documenting the paths that aren't finished yet with `_ = param;` is a feature - it lets you commit a partial solution with semantic documentation about the state of the code

1627066706
andrewrk!~andrewrk@mail.ziglang.org
from my perspective, it's nice to have something half done advertise that it is half done

1627066759
andrewrk!~andrewrk@mail.ziglang.org
if you think about it, the language is introducing friction for half done things, which makes sense if you consider zig's goals

1627066790
jaredmm!~jaredmm@user/jaredmm
I agree with your position. I wouldn't advocate for getting rid of unused as errors or changing the opt out mechanism. 

1627066846
jaredmm!~jaredmm@user/jaredmm
It isn't the unused variable itself that causes the annoyance, but the fact that I don't have the built-in memory to immediately put _ = param when designing functions with parameters (or remember to do so after I partially code the function).

1627066925
andrewrk!~andrewrk@mail.ziglang.org
I see

1627066927
andrewrk!~andrewrk@mail.ziglang.org
what editor do you use?

1627067029
jaredmm!~jaredmm@user/jaredmm
I've been trying VSCode recently. 

1627067100
jaredmm!~jaredmm@user/jaredmm
Most of my coding is done with Intellij for Java or Visual Studio for C++ and C#.

1627067129
andrewrk!~andrewrk@mail.ziglang.org
are you Jarred Sumner on github?

1627067167
jaredmm!~jaredmm@user/jaredmm
Nope, different Jared. Less of a pirate. 

1627067200
andrewrk!~andrewrk@mail.ziglang.org
lol

1627067238
andrewrk!~andrewrk@mail.ziglang.org
anyway, Pirate Jared made an improvement that integrated ast-check with the vscode extension but we're currently dealing with a microsoft situation about access to the extension

1627067275
andrewrk!~andrewrk@mail.ziglang.org
in other words no active ziglang members have ability to push updates to the extension currently

1627067310
andrewrk!~andrewrk@mail.ziglang.org
due to a like 5 year old microsoft bug that a bazillion people have run into and they have not fixed

1627067328
luuk!~luuk@user/luuk
Lol, ofcourse

1627067346
jaredmm!~jaredmm@user/jaredmm
Is that Marc's extension or the ZLS one?

1627067355
andrewrk!~andrewrk@mail.ziglang.org
Marc's

1627067369
andrewrk!~andrewrk@mail.ziglang.org
he tried to give more contributors access but it's not working, so we gotta do some other workaround

1627067469
Nulo!~Nulo@user/nulo
Is there no way to get those changes into ZLS? /clueless comment

1627067493
andrewrk!~andrewrk@mail.ziglang.org
I was thinking along similar lines, it would be neat if there was One Extension To Rule Them All

1627067499
andrewrk!~andrewrk@mail.ziglang.org
better yet if it managed zig versions for you

1627067509
luuk!~luuk@user/luuk
There is, but not everyone likes/uses a language server tho

1627067534
Nulo!~Nulo@user/nulo
But the VS Code extension could just wrap the LSP no?

1627067564
andrewrk!~andrewrk@mail.ziglang.org
my dream is to ship an IDE that does everything and Just Works. open a project, hit the big green button

1627067584
luuk!~luuk@user/luuk
True, it could detect if you have it installed or not. (Or as a setting)

1627067601
luuk!~luuk@user/luuk
Especially since it doesn't ship zls itself, it should be no issue

1627067660
Nulo!~Nulo@user/nulo
Microsoft be like: let's make standards for making cross-editor intelligence but let's not provide standard ways to use those in VS Code, causing a monopoly of VS Code extensions :P

1627067711
luuk!~luuk@user/luuk
Actually, I like the idea of integrating it within zls itself as well. As that means a unified way to produce errors to an editor. For example, Kakoune expects linter errors to be written to stdout instead of stderr, so you need to redirect them.

1627067767
Nulo!~Nulo@user/nulo
Integrating what?

1627067777
luuk!~luuk@user/luuk
Sorry, ast-check

1627067819
Nulo!~Nulo@user/nulo
Yeah :)

1627067856
jaredmm!~jaredmm@user/jaredmm
The LSP should be a simple integration into Marc's extension. Managing Zig versions would be a bit more complicated, but not impossible. 

1627067897
Nulo!~Nulo@user/nulo
ACTION doesn't use VS Code and would love more stuff in ZLS

1627067918
Nulo!~Nulo@user/nulo
Specially better completion, although I understand that stage2 will improve that a lot

1627068677
nataneb32!~nataneb@2804:d84:22de:9500:1de9:2e5d:d418:b609
I coding a lsp for zig. because i dont like the code of zls lol. And there are a lot of missing features.

1627069136
nataneb32!~nataneb@2804:d84:22de:9500:1de9:2e5d:d418:b609
is there a way to evaluate comptime type before compiling?

1627069161
andrewrk!~andrewrk@mail.ziglang.org
in general we want: (1) fewer installation steps (2) more tooling

1627069190
luuk!~luuk@user/luuk
nataneb32: Out of curiousity, what features do you think are missing from zls?

1627069308
Nulo!~Nulo@user/nulo
Shouldn't ZLS get another release (to avoid compiling for those who don't want to)?

1627069344
luuk!~luuk@user/luuk
The CI produces nightly binaries you can download :)

1627069376
luuk!~luuk@user/luuk
It's listed somewhere in the artifacts part of the CI, I believe the README links to it as well.

1627069403
Nulo!~Nulo@user/nulo
Ah yes, it does

1627069417
Nulo!~Nulo@user/nulo
Only that the commands to install point to 0.1.0

1627069447
luuk!~luuk@user/luuk
Ah, that sounds confusing indeed :)

1627070077
luuk!~luuk@user/luuk
andrewrk: I believe I caught a bug in Sema with regards to switch. We hit an integer overflow when you switch on an i64.

1627070142
luuk!~luuk@user/luuk
Let me know if you'd like me to write an issue on GH with an example.

1627072755
andrewrk!~andrewrk@mail.ziglang.org
luuk, yes please :)

1627072790
andrewrk!~andrewrk@mail.ziglang.org
although it's not critically important since I'm sure it would be caught by the behavior tests eventually when we get them all passing

1627072822
luuk!~luuk@user/luuk
Hehe, yeah that's what I figured as well. Sounds more like a todo, than a 'real' bug.

1627072988
luuk!~luuk@user/luuk
I actually do have another question: In stage1, when you have an integer with type 'u32' and its value set to its max, LLVM will convert this to `-1` when compiling to wasm (since wasm uses i32 as integer types). Is this a behaviour we want to match for stage2? The wasm spec doesn't really define this. (or I completely missed it).

1627073004
luuk!~luuk@user/luuk
Finding all this information is so exciting haha.

1627073224
andrewrk!~andrewrk@mail.ziglang.org
luuk, I believe the way to think about it is that at the machine code level (for both llvm and wasm) there is no such thing as signed integers - they are all just bags of bits. it is the opcodes that decide whether signed or unsigned *operations* are happening

1627073261
andrewrk!~andrewrk@mail.ziglang.org
so whatever the memory representation of max value of u32 is (which is 0xffffffff) make the wasm code match it

1627073303
andrewrk!~andrewrk@mail.ziglang.org
if that looks like "-1" in the wasm files, then so be it; whatever makes it be the correct bits at runtime

1627073320
luuk!~luuk@user/luuk
Aaaah I see, gotcha.

1627073323
luuk!~luuk@user/luuk
Thank you very much!

1627075358
olabian!~olabian@ool-4576796d.dyn.optonline.net
it would be cool if the zig documentation would link to the source code on github where it is implemented. is that possible?

1627075383
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/6521

1627075439
olabian!~olabian@ool-4576796d.dyn.optonline.net
nice!

1627075456
luuk!~luuk@user/luuk
There's also http://ratfactor.com/zig/stdlib/ you can use

1627075538
olabian!~olabian@ool-4576796d.dyn.optonline.net
interesting, never seen that befoer

1627075577
luuk!~luuk@user/luuk
And http://ratfactor.com/zig/stdlib-browseable/std.zig.html allows you to click through the source imports, rather than going there manually :)

