1623549053
moog!~moog@107.242.124.101
Where do you store third party packages that you're importing?

1623549070
moog!~moog@107.242.124.101
I've tried relative to the script itself as well as in the /lib dir where Zig is installed and neither seems to work.

1623549603
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if using build.zig use exe.addPackage 

1623549612
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or addPackagePath

1623549623
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if using cli use --pkg-begin ... --pkg-end

1623549772
moog!~moog@107.242.124.101
g-w1 Thanks

1623557274
ifreund!~ifreund@user/ifreund
what's the distinction between "generic" and "baseline" when using mcpu

1623558285
ifreund!~ifreund@user/ifreund
hmm, I think we need a way to tell the zig build system to use a specific libc.txt file without modifying the build.zig

1623558301
ifreund!~ifreund@user/ifreund
use-case is cross compiling zig programs linking system libraries

1623558348
ifreund!~ifreund@user/ifreund
I can add explicit support for such a feature in my project, but I think an upstream solution is needed

1623559555
freshcoffee!~fresh@user/freshcoffee
-mcpu=baseline is what cross-compiling uses as default cpu features

1623559583
freshcoffee!~fresh@user/freshcoffee
and it's a pretty low set of features

1623559601
freshcoffee!~fresh@user/freshcoffee
-mcpu=generic is an even lower set of features, possibly lowest?

1623559700
freshcoffee!~fresh@user/freshcoffee
https://github.com/ziglang/zig/blob/a6d72fea06364da26b4efacb188303c5bddf5da3/lib/std/zig/cross_target.zig#L187-L196

1623559956
freshcoffee!~fresh@user/freshcoffee
hmm for arch64, generic == baseline, and after checking some other archs: generic <= baseline

1623560053
ifreund!~ifreund@user/ifreund
RE the zig build system limitation: https://github.com/ziglang/zig/pull/9097

1623560083
ifreund!~ifreund@user/ifreund
freshcoffee: thanks for taking a look, that's helpful!

1623581319
daurnimator!~daurnimat@vultr.daurnimator.com
ifreund: at some point this release cycle we need to revisit "defaults" in std.build

1623604270
ifreund!~ifreund@user/ifreund
daurnimator: we need to revisit a lot of things in std.build IMO, what specifically do you mean by "defaults" though?

1623605705
ikskuh!~xq@2a0d:5940:6:163::ad7e
heya o/

1623605711
ikskuh!~xq@2a0d:5940:6:163::ad7e
can i somehow use fieldParentPtr through a tagged union?

1623605780
ifreund!~ifreund@user/ifreund
ikskuh: not yet, though there's an accepted proposal saying that should work

1623605806
ikskuh!~xq@2a0d:5940:6:163::ad7e
poop

1623606105
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1623606114
ikskuh!~xq@2a0d:5940:6:163::ad7e
this means i have to store a pointer-to-self which i cant

1623606129
ikskuh!~xq@2a0d:5940:6:163::ad7e
any idea how to solve that?

1623606148
ifreund!~ifreund@user/ifreund
ikskuh: if @offsetOf() works you can do the pointer math manuall

1623606151
ifreund!~ifreund@user/ifreund
y

1623606156
ikskuh!~xq@2a0d:5940:6:163::ad7e
no

1623606159
ikskuh!~xq@2a0d:5940:6:163::ad7e
it doesn't

1623606165
ikskuh!~xq@2a0d:5940:6:163::ad7e
"Control is not a struct"

1623606297
ikskuh!~xq@2a0d:5940:6:163::ad7e
huh

1623606299
ikskuh!~xq@2a0d:5940:6:163::ad7e
offset seems to be 0

1623606307
ikskuh!~xq@2a0d:5940:6:163::ad7e
which makes sense if your type has alignment requirements

1623607472
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
koakuma, yo, did the LLVM patch work for you?

1623607854
andrewrk!~andrewrk@mail.ziglang.org
TheLemonMan, I believe the last blocker is now fixed for us to put zig fmt --check into the CI :)

1623608223
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
lovely!

1623613349
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
Does anyone know why Vexu changed this? https://github.com/ziglang/zig/pull/9106/commits/7dcc0fb0e9a1cfe9fee6d6c4f89729cf2d7d62e3#diff-abf41ae245890d778fa78f64c8861cb4a795cea5cfdbf4059dd239acecb3b8adR37

1623614183
ifreund!~ifreund@user/ifreund
g-w1: at a guess, he wanted to do `zig test parse_float.zig` and forgot to change it back

1623614208
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i'll leave a review

1623615023
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ifreund: you were right

1623616289
andrewrk!~andrewrk@mail.ziglang.org
btw you can get around that error with --main-pkg-path 

1623624506
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, https://cloud.drone.io/ziglang/zig/10501/1/3 is failing because of behavior.atomics.test "behavior-native-ReleaseFast-bare-multi cmpxchg on a global variable"... FAIL (TestExpectedEqual)

1623624578
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I didn't touch test/behavior/atomics.zig though

1623624993
ifreund!~ifreund@user/ifreund
andrewrk_: not always: `zig test lib/std/fmt/parse_float.zig --main-pkg-path lib/std` https://0x0.st/-LvR.txt 

1623625025
ifreund!~ifreund@user/ifreund
maybe if all the @import("std")s were converted to @import("std.zig") it would work

1623625191
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
could this bug be an atomics bug that just got triggered by a bad roll of the ci?

1623625224
freshcoffee!~fresh@user/freshcoffee
odd there are many green on master commits; usually we don't see that many if it was a result of a bad ci roll

1623625237
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yea

1623625294
freshcoffee!~fresh@user/freshcoffee
one thing that stands out to me is it took 2 hours on drone which seems like a long time, even for the slow "cavium" host kind

1623625308
freshcoffee!~fresh@user/freshcoffee
that is; it timed out at 2 hours

1623625338
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so it could just be a timeout?

1623625421
freshcoffee!~fresh@user/freshcoffee
you legit saw the earlier failed test; and we have a 2 hour max limit reached; it's possible the 2 hour limit is an indicator of a different or hurting host? I sometimes see that thread-related bugs are more exposed on bogged-down hosts, but not sure about atomics

1623625470
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
wdym legit saw?

1623625491
freshcoffee!~fresh@user/freshcoffee
cmpxchg was a failed test. but that happened much before the 2 hour timeout

1623625514
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, I thought it just reported all the failed ones at the end of a certain section

1623625523
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
s/reported/exited 

1623625617
freshcoffee!~fresh@user/freshcoffee
ah I see what you mean; yeah the output completed in that "section" and whatever next section was being compiled (or run but not-yet-outputted) was the 2:00 cut off

1623625694
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
should I do something like rebase/force push to make it re-run it?

1623626001
freshcoffee!~fresh@user/freshcoffee
yeah I'd try re-running it

1623626007
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1623626063
freshcoffee!~fresh@user/freshcoffee
fyi found a recent likely "cavium" host that passed green and took total 1h34m . I hope we don't have another aarch64 cpu type introduced into the pool.

1623628747
lokathor!~lokathor@75-174-104-225.boid.qwest.net
does the standard library have a way to search for a substring?

1623628765
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
std.mem.indexOf

