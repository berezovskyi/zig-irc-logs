1613865629
marler8997
or sometimes an older compiler, sometimes older compilers aren't smart enough to detect valid things.  A common one is detecting whether variables are uninitialized

1613865658
marler8997
one of the reasons why Zig not having warnings will be nice

1613865785
g-w1
yeah, anything I should do?

1613865799
g-w1
I recently started using lorri

1613866081
marler8997
try a different compiler?

1613866083
marler8997
clang maybe?

1613866177
g-w1
clang is also broken ;)

1613866179
g-w1
ill try to fix it

1613866193
g-w1
clang says cannot find stdio.h, so something broke

1613866282
daurnimator
ifreund not historically

1613866345
daurnimator
ifreund: e.g. I think unix 8th edition uses write() returning 0 to indicate that read() would return 0

1613866739
g-w1
i guess I will nuke lorri

1613867112
g-w1
oof it wasn't lorri

1613867508
g-w1
its probably my nix shell, can someone take a look at this?

1613867573
adamkowalski
is there a way to predict what the name of the executable will be for a unit test?

1613867584
adamkowalski
if I type zig test tests/foo.zig

1613867593
adamkowalski
and then want to run the debugger on it for example

1613867772
g-w1
if it fails it will show the path

1613867796
g-w1
so you can put in an unreachable or panic

1613867803
adamkowalski
sure but suppose you want to preemptively know. I want to hook it up to my editor (emacs)

1613867818
adamkowalski
I have a test at point implemented, but I can't implement debug at point

1613867861
adamkowalski
I have to run the failing test, wait for the error, grab the path, modify the config, launch lldb

1613867889
g-w1
use -femit-bin but beware, it expects a few args to be passed to each test

1613867890
adamkowalski
and what if you want to debug a passing test? it seems strange adding unreachable to the end

1613867895
g-w1
zig test -femit-bin=output

1613867928
adamkowalski
ah so output would be the path you want to use?

1613867954
g-w1
yes, but then you need to do ./output `zig-exe-path` so that it can do some stuff in the test runner

1613867971
adamkowalski
perfect i'll try that!

1613867975
g-w1
and that will run all the tests in the file

1613868088
adamkowalski
but I can still use --test-filter right?

1613868130
g-w1
lemme try

1613868144
adamkowalski
sorry yeah i'm trying too, will report back

1613868181
g-w1
i dont think so

1613868227
g-w1
also that zig test -femit-bin runs the tests so im not sure if its the best. I think it may just be an untended side effect of how the compiler works, not how its intended

1613868227
adamkowalski
actually it seems to be working perfect for me

1613868249
g-w1
wow! im getting into emacs so if you could share the config that would be great!

1613868262
adamkowalski
yeah that actually works great, because when I do test at point, it will generate the output

1613868277
adamkowalski
then when I want to debug the output file will be in the right path and I just pass in the zig exe

1613868293
adamkowalski
give me a couple minutes to implement and then I'll push to github

1613868297
g-w1
ok

1613868321
adamkowalski
My workflow does rely on a specific project structure to work though haha

1613868328
adamkowalski
So you might need to modify it a bit

1613868335
g-w1
ok

1613868340
adamkowalski
essentially I have a src folder and a tests folder

1613868364
adamkowalski
If your project is named foo I expect you have a src/foo.zig file

1613868390
adamkowalski
that file is the entry point for your library and when you run the tests I add a --pkg-begin foo src/foo.zig tests/my_test_file.zig

1613868405
adamkowalski
so if you don't utilize that you might want to change things to work for you

1613868523
g-w1
ok, well i think it would help to see another ziguanas emacs configs anyways

1613868550
adamkowalski
you my friend are a genious! I got it hooked up

1613868557
adamkowalski
now test at point and debug at point work

1613868625
g-w1
ah the culprit was i didn't have hardeningDisable=["all"]; in my shell.nix. andrewrk: I remember you gave this to me, why is this required?

1613868716
adamkowalski


1613868741
adamkowalski
my zig mode config starts at 230

1613868763
adamkowalski
I add a config to emacs lsp mode to utilize zig lsp

1613868792
adamkowalski
then you can see the zig test suite, file, nearest, last, and visit functions which do as they are named

1613868801
g-w1
ok, thanks

1613868819
adamkowalski
and then at the very end I have the dap config (debug stuff)

1613868825
adamkowalski
let me know if I can help1

1613868911
adamkowalski
I also have neovim configs in there which do similar things (run nearest test) / (debug using some config) so whatever floats your boat

1613869088
andrewrk
g-w1, because otherwise nixos adds -O2 and some other stuff which ruins debuggability when you are developing

1613869134
g-w1
ok, well it also added a bunch of compilation warnings that broke the build, I will make a wiki page to help a future person from debugging this :)

1613869137
g-w1
thanks

1613869201
adamkowalski
andrewrk: do you have any information you can point me to about how you implemented type checking?

1613869216
adamkowalski
it seems like it creates a chicken/egg problem with compile time code evaluation

1613869244
adamkowalski
you can have functions which return types, but in order to figure out the function to call you need to know the type of the variable right?

1613869245
g-w1
adamkowalski, see zir_sema.zig it takes zir from zir.zig and runs comptime on it

1613869266
g-w1
comptime is the thing that does the typechecking

1613869277
adamkowalski
yeah I figured there would be some untyped ir that gets produced first

1613869304
adamkowalski
then do you have a bytecode interpret or how do you evaluate the untyped ir during compile time?

1613869320
adamkowalski
and how do you type check the things during comptime execution haha

1613869323
g-w1
you eval the untyped ir

1613869346
adamkowalski
how though haha

1613869356
adamkowalski
you don't know the types? so which instructions do you generate?

1613869358
g-w1
search for mod.coerce in this file

1613869382
adamkowalski
awesome thanks, i'll start studying that

1613869404
g-w1
and review coerce in Module.zig to see how the type checking works

1613869476
adamkowalski
wow that codebase is really clean, it makes it a joy to read haha. The c++ std library is a nightmare with all their naming schemes

1613870086
g-w1
ok added a nix page

1613871120
g-w1
adamkowalski thanks! your config made lsp work for me

1613873213
Xavi92
After a few months without updating zig, I have noticed a format specifier is now required e.g.: `{s}` or `{d}`. What's the rationale behind this change? From first sight, this looks like a step backwards, since `{}` should be enough since zig's comptime is clever enough to guess the type underneath

1613873239
Xavi92
It looks a lot like the (insecure) format specifiers on C `%s` and `%d`, respectively

1613873329
daurnimator
Xavi92: it was due to a mission to removed the special cases for u8 inside of `std.fmt`. I agree that it seems a step backwards

1613873397
Xavi92
daurnimator: thanks for the quick reply. Which special cases?

1613873448
daurnimator
Xavi92: previously there was a "if slice: if u8, print as string else print as comma separated list of values"

1613873737
Xavi92
Hrm, I'm surprised the language got affected by an apparent quirk on its implementation, though

1613873806
daurnimator
Xavi92: essentially a side effect of zig having no "string" type and instead relying on slice-of-u8

1613873830
andrewrk
Xavi92, the insecurity of C printf specifiers is when using a user-provided format string. this is not a concern in zig because the format string is always comptime-known

1613873878
andrewrk
the problem with {} was that you could introduce bugs on accident because you expected a string but provided a non-string

1613873896
andrewrk
and this would only manifest at runtime in the form of a bug

1613873935
daurnimator
andrewrk: I thought it was more the inverse: people had a comptime function that e.g. printed arrays, and then when passed a u8 it would suddenly start doing something different

1613873981
Xavi92
andrewrk: that seems a valid reason. So I guess the compiler performs comptime checks even if `{s}` is passed to the format specifier and a non-string parameter is passed

1613874031
andrewrk
yes; the {s} makes sure that you pass something that makes sense to print as a string

1613874147
Xavi92
What about `{*}`, BTW?

1613874214
andrewrk
that means print it as a pointer address

1613874227
andrewrk
T@0xdeadbeef

1613874245
Xavi92
I understand. Thanks again!

1613875659
v0idify
is there date stuff in std? like iterating through months

1613875784
brzg
you can look through std/time.zig but i dont think so

1613875803
v0idify
yeah no, there's basically nothing there

1613875822
v0idify
ooh boy dates sure are fun

1613891726
komu


1613911002
tnorth_
Hey there. Trying to have a struct including a pointer to its own type, but I get `struct Foo depends on itself`. The code is: fn Test(comptime T: type) type { return struct { children : ?*[2]@This(); }; }

1613911115
tnorth_
If I write children: ?*[]@This(); it compiles, but according to the docs, this is for runtime known number of items. I want to have an array of pointer to such a structure, and I know that number at comptime. Reading the docs, I had the impression that *[2] bar is a pointer to 2 items of type bar. Here, the compiler shouldn't need to know more, or am I missing something?

1613911453
ifreund
no that should work, sounds like a compiler bug to me

1613911503
ifreund
though *[2]@This() is a pointer to array not array of pointers

1613911519
ifreund
you might want [2]?*@This()

1613911653
tnorth_
hmm ok thanks, I'll try with the latest build and file a bug if it still doesn't work

1613911697
tnorth_
btw, is it possible to have a pointer to different (known) types of data? probably not, right?

1613911765
ifreund
you mean one pointer type which could point to multiple different things? you need @ptrCast() for that

1613911784
ifreund
or you could just store a usize and use @ptrToInt()/@intToPtr()

1613911889
tnorth_
ok!

1613911893
tnorth_
thanks

1613911904
tnorth_
(that's what I meant)

1613916033
Swahili
Trying the hash map, checked the example (

1613916042
Swahili
Where: var map = AutoHashMap(u32, u32).init(std.testing.allocator)

1613916048
Swahili
what is the type of map?

1613916111
Swahili
similarly, while trying the stringhashmap, used @typeof, which gives me std.hash_map.HashMap([]const u8,[]const u8,std.hash_map.hashString,std.hash_map.eqlString,80)

1613916115
Swahili
is this the right way of doing this?!

1613916155
Swahili
if there's a more generic way of writing the type that's not that long

1613916170
ikskuh
the type is AutoHashMap(u32, u32)

1613916171
g-w1
AutoHashMap(u32,u32)

1613916183
ikskuh
const MyHashMap = AutoHashMap(u32, u32);

1613916187
ikskuh
MyHashMap.init(allocator);

1613916378
Swahili
For StringHashMap too?

1613916414
Swahili
std.StringHashMap([]const u8)

1613916453
ifreund
yes, it works the same way

1613916454
Swahili
Interesting, that worked

1613916467
ifreund
comptime functions are memoized which makes this work

1613916471
Swahili
Thanks for the help!

1613916484
ifreund
i.e. every invocation of std.ArrayList(u8) will return the same type

1613916497
Swahili
It'll take a few months, but learning slowly thanks to you people.

1613916706
Swahili
Looking at the source code (

1613916732
Swahili
is this a generic? saying that because of the syntax"type"

1613916751
g-w1
yes

1613916775
Swahili
type (the type of types),

1613916782
Swahili
just noticed :T interesting

1613917655
tnorth_
is it possible to define an int size using a comptime variable ? ie instead of var foo: u8; comptime ss: u8 = 8 ; var foo : u ss ?

1613917669
tnorth_
(the latter doesn't work)

1613917763
daurnimator
tnorth_: `std.meta.Int(false, ss)` ?

1613917794
tnorth_
daurnimator: I didn't know about that one, thanks!

1613917824
tnorth_
s/meta.Int/meta.IntType/ I guess

1613917845
dutchie
`pub const IntType = @compileError("replaced by std.meta.Int");` ?

1613918042
dutchie
you'll also want to write .signed or .unsigned instead of true/false

1613918299
g-w1
probably on different version

1613918514
daurnimator
Maybe I'll have to write it with allocations and tell people to use FixedBufferAllocator :/

1613919471
Xavi92
Hi, this might fit better on #vscode, but for some reason I can't toggle breakpoints on .zig files in codium. Is there anyone else having this issue?

1613919550
Xavi92
Alright, a quick search solved it:

1613919555
Xavi92
Thanks anyway!

1613920274
ifreund
/buffer 14

1613920277
ed_t
at what optimization levels are for (xxx) |*y| y.* = z; statements replaced with memset?  eg. does this only happen with ReleaseFast?

1613920296
ifreund
probably relase safe as well

1613920365
Swahili
Let's say that I have const Suit = enum { clubs, spades }, could I access the enum from the string literal "spades"? Of course not right?

1613920396
ifreund
Swahili: you can cause zig is awesome

1613920402
ifreund
std.meta.stringToEnum

1613920410
Swahili
wow! lol that's awesome!

1613920414
Swahili
I'll check that :D

1613920588
Swahili
Yeh it works! Thank you!

1613920706
ifreund
no problem!

1613920807
daurnimator
hmm... there's no way to make a method allow both `*Self` and `*const Self` is there

1613920816
daurnimator
in that the const-ness propagates to e.g. the return type

1613920896
ifreund
should be, pretty sure stuff in std.mem does that

1613920913
daurnimator
:( seems like I need to duplicate my function: `fn foo(self: *Self) *foo { return self.foo; } fn foo_const(self: *const Self) *const foo { return self.foo; }`

1613920942
ifreund
daurnimator: you can use @typeInfo() and @Type() build the return type

1613920967
ifreund
though then you need to take anytype... yeah I guess that's the issue

1613920970
daurnimator
ifreund: I can't though: if I don't use `*Self` in the signature then you don't get the automatic "take a reference when calling methods" behaviour

1613921016
daurnimator
if I had `fn foo(self: anytype) if(self==*Self) *foo else *const foo {` then you can't do `mytype.foo()`

1613921022
ifreund
this use case confuses me though, if *const works why not just use that?

1613921058
daurnimator
ifreund: sometimes you just want to read the result; sometimes you need to modify it

1613921101
ifreund
sound like that should definitely be two separate functions :P

1613921131
daurnimator
not really

1613921137
daurnimator
let me paste the actual code I'm now using

1613921154
daurnimator


1613921183
ed_t
ifreund looks like it is NOT happing with ReleaseSafe, if I am reading the valgrind, MachineCode output correctly.  Interestingly it looks like the preceed allocate does call a memset to set the allocation to undefined.  Is there a way to tell the allocator what value to set the allocation to?

1613921218
daurnimator
ed_t: zig emits special annotations for valgrind :)

1613921287
ifreund
ed_t: no you can't tell the allocator what to set the memory to. Note that that memset for undefined is a no-op in release fast/small

1613921362
ed_t
ifreund its also 4x faster that the loop zig uses later to set the allocation to 0

1613921367
v0idify
daurnimator, i get what you're trying to do and i think it should be possible but from an API perspective i would just leave it as is

1613921394
daurnimator
v0idify: I'm about to do it again.... with a heftier function body

1613921406
daurnimator
lots of duplicated code :(

1613921427
ifreund
daurnimator: does anytype as the first arg not allow foo.bar() syntax?

1613921472
daurnimator
ifreund: when it does you get a `Self` rather than a `*Self` or a `*const Self`: in this case the pointer value matters

1613921482
ifreund
ah I see

1613921503
daurnimator
though actually its worse

1613921513
daurnimator
foo.bar()

1613921521
daurnimator
==> you never get the mutable version

1613921545
daurnimator
what I want is if `foo` is mutable, foo.header() returns a mutable pointer; otherwise, foo.header() returns a const pointer

1613921561
ifreund
yeah I totally get your use-case now

1613921608
ed_t
according valgrind even release fast is not using memset for the loop (as you explained the memset for undefine is optimized out)

1613921669
ifreund
daurnimator: wait, why can't you take Self by value? you're not returning a pointer to the struct (at least not in the header() example)

1613921686
ifreund
unles data.ptr points into the struct...

1613921716
daurnimator
ifreund: even if foo is mutable I still get the Self by value

1613921727
daurnimator
oh wait... hmmmm

1613921756
ifreund
the question is whether self.data.ptr is mutable or not

1613921773
daurnimator
okay I think I have a better workaround

1613922141
v0idify
how do i turn numbers into strings

1613922161
ifreund
v0idify: std.fmt.bufPrint() or allocPrint()

1613922250
v0idify
hmm i'm `print`ing tho

1613922262
v0idify
wrong question, just need to check format docs

1613922287
v0idify
oh but i need to pad zeroes to id

1613922295
v0idify
it*

1613922298
v0idify
it's a date

1613922406
ifreund
v0idify: see the doc comment of std.fmt.format()

1613922444
v0idify
yup that's what i'm doing, holy this function is powerful

1613922551
v0idify
am i not supposed to call .close on fs.cwd()?

1613922576
ifreund
v0idify: no

1613922592
v0idify
yeah just read the doc comment (it doesn't show up in generated docs), why?

1613922616
ifreund
the generated docs are very incomplete, I recommend ignoring them and just reading the source

1613922942
v0idify
is there an inverse format? like parsing

1613923050
daurnimator
v0idify: not really. there's a parseInt though

1613923079
daurnimator
parsing needs lookahead; which means it doesn't have a straightforward inverse to serialisation

1613923204
v0idify
okay

1613923222
v0idify
memory leak reports from GPA are not giving a full stacktrac

1613923743
v0idify
this is a confusing error

1613923748
v0idify
error: type '?*std.hash_map.Entry' does not support field access

1613923749
v0idify
for (iter.next()) |kv| {

1613923764
ikskuh
for requires .len to be existent

1613923767
ikskuh
you want to use "while" here

1613923797
v0idify
oh wow

1613923812
v0idify
somehow i read the test cases on hash_map.zig multiple times without realizing that

1613931263
Swahili
Is it possible to create an array literal dynamically? std.ArrayList is the way to go?

1613931298
Swahili
(not knowing the array length)

1613931326
g-w1
arraylist

1613931372
ifreund
array length must be comptime known, you can create them dynamically at comptime but not at runtime

1613931440
Swahili
probably best to re-read

1613931543
ikskuh
Swahili: what do you want to achieve?

1613931562
ikskuh
array literals dynamically doesn't make much sense, as "literal" is a syntactical concept

1613931595
ikskuh
do you mean array (constant size), slice(fixed, but dynamic size) or resizable data structure?

1613931598
Swahili
ikskuh: sure :) just testing really

1613932581
marler8997
the C printf security issues don't apply to Zig because it does type verification at runtime (i.e. using {s} for an integer will be a compile error)

1613932613
marler8997
that was for Xavi92

1613932630
marler8997
*type verification at comptime

1613934206
cren
hi! do Zig strings give me a direct view onto the bytes? I want to make sure I'm manipulating the raw bytes and not characters

1613934353
Xavi92
marler8997: thanks for your reply :)

1613934594
ifreund
cren: if you're talking about string literals, they are of type *const [N:0]u8 where N is the length

1613934622
ifreund
so yes, you are manipulating the raw bytes

1613934745
cren
oh wait Zig doesn't have a `String` type does it? It's just character arrays...

1613934815
cren
oh, no it does.

1613934828
ifreund
zig has no language level string type

1613934859
ifreund
string literals are byte arrays as I said

1613934875
ifreund
usually slices of bytes are used to pass strings around

1613934918
cren
yeah I've just now realised I was double-wrong

1613935220
cren
I was referring to a `String` type which did not exist in a function that was never used, so the compiler wasn't catching it

1613935513
Thale
hello

1613935559
Thale
anyone here who fancies answering  some basic questions about slices vs. arrays vs. pointers again? I am still struggling to get it right more often than not

1613935592
Thale
suppose I have a buffer []u8, which holds my data

1613935613
Thale
and I want to now copy the first 4 bytes to a usize, the next 4 to a f32 etc.

1613935671
Thale
var value: usize = std.mem.bytesAsValue(usize, buffer[0..7]);

1613935690
Thale
This is what I tried, but the types are not correct like that, because bytes as Value expects an array

1613935778
ifreund
var value = std.mem.bytesToValue(usize, buffer[0..@sizeOf(usize)]);

1613935806
Thale
oh should have been 8 I guess

1613935807
Thale
not 7

1613935832
ifreund
yes, also bytesAsValue returns a pointer

1613935845
Thale
but still same as before

1613935847
ifreund
bytesToValue returns a value

1613935856
Thale
ah ok

1613935885
Thale
stil lgetting expected *[8]u8, passed []u8

1613935923
ifreund
can I see the exact code producing that error?

1613935936
ifreund
because what I sent should work

1613936056
Thale
D:\Software\Programmieren\zig-windows-x86_64-0.8.0-dev.1118+8661a13b7\zig-windows-x86_64-0.8.0-dev.1118+8661a13b7\lib\zig\std\mem.zig:2069:9: error: expected *[8]u8, passed []u8

1613936056
Thale
@compileError(std.fmt.bufPrint(&buf, "expected *[{}]u8, passed " ++ @typeName(B), .{size}) catch unreachable);

1613936057
Thale
^

1613936057
Thale
D:\Software\Programmieren\zig-windows-x86_64-0.8.0-dev.1118+8661a13b7\zig-windows-x86_64-0.8.0-dev.1118+8661a13b7\lib\zig\std\mem.zig:2077:77: note: called from here

1613936058
Thale
pub fn bytesAsValue(comptime T: type, bytes: anytype) BytesAsValueReturnType(T, @TypeOf(bytes)) {

1613936058
Thale
^

1613936059
Thale
D:\Software\Programmieren\zig-windows-x86_64-0.8.0-dev.1118+8661a13b7\zig-windows-x86_64-0.8.0-dev.1118+8661a13b7\lib\zig\std\mem.zig:2077:77: note: called from here

1613936060
Thale
pub fn bytesAsValue(comptime T: type, bytes: anytype) BytesAsValueReturnType(T, @TypeOf(bytes)) {

1613936060
Thale
^

1613936060
Thale
.\src\mesh.zig:429:71: note: called from here

1613936061
Thale
var parent_index: usize = std.mem.bytesToValue(usize, nodes_buffer[byte..@sizeOf(usize)]);

1613936072
Thale
is there a better way to paste code here?

1613936085
ifreund
use a pastebin, this is IRC

1613936096
ifreund
I see the problem though, you're using a runtime known index

1613936102
Thale
yes

1613936110
ifreund
you need nodes_buffer[byte..][0..@sizeOf(usize)]

1613936139
ifreund
slicing only gives you a pointer to array if both indicies are comptime known currently

1613936143
Swahili
Thale: use something like

1613936152
ifreund
though IMO it should only require the length to be comptime known

1613936159
Thale
ahh, that makes sense

1613936211
Thale
cool, that works, yes, the byte is just supposed to be an offset

1613936229
Thale
thanks!

1613936246
ifreund
no problem!

1613936352
ifreund
(aside, I was being dumb. we slice with start/end indexes in zig so both must be known to know the length)

1613936551
v0idify
how do i easily sort dates :#

1613936607
Thale
well if i did byte..byte+8, you know that the length is 8 independent of byte I guess?

1613936617
Thale
but yeah I see what's the issue now

1613936641
v0idify
nvm i don't need it yet

1613936692
g-w1
I think a lot of things would be easier if the self-hosted compiler imported "std.zig" instead of "std". this would help with zls completions because it has the right version of std and makes it slightly easier to build zig

1613936704
g-w1
is there anything not making that happen?

1613936777
ifreund
g-w1: well for one, that wouldn't be possible with the current directory structure

1613936792
g-w1
could you override the "std"?

1613936838
ifreund
@import("std.zig") outside of the std itself also feels super icky to me

1613936925
g-w1
well then @import("std") but overriding std; <- would that be better

1613936995
ifreund
I don't see the point

1613937031
ifreund
you should only be using the the compiler built from the same commit you are working off of to develop stage2

1613937058
g-w1
zls sees import std as the std system location

1613937083
g-w1
its not that big of a problem

1613937248
cren
how should I check two strings for equality in the sense "all the same characters in the same order"?

1613937401
g-w1
std.mem.eql(u8, str1, str2)

1613937524
earnestly
encoding

1613937545
g-w1
utf8?

1613937587
earnestly
Who knows, are both even encoded the same?

1613937604
earnestly
Do zero-width spaces count?

1613938723
v0idify
float value 1.100000 cannot be coerced to type 'i64'

1613938775
ifreund
@floatToInt()

1613938788
v0idify
oh my god of course

1613938801
v0idify
for some reason my brain said "oh i64, totally a float"

1613938820
ifreund
heh

1613938955
v0idify
what is wrong with me @intToFloat(i64, num)

1613939068
ifreund
must be opposite day where you're living :P

1613939744
Swahili
Is there a good read on error handling in Zig? The docs got me started but, I'm not sure if I'm doing it correctly. But this might be due to my application flow and my own decisions over when to use catch for default, etc.

1613939747
v0idify
is there a way to get something from an array without failing when it's out of bounds?

1613939828
ifreund
v0idify: const result = if (i < foo.len) foo[i] else default;

1613939891
ifreund
Swahili: just do what makes sense, there are no hard and fast rules to follow. Zig is a very pragmatic language

1613939947
Swahili
ifreund: ok ;)

1613941422
andrewrk
you'll know if you hit a hard and fast rule: the compiler will spit an error at you :)

1613948571
andrewrk
alright! #7920 is down to only the remaining zig fmt failing cases

1613948583
andrewrk
ifreund, I'm about to take on a new task, do you have anything W.I.P. for me to avoid?

1613948764
ifreund
andrewrk: not right now, let me know what you start on though

1613948772
ifreund
was distracted by river today :)

1613948809
andrewrk
sounds like a worthwhile distraction! I'll start on the "recovery" test cases

1613948825
andrewrk
I think we are very close to merge ready

1613948842
andrewrk
and then R.I.P. ZLS

1613949216
g-w1
what does recovery mean?

1613949349
andrewrk
the use case is an IDE wants to still have an AST even when there are parse errors because the programmer is in the middle of editing

1613949372
andrewrk
so it means emitting parse errors but still completing parsing and recovering the meaning of the tokens after the error

1613949377
g-w1
oh, makes sense, that is a very good feature

1613950014
noam
andrewrk: awesome work! :)

1613951124
andrewrk
48 failing zig fmt test cases left

1613951342
daurnimator


1613951703
earnestly
daurnimator: ~cks too that blog as an opportunity to claim that what this package maintainer is really saying is, "you should do more work for us and limit the features (and reliability) of your software"

1613951721
earnestly
Which is about what I suppose ought to be expected from developers who think they should bundle libraries

1613951736
daurnimator
"~cks"?

1613951741
earnestly
daurnimator:

1613951809
earnestly
I find it rather tasteless given how much I've seen maintainers contribute patches and fixes upstream to support new versions

1613951844
earnestly
But if anything it provides, maybe, a median insight into how these people think

