1632912745
flyx[m]!~flyxflyxo@mail.flyx.org
so… getting EXC_BAD_ACCESS in zig`get_pointer_to_type_extra2 is a compiler bug, right?

1632916549
bfiedler!~bfiedler@2a0d:d740:107::3
Can I extend the members/functions of a struct from a different source file?

1632917479
daurnimator!~daurnimat@vultr.daurnimator.com
bfiedler: methods or fields, pick one. methods use `usingnamespace`, fields use @Type

1632917564
bfiedler!~bfiedler@2a0d:d740:107::3
daurnimator: methods it is, thanks!

1632917581
daurnimator!~daurnimat@vultr.daurnimator.com
note that `usingnamespace` may be going away soon

1632917615
bfiedler!~bfiedler@2a0d:d740:107::3
Good to know. Is there an alternative planned?

1632917625
daurnimator!~daurnimat@vultr.daurnimator.com
intentionally no.

1632917632
bfiedler!~bfiedler@2a0d:d740:107::3
I was afraid of that

1632918778
bgiannan!giann@2a01:4f8:141:1272::2
With a StringHashMap, is it intended that if i free the string i used a a key, the key also dissappears in the map?

1632919844
bgiannan!giann@2a01:4f8:141:1272::2
it's really unintuitive if so

1632919928
Gliptic!~glip@irc.glip.cc
that sounds more like use-after-free that happened to behave like that

1632920249
luuk!~luuk@user/luuk
The hashmap doesn't own, nor manage the memory of its keys or values. So by free'ing the memory of key, the key is essentially pointing to bogus data. So what Gliptic said is correct. 

1632920325
Gliptic!~glip@irc.glip.cc
the string data probably got mangled so that the string no longer compares equal and appears to not be in the map, while the value is still in there

1632921252
bgiannan!giann@2a01:4f8:141:1272::2
shouldn't it compare hashes and not strings ?

1632921283
bgiannan!giann@2a01:4f8:141:1272::2
why would the hashmap need to keep the original keys other than to retreive them with .keys() ?

1632921344
Gliptic!~glip@irc.glip.cc
comparing hashes is not enough

1632921363
bgiannan!giann@2a01:4f8:141:1272::2
how so?

1632921364
Gliptic!~glip@irc.glip.cc
and why would it need to keep the original keys.. because it needs to compare keys

1632921366
daurnimator!~daurnimat@vultr.daurnimator.com
bgiannan: hash collision

1632921397
daurnimator!~daurnimat@vultr.daurnimator.com
bgiannan: 1. when a hash collision occurs you have to compare the full string. 2. if you want to iterate over keys + values you still need a reference to the key

1632921451
bgiannan!giann@2a01:4f8:141:1272::2
noted

1632921491
bgiannan!giann@2a01:4f8:141:1272::2
maybe i'll wrap the StringHashMap in a OwnedStringHashMap where it takes ownership of the keys as well

1632922126
ifreund!~ifreund@user/ifreund
bfiedler, daurnimator: usingnamespace isn't going away and has already been changed to make it not problematic for incremental compilation on master branch

1632922153
ifreund!~ifreund@user/ifreund
see https://github.com/ziglang/zig/issues/9629 and the PR implementing it 

1632922171
ifreund!~ifreund@user/ifreund
it may get renamed to mixin though, I should probably open a proposal for that.

1632922215
ifreund!~ifreund@user/ifreund
bgiannan: see std.BufMap

1632922233
ifreund!~ifreund@user/ifreund
even if you don't use it directly, it may be nice for inspiration

1632922249
ifreund!~ifreund@user/ifreund
note that manually managing the memory for strings is often more efficient though

1632922260
ifreund!~ifreund@user/ifreund
s/strings/keys/

1632924883
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, i'll look into it thanks

1632927189
bw!sid2730@user/betawaffle
hmmmmm: `error: use of undeclared identifier '_IOWR'`

1632927207
bw!sid2730@user/betawaffle
has anyone tried to use userfaultfd from zig?

1632928413
daurnimator!~daurnimat@vultr.daurnimator.com
do we have pointer subtraction yet?

1632928536
daurnimator!~daurnimat@vultr.daurnimator.com
nope :/ https://github.com/ziglang/zig/issues/1738

1632928615
daurnimator!~daurnimat@vultr.daurnimator.com
one of those times when you google something and find a post from yourself 

1632928926
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
do you want pointer subtraction to spite kristate? lol

1632932048
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
ifreund: I thought usingnamespace was going to be turned into importnamespace. That would certainly reduce confusion for people coming from C++.

1632932153
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Though really, it might be better with a name that doesn't imply the module with the keyword can use symbols from the namespace. exportable namespace?

1632932158
ifreund!~ifreund@user/ifreund
leeward: the semantics change has already been made, the name change is still up in the air. You can find my thoughts in the issue I linked

1632932180
ifreund!~ifreund@user/ifreund
tldr; I like "mixin" or "includedecls"

1632932280
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ah, I see. I hadn't read that far down in the comments.

1632932467
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I do kinda like mixin for its terseness and lack of agglomeration. includedecls is still not pretty, but it's an improvement.

1632932493
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I did know about the semantics change; I had to update all my code.

1632932516
ifreund!~ifreund@user/ifreund
I'll put this in a proposal, I've been meaning to get around to that

1632932559
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
is there a document on alignment anywhere

1632933065
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig/issues/9861

1632933077
ifreund!~ifreund@user/ifreund
haze: I don't think so, what are you curious about?

1632933091
ifreund!~ifreund@user/ifreund
alignment in general or how zig's type system handles it?

1632933097
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
both

1632933148
ifreund!~ifreund@user/ifreund
well, here's a wikipedia article: https://en.wikipedia.org/wiki/Data_structure_alignment

1632933246
ifreund!~ifreund@user/ifreund
I think if you have a good understanding of what alignment is in general zig's type system should seem pretty straightforward once you learn the syntax

1632933294
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
alright let me read this, my meeting is ending

1632937209
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Huh, the more I think about it, the more I like mixin.

1632937272
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It is still going to confuse people though, since struct members can't refer to mixed-in names.

1632937332
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
like the special cased writer with u8?

1632937336
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
or reader i forget

1632938128
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
not sure what you're referring to

1632940529
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
me neither tbh

1632940550
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
:P

1632943534
andrewrk!~andrewrk@mail.ziglang.org
yoooo lemonboy is back

1632943629
luuk!~luuk@user/luuk
We're saved!

1632943637
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
woot

1632943756
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
\o/

1632944202
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
And he's commenting in my PR.

1632944209
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Hooray, someone cares!

1632944336
marler8997!~marler899@204.229.3.4
LemonBoy just left a comment!! yay he's alive!

1632944956
andrewrk!~andrewrk@mail.ziglang.org
what a great day to be alive

1632944975
andrewrk!~andrewrk@mail.ziglang.org
I can almost smell the citrusy scent wafting through my window now

1632945048
freshcoffee!~fresh@user/freshcoffee
heheh

1632945155
companion_cube!~simon@user/companion-cube
:D

1632945175
companion_cube!~simon@user/companion-cube
don't get confused with limeboy though

1632945199
freshcoffee!~fresh@user/freshcoffee
did LB ever get a real computer or still stuck on that < 8GB toy and needing to exit GUI desktop to do build zig? :P

1632945602
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
yes i bought him an m1 

1632945678
freshcoffee!~fresh@user/freshcoffee
👍

1632945706
andrewrk!~andrewrk@mail.ziglang.org
haze, did you really?

1632945723
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
no but if he wants one i will

1632945728
andrewrk!~andrewrk@mail.ziglang.org
I can never tell when you're being serious

1632945734
freshcoffee!~fresh@user/freshcoffee
oh well make sure it's a 16 GB model :P

1632945739
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
the more ominous aspect is how i was able to contact him while MIA

1632945768
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
freshcoffee if anything waiting until the end of 2022 for the new 14 inch and m1x/m2 variants

1632945786
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i was looking for a laptop to run some bsd on and why is a 7th gen x1 carbon still like $1500

1632946109
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Chip shortages?

1632946119
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That was a decent laptop, but...yeah

1632946164
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
2019, right?

1632946246
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
maybe

1632946248
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
idr

1632952244
bgiannan!giann@2a01:4f8:141:1272::2
is it better to always define what error a function can return or to let the compiler infer it ?

1632952293
bgiannan!giann@2a01:4f8:141:1272::2
for example sometimes the compiler says: `cannot resolve inferred error set` and i can either use `anyerror` or define all possible errors myself

1632952299
ifreund!~ifreund@user/ifreund
for public API, making the set explicit is definitely better

1632952321
ifreund!~ifreund@user/ifreund
that error message usually comes up with recursive functions, the stage1 compiler isn't smart enough to solve those

1632952352
ifreund!~ifreund@user/ifreund
in that case an explicit error set is always better even if it is more work

1632952444
bgiannan!giann@2a01:4f8:141:1272::2
right, so here comes a thousand function signature to fix then :)

1632952620
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
there is a proposal to make public functions not have their error sets inferred iirc

1632952634
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
there have definitely been moments though where the error sets get hairy tho

1632952699
andrewrk!~andrewrk@mail.ziglang.org
bgiannan, I don't think you need to fix all the function signatures; you just need to break a recursion cycle

1632952706
bgiannan!giann@2a01:4f8:141:1272::2
yes

1632952846
bgiannan!giann@2a01:4f8:141:1272::2
i'm not really a fan of ! error set inferring... feel like having a `fn some() !bool` does not give me a lot of information

1632952870
bgiannan!giann@2a01:4f8:141:1272::2
and i have to navigate the code pretty far to find out what error i can get

1632952896
bgiannan!giann@2a01:4f8:141:1272::2
or use the empty switch case trick so that the compiler tells me which error i can get

1632952915
andrewrk!~andrewrk@mail.ziglang.org
the compiler can tell you all the possible errors at any point. just need a bit more tooling and integration with editors

1632952924
bgiannan!giann@2a01:4f8:141:1272::2
right

1632952927
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
couldn't you stuff a compileLog on the return type  after its inferred?

1632952937
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
or is that before the inference 

1632953030
bgiannan!giann@2a01:4f8:141:1272::2
i feel like requiring to always define error set would: 1. force user to always think about what error can be returned, 2. would give all the information needed without any LSP running (for example: reading a diff on github)

1632953065
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
also gotta think about developer flexibility 

1632953074
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i personally dont mind but there are others who dislike the idea

1632953087
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
see: people who want -hackmode or something

1632953103
bgiannan!giann@2a01:4f8:141:1272::2
right

1632953142
bgiannan!giann@2a01:4f8:141:1272::2
i learned that it's better to force user to be explicit rather than letting the compiler do the work for them

1632953158
bgiannan!giann@2a01:4f8:141:1272::2
one example of this i have at work currently

1632953159
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
compiler bdsm

1632953205
bgiannan!giann@2a01:4f8:141:1272::2
in dart you can do: var myVar = SomeThing() or SomeThing myVar = SometThing()

1632953216
bgiannan!giann@2a01:4f8:141:1272::2
var doesn't seems so bad here

1632953219
bgiannan!giann@2a01:4f8:141:1272::2
but consider

1632953232
bgiannan!giann@2a01:4f8:141:1272::2
var myVar = a.complex.set.of.actions()

1632953243
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
you can do this in zig too

1632953246
bgiannan!giann@2a01:4f8:141:1272::2
now without LSP you don 't know what type myVar is

1632953267
bgiannan!giann@2a01:4f8:141:1272::2
says actions() changes in the future

1632953292
bgiannan!giann@2a01:4f8:141:1272::2
you'll notice the issue at runtime

1632953311
bgiannan!giann@2a01:4f8:141:1272::2
whereas if you explicitly said : SomeThing myVar = a.complex.set.of.actions()

1632953317
bgiannan!giann@2a01:4f8:141:1272::2
the compiler would have stopped you

1632953339
bgiannan!giann@2a01:4f8:141:1272::2
so yeah in in zig i rarely let the compiler infer types for me

1632953437
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
even when doing

1632953443
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
var writer = file.writer(); ??

1632953466
bgiannan!giann@2a01:4f8:141:1272::2
rarely i said :)

1632953483
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i dont have my glasses on forgive me

1632953486
bgiannan!giann@2a01:4f8:141:1272::2
i especially specific when it's my code actually

1632953493
bgiannan!giann@2a01:4f8:141:1272::2
i'm*

