1612483493
zags
Would it make sense for Zig to have a (semi) official std-extensions library? Not std, but many projects would add it as a dependency. This would help focus efforts on large items such as WebSockets, http, tls. Kind of like the boost library. Over time, certain could migrate from std-extensions to std. It would be driven by senior community members.

1612483532
zags
So a small and portable std, but also a well-maintained larger library with commonly used features that doesn't fit std.

1612483564
zags
It encourages people not to duplicate effort (like 15 http server)

1612483574
zags
servers*

1612483618
zags
certain things* geez

1612483759
fgenesis
oh gosh someone said boost

1612483775
zags
it's a big fat life saver

1612483785
terinjokes
that might be asking a bit much from where the community and language are

1612483803
zags
this is post 1.0

1612483816
zags
but having a structure for it to happen earlier would be nice

1612483900
g-w1
i think it would make more sense to have a go-to http library that zig endorses

1612483916
g-w1
i dont think 1 central library is a good idea

1612483948
zags
why not?

1612483955
zags
it's proven to help focus effort

1612483981
zags
and it requires review and a certain level of quality

1612484045
terinjokes
if there's a good http server at satisfies the needs of the community, it will natually be the one the community uses. zig doesn't have to do anything.

1612484046
zags
(not thinking about one big library, more like a std-extension repo where people can join efforts to create high quality libraries)

1612484086
zags
terinjokes: there's already a tendency to create several half-assed attempts. Like several command line parsers, etc, etc

1612484195
terinjokes
and that's a problem because?

1612484235
terinjokes
zig is still relatively new, in a lot of causes people are still trying to figure out what zig-like is

1612484236
zags
because you end up with low quality, non-maintained libraries

1612484244
zags
terinjokes: i'm talking about post-1.0

1612484283
zags
not saying std-extensions would be "everything out there", just the main things, like encoding, url parsing, http clienter/server, ...

1612484375
zags
boost maintainers never leave because they see it as a priveledge :) and the work is still scrutinized before shipping updates. I think it works great.

1612484521
terinjokes
i just see the community building high quality libraries, just like they do in other languages, some of which will be absored into std. i don't think there needs to be an "official" extension

1612484594
fgenesis
i'd prefer many small isolated libs that do one thing well over one large behemoths any day

1612484621
fgenesis
the fact there exists a tool like bcopy to cleanly copy components out of boost if you don't want the whole thing speaks volumes

1612484628
zags
Again, I'm talking about the really core things everybody uses, base64, url parsing, http server. No need to have several of those.

1612484632
fgenesis
too. fucking. complicated.

1612484641
fgenesis
noody uses base64 and implementing this is 10 lines

1612484643
fgenesis
*nobody

1612484650
zags
fgenesis: i'm not advocated copying boost the library, only the process, but I think you understood that

1612484660
fgenesis
aye

1612484671
zags
it would be self-contained, reviewed, maintained core libraries not in std

1612484673
zags
that's all

1612484682
fgenesis
zpm when :D

1612484710
terinjokes
base64 already exists in std anyways

1612484717
zags
so bad example

1612484720
zags
lots of other examples

1612484729
terinjokes


1612484733
zags
fromHex is not for instance :)

1612484735
fgenesis
if this thing ever gets made i vote to call it "booze" just to fuck with everyone

1612484779
zags
awww, i was hoping for "zag"

1612484784
zags
you zig better with zag

1612484821
terinjokes
and std.fmt.hexToBytes exists too

1612484838
terinjokes
i know i'm being pedantic

1612484842
terinjokes
sorry

1612484852
fgenesis
you're good, you're not Wall

1612485061
zags
terinjokes: yeah, you seem to miss the point, but you also keep teaching me about the stuff in std so it's all good

1612485424
terinjokes
i don't think i'm missing the point. i just don't think there needs to be a meta project to accomplish your goals of having high-quality libraries

1612485471
zags
situation in other languages says otherwise

1612485495
terinjokes
go and rust both have many high-quality libraries

1612485508
zags
and also a lot of low-quality libraries

1612485515
zags
and lots of duplicate effort

1612485526
zags
don't mind that, just senseless for the core stuff everyone needs

1612485760
ifreund
pretty sure http in the std is planned for the package manager

1612485798
zags
client only right?

1612485805
ifreund
in general though, the std will probably get a good bit leaner before 1.0

1612485818
ifreund
zags: don't think that's 100% decided yet

1612485827
ifreund
though quite possibly, yeah

1612485853
zags
alright

1612485877
ifreund
there's also the fact that the zig community is intentionally decentralized

1612485926
ifreund
I think it would be cool if people chose to organize themselves into maintaing a set of high-quality std-adjacent libraries though

1612485938
ifreund
it certianly wouldn't need official support

1612485948
terinjokes
all the http servers i've seen in zig so far have already consolidated around one library for http parsing (excepting mine, because that library didn't exist yet)

1612485949
zags
that would be ideal, but unlikely to happen without guidance

1612485997
ifreund
hzzp?

1612486093
ifreund
anyhow, I personally just work on whatever is currently blocking me from doing what I want. So far that's only been wayland related stuff and std contributions

1612486126
ifreund
I'll probably branch out more once my compositor is more feature complete

1612486148
zags
ifreund: damn you're the guy from showtime

1612486151
zags
that was awesome

1612486222
ifreund
thanks, I guess zig showtime is my claim to fame :D

1612486282
zags
;)

1612486297
ifreund
we've got a zig room for fosdem this weekend by the way, I've got another talk lined up for that about getting rid of all the void pointer casting

1612486320
zags
will it be streamed live?

1612486330
terinjokes
i missed the notification for that, otherwise I would have dealt with pentabarf again to submit something

1612486354
ifreund
I've recorded the talk which will be streamed live on saturday, followed by live q&a

1612486393
zags
got a handy link?

1612486394
ifreund
ikskuh and kubkon also have cool things to talk about :)

1612486413
terinjokes
i'll be tuning in regardless

1612486415
ifreund


1612486540
zags
nice

1612487719
viashimo
I have some data in a const array that is not what I expect, and I'm not really sure why. It's not super easy to read, but the first bytes of the '3d vertices' should be non-zero, similar to the 2d vertices:

1612489518
viashimo
if I switch from packed structs to extern it works

1612490272
fengb
Probably packed struct bugs

1612490302
fengb
Vec3 is probably padded to 16 bytes

1612497027
geemili
I'm trying to compile some async code for WASM, and I'm getting this error: Stored value type does not match pointer operand type!

1612520335
zags
|*item| what's the star here called language-spec wise? The docs seems to indicate a reference, but it doesn't say what a reference actually is.

1612520411
zags
is it more like "give me a pointer to that item" ?

1612520439
daurnimator
zags: yep

1612520475
zags
alright, in that case, why isn't the syntax |&item| ? The *item looks like dereferencing and Zig uses & to get the address elsewhere

1612520504
daurnimator
fair question. I don't think that syntax has been proposed for it before

1612520527
daurnimator
I think `|*const item|` is also valid

1612520575
zags
I see, feels like it should be & but may be missing something

1612520585
ifreund
don't think |*const item| is a thing

1612520620
daurnimator
zags: I remember when learning zig `|captures|` was very undocumented in the manual. I think I checked a few weeks ago and it was still missing

1612520645
ifreund
it's demonstated in the for and while loop examples iirc

1612520676
zags
right, docs will be fixed, but it just weird to have a dereference-like syntax for getting the address

1612520689
zags
s/address/pointer to

1612520689
ifreund
dereference is foo.* though

1612520701
daurnimator
zags: when reading zig, I read `*` as "a pointer to"

1612520709
ifreund
this is more like declaring a variable as a pointer than taking the address of something

1612520719
zags
ifreund: yes, but it's still * for dereference and & pointer-to elsewhere

1612520728
zags
and C programmers are used to *item as dereference

1612520737
zags
*item just looks wrong on multiple levels :)

1612520745
ifreund
*i32 in zig is a pointer to i32

1612520750
ifreund
&i32 is not a type

1612520762
daurnimator
e.g. `const foo: *T` I read as "the constant foo is of type a pointer to T"

1612520764
zags
but item is not a type

1612520776
daurnimator
zags: yeah its a good point

1612524643
ifreund
andrewrk: I'm poking at array initialization for the zig fmt refactor by the way, just letting you know to hopefully avoid duplicated work

1612527530
dch
in CMakeLists.txt, here

1612527569
dch
when building from the latest tarball, I'm ending up only with 0.8.0 in `zig version`

1612527616
ifreund
dch: it should be something like 0.8.0-dev.1071+7069459a7 for master builds

1612527633
ifreund
at least that's what I get building from the git repo

1612527633
dch
exactly

1612527661
ifreund
I guess when building from the tarball there is no git history...

1612527683
dch
ifreund: I only get that when building from git, though, so the tarball doesn't have the git goodness

1612527849
dch
OK this does what I want, `cmake -G Ninja . -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/usr/local/llvm11 -DCMAKE_INSTALL_PREFIX=(pwd -P)/release     -DZIG_VERSION="0.8.0-dev.1120+300ebbd56"  -DZIG_STATIC=ON`

1612528011
ifreund
nice, you packing zig for something?

1612528019
ifreund
*packaging

1612528146
dch
yep, it's the last piece for having a lang/zig-devel in freebsd ports that I update every few days. also I can easily test my sh*t against latest zig to keep track on whats changing

1612528186
ifreund
nice :)

1612528218
ifreund
I wonder if river builds on freebsd currently, that would be good to test before a first release...

1612528259
dch
ifreund: it's already in ports,

1612528281
dch
updated yesterday, but presumably still using zig 0.7.1

1612528299
ifreund
oh sick, I love jbeich

1612528337
ifreund
I should probably set up freebsd CI to make sure I don't break it

1612528337
dch
I've not met him, but maybe this year we have a euroBSDcon again

1612528369
ifreund
I don't know him really, I just see him pop up everywhere packing wayland stuff and fixing freebsd compat issues

1612528378
dch
he's a compiler-patching daemon

1612529857
zags
compiler greeted me with "error: TODO implement inferred return types" but 447 is closed :)

1612529953
ifreund
heh

1612530389
zags


1612530394
zags
what am I missing? :)

1612530479
ifreund
zags: might work if you declared your accumulator argument to be anytype

1612530509
zags
ifreund: using what return type?

1612530530
zags
oh, you mean anytype instead of function signature?

1612530568
ifreund
yeah

1612530603
zags
oh yeah, and I guess I can add some compile-time checks so the signature makes sense and give a nice error message if not

1612530613
zags
that'll work, thanks

1612530629
ifreund
no problem!

1612530634
zags
does std have any of these <algorithm> like functions?

1612530652
zags
i'd like to accumulate, filter, map, fold, zip, etc

1612530667
ifreund
nope

1612530687
zags
and no library out there for it? guess i'll write something then :)

1612530708
ifreund
go for it!

1612530880
zags
it's maddening that comptime_int doesn't coerce to type that it obviously fit in

1612530984
ifreund
it does?

1612531018
g-w1
I think it is a bigint right?

1612531065
zags
yeah, but I feel like I should be able to write

1612531069
zags
std.testing.expectEqual(120, accumulate(@as(u64,1), list, mul));

1612531088
zags
when the type of the second argument is u64 and 120 clearly fits

1612531108
zags
instead I have to sprinkle test code with mindless @as(f64, x) tests

1612531120
ifreund
that's because the of the signature of expectEqual()

1612531155
ifreund
if it took a concrete type instead of anytype it would corecer without the @as()

1612531183
zags
i understand there are reasons, still maddening :D

1612531193
ifreund
for example, (though this is improper usage) std.testing.expectEqual(accumulate(@as(u64,1), 120, list, mul));

1612531250
zags
i'm reversing order of args, but it's less readable, i like the constants first

1612531299
zags
std.testing.expectEqual(accumulate(@as(f64,1), list, mul), 150);  works, because, as you say, of the signature of expectEqual

1612531322
ifreund
putting the expected result first is also the proper way to use this api

1612531334
ifreund
my example was just to demonstate why the @as() was required here

1612531358
ifreund
I don't like this testing API either fwiw, @as() everywhere is ugly

1612531690
zags
aye

1612531832
zags
a 5u64 postfix syntax would be another option

1612532045
ifreund
I think that would be unlikely to be accepted for reasons of orthagonality

1612532423
zags
it could be accepted for reasons of pragmatism :)

1612532493
zags
orthagonality and generality isn't always the right choice

1612537645
zags
decided to write up the discussion points,

1612537944
g-w1
why is scoping in while loops a danger?

1612538052
g-w1
there is no variable shadowing

1612538436
zags
variable reuse

1612538444
zags
it's why c99 got it

1612538452
zags
(init decl)

1612538455
g-w1
that doesn't cause bugs though

1612538460
zags
yeah it does

1612538464
g-w1
how

1612538503
zags
because you refactor and start off with a new while (i < 0) and it compiles because there's an existing i in scope which you just forgot to reinitialize

1612538516
zags
having an init-clause naturally makes you declare a scoped counter

1612538565
zags
others also mentioned having seen bugs because of it when it was discussed earlier

1612538570
g-w1
ok

1612538815
fengb
I don't think I've ever encountered a bug with reinitialize

1612538885
zags
Others have, I think unnecessary pollution of outer scope is obviously a bad idea

1612538889
fengb
Lambdas:

1612538950
zags
how does "accumulate(1, list, (a,b) => a*b)" look under that proposal?

1612538986
fengb
accumulate(1, list, fn (a,b) { return a * b; })

1612539003
fengb
Er... fn (a: T, b: T)

1612539038
zags
I see, probably good, I'll updte with a link to the issue - thanks

1612539071
fengb
No closure captures though, that would require some automatic lifetime management

1612539080
zags
yep

1612539120
fengb
There's a macro proposal for limited scoped "closures":

1612540965
zags
fengb: that looks v nice

1612542846
Snektron
nice writeup, agree with most of the points

1612542889
mikdusan
kinda like ruby trailing blocks

1612542931
fengb
We should name them something other than macros

1612542939
fengb
Cause then we can't keep saying we don't have macros

1612543026
mikdusan
i know right

1612543231
ifreund
stack captures

1612543243
companion_cube
ruby blocks would still be nicer

1612543254
companion_cube
better power-to-weight ratio for closures that never survive the stack frame

1612543254
ifreund
keyword could be just capture

1612543296
companion_cube
(well this looks like blocks, but without the ability to state `break`? or would it?)

1612543762
mikdusan
i'd rather keyword `block` over `macro`

1612544490
fengb
But we already have blocks

1612545152
companion_cube
not the same blocks

1612545168
companion_cube
(I mean, unless current blocks are already parametrized?)

1612545350
fengb
No, but the name is taken ;)

1612545366
mikdusan
but the keyword is not :P

1612545472
mikdusan
not all blocks are stack-local-functions (frame functions?)  but when they are, we use the keyword block

1612545573
mikdusan
strictly speaking does #6965 allow for no-captures and no-params?

1612545574
companion_cube
better than frame functions!

1612545577
companion_cube
frame coroutines :)

1612545594
companion_cube
at least in crystal (and ruby I guess)

1612545619
companion_cube
the function that takes a block as argument (e.g. `foreach`) calls `yield` to pass stuff to the block

1612545631
companion_cube
which can therefore have internal state preserved between yields

1612545644
companion_cube
and conversely the block can break/return/continue (and try)

1612545687
ifreund
woot! found the parser bug that had me stuck for an hour

1612545732
mikdusan
and who says a little bike shedding on the side doesn't yield results?

1612545801
ifreund
well I'm working on andrewrk's ast refactor branch so I'm not sure this counts as bikeshedding

1612545826
mikdusan
no i mean this block keyword thingee is the bike shedding and it made you productive on the parser :)

1612545863
ifreund
heh :D

1612545905
fengb
Lets call it a bikeshed

1612545910
mikdusan
ftw

1612550448
andrewrk
ifreund, I hope we picked test cases that don't conflict!

1612550480
andrewrk
I'm on container decls right now ( struct{}, union(enum){}, etc)

1612550533
g-w1
any idea why this is tripping? ../src/zig_llvm.cpp:1175:1: error: static_assert failed due to requirement '(llvm::Triple::ArchType)ZigLLVM_hexagon == Triple::hexagon' ""

1612550536
g-w1
static_assert((Triple::ArchType)ZigLLVM_hexagon == Triple::hexagon, "");

1612550541
g-w1
asking for #7961

1612550689
andrewrk
g-w1, it means compiling against a patched or wrong version of LLVM

1612550697
g-w1
thats what I thought

1612550713
andrewrk
that static assert protects our enums in the corresponding .h file because we need the enum items to match

1612550770
andrewrk
ifreund, oh I see you told me you picked array initialization. thanks! :)

1612551043
ifreund
andrewrk: Yeah, PR's already up for that, I'm looking at ArrayType and ArrayTypeSentinel next

1612551110
andrewrk
nice work and thank you very much

1612551188
ifreund
no problem, helping to get self-hosted feature complete is in my best interests :D

1612553613
ifreund
andrewrk: put up another PR for array types, I don't think I understand how comments should be rendered though

1612553627
andrewrk
oh yeah I think I left that as a TODO for myself inside renderToken, don't worry about it

1612553645
andrewrk
if you pick up another test case, lmk which one so we don't conflict - I'm still on container decls

1612553670
ifreund
I added some TODOs for comments in struct/array init since they'll need special handling for comments

1612553686
ifreund
andrewrk: will do, I'm gonna cook some food first though

1612553704
andrewrk
cool cool

1612557668
ifreund
andrewrk: I think I'm going to start on pointer types now

1612557683
andrewrk
ok

1612559267
dvaun
ooh I just saw that Zig has a devroom at fosdem

1612559338
ifreund
indeed :)

1612559434
dvaun
Ah you're giving the talk on Zig and wayland? Cool :) depending on the schedule with my family I may attend

1612559514
zags
waycool

1612560116
ifreund
:D

1612560960
dvaun
Ah, I see it'll be ~4:45am UTC-8

1612562274
ifreund
should be recorded if you don't feel like being awake at 4:45 :D

1612564620
ifreund
andrewrk: got distracted but back at work now. I'm not sure I understand your intention with the PtrType tags though, it seems like they aren't granular enough:

1612564658
andrewrk
which syntax for example?

1612564659
ifreund
how do I tell if a node with tag PtrTypeAligned is a pointer-to-one or a pointer-to-many?

1612564671
andrewrk
poke around in the token_tags array

1612564684
ifreund
ah right, thanks

1612564698
andrewrk
one of my realizations was that we only need sub expressions when the tree structure would prevent that from working

1612564733
andrewrk
have a look at the ast.zig code for var decls which does a bit of poking around and finding other keywords

1612564759
ifreund
Yeah I see how to do it now, I just forgot I can poke around at the tokens

1612564760
andrewrk
I'm getting close with ContainerDecl btw

1612564766
ifreund
cool :)

1612565267
andrewrk
ifreund, done. I'm taking a lunch break, will make note of which one when I start another test case

1612565292
andrewrk
there might be some minor conflicts, but they should be easy to resolve I think

1612565306
andrewrk
fixed a firstToken bug with .Comptime too

1612565329
ifreund
cool, I'll rebase real quick before I write more code

