1610931006
daurnimator
ifreund: the OS gives you them because you're talking to C :)

1610931077
ifreund
daurnimator: fair enough, someone should write an OS with a slice based syscall ABI :P

1610931089
daurnimator
ifreund: have you seen NT? :)

1610931098
ifreund
nope

1610931108
daurnimator
this is why NT paths can have null bytes in them

1610931122
ifreund
ah windows thing

1610931137
ifreund
Is that not written in C as well?

1610931153
daurnimator
it is. but they made all the syscalls have slice based ABIs

1610931204
daurnimator
where they screwed up was making them all UCS2 :/

1610931264
daurnimator
ifreund:

1610931304
ifreund
wonderful, an OS that cares about unicode :D

1610931356
daurnimator
What a pity it was invented in that breif period where we realised 256 characters was not enough; but still thought 65536 was enough

1610948561
mikdusan
oh i done fucked up something now

1610948647
mikdusan
ah nuked it. by mistake pushed to zig instead of fork.

1610949629
mikdusan
(sorry for confusion. i pushed a PR branch by mistake and it's now removed. all good)

1610950633
mikdusan
would be sweet if we could have a slice+capacity type. the syntax would be tough. `buf[0.. .capacity]` or `buf[0.. :0 .capacity]` makes a slice with `.capacity` field

1610950663
daurnimator
mikdusan: you mean ArrayList?

1610950684
daurnimator
(but with special syntax)

1610950703
mikdusan
my next comment wsa going to be "but maybe that's best left to std" and then just as I was saying "oh like ArrayList" you popped up :)

1610956884
mikdusan
did zig ever have .field access for error union payload/err ?

1610961548
mikdusan
this example is "no inline function call" and the closest CallOption seems to be .never_inline, yet it's not used in that example:

1610961550
mikdusan


1610963882
tnorth
hey there. I'm trying to write the raw bytes of a []f32 variable A to a file via std.os.write(). It requires a []u8. I expected to be able to write const foo = std.mem.bytesAsSlice(u8, A), but it seems that this type of cast is not allowed. What would be the right way to do it?

1610963903
mikdusan
writeByte ?

1610963928
mikdusan
oh not in std.os :(

1610964009
mikdusan
see std.mem.toBytes()

1610964061
dutchie
or asBytes

1610964381
tnorth
sliceAsBytes() did it

1610964393
tnorth
Still discovering std functions...

1610964966
kbd
I can't figure out how to type this array concatenation:

1610965078
ikskuh
use { &a1, &a2 }

1610965085
ikskuh
you need to have a pointer to the array

1610965695
dutchie
what's the option to get zig to print the paths it's using to std library etc

1610965755
dutchie
oh, `zig env` there it is

1610966316
kbd
ikskuh: thanks. That results in another compile error, but got me to: `var a3 = try std.mem.concat(A, []const u8, &[_][][]const u8{ &a1, &a2 });` which seems correct now.

1610966329
ikskuh
ah yeah

1610967513
daurnimator
kbd: you may want `const` rather than `var` too :)

1610967589
kbd
Yeah was just test code but ty, appreciate it.

1610971425
ifreund
anyone have code lying around to parse/format signed fixed point numbers without lossy conversion to floating point?

1610982075
mikdusan
huh that explains it. $HOME/.cache/ now used for global cache on macos too

1610992808
justin_smith
is there a good reference for the package rules? I'm used to being able to do multi segment packages (eg src/foo/bar.zig) but that leads to "import of file outside package path" when I go two levels back up

1610992857
fengb
You need to set the root to be src

1610992934
justin_smith
fengb: when I search the docs for that I get a bunch of TODO comments and some compiler output- where would I find out what this means?

1610993053
justin_smith
fengb: is this --main-pkg-path ?

1610993068
fengb
Yeah maybe. Iâ€™m not in front of my computer >_>

1610993138
justin_smith
fengb: yeah - that fixed it, found it by searching the output of "zig --help" for "root"

1610993197
fengb
I normally use zig build which sets these cli args for me

1610993282
justin_smith
yeah I prefer Makefile because it's more terse and I can mix CLI steps with zig stuff, but I guess that leaves some gotchas

1610993404
justin_smith
(there are many reasons that make is bad, but I've already spent the time learning how to use it properly...)

1610993420
fengb
We need translate-make ðŸ™ƒ

1610993452
justin_smith
of course I could use make AND build.zig, but up until now that seemed silly

1610994169
Nypsie[m]
Or only use build.zig

1610994226
justin_smith
Nypsie[m]: I haven't found a nice way to use external CLI tools in build.zig

1610994299
Nypsie[m]
You can call external CLI tools from your build.zig file and have them depend on other steps, or even other steps depend on that step

1610994334
Nypsie[m]
I think you can call some command with `b.addSystemCommand()`

1610994371
justin_smith
Nypsie[m]: I had been using build.zig, but for this project that got extremely unweildy (it was advent of code, where for each day I added another target)

1610994399
justin_smith
Nypsie[m]: but it's likely this is because of my incompetence / ignorance rather than a problem with build.zig

1610994403
justin_smith
make was much easier for me

1610994426
Nypsie[m]
You could have that fully automated since you can just write some zig code that reads all directories/files and build some example for it.

1610994440
Nypsie[m]
Tbh, I don't blame you. docs regarding build.zig a big TODO

1610994449
Nypsie[m]
Was just mentioning it was possible, not trying to force you to use it fyi

1610995171
ifreund
justin_smith: you're 100% right that using external CLI tools from build.zig is not as frictionless as doing the same in make. It is totally possible though

1610995189
ifreund
see e.g. my scdoc invocation:

1610995317
ifreund
since you mentioned AoC, there's actually a temlate here as well:

1610995387
justin_smith
ifreund: oh, that's clever - if I'd seen that before I was nearly done I totally would have used it

1610995583
vmv
Hello. I have one question. I am just wondering...how functional zig could be?

1610995656
justin_smith
vmv: having come from functional programming, it can do many of the individual idioms, but the lack of gc makes them much more verbose

1610995698
vmv
To be honest I am quite happy about the lack of gc. Do you have any examples of the possible functional way in Zig? :)

1610995720
justin_smith
vmv: I doubt my code examples are anything anyone should emulate

1610995726
justin_smith
(I'm still learning)

1610996016
ifreund
honestly I think trying to do functional-style programming in zig is going to be too high-friction for anything non-trivial

1610996047
ifreund
allthough that stack-capturing macro proposal would help a good deal

1610996829
ifreund
definitely better than C though :P

1610996875
semarie
#1717 "Make function definitions expressions" would help too for functional-style

1610996974
ifreund
oh certainly

1610997009
ifreund
though that's purely syntax aside from the function pointer related changes

1610997027
ifreund
wouldn't help with error/memory handling

1610997135
justin_smith
ifreund: actually, the pervasive usage of error union return values is also fp friendly (compared to try/catch or condition variables you need to remember to check)

1610997163
fengb
Except anon functions arenâ€™t closures

1610997245
justin_smith
"lifting" from fn + state into a struct containing state plus a method is trivial, though tedious

1610997265
justin_smith
the classic object / closure duality

1610997277
justin_smith
(though I'm used to taking it in the other direction)

1610997301
fengb
Zig has neither objects nor closures ðŸ™ƒ

1610997321
justin_smith
fengb: but when I want an "object" I can use a struct with methods in it

1610997329
justin_smith
sorry, I am using "object" very loosely here

1610997345
fengb
Yeah I know, and Iâ€™m being a pedantic jerk

1610997444
justin_smith
like, as someone migrating here from clojure, I can take the code I'd normally write, and move everything in the let block into a struct type, add an "invoke" or whatever, and get the main features of an implicit closure (with a lot more lines of code)

1610997506
justin_smith
the harder part is reorganizing so my allocation lifespans make sense (the lack of gc part)

1610998083
vmv
For someone from Elixir/Rust world it could be too low. Can I pass function to a function in zig?

1610998110
justin_smith
vmv: yes, you can even pass types at compile time to make a new type

1610998141
vmv
Can I create a "pipeline" like in Ocaml or Elixir?

1610998146
justin_smith
vmv: and yes, it's very low level

1610998381
vmv
As low as Go? Hmm Go is a really strange case...some parts are really high level, some are so low. I am searching something which I know to compare.

1610998416
justin_smith
lower than go, since go uses gc

1610998420
Nypsie[m]
I wouldn't call Go a very low language tbh. Zig is definitely considered to be a lower language than Go.

1610998461
justin_smith
vmv: the design goal of zig is to be as low level as it can be, while also being simpler in design than legacy options

1610998521
vmv
I see. Can you give me some examples of a applications which would be perfect for Zig? As I can understand it will not be a potential "web" programming language with web frameworks?

1610998531
justin_smith
eg, being able to use the language at compile time instead of a macro system, code modules as structs

1610998583
justin_smith
vmv: embedded applications, I hope to use it for DSP where getting the most out of your hardware is important

1610998607
justin_smith
systems programming in general

1610998630
ikskuh
vmv: pretty much anything is a good application for zig imho

1610998652
justin_smith
vmv: yeah, I'd use something much higher level for web programming, but I might use zig for a service in some bottleneck scenario

1610998656
ikskuh
desktop applications, web servers, system daemons, low latency trading software, bare metal applications (embedded or OS development)

1610998658
ikskuh
game programming

1610998682
ikskuh
justin_smith: i don't think we'll get Zig on proper DSPs soon

1610998701
justin_smith
ikskuh: I mean DSP as a software domain, not a type of hardware

1610998714
justin_smith
ikskuh: signal processing / generation / analysis stuff

1610998734
vmv
Hmm how about threads...is it possible to implement actor based system in Zig?

1610998754
ikskuh
justin_smith: ah, okay. yeah, then i agree

1610998765
ikskuh
actor based systems?

1610998769
justin_smith
vmv: there's a semi-experimental async system including sugar for resumable stack frames

1610998794
ikskuh
zig has both async-await semantics to express concurrency as well as OS threads for multithreading

1610998804
justin_smith
ikskuh: actor systems are an object oriented abstraction over multi threaded processes based on message passing coordination

1610998816
vmv
those are green threads/fibers on real threads?

1610998823
ikskuh
no

1610998837
ikskuh
async/await is manually managed coroutines

1610998841
ikskuh
there is no scheduling or anything

1610998845
ikskuh
and OS threads are OS threads

1610998846
vmv
I would not say that actors are object oriented.

1610998870
vmv
I see.

1610998870
ikskuh
i've skimmed over the wiki article

1610998874
justin_smith
vmv: they use internal state plus messages as their base, those are the "good parts" of OO

1610998876
ikskuh
yeah, you can do actor model programming

1610998882
ikskuh
use a thread safe queue/channel

1610998884
ikskuh
and threads

1610998909
vmv
Ok, my last question. Can I compile Zig to C? :) That part is unclear for me.

1610998919
ikskuh
not yet :D

1610998923
justin_smith
vmv: it's a replacement for c, you can translate c into zig

1610998925
vmv
If yes then I could use it in Erlang to make the number crunching faster

1610998933
ikskuh
you can use it in erlang already i think

1610998938
ikskuh
gimme a sec

1610998945
justin_smith
vmv: you can compile to an output that works with the c abi

1610998958
justin_smith
vmv: that's surely what erlang needs?

1610998974
ikskuh


1610998995
ikskuh
elixir FFI works exceptional with zig according to this talk

1610999019
vmv
It is Elixir so I could be more complicated to do it with pure Erlang.

1610999079
vmv
Based on what you have said I think that Zig would be perfect for blockchain :D

1610999094
ikskuh
oh no.

1610999168
vmv
oh yes...;)

1610999200
vmv
But seriously, why not ? I am not a huge fan ob blockchain but I have spend my last 3 years on bc projects.

1610999211
vmv
Safe, FAST, predictable

1610999314
vmv
Those are attributes which are quite important there. Take a look on the technologies which are popular there: Rust (It has solved problems of Go but also brings a couple of new one), Go (haha), Haskell (amazing, but lazy so hard to predict), OCaml (Threads...who need more then one ?!). Zig could be like a golden point of balance.

1610999380
vmv
Or maybe I am wrong. It has something interesting.

1610999775
justin_smith
vmv: while zig does borrow some nice features from eg. ml that those languages also use, it's probably more informative to compare zig to c or c++

1610999833
justin_smith
it's closer to being "c with modules and type inference" than it is to being "OCaml without gc but with threads" (both very loose comparisons)

1611001440
ifreund
I agree that zig would be a good language for blockchain code, though I think it's more generally a good language for anything that needs to be fast.

1611001460
ifreund
s/fast/efficient/

1611001921
justin_smith
or even more generally, things that require careful control of resources (including time, memory, disk space...)

1611003344
ifreund
that's what I meant by efficient :P

1611005437
mikdusan
i hate cmake

1611005473
ifreund
oh yes

1611005499
veltas
hmm

1611006195
FireFox317
andrewrk, i'm trying to implement inferred blocks and i'm wondering if there is a downside to using the current `inferred_ptr` mechanism to determine the type of the block. See this gist:

1611007398
marijnfs
is there a hex-print in std?

1611007432
justin_smith
marijnfs: you can use {x} in place of {} inside std.debug.print

1611007473
andrewrk
FireFox317, taking a look

1611007482
justin_smith
marijnfs: there's a nice breakdown of the codes that work near the top of std.fmt

1611007699
marijnfs
justin_smith: sweet

1611007727
andrewrk
FireFox317, in this example it looks like the inferred mechanism is being used for the variables only, and the block type is being determined by a deref on `y` (which looks good)

1611007737
andrewrk
this ZIR looks good to me

1611007926
FireFox317
yes, I think that is correct. That also means that we can get rid of the `block_ptr` ResultLocation, because the type of the block is actually determined through the `inferred_ptr` Resultlocation. do you think that make sense?

1611008071
FireFox317
i also updated the gist to include the ZIR of the more complex example

1611008223
FireFox317
andrewrk, your statement was incorrect. The inferred mechanism is also being used for the `const x`. Before every break there is now a `store_to_inferred_ptr` that points to the `alloc_inferred` of the `const x`. And the `resolve_inferred_alloc` after the block then does the `resolvePeerTypes`. Does that make sense?

1611008541
andrewrk
FireFox317, those instructions have to do with the fact that there is a variable declaration though, not the fact that there is a block, right?

1611008578
andrewrk
for example what if the block was a parameter to a function?

1611008603
FireFox317
`const x = <whatever>` uses the `inferred_ptr` mechanism. and in this case <whatever> is a block

1611008700
FireFox317
andrewrk, i updated the simple example. I think it is clearer now

1611008710
andrewrk
looking

1611008745
andrewrk
can you state the question again?

1611008780
andrewrk
this ZIR all looks good - I just don't understand how it relates to the question

1611008877
FireFox317
is it okay to reuse the inferred_ptr mechanism to determine the type of the block? so currently there is a `block_ptr` resultLocation, which is suppose to handle that case. But i figured out that i can actually reuse the `inferred_ptr` mechanism to determine the type of the block, which makes the `block_ptr` useless

1611008895
FireFox317
I was wondering if there is some case where we actually cannot determine the type of the block in this way.

1611009064
andrewrk
let's try to come up with a motivating example that would help answer this question. I'm poking around locally - first I'm going to look at ZIR for a labeled block used as a function call parameter

1611009131
waleee-cl
vmv: if actors are necessary but you don't want to do erlang/elixir ... have you considered pony(lang)?

1611009214
vmv
waleee-cl: Sure, Pony is amazing. I am just a little bit afraid that the community and progress are a little bit slower then 2 years ago in Pony (or it is only my feeling) :)

1611009218
fengb
I have unidirectional actors over threads in Zig but itâ€™s not pretty

1611009245
Daimanta
Hi!

1611009257
fengb
Was actually planning to port to async instead, but thatâ€™s been buggy

1611009291
Daimanta
I have a question about Zig because I ran into some strange code

1611009311
Daimanta
Well, the code was not strange but the results were

1611009334
ifreund
FireFox317: haven't looked in depth, but does this handle breaking the block with an error and a value in different places causing the block type to be inferred as an error union?

1611009350
ifreund
(this doesn't work in stage1, but I'm of the opinion that it should)

1611009369
ifreund
Daimanta: do share

1611009398
FireFox317
andrewrk, yep i also looked at that case and that all works out when the type of the function call parameter is known.

1611009420
Daimanta
I was making a small Zig math library and was comparing it to some std math code

1611009429
FireFox317
I then thought what if the type of the function paramater is `anytype`? But then I couldnt try that because stage2 doesnt support that yet.

1611009447
Daimanta
I compared my code to the cos function in std.math to see what the precision was.

1611009477
Daimanta
When I entered two consts with f32 and f64 values I found results that differ too much in my opinion

1611009485
Daimanta
const a: f32 = 89433.0;

1611009486
Daimanta
const b: f64 = 89433.0;

1611009486
Daimanta
try std.io.getStdOut().writer().print("{}\n", .{math.cos(a)});

1611009487
Daimanta
try std.io.getStdOut().writer().print("{}\n", .{math.cos(b)});

1611009493
Daimanta
So, here's the code.

1611009522
FireFox317
ifreund, hmm that is a good usecase

1611009549
ifreund
FireFox317: context:

1611009557
Daimanta
The results should be very similar in my opinion, but thet are not

1611009617
Daimanta
The results I got were as follows:

1611009618
Daimanta
-2.81683772e-01

1611009618
Daimanta
-2.848654575667813e-01

1611009627
andrewrk
FireFox317, if we can delete the block_ptr result loc, that's great, I'm just trying to come up with examples to make sure :)

1611009685
andrewrk
is this blocking something?

1611009700
FireFox317
andrewrk, yes indeed, that is what i thought too. I was also thinking of examples

1611009710
FireFox317
andrewrk, nah just improving stage2 :)

1611009731
Gliptic
is there any way to do recursion in async contexts? I realize you have to break the cycle somehow, but can't figure out how exactly

1611009738
Daimanta
That is a difference of more than 1%, which should not happen

1611009739
andrewrk
I see - well I think we can leave it for now, and once we get basic test coverage of all the language we can remove it. maybe earlier if it becomes a blocker for something

1611009755
andrewrk
right now it serves as a "TODO" if you run into it

1611009864
andrewrk
or maybe there's something I'm not understanding

1611009875
andrewrk
Gliptic, you have to heap allocate the frame of the function you want to call

1611009889
andrewrk
then `ptr.* = async foo();`

1611009897
FireFox317
andrewrk, remove 'it'? what?

1611009924
Gliptic
andrewrk: thanks, I'll try that, but it was complaining that the function wasn't analyzed if I did just async foo()

1611009936
andrewrk
FireFox317, ah I thought you were suggesting to remove ResultLoc.block_ptr

1611010015
FireFox317
andrewrk, okay yeah i see what you mean now. I will PR this stuff and then you can have another look at it :)

1611010028
andrewrk
sounds good!

1611010120
ifreund
Daimanta: probably an accumulation of rounding errors in the f32 version?

1611010142
Daimanta
I'd wager that such a thing would be the case

1611010149
Daimanta
In any case, it's not good

1611010182
Daimanta
the input values are "small" which should not incur floating rounding issues

1611010210
ifreund
Do you have an example of anything that has a more accurate 32 bit float cosine algorithm?

1611010227
Daimanta
I'm checking alternative calculations right now

1611010245
Gliptic
andrewrk: ah, thanks, it works

1611010249
andrewrk
np

1611010261
andrewrk
Gliptic, this stuff is still experimental; you may run into issues

1611010282
Daimanta
I checked the answer on other tools and the answer looks way off

1611010288
ifreund
what tools?

1611010307
Daimanta
Wolfram alpha and a random open source calculator(speed crunch)

1611010314
ifreund
are you sure they do the calculation in 32bit IEEE floats?

1611010323
ifreund
wolfram alpha certainly doesn't

1611010327
Gliptic
I realize that

1611010330
ifreund
it uses arbitrary precision

1611010331
Daimanta
Bit return a value likeÂ  -0,284865

1611010336
Daimanta
*Both

1611010365
Daimanta
So either I'm missing something or the cosine falls apart at some values

1611010417
ifreund
Daimanta: I think everything you're using that gives you a more accurate value is using more precision than an f32

1611010436
ifreund
there's a reason c's math.h uses doubles for everything

1611010447
Daimanta
That seems unlikely, since f64 have the same issue

1611010458
ifreund
no?

1611010475
Daimanta
Well, the answer still seems wrong

1611010489
Daimanta
oh, wait

1611010492
Daimanta
No it isnt

1611010503
Daimanta
You're right

1611010512
Daimanta
scientific notation caught me

1611010535
Daimanta
so yeah, the f32 somehow degenerates due to some unknown reason

1611010545
ifreund


1611010567
ifreund
s/unknown reason/floating point rounding errors/

1611010582
ifreund
which are a lot more apparent when you have less precision

1611010651
Daimanta
I do get that, but since the cos function maps the reals to [-1,-1] I'd expect a stable answer for these values as well.

1611010841
Daimanta
I'll check how c deals with this and I'll compare the results.

1611010876
ifreund
Daimanta: libc doesn't offer a cos() that takes a float

1611010884
Daimanta
ah, I see

1611010920
fengb
Are f32s deprecated or something? Seems like nothing supports it

1611010934
ifreund
23:53 <ifreund> there's a reason c's math.h uses doubles for everything

1611010973
fengb
Yeah Iâ€™m just surprised a 1989 spec uses doubles :P

1611011025
ifreund
I'm assuming because float would cause the rather atrocious rounding issues Daimanta has pointed out

1611011061
andrewrk
FireFox317, related:

1611011079
andrewrk
uh let me fix that syntax

1611011083
Daimanta
Well, the many multiplications probably exacerbate the rounding error

1611011139
andrewrk
FireFox317, fixed:

1611011162
andrewrk
damn it, pretend it says "const result" instead of "const x"

1611011206
FireFox317
andrewrk, i would expect option 1 here i think

1611011310
Daimanta
Who developed the math lib anyway? I'm wondering what algorithm he used.

1611011435
andrewrk
tiehuis did most of the work, using a combination of musl and go

1611011458
andrewrk
musl semi-recently improved all their math, and I think we should refresh all the math funcs with musl and make sure we pick up the improvements

1611011699
Daimanta
It's really nice that Zig offers a real choice in datatypes in/output but stuff like this rounding error scares me a bit so I at least know to use 64bit datatypes right now

1611011719
Daimanta
Thanks for the information anyway, I'm off to bed now :)

1611011806
marijnfs
i want to write some 'dynamic' serialization for a struct, like any struct gets serialized in memory, a [4]u8 also, a []u8 needs a length to be stored

1611011810
marijnfs
how would I go about doing that?

1611013093
kameliya
marijnfs: can you clarify what you are needing to do exactly?

1611013272
g-w1
you may want to checkout this for inspiration

