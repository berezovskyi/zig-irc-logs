1616807756
andrewrk
ifreund, nice work on astgen stuff

1616807768
andrewrk
the astgen for slices is kind of satisfying

1616811934
noam
Link me? :)

1616811940
noam
Or, it's in the ZIR brnach?

1616812111
andrewrk
noam,

1616812146
andrewrk
this is, respectively, `[a..]`, `[a..b]`, `[a..b :c]`

1616812907
noam
I'm planning on doing result locs soon, though TBH that's mostly because it'll make it trivial to improve the generated asm :P

1616822748
andrewrk
noam, how so?

1616823231
noam
andrewrk: the biggest issue with the asm right now is unnecessary moves on inlined calls

1616823259
andrewrk
oh btw you have to do inlining during semantic analysis to adhere to the spec

1616823273
noam
I already do

1616823275
noam
:)

1616823312
andrewrk
if you have `inline fn foo(x: i32) { return x; }` - at the callsite, if you pass a comptime parameter, the result is required by the spec to also be comptime

1616823354
andrewrk
not sure how you'd accomplish that and have a problem with unnecessary movs on inlined calls

1616823406
andrewrk
er, I mean, I'm just saying if those two things are true about your codebase then you've discovered a way to implement this that I'm not aware of :)

1616823632
noam
andrewrk: basically, it inlines by creating a new block without access to the function's scope, and replacing returns with breaks

1616823672
noam
The result is semantically equivalent and inlined - but it still allocates a register for the block, then the asm op, then moves from the latter to the former

1616823701
andrewrk
nice that's the same thing stage2 does :D

1616823716
andrewrk
oh I see, so the block makes it to codegen

1616823721
noam
I guess it's not so much result locations that will clean it up

1616823725
andrewrk
do you have a code example, we can compare IR/machine code?

1616823729
noam
Yeah

1616823740
noam
need to find the link though...

1616823751
andrewrk
isn't it in one of your test cases?

1616823759
noam
yeah but I already pasted it

1616823763
noam
and I'd rather not have two copies

1616823768
andrewrk
O I C

1616823801
noam
...this is a very weird and inconsistent folder layout

1616823862
andrewrk
noam, how about this one?

1616823867
andrewrk
the test is it should exit(0)

1616823883
noam


1616823908
noam
panic isn't marked inline because inlining deferred calls is wonky rn

1616823910
andrewrk
zig stage2 can't pass this test yet, too many language features here

1616823939
noam
...going to be honest, I'm smiling a bit too widely right now

1616823970
noam
andrewrk: do you have a raw link for that zigbin?

1616823992
noam
the coloring on that site is atrocious without JS, apparently

1616823994
andrewrk


1616823999
noam
Black on dark grey :(

1616824003
noam
thakns

1616824025
noam
Ha, I can't run the test you gave just yet :)

1616824033
noam
Will add it as the next one to work towards, should be trivial

1616824042
andrewrk
what's the issue? maybe I can tweak it

1616824047
andrewrk
make it non-recursive?

1616824053
noam
Unreachable, if, arithmetic :P

1616824063
andrewrk
lol do unreachable it's super simple

1616824067
noam
Yeah :)

1616824081
andrewrk
if is hard tho for machine code backends

1616824085
noam
Arithmteic is super simple too

1616824089
noam
Shouldn't be

1616824094
andrewrk
gotta have an actual register allocation implementation

1616824097
noam
Ihave the benefit of an assembler ;)

1616824112
noam
I already have conditional branching for while loops

1616824121
andrewrk
ah ok

1616824127
noam
Every block generated creates a label for its beginning and end

1616824142
andrewrk
just impl unreachable real quick and I'll remove the if and arithmetic from the test case

1616824147
noam
A condbr just becomes `b .block_%d_end`

1616824168
noam
I'll do that tonight or tomorrow, I'm working on a large test case still :)

1616824175
noam
Just added @This() :)

1616824177
andrewrk
fair :)

1616824189
noam
Working on getting a container codegenning :D

1616824231
noam
UART0 = UART.define(0xFF110000) except I used a decimal integer because I haven't impled hex lexing yet :P

1616824284
noam
after this one though, I plan on a bunch of smaller stuff before doing more major features

1616824292
noam
So that case is perfect as a full test

1616824298
noam
Except for the lack of 1717 ;)

1616825099
noam
Come to think of it, when will stage2 implement 1717?

1616825512
andrewrk
my priority is to self-host before 1717

1616826652
noam
Makes sense, since you have zig fmt :)

1616828518
andrewrk
zir-memory-layout branch is shaping up! just a few more tests left to fix

1616836037
s-ol
I'm experiencing what seems like a very weird glitch

1616836054
s-ol
I'm doing a bunch of cImports from a directory tree, and every once in a while I will add another one

1616836066
s-ol
I just did that, and there is now one header file that zig will just refuse to find

1616836084
s-ol
error: C import failed [...] path/to/header.h file not found

1616836094
s-ol
i've quadruple-checked the path and its... there?

1616836118
s-ol
I just noticed that it is the longest path in the list so far... is there maybe some internal limit somewhere that I'm overrunnign?

1616836194
s-ol
ooooh nevermind

1616836198
s-ol
me dumb

1616836261
s-ol
i forgot i install that dependency locally and that copies the headers, and this one was new >.>

1616836291
s-ol
nice rubber ducking yall thanks

1616861516
mikdusan
andrewrk: if we accept `-` for piped input as per clang compat using `zig cc`, this applies to -E or source files like .c when `-x c`,

1616861540
mikdusan
then because of zig-cache system, do we need to copy stdin to a file and insert into cache?

1616868636
powerofzero
andrewrk: Do you have a proposal for new apis in #8363? I can think of several directions to take it, and I'm not sure which you are intending.

1616871407
forgot-password
Using @Type, how do I add a `const Declaration`? I'm not quite sure how to do it when I look at TypeInfo.Declaration

1616871463
Nypsie
You can't

1616871512
Nypsie
Sorry I misread. It's function declarations that cannot be created that way

1616871533
forgot-password
No worries, that's what I wanted to try at first, but came to the conclusion that it's not possible :p

1616871662
forgot-password
But how can I add a `pub const X: []const u8` then?

1616871757
Nypsie
@Type(.Declaration{...}) but don't take my word for it because I feel like this isn't allowed either

1616871866
forgot-password
But how do I set the data that way?

1616871909
forgot-password
I don't get how the `Declaration.Data` union can be used for that

1616871949
Nypsie
Ah good point

1616871989
Nypsie
Welp, guess it's not possible. Sorry I couldn't really help you out here

1616872135
forgot-password
No problem, I'm grateful for any help ;)

1616873151
ifreund
andrewrk: I'm going for the WipZirCode => Astgen refactor as I'm not sure where you want to go with switches or error sets

1616885880
noam
Ha! Good news is, I now analyze @This() correctly. bad news is my tree dumper doesn't detect recursive references, and @This() is definitionally recursive :P

