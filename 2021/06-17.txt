1623904293
marler8997!~marler899@204.229.3.4
anyone written a zip extractor in Zig?

1623904310
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
aurme and nameless on discord are

1623904343
marler8997!~marler899@204.229.3.4
they have a zip extractor?

1623904368
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
they are working on it

1623904424
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
seems to be this https://github.com/SuperAuguste/zzip

1623904530
marler8997!~marler899@204.229.3.4
lol, just started 2 days ago

1623904554
marler8997!~marler899@204.229.3.4
wtf, they link to "Jaz", java in zig?

1623904599
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, they are making a java interpreter

1623904611
marler8997!~marler899@204.229.3.4
huh, interesting

1623912165
ikskuh!~xq@2a0d:5940:6:163::ad7e
"jvm in zig", short: jiz /o\

1623937066
tabletops!~tabletops@49.36.220.87
I was reading through the documentation (standard library source code) of the std.fs module, and it says that with each openDir function, resources are allocated. So, dir.close() should be called on the directory dir returned by openDir() function. The problem is that the close() function doesn't work if I store the returned dir as a const since I

1623937066
tabletops!~tabletops@49.36.220.87
passed incompatible arguments. So, should I use a var for openDir() function or I shouldn't call the close() function? Here's what I'm trying to code: https://pastebin.com/v1pnBcxY and here's the source code of std.fs module: https://github.com/ziglang/zig/blob/master/lib/std/fs.zig

1623937098
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes, store a mutable dir in a "var"

1623937110
ikskuh!~xq@2a0d:5940:6:163::ad7e
var cwd = try ...;

1623937170
tabletops!~tabletops@49.36.220.87
for immutable dirs do i have to deallocate them?

1623937437
tabletops!~tabletops@49.36.220.87
I mean, should I never use a const for a directory> For example I can use const for current working directory returned by cwd().

1623948496
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you have to use var for a dir

1623948503
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the close function will set the pointer to undefined

1623948525
ifreund!~ifreund@user/ifreund
s/pointer/handle/

1623948531
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
sure

1623948587
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cwd() does not need to be closed tho

1623948614
ifreund!~ifreund@user/ifreund
in fact, closing it will give you EBADF iirc

1623948729
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you know what they say

1623948873
marler8997!~marler899@204.229.3.4
TheLemonMan, would you like me to rebase your PR and update it or do you want to?

1623952308
kiedtl!~kiedtl@kisslinux/kiedtl
Is there an std thing to get a struct's field by an enum (e.g., .FooBar => struct.FooBar), or did I miss something in std.enum

1623952314
kiedtl!~kiedtl@kisslinux/kiedtl
*std.enums

1623952695
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
@field(s, @tagName(.FooBar))

1623952714
kiedtl!~kiedtl@kisslinux/kiedtl
o, right

1623952753
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
:)

1623952959
oats!~thomas@user/oats
does that work with non-comptime-known enum variants?

1623953003
ikskuh!~xq@2a0d:5940:6:163::ad7e
oats: no

1623953011
oats!~thomas@user/oats
yeah, I figured

1623953043
kiedtl!~kiedtl@kisslinux/kiedtl
hm, yeah, guess I'll just write my own

1623953274
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, wait, is there even a way to get string representation of a non-comptime-known enum variant?

1623953291
kiedtl!~kiedtl@kisslinux/kiedtl
Well, another for loop will suffice /shrug

1623953323
ikskuh!~xq@2a0d:5940:6:163::ad7e
kiedtl: is your struct uniform over all fields?

1623953347
ikskuh!~xq@2a0d:5940:6:163::ad7e
you might want to use a std.EnumArray or std.EnumMap then

1623953600
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
hey guys, everytime i build a file with --library c, it seems to rebuild all c objs. Doesn't zig cache anything?(the build process ends up taking quite some time)

1623953612
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig caches them

1623953626
ikskuh!~xq@2a0d:5940:6:163::ad7e
but if you update zig before or have any of the caches wiped

1623953628
ikskuh!~xq@2a0d:5940:6:163::ad7e
it will rebuild them

1623953635
ikskuh!~xq@2a0d:5940:6:163::ad7e
(or change compile options or build mode)

1623953649
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
is it possible that an antivirus or something is keeping zig from altering folders?

1623953668
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
because really everytime i run build-exe it rebuilds the objs, or so it seems

1623953669
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have no idea

1623953689
marler8997!~marler899@204.229.3.4
build-exe may not cache?

1623953698
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
thought about that too

1623953761
ikskuh!~xq@2a0d:5940:6:163::ad7e
marler8997: and why not? "zig build" just invokes "zig build-exe" 

1623953794
marler8997!~marler899@204.229.3.4
no idea, just a thought

1623954001
marler8997!~marler899@204.229.3.4
Building-Zig-On-Windows maybe needs update?  is --override-lib-dir no longer supported?

1623954011
freshcoffee!~fresh@user/freshcoffee
Kiori: are you on a regular filesystem/mount or something like an extern flash, fat32, ramdisk, etc ?

1623954024
freshcoffee!~fresh@user/freshcoffee
perhaps --zig-lib-dir now?

1623954063
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
hi fresh im on windows

1623954069
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
regular

1623954112
freshcoffee!~fresh@user/freshcoffee
Kiori: I'd suggest to nuke the zig global cache and the local cache and re-run; use `zig env` to show location of global cache

1623954130
freshcoffee!~fresh@user/freshcoffee
marler8997: --zig-lib-dir

1623954161
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
ok i'll give it a shor and report back.

1623954164
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
shot*

1623954193
kiedtl!~kiedtl@kisslinux/kiedtl
ikskuh: yeah, I might end up using Enum{Map,Array}, but I'd rather not if I can help it. re "uniform", all members of the struct are the same type, if that's what you meant.

1623954223
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1623954230
ikskuh!~xq@2a0d:5940:6:163::ad7e
otherwise it won't work

1623954231
marler8997!~marler899@204.229.3.4
freshcoffee yeah that seems to work

1623954267
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.EnumArray(std.meta.FieldEnum(T), u32) is btw a array with one field of type u32 for each field in your struct *grin*

1623955691
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
@freshcoffe: My man, magically it justWorks‚Ñ¢.

1623955731
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
I just deleted the global and local cache and now everything is caching normally(or so it seems).

1623955841
freshcoffee!~fresh@user/freshcoffee
üëç

1623955878
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
I don't really understand this though, do you know why this happens? I mean under linux sure it could be a permission thing, but under windows?

1623955908
freshcoffee!~fresh@user/freshcoffee
I did a quick check on macos and cache reports things like permission denied on a directory if that's the case,

1623955926
freshcoffee!~fresh@user/freshcoffee
but permissions can be more fine grained than that,

1623955989
freshcoffee!~fresh@user/freshcoffee
and also from time to time we make changes to zig that may impact what is ALREADY in your global cache so nuking the cache helps in these cases; even if we haven't identified what the actual change-issue is

1623956043
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
That could be it, I'm not sure the permissions case would apply to windows. BUT, it's nice to know what to do justInCase

1623956050
Kiori!~Kiori@2804:14d:ae84:b256:2cda:788a:3ea7:9129
thanks again, made my day.

1623956396
motiejus!~motiejus@88.223.105.24
hi folks. Today I discovered that two parallel `zig c++` invocations can deadlock each other (i.e. both hang), and I think 'darwin' here is a red herring: https://github.com/ziglang/zig/issues/9139

1623956463
motiejus!~motiejus@88.223.105.24
anyway, this may be of interest to the zig cc/c++ maintainers. It is to me. :)  I am contemplating an flock around zig c++ as a temporary measure in my toolchain repository.

1623959051
andrewrk!~andrewrk@mail.ziglang.org
motiejus, interesting - zig has some internal file system locking to ensure that two parallel zig c++ invocations will play nicely with each other and re-use each other's cache artifacts. are you able and willing to obtain a backtrace for both processes when the hanging happens?

1623959098
motiejus!~motiejus@88.223.105.24
sure, just tell me how to do it

1623959117
andrewrk!~andrewrk@mail.ziglang.org
`gdb -p <pid>` to attach to a process; `thread apply all bt`

1623959126
andrewrk!~andrewrk@mail.ziglang.org
do that for each one and share the results. that may lead directly to a solution

1623959133
andrewrk!~andrewrk@mail.ziglang.org
will need to be a debug build of zig for it to be useful

1623959172
motiejus!~motiejus@88.223.105.24
is there one published, or should I build one with something like CFLAGS=-g ?

1623959189
andrewrk!~andrewrk@mail.ziglang.org
you will need to build zig from source. default cmake configuration

1623959193
motiejus!~motiejus@88.223.105.24
if there's one on the internet, similar to the nightly versions, that would be easiest for me (the ones that include stdlib et al)

1623959213
motiejus!~motiejus@88.223.105.24
can/will it have the same directory layout as the nightly versions?

1623959226
andrewrk!~andrewrk@mail.ziglang.org
yes the only difference is the executable file

1623959283
motiejus!~motiejus@88.223.105.24
excellent, will give it a go.

1623959285
motiejus!~motiejus@88.223.105.24
will post to the ticket

1623959310
motiejus!~motiejus@88.223.105.24
just cmake without args?

1623959331
motiejus!~motiejus@88.223.105.24
building..

1623962725
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, `-z --major-os-version=foo`

1623962726
motiejus!~motiejus@88.223.105.24
how to compile zig statically? with default cmake config it links with a bunch of things (ldd zig | wc -l ==> 17)

1623962767
ifreund!~ifreund@user/ifreund
motiejus: -DZIG_STATIC_LLVM=on will try to link llvm statically

1623962795
ifreund!~ifreund@user/ifreund
for a full static build, you probably need a musl-based host system if you are using your system llvm as glibc can't be statically linked

1623962855
motiejus!~motiejus@88.223.105.24
glibc is fine

1623962866
motiejus!~motiejus@88.223.105.24
this is a cmake flag?

1623962893
ifreund!~ifreund@user/ifreund
yes

1623962947
motiejus!~motiejus@88.223.105.24
yep, this looks better

1623962980
freshcoffee!~fresh@user/freshcoffee
andrewrk: on linux, with clang or gcc, `-z --major-os-version` AND `-z --major-os-version=foo` report as "warning: -z --major-os-version ignored"

1623962998
andrewrk!~andrewrk@mail.ziglang.org
I believe that is a macos flag

1623963286
freshcoffee!~fresh@user/freshcoffee
hmm clang does not like `-z` and `-Xlinker --major-os-version` or `-Xlinker --major-os-version=foo` reports as: `ld: unknown option: --major-os-version`

1623963326
freshcoffee!~fresh@user/freshcoffee
and `ld: unknown option: --major-os-version=foo` respectively

1623963366
andrewrk!~andrewrk@mail.ziglang.org
in this case I think it is fine to merge the PR. I did not know that

1623963380
freshcoffee!~fresh@user/freshcoffee
lemme just try -Xlinker with rpath

1623963443
motiejus!~motiejus@88.223.105.24
it's amazing how easy it was to build and run my own zig toolchain. I will leave the hangzig for the night and report back with stacktraces upon return. Thanks for the tips, andrewrk and ifreund.

1623963456
andrewrk!~andrewrk@mail.ziglang.org
motiejus, thanks for the debugging help

1623963563
motiejus!~motiejus@88.223.105.24
ifreund out of curiousity, can I just do something like CXX="zig c++ --target=x86_64-linux-musl" (and CC equivalently) to get a fully static zig build, instead of relying on a musl-based host system?

1623963570
motiejus!~motiejus@88.223.105.24
i.e. has anyone tried it?

1623963586
freshcoffee!~fresh@user/freshcoffee
-Xlinker support: macos system linker does not like `-Xlinker -rpath=foo` it wants `-Xlinker -rpath foo` but if someone adds support `-Xlinker` adjacent to `-Wl,` it should be straightforward as it doesn't require `=` parsing

1623963683
ifreund!~ifreund@user/ifreund
motiejus: see the ziglang/zig-bootstrap repo

1623963696
Sawzall!~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net
https://github.com/ziglang/zig-bootstrap/blob/master/build

1623963698
ifreund!~ifreund@user/ifreund
tldr yes, but you need to build llvm from source because C++ sucks

1623963712
freshcoffee!~fresh@user/freshcoffee
(sorry I was a bit confusing). Since we don't support Xlinker right now, I think the PR is good to go

1623965777
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, ok

1623965802
aisha[m]!~aisha@2001:470:69fc:105::13a
hello

1623965813
aisha[m]!~aisha@2001:470:69fc:105::13a
I am having a bit of trouble building zig

1623965831
aisha[m]!~aisha@2001:470:69fc:105::13a
during the final linking stage I get errors saying some symbols are not foun

1623965867
aisha[m]!~aisha@2001:470:69fc:105::13a
https://bsd.ac/udmvkrd

1623965879
aisha[m]!~aisha@2001:470:69fc:105::13a
like - 

1623965880
aisha[m]!~aisha@2001:470:69fc:105::13a
<artificial>:(.text+0x2495): undefined reference to `clang::SourceManager::getSpellingLocSlowCase(clang::SourceLocation) const'

1623965917
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: thanks for the review, in a few hours i'll make the changes

1623965946
freshcoffee!~fresh@user/freshcoffee
aisha[m]: from past reports, that almost certainly looks to be linking against llvm libraries != llvm headers

1623965972
aisha[m]!~aisha@2001:470:69fc:105::13a
what does that mean?

1623965993
ikskuh!~xq@2a0d:5940:6:163::ad7e
"don't delete stuff on behaviour tests" *grin*

1623965995
andrewrk!~andrewrk@mail.ziglang.org
also make sure c++ compilers match. https://github.com/ziglang/zig/wiki/Troubleshooting-Build-Issues#dual-abi-linking

1623965997
ikskuh!~xq@2a0d:5940:6:163::ad7e
the test code that doesn

1623966002
ikskuh!~xq@2a0d:5940:6:163::ad7e
*doesn't make sense ^^

1623966039
andrewrk!~andrewrk@mail.ziglang.org
it probably didn't make sense to stage1 either and caused a crash and had to be fixed and is therefore valuable test coverage

1623966060
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1623966078
aisha[m]!~aisha@2001:470:69fc:105::13a
andrewrk: yes both are being built with gcc-11

1623966082
aisha[m]!~aisha@2001:470:69fc:105::13a
so that should be fine

1623966084
ikskuh!~xq@2a0d:5940:6:163::ad7e
but behaviour tests are the things where you feel stupid when you write them

1623966085
andrewrk!~andrewrk@mail.ziglang.org
ok

1623966093
andrewrk!~andrewrk@mail.ziglang.org
yep

1623966097
ikskuh!~xq@2a0d:5940:6:163::ad7e
all code that's like "i guess this should work"

1623966102
andrewrk!~andrewrk@mail.ziglang.org
assert(true == true)

1623966106
ikskuh!~xq@2a0d:5940:6:163::ad7e
exactly *rofl*

1623966133
ikskuh!~xq@2a0d:5940:6:163::ad7e
assert(1 == 1); assert(2 == 2); assert(1 != 2); assert(1+1 == 2);

1623966161
freshcoffee!~fresh@user/freshcoffee
ACTION is gonna retool to 12.0.1-rc2

1623966266
aisha[m]!~aisha@2001:470:69fc:105::13a
i see that this needs static lld libraries

1623966273
aisha[m]!~aisha@2001:470:69fc:105::13a
which aren't installed for me

1623966301
aisha[m]!~aisha@2001:470:69fc:105::13a
I have the shared libraries, which do seem to be used in the final linking stage

1623966319
aisha[m]!~aisha@2001:470:69fc:105::13a
do I still need the static ones? or is that information not relevant anymore?

1623966346
ikskuh!~xq@2a0d:5940:6:163::ad7e
aisha[m]: there is a flag you can pass to link llvm dynamically

1623966350
ikskuh!~xq@2a0d:5940:6:163::ad7e
this is required on arch for example

1623966363
ikskuh!~xq@2a0d:5940:6:163::ad7e
cmake -DZIG_PREFER_CLANG_CPP_DYLIB=true

1623966403
aisha[m]!~aisha@2001:470:69fc:105::13a
but that links to CPP library instead of C library yes?

1623966428
ikskuh!~xq@2a0d:5940:6:163::ad7e
afaik the C binding is done in zig itself?

1623966429
aisha[m]!~aisha@2001:470:69fc:105::13a
or maybe I'm misunderstanding it

1623966505
aisha[m]!~aisha@2001:470:69fc:105::13a
i see, let me try doing that, thanks!

1623966739
marler8997!~marler899@204.229.3.4
do we use trailing commas when all elements are on the same line?

1623966757
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you can, but then it will split them up

1623966834
freshcoffee!~fresh@user/freshcoffee
ie. if you want 'em same line, don't use trailing comma

1623966848
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
^

1623966942
aisha[m]!~aisha@2001:470:69fc:105::13a
thanks a lot!!! the build is working now

1623966946
aisha[m]!~aisha@2001:470:69fc:105::13a
and tests are also running :D :D :D

1623966952
freshcoffee!~fresh@user/freshcoffee
and daaang zig fmt gets extra points for applying he same rule to both initializers AND function params

1623966957
freshcoffee!~fresh@user/freshcoffee
*the

1623966989
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, once you understand zig fmt, its super nice to work with

1623968029
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, andrewrk I think I fixed all the review points

1623970923
freshcoffee!~fresh@user/freshcoffee
how many clock-cycles do I get before I wear out my 6-core i5? :)

1623971984
andrewrk!~andrewrk@mail.ziglang.org
g-w1, nice, I'm almost through the actual impl

