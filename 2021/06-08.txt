1623110475
marler8997!~marler899@204.229.3.4
andrewrk, thanks, btw, is this something we should put in std? https://github.com/marler8997/zig-irc-logger/blob/master/epoch.zig  it's a zig version of gmtime

1623110501
marler8997!~marler899@204.229.3.4
I don't know if it's the API we want, maybe others have better ideas

1623110553
andrewrk!~andrewrk@mail.ziglang.org
aren't there a bunch of complicated considerations that this does not handle?

1623110578
marler8997!~marler899@204.229.3.4
it's based on a C implementatino for gmtime

1623110605
marler8997!~marler899@204.229.3.4
it doesn't handle timezones or anything, just decodes a unix epoch timestamp

1623110702
marler8997!~marler899@204.229.3.4
I'm not sure if the unix epoch timestamp works the same on all platforms though

1623111227
marler8997!~marler899@204.229.3.4
here's a fairly simple implementation of it: http://www.jbox.dk/sanos/source/lib/time.c.html

1623111247
marler8997!~marler899@204.229.3.4
my version does basically the same thing but splits up the various operations so you only do what you need

1623111468
marler8997!~marler899@204.229.3.4
here's the glibc implementation: https://code.woboq.org/userspace/glibc/time/offtime.c.html

1623111494
marler8997!~marler899@204.229.3.4
looks like pretty much the same thing as well

1623111793
marler8997!~marler899@204.229.3.4
anyway, I believe it's correct. I think we want this or something like this in std so people don't need libc to decode these timestamps. The question I have is this the best API or do others have better ideas?

1623111858
marler8997!~marler899@204.229.3.4
will be back later if people want to discuss

1623111885
ifreund!~ifreund@user/ifreund
marler8997: I'd just open a PR to discuss tbh

1623112069
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: zigwin32 seems to work fine w/ gyro. I just have no idea what I'm doing

1623112090
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(which is a pattern for a while until I Get Good At Zig (tm))

1623112111
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I promise this isn't unique to me learning Zig. I'm just Not Good until I am :P

1623112703
powerofzero!~user@pool-108-26-183-210.bstnma.fios.verizon.net
Re my problem from earlier with various symbols not linking correctly, someone here said that there had been a bugfix merged for this. Was this after or before 0.8.0? I have updated to 0.8.0 and am still having the same issue.

1623119991
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: How do you create a null HANDLE is the type of HANDLE is *c_void?

1623120004
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
and not "?*c_void"

1623120012
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
if* the type

1623120395
marler8997!~marler899@204.229.3.4
you can't

1623120434
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
hTemplateFile

1623120434
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
>This parameter can be NULL.

1623120445
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I have nothing to give the CreateFileA function

1623120477
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
So how do I call CreateFileA if I don't have (or want) an hTemplateFile HANDLE to give it?

1623120484
marler8997!~marler899@204.229.3.4
looking

1623120525
marler8997!~marler899@204.229.3.4
looks like it is marked "Optional" in the metadata, so must be a bug, let me see if I can fix it real quick

1623120906
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Cool, I'm helping :D

1623121084
marler8997!~marler899@204.229.3.4
hmmm, this one is looking tricky

1623121544
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Can it manually be fixed for the time being?

1623121553
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Just so I'm not stuck?

1623121567
marler8997!~marler899@204.229.3.4
sure, you can copy the function decl to your project and modify it

1623121787
marler8997!~marler899@204.229.3.4
you know what, this might actually be a bug in std

1623121801
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
oh dear

1623121804
marler8997!~marler899@204.229.3.4
not sure yet though

1623121807
marler8997!~marler899@204.229.3.4
it's tricky

1623121832
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I'm trying to create "dd"-lite for Windows in Zig.

1623121852
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I found out the API is similar to POSIX open/read/write and I want to abuse my newfound knowledge

1623122138
marler8997!~marler899@204.229.3.4
ok I think I have a fix incoming

1623122190
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Cool

1623122474
marler8997!~marler899@204.229.3.4
With my fix, 3 other functions broke so I'm filing an issue with win32metadata and will have to implement a temporary workaround for them

1623122734
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
:(

1623122916
marler8997!~marler899@204.229.3.4
https://github.com/microsoft/win32metadata/issues/519

1623122934
marler8997!~marler899@204.229.3.4
no worries, this is very normal for this project

1623122950
marler8997!~marler899@204.229.3.4
I've had to implement a bunch of workarounds

1623123306
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
https://ziglang.org/documentation/master/#Error-Union-Type

1623123306
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
>Both types coerce to anyerror!u64.

1623123306
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
So is the return type of parseU64 anyerror!u64?

1623123342
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Or is it an inferred subset?

1623123364
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
If the latter, the previous section says "But you cannot coerce an error from a superset to a subset". Isn't that a contradiction?

1623123419
ifreund!~ifreund@user/ifreund
it is an inferred subset

1623123441
ifreund!~ifreund@user/ifreund
the return type is only anyerror!u64 if you write that

1623123467
ifreund!~ifreund@user/ifreund
if you leave of the error set and just write !u64 the compiler infers the error set from the possible errors the function can return

1623123492
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
What is significant about both types coercing to anyerror!u64?

1623123536
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(Since it's in the linked doc, I assume I'm missing something important)

1623124245
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: "GetLastError: WIN32_ERROR.ERROR_SHARING_VIOLATION" Okay, that is cool... GetLastError can be formatted to return the enum variant

1623124277
marler8997!~marler899@204.229.3.4
yeah auto stringification of the error

1623124365
marler8997!~marler899@204.229.3.4
I've got 23 errors left to file issues for and create workarounds :)

1623124423
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Looks like I found a fun error

1623124440
marler8997!~marler899@204.229.3.4
yup you did :)

1623125185
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
One thing that throws me off a bit... if you supply the wrong type to a function parameter that's actually an option type, (but not null) the error message doesn't indicate that the expected type is "?whatever"

1623125212
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Uhhh, is there a quick way to hex-print an array. I want this for debugging, and then I'm calling it a night

1623125248
marler8997!~marler899@204.229.3.4
std.fmt.fmtHex I think

1623125269
marler8997!~marler899@204.229.3.4
print("{}", .{std.fmt.fmtHex(array)})

1623125277
andrewrk!~andrewrk@mail.ziglang.org
I'm not 100% sold on all these recent fmt changes

1623125295
marler8997!~marler899@204.229.3.4
which changes?

1623125316
andrewrk!~andrewrk@mail.ziglang.org
removal of {x} for hex strings, removal of {B} and {Bi} for bytes 

1623125339
marler8997!~marler899@204.229.3.4
I objected saying maybe {x} was common enough, but TheLemonMan said "no"

1623125342
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
container 'std.fmt' has no member called 'fmtHex'

1623125366
andrewrk!~andrewrk@mail.ziglang.org
http://ratfactor.com/zig/stdlib/

1623125374
marler8997!~marler899@204.229.3.4
fmtSliceHexLower

1623125415
andrewrk!~andrewrk@mail.ziglang.org
also that fmt is completely redundant with std.fmt

1623125419
andrewrk!~andrewrk@mail.ziglang.org
std.fmt.fmtSliceHexLower

1623125449
marler8997!~marler899@204.229.3.4
those fmt functions can exist outside fmt though

1623125455
marler8997!~marler899@204.229.3.4
maybe they should be in std.fmt

1623125461
marler8997!~marler899@204.229.3.4
*shouldn't

1623125482
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
expected type '[]const u8', found '[512]u8'

1623125490
marler8997!~marler899@204.229.3.4
&array instead of array

1623125520
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Oh, &array is accepted even when the type sig says array?

1623125524
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(kinda like C)

1623125546
jamii!~jamii@2604:3d08:9586:5b00:7083:3415:1f89:6ebd
(Don't think this sent the first time because my nick wasn't registered) I have some code that needs to store a pointer to something it doesn't know the type of. In c I'd use *void. Is *opaque the appropriate equivalent in zig?

1623125555
marler8997!~marler899@204.229.3.4
pointers to arrays *[N]T coerce to slices []T

1623125675
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
ahh

1623125684
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
In any case... first sign of life: http://ix.io/3p8X

1623125705
marler8997!~marler899@204.229.3.4
you said you're writing dd for windows?

1623125719
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Well, with limitations, but yes

1623125732
marler8997!~marler899@204.229.3.4
https://github.com/marler8997/windows-imager

1623125734
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
it'll be "good enough for me, maybe not good enough for general use"

1623125759
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
oooor, you could have done the same thing and I need to find SOMETHING to work on lmao

1623125788
marler8997!~marler899@204.229.3.4
not quite as flexible as dd

1623125813
marler8997!~marler899@204.229.3.4
feel free to use it or pull anything from it you need

1623125837
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
That program probably does what I want, tbh (though it seems like it writes only, not reads?)

1623125840
marler8997!~marler899@204.229.3.4
I wrote this so I could write a NixOS image to my raspberry pi disk on windows

1623125846
marler8997!~marler899@204.229.3.4
yeah doesn't read

1623125855
marler8997!~marler899@204.229.3.4
send me a PR to add read capability :)

1623125860
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Maybe I should add that instead of working on my own

1623125876
marler8997!~marler899@204.229.3.4
either way, if you just want to write your own to learn that works too

1623125879
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I got a USB floppy drive for bday... been playing with that

1623125898
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
So I've started with that. I didn't even need to dismount the drive to read from it

1623125916
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(which is something I've seen multiple dd-like programs, incl. yours do)

1623125948
marler8997!~marler899@204.229.3.4
maybe because windows didn't mount it in the first place?

1623125960
marler8997!~marler899@204.229.3.4
it won't automount if it hasn't been formatted with a filesystem first

1623125981
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(Maybe mounting doesn't apply to floppy drives)

1623125991
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Writing to learn would be nice, but I've been having trouble focusing. So maybe adding a feature is a better goal.

1623126010
marler8997!~marler899@204.229.3.4
go for it

1623126081
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(Irony: I do all my Zig devel on Linux b/c I can't be arsed to install the nightlies on Windoze)

1623126094
marler8997!~marler899@204.229.3.4
I do too

1623126102
marler8997!~marler899@204.229.3.4
including zigwin32, it's all developed on linux :)

1623126126
marler8997!~marler899@204.229.3.4
mostly because I use emacs, and emacs for windows is a mess

1623126170
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Haha... atom here (via Xpra)

1623126194
marler8997!~marler899@204.229.3.4
I tried atom...too slow

1623126208
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Uhhh, I don't care for the imager applications on Windoze. One of the NetBSD devs has a GUI rawrite, but I want a command line version. Looks like your program may fit the bill

1623126225
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
First Zig Program I Will Use

1623126233
marler8997!~marler899@204.229.3.4
lol, yeah that's exactly what I wanted as well

1623126254
marler8997!~marler899@204.229.3.4
are you coming from C/C++ mostly?

1623126321
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
C, Python, Rust, a bit of Scheme and OCaml

1623126342
marler8997!~marler899@204.229.3.4
oh very cool background

1623126369
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I learned C++ from a textbook that was from '98. And I can/have written C++11 for money. But I avoid it when possible

1623126444
marler8997!~marler899@204.229.3.4
same here, I'm not smart enough for C++ :)

1623126716
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(nobody is, but that's a tangent I'm too tired for lmao)

1623127495
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
marler8997: https://github.com/marler8997/windows-imager/pull/1 This is gonna be it for me for tonight. From playing around, it looks like this is the application I would've ended up writing anyway

1623127510
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(Interesting that drive A:/ doesn't show up as a physical drive)

1623127542
marler8997!~marler899@204.229.3.4
any for file?

1623127564
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
it wouldn't work with 's'

1623127566
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
b/c u16

1623127571
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I didn't understand the error

1623127578
marler8997!~marler899@204.229.3.4
zig should support that, I've been meaning to add it

1623127603
marler8997!~marler899@204.229.3.4
will have to do for now, could you add a comment before it // {any} should be {s} when zig supports u16

1623127665
marler8997!~marler899@204.229.3.4
btw, just pushed fix to zigwin32

1623127684
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
pushed

1623127721
marler8997!~marler899@204.229.3.4
merged

1623127781
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Excellent, I'll try impl'ing read support when I have time this week

1623127787
marler8997!~marler899@204.229.3.4
cool

1623127898
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
But yea, windows-imager is essentially the program I want, so thanks for pointing it out :P. Rolling my own might be fun, but I don't really want to if I don't have to.

1623127905
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I'll have plenty of time to learn Zig

1623127943
marler8997!~marler899@204.229.3.4
no probs, hope to see you around

1623128127
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
One last q... has "ReleaseSmallSafe" ever been considered?

1623128211
marler8997!~marler899@204.229.3.4
not that I know of, I'm not sure if ReleaseSafe tires to be "small" or "fast"?

1623128234
ifreund!~ifreund@user/ifreund
fast I'm pretty sure

1623128246
ifreund!~ifreund@user/ifreund
release safe will never be small

1623128262
ifreund!~ifreund@user/ifreund
safety checks require alot of extra generated code

1623128293
marler8997!~marler899@204.229.3.4
sure but is there a reason to default to "release" vs "small" optimization when applicable?

1623128301
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I'm about to do a Rust comparison again. You have been warned.

1623128304
marler8997!~marler899@204.229.3.4
sorry "fast" vs "small"

1623128350
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
Tthere is inherent size overhead to safety checks in Rust. But my own experience is that many of them get optimized out at compile time such that a firmware I write in C can reasonably still fit in Rust, even when I don't use unsafe {} at all

1623128382
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I guess maybe Zig can't optimize many of those checks out (or optimize them down to a jump to infinite loop on invariant violation)

1623128383
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
?*

1623128414
ifreund!~ifreund@user/ifreund
I think zig in safe build modes does a lot more runtime safety checks than rust does

1623128418
marler8997!~marler899@204.229.3.4
rust definition trades off flexibility for a more limited model that the compiler can reason about and make optimizations from

1623128512
marler8997!~marler899@204.229.3.4
I wouldn't be surprised if there are optimizations that only rust can do, but hard to say for sure

1623128526
ifreund!~ifreund@user/ifreund
marler8997: my intuition about this is that "safe" and "small" are contradictory to the point where optimizing for size in safe build mode doesn't make sense

1623128546
ifreund!~ifreund@user/ifreund
I could be wrong though, I haven't done any deep investigation here

1623128552
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
https://github.com/cr1901/AT2XT/blob/master/src/main.rs#L4

1623128554
marler8997!~marler899@204.229.3.4
but couldn't you say the same about "fast"?

1623128574
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
https://github.com/cr1901/AT2XT/runs/2768623352?check_suite_focus=true#step:9:92

1623128617
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
LTO enabled, yes. But you'd do that for a C firmware that needs to fit in 2kB too.

1623128619
ifreund!~ifreund@user/ifreund
marler8997: I don't think so, release-safe is usually comparable to release-fast in terms of performance in my experience

1623128656
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
(Presumably LTO is irrelevant for Zig, based on how I understand how it compiles/links?)

1623128682
ifreund!~ifreund@user/ifreund
release-fast is always as fast or faster of course, but release-safe isn't far off

1623128709
marler8997!~marler899@204.229.3.4
interesting, so you're saying that safety affect small alot more, so the user probably wants "fast" rather than small

1623128777
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I am going to prob have to rewrite this firmware in Zig, just for a comparison point

1623128791
marler8997!~marler899@204.229.3.4
hell yeah, do it

1623128839
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
I don't have the bandwidth to write my own startup code, play w/ linker scripts, and generate reg maps right now (yes I know there's an SVD parser for Zig)

1623128847
cr1901!~William@2601:8d:8600:911:1027:6525:c95f:57dc
But I'll keep that in mind

1623128851
ifreund!~ifreund@user/ifreund
marler8997: yeah, though this is mostly speculation. Someone should definitely do some actual benchmarking

1623128881
marler8997!~marler899@204.229.3.4
gotcha, logic is sound though if the premises are true

1623128888
ifreund!~ifreund@user/ifreund
and look at what we're actually telling llvm to do in release safe/fast/small

1623128980
daurnimator!~daurnimat@vultr.daurnimator.com
I think a releasesmallsafe could make sense: it would be a different set of optimizations to run

1623128986
daurnimator!~daurnimat@vultr.daurnimator.com
e,.

1623128996
daurnimator!~daurnimat@vultr.daurnimator.com
e.g. it would have lots of deduplication; no loop unrolling.....

1623129031
daurnimator!~daurnimat@vultr.daurnimator.com
but keep all the checks (like asserting on what is passed to @intCast)

1623129169
marler8997!~marler899@204.229.3.4
ifreund, here's the PR you told me to make :) https://github.com/ziglang/zig/pull/9040

1623129213
daurnimator!~daurnimat@vultr.daurnimator.com
marler8997: re: UintFromMax see IntFittingRange

1623129233
marler8997!~marler899@204.229.3.4
nice!

1623129505
daurnimator!~daurnimat@vultr.daurnimator.com
marler8997: the `get` prefix feels a little weird to me, not as if we have a `setDaysInYear` :P

1623129527
marler8997!~marler899@204.229.3.4
what would be better?

1623129555
marler8997!~marler899@204.229.3.4
I usually try to make functions/methods be verbse rather than nouns, helps avoid symbol conflicts

1623129876
ifreund!~ifreund@user/ifreund
camelCase also helps avoid symbol conflicts pretty well

1623129922
marler8997!~marler899@204.229.3.4
yeah, Zig using different casing for types/funcs/vars helps

1623130175
daurnimator!~daurnimat@vultr.daurnimator.com
marler8997: also I wonder if you might have made too much `pub`

1623146407
ikskuh!~xq@2a0d:5940:6:163::ad7e
stage 1 bug of the day: https://zig.godbolt.org/z/1eesr5zjK

1623146414
ikskuh!~xq@2a0d:5940:6:163::ad7e
is this already known? *thinking*

1623149461
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: I think I've hit it before

1623149466
daurnimator!~daurnimat@vultr.daurnimator.com
assign to a temporary first

1623149488
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: https://zig.godbolt.org/z/onG1YM1zh

1623150139
ikskuh!~xq@2a0d:5940:6:163::ad7e
daurnimator: yeah i figured

1623150142
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i can make it more fun :D

1623150198
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you make ".consumed = 4", it will segfault

1623151322
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh man

1623151327
ikskuh!~xq@2a0d:5940:6:163::ad7e
that FieldEnum thingy is annoying as heck

1623151372
daurnimator!~daurnimat@vultr.daurnimator.com
howso?

1623151433
ikskuh!~xq@2a0d:5940:6:163::ad7e
fieldInfo(TaggedUnion, @tagName(tag_typed_enum))

1623151434
ikskuh!~xq@2a0d:5940:6:163::ad7e
vs

1623151464
ikskuh!~xq@2a0d:5940:6:163::ad7e
fieldInfo(TaggedUnion, @field(FieldEnum(TaggedUnion), @tagName(tag_type_enum))

1623151477
ikskuh!~xq@2a0d:5940:6:163::ad7e
in all code i've written it just introduced more code

1623151484
ikskuh!~xq@2a0d:5940:6:163::ad7e
which removes clarity al ot

1623151517
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you need the fieldInfo of two structs where both fields have the same name, it gets even worse

1623151604
daurnimator!~daurnimat@vultr.daurnimator.com
hmmm. why isn't the FieldEnum of a union(enum) the enum?

1623151629
ikskuh!~xq@2a0d:5940:6:163::ad7e
that's a question that is left to the reader :D

1623151671
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think that's worth a PR, isn't it?

1623151680
ikskuh!~xq@2a0d:5940:6:163::ad7e
would make this use case a *lot* easier

1623151688
daurnimator!~daurnimat@vultr.daurnimator.com
yeah I can't think of any reason not to have that

1623151808
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: want me to send a quick PR now?

1623151825
ikskuh!~xq@2a0d:5940:6:163::ad7e
sure, if you want to do it :)

1623151862
daurnimator!~daurnimat@vultr.daurnimator.com
already written

1623152082
daurnimator!~daurnimat@vultr.daurnimator.com
ehhhh. okay I see why this could be a bad idea: if the enum is e.g. non-exhaustive, then you dont' want the FieldEnum to be

1623152107
daurnimator!~daurnimat@vultr.daurnimator.com
and you don't want to make it a "sometimes" thing, as then decls on the enum only sometimes pass through

1623173848
gmacd!~gmacd3@cpc1-bmly10-2-0-cust207.2-3.cable.virginm.net
Hi - is there a good way to do a classic C-style for loop in zig? (for (int i = 0; i < 10; i++) {...})

1623173864
gmacd!~gmacd3@cpc1-bmly10-2-0-cust207.2-3.cable.virginm.net
Closest I've seen is a while loop in a block

1623173914
dutchie!~dutchie@user/dutchie
yeah, `{ var i: i32 = 0; while (i < 10) : (i += 1) { ... } }` is the closest

1623173937
dutchie!~dutchie@user/dutchie
(typed straight into irc, not checked)

1623173951
dutchie!~dutchie@user/dutchie
i'd probably not bother wrapping it in a block if i needed to do something like that

1623173957
dutchie!~dutchie@user/dutchie
`for` only works on arrays and slices

1623174777
gmacd!~gmacd3@cpc1-bmly10-2-0-cust207.2-3.cable.virginm.net
thanks.  would be nice to have shorter form (i'm sure i'm not the first person to say that though!)

1623175146
marler8997!~marler899@204.229.3.4
oh no, I think "zig build run -- ARGS" is broken on windows...again :(

1623175470
marler8997!~marler899@204.229.3.4
oh wait, not working on linux either, did "zig build run -- ARGS" get removed?

1623175512
ifreund!~ifreund@user/ifreund
marler8997: you need to explictly support it in your build.zig

1623175518
ifreund!~ifreund@user/ifreund
see the zig init-exe template

1623175527
marler8997!~marler899@204.229.3.4
ah

1623175547
marler8997!~marler899@204.229.3.4
I've just been relying on the template I didn't realize it needed explicit support

1623175624
kiedtl!~kiedtl@kisslinux/kiedtl
Has anyone tried doing a comptime-based serialization library yet?

1623176084
ifreund!~ifreund@user/ifreund
kiedtl: you mean something liike this? https://github.com/ziglang/std-lib-orphanage/blob/master/std/serialization.zig

1623176425
kiedtl!~kiedtl@kisslinux/kiedtl
ifreund: it's close! I was looking for something where I could plug in a parser for, say, JSON or TOML and have the engine take care of putting the values in the appropriate fields.

1623176443
kiedtl!~kiedtl@kisslinux/kiedtl
but now that I've seen this I think it'll be easy to implement

1623177001
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, https://github.com/ziglang/zig/pull/7959 advertises itself as a draft, i.e. not ready to be merged. is that still true?

1623177672
marler8997!~marler899@204.229.3.4
kiedtl, I believe std.json has automatic JSON serialization/deserialization of Zig structs

1623177733
kiedtl!~kiedtl@kisslinux/kiedtl
Thanks, but I'm doing my own custom format :v

1623177985
marler8997!~marler899@204.229.3.4
is there a proposal to replace cDefine/cInclude/cImport with a single builtin that just processes a string as C code? I recall there might have been some discussion on that but can't find it

1623178287
ifreund!~ifreund@user/ifreund
I also recall that discussion

1623178317
ifreund!~ifreund@user/ifreund
I think there may be a proposal to remove them from the language and effectively make them part of the build system as well

1623178332
marler8997!~marler899@204.229.3.4
oh that's interesting

1623179426
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
marler8997: i think there was something related in a comments of some issue, but imo it needs its proposal

1623179513
ifreund!~ifreund@user/ifreund
I'd +1 replcaing @cDefine/@cInclude/@cImport with @cSource()

1623179534
ifreund!~ifreund@user/ifreund
it would simplify the compiler implementation and the usage

1623179551
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
agreed!

1623179561
ifreund!~ifreund@user/ifreund
and remove one of the wierdest builtins that takes an AST node (@cImport())

1623179570
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yep, thats my main reasoning

1623179641
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the only downside i can think of is that people would be reliant on it and just write more c code instead of zig

1623179685
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but that may be a social issue and not a technical one

1623179695
ifreund!~ifreund@user/ifreund
they can already do that

1623179711
ifreund!~ifreund@user/ifreund
there's only the extra step of writing your C code in a separate file

1623179722
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yep

1623179987
andrewrk!~andrewrk@mail.ziglang.org
marler8997, https://github.com/ziglang/zig/issues/2070

1623180698
kiedtl!~kiedtl@kisslinux/kiedtl
What's the idiomatic way to check if multiple optional values aren't null? 'foo != null and bar != null'? 

1623180740
ifreund!~ifreund@user/ifreund
if (foo) |f| if (bar) |b| { ... } works too

1623180871
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, nice. Though that wouldn't work for 'a != null or b != null'

1623180873
kiedtl!~kiedtl@kisslinux/kiedtl
¯\_(ツ)_/¯

1623180920
ifreund!~ifreund@user/ifreund
nope, if you want an `or` unwrapping them both doesn't make any sense

1623180957
ifreund!~ifreund@user/ifreund
you'd probably want two separate if statements if you want to unwrap

1623180958
kiedtl!~kiedtl@kisslinux/kiedtl
ifreund: Oh, guess I was unclear: I wanted to check if they're not null without unwrapping

1623180978
ifreund!~ifreund@user/ifreund
oh then != null is perfect

1623180995
ifreund!~ifreund@user/ifreund
I seem some if (foo) |_| instead of if (foo != null)

1623181000
ifreund!~ifreund@user/ifreund
I prefer the latter though

1623181005
kiedtl!~kiedtl@kisslinux/kiedtl
yeah, for your first reply 'if (foo) |_| if (bar) |_| { ... }' works great too

1623181013
kiedtl!~kiedtl@kisslinux/kiedtl
though probably not as clear

1623181022
ifreund!~ifreund@user/ifreund
exactly

1623182577
luuk!~luuk@user/luuk
andrewrk: xq mentioned he forgot his charger so can't log on irc, but apart from the newly introduced merge conflict it's 'mergable'. It's not a draft.

1623182594
luuk!~luuk@user/luuk
(I'm just the messenger :))

1623182599
andrewrk!~andrewrk@mail.ziglang.org
thanks luuk :)

1623182616
luuk!~luuk@user/luuk
No problem

1623190485
kiedtl!~kiedtl@kisslinux/kiedtl
What's the way to use mem.copy to copy a []u8 into a [<size>:0]u8? I'm getting 'expected type u8, found *const [32:0]u8' when I do mem.copy(u8, &foo, source)

1623190490
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: thanks for merging my pr! (*laughs in unused variables coming soon*) :D

1623190573
kiedtl!~kiedtl@kisslinux/kiedtl
oh no, are we going to get go-style 'duh you have an unused variable there' errors? or will they be warnings?

1623191037
andrewrk!~andrewrk@mail.ziglang.org
always been planned

1623191583
cow-orker!~foobar@pogostick.net
a sane default, but I hope there will be some way (switch/flag/...) to disable/make it a warning during the messier stages of coding...?

1623191703
kiedtl!~kiedtl@kisslinux/kiedtl
^ Yes, it isn't so bad if it's an error during release builds but making it a simple warning for debug builds would be really neat

1623192538
andrewrk!~andrewrk@mail.ziglang.org
there's a flag, you just gotta paste it into your .zig code. the flag is `comptime { _ = foo; }`

1623192555
andrewrk!~andrewrk@mail.ziglang.org
and you gotta do it for each unused thing

1623193547
cow-orker!~foobar@pogostick.net
well yes... that's possible, like with go and cc -Wall.  It's just a pita :)

1623193629
cow-orker!~foobar@pogostick.net
also, the `_ = foo;` "hack" may easy(-ier?) be left in prod builds I suspect?

1623194712
mla!~mla@162.253.176.229
how might i check if a file exists w std library

1623194748
mla!~mla@162.253.176.229
its gotta be in fs/file.zig right

1623194839
mla!~mla@162.253.176.229
need to figure out a way to make a std.fs.File from a path i guess

1623194849
mla!~mla@162.253.176.229
and then run stat and see if that fails

1623195063
mla!~mla@162.253.176.229
i guess i open the file w fs.openFile and see if that fails

1623195076
andrewrk!~andrewrk@mail.ziglang.org
mla, std.fs.Dir.access. mind the advice in the doc comments

1623195079
mla!~mla@162.253.176.229
only thing about that i dont like is that id rather just stat the thing rather then open it

1623195116
andrewrk!~andrewrk@mail.ziglang.org
yeah just stat it

1623195188
mla!~mla@162.253.176.229
andrewrk: nice std.fs.Dir.access is what i was looking for

1623195196
mla!~mla@162.253.176.229
thanks

