1613521125
mikdusan
is zig planning to llvm 11.1.0 or skip right to 12.0.0 ?

1613522748
sineer
I just ran out if Zig-Zag paper and thought perhaps someone here could help :)

1613522871
sineer
Seriously, are there any Ziglers here? I've been trying to get Zigler master to work on mac Catalina and I'm very close I think but build.zig addSharedLibrary tries to copy .so instead of .dylib files at the very end...

1613525988
andrewrk
mikdusan, 12.0.0

1613526008
andrewrk
sineer, dnautics is around somewhere

1613526023
andrewrk
I don't remember where he hangs out

1613526127
sineer
thanks, I'll keep an eye out for him :-)

1613526213
sineer
Zigler is clearly marked as experimental for mac so I have to at least try harder to fix first...

1613536779
andrewrk
ifreund, nice work on those recent zig fmt commits

1613549081
sineer
zags!

1613549124
sineer
:) I think I found out my problem w/ zigler, turns out it's as deep as erlang hardcoding shared lib FILE_EXT ".so" in load_nif/2 :(

1613551621
ifreund
andrewrk: thanks :)

1613555481
zags
sineer: you pinged? :D

1613571850
Swahili
Q: How can I convert a unicode character such as "=" or "b" to decimal? Thanks!

1613571884
ifreund
'=' is a comptime_int in zig

1613571924
ifreund
if you really need to deal with unicode, see std.unicode though

1613572183
Swahili
Thank you ifreund! I'll do :)

1613572228
ifreund
(note that "=" and "b" are both ascii, you wouldn't need std.unicode for them)

1613572379
Swahili
Ok, how'd I convert ascii char to the decimal value?

1613572399
Swahili
std.fmt?

1613572436
g-w1
"=" is a []const u8

1613572590
g-w1
but a char like '\n'

1613572591
ifreund
*const [1]u8 actually

1613572596
g-w1
^

1613572606
ifreund
oops, *const [1:0]u8

1613572683
ifreund
but yeah, if you do "="[0] you will get the integer corresponding to '='

1613572723
g-w1
this wont work if the first "char" of the string is a multi-codepoint unicode char right?

1613572725
ifreund
i.e. this is true: "12="[2] == '=' and '=' == 61

1613572751
ifreund
g-w1: it will simply give you the first byte of the codepoint yeah

1613572755
g-w1
ok

1613572868
Swahili
Ok, learned. "="[0] works! : )

1613572954
dutchie
'=' is better though, since it will work even for multibyte codepoints

1613572960
ifreund
note that "="[0] == '=' and the latter is more idiomatic

1613572984
ifreund
dutchie makes a very good point as well

1613572997
dutchie
"☺"[0] may not be what you want

1613573040
dutchie
(for that matter, '☺' might not be either, but it's more likely. aren't character encodings fun)

1613574085
Swahili
So, "=" is []const u8 and '=' is u8. What should I read to understand the difference between " and '?

1613574261
g-w1
as noted by ifreund, "=" is *const [1:0]u8, while '=' is just a comptime_int. ' creates a comptime int of the char value in it. "" creates a pointer to a null terminated string that can be coerced to []const u8

1613574277
dutchie


1613574321
Swahili
Thanks : )

1613578379
zags
I have a callback field like "callback: fn() !void", but that leads to "error: inferring error set of return type valid only for function definitions". But I don't know what errors the injected callback may return. What's a good way to deal with this situation?

1613578460
tane
howdy

1613578725
dutchie
zags: there's always anyerror

1613579368
zags
dutchie: oh good point

1613580428
Swahili
Q: Given a value: u8, and a switch statement switch (value), is it a bad practice to use @enumToInt(Some enum field) in the switch cases? Thanks!

1613580692
ifreund
it would probably make more sense to do switch(@intToEnum(value))

1613580880
Swahili
ifreund: awesome!! didn't see that one!! thanks :D

1613581150
Gliptic
assuming the integer actually has only valid enum values

1613581170
dutchie
or the enum is exhaustive

1613581296
ifreund
indeed

1613581317
dutchie
err, i should have said non-exhaustive

1613581379
Swahili
yeh, safe :)

1613596077
justin_smith
I don't know if it matters, but I don't think switch in zig is a statement, you can use it as an RHS

1613602813
ikskuh
andrewrk: is it possible to declare a tagged enum value to be guaranteed to "never occur"?

1613602841
andrewrk
what's the difference between that and deleting it from the enum?

1613602870
andrewrk
you mean if you are wrapping a tagged union around a third party enum?

1613602897
ikskuh
some context:

1613602944
ikskuh
we want to have some platform-independent switch for certain events

1613602961
ikskuh
but some platforms can never have certain events and we want to prevent the code being generated for those switch prongs

1613603050
ifreund
stick a if (is_macos) unreachable; in the switch prongs?

1613603138
ikskuh
yeah, but this thing will be like … 40 elements large?

1613603138
ikskuh
:D

1613603179
ikskuh
.foo => |event| { if(!isEventTypeSupported(.foo)) unreachable; event.foo(); }

1613603369
g-w1
could you modify the union type based on the platform?

1613603393
ifreund_
then you’d need to modify all switchs though

1613603406
g-w1
ah, that falls through

1613603561
ifreund
ikskuh: You could probably have a function implemented by each platform that asserts some events are unreachable

1613603572
ifreund
then call this single function before each cross-platform switch

1613603592
ikskuh
yeah

1613603596
ifreund
not super clean I know, but ok

1613603601
ikskuh
my first idea was to have a `field: noreturn`

1613603605
ikskuh
but that just kills the compiler :D

1613603619
ifreund
lol, I don't think a language feature for this is really warrented

1613603645
ikskuh
:D

1613603692
ifreund
you could also do some hack where you define `const Unreachable = opaque{}` and use that as the payload for unreachable things in the platform-specific tagged union declaractions

1613603721
ifreund
then use @typeInfo() to generically assert that all fields of that type are unreachable

1613603826
ikskuh
that sounds pretty sweet

1613603832
ikskuh
let me make a prototype

1613603881
g-w1
is there a way to convert a [*]T to *T?

1613603889
ikskuh
@ptrCast

1613603893
ikskuh
or

1613603896
ikskuh
&t[0]

1613603897
ikskuh
:D

1613603903
g-w1
lol

1613604535
andrewrk
ikskuh, field: noreturn is

1613604565
andrewrk
accepted; planned to work

1613604643
ikskuh
sweet!

1613605131
johnLate
[...]/cimport.zig:2824:101: error: unable to evaluate constant expression - pub fn DefaultRootWindow(dpy: anytype) callconv(.Inline) @TypeOf(ScreenOfDisplay(dpy, DefaultScreen(^dpy)).*.root) {  // ^ = error msg points here

1613605139
johnLate
how do I figure out what's wrong here?

1613605257
johnLate
I basically experimented with @cInclude("X11/Xlib.h"), disp = c.XOpenDisplay(null), root = c.DefaultRootWindow(disp)

1613605468
andrewrk
johnLate, you'll need to have a look at that generated cimport.zig file, the compile error message, and try to figure out what went wrong

1613605489
andrewrk
it could be an issue with a C macro that zig was unable to translate adequately

1613605796
johnLate
I found

1613606244
johnLate
I guess what puzzles me is why is it pointing at dpy? (full error msg btw:

