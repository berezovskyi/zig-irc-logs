1615853318
ifreund
ok, who made this?

1615853774
yeti
wasn't me, mom!  I promise!

1615853821
andrewrk
looks like it was Ben Jakob, who in fact asked permission to do it and Loris encouraged him to go for it

1615853869
ifreund
I wonder if it has zig syntax highlighting :D

1615853877
ifreund
pretty cool regardless though

1615854409
andrewrk
not that you need permission to create a zig forum, as long as you don't pretend to be "the official one" since there isn't one

1615871401
mikdusan
small update on azure:

1615871459
mikdusan
tl;dr: macOS 11 no earlier than "April" and no clarity if that means just x86_64 or both x86_64 and arm64

1615878788
andrewrk
ifreund, branch is up:

1615878816
andrewrk
it's not incredibly contributor friendly yet, but starting to get there. I think once I work through the compile errors it will start to make sense how people could jump in

1615878864
andrewrk
zir.zig is done. Sema.zig is mostly done. Module.zig is mostly done. astgen.zig is nearly untouched.

1615878908
andrewrk
next problem to solve is resolving LazySrcLoc during ZIR=>TZIR phase because (for now) TZIR wants byte offsets only.

1615881232
mikdusan
til about rclone. wow.

1615882711
ifreund
andrewrk: nice, I look forward to digging in :)

1615884656
mikdusan
hmmm:

1615884676
mikdusan
when generate makefiles, a build happens

1615884705
mikdusan
when generate ninja, a build fails with:

1615884736
mikdusan
ninja: error: build.ninja:1678: multiple rules generate zig1.o

1615884759
mikdusan
if I disable BYPRODUCTS then cmake proceeds to build

1615884768
mikdusan
err then ninja can build

1615884870
mikdusan
can't put my finger on it exactly but this might be introducing a race condition in make. I had weird out-of-dep-order building happening but didn't narrow it down and resorted to -j1 (make)

1615886508
dutchie
huh, there's no btreemap in zig std. i'm implementing one for a little fun side project, would it be worth me tidying it up and submitting it?

1615886555
mikdusan


1615886586
dutchie
ah, i was just perusing

1615892755
ikskuh
heya o/

1615892772
ikskuh
is there already a tracking issue for how to solve the character limit of the windows command line args?

1615894069
cepheus
since i brought this up I figured i would leave it here but here is a working version of the abandoned serialization code for current (as of a couple days ago) zig master

1615894113
cepheus
working inasmuch that it passes the pre-existing tests and i've validated it against serialized data written with data structures serialized from zig 0.7, anyway

1615900986
Cadey
does zig work if you compile it to wasi?

1615901216
g-w1
yes, it even has some wasi stuff in the stdlib:

1615901226
g-w1


1615905086
mikdusan
ugh. azure has a bad apple or two in their mac pipeline pool. filesystem is floppy-disk slow.

1615920004
aconbere
Hmmmm I'm looking at a simple parser, curious if there is a standard pattern to peek a reader?

1615920040
aconbere
I don't see any seek methods on it that I could reset the pointer, and I don't see a peek method off hand

1615920056
aconbere
Maybe I could just read into an array list and then check a slice of that

1615920063
aconbere
and then just keep mutably reading into that?

1615920261
ifreund
aconbere: if you don't need the parser to be streaming it's much easier to just read the file into memory and parse the buffer

1615920281
ifreund
if you want an example of a streaming parser, see the one in std.json

1615920409
ifreund
aconbere: oh and there's also std.io.peekStream

1615920926
aconbere
cool! thanks I'll play with it

1615920941
aconbere
I mean, I'm still not writing anything where the goal is the outcome so much as the learning

1615920954
aconbere
eventually I'll want to know how to use streaming io

1615920957
aconbere
likely for parsing :)

1615923150
andrewrk
Cadey, are you asking if the self-hosted compiler supports being compiled for WASI? or just if zig supports -target wasm32-wasi ?

1615923285
Cadey
andrewrk: the former,

1615923332
andrewrk
I'm guessing there are some errors that would be hit, but could be overcome with some std lib improvements

1615923345
andrewrk
I have a branch where I got it successfully compiling for wasm32-freestanding

1615923360
andrewrk
I decided not to merge it yet because it was a bit invasive of a patch for this early in the development

1615923736
g-w1
andrewrk: is there a reason for Sema to have a branch_quota field if it is not used?

1615923786
andrewrk
g-w1, it's used - it was moved from each Block having a pointer to it

1615923795
andrewrk
now each block has a pointer to Sema, so it's in there

1615923815
andrewrk
instead of block.branch_quota.* it's now block.sema.branch_quota

1615923970
g-w1
ah, I got confused with branch_count and branch_quota since some of the code was not updated; got it

1615923981
g-w1
so Sema has branch_quota but block has branch_count

1615924280
andrewrk
yeah it's tricky when some of the code is still wip and erroring!

1615924302
andrewrk
I think I can get it compiling today, with the help of some @panic("TODO")

1615924345
g-w1
nice :)

1615924375
g-w1
ill try to fix the zir_sema stuff that I have worked on in the past

1615925240
aconbere
Is there a way to get more information about a test that panics?

1615925250
aconbere
`thread 65433 panic: test failure` and a stacktrace is what I get

1615925258
aconbere
but I don't get any information about what might have caused it to panic

1615925297
mikdusan
andrewrk: these files can be nuked from ziglang.org/deps :

1615925299
mikdusan


1615925674
aconbere
huh

1615925709
g-w1
aconbere: you can debug it with gdb; just see the command that failed and debug that binary

1615925711
aconbere
Can anyone help me understand why this panics?

1615925713
aconbere


1615925739
aconbere
given that when I make it check[0..2] I'm confused about the way that slice offsets work

1615925829
aconbere
My intuition was first that the "end" was inclusive so [0..1] would give me the slice {'H', 'T'}

1615925837
yyp
slice[start..end] goes from start to end - 1

1615925863
yyp
That's also true in other languages (Python I think)

1615925915
aconbere
yyp: yeah makes sense, but then I would have expected to get back just ... a smaller slice {'H'}

1615925935
aconbere
and I would have expected that mem.eql would return false

1615925939
aconbere
I was surprised by the panice :)

1615925942
aconbere
panic

1615925964
yyp
Well, you use testing.expect which panics when the supplied value is false

1615925984
aconbere
ohhhhhhh

1615926011
aconbere
huh

1615926022
aconbere
is there a better test function to use?

1615926023
yyp
You could have used something like std.log.info("{}", mem.eql(...))

1615926036
yyp
And it will output it in the console

1615926038
g-w1
no; you want it to panic

1615926046
ifreund
aconbere: testing.expectEqualSlices() iirc

1615926066
ifreund
and yeah you want it to panic, that's how you trigger test failure

1615926086
aconbere
I mean I get I want a test failure :)

1615926097
aconbere
this is just surprisingly unhelpful test output

1615926107
aconbere
that's what surprised me

1615926120
ifreund
expectEqualSlices() will give you better test output

1615926134
aconbere
I would typically expect a fairly verbose statement of what had failed, what was different, the stack trace to be local to the test that failed etc.

1615926134
g-w1
i get a nice backtrace

1615926179
ifreund
this is what you get if you use the proper test function

1615926203
aconbere
g-w1: my stack is full of stuff in the std library

1615926224
aconbere
like it takes me to where the failure was, but it's not telling me a lot about how my program isn't working :)

1615926236
g-w1
ah, makes sense :)

1615926286
ifreund
that's exactly what testing.expect() does. It's an opaque bool to the std code

1615926300
ifreund
the std can't know that you are passing the result of mem.eql() on two slices

1615926329
aconbere
so I mean, my example there was just a small reproduction

1615926331
ifreund
instead using testing.expectEqualSlice() which IS then aware you are comparing slices and can print a nice message

1615926342
aconbere
in reality what's happening is that the function I was calling was returnning an error

1615926354
yyp
I wouldn't say that expectEqualSlice is that nice

1615926354
aconbere
ooo maybe not

1615926359
aconbere
maybe it's just a different enum value

1615926365
aconbere
but I couldn't tell haha

1615926395
aconbere
I think I probably want expectEqual

1615926410
aconbere
I've just been plodding along from what I read in the std library and ziglearn

1615926412
ifreund
yyp: I said can not does to be fair :P

1615926426
ifreund
as you can see there is a TODO in the function

1615926437
ifreund
expectEqualStrings is actually nice

1615926449
yyp
Let me check that

1615926469
ifreund
aconbere: totally fair, the std is certainly not well documented yet, nor is that the top priority

1615926470
aconbere
yeah expectEqual is way better

1615926475
yyp
Yep, that's really nice

1615926490
aconbere
it's cool! That's why I asked

1615926567
aconbere
Maybe just to ... reply my mental model because I think it might shed some light on how expect could be better

1615926582
aconbere
I expected panics to be... unusual rather exceptional even

1615926593
aconbere
my initial concern was that my function was panicing in some way

1615926608
aconbere
I'm messing with this peekStream and readers in ways that I'm unfamiliar with

1615926624
aconbere
I looked into wether my reader was being passed in incorrectly and getting the wrong anytype

1615926631
aconbere
and poking into the wrong memory

1615926653
aconbere
I was worried that my [0..1] slice was creating some sort of weird memory

1615926657
aconbere
or an invalid call in some way

1615926691
aconbere
so the hard part for me was differentiating the panic behavior of `testing.expect` from the potential panic'ing of my own software

1615926863
aconbere
:)

1615926864
ifreund
the panic message of "test failure" should make that clear...

1615926892
aconbere
haha

1615926893
ifreund
but I guess that's probably only obvious to someone already familiar with how this stuff is set up

1615926899
aconbere
I couldn't tell if the test suite was catching the panic

1615926904
vent
I'm trying to pass a slice from std.os.argv into std.mem.joinZ, but I'm getting a type error. The compiler claims "slice type child '[*:0]u8' cannot cast into slice type child '[]const u8'". It is possible to cast a var into a const, right?

1615926909
aconbere
and being like "yo, your code panic'd thus failure"

1615926937
ifreund
vent: indeed, but a [*:0]u8 is a null terminated pointer not a slice.

1615926937
ikskuh
vent: [*:0]u8 is not a slice type but a pointer to many

1615926949
ifreund
you can iterate and find the length with std.mem.span()

1615926952
ikskuh
you can use std.mem.spanZ() to obtain a nul-terminated slice

1615926956
aconbere
ifreund: I don't think this is horrible, but I think it's useful to hear from neophytes just so we walk about the experience :)

1615926962
aconbere
s/walk/talk

1615926968
ifreund
ikskuh: don't use spanZ() here, you don't need it

1615926989
ikskuh
it removes less information from the type though

1615926992
ifreund
that's only necessary if you have e.g. an array with 0s somewhere in the middle

1615927026
ifreund
ikskuh: std.mem.span() should return a [:0]u8

1615927049
ifreund
does it not?

1615927090
ikskuh
not sure

1615927099
ifreund
the doc comment says it does...

1615927152
ikskuh
yeah true

1615927181
ifreund
the code looks like it should work too, but I'm to lazy to test it

1615927300
ifreund
ikskuh: span and spanZ have the exact same return type...

1615927328
ikskuh
ah well :D

1615927374
ifreund
Oh I was definitely guilty of using spanZ() without need for a while until I looked more closely :D

1615927383
ikskuh
well

1615927394
ikskuh
spanZ will guarantee you the shortest span :D

1615927431
ikskuh
i think it's actually better to use spanZ by default

1615927447
ikskuh
as you get the "expected" result when working with sentinelled data types

1615927536
ifreund
I disagree, passing a [:0] to spanZ() wastes cycles

1615927596
ifreund
you only need to do spanZ() when you have a [N:0]u8 that has early sentinels

1615927643
ifreund
I guess [:0]u8 could have early sentinels as well, but it generally doesn't

1615927656
yyp
I decided to make expectEqualSlices a bit nicer:

1615927839
vent
So, I'm still a bit lost, I need to iterate through each of the args that I want to pass to joinZ, right? Should I be passing each through span and storing that slice in a seperate array, then pass that array to joinZ?

1615927991
ifreund
if you have a fixed number of args you could do mem.joinZ(ally, ",", &[_][]const u8{mem.span(os.argv[1]), mem.span(os.argv[2])})

1615928042
vent
That seems good, but I don't have a fixed number of args.

1615928070
vent
A maximum limit on the args is okay though

1615928134
ifreund
then yeah just collect the slices returned by mem.span() in a [42][]const u8 before colling joinZ()

1615928431
vent
Okay, I think I'm getting closer. joinZ is now complaining that it expected a []const []const u8 but found a [256][]const u8

1615928463
ifreund
you're just one & away, pass joinZ a pointer to the array instead

1615928478
ifreund
(which will coerce to the expected slice of slices)

1615928635
vent
Ah, yeah that's done it. But it looks like I'm getting an integer overflow in joinZ:

1615928671
ifreund
could you paste the full code?

1615928744
vent


1615928793
ifreund
vent: the problem is that joinZ is trying to join the whole array, while not all of the 42 items are defined

1615928823
ifreund
you want to pass args[0..argv.len - 1] to joinZ

1615928895
vent
Nice! Yep, that worked!

1615928917
ifreund
:)

1615928947
vent
Thanks for helping me out, appreciate it

1615929132
ifreund
no problem! one other thing you probably want to do for robustness is add a check if there are more args than fit in your buffer of length 42

1615929153
ifreund
you could also just allocate a buffer of the correct size using your fixed buffer allocator

1615929339
andrewrk
mikdusan, thanks will do

1615929404
vent
Yeah, I've changed the buffer to 256 bytes. AFAIK 255 bytes is the limit for file paths on most filesystems. Although it looks like exFAT's limit is 255 UTF-16 characters, so I think I'll make it 512 bytes.

1615929446
andrewrk
vent, we have std.fs.MAX_PATH_BYTES

1615929537
vent
andrewrk: Ah awesome, using that now. Thanks.

1615929546
ifreund
vent: that's not the same as the max number of args

1615929570
andrewrk
ah my bad I did not read any context

1615929596
ifreund
I don't think there is a maximum there, just a cap on the total amount of memory argv can take

1615929610
ifreund
see the execve(2) man page for some info

1615929619
mikdusan
andrewrk: I'm working on a new ci job for macos-arm64. what do you think, should we switch to ninja?

1615930197
yyp
`var arr: [10]u8 = undefined;` makes an empty array of 10 u8s, right? Or will it crash once I try to use something?

1615930236
ifreund
yyp: using a undefined value is illegal behavior

1615930247
yyp
-.-

1615930253
ifreund
s/using/branching on/ to be more precise

1615930258
yyp
how do I create an empty array then?

1615930265
ifreund
define empty?

1615930266
g-w1
wdym empty?

1615930293
ifreund
if you want a array full of 0s: var arr = [1]u8{0} ** 10;

1615930352
yyp
Yeah, that was it, thanks!

1615930400
andrewrk
mikdusan, ninja might save a few minutes of time - go for it!

1615930434
andrewrk
yyp, if you are passing to a parameter (or other context where you have a type to coerce to) you can use this form: &.{}

1615930453
andrewrk
const empty_string_list: []const []const u8 = &.{};

1615930460
yyp
I was just wondering how FixedBufferAllocator works when you give buffer of undefined

1615930488
andrewrk
undefined bytes, or undefined pointer?

1615930496
dutchie
is &.{} now considered more idiomatic than &[_]T{}?

1615930501
dutchie
i gues it's a few chars shorter

1615930503
yyp
andrewrk: undefined pointer

1615930511
andrewrk
dutchie, it can be convenient to omit the type

1615930518
g-w1
yyp: then you get ub :)

1615930524
yyp
but it did work

1615930524
dutchie
andrewrk: true

1615930552
g-w1
wdym undefined ptr? that should segfault

1615930583
yyp
nevermind, I didn't actually use FBA

1615930655
yyp
Hm, passing &buf (buf = undefined) to Reader.readUntilDelimiterOrEof worked fine

1615930666
yyp
I honestly have no idea why

1615930682
g-w1
what is type of buf?

1615930689
yyp
[512]u8

1615930692
g-w1
it seems like the

1615930693
dutchie
that's expected, the reader will do the equivalent of `buf[0] = thing i just read` so you never get back undefined

1615930704
g-w1
yeah the pointer is not undefined; the value is

1615930717
yyp
Okay, got it

1615930745
yyp
I still don't get why it could index into undefined

1615930767
g-w1
its not indexing into undefined

1615930773
dutchie
indexing is basically just pointer arithmetic, like in c

1615930785
g-w1
the pointer is totally defined; it is the addr of buf

1615930790
andrewrk
yyp, how do you know it worked fine?

1615930795
yyp
Looks like I don't understand Zig's undefined yet

1615930800
yyp
andrewrk: it read the text

1615930810
aconbere
hmmm

1615930819
yyp
nevermind, I passed undefined VALUE not a pointer

1615930824
andrewrk
I think we need to see some code to understand what's happening :)

1615930825
g-w1
undefined in zig is the same as `var buf: [512]u8;` in c

1615930836
aconbere
my peekstream does not appear to be peeking

1615930879
yyp
Problem solved: that was just me not understanding Zig yet

1615930880
g-w1
andrewrk: what is happening is they are writing into a buf that is undefined which is perfectly fine. the type of the buf is [512]u8. the ptr is not undefined, the buf is.

1615930890
cepheus
if a pointer is undefined, then dereferencing it is undefined

1615930908
cepheus
if a pointer is to an undefined value, dereferencing it is fine

1615930915
ifreund
nope, only branching on the undefined value is illegal

1615930960
ifreund
s/nope,//  I didn't read well enough

1615930968
mikdusan
hmm I added a build-artifact to azure pipeline. Is there a download button somewhere?:

1615930971
mikdusan


1615930992
andrewrk
mikdusan, IMO the less we integrate with azure for CI stuff the better

1615931003
mikdusan
yes but i need to grab it to inspect

1615931009
andrewrk
ah I'll look for ya

1615931028
yyp
I should have understood what undefined actually does or just use [_]u8{0} ** 512 instead to avoid magic :)

1615931034
yyp
Thanks everyone!

1615931107
andrewrk
mikdusan, click "BuildMacOS_arm64" and it has "1 artifact" underlined

1615931122
andrewrk
I can access it logged out

1615931142
mikdusan
oh sweet thanks!

1615931167
g-w1
andrewrk: when you have a chance, could you look at my pr again? I think I fixed the issue

1615931194
andrewrk
yep

1615931280
andrewrk
merged :)

1615931696
g-w1
hmm, if i do @setBranchEvalQuota in a lower block, then exit the block, is the higher quota still there?

1615931716
g-w1
or am I missing something, like is there a different sema per block? or a branch quota stack?

1615932400
andrewrk
g-w1, you can only ever increase the quota, not decrease it. the quota is shared by all inline and comptime function calls for a given Decl

1615932423
andrewrk
Decl is an important concept to wrap your head around in stage2

1615932434
andrewrk
it's the "root" of ownership of memory and other things such as branch quotas

1615932513
g-w1
ah I see, every decl has one Sema

1615932543
g-w1
this would allow better multithreading too

1615932737
andrewrk
fyi

1615932764
andrewrk
yeah I am thinking we want to be able to analyze 2 different Decls at the same time with threads

1615932892
g-w1
then the Module would be the blocking thing i guess but that can be optimised

1615932922
g-w1
it seems best to keep reliance on Module at a very minimum to reduce the amount of locks

1615933249
andrewrk
yeah that's the idea

1615933260
andrewrk
that's why we don't do global string interning and global type interning

1615933731
ed_t
I could use some advice here.

1615933752
ed_t
I want to go from strings like: const aPipe = "gen(100) | a: exactdiv(5) | b: fanin | console ? a: | exactdiv(9) | b:"

1615933799
ed_t
which when executed outputs: 0 5 9 10 15 18 20 25 27 30 35 36 40 45 50 54 55 60 63 65 70 72 75 80 81 85 90 95

1615933847
ed_t
gen is function which I have in a struct (so @field can be used to find it)

1615933857
oats
so you want to make a number processing language of some kind?

1615933882
andrewrk
step 1: tokenize, step 2: Abstract Syntax Tree

1615933897
ed_t
its sig looks like: fn gen(self:*Stage, limit:usize) callconv(.Async) !void

1615933985
ed_t
I've figured out how to create tuples with the function and args.  now I need to go from the string 100 to the value.  Also instead of 100 there could be a variable.

1615934024
ed_t
I am not sure how to get these values into the tupples

1615934063
ed_t
btw this uses async on each of the stages (gen, exactdiv, fanin etc)

1615934096
ed_t
it provides a easy para-dyne for using async

1615934184
ed_t
and it gets even more fun.  In that there maybe many pipes in a program, also a stage like (gen) may also contain a pipe which can be connected in various ways to the parent pipe.

1615934339
ed_t
zig's async fits pipes very well and the low level stuff (eg running the pipe etc is 'easy').  Its how to handle the the pipes and there args which is giving me headakes (std.meta.Tuple and ...ArgsTuple are handy_

1615934513
ed_t
I find it quite confusing to understand exact what zig is doing at comptime vs runtime (simple in concept, hard in understanding)

1615934776
ed_t
oats I want to adapt "CMS Pipelines" to zig.  It cannot be an exact mapping but should be close enough to be quite useful.

1615934940
oats
well, I might be missing some details here, but have you ever written an interpreter? I wonder if following the traditional parser -> AST -> tree-walking interpreter paradigm might be simpler

1615934991
oats
why do you want to use async things?

1615935012
oats
do you need to be able to programmatically put together "pipelines" at runtime?

1615935119
ed_t
its how to get from astage(arg1,arg2...) and end up doing something like tuple[index of astage][1][1]=arg1, [astage}[1][2]=arg2 (currently [astage][0] is the stage function, and [astage][1][0]=is a pointer to a stage structure.

1615935138
ed_t
oats google cms pipelines

1615935169
ed_t
to implement that you need to use async (or threads, but async fits better)

1615935189
oats
sorry, I'm having trouble following what you're trying to do then :(

1615935198
oats
maybe someone else will have something useful

1615935351
ed_t
in the example above gen output numbers from 0 to 100, each number is passed to exactdiv, if it divides exactly its passes to fanin and then to console, if it does not exactly divide it gets passed to the second exactdiv which ignores anything that does not divide by 9 and passes the numbers that divided exact to the fanin stage.

1615935382
ed_t
(think directed graph)

1615935511
ed_t
the idea is to make the item passed anytype, so you could do things like, read a file, sort the lines, apply filters, and write the results back to a file or arraylist etc

1615935820
ed_t
oats been around quite a while (my first computer had all of 2K of ram to put it in perspective).  My knowledge is more practical than anything else, I've used more languages that most (from machine code, assemblers, things like forth, to many different high level compilers and interpreters).

1615935915
ed_t
my goal here is to get pipelines so they can be used as a zig utility with a library of builtin stages and the ability to easily add your own stages.

