1634690893
marler8997!~marler899@204.229.3.4
zig's combination of default struct arguments and anonymous initialization is freakin sick...I just remembered how awesome it really is.  It circumvents the need for other things like named parameters and default arguments

1634690916
andrewrk!~andrewrk@mail.ziglang.org
:)

1634752593
marler8997!~marler899@204.229.3.4
andrewrk, my latest PR might be a solution to https://github.com/ziglang/zig/issues/8070 ?? PR: https://github.com/ziglang/zig/pull/9987

1634757977
andrewrk!~andrewrk@mail.ziglang.org
ooh interesting

1634757980
andrewrk!~andrewrk@mail.ziglang.org
back on this topic again I see?

1634759767
frmdstryr!~jrm@172.58.187.49
What happend to os.SIG_IGN?

1634759941
andrewrk!~andrewrk@mail.ziglang.org
os.SIG.IGN

1634759987
frmdstryr!~jrm@172.58.187.49
Ah, thanks!

1634760016
andrewrk!~andrewrk@mail.ziglang.org
sorry for the trouble, had to experiment with namespacing everything when considering getting rid of `usingnamespace` (ultimately decided not to get rid of it)

1634760236
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: btw, i really love the semantic change of usingnamespace

1634760247
andrewrk!~andrewrk@mail.ziglang.org
nice

1634760251
andrewrk!~andrewrk@mail.ziglang.org
care to elaborate?

1634760788
jhuntwork!~jhuntwork@147.182.216.19
hi - just poking around with zig for the first time, seems really interesting - built it locally with my copy of cmake and llvm, just had a couple of questions

1634760814
jhuntwork!~jhuntwork@147.182.216.19
it looks like zig ships with an internal copy of musl, is that used with 'zig cc'?

1634760887
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: it makes a lot of code less "magic" as all symbols have a trivially searchable source

1634760896
ikskuh!~xq@2a0d:5940:6:163::ad7e
i don't have to guess which "usingnamespace" imports "foo"

1634760902
ikskuh!~xq@2a0d:5940:6:163::ad7e
because it just doesn#t

1634760930
haze!~haze@2603-7000-a300-1741-d41d-f366-0535-b2dd.res6.spectrum.com
ikskuh protty isnt a bit of fan

1634760991
jhuntwork!~jhuntwork@147.182.216.19
also, zig builds fine with default cmake params, but if I set -DZIG_STATIC the build ends with a segfault around the zig0 target

1634762072
ifreund!~ifreund@user/ifreund
I'm also very happy with the usingnamespace semantics change

1634762095
ifreund!~ifreund@user/ifreund
I'm not convinced that the os.SIG_IGN to os.SIG.IGN change is a net benefit though

1634762123
ifreund!~ifreund@user/ifreund
even with the new usingnamespace semantics the first one shouldn't be prohibitievly awkward to implement 

1634762138
ifreund!~ifreund@user/ifreund
and the old way is much more greppable from OS docs/man pages

1634762227
jhuntwork!~jhuntwork@147.182.216.19
just found https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html and I think that answers my first question about embedded musl - but still curious about the segfault, but haven't looked deeper into it yet

1634762263
jhuntwork!~jhuntwork@147.182.216.19
I was actually surprised to find the zig binary that was shipped in the latest archive is a dynamically linked bin

1634762421
ifreund!~ifreund@user/ifreund
jhuntwork: it needs to dynamically link libc on everything except for linux afaik

1634762444
ifreund!~ifreund@user/ifreund
as libc is the only stable way to make syscalls on e.g. MacOS or FreeBSD

1634762476
ifreund!~ifreund@user/ifreund
I wonder if your segfault is triggered by running out of memory..

1634762529
jhuntwork!~jhuntwork@147.182.216.19
that would be surprising, but I could look at it - I may not have any swap enabled

1634762562
jhuntwork!~jhuntwork@147.182.216.19
ifreund: what I meant was that I unpacked the zig-linux-x86_64-0.9.0-dev.1433+4a76523b9.tar.xz archive

1634762572
jhuntwork!~jhuntwork@147.182.216.19
and the zig inside it is a dynamic binary

1634762591
jhuntwork!~jhuntwork@147.182.216.19
zig: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, not stripped

1634762602
jhuntwork!~jhuntwork@147.182.216.19
ldd shows

1634762628
jhuntwork!~jhuntwork@147.182.216.19
 /lib/ld-musl-x86_64.so.1 (0x7fd3e0446000)

1634762674
jhuntwork!~jhuntwork@147.182.216.19
it works fine for my system, which is musl based, but was just surprised, I thought your docs said you ship a static binary

1634763079
jhuntwork!~jhuntwork@147.182.216.19
added swap, still got the segfault and anyway, the system shows no swap is used

1634763097
jhuntwork!~jhuntwork@147.182.216.19
[164594.742193] zig0[21525]: segfault at 0 ip 0000000000000000 sp 00007ffe01e9d018 error 14 in zig0[200000+1ede000]

1634763103
jhuntwork!~jhuntwork@147.182.216.19
[164594.742197] Code: Unable to access opcode bytes at RIP 0xffffffffffffffd6.

1634763976
andrewrk!~andrewrk@mail.ziglang.org
ifreund, I agree with you and would be amenable to reverting that stuff

1634763980
andrewrk!~andrewrk@mail.ziglang.org
before 0.9.0

1634764048
andrewrk!~andrewrk@mail.ziglang.org
jhuntwork, are you talking about the download page? it should be statically linked

1634764061
jhuntwork!~jhuntwork@147.182.216.19
yes, it doesn't seem to be

1634764071
jhuntwork!~jhuntwork@147.182.216.19
you can verify by running file and ldd against it

1634764101
andrewrk!~andrewrk@mail.ziglang.org
it appears to be statically linked to me

1634764123
jhuntwork!~jhuntwork@147.182.216.19
interesting

1634764137
andrewrk!~andrewrk@mail.ziglang.org
I get the same output as you with the `file` command; I believe it's a bug in file

1634764266
jhuntwork!~jhuntwork@147.182.216.19
ldd also shows it as dynamic though

1634764323
jhuntwork!~jhuntwork@147.182.216.19
/lib/ld-musl-x86_64.so.1 --list zig

1634764331
jhuntwork!~jhuntwork@147.182.216.19
  /lib/ld-musl-x86_64.so.1 (0x7fd0438c8000)

1634764342
jhuntwork!~jhuntwork@147.182.216.19
vs /lib/ld-musl-x86_64.so.1 --list /bin/busybox

1634764351
jhuntwork!~jhuntwork@147.182.216.19
 /lib/ld-musl-x86_64.so.1: /bin/busybox: Not a valid dynamic program

1634764399
jhuntwork!~jhuntwork@147.182.216.19
haven't actually tried running it on a system without musl though

1634764404
jhuntwork!~jhuntwork@147.182.216.19
could try that next I suppose

1634764533
jhuntwork!~jhuntwork@147.182.216.19
interesting - ldd on a ubuntu machine shows it as statically linked and it does work

1634767354
jhuntwork!~jhuntwork@147.182.216.19
ok, even weirder, if I try to use the zig from the downloaded package to compile a hello world c exmple, the resulting binary segfaults on my system

1634767367
jhuntwork!~jhuntwork@147.182.216.19
but if I use the zig that I compiled myself from source, it doesn't

1634767685
jhuntwork!~jhuntwork@147.182.216.19
https://gist.githubusercontent.com/jhuntwork/e4bdd2cebeb012fe2400394396bccfb9/raw/eafe28324c4a0f961f57127065a968b1e3cded9e/zigtest.txt

1634767853
jhuntwork!~jhuntwork@147.182.216.19
I don't see this behavior on a ubuntu machine or an alpine container, so must be something weird with mine, but no idea what yet

1634768242
jhuntwork!~jhuntwork@147.182.216.19
hmm, might be a kernel bug

1634769944
flux_control!~flux@sourcemage/wizard/flux
jhuntwork: You can also try readelf -d /path/to/zig.

1634770047
flux_control!~flux@sourcemage/wizard/flux
FOr me that does show that zig is dynamically linked, but not to a specific library (ie libc), only to specific libc symbols (INIT, FINI, etc).

1634770119
flux_control!~flux@sourcemage/wizard/flux
Whereas a fully static binary (such as /sbin/init on my Void Linux system) results in "There is no dynamic section in this file."

1634770149
flux_control!~flux@sourcemage/wizard/flux
andrewrk: What does readelf -d show you on your ubuntu system for the zig binary?

1634770985
andrewrk!~andrewrk@mail.ziglang.org
I'm on nixos

1634771007
andrewrk!~andrewrk@mail.ziglang.org
readelf would say the same thing on any system for the same binary

