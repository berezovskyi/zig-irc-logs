1630376246
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: gotcha, so its more work on linker's part, but debloats binary size a lot, thanks!

1630376291
andrewrk!~andrewrk@mail.ziglang.org
g-w1, yeah more bookkeeping on the linker's part, but actually *less* work because the frontend will garbage collect many decls without the linker ever seeing them

1630376302
andrewrk!~andrewrk@mail.ziglang.org
less actual cpu/memory work 

1630376313
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ahhh gotcha

1630376351
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its not that hard in the linker either, just have a fn seeDecl(self, decl) {}

1630376372
andrewrk!~andrewrk@mail.ziglang.org
btw g-w1 there is a sentinel() function and elemType() function in Type

1630376394
andrewrk!~andrewrk@mail.ziglang.org
re: #9603

1630376422
andrewrk!~andrewrk@mail.ziglang.org
that abstracts over the tag()

1630376424
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ohh, thanks.

1630376454
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
one thing I thought of: should .tag() be less ergonomic since it should not be used that often outside of type/value.zig?

1630376485
andrewrk!~andrewrk@mail.ziglang.org
idk, I think anyone editing Sema needs to fundamentally understand that it is implementing a type system

1630376506
andrewrk!~andrewrk@mail.ziglang.org
so you gotta go through the type system, not the how-values-and-types-are-represented-in-memory system

1630376529
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1630376882
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, most use of tag() removed (still needed for empty_array, as elemValue does not work for that)

1630377724
andrewrk!~andrewrk@mail.ziglang.org
not sure what you mean

1630377755
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
actually,I think it is not needed

1630377961
andrewrk!~andrewrk@mail.ziglang.org
mind making getArrayCatInfo non recursive? also prefer a switch on zigTypeTag() when multiple if branches are checking the same value

1630377993
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
why non recursive?

1630378028
andrewrk!~andrewrk@mail.ziglang.org
in general recursion makes it harder for the compiler to understand the function call graph, and do stuff like compute the stack size upper bound

1630378063
andrewrk!~andrewrk@mail.ziglang.org
it's too useful to ignore in some places but generally non-recursive code is more statically analyzable

1630378075
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I see

1630378084
andrewrk!~andrewrk@mail.ziglang.org
even from a human perspective; it's not obvious at first glance that that function can't possible recurse more than once

1630378108
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I guess functional stuff has made me see recursion in stuff like this, thanks for a more zig-perspective on this

1630378145
andrewrk!~andrewrk@mail.ziglang.org
I think the recursion distracts from the actual thing that is happening, making it more opaque to refactoring, in this specific case

1630378201
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/1006

1630378451
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
this post also comes to mind, http://orib.dev/simplicity.html recursion is more complex than a loop

1630379146
andrewrk!~andrewrk@mail.ziglang.org
g-w1, next simplification: ArrayCatInfo should just be ArrayInfo and it should be the return type of a function arrayInfo, right next to ptrInfo in Type

1630379162
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cool :), thanks for the feedback

1630379191
andrewrk!~andrewrk@mail.ziglang.org
even a loop is overkill here. .Pointer => { ...; return ptrinfo.pointee_type.arrayInfo(); }

1630379329
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
with the impl of arrayInfo:     fn arrayInfo(self: Type) ArrayInfo { return .{ .len = ty.arrayLen(), .sent = ty.sentinel(), .array_elem_type = ty.elemType(), }; } ?

1630379548
andrewrk!~andrewrk@mail.ziglang.org
PtrInfo spells out "sentinel"; best to be consistent

1630379556
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
üëç

1630379570
andrewrk!~andrewrk@mail.ziglang.org
the implementation looks fine; although *this* is the place you can use tag() if you want :)

1630379580
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
haha

1630379621
andrewrk!~andrewrk@mail.ziglang.org
with "array_elem_type" the word "array" is redundant since it is of the struct "Array"

1630379626
andrewrk!~andrewrk@mail.ziglang.org
ArrayInfo I mean

1630380270
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
pushed.

1630380609
andrewrk!~andrewrk@mail.ziglang.org
I found another tag()

1630381380
klardotsh!~klardotsh@97-113-192-99.tukw.qwest.net
any chance leecannon (from https://github.com/leecannon/zig-libgit2) hangs around here? I'm working on a git thing in zig and am going to need to extend the bindings but don't want to duplicate any work they're already in flight on

1630381436
andrewrk!~andrewrk@mail.ziglang.org
klardotsh, unfortunately I'm not aware of any username here associated with leecannon

1630381620
klardotsh!~klardotsh@97-113-192-99.tukw.qwest.net
ah, no worries! thanks tho!

1630384139
freshcoffee!~fresh@user/freshcoffee
hmm there was a 'Lee Cannon#5908' on discord

1630399435
feco!~feco@91EC8CE5.dsl.pool.telekom.hu
Hi! I'm very beginner of the Zig programming language, and I need some help to solve a very simple problem: I would like to write a usize variable to a file with the std.io.Writer, how can I do this, I don't want to extract it to a u8 array, can I solve this with pointers?

1630399628
ifreund!~ifreund@user/ifreund
feco: you can just do writer.writeInt(usize, foo, endian);

1630399663
ifreund!~ifreund@user/ifreund
see also the writeIntNative/Foreign/Big/Little functions

1630399823
feco!~feco@91EC8CE5.dsl.pool.telekom.hu
thx

1630406601
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Does anyone happen to have a handy portable wrapper around mmap()/MapViewOfFile()?

1630408773
ikskuh!~xq@2a0d:5940:6:163::ad7e
Ayo: not sure, but i think we even have on in the stdlib

1630408855
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah, no

1630408894
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
I grepped for MapViewOfFile and didn't get a match, so looks like even the wrappers for that are missing at the moment :)

1630408950
ikskuh!~xq@2a0d:5940:6:163::ad7e
mmap is there, but MapViewOfFile might not be

1630420049
dch!sid1310@couchdb/committer/dch
klardotsh: see https://github.com/leecannon/zig-libgit2/commit/71260ee107959e18f295571911fab6b0a7fb0ae4.patch for an email address for lee

1630420079
cot!~kiedtl@kisslinux/kiedtl
Is anyone aware of any PEG/LR parser generator libraries in Zig?

1630420119
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/Hejsil/mecha

1630420147
cot!~kiedtl@kisslinux/kiedtl
thanks!

1630431818
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Is there a way to distinguish `foo.bar(foo2)` fom `Foo.bar(foo, foo2)` (foo being an instance of Foo) ?

1630433813
andrewrk!~andrewrk@mail.ziglang.org
LukeSkwkr, not sure what you're asking, but there's an active task to make those two things distinct at the parser level

1630433836
andrewrk!~andrewrk@mail.ziglang.org
never mind, I thought you were talking about a different concept

1630433844
andrewrk!~andrewrk@mail.ziglang.org
no, there is no difference whatsoever and that is intentional

1630435003
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: I think I finally got rid of all tag()

1630435016
andrewrk!~andrewrk@mail.ziglang.org
nice

1630435024
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sorry for so much back and forth

1630435679
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: Any idea how faster stuff is now with 9659 merged?

1630435682
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
andrewrk: ok thx

1630435714
andrewrk!~andrewrk@mail.ziglang.org
Ristovski, about 1ms on initialization

1630435834
Ristovski!~Ristovski@hellomouse/perf/ristovski
oh hmm, expected more, interesting that it's so efficient already (when loading all of them)

1630435921
watzon!~watzon@136.36.149.145
This is Zig we're talking about. Is efficiency not the name of the game? ;)

1630436316
andrewrk!~andrewrk@mail.ziglang.org
watzon, it's llvm we're talking about :) LLVMInitializeAllTargets()

1630436374
andrewrk!~andrewrk@mail.ziglang.org
it's a negligible improvement, but the code is arguably more correct and cleaner regardless, so the change was welcome

1630437495
watzon!~watzon@136.36.149.145
Ahh just looked at the PR. Kinda surprised too.

1630437515
watzon!~watzon@136.36.149.145
Man I need to start helping with issues

1630438089
andrewrk!~andrewrk@mail.ziglang.org
remember when there were less than 1,000 issues? good times

1630438128
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
soon we can delete all the stage1 issues :D

1630438829
luuk!~luuk@user/luuk
Some still need to be verified they are fixed by stage2 tho :)

1630439298
watzon!~watzon@136.36.149.145
It's ok, having a ton of issues is how you know you're doing well

1630439521
cot!~kiedtl@kisslinux/kiedtl
Source? :P

1630439624
andrewrk!~andrewrk@mail.ziglang.org
luuk, agreed, before closing any stage1 bugs we should add them as test cases :)

1630439772
luuk!~luuk@user/luuk
:)

1630440963
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I have a question about compilation. I know it is possible to indicate that functions should be inlined. However, I don¬¥t like to play compiler police. Will the compiler inline functions if it deems it to be a good idea for efficiency reasons?

1630441058
andrewrk!~andrewrk@mail.ziglang.org
Daimanta, yes, in optimization modes other than Debug

1630441086
andrewrk!~andrewrk@mail.ziglang.org
the inline keyword will force the function to be always inlined, even in Debug mode

1630441104
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
ah, that¬¥s cool. I prefer not to outsmart the compiler.

1630441112
andrewrk!~andrewrk@mail.ziglang.org
wise decision

1630442915
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if only everyone were like you

1630443821
noam!~noam@104.232.42.247
depends on the compiler

1630443943
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ACTION writes in her sketchpad

1630444705
bgiannan!~bgiannan@89-159-99-157.rev.numericable.fr
how do you escape `{` and `}` in a fmt string ?

1630444735
andrewrk!~andrewrk@mail.ziglang.org
double them up: {{ }}

1630444871
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
does anyone really like the format shorthands for alignment and padding 

1630445015
bgiannan!~bgiannan@89-159-99-157.rev.numericable.fr
andrewrk, thx

1630445034
andrewrk!~andrewrk@mail.ziglang.org
haze, example?

1630445050
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i literally dont even know if i can produce it off the dome because its so contrived

1630445062
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
something {:2><} whatever

1630445065
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
looks like poop regex

1630445079
andrewrk!~andrewrk@mail.ziglang.org
no, I do not like it

1630445104
noam!~noam@104.232.42.247
Yeah, give me a printf format string any day

1630445120
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
should i make a proposal for anonymous structs that work with fmt to just add alignment and padding

1630445127
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thats what i had in mind buyt too many people like them :/

1630445205
ifreund!~ifreund@user/ifreund
I don't like them either fwiw

1630445223
ifreund!~ifreund@user/ifreund
I have to read the doc comment and the test cases pretty much every time I want to do something non-trivial

1630445290
andrewrk!~andrewrk@mail.ziglang.org
during one of the release cycles in which the focus is stabilizing the std lib I think std.fmt can get a breaking overhaul

1630445298
andrewrk!~andrewrk@mail.ziglang.org
I would personally propose something inspired by printf

1630445376
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
why did you base it off rust in the beginning?

1630445408
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
andrewrk how is printf any better

1630445413
andrewrk!~andrewrk@mail.ziglang.org
the only thing I did at the beginning was {} which is standard in a lot of languages

1630445421
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ahh

1630445432
andrewrk!~andrewrk@mail.ziglang.org
then I just clicked the green button a lot of times

1630445467
andrewrk!~andrewrk@mail.ziglang.org
haze, what's your ideal?

1630445497
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
put locations in the format string and then be explicit with something like anonymous struct literals for the things being inserted

1630445508
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
instead of tossing them in the format string itself

1630445516
andrewrk!~andrewrk@mail.ziglang.org
what do you mean locations?

1630445555
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
like print("a <> b", .{ .{.ty = .int, .val = i }}) ?

1630445572
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
something like that i guess

1630445580
noam!~noam@104.232.42.247
egads

1630445583
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
id keep the {} since its pretty standard

1630445618
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
id be ok with keeping the type in the format string but things like padding, alignment, decimal precisions & etc get to go elsewhere

1630445629
noam!~noam@104.232.42.247
I dunno

1630445636
noam!~noam@104.232.42.247
I really like e.g. "0x%08x"

1630445666
noam!~noam@104.232.42.247
Even zig status quo is better IMO, since it keeps formatting details where they're used

1630445674
noam!~noam@104.232.42.247
I personally consider it more readable

1630445689
andrewrk!~andrewrk@mail.ziglang.org
yeah, I don't like this recent migration to use {} along with a format() method 

1630445739
ifreund!~ifreund@user/ifreund
I especially don't like it because the format() method implementer things aren't composable

1630445762
ifreund!~ifreund@user/ifreund
std.fmt works well enough for us to get the higher priority things done though

1630445834
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
[17:04:57]  <noam> I really like e.g. "0x%08x"

1630445836
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
what does this even do

1630445843
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if it were in english i wouldnt have to ask ‚Äî thats my point

1630445852
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
8 decimals of hex number?

1630445863
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
0x00000000a ?

1630445873
freshcoffee!~fresh@user/freshcoffee
0xaaaaaaaa :)

1630445895
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Short question. In a builder you can supply a version. What does this version actually do?

1630445907
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ifreund wdym by ytour first comment

1630445909
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
maybe for shared libs?

1630445959
noam!~noam@104.232.42.247
g-w1: yep

1630445967
andrewrk!~andrewrk@mail.ziglang.org
Daimanta, https://unix.stackexchange.com/questions/475/how-do-so-shared-object-numbers-work

1630445978
noam!~noam@104.232.42.247
haze: pads with zeroes to length eight

1630445990
noam!~noam@104.232.42.247
and yes, there's a slight learning curve to them

1630446008
noam!~noam@104.232.42.247
but it's a lot more readable once you've spent even a little bit of time with them :)

1630446015
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Thanks :)

1630446017
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
print("%x", .{.pad_char = '0', .pad_len = 8})

1630446034
ifreund!~ifreund@user/ifreund
haze: you can't use e.g. std.zig.fmtId() in combination with your own custom std.fmt.Formatter() 

1630446041
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i like zig because when i sent code to people they dont have to learn anything its all very simple and upfront

1630446048
noam!~noam@104.232.42.247
print("%d: %x, %x", .{ .{}, .{.pad_char = '0', .pad_len = 8}...)

1630446050
ifreund!~ifreund@user/ifreund
instead you have to reimplement std.zig.fmtId() as part of your custom formatter

1630446063
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ive never used fmtId sorry i dont know what that does

1630446065
noam!~noam@104.232.42.247
haze: ^ it quickly gets worse if you use more than one formatter in a single print

1630446077
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
noam then make them variables on separate lines

1630446080
noam!~noam@104.232.42.247
because now I have to track commas to figure out which formatting applies to which string

1630446081
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
not everything has to be as condensed as possible

1630446082
noam!~noam@104.232.42.247
Or track lines, sure

1630446091
ifreund!~ifreund@user/ifreund
haze: wraps the thing you are printing in @"" if it is not a valid zig identifier otherwise

1630446095
ifreund!~ifreund@user/ifreund
very useful for code generation

1630446097
noam!~noam@104.232.42.247
Yeah, but not everything needs to be given a bunch of english names

1630446106
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
debatable

1630446107
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ifreund ah

1630446113
noam!~noam@104.232.42.247
printf("%d: 0x%08X", foo, bar);

1630446121
ifreund!~ifreund@user/ifreund
but the same holds for any two std.fmt.Formatter() implementations

1630446125
ifreund!~ifreund@user/ifreund
the interface isn't composable

1630446136
noam!~noam@104.232.42.247
vs what, thre lines just to specify formatting for the second value?

1630446140
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yes

1630446147
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
there is no harm in more verbose code

1630446150
noam!~noam@104.232.42.247
Yes there is

1630446156
noam!~noam@104.232.42.247
It distracts from more important factors

1630446159
andrewrk!~andrewrk@mail.ziglang.org
I think it encourages a dangerous inversion of control too. In the C backend of stage2 I think we already got ourselves into a bit of a problematic situation with some important logic that found its way into the format() function, and then handling failure of that logic has to bubble up appropriately. it's not a great design

1630446208
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
interesteind, ive never used format with things that can fail o.0

1630446224
noam!~noam@104.232.42.247
fmtPrint("{")

1630446231
noam!~noam@104.232.42.247
:P

1630446241
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i treat it like rust's ToString which can't fail

1630446246
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
Display***

1630446246
noam!~noam@104.232.42.247
(I know, I know, that's not what you're talking about :P)

1630446254
ifreund!~ifreund@user/ifreund
andrewrk: yeah, it's a very functional programming pattern, and functional programming sucks at error handling

1630446276
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
noam "It distracts from more important factors" care to give an example

1630446277
noam!~noam@104.232.42.247
Sheesh, someone's never used a good FP language /s

1630446288
noam!~noam@104.232.42.247
Lua's error handling is great! /s

1630446301
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
zig should add tables

1630446310
noam!~noam@104.232.42.247
haze: any time you have a bunch of code which isn't necessary, it distracts from the actual logic going on

1630446322
noam!~noam@104.232.42.247
It's the same reason I consider bad comments actively harmful

1630446331
noam!~noam@104.232.42.247
e.g. /* does foo */ foo()

1630446334
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
bad comments that reiterate what's said with literate code suck

1630446335
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yes

1630446349
noam!~noam@104.232.42.247
That comment isn't just wasting space, it's *distracting* from what's happening

1630446353
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
sometimes i write code by typing a big comment at the top that breaks it up into sections

1630446358
noam!~noam@104.232.42.247
Time you spend thinking about it is time you're not spending solving whatever problem you're working on

1630446364
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
so you can section off "things used for variable formatting" and then the actual printing

1630446395
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i mean you also arent in a time crunch to read the code, it isnt going anywhere

1630446399
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you can reread it as many times as you like

1630446407
noam!~noam@104.232.42.247
That's not always true

1630446413
noam!~noam@104.232.42.247
I mean, yes, strictly speaking it's not going anywhere

1630446421
noam!~noam@104.232.42.247
but deadlines exist

1630446429
noam!~noam@104.232.42.247
and you don't always have infinite time to work on a project

1630446440
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
do you like having to define a variable outside of your loop conditionals

1630446442
noam!~noam@104.232.42.247
wasting time is never the end of the world, but there's never a reason to justify it

1630446449
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
e.g var f: usize = 0; while (f < 16): ...

1630446464
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
its a more acute case of distraction i think

1630446466
noam!~noam@104.232.42.247
I actually define all variables at the top of the body anyways

1630446473
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
SO WHAT

1630446477
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
WHY DO YOU CARE XDDD

1630446487
noam!~noam@104.232.42.247
So, that's not distraction - it separates data from control, making it easier to reason about

1630446492
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if you define them at the top anyways why does variable printing schema become a distraction

1630446504
noam!~noam@104.232.42.247
Because the two are entirely unrelated?

1630446536
watzon!~watzon@136.36.149.145
Quick question. How do I tell `build.zig` that I depend on libc.

1630446543
noam!~noam@104.232.42.247
linkLibC() IIRC

1630446544
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
exe.linkLibC()

1630446548
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
var hexFormat = fmt.Padded{.char = '0', .length = 8); at the top

1630446559
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
then you pass it in with your data at the print site

1630446561
watzon!~watzon@136.36.149.145
Y'all are amazing

1630446576
noam!~noam@104.232.42.247
haze: well, I also have to read other people's code

1630446583
noam!~noam@104.232.42.247
and they sure as heck aren't going to do that

1630446603
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
theres still going to be a section of code where variable schemas are stored

1630446614
noam!~noam@104.232.42.247
Most people will do it inline.

1630446618
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
and you can tune that out just as you do with other constructs that you yourself put at the top

1630446626
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
that isnt a fault of the language then 

1630446633
noam!~noam@104.232.42.247
Yes, it is.

1630446641
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you can do everything inline if you really wanted to

1630446645
noam!~noam@104.232.42.247
Any pattern encouraged by the language is *part* of the language.

1630446659
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but the language doesnt encourage either pattern

1630446677
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you're just shifting where the information is for things like alignment and padding

1630446682
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
into words instead of esoteric characters

1630446691
noam!~noam@104.232.42.247
Would you agree that, as a conservative estimate, at least 60% of people will define it inline?

1630446706
noam!~noam@104.232.42.247
also, %08x <- I don't think that's esoteric lol

1630446710
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
no because tbf i dont read others zig code that much

1630446718
noam!~noam@104.232.42.247
...?

1630446726
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i cant agree or disagree idk what zig people do

1630446731
noam!~noam@104.232.42.247
fair

1630446733
noam!~noam@104.232.42.247
0 <- format with zeros, 8 <- use eight of them

1630446748
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
hey

1630446751
noam!~noam@104.232.42.247
how is that complicated enough to require anonymous structures, multiple lines, and special formatting?

1630446751
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thats almost like a struct

1630446762
noam!~noam@104.232.42.247
nah

1630446773
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
not everyone knows these things

1630446774
noam!~noam@104.232.42.247
because I'm never going to be able to remember whether it's length, count, num, padlen, padding_length, etc

1630446776
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
and its a hurdle each time

1630446783
noam!~noam@104.232.42.247
and not everyone knows the names of your special structure!

1630446790
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if thats the case then why not explicitly define them 

1630446814
noam!~noam@104.232.42.247
Because you have to learn about it anyways - and if you have to learn about it, printf strings are easier to laern

1630446817
noam!~noam@104.232.42.247
learnU*

1630446817
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
%08x is more forgettable than a struct in fmt that has LSP support for fields

1630446819
noam!~noam@104.232.42.247
learn*

1630446828
noam!~noam@104.232.42.247
That's assuming everyone uses LSP

1630446847
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
one of the first questions newcomers to zig ask about is lsp

1630446853
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
that aside

1630446870
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
even if they don't remember the struct fields at least they are named and referenced by the compiler

1630446880
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
versus having the format function compileError with whats missing

1630446887
noam!~noam@104.232.42.247
How is that any different?

1630446894
noam!~noam@104.232.42.247
In one case, the compiler errors because you used a bad structure

1630446899
noam!~noam@104.232.42.247
In the other, it errors because you used a bad string

1630446901
noam!~noam@104.232.42.247
Yay?

1630446909
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
which one is more computer readable

1630446915
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
which one is more human readable

1630446920
noam!~noam@104.232.42.247
I'd argue printf to both

1630446927
noam!~noam@104.232.42.247
The structure variant requires a zig parser

1630446928
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thats because ur biased >.< $$

1630446929
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
bad structure will probably be nicer error messages

1630446935
noam!~noam@104.232.42.247
the string variant just requires, well, a string parser

1630446944
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
right now the string error messages are quite big

1630446954
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
do u have an example on hadn

1630446976
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you get a whole backtrace because you forgot a {

1630446992
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
vs it doesn't parse correctly

1630446994
noam!~noam@104.232.42.247
g-w1: that's a compiler issue

1630447003
noam!~noam@104.232.42.247
Or, arguably, a std.fmt issue

1630447006
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
not really

1630447022
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the whole coolness of zig is that std.fmt is entirely userspace

1630447029
noam!~noam@104.232.42.247
That's not what I mean

1630447076
noam!~noam@104.232.42.247
Eh, doesn't matter

1630447107
noam!~noam@104.232.42.247
Would you be intending to use anonymous literals, or a defined structure type?

1630447134
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
idk anonymous literals r kinda broken

1630447143
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
like if u nest them things get weird

1630447151
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but that will be fixed

1630447187
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ya i would use anonymous literals

1630447216
noam!~noam@104.232.42.247
buuuuut with anon literals, you effectively need to check all the fields at every function receiving them for correctness or the error messages will be verbose anyways

1630447224
noam!~noam@104.232.42.247
Since they'll end up occurring deeper within the call stack

1630447242
noam!~noam@104.232.42.247
Only with a defined type do you actually get the benefit of the compiler checking at the call site

1630447251
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wouldnt the error message just be there isnt a matching struct for the one you defined

1630447294
noam!~noam@104.232.42.247
Aren't literals of their own type, basically?

1630447329
noam!~noam@104.232.42.247
anonymous structs == tuples, or I have been away from zig long enough to forget a relatively important distinction? :P

1630447336
noam!~noam@104.232.42.247
have I*

1630447400
noam!~noam@104.232.42.247
ah wait, no

1630447414
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yeh thats wut i was thinkin

1630447421
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
idk if thats 2 much of a problem id just use the typed versions

1630447423
noam!~noam@104.232.42.247
I mean, sorta - what I meant is, anonymous structures passed to anytype aren't type checked?

1630447444
noam!~noam@104.232.42.247
e.g. foo = fn(bar: anytype)... foo(.{.baz = 0})

1630447462
noam!~noam@104.232.42.247
the argument is of its own type, no?

1630447750
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yes 

1630447942
noam!~noam@104.232.42.247
then the compiler wouldn't be able to check it

1630447953
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the compiler needs to check u

1630447977
noam!~noam@104.232.42.247
If you do end up implementing this - and you can do it as your own library if you want! It doesn't have to start in stdlib :) - I'd highly suggest *not* using anytype, then

1630448075
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i think you have to use anytype

1630448671
andrewrk!~andrewrk@mail.ziglang.org
I was imagining a different std.fmt strategy that used the comptime format string to verify correctness of the tuple arg passed in, but in an inline function, and only converted the arguments to be passed on the stack to a function which did the formatting at runtime

1630448698
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
to not bloat binary size?

1630448700
andrewrk!~andrewrk@mail.ziglang.org
yeah

1630448706
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and maybe an option to do it at comptime?

1630448723
andrewrk!~andrewrk@mail.ziglang.org
sure if that was better in some cases

1630448739
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its probably faster

1630448772
andrewrk!~andrewrk@mail.ziglang.org
if that were generally true, then the implementation could default based on whether ReleaseSmall was chosen

1630448784
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah

