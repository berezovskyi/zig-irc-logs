1640566498
dcx!~dcx@user/dac
How does a C *void translate to zig?

1640566518
dcx!~dcx@user/dac
I've tried [*]c_void and *c_void but they both fail CI

1640567027
dcx!~dcx@user/dac
use of undeclared identifier 'c_void'

1640568118
andrewrk!~andrewrk@mail.ziglang.org
dcx, https://ziglang.org/download/0.9.0/release-notes.html#c_void-renamed-to-anyopaque

1640569780
cr1901!~cr1901@2601:8d:8600:911:b03f:919f:5106:21c0
ACTION reads the release notes... there's a self-hosted linker?! Wow, nice!

1640575242
Stalevar!~stalevar@user/stalevar
Hello. I cannot build zig from source by official instruction. 

1640575257
Stalevar!~stalevar@user/stalevar
CMake Error at cmake/Findllvm.cmake:110 (message):

1640575257
Stalevar!~stalevar@user/stalevar
  LLVM (according to /usr/bin/llvm-config) is missing target AArch64.  Zig

1640575257
Stalevar!~stalevar@user/stalevar
  requires LLVM to be built with all default targets enabled.

1640575283
Stalevar!~stalevar@user/stalevar
The bug is reproducible both in 0.9.0 and 0.10.0 dev latest as on tarball downloaded from the official download page

1640575313
Stalevar!~stalevar@user/stalevar
I do not intend to build for AArch64, I only need a compiler for x86, which is listed among targets

1640575332
Stalevar!~stalevar@user/stalevar
$ llvm-config --targets-built

1640575332
Stalevar!~stalevar@user/stalevar
AMDGPU BPF X86

1640575416
Stalevar!~stalevar@user/stalevar
So, I think that zig build scripts should be adjusted to build zig anyway for targets which system-installed llvm has instead of interrupting the build

1640575499
Stalevar!~stalevar@user/stalevar
I do not want to rebuild system llvm to include targets which I do not plan to use anyway

1640578987
andrewrk!~andrewrk@mail.ziglang.org
upstream zig supports targeting aarch64. if you wish to disable that target then you are not building upstream zig, you are maintaining a fork

1640579056
andrewrk!~andrewrk@mail.ziglang.org
therefore you will have to follow non-official instructions to build from source

1640592148
Stalevar!~stalevar@user/stalevar
andrewrk, why llvm is able to disable targets without maintainging any forks?

1640592435
andrewrk!~andrewrk@mail.ziglang.org
LLVM and Zig have different goals driving the relevant decision making

1640592473
andrewrk!~andrewrk@mail.ziglang.org
the reason Zig has those checks in the build script is to increase friction for people to distribute handicapped zig binaries that do not support the full set of targets

1640592487
andrewrk!~andrewrk@mail.ziglang.org
you are experiencing intended friction

1640592961
andrewrk!~andrewrk@mail.ziglang.org
because we don't want users trying out the advertised cross compilation features and then discovering that it does not work

1640605847
bw!sid2730@user/betawaffle
am I remembering correctly that anyopaque is not a pointer by itself? If so, shouldn’t anyframe also be a type with unknown size that has to be behind a pointer?

1640607998
bw!sid2730@user/betawaffle
Where is the layout of a Frame type computed in the compiler?

1640612649
bw!sid2730@user/betawaffle
:O zig emits debug info for the Frame types

1640613555
Dko1905!~Dko1905@37.120.213.164
Why don't std.os.linux.* functions work on other unix-like systems?

1640613620
Dko1905!~Dko1905@37.120.213.164
std.os.linux.getuid causes a segfault on FreeBSD.

1640613780
bw!sid2730@user/betawaffle
Dko1905: they are syscalls

1640613845
Dko1905!~Dko1905@37.120.213.164
Yes but they fail: "Program terminated with signal SIGSYS, Bad system call."

1640613856
Dko1905!~Dko1905@37.120.213.164
When calling them through @cImport, they work.

1640613931
bw!sid2730@user/betawaffle
Dko1905: freebsd doesn't implement the same system calls as linux

1640613947
bw!sid2730@user/betawaffle
when you use @cImport, you'd actually calling libc

1640613973
bw!sid2730@user/betawaffle
libc is different on linux and freebsd

1640614035
bw!sid2730@user/betawaffle
iiuc, BSDs don't have a stable syscall interface

1640614058
bw!sid2730@user/betawaffle
but linux does, which is why zig has the `std.os.linux` module

1640614364
Dko1905!~Dko1905@37.120.213.164
Am I expected to write software that only works on Linux, or software that uses @cImports?

1640614385
Dko1905!~Dko1905@37.120.213.164
Why doesn't the std call libc? I would much rather have platform compat than speed.

1640614392
Stalevar!~stalevar@user/stalevar
andrewrk, but I have no intention to distribute zig binary, that's 1st, I just was told my program crashed under zig but worked under clang and gcc and I wanted to run it through the debugger to see why

1640614420
Stalevar!~stalevar@user/stalevar
2nd, intended crippling of functionality goes against spirit of free/libre software

1640614506
Stalevar!~stalevar@user/stalevar
3. The zig license says Zig is intended to be used to help **end-users** accomplish their goals. Zig should be used to empower end-users, never to exploit them financially, or to limit their freedom to interact with hardware or software in any way.

1640614534
Stalevar!~stalevar@user/stalevar
I am an end user, am I not. And now, zig is used to limit my freedom to interact with software, in this case llvm

1640614614
Stalevar!~stalevar@user/stalevar
I was not even going to use zig itself, just to try to reproduce a crash in my program reported by another user

1640614670
Stalevar!~stalevar@user/stalevar
And guess, will I feel a desire to learn and promote zig language if I can't build it with my llvm and it was an intentional misfeature?

1640614715
bw!sid2730@user/betawaffle
Dko1905: you probably want to use the functions in `std.os` not `std.os.linux`

1640614728
ikskuh!~xq@v43666.php-friends.de
Stalevar: And exactly of reason 3, you cannot build without all targets enabled. Because you are not the end-user, but a zig maintainer in that moment

1640614740
Stalevar!~stalevar@user/stalevar
Not really

1640614745
Stalevar!~stalevar@user/stalevar
I only build it to use it

1640614767
Stalevar!~stalevar@user/stalevar
My distribution does not provide any binaries for zig, only for clang and gcc

1640614771
ikskuh!~xq@v43666.php-friends.de
so you would be a crippled end user in the end

1640614782
ikskuh!~xq@v43666.php-friends.de
becaues you built it in an unsupported way

1640614796
Dko1905!~Dko1905@37.120.213.164
bw: std.os sadly misses A LOT of functions, like getuid, geteuid, getgid, getegid, getgroups and so on?

1640614806
Dko1905!~Dko1905@37.120.213.164
s/\?//

1640614813
Stalevar!~stalevar@user/stalevar
I didn't build it. The build failed without technical reason, which I find rather annoying

1640614823
bw!sid2730@user/betawaffle
Dko1905: maybe you want `std.c`?

1640614827
ikskuh!~xq@v43666.php-friends.de
it fails with the reason that it couldn't build zig

1640614834
ikskuh!~xq@v43666.php-friends.de
but it would require changing to build a fork of zig

1640614847
Franciman!~Franciman@mx1.fracta.dev
hi, apparently nobody answered. So i will try to build clang and llvm with debug symbols

1640614847
Stalevar!~stalevar@user/stalevar
That's because zig has a misfeature

1640614854
ikskuh!~xq@v43666.php-friends.de
which is "being the same on all platforms"?

1640614860
Franciman!~Franciman@mx1.fracta.dev
I will let you know

1640614875
ikskuh!~xq@v43666.php-friends.de
that's one of the things that are very important for the mission goal of maintainability

1640614884
ikskuh!~xq@v43666.php-friends.de
if you cannot rely on zig being the same on all platforms and builds

1640614888
ikskuh!~xq@v43666.php-friends.de
you cannot rely on it at all

1640614908
Dko1905!~Dko1905@37.120.213.164
bw: The only reference to getuid is in std.os.linux, I'm forced to create wrappers around the libc.

1640614913
Stalevar!~stalevar@user/stalevar
ikskuh, I don't see any reason why I must waste my CPU time on building support for platforms I have never heard about

1640614949
ikskuh!~xq@v43666.php-friends.de
because you're getting either "everything" or "nothing"

1640614966
ikskuh!~xq@v43666.php-friends.de
which is to reduce friction for everyone

1640614980
Stalevar!~stalevar@user/stalevar
It did not reduce friction for me, so it has failed

1640614983
ikskuh!~xq@v43666.php-friends.de
if you could select targets enabled you might have problems in the future

1640614995
ikskuh!~xq@v43666.php-friends.de
so you wanna build a zig project

1640614997
Stalevar!~stalevar@user/stalevar
Which problems?

1640614997
ikskuh!~xq@v43666.php-friends.de
but it fails

1640615002
ikskuh!~xq@v43666.php-friends.de
because you have disabled targets

1640615007
ikskuh!~xq@v43666.php-friends.de
do you remember this then?

1640615007
semarie!~semarie@user/semarie
Dko1905: you could just declare the function and use it: pub extern "c" fn getuid() uid_t;

1640615014
bw!sid2730@user/betawaffle
Dko1905: hmm, i guess nobody has implemented it for freebsd yet

1640615015
ikskuh!~xq@v43666.php-friends.de
or will you make an issue on the zig repo?

1640615023
bw!sid2730@user/betawaffle
you can link it yourself, as semarie says

1640615053
Stalevar!~stalevar@user/stalevar
ikskuh, I wanted to make an issue in zig repo already

1640615065
Dko1905!~Dko1905@37.120.213.164
semarie: That's better, I didn't know you could do that.

1640615067
Stalevar!~stalevar@user/stalevar
If it didn't have a channel in an IRC net which I was already in, I'd do it

1640615088
ikskuh!~xq@v43666.php-friends.de
for what? "zig couldn't build for aarch64?"

1640615091
ikskuh!~xq@v43666.php-friends.de
(which is my point)

1640615098
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: wouldn't a prebuilt binary from the same place where you got the tarball work for you?

1640615153
bw!sid2730@user/betawaffle
Stalevar: are you trying to build a zig project, or use `zig cc`?

1640615168
ikskuh!~xq@v43666.php-friends.de
bw: afaik they try to build zig

1640615181
ikskuh!~xq@v43666.php-friends.de
but their system LLVM isn't a fully featured LLVM

1640615184
bw!sid2730@user/betawaffle
they are trying to build zig so they can build something else

1640615187
ikskuh!~xq@v43666.php-friends.de
but a crippled one with targets disabled

1640615188
Stalevar!~stalevar@user/stalevar
bw, zig cc

1640615206
Stalevar!~stalevar@user/stalevar
another person told me that my program crashes immediately when built with zig cc but works with gcc

1640615208
bw!sid2730@user/betawaffle
and what are you trying to build with zig cc

1640615208
semarie!~semarie@user/semarie
Stalevar: for me, there is nothing wrong to want a "reduced" zig with only x86 support. but it seems wrong to ask that upstream (zig developers) support it.

1640615246
Dko1905!~Dko1905@37.120.213.164
Is this a good wrapper around getgroups? https://hastebin.skyra.pw/dedafohevu.cs

1640615257
Stalevar!~stalevar@user/stalevar
semarie, I'm pretty sure that zig should just silently build for all targets which system llvm supports. 

1640615272
bw!sid2730@user/betawaffle
Stalevar: zig has a pre-built freebsd binary

1640615275
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: It's up to andrewrk to decide

1640615341
bw!sid2730@user/betawaffle
Dko1905: there are a couple of issues, but it's not terrible

1640615379
Stalevar!~stalevar@user/stalevar
andrewrk, also your decision to disable support for incomplete llvm is mostly going to hit users than maintainers because maintainers in general can probably manipulate cmake config files expertly while I have no idea what to change to make it build anyway

1640615388
bw!sid2730@user/betawaffle
Stalevar: it's more work to support a reduced build

1640615414
bw!sid2730@user/betawaffle
we'd need feature flags to disable functionality for all the targets you don't want support for

1640615448
ikskuh!~xq@v43666.php-friends.de
Stalevar: you are assuming that users are going to build zig theirselves

1640615458
Stalevar!~stalevar@user/stalevar
I doubt that. How does zig know which default targets llvm has? And what if upstream llvm added more target or removed a target with next release, would it break zig build? It would benefit zig to be more flexible about choice of targets

1640615479
Stalevar!~stalevar@user/stalevar
ikskuh, yes, because I am an and user and I am going to build it myself

1640615489
ikskuh!~xq@v43666.php-friends.de
so you are both user and maintainer ;)

1640615494
ikskuh!~xq@v43666.php-friends.de
that's why zig is in lockstep with llvm releases

1640615499
bw!sid2730@user/betawaffle
Stalevar: it doesn't care about "default targets", it just has all the targets it supports. some of them have to be explicitly enabled in the llvm build

1640615519
Stalevar!~stalevar@user/stalevar
And I have no idea which they are

1640615532
ikskuh!~xq@v43666.php-friends.de
so look up what LLVM has enabled by default

1640615538
Stalevar!~stalevar@user/stalevar
  LLVM (according to /usr/bin/llvm-config) is missing target AArch64.  Zig

1640615538
Stalevar!~stalevar@user/stalevar
  requires LLVM to be built with all default targets enabled.

1640615540
semarie!~semarie@user/semarie
zig project already supports zig-bootstrap (https://github.com/ziglang/zig-bootstrap) to permit build zig out-of-box with correctly configured llvm

1640615543
bw!sid2730@user/betawaffle
Stalevar: why don't you just use the pre-built zig binary for freebsd?

1640615544
ikskuh!~xq@v43666.php-friends.de
because it looks like youre having a non-default LLVM

1640615564
Stalevar!~stalevar@user/stalevar
bw, because it's for freebsd?

1640615598
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: which target are you on, then?

1640615625
bw!sid2730@user/betawaffle
Stalevar: oh, sorry i mixed up two convos

1640615731
Stalevar!~stalevar@user/stalevar
dottedmag, slackware64 

1640615739
bw!sid2730@user/betawaffle
that's just linux...

1640615742
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: Why don't you use prebuilt binary for linux-amd64?

1640615834
Stalevar!~stalevar@user/stalevar
because I don't feel like running binaries which aren't coming from myself or my distro maintainers, it's a basic rule of information security to only run binaries you built yourself except the basic operating system ones

1640615860
bw!sid2730@user/betawaffle
Stalevar: if you want to build zig yourself, you have to build all of it

1640615877
bw!sid2730@user/betawaffle
zig doesn't work with arbitrary LLVM

1640615880
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: Then stop calling yourself "user".

1640615916
Stalevar!~stalevar@user/stalevar
Why? Building software from source is a usual user thing on distros like Gentoo for example

1640615936
Stalevar!~stalevar@user/stalevar
Slackware is less strict in this matters, because it has prebuilt system

1640615937
bw!sid2730@user/betawaffle
Stalevar: you can build it from source, but you have to build it with zig's supported LLVM

1640615960
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: Because that's not the meaning of the word "user" for Zig. It does not make any difference who is called "user" in the other contexts.

1640615963
Stalevar!~stalevar@user/stalevar
Or I can just abandon it, or I can patch CmakeLists.txt 

1640615971
bw!sid2730@user/betawaffle
making zig super easy to build is not a goal, iiuc

1640615979
earnestly!~earnest@user/earnestly
It ought to be

1640616005
Stalevar!~stalevar@user/stalevar
bw, but making zig hard to build seems to be a goal if this was intentionally introduced

1640616008
earnestly!~earnest@user/earnestly
(Hm, tricky.  By easy I assume you mean simple.  Easy might not be the best goal)

1640616018
ikskuh!~xq@v43666.php-friends.de
Stalevar: "making a non-standard build of zig hard" was the goal

1640616023
ikskuh!~xq@v43666.php-friends.de
and you're trying to do that

1640616032
ikskuh!~xq@v43666.php-friends.de
so you're adding/removing features from zig

1640616040
Stalevar!~stalevar@user/stalevar
This is a misfeature and it comes strongly against free software spirit

1640616041
ikskuh!~xq@v43666.php-friends.de
which means you are a maintainer/distributor of zig

1640616067
Stalevar!~stalevar@user/stalevar
No it doesn't

1640616071
ikskuh!~xq@v43666.php-friends.de
it does

1640616075
ikskuh!~xq@v43666.php-friends.de
as you're changing things

1640616084
Stalevar!~stalevar@user/stalevar
Adding/removing features is also in user realm for free software

1640616091
ikskuh!~xq@v43666.php-friends.de
if you are using software, you aren't changing it

1640616097
ikskuh!~xq@v43666.php-friends.de
i disagree

1640616107
Stalevar!~stalevar@user/stalevar
Free software is called like that for a reason, as in the user should be free to modify it to suit their needs better

1640616114
ikskuh!~xq@v43666.php-friends.de
yes

1640616121
ikskuh!~xq@v43666.php-friends.de
but then you also will be a maintainer

1640616121
bw!sid2730@user/betawaffle
Stalevar: take any open source project and remove one of it's source files, see how well it builds

1640616148
ikskuh!~xq@v43666.php-friends.de
if you don't use the source verbatim, you will be a maintainer/developer of that piece of software

1640616154
ikskuh!~xq@v43666.php-friends.de
and not just a pure user

1640616176
Stalevar!~stalevar@user/stalevar
bw, llvm allows to list targets in command line during compilation so you don't have to build obscure targets you'd never use and won't waste your disk space

1640616189
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: You are free to modify it, but you are not entitled to technical support from the authors, and you are not entitled to having your desires being incorporated back.

1640616198
bw!sid2730@user/betawaffle
Stalevar: yes, they put in the work to make targets optional

1640616201
bw!sid2730@user/betawaffle
zig has not

1640616224
Stalevar!~stalevar@user/stalevar
If I am going to distribute my fork then yes, but in this case I'm going to do it on my local machine only, which means that I am an end user, because I'm not going to distribute my modifications

1640616251
ikskuh!~xq@v43666.php-friends.de
yes, it means you're a maintainer

1640616257
ikskuh!~xq@v43666.php-friends.de
you maintain that fork for a single person

1640616258
ikskuh!~xq@v43666.php-friends.de
which is you

1640616273
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: If you insist on using the words in a meaning different from the meaning in the project, you should not be suprised that nobody understands it.

1640616283
bw!sid2730@user/betawaffle
Stalevar: you're just upset zig doesn't let you disable targets

1640616290
Nulo!~Nulo@user/nulo
What even is the conflict here? 

1640616293
bw!sid2730@user/betawaffle
but that takes work to implement

1640616295
Nulo!~Nulo@user/nulo
Sthap the flamewar pls

1640616303
ikskuh!~xq@v43666.php-friends.de
Nulo: definition of "maintainer" and zigs strict defaults

1640616309
ikskuh!~xq@v43666.php-friends.de
🔥🔥🔥

1640616343
earnestly!~earnest@user/earnestly
Seems reasonable to ask for technical help, but technical help can also just say they don't know the answer instead of all ~this~

1640616426
Nulo!~Nulo@user/nulo
This is weird to me, Zig is built with system LLVM on distros usually so it should just work

1640616436
earnestly!~earnest@user/earnestly
It is?

1640616449
dottedmag!~dottedmag@tea.dottedmag.net
Nulo:   <Stalevar> because I don't feel like running binaries which aren't coming from myself or my distro maintainers <...>

1640616459
earnestly!~earnest@user/earnestly
Huh, arch builds it with upstream llvm.  That's nice

1640616470
bw!sid2730@user/betawaffle
Nulo: most distros have a version of llvm with all default targets

1640616471
Stalevar!~stalevar@user/stalevar
Nulo, I wanted to build zig to use zig cc to compile my program and see why it crashes under zig but not under gcc and clang. But when I tried to actually install zig, I got this error message:  CMake Error at cmake/Findllvm.cmake:110 (message): LLVM (according to /usr/bin/llvm-config) is missing target AArch64.  Zig requires LLVM to be built with all default targets enabled.

1640616494
earnestly!~earnest@user/earnestly
Hm, the zig build for arch looks perfectly simple and nice

1640616499
earnestly!~earnest@user/earnestly
daurnimator: Nice one

1640616521
Nulo!~Nulo@user/nulo
Calling it "against the free software spirit" is really something else, specially when Zig is _not_ free software (not libre; MIT https://github.com/ziglang/zig/blob/master/LICENSE)

1640616523
bw!sid2730@user/betawaffle
earnestly: it's also simple on nixos

1640616539
Nulo!~Nulo@user/nulo
Stalevar: then.. use an LLVM with all targets enabled. What is the problem?

1640616549
bw!sid2730@user/betawaffle
some might say it's not that complicated to build...

1640616560
Nulo!~Nulo@user/nulo
Alpine also uses system LLVM https://gitlab.alpinelinux.org/alpine/aports/-/blob/master/testing/zig/APKBUILD , you _do not_ need to build LLVM with Zig to get it working

1640616561
earnestly!~earnest@user/earnestly
I don't include nixos (or anything like it) when it comes to this particular problem of integration, as those systems sidestep the issue completely

1640616562
Franciman!~Franciman@mx1.fracta.dev
bw: is it easy to get a debug build on nix?

1640616575
Stalevar!~stalevar@user/stalevar
Nulo, I don't want to waste my CPU and disk space and more importantly my time on something I am never going to use

1640616578
Franciman!~Franciman@mx1.fracta.dev
with debug symbols

1640616579
bw!sid2730@user/betawaffle
Franciman: not sure, haven't tried

1640616589
Franciman!~Franciman@mx1.fracta.dev
sure np

1640616605
bw!sid2730@user/betawaffle
but probably, assuming nixos fixed the issue with debug symbols in general

1640616611
Nulo!~Nulo@user/nulo
Stalevar: then patch it out or open an issue instead of complaining in an ephemeral IRC room. Read the topic of the room: "be excellent to each other"

1640616615
bw!sid2730@user/betawaffle
i worked around a problem with debug symbols in rust

1640616663
bw!sid2730@user/betawaffle
Stalevar: this is like asking "hey, i want to build zig with GCC instead of LLVM"

1640616674
Stalevar!~stalevar@user/stalevar
Nulo, it makes sense, but andrewrk said it was intentional (mis)feature, which means that opening bug report will be useless, it will be closed as "won'tfix" most likely

1640616676
bw!sid2730@user/betawaffle
we don't support your custom version of LLVM

1640616682
Nulo!~Nulo@user/nulo
FWIW I don't think that they made it that way to make it harder to build, but I might be wrong. Zig is _supposed_ to be easy to bootstrap

1640616714
Nulo!~Nulo@user/nulo
Stalevar: I can't seem to find where andrew said that

1640616727
Franciman!~Franciman@mx1.fracta.dev
it's above in the logs

1640616732
Stalevar!~stalevar@user/stalevar
 <andrewrk> the reason Zig has those checks in the build script is to increase friction for people to distribute handicapped zig binaries that do not support the full set of targets

1640616746
Stalevar!~stalevar@user/stalevar
Nulo, see? Sounds like intentional misfeature

1640616756
Stalevar!~stalevar@user/stalevar
If it was a bug, I'd understand

1640616764
Nulo!~Nulo@user/nulo
Ah, yeah that's kind of trashy, it should be possible to patch it out then

1640616784
bw!sid2730@user/betawaffle
Nulo: you can patch anything out, but it takes work

1640616839
dottedmag!~dottedmag@tea.dottedmag.net
bw: Using Slackware involves work making anything work anyway...

1640616856
bw!sid2730@user/betawaffle
sure, but Stalevar isn't willing to do the work

1640616879
Nulo!~Nulo@user/nulo
This doesn't seem that complicated to patch https://github.com/ziglang/zig-bootstrap/blob/4cced909c6506a6eb96e55ba5c31f883fe8208a1/zig/cmake/Findllvm.cmake#L107

1640616892
Nulo!~Nulo@user/nulo
Just remove   NEED_TARGET("AArch64")

1640616920
bw!sid2730@user/betawaffle
it may break, but maybe it won't

1640616965
bw!sid2730@user/betawaffle
what is `Hexagon`?

1640617010
bw!sid2730@user/betawaffle
how do i even google for that..

1640617037
bw!sid2730@user/betawaffle
it's a qualcomm chip, i guess

1640617037
freshcoffee!~fresh@user/freshcoffee
google for `llvm hexagon`

1640617041
Stalevar!~stalevar@user/stalevar
Nulo, thanks 

1640617073
Stalevar!~stalevar@user/stalevar
But I think that zig should make it into upstream

1640617106
bw!sid2730@user/betawaffle
zig disagrees

1640617171
Nulo!~Nulo@user/nulo
Maybe with a flag like I_WONT_DISTRIBUTE_THIS_BINARY_TO_OTHERS (unironically)

1640617192
Nulo!~Nulo@user/nulo
I believe it's made to not give a bad impression of Zig to folks

1640617212
earnestly!~earnest@user/earnestly
Nulo: No, you're not going to fix this with technical solutions

1640617219
bw!sid2730@user/betawaffle
that check has been in place for at least 2 years, according to git

1640617246
Nulo!~Nulo@user/nulo
I would argue I_WONT_DISTRIBUTE_THIS_BINARY_TO_OTHERS is more of a social solution but :shrug:

1640617267
earnestly!~earnest@user/earnestly
Nulo: It's a technical solution to a social problem

1640617275
Nulo!~Nulo@user/nulo
True

1640617286
bw!sid2730@user/betawaffle
the social solution is to say "don't"

1640617289
dottedmag!~dottedmag@tea.dottedmag.net
There are precedents: tainted flag in Linux for example

1640617331
bw!sid2730@user/betawaffle
dottedmag: that solves a technical problem of filtering bug reports

1640617333
earnestly!~earnest@user/earnestly
bw: Consider the construction: "I want to purposefully punish people for doing something different to my ideals because it might reflect badly on me"

1640617357
bw!sid2730@user/betawaffle
punish is rather strong here

1640617358
earnestly!~earnest@user/earnestly
dottedmag: tainting doesn't prevent usage

1640617394
earnestly!~earnest@user/earnestly
bw: The consequence is punishment

1640617404
bw!sid2730@user/betawaffle
making a flag would still require making sure the build works with the default targets missing

1640617433
earnestly!~earnest@user/earnestly
bw: Why not just emit an error explaining that the target isn't available due to the build of llvm?

1640617438
bw!sid2730@user/betawaffle
zig may depend on them, without checking "does this target exist in llvm"

1640617447
earnestly!~earnest@user/earnestly
(Wouldn't this be a condition that is normally checked?)

1640617463
bw!sid2730@user/betawaffle
not if you always build llvm to have those targets...

1640617490
bw!sid2730@user/betawaffle
checking things has an overhead

1640617502
bw!sid2730@user/betawaffle
it may be small, but it's non-zero

1640617512
earnestly!~earnest@user/earnestly
Overhead is in a tight loop, not during initialisation for building software

1640617557
bw!sid2730@user/betawaffle
earnestly: llvm could build all the targets and just disable them at runtime, but they don't, because why should they

1640617577
Stalevar!~stalevar@user/stalevar
bw, social solution is to fix zig to build with llvm targets which are present in system llvm, maybe with a warning

1640617597
bw!sid2730@user/betawaffle
"system llvm" could easily be missing critical features

1640617597
earnestly!~earnest@user/earnestly
bw: The answer that the old hats would tell you is that they're not smart enough to know all solutions and that people smarter than them might have a good reason

1640617608
dottedmag!~dottedmag@tea.dottedmag.net
... with the final result calling itself anything but "Zig". Say "CrippledZig".

1640617654
earnestly!~earnest@user/earnestly
bw: The other irony is that it doesn't need to check, the resulting failure would make it quite obvious :P

1640617663
Stalevar!~stalevar@user/stalevar
bw, then zig should just work with features it has

1640617688
bw!sid2730@user/betawaffle
Stalevar: come back when you maintain a software project with that flexibility

1640617729
bw!sid2730@user/betawaffle
Stalevar: you're trivializing the effort involved in supporting "whatever LLVM features the person building wants"

1640617732
earnestly!~earnest@user/earnestly
Stalevar: For now just edit the cmake, it's quite easy

1640617739
Stalevar!~stalevar@user/stalevar
also zig is terrible in a different way

1640617751
earnestly!~earnest@user/earnestly
llvm isn't a nice library to use, they break quite often and keeping up is difficult

1640617754
Stalevar!~stalevar@user/stalevar
Now that I have made it build it is eating all my RAM and then some

1640617755
Franciman!~Franciman@mx1.fracta.dev
Stalevar: every language is terrible in its way

1640617776
ikskuh!~xq@v43666.php-friends.de
Stalevar: the memory is just a temporary artifact

1640617776
Stalevar!~stalevar@user/stalevar
               total        used        free	  shared  buff/cache   available

1640617777
Stalevar!~stalevar@user/stalevar
Mem:         8080028     7714608      127336	    3980      238084	  111988

1640617777
Stalevar!~stalevar@user/stalevar
Swap:        9437180     4724516     4712664

1640617779
earnestly!~earnest@user/earnestly
(I'm always surprised to see stuff using system llvm)

1640617781
ikskuh!~xq@v43666.php-friends.de
of using a non-finished compiler

1640617783
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: If you insist someone will do the work for you, you ought to pay them. Shaming works too sometimes, but the end result is that shamed people burn out and leave.

1640617801
Franciman!~Franciman@mx1.fracta.dev
Stalevar: i suggest you try my programing language

1640617803
ikskuh!~xq@v43666.php-friends.de
yes, building zig requires a shitload of memory right now

1640617814
Franciman!~Franciman@mx1.fracta.dev
it's made for people to hack on it

1640617816
Franciman!~Franciman@mx1.fracta.dev
can you do it?

1640617819
Franciman!~Franciman@mx1.fracta.dev
if so, it's perfect

1640617823
Franciman!~Franciman@mx1.fracta.dev
you can render it however you want

1640617838
Stalevar!~stalevar@user/stalevar
ikskuh, but even 8g is a lot. most computers have 4G of memory at this time

1640617839
ikskuh!~xq@v43666.php-friends.de
that is known and won't change as long as stage-0 is used to build the zig compiler

1640617852
ikskuh!~xq@v43666.php-friends.de
so? it's nothing permanent

1640617857
Franciman!~Franciman@mx1.fracta.dev
Stalevar: do you have your programming language?

1640617860
earnestly!~earnest@user/earnestly
Stalevar: rust is like this, and then there's android's build system too.  It's pretty wildf

1640617868
ikskuh!~xq@v43666.php-friends.de
and changing it is too costly and won't help anyone at all

1640617871
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: "Most computers" don't need to compile Zig compiler.

1640617876
earnestly!~earnest@user/earnestly
I think linkers like mold are supposed to help in this case

1640617898
Stalevar!~stalevar@user/stalevar
dottedmag, most people need a C compiler and zig boasts to be a good C compiler

1640617899
Nulo!~Nulo@user/nulo
For anyone looking for it, this is the commit: https://github.com/ziglang/zig/commit/f8ba50f5ed2f0d3ee3b0042d2f4057c50e68f63b

1640617915
Franciman!~Franciman@mx1.fracta.dev
Stalevar: most people need a flexible language that can suit their needs

1640617919
Franciman!~Franciman@mx1.fracta.dev
with the cost of modifying it

1640617924
Franciman!~Franciman@mx1.fracta.dev
that's what y'all don't get

1640617930
Franciman!~Franciman@mx1.fracta.dev
you want everything to be perfect with 0 effort

1640617932
bw!sid2730@user/betawaffle
am i correct the reason it uses so much memory is that the c++ compiler (stage1) just doesn't try to manage memory well?

1640617932
Franciman!~Franciman@mx1.fracta.dev
which is ludicrous

1640617942
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: Well, pay the maintainers to prioritize your wishes.

1640617945
Franciman!~Franciman@mx1.fracta.dev
nothing is perfect for all usages

1640617948
ikskuh!~xq@v43666.php-friends.de
Stalevar: a lot of people just don't build zig from source, as it's not necessary

1640617949
dottedmag!~dottedmag@tea.dottedmag.net
If they accept your money, of course.

1640617951
luuk!~luuk@user/luuk
bw, it's memory strategy is to not handle it at all :)

1640617954
Franciman!~Franciman@mx1.fracta.dev
if you want them to, you need to invest money or time

1640617958
luuk!~luuk@user/luuk
s/it's/its

1640617960
bw!sid2730@user/betawaffle
luuk: yeah, sounds right

1640617971
bw!sid2730@user/betawaffle
luuk: i would do the same if i had to use c++

1640617979
bw!sid2730@user/betawaffle
"get me out of here"

1640618000
ikskuh!~xq@v43666.php-friends.de
dottedmag: zig doesn't do the "pay for features" dance

1640618012
dottedmag!~dottedmag@tea.dottedmag.net
ikskuh: Which is why the reservation ;-)

1640618024
Franciman!~Franciman@mx1.fracta.dev
ikskuh: i think it supports a totally distributed community tho, right?

1640618025
earnestly!~earnest@user/earnestly
bw: The old hats said the same thing about C compilers, it didn't bother freeing memory because it was a one-shot tool

1640618028
Franciman!~Franciman@mx1.fracta.dev
which I 100 support

1640618029
Franciman!~Franciman@mx1.fracta.dev
100%*

1640618042
ikskuh!~xq@v43666.php-friends.de
Franciman: correct

1640618048
earnestly!~earnest@user/earnestly
I think BWK made this comment somewhere

1640618049
Stalevar!~stalevar@user/stalevar
[ 99%] Building self-hosted component zig/zig-0.10.0-dev.62+5b171f446/build/zig1.o

1640618053
Nulo!~Nulo@user/nulo
I think this is what it means by "

1640618053
Nulo!~Nulo@user/nulo
    (anyone else want to help?)

1640618058
bw!sid2730@user/betawaffle
earnestly: sure, it's a valid strategy. tradeoffs are everywhere

1640618059
Nulo!~Nulo@user/nulo
" in https://github.com/ziglang/zig/wiki/Community

1640618059
Franciman!~Franciman@mx1.fracta.dev
Stalevar: why are you ignoring my questions?

1640618065
Stalevar!~stalevar@user/stalevar
Which?

1640618069
Franciman!~Franciman@mx1.fracta.dev
all

1640618082
luuk!~luuk@user/luuk
Franciman, drop it please. It doesn't add anything to the topic: Zig

1640618083
Stalevar!~stalevar@user/stalevar
You suggest me to pay for zig developers to remove 5 lines of code they introduced?

1640618093
Franciman!~Franciman@mx1.fracta.dev
Stalevar: no, i suggest you to get involved

1640618096
Franciman!~Franciman@mx1.fracta.dev
and do changes

1640618099
bw!sid2730@user/betawaffle
Nulo: i offered to help with irc

1640618108
bw!sid2730@user/betawaffle
he hasn't gotten back to me yet

1640618115
earnestly!~earnest@user/earnestly
bw: But it's funny because of the scale.  Back then it was reasonable, but now it's starting to chafe (zig isn't even the worst here)

1640618124
Stalevar!~stalevar@user/stalevar
Why should I get involved if I only needed zig to use it once to build a single binary?

1640618133
Franciman!~Franciman@mx1.fracta.dev
because that's how things work

1640618133
earnestly!~earnest@user/earnestly
C++ and rust are brutal on some codebases, I ended up getting a workstation just for builds

1640618140
bw!sid2730@user/betawaffle
earnestly: software grows to fill the resources available

1640618145
earnestly!~earnest@user/earnestly
bw: Jevon's paradox

1640618145
Franciman!~Franciman@mx1.fracta.dev
you can't just pretend you have a language to work in all use cases you need

1640618148
Franciman!~Franciman@mx1.fracta.dev
you must get involved

1640618153
Franciman!~Franciman@mx1.fracta.dev
or make people get involved

1640618173
Stalevar!~stalevar@user/stalevar
zig-0.10.0-dev.62+5b171f446/src/codegen/llvm.zig:4333: undefined reference to `LLVMInitializeAArch64Target

1640618182
bw!sid2730@user/betawaffle
surprise surprise

1640618195
dottedmag!~dottedmag@tea.dottedmag.net
Stalevar: If you needed zig to use it once you'd use the available prebuilt binary. Don't tell me you have reviewed the whole source code for the absence of backdoors.

1640618195
Stalevar!~stalevar@user/stalevar
Nulo, it seems that removing those lines wasn't enough

1640618198
earnestly!~earnest@user/earnestly
bw: See, the error is nice and clear :D

1640618207
bw!sid2730@user/betawaffle
:D

1640618212
earnestly!~earnest@user/earnestly
Now that

1640618214
earnestly!~earnest@user/earnestly
I don't mind

1640618230
Nulo!~Nulo@user/nulo
I guess, patch this out too: https://github.com/ziglang/zig/blob/master/src/codegen/llvm.zig#L4450

1640618233
bw!sid2730@user/betawaffle
earnestly: he was trying to give a more helpful error message

1640618245
bw!sid2730@user/betawaffle
i would argue it is more helpful than that one

1640618253
bw!sid2730@user/betawaffle
"undefined symbol" is garbage

1640618273
Nulo!~Nulo@user/nulo
Not the switch branch itself, the calls to init

1640618296
earnestly!~earnest@user/earnestly
bw: Hmhm, I like compiler errors though because they're the only place that knows the truth.  Many pre-condition checks work but when they break it can be 3 hour rabbit holes (thanks autotools)

1640618297
Nulo!~Nulo@user/nulo
It's pretty likely that things will fall apart anyway

1640618321
bw!sid2730@user/betawaffle
earnestly: fair, but we're "maintainers"

1640618332
Nulo!~Nulo@user/nulo
There's 70 results for "LLVM aarch64" in the Zig codebase: https://github.com/ziglang/zig/search?p=2&q=llvm+aarch64

1640618350
bw!sid2730@user/betawaffle
Nulo: github's search also isn't great

1640618351
earnestly!~earnest@user/earnestly
bw: I've always had a problem with "proxy conditionals", and quite helpfully someone recently wrote a whole article that explains this nicely: https://ferd.ca/plato-s-dashboards.html

1640618357
earnestly!~earnest@user/earnestly
bw: (Also, I'm just a user too)

1640618365
earnestly!~earnest@user/earnestly
At least herte

1640618367
earnestly!~earnest@user/earnestly
here*

1640618398
bw!sid2730@user/betawaffle
earnestly: i get where you're coming from, and i don't disagree

1640618431
bw!sid2730@user/betawaffle
in this case, every failure is going to tell you about "one more symbol" that's missing

1640618446
earnestly!~earnest@user/earnestly
As a user I've learned to package software so that it plays to the strengths of package management.  It's through that experience where I've learned to prefer compiler errors over autotool style prechecking

1640618450
bw!sid2730@user/betawaffle
so he'll be in a very long build->fail->build loop

1640618536
bw!sid2730@user/betawaffle
Nulo: lucky that zig has lazy analysis, it may avoid most of those

1640618628
bw!sid2730@user/betawaffle
earnestly: fred writes good articles

1640619626
bw!sid2730@user/betawaffle
hah, this works: https://godbolt.org/z/8661KTGa7

1640621245
bw!sid2730@user/betawaffle
:P and this https://godbolt.org/z/eK34KxoWx

1640621281
bw!sid2730@user/betawaffle
andrewrk: field access for frames when!

1640621302
bw!sid2730@user/betawaffle
"don't do that, you crazy person"

1640624458
ifreund!2940d10f8b@user/ifreund
Stalevar: I’d recommend just using clang with -fsanitize=undefined, you’ll probably reproduce the crash that was reported by the user using zig cc

1640625983
Stalevar!~stalevar@user/stalevar
ifreund, hm... but my program is depending on undefined behavior

1640625999
Stalevar!~stalevar@user/stalevar
How to compile it without -fsanitize-undefined with zig cc?

1640626251
ifreund!2940d10f8b@user/ifreund
-fno-sanitize=undefined

1640626278
ifreund!2940d10f8b@user/ifreund
Stalevar: Why do you have known UB in your program though and not consider it a bug worth fixing?

1640626413
Stalevar!~stalevar@user/stalevar
ifreund, because the whole purpose of the program is to demonstrate certain thing which requires UB

1640626443
ifreund!2940d10f8b@user/ifreund
Stalevar: I'm curious now, do you have a link to said program handy?

1640626991
Franciman!~Franciman@mx1.fracta.dev
Stalevar: what does «depend on UB» mean?

1640627027
Stalevar!~stalevar@user/stalevar
Hm... actually I have been able to make it work with clang -fsanitize=undefined somehow

1640627172
Stalevar!~stalevar@user/stalevar
But it still doesn't work elsewhere

1640629004
bw!sid2730@user/betawaffle
lolwat

1640629035
bw!sid2730@user/betawaffle
“requires undefined behavior” is new

1640629144
Franciman!~Franciman@mx1.fracta.dev
yes

1640629150
Franciman!~Franciman@mx1.fracta.dev
mindbending

1640629724
bw!sid2730@user/betawaffle
He probably means “requires undocumented behavior that is not portable or reliable”

1640629813
motiejus!~motiejus@2001:470:69fc:105::38fb
Brotli is such: it "relies" on it; you can use a compile flag to make it ubsan-safe, albeit decompression is 5% slower

1640629865
motiejus!~motiejus@2001:470:69fc:105::38fb
https://lists.sr.ht/~motiejus/bazel-zig-cc/%3C20211213023816.obgjrpaxt445lzpn%40mtpad.i.jakstys.lt%3E for a specific instance (I am still looking for bazel experts to answer this ;) )

1640629909
motiejus!~motiejus@2001:470:69fc:105::38fb
https://github.com/google/brotli/blob/ce222e317e36aa362e83fc50c7a6226d238e03fd/CMakeLists.txt#L104-L108

1640630009
bw!sid2730@user/betawaffle
That doesn’t make sense…

1640630043
bw!sid2730@user/betawaffle
Doesn’t that just mean they depend on how a particular compiler optimizes their code?

1640630231
bw!sid2730@user/betawaffle
https://github.com/google/brotli/issues/70

1640630268
bw!sid2730@user/betawaffle
motiejus: maybe it’s just because C doesn’t give the author enough control.

1640638938
andrewrk!~andrewrk@mail.ziglang.org
bw, to be clear: making zig super easy to build *is* definitely a goal

1640638963
andrewrk!~andrewrk@mail.ziglang.org
the discussion was about what the definition of "a build of zig" is

1640638990
bw!sid2730@user/betawaffle
Fair

1640639184
andrewrk!~andrewrk@mail.ziglang.org
"Does Zig support cross compiling to AArch64?" -> the answer to this question is simply "Yes."

1640639206
andrewrk!~andrewrk@mail.ziglang.org
if you have something that does not support cross compiling to aarch64, then you have something that is not zig

1640639248
andrewrk!~andrewrk@mail.ziglang.org
in other words, a fork. So buck up and maintain a fork, or compile zig from source (including LLVM). There's a handy zig-bootstrap repository you can use.

1640639347
bw!sid2730@user/betawaffle
the person in question was trying to use zig cc. Does that still count as “zig” in this discussion? Isn’t that just a wrapper around clang with better defaults and pre-packaged headers for cross-comp?

1640639397
andrewrk!~andrewrk@mail.ziglang.org
no, that is not an accurate description

1640639415
andrewrk!~andrewrk@mail.ziglang.org
and yes it still counts as zig

1640643789
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
Hello, I'm trying to write a tcp server in zig, and when I tried a single-threaded build with io_mode = evented, I hit a @compileError(TODO) in event.Loop.sleep, which apparently is used called from linuxWaitFd as a fallback of a fallback

1640643805
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
this one https://github.com/ziglang/zig/blob/master/lib/std/event/loop.zig#L829

1640643854
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
is this expected that evented io won't work at all in single-threaded mode?

1640643924
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
or was that sleep in linuxWaitFD meant to be blocking? https://github.com/ziglang/zig/blob/master/lib/std/event/loop.zig#L538

1640643950
andrewrk!~andrewrk@mail.ziglang.org
Wolf480pl, evented I/O with -fsingle-threaded in the std lib is not implemented yet

1640643962
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
kthx

1640643998
andrewrk!~andrewrk@mail.ziglang.org
Wolf480pl, note that this is different than evented I/O with std.event.Loop.initSingleThreaded() which is single-threaded evented I/O but uses a thread pool for I/O for some cases

1640644010
andrewrk!~andrewrk@mail.ziglang.org
-fsingle-threaded means, really, do not spawn more than one OS thread

1640644049
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
I was trying single-threaded because with multi-threaded evented IO I was seeing my process use 200-300% cpu (always mutliple of full core) after there was no more requests coming

1640644087
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
so I was trying to figure out if this is a race condition or sth, but maybe I'm just using async wrong or sth...

