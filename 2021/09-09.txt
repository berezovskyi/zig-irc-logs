1631150143
noam!~noam@104.232.42.247
This was linked elsewhere, it's an interesting read: http://tuukkapensala.com/files/software_does_not_contain_errors.txt

1631150207
Nulo!~Nulo@user/nulo
Is there a place with logos and similar?

1631150311
noam!~noam@104.232.42.247
> because an error is ill-defined outside of a specific use-case, then also error handling mechanisms are ill-defined outside of a specific use-case. Therefore all error handling mechanisms of programming languages are conceptually not error handling mechanics, but rather mechanics of where the responses to predicted usually unwanted behaviors are syntactically separated from the responses to other

1631150313
noam!~noam@104.232.42.247
behaviors, often implemented in such a manner that the programmer can not reasonably avoid such mechanism when programming in the language.

1631150320
noam!~noam@104.232.42.247
I think it's interesting how that relates to error handling in Zig, in particular...

1631150338
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
http://github.com/ziglang/logo

1631150357
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
Nulo: ^

1631150435
Nulo!~Nulo@user/nulo
Thanks!

1631150752
andrewrk!~andrewrk@mail.ziglang.org
noam, I agree

1631150772
andrewrk!~andrewrk@mail.ziglang.org
I was thinking recently about how zig's error system is effectively a way to model your logic so that it has a "forwards" and "backwards"

1631150806
andrewrk!~andrewrk@mail.ziglang.org
it lets you "rewind" the control flow state to a previous point

1631150816
andrewrk!~andrewrk@mail.ziglang.org
and then find out why the rewind happened

1631150990
noam!~noam@104.232.42.247
Not sure what other terminology really works, though

1631150994
noam!~noam@104.232.42.247
Syntactically, that is

1631151069
noam!~noam@104.232.42.247
i.e. what other term could we use for errors? "Interruptions"? And, what'd we call errdefer, instead?

1631151728
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
inferruption handler?

1631151876
noam!~noam@104.232.42.247
That's also not strictly correct; *and* it conflicts with actual interrupts :P

1631151904
andrewrk!~andrewrk@mail.ziglang.org
maybe I misunderstood your point. I don't think the name "error" should be changed in any way

1631152079
devast8a!~devast8a@2001:470:69fc:105::3f46
noam: "abort" perhaps. If we want to be super abstract about the idea, we want to continue in the forwards direction as long as we possibly can but only when forward progress is no longer possible do we actually need to abort what we're doing and reverse the execution direction to some point where we can make forward progress again.

1631152117
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: regarding https://github.com/ziglang/zig/pull/9681#pullrequestreview-748309595 is there currently a way to resolve an inferred error set in Sema (or somewhere else?)

1631152119
devast8a!~devast8a@2001:470:69fc:105::3f46
Not that I'm in a hurry to change the naming.

1631152174
andrewrk!~andrewrk@mail.ziglang.org
g-w1, hmm I don't think that code is written yet

1631152218
noam!~noam@104.232.42.247
andrewrk: fundamentally, it's that what we call 'errors' aren't, and thinking about them as if they are causes problems

1631152253
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I remember we talked about this in the stage2 meeting. The way stage1 does it is just recursively analyze any functions that do not have resolved inferred error sets yet, but this is suboptimal because it leaves mutually recursive functions not able to be inferred. The best thing I thought of was some sort of call graph analysis. Maybe in astgen?

1631152282
devast8a!~devast8a@2001:470:69fc:105::3f46
Also forward and reverse execution directions don't necessarily need to be literal (though they kind of are in Zig), reversed execution can be steps that are required to bring the state of the program back to a state where we can make useful progress again.

1631152313
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
only 3 things can cause an error set to be expanded. Returning an error. Returning an errorset, or @errorToInt all of which are in astgen. So a call graph might not be that hard to setup in astgen, then analyze in sema.

1631152329
andrewrk!~andrewrk@mail.ziglang.org
devast8a, that's exactly right. as an example one use of an errdefer statement in zig would be to remove something from a hash map that should only be added if the function succeeds

1631152354
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
algorithms are not my specialty, so if you have better ideas, please tell me

1631152424
andrewrk!~andrewrk@mail.ziglang.org
g-w1, stage2 has a Value Tag for error sets that correspond to the inferred error set of a function. There could be another Value Tag for lazily doing the set union of multiple inferred error sets. then there can be a process to resolve them when necessary 

1631152457
devast8a!~devast8a@2001:470:69fc:105::3f46
noam: Yeah, I think soft-errors that signal the caller to provide more information or to retry the operation might be the place to look for concrete examples that have been impacted by thinking about errors as errors.

1631152465
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that also works, I could put off the resolving to another pr, and just create the Value tag for inferred error sets

1631152475
devast8a!~devast8a@2001:470:69fc:105::3f46
thinking about aborting as errors*

1631152494
andrewrk!~andrewrk@mail.ziglang.org
g-w1, sounds good

1631152505
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cool

1631152585
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
why arent the stage2 meetings archived

1631152611
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
discord doesn't have something for that?

1631152617
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
no

1631152828
andrewrk!~andrewrk@mail.ziglang.org
they're intentionally not recorded

1631152888
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
haze: the topics are posted, so if you have a question, the best thing is to probably just ask the person who posted the topic what was discussed in the meeting/what the resolution to their question was.

1631152939
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
that was an unsavory answer

1631152977
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
there is a trove of knowledge that is willingly released that i have zero access to. Where are the topics posted?

1631152991
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/wiki/Self-Hosted-Compiler-Meetings

1631153025
andrewrk!~andrewrk@mail.ziglang.org
it's nice to not be recorded sometimes, people wanted to relax and not be recorded during those meetings *shrug*

1631153029
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
im sure everyone wants to rewrite what they discussed for my sake

1631153071
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
do you see what im getting at here

1631153088
andrewrk!~andrewrk@mail.ziglang.org
no. video recordings of meetings is a super inefficient way to get information. I suggest to interact on github issues about your topic

1631153100
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it's not about finding out information about specific topics

1631153107
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
its about passively soaking in information

1631153129
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the same way i'd tune into whatever stream you did, even if i had no interest in it because there are tiny bits of information that may prove handy to have known about

1631153143
andrewrk!~andrewrk@mail.ziglang.org
please just take "no" for an answer

1631153150
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i guess

1631153160
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
just unfortunate that the barrier for this info is behind discord

1631153166
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
im ip banned

1631153185
andrewrk!~andrewrk@mail.ziglang.org
I agree with that. I'm on the lookout for a different venue to do the meetings

1631153200
freshcoffee!~fresh@user/freshcoffee
is discord known for lots of ip bans?

1631153204
freshcoffee!~fresh@user/freshcoffee
(just curious)

1631153235
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
their TOS is very gray and there's been a number of accounts terminated without reason

1631153247
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
even under personal quarrel with developers

1631153270
andrewrk!~andrewrk@mail.ziglang.org
generally it's nice to depend on open source software with a predictable governance

1631153286
andrewrk!~andrewrk@mail.ziglang.org
it's just a matter of time before Discord goes the way of every other startup

1631153319
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you don't think that's already happened

1631153327
noam!~noam@104.232.42.247
andrewrk: it's just voice, right?

1631153335
noam!~noam@104.232.42.247
Or is video used, also?

1631153336
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and screensharing

1631153344
freshcoffee!~fresh@user/freshcoffee
video is used for showing code, running, debugging etc.

1631153345
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ACTION sees mumble leave noam's mind

1631153351
noam!~noam@104.232.42.247
nope, still in the mind :P

1631153355
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
me too

1631153356
noam!~noam@104.232.42.247
could combine it with a hosted rtmp server

1631153370
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i guess the other benefit is barrier to entry

1631153383
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
people can code but not want to bother setting up 3 other things to share their screen for a quick q

1631153401
freshcoffee!~fresh@user/freshcoffee
google-classroom would work? but noooooooo

1631153425
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i mean jitsi also, just turn off the video

1631153427
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
this is more of a me problem than it is a zig problem so i don't think alternatives would pose any benefit

1631153525
noam!~noam@104.232.42.247
Nah, it's a long-term zig problem, too

1631153542
noam!~noam@104.232.42.247
As andrew said, just a matter of time till the usurper is dead

1631153557
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i have a hunch that it'll take a while for something to surpass discord

1631153562
noam!~noam@104.232.42.247
The pretenders to the name of Discord

1631153586
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
or that discord will deteriorate into something unusable by zsf for a while 

1631153604
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
they only use it sporadically for video and text chat, everything else is pretty much ignored 

1631153686
noam!~noam@104.232.42.247
murmur hosting is trivial, the only issue would be video, but I'm sure there's an rtmp FOSS server somewhere... probably...

1631153802
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
now why do all of that when you can just click 4 buttons and have it working :tm:

1631153820
noam!~noam@104.232.42.247
Huh, rtmp hosting is also probably trivial

1631153894
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
about as trivial as a handstand

1631153971
noam!~noam@104.232.42.247
there's an nginx extension, I can probably get one running in a minute or two if I want to lol

1631154189
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it's not about you it's about everyone else trying to use it

1631154202
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
how are you going to make sure people have an easy way to share their screen/windows with you

1631154209
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
on a bunch of different platforms

1631154278
noam!~noam@104.232.42.247
Write an rtmp client in zig /s

1631154330
noam!~noam@104.232.42.247
*Really* self-host it :P

1631154340
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
is the proper way to zigify c bitfields to use something in std or to use ors

1631154448
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
actually nvm

1631154591
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you can also define getter functions in c as https://zig.news/kristoff/extend-a-c-c-project-with-zig-55di

1631154689
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
isnt it crazy how i asked for that this morning and loris has like a 4 part blog series on it

1631154865
discipulus!~discipulu@user/discipulus
I appreciate that ziglang.org and zig.news have ipv6 enabled. my ipv4 connections are currenlty not doing well.

1631154895
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
haze: 🤯

1631158199
Nulo!~Nulo@user/nulo
re: error naming. I really like the idea of renaming errors to something else. They are really just early returns, or different kinds of returns...

1631158404
Nulo!~Nulo@user/nulo
Assuming a function returns a union enum specifying behaviour, an alternative to errdefer would be some kind of defer if the return type is not a specific one...

1631158479
Nulo!~Nulo@user/nulo
defer if (return_type != .file_contents) file_contents_list.deinit()

1631158636
anb!~anb@user/anb
I'm trying to compile a program which is a wrapper of c lib. It requires specific version of the lib. I'd like to use a self compiled one, which is installed in my home directory, instead of the system one, but zig seems to prefer the system one, even with the "--search-prefix" parameter. Is there a workaround?

1631161430
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
anb how are you trying to use the package? it may be that zig is using the system pkg-config to find it

1631161445
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you could try setting PKG_CONFIG_PATH to point to your own version's pkg-config files

1631161472
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
are string constants interned without null bytes btw?

1631161516
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
they are not

1631161520
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
as opposed to enum tagNames which are

1631161724
discipulus!~discipulu@user/discipulus
so, string constants are interned with null bytes and enum tagNames are interned without null bytes?

1631161748
anb!~anb@user/anb
haze: good point, let me try this way, thank you.

1631161765
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
discipulus seems like it

1631161784
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i just tried to pass `@tagName(..).ptr` into something and it the library did a backflip

1631161795
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but returning a constant string from inside a function worked

1631161877
freshcoffee!~fresh@user/freshcoffee
anb, I'm not aware of zig using pkg-config out of the box. Are you linking with `zig cc` or `zig build-exe` ?

1631161997
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
freshcoffee check build.zig linkSystemLibrary

1631162137
freshcoffee!~fresh@user/freshcoffee
oh wow it's there at least since '2019 . How did I never notice :)

1631162168
anb!~anb@user/anb
fresh coffee: the software has a dependence which wraps the c lib, I'm not sure which way it uses for linking. It has cImport inside though.

1631162191
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
anb is there a repo we can see? if not, check build.zig to see what is going on

1631162207
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
freshcoffee yeah ik its awesome 

1631162501
anb!~anb@user/anb
haze: it's river, and the component I'm talking about is zig-wlroots https://github.com/swaywm/zig-wlroots/tree/9bb6b03f0ea04d4ea6a102ed3e45badba9e8e262

1631162526
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
whats the name of the library you want to override?

1631162532
anb!~anb@user/anb
wlroots

1631162544
freshcoffee!~fresh@user/freshcoffee
.a or .so ?

1631162547
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ok excuse me because there are more than one links in the zig-wlroots build.zig

1631162552
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
    wlr_test.linkSystemLibrary("wlroots");

1631162557
anb!~anb@user/anb
I guess .so?

1631162603
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
anb you could try editing the river build file

1631162662
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
in river's build.zig, replace line 203 with these

1631162663
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
    exe.addLibPath("...")

1631162663
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
    exe.linkSystemLibraryName("wlroots");

1631162673
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
where the lib path is where your custom built wlroots library file is

1631162682
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
that way you still link it and provide the path instead of using pkgconfig

1631162740
anb!~anb@user/anb
I tried to set a absolute path in @cInclude, and add --search-prefix, it worked. So seems it cannot find the right header file, or --search-prefix wasn't hornered

1631162775
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you can keep the cInclude relative and add the include dir in the build.zig as well

1631162882
anb!~anb@user/anb
so that's "exec.addIncludeDir", correct?

1631162960
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ye 

1631162962
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ithink

1631162984
anb!~anb@user/anb
let me try it

1631163266
anb!~anb@user/anb
tried with addIncludeDir and addSystemIncludeDir, none of them work unfortunately :(

1631163311
anb!~anb@user/anb
I remember I read about it somewhere, that zig honor llvm internal sys include path

1631163331
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
what was the error with incloudedir?

1631163393
anb!~anb@user/anb
same, it found the system header file, which doesn't has the correct version

1631163534
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
damn

1631163702
anb!~anb@user/anb
with "addSystemIncludeDir", I can see the same effect as "--search-prefix", that results a "-isystem" parameter in the build-exe command. But in the build-exe command, there's no default syspath, so I suspect that's something builtin, and have higher priority

1631170418
freshcoffee!~fresh@user/freshcoffee
> http://tuukkapensala.com/files/software_does_not_contain_errors.txt

1631170446
freshcoffee!~fresh@user/freshcoffee
> "Useless software is such that it can not be used for any purpose"

1631170492
freshcoffee!~fresh@user/freshcoffee
> "there will always be an error that prevents one from successfully using it."

1631170517
freshcoffee!~fresh@user/freshcoffee
I mean testing a test harness that can detect an error makes that "useless software" useful

1631170586
freshcoffee!~fresh@user/freshcoffee
if the error is sporadic then again, it can be fed into a system collecting stats on how often an error presents

1631170639
freshcoffee!~fresh@user/freshcoffee
I think that paper just folded in on itself

1631174385
discipulus!~discipulu@user/discipulus
Is a "container" a concept or something else?

1631175765
discipulus!~discipulu@user/discipulus
"In the context of the Zig programming language, the term "container" is an abstraction for an item that contains Zig code." Thoughts, comments?

1631176156
ikskuh!~xq@2a0d:5940:6:163::ad7e
huh

1631176160
discipulus!~discipulu@user/discipulus
Zig uses the term "item" in limited context, but I think it can be used and expanded upon a further here.

1631176174
ikskuh!~xq@2a0d:5940:6:163::ad7e
can you explain how that is meant?

1631176264
discipulus!~discipulu@user/discipulus
Yesterday, I was trying to understand the meaning of "top-level". Then I came up with a definition: top-level refers to the direct child of a container. But now I have to define "container".

1631176305
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1631176323
ikskuh!~xq@2a0d:5940:6:163::ad7e
a container is a language construct that can contain declarations

1631176341
ikskuh!~xq@2a0d:5940:6:163::ad7e
*contain top-level declarations

1631176342
ikskuh!~xq@2a0d:5940:6:163::ad7e
:D

1631176393
devast8a!~devast8a@2001:470:69fc:105::3f46
Is there some reason that structure isn't suitable here?

1631176406
discipulus!~discipulu@user/discipulus
I think a structure is a container

1631176431
discipulus!~discipulu@user/discipulus
because, enum, union, opaque are also container, as far as I know. 

1631176663
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1631176672
ikskuh!~xq@2a0d:5940:6:163::ad7e
container = namespace with extras

1631176688
ikskuh!~xq@2a0d:5940:6:163::ad7e
a container is a type that can contain user declarations

1631176879
discipulus!~discipulu@user/discipulus
language construct - that's good. I found a stackoverflow question asking what it means. But, I think we can use it if we expand upon it just a little bit.

1631177532
discipulus!~discipulu@user/discipulus
So, does a container only have "top-level" declarations? 

1631177736
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/ziglang/zig-spec/blob/master/grammar/grammar.y#L4-L10

1631177742
ikskuh!~xq@2a0d:5940:6:163::ad7e
let me answer this question with the grammer :)

1631177751
ikskuh!~xq@2a0d:5940:6:163::ad7e
*grammar

1631177793
discipulus!~discipulu@user/discipulus
I've been looking at already.  :) So, the term "top-level" is useful for what?

1631177811
discipulus!~discipulu@user/discipulus
To indicate it's a direct child of a container?

1631177846
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1631177853
ikskuh!~xq@2a0d:5940:6:163::ad7e
top-level things are order independant

1631177919
discipulus!~discipulu@user/discipulus
that's really good. these pieces are coming together.

1631177968
ikskuh!~xq@2a0d:5940:6:163::ad7e
what do you want to achieve? writing something (in human language)?

1631178061
discipulus!~discipulu@user/discipulus
Yeah, I'm drafting an explainer for the "Zig Test" section. I've have taken a detour to containers. I'm going to try to submit a draft pull-request within a day or two.

1631178100
discipulus!~discipulu@user/discipulus
(of the language reference)

1631178180
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh, very cool :)

1631178199
ikskuh!~xq@2a0d:5940:6:163::ad7e
i want to continue my build.zig series this afternoon

1631178625
discipulus!~discipulu@user/discipulus
thank you for that. I was thinking that ziglang.org should put your comprehensive docs on its site as its own documentation. Also, I think the Build sections lang ref section should be moved up and reference your comprehensive documentation to allow readers to learn more about the tooling side.

1631180314
ikskuh!~xq@2a0d:5940:6:163::ad7e
<3

1631180323
ikskuh!~xq@2a0d:5940:6:163::ad7e
let's finish this thing first

1631195126
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
The zig vim plugin auto save is kinda slow... compared to LSP auto save ()

1631195128
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
(?)

1631197093
marler8997!~marler899@204.229.3.4
zig cc seems to be ignoring this: "-Xclang -target-cpu -Xclang cortex-a75"  ...?

1631197115
marler8997!~marler899@204.229.3.4
is there another way to set the cpu with zig cc?

1631197140
marler8997!~marler899@204.229.3.4
oh wait it's not ignoring it, but I cee other target-cpu's being added

1631197314
marler8997!~marler899@204.229.3.4
I'm confused how the target selection on "zig cc" works.  I can specify "-target aarch64-windows-gnu", but "zig cc -h" doesn't even show "-target" as an option?

1631201128
bgiannan!giann@2a01:4f8:141:1272::2
there's definitely something wrong when declaring nested structs, i either get EXC_BAD_ACCESS errors or the data is just wrong, i have to split all the components and assembles them 

1631201145
bgiannan!giann@2a01:4f8:141:1272::2
nested structs with tagged union in there too

1631202130
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nested anonymous structs?

1631202575
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
I noticed that "$BUILD_DIR/zig build test" doesn't work unless the BUILD_DIR is a subdirectory of the source code (for example if it is a sibling directory of the zig source code).

1631202617
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
This is annoying for keeping a clean tree, which is important for example when building on Nix.

1631202705
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Not only will you get unnecessary builds when something in $BUILD_DIR changes, but also cmake gets confused when the system builds in $out.

1631202800
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Looks like $ZIG_LIB_DIR can be set, but it would be nice if zig test remembered the BUILD_DIR.

1631203875
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Nope, that was a red herring. What works is to run the proper installed zig rather than the parallel $BUILD_DIR.

1631204098
marler8997!~marler899@204.229.3.4
ikskuh looks like they decided on one of your solutions: https://github.com/janet-lang/janet/commit/468a31f51531daba265b66b460c6dea51cd74c92

1631204155
marler8997!~marler899@204.229.3.4
"or just make a more complicated if"

1631204194
marler8997!~marler899@204.229.3.4
I liked the original code cause I thought it was clever :)  I like the idea of casting the pointer to size_t, oh well

1631204300
ismael!~ismaell@sourcemage/ismael
hi; anyone can lend a hand in bootstrapping zig?

1631204308
ismael!~ismaell@sourcemage/ismael
here's the issue: https://dpaste.com/5MWVT7Z8H

1631204434
marler8997!~marler899@204.229.3.4
that reminds me alot of an issue I hit recently and pushed a fix for: https://github.com/ziglang/zig-bootstrap/commit/a2257bf717fd96796d2ec3747b2a0837dca4c9b6

1631204624
marler8997!~marler899@204.229.3.4
your on latest master right?

1631204730
ismael!~ismaell@sourcemage/ismael
marler8997: indeed, I think it's the same issue

1631204754
ismael!~ismaell@sourcemage/ismael
I'm not on the master branch, I'm building 0.8.1

1631204807
ismael!~ismaell@sourcemage/ismael
I'm packaging zig, so I'll try backporting that

1631204888
marler8997!~marler899@204.229.3.4
gotcha, yeah i expect cherry-picking that commit should fix the issue

1631205091
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Hi again :) if I'm cross-compiling the zig toolchain using GCC, do I need clang/llvm/lld built for the host as well?

1631205403
marler8997!~marler899@204.229.3.4
yes

1631205422
marler8997!~marler899@204.229.3.4
https://github.com/ziglang/zig/wiki/Building-Zig-From-Source

1631205494
marler8997!~marler899@204.229.3.4
You probably want "Option A" and you can build clang/llvm/lld from source if your system doesn't have prebuilt binaries: https://github.com/ziglang/zig/wiki/How-to-build-LLVM,-libclang,-and-liblld-from-source#posix

1631205534
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
So I need them all built for host *and* target?

1631205746
marler8997!~marler899@204.229.3.4
just for host, not for target

1631205845
marler8997!~marler899@204.229.3.4
oh wait you're cross compiling the toolchain itself, not creating a toolchain and then cross compiling?

1631205845
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
The final zig is linked to LLVM libraries, though, so doesn't it need target versions of those?

1631205850
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Yes, that's correct.

1631205872
marler8997!~marler899@204.229.3.4
then yeah, you're gonna need target as well

1631205912
marler8997!~marler899@204.229.3.4
you may not need host then...not sure would have to think

1631206059
ismael!~ismaell@sourcemage/ismael
Q: I'm guessing any architecture support requires a backend to configure llvm at least, right? if so, Findllvm.cmake shouldn't be asking for lanai/xcore, right?

1631206193
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if anyone has some free time, care to test my library? https://github.com/haze/zig-libressl

1631206200
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
just a zig build test should sufffice

1631206269
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig build returns successfully

1631206282
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
did libressl build?

1631206296
ikskuh!~xq@2a0d:5940:6:163::ad7e
no

1631206303
ikskuh!~xq@2a0d:5940:6:163::ad7e
you didn't specify a install step, only a test one :D

1631206313
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
zig build test builds libressl for me

1631206315
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
o-o

1631206334
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you did get the submodule right

1631206346
ikskuh!~xq@2a0d:5940:6:163::ad7e
nope :D

1631206356
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yeah that may be wy

1631206382
ikskuh!~xq@2a0d:5940:6:163::ad7e
Unable to spawn ./configure: FileNotFound

1631206388
ikskuh!~xq@2a0d:5940:6:163::ad7e
that file does not exist

1631206393
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yeah it has to configure

1631206401
ikskuh!~xq@2a0d:5940:6:163::ad7e
no

1631206405
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
no i mean

1631206405
ikskuh!~xq@2a0d:5940:6:163::ad7e
it has to automake, probably?

1631206409
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
configure as in autogen.sh

1631206423
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
woops

1631206424
ikskuh!~xq@2a0d:5940:6:163::ad7e
do i have this to do by myself?

1631206441
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
id like for you to run it just to see things work but i dont plkan on it

1631206456
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i forgot to add the step that runs autogen sh

1631206462
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it also assums cmake and ninja

1631206487
ikskuh!~xq@2a0d:5940:6:163::ad7e
./update.sh: 360: patch: not found

1631206492
ikskuh!~xq@2a0d:5940:6:163::ad7e
after running autogen.sh

1631206502
ikskuh!~xq@2a0d:5940:6:163::ad7e
do you have a linux box to do that?

1631206535
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
no

1631206549
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1631206554
ikskuh!~xq@2a0d:5940:6:163::ad7e
VM no option?

1631206569
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
`automake, autoconf, git, libtool, perl`

1631206574
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
are the required tools

1631206578
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
for building libressl

1631206605
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
idk linux that well

1631206723
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1631206728
ikskuh!~xq@2a0d:5940:6:163::ad7e
i was actually not having "patch" installed

1631206736
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wtf is that lol

1631206765
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
some bsd thing i guess

1631206786
ikskuh!~xq@2a0d:5940:6:163::ad7e
bsd applies patch files :D

1631206802
ikskuh!~xq@2a0d:5940:6:163::ad7e
*patch 

1631206811
ikskuh!~xq@2a0d:5940:6:163::ad7e
it can take a git diff and apply that to a file tree for example

1631206821
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
don't think i've ever used it lol

1631207008
ikskuh!~xq@2a0d:5940:6:163::ad7e
autogen fails for me

1631207108
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i blame your machine

1631207110
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but thats ok

1631207139
ikskuh!~xq@2a0d:5940:6:163::ad7e
i (still) have a pretty blank machine

1631207149
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
and thats why, it doesn't have any of the goodness

1631207152
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
what are you missing btw

1631207170
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have like 1000 lines log :D

1631207183
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i just needed a tls solution because iguanaTLS has a bug with connection reuse and i need to spam requests with my client

1631207189
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
and i need to merge connection reuse :sob:

1631207233
ikskuh!~xq@2a0d:5940:6:163::ad7e
try building it with build.zig 

1631207244
ikskuh!~xq@2a0d:5940:6:163::ad7e
should also enable cross-platform builds

1631207263
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i got lazy ;3;

1631207271
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://zigbin.io/767291

1631207274
ikskuh!~xq@2a0d:5940:6:163::ad7e
those are the errors

1631207278
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you are lazy, do it right once

1631207288
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
do you have libtool

1631207290
ikskuh!~xq@2a0d:5940:6:163::ad7e
instead of doing some annoying busywork every time 

1631207312
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ima be honest idk what wizardry they got going on in their build scripts

1631207315
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it isnt as simple as redis

1631207323
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
id like to though

1631207333
ikskuh!~xq@2a0d:5940:6:163::ad7e
check out the CMakeLists.txt

1631207334
ikskuh!~xq@2a0d:5940:6:163::ad7e
it's easier

1631207337
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
all i need is tls.h for the cimport and then to link against tls,crypto,ssl

1631207344
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yeah thats what i was looking at XD

1631207832
marler8997!~marler899@204.229.3.4
welcome to autotools hell

1631208150
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ACTION does a pullup

1631222250
noam!~noam@104.232.42.247
freshcoffee: No? The whole point is that what counts as an error cannot be defined by the programmer, intrinsically

1631222271
noam!~noam@104.232.42.247
The definition of error used in the paper is "behavior unwanted by the user"

1631222300
noam!~noam@104.232.42.247
Thus, "useless software" is referring to software which never does what the user wants

1631222312
noam!~noam@104.232.42.247
It's impossible to test for that.

1631222357
noam!~noam@104.232.42.247
Opening a file in zig can return an error, for instance - but if my goal is to assert that the file *does not exist*, then the "error" isn't actually erroneous

1631222370
freshcoffee!~fresh@user/freshcoffee
using the paper's own ideas, it's impossible to declare software useless _universally_ because then you are doing the same thing as a programmer defining the error

1631222414
noam!~noam@104.232.42.247
But it also doesn't say that universally useless software is a meaningful concept - it uses useless and perfect software as examples of *extremes*, not real cases

1631222453
noam!~noam@104.232.42.247
and, in fact, you can actually treat the concept as meaningful, to a degree

1631222479
noam!~noam@104.232.42.247
If I write software which purports to be a decompressor, but which actually always errors out and pretends that no file can be opened, that basically meets the definition of useless

1631222489
noam!~noam@104.232.42.247
Is there someone who will want that behavior? Probably. People are weird.

1631222522
noam!~noam@104.232.42.247
But at the least, you can reasonably determine that that program is *closer* to useless than an actual decompressor

1631222533
freshcoffee!~fresh@user/freshcoffee
if "to a degree" enters the picture, then apply it to programmers defining an error. If the paper wants to stick to its guns re: errors, thus the paper also cannot delcare any piece of software as useless because, use is in the eye of the user.

1631222549
noam!~noam@104.232.42.247
Then it's a good thing it doesn't declare any as useless

1631222563
noam!~noam@104.232.42.247
It declares the concept of useless, it doesn't try applying it to any particular examples

1631222573
freshcoffee!~fresh@user/freshcoffee
what's the difference

1631222629
noam!~noam@104.232.42.247
const filenonexistence = fn()bool { const f = ...openFile(path) catch return true; f.close(); return false; };

1631222645
noam!~noam@104.232.42.247
That example is what it's really talking about.

1631222647
freshcoffee!~fresh@user/freshcoffee
I don't need a concrete example to know this statement is wrong "Useless software is such that it can not be used for any purpose". "any purpose" is universal.

1631222663
noam!~noam@104.232.42.247
When you define an openFile that returns *errors* - well, you can't know what really is erroneous without knowing the client

1631222672
noam!~noam@104.232.42.247
But, *if you know the client*, you *can* meaningfully define erroneous behavior.

1631222703
noam!~noam@104.232.42.247
Hence, when it talks about useless software, it's basically saying `for client in allclients: assert(client considers program behavior to always be erroneous)`

1631222711
noam!~noam@104.232.42.247
or at least, that's how I read it

1631222803
noam!~noam@104.232.42.247
freshcoffee: okay, so assume that a program behaves utterly randomly. Every use does something totally random and different, there's no way of knowing what it will do, but it will actively attempt to do whatever you least want.

1631222817
freshcoffee!~fresh@user/freshcoffee
ok

1631222826
shimonaga!~shimonaga@user/shimonaga
is there a way to go from uint -> Error, like @intToEnum, but for errors? I see @intToError, but it is always in reference to the global error set. I'm looking to resolve a specific error set instead.

1631222853
noam!~noam@104.232.42.247
Or, let's say you have an API which *reads the source code of the caller* using debug information, and actively fights against what it's being used for

1631222871
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
shimonaga: @errSetCast

1631222887
shimonaga!~shimonaga@user/shimonaga
g-w1: oh, thanks!

1631222900
noam!~noam@104.232.42.247
In that case, *every use* is *definitionally* not what the client wants

1631222900
freshcoffee!~fresh@user/freshcoffee
so I am not the only client but let's just say I am. ima gonna take this piece of utterly random software and make it an input to a statistical analyzer of random behavior for research on Bell's theorem

1631222921
noam!~noam@104.232.42.247
the API detects that it's being used as such and becomes deterministic.

1631222954
noam!~noam@104.232.42.247
I think the only case that actually fits the ideal of "utterly useless" is antagonistic software which actively attempts to fight against whatever purpose you use it for

1631222990
noam!~noam@104.232.42.247
a library which reads the DWARF info of the caller [or other platform-specific debug info], determines what purpose its use is intended for, and does the opposite

1631223055
freshcoffee!~fresh@user/freshcoffee
I don't think it's a consistent argument to allow for wildcard clients to destroy the concept of errors, and at the same time say it's allowed to only have 1 client for the sake of defining useless software

1631223058
noam!~noam@104.232.42.247
Using it to model random behavior? It's deterministic. Use it for any other purpose? It uses a CSPRNG to decide what horribly stupid thing to do

1631223079
noam!~noam@104.232.42.247
I'm giving an example of software which is always wrong no matter how many clients there are

1631223090
noam!~noam@104.232.42.247
Ah! Imagine an AI

1631223094
noam!~noam@104.232.42.247
Which is actively user-hostile.

1631223104
noam!~noam@104.232.42.247
and is aware of reverse psychology etc

1631223129
noam!~noam@104.232.42.247
No matter what purpose you set it to, it *will not do what you want*. Using it to research hostile AI? It'll become extremely polite and pleasantly chat with you.

1631223143
noam!~noam@104.232.42.247
No matter how many users there are, *all* of them will consider it erroneous

1631223204
noam!~noam@104.232.42.247
also, this argument isn't even needed to "destroy the concept of errors"

1631223207
noam!~noam@104.232.42.247
which *isn't the goal of the paper*

1631223224
freshcoffee!~fresh@user/freshcoffee
in order to resarch hostile AI you cannot dismiss or refuse to prcoess a docile AI

1631223228
noam!~noam@104.232.42.247
The paper doesn't argue errors don't exist, it argues that what programming languages *refer to* as errors are *not*

1631223252
noam!~noam@104.232.42.247
the definition of useless software is a separate argument in the same paper

1631223272
noam!~noam@104.232.42.247
there, it's arguing that the closer the program's behavior matches the client's intent, the better the software

1631223278
noam!~noam@104.232.42.247
and it's using useless software to contrast that

1631223310
noam!~noam@104.232.42.247
they're two separate arguments which are used in tandem to argue that modern software engineering encourages poor methods of reasoning about program behavior

1631223337
shimonaga!~shimonaga@user/shimonaga
g-w1: @errSetCast is just for converting between values in two error sets, not from int -> error set value. I'll keep poking around

1631223402
noam!~noam@104.232.42.247
That is, *given* that the first argument - zig errors, C errno, C++ exceptions, etc, are *not* in fact indicators of erroneous behavior - and *given* the second argument - the closer a program's behavior is to what the user wants, the better it is - programming languages are encouraging methods of thinking that lead to worse behavior while appearing more correct

1631223437
noam!~noam@104.232.42.247
That's my interpretation, anyways - it's not exactly a formal paper, and your interpretation can of course vary

1631223494
noam!~noam@104.232.42.247
I'd put it even simpler: what we call "bugs" are really errors, and what we call "errors" are just a way of modeling data and control flow

1631223592
shimonaga!~shimonaga@user/shimonaga
g-w1: in os.zig and child_process.zig, i guess the way it's done is @errCast(ErrorSetType, @intToError(int_value))

1631223822
noam!~noam@104.232.42.247
freshcoffee: I'll note that while I agree with both the first and second arguments listed, I'm not convinced the conclusion is correct. I'd argue that broadening the term "bug" to include "any behavior unwanted by the user" (which includes e.g. automatic restarting, as Windows and Ubuntu now do) is a sufficient solution. As long as there's a conscious awareness that "errors" *aren't*, there's no

1631223825
noam!~noam@104.232.42.247
issue.

1631227281
Alvo!~Alvo@157.245.85.133
Hello, I'm thinking to try out zig in my project. Would it be possible to call a c++ header only library from zig? I'm using the Asio c++ library.

1631231181
ismael!~ismaell@sourcemage/ismael
Alvo: as a general rule (I'm new to the language, so can't answer specifically), FFI for C++ isn't portable between C++ implementations because the ABI isn't stable

1631231271
ismael!~ismaell@sourcemage/ismael
Alvo: that said, you can always call a C++ function if you build a wrapper C API in C++, or if you manually code for the ABI you're trying to call into

1631231625
noam!~noam@104.232.42.247
ABI instability is only an issue if you try copying the binary around

1631231635
noam!~noam@104.232.42.247
A static binary should be fine

1631231649
noam!~noam@104.232.42.247
So, for a single-header library, if you build a static zig binary, you should be perfectly fine

1631231989
ismael!~ismaell@sourcemage/ismael
partially... as long as you know what compiled that C++ code

