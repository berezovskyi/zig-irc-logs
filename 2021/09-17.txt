1631837478
Tekk!~tekk@89.45.224.74
dmgk, Hey, are you around?

1631847542
GreaseMonkey!greaser@user/greasemonkey
can ArenaAllocators form a hierarchy or do Bad Thingsâ„¢ happen when one tries that, because so far it seems to be the latter

1631847897
freshcoffee1!~fresh@user/freshcoffee
what do you expect a hierarchy of arenas to do? none of the memory would actually be free'd until the root arena deinit() is called

1631847932
GreaseMonkey!greaser@user/greasemonkey
good point

1631847947
GreaseMonkey!greaser@user/greasemonkey
i'd expect at least some of it to be repurposeable

1631848591
freshcoffee1!~fresh@user/freshcoffee
I suppose a sub-arena could send its just-released block list to parent, but then the parent gets more complicated, has to track "ready blocks" and their sizes, etc

1631848635
freshcoffee1!~fresh@user/freshcoffee
and that sounds likely to be a perf hit. arena allocation is _really_ efficient if it doesn't need to call the backing allocator

1631859886
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: yes. what do you want to know?

1631863043
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah hey o/

1631863069
ikskuh!~xq@2a0d:5940:6:163::ad7e
i asked i_freund already, but same question:

1631863080
ikskuh!~xq@2a0d:5940:6:163::ad7e
as a package maintainer, which of the three options do you prefer:

1631863087
ikskuh!~xq@2a0d:5940:6:163::ad7e
1. link via pkg-config / linkSystemLibrary

1631863099
ikskuh!~xq@2a0d:5940:6:163::ad7e
2. link statically

1631863116
ikskuh!~xq@2a0d:5940:6:163::ad7e
3. vendor library source and build locally + link statically

1631866068
Tekk!~tekk@89.45.224.139
Hey, is there a way to use an optional-if as an expression? I'm specifically thinking in the case of like, var pattern: ?[]u8 = ...; then later on if (cond_foo or if (pattern) | p | std.mem.containsAtLeast(u8, haystack, 1, p) else false) {...}

1631866191
ikskuh!~xq@2a0d:5940:6:163::ad7e
if(cond_foo and pattern != null) std.mem.containsAtLeast(u8, haystack, 1, pattern.?) else false

1631866205
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh wait

1631866216
ikskuh!~xq@2a0d:5940:6:163::ad7e
i misread

1631866229
ikskuh!~xq@2a0d:5940:6:163::ad7e
should be possible, add some parens

1631866257
Tekk!~tekk@89.45.224.139
I can always just .? to force-unwrap an optional then?

1631866276
Tekk!~tekk@89.45.224.139
That'd make my life a lot easier, I can just check for null above.

1631866307
bgiannan!giann@2a01:4f8:141:1272::2
if the only condition is != null you can do: if (optional) |unwrapped| {...}

1631866314
bgiannan!giann@2a01:4f8:141:1272::2
otherwise yes use != null and .?

1631866604
Tekk!~tekk@89.45.224.139
Sweet

1631867879
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
hello

1631867888
Tekk!~tekk@89.45.224.139
Hei

1631867912
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
is there any large code to see in Zig?

1631868007
Tekk!~tekk@89.45.224.139
I imagine that'd depend on your definition of large. There are some projects in zig listed here, maybe one of them will be interesting: https://github.com/ziglang/zig/wiki/Community-Projects

1631868131
ifreund!~ifreund@user/ifreund
andrzejku: the self hosted compiler itself is probably the largest zig codebase currently, look in the src/ folder of the zig repository

1631868415
ifreund!~ifreund@user/ifreund
it's currently about 100k LoC, depending on your definition of large there are other projects that might fit that definition around as well

1631868489
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
ifreund, 

1631868491
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
nice

1631868502
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
is it something related to the NS?

1631868509
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
zig?

1631868548
ifreund!~ifreund@user/ifreund
andrzejku: what is the NS?

1631868557
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
national socialism

1631868602
ifreund!~ifreund@user/ifreund
absolutely not, why?

1631868647
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
because of that name "zig heil"

1631868665
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
zig --> sieg means vistory

1631868672
ifreund!~ifreund@user/ifreund
zig != sieg, they are totally different words

1631868697
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I know but pronounce is very common

1631868709
Tekk!~tekk@89.45.224.139
Not in English, at least.

1631868709
ifreund!~ifreund@user/ifreund
let me translate them to english phonetic spelling for you: zig -> tsig, sieg -> zeeeeg 

1631868768
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
aa ok

1631868930
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
well that's good

1631868937
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
but I got another question

1631868960
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
is Zig a community made language or more one person or more one company

1631868978
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
how it comply to FS?

1631868981
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
free software

1631868992
ifreund!~ifreund@user/ifreund
it is MIT licensed and FOSS

1631869010
Tekk!~tekk@89.45.224.139
To the first point, you can look at the authors in the pull requests https://github.com/ziglang/zig/pulls

1631869030
Tekk!~tekk@89.45.224.139
It's quite a variety of contributors for a project this small

1631869061
ifreund!~ifreund@user/ifreund
there is an explict effort to keep zig free from corparate influence as well, it is funded by the independant and non-profit zig software foundation

1631869076
ifreund!~ifreund@user/ifreund
we have a BDFL, but the community is very involved in the development

1631874383
earnestly!~earnest@user/earnestly
I don't think that's a 'but', it should be an 'and'

1631874415
earnestly!~earnest@user/earnestly
Because it's not involved despite, but because

1631875444
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
ifreund, well what's confusing me is that rust was chosen as the system programming language

1631875458
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
and it will be integrated to Linux Kernel

1631875582
ifreund!~ifreund@user/ifreund
uh no

1631875589
ifreund!~ifreund@user/ifreund
that hasn't been decided yet

1631875602
ifreund!~ifreund@user/ifreund
and there's no reason multiple systems programming languages can't exist

1631875619
dutchie!~dutchie@user/dutchie
there isn't some committee decreeing that Language X is The Systems Programming Langauge

1631875639
dutchie!~dutchie@user/dutchie
(or secret cabal, or dictator, or anything else)

1631875691
dutchie!~dutchie@user/dutchie
every project makes its own decision based on history, personal preference, maturity, interoperability, or any of a myriad other factors

1631875763
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
https://kangrejos.com/

1631875834
ifreund!~ifreund@user/ifreund
I'm aware people are pushing to use rust for things in the linux kernel

1631875857
ifreund!~ifreund@user/ifreund
nothing has been merged to mainline yet though as far as I'm aware, and it's not clear if/when that will happen

1631876027
ikskuh!~xq@2a0d:5940:6:163::ad7e
i wonder how quickly we can push zig into kernel dev after 1.0 *thinking*

1631876075
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
actually I never tried zig :D

1631876102
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I wrote a Rust a little bit

1631876128
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
but I am aware of commercial solutions

1631876180
ikskuh!~xq@2a0d:5940:6:163::ad7e
what commercial solutions? for what?

1631876258
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I mean I like when the language is finally developed by community they think about features, fix bugs, sponsor etc. better than a major part is done by one company which have a main decision what to do

1631876285
noam!~noam@104.232.42.247
Like Mozilla does for Rust? Or, wait, no, didn't Mozilla fire a lot of the Rust devs?

1631876308
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
noam, I don't know what they did

1631876312
noam!~noam@104.232.42.247
s/the/&ir/

1631876321
ikskuh!~xq@2a0d:5940:6:163::ad7e
i don't think commercial funding by a single company is a good sign

1631876346
ikskuh!~xq@2a0d:5940:6:163::ad7e
what zig does is imho the best way to develop any FOSS tool

1631876387
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
well I work with C / C++ code on my daily

1631876409
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
but I am a little bit bored :P

1631876419
ikskuh!~xq@2a0d:5940:6:163::ad7e
i mean

1631876429
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can see what happens to C++ if too many people are deciding

1631876446
ikskuh!~xq@2a0d:5940:6:163::ad7e
but you see with other languages what happens if only corporate design is applied

1631876494
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
C++ is like never ending learning

1631876517
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
so what is the better solution?

1631876540
ikskuh!~xq@2a0d:5940:6:163::ad7e
check out Zig

1631876552
ikskuh!~xq@2a0d:5940:6:163::ad7e
it's a very short learning phase

1631876556
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you are proficient in C/C++

1631876563
ikskuh!~xq@2a0d:5940:6:163::ad7e
you'll probably need one or two afternoons

1631876572
ikskuh!~xq@2a0d:5940:6:163::ad7e
and you're ready to tackle any problem 

1631876594
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
:O

1631876618
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I have free time till october but I must urgently learn embedded ;d

1631879234
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: sorry I missed you

1631879276
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: 1. I don't like pkg-config much; it's essentially a last-choice. 2. never static link. 3. never vendor

1631879293
noam!~noam@104.232.42.247
um wut.

1631879315
noam!~noam@104.232.42.247
ah, I see what you're responding to

1631879345
noam!~noam@104.232.42.247
ikskuh: my two cents: always link statically, never vendor :P

1631879545
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: so I guess the order of preference is, 1. 2. 3. but none are satisfactory long term and we'd work with projects to come up with something that doesn't suck

1631879807
noam!~noam@104.232.42.247
daurnimator: why never static link?

1631880235
daurnimator!~daurnimat@vultr.daurnimator.com
noam: 1. decouple releases. 2. license compatibility. 3. deduping

1631880369
daurnimator!~daurnimat@vultr.daurnimator.com
(that's ignoring other use-cases like plugin systems)

1631880372
noam!~noam@104.232.42.247
uhh... huh? 2 I get, though I'm dubious whether it has impact (when you load a dynamically linked binary, it links it *at runtime*, which IIUC has the same legal impact as statically linking). 3 is, IMO, completely wrong for most binaries, since most libraries are only used by a few binaries and most binaries only use small parts of libraries; since I've yet to see anyone provide real numbers, I

1631880374
noam!~noam@104.232.42.247
consider any claim [even my own here] to be unsubstantiated. What's 1?

1631880393
noam!~noam@104.232.42.247
What do you mean release decoupling?

1631880405
noam!~noam@104.232.42.247
Ahhh, letting a library update without having to update the client binaries?

1631880413
daurnimator!~daurnimat@vultr.daurnimator.com
yes

1631880426
ifreund!~ifreund@user/ifreund
noam: drew has a page with some numbers: https://drewdevault.com/dynlib

1631880429
noam!~noam@104.232.42.247
I know

1631880439
noam!~noam@104.232.42.247
ifreund: The issue is, that's one machine from one user

1631880447
noam!~noam@104.232.42.247
That's not a meaningful sample size

1631880453
ifreund!~ifreund@user/ifreund
true

1631880457
noam!~noam@104.232.42.247
I happen to believe everything Drew says in there

1631880472
noam!~noam@104.232.42.247
but I don't think that page is sufficiently rigorous to use it as a source

1631880499
noam!~noam@104.232.42.247
why is why I stated my opinion and noted that I consider all opinions on the matter equally (in)valid since *nobody* has done a real study on it.

1631880512
noam!~noam@104.232.42.247
Which is honestly sad given just how much impact there could be

1631880533
noam!~noam@104.232.42.247
I will note that, with the advent of SMP, there are a growing number of costs to dynamic linking

1631880557
noam!~noam@104.232.42.247
NUMA means that shared libraries have to either be duplicated per-node or make cache misses really, *really* awful

1631880558
daurnimator!~daurnimat@vultr.daurnimator.com
noam: I would expect library usage to follow a Pareto distribution

1631880597
noam!~noam@104.232.42.247
daurnimator: and I have differing expectations, but *nobody* for or against static linking has actually done a rigorous study on the topic

1631880616
earnestly!~earnest@user/earnestly
daurnimator: It should be possible to use static linking while using dlopen for plugin type systems

1631880620
noam!~noam@104.232.42.247
earnestly: it is

1631880623
noam!~noam@104.232.42.247
on some systems

1631880627
noam!~noam@104.232.42.247
not with glibc, I think

1631880632
noam!~noam@104.232.42.247
Could be wrong

1631880636
daurnimator!~daurnimat@vultr.daurnimator.com
The last rigourous study I saw on it was from back in early 90s or so. so people *have* done it; but not recently.... but you'll notice I didn't mention it in my reasons

1631880644
earnestly!~earnest@user/earnestly
glibc has dlmopen, which is even better for plugin systems

1631880659
noam!~noam@104.232.42.247
daurnimator: I consider that part of 3, though - I'm including dedup in this

1631880663
noam!~noam@104.232.42.247
earnestly: that's an extension?

1631880667
earnestly!~earnest@user/earnestly
Yeah

1631880672
noam!~noam@104.232.42.247
Great, good for them :P

1631880692
noam!~noam@104.232.42.247
static binaries with dynamic components is definitely possible

1631880700
noam!~noam@104.232.42.247
I'm not aware of any good implementations, though

1631880704
daurnimator!~daurnimat@vultr.daurnimator.com
by de-duping I primarily meant that people don't have 10 different versions of a library on their system: they just have one version.

1631880716
earnestly!~earnest@user/earnestly
I think that dream is dead

1631880724
noam!~noam@104.232.42.247
daurnimator: that's not even true, though :P

1631880727
daurnimator!~daurnimat@vultr.daurnimator.com
the de-dupe on disk, and de-dupe in file cache, and de-dupe in CPU cache are all debatable

1631880749
noam!~noam@104.232.42.247
I've seen systems with gtk3, gtk2, and gtk4 in tandem, for instance, though I doubt that's officially supported

1631880764
daurnimator!~daurnimat@vultr.daurnimator.com
sure, and lua5.1, 5.2, 5.3, and 5.43

1631880770
daurnimator!~daurnimat@vultr.daurnimator.com
and python 2 *and* python 3

1631880771
earnestly!~earnest@user/earnestly
It just about works with C libraries but everything else seems to need entire systems dedicated to multi-version management

1631880788
noam!~noam@104.232.42.247
daurnimator: I'll note that in RAM on modern systems dynamic libraries can actually be *duplicated*

1631880792
daurnimator!~daurnimat@vultr.daurnimator.com
but in general, things *don't* have multiple versions

1631880792
noam!~noam@104.232.42.247
not deduped, *duplicated*

1631880792
earnestly!~earnest@user/earnestly
In which they ultimately end up with version pinning

1631880803
noam!~noam@104.232.42.247
daurnimator: that can be true with static linking, too.

1631880818
earnestly!~earnest@user/earnestly
daurnimator: The only things that don't have multiple versions are C programs, barely.  libpng, openssl, etc.

1631880822
noam!~noam@104.232.42.247
I don't think sane versioning is limited to dynamic linking

1631880832
noam!~noam@104.232.42.247
^

1631880838
noam!~noam@104.232.42.247
That matches my experience, yeah

1631880843
earnestly!~earnest@user/earnestly
Everything else has major problems with multi-version support, see nix, npm, python, haskell, etc.

1631880849
noam!~noam@104.232.42.247
By design, largely.

1631880871
noam!~noam@104.232.42.247
I think the multiversioning is an inescapable result of allowing version pinning

1631880884
daurnimator!~daurnimat@vultr.daurnimator.com
earnestly: well yeah... but no one writes actual libraries in langugues other than C. if you write a "library" in (almost) any other language, it only works in *that* language; with *that* language's runtime.

1631880888
noam!~noam@104.232.42.247
it's why I argue that anything which doesn't support the newest version *should* be dropped until it does

1631880889
earnestly!~earnest@user/earnestly
It's the consequence of distributed package managament

1631880915
noam!~noam@104.232.42.247
daurnimator: sure, but then if you install two packages in that language, you can get three versions of a transitive dependency or something equally stupid

1631880916
earnestly!~earnest@user/earnestly
daurnimator: Rust has the same issue, consider boost with C++ as well

1631880940
daurnimator!~daurnimat@vultr.daurnimator.com
IMO zig is finally a way to write good system libraries in something other than C.... we just need to get emit-h working again. and come up with some good helpers for writing dynamic libraries

1631880942
earnestly!~earnest@user/earnestly
I don't like this

1631880944
noam!~noam@104.232.42.247
earnestly: I think it's a combinination of both factors

1631880948
earnestly!~earnest@user/earnestly
Situation, but it's what it is

1631880965
noam!~noam@104.232.42.247
distributed package management in which only version is ever allowed to be used would avoid the issue

1631880972
noam!~noam@104.232.42.247
centralized package management would, as well

1631880979
noam!~noam@104.232.42.247
though to a lesser degree, I suspect

1631881003
noam!~noam@104.232.42.247
but the important bit is that it's cultural, not technical in nature

1631881031
daurnimator!~daurnimat@vultr.daurnimator.com
noam: in arch we do essentially have the rule you suggest: we give applications ~2 weeks to work on the new version by themselves; then we try and patch them; then if that's too hard, we either drop them; or if they're crucial, regerttably package an older version of the library in parellel with some suffix

1631881046
noam!~noam@104.232.42.247
ACTION nods

1631881051
noam!~noam@104.232.42.247
I think that's a good balance

1631881052
earnestly!~earnest@user/earnestly
noam: version pinning is a strategy to cope with the consequences of distributed package management as it has no feasible way to curate a centralised and consistent core across many developers (typical distributions provide this function but it scales poorly).  Haskell's stack has attempted to do this and is probably the most reasonable example

1631881078
noam!~noam@104.232.42.247
I'll note this is one reason I tend to prefer less popular distributions :P

1631881087
earnestly!~earnest@user/earnestly
Fedora recently gave up trying to handle npm for example

1631881090
noam!~noam@104.232.42.247
It's one of the things that intrigued me about plan9 - there's *never* a version conflict

1631881096
daurnimator!~daurnimat@vultr.daurnimator.com
yeah everyone has now given up on npm

1631881106
earnestly!~earnest@user/earnestly
source based distributions can get around these problems, usually

1631881116
daurnimator!~daurnimat@vultr.daurnimator.com
arch is still barely hanging on to devendoring electron applications

1631881188
earnestly!~earnest@user/earnestly
A design like python uses, as Gobo does, is the only way I can see it being managed nicely where versions are namespaced by directories

1631881198
earnestly!~earnest@user/earnestly
(iow, filesystem as package manager)

1631881209
noam!~noam@104.232.42.247
I readily acknowledge that I'm unusual in responding to bad applications by replacing them, rather than "dealing with the issues" like a "practical" person :P

1631881251
earnestly!~earnest@user/earnestly
(E.g. pkgsrc gets around this to a degree because it's source based)

1631881252
daurnimator!~daurnimat@vultr.daurnimator.com
earnestly: the problem is always passing objects around. e.g. if "File handles" are in a library A; how do you take a file handle from library_B.getFileHandle() and give it to library_C.processFileHandle()

1631881264
daurnimator!~daurnimat@vultr.daurnimator.com
in python the answer is cross your fingers and pray

1631881269
noam!~noam@104.232.42.247
Didn't like LibreOffice, so I switched to AbiWord. Got fed up with that / GTK in general, so I switched to markdown with a random renderer from the distro repo. That wasn't sufficient, so now I write everything in roff with some custom macro sets for HTML and PDF typesetting :P

1631881306
daurnimator!~daurnimat@vultr.daurnimator.com
noam: in the rare circumstances I need to write a document I write it in markdown and use pandoc

1631881307
ifreund!~ifreund@user/ifreund
earnestly: what does the gobo approach have over e.g. nix?

1631881339
noam!~noam@104.232.42.247
Didn't like Mnemosyne or Anki, so I wrote my own flashcard tool. Didn't like the plan9 assembler, so I ported scas and retargeted it at arm64. Didn't like Zig's compilers, or gcc, or LLVM, or QBE, so I started work on my own toolchain :P

1631881356
noam!~noam@104.232.42.247
Thing is, I have [had :(] a lot more free time than most people, and I'm fully aware of that

1631881369
earnestly!~earnest@user/earnestly
daurnimator: That's not a problem if the python dev has made sure those libraries A, B, and C along with their versions are compatible

1631881384
noam!~noam@104.232.42.247
It gets a lot tougher when you have to get a workable system in a much smaller period of time

1631881406
daurnimator!~daurnimat@vultr.daurnimator.com
earnestly: who checks that? the author of A, B or C?

1631881414
noam!~noam@104.232.42.247
(Most recent example: didn't like Venti's server, so I've started work on a new design and implementation :)

1631881418
earnestly!~earnest@user/earnestly
daurnimator: The developer who included A, B and C

1631881432
daurnimator!~daurnimat@vultr.daurnimator.com
earnestly: in this scenario, that developer is the reader

1631881446
daurnimator!~daurnimat@vultr.daurnimator.com
the person who I'm saying has no good way to check and just has to pray

1631881473
noam!~noam@104.232.42.247
daurnimator: IMO, if you don't trust a library to remain usable within major versions, you shouldn't depend on it.

1631881487
earnestly!~earnest@user/earnestly
ifreund: It's not much different but that it eschews a lot of the "extra" machinary nix adds (generations, profiles, etc.)

1631881492
noam!~noam@104.232.42.247
People don't seem to realize what it means for something to be a *dependency* - if it breaks, *you have to deal with it*

1631881524
daurnimator!~daurnimat@vultr.daurnimator.com
noam: more often than not its the maintainer or end-user that has to deal with it

1631881552
daurnimator!~daurnimat@vultr.daurnimator.com
the end-user can just file a bug that eventually gets closed as "stale"

1631881557
noam!~noam@104.232.42.247
daurnimator: well, sure, that's a valid point - and it's why I avoid adding dependencies wherever possible, and tend to flat-out reject any package with more than a few dependencies

1631881561
ifreund!~ifreund@user/ifreund
earnestly: so mostly just way simpler? I can get behind that

1631881565
earnestly!~earnest@user/earnestly
daurnimator: Each library is namespaced by a version, in /usr/share you'd have (for example) lang/site-packages/libA/4.3.2/A.lib so that when the developer includes 4.3.2/A.lib it can only ever find that file

1631881574
noam!~noam@104.232.42.247
ifreund: hermes is another simpler Nix, I think

1631881577
earnestly!~earnest@user/earnestly
ifreund: Yeah, much simpler at the cost of features

1631881579
noam!~noam@104.232.42.247
YOu might be interested in that :)

1631881586
earnestly!~earnest@user/earnestly
If you can look beyond the naming "theme"

1631881589
ifreund!~ifreund@user/ifreund
hermes is cool, janet is also cool

1631881617
earnestly!~earnest@user/earnestly
Then there is also ostree which is, something

1631881644
earnestly!~earnest@user/earnestly
(What flatpak uses)

1631881653
noam!~noam@104.232.42.247
As one example of avoiding dependencies: Mnemosyne requires Python, QT, PyQT, a web engine (QTWebKit?), that web engine's python bindings, SQLite, and a bunch more. My implementation of the same algorithm, DSM-9, has zero external dependencies, and can be compiled in under 0.5s on a crappy arm64 chip.

1631881680
earnestly!~earnest@user/earnestly
ifreund: (And of course gobo doesn't have all the pretentions about functional purity)

1631881744
ifreund!~ifreund@user/ifreund
noam: is your flashcard thing plan9 only? or would it be possible to use on posixy systems?

1631881752
ifreund!~ifreund@user/ifreund
(with patches)

1631881795
noam!~noam@104.232.42.247
ifreund: it *was* plan9 only until v1.1

1631881803
noam!~noam@104.232.42.247
I patched that last week to support POSIX

1631881817
ifreund!~ifreund@user/ifreund
ah nice, I'll probably give it a try at some point

1631881822
earnestly!~earnest@user/earnestly
daurnimator: If you can, read the gobo paper where they compare different strategies.  I do like the idea of static linking though, but imagine ccache combined with content addressable storage

1631881829
noam!~noam@104.232.42.247
I finished up v2.0 this morning, just need to write the docs and release it :)

1631881844
ifreund!~ifreund@user/ifreund
I used anki for a bit a year or so ago but stopped mostly because I hated the ux/tooling

1631881846
earnestly!~earnest@user/earnestly
(So rebuilds are fast because objects are preserved, distribution is minimal because only changed blocks are sent)

1631881875
noam!~noam@104.232.42.247
(Changes: 20% smaller codebase, up to 80% faster [depending on platform; systems with reasonable RAM will barely notice], proper sorting of the due cards)

1631881917
noam!~noam@104.232.42.247
I'm actually writing a post on why developing on strong machines results in worse programs soon, largely informed by this experience

1631881981
daurnimator!~daurnimat@vultr.daurnimator.com
earnestly: I talk to hisham frequently :P

1631881990
earnestly!~earnest@user/earnestly
Yeah, so you know

1631882011
earnestly!~earnest@user/earnestly
The assumption is that multi-versioning is here and it's not going away

1631882085
earnestly!~earnest@user/earnestly
(I love how those placeholder css gradient animations peg my chrome at 80% cpu usage which never load because I don't javascript)

1631882130
noam!~noam@104.232.42.247
lol

1631882137
noam!~noam@104.232.42.247
ACTION uses netsurf btw

1631882177
daurnimator!~daurnimat@vultr.daurnimator.com
noam: oh cool; is kinnison still maintaining that? I thought he might have moved on

1631882191
noam!~noam@104.232.42.247
daurnimator: it's definitely still *maintained*

1631882213
noam!~noam@104.232.42.247
Drew recently started on a novel frontend; phil made a plan9 frontend months back which I use regularly

1631883341
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
are those test functions they shall autorun?

1631883598
noam!~noam@104.232.42.247
ifreund: oh yeah, quick note though: the one piece that *is* plan9 only right now is the interactive one :P

1631883610
noam!~noam@104.232.42.247
It depends heavily on e.g. the plumber to pass data around

1631883626
noam!~noam@104.232.42.247
and eqn|troff for processing of roff cards

1631883634
noam!~noam@104.232.42.247
(but I think *that* can be done on linux...)

1631883644
noam!~noam@104.232.42.247
I'm working on a server in Go for it, though

1631883657
noam!~noam@104.232.42.247
which will be purely server-side and long-running :)

1631883663
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
ahh I found I have to run zig test

1631886395
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: Btw, are there plans to support external LLVM plugins? (I just saw that you added support for -S and -emit-llvm, but afaik there is no way to consume (transformed) llvm bitcode in zig cc, so tangentially relevant :P)

1631886511
Ristovski!~Ristovski@hellomouse/perf/ristovski
(plugins as in plugins that define custom passes)

1631887726
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ifreund  i may have to try out soju

1631891151
flyx[m]!~flyxflyxo@mail.flyx.org
why doesn't @fieldParentPtr work on a union type? how do I get a pointer to the union type from a pointer to one of its content alternatives?

1631891218
ifreund!~ifreund@user/ifreund
flyx[m]: it doesn't work because nobody has implemented https://github.com/ziglang/zig/issues/6611 yet

1631891288
flyx[m]!~flyxflyxo@mail.flyx.org
hmm so there's no way to do this currently?

1631895135
cepheus!~cepheus@user/cepheus
hmm, I was under the impression that zld supported `tbd` files for frameworks now, but i get `unknown filetype for a library`

1631895282
cepheus!~cepheus@user/cepheus
it might be me getting clever, i'm trying to build under nix and use nix's framework paths

1631896298
jasom!~aidenn@ip98-185-238-13.sb.sd.cox.net
it seems like there is no way to make an unversioned shared library with zig.build?  SharedLibKind has an unversioned member but the enum is private and there is no public function to access it.

1631896618
ifreund!~ifreund@user/ifreund
jasom: it should be made pub, but you can just use an enum literal for now

1631896646
ifreund!~ifreund@user/ifreund
https://github.com/ifreund/rundird/blob/8a97db7d6d7a07cd0ed24fe0e9604360c4c715e4/build.zig#L31

1631896672
jasom!~aidenn@ip98-185-238-13.sb.sd.cox.net
ifreund: TIL you can do that in Zig; thanks!

1631896676
ifreund!~ifreund@user/ifreund
you might also be interested in my hack to gain total control over where it gets installed to

1631896693
ifreund!~ifreund@user/ifreund
no problem!

1631897069
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
what's const root = @import("root"); in io.zig

1631897083
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I see noone described how the modules work

1631897171
jasom!~aidenn@ip98-185-238-13.sb.sd.cox.net
andrzejku: https://ziglang.org/documentation/0.8.1/#import has some information

1631897233
jasom!~aidenn@ip98-185-238-13.sb.sd.cox.net
andrzejku: @import returns a struct, so you can access public functions and variables from the file the same as any struct member

1631897301
dutchie!~dutchie@user/dutchie
"root" is another special package, corresponding to the top thing being compiled (e.g. src/main.zig)

1631897304
daurnimator!~daurnimat@vultr.daurnimator.com
andrzejku: root is the entry-point file you give zig.

1631897376
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
the one which I run?

1631897469
dutchie!~dutchie@user/dutchie
yeah, so if you `zig run foo.zig` then `@import("root")` will import foo.zig

1631897562
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
:O

1631897662
daurnimator!~daurnimat@vultr.daurnimator.com
There are three special imports: root, std, builtin

1631897806
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
yes I see

1631897853
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
but is it going inside the directory

1631897870
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
and trying to import for example io.zig as struct

1631897872
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
?

1631898012
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
for example std.os doesn't include any os.zig

1631898022
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
while io.zig exists

1631898069
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
it takes an os depended implementation

1631898658
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
hi

1631898678
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
do we need more "All Your Base" references in the docs?

1631898680
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
davidfetter_work, hello

1631898722
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
ACTION happy to send PRs along that line while he figures out something helpful to do, but only if they'd be welcome

1631898741
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
your best bet is to sneak them in through moew in depth docs

1631898750
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
more*

1631898944
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
That sounds like a reasonable way to do it. "Moar doccs" is a way I've used to start contributing to several projects ere this

1631898989
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
no idea whether I'd be skilled enough to contribute further, but it pretty much doesn't matter. What parts of the docs are especially raw or missing atm?

1631899106
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
I personally feel like ziglearn isn't as in depth

1631899134
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
it gave me like the 5% of the 20% the langref is missing 

1631899683
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
I'm not yet at a place where I know what's missing from the langref or how best to turn that into a tutorial. Is there anything else that's just annoying in the docs and accessible to people who aren't yet contributing source patches?

1631899788
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
sit in public discussion channels and observe where annoyances come in either with problems, people xying, etc

1631899815
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i for one would admire a definitive guide on build.zig, what it can and cant do, patterns and best practices 

1631899922
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
definitely a daunting task but reading the source and seeing what top zig projects do may help you get to the level of understanding you want

1631899955
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
async could also use more examples but its kinda dusty and im not 100% on where its at rn languagewise

1631900259
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
I just come today

1631900265
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
and it is kinda hard to dive into

1631900301
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
for example getStdOut <<?

1631900304
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
this function

1631900315
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
in one tutorial I saw its used in another no

1631900595
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
or this one @cImport(expression) type

1631900616
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
the latter is in the langref, but whats your confusion with the first?

1631900667
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
how can I guess what has to be in the expression

1631900712
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
by the way this documentation is generated right?

1631900716
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
or where can I find it

1631900870
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
there is std lib docs gen but they arent like 100^ yet so id advise against it and just browse the source yourself

1631900891
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
https://ziglang.org/documentation/master/#cImport this page is good

1631900941
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
expression is covered earlier in the document

1631900941
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
or for example for me it is confusing

1631900950
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
why we use const to declare struct

1631900964
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
const something = struct { ...

1631900995
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
im sure there is a use case for changing what skeleton a variable points to

1631900996
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
sorry Something should be

1631901007
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
structs also act as namespaces 

1631901019
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
not trying to rush you answers im just trying to see what i can conjure up in response to them

1631901078
andrzejku!~andrzejku@45-11-60-125.ip4.greenlan.pl
well anyway I have to try it more

1631901629
marler8997!~marler899@204.229.3.4
ikskuh, have you explored ios apps as well in terms of your zero-graphics project, or other projects?

1631902263
kiedtl!~kiedtl@kisslinux/kiedtl
Is it not possible in zig 0.7.1 to have a self-referencing struct inside a function?

1631902360
kiedtl!~kiedtl@kisslinux/kiedtl
(That is, without @This(). Not a deal breaker but just weird)

1631902404
luuk!~luuk@user/luuk
Only at the top-level scope

1631902414
luuk!~luuk@user/luuk
For example, in a test case it won't work

1631902462
luuk!~luuk@user/luuk
To be more specific: At container level, not neccesairly top-level

1631902487
kiedtl!~kiedtl@kisslinux/kiedtl
I see.

1631902548
andrewrk!~andrewrk@mail.ziglang.org
Ristovski, there is - zig accepts .bc and .ll files through build-exe, build-obj, build-lib, cc, and c++ sub-commands

1631902581
kiedtl!~kiedtl@kisslinux/kiedtl
It's really weird though. The struct can't be referenced without @This() throughout the type, including within methods.

1631902597
kiedtl!~kiedtl@kisslinux/kiedtl
Has this been fixed in 0.8? (I don't have it installed and cannot do so at the moment.)

1631902669
luuk!~luuk@user/luuk
Where did you declare the struct? Is it within a scope?

1631902680
luuk!~luuk@user/luuk
s/scope/function

1631902710
kiedtl!~kiedtl@kisslinux/kiedtl
Yes, it's within a function

1631902789
luuk!~luuk@user/luuk
That's by design.

1631902794
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: Oh I see. But I guess no plans for supporting something like `opt`s '-load-pass-plugin=plugin.so'?

1631902816
andrewrk!~andrewrk@mail.ziglang.org
there is no current plan to support that

1631902849
Ristovski!~Ristovski@hellomouse/perf/ristovski
Understandable, at this point its just a nice to have and I am not sure how hard exposing llvms `opt` would be

1631902919
luuk!~luuk@user/luuk
It works in container-level because they're declared before being analyzed, to make them work order-independent. A 'workaround' is to have `const OtherName = @This();` as a declaration inside that struct and use that as its type instead. `OtherName` could be anything such as `Self`.

1631920328
cr1901!~William@2601:8d:8600:911:99af:ecfe:75f6:9ed5
Does zig std have a binary heap data structure?

1631920696
flux_control!~flux@sourcemage/wizard/flux
Is the reequest for Japanese translations in https://blog.kobol.io/2021/08/25/we-are-pulling-the-plug/ still active?

1631920769
Gliptic!~glip@irc.glip.cc
did you link the wrong thing?

1631920784
flux_control!~flux@sourcemage/wizard/flux
Yes I did, sorry

1631920789
flux_control!~flux@sourcemage/wizard/flux
https://ziglang.org/news/statement-regarding-zen-programming-language/

1631920807
flux_control!~flux@sourcemage/wizard/flux
This one --^

1631920922
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
you can see here https://ziglang.org/translations/

1631920942
flux_control!~flux@sourcemage/wizard/flux
Thanks

1631921011
flux_control!~flux@sourcemage/wizard/flux
So currently no Japanese available then

1631921070
flux_control!~flux@sourcemage/wizard/flux
I'll start with the main page

1631921217
andrewrk!~andrewrk@mail.ziglang.org
flux_control, did you contact Loris already?

1631921242
andrewrk!~andrewrk@mail.ziglang.org
he mentioned someone started working on Japanese translations today, and I am wondering if that was you

1631921472
flux_control!~flux@sourcemage/wizard/flux
I sent an email last night to the nippon@ address at the bottom of the link above but figured I might as well get started anyway, hence I asked in here.

1631921496
flux_control!~flux@sourcemage/wizard/flux
Last night is around 8 hours ago though.

1631921557
flux_control!~flux@sourcemage/wizard/flux
I'm guessing if someone is actively working on it then it isn't me. My email only stated that I'm interested in helping.

1631921584
flux_control!~flux@sourcemage/wizard/flux
I wasn't sure which docs I should start on first.

1631922087
andrewrk!~andrewrk@mail.ziglang.org
I think he was talking about you :)

1631922095
andrewrk!~andrewrk@mail.ziglang.org
thanks for the help!

1631922116
flux_control!~flux@sourcemage/wizard/flux
Don't thank me yet ;)

1631922129
flux_control!~flux@sourcemage/wizard/flux
Wait until I at least get something translated to you :)

1631922136
andrewrk!~andrewrk@mail.ziglang.org
fair :D

1631922220
flux_control!~flux@sourcemage/wizard/flux
Should I submit as pull-requests against the website repo, or is there another method that's preferred?

1631922277
andrewrk!~andrewrk@mail.ziglang.org
pull-requests against the website repo are the preferred method

1631922295
flux_control!~flux@sourcemage/wizard/flux
I thought as much :)

1631922906
flux_control!~flux@sourcemage/wizard/flux
andrewrk: I have to warn you, I'm tempted to do reverse-ZeroWing on the translations ;-)

1631922931
andrewrk!~andrewrk@mail.ziglang.org
hahaha

