1638951970
motiejus!~motiejus@2001:470:69fc:105::38fb
folks, looks like there is a regression since 1414 w.r.t. cgo darwin binaries: https://github.com/ziglang/zig/issues/10297 ; should I spend some time bisecting zig to find where it failed?

1638952078
motiejus!~motiejus@2001:470:69fc:105::38fb
while we're at it: would you be willing to accept/maintain a CI build that builds a super-simple cgo binary (like in 10297)?

1638960285
andrewrk!~andrewrk@mail.ziglang.org
mmm that might be problematic if it introduces a go dependency

1638960342
andrewrk!~andrewrk@mail.ziglang.org
let me think about how we can get test coverage for this

1638961478
motiejus!~motiejus@2001:470:69fc:105::38fb
so #10297 is darwin-x86_64; there is a separate regression on darwin-aarch64, which was caused by an earlier commit: https://github.com/ziglang/zig/issues/10299

1638961608
motiejus!~motiejus@2001:470:69fc:105::38fb
I bisected the x86_64 issue, and simple revert seems to fix it (didn't run other tests though); but the cause-of-aarch64 doesn't revert cleanly

1638961622
andrewrk!~andrewrk@mail.ziglang.org
thanks for taking the time to file issues

1638961641
andrewrk!~andrewrk@mail.ziglang.org
I'm headed to bed but I share your goal of getting test coverage for these

1638961669
motiejus!~motiejus@2001:470:69fc:105::38fb
should I submit a PR reverting the x86_64 breakage, so CI can do it's thing?

1638961698
motiejus!~motiejus@2001:470:69fc:105::38fb
(aarch64 will be much more involved, so will defer to Jakub there)

1638961702
andrewrk!~andrewrk@mail.ziglang.org
jakub is already looking into it, I think that would be unnecessary

1638961710
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, great!

1638961787
motiejus!~motiejus@2001:470:69fc:105::38fb
good night, Andrew, thanks for your prompt responses

1638964129
daurnimator!~daurnimat@vultr.daurnimator.com
wouldn't it be the same as how "wine is a dependency"?

1638975682
motiejus!~motiejus@2001:470:69fc:105::38fb
Wine's abi does not change, ever. Golang cuts a major version every 6 months

1638975781
motiejus!~motiejus@2001:470:69fc:105::38fb
Technically minor, but it's always a major change anyway

1638982655
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Hi! I am trying to do advent of code exercises with Zig, and I am struggling to understand and use arrays, ArrayLists and memory allocations right apparently. Can someone tell why I get OutOfMemory error when I run zig test src/day03/day03.zig?

1638982658
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
https://github.com/peterhil/aoc/blob/main/src/day03/day03.zig

1638982708
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
I am learning Zig, and have previously learned a bit of Rust about 1,5 years ago.

1638982734
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Is the problem because I should use test_allocator on tests?

1638982837
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Any comments on code best practises and Zig idioms are also welcome. I did read Zig learn and tried to code some months ago and did the very first Ziglings exercises, so maybe I do not remember all the basics that I should remember...

1638982927
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
I would have used just []u64 arrays for ones and bits, but I could get over "can not evaluate constant expression" with bitWidth.

1638982947
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
...could NOT get over...

1638983009
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Or actually: var ones: [bitWidth]u64 = [bitWidth]u64{0} ** bitWidth;

1638983042
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
I have a slight flu, so maybe my brain is not in the best shape either... :-)

1638983408
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
How would you initialize the ones and bits with bitWidth times zeros?

1638983425
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Or would you even use ArrayList?

1638983469
dutchie!~dutchie@user/dutchie
without having a chance to look at the full code, you probably want `[1]u64{0} ** bitWidth` or `[_]u64{0} ** bitWidth`

1638983526
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Will that produce and arrays of zeros, and not array of arrays?

1638983546
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
an array...

1638983589
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
[_]u64{0} ** bitWidth does not work, because the array size can not be inferred.

1638983727
dutchie!~dutchie@user/dutchie
that definitely should work, there must be something else wrong

1638983749
dutchie!~dutchie@user/dutchie
ah bitWidth needs to be comptime-known

1638983861
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Yeah, but it can not be, as the input width might change. And actually for the part 2 I'd like to write test with the sample input.

1638983883
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Why bitWidth has to be compile time known?

1638983902
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Can I make it a runtime variable?

1638983945
dutchie!~dutchie@user/dutchie
arrays always have comptime-known length, slices are for when you only know them at runtime

1638983986
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Ah, ok. I read that somewhere, but did not fully internalise apparently.

1638984023
dutchie!~dutchie@user/dutchie
you could use arraylist as you currently do in getArraySlice, but i'd just use the allocator interface directly

1638984074
dutchie!~dutchie@user/dutchie
`const sl = try allocator.alloc(T, n); for (sl) |*x| x.* = value;`

1638984075
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Yeah, putting it away in a function does not really feel right. OTOH, I'd like to avoid the repetitive code.

1638984168
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Oh, you can build a slice using the allocator interface like that?

1638984183
dutchie!~dutchie@user/dutchie
well, how do you think ArrayList does it? ;)

1638984187
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Just allocate the memory, and use pointers?

1638984192
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
:-)

1638984450
dutchie!~dutchie@user/dutchie
as for why it's running out of memory... idk. you aren't freeing anything at the moment but i would have thought with page_allocator you'd just get oomkilled by the os rather than zig internals

1638984504
dutchie!~dutchie@user/dutchie
minor style tip: `if (2 * count >= total) 1 else 0` -> @boolToInt

1638984520
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Thanks!

1638984838
ugla!~ugla@2001:470:69fc:105::2b5
peterhil: Seems to me like the test output is wrong. It's correctly reporting the test failure, but also showing the OutOfMemory stuff for some reason. If I update the expected value to match the result of part1(), it just passes cleanly.

1638984948
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
ugla: Oh, I forgot to update the expected value... Thanks!

1638984989
dutchie!~dutchie@user/dutchie
ah yeah, i've had that happen to me before

1638985011
dutchie!~dutchie@user/dutchie
error return traces show a bunch of errors that were handled as well as the one that actually failed so you can get red herrings like that sometimes

1638985827
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
dutchie: ugla: Thanks, updated the code with these suggestions.

1638985892
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
I think I'll adjust my mentality to really write lower level code with Zig, at least initially to get used to memory handling.

1638985985
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
And I kind of miss generics. I was about to write initWith to initialise both ones and bits with zeros, but gave up because of the type system.

1638986319
ugla!~ugla@2001:470:69fc:105::2b5
peterhil: Do you mean that there's no trait or similar that covers both u2 and u64?

1638986450
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
ugla: Yes

1638986499
ugla!~ugla@2001:470:69fc:105::2b5
peterhil: You can "cheat" and do `x: anytype`, which gives you basically static duck typing 

1638986500
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Or in Haskell you can use type variables or whatever those were called.

1638986532
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
ugla: I'd like to ensure the output type to be same as input or based on it, thought.

1638986534
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
though...

1638986729
ugla!~ugla@2001:470:69fc:105::2b5
Oh, well that should work. Either fn foo(comptime T: type, x: T) T, or if that doesn't work for some reason, I think fn foo(x: anytype) @TypeOf(x) should work. 

1638986739
ugla!~ugla@2001:470:69fc:105::2b5
You can do a lot with types as comptime values

1638986772
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
ugla: Oh, T needed to comptime value. I forgot...

1638986782
peterhil!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
to be..

1638997879
andrewrk!~andrewrk@mail.ziglang.org
daurnimator, motiejus: we don't use -Denable-wine on the CI. so the CI does not have test coverage of running anything in wine

