1626912036
olabian!~olabian@ool-4576796d.dyn.optonline.net
I have a variable in a function that @TypeOf(x) gives [*c]u8 but when I do return x, I get expected type '[*c]u8', found 'void'

1626912083
olabian!~olabian@ool-4576796d.dyn.optonline.net
what's going on?

1626912162
olabian!~olabian@ool-4576796d.dyn.optonline.net
oh wait I think I know the issue

1626912239
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok, I had an if statement that had the return, 

1626932096
andrewrk!~andrewrk@mail.ziglang.org
hmm, new idea, use @"" syntax for errors

1626932108
andrewrk!~andrewrk@mail.ziglang.org
return error.@"LLVM backend does not support SPIR-V";

1626937145
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: hmm, I like that

1626944389
ifreund!~ifreund@user/ifreund
+1 from me, that seems far more readable for longer errors

1626946400
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: lul, nice idea!

1626947096
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Are those error strings intended for end users or programmers? For the latter, longer strings are less convenient to match on and fixing a typo may break code depending on the string

1626947140
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Whereas keeping a typo in a non-user-visible identifier is often more acceptable

1626959572
frmdstryr!~jrm@172.58.203.68
What's the best way to switch versions between of zig?

1626960086
Ristovski!~Ristovski@hellomouse/perf/ristovski
frmdstryr: Probably just having multiple zig installations and invoking them manually

1626960527
luuk!~luuk@user/luuk
frmdstryr: Haven't used it myself, but I believe https://github.com/marler8997/zigup allows you to do this

1626960542
dutchie!~dutchie@user/dutchie
you could probably hook something together using direnv and modifying PATH

1626960558
dutchie!~dutchie@user/dutchie
i just use nix because I'm already on NixOS

1626960839
Ristovski!~Ristovski@hellomouse/perf/ristovski
luuk: does `zigup` allow invoking a specific zig version directly? it looks like one has to first set a default version and then call zig

1626960866
Ristovski!~Ristovski@hellomouse/perf/ristovski
rustup for example has 'rustup run nightly' etc

1626960947
luuk!~luuk@user/luuk
Ristovski: As I mentioned, I haven't used it myself. I'm the wrong person to ask :)

1626960980
Ristovski!~Ristovski@hellomouse/perf/ristovski
oh derp, shouldn't have mentioned you :P

1626960990
luuk!~luuk@user/luuk
Marler does visit this irc frequently not, I'm sure he can answer you :)

1626960993
luuk!~luuk@user/luuk
Haha no worries!

1626961001
luuk!~luuk@user/luuk
s/not/though

1626973387
marler8997!~marler899@204.229.3.4
Ristovski, if you use zigup you could just specify the path to the zig version you want, i.e. ~/zig/0.9.0-dev.304+177b1b6bf/files/zig 

1626973422
marler8997!~marler899@204.229.3.4
I've thought about adding a mechanism to change the version of zig in the current shell as well

1626973447
marler8997!~marler899@204.229.3.4
maybe just PATH=~/zig/THE_VERSION/files/zig:$PATH would be good enough

1626973495
marler8997!~marler899@204.229.3.4
could have zigup output that command for you, like: source zigup env VERSION

1626973520
Ristovski!~Ristovski@hellomouse/perf/ristovski
marler8997: would still be nice if one could do `zigup run [version] build` or something

1626973538
marler8997!~marler899@204.229.3.4
huh that's interesting

1626973540
Ristovski!~Ristovski@hellomouse/perf/ristovski
(`build` being args passed to the specified zig version, obviously)

1626973622
marler8997!~marler899@204.229.3.4
I'm hesistant to say it's an overall win since it doesn't seem much simpler than ~/zig/VERSION/files/zig

1626973648
Ristovski!~Ristovski@hellomouse/perf/ristovski
indeed :P

1626973651
marler8997!~marler899@204.229.3.4
it does abstract the install location away so the user doesn't need to know about it though

1626973686
Ristovski!~Ristovski@hellomouse/perf/ristovski
might be a tiny bit faster to type as well

1626973789
marler8997!~marler899@204.229.3.4
https://github.com/marler8997/zigup/issues/23

1626974944
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
is Vexu here

1626975292
ifreund!~ifreund@user/ifreund
haze: don't think I've ever seen him on IRC :/

1626975325
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yall rly gonna make me dig up my zig discord alt man

1626975334
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
screw that ill have loris do it hes the communitys servant after all

1626979139
andrewrk!~andrewrk@mail.ziglang.org
Ayo, both

1626979653
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
works for me, I can see it being especially useful in application code, where errors are more likely to be thrown directly at the user rather than pattern-matched on

1626979784
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Unrelated, but this may be interesting to some folks here, I just released a new version of ncdu... in Zig: https://dev.yorhel.nl/doc/ncdu2

1626980088
andrewrk!~andrewrk@mail.ziglang.org
neat!

1626980223
ifreund!~ifreund@user/ifreund
very nice post :)

1626980301
companion_cube!~simon@user/companion-cube
Ayo: wait, you're the author of the original ncdu as well?

1626980332
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Thanks <3

1626980334
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
companion_cube: yup

1626980357
earnestly!~earnest@user/earnestly
Ayo: Ever looked into miller columns?

1626980360
companion_cube!~simon@user/companion-cube
wow that's really cool!

1626980394
companion_cube!~simon@user/companion-cube
I've used ncdu a lot in the past few years

1626980435
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
earnestly: you're the first to suggest that. ncdu's not much of a file manager though, so not sure it'll be all that useful

1626980575
earnestly!~earnest@user/earnestly
Ayo: It does blur the line a fair bit but I agree that it fills a nice niche for just browsing files in a more visual way to assess disk usage (this is what I use it for), but miller columns tend to provide a nice amount of surrounding context when moving through trees (this is helpful to keep things in perspective when stuff like percentage use can make things look larger than they are when drilled

1626980577
earnestly!~earnest@user/earnestly
far into a directory tree)

1626980607
earnestly!~earnest@user/earnestly
Ayo: Although this isn't a feature request, just if you ever thought about them for ncdu

1626980665
earnestly!~earnest@user/earnestly
In the context of so few FMs or such implementing this way of viewing directory trees.  I can only think of ranger and one other gui based one which I forget the name of (it didn't last long)

1626980681
earnestly!~earnest@user/earnestly
Marlin, that's it

1626980691
companion_cube!~simon@user/companion-cube
it's the same kind of columns that ranger has?

1626980699
earnestly!~earnest@user/earnestly
That's exactly it, yeah

1626980711
companion_cube!~simon@user/companion-cube
ah yeah that's cool

1626980720
earnestly!~earnest@user/earnestly
OSX's finder uses it and apparently Pantheon Files

1626980807
companion_cube!~simon@user/companion-cube
I mean if we're on the "feature request" tab, maybe a big red button "delete that shit" (to complement pressing 'd') would be cathartic

1626980873
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
buttons in a TUI? blasphemy!

1626980893
companion_cube!~simon@user/companion-cube
blinking, if possible

1626980916
earnestly!~earnest@user/earnestly
I appreciate the "Don't ask me again" option

1626980918
companion_cube!~simon@user/companion-cube
when you find a cache that weights several GBs and are like "oh looks like I can fee myself some disk"

1626980927
earnestly!~earnest@user/earnestly
Use ncdu to prune lgogdownloader collections

1626980995
earnestly!~earnest@user/earnestly
Ayo: Could ncdu ever load files in the background while also prioritising the immediate directory a user descends into?  :P

1626981077
earnestly!~earnest@user/earnestly
But yeah, thanks for ncdu, it has always been very useful

1626981085
companion_cube!~simon@user/companion-cube
+1

1626981122
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
earnestly: that feature's actually mentioned in the article. it's requested pretty often but not sure I'll be able find a satisfying way to implement it.

1626981148
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
...and not something I have much of a need for myself, so that dampens the motivation :P

1626981172
earnestly!~earnest@user/earnestly
It would be a "nice to have".  Even on my old slow hdd running btrfs that would take literally minutes to load, I'd just do something else while it was spinning

1626981199
earnestly!~earnest@user/earnestly
(5 to 10 minutes)

1626981326
andrewrk!~andrewrk@mail.ziglang.org
Ayo, I'm looking forward to a few years in the future when I can look people in the eye and say yes, you can use zig in production, it is stable and ready for you

1626981583
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
andrewrk: I'm looking forward to that as well, but don't let my apology for the ncdu rewrite pressure you, I'd rather see a well polished stable release even if it takes a bit longer

1626981609
andrewrk!~andrewrk@mail.ziglang.org
me too

1626981628
andrewrk!~andrewrk@mail.ziglang.org
well, one thing at a time. the next step is self-hosted compiler

1626981680
andrewrk!~andrewrk@mail.ziglang.org
wild that it's 133,403 lines and still not done

1626982135
ifreund!~ifreund@user/ifreund
it does have a very large scope

1626982413
andrewrk!~andrewrk@mail.ziglang.org
true

1626982436
companion_cube!~simon@user/companion-cube
how much of that is dedicated to handling comptime, if it's even possible to estimate?

1626982472
andrewrk!~andrewrk@mail.ziglang.org
a tiny, insignificant fraction

1626982489
andrewrk!~andrewrk@mail.ziglang.org
it's barely a different code path than type checking

1626982506
companion_cube!~simon@user/companion-cube
but isn't that because type checking requires evaluation anyway?

1626982517
companion_cube!~simon@user/companion-cube
as in any other dependently typed languages ;)

1626982520
andrewrk!~andrewrk@mail.ziglang.org
https://clbin.com/juFUe

1626983058
companion_cube!~simon@user/companion-cube
is Sema the part that deals with that then?

1626983701
andrewrk!~andrewrk@mail.ziglang.org
yes

1626983766
andrewrk!~andrewrk@mail.ziglang.org
here is the comptime boolean not ('!') handling: https://github.com/ziglang/zig/blob/18b8738069268cc913bbae9580d2d170618a2ae9/src/Sema.zig#L5267-L5273

1626983787
andrewrk!~andrewrk@mail.ziglang.org
ooh I see a bug already, it should be allowing undefined and returning undefined in that case instead of emitting an error

1626983887
andrewrk!~andrewrk@mail.ziglang.org
these bugs got much easier to spot when I renamed value() to resolvePossiblyUndefinedValue() :)

1626984245
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
andrew uses fish? TIL

1626984605
companion_cube!~simon@user/companion-cube
very nice, it tries to reduce any `!x` to a boolean? pfiu 

1626984612
companion_cube!~simon@user/companion-cube
haze: yes, he's a man of taste

1626984730
andrewrk!~andrewrk@mail.ziglang.org
what is "pfiu"?

1626984825
andrewrk!~andrewrk@mail.ziglang.org
if you look at line 5266 (just above the highlighted lines) that will emit a compile error if the operand does not coerce to bool

1626984838
companion_cube!~simon@user/companion-cube
sorry, I mean, that's cool

1626984860
companion_cube!~simon@user/companion-cube
ah indeed

1626984869
companion_cube!~simon@user/companion-cube
so evaluation and type checking are indeed mixed.

1626984921
andrewrk!~andrewrk@mail.ziglang.org
and below the highlighted lines you can see it says via requireRuntimeBlock "if we get here, emit a compile error if this code is supposed to be evaluated at compile time, because we do not have a comptime known result"

1626984997
andrewrk!~andrewrk@mail.ziglang.org
comptime code, runtime code, and mixed comptime/runtime code are all the same. the input is ZIR, the output is AIR. if the code runs at compile time, the AIR will have no runtime instructions emitted 

1626985006
companion_cube!~simon@user/companion-cube
right.

1626985015
companion_cube!~simon@user/companion-cube
it's really partial evaluation

1626985018
andrewrk!~andrewrk@mail.ziglang.org
yep

1626994158
mountaingoat!~mountaing@user/mountaingoat
in the zig stdlib there's a handful of examples of taking a "comptime f: anytype, args: anytype", and through the args you can propagate a runtime value down to comptime code where it may ultimately be code generated and inserted (e.g. print(), spawn(), etc.)

1626994192
mountaingoat!~mountaing@user/mountaingoat
is there a more general way to either associate a runtime value with a comptime var, or somehow wrap a runtime var, so that it can be emitted in the right place in a comptime codepath?

1626994238
mountaingoat!~mountaing@user/mountaingoat
i keep running into errors that are either "cannot store runtime value in compile time variable" or can't evaluate so and so at comptime

1626994514
mountaingoat!~mountaing@user/mountaingoat
e.g. if i want to comptime generate a sequence of operations but they need different runtime vars associated with them

