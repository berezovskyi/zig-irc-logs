1615941280
Snektron
ed_t: You should probably separate parsing of the pipeline definition and running the pipeline. Integrating async into parsing seems like overengineering to me

1615943903
vent
Is there a way to define an ad-hock slice over 3 seperate variables? I have 3 strings that I want to pass into std.mem.concat().

1615944501
mipri
slices are fat pointers, not iterators, so you couldn't do that unless the three separate variables happened to refer to contiguous memory in the order you wanted

1615944616
vent
What about something like this? [_][]const u8{page_dirpath, page_basename, page_extension}

1615944665
vent
If the pointers to each []u8 are contiguous then it should okay to index right?

1615944921
vent
Perhaps if I just declare it as an array first, then pass that in.

1615945347
mipri


1615945406
oats
does this not work? concat(alloc, u8, &[_][]const u8{a, b, c})

1615945428
mipri
? that's what I'm doing in the second use there

1615945473
g-w1_
if the slices are contiginus, will var slice = .{.ptr = a.ptr, .len = a.len + b.len + c.len }; work or am i confused?

1615945501
mipri
ah, std.mem.concat just wants a slice of slices; no need for any of that talk about contiguous memory

1615945580
oats
indeed

1615945589
oats
std.mem.concat is smort

1615945650
mipri
I can't get that .{.ptr = ...} stuff to work though

1615945699
g-w1_
`var slice: []const u8 = undefined; slice.ptr = xxx; slice.len = xxx;`

1615945747
mipri
ah nice. I finally got it but still had a useless initial value

1615945793
mipri


1615945806
vent
mipri: Nice one, thanks for the code snippet. My code looked very similar already, but the type I was passing in was wrong. I was passing in []u8 when I should have been passing in u8.

1615951065
v0idify
what's a good way to have a Backend struct that can hold different things depending on the platform?

1615951193
v0idify
essentially like an interface

1615951205
v0idify
but without function pointers lol

1615951255
tdeo
how much do you expect to share between the backends?

1615951271
v0idify
basically nothing

1615951279
v0idify
actually, it depends

1615951285
tdeo
if they're not sharing much code, then you can have each struct separately and do `const Backend = if (cond) BackendA else BackendB;`

1615951314
v0idify
opengl backends that share rendering functions but not initalizations that are os dependant

1615951322
v0idify
but there might be other kinds of backends

1615951867
v0idify
oh maybe just make a single function that takes a union(enum) :/

1615953883
v0idify
is there a way to make a union(enum) and only allocate the memory required for the kind chosen?

1615953923
v0idify
without having an extra pointer ofc

1615953936
v0idify
it's for using on a SinglyLinkedList

1615953960
daurnimator
v0idify: sounds like you want a SinglyLinkedList(void) and use `@fieldParentPtr`

1615954043
v0idify
daurnimator, huh it seems like it but it confuses me? how do i know what type it is from void

1615954065
v0idify
and what is field_name

1615954074
daurnimator
v0idify: you don't: put the `SinglyLinkedList(void).Node`

1615954139
v0idify
oh that's crazy

1615954189
v0idify
hmm i'd rather not though, it wouldn't make much sense for the data structure i'm doing, is there any other way?

1615954214
v0idify
i mean, how can i figure out the type from a Node then

1615954285
v0idify
use case: linked list of draw operations (think fill rectangle with color, draw text, etc)

1615954287
tdeo
you can have a "base" struct with just an enum of which variant it is, and put that base struct in each of the variants

1615954299
tdeo
then you can have a linked list of that

1615954353
v0idify
and then call fieldParentPtr on that right?

1615954381
v0idify
but the Node would need to be a pointer to the struct

1615954398
v0idify
s/struct/enum

1615954753
tdeo
then you can have a linked list of that

1615954760
tdeo
oops

1615955007
tdeo
v0idify: here's an example

1615955187
v0idify
tdeo, yeah, it's saving a Node inside the command. i'll use that for now, thanks

1615955250
tdeo
hm, i don't understand. are you thinking of something better than this?

1615955332
v0idify
no :p

1615955354
v0idify
i'm just saying that i'd rather not have node inside the Command in the case i don't want it on a list, but it'll do for now

1615955527
tdeo
ah i see, i don't think you can do that with SinglyLinkedList easily but you can probably do it with more code

1615955645
v0idify
surely

1615955663
v0idify
when type safety + manual memory management bites you in the ass

1615955691
v0idify
C allows this easily with just the second part, Go allows this easily with just the first

1615955751
v0idify
o/ thanks so much

1615955780
tdeo
np

1615956866
aconbere
If I have an ArrayList with strings in it ArrayList([]const u8)

1615956880
aconbere
What is the type of .items? And how do I check the equality of it?

1615956888
aconbere
I'm tryin `testing.expectEqualSlices([]u8, l.items, [_][]u8{ "val1", "val2" });`

1615956899
aconbere
but the typing is all wrong haha

1615956911
aconbere
(imagine me adding many different consts to places in case that's it)

1615956943
aconbere
this is the error I get `./src/mime.zig:62:51: error: expected type '[]u8', found '*const [4:0]u8'

1615956983
aconbere
Which I read to say that the big difference is that [_][]u8{ "val1", "val2" } has pointers to the array?

1615958791
daurnimator
aconbere: you probably want `[]const u8` as the first argument.

1615958804
daurnimator
and then you'll need `&` before the `[_]`

1615958860
aconbere
interstingly that changed nothing :-D

1615958862
daurnimator
aconbere: you'll also need a `const` so you get: `&[_][]const u8{ "val1", "val2" }`

1615958973
aconbere
phew that did it

1615958986
aconbere
I had previously put in the consts because... that makes sense to me

1615958995
aconbere
but the dereference surprised me

1615959004
daurnimator
dereference?

1615959010
aconbere
"&"

1615959017
aconbere
maybe that's backwards :-|

1615959024
daurnimator
that's getting a reference; not a dereference

1615959055
aconbere
backwards

1615959055
daurnimator
Might be easier for your brain to think of `&` as the "address-of" operator

1615959145
aconbere
Thanks :)

1615959310
daurnimator
aconbere: `[_][]const u8{ "val1", "val2" }` is an

1615959361
daurnimator
aconbere: and then "pointer to some number of `[]const u8`" can coerce to "slice of `[]const u8`", which is what your `expectEqualSlices` wants

1615960885
aconbere
actually super helpful

1615960929
aconbere
Your explanation makes perfect sense, and it seems obvious in retro spect that this was about the type of the array containing the strings

1615960939
aconbere
feel like the error kinda sent me down the wrong route though :-/

1615960949
aconbere
'[]u8', found '*const [4:0]u8'

1615960967
aconbere
Why do you think the compiler was pointing to the inner strings as the issue?

1615961190
aconbere
(sorry super interested in the response but I don't have a bouncer and I have to head to bed, I'll follow up tomorrow, thanks again)

1615989433
TheLemonMan
sundbp, don't give up! you were this close to the end!

1615989676
ikskuh
I started a second attempt on the user map:

1615989696
ikskuh
This time, 100% self hosted and no restrictions on the number of markers!

1615989717
ikskuh
Contribution via Github PRs

1615989783
TheLemonMan
OSM looks pretty nice

1615989784
Nypsie
\o/

1615989879
ikskuh
TheLemonMan: yeah! and only a little bit of glue JS to Leaflet and Zig code to build the data :)

1616004045
v0idify
so the only way to make "interfaces" is with function pointers/

1616004048
v0idify
?

1616004062
ikskuh
yes, for runtime interfaces

1616004077
ikskuh
comptime interfaces can be done with generics (anytype9

1616004152
v0idify
thinking about how it would work memory-wise makes it make sense but i have thought about it with languages that hide those details for too long :)

1616004177
ikskuh


1616004185
ikskuh
this is a userland implementation made by me as a concept

1616005117
txdv
ikskuh: did you just implement interfaces with the languages itself?

1616005153
ikskuh
yep

1616005174
ikskuh
welcome to zig! where we implement language features at comptime

1616005266
yyp
^

1616005303
ikskuh
lisp at comptime? why not :D

1616005318
yyp
lisp interpreter at comptime :p

1616005346
ikskuh
well, i made a small comptime forth that can do peer type resolution :D

1616005356
g-w1
i was thinking of how lisp also advertizes stuff like classes implemented in macros

1616005386
yyp
In Zig we just s/macros/comptime and do the same thing

1616005387
txdv
ikskuh:

1616005423
ikskuh


1616005428
companion_cube
lisp has comptime, it just doesn't really have types

1616005643
yyp
Lisp doesn't have types?

1616005716
ifreund
janet even has a comptime keyword

1616005720
ifreund
or macro, sorry

1616005827
yyp
janet?

1616005829
companion_cube
yyp: well, not static types anyway

1616005839
companion_cube
lisp macros are just comptime stuff

1616005848
companion_cube
but they work on `AST -> AST`, rather than partial evaluation

1616005854
ifreund
yyp:

1616005880
yyp
ifreund: thanks!

1616005932
ifreund
companion_cube: I'm no expert on lisps, but janet at least does let you evaluate things at compile time

1616005963
yyp
AST -> AST feels like what Rust macros allow

1616005974
companion_cube
ifreund: all of them always did, yes

1616005978
ifreund
rust doesn't have quoting

1616005979
companion_cube
that's what macros are about

1616006001
yyp
What quoting?

1616006002
companion_cube
ifreund: rust procedural macros take the AST, so why would they need quoting

1616006010
yyp
^

1616006052
ifreund
which means you need to learn a separate macro language, unlike with lisp

1616006062
companion_cube
sure, it's a lot more work to write these, yes

1616006077
txdv
wait, is zig the next lisp?

1616006096
companion_cube
if that means zig gets the lisp curse, hopefully not

1616006099
ifreund
zig's not a lisp, but some of its features correlate loosly to some nice things about lisps

1616006115
txdv
if you allow people to do something in the language, they will do it

1616006123
companion_cube
I think D's comptime is a lot closer to zig's

1616006127
yyp
ifreund: yep, having to learn another language for macros is quite annoying

1616006129
txdv
its a law, if it is expressible, they will do it

1616006204
ifreund
companion_cube: probably, but D looks way too kitchen sink for me to invest any more time looking at it

1616006270
yyp
Checked some D examples, it has exceptions, not interested

1616006303
ifreund
and GC

1616006309
yyp
even worse

1616006311
ifreund
and I think a borrow checker too now?

1616006323
ifreund
and C++ ABI compat of some kind

1616006351
companion_cube
it was designed as a C++ replacement, so yeah, it's big

1616006372
yyp
C++ replacement doesn't need to have exceptions and GC

1616006386
yyp
¯\_(ツ)_/¯

1616006396
companion_cube
it's from the late 90s/early 00s, exceptions were the least of evils

1616006408
ifreund
zig is a fantastic C++ replacement because it makes different design descisions instead of repeating the same mistakes

1616006409
companion_cube
the GC is because it helps with memory safety

1616006423
ifreund
Rust is also quite a good C++ replacement in some cases

1616006432
companion_cube
ifreund: I'm not sure zig is a good C++ replacement

1616006444
companion_cube
if C++ programmers can dismiss it with "there's no RAII"

1616006457
companion_cube
the same way Go was suppoesd to be a C++ replacement and was laughed out of the room

1616006463
companion_cube
(with reason, tbh)

1616006481
yyp
Go was supposed to be a C replacement

1616006491
ifreund
not seriously, it has a GC

1616006502
companion_cube
oh actually at the beginning they thought it'd attract the C++ crowd

1616006509
companion_cube
you have talks where they say that

1616006516
yyp
Blame Plan9 guys then

1616006516
companion_cube
showing they didn't get what people use C++ for

1616006517
aconbere
I just see Go as the C author's mulligan

1616006520
aconbere
do overs!

1616006572
aconbere
Like regardless of who they thought it would attact and what languages they thought it might replace. It just feels like ... they wrote it.

1616006588
ifreund
companion_cube: compared to Go, Zig is a far better C++ replacement, having super powerful/flexible generics that can replace all that template metaprogramming as well as no runtime or GC overhead

1616006640
ifreund
infact, I'm going to predict that C++ gets types as first class values in constexpr scopes sometime in the next 20 years

1616006652
companion_cube
ifreund: I'd say it's halfway there

1616006663
ifreund
indeed, though not 100%

1616006664
companion_cube
no RAII will rebuke most C++ programmers

1616006674
ifreund
oh you're talking about the first thing I said

1616006706
yyp
RAII seems like a bad idea anyway

1616006727
companion_cube
seems like a good idea to me, it's even one of the few things rust salvaged from C++

1616006736
TheLemonMan
lol

1616006767
aconbere
Today seems to be the day in which I conqure Readers / Generics

1616006769
aconbere
Wish me luck

1616006811
txdv
isn't defer the equivalent of raii?

1616006815
companion_cube
no

1616006825
companion_cube
defer doesn't compose with generics in the same way

1616006826
txdv
can you give me an example why not

1616006840
ifreund
no, and thank god it isn't

1616006853
companion_cube
let's say you have, in rust, a Vec<Foo> where Foo contains stuff with destructors (like a hashmap, a socket, etc.)

1616006855
ifreund
raii needs move semantics and a whole bunch of other complexity

1616006871
companion_cube
`Vec.clear the_vec` will automatically clear resources

1616006887
companion_cube
defer is more explicit but only for scope allocated resources

1616006930
companion_cube
ifreund: yeah, and RAII typically needs some sort of specialization for the (fast) case where there's no destructors

1616006959
companion_cube
it can be done by hand of course, but the "clear a vector of Copy types" needs some kind of optimization to recognize it has nothing to do

1616006997
yyp
Maybe RAII is not actually that bad and I misunderstood what it does, but still I think that Zig does better since everything is explicit instead of hiding a free() with ~Object

1616007064
yyp
Just that acronym is confusing

1616007065
companion_cube
yyp: imho the value of RAII is that it composes well. Doing stuff manually means you need to pass `free` as parameters in many cases

1616007066
earnestly
TheLemonMan: Have you rewritten lemonbar in zig yet? :p

1616007077
companion_cube
(or do something else, but anyway)

1616007101
earnestly
raii(composes(well)));

1616007144
TheLemonMan
earnestly, it's pretty far in the todo list heh

1616007155
yyp
companion_cube: no, at least not with Zig since allocated objects store an allocator within themselves and then you can just defer thing.deinit(); or something

1616007156
earnestly
It's the first thing I remember you making

1616007211
TheLemonMan
my very first linux program!

1616007237
TheLemonMan
everything went downhill from there on

1616007248
yyp
Now I want to make Wayland version of lemonbar..

1616007277
TheLemonMan
oh, I also contributed to companion_cube ocaml-containers

1616007318
TheLemonMan
damn, the GH repo list is a trip down  memory lane

1616007467
txdv
companion_cube: can you show off the composition of raii in an example in your favorite language?

1616007737
companion_cube
yyp: yeah if you allocate everything in allocator it's a different story

1616007848
companion_cube
txdv: well, in rust :)

1616007865
companion_cube
it does indeed require move semantics to work cleanly

1616007886
companion_cube
you can also have interesting examples with Arc<T>, locks, etc. (refcounting is an area where it's also super useful)

1616008416
txdv
How would you implement this in zig (without the raii aspect)?

1616008538
companion_cube
nested std.ArrayList I guess, but you need to defer either the destruction of v2, or to clear v's elements before destroying it

1616008563
companion_cube
of course you can also shove everything into a local allocator :p

1616008597
ifreund
do you mean a local arena?

1616008626
ifreund
that's not great with the way growable arrays allocate

1616008672
ifreund
to do this in Zig, I'd use ArrayListUnmanaged for the nested elements

1616008701
ifreund
the deinit is just 2 lines: for (foo.items) |child_list| child.list.deinit(); foo.deinit();

1616009157
mikdusan
andrewrk: can you eyeball #8265. I'd like to get this in, then adopt the same approach for llvm12 branch macos-arm64, and shift llvm12 macos-x86_64 to build x86_64 host using a xcode-based bootstrap tarball

1616009185
txdv
I think that zig wants to tell you that there is a lot more going on, that there is something allocating memory

1616009213
mikdusan
this way we're ready for llvm12. and if/when zig-bootstrap can build artifact, then we can switch. but I'd like a working thing now

1616009245
companion_cube
txdv: yes, zig is more explicit, we all agree

1616009259
txdv
{ let v2 = vec![1,2,3]; v.push(v2) } // this is just v2 = [1,2,3,4]// and since nobody uses this is optimized away

1616009268
mikdusan
also what happens if llvm12 continuous integration succeeds? I don't see any logic to prevent tarball posting if branch != master

1616009329
txdv
Most of the languages just overdo it with the "I will do this without you knowing it", zig tries to show it in the language what is happening

1616009358
mikdusan
^^ scratch my last comment. I see condition now in pipelines.yml

1616009415
companion_cube
txdv: I mean, in rust, you know it; but it's automatic like stack allocation or other things

1616009630
txdv
can you show me an exampe in rust where rust invokes an external library(written and c) and then uses raii to cleanup?

1616009639
txdv
This where where zig shines

1616009766
TheLemonMan
just wrap the C object in a new type and implement the drop trait for that

1616009787
TheLemonMan
you can't forget a drop but you can forget a defer

1616009953
yyp
Since zig has translate-c, maybe it would have something like translate-h which takes a header file and generates externs for it

1616009986
g-w1
thats what translate-c does

1616010029
yyp
It tries to translate actual C code

1616010074
g-w1
headers are actual c code; thats exactly how cimport works

1616010082
yyp
And sometimes throws @compileError("unable to translate function") for non-trivial functions

1616010117
yyp
I want to know the types that C function takes and translate-c fails on my function of interest

1616010126
yyp
s/types/types of parameters

1616010185
companion_cube
txdv: looking for an old blog post -_-

1616010201
companion_cube
C bindings are clearly not as easy in rust, but you can still wrap stuff easily

1616010218
companion_cube
like TheLemonMan said

1616010331
yyp
are they?

1616010459
yyp
ah, nevermind, translate-c works with header files too

1616011080
andrewrk
yyp, that's the main use case :)

1616011189
ifreund
nice rust bindings for libwayland have proved very hard, and rust bindings for wlroots have been abandoned after over a year of work

1616011194
ifreund
it's not always easy

1616011218
yyp
Now another problem, C function accepts [*c][*c]u8, how can I convert a normal array like [_][]u8{ "hello" } to that?

1616011250
ifreund
yyp: does C want one or both of those pointers to be null terminated?

1616011289
yyp
I guess only the second one, but [*c][*c]const u8 is what translate-c gives

1616011318
ifreund
indeed, translate-c is only aware of what is encoded in C's type system which is not much

1616011343
ifreund
you need to read the documentation of the C library or the code to know what it expects for sure

1616011359
yyp
This is what I found in the header file: const char *names[1]

1616011406
ifreund
&[_][*:0]const u8{"hello"} should work

1616011657
yyp
sentinel-terminated pointers possible with C calling convention? [*c:0] didn't work

1616011665
yyp
Are *

1616011702
g-w1
yes they are

1616011709
yyp
What's the syntax then?

1616011832
yyp
Or maybe it doesn't change, nevermind

1616011922
yyp
ifreund: &[_][*:0]const u8{"stuff"} didn't work, expected type '[*c][*:0]const u8', found '*const [1][*:0]const u8'

1616011955
ifreund
ah yeah, it has to be mutable

1616011982
yyp
If you remove the &, Zig couldn't find array type

1616011984
ifreund
so make a var foo = [_][*:0]const u8{"hello"}; and pass a pointer to that

1616012032
yyp
It finally compiled! Thank you, ifreund!

1616012036
ifreund
yyp: all pointers types have the same ABI and may be arguments of callconv(.C) functions

1616012051
ifreund
[*c] should never be used outside of

1616012129
yyp
Wait, when all pointer types have the same ABI is there a reason for [*c] to exist?

1616012138
yyp
Even in autogenerated code

1616012883
aconbere
`index 0 incorrect. expected { 118, 97, 108, 49 }, found { 118, 97, 108, 49 }`

1616012886
aconbere
:thinking:

1616012896
aconbere
so those two look the same to me :)

1616012981
ifreund
yyp: yes, because translate-c will never be smart enough to map c pointers to zig's more finely grained pointer types

1616013016
yyp
aconbere: wait that's illegal

1616013099
yyp
Maybe that's something weird with the arrays themselves

1616013489
ifreund
aconbere: would need to see code to spot the bug :P

1616014782
aconbere
okay... I'm embarassed to post this but here it goes

1616014784
aconbere


1616014796
aconbere
this is what raises that panic

1616015404
aconbere
ifreund: ^

1616015581
TheLemonMan
aconbere, you are comparing the slices .ptr and .len contents

1616015596
TheLemonMan
in other words expectEqualSlices is shallow

1616016642
aconbere
hmm once again I feel myself bumping up against my understanding of zig's type system and memory :-/

1616016671
aconbere
If I just pop out of my arraylist     testing.expectEqual(l.pop(), "val1");

1616016692
aconbere
I get expected slice ptr u8@7f09512ef00c, found u8@204a92

1616016706
aconbere
oh, I should be using expectEqualSlice

1616016712
aconbere
since these are also slices :P

1616016937
aconbere
All i have left now is a memory leak hahaha

1616017117
aconbere
I /think/ what's happening is I'm dupe'ing a slice to act as a key to a hashmap

1616017121
aconbere
and that it's not getting free'd

1616018502
aconbere
mpf

1616019462
aconbere
okay I have to stop staring at this lol

1616019488
ifreund
lol:

1616019516
ifreund
aconbere: I'm here now, are you still on the same issue/is that code link still current?

1616019528
aconbere
ifreund: let me push up the latest changes

1616019632
aconbere
cool

1616019640
aconbere
from the latest commit if you run `zig test src/mime.zig`

1616019647
aconbere
you'll see a bunch of memory leaks :)

1616019667
aconbere
and I'm pretty confident about why

1616019679
aconbere


1616019708
aconbere
In this section my intent is to grab some data out of my buffer, and use them as keys and values in a hash map

1616019726
aconbere
If I naivly pass the slice to the hashmap the underlying bytes change that's no good

1616019730
aconbere
so I reached for dupe

1616019743
aconbere
now I'm responsible for free'ing that allocated memory as I understand it

1616019754
aconbere
but when I try to free it in deinit I get segfaults

1616019767
aconbere


1616019786
aconbere
(so if I wrote self.allocator.free(entry.key) there it segfaults)

1616019802
aconbere
Per usual, I assume my understanding of zig is just... too limited

1616019862
ifreund
aconbere: you are allocating a new key even when the key already exists in the hash map

1616019886
ifreund
I'd recommend using getOrPut here and only allocating the key if an existing entry is not found

1616019916
aconbere
ahhhhhh

1616019918
aconbere
interesting!

1616019931
ifreund
example here actually:

1616019980
ifreund
and fwiw your understanding of Zig seems to be fine at this point, it's just maunal memory management you need to get used to :P

1616020127
ifreund
by the way, have you seen

1616020166
aconbere
Wild, I was wondering why some of the functions on HashMap existed and it makes more sense now

1616020190
ifreund
also

1616020204
aconbere
:)

1616020215
aconbere
But those things wont help me learn how to write simple parsers in zig

1616020231
ifreund
getOrPut() is also more efficient as you only hash the key once

1616020280
ifreund
aconbere: oh I'm not saying you shouldn't write your own, just giving examples of how others have solved similar issues :D

1616020425
aconbere
ah! I hadn't yet

1616021225
aconbere
"All 3 tests passed."

1616021236
aconbere
cool, that was a good lesson, thanks

1616021271
ifreund
no problem!

1616022101
aconbere
I totally had my rust hat on writing that

1616022114
aconbere
This was a new way of thinking about it that I had to adjust to

1616022203
aconbere
Which concisely I guess was me expecting the compiler to deal with cleaning up my unneeded allocation for me or wisely copy

1616022208
aconbere
fun

