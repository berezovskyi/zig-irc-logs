1627815026
siraben!~siraben@user/siraben
 Levy (Elara): it's a libera room bridged to matrix

1627825833
Ristovski!~Ristovski@hellomouse/perf/ristovski
Can one not iterate KVs of a StringHashMap with a regular .iterator()? I have one key - value pair in it, but iterating over it with a .iterator() starts dumping a lot of unused/bogus entries until I get a segfault.

1627826024
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can do

1627826034
ikskuh!~xq@2a0d:5940:6:163::ad7e
but note that you have to store the string values somewhere

1627826057
ikskuh!~xq@2a0d:5940:6:163::ad7e
the keys in a StringHashMap are not contained in the hashmap

1627826142
ikskuh!~xq@2a0d:5940:6:163::ad7e
this might be happening in your case

1627826244
Ristovski!~Ristovski@hellomouse/perf/ristovski
ikskuh: hmm, I am keeping the StringHashMap in a `const Blah = Struct{}`, and the struct also contains a function that accesses the iterator

1627826273
Ristovski!~Ristovski@hellomouse/perf/ristovski
oddly enough, I cant replicate with a minimal sample. More debugging it is!

1627826297
ikskuh!~xq@2a0d:5940:6:163::ad7e
that's not what i meant

1627826497
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://zig.godbolt.org/z/h7aPaMavq

1627826498
ikskuh!~xq@2a0d:5940:6:163::ad7e
see this

1627827391
Ristovski!~Ristovski@hellomouse/perf/ristovski
ikskuh: Aah, I see!

1627834005
Ristovski!~Ristovski@hellomouse/perf/ristovski
How would one implement a multimap in Zig?

1627836031
companion_cube!~simon@user/companion-cube
Maybe a btree? 

1627836364
viashimo!~viashimo@user/viashimo
I'm encountering a problem where the value of a pointer passed to a function is different inside the function than in the caller and I don't understand what I'm doing wrong. I haven't been able to make a simpler case that fails, so here's the relevant code and output: https://zigbin.io/1f549e

1627838068
viashimo!~viashimo@user/viashimo
ah ha, it only happens when evented io is being used

1627843480
Ristovski!~Ristovski@hellomouse/perf/ristovski
Is there a way to get the number of items in an ArrayList that had its capacity set via ensureTotalCapacity?

1627844425
andrewrk!~andrewrk@mail.ziglang.org
Ristovski, no; that data is not stored

1627844464
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: Ah, bummer :/ Any other similar data structure that has that? 

1627844478
Ristovski!~Ristovski@hellomouse/perf/ristovski
looking through the std, can't really find anything though

1627844499
andrewrk!~andrewrk@mail.ziglang.org
why do you need that?

1627844546
andrewrk!~andrewrk@mail.ziglang.org
you can access an ArrayList's capacity via the capacity field. however it may return a number greater than the last call to ensureTotalCapacity

1627844630
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: I initially wanted to to do something like `if (arrlist.capacity >=10) {_ = arrlist.pop();}`, to have a constant-size list (getting rid of the oldest entry)

1627844644
Ristovski!~Ristovski@hellomouse/perf/ristovski
but indeed, capacity != num of items present

1627844665
andrewrk!~andrewrk@mail.ziglang.org
I bet what you actually need is toOwnedSlice()

1627844690
andrewrk!~andrewrk@mail.ziglang.org
and you probably need to divide your struct into a "work-in-progress" struct which has an array list, and a "finished" struct which has a slice

1627844735
Ristovski!~Ristovski@hellomouse/perf/ristovski
Mhm, I see

1627844760
andrewrk!~andrewrk@mail.ziglang.org
I've found this pattern to greatly improve maintainability and type safety of a codebase

1627844902
andrewrk!~andrewrk@mail.ziglang.org
and perf/memory usage

1627857365
andrewrk!~andrewrk@mail.ziglang.org
hmm I wonder how to implement comptime @truncate in terms of the std.math.big.int api

1627857423
andrewrk!~andrewrk@mail.ziglang.org
probably make a mask and bitAnd

1627858746
dch!sid1310@couchdb/committer/dch
i have some zig code which I build with `-Dtarget=x86_64-native -Dcpu=atom` for the target h/w

1627858772
dch!sid1310@couchdb/committer/dch
how does that relate to the output of `zig targets | jq .native` for example?

1627858821
dch!sid1310@couchdb/committer/dch
i.e. given output of zig targets, how can I work out what the appropriate `-Dcpu=...` etc need to be?

1627859067
dch!sid1310@couchdb/committer/dch
on the atom cpu, it reports arch:cpu as x86_64 & silvermont, and on the arm64 cpu as aarch64/generic

1627859242
andrewrk!~andrewrk@mail.ziglang.org
dch, cpuname+featuretoadd1+featuretoadd2-featuretosubtract1-featuretosubtract2

1627859276
andrewrk!~andrewrk@mail.ziglang.org
e.g. `-Dcpu=silvermont`

1627859491
dch!sid1310@couchdb/committer/dch
andrewrk: thanks! aah ok, so instead of the more generic atom I could have used the specific output of zig target.

1627859492
dch!sid1310@couchdb/committer/dch
cool

1627859523
dch!sid1310@couchdb/committer/dch
I tried `-Dtarget=aarch64-native -Dcpu=generic` which works perfectly, I was just curious if I could avoid guessing it next time

1627859527
andrewrk!~andrewrk@mail.ziglang.org
dch, in case you're not aware, if you don't specify a target at all, it uses the native target

1627859600
dch!sid1310@couchdb/committer/dch
andrewrk: yeah that works, but I am building this in a freebsd ports build farm and then shipping it out. the dinky atom processors can't handle the default x86_64 zig binaries, and the aarch64 boxes need a different invocation

1627859624
andrewrk!~andrewrk@mail.ziglang.org
got it. fwiw 0.8.1 will have baseline x86_64 which should address this problem

1627860118
dch!sid1310@couchdb/committer/dch
\o/

1627862206
viashimo!~viashimo@user/viashimo
what does error: unable to evaluate constant expression mean?

