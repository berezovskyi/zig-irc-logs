1629159529
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice work on the compiler everyone!

1629163683
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh nice 10k stars

1629189376
ifreund!~ifreund@user/ifreund
Nulo: you're looking for the socket() syscall, to which you can pass the AF_UNIX domain

1629189391
ifreund!~ifreund@user/ifreund
see the socket(2) and unix(7) man pages

1629189422
ifreund!~ifreund@user/ifreund
and to call it from zig, std.os.socket()

1629193416
jacoscaz!uid512194@id-512194.tinside.irccloud.com
Hi all! I'm experimenting with `std.fs.Watch` and getting a) few errors in the standard library and b) an ominous `broken LLVM module found` error. My code is https://pastebin.com/c6FCR9ms, which I haven't managed to test yet. Tweaking the `lib/std/fs/watch.zig` file as per patch https://pastebin.com/vpjPE8iZ has apparently sorted the errors I was getting and gotten me to code generation but now I'm stuck with 

1629193416
jacoscaz!uid512194@id-512194.tinside.irccloud.com
https://pastebin.com/uFh0Lw4D. All this said, two questions: 1) do the tweaks to the standard library make sense? 2) Is the `broken LLVM module found` error worth reporting? I am very new to Zig and thought I'd ask here first before polluting the issue tracker.

1629193850
jacoscaz!uid512194@id-512194.tinside.irccloud.com
Ah, never mind, this seems to be related to whether `pub const io_mode = .evented;` is added in the code or not.

1629198412
cCCCCcccccCCc!~crystal@user/ccccccccccccc
I must have missed a change? "switch (@intToEnum(c.SoundIoError, err))" now results in "error: expected enum, found type 'c_uint'"

1629198474
cCCCCcccccCCc!~crystal@user/ccccccccccccc
This is on 0.9.0-dev.804+4c9d41730

1629198631
ifreund!~ifreund@user/ifreund
cCCCCcccccCCc: C enums are now translated by translate-c to integer constants instead of actual zig enums

1629198685
ifreund!~ifreund@user/ifreund
this is because extern (as well as packed) enums have been removed

1629198713
ifreund!~ifreund@user/ifreund
instead, enums simply have the same memory layout as their backing integer

1629199534
cCCCCcccccCCc!~crystal@user/ccccccccccccc
ifreund: I found the related issue (#2115). I will just deal with it then. Thanks!

1629199615
ifreund!~ifreund@user/ifreund
no problem!

1629205268
amine!~aminechik@li449-221.members.linode.com
noam oh playing with a toy bootloader :D Just for learning

1629226776
yaymukund!~yaymukund@user/yaymukund
hello, I have a basic question. I'm just reading about async in zig. Is there a way to mark a function as `async`-only. That is, can you detect within a function if it's being invoked asynchronously and if so, throw an error?

1629226901
ifreund!~ifreund@user/ifreund
yaymukund: you can use the .Async calling convention to mark a function as "async only"

1629226901
bfredl1!~bfredl@2001:470:69fc:105::183
You can force the async calling convention, but not sure that does what you want.

1629226913
bfredl1!~bfredl@2001:470:69fc:105::183
What's the usecase?

1629226915
yaymukund!~yaymukund@user/yaymukund
err, sorry, if you can detect whether it's being invoked *synchronously and if so, throw na error

1629226951
yaymukund!~yaymukund@user/yaymukund
this is more just curiosity about the language. I'm imagining use-cases where an algorithm will deadlock if you naively run it synchronously

1629226970
yaymukund!~yaymukund@user/yaymukund
i say i'm imagining - i do not have a neat example off the top of my head or i'd share it :p

1629227001
yaymukund!~yaymukund@user/yaymukund
thank you though. zig looks v cool (:

1629227036
ifreund!~ifreund@user/ifreund
that use case seems better solved through documentation

1629227045
ifreund!~ifreund@user/ifreund
there's no way to detect that at runtime afaik

1629227067
bfredl1!~bfredl@2001:470:69fc:105::183
You could immediately await an async frame anyway

1629227072
ifreund!~ifreund@user/ifreund
^

1629227096
yaymukund!~yaymukund@user/yaymukund
despite the convention? I see

1629227147
ifreund!~ifreund@user/ifreund
async in zig is just a way to suspend and resume functions 

1629227195
ifreund!~ifreund@user/ifreund
event loops and concurrency are built on top of the async primitives the language provides

1629228320
ifreund!~ifreund@user/ifreund
that was a nice big netsplit

1629228373
ikskuh!~xq@2a0d:5940:6:163::ad7e
not really :D

1629228377
ikskuh!~xq@2a0d:5940:6:163::ad7e
only two people

1629228526
ifreund!~ifreund@user/ifreund
more like 200 on my side

