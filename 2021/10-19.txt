1634602568
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/3206

1634602991
marler8997!~marler899@204.229.3.4
the worst part is, if the scripts actually did what the documentation said it would do then it wouldn't be so bad

1634603602
andrewrk!~andrewrk@mail.ziglang.org
oof

1634604036
tgschultz!UserNick@047-034-058-084.res.spectrum.com
bad documentation is often worse than no documentation

1634604125
marler8997!~marler899@204.229.3.4
I think the biggest problem is that the guy who created the GNU linker liked to be clever.  Rather than requiring the script to specify everything and be explicit, he probably thought it was cute to try and figure out what the user wanted, and then never documented all the cute things he did to *make people's lives easier*

1634604213
marler8997!~marler899@204.229.3.4
Because you know, we're all writing linker scripts all the time and it's going to save developer's so much time when they don't need to type so much into their linker scripts

1634604240
andrewrk!~andrewrk@mail.ziglang.org
ha

1634637477
flux_control!~flux@sourcemage/wizard/flux
marler8997: Sadly I've found a lot of the GNU stuff is like that. And now, because it was the only game in town for so long (in the portable/embedded world), it's become so prevalent that everyone else is expected to match them bug-for-bug without even knowing what all those bugs are...

1634645836
cursey!~cursey@user/cursey
is there like, a standard way people are consuming C API calls that return error codes and converting them to a zig error set?

1634646195
daurnimator!~daurnimat@vultr.daurnimator.com
cursey: not really? essentially enumerate the return codes of a C api and expand them into zig errors. `switch(res) { .ERR_BLAH => return error.Blah, .ERR_FLOOB => return error.Floob, ....... }`

1634646272
cursey!~cursey@user/cursey
i basically created a function to do that so now i just `try handleErr(c.some_c_api(...))` and was wondering if that would look out of place since i'm new to zig

1634646340
cursey!~cursey@user/cursey
since every function returns the same error enum in the c api

1634647330
daurnimator!~daurnimat@vultr.daurnimator.com
cursey: they shouldn't all return the same error

1634647340
daurnimator!~daurnimat@vultr.daurnimator.com
cursey: usually every function can only return a subset of possible error codes

1634648343
ifreund!~ifreund@user/ifreund
the problem is that such C API's seldom document which subset is possible

1634648848
cursey!~cursey@user/cursey
yeah, it's not documented which subset each function may return and i don't care enough to wade through the source code to figure it out

1634648894
cursey!~cursey@user/cursey
i was just wondering if there was a conventional way to handle error codes from C APIs that i may have missed

1634649947
flux_control!~flux@sourcemage/wizard/flux
cursey: Considering that different functions can also effectively return the same error as different values (a file access error as a #define'd EACCESS or as some negative number when returning a pointer otherwise, for example), it's not possible to do it in a straightforward manner.

1634650025
flux_control!~flux@sourcemage/wizard/flux
And that's if they even define what the actual error is. Some APIs may abuse a single error code to cover whole ranges of errors.

1634650089
flux_control!~flux@sourcemage/wizard/flux
Also, some C APIs don't actually return an error code at all, but (ab)use the global error variable that you then have to check (and clear) separately.

1634681243
cursey!~cursey@user/cursey
whats the established norm for explicitly specifying the returning error union type vs not specifying it (eg `fn foo() FooError!void` vs `fn foo() !void`)?

1634682569
andrewrk!~andrewrk@mail.ziglang.org
cursey, it's generally a good idea to make it explicit in your public APIs

1634682580
andrewrk!~andrewrk@mail.ziglang.org
for "helper functions" it's generally nicer to leave it inferred

1634683086
cursey!~cursey@user/cursey
yeah that's what i've been doing. good to know i was on the right track

1634683100
cursey!~cursey@user/cursey
thanks

