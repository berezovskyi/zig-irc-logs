1637370071
dfrey!~dfrey@172.103.152.101
I'm new to zig and I'm trying to wrap my head around arrays vs slices vs single pointers vs many pointers. Say I have an enum like this: const Dir = enum { up, down, }; and I want to write a function that gives a string representation of the enum value for some simple debugging. I expect the function to look like this: fn dirToStr(dir: Dir) ??? { return switch (dir) { Dir.up => "up", Dir.down =>

1637370073
dfrey!~dfrey@172.103.152.101
"down", else => unreachable, };  What should the return type of the function be?  Or is my function wrong?

1637370276
viashimo!~viashimo@user/viashimo
dfrey: I think the return type from what you've described will be: !*const []u8

1637370320
viashimo!~viashimo@user/viashimo
string literals are stored in non-modifiable memory (at least how I have it in my mental model) so you are returning a pointer to a constant (unchangeable) bit of memory which is a slice of of u8

1637370371
ugla!~ugla@2001:470:69fc:105::2b5
dfrey: the return type could be `[:0]const u8`, a 0-terminated slice of u8s, and if that's something you need and not just an example, there's `@tagName(dir)` for that.

1637372811
flux_control!~flux@sourcemage/wizard/flux
dfrey: Since you also mentioned trying to understand arrays etc., array = pointer plus invariable length, slice = pointer plus variable length, single pointer = pointer to single object (no length), many pointer = pointer plus unknown length.

1637373804
andrewrk!~andrewrk@mail.ziglang.org
dfrey, ugla is correct. the other suggestions are incorrect

1637448068
andrewrk!~andrewrk@mail.ziglang.org
marler8997, I was thinking, what if build.zig declaratively advertised what zig version(s) the project supported

1637448102
andrewrk!~andrewrk@mail.ziglang.org
then if you had an IDE, you could open up a project, and it could have the code to obtain the correct compiler version / zls or whatever else

1637448119
andrewrk!~andrewrk@mail.ziglang.org
zero config IDE

1637448154
andrewrk!~andrewrk@mail.ziglang.org
it would also let you do something like `zigup build`

1637448182
flux_control!~flux@sourcemage/wizard/flux
Turning zig into rust?

1637448184
flux_control!~flux@sourcemage/wizard/flux
ACTION ducks

1637448224
andrewrk!~andrewrk@mail.ziglang.org
ah yes, the thing rust is most known for: putting the supported rust versions into Cargo.toml /s

1637448230
andrewrk!~andrewrk@mail.ziglang.org
is that even a thing?

1637448296
flux_control!~flux@sourcemage/wizard/flux
andrewrk: Ideally the version wouldn't matter once the language is stable though, right?

1637448329
flux_control!~flux@sourcemage/wizard/flux
A stable language would mean alternative compiler implementations would also be possible.

1637448357
andrewrk!~andrewrk@mail.ziglang.org
that's the goal, however there tend to be exceptions

1637448365
flux_control!~flux@sourcemage/wizard/flux
Sure

1637448373
andrewrk!~andrewrk@mail.ziglang.org
there is also the time period before 1.0

1637448385
flux_control!~flux@sourcemage/wizard/flux
But if that's the goal, I feel relying on specific versions is only going to lead away from it

1637448405
andrewrk!~andrewrk@mail.ziglang.org
I agree that is an important consideration

1637452442
anddam!~anddam@user/anddam
howdy

