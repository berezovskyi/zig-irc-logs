1635123376
violet!~vi@user/violet
hi there! i just downloaded the i386 build of zig 0.8.1 and generated the hello world with `zig init-exe`, but `zig build` or `zig build run` segfault

1635123404
violet!~vi@user/violet
and i dont really know how to debug this

1635123497
violet!~vi@user/violet
i don't know if older builds work ive never tried zig on 32bit x86 before

1635123808
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: I am getting thourougly confused with the ** and ++ at runtime pr. I have pushed what I have, I think I am close, but there are some things that confuse me a lot, and I am getting very frustrated. If you want to finish it out, go for it, otherwise, I will close it.

1635123834
andrewrk!~andrewrk@mail.ziglang.org
thanks g-w1, I'd be happy to take it from here

1635123858
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
thanks so much!

1635124548
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I think the main things left are: fixing a weird bitcast regression that popped up when I rebased and implementing memset in the llvm backend for non-u8 values

1635141327
andrewrk!~andrewrk@mail.ziglang.org
noted

1635172069
kiedtl!~kiedtl@kisslinux/kiedtl
Apologies if I've asked before ( I think I might have...), but why does Zig use UTF-8 for strings instead of UTF-32?

1635172296
ifreund!~ifreund@user/ifreund
backwards compat with ascii is a pretty solid reason

1635172305
ifreund!~ifreund@user/ifreund
what even uses UTF-32?

1635172649
companion_cube!~simon@user/companion-cube
utf-32 is an awful waste of space

1635173091
ifreund!~ifreund@user/ifreund
companion_cube: it can be useful in text rendering, e.g. when writing a terminal emulator that needs to render a grid of text

1635173099
ifreund!~ifreund@user/ifreund
but it doesn

1635173117
ifreund!~ifreund@user/ifreund
doesn't seem nearly as suitable for general use as UTF-8 to me

1635173146
tgschultz!UserNick@047-034-058-084.res.spectrum.com
is it really better in that case? codepoint != character, so it isn't obvious to me that it helps that much.

1635173972
companion_cube!~simon@user/companion-cube
Iirc there are also functions to compute the display width of a grapheme cluster

1635174128
companion_cube!~simon@user/companion-cube
wcwidth()

1635174138
companion_cube!~simon@user/companion-cube
but not sure it handles unicode fully

1635177172
kiedtl!~kiedtl@kisslinux/kiedtl
companion_cube: wcwidth just calculates the width of individual codepoints, not a grapheme cluster

1635177210
companion_cube!~simon@user/companion-cube
yes, I'm not sure there's a good standard way to do that

1635177212
companion_cube!~simon@user/companion-cube
rendering is hard

1635179479
Tekk!~tekk@static-198-54-129-61.cust.tzulo.com
companion_cube, because it's impossible, I'm pretty sure.

1635179524
companion_cube!~simon@user/companion-cube
could be why weechat doesn't like combined emojis, actually

1635179541
Tekk!~tekk@static-198-54-129-61.cust.tzulo.com
I can't recall any examples but I believe there's ambiguity there with languages that share stuff with an identical visual representation.

1635179570
Tekk!~tekk@static-198-54-129-61.cust.tzulo.com
It also runs into issues with stuff like arabic where "letters" radically change their form based on what's around them.

1635184873
andrewrk!~andrewrk@mail.ziglang.org
even if you need to decode into codepoints for some kind of graphical display reason, you might still be better off leaving strings encoded as utf8 and "querying" them by decoding on the fly, for cpu cache perf reasons

