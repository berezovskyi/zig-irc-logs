1632715680
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Hmm, that "pub usingnamespace if (foo) struct { export fn main() noreturn {...}};" trick didn't actually work. It still throws an "exported symbol collision" error.

1632733158
ifreund!~ifreund@user/ifreund
leeward: oh, for an export you'd need to use @export() in a comptime block instead I believe

1632733174
ifreund!~ifreund@user/ifreund
that pattern I pasted would be just for public decls in a type, not for symbols exported from the binary

1632734357
discipulus!~discipulu@user/discipulus
"top level declarations are order-independent, and as long as there isn't an actual infinite regression,"

1632734495
discipulus!~discipulu@user/discipulus
I can understand infinite regression but its not a common phrase from my experience. Is it regression or recursion?

1632734644
ifreund!~ifreund@user/ifreund
discipulus: yeah, that's probably a typo for recursion

1632734660
ifreund!~ifreund@user/ifreund
which is probably a regression in the docs, since I haven't seen that phrase before :D

1632734688
discipulus!~discipulu@user/discipulus
:D

1632734811
discipulus!~discipulu@user/discipulus
I thought it was compiler terminology I haven't been exposed to. so just checking.

1632735751
nmeum!~nmeum@barium.8pit.net
is there any builtin function to compare to arrays for equality?

1632735787
nmeum!~nmeum@barium.8pit.net
ah, std.mem.equal. nvm

1632758234
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Continuing with my emulated #ifdef, my struct was "export const vector_table = VectorTable{...};" but trying to do the export in an @export led to "error: exported struct value must be declared extern". The struct is (and must be) packed.

1632758645
ifreund!~ifreund@user/ifreund
sigh...

1632758653
ifreund!~ifreund@user/ifreund
yeah that's definitely a stage1 compiler bug

1632758700
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I was worried you'd say that.

1632758704
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Should I file it?

1632758769
ifreund!~ifreund@user/ifreund
I'd probably just export an integer or extern struct of the same size/alignment and then @bitCast() when you want to read to/from it

1632758778
ifreund!~ifreund@user/ifreund
or @ptrCast()

1632758812
ifreund!~ifreund@user/ifreund
you can file an issue if you like, but the chances of anyone bother to fix it instead of spending their time working on stage2 instead are slim

1632758847
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
thats the beauty of open source

1632758853
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
you can pay daurnimator $5 to prioritize the work

1632758995
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It's an interrupt vector table; it needs to be stuffed into memory by the linker script.

1632759034
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
So...actually, that workaround might work fine.

1632759043
ifreund!~ifreund@user/ifreund
:)

1632759077
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
haze: that's a good point, and while I'm not in a hurry it might be worth the tip.

1632759105
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
thats how std.json got kicked up into place

1632768871
klardotsh!~klardotsh@75-172-2-244.tukw.qwest.net
I feel like I'm about to feel pretty dumb, but can someone ELI5 how to get myself out of a "pointer type child '[3:0]u8' cannot cast into pointer type child '[*:0]u8" hole? (messy code warning: https://gist.github.com/klardotsh/25c3274ee4cb0f903ecd258e75d2f437)

1632768973
klardotsh!~klardotsh@75-172-2-244.tukw.qwest.net
(and yes, cmd_string calculates the wrong buffer size in that snippet, but I'm not far enough down in the compiler errors to bother fixing that one yet)

1632770908
klardotsh!~klardotsh@75-172-2-244.tukw.qwest.net
huh. seems to have been mostly type inference getting things... different than I expected, but hey, whatever, it works now (with a bit more syntax noise). https://gist.github.com/klardotsh/24b526637c49ae6b58643cd20452bfbd

1632778165
dutchie!~dutchie@user/dutchie
klardotsh: *const [*:0]u8 is a bit of an odd-looking type

1632778202
dutchie!~dutchie@user/dutchie
there are two levels of pointers there

1632778237
dutchie!~dutchie@user/dutchie
you normally want []const u8 instead of []u8

1632778264
dutchie!~dutchie@user/dutchie
https://www.youtube.com/watch?v=VgjRyaRTH6E is an extremely helpful video for getting your head around zig's pointer types

1632778897
dutchie!~dutchie@user/dutchie
here's a tidied up example also fixing the fact you can't switch on []const u8

1632778899
dutchie!~dutchie@user/dutchie
https://0x0.st/-YxP.zig

1632778955
dutchie!~dutchie@user/dutchie
could do a bit more, like doing `catch unreachable` since bufPrint can't fail, but depends on the rest of the code

1632778962
dutchie!~dutchie@user/dutchie
anyway, bedtime forme

1632779044
klardotsh!~klardotsh@75-172-2-244.tukw.qwest.net
dutchie: thanks for the video+code example! I'll take a look since I'm currently fighting yet more slice/pointer craziness in another stretch of the code

1632779160
klardotsh!~klardotsh@75-172-2-244.tukw.qwest.net
definitely been a bit of a long day pounding my head into the desk trying to translate what I'd do in eg. Rust to Zig (which is a non-ideal way to learn anyway, for sure)

1632780451
flux_control!~flux@sourcemage/wizard/flux
I have a question concerning the "Why Zig and not X" page on the ziglang.org site. Under "No hidden control flow", it claims that C++, D, and Go have try/catch exceptions that can prevent bar() from executing. Is this not also true of Zig?

1632780496
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Zig doesn't have exceptions.

1632780507
flux_control!~flux@sourcemage/wizard/flux
If foo() is defined to (possibly) return an error, and does return an error when called as foo() in that sequence, wouldn't the calling function then abort before calling bar()?

1632780509
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
At least, not in the same way as those.

1632780544
flux_control!~flux@sourcemage/wizard/flux
leeward: I'll grant that, but doesn't Zig still not execute bar() after foo() if foo() returns an error?

1632780589
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
With the code in the example, if foo can possibly return an error, Zig's compiler will throw an error.

1632780598
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Errors can't be unhandled.

1632780621
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Granted, the handler can be "throw it up the stack one level" but they're always explicit.

1632780650
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That's what the "hidden" bit is about. If that were Zig code, and foo() could return an error, it would at least have to be "try foo();"

1632780683
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Which tells you, the code-reader, that it's possible for the call to foo to cause the function to return early.

1632780687
flux_control!~flux@sourcemage/wizard/flux
leeward: I see. So the real difference is compile vs. runtime then.

1632780703
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Not really. The difference is implicit vs. explicit.

1632780741
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
My wording was a bit confusing when I talked about the compiler throwing an error. It's invalid Zig to have a function that can return an error whose return value is ignored.

1632780786
flux_control!~flux@sourcemage/wizard/flux
leeward: If you only consider the case of comptime execution, then Zig is still "implicit" in that case. You have to imagine or treat comptime the same as runtime to see that though.

1632780837
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I mean, I guess, but having the compiler refuse to build your executable is a pretty good way to prevent bugs.

1632780852
flux_control!~flux@sourcemage/wizard/flux
I get how Zig works there, but I'm less familiar with C++, D, and Go, so I didn't see the difference. Knowing that the other langs do that at runtime makes the difference clear.

1632780877
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
The compiler will also refuse to build an executable if you have typos in your variable names.

1632780882
flux_control!~flux@sourcemage/wizard/flux
leeward: I fully agree and prefer Zig's way.

1632780907
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: Is there a language with exceptions that you do know? Python and Java work very similarly to D and C++ in this regard.

1632780923
flux_control!~flux@sourcemage/wizard/flux
I think maybe we could just point out that those langs run exceptions at runtime, not comptime, to make it more clear.

1632780938
flux_control!~flux@sourcemage/wizard/flux
leeward: I tend not to code in langs that use exceptions. :(

1632780944
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I don't think that's clearer.

1632780946
cCCCCcccccCCc!~b@user/ccccccccccccc
That's not really an accurate description of the situation at all, though. 

1632780967
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It's not throwing an exception and aborting execution of your code.

1632780979
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It's stopping its attempt to compile your code because it found an error in it.

1632780993
flux_control!~flux@sourcemage/wizard/flux
Yes

1632781001
flux_control!~flux@sourcemage/wizard/flux
But where it stops is the same

1632781004
cCCCCcccccCCc!~b@user/ccccccccccccc
Exceptions are a flow control construct that jumps around like a goto. A Zig error is a type being returned to the caller. 

1632781012
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
^^that

1632781049
flux_control!~flux@sourcemage/wizard/flux
If you put a @compileLog in bar() does that execute if foo() throws an error?

1632781055
companion_cube!~simon@user/companion-cube
zig does have panics though

1632781061
flux_control!~flux@sourcemage/wizard/flux
Exactly

1632781079
companion_cube!~simon@user/companion-cube
I can't think of a modern language that doesn't have _any_ form of exception

1632781088
companion_cube!~simon@user/companion-cube
they all tend to have a form of panic somewhere

1632781088
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It's not that foo() throws an error, it's that foo's return type is an error union.

1632781106
flux_control!~flux@sourcemage/wizard/flux
leeward: Same difference

1632781111
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It's really not.

1632781125
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Because if you write the code in correct Zig, it will compile just fine.

1632781125
cCCCCcccccCCc!~b@user/ccccccccccccc
Not in the slightest.

1632781149
cCCCCcccccCCc!~b@user/ccccccccccccc
It's always going back to the call site with the error union. 

1632781153
cCCCCcccccCCc!~b@user/ccccccccccccc
It's not jumping anywhere else.

1632781158
flux_control!~flux@sourcemage/wizard/flux
My point is that without discussing how Zig's panic is different it's not clear to someone not already familiar with Zig how it's different.

1632781167
flux_control!~flux@sourcemage/wizard/flux
cCCCCcccccCCc: You're talking about runtime.

1632781174
flux_control!~flux@sourcemage/wizard/flux
Right?

1632781191
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Zig's panic has nothing to do with this discussion. companion_cube is being pedantic and pointing out that the "No hidden control flow" is technically false.

1632781224
companion_cube!~simon@user/companion-cube
I'm saying there's a notion of exceptions, it's just not the proper error handling mechanism

1632781287
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Yes, technically correct is the best kind of correct.

1632781293
flux_control!~flux@sourcemage/wizard/flux
It can be said that Zig's exceptions are comptime, while other lang's exceptions are runtime. Because Zig's exceptions are comptime, nothing is hidden because the compiler tells you everything.

1632781304
cCCCCcccccCCc!~b@user/ccccccccccccc
This is not an exception mechanism.

1632781324
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Compiler errors aren't exceptions.

1632781324
cCCCCcccccCCc!~b@user/ccccccccccccc
Please go look into how exceptions work, they're a goto-in-disguise. 

1632781399
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
The point of the section in that page is that the code, as written, in C++, could be correctly written and fail to execute bar. In Zig, if the code is correctly written (and we ignore companion_cube's corner case) bar will be executed.

1632781405
flux_control!~flux@sourcemage/wizard/flux
cCCCCcccccCCc: I believe that's an implementation detail, not a requirement for the definition of exception.

1632781413
cCCCCcccccCCc!~b@user/ccccccccccccc
Then you are wrong.

1632781439
cCCCCcccccCCc!~b@user/ccccccccccccc
It's used for non-local exits and flow control manipulation, not just errorrs.

1632781441
flux_control!~flux@sourcemage/wizard/flux
leeward: Correctly written in terms of compiles, right?

1632781457
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: In terms of it's correct code written in the language.

1632781490
flux_control!~flux@sourcemage/wizard/flux
leeward: And non-correct code should be a compile error, yes?

1632781517
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: It should be, but isn't always. See most C code.

1632781617
flux_control!~flux@sourcemage/wizard/flux
leeward: That's getting into dangerously fuzzy territory. Most C code may in fact be correct in terms of the language but not correct in terms of logic flow. C as a language allows for a lot of code to be correct that shouldn't be.

1632781656
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Undefined behavior is never correct, and most C compilers don't complain if you invoke it.

1632781722
flux_control!~flux@sourcemage/wizard/flux
Undefined behavior is neither correct nor incorrect. It's undefined.

1632781727
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Back to the point, though, if that code were written in Zig, and "foo()" could return an error, it would be "try foo()" and you would have no guarantee that bar gets executed. There's still a runtime error catching mechanism.

1632781746
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: "neither correct..." means never correct.

1632781750
flux_control!~flux@sourcemage/wizard/flux
At the language level it's undefined, but it can be perfectly correct as determined by the compiler.

1632781759
flux_control!~flux@sourcemage/wizard/flux
False, undefined is undefined.

1632781766
flux_control!~flux@sourcemage/wizard/flux
It's left to the compiler implementation.

1632781786
flux_control!~flux@sourcemage/wizard/flux
Thus the C code *can* be correct when used with a specific (version of a specific) compiler.

1632781812
flux_control!~flux@sourcemage/wizard/flux
There's way too much argument about semantics here.

1632781813
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I don't know why you're arguing this one. You said it's not correct. I said it was not correct. We agree. It's not correct.

