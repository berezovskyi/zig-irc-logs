1611361201
andrewrk
nice

1611361455
ifreund
uh, I don't think ArrayListAligned respects the alignment value passed unless you use initCapacity()

1611361601
andrewrk
I wonder if we could get away with not having ArrayListAligned

1611361685
ifreund
I've never had a use for it

1611361998
ifreund
andrewrk: well, I've got a basic MultiArrayList working but don't handle custom alignments on fields because the allocator interface expects the alignment at comptime

1611362135
ifreund
debating whether we need that or not...

1611362137
ifreund


1611362174
ifreund
doing it in a single allocation got too ugly when handling fields of varying size

1611363209
ifreund
yeah I'm just going to ignore alignment of fields for now

1611363217
ifreund
I don't see any use case

1611363251
ifreund
and ArrayListAligned isn't actually used anywhere in the std or self-hosted, I think it should get booted to the orphanage

1611363261
ifreund
especially since it doesn't even work currently

1611363808
andrewrk
I bet you could do it cleanly with fields of varying size but it would involve a comptime sort on the field alignment

1611363866
andrewrk
it's pretty neat because it would actually save memory over an array of structs when there are fields of mixed alignment

1611363957
ifreund
hmm, that would be smart. Anyhow I'm off to bed now though I just put up a draft PR

1611363974
ifreund
should be able to finish it up tomorrow

1611364099
andrewrk
sweet

1611367882
marler8997
anyone else see that microsoft is deploying metadata about the win32 api?

1611373524
daurnimator
mikdusan: yeah. we can probably use it.... though I don't trust them to be complete. but should provide a good baseline. though might make sense as a non-core project

1611373682
daurnimator
marler8997: yep. there's been discussion of it on both discord and here

1611373715
marler8997
I'm working on the zig projection now :)

1611381579
andrewrk
marler8997, does it have ntdll stuff in it?

1611381627
marler8997
I see NtCreateFile

1611387115
pixelherodev
andrewrk: is "the root source file is one compilation unit" intended to be part of the spec, or an implementation detail?

1611387216
pixelherodev
My compiler currently splits the root file into pieces at the import level (potentially in the future it could be even more fine-grained) and turns each input file into a compilation unit - so e.g. each file in the standard library will get its own object file when imported with `@import("std")`. Should I be merging them back together?

1611387373
pixelherodev
As I've mentioned, I want to retain 100% compatibility even before there's an official spec, so I might bugyou with a few more questions like this over the next week or so

1611387737
andrewrk
pixelherodev, the output format is target-defined

1611387751
andrewrk
out of scope of the language specification

1611387755
pixelherodev
andrewrk: okay, thanks for clarifying :)

1611387787
pixelherodev
andrewrk: I was unsure, because the site mentions "zig does LTO" in a waythat left me unsureif that was intended to be part of the lang, or just an impl detail

1611387790
andrewrk
as another example, the way that the string of an inline assembly block is interpreted is also target defined

1611387801
andrewrk
speaking of LTO, check out what I just did:

1611387813
pixelherodev
andrewrk: does targetdefined mean we have to document it? please say yes :)

1611387856
andrewrk
not sure

1611387909
pixelherodev
I think e.g. asm MUST be explicit or it's useless

1611387992
pixelherodev
andrewrk: interesting, nice work! :)

1611405668
zags
Hey, anyone building the zig compiler (master) on macOS? I've installed llvm view homebrew and now run

1611405673
zags
PATH="/usr/local/opt/llvm/bin:/usr/local/opt/llvm/include:$PATH" cmake ..

1611405705
zags
some stuff compiles, but eventually I get

1611405706
zags
In file included from /Users/cc/projects/zigprojects/zigcompiler/src/zig_llvm.cpp:23:

1611405721
zags
/usr/local/opt/llvm/include/llvm/Analysis/TargetLibraryInfo.h:53:10: error: unknown type name 'StringLiteral'

1611405739
zags
Ideas? :)

1611406718
ugla
Did you do the thing from the docs: "For example, macOS users may want to use cmake .. -DCMAKE_PREFIX_PATH=$(brew --prefix llvm) " ?

1611406851
zags
yeah, same error with or without that

1611406881
zags
if finds llvm clang 11

1611407004
zags
targets libembedded_softfloat and opt_c_util builds, but it fails with the above errors on the zigcpp target

1611408940
ugla
I don't have a mac so unfortunately I don't know. But I'm pretty sure there's more mac users here. Maybe asleep. :)

1611409836
zags
No worries, I'll wait :)

1611410562
marijnfs
how do you normally organised your code in files? I kind of want to move code to another file but still access the functions and constants defined there

1611410581
marijnfs
now I need to do a const somefunc = @import("other.zig").somefunc for everything

1611410636
mikdusan
generally you treat it like a namespace. `const other = @import("other.zig"); other.somefunc(...);`

1611410688
marijnfs
yeah I guess that's how it is

1611410705
ifreund
I'm not afraid of large files, I only spilt stuff up if there's a clear logical division of the current file into multiple namespaces

1611410752
ifreund
also remember that files are nothing but structs!

1611411135
marijnfs
yeah I have everything in one file after breaking up too early before and getting lost in the code

1611411174
marijnfs
ifreund: that's true, it's funny you can write a whole struct in a file without saying 'struct'

1611411389
zags
@<primitive> intrinsics would be nice, I think people might start doing helpers like `pub fn U32(comptime val: anytype) u32 { return @as(u32, val); }` to clean up casts in complex code. I like the explicitness, but it can be verbose.

1611411441
zags
if (x < @u32(5)) is sweet

1611411603
marijnfs
would be useful indeed

1611411629
ifreund
not sure how I feel about that. It would definitely be more concise, but not as simple as the status quo IMO

1611411648
ifreund
and it wouldn't be able to replace @as() either

1611411683
ifreund
I think there's a

1611411754
zags
Yeah, not likely I'm sure :) I just think it's strikes a nice balance as primitive literals a very common. I really like uint64_t(5) in cpp. Explicit, yet consise.

1611411755
ifreund
note that zig used to do casting like u16(x)

1611411763
ifreund
but that was removed in favor of @as()

1611411767
zags
oof

1611411811
zags
General casting with @as is fine, love it, this is more like ergonomics for primtives which I find annoying now.

1611411838
zags
Not a big deal

1611412149
ifreund
Nypsie[m]: this should probably go in std.wasm tbh

1611412169
ifreund
basically your goal is to encode this table in a nice zig api:

1611412259
ifreund
it may be useful to note that .i32 and .f64 etc are valid enum literals, so a function so something like wasm.load(.i32) might be a nice api to get 0x28

1611412291
Nypsie[m]
Aaaah I see, just like how there's std.coff etc

1611412335
Nypsie[m]
I'll thinker with both of these in mind and see if I can come up with an elegant API. Thanks for the input, ifreund.

1611412353
ifreund
no problem!

1611412403
ifreund
Nypsie[m]: a single large enum would also be a totally valid approach

1611412450
Nypsie[m]
ifreund: I see. That's actually what I did for my own compiler's wasm backend. And you can then simply do wasm.emit(writer, .i32_load); for example

1611412493
ifreund
i'd prefer wasm.opcode(.i32_load) that returns 0x28

1611412518
ifreund
they are all one byte after all

1611412540
Nypsie[m]
Yeah makes sense

1611412623
Nypsie[m]
Thanks once again :)

1611414326
zags
What allocation/deallocation strategy do you guys use for shared/long-term data? Not always easy to track lifetimes/ownership. In c++ I use shared pointers for those cases.

1611414388
zags
I don't feel like manually doing reference counting :)

1611414469
zags
Maybe a boehmgc-style allocator would be possible?

1611415554
zags
Maybe if

1611415673
ifreund
I don't think I have any data like that in river at least, everything has a clear owner

1611415724
ifreund
manual reference counting is actually pretty ergonomic in zig with defer as well

1611415787
ifreund
I'm sure you could implement a c++ std like smart pointer as well

1611417499
zags
ifreund: that's nice, but some apps sometimes have shared data and harder-to-track ownership

1611417992
companion_cube
ifreund: without RAII? How?

1611418075
zags
companion_cube: i think it'll have to be with manual release/aquire, but you can get some type safety to help out

1611418092
companion_cube
Right, so that's not a smart pointer

1611418143
zags
that depends on your definition of smart pointer, COM has release/aquire for instance and they call it smart pointers because it knows when to deallocate

1611418152
ifreund
no, zig doesn't have RAII and never will so you'd need to manually handle the ref counting

1611418178
ifreund
the point of this is to be able to wrap arbitrary data inside this "smartish pointer"

1611418190
zags
yeah

1611418193
ifreund
instead of needing to add ref counting functions to your type

1611418230
zags
ifreund: do you think a boehm allocator would be possible for stuff like closures and long-lived data?

1611418243
zags
so you could opt-in gc where you want

1611418248
ifreund
zags: by the way I lied, river does use some things that does manual ref counting, though they come from C libraries

1611418258
zags
i see

1611418332
ifreund
zags: hmm, remind me how the boehm gc thing figures out if a recource is dead or not?

1611418389
zags
conservative scan, if it looks like a pointer to something it knows about, it's live

1611418401
zags
usually works fine

1611418436
ifreund
Yeah I don't see why that wouldn't work just as well with zig as it does in C

1611418456
zags
could be an interesting thing to try

1611418507
ifreund
it won't know about pointers held in memory

1611418515
zags
i noticed someone did for the entire compiler to deal with allocation failures

1611418534
zags
ifreund: yeah, it only knows gc_malloc stuffs afaik

1611418553
ifreund
seems like an all or nothing kind of solution, if you mix normal allocation in that's a huge, implicit footgun

1611418554
companion_cube
Heh, semi smart pointer then :)

1611418601
zags
ifreund: well, manual allocation is already a collosal footgun, defer or not

1611418619
zags
i'd love an opt-gc to allocate closures

1611418624
zags
opt-in gc

1611418721
ifreund
using a gc that will free memory from under your feet if the only remaining pointers are allocated manually is a far greater footgun than the simple rules of manual memory management IMO

1611418765
ifreund
tools like valgrind and the std's gpa make tracking down leaks and use-after-free quite straightforward

1611418779
zags
sure, but it would only be for specific things, some language support would be helpful though

1611418817
ifreund
I don't think you'll ever see GC built into zig :P

1611418821
zags
sure, sanitizers and valgrind help, but i'm still going to miss c++ smart pointers, they work very well

1611418828
ifreund
the language itself knows nothing about allocation

1611418837
zags
yeah i know, just dreaming

1611418849
ifreund
sounds like D tbh

1611418890
ifreund
which is far too close to C++ for my liking, but still a step up if I had to choose between the too

1611418891
zags
i know D and C and Nim and a lot of other things... they have other problems

1611418922
zags
I like Zig a lot, but I'll miss c++ smart pointers for sure

1611418944
zags
But I also recognize why they don't fit in the language

1611418965
zags
shared_ptr allocates behind the scenes and stuff, not compatible with Zig's goal

1611418979
ifreund
everything's a tradeoff yeah

1611418985
zags
indeed

1611419352
zags
Why are colons needed when breaking to labels? Are they in a different namespace than identifiers maybe?

1611419859
mikdusan
there is an open proposal to change that

1611419862
mikdusan


1611420724
ifreund
I think the reasoning why they are required by the compiler currently is to provide clarity that they aren't a variable or whatever, not because the compilier depends on them to know what code to generate

1611420762
ifreund
I'm not sure how they are handled with regards to shadowing off the top of my head

1611420813
mikdusan
looking at code is made easier "break op1 op2" doesn't tell me which is label. I'd have to remember a rule, if 2 operands then op1 is label,

1611420876
mikdusan
where "break :op1 op2" tell me right away. also when writing code if you remember visually then without colon still more difficult.

1611420880
ifreund
exactly

1611423321
zags
that's a very good point

1611426211
zags
ifreund: when you reference-count manually, do you keep the allocator around and then have the struct deinit itself on refcount goes to zero?

1611426275
ifreund
zags: yes that would be the way to do it

1611426300
zags
thanks

1611426303
ifreund
you can either store a pointer to the allocator in your struct or just use a global as it's probably gonna be a GPA

1611426407
mikdusan
if you're not using a slab, or slub (or slob even) you're doing it wrong. :P

1611426476
ifreund
I'm linking libc, so I might as well just use that one...

1611426591
mikdusan
that's what I would

1611426702
ifreund
stage2 makes very heavy use of areans currently

1611426736
ifreund
I think that may need to be reexamined for comptime evaluation though

1611426821
mikdusan
prolly

1611427265
zags
after a few days of jumping between c-like languages and Zig, I still think it's really odd that both

1611427268
zags
const count: i32 = 1;

1611427268
zags
and

1611427270
zags
count: i32 = 0,

1611427278
zags
are allowed in structs

1611427292
zags
look almost the same, but one is a field and the other is... something else

1611427323
zags
i keep doing the first when adding fields, oof

1611427920
zags
or tbh, I usually try "count: i32 = 0;" and it doesn't compile and I slap my forehead thinking I should've learned to use comma instead of semicolon by now :D

1611428060
ifreund
the other is a declaration

1611428083
ifreund
basically a global namespaced to that struct

1611428092
ifreund
and don't forget that files are structs

1611428107
marler8997
ok whose got a windows box that wants to test they can build something for me?

1611428121
zags
well, the syntax is going to bite me for a long time haha

1611428138
marler8997
I'm working on the Zig win32 binding generation, and want to make sure my build instructions include all the dependencies that are actually required

1611428237
zags
ifreund: yeah i like how files are implicit structs with basename naming

1611428374
marler8997
irc doesn't seem to be a talkative these days, is there alot more activity on discord?

1611428974
ifreund
yeah, there're a lot more people there but also a lot more off-topic discussion

1611429030
marler8997
ifruend, I guess I'll have to change my stomping grounds then

1611429099
ifreund
I think you'll certainly find more windows users there, probably mostly linux here

1611429272
marler8997
ah..interesting

1611429528
ifreund
zags: I think it's the single least confusing way to handle imports I've seen. Arguable a bit more complex than the C preprocessor's text-based #include but much simpler to use in practice

1611433499
Nypsie[m]
ifreund: Wew, you're fast :P

1611433545
ifreund
Nypsie[m]: I'm procrastinating :P

1611433558
Nypsie[m]
Hahaha, we've all been there I think

1611433563
Nypsie[m]
Anyway, thanks. Will quickly update it

1611434203
Nypsie[m]
Now I get those saturating truncation instructions. Hmmm not sure what would be a great API for those.

1611434600
ifreund
me neither, they feel super ugly

1611434627
ifreund
could always just leave 'em out for now, zig doesn't need them

1611434659
ifreund
or at least not yet, I suppose the language could gain saturating math at some point down the road

1611434665
Nypsie[m]
Yeah, would rather keep them out for now than implement them incorrectly.

1611436823
Nypsie[m]
Fixed your comments. Thanks again for reviewing so swiftly, ifreund. Time for some relaxing :)

1611444351
andrewrk
marler8997, idk if you noticed but spexguy is live right now working on the win32 stuff

1611445452
marler8997
yeah I been lurking

1611446196
marijnfs
how do I manipulate bits, can I cast to a []u1?

1611446289
justin_smith
that's possible with @bitCast iirc, but it might be easier to just use the normal bitwise ops

1611446292
ifreund
no, because bits aren't individually addressable that wouldn't really make sense

1611446377
marijnfs
yeah I need to xor the highest bit

1611446382
marijnfs
of a [32]u8

1611446396
marijnfs
or in general xor the n'th bit

