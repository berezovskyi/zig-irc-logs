1631067641
discipulus!~discipulu@user/discipulus
What is the definition of "top-level"?

1631073785
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
How do I tell Zig where to look for external libraries?  Does it honor LIBRARY_PATH?

1631075117
discipulus!~discipulu@user/discipulus
I don't know about LIBRARY_PATH, but https://zig.news/xq/zig-build-explained-part-2-1850 has a section called "Using external libraries".

1631075724
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
discipulus, that seems to be at the project-level.  I'm looking for something that tells Zig to look in a non-standard location for system libraries instead of e.g. /lib, /lib64, and so on

1631075743
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
for everything that it builds

1631075766
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
thank you though :)

1631077096
discipulus!~discipulu@user/discipulus
Are you wondering if you can do something like `LD_LIBRARY_PATH=/foo/lib zig build-exe f.zig` and have it search for libraries in /foo/lib when linking?

1631077817
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
discipulus, yes, exactly.

1631081348
discipulus!~discipulu@user/discipulus
/s/LD_// sorry, confused LD_

1631082747
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
No worries.  After searching the issues, I've found that you can use "-isystem /foo/lib" and "-L /foo/lib" but as this distribution (Guix) has a nonstandard location for system libraries, that would mean the user typing those out for every invocation

1631083103
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
I see that NIX_LDFLAGS is honored, so I suppose that would work, but it feels a little odd to have NIX_LDFLAGS supported but not LIBRARY_PATH, C_INCLUDE_PATH, etc.

1631086138
discipulus!~discipulu@user/discipulus
I haven't seen the feature you're looking for yet. For me, NIX_LDFLAGS doesn't appear to work. Until someone else helps out seems like you'll have to setup a build or build script that uses a custom environment variable. 

1631088508
discipulus!~discipulu@user/discipulus
"top-level" refers to a direct child of a "container". 

1631089065
discipulus!~discipulu@user/discipulus
Another reason allowing tests inside of struct (and other containers like enum, union, and opaque) is useful is refactoring. For example, moving a container to another location brings along its tests.

1631089229
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wait are tests actually allowed in structs

1631089253
discipulus!~discipulu@user/discipulus
hold on, let me show you something

1631089304
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
I think you can but you need to ref them

1631089337
discipulus!~discipulu@user/discipulus
https://zigbin.io/7d8f2c

1631089343
discipulus!~discipulu@user/discipulus
yes need to ref them

1631089354
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yeah thats elite

1631089356
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
didnt know

1631089359
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
conna start compacting them

1631089437
discipulus!~discipulu@user/discipulus
line 75 is a function with an enum with a struct with a test

1631089466
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
zig.vim

1631089489
discipulus!~discipulu@user/discipulus
function -> enum -> test -> struct -> test

1631099626
discipulus!~discipulu@user/discipulus
Are tests run from top down and breadth-first?

1631102035
cepheus!~cepheus@user/cepheus
I _think_ they run in definitional order starting from the entrypoint?

1631102081
cepheus!~cepheus@user/cepheus
so whatever order the files are included in, and the the order the tests are defined in within that file

1631105254
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
Are there any definitive guides for transforming c applications with the zig build system? There are alot of questions I have about best practices like, what if the project requires me to run some autogen script to prepare the source tree for building?

1631105890
ikskuh!~xq@2a0d:5940:6:163::ad7e
not yet

1631105898
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i might have time to continue working on mine tomorrow :)

1631105945
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
There's also zig-get from marler, but the openssl support just runs commands

1631105957
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
versus loris' redis branch that builds the source using zig cc

1631105997
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
should I prefer using zig cc over the make scripts in the repos? Should I instead just set zig cc as the compiler?

1631106001
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
so many questions ...

1631106012
ikskuh!~xq@2a0d:5940:6:163::ad7e
do you mean "zig build"?

1631106018
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yeth

1631106060
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/MasterQ32/zig-ode/blob/master/Sdk.zig

1631106067
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have transformed a CMakeLists.txt yesterday

1631106077
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
oh worm

1631106077
ikskuh!~xq@2a0d:5940:6:163::ad7e
the original can be found in the submodule, this is kinda the zig translation

1631106082
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thx u

1631106087
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wait ur xq?

1631106087
ikskuh!~xq@2a0d:5940:6:163::ad7e
i'd recommend that pattern

1631106089
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1631106090
ikskuh!~xq@2a0d:5940:6:163::ad7e
:D

1631106092
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
TIL

1631106096
ikskuh!~xq@2a0d:5940:6:163::ad7e
iks = x, kuh = q

1631106115
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i only speak elementary chinese and english

1631106115
ikskuh!~xq@2a0d:5940:6:163::ad7e
xq is sadly aalready taken on libera :(

1631106129
ikskuh!~xq@2a0d:5940:6:163::ad7e
sorry for the confusion

1631106135
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nah there was none

1631106142
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thx for this

1631106146
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it looks like just what i neede

1631106151
ikskuh!~xq@2a0d:5940:6:163::ad7e
"brain checkout discord; brain merge irc"

1631106167
ikskuh!~xq@2a0d:5940:6:163::ad7e
note that there is some platform specific stuff i left out in this

1631106177
ikskuh!~xq@2a0d:5940:6:163::ad7e
because i wanted createCoreLibrary to just return a fresh libExeObjStep

1631106182
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thats the beauty of open source

1631106188
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1631106191
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
someone else will do it for you if they want it enough

1631106294
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
what is this sdkRoot hack o-o

1631106557
ikskuh!~xq@2a0d:5940:6:163::ad7e
haze: brilliant!

1631106574
ikskuh!~xq@2a0d:5940:6:163::ad7e
because it makes your file position independant

1631106581
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wym

1631106591
ikskuh!~xq@2a0d:5940:6:163::ad7e
build.zig requires all paths to be relative to build.zig

1631106596
ikskuh!~xq@2a0d:5940:6:163::ad7e
which means

1631106603
ikskuh!~xq@2a0d:5940:6:163::ad7e
if my file is in "vendor/zig-ode/Sdk.zig"

1631106625
ikskuh!~xq@2a0d:5940:6:163::ad7e
i somehow need to make that file aware that it now needs to prefix all paths with "vendor/zig-ode/"

1631106635
ikskuh!~xq@2a0d:5940:6:163::ad7e
sdkRoot() just computes the full path of the file

1631106655
ikskuh!~xq@2a0d:5940:6:163::ad7e
so you can move the package around with having to *care* where it is

1631106667
ikskuh!~xq@2a0d:5940:6:163::ad7e
previously, you'd had to pass in the path manually in build.zig

1631106678
ikskuh!~xq@2a0d:5940:6:163::ad7e
with the help of @src().file, i can compute the location:)

1631106766
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
im submissive

1631106770
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i will abide by build.zig rules

1631109800
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
discipulus: iskarian: In my make file on NixOS, I have, for example: zig build-exe -lc -cflags ${NIX_CFLAGS_COMPILE} -- ${NIX_LDFLAGS} -lxcb -lcairo src/blah.zig

1631109811
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
And that seems to work fine.

1631109850
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
It is strange that the cflags are bundled with -cflags --, but not the ld flags, but it seems to work.

1631110224
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
And on another topic, luuk: I got zig building with my std.os.fcntl patch. I fixed/finished support for linux posix file locking. I'm not sure it is a good addition to this library though.

1631110361
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
On one hand, std.os is a thin layer, but it is a layer. It feels strange to lump all the locking errnos (.AGAIN, .ACCESS, .DEADLK, .NOLCK) into the file errors in std.os.FcntlError. Perhaps FcntlError should be spit by the fcnt cmd argument.

1631110432
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Also std.os is changing under my feet, I had a bunch of updates to my program when I pulled the very latest master.

1631110464
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
I wonder if I should even be using the std.os layer when doing things like file locking, or drop down to the lower os.linux layer.

1631110503
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Anyway that is my brain dump on my latest experiments all. Thanks.

1631110622
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
I'll scroll back and read any comments if I'm away from keyboard.

1631110837
luuk!~luuk@user/luuk
acarrico: We had a semantic change to how usingnamespace works so `std.os` was updated to account for that change. I'm not too familiar with fcntl, but if it's a linux-only thing it should probably belong in std.os.linux. You can always submit a PR, I'm sure there's plenty of people that can give feedback whether it belongs in std or not, and if so, where :)

1631111034
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Sounds good. The locking in fcntl is POSIX, not Linux specific, as far as I know. I saw above advice about testing in zig/CONTRIBUTING.md so I'll look at that. 

1631111074
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
(There are two file locking protocols, and this is the more "modern" one)

1631111102
luuk!~luuk@user/luuk
I believe (tho not sure if that's still the case) the idea is to rename std.os to std.posix at one point as it's so posix-oriented right now, so maybe it does belong there after all haha. Surely someone more knowledgable can confirm.

1631111159
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
That would be great. In my opinion it is a mistake to abstract over windows (but maybe that is a bias)

1631111223
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Of course it is a design decision what level of abstraction to hit in "std".

1631113766
marler8997!~marler899@204.229.3.4
andrewrk, TopperDEL let me know that the Surface X is aarch64-windows, and also the Hololens 2 (which is what he is targeting)

1631121681
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
discipulus, NIX_LDFLAGS looks like it *should* work for -L and -rpath arguments: https://github.com/ziglang/zig/blob/12828c09d66873f1626d21c898117969764f3a4f/lib/std/zig/system.zig#L68

1631121808
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
acarrico, thanks for the example :) supplying arguments on the command line is fine in a (hypothetical) zig-build-system, but when making the Zig compiler available directly to users, it seems to me that if they have libfoo installed, Zig should see that without adding any command line switches

1631121909
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
(In most systems, all libraries are available system-wide at, say, /lib or /usr/lib, but in Guix, there is no such system wide directory.  Instead, we set LIBRARY_PATH=/gnu/store/...-libfoo/lib:/gnu/store/...-libbar/lib and so on

1631121911
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
)

1631122119
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
iskarian: On nix based systems, the nix binary should be wrapped to supply the NIX_CFLAGS_COMPILE, NIX_LDFLAGS. One issue with that is that zig doesn't seem to accept them symmetrically, for example, the 'zig build-exe' example is fine, but won't be accepted by 'zig translate-c' iirc, which will balk at the ldflags.

1631122198
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
But it might be a good idea to wrap it for NIX_CFLAGS_COMPILE if that will work consistently.

1631122216
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
acarrico, do you mean "the zig binary"?

1631122271
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
(And Guix isn't really a nix; the only thing in common with nix is the build daemon)

1631122279
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
/nix/store/pd9gaxy5h62gbsdqvmdgb4pr7dcnikys-zig-0.8.0/bin/zig

1631122303
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
(I don't really know how much Guix shares with nix)

1631122393
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
For example, in nixos, gcc is a bash script wrapper which calls the real gcc. Same could apply to zig.

1631122419
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Then users wouldn't need any added command-line switches (in theory)

1631122477
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
How can I wrap zig with a NIX_LDFLAGS when I don't know in advance which libraries they will have installed?

1631122483
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
I just realized I have a bug in my zig derivation, that is actually 0.9.0. Oops.

1631122552
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Anyway, I imagine Guix must do something similar for compiler to find libraries.

1631122554
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Hmm.  Probably the easiest way is just to patch zig to accept LIBRARY_PATH

1631122713
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Is LIBRARY_PATH standard? Anyway, as things change with Nix/Guix and Zig you might be playing "catchup", and a wrapper is the normal way to fix these little problems.

1631122785
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Although, I would certainly love it if a static zig worked out of the box, I just think that it is unreasonable to ask the zig maintainers to keep track of what nix is doing.

1631122833
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
acarrico, yes: https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html

1631122923
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Is that set in Guix? It doesn't seem to be in a nix shell.

1631123059
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Yes, it is (at least whenever you have a package installed that can use it)

1631123362
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
In Nix you would never install a library package, just depend on it in your build. During the build, or in a development environment, it shows up in NIX_CFLAGS_COMPILE as "-isystem /nix/store/blah", and in NIX_LDFLAGS as "-rpath blah -Lblah".

1631123475
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Ah, I knew being imprecise would bite me ;) Yes, I used "install" to mean "make available in a [development] environment" 

1631123500
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Sorry, didn't want to talk past you since I don't know guix.

1631123550
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
No worries.  I see that it's just two different ways of doing the same thing

1631123600
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
Ah, rather than patching zig, I can probably just make the wrapper turn LIBRARY_PATH into NIX_LD_FLAGS

1631123636
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
(Assuming there's no bugs with Zig being wrapped)

1631123700
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Anyway, just looking at the gcc wrapper there are various tweeks, which leads me to believe at some point a wrapper might be necessary anyway. For example, the gcc wrapper looks for "-nostdlib" etc., you could imagine a hypothetical zig wrapper would look for zig's translate-c or build-exe and do different things.

1631123726
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
All ugly hacks, but somehow that is how the world goes around.

1631123795
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Something you said their makes me think that zig looks for NIX_LD_FLAGS... does it?

1631123819
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
I haven't tested it, but it's in the code:  https://github.com/ziglang/zig/blob/12828c09d66873f1626d21c898117969764f3a4f/lib/std/zig/system.zig#L68

1631123837
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
Ah interesting.

1631124029
andrewrk!~andrewrk@mail.ziglang.org
marler8997, nice!

1631124059
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
I guess you would have to turn the path into a list of switches. That gcc documentation says LIBRARY_PATH is used for "special linker files", and also "-l". What are special linker files?

1631124089
marler8997!~marler899@204.229.3.4
is there a way to see the clang args when running "zig cc"?

1631124109
andrewrk!~andrewrk@mail.ziglang.org
marler8997, env var ZIG_VERBOSE_CC=1

1631124163
marler8997!~marler899@204.229.3.4
thx

1631124507
iskarian!~iskarian@ip24-253-39-6.lv.lv.cox.net
acarrico, I have no idea! looks like crtoffloadtable.o (used by LTO) is one of them: https://github.com/gcc-mirror/gcc/blob/716a5836928ee6d8fb884d9a2fbc1b1386ec8994/gcc/lto-wrapper.c#L1056

1631142642
marler8997!~marler899@204.229.3.4
Does this look like it's supposed to be undefined behavior? https://godbolt.org/z/r4P7svM1K

1631142662
marler8997!~marler899@204.229.3.4
inline is: int main() {

1631142662
marler8997!~marler899@204.229.3.4
  int *start = 0;

1631142662
marler8997!~marler899@204.229.3.4
  int *next = start + 1;

1631142662
marler8997!~marler899@204.229.3.4
  return 0;

1631142662
marler8997!~marler899@204.229.3.4
}

1631142671
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes

1631142692
ikskuh!~xq@2a0d:5940:6:163::ad7e
short: "pointer arithmetic on NULL is not allowed"

1631142697
marler8997!~marler899@204.229.3.4
ah

1631142702
marler8997!~marler899@204.229.3.4
thank you!

1631142716
ikskuh!~xq@2a0d:5940:6:163::ad7e
long story:

1631142732
ikskuh!~xq@2a0d:5940:6:163::ad7e
a pointer might only point into the object where it was derived from and *one* byte behind

1631142747
ikskuh!~xq@2a0d:5940:6:163::ad7e
so for a "int", you might point to +0, +1, +2, +3 and +4 bytes

1631142752
ikskuh!~xq@2a0d:5940:6:163::ad7e
but never outside this range

1631142772
ikskuh!~xq@2a0d:5940:6:163::ad7e
as NULL doesn't point to anything, you are not allowed to do arithmetic on it

1631142851
Snektron[m]!~snektron@2001:470:69fc:105::f0a3
Oh wow

1631142872
Snektron[m]!~snektron@2001:470:69fc:105::f0a3
Matrix finally decided to let me join from my own server 

1631142874
marler8997!~marler899@204.229.3.4
ikskuh here is the offending function, can you guess where they are doing pointer arithmetic on NULL? https://github.com/janet-lang/janet/blob/4d746794cccbde10b91e9e3a6082c18ba6a39871/src/core/value.c#L34

1631142895
Snektron[m]!~snektron@2001:470:69fc:105::f0a3
I heard federation was slow but damn - i started joining a full day ago

1631143000
ikskuh!~xq@2a0d:5940:6:163::ad7e
you're trying to compile janet with zig cc? :D

1631143013
marler8997!~marler899@204.229.3.4
not me, someone else filed an issue that they couldn't compile janet

1631143057
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think i'd need to debug here

1631143067
ikskuh!~xq@2a0d:5940:6:163::ad7e
are you sure it's a null pointer arithmetic?

1631143089
marler8997!~marler899@204.229.3.4
yeah 100%

1631143092
marler8997!~marler899@204.229.3.4
traversal pointer is NULL

1631143114
ikskuh!~xq@2a0d:5940:6:163::ad7e
that would've been my guess

1631143121
marler8997!~marler899@204.229.3.4
traversal_top is also NULL

1631143122
ikskuh!~xq@2a0d:5940:6:163::ad7e
now that i've seen that it's actually a pointer and not an int

1631143175
marler8997!~marler899@204.229.3.4
rather than complicating the `if` statement, I think I submit a PR to them to set the initial values to some dummy non NULL value

1631143219
ikskuh!~xq@2a0d:5940:6:163::ad7e
that might be hard

1631143230
ikskuh!~xq@2a0d:5940:6:163::ad7e
because that value must come from malloc

1631143276
marler8997!~marler899@204.229.3.4
oh right, because they are using realloc

1631143277
marler8997!~marler899@204.229.3.4
derp

1631143381
marler8997!~marler899@204.229.3.4
maybe they should just cast the pointer to an integral type?

1631143475
ikskuh!~xq@2a0d:5940:6:163::ad7e
nah

1631143480
ikskuh!~xq@2a0d:5940:6:163::ad7e
either pre-alloc some memory

1631143487
ikskuh!~xq@2a0d:5940:6:163::ad7e
which is imho the right solution

1631143493
ikskuh!~xq@2a0d:5940:6:163::ad7e
or just make a more complicated if

1631143512
marler8997!~marler899@204.229.3.4
nah I don't like either of those

1631143631
marler8997!~marler899@204.229.3.4
I'll just file an issue for now and let them decide: https://github.com/janet-lang/janet/issues/795

1631143922
marler8997!~marler899@204.229.3.4
this is a example of an issue that would have been avoided if it was written in Zig

1631144023
marler8997!~marler899@204.229.3.4
ikskuh do you have any idea if it would be possible to turn ubsan into zig panics instead of illegal instructions?

1631144045
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have never looked into it

1631144048
ikskuh!~xq@2a0d:5940:6:163::ad7e
would be absolutely sweet

1631144060
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think 3 people have attempted to write a ubsan runtime

1631144178
marler8997!~marler899@204.229.3.4
yeah I bet all it would take is to implement the ubsan library, then include that in Zig's source library set, that would be awesome

1631144251
ikskuh!~xq@2a0d:5940:6:163::ad7e
hmm

1631144256
ikskuh!~xq@2a0d:5940:6:163::ad7e
i don't have time ;(

1631144280
marler8997!~marler899@204.229.3.4
what you spending your time on?

1631144299
ikskuh!~xq@2a0d:5940:6:163::ad7e
too much, probably?

1631144309
ikskuh!~xq@2a0d:5940:6:163::ad7e
1) still working on my cpu/computer project

1631144320
ikskuh!~xq@2a0d:5940:6:163::ad7e
2) working on zero-graphics application framework

1631144335
ikskuh!~xq@2a0d:5940:6:163::ad7e
3) dunstwolke stuff (ui, filesystem, general os conception)

1631144344
ikskuh!~xq@2a0d:5940:6:163::ad7e
and since some days a game project for fun

1631144461
marler8997!~marler899@204.229.3.4
sounds like fun stuff

1631144525
ikskuh!~xq@2a0d:5940:6:163::ad7e
it is!

1631144542
ikskuh!~xq@2a0d:5940:6:163::ad7e
zero-graphics has such good improvements

1631144547
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have to fix some things again

1631144560
ikskuh!~xq@2a0d:5940:6:163::ad7e
but then you can create a all-platforms-app with a single "zero-init --git --submodule"

1631144582
ikskuh!~xq@2a0d:5940:6:163::ad7e
and you get a blank, gray window

1631144592
ikskuh!~xq@2a0d:5940:6:163::ad7e
that compiles to: windows, linux, android, web

1631144695
marler8997!~marler899@204.229.3.4
oooo

1631144725
ikskuh!~xq@2a0d:5940:6:163::ad7e
you have to render everything yourself though

1631144740
ikskuh!~xq@2a0d:5940:6:163::ad7e
zero-graphics helps you with that as well, but i don't have a "UI" solution ready yet

1631144748
ikskuh!~xq@2a0d:5940:6:163::ad7e
a lot of stuff is missing

