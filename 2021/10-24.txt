1635034290
freshcoffee!~fresh@user/freshcoffee
(disclaimer: I haven't used asm in zig yet) maybe workaround is do an inline call to `typicalVectorTable()` where the full asm statement is comptime-switch'd against `mission_id`

1635036657
beelover!~beelover@82.28.142.87
Thanks for the suggestion - I'm very new to Zig myself. Unfortunately `typicalVectorTable` does a bunch of string concatenation, etc. so I'm not sure if that would help. I just tried this and keep getting the same error message. It could also be that I don't understand comptime very well

1635046493
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: re the memset thing, I actually thought about this more, and re-read the llvm langref, and it only supports i8 operands, so we would basically lower to memcpy in all cases anyways (a memset with an array in all backends would lower to a memcpy)

1635046507
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
so I don't see a reason to pretend that we are being more efficient than we actually are

1635046527
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
and add complexity

1635046975
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
do you agree with this, or do you still think that memset is the way to go?

1635059933
andrewrk!~andrewrk@mail.ziglang.org
g-w1, you're essentially proposing to change the zig memset AIR instruction to require the element type to be sized to 1 byte. however, that's not a limitation that every backend has- for example on x86_64 we could lower it with an 8 byte element to have a more efficient operation

1635059957
andrewrk!~andrewrk@mail.ziglang.org
since the backends have different limitations, it makes sense for the AIR instruction to allow the flexibility, and the backend has the responsibility to fulfill the semantics

1635059981
andrewrk!~andrewrk@mail.ziglang.org
this is similar to the mul AIR instruction supporting arbitrary bit widths even though llvm only goes up to 128

1635081998
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: ok

1635082019
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
so memcpy is needed in the llvm backend then

1635082029
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
*when lowering a memset

1635092265
nmeum!~nmeum@barium.8pit.net
https://tpaste.us/5nRB I am missing something obvious here or why is the version field in the packed struct 0 and not 1 as I would expect it to be (80 is 0b01010000, thus I would expect version to be 0b01)

1635092272
nmeum!~nmeum@barium.8pit.net
*am I

1635094603
tgschultz!UserNick@047-034-058-084.res.spectrum.com
Assuming little endian arch: little endian bitfields are packed from the lower bits to the higher bits. your struct fields are reversed.

1635094627
tgschultz!UserNick@047-034-058-084.res.spectrum.com
well, your first 3 fields are anyway

1635094677
tgschultz!UserNick@047-034-058-084.res.spectrum.com
it's a footgun I've been meaning to do a writeup about. This is C's behavior, but I think zig should always pack bitfields top-to-bottom 

1635094919
tgschultz!UserNick@047-034-058-084.res.spectrum.com
oh wait, my bad. I didn't read all your code. You're manually extracting the bits.

1635094949
tgschultz!UserNick@047-034-058-084.res.spectrum.com
no, nevermind, that's just what you test against.

1635094966
tgschultz!UserNick@047-034-058-084.res.spectrum.com
I think my analysis is correct.

1635097330
nmeum!~nmeum@barium.8pit.net
tgschultz: oh, indeed. thanks!

1635107438
akovaski!~kovaski@2600:1702:1760:75a0:cc77:24a:cc9c:20f0
Running into a problem editing the zig compiler. Specifically, @tagName seems to not be null-terminated when compiled with the stage1 compiler. Does anybody know of any leads off-hand for why this might be different for stage1 and stage2? If not I can just implement a workaround for now.

1635107701
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
it probably is just a bug

1635107707
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
you can try to fix it, or workaround

1635112679
akovaski!~kovaski@2600:1702:1760:75a0:cc77:24a:cc9c:20f0
ok, I'll do a workaround for now, thanks. Implementing tagName is Zig was a fun exercise.

1635114316
haze!~haze@2603-7000-a300-1741-cc33-a769-2e10-c4b4.res6.spectrum.com
ifreund lol @ std.log changes, wasnt daurn the one fighting for the full 8?

