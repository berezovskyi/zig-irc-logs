1635811275
squeek502_!~squeek502@user/squeek502
there's a lot of else => @compileError("x not implemented for") that apply to f128 so i'd assume more f128 support would be appreciated

1635812099
andrewrk!~andrewrk@mail.ziglang.org
agreed with squeek502_ 

1635812494
squeek502_!~squeek502@user/squeek502
noticed they had already left IRC, i'll comment on the PR

1635814569
binarycat!~binarycat@35.24.192.117
what's the status of the C backend?

1635814768
binarycat!~binarycat@35.24.192.117
https://github.com/ziglang/zig/issues/3772# this is unclear

1635815542
andrewrk!~andrewrk@mail.ziglang.org
binarycat, it's available behind the flag `-ofmt=c` and currently passing 4% of the behavior test suite, with multiple active contributors

1635881143
andrewrk!~andrewrk@mail.ziglang.org
we have our first self-hosted CI job running :) 

1635881145
andrewrk!~andrewrk@mail.ziglang.org
https://ci.ziglang.org/ziglang/zig/1

1635881370
luuk!~luuk@user/luuk
Amazing news! Grats

1635881495
andrewrk!~andrewrk@mail.ziglang.org
finally we can run the CI jobs in debug mode, enable all the tests, and not run out of memory

1635881514
andrewrk!~andrewrk@mail.ziglang.org
going to hook up https://github.com/ziglang/gotta-go-fast/ now too :)

1635881597
luuk!~luuk@user/luuk
May even find some failing tests that have been disabled previously :)

1635881788
andrewrk!~andrewrk@mail.ziglang.org
indeed

1635888286
tane!~tane@user/tane
https://github.com/ziglang/zig/blob/d29871977f97b50fe5e3f16cd9c68ebeba02a562/lib/std/heap/arena_allocator.zig#L66

1635888310
tane!~tane@user/tane
has anything changed about that pattern or the problem that occurs when the embedded struct is copied to a value of the embedded structs type?

1635888330
tane!~tane@user/tane
(last time tried was around 0.6.0)

1635888843
squeek502!~squeek502@user/squeek502
tane, nothing has changed yet, the relevant accepted proposal is https://github.com/ziglang/zig/issues/7769 i believe

1635888958
squeek502!~squeek502@user/squeek502
there's also https://github.com/ziglang/zig/issues/10052 which might end up with no longer using @fieldParentPtr for allocators

1635889046
tane!~tane@user/tane
squeek502, thanks

1635889085
LewisGaul!~LewisGaul@64.103.40.27
Hey, I was here yesterday asking about my PR that adds f128 support to `std.math.exp2()` (#10046) - squeek502 thanks for the response on the PR :)  The main thing I was asking was whether the `std.math` implementations are actually used by the compiler, and how what I've done in `std.math` relates to https://github.com/ziglang/zig/issues/4026 which

1635889086
LewisGaul!~LewisGaul@64.103.40.27
is about the builtin functions such as `@exp2()`. Could anyone enlighten me on the relationship between the two?

1635889487
andrewrk!~andrewrk@mail.ziglang.org
LewisGaul, long term we are transitioning to math functions being provided by the language runtime (in compiler-rt) with weak linkage to allow a libc to override it. some std.math functions will be deprecated in favor of language builtins; others will not have a language builtin and remain in std.math

1635889495
andrewrk!~andrewrk@mail.ziglang.org
I believe @sqrt is an example of one already migrated to this way of doing things

1635889551
andrewrk!~andrewrk@mail.ziglang.org
reasoning for this is that some backends have instructions for math functions, such as hardware sqrt 

1635889566
andrewrk!~andrewrk@mail.ziglang.org
also llvm has instructions for math functions, so when targeting that backend, it makes sense to use them

1635889596
andrewrk!~andrewrk@mail.ziglang.org
since zig is general-purpose, we target a lot of different backends, some language primitives are high level

1635889756
LewisGaul!~LewisGaul@64.103.40.27
ok thanks for the context

1635889843
LewisGaul!~LewisGaul@64.103.40.27
what does that mean for implementation of maths functions - is there any need for the Zig implementation of them (e.g. for f128) in the long term?

1635889843
LewisGaul!~LewisGaul@64.103.40.27
I'm just trying to ascertain whether it's worth me adding tests and f128 support in `std.math` now

1635889921
LewisGaul!~LewisGaul@64.103.40.27
"we are transitioning to math functions being provided by the language runtime" - this makes it sound like a Zig implementation for each of the maths funcs will be needed, even if just as a fallback when not provided by the backend?

