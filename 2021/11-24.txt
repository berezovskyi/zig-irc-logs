1637712029
andrewrk!~andrewrk@mail.ziglang.org
what type would be used for the self parameter?

1637712101
marler8997!~marler899@204.229.3.4
*const T

1637712147
andrewrk!~andrewrk@mail.ziglang.org
hmmmm. will have to think about allowing writing undefined through that. in practice it would mean that actually 0xaa bytes are not written, and then we don't get safety

1637712176
andrewrk!~andrewrk@mail.ziglang.org
it's weird that you could pass a const pointer to a function and have it destroy the object being pointed to

1637712188
andrewrk!~andrewrk@mail.ziglang.org
although that is in fact what free() does

1637712198
Franciman!~Franciman@mx1.fracta.dev
is an AutoHashMap indexed by u32 a good candidate for memory efficient sparse arrays?

1637712199
marler8997!~marler899@204.229.3.4
and what the compiler does apparently

1637712213
andrewrk!~andrewrk@mail.ziglang.org
Franciman, yes

1637712225
Franciman!~Franciman@mx1.fracta.dev
thanks andrewrk, sorry, one more question

1637712237
Franciman!~Franciman@mx1.fracta.dev
what would be the complexity of random access?

1637712241
Franciman!~Franciman@mx1.fracta.dev
is it near O(1)?

1637712254
andrewrk!~andrewrk@mail.ziglang.org
yes

1637712268
Franciman!~Franciman@mx1.fracta.dev
awesome, that's what I am gonna use for my closure implementation then!

1637712271
Franciman!~Franciman@mx1.fracta.dev
many thanks

1637712276
andrewrk!~andrewrk@mail.ziglang.org
you may also want to consider AutoArrayHashMap which is essentially just an ArrayList with an index

1637712286
andrewrk!~andrewrk@mail.ziglang.org
if you want ordered entries, it's a nice data structure

1637712306
Franciman!~Franciman@mx1.fracta.dev
my use case is that I want to store escaped captured variables

1637712311
Franciman!~Franciman@mx1.fracta.dev
for a closure

1637712356
andrewrk!~andrewrk@mail.ziglang.org
marler8997, my point is if you have a pointer to a const local, and then the const local goes out of scope, you have a pointer to undefined memory

1637712361
Franciman!~Franciman@mx1.fracta.dev
I'll look into it, too. Thanks!

1637712618
marler8997!~marler899@204.229.3.4
sounds like you're making a distinction between invalidation an undefined memory.  i = undefined is "undefined memory" but not necessarily invalidateion (setting the memory to 0xaa in safe modes)

1637712679
marler8997!~marler899@204.229.3.4
in any case, if we had deinit(self: *const T), I suppose that would mean self.* = undefined would never set the memory to 0xaa, even in safe modes

1637712709
marler8997!~marler899@204.229.3.4
which means we lose some safety

1637712766
marler8997!~marler899@204.229.3.4
so I guess my preference is to go back to my original proposal which is to provide a way to release resources without invalidating...

1637712802
marler8997!~marler899@204.229.3.4
I love my const, don't take my const :'(

1637713029
andrewrk!~andrewrk@mail.ziglang.org
your file isn't const though, the state goes from open to closed

1637713399
cr1901!~cr1901@2601:8d:8600:911:a595:700d:9610:531d
What is the differenct between zig-cache and ~/.cache/zig?

1637713613
cr1901!~cr1901@2601:8d:8600:911:a595:700d:9610:531d
Well, zig-cache is per project, but why both?

1637713613
marler8997!~marler899@204.229.3.4
I don't the having the ability to invalidate something (set it to 0xaa) is more important than the readability that const provides.  If it were, then we should remove const from the language and make all memory mutable so we can invalidate it as soon as it's done being used.

1637713777
marler8997!~marler899@204.229.3.4
as an example, if you have a non-const value, you don't know whether or not you can pass it by value without looking at the definition.  Requiring File to be mutable means that developers will need to know the definition of File to now whether it can be passed by value.

1637713939
marler8997!~marler899@204.229.3.4
I should say that my sensibilities are informed by the fact that 99% of all cases where deinit is called in by a "defer" statement where the file lives in the same block on the stack, so invalidation is mostly pointless since there's no way to reference that memory (without some nefarious stack snooping)

1637714116
andrewrk!~andrewrk@mail.ziglang.org
cr1901, some stuff is independent of the project details, and so you save time not rebuilding it. For example, compiler_rt for the native host can be shared among all projects

1637714130
marler8997!~marler899@204.229.3.4
IMO invalidation is really only useful for the 1% of cases where lifetimes get more complex than a simple "defer close" block.  So in my mind, supporting const will aid in 99% of cases.

1637714133
andrewrk!~andrewrk@mail.ziglang.org
typically, c compilers will ship these files as part of their installation, but zig only ships source

1637714165
cr1901!~cr1901@2601:8d:8600:911:a595:700d:9610:531d
andrewrk: Ack, it ended up as part of my backups, but compared to sccache and zig-cache, the mem usage is minimal

1637714177
cr1901!~cr1901@2601:8d:8600:911:a595:700d:9610:531d
So I'm not gonna bother deleting it from the backup

1637714204
marler8997!~marler899@204.229.3.4
delete that shit

1637714219
marler8997!~marler899@204.229.3.4
you're not building enough zig code :)

1637714241
cr1901!~cr1901@2601:8d:8600:911:a595:700d:9610:531d
No, probably not... the zig-cache dirs are much larger lol

1637714251
cr1901!~cr1901@2601:8d:8600:911:a595:700d:9610:531d
(and are excluded from backups)

1637714720
devast8a!~devast8a@2001:470:69fc:105::3f46
Is there any reason we can't violate const and write over const when invalidating?

1637714760
andrewrk!~andrewrk@mail.ziglang.org
that's not really const then is it? that's mutable

1637714774
andrewrk!~andrewrk@mail.ziglang.org
why's it gotta be so complicated

1637714783
andrewrk!~andrewrk@mail.ziglang.org
deinit() is a mutating operation

1637714850
devast8a!~devast8a@2001:470:69fc:105::3f46
const in Zig means the memory is guaranteed not to change rather than say C++ the value doesn't change but the memory can?

1637715655
andrewrk!~andrewrk@mail.ziglang.org
I don't know how to answer that

1637715870
rom1504!rom1504@rom1504.fr
sounds like devast8a is talking about a const pointer in c++, where you can't change the value of the pointer but you can change the memory pointed by the pointer

1637715876
rom1504!rom1504@rom1504.fr
is that a thing in zig?

1637715976
rom1504!rom1504@rom1504.fr
(ie this https://stackoverflow.com/a/1143272/1658314 )

1637716106
andrewrk!~andrewrk@mail.ziglang.org
the language specification concept related here is "aliasing" and it's an area in zig that is not stable yet. there are still some aliasing decisions to be made

1637716758
rom1504!rom1504@rom1504.fr
interesting

1637719788
opDispatch!~opDispatc@user/opDispatch
so zig seems to use the fastcc all convention, right ?

1637719819
andrewrk!~andrewrk@mail.ziglang.org
opDispatch, the language does not define what calling convention will be used if unspecified

1637719914
opDispatch!~opDispatc@user/opDispatch
I've landed on a bug report today with LLVM ir that seemed to use fastcc... so even if it's explicitly set, is there any advantages of fastcc e.g on x86_64 and linux ?

1637719937
opDispatch!~opDispatc@user/opDispatch
(that was on zig GH)

1637719953
andrewrk!~andrewrk@mail.ziglang.org
here is some info: https://llvm.org/docs/LangRef.html#calling-conventions

1637720024
opDispatch!~opDispatc@user/opDispatch
yes I've read that but other sources seems to say that it's not so useful nowadays. that's why I ask to potential users who would know better, e.g by experience

1637720076
opDispatch!~opDispatc@user/opDispatch
notably the table in chapter 7 of https://www.agner.org/optimize/calling_conventions.pdf

1637722343
marler8997!~marler899@204.229.3.4
"deinit() is a mutating operation"...so not a case-by-case basis like SpexGuy suggested?

1637750529
daurnimator!~daurnimat@vultr.daurnimator.com
marler8997: andrewrk: making things *more* troublesome in terms of const-infection is that in zig, function arguments are always constant. so if e.g. you're going to call file.deinit(), then you need to take a `*File` rather than a `File` (or even a `*const File`)

1637751560
Franciman!~Franciman@mx1.fracta.dev
has anybody tried zig with openmpi?

1637754055
scriptdevil!~scriptdev@202.164.25.5
[ 99%] Building self-hosted component /home/scriptdevil/zig/zig/build/zig1.o

1637754104
scriptdevil!~scriptdev@202.164.25.5
Sorry - misclicked. But is that line supposed to take ~8GB of RAM? I am on an older laptop and thought I would spend the weekend hacking on zig

1637754121
scriptdevil!~scriptdev@202.164.25.5
This is zig0 trying to build zig1.o

1637754138
scriptdevil!~scriptdev@202.164.25.5
I even tried using a jemalloc LD_PRELOAD

1637755263
ifreund!~ifreund@user/ifreund
scriptdevil: sadly that is expected currently :/

1637755279
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig/issues/6485

1637755312
ifreund!~ifreund@user/ifreund
thre are several suggestions in how to work around this in that issue 

1637757071
bw!sid2730@user/betawaffle
Why is zig’s async/await functionality so much simpler than rust’s?

1637757198
ifreund!~ifreund@user/ifreund
it's not just the async/await, the rest of zig is also simpler than the rest of rust :P

1637759922
bw!sid2730@user/betawaffle
yes, i agree

1637759969
bw!sid2730@user/betawaffle
i mean... i really like rust, but they move so slowly

1637760145
ikskuh!~xq@v43666.php-friends.de
zig will move even slower at one point

1637760281
bw!sid2730@user/betawaffle
right, but rust is missing a bunch of stuff

1637760330
ikskuh!~xq@v43666.php-friends.de
zig does so as well

1637760335
ikskuh!~xq@v43666.php-friends.de
ACTION cries in address spaces

1637760478
Franciman!~Franciman@mx1.fracta.dev
ahah nooo ikskuh 

1637760487
ikskuh!~xq@v43666.php-friends.de
hello Franciman 

1637760494
Franciman!~Franciman@mx1.fracta.dev
hello! How are you?

1637760555
ikskuh!~xq@v43666.php-friends.de
pretty fine, just pissed at german covid regulations

1637760563
Franciman!~Franciman@mx1.fracta.dev
ehhh

1637760566
Franciman!~Franciman@mx1.fracta.dev
sorry

1637760576
ikskuh!~xq@v43666.php-friends.de
way to work just got 45 minutes longer

1637760590
ikskuh!~xq@v43666.php-friends.de
apart from that: hacking on zig stuff is pleasing, as usual

1637760596
ikskuh!~xq@v43666.php-friends.de
whereas hacking on c++ stuff is pain

1637760602
Franciman!~Franciman@mx1.fracta.dev
^^

1637760609
Franciman!~Franciman@mx1.fracta.dev
do you work with C++?

1637760621
ikskuh!~xq@v43666.php-friends.de
yeah, i get paid for doing C++Builder

1637760640
Franciman!~Franciman@mx1.fracta.dev
wow

1637760642
Franciman!~Franciman@mx1.fracta.dev
very nice

1637760647
Franciman!~Franciman@mx1.fracta.dev
you work on compilers!

1637760650
Franciman!~Franciman@mx1.fracta.dev
and ide

1637760654
ikskuh!~xq@v43666.php-friends.de
nah

1637760657
ikskuh!~xq@v43666.php-friends.de
i just have to use it

1637760659
ikskuh!~xq@v43666.php-friends.de
and it's horrible

1637760661
Franciman!~Franciman@mx1.fracta.dev
oh!

1637760664
Franciman!~Franciman@mx1.fracta.dev
sad

1637760665
ikskuh!~xq@v43666.php-friends.de
like

1637760671
ikskuh!~xq@v43666.php-friends.de
the best option is to fully disable code completion

1637760676
ikskuh!~xq@v43666.php-friends.de
best dev ux

1637760681
Franciman!~Franciman@mx1.fracta.dev
lol

1637760684
ikskuh!~xq@v43666.php-friends.de
is having *no* code completion compared to *any*

1637760836
fleg!64bf4386e9@user/fleg
isn't C++ Builder, like, 20 years old?

1637760906
ikskuh!~xq@v43666.php-friends.de
nah

1637760916
ikskuh!~xq@v43666.php-friends.de
the Borland Version yes, but you can work with that

1637760923
ikskuh!~xq@v43666.php-friends.de
the Embarcadero version is a Visual Studio clone

1637760928
ikskuh!~xq@v43666.php-friends.de
that is … horrible

1637760942
ikskuh!~xq@v43666.php-friends.de
i have about 6 NPPH

1637760945
ikskuh!~xq@v43666.php-friends.de
(null pointer per hour)

1637761201
fleg!64bf4386e9@user/fleg
that's a suprise, I thought that C++ Builder was dead and Embarcadero is only milking Delphi

1637761240
ikskuh!~xq@v43666.php-friends.de
well, they still "work" on the C++Builder

1637764552
companion_cube!~simon@user/companion-cube
bw: why is it simpler? because there's no borrow checker

1637764571
bw!sid2730@user/betawaffle
is that the only reason?

1637764600
companion_cube!~simon@user/companion-cube
idk, it's also somewhat different, there's no Future<> type

1637765897
ikskuh!~xq@v43666.php-friends.de
companion_cube: What is Future<>?

1637765928
companion_cube!~simon@user/companion-cube
well in rust, async works on functions that return Future<T> (a computation that will eventually yield a T)

1637765933
ikskuh!~xq@v43666.php-friends.de
because zig frames can be considered futures (which is what is returned by "ascync fun()")

1637765952
ikskuh!~xq@v43666.php-friends.de
i mean, it's the same in Zig in that regard

1637765959
ikskuh!~xq@v43666.php-friends.de
var future = async foo();

1637765960
ikskuh!~xq@v43666.php-friends.de
…

1637765964
ikskuh!~xq@v43666.php-friends.de
var value = await future;

1637766031
companion_cube!~simon@user/companion-cube
zig frames are more like coroutines, aren't they?

1637766056
ikskuh!~xq@v43666.php-friends.de
future and coroutine are orthogonal concepts

1637766057
companion_cube!~simon@user/companion-cube
like, yeah, they might return a value at some point, but they're allowed not to?

1637766063
ikskuh!~xq@v43666.php-friends.de
coroutines and threads are on the same axis

1637766063
companion_cube!~simon@user/companion-cube
I don't think so

1637766068
ikskuh!~xq@v43666.php-friends.de
while channels and futures are on the same

1637766084
ikskuh!~xq@v43666.php-friends.de
well

1637766091
ikskuh!~xq@v43666.php-friends.de
in zig every function returns a value

1637766099
companion_cube!~simon@user/companion-cube
coroutines can yield multiple values, futures can't

1637766101
ikskuh!~xq@v43666.php-friends.de
except for noreturn functions

1637766109
ikskuh!~xq@v43666.php-friends.de
await can only yield a single value

1637766125
companion_cube!~simon@user/companion-cube
but you can await several time the same frame,can't you?

1637766132
ikskuh!~xq@v43666.php-friends.de
no

1637766132
companion_cube!~simon@user/companion-cube
or am I that confused

1637766134
companion_cube!~simon@user/companion-cube
oh

1637766134
ikskuh!~xq@v43666.php-friends.de
yes

1637766136
companion_cube!~simon@user/companion-cube
it's resume taht can?

1637766148
ikskuh!~xq@v43666.php-friends.de
resume will jump back into a coroutine

1637766153
ikskuh!~xq@v43666.php-friends.de
but it will never return any value

1637766158
ikskuh!~xq@v43666.php-friends.de
while await will yield the value or suspend

1637766177
companion_cube!~simon@user/companion-cube
but then you must make sure that your frame behaves like a future and not a coroutine, right?

1637766208
ikskuh!~xq@v43666.php-friends.de
futures are the effect of a long taking process

1637766220
ikskuh!~xq@v43666.php-friends.de
while coroutine is the implementation of a concurrent process

1637766231
ikskuh!~xq@v43666.php-friends.de
(replace "long taking" with "concurrent" in the previous sentence)

1637766265
ikskuh!~xq@v43666.php-friends.de
suspend/resume are parts of the scheduler

1637766271
ikskuh!~xq@v43666.php-friends.de
while async/await are part of the future api

1637766380
companion_cube!~simon@user/companion-cube
but ultimately they're building on the same notion of frame

1637766392
ikskuh!~xq@v43666.php-friends.de
no

1637766392
companion_cube!~simon@user/companion-cube
in rust there's just nothing like that

1637766414
ikskuh!~xq@v43666.php-friends.de
suspend/resume works with "anyframe" which is a pointer to something that can be resumed

1637766432
ikskuh!~xq@v43666.php-friends.de
while `async foo()` returns `@Frame(foo)` which is a value that can be awaited

1637766444
ikskuh!~xq@v43666.php-friends.de
yes, you *could* resume `@Frame(foo)`, but it's most likely a bug

1637766519
companion_cube!~simon@user/companion-cube
oh I see. cool.

1637766532
companion_cube!~simon@user/companion-cube
so @Frame(Foo) really is a future

1637766535
ikskuh!~xq@v43666.php-friends.de
yeah

1637766542
companion_cube!~simon@user/companion-cube
anyframe->T or sth like that?

1637766543
ikskuh!~xq@v43666.php-friends.de
anyframe->T is also one

1637766554
ikskuh!~xq@v43666.php-friends.de
(it's a pointer to @Frame(f)`

1637766583
companion_cube!~simon@user/companion-cube
and the frame can use other async/await internally

1637766679
ikskuh!~xq@v43666.php-friends.de
yeah

1637766737
companion_cube!~simon@user/companion-cube
but that's all predicated on some scheduler being present?

1637766743
companion_cube!~simon@user/companion-cube
(just like in rust, ofc)

1637766749
ikskuh!~xq@v43666.php-friends.de
yes

1637766797
companion_cube!~simon@user/companion-cube
anyway, I stand corrected, there are futures in both cases :)

1637766799
companion_cube!~simon@user/companion-cube
thanks ikskuh 

1637766824
ikskuh!~xq@v43666.php-friends.de
sure :)

1637766828
companion_cube!~simon@user/companion-cube
(a lot of the complexity in rust comes from pinning, because futures are generally self-referencing which does not play well with the borrow checker)

1637766837
companion_cube!~simon@user/companion-cube
here it's more "don't move a frame" I imagine

1637766839
ikskuh!~xq@v43666.php-friends.de
we have the same problem with pinning

1637776902
slctvdplcate!~slctvdplc@103.146.3.90
Hello. Someone here to answer a question I had? Thanks.

1637777005
viashimo!~viashimo@user/viashimo
slctvdplcate: hi, the usual thing in IRC is to ask your question. if somebody knows they may answer. note that a lot of people lurk or are working so it may be some time before getting an answer

1637777235
slctvdplcate!~slctvdplc@103.146.3.90
viashimo Yeah that's fine.

1637777236
slctvdplcate!~slctvdplc@103.146.3.90
I was watching Andrew's recent talk in HMS on DOD. Had a question about a code snippet. Here's the bin with the specific part: https://zigbin.io/d021ab

1637777236
slctvdplcate!~slctvdplc@103.146.3.90
What kind of data type is this `Color`?

1637778494
ikskuh!~xq@v43666.php-friends.de
it's a "fit that damn enum on the slide type" ^^

1637778534
ikskuh!~xq@v43666.php-friends.de
so: not valid syntax, but enum

1637780047
slctvdplcate!~slctvdplc@103.146.3.90
Ah got it. I forgot that part of the talk. Thanks ikskuh.

1637782439
marler8997!~marler899@204.229.3.4
daurnimator and andrewrk, here's an example of that: https://github.com/ziglang/zig/blob/57e1f6a89f044e731fe60ce15e98b496dcbaa74f/lib/std/debug.zig#L969

1637783561
companion_cube!~simon@user/companion-cube
I'm only starting it, but lol @ the shirt

1637783766
marler8997!~marler899@204.229.3.4
andrewrk, following the same logic for File, do you also think all slices returned by Allocator should also be mutable?

1637783787
marler8997!~marler899@204.229.3.4
var buf = allocator.alloc(T, 100);  allocator.free(&buf);

1637783794
marler8997!~marler899@204.229.3.4
and allocator.free invalidates buf?

1637787448
Franciman!~Franciman@mx1.fracta.dev
is there any talk about zig std lib?

1637787463
Franciman!~Franciman@mx1.fracta.dev
data structures

1637793928
ikskuh!~xq@v43666.php-friends.de
andrewrk is on a issue killing spree right now :D

