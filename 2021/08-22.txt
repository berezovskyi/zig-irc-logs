1629601692
viashimo!~viashimo@user/viashimo
is it possible to create functions in a struct only if a comptime condition is met?

1629602283
andrewrk!~andrewrk@mail.ziglang.org
yes with usingnamespace. but that might not be advisable

1629602530
cr1901!~William@2601:8d:8600:911:8105:fac7:3460:a2e2
I think I saw that in a zig matrix library to give square matrices extra functions

1629602906
viashimo!~viashimo@user/viashimo
andrewrk: thanks. might not be advisable, since it's not really the intended use of usingnamespace ?

1629602920
viashimo!~viashimo@user/viashimo
cr1901: do you happen to recall which library?

1629602960
andrewrk!~andrewrk@mail.ziglang.org
viashimo, generally, usingnamespace can make a codebase more difficult to read (both for the programmer and for the compiler)

1629603004
cr1901!~William@2601:8d:8600:911:8105:fac7:3460:a2e2
viashimo: https://github.com/schroffl/zig-matrix/blob/master/src/main.zig#L48

1629603062
viashimo!~viashimo@user/viashimo
andrewrk: cr1901 thanks

1629603103
cr1901!~William@2601:8d:8600:911:8105:fac7:3460:a2e2
I only understand how to use usingnamespace from context like this. I think it "imports" everything in the higher scope to be directly usable in the current scope of your struct. Like "inheritance"

1629615341
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
question on the stdlib: there is no println because its useless or because it's not done yet?

1629618377
dutchie!~dutchie@user/dutchie
LukeSkwkr: you can use std.debug.print for "printf-debugging" or std.io.getStdOut().writer().print for actually writing output to stdout

1629618398
dutchie!~dutchie@user/dutchie
or std.log functions for logging

1629618422
dutchie!~dutchie@user/dutchie
the point is to give different options for different needs

1629618538
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
No I saw that, I just to like to type \n :)

1629639152
Nulo!~Nulo@user/nulo
Wasn't there a function in stdlib for trimming both sides of a string?

1629639194
Nulo!~Nulo@user/nulo
std.ascii.spaces + std.mem.trim but I swear there was a function for this...

1629639455
jcmoyer_!~jcmoyer@user/jcmoyer
Nulo: std.fmt.trim perhaps? It was removed a while ago though

1629639459
ifreund!~ifreund@user/ifreund
^

1629639464
Nulo!~Nulo@user/nulo
Possibly

1629642782
rtb!~calmdownb@li749-143.members.linode.com
hello all, i'm just getting started with zig+wasm. what's the correct way to share a chunk of memory between zig + JS? i want to be able to fill a buffer with command opcodes, and then call an export zig function to process said buffer.

1629651596
Nulo!~Nulo@user/nulo
Is there any place that Zig could have possibly saved the source code of a recently compiled project?

1629651790
Nulo!~Nulo@user/nulo
Eh, `strings /dev/drive | grep 'some string that identifies project'` works

1629651796
Nulo!~Nulo@user/nulo
Kind of

1629651812
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
did you accidently delete your source code?

1629651824
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I don't think zig saves the source, just the source locations

1629651887
Nulo!~Nulo@user/nulo
Accidentally more like "zig fmt failed for external reasons and my hipster editor didn't check if the process failed to start, saving an empty string overwriting everything"

1629651898
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
can your editor undo?

1629651906
Nulo!~Nulo@user/nulo
I closed it :P

1629651913
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does it save undo history?

1629651922
Nulo!~Nulo@user/nulo
I doubt it. Kakoune

1629651931
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
haha, thats exactly what I was guessing

1629651933
Nulo!~Nulo@user/nulo
Still, I did the strings thing which is super hacky but it.. worked

1629651955
Nulo!~Nulo@user/nulo
Hey now don't assume hipster editors. It could have been vis

1629651980
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
well, i'm using kakoune right now, and that has happened to me in the past, but I just undoed

1629652001
Nulo!~Nulo@user/nulo
`nothing left to undo` It doesn't seem it saves anything

1629652003
ifreund!~ifreund@user/ifreund
using git for literally everything also helps

1629652013
Nulo!~Nulo@user/nulo
Yeah that's what I figured

1629654768
Nulo!~Nulo@user/nulo
What could possibly cause a segfault when calling Allocator.dupe?

1629654798
ifreund!~ifreund@user/ifreund
the thing you are trying to dupe already being freed

1629654866
Nulo!~Nulo@user/nulo
Hmm, no, because I'm printing it right before it

1629654903
Nulo!~Nulo@user/nulo
It seems it isn't the dupe though. The stack trace points to an assignment inside a struct creations

1629654909
Nulo!~Nulo@user/nulo
*creation

1629654930
Nulo!~Nulo@user/nulo
.{ .paragraph = .{ .text = text } } // The second text

1629655190
Nulo!~Nulo@user/nulo
Def seems like a compiler bug, moving things around fixes it

1629655241
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah it probably is

1629655379
Nulo!~Nulo@user/nulo
Should I report it? There's *a lot* of similar but not exactly the same issues

1629655656
andrewrk!~andrewrk@mail.ziglang.org
Nulo, to be honest if it's a stage1 compiler bug it probably won't be fixed but rather stage1 retired in favor of stage2

1629655674
andrewrk!~andrewrk@mail.ziglang.org
apologies for the trouble

1629655707
Nulo!~Nulo@user/nulo
andrewrk: Np 

1629659469
noam!~noam@104.232.42.247
Nulo: It couldn't have been vis; vis wouldn't have done that ;)

1629659511
Nulo!~Nulo@user/nulo
It seems kak actually checks for exit code so it must have been something else; off topic though!

1629659655
noam!~noam@104.232.42.247
Ask in #kakoune /shrug

1629659674
noam!~noam@104.232.42.247
I no longer use kakoune [for anything major] so I left the channel a while back

1629659755
ifreund!~ifreund@user/ifreund
noam: does that mean you use acme for everything?

1629660093
noam!~noam@104.232.42.247
ifreund: mostly - on Linux, I use vis

1629660138
ifreund!~ifreund@user/ifreund
noam: why vis over kak? I've never taken the time to give vis a proper try as kak has done everything I wanted so far

1629660163
noam!~noam@104.232.42.247
Well, for starters, sam-style structured regex is <3

1629660234
noam!~noam@104.232.42.247
I've always found kakoune had more features I didn't need than ones I did; vis is a lot closer to giving me what I want without wasting my time with distractions

1629663011
marduk!~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net
++-

1629667504
Nulo!~Nulo@user/nulo
Is there any nice debuggers for Zig?

1629667708
Nulo!~Nulo@user/nulo
<- GDB lol

1629668407
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I wouldn't call it nice for zig

1629668629
Nulo!~Nulo@user/nulo
It is nicer than I thought it would be

1629669002
noam!~noam@104.232.42.247
GDB is no less nice for Zig than for other languages, I'd think

1629669066
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
p x.y() does not work, you can't use builtins such as @bitCast

1629669105
noam!~noam@104.232.42.247
x.y() for methods, not function pointers, I assume?

1629669115
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes

1629669122
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and its really annoying with intrusive stuff

1629669148
noam!~noam@104.232.42.247
On that note; zig still uses the same syntax for calling a fn pointer as a method?

1629669153
noam!~noam@104.232.42.247
fn pointer field*

1629669155
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
like this, I want to be able to go from a Value to a payload, but that requires https://github.com/ziglang/zig/blob/master/src/value.zig

1629669191
noam!~noam@104.232.42.247
if you can make stage2 generate acid info, I wonder if we could make x.y() work...

1629669214
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
first, there has to be documentation for acid info :P

1629669225
noam!~noam@104.232.42.247
I mean, there is

1629669233
noam!~noam@104.232.42.247
see acid(1)

1629669245
noam!~noam@104.232.42.247
It describes the language, not just the interface

1629669341
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sure, but that is not acid info, thats the debugger. I do not know how to add debuginfo to executables, and I don't really want to read the c/go compiler to figure that out.

1629669352
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
a.out(6) has some cryptic stuff, but its pretty confusing

1629669364
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or maybe I should read libmach

1629669737
noam!~noam@104.232.42.247
g-w1: it's the same thing.

1629669745
noam!~noam@104.232.42.247
the acid language is what you produce

1629669754
noam!~noam@104.232.42.247
see the kencc acid output for examples

1629669759
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in the binary?

1629669761
noam!~noam@104.232.42.247
You don't add debug info to executables

1629669774
noam!~noam@104.232.42.247
You produce .acid files instead

1629669818
noam!~noam@104.232.42.247
see e.g. 7c -a ./some/file.c

1629669825
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
then what are the spsz and pcsz sections in the binary?

1629669831
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks for the info, i'll look into it

1629669880
noam!~noam@104.232.42.247
a.out(6) BUGS: There is no type information in the symbol table; however, the -a flags on the compilers will produce symbols for acid(1)

1629669893
noam!~noam@104.232.42.247
The binary stores symbol info, I think, but only name->addr mappings

1629669910
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I think also program counter -> name mappings

1629669949
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but those last 3 paragraphs are super confusing for me

