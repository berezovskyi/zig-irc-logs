1610239720
dkibi
marler8997: thanks, I think I need to understand the semantics of zig better to fully grok this, but it's certainly a "huh" when someone tries to use intuition from other languages

1610239749
dkibi
(that said, so far I had three instances of "I wonder if I can" and the compiler said "yes", which felt amazing)

1610244307
daurnimator
andrewrk: marler8997: yes on windows you do a syscall per ".."

1610244807
olabaz
How can I use "pub const Config = struct { }" inside of std/heap/general_purpose_allocator.zig in order to initialize my general purpose allocator?

1610244814
marler8997
daurnimator, huh?  I tested and it looks like windows doesn't do that

1610245111
olabaz
I want to pass it into: pub fn GeneralPurposeAllocator(comptime config: Config)

1610245381
daurnimator
olabaz: `var mygpa = GeneralPurposeAllocator(Config{.foo = some_value}){};`

1610245394
daurnimator
olabaz: or just `var mygpa = GeneralPurposeAllocator(.{.foo = some_value}){};`

1610245487
olabaz
daurnimator: If I want the default config can I just do Config{}?

1610245550
olabaz
I get undeclared identifier Config

1610245580
fengb
You can do GeneralPurposeAllocator(.{}){}

1610245628
olabaz
ah ok, but what if I wanted to use Config, it is pub after all so I should be able to call it directly right?

1610245897
daurnimator
olabaz: you don't call Config, you instantiate it

1610245912
pixelherodev
It's a structure, not a function

1610245935
olabaz
ok how do I use it?

1610246044
olabaz
In the allocator code they do: const test_config = Config{};

1610246059
olabaz
but this gives me undeclared identifier

1610246221
daurnimator
olabaz: just leave it anonymous

1610246908
olabaz
I will but it seems like I should be able to do something like std.heap.Config or something since it's pub?

1610246948
daurnimator
na its in the general_purpose_allocator file; which doesn't seem to be exposed anywhere

1610246973
olabaz
oh ok

1610278541
tyrion-mx
Hello, why comptime fields of a struct require an initializer?

1610278633
tyrion-mx
I mean in the declaration of the struct

1610289729
ifreund
Nypsie[m]: o7 I'm around now

1610291676
FireFox317
andrewrk, thanks for merging my PR :)

1610295291
olabaz
Hi, I have a var c: anyerror!u8 and I tried doing if (c == '\n') but I get error ./src/main.zig:13:18: error: integer value 10 cannot be coerced to type 'anyerror!u8'

1610295386
olabaz
should I be using @as(u8, c)?

1610295402
olabaz
I mean  @as(u8, '\n')

1610295447
FireFox317
olabaz, you can only set anyerror!u8 as the return type of a function, its not valid to use the `!` for types of variables etc

1610295528
olabaz
FireFox317: oh I see, thanks for the clarification

1610301739
olabaz
what's the difference between @cos and std.math.cos?

1610301815
olabaz
Also, why isn't it implemented for comptime_float?

1610302331
ifreund
FireFox317, olabaz: you totally can assingn error sets to variables, but the coerceion isn't automatic in that specifc case

1610302419
ifreund
also you cant use the == operator on error sets

1610302485
ifreund
so you'd need if (if (c) |value| value == '\n' else |_| false) { ... }

1610302503
ifreund
though this certainly wouldn't be idomatic

1610302667
olabaz
yeah I just changed it to a u8

1610302688
olabaz
I was using the error because I was reading from stdin

1610302704
olabaz
but I just put a try before it: c = try stdin.readByte();

1610302721
ifreund
yeah, usually you want to unwrap errors right away

1610302913
seadragon-droid
Is it possible to add methods (decls) to a type dynamically at comptime?

1610302999
ifreund
seadragon-droid: not currently, though there is an open proposal to allow that I believe

1610303771
seadragon-droid
OK thanks, I think I found it (#6709) I'll play around with some of the workarounds alexnask showed in #383 and see if they can be used to emulate dynamically-added methods

1610303876
FireFox317
ifreund, oh yeah ofcourse that is possible haha

1610307262
Nypsie[m]
ifreund: o/ Wanted your opinion on something wasm-backend related. But instead asked Kubkon to put it up as a discussion point during the next stage2 meeting, so it's not really needed anymore :)

1610308162
Nypsie[m]
Correct (or on an error)

1610308314
olabaz
ok, also I'm reading stdin byte by byte and it crashes when I enter Ctrl+D

1610308346
olabaz
ah it gives error on EOF

1610309712
__foobles
hello :)

1610312998
leeward
Is there a better way to iterate over the possible values of an enum than @typeInfo(E).Enum.fields?

1610313352
leeward
I guess std.meta.fields(E) gets me that, but the thing I want to avoid is the @intToEnum call on the EnumField.value.

1610313973
ifreund
leeward: pretty sure @field(E, field_name) works too

1610314031
ifreund
though I suppose it isn't any less code

1610314631
leeward
I feel like there should be an iterator in std.meta.

1610314678
leeward
Maybe I'll come up with something genericizable.

