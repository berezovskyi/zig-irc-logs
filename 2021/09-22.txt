1632274498
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
Tekk, what do you mean by "a C string?" Is it an arbitrary non-0 bytes followed by a 0 byte?

1632274587
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
its a [*:0]const u8

1632274611
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
Tekk: the best way is to do print("{s}\n", .{mem.span(string)});

1632274627
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
span takes a "c string" and converts it to a nice zig slice

1632274930
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Oh, nice.

1632274949
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
and yes davidfetter_work. In this particular case the output of an strerror in a lib I'm using.

1632301702
ifreund!~ifreund@user/ifreund
Tekk, g-w1: print("{s}\n", .{c_string}); should work fine

1632301733
ifreund!~ifreund@user/ifreund
std.fmt assumes 0 termination if not provided with a length

1632319818
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
ifreund, Magic. I swear that didn't work yesterday

1632319821
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Seems to this morning though

1632321711
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig does not actually support wchar_t, right?

1632321734
ikskuh!~xq@2a0d:5940:6:163::ad7e
so, we don't have any way to produce nice wchar_t string literals

1632322808
ifreund!~ifreund@user/ifreund
ikskuh: use a function taking a comptime slice: w("string literal")

1632322820
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, i have that now

1632322825
ikskuh!~xq@2a0d:5940:6:163::ad7e
but std doesn't contain one, right?

1632322829
ikskuh!~xq@2a0d:5940:6:163::ad7e
or i've overseen it

1632322835
ifreund!~ifreund@user/ifreund
not to my knowledge

1632322841
ikskuh!~xq@2a0d:5940:6:163::ad7e
(and no, utf8ToUtf16LeStringLiteral isn't supporting wchar_t)

1632322855
ikskuh!~xq@2a0d:5940:6:163::ad7e
okay, so i could add `std.c.wideCharLiteral()`

1632322913
kiedtl!~kiedtl@kisslinux/kiedtl
How does one construct a comptime slice from another one, though?

1632322931
kiedtl!~kiedtl@kisslinux/kiedtl
ikskuh: mind if I see that function? j/c

1632322953
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://zigbin.io/e29c8c

1632322954
ikskuh!~xq@2a0d:5940:6:163::ad7e
sure

1632322978
kiedtl!~kiedtl@kisslinux/kiedtl
Thanks!

1632322981
kiedtl!~kiedtl@kisslinux/kiedtl
interesting, zig bin

1632322991
ikskuh!~xq@2a0d:5940:6:163::ad7e
it's imho one of the best use cases for comptime

1632323003
ikskuh!~xq@2a0d:5940:6:163::ad7e
"transform generic data into a platform specific format"

1632323026
ifreund!~ifreund@user/ifreund
kiedtl: the key feature is that returning a pointer to "stack" memory is totally fine at comptime

1632323036
kiedtl!~kiedtl@kisslinux/kiedtl
Ahh

1632323040
kiedtl!~kiedtl@kisslinux/kiedtl
makes sense

1632336931
andrewrk!~andrewrk@mail.ziglang.org
one way to think about it is comptime values have the same lifetime as string literals

1632340687
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I thought my random number generator got borked by a Zig upgrade, but it looks like it's actually just sensitive to some environmental condition that's different today from when it was working.

1632340748
earnestly!~earnest@user/earnestly
A random random number generator

1632340770
earnestly!~earnest@user/earnestly
(Guaranteed to be four)

1632340790
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Yeah, that's the problem with TRNGs. It's hard to tell when they're misbehaving.

1632340871
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I do wonder if that fair roll of the dice in the XKCD was a d10. Seems like it could have been 1d6 instead.

1632341374
tane!~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de
leeward, is it your own PRNG algorithm or is there some reference implementation?

1632341412
tane!~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de
ah, it's hardware hm

1632341413
tane!~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de
:)

1632341499
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Yeah, I thought maybe the Zig version change did something subtle to volatile, but it looks like it's just variability in the hardware.

1632341536
Gliptic!~glip@irc.glip.cc
volatile in a PRNG, eh?

1632341543
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Not a PRNG

1632341604
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
volatile pointers being used to access control registers for things like the clocks and timers

1632341622
Gliptic!~glip@irc.glip.cc
so it's some entropy extractor

1632341652
tane!~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de
leeward, have you run the output against these statistical test suites (don't remember the name, but there are some that run a multitude of tests)

1632341679
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Gliptic: I actually have a function called randomnessExtractor (implementing von-Neumann randomness extraction)

1632341736
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
tane: Yeah, I'm using the FIPS 140-1 tests. It was passing a few days ago and now it's (barely) not. That's why I thought I had a problem in the first place. I don't actually need a particularly good RNG for this application though, so it's probably fine.

1632341771
tane!~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de
cool

1632341774
Gliptic!~glip@irc.glip.cc
how do you estimate entropy

1632341789
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That's the fun part. I don't.

1632341812
Gliptic!~glip@irc.glip.cc
yeah, so, there may be hardly any entropy put in

1632341922
Gliptic!~glip@irc.glip.cc
von-Neumann extractor needs quite a lot of entropy, continuously

1632341963
Gliptic!~glip@irc.glip.cc
it requires successive bits to be uncorrelated, that's not the case for some timers/clocks

1632341965
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It's possible. The paper that describes this method of random bit generation says "For an application that requires cryptographic secure random numbers [which is not my application], it is necessary to create a model of the system and evaluate the entropy that is generated."

1632341969
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Of course, it doesn't do that.

1632341999
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Gliptic: Yeah, I'm not actually using the von Neumann extractor. It makes things worse.

1632342006
Gliptic!~glip@irc.glip.cc
it's pretty much always better to just stuff the "true" randomness you extract into e.g. a stream cipher

1632342009
Gliptic!~glip@irc.glip.cc
and get the actual bits from that

1632342047
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
The chip manufacturer claims that the clocks are uncorrelated, but I'm skeptical.

1632342055
Gliptic!~glip@irc.glip.cc
e.g. pretty much what /dev/urandom does

1632342078
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I have been thinking about doing that, but I only need somewhere from 3 to 15 random bits per system boot.

1632342108
Gliptic!~glip@irc.glip.cc
ok, so this is embedded

1632342115
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Also, I have very strict power and space requirements, and I'm not using these numbers for anything cryptographic.

1632342123
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Yeah, very embedded.

1632342260
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
The paper, if you're interested: https://www.ti.com/lit/an/slaa338a/slaa338a.pdf

1632342276
Gliptic!~glip@irc.glip.cc
I see

1632343786
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ifreund: i see, cool

1632344741
bgiannan!giann@2a01:4f8:141:1272::2
how can i print the path of std.fs.cwd() ?

1632344763
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
std.os.getcwd

1632344838
andrewrk!~andrewrk@mail.ziglang.org
that's the posix layer. generally it's better to start with the cross platform layer

1632344845
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hmm, where is that?

1632344849
andrewrk!~andrewrk@mail.ziglang.org
std.process

1632344890
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hm, seems std.os.getcwd is not-only posix

1632344901
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
std.process.getCwd just calls std.os.getCwd, but maybe process is better anyways

1632345048
andrewrk!~andrewrk@mail.ziglang.org
there is also std.process.getCwdAlloc

1632345053
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yep

1632351589
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
hello people, question: if I have a C submodule in my project how can include it without an absolute path?

1632351679
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
I want to do this but cant: const picohttpparser = @cImport(@cInclude("./submodules/picohttpparser/picohttpparser.h"));

1632351844
ifreund!~ifreund@user/ifreund
errantmind: you need to use -I ./path/to/submodule/header or if using a build.zig LibExeObjStep.addIncludeDir()

1632351961
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
ifreund: alright, will try that out

1632352396
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
ifreund: great! got it working

1632352419
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
ifreund: thanks

