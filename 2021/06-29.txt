1624935312
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: thank you for the update

1624959048
daurnimator!~daurnimat@vultr.daurnimator.com
hmm, I just got added as a moderator of /r/learnzig and accepted it without thinking. is that space known?

1624962848
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
@daurnimator: https://www.reddit.com/r/Zig/comments/oa2th7/got_ownership_of_rlearnzig_welcome_to_all/

1624962895
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I have no idea what's going on but some person banned from r/zig making r/learnzig looks a bit suspicious

1624962900
daurnimator!~daurnimat@vultr.daurnimator.com
indeed

1624977825
bw!sid2730@user/betawaffle
i see that `clone` is implemented in assembly. is there no other way to use the clone syscall "correctly" in zig without assembly?

1624977993
ifreund!~ifreund@user/ifreund
bw: liunx has a stable syscall abi, so the zig std does the same thing that libc does and uses this stable abi through assembly

1624978010
ifreund!~ifreund@user/ifreund
the other option is linking and calling in to libc which will just do the same thing internally

1624978033
bw!sid2730@user/betawaffle
right, i'm talking about the funky stack stuff it has to do

1624978129
ifreund!~ifreund@user/ifreund
oh right, clone is more special than most other syscalls

1624978244
ifreund!~ifreund@user/ifreund
bw: I'm not very familiar with the low level details of how clone works tbh, I see an example usage in std.Thread and an extern definition in lib/std/os/linux/x86_64.zig

1624978438
ifreund!~ifreund@user/ifreund
ah I see, that extern definiton matches that implemenation in assembly you were talking about

1624983364
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
.np

1624988274
andrewrk!~andrewrk@mail.ziglang.org
huge milestone for linking on macos: https://github.com/ziglang/zig/pull/9266

1624988721
ifreund!~ifreund@user/ifreund
\o/

1624994521
Ristovski!~Ristovski@hellomouse/perf/ristovski
Hmm, can someone remind me how to add support for defining flags when running `zig build` that I can check for in the source code? (kinda like ifdefs)

1624994942
freshcoffee!~fresh@user/freshcoffee
Ristovski: old but still working boiler plate,

1624994956
freshcoffee!~fresh@user/freshcoffee
build.zig: see "hello" related stuff: https://zigbin.io/4443d1

1624994972
freshcoffee!~fresh@user/freshcoffee
main.zig: https://zigbin.io/746ca2

1624995000
Ristovski!~Ristovski@hellomouse/perf/ristovski
freshcoffee: Thanks!

1624995146
Ristovski!~Ristovski@hellomouse/perf/ristovski
freshcoffee: do those get passed to C source files as well?

1624995159
Ristovski!~Ristovski@hellomouse/perf/ristovski
or do I need some cDefine()

1624995194
freshcoffee!~fresh@user/freshcoffee
afaik there is no automagic between build_options and cimports

1624995204
freshcoffee!~fresh@user/freshcoffee
or c compiling

1624995366
Ristovski!~Ristovski@hellomouse/perf/ristovski
I see, thanks

