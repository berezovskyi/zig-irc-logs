1613692819
v0idify
sadge

1613692867
v0idify
i would leave it even if it's outdated for people who might come with some zig code that's older and applies to it, i think it's an important page to have

1613698697
karrick
Has anyone built Zig compiler using MacPorts before?

1613698841
karrick
in other words, by using something along the lines of `cmake .. -DCMAKE_PREFIX_PATH=/opt/local -DCMAKE_PROGRAM_PATH=/opt/local/libexec`

1613699904
karrick
Never mind. I am making progress, so I am on the right path.

1613704432
andrewrk
chances looking good I'll get zig building again in ast-memory-layout branch tonight

1613704471
andrewrk
after that, remaining tasks are: fix whatever regressions happened, fix remaining zig fmt test cases, and get vexu's translate-c branch landed (#7479)

1613704596
g-w1
oh nice you factored all the builtin boilerplate out.

1613705028
andrewrk
it's cool that this non-master branch has 4 contributors in it other than me

1613705045
andrewrk
really appreciate the group effort here

1613705148
karrick
How many folks here build zig compiler on Mac? I tried using MacPorts' version of LLVM, Clang, but running into build issues because libraries and headers do not have matching paths in the Findclang.cmake and friends. I am now just going to skip MacPorts and just build the entire LLVM, Clang myself...

1613705226
andrewrk
karrick, last I checked it worked fine with llvm, clang, lld from homebrew

1613705240
andrewrk
building them from source yourself is always an option though

1613705291
karrick
Thanks; if plan B does not work, I have a plan C in standby

1613706212
mikdusan1
what macos version?

1613706577
karrick
Big Sur 11.2.1

1613706601
mikdusan1
arm64 ?

1613706672
karrick
I used to MacPorts back when Darwin first came out in early 2000s, but switched to home brew a number of years ago when they had newer ports. Decided to give MacPorts another try actually earlier today, and decided to give building Zig a whirl using it.

1613706719
karrick
No, I'm on a 2.4 GHz 8-Core Intel Core i9 with 32 GiB. This is going to take a while...

1613706775
karrick
Are you building on the newer M1 chip?

1613706776
andrewrk
about an hour, usually

1613706789
mikdusan1
fyi today macports has `clang-11` and `llvm-11` which are based on 11.0.1 sources. But careful, macports may decide to bump to 11.1.0. I don't know what their policy is on that.

1613706873
karrick
Hm, I am actually building against llvm-11 on HEAD... So maybe this is just a test run and won't work...

1613706965
mikdusan1
if building from llvm-project sources use tag llvmorg-11.0.1  ; zig's next

1613706973
mikdusan1
s/changing/tracking/

1613706979
karrick
thanks

1613707098
mikdusan1
if you hit a snag, I just put up some bins for another dev, and look at the 01-command_line_log.sh, I captured all the "exec" done from my build script,

1613707146
mikdusan1
and the main goal of building this way was to NOT use macports or brew. basically all that should be needed is xcode, a cmake binary, llvm-project

1613707176
mikdusan1


1613707193
karrick
That is great news. I'm following this guide:

1613707215
mikdusan1
ah ok

1613707260
karrick
just saw your google drive link. Taking a look...

1613707754
karrick
So is this a sub-project effort of Zig to minimize build time dependencies? I'm wondering whether porting to openbsd would be feasible? I'm sure the compiler can be easily ported, but the real work is upgrading the Zig standard library to work with OpenBSD-isms...

1613707809
mikdusan1
I am unsure of what "sub-project" is?

1613708084
karrick
I don't have a formal definition of "sub-project." Just wondering whether this is a concerted effort to reduce the build time dependencies for easier porting.

1613708244
karrick
Are you capturing your build scripts in a github repos?

1613708259
karrick
Or just in this shared directory structure with output blobs?

1613708313
mikdusan
if I get your meaning, then not really. Any platform needs to supply those deps. Sometimes people work together and share those deps amongst themselves.

1613708420
braket
lmao, randomly seeing a u29 just chilling as some parameter's type in stdlib has got to be one of the funniest thing I've ever seen.. Zig is just too cool lol

1613708485
karrick
gotta save those extra bits for when you might need them... ;)

1613708501
mikdusan
zig already has `zig-bootstrap` repo. but yeah, my custom scripts are git'd

1613708962
karrick
ooh, I need to take a look at zig-bootstrap. Thank you!

1613709054
daurnimator
braket: u29 is used for alignment, because that's what LLVM does. though IMO it doesn't make sense

1613709066
daurnimator
there are CPUs that exist with higher alignment requirements

1613709321
braket
ahh i see. but what a random number 29 is though; like it just

1613717782
andrewrk
woot, got zig building finally in the ast-memory-layout branch

1613717799
andrewrk
I wonder how many regressions there are

1613719578
andrewrk
posted a zig fmt benchmark for this branch:

1613720254
ifreund
andrewrk: nice work! \o/

1613720264
ifreund
I should have some more time for zig fmt over the weekend

1613720795
andrewrk
sweet! I'll work on stage2 test case regressions in the meantime

1613746283
zags
what's the idiomatic "pointer to anything, I'll cast you later" in zig? I have a rare instance of needing the equivalent of void*

1613746348
ifreund
zags: probably [*]u8

1613746384
ifreund
be careful about alignment of course

1613746616
zags
Well, this is a field that holds pointer to anything. What it is, is encoded elsewhere. So when I set the field, I'll ptrcast something that's correctly aligned already, no?

1613746642
zags
Same when casting back, wouldn't the alignment be correct?

1613746671
ifreund
indeed

1613746696
zags
wait, maybe usize is the right thing? That's what @frameAddress, etc returns

1613746709
ifreund
oh yeah usize is also a good choice

1613746724
zags
alright, thanks (again!)

1613746727
ifreund
[*]u8 is more if you want to slice it

1613746732
zags
ah right

1613746750
ifreund
usize is what I translate user_data void pointers to for zig-wlroots

1613746779
ifreund
(well, the ones I can't nicely abstract over that is)

1613750612
v0idify
is there a helper to read until a character/newline and alloc for File?

1613750664
dutchie
io.Reader.readUntilDelimiterAlloc

1613750671
v0idify
yeah sorry i just realized

1613750723
dutchie
dw

1613751666
v0idify
i'm still getting EOF after seeking when reading a file, what should I do?

1613765994
leroycep
v0idify: could you use `readUntilDelimiterOrEofAlloc`?

1613768201
andrewrk
wow, brilliant, vexu already has all the translate-c tests passing in ast-memory-layout branch

1613768402
ifreund
very nice :)

1613768453
ifreund
andrewrk: I'm working on the trailing doc comment fixup by the way (though half of me thinks they should be a compile error, I saw you added explict support in the parser)

1613768484
andrewrk
by trailing, you mean same-line ones?

1613768506
ifreund
yeah

1613768521
ifreund
they zig fmt tests want to move them before the decls

1613768521
andrewrk
hmmm. making them a parse error sounds like a reasonable proposal

1613768564
andrewrk
allowing them prompts a few questions, such as, how should generated docs represent it when there are doc comments before as well as same line

1613768592
andrewrk
it might be really nice to do same-line doc comments for parameters though

1613768627
ifreund
I don't think we support them for parameters

1613768640
ifreund
only for var decls and struct fields

1613768674
ifreund
search for parseAppendedDocComment() in parse.zig

1613768845
andrewrk
ah I see

1613769046
ifreund
or nevermind, we don't support them on struct fields yet post-rework

1613769132
ifreund
we do support them after extern function decls though :D

1613769189
ifreund
I'd be happy to remove all support, though I don't want to make functional changes from master without the go-ahead from you

1613769427
andrewrk
go ahead and make same-line doc comments parse errors

1613769571
ifreund
:)

1613771076
noam
ifreund, andrewrk: are same-line non-doc comments okay? Or should those error too?

1613771087
noam
I feel like for consistency prohibiting both on the same line makes sense

1613771092
noam
It also removes abiguity...

1613771108
ikskuh
what ambiguity?

1613771135
ifreund
noam: I see no reason to disallow those

1613771145
ifreund
they are very useful

1613771148
noam
Ah, hm. I take that back; ambiguity is only a problem for doc comments

1613772167
ifreund
zig fmt is getting pretty close. Main things left are proper handling of comma separated lists (e.g. wrapping and inserting a trailing comma if line comments are present) and the newish feature allowing columns in list literals

1613772199
ifreund
other than those two features I think it's just bugfixes for what we already have implemented

1613772236
ifreund
off to bed now though

1613773057
andrewrk
good night!

1613773847
v0idify
i love how this channel is a mix of "user-land" stuff and compiler stuff

1613777674
v0idify
how can i compile stage2 with <6GB RAM?

1613778145
andrewrk
v0idify, that's something we're working towards, but not capable of yet

1613778166
andrewrk
we're using lots of ram as a crutch to get the language done faster

1613778208
v0idify
andrewrk, does building stage2 with stage2 take less RAM?

1613778217
andrewrk
rest assured there are significant efforts underway towards better resource utilization

1613778222
v0idify
\o/

1613778233
andrewrk
stage2 can't build stage2 yet, but, yes it is significantly improved both in terms of perf and ram

1613778244
v0idify
:D

1613778342
mikdusan1
zig -target mos6502-appledos-freestanding, when? :P

1613778374
mikdusan1
oh that would be `-target mos6502-freestanding`

