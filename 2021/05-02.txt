1619914806
oats
is there a way I can tell zig not to optimize away a variable?

1619914832
oats
eg, if it appears unused to the compiler

1619914836
g-w1
std.mem.doNotOptimizeAway ;)

1619914866
oats
lol that's an amazing solution

1619914867
oats
I love it

1619914881
g-w1
what does rm even do?

1619914895
g-w1
is it cross-platform?

1619914924
oats
rm?

1619914938
g-w1
: [val] "rm" (val)

1619916116
oats
huh, I've got no idea what's going on there

1619916131
oats
I think it's "putting" `val` into the `rm` register

1619916137
oats
still don't understand it though

1619917642
kiedtl
How does one cast an integer to an integer type of a lower width while truncating bits that don't fit? (something like @intCast that never panics)

1619917684
g-w1
@truncate

1619920486
cr1901_modern
Is there a bitvector library for zig (didn't find one through GH search, doesn't mean it doesn't exist)? I want to do base-2 modular arithmetic.

1619920498
cr1901_modern
I can create my own []u1 matrices if I must (without the packing optimization)

1619920957
daurnimator
cr1901_modern: std.PackedArray ? or std.EnumSet ?

1619921068
kiedtl
cr1901_modern: You could use a C library without too much of a hassle... I guess?

1619923469
cr1901_modern
ack I'll take a look

1619927805
kiedtl
What's the ziggiest way to iterate over an integer range?

1619928021
daurnimator
Use a while loop?

1619928855
andrewrk
using zig's general purpose allocator leak checker + rr-project to get a debugger to print information at the callsite of the leaked memory allocation:

1619929111
daurnimator
oh cool; rr finally support amd: > Experimental support for AMD Zen-based CPUs was merged on September 18, 2020.

1619929386
daurnimator
TIL -fno-semantic-interposition

1619932297
kiedtl
daurnimator: so 'var foo = 0; while (foo < max) : (foo += 1) {}'? I was hoping that zig had something like `for (0..1) |index| {}' that scoped the index var

1619943490
daurnimator
kiedtl: correct. many people have said the same thing

1619956896
mikdusan
daurnimator: would you have some time to grab linux `lscpu` and /proc/cpuinfo output from some of those arm servers?

1619956938
mikdusan
pr could use the samples:

1619957439
daurnimator
mikdusan: okay. which do you want?

1619957498
daurnimator
looks like you have Cavium already

1619957524
mikdusan
yeah I guess falkor would do it

1619960916
v0idifyy
kiedtl, you can wrap the whole thing in a { block }

1619963360
daurnimator
mikdusan: I'm not sure if falkor is an option I have?

1619963386
mikdusan
daurnimator: no probs. I can do a tmp pr for ci-script to grab it. Thanks for looking!

1619963507
daurnimator
mikdusan: current CPU list:

1619965568
marler8997
is this expected, when I call an async function twice in a row, each call gets a new @frame() pointer, but when I call it multiple times in a loop, each call returns the same @frame pointer...?

1619965891
marler8997
there's something really screwy with the async implementation at the moment

1619965955
fengb
That sounds correct. Loops reuse the memory space because the stack is invalidated

1619965982
marler8997
the stack is invalidated after every function call regardless of whether you call it in a loop

1619966002
marler8997
I don't understand the lifetime of the memory pointed to by @frame()

1619966052
fengb
@frame() is just a pointer to where you dump the frame

1619966077
marler8997
but it's not a pointer to the stack is it?

1619966083
fengb
When you do “var foo = async bar()”, that sets the frame onto the current stack

1619966097
fengb
Depends on where you stick the async call

1619966105
marler8997
can't be

1619966118
marler8997
oh wait

1619966127
marler8997
you're saying it reserved space on the stack while the async call is alive

1619966143
marler8997
so if you returned from your current function where you called async, then the async frame itself would also be invalidated correct?

1619966144
fengb
No, it reserves space when the stack is alive

1619966156
fengb
After the block returns, that async frame is use after free

1619966165
marler8997
"the block"?

1619966178
fengb
The block where you assigned the async

1619966192
marler8997
ah

1619966203
fengb
There’s no hidden allocation happening. You need to manually hoist the frame outside of the loop

1619966212
marler8997
does the documentation say this?  I was reading it and don't remember it saying that

1619966484
fengb
Hmm I don’t see anything

1619966506
marler8997
yeah, but I think you're right, with that new nuget of understanding I'm able to solve this guys question on reddit now

1619967061
marler8997
fengb here's my answer thanks to your help:

1619967737
g-w1
wow i just tried out rr debugger and it is soooooo powerful! reverse-cont is a killer feature

1619967888
g-w1
thanks for reminding me about it andrewrk

1619967919
marler8997
I feel like maybe async would be easier to understand if we explicitly required the frame memory to be given at the call size

1619967925
g-w1
on the downside, it seems its not trivial to implement the redundant comptime feature in stage1 :(

1619967947
marler8997
var frame: @Frame(foo) = undefined; _ = async frame foo(...);

1619968070
g-w1
this generates a lot of false positives:

1619968087
ifreund
g-w1: is it really worth implementing in stage1?

1619968107
g-w1
yes, someone on discord got confused again today, and i think its a pretty nice feature

1619968113
g-w1
it caught a bunch of stuff in the stdlib already

1619968139
g-w1
im not gonna pursue it if i have to rewrite a bunch of stage1, but if its easy, ill do it

1619968168
ifreund
I'd be very surprised if it was easy

1619968170
g-w1
i think the issue is that the top level scope is a comptime scope in stage1 so everything is automatically a comptime scope

1619968194
g-w1
i dont think its

1619968238
g-w1
then again, every time i have tried to fix stage1 before, i broke something else...

1619968365
ifreund
yeah, many things that should be trivial in stage1 aren't

1619968400
ifreund
and fixing that isn't really worth it when stage2 should self host in the next year at the current pace

1619968454
g-w1
i think theres a trade off between making life better for others and driving yourself crazy

1619968527
ifreund
I mean I won't tell you how to spend your time, but there are lots of other things to work on that won't get thrown out when we self host :P

1619968555
g-w1
ok, I think this is still kinda trivial, but i wont spend that much more time on it

1619969384
g-w1
ok, got it down to a few cases! i think these are all valid cases where comptime can be eliminated because the return type of the functions is comptime (either comptime_int or type)

1619969387
g-w1
is this correct?

1619969609
g-w1
when I remove those 2 errors, stage1 can compile!

1619970656
marler8997
are async frames pinned in memory?

1619970818
mq32
yes

1619970828
mq32
they are one reason for the pinned struct proposal

1619977413
andrewrk
g-w1, yeah combined with hardware memory address watch points, it's pretty incredible

1619985512
oats
trying out zls for the first time

1619985524
oats
this level of autocompletion and stuff is

1619986645
g-w1
interesting, does clangd not work?

1619993493
g-w1
😱 more test runner support! andrewrk do you plan to get test runner going before merging the branch?

1619993543
andrewrk
I think so :)

1619993561
g-w1
thats so cool

1619993577
g-w1
so you will have to get at least primitive arrays working?

1619993691
andrewrk
I think arrays will be pretty straightforward actually

1619993738
g-w1
those will open up lots more zir instructions to work on :)

1619994382
cr1901_modern
The build section of ziglearn is really good. Props to the ppl who wrote it

1619994393
cr1901_modern
I feel a lot less lost after reading it

1619998024
andrewrk
that would be Sobeston

1619999563
cr1901_modern
>Types in Zig are values of the type type.

1619999563
cr1901_modern
What does this mean? That e.g. f32, u32, etc is a subtype of type?

1619999591
cr1901_modern
And how is "type" related to "comptime_int", "comptime_float", and "anytype" (if at all?)

1619999620
cr1901_modern
Gonna try not to ask qs too much, but I couldn't resist this one

1619999674
g-w1
const T: type = u32;

1619999681
g-w1
const T: type = type; ;)

1619999746
cr1901_modern
I haven't seen the "type =" syntax yet

1619999762
cr1901_modern
So Idk what those do, other than "type = type"

1619999764
g-w1
its not syntax, its just manually saying the type of T is `type`

1619999777
g-w1
just like `var i: u32 = 1;`

1619999847
cr1901_modern
Does const impl comptime?

1619999851
cr1901_modern
imply*

1619999875
g-w1
no, you can have runtime consts

1619999880
cr1901_modern
B/c the example I was looking at had "comptime T: type"

1619999897
g-w1
thats saying that the paramater must be comptime

1619999911
g-w1
types only exist as a compitme concept

