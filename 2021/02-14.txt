1613264285
andrewrk
ifreund, are you comfortable with write access to ziglang/zig? I want to give you the ability to push to this branch directly

1613264761
ifreund
andrewrk: fine by me if you trust me with it :)

1613264869
andrewrk
done

1613264901
ifreund
looks like I need to enable 2fa real quick

1613265070
andrewrk
I've got my work cut out for me in astgen, planning to focus on that until it's working then come back to zig fmt

1613265108
g-w1
i remember you saying that it was easier than fmt? did i remember correct?

1613265132
ifreund
andrewrk: cool, maybe I'll have fmt done by then :P

1613265156
andrewrk
some of the work we did on fmt helps out astgen too

1613265173
g-w1
ah

1613269498
marler8997
what was that zig library that could do ssl/tls?

1613269528
g-w1
iguanatls

1613269557
marler8997
so, would I theortically be able to use that to talk HTTPS?

1613269620
g-w1
yes, i think it lacks certificate validation, but bork uses it for requesting emotes

1613269703
marler8997
ok cool, worth a try then

1613271898
daurnimator
TLS in zig when? :)

1613271921
daurnimator
(I know we need it; but I really don't want it at the same time....)

1613271934
daurnimator
A good starting point would be a zig ASN.1 library

1613273344
marler8997
yeah crazy, I figure I might as well support it in my ziget library though

1613273384
marler8997
with this, zigup can be written entirely in zig

1613274444
marler8997
struct fields that reference other fields?  I remember an issue for that, what's the status on it?

1613276012
marler8997
it was pinned structs I was looking for:

1613280325
marler8997
very cool, with iguanaTLS I can now request assets over HTTPS on windows in Zig

1613280346
marler8997
I guess that means its time to add Windows support to zigup

1613280707
g-w1
working on patching zigup to support it rn

1613280711
g-w1
should it be default?

1613280752
marler8997
probably keep nossl as default

1613280768
g-w1
sorry, in zigup

1613281138
marler8997
not sure, I'd have to look at the code

1613281146
g-w1
ok

1613281447
daurnimator
marler8997: do your windows bindings give us Schannel?

1613281468
marler8997


1613281477
marler8997
let's see

1613281544
marler8997
it looks like it does:

1613281904
marler8997
Been considering adding SChannel support to ziget as well, was actually going to do this after I finished the win32 bindings

1613281916
marler8997
and win32 bindings are now in a usable state

1613282287
daurnimator
marler8997: re

1613282302
daurnimator
IMO we

1613282313
daurnimator
they're pervasive

1613282400
marler8997
I suppose we can't really answer that question until we answer the question of "what should go into the standard library"

1613282406
marler8997
as of now there seems to be differing opinions

1613282444
g-w1
marler8997:

1613282457
marler8997
what if there was no standard library ??!??

1613282606
marler8997
g-w1, I'll push another commit to your PR with additional changes

1613282611
g-w1
ok

1613284076
marler8997
g-w1, did you push another commit?

1613284867
marler8997
g-w1, I've pushed the changes, if you want to review I'll merge it now

1613312709
g-w1
hmm, so ig its a bug in iguana that the index file is not downloading correctly

1613318029
marler8997
g-w1...not sure

1613318037
marler8997
seems like it

1613320485
marler8997
g-w1, yeah it looks like iguana may be adding a few characters to the end of the stream

1613320534
marler8997
might be this issue:

1613324399
g-w1
seems likely

1613328103
marler8997
is there a way to trick Zig into letting me pass null to a non-optional ptr?

1613328146
g-w1
allowzero

1613328160
marler8997
without modifying the type

1613328165
marler8997
the parameter type

1613328229
ifreund
nope, safety checks would catch that afaik

1613328248
ifreund
why would you want to do such a thing?

1613328264
marler8997
because win32metadata hasn't properly marked all it's optional pointers as optional

1613328273
ifreund
:/

1613328310
marler8997
I could make ALL pointers optional by default for the time being

1613328326
marler8997
but then I won't see where the mistakes are

1613329100
caolanm
I'm calling a function that returns []const u8, but I'd like a null-terminated version of the slice for some C API calls - what's the nicest way to turn that into a [:0]const u8?

1613329569
ifreund
caolanm: Allocator.dupeZ()

1613329636
caolanm
ifreund: thank you

1613332724
zags
the scoping rules are sometimes mildly annoying. I have a from() function, and also a from: u64 as a parameter in different function... now I have to invent some ugly naming :D What's the common thing to do? Get creative with naming, or doing _ suffixes or?

1613335182
ifreund
zags: yeah they can be annoying at times, though not as annoying as the bugs they prevent IMO

1613335208
ifreund
I usually get more creative/descriptive with naming

1613335305
zags
ifreund: yeah I'm not advocating allowing shadowing here, had my shares of such bugs :) Yeah, guess just harder work on naming.

1613341212
zags
auto_hash <3

1613345495
zags
hum, why would `try self.addOne(allocator);` in `ArrayList.append` return 0xaaaaa... ?

1613345561
g-w1
thats what undefined is in debug mode

1613345595
zags
yeah, not sure what's undefined here

1613345659
g-w1
probably realloc

1613345685
zags
hm, this is the first element being added

1613345824
g-w1
what else would the default value be?

1613345877
zags
this is ArrayList#append segfaulting

1613345915
zags
well, ArrayListUnmanaged

1613345949
zags
crashes on "new_item_ptr.* = item;" because new_item_ptr is 0xaaaaa

1613346081
g-w1
oh, misunderstood you. thats weird

1613346190
zags
indeed

1613346886
daurnimator
zags: it suggests you wrote e.g. `var foo: ArrayListUnmanaged(T) = undefined: try foo.addOne(allocator);`

1613346886
zags
well fuck me, it as "mything.deinit();" instead of "defer mything.deinit();"

1613346894
daurnimator
ah, that'll do it too :)

1613346898
zags
haha

1613346914
zags
I need more language hand holding :D

1613346930
daurnimator
the 0xaaaaaa

1613346946
daurnimator
its telling you "you likely set this thing to undefined"

1613346954
zags
i mean statically

1613346962
zags
discovering these things at runtime isn't ideal

1613346970
daurnimator
your reaction after a quick visual inspection might be to put a watchpoint on it in your debugger to see what last set it to undefined.

1613346972
zags
esp in complex/rarely hit code paths

1613346977
daurnimator
that's why you write tests :)

1613346991
zags
that's of course a solution to everything, but I think you get my drift

1613347079
daurnimator
nice compile-time borrow checker when? :) does zorrow even work?

1613347098
zags
not sure, i know it exists

