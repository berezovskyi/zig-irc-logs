1627344469
andrewrk!~andrewrk@mail.ziglang.org
oops I had my irc client scrolled up for like 2 days and didn't realize people were talking lol

1627344500
ifreund!~ifreund@user/ifreund
heh

1627344547
andrewrk!~andrewrk@mail.ziglang.org
ifreund, generic is empty - no cpu features, you have to add them all from scratch. baseline is a value meaning "most hardware matches this" and you can subtract/add cpu features from there

1627344584
andrewrk!~andrewrk@mail.ziglang.org
suggestions welcome for how to organize the API surface here

1627344674
ifreund!~ifreund@user/ifreund
andrewrk: thanks, that makes a lot of sense. I'm find with the names but I don't know where/how we should document this

1627344713
ifreund!~ifreund@user/ifreund
out of curiosity, where do we get the baseline cpu features from? Did we just copy from llvm?

1627344733
andrewrk!~andrewrk@mail.ziglang.org
started with matching clang, and then made some executive decisions on newer stuff like risc-v

1627344752
andrewrk!~andrewrk@mail.ziglang.org
e.g. musl doesn't even compile successfully on riscv64 generic afaik

1627344786
andrewrk!~andrewrk@mail.ziglang.org
it's a bit of a squishy concept, what is considered baseline

1627344817
andrewrk!~andrewrk@mail.ziglang.org
ultimately the compiler just wants to know, are we targeting a specific cpu or not, and what is the full set of CPU features supported

1627344849
ifreund!~ifreund@user/ifreund
yeah, the complexity comes in when you want to make portable binaries

1627344904
ifreund!~ifreund@user/ifreund
which is what I'm doing currently, I'm updating that void-packages pull request after some review and setting zig target/cpu to match the C ones for everything

1627344908
andrewrk!~andrewrk@mail.ziglang.org
on a related note, I tried to make the tarballs x86_64_v2 for 0.8.0 but a bunch of people reported having older CPUs that did not support that instruction set

1627344923
andrewrk!~andrewrk@mail.ziglang.org
so for 0.8.1 I'll be sure to go back to baseline

1627344950
ifreund!~ifreund@user/ifreund
yeah, I think baseline is the way to go

1627345019
ifreund!~ifreund@user/ifreund
related, I'm pretty sure zig defaulting to targeting the native cpu bit us here: https://github.com/coilhq/tigerbeetle-node/issues/13

1627345041
ifreund!~ifreund@user/ifreund
I haven't followed up and dug in myself yet though

1627345199
andrewrk!~andrewrk@mail.ziglang.org
I'm not sure there is anything we can do about someone assuming that they can copy build artifacts from the host to a different computer without telling the compiler about the other computer. you wouldn't copy build artifacts from windows and then  try to run them on linux either

1627345342
ifreund!~ifreund@user/ifreund
if I diagnosed the issue there correctly, the one making that assumption was github actions not us

1627345386
ifreund!~ifreund@user/ifreund
which is arguably a bug with github actions, but I'd be surprised if it's the only tooling that makes that assumption

1627345785
andrewrk!~andrewrk@mail.ziglang.org
oh, I see, github actions has a series of scripts you run, and it passes artifacts from one to another, but it swapped out hosts on you

1627345820
andrewrk!~andrewrk@mail.ziglang.org
mmmmmmm that definitely seems problematic that they would give you simd features and then say just kidding! they're gone now! halfway through your CI run

1627345909
ifreund!~ifreund@user/ifreund
yeah :/

1627345934
ifreund!~ifreund@user/ifreund
I'm not sure situations like this are common enough to consider changing zig's behavior though

1627347324
ifreund!~ifreund@user/ifreund
hmm, zig doesn't have any -mtune equivalent yet does it?

1627347364
ifreund!~ifreund@user/ifreund
(a way to target many cpus but optimize for a specific one/feature set) 

1627347769
andrewrk!~andrewrk@mail.ziglang.org
correct

1627347790
andrewrk!~andrewrk@mail.ziglang.org
that's an interesting idea. TIL that's what -mtune does

1627347994
ifreund!~ifreund@user/ifreund
I'm seeing it used in void's packaging infrastructure to tune packages for power9 cpus but make them run on anything powerpc64le

1627348008
ifreund!~ifreund@user/ifreund
so I think this is a valid use-case zig should support

1627348024
ifreund!~ifreund@user/ifreund
not sure how we would expose that on the CLI though

1627348284
ifreund!~ifreund@user/ifreund
I also don't know if -mtune actually provides a significant enough performance difference in practice to be worth it

1627349099
andrewrk!~andrewrk@mail.ziglang.org
it's something I'm definitely interested in exploring but does not seem high priority to me

1627349345
ifreund!~ifreund@user/ifreund
agreed

1627359109
devast8a!~devast8a@2001:470:69fc:105::3f46
When we allocate a frame on the stack and then call a function with that frame does the stack pointer get set to the frame's pointer?

1627359118
devast8a!~devast8a@2001:470:69fc:105::3f46
erm allocate a frame on the heap*

1627360450
eltonpinto!~eltonpint@169.109.136.34.bc.googleusercontent.com
the stack pointer points to the top of the stack, and the frame pointer to the bottom of the frame. depending on the assembly that's emitted, it is possible that you would set the stack pointer to be the same as the frame pointer when the frame is created

1627361024
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
Anyone know of a way to get a random seed value in comptime?

1627361159
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
Tried getting comptime timestamp - error: unable to evaluate constant expression 

1627361235
daurnimator!~daurnimat@vultr.daurnimator.com
painhardcore: you (intentionally) can't

1627361236
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
Also std.crypto.random with the same error

1627361285
daurnimator!~daurnimat@vultr.daurnimator.com
painhardcore: you'd have to create a file e.g. `random.txt` as part of your build system, and then `@embedFile` it. or use the zig build `build_options` stuff

1627361337
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
There is no way of doing it code? Only external build options?

1627361388
daurnimator!~daurnimat@vultr.daurnimator.com
painhardcore: yes. zig works very hard to make builds reproduicible and cross-compilable

1627361576
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
daurnimator, thanks 

1627361639
devast8a!~devast8a@2001:470:69fc:105::3f46
eltonpinto: So when calling a function with a heap allocated frame the stack pointer will be moved? Does that mean you need to ensure that when allocating such a frame you leave enough space after the frame for redzone etc...?

1627398713
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
So this might be a dumb question, but I cannot for the life of me find this on the documentation. I'd like to use the C allocator; what do I add to build.zig to link libc?

1627399499
ikskuh!~xq@2a0d:5940:6:163::ad7e
exe.linkLibC();

1627399978
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Thank you!

1627402064
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Another question: what is the most efficient way of taking a slice of a known length (3 x u8) and turning that into a single integer (u24)?  Should I just do bitshifts or is there another way?

1627402374
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Another question: what is the most efficient way of taking a slice of a known length (3 x u8) and turning that into a single integer (u24)?  Should I just do bitshifts or is there another way?

1627402385
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Sorry wrong window, didn't mean to spam

1627407813
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
if I have a switch clause where each branch returns something, how can I just "continue happily" through it on the else condition?  I don't want to return, and none of the other noreturn types are allowed in this position.

1627408259
nefix!~nefix@46.222.24.248
hello! Could someone give me a hand using a C++ library with Zig and Nix? Thanks :)

1627408305
nefix!~nefix@46.222.24.248
I'm struggling with Zig not finding the libraries from stdenv (specifically, now I'm trying "<limits>"

1627408680
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
ericam: If your switch branches are in the form of 'return ...', then an 'else => {}' will do it

1627408731
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Awesome!  That makes sense; I just hadn't thought of it.  I ended up structuring things differently, but they were in that form before.

1627409829
andrewrk!~andrewrk@mail.ziglang.org
ericam, @bitCast(u24, slice[0..3].*)

1627409851
andrewrk!~andrewrk@mail.ziglang.org
you might have an endianness problem here depending on your use case

1627415483
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
andrewrk: Hmm.  It's saying that a u24 is 4 bytes wide but [3]u8 is only 3.

1627415506
andrewrk!~andrewrk@mail.ziglang.org
mm that checks out

1627415536
andrewrk!~andrewrk@mail.ziglang.org
I wonder if it would make sense to have @bitCast and @byteCast ðŸ¤”

1627415552
andrewrk!~andrewrk@mail.ziglang.org
nah I think only casting on the ABI size makes sense

1627415565
andrewrk!~andrewrk@mail.ziglang.org
I think you should use integer shifts to construct your u24

1627415570
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Cool cool

1627417694
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Is there a way to create an array of structs without typing out the names of the fields each time?

1627418570
andrewrk!~andrewrk@mail.ziglang.org
you can make a helper function

1627418922
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Makes sense.  Also how can I cast a u24 to a [3]u8?

1627418985
andrewrk!~andrewrk@mail.ziglang.org
.{@truncate(u8, x >> 16), @truncate(u8, x >> 8), @truncate(u8, x)}

1627422856
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Is there a plan to allow equality comparisons on tagged unions, or is that not in the works?

1627423139
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
More importantly I guess, how can I get just the tag value of a tagged union?

1627424360
andrewrk!~andrewrk@mail.ziglang.org
coerce it to the tag type

