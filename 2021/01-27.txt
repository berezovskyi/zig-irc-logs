1611705817
ed_t
anyone know of examples of using std.sort to sort structures. I assume I will have to pass a compare function...

1611705859
dvaun
i see a `binarySearch`, `insertionSort` and others in the sort file

1611705868
andrewrk
ed_t, check the tests in sort.zig for example usage

1611706651
ed_t
I am not understanding how the example comptime funtions are working.  Anyone have an example for a user defined stucture?

1611706693
ed_t
in std.sort

1611706901
justin_smith
ed_t: in test "binarySearch" look at S, it has functions for u32 and i32 but a function on a custom struct would have the same outline

1611706943
justin_smith
you usually don't need context, and the next two args it receives will be instances of your type

1611707311
ed_t
that almost makes sense except its returning math.Order.  Does not sort require a lessthan function and a boolean?

1611707372
justin_smith
ed_t: no, the functions there are literally what it provides to sort

1611707468
ed_t
then I am still very confused (40+ of programming in I do not know how many languages, it gets very very frustrating when something you know is simple does not make sense)...

1611707469
justin_smith
ed_t: oh, wait,  I think I see what you mean - what I pointed out was what binarySearch uses, which is a different sig

1611707492
justin_smith
ed_t: I wrongly assumed the other sort functions would use the same type, they don't

1611707532
ed_t
so S for sort would contain one function for lessthan returning a boolean?

1611707570
justin_smith
ed_t: std.sort.sort you want a function of this sig: fn (context: @TypeOf(context), lhs: T, rhs: T) bool

1611707602
justin_smith
where T matches the type in your collection, and context can be void as in that other example (and usually is)

1611707700
ed_t
there are two pub fn asc and desc, some how I need to use them to build my compare - I think

1611707765
justin_smith
so pub fn my_structLT(context: void, a: MyStruct, b: MyStruct) bool { return a.foo() < b.foo(); }

1611707787
justin_smith
ed_t: asc and desc are conveniences for arbitrary numeric types

1611707800
justin_smith
all you need is to take a void arg, two of your type, and return a bool

1611707864
ed_t
let me see if I can get that to work.  I am making progress in learning this language

1611707911
justin_smith
ed_t: it's unusual (knowing ml before learning zig helped for me), but the rules are actually smaller and simpler than what I'm more familiar with

1611707963
justin_smith
sorry for the sidetrack with binarySearch, I should know better than to have assumed it would use the same type of comparator sort does

1611707968
ed_t
my set of languages are a bit dated but the ideas are similar

1611708008
ed_t
justin_smith no need to be sorry.  Help IS appreciated.  Very much so.

1611708150
justin_smith
ed_t: a working sort comparator from before I knew about the built in ones: "pub fn less_than(_: void, a: isize, b: isize) bool { return(a < b); }"

1611708714
ed_t
error: expected function, found 'type'

1611708714
ed_t
sort(point, alive.items, {}, point_lt);

1611708724
ed_t
probably something stupid

1611708731
ed_t
point is:

1611708741
ed_t
const point = struct {

1611708741
ed_t
x: u32,

1611708741
ed_t
};

1611708741
ed_t
y: u32

1611709226
justin_smith
ed_t: is point_lt a struct containing a function or a function? that's the only function arg it expects right?

1611709288
ed_t
function

1611709303
ed_t
pub fn point_lt(context: void, a: point, b: point) bool {

1611709303
ed_t
return a.x < b.x and a.y < b.y; }

1611709464
ed_t
pub fn sort(

1611709464
ed_t
items: []T,

1611709464
ed_t
context: anytype,

1611709464
ed_t
comptime T: type,

1611709464
ed_t
comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,

1611709465
ed_t
) void

1611709518
g-w1
sorry to interrupt, but when sharing code, can you use a pastebin? the code clutters up irc

1611711552
ed_t
if any wonders what std.sort caused errors, it was that you need to call std.sort.sort

1611713659
ed_t
is there a problem with std.sort.sort

1611713770
ed_t
I have an arraylist of structs (call it a), pass call std.sort.sort(mystruct, a.items, {}, mystruck_lt) but nothing is sorted

1611715622
andrewrk
std.sort.sort has a high degree of test coverage

1611715637
andrewrk
perhaps step through your code with a debugger and see what is happening

1611744275
ifreund
andrewrk: I think your single allocation version is better, having only one alloc makes the error handling a lot cleaner

1611744330
ifreund
I have a bunch of Uni work due today which has kept me away from it, feel free to close my PR and merge yours if it's ready to go :)

1611744343
ifreund
otherwise I should have time to work on this tomorrow

1611748866
ed_t
any reason std.sort.sort would not work on arryList contents (xxx.items)?  Here I call sort but the list is not sorted.

1611748937
dutchie
it should work, can you paste a full snippet somewhere?

1611749270
ed_t


1611749297
ed_t
the debug prints are the same before and after the sort

1611749339
ed_t
I am a zig newbee so it could easily be something I am doing...  however zig is not complaining.

1611749388
ifreund
it looks like you are not adding any items to the ArrayList

1611749441
ed_t
there are items in it I just did not include that code in the sample

1611749571
ifreund
and is the list already sorted according to that function before you call sort?

1611749579
ifreund
hard to know without seeing all the code :P

1611749733
ed_t


1611749787
ed_t
I am teaching myself zig so I suspect there is alot that can be improved, aside from the sort it works.

1611750158
dutchie
it seems to work for me. i wonder if it's a little weird because that point_lt function isn't a total order in the mathematical sense: you can have two points p1 and p2 such that neither p1 < p2 nor p2 < p1

1611750162
ifreund
ed_t: I think the problem is with your point_lt function. (10,12) < (11,10) and (11,10) < (10,12) are both true depending on what order the args ar passed

1611750188
dutchie
yeah, also that

1611750270
ifreund
You'd probably get better results with (a.x + a.y) < (b.x + b.y)

1611750284
ifreund
which is a total ordering

1611750386
dutchie
or lexicographic order:

1611750440
dutchie
(i forget whether there is a helper to define lexicographic order in std somewhere)

1611750479
dutchie
oh, there's one in std.mem.lessThan for slices

1611750918
ed_t
that seems to work.  thought 'and' stopped evaluating when the first term is false

1611751048
ed_t
btw what IDE are you using (I am using kde's kate with some syntax hilighting and LSP support) but its klunky

1611751200
ed_t
bbiab shoveling time

1611751241
ifreund
I use kakoune with kak-lsp

1611751273
ifreund
'and' does stop evaluating when the first term is false, but that doesn't affect the fact that your function wasn't a total order

1611754018
ed_t
you used a different allocator than my example.  Is there a guide somewhere for when to use differing allocators?

1611755052
dutchie
ed_t:

1611755321
v_m_v
Hello. Does anyone have some exp. with zig and zeroMQ C binding?

1611762695
ed_t
is there a simple way to have a program pause for a second or two?

1611762743
dutchie
`std.time.sleep(nanoseconds: u64) void`

1611771453
andrewrk
ifreund, there is one upside to the separate allocations: it lets you do the equivalent of toOwnedSlice() and have the allocator shop off the extra bytes

1611771499
andrewrk
I'll test both and report back

1611771787
ifreund
andrewrk: note that in my current implementation the allocations aren't aligned properly, gotta fix that if we go with the separate allocations

1611771836
andrewrk
oh yeah I noticed that. I think the sorting in mine solves that but it doesn't (yet?) solve the rare case of a field with larger alignment than size

1611771911
ifreund
with how things are currently structured and because the allocator interface requires alignment to be comptime-known, handling it properly with multiple allocations might get a little ugly

1611771912
andrewrk
if you had such a situation you probably don't want this data structure anyway

1611771963
andrewrk
there is always the nuclear option of calling the Allocator function pointers directly which allows for runtime known alignment

1611771979
andrewrk
I think that's probably not the best way to go tho

1611772021
ifreund
yeah that seems like a hack

1611772039
ifreund
we could also align all the allocations to the max alignment of the fields

1611772052
ifreund
trade code bloat for heap bloat

1611772093
ifreund
anyhow, I've got to go finish a paper that's due in 4 hours

1611772127
ifreund
(it's been kinda fun though, I learned how the signal messaging protocol works)

1611772157
andrewrk
godspeed!

1611778716
ikskuh
reasons why zig is awesome: @bitCast([4][4]f32, array_len_16)

1611784016
johnLate
What does Auto in AutoHashMap mean exacly?

1611784164
ikskuh
it means that the hashing and equal function for the key type is automatically chosen

1611784261
andrewrk
AutoHashMap is really comfy

1611784940
johnLate
(looking at hash_map.zig) Is there any other reason for the "return struct { fn foo(...){...} }.foo;" pattern than not wanting to change the grammar and not wanting to define that function outside the containing one?

1611785049
ifreund
johnLate: that pattern only exists because #1717 hasn't been implemented yet

1611785083
johnLate
thx

