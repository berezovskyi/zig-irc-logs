1621297265
Raito_Bezarius
hm

1621297273
Raito_Bezarius
I now have an ELF with

1621297495
g-w1
lol

1621297536
Raito_Bezarius
is there something specific regarding entrypoints when using custom os.system in the root of my source file?

1621297636
Raito_Bezarius
hm maybe I need a linker script

1621299210
pfg_
is there any way to specify -isysroot with zig? I'm trying to build an ios app but it needs `-framework UIKit` which needs `-isysroot $(xcrun --sdk iphonesimulator --show-sdk-path)` otherwise it's not found.

1621299663
pfg_
`has_sysroot` seems to automatically use `-isysroot $system_sdk_path` instead of it being possible to specify a custom sysroot

1621306145
eyepatchOwl
How do I coerce a slice to a C string? e.g.

1621306145
eyepatchOwl
var p: []const u8 = "abc";

1621306145
eyepatchOwl
export fn f() void {

1621306145
eyepatchOwl
opendir(p);

1621306145
eyepatchOwl
}

1621306193
g-w1
p.ptr, also please use a pastebin next time

1621306221
eyepatchOwl
I haven't found anyting in std.c, std.cstr, or std.mem. I intended for godbolt to be the pastebin, but wanted to save a click.

1621306243
eyepatchOwl
Sorry about the spam, also getting used to a new client.

1621306253
g-w1
clbin.com works from the cli, also p.ptr ;)

1621306329
eyepatchOwl
p.ptr works. Thanks!

1621315211
marler8997
I've got a weird discrepancy on win32 between the size of a struct

1621315222
marler8997


1621315269
marler8997
in zig, if it's "packed" it's 18 bytes, which is the correct size based on both what C++ says and the fact that it only works at runtime if it's 18 bytes.  But when I mark it as "extern struct", it's 20 bytes

1621315314
marler8997
I'm generating all win32 structs using "extern struct".  I'm not sure if this is an exception, or if they're all actually supposed to be packed?

1621315475
daurnimator
marler8997: zig @sizeOf is not the actual size; it's how large it would be in an array. more like `max(@realSize(), @alignOf())`

1621315611
marler8997
using "extern struct" changes the layout in such a way that windows does not recognize it, it's only when I use "packed" that it accepts it

1621315708
marler8997
I'm calling this function:

1621315736
marler8997
the WAVEFORMATEX struct is the 3rd parameter, when I use "extern struct" I get error 32 (WAVEERR_BADFORMAT)

1621315829
marler8997
oh interesting, when I copy the struct definition to my local file in C++, the sizeof goes to 20!  So the header must be using some sort of alignment directives somewhere

1621316085
marler8997
I don't really see any alignment directives around it...weird

1621316192
marler8997
wow, I can copy the entire header and it still shows sizeof is 20!  there's something really wonky going on here

1621316363
marler8997
found it, there's a "#pragma pack(1)" in mmsystem.h around the location where it include mmeapi.h...wow

1621317567
marler8997
fyi, I realized the metadata does include a "packing size". So I'm translating a packing size of 1 to "packed".  Not sure what to do about 2/4 byte packings...?

1621321985
ikskuh
ifreund: can i somehow pass a normal shell script to nix-shell?

1621322382
ikskuh
ah, i figured. thanks for the shell.nix file :)

1621330856
ifreund
no problem :)

1621331445
ikskuh
i maybe should start using nix...

1621331448
ikskuh
but learning another language?

1621331487
dutchie
the nix language is very small

1621331529
dutchie
the main issue in my experience is that the "standard library" isn't very well documented

1621331557
ifreund
yeah, nix docs suck in general in my experience

1621331598
ifreund
I don't think I'll ever use nixos, it doesn't really appeal to my sensibilities, but using nix on void linux for some select projects works pretty well

1621346235
koakuma
TheLemonMan, re: lld, that's great, thanks so much! What did you do to make it link?

1621346368
TheLemonMan
I had to implement all the missing relocation types

1621346399
TheLemonMan
then got sidetracked into upstreaming some LLVM patch in order to write some test cases

1621346580
koakuma
Ah, that's... awesome

1621352097
marler8997
I had an idea to do with std.log.  What do people think about adding a way to namespace the log scopes with the package they come from?

1621352793
ifreund
marler8997: as in an automatic way to do that? You can already do it pretty easily manually afaik

1621352865
marler8997
ifreund, I just made this issue:

1621352887
marler8997
ifreund, are you saying there's already a way to get the package name from log scopes?

1621352964
ifreund
marler8997: no, but when writing a package you can put all of your logging in a scope with the same name as your package, and I would consider this good practice

1621352994
marler8997
yeah I would agree

1621352995
ifreund
the whole point of having scopes in the API was so that you can filter out logging from dependencies

1621353020
ifreund
or, at least having them implemented the way they are with an enum literal

1621353098
ifreund
and you're right that we currently do rely on package authors being well behaved and using a scope unique to their package and not polluting the default scope

1621353121
ifreund
but I'm not convinced we need to introduce more complexity to address that problem

1621353128
marler8997
I see std.log not only being used to differentiate packages, but also contain sub-categories within the same package

1621353156
marler8997
if we didn't need subcategories, we could simplify std.log.scoped to only contain the package name and nothing else

1621353170
ifreund
very true, we do this in stage2

1621353181
ifreund
do we even have a way to get the package name at comptime yet?

1621353194
marler8997
not that I know of, and doing so could pose problems

1621353214
ifreund
I think you need to rework that issue into a proposal for such a bulitin...

1621353216
marler8997
because I'm not sure if Zig assumes that a package will compile the same way depending on if it's package name changes

1621353245
marler8997
my proposal for optional build.zig dependencies ran into this issue as well

1621353257
marler8997
and my idea was to provide the package name, but make it known only at runtime

1621353293
ifreund
I think this area has not received enough attention yet, but will once we self host and shift the focus towards the build system/package manager

1621353372
marler8997
yeah, and yes the proposal is incomplete.  I created it for now to document the concept and we might need to wait a bit before we know what the implementation will look like (i.e. how do we get the package name?)

1621353501
ifreund
I think knowing what the implementation would look like is required in order to decide if it is desireable or not

1621353802
marler8997
andrewrk, what is your thoughts on having the package name affect compilation?  Do we do that today?  Should we allow that?

1621353984
TheLemonMan
marler8997, can you still reproduce #5476?

1621354068
marler8997
TheLemonMan, yup, looks like it's still there

1621354149
marler8997
ifreund, if we allow the package name to affect compilation, the solution should be trivial, I think an enum with all the package names would be nice.  If we dont' allow it to affect compilation, it might be quite difficult, I can't think of a solution atm

1621354240
TheLemonMan
can you dump header and debug_dir contents?

1621354361
marler8997
you want a tar file or something?

1621354369
TheLemonMan
gah, this is definitely the worst time to buy a new laptop, can't find (m)any with AMD's Zen3

1621354399
TheLemonMan
a pastebin is enough

1621354481
marler8997
here's all the files:

1621354582
TheLemonMan
oh I just need the field values, add a debug.print in coff.zig like you did in the ticket description

1621354597
marler8997
oh gotcha

1621354612
xackus
mobile zen 3 is still pretty new

1621354677
marler8997
thread 24444 panic: debug virt 241608 header virt 225280 ptr 219136

1621354788
TheLemonMan
hm? that calculation does not overflow

1621354835
TheLemonMan
xackus, yep, I wonder when it'll hit the market as I'm getting tired of this laptop being slow

1621354913
marler8997
here's a run with printing the file_offset:

1621354914
marler8997
thread 23144 panic: debug virt 241704 header virt 225280 ptr 219648 file_offset=236072

1621354915
xackus
who knows with covid logistic problems

1621354938
marler8997
looks like it's not overflowing...

1621354947
xackus
and shortages

1621355007
xackus
but some will probably be available within a couple of months

1621355219
marler8997
TheLemonMan, I think there's a mistake in my logic to detect the virtual address overflow

1621355231
marler8997
instead of: if (debug_dir.virtual_address < header.virtual_address + header.pointer_to_raw_data)

1621355242
marler8997
should be: if (debug_dir.virtual_address < header.virtual_address)

1621355282
marler8997
when I fix it, I no longer hit that condition, so problem may be elsewhere

1621355343
marler8997
oh wait, you know what

1621355346
marler8997
maybe the issue isn't happening

1621355381
marler8997
I just saw the stack trace but I needed to look at the 2nd stack trace

1621355424
xackus
5900X is now almost at msrp where i live

1621355431
marler8997
here's the new stacktrace:

1621355486
marler8997
I'm not getting this instead: Unable to dump stack trace: FileNotFound

1621355504
marler8997
so I'm not sure if I can confirm whether or not the integer overflow would occur if this FileNotFound error did not occur

1621356506
TheLemonMan
no more overflow then

1621356905
ikskuh
something killed my program (stack smashing detected)

1621356912
ikskuh
any hints on how to fix that?

1621356951
mikdusan
are you using any .ptr from slices, and manipulating it?

1621356969
ikskuh
errm

1621356982
ikskuh
yeah

1621357015
mikdusan
I ran into that error and it could be a million things, but in my case I was doing something naughty with .ptr

1621357028
ikskuh
hm

1621357031
ikskuh
i changed the zig version :D

1621357037
ikskuh
no code changes whatsoever

1621357045
ikskuh
"worked yesterday, recompiled zig, now it doesn't" :D

1621357123
mikdusan
(.ptr/.len that is)

1621357259
TheLemonMan
valgrind may be helpful here

1621357339
ikskuh
nix is the culprit

1621357348
ikskuh
i compiled zig in a nix shell

1621357389
ikskuh
and linked clang dynamically

1621357412
ikskuh
and zig now links against the nix dynamic linker

1621357428
TheLemonMan
bleh, I hate nix

1621357448
ikskuh
looks like i have to build llvm12 ...

1621359183
ifreund
ikskuh: nah, just link zig statically to llvm

1621359193
ifreund
pass -DZIG_STATIC_LLVM to cmake

1621359209
ifreund
er, -DZIG_STATIC_LLVM=on

1621359226
ikskuh
okay, let's test…

1621359260
marler8997
TheLemonMan, I can't confirm or deny whether overflow is still occuring becase of the FileNotFound error

1621359322
andrewrk
marler8997, status quo is the package name is not observable except as a way to use `@import`. what did you have in mind?

1621359345
ifreund
ikskuh: as for zig linking against the nix dynamic linker, on my system at least it's just a symlink to my /usr/lib64/ld-linux-x86_64.so.2

1621359382
marler8997
andrewrk, this issue:

1621359413
marler8997
also might need something like that for my build proposal

1621359422
marler8997
but in that case the value could be known at runtime only

1621359584
andrewrk
marler8997, I think this is related to another issue that isn't solved yet, which is wanting to set different optimization modes (-O) per package

1621359684
ikskuh
ifreund: my zig installation now is fucked :(

1621359693
ikskuh
zig init-exe && zig build run

1621359693
ikskuh
fails

1621359724
ifreund
ikskuh: and what does ldd zig say?

1621359735
marler8997
andrewrk, if a package is included multiple times with different names in the same compilation, is it compiled the exact same way?

1621359743
ikskuh


1621359747
ifreund
build zig with static llvm and nix works fine for me

1621359778
ikskuh
hm

1621359785
ikskuh
didn't do it for me, which distro are you on? void?

1621359817
ifreund
yeah void

1621359825
ikskuh
hm, i'm on arch

1621359830
ikskuh
no idea why it fails

1621359844
ifreund
could be related to arch being on glibc 2.33 while void is still on 2.32 currently

1621359858
ifreund
how does it fail? any output?

1621360111
ikskuh
> version `GLIBC_2.33' not found (required by /tmp/zig-out/bin/tmp)

1621360115
ikskuh
this was

1621360128
ikskuh
the other one was

1621360128
ikskuh


1621360140
ikskuh
and when cross-compiling for musl with "-Dtarget=x86_64-linux"

1621360146
ikskuh
i got a horrible stack trace

1621360414
ifreund
ikskuh: yeah, that sounds like it's caused by the glibc version mismatch between nix and the rest of your system

1621360881
ikskuh
yeah

1621360887
ikskuh
i've rolled back to the master from website

1621361399
TheLemonMan
ifreund, I'm not a fan of adding extra commas out of the blue, after all the lines are broken by the comment and not by the comma

1621361718
ifreund
TheLemonMan: My priority is that the behavior is consistent with all the other comma separated lists where we use a trailing comma to indicate that they should be broken over multiple lines

1621361755
ifreund
inserting a comma if comments or multiline strings force the list across multiple lines but there is no trailing comma in the original source is the status quo

1621361789
ifreund
If you'd like to propose changing that I'd recommend doing that in an issue

1621361893
TheLemonMan
nah, I'll close the PR, no time to fight the system

1621362078
andrewrk
btw I'm building a fresh docker image for drone CI in hopes it resolves the issue

1621362097
ifreund
nice

1621362162
andrewrk
all these computers need more babysitting than 2 year olds

1621362171
ifreund
andrewrk: I got zlib cross compiling in zig-bootstrap, but we need to link it in zig's cmake and I'm far from a cmake expert

1621362211
andrewrk
ifreund, what we need for libz.a to go into the correct prefix and then everything should just work

1621362236
andrewrk
the -DCMAKE_PREFIX_PATH

1621362247
andrewrk
(in the lib/ dir of course)

1621362266
ifreund
that's what I thought, but zig's current cmake fails to add that to the linker line for the final binary

1621362277
ifreund
it does "just work" for the llvm builds

1621362296
andrewrk
ah I see. think we need to hard code it

1621362324
andrewrk
zig has no way to know it needs to put libz.a on the linker line otherwise

1621362335
ifreund
this is what I did to make the build pass, but I'm sure there's a more proper way:

1621362416
andrewrk
the only improvement I can see there is to add it to target_link_libraries rather than set(EXE_LDFLAGS

1621362496
ifreund
I think we need to only do this if statically linking llvm though as it's a transitive dependency

1621362558
ifreund
but I don't know how to capture that in an if statement. We already have some code that adds -lz for specific targets if statically linking llvm

1621362584
ifreund
but for zig bootstrap we don't set ZIG_STATIC or ZIG_STATIC_LLVM so I'm not sure what to check

1621362665
andrewrk
you can just patch it in, I'll make it cleaner when doing a future update

1621362770
ifreund
alright cool, I think we need to patch the upstream cmake as well since I realized that the master builds for the website are built using the ci scripts

1621362836
andrewrk
ah so when I rebuild the ci tarballs with your changes, it will require libz static lib on the linker line, yeah?

1621362842
andrewrk
that's fine, I'm prepared to deal with that

1621362883
andrewrk
probably will just be -DZIG_LLVM_NEEDS_LIBZ=ON

1621362910
andrewrk
there's no way to find out this information, it has to be provided by the user

1621362965
ifreund
yeah that's right

1621363000
ifreund
I guess that explains why I couldn't find a way if there really is none :D

1621363022
andrewrk
C/C++ dependencies are a mess

1621363047
andrewrk
looks like the drone ci is fixed

1621363325
ifreund
nice :)

1621363416
ikskuh
can someone help me to find the source of

1621363426
ikskuh
the call stack is a bit small

1621363446
ifreund
I don't think wasm has fds?

1621363478
ifreund
perhaps you need to override the default panic handler

1621363494
ikskuh
ifreund: i did that already

1621363780
ikskuh
it look slike it comes from std.debug.panic

1621363797
andrewrk
ikskuh, I have an idea to make this easier with a flag, but haven't tried to implement it yet. in the meantime the trick I use is to delete stuff until the "foo not found" compile errors become useful

1621363807
ikskuh
:D

1621363813
ifreund
ikskuh: did you maken your root.panic override pub?

1621363841
andrewrk
ironically this is exactly the situation the "referenced here" errors are supposed to help with, but in your moment of need they are failing you

1621363867
ikskuh
ifreund: ack.

1621363875
ikskuh
i did all the obvious stuff already :)

1621363884
ikskuh
andrewrk: thanks, that was a good hint

1621363900
ikskuh
my pub log() is the culprit

1621364009
ikskuh
Writer().print

1621364278
ikskuh
ah, no

1621364288
ikskuh
std.heap.GeneralPurposeAllocator

1621364463
ifreund
ah the stack trace printing?

1621364594
ikskuh
yep

1621364597
ikskuh
andrewrk: can i disable stack trace printing?

1621364645
andrewrk
yes. which stack trace are you referring to?

1621364731
ikskuh
the one in the GPA, i don't know which one exactly

1621364887
ikskuh
HA

1621364888
ikskuh
got it

1621365020
ikskuh


1621365161
andrewrk
you don't need hacks, you can just do what you want. GPA supports disabling stack traces, also you could just not call the function that does leak checking

1621365183
ikskuh
but i want leak checking

1621365198
ikskuh
the core problem here imho is that stack trace format

1621365228
ikskuh
and thus uses the detectTtyConfig

1621365349
ikskuh
so if i am on a linux and write a stack trace to a file, it will horribly fail and writes escape codes into my file

1621365411
andrewrk
why won't the tty detection work in that case?

1621365456
ikskuh
because tty_config is determined from std.io.getStdErr()

1621365483
ikskuh


1621365617
g-w1
the stack trace doesn't print to stderr?

1621365655
ikskuh
nope

1621365659
ikskuh
no stack trace on wasm ;)

1621365661
ikskuh
*stderr

1621365680
g-w1
ah i see, so it should do it by the target then

1621366056
ikskuh
yep, when i write a stack trace to a file, it contains escape codes

1621366525
mikdusan
but supportsAnsiEscapeCodes() returns false when .wasi

1621366539
ikskuh
i use .freestanding ;)

1621366797
ikskuh
mikdusan: this would also just be a hacky workaround

1621367934
ifreund
Q/bu3

1621368030
ikskuh
ifreund: wanna change the password?

1621368194
ikskuh
hm, what would be a appropiate strategy for fixing the escape code thingy?

1621368306
ifreund
ikskuh: that was a fumbled /buffer 3 since I alread had typed a Q here for some reason :P

1621368312
ikskuh
:D

1621369135
ikskuh
huh

1621369154
ikskuh
> GPA supports disabling stack traces, also you could just not call the function that does leak checking

1621369159
ikskuh
this didn't work, the code is still referenced

1621369217
ikskuh
also: if i want a resettable GPA, should i back it by a arena allocator?

1621369229
ikskuh
or does gpa.deinit() free unfreed data?

1621369306
andrewrk
gpa cannot support freeing leaked memory because it is designed to work in release modes as well, in which case it does not track leaked memory

1621369328
ikskuh
okay

1621369343
ikskuh
so i'm using a backing allocator with arena backing

1621369523
ikskuh
hm, disabling safety solves the problem

1621370978
ifreund
andrewrk: the zig-bootstrap zlib PR should be ready to go whenever you get around to updating CI tarballs :)

1621370995
andrewrk
thanks!

1621371005
ifreund
time to take a look at the system libc linking default thing

1621372441
ifreund
that was easy :)

1621372474
g-w1
tysm

1621372540
ifreund
no problem, I prefer to fix things I personally broke if possible :D

1621372572
g-w1
same

1621377148
Raito_Bezarius
var user_stack = [_]u64{0} ** 1024;

1621377150
Raito_Bezarius
why is it valid?

1621377153
Raito_Bezarius
invalid*

1621377181
g-w1
please say the error

1621377192
Raito_Bezarius
ahem none

1621377197
Raito_Bezarius
the zig fmt has an old invalid error

1621377199
Raito_Bezarius
like missing semicolon

1621377204
Raito_Bezarius
but compiling this works just fine…

1621377209
g-w1
what zig version?

1621377224
Raito_Bezarius
~0.8

1621377239
Raito_Bezarius
the ~ is because I'm using a precise commit

1621377248
Raito_Bezarius
but it's not due to zig

1621377252
Raito_Bezarius
it was vim plugin bug

1621377254
g-w1
works for me on master

1621377255
g-w1
ah

1621377266
g-w1
echo 'var user_stack = [_]u64{0} ** 1024;' | zig fmt --stdin worked

1621377311
Raito_Bezarius
yes it was an invalid syntax at some point $t_0

1621377321
Raito_Bezarius
and then the error stuck and made me believe it was invalid syntax at $t_0 + Δ

1621377334
Raito_Bezarius
but it was remnants of $t_0

1621378234
Raito_Bezarius
can it be normal that Zig do not generate any valid instruction in the binary for a certain addr?

1621378264
Raito_Bezarius
I have some user_fn doing some stuff, when I take its ptr at runtime, it gives me some addr α, I know how much I need to adjust to know the runtime addresses as I have my image base β

1621378273
Raito_Bezarius
so I check with objdump the binary at α + β

1621378287
Raito_Bezarius
and see it does not exist in the binary, but at the runtime, something writes into it

1621378293
Raito_Bezarius
some invalid code btw

1621378402
Raito_Bezarius
it goes from 0x0 → 0xd8a0 (binary is loaded by UEFI) → 0x63e88a0 (something happens??)

1621378570
Raito_Bezarius
in particular, the code I'm expecting to run is this:

1621378589
Raito_Bezarius
I would

1621378594
Raito_Bezarius
but it does not look like it exist at all

1621378613
Raito_Bezarius
gdb shows it exist at some point but it is absolutely not an infinite loop, it is some garbage written by something else

1621378702
Raito_Bezarius
depending on what I put in user_fn, I'm either getting an #UD either getting an #GP

1621378863
noam
andrewrk: I'll look into resurrecting the SPU II backend soonish - I'll be happy to keep maintaining it indefinitely

1621378882
andrewrk
noam, sounds good, no rush

