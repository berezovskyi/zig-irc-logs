1615251317
mikdusan
andrewrk: not certain of zig-bootstrap status for master/llvm11 and macos. I'll give that a whirl

1615251340
mikdusan
but the wall I'm hitting is indeed with zig-bootstrap master, which is at llvm12

1615251399
andrewrk
mikdusan, note that the macos CI does something slightly different than directly using zig-bootstrap. it's kind of doing its own bootstrap process, only using the tarball for zig cc and zig c++

1615251727
mikdusan
in azure logs for macos: -- Found llvm:

1615251730
mikdusan
/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMXRay.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMWindowsManifest.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSymbolize.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMDebugInfoPDB.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gn

1615251732
mikdusan
u-0.6.0+1c9ef63a/lib/libLLVMOrcJIT.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMOrcError.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMJITLink.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMObjectYAML.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMCA.a;/Users/runner/zig+llvm+

1615251734
mikdusan
lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLTO.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMPasses.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMCoroutines.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMObjCARCOpts.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMExten

1615251736
mikdusan
sions.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLineEditor.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLibDriver.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMInterpreter.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMFuzzMutate.a;/Users/runner/zig+llvm+lld+clang-x86_64-

1615251738
mikdusan
macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMCJIT.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMExecutionEngine.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMRuntimeDyld.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMDWARFLinker.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMDlltoolDri

1615251740
mikdusan
ver.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMOption.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMDebugInfoGSYM.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMCoverage.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMXCoreDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_6

1615251742
mikdusan
4-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMXCoreCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMXCoreDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMXCoreInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMX86Disassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMX86Co

1615251744
mikdusan
deGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMX86AsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMX86Desc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMX86Info.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMWebAssemblyDisassembler.a;/Users/runner/zig+llvm+lld+clan

1615251746
mikdusan
g-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMWebAssemblyCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMWebAssemblyDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMWebAssemblyAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMWebAssemblyInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0

1615251748
mikdusan
.6.0+1c9ef63a/lib/libLLVMSystemZDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSystemZCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSystemZAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSystemZDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSys

1615251750
mikdusan
temZInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSparcDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSparcCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSparcAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSparcDesc.a;/Users/runner/zig+llvm+ll

1615251752
mikdusan
d+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMSparcInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMRISCVDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMRISCVCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMRISCVAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef

1615251754
mikdusan
63a/lib/libLLVMRISCVDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMRISCVUtils.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMRISCVInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMPowerPCDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMPowerPCCodeGen.a;/Users/ru

1615251756
mikdusan
nner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMPowerPCAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMPowerPCDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMPowerPCInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMNVPTXCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-g

1615251758
mikdusan
nu-0.6.0+1c9ef63a/lib/libLLVMNVPTXDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMNVPTXInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMSP430Disassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMSP430CodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMSP430AsmP

1615251760
mikdusan
arser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMSP430Desc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMSP430Info.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMipsDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMipsCodeGen.a;/Users/runner/zig+llvm+lld+clang-

1615251762
mikdusan
x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMipsAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMipsDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMMipsInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLanaiDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLV

1615251764
mikdusan
MLanaiCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLanaiAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLanaiDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLanaiInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMHexagonDisassembler.a;/Users/runner/zig+llv

1615251766
mikdusan
m+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMHexagonCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMHexagonAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMHexagonDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMHexagonInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1

1615251768
mikdusan
c9ef63a/lib/libLLVMBPFDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMBPFCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMBPFAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMBPFDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMBPFInfo.a;/Users/runner/z

1615251770
mikdusan
ig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMAVRDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMAVRCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMAVRAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMAVRDesc.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9

1615251772
mikdusan
ef63a/lib/libLLVMAVRInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMARMDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMARMCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMARMAsmParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMARMDesc.a;/Users/runner/zig

1615251774
mikdusan
+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMARMUtils.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMARMInfo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMAMDGPUDisassembler.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMAMDGPUCodeGen.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9

1615251776
mikdusan
ef63a/lib/libLLVMMIRParser.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMipo.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMInstrumentation.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMVectorize.a;/Users/runner/zig+llvm+lld+clang-x86_64-macos-gnu-0.6.0+1c9ef63a/lib/libLLVMLinker.a;/Users/runner/zig+llvm+lld

1615251823
mikdusan
so I had to disconnec to stop my irc client from feeding a bad paste.

1615251831
mikdusan
sorry y'all

1615251934
mikdusan
my understanding is macos ci uses zig-bootstrap also for llvm libs

1615252210
andrewrk
mikdusan, I recommend

1615252347
mikdusan
heh no i was just pasting what I thought was a 1 liner to show llvm is used from tarball. copy from azure web interface of logs was the issue.

1615252434
andrewrk
ahh

1615252469
andrewrk
the macos ci script

1615252506
andrewrk
wait no I'm wrong, sorry

1615252523
andrewrk
yes so to update it for llvm12 we need to put llvm 12 libs in it

1615252535
andrewrk
so you tried that, and ran into an issue?

1615252570
mikdusan
yes. i did minimal changes to cmake command line to get it building on big sur.

1615252595
mikdusan
everything is nice. get the usual hosted llvm (via xcode/clang)

1615252653
mikdusan
then get zig with llvm and sytem compiler fine

1615252674
mikdusan
but rebuild llvm with `zig c++` is the stop.

1615252719
mikdusan
end up in 2 situations: 1 is some reduced size executables that are not functional.

1615252776
mikdusan
or 2. using ZIG_SYSTEM_LINKER_HACK=1 it stops because system ld is not so dumb and gives an error.

1615252914
mikdusan
i am fairly certain it's because... when we do "-target x86_64-macos" our cross-compile logic kicks in. and all the use of SDK search paths is gone, and -lSystem is no longer present. cmake detection probes make bad decisions because of this. etc.

1615253004
mikdusan
(all this within the caveat: I am on Big Sur).

1615253008
andrewrk
hmm with llvm11 we do not use the system linker hack right? so let's try to keep it that way

1615253022
mikdusan
correct: we don't use the hack anywhere in zig-bootstrap

1615253100
oats
andrewrk, congrats on your run, that's a hell of an achievemnt! makes me want to take back up running...

1615253249
andrewrk
thanks

1615253437
mikdusan
andrewrk: ok I think it's worth while I try zig-bootstrap on an older macos. I have a 10.13 clunker. this let's me avoid 11.0 (big sur) factor.

1615253721
andrewrk
I think the llvm 12 release is going to be rough for zig unfortunately

1615253741
andrewrk
they already moved one of our bug tickets to 12.0.1

1615253769
mikdusan
and odd that... it was a statement like "because there is no fix" . wth

1615253860
g-w1
all the more incentive to get the self-hosted backend working :)

1615253868
mikdusan
doit!

1615258854
g-w1
is there a way to get the minimum int type that a comptime_int can fit into?

1615258916
ugla
log2-of-the-value number of bits?

1615258928
g-w1
nice :) thanks

1615259009
mikdusan
math.Log2Int() ?

1615259053
mikdusan
oh that needs a type

1615259193
mikdusan
math.IntFittingRange

1615263067
g-w1
oh I actually need it to be able to detect 0x0000000000000000 as having 8 bytes. is this possible?

1615263184
daurnimator
g-w1: no

1615263201
daurnimator
g-w1: you have to tell zig how many bytes an integer should take

1615263208
daurnimator
s/bytes/bits/

1615263214
g-w1
makes sense

1615263220
g-w1
now I need another @as

1615267177
ksynwa
I am a noob so I had a couple of questions. 1) What exactly is systems programming? Feel free to be brief about this. 2) Is Zig mostly a systems programming language?

1615267335
andrewrk
ksynwa, people mean different things when they say it, but in general it means that the Application Program Interfaces you are interacting with are Operating System APIs, or sometimes even that you are writing Operating System code yourself

1615267353
mipri
the wikipedia entry on it isn't bad, for wikipedia. There's a target platform and all of it's available for use, as opposed constraining yourself to a VM.

1615267375
andrewrk
Zig is a general-purpose programming language, which means it can be used for any kind of programming, including systems programming, but also anything else

1615267378
ksynwa
Nice. Okay. Thanks.

1615267398
ksynwa
Much appreciated.

1615267438
andrewrk
in fact, one of zig's strengths is that the restrictions it puts on zig programmers means that zig code can be used in many places - more places than most other programming languages

1615267495
ksynwa
Yeah I was reading its comparison with rust and seems like a nice compromise. Thanks for taking the time to explain.

1615267498
mipri
consider swapping two files. In almost any language, Perl, Python, bash, you'd do this with two rename() calls (downside: the one file is momentarily not present where it should be, and this could be spotted and cause a fault), or with a copy and two renames (downside: unnecessary I/O and disk usage).

1615267502
daurnimator
ksynwa: "true" (I say that in danger of a no-true-scotsman argument) systems programming often has requirements such as "no runtime"/"no garbage collection"/"no arbitrary heap allocation" many languages are hence no suitable for systems programming

1615267552
mipri
Linux actually has a renameat() syscall that you can use to swap two files in one operation, without either downside, but because it's new and not everywhere, you generally can't use it. In a systems programming language it's what I'd expect to use.

1615267582
andrewrk
mipri, we have a nice way to model that - you can do a comptime check for the target OS version range

1615267598
andrewrk
if the minimum OS version range is >= the version that introduced it, you can unconditionally rely on it

1615267633
andrewrk
oops, I meant to say, "if the target OS version range minimum is >="

1615267633
daurnimator
andrewrk: did we ever get the graceful fallback for comptime-known vs runtime-known working on that?

1615267643
andrewrk
for renameat? I don't remember

1615267650
daurnimator
andrewrk: I meant for the version check helper

1615267663
andrewrk
I vaguely remember seeing a clean version check helper

1615267697
andrewrk
if the target OS version range maximum is < the version that introduced renameat then you can unconditionally do the code that does not use it

1615267715
andrewrk
and finally if the target OS version range spans the version that introduced it, you can do the version check at runtime, and choose which code path is appropriate

1615267741
andrewrk
and this can be expressed quite simply and cleanly with zig

1615267747
daurnimator
i.e. some feature was introduced in 3.15. scenario A: you compile for 4.0-5.10: we know at comptime that it will be available and have no fallback. scenario B: you compile for 3.14-5.10: you need to branch at runtime and include both versions in the code.

1615267775
andrewrk
don't forget scenario C

1615267812
daurnimator
or D

1615267817
andrewrk
what's D?

1615267842
andrewrk
C is you compile for 4.0-3.14

1615267853
andrewrk
oops I mean 3.0-3.14

1615267855
daurnimator
D is that the feature got backported to the 3.14 kernel and we should have just tried it and only fallback on ENOSYS

1615267879
andrewrk
that would be the same code as scenario B

1615267907
andrewrk
unless scenario B wants to avoid the ENOSYS entirely?

1615267923
daurnimator
I thought in scenario B its a switch on e.g. whatever is returned by `uname`

1615267974
andrewrk
I see, yes I can see where that would be desirable too in some cases

1615267982
mipri
nice, std.os.sendfile has an example of glibc version checking

1615267990
daurnimator
looks like our helper just returns `null`. so the choice of "try anyway" vs "use uname" is up to the caller:

1615272044
protheory8-new-m
Hi, will Zig compiler support Reference Types, Module Linking, Interface Types, Threads and Atomics proposals once they will get merged into the WebAssembly specification?

1615272052
protheory8-new-m
Or does it depend on LLVM?

1615273168
andrewrk
yes, zig will support these. there is a self-hosted backend in progress that is independent of LLVM

1615273185
andrewrk
it may take some time however. I don't have an estimate on when such features will be available

1615277465
protheory8-new-m
So Zig is going to be one of the best languages for WebAssembly? It doesn't have a GC.

1615277477
ksynwa
Do you prefer to use zls (languager server) from the github releases or build it from master?

1615277650
protheory8-new-m
* So is Zig going to be one of the best languages for WebAssembly? It doesn't have a GC.

1615277717
daurnimator
ksynwa: generally I build from master. But I believe there is currently an incompatibility

1615277731
ikskuh
protheory8-new-m: no, not "going to be". just

1615277740
daurnimator
protheory8-new-m: we hope so?

1615277809
protheory8-new-m
<ikskuh "protheory8-new: no, not "going t"> I don't see any libs for doing that, so I wouldn't say that

1615277828
protheory8-new-m
* I don't see a lot of libs tbh, so I wouldn't say that

1615277884
ikskuh
protheory8-new-m: I've seen people doing immediate html rendering in zig already

1615277889
ikskuh
i'm using it for myself

1615277902
ikskuh
most zig libraries that don't talk to native are just wasm compatible

1615277908
protheory8-new-m
Maybe someone will make a JavaScript to WebAssembly compiler and it will automatically become the best language for Wasm lol

1615277930
protheory8-new-m
<ikskuh "protheory8-new: I've seen people"> where

1615277947
ikskuh
here and there

1615277962
ikskuh


1615277969
ikskuh
this is by me, using a compiler written in zig in wasm

1615277975
ikskuh
which was pretty much zero-effort

1615277998
protheory8-new-m
> compiler written in Zig in Wasm

1615277998
protheory8-new-m
What do you mean?

1615278006
ikskuh
i've written a compiler in zig

1615278012
ikskuh
(lola is my programming language)

1615278024
ikskuh
and i've made the wasm playground afterwards, took me one or two hours

1615278033
ikskuh


1615278045
protheory8-new-m
But where is html rendering?

1615278061
ikskuh
yeah, i'm searching

1615278156
ikskuh


1615278192
ikskuh
not sure if it still builds, but it's a nice demo with DOM modification and webgl combined

1615278309
protheory8-new-m
Or maybe we can have Java bytecode embedded into Wasm file as data, hard code Java VM to execute that bytecode and then compile it into WebAssembly

1615278385
protheory8-new-m
So we get Java VM compiled to WebAssembly, which executes hard coded into Wasm file Java bytecode

1615278415
ikskuh
protheory8-new-m: you won't see much good wasm dom rendering libraries though, until wasm-in-the-browser gets a well defined API for it

1615278417
protheory8-new-m
Truly write once run anywhere

1615278461
protheory8-new-m
<ikskuh "protheory8-new: you won't see mu"> But it already exists, you interact with DOM through JS

1615278483
ikskuh
yeah, but everyone does differently

1615278490
ikskuh
which means there is no portability for wasm apps

1615282026
protheory8-new-m
<ikskuh "yeah, but everyone does differen"> What do you mean?

1615283052
shachaf
protheory8-new-m: You should probably not use Matrix features like replying to messages and editing messages on IRC. They translate very badly.

1615283101
protheory8-new-m
Yeah, I figured

1615284741
ikskuh
protheory8-new-m: everyone uses a different API to access DOM from WASM

1615285603
tane
howdy

1615285654
TheLemonMan
hiya

1615285753
ikskuh
heya

1615286246
daurnimator
hoya?

1615286352
TheLemonMan
don't let the chain die

1615286507
daurnimator
TheLemonMan: I hear you can fix all the LLVM issues now? :)

1615286626
TheLemonMan
I wish we didn't discover all those regressions a week before the release is cut heh

1615286799
daurnimator
Not as if we develop against LLVM master..... I'd be surprised if we're not the only project even trying their release candidates

1615286868
TheLemonMan
rust moved to 12 a few days ago

1615286891
TheLemonMan
but they vendor their llvm copy so any interesting patch can be cherry-picked

1615292894
skuzzymiglet
are there any Qt bindings for Zig you know of?

1615292910
skuzzymiglet
or C for that matter :)

1615292917
ikskuh
nope, i don't think so?

1615292933
ifreund
skuzzymiglet: I saw this but haven't looked closely:

1615292981
skuzzymiglet
looks alright

1615292996
skuzzymiglet
not sure why it's QML bindings not Qt

1615293036
skuzzymiglet
not sure of the difference

1615293049
ikskuh
Qt is a huge framework with thousands of classes

1615293064
ikskuh
binding it to C is nearly impossible due to a huge load of inheritance and polymorphism

1615293146
skuzzymiglet
I'm just thinking of messing with some webviews and qtwebengine is the most modern

1615293156
ikskuh
ah

1615293168
ikskuh
you could use a combined zig/qt build thing though

1615293183
ikskuh
make a library with qt that just exports the api surface you need :)

1615293195
skuzzymiglet
in C++?

1615293207
ifreund
yeah, but export a C API

1615293241
ifreund
and you can build/link C++ doing that with zig code no problem using the zig toolchain :)

1615293437
skuzzymiglet
thanks, I'll try that when I find some time :)

1615293575
ikskuh
yeah, i'd do it in C++

1615293584
ikskuh
qt is not made for other languages than C++ :D

1615293606
skuzzymiglet
indeed

1615293637
skuzzymiglet
it takes lots of work to bind and the end result sucks in every language

1615293676
ikskuh
yeah

1615293686
ikskuh
same will be true for an idiomatic zig UI though

1615293693
ikskuh
(or any UI basically)

1615299405
ikskuh


1615299630
Raito_Bezarius
I'm trying to reinterpret a @embedFile array into a packed structure, but for some reason, the resulting structure data looks wrong

1615299653
Raito_Bezarius
This looks like this:

1615299672
TheLemonMan
nested packed structures are often wrong

1615299683
Raito_Bezarius
the header looks good though

1615299685
Raito_Bezarius
the data is wrong

1615299693
Raito_Bezarius
so you suggest I should inline it?

1615299704
TheLemonMan
yeah

1615299709
Raito_Bezarius
Alright, thanks for the pointer!

1615299805
ifreund
Raito_Bezarius: I don't think you're hitting any packed struct bug there, what you're trying to do is invalid though

1615299840
ifreund
you can only @ptrCast() for the header, you need to set the data pointer manually

1615299841
Raito_Bezarius
ifreund: Could you explain me what is invalid? I'm having some difficulties to grasp yet what @ptrCast does exactly

1615299847
Raito_Bezarius
ha

1615299848
Raito_Bezarius
hm

1615299853
Raito_Bezarius
why ?

1615299877
ifreund
@ptrCast() allows you to tell the compiler to reinterpert memory as some other type

1615299889
ifreund
which is fine for the header of u32s

1615299911
ifreund
it is not fine to reinterpert the first bytes of data as a memory address where the data is stored though

1615299922
ifreund
it won't be the right address

1615299922
Raito_Bezarius
Right, I see now

1615299930
Raito_Bezarius
Okay, I see why this is wrong

1615299997
TheLemonMan
that ptrToInt + intToPtr combo looks pretty wild

1615300049
DarkUranium
skuzzymiglet, why not GTK?

1615300052
DarkUranium
Or, for simple UI, libui

1615300099
Raito_Bezarius
TheLemonMan: is there something more idiomatic?

1615300110
Raito_Bezarius
I really do use ptrToInt + intToPtr more than often that I would in an attempt to mimic C

1615300123
TheLemonMan
@ptrCast(*u32, dest + line) ?

1615300160
Raito_Bezarius
Aha

1615300162
Raito_Bezarius
Thanks

1615300165
TheLemonMan
wait, why is dest *[*]u8 ?

1615300240
Raito_Bezarius
pointer on an array of pixels?

1615300253
Raito_Bezarius
like char** dest?

1615300275
Raito_Bezarius
I could only use char* dest I guess

1615300296
Raito_Bezarius
can I discard a const during casts?

1615300322
TheLemonMan
not if you still want your kneecaps

1615300334
Raito_Bezarius
alright, I want them

1615300357
TheLemonMan
if you

1615300362
Raito_Bezarius
but like if I do inline the packed struct, @embedFile give me a *const [*]u8

1615300362
TheLemonMan
but that's bad, really bad

1615300377
Raito_Bezarius
and then if I reinterpret the header in the inlined struct

1615300382
Raito_Bezarius
I still need to set the data ptr

1615300391
Raito_Bezarius
but when ptrCasting, I still get the const qualifier

1615300396
Raito_Bezarius
so I cannot mutate the data ptr (?)

1615300426
ifreund
the data you get from @embedFile() is const

1615300438
ifreund
you can may a copy if you want o mutate it

1615300438
Raito_Bezarius
That makes sense

1615300440
TheLemonMan
I'm not following because I'm shit at multitasking, but embedded data cannot be mutated

1615300454
ifreund
var mutable_data = @embedFile("foo").*;

1615300476
TheLemonMan
but why are you mutating the font data in first place?

1615300482
Raito_Bezarius
I don't want to mutate

1615300482
ifreund
^^^

1615300492
Raito_Bezarius


1615300510
Raito_Bezarius
as per ifreund remark, I cannot reinterpret the data

1615300519
Raito_Bezarius
so I can just set font.data to be buffer + font.headerSize

1615300537
Raito_Bezarius
or am I doing something stupid?

1615300573
TheLemonMan
data = buffer + @sizeOf(Header)

1615300575
TheLemonMan
that's it

1615300612
TheLemonMan
right now you're stomping over the first 4/8 bytes of font data to set-up your pointer

1615300653
Raito_Bezarius
hm right

1615300655
TheLemonMan
I guess you're trying to emulate a tail field with `char []` type

1615300659
TheLemonMan
in C

1615300660
Raito_Bezarius
correct

1615300671
TheLemonMan
yeah that's not the correct translation

1615300731
Raito_Bezarius
I don't want to make you spend more time on noob question, do you have any pointers on where to look to learn about it in Zig land?

1615300771
TheLemonMan
I think you can do something like `fn data(self: *Font) [*]u8 { return @ptrCast(u8, self) + @sizeOf(Header); }`

1615300819
ifreund
@ptrCast([*]u8, ...

1615300821
TheLemonMan
or simply pass a pointer for your data and one for the header

1615300839
TheLemonMan
ifreund, told you I'm shit at multitasking heh

1615300851
Raito_Bezarius
yeah but I understood the intent :p

1615300873
TheLemonMan
ifreund, I've updated #8178, we may need more than two sets of stubs :(

1615300891
TheLemonMan
or give everything the middle finger and merge all the symbols into a single one

1615301049
ifreund
hrm, that's no fun

1615301095
Raito_Bezarius
nice, I think I got it, thank you ifreund & TheLemonMan !

1615301143
TheLemonMan
Raito_Bezarius, nice, if you have any more problems please ask away

1615301147
TheLemonMan
we're a friendly bunch

1615301183
Raito_Bezarius
That's really awesome, thank you for your help :)

1615301421
ifreund
TheLemonMan: maybe we should just be building musl's libc.so from source for the target when dynamically linking instead of using stubs. We already can build libc.a

1615301502
TheLemonMan
that's an idea, we could also try passing --allow-shlib-undefined and forget about it

1615301525
TheLemonMan
after all we need the stub thing for glibc only because of the symbol versioning story

1615301542
TheLemonMan
but musl doesn't give a damn

1615301555
ifreund
hmm, though doesn't that mean people won't get errors if they use something that's actually not defined by libc?

1615301580
ifreund
sounds like a kinda crappy user experience

1615301587
TheLemonMan
that's the only downside

1615301622
TheLemonMan
well right now it's erroring because people are using symbols that do exist :P they even out

1615301630
ifreund
:D

1615301753
ifreund
TheLemonMan: by the way, do you have an idea of a good way to fix this?

1615301858
TheLemonMan
you can't do much :\ the system .so files are linked against a newer symbol

1615301894
ifreund
should zig default to using the system libc then?

1615301936
TheLemonMan
if you're not cross-compiling that's ok

1615302103
TheLemonMan
today I learned about go's &^ operator and now I want it in Zig too

1615302272
ifreund
isn't that just a & ~b ?

1615302288
ifreund
or do I not fully understand what that operator does?

1615302306
TheLemonMan
yeah

1615302341
TheLemonMan
I think it's useful when b is a comptime_int constant

1615302363
TheLemonMan
you can avoid the casting madness before applying the not

1615309670
txdv
Are there any plans for a http library?

1615309688
ifreund
http library:

1615309720
ifreund
there will at least a client library in the std eventaully though for the package manager

1615309907
txdv
Any ETA on when the package manager is going to drop?

1615310015
TheLemonMan
tomorrow

1615310030
ifreund
after the stage2 compiler compiles itself

1615311061
marler8997
Fellow language connoisseurs, I want to get people's opinion on whether my stitch scripting language should add special syntax for variable assignment "foo = bar" of if I should use a builtin like "@set foo bar".  Feel free to share your thoughts with me on the #stitch channel

1615311174
TheLemonMan
it depends on whether you want people to use it or not

1615311201
marler8997
TheLemonMan, definite yes to that

1615311254
TheLemonMan
then I'd ditch the second option

1615311373
marler8997
follow up question, how would you want to differentiate between setting a script variable vs an  environment variable?

1615311397
TheLemonMan
with a leading $ for env vars

1615311414
TheLemonMan
unless you want $igil$

1615311416
marler8997
script variables use leading $

1615311438
marler8997
env.FOO = bar?

1615311460
marler8997
access with $env.FOO

1615311490
TheLemonMan
a bit verbose but works (do env variables allow spaces in their names?)

1615311507
marler8997
TheLemonMan, good question

1615311526
marler8997
do OS's let you do that?

1615311526
ifreund
indeed

1615311531
ifreund
man environ

1615311576
marler8997
doesn't look like it: 'FOO BAR=what' env

1615311588
ifreund
well, it's well specificed, but you can certainly put FOO=foo bar in your environ

1615311589
marler8997
well, that's just BASH

1615311598
ifreund
*not well specified

1615311611
marler8997
right, but in the varname

1615311613
ifreund
it's just and array of null terminated strings

1615311649
ifreund
musl's getenv() seems to allow it

1615311685
marler8997
looks like it works

1615311708
marler8997
this python program: import os;import subprocess;os.environ["foo bar"] = "hey";subprocess.call(["env"])

1615311793
marler8997
I'm also fine with using a builtin commands for managing environment variables: @setenv "foo bar" "hey"  (@env "foo bar")

1615311869
ifreund
we sould maybe move this to #stitch

1615311918
marler8997
yeah, would love to get people's feedback, let me know on #stitch

1615317918
andrewrk
ifreund, I haven't had a chance to look into 8144 yet but based on the error you pasted it looks like the stubs incorrectly link against 2.33 instead of 2.32 as they were supposed to

1615317966
TheLemonMan
it's the system library that's linked against a newer version

1615318019
andrewrk
oh I see

1615318024
TheLemonMan
ah, the MIPS issue mentioned on reddit is tracked in #8183 and #8178

1615318156
ifreund
andrewrk: one way to solve this would be a way to force usage of the system libc. This is probably the right default when linking system libraries tbh

1615318198
andrewrk
yeah I can see that

1615318202
ifreund
you can already do this by passing the output of `zig libc` to the --libc option but it's not very convinient in build.zig yet

1615318289
andrewrk
I think if zig was in charge of building everything, it would be desirable to leave things as status quo

1615318296
ifreund
indeed

1615318312
andrewrk
but if we're trying to mix with system libraries, then it makes sense to link against system libc

1615318343
ifreund
the status quo is necessary for zig's cross compilation capabilities, which are only possible if not linking system libraries

1615318349
andrewrk
we have this problem even more severely with building c++ code

1615318379
andrewrk
zig can build c++ code but shit hits the fan quickly if you try to link against c++ code from other compilers

1615318387
andrewrk
and there's nothing we can do about that

1615318411
ifreund
sounds about right :/

1615318432
ifreund
maybe zig could invoke the system C++ compiler though

1615318442
ifreund
(if linking system C++ libraries)

1615318528
andrewrk
ugh

1615318548
andrewrk
we were so close to eliminating an entire scope of problems

1615318614
ifreund
just gotta get everyone to vendor their C code and stop linking system libs

1615318622
ifreund
distros will hate us

1615319410
andrewrk
wow that actually sounds great to me

1615319414
andrewrk
I hadn't even considered that

1615319432
andrewrk
but yeah I can already feel the heat from distro maintainers rage

1615320161
bbuccianti
andrewrk: I just wanted to say that I'm seeing your vimeo videos about game development with SDL2 and it's such a nice experience! thanks a lot for those!

1615321081
earnestly
andrewrk: Do you think they have legitimate concerns?

1615322868
vent
mus

1615324479
carldd
Hi, does Zig have VLA (Variable Length Arrays) or something similar to the C99 function `alloca`?

1615325138
mikdusan
andrewrk: maybe we should think about an abi-designator in the triple that

1615329971
ikskuh
carldd: no, that feature is considered unsafe and is not supported in zig.

1615330019
ikskuh
use a "big enough" array if you know the uppper bound

1615330023
ikskuh
or do a heap allocation if you don't

1615330209
carldd
ikskuh: Ok, thanks. I'll have to do something like that

1615330780
andrewrk
earnestly, yes they do

1615330895
earnestly
I don't think they're going to survive against developers; in many ecosystems that role as guardian between potentially malicious developers and users is already abandoned

1615331231
zags
Is there a nice way to dynamically add indentation in string formatting? I can do N prints of spaces, but lemme know if I'm missing a formatting trick or a repeat-this-char thingie. Note that the amount of indentation comes from a variable.

1615331969
ikskuh
isn't there a indenting writer somewhere?

