1630283066
lennyy!~user@174-18-56-113.tcso.qwest.net
ded chat xd

1630284823
h4ze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wtf

1630284849
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
irc hates me

1630285569
noam!~noam@104.232.42.247
IRC doesn't hate anyone, it's a protocol

1630285574
noam!~noam@104.232.42.247
a specific IRC server might hate you, though

1630289291
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
*gasps for air*

1630301060
jcmoyer_!~jcmoyer@user/jcmoyer
does anyone have an idea what this error means? https://pastebin.com/raw/swWknBp1

1630301093
jcmoyer_!~jcmoyer@user/jcmoyer
it's the same type...right?

1630301343
jcmoyer_!~jcmoyer@user/jcmoyer
https://godbolt.org/z/Y4o9qK97f minimized it a bit

1630301988
squeek502!~squeek502@user/squeek502
yeah i think that's a bug

1630302020
squeek502!~squeek502@user/squeek502
not sure if there's an issue for it already

1630302512
jcmoyer_!~jcmoyer@user/jcmoyer
ah yeah #4305

1630325440
flyx[m]!~flyxflyxo@mail.flyx.org
what's the styleguide for error names? according to the rules in the docs, they should be snake_case, but std errors are all TitleCase

1630325560
ifreund!~ifreund@user/ifreund
flyx[m]: TitleCase is correct, where in the docs does it say they should be snake_case?

1630325640
ifreund!~ifreund@user/ifreund
yeah you're right, errors are left out there 

1630325778
flyx[m]!~flyxflyxo@mail.flyx.org
seems to be an oversight of not mentioning them

1630328167
flyx[m]!~flyxflyxo@mail.flyx.org
how do I call the result of a switch expr? `switch {â€¦}();` says that ')' is an invalid token.

1630328233
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
maybe put parens around the switch?

1630328237
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
(switch {})()

1630328254
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
* `(switch (x) {})()`

1630328293
ifreund!~ifreund@user/ifreund
I don't think that should be needed based on the grammar

1630328302
ifreund!~ifreund@user/ifreund
flyx[m]: could you paste the code snippet that doesn't compile somewhere?

1630328424
flyx[m]!~flyxflyxo@mail.flyx.org
ah yes that works, thx

1630328426
flyx[m]!~flyxflyxo@mail.flyx.org
https://gist.github.com/flyx/7ea7cc7a2898e3680d86ac16f3b53c57

1630328614
ifreund!~ifreund@user/ifreund
flyx[m]: oh funky, I bet this works too though (which is really weird:

1630328679
ifreund!~ifreund@user/ifreund
(switch (x) { ... }());

1630328710
ifreund!~ifreund@user/ifreund
that's a weird quirk of the grammar

1630328734
ifreund!~ifreund@user/ifreund
if you do e.g. `const x = switch (y) { ... }();` you won't need any enclosing parens at all

1630328787
flyx[m]!~flyxflyxo@mail.flyx.org
particularly weird since the grammar does differentiate between IfStatement and IfExpr but switch is always SwitchExpr

1630328870
ifreund!~ifreund@user/ifreund
flyx[m]: no, those have the same issue

1630328879
ifreund!~ifreund@user/ifreund
(for/if/while) I mean

1630328927
flyx[m]!~flyxflyxo@mail.flyx.org
yes, I wanted to point out that for/if/while having that issue makes sense since they are parsed as statement on statement lvl but switch isn't

1630328960
flyx[m]!~flyxflyxo@mail.flyx.org
but I'm probably interpreting too much into nonterminal names

1630329202
flyx[m]!~flyxflyxo@mail.flyx.org
ya, seems like IfStatement et al exist because the branch(es) contain statements while in switch they always contain expressions

1630329410
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: I think I have a problem with deleting allocateDeclIndexes. if I do it in update{Func, Decl} (first time I see a decl), in codegen, a function can be called that does not have a got_index yet, because the linker has not seen it, and then I get this: `thread 5709 panic: attempt to use null value

1630329410
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
/home/jacob/dev/zig/src/codegen.zig:2945:100: 0xe4b840 in codegen.Function(std.target.Arch.x86_64).airCall (test)

1630329410
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
                                const got_index = func_payload.data.owner_decl.link.plan9.got_index.?;` am I doing something wrong?

1630329484
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or when you delete it, will you make sure that all decls that are being called have been seen first?

1630346773
andrewrk!~andrewrk@mail.ziglang.org
g-w1, when a function is called for the first time and it has not been seen before, codegen/linker will then need to allocate the got index

1630346798
andrewrk!~andrewrk@mail.ziglang.org
reason for this is that many decls will be garbage collected before they ever get sent to the linker/codegen

1630347335
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
imagine if we could nitro boost irc servers

1630347527
marler8997!~marler899@204.229.3.4
I want to double check, is it correct that Zig purposely never allows an unaligned value to be cast to a pointer that has an alignment requirement?

1630347585
marler8997!~marler899@204.229.3.4
for example, if I have foo(ptr: [*]u16) (where alignment is 2), there's no way in Zig to pass an odd value to that ptr?

1630347650
ifreund!~ifreund@user/ifreund
yeah, that's correct

1630347678
marler8997!~marler899@204.229.3.4
ok thanks for confirming

1630347696
marler8997!~marler899@204.229.3.4
here's the relevant thread if you're interested or have any feedback for me: https://github.com/microsoft/win32metadata/issues/623

1630347802
marler8997!~marler899@204.229.3.4
anyone know if rust does any pointer alignment enforcement like this?

1630347820
ifreund!~ifreund@user/ifreund
no, they aren't any safer than C in that regard afaik

1630347990
ifreund!~ifreund@user/ifreund
marler8997: looks like rust only checks for alignment on dereference:

1630347992
ifreund!~ifreund@user/ifreund
Working with raw pointers in Rust is uncommon, typically limited to a few patterns. Raw pointers can be unaligned or null. However, when a raw pointer is dereferenced (using the * operator), it must be non-null and aligned.

1630348016
marler8997!~marler899@204.229.3.4
interesting

1630348016
ifreund!~ifreund@user/ifreund
not that rust has a spec yet, but that's what the docs here say: https://doc.rust-lang.org/std/primitive.pointer.html

1630353141
marler8997!~marler899@204.229.3.4
so I got to thinking the other day.  Does anyone know if there is a general purpose format/standard for declaring a library API?  For example, the zigwin32 project uses the windows metadata format to read the Win32 API and generate Zig bindings.  Is there a more general version of this that already exists?  If not, do you think this is something worth exploring?

1630353254
ikskuh!~xq@2a0d:5940:6:163::ad7e
i don't think there is

1630353266
ikskuh!~xq@2a0d:5940:6:163::ad7e
and i think it's worth exploring, especially for generating bindings

1630353271
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
swagger

1630353301
ikskuh!~xq@2a0d:5940:6:163::ad7e
haze: rest api != native api /o\

1630353314
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thats what they want you to think

