1634947331
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
wtf is a unsigned long int

1634947523
freshcoffee!~fresh@user/freshcoffee
welcome to c

1634947566
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
nah i call out

1634947700
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: memset requires integers as the arguments. The elements in the array can be whatever

1634947706
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
we are bitcasting the whole array to an integer

1634947761
andrewrk!~andrewrk@mail.ziglang.org
g-w1, check the docs for the AIR memset instruction

1634947790
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hm, so we can memset where the value is an array?

1634947802
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I assumed it was any int, as that is what llvm has

1634947811
andrewrk!~andrewrk@mail.ziglang.org
yes; AIR allows it and each backend is required to lower this appropriately

1634947816
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
cool

1634947826
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i'll move the memcpy code to the llvm backend then

1634947830
andrewrk!~andrewrk@mail.ziglang.org
the LLVM backend as you noted will need to bitcast to integers, or do some other strategy when that does not work

1634950653
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ok it doesn't work (i realized that test-stage2 doesn't test behavior :()

1634951884
andrewrk!~andrewrk@mail.ziglang.org
did you figure out how to run the behavior tests?

1634952448
andrewrk!~andrewrk@mail.ziglang.org
progress update: self-hosted is now passing 338/1051 (32%) behavior tests

1634955220
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
W

1634956681
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
does `*T` coerce into `[*c]T`?

1634957646
flux_control!~flux@sourcemage/wizard/flux
andrewrk: w00t!

1634958710
akiselev!~akiselev@cpe-75-80-179-156.san.res.rr.com
anyone know what causes `unaligned tcache chunks` crashes? its happening deep in libgtk but i'm trying to figure out if its something i did to clober allocation

1634959407
andrewrk!~andrewrk@mail.ziglang.org
haze, yes

1634965879
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
andrewrk its ok andrew

1634965894
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
re stage2: https://youtu.be/_hLaIDWyCN8

1634966032
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
1 c import, yet i get this ./src/main.zig:21:9: error: expected type '[*c]?*const .cimport:1:15.struct___CFArray', found '[*c]?*const .cimport:1:15.struct___CFArray'

1634972079
andrewrk!~andrewrk@mail.ziglang.org
haze, sounds like a bug, that coercion should be allowed

1634990593
zignoob101!~zignoob10@106.51.89.95
Hi. I want to pass a buffered writer that wraps stdio (`std.io.bufferedWriter(std.io.getStdOut().writer())`) to a function but can't figure out the type of the argument to use. I have tried several types including `io.std.BufferedWriter`. What should it be? Apologies for the n00b question. I have just started to learn Zig.

1634997127
tgschultz!UserNick@047-034-058-084.res.spectrum.com
it'll be a bit complicated because the type is determined based on comptime parameters. Easiest way I can think to find out is to use `@typeName(@TypeOf(writer))` with @compileError to get the compiler to tell you. Though usually when dealing with readers and writers we just use `anytype` for the parameter.

1634997199
tgschultz!UserNick@047-034-058-084.res.spectrum.com
zignoob101 ^

1634998718
tenshi!~red@user/tenshi
Can I get zig to only use the parameters I give it when compiling C files?

1635009925
leon-p!~leon-p@2a02:8108:96c0:1810:40a7:f1ff:fead:8d5c
are there any examples for connecting to UNIX sockets using the std lib functions? The functions have the same names and params as what I am used to from C, but the C way of doing this requires casting a sockaddr_un pointer as a sockaddr pointer and I was wondering if the std lib offers a nicer alternative.

1635010710
luuk!~luuk@user/luuk
leon-p, std doesn't provide any functions/utility to do that for you. It only provides the data structures such as sockaddr_un. You'll still need to @ptrCast your sockaddr_un to a sockaddr.

1635011699
leon-p!~leon-p@2a02:8108:96c0:1810:40a7:f1ff:fead:8d5c
luuk: thanks for the answer! I currently use ptrCast and it works fine, just thought to ask if there is something nicer

1635011768
luuk!~luuk@user/luuk
No problem :))

1635026942
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
andrewrk nah, two different cimports 

1635031556
beelover!~beelover@82.28.142.87
Hello, just trying to compile some old zig code from https://github.com/markfirmware/zig-bare-metal-microbit and having issues with the asm macro

1635031618
beelover!~beelover@82.28.142.87
The error message says assembly code must use string literal syntax. I've done a bit of research and found that this is called global assembly

1635031669
beelover!~beelover@82.28.142.87
This is the specific line causing the error https://github.com/markfirmware/zig-bare-metal-microbit/blob/54567743eea2c673449d0551af78922d97d7c51f/mission0_mission_selector.zig#L172

1635031744
beelover!~beelover@82.28.142.87
It appears the function call in asm (typicalVectorTable(mission_id)) returns a []const u8 but that's not good enough

1635031846
beelover!~beelover@82.28.142.87
Does anybody have any suggestions how to get around this? The code must have been valid as of February last year but I can't find what the new recommendation is

