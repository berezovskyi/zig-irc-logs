1629860502
marler8997!~marler899@204.229.3.4
andrewrk, I've got a github workflow CI building the windows devkit.  Here's the resulting artifact from my fork of zig-bootstrap: https://github.com/marler8997/zig-bootstrap/actions/runs/1163995714

1629860628
marler8997!~marler899@204.229.3.4
give this PR a review: https://github.com/ziglang/zig-bootstrap/pull/65/files  if it looks good let me know and I'll rebase it to build the latest (it's based off an older commit right now so I could reproduce the older devkit and compare them)

1629860670
andrewrk!~andrewrk@mail.ziglang.org
nice work!

1629860918
andrewrk!~andrewrk@mail.ziglang.org
so the idea here is when we want a new dev kit, we just sync the newest zig version and push to master?

1629860941
marler8997!~marler899@204.229.3.4
sure, or push to a branch and merge it

1629860976
marler8997!~marler899@204.229.3.4
the artifact is hosted for like 90 days I think,  If you want to keep it long-term, you can make a "release" and add it as an "asset" for that release

1629861351
andrewrk!~andrewrk@mail.ziglang.org
is that patch in https://github.com/ziglang/zig-bootstrap/pull/64 upstream in release/12.x? or only in release/13.x?

1629861388
andrewrk!~andrewrk@mail.ziglang.org
hmm I only see it in release/13.x

1629861563
marler8997!~marler899@204.229.3.4
not sure, if you only see it in 13.x then it must be

1629861749
andrewrk!~andrewrk@mail.ziglang.org
well this should be a nice improvement for the windows development workflow

1629862129
marler8997!~marler899@204.229.3.4
yeah I'm very excited for what Zig is going to do for windows tooling.  rebased the PR, now to wait 3 in a half hours :)

1629862569
andrewrk!~andrewrk@mail.ziglang.org
I'm guessing I need to enable actions on the repo

1629862588
andrewrk!~andrewrk@mail.ziglang.org
oh nope it's automatic. pretty nifty

1629862621
andrewrk!~andrewrk@mail.ziglang.org
I need to get that 0.8.1 out the door

1629862796
andrewrk!~andrewrk@mail.ziglang.org
hmm it seems that AstGen.zig is not catching all ambiguous references

1629864417
marler8997!~marler899@204.229.3.4
andrewrk, oh no I accidently removed a line on my rebase merge conflict resolution

1629864426
marler8997!~marler899@204.229.3.4
https://github.com/ziglang/zig-bootstrap/commit/aec817eab24247afb144460e7e0d1d29ef4c3d1d#diff-44575cf5b28512d75644bf54a517dcef304ff809fd511747621b4d64f19aac66L9

1629868669
marler8997!~marler899@204.229.3.4
that looks better, if it goes well we'll have a new devkit with version 0.8.0 once this completes: https://github.com/ziglang/zig-bootstrap/runs/3418160053?check_suite_focus=true

1629869541
andrewrk!~andrewrk@mail.ziglang.org
very cool

1629869556
andrewrk!~andrewrk@mail.ziglang.org
I'll update the 0.8.x branch tomorrow

1629874426
bgiannan!~bgiannan@194.206.91.37
andrewrk, quick question: are you still not considering adding some kind of interface-type concept to zig? Tagged union are great to hold several unrelated types but you can't share/inherit from another struct unless you can reinterpret memory which force you to use packed struct. Packed struct prohibit fields from being of a non-packed struct type, so it's pretty much useless to me.

1629876961
andrewrk!~andrewrk@mail.ziglang.org
bgiannan, I have no current plan to add any interface-type concept to zig

1629876984
andrewrk!~andrewrk@mail.ziglang.org
there are a few patterns for doing interfaces

1629876997
andrewrk!~andrewrk@mail.ziglang.org
you don't need packed struct

1629877078
andrewrk!~andrewrk@mail.ziglang.org
you embed your base struct into another one and that's pretty much OOP inheritance right there. to get from base to child use @fieldParentPtr

1629877454
jjido!~Denis@90.213.58.125
andrewrk how many levels of inheritance can you go with that scheme?

1629877480
andrewrk!~andrewrk@mail.ziglang.org
arbitrary

1629877497
andrewrk!~andrewrk@mail.ziglang.org
it also lets you do "multiple inheritance" without any of the usual drawbacks

1629877542
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, interfaces are already quite conveniently implementable

1629877560
jjido!~Denis@90.213.58.125
is @fieldParentPtr for arbitrary deep inheritance?

1629877636
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, this is one pattern for this

1629877881
bgiannan!~bgiannan@194.206.91.37
andrewrk, that's what i did yes, but it gets really hard to maintain once you have more that one level of inheritance

1629877983
bgiannan!~bgiannan@194.206.91.37
you have to define for each type a function to cast to and from the base type, you can't override functions (well, you can but you have to have pointers to functions that you change), etc.

1629878016
ikskuh!~xq@2a0d:5940:6:163::ad7e
to base type should just be "&derived.base"

1629878028
bgiannan!~bgiannan@194.206.91.37
if you have one level yes

1629878034
ikskuh!~xq@2a0d:5940:6:163::ad7e
&derived.base.base

1629878036
bgiannan!~bgiannan@194.206.91.37
right

1629878044
bgiannan!~bgiannan@194.206.91.37
so i made helpers functions for each type

1629878063
ikskuh!~xq@2a0d:5940:6:163::ad7e
how do they look?

1629878072
ikskuh!~xq@2a0d:5940:6:163::ad7e
also, how do you select the implementation?

1629878073
bgiannan!~bgiannan@194.206.91.37
same the other way, you end up having multiple @fieldParentPtr to get to your base type, 

1629878097
ikskuh!~xq@2a0d:5940:6:163::ad7e
to the base type, you don't need @fieldParentPtr

1629878117
bgiannan!~bgiannan@194.206.91.37
i meant to get the actual type

1629878125
bgiannan!~bgiannan@194.206.91.37
not the base type

1629878179
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1629878197
ikskuh!~xq@2a0d:5940:6:163::ad7e
if we put enough brain power into a library, we can probably implement all of that nicely in comptime

1629878219
bgiannan!~bgiannan@194.206.91.37
i don't think so

1629878222
ikskuh!~xq@2a0d:5940:6:163::ad7e
then you just need "dynamicCast(Target*, foo)"

1629878265
ikskuh!~xq@2a0d:5940:6:163::ad7e
including RTTI

1629878448
ikskuh!~xq@2a0d:5940:6:163::ad7e
bgiannan: may i ask why you need those inheritance schemes? what is the implementation reason?

1629878694
bgiannan!~bgiannan@194.206.91.37
ikskuh, it was for https://giann.itch.io/settlers-of-the-deep i was rewriting in zig (like 2 years ago i haven't touched it since)

1629878729
bgiannan!~bgiannan@194.206.91.37
so i have say a Peasant, it's a Unit > Agent > Peasant, etc.

1629879179
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1629879196
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, i'd actually just use "&peasant.agent.unit"

1629879221
bgiannan!~bgiannan@194.206.91.37
that's if you know you're holding a peasant

1629879229
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1629879267
ikskuh!~xq@2a0d:5940:6:163::ad7e
so you want a "dynamicCast(Peasant, unit_ptr)" ?

1629879527
ikskuh!~xq@2a0d:5940:6:163::ad7e
i'll be afk for a while, but happy to discuss this later on :)

1629879540
ikskuh!~xq@2a0d:5940:6:163::ad7e
because i feel lik we can still solve this conveniently in userland

1629879830
bgiannan!~bgiannan@194.206.91.37
ikskuh, that `dynamicCast` would have to be a huge switch to call the appropriate cast function (here Peasant.cast(unit))

1629879936
bgiannan!~bgiannan@194.206.91.37
so i think you can do OOP but not dynamically, in my case: either i have a Peasant and i want a unit, i call peasant.toUnit(), or i have a unit and i want a Peasant, i call Peasant.cast(unit), or i have a unit and i want to call a common method that may have been overrident by Peasant 

1629879952
bgiannan!~bgiannan@194.206.91.37
it that last case i end up having a bunch of function pointers in the base type Unit

1629879972
bgiannan!~bgiannan@194.206.91.37
and the subclasses put pointers to their own function there

1629879981
bgiannan!~bgiannan@194.206.91.37
so it works

1629880008
bgiannan!~bgiannan@194.206.91.37
but it's really verbose, hard to maintain and error-prone

1629880019
bgiannan!~bgiannan@194.206.91.37
and i don't think you can do it dynamically in a library

1629884423
devast8a!~devast8a@2001:470:69fc:105::3f46
So you want some kind of polymorphism story in Zig?

1629884878
ikskuh!~xq@2a0d:5940:6:163::ad7e
bgiannan: you can do mixins for all of those

1629884906
ikskuh!~xq@2a0d:5940:6:163::ad7e
struct { usingnamespace DerivedFrom(Foo, "foo"); foo: Foo, ... }

1629884920
ikskuh!~xq@2a0d:5940:6:163::ad7e
DerivedFrom will implement up/downcast, if you want with type checking

1629884921
ikskuh!~xq@2a0d:5940:6:163::ad7e
and so on

1629884932
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have a rough plan how it could be implemented

1629891718
bgiannan!~bgiannan@194.206.91.37
ikskuh, didn't  thought of using `usingnamespace`

1629910499
marler8997!~marler899@204.229.3.4
lol, if one of your include files has a file named "rpc.h", then mingw won't allow you to include any windows headers :)

1629911031
bfredl!~bfredl@2001:470:69fc:105::183
Is RPC also a secret CP/M device that cannot be removed due to 40 years of backwards compatibility?

1629913063
jjido!~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372
bfredl it doesn't look like it though? https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words

1629914597
nemith!~bbennett@coachz.brbe.net
Zig noob here: What is the type i should use for storing a std.io.Writer in a struct?    I have `const Foo = struct { writer: anytype }` but if i try to do `var foo = Foo{ .writer = std.io.getStdOut().writer() }` i get `error: cannot store runtime value in type '(anytype)'`  

1629914615
nemith!~bbennett@coachz.brbe.net
as I understand it Writer itself isn't a type because it is a Function that returns a generic function

1629915867
andrewrk!~andrewrk@mail.ziglang.org
nemith, think of std.io.Writer as a type you construct when you need it, rather than storing it in a struct

1629915887
andrewrk!~andrewrk@mail.ziglang.org
store the thing that produces the writer rather than the writer itself

1629915903
andrewrk!~andrewrk@mail.ziglang.org
e.g. calling array_list.writer() is essentially free

1629916100
taman!~znc1@2a00:1098:82:30::94
I've found it works to do 'const stdout = std.io.getStdOut().writer();', just to save on the '.writer()' call later. Is that a Bad Thing then?

1629916302
ifreund!~ifreund@user/ifreund
taman: no not at all

1629916332
ifreund!~ifreund@user/ifreund
the difference is that if you were to store it in a struct you would need to provide an explict type for the writer

1629916461
taman!~znc1@2a00:1098:82:30::94
ifreund: ah OK thx

1629916600
andrewrk!~andrewrk@mail.ziglang.org
taman, keep in mind you will be doing unbuffered output with that example code

1629916710
taman!~znc1@2a00:1098:82:30::94
andrewrk, oh. So I should avoid holding on the the '.writer()' value for buffered output?  Did not know, thanks.

1629916727
taman!~znc1@2a00:1098:82:30::94
s/on/onto/

1629916753
ifreund!~ifreund@user/ifreund
taman: to do buffered output, you'd need an std.io.BufferedWriter

1629916756
ikskuh!~xq@2a0d:5940:6:163::ad7e
nah, you need to wrap your writer into a std.io.BufferedWriter to have buffered output

1629916760
andrewrk!~andrewrk@mail.ziglang.org
for buffered output you will have to hold on to a BufferedWriter

1629916769
andrewrk!~andrewrk@mail.ziglang.org
lol sorry for the triple response

1629916781
andrewrk!~andrewrk@mail.ziglang.org
we're playing zig jeopardy

1629916785
taman!~znc1@2a00:1098:82:30::94
np, thanks for replies

1629916802
andrewrk!~andrewrk@mail.ziglang.org
I'll take Design Patterns for 400

1629916832
companion_cube!~simon@user/companion-cube
how do you do a factory in zig?

1629916854
andrewrk!~andrewrk@mail.ziglang.org
fn factory()

1629916913
companion_cube!~simon@user/companion-cube
🤯

1629916921
companion_cube!~simon@user/companion-cube
I guess flyweight is just SoA

1629917744
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: i take memory safety 600

1629917894
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, This feature of zig is present in safe optimization modes only, and enforces type safety via a secret piece of data

1629918107
nemith!~bbennett@coachz.brbe.net
andrewrk: i think that makse sense.  

1629918160
nemith!~bbennett@coachz.brbe.net
I am trying too hard to treat it like an interface in Go.

1629918166
ikskuh!~xq@2a0d:5940:6:163::ad7e
What is the hidden union field?

1629918197
andrewrk!~andrewrk@mail.ziglang.org
correct!

1629918228
andrewrk!~andrewrk@mail.ziglang.org
canonical answer was "untagged unions" :)

1629918318
ikskuh!~xq@2a0d:5940:6:163::ad7e
this would be a fun thing

1629918325
ikskuh!~xq@2a0d:5940:6:163::ad7e
and protty would absolutely rule "thread safety"

1629918388
cr1901!~William@2601:8d:8600:911:8d3d:b75:a70:95ca
>i take memory safety 600

1629918388
cr1901!~William@2601:8d:8600:911:8d3d:b75:a70:95ca
There used to be an IRC channel called #cjeopardy on Fleenode. Wonder if #zigjeopardy could be a thing :P

1629918516
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, haha yes he would

1629918791
companion_cube!~simon@user/companion-cube
can you take a reference to a union's member, before changing the tag? :)

1629919151
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1629919154
ikskuh!~xq@2a0d:5940:6:163::ad7e
will explode

1629919159
ikskuh!~xq@2a0d:5940:6:163::ad7e
(or not)

1629919515
andrewrk!~andrewrk@mail.ziglang.org
that's going to be a tricky one to get safety for, but I want to try

1629920061
ifreund!~ifreund@user/ifreund
yeah as long as there's no pointer cast involved that sounds tricky but doable

1629920079
ifreund!~ifreund@user/ifreund
(assuming arbitrary runtime overhead is acceptable)

1629920737
andrewrk!~andrewrk@mail.ziglang.org
I'm also ok with safety working better on 64-bit platforms than sub-64-bit platforms

1629920743
andrewrk!~andrewrk@mail.ziglang.org
e.g. taking advantage of the unused 16 bits in x86_64

1629920833
andrewrk!~andrewrk@mail.ziglang.org
ifreund, congrats on the tigerbeetle website launch

1629921526
ifreund!~ifreund@user/ifreund
andrewrk: thanks! It still feels a little surreal that this is my job now :)

1629921547
andrewrk!~andrewrk@mail.ziglang.org
:D

1629921556
ifreund!~ifreund@user/ifreund
though the past week or so I've been stuck studying for exams and haven't gotten to program much :/

1629921756
andrewrk!~andrewrk@mail.ziglang.org
ah I remember those days. yeah... all that... studying... that I definitely did

1629921783
andrewrk!~andrewrk@mail.ziglang.org
ACTION remembers playing a lot of TF2 instead of studying

1629921801
ifreund!~ifreund@user/ifreund
well, I haven't done nearly enough during the semester so now I need to catch up on all the stuff I skipped so I can pass the exam :D

1629921808
andrewrk!~andrewrk@mail.ziglang.org
haha godspeed

1629923647
ikskuh!~xq@2a0d:5940:6:163::ad7e
ifreund: your at coil?

1629923725
ikskuh!~xq@2a0d:5940:6:163::ad7e
and i have another (void related?) problem:

1629923737
ikskuh!~xq@2a0d:5940:6:163::ad7e
undefined symbol: fcntl64, did you mean: fcntl64@GLIBC_2.28?

1629926822
ikskuh!~xq@2a0d:5940:6:163::ad7e
"resolved" it by linking to musl

1629926826
ikskuh!~xq@2a0d:5940:6:163::ad7e
seems to be a known problem

