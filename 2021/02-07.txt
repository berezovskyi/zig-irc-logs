1612663648
andrewrk
ifreund, good night and thank you very much!

1612692581
ifreund
andrewrk: no problem! I'm looking at SliceOpen and Slice next :)

1612698396
ifreund
slices done, probably look at catch in hour or two

1612701438
Kiori
Hi all, has anyone used zig to compile C apps?

1612701506
ifreund
sure

1612701518
ifreund
just do CC="zig cc"

1612701566
Swahili
Learning; trying to figure out how to convert string to int and vice-versa; so found fmt and digitToChar; and tried> const chr = std.fmt.digitToChar(65, false); const result = [_]u8{ chr }; print("Result is {s}\n", .{result}); and get thread 441451 panic: reached unreachable code

1612701596
Swahili
what should I learn to figure this out?

1612701621
Kiori
I'm trying to figure out how to compile sdl with zig as a c comp. Does zig behave like llvm?

1612701653
ifreund
Swahili: for string to int, see std.fmt.parseInt()

1612701675
ifreund
for the other way, std.fmt.bufPrint() or std.fmt.allocPrint()

1612701726
ifreund
Kiori: indeed, zig relies on libclang to compile C code

1612701794
Swahili
ifreund: thanks for looking! yeh, I saw a github comment showing std.fmt.bufPrint(buf, "{}", .{int}); but I think I should really go through the basics to figure this things out myself, as my bg is as3, php, then javascript...did some swift in the past :~))

1612701844
Swahili
I had a quick look on comptime yesterday, but I haven't yet reached that point yet :)

1612701850
Kiori
@ifreund is there any special setup i should know about before trying to link any lib, or should it just work? thanks for the reply btw.

1612701887
ifreund
Kiori: the intention is that it is a drop-in replacement. Barring any bugs you shouldn't need to do anything special

1612701893
ifreund
just give it a try and see if it works

1612701922
Kiori
ok, i'm figuring it out atm. I'll come back if I hit any walls.

1612701929
Kiori
thanks again

1612702963
zags
I wonder if it would be possible a Zig optimizer to encode the length of a slice in the upper pointer bits when it can prove the slice doesn't escape.

1612702992
zags
And it can prove the length fits in the bits. Highly arch dependent of course.

1612702997
Gliptic
that would add masking to every operation

1612703006
Gliptic
not obviously an improvement

1612703019
zags
even intel cpu's are getting support for that

1612703035
zags
should help with cache pressure

1612703100
zags
Linear Address Masking Support

1612703111
zags
arm already has it

1612703389
Piraty
fails with: error: Unknown Clang option: '-target=i386-linux-musl'

1612703389
Piraty
i'm doing sth wrong: `make CC="zig cc -target=i386-linux-musl"  <...>`

1612703615
ifreund
zags: stuff like that is part of the reason slices don't have a well-defined memory layout :)

1612703816
ifreund
Piraty: it's --target

1612703823
Piraty
ouch

1612703850
ifreund
no worries, it just took me a solid 3 reads of the --help

1612703857
Piraty
i shuuld step away from the computer on this beautiful sunday

1612704124
ifreund
:)

1612704153
ifreund
note that with musl you even get to choose between static and dynamic linking when cross compiling now :)

1612704171
ifreund
before 0.7.1 zig could only do static

1612704487
v0idify
no way to compile Linux with zig no? :#

1612704509
v0idify
who wants to dynamic link anyway

1612704582
ifreund
I do so that my wayland compositor can build on musl systems, good luck staticaly linking mesa

1612704610
v0idify
oh :(

1612704703
v0idify
ifreund, did the talk get recorded anywhere? I haven't watched it. are you dogfooding river (using it yourself)?

1612704721
ifreund
I've been daily driving it for about 6 months

1612704749
ifreund
I think recordings of all the fosdem talks should become available soon

1612704779
v0idify
okay cool, thanks

1612705159
ifreund
andrewrk: done with catch/return, moving on to for loops

1612705450
zags
ifreund: good point :)

1612706119
Swahili
When> fmt.bufPrint(&buf, "{}", .{user_input}),  what is "{}"? Tried> const foobar: []const u8 = ""; fmt.bufPrint(&buf, foobar, .{user_input})

1612706221
ifreund
"{}" is a format string

1612706248
ifreund
e.g. fmt.bufPrint(&buf, "x is: {}, y is {}\n", .{x, y});

1612706283
ifreund
the output will be written into the buffer you pass and a slice of the written output returned

1612706294
ifreund
if you don't want to supply a buffer manually, use fmt.allocPrint()

1612706330
ifreund
and if you want to learn the rules for format strings, read the doc comment of std.fmt.format()

1612706381
Swahili
ifreund: thanks for looking! Ah ok, so I can look it up here

1612706386
Swahili
sorry, didn't know

1612706403
ifreund
no, that library is totally unrealted

1612706406
Swahili
I'll try allocPrint just after :)

1612706410
Swahili
oh its unrelated

1612706432
ifreund
the zig format docs are here:

1612706454
ifreund
note that's for master though, you might be using 0.7.1

1612706485
Swahili
latest 0.8.0 :) Thanks, I'll read

1612706663
Swahili
So, in the future, we'd find the documentation for fmt in the main web docs and figure this out without having to check the source code. Right?

1612706705
Swahili
I think yesterday it was mentioned that is a good practice to check the source code

1612706770
ifreund
Indeed, autogenerated std docs are not yet ready for usage

1612706790
ifreund
this is certainly something that will be done sometime before 1.0 though

1612706825
Swahili
It'll look great I'm sure :)

1612706970
Swahili
I had a look on (

1612707104
ifreund
indeed, that would be the idea

1612707225
Swahili
Amazing!

1612714537
v0idify
how can I debug Segmentation fault at address 0x0 / ???:?:?: 0x0 in ??? (???)

1612714588
mikdusan
what gave the fault, zig.exe or foo.exe?

1612714725
v0idify
? foo.exe

1612714730
v0idify
as in, the compiled binary

1612714733
mikdusan
yes

1612714754
mikdusan
so is that built as release or debug?

1612714758
v0idify
debug

1612714766
mikdusan
platform

1612714776
v0idify
it just seems like callMain was calling to 0x0 but that's not true :p

1612714784
v0idify
x86_64 linux glibc

1612714816
v0idify
i'm doing a bunch of C stuff

1612714834
mikdusan
did you try gdb?

1612714872
v0idify
what should i try with it?

1612714884
mikdusan
the executable that faulted

1612714910
mikdusan
just run it, let it fault. ask gdb for backtrace. it might show something the builtin segfault handler of zig runtime can't handle.

1612714939
v0idify
nope

1612714944
v0idify
I found the offending line, i'll investigate

1612714969
v0idify
backstrace be like 0x0000000000000000 in ?? ()

1612715017
v0idify
it's weird that it doesn't tell me what function is doing it

1612715075
mikdusan
where memory gets corrupted is key. if it happens to trounce something in the critical path for backtrace, then this suckage happens

1612715104
Gliptic
your C stuff isn't calling some function pointers that could be 0?

1612715133
v0idify
Gliptic, i don't think so. the call is just: xcb_connect(null, &num); (where num is a c_int)

1612715150
v0idify
the null isn't a function and it works fine in normal C

1612715246
ifreund
if you paste the code somewhere it might be easier to help

1612715263
v0idify
yeah one sec, sorry

1612715400
v0idify


1612715417
Kiori
Hi there, I'm trying to compile sdl with zig cc, it tries to find sdl2.lib files in the libs folder, but sdl only boundles sdl2.a files.

1612715417
Kiori
Anyone know anything about it, or how to deal with this kind of issue?

1612715417
Kiori
This seems to be a reported problem, as per here:

1612715522
ifreund
v0idify: pretty sure you should be initializing screen_number to 0

1612715539
ifreund
the comment on the xcb function says that it uses it

1612715565
v0idify
ifreund, still segfaults, and it works on C without it

1612715588
ifreund
v0idify: can I see the working C code?

1612715655
ifreund
your code doesn't segfault for me...

1612715667
v0idify
D:

1612715688
mikdusan
solved! :P

1612715703
Gliptic
just have to shit ifreund's computer

1612715705
v0idify
i just realized: the working c code segfaults with the zig compiler!

1612715707
Gliptic
eh, *ship

1612715711
ifreund
how are you building?

1612715716
ifreund
I used zig build-exe xcb.zig -lc -lxcb

1612715727
ifreund
v0idify: that could be UBSan kicking in

1612715738
mikdusan
does ubsan segfault or some other sig?

1612715738
ifreund
zig enables it by default when compiling C code

1612715742
v0idify
zig run $(pkg-config --libs --cflags xcb) <file>

1612715758
ifreund
UBsan should show ug as SIGILL iirc :/

1612715768
v0idify
well that's painfully obvious now

1612715771
v0idify
i'm lacking -lc

1612715774
ifreund
lol

1612715788
ifreund
I'm surprised that compiled though

1612715804
ifreund
guess the xcb header doesn't depend on any libc headers

1612715804
v0idify
kinda hate that the symptoms were so weird, would rather have had a compilation error

1612715819
v0idify
then why did it fail?

1612715848
v0idify
oh it uses libc but the headers are not included in their's

1612715858
v0idify
so blame xcb?

1612715879
v0idify
i gtg, thanks for the help and sorry for being dumb

1612715886
ifreund
no worries!

1612715973
mikdusan
what was the compiler logic here. id needs a -lc and didn't complain about it? I forget why...

1612715989
mikdusan
s/id/it/

1612716092
mikdusan
v0idify: is your xcb library(s) built with zig or already present on system?

1612716150
mikdusan
n/m. you use pkg-config. so comes from system.

1612719839
v0idify
what's the danger for reading from a variable on another thread if we don't care about partial writes?

1612719920
Gliptic
usually that's not the only thing you're doing

1612720041
v0idify
?

1612720128
v0idify
the zig async model confuses me a bit. :# i'm thinking in goroutines but that clearly doesn't translate well because there's no channel

1612720174
Gliptic
I mean, do you have two threads, one thread reading a value that the other thread writes to, is that all you have?

1612720226
v0idify
fair enough. scratch my message from before, i'm just thinking on how to design this

1612720283
Gliptic
the danger is that you can read a new or old value, and it might not match up chronologically with other reads or writes

1612720324
marler8997
made a good amount of progress on win32metadata binding gen, take a look at what it's generating so far:

1612720390
ifreund
hrm, continue in inline for is borked right?

1612720397
ifreund
is there a workaround?

1612720437
mikdusan
in stage1?

1612720468
ifreund
yeah in stage1

1612720503
mikdusan
yeah you don't really change that flow control. the loop is just unrolled that many times. place conditionals around your thing.

1612720504
ifreund
oh it's actually a continue for a non-inline while loop in the body of an inline for

1612720681
ifreund
uugh, can't even break to a block from the inline for

1612720758
ifreund
guess this loop will just be inefficient

1612720988
mikdusan
do you mean break to inline_for scope, or to parent of inline_for ? the former seems to work for me.

1612721043
ifreund
break from inside an inline for to a parent scode

1612721049
ifreund
s/scode/scope/

1612721114
mikdusan
doesn't sound like anything is borked tbh

1612721181
ifreund
the compiler crashes with a stacktrace in codegen for the break in question

1612721227
ifreund
mikdusan: this is the break:

1612721256
ifreund
it only crashes if there is more than one flag_def though and the inline for actually iterates

1612722268
mikdusan
have a reduction. you convinced me it's borked :P

1612722420
ifreund
:)

1612722526
mikdusan
also it only borks when `continue :outer` is inside the if{}. put it into inline_for scope and no crash

1612722547
ifreund
interesting

1612722951
mikdusan
I suppose a workaround is add runtime bool as first shortcutting expr of the unrolled if() . bleh.

1612723011
ifreund
mikdusan: this is what I did, probably not 100% optimal but it's not a hot path

1612723555
mikdusan
oh yeah you just did correct what I was trying to suggest. lol

1612723595
mikdusan
btw I also tried converting inline_for to inline_while and bug still persists

1612723661
ifreund
that usually only helps when the values of the container being iterated are runtime known but the length is comptime known

1612723716
mikdusan
sure just checking on the chance

1612723774
ifreund
fair enough, you never know with stage1 :D

1612723940
marijnfs
what happened to @TagType

1612723965
ifreund
marijnfs: std.meta.TagType() i'd guess

1612724066
marijnfs
thanks!

1612724356
mikdusan
marijnfs: nice. Is the meta info rich enough to apply a integer literal style? like FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768 looks much better in our existing windows bits.zig as 0x8000

1612724501
ifreund
I think you mean to tag marler8997 :P

1612724533
mikdusan
whupsee. marler8997 ^^ 2 lines above was meant for you.

1612724550
marler8997
@TagType?

1612724557
mikdusan
I mean hey I did the first 3 chars and tab-completed :|

1612724619
marler8997
oh the integer stuff

1612724652
marler8997
the metadata just contains the raw values, we'd have to apply our own rules/tricks to do that

1612724729
mikdusan
any way to heuristic that it's flags? flags usually want to be hexed

1612724781
marler8997
good question, not that I'm seeing in the metadata

1612724815
marler8997
we could go through all the values of an enum and if they are all powers of 2 them assume they are flags and print them in hex

1612724859
marler8997
ilspy prints them as hex, should find out what ilspy is doing

1612724867
mikdusan
ah ok. was hoping for something we could key off from meta. not very important but if you see a straightfwd way...

1612724903
marler8997
looks like ILspy might print all powers of 2 >= 16 as hex

1612724929
marler8997
right now I'm trying to deal with the UnicodeAlias part, I'm getting a dependency loop

1612724996
ifreund
hopefully it's not #131

1612725050
marler8997
nah

1612725077
marler8997
current solution is to check if the root modules defines UNICODE=true/false...then set the aliases accordingly

1612725094
marler8997
I shouldn't be getting a dependency loop from it

1612726577
ifreund
andrewrk: bounced of for/if statements for now, partially due to an issue I found with lastToken() on blocks. Poking at error set decls now

1612726585
ifreund
s/of/off/

1612728111
andrewrk
roger that

1612728124
andrewrk
I'm still on asm

1612728236
ifreund
cool, have fun :)

1612728613
andrewrk
I think we have enough implemented to run a small zig fmt benchmark and see how this pays off, if at all, for zig fmt

1612728633
andrewrk
noting however that the main speedup is intended for the main pipeline, not this one

1612728715
ifreund
I don't think it's ready for any real code yet tbh, but some artficially selected code sure :D

1612728740
ifreund
RE the issue with blocks, if the last statement ends in a semicolon lastToken() is off by one

1612728763
ifreund
I guess we need to add BlockTwoSemicolon and BlockSemiColon?

1612729174
andrewrk
yep guess so

1612729213
andrewrk
it's kind of annoying, but, in terms of what the hardware is doing I think it's pretty ideal

1612730699
v0idify
how does zig plan to address the chicken and the egg problem: what minimal compiler can we start off that's humanly auditable, or will it always depend on an initial C++ compiler? i'm thinking in the line of this:

1612730808
ifreund
v0idify:

1612730871
ifreund
that may realistically never happen though, the current plan is to depend only on C not C++ for the bootstrap compilier by 1.0

1612731222
v0idify
"the evil plan to replace C" I love it

1612731253
v0idify
but I agree, starting off from a C compiler is not that bad

1612731309
v0idify
is there a good explanation of the two stages? does stage 1 not depend on LLVM? I'm confused

1612731368
ikskuh
stage0: 100% c++

1612731376
ikskuh
stage1: part zig, part c++

1612731379
ikskuh
stage2: 100% zig

1612731385
ikskuh
stage3: stage2 compiled with stage2

1612731461
v0idify
that makes sense

1612731489
v0idify
stage0 uses LLVM right now but it's supposed to not do that in the future right?

1612731719
ifreund
stage2 has non-llvm backends in progress

1612731771
ikskuh
v0idify: the idea is that stage2 will output stage2 as C code

1612732067
v0idify
oh, so it also skips steps!

1612732471
pixelherodev
I'm also working on an alternate compiler in C99 that's completely self-contained ~~and wipes the rootfs if it detects that it is linked againsts LLVM~~

1612732510
pixelherodev
Not much to see there just yet, as I spent a month or so just focusing on design, but I'm hoping to pick up the pace this week :)

1612733084
zags
:)

1612733364
ifreund
andrewrk: error set decls and the slice/slice sentinel split are up, going to take a look at splitting out BlockSemicolon and BlockTwoSemicolon now

1612733394
v0idify
pixelherodev, awesome!

1612733884
motiejus
hi folks. I am trying to compile `Yelp/dumb-init` with `zig cc`, and am getting: `zig: error: argument unused during compilation: '-s' [-Werror,-Wunused-command-line-argument]`

1612733895
motiejus
if I remove `-s`, it works; but both clang and gcc happily accept that option

1612733908
motiejus
`0.8.0-dev.1039+bea791b63`

1612733945
motiejus
is it just missing a flag? If yes, I can go ahead and submit a patch; but perhaps I am misunderstanding something here

1612734003
andrewrk
ifreund, nice!

1612734073
andrewrk
motiejus, what does -s do? I don't see it documented here:

1612734098
motiejus
from gcc(1): `       -s  Remove all symbol table and relocation information from the executable.`

1612734120
andrewrk
oh snap there is a way to pass strip to the compiler

1612734161
motiejus
looks like it's undocumented in clang

1612734175
ifreund
does it actuall have an effest in clang or does clang just ignore it?

1612734175
motiejus
I wasn't able to find it there, but clang will accept it

1612734188
andrewrk
one sec

1612734285
v0idify
is there an introduction to std.atomic... things? what is an AtomicOrder?

1612734344
andrewrk
not well documented yet, but for now you can use this:

1612734721
andrewrk
motiejus, I just pushed

1612734764
motiejus
andrewrk: thanks, compiling

1612734806
andrewrk
it was documented, I just didn't see it at first

1612734891
v0idify
andrewrk, wow i understand nothing on that website

1612734925
v0idify
my question was more on the line of: "I have no clue what atomic I/O is"

1612734949
v0idify
I think I'll just use a Mutex for now though

1612734950
andrewrk
I have never heard of atomic I/O

1612734967
andrewrk
if this atomics docs don't make sense to you, then yes I suggest to stick to the higher level concurrency primitives

1612734970
v0idify
sorry I don't know what's the name for this.. thing

1612735023
motiejus
andrewrk: I compiled it and retried, same result:

1612735095
motiejus
(doing that)

1612735115
v0idify


1612735116
andrewrk
you don't need to because the cache notices the zig version

1612735136
motiejus
well, I thought so. But it still fails

1612735160
motiejus
just clone `

1612735261
g-w1
yep, im getting that too with the latest version

1612735453
g-w1
oh wait, zig cc is broken now :(. `zig cc test.c` results in a bunch unused argument -s for me where test.c is int main() {return 0;}

1612735621
mikdusan
sounds like -s should only be spec'd for link

1612735693
andrewrk
I see the problem

1612735784
andrewrk
ok fixed in latest commit, sorry about that

1612735807
andrewrk
motiejus, I tested dumb-init, it builds cleanly now

1612735811
andrewrk
thanks for the report

1612736317
ifreund
fixed Tree.lastToken() for blocks :)

1612736415
andrewrk
wonderful

1612736458
andrewrk
and I see Vexu did some work on introducing an intermediary AST for translate-c which is going to make that part of the task straightforward

1612736486
andrewrk
finally, astgen should be a piece of cake since we can call those same ast "full" functions

1612736562
ifreund
yeah, though someone called the namespace for those "Full" instead of "full"... basically unusuable :P

1612736593
ifreund
I think the API they provide is even nicer to use than what the old code had :)

1612736651
andrewrk
oh right, oops, I violated the style guide=

1612736693
zags
I have a function taking function ptr, argument is callback: anytype  - I then try to query it's RETURN type through @typeInfo(@TypeOf(callback)).Fn.return_type.?  ... unfortunately, I get `error: unable to unwrap null` Ideas?

1612736714
ifreund
We want to snake_case the token and node tag enums too right?

1612736738
ifreund
probably push off all the style bikeshed untill everything works right before merge

1612736825
zags
oh wait, I can introspect anytype can I?

1612736829
zags
can't"

1612736957
ifreund
zags: you can introspect the concrete type that actually gets passed to the function

1612736963
zags
So basically I need a way to pass any two-arg function to a generic function and introspect the return type, hmm

1612736968
zags
ifreund: how?

1612736992
ifreund
@TypeOf(arg_name)?

1612737001
zags
@typeInfo(@TypeOf(callback)).Fn.return_type.?

1612737004
zags
that's why I have

1612737025
zags
but... error: unable to unwrap null

1612737035
zags
s/why/what

1612737038
ifreund
does null mean void or something? not sure

1612737053
zags
i never pass functions returning void though

1612737056
ifreund
notice that you aren't getting an error saying it's not a function

1612737085
zags
yep

1612737861
andrewrk
ifreund, yeah I'll do a style pass right at the very very end before merging

1612737898
ifreund
cool :)

1612737906
ifreund
I'm looking at break now by the way

1612738024
andrewrk
got it

1612738227
andrewrk
we'll want to do a pass to look for TODO comments too I think

1612738250
ifreund
indeed, I've left a few myself

1612738287
ifreund
though I don't think the many still-commented test cases will pass without most or all of them being resolved

1612738314
andrewrk
got it

1612738875
andrewrk
man, we could have saved a lot of time by doing it this way from the beginning, heh

1612738892
andrewrk
but all in all this is only going to eat a couple weeks, peanuts in the lifetime of the project

1612738965
andrewrk
one of the nice things about zig is that we don't have a deadline for 1.0 and we also don't have a big debut. we can slowly start to stabilize more and more, and support more and more use cases. declaring 1.0 will feel like nothing is actually changing

1612739066
ifreund
I mean, 1.0 will be pretty exciting nonetheless :D

1612739122
ifreund
but yeah, we have the rare oppurtunity to iterate as much as we want and dodge those pesky local maxima

1612740075
zags


1612740087
zags
is that supposed to work?

1612740144
zags
@typeInfo(@TypeOf(func)).Fn.return_type.?

1612740159
zags
this one gets confused if `func` has anytype arguments, but a concrete return type

1612740438
ifreund
andrewrk: break done, which will be my last commit for today :)

1612741087
ifreund
zags: I think what happens there is that the type of functions with anytype parameters is not resovled fully until they are called

1612741097
andrewrk
ifreund, wonderful, thank you so much!

