1623380076
arwn!~arwn@2603-8081-4d00-f219-0000-0000-0000-1d8b.res6.spectrum.com
escape codes don't seem to work ("\e[1;1H\e[2J" for clearing the screen) does anyone know a way to clear the terminal, and write a single character to a specific location other than succumbing to curses.h?

1623380091
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
\e is not a thing in zig

1623380135
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also, its not really that helpful to hear "don't seem to work", its much better to get the actual error (in this case i think \e is not a valid escape code)

1623380169
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
use \x1b instead of \e

1623380186
arwn!~arwn@2603-8081-4d00-f219-0000-0000-0000-1d8b.res6.spectrum.com
sorry it's hard to bug report when I don't really know what I'm doing.

1623380196
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
reporting the error is enough :)

1623380215
arwn!~arwn@2603-8081-4d00-f219-0000-0000-0000-1d8b.res6.spectrum.com
yeah now i know lol, my bad

1623380242
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in this case i have seen this b4, but it will help you get an answer faster in the future :)

1623380266
arwn!~arwn@2603-8081-4d00-f219-0000-0000-0000-1d8b.res6.spectrum.com
where did you find out that 0x1b is \e? in ascii(7) i don't have any of the escapes shown and i'm not sure where else to look

1623380284
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
debug.zig has some things

1623380344
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but you can also just print out the value of \e in c for example

1623380401
arwn!~arwn@2603-8081-4d00-f219-0000-0000-0000-1d8b.res6.spectrum.com
oh duh. `printf "\d" | xxd` is the answer.

1623380427
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yea

1623381043
companion_cube!~simon@user/companion-cube
in `man ascii` I see that 0x1b is escape

1623381045
companion_cube!~simon@user/companion-cube
which makes sense

1623385451
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
.np

1623385454
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
damn wrong channel again

1623412055
Alekhine!~alekhine@193.138.218.213
does Zig rely on a C library like glibc or musl to compile?

1623412113
Alekhine!~alekhine@193.138.218.213
I'm asking because I'm curious about using cosmopolitan libc with Zig

1623412184
motiejus!~motiejus@88.223.105.24
do you want to use zig-the-language with cosmopolitan?

1623412277
motiejus!~motiejus@88.223.105.24
zig itself can use one of many C libraries -- wasm libc, musl, glibc, macos libc, so there is no "monoculture" in that regard

1623412479
Alekhine!~alekhine@193.138.218.213
Yes, I mean using the language. Sorry for the ping, im new to IRC

1623412535
motiejus!~motiejus@88.223.105.24
np. Good luck with cosmo if you go that route; I definitely thought about it myself (but in no capacity to work on it)

1623412565
Alekhine!~alekhine@193.138.218.213
Is there any documentation on switching the C library?

1623412635
Alekhine!~alekhine@193.138.218.213
Specifically for Zig, I mean. I strongly doubt it, but I figured I'd ask

1623412691
motiejus!~motiejus@88.223.105.24
Alekhine: to my understanding, there isn't a lot of documentation on the infra internals -- you will need to start with `build.zig`. But I am sure there are people in this channel who can help you if you have concrete roadblocks

1623412919
Alekhine!~alekhine@193.138.218.213
motiejus: Thanks for answering my question. I'll report back once I have more specific problems

1623416620
kiedtl!~kiedtl@kisslinux/kiedtl
how does one import a file outside of the source file's directory? i.e., @import("../third_party/foo/bar.zig")

1623416829
luuk!~luuk@user/luuk
Add it is a package

1623416906
luuk!~luuk@user/luuk
https://ziglearn.org/chapter-3/#packages

1623417423
kiedtl!~kiedtl@kisslinux/kiedtl
Thanks, that helps

1623418029
kiedtl!~kiedtl@kisslinux/kiedtl
Why does `zig build --help` decide to rebuild a modified build.zig before printing the help message? This is unintended behaviour, ...right?

1623418049
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, wait, it isn't because it needs to know what the build steps are...

1623418056
z_is_stimky!~quassel@109.70.144.142
yes

1623420245
kiedtl!~kiedtl@kisslinux/kiedtl
I'm adding a test step (b.addTest("src/test.zig")), with the test package being 'tests/tests.zig'. In src/test.zig, though, how do I run all the tests in tests/*? Or am I way off track here?

1623424378
luuk!~luuk@user/luuk
kiedtl, you'll need to reference all the other files that contain tests, i.e. doing: `_ = @import("other_file.zig");`

1623424987
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, I see. I was doing `usingnamespace @import("foo.zig")`

1623426725
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
is it possible to directly access the underlying binary representation of an int in zig?

1623426844
lemmi!~lemmi@user/lemmi
cren: what do you mean?

1623427107
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
lemmi: looks like I'm basically looking for something like DynamicBitSet

1623427170
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
the problem I'm trying to solve is reinterpreting a sequence of u4 as a sequence of u6

1623427184
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
which means some bits need to become part of different integers

1623427187
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
if that makes sense?

1623427217
lemmi!~lemmi@user/lemmi
you can bitcast arrays

1623427226
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
lemmi: bitcast?

1623427235
lemmi!~lemmi@user/lemmi
https://ziglang.org/documentation/0.8.0/#bitCast

1623427374
lemmi!~lemmi@user/lemmi
the other way is just to do it all by hand with bitshifts

1623427405
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I think I may have just worked out a way to avoid working with bits entirely

1623427410
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
but yeah I think @bitCast would work too

1623427728
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
separate question: is it OK to return a slice from a function if the slice points to an array which was declared inside that function? Will the array be freed when the function returns?

1623427973
dutchie!~dutchie@user/dutchie
if your array was defined in the function it'll be on the stack and therefore freed when the function returns

1623427979
lemmi!~lemmi@user/lemmi
cren: https://ziglang.org/documentation/master/#Where-are-the-bytes

1623427983
dutchie!~dutchie@user/dutchie
so you can't return a pointer to it (i.e. a slice)

1623428009
lemmi!~lemmi@user/lemmi
"var declarations inside functions are stored in the function's stack frame. Once a function returns, any Pointers to variables in the function's stack frame become invalid references, and dereferencing them becomes unchecked Undefined Behavior."

1623428335
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
so is the only way to get an array out of a function to return the array itself?

1623428376
lemmi!~lemmi@user/lemmi
you allocate it on the heap

1623428393
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
urrrgh allocation

1623428393
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
ok

1623428398
lemmi!~lemmi@user/lemmi
or you pass the array into the function

1623428405
lemmi!~lemmi@user/lemmi
(or slice rather)

1623428582
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
hmm yes but that would require that the length of the array to return be known beforehand

1623428636
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
maybe if I make the function generic...

1623431916
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
cren welcome to how computers work

1623431994
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
haze: about the length of the return array needing to be known beforehand?

1623432043
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
its more complex than that but

1623432045
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
something like that

1623439098
zr!~kiedtl@kisslinux/kiedtl
Is there an std function analogous to mem.copy that's guaranteed to add the sentinel in the appropriate location when copying from a non-sentineled slice to a sentineled array?

1623439182
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it seems quite easy to write your own. but maybe there is enough of a use case for one in std.mem?

1623439204
zr!~kiedtl@kisslinux/kiedtl
I should say so

1623439208
zr!~kiedtl@kisslinux/kiedtl
essentially strlcpy

1623439233
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, you can make a pr then

1623439263
zr!~kiedtl@kisslinux/kiedtl
Yup, lemme write it first and add some unit tests

1623439272
zr!~kiedtl@kisslinux/kiedtl
Oh wait, I don't need to make a proposal? Just go for the PR stage?

1623439323
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
imo this does not need a proposal

1623439365
zr!~kiedtl@kisslinux/kiedtl
I see, thanks

1623439390
zr!~kiedtl@kisslinux/kiedtl
darnit, there's no type inferring in the stdlib... so I'll be checking in a copyZ highly inferior to mine

1623439403
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
?

1623439403
zr!~kiedtl@kisslinux/kiedtl
Does that seem like an appropriate name -- 'copyZ'?

1623439407
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i would use @typeInfo

1623439454
zr!~kiedtl@kisslinux/kiedtl
g-w1: i'd like to write a 'fn copyZ(dest: anytype, src: []const std.meta.Elem(@TypeOf(dest))) ...' but that wouldn't be consistent with the other functions

1623439468
zr!~kiedtl@kisslinux/kiedtl
i.e., without the 'comptime T: type' parameter

1623439480
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
something like fn copyZ(comptime T: type, comptime s: T, arr: [:s]T) {

1623439489
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
communicates intent precisely

1623439491
zr!~kiedtl@kisslinux/kiedtl
err, yeah, forgot the sentinels

1623439535
zr!~kiedtl@kisslinux/kiedtl
My point is, I'd be able to omit the type if I went the the type inferring, so 'copy(dest, src[0..])' instead of 'copy(u8, dest, src[0..])'

1623439562
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, that works, marler8997 made an issue of when that should be used or anytype

1623439577
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i would use the comptime T: type pattern here to be consistent

1623439586
zr!~kiedtl@kisslinux/kiedtl
Also, do we need to require the 'source' parameter to have a sentinel? I'd like to be able to just use plain slices as the source ...

1623439618
zr!~kiedtl@kisslinux/kiedtl
Sigh... but then I'd have to manually to 'src[0..len]' when passing a sentineled slice

1623439627
zr!~kiedtl@kisslinux/kiedtl
both will be sentineled, then

1623439665
zr!~kiedtl@kisslinux/kiedtl
but then that misses the whole point of me writing my own copy function -- to automatically infer whether either arguments are sentineled or not, and do the appropriate thing in either case

1623439685
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
then it might not be needed in std.mem imo

1623439701
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or you can open a proposal to see if people have opinions on this

1623439738
zr!~kiedtl@kisslinux/kiedtl
That's an idea... I might open a proposal for modify mem.copy's behaviour to do just that

1623439745
zr!~kiedtl@kisslinux/kiedtl
it'll make that function far less readable, though

1623439833
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
have you looked into std.mem.Span zr

1623439842
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i glanced at it quickly but its sentinel related

1623439843
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
?

1623439871
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it converts a [*]T -> []T iirc

1623439878
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so you can convert from c pointers to zig slices

1623439885
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ah

1623439920
zr!~kiedtl@kisslinux/kiedtl
ah, makes sense. was just looking at it but couldn't figure out what it was for.

1623440226
zr!~kiedtl@kisslinux/kiedtl
Does for() respect sentinels, or does it just scan the whole array?

1623440259
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nothing a little experimenting cant answer

1623440972
zr!~kiedtl@kisslinux/kiedtl
Sigh. testing.expectEqualSlices counts the entire slice size as the length when the slice is sentineled, resulting in a 'slice of unequal lengths' error... Even when the contents match.

1623441005
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
fix it!

1623441009
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
should be easy right?

1623441019
zr!~kiedtl@kisslinux/kiedtl
Or... wait, I'm wrong... the slice content's *weren't* equal >:V

1623441026
zr!~kiedtl@kisslinux/kiedtl
Damn these unprintable characters

1623443890
zr!~kiedtl@kisslinux/kiedtl
Hm, apparently for() doesn't respect sentinels.

1623443931
ikskuh!~xq@2a0d:5940:6:163::ad7e
zr: no, why should it? the sentinel is not part of the slice

1623443941
ikskuh!~xq@2a0d:5940:6:163::ad7e
it's only a guarantee that the sentinel is there

1623443965
oats!~thomas@user/oats
eh, that seems like it would be reasonable behavior to expect from for()

1623443969
oats!~thomas@user/oats
I could see it

1623443978
zr!~kiedtl@kisslinux/kiedtl
^^

1623443991
zr!~kiedtl@kisslinux/kiedtl
It's what you'd expect... given what sentinels *are*, a marking of where the slice ends

1623444034
ikskuh!~xq@2a0d:5940:6:163::ad7e
zr: that's not quite right

1623444036
dch!sid1310@couchdb/committer/dch
reading https://github.com/ziglang/zig/issues/853 ...

1623444043
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can have a slice with 3 NULs which is sentineled by NUL

1623444047
dch!sid1310@couchdb/committer/dch
looks like I can skip libxml2 as a dependency with LLVM_LIBXML2_ENABLED=OFF

1623444061
dch!sid1310@couchdb/committer/dch
does that presumably *only* disable windows cross-compilation?

1623444160
zr!~kiedtl@kisslinux/kiedtl
ikskuh: I mean... you *can*, but is that what it's used as in practice?

1623444177
ikskuh!~xq@2a0d:5940:6:163::ad7e
zr: it depends if you look at it from a C point of view

1623444180
ikskuh!~xq@2a0d:5940:6:163::ad7e
or a zig point of view

1623444185
zr!~kiedtl@kisslinux/kiedtl
Yes, I am very much C-brainwashed

1623444201
zr!~kiedtl@kisslinux/kiedtl
So I don't quite understand the Zig point of view

1623444205
ikskuh!~xq@2a0d:5940:6:163::ad7e
a sentinel is only a guarantee that after your slice a sentinel is located

1623444215
ikskuh!~xq@2a0d:5940:6:163::ad7e
but the slice itself is not changed

1623444226
ikskuh!~xq@2a0d:5940:6:163::ad7e
so

1623444248
ikskuh!~xq@2a0d:5940:6:163::ad7e
"slice: [:0]u8" is a guarantee that "slice[slice.len] == 0"

1623444251
ikskuh!~xq@2a0d:5940:6:163::ad7e
that's all

1623444262
ikskuh!~xq@2a0d:5940:6:163::ad7e
it has no implications on the content of that slice

1623444264
andrewrk!~andrewrk@mail.ziglang.org
even with C strings the length does not contain the sentinel

1623444270
zr!~kiedtl@kisslinux/kiedtl
So... a sentinel in Zig is a guarantee that the slices' data is terminated with a specific value, but not necessarily that the sentinel is a "marking" the end

1623444270
andrewrk!~andrewrk@mail.ziglang.org
strlen("foo") returns 3

1623444278
ikskuh!~xq@2a0d:5940:6:163::ad7e
exactly

1623444283
zr!~kiedtl@kisslinux/kiedtl
Yes, I agree with that, andrewrk 

1623444298
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you want to iterate over the "c string", use std.mem.sliceTo(slice, 0)

1623444357
zr!~kiedtl@kisslinux/kiedtl
Either I'm misunderstanding you, or I'm explaning myself badly, or we're both saying the same thing

1623444364
zr!~kiedtl@kisslinux/kiedtl
:v

1623444386
ikskuh!~xq@2a0d:5940:6:163::ad7e
maybe, language barrier is a thing

1623444434
ikskuh!~xq@2a0d:5940:6:163::ad7e
zr: zig doesn't have a concept of implicit termination of slice contents

1623444446
ikskuh!~xq@2a0d:5940:6:163::ad7e
slices (also sentinelled) are defined by ptr+len and not by ptr+sentinel

1623444465
zr!~kiedtl@kisslinux/kiedtl
I see. I've been misunderstanding sentinels all along >_>

1623444489
zr!~kiedtl@kisslinux/kiedtl
I've been thinking more in terms of 'ptr+len' == capacity, 'ptr+sentinel' == len

1623444512
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1623444519
ikskuh!~xq@2a0d:5940:6:163::ad7e
this would imply that 

1623444525
ikskuh!~xq@2a0d:5940:6:163::ad7e
var src: [:0]const u8 = "foo";

1623444530
ikskuh!~xq@2a0d:5940:6:163::ad7e
var dst: []const u8 = src;

1623444537
ikskuh!~xq@2a0d:5940:6:163::ad7e
would scan "foo" for a NUL terminator

1623444540
ikskuh!~xq@2a0d:5940:6:163::ad7e
which would be hidden control flow

1623444555
zr!~kiedtl@kisslinux/kiedtl
Ehh, not necessarily. I personally wouldn't expect that.

1623444557
zr!~kiedtl@kisslinux/kiedtl
¯\_(ツ)_/¯

1623444560
zr!~kiedtl@kisslinux/kiedtl
Anyways, I think I've finished my utterly atrocious copyZ code: http://0x0.st/-LSs.zig

1623444623
ikskuh!~xq@2a0d:5940:6:163::ad7e
zr: introduce "src[1] = 0" inbetween

1623444674
zr!~kiedtl@kisslinux/kiedtl
..before the while() in copyZ()?

1623444685
zr!~kiedtl@kisslinux/kiedtl
err no that doesn't make sense

1623444713
ikskuh!~xq@2a0d:5940:6:163::ad7e
_used is std.mem.sliceTo(0) :D

1623444773
zr!~kiedtl@kisslinux/kiedtl
wow, there are a lot of goodies in 0.8.0 :C

1623444777
zr!~kiedtl@kisslinux/kiedtl
I'm stuck in 0.7.1 for now

1623444805
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/download/0.8.0/release-notes.html

1623444835
ikskuh!~xq@2a0d:5940:6:163::ad7e
zr: why that?

1623444965
zr!~kiedtl@kisslinux/kiedtl
ikskuh: I'm on a pubnix that hasn't updated yet :)

1623445007
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1623445013
ikskuh!~xq@2a0d:5940:6:163::ad7e
just fetch the tarball then?

1623445030
ikskuh!~xq@2a0d:5940:6:163::ad7e
curl https://ziglang.org/..../bla.tar.gz | tar -Jx

1623445031
ikskuh!~xq@2a0d:5940:6:163::ad7e
:D

1623445055
ikskuh!~xq@2a0d:5940:6:163::ad7e
you don't have to wait for the maintainer to install a patch

1623445061
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can just update yourself :)

1623445131
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: initialization order of fields in zig is well-defined, right?

1623445132
ikskuh!~xq@2a0d:5940:6:163::ad7e
so

1623445143
ikskuh!~xq@2a0d:5940:6:163::ad7e
struct { x: u32, y: u32 } { .y = fetch(), .x = fetch() }

1623445150
ikskuh!~xq@2a0d:5940:6:163::ad7e
will first call fetch() for y, then fetch() for x?

1623445160
andrewrk!~andrewrk@mail.ziglang.org
correct. side effects happen in the order they appear in the source code

1623445173
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
phew, thats a nice rule

1623445180
andrewrk!~andrewrk@mail.ziglang.org
zig is allowed to move memory loads around if there are no side effects

1623445206
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: finally some fucking good ~food~ semantics

1623445214
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
should astgen not allow asm() inside a known comptime block, or should it just let sema do its thing?

1623445218
ikskuh!~xq@2a0d:5940:6:163::ad7e
this makes my code exceptionally shorter

1623445238
andrewrk!~andrewrk@mail.ziglang.org
g-w1, https://ziglang.org/documentation/master/#Global-Assembly

1623445248
companion_cube!~simon@user/companion-cube
tbh I'd still put side effectful stuff first, just for clarity

1623445252
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks andrewrk 

1623445274
zr!~kiedtl@kisslinux/kiedtl
ikskuh: I'd thought of that, but my homedir is big enough already :^)

1623445280
ikskuh!~xq@2a0d:5940:6:163::ad7e
heh

1623445288
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
can you do comptime assembly inside a function?

1623445308
ikskuh!~xq@2a0d:5940:6:163::ad7e
o shit. i have 17GB of zig installations :D

1623445316
zr!~kiedtl@kisslinux/kiedtl
o.O

1623445321
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
zigup clean ftw

1623445338
ikskuh!~xq@2a0d:5940:6:163::ad7e
including some 0.5s :D

1623445367
ikskuh!~xq@2a0d:5940:6:163::ad7e
rm -rf zig-linux-x86_64-0.{6..8}.0*

1623445457
andrewrk!~andrewrk@mail.ziglang.org
thanks to vexu's help lately we're down to 2 pages of PRs 

1623445467
ikskuh!~xq@2a0d:5940:6:163::ad7e
\o/

1623445474
ikskuh!~xq@2a0d:5940:6:163::ad7e
and build.zig is broken (thanks to me) *rofl*

1623445483
andrewrk!~andrewrk@mail.ziglang.org
oh is there something broken in master?

1623445486
ikskuh!~xq@2a0d:5940:6:163::ad7e
nah

1623445488
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ooh, i should check that out for my projs

1623445490
ikskuh!~xq@2a0d:5940:6:163::ad7e
just every other build.zig file :D

1623445494
ikskuh!~xq@2a0d:5940:6:163::ad7e
that uses packages

1623445543
ikskuh!~xq@2a0d:5940:6:163::ad7e
tomorrow a lot of people will receive a funny github message :D

1623445549
ikskuh!~xq@2a0d:5940:6:163::ad7e
from their CI

1623445709
dch!sid1310@couchdb/committer/dch
what's the purpose of libxml2 dependency? is it *only* windows support, and can I avoid it entirely somehow?

1623445737
dch!sid1310@couchdb/committer/dch
it's getting in the way of static freebsd ports tree builds

1623446054
andrewrk!~andrewrk@mail.ziglang.org
dch, idk what llvm wants it for, I think it's not important. I recommend disabling it if you can

1623446072
andrewrk!~andrewrk@mail.ziglang.org
zig-bootstrap disables it

1623446125
dch!sid1310@couchdb/committer/dch
andrewrk: I am trying the chainsaw approach, but can't seem to get rid of it. libxml2 itself is not the issue, but some missing compression related bits lzma_auto_decoder and similar.

1623446135
dch!sid1310@couchdb/committer/dch
I have zero clues what thats for

1623446164
dch!sid1310@couchdb/committer/dch
and I really dont want to build a custom llvm in ports tree just for zig because libxml2

1623446190
andrewrk!~andrewrk@mail.ziglang.org
that sounds like zlib

1623446268
andrewrk!~andrewrk@mail.ziglang.org
if you share the full error message I may be able to help better

1623446307
dch!sid1310@couchdb/committer/dch
andrewrk: look at the last ~5 lines https://freeside.skunkwerks.at/~dch/tmp/zig/zig-0.8.0.log 

1623446347
andrewrk!~andrewrk@mail.ziglang.org
dch, is this OOM?

1623446354
dch!sid1310@couchdb/committer/dch
unlikely

1623446364
dch!sid1310@couchdb/committer/dch
nope

1623446366
andrewrk!~andrewrk@mail.ziglang.org
I don't see an error message

1623446405
andrewrk!~andrewrk@mail.ziglang.org
did zig0 really just exit failure with no stderr?

1623446407
dch!sid1310@couchdb/committer/dch
ok so the original error is this one

1623446566
dch!sid1310@couchdb/committer/dch
andrewrk: https://freeside.skunkwerks.at/~dch/tmp/zig/before.log sorry it took a moment to find it

1623446657
dch!sid1310@couchdb/committer/dch
aahh the prior one is after me hacking out LIBXML2 incorrectly from CMakeLists.txt

1623446796
dch!sid1310@couchdb/committer/dch
I'm just removing the entire `target_link_libraries(zigstage1 LINK_PUBLIC ${LIBXML2})` block now. 

1623446963
dch!sid1310@couchdb/committer/dch
and still `-lxml2` stubbornly sneaks in

1623447154
dch!sid1310@couchdb/committer/dch
https://freeside.skunkwerks.at/~dch/tmp/zig/curse_you_libxml2.log 

1623447174
dch!sid1310@couchdb/committer/dch
I'll take a fresh look over the weekend after some zzz 

1623447429
andrewrk!~andrewrk@mail.ziglang.org
dch, you're trying to make a freebsd package? I think your llvm package might be wrong

1623447452
andrewrk!~andrewrk@mail.ziglang.org
try executing `llvm-config --system-libs`

1623447453
dch!sid1310@couchdb/committer/dch
andrewrk: yes. specifically, use the ports llvm12 provided compiler

1623447466
andrewrk!~andrewrk@mail.ziglang.org
does it report -lxml?

1623447488
dch!sid1310@couchdb/committer/dch
`llvm-config12 --system-libs` returns blank

1623447535
andrewrk!~andrewrk@mail.ziglang.org
these missing symbols are zlib, not libxml

1623447558
andrewrk!~andrewrk@mail.ziglang.org
hm I see -lz on the linker line though

1623447663
andrewrk!~andrewrk@mail.ziglang.org
dch, what cmake options are you passing to zig?

1623447768
dch!sid1310@couchdb/committer/dch
andrewrk: just -DCMAKE_BUILD_TYPE=Release -DZIG_STATIC=ON -DCMAKE_SKIP_INSTALL

1623447778
andrewrk!~andrewrk@mail.ziglang.org
why are you passing -DZIG_STATIC=ON ?

1623447784
andrewrk!~andrewrk@mail.ziglang.org
aren't you trying to make a system package for zig?

1623447792
dch!sid1310@couchdb/committer/dch
yes

1623447820
dch!sid1310@couchdb/committer/dch
I'm using that (IIRC) to avoid having it depend on all of llvm

1623447839
andrewrk!~andrewrk@mail.ziglang.org
I don't think that's the correct way to make packages

1623447843
dch!sid1310@couchdb/committer/dch
let me check what I was doing in the -devel port, which was much closer to 0.8.0 (from late march)

1623447866
andrewrk!~andrewrk@mail.ziglang.org
if you don't care about integrating with the system, just use the bootstrap tarball

1623447904
dch!sid1310@couchdb/committer/dch
andrewrk: I'm not clear what you mean by "making a system package" and "integrating ..." ?

1623447980
andrewrk!~andrewrk@mail.ziglang.org
I just tried running `cmake ..` with no options and no patches on a freebsd system, and it built successfully against system llvm 12 package, no problems

1623447988
andrewrk!~andrewrk@mail.ziglang.org
always try the defaults first

1623449619
dch!sid1310@couchdb/committer/dch
andrewrk: it looks like the last time I built zig with -DZIG_STATIC=on successfully on FreeBSD was #f1e324216  26 March

1623449635
dch!sid1310@couchdb/committer/dch
you are right that the default build works without that

1623449838
dch!sid1310@couchdb/committer/dch
so the intent of using ZIG_STATIC was to have the zig compiler be installable without downloading ~800MiB of FreeBSD's devel/llvm12 port

1623449874
andrewrk!~andrewrk@mail.ziglang.org
why not just download the 37 MiB tarball from https://ziglang.org/download/ then?

1623449905
andrewrk!~andrewrk@mail.ziglang.org
if you're going to make a system package you gotta do it the way the system expects you to, which is to depend on the llvm12 package

1623450177
dch!sid1310@couchdb/committer/dch
andrewrk: I'm maintaining the lang/zig port, not just running zig locally. this is on more arches than the /download page has (atm just aarch64 in addition), so we need to build those from source.

1623450241
dch!sid1310@couchdb/committer/dch
and prior to end march it was possible to build a static zig, that doesn't have dependencies on llvm at runtime, which makes installing zig from ports on freebsd a nice ~40Mb download and not a 40+800Mb LLVM gorilla download

1623450296
dch!sid1310@couchdb/committer/dch
If it's not the right way to do things, I'm fine with learning something here and leaving it as a runtime dependency but that makes me a tiny bit sad.

1623450329
andrewrk!~andrewrk@mail.ziglang.org
don't get me wrong, I'm generally in favor of static linking llvm into zig, and I think that makes for a better experience

1623450338
dch!sid1310@couchdb/committer/dch
exactly

1623450357
dch!sid1310@couchdb/committer/dch
especially over crappy networks like ours here

1623450363
andrewrk!~andrewrk@mail.ziglang.org
I suggest you make your zig package based on the bootstrap tarball and ignore the system llvm dependency entirely

1623450392
andrewrk!~andrewrk@mail.ziglang.org
I'll make you an 0.8.x branch which fixes a potential problem you would run into

1623450412
dch!sid1310@couchdb/committer/dch
so this one specifically? https://ziglang.org/download/0.8.0/zig-bootstrap-0.8.0.tar.xz

1623450417
andrewrk!~andrewrk@mail.ziglang.org
yes

1623450450
dch!sid1310@couchdb/committer/dch
andrewrk: its after midnight here and I'm foggy, I can pull that tarball and drop a patch from git branch on top easily enough, but not tonight

1623450465
dch!sid1310@couchdb/committer/dch
and thanks, that's very kind of you

1623450487
andrewrk!~andrewrk@mail.ziglang.org
dch, I expect you will run into https://github.com/ziglang/zig/issues/8960 which is fixed in the 0.8.x branch of zig, so I suggest to wait and let me provide a 0.8.x branch of zig-bootstrap

1623450499
andrewrk!~andrewrk@mail.ziglang.org
good night!

1623450573
dch!sid1310@couchdb/committer/dch
cool, I will push a dynamic zig this weekend to ports (so people can at least GO FAST), and then I can hack on the bootstrap approach once you have time for it. tyvm!

1623450583
andrewrk!~andrewrk@mail.ziglang.org
cheers

1623450627
dch!sid1310@couchdb/committer/dch
I'll put an issue up tomorrow to track it

1623451399
andrewrk!~andrewrk@mail.ziglang.org
dch, no need; I've already done it :)

1623454360
marler8997!~marler899@204.229.3.4
so I've got this weird issue because of git's autocrlf setting. My zigwin32gen project doesn't generate code correctly if they have that enabled because it uses some multiline strings

1623454385
marler8997!~marler899@204.229.3.4
so git's autocrlf messes up multiline strings because it adds a carriage return to all the newlines

1623454421
marler8997!~marler899@204.229.3.4
I could sanitize all my multiline strings, but I wanted to see if Zig had a plan for this or if someone had a solution?

