1614043031
andrewrk
17 failing zig fmt test cases left

1614055293
g-w1
andrewrk: for #786, I think a builtin @setGlobalErrorSize would be better than a pub const - how would the logic in main.zig work?

1614055394
andrewrk
g-w1, I don't understand your question

1614055398
g-w1
also is this a language feature, or impl feature? if its a builtin I assume the spec will define it, if not idk. I think the default of u32 will be in the spec

1614055426
g-w1
sorry, s/main.zig/start.zig

1614055456
g-w1
or will it just be magic that if it sees ErrorIntegerType it does fancy stuff?

1614055475
g-w1
looking to see how panic works, thuoght it was in start.zig

1614055546
g-w1
its not in debug.zig either?

1614055596
g-w1
ah in builtin.zig, so its still in userspace. would this be passed to the compiler somehow?

1614055722
g-w1
oh not entirely in userspace since the compiler sees it -- so it could be done

1614055874
g-w1
I will make a pr making the default u32 and cleaning some error stuff up, but we need to get a little farther for that to work fully in stage2

1614056416
daurnimator
g-w1: something I've been thinking about for a while is a way to actually set error integers for performance reasons

1614056461
daurnimator
e.g. it would be beneficial if error.PermissionDenied was 1; so that its "free" to convert errno to a zig error number

1614056516
g-w1
like per function?

1614056588
daurnimator
g-w1: no globally

1614056603
daurnimator
okay I have a proposal to add to #786

1614057009
noam
daurnimator: the issue is that errnos don't map 1:1 to errors

1614057019
noam
A single errno value can actually indicate multiple errors

1614057061
daurnimator
noam: yes... but at least those are usually exceptions/in the minority

1614057169
noam
That doesn't seem good enough to me.

1614057223
noam
If errnoâ†’error conversion is context-dependent, we shouldn't say "99% coverage is good enough"

1614057443
daurnimator
noam: I'm approaching this purely from a performance and binary size side of things

1614057534
g-w1
so this would make @errorToInt of one of those special values just return the value?

1614057541
g-w1
but other errors would also work?

1614057583
daurnimator
g-w1: huh?

1614057591
daurnimator
g-w1: see what I added to #786

1614057642
g-w1
like @errorToInt(error.PermissionDenied) == std.os.EPERM?

1614057679
daurnimator
g-w1: yes that would be true (if you specified that mapping)

1614057700
daurnimator
I believe that @errorToInt isn't comptime known.

1614057712
g-w1
but if a mapping was in the _ part of the enum, the compiler will choose how it is?

1614057722
daurnimator
g-w1: yep

1614057762
g-w1
it is comptime known

1614057808
g-w1
but i dont see how that is a problem

1614057882
daurnimator
I was thinking to avoid cycles; but I guess we can detect those in other ways

1614057928
daurnimator
e.g. would need to detect cycle of: `pub const ErrorSet = enum(u16) { Foo = @errorToInt(error.Foo), _}`

1614057962
daurnimator
or maybe its not a cycle and just latitude to invent a number? all values satisfy that relation :P

1614057998
g-w1
that would also simplify the proposal because then you can do enum(u32) { _ } to declare the size

1614058010
daurnimator
g-w1: yes that was my intention

1614058018
g-w1
ok cool

1614058100
g-w1
oh didn't see the first example :)

1614058384
watzon
Hmm. Just tried to install Zig from Homebrew on macOS Big Sur and I get `Unable to find library for -lSystem`. Anyone know of a fix for this?

1614058394
watzon
Same happened when using Zig installed from ASDF

1614058477
watzon
`ZIG_SYSTEM_LINKER_HACK=1` seems to make no difference either

1614058759
mikdusan
watzon: likely the version of Zig on homebrew isn't new enough

1614058883
mikdusan
if I read homebrew correct, 0.7.1 zig is our latest release, but for Big Sur we have some things in master that are required. So either get on master, or wait for next rel cycle

1614058883
watzon
Seems like it's an issue with 0.7.1

1614058895
watzon
I guess I'll get on master

1614059047
mikdusan
interesting. homebrew also uses llvm-11.1.0 as dep for zig 0.7.1. me shrugs.

1614059180
watzon
Well master seems to work at least

1614059210
watzon
Damn macOS just had to go changing things in Big Sur. I've had so many issues.

1614061226
siraben
watzon: oof, you upgraded?

1614061251
siraben
These days I hold off upgrading until about a year after

1614062008
andrewrk
ifreund, when you get a chance, I have an open question for you re: zig fmt test cases that I would value your opinion on what the expected result should be (see latest comment in the thread)

1614062251
andrewrk
anyway, I'm done for the day. we're down to 11 failing test cases in the branch

1614062302
watzon
Yeah. I tend to always upgrade right away. Bites me in the ass sometimes

1614063731
watzon
Is there a good way to add extra information to an error type? For instance, in Rust errors are enums which are abstract data types which can include extra metadata.

1614067741
andrewrk
watzon, not other than the manual way

1614077764
karchnu
hugo is nice, it reminds me of Zola

1614078222
ifreund
isn't zola the RIIR version of hugo?

1614078526
dutchie
i'm sure hugo was one of the first SSGs

1614078589
karchnu
ifreund: possible, I really didn't search much for a SSG, I kinda took one of the first that came in my way

1614089709
g-w1
for #786, what should the max error set size be? I can see anyone using > u64

1614089712
g-w1
s/can/cant

1614090110
ikskuh
heh, i can't anyone see using more than u32

1614090181
ikskuh
getting to error set size to u32 requires already ~30 gigs of ascii source text

1614090198
ikskuh
a sorry. i forgot. 34 gigs. we require commas to declare them :D

1614090243
g-w1
ok, if it is u32, then i think the compiler can just use that as the max and not have to do any fancy data structures

1614090247
g-w1
with a string hash map

1614090258
ikskuh
i think it should still be as small as possible

1614090266
ikskuh
AVRs would hugely benefit from u8

1614090301
viashimo
what's an AVR?

1614090305
g-w1
ofc, but in the compiler impl, I dont think we need to go out of our way to make the memory usage as small as possible with these error sets. like a []const u8 -> u32 mapping would be enough

1614090321
ikskuh
AVR is 8 bit cpu, we have a backend for that already

1614090327
ikskuh
ah yeah

1614090337
yeti
nice ctitters

1614090346
ikskuh
btw, for the log on how to get those numbers: (ceil(log(2*26+10;1<<32)) + 1) << 32

1614090398
ikskuh
"how many letters and numbers do we need to encode 2^32 different options", (this value + 1) times 2^32 because we also encode each of those and separate them with a comma :D

1614091384
g-w1
also what was the reasoning for defaulting to u32? I think u16 is a good default since most programs will never hit u16 let alone u32

1614094892
tnorth
Hey there. Could someone tell me why I get "error: use of undefined value here causes undefined behavior" (line 9) in this minimal program?

1614095036
ifreund
tnorth: I think you want init() to return @This() not type

1614095070
ifreund
well, would need to be an error union since you use `try` in the function

1614095108
tnorth
ifreund: thanks. I'm a bit confused about "type"

1614095126
tnorth
+ the allocator doesn't return the right type....

1614095155
g-w1
type means that it returns a type like u32, struct {}, enum {}, not a value like an instance of a struct

1614095177
ifreund
tnorth: you probably want ?[]@This() not ?*[]@This()

1614095181
tnorth
g-w1: understood, thanks!

1614095185
ifreund
(for the children field)

1614095264
tnorth
ifreund: thanks. I still get "error: expected type 'Cell(2)', found 'std.mem.Allocator.Error'"

1614095272
g-w1
use try

1614095308
ifreund
tnorth: the return type of your function needs to be an error union because you are using try

1614095329
tnorth
fn init() ?@This() doesnt' seem to work

1614095334
ifreund
e.g. !@This(), or error{OutOfMemor}!@This()

1614095342
ifreund
? is for optionals not error unions

1614095343
g-w1
fn init() !?@This()

1614095344
tnorth
oh... !

1614095354
tnorth
my bad...

1614095392
tnorth
ok thanks a lot.

1614095588
tnorth
btw, what would be the difference between using [*]T or []T in this case?

1614095669
g-w1
the latter stores the length the former does not

1614095669
ifreund
[]T is like a struct { ptr: [*]T, len: usize }

1614095755
tnorth
make sense, thanks

1614095978
tnorth
And last question, when assigning explicitely values to a slice, is it possible to omit the type? foo = [_]{1,2,3} doesn't work, but foo = [_]u8{1,2,3} does. If the type of foo is already known, this should be possible?

1614096001
g-w1
foo = .{1,2,3};

1614096018
g-w1
but if its a slice you probably want foo = &.{1,2,3};

1614096086
tnorth
g-w1: thanks again!

1614097864
v0idify
how do i tell build-exe to save the output somewhere specific?

1614097903
v0idify
or is there a way to make zig run return an error if the underlying program fails?

1614097905
ifreund
-femit-bin=foo gives you full agency

1614098785
v0idify
why when doing zig build-exe src/file.zig it writes zig-cache in src/?

1614098883
g-w1
yes, if your cwd is src it does.

1614098890
g-w1
there is no concept of a project root with build-exe

1614098959
ikskuh
you can set the cache dir manually though :)

1614099525
mikdusan
even with an ENV var

1614099747
v0idify
g-w1, cwd is not src, that's why i'm saying

1614099755
v0idify
cwd is src/..

1614100151
g-w1
oh yeah, thats probably a bug. just tried it

1614100350
TheLemonMan
no bugs, only features

1614101315
v0idify
it's features all the way down

1614101637
karchnu
from time to time in the overview page, there is a mention about the freestanding target. I took the liberty to put a word or two to explain it in the french version.

1614102112
karchnu
is that okay to you?

1614102245
marijnfs
heya, how do I get the showtime discord?

1614102300
g-w1


1614102538
marijnfs
ah thanks!

1614102654
g-w1
marler8997: I am trying to add github actions check and deploy binaries of zigup, can I add more steps besides x86-linux to the github release step?

1614102707
g-w1
if so, does it work on windows yet? should I add windows?

1614103814
g-w1
seems like it doesn't even compile for windows because of the symlink stuff

1614104273
ifreund
g-w1: oops, thanks for the catch

1614104286
ifreund
now the commit history is messy :/

1614104325
marler8997
it doesn't work on windows yet

1614104368
TheLemonMan
that's when you rebase everything (and end up losing a few commits)

1614104406
g-w1
marler8997: ok I will just do macos and linux for now

1614104415
g-w1
ill test on mac first though

1614104428
marler8997
ok, which backend are you going to use though?

1614104455
marler8997
would be nice to either use iguana or bearssl I think, for the prebuilt-binary backend

1614104466
ifreund
TheLemonMan: this branch is being pushed to by at least 3 people so rebasing isn't a great idea :/

1614104468
marler8997
but iguana not working yet

1614104477
marler8997
and bearssl also not working, need to figure that one out

1614104481
ifreund
maybe andrew will give it a quick pass before merge

1614104545
g-w1
iguana

1614104599
TheLemonMan
that's when you #yolo and rebase everything

1614104647
ifreund
yeah just squash the current 154 commits in to one to keep things clean amiright?

1614104650
g-w1
ah, are there any backends that work and are statically linked?

1614104654
TheLemonMan
I still have 'nam flashbacks of trying to rebase some commits in Fossil

1614104673
ifreund
what made you use fossil?

1614104682
marler8997
g-w1, that's why I was saying bearssl and/or iguana, because they can be compiled statically

1614104709
TheLemonMan
hard drugs (and people already using that)

1614104751
TheLemonMan
git makes the most sense to me, despite not making much sense

1614104782
ifreund
the core concepts and data structures of git make a lot of sense to me

1614104802
ifreund
I've come to think that the cli is mostly garbage though despite being pretty good at it by this point

1614104817
TheLemonMan
yeah, the cli is the bottleneck

1614104875
TheLemonMan
speaking of pull requests, #7844 got no feedback (except for ikskuh, but I explicitly asked his two cents)

1614104926
g-w1
ah, so we have no working static backends yet. I guess I will wait for that issue to be resolved in iguana.

1614105065
ifreund
TheLemonMan: what's up with the extern struct wrapper for os.socket_t?

1614105104
g-w1
marler8997: what was wrong with bearssl? it seems like you fully nuked it?

1614105193
TheLemonMan
ifreund, future proofing

1614105454
TheLemonMan
I installed Age of Empires II for nostalgia sake but I keep getting my ass handed to me, I didn't remember the game to be so hard

1614105467
TheLemonMan
or maybe I'm just bad at it

1614105542
Amun_Ra
AoE DE has new AI, much better than the old one

1614105549
Amun_Ra
s/old/original

1614105577
earnestly
TheLemonMan: ikr

1614105654
TheLemonMan
the DE looks cool

1614105665
TheLemonMan
is this how I die?

1614106618
ikskuh
heya TheLemonMan!

1614106629
TheLemonMan
ohai

1614106643
ikskuh
sorry for my sparse response on #7844 btw

1614106726
TheLemonMan
I do appreciate your input both there and in the associated ticket :)

1614106755
ikskuh
thanks :)

1614106777
ikskuh
i want to get zig-network to replace std.net eventually, but i think there have to be a lot of redoing though

1614106983
ifreund
andrewrk: down to 5 zig fmt test cases if we just delete that empty comment one

1614107039
ifreund
we could also remove empty line comments only at the start/end of several consecutive line comments without causing other test cases to fail, but I'm not sure if that complexity would really gain us anything

1614107089
ifreund
I'm off to make dinner now though, then I'll see if anything can be done about the "comments in field access chain" test case

1614107360
watzon
Someone remind me. If I want a struct to have a field which is a `[][]u8` the best way to do that is to have an `ArrayList([]u8)` right?

1614107372
ikskuh
just use [][]u8 ?

1614107377
ikskuh
or should it be a list of strings?

1614107383
ikskuh
like, resizable, dynamic list?

1614107384
watzon
It's a list of strings

1614107422
watzon
Dynamic, but after the creation of the struct they shouldn't be modified. I just don't know until the struct is intialized how big the list will be.

1614107439
ifreund
only reason to use ArrayList is if you want it to be resizeable

1614107444
ifreund
sounds like you just want [][]u8

1614107451
watzon
Hmm ok. Makes sense.

1614107452
ifreund
or perhaps [][]const u8

1614107510
watzon
`const` would mean that I know the string values at compile time though, wouldn't it? In this case the strings are coming from a parsing operation, so they'll be known at runtime.

1614107524
watzon
Granted it's been a bit since I've used Zig. Trying to get back into it.

1614107552
ifreund
[]const u8 means that you can't modify the data stored in the slice

1614107563
ifreund
the data doesn't need to be comptime known

1614107602
ifreund
actually that's not 100% correct, const only means that you cant modify it through this handle, there may be some other mutable pointer to the same data

1614107604
watzon
Ahh ok. Good to know.

1614107634
ikskuh
TheLemonMan: have you taken a look at my std.build PR?

1614107668
TheLemonMan
ikskuh, the one that's failing the CI?

1614107868
ikskuh
yep ^^

1614108012
ikskuh
oh, i see a cli invocation in there

1614108014
ikskuh
going to trigger it

1614108355
ikskuh
ah, found the mistake :)

1614108607
marler8997
g-w1, not sure, it should be working but for some reason it's failing

1614108644
g-w1
ok

1614108673
ikskuh
good morning andrewrk!

1614108702
watzon
Mornin Andrew

1614108710
andrewrk
morning!

1614108724
watzon
Well, afternoon anyway

1614108741
andrewrk
good time of day to you, wherever you are!

1614108773
ikskuh
"late evening"

1614108862
andrewrk
ifreund, don't forget to run `./zig build test-translate-c test-run-translated-c` in that branch now :D

1614108895
andrewrk
uh and `make` before that

1614109131
marler8997
I'm developing a new scripting language to replace my BASH scripts:

1614109148
marler8997
Might be time for me to pick a name...so far my best idea is "stitch". Any suggestions?

1614109192
watzon
Stitch isn't a bad name. Would make a cute mascot too.

1614109222
watzon
Are you planning on writing it in Zig? I see you have the prototype in Python,

1614109234
marler8997
probably

1614109238
marler8997
might also go with C

1614109271
marler8997
I'm hoping by the time it's done it will be easy to implement, maybe I will have both

1614109332
marler8997
I incorporated alot of the same ideas/Zen from Zig into it's design, still not done yet though

1614110457
andrewrk
"stitch" has a nice ring to it

1614110861
marler8997
yeah ok, stitch it is then

1614110873
ikskuh
yep, i like it too

1614110889
marler8997
andrewrk, how did you come up with the name Zig?

1614110889
ikskuh
marler8997: are you writing a script language or an interactive shell?

1614110910
marler8997
ikskuh, just a scripting language, not an interactive shell, in fact I explcitly mention it's not meant to be interactive

1614110910
g-w1
iirc he just used a random python script

1614110920
ikskuh
ah

1614110947
ikskuh
marler8997: i wanted to write a small shell for myself in zig

1614110950
andrewrk
marler8997,

1614110953
marler8997
rename complete, feedback welcome but alot of things are still being worked through:

1614111000
marler8997
ikskuh, I've written multiple small shell languages, it's a very hard problem to get right I think

1614111010
ikskuh
yeah, i know

1614111016
ikskuh
that's why i don't even have a project folder yet :D

1614111020
marler8997
I'm hopeful I'm finally close to something good

1614111057
marler8997
The stuff I've learned from Zig may have been the secret sauce I needed

1614111062
ikskuh
hehe, i can imagine

1614111103
ikskuh
zig has a very positive influence on people

1614111107
ikskuh
i see it on myself a lot

1614111111
marler8997
wait that script creates 4-letter names....?

1614111129
andrewrk


1614111152
andrewrk
I don't even remember making this gist

1614111154
marler8997
zega, ooo

1614111175
ikskuh
i started rewriting every code that uses exceptions at work when i have the time to :D

1614111182
marler8997
zude

1614111196
marler8997
this script would be perfect for custom zig projects

1614111200
ikskuh
zune?

1614111200
ifreund
andrewrk: whoops, thanks for the fix

1614111218
marler8997
maybe you didn't have the 'z' prefix originally

1614111260
marler8997
nah that's not it, maybe c2 didn't exist

1614111281
mikdusan
maybe the result `zigg` came in

1614111287
marler8997
ahhh

1614111290
ifreund
andrewrk: are the translate-c tests passing for you after your latest commit? they fail for me...

1614111371
ikskuh
also a good advice: rewrite every boolean that is not a boolean value (is_foobar) into two-item booleans (.foobar, .barfoo)

1614111394
marler8997
to-item enums you mean?

1614111405
marler8997
*two-item...lol

1614111414
ikskuh
yeah LOL

1614111475
ikskuh
i just changed a parameter in the build stuff from "is_dynamic" to enum{dynamic,static}

1614111483
ikskuh
now 100% more readability

1614111498
ikskuh
createExecutable(builder, "foo", "file", true) // what is this now? :D

1614111515
marler8997
Zig's ability to allow ".dynamic" really makes that work well

1614111519
ikskuh
yeeeees <3

1614111527
ikskuh
i love enum literals so freaking much

1614111529
marler8997
otherwise, you have to potentially import a type and qualify it

1614111540
andrewrk
ifreund, no they are failing for me:

1614111540
ikskuh
yep, even then it's better

1614111588
andrewrk
nice thanks for that api improvement ikskuh

1614111592
andrewrk
looking forward to these build.zig changes

1614111614
ikskuh
i do a lot of api improvements on my way through :)

1614111637
ikskuh
also still +916 âˆ’920

1614111666
ikskuh
andrewrk: i'm currently fighting the CI :D

1614111675
ikskuh
(well, it triggers certain errors i didn't have locally)

1614111704
ifreund
andrewrk: hrm, mine are failing on a different test

1614112093
andrewrk
ifreund, well I guess we have our first WTF bug of the branch

1614112117
andrewrk
I'll look into it

1614112145
ifreund
usually I just go "it's probably lastToken() or firstToken()"

1614112149
ifreund
not this time though :P

1614112213
ifreund
andrewrk: my output if it's useful:

1614112226
andrewrk
thx

1614112240
andrewrk
so strange that it's different for vexu, you, and me

1614112266
ifreund
yeah, and I'm assumin we're all still on x86_64 glibc linux

1614112285
andrewrk
yeah, and the translated C code isn't from an h file

1614112300
andrewrk
so that shouldn't matter regardless

1614112308
ifreund
very weird indeed :/

1614112360
andrewrk
idk where the non determinism is coming from. valgrind is clean

1614112386
andrewrk
I'll just step into it with a debugger and understand why it's doing what it's doing

1614112498
andrewrk
ifreund, hmm I'm getting different results with a clean build

1614112549
ifreund
as in all zig-caches nuked or the cmake build dir as well?

1614112597
andrewrk
just the cmake build dir

1614112612
ikskuh
how long does a typical CI run take?

1614112635
andrewrk
ikskuh, 2 hours

1614112645
ikskuh
damn

1614112649
andrewrk
you can run it much faster locally by only testing the thing you are changing

1614112654
ikskuh
i survived the first 20 minutes

1614112684
andrewrk
most of the time is spent on various combinations of -lc, --single-threaded, -O modes, and different targets, for behavior & std lib tests

1614112696
ikskuh
andrewrk: i have no idea what will break

1614112699
ikskuh
but i think i survided

1614112703
ikskuh
all use of the build API :D

1614112722
andrewrk
if you look at the --help menu you can see the test categories

1614112763
andrewrk
I recommend to run these locally: test-standalone test-cli

1614112764
ikskuh
"test" and "install" both run :D

1614112772
andrewrk
like this: `./zig build test-standalone test-cli`

1614112779
andrewrk
should be relatively quick, tests some build.zig stuff

1614112845
mikdusan
this undertministic thing.. not sure if it helps:

1614112849
ikskuh
yeah locally everythin was right

1614112863
ifreund
andrewrk: I get the same as you with a clean build

1614112892
g-w1
ill try too :)

1614112894
andrewrk
mikdusan, this looks like you didn't run make

1614112914
andrewrk
or running a different zig lib dir than expected

1614112933
andrewrk
the top arrow should be pointing at an unreachable

1614113076
g-w1
I get this too: /home/jacob/dev/zig/lib/std/zig/ast.zig:871:21: 0x94fb31 in std.zig.ast.Tree.lastToken (zig1)

1614113104
ifreund
hrm, looks like I need to rebuild stage1 to test this

1614113153
andrewrk
the translate-c code needs to get updated to not use the _trailing or _comma when there are 0 elements

1614113154
ifreund
this panic is probably my fault though, it happens cause a container_decl_two_trailing has no members

1614113177
andrewrk
foo(,) does not make sense - the translate-c code should be updated IMO

1614113186
ifreund
yeah that makes sense

1614113189
andrewrk
but I'm still confused why a clean build was required to properly reproduce the error

1614113207
ifreund
I for one wasn't rebuilding stage1 to test stuff

1614113211
g-w1
a ninja and ./zig test ... was all it took for me. is that clean?

1614113220
mikdusan
(and my clean builds get that unsync'd source code dump)

1614113237
ifreund
but to modify the translate-c code a stage1 rebuild sees to be necessary

1614113265
andrewrk
hmm I think I know the problem

1614113274
andrewrk
daurnimator is gonna say "I told you so"

1614113296
andrewrk
our list of .zig files that trigger a stage1 rebuild is incomplete, and does not include vexu's new translate-c ast file

1614113308
mikdusan
oh that thing. oh my

1614113320
andrewrk
:-O never mind! it's in there

1614113357
g-w1
ðŸ¤¯

1614113731
andrewrk
alright well I pushed a fix. I still can't explain what happened with the non-clean builds. the fix works in my non-clean build directory though.

1614113754
andrewrk
alright!

1614113797
ifreund
thought it was 5?

1614113814
ifreund
maybe I can't count though :D

1614113834
andrewrk
uh I think it's me who can't count!@

1614113849
andrewrk
lunch break, bbiab

1614113853
ifreund
o7

1614114154
g-w1
wat

1614114193
g-w1
is there a better way to do this?

1614114257
g-w1
making code to convert an enum to an error set

1614114515
g-w1
oh, found a way around it, but I still think it should be allowed

1614114536
ifreund
I don't think so, @field(ErrorSet, "foo") works

1614114551
ifreund
the keyword error is not a container though

1614114567
g-w1
oh, so it should be @field(anyerror, "foo");?

1614114569
marler8997
@AnyError()?

1614114580
marler8997
ah right, anyerror, derp

1614114600
ifreund
maybe, I suspect that doesn't work either currently though

1614114604
ifreund
what's your workaround?

1614114615
mikdusan
anyerror works

1614114617
g-w1
using @Type bc im just creating a set

1614114634
ifreund
yeah I think that's the proper thing to do tbh

1614114649
g-w1
anyerror is incostinsistent though

1614114669
ifreund
how so?

1614114691
g-w1
error.foo vs @field(anyerror, "foo")

1614114726
mikdusan
well you could do @field(@TypeOf(err), "foo")

1614114751
ifreund
I guess it might me more consisent to have anyerror.foo instead of error.foo

1614114758
ifreund
s/me/be/

1614114772
g-w1
or just allow error in field

1614114961
g-w1
that seems more constisent since error is an instance of the anyerror type (i think, maybe not)

1614115166
g-w1
ooh im running into tons of stage1 bugs

1614115197
g-w1
you cant concat arrays with different lengths?

1614115356
ifreund
g-w1: you probably want to use slices, I'm guessing that what you're doing tries to change the type of a variable

1614115365
g-w1
ah

1614115429
g-w1
./test.zig:15:25: error: expected type '*const [0]std.builtin.Error', found '*const [1]std.builtin.Error' | errors = errors ++ &[1]builtin.TypeInfo.Error{ .{.name = n }, };

1614115461
ifreund
you can also use anytype, but then you'd need to wrap your variable in a struct

1614115479
ifreund
variables of type anytype can change type at comptime in stage1

1614115500
ifreund
s/variables/struct fields/

1614115513
g-w1
ok, this is getting too complicated :) Ill have to wait for stage2

1614115536
ed__
its fascinating how simple changes in code and give really big boosts to performance.  With valgrind its easy to see just what is happening.  I have been able to get things running 5x faster here... (nothing important, just a learning exercise)

1614115708
ed__
things like using shifts instead of bitmasks, passing integers instead of a point structure.  The first case caused the comiple to using one instruction instead of three, in the second case it keeps vars in registers which makes pass the parms faster.

1614115717
andrewrk
ifreund, I'm about to take on a new zig fmt test case - do you have any WIP code?

1614115754
ifreund
not at the moment, though I started thinking about the one with the function call chain broken up by comments

1614115802
andrewrk
ok I'll work on test cases starting last to first

1614115817
ifreund
cool

1614116870
ifreund
andrewrk: would you be opposed to this test case passing?

1614116907
ifreund
seems weird to allow forcing this with comments but not without

1614116922
andrewrk
I'm fine with it. What happens if you put the dots at the end of line instead of the beginning? does zig convert it to this canonical way?

1614116939
ifreund
should yeah, I'll add a transform test case

1614116944
ifreund
(that one already passes)

1614116960
andrewrk
go for it :)

1614117003
ifreund
it was actually quite simple to implement, I'm finally understanding how and why the AIS works

1614117024
andrewrk
oh damn you've got that over me then, I've read the code a few times and still puzzled

1614117072
andrewrk
I gotta say though (re: the test case), although this is how people usually write code, I think common convention has it wrong for a couple reasons:

1614117102
andrewrk
* dots before the newline is more friendly with a language that does not have semicolons

1614117127
andrewrk
* dots before the newline is consistent that all exprs have a trailing punctuation

1614117140
ifreund
if you want the dot's before the newline I can make that happen

1614117156
andrewrk
* the indentation already clues that the expr is continued on that line, however the previous line looks wrong (looks like it's missing a semicolon)

1614117186
andrewrk
but this is how people want to write code, because it feels natural, because we are used to seeing it this way, even though I think it is objectively worse syntactically

1614117217
andrewrk
it's your call on this one, whatever decision you make I will support

1614117261
ifreund
so much power :D

1614117279
andrewrk
you earned it, heh

1614117317
earnestly
I only want one dictator D:

1614117485
ikskuh
andrewrk: i don't think it's objectivly worse

1614117502
ikskuh
the question is how people read code

1614117513
ikskuh
and i'd say people read top-to-bottom first, then left to right

1614117534
ikskuh
if the continuation "." is on the "far right", i might not see it (same for the binary ops btw)

1614117544
ikskuh
so when i look at the code i see

1614117546
ikskuh
var x

1614117548
ikskuh
+ 10

1614117549
ikskuh
+ foo

1614117550
ikskuh
+ bar

1614117551
ikskuh
;

1614117569
ikskuh
which has way more context when reading it than just "10", "foo", "bar", ";"

1614117578
ikskuh
which both can be standalone statements

1614117702
ikskuh
for the same reason i prefer "}\nelse if(" over "} else if"

1614118237
andrewrk
ikskuh, I agree that what people are used to is also important

1614118250
ifreund
yeah, trailing .'s just looks too weird to me I think

1614118284
ikskuh
i also think it's not easier to parse for *humans*, but worse

1614118286
ikskuh
in general

1614118292
ikskuh
as a brain can parse 2D

1614118332
ikskuh
okay, one question on the build thingy:

1614118346
ikskuh
i have the assumption that FileSource.getPath returns an absolute path

1614118358
ikskuh
which seems to fail on

1614118377
ikskuh
on the others it seems to run fine

1614118398
ikskuh
is the assertion okay and it's a bug that a path used in the build step is relativ or is this an "okay" use case?

1614118719
ifreund
andrewrk: I think I'm done for the day, have fun with the last few test cases :)

1614119238
andrewrk
thanks!

1614119289
andrewrk
ikskuh, in general, when you run `zig build` the cwd remains whatever it is; however paths provided to APIs are relative to build.zig

1614119304
andrewrk
so there is some point where we must convert

1614119328
andrewrk
that's why you see pathFromRoot everywhere

1614119388
ikskuh
yeah

1614119405
ikskuh
i was just confused as some thing returned a relative path from a file souce

1614119410
andrewrk
also in general, I try to avoid unnecessarily producing absolute paths

1614119437
andrewrk
so that when the user runs a command, when they see paths in the output, they remain relative if possible

1614119458
ikskuh
sounds about right

1614119473
andrewrk
I don't think I answered your question directly, but did that provide enough info to tell you what code to change to fix it?

1614119525
ikskuh
not quite

1614119539
ikskuh
i introduced this assertion in FileSource.getPath:

1614119539
ikskuh
std.debug.assert(std.fs.path.isAbsolute(path));

1614119550
ikskuh
path is either constructed with pathFromRoot

1614119564
ikskuh
or is assumed to be absolute when returned from a GeneratedFile

1614119571
ikskuh
which doesn't seem to be the case for everything

1614119590
andrewrk
that assertion does not seem correct to me

1614119596
ikskuh
okay, that was my question :)

1614119605
ikskuh
i'll leave it out and the bug is resolved

1614119606
andrewrk
I see `/// Relative to build root` documenting the path field

1614119628
ikskuh
"relative to build root or absolute."

1614119646
andrewrk
that sounds OK

1614119770
ikskuh
oh man i love zig so much <3

1614119851
andrewrk
<3

1614119910
ikskuh
andrewrk: excellent job

1614119912
ikskuh
seriously

1614119925
ikskuh
snippet which made me grin right now

1614119947
ikskuh
handleClientConnection(&arena.allocator, client) catch |err| { std.log.err(...); };

1614119992
andrewrk
try/catch/finally always bothered me in other languages, from the first moment I learned about it

1614119997
ikskuh
yep

1614120005
ikskuh
it's just unintuitive and inflexible

1614120018
ikskuh
accept socket, spawn arena, handle connection, release resources. next!

1614120054
ikskuh
i start to feel real hate towards classic exception handling

1614120094
ifreund
I've always felt real hate towards classic exception handling

1614120104
ikskuh
nah, it's the thing i learned first

1614120123
ikskuh
but i grow my hate on a day-to-day basis

1614120127
ikskuh
it's impossible to get under control

1614120167
ifreund
the first language I got good at was C++ in a codebase that didn't use exceptions or any real form of error handling besides returning NULL

1614120252
ikskuh
sounds better than "throw up;"

1614120429
ikskuh
also that char literals are

1614120591
ifreund
also comptime <3

1614120830
ikskuh
can i sanitize a relative path that it doesn't leave the root/start folder?

1614121130
andrewrk
yes

1614121185
ikskuh
i see pub fn resolvePosix, but that has a dependency on the cwd

1614121551
andrewrk
that should probably be changed; either way it only has a dependency on the cwd if you pass len = 0 paths

1614121622
ikskuh
nah, passing "path" would also resolve to "$(pwd)/path"

1614121838
andrewrk
ah right

