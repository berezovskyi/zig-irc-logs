1621125008
jamii
fengb: Ah. I don't totally understand that, but it definitely means that my mental model is wrong.

1621125152
jamii
Ok, so this works -

1621125873
jamii
I got the original example working too now. Thanks fengb :)

1621141251
marler8997
this is taking me way too long, how do I change the install path in build.zig?

1621141355
andrewrk
-p

1621141381
andrewrk
oh I'm sorry you meant inside the script

1621141408
marler8997
:)

1621141420
andrewrk
are you sure that's what you want?

1621141459
andrewrk
it's supposed to be up to the user to decide where something gets installed

1621141465
marler8997
uh....since you're asking I'm guess no

1621141498
andrewrk
happy to suggest solutions if you describe the problem

1621141519
marler8997
I feel like your question has resolved my issue :)

1621141876
marler8997
looks like zig build -p . not working on windows though :(

1621142010
andrewrk
that at least is something we can take action to fix

1621142040
marler8997
oh not working on linux either

1621142265
g-w1
it works for me

1621142273
g-w1
i get a bin folder in cwd

1621142312
marler8997
shoot you're right

1621156735
nerthus
ಠ_ಠ

1621176282
marler8997
trying to send a patchset on sourcehut to dbandstra (never done it on sourcehut before).  does he hang out here?

1621176405
ifreund
haven't seen him around, does his repo have a mailing list listed? If so you're probably expected to send the patches there

1621176442
marler8997
I don't see one in the "summary" page, is that where it would be?

1621176552
ifreund
marler8997: yeah, looks like he doesn't have one listed, I'd just send to whatever email he uses for commits then

1621176601
marler8997
ok, I went through the web ui to send a patchset to his commit email, hopefully it works

1621176666
Nypsie
Perhaps he accepts the patch through his Github?

1621176699
marler8997
the github repo says it's a mirror of the sourcehut repo, which tells me he would prefer patches there

1621176734
Nypsie
Oh you're right, my bad. I should've read the description :)

1621176762
ifreund
how is the sr.ht web UI? I haven't seen that before

1621176794
marler8997
a bit clunky, but seems to work, I'm trying to send a second patchset and I can't seem to find the page that does it again!

1621176837
marler8997
ah, in the "summary" page, "Prepare a patchset" link

1621176879
ifreund
I feel like with a few more years polish sr.ht will be pretty nice

1621176903
ifreund
right now there are some serious UX issues, but I really love and appreciate the simplicity

1621176905
marler8997
do you think they will add a pull-request model, where it hosts discussion and you can check the status of your change?

1621176938
ifreund
marler8997: I think their mailing lists replace that

1621176946
marler8997
the problem with sending an email via patchset is there's no feedback to know if my change has even been received

1621176980
ifreund
yeah, that's an issue when sending to someone's personal email instead of a public list

1621176986
marler8997
ah,

1621176999
marler8997
oh I forgot to cc my own email as well, shoot

1621177000
ifreund
they even have CI integration for public lists now

1621177022
marler8997
correcting mistakes also seems to be problematic

1621177028
marler8997
do I just send another patchset with my email cc'd?

1621177043
marler8997
I suppose my email is in the commit

1621177044
marler8997
so maybe ok

1621177080
marler8997
it's interesting, it's half way between the old model and the new github PR model

1621177107
ifreund
I think the goal is to have all the advantages of the old model with more modern UX

1621177118
ifreund
as well as nice things like CI

1621177142
marler8997
I'm unaware of the advantages the old model has

1621177147
ifreund
correcting mistakes usually means just sending a v2 of the patchset as a whole

1621177160
ifreund
decentralization for one

1621177184
marler8997
yeah, I suppose that's a big one

1621177230
ifreund
you also no longer need a browser to collaborate, just an email client

1621177235
leon-p
sending a patch via email is something you do when your patch is pretty much done already. If you prefer to work on a public draft and get feedback along the way, like with githubs PRs, you can upload your changes to a public git repo and do a pull request via email.

1621177303
marler8997
what's a "pull request via email" mean with sourcehut?

1621177426
leon-p
you can do `git request-pull` and it sends an email which basically says "hey, i have changes in git@whatever.com:repo.git, please pull them".

1621177471
marler8997
shoot, problem is I can't use the git email commands because they haven't fully implemented support behind proxies

1621177475
leon-p
because git allows you to pull from remotes that are not your original origin

1621181154
marler8997
is it possible to get the address of the payload of an optional field?

1621181176
marler8997
or simpler, just an optional value

1621181417
ikskuh
var foo: ?u32 = 10;

1621181422
ikskuh
var foo_ptr = &foo.?;

1621181437
marler8997
ah good

1621181456
ifreund


1621181462
ifreund
careful if using undefined

1621181567
ikskuh
marler8997: if you don't know a init value, you can init to @as(Payload, undefined)

1621181591
marler8997
oh that's interesting

1621181682
ifreund
ikskuh: that's UB, see the issue I just linked

1621181700
ifreund
and the the one linked from it

1621181911
ikskuh
oh huh

1621181973
ikskuh
ifreund: then we need a var for workaround here?

1621182056
ifreund
yes, you can do var x: Payload = undefined; then init x, then do const opt_x: ?Payload = x;

1621182078
ifreund
but this is semantically a copy, so it won't work if you need pointer stability

1621182092
ifreund
also not great if your type is large, hence #6992

1621187949
mikdusan1
hmm it seems running `zig build test` on linux x86_64 now requires multilib (lib32-glibc) to be installed

1621188041
mikdusan1
I'm ok with it just note that if not installed all you get is "file not found" on a `zig test -lc -target i386-linux`

1621188775
ifreund
I think there are several places where that's the only error message stage2 spits out for a missing file :/ without the error return trace and poking around in the code they are pretty useless

1621189208
mikdusan
it's such a low-level error. like a bash script with bad hash-bang path but in this case `ld-linux.so.2` is what's not found

1621190741
g-w1
is it the intended behavior that `zig cc` will need a `cc` in env?

1621190763
g-w1
❯ zig cc test.c\n Zig attempted to find the path to native system libc headers by executing this command:\n cc -E -Wp,-v -xc /dev/null\n error: unable to create compilation: UnableToSpawnCCompiler

1621190801
TheLemonMan
more or less, we have to detect where the system libc files are

1621190836
g-w1
ok, i guess i can always use musl if i dont want that

1621190962
TheLemonMan
koakuma, good news, I got lld to link a sparc64 elf linked against glibc

1621191157
mikdusan
g-w1: is there no compiler installed, or is it that the alias `cc` doesn't exist?

1621191767
g-w1
mikdusan: no compiler in PATH/env, and i want it that way (using nixos)

1621191826
g-w1
honestly, it might be a good idea to fallback to musl if this happens

1621192733
ifreund
g-w1: it has been proposed to change the behavior to only link the system libc by default if linking other system libraries

1621192745
ifreund
nobodies implemented it yet though

1621192854
TheLemonMan
I'm not really a fan of tools silently switching behaviour like this

1621193052
ifreund
adding a flag to toggle this would also be fine by me

1621193067
ifreund
certianly would be more explicit

1621194726
ifreund
only issue: if this hypothetical flag defaulted to not linking the system libc we would still fail to link system libraries by default if the system glibc is newer

1621194748
ifreund
(I hate glibc, I think I'm going to reformat my harddrive and install zfs and void musl)

1621199326
andrewrk
I'd be down for a switch. The default would be complete isolation from the system. And the switch would enable system integration

1621199380
ifreund
ah, so you need to enable the switch to link system libs? I like that

1621199388
mikdusan
why not make it part of target

1621199449
andrewrk
mikdusan, what exactly are you proposing?

1621199460
mikdusan
-target native-native-hosted

1621199462
ifreund
I think the -target option only makes sense as a cross target currently, which only works if not depending on the system

1621199486
ifreund
overloading that doesn't feel right

1621199509
andrewrk
oh I see, make it one of the C ABI enum tags

1621199544
mikdusan
I like the idea of zig doing it's thing... then we opt-out with a specific ABI

1621199547
ifreund
I don't like how that would complicate e.g. Target.isMusl()

1621199566
mikdusan
ifreund: if you install alpinelinux or void, I think you'll find isMuls() a bit... confusing

1621199585
mikdusan
try runing `zig build test` on one of those :)

1621199609
ifreund
i'm running glibc void, what happens on musl?

1621199633
mikdusan
it will fail, iirc on not knowing whether musl means bundled musl or system musl

1621199656
ifreund
is that newly broken?

1621199664
mikdusan
might be an old pr for that; i'll try to find it

1621199673
mikdusan
s/pr/issue/

1621199680
ifreund
I had no issues building river on musl void around 0.7.1

1621199701
mikdusan
I'll boot alpin to get a definitive answer

1621199755
ifreund
do you see my point about how having "hosted" or "system" or whatever would complicate the std.Target implementation though?

1621199859
ifreund
right now all the data necessary to answer questions like isMusl() or requiresLibC() is in the struct

1621199933
mikdusan
I'd have to see all callsites of isMusl() to respond to that

1621200019
ifreund
mikdusan: the callsites are irrelevant, right now it's a simple switch

1621200042
mikdusan
my point is how is isMusl() meaningful if I don't know whether it is a suitable answer for bundled or unbundled musl

1621200046
ifreund
but having a "hosted" abi or similar would require std.Target to be aware of the system

1621200095
ifreund
mikdusan: right now the native libc is only used if the os and abi fields of std.CrossTarget are null

1621200130
ifreund
i.e. there is no Target.Abi to call isMusl() on

1621200146
ifreund
which makes sense IMO

1621200161
andrewrk
ifreund, I believe this would be in the CrossTarget / CLI parsing, and std.Target would be unchanged

1621200227
andrewrk
so std.Target.Abi would not gain a new tag, however the -target CLI parsing and the std.zig.CrossTarget API would support the concept of "native" C ABI

1621200298
ifreund
CrossTarget already does use os_tag == null and abi == null to mean "native" C ABI according to the doc comments

1621200328
ifreund
what we'd need to introduce is a switch that tells zig whether or not to provide its own libc

1621200422
ifreund
I wonder how this would integrate with a system cross toolchain

1621200564
andrewrk
good question

1621200629
ifreund
as far as I know, the classic C cross toolchain basically works through having an alternative sysroot with the /usr/lib and /usr/include of the target

1621200775
ifreund
integrating with these is a use case I think zig should support, as it would make cross compiling zig programs which depend on system libraries possible

1621200814
ifreund
which is how e.g. voidlinux does packaging for the multiple architectures it supports

1621200897
andrewrk
yeah that's related to the libc.txt feature

1621200907
mikdusan
on the alpinelinux issue: `zig build test-behavior` fails because it tries to run an exe linked with ld-linux-x86-64.so.2

1621200935
ifreund
wouldn't be the awesome cross compilation experience zig can provide when not depending on system libs of course, but that's not a option due to being unable to statically link graphics libs

1621200940
mikdusan
it could be exactly this issue: #7704

1621200980
andrewrk
for the short term: I think 0.8.0 should only try to link system libc if there are system libraries being linked against

1621201046
andrewrk
this will solve the use case of applications such as river, without breaking the use case of cross compilation & not depending unnecessarily on system C compiler installation, which is just a wildcard that can break anything mysteriously. after that we can clean up the CLI and model for how to communcate the target and system integration strategy

1621201100
g-w1
thanks

1621201105
ifreund
that sounds reasonable to me, I'll see if I can find time to implement that sometime this week

1621201147
andrewrk
that would be sweet. no pressure; I'll take care of it if you don't find the time

1621201287
mikdusan
ifreund: if I do not specify a target, what does `isMusl()` mean to you?

1621201306
ifreund
if you don't specify a target abi, you can't call isMusl()

1621201319
ifreund
isMusl() takes a Target.Abi

1621201333
mikdusan
what I mean is the target is default

1621201351
ifreund
default?

1621201362
mikdusan
`zig build-exe hello.zig` <-- no target is specified

1621201406
ifreund
then it's the native cpu/os/abi, so whatever the system's abi is

1621201432
ifreund
but you still can't call isMusl() as CrossTarget.abi is nul

1621201441
ifreund
s/nul/null/

1621201458
andrewrk
there's a process to resolve a std.zig.CrossTarget into a std.Target

1621201467
andrewrk
involving possibly poking around the OS and CPU

1621201525
ifreund
std.zig.system.NativeTargetInfo.detect()

1621201568
ikskuh
btw, on the topic of cross-compiling:

1621201590
ikskuh
i have an aarch64 device for which i'd love to cross-compile a zig project referencing SDL2

1621201600
ikskuh
what's the best way to do this?

1621201607
ikskuh
just use extern "sdl2" foo(); ?

1621201646
ifreund
ikskuh: cross compiling while linking system libraries is a largely unexplored use-case currently

1621201681
ikskuh
okay, so there's no "way to go" :D

1621201685
ifreund
in theory I think you need to install the relevant C cross toolchain from your distro and tell zig to use that libc/sysroot

1621201704
ifreund
but I haven't tried this myself

1621201709
ikskuh
you mean "sshfs" the sysroot on my machine

1621202641
daurnimator
ifreund / ikskuh: if you have (x86_64) arch you could at least try installing `aarch64-linux-gnu-glibc` and linking against some piece of it?

1621202673
ikskuh
daurnimator: that won't help when i want to link against SDL2 :D

1621202684
ikskuh
i would still have to build the full dep tree

1621202692
daurnimator
it won't.... but it at least lets you explore that unexplored ground

1621202816
ikskuh
i mean, we already have a solution for windows

1621202839
ikskuh
andrewrk: would it be possible to create def files for linux libraries as well?

