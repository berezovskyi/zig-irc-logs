1627431061
ifreund!~ifreund@user/ifreund
ericam: see std.meta.activeTag() and std.meta.eql()

1627496833
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Is there a way to directly cast from one pointer type to a different pointer type?

1627496904
ifreund!~ifreund@user/ifreund
ericam: @ptrCast()?

1627496944
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
...yeah, sorry, I missed that in the docs.

1627497021
ifreund!~ifreund@user/ifreund
no problem!

1627502562
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
Are there any memory analysis tools that work well with Zig? I remember trying Valgrind a few months back and having issues

1627502703
ifreund!~ifreund@user/ifreund
ericam: valgrind's worked great for me on linux

1627502705
ifreund!~ifreund@user/ifreund
what issues?

1627502720
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
I haven't tried in a while, let me give it a go again (once I get my program to compile again, lmao)

1627502739
ifreund!~ifreund@user/ifreund
oh, valgrind will only work with libc's allocator though

1627502748
ifreund!~ifreund@user/ifreund
so you'd need to use std.heap.c_allocator

1627503037
ericam!~ericam@pool-98-113-135-30.nycmny.fios.verizon.net
I am using that at the moment, so I should be good.  Is the Zig allocator on hold until a later release?

1627503545
ifreund!~ifreund@user/ifreund
ericam: the standard library general purpose allocator is mostly feature complete for debug builds, it does quite good memory leak and use-after-free detection

1627503561
ifreund!~ifreund@user/ifreund
a performance oriented version is not a priority at this time, no

1627503941
andrewrk!~andrewrk@mail.ziglang.org
ifreund, valgrind will only find leaks with libc allocator, but even without libc allocator zig's integration with valgrind with regards to undefined memory makes it a super useful tool for finding UB

1627504525
ifreund!~ifreund@user/ifreund
andrewrk: ah nice, good to know that that's not dependant on libc's allocator (which wouldn't make sense when I think about it)

1627504542
ifreund!~ifreund@user/ifreund
is that integration part of the dward debug info generated?

1627504555
ifreund!~ifreund@user/ifreund
*dwarf

1627506896
andrewrk!~andrewrk@mail.ziglang.org
ifreund, by default, on supported platforms, in debug mode, zig inserts Valgrind Client Requests to mark areas of memory as `undefined` (this integrates with the `undefined` language feature). this gives valgrind the ability to detect a lot of branch on undefined value cases that wouldn't be caught in C

1627506914
andrewrk!~andrewrk@mail.ziglang.org
this is one benefit of the `foo.* = undefined;` idiom at the end of a deinit() implementation

1627506959
andrewrk!~andrewrk@mail.ziglang.org
the valgrind client requests are implemented as some clever machine code instructions that the cpu ignores but valgrind recompiler detects

1627507378
ifreund!~ifreund@user/ifreund
very cool :)

