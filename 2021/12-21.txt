1640067514
sm2n!ae95cb1267@user/sm2n
congrats on the release everyone!

1640070771
fleg!dfbb34cb39@user/fleg
congrats on the release!

1640072969
andrewrk!~andrewrk@mail.ziglang.org
ðŸŽ‰ðŸŽ‰ðŸŽ‰

1640073082
novakane!ca74a093b3@user/novakane
nothing like reading a zig changelog on waking up, congrats to all contributors \o/

1640073900
yrashk!sid1568@id-1568.lymington.irccloud.com
I can quite see a resolution to this seemingly simple problem: https://godbolt.org/z/5G1Tbc31r -- how do I get *Q instead of *const Q in that `while` loop with an optional?

1640074759
yrashk!sid1568@id-1568.lymington.irccloud.com
nevermind, this was as simple as prepending the capture of `a_` with `*`. Now I just have to figure out my other, slightly more complicated case :)

1640080025
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, I'm completely stoked about tinyvg

1640080051
andrewrk!~andrewrk@mail.ziglang.org
maybe we should use it for the official ziglang/logo format!

1640080071
andrewrk!~andrewrk@mail.ziglang.org
I mean really, it's a better fit since it's less ambiguous

1640080122
andrewrk!~andrewrk@mail.ziglang.org
and then we won't end up with this situation: https://en.wikipedia.org/wiki/File:Ziggy_the_Ziguana.svg#filehistory

1640080128
ikskuh!~xq@v43666.php-friends.de
heh

1640080130
ikskuh!~xq@v43666.php-friends.de
oh

1640080139
ikskuh!~xq@v43666.php-friends.de
i have a funny idea to fix the logo on wikipedia!

1640080151
ikskuh!~xq@v43666.php-friends.de
svg2tvgt ziggy.svg && tvg-text ziggy.tvgt -o ziggy.svg

1640080169
andrewrk!~andrewrk@mail.ziglang.org
badass flex ðŸ˜ŽðŸ’ª

1640080256
ikskuh!~xq@v43666.php-friends.de
but you know: let's wait for the 1.0 :D

1640080258
ikskuh!~xq@v43666.php-friends.de
first

1640080312
andrewrk!~andrewrk@mail.ziglang.org
good point

1640080854
ikskuh!~xq@v43666.php-friends.de
but i think i'll tack a 31.1.2022 on the 1.0 release

1640081914
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, is tvg as a file extension already taken?

1640081944
ikskuh!~xq@v43666.php-friends.de
i have no idea ^^

1640081964
andrewrk!~andrewrk@mail.ziglang.org
it shouldn't matter in theory, but from a marketing perspective, I suspect TinyVG has a slightly higher chance of adoption if the file extension is .tvg, because 3 letters are more satisfying, especially with the similarity to .svg

1640081977
ikskuh!~xq@v43666.php-friends.de
https://www.file-extension.info/format/tvg

1640081987
ikskuh!~xq@v43666.php-friends.de
yeah, the official file extension from my side is tvg

1640082020
andrewrk!~andrewrk@mail.ziglang.org
fuck 'em. it's your extension now

1640082130
ikskuh!~xq@v43666.php-friends.de
yes!

1640082265
ikskuh!~xq@v43666.php-friends.de
how would you call that part in the specification?

1640083176
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, you mean the section header in the spec? perhaps a sibling to Format called "Recommended Conventions" and then a simple sentence that says "The canonical file extension of TinyVG is '.tvg'"

1640083203
ikskuh!~xq@v43666.php-friends.de
i've went with "Recognizing TinyVG"

1640083212
ikskuh!~xq@v43666.php-friends.de
TinyVG is using the .tvg file extension and should use the image/x-tinyvg mime type

1640083221
andrewrk!~andrewrk@mail.ziglang.org
sounds good

1640083229
andrewrk!~andrewrk@mail.ziglang.org
btw how did you determine the magic bytes to be { 0x72, 0x56 } ?

1640083249
ikskuh!~xq@v43666.php-friends.de
https://www.random.org/cgi-bin/randbyte?nbytes=2&format=h

1640083258
andrewrk!~andrewrk@mail.ziglang.org
excellent

1640083264
andrewrk!~andrewrk@mail.ziglang.org
that is professional

1640083273
ikskuh!~xq@v43666.php-friends.de
i figured using anything human decided is likely to collide

1640083281
andrewrk!~andrewrk@mail.ziglang.org
agreed

1640083296
ikskuh!~xq@v43666.php-friends.de
using random.org helps me to be non-biased and have low collision chance

1640083304
ikskuh!~xq@v43666.php-friends.de
i usually use 4 bytes for magic, but tiny is tiny!

1640084161
ikskuh!~xq@v43666.php-friends.de
> Generated Files as Inputs Â§

1640084171
ikskuh!~xq@v43666.php-friends.de
it looks like my code ended up in the release notes

1640084172
ikskuh!~xq@v43666.php-friends.de
nice

1640085898
motiejus!~motiejus@2001:470:69fc:105::38fb
Congratulations to the team on the 0.9.0 release!

1640085944
motiejus!~motiejus@2001:470:69fc:105::38fb
11 days without a message in this channel, had to check if my bouncer is still OK. Looks like it is. What a calm time for Andrew & Co to fix the remaining issues and write the release notes. Reading those over a coffee :)

1640085969
andrewrk!~andrewrk@mail.ziglang.org
thanks motiejus!

1640085986
motiejus!~motiejus@2001:470:69fc:105::38fb
for a user of `zig c++`, zig 0.9.0 is my favorite release so far. :)

1640085989
supakeen!~user@python/site-packages/supakeen
motiejus: There have definitely been messages the past 11 days :)

1640086002
andrewrk!~andrewrk@mail.ziglang.org
I think your bouncer has had issues because there has certainly been messages in this channels in the last 10 days. In fact I was going to message you but you were not online

1640086018
Arnavion!arnavion@user/arnavion
Your bouncer hasn't been active. You joined the channel seconds before you typed your first message

1640086237
Franciman!~Franciman@mx1.fracta.dev
Arnavion: i thank you for your example

1640086253
Franciman!~Franciman@mx1.fracta.dev
I just was talking about some difficulties I had in understanding things, but the experience is overally awesome

1640086265
Franciman!~Franciman@mx1.fracta.dev
much better than C++, more complete and helpful than C

1640086947
motiejus!~motiejus@2001:470:69fc:105::38fb
(is my bouncer really off? Have there been messages in the last 11 days?)

1640087034
motiejus!~motiejus@2001:470:69fc:105::38fb
yep, found out it's off (https://marler8997.github.io/zig-irc-webpage/?date=2021-12-21) thanks marler

1640089064
bw!sid2730@user/betawaffle
the release notes for 0.9 look awesome

1640089082
bw!sid2730@user/betawaffle
literally just the table of contents

1640090750
ikskuh!~xq@v43666.php-friends.de
https://lobste.rs/s/09wnbp/challenger_throne_vector_graphics_svg_is#c_wfur6a

1640090755
ikskuh!~xq@v43666.php-friends.de
comments like this sadden me

1640090868
earnestly!~earnest@user/earnestly
It does seems to highlight that the author of the spec has little working knowledge of the field

1640090990
ikskuh!~xq@v43666.php-friends.de
it primarily shows that the spec was written in three days from the ref impl

1640091003
ikskuh!~xq@v43666.php-friends.de
and its the first spec i've ever written

1640091012
ikskuh!~xq@v43666.php-friends.de
there are a lot of missing things, yes.

1640091018
ikskuh!~xq@v43666.php-friends.de
that's why the spec isn't frozen yet

1640091337
earnestly!~earnest@user/earnestly
I don't particularly mind that you're new to it and incisive comments like this can be a great resource for highly directed learning

1640091464
ikskuh!~xq@v43666.php-friends.de
yep

1640091465
ikskuh!~xq@v43666.php-friends.de
i mean

1640091473
ikskuh!~xq@v43666.php-friends.de
i will address *all* of the problems listed here

1640091478
ikskuh!~xq@v43666.php-friends.de
i just don't like the way of presentation

1640091490
ikskuh!~xq@v43666.php-friends.de
btw

1640091495
ikskuh!~xq@v43666.php-friends.de
here's the epitome of SVG badness

1640091496
ikskuh!~xq@v43666.php-friends.de
https://mq32.de/public/9f3cd5eb7f310139cf8acdd61edb73080d26a4e2.png

1640091518
earnestly!~earnest@user/earnestly
It's visceral, combative, blunt.  I like that

1640091550
earnestly!~earnest@user/earnestly
I'm glad you're making tvg, it looks nice, and I do appreciate the sexprs

1640091656
Piraty!~irc@user/piraty
ikskuh: lobste.rs saddens me, usually

1640091662
earnestly!~earnest@user/earnestly
ikskuh: The bit that bothers me is how these new formats cannot be used in browsers in the same way I can use them with my own tools/command-line.  That lack of flexible integration and composition in 'apps' (appliances) means so many of these interesting new formats will probably takes years, if ever, to see

1640091674
ikskuh!~xq@v43666.php-friends.de
Piraty: lobste.rs usually has the better communication style than orange site LOL

1640091688
earnestly!~earnest@user/earnestly
It's better because it's exclusive

1640091690
ikskuh!~xq@v43666.php-friends.de
earnestly: have you seen the wasm polyfill? :)

1640091703
ikskuh!~xq@v43666.php-friends.de
you can easily integrate TinyVG in your website today :)

1640091704
earnestly!~earnest@user/earnestly
ikskuh: No because I don't have javascript enabled

1640091707
ikskuh!~xq@v43666.php-friends.de
ah!

1640091746
earnestly!~earnest@user/earnestly
Which, overall has been a pretty great experience.  Though more websites display nothing, I use that as a signal to suggest the website has nothing to offer

1640091803
ikskuh!~xq@v43666.php-friends.de
i assume that tinyvg.tech should still look brilliant *grin*

1640091808
ikskuh!~xq@v43666.php-friends.de
even if you disable css as well

1640091953
earnestly!~earnest@user/earnestly
ikskuh: Yup, it excellent and to the point which is great as well.  I don't mind CSS and so many interactive features can be described but it now, although I have had to recently disable animations via stylesheets because without javascript websites will display placeholder elements that have a grey/white gradient phasing cylon-eye animation that pegs my CPU usage to 40% or so.

1640091989
ikskuh!~xq@v43666.php-friends.de
haha, yeah

1640091990
earnestly!~earnest@user/earnestly
(Transitions still work just fine and provide the majority of interesting effects anyway)

1640091994
ikskuh!~xq@v43666.php-friends.de
i also proved the website via kristall :)

1640092006
ikskuh!~xq@v43666.php-friends.de
as long as you have sane HTML code

1640092011
ikskuh!~xq@v43666.php-friends.de
it will be alright

1640102779
terminalpusher!~terminalp@2a01:586:968a:1:2075:621e:ac7b:a6ff
What do you think is the correct way to discard any error and do nothing on error? `catch undefined`? `catch {}`? Something else?

1640102801
ikskuh!~xq@v43666.php-friends.de
err catch {};

1640102825
ikskuh!~xq@v43666.php-friends.de
"catch undefined" is a bad idea, this will yield a undefiend value

1640103026
terminalpusher!~terminalp@2a01:586:968a:1:2075:621e:ac7b:a6ff
ikskuh: I heard this undefined actually gets coerced to void

1640103035
terminalpusher!~terminalp@2a01:586:968a:1:2075:621e:ac7b:a6ff
if the function returns void

1640103044
ikskuh!~xq@v43666.php-friends.de
oh yeah

1640103046
ikskuh!~xq@v43666.php-friends.de
that's right

1640103050
ikskuh!~xq@v43666.php-friends.de
but this is not always true

1640103053
ikskuh!~xq@v43666.php-friends.de
i would go with catch {}

1640103059
ikskuh!~xq@v43666.php-friends.de
it makes this more explicit

1640103093
terminalpusher!~terminalp@2a01:586:968a:1:2075:621e:ac7b:a6ff
me too

1640103133
terminalpusher!~terminalp@2a01:586:968a:1:2075:621e:ac7b:a6ff
but included in the zen is "Only one obvious way to do things." doesn't this violate that?

1640103154
terminalpusher!~terminalp@2a01:586:968a:1:2075:621e:ac7b:a6ff
because there are 2 ways

1640103515
bw!sid2730@user/betawaffle
What happens if two threads try to resume a frame concurrently?

1640110227
andrewrk!~andrewrk@mail.ziglang.org
safety-detectable Illegal Behavior

1640110608
bw!sid2730@user/betawaffle
What code can I read to see how suspend/resume is implemented by the compiler?

1640110872
ifreund!~ifreund@user/ifreund
bw: it'll be mostly in src/stage1/ir.cpp and src/stage1/codegen.cpp

1640119199
dch!sid1310@couchdb/committer/dch
just wrapping up updating zig for 0.9.0 on freebsd, is there a post-build test target I could run? 

1640119514
andrewrk!~andrewrk@mail.ziglang.org
dch, `zig build test-behavior`

1640119524
dch!sid1310@couchdb/committer/dch
the naive `./build/zig test build.zig` or ./build/zig test/tests.zig` doesn't find any test cases, but I'm presumably very close

1640119549
andrewrk!~andrewrk@mail.ziglang.org
`zig build test` if you want the whole test suite. will take a while 

1640119577
dch!sid1310@couchdb/committer/dch
thanks andrewrk! I'll run the longer suite overnight

1640119616
andrewrk!~andrewrk@mail.ziglang.org
dch, that has to be run from within a git source tree; a zig installation does not ship all the test fixtures

1640119632
dch!sid1310@couchdb/committer/dch
ACTION nods

1640119639
andrewrk!~andrewrk@mail.ziglang.org
s/a git source tree/the zig source tree/

1640119667
dch!sid1310@couchdb/committer/dch
this is a final/optional stage in the ports tree build-from-source so we should have all the bits there

1640120224
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I have a question about how the compiler works. I often need to join strings with a separator/joiner like Â¨ Â¨ or Â¨, Â¨. As would make sense, after the last element you donÂ´t add this separator. What is the best way to implement this(keeping effiency in mind)? I tend to use Â´if (i != array.len - 1)Â´ inside the loop. This keeps code duplication to a minumum but this will enforce n checks for a variable that will be predictably tru

1640120224
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
e only once. Any pointers?

1640120241
yrashk!sid1568@id-1568.lymington.irccloud.com
I am playing with my own version of a generator primitive, and I am wondering if there's any good way to see if a function call in a frame has ended? Currently I am relying on generator function doing `defer gen.done()` to signal termination: https://gist.github.com/yrashk/95d351163c9f60ed38439a925e40129f#file-generator-zig-L114 -- but I am not very happy about it.

1640120302
andrewrk!~andrewrk@mail.ziglang.org
Daimanta, it can be situational, but one way that is kind of satisfying is to always append a ", " and then after the loop just chop off the last 2 bytes of the array

1640120345
companion_cube!~simon@user/companion-cube
(this is why formats that accept trailing separators are good)

1640120576
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Well, I am mostly printing to stdout so i cannot really use the superfluous characters.

1640120642
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I can image that the compiler will recognize that the statement only will be run once and optimize accordingly. In the end itÂ´s only a couple of boolean checks but I donÂ´t want to be chewed out for my choice in optimization.

1640120817
ifreund!~ifreund@user/ifreund
the only way to know if llvm does that 'optimization' is to check the output

1640120848
ifreund!~ifreund@user/ifreund
the CPU's branch predictor probably makes it not very necessary though

1640121178
andrewrk!~andrewrk@mail.ziglang.org
if you're writing to stdout you should probably be buffering

1640121244
andrewrk!~andrewrk@mail.ziglang.org
and in such case you should be able to call buffered_writer.ensureUnusedCapacity() to guarantee that a flush() does not happen when you write the ", "

1640121276
andrewrk!~andrewrk@mail.ziglang.org
maybe the buffered writer API is lacking support for this use case, but I think it should support this use case

1640121725
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Thanks for the tips :) Hopefully in a couple of months I will be able to deliver a version of coreutils that people can actually use

1640122182
Arnavion!arnavion@user/arnavion
Daimanta: The other common approach is to prepend ", " for every element except the first

1640122221
Arnavion!arnavion@user/arnavion
Comparison to 0 vs comparison to len - 1 doesn't make much of a difference to matter, but it can look cleaner to the human eye

1640122339
Arnavion!arnavion@user/arnavion
s/prepend ", " for/append ", " before/   to be precise

1640122524
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Ok, understood. IÂ´ll keep my approach for now but the ideas are useful :)

1640122646
pkap!~pkap@193.32.127.232
In the Pointers Segment of the docs is the following: `[]T - pointer to runtime-known number of items. ` and it says that these are "closely related to slices". But what is the distinction to slices then? Looks like they are the same?

1640122706
Arnavion!arnavion@user/arnavion
No, it's saying that the first two items are closely related to slices, and the one you quoted is the definition of slices

1640122816
Arnavion!arnavion@user/arnavion
"The two types of pointers are *T that is a pointer to a single element, and [*]T that is a many-pointer to T, and they respectively behave like this. They're closely related to arrays and slices. *[N]T is a pointer to array and behaves like this, and []T is a slice and behaves like this."

1640122930
pkap!~pkap@193.32.127.232
Ah ok, thanks Arnavion.

1640123006
pkap!~pkap@193.32.127.232
I didn't get this because there is a "Slices" section below and I just assumed that the slices are introduced over there and not in the Pointer section.

1640123028
Arnavion!arnavion@user/arnavion
Yeah the documentation is very out of order in that regard. You can't learn from it by reading top-to-bottom

1640123080
andrewrk!~andrewrk@mail.ziglang.org
ah I see how that is confusing

1640123101
Arnavion!arnavion@user/arnavion
When I was learning I started with   https://ziglearn.org/   and   https://github.com/ratfactor/ziglings   and just kept the master documentation as a reference on the side to clarify individual things

1640123440
pkap!~pkap@193.32.127.232
Arnavion: I also read ziglearn. It was a good start, but it didn't answer all the questions I had so I went on to the documentation.

1640123541
pkap!~pkap@193.32.127.232
The real problem is that all my dumb questions are not on Stackoverflow like other programming languages :D

1640123663
Arnavion!arnavion@user/arnavion
Searching the internet for zig questions just yields outdated info anyway

1640123702
Arnavion!arnavion@user/arnavion
It's probably better to ask live, in its current stage. And for libstd questions it's very easy to just read the source

