1637629608
andrewrk!~andrewrk@mail.ziglang.org
LLVM is moving from Bugzilla to GitHub Issues: https://lists.llvm.org/pipermail/llvm-dev/2021-November/153802.html

1637629724
yeti!~username@user/yeti
:(

1637635769
flux_control!~flux@sourcemage/wizard/flux
peterhil_: I don't know of any good ansi color libraries written in pure Zig, but you could link to notcurses which is written in C. There's an example of using notcurses from within Zig here: https://github.com/dundalek/notcurses-zig-example

1637636496
andrewrk!~andrewrk@mail.ziglang.org
ifreund, hope you don't mind that I requested a review from you on #10197

1637637381
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
flux_control: Thank you!

1637637520
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
flux_control: Oooooo! Lispy syntax for Zig! I am sold!

1637637559
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
flux_control: I keep forgetting that it is actually easy to call C as opposed to Python...

1637637640
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
I am building latest zig-bootstrap on FreeBSD 13.0-RELEASE, and it seems to work so far (94% compiled)

1637637729
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Specifically build -j4 x86_64-freebsd-musl baseline

1637639004
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Did not work: https://dpaste.org/JNON (I have the whole build log if needed)

1637640465
andrewrk!~andrewrk@mail.ziglang.org
peterhil_, that looks like Out Of Memory

1637640474
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/6485

1637641590
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
andrewrk: Seems like that. I have 8 GB memory and 2 GB swap. I had quite many Youtube tabs open on Firefox, which was occassionally really unresponsive while compiling.

1637641631
andrewrk!~andrewrk@mail.ziglang.org
peterhil_, the main development efforts right now are on the self-hosted compiler which has much more efficient memory usage 

1637642066
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
andrewrk: Is it just the ziglang/zig on Github?

1637642112
andrewrk!~andrewrk@mail.ziglang.org
are you asking where the self-hosted compiler code is? yes

1637642672
peterhil_!~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi
Ok, good to know. I tried the zig-bootstrap many months earlier, and decided to try it again.

1637645431
andrewrk!~andrewrk@mail.ziglang.org
proposal regarding zig pkg: https://github.com/ziglang/zig/issues/10204

1637681941
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
Hi, I'm reading the source code of zig and find this comment in type.zig.

1637681941
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
```

1637681942
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
// This union takes advantage of the fact that the first page of memory

1637681942
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
// is unmapped, giving us 4096 possible enum tags that have no payload.

1637681943
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
pub const Type = extern union {

1637681943
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
```

1637682025
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
What does this mean?

1637682218
ikskuh!~xq@v43666.php-friends.de
it probably uses the fact that the first 4096 addresses in memory are invalid for *any* object

1637682261
ikskuh!~xq@v43666.php-friends.de
so if you get an object that has such an address, you know that you don't have to dereference, but just use the information from the address itself

1637682446
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
ikskuh Thanks. So the Type union store in this first page of memory?

1637682469
ikskuh!~xq@v43666.php-friends.de
can you link me the line?

1637682473
ikskuh!~xq@v43666.php-friends.de
i can tell you more than

1637682486
ikskuh!~xq@v43666.php-friends.de
and no, you cannot store *anything* in this memory area

1637682512
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
https://github.com/ziglang/zig/blob/master/src/type.zig#L16-L17

1637682519
ikskuh!~xq@v43666.php-friends.de
but together with this information, you know that a pointer smaller than 4096 is definitly invalid

1637682542
ikskuh!~xq@v43666.php-friends.de
ah, es

1637682544
ikskuh!~xq@v43666.php-friends.de
*yes

1637682687
ikskuh!~xq@v43666.php-friends.de
so, imagine you get a element of the type "Type" (our union)

1637682698
ikskuh!~xq@v43666.php-friends.de
this union is either a "Tag" (which is enum(usize) { })

1637682718
ikskuh!~xq@v43666.php-friends.de
or a pointer to some "Payload"

1637682739
ikskuh!~xq@v43666.php-friends.de
now, without virtual memory, every pointer is a valid value (0‚Ä¶ max)

1637682774
ikskuh!~xq@v43666.php-friends.de
but with virtual memory, and the guarantee that each OS doesn't map page 0 (which has address 0) means that we have at least 4096 invalid addresses on that machine

1637682788
ikskuh!~xq@v43666.php-friends.de
(we don't map that page because otherwise a nullpointer access would not fail)

1637682806
ikskuh!~xq@v43666.php-friends.de
so we know that a pointer can only have a value value of (4096‚Ä¶max)

1637682826
ikskuh!~xq@v43666.php-friends.de
which means we can now store *either* a pointer to something, OR a number smaller than 4096

1637682832
ikskuh!~xq@v43666.php-friends.de
without having ambiguities

1637682925
luuk!~luuk@user/luuk
This will be fun to figure out when compiler the zig compiler to wasm :)

1637682936
luuk!~luuk@user/luuk
s/compiler/compiling

1637682954
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
OK. So it means if the value of the Type >= 4096, it's a Playload, otherwise it's a Tag.

1637682982
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
ikskuh Thanks a lot.(y)

1637683029
ikskuh!~xq@v43666.php-friends.de
beta22: exactly!

1637683034
ikskuh!~xq@v43666.php-friends.de
it's a very smart data-driven design

1637683048
ikskuh!~xq@v43666.php-friends.de
as you store information about "what" in the same slot as "where" :D

1637683082
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
Cool!

1637683120
ikskuh!~xq@v43666.php-friends.de
yes, indeed!

1637683129
ikskuh!~xq@v43666.php-friends.de
makes zig go ‚ö°Ô∏è

1637683208
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
BTW, does the stage2 compiler works on Windows, at least for helloworld-like code? I compiled the stage2 compiler, but it gives error when compiling code.

1637683302
ikskuh!~xq@v43666.php-friends.de
stage2 is not finished yet

1637683305
ikskuh!~xq@v43666.php-friends.de
so i have no idea

1637683324
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
I built the stage2 compiler successfully. But seems it's not able to compile even an empty main function.

1637683346
ikskuh!~xq@v43666.php-friends.de
that is likely

1637683358
ifreund!~ifreund@user/ifreund
beta22: you're probably not using the llvm backend then

1637683372
luuk!~luuk@user/luuk
Correct, there's only been done some work on coff. The only hello world that works with the native backend on windows is if you use some assembly.

1637683412
ifreund!~ifreund@user/ifreund
stage2 isn't meant for end users though yet, unless you intend on contributing to stage2 I'd recommend using the zig compiler we currently ship :D

1637683457
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
I built with the enable-llvm flag.

1637683532
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
ifreund Yes. I'd like to do contribution.

1637683550
luuk!~luuk@user/luuk
You'll need to pass -fLLVM to use the llvm backend

1637683579
ifreund!~ifreund@user/ifreund
beta22: you may be interested in this wiki page then :) https://github.com/ziglang/zig/wiki/Contributing-to-Stage-2

1637683593
ifreund!~ifreund@user/ifreund
and yeah, -fLLVM is likely what you're missing

1637683633
beta22!~beta22@2409:8a5c:4c16:3ab0:ad78:66d1:a456:cff7
Ah, yes. I'll try that.

1637694955
ifreund!~ifreund@user/ifreund
andrew's handmade seattle talk on data oriented design is up if anyone missed it: https://media.handmade-seattle.com/practical-data-oriented-design/

1637695218
companion_cube!~simon@user/companion-cube
üëÄ

1637695226
Franciman!~Franciman@mx1.fracta.dev
tusen takk

1637703394
marler8997!~marler899@204.229.3.4
andrewrk, one thing that bothers me is why are we associating "resource cleanup" with invalidation.  What I mean by that is, today if you have a type that has no resource cleanup, then it does no invalidation.  Why is it that when a type has resources that need cleaned do we suddenly feel the need to invalidate it.  If we care about invalidation, why not invalidate all types?

1637703434
andrewrk!~andrewrk@mail.ziglang.org
let's say that the resource cleanup means freeing a pointer

1637703466
andrewrk!~andrewrk@mail.ziglang.org
that leaves a dangling pointer, right? however if we set the dangling pointer to undefined, we gain safety because the pointer is now 0xaaaaaaa instead of UAF

1637703504
marler8997!~marler899@204.229.3.4
sure, but having to cleanup a resource is not intrinsically associated with usage after free right?

1637703550
marler8997!~marler899@204.229.3.4
in other words, you can have "use after free" on something that doesn't require cleanup right?

1637703595
marler8997!~marler899@204.229.3.4
for example, a "borrowed pointer".  A "borrowed pointer" means you have a pointer, but you're not the one to clean it up

1637703623
marler8997!~marler899@204.229.3.4
do you still invalidate that borrowed pointer after you're done using it?

1637703701
marler8997!~marler899@204.229.3.4
I'm sort of thinking out loud here, trying to understand and I'm not sure what the right conclusion is atm

1637703789
ifreund!~ifreund@user/ifreund
setting stuff to undefined after you stop using it is done for the same purpose as assertions

1637703809
marler8997!~marler899@204.229.3.4
agreed

1637703812
ifreund!~ifreund@user/ifreund
it's a guarentee the programmer is giving to the compiler and other programmers

1637703837
ifreund!~ifreund@user/ifreund
but you don't "have" to use assertions

1637703843
ifreund!~ifreund@user/ifreund
it's just good practice to do so

1637703852
marler8997!~marler899@204.229.3.4
here's one thought I'm having, why would we ever invalidate something inside a "defer", where the scope of that memory is in the same block as defer

1637703864
marler8997!~marler899@204.229.3.4
that's just doing unnecessary work.  Once the block exits, that memory is gone anyway

1637703908
ifreund!~ifreund@user/ifreund
I'm sure there's a case where that memory could be accessed by another defer

1637704003
marler8997!~marler899@204.229.3.4
here's a question to ponder on, if we want to invalidate memory after we're done with it, where do we stop?  On the extreme side you could invalidate literally everything, when do you decide that invalidation is worth it?

1637704069
andrewrk!~andrewrk@mail.ziglang.org
what do you mean invalidate literally everything? I do not understand your extreme suggestion

1637704087
marler8997!~marler899@204.229.3.4
the question is, what criteria do we use to determine when we should invalidate memory?

1637704102
marler8997!~marler899@204.229.3.4
for example, we could invalidate all primitive types, like integers

1637704126
marler8997!~marler899@204.229.3.4
var i: u32 = 0;  defer i = undefined; ...

1637704151
ifreund!~ifreund@user/ifreund
it's a fuzzy line, I agree

1637704167
ifreund!~ifreund@user/ifreund
deciding what to assert isn't always obvious

1637704179
marler8997!~marler899@204.229.3.4
another point to think about, if invalidation is like an assert, would it make more sense to only do it in debug mode?

1637704192
ifreund!~ifreund@user/ifreund
some particular cases are fairly clear obvious or not obvious IMO

1637704215
ifreund!~ifreund@user/ifreund
marler8997: there's a reason we have 3 different release build modes..

1637704216
marler8997!~marler899@204.229.3.4
I agree it's a fuzzy line, which is why IMO we should leave it up to the programmer

1637704264
ifreund!~ifreund@user/ifreund
we are the programmers of the std

1637704268
marler8997!~marler899@204.229.3.4
"programmer" meaning "end user here".  Why force them to pay that cost, let them decide

1637704310
ifreund!~ifreund@user/ifreund
I think you're also overblowing the cost of setting a few bytes of memory to 0xaa in debug mode

1637704324
marler8997!~marler899@204.229.3.4
it's non-pessimisation programming :)

1637704325
ifreund!~ifreund@user/ifreund
s/debug/safe build modes/

1637704332
marler8997!~marler899@204.229.3.4
don't give the computer extra work it doesn't need to do

1637704364
ifreund!~ifreund@user/ifreund
catching bugs is more important than performance

1637704376
ifreund!~ifreund@user/ifreund
it doesn't matter how fast something is if it does the wrong thing

1637704395
marler8997!~marler899@204.229.3.4
it's a balance, not a rule

1637704480
marler8997!~marler899@204.229.3.4
You can catch alot more bugs (or just avoid them) by using a GC or an interpreted language :)  Balance

1637704499
ikskuh!~xq@v43666.php-friends.de
ifreund: are you sure about ReleaseSafe setting things to 0xAA ?

1637704527
marler8997!~marler899@204.229.3.4
yeah I recall x = undefined get's compiled out?  not sure though

1637704597
ifreund!~ifreund@user/ifreund
ikskuh: yep

1637704612
marler8997!~marler899@204.229.3.4
in my eyes, my proposal is the best of both worlds.  Do invalidation by default, but let programmers opt-out of it

1637704614
ifreund!~ifreund@user/ifreund
foo = undefined is only a noop in release fast/small

1637704624
ifreund!~ifreund@user/ifreund
just like all other safety checks

1637704635
ifreund!~ifreund@user/ifreund
marler8997: we already let programmers opt out by setting the build mode

1637704649
ifreund!~ifreund@user/ifreund
they can even disable runtime safety for just the single function call if they like

1637704665
ifreund!~ifreund@user/ifreund
I do not see this performance motivated argument as valid

1637704666
marler8997!~marler899@204.229.3.4
fd = -1 wouldn't be affected by the build mode

1637704691
marler8997!~marler899@204.229.3.4
but that's a good question, I wonder how much invalidation is affected by build mode in std?

1637704750
ifreund!~ifreund@user/ifreund
sure, you could argue for an `if (std.debug.runtime_safety) fd = -1;`

1637704935
marler8997!~marler899@204.229.3.4
hmmm, SpexGuy is speaking my language here

1637705076
marler8997!~marler899@204.229.3.4
kinda makes me think that all deinit functions should be doing the equivalent of fd = undefined rather than fd = -1

1637705103
ifreund!~ifreund@user/ifreund
fd = -1 is safer

1637705151
ifreund!~ifreund@user/ifreund
it's guarenteed to be invalid if passed to any syscall

1637705165
marler8997!~marler899@204.229.3.4
slightly safer yes but potentially costing Release mode performance

1637705222
ifreund!~ifreund@user/ifreund
check std.debug.runtime_safety then...

1637705236
marler8997!~marler899@204.229.3.4
oh I like that

1637705246
ifreund!~ifreund@user/ifreund
in safe build modes I would be strongly opposed to using anything other than -1 though

1637705255
marler8997!~marler899@204.229.3.4
yeah, best of both worlds

1637705269
ifreund!~ifreund@user/ifreund
:)

1637705277
marler8997!~marler899@204.229.3.4
maybe this would be a good convention all around, i.e. opt_ptr = if (release) undefined else null

1637705307
ifreund!~ifreund@user/ifreund
I don't think that works for most types

1637705318
marler8997!~marler899@204.229.3.4
opt_ptr meaning "an optional ptr"

1637705355
marler8997!~marler899@204.229.3.4
basically, the convention is if there is a "safer" invalidation value than "undefined", use it in safe modes

1637705422
ifreund!~ifreund@user/ifreund
null isn't safer here though, it's a valid value for a variable of type opt_ptr

1637705425
marler8997!~marler899@204.229.3.4
why doesn't File.close invalidate?

1637705443
ifreund!~ifreund@user/ifreund
the fact that -1 isn't a valid fd is kinda special to POSIX 

1637705449
marler8997!~marler899@204.229.3.4
ifreund fair enough, convention still holds though yes?

1637705474
ifreund!~ifreund@user/ifreund
sure, but I think you'll have a hard time applying it to anything other than POSIX fds :P

1637705514
marler8997!~marler899@204.229.3.4
INVALID_HANDLE_VALUE, INVALID_SOCKET (just 2 off the top of my head)

1637705536
marler8997!~marler899@204.229.3.4
:p

1637705573
ifreund!~ifreund@user/ifreund
ah windows stuff, I'm sure you know more about those than I do :D

1637705602
marler8997!~marler899@204.229.3.4
Windows will always be there when you need to think of some off-color use case :)

1637706285
marler8997!~marler899@204.229.3.4
why doesn't ArrayList invalidate in deinit?

1637706421
ifreund!~ifreund@user/ifreund
probably because nobodies implemented it yet

1637706839
andrewrk!~andrewrk@mail.ziglang.org
setting something to undefined can actually give information to the optimizer in non-safe optimization modes

1637706856
marler8997!~marler899@204.229.3.4
yeah saw that in SpexGuy comment :)

1637706901
andrewrk!~andrewrk@mail.ziglang.org
regarding File, I think it might be changing soon to invalidate

1637706904
andrewrk!~andrewrk@mail.ziglang.org
it's an old struct

1637706921
andrewrk!~andrewrk@mail.ziglang.org
a related situation is that for evented I/O we might want to have it be an intrusive linked list node

1637706966
marler8997!~marler899@204.229.3.4
ifruend found one more case :) https://github.com/ziglang/zig/pull/10209

1637707075
marler8997!~marler899@204.229.3.4
hmm, not having a way to free means that I can't use "const" in some places I wanted to

1637707120
marler8997!~marler899@204.229.3.4
this means that anything you have a type with resources to free, that type needs to be declared mutable

1637707208
marler8997!~marler899@204.229.3.4
for example, I'm pretty sure I use const file alot, won't be able to do that anymore

1637708607
marler8997!~marler899@204.229.3.4
andrewrk, curious if you concur with : https://github.com/ziglang/zig/issues/6322#issuecomment-977229617

1637708659
andrewrk!~andrewrk@mail.ziglang.org
marler8997, yes I do

1637708719
Franciman!~Franciman@mx1.fracta.dev
awesome talk by the author of zig, thanks ifreund 

1637708723
marler8997!~marler899@204.229.3.4
ok, does that mean we are leaning away from making File.close invalidate?

1637708728
Franciman!~Franciman@mx1.fracta.dev
now I want to copy their ideas in my compiler

1637708833
andrewrk!~andrewrk@mail.ziglang.org
marler8997, I think it would be an improvement to make File.close set the state to undefined (and require mutable File structs everywhere)

1637708909
marler8997!~marler899@204.229.3.4
ooo hot take, so why require File to be mutable?

1637709139
marler8997!~marler899@204.229.3.4
or are you just saying that requiring mutable is a consequence of invalidation (not something we want independently)?

1637709589
marler8997!~marler899@204.229.3.4
I'm still unclear about why we are associating invalidation with resource cleanup, this relationship seems arbitrary to me.  There are cases where you may want to invalidate without cleaning resources, and cases where you want to clean resources without invalidating.

1637709670
marler8997!~marler899@204.229.3.4
And obviously we don't want to invalidate everything (i.e. var i = 0; defer i = undefined; ...), so what criteria are we using to determine when invlidation is worth it?

1637709764
andrewrk!~andrewrk@mail.ziglang.org
marler8997, my logic is that the safety is valuable, and mutable File struct is a small cost to pay

1637709790
andrewrk!~andrewrk@mail.ziglang.org
if you close the file, there is a fd there that is a UAF waiting to happen

1637709827
andrewrk!~andrewrk@mail.ziglang.org
if you declare `var i: i32 = 0;` the compiler implicitly inserts `defer i = undefined;` for you

1637709849
andrewrk!~andrewrk@mail.ziglang.org
that's what happens when a variable exits scope

1637709863
marler8997!~marler899@204.229.3.4
oh really? so then why do we need to do it inside deinit as well?

1637709881
andrewrk!~andrewrk@mail.ziglang.org
in case you use the variable before it exits scope

1637709884
marler8997!~marler899@204.229.3.4
ah

1637709893
andrewrk!~andrewrk@mail.ziglang.org
or in case it is heap allocated

1637709906
andrewrk!~andrewrk@mail.ziglang.org
or in a struct field

1637709996
marler8997!~marler899@204.229.3.4
my counter argument to mutable file is "mental load" and readability.  Dealing with a mutable struct takes more load then an immutable one.  How does it behave as a field, parameter, reference, etc, with const it's must simpler

1637710079
marler8997!~marler899@204.229.3.4
Also means that any time you use File as a field, you're containing type can also no longer be const

1637710158
andrewrk!~andrewrk@mail.ziglang.org
that might be something we need regardless for evented I/O

1637710349
marler8997!~marler899@204.229.3.4
I'd be remiss if I didn't point out that having close and deinit be separate solves all the issues :)

1637710398
marler8997!~marler899@204.229.3.4
fn deinit(self: *File) void { self.close(); self.* = undefined }

1637710600
andrewrk!~andrewrk@mail.ziglang.org
ü§î

1637711222
marler8997!~marler899@204.229.3.4
does the compiler insert "defer i = undefined" if i is const?

1637711283
andrewrk!~andrewrk@mail.ziglang.org
it doesn't actually insert it; I'm just describing the rules of the language

1637711297
andrewrk!~andrewrk@mail.ziglang.org
but yes it applies to const too

1637711363
marler8997!~marler899@204.229.3.4
ah problem solved, allow "undefined" invalidation on *const T

1637711897
marler8997!~marler899@204.229.3.4
all those cases you mentioned for denit(), allowing undefined to be assigned to const would allow all those cases to work with const values

