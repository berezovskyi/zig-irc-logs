1631668818
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
even better

1631670539
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/issues/8220#issuecomment-919616316 duff's device in zig ðŸ˜‚

1631674458
noam!~noam@104.232.42.247
that'd be neat...

1631682746
jasom!~aidenn@ip98-185-238-13.sb.sd.cox.net
is there a better option for quitting on an error than "catch std.os.abort()"?

1631683617
andrewrk!~andrewrk@mail.ziglang.org
need more information to advise. what problem are you trying to solve?

1631703188
discipulus!~discipulu@user/discipulus
firendos are ziguanas, right? https://paulespinosa.github.io/zig-langref/explain-zig-test-and-containers-01.html#Nesting-Containers

1631703202
discipulus!~discipulu@user/discipulus
*friendos

1631703709
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
did my message send

1631703822
discipulus!~discipulu@user/discipulus
recv'd "did my message send"

1631704604
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
" i think struct declarations have to preceed fields right"

1631706552
discipulus!~discipulu@user/discipulus
they are order independent

1631706714
nightbreak!~nightbrea@168.5.167.218
Hey everyone. I'm new to Zig and using it on an old Red Hat server. Are there any minimum system requirements to run the binary? (e.g. glibc version, GCC version, etc.)

1631706761
nightbreak!~nightbrea@168.5.167.218
Right now I'm getting an "installation directory not found error"

1631706885
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
discipulus not exactly, declarations are not allowed between fields

1631706924
discipulus!~discipulu@user/discipulus
haze: good catch, thanks.

1631709165
ikskuh!~xq@2a0d:5940:6:163::ad7e
nightbreak: hm, good question

1631709174
ikskuh!~xq@2a0d:5940:6:163::ad7e
the zig from the website only depends on a certain linux kernel

1631709180
ikskuh!~xq@2a0d:5940:6:163::ad7e
how have you installed it?

1631711418
bgiannan!giann@2a01:4f8:141:1272::2
when is it revelant to use `inline` for a function? i instinctively tend to use it for very small functions, but is there better usecase ?

1631711473
ikskuh!~xq@2a0d:5940:6:163::ad7e
bgiannan: typically you don't

1631711480
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you use "inline", you remove the function from the stack trace

1631711517
ikskuh!~xq@2a0d:5940:6:163::ad7e
but imho, you should use "inline" only when you actually *never* want a function call

1631711605
bgiannan!giann@2a01:4f8:141:1272::2
i see

1631714383
marler8997!~marler899@204.229.3.4
ikskuh when you *never* want to call a function?

1631714391
marler8997!~marler899@204.229.3.4
not sure I understand

1631714449
ikskuh!~xq@2a0d:5940:6:163::ad7e
example from microZig:

1631714457
ikskuh!~xq@2a0d:5940:6:163::ad7e
mmio.rmw(register, .{ .bit = 1 });

1631714464
ikskuh!~xq@2a0d:5940:6:163::ad7e
this is semantically a function call in

1631714469
ikskuh!~xq@2a0d:5940:6:163::ad7e
but what it does is this:

1631714474
ikskuh!~xq@2a0d:5940:6:163::ad7e
var tmp = *register;

1631714482
ikskuh!~xq@2a0d:5940:6:163::ad7e
tmp |= 0x0800;

1631714485
ikskuh!~xq@2a0d:5940:6:163::ad7e
*register = tmp;

1631714500
ikskuh!~xq@2a0d:5940:6:163::ad7e
i want to have the guarantee to *never* have a function call for these three instructions

1631714511
marler8997!~marler899@204.229.3.4
oh I see what you're saying

1631714521
ikskuh!~xq@2a0d:5940:6:163::ad7e
a function call would always be harmful 

1631714536
marler8997!~marler899@204.229.3.4
why would it be harmful in this case?

1631714549
ifreund!~ifreund@user/ifreund
another example would be this case in zig-wlroots: https://github.com/swaywm/zig-wlroots/blob/d2df3f71578eb767bced89ae1044a046b7fa22a0/src/types/surface.zig#L152-L168

1631714569
ifreund!~ifreund@user/ifreund
forcing the type-safe generic wrapper to be inline makes this abstraction truely 0 cost at runtime

1631714606
marler8997!~marler899@204.229.3.4
creating type-safe wrappers whose purpose is only type coercion is a use case I've found for inline

1631714653
marler8997!~marler899@204.229.3.4
that looks like what wlroots is doing here

1631714759
ifreund!~ifreund@user/ifreund
yep, you *never* want the forEachSurface() wrapper to be actually emitted as a function in the generated code and be called

1631714779
ifreund!~ifreund@user/ifreund
you just want the compiler to inline that one @ptrCast() and check the types

1631714891
ikskuh!~xq@2a0d:5940:6:163::ad7e
marler8997: function call would be harmful to performance and also in some cases to the instructions that are allowed 

1631714900
ikskuh!~xq@2a0d:5940:6:163::ad7e
example is feeding a PLL of a microcontroller

1631714911
ikskuh!~xq@2a0d:5940:6:163::ad7e
you have to do that in the right order and the right "time"

1631714953
marler8997!~marler899@204.229.3.4
andrewrk, looks like everyone's azure is failing now.  I think this PR that adds a retry loop to delete the file that's failing should fix it: https://github.com/ziglang/zig/pull/9763

1631715029
marler8997!~marler899@204.229.3.4
freakin windows.  You can't just delete an exe after running it, you got a wait a bit for Windows to release it

1631715078
marler8997!~marler899@204.229.3.4
having "foo.exe" followed by "del foo.exe" in a batch script is just a race condition bug, so lame

1631715093
ifreund!~ifreund@user/ifreund
that is pretty bad

1631728831
andrewrk!~andrewrk@mail.ziglang.org
marler8997, let me try updating that exe first to the newest msys

1631728913
andrewrk!~andrewrk@mail.ziglang.org
pushed

1631728936
andrewrk!~andrewrk@mail.ziglang.org
why do we need to delete that exe anyway?

1631728940
andrewrk!~andrewrk@mail.ziglang.org
can't we just leave it?

1631728945
marler8997!~marler899@204.229.3.4
I don't think we need to

1631728975
marler8997!~marler899@204.229.3.4
wonder how big it is?

1631728998
marler8997!~marler899@204.229.3.4
looks like 70 MB

1631729035
andrewrk!~andrewrk@mail.ziglang.org
looks like you added that del line :D

1631729042
marler8997!~marler899@204.229.3.4
what!

1631729078
andrewrk!~andrewrk@mail.ziglang.org
not sure what the goal of 3a2cc5decf5674b2d85c15b7d051c2f3bcf30904 was, do you remember?

1631729133
marler8997!~marler899@204.229.3.4
I believe it was a bug with the msys package metadata that needed to be worked around, at least for the version at the time

1631729158
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: can i plead for a little merging priority regarding #9766 (when the CI is green)?

1631729158
andrewrk!~andrewrk@mail.ziglang.org
the issue is still open

1631729172
marler8997!~marler899@204.229.3.4
we might be able to remove the workaround now (kinda unrelated to removing the del)

1631729177
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, yes

1631729197
marler8997!~marler899@204.229.3.4
any idea why this del would suddenly start failing recently?

1631729235
marler8997!~marler899@204.229.3.4
maybe azure updated it's powershell version or something, and it changed the timing to expose the race condition with del

1631729247
andrewrk!~andrewrk@mail.ziglang.org
ikskuh, merged, I'll keep an eye on it and fix it personally if I see a failure

1631729652
marler8997!~marler899@204.229.3.4
andrewrk, updated PR to omit the del

1631729656
marler8997!~marler899@204.229.3.4
https://github.com/ziglang/zig/pull/9763

1631729954
marler8997!~marler899@204.229.3.4
looks like first "del failure" may have been friday Sep 9th

1631730101
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk <3

1631730363
ikskuh!~xq@2a0d:5940:6:163::ad7e
this should enable a lot of windows C/C++ projects to build now 

1631733379
andrewrk!~andrewrk@mail.ziglang.org
nice!

1631733616
ikskuh!~xq@2a0d:5940:6:163::ad7e
assimp and open dynamics engine should now build with zig :)

1631733631
ikskuh!~xq@2a0d:5940:6:163::ad7e
also minizip for android app bundling

1631736298
andrewrk!~andrewrk@mail.ziglang.org
great

