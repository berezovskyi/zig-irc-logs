1612917983
v0idify
why is there no .write on CreateFlags?

1612918126
v0idify
i wish try was something like `.!` instead

1612918202
g-w1
iirc the reason there is not is that there is

1612918303
v0idify
?

1612918308
v0idify
i mean that .! would act like try

1612918330
v0idify
because it would be more chainable , for example (try file.getPos()) + 1 vs file.getPos().! + 1

1612918345
v0idify
maybe not .!, i don't know

1612919675
g-w1
oh i read your message wrong, sorry

1612924127
v0idify
how do I make .format print raw strings

1612924835
daurnimator
v0idify: what is a raw string?

1612924842
daurnimator
and maybe {s}?

1612926329
pixelherodev
Hahaha, I love this :D

1612926340
pixelherodev
7920 and my tree are converging on each other :)

1612926373
pixelherodev
Not completely, but surprisingly, and much more than I expected

1612928289
v0idify
daurnimator, {s} works, it was printing each byte as a decimal

1612928294
v0idify
i couldn't find {s} in the docs

1612934526
marler8997
aaaaaand, now I'm generating COM

1612934554
marler8997
i.e.

1612936875
marler8997
so where is Zig's instance of lld-link look for .lib files on Windows?

1612937115
marler8997
maybe it's getting generated from libc/mingw?

1612937414
andrewrk
ifreund, I'm done for the day - all the syntax is implemented and what remains is passing all the test cases. there are quite a few. some bigger sub-tasks are multiline strings, line comments (handled by renderToken), and the rest of the TODOs in lastToken()

1612937433
andrewrk
we're at roughly 50% test cases passing right now

1612937486
andrewrk
also looks like we need to port over the array element alignment code

1612940331
daurnimator
marler8997: would you be able to take off prefixes for things like MSHLFLAGS_ ?

1612940355
daurnimator
there was an issue around somewhere for translate-c to do that

1612940414
daurnimator
marler8997: `return self.vtable(self);` -> you're calling a struct?

1612940440
marler8997
woops

1612940475
marler8997
as for prefixes, that's not a bad idea, I could have the enum values without the prefixes, and then aliases outside the enum with the prefixes

1612940503
daurnimator
`vtable: *VTable,` -> should this be `*const VTable` ?

1612940544
marler8997
yeah, thanks for that

1612940577
daurnimator
marler8997: ooo, idea for the "bare" enum values.. a helper function called like: `pub usingnamespace std.meta.enumValues(MSHLFLAGS)`

1612940657
marler8997
yeah that's not a bad idea

1612940669
marler8997
I wonder if there's a way we could do something like that for COM methods

1612940697
marler8997
actually I think there is

1612940712
marler8997
I'll probably need like 10 or 15 minutes

1612940722
marler8997
I already pushed your 2 suggestions btw

1612940724
daurnimator
actually I don't think that `std.meta.enumValues` would work: we'd need @Type to work with decls; right now it only works with fields

1612941142
daurnimator
marler8997: how do the "Async" ones work? you call begin; yield to the main loop; then call end?

1612941169
marler8997
async ones?

1612941206
marler8997
shoot that's the first I've heard of those

1612942948
marler8997
I've updated the COM generation a bit, still not finished but getting closer

1612944965
marler8997
ran into an issue because Zig doesn't support overloading.  Current idea is to prefix all COM methods with the interface they belong to, i.e. instead of "obj.Release()" you write "obj.IUnknown_Release()"

1612945001
marler8997
and if there is a conflict within in the same interface, then I add a numeric suffix, i.e. "obj.Foo(a)" and "obj.Foo1(b)"

1612945203
KoljaKube
Cross-posting from #zig:matrix.org:

1612945282
marler8997
I believe so yes

1612945301
marler8997
gpa probably put it into a bin where it can't resize in place past a certain length

1612945368
KoljaKube
Where do the GPA and the FBA come into play if I'm using c_allocator and testing.allocator?

1612945401
KoljaKube
(this worked in the past btw, I just tried to recompile a library of mine with the latest zig)

1612945406
marler8997
testing.allocator is gpa now

1612945428
KoljaKube
See the comment, c_alloc behaves the same

1612945458
KoljaKube
Using c_allocator without correctly linking libc would fail, and not silently replace the allocator, right?

1612945462
marler8997
probably same story for C allocator

1612945484
marler8997
correct

1612945514
marler8997
in general expect any allocator to fail to expand an allocation in place

1612945703
KoljaKube
I

1612945734
marler8997
it can't

1612945748
marler8997
it's a resize in place

1612945763
marler8997
"in place" is the keyword here

1612945982
KoljaKube
Yeah, I get that, that's why I was wondering how reliably growing areas somewhere on the heap would work

1612946037
marler8997
memory is flat, so it can only grow as far as it takes to get to the next reserved address

1612946093
KoljaKube
That was my understanding, I just wasn't sure if virtual memory mapping would provide a way around that

1612946114
marler8997
virtual memory is still flat

1612946139
KoljaKube
My operating system lectures are so far in the past... :D

1612946147
marler8997
if you allocation is at address 100, and something else is at address 150, you'r maximum size is always 50

1612946165
KoljaKube
OK then, is libc's realloc comparable to Alloc.resize?

1612946176
marler8997
realloc is a superset

1612946182
marler8997
realloc is free to move memory

1612946184
KoljaKube
Or would realloc actually move data?

1612946187
KoljaKube
Ah

1612946229
KoljaKube
So I was wrong to simply map reallocateFn from

1612946254
KoljaKube
And I would need to do some copying myself, or check if std has something for me, I guess

1612946298
marler8997
I actually did the rewrite on std.Allocator, and we put in pretty good explanations of how the new interface works in std/mem/Allocator.zig

1612946534
KoljaKube
I think I only read an earlier version, the comments are very helpful, thanks

1612946561
KoljaKube
So I'll try reallocBytes next

1612946583
marler8997
if you just want raw u8 buffers, and you allow move then that's the one you want

1612946612
KoljaKube
I have to admit, the whole reallocation thing is new to me, I've only ever known simple usages of new/delete and maybe placement-new

1612946646
KoljaKube
Since I'm trying to provide a libc-realloc-like experience to the VM, I think that's what I need

1612946648
marler8997
allocation can be a pretty deep topic

1612946674
KoljaKube
Hehe

1612946766
KoljaKube
In any case, thank you so much! I think I know enough now to implement what I need, even if reallocBytes is not enough by itself (should be, though)

1612946844
marler8997
good luck

1612959155
ifreund
andrewrk: fixed one typo in firstToken() PtrType, implementing pub/extern for functions now

1612959573
ifreund
hrm, looks like the pub/extern functions aren't even supported by the parser yet...

1612959620
zags
am I correct the goal is to make copy ellision so good that I can rely on value semantics (over allocating and passing pointers around), as a decent default?

1612959856
ifreund
if you're talking about result location semantics, yes that will be guarenteed by the language spec

1612959927
zags
lol, turns out andrew has a whole video on the topic

1612960014
zags
another question: does Zig expose anything for source locations? Like

1612960048
ifreund
@src();

1612960061
zags
nice, thanks

1612960091
ifreund
also I lied, the parser does support modifiers on function decls, but there's a bug

1612967791
ifreund
function thing fix, there was no bug just an unimplemented case it turns out

1612967808
ifreund
now to figure out how to deal with the ** token in pointer types cleanly...

1612970480
pixelherodev
andrewrk: why do you store start and end in extra_data instead of using lhs as start and rhs as end?

1612970518
ifreund
pixelherodev: start and end of what?

1612970535
pixelherodev
The AST rework?

1612970539
pixelherodev
Well, th elatest one :P

1612970542
ifreund
which node type

1612970708
pixelherodev
Ah wait, no, I see...

1612970725
ifreund
I assume my question makes sense now? :P

1612970742
pixelherodev
You're encoding a little differently than I am, because your conceptualization is a bit different

1612970753
pixelherodev
For FUnctionCall as an example: lhs is fnexpr, rhs is parameters

1612970784
pixelherodev
For nodes with many children, such as a function call, I use lhs as start and rhs as end, and have a minimum length of one, where the first child is the real "lhs" of the FnCall

1612970803
pixelherodev
Thus saving two entries in my "extra_data" equivalent

1612971292
ifreund
that'd be pretty easy to add after the rest of the work is done

1612971307
ifreund
can probably have a nice abstraction for it cause comptime too

1612971667
pixelherodev
Not necessarily necessary - arguably, your view is more "honest" to the source

1612971817
ifreund
those bytes add up though

1612971871
pixelherodev
8 bytes per index into extra_data, yeah...

1612971876
pixelherodev
Well

1612971883
pixelherodev
4, actually

1612971919
pixelherodev
Since you'd be going from {lhs, index} to {start, end} - thus moving two indices from extra_data into the node, and deleting four bytes - and you'd move that lhs in to extra_data

1612971961
pixelherodev
Still significant, potentially

1612972009
ifreund
I love kakoune, it saves me so much time

1612972854
pixelherodev
vs.?

1612973138
ifreund
idk, writing a marco in vim

1612973190
ifreund
which would take me much more time to get write than simply doing everything at once, interactively

1612973378
pixelherodev
true

1612974359
pixelherodev
ifreund: given that I'm now modifying mine to store the full token list and use indices into it... I think after that PR is merged, the trees will be nearly indistinguishable :P

1612974829
ifreund
andrewrk: currently implementing lastToken for the remaining cases and adding tests by the way

1612975397
ifreund
v0idify: by the way, the reason zig has `try` instead of `.!` is that control flow is reserved for keywords

1612975413
ifreund
i.e. operators never affect control flow

1612977478
v0idify
ifreund, that makes sense!

1612980524
zags
why won't valgrind catch not deallocating from GeneralPurposeAllocator >.<

1612980566
ikskuh
do you use libc?

1612980571
g-w1
the GeneralPurposeAllocator catches it!

1612980588
ikskuh
g-w1: nah, if you never call deinit(), it doesn't ;)

1612980596
ikskuh
valgrind afaik hijacks malloc() and mmap() as C abis

1612980604
ikskuh
not as syscalls

1612980608
ifreund
^

1612980615
g-w1
well call deinit then; yeah you can do if link libc use c allocator else use gpa

1612980636
zags
haha, the point is catching not having called deinit and such

1612980645
ikskuh
why that?

1612980660
ikskuh
if you panic(), memory will be freed anyways

1612980664
ikskuh


1612980669
zags
funny boy

1612980671
ifreund
you only need to deinit() the allocator to catch all the other missing deinits

1612980674
ikskuh
and if not, you can call deinit() in main

1612980680
ikskuh
which will solve

1612980701
zags
it's also not catching arena allocator's missing denits

1612980707
zags
there might be a few arenas

1612980718
ikskuh
it should

1612980725
ikskuh
as long as the arena uses the GPA as a backing allocator

1612980726
zags
it doesn't :(

1612980783
zags
==5425== All heap blocks were freed -- no leaks are possible

1612980805
ikskuh
valgrind cannot interact with zig-libc

1612980808
ikskuh
you

1612980831
ifreund
valgrind can only see stuff you alloc with libc's malloc and free with libc's free

1612980836
ifreund
it

1612980838
ifreund
it does not

1612980841
zags
i see, so valgrind is useless for debugging memory leaks in zig unless i use libc?

1612980847
ifreund
it does not capture mmap syscalls

1612980857
ifreund
(sorry for the overzealous enter key)

1612980865
zags
that's ok

1612980901
ifreund
zags: yes that is right, but you can easily link libc optionally. The self hosted compiler does this for example

1612980901
ikskuh
zags: zig's memory management is purely based on mmap ;)

1612980923
ikskuh
GPA does what valgrind does

1612980923
ikskuh


1612980931
zags
flaming great

1612980934
ifreund
and zig's undefined has integration with valgrind by the way :)

1612980967
ikskuh
GPA in debug mode is also way more useful than valgrind :D

1612981014
g-w1
yeah, you dont have to deinit each object, just the allocator for leaks to be detected

1612981270
zags
leak detection is rad, but is GPA a good allocator in terms of fragmentation and perf?

1612981322
ifreund
no

1612981328
zags
great

1612981330
ifreund
though you should benchmark it

1612981342
ikskuh
zags: it is "there" for now

1612981361
ikskuh
if you want a battle-proven allocator, link libc and use the C allocator

1612981371
ifreund
or use arenas everywhere

1612981416
zags
the typical arena use is... one big or multiple? Say for a server that keeps per-user data and handles requests. One big still, or one per request?

1612981438
zags
if multiple, then there's a chance there's a leak due to missing deinit (bug) and i'd like a tool to catch that

1612981493
ifreund
one per request is definitely the way to go

1612981496
ifreund
you

1612981510
ifreund
you can swap out your backing allocator in test builds and "real" builds of coruse

1612981568
zags
alright

1612981893
v0idify
GPA detects leaks on ReleaseSafe no?

1612981901
v0idify
that's an advantage over valgrind

1612981935
ifreund
why wouldn't valgrind work on ReleaseSafe?

1612981953
v0idify
it would but it would be painfully slow for "prod"

1612981972
v0idify
while you can use ReleaseSafe on "prod" and still know if there's leaks

1612981999
ikskuh
it detects leaks, but doesn't store any information about them

1612982488
ifreund
andrewrk: Tree.lastToken() is complete, plus several other fixes. I'm off for dinner now

1612984081
marler8997
ok, COM is now working, I'm calling COM from Zig! :)

1612984099
marler8997


1612984342
ikskuh
marler8997: very cool!

1612984510
marler8997
andrewrk, as I understand, we are using libc/mingw to create Windows .lib files to link against?  If so, what's our stance on those lib files?  Should they have everything in win32?  If not, then do you have any thoughts on how one might link against a lib that's not in there?

1612984582
marler8997
maybe all I need to do is generate ".def" files as apart of my win32 codegen?  If there's some way to tell Zig to create a .lib file to link against?

1612986126
andrewrk
marler8997, which libs do you need that we're not providing?

1612986141
andrewrk
the set we ship from mingw-w64 is not complete, and it's so far undecided how to choose that set

1612986707
v0idify
if (SUCCEDED(hr)) if (SUCCEDED(hr)) if (SUCCEDED(hr)) if (SUCCEDED(hr)) if (SUCCEDED(hr)) if (SUCCEDED(hr))

1612986781
andrewrk
ifreund, wow that's a lot more passing test cases now, thanks!

1612986850
ifreund
:)

1612986897
ifreund
we're definitely getting there, line comments are holding back the majority of the rest of the test cases I think

1612986959
ifreund
also I doubt we have complete test coverage for first/lastToken(), so there're probably some off-by-one errors lurking there

1612986972
marler8997
andrewrk, I was trying to port a direct2d example, which uses d2d1.lib

1612986989
marler8997
v0idify, yeah it's pretty ugly

1612987001
andrewrk
marler8997, all we need to do is copy the def files from mingw-w64 into the respective place in zig lib/ dir

1612987007
marler8997
I should rewrite the ported example in Zig-style as well

1612987025
marler8997
andrewrk, gotcha, is that scalable though?

1612987039
marler8997
do we want to include everything in win32?

1612987056
andrewrk
yes. I think if we copied all of them, it would be unnecessary bloat, but we can include anything that is even remotely commonly used

1612987077
andrewrk
we could also get away with copying all of them, it would be ok, but I didn't want to do it unless it seemed necessary

1612987100
marler8997
ok, they must not be that big then

1612987113
andrewrk
at the very least, feel free to look at a list of the .def files that mingw-w64 provides and the list that we ship in zig and add any that you deem useful

1612987133
andrewrk
here's the mingw list for your convenience:

1612987142
marler8997
ok will do

1612987154
andrewrk
master branch zig list:

1612987307
andrewrk
right now we ship 776 KB worth of .def files out of 7.4 MiB

1612987371
marler8997
ah

1612987373
andrewrk
compressed, those numbers are 118 KB out of 720 KB. so maybe we could just ship all of them

1612987374
marler8997
not too bad

1612987413
marler8997
if it's only 118KB compressed then why not

1612987430
andrewrk
it would be 720 KB compressed

1612987434
andrewrk
to ship all of them

1612987450
marler8997
ah

1612987495
marler8997
Maybe I can get a list of which ones are currently being referenced in win32metadata

1612987498
andrewrk
which is +6% size increase on a source tarball

1612987530
andrewrk
it's within the realm of possibility, but not something I wanted to do without thinking about it

1612987540
marler8997
right

1612987549
marler8997
I'll get a list of what's being referenced, might help

1612987553
andrewrk
thanks!

1612987637
marler8997


1612987660
marler8997
list generated with: grep -r "extern \"" | awk '{ print $3 }' | sort | uniq

1612987762
marler8997
we won't need the ones in libce....that OS has been dead for a while

1612987808
marler8997
it's interesting that they are split by platform, I wonder if we could remedy that

1612987838
mikdusan
waat no zune support? :P

1612987858
marler8997
lol...well you can always provide your own .lib files

1612987920
marler8997
WinCE is actually one of my specialities...but little good that does me nowadays :)

1612988289
ikskuh
i read WinCE, i'm interested

1612988350
marler8997
the old embedded version of windows, stripped down, but no longer supported

1612988368
ikskuh
i know, we work with WinCE

1612988382
ikskuh
i want to get zig running on our wince devices

1612988387
ikskuh
so i can maybe make a demo or something

1612988389
marler8997
what do you do with CE?

1612988394
marler8997
do we work in the same place?

1612988395
ikskuh
because .NET/c# software rendering is bad

1612988407
ikskuh
marler8997: i don't think so, you're not of the other 7 devs we have :D

1612988422
marler8997
lol

1612988435
marler8997
so what do you guys do with CE?

1612988541
ikskuh
embedded devices

1612988571
marler8997
andrewrk, it looks like there are quite a few .def files that are not being referenced by win32metadata

1612988585
marler8997
so upgrading to just those referenced by win32metadata might be a reasonable step forward for the time being

1612988619
andrewrk
sounds great!

1612988622
ikskuh
marler8997:

1612988634
ikskuh
that's one of the devices we make

1612988645
ikskuh
we're not behncke, though ;)

1612988647
marler8997
oh that's really cool

1612988682
ikskuh
a lot of different devices, actually

1612988685
marler8997
how are you still shipping products with WinCE though?  Microsoft won't license it anymore, I think EOL might be next year?

1612988696
ikskuh
because changing it costs more

1612988725
marler8997
right but I'm surprised Microsoft is letting you license it still

1612988745
marler8997
well, I think they planned to stop allowing it soon

1612988760
ikskuh
we're not even on the latest version

1612988808
ikskuh
but we want to switch over to linux

1612988817
marler8997
yeah that's what we did

1612988849
marler8997
biggest reason we needed to was CE didn't support newer processors/hardware

1612988850
ikskuh
i just wonder if the compact framework will run on mono :D

1612988864
marler8997
lol, you're in the exact same boat as us

1612988874
marler8997
We're using mono

1612988895
ikskuh
sweet, does it workß

1612988898
ikskuh
? Windows CE?

1612988899
marler8997
we thought about coreclr but at the time it wasn't ready, it might be a better choice nowadays

1612988917
marler8997
yup it works, there were some thing we needed to change but we got it done

1612988929
ikskuh
yeah, sure

1612988935
marler8997
like PrivateAccessors for unit tests needed a replacement

1612988936
ikskuh
but saves a lot of work nontheless

1612988966
marler8997
we also stopped using COM, but we weren't using much of it luckily

1612988979
marler8997
actually I might take a contract to work on adding COM support to CoreCLR

1612989103
ikskuh
we don't use any COM i think

1612989147
ikskuh
just .net compact with winforms and a single native library

1612989561
marler8997
andrewrk here's the PR for those updated def files:

1612989651
marler8997
hmmm, my mingw version was 6.0.0, but it looks like there are newer verions, should I be using 8.0.0?

1612989939
marler8997
I answered my own question, when I switched to 8.0.0, now my file copies aren't changing the files that are already there

1612990089
KoljaKube
What's currently the "correctest" (most idiomatic? preferred?) specifier for printing enum values? Nothing, any, or did I miss something?

1612991150
mikdusan
there's @enumToInt() and @tagName()

1612991865
KoljaKube
mikdusan: Sorry, I meant something like `debug.print("{}", .{MyEnum.Value});`

1612991942
ifreund
KoljaKube: well what do  you want? the name of the tag or the integer?

1612991943
KoljaKube
I've been adding specifiers where now required for array types, and was wondering if I should ban empty {} in format strings in my code

1612991977
ifreund
empty {} is used for e.g. structs

1612991979
KoljaKube
ifreund: The name

1612991998
mikdusan
just fyi, afact, there is

1612992012
KoljaKube
To be clear, my line there works, I just want to know if that's how I should do it

1612992039
ifreund
if that line there prints the name in the format you want, there's nothing wrong with it

1612992083
KoljaKube
OK, good

1612992123
KoljaKube
I didn't have time to follow zig development for a few weeks, and wasn't sure if there was some movement for specifying all the things going on

1612992139
KoljaKube
Since the compiler complained about my naked {} for []const u8

1612992167
mikdusan
that's a type-specific error. since you're using enum, it's not related

1612992264
KoljaKube
Yeah, the respective commit read like that, I just wasn't sure if I was missing some bigger picture stuff going on in that regard

1612992324
KoljaKube
Thanks to you both

1612992477
Cadey
where's the support tier list for zig?

1612992480
ifreund
KoljaKube: the issue with arrays/slices is that it is ambiguous whether they should be printed as a list of values or as a string

1612992518
ifreund
Cadey:

1612992521
KoljaKube
ifreund: Makes sense

1612992543
KoljaKube
Man, it was really stupid of me to update zig and the library I'm wrapping at the same time. Now I have no idea where all these new errors are coming from :D

1612992544
ifreund
it's kinda hidden post website redesign tbh...

1612993000
andrewrk
marler8997, thanks for the PR on the def files. Mind checking for me, how much more bytes does this add? just curious

1612993040
marler8997
about 2.1MB

1612993053
andrewrk
ok that sounds fine

1612993125
andrewrk
why does creating files on windows take so long?

1612993334
ifreund
isn't their filesystem shitty?

1612993349
ifreund
decompressing stuff takes ages from what little I've seen

1612993409
KoljaKube
Had a situation where compiling Java in a Linux vm and copying to Windows was faster than compiling in Windows

1612994170
andrewrk
30ms to create a file is really really slow

1612994466
marler8997
on my machine its 20ms to "touch foo", that can definitely add up

1612996065
g-w1
wow, it takes like 12 secs total to unzip zig on my ssd

1612996069
g-w1
linux

1612997373
fengb
$ time touch foo -- real0m0.005s

1612997383
fengb
I think that's fork latency

1612999184
marler8997
daurnimator, I solved the enum prefix issue. for all the values inside the enum, if the value name contains the name of the enum then it is stripped off.  Along with that, you can still access the enum value outside the enum with the fully-qualified name.  Checkout MSHLFLAGS again at

1613000549
andrewrk
1.34 seconds to unzip zig-windows-x86_64-0.7.1.zip on my linux machine

1613000587
andrewrk
I feel like microsoft could have worked on that instead of putting ads in my start menu

1613000722
marler8997
but waiting for you files to unzip gives you more time to look at the ads :)

1613000732
marler8997
Microsoft Stonks!

1613001528
marler8997
how does ziglang.org downloads get updated?

1613001596
marler8997
actually a better version of my question, is there a way to track the progress of the next version to be deployed?

