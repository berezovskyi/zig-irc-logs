1616112022
andrewrk
g-w1, I don't think you missed anything- I went over zir.zig again and also explained the new SourceLocation stuff

1616112727
g-w1
thanks; can't wait to contribute to astgen

1616132802
andrewrk
holy mother of batman fuckballs

1616132805
andrewrk
my code is compiling

1616132970
andrewrk
g-w1, ifreund: I'm taking a break from coding but the branch is now compiling, with lots of stuff commented out and/or @panic("TODO"). it's at least clear how to contribute now I think

1616132977
txdv
i went to sleep 8 hours ago

1616132999
txdv
you are like flash except you are coding

1616133024
txdv
compiling? lets ship it!

1616133032
andrewrk
ha

1616133048
andrewrk
the first test case to repair is: `export fn _start() noreturn {}` - needs astgen for identifiers implemented

1616133092
txdv


1616133158
txdv
did you push the compiling code?

1616133164
andrewrk
yes

1616133190
andrewrk
you have to check out master, build, then switch to this branch, and then use `./zig build`

1616133197
txdv
oh

1616133212
txdv
ok, i'll try :)

1616133254
txdv
You are a machine, almost as fast at writing code as the zig stage2 compiler will be

1616133264
andrewrk
`-Dskip-non-native` will save you a bit of compilation time

1616138907
txdv
hey you were speaking about data oriented design in one of your videos and as a key driving force behind your current rewrite, maybe you have a link to that book?

1616139054
txdv


1616150345
yyp
Does Zig have size_t for C ABI?

1616150676
ifreund
yyp: usize

1616150709
yyp
Are they identical?

1616151482
txdv
where is usize defined? :D

1616151583
ikskuh
it's implicitly defined per platform

1616151591
ikskuh
it's a primitive type, it's defined by the compiler

1616151744
ifreund
yyp: usize == size_t isize == ssize_t

1616151763
yyp
ok, got it

1616152348
yyp
So, all @atomic* functions accept this weird ordering: builtin.AtomicOrder argument. What does it do and what is better to set it to?

1616152557
ifreund
this sepecifies how memory accesses around the atomic operation are to be constrained

1616152606
ifreund
yyp: see these docs:

1616152639
yyp
That's very helpful, thanks!

1616153016
yyp
From what I've understood, .Release is best for writes and .Acquire is best for reads

1616155550
yyp
err

1616155614
yyp
That's best in the sense that it works but not really correct

1616157489
mikdusan
this is master using an llvm built with `--llvm-enable-expensive-checks`:

1616157698
ifreund
mikdusan: I've recently started using an IO abstraction that uses callbacks instead of async and passes error unions with the results to callbacks as arguments, would such a design conflict with #7812?

1616157710
ifreund
I'm still not totally sure I've understood all the proposed changes there

1616157815
mikdusan
ifreund: passing error-unions as params or wrapped in struct means they're not treated as special

1616157821
mikdusan
so you should have no issue

1616157866
mikdusan
error-unions coming from a fn RESULT or being returned as a fn RESULT is what is impacted by #7812

1616157870
ifreund
cool, I feel like I always think your proposal changes more than it actually does

1616158027
mikdusan
I assume that since you have a real error-union, then the 1 impact of #7812 to your code is, where do you get the error-union? is it a result of a fn? Then if you want to "capture" it then it'd be `var got_my_eu = catch doit();` and from there it is pure data as expected... UNLESS you "return got_my_eu" :)

1616158072
ifreund
not the result of a function, i switch on errno and construct the union manually

1616158079
mikdusan
oh neat

1616158404
mikdusan
marler8997: ping

1616159435
yyp
"@atomicLoad atomic ordering must not be Release or AcqRel" - is that a LLVM requirement or Zig does this to prevent incorrect use?

1616159463
ikskuh
it would be an incorrect use

1616159500
ikskuh
i would actually prefer that atomicLoad, atomicStore and atomicRmw would use different enums

1616159590
yyp
Interesting, what would happen if you pass release to atomic functions in Rust...

1616159620
yyp
*atomic write functions

1616159714
ifreund
ikskuh: could pretty easily make wrappers for the builtins that do that

1616159762
ikskuh
yyp: release is valid for write

1616159769
yyp
I know

1616159780
yyp
I still don't quite get why and how those work

1616159971
ikskuh
it's not a trivial thing sadly

1616160005
yyp
idk, maybe the resource I used is garbage

1616160071
ikskuh
what was your source?

1616160072
ifreund
I don't really understand them either, managed to avoid needing to learn the details so far :D

1616160087
yyp
ikskuh:

1616160100
ikskuh


1616160103
ikskuh
this one is pretty great

1616160105
yyp
ifreund: I just use .SeqCst and it works like a charm

1616160120
mikdusan


1616160249
ikskuh
acquire is a hard barrier (no reordering at all) whereas consume is only for dependent values

1616160296
mikdusan


1616166254
marler8997
huh?

1616167294
mikdusan
marler8997: if you have a moment can you eyeball

1616167383
marler8997
yeah I would expect "try EXPR" to unwrap an error the same way regardless of whether it's a value or a function call

1616167390
mikdusan
ok cool

1616167928
TheLemonMan
hello fine folks

1616167982
ikskuh
hello mr TheLemonMan

1616168048
TheLemonMan
mikdusan, have you already tried reducing that LLVM problem?

1616168147
mikdusan
oh that big log? no but it's an oddball mips abi target, with optimization. I just wanted to see if `--llvm-enable-expensive-checks` caught something we've never seen before

1616168182
mikdusan
fyi, `--llvm-enable-expensive-checks` passes on macos `zig build test -Dskip-non-native` (ie. optimization targets are good for x86_64)

1616168560
mikdusan
^ s/--llvm-enable-expensive-checks/-DLLVM_ENABLE_EXPENSIVE_CHECKS=ON/

1616168628
TheLemonMan
poor mips, nobody cares about it :(

1616168639
mikdusan
they have so many abi variants

1616168647
TheLemonMan
even more so when the MIPS corp is now producing risc-v CPUs

1616168683
TheLemonMan
n32,o32,o64 not far from i386,x86_64,x86_64-32 :P

1616170750
danyspin97
how can I pass a []u8 buffer to a c function?

1616170752
danyspin97
i.e. getline

1616170772
danyspin97
I am using `c.getline(@ptrCast([*c][*c]u8, &buf),...

1616170788
g-w1
does getline have a len paramater?

1616170793
g-w1
you can just do buf.ptr

1616170810
danyspin97
getline does have a len

1616170827
g-w1
for the ptr pass buf.ptr and the len pass buf.len :)

1616170924
mikdusan
the fn will realloc if needed

1616170961
danyspin97
g-w1: not good though

1616170969
g-w1
why?

1616170972
danyspin97
expected type '[*c][*c]u8', found '[*]u8'

1616170989
g-w1
its expecting an array of strings

1616171020
danyspin97
right, my bad

1616171026
danyspin97
thanks for the .ptr fix!

1616171029
mipri
no, it's getline: it's expecting a pointer to a string, because getline manages the memory

1616171040
mikdusan
it doesn't want a list. it wants 2 inouts

1616171091
g-w1
ah, not familiar with getline

1616171119
mikdusan
make arg0 a &ptr (where ptr = null). make arg1 &len (where len = 0).

1616171167
mikdusan
getline wants really badly to realloc. so just let it do it from the get go. unless you can guarantee your slice was alloc'd with c.malloc

1616171295
danyspin97
the examples online shows malloc

1616171308
danyspin97
when using malloc

1616171313
danyspin97
so I did the same

1616171322
danyspin97
`c.getline(@ptrCast([*c][*c]u8, &buf.ptr), buf.len, file.handle)`

1616171327
danyspin97
is this correct?

1616171417
danyspin97
when using getline*

1616171462
danyspin97
now I am understanding mikdusan comment about slice being alloced with c.malloc

1616172088
TheLemonMan
the [*c] pointers are an eyesore

1616172236
mikdusan
danyspin97: zig doesn't seem to have getline and I am avoiding the file pointer, but I think as simple as this:

1616172265
TheLemonMan
what the hell is zigbin.io ?

1616172283
mikdusan
crypto from discord made it

1616172302
mikdusan
comments mentioning "lines A-Z" highlight the line. and it has syntax color. so yeah

1616172309
mikdusan
works with curl pasting

1616172314
TheLemonMan
looks spiffy but I hate the syntax highlighting

1616172328
mikdusan
`cat getline.zig | curl -F 'file=@-'

1616172440
mikdusan
now imagine github let use highlight syntax'd blocks

1616172444
mikdusan
s/use/us/

1616172462
mipri
[*c] is "I don't know if this is a single or a multi-item pointer", isn't it? with getline it's known: it's a single-item pointer to a multi-item pointer, because the latter is a string with storage managed (alloc, realloc--but not free) by getline

1616172547
aconbere
Hey, I'd be interested in contributing to the efforts to get a great robust set of http tools for zig. Is there any libraries that the community is gravitating towards? I see a number of attempts but it's hard to get a sense of where my efforts would be best spent.

1616172549
TheLemonMan
I suspect the definition comes from a @cImport

1616172730
g-w1
aconbere: a lot of people use zfetch i think. people are also using iguanatls for tls stuff, but its not complete so probably help would be appreciated there (I think cert validation in particular is incomplete)

1616172845
oats
I'm so thankful zig has different pointer types, conflation of arrays and pointers in C has been a constant pain point for me

1616172919
fengb
Iguana just merged SAN and a fix to ciphers, so it's becoming "complete"

1616172941
fengb
But... not audited or battle hardened so don't trust it with real security yet :P

1616173036
danyspin97
mikdusan: thanks for the code

1616173056
danyspin97
however, I need to have a zig ptr instead of [*c] because I'll call std.mem.split

1616173129
danyspin97
and then a zig ptr cannot be null

1616173152
TheLemonMan
but an optional one can...

1616173196
mikdusan


1616173209
mikdusan
zig... does... it all :)

1616173459
mikdusan
danyspin97: one more; this gives you a slice that should work with mem.split.

1616173500
mikdusan
wonder why you're using getline tho

1616173509
danyspin97
mikdusan: I was about to ask!

1616173605
danyspin97
is there any better way in pure zig?

1616173644
TheLemonMan
that's unsafe, you're passing garbage to getline and, by consequence, to realloc

1616173657
mikdusan
oh

1616173665
g-w1
std.io.getStdIn().reader().readUntilDelimiterAlloc()

1616173666
mikdusan
yeah TheLemonMan caught my lazy

1616173674
oats
mikdusan, what g-w1 said

1616173688
danyspin97
I am not reading from stdin though

1616173692
danyspin97
i am reading from a file

1616173695
g-w1
it works with any reader

1616173699
TheLemonMan
using the C stdlib is

1616173699
danyspin97
should I create a reader

1616173701
danyspin97
I see

1616173705
g-w1
file.reader().whatever

1616173710
danyspin97
oh, awesome

1616173711
oats
TheLemonMan, but libedit is nice ;_;

1616173720
g-w1
std.io.getStdIn() returns a File

1616173738
oats
g-w1, and Files have a .reader() method

1616173739
TheLemonMan
oats, that's not part of libc (right?)

1616173742
yyp
oats: just implement libedit in Zig :)

1616173751
oats
TheLemonMan, no, but it still uses libc

1616173767
mikdusan
right, where is std.edit :)

1616173789
oats
yyp, look, wheel improvisation is fun, but I don't wanna reinvent all the wheels I need to use

1616173804
yyp
mikdusan, maybe not in the standard library

1616173856
TheLemonMan
oats, what I wanted to say is that the stdlib is quite comprehensive

1616173858
yyp
oats: that was a joke, nobody prevents you from using libedit through C

1616173873
oats
I know :P

1616173891
mikdusan
yeah danyspin97 in case it wasn't clear don't use my slice example. bad.

1616173921
oats
libedit's got quite a few features

1616173932
oats
I suspect overall it'd be a bit much to have all of them in the stdlib

1616173960
danyspin97
mikdusan: yea, I'll use the reader, thanks everyone for the suggestions :)

1616174062
oats
readers++

1616177858
g-w1
andrewrk: I do not know if you saw my pr, but I think it is needed to build zig from scratch with zir-memory-layout since the llvm backend was not updated. I am now working on astgen identifier

1616179260
g-w1
its pretty satisfying

1616179368
companion_cube


1616179687
fengb
Oh he finally announced it

1616179706
yyp
fengb: Not really

1616179735
fengb


1616179748
fengb
He's been fake announcing it for months

1616179751
yyp
Wait what

1616179763
g-w1
early 2021 wow

1616179812
yyp
Meanwhile I'm writing about concurrency in Zig...

1616179837
mikdusan
> Zig takes about 30 minutes to compile and run its test suite

1616179841
mikdusan
zig has more tests :)

1616179852
mikdusan
and well zig[0] takes about 15 seconds to compile

1616179878
yyp
idk, it took at least 20 minutes for me.. and still failed

1616179902
mikdusan
and to slag on zig compile times during transition to self hosting is sad.

1616179966
fengb
I'm curious what he'll do with concurrency

1616179987
fengb
Cause I think Drew's mentioned that he likes how C handles it

1616179999
yyp
For the sake of joke I guess, I tested not-so-my-own programming language. Clean build + tests runs in 17 seconds given that it's written in Rust :)

1616180035
yyp
fengb: I don't think he will even implement it

1616180148
companion_cube
fengb: I don't think there'll be threads

1616180155
companion_cube
probably just callbacks?

1616180187
yyp
Use multiple processes :)

1616180202
yyp


1616180225
companion_cube
yep

1616180231
companion_cube
oh well

1616180349
aconbere
:q

1616180356
aconbere
dammit

1616180368
fengb
Ah right

1616180376
fengb
Handle concurrency by not handling it

1616180405
mikdusan
punt

1616180409
yyp
You have a thread::spawn function but it will segfault once used

1616180456
companion_cube
enjoy your epoll with callbacks in a language without closures

1616180467
mikdusan
me searches my history for that hidden link

1616180471
mikdusan
to that unannounced thing

1616180509
companion_cube


1616180521
mikdusan
runes. gimme runes

1616180533
yyp
runes? go? wut?

1616180550
yyp
nevermind

1616180567
mikdusan
btr has runes

1616180571
yyp
Each time I hear 'rune' I think of Golang's rune type (Unicode char)

1616180686
v0idify
how do i insert a breakpoint by line number on gdb?

1616180735
yyp
v0idify: do you have debug symbols?

1616180846
v0idify
yyp, yes

1616180867
yyp
break filename:linenumber

1616180909
v0idify
oh

1616181121
mikdusan
unspecified global init order. what could go wrong?

1616181417
mikdusan
> use 8-column-wide tab characters for indentation

1616181704
jcmdln
As god intended

1616181711
mikdusan
pffft

1616181727
companion_cube
use 3 spaces or gtfo

1616181739
jcmdln
yikes

1616181753
mikdusan
for your punished you are banned to 80x24 terminal with 8-space tabs

1616181765
mikdusan
wow my broken words

1616181871
jcmdln
ain't even mad

1616182201
companion_cube
good luck with an expression based language and 8-column tabs, lol

1616182246
fengb
1 column tabs, discuss

1616182267
mikdusan
from zero to zig0: 8.43 seconds. (ok I repeated it to cache it). and I don't have anything fancy. 6 core 3 ghz.

1616182315
jcmdln
I use emacs and have a nearly 2k line configuration file (with newly added zls support). I have an extremely dulled sense of pain

1616182412
jcmdln
joking aside, I prefer 4-spaces within 80 columns in most languages

1616182538
companion_cube
I'm ok with 2 or 4 spaces, depending

1616182583
g-w1
andrewrk: you have 3 new pull requests waiting for you :)

1616182737
mikdusan
i give you: bizarro tabs:

1616182979
dutchie
didn't know it was possible to be worse than gnu style but there it is

1616183021
mikdusan
hehe

1616183085
mipri
what a weird pastebin

1616183096
noam
First line of generated codefrom zyg :D

1616183110
noam
`start2_1: movz $0, r0` :D

1616183115
mipri
look at it with developer tools open. it sends one paste, then loads all the JS, then replaces the paste with a completely different one -- the intended one, apparently.

1616183858
andrewrk
good morning

1616183869
Nypsie
o/

1616183971
noam
Morning!

1616184004
g-w1
good morning!

1616185619
andrewrk
I wonder how effective a non-exhaustive enum will work as a "distinct type" for an int

1616185721
g-w1
andrewrk for the common integer types those are covered in simple_types so we don't need them again

1616186168
andrewrk
ah nice

1616186436
fengb
It's okay. You can't math with it so it's only really good for stuff like DB ID where mathing makes no sense

1616186575
andrewrk
hmm one problem is that I want to be able to coerce, or at least explicitly cast, a []u32 to a []Distinct, and vice versa

1616186603
andrewrk
that might be a strong argument for #1595

1616186620
andrewrk
you can't really do that in userland

1616186678
fengb
`@ptrCast([*]Distinct, u32_array.ptr)[0..u32_array.len]` ?

1616186683
ikskuh
andrewrk: i use enum(u32) { _ } quite often already

1616186692
ikskuh
as long as those are IDs and not arithmetic types

1616186696
ikskuh
it's super-convenient

1616186727
fengb
I adopted `struct { ptr: u32 }` in wazm because I needed to do pointer math

1616186743
ikskuh
(although i'd love to have distinct arithmetic types as well)

1616186972
andrewrk
fengb, the ptr cast will work but it's invoking more unsafety than it needs to

1616186992
andrewrk
if it were a distinct cast it could emit a compile error if you tried to convert to something that didn't have the same memory representation for example

1616187063
ikskuh
andrewrk: i think fengb is referring to a offset into a buffer and not an actual pointer (from @ptrCast)

1616187090
andrewrk
consider though, that ptr cast would allow a conversion from distinct types which had mismatched ABI sizes

1616187097
andrewrk
a distinct cast could still emit an error for such case

1616187148
andrewrk
distinct(u32) vs distinct(i64) you don't want to accidentally ptrcast slices of these to the other

1616187189
fengb
Yeah it's a "pointer" in wasm, but represented in the host as an offset

1616187227
fengb
Oh he meant my terrible ptrCast hack. Yeah it's bad lol

1616187251
fengb
But we can add some safety checks in a std.meta function

1616187360
andrewrk
std.meta, more like std dot "meh"

1616187400
ikskuh
meh-tax-ah!

1616187521
andrewrk


1616187785
g-w1
andrewrk: im unsure what to put for src for rvalue?

1616187793
g-w1
or should the src field be deleted?

1616187814
ikskuh
andrewrk: looks like you need one or the other enumToInt :D

1616187873
andrewrk
g-w1, rvalue wants: src_node: ast.Node.Index

1616187890
andrewrk
token_starts arrays have byte offsets

1616187926
g-w1
so its just main_tokens[node]?

1616187965
andrewrk
it wants a node index, not a token index

1616187971
andrewrk
it's just node :)

1616187974
g-w1
oh nice

1616187981
andrewrk
sorry for the lack of type safety

1616187993
andrewrk
turns out with Data Oriented Design, everything ends up being u32s

1616188007
g-w1
oh hmm, my zig fmt is somehow borked, it wasn't a formatting change. nice

1616188266
noam
andrewrk: `const NodeIndex = u32;`?

1616188278
noam
Would `NodeIndex = @as(u32, 0)` still work?

1616188283
noam
If so, can we change that? :P

1616188313
yyp
NodeIndex is a const, why would that work?

1616188327
g-w1
reject types, return to chump

1616188337
noam
lol oops

1616188349
noam
would `var foo: NodeIndex = @as(u32, 0)`

1616188353
noam
sorry, truncated /s

1616188372
g-w1
it does work, that is my problem

1616188389
noam
Even with explicitly named types?

1616188399
g-w1
yes, see

1616188421
noam
Special rule: if two types are aliased to the same primitive type, they should require an explicit @intCast ?

1616188463
noam
Or, `const foo = <integer type>` creates a non-exhaustive enum instead of an alias?

1616188480
noam
There's a few relatively simple solutions I can think of

1616188668
spacelove
Hi all. I'm new to programming in general, and I've been doing little projects in python. I'm trying to use Zig to do some operations on strings, basically, reproducing a working program I already have in python. But it's challenging to find the documentation. Where can I find better info on how to work with strings? At the risk of betraying my

1616188669
spacelove
lack of understanding of things, I'd like to just try to see if two strings differ by one letter. I'm not asking for you to solve it, just to point me in the direction of where to find that information.

1616188721
noam
ziglang.org/documentation/master/std ?

1616188722
spacelove
In python it would be:

1616188723
spacelove
def check_diff(word_a,word_b):

1616188723
spacelove
# Do two different words differ by a single letter?

1616188724
spacelove
delta = sum([la == lb for la, lb in zip(word_a,word_b)])

1616188724
spacelove
return delta == len(word_a) - 1

1616188734
noam
please don't paste here directly, use a pastebin of some sort

1616188744
andrewrk
welcome, spacelove!

1616188744
spacelove
Ok, sorry.

1616188745
noam
(general IRC ettiquette to avoid spam)

1616188751
spacelove
Word. Makes sense.

1616188755
g-w1
you could iterate over the strings and compare the letters at one index. if they are different do something else. see this for loops and stuff

1616188768
spacelove
andrewrk I was inspired by one of your talks, that's why I'm here. You seem like a sharp guy.

1616188800
spacelove
Thanks dudes, reading now.

1616188806
aconbere
spacelove: I'm old at programming but have also been learning zig. For /most/ of my questions about what functions do what where and signatures, I just have to read the source.

1616188819
aconbere
Luckily the zig source is in zig, totally accessible, and super readable

1616188823
noam
pseudocode could  be something like `if size is different return false , otherwise set difference to zero, loop over characters, if different increment difference, return difference == 1`

1616188832
aconbere
(but I recognize that it might be daunting for a beginner)

1616188861
spacelove
I think, coming from a non-C background, a lot of knowledge is taken for granted. If I weren't psychotically motivated to learn new things... I wouldn't even be trying.

1616188864
noam
spacelove: for something  like that, you can probably just figure out a solution on pen and paper by writing down what you want to check, writing pseudocode, testing it (still on paper), then writing actual code

1616188870
andrewrk
spacelove, maybe start here?

1616188880
noam
I often have a notebook or three next to me while at my computer

1616188906
spacelove
@noam same. andrewrk I think that's what I was looking for, thanks. I gotta get the basics down.

1616188926
aconbere
actually, while I'm saying it, what's the current state of work on the documentation?

1616188937
aconbere
I'd be happy to send PRs as I encounter undocumented functions

1616188957
g-w1
most of the functions are documented, but the documenter needs to be rewritten

1616189022
aconbere
g-w1: most might be /technically/ accurate, but I run into a bunch that have no documentation when I'm digging around the std library :)

1616189041
g-w1
ah, then I guess docs might be needed!

1616189055
aconbere
I guess in either case my question stands just... happy to help improve the state of documentation but I haven't seen much in the way of a guide to contributions in that regards

1616189104
aconbere
Maybe the question is then about ordering the priorities?

1616189120
g-w1
i think adding doc comments would do that. stage2 probably needs a little more work before auto-generated docs will be able to be made with it

1616189123
aconbere
Fixing the documenter vs. adding documentation that might need to be rewritten

1616189131
aconbere
kk

1616189262
g-w1
andrewrk: I think I updated all 3 prs

1616189331
aconbere
g-w1: I think there are also three classes of documentation to cover, and the zig docs often are missing at least one

1616189366
andrewrk
g-w1, thanks! while you did that I tried to add type safety to our u32s but I think I might push for a language feature in order to do this

1616189377
aconbere
you have "what are my inputs and outputs" usually covered by types, a terse description of operation (this is the most common documentation reference I've found in the std line), and then there's the more high level documentation on "what is going on here, how should you think about it, what mental model is useful"

1616189385
aconbere
and the latter is rarely pressent

1616189420
aconbere
so take hash_map

1616189429
andrewrk
spacelove, there is also

1616189471
aconbere
it's hardly needed but `get` has not documentation:

1616189492
g-w1
yeah I think a language feature would be nice

1616189527
aconbere
I'm new and dumb so I spent some trying to figure out what the ownership model for Hashmap was (in retrospect obvious to the design of zig is that the caller owns the memory)

1616189552
aconbere
but, it's hard to know from the call signatures, especially since hashmap owns an allocator

1616189563
aconbere
so i think getting specific about expectations of generic types

1616189568
aconbere
examples of useage etc

1616189582
aconbere
but I also know that being REALLY consistent is important

1616189583
aconbere
ANYWAY

1616189584
aconbere
haha

1616189590
g-w1
I actually think that this branch will

1616189631
andrewrk
g-w1, that decl field should be non-optional right?

1616189656
andrewrk
there is never a case when we are generating LLVM code and it's not for a Decl

1616189662
g-w1
no, since on create there is no decl

1616189672
g-w1
I had that first

1616189686
andrewrk
ah but it's not really ever supposed to be null

1616189701
andrewrk
this would be more clear if those fields that should not be mutated were extracted to a separate type

1616189709
g-w1
yeah, it is a workaround; Firefox317 said he is extracting it to another type

1616189725
andrewrk
my only concern is that the person extracting it will keep it optional

1616189747
andrewrk
note the other fields nearby which use undefined

1616189759
g-w1
oh, will that work?

1616189768
andrewrk
what do you mean?

1616189780
g-w1
I guess undefined will work since the optional is never used

1616189813
g-w1
ill switch it

1616189820
andrewrk
initializing a struct field to undefined is a pretty strong code smell

1616189840
g-w1
what do you think?

1616189841
andrewrk
and it's correct to be smelly in this case, since those fields should be extracted to a per-function struct

1616189865
andrewrk
make it stink real bad so firefox gets more motivated to fix it :D

1616189866
g-w1
ah :)

1616190038
g-w1
added an extra TODO to make it smell even more ;)

1616190088
andrewrk
perfect!

1616190472
jcmdln
I just read over (ie skimmed) #943 regarding the package manager, and I have to ask... does Zig need a package manager? From some suggestions people made in this issue to look at npm, yarn, dart, clojure, go, etc... I don't think any of these package managers made a significant case against git submodules

1616190514
jcmdln
I was into Node.js a few years ago. NPM/Yarn should be demonized, no lionized.

1616190521
companion_cube
git submodules are a royal pain

1616190521
jcmdln
s/no/not/

1616190542
andrewrk
git submodules are a non-starter. you have to put extra info in your readme just to get contributors to check out all of your source code instead of only some of it

1616190557
companion_cube
yeah, and github releases won't include the submodules

1616190559
andrewrk
that is right out. I won't even consider doing that

1616190620
andrewrk
nice work g-w1!

1616190622
jcmdln
I think I didn't use the right wording. I mean npm/yarn and the examples are worse than git submodules

1616190630
andrewrk
do we compile `export fn _start() noreturn {}` yet? xD

1616190647
g-w1
maybe??

1616190667
andrewrk
jcmdln, don't you want to be able to have dependencies on other libraries?

1616190682
andrewrk
one of the main selling points of zig is how reusable zig code is

1616190704
jcmdln
I'm not arguing against having a package manager, or in favor of git submodules

1616190736
noam
First full codegen from zyg :D

1616190753
jcmdln
I'm saying npm and yarn are terrible :)

1616190775
andrewrk
noam, you're generating asm source? what's your plan for getting that into machine code?

1616190783
noam
I have an assembler

1616190803
andrewrk
as part of the zyg project?

1616190807
companion_cube
jcmdln: cargo is pretty ok imho

1616190811
noam
andrewrk: effectively, yes

1616190817
noam
It's not originally part of it, but I'm incorporating it

1616190825
andrewrk
neat

1616190830
apotheon
jcmdln: To be fair, I think yarn's purpose was to make one thing about npm better.

1616190831
noam
and retargeting it :P

1616190835
noam
it's originally for the z80 XD

1616190836
jcmdln
companion_cube: note that I didn't complain about cargo, I think that's a decent example

1616190852
noam
and I'm rewriting half of it to simplify / optimize / bugfix :P

1616190854
andrewrk
g-w1, we should probably try to repair zir printing asap

1616190888
andrewrk
I'll start on that now

1616190913
g-w1
ok

1616195023
spacelove
How do I pass strings as function arguments?

1616195045
spacelove
I'm getting: ```./word_chains.zig:7:31: error: expected type '[]u8', found '*const [5:0]u8'```

1616195051
ryan_greenblatt
[]const u8

1616195086
spacelove
I'm getting: ```./word_chains.zig:7:31: error: expected type '[]u8', found '*const [5:0]u8'```

1616195094
spacelove
Sorry -- accidentally hit "up"

1616195232
spacelove
I get an invalid token error: fn distance(start: []const u8, end: const[] u8)...

1616195263
ryan_greenblatt
[]const u8 not const[] u8

1616195273
spacelove
Oh shucks.

1616195339
spacelove
Thanks, you are a genius.

1616195714
noam
spacelove: this isn't C ;)

1616195723
noam
(C lets you put const on either side in that scenario lol)

1616195740
spacelove
Zig is blowing my mind coming from python.

1616195768
spacelove
It's so... structured, and simple. I can't make everything magically work. I feel like it's putting wrinkles in my brain.

1616195787
spacelove
Turning my brain into filo pastry.

1616197354
spacelove
I see in the docs how to initialize a 2d array with a specific set of values, and a number of ways for how to programmatically initialize a 1d array. But how does one initialize a 2d array full of zeros? I tried [_][_]u8 {{0} ** 5}**5 and combinations of different braces and whatnot but it's not obvious what to do.

1616197468
noam
hmm... I'm not sure if ** is a valid operation on arrays?

1616197476
noam
Well, no, that's stupid, it has to be

1616197492
noam
Not sure why that wouldn't work, sorry

1616197753
spacelove
Error msg:

1616197770
ryan_greenblatt
const x_dim = 10;

1616197770
ryan_greenblatt
const y_dim = 10;

1616197771
ryan_greenblatt
const arr: [y_dim][x_dim]u8 = .{.{0}

1616197777
ryan_greenblatt
Seems to work

1616197820
ryan_greenblatt
You need ".{" as opposed to "{" for struct/array literals

1616197824
Gliptic
spacelove: I assume start.len and end.len are not comptime, that's never gonna work

1616197840
spacelove
I marked them as comptime.

1616197865
spacelove
While only kinda/sorta knowing what that means.

1616197889
Gliptic
ok, maybe it'll work then, but it's hard to tell when you're just posting a single line

1616197921
ryan_greenblatt
I would recommend reading the docs

1616197937
ryan_greenblatt
It would answer most of these questions faster.

1616197954
ryan_greenblatt
See

1616197956
ryan_greenblatt
for instance

1616197963
spacelove
Yea, that's what I had open actually.

1616197979
spacelove
That's what I was working from.

1616197995
ryan_greenblatt
Cool, just making sure you were aware.

1616198006
ryan_greenblatt
No issue with asking for help of course.

1616198124
spacelove
Yea I'm try not to make this my personal therapy session lmao

1616198128
spacelove
trying*

1616198330
ryan_greenblatt
In theory, what is supposed to be going on with UEFI with respect to debug symbols? currently the code makes no sense (uses pdb `ModuleDebugInfo` type while also trying to use `lookupModuleDl` in `getModuleForAddress`)

