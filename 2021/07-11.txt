1625961610
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice!

1625961759
andrewrk!~andrewrk@mail.ziglang.org
and then after that, stage2 goes into single-threaded mode for semantic analysis 

1625961780
companion_cube!~simon@user/companion-cube
heh andrewrk, if you run tracy as root you get a lot more info btw

1625961795
companion_cube!~simon@user/companion-cube
like, what's scheduled, what are cores doing, etc.

1625962134
andrewrk!~andrewrk@mail.ziglang.org
yeah I'm still learning about all the features, there is so much

1625962370
xackus_!~xackus@7-131.w.knc.pl
andrewrk I am watching your new vod and this may be interesting to you: https://www.anandtech.com/show/16214/amd-zen-3-ryzen-deep-dive-review-5950x-5900x-5800x-and-5700x-tested/5

1625962381
xackus_!~xackus@7-131.w.knc.pl
shows a graph of memory latency

1625962386
andrewrk!~andrewrk@mail.ziglang.org
ooh nice

1625962405
xackus_!~xackus@7-131.w.knc.pl
you can switch to intel at the bottom of the graph

1625962437
xackus_!~xackus@7-131.w.knc.pl
also shows prefetch working great with linear access

1625962496
xackus_!~xackus@7-131.w.knc.pl
so it's more like a 100x maximum difference than a 1000x, at least on a single socket system

1625962521
andrewrk!~andrewrk@mail.ziglang.org
noted

1625962599
xackus_!~xackus@7-131.w.knc.pl
so even more reason to layout your memory nicely, so that prefetch can go brrr

1625963556
andrewrk!~andrewrk@mail.ziglang.org
brrr

1625963580
xackus_!~xackus@7-131.w.knc.pl
it's amazing how much engineering goes into making sure cpus stall waiting for memory as little as possible

1625963606
xackus_!~xackus@7-131.w.knc.pl
out of order and speculative execution, SMT (hyperthreads)

1625963738
xackus_!~xackus@7-131.w.knc.pl
and of course multiple levels of cache and prefetch

1625963761
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thread 17939 panic: Attempted to compile for architecture that was disabled by build configuration

1625963763
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hahaha

1625963774
xackus_!~xackus@7-131.w.knc.pl
there are also caches for microops and virtual address translation

1625963778
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ACTION turns off skip-non-native

1625963838
xackus_!~xackus@7-131.w.knc.pl
register renaming and probably other stuff I don't know about

1625964219
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
genCall in codegen is a MxN monster. I think it can be simplified a lot.

1625964244
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i'll look into this

1625964749
andrewrk!~andrewrk@mail.ziglang.org
keep in mind if you touch any AIR stuff you will likely have conflicts with  #9353

1625964780
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1625967309
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
I find myself now getting into Zig as the only credible alternative to C, since it is the only that treats allocation failures instead of saying "well, we have enough memory these days".  I'm already enjoying it

1625968476
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://github.com/ziglang/zig/pull/9354 worked first try!

1625983361
andrewrk!~andrewrk@mail.ziglang.org
welcome euandreh and happy hacking

1625983369
andrewrk!~andrewrk@mail.ziglang.org
very cool g-w1 

1626009469
dutchie!~dutchie@user/dutchie
https://0x0.st/-Oeo.zig is there a way to make this work, or am i missing something?

1626009521
dutchie!~dutchie@user/dutchie
i get the same error if i change the return type on makeFn to `fn([]const u8, i32) void`

1626009808
ifreund!~ifreund@user/ifreund
dutchie: pretty sure that should work and you've found a stage1 compiler bug :/

1626009828
dutchie!~dutchie@user/dutchie
ah wonderful

1626009831
dutchie!~dutchie@user/dutchie
i'll test with a master build then

1626009910
dutchie!~dutchie@user/dutchie
same error with 0.9.0-dev.450+aa2a31612

1626010425
luuk!~luuk@user/luuk
The error is probably caused by passing a tuple instead of an i32 to your function

1626010478
dutchie!~dutchie@user/dutchie
ah oops, i left that in when constructing a minimal repro

1626010488
dutchie!~dutchie@user/dutchie
it still fails when i use an i32

1626010541
dutchie!~dutchie@user/dutchie
(well, a comptime_int i guess, but)

1626010602
dutchie!~dutchie@user/dutchie
aha, https://github.com/ziglang/zig/issues/4984 looks like what i'm hitting

1626010607
luuk!~luuk@user/luuk
Definitely a bug then. Perhaps it doesn't like having `comptime` in the fn pointer

1626010624
luuk!~luuk@user/luuk
Aaah

1626010728
dutchie!~dutchie@user/dutchie
luckily i don't really need it to be comptime, it'd just be nice to get better optimisation

1626022128
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
Is is a good practice to ".setTarget" and ".setBuildMode" for tests (created with ".addTest")?

1626022150
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
I mean, some people may want to compile their tests with different Release* settings, but target settings?

1626022171
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
Technically it may be possible, but it doesn't sound that useful.

1626024542
ifreund!~ifreund@user/ifreund
euandreh: running tests in qemu or wine may be very useful

1626030610
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
ifreund: ack, that makes sense

1626030894
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
What is the difference between C and SysV calling conventions?  Up until know I though them to be the same.

1626033417
ifreund!~ifreund@user/ifreund
euandreh: on linux they are, I think windows and UEFI use a different ABI though

1626033434
ifreund!~ifreund@user/ifreund
see the explanation in the PR: https://github.com/ziglang/zig/pull/8472

1626033486
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
ty for the link

1626033512
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
So if I want to use a library to be usable everywhere, SysV is restrictec to UNIX, but C is universal?

1626033710
ifreund!~ifreund@user/ifreund
Yeah, you want to use the C calling convention unless you are doing something special and non-portable

1626033915
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
ty for confirming :)

1626040769
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
hi, i tried to copy a compile binary to an other pc, compiled with 0.8.0, same arch (x86_64), same OS, it crash

1626040786
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
segfault in start, 

1626040848
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
https://pastebin.com/BFycgBr3

1626040874
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
binary works fine on the compiling host

1626041068
ifreund!~ifreund@user/ifreund
frett27: did you pass -mcpu=baseline?

1626041098
miniluv!~user@24.89.62.103
frett27: Same architecture, but different CPUs? Your program may be calling a CPU instruction that is available on one CPU, but not the other. I can't run tensorflow on my laptop (2012 vintage) because the CPU doesn't have the latest AVX instructions.

1626041149
miniluv!~user@24.89.62.103
frett27: I mention this as an example, obviously your situation doesn't have anything to do with tensorflow.

1626041207
ifreund!~ifreund@user/ifreund
frett27: that's a SIGILL not a SIGSEV, -mcpu=baseline will almost certianly fix it

1626041240
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
ok, let me check, 

1626041282
ifreund!~ifreund@user/ifreund
`-target x86_64-native-native` should also work

1626041318
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
i used the zig build -Dcpu=x86_64 

1626041384
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
i used this and did not work : zig build -Drelease-safe=true -Dcpu=x86_64

1626041474
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
zig build -Drelease-safe=true -Dcpu=baseline

1626041483
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
did not work also

1626041542
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
perhaps the cpu is not passed properly in the build.zig

1626041577
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
  const target = b.standardTargetOptions(.{});

1626041578
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
    exe.setTarget(target);

1626041584
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
is that correct ?

1626041653
ifreund!~ifreund@user/ifreund
you can confirm that -mcpu is getting passed to the zig invocation by passing --verbose to zig build

1626041720
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
oh .. let me check

1626041805
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
@ifreund thank's for pointing this it seems not passed : https://pastebin.com/ByY34UMy

1626041833
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
i was following the https://ziglearn.org/chapter-3/

1626043822
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
@ifreund, the -mcpu adding to the command line works for me, thank's

1626043867
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
with baseline, but i'll have to look how to pass it from zig build, when specifying the cpu, this is not added

1626043908
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
and using target, cause some cImport issues stdlib, or leveldb/c.h, whereas there are in the system path

1626044400
ifreund!~ifreund@user/ifreund
sounds like a bug either in your build.zig or in std.build

1626044438
ifreund!~ifreund@user/ifreund
don't really have time to dig in right now though, if you're pretty confident it's a bug in std.build feel free to open an issue

1626044956
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
it seems, yes, when the -Dcpu is passed it's not used, that's the point, 

1626044969
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
i'm digging into the build.zig to have a look at it

1626045012
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
zls is very cool to be able to navigate in the std lib :-)

1626045214
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
@ifreund, thank's for your help

1626046556
ifreund!~ifreund@user/ifreund
no problem, good luck solving the issue!

1626047019
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
luck ? found and have a proposal for fix :-) https://pastebin.com/uDuCZhPj

1626047066
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
i think it was this issue causing the problem to compile on arm baseline armv6, couple of month ago

