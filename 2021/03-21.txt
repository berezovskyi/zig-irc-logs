1616284802
LewisGaul
I can create an issue, just thought I'd get a second opinion, having been staring at this for so long haha

1616284818
g-w1
create one, worst thing is it gets closed and you get an explination

1616284831
g-w1
i would only include 1 & 2 though

1616284905
LewisGaul
how come, don't they give distinct hints at what might be going on?

1616284943
g-w1
3 includes more complexity, and it can be reduced with just 1 and 2

1616284950
g-w1
you can include 3 if you want ig

1616285044
LewisGaul
I'm confused, are we looking at the same thing? 3 is "no memory leak - direct arena deinit", which is the same as 1 "memory leak" but using `arena.deinit()` instead of `tree.arena.deinit()`

1616285057
g-w1
we are

1616285085
g-w1
my idea was that if it can be isolated with just 1 & 2, why include 3? but idc either way

1616285147
LewisGaul
I think I'm just failing to understand the relation between 2 and 3, you may well be right :)  I might as well include it all anyway

1616287017
spacelove
Is there an idiomatic way of getting the len of an ArrayList?

1616287025
spacelove
To check if it's empty

1616287041
g-w1
list.items.len :)

1616287048
spacelove
How. HOW!

1616287283
spacelove
g-w1 so, I'm doing a breadth first search. Basically I'm wondering if I'm making a mistake by using arraylists instead of something more complex, like my own custom type. Basically I have an ArrayList of Nodes which makes a graph. Each Node has as a property a list of its neighbors. What I want to do is start with a node and find the shortest

1616287283
spacelove
possible path to another one. So to do this I make a queue, which I will add arrays to (and pop off) as needed. To do all this popping and appending... maybe I'm wondering if ArrayList is the wrong thing, if maybe I have to implement my own datastructure. Thoughts?

1616287318
spacelove
That probably made zero sense.

1616287334
g-w1
a queue or a stack?

1616287348
g-w1
stdlib also has a queue datastructure iirc

1616287605
spacelove
queue... exists. wtf. amazing

1616287613
g-w1
not like c lol

1616287690
spacelove
I was so happy when I discovered string comparison

1616288201
g-w1
spacelove: out of curiosity, how did you find out about zig?

1616288213
spacelove
HackerNews, seemed hip

1616288225
g-w1
nice :)

1616288230
spacelove
Also, friends who do SWE

1616288237
g-w1
SWE?

1616288243
spacelove
Software Engineering

1616288247
g-w1
ah

1616288248
spacelove
in Sweden

1616288257
spacelove
joking about that last part

1616288293
spacelove
error: variable of type 'type' must be const or comptime

1616288294
spacelove
var queue = std.TailQueue(StringArray); <-- there's no documentation on how to use this guy, have you seen him before?

1616288300
spacelove


1616288318
spacelove
My friends are skeptical of me using Zig though. I'm trying to prove them wrong

1616288324
g-w1
PROVE THEM WRONG!!!

1616288333
spacelove
That's my biggest motivator

1616288348
spacelove
Honestly it's like 10% curiosity 90% spite

1616288415
g-w1
the documentation is kinda borked rn, the best way to learn is to read the tests:

1616288427
spacelove
ty

1616288491
g-w1
basically TailQueue is a function that takes a type and returns a struct

1616288494
g-w1
you have to initialize it

1616288510
spacelove
Ahhhhh

1616288524
spacelove
I see. If it's a struct... that reminds me of a zigling I did

1616288675
spacelove
I'm so close, I can taste it

1616288684
spacelove
Or maybe that's my filling that came out. One or the other

1616288848
spacelove
This is amazing!!!

1616289979
spacelove
g-w1

1616289996
spacelove
Please tell me when to stop btw, I will respect your autonomy or whatever.

1616290022
spacelove
Please tell me when to stop btw, I will respect your autonomy or whatever.

1616290027
spacelove
Oh shoot I did it again

1616290193
spacelove
Let me know if I can pm you, I will respect your time, but I feel like you have taken me under your wing and I don't want to necessarily spam the channel if my questions aren't super helpful for other people

1616290538
g-w1
is this a question?

1616290548
spacelove
Yea sorry.

1616290653
spacelove
I am trying to understand why this doesn't compile.

1616290669
g-w1
what is StringArray?

1616290680
spacelove
I put it in the code. At the top

1616290694
spacelove
I made it up because I needed arrays of strings a lot

1616290701
spacelove
Maybe it's a doozy... idk.

1616290713
g-w1
var array = StringArray.init(allocator); try array.append(start)

1616290741
g-w1
(beware, dont know very much about algorithms)

1616290760
spacelove
That's alright, I've got the algorithms under control

1616290766
g-w1
nice

1616290881
spacelove
I see what you did, so, the lesson is that you have to initialize arraylists before you can use them. Makes sense

1616290917
g-w1
you probably also want to deinit them when you are done with them

1616290944
spacelove
One step at a time baby

1616290966
spacelove
I feel like Rocky at the end of every movie

1616292072
spacelove
g-w1 why did you learn Zig?

1616292123
g-w1
I wanted to learn about compilers, and the compiler source code was soooooo good (much cleaner than any other compiler i saw) that I ended up writing a minimal standard library for my toy language in zig

1616292127
g-w1
then i started working on the compiler lol

1616292544
spacelove
I want to be like you

1616293499
g-w1
spacelove: i only knew python and js a year ago. you can do it!

1616293510
spacelove
That's me!

1616293516
spacelove
Except minus the JS

1616293519
spacelove
and minus the year

1616293526
spacelove
And largely, minus the python

1616293541
g-w1
oh, it must have been someone else who said they knew python :P

1616293586
spacelove
My friend wants me to know if you use VSCode

1616293590
spacelove
He's helping me over the phone right now

1616293597
g-w1
i use emacs/neovim

1616293609
g-w1
i used to use vscode ~1 yr ago tho :P

1616293647
spacelove
Does your IDE tell you if your .zig will compile before you try to compile it

1616293652
spacelove
(Sam is asking)

1616293666
g-w1
no, zig language servers are not this advanced yet

1616293674
g-w1
hopefully they will be soon

1616293685
g-w1
for now, you have to compile it the old fashoned way

1616293696
spacelove
Cool

1616293803
brzg
nvim, on saving zig with zig.vim, will do a basic syntax check and run zig fmt

1616294233
sjd
I know this is totally off topic for this channel, but would anyone be interested in a "usesthis" for developers? Seems like usesthis.com has lost its way in recent years, focusing 0 on devs and more on other random genres

1616294925
spacelove
So, I'm initializing a struct with:

1616294925
spacelove
neighbors: std.ArrayList(*const Node),

1616294926
spacelove
then creating an instance with

1616294926
spacelove
.neighbors = std.ArrayList(*const Node).init(allocator),

1616294927
spacelove
then trying

1616294927
spacelove
node.neighbors.append(&next_node);

1616294976
spacelove
This seems like it should work.The data types match for .neighbors, initialize the array with init(allocator), but can't append the pointer to the other node. Getting this error:

1616294999
spacelove
expected type '*std.array_list.ArrayListAligned(*const Node,null)', found '*const std.array_list.ArrayListAligned(*const Node,null)'

1616295003
spacelove
on that last line.

1616295016
brzg
i think you declared something as const instead of var

1616295044
brzg
look at any relevant variable declarations, check if you made them immutable

1616295047
spacelove
The struct has to be const. The node "node" is var

1616295056
spacelove
Those are the only two relevant values afaict

1616295070
g-w1
neighbord: *std.ArrayList(*const Node)

1616295075
brzg
if the struct containing the ArrayList is const i don't think you can append

1616295077
g-w1
if the struct is const, then it has to be a pointer

1616295083
brzg
unless you use a pointer, as g-w1 is saying

1616295499
spacelove


1616295514
spacelove
Working, but -- why can't I just keep the struct's .neighbors as a simple array? Why does it need to be a pointer?

1616295526
spacelove
When some of the values can be regular ints/strings/whatev

1616295541
g-w1
if the instance of the struct it const, then it is not modifiable if it is just an arraylist

1616295552
g-w1
it can be an arraylist, but then you can't modify it (eg add to it)

1616295554
brzg
it needs to be a pointer if you want to mutate (append to) the contained arraylist

1616295562
spacelove
The instance is var though

1616295572
g-w1
of what?

1616295595
spacelove
There's a struct Node which has attributes "value, neighbors..."

1616295617
spacelove
var node = Node { ... neighbors = ... }

1616295636
g-w1
hmm

1616295679
spacelove
That was the original error. But your modification made it work, so...

1616295689
spacelove
I'm not really sure what I fixed, since it should have been working in the first place.

1616295710
g-w1
same

1616295805
spacelove


1616295810
spacelove
Shortened version with just the relevant code

1616295904
brzg
does it work without pointering the ArrayList if you initalise the ArrayList separately from the struct construction

1616295926
brzg
i.e. var neighbours = std.ArrayList(...).init(...);

1616295943
spacelove
I see...

1616295944
spacelove
./word_chains.zig:88:28: error: cannot assign to constant

1616295944
spacelove
node.visited = true;

1616295948
brzg
var node = Node { ... .neighbors = neighbours ... };

1616295949
spacelove
It's treating the type as a constant

1616295958
spacelove
even if the instance is var

1616296052
spacelove
This is the idiomatic way?

1616296067
spacelove
Have the instance keep pointers to the values and just modify the value by reference?

1616297720
spacelove


1616297821
spacelove


1616297861
spacelove
Says I'm trying to modify a constant value. But var Node is var...

1616298091
brzg
this is a variable scope mistake

1616298122
brzg
the node variable decalred in while (it.next()) is not the same as the node variable in for (grpah.items) |node|

1616298149
brzg
try changing for (graph.items) |node| to end with |*node|

1616298270
g-w1
yeah

1616298277
g-w1
it needs a pointer anyways

1616298300
brzg
the iteration sets node in a const way; changing to *node makes it a mutable pointer

1616298795
spacelove
That makes each node into a type **const Node

1616298808
spacelove
* is a pointer, what ** is I have never seen

1616298816
spacelove
You can't access the attributes on a ** struct

1616298971
noam
Stupid question: what's volatile do to asm?

1616299011
brzg
** is a double pointer, don't know why that's showing up

1616299056
noam
... I might break the asm syntax. This is ugly.

1616299069
noam
(which makes sense, since it's descended from *GCC*'s asm(

1616300030
noam
andrewrk: what's the identifier used for in the inline asm blocks? > [ret] "={rax}" (-> usize)

1616300038
noam
the example in the docs references a nonexistent identifier.

1616300057
andrewrk
noam, are you asking about the `usize` or the `ret`?

1616300061
noam
The ret

1616300072
noam
AFAICT it does literally nothing

1616300084
andrewrk
in the assembly source, it can be used like this: `%[ret]`

1616300101
noam
... huh. Neat.

1616300106
noam
Why are they mandatory though?

1616300117
andrewrk
it shouldn't be. if you use the `-> T` form there is no reason to use it

1616300133
noam
Gotcha. Thanks for confirming :)

1616300140
noam
One more tweak being made to the grammar here then :)

1616300143
andrewrk
assembly syntax is one of the oldest parts of zig language, which has not yet received a design iteration

1616300149
noam
Makes sense

1616300264
noam
Ah yeah, didja see the progress in zyg? In the last day: test suite, scope rules, semantic analysis, arm64 and amd64 code generation, function calls, call and type graph generation, deferred execution, loops... :D

1616300279
noam
Currently working on locals, slices / strings, and inline asm, should be done with those and more tonight :D

1616300283
g-w1
^ noam went crazy

1616300401
noam
AsmOutputItem <- (LBRACKET IDENTIFIER RBRACKET)? STRINGLITERAL LPAREN (MINUSRARROW TypeExpr / IDENTIFIER) RPAREN

1616300405
noam
I think that makes sense, right?

1616300458
noam
Honestly, I don't even see the point in the parens

1616300468
noam
"foo" -> usize

1616300482
noam
that makes perfect sense to me, don't see why "foo" (->usize) is better...

1616300514
noam
Given that asm is due for a rework in zig [the language] anyways, I'm just going to do whatever for now until it's settled

1616300520
spacelove
@gw-1 this is the solution:

1616300531
spacelove
pretty simple, not much pointer shit involved

1616300546
g-w1
ah i see

1616300547
g-w1
nice

1616300557
spacelove
Ty

1616300620
andrewrk
noam, can you link to some passing test cases?

1616300681
noam
I don't have 'zyg test' written just yet, so my "test cases" consist of running an input through the pipeline and checking for errors, currently :P A few days should be enough to get actual execution and such, though that depends on how much effort I put into revamping the assembler

1616300683
g-w1
spacelove: i have noted down some improvements to compile errors that would have helped you

1616300696
g-w1
here is one

1616300740
g-w1
./zyg --target amd64 test/rk9/4.zig # then see the assembler output

1616300746
g-w1
you must be on tmp branch though

1616300756
noam
Yeah, because I need to do some squashing and cleanup before pushing to master :P

1616300766
noam
but then i just kept doing more work!

1616300783
noam
Might just move it for now and focus on better commit hygiene in the future instead

1616300924
noam
... huh. I can't do the hacky asm injection I was going for ("msr " ++ reg ++ ", [out]") because it needs to be a string literal. Guess that means I'm working on enums / containerfields first

1616300940
noam
Having an actual

1616300970
noam
"I'm getting this done so I can use it to work on my bootloader" is a lot more motivating than "I'm getting this done because I enjoy it", weirdly, even though I

1616301438
noam
Hmm, is there a good way to insert a comptime

1616301461
noam
I

1616301505
spacelove


1616301525
spacelove
Why would this return the same pointer appended 10 times?

1616301538
noam
Hmm, maybe I should just stop using a stringliteral in favor of a comptime string, so that ++ is an option

1616301603
spacelove
erm, that one had a typo, this one is clearer:

1616301762
spacelove
It's like I'm creating a node at the same memory address every time...

1616301789
spacelove
Oh shit -- is that how while loops work? Any tmp vars are created at the same address?

1616301806
noam
Yes

1616301822
spacelove
!!!! incredible!!!!

1616301826
spacelove
Blowing my mind

1616301840
noam
Never rely on temporary variables

1616301845
noam
That's what "temporary" means ;)

1616302036
spacelove
Is there a "new" operator in zig to tell it I want to keep that variable around? Or do I make a new array and store it in that?

1616302059
spacelove
What if I, going against my buddhist nature, wanted to hold on to what's temporary? So that I could make a pointer to it

1616302261
spacelove


1616302391
noam
You have to allocate memory

1616302412
spacelove
I did, with var arr = std.ArrayList(Node).init(allocator);

1616302414
noam
Stack memory is intrinsically temporary, though if it's at the top of e.g. main it might as well be forever

1616302424
noam
if you append nodes from the stack, they'll stay

1616302434
noam
but they can't themselves point to temporary memory or they'll misbehave

1616302799
spacelove
Can I become someone's apprentice. I think I need a mentor

1616302805
spacelove
I don't want to spam the channel

1616302821
spacelove
I can even pay money. I just want to learn.

1616302835
spacelove
Just to like... get my own wings so I can fly.

1616304350
spacelove
Well, goodnight, thanks for all the help guys

1616305777
andrewrk
zir-memory-layout branch is passing "hello world" now

1616305785
noam
neat!

1616305803
noam
Guessing there's similar but smaller improvements compared to the AST rework?

1616305807
andrewrk
after a couple perf optimizations, I'll do everyone's favorite silly benchmark again :)

1616305817
andrewrk
yes that's the idea

1616305834
noam
which bm is that?

1616305836
andrewrk
whether it's smaller or larger is not known, I could see it going either way

1616305843
noam
true

1616305843
andrewrk
printf 1 million times

1616305845
noam
XD

1616305849
noam
That's better than mine at least

1616305869
noam
Mine is ~150K lines of while(true){} which will break as soon as I add detection of unreachable code :P

1616308547
noam
Found a bug in the grammar! Le gasp! It calls square brackets... brackets! And it calls curly brackets "braces"! Such horror!

1616309052
andrewrk
oh wow, the branch is way way faster...

1616309107
andrewrk
this is another 30% speedup and 36% reduction in peak memory usage

1616309109
noam
90%?

1616309111
noam
Ah :P

1616309132
noam
Still very good!

1616309143
noam
What's the time for the 1M printfs?

1616309146
noam
:P

1616309180
andrewrk
I'm up to 1.6 million lines per second on my laptop

1616309219
andrewrk
down to 372 MiB peak rss for print1mil.zig, from 577 MiB

1616309239
andrewrk
I haven't done the 2 tricks I wanted to do yet either

1616309308
noam
That's... still a lot, I think

1616309385
noam
I need to get mine working well enough to compare it [and decide once and for all whether i or y is better /s]

1616326184
g-w1
thats reeally good

1616326199
g-w1
i suspect it will go down further with the tzir-memory-layout too!

1616332460
v0idifyy
hey, i can't call a function from itself if i `try` it, that's a bug right? cannot resolve inferred error set '@typeInfo(@typeInfo(@TypeOf(func)).Fn.return_type.?).ErrorUnion.error_set': function 'func' not fully analyzed yet

1616332948
ugla
v0idifyy: Are you using inferred error sets? Seems to work for me if I do Error!void but not just !void:

1616333522
v0idifyy
ugla, yes, i'm using inferred

1616333536
v0idifyy
but it should work right?

1616333555
ifreund
v0idifyy: stage1 isn't smart enough to handle inferred error sets on recursive functions

1616333558
ifreund
stage2 should be

1616333683
v0idifyy
compiler bugs are fun

1616333704
v0idifyy
because i get to be like "it's

1616333746
v0idifyy
stack traces get confused on recursive functions, i guess that's normal

1616333886
v0idifyy
openFile is failing on a relative path, is that normal?

1616333963
ifreund
what error do you get?

1616334020
v0idifyy
FileNotFound but i'm pretty sure it exists

1616334073
v0idifyy
./dir/file is the path format

1616334214
ifreund
if you're getting that error, then the operating system disagrees with you about whethere or not the file exists at that path relative to the directory you used

1616334262
ifreund
you can use strace to see the exact syscall made if you want to double-check what the zig standard library is doing

1616334292
v0idifyy
using absolute paths to /bin/sh works so it's weird, i

1616334295
v0idifyy
i'll try that

1616334443
v0idifyy
yeah it's my fault

1616334477
v0idifyy
i called a openFile on a dir with a path from outside the dir

1616335976
v0idifyy
is there a recursive makeDir?

1616336048
ifreund
v0idifyy: makePath

1616336147
v0idifyy
oh

1616337722
v0idifyy
i'm getting FileNotFound with createFile, what does it mean?

1616337934
ifreund
v0idifyy: probably you're trying to create a file in a dir that doesn't exist

1616338040
v0idifyy
ifreund, totally didn't commit the exact same mistake

1616338122
v0idifyy
is there other data formats apart from json in std?

1616338357
ifreund
nope

1616338978
v0idifyy
is there a thing that copies from reader to writer easily

1616339107
ifreund
a fifo maybe?

1616339136
ifreund
v0idifyy: yeah see LinearFifo.pump()

1616339249
v0idifyy
ifreund, is there something that doesn't require an allocator? with a static buffer

1616339293
ifreund
v0idifyy: a fifo can have a static buffer

1616339329
v0idifyy
ugh i'll check the src. the docs are very useless :|

1616339365
ifreund
yes, please ignore them and read the source :)

1616339398
v0idifyy
how would it be possible to generate good docs of zig? or we will have to find a different approach to documentation(?)

1616339462
ifreund
there's an open issue about it, it's definitely a solveable probalem, just not something that makes sense to solve in stage1

1616339623
v0idifyy
`anytype` generates different assembly for each version of the function right?

1616339654
ifreund
afaik yes

1616339972
v0idifyy
would it be a good idea to have typed anytypes (interfaces)? i'm sure you already thought about it

1616340155
ifreund
v0idifyy: here's some discussion:

1616340193
ifreund
if you want runtime interfaces on the other hand, there are plenty of patterns for that

1616344780
ifreund
andrewrk: opened a PR for my first zir-memory-layout patch, if you think what I've done there makes sense I'll start pushing to the branch directly

1616346333
v0idifyy
hmm, am i supposed to be able to have a function pointer with a first parameter as a self?

1616346417
v0idifyy
like: const A = struct { thing: fn (self: A) void }; fn func (self: A) { }; var a = A{.thing=func}; a.thing(); // (instead of a.thing(a);)

1616346481
v0idifyy
i'm pretty sure this is a compiler bug (it errors to compile something like this) because allocator.<func>(unrelated params) always works fine

1616346548
v0idifyy
oh nevermind, Allocator uses self.func(self) inside it's functions

1616348455
s-ol
anyone know a zig-friendly (or zig native) math library with vec4, mat4, and perspective projection?

1616348553
ifreund
s-ol: I've seen but not used

1616348570
s-ol
just found this too:

1616348647
s-ol
its a bit odd that zlm implements each Vec* and Mat* separately

1616356493
v0idifyy
passing a variable doesn't actually copy it on memory right?

1616356506
v0idifyy
s/passing/taking a parameter

1616356517
ifreund
depends on what the compiler decides to do

1616359013
g-w1
andrewrk: i am actually not going to do condbr, so anyone else feel free to take it on

1616359176
ifreund
g-w1: sema or astgen? I just started poking at astgen for bool_and/bool_or which requires condbr

1616359375
g-w1
astgen

1616359430
g-w1
a hint would be implement gz.addCondBr like addFnType (andrewrk told me this)

1616359469
ifreund
cool, thanks

1616362404
noam
Huh, stage2 distinguishes between sema and astgen?

1616362438
g-w1
astgen produces the untyped ir, sema types it and does comptime on it; then it gets fed to codegen

1616362632
noam
ahhh

1616362656
noam
It's really interesting how that differs :)

1616362662
noam
We didn't converge on

1616362681
g-w1
it basically turns the ast into a less repetitive form eg -> loops are all same, it deals with short circuting and and if, stuff like that

1616362701
noam
short circuiting?

1616362721
ifreund
and/or short circuit

1616362732
ifreund
we make them into a condbr in a block

1616362733
noam
... ahhhh

1616363824
g-w1
hmm in the new ast branch, how can I get a Tag from a zir.Inst.Ref?

1616363912
g-w1
ahh got it: if (init_scope.zir_code.instructions.get(.tag)[src_inst] == .store_to_block_ptr) |store| {

1616367142
g-w1
andrewrk: what is the new inst: zir.Inst.Index, field on LocalVal?

1616367145
g-w1
what do I put there?

1616367222
g-w1
importantly the `inst` is a value type, not a pointer <- not sure what that means

1616370770
ifreund
g-w1: pushed astgen for and/or using condbr if you're curious

1616370878
g-w1
just saw nice :)

1616370924
ifreund
hopefully I'm not writing bugs, the parser/renderer was a lot easier to hack on with the extensive test suite

1616370940
g-w1
i can do a quick look over

1616370945
g-w1
dependent types would make this a whole lot easier

1616371021
g-w1
at a quick glance, lgtm

1616371022
ifreund
you mean distinct types?

1616371032
ifreund
and yeah 100% agree

1616371044
companion_cube
from a C-lile language to dependent types in just a few years :p

1616371065
g-w1
yeah distinct types

1616371077
ifreund
companion_cube: zig has comptime dependant types :P

1616371191
companion_cube
yep

