1634130321
marler8997!~marler899@204.229.3.4
ifreund, that's an interesting idea but I consider my step part of the install since it's installing files to the install directory

1634132083
ifreund!~ifreund@user/ifreund
marler8997: couldn't you just use Builder.installFile() then?

1634132100
marler8997!~marler899@204.229.3.4
it calls ftruncate to create a blank uninitialized file

1634132104
ifreund!~ifreund@user/ifreund
e.g. https://github.com/ifreund/river/blob/4b94b9c0839eb75e5a8d3eeaf26e85e516a89015/build.zig#L248-L264

1634132131
ifreund!~ifreund@user/ifreund
and you want to avoid the extra copy?

1634132141
marler8997!~marler899@204.229.3.4
it's an image file for an OS

1634132473
marler8997!~marler899@204.229.3.4
I've porting my linux distro written in D to zig, and trying to leverage zig's build system, so I'm kind of stretching the use case for it and am definitely open to idea/discussion around it

1634132641
ifreund!~ifreund@user/ifreund
marler8997: neat, one trick I've used to work around current zig build system shortcomings is a custom install step, which is pretty clean IMO: https://github.com/ifreund/rundird/blob/8a97db7d6d7a07cd0ed24fe0e9604360c4c715e4/build.zig#L41-L63

1634132682
ifreund!~ifreund@user/ifreund
currently there's no way to get zig to install a shared library for you on linux without the "lib" prefix

1634132883
marler8997!~marler899@204.229.3.4
hmm, I think your custom install step here is vulnerable to the same issue my step had

1634132942
marler8997!~marler899@204.229.3.4
oh wait no, updateFile will create the directory for you, so you're good in this case

1634140620
marler8997!~marler899@204.229.3.4
man packed structs are really broken: https://github.com/ziglang/zig/issues/9943

1634140735
ifreund!~ifreund@user/ifreund
marler8997: yeah, non power of two arrays in a packed struct are not a good idea

1634140794
ifreund!~ifreund@user/ifreund
packed structs require great care to avoid bugs currently, they aren't totally useless but will be so much better when they actually work fully

