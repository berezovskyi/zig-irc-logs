1637884856
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
it's this line in the redismodule.h file

1637884857
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
void *getapifuncptr = ((void**)ctx)[0];

1637884891
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
what can I do about it?

1637885538
andrewrk!~andrewrk@mail.ziglang.org
dwlnetnl, is this a problem with the auto-translated C code?

1637885579
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
no I do a usingnamespace @cImport

1637885586
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
and a @cInclude

1637885625
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
as far as I understand that keeps the zig source file cross platform

1637885674
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
or is this what you actually mean by auto-translated C code?

1637885707
andrewrk!~andrewrk@mail.ziglang.org
yes that's what I mean - @cImport is translating redismodule.h into .zig code and you're then calling RedisModule_Init, correct?

1637885718
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
yes

1637885724
andrewrk!~andrewrk@mail.ziglang.org
here's what you can do:

1637885766
andrewrk!~andrewrk@mail.ziglang.org
1. search zig issue tracker for issues labeled "translate-c" and make sure this has not already been reported

1637885787
andrewrk!~andrewrk@mail.ziglang.org
2. reduce the problem down from redismodule.h to the smallest .h code that demonstrates the problem and report a bug on the zig issue tracker

1637885816
andrewrk!~andrewrk@mail.ziglang.org
3. work around the problem in your project by copy-pasting the auto translated RedisModule_Init code into your codebase, and manually fixing the bad line by hand

1637885831
andrewrk!~andrewrk@mail.ziglang.org
4. after you upgrade to a zig version that has the bug fixed, delete your workaround

1637885941
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
andrewrk I found this issue https://github.com/ziglang/zig/issues/8300

1637885982
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
that seems very similar

1637886006
andrewrk!~andrewrk@mail.ziglang.org
that issue was solved with 0.8.0. are you using a zig version newer than that?

1637886033
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
I am using 0.8.1

1637886043
andrewrk!~andrewrk@mail.ziglang.org
then this issue is different than yours

1637886080
andrewrk!~andrewrk@mail.ziglang.org
that said, there have been a few fixes to translate-c between 0.8.1 and master branch. you might want to try with a master branch build and see if the issue is resolved already

1637886175
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
is there a precompiled binary of the master branch to download?

1637886214
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
oh found it, oops :|

1637886279
andrewrk!~andrewrk@mail.ziglang.org
you can try using the `zig translate-c` subcommand directly just to see how it handles redismodule.h differently

1637886351
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
seems promising

1637886613
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
I now get "error: use of undeclared identifier 'RedisModuleCtx'"

1637886622
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
export fn RedisModule_OnLoad(ctx: *RedisModuleCtx, argv: [*c]*RedisModuleString, argc: c_int) c_int {

1637886820
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
it seems there is another bug concerning identifiers

1637886857
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
once I define it as a constant and prefix all C identifiers

1637886869
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
the original issue is still there

1637886890
andrewrk!~andrewrk@mail.ziglang.org
presumably you did something like `const c = @cImport(...` so you will need to use `c.RedisModuleCtx`

1637886898
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
yes

1637886905
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
that's what I do

1637886954
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
and _ out the argv and argc

1637887283
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
i'll open 2 issues

1637888561
andrewrk!~andrewrk@mail.ziglang.org
dwlnetnl, the semantics of usingnamespace in zig changed. it no longer imports identifiers into the current namespace, it only affects acessing names via a.b syntax

1637888592
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
but what about usingnamespace?

1637888612
andrewrk!~andrewrk@mail.ziglang.org
what about it

1637888659
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
how do you refer to an identifier then?

1637888713
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
by doing usingnamespace there is no "a" identifier to use via a.b syntax

1637888751
andrewrk!~andrewrk@mail.ziglang.org
`const c = @cImport(...` then access via `c.foo`

1637888766
andrewrk!~andrewrk@mail.ziglang.org
usingnamespace is intended only to organize what is made pub

1637888775
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
oh okay

1637888808
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
so it's using the feature in an unintended manner?

1637888811
andrewrk!~andrewrk@mail.ziglang.org
I'll do a nice writeup on this change and put it in the 0.9.0 release notes. there is a lot of good reasons to do it

1637888834
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
sure, no worries

1637888835
andrewrk!~andrewrk@mail.ziglang.org
correct, it is no longer possible to use usingnamespace to access identifiers

1637888959
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
it seemed a bit odd that you can just import a whole set of C identifiers in the namespace without any guards

1637889801
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
andrewrk https://github.com/ziglang/zig/issues/10222

1637889842
andrewrk!~andrewrk@mail.ziglang.org
dwlnetnl, thank you for the bug report!

1637889856
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
thank you for your help!

1637890433
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
andrewrk I had another unrelated question

1637890494
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
are you considering removing semicolons?

1637890514
andrewrk!~andrewrk@mail.ziglang.org
no

1637890536
andrewrk!~andrewrk@mail.ziglang.org
semicolons provide syntax disambiguation, making compile errors for typos better

1637890588
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
okay, sounds reasonable

1637890620
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
I guess I am a bit spoiled after writing Go professionally for a couple of years now

1637892370
andrewrk!~andrewrk@mail.ziglang.org
in what sense?

1637892387
andrewrk!~andrewrk@mail.ziglang.org
go had semicolons up until a certain point

1637898743
freshcoffee1!~fresh@user/freshcoffee
I'm going a lot of go lately, some friction points, lots of tactical decisions for me are "just don't care about that right now, get it done" and just accept the language having no sum types, no enums, Caps for public ergnomics, etc.

1637898814
freshcoffee1!~fresh@user/freshcoffee
*doing. sheesh.

1637924175
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
I get the following compiler error:

1637924179
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
cast discards const qualifier

1637924212
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
I am calling a C library API that has a *char as argument

1637924270
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
and I have a C const char*

1637924303
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
how can I cast between them

1637927266
{Franciman}!~Franciman@mx1.fracta.dev
hi, I am unsure about a zig pattern. I can define errors, for example in my interpreter I have the VarOutOfScope error

1637927273
{Franciman}!~Franciman@mx1.fracta.dev
but how can I add details to the error?

1637927298
{Franciman}!~Franciman@mx1.fracta.dev
i.e. I'd like to report more info in the error, e.g. the name of the variable that is out of scope. What's the pattern?

1637927330
ane!ane@nikita.tnnet.fi
I've always wondered if it would be possible to make tagged unions with errors

1637927390
ane!ane@nikita.tnnet.fi
like union(MyError) { file_exceeds_limit: u32, invalid_filename: []const u8 } and so on, and support errdefer and everything error related with this

1637927468
dutchie!~dutchie@user/dutchie
there's a long-standing issue with a lot of discussion and some idioms: https://github.com/ziglang/zig/issues/2647

1637931028
caolan!~caolan@user/caolan
I'm compiling a binary on arch linux and trying to run it on debian 11 but it complains about the glibc version (it links lib c) - can anyone point me to an example of configuring this in build.zig or via command line options?

1637931132
{Franciman}!~Franciman@mx1.fracta.dev
thanks dutchie 

1637935730
ifreund!~ifreund@user/ifreund
what does the .p0i8 postfix mean in llvm IR?

1637935747
ifreund!~ifreund@user/ifreund
seems to be something to do with the types passed

1637943736
slowjo!~slowjo@sourcehut/user/slowjo
does anyone know about a workaround for the fact that we can't have arrays of bitfields in packed structs?

1637943826
slowjo!~slowjo@sourcehut/user/slowjo
i.e. const reg = packed struct { c: [4]u8 } works, and you can access them as e.g. reg.c[2]

1637943868
slowjo!~slowjo@sourcehut/user/slowjo
but if you exchange the 'u8' for something not byte-divisible (e.g. a 'u1' for a simple flag) compiler won't let you do it

1637944168
slowjo!~slowjo@sourcehut/user/slowjo
i've tried coming up with something that would let me do something like 'reg.c.at(2) = 1' but always get a 'error: invalid left-hand side to assignment'

1637944633
slowjo!~slowjo@sourcehut/user/slowjo
got it to work with a different api ( 'reg.c.setAt(2, 1);' )

1637944636
slowjo!~slowjo@sourcehut/user/slowjo
sorry for the noise

1637944728
slowjo!~slowjo@sourcehut/user/slowjo
would be nice if was supported by the language though. anyone know what would have to happen for arrays of bitfields to be better supported?

1637946589
Nulo!~Nulo@user/nulo
How would you implement the "command buffer" in Zig _without_ @ptrCast and friends? https://rxi.github.io/cached_software_rendering.html

1637946745
ikskuh!~xq@v43666.php-friends.de
without ptrcast? not :D

1637946755
ikskuh!~xq@v43666.php-friends.de
but i would probably create some linear buffer abstraction

1637946769
ikskuh!~xq@v43666.php-friends.de
where i have a Union "Command"

1637946776
ikskuh!~xq@v43666.php-friends.de
which contains all possible draw commands

1637946795
ikskuh!~xq@v43666.php-friends.de
and two functions append(comptime T: type, value: T)

1637946804
ikskuh!~xq@v43666.php-friends.de
which will do all the hacky ptrcast stuff

1637946806
ikskuh!~xq@v43666.php-friends.de
and one fetch

1637946818
ikskuh!~xq@v43666.php-friends.de
which will check which value is currently in the command stream

1637946834
ikskuh!~xq@v43666.php-friends.de
if you are lazy and don't care for performance, you can also just make a ArrayList(CommandUnion)

1637947016
Nulo!~Nulo@user/nulo
Well yeah, but I was curious if there was a way to do the memory efficient way without dangerous things

1637947034
ikskuh!~xq@v43666.php-friends.de
@ptrCast isn't "dangerous"

1637947192
Nulo!~Nulo@user/nulo
I know, what I mean is that I'm never too sure about memory layout to do stuff like that

1637947195
Nulo!~Nulo@user/nulo
Memory anxiety

1637947217
ikskuh!~xq@v43666.php-friends.de
it gets better by doing so

1637947229
ikskuh!~xq@v43666.php-friends.de
have you seen andrews talk from HMS?

1637947245
ikskuh!~xq@v43666.php-friends.de
he might be showing some other techniques for structuring memory

1637947293
Nulo!~Nulo@user/nulo
Ah, I haven't but wanted to

1637947304
ikskuh!~xq@v43666.php-friends.de
you just have several arrays 

1637947307
ikskuh!~xq@v43666.php-friends.de
one per command type

1637947310
ikskuh!~xq@v43666.php-friends.de
and one for commands

1637947314
ikskuh!~xq@v43666.php-friends.de
and just store type + index

1637947436
Nulo!~Nulo@user/nulo
Ah, that could work pretty well. But then you still have pointer indirection

1637947447
Nulo!~Nulo@user/nulo
I guess it's not that bad anyway.

1637947488
ikskuh!~xq@v43666.php-friends.de
i think for this exact use case a linear buffer with embedded structs is the best thing though

1637947503
ikskuh!~xq@v43666.php-friends.de
the only thing that might be evil here is alignment

1637948529
koakuma!~koakuma@user/koakuma
I'm getting a weird C ABI behavior on SPARC where Zig reads from the wrong part of a C struct: https://godbolt.org/z/7nfrhv6ET

1637948530
koakuma!~koakuma@user/koakuma
Anyone knows where is this implemented? It's causing a failing test in test-behavior.

1637951899
sheel!~sheel@d209-89-250-40.abhsia.telus.net
Hi, im very new to zig and am trying to build a project created with `zig init-exe` but it's panicking with `panic: index out of bounds`.  Is there someone here that can help me debug?

1637952113
Nulo!~Nulo@user/nulo
sheel: it should have given you a stack trace telling you were the panic happened

1637952122
Nulo!~Nulo@user/nulo
where*

1637952242
Nulo!~Nulo@user/nulo
That panic means that you tried to access an item in a slice shorter than the index of the item you requested 

1637952266
Nulo!~Nulo@user/nulo
For example, slice being 3 items long, slice[3] would panic because it's trying to access the 4th item (slices count from 0)

1637952297
sheel!~sheel@d209-89-250-40.abhsia.telus.net
Nulo I understand, this isn't in my code however: it's in `system.zig`

1637952315
sheel!~sheel@d209-89-250-40.abhsia.telus.net
`var hdr_buf: [@sizeOf(elf.Elf64_Ehdr)]u8 align(@alignOf(elf.Elf64_Ehdr)) = undefined;`

1637952322
sheel!~sheel@d209-89-250-40.abhsia.telus.net
is the buffer in question

1637952334
ifreund!~ifreund@user/ifreund
what OS are you on and what zig version are using?

1637952347
ifreund!~ifreund@user/ifreund
I guess elf indicates linux

1637952360
ifreund!~ifreund@user/ifreund
though maybe a bsd?

1637952414
sheel!~sheel@d209-89-250-40.abhsia.telus.net
Yeah, it's linux, I'm using nix and have tried 0.8.1 and master

1637952446
ifreund!~ifreund@user/ifreund
sheel: are you using zig tarballs from ziglang.org or from your package manager?

1637952496
sheel!~sheel@d209-89-250-40.abhsia.telus.net
I've been using the nix package manager, I can try the tarballs to see if that makes a difference.

1637952537
ifreund!~ifreund@user/ifreund
pasting the full output you get somewhere would also be useful

1637952565
ifreund!~ifreund@user/ifreund
I'm not aware of any issues with the nix packaging of zig, but distro patches have broken things before

1637952690
sheel!~sheel@d209-89-250-40.abhsia.telus.net
I get the exact same output from the tarball: https://gist.githubusercontent.com/sheeldotme/825d1c0414cb34ce2c2e35f49f866049/raw/90b7e7c0f371495b6a5f382e45581012ae07829a/log.txt

1637952763
sheel!~sheel@d209-89-250-40.abhsia.telus.net
that's using zig-linux-x86_64-0.8.1.tar.xz

1637953211
ifreund!~ifreund@user/ifreund
sheel: yep, there's a bug on that line, it should just do buf[i..]

1637953255
ifreund!~ifreund@user/ifreund
I'll send a patch, thanks for the stack trace

1637953287
sheel!~sheel@d209-89-250-40.abhsia.telus.net
thanks ifreund! :)

1637953318
ifreund!~ifreund@user/ifreund
I wonder why you seem to be the first one to have that pread() do a partial read :D

1637953342
sheel!~sheel@d209-89-250-40.abhsia.telus.net
I was thinking the exact same thing!

1637953387
ifreund!~ifreund@user/ifreund
I guess it's not a very large file

1637953409
ifreund!~ifreund@user/ifreund
maybe you just got "lucky" with where it got placed in your filesystem's data structures

1637953485
sheel!~sheel@d209-89-250-40.abhsia.telus.net
lucky me!  well I'm glad it was a quick patch, and at least it got me to start reading some zig source code!

1637953634
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig/pull/10228

1637953749
sheel!~sheel@d209-89-250-40.abhsia.telus.net
will it be merged pretty soon or should I just work off the fork for now?

1637957345
spenczar!~swnelson@97-126-11-61.tukw.qwest.net
Little thing I just noticed: if I do 'zig init-exe', it gives me a main.zig with 'pub fn main() anyerror!void' as the main signature. I'm curious about the explicit 'anyerror' there -- is that stylistically better than !void?

1637957399
spenczar!~swnelson@97-126-11-61.tukw.qwest.net
Normally I wouldn't think much about it, but zig init-exe's preferences are a very good way to express a preferred style

1637958599
Franciman!~Franciman@mx1.fracta.dev
hi, any other zig talk you suggest?

1637965120
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
spenczar: this has puzzled me too

1637965127
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I would prefer !void

1637966279
Franciman!~Franciman@mx1.fracta.dev
I am unsure about a semantics move of zig

1637966287
Franciman!~Franciman@mx1.fracta.dev
when I return something from a function, what happens?

1637966302
Franciman!~Franciman@mx1.fracta.dev
is the value copied on the stack?

1637966471
ikskuh!~xq@v43666.php-friends.de
Franciman: it depends, but zig has result locations

1637966473
ikskuh!~xq@v43666.php-friends.de
so if you do

1637966482
ikskuh!~xq@v43666.php-friends.de
fn foo() Struct { return Struct { .a = 10, .b = 20 }; }

1637966487
ikskuh!~xq@v43666.php-friends.de
it will be constructed in-place

1637966511
Franciman!~Franciman@mx1.fracta.dev
ah, ok, this is similar to C++ RVO

1637966520
ikskuh!~xq@v43666.php-friends.de
kinda, yeah

1637966532
Franciman!~Franciman@mx1.fracta.dev
but generally at least a copy is done

1637966538
Franciman!~Franciman@mx1.fracta.dev
i.e. the return value is not allocated in some heap

1637966553
ikskuh!~xq@v43666.php-friends.de
no, never

1637966557
ikskuh!~xq@v43666.php-friends.de
unless you explicitly do it

1637966560
Franciman!~Franciman@mx1.fracta.dev
sure

1637966564
ikskuh!~xq@v43666.php-friends.de
we want to get it more precise, so you might be able to access result location via @resultLocation(

1637966586
Franciman!~Franciman@mx1.fracta.dev
interesting

1637966599
Franciman!~Franciman@mx1.fracta.dev
uhm ok, so for example suppose I have

1637966606
Franciman!~Franciman@mx1.fracta.dev
fn foo(x: Struct) Struct { return x; }

1637966610
ikskuh!~xq@v43666.php-friends.de
so you can have multiple statements

1637966613
ikskuh!~xq@v43666.php-friends.de
that is funny

1637966616
ikskuh!~xq@v43666.php-friends.de
this might do nothing

1637966618
ikskuh!~xq@v43666.php-friends.de
if you do

1637966622
ikskuh!~xq@v43666.php-friends.de
y = foo(y);

1637966636
andrewrk!~andrewrk@mail.ziglang.org
ifreund, re: .p0i8 - are you looking at an llvm builtin function? if you show the whole line I can probably explain it

1637966655
Franciman!~Franciman@mx1.fracta.dev
ikskuh: uhm lol

1637966657
Franciman!~Franciman@mx1.fracta.dev
I am a bit lost

1637966670
ikskuh!~xq@v43666.php-friends.de
parameters are passed by reference in some cases

1637966676
Franciman!~Franciman@mx1.fracta.dev
yeah

1637966682
ikskuh!~xq@v43666.php-friends.de
result location will also be passed as a hidden parameter

1637966690
Franciman!~Franciman@mx1.fracta.dev
ah this is clear

1637966699
ikskuh!~xq@v43666.php-friends.de
ergo, in this case you will perform memcpy(&y, &y, sizeof(y));

1637966715
Franciman!~Franciman@mx1.fracta.dev
thanks a lot!

1637966718
ikskuh!~xq@v43666.php-friends.de
but:

1637966724
Franciman!~Franciman@mx1.fracta.dev
I must always remember the continuation!

1637966729
ikskuh!~xq@v43666.php-friends.de
this is a footgun right now

1637966757
ikskuh!~xq@v43666.php-friends.de
fn rot90(pt: Point) Point { return .{ .x = -pt.y, .y = pt.x }; }

1637966763
ikskuh!~xq@v43666.php-friends.de
p = rot90(p);

1637966769
Franciman!~Franciman@mx1.fracta.dev
very interesting!

1637966773
Franciman!~Franciman@mx1.fracta.dev
what happens here?

1637966778
ikskuh!~xq@v43666.php-friends.de
will fuck things up and will result in .{ .x = -y, .y = -y }

1637966786
ikskuh!~xq@v43666.php-friends.de
because you construct the result in the result location

1637966791
ikskuh!~xq@v43666.php-friends.de
and also read from the same location

1637966800
Franciman!~Franciman@mx1.fracta.dev
uhm

1637966801
ikskuh!~xq@v43666.php-friends.de
ergo, the first ".x" will assign before you read the second .x

1637966802
Franciman!~Franciman@mx1.fracta.dev
lol

1637966841
ikskuh!~xq@v43666.php-friends.de
yes

1637966843
ikskuh!~xq@v43666.php-friends.de
it's very evil

1637966878
Franciman!~Franciman@mx1.fracta.dev
ah lol it's clear now

1637966880
Franciman!~Franciman@mx1.fracta.dev
ahah

1637966882
Franciman!~Franciman@mx1.fracta.dev
thanks this was fun

1637966907
Franciman!~Franciman@mx1.fracta.dev
one more thing, somewhat on a lighter note

1637966920
Franciman!~Franciman@mx1.fracta.dev
is the mascot of zig an alligator because

1637966929
Franciman!~Franciman@mx1.fracta.dev
the world alligator is damn similar to allocator

1637966934
Franciman!~Franciman@mx1.fracta.dev
which is a distinctive feature of zig?

1637966936
Franciman!~Franciman@mx1.fracta.dev
:P

1637966971
ikskuh!~xq@v43666.php-friends.de
It's a iguana

1637966974
ikskuh!~xq@v43666.php-friends.de
*Ziguana

1637966985
ikskuh!~xq@v43666.php-friends.de
https://upload.wikimedia.org/wikipedia/commons/9/98/Iguana_iguana_Portoviejo_04.jpg

1637967269
daex!~daex@user/daex
Can I format a string with a max width, and have it truncated if it's longer? I tried "{s:.32}" because printf supports string "precisions", but it doesn't seem to do anything in Zig.

1637967737
Franciman!~Franciman@mx1.fracta.dev
ikskuh: incredible ahahah

1637967739
Franciman!~Franciman@mx1.fracta.dev
thanks

1637967753
flux_control!~flux@sourcemage/wizard/flux
daex: You could have a truncation on the string itself, ie some_string[0..@minimum(32, some_string.len)]

1637967815
daex!~daex@user/daex
flux_control: How did I not think of that lol?

1637967817
daex!~daex@user/daex
Thanks!

1637967832
flux_control!~flux@sourcemage/wizard/flux
Although if you want to include the 32nd char, change the 32 to 33 in the @minimum above.

1637967838
flux_control!~flux@sourcemage/wizard/flux
daex: yw :)

