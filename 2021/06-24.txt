1624492826
andrewrk!~andrewrk@mail.ziglang.org
what's the difference in the paths?

1624492893
jcmoyer!~jcmoyer@user/jcmoyer
main.zig:330:20: error: unused function parameter

1624492897
jcmoyer!~jcmoyer@user/jcmoyer
.\src\main.zig:331:67: error: use of undeclared identifier 'test'

1624493103
andrewrk!~andrewrk@mail.ziglang.org
oh I see. that seems like an easily fixed bug

1624493107
andrewrk!~andrewrk@mail.ziglang.org
let me have a look

1624494405
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, I think I encountered this earlier today too (different editor but same problem)

1624498107
andrewrk!~andrewrk@mail.ziglang.org
moving logic from stage1 to stage2 as a strategy to reduce memory footprint of stage1: https://github.com/ziglang/zig/pull/9219

1624498517
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats brilliant

1624498626
andrewrk!~andrewrk@mail.ziglang.org
in this way we can make the recent addition of the stage2 as a layer on top of stage1 actually be a net reduction in memory footprint and maybe even perf

1624498630
andrewrk!~andrewrk@mail.ziglang.org
that's wild, I hadn't even considered that before

1624498657
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i really like the idea of partially bootstrapping zig

1624501406
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I suspect that https://github.com/ziglang/zig/issues/9220 will pop up a lot in the next few days as people adjust their codebases

1624501422
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
is _: T supposed to work?

1624501457
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I think the reason I added it is because a test case used it, but it could have just been an oversight in the test case maker

1624501471
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that stage1 did not catch.

1624503476
andrewrk!~andrewrk@mail.ziglang.org
yeah needs to be fixed soon

1624503498
andrewrk!~andrewrk@mail.ziglang.org
yes you're supposed to be able to ignore params by changing the name to _

1624503508
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, that was my question, thanks

1624503560
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if we get rid of usingnamespace, we could do shadowing checks only in stage2

1624503650
andrewrk!~andrewrk@mail.ziglang.org
it's quite a tempting proposition

1624503665
andrewrk!~andrewrk@mail.ziglang.org
especially the part where we don't have to implement usingnamespace

1624503744
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
;)

1624503759
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if only we could do the same for inferred error sets, but they are actually useful

1624515976
jcmoyer!~jcmoyer@user/jcmoyer
andrewrk, g-w1: I took a stab at fixing the error message filename problem in #9221

1624539508
marler8997!~marler899@204.229.3.4
ikskuh, is Lola still written in C++? (see https://github.com/ziglang/zig/wiki/Community-Projects)

1624539550
ikskuh!~xq@2a0d:5940:6:163::ad7e
no, it's fully zig now :)

1624539579
ikskuh!~xq@2a0d:5940:6:163::ad7e
updated \o/

1624539590
marler8997!~marler899@204.229.3.4
nice

1624539606
ikskuh!~xq@2a0d:5940:6:163::ad7e
i need to add zero-graphics there one day :)

1624542731
ikskuh!~xq@2a0d:5940:6:163::ad7e
marler8997: do you happen to know how to use a manifest with a windows application

1624543675
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks jcmoyer 

1624546091
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
how do I produce a test executable instead of creating and immediately running it with `zig test`?

1624546124
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
-femit-bin

1624546155
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://github.com/ziglang/zig/pull/9223 should also make it not run

1624546240
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
thanks

1624546712
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
hum, that doesn't seem to work, I get different output from the emitted executable compared to `zig test`

1624546726
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you need to pass the zig exe path as the first ag

1624546728
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
*arg

1624546765
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
ah, that explains the error

1624547018
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I can breakpoint into zig's test_runner.zig code now using lldb, but not into my code. this build should have debug symbols, right

1624547030
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes

1624547076
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
hmm, maybe a VSCode problem

1624547099
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in the past, it worked for me

1624547225
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I stole the config from here https://github.com/ziglang/zig/issues/7361#issuecomment-748277971

1624547266
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does lldb on the cli show it?

1624547371
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
well I do get lldb output in the console

1624547440
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
when I try to step into `test_fn.func()`, all debug display (i.e. call stack etc) clears and when I press the pause button of the debug nav the console says `Stopping due to fatal error: AggregateException: One or more errors occurred.`

1624547455
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
no indication what the actual error is though

1624547473
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
is this a lldb bug?

1624547478
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i have found it to be buggy in the past

1624547513
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
hmm, no idea. I can try to do a pure lldb after looking up how to control il

1624547517
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
 * hmm, no idea. I can try to do a pure lldb after looking up how to control it

1624547546
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or maybe try gdb if you can, gdb has worked for me in the past

1624547773
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
cli lldb is able to step into my code but is not able to create a breakpoint in my code

1624547847
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
ah, never mind that I can simply not set a breakpoint in a test I filtered out, that seems reasonable

1624547878
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
so, cli lldb is working fine apparently

1624547890
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sounds like a vscode problem then

1624547967
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
yeah, I needed to enable breakpoints anywhere to set a breakpoint in my file while I am perfectly able to set breakpoints in test_runner.zig, so I probably need to figure out why VSCode doesn't see my file as a code file that can get breakpoints

1624551061
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: I think this can be closed: https://github.com/ziglang/zig/issues/8364

1624551076
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its cool that stage2 allows us to not implement stuff in stage1

1624551678
marler8997!~marler899@204.229.3.4
ikskuh, I can't remember off the top of my head

1624566675
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: can we have a @VaList() builtin that will return the correct va_list type for the chosen target platform?

1624566818
ifreund!~ifreund@user/ifreund
ikskuh: I think there are already proposals discussing that

1624566834
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh, good

1624566851
ikskuh!~xq@2a0d:5940:6:163::ad7e
because i noticed that i cannot actually provide proper zig bindings for SDL2

1624566859
ikskuh!~xq@2a0d:5940:6:163::ad7e
some APIs use va_list

1624566868
ikskuh!~xq@2a0d:5940:6:163::ad7e
and this is translated wrongly right now (to a concrete impl)

1624566873
ifreund!~ifreund@user/ifreund
write a C wrapper for them

1624566879
ifreund!~ifreund@user/ifreund
and then use that from zig

1624566909
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm?

1624566933
ikskuh!~xq@2a0d:5940:6:163::ad7e
pub extern fn SDL_vsnprintf(text: [*c]u8, maxlen: usize, fmt: [*c]const u8, ap: [*c]struct___va_list_tag) c_int;

1624566938
ikskuh!~xq@2a0d:5940:6:163::ad7e
this is hard to C-Wrap

1624566938
ifreund!~ifreund@user/ifreund
make a C function that calls the function using va_list and expose an api without va_list

1624566945
ifreund!~ifreund@user/ifreund
then use that from zig

1624566980
ifreund!~ifreund@user/ifreund
or just ditch that function, who needs C format strings when you have zig format strings

1624567004
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, that would be an option as well

1624567032
ifreund!~ifreund@user/ifreund
(aside, I don't think pinging andrew for drive-by proposals like this is very respectful of his time)

1624567085
ikskuh!~xq@2a0d:5940:6:163::ad7e
i don't want accept/reject/memoization

1624567103
ikskuh!~xq@2a0d:5940:6:163::ad7e
i just want to know if it's worth the time writing up a *proper* proposal and wasting one or two hours on it

1624567110
ikskuh!~xq@2a0d:5940:6:163::ad7e
or if there are already proposals

1624567125
ikskuh!~xq@2a0d:5940:6:163::ad7e
because sadly, github search ain't that good

1624567135
ifreund!~ifreund@user/ifreund
I think asking here without the ping is perfectly fine, there are other people around who can help answer those questions

1624567151
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, i'll remember next time :

1624567213
ifreund!~ifreund@user/ifreund
in this case though, isn't this just a shortcoming of translate-c?

1624567228
ifreund!~ifreund@user/ifreund
maybe we just need to add a va_list type to std.c

1624567251
ikskuh!~xq@2a0d:5940:6:163::ad7e
the C standard declares va_list as opaque

1624567257
ifreund!~ifreund@user/ifreund
or std.zig.c_translation

1624567258
ikskuh!~xq@2a0d:5940:6:163::ad7e
"struct va_list;"

1624567275
ifreund!~ifreund@user/ifreund
ok, then just make it an opaque type in the std

1624567284
ikskuh!~xq@2a0d:5940:6:163::ad7e
it's not a pointer though

1624567287
ifreund!~ifreund@user/ifreund
oh

1624567289
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can create instances of it

1624567290
ifreund!~ifreund@user/ifreund
that's fucked

1624567306
ikskuh!~xq@2a0d:5940:6:163::ad7e
give me a second

1624567308
ifreund!~ifreund@user/ifreund
then the C standard must define an ABI though

1624567345
ifreund!~ifreund@user/ifreund
maybe a builtin is the right choice then

1624567364
ikskuh!~xq@2a0d:5940:6:163::ad7e
The type declared is va_list which is an object type suitable for holding information needed by the macros va_start, va_arg, va_end, and va_copy.

1624567369
ikskuh!~xq@2a0d:5940:6:163::ad7e
that's the full definition :D

1624567400
ikskuh!~xq@2a0d:5940:6:163::ad7e
(in C99 that is)

1624567413
ifreund!~ifreund@user/ifreund
the ABI must be defined somewhere

1624567419
ikskuh!~xq@2a0d:5940:6:163::ad7e
true

1624567426
ikskuh!~xq@2a0d:5940:6:163::ad7e
but those are for each platform

1624567453
ikskuh!~xq@2a0d:5940:6:163::ad7e
const wchar_t = if (@import("builtin").os.tag == .windows) u16 else u32;

1624567465
ikskuh!~xq@2a0d:5940:6:163::ad7e
this is one evil thing in my SDL wrapper

1624567475
ikskuh!~xq@2a0d:5940:6:163::ad7e
something i learnt while doing this

1624567487
ifreund!~ifreund@user/ifreund
ikskuh: https://www.uclibc.org/docs/psABI-x86_64.pdf

1624567497
ifreund!~ifreund@user/ifreund
grep for va_list

1624567511
ifreund!~ifreund@user/ifreund
we can put that type in the std

1624567526
ifreund!~ifreund@user/ifreund
and there's a different one for each target

1624567545
ikskuh!~xq@2a0d:5940:6:163::ad7e
true

1624567582
ifreund!~ifreund@user/ifreund
I don't think we need a builtin for this

1624567618
ikskuh!~xq@2a0d:5940:6:163::ad7e
might be able to be userspace-possible

1624567621
ikskuh!~xq@2a0d:5940:6:163::ad7e
tdeo tried it once

1624567656
ifreund!~ifreund@user/ifreund
he did a stage1 implementation of exporting vaargs functions from zig iirc

1624567689
ikskuh!~xq@2a0d:5940:6:163::ad7e
afaik it was evil comptime hackery and userland

1624567705
ifreund!~ifreund@user/ifreund
that was someone else on discord iirc,

1624567712
ifreund!~ifreund@user/ifreund
though I could be wrong

1624576694
tdeo!~tdeo@user/tdeo
it wouldn't be difficult to add a builtin.va_list, but actually using it is a bit of a problem since it can be a pointer or a struct depending on the platform

