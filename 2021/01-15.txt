1610674290
marler8997
off topic, I just finished 4 days of triaging a locale issue.  The problem ended up being that I was using glibc 2.25 but the yocto tool to create the archive was newer, which added some new entries to the LC_TIME locale...whoever decided not to version the locale-archive binary has caused the world sooo much pain

1610674369
marler8997
and I don't understand how glibc doesn't have proper error handling...this could have taken 10 minutes if glibc would have just logged a proper error message when it found the unexpected data

1610677428
kameliya
alright!!! aarch64 kernel boots and uses the uefi-provided framebuffer as a console to print a greeting/version

1610677435
kameliya
i had to disable mmu but i'm still really proud i got this far :<

1610677487
kameliya
for any curious: uefi bootloader:

1610677500
kameliya
time to clean it all up

1610677583
kameliya
debugging panics was "fun", since it just crashed qemu. but the registers showed the pointer to the panic message which i could grab out of the image.

1610678811
pixelherodev
kameliya: you can override the panic handler to dump message over UART

1610678825
pixelherodev
I've done it, and andrewrk did it on a Pi IIRC

1610679106
kameliya
i'm sure i will at some stage! i am so far behind having UART :)

1610679205
kameliya
have just worked out how to force strict align since i'm running with no MMU still

1610682275
kameliya
pixelherodev:

1610682969
pixelherodev
:)

1610701005
FireFox317
andrewrk, are you online?

1610723273
fengb
It's 7am for him so probably not :P

1610728429
FireFox317
fengb, yeah makes sense :P

1610729642
Snetry
hey, I have been maintaining a Zig COPR (think Ubuntu PPA but Red Hat), would it be okay if I added it to the wiki page?

1610732267
inet56
hi!

1610732965
ifreund
I'd be nice if we had a mem.eql() for sentinel-teminated pointers that wasn't std.cstr.cmp

1610732973
ifreund
*It'd

1610733007
ifreund
heck, maybe we could just make mem.eql() handle sentinel terminated things as well

1610733062
ifreund
it could also optimally compare slices with sentinel temrinated pointers which you have to implement yourself currently

1610733114
justin_smith
yeah, in tests it would be nice to succinctly compare data literal strings with my app data that ends up in slices

1610733138
justin_smith
I can use helper functions of course, but it feels like boilerplate

1610733168
ifreund
it's also suboptimal to iterate the whole sentinel first with e.g. mem.span()

1610741254
andrewrk
Snetry, yep! this one right?

1610742290
ifreund
Here's my current ugly code for comparing optional sentinel terminated pointers:

1610742927
v0idify
Hey! How do I cancel (stop) a handle? context: I have a connection running in main(), and a different function run as `async func()` that takes stuff from stdIn. I want it to stop when the connection closes.

1610742949
v0idify
tbh I'm struggling a bit with zig's async model

1610743480
andrewrk
v0idify, there's no way to cancel an async function, the same way there is no way to cancel a regular function call. There's an open proposal to discuss the possibility of adding this:

1610743500
andrewrk
it's unlikely to be accepted I think, it's quite tricky to implement into the language in a way that is simple and easy to reason about

1610743583
v0idify
andrewrk, what would be my option then? I can't do a check of "did the connection end?" because .read is forever

1610743634
v0idify
i don't like the idea of "cancelling" a function call either but I don't know how to do this in any other way

1610743638
andrewrk
this is an area that is not well-trodden yet, so you're not going to get a satisfying answer

1610743673
andrewrk
if you're using async functions you're using evented I/O mode right? so reading is non-blocking

1610743714
v0idify
yeah, but in the code itself i'm just awaiting something from stdin

1610743723
andrewrk
yeah ok I see

1610743738
andrewrk
let's see, how is this going to work when everything is finished... (thinking)

1610743762
andrewrk
I think you would use this accepted-but-not-yet-implemented feature:

1610743833
v0idify
that makes sense, it's the way i would do it in go

1610743844
andrewrk
you're up against the parts of the async I/O design that are still very experimental and volatile

1610743866
andrewrk
good time to get involved in working on the event loop and language - bad time to be productive using async I/O

1610743884
v0idify
haha

1610743896
v0idify
i see, language design terrifies me

1610743906
andrewrk
why's that?

1610743951
v0idify
i guess it's part of my imposter syndrome :)

1610744242
fengb
Also in general, cancelling concurrent things is a pain

1610744281
v0idify
yeah i can't see that going right

1610744300
v0idify
i like the select approach more, it's like go which i like quite a lot

1610744408
v0idify
hmm. I just realized something, that might not work for what i'm doing. can I send a (simplified) pastebin?

1610744734
v0idify


1610745456
v0idify
context: i'm building an irc client, although i stripped basically all irc components from that

1610746525
justin_smith
there are some patterns that help - for example, if possible only have one block of code using a resource (eg. have a dedicated async reader, and if there are other consumers that reader should push the data to them)

1610746599
justin_smith
v0idify: it's also common to have some "signal" - whether that's a literall kill -N signal via the OS or a lock that you await or a latch or whatever - something that tells the other thread you are done

1610746665
ifreund
communcation with pipes is much better than using signals IMO

1610746677
justin_smith
and agreed that killing things from the outside usually creates more problems than it solves, it's usually worth the extra complexity to have a thread voluntarily exit

1610746684
ifreund
signals are the worst part of posix

1610746689
justin_smith
ifreund: that's another good one, yes

1610746934
justin_smith
IMHO file handles being ints is pretty bad too (but less likely to lead to disaster)

1610752342
marijnfs
how do I fmt to a buffer?

1610752392
andrewrk
std.fmt.bufPrint

1610752409
andrewrk
if you want to heap allocate: std.fmt.allocPrint

1610752544
marijnfs
ah allocPrint

1610752557
marijnfs
somehow I can't find bufprint

1610752587
marijnfs
and how would one read line by line from stdin?

1610752602
marijnfs
basically like a console

1610752964
andrewrk
we don't have a std lib abstraction for that, you need a more sophisticated terminal UI lib for that

1610752988
v0idify
the del.dog that i sent before provides an abstraction for any kind of reader

1610752996
v0idify
that reads line by line without alloc

1610753002
andrewrk
if you want something really primitive, you can just call read() (not readAll)

1610753008
v0idify
justin_smith, i am following a pattern like that, that is not my problem

1610753027
marijnfs
andrewrk: so get the stdIn().reader() and i can do that?

1610753039
andrewrk
nah not even a reader, just stdin.read()

1610753039
marijnfs
I guess read() is blocking reading every character?

1610753043
marijnfs
ah

1610753053
andrewrk
it will give you an OS-determined amount of bytes

1610753058
andrewrk
which for a terminal will be 1 line

1610753069
marijnfs
thats fine

1610753074
andrewrk
this is the primitive way to do it, if you want something more user friendly, you gotta get fancy

1610753100
marijnfs
yeah then i would have to read every keypress

1610753146
marijnfs
I need to give read a buffer?

1610753322
andrewrk
you don't know how much data you're going to get until you ask for it

1610753335
andrewrk
you find out after read() whether your buffer was big enough

1610753379
g_w1
check this out

1610753567
marijnfs
I see stdin.reader().readUntilDelimiterAlloc sounds interesting

1610753574
marijnfs
Just read() seems to still work though

1610753612
marijnfs
I just give it a big buffer;)

1610754992
v0idify
is there a hacky way to do what i'm trying to do somehow?

