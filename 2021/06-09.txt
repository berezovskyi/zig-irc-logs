1623199262
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, for some reason, merging my changes found a *lot* more real cases of unused vars in std :/

1623199593
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, maybe some are invalid

1623199614
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
 for (ld_info_list) |ld_info| {const standard_ld_basename = fs.path.basename(ld_info.ld.get().?);} // spot the fail

1623200087
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i think I did not cause this bug: const S = struct {}; _ = S{ .field = 42 }; fails when it is not supposed to with S is neve used, but const S = struct {}; _ = S{}; does not. any ideas?

1623200348
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
probably something here if (struct_init.ast.fields.len == 0) {

1623203190
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i think i fixed them, but the code is not ideal, but its fine. just a bunch of _ = typeExpr() s

1623208818
andrewrk!~andrewrk@mail.ziglang.org
g-w1, are you referring to master branch or a new astgen error you're working on?

1623215331
marler8997!~marler899@204.229.3.4
big hash_map update

1623215356
marler8997!~marler899@204.229.3.4
people like the changes?

1623221599
ikskuh!~xq@2a0d:5940:6:163::ad7e
heya o/

1623237641
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: new error, but it was a bug in the master branch, but also fixed :)

1623242413
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
is there a way to fail a test when a line is read? I'm using assert(false); but I'm wondering if there's something more idiomatic

1623242444
ikskuh!~xq@2a0d:5940:6:163::ad7e
return error.TestFailedBecauseThatsWhy

1623243569
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
oh ha yeah that makes sense

1623247325
marler8997!~marler899@204.229.3.4
anyone working on a regex library?

1623247553
daurnimator!~daurnimat@vultr.daurnimator.com
is there a way to skip musl tests when running the zig test suite?

1623247610
daurnimator!~daurnimat@vultr.daurnimator.com
that is: running them; not compiling them

1623249245
oats!~thomas@user/oats
https://github.com/tiehuis/zig-regex

1623249255
oats!~thomas@user/oats
https://github.com/alexnask/ctregex.zig

1623249271
oats!~thomas@user/oats
looks like there's a few :)

1623249655
marler8997!~marler899@204.229.3.4
thanks oats

1623249726
oats!~thomas@user/oats
np!

1623249834
mfg!~user@ip-95-222-176-180.hsi15.unitymediagroup.de
hi, i tried to compile the default hello world template with `zig build -Drelease-*=true` the resulting binary does not write anything to stdout. is this intentional, am i using it wrong or is it a bug?

1623250027
daurnimator!~daurnimat@vultr.daurnimator.com
mfg: I think the hello world from `zig init-exe` writes to stderr out of the box

1623250183
luuk!~luuk@user/luuk
It's because the logging level. The default template logs to stderr with level info, which is too low for any of the release modes

1623250205
mfg!~user@ip-95-222-176-180.hsi15.unitymediagroup.de
ah thanks luuk :D 

1623250211
luuk!~luuk@user/luuk
For example, if you do 'std.log.crit()' you should see output 

1623250214
luuk!~luuk@user/luuk
You're welcome

1623250232
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think we should change that behaviour

1623250233
daurnimator!~daurnimat@vultr.daurnimator.com
mfg: you may also want to write `try std.io.getStdOut().writer().print(` instead

1623250246
ikskuh!~xq@2a0d:5940:6:163::ad7e
i expect a "log.info" to appear also in release modes, only log.debug to be gone

1623250294
luuk!~luuk@user/luuk
I don't, but you can always override the default level in your root file

1623250307
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1623250342
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: by default only warnings should show; for most programs, usually a `-v` turns on notice,`-vv` turns on info, and `-vvv` turns on debug

1623250475
ikskuh!~xq@2a0d:5940:6:163::ad7e
okay, agreed

1623250484
ikskuh!~xq@2a0d:5940:6:163::ad7e
but we cannot do runtime levels with the current impl :(

1623250505
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: yeah I think it's currently up to a user to set up their own log function and look at a global or something

1623250512
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1623250521
marler8997!~marler899@204.229.3.4
we should probably modify hello-world.zig to use std.debug.print yes?

1623250524
ikskuh!~xq@2a0d:5940:6:163::ad7e
imho the log level should be possible to be both

1623250531
ikskuh!~xq@2a0d:5940:6:163::ad7e
the default one could stay like that

1623250533
ikskuh!~xq@2a0d:5940:6:163::ad7e
but just do

1623250537
luuk!~luuk@user/luuk
it used to be std.debug.print

1623250541
daurnimator!~daurnimat@vultr.daurnimator.com
marler8997: or actual stdout... it's not really a debug print is it?

1623250542
ikskuh!~xq@2a0d:5940:6:163::ad7e
"pub var log_level: std.log.Level = .warn;"

1623250548
ikskuh!~xq@2a0d:5940:6:163::ad7e
to allow runtime config of the log level :)

1623250550
marler8997!~marler899@204.229.3.4
yeah stdout would also make sense

1623250560
daurnimator!~daurnimat@vultr.daurnimator.com
it used to be stdout too.... but we figured errors and the writer interface was too much to show in a hello world

1623250577
daurnimator!~daurnimat@vultr.daurnimator.com
not to mention that writing to stdout changed syntax every release from 0.4.0 to now :P

1623250588
marler8997!~marler899@204.229.3.4
lol

1623257962
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
is it possible to convert a slice to an array?

1623257974
luuk!~luuk@user/luuk
Only if the slice is comptime

1623257988
luuk!~luuk@user/luuk
As arrays must have a fixed size

1623258027
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
does a comptime slice have to have its contents known at comptime?

1623258105
luuk!~luuk@user/luuk
Believe so yes

1623258111
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
urgh

1623258123
luuk!~luuk@user/luuk
Since you'll basically have to copy the contents to the array

1623258129
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I already wrote this giant switch expression and now I might have to rewrite it because I can't switch on []u1

1623258136
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the _comptime_ part in "comptime slice" seems to suggest that

1623258159
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
TheLemonMan: I was wondering whether all the contents needed to be known or just the length or something

1623258168
luuk!~luuk@user/luuk
Well, you can't switch on arrays either, so not sure what you're trying to achieve :)

1623258168
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
[]u1? is that a poor man's bitfield?

1623258172
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
yes

1623258199
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
in fact, I need a proper data structure for manipulating bits. what's a bitfield?

1623258228
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
you know that every u1 entry is actually 8 bit wide and you're (potentially) wasting a lot of bytes?

1623258238
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
yeah someone told me that yesterday

1623258242
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
there's bit_set.zig

1623258246
freshcoffee1!~fresh@user/freshcoffee
so it's a rich man's bitfield :)

1623258281
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I just want to make the program do its work first, then I'll fix the data structure

1623258282
oats!~thomas@user/oats
lol

1623258291
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the man was rich but then spent every penny on the bitfield

1623258293
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
it's only a practice program

1623258296
oats!~thomas@user/oats
ACTION gives cren a PackedIntArray

1623258304
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
oats: yeah someone mentioned that yesterday

1623258317
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I need to be able to append to it dynamically though like an ArrayList

1623258342
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
DynamicBitSet is what you need then

1623258342
luuk!~luuk@user/luuk
std.bit_set.DynamicBitSet

1623258348
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
NINJA'd

1623258361
luuk!~luuk@user/luuk
Mr Lemon too fast :(

1623258383
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
actually perhaps I should fix the data structure first... since it's so central to the program

1623258387
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I'll have a look tomorrow, thanks

1623261117
oats!~thomas@user/oats
ACTION turns off TheLemonMan's compooter

1623269678
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I downloaded the 0.8.0 armv7 release onto my RPi and it seems to segfault as soon as I link a C library

1623269703
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
(trying with minimal zig code that opens a GLFW window)

1623269711
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what segfaults?

1623269730
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
the `zig build-exe` command issued by `zig build`

1623269753
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
can you get a backtrace?

1623269799
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
can I do that with the release version?

1623269884
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think so

1623269945
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
just run in gdb and type bt

1623270105
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
https://gist.github.com/flyx/bc16162c43f34e40e1035551cfa2682e

1623270147
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
uhh, that looks like a clang bug.

1623270153
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
heh

1623270173
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does zig translate-c on the header work?

1623270182
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the problem is not linking the c lib, but using translate-c

1623270241
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
ah, same segfault when trying this

1623270260
freshcoffee!~fresh@user/freshcoffee
just for giggles can you check dmesg to see if oom killer activated?

1623270341
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
not familiar with dmesg, the output I get doesn't show something that matches oom killer

1623270585
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I can't even translate-c /usr/include/stdint.h

1623270616
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
can you translate "int f(void);" ?

1623270643
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
no

1623270734
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm

1623270756
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
backtrace always seems the same

1623271217
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
is there a way to print where the zir is cached? i can't find which zig-cache to delete?

1623271300
ifreund!~ifreund@user/ifreund
zir for what? the stdlib? probably the global cache

1623271320
ifreund!~ifreund@user/ifreund
you can see the path for that with zig env

1623271342
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, im getting a weird thing where I changed the file, but it still points to the same source, guessing its getting the wrong lib dir but i used --override-lib-dir

1623271362
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
 "std_dir": "/home/jacob/dev/zig/zig-out/lib/zig/std", ah this was the culprit

1623271373
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think

1623271395
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks for the tip!

1623271465
ifreund!~ifreund@user/ifreund
no problem!

1623271667
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i think I have eliminated all the false-positive unused vars

1623272036
andrewrk!~andrewrk@mail.ziglang.org
g-w1, see also -Dskip-install-lib-files when building self-hosted

1623272087
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks

1623272763
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
should I open an issue for the translate-c problem or something?

1623275227
andrewrk!~andrewrk@mail.ziglang.org
I think if you wanna open a new issue you should have to go fix an older issue first 

1623275235
andrewrk!~andrewrk@mail.ziglang.org
we got enough open issues

1623275268
andrewrk!~andrewrk@mail.ziglang.org
(I'm being facetious)

1623275280
andrewrk!~andrewrk@mail.ziglang.org
haha im serious

1623275377
mla!~mla@162.253.176.229
so I want something like a std libs HashMap but thats also stores a linkedlist echo e.g. i want to be able to pull the latest items pushed into the hashmap

1623275411
mla!~mla@162.253.176.229
arrayhashmap is ordered but then i have to have specific capacity

1623277117
Snektron!~snektron@2001:470:69fc:105::1789
test

1623277131
oats!~thomas@user/oats
Snektron, [02FAILED]

1623277135
oats!~thomas@user/oats
oh that's not red

1623277141
oats!~thomas@user/oats
I forgot the color code lol

1623277169
Snektron!~snektron@2001:470:69fc:105::1789
Finally did the matrix irc stuff 

1623277506
andrewrk!~andrewrk@mail.ziglang.org
hello

1623277518
Snektron!~snektron@2001:470:69fc:105::1789
hi

1623277532
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hi Snektron 

1623277602
oats!~thomas@user/oats
mla, wait, why doesn't arrayhashmap work for you?

1623277606
oats!~thomas@user/oats
idgi

1623277799
mla!~mla@162.253.176.229
oats: w arrayhashmap i need to first check capacity before inserting and then also periodically cleanup, my size of the hash could be from 0-50k or even 1m items

1623277817
mla!~mla@162.253.176.229
linked list style preservation of order + autohashmap seems like the "right" way

1623277866
andrewrk!~andrewrk@mail.ziglang.org
intrusive linked list nodes means you can mix it with any other data structure, including hash maps

1623277911
mla!~mla@162.253.176.229
yeah so autohashmap where i keep the linked list myself, but nothing off the shelf in std lib just wanted to make sure

