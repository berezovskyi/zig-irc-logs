1626136925
andrewrk!~andrewrk@mail.ziglang.org
I think I mostly fixed codegen.zig so just sema and maybe a couple prongs in codegen

1626146719
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
andrewrk https://twitter.com/marcan42/status/1414785117441073168?s=20

1626147464
andrewrk!~andrewrk@mail.ziglang.org
what's up haze 

1626148222
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nothing much hbu andrewrk 

1626148288
andrewrk!~andrewrk@mail.ziglang.org
just workin hard on trying to get self-hosted done for 0.9.0

1626168755
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
hi there, I got a question: How can I build zig with a custom llvm, that support another CPU ?

1626172214
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
dok: normally when you build llvm for use with zig you leave all backends enabled (I think it is necessary actually), so there is no 'other cpu' possible. They are all targeted out of the box

1626175724
ifreund!~ifreund@user/ifreund
wilsonk: they might mean an llvm for with support for stuff that hasn't been upstreamed

1626175773
ifreund!~ifreund@user/ifreund
dok: I think the easiest way to do that would be to use the zig-bootstrap repository

1626175911
ifreund!~ifreund@user/ifreund
note that your llvm will need to be llvm 12 if you want to build the current zig version

1626175925
ifreund!~ifreund@user/ifreund
oh neat, llvm 12.0.1 is out

1626177535
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
ifreund: Yes I am using the zig-bootstrap repository, and I have replaced the llvm and lld directory with other ones supporting the "other cpu"

1626177586
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
it's llvm13 if I recall correctly

1626177772
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
it's llvm12, 13 hasn't been released ><

1626178499
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, the air rework may be a good time to make plan9 incremental

1626178507
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
    @panic("TODO Plan9 needs to keep track of Air and Liveness so it can use them later");

1626178568
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or maybe i'll see what spirv does

1626179411
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
ifreund: do you know if it is possible to use another linker than lld, to link zig

1626179741
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
generate an object file, then link that by itself

1626180810
euandreh!~euandreh@2804:14c:33:9fe5:50a8:9802:856c:54ce
Q: Why can't the OS's virtual memory handle fragmentation gracefully, and do things like representing two 1MB blocks as a single 2MB block?

1626189730
euandreh!~euandreh@2804:14c:33:9fe5:50a8:9802:856c:54ce
A better question would be: is defragmentation a thing for OS's virtual memory?

1626190715
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
euandreh: what do you mean by fragmentation in virtual memory ?

1626191115
ifreund!~ifreund@user/ifreund
dok: using a linker other than lld should work fine for building/linking stage1

1626191127
ifreund!~ifreund@user/ifreund
I usually build using my system gcc based toolchain

1626191155
ifreund!~ifreund@user/ifreund
note that llvm itself must be compiled using the same C++ compiler as you use to compile zig stage1 though, cause C++ sucks

1626191180
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
ifreund: I don't recall which stage it was but they were genuine error messages

1626191239
ifreund!~ifreund@user/ifreund
dok: zig bootstrap does something a little unique where it first build zig for the host system using the host toolchain and then uses that zig to crosscompile zig for any target

1626191292
ifreund!~ifreund@user/ifreund
zig uses lld for that second step, and that can't be changed I don't believe

1626191297
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
yeah, which is maybe not what I need, since I plan on tring cross compiling only for now

1626191303
ifreund!~ifreund@user/ifreund
(it's lld compiled into zig)

1626191330
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
right now I am in the "# Now we build Zig, still with system C/C++ compiler, linking against LLVM" stage of zig-bootstrap

1626191344
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
build-zig-host

1626191359
ifreund!~ifreund@user/ifreund
oh ok, what error are you getting?

1626191370
ifreund!~ifreund@user/ifreund
that should use whatever your system linker is

1626191418
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
I had this kind of errors 4ld.lld: error: undefined symbol: LLVMInitializeKVXTarget

1626191442
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
but that has been resolved by adding the missing external symbols

1626191483
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
now I must add all the target specific part in zig. which I don't really understand how it all workds

1626191592
ifreund!~ifreund@user/ifreund
what target are you trying to add, out of curiosity?

1626191611
ifreund!~ifreund@user/ifreund
you can probably find an old PR adding some other target and use that as an example

1626191618
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
trying to use zig to compile an elf to a custom soc and architecture

1626191723
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
I have a working gcc and llvm v12.0.1, but no lld, with uclibc-ng but no glibc nor musl

1626191781
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
so... it is very likely to not work

1626191836
ifreund!~ifreund@user/ifreund
hmm, yeah zig links against lld for the target so without that you're probably out of luck

1626191862
ifreund!~ifreund@user/ifreund
it's not about linking zig with lld but that zig depends on the lld library

1626197033
andrewrk!~andrewrk@mail.ziglang.org
netbsd tarballs are up on the download page

1626197043
luuk!~luuk@user/luuk
\o/

1626197255
ifreund!~ifreund@user/ifreund
very cool

1626197381
andrewrk!~andrewrk@mail.ziglang.org
you can thank lun4 

1626197661
lun4!~luna@user/lun4
:D

1626206346
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
is nyah nya? o-o

1626209723
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
> This moves towards a strategy to make more efficient use of memory by not storing Air or Liveness data in the Fn struct, but computing it on demand, immediately sending it to the backend, and then immediately freeing it.

1626209740
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
this means that if I want to do everything in flush, I have to dupe the air and liveness?

1626209768
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ACTION had to read a few more sentences :)

1626210806
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I'll add a move() method which will set the slices to empty so that the deinit() does nothing and the moved data becomes the owner

1626210848
andrewrk!~andrewrk@mail.ziglang.org
another strategy would be doing what the C backend does - it renders each function immediately into a buffer, but then waits until flush() to render all the buffers to the output file

1626210848
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I think I can make it partly incremental, with decl_table being a map from Decl -> []const u8

1626210859
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hah, we said it at the exact same time

1626210873
andrewrk!~andrewrk@mail.ziglang.org
:)

1626210902
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in a stage2 meeting in the fall, i'll ask for help about all the TextBlock stuff as it still hasn't clicked for me yet

1626210928
andrewrk!~andrewrk@mail.ziglang.org
I think kubkon is doing some related work to that

1626210952
andrewrk!~andrewrk@mail.ziglang.org
I can summarize: TextBlock represents the space within the executable file that a function takes up

1626210987
andrewrk!~andrewrk@mail.ziglang.org
it stores prev/next pointers so that you can find out how much padding you have left to grow a function before it gets too big and you have to find somewhere else to put it

1626211120
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks, that makes more sense

1626211325
andrewrk!~andrewrk@mail.ziglang.org
the interesting thing is that any given function is allocated both in terms of virtual address space, and also in terms of where is it within the file

1626211365
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in most cases they are congruent right?

1626211421
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
like you can't change one without changing the other

1626211598
andrewrk!~andrewrk@mail.ziglang.org
right

1626211606
andrewrk!~andrewrk@mail.ziglang.org
I think maybe it only matters towards the end

1626211616
andrewrk!~andrewrk@mail.ziglang.org
where you have space to grow in vaddr but not file, or vice versa

1626211641
andrewrk!~andrewrk@mail.ziglang.org
that's a potentially exploitable observation

1626211773
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I see

1626213998
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so now updateDecl is for non-function decls?

1626214004
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and updateFunc is for functions?

1626214034
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and codegen.generateFunction vs codegen.generateSymbol

1626214498
andrewrk!~andrewrk@mail.ziglang.org
yes

1626214543
andrewrk!~andrewrk@mail.ziglang.org
I'm close to fixing the compile errors in the branch

1626214557
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that will really help, thanks so much

1626216030
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
huh, a global offset table makes code pretty PIE

1626216039
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in that the order does not matter, which is pretty cool

1626216384
andrewrk!~andrewrk@mail.ziglang.org
g-w1, pushed

1626216433
andrewrk!~andrewrk@mail.ziglang.org
ACTION breaks for lunch

1626216751
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
lunch.. a 7pm

1626217056
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
4 in oregon

1626218651
andrewrk!~andrewrk@mail.ziglang.org
i love setting my own work schedule

