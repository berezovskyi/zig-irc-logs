1637453065
anddam!~anddam@user/anddam
kinda of an odd question, I'm trying to pick a language for generic purpose, with the immediate goal of developing a desktop GUI app, it should target win/lin/mac and be possibly a compact exe containing the UI library as well

1637453087
anddam!~anddam@user/anddam
the library would likely be something like Tk or IUP or Dear ImgUI

1637453103
anddam!~anddam@user/anddam
is Zig suited for this?

1637453797
andrewrk!~andrewrk@mail.ziglang.org
yes, except for all the reasons that it is pre-1.0

1637454420
marler8997!~marler899@204.229.3.4
andrewrk, yes I've had similar thoughts about that

1637454491
marler8997!~marler899@204.229.3.4
Whatever versioning scheme we decide the package manager uses, we could probably also use for the compiler ?

1637454612
andrewrk!~andrewrk@mail.ziglang.org
seems reasonable

1637454702
marler8997!~marler899@204.229.3.4
I think the most difficult part about that is how that versioning scheme works, how it handles compiler upgrades and checking for compatibility

1637458140
andrewrk!~andrewrk@mail.ziglang.org
we have a release date for 0.9.0: December 20

1637459173
jcmoyer!~jcmoyer@user/jcmoyer
nice, I'm excited to see the impact it will have on compile times

1637459302
jcmoyer!~jcmoyer@user/jcmoyer
currently waiting 15 seconds to build 4 executables in debug mode whenever I touch some shared code

1637459484
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
it probably won't change that much

1637459535
jcmoyer!~jcmoyer@user/jcmoyer
oh is it still going to use the LLVM backend?

1637459661
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yes

1637459676
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i doubt the stage2 llvm backend even will be ready by then

1637460107
marler8997!~marler899@204.229.3.4
what's people's thoughts on "usingnamespace" vs "pub usingnamespace" ?

1637482106
daurnimator!~daurnimat@vultr.daurnimator.com
andrewrk: the versions supported is not static: e.g. over time projects drop support for old versions

1637482143
daurnimator!~daurnimat@vultr.daurnimator.com
Furthermore, various zig versions might be supported depending on the feature flags you turn on/off at compile time

1637508036
ikskuh!~xq@v43666.php-friends.de
i just published my latest chapter of the build.zig article series: https://zig.news/xq/zig-build-explained-part-3-1ima

1637511919
tgschultz!UserNick@047-034-058-084.res.spectrum.com
marler8997 what would `usingnamespace` without `pub` accomplish? Or is it just a compiler error?

1637517304
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I have a question about fixed size arrays.

1637517461
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I´m trying to do the following: A libc struct returns a struct with certain fields that are ¨strings¨ implemented as fixed size arrays. These arrays should be interpreted as strings with limited size, with the first 0 byte indicating the end. If there is no 0 byte, the whole array should be considered. I´m trying to convert this to a slice. I can do this for a known array in the following way:

1637517474
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
`const username = log.ut_user[0..strings.indexOf(log.ut_user[0..], 0) orelse 32];`

1637517530
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
the strings.indexOf of is something that returns a ?usize

1637517551
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
this works but only if the size is 32. Can this be done generically?

1637519966
tgschultz!UserNick@047-034-058-084.res.spectrum.com
If I understand correctly, the issue is that you want `32` here to be replaced with whatever the total reserved field size is? In that case `const username = log.ut_user[0..strings.indexOf(log.ut_user[0..], 0) orelse log.ut_user.len];`

1637520115
tgschultz!UserNick@047-034-058-084.res.spectrum.com
However, it could be rewritten to be more readable (at least I think so) like so: `const username = if(strings.indexOf(&log.ut_user, 0)) |idx| log.ut_user[0..idx] else log.ut_user[0..];`

1637520248
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
You have a good point. I prefer to put things like this into functions but I don´t know how to do this generically. Can a function accept a [COMPTIME_INT]u8 value?

1637520263
tgschultz!UserNick@047-034-058-084.res.spectrum.com
as an `anytype` yes

1637520288
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Interesting, how would that look like?

1637520308
tgschultz!UserNick@047-034-058-084.res.spectrum.com
but it could also accept it as a `[]u8` and you pass it `&log.ut_user`.

1637520329
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
ah, that is probably the better way. Thanks :)

1637520540
tgschultz!UserNick@047-034-058-084.res.spectrum.com
for the record, as an anytpye it is just `fn foo(buf: anytype) []const u8 { //in here we assume we were passed an array or array like object of u8 }

1637520543
tgschultz!UserNick@047-034-058-084.res.spectrum.com
`

1637520610
tgschultz!UserNick@047-034-058-084.res.spectrum.com
In the anytype scenario I think technically the compiler gets to choose if it would treat an array as a copy or a slice. My guess is it would just pass it as a slice anyway.

1637521940
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Passing as a slice was indeed the easy option. I don´t think Zig has something for this type of input array with an internal null terminator, so I had to look for alternatives.

1637522621
tgschultz!UserNick@047-034-058-084.res.spectrum.com
well there is the 0-sentinel-terminated unknown-length slice `[*:0]const u8`, but that doesn't match up either since there'd be no null terminator on a max length string.

1637523405
marler8997!~marler899@204.229.3.4
tgschultz, right now "pub usingnamespace" and "usingnamespace" do the exact same thing

1637523474
tgschultz!UserNick@047-034-058-084.res.spectrum.com
right, I understood the question as "which makes sense to be the one 'right' way?". Maybe I misunderstood, but if not I guess I'm saying my vote is for just 'usingnamespace'.

1637524332
marler8997!~marler899@204.229.3.4
gotcha, any reason for voting for that one other than style preference?

1637528204
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
any rough estimates for the release time of 0.9?

1637528429
luuk!~luuk@user/luuk
Daimanta: December 20th

1637528561
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Ah good to know. All previous releases broke source code, so I like to know when to brace for a new version ;)

1637528604
luuk!~luuk@user/luuk
:)

1637528893
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I hope to finish the first prototype of coreutils by the end of december so I´ll have some work by then 

1637534838
anddam!~anddam@user/anddam
andrewrk: oh thx, just read

1637534882
anddam!~anddam@user/anddam
different topic, possibly naive, does "Use Zig as a zero-dependency, drop-in C/C++ compiler that supports cross-compilation out-of-the-box." on home page means zig compiler actually compiles C code as it is?

1637535548
Tekk!~tekk@89.46.62.217
Zig bundles clang, basically

1637535685
Tekk!~tekk@89.46.62.217
So you can compile C code using zig cc (which is very useful for cross-compiing)

1637536426
andrewrk!~andrewrk@mail.ziglang.org
there is also a WIP C frontend that has no llvm/clang dependency: https://github.com/Vexu/arocc

1637538978
anddam!~anddam@user/anddam
oh nice

