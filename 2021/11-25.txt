1637814143
andrewrk!~andrewrk@mail.ziglang.org
marler8997, do you have a way to figure out what DLL this is found in? https://docs.microsoft.com/en-us/windows/win32/api/ioringapi/nf-ioringapi-createioring

1637814318
andrewrk!~andrewrk@mail.ziglang.org
oh snap according to mingw-w64 it's in NtDll.dll!!

1637819322
marler8997!~marler899@204.229.3.4
andrewrk, I created this python script to dump all the function from the dlls in c:\windows\system32: https://github.com/marler8997/windows-api/blob/master/dll-json-gen

1637819736
marler8997!~marler899@204.229.3.4
interesting I don't see it in any of the exported symbols in any dll on my c:\windows\system32, maybe it's only reachable by ordinal?

1637820330
andrewrk!~andrewrk@mail.ziglang.org
I think it's pretty new

1637823440
daurnimator!~daurnimat@vultr.daurnimator.com
yeah nt io ring is super new

1637851210
koakuma!~koakuma@user/koakuma
Hi, anyone can guide me around the macro-handling part of translate-c?

1637851210
koakuma!~koakuma@user/koakuma
In SPARC there's this problem of macro definitions not imported by translate-c, for example when translating translate_c_macros.h in the behavior tests

1637851210
koakuma!~koakuma@user/koakuma
https://gist.github.com/koachan/52acaa185620191ec29ddca48d65b8de

1637851232
koakuma!~koakuma@user/koakuma
I want to start debugging that one

1637859200
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
hi i'm trying zig on windows with visual studio code and trying to figure out some weirdness

1637859223
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    const fs = std.fs;

1637859223
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    const dir = fs.cwd();

1637859223
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
^ that hangs

1637859245
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    const dir = std.fs.cwd();

1637859246
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
^ works fine

1637859262
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
which dumb thing am i missing here?

1637859321
Franciman!~Franciman@mx1.fracta.dev
what do you mean they hang?

1637859325
Franciman!~Franciman@mx1.fracta.dev
can I see the whole programme?

1637859350
Franciman!~Franciman@mx1.fracta.dev
also I am a sucker for zig confs

1637859352
Franciman!~Franciman@mx1.fracta.dev
want more

1637859376
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
sure let me clean it up for repro

1637859428
Franciman!~Franciman@mx1.fracta.dev
ehi np

1637859561
ScriptDevil!~ScriptDev@202.164.25.5
The two programs should be identical in behavior.

1637859565
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
ohhh that wasn't the problem at all, it was evented io:

1637859565
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
pub const io_mode = .evented;

1637859760
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
const std = @import("std");

1637859760
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
pub const io_mode = .evented;

1637859761
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
pub fn main() !void {

1637859761
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    const stdout = std.io.getStdOut().writer();

1637859762
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    try stdout.print("Started!\n", .{});

1637859762
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    const dir = std.fs.cwd();

1637859763
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    _ = dir;

1637859763
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
    try stdout.print("Opened cwd", .{});

1637859764
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
}

1637859778
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
stops after printing "Started"

1637859791
ckz!~ckz@2601:58a:101:93c7:8427:b3f:dc9b:fc99
in the sense that it's still running but nothing is happening

1637860001
marler8997!~marler899@204.229.3.4
I recal hearing in the compiler talk with Andrew/Ginger Bill that Odin decided to use default function arguments instead of default field initializers, but I don't remember him saying why, anyone else know why he chose that?

1637860084
Franciman!~Franciman@mx1.fracta.dev
ckz: yay

1637860543
slowjo!~slowjo@sourcehut/user/slowjo
 'usingnamespace' doesn't seem to work for me. is it not supposed to be used on the top-level of a file?

1637860601
slowjo!~slowjo@sourcehut/user/slowjo
i.e. declaring 'usingnamespace @import("foo.zig")' in file bar.zig to be able to use all the 'pub' things of foo.zig in bar.zig

1637860703
slowjo!~slowjo@sourcehut/user/slowjo
the compiler just whines about undeclared identifiers when trying to use them in bar.zig

1637861262
slowjo!~slowjo@sourcehut/user/slowjo
i.e. i'd expect this to work https://paste.sr.ht/~slowjo/a03a73c7c8804f8c0db5b7ec5c332652d82bdb34

1637861264
slowjo!~slowjo@sourcehut/user/slowjo
but it doesn't

1637861279
slowjo!~slowjo@sourcehut/user/slowjo
am i using it wrong?

1637861918
tgschultz___!UserNick@047-034-058-084.res.spectrum.com
you're misunderstanding its usage. `usingnamespace` only brings in pub members from the perspective of of things outside the scope that calls it. So if you have `usingnamespace X;` in struct S, `S.some_x_member` will work, but things within S cannot reference X's pub members without qualifying them. However, they can be qualified with `@This().some_x_member` as well as `X.some_x_member`. Does that make sense?

1637861984
tgschultz!UserNick@047-034-058-084.res.spectrum.com
So in your example you can use `@This().bar();`

1637862052
tgschultz!UserNick@047-034-058-084.res.spectrum.com
The purpose of this behavior is to get the benefit of combining namespaces for API purposes, without ambiguity as to where any given symbol is defined.

1637862113
slowjo!~slowjo@sourcehut/user/slowjo
oh

1637862114
slowjo!~slowjo@sourcehut/user/slowjo
wow

1637862116
slowjo!~slowjo@sourcehut/user/slowjo
ok that works

1637862127
slowjo!~slowjo@sourcehut/user/slowjo
thanks for the explanation!

1637862143
tgschultz!UserNick@047-034-058-084.res.spectrum.com
no problem

1637862219
slowjo!~slowjo@sourcehut/user/slowjo
also, another thing i just stumbled upon: "error: TypeInfo.Struct.decls must be empty for @Type"

1637862245
slowjo!~slowjo@sourcehut/user/slowjo
is it completely impossible to programmatically create a struct that has functions declared?

1637862467
tgschultz!UserNick@047-034-058-084.res.spectrum.com
I am actually not sure. Last time I programatically created structs we didn't have @Type(), so it looked a lot different: http://rants.tgschultz.com/A%20Brief%20Tour%20of%20the%20Comptime%20Pseudo-Struct.txt

1637862703
tgschultz!UserNick@047-034-058-084.res.spectrum.com
hmmm... yeah, I can't think of a good way to do what you want. Best I think you can do is to wrap your created type in another struct that has the functions defined.

1637862777
tgschultz!UserNick@047-034-058-084.res.spectrum.com
It might be that decls in @Type are intended to work and just not yet implemented.

1637863391
slowjo!~slowjo@sourcehut/user/slowjo
you really dove deep there ;)

1637863490
slowjo!~slowjo@sourcehut/user/slowjo
thanks for having a look

1637884763
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
hi there

1637884788
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
I am writing a Redis module in Zig and I bump into a compile error

1637884790
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
"error: no align available for type 'c_void'"

