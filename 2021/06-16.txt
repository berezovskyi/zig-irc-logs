1623813891
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
lets go, my pr passes the ci

1623833919
koakuma!~koakuma@user/koakuma
TheLemonMan, hi, your patch works, thanks!

1623833948
koakuma!~koakuma@user/koakuma
stage1 is buildable again here :)

1623833966
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
thanks for checking! the patch will be part of LLVM13

1623860186
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
magic

1623860218
marler8997!~marler899@204.229.3.4
oh wait I see now :)

1623860356
marler8997!~marler899@204.229.3.4
so, since compute is only called once, and it outputs to "huge_table", would the other instance of T just have an uninitialized huge_table?

1623860403
marler8997!~marler899@204.229.3.4
oh each instance of T gets a new instance of once

1623860552
marler8997!~marler899@204.229.3.4
so in your use case, why not just call "compute" in init?

1623860697
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
because I may or may not need the data

1623860830
marler8997!~marler899@204.229.3.4
hmmmm, I think I need more context but it seems like there might be better solutions to both of these use cases

1623860841
marler8997!~marler899@204.229.3.4
the openDb use case seems particularly nefarious to me

1623860868
marler8997!~marler899@204.229.3.4
what's preventing the caller from passing different cfg values?

1623861057
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
is there anything like Java's StringBuilder class in Zig? Or should I just use an ArrayList?

1623861355
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
yes, an arraylist provides more or less the same functionality

1623862470
marler8997!~marler899@204.229.3.4
does rust allow null pointers by default?

1623862495
companion_cube!~simon@user/companion-cube
nope

1623862513
marler8997!~marler899@204.229.3.4
so they also employ some sort of optional tag like Zig?

1623862567
ifreund!~ifreund@user/ifreund
marler8997: they have an "Option" sum type in the standard library 

1623862597
ifreund!~ifreund@user/ifreund
and the compiler has special casing with pointer types to know that it can use the 0 value to implement that type without using extra memory

1623862633
marler8997!~marler899@204.229.3.4
So would it use Option<T*> to declare a pointer argument for an extern C function that can be NULL?

1623862633
companion_cube!~simon@user/companion-cube
(also, pointers are a relatively rare feature, which requires unsafe in practice; people are encouraged to use references and smart pointers instead)

1623862652
companion_cube!~simon@user/companion-cube
Option<NonNullPtr<T>> I think

1623862754
marler8997!~marler899@204.229.3.4
Option<NonNullPtr<T>> lol

1623862772
marler8997!~marler899@204.229.3.4
give me a pointer that can't be null, actually nevermine

1623862817
companion_cube!~simon@user/companion-cube
well this forces you to pattern match

1623862825
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
marler8997, interacting with you drains all my will to live, I'm closing #9028 for the time being

1623862826
companion_cube!~simon@user/companion-cube
you can use * as well but it's more, well, unsafe

1623862845
marler8997!~marler899@204.229.3.4
TheLemonMan, shoot I'm sorry I don't mean to be a drain

1623863006
marler8997!~marler899@204.229.3.4
On the thread about the return value, I feel like there was definitely some miscommunication

1623863137
marler8997!~marler899@204.229.3.4
I feel like both of us have alot of experience and sometimes we have differing opinions which can make it hard to come to consensus sometimes.  But I'm always willing to learn and am not afraid to admit when I'm wrong, so long as you're willing to talk

1623863477
marler8997!~marler899@204.229.3.4
companion_cube, so does * in Rust allow NULL?

1623863499
companion_cube!~simon@user/companion-cube
yes, it does

1623863513
marler8997!~marler899@204.229.3.4
ah, maybe that's what they use for C pointers in the windows bindings then....

1623863552
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the whole point of Once is to be thread-safe, I'm using one in T to make sure the table is only initialized once, only when it's needed, no matter if two or more threads try to initialize it at the same time. The table contents _and_ the parameters are required for the remaining computations so a dangling HugeTable is not really useful.

1623863599
marler8997!~marler899@204.229.3.4
you can pass HugeTable as an extra parameter

1623863622
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
does that sound elegant to you?

1623863641
marler8997!~marler899@204.229.3.4
doesn't sound optimal no

1623863699
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
accepting arguments allows for a number of patterns that right now are not impossible but cumbersome (and/or prone to data races)

1623863742
marler8997!~marler899@204.229.3.4
you're saying if you pass HugeTable as a paremeter it can cause data races?

1623863785
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
you need to put some kind of locking somewhere

1623863797
marler8997!~marler899@204.229.3.4
so you don't calculate the table multiple times?

1623863818
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
that's the idea

1623863834
marler8997!~marler899@204.229.3.4
ok hold on I have to think on this because I haven't really though through all the multithreading of your example

1623863855
nerthus!~nerthus@85.149.146.5
marler8997, are you at all accepting contributions to zigup? I am not well versed in Zig but I think I can implement the handling of directories referenced in issue #13

1623863858
marler8997!~marler899@204.229.3.4
so, multiple threads have an address to the same instance of T?

1623863902
marler8997!~marler899@204.229.3.4
nerthus, I've accepted contributions but I might be a bit of a stickler when it comes to changes :)

1623863923
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
yes, I also wrote that out ("and I want to be able to share T across several threads.") in the ticket

1623863936
nerthus!~nerthus@85.149.146.5
yea g-w1's fork has me on guard on that front, marler8997 hehe

1623863938
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
but it doesn't really matter, I have no interest in pursuing this further

1623863964
marler8997!~marler899@204.229.3.4
but that doesn't mean multiple threads can call "init", maybe you are sharing it after you initialize it, which is quite common

1623864050
marler8997!~marler899@204.229.3.4
TheLemonMan, your use case is kinda hard to wrap one's head around I think

1623864079
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
of course the object is initialized before being shared, init() is called once and the table is only filled _if_ any of the threads working with a given T require it

1623864131
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
it's a pretty simple case of thread-safe lazy-initialization, I wouldn't call that "hard" by any means

1623864171
marler8997!~marler899@204.229.3.4
TheLemonMan, ok yes now that I'm thinking about multithreading more and that this table may or may not be calculated I'm staring to understand

1623864188
marler8997!~marler899@204.229.3.4
so, in your use case, what solution do you use today?

1623864230
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I have my own Once impl

1623864289
marler8997!~marler899@204.229.3.4
got it, ok well you may actually have a valid use case here then, I might need to think on it a bit

1623864326
marler8997!~marler899@204.229.3.4
I see my example doesn't really work because you would have to share the `HugeTable` accross all threads and you're back to the original problem

1623864578
marler8997!~marler899@204.229.3.4
TheLemonMan, what about the second use case, am I missing something there as well?

1623865258
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
marler8997, sqlite's sqlite3_config returns an error if called after the libary's been initialized, there I don't really care about Cfg changing

1623865711
marler8997!~marler899@204.229.3.4
TheLemonMan, I'm not sure where sqlite3_config comes in given your example

1623865747
marler8997!~marler899@204.229.3.4
are you saying that Config is created from calling sqlite3_config, and you can only call it once so there will only be 1 instance of Config?

1623865763
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the examples are intentionally vague not to introduce too many parameters, the focus should be on the use of Once

1623865803
marler8997!~marler899@204.229.3.4
sure, but the point of the example is to demonstrate why Once is needed, and if you remove too much context then you can lose that

1623866274
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
generally speaking arguments let you transfer some parameters from the caller to the callee, without needing extra globals

1623866386
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the changing-parameter problem is not much of a problem given the user understands what "once" in the name stands for

1623867190
andrewrk!~andrewrk@mail.ziglang.org
TheLemonMan, thanks for being patient with me and showing the use cases. I get it now, and I think #9028 should be merged. Mind if I do that now?

1623867249
marler8997!~marler899@204.229.3.4
TheLemonMan, yeah and thanks for being patient with me :)

1623867310
marler8997!~marler899@204.229.3.4
Usually needing globals for std.once isnt' a problem, but you showed a case where you're initializing something that isn't global

1623867680
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
as you wish, not interested in Once anymore and am currently busy hunting down a huge mosquito

1623867721
freshcoffee!~fresh@user/freshcoffee
like Jumanji big mosquito? terrifying

1623868006
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
time to burn down the whole house

1623868052
freshcoffee!~fresh@user/freshcoffee
TheLemonMan: btw are you ok with #9131 ? The first commit simply adds those 2 args on netbsd and it gets us to a good place IMO

1623868088
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
yep, that's the best we can do right now

1623868162
freshcoffee!~fresh@user/freshcoffee
this means all the BSDs are in a good place (caveat: openbsd requires lld to have minor patches)

1623868436
jcmoyer!~jcmoyer@user/jcmoyer
TheLemonMan: do you know what the timeline looks like for #8637 being merged? I don't really have anything to add but I'd like to close #9129 if it's far off

1623868447
jcmoyer!~jcmoyer@user/jcmoyer
er, if it's close*

1623868767
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
jcmoyer, the whole discussion about Held looks orthogonal to the PR, gotta check with andrewrk and/or kprotty[m] if they want to do more work on that before merging

1623868772
andrewrk!~andrewrk@mail.ziglang.org
g-w1, 9047 looks ready to merge to me, yeah? I'm reviewing it now

1623868955
jcmoyer!~jcmoyer@user/jcmoyer
TheLemonMan: alright, thanks for taking a look

1623869125
andrewrk!~andrewrk@mail.ziglang.org
jcmoyer, I'll have another look

1623869752
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: its ready

1623869755
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks

1623869779
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
when you click on the freebsd ci, it says sucess, but its still yellow

1623869813
andrewrk!~andrewrk@mail.ziglang.org
saw that, thanks

1623869902
andrewrk!~andrewrk@mail.ziglang.org
I think this is motivating enough for me to enable stage2 AstGen even for the stage1 compiler

1623869915
andrewrk!~andrewrk@mail.ziglang.org
just for the extra compile errors

1623869927
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah, it should be trivial to hook it into @import, the only hard part will be caching integration

1623869945
marler8997!~marler899@204.229.3.4
oh wow that would be a big change

1623869945
andrewrk!~andrewrk@mail.ziglang.org
I think it will be easy actually because the main loop is already in stage2

1623869965
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so just save some state?

1623869973
andrewrk!~andrewrk@mail.ziglang.org
marler8997, std lib already has to conform because it gets checked with the stage2 tests. but it would break non-std lib user code 

1623869995
andrewrk!~andrewrk@mail.ziglang.org
g-w1, not sure what your question is, but this might even be a 1-liner 

1623870003
ifreund!~ifreund@user/ifreund
that would be pretty sweet, I guess that won't make it into 0.8.1 though...

1623870007
andrewrk!~andrewrk@mail.ziglang.org
certainly not

1623870039
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah, it would be pretty close to a one liner

1623870041
andrewrk!~andrewrk@mail.ziglang.org
I didn't get nearly as much breaking changes into 0.8.0 as I wanted to. oh well. 0.9.0 will be a hell of a release

1623870218
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its also a testament to how nice the structure of stage2 is that this took very little code; almost all of the effort was in updating the code

1623870252
ifreund!~ifreund@user/ifreund
yeah, it definitely doesn

1623870274
ifreund!~ifreund@user/ifreund
*doesn't belong in 0.8.1. I'm just sad that I have to wait for 0.9.0 to benefit

1623870374
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
:( could you still run ast-check with master on the ci just to check people's code?

1623870465
ifreund!~ifreund@user/ifreund
probably not without a lot of effort, there have already been breaking changes in e.g. std.build

1623870478
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ast-check knows nothing about stdlib

1623870561
ifreund!~ifreund@user/ifreund
oh hmm, I'll try that

1623870592
ifreund!~ifreund@user/ifreund
I think I'd have to point the zig lib dir to the 0.8.0 lib dir

1623870598
ifreund!~ifreund@user/ifreund
but that should be fine in theory

1623870619
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
why? ast-check does not need anything besides the zig binary

1623870640
ifreund!~ifreund@user/ifreund
my code uses the std though, would zig-ast-check not import the wrong std?

1623870648
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it doesn't follow imports

1623870658
ifreund!~ifreund@user/ifreund
right, forgot about that

1623870667
ifreund!~ifreund@user/ifreund
ok yeah that should work fine then

1623870681
ifreund!~ifreund@user/ifreund
I'll see if I can get that rigged up later today

1623870690
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cool

1623870711
ifreund!~ifreund@user/ifreund
then I'm going to pull my zig build --libc patch into void's zig 0.8.0 and see if I can't cross compile rundird

1623870735
ifreund!~ifreund@user/ifreund
if that works then cross compiling river should work too

1623870780
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cool

1623873905
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
woah, i'm learning about the x64 instruction set encoding, and its amazing how compact it can be

1623874925
freshcoffee!~fresh@user/freshcoffee
andrewrk: any objections to merging #9103 ?

1623879567
ominitay!~renami@90.204.168.166
Hi!

