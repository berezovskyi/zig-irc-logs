1626656490
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ACTION afk for 4 weeks

1626703432
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
o/ is static linking supported on 0.8? I have a libc-using application that I'd like to create a statically linked binary for, but compiling with -target x86_64-linux-musl results in "dynamically linked, interpreter /lib/ld-musl-x86_64.so.1" 

1626703478
ikskuh!~xq@2a0d:5940:6:163::ad7e
Ayo: should be supported

1626703498
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
zig build-exe -static fails even faster, throws a "UnableToStaticLink" error

1626703504
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1626703512
ikskuh!~xq@2a0d:5940:6:163::ad7e
are you linking dynamic libraries? :D

1626703519
ikskuh!~xq@2a0d:5940:6:163::ad7e
can you show the full invocation?

1626703575
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Ah, I am linking against a C library

1626703614
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
For which I built a static .a lib, but I can imagine Zig getting confused there

1626703662
ikskuh!~xq@2a0d:5940:6:163::ad7e
how do you link against it?

1626703665
ikskuh!~xq@2a0d:5940:6:163::ad7e
build.zig or cli?

1626703779
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
tried both, with the cli using -lname. I tried replacing that -lname with the path to the .a file and it seems to succeed now

1626703821
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep, that's the correct thing

1626703829
ikskuh!~xq@2a0d:5940:6:163::ad7e
a ".a" file is just a fancy object file

1626704008
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
"ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked" \o/

1626704014
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Yup that did it, thanks

1626704022
ikskuh!~xq@2a0d:5940:6:163::ad7e
happy hacking!

1626712587
marler8997!~marler899@204.229.3.4
g-w1, thanks, for some reason the publisher program failed to push to github

1626712851
marler8997!~marler899@204.229.3.4
here's the full publisher log if anyone is interested, the last "git push" command was rejected by github but it doesn't say why

1626712856
marler8997!~marler899@204.229.3.4
https://gist.github.com/marler8997/f841a17400a643f9d2e70534feebdd20

1626712895
marler8997!~marler899@204.229.3.4
in this case though, the irc client and the publisher are separate processes, so no irc messages were dropped, I just had to restart the publisher process

1626712915
marler8997!~marler899@204.229.3.4
when I find time, the plan is to be able to have multiple clients and then a process to merge all of them at the end

1626721820
luuk!~luuk@user/luuk
andrewrk: I noticed that in the stage2-air branch, you removed the `bool_and` and `bool_or` instructions. Do those impact AIR as well? Because this is the AIR generated for `bool_or` currently: https://zigbin.io/6885ab

1626721869
andrewrk!~andrewrk@mail.ziglang.org
I think bool_and and bool_or are currently never generated

1626721914
luuk!~luuk@user/luuk
Is that simply not done yet due to rework? Because it used to work pre-memory-refactoring

1626721936
andrewrk!~andrewrk@mail.ziglang.org
the test case should work, but it does not utilize those AIR instructions

1626721944
andrewrk!~andrewrk@mail.ziglang.org
I believe that is true even in master

1626721974
andrewrk!~andrewrk@mail.ziglang.org
is the debug printing missing for that block?

1626721985
andrewrk!~andrewrk@mail.ziglang.org
I think there's supposed to at least be a br 

1626721991
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
andrewrk wake up you got a stream to attend

1626722009
luuk!~luuk@user/luuk
Let me verify that, because block debug printing is implemented currently.

1626722037
andrewrk!~andrewrk@mail.ziglang.org
it might be useful to compare with the AIR printing for the same test case in master

1626722092
luuk!~luuk@user/luuk
Good call, will do that

1626722137
luuk!~luuk@user/luuk
This is currently the only test case (with switch) that is failing. After I fix this, wasm codegen test cases all pass :)

1626722244
andrewrk!~andrewrk@mail.ziglang.org
nice! I'm working on switch btw

1626722260
luuk!~luuk@user/luuk
andrewrk: You are right, this is what master generates: https://zigbin.io/e83ac8

1626722440
luuk!~luuk@user/luuk
Ah interesting, the block is empty.

1626722466
andrewrk!~andrewrk@mail.ziglang.org
perhaps a regression in Sema

1626722557
luuk!~luuk@user/luuk
Gotcha, thanks

1626722600
luuk!~luuk@user/luuk
Ah, apparently you have some stream to do. Sorry for holding you up.

1626722935
andrewrk!~andrewrk@mail.ziglang.org
haha no worries

1626723190
companion_cube!~simon@user/companion-cube
oh, pair programming :o

1626724545
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
aww luuk apologized? :sad:

1626726249
luuk!~luuk@user/luuk
andrewrk: Managed to fix the regression for zirBoolBr, now all wasm tests succeed! I made the Sema fix part of the wasm fixes PR if you don't mind. If you do, let me know and I'll split the commits in seperate PR's.

1626726517
qball!~qball@user/qball
question, how well is riscv 32 bit supported? (is there a lib c for it?) I did not see it on https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html

1626726742
luuk!~luuk@user/luuk
qball: It's currently tier 4 https://ziglang.org/download/0.8.0/release-notes.html#Tier-4-Support so I assume it's not well-supported right now

1626726756
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
qball: I don't think there is much support for riscv32 it is only tier 4

1626726765
wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
...or what luuk said ;)

1626731736
andrewrk!~andrewrk@mail.ziglang.org
very nice luuk!

1626731804
luuk!~luuk@user/luuk
Thanks, glad I've been able to help so far :)

1626733460
andrewrk!~andrewrk@mail.ziglang.org
luuk, do you know if wasm switch branches let you map multiple items to the same body?

1626733507
andrewrk!~andrewrk@mail.ziglang.org
also what document are you using for reference on the encoding?

1626733542
andrewrk!~andrewrk@mail.ziglang.org
this? https://webassembly.github.io/spec/core/bikeshed/

1626733617
andrewrk!~andrewrk@mail.ziglang.org
ah looks like br_table

1626733760
andrewrk!~andrewrk@mail.ziglang.org
so looks like yes you can put multiple different items mapping to the same label in wasm

1626736396
qball!~qball@user/qball
thx

1626738005
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Hey guys, what's going on.

1626738093
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
A quick question: is there a way to hide a module's implementation in zig? I was playing around with that generic list example in the documentation yesterday, and I noticed that the 'items' member of the anonymous struct is public regardless of whether the List function is pub or not. In fact, it looks like struct members are always public like C, even anonymous ones, but I'm not sure if something like an opqaue pointer is possible in Zig?

1626738172
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
I also tried creating a separate struct "Impl" and make it private to the module. But that only makes the name private; if you poke around hard enough, you always seem to be able to access struct fields regardless of how the struct is defined.

1626738216
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Maybe an example would help, but hopefully you get the question? So what is the idiomatic way to hide an implementation in Zig?

1626738847
ifreund!~ifreund@user/ifreund
Jeanne-Kamikaze: the idiomatic way is to not hide the data fields of the struct in any way, see for example std.HashMap

1626738897
ifreund!~ifreund@user/ifreund
if you don't care about being idiomatic and want to try and hide them anyways, you can @ptrCast() and only expose an opaque type publicly

1626738924
ifreund!~ifreund@user/ifreund
if users of your API shouldn't touch some field, put that in a /// doc comment

1626738948
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
I see.

1626739030
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
I do kind of wish there was at least a stronger convention for private fields, do people ever use a leading underscore for that like in Python?

1626739065
ifreund!~ifreund@user/ifreund
nothing in the std or self hosted compiler does

1626739105
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
People don't always read docstrings as much as they should :) a hint in the code (or some way to enforce privacy) would be nice IMO

1626739161
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
Given functions and other struct declarations can be pub or private I'm not really sure I see what the fundamental difference with the fields is

