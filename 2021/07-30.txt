1627603295
Snektron!~snektron@2001:470:69fc:105::1789
look out that the garbage collector doesnt collect llvm 

1627603330
andrewrk!~andrewrk@mail.ziglang.org
sick_burn.gif

1627606917
andrewrk!~andrewrk@mail.ziglang.org
well that was extremely straightforward

1627612744
Nulo!~Nulo@user/nulo
error: unable to evaluate constant expression;     if (Heading.parse(trimmed)) |result| {

1627612754
Nulo!~Nulo@user/nulo
I am so very confused, what does it mean?

1627614125
Nulo!~Nulo@user/nulo
It seems to be an issue of the comptime logic inside that function but it doesn't specify what

1627616221
elerch!~elerch@50.39.101.17
I have a test that is generating "broken LLVM module found: operand is null" during compilation. Tried with latest nightly with same results. Any tips and tricks to track this down?

1627623527
andrewrk!~andrewrk@mail.ziglang.org
elerch, it's unfortunately a compiler bug when this happens. if you manage to look at the llvm ir there will be metadata in there that can lead you to a source location in your zig code

1627624305
elerch!~elerch@50.39.101.17
Ok, thanks. My current test case is quite complicated but if the metadata gets me close enough I will get a reduced repro to file an issue.

1627626816
andrewrk!~andrewrk@mail.ziglang.org
sorry for the trouble

1627626837
andrewrk!~andrewrk@mail.ziglang.org
I can at least assure you that I am very hard at work on the self-hosted compiler

1627631761
ikskuh!~xq@2a0d:5940:6:163::ad7e
ifreund: i was panicking for a second when reading your comment on #7942

1627631774
ikskuh!~xq@2a0d:5940:6:163::ad7e
because i ignored the issue title /o\

1627655819
olabian!~olabian@ool-4576796d.dyn.optonline.net
Hi, what is the easiest way to fix: error: expected type '[][]const u8', found '[3][]const u8'

1627655866
olabian!~olabian@ool-4576796d.dyn.optonline.net
I seem to always run into this issue when passing parameters to functions

1627655910
ifreund!~ifreund@user/ifreund
olabian: add a & to take a pointer to your array of slices

1627655920
ifreund!~ifreund@user/ifreund
*[3][]const u8 will coerce to [][]const u8

1627655943
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok, thanks I'll try that

1627662699
Nulo!~Nulo@user/nulo
https://0x0.st/-WnG.zig This causes the compiler to segfault

1627662729
Nulo!~Nulo@user/nulo
It's because of the things around line 132 (it started segfaulting when I wrote that)

1627662901
Nulo!~Nulo@user/nulo
Confirmed 0.8.0 and master

1627667365
luuk!~luuk@user/luuk
andrewrk: Sorry, I wasn't online last night to answer your questions. It seems like ifreund managed to do so though. If there's any further questions you have, I'm happy to help :)

1627667440
luuk!~luuk@user/luuk
Just to confirm: ifreund is right that gen() is the entry point of the linker that generates code for a section (either function, function type, or data section, depending on the type of the decl). emitConstant() is used to emit a memoized constant onto the stack within a function body.

1627667567
ifreund!~ifreund@user/ifreund
luuk: so do we just put e.g. a global integer in the data section as well?

1627667586
ifreund!~ifreund@user/ifreund
that is, do we use the "globals" wasm section for anything?

1627667591
luuk!~luuk@user/luuk
Not yet

1627667598
luuk!~luuk@user/luuk
Right now, that .Int is used for the array

1627667628
ifreund!~ifreund@user/ifreund
yeah, I gathered that, though realized later that it would also be fine to just stick a lone int in the data section

1627667648
ifreund!~ifreund@user/ifreund
but there's got to be some reason the wasm spec has a "globals" section right?

1627667691
luuk!~luuk@user/luuk
Right now I see it mostly being used between tools to communicate some stack pointer, or specific offsets into data

1627667746
luuk!~luuk@user/luuk
But you're definitely right we can stick lone ints into the data section

1627667806
luuk!~luuk@user/luuk
But we could potentially use the "globals" section if we want to notate some offset for compiler usage, as we can annote a global to be immutable. Whereas the data section is mutable by the user, and could therefore overwrite anything we put in there (such as the offset table we use right now for the decls).

1627667898
ifreund!~ifreund@user/ifreund
makes sense

1627669911
andrewrk!~andrewrk@mail.ziglang.org
just fantasizing a little bit, what if the compiler when you used --watch, provided a http://localhost:1234/ url where you could have a GUI and explore your code (with full knowledge about the types, docs, and machine code that the compiler has access to)

1627669949
andrewrk!~andrewrk@mail.ziglang.org
maybe it would also be how you launched hot code reloading or watched a graph of memory usage over time, allowed you to rename variables and do other high level refactoring tasks

1627669961
ifreund!~ifreund@user/ifreund
implementing such a gui sounds totally out of scope for the compiler itself IMO

1627669982
ifreund!~ifreund@user/ifreund
now exposing all that data in some structured way so that someone else could implement that gui on the other hand...

1627669996
luuk!~luuk@user/luuk
Reminds me of those tools that you have for Android/iOS. They offer exactly those kind of features

1627670044
andrewrk!~andrewrk@mail.ziglang.org
I definitely agree ifreund but allow me to fantasize a little further

1627670055
luuk!~luuk@user/luuk
Perhaps have the compiler expose an API instead, and have *any* tool be the one responsible of displaying this data?

1627670056
ifreund!~ifreund@user/ifreund
:D

1627670069
ifreund!~ifreund@user/ifreund
that would be super sick

1627670076
andrewrk!~andrewrk@mail.ziglang.org
this would be a way you could ship a cross platform IDE with a compiler, while keeping the tarball ~50 MiB

1627670084
andrewrk!~andrewrk@mail.ziglang.org
it's just a browser app

1627670106
companion_cube!~simon@user/companion-cube
who wants to use a browser app as an IDE, though

1627670110
ifreund!~ifreund@user/ifreund
then you have a dependence on (fully featured?) web browser though

1627670118
companion_cube!~simon@user/companion-cube
use imgui, it'll be faster :)

1627670119
ifreund!~ifreund@user/ifreund
which I think many people would hate

1627670126
andrewrk!~andrewrk@mail.ziglang.org
true but that's a pretty safe dependency

1627670169
andrewrk!~andrewrk@mail.ziglang.org
a native gui experience would be superior, clearly, but the ability to have the same experience anywhere - even if you don't have physical access to the machine - is definitely a feature

1627670172
ifreund!~ifreund@user/ifreund
I'm planning on writing a nice simple immediate mode gui lib for zig at some point, if the compiler outputs data I'll totally make a fast native frontend

1627670176
andrewrk!~andrewrk@mail.ziglang.org
how many times have you run vim in ssh?

1627670185
companion_cube!~simon@user/companion-cube
pretty regularly :p

1627670195
ifreund!~ifreund@user/ifreund
yeah, text editing over ssh is pretty critical

1627670262
companion_cube!~simon@user/companion-cube
also sometimes you run a compiler in a headless machine (like a VM for CI)

1627670273
companion_cube!~simon@user/companion-cube
(ofc I imagine you just have to not open URLs)

1627670358
ifreund!~ifreund@user/ifreund
gui wouldn't be required to compile stuff, it would be an optional development tool

1627670365
ifreund!~ifreund@user/ifreund
like a debugger or profiler

1627670387
andrewrk!~andrewrk@mail.ziglang.org
I bet you if this existed, 95% of zig programmers would use it. everybody is too lazy to set up their environment, especially when shit just breaks for no reason. if you can just get an experience that is "good enough" but always works, that's what people will gravitate towards

1627670428
andrewrk!~andrewrk@mail.ziglang.org
anyway, back to reality. the actual in scope task is to have the compiler act as a server that provides enough information that a third party project could make this

1627670444
companion_cube!~simon@user/companion-cube
sounds better imho

1627670471
companion_cube!~simon@user/companion-cube
there's already scope for a web UI, a imgui UI, a LSP server that uses that kind of info to provide cool code actionsâ€¦

1627670525
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: i'd think a "official ide" is not that good as proper editor integration support

1627672389
andrewrk!~andrewrk@mail.ziglang.org
agreed

1627673050
Nulo!~Nulo@user/nulo
ifreund, I'm interested in Zig IMGUI, if you do something I would love to help! (I'm also experimenting with it myself)

1627673141
ifreund!~ifreund@user/ifreund
Nulo: I probably wont get started on anything myself for several months at least, I've got too many other things I'm working on currently

1627673182
earnestly!~earnest@user/earnestly
It would be interesting to see an example of a small non-immediate mode gui

1627673232
ifreund!~ifreund@user/ifreund
earnestly: I may very well try that too

1627673254
ifreund!~ifreund@user/ifreund
I think there's a lot of ground to be explored here with the flexibility of zig's comptime

1627673277
ifreund!~ifreund@user/ifreund
I kinda want the stage2 compiler done first before I write too much comptime heavy code though

1627673471
companion_cube!~simon@user/companion-cube
earnestly: like, Tk?

1627673741
earnestly!~earnest@user/earnestly
companion_cube: Yeah, perhaps on top of recent graphics apis.  "Retained mode" apparently

1627674250
companion_cube!~simon@user/companion-cube
a modern Tk would be awesome

1627674348
ikskuh!~xq@2a0d:5940:6:163::ad7e
Nulo: i have a working pure zig imgui imgui impl running

1627674370
Nulo!~Nulo@user/nulo
ikskuh, send it please! :D

1627674378
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/MasterQ32/zero-graphics/

1627674379
ikskuh!~xq@2a0d:5940:6:163::ad7e
enjoy!

1627674388
ikskuh!~xq@2a0d:5940:6:163::ad7e
runs on android, sdl2 and wasm(without input)

1627674395
ikskuh!~xq@2a0d:5940:6:163::ad7e
wasm input is due to "when i need it"

1627674487
ikskuh!~xq@2a0d:5940:6:163::ad7e
no text input yet, but that's just general lazyness

1627674740
Nulo!~Nulo@user/nulo
Will try

1627678703
andrewrk!~andrewrk@mail.ziglang.org
ifreund, idk if you saw but I merged the stage2 comptime memory management fixes yesterday, we're looking real good in terms of clean design of comptime stuff

1627678744
andrewrk!~andrewrk@mail.ziglang.org
gonna be honest, it has been difficult to motivate myself to work on getting 0.8.1 done with all the exciting progress happening on self hosted

1627679067
ifreund!~ifreund@user/ifreund
andrewrk: very nice, thanks for the excellent commit messages

1627679094
ifreund!~ifreund@user/ifreund
have you given any thought to #131 while this stuff is fresh in your head?

1627679126
ifreund!~ifreund@user/ifreund
it seems like the earlier we implement that the easier it will be

1627679150
ifreund!~ifreund@user/ifreund
(maybe the current design is already fine, I haven't looked in enough depth/tried it)

1627680294
andrewrk!~andrewrk@mail.ziglang.org
oh yeah this old issue :) let me take another look

1627680824
ifreund!~ifreund@user/ifreund
the reason I keep bringing it up is because it's required to be able to interface with libwayland in some ways without doing the self-referential stuff in C

1627680836
ifreund!~ifreund@user/ifreund
(which is what river does currently)

1627681566
andrewrk!~andrewrk@mail.ziglang.org
yeah I'm glad you brought it up and it's a great time to lock it in with a test case

1627682317
andrewrk!~andrewrk@mail.ziglang.org
hmm I might want to make the test case `const a: Node = .{ .next = &b };` (with the type independently discoverable from the value)

1627682376
ifreund!~ifreund@user/ifreund
Indeed, that might be a bit trickier

1627682438
ifreund!~ifreund@user/ifreund
I suppose `const a: Node = .{ .next = &a };` wouldn't really need any special casing, but might be nice to have as well just in case

1627682447
ifreund!~ifreund@user/ifreund
sounds like it currently works in stage2 though?

1627682515
andrewrk!~andrewrk@mail.ziglang.org
nope I'm hitting a crash due to there being no mechanism yet which supports referencing a Decl for which only the type has been resolved, but not the value

1627682561
andrewrk!~andrewrk@mail.ziglang.org
or in other words, currently in stage2 any reference to another Decl at all causes both type and value resolution

1627682603
ifreund!~ifreund@user/ifreund
I see, and what we need is for a reference that only cares about the address to resolve the type but not the value

1627682639
andrewrk!~andrewrk@mail.ziglang.org
right. the main challenge of solving this is doing it in a way that doesn't make it easy to introduce bugs elsewhere in semantic analysis

1627682659
ifreund!~ifreund@user/ifreund
yeah, I tried to hack this into stage1 and it was a mess

1627682676
ifreund!~ifreund@user/ifreund
I had some trivial test case working iirc but it caused bugs everywhere

1627682710
andrewrk!~andrewrk@mail.ziglang.org
anyway good call on bringing this issue up, I will proritize it this week :)

1627682733
ifreund!~ifreund@user/ifreund
thanks!

