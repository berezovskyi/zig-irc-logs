1626049194
wild_buffalo!~weechat@75.154.75.196
Hi, how can I do an associative array in zig?

1626049300
wild_buffalo!~weechat@75.154.75.196
I'm skimming over the stdlib and I can see that ther eare a variety of hashes available, but I haven't found on the documentation what's the idiom for that

1626050749
andrewrk!~andrewrk@mail.ziglang.org
wild_buffalo, sounds like you want std.AutoHashMap or std.AutoArrayHashMap

1626050860
frett27!~frett27@2a01:e0a:58a:6c00:a4e9:6a0f:ff6f:c215
@ifreund , https://github.com/ziglang/zig/pull/9359

1626057051
wild_buffalo!~weechat@75.154.75.196
andrewrk: thanks, I'll check those out

1626096532
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
Has arg_names ever worked?

1626096536
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
I see the issue: https://github.com/ziglang/zig/issues/8259

1626096546
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
Was this a regression, or something that was never implemented?

1626096556
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
arg_names as in std.builtin.TypeInfo.Declaration.data.Fn.arg_names

1626096695
ifreund!~ifreund@user/ifreund
I don't suspect that this was ever working

1626100140
euandreh!~euandreh@2804:14c:33:9fe5:3720:61ec:ee32:2ddc
I did a "git log -pS arg_names" and indeed didn't find any code that looks like implementation, other than type declarations.

1626110022
ifreund!~ifreund@user/ifreund
anyone see a cleaner/more efficient way to write this? https://zigbin.io/928f2c

1626110062
ifreund!~ifreund@user/ifreund
removal is really nice (just fetchRemove() -> free key) but insertion with an owned key feels painful to do efficiently

1626110139
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
test

1626111105
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
haze: 5/5 copy that

1626111119
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thank you master dok

1626111122
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
hope you're having a good day today

1626111195
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
yes, but I am not zig master, ... yet ?

1626111235
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i didnt say zig master 

1626111305
dok!~dok@2a01:e0a:12:d860:ba27:ebff:fe84:fd10
true true

1626112225
andrewrk!~andrewrk@mail.ziglang.org
ifreund, hmm why only remove from the config on error there?

1626112248
andrewrk!~andrewrk@mail.ziglang.org
oh that's the map itself. nvm I thought that was a separate object

1626112288
andrewrk!~andrewrk@mail.ziglang.org
that does look a bit tricky but at least you can wrap that logic in a function

1626112331
andrewrk!~andrewrk@mail.ziglang.org
efficiency wise that seems optimal to me

1626112487
ifreund!~ifreund@user/ifreund
andrewrk: yeah, I think what I have is optimal now (though I needed to wrap the remove in assert() to compile)

1626112511
ifreund!~ifreund@user/ifreund
I'm mostly thinking if there's some other API we could expose to make this cleaner without sacrificing that efficency 

1626112527
ifreund!~ifreund@user/ifreund
I couldn't come up with anything though

1626114281
ifreund!~ifreund@user/ifreund
hrm, CI seems broken :/

1626114526
marler8997!~marler899@204.229.3.4
test

1626114531
luuk!~luuk@user/luuk
works

1626114556
andrewrk!~andrewrk@mail.ziglang.org
ifreund, is it the macos thing? looks like s3cmd pkg broke in homebrew

1626114568
andrewrk!~andrewrk@mail.ziglang.org
need that to upload macos tarballs unfortunately

1626114615
ifreund!~ifreund@user/ifreund
andrewrk: no, I think it's something else. Though looking at other PRs it may be an issue uncovered by my fix: https://github.com/ziglang/zig/pull/9365

1626114663
andrewrk!~andrewrk@mail.ziglang.org
mm I see, I'll test your fix locally 

1626114752
ifreund!~ifreund@user/ifreund
I just started running the full std tests locally to see if I can reproduce, only ran that one test I added before pushing the commit

1626114922
ifreund!~ifreund@user/ifreund
the failing output from the CI doesn't make it very clear which test is failing

1626114980
andrewrk!~andrewrk@mail.ziglang.org
ifreund, ğŸ¤” could put some logic into ArrayList and std lib hash maps that check builtin.is_test and makes capacity always the minimum requested

1626114992
andrewrk!~andrewrk@mail.ziglang.org
that might be prohibitively slow though

1626115047
ifreund!~ifreund@user/ifreund
the idea being to prevent bugs like this in the future? Or to debug the current failure?

1626115053
andrewrk!~andrewrk@mail.ziglang.org
prevent bugs in the future

1626115085
ifreund!~ifreund@user/ifreund
I think adding tests like the one I added in this commit should be enough for that

1626115122
andrewrk!~andrewrk@mail.ziglang.org
to be clear the bug is accidentally getting "lucky" when using fooAssumeCapacity methods 

1626115133
andrewrk!~andrewrk@mail.ziglang.org
with an incorrect ensureCapacity call earlier

1626115160
ifreund!~ifreund@user/ifreund
ah, yeah I see

1626115187
ifreund!~ifreund@user/ifreund
I wonder how slow that would be in practice, I imagine probitively slow for some code 

1626115199
ifreund!~ifreund@user/ifreund
append becomes O(N) instead of O(1) ammortized

1626115204
andrewrk!~andrewrk@mail.ziglang.org
yeah

1626115283
andrewrk!~andrewrk@mail.ziglang.org
could also be solved with an extra field in debug builds 

1626115290
andrewrk!~andrewrk@mail.ziglang.org
just to check the fooAssumeCapacity calls

1626115318
ifreund!~ifreund@user/ifreund
that would be better yeah

1626115335
ifreund!~ifreund@user/ifreund
well, I got a test failure locally but I don't think it's the same one as on the CI: https://0x0.st/-OWL.txt

1626115352
andrewrk!~andrewrk@mail.ziglang.org
I just got that too :-/ must be due to my recent C backend changes

1626115385
andrewrk!~andrewrk@mail.ziglang.org
looks like I better pay off some technical debt today before doing more stage2 work

1626115619
andrewrk!~andrewrk@mail.ziglang.org
ifreund, this code looks fine to me: https://github.com/ziglang/zig/blob/3063f0a5ed373947badd0af056db310283c76e37/src/link/C.zig#L210-L223

1626115627
andrewrk!~andrewrk@mail.ziglang.org
with respect to ensureCapacity

1626115635
andrewrk!~andrewrk@mail.ziglang.org
mm I wonder if this is a determinism thing

1626115831
ifreund!~ifreund@user/ifreund
yeah I don't see any capacity bug there either

1626115886
andrewrk!~andrewrk@mail.ziglang.org
another weird error I get in this branch but not master: https://clbin.com/D28sk

1626115916
andrewrk!~andrewrk@mail.ziglang.org
it runs valgrind clean though, and this is a debug build. I'm confused

1626115945
ifreund!~ifreund@user/ifreund
strange

1626116081
andrewrk!~andrewrk@mail.ziglang.org
I'll dig into this

1626116122
ifreund!~ifreund@user/ifreund
alright cool, I'm going to go back to trying to get my year-old gtk patch merged

1626116144
ifreund!~ifreund@user/ifreund
glad I stumbled upon this though, seems to have uncovered a nasty bug somewhere

1626116168
andrewrk!~andrewrk@mail.ziglang.org
yeah

1626118766
andrewrk!~andrewrk@mail.ziglang.org
ifreund, sorry I accidentally forgot to not rebase, do you care if I force push to ifreund-hash-map-fix ?

1626118790
ifreund!~ifreund@user/ifreund
andrewrk: go for it

1626118927
andrewrk!~andrewrk@mail.ziglang.org
ifreund, ok pushed. I won't mangle the history in that branch again

1626118965
andrewrk!~andrewrk@mail.ziglang.org
this gets us past that c backend errors in the test suite

1626118969
ifreund!~ifreund@user/ifreund
nice catch, you were right on with the determinism thing

1626119016
andrewrk!~andrewrk@mail.ziglang.org
the other weird error was because I accidentally had an old lib/ dir sitting around and it got picked up instead of the intended one in the zig source tree

1626119202
anb!~anb@user/anb
Is the execute order guaranteed to be what it looks like in struct initialization? e.g. in .{ .foo = parse(buf), .bar = parse(buf), }, will foo always be parsed from buf before bar?

1626119219
ifreund!~ifreund@user/ifreund
yes

1626119220
andrewrk!~andrewrk@mail.ziglang.org
yes, declaration order

1626119228
ifreund!~ifreund@user/ifreund
(C++ was such a mistake)

1626119241
andrewrk!~andrewrk@mail.ziglang.org
however keep in mind zig is allowed to re-order loads and stores (unless volatile/atomics are used)

1626119317
andrewrk!~andrewrk@mail.ziglang.org
I wonder if the hash map fix will improve perf

1626119367
anb!~anb@user/anb
Thank you guys. 

1626119483
andrewrk!~andrewrk@mail.ziglang.org
oops I should be clear: not declaration order of the fields, but expression order in the .{ } expression (exactly what you would expect)

1626119619
anb!~anb@user/anb
Ah, understood.

1626121828
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: https://github.com/ziglang/zig/issues/9367 is caused by // TODO remove this special case when 0.9.0 is released. const block_expr: Node.Index = if (p.eatToken(.semicolon) != null) 0 else try p.expectBlockExprStatement(); this in the parser

1626121843
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
should the commit be reverted, or the special case in the parser be removed?

1626122223
andrewrk!~andrewrk@mail.ziglang.org
`suspend;` should now be a parse error

1626122238
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks.

1626123488
andrewrk!~andrewrk@mail.ziglang.org
ifreund, huh. with that commit all tests passed for me locally

1626123506
andrewrk!~andrewrk@mail.ziglang.org
the only other factor I can think of is that I rebased against master

1626123522
andrewrk!~andrewrk@mail.ziglang.org
maybe you forked off of an old commit?

1626123636
ifreund!~ifreund@user/ifreund
that could be, I don't remember pulling today

1626123665
ifreund!~ifreund@user/ifreund
if the azure CI passes as well I'll merge it

1626123858
andrewrk!~andrewrk@mail.ziglang.org
sounds good

1626129469
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: could you rename liveness.zig -> Liveness.zig in CMakeLists.txt in stage2-air? I didn't want to make a pr as it is very minor 

1626129795
andrewrk!~andrewrk@mail.ziglang.org
g-w1, done. I recommend to build master in release mode, then switch to this branch, and use `./zig build -p zig-out -Dskip-install-lib-files -Dskip-non-native`

1626129821
andrewrk!~andrewrk@mail.ziglang.org
saves a lot of time. I'm getting compile errors after waiting only 4 seconds

1626129821
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, thanks

1626129853
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i'm using the tarball, but wanted to see if it could build from cmake

1626129872
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I guess build release is even better than the tarball

1626130038
andrewrk!~andrewrk@mail.ziglang.org
I can probably get it compiling soon if I comment out the big switch statement and then start uncommenting it one by one. that will let us do the text dumping at the same time too

1626131192
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
switch statement in sema.zig? or codegen? or both ;)

