1615077895
qbit
does anyone have an example of a build.zig that does native and cross compile ?

1615077949
qbit
oh.. -Dtarget :D

1615078019
g-w1
you can also set the target if you want it to be different in build.zig

1615078166
qbit
sweet

1615078210
qbit
my grand plan won't work anyway.. seems macos' SDL stuff is too different to openbsd

1615078246
qbit
trying to compile zig-gorillas on openbsd so i can plan it on my m1 (in rosetta)

1615084681
daurnimator
g-w1: I wrote a terminfo parser

1615084858
g-w1
in zig? I saw the lua one :)

1615084872
daurnimator
g-w1: yes

1615084917
daurnimator
infact its a port of my lua one ;)

1615084950
g-w1
can you link :O ?

1615085015
daurnimator
g-w1:

1615085036
daurnimator
I did a little more work on it but didn't push it up

1615085204
g-w1
nice :)

1615102172
mikdusan
andrewrk: "simplest" option to start publishing zig-macos-aarch64 tarballs is to:

1615102188
mikdusan
- add another azure job on x86_64 macos-10.15 vm

1615102234
mikdusan
- use xcode-12.4 or higher (it's available) to produce arm64 target

1615102290
mikdusan
- built against a llvm+clang+lld that I can spin pretty quickly with arm64 arch target

1615102328
mikdusan
negatives:

1615102341
mikdusan
- no zig build test ability for the ci process

1615102426
mikdusan
- not built using a zig-boostrap process. we can't do that style (even with system-linker-hack) without changing how zig build-exe and zig cc drivers strips the command-line when it thinks we're cross-compiling

1615102670
mikdusan
also though, zig-bootstrap is, as far as I can tell, broken for x86_64 macos host too. And in order to fix (continue using zig cc/c++) we only have 2 choices: wait for zld and/or improve system-linker-hack enough to get zig-bootstrap working.

1615102687
mikdusan
thoughts?

1615112574
kbd
So, one can say: `var foo = if(true) "T" else "F";`. Is it possible to use blocks in place of "T"/"F", returning a value from the blocks?

1615112684
ifreund
sure

1615112701
ifreund
if (true) blk: { break :blk 5; } else 4;

1615113004
kbd
ok: var result = if (flag) b1: { break :b1 "truthy"; } else b2: { break :b2 "falsy"; }; Thanks ifreund.

1615115990
mjanssen
I know I can make build a dynamic library from the command line with zig build-lib -dynamic. Is there any way to pass the -dynamic from build.zig ?

1615116025
ifreund
pretty sure addSharedLibrary() passes that by default

1615116229
mjanssen
I tried that, but that requires a version and then failes with a file not found

1615116236
mjanssen
removing zig-cache fixed that

1615116248
mjanssen
so works with addSharedLibrary, thanks

1615116283
ifreund
mjanssen: you can use .unversioned if your use-case doesn't require a version

1615116304
mjanssen
ifreund: thanks

1615116336
mjanssen
it does require a version, so that's OK. Any easy way to pass the version from build.zig to the actual zig code?

1615116505
ifreund
addBuildOption()

1615116518
ifreund
then you can @import("build_options"); in your code

1615116557
mjanssen
ah great thanks

1615117024
txdv
random.init needs a seed, how do I randomly generate a seed? :D

1615117163
txdv
I guess I need to use std crypto

1615117833
daurnimator
huh... what happended to the AT_RANDOM code?

1615117970
daurnimator
andrewrk:

1615118215
ifreund
daurnimator: see the discussion on the PR

1615118264
daurnimator
ifreund: which bit?

1615118346
ifreund
daurnimator: starting with jediscat1's comment I guess

1615119897
daurnimator
ifreund: mmm. I agree with andrew's initial comment

1615119912
daurnimator
I might throw up a PR bringing it back; but without the downside

1615119957
ifreund
I don't have a strong opinion one way or the other, haven't looked closely enough myself for that

1615119976
ifreund
currently fixing more things we broke in #7920 :D

1615120175
txdv
That rewrite was huge

1615120779
mjanssen
any prefered paste site?

1615120797
daurnimator
mjanssen: zig.godbolt.org

1615121205
mjanssen
trying to translate a working zig build-lib to zig build. Fails with an unreachable code error:

1615121279
ifreund
I see that you're using 0.6.0, you probably want to be using 0.7.1 if not master

1615121299
mjanssen
this was with 0.7.0

1615121305
mjanssen
but I can try with master

1615121321
mjanssen
ah using 0.6.0 lib

1615121377
ifreund
you have to use the same library version as compiler version

1615121419
mjanssen
same error if I remove the system zig and it uses the lib of the compiler

1615121430
mjanssen
I can try with master

1615121646
ifreund
mjanssen: it would help to see your build.zig and the working zig build-lib command

1615121849
mjanssen
t's in the paste

1615121854
mjanssen
in the comments

1615121937
mjanssen
lib.linkSystemLibrary("tclstub8.6"); seems to be the offending line

1615122114
ifreund
I don't think you should need addLibPath there

1615122140
ifreund
you could try linkSystemLibraryName instead of linkSystemLibrary to bypass pkg-config

1615122178
mjanssen
indeed addLibPath is not needed

1615122509
mjanssen
and changing to linkSystemLibraryName works

1615125661
mjanssen
thanks ifreund. Build works now

1615125947
ifreund
nice :)

1615127440
mjanssen
I have two vars, a,b with types [*c]const u8,comptime_int . I expect if (a!=b) { ... } to be a type error but it's not. Am I missing something?

1615127709
daurnimator
mjanssen: `[*c]` is a C pointer

1615127854
daurnimator
mjanssen: they intentionally work like C pointers... which includes the ability to coerce to an integer I guess

1615127997
mjanssen
hmm ok some playing aroundseems to confirm this

1615128002
mjanssen
good to know

1615128063
daurnimator
though looking closer it might be a bug...

1615128096
daurnimator
`@TypeOf([*c]const u8, comptime_int)` seems to return `type`

1615128215
mjanssen
maybe for the wasm target only? I get a different result if I test it on my machine

1615129737
qbit
does zig have something similar to 'go fmt' ?

1615129743
Nypsie
zig fmt :)

1615129799
qbit
awesome

1615129800
qbit
ty :D

1615129888
Nypsie
np. There's also a language server like gopls if that's something you use.

1615129978
qbit
it is!

1615130024
qbit


1615130089
Nypsie
In that case:

1615130115
qbit
sweet - ty

1615130189
Nypsie
np :)

1615135393
tane
building ZLS is such a pita

1615135694
Nypsie
Why?

1615135752
tane
I can't see what version of zig it is programmed against

1615135767
tane
the docs claim I need the master of zig, but errors if I do that

1615135915
tane
ah I see you have just been talking about ZLS lol

1615135931
tane
what I said wasn't related to that :)

1615135942
Nypsie
It is programmed against master. But master is such a fast moving target that it's hard to keep up. 1 - 2 weeks ago a PR was merged that completely revamped the AST that ZLS uses as well. ZLS hasn't been updated to reflect that change just yet (There's an open PR for it, but as you can see, 5k loc and it's still WIP :))

1615135959
Nypsie
Aaah ok :)

1615135977
tane
yes, I see

1615136130
tane
I wouldn't have changed anything if it hadn't stopped providing completions muh

1615136287
tane
at least it doesn't complete "std."

1615136321
Nypsie
You sure you set std's path correctly in zls.json?

1615136476
tane
I am now sure that it wasn't set correctly

1615136495
tane
thanks for the pointer - I don't remember setting it ever but I'm confident that it worked before Oo

1615136518
Nypsie
No problem and who knows haha :D

1615137010
Nypsie
andrewrk: Any reason why an inferred errorset return type has the tag `identifier` rather than `error_union`. Is this a regression, or should I manually check if the return type of a function is an inferred error set or an explicit error_union. This is regarding the AST refactoring.

1615137119
ifreund
hmm? Inferred error sets don't have any token, fn foo() !void is what you're talking about right?

1615137130
Nypsie
Correct

1615137201
Nypsie
Ah I should've checked if there was a token for it. In the old format the return type of a function was a union, so it was easy to check if it was an inferred error set or not.

1615137255
ifreund
the node for the return type will have tag error_union I'm pretty sure

1615137274
Nypsie
Nope, only when I do fn foo() anyerror!void

1615137292
ifreund
oh yeah, we only use that for explicit error sets to save memory

1615137298
Nypsie
Aaah ok

1615137299
ifreund
that way we can have fewer nodes

1615137305
Nypsie
Thanks for confirming :)

1615137314
Nypsie
I'll have to manually check for it in zls then

1615137433
Nypsie
(I should've checked render.zig before asking. There's literally a line with: `const maybe bang = ....`

1615137440
Nypsie
Sorry for wasting you guys time

1615137476
ifreund
no worries!

1615137920
ifreund
Nypsie: actually it's not really an optimization, it's just how the grammar works:

1615137928
ifreund
FnProto <- KEYWORD_fn IDENTIFIER? LPAREN ParamDeclList RPAREN ByteAlign? LinkSection? CallConv? EXCLAMATIONMARK? (Keyword_anytype / TypeExpr)

1615137976
ifreund
note that fn foo() ! foo!void {} parses but fails semantic analysis

1615138076
tane
is there something scanf-like available already?

1615138077
Nypsie
Oh I see! Thanks for that

1615138090
tane
sscanf to be precise

1615138111
ikskuh
tane: not really, how should that look like?

1615138121
ikskuh
(i don't consider scanf-api good)

1615138188
ikskuh
or in other words: what do you want to achieve?

1615138194
ikskuh
convert a string to int?

1615138216
tane
convert "2032-23-12 12:12" to five ints

1615138237
tane
i.e. "%4d-%2d-%2d %2d:%2d"

1615138258
ikskuh
ah

1615138269
ikskuh
try std.fmt.parseInt(u16, slice[0..4], 10)

1615138275
ikskuh
try std.fmt.parseInt(u16, slice[5..7], 10)

1615138280
ikskuh
try std.fmt.parseInt(u16, slice[8..10], 10)

1615138281
ikskuh
...

1615138285
tane
yeah, ok

1615138311
tane
I wonder whether one could construct some type-safe sscanf-like thing with a comptime format string + an anonymous struct/list

1615138325
ifreund
definitely possible

1615138327
ikskuh
you surely can

1615138336
ifreund
there was a PR up for a while but it got stale

1615138338
ikskuh
would return either "failure" or a tuple

1615138359
ifreund


1615138410
tane
ah ok cool, I'll keep that one in my list

1615138424
tane
I think such a functionality would be really good to have in the stdlib - still enough time :)

1615138555
g-w1
it would make parsing things really easy

1615138559
tane
" This branch is 3 commits ahead, 1291 commits behind ziglang:master. " :)

1615138597
tane
D-lang has something similar called formattedRead that checks everything during comptime

1615138783
mipri
get it before advent of code and it'll probably get some use. AOC2020 is when

1615138841
tane
it seems the original PR was motivated by AOC as well :)

1615138943
tane
if simple text parsing functions are missing, people tend to whatever is available, e.g. json

1615138994
tane
I once participated in an optimization challenge and the instance files were distributed as pretty printed (with 4 space identation) JSON files, resulting in 300mb instance files, although the actual content when presented in a simple text format would be 1MB or so

1615146878
tane
I think the PR for std.fmt.scan should be redone, I guess returning !usize for the number of matched items would be nice and the typ annotations in the format aren't necessary, only width modifiers etc

1615147864
bbuccianti
how do you alloc on zig?

1615147877
bbuccianti
I want to have a runtime sized array like thing

1615148016
dutchie
bbuccianti: see e.g.

1615148225
bbuccianti
thanks, dutchie !

1615152298
oats
andrewrk, good luck on your last "leg" :P

1615152641
v0idify
if (num == 0) @intCast(u8, 0) else @intCast(u8, 5) // ALWAYS yields 0

1615152718
ifreund
1. use @as() not @intCast() there

1615152730
ifreund
2. gonna need more context to help further :P

1615152762
v0idify
can't really give context sorry :#

1615152770
g-w1
is num ever not 0?

1615152783
v0idify
yes

1615152856
v0idify
var a: u8 = 5; if (num == 0) a = 0; // then use a

1615152857
v0idify
works fine

1615152873
v0idify
thanks for the @as thing :#

1615152911
ikskuh
v0idify: why can't you share more context?

1615152924
ikskuh
right now, there are some bugs related to condition evaluation in stage1

1615152935
ikskuh
that require more context to tell you if it works or not

1615153013
v0idify
num is a value in a struct taken from for(list.items) |struct|

1615153033
v0idify
what kind of context do you need? it's "private" source code

1615153044
v0idify
num is an u32

1615153077
ifreund
I'm not going to be able to be useful without seeing more, ideally all of the source code

1615153096
v0idify
sorry :|

1615153144
ifreund
hey, it's your loss not mine /shrug

1615153155
v0idify
true

1615153164
v0idify
i have good reasons i promise :)

1615153213
g-w1
v0idify: can you at least say what type num is?

1615153238
g-w1
it doesn't repro for me :/

1615153893
zags
hm, can I swapRemove while iterating?

1615153915
zags
(hashmap)

1615154019
ifreund
zags: if you mean the ArrayHashMap sure

1615154028
ifreund
(see the doc comment)

1615154393
zags
thanks

1615154431
zags
AutoArrayHashMap specifically, it was clear from the comments on that one

1615154532
v0idify
g-w1, u32, i haven't tried making a mvp

1615154564
g-w1
ok, i cant really help you

1615154594
v0idify
it's fine

1615154667
s-ol
how can i go from a string literal to a zero-terminated fixed-size [N]u8 array?

1615154675
s-ol
i'm interacting with a C api with fixed-size string fields in structs

1615154684
s-ol
error: expected type '[128]u8', found '*const [15:0]u8'

1615154818
ifreund
s-ol: dereference the string literal and pad with 0s

1615154875
ifreund
"foo".* ++ ([1]u8{0} **)

1615154887
ifreund
** 100 - "foo".len I mean

1615155082
s-ol
oof, ok

1615155090
s-ol
guess ill put that in a little wrapper fn then

1615155097
zags
ifreund:             .registered = std.ArrayList(*Expr).init(allocator)

1615155100
zags
oops

1615155115
s-ol
or maybe i can adjust the types on the other side

1615155173
zags
iterating arraylist and doing swapRemove seems to run into issues. I guess I should put items scheduled for removal in a separate array and delete that after the loop?

1615155807
s-ol
hm, and now im struggling ahrd to produce an empty '[*]const [*:0]const u8'

1615155838
s-ol
actually... that just means its typed wrong right

1615155855
s-ol
it should be a 0-element array as a C pointer, so it could be literally any value or null

1615156330
ifreund
hmm, &[_]u8{} perhaps?

1615159483
s-ol
ifreund: ill try it tomorrow

1615159495
s-ol
if anyone is into VR, this seems to work now (!!):

1615159512
s-ol
(im waiting for my valve index to arrive, time to set up the toolchain ;)

1615160043
ifreund
zags: swap remove while iterating is well defined

1615160066
ifreund
it of course means that you may not see all the items

1615161033
marijnfs
I have some serialisation code but it ends up in some infinite loop

1615161035
marijnfs


1615161043
marijnfs
Is there something obviously wrong there?

1615161128
g-w1
at comptime or runtime?

1615161424
marijnfs
the loop is at runtime

1615161429
marijnfs
so it compiles fine

1615161441
marijnfs
strange thing is debugger doesn't give me some infinite stack or something

1615161551
g-w1
i dont see any runtime loops

1615161552
ifreund
what is msg

