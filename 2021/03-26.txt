1616720716
andrewrk
ifreund, it's really nice that your distinct type patch also made the ZIR printing show the @ names

1616720732
andrewrk
in retrospect it seems obvious that Ref should have been an enum :)

1616720889
sh4rm4^bnc_
andrewrk, the x86_64-windows-gnu zig-cc target is cygwin ?

1616720908
andrewrk
sh4rm4^bnc_, the libc that it provides is based on mingw-w64

1616720922
andrewrk
however it is ABI compatible with MSVC (but not always .h file compatible)

1616720952
sh4rm4^bnc_
based on, means it's like an improved fork of ?

1616720970
g-w1
with the std.zig.ast api, how can I get the length of a token? I want tree.source[tree.firstToken(node) .. tree.lastToken(node) + len] to get the full source of a node. is this possible?

1616720978
sh4rm4^bnc_
because last time i checkout mingw-w64 it was utterly broken...

1616721010
sh4rm4^bnc_
like declaring int mkdir(char*)

1616721074
g-w1
ah figured out, just use the last token, but + 1 so its the start of the next token

1616721081
andrewrk
sh4rm4^bnc_,

1616721132
sh4rm4^bnc_
yeah, that looks like what my mkdir-using program choked on

1616721143
sh4rm4^bnc_
it lacks the mode parameter

1616721197
noam
Since stage2 doesn't yet support this so I can't steal^W*take inspiration* from it regarding field allocation: does it make sense to treat each field as its own variable in terms of e.g. regalloc?

1616721222
andrewrk
sh4rm4^bnc_, it looks deprecated, are you sure it's ok to call it?

1616721279
sh4rm4^bnc_
man 3p mkdir says nothing about deprecated (posix 2013 manpages)

1616721284
andrewrk
g-w1, have a look at ast.Tree.tokenSlice if you haven't seen it yet

1616721317
g-w1
thats only for one token, I want a whole node, but I figured it out

1616721318
andrewrk
oh I see you want a whole node

1616721331
g-w1
i just did lastToken + 1

1616721355
andrewrk
that works because we terminate with an EOF so you can always do +1 from a non-EOF token

1616721361
g-w1
ok cool

1616721375
andrewrk
you might get unwanted line comments tho

1616721400
g-w1
its mostly for fields of structs and global variables

1616721478
waleee-cl
sh4rm4^bnc_:  file modes doesn't exist on windows? Or have I missed something

1616721491
andrewrk
sh4rm4^bnc_, might be worth having a chat with the #mingw-w64 folks (on OFTC). they might have a good reason for the way it is

1616721503
sh4rm4^bnc_
waleee-cl, i dunno, but mingw is supposed to provide a posix compat layer

1616721508
andrewrk
also I haven't double checked that msvc libc does it differently, have you?

1616721544
sh4rm4^bnc_
i just tried to compile my posix compatible program with mingw, and found it wasnt compatible at all

1616721553
sh4rm4^bnc_
it == mingw

1616721580
andrewrk
mingw is not a posix compatibility layer

1616721585
andrewrk
it's trying to match msvc

1616721593
andrewrk
put an #ifdef windows in your code

1616721660
andrewrk
IMO posix compatibility layer is misguided. better to have conditional compilation and use appropriate windows APIs on windows

1616721667
sh4rm4^bnc_
my solution was

1616721700
daurnimator
as andrewrk said, mingw is not meant to be posix compatible...

1616721763
daurnimator
IIRC they only added enough posix to get autoconf to work out of the box

1616721778
sh4rm4^bnc_
lol

1616721790
daurnimator
andrewrk: mingw isn't trying to match MSVC directly, IIRC they add plenty more on top

1616721813
andrewrk
anyway it's a completely reasonable libc, and I agree with the decision to not try to be a posix compatibility layer

1616721912
sh4rm4^bnc_
alright, i was just curious whether the version used by zig is somehow improved or uses midipix, or cygwin, or whatever

1616721945
andrewrk
zig's is unpatched mingw-w64

1616722017
sh4rm4^bnc_
unrelated: i recently found

1616722046
sh4rm4^bnc_
what's the backend approach for the new llvm-less zig compiler ?

1616722060
andrewrk
hard work

1616722071
andrewrk


1616722080
sh4rm4^bnc_
you write asm for every arch yourself ?

1616722099
andrewrk
yes, direct to machine code for every arch ourselves (no detour through assembly syntax)

1616722100
g-w1
not asm: code

1616722160
sh4rm4^bnc_
lightning supports about 12 archs, almost all that musl supports (except sh2-4)

1616722178
andrewrk
we're not gonna take on more dependencies, llvm is troublesome enough

1616722195
sh4rm4^bnc_
input is a risc pseudo asm, and it's pretty lightweight

1616722223
sh4rm4^bnc_
well yeah, since you're already half-way there :)

1616722232
andrewrk
it's fast too

1616722241
andrewrk
compilation speed

1616722247
sh4rm4^bnc_


1616722254
sh4rm4^bnc_
how about optimization of the code ?

1616722281
andrewrk
roughly equivalent to gcc or clang -O0

1616722298
sh4rm4^bnc_
i.e. zero

1616722401
sh4rm4^bnc_
according to

1616722415
sh4rm4^bnc_
(lightning does that too)

1616722425
andrewrk
oh we're doing that

1616722433
andrewrk
single pass register allocation

1616722444
sh4rm4^bnc_
ah cool, so it should be faster than gcc -O0

1616722456
andrewrk
there is a liveness analysis too so it can re-use dead registers

1616722626
andrewrk
that is surprising to me. I thought the cpu cache would make register allocation not very important

1616723314
sh4rm4^bnc_
the guy who wrote that article is vladimir makarov, who does the really hard work on GCC, he also wrote a scripting lang called dino that's a lot faster than even lua

1616723375
sh4rm4^bnc_


1616723490
companion_cube
that almost looks like a nice language, damn

1616723860
mikdusan
dang that pdf is filled with goodies

1616724475
andrewrk
3.1 Byte Code Dispatch is related to

1616724666
mikdusan
if I grok correct, dino switched to "direct threaded code" (labels as values) because > 256 instructions

1616724703
andrewrk
right now in stage2 we got < 256 instructions, and already have that proper switch setup, so looks like we can just sit tight

1616724714
andrewrk
that's what I was showing off in the meeting today

1616728298
andrewrk
g-w1, check it out, the stage2 test case for compile logs had the wrong source location in master branch but with this branch now it's fixed (see latest commit, the changes to the test case)

1616728308
g-w1
i saw that :)

1616728328
g-w1
oh even more?

1616728341
andrewrk
yeah I don't think we noticed this one before but the source location was bogus

1616728390
g-w1
nice

1616728511
g-w1
i think my next thing will be @intToError and @errorToInt, because those require some special casing in the cbe that will cause subtle bugs. those are safe to work on with lazy analysis right?

1616730784
andrewrk
g-w1, what about this strategy? have `#define zig_error_int_<name> <number>` for every error, and the C backend simply populates this on flush()

1616730824
andrewrk
so every incremental compilation it would have to write the whole list of error names / numbers with #defines, but it means the other code could stay unmodified even if error numbers get changed

1616732765
andrewrk
some fun code I just added to rvalue for the `ty` enum value:

1616732782
andrewrk
lines 27 to 89

1616751665
ifreund
andrewrk: yeah, it really did turn out to be a strict improvement in the end I think :)

1616751761
ifreund
andrewrk: I thought slices don't have a well defined memory layout, is @bitCast([]Inst.Ref, raw_slice) really safe?

1616751784
ifreund
I think a pointer cast would be more correct

1616754925
ifreund
I'm working on astgen for slicing by the way

1616757354
tadzik
hello #zig!

1616757466
tadzik
I've tried building

1616757958
g-w1
andrewrk â”‚ [23:53:04] g-w1, what about this strategy? have `#define zig_error_int_<name> <number>` for every error, and the C backend simply populates this on flush() andrewrk: see

1616758611
cepheus
tadzik: I have toy examples that work successfully against GLFW in my case, but i'm linking against GLFW3  in my case

1616758626
cepheus
can't comment on epoxy though

1616758631
tadzik
cepheus: yeah, it's glfw3 for me too, but for the linker it seems to be -glfw anyway

1616758689
cepheus
if you specifically do GLFW3 i think it should be able to find it via pkg-config which resolve the issues (if that's set up correctly)

1616758691
tadzik
I'm not sure if epoxy is relevant here, it just seems like my zig can't quite link to the C stuff that clang does just fine

1616758711
cepheus
(it's case sensitive I think)

1616758715
tadzik
pkg-config --libs glfw3 gives me -lglfw as expected

1616758725
cepheus
hmm

1616758764
cepheus
I'm also building these under nix which is probably not representative of the typical case

1616758782
tadzik
possibly

1616758881
cepheus
I'll see how this builds under my env just to check

1616758893
tadzik
I could try linking something more trivial in a more minimal case, like `-lm` for cmath, if I knew how to write and build any zig myself :P But I thought I'd start by looking at comparing's someone's Zig and comparing it to my C

1616758934
tadzik
ugh, english had. s/comparing's//

1616759454
cepheus
yeah it's weird

1616759483
cepheus
asides changing that glfw to glfw3 for my system it works fine and runs on my system

1616759584
cepheus
sorry that's not very helpful

1616759645
tadzik
no worries, thanks anyway :)

1616759664
tadzik
interestingly (or maybe not), even if I change glfw to glfw3 in build.zig, it still tries to link against -lglfw

1616760576
v0idify
tadzik, that's because it's just the pkg-config name

1616760587
v0idify
andrew uses nix so it should work

1616760793
tadzik
nodnod

1616762206
gracefu
what's the status on safe recursion? issue 1006 says the accepted proposal is to use async calls, but isn't async already a thing? why is issue 1006 still open?

1616762230
gracefu


1616765432
ifreund
gracefu: the compiler doesn't enforce following that pattern yet

1616765455
gracefu
why not?

1616765455
ifreund
and for good reason IMO, async in zig is very much still at the PoC stage

1616765459
gracefu
ah

1616765464
gracefu
because async still in dev

1616765466
gracefu
right

1616765478
gracefu
so when async is polished up and ready to ship, so will safe recursion?

1616765488
ifreund
I assume so yes

1616765491
gracefu
makes sense

1616765493
gracefu
thanks!

1616769058
ifreund
andrewrk: we might want to consider using non-exhaustive enums for Type and Value as well, could be cleaner

1616769087
g-w1
how could it be cleaner?

1616769173
ifreund
you replace the extern union { usize, *Payload } + separate Tag enum with a single enum(usize) {}

1616769284
ifreund
looking closer it wouldn't acutally work in this case though as there are tags that have a payload as well

1616769351
g-w1
yeah

1616770097
ifreund
well, no it would work fine but wouldn't necessarily be cleaner

1616776920
caolanm
how do I ignore SIGPIPE in a zig program?

1616776950
ifreund
caolanm: same way as in C, man sigprocmask

1616776968
caolanm
at the moment I'm linking lib C to do it using signal()

1616776987
ifreund
signal() is deprecated iirc

1616776993
caolanm
yes, I think you're right

1616777000
caolanm
I was just being lazy to get it working

1616777001
ifreund
or it's at least recommended to use sigprocmask

1616777018
caolanm
I couldn't get my head around using sigprocmask from zig

1616777029
caolanm
and theres no definition for things like SIGPIPE

1616777039
caolanm
I mean, I could hard code it to 13 but...

1616777039
ifreund
std.os.SIGPIPE

1616777126
caolanm
hmm, don't see that in docs or sourcecode

1616777137
caolanm
does some magic happen to define that?

1616777167
g-w1
usingnamespace on bits

1616777172
ifreund
if you're talking about the autogenerated stdlib docs, I recommend avoiding them as they are very incomplete and sometimes incorrect

1616777187
ifreund
if you grep for SIGPIPE you'll find the definitions

1616777234
ifreund
keep in mind that the std is in for a good restructuring before 1.0, current focus is on the compiler

1616777288
caolanm
yeah, that's ok - I'm just playing :)

1616777347
caolanm
it's been difficult without stdlib docs, but the language itself is nice to beginners

1616777360
g-w1
i reccomend reading the source code itself

1616777374
caolanm
I've been using github search on the zig repo

1616777377
ifreund
zls has goto-definition which makse that nicer by the way

1616777384
caolanm
might just clone it so I can grep more easily

1616777396
ifreund
the std source also ships with your copy of zig

1616777413
caolanm
ah, cool

1616777415
ifreund
zig env

1616777420
ifreund
(to find the path)

1616777623
caolanm
making a little HTTP/1.0 server for my own amusement - only handles GET requests :)

1616777656
ifreund
nice :)

1616777686
ifreund
you might be interested in

1616777692
ifreund
or

1616777722
caolanm
cool, thanks. I hadn't seen hzzp

1616777733
caolanm
I don't even parse headers

1616777750
ifreund
:D

1616777754
caolanm
just read a path, write the file, close connection

1616777758
caolanm
:)

1616778738
caolanm
hmm

1616778742
caolanm
./src/main.zig:17:11: error: container 'std.os' has no member called 'sigaddset'

1616778757
caolanm
but I see it in stdlib in os/linux.zig

1616778841
ifreund
std.os.system.sigaddset

1616778861
ifreund
std.os.system is an alias for whatever your current target system is, which in this case is linux

1616778869
ifreund
you can also just do std.os.linux of course

1616778882
caolanm
./src/main.zig:17:18: error: container 'std.c' has no member called 'sigaddset'

1616778882
caolanm
std.os.system.sigaddset(&set, std.os.SIGPIPE);

1616778931
ifreund
oh you're linking libc

1616778943
ifreund
in that cse std.os.system is std.c

1616778963
caolanm
ah, but! I was only linking libC so I could use signal()

1616778967
caolanm
let me turn that off

1616779811
caolanm
all working now btw, thanks

1616779939
ifreund
no problem!

1616782946
andrewrk
ifreund, I think we actually uncovered a design flaw here - a pointer cast will assert the pointer is not 0, but in the case of a slice with .ptr = undefined, len = 0, this will trip. but we don't want a pointless len check

1616782999
andrewrk
so my reasoning here is (and I apologize for not putting this in a comment) this bitcast does generate correct llvm code with stage1, and as the language finalizes it either needs to keep being a valid construct or start being a compile error, so we should be ok until either of those things happen

1616783030
andrewrk
does that make sense? (regarding the ptr cast / bitcast on slice)

1616783098
ifreund
andrewrk: sounds reasonable, I'd vote to make @ptrCast() work on slices and do the right thing

1616783108
ifreund
(from a language design standpoint)

1616783143
ifreund
or well, I guess we can implement that in userland no?

1616783610
ifreund


1616783690
andrewrk
ifreund, I think that's exactly the right call, make @ptrCast work on slices

1616783719
ifreund
yeah, my userland version still has the length check

1616783721
andrewrk
that len == 0 check is unfortunate though, we really want the codegen to just reinterpret a pointer at the end of th eday

1616783748
andrewrk
I don't see any downsides from making @ptrCast work on slices

1616783821
ifreund
yeah me neither.

1616784225
andrewrk
I'm not sure if Type and Value are the right way to go

1616784259
andrewrk
but don't want to mess with them until there is a clear vision for why something else is better

1616784272
andrewrk
I think that may happen when we implement comptime locals

1616784336
ifreund
makes sense, it was mostly just an idle thought after looking at them breifly while implementing float literal astgen

1616784347
g-w1
andrewrk: do you understand why errorToInt and intToError might cause subtle bugs in the cbe? or am I missing something?

1616784395
andrewrk
g-w1, hard to say without some more details

1616784421
g-w1


1616784479
andrewrk
hmm I don't understand the problem

1616784487
g-w1
ill link the code

1616784490
andrewrk
integer value 0 is reserved, the first error.Foo starts at 1

1616784510
g-w1


1616784520
g-w1
yeah, but then the errors are different at comptime and non-comptime

1616784527
g-w1
comptime is 0, non-compitme is 1

1616784535
g-w1
so we have to account for that

1616784546
andrewrk
I don't follow

1616784586
g-w1
comptime @errorToInt(e) -> 0 (stored in module), runtime @errorToInt(e) -> 0, but now it is off because 0 is the value for no error so we get ub

1616784627
g-w1
so we have to add 1 if its runtime in the cbe right?

1616784628
andrewrk
you can never get 0 from @errorToInt on an error set type

1616784642
g-w1
hmm, why?

1616784649
andrewrk
because 0 is reserved for "not an error"

1616784657
g-w1
is there docs for that?

1616784676
ifreund
each error name across the entire compilation gets assigned an unsigned integer greater than 0

1616784684
ifreund
(from the langref)

1616784697
g-w1
ohhhh thanks

1616784701
g-w1
sorry for the invoncvience

1616784705
andrewrk
no prob

1616784711
andrewrk
did that answer the question? because I'm still confused

1616784730
g-w1
it answered it. then there is a small cbe bug that i introduced :(. I will fix it when I do errorToInt and intToError

1616784735
andrewrk
ahh ok no worries

1616784735
g-w1
there should be no +1 there right?

1616784832
andrewrk
yeah probably global_error_set should have the u16 value match exactly right? so there will be no 0 value in global_error_set

1616784865
g-w1
yeah

1616784875
g-w1
that confused me, not sure if it starts at 1 or 0

1616784899
andrewrk
we just skip 0 so that you can convert from an error set type to an error union type with a no-op

1616784914
g-w1
yeah

1616784922
g-w1
ok cool, thanks

1616784922
andrewrk
in machine code, anyerror!void is represented the same as anyerror

1616786442
g-w1
is the only way to store an int in a Value a bigint, u64 or i64?

1616786818
ifreund
g-w1: yup

1616786824
g-w1
ok

1616786867
dimenus
is it expected that stage-2 doesn't require @as(usize, 42) to coerce to a usize?

1616786869
dimenus
where as stage-1 does

1616786882
g-w1
depends the context

1616786893
dimenus
inline asm in this case

1616786894
g-w1
in in the inline asm syntax specifically?

1616786926
g-w1
not sure, but generally stage2 is better with this type of stuff

1616786941
dimenus
i would assume that's intended

1616786946
dimenus
assuming comptime_int fits

1616786986
ifreund
dimenus: yep that's right

1616786989
g-w1
no, i think stage2 inline asm syntax is just not complete

1616786999
ifreund
line 3020

1616786999
g-w1
for (inputs) |*name| {name.* = sema.code.nullTerminatedString(sema.code.extra[extra_i]); extra_i += 1;} this is how it handles inputs

1616787003
ifreund
of astgen.zig

1616787004
g-w1
then it passess that to codegen

1616787030
g-w1
or maybe not :)

1616787061
ifreund


1616787083
ifreund
the result location has type usize, so the @as(usize, foo) is implicit

1616787091
g-w1
is a BigInt as simple as a slice of usizes?

1616787096
ifreund
stage2 is just better than stage1 at this stuff already

1616787115
g-w1
like to make one is it just &.{1}?

1616787123
g-w1
or is it way more complicated :P

1616787147
ifreund
if you want to make 1, use the i64/u64

1616787171
g-w1
what about a u16 (doing errorToInt)?

1616787177
g-w1
i assume still u64

1616787184
ifreund
and yeah, i'm pretty sure it's more complicated

1616787193
g-w1
ok lol

1616787206
ifreund
see std/math/big/int.zig

1616787673
marijnfs
is it fine to remove from an arraylist in a loop?

1616787756
ifreund
marijnfs: the remove operations don't reallocate so I don't see why not... are you seeing a crash or something?

1616787893
g-w1
do you mean while looping over with `for (arr.items) |item|`?

1616788307
marijnfs
g-w1: indeed like that

1616788327
marijnfs
ifreund: i wonder if the for loop in that case jumps over the last item perhaps and crashes

1616788391
marijnfs
say you are at the last item, and delete it. The 'end' of the array is behind you which is a problem if you say use c++ like iterators

1616788434
ifreund
marijnfs: oh if you're doing that not it's not "safe"

1616788470
ifreund
a for loop will only terminate naturally after iterating the full length the slice was when iteration started

1616788492
ifreund
use a while loop here

1616794145
g-w1
hmm, for @intToError, it needs to reverse-index a hashmap. it has the number, but needs the string which is in a string -> number hashmap. what is the best way to deal with this?

1616794311
ifreund
well you can have a parallel number-> string hashmap if you need lookups to be fast in both directions

1616794326
ifreund
or you can just iterate the first hashmap if you dont

1616794701
g-w1
do you think it warrants a parralell hash map?

1616794714
g-w1
the only case I can think of is @intToError at comptime

1616794757
ifreund
I'd say no unless profiling shows that its an issue

1616794765
g-w1
ok, ill put in a TODO

1616794806
ifreund
I don't think it warrants a TODO, I doubt anyone will use @intToError enough for it to become an issue

1616794813
g-w1
ok

1616795774
noam
Is it too late to try to sway #678 away from acceptance?

1616795788
noam
IMO, neither example in the OP should be allowed

1616797031
dimenus


1616797034
dimenus
seems like a regression

1616797039
dimenus
in stage-2

1616797111
dimenus
& zir-mem branch

1616797511
g-w1
seems like it :P. but also you shouldn't return in a noreturn function :)

1616797523
g-w1
probably a bug in Sema

1616797588
dimenus
i know, i was expecting it to not compile :)

1616797595
dimenus
it was a typo that I thought i'd report

1616797605
g-w1
nice yeah

1616797665
g-w1
seems to be a bug in Sema.analyzeRet

1616797698
noam
Huh - that wouldn't even make it to sema in zyg :)

1616797776
noam
... though upon testing it appears I forgot to even support operand-less returns lol

1616797863
ifreund
noam: why would anything before sema be smart enough to catch a return in an noreturn function?

1616797976
dimenus
ifreund: can you explain something to me re astgen.zig:438-472?

1616797989
dimenus
why is the lhs a usize rl?

1616797997
dimenus
ptr?

1616797999
noam
ifreund: type analysis is separate from semantic analysis in zyg

1616798029
noam
There's a dedicated pass to analyzing type information, validating that types are correct, and so on

1616798034
ifreund
noam: that sounds like a strange choice for a language with first class types at comptime

1616798054
noam
The type analysis can invoke the comptime engine where it needs to

1616798061
noam
Which, in turn, can invoke semantic analysis :P

1616798081
ifreund
dimenus: that would be because I was being stupid, will fix :D

1616798112
noam
ifreund: the decision was made purely from a readability standpoint

1616798137
noam
The compiler is designed to be as painless to maintain as possible, even if it comes at the expense of performance

1616798143
noam
(of itself, not of generated code)

1616798173
ifreund
noam: it seems to me you've just divided semantic analysis up into a few sub steps

1616798200
noam
Sorta?

1616798208
noam
Type analysis doesn't really understand

1616798262
noam
It knows a tiny bit - e.g. the result of a call type is the rettype of the called function, which should be checked against the type of the parent expression (e.g. in an assignment, a var)

1616798445
noam
ifreund: that's

1616798451
ifreund
dimenus: fixed, thanks for catching that :)

1616798464
noam
Maybe "type semantics analysis" is a good way of thinking about it

1616798482
ifreund
noam: which is my point and why I took issue with "Huh - that wouldn't even make it to sema in zyg :)"

1616798485
noam
whereas what i've been calling sema is more "executional semantic analysis"

1616798510
noam
I'll rename it later :P

1616798527
noam
maybe sema/{types,insns,usage} or something like that

1616798549
noam
Usage analysis depends on understanding of lazy analysis, which is a semantic feature of Zig, for instance

1616798553
dimenus
ifreund: np, i'm working my way up to useful contributions in stage-2 :)

1616798671
dimenus
that fix makes hello world work with slices

1616798684
dimenus
fg

1616798722
ifreund
oh I really should have added a test case

1616799532
ifreund
dimenus: what hello world with slices did you get working? I hit a TODO in sema

1616799807
dimenus
ifreund: i'm dumb, it was a ptr to an array. len just auto-derefed so i got confused

1616799862
dimenus
i incorrectly assumed that the string was a slice, not a pointer to an array

1616799884
dimenus
when i sliced the array, i got through to codegen though instead of failling in sema

1616799891
dimenus
fg

1616799895
dimenus
damnit, sorry

1616800055
ifreund
ah, no worries

1616800180
dimenus
fg

1616800189
dimenus
alright i'm done with irc for now

1616800191
dimenus
hah

1616800272
noam
You're never done with IRC. It's a matter of when IRC is done with

1616800273
noam
:P

