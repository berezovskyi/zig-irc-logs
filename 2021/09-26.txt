1632617240
tintin!~tinh@165.22.70.115.static.exetel.com.au
hi all, I have a hard time to assign C string pointer to a field of []const u8 of a Zig struct. Here's what I am trying to do. https://pastebin.com/7PghG48Z

1632617253
tintin!~tinh@165.22.70.115.static.exetel.com.au
I am pretty new to Zig (coming from Go which have a string type in the standard library). I read a bit about array, slice and sentinel-terminated slices in Zig but I am kinda stuck at this point. Any help is welcome!

1632617793
andrewrk!~andrewrk@mail.ziglang.org
tintin, std.mem.sliceTo will convert a sentinel-terminated array into a slice

1632617855
andrewrk!~andrewrk@mail.ziglang.org
repo.version = sliceTo(c.xmlGetProp(node, "version"), 0)

1632618078
tintin!~tinh@165.22.70.115.static.exetel.com.au
andrewrk, thanks alot! std.mem.toSlice was deprecated, I ended up using std.mem.spanZ as suggested by the compiler.

1632619080
Nulo!~Nulo@user/nulo
tintin, just to be clear, Go's string type isn't from the standard library, it's from the language itself :)

1632619611
tintin!~tinh@165.22.70.115.static.exetel.com.au
Nulo, you are correct. It's a built-in type :) 

1632621645
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yooo we got sizeOf on structs

1632621666
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I feel like this is unblocking me on something but i can't remember what :P

1632630032
tintin!~tinh@165.22.70.115.static.exetel.com.au
hi

1632630049
andrewrk!~andrewrk@mail.ziglang.org
hi

1632630134
ndwk!~ndwk@user/ndwk
hi

1632630146
freshcoffee!~fresh@user/freshcoffee
helloooooooooooo

1632630189
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hellooooooooooooo

1632631498
tintin!~tinh@165.22.70.115.static.exetel.com.au
sorry, my kid just typed on my computer :). On an unrelated note :) I have a question on how to access C struct from Zig code. I get the "error: type '[*c].cimport:4:11.struct__xmlNode' does not support field access". https://pastebin.com/hCvtAsaL

1632632430
freshcoffee!~fresh@user/freshcoffee
`for` is used for slices and arrays, and they both have .len/.ptr fields. A many-time pointer has no .len so cannot be used

1632632451
freshcoffee!~fresh@user/freshcoffee
*many-item

1632632551
freshcoffee!~fresh@user/freshcoffee
do you know the length? if so, you can slice a many-item and use it in the for: for (node.children[0..known_len]) ...

1632632792
tintin!~tinh@165.22.70.115.static.exetel.com.au
freshcoffee, to be honest, no. I am very new to the libxml in C

1632632858
tintin!~tinh@165.22.70.115.static.exetel.com.au
still learning it. Coming from a high level language, I am not very familiar with all the pointer stuff.

1632632976
freshcoffee!~fresh@user/freshcoffee
and I assumed wrong. I thnk children is a linked list so you'll need `while` instead of `for`

1632633046
tintin!~tinh@165.22.70.115.static.exetel.com.au
freshcoffee, that's what I am thinking as well. I am trying to adapt this piece of code from their example to Zig http://www.xmlsoft.org/examples/tree1.c

1632633059
freshcoffee!~fresh@user/freshcoffee
have to do something like setup your pointer to first (node.children) and then break when ptr = node.last

1632633144
freshcoffee!~fresh@user/freshcoffee
oh it looks like until node.next == null

1632633848
tintin!~tinh@165.22.70.115.static.exetel.com.au
freshcoffee, I got a little bit further. https://pastebin.com/nu53jcuw, try to figure out how to do string comparison. error: operator not allowed for type '[:0]const u8'

1632633932
freshcoffee!~fresh@user/freshcoffee
`==` won't work. use `std.mem.eql()`

1632634047
freshcoffee!~fresh@user/freshcoffee
also, `while` syntax allows for a "continue expression" so you can `while (current != null) : (current = current.next) {}`

1632634121
tintin!~tinh@165.22.70.115.static.exetel.com.au
freshcoffee, will update my while loop

1632634129
tintin!~tinh@165.22.70.115.static.exetel.com.au
it's nice

1632634397
tintin!~tinh@165.22.70.115.static.exetel.com.au
the documentation of `std.mem.eql()` is not great :(. I don't know what to pass in for the first argument. What I have is `std.mem.eql(name, "include")` and the compiler complained: expected type 'type', found '[:0]const u8'

1632634431
freshcoffee!~fresh@user/freshcoffee
(u8, slicea, sliceb)

1632634432
tintin!~tinh@165.22.70.115.static.exetel.com.au
`std.mem.eql(@TypeOf(name), name, "include")` does not work either

1632634483
tintin!~tinh@165.22.70.115.static.exetel.com.au
freshcoffee, that works! thanks!

1632635108
andrewrk!~andrewrk@mail.ziglang.org
tintin, one trick you can do is check if there are any unit tests of the functions (usually directly below the function). if so, this can show some helpful usage examples

1632635221
andrewrk!~andrewrk@mail.ziglang.org
don't be afraid to browse the std source! https://www.youtube.com/watch?v=NQgju_2mX-8

1632635239
tintin!~tinh@165.22.70.115.static.exetel.com.au
andrewrk, that's what I did with the eql, unfortunately, there's none for that one (there are a few for other function though :))

1632635291
tintin!~tinh@165.22.70.115.static.exetel.com.au
andrewrk, will check out the youtube link!

1632645715
nmeum!~nmeum@barium.8pit.net
is it possible to implement == on structs somehow?

1632645880
dutchie!~dutchie@user/dutchie
that would go against the "no operator overloading" ethos

1632645884
dutchie!~dutchie@user/dutchie
you can use std.meta.eql though

1632645975
nmeum!~nmeum@barium.8pit.net
ah, that seems to work for my use case. thanks!

1632646013
nmeum!~nmeum@barium.8pit.net
btw: speaking of the standard library: is there any way to find out which parts of the standard library are available on a freestanding bare-metal target?

1632648962
jcmoyer!~jcmoyer@user/jcmoyer
anyone know what could cause frexp() to segfault when compiled with zig cc but not with clang? using latest zig on windows with llvm12.0.1-rc1 from the wiki page

1632660050
aosync!~aws@mx1.aosync.me
o/

1632663132
motiejus!~motiejus@2001:470:69fc:105::38fb
jcmoyer: perhaps it's UBSAN? https://github.com/ziglang/zig/issues/4830

1632663309
jcmoyer!~jcmoyer@user/jcmoyer
motiejus: I tried turning on all the same sanitizers as zig in clang, but I couldn't reproduce the problem. It's not crashing on an illegal instruction, it looks to be triggering DEP.

1632663384
jcmoyer!~jcmoyer@user/jcmoyer
my best guess right now is that frexp is somehow marked as non-executable, not really sure how to debug further though

1632663565
jcmoyer!~jcmoyer@user/jcmoyer
https://pastebin.com/raw/KFaqqVHJ basing that off this output

1632663881
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
hi there, I'm trying to evaluate how hard would it be to use Zig for a project: a simple IMAP "NOTIFY SET" client which would exit upon notification of changes

1632663890
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
it would have to support IMAP(S) (so TLS stuff involved)

1632664239
flux_control!~flux@sourcemage/wizard/flux
Raito_Bezarius: How do you define/measure "hard to use"?

1632665820
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
flux_control: substantial development of lacking libraries

1632665854
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
(not saying that I need a TLS native Zig lib but maybe some people have experience with C/C++/Rust TLS libs in usage with network Zig code)

1632665945
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
iguanaTLS has worked in the past for tls, not sure if its updated to latest zig

1632665965
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
also, I think libcurl has imap support, so you could possibly use that

1632666691
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
libcurl seems like it do not support arbitrary extensions, and NOTIFY extension seems not to be supported I think

1632666884
flux_control!~flux@sourcemage/wizard/flux
Raito_Bezarius: Considering that Zig can directly use C libraries, it lacks nothing.

1632666923
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Correct, but I assume that FFI bindings are not always simple to use, are they?

1632666930
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
why not?

1632666943
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
its the same as in c

1632666952
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
An unknown fear of compiler bugs, packed structures issues, etc. :P

1632666963
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
(not necessarily rational)

1632666970
flux_control!~flux@sourcemage/wizard/flux
Raito_Bezarius: There are examples of how to use libcurl directly from Zig.

1632666980
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Yeah, but libcurl won't cut it for my usecase

1632666990
flux_control!~flux@sourcemage/wizard/flux
That's irrelevant.

1632666995
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Sure

1632667011
flux_control!~flux@sourcemage/wizard/flux
You're not asking what libraries to use, you're asking how difficult it would be to use C libraries, right?

1632667027
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Correct wrt to current state of Zig in terms of compiler bugs, packed structure, etc.

1632667045
flux_control!~flux@sourcemage/wizard/flux
My suggestion is to read over those examples to judge for yourself whether that kind of FFI would count as difficult by your measure.

1632667070
flux_control!~flux@sourcemage/wizard/flux
If you judge that to be difficult, then I would say that Zig would be rather hard to use for your use case.

1632667098
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Well, last time I used Zig was to write an OS and we encountered some stage0 bugs which we had to workaround but overall it was nice

1632667100
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I don't think it would be that difficult, you can always write some c code to interface with packed structures if they come up

1632667111
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Alright

1632667116
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
Guess I will try to hack some code to see

1632667125
flux_control!~flux@sourcemage/wizard/flux
If you think the FFI pattern in that example isn't bad (personally I found it surprisingly easy, in some cases easier than the C it originated in), then I'd say Zig isn't hard to use for you. ;)

1632667142
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
the FFI stuff is very nice definitely

1632667154
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
I am just frightened of bad codegen :P

1632667165
flux_control!~flux@sourcemage/wizard/flux
Raito_Bezarius: It really comes down to what libs you're trying to use.

1632667191
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
I will check if libetpan supports NOTIFY extension

1632667194
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
If so, I might try to use that

1632667203
flux_control!~flux@sourcemage/wizard/flux
If you wanted to use only native Zig libs with no C library interop, then you'd have to implement quite a bit yourself I think.

1632667205
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
https://github.com/dinhvh/libetpan/issues/257 ha :>

1632667274
flux_control!~flux@sourcemage/wizard/flux
Raito_Bezarius: You could still use libcurl with raw TCP instead of relying on what it has for IMAP, right?

1632667285
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
you mean raw tls?

1632667302
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
with that, iguanatls might work better

1632667308
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
I am not super knowledgeable with libcurl raw TCP features

1632667317
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
but it looks like nontrivial and I might reach for iguanatls rather indeed

1632667329
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
and it seems like anyway that no C/C++ lib exist with NOTIFY extension support

1632667343
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
so the solution of plugging TCP sockets + iguanaTLS + doing the stuff myself might be the way

1632667409
flux_control!~flux@sourcemage/wizard/flux
Raito_Bezarius: I would doubt that "no lib exists". Dovecot supports it, and dovecot has it's own libs, right?

1632667427
flux_control!~flux@sourcemage/wizard/flux
You might be able to hook into a dovecot lib to achieve it.

1632667432
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
hm, honestly, I am not sure but the reasoning might be these libs are server side

1632667436
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
and I am looking for a client side lib

1632667463
Raito_Bezarius!~Raito@wireguard/tunneler/raito-bezarius
plus, I do not really care to parse the output of the ext, I just want to signal some program to fetch emails whenever notify says there's some email

1632667572
flux_control!~flux@sourcemage/wizard/flux
It seems that most client IMAP libs, regardless of language, don't advertise support for IMAP NOTIFY.

1632670868
bw!sid2730@user/betawaffle
is `extern enum(u32)` guaranteed to be equivalent to `u32` when used as the type of a field inside an `extern struct`?

1632670991
luuk!~luuk@user/luuk
Enums do not support `extern`

1632671151
luuk!~luuk@user/luuk
iirc enum(u32) as a field within an extern struct is guaranteed to be equivalent to an `u32`

1632671760
ifreund!~ifreund@user/ifreund
yep, enum(u32) has the exact same size/alignment as a u32

1632671775
ifreund!~ifreund@user/ifreund
t

1632672051
bw!sid2730@user/betawaffle
https://ziglang.org/documentation/master/#extern-enum

1632672081
bw!sid2730@user/betawaffle
oh i see

1632672103
bw!sid2730@user/betawaffle
looks like translate-c still generates the `extern enum(c_int)` syntax

1632672259
ifreund!~ifreund@user/ifreund
bw: oh, this is a change since 0.8.0

1632672310
ifreund!~ifreund@user/ifreund
though with the stage1 compiler on 0.8.0 enum(u32) and extern enum(u32) are treated exactly the same

1632684010
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I feel like I should already know this, but how do I do the equivalent of #ifdefing out a block of code that declares things? I have a small program for testing a library, and I'd rather put its main in the file with the library code than make it a separate file.

1632684245
ifreund!~ifreund@user/ifreund
leeward: you can do pub usingnamespace if (foo) struct { // decls here } else struct {};

1632684422
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ooh, good point.

1632684424
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Thanks.

1632686756
ifreund!~ifreund@user/ifreund
no problem!

1632687878
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
wait

1632687891
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
was there someone here named Kendel

1632688354
ifreund!~ifreund@user/ifreund
not that I recall

1632688379
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
[03:20:38]  <Kendel> Hey bro! Can I invite you to #bnc4you room?

1632688380
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
eerie

1632689230
yeti!~username@p5de7774c.dip0.t-ipconnect.de
had such spam as query too but maybe from a different nick...

1632689258
leah2!~leah@vuxu.org
had it on sep 25 from Shawnetta

1632689282
yeti!~username@p5de7774c.dip0.t-ipconnect.de
1632567555 Emmaline

1632689288
yeti!~username@p5de7774c.dip0.t-ipconnect.de
^unixtime in sec

1632689325
ifreund!~ifreund@user/ifreund
yep, I had similar spam earlier today from a different nick as well

1632689328
yeti!~username@p5de7774c.dip0.t-ipconnect.de
at least not the frequency of spam as in libera's 1st days...

1632689346
ifreund!~ifreund@user/ifreund
it was really not a problem aside from the first 2 days

1632689356
ifreund!~ifreund@user/ifreund
actually, I think this is the first spam I've had since then

1632689361
leah2!~leah@vuxu.org
yes

1632689482
yeti!~username@p5de7774c.dip0.t-ipconnect.de
I get spam, therefor I exist.

1632689547
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
first ever piece of spam i got, didnt join libera early on

1632689650
yeti!~username@p5de7774c.dip0.t-ipconnect.de
were crazy days... lots of spam even in totally unrelated irc networks

1632689841
yeti!~username@p5de7774c.dip0.t-ipconnect.de
and in a small irc net they even set autoban on mentioning libera...  to catch the spam...  adrenaline is not a good teacher!

1632689901
kurtis!~textual@user/kurtis
What is the best way of linking/including an external package like zhp? (https://github.com/frmdstryr/zhp) -- It mentions the usage of `zig buildpack` but it seems non-trivial to me.

1632690006
kurtis!~textual@user/kurtis
It would be cool if I could "vendor" in my dependencies as git submodules or something along those lines

1632690155
ifreund!~ifreund@user/ifreund
kurtis: adding that as a submodule should work perfectly fine as well

1632690193
ifreund!~ifreund@user/ifreund
all you need in the end is to call LibExeObjStep.addPackagePath("path/to/src/zhp.zig")

1632690201
ifreund!~ifreund@user/ifreund
(in your build.zig

1632690255
kurtis!~textual@user/kurtis
Oh cool! I'll give that a shot. That step of where to add it in build.zig is very useful. Thank ya!

1632690289
kurtis!~textual@user/kurtis
Is there any sort of "standard" way to handle dependencies? I saw a long package management Github Issue but looks like nothing is finalized yet

1632690425
ifreund!~ifreund@user/ifreund
kurtis: yeah, there is no standard way yet as there is no official package manager yet

1632690446
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ifreund apple_pie benchmarks when

1632690463
ifreund!~ifreund@user/ifreund
kurtis: I personally just use submodules in a deps/ directory

1632690502
ifreund!~ifreund@user/ifreund
haze: why me? I think you might be confusing me with luuk...

1632690521
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
no luk is on best friend break for a week

1632690539
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
it was a poke to libraries listing benchmarks with others in their readmes thats all

1632692941
kurtis!~kurtis@user/kurtis
ifreund: That worked. Thanks a lot!

