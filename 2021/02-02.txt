1612225689
andrewrk
it's a pretty small team and a lot of issues

1612234472
motiejus
What is the protocol to "claim" the dev hours once donated?

1612234499
andrewrk
ZSF only accepts no-strings-attached donations

1612234527
andrewrk
did you get a different impression somewhere?

1612244045
motiejus
I did, purely my fault :) thanks for clarifying

1612247298
motiejus
another question on why zig distribution is so small compared to clang toolchain (35MB vs 380MB), from andrewrk post:  "other compilers ship with pre-compiled, target-specific binaries, while Zig ships with source code only <...>" ; looks like there are no clang sources in zig release tarball. How is it so small, really, assuming it's doing on-par what clang toolchain is doing (I know there some things not implemented in zig

1612247298
motiejus
cc, but that shouldn't cause 90% size difference)?

1612247949
andrewrk
motiejus, clang sources are not needed for zig cc, only the support libraries

1612247961
andrewrk
libc, compiler-rt, libcxx, libcxxabi, etc

1612248779
motiejus
Ok, makes sense. So cc-the-compiler is linked in to the zig binary?

1612248983
andrewrk
yes

1612276061
g-w1
is it the plan to make stage2 output textual asm?

1612276078
g-w1
will it decompile the object file? or just have a text asm backend?

1612276097
g-w1
s/decompile/dissassemble

1612277633
mikdusan
hmm... for std.fmt, to print an error do we still just use empty braces? `print("oops: {}", .{ error.Whatever });`

1612279452
mikdusan
yup

1612282475
data-man
mikdusan:

1612282633
mikdusan
to clarify I was just checking why "{s}" works for an errorset value. It's because that type (and many others) completely ignore format spec inside {}. Ignoring invalid specifiers is probably a bad thing.

1612282681
g-w1
yes

1612282769
g-w1
marler8997, not sure if you saw this, but it is needed to make zigup work

1612285276
marler8997
g-w1, thanks for the reminder, there's so many notifications on github I don't always see these

1612285336
g-w1
np

1612285465
fengb
Maybe I should stop watching zig. Too much spam :P

1612288179
Gliptic
you could hide join/left in your client

1612288356
ifreund
I think he's talking about watching the github repo

1612288563
Gliptic
ah

1612288583
Gliptic
well, activity is good!

1612290404
andrewrk
g-w1, I have no plan for textual asm output so far, it's really low on my priority list personally

1612290819
g-w1
ok, I guess I can always use a dissassembler

1612290981
ifreund
what is your use-case?

1612291088
g-w1
using an external assembler and linker if I dont wanna write a new linker backend. seemed easier to me than using an object file

1612291235
ikskuh
andrewrk, g-w1: i don't think zig should have an assembler renderer

1612291244
ikskuh
there are enough really good disassemblers out there

1612291270
ikskuh
just emit an object file and disassemble it with nasm or objdump

1612291339
g-w1
ok makes sense

1612300252
ed_t
how do you use @import for local includes?

1612300269
ikskuh
you mean files?

1612300272
ikskuh
@import("file.zig")

1612300315
ed_t
I am trying to use a terminal package call zbox

1612300366
ed_t
which is in ../zig/zbox/src which has box.zig util.zig prim.zig

1612300373
ikskuh
how do you compile your project? "zig build" or zig build-exe"?

1612300386
ed_t
in ../zig

1612300404
ed_t
and use build-exe life/life.zig

1612300411
ikskuh
ah

1612300417
ikskuh
you can add a package for that

1612300432
ed_t
how?

1612300454
ed_t
is there an examples someplace?

1612300477
ikskuh
zig build-exe --pkg-begin zbox ../zig/zbox/src/main.zig --pkg-end life/life.zig

1612300482
ikskuh
and you can then use @import("zbox")

1612300500
zags
has anyone played around with the idea of making a C to Zig converter? Not perfect, but good enough to make starting points. Would be useful in itself and helpful when learning when coming from C.

1612300513
ikskuh
zags: do you know of "zig translate-c"?

1612300519
zags
i do not

1612300525
zags
the thing exists?

1612300528
ikskuh
yes

1612300528
g-w1
it mostly works! :D

1612300535
ikskuh
it is what drives @cImport

1612300540
zags
holy s... i totally missed that

1612300543
ikskuh
but note that translating c to zig does not work well

1612300545
ikskuh
not at all

1612300545
zags
thanks, will try it out :D

1612300548
ikskuh
int * i;

1612300570
ikskuh
what translate-c does is: [*c]c_int

1612300578
zags
my main need now is functions doing lots of bit fiddling

1612300581
ikskuh
but that's kinda the wrong type

1612300727
zags
like encountering "x ^= y << 27;" right now and I have a hard time finding the Zig idioms, so such a xlation tool would be helpful when learning

1612300782
andrewrk
ikskuh, isn't it pretty far along at this point?

1612300819
ikskuh
yeah, translate-c is getting better and better \o/

1612300819
andrewrk
I mean yeah the generated zig looks pretty garbo

1612300834
ikskuh
it's definitly not good to learn zig by translate-cing files :D

1612300839
g-w1
do gotos work? I remember them not working

1612300841
ikskuh
that was my intention

1612300859
g-w1
I guess you could impliment them with a lot of nested blocks

1612300924
zags
looks like zls master doesn't work with zig master btw, error: expected optional type, found '*std.zig.ast.Node'

1612300924
ed_t
ikskuh thanks

1612300963
g-w1
you have to add a .? in there, but I think a git pull will fix it

1612300982
g-w1
use --recursive

1612301276
zags
good lord, translate-c did the trick \o/

1612301580
ikskuh
sweet

1612301613
zags
that said, going from pn = (p_l + 1) & 15;    to    pn: u64 = ((p_l +% @bitCast(u64, @as(c_int, 1))) & @bitCast(u64, @as(c_int, 15)));

1612301618
zags
is a bit painful

1612301646
ikskuh
yep

1612301653
ikskuh
because c_int

1612301661
ikskuh
you can probably simplify that code a lot

1612301675
ikskuh
pn = (p_l + 1) & 15;

1612301692
ikskuh
or, if it's meant as a 4 bit wrapping operation:

1612301693
zags
yeah i have to through and remove a few hundred casts :D

1612301703
ikskuh
pn = @truncate(u4, p_l) +% 1;

1612301771
zags
yeah i think the point is masking off everything but the lower 4 bits, so either should work?

1612301781
ikskuh
yep

1612301866
zags
thanks!

1612303135
ikskuh
andrewrk: I'm reading the design meeting notes

1612303139
ikskuh
and i noticed:

1612303149
ikskuh
there is no way for a slice to contain

1612303166
ikskuh
it's just a quirk and corner case

1612304841
mmurd
Is there a way to pass mcpu to `zig cc`? I know there's a few issues around this, but I'm still confused :)

1612305676
andrewrk
mmurd, zig cc supports -mcpu=foo

1612306011
mmurd
andrewrk, I just pressed up in my command history and it did work... I'm clearly too tired to be working on this :D

1612306033
andrewrk
you gave me a nice scare tho ;)

1612306114
mmurd
Bit frustrated.  I wanted to use a bulk api in libgpiod, but it seems to not work.  Needed to prove it wasn't me using zig wrong, but the C code has the exact same problemâ€¦

1612306128
mmurd
(Off-topic, but I'm grumbly about it)

1612308892
belgin
hello

1612308901
belgin
andrew's zig thing doesn't compile

1612308908
belgin
zig vulkan window*

1612309022
belgin
i tried with master and with 0.7.1

1612309033
belgin
different errors

1612309097
belgin
here is the link in case you don't know

1612309274
andrewrk
I'll look into it later; got quite a few other tasks piling up first

1612309284
belgin
of course. thank you

1612309343
andrewrk
thanks for letting me know

1612309568
mmurd
Is there something like switch for runtime statements?  In particular, I'm looking for a shorthand "in comptime known list of numbers"

1612309684
ifreund
I don't think I understand the question, switch works at runtime and supports ranges of numbers

1612309814
mmurd
Yeah, you're right.  I must be doing something else stupid.

