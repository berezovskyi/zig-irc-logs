1624324093
daurnimator!~daurnimat@vultr.daurnimator.com
andrewrk: we need to revisit the discussion around build.zig and defaults now that 0.8.0 is out

1624324105
daurnimator!~daurnimat@vultr.daurnimator.com
I have like 5 tabs sitting open :P

1624324113
daurnimator!~daurnimat@vultr.daurnimator.com
(for that disscussion)

1624348722
ikskuh!~xq@2a0d:5940:6:163::ad7e
heya o/

1624348746
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk, g-w1: note sure if the "unused parameter == error" is such a good idea

1624352275
ifreund!~ifreund@user/ifreund
ikskuh: why not

1624352282
ifreund!~ifreund@user/ifreund
it caught a bunch of bugs 

1624352368
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, but it also bloatet some of my files by a significant number of LOC

1624352395
ifreund!~ifreund@user/ifreund
ikskuh: fn foo(_: i32) void not work?

1624352413
ikskuh!~xq@2a0d:5940:6:163::ad7e
then i lose information about the parameter name

1624352419
ikskuh!~xq@2a0d:5940:6:163::ad7e
which i want to keep for documentation purposes

1624352428
ifreund!~ifreund@user/ifreund
why do you have the parameter in the first place then?

1624352435
ikskuh!~xq@2a0d:5940:6:163::ad7e
because polymorphic interfaces

1624352438
ikskuh!~xq@2a0d:5940:6:163::ad7e
can i name multiple params this way?

1624352469
ifreund!~ifreund@user/ifreund
I think stage2 allows that already, if not yet there is an accepted propsal saying it should 

1624352489
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://zigbin.io/9d1282

1624352500
ikskuh!~xq@2a0d:5940:6:163::ad7e
each of those fields needs to have the same API 

1624352507
ikskuh!~xq@2a0d:5940:6:163::ad7e
even if they don't use some parameters

1624352522
ikskuh!~xq@2a0d:5940:6:163::ad7e
otherwise, the code will get too magic

1624352545
ifreund!~ifreund@user/ifreund
sure and this doesn't stop you from doing that, it just makes things more explicit

1624352562
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1624352571
ikskuh!~xq@2a0d:5940:6:163::ad7e
but now each "unused" function takes up 6 lines instead of one :D

1624352609
ifreund!~ifreund@user/ifreund
why not use fn foo(_: i32) void for those?

1624352807
ikskuh!~xq@2a0d:5940:6:163::ad7e
because i have multiple params

1624352847
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i have to check if stage1 accepts this

1624352977
ifreund!~ifreund@user/ifreund
ikskuh: looks like it doesn't yet, although stage2 does

1624352998
ikskuh!~xq@2a0d:5940:6:163::ad7e
it would make zig fmt --ast-check happy, but not the compiler :D

1624352998
ifreund!~ifreund@user/ifreund
updating stage1 to allow that probably isn't too bad

1624364295
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1624364302
ikskuh!~xq@2a0d:5940:6:163::ad7e
something is still very wrong with zig+android

1624364545
ikskuh!~xq@2a0d:5940:6:163::ad7e
a lot of syscalls just die without notification

1624371085
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh no, this should be easy to implement in astgen too https://github.com/ziglang/zig/issues/224

1624371209
ifreund!~ifreund@user/ifreund
g-w1: currently using var instead can be a useful workaround for avoiding comptime-related stage1 compiler bugs

1624371233
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah, i'm also sick of fixing compile errors, so that wont be done by me for a while :P

1624371246
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
just noticing how easy stage2 makes it to implement these types of stuff

1624371263
ifreund!~ifreund@user/ifreund
yeah, it's totally awesome

1624374349
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
global assembly https://ziglang.org/documentation/master/#Global-Assembly works for me inside a struct, which makes it not top-level, is this intended?

1624374626
ifreund!~ifreund@user/ifreund
g-w1: I'd assume so, special casing top-level structs would be inconsistent

1624374639
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, so the docs should be updated then?

1624374669
ifreund!~ifreund@user/ifreund
probably, if you open a PR updating them perhaps someone will correct me

1624374674
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1624374834
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://github.com/ziglang/zig/pull/9198

1624383619
andrewrk!~andrewrk@mail.ziglang.org
ifreund, I support your proposal to move to 1 way of doing things for zig's main CLI

1624383669
andrewrk!~andrewrk@mail.ziglang.org
I would also support a transition to renaming ReleaseSafe & friends to snake_case to match style conventions, and I further want to rename it from std.builtin.Mode to std.builtin.OptimizeMode

1624384598
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ikskuh: I've been thinking about that, can you provide an example of before and after the unused param change? Maybe a middle ground would be to think of a way to make it easier to show that you want to keep an unused param

1624384721
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah sure

1624384725
ikskuh!~xq@2a0d:5940:6:163::ad7e
give me a minute or two

1624385028
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: what is the current way to have zig panic receive a stack trace when building a .so + libc?

1624385095
andrewrk!~andrewrk@mail.ziglang.org
the panic handler is in a different compilation unit?

1624385124
andrewrk!~andrewrk@mail.ziglang.org
I don't quite understand the example yet

1624385149
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
do you mean install a panic handler?

1624385152
ikskuh!~xq@2a0d:5940:6:163::ad7e
no, it's not

1624385156
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have a panic handler in the root file 

1624385160
ikskuh!~xq@2a0d:5940:6:163::ad7e
pub fn panic(...)

1624385167
ikskuh!~xq@2a0d:5940:6:163::ad7e
but the stack_trace parameter is always null

1624385509
andrewrk!~andrewrk@mail.ziglang.org
mmm that's an error return trace

1624385522
andrewrk!~andrewrk@mail.ziglang.org
the stack trace you get by walking the stack. there's a function std.debug.captureStackTrace or something like that

1624385594
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah!

1624385632
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1624386346
ikskuh!~xq@2a0d:5940:6:163::ad7e
g-w1: https://github.com/MasterQ32/Dunstwolke/commit/d45fe87e642089c9a81c3e026c47e37d50808bc5#diff-32248d36e4fd9e45449ccd2a846cb0c4a397e8699920e1852059ef906f0c7487R1774-R1776

1624386361
ikskuh!~xq@2a0d:5940:6:163::ad7e
this commit contains a lot of changes related to unused params

1624386373
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks

1624386426
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i'd argue that you can omit _ = allocator; because : *std.mem.Allocator is enough documentation

1624386470
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it does not seem too bad

1624386474
ikskuh!~xq@2a0d:5940:6:163::ad7e
you cannot omit param names in stage1

1624386499
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh?

1624386526
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes you can

1624386544
ikskuh!~xq@2a0d:5940:6:163::ad7e
huh. last time i tried it was a compile error

1624386563
ikskuh!~xq@2a0d:5940:6:163::ad7e
but even then i'd like to keep the param name for such functions

1624386566
ifreund!~ifreund@user/ifreund
g-w1: stage1 errors if you re-use _ as an identifiers in the function signature last I checked

1624386577
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, they count as idents, cursed

1624386580
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats a super easy fix though

1624386720
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm

1624388179
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I just realized why your branch was named "spider"

1624388630
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
why do you think it wsa named spider?

1624388757
andrewrk!~andrewrk@mail.ziglang.org
because it catches bugs 

1624388870
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
good guess! I named it after spiderman because you mentioned that this will make people code-reading superheroes.

1624389102
ifreund!~ifreund@user/ifreund
andrewrk: Good idea on renaming to OptimizeMode, I'll start on an implementation of this and the std.build changes discussed so we can do all the breaking at once

1624389122
andrewrk!~andrewrk@mail.ziglang.org
thanks!

1624389139
andrewrk!~andrewrk@mail.ziglang.org
g-w1, ah that's funny :)

1624389153
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
;)

1624389583
ikskuh!~xq@2a0d:5940:6:163::ad7e
ifreund: cool

1624389622
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: any objections in replacing LibExeObjStep.addBuildOption with a dedicated std.build.BuildOptions step that provides a FileSource?

1624389638
andrewrk!~andrewrk@mail.ziglang.org
no objection

1624389652
ikskuh!~xq@2a0d:5940:6:163::ad7e
wonderful

1624389656
ikskuh!~xq@2a0d:5940:6:163::ad7e
now i need to find some time :)

1624389672
andrewrk!~andrewrk@mail.ziglang.org
last I checked the namespacing for build_options.zig was problematic

1624389725
andrewrk!~andrewrk@mail.ziglang.org
not sure if it's related but there is a problem to solve there of where to put the generated .zig code

1624389735
andrewrk!~andrewrk@mail.ziglang.org
is that a problem that FileSource solves?

1624389737
ikskuh!~xq@2a0d:5940:6:163::ad7e
yes

1624389742
andrewrk!~andrewrk@mail.ziglang.org
wonderful

1624389746
ikskuh!~xq@2a0d:5940:6:163::ad7e
i have a custom "caching" system right now

1624389754
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i want to port over the one i from stage2

1624389770
ikskuh!~xq@2a0d:5940:6:163::ad7e
so we can actually take benefits in the build system

1624389772
andrewrk!~andrewrk@mail.ziglang.org
that's something we should coordinate on - there are a few design constraints 

1624389778
ikskuh!~xq@2a0d:5940:6:163::ad7e
and just put packages into arbitrarily named folders

1624389856
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i think i need to interview you on how the API of the Cache system is meant to be used

1624390159
ifreund!~ifreund@user/ifreund
andrewrk: were you thinking to rename std.builtin.mode to optimize_mode as well?

1624390180
andrewrk!~andrewrk@mail.ziglang.org
yes

1624390193
ifreund!~ifreund@user/ifreund
cool, just making sure we're on the same page before I get into it

1624390206
andrewrk!~andrewrk@mail.ziglang.org
for this one I would leave an alias until just before 0.9.0

1624390228
ifreund!~ifreund@user/ifreund
sounds good

1624390258
andrewrk!~andrewrk@mail.ziglang.org
I also want to do, at some point:

1624390259
andrewrk!~andrewrk@mail.ziglang.org
std.builtin => std.lang

1624390270
andrewrk!~andrewrk@mail.ziglang.org
@import("builtin") => @import("config")

1624390285
ifreund!~ifreund@user/ifreund
@import("builtin") should only hapen in std.builtin now right?

1624390319
ikskuh!~xq@2a0d:5940:6:163::ad7e
andrewrk: maybe build-config is a better name?

1624390322
andrewrk!~andrewrk@mail.ziglang.org
std.builtin to access the unchanging types, @import("builtin") to access the build configuration

1624390358
andrewrk!~andrewrk@mail.ziglang.org
sorry I know this distinction has been a complete mess to this point

1624390361
ifreund!~ifreund@user/ifreund
I'm trying to decide if I need the const mode = optimize_mode; alias in both the generated builtin source and std.builtin

1624390405
andrewrk!~andrewrk@mail.ziglang.org
one key point is that @import("builtin") can be different per-package

1624390419
andrewrk!~andrewrk@mail.ziglang.org
so that's why std.builtin should have only types 

1624390428
ifreund!~ifreund@user/ifreund
ah I see

1624390454
ifreund!~ifreund@user/ifreund
so the re-export of @import("builtin") stuff in std.builtin will be going away eventually?

1624390459
andrewrk!~andrewrk@mail.ziglang.org
yes

1624390486
ifreund!~ifreund@user/ifreund
ok that clears things up, thanks

1624390721
ifreund!~ifreund@user/ifreund
std.buliltin.CallingConvention is begging to become snake_case too

1624390739
ikskuh!~xq@2a0d:5940:6:163::ad7e
snek it all!

1624390763
ifreund!~ifreund@user/ifreund
though I guess we'd need to do something about .Async... Perhaps use .asynchronous instead?

1624390785
ifreund!~ifreund@user/ifreund
and inline is a keyword too...

1624390816
andrewrk!~andrewrk@mail.ziglang.org
ah yes, the things that keep me up at night

1624390940
ifreund!~ifreund@user/ifreund
andrewrk: serious proposal, make keywords TitleCase so they don't conflict with variable names

1624390988
andrewrk!~andrewrk@mail.ziglang.org
oof, pressing shift for control flow

1624390993
andrewrk!~andrewrk@mail.ziglang.org
that's a high price to pay

1624391009
andrewrk!~andrewrk@mail.ziglang.org
and there are still type names to consider

1624391043
ifreund!~ifreund@user/ifreund
yeah, but I can't find any example of type name/keyword conflicts

1624391064
andrewrk!~andrewrk@mail.ziglang.org
non-serious counter proposal: prepend "oh_yeah_" and append "_baby" to names that have conflicts

1624391082
andrewrk!~andrewrk@mail.ziglang.org
fn foo() callconv(.oh_yeah_inline_baby) void {...}

1624391084
ifreund!~ifreund@user/ifreund
Agreed that it would slow down zig typing speed, but we're supposed to prioritize reading code over writing code right?

1624391120
ifreund!~ifreund@user/ifreund
Fn foo(bar: i32) CallConv(.inline) { ... }

1624391142
ifreund!~ifreund@user/ifreund
it looks pretty weird, but probably just cause I'm so used to the status quo

1624391186
ifreund!~ifreund@user/ifreund
Const FooBar = Struct { x: i32, y: i32 };

1624391201
andrewrk!~andrewrk@mail.ziglang.org
I have no problem with how it looks

1624391227
ifreund!~ifreund@user/ifreund
it would also be the most massively breaking change done to date most likely

1624391260
earnestly!~earnest@user/earnestly
Ada is what prioritising readability looks like

1624391279
andrewrk!~andrewrk@mail.ziglang.org
ifreund, why would this be better than reversing the style convention of enums and unions to be title case?

1624391306
kiedtl!~kiedtl@kisslinux/kiedtl
Is there a way to generate a gmon.txt file (for gprof) from a Zig binary?

1624391307
ifreund!~ifreund@user/ifreund
andrewrk: because then you have consistency of case across enum/union/struct/variable names

1624391323
andrewrk!~andrewrk@mail.ziglang.org
mmm that's a good reason

1624391349
ifreund!~ifreund@user/ifreund
(the fields of enum/union/structs to be clear)

1624391366
andrewrk!~andrewrk@mail.ziglang.org
I think, to save time, I can shortcut our way through this discussion and veto title case keywords

1624391389
ifreund!~ifreund@user/ifreund
fair enough :D

1624391389
andrewrk!~andrewrk@mail.ziglang.org
if it's really important to you we can do a thorough discussion, I would be happy to do that

1624391453
ifreund!~ifreund@user/ifreund
I might write up a proper proposal at some point, but I don't have time to do so now. Is your primary concern that TitleCase is more annoying to type?

1624391494
ifreund!~ifreund@user/ifreund
or is it one of those "it just doesn't feel right" things, which would also be totally ok

1624391609
andrewrk!~andrewrk@mail.ziglang.org
gut instinct, I think it's something that is odd that doesn't bring enough value to justify the distaste it would bring on first impressions

1624400292
dch!sid1310@couchdb/committer/dch
andrewrk: found a fix for building zig 0.8.0 as static for freebsd https://cgit.freebsd.org/ports/tree/lang/zig/Makefile#n33

1624400322
dch!sid1310@couchdb/committer/dch
not pretty but it seems to work

1624405491
andrewrk!~andrewrk@mail.ziglang.org
damn the unused parameter error breaks godbolt again

1624406177
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
huh, go does not have unused paramater error, interesting

1624406243
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hah, https://dev.azure.com/ziglang/zig/_build/results?buildId=15315&view=logs&j=9512b82f-d185-50ea-ee23-d010bc14782f&t=ca25486c-bdcc-50c6-de82-a9ccd6b64318&l=377

1624406248
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if (false) does not stop astgen

