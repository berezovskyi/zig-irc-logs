1612751000
v0idify
I just properly understood how async works in zig and... it's so simple yet powerful! :)

1612757226
andrewrk
:)

1612757457
andrewrk
evented I/O mode is still experimental, but I think the core design is solid

1612762671
daurnimator
andrewrk: I'm not sure about that

1612762707
daurnimator
I'd like to have about the discussion of it in a library context

1612762722
daurnimator
god my language parser is broken

1612762731
daurnimator
I'd like to have a discussion about it in a library context

1612764016
motiejus
andrewrk: I see you solved the compilation problem by ignoring the `-c` flag, and now output is incompatible if I use plain clang vs `zig cc` (zig cc produces non-stripped binary, even though if `-c` is requested). It's OK for me, but something to keep in mind for `zig cc` users

1612764215
andrewrk
motiejus, this is a missing feature of zig's linking abilities, to honor the request to strip

1612764232
andrewrk
it will come in time

1612764693
motiejus
understood. so `zig build-obj` cannot build stripped libraries too? I am trying to find a workaround (compile object file and then link it as a separate step)

1612764779
andrewrk
you can't build a stripped object; that is a contradictory request

1612764812
motiejus
I mean, link it

1612764830
motiejus
i.e. during the linking step

1612764842
motiejus
unless `build-obj` is not a linker? (sorry I am new to this)

1612765304
andrewrk
daurnimator, I'm available for that

1612765831
andrewrk
motiejus, generally one compiles into objects, and links into executables

1612765842
andrewrk
build-obj is more of an advanced use case

1612765880
andrewrk
stripping is something one does after linking (or during linking) removing some redundant information from the final binary

1612765888
andrewrk
it's an optional step

1612765976
motiejus
Yeah, that's what I tried - create an object file (`zig cc -o`) and then link+strip with ld equivalent (I assumed build-obj). Nevermind, the non-stripped binary is already smaller to the official stripped one, so I'm good with this

1612766023
motiejus
Thanks for quick turnaround

1612770365
marler8997
the first PR to win32metadata from the Zig community:

1612770994
daurnimator
andrewrk: I'm around now if you still are.

1612782383
ifreund
andrewrk: working on switches now :)

1612782451
zags
ifreund: damn, what kind of espresso are you on? :D

1612782601
ifreund
I find poking at the ast kind fun, and I'm very motivated to get andrew unblocked on this so stage2 can move forward and I can someday never have to use stage1 again :D

1612782642
ifreund
plus, this is my way of procrastinating other things

1612782705
zags
haha :D

1612785136
Piraty
marler8997: if i'd be that upstream, i'd require you to give that commit a descriptive text

1612785228
Piraty
mainly so people can read on the intention / change context without opening a browser to read #211 (and who knows if that issue will be online in N years)

1612785816
ifreund
tbh a microsoft repo is not the place I'd worry about that

1612785910
ifreund
I do very consciously avoid depending on github issues/PR descriptions for my own stuff and projects like zig thoughu

1612786435
Piraty
that is wise to do

1612786445
Piraty
and why not teach M$ how to properly git

1612786487
daurnimator
I use `git-bug` to get a local copy of issues/pullrequests

1612786591
ifreund
from their readme: "doesn't pollute your project: no files are added in your project"

1612786595
ifreund
how does it work then?

1612786713
earnestly
It pollutes^Wembeds in your .git directory

1612786787
zags
maybe Fossil was right all along, every repo is also an issues tracker/wiki :)

1612786846
earnestly
I appreciate though that the architecture for git allows for this sort of experimentation

1612786849
earnestly
for/of

1612787048
ifreund
indeed, I also take advantage of it with random .git/todo files

1612787085
daurnimator
ifreund: yeah it essentially makes a heap of git objects with the bugs

1612793162
zags
is there a syntax to get an instance of the default value of a given type? Useful in generic code. In C++ you'd do T{} or T()

1612793263
g-w1
const s: S = .{};

1612793265
zags
zero-initialization basically

1612793272
ifreund
T{} works if you define default values for your type's fields

1612793276
g-w1
there is only that if you specify default

1612793301
zags
type 'u64' does not support array initialization

1612793305
zags
need to support primitives

1612793341
g-w1
why not just 0?

1612793342
ifreund
yeah, .{} only works for structs that have a default value for every field

1612793352
zags
g-w1: because it's a generic function

1612793359
zags
type can be struct or primitive

1612793367
ifreund
there's std.mem.zeros if you really want to init everything to zero

1612793376
ifreund
this is considered an antipattern in zig though

1612793377
zags
ifreund: but how do I declare the variable?

1612793386
zags
it needs to be initialized

1612793393
zags
or zig says no

1612793393
ifreund
std.mem.zeros returns a value

1612793399
g-w1
var m: T = std.mem.zeroes(T);

1612793401
zags
oh I see

1612793432
zags
that's exactly what I need, thanks guys

1612793477
zags
ifreund: I don't see why zero-init would be an anti-pattern, quite common in C++ tempalte code at least

1612793482
zags
template*

1612793506
ifreund
being similar to C++ template code is not a goal

1612793516
zags
but being able to do the same things is

1612793522
ifreund
in idiomatic zig you either use undefined or a value that actually has meaning

1612793556
zags
it's well-defined what var x: T = .{} means if would also zero-init primitives

1612793575
zags
or some other general syntax

1612793588
ifreund
but is zero a meaningful default value in all case? I think not

1612793595
zags
in many cases it is

1612793608
zags
and you'd explicitely ask for it

1612793625
zags
now i have to resort to mem.zeroes

1612793646
ifreund
mem.zeroes exists so there's no need for new language syntax/semantics

1612793683
zags
always good to have an anti-pattern in the tool belt

1612793713
ifreund
it's in the std primarily for use when interfacing with C code that expects zero init

1612793724
ifreund
note the doc comment

1612793766
zags
this is so I can spring a variable in a generic into existence

1612793812
ifreund
you can also do var m: T = undefined

1612793833
zags
yeah, true

1612796384
ifreund
andrewrk: switches done, I'm going to take a break working on zig fmt and go back to river for a bit now :)

1612796405
fengb
Handmade Seattle has a podcast where Andrew explains why not zero init

1612796433
fengb


1612796757
zags
I jumped to the Zero Is Initialization segment, but the host didn't let andrew speak, so I closed the tab

1612796816
zags
there's a small number of generic cases where I find it useful, but mem.zeroes exists and that'll do

1612797054
zags
(in all other cases, I agree undefined is of course the right thing to do)

1612798491
zags
hm, being able to attach catch to a block would be really convenient at times, e.g  {many(); related(); things(); } catch |err| switch (err) {}

1612798563
g-w1
with #1717 you could probably make an anon function with a funch of tries and then do 1 catch on it

1612798589
zags
yeah that gets close

1612798623
fengb
zags: looks like exceptions to me :P

1612798912
ifreund
zags:

1612798956
ifreund
TLDR you already can but the ergonomics suck

1612798989
ifreund
and using an anon function isn't a great solution as you'd have to pass everything in as arguments

1612801009
v0idify
how do I see if a frame is done?

1612801023
v0idify
ex. it has returned, without blocking

1612801891
zags
fengb: yeah it does, but error propagation is already a sort of exceptions :) I would use the block/catch rarely, but sometimes it makes a lot of sense

1612801945
zags
ifreund: thanks, good issue

1612802058
zags
having switch |err| as sugar for catch |err| switch (err) would also be helpful to me, but that's already been rejected iirc

1612802107
zags
which is strange given that the language tries to optimize for making error handling smooth

1612803206
v0idify
are string literals null terminated by default?

1612803214
mikdusan
yes

1612803217
fengb
Yes, only literals though

1612803243
ifreund
string literals are pointers to null-terminated arrayrs

1612803285
mikdusan
wait wait I can do better. string literals are const pointers to null-terminated arrays

1612803323
dutchie
on the other hand, a "string" is normally a slice of u8 (i.e. a fat pointer with a length field)

1612803330
DarkUranium
mikdusan, string literals in C are non-const pointers to const null-terminated arrays.

1612803334
dutchie
(and not in general null-terminated)

1612803341
DarkUranium
(type of a string literal in C is `char[n]`, not `const char[n]`)

1612803352
fengb
We're not talking about C

1612803860
zags
#1717 expression can be immediately evaluates right? as in fn() bool {...}()

1612803900
zags
evaluated*

1612804004
Snektron
probably but you can always just use `blk: { ... break :blk value; }`

1612804247
ifreund
zags: your code in the comment you posted should work with the current proposal, but without the try keyword

1612804291
zags
your original comment has multiple try's inside

1612804293
ifreund
though you probably want try on your explode(), sleep(), and run() calls

1612804304
zags
that's what my comment changes :)

1612804307
ifreund
ew now please lets not do that

1612804313
zags
why not

1612804319
ifreund
that's implicit control flow

1612804327
zags
try is that already

1612804332
zags
it returns

1612804345
ifreund
the keyword makes it explict

1612804365
ifreund
implict would be the possiblity for a function call to cause a return

1612804369
ifreund
which is what your suggestion does

1612804392
zags
the try in front of fn makes it clear what will happen

1612804413
ifreund
imagine the case in which the anon function is much longer and has non-trivial control flow

1612804427
ifreund
and some functions called from within it return errors and some don

1612804429
ifreund
t

1612804447
zags
comment gone, I need to think it through haha

1612804480
ifreund
heh, it would be completely contradictory to the core principles of zig IMO :P

1612804495
companion_cube
zags: `fn() {…}()` is an abomination that only exists in languages that don't have blocks-returning-values

1612804504
companion_cube
(namely, js and go)

1612804539
ifreund
zags: really, I think #5610 is what you want

1612804544
zags
well, I'm making a stream-like interface and Zig makes it real hard to make it fluent, so just trying out various ideas

1612804593
companion_cube
stream, like map/filter stuff

1612804595
companion_cube
?

1612804597
zags
yeah, the {}catch thing is what I came up with independently

1612804605
zags
companion_cube: yeah

1612804625
ifreund
I seem to recall that andrew isn't really a fan of such APIs specifically because they conflict with robust and explict error handling

1612804628
companion_cube
without closures that' ll be hard

1612804642
zags
ifreund: i'll make it anyway because I'm a huge fan of it

1612804664
ifreund
I for one am very curious to see where your library ends up :)

1612804674
zags
companion_cube: yeah it sucks, but a large number of common freestanding functions you can plug in (lt,gt,mul,div, etc) will help

1612804713
companion_cube
oh, like as function pointers?

1612804720
zags
ifreund: raw loops suck too, i tend to use <algorithms> and Stream type apis where available. Very readable and easy to refactor.

1612804737
zags
companion_cube: yeah, wrapped in applicatives

1612804755
zags
var result = try intStream.from(&ages).filter(lessThan(min)).map(u64, asFloat64).reduce(1, mul);

1612804765
zags
this works in the prototype

1612804818
zags
nice thing is you can lazily build a type safe pipelines of operations, and it doesn't do anything until you want to do the terminating operation

1612804825
zags
should be possible to make parallell streams as well

1612804873
zags
and stuff like zipping, skipping, limiting, flat-mapping, sorting, averaging and other tasty things

1612805045
companion_cube
the language will fight you

1612805062
zags
sure, it already does - anyway, good way to learn zig even if nobody will ever use it :)

1612805080
zags
but so far it looks better than I expected actually

1612805177
zags
like the zip (non-streamy so far) was actually quite nice thanks to comptime

1612805219
zags


1612805222
zags
quite readable

1612805265
fengb
It's all fun and games until you realize the secret memory usage

1612805305
zags
what do you mean?

1612805356
zags
streams are very good at not using memory

1612805435
fengb
Oh I see

1612805659
companion_cube
seems to work ok in rust, I'd say

1612806261
justin_smith
my experience is that the common programming error with streams is that they can make resource lifetimes and reliance of external state break

1612806295
zags
in what language? never had the issue

1612806297
justin_smith
the "secret memory usage" that comes up in haskell (which effectively streams implicitly) is because of all the resources a stream might keep alive

1612806317
justin_smith
zags: in clojure where more ~half of stdlib is lazy

1612806323
zags
yikes, yeah

1612806375
companion_cube
it's only in haskell

1612806380
companion_cube
otherwise streams are consumed on demand

1612806393
justin_smith
for example, someone creates a code block that consumes a FD - two mistakes are possible here - returning the streaming op while closing the fd (using an expired fd) or leaving an fd open (didn't finalize the stream)

1612806394
zags
yup

1612806421
zags
i've never done anything remotely like that, and i use streams like 10 times per day lol

1612806423
justin_smith
companion_cube: as a real world example: I used a clojure lib that provided a lazy API over a tagsoup style xml api

1612806444
justin_smith
companion_cube: I had a huge memory leak as it "helpfully" held off closing the input stream until end of stream is reached

1612806451
companion_cube
the bugs caused by evaluating lazy stuff too late is real

1612806454
companion_cube
are real*

1612806461
companion_cube
ahaha damn

1612806470
justin_smith
(while one point of a tag soup is you can just stop consuming...)

1612806492
companion_cube
I'd expect it to not leak, but fail if you consume stuff too late as the underlying source is not present anymore

1612806494
companion_cube
it's a tradeoff

1612806518
justin_smith
companion_cube: right - but it's an intrinsic one with the streaming model

1612806519
zags
i love lisp and hated clojure despite its neat persistent data structures

1612806528
zags
the jvm marriage is disgusting

1612806550
zags
convenient of course

1612806570
justin_smith
zags: haha, it's the kind of disgusting that ensures I can use a lispy language at an "enterprise" type company

1612806581
zags
lol right :D

1612806608
justin_smith
zags: in fact, I think what it shares with zig is providing uncomplicated access to the substrate

1612806626
justin_smith
in clj that's the vm, in zig that's the hardware

1612806671
zags
give me a scheme with a good stdlib and good C interop instead

1612806673
justin_smith
for values of "uncomplicated" approximating "only the complexity of the thing offered"

1612806702
justin_smith
zags: good luck pitching that to a startup :D

1612806717
zags
yeah I get the problem :)

1612806735
zags
fortunately I'm the one deciding in my comp :D

1612806782
zags
which means Zig will get used way before it should hehe

1612807670
v0idify
*y = slot.advance.y >> 6; // why is this wrong? "invalid left-hand side to assignment"

1612807685
fengb
y.* =

1612807702
v0idify
oh

1612807715
v0idify
feels weird but makes sense

1612807885
zags


1612807890
zags
I bet a few here qualify :D

1612807928
zags
dafuq, tweet said something else, it's an admin position LOL

1612807965
ifreund
heh, I was confused

1612807972
ifreund
I also don't live in california :D

1612808190
zags
I went ahead and shared internally that zig is production ready in about two years. No pressure.

1612809221
fengb
It's "2 years from stable" for about 3 years now

1612809266
zags
Yes, I didn't pick the amount of years randomly :D

1612809288
ifreund
so much progress in the last three years of zig though

1612809510
zags
hm, the wikipedia page doesn't do it justice

1612809515
zags
needs a rework

1612809634
ifreund
it's got the old logo too

1612809722
Gliptic
hm, logo seems up to date to me?

1612809752
Gliptic
ah

1612809753
zags
not quite

1612809758
Gliptic
yeah, slanted gaps

1612809765
zags
yeah, took me a while too :D

1612809767
ifreund
better font too

1612809898
fengb


1612809933
fengb
smh, they're copying all the best parts of Zig

1612809952
zags
whoever made the logo is good, the rectangle sides has the golden ratio, so it's pleasant to look at

1612810037
Gliptic
fengb: what do you mean?

1612810092
Gliptic
is the zig software foundation the only good part of zig? :P

1612810096
fengb
Rust Foundation is clearly a reaction from ZSF

1612810100
fengb
Oh haha

1612810206
companion_cube
fengb: I think it predates the ZSF, but you're funny nonetheless

1612810259
Gliptic
rust foundation is very recent, so I don't know

1612810279
Gliptic
but it's mostly a reaction to rust layouts at mozilla

1612810285
Gliptic
*layoffs

1612810554
companion_cube
they've discussed the foundation for a long time though

1612810612
fengb
Nah, totally a reaction

1612810662
Gliptic
sure, but became more urgent lately I guess

1612810696
companion_cube
I mean, both are copies of the ocaml software foundation, let's be realistic

1612810700
companion_cube


1612820269
v0idify
i'm allocating memory for a pixel map. each pixel has 4 8-bit channels. should I allocate u32 or u8 for performance?

1612820334
ikskuh
v0idify: you can always bitcast between one or the other :)

1612820350
v0idify
ikskuh, yes but won't that affect performance theorically?

1612820371
ikskuh
not at all

1612820380
ikskuh
bitcast on that size is completly free on every 32 bit arch

1612820396
ikskuh
it just depends on your access pattern :)

1612820440
ikskuh
there should be no performance penalty at all if you chose either one

1612820446
ikskuh
they are both 4 byte large types

1612820511
v0idify
i'll stay on u32. @bitCast is very useful! i was masking and then intCast-ing to do the same

1612820626
fengb
bitcast is always free

1612820644
ikskuh
v0idify: see here :https://zig.godbolt.org/z/hjGfY5

1612820740
v0idify
oh wait i still need intCast if i want to turn it into an u8. it's fine though

1612820747
ikskuh
@truncate(u8)

1612820748
ikskuh
:D

1612820752
ikskuh
if yu don't care for overflow :)

1612820849
v0idify
oh that's perfect, thanks

1612820943
v0idify
finally got what i wanted

1612821148
ikskuh
heh

1612821154
ikskuh
i usually use the Color struct

1612821164
ikskuh
but as aransentin pointed out: using u32 is probably smarter

1612821179
v0idify
what is the Color struct?

1612821185
ikskuh
see the godbolt link

1612821215
fengb
Why is u32 smarter?

1612821236
ikskuh
because r8g8b8x8 is as valid as r10g10b10x2

1612821251
zags
is there anything in std to do saturation arithmetic?

1612821261
ikskuh
no, not really

1612821298
fengb
Depends on the underlying impl, and u32 hides that structure

1612821312
fengb
Although u10 would be broken af 🤔

1612821358
ikskuh
why? ;)

1612821358
v0idify
how do I make the compiler output assembly? I wanna see what's happening

1612821364
ikskuh
aransentin has a 10bit HDR screen

1612821373
ikskuh
v0idify: i'd just push it back into objdump ;

1612821423
fengb
And I'd prefer if the types were Color / HdrColor or something more obvious what's going on

1612821438
fengb
Instead of a generic u32 that may be correct

1612821489
ikskuh
Color = union { hdr: packed struct { r: u10, … }, ldr: extern struct { r: u8 … }, raw: u32 }

1612821495
fengb
may accidentally be incorrect*

1612821509
fengb
But those aren't losslessly transformable

1612821558
fengb
If you set hdr, and use ldr, you're in for a world of hurt

1612821595
fengb
Hmm... we could introduce some really trippy graphics

1612821597
fengb
New art genre?

1612821618
zags
glitch art

1612822030
waleee-cl
zags:  have you checked out janet?

1612822131
waleee-cl
there's also carp, but lisp + borrow-checker seems like a potential match mad -in hell

1612822156
ifreund
janet is sweet :)

1612822237
waleee-cl
ifreund:  yeah, that recommendation should have had an attribution (saw you mention it there)

1612822265
ifreund
there == #river?

1612822280
waleee-cl
ah. yeah :)

1612822289
ifreund
:)

1612822543
v0idify
how do I check for an overflow without actually saving the result

1612822563
v0idify
like if overflow { this value } else { just use the result }

1612822588
g-w1
if i +% 1 = 0 ?

1612822594
g-w1
*==

1612822649
v0idify
well yeah but i'm not just using 1

1612822693
ikskuh
v0idify: @addWithOverflow

1612822759
v0idify
i already looked into that but for some reason it was no good. i'll check again

1612822770
ikskuh
you have to have a result location for it

1612822775
ikskuh
but you can just use a temporary

1612822909
zags
waleee-cl: not yet! Swift, Rust, Julia, Nim and now Zig has already been enough for my "try new languages" list the past couple of months

1612822909
v0idify
i33 to fit a u32 feels very wrong

1612822977
ikskuh
v0idify, can you post the code snippet in question?

1612822999
ikskuh
maybe there's an easy solution

1612823033
ifreund
zags: which one of those did you like the most? (and why is it zig? :P)

1612823074
v0idify
ikskuh, dw i'm just having serious issues with middle school math

1612823108
ikskuh
hm?

1612823139
v0idify
addition and substraction lol

1612823146
zags
ifreund: It is Zig :) I liked Nim a great deal, but the low quality of the 3rd party modules I had to rely on was a show stopper.

1612823184
zags
That's why I was bitching about a peer-reviewed, community driven boost-like initiative for Zig, and boy did I get crushed :D

1612823199
companion_cube
boost doesn't cover that much, does it?

1612823207
companion_cube
compared to the stdlib of non C++ languages

1612823208
zags
i does, it's a life saver

1612823214
zags
starting with ASIO

1612823217
companion_cube
what kind of things do you use it for?

1612823222
zags
boost?

1612823228
ikskuh
companion_cube: c++11 adopted a lot of boost into c++ s td

1612823266
zags
yep

1612823336
zags
i would like a similar initiative for Zig, but not the monolithic style. Small-language communities always get low quality, unmaintained libraries. Nim is great proof too.

1612823358
v0idify
essentially the problem i'm having is i want to (u32 - c_int) and if that would result in < 0 (underflow) just set to 0

1612823367
v0idify
but it seems i need to convert to i33 to do the math

1612823388
zags
waleee-cl: thanks for that link, it looks like a great lisp dialect

1612823535
v0idify
zags, you're forgetting that zig is aiming for total world domination :P

1612823565
companion_cube
ikskuh: but that's my point

1612823570
v0idify
i like the idea

1612823572
companion_cube
there still isn't that much in C++'s stdlib

1612823588
companion_cube
in a modern language most of that should already be in the stdlib, not in 3rd party libs

1612823633
ikskuh


1612823662
ikskuh
v0idify: std.math.add(t, a, b) orelse 0

1612823712
v0idify
that doesn't solve my "problem", t needs to be i33

1612823731
ikskuh
ah

1612823734
v0idify
although it it useful, i'm doing what that function does manually :)

1612823738
ikskuh
what guarantees do you have?

1612823788
v0idify
well, c_int comes from freetype

1612823802
v0idify
it's the offset of a character

1612823811
ikskuh
and you add that to?

1612823817
ikskuh
a pixel coordinate?

1612823823
v0idify
yes

1612823832
ikskuh
you can also cast both to i32

1612823845
ikskuh
because your result might be negative

1612823852
v0idify
u32 can't be casted into i32

1612823857
v0idify
it needs to be i33

1612823879
v0idify
but also i don't care about the negative result (if i get that, i set to 0)

1612823890
v0idify
so i need to go from u32 and i32 to i33 and i33 to u32 again

1612823892
ikskuh
@intCast exists ;)

1612823905
ikskuh
it cannot be coerced into i32, but it can be casted

1612823932
v0idify
fair enough, i doubt the coordinate will be the limit of u32 ^^

1612823934
ifreund
I don't follow, what are the two endpoints you are trying to convert between?

1612823945
ikskuh
u32-c_int

1612823953
ifreund
you could just use u31

1612823967
v0idify
well i would have to set everything to use u32 coordinates

1612823970
v0idify
31*

1612824010
v0idify
(y: u32) - (bitmap_top: c_int). i care if bitmap_top is negative but not if the result is negative (if it is, i set to 0)

1612824022
v0idify
i guess i will intCast the y to i32

1612824238
ifreund
hrm can I use @fieldParentPtr() a pointer to the payload of an optional field?

1612824250
ifreund
that would certainly be convienent right now

1612824296
ifreund
also, can I set an optional field to undefined but non-null?

1612824454
ikskuh
ifreund:

1612824461
ikskuh
var x: ?u32 = @as(u32, undefined);

1612824477
ifreund
that makes sense

1612824490
ikskuh
yes, you can optional-pointer fieldParentPtr afaik

1612824508
ifreund
I have a pointer to the payload not the struct field though

1612824530
ifreund
it feels like it's probably UB but it could theoretically be allowed

1612824649
ifreund
maybe spexguy can help me

1612824715
v0idify
expected type '[*c]const u8', found '[]const u8' what am I supposed to do?

1612824767
ifreund
ikskuh: it doesn't compile :(

1612824773
ikskuh
sad :(

1612824779
ifreund
/tmp/foo.zig:11:50: error: expected type '*const ?u32', found '*const u32'

1612824831
ifreund
yeah...

1612824861
zags
Zig says no

1612824867
ifreund
a @optionalParent() builtin would be possible to implement

1612824896
ikskuh
ifreund: you can probably just ptrcast?

1612824909
ifreund
that's gotta be UB right?

1612824918
ikskuh
nah, the address isn't changing

1612824932
ifreund
you sure? I thought optionals don't have a well defined memory layout

1612824948
ikskuh
optionals for non-allowzero pointers have the same memory layout as a pointer

1612824963
ifreund
the payload isn't a pointer though, it's a struct

1612824966
ikskuh
v0idify: []const u8 is a slice (so ptr+len), but [*c]const u8 is a C pointer

1612824974
ikskuh
ifreund: ah dang

1612825003
v0idify
ikskuh, but can't it downgrade to a pointer?

1612825011
ikskuh
v0idify: so solution would be: find out what pointer C expects there

1612825017
v0idify
i ptrCast'd

1612825023
ikskuh
you can probably just use slice.ptr

1612825026
ikskuh
instead of slice

1612825039
v0idify
oh! i didn't know that

1612825043
ifreund
unless C wants a null terminated pointer...

1612825060
ikskuh
note that if it's a C string, you might want to use [:0]const u8 (zero-terminated slice with runtime check for terminator)

1612825075
v0idify
oh that's cool

1612825083
v0idify
thanks

1612825166
v0idify
time to add harfbuzz into the mix

1612825307
ikskuh
time to go to bed! o/

1612825358
v0idify
o/

1612825708
ifreund
ah, found a way to work around my problems by refactoring :)

1612825785
ifreund
still some inefficiency due to lack of @optonalParentPtr() though

1612827267
andrewrk
ifreund, really appreciate your help! I took a break this weekend so as to not burn out but now I'm back at it :)

1612827535
ifreund
no problem! not burning out is very important :)

1612827559
ifreund
I'm taking a break right now too to work on river, though I've got a PR up for switches and stuff

1612828041
ifreund
andrewrk: I actually did try the @as(*[1]Node.Index, foo) but it didn't compile for whatever reason

1612828051
andrewrk
ah

1612828065
andrewrk
probably not enough magic smoke in your computer

1612828074
ifreund
:D

1612828099
ifreund
I've noticed that coercion between the branches of if statements is funky before

1612828126
andrewrk
oh yeah. good news is that I solved it really cleanly in self-hosted

1612828191
ifreund
I can't wait :)

1612828219
ifreund
hence my motivation to get the zig fmt refactor done so you can get back to the rest of stage2

1612828246
ifreund
plus futzing around with the ast is kind fun

1612828658
andrewrk
:)

1612828769
andrewrk
btw you know how people always say it's too hard to do cleanup right because it's a rarely tested codepath?

1612828798
andrewrk
each of those parser_test.zig cases get run with every possible allocation failing and makes sure the returned error is OutOfMemory with no leaks

