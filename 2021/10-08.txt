1633656431
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
are there any hidden footguns of implementing structs in the x86_64 backend?

1633656439
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
or is it all just memory access like arrays?

1633656444
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
with padding ofc

1633658983
marler8997!~marler899@204.229.3.4
is there something somewhere that talks about the decision to no longer accept language proposals?

1633659701
andrewrk!~andrewrk@mail.ziglang.org
no, I did it on a whim

1633659822
andrewrk!~andrewrk@mail.ziglang.org
marler8997, if you have something to discuss, go for it. you've been an active community member and helped out with a bunch of stuff. mainly the purpose is to filter out people I've never seen before, who check out the language for the first time, and then on day 1 do a drive by language proposals

1633659864
marler8997!~marler899@204.229.3.4
gotcha.  I don't really have anything to propose was just curious about what was going on, like g-w1 said, it's pretty "spicy"

1633659868
andrewrk!~andrewrk@mail.ziglang.org
also there's just a long backlog and a small team; there just isn't any need for proposals at this time. we have plenty to do 

1633661291
andrewrk!~andrewrk@mail.ziglang.org
g-w1, seems like your understanding is correct. the relevant footguns have to do with any logic that is in different places in the codebase but that have to agree on offsets of fields

1633661316
andrewrk!~andrewrk@mail.ziglang.org
these footguns exist in the llvm backend too; it's not unique to x86_64

1633661351
andrewrk!~andrewrk@mail.ziglang.org
e.g. the code that lowers constants into byte arrays has to match the field offsets of e.g. the struct_field_ptr AIR instruction

1633688695
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
cool

1633688703
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i may attempt structs soon then :)

1633688939
flux_control!~flux@sourcemage/wizard/flux
andrewrk: If you need to document something somewhere, I think it'd be fair and non-"spicy" to blatantly state that language proposals won't be accepted until at least after the stage2 compiler is ready and stable (the "at least" leaves a nice ambiguity...). ;)

1633693478
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
how can I force an `if` condition to evaluate at comptime, without the branches being evaluated at comptime (equivalent to C++'s `if constexpr`)?

1633693505
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
making it `comptime if â€¦` tries to evaluate the branches at comptime

1633693591
haze!~haze@2603-7000-a300-1741-a983-c2ed-7c90-0da5.res6.spectrum.com
if (comptime ...)?

1633693623
ifreund!~ifreund@user/ifreund
^^^

1633693647
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I tried that but it will still semcheck the branch resulting in an error, if the condition does not match

1633693748
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
here's my test code for context: https://gist.github.com/flyx/d346acdeb1133a6aa431a3c3b68d8814

1633693825
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
basically, I put a struct into `Wrap`, that struct has two different kind of functions which are identified via their first parameter. returns is a struct with `getWrapperA` and `getWrapperB` that get a wrapper to the function of the specified type (A or B) by name

1633693832
ifreund!~ifreund@user/ifreund
flyx[m]: this compiles, so I think your issue is something else: https://zigbin.io/d31673

1633693866
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
my problem is: ./test.zig:27:61: error: expected type '*ContextB', found '*ContextA'

1633693882
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
and I only see that to happen because the branch is semchecked even though the condition does not match

1633693964
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
(the wrappers do nothing but curry the argument `42`)

1633695543
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
here's smaller code that reproduces it: https://zigbin.io/4632c9

1633695620
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
returning the function pointer seems to be relevant for reproducing the error

1633695661
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
all versions I tried that did not return the fn did work as expected

1633695969
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
even weirder, if I do the `if` expression inside the wrapper function, it does reach unreachable code: https://zigbin.io/7d8357

1633696014
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
these are two nested ifs with the same, comptime-known condition, and they seem to evaluate to different values

1633697240
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
further investigation shows that later declarations seem to overwrite the struct literal inside the if. so if both fns have the same signature, the code will always call the last one: https://zigbin.io/7ab7e5

1633697257
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
this should output 43 and 41, but outputs 41 two times

1633697306
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
compiler bug?

1633698733
haze!~haze@2603-7000-a300-1741-a983-c2ed-7c90-0da5.res6.spectrum.com
what in the world

1633698844
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
the workaround seems to be to declare the inner struct in a separate fn: https://zigbin.io/092430

1633699439
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
here are both versions to compare without the ArgType stuff that has proven irrelevant: https://zigbin.io/512915

1633704833
h4ze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ugh

1633704870
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
ifreund whats the name of that bouncer you use again

1633705033
luuk!~luuk@user/luuk
soju, perhaps?

1633705057
luuk!~luuk@user/luuk
Using ZNC myself, never had any issues and was easy to setup as well.

1633706108
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
as u can see the keepnick plugin doesnt fkn OWRK

1633706138
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
and it was soju thanks

1633707631
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
wow, packed structs on big endian are so broken I can't even work around 9914 by working directly with the bytes.

1633707705
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
what are the cool kids using these days by way of CI for multiple-architecture testing?

1633707746
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
a copy of the struct with the exact same byte representation as the original evaluates differently because of how it was created. 

1633707791
davidfetter_work!~davidfett@c-73-241-222-148.hsd1.ca.comcast.net
where's my theremin when I really need it?

1633708629
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
davidfetter_work probably github action compute matricies?

1633708638
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
most ci tools have them

1633708670
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
I'm not really using CI, so I can't answer your question if it was directed at me, sorry. I just looked at the CI scripts in the repo and downloaded the same qemu package it uses.

1633714763
andrewrk!~andrewrk@mail.ziglang.org
davidfetter, you can get pretty far with linux+qemu

1633715997
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
do you use qemu in zig ci?

1633716005
freshcoffee!~fresh@user/freshcoffee
yes

1633716133
haze!~haze@2603-7000-a300-1741-b96d-5853-3f37-d8cb.res6.spectrum.com
interesado

1633716194
freshcoffee!~fresh@user/freshcoffee
a "linux-user" mode binary of qemu is built and used to test user-space stuff. ie: zig test suite

1633716282
freshcoffee!~fresh@user/freshcoffee
iirc there was a pr exploring the idea of using qemu system emulation, and running that in a ci on x86_64 host, to build/test zig on arch variants of some OS, or even to run an OS that ci provider doesn't support

1633716443
freshcoffee!~fresh@user/freshcoffee
maybe some kind soul can donate a dedicated 16-core box w/ 128 or 256 GiB so we can do that :)

