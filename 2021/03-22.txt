1616371205
companion_cube
funny how these  things happen

1616372404
LewisGaul
Is it possible for a Zig function to return a tuple, and if so how do you declare the return type?

1616372531
g-w1
std.meta.Tuple iirc, but it might not work

1616372587
LewisGaul
ah is that what's used by formatting calls like `print("{s}", .{"hi"})` ?

1616372636
g-w1
no, it just uses anytype since it is an argument

1616372648
g-w1
anytype isn't allowed for return types

1616372651
g-w1
(yet)

1616372673
ifreund
I think that proposal got rejected?

1616372688
LewisGaul
yeah that rings a bell. I can just use an array for now if there's no native support for returning tuples

1616372737
g-w1
does std.meta.Tuple not work?

1616372793
LewisGaul
I haven't tried it to be honest, I only wanted to reach for tuple as I thought it was a native zig concept and seemed a better fit, but using `std.meta` feels like overkill in this case

1616372854
g-w1
iirc in the future it will be `struct { u32, usize, ...... }

1616372857
g-w1
but not sure

1616372952
LewisGaul
from looking through issues that seemed to be an accepted proposal - wasn't sure what the status on it was :)

1616372971
ifreund


1616373000
ifreund
yeah I think `struct { u32, usize, ... }` is planned

1616373021
LewisGaul
I will await that, LGTM

1616375190
andrewrk
g-w1, that field is *zir.Inst in master branch - it's not new

1616375212
andrewrk
when you reference an identifier, if it matches a LocalVal in scope, it will be a reference to that ZIR instruction

1616375254
andrewrk
ifreund, g-w1: I'm about to take on a new task. any toes to avoid stepping on?

1616375312
ifreund
andrewrk: I'm done for the night, don't have anything WIP here

1616375386
andrewrk
cheers!

1616375411
andrewrk
regarding test suite, it's test/stage/* and `zig build test-stage2` runs it

1616375417
andrewrk
oops, test/stage2/*

1616375458
andrewrk
once stage2 gets further along, we'll start running the regular behavioral tests on it

1616375479
andrewrk
we can even do some code coverage analysis to help come up with more test cases :)

1616375533
g-w1
im trying vardecl rn

1616375542
g-w1
kinda there

1616375585
ifreund
I think I'm equiped to do if/for/while when I get time

1616375586
g-w1
also porting the zyg test suite to bash at the same time, so we'll se which one gets done first :P

1616375609
ifreund
might try and unify everything like we do in zig fmt

1616375621
ifreund
(i cleane up that code recently as well :D

1616375711
andrewrk
ifreund, it would be sweet to unify test/stage{1,2} and have a declarative way to specify a test and say like, "this one passes for both", "this one passes for 1 but not 2", "this one passes for 2 but not 1"

1616375723
andrewrk
at least for, e.g., compile errors

1616375814
ifreund
yeah that would be nice

1616375830
ifreund
we'll need that infrastructure long-term to maintain the bootstrapping compiler as well

1616375866
andrewrk
yeah. also would be nice to have a way to load test cases at runtime so we don't have to rebuild the test harness all the time

1616375879
ifreund
indeed, stage1 is slow :/

1616375901
g-w1
yeah ive had that problem a lot

1616375903
andrewrk
lots of ergonomic improvement potential in the test harness

1616375914
g-w1
have you done anything with start2 yet?

1616375917
andrewrk
not yet

1616377569
powerofzero
Hi, I was reading #8284 on GitHub, and that proposal, by my reading, assumes a model where the end binary's package manager will resolve all transitive dependencies. Is this something that has been decided for the official package manager?

1616377698
andrewrk
powerofzero, it has not been definitively decided yet

1616377736
andrewrk
I will say that I am amenable to the idea that the end binary has final say about such things

1616377932
powerofzero
Thanks

1616379510
g-w1
andrewrk: it seems like you partially updated varDecl already? is this true?

1616379526
g-w1
like some of the things deal with LazySrcLocs

1616379539
andrewrk
yeah I did that for 1 or 2 things

1616379549
g-w1
ok cool

1616379728
g-w1
hopefully alomst done with varDecl

1616379909
andrewrk
nice. I'm moving on to `if`

1616380728
g-w1
andrewrk:

1616380864
g-w1
its a nice exersize to understand a codebase to kind of rewrite it :)

1616381689
andrewrk
indeed! good night

1616383806
powerofzero
Is there a conviently packaged way to build and link C dependancies of C code built with build.zig?

1616402316
txdv
what is the song in the beginning

1616402784
Nypsie
txdv:

1616410333
txdv
Nypsie: <3

1616410812
jokoon
what's the most commonly used zig 3d engine used around here? didot?

1616410884
jokoon
I wish I could use zig on android

1616410905
jokoon
Zig seems to borrow some "pythonic" features

1616410926
jokoon
It's really a cool language

1616410939
ifreund


1616411003
jokoon
it's like C++ but simpler and without the complicated stuff, only the simple things that are in C

1616411042
jokoon
It's hard to describe the feeling I have towards zig, but it seems to be the language I was looking for a long time

1616411203
companion_cube
jokoon: what's pythonic about it?

1616411231
jokoon
the 'f'*4

1616411236
jokoon
results in a string

1616411257
ifreund
I think you mean "foo" ** 4

1616411273
txdv
seems like its spring agian

1616411324
txdv
yeah, zig is a clean uped version of C

1616411328
companion_cube
heh, fair enough

1616411387
jokoon
so array are always static sized, right? there aren't containers like std::vector or std::map?

1616411389
txdv
Currently I am looking at raylibs api: void SetWindowState(unsigned int flags)

1616411402
txdv
I realized that flags in C are implemented using macros

1616411427
dutchie
jokoon: std.ArrayList

1616411438
txdv
And now I'm looking at the API and I have no idea how to search for the actual flags, because the type is unsigned int and there is nothing in the type system that argument to the macros

1616411447
dutchie
and std.AutoHashMap and friends

1616411467
dutchie
most of the time if you want a variable sized array in signatures you use slices though

1616411474
daurnimator
jokoon: the standard library is full of container types

1616411570
jokoon
their doc lack examples

1616411587
jokoon
oh wait nevermind

1616411599
ifreund
jokoon: look at the tests in the same source file for examples

1616411771
dutchie
at the moment, reading the source code is much better than the generated docs

1616411791
dutchie
as a side bonus, you get to see examples of idiomatic zig code

1616411864
companion_cube
is it the plan that the stdlib would also be specified (like the STL) and have several implementations?

1616411874
companion_cube
or should only the language have a spec, and the stdlib be shared

1616411901
ifreund
what would be the benefit of multiple stdlib implementations?

1616412005
companion_cube
the same as having multiple compilers?

1616412022
companion_cube
(in particular, not depending accidentally on implementation details)

1616413352
daurnimator
Is there nothing in build.zig to let you pass extra arguments to the compiler?

1616413502
g-w1
like what?

1616416236
daurnimator
g-w1: e.g. -Bsymbolic

1616416306
g-w1
the build system should probably have a flag for that

1616416408
daurnimator
yeah. but there seems to be several options that it doesn't have a flag for

1616416412
daurnimator
an escape hatch would be useful

1616423992
txdv
Is it possible to do object introspection with zig of C code? Like I want to do @import("somelib.h"), then find a function which is name "somefunction" and it should tell me how many arguments there are in it?

1616424028
txdv
has the name* sorry for poor grammar

1616424197
ikskuh
yep

1616424201
ikskuh
just @cImport() it :)

1616424213
ikskuh
you get a normal zig namespace with all comptime introspection available to other zig code

1616424969
txdv
what are the introspection primitives?

1616424996
txdv
the API for introspection?

1616425022
ifreund
@typeInfo

1616425055
powerofzero
std.builtin has the TypeInfo type that you get from @typeInfo()

1616427099
FireFox317
ifreund, you didn't see

1616427522
forgot_password
What's the proper way to convert `[_]c_int{3}` to a `[*:0]const c_int`?

1616427691
ikskuh
@intCast([*:]const c_int, &[_]c_int{3,0})

1616427699
ikskuh
you need to guarantee zero-termination somehow

1616427721
forgot_password
Okay, I'll try it out. Thank you :)

1616427803
dutchie
did you mean @ptrCast

1616427856
forgot_password
Works like a charm :)

1616427861
ikskuh
YES :D

1616427875
forgot_password
Obviously not with the @intCast :P

1616427899
ikskuh
well

1616427906
ikskuh
:D

1616428529
v0idifyy
isn't resolvePosix ignoring '.'? isn't that wrong?

1616428555
v0idifyy
relative("./hello", ".") returns ".."

1616429856
forgot_password
Can I somehow cast a []const u8 to a [:0]const u8 when I know that the null-terminator is appended at comptime?

1616429870
forgot_password
I can't use @ptrCast, because it's not a pointer, right?

1616429914
dutchie
slices are pointers, so it should work i think. but better would be just to always have the null-terminated slice

1616429979
ikskuh
yeah, ptrCast is the right tool here

1616429986
forgot_password
But that doesn't work

1616429992
ikskuh
oh

1616429993
ikskuh
wait

1616430006
ikskuh
slice[0..:0] is the right thing i think

1616430095
forgot_password
So I have `(field.name ++ [_]u8{0})[0.. :0]` now, but I get the error `slice-sentinel is out of bounds`

1616431232
forgot_password
I just do some allocations at runtime now. It's not ideal, but I got some compiler crashes, so I guess it's fine for now

1616432558
ifreund
FireFox317: oh shit, no I did not :(

1616432846
ifreund
FireFox317: that's 100% my fault, you had the PR up before I started working on it, I just didn't think to check.

1616433927
v0idifyy
i'm pretty sure relativePosix is broken and i have no clue on how to fix it

1616434453
g-w1
im working on async astgen stuff rn

1616434563
ifreund
v0idifyy: first step is to make a failing test case

1616434699
v0idifyy
ifreund, try testRelativePosix("./file.html", ".", ".");

1616434704
v0idifyy
i would have to setup a dev environment (i

1616434716
v0idifyy
(i'm just editing into lib/std)

1616434787
g-w1
just run zig test path.zig

1616434821
v0idifyy
oh!

1616434825
FireFox317
ifreund, ah yeah no problem, these things can happen. I did learn more about this new structure, so that's good anyway xd

1616434905
v0idifyy
well yes, it fails. the logic of the function confuses me tons though so i can't seem to find a way to fix it

1616435004
ifreund
v0idifyy: pretty sure passing a file to fs.path.relative() a misuse, it expects two directory paths

1616435044
ifreund
FireFox317: thanks for your understanding, I'll definitely be checking the PR list before I work on things in the future

1616435053
v0idifyy
not documented anywhere if that's the case

1616435083
v0idifyy
even then, doing (".", ".", ".") fails, it returns an empty string

1616435098
ifreund
that's what it's supposed to do

1616435188
ifreund
FireFox317: yeah wrapping your head around the data structures involved is the hard part, if you decide to apply that knowledge and send more code feel free to ping me for a speedy review :)

1616435325
v0idifyy
why? passing an empty string to join fails last time i checked

1616435403
ifreund
v0idifyy:

1616435446
ifreund
if the string is empty the paths are the same and you probably don't need to do anything

1616435502
v0idifyy
sorry, my brain is fried and skipped through that part (i did read the comment..)

1616435529
v0idifyy
so i should if(eql(relative(), "")) "." when passing to join?

1616435605
FireFox317
ifreund, thanks! :)

1616435706
v0idifyy
nevermind

1616435707
v0idifyy
i

1616435921
danyspin97
can I get a constant slice?

1616435941
ikskuh
danyspin97: of what?

1616435945
danyspin97
i.e. a []u8 const

1616435954
danyspin97
from a string literal

1616435966
ikskuh
a string literal is already a const slice

1616435969
ikskuh
(kinda)

1616435984
ikskuh
[]u8 is a non-const slice, but it coerces to a const slice

1616435993
ikskuh
@as([]const u8, @"my []u8")

1616436049
danyspin97
ikskuh: not working :/

1616436057
ikskuh
can you share some code

1616436095
g-w1
it should be `@as([]const u8, "my []u8")`, no?

1616436134
danyspin97


1616436142
danyspin97
g-w1: tried that too, not working

1616436143
ikskuh
g-w1: @"my []u8" is a variable name :D

1616436147
danyspin97
ahhh

1616436154
g-w1
oh lol

1616436158
ikskuh
danyspin97: that won't work

1616436165
ikskuh
you're trying to "un-const" a value

1616436169
ikskuh
and remove the const

1616436179
ikskuh
"afoafasd" is a const value, it cannot be coerced to []u8

1616436191
ikskuh
do you need mutability of the string?

1616436202
ikskuh
if not: ArrayList([]const u8)

1616436210
danyspin97
yea

1616436215
danyspin97
my bad :D

1616436224
danyspin97
I really should define an alias

1616436229
ikskuh
if you need the []u8, you have to clone the string with an allocator

1616436312
danyspin97
yea, which is what I've done till now

1616436320
g-w1
wont dereferencing it also work?

1616436328
danyspin97
using @as is way better (provided that I have also added the const)

1616436346
dutchie
g-w1: yeah but then it'll be on the stack so putting it into an ArrayList won't work too well

1616436356
noam
Hmm, is lazy analysis supposed to affect locals, also?

1616436371
noam
`var c = true;` ← unused, should it be analyzed?

1616436382
g-w1
yes it should be analysed im pretty sure

1616436388
noam
Important because the rfs can have effects, yeah

1616436390
dutchie
actually, i guess it'll copy there too, but you don't really want ArrayList([n]u8)

1616436401
g-w1
i think only declarative scopes are lazy

1616436404
noam
Makes sense

1616436457
danyspin97
g-w1: [0..] also works

1616439129
g-w1
could someone review this. I tried to add async stuff to the new layout, but I had 2 confusions:

1616439458
ifreund
g-w1: for the block thing, see boolBinOp for an example

1616439938
g-w1
im mostly confused about how to use zir.Inst.MultiOp{} with a suspend_block

1616440110
ifreund
g-w1: The only difference between block and suspend_block is the tag, everything else can stay the same in how the instructions are created

1616440165
ifreund
i.e call gz.addBlock(.suspend_block, ...);

1616440187
ifreund
and then copy over the instructions after genreating them in a child scope

1616440644
cepheus
weird question, but is it possible to get a function pointer for a BoundFn? i'm writing a structure of sorts atop a C library that makes use of function pointers for callbacks with user pointers, and the code i'm writing to wrap it is type-parameterised, so i need a way to reference the type itself in the callback's context

1616440837
g-w1
ifreund: ok ill try that

1616441272
txdv
Hi guys! That talk with the handmade nasa guy was amazing, I didn't know such an awesome community existed

1616441964
cepheus
whoops, i know where i was going wrong, i was accessing the function via the instance rather than the type

1616443775
andrewrk
powerofzero, can you elaborate on your question about build.zig and C dependencies?

1616443805
andrewrk
cepheus, we're trying to get rid of the BoundFn type in the language actually

1616443879
cepheus
hah, in this case i'm largely only aware of it's existence through these edge cases. i did notice there are efforts to eliminate the distinction though

1616444381
g-w1
im still very confused about the block thing. if someone wouldn't mind, could you finish that part of the pr? I think I can do everything else

1616444884
andrewrk
g-w1, sure thing

1616445091
g-w1
and do you think we should have a seperate suspend scope so that it can have nice src locations?

1616446670
andrewrk
not sure what you mean, what does the scope have to do with source locations?

1616446834
g-w1
genzir scopes used to have sources:

1616446838
g-w1
does that make sense to you?

1616447027
ifreund
g-w1: errNote() takes a LazySrcLoc now, you should have enough data to make one

1616447069
ifreund
you probably want to default to node_offset

1616447143
ifreund
... which you do a few lines earlier for the errMsg() call.  I'm confused what you're confused about

1616447188
g-w1
the notes have to show where the previous suspend blocks are located

1616447200
g-w1
not the current one

1616447272
g-w1
they were are on the scope, and are still on the nosuspend scopes

1616447289
g-w1


1616447417
ifreund
seems pretty clear to me that we should have a Suspend scope then

1616447449
g-w1
yeah, just wanted to get another opinion :)

1616447624
ifreund
part of me wonders why we bother with async await stuff in self-hosted yet

1616447656
g-w1
its just astgen, vexu added it around a month ago iirc

1616447659
ifreund
that could all be @panic("TODO") until we have the compiler building itself with the cbe

1616447670
g-w1
hmm, ig

1616447678
ifreund
yeah it's just astgen, but it causes maintenece burden as demonstrated right now

1616448240
andrewrk
IMO rip it out if it's not covered by test cases

1616448372
g-w1
rip my work. its fine tho I learned so thats all that matters ;)

1616448407
ifreund
g-w1: you itching to do some ripping or shall I?

1616448425
g-w1
rip away

1616448471
ifreund
:)

1616448477
andrewrk
as a hint, the c backend is probably the simplest way to get test coverage for frontend improvements

1616448517
g-w1
yep, thats how we did runtime error stuff

1616448544
g-w1
ill close my pr as its being ripped

1616449040
andrewrk
I think we should probably do all of async stuff at once, astgen, Sema, codegen, rather than trying to split it up

1616449106
ifreund
I agree

1616449137
ifreund
and I also think it should wait until the compiler can build itself with the c backend at least

1616449209
ifreund
andrewrk: would you rather have the current async-related zir instructions commented out or deleted?

1616449225
andrewrk
agreed about building itself too

1616449233
andrewrk
deleted

1616449237
ifreund
+1

1616449256
ifreund
we can always go back in the git history to see them

1616449273
andrewrk
yep. hopefully it won't annoy vexu too much. I'll have a chat with him and make sure :)

1616449287
andrewrk
(but go for it)

1616449331
ifreund
cool, it'll probably take me a bit

1616454826
andrewrk
this untagged union safety is real nice

1616456268
dimenus
my favorite thing to come out of zig recently is userspace SoA

1616456279
andrewrk
the API is not bad!

1616456282
dimenus
that's a pretty great solution without adding more complexity in the language itself

1616456761
dimenus
i like the strategy to move towards DoD for stage-2, but i think having indexes / handles into everything makes it harder to debug under eg gdb

1616456785
dimenus
i could just be tired / stupid though

1616456811
andrewrk
you're right, we are taking a bit of a maintenance hit here

1616456827
andrewrk
I think it's worth the pain though because this is a pretty reasonable use case for the language

1616456835
andrewrk
so if it leads us towards lang changes, that's good

1616456998
ifreund
andrewrk: i'd kill for distinct types for all these different kinds of indexes tbh

1616457012
andrewrk
I'm feeling the same way

1616457050
andrewrk
SpexGuy told me to try using a non-exhaustive enum but idk it felt awkward to try to do that, I gave up after like 20 min of refactoring

1616457179
ifreund
yeah non-exhaustive enums feel like a hack for this, @enumToInt() everywhere makes little sense as you're not using it as an enum

1616457191
dimenus
limiting footguns is a good thing. +1 for distinct types

1616457219
dimenus
ifreund: agreed

