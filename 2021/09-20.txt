1632096201
bfiedler!~bfiedler@2a0d:d740:107::3
I have a bit of an antipattern that I need to solve: I have global state which should be initialized at startup and before testing, but it is too expensive to compute at compile time

1632096208
bfiedler!~bfiedler@2a0d:d740:107::3
any idea how I can go about that?

1632097906
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
irc? more like RIC

1632097964
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
bfiedler: i would say don't use global state, but also if you want to: `pub var global = undefined;` start of main: `global = whatever;`

1632098399
Tekk!~tekk@89.45.224.139
It's also kinda weird to go "It's too expensive to do once at the beginning of time, so I should do it every time my program starts instead"

1632100299
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
right now, that is a legit problem with stage1

1632100302
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
in a few months, it wont be

1632123944
bfiedler!~bfiedler@2a0d:d740:107::3
g-w1: Yeah, that's probably what I will do until comptime is faster, thanks

1632123963
bfiedler!~bfiedler@2a0d:d740:107::3
Tekk: it takes a few seconds in release builds and >10min during build

1632126966
companion_cube!~simon@user/companion-cube
Code generation? 

1632127017
ifreund!~ifreund@user/ifreund
probably not worth the build system complexity

1632127040
ifreund!~ifreund@user/ifreund
especially since this is for test code it seems

1632127287
bfiedler!~bfiedler@2a0d:d740:107::3
ifreund: it's for both

1632143656
bgiannan!giann@2a01:4f8:141:1272::2
how am i supposed to import things from a subdirectory of my project?

1632143666
bgiannan!giann@2a01:4f8:141:1272::2
without getting `import of file outside package path` error

1632143679
bfiedler!~bfiedler@2a0d:d740:107::3
@import("subdir/file.zig") should just work TM

1632143712
bgiannan!giann@2a01:4f8:141:1272::2
it doesn't but maybe it's because i'm doing `zig test src/tests/mytest.zig`

1632143756
bfiedler!~bfiedler@2a0d:d740:107::3
is your import relative to your current directory or `src/tests`

1632143761
bfiedler!~bfiedler@2a0d:d740:107::3
I think it has to be relative to the latter

1632143795
bgiannan!giann@2a01:4f8:141:1272::2
the path is relative to the `mytest.zig`

1632143935
bfiedler!~bfiedler@2a0d:d740:107::3
huh, that should work. do you have a paste of the files?

1632144883
ifreund!~ifreund@user/ifreund
bgiannan: you can't import outside of the directory of your root source file by default

1632144893
ifreund!~ifreund@user/ifreund
you can use --main-pkg-path to change this directory

1632144919
ifreund!~ifreund@user/ifreund
that is, passing the root directory of your project as --main-pkg-path should fix your issue

1632144982
bgiannan!giann@2a01:4f8:141:1272::2
ifreund, ah yes i remember that point. But don't you think you should be able to `zig test some/where/mytest.zig` without having to play with `--main-pkg-path` ?

1632145045
ifreund!~ifreund@user/ifreund
maybe, I haven't given it much thought. I was just explaining the current behavioir

1632145070
bgiannan!giann@2a01:4f8:141:1272::2
huh it then fails when the import is itself importing something else in the p roject :)

1632145113
bgiannan!giann@2a01:4f8:141:1272::2
nevermind that last bit, my @import were wrong there

1632145705
bgiannan!giann@2a01:4f8:141:1272::2
can i programmatically know if i'm in Debug build mode?

1632145752
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.builtin.mode == .Debug

1632145756
bgiannan!giann@2a01:4f8:141:1272::2
thx

1632145922
luuk!~luuk@user/luuk
ikskuh, isn't that deprecated? I believe the `builtin` namespace within std will be renamed to `lang`. Therefore the future/current way to check would be `@import("builtin").mode`, right?

1632145939
ifreund!~ifreund@user/ifreund
yes, that's right

1632145949
luuk!~luuk@user/luuk
Ah, thanks for confirming ifreund :)

1632145961
ifreund!~ifreund@user/ifreund
the // These are all deprecated.

1632145969
ifreund!~ifreund@user/ifreund
comment in std.builtin also confirms that :D

1632145984
luuk!~luuk@user/luuk
ACTION facepalms

1632145986
luuk!~luuk@user/luuk
Sorry

1632145998
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh

1632146003
ikskuh!~xq@2a0d:5940:6:163::ad7e
good to know

1632146081
ifreund!~ifreund@user/ifreund
ikskuh: basically types the language depends on go in std.builtin (soon to be std.lang) while information about the current compilation goes in @import("builtin")

1632146104
ifreund!~ifreund@user/ifreund
I think it's a pretty nice split to make

1632146110
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1632146114
ikskuh!~xq@2a0d:5940:6:163::ad7e
it's definitly reasonable

1632149302
bfiedler!~bfiedler@2a0d:d740:107::3
Is there a nice way to iterate through all values of an integer type? everything i've tried is taking a larger type and then truncating it down, which feels a bit sluggish

1632149373
Tekk!~tekk@89.45.224.139
(1 << 32) - 1 definitely isn't going to be the slow part of iterating through all the values, I think.

1632149399
bfiedler!~bfiedler@2a0d:d740:107::3
it's not about performance, but about code readability

1632149439
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
wdym all values of an integer type

1632149443
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
like through the bits?

1632149453
bfiedler!~bfiedler@2a0d:d740:107::3
I have a u6 and want a loop to go from 0 to 63

1632149473
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
var count: u6 = 0; while (count < std.math.maxInt(u6)): (count += 1) {}

1632149484
bfiedler!~bfiedler@2a0d:d740:107::3
but that excludes the last int

1632149490
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
then do <=

1632149494
bfiedler!~bfiedler@2a0d:d740:107::3
then it overflows

1632149494
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
idk

1632149496
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
you get the idea

1632149499
ikskuh!~xq@2a0d:5940:6:163::ad7e
var i: u32 = 0; while(!@addWithOverflow(u32, &i, i, 1)) {}

1632149510
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ok that isnt very readable xq

1632149518
bfiedler!~bfiedler@2a0d:d740:107::3
ah yeah, addwithoverflow does it, but it's still hackish

1632149526
ikskuh!~xq@2a0d:5940:6:163::ad7e
i mean that's the generic way

1632149531
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
you're generic

1632149531
bfiedler!~bfiedler@2a0d:d740:107::3
better than my current solution though, thanks :)

1632149539
bfiedler!~bfiedler@2a0d:d740:107::3
haze: chill man

1632149541
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
what did you have rn

1632149542
ikskuh!~xq@2a0d:5940:6:163::ad7e
var i: u32 = 0; while(true) {     i +%= 1; if(i == 0) break; }

1632149545
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
bfiedler LOL

1632149584
bfiedler!~bfiedler@2a0d:d740:107::3
var i: usize = 0; while (i < 64) : (i += 1) { const j = @truncate(u6, i); ... }

1632149609
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
10

1632149611
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
100*

1632149822
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://zig.godbolt.org/z/e1fWG5nKT

1632149927
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i see that the instructions differ but what are you inferring from this xq

1632149982
ikskuh!~xq@2a0d:5940:6:163::ad7e
the second one has better code

1632149989
ikskuh!~xq@2a0d:5940:6:163::ad7e
(very similar, but way less instructions)

1632150008
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
thas about as much as i extracted

1632150038
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
lithdew showed me a tool to see some numbers but i forgot what it was

1632150062
ikskuh!~xq@2a0d:5940:6:163::ad7e
codegen for npots is bad anyways right now

1632154156
jcmoyer!~jcmoyer@user/jcmoyer
https://godbolt.org/z/j3j9E9xYT is this supposed to compile?

1632154193
jcmoyer!~jcmoyer@user/jcmoyer
it works if you change c_do_thing to just take *T

1632154273
ikskuh!~xq@2a0d:5940:6:163::ad7e
nope, optional pointers are not an option here ^^

1632154284
ikskuh!~xq@2a0d:5940:6:163::ad7e
can c_do_thing really take a ?*T?

1632154310
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
the based [*c]T

1632154468
jcmoyer!~jcmoyer@user/jcmoyer
in this particular case no, I think if I looked hard enough I could find a case where it can

1632154478
jcmoyer!~jcmoyer@user/jcmoyer
I'm just copying extern fn definitions from translate-c

1632156900
bfiedler!~bfiedler@2a0d:d740:107::3
I've got about 2M of generated code that stumps the zig analyzer, it gets stuck during semantic analysis. Any tips how to debug what the problem is?

1632157731
lumo_e!~enrico@2001:b07:5d38:4002:9734:8f7b:eafa:f629
is Vexu here?

1632157772
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
bfiedler is the source available online

1632157915
ifreund!~ifreund@user/ifreund
lumo_e: nope, don't believe so. You'll probably have the most luck pinging them on github

1632157977
lumo_e!~enrico@2001:b07:5d38:4002:9734:8f7b:eafa:f629
thanks, was just checking out in case their handle was not the same here

1632158068
bfiedler!~bfiedler@2a0d:d740:107::3
haze: not yet, it's a big array-of-struct-with-array initialization, something like pub const asdf = .{ .{ .field1 = 0, .arrayfield = .{ about 4k integers }}, .{ .field1 = 1, .arrayfield = ... }}

1632158085
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ooooh yeahhh 

1632158088
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
try making it non anonymous

1632158221
bfiedler!~bfiedler@2a0d:d740:107::3
haze: that's it, thanks!

1632158456
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
yeah anonymous stuff has been the jankiest part for me so usually when things go awry thats the first step i take

1632158513
bfiedler!~bfiedler@2a0d:d740:107::3
good to know, it hasn't bitten me before

1632158644
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
it's usually nesting them that causes problems ime

1632169628
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
And now it works!

1632169637
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ooh, my optimism paid off.

1632169802
ifreund!~ifreund@user/ifreund
what works? :D

1632169860
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
My shiny new account on this IRC server.

1632169894
ifreund!~ifreund@user/ifreund
ah, congrats!

1632169900
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Thanks. We're very proud.

1632169916
andrewrk!~andrewrk@mail.ziglang.org
welcome :)

1632169924
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
\o/

1632170006
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
On the not working front: modular arithmetic seems to be somewhat borked. ld.lld: error: undefined symbol: __mspabi_remu

1632170111
andrewrk!~andrewrk@mail.ziglang.org
smells like a missing compiler-rt function

1632170146
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
seems likely

1632170252
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I guess I'll file a bug. Whee!

1632170287
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: not sure if you saw, but the blocking issue on https://github.com/ziglang/zig/pull/9652#issuecomment-912502516 is that realpath for the file debuginfo doesn't work on bsds. What should I use instead? I tried to figure out what is used in stage1, but I couldn't really see.

1632170348
andrewrk!~andrewrk@mail.ziglang.org
realpath doesn't work on BSDs?

1632170350
andrewrk!~andrewrk@mail.ziglang.org
huh

1632170366
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
        else => @compileError("querying for canonical path of a handle is unsupported on this host"),

1632170440
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
or maybe its not implemented in zig, seems like it must be in posix.

1632170458
andrewrk!~andrewrk@mail.ziglang.org
I'm looking at the FreeBSD source code and its libc has a realpath implementation

1632170489
andrewrk!~andrewrk@mail.ziglang.org
there is a __realpathat syscall

1632170539
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
so getFdPath needs to be implemented for bsds?

1632170575
andrewrk!~andrewrk@mail.ziglang.org
why does the debug info need to call realpath in the first place?

1632170611
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
to get the absolute path of the source file, so that we can debug it from a directory other than cwd

1632170703
andrewrk!~andrewrk@mail.ziglang.org
I see

1632170738
andrewrk!~andrewrk@mail.ziglang.org
oh you're looking at trying to get realpath for a fd, not a string

1632170758
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yep

1632170769
andrewrk!~andrewrk@mail.ziglang.org
in stage2 we use a Directory abstraction which contains both a directory handle as well as a string path

1632170784
andrewrk!~andrewrk@mail.ziglang.org
so you should be able to use the string path to construct the path that you need

1632170798
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
it seemed that the path was null (at least in gdb, gdb may be wrong)

1632170817
andrewrk!~andrewrk@mail.ziglang.org
check the doc comments; null has a meaning

1632170823
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
thanks

1632170857
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ah, so if its cwd, I should just get cwd, and then concat it, that makes sense

1632170860
andrewrk!~andrewrk@mail.ziglang.org
yep

1632170865
bfiedler!~bfiedler@2a0d:d740:107::3
is it normal that std.testing.allocator runs out of memory after a few small ArrayLists?

1632170924
andrewrk!~andrewrk@mail.ziglang.org
bfiedler, no; std.testing.allocator is using std.heap.GeneralPurposeAllocator which will request more memory from the OS if it needs it. you probably have a bug that is trying to allocate a really large number of bytes

1632170955
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
or OutOfMemory could be in the error trace as a bug, try to see if the actual error is not OutOfMemory

1632170981
andrewrk!~andrewrk@mail.ziglang.org
that's a good point too. handled OutOfMemory errors are not deleted from the trace

1632171199
bfiedler!~bfiedler@2a0d:d740:107::3
g-w1: huh, indeed it's a test failure

1632171273
bfiedler!~bfiedler@2a0d:d740:107::3
I was wondering how 4 2-byte elements could lead to failed allocations

1632172795
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I wonder if this is actually an LLVM bug. Easy enough to try the same thing but in C.

1632172898
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Nope, works fine in C.

1632172904
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Oh wait, that's GCC

1632172954
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Right, I never did get LLVM to build for this target.

1632172962
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
do you have clang?

1632172978
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It is installed, yes.

1632172984
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
that uses llvm

1632172998
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I don't think it has msp430 enabled by default though. It's an experimental architecture for them.

1632173004
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ahh

1632173005
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Or it was the last time I looked, anyway.

1632173359
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Oh, right, and I've only used the GCC runtime anyway. I could probably just link that in...

1632174727
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ok, found the code in LLVM (and GCC) to implement these calls. I'm pretty sure they do belong in compiler-rt, and I'm happy to add them in, but I might need some hand holding.

1632174744
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
https://github.com/ziglang/zig/issues/9807

1632177246
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I'm confused about the usingnamespace changes. Does this mean there's no longer a way to pull all the public functions from a module into my global namespace?

1632177350
marler8997!~marler899@204.229.3.4
leeward, yes, at least no directly.  You can pull them into a single qualified name though, like "const x = struct { usingnamespace ...}", then you can use x.Foo

1632177534
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ok, sure, but I could do that before if I wanted to, no?

1632177556
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
No more equivalent of Python's "from foo import *"

1632177565
marler8997!~marler899@204.229.3.4
right

1632177629
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Well, I'm either going to make a bunch of my code longer or add a whole lot of explicit imports. There's no more terse way than "a = foo.a; b = foo.b;" is there?

1632177653
ifreund!~ifreund@user/ifreund
nope

1632177680
marler8997!~marler899@204.229.3.4
Right, I find my self using a combination of x = foo.x, and replacing all my instance of "x" with "foo.x"

1632177712
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Easy enough, I guess.

1632177717
ifreund!~ifreund@user/ifreund
I personally love this change, but probably because I was already writing code without pulling things into my gloabal namespace

1632177739
ifreund!~ifreund@user/ifreund
it makes it a lot easier to find where things come from in an unfamiliar codebase

1632177743
marler8997!~marler899@204.229.3.4
it does seem to make code a bit easier to read

1632177754
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I'm not crazy about it, but if it makes implementing incremental updates easier I guess I'll live.

1632177775
ifreund!~ifreund@user/ifreund
yeah it's a pretty serious simplification for the compiler as well :)

1632177809
ifreund!~ifreund@user/ifreund
it raises the ceiling of how good/fast incremental compilation can be

1632177812
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I'm pretty picky about what I put in my global namespace, but I have a few modules that are designed to be used in it (because their functions are so essential to everything) so I suspect I'll be explicitly importing a lot of new names.

1632177896
ifreund!~ifreund@user/ifreund
Yeah, I can totally understand that. It should just be a simple copy/paste of ~10 lines between files though. It will increase your LoC count a bit but I don't think it will negatively impact maintainability

1632177915
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I don't disagree.

1632178620
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I do think it might be worth some syntactic sugar to make multiple imports from the same module easier. Maybe something like "@importFrom("metasyntactic.zig", foo, bar, baz)"

1632178632
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Hmm, I wonder if I could do that now with comptime.

1632178726
ifreund!~ifreund@user/ifreund
leeward: there's no way to add identifiers to the current scope without actually writing `const x = ...`/`var x = ...`

1632178738
ifreund!~ifreund@user/ifreund
which was the whole point of making this change to usingnamespace

1632178747
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It would save on repetition too, which is a potential source of subtle and nasty bugs.

1632178772
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Sure, but could I generate the "const x = ..." code? I think I could.

1632178781
ifreund!~ifreund@user/ifreund
oh yeah code generation is totally fine

1632178787
ifreund!~ifreund@user/ifreund
but you can't do this with comptime

1632178791
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
:/

1632178842
ifreund!~ifreund@user/ifreund
this is totally going to tempt people to use the C preprocessor on zig files isn't it...

1632178849
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
This bug is unfun: "const foo0 = mod.foo0; const foo1 = mod.foo0;"

1632178878
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
It might. That would be bad.

1632178934
ifreund!~ifreund@user/ifreund
I don't think people would be very accepting of such a thing

1632178973
ifreund!~ifreund@user/ifreund
which means it will likely be isolated to strange, cursed projects and not really affect the ecosystem at large

1632178996
ifreund!~ifreund@user/ifreund
I mean, alternative preprocessors exist for C as well

1632179044
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ok, my (now) 91-line file went from having a single usingnamespace (and no other dependencies) at the top to having 16 lines of const declarations.

1632179421
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I kinda like the builtin approach. Maybe it's impractical though. Ho hum.

