1609831648
scientes
g-w1, do you have a paste with the code

1609831665
scientes
if this is LLVM I am intimately aware of LLVM's switch optimization code

1609831690
scientes
but it appears it is zir

1609840325
pixelherodev
Is the nested expr really the best way to specify it? (I'm not saying I can do better, it's just really unpleasant in my fully subjective opinion)

1609840445
shachaf
I'm used to AT&T syntax but maybe I should get used to Intel syntax one of these days.

1609840466
shachaf
Even though the ideal one would probably be somewhere between them.

1609840921
pixelherodev
Meh, the exprs are fine, I just needed my shot of tea before getting to work in the morning :)

1609845252
pixelherodev
Am i reading the grammar wrong, or is `3 + @import("a.zig")` technically grammatically (but not semantically) valid?

1609845297
ifreund
that's righ

1609845304
pixelherodev
The import seems to propagate upwards into a Primar - ah

1609845306
pixelherodev
Why?

1609845310
ifreund
you can tell because zig format doesn't complain

1609845313
pixelherodev
To avoid special-casing builtins?

1609845329
ifreund
@import() just returns a type

1609845335
pixelherodev
Huh.

1609845343
dutchie
a struct?

1609845354
dutchie
i guess a struct is a type

1609845355
pixelherodev
Why is `type + 3` valid?

1609845388
pixelherodev
TypeExpr propagates into a valid MultiplyExpr...

1609845396
ikskuh
pixelherodev: because `type` is just a value like `false` or `1.0`

1609845398
ifreund
I don't see anything wrong with that being valid grammer, no need for special casing types here

1609845417
ikskuh
^=

1609845427
pixelherodev
I guess that makes sense...

1609845432
ikskuh
types are just values

1609845435
ikskuh
struct{} + enum{}

1609845437
ikskuh
is also valid

1609845480
pixelherodev
Whelp, my imports are technically going to be a bit overstrict for now, I'll fix it later

1609845487
ikskuh
var x: (enum {} + struct {}) = 25 ++ .{3};

1609845500
pixelherodev
Wait, *that*'s actually allowed?

1609845503
ikskuh
that's syntactically valid

1609845504
ikskuh
sure

1609845508
pixelherodev
Ah, sytactically :P

1609845509
ikskuh
why shouldn't it be?

1609845516
pixelherodev
syntactically*

1609845528
ikskuh
var x: struct {}() = undefined;

1609845529
ikskuh
tht also :D

1609845534
pixelherodev
haha

1609845546
pixelherodev
... actually, I'm not sure thatone is... (double checks)

1609845552
ikskuh
i am

1609845556
ikskuh
zig fmt accepts it

1609845561
pixelherodev
Grammar disagrees, I think

1609845565
ikskuh
nope

1609845568
ikskuh
why should it?

1609845571
ifreund
^

1609845572
pixelherodev
PARAMLIST isn'taccepted after arbitrary types IIRC

1609845573
ikskuh
i'm just calling a value

1609845581
ikskuh
but after values i can call :D

1609845591
ikskuh
and struct{} is a valie

1609845592
pixelherodev
... nope, it's allowed

1609845592
ikskuh
*value

1609845598
pixelherodev
> KEYWORD_async PrimaryTypeExpr SuffixOp* FnCallArguments

1609845603
pixelherodev
Wait...

1609845611
pixelherodev
Copied the wrong thing XD

1609845613
pixelherodev
> PrimaryTypeExpr (SuffixOp / FnCallArguments)*

1609845638
ikskuh
struct {}.*()

1609845646
ikskuh
that's also a syntactically valid type :D

1609845679
pixelherodev
Parsers are fun :D

1609845695
ikskuh
yes

1609845701
ikskuh
stress-testing parsers even more

1609845742
pixelherodev
Heh - do we have parser-specifictests in the official repo?

1609845750
pixelherodev
... wait, dumb question

1609845761
pixelherodev
The most we

1609845774
pixelherodev
Or, rather, "Does it

1609845790
pixelherodev
Anything more requires actually testing the generated tree, which is parser-dependent (for now!)

1609845843
ikskuh
you can just have a list of "must be accepted" and "must not be accepted"

1609846161
ifreund
^

1609846187
ifreund
and you can trivialy use zig fmt to check test cases

1609846390
ikskuh
zig fmt is using stage2 parser already, right?

1609846430
ifreund
yes

1609846439
ikskuh
ah, nice

1609846549
pixelherodev
ikskuh: yes, but that's partial

1609846563
pixelherodev
"Accepted" != "parsed correctly"

1609846573
ikskuh
right now, that's fact :D

1609846574
pixelherodev
"Not accepted" doesn't test

1609846585
pixelherodev
ikskuh: not if the parser I want to test is mine ;)

1609846601
ikskuh
why?

1609846607
ikskuh
just create a random string

1609846618
pixelherodev
because mine accepting input doesn't prove it parsed it into the right tree

1609846618
ikskuh
check if your parser has the same acceptance as zig fmt

1609846618
ikskuh
:D

1609846649
pixelherodev
Fuzz test every possible string using accepted characters from zero char to 512 chars against zig fmt acceptance? ;P

1609846666
pixelherodev
that's...

1609846679
ikskuh
how we solved a haskell programming task at uni

1609846698
pixelherodev
I mean, if this was a 512-bitstring that'd be 13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084096 different strings.

1609846709
pixelherodev
but it's not a bitstring. It'dbe

1609846742
pixelherodev
A smart fuzz tester, changing e.g. ident->lparen->builtin would probably be feasible

1609846757
ikskuh
other idea:

1609846762
pixelherodev
Don't bother?

1609846764
pixelherodev
That's my idea

1609846764
ikskuh
generate a random AST, output it with zig fmt

1609846769
ikskuh
parse that again

1609846770
pixelherodev
Can't ;P

1609846782
ikskuh
you can

1609846784
pixelherodev
My AST isn't compatible with zig's, can't output itto fmt

1609846791
ikskuh
you can

1609846794
ikskuh
use stage2 ast

1609846797
ikskuh
to generate random sources

1609846799
ikskuh
and parse these again

1609846805
pixelherodev
Ahhh, then test parsing them withmine?

1609846816
pixelherodev
Gotcha

1609846823
pixelherodev
That's what Ib was talking about re: smart fuzz tester :)

1609846955
pixelherodev
ikskuh: that's not a bad idea, yeah

1609846988
pixelherodev
especially if I add a naive zig backend that can replicate zig fmt lol

1609852684
sharpobject
is someone aware of a nice json and websocket implementation

1609853505
ifreund
sharpobject: for json see std.json

1609853526
sharpobject
ty

1609853604
pixelherodev
huh, uN types are just IDENTs? That's neat

1609853672
g-w1
see this for ws

1609853911
sharpobject
ty

1609855078
koakuma
Hi, I'm trying to add compiler-rt support for f128 operations on sparc64

1609855079
koakuma
Currently what I'm doing is simply making a wrapper around existing code so that it'll expose the names expected by the ABI

1609855094
koakuma
But I'm encountering a weird problem with addition

1609855137
koakuma
Where the

1609855169
koakuma
But when I add a print statement to trace the values it somehow fixes itself

1609855190
koakuma


1609855197
koakuma
Any clue why is this happening?

1609855269
koakuma


1609855450
koakuma
Debugging with gdb shows that the parameters are set correctly

1609855450
koakuma
But as I said before, the first addition somehow returns junk

1609857278
mikdusan
koakuma: added a quick thing to try in your gist

1609857531
koakuma
It returns the correct result!

1609857538
koakuma
How come?

1609857674
mikdusan
not sure. try the next thing in gist.

1609857861
koakuma
It works too

1609857865
koakuma
This is weird

1609857870
mikdusan
smells like something to do with stack

1609857885
mikdusan
are you on sparcv9 target?

1609857889
koakuma
Yes

1609857940
mikdusan
seeing if I can build your fork; and get a zig-ir dump

1609858049
mikdusan
oh old version. llvm10

1609858176
mikdusan
yeah I'm not going to be able to easily use that... my version of macos is just not compat with older zig

1609858434
koakuma
mikdusan: Use the sparc64-libs branch, that's where I do my work

1609858683
mikdusan
hmm anyone recall how to disable stackprotected/stackguard

1609858973
mikdusan
ah -fno-stack-check

1609859624
mikdusan
koakuma: another one to try

1609859702
mikdusan
whups had the fn named as entry. fixed now.

1609860152
koakuma
It doesn't work, prints the wrong result

1609860598
mikdusan
it's as if there is an undefined bit(s) of memory somewhere and we just get lucky by padding the stack before first call. then it gets set during the call, and helps each subsequent call because it's the same call stack/params repeated

1609860959
koakuma
I think I know what's the problem

1609861074
koakuma
The SPARC ABI needs us to reserve six 64-bit words in the stack frame at startup

1609861090
koakuma
When I wrote the startup code, I forgot to account for that

1609861125
koakuma
If it's really stack-related then adding the required reserved area should be enough to fix it

1609861216
mikdusan
for just the first frame or all frames?

1609861278
koakuma
Just for the first frame, I think

1609861721
mikdusan
probably not same thing, but TIL about sparc v9 stack bias

1609862096
koakuma
Adding the reserved area didn't seem to fix it :(

1609867887
pixelherodev
`while(foo) : (bar) { baz; }` is always identical to `while(foo) { baz; bar; }`, right?

1609867905
pixelherodev
Or is the contexpr only evaluated conditionally?

1609868028
pixelherodev
if this was C, I'd guess it wa sa shadowing thing

1609868033
pixelherodev
but we're not

1609868149
mikdusan
it's always evaluated; that is `continue` will not short-circuit it

1609868760
pixelherodev
Ahhhh, okay; thanks!

1609869871
ifreund
if it were always the same it probably wouldn't exist :P

1609869886
pixelherodev
Hence the question

1609870876
leeward
I believe `while (foo) { defer bar; baz; }` is the same as `while (foo) : (bar) { baz; }`

1609871277
pixelherodev
leeward: I believe so as well, yeah

1609871289
ifreund
nope

1609871297
ifreund
continue doesn't run defers

1609871306
ifreund
or wait does it?

1609871309
andrewrk
it does

1609871320
ifreund
does break not?

1609871328
andrewrk
what you're thinking of is that `break` will also run the defer but you don't want it to

1609871356
ifreund
right, yeah that's exactly what I was thinking of

1609871370
pixelherodev
Ahh,right

1609871379
pixelherodev
andrewrk: thanks for clarifying :)

1609872804
justin_smith
am I doing something dumb here? `if (v) "#" else "."` is returning "#" for both true and false input

1609872830
justin_smith
it's inside a print where I also print v, and I see that v does actually vary between true and false

1609872844
justin_smith
if I use a literal true or false in the form it works as expected

1609872852
ifreund
justin_smith: probably need to see code

1609872855
justin_smith
maybe this is caused because it's inside a print?

1609872943
justin_smith
ifreund:

1609872998
andrewrk
wtf I just got MITM attacked by my ISP when I clicked that link

1609873013
justin_smith
wow, weird

1609873018
leeward
time to switch DNS providers?

1609873045
andrewrk
they did it with http injection, I'm using 1.1.1.1

1609873076
andrewrk
"for my protection" they said

1609873136
andrewrk
justin_smith, you might be hitting a compiler bug with if statements inside anon tuples

1609873153
andrewrk
sorry

1609873156
ifreund
my ISP likes to do that too, so I started using a VPN all the time

1609873159
justin_smith
andrewrk: OK - so I at least know a workaround then

1609873495
marler8997
how did you find out windows CI was running out of memory?

1609873513
andrewrk
it's one of the only ways to get killed with no error message or stack trace

1609873519
marler8997
ah

1609873534
andrewrk
it's also been a problem that has plagued us for months now

1609873566
marler8997
is it possible to fix that issue on the CIs?

1609873569
andrewrk
let's just say I'm really motivated to get this new compiler implementation off the ground

1609873572
marler8997
no error message on OOM

1609873635
marler8997
I'm not too familiar with how OOM works on windows...might need to research that one

1609873707
marler8997
from a quick glance, it doesn't look like windows has an OOM killer, so how is this behavior on the Windows CI occuring?  It kills processes with no errors?

1609873789
g-w1
is there a decided struct/(tagged)union layout for stage2? or will all the backends just improvise? if I were to impliment this, are there any guidelines for this other than intuition?

1609873869
g-w1
thinking about this for error sets, so I guess it could be a little easier since its just union(enum) { code: u16, payload: T }

1609873880
g-w1
*error union

1609873903
ifreund
I assume they should be laid out in whatever way makes the most sense for the backend. That's kinda the point of non having a well-defined memory layout

1609873925
g-w1
I have no experience with laying out memory, are there any guidelines/resources?

1609874008
andrewrk
marler8997, I think you have access to the logs right? if you click the red x from master branch commit history

1609874070
andrewrk
g-w1, hmm I'm trying to remember what resources I used to learn. I think I just played with a bunch of clang output to see what it did for various things

1609874073
marler8997
I do yes, I've looked through the logs before and never saw anything about processes being killed, just that they exit with a non-zero exit code

1609874076
g-w1
also, andrewrk: #7092 should be ready for review now. no pressure, just informing you that it is ready

1609874081
andrewrk
thanks!

1609874097
remby
g-w1: in general or for zig?

1609874106
andrewrk
marler8997, the most recent failed on says "LLVM ERROR: out of memory" at the bottom

1609874112
g-w1
general/stage2

1609874118
andrewrk
which is presumably LLVM's malloc wrapper panicking

1609874134
marler8997
interesting

1609875056
marler8997
ok CI passing now on the "Fix Windows Paths" PR attempt 2!

1609875075
andrewrk
noice

1609875080
marler8997
my strategy, keep rebasing until someone else fixes the CIs :)

1609875205
andrewrk
I apologize for the churn and I do appreciate that

1609875249
marler8997
you gotta do what you gotta do, balance between dev speed and stability

1609875511
andrewrk
yeah. thanks for understanding

1609890338
FireFox317
andrewrk, #7700 :)

1609890372
andrewrk
wow, both the issues! nice work!

1609890857
FireFox317
yep! They were fun to figure out :)

1609890876
FireFox317
especially the alloca hoisting one

1609890887
pixelherodev
and it has a nice solid number :)

1609890903
andrewrk
FireFox317, nice, I like the way you set up the functions inside the opaque context

1609890941
FireFox317
considering whether i should store the latest alloca instruction or store the instruction after the latest alloca instruction was a fun tradeoff

1609891008
FireFox317
andrewrk, i do think we can actually move the llvm_backend.zig file into src/codegen/. that is probably a good improvement

1609891107
andrewrk
src/codegen/llvm.zig and src/codegen/llvm/bindings.zig ?

