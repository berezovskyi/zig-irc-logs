1638494741
companion_cube!~simon@user/companion-cube
hey andrewrk, are you familiar with Apache Arrow? it's strikingly similar to what you describe in your recent talk

1638499874
andrewrk!~andrewrk@mail.ziglang.org
never heard of it

1638499933
andrewrk!~andrewrk@mail.ziglang.org
ifreund, re: main stack for processes and threads: https://github.com/ziglang/zig/blob/cbd653e1d678f0560f5ed3e93a41caa512d93443/lib/std/Thread.zig#L886

1638499957
andrewrk!~andrewrk@mail.ziglang.org
no MAP_GROWS_DOWN here but it is indeed mmap when creating a thread for the main stack

1638499982
andrewrk!~andrewrk@mail.ziglang.org
pretty sure it's what pthread_create does too. easy to check with strace

1638502648
companion_cube!~simon@user/companion-cube
https://arrow.apache.org/docs/format/Columnar.html it's basically a… idk, format for data oriented in memory storage

1638502657
companion_cube!~simon@user/companion-cube
found it via https://github.com/pola-rs/polars#blazingly-fast-dataframes-in-rust--python (pandas but in rust)

1638502687
companion_cube!~simon@user/companion-cube
the thing has a lot of ways of arranging data in columnar format (struct of arrays) 

1638502691
companion_cube!~simon@user/companion-cube
just a cool reference

1638519388
chgr!~ek@nat-91-137-30-14.net.encoline.de
Hi there, I just looked into recursion and there is a builtin (@call) available to modify the compiler behaviour (`always_tail`, `never_tail`, ...). Is the compiler (current git master) able to automatically determine that a function is tail recursive or do I have to use the @call builtin?

1638520879
andrewrk!~andrewrk@mail.ziglang.org
the optimizer is quite good at figuring out tail recursion

1638520888
andrewrk!~andrewrk@mail.ziglang.org
the @call builtin is for when you need guaranteed semantics

1638521493
chgr!~ek@nat-91-137-30-14.net.encoline.de
cool, thanks!

1638530369
ifreund!~ifreund@user/ifreund
andrewrk: ah cool, I should have looked at the clone() man page 

1638530441
ifreund!~ifreund@user/ifreund
for processes it seems that pid 1 gets a stack from the kernel on boot and fork() then does its thing and duplicates this stack when creating new processes

1638531175
Franciman!~Franciman@mx1.fracta.dev
hello fantastic community

1638531542
ifreund!~ifreund@user/ifreund
_o7

1638531569
Franciman!~Franciman@mx1.fracta.dev
ifreund: is this an emoticon of you at your desk sitting on a gaming chair?

1638531624
ifreund!~ifreund@user/ifreund
Franciman: the _ was a typo actually, o7 is a wave :D

1638531643
Franciman!~Franciman@mx1.fracta.dev
ahah

1638531645
Franciman!~Franciman@mx1.fracta.dev
\o

1638531728
Franciman!~Franciman@mx1.fracta.dev
i-i have a question, is there a zig way to tell the compiler and ultimately the CPU that a branch condition is unlikely to be true?

1638531742
Franciman!~Franciman@mx1.fracta.dev
like in gcc you have the unlikely() builtin

1638531754
Franciman!~Franciman@mx1.fracta.dev
I found setCold, but it applies to functions, it seems to me

1638531936
ifreund!~ifreund@user/ifreund
Franciman: right, it's not currently possible to control this at sub-function granularity but there is this accepted proposal: https://github.com/ziglang/zig/issues/5177

1638531969
Franciman!~Franciman@mx1.fracta.dev
I could always put the conditional in a function

1638531971
Franciman!~Franciman@mx1.fracta.dev
lol

1638531973
Franciman!~Franciman@mx1.fracta.dev
and set it cold

1638531979
Franciman!~Franciman@mx1.fracta.dev
does it work if the function is inline?

1638531983
Franciman!~Franciman@mx1.fracta.dev
btw thanks

1638532169
Franciman!~Franciman@mx1.fracta.dev
w-wait

1638532171
Franciman!~Franciman@mx1.fracta.dev
what is Zag?

1638532191
Franciman!~Franciman@mx1.fracta.dev
https://github.com/ziglang/zig/issues/5239 i was reading this and they reportedly say:

1638532200
Franciman!~Franciman@mx1.fracta.dev
«In the Nim sense. This'll be especially helpful when Zag comes in.»

1638532400
ifreund!~ifreund@user/ifreund
nothing officially afaik

1638532423
ifreund!~ifreund@user/ifreund
it's been floated as a name for a hypothetical post-1.0 unstable branch though

1638532428
Franciman!~Franciman@mx1.fracta.dev
:O

1638532430
Franciman!~Franciman@mx1.fracta.dev
awesome

1638532433
ifreund!~ifreund@user/ifreund
which I think is what that issue refers too

1638539938
pkap!~pkap@185.209.196.177
Is there something like `std.mem.copy` but for strings of unknown size? I allocated a bunch of memory and now I want to copy `[*:0]u8` strings in there.

1638540292
ifreund!~ifreund@user/ifreund
pkap: there probably should be, but there isn't yet. Either convert your 0 terminated pointers to slices and use mem.copy() or write your own thing

1638540308
ifreund!~ifreund@user/ifreund
but how would you know how much to allocate without knowing the length of the strings?

1638540626
pkap!~pkap@185.209.196.177
Couldn't you check with `std.mem.len`?

1638540800
ifreund!~ifreund@user/ifreund
pkap: sure, so just use that length to turn your pointers into slices 

1638540839
pkap!~pkap@185.209.196.177
Ok thanks I'll trye this.

1638540899
ifreund!~ifreund@user/ifreund
note that all mem.len() does is iterate looking for a 0

1638540978
pkap!~pkap@185.209.196.177
Is there maybe something like this https://github.com/JakubSzark/zig-string , but for `[*:0]` strings?

1638541186
ifreund!~ifreund@user/ifreund
don't think so, any library like that is going to store the length as well

1638541205
ifreund!~ifreund@user/ifreund
why do you want to use [*:0] pointers instead of slices?

1638541311
pkap!~pkap@185.209.196.177
I don't necessarily want to, it's just that I get [*:0] from the program I am trying to work with (river).

1638541403
ifreund!~ifreund@user/ifreund
heh, so it's my fault I guess

1638541404
pkap!~pkap@185.209.196.177
On a higher level, what I'm trying to do is to concatenate a bunch of `[*:0]` strings and send it over the wayland protocoll. Maybe I need another approach, ifreund?

1638541425
ifreund!~ifreund@user/ifreund
pkap: which protocol and why?

1638541470
pkap!~pkap@185.209.196.177
river-output-status that I extended for this purpose.

1638541521
pkap!~pkap@185.209.196.177
To send the names of a bunch of views to a river status client.

1638541635
ifreund!~ifreund@user/ifreund
pkap: are you stuffing a bunch of strings in an wl_array? sending each string in a separate event would be more idiomatic

1638541680
ifreund!~ifreund@user/ifreund
(also just to warn you, I probably won't merge new river-status features, I've decided that that approach is a dead end) 

1638541867
pkap!~pkap@185.209.196.177
I know. I don't think this will result in something good enough to merge. It's more that I wanted to try out some zig and just needed something I could work on...

1638541929
ifreund!~ifreund@user/ifreund
cool, yeah playing around with stuff is a great way to learn

1638542024
ifreund!~ifreund@user/ifreund
I'd recommend adding two new events to the protocol then, send_view_title which has a string argument and done event that is sent after all view titles have been sent

1638542105
ifreund!~ifreund@user/ifreund
then emit the send_view_title event multiple times in the same order as the view_tags array

1638542224
pkap!~pkap@185.209.196.177
Yeah that sounds easier than sending

1638542285
pkap!~pkap@185.209.196.177
than sending all titles together and split them after receiving.

1638542316
pkap!~pkap@185.209.196.177
Thanks ifreund, I'm going for that solution.

1638542431
ifreund!~ifreund@user/ifreund
have fun!

1638542441
pkap!~pkap@185.209.196.177
In case you're wondering why I want to do this: I'm imagining something like the TreeTab Layout in Qtile https://docs.qtile.org/en/latest/manual/ref/layouts.html#treetab .

1638542457
pkap!~pkap@185.209.196.177
Thanks!

1638542641
pkap!~pkap@185.209.196.177
So after the protocol part I was planning to build something like river-tag-overlay but in zig.

1638542686
ifreund!~ifreund@user/ifreund
neat

1638543201
novakane!ca74a093b3@user/novakane
pkap: if you want to make something like river-tag-overlay, I did make something which has still a lot of problem, but if you want to look at it https://git.sr.ht/~novakane/agertu

1638543321
pkap!~pkap@185.209.196.177
Thanks, this will be a create place to start!

1638543336
pkap!~pkap@185.209.196.177
s/create/great

1638543725
pkap!~pkap@185.209.196.177
Also you have incorporated fcft already, great. I'll need this as well

1638543932
novakane!ca74a093b3@user/novakane
yes it was one of my goal with this project, the implementation is basic for now though

1638557676
dfrey!~dfrey@172.103.152.101
./main.zig:49:44: error: expected type '[]const u8', found '[*:0]u8'

1638557679
dfrey!~dfrey@172.103.152.101
        day = fmt.parseUnsigned(u8, os.argv[1], 10) catch |err| {

1638557681
dfrey!~dfrey@172.103.152.101
                                           ^

1638557734
dfrey!~dfrey@172.103.152.101
Shouldn't a `[*:0]u8` coerce to a `[]const u8`?

1638563473
tgschultz!UserNick@047-034-058-084.res.spectrum.com
dfrey, how would that work? `[*:0]u8` has a length that can only be determined by finding the sentinel. `[]const u8` needs to know the length. coercion here would require the compiler to insert a hidden loop.

1638571046
dfrey!~dfrey@172.103.152.101
tgschultz: That's a fair point...  So what would be the idiomatic way to parse an unsigned integer out of argv?

1638572452
_javyre!~javyre@2001:470:69fc:105::2162
dfrey: have you tried ` day = fmt.parseUnsigned(u8, std.mem.span(os.argv[1]), 10)`?

1638572498
dfrey!~dfrey@172.103.152.101
_javyre: I have not.  Looking up what std.mem.span does

1638572615
_javyre!~javyre@2001:470:69fc:105::2162
creates a slice by finding the length and then doing `ptr[0..length]`

1638572649
_javyre!~javyre@2001:470:69fc:105::2162
for a sentinel terminated type this means iterating through it to get the length

1638572675
_javyre!~javyre@2001:470:69fc:105::2162
s/doing/returns/

1638572690
_javyre!~javyre@2001:470:69fc:105::2162
 * creates a slice by finding the length and then doing `ptr[0..length]`

1638572738
dfrey!~dfrey@172.103.152.101
Thanks. I suspect that will work. I'll give it a try a bit later.

1638572797
retropikzel!9d1a4f9f46@2604:bf00:561:2000::ce
Anyone happen to know if its possible to get sys/select.h somehow? I'm cross compiling on linux to windows

1638574055
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
I'm trying to compile some code that declares a large array in bss `var memory: [4294967296]u8 = undefined` but the compiler fails with the error "allocation failedthread 511949 panic: ...". Surprisingly a similar C program compiles just fine with zig cc. Anyone have any idea why? It seems to work for array sizes up to ~128MB but beyond that it crashes

1638574442
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
unrelated to that, I haven't been on IRC in several years and had issues with the web client. Can someone confirm that my messages are actually being received?

1638574570
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
confirmed via https://marler8997.github.io/zig-irc-webpage/?date=2021-12-03 that my messages appear to be working so disregard that last request

1638574574
andrewrk!~andrewrk@mail.ziglang.org
hi mikemar10 

1638574593
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
hi!

1638574651
andrewrk!~andrewrk@mail.ziglang.org
seems like for some reason the compiler decided that it needed to allocate compiler memory for that array. I agree that it seems like it should not have to do that

1638574666
andrewrk!~andrewrk@mail.ziglang.org
did you perhaps try to initialize the array at compile time?

1638574723
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
I'm new to zig so I can't rule out having unintentionally done that, but I don't think I have. The only use of that array is a `memory[0] = 1;` in my main function

1638574766
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
one other thing I tried was using zig translate-c on the C source that compiles successfully, and then trying to compiled the translated zig, but that also fails in the same fashion

1638574793
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
this is all with zig 0.9.0-dev.1815+20e19e75f which I grabbed today

1638574805
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
on linux

1638574849
andrewrk!~andrewrk@mail.ziglang.org
seems like the compiler should be improved to handle this case better

1638574873
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
gotcha, would you like me to write this up as an issue on github?

1638575046
andrewrk!~andrewrk@mail.ziglang.org
yes please, if there is not already one filed for it

1638575158
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
I'll take another peek just to be sure but I couldn't find anything, that's how I ended up here as a final check to make sure I'm not doing something obviously wrong lol

1638575335
mikemar10!~mikemar10@216-177-191-54.block0.gvtc.com
thanks for taking a look andrewrk

1638575535
andrewrk!~andrewrk@mail.ziglang.org
no problem

