1616545298
FireFox317_
andrewrk, #8348 is ready for review. basically the big boi optional test case in the llvm backend works. expect for one line, which i think has something to do with `.alloc_inferred_mut`

1616545323
andrewrk
thanks! taking a look shortly

1616547199
ifreund
you know what would be nice, a single std.mem function that did mem.bytesAsSlice(u32, mem.sliceAsBytes(args.param_types))

1616547229
ifreund
and with that I'm going to sleep, will rebase and hopefully finish up my refactor in the morning

1616547335
andrewrk
good night! looking forward to that sweet, sweet type safety

1616547355
dimenus
so what was the decision? non-exhaustive enum?

1616547373
andrewrk
yeah sounds like ifreund came up with something reasonable with a non-exhaustive enum

1616547472
dimenus
andrewrk: a couple years ago I remember thinking, man Zig really needed the arbitrary AST modification of JAI - but I was wrong

1616547504
dimenus
Zig has ended up in the sweet spot with enough functionality and still a simple enough language

1616547623
andrewrk
:)

1616548196
powerofzero
Does anyone know of a conveinient way to recursivly iterate through a directory?

1616548266
g-w1
std.fs.Walker

1616548288
andrewrk
note also std.fs.walkPath

1616548334
andrewrk
looks like there is some usage examples in std/fs/test.zig

1616548402
powerofzero
Thanks! missed that.

1616564212
kbd
Here are the things I'd been working on to learn Zig. Figured I'd share, since I just finished the readme, and say thanks for the help I received here.

1616564212
kbd


1616564666
waleee-cl
kbd: possibly it's just my morning brain, but do you use

1616564866
waleee-cl
ah, there

1616564958
waleee-cl
and later rows in funcs.zig

1616566156
kbd
yeah I set it and just treat is as a global

1616566168
kbd
sorry, stepped away

1616566320
kbd
Also, I don't free memory properly anywhere. Since this is a run-and-exit thing it doesn't matter if I drop memory on the floor. I'd like to fix, but it wasn't important to getting it working.

1616566363
txdv
Just like php!

1616566423
kbd
:)

1616566635
andrewrk
ifreund, g-w1, dimenus, FireFox: I commented out all the failing test cases, so we can run `./zig build test-stage2` now in the zir-memory-layout branch

1616566788
txdv
did you just work 5 hours straight on that?

1616567273
txdv
Wow the 1mil line memory usage drop is impressive

1616567302
txdv
Can you maybe benchmark compilation of the entire zig std?

1616569112
andrewrk
I wish

1616569126
andrewrk
the self-hosted compiler does not support that many language features yet

1616570281
txdv
O stupid me, you are rewriting like everything :D

1616573710
FireFox317_
andrewrk, are you still online?

1616573884
FireFox317_
i think the change of putting .store_to_inferred_ptr in the outer scope is actually not correct

1616574755
FireFox317_
hmm maybe not, still investigating

1616581993
dbohdan
How small can you make a "Hello, world!" x86 Linux ELF file written in Zig?  Has anyone performed an experiment like

1616582103
ikskuh


1616582165
Nypsie


1616582220
dbohdan
ikskuh, Nypsie: Thanks!

1616582405
ikskuh
dbohdan:

1616582502
Nypsie
That's still bigger than from the article I linked :P

1616582541
ifreund
ikskuh: did you use the strip command from binutils as well?

1616582561
ifreund
I got ~3K with an idiomatic hello world just now

1616582587
ikskuh
Nypsie: i only took a minute to do so :D

1616582594
ikskuh
that article probably took longer

1616582626
dbohdan
I got it down to 1424 bytes with `./zig build-obj -O ReleaseSmall --strip hello.zig; ld -n -s -o hello hello.o`

1616582626
ikskuh


1616582647
ikskuh
sstrip â†’ 4096 :D

1616582658
dbohdan
But, wow, 277 bytes is pretty small

1616582688
dbohdan
Though I am not sure that kind of high-level code is easier to write than assembly :-)

1616582706
earnestly
It's not assembly that gets it that low

1616582735
dbohdan
I guess it may pay for itself if you start building on in a program more complex than a "Hello, world!"

1616582743
earnestly
It's taking advantage of kernel level features and assumptions

1616582955
cryptocode


1616586662
noam
ha, I just stumbled on andrewrk's libsoundio while tracking down an issue involving S24_3LE audio in a completely unrelated application. Small world!

1616587197
ifreund
noam: the full saga:

1616588855
forgot-password
Is it possible to get call site information at comptime? I have some custom wrapper to automatically check for OpenGL errors and it would be awesome if it could automatically point to where the error was generated

1616588874
forgot-password
Instead of just saying call "xy" generated an error, which is ambiguous

1616588879
Rudde
Hey

1616588897
forgot-password
Hi

1616588918
Rudde
didn't expect this channel to have so many members

1616589009
ifreund
zig is pretty sweet

1616589019
Rudde
So I've heard

1616589037
ifreund
forgot-password: no, there's not a way to do that aside frome passing @src() as an argument at all callsites

1616589042
Rudde
Got stuck in very-high level languages after uni.

1616589058
Rudde
And trygint to get back to systems programming languages just seem to tidious

1616589258
noam
ifreund: ?

1616589272
noam
ahhh

1616589390
noam
huh, looks neat

1616589482
ifreund
it's also what lead to zig :D

1616589769
noam
whoaaaaa

1616589772
noam
really?!

1616589791
noam
..actually no that makes sense

1616589814
noam
There's a lot of things that I find annoying in C, I can see how Andrew would get fedup and decide "okay new language time."

1616589976
ifreund
noam: this is a good one:

1616590185
noam
andrewrk: Minor comment on that: the void* option for lists isn't actually all that bad

1616590222
noam
The list type extensively used in zyg uses them, and it's one of the few things that hasn't caused a single bug :P

1616590311
ifreund
no, it's really bad. Consider a refactor that changes the type of element stored in the list

1616590331
ifreund
you don't get compile errors at all the places you need to update

1616590335
noam
I would

1616590350
ifreund
explain

1616590376
noam
...hm. Not all, but I just thought of a way to fix that

1616590434
ifreund
if it involves macros, that doesn't count :P

1616590439
noam
void** :P

1616590468
noam
Which wouldn't actually help because then there would just be (wrong) explicit casts everywhere

1616590485
noam
but  nah, a simple tool to grep for instances of a list is trivial

1616590507
ifreund
I'm just going to stick to zig :D

1616590524
noam
literally just `find -name '*.c' -exec grep -e ensure_capacity -e VARIABLE_NAME {} \;`

1616590537
noam
The only function that needs to know the type is ensure_capacity

1616590546
noam
Aside from that, all accesses are explicitly typed

1616590563
noam
ensure_capacity, then `list[0] = (struct foo){};` for instance

1616590572
noam
With some convenience functions here and there

1616590595
noam
e.g. `push_u32(&u32_list, u32)` ensures capacity, pushes, and increases count

1616590609
noam
but ensure_capacity is the

1616590626
noam
and even then, if you change to a bigger type it'll work but waste RAM :P

1616590666
noam
ifreund: I didn't say that Zig didn't improve it

1616590679
noam
I was disagreeing that this is a big deal

1616590693
noam
for more complex types, that might not be true, though

1616590696
ifreund
noam: link to the code? I still think this is a pretty big deal

1616590788
noam
git.sr.ht/~pixelherodev/zyg

1616590793
noam
stb.{h,c}

1616590802
noam
pick any random c file and it

1616590807
noam
's probably using it

1616590830
noam
it's

1616590919
FireFox317
andrewrk, nvm, it was a mistake in my code :) #8348 is ready

1616591155
ifreund
noam: ok, so you need a new push() function for every type in order to have relative type safety with a resonable API, and you don't currently have type safety for any of the non-specialized functions

1616591172
noam
ifreund: no, wrong

1616591178
noam
push is a convenience function.

1616591189
noam
Ahhhh, wait, I see what you're saying

1616591202
noam
No, the issue is fundamentally that ensure_capacity needs to know size

1616591209
noam
Everything else uses typed accesses

1616591225
noam
There's nothing

1616591235
ifreund
and that if you change the type of the variable in which your stb array is stored, your code still compiles

1616591240
ifreund
cause void pointers

1616591258
noam
no, it won't

1616591262
noam
the arrays aren't void*

1616591265
noam
they're e.g. int*

1616591269
noam
or struct scope*

1616591271
noam
(scope.c)

1616591286
noam
changing that to to int*

1616591302
noam
because it's

1616591384
ifreund
you can still pass literally any pointer as the first argument of the first 5 functions in stb.h and not get a compile error

1616591396
ifreund
that's what I'm talking about

1616591417
noam
So?

1616591424
noam
It's basically realloc

1616591436
ifreund
yeah, and that sucks too

1616591447
noam
It's not any different from being able to do int* foo; foo=realloc(foo, sizeof(int)...)`

1616591465
noam
ifreund: no it doesn't... again, the

1616591500
noam
if you change foo to, say, `struct bigint*` there, it

1616591519
noam
unlike in C++, where a constructor might implicitly convert it in ways you don't want

1616591700
ifreund
I really don't see where the compile error comes from in that example, realloc takes and returns a void*

1616591709
noam
realloc won't

1616591713
noam
but EVERYTHING ELSE will

1616591718
noam
`foo[0] = 0;` <- invalid

1616591731
noam
or in my case, `ctx.list[0].subscopes[i]`

1616591739
noam
that's only valid if list is a `scope*`

1616591744
noam
change the type and the code won't compile

1616591747
ifreund
noam: the fact that realloc won't is exactly what I'm talking about

1616591756
noam
But it doesn't

1616591764
noam
because everything immediately next to it will

1616591819
ifreund
the point is that when refactoring, the compiler won't remind you to update that realloc or stb_foo() call if you update the rest of the code

1616591836
noam
Sure, one line

1616591840
noam
`grep ensure_capacity *`

1616591840
ifreund
and don't tell me you'll just remember cause it's obvious

1616591844
noam
Of course not

1616591853
noam
but I could easily e.g. add a git hook

1616591855
ifreund
or that you can expect every contributor to run a grep

1616591900
noam
sure

1616592871
noam
ifreund: I

1616592948
ifreund
that sounds like a good idea, but it's still possible to forget that and have broken code compile without error

1616592980
ifreund
my point is mostly that C's type system is not powerful enough to support this use-case in a satisfying and robust way

1616592990
noam
ifreund: sure /shrug

1616592996
noam
I don't particualrly care

1616593007
noam
I can understand why you would, but it's not something I see as a big deal

1616593018
ifreund
you can certainly put practices into place to ease the pain, but it doesn't 100% fix things

1616593025
noam
If that

1616593034
ifreund
to be fair, your stb thing is one of the nicer abstractions for this I've seen for C

1616593045
noam
"this allocation is sized wrong" - valgrind would be good for that - is pretty easy to track down

1616595967
noam
ifreund: Thanks, I tried :P

1616595979
noam
I've seen horrible ones, so I knew what not to do

1616595981
noam
:P

1616596018
dimenus
ifreund: i don't imagine you need a PR to bring zig-wayland up to master?

1616596053
dimenus
also i really like how these bindings turned out

1616596129
ifreund
dimenus: zig-wayland tracks the lastest release like river. If you want to use it with master please do submit a PR with your changes, would save me some time when 0.8.0 releases

1616596138
ifreund
glad you like them :)

1616596163
dimenus
ifreund: sure, willd o

1616596184
ifreund
note the current caveat regarding forward compat for clients though:

1616596234
ifreund
and if you have more questions I usually direct excessive zig+wayland related chatter to #river :)

1616596260
dimenus
ifreund: understood

1616597284
cryptocode
If I pass a hash function (by mistake) returning u64 instead of u32 to ArrayHashMap, the compiler bugs out with

1616597308
cryptocode
known*

1616597318
noam
"it's a stage1 bug, wait for stage2"

1616597323
cryptocode
hehe

1616597348
cryptocode
I suppose I can wait for that

1616597395
noam
...

1616597402
cryptocode
!!!

1616597404
noam
I wasn't serious, you should probably report that

1616597439
cryptocode
Well, your joke reply is probably a valid reply

1616597439
g-w1
(it probably wont get fixed until stage2 tho unless someone wants to dig around in stage1)

1616597447
cryptocode
right

1616597451
noam
(which is nobody)

1616597457
cryptocode
(looks like it)

1616597457
noam
(nobody loves stage1)

1616597462
g-w1
whenever i fix something in stage1, i break something else

1616597512
cryptocode
Like... as for reporting, how likely is it that these kinds of bugs gets ported to stage2? :)

1616597521
g-w1
very unlikely

1616597532
noam
0%

1616597535
g-w1
the code is

1616597540
noam
There's a chancce of a similar bug popping up

1616597556
cryptocode
g-w1: wen stage2 :D

1616597564
Nypsie
soon (tm)

1616597567
ikskuh
cryptocode: good thing is that stage-2 is not a

1616597568
g-w1
probably in 2-3 release cycles

1616597578
cryptocode
ikskuh: yeah, that was badly phrased haha

1616597591
g-w1
so around a year

1616597597
cryptocode
i see

1616597634
cryptocode
I suspect stage1 reports are just an annoyance

1616597646
ikskuh
it's better to track the bugs still ;)

1616597670
g-w1
i dont lol, half the time, by changing something else i cant repro them anymore

1616597778
cryptocode
damn, zig c++ -target is so friggin useful, use it all the time now so I can keep touching windoze to a minimum

1616597788
noam
hm

1616597808
noam
Honestly, I'm not sure anyone's realistically intending to care about stage1

1616597835
noam
Realistically, it'd probably be easier to update my compiler than to fix stage1 bugs, and that's if I die today and don't continue rushing through it :P

1616597846
noam
writing a zig compiler isn't really that hard

1616597872
noam
...well. for me, who has years of obsessive experience with systems work, emulation, and the intracicies of computers :P

1616597876
cryptocode
you do it for fun or other reasons?

1616597879
noam
yes

1616597891
cryptocode
:D

1616597893
noam
fun, but also so I can work on a bootloader for the Rock64

1616597909
cryptocode
awesome

1616597912
g-w1
the only time people care about stage1 is when it uses too much memory for the ci and you have to fix it

1616597918
noam
^

1616597919
FireFox317
noam, you should be able to write a bootloader for Rock64 with stage1 :P

1616597923
noam
FireFox317: Nope

1616597932
FireFox317
noam, why not?

1616597934
cryptocode
g-w1: i noticed someone onced fixed that with Boehm :D

1616597935
noam
FireFox317: you're forgetting my OS ;)

1616597951
noam
And the system intended to self-host

1616597972
FireFox317
noam, ahh, okay well yeah then stage1 is not gonna work xd

1616597976
g-w1
stage1 doesn't support plan9 linker format

1616597984
noam
and is written in C++

1616597988
noam
and uses LLVM and Clang

1616598003
noam
So you'd have to port literally 5 million lines of (awful) C++

1616598033
noam
or remove stage1's minor C++ feature usage and replace the backend

1616599761
olabaz
Hi, I was writing a wrapper around a c library but then I realized this might be pointless since it is so easy to interface with c. What are your thoughts on this?

1616599773
noam
Wrappers can be useful in zig

1616599786
noam
They're not *necessary*, but they can make the C bits feel like Zig

1616599794
noam
Working directly with imported C can feel kludgy

1616599812
olabaz
I guess you can also add nicer error handling

1616599853
olabaz
I was trying to wrap a numerical algorithm library, but I wasn't sure how adding an error would affect performance?

1616599968
noam
Shouldn't

1616599974
noam
Negligible at worst

1616604873
cryptocode
was there a way to determine if I'm running in test mode, or do I just negate a flag myself in main?

1616604918
ifreund
std.builtin.is_test

1616604968
cryptocode
perfect, thanks

1616606650
g-w1
anyone remember the issue for allowing const C = struct {thing: D,}; const D = struct {thing: C,};

1616606854
ifreund
#131 maybe

1616606869
ifreund
though that's more about pointers than sizes

1616607008
g-w1
ah i see

1616609461
ifreund
making zir.Inst.Ref a non-exhaustive enum is done, now I just need to write a commit message

1616609499
ifreund
also there're some memory leaks to track down it looks like, but I didn't cause them ;D

1616609878
ifreund
and pushed, I hope andrewrk doesn't think I abstracted things too much :D

1616609947
ifreund
andrewrk: I'm offline for the day so dont worry about any further conflicts from me :)

1616609983
olabaz
is there a way to specify that arrays don't alias in Zig?

1616610755
andrewrk
olabaz, no

1616610771
andrewrk
aliasing is still something we're discussing in design specification meetings

1616611057
txdv
when are those meetings? thursdays?

1616611133
FireFox317
andrewrk, PR's have been rebased btw :)

1616611243
andrewrk
txdv, weekly, they're private but we take 1 guest every week

1616611278
olabaz
what's the downside to adding a keyword like "restrict" in C?

1616611353
andrewrk
olabaz, we have that for external C functions:

1616611394
txdv
noalias?

1616612089
andrewrk
FireFox317, I'm taking a look now!

1616613695
noam
Is "i'm writing a compiler" enough to get me in to those? :P I'm guessing not

1616613728
noam
I just wanna be one of the cool kids! :P

1616613803
g-w1
iirc its just if you have an idea and you have been in the community for a month

1616613817
noam
I have ideas.

1616613819
noam
Lots of ideas.

1616613824
noam
:PO

1616616081
txdv
I think it needs to kinda fit into zig also :D

1616616321
noam
They're zig ideas XD

1616618270
andrewrk
noam, would you like to be added to the queue?

1616618332
noam
hmm - sure

1616618334
noam
:)

1616618363
andrewrk
ok you're in 4th place, will get back to you in about a month and coordinate details

1616618371
noam
:)

1616622938
andrewrk
ifreund, really nice work on the distinct type stuff for zir.Inst{Ref,Index} :)

1616622950
andrewrk
I hope you don't mind if I make some further cleanups

1616623165
andrewrk
hmmmm there is a big problem:

1616623175
andrewrk
inefficient compilation speed for directEnumArray with non-exhaustive enums

1616623581
andrewrk
never mind! clarified with SpexGuy that zig guarantees memory layout on enums if you specify the tag type

1616624413
dimenus
ifreund's zig-wayland bindings make the protocol so easy to work with

1616625567
noam
andrewrk: speed problem fixed? :)

1616625596
andrewrk
yeah it had to do with the fact that extern enums can have duplicate tag names

1616625600
andrewrk
but we don't need an extern enum here

1616625910
andrewrk
memory leak fixed. just needed to free the previous function when replacing it with a new one during incremental compilation

1616625912
andrewrk
1 liner

1616625954
andrewrk
it's nice getting memory leak errors immediately in the development cycle. they're so easy to fix when you freshly wrote the code that caused it

1616628466
marler8997
even better when they're caught at comptime?  possible?

1616628496
noam
With a comptime allocator, maybe

1616628531
marler8997
how would a comptime allocator catch memory leaks done by a runtime allocator?

1616628559
noam
Partially comptime functions?

1616628574
noam
Have the context contain comptime information

1616628590
marler8997
"the context"?

1616628595
noam
allocator context

1616628602
noam
For the type, maybe

