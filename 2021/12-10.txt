1639095429
ifreund!~ifreund@user/ifreund
andrewrk: Nice work on getting those more accurate! I'll try and find time to give that PR a review this weekend

1639095492
ifreund!~ifreund@user/ifreund
andrewrk: RE river and 0.9.0, I started a 0.9.0 branch a few months ago and didn't run into any regressions. I'll get that branch rebased tomorrow hopefully so we can hopefully get any issues worked out before the release

1639095549
ifreund!~ifreund@user/ifreund
also need to put the finishing touches on the @prefetch() PR, I spent my free time today on wlroots work though

1639095561
ifreund!~ifreund@user/ifreund
they're also wrapping up a release there currently :D

1639096079
andrewrk!~andrewrk@mail.ziglang.org
I had a peek just now and didn't see any problems with the @prefetch() PR

1639096094
andrewrk!~andrewrk@mail.ziglang.org
nice work

1639096162
ifreund!~ifreund@user/ifreund
thanks, just need to 1. blacklist the arches (x86 at least) that LLVM fails to codegen instruction prefetches for and 2. add docs to the language reference

1639096229
andrewrk!~andrewrk@mail.ziglang.org
sounds good

1639140438
tgschultz!UserNick@047-034-058-084.res.spectrum.com
andrewrk: suspend/resume doesn't have parameter and return. I need to change data between suspend points.

1639152148
tgschultz!UserNick@047-034-058-084.res.spectrum.com
There's something I'm not understanding about suspend and anyframe. `self.frame` is an anyframe, the compiler lets me assign it to `@frame()` in a `suspend` block, but at run time it segfaults when `resume self.frame;`

1639152286
tgschultz!UserNick@047-034-058-084.res.spectrum.com
oh, nevermind, I think I see what's going on

1639152464
tgschultz!UserNick@047-034-058-084.res.spectrum.com
it wasn't obvious to me that anyframe was a pointer

1639155302
tgschultz!UserNick@047-034-058-084.res.spectrum.com
can anyone clarify the meaning of "awaiting function resumed"? As mentioned previously I'm using suspend/resume directly to make a state machine simpler. There is no awaiting, the offending call appears to be 'suspend {}' in a sub function called by the top-level async function. is this not permitted?

1639155735
tgschultz!UserNick@047-034-058-084.res.spectrum.com
rephrasing: what I'm trying to do is suspend an async frame from a function called within that frame. It seems like this should be possible, but I'm unaware of the semantics for it.

1639156329
tgschultz!UserNick@047-034-058-084.res.spectrum.com
ok, I think I understand this now: calling suspend from the inner function suspends that function, but I call resume on the outer func that's awaiting that func, hence 'awaiting function resumed'. I think I can work around this, but if there's a way to specify that I actually want to suspend the whole coroutine frame, not the inner function frame only, please let me know.

1639157825
tgschultz!UserNick@047-034-058-084.res.spectrum.com
so my current solution, for reference, is to keep the coroutine frame in a struct field and instead of resuming it directly I have an anyframe field that points to the currently suspended function within the coroutine. Every suspend block has to test this field to its own frame. Verbose, but seems to work.

1639167406
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
hello, how do I get the file and line of the caller of a function?

1639167471
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
it's okay if it only works in a debug build

1639170341
ifreund!~ifreund@user/ifreund
dwlnetnl: there's currently no way other than passing the result of @src() into the function as an argument

1639170372
dwlnetnl!~dwlnetnl@host-84-13-38-173.opaltelecom.net
okay thanks

1639174516
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
andrewrk, How's the progress on applying for the ARM servers from Equinix Metal via their OSS program?

1639174561
ifreund!~ifreund@user/ifreund
I suspect andrew is pretty busy with the upcoming 0.9.0 release right now

1639174595
Supermath101!~Supermath@pool-98-116-229-81.nycmny.fios.verizon.net
Right...

1639176860
ifreund!~ifreund@user/ifreund
void

1639176882
ifreund!~ifreund@user/ifreund
srrry, IRC keybind fail

1639179896
mischief!~mischief@wopr.sciops.net
hi, very new to zig.. i am having trouble figuring out how to pass a type to a function whose signature is `comptime T: type`. how do i do it? where is the documentation on that?

1639179914
Franciman!~Franciman@mx1.fracta.dev
mischief: it is really easy

1639179921
Franciman!~Franciman@mx1.fracta.dev
types are values

1639179928
Franciman!~Franciman@mx1.fracta.dev
comptime means that the value must be known at compile time

1639179941
Franciman!~Franciman@mx1.fracta.dev
mischief: what function is it?

1639179997
ifreund!~ifreund@user/ifreund
you pass them the same way you pass any other argument, just foo(MyType)

1639180024
ifreund!~ifreund@user/ifreund
or for a real world example, std.mem.copy(u32, dest, src);

1639180028
ifreund!~ifreund@user/ifreund
u32 is a type

1639180047
Franciman!~Franciman@mx1.fracta.dev
another example std.ArrayList(f32);

1639180074
mischief!~mischief@wopr.sciops.net
Franciman: std.atomic.Queue

1639180082
mischief!~mischief@wopr.sciops.net
i want to pass std.net.StreamServer.Connection.

1639180128
mischief!~mischief@wopr.sciops.net
(rather a pointer of them)

1639180168
Franciman!~Franciman@mx1.fracta.dev
can you do it now that ifreund and I provided some examples?

1639180327
mischief!~mischief@wopr.sciops.net
d'oh, i'm an idiot. i think i misread the compiler message.

1639180334
mischief!~mischief@wopr.sciops.net
`var q = std.atomic.Queue(*std.net.StreamServer.Connection).init();` works.

1639180343
Franciman!~Franciman@mx1.fracta.dev
yay

1639180345
Franciman!~Franciman@mx1.fracta.dev
you did it

1639180351
Franciman!~Franciman@mx1.fracta.dev
you passed a type as argument

1639180356
Franciman!~Franciman@mx1.fracta.dev
a pointer type

1639180406
mischief!~mischief@wopr.sciops.net
if i want to pass `q` to another function, can i simply use *std.atomic.Queue, or is a special type created by creating a queue of *std.net.StreamServer.Connection ?

1639180433
ifreund!~ifreund@user/ifreund
the type of q is std.atomic.Queue(*std.net.StreamServer.Connection)

1639180474
Franciman!~Franciman@mx1.fracta.dev
std.atomic.Queue is a function

1639180477
ifreund!~ifreund@user/ifreund
std.atomic.Queue() isn't a type but rather a function, which means you cant use it as an argument type

1639180487
Franciman!~Franciman@mx1.fracta.dev
given an input type, it returns the type of q

1639180540
mischief!~mischief@wopr.sciops.net
aha

1639180546
mischief!~mischief@wopr.sciops.net
std.log.info("q type {}", .{@TypeOf(q)});

1639180551
mischief!~mischief@wopr.sciops.net
info: q type std.atomic.queue.Queue(*std.net.Connection)

1639180728
mischief!~mischief@wopr.sciops.net
is it normal that the documentation doesn't show functions of Queue? https://ziglang.org/documentation/0.8.1/std/#std;atomic.Queue

1639180789
mischief!~mischief@wopr.sciops.net
like maybe put or remove should be there...

