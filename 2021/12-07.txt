1638835688
andrewrk!~andrewrk@mail.ziglang.org
motiejus, I should have a build for you shortly

1638836183
andrewrk!~andrewrk@mail.ziglang.org
here's the PR: https://github.com/ziglang/zig/pull/10290 

1638836209
andrewrk!~andrewrk@mail.ziglang.org
I'll make you an x86_64 tarball to try. please note that I still have more improvements to make locally, but I think this is the heart of the issue

1638836236
andrewrk!~andrewrk@mail.ziglang.org
oops, I meant to say, I still have more improvements that are in-progress on a local branch

1638838479
Arnavion!arnavion@user/arnavion
Reposting my question: @bitSizeOf([1000]u2) is 2000, but @sizeOf() is 1000, indicating [1000]u2 is unpacked by default. The assembly of working with it also shows that it's unpacked. So is @bitSizeOf([N]T) supposed to naively return N * @bitSizeOf(T) instead of the actual number of bits occupied by [N]T ?

1638839754
andrewrk!~andrewrk@mail.ziglang.org
Arnavion, it should return 8 * @sizeOf([N - 1]T) + @bitSizeOf(N)

1638840190
Arnavion!arnavion@user/arnavion
That would be 8001, which is also wrong (should be 8000), but in any case 2000 is neither of those

1638840239
Arnavion!arnavion@user/arnavion
Sorry, 7994, not 8001, but still wrong

1638840280
andrewrk!~andrewrk@mail.ziglang.org
I believe you that it is broken. I need to re-evaluate @bitSizeOf with respect the language specification

1638840314
andrewrk!~andrewrk@mail.ziglang.org
I wouldn't describe it as "stable" yet.

1638840316
Arnavion!arnavion@user/arnavion
Actually, I guess 7994 can make sense... The last u2 can be shifted to the highest bits

1638840351
Arnavion!arnavion@user/arnavion
Right right, I'm not complaining or anything, and I don't have a use case for @bitSizeOf([N]T) either. It's just something I spotted while doing something else

1638840371
andrewrk!~andrewrk@mail.ziglang.org
rest assured the relevant parties are aware of the deficiency

1638842191
andrewrk!~andrewrk@mail.ziglang.org
motiejus, alright I posted a link to a build on #10290

1638843637
freshcoffee!~fresh@user/freshcoffee
andrewrk: if s3cmd is not given reasonably valid secrets, does it error out something like the last 3 lines here:

1638843639
freshcoffee!~fresh@user/freshcoffee
https://ci.ziglang.org/ziglang/zig/662/1/5

1638843672
freshcoffee!~fresh@user/freshcoffee
I'm thinking this is just an error because I'm forcing the script using PR instead of master?

1638843719
andrewrk!~andrewrk@mail.ziglang.org
yes that is happening because the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are not populated in the environment due to it being a PR

1638843731
andrewrk!~andrewrk@mail.ziglang.org
that VERSION is definitely populated, you can see it is used above in the script and that has been working fine

1638843748
andrewrk!~andrewrk@mail.ziglang.org
master is broken. let's push the fix instead of waiting for another round of the CI

1638843753
freshcoffee!~fresh@user/freshcoffee
ok

1638843764
freshcoffee!~fresh@user/freshcoffee
I have to force push . 

1638843782
andrewrk!~andrewrk@mail.ziglang.org
nobody is allowed to force push master, it will be rejected by github

1638843792
freshcoffee!~fresh@user/freshcoffee
no i mean the PR. it's "drafty" right now.

1638843803
andrewrk!~andrewrk@mail.ziglang.org
yes let's push a single commit to master that fixes the problem

1638844666
freshcoffee!~fresh@user/freshcoffee
andrewrk: ok #10289 is ready for master. I hope this one finally does the trick. I will be available to continue should this thing thump me again.

1638862783
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: the version in #10290 has a different structure than "normal" builds (e.g. the nightlies in ziglang.org/download); the toolchain assumes some things about where `zig` binary and libraries are. If iit's a one-click for you, can you rebuild and repackage it? Otherwise I'll try to move things around myself

1638862955
andrewrk!~andrewrk@mail.ziglang.org
motiejus, yes one moment

1638862998
andrewrk!~andrewrk@mail.ziglang.org
thank you freshcoffee!

1638863068
motiejus!~motiejus@2001:470:69fc:105::38fb
(Andrew, whiile you're at it, I would appreciate a darwin-x86_64 build too; then I'll test it on a couple of colleagues' osx dev machines, not just the build fleet)

1638863098
andrewrk!~andrewrk@mail.ziglang.org
ok working on a darwin-x86_64 build, it will take about 40 minutes

1638863118
motiejus!~motiejus@2001:470:69fc:105::38fb
are you using zig-bootstrap?

1638863121
andrewrk!~andrewrk@mail.ziglang.org
yes

1638863127
andrewrk!~andrewrk@mail.ziglang.org
master branch

1638863161
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, then I can build it myself

1638863179
motiejus!~motiejus@2001:470:69fc:105::38fb
if you wish, you may go rest, it's nighttime in the US :)

1638863179
andrewrk!~andrewrk@mail.ziglang.org
it will produce a structure like the one that I provided in the .tar.xz, so you'll have to move the files around a little

1638863232
andrewrk!~andrewrk@mail.ziglang.org
I don't recommend running this script, but if you eyeball it, it tells you what steps are taken to make the official tarballs: https://github.com/ziglang/release-cutter/blob/master/script

1638863272
motiejus!~motiejus@2001:470:69fc:105::38fb
do you not recommend it due to duration, or there is something else?

1638863301
motiejus!~motiejus@2001:470:69fc:105::38fb
because in theory, if I comment out the archs I don't need, I can make myself a full release

1638863316
andrewrk!~andrewrk@mail.ziglang.org
um well it will try to make tarballs for every architecture, and looks like I have some rsync stuff in there because last time I saved time by splitting the work across multiple computers

1638863364
andrewrk!~andrewrk@mail.ziglang.org
yeah I mean if you look at the script and determine that it's ok to run it should be fine, but when I do the release process I typically copy+paste pieces of it at a time and babysit it to make sure nothing goes wrong

1638863471
motiejus!~motiejus@2001:470:69fc:105::38fb
that's ok, thanks for the pointers. The release cutter is helpful; I will modify it to my needs

1638863547
motiejus!~motiejus@2001:470:69fc:105::38fb
I guess TAGVER should be changed to the output of `git describe` to get the correct version

1638863602
andrewrk!~andrewrk@mail.ziglang.org
it should match the VERSION in the `build` script of zig-bootstrap

1638863622
andrewrk!~andrewrk@mail.ziglang.org
which is currently 0.9.0-dev.1914+00c8113c7

1638863707
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, nice. You copied 00c8113c7 to zig-bootstrap, thanks

1638863914
motiejus!~motiejus@2001:470:69fc:105::38fb
ok, another question: script says # This must have zig built for the tagged release, along with having run `./zig build docs`.

1638863923
andrewrk!~andrewrk@mail.ziglang.org
no problem. by the way I am planning to merge #10290 into master now. it is an improvement and I still have more in-progress cache system improvements planned

1638863944
andrewrk!~andrewrk@mail.ziglang.org
do you need the langref.html and std lib docs for your purposes right now?

1638863950
motiejus!~motiejus@2001:470:69fc:105::38fb
nope

1638863956
andrewrk!~andrewrk@mail.ziglang.org
yeah don't bother with that then

1638863967
motiejus!~motiejus@2001:470:69fc:105::38fb
if you are merging it to master, then I don't need to do this dance

1638864015
motiejus!~motiejus@2001:470:69fc:105::38fb
that means it will be in a nightly download tomorrow, and I can run the osx tests then. I can do the linux one today, with the one you built

1638864038
andrewrk!~andrewrk@mail.ziglang.org
done

1638864057
motiejus!~motiejus@2001:470:69fc:105::38fb
\o/

1638864081
andrewrk!~andrewrk@mail.ziglang.org
it's entirely possible you uncover another issue; looking forward to seeing those results

1638864145
andrewrk!~andrewrk@mail.ziglang.org
the change in #10290 affects only builtin.zig; the fact that https://github.com/ziglang/zig/issues/10158 mentions Scrt1.o etc is troublesome

1638864197
andrewrk!~andrewrk@mail.ziglang.org
but anyway I will double check that along with my other cache system improvements

1638864226
motiejus!~motiejus@2001:470:69fc:105::38fb
ack; I wasn't aware of 10158 (Thomas messaged me separately about removing the flock workaround)

1638864484
motiejus!~motiejus@2001:470:69fc:105::38fb
the build fails for a different reason now, unrelated to zig change. It will take some time to debug (I expected to tell you results in 30 minutes, unfortunately, unlikely)

1638864532
andrewrk!~andrewrk@mail.ziglang.org
take your time; I'm going to relax with some video games for a couple hours and will keep my eye on IRC

1638864801
weslem!32012e016f@2604:bf00:561:2000::12f
Hi all - just wanted to say, "thanks for Zig!" I used Zig to prototype a rewrite of my company's spreadsheet-like formula engine. It was so _fun_ to work with compared to the tedium of C, the language complexity of C++, and the crossword-like puzzle of Rust.

1638864891
andrewrk!~andrewrk@mail.ziglang.org
ðŸ¥°

1638865229
motiejus!~motiejus@2001:470:69fc:105::38fb
status update: I haven't upgraded zig for a while (since 0.9.0-dev.1414+cde3dd365), and a most recent master is failing. Will investigate today.

1638865395
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. our internal unit tests are failing with the master version of zig; likely due to changed includes. I need to take a 2h break for meetings and will continue afterwards.

1638865505
andrewrk!~andrewrk@mail.ziglang.org
is this for linux or macos?

1638865526
andrewrk!~andrewrk@mail.ziglang.org
alright sounds like I might miss you due to those meetings, will check out what you post on the issue when I wake up tomorrow :)

1638865555
andrewrk!~andrewrk@mail.ziglang.org
I'm curious what went wrong with the headers - we made some nice improvements for both linux and darwin recently; I would only expect more compatibility, no breakage

1638865931
motiejus!~motiejus@2001:470:69fc:105::38fb
This is the error, fyi https://builds.sr.ht/~motiejus/job/643867

1638865981
motiejus!~motiejus@2001:470:69fc:105::38fb
Happens the same in our repo, but thankfully also in the foss piece

1638866087
andrewrk!~andrewrk@mail.ziglang.org
hmm I'm not sure what that error message means

1638866133
andrewrk!~andrewrk@mail.ziglang.org
is it expecting zig cc to do something that zig cc is not doing?

1638866178
motiejus!~motiejus@2001:470:69fc:105::38fb
Looks like it's including files it wasn't before, and all include dirs need to be allowlisted

1638866211
motiejus!~motiejus@2001:470:69fc:105::38fb
It's likely a trivial fix by adding those, but since you asked :)

1638866215
andrewrk!~andrewrk@mail.ziglang.org
ah yes I can tell you what happened- I fixed https://github.com/ziglang/zig/issues/9837

1638866241
andrewrk!~andrewrk@mail.ziglang.org
 * Consolidate headers that are the same for multiple Zig target CPU architectures. For example, Linux has only an x86 directory for both x86_64 and x86 CPU architectures. Now Zig only ships an x86 directory for Linux headers, and will emit the proper corresponding -isystem flags.

1638866262
motiejus!~motiejus@2001:470:69fc:105::38fb
Yeah, sounds about right

1638870524
Franciman!~Franciman@mx1.fracta.dev
brainstorming for a future zigcon

1638870538
Franciman!~Franciman@mx1.fracta.dev
how about having the first zig con in Leipzig in germany?

1638870553
Franciman!~Franciman@mx1.fracta.dev
LeipZig

1638870555
Franciman!~Franciman@mx1.fracta.dev
and it's done

1638873231
motiejus!~motiejus@2001:470:69fc:105::38fb
zig upgrade status in bazel-zig-cc: x86_64-linux target was fixed, but x86_64-macos target doesn't compile: https://builds.sr.ht/~motiejus/job/643909

1638873471
andrewrk!~andrewrk@mail.ziglang.org
"cannot open `' (No such file or directory)" - I don't think that's coming from zig. is that the error?

1638873497
andrewrk!~andrewrk@mail.ziglang.org
I don't see an error message other than that

1638873497
motiejus!~motiejus@2001:470:69fc:105::38fb
yeah, that means the file was not compiled

1638873508
motiejus!~motiejus@2001:470:69fc:105::38fb
this is the culprit: /tmp/go-build1978306751/b038/_cgo_import.go:2:3: usage: //go:cgo_import_dynamic local [remote ["library"]]

1638873528
andrewrk!~andrewrk@mail.ziglang.org
looks like an error coming from go, yeah?

1638873530
motiejus!~motiejus@2001:470:69fc:105::38fb
there's something off in the guts of cgo

1638873535
motiejus!~motiejus@2001:470:69fc:105::38fb
yes

1638873561
motiejus!~motiejus@2001:470:69fc:105::38fb
I am also looking at https://github.com/ziglang/zig/commit/2dcfa486feecc964a1aab6b843ab85c2be1d7a9b

1638873607
motiejus!~motiejus@2001:470:69fc:105::38fb
it changed quite a few darwin-related paths, and they are OS-version specific (darwin.10, darwin.11, darwin.12); but I don't see it in the zig targets, and we naturally don't include them (yet).

1638873615
motiejus!~motiejus@2001:470:69fc:105::38fb
I need to dig out the real cgo error first though

1638873737
andrewrk!~andrewrk@mail.ziglang.org
what did? cgo?

1638873812
andrewrk!~andrewrk@mail.ziglang.org
because multiple darwin versions is an improvement on zig's end too (x86_64-macos.10-gnu, x86_64-macos.11-gnu, x86_64-macos.12-gnu)

1638873836
motiejus!~motiejus@2001:470:69fc:105::38fb
cgo is the piece of go's compiler that compiles the C files (which invokes the real C compiler)

1638873881
motiejus!~motiejus@2001:470:69fc:105::38fb
my misunderstanding/confusion is: if we are specifying `--target x86_64-macos-gnu`, which directories to include, now that we have 10, 11 and 12?

1638873906
andrewrk!~andrewrk@mail.ziglang.org
oh do you have to duplicate zig's logic in the bazel plugin?

1638873948
motiejus!~motiejus@2001:470:69fc:105::38fb
I wouldn't call duplicate, it's rather more hand-holding

1638873958
motiejus!~motiejus@2001:470:69fc:105::38fb
or I misunderstand your question

1638873958
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/blob/de81c504b187279e6daba30df9673835f7f6c1eb/src/Compilation.zig#L3828-L3857

1638873981
andrewrk!~andrewrk@mail.ziglang.org
try this: `zig build-obj empty.c -target x86_64-macos --verbose-cc` and look at the -isystem flags 

1638873995
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, yes, that one needs to be duplicated, because bazel is guarding what gets included

1638874007
andrewrk!~andrewrk@mail.ziglang.org
you can also try changing -target x86_64-macos to e.g. -target x86_64-macos.10

1638874024
motiejus!~motiejus@2001:470:69fc:105::38fb
example: https://git.sr.ht/~motiejus/bazel-zig-cc/tree/main/item/toolchain/defs.bzl#L107

1638874039
motiejus!~motiejus@2001:470:69fc:105::38fb
do you happen to know if the darwin binaries are backwards-compatible?

1638874057
motiejus!~motiejus@2001:470:69fc:105::38fb
sorry, forwards-compatible

1638874057
andrewrk!~andrewrk@mail.ziglang.org
I believe they are

1638874068
andrewrk!~andrewrk@mail.ziglang.org
if you build for an older version, it should run on newer versions

1638874116
motiejus!~motiejus@2001:470:69fc:105::38fb
you will find all sorts of interesting hacks in that file. :) Before I go and specify the version, I need to understand the cgo problem -- is it really the include. I feel like something is swallowing the error from the go compiler

1638875149
andrewrk!~andrewrk@mail.ziglang.org
good night

1638875335
motiejus!~motiejus@2001:470:69fc:105::38fb
o/

1638876268
motiejus!~motiejus@2001:470:69fc:105::38fb
created https://github.com/ziglang/zig/issues/10293 and pasting details of the investigation. Getting `error: AccessDenied`, which looks very zig-like

1638879080
motiejus!~motiejus@2001:470:69fc:105::38fb
however, the Darwin issue is not blocking large-scale testing of the recently landed code; however, looks like I moved things around incorrectly, and it's unable to find some files (though archives look OK). I need to move to some other things, and will restart with large-scale testing tomorrow, after the nightly is downloadable from ziglang.org; and I will continue with darwin investigation, as detailed in the ticket above.

1638892223
marler8997!~marler899@24-116-126-185.cpe.sparklight.net
OffTopic: I was able to create a pure nix environment to build the reverse engineered Zelda OOT, check out my notes about it here: https://discourse.nixos.org/t/building-zelda-ocarina-of-time-with-nix/16468

1638897660
ifreund!~ifreund@user/ifreund
anyone able to explain this error? https://0x0.st/-Fs0.txt

1638897688
ifreund!~ifreund@user/ifreund
this is the llvm IR I generated: https://0x0.st/-FsG.txt

1638897757
ifreund!~ifreund@user/ifreund
and my stage1 @prefetch() implementation: https://github.com/ifreund/zig/commit/1b5ccd5fa4de08fb4c364f2fc4d6ccc8b268b9a8

1638898159
ifreund!~ifreund@user/ifreund
hmm, I think the way I'm accessing the enum values might be broken

1638903395
motiejus!~motiejus@2001:470:69fc:105::38fb
andrewrk: I was able to run a bunch of tests today, good news: no more dreaded `FileNotFound`, so I consider that one fixed!

1638903479
motiejus!~motiejus@2001:470:69fc:105::38fb
https://git.sr.ht/~motiejus/bazel-zig-cc/commit/85e96bc40f26781fdbd3375cf55c53c44ad83151 ðŸ¥³  

1638903529
ifreund!~ifreund@user/ifreund
welp, it seems that the error I was hitting is just what happens when you try and prefetch on the instruction cache, at least while targeting x86_64

1638913101
andrewrk!~andrewrk@mail.ziglang.org
ifreund, it means the LLVM IR is valid but LLVM is panicking because it did not know how to lower one of the instructions

1638913120
andrewrk!~andrewrk@mail.ziglang.org
motiejus, excellent 

1638913171
ifreund!~ifreund@user/ifreund
andrewrk: cool, that's pretty much what I assumed in the end. I think we might want to get rid of the cache type option for prefetch in that case

1638913187
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig/pull/10295

1638913199
andrewrk!~andrewrk@mail.ziglang.org
hmm maybe. or we could make it a compile error for architectures that don't support it

1638913208
andrewrk!~andrewrk@mail.ziglang.org
it probably exists because it will get correctly lowered on a different arch

1638913223
andrewrk!~andrewrk@mail.ziglang.org
oh not a compile error- it can just be ignored

1638913245
ifreund!~ifreund@user/ifreund
yeah, but llvm should be doing the ignoring no?

1638913265
andrewrk!~andrewrk@mail.ziglang.org
yes I think it would be reasonable to call this a bug in llvm

1638913270
ifreund!~ifreund@user/ifreund
at least the docs for the llvm.prefetch intrinsic says that it will do nothing if not supported

1638913282
ifreund!~ifreund@user/ifreund
so it should do nothing instead of failing to lower

1638913293
andrewrk!~andrewrk@mail.ziglang.org
this would be far from the first time that the zig llvm backend would have to know what llvm supports and carefully not lower to LLVM IR that will result in a problem such as this

1638913336
andrewrk!~andrewrk@mail.ziglang.org
llvm is in the middle of migrating their bugzilla db to github: https://docs.google.com/document/d/11_3rgYuv-QO0g1oO6T0MmkFhacqJg6o24eWFFVNSX_o/edit

1638913350
andrewrk!~andrewrk@mail.ziglang.org
nobody has been able to file bugs since nov 25th

1638913357
ifreund!~ifreund@user/ifreund
:/

1638913371
freshcoffee!~fresh@user/freshcoffee
that's a feature :)

1638913479
freshcoffee!~fresh@user/freshcoffee
https://lists.llvm.org/pipermail/llvm-dev/2014-September/077021.html

1638913483
freshcoffee!~fresh@user/freshcoffee
https://bugs.llvm.org/show_bug.cgi?id=21037

1638913548
andrewrk!~andrewrk@mail.ziglang.org
yep that looks like it

1638913578
ifreund!~ifreund@user/ifreund
reported in 2014...

1638913598
freshcoffee!~fresh@user/freshcoffee
and maybe this one from 2011 https://bugs.llvm.org/show_bug.cgi?id=10994

1638913757
ifreund!~ifreund@user/ifreund
does anyone even have a use case for manual instruction prefetching? CPUs are already quite good at this and I'm not really aware of instruction access patterns where manual prefetching would be beneficial

1638913799
ifreund!~ifreund@user/ifreund
it's not possible with gcc/clang's __builtin_prefetch() 

1638913831
ifreund!~ifreund@user/ifreund
I feel like adding this option to Zig without a use-case just because llvm exposes it in their API doesn't make much sense

1638914385
andrewrk!~andrewrk@mail.ziglang.org
ifreund, one misconception I had about llvm until recently is that it's an independent project with a vision and a sense for where it wants to go (like zig). in reality, it's more of a DMZ for multiple companies to push on the use cases that they have, while sharing code with each other

1638914438
andrewrk!~andrewrk@mail.ziglang.org
to answer your question - one piece of information that I think would give us the answer is whether llvm is able to lower this instruction for *any* target, not just x86

1638914462
andrewrk!~andrewrk@mail.ziglang.org
or another way to answer the question would be: is there any non-llvm backend in stage2 where we would be able to lower the cache prefetch to machine code?

1638914499
andrewrk!~andrewrk@mail.ziglang.org
if not, then I agree we should eliminate it from the builtin

1638914852
ifreund!~ifreund@user/ifreund
andrewrk: I did some grepping through the llvm source and found some test cases for powerpc. I was able to successfully cross compile a binary with @prefetch() for both the data and instruction caches with -target powerpc64-linux-gnu -mcpu a2 

1638914872
ifreund!~ifreund@user/ifreund
so it seems llvm does support it for some targets

1638914960
ifreund!~ifreund@user/ifreund
works for aarch64 as well

1638914963
andrewrk!~andrewrk@mail.ziglang.org
in this case my suggestion would be to keep the proposal as-is, and don't emit the llvm instruction for x86 (and other targets that it fails for)

1638915071
ifreund!~ifreund@user/ifreund
alright, I can do that 

1638920899
freshcoffee!~fresh@user/freshcoffee
andrewrk: did a711fcbbfa41d3f1dedc7ce4be9106e21b6c7ffb fix on_master_success VERSION ? looks to me like it did

1638920929
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, yes, thank you!

