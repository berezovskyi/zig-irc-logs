1611101157
andrewrk
I see, thanks!

1611101539
FireFox317
andrewrk, did you also see this btw? regarding the optional support you added yesterday. No need to rusth, just wanted to let you know that :) goodnight!

1611101654
andrewrk
FireFox317, saw that! is this PR blocking on anything now?

1611101676
andrewrk
err was there something you were wanting me to do other than merge it? :)

1611101789
FireFox317
andrewrk, yes the test does not pass. it doesn't get pass semantic analysis (which is not part of this PR).

1611101822
FireFox317
in other words incorrect ZIR is generated

1611101901
FireFox317
which is what im trying to explain in that comment on the PR (

1611102151
remby
is ZIR stable?

1611103002
andrewrk
no

1611103027
andrewrk
FireFox317, ok I'll take a look at it, after the other thing. good night!

1611116506
rocket_man
well it took me an hour but I got advent of code day 2 working :)

1611116510
rocket_man
the first half at least

1611116739
rocket_man
is there a way to XOR booleans? `./solution.zig:35:37: error: invalid operands to binary expression: 'bool' and 'bool'`

1611116801
rocket_man
oh it's just != lol

1611118286
rocket_man
how do I create an ArrayList from an iterator? just `while(iter.next()) |elem| list.append(elem)`?

1611119789
rocket_man
what does this error mean? `./solution.zig:30:3: error: unable to evaluate constant expression`

1611119797
rocket_man
it's pointing to the `for` in a for loop

1611119805
rocket_man
I'm iterating over a constant array

1611119903
rocket_man
apparently I had to annotate the types more

1611125123
andrewrk
Ristovski, your patch made it through the CI system and is now available on the download page :)

1611168194
seedofonan
I'm trying to build trunk under windows, following zig/wiki/Building-Zig-on-Windows using zig+llvm+lld+clang-x86_64-windows-gnu-0.7.0+8076894d8. To what should " --override-lib-dir" point? If I point it to zig trunk's "lib" subfolder, I immediately get 'std.target.WindowsVersion' has no field named 'win10_20h1'. Any help appreciated :-)

1611168242
Gliptic
I don't remember setting --override-lib-dir

1611168371
seedofonan
So ... do you have a reason to think that someone added that to the web page incorrectly?

1611168390
Gliptic
I built it the other day, let me check

1611168419
Gliptic
ah, I was using option 2

1611168422
ifreund
seedofonan: I believe that tarball has grown out of date with zig's master branch and needs to be updated

1611168440
ifreund
I'm not sure on details though, I don't use windows myself

1611168459
Gliptic
I can confirm that option 2 worked as of a few days ago anyway

1611168514
seedofonan
Okay, gracias:-) Â I'll try Option 2

1611172164
andrewrk
ah my bad for not automating this dev kit thing. I'll update it manually now

1611175308
marijnfs_
how does undefined work, can I see runtime if something is undefined?

1611175362
g-w1
if you are in debug mode it will be 0xaaaaaa, in release it just doesn't set the memory for optimisation

1611175717
marijnfs_
Ok thanks, so basically not runtime

1611175758
marijnfs_
Is there an easy way to zero initialize memory?

1611175780
marijnfs_
ah wait, std.mem.zeroes isn't it

1611175783
g-w1
yes

1611175804
marijnfs_
that's not too bad

1611175816
marijnfs_
i'm getting used to this language

1611175861
ifreund
you shouldn't need to zero-init stuff very often in zig unless you're talking to C APIs that require it

1611175977
marijnfs_
yeah i'm doing some routing with [32]u8 id's

1611175985
marijnfs_
so I should initialise them properly

1611176016
ifreund
for arrays I would just do const foo = [1]u8{0} ** 32;

1611176019
marijnfs_
how does this work both comptime and runtime?

1611176022
ifreund
or probably var

1611176033
marijnfs_
ifreund: how is that better?

1611176033
g-w1
it should work at runtime, but not yet

1611176053
ifreund
marijnfs_: less magic than a function call IMO

1611176072
marijnfs_
I rather have zeroes(MyTypeAndNoCrazySyntax)

1611176090
marijnfs_
shouldn't be a function call, it's comptime right?

1611176109
marijnfs_
var nearest_ID: ID = std.mem.zeroes(ID);

1611176110
ifreund
a comptime function call if you like

1611176112
marijnfs_
that's pretty readable

1611176126
ifreund
It's really just a matter of preference

1611176130
marijnfs_
true

1611176144
marijnfs_
but yours has 6 special characters

1611176158
ifreund
yeah, kinda annoying to type

1611176170
marijnfs_
your fingers go all over the keyboard

1611176181
marijnfs_
but maybe tab9 can complete it

1611176193
ifreund
now that depends on your keyboard :P

1611176235
marijnfs_
I'm doing good ol' qwerty US

1611176264
marijnfs_
maybe you have a fancy keyboard with light linear switches

1611176292
ifreund
the only real advantage is that it is much more flexible than std.mem.zeros

1611176315
ifreund
marijnfs_: how'd you guess? I've got a corne with light, linear, low-profile switches

1611176380
marijnfs_
cause it's the best

1611176391
marijnfs_
I have it at work, here still some kinda clicky

1611176415
marijnfs_
not low profile though, how is that?

1611176442
ifreund
very comfy after some adjustment, less movement seems to be nice for my hands too

1611176543
marijnfs_
I should try

1611176549
marijnfs_
you wrote the compositor?

1611176552
marijnfs_
are you using it?

1611176607
ifreund
yuuup, been daily driving it for months now :)

1611177115
marijnfs_
i gotta try it some time

1611177124
marijnfs_
sadly need ubuntu for work

1611177153
g-w1
it works on ubuntu ...?

1611177212
marijnfs_
then

1611177213
ifreund
might be a pain to build wlroots on ubuntu depending on how out of date everything is

1611177214
marijnfs_
touche

1611177238
ifreund
if you have wlroots 0.12.0 from the system package manager it should be easy though

1611177259
marijnfs_
libwlroots5/focal,now 0.10.0-2 amd64

1611177268
marijnfs_
as i said

1611177270
marijnfs_
ubuntu

1611177285
ifreund
yup, about what I expected :P

1611177323
ifreund
that's not years out of date though, building wlroots from soruce probably wouldn't be too painful

1611177494
marijnfs_
yeah thats no problem i guess

1611177505
marijnfs_
it isn't a c library?

1611177524
marijnfs_
can zig buidl it

1611177630
g-w1
maybe since we just got meson support, but I doubt it

1611177780
marijnfs_
I'm doing some serialization, how does a [32]u8 show up when using typeInfo?

1611177813
marijnfs_
I want to distinquish between an allocated []u8, and a known size [32]u8

1611177828
ifreund
[32]u8 is an array

1611177856
ifreund
[]u8 is a slice and is under .Pointer in TypeInfo

1611178106
marijnfs_
so that shows up as .Array

1611178807
andrewrk
windows dev kit updated. it's slightly more automated now, but still a bit manual

1611179665
tane
howdy

1611179735
tane
is it just me or is reading zig code kinda hard when trying to determine whether something is actually performed during comptime or runtime, e.g. switches or which portions of inline for/while?

1611179781
ifreund
does it matter?

1611179813
tane
sure

1611179862
ifreund
for performance maybe, for semantics it shouldn't if the code compiles

1611179917
tane
in other words: yes it is hard

1611180022
ifreund
I personally don't find it hard no

1611180036
ifreund
though I have a fair bit of experience with zig at this point

1611180059
tane
sure, I guess there are enough people who claim that C++ isn't hard either :)

1611180110
ifreund
well you have the same thing in C/C++, the compiler may partially evaluate some things at compile time

1611180120
ifreund
in zig it's just more powerful

1611180211
tane
indeed, although in C++ with foo<bar> and in D with foo!bar you know what portions are definitely evaluated during comp time

1611180237
tane
but I see your point, partially

1611180243
tane
still not sure whether I like it, I'll see :)

1611180269
ifreund
I believe the not-yet-existent zig spec will say that if the compiler can evaluate something at comptime, it will

1611180307
ifreund
there are also some things such as types as first class values that only work at comptime of course, so they provide a pretty big clue

1611180311
tane
yes, which may require the reader to jump to arbitrary code positions to determine that

1611180345
tane
anyway, it's a decision; the property that the semantics should be the same is certainly a plus

1611180356
ifreund
I really don't think you need to know whether some part of your code is evaluated at comptime or not for most use cases

1611180371
jjido
No you shouldn't

1611180395
ifreund
only possibly when doing optimization work

1611180425
ifreund
in which case your profilier should be guiding you as to what is expensive at runtime

1611181578
pjz
you need to know what's comptime when you're trying to use a library that has a comptime arg, so you know what's possible to pass in there (eg. runtime vals not allowed)

1611181683
ifreund
I agree, you need to have a general understanding of what is possible at comptime to be able to get your zig code to compile

1611185172
marijnfs_
i need to convert a [32]u8 to a *c_void

1611185198
marijnfs_
but I can't just take the address of it since it's passed as an argument

1611185210
marijnfs_
would discard const, can I get around this?

1611185326
ifreund
well, you can tell zig to get out of your way with @ptrToInt()/@intToPtr() if you're sure that the C code won't mutate it

1611185372
ifreund
you could also potentiall pass the array by pointer instead of by valuee

1611185620
marijnfs_
ah, what also works is var tmp = t

1611185624
marijnfs_
and use &tmp instead of &t

1611185653
ifreund
indeed, that's probably the safest option

1611185683
ifreund
though that is semantically a copy that I don't know if llvm will be able to get rid of or not

1611185705
ifreund
I'm probably prematurely optimizing again :/

1611186458
marijnfs_
yeah i wondered that too

1611186462
marijnfs_
hope it gets optimized

