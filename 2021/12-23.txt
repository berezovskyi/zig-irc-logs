1640220351
yrashk!sid1568@id-1568.lymington.irccloud.com
just to double-check, there is no way to simply check a frame if the function has already returned? I am doing some accounting to track that, but wondering if I missed anything?

1640224593
ifreund!~ifreund@user/ifreund
yrashk: nope, not currently

1640224609
yrashk!sid1568@id-1568.lymington.irccloud.com
ifreund: it's alright, I think I figured out my way through all of this :)

1640224618
ifreund!~ifreund@user/ifreund
please note that Zig's async language features are very much at a proof of concept stage

1640224633
ifreund!~ifreund@user/ifreund
they will certainly see more evolution/polish before 1.0

1640224649
ifreund!~ifreund@user/ifreund
the basic ideas certainly seeem solid though :)

1640224684
yrashk!sid1568@id-1568.lymington.irccloud.com
I am aware of the risks (although I am trying to hide from my fear of the uncertainty)

1640224771
ifreund!~ifreund@user/ifreund
it's certainly fun to explore what already exists in Zig here, though I wouldn't personally use it in production yet

1640224820
yrashk!sid1568@id-1568.lymington.irccloud.com
well, the project I am starting in Zig isn't going to be production-ready for a while. it's exploratory in nature.

1640224843
yrashk!sid1568@id-1568.lymington.irccloud.com
(I've been told to avoid using Zig for it for all kinds of reasons, but I am too tempted)

1640224984
yrashk!sid1568@id-1568.lymington.irccloud.com
while at it, here's my first prototype of a Generator (I know it's still pretty ugly) https://paraexec.com/file?name=src/common/generator.zig&ci=tip

1640231193
andrewrk!~andrewrk@mail.ziglang.org
yrashk, a couple important notes: 1. adding generators to the language is still on the table and 2. if you implement generators using async functions, it creates a footgun for people using evented I/O

1640231211
yrashk!sid1568@id-1568.lymington.irccloud.com
andrewrk: what kind of footguns?

1640231251
andrewrk!~andrewrk@mail.ziglang.org
an async function that is using async for I/O would be suspended waiting for I/O and then calling generator.next() or whatever would make it resume for the wrong reason

1640231276
yrashk!sid1568@id-1568.lymington.irccloud.com
I think I've dealt with this in my generator implementation (to the best of my limited ability)

1640231279
andrewrk!~andrewrk@mail.ziglang.org
consider that you might want a generator that does async stuff

1640231290
yrashk!sid1568@id-1568.lymington.irccloud.com
my generators do use evented I/O (like reading a file)

1640231290
andrewrk!~andrewrk@mail.ziglang.org
oh interesting, I'll take a look

1640231324
yrashk!sid1568@id-1568.lymington.irccloud.com
mind you, I likely have a tons of bugs in the implementation, but it worked *so far* I definitely had to work on making it work with async i/o (it didn't initially)

1640231506
yrashk!sid1568@id-1568.lymington.irccloud.com
happy to chat about it if this topic is of interest

1640231881
andrewrk!~andrewrk@mail.ziglang.org
I'll definitely be interested to chat about this at some point, but right now my head is full of other compiler internals details and I don't have much room for async stuff yet

1640231885
andrewrk!~andrewrk@mail.ziglang.org
will get there though

1640231908
jfsantos!~jfsantos@d75-157-112-193.bchsia.telus.net
Anyone doing any kind of real time audio stuff in Zig? I'm having a hard time finding libraries besides the libsoundio (which is a C library) examples in the docs

1640232034
yrashk!sid1568@id-1568.lymington.irccloud.com
andrewrk: sounds good; I am also working on isolating two compiler bug cases: one SIGSEGV and one assertion failure in IR something-something

1640232082
andrewrk!~andrewrk@mail.ziglang.org
if it's a stage1 bug there's a good chance we already have a report filed for it

1640232121
andrewrk!~andrewrk@mail.ziglang.org
I've been focusing on trying to completely replace that codebase rather than improve it

1640232131
yrashk!sid1568@id-1568.lymington.irccloud.com
makes sense

1640232142
andrewrk!~andrewrk@mail.ziglang.org
which, normally, I would say is a poor strategic decision, but hey, we want to self-host the compiler anyway :)

1640238993
dcx!~dcx@user/dac
Is it possible to represent a C va_list in zig?

1640239019
dcx!~dcx@user/dac
I'm trying to translate a C struct

1640239121
dcx!~dcx@user/dac
I'm looking at this specifically https://github.com/openbsd/src/blob/master/lib/libc/gen/auth_subr.c#L113

1640239870
semarie!~semarie@user/semarie
dcx: you might consider it a pointer on opaque structure

1640239897
semarie!~semarie@user/semarie
technically, it is a struct which depend on the architecture target

1640240051
semarie!~semarie@user/semarie
if you want to know the internal details, you could refer to https://github.com/openbsd/src/blob/master/gnu/llvm/clang/include/clang/Basic/TargetInfo.h#L265

1640240176
semarie!~semarie@user/semarie
dcx: but the struct itself is internal to libc. why do you need to access struct content ? from userland perspective it is an opaque struct

1640240282
dcx!~dcx@user/dac
semarie: I'll use an opaque structure then, you can still add struct methods to those right?

1640240291
semarie!~semarie@user/semarie
yes

1640240329
dcx!~dcx@user/dac
Also yes it's part of the libc, but it gets passed to userland programs that are authenticating so I thought I'd try to translate it properly if I could

1640240389
semarie!~semarie@user/semarie
no program using bsd_auth are using internal of the struct. bsd_auth.h provides all functions you need to properly use it

1640240486
dcx!~dcx@user/dac
That's true, it was mostly for my own curiosity 

1640240596
semarie!~semarie@user/semarie
no problem with curiosity :). but if you use it in real program, you should not use the internals. else internal change in libc might break your program expectations, and auth_bsd is used for security (so it might ends badly)

1640240814
dcx!~dcx@user/dac
semarie: Oh I just realized you reviewed my PR for adding BSD auth constants haha

1640240885
dcx!~dcx@user/dac
For something like this, would there be any benefit to writing the BSD Auth function stubs and adding them to std.c.openbsd as opposed to including them with the C header?

1640240901
semarie!~semarie@user/semarie
dcx: I am openbsd core developer too. so I take care of openbsd things :)

1640240969
semarie!~semarie@user/semarie
dcx: bbl. I will reply you a bit later

1640241052
dcx!~dcx@user/dac
semarie: cool!

1640241060
dcx!~dcx@user/dac
semarie: Okay, I'll be here

1640252355
marler8997_!~marler899@96-19-96-19-162-162.cpe.sparklight.net
jfsantos: I've done a little audio stuff here: https://github.com/marler8997/audio  Still porting it from D to Zig

1640255155
semarie!~semarie@user/semarie
dcx: I am unsure that bsd_auth would be interesting inside std (I think there is too few customers for that). but having a proper zig interface is fine, specially if you intent to use it. so it is middle term between std-integration and use-only-c-import

1640256792
tiehuis!~tiehuis@user/tiehuis
has anyone happened to look into lowering of f128 and f16 in the c backend? seems a bit of a pain point due to limited platform support for these as specified by c. this is a small overview of the some of situation for f128 https://cpufun.substack.com/p/portable-support-for-128b-floats

1640257046
tiehuis!~tiehuis@user/tiehuis
i figure you could either provide a software implementation, just keep it as a compile error if the target doesn't support it or fallback to a type with less precision, although I imagine this would require storing the type as a full IEEE-754 f128 representation and using the fallback only during computation, to ensure the bit-representation remained consistent

1640258281
andrewrk!~andrewrk@mail.ziglang.org
hi tiehuis! long time no see :)

1640258295
andrewrk!~andrewrk@mail.ziglang.org
unfortunately I am right about to go to bed

1640258355
tiehuis!~tiehuis@user/tiehuis
yeah its been a while, no problem i'm away for a few days anyway so will just read the logs when im back

1640258497
tiehuis!~tiehuis@user/tiehuis
could also use libquadmath as a dependency, although may not want that dependency in target code

1640263224
bw!sid2730@user/betawaffle
ACTION twiddles thumbs waiting for zig 0.9 to land in nixos

1640264794
terminalpusher!~terminalp@2a01:586:154d:1:a5a1:266f:8ccc:8c57
When I have `"{s: <5}"` as a format string, what is a good way to accept a runtime value as the padding width?

1640264809
terminalpusher!~terminalp@2a01:586:154d:1:a5a1:266f:8ccc:8c57
found the solution

1640264810
luuk!~luuk@user/luuk
terminalpusher: Just answered you on Discord ;)

1640267378
bw!sid2730@user/betawaffle
wow, somehow treesitter and/or zls is hanging my neovim when i try to open a zig file

1640269217
gpanders!~gpanders@user/gpanders
bw: there was a recent bump in the treesitter version that caused issues for the Zig parser (I'm not sure why), see https://github.com/nvim-treesitter/nvim-treesitter/issues/2049

1640269236
bw!sid2730@user/betawaffle
i figured it out, i needed to update my nvim plugins

1640270355
bw!sid2730@user/betawaffle
does `resume` use stack space?

1640271650
Franciman!~Franciman@mx1.fracta.dev
is there any talk/article speaking about why prefer zig over C++

1640271656
Franciman!~Franciman@mx1.fracta.dev
in particular cases?

1640272673
motiejus!~motiejus@2001:470:69fc:105::38fb
Road to zig 1.0 explained it well IMO. It's from 2019, albeit all points still stand

1640272760
Franciman!~Franciman@mx1.fracta.dev
thanks

1640273435
Franciman!~Franciman@mx1.fracta.dev
ready to try this zig 9.0!

1640273437
Franciman!~Franciman@mx1.fracta.dev
0.9 xd

1640273610
Franciman!~Franciman@mx1.fracta.dev
congrats ifreund for your entrance in the zig core team

1640276587
Franciman!~Franciman@mx1.fracta.dev
does anybody wish we switched to full snake_case or full camelCase?

1640276596
Franciman!~Franciman@mx1.fracta.dev
this mix makes me nervous lol

1640276739
luuk!~luuk@user/luuk
Personally I'd like to see a switch to snake_case for functions as I think it improves readability.

1640276771
Franciman!~Franciman@mx1.fracta.dev
+1 luuk 

1640276800
Franciman!~Franciman@mx1.fracta.dev
CamelCase for type names is fine for me

1640276811
yrashk!sid1568@id-1568.lymington.irccloud.com
I agree!

1640278137
bw!sid2730@user/betawaffle
Can anyframe be the type in a @atomic operation?

1640282705
bw!sid2730@user/betawaffle
Is there an existing pattern for making trait-like things in zig?

1640283366
Franciman!~Franciman@mx1.fracta.dev
bw: i think Allocator

1640283482
bw!sid2730@user/betawaffle
Allocator is an example, yeah

1640285574
Franciman!~Franciman@mx1.fracta.dev
I still haven't understood when I can use ptrToStruct.field

1640285581
Franciman!~Franciman@mx1.fracta.dev
and when I have to use ptrToSTruct.*.field

1640285888
ikskuh!~xq@v43666.php-friends.de
"[*c]T" and "**T" requires the second one

1640285901
ikskuh!~xq@v43666.php-friends.de
a simple "*T" can be accessed via .field directly

1640286351
Franciman!~Franciman@mx1.fracta.dev
rip

1640286353
Franciman!~Franciman@mx1.fracta.dev
thanks

1640287209
ikskuh!~xq@v43666.php-friends.de
why rip?

1640287231
Franciman!~Franciman@mx1.fracta.dev
i will never remember it xd

1640287301
ikskuh!~xq@v43666.php-friends.de
just don't use C pointers

1640287303
ikskuh!~xq@v43666.php-friends.de
:D

1640287578
bw!sid2730@user/betawaffle
Does @frameSize take an argument? The docs don’t say it does, but I’m not sure how it’s supposed to be used with no argument.

1640288668
ifreund!~ifreund@user/ifreund
bw: indeed it does

1640288883
ifreund!~ifreund@user/ifreund
docs should say `@frameSize(func: anytype) usize`

1640291442
bw!sid2730@user/betawaffle
Can zig emit an error if a defer is statically known to never run?

1640291483
bw!sid2730@user/betawaffle
Like if you defer something and then call a noreturn function.

1640292356
andrewrk!~andrewrk@mail.ziglang.org
bw, `resume` effectively lowers to a function call

1640292393
bw!sid2730@user/betawaffle
Interesting

1640292442
bw!sid2730@user/betawaffle
But does it still use the stack space provided to the original async call?

1640292557
ikskuh!~xq@v43666.php-friends.de
kinda, but not really

1640292575
ikskuh!~xq@v43666.php-friends.de
variables that are used over suspends are stored in the frame and not on the stack

1640292841
andrewrk!~andrewrk@mail.ziglang.org
there's basically 2 stacks: the real one that has all the locals that are not referenced across suspend points, and the stack of async frames with locals that are referenced across suspend points

1640293008
earnestly!~earnest@user/earnestly
(Reminds me of Gnat's dual stack design)

1640293141
yrashk!sid1568@id-1568.lymington.irccloud.com
I am currently relying on passing pointers to values on the stack (or, in the frame, rather) during suspension. Works so far!

1640293205
yrashk!sid1568@id-1568.lymington.irccloud.com
(using generator functions: https://paraexec.com/file?ci=tip&name=src/wasm/vec.zig&ln=40)

1640296741
Franciman!~Franciman@mx1.fracta.dev
https://libs.suckless.org/libgrapheme/ wooo

