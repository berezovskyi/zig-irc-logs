1617062684
fengb
"A CP/M system has only one directory, which contains fixed-size (32-byte) entries."

1617065936
mikdusan
heh oops

1617080325
spacelove
Found something interesting. Somehow looping over two seemingly identical datastructures produces vastly different speeds:

1617080395
spacelove
The words are sorted by length. In V1 in the above link, I used std.sort to sort the words. In V2, I used a bucketSortString function that I made. These return the same array. But looping over V1 is lightning fast compared to V2.

1617082332
spacelove
Zig is really amazing. Now that I'm more into it... my mind is getting blown every day

1617097249
daurnimator
andrewrk: I thought linux was going to add create+open in one go

1617097279
daurnimator
let me go chase what happended to that

1617097477
daurnimator
:/ of course the only thing I found in my emails was

1617097909
daurnimator
shot off an email

1617099188
noam
Some todos, butttttt

1617099205
noam
andrewrk: working towards the test you linked a few days ago now :)

1617104756
artmb
hi I am working on PR for std lib that changes an algorithm for float parsing. The new alogorithm is

1617104776
artmb
GoLang's stdlib has already switched to it

1617104873
artmb
but I want to do some benchmarks. What is the best way to do it? Is there a default tool for benchmarking zig code (like go test)?

1617105644
DarkUranium
Shame it's AL2, I could've used that, too.

1617105908
daurnimator
artmb:

1617106089
artmb
daurnimator: i could probably work on that

1617106226
artmb
DarkUranium: btw what's so special about AL2?

1617106279
DarkUranium
Incompatible with my license.

1617106807
komu
artmb: Golang also have a few PRs to add Ryu float parsing;

1617106832
komu
Golang tries three different float algo's;

1617107285
artmb
Ryu's algo does the inverse: float => string

1617110135
daurnimator
artmb: the ryu repository has an algorithm for string => float too

1617113833
artmb
thanks. I see from the benchmards I found here

1617114870
noam
Gah. /buffer 24

1617114874
noam
...oops.

1617116758
spacelove
I noticed something kind of interesting. Not sure if it's the expected behavior or not:

1617116838
spacelove
when I do zig build install -Drelease-fast=true I get a binary: zig-cache/bin/main

1617116853
spacelove
if I do zig build-exe main.zig -O ReleaseFast I get another binary

1617116904
spacelove
These binaries should be the same, but the one produced by the build command is significantly smaller (1/2 the size) and runs much slower, and the one produced by the build command is significantly faster but larger

1617116937
noam
zig build probably uses a different CLI

1617116949
noam
e.g. strips the binary or something

1617117094
spacelove
Hm

1617117106
spacelove
I can definitely confirm the speed thing, but actually I may have misspoken about the size thing

1617117112
spacelove
The binaries are actually the same size

1617117137
spacelove
I see

1617117142
spacelove
so if I run zig build run it's slow

1617117147
spacelove
But not if I run the binary directly

1617117156
spacelove
That's interesting

1617117208
ifreund
zig build run with no futher args will be a debug build by default

1617117233
ifreund
try zig build -Drelease-fast run

1617117627
spacelove
Cool, that works. Thanks!

1617120352
spacelove
I made a bucket sort algorithm and a fifo queue:

1617120358
spacelove
I'm learning so much. This is so cool!

1617120370
spacelove
I was really frustrated at first, but now that I kind of get the basics... life is good

1617120815
TheLemonMan
that's the spirit

1617121101
spacelove
datastructures are amazing

1617125327
andrewrk
TheLemonMan, I'm real behind on testing llvm12 branch

1617125471
andrewrk
any objections to merging

1617125486
TheLemonMan
yo, I think I tried building pretty much every weird arch combo and found no significant issue

1617125494
andrewrk
wonderful

1617125548
TheLemonMan
speaking of LLVM, if you have some time can you request 4f024938e4c932feba4d28573ec4522106f8d879 to be backported into LLVM12?

1617125568
TheLemonMan
that'd solve the weird miscompilations of mem.cpy over irregularly-sized types

1617125610
TheLemonMan
I do have another patch to let the vectorizer handle those too but it's still under review :\

1617125625
TheLemonMan
haven't looked at the PM patch yet, will do soon

1617126211
andrewrk
TheLemonMan, yeah how do I do that? open a bug and make it block the release?

1617126243
TheLemonMan
yeah, the reference ticket is

1617126257
TheLemonMan
still a handful of open tickets left

1617126420
andrewrk
done:

1617128961
mikdusan
when do we support arm v9? :P

1617128977
mikdusan


1617129071
andrewrk
serious answer: an arm employee will shortly update the CPU feature details in llvm trunk, and when they cut the release/13.x branch we'll re-run tools/update_cpu_features.zig and then have awareness of it

1617129167
mikdusan
ðŸ‘†

1617129204
ifreund
andrewrk: if you haven't started switch astgen by tomorrow morning I'll give it a go by the way, was busy with other things today

1617129348
ifreund
or wait, it looks like you already did astgen as well as sema, I just didn't read the full commit

1617129375
ifreund
looks like we still need @bitCast astgen

1617130717
andrewrk
ifreund, I'm about to finish up switch today :)

1617131029
ifreund
cool :)

1617133244
andrewrk
mikdusan, we'll want to make sure that zig's language support for SIMD vectors make sense with armv9 SVE2

1617133318
andrewrk
looks like the neat thing here is that you can emit vectorized code and the

1617133415
mikdusan
imagine that and imagine not needing new instructions depending on length

1617139243
g8U4Z1xGzjlm
is there something in std that expands ~ to $HOME? i grepped for expand, but didn't find anything

1617139304
andrewrk
I believe this is called "shell expansion" and no, there is no shell expansion APIs in zig std lib

1617139426
g8U4Z1xGzjlm
thx

1617139596
earnestly
It's called tilde expansion

1617139635
earnestly
And there's a set of rules defining how it expands, as ~user will expand to that user's home rather than $HOMEuser

1617143071
andrewrk


1617143296
g8U4Z1xGzjlm
actually posix wordexp does also tilde expansion

