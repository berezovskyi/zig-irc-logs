1626739244
andrewrk!~andrewrk@mail.ziglang.org
there is no cost for unused functions, but fields affect @sizeOf

1626739280
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
yeah understood, but what link does that have with their privacy (in terms of ability to access them)?

1626739401
andrewrk!~andrewrk@mail.ziglang.org
ultimately what this comes down to is a question of what counts as a "breaking API change" requiring a bump of major version number when a library is updated

1626739430
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
I had thought at first that anonymous structs would have their fields inaccessible outside the scope they are created, but then I realized they are more like tuples with field names.

1626739436
andrewrk!~andrewrk@mail.ziglang.org
idea being that changes to private stuff would not even require bumping the minor version number

1626739481
andrewrk!~andrewrk@mail.ziglang.org
but the concept of what counts as a breaking API change is nebulous. for example, alignment and size of a struct could be depended on

1626739502
andrewrk!~andrewrk@mail.ziglang.org
so it does come down to what the library author documents as being covered by API stability

1626739518
andrewrk!~andrewrk@mail.ziglang.org
and there is a general understanding of what is covered when such things are unstated

1626739518
ifreund!~ifreund@user/ifreund
zig's comptime introspection abilities make it even fuzzier what exactly is breaking and what isn't

1626739547
ifreund!~ifreund@user/ifreund
many changes that could technically break some code won't require changes in 99% of code using them

1626739570
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
ok I think I see that argument - since any change to struct fields could be considered an API break, that motivation for allowing them to be made private doesn't exist?

1626739578
andrewrk!~andrewrk@mail.ziglang.org
regarding struct fields, I decided that the proper default is that they are public, and if a library wants to change that, they will need to communicate that via documentation / naming conventions rather than a language feature

1626739580
ifreund!~ifreund@user/ifreund
I think once the language grows more stable it would be good to write up some general guidelines on this

1626739583
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
That's an interesting point. How do you even determine whether a module's users need to be recompiled?

1626739609
ifreund!~ifreund@user/ifreund
Jeanne-Kamikaze: modules aren't separate compilation units

1626739611
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Sorry if these are basic questions. Not really familiar with real modules outside of C/C++ :)

1626739618
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Oh.

1626739639
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
I think personally I'd be perfectly happy going with a naming convention like leading underscore for private fields

1626739644
andrewrk!~andrewrk@mail.ziglang.org
no-private-fields in the language is a strong hint to zig programmers to make fields part of the API rather than doing the java getter/setter pattern

1626739664
LewisGaul!~LewisGaul@89-168-87-253.dynamic.dsl.as9105.com
that's quite a nice point

1626739796
andrewrk!~andrewrk@mail.ziglang.org
one of my design principles with the zig language is to stifle individuality and creativity and make everyone code the same style

1626739819
andrewrk!~andrewrk@mail.ziglang.org
save your creativity for your actual application that you are making

1626739842
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Yeah I am 300% there even though my opinion does not matter :D

1626739920
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Not sure I understand your previous comment, though. Not all fields are part of a public API, right?

1626740053
andrewrk!~andrewrk@mail.ziglang.org
there are no such thing as private fields

1626740217
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Sorry, I meant that question as a general statement, not Zig-specific. I understand Zig does not make the distinction currently.

1626741174
andrewrk!~andrewrk@mail.ziglang.org
in other languages, private fields emit a compile error if you try to use them from "outside"

1626741188
andrewrk!~andrewrk@mail.ziglang.org
unless you're friends with benefits with the class ;) ;) ;)

1626741381
ifreund!~ifreund@user/ifreund
:D

1626741502
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
you can make private fields accessible via reflection in langs like Java and the fact that this has use-cases is a strong argument for not having them

1626741547
companion_cube!~simon@user/companion-cube
or not having reflection

1626741801
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
yeah. zig’s comptime features support a lot of the same use-cases Java reflection does, like e.g. structural serialisation. so I think the argument does apply here.

1626741991
andrewrk!~andrewrk@mail.ziglang.org
I agree

1626742035
andrewrk!~andrewrk@mail.ziglang.org
I also just think that moving a bunch of fields around without changing the public API of a struct is relatively rare for libraries, and when it happens it's ok to roll the major version. no big deal

1626742250
andrewrk!~andrewrk@mail.ziglang.org
mm interesting the stage2 wasm backend uses br_if opcodes rather than br_table opcodes as desired

1626745865
andrewrk!~andrewrk@mail.ziglang.org
oh wow, ArrayList.appendAssumeCapacity was missing an assert

1626745873
andrewrk!~andrewrk@mail.ziglang.org
*appendSliceAssumeCapacity

1626746285
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
So the potential misuse of fields that should really be private is not a concern for you, that is what I'm understanding?

1626746360
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
I am also curious, since you mentioned @sizeOf; how does this affect compile times and re-compiling when a struct changes? I am familiar with the C/C++ order of things but I haven't spent much time learning how languages like Zig or Rust that have proper modules go about it.

1626746389
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
Is there a tl;dr for this or could you maybe suggest some reading?

1626746487
Jeanne-Kamikaze!~Jeanne-Ka@69.4.234.87
You mentioned a module doesn't make for a separate compilation unit so I'm curious how this works internally and whether you expect compile times to be better than the canonical C++ where almost everything lives in header files.

1626748262
andrewrk!~andrewrk@mail.ziglang.org
the only merge blocker for #9353 is now fixing regressions caught by the test suite

1626794693
Nulo!~Nulo@user/nulo
Is there a way to optimize this function better? https://textbin.net/fpyifslods According to perf, x += 1 and offset + x are the worst offenders

1626795091
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
well directly increasing offset instead of increasing x would be an obvious optimization (which usually would be done by an optimizing compiler)

1626795119
Nulo!~Nulo@user/nulo
Not obvious, I didn't notice it :)

1626795159
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
obvious in the sense of „this is a classic case of an optimization implemented in compilers“

1626795176
Nulo!~Nulo@user/nulo
It doesn't seem it is doing it

1626795194
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
btw you might want to use a pasting service that is able to display more than 10 LOC at once

1626795232
Nulo!~Nulo@user/nulo
Sorry, I couldn't think of any good pasting service and I know some people don't like Pastebin

1626795272
ifreund!~ifreund@user/ifreund
0x0.st is good

1626795283
ifreund!~ifreund@user/ifreund
but godbolt is really want you want for this kind of thing

1626795304
ifreund!~ifreund@user/ifreund
the only thing that's going to make that significantly faster is using vectorized instructions

1626795308
Nulo!~Nulo@user/nulo
I tried "porting" it to godbolt but I had to turn things into C types and stuff 

1626795343
ifreund!~ifreund@user/ifreund
you can accept pointers to zig types in an extern function

1626795416
ifreund!~ifreund@user/ifreund
anyhow, here's an example of a manually optimized x86_64 SSE2 implementation in C: https://github.com/freedesktop/pixman/blob/4251202d9dbb7503976fa6c651747b8e99ea0988/pixman/pixman-sse2.c#L3321 

1626795427
ifreund!~ifreund@user/ifreund
llvm may vectorize this for you

1626795439
ifreund!~ifreund@user/ifreund
if it doesn't, you can also try zig's std.meta.Vector() type

1626795550
Nulo!~Nulo@user/nulo
That's one confusing function :') I'll try to make sense of it, thanks

1626795596
ifreund!~ifreund@user/ifreund
you probably don't want to write anything like that, but you do want to try and write someting that compiles to similar assembly

1626795618
ifreund!~ifreund@user/ifreund
using only a single while loop would be a good first step, though llvm may already do that for you

1626795632
ifreund!~ifreund@user/ifreund
the first thing I would do is get your function in godbolt and see what llvm is doing

1626795748
Nulo!~Nulo@user/nulo
Perf shows the assembly along with the code, that's why I said that those two things were being the worst offenders (it's inc and add instructions have a high percent)

1626797558
Nulo!~Nulo@user/nulo
Okay, I got it to vectorize automatically :)

1626797697
Nulo!~Nulo@user/nulo
https://0x0.st/-Vpt.txt

1626797760
ifreund!~ifreund@user/ifreund
nice :)

1626797803
ifreund!~ifreund@user/ifreund
it's also more concise, you can make line const though

1626797828
ifreund!~ifreund@user/ifreund
(the pointer isn't modified, only the memory being pointed to)

1626797871
Nulo!~Nulo@user/nulo
Yes, I already did after pasting. I don't remember why I set it as var

1626797878
Nulo!~Nulo@user/nulo
And yes, it's more concise!

1626797887
Nulo!~Nulo@user/nulo
It's also a lot more clear what's happening on memory

1626798400
Nulo!~Nulo@user/nulo
There was a bug (the - 1), it's fixed now, I'll publish this later hopefully (it's not very useful but it's fun)

1626799136
luuk!~luuk@user/luuk
andrewrk: Yes, you can have multiple labels match to the same block. I've been using the specs found at https://webassembly.org/specs/ so far. The reason I've been using br_if opcodes rather than br_table is due to a misunderstanding on my part of the spec, where I thought it was generating a block/branch for each value which then points to a block. However, recently I found out it uses the stack

1626799137
luuk!~luuk@user/luuk
value to index into a vector of labels of which each label points to a block it jumps to. I've been meaning to update this, but figured it would make more sense to wait for AIR rework. 

1626799164
luuk!~luuk@user/luuk
Which means I'll be updating that now (which is a coincidence since you reworked switch in SEMA).

1626799239
luuk!~luuk@user/luuk
Sorry for the 'inefficient' implementation. The spec can be a little difficult to understand sometimes for me.

1626803389
andrewrk!~andrewrk@mail.ziglang.org
luuk, no worries at all!

1626803395
andrewrk!~andrewrk@mail.ziglang.org
I'm just learning about this stuff too

1626803446
ifreund!~ifreund@user/ifreund
yeah the wasm spec is solid but not very accessible

1626803489
ifreund!~ifreund@user/ifreund
especially the validation and execution sections

1626803582
ifreund!~ifreund@user/ifreund
luckily those can mostly be ignored with some common sense about what the instruction names and their arguments mean

1626803650
andrewrk!~andrewrk@mail.ziglang.org
yeah if you think about it, the interpreter/jit implementers are also reading the same spec and doing their own reasoning and common sense, and that's what you want to match :)

1626803738
luuk!~luuk@user/luuk
Hihi glad I'm not the only one. I often verify/discuss it with fengb and we joke that the initial design docs https://github.com/WebAssembly/design/blob/main/BinaryEncoding.md are much more understandable. Unfortunately, they're not entirely accurate any more.

1626805070
marler8997!~marler899@204.229.3.4
looking at https://github.com/ziglang/zig-spec/issues/38

1626805088
marler8997!~marler899@204.229.3.4
not sure I understand this sentence "zig fmt may not mangle multi line string literals, and therefore the control character TAB are rejected by the grammar inside multi-line string literals."

1626809844
olabian!~olabian@ool-4576796d.dyn.optonline.net
hi, will function call a defer if it returns an error or only errdefer?

1626809901
luuk!~luuk@user/luuk
olabian, both defer and errdefer are executed when an error is returned.

1626809917
olabian!~olabian@ool-4576796d.dyn.optonline.net
so what is purpose of errdefer?

1626809937
olabian!~olabian@ool-4576796d.dyn.optonline.net
i guess it only does it when there is error

1626809940
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok nvm dumb question

1626809941
luuk!~luuk@user/luuk
Exactly

1626809952
luuk!~luuk@user/luuk
(Not a dumb question)

1626809954
Nulo!~Nulo@user/nulo
No Stupid Questions

1626809981
olabian!~olabian@ool-4576796d.dyn.optonline.net
thanks!

1626810270
luuk!~luuk@user/luuk
No problem :)

1626811756
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
Hi all :)

1626811809
luuk!~luuk@user/luuk
Hi

1626812263
painhardcore!~painhardc@ppp92-100-74-214.pppoe.avangarddsl.ru
What are the best place to get latest news about Zig developement? 

1626812419
Nulo!~Nulo@user/nulo
The mailing list is great

1626812433
Nulo!~Nulo@user/nulo
https://github.com/ziglang/zig/wiki/Community#email-list

1626812434
luuk!~luuk@user/luuk
There's a weekly self-hosted compiler meeting every Thursday in the Zig Discord server. There's also a mailing list that announced each release. Apart from those there's ofcourse the GH issues.

1626812481
luuk!~luuk@user/luuk
s/announced/announces

1626812863
olabian!~olabian@ool-4576796d.dyn.optonline.net
Hi, I'm having a problem with a while loop. I think what's going on is I have a node and I look at node = node->next, and I ask it to keep going while (node != null). However, I'm running into a segfault which makes me think it's doing something with the null ptr?

1626812923
olabian!~olabian@ool-4576796d.dyn.optonline.net
I'm interfacing with a c library so it could be something I'm missing...

1626818365
olabian!~olabian@ool-4576796d.dyn.optonline.net
any ideas?

1626819314
Nulo!~Nulo@user/nulo
olabian, can you send a proper code snippet? It might give us a better idea of what's going on

1626821075
olabian!~olabian@ool-4576796d.dyn.optonline.net
Nulo: where do I paste?

1626821089
Nulo!~Nulo@user/nulo
0x0.st works :) 

1626821203
olabian!~olabian@ool-4576796d.dyn.optonline.net
here is the paste that errors on the while loop: https://0x0.st/-VW3.zig

1626823388
ifreund!~ifreund@user/ifreund
olabian: what is c.xmlNodePtr? is it a typedef for a [*c] pointer?

1626823414
ifreund!~ifreund@user/ifreund
if so then you essentially have two layers of optionals as [*c] pointers may be null

1626823443
ifreund!~ifreund@user/ifreund
and you're not checking if the pointer you get from the c lib is null but rather whether the outer optional is null

1626823574
olabian!~olabian@ool-4576796d.dyn.optonline.net
it's a pointer to a struct

1626823611
olabian!~olabian@ool-4576796d.dyn.optonline.net
so I would have to do something like cur.?.*.?.*?

1626823625
olabian!~olabian@ool-4576796d.dyn.optonline.net
the last ? is punctuation

1626823670
olabian!~olabian@ool-4576796d.dyn.optonline.net
I'm basically repeating the example on page 10 of: http://xmlsoft.org/tutorial/xmltutorial.pdf

1626823701
ifreund!~ifreund@user/ifreund
olabian: you would just use c.xmlNodePtr not ?c.xmlNodePtr

1626823711
ifreund!~ifreund@user/ifreund
and just use .* to dereference, no .?

1626823726
olabian!~olabian@ool-4576796d.dyn.optonline.net
can't it be null?

1626823728
ifreund!~ifreund@user/ifreund
yes

1626823747
ifreund!~ifreund@user/ifreund
[*c] pointers are weird

1626823760
olabian!~olabian@ool-4576796d.dyn.optonline.net
I thought I could coerce that null into the optional

1626823775
ifreund!~ifreund@user/ifreund
they work just like pointers in C where you don't need to check if they're null before dereferencing

1626823818
ifreund!~ifreund@user/ifreund
olabian: if you use a proper zig pointer type yes, but I'm betting c.xmlNodePtr is a [*c] pointer type

1626823829
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok getting rid of the ?c.xmlNodePtr to just c.xmlNodePtr worked beautifully.

1626823847
ifreund!~ifreund@user/ifreund
if you instead did const foo: ?*StructType = my_c_ptr; that would work how you suspect

1626823952
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok, I don't really understand

1626823965
olabian!~olabian@ool-4576796d.dyn.optonline.net
so any pointer in the c language is a [*c] pointer type?

1626824135
ifreund!~ifreund@user/ifreund
olabian: if you use the autogenerated C bindings provided by zig translate-c/@cImport() then all non-opaque pointer types will be translated as [*c]

1626824154
ifreund!~ifreund@user/ifreund
if you write bindings manually, you never need to (and in fact never should) use [*c]

1626824204
olabian!~olabian@ool-4576796d.dyn.optonline.net
how would I write bindings manually without cImport?

1626824224
ifreund!~ifreund@user/ifreund
just write the proper extern definitions

1626824233
ifreund!~ifreund@user/ifreund
for example, see: https://github.com/swaywm/zig-wlroots

1626824263
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok, which is better to do?

1626824269
olabian!~olabian@ool-4576796d.dyn.optonline.net
or why would you choose one way over the other

1626824307
ifreund!~ifreund@user/ifreund
writing binding manually potentially gives you much better type safety and ergonomics

1626824312
ifreund!~ifreund@user/ifreund
but it's a lot more work

1626824384
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok, so I'll just stick with @cImport, since I have that kind of working already

1626824392
olabian!~olabian@ool-4576796d.dyn.optonline.net
in that case [*c] is what I always get

1626824431
ifreund!~ifreund@user/ifreund
right, though you can coerce it to whatever zig pointer type you want

1626824451
ifreund!~ifreund@user/ifreund
?[*c]Foo is not what you want to coerce it to though

1626824711
olabian!~olabian@ool-4576796d.dyn.optonline.net
ok, I also have a curl header I"m working with and that one when I call c.curl_easy_init() it returns a ?*void

1626824721
olabian!~olabian@ool-4576796d.dyn.optonline.net
not at [*c]

1626825291
ifreund!~ifreund@user/ifreund
I think you mean ?*c_void

1626825320
ifreund!~ifreund@user/ifreund
which is a pointer to an opaque type which I mentioned as an exception above

1626825350
ifreund!~ifreund@user/ifreund
since the type and therefore the size of the type is unknown, the pointer must be a pointer to a single item as nothing else would make sense

