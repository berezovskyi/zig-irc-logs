1640141822
yrashk!sid1568@id-1568.lymington.irccloud.com
are we far away from being able to get around " error: function prototype may not have inferred error set"? I am trying to declare a type like ` const RetFn = fn (*S) !Ret;`

1640141868
yrashk!sid1568@id-1568.lymington.irccloud.com
trying to fix an issue on my live coding session (https://twitter.com/yrashk/status/1473443875553705986)

1640142091
andrewrk!~andrewrk@mail.ziglang.org
you'll always need an explicit error set on function prototypes. only function definitions can have inferred error sets

1640142121
andrewrk!~andrewrk@mail.ziglang.org
you could consider using `anyerror` if it simplifies things

1640142215
yrashk!sid1568@id-1568.lymington.irccloud.com
@andrewrk yes, it does! thank you! livestream unstuck :)

1640169803
motiejus!~motiejus@2001:470:69fc:105::38fb
if I am bisecting a bug in zig compiler on a C++ codebase (protoc), do I have to fully rebuild the codebase (protoc) on every bisect of zig?

1640169824
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. is it OK if some of the files are used by the previous compiler version?

1640169858
motiejus!~motiejus@2001:470:69fc:105::38fb
(in case it's unclear, I am referring to `zig cc` and `zig c++`)

1640170365
Franciman!~Franciman@mx1.fracta.dev
motiejus: what if the bug is in zig cc/c++ ?

1640170372
Franciman!~Franciman@mx1.fracta.dev
is it possible?

1640170409
motiejus!~motiejus@2001:470:69fc:105::38fb
not sure if I understand the question; looks like 0.9.0-dev.1968+ff93486d0 is fine, but 0.9.0 is not, so I am bisecting

1640170934
motiejus!~motiejus@2001:470:69fc:105::38fb
the question is whether I should wipe the build cache of protoc; obviously the bisect step takes much longer than bisection step

1640171561
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. the bisect step takes much longer with a cold cache than with a warm one. I am doing full rebuilds of both zig and protoc just in case

1640173267
Arnavion!arnavion@user/arnavion
Is there any way to known when a type's fields should be used vs not? Eg ArrayList users are expected to use .items to access it as a slice, BoundedArray users are expected to use .len to get its length, but PriorityQueue users should not access .items because it's not sorted like they might expect it to be

1640173268
motiejus!~motiejus@2001:470:69fc:105::38fb
here we go: https://github.com/ziglang/zig/issues/10386

1640173381
Franciman!~Franciman@mx1.fracta.dev
motiejus: so it was in zig cc lol

1640173383
Franciman!~Franciman@mx1.fracta.dev
nice catch

1640173393
Franciman!~Franciman@mx1.fracta.dev
Arnavion: not currently, afaik

1640173462
Franciman!~Franciman@mx1.fracta.dev
because there is not technology to hide fields

1640173469
Franciman!~Franciman@mx1.fracta.dev
so docs would be the only reference

1640173745
Arnavion!arnavion@user/arnavion
Speaking of PriorityQueue, I'm not sure why its iterator() exists. The iterator yields the elements in the internal tree order rather than sorted order of calling remove(), because it's just a sequential iterator over the underlying slice. Blame says it's been like that since it was first checked in so I assume that is intentional

1640173800
Arnavion!arnavion@user/arnavion
If it really was the intent, it seems to me it would be better off as an iterator for slices in general in std.mem (which is something I've wanted independently anyway) rather than inside PQ/PDQ. And if it was intended to be sorted, then it's definitely not doing that right now

1640173846
Arnavion!arnavion@user/arnavion
Well, I guess I'll open an issue

1640175376
bw!sid2730@user/betawaffle
How does zig achieve the “compile error if the function can’t be inlined” behavior, since it seems like llvm says it’s just best-effort? Also, what’s an example of something that can’t be inlined (and thus would emit an error)?

1640186622
companion_cube!~simon@user/companion-cube
Franciman: why do fields not have a `pub` modifier?

1640191491
ifreund!~ifreund@user/ifreund
bw: the stage1 compiler doesn't implement that properly current because, as you say, llvm doesn't give a strong enough guarentee

1640191508
ifreund!~ifreund@user/ifreund
the stage2 zig compiler implements inlining itself however before passing IR to llvm

1640191576
ifreund!~ifreund@user/ifreund
one trivial example would be conflicting noinline/inline annotations

1640194821
Franciman!~Franciman@mx1.fracta.dev
companion_cube: i think there is an open issue about it

1640194866
ifreund!~ifreund@user/ifreund
companion_cube, Franciman: they used to but it didn't ever do anything and was removed

1640194893
companion_cube!~simon@user/companion-cube
wdym it didn't do anything?

1640194901
Franciman!~Franciman@mx1.fracta.dev
^

1640194903
ifreund!~ifreund@user/ifreund
Arnavion: what would a "slice iterator" give you over a for loop?

1640194917
ifreund!~ifreund@user/ifreund
companion_cube: It had 0 effect on the semantics of the language, the compiler ignored it

1640194932
companion_cube!~simon@user/companion-cube
heh

1640194963
ifreund!~ifreund@user/ifreund
Arnavion: anyhow, the way to know whether a struct's fields should be directly accessed or not is to read that struct's documentation

1640194992
companion_cube!~simon@user/companion-cube
still convinced  that's _bad_

1640195005
companion_cube!~simon@user/companion-cube
throwing away a lot of safety introduced in other parts of the language

1640195011
ifreund!~ifreund@user/ifreund
that's not safety

1640195014
ifreund!~ifreund@user/ifreund
https://www.scattered-thoughts.net/writing/coding/

1640195014
Franciman!~Franciman@mx1.fracta.dev
ifreund: writing it in source code is a way of making sure you present a coherent interface that is enforced by the compiler

1640195055
ifreund!~ifreund@user/ifreund
I used to think the way you are thinking right now, but my thoughts on this have evolved over time through writing more and more C/Zig 

1640195100
companion_cube!~simon@user/companion-cube
if you have 0 abstraction it's a problem, imho

1640195140
Franciman!~Franciman@mx1.fracta.dev
i mean you can argue that yes, in order to learn and use an interface you have to read the documentation

1640195143
ifreund!~ifreund@user/ifreund
most recent rejected "private fields" proposal: https://github.com/ziglang/zig/issues/9909#issuecomment-942686366

1640195165
companion_cube!~simon@user/companion-cube
if you have 0 encapsulation, there is no interface

1640195167
companion_cube!~simon@user/companion-cube
only implementations :p

1640195170
Franciman!~Franciman@mx1.fracta.dev
but what about doing refactoring and changing things?

1640195183
Franciman!~Franciman@mx1.fracta.dev
in your experience, ifreund, is it irrelevant?

1640195216
Franciman!~Franciman@mx1.fracta.dev
sorry if this seems polemic, I just can't write in english xd. I want to ask opinions

1640195222
Franciman!~Franciman@mx1.fracta.dev
not arguing

1640195227
ifreund!~ifreund@user/ifreund
companion_cube: encapsulation doesn't need to be enforced by the compiler, just write code that makes sense

1640195238
companion_cube!~simon@user/companion-cube
that's assuming programmers are infallible

1640195242
companion_cube!~simon@user/companion-cube
why even warn on unused return values

1640195245
companion_cube!~simon@user/companion-cube
just do the right thing

1640195252
companion_cube!~simon@user/companion-cube
why have defer? just do the right thing

1640195253
Franciman!~Franciman@mx1.fracta.dev
yeah i kind of like the compiler to help me, too

1640195265
companion_cube!~simon@user/companion-cube
why have `?`? just do the right thing

1640195282
earnestly!~earnest@user/earnestly
This is ADa

1640195293
ikskuh!~xq@v43666.php-friends.de
companion_cube: "#define private public" is used for reasons

1640195319
companion_cube!~simon@user/companion-cube
why even have the GPA try to find leaks? just do the right thing

1640195323
ikskuh!~xq@v43666.php-friends.de
hiding implementation is often doing more damage than it prevents to

1640195332
companion_cube!~simon@user/companion-cube
citation needed

1640195339
companion_cube!~simon@user/companion-cube
I disagree with that 100%

1640195340
ikskuh!~xq@v43666.php-friends.de
"my work life with C++Builder"

1640195353
ikskuh!~xq@v43666.php-friends.de
it has a Type

1640195354
Franciman!~Franciman@mx1.fracta.dev
i can see where it comes from

1640195358
ikskuh!~xq@v43666.php-friends.de
DynamicArray<T>

1640195360
Franciman!~Franciman@mx1.fracta.dev
when you screw your interfaces

1640195362
ifreund!~ifreund@user/ifreund
I highly suggest reading the post I linked: https://www.scattered-thoughts.net/writing/coding/

1640195367
Franciman!~Franciman@mx1.fracta.dev
you don't want them lol

1640195369
Franciman!~Franciman@mx1.fracta.dev
it happens to me a lot

1640195385
ikskuh!~xq@v43666.php-friends.de
DynamicArray<T> doesn't allow me to access the contents as a C array

1640195390
ikskuh!~xq@v43666.php-friends.de
i have to go index-by-index

1640195395
ikskuh!~xq@v43666.php-friends.de
i cannot get a pointer to the first element

1640195401
ikskuh!~xq@v43666.php-friends.de
now what do you do?

1640195407
Franciman!~Franciman@mx1.fracta.dev
this is just a bad interface

1640195410
Franciman!~Franciman@mx1.fracta.dev
hat's it

1640195411
Franciman!~Franciman@mx1.fracta.dev
that's it

1640195412
ikskuh!~xq@v43666.php-friends.de
yes, exactly

1640195417
ikskuh!~xq@v43666.php-friends.de
#define private public

1640195425
ikskuh!~xq@v43666.php-friends.de
foo(array.elements, array.Length);

1640195425
ikskuh!~xq@v43666.php-friends.de
done

1640195427
ikskuh!~xq@v43666.php-friends.de
works

1640195434
companion_cube!~simon@user/companion-cube
ikskuh: now do a hashmap

1640195440
Franciman!~Franciman@mx1.fracta.dev
so like petite prince, just because one bee bite you, it doesn't mean you don't have to go out 

1640195440
companion_cube!~simon@user/companion-cube
how do you iterate on a hashmap

1640195441
ikskuh!~xq@v43666.php-friends.de
i can suddenly use the thing as an array

1640195442
ikskuh!~xq@v43666.php-friends.de
because it is one

1640195450
companion_cube!~simon@user/companion-cube
what if it's made of several arrays

1640195457
companion_cube!~simon@user/companion-cube
what if it turns out to be faster (which it does)

1640195471
companion_cube!~simon@user/companion-cube
if you have no encapsulation you can't evolve your implementations ever

1640195490
ifreund!~ifreund@user/ifreund
now that's just blatently false

1640195499
Franciman!~Franciman@mx1.fracta.dev
unfortunately i very much like the SICP ideas of wishful thinking, sorry T.T

1640195504
Franciman!~Franciman@mx1.fracta.dev
but I promise I read your link ifreund 

1640195523
companion_cube!~simon@user/companion-cube
ifreund: well you can if you break user code, of course.

1640195541
Franciman!~Franciman@mx1.fracta.dev
companion_cube: it's false, indeed, as it's false that you can't get complex systems in assembly

1640195542
ifreund!~ifreund@user/ifreund
companion_cube: it all depends on how you define what is public and what isn't 

1640195546
ikskuh!~xq@v43666.php-friends.de
yep

1640195569
ifreund!~ifreund@user/ifreund
if I leave a doc comment on my struct's field saying // private API I don't consider changing that a breaking change

1640195572
companion_cube!~simon@user/companion-cube
ifreund: if the compiler lets me access something (let's say, without comptime reflection) then it's public

1640195591
ifreund!~ifreund@user/ifreund
companion_cube: read the comment from andrew I linked

1640195592
companion_cube!~simon@user/companion-cube
just like, if the compiler lets me assign `null` to something then it's nullable

1640195598
ifreund!~ifreund@user/ifreund
it explicates why that statement is false

1640195617
Franciman!~Franciman@mx1.fracta.dev
sorry ifreund what comment?

1640195621
Franciman!~Franciman@mx1.fracta.dev
https://www.scattered-thoughts.net/writing/coding/ <- this?

1640195633
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig/issues/9909#issuecomment-942686366

1640195637
Franciman!~Franciman@mx1.fracta.dev
ah ty

1640195654
companion_cube!~simon@user/companion-cube
I don't like the mutex example

1640195675
companion_cube!~simon@user/companion-cube
but then I think it should be `fn with_mutex(…)` with the macro proposal, so…

1640195685
Franciman!~Franciman@mx1.fracta.dev
i think there is a misunderstanding here

1640195686
ifreund!~ifreund@user/ifreund
the compiler lets you write `assert(@sizeOf(Foo) == 42)`

1640195691
companion_cube!~simon@user/companion-cube
any other solution means every single use of unprotected_field is a potential bug

1640195692
Franciman!~Franciman@mx1.fracta.dev
if you have public and private, it doesn't mean you HAVE TO

1640195694
Franciman!~Franciman@mx1.fracta.dev
use them

1640195705
companion_cube!~simon@user/companion-cube
ifreund: sizeof is an implementation detail

1640195708
companion_cube!~simon@user/companion-cube
if you rely on it, it's on you

1640195711
ifreund!~ifreund@user/ifreund
exactly

1640195722
Franciman!~Franciman@mx1.fracta.dev
and shooting yourself is possible with other tools too

1640195722
ifreund!~ifreund@user/ifreund
my "private" labled fields are the same

1640195724
companion_cube!~simon@user/companion-cube
if it changes I don't think it's a semver breakage

1640195739
Franciman!~Franciman@mx1.fracta.dev
ifreund: with the difference that you could let the compiler help you enforce it

1640195742
companion_cube!~simon@user/companion-cube
to me private fields are a much much more common occurrence

1640195762
ifreund!~ifreund@user/ifreund
Franciman: it's not worth the tradeoffs in language complexity though IMO

1640195777
Franciman!~Franciman@mx1.fracta.dev
i see

1640195790
Franciman!~Franciman@mx1.fracta.dev
so you are against PIMPL

1640195794
Franciman!~Franciman@mx1.fracta.dev
for example

1640195797
companion_cube!~simon@user/companion-cube
`pub` on fields is not a huge complexity, is it?

1640195797
Franciman!~Franciman@mx1.fracta.dev
?

1640195816
ifreund!~ifreund@user/ifreund
companion_cube: how do you initialize a struct with fields you cannot see?

1640195827
Franciman!~Franciman@mx1.fracta.dev
with a init

1640195827
companion_cube!~simon@user/companion-cube
with a .init function?

1640195833
Franciman!~Franciman@mx1.fracta.dev
so you are forced to use a init

1640195838
luuk!~luuk@user/luuk
ew

1640195838
Franciman!~Franciman@mx1.fracta.dev
yes abstracting the interface

1640195846
Franciman!~Franciman@mx1.fracta.dev
requires using functions to access to it

1640195852
companion_cube!~simon@user/companion-cube
I'm not saying every struct needs private fields

1640195854
companion_cube!~simon@user/companion-cube
a lot won't

1640195861
companion_cube!~simon@user/companion-cube
but some, like data structures, really should

1640195896
Franciman!~Franciman@mx1.fracta.dev
companion_cube: probably i would be ok and totally abstract the struct away

1640195899
Franciman!~Franciman@mx1.fracta.dev
if it has some private fields

1640195902
Franciman!~Franciman@mx1.fracta.dev
by not exposing it

1640195906
Franciman!~Franciman@mx1.fracta.dev
and returning pointers to it

1640196094
companion_cube!~simon@user/companion-cube
is the only way to do that `anyopaque`, though?

1640196119
ikskuh!~xq@v43666.php-friends.de
opaque { } is a thing

1640196145
ikskuh!~xq@v43666.php-friends.de
but this forces you to do allocations 

1640196165
companion_cube!~simon@user/companion-cube
and also loses a lot of type safety, doesn't it?

1640196167
Franciman!~Franciman@mx1.fracta.dev
when in atlanta, do as atlantans

1640196206
Franciman!~Franciman@mx1.fracta.dev
are we organizing a LeipZig 2022 in summer?

1640196227
ikskuh!~xq@v43666.php-friends.de
you mean in eastern germany? :D

1640196266
Franciman!~Franciman@mx1.fracta.dev
we have a lot of name jokes

1640196270
Franciman!~Franciman@mx1.fracta.dev
ZigQurat

1640196318
Franciman!~Franciman@mx1.fracta.dev
AmaZig

1640197167
andrewrk!~andrewrk@mail.ziglang.org
motiejus, re: bisecting. you don't need to wipe the cache as long as you touch CMakeLists.txt to make sure it re-runs the version detection logic (so that `zig version` is unique). you do need to rebuild the compiler in case the logic changes (e.g. glibc.zig)

1640197186
andrewrk!~andrewrk@mail.ziglang.org
thanks for the bug report btw

1640197376
motiejus!~motiejus@2001:470:69fc:105::38fb
Just touch to update mtime is enough?

1640197385
andrewrk!~andrewrk@mail.ziglang.org
yes

1640197418
andrewrk!~andrewrk@mail.ziglang.org
this will cause it to print i.e. "Configuring zig version 0.10.0-dev.36+6fdf7ce0a" which indicates the version was detected from the git revision

1640197423
motiejus!~motiejus@2001:470:69fc:105::38fb
Thanks, will know for my next bisect

1640197436
andrewrk!~andrewrk@mail.ziglang.org
this string is used as a namespace in the cache to isolate from other versions

1640197483
motiejus!~motiejus@2001:470:69fc:105::38fb
Hm, so that applies both to zig's and the target's (in this case, protoc) cmakelists?

1640197495
motiejus!~motiejus@2001:470:69fc:105::38fb
I assume only the former

1640197517
andrewrk!~andrewrk@mail.ziglang.org
only zig's

1640197547
Franciman!~Franciman@mx1.fracta.dev
oh, zig uses cmake?

1640197570
ifreund!~ifreund@user/ifreund
to build the stage1 compiler yes

1640197581
Franciman!~Franciman@mx1.fracta.dev
i handrolled my build system based on make

1640197586
Franciman!~Franciman@mx1.fracta.dev
and posix shell

1640197603
Franciman!~Franciman@mx1.fracta.dev
lol

1640197604
ifreund!~ifreund@user/ifreund
LLVM doesn't give us much choice wrt using cmake or not

1640197621
Franciman!~Franciman@mx1.fracta.dev
no sure

1640197626
Franciman!~Franciman@mx1.fracta.dev
i was just laughing at my stupidity

1640197807
yrashk!sid1568@id-1568.lymington.irccloud.com
ACTION is trying to figure out an obscure panic (resumed an async function which already returned); I wish I was better equipped to understand where is it actually happening; not sure the stack trace provided is of much help.

1640197972
ikskuh!~xq@v43666.php-friends.de
https://mq32.de/public/80464e5a42554fe8d87bf275e8e8de43389f757e.png

1640197985
ikskuh!~xq@v43666.php-friends.de
li think my qoi encoder is not correct

1640198495
yrashk!sid1568@id-1568.lymington.irccloud.com
I think I was able to isolate the case with the panic. I get this error in  https://gist.github.com/yrashk/ec5edb82b7ee5caae5a5d74fe6143062#file-generator-zig-L341-L342 -- if this async code (lock) is removed, then the test works, otherwise, it crashes with `resumed an async function which already returned`. Would be very thankful for any pointers or ideas on how to figure where is the bug!

1640198566
yrashk!sid1568@id-1568.lymington.irccloud.com
Alternatively, I can turn this hunt into another live coding stream where I will be mostly pulling my hair and staring into the screen :D

1640199311
yrashk!sid1568@id-1568.lymington.irccloud.com
also, running into a situation where compiler segfaults :)

1640199497
Arnavion!arnavion@user/arnavion
<ifreund> Arnavion: what would a "slice iterator" give you over a for loop?   < for loops are push. Iterators are pull. Some algorithms are easier to implement with pulling, others with pushing

1640199558
ifreund!~ifreund@user/ifreund
Arnavion: hmm, in that case I'd just pass around a current index

1640199586
ifreund!~ifreund@user/ifreund
iterators only make sense when they do something non trivial IMO

1640199815
Arnavion!arnavion@user/arnavion
Yes, or subslicing, which is how I'm doing it right now. I don't know if I agree with iterators needing to be complex, but in any case that disqualifies the current iterators of PQ and PDQ also

1640199969
ifreund!~ifreund@user/ifreund
Arnavion: there is bad code in the std currently. Lots of really good code as well of course, but there hasn't been any major attempt to clean things up yet

1640199977
ifreund!~ifreund@user/ifreund
and there won't be until the language is stable

1640199983
Arnavion!arnavion@user/arnavion
Yeah, I know

1640203966
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
On the GitHub issue tracker, when will they accept new proposals to change the language?

1640204148
ifreund!~ifreund@user/ifreund
terminalpusher: when/if they decide that said proposals are a good idea

1640204186
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
but they are saying they don't accept new proposals in the first place so I can't even propose it

1640204207
ifreund!~ifreund@user/ifreund
terminalpusher: you're welcome to discuss what you think is missing here or in other zig communities

1640204333
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
Well, I think the octals need to be removed. They are ancient and we should remove them like C# did. We need to stop carrying the octal garbage into every new language.

1640204387
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
They are extremely niche and specific, niche enough that I don't think they warrant being supported.

1640204397
ifreund!~ifreund@user/ifreund
I don't think they're a very complex language feature, supporting them isn't a high cost

1640204423
ifreund!~ifreund@user/ifreund
though you're right that I've never used them outside of unix permissions

1640204451
motiejus!~motiejus@2001:470:69fc:105::38fb
Fire to the flame: how about base-any numbers, like in erlang? I've used hex, decimal, octal and binary

1640204488
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
ifreund: Yeah, just because the unix people and some other minor users thought it was smart to use them doesn't mean it needs to be a first-class thing in Zig.

1640204536
ifreund!~ifreund@user/ifreund
motiejus: hmm, std.fmt.parseInt() at comptime is basically that...

1640204551
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
motiejus: great idea. The octals should be removed and you should have to use them through a custom base thing like that

1640204612
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
Literally just replace the octal literals nobody ever uses with parseInt if you do need them once every 1000 years

1640204649
motiejus!~motiejus@2001:470:69fc:105::38fb
Erlang's syntax is 16#aa, 8#123, 2#1011, you may guess others

1640204663
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
great solution

1640204827
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
I do wonder what Andrew will have to say about this...

1640205164
andrewrk!~andrewrk@mail.ziglang.org
motiejus, zig has all 4 of the ones you mentioned: hex, decimal, octal, and binary

1640205208
andrewrk!~andrewrk@mail.ziglang.org
I'm pretty happy with status quo. I don't understand the argument against it

1640205224
motiejus!~motiejus@2001:470:69fc:105::38fb
Yeah, never had any use for base-3 or such :)

1640205249
motiejus!~motiejus@2001:470:69fc:105::38fb
And I appreciate octal. I type that in at least once every week, though in go

1640205250
ifreund!~ifreund@user/ifreund
yeah I'm content with the status quo as well

1640205253
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
My argument was that they're very niche and rarely ever used. Thus I don't think are worth supporting.

1640205288
ifreund!~ifreund@user/ifreund
terminalpusher: I think that they are used enough that the quite low cost of supporting them is worth it

1640205289
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
Especially because you can still have them with in an easy different way (parseInt)

1640205310
terminalpusher!~terminalp@2a01:586:968a:1:cebf:9757:2259:bf12
Well you are right, there isn't really a cost to it

1640207087
ifreund!~ifreund@user/ifreund
hmm, not sure how I managed to only partially update the langref for the s/c_void/anyopaque/g change

1640209363
andrewrk!~andrewrk@mail.ziglang.org
ifreund, it's possible I merged an earlier docs PR after your changes

1640209375
andrewrk!~andrewrk@mail.ziglang.org
essentially an unnoticed merge conflict

1640209405
ifreund!~ifreund@user/ifreund
ah, that could be

1640215270
perro!~perro@072-191-245-069.res.spectrum.com
I see zig on hn sometimes, which it is the best place for lang discussion

1640215287
perro!~perro@072-191-245-069.res.spectrum.com
https://news.ycombinator.com/item?id=29654460

1640215306
perro!~perro@072-191-245-069.res.spectrum.com
just a reminder that yc regularly funds enethical peole

1640215326
perro!~perro@072-191-245-069.res.spectrum.com
don't know they deserve traffic

1640215373
perro!~perro@072-191-245-069.res.spectrum.com
unethical*

1640215471
andrewrk!~andrewrk@mail.ziglang.org
there's a lot of unethical stuff going on in the world, but here in #zig on libera.chat is a cozy place to focus on technical topics and ignore everything going on outside

1640215522
perro!~perro@072-191-245-069.res.spectrum.com
agreed

1640215526
perro!~perro@072-191-245-069.res.spectrum.com
I see you there oaften andy

1640215754
oats!~thomas@user/oats
it is advisable to avoid the orange place

1640215775
perro!~perro@072-191-245-069.res.spectrum.com
trust me, I would

1640215783
perro!~perro@072-191-245-069.res.spectrum.com
that's kind of why I even said it, though it's off topic

1640215813
perro!~perro@072-191-245-069.res.spectrum.com
it's cool to see useful discussion happen there, but ugh

1640215820
oats!~thomas@user/oats
mhm

1640216393
powerofzero!c2b6947721@user/powerofzero
In stage1, I am very confused as to why `ir_llvm_value` doesn't handle runtime (ConstValSpecialRuntime) values. It seems like it should, given how it is used for all of the arguments in the `ir_render_*` series of functions. Can someone shed light on this?

1640217301
andrewrk!~andrewrk@mail.ziglang.org
powerofzero, runtime values are generated by processing the IR instruction

1640217324
andrewrk!~andrewrk@mail.ziglang.org
there's a main loop in codegen.cpp iterating over all the IR instructions and saving the LLVMValueRefs

1640217337
andrewrk!~andrewrk@mail.ziglang.org
each IR instruction references other ones that have already been processed and had their value saved

1640217508
powerofzero!c2b6947721@user/powerofzero
That makes sense. Thanks.

