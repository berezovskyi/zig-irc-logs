1632013610
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
andrewrk you should also link to the zig website download section for each release

1632013618
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
if you arent going to provide the other binaries in the github release

1632014030
powerofzero!~user@c-73-25-102-38.hsd1.or.comcast.net
Is there a way to set the tag and value of a tagged union at runtime?

1632014049
powerofzero!~user@c-73-25-102-38.hsd1.or.comcast.net
(Externally managing the safety?

1632025925
noam!~noam@104.232.42.247
powerofzero: that's the entire point of them, so yes :)

1632025938
noam!~noam@104.232.42.247
THe language reference (https://ziglang.org/documentation) should explain how

1632026545
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I think they mean seperately

1632032032
powerofzero!~user@c-73-25-102-38.hsd1.or.comcast.net
noam: g-w1: I mean determinging which field I want to set with a runtime-known value of the tag enum.

1632033415
Tekk!~tekk@89.45.224.139
Are there any rules of thumb for trying to minimize code examples to trigger compiler bugs?

1632033469
Tekk!~tekk@89.45.224.139
https://dpaste.com/AU4GFX7SQ I just managed to trigger this on 0.8.1

1632034441
noam!~noam@104.232.42.247
powerofzero: ahh

1632034477
noam!~noam@104.232.42.247
you could switch on the runtime tag and have an assignment per branch, though that seems like a poor solution

1632039599
shaken!~shaken@2a04:2181:c011:1::c594:f3c
Hello!, I've got a question to ask. What is the best way to iterate through all the possible values of a Type? 0 to 127 for u7 for example. I can easily do it with a do while but since zig doesn't have it I have to use a if break instead, so I thought there might be a better way of doing it in zig.

1632039947
Tekk!~tekk@89.45.224.139
I worked out the compiler crash by breaking the too-deep nested conditionals into their own function, but now I'm scratching my head over this: https://dpaste.com/7EG9MHGYN I get the same behaviour with GeneralPurposeAllocator too

1632039989
Tekk!~tekk@89.45.224.139
Oh oops, lots of garbage in the output below. One sec.

1632039995
Tekk!~tekk@89.45.224.139
Grabbed more backlog than I thought.

1632040032
Tekk!~tekk@89.45.224.139
https://dpaste.com/GSDXR77SA

1632062632
jcmoyer!~jcmoyer@user/jcmoyer
does zig have any notion of logical constness? for example, https://godbolt.org/z/6G7zMn5Gf - would this sort of thing be considered non-idiomatic?

1632063158
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
what would be non idiomatic about it? You're (potentially iirc) copying T but the pointer to U stays the same

1632063270
ifreund!~ifreund@user/ifreund
jcmoyer: your pointer is const, meaning the memory address can not change, but the value being pointed to (U in this case) is not const

1632063285
ifreund!~ifreund@user/ifreund
if your field was `u: *const U` that code wouldn't compile

1632063364
jcmoyer!~jcmoyer@user/jcmoyer
I've been treating *Type as "this parameter might potentially change in an observable way," I'm wondering if that's an incorrect view of mutability in zig

1632063446
jcmoyer!~jcmoyer@user/jcmoyer
Like I understand why this works, I'm just confused on how you should write code that behaves like this. Should you pass *T or T here?

1632063514
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
*const T?

1632063525
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
you want a pointer but you don't want to change it?

1632063533
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
mutate* the inner u pointer?

1632063622
jcmoyer!~jcmoyer@user/jcmoyer
I want to mutate the thing `u` points to, but through T's interface

1632063624
ifreund!~ifreund@user/ifreund
jcmoyer: the constness of your parameter doesn't affect the constness of your pointer to U

1632063667
ifreund!~ifreund@user/ifreund
if you don't want to change what value of type `U` is being pointed to, passing by value is the way to go there

1632063810
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
^

1632063927
jcmoyer!~jcmoyer@user/jcmoyer
alright, thanks

1632064195
jcmoyer!~jcmoyer@user/jcmoyer
so in general I shouldn't treat *Type as implying logically mutable?

1632064267
jcmoyer!~jcmoyer@user/jcmoyer
if I understand correctly, it only implies that the directly accessible fields through that pointer may physically change?

1632064268
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
*T yes, *const T no

1632064292
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
if you accept a pointer that isn't const you canchange T

1632064330
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
regardless of what T you have ifa field is a non const pointer you can mutate it

1632064352
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
i dont think there are that many differences other than safeguards from c if you want to think about it from that POV

1632064366
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
it might help bridge the understanding if you told me where you were coming from with your ideas

1632064699
jcmoyer!~jcmoyer@user/jcmoyer
C++ has this notion of logical constness where if a method can change any externally observable state it should be const, which implies you're passing the C++ equivalent of zig's "self" as "*const T" or more usually "T." The main difference is that it would also propagate the constness of "self" to any members of that type.

1632064828
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ah yeah, I don't think constness propogates in izig

1632064862
jcmoyer!~jcmoyer@user/jcmoyer
Basically you're encoding the idea that something cannot logically change into the type system, which is what I've been trying to do, but I guess that's not the correct approach in zig.

1632064954
ifreund!~ifreund@user/ifreund
jcmoyer: yeah const doesn't propogate like that in zig

1632064959
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
It may be possible as you can construct pointer types at runtime, but i havent thought about that that far

1632064964
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
comptime****

1632071482
Tekk!~tekk@89.45.224.139
https://dpaste.com/GTTMV3HUX Could someone let me know what I'm doing wrong with this reduced code? fwiw originally that alloc call was a readAllAlloc with the same max size, if I messed something up there.

1632071620
ifreund!~ifreund@user/ifreund
Tekk: that's a nasty footgun that will be fixed by https://github.com/ziglang/zig/issues/7769

1632071650
ifreund!~ifreund@user/ifreund
you're copying the allocator struct out of it's parent struct, so when it uses @fieldParentPtr() to get a pointer to the parent it gets an invalid pointer

1632071689
ifreund!~ifreund@user/ifreund
instead you could make the type of `alloc` a `?*std.mem.Allocator`

1632071987
Tekk!~tekk@89.45.224.139
Thanks ifreund 

1632072123
freshcoffee!~fresh@user/freshcoffee
wow it just occurs to me ifreund is literally "internet friend" :)

1632072191
ifreund!~ifreund@user/ifreund
heh, it's also just my first initial and last name :P

1632072311
Tekk!~tekk@89.45.224.139
Just because it's a coincidence doesn't mean it can't also be true, you've helped me out a lot :p

1632072372
ifreund!~ifreund@user/ifreund
:)

