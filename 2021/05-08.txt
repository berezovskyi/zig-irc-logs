1620443557
recalloc
I know in C I'm able to assign values to arbitrary indices in an array literal via `[420] = value`. It doesn't look like I see that in Zig -- should I use `comptime` to compensate or something else?

1620445813
andrewrk
that's one option or you can look into using one of the std.enums functions

1620448045
antaoiseach
hello folks, can I not wrap a FixedBufferAllocator inside an ArenaAllocator? I tried this code, but it segfaults -

1620448197
antaoiseach
Oh, never mind, found the issue - `var allocator = arena.allocator` must be `var allocator = &arena.allocator`.

1620448219
antaoiseach
A warning (if possible) would ben nice here though! :-)

1620448223
antaoiseach
be*

1620448594
andrewrk
antaoiseach, the issue for that is

1620448658
antaoiseach
andrewrk: oh, that's nice to hear!

1620450230
antaoiseach
exit

1620451008
andrewrk
Type  :qa  and press <Enter> to exit Vim

1620464030
ifreund
or ZZ!

1620471051
mikdusan
if I were to code a disruptive virus here's what it would do:

1620471063
mikdusan
randomly toggle the caps-lock

1620471114
mikdusan
it would be as if millions of vi users suddenly cried out in terror

1620471796
betawaffle
my keyboard doesn't even have capslock, that would be truly devastating

1620471818
ifreund
mine doesn't either :D

1620473130
mq32
i have caps-lock remapped to compose ^^

1620479250
companion_cube
mikdusan: you monster

1620494861
andrewrk
the worst is when I accidenally toggle caps lock and switch to qwerty at the same time, in vim

1620494871
kiedtl
um, how does one coerce an array to a slice again? doing `array[0..]` merely gives a `*const [size]Type'

1620494883
andrewrk
&array

1620494891
kiedtl
andrewrk: no dice

1620494897
kiedtl
Oh, wait, the array shouldn't be constant

1620494903
dutchie
constness sounds lik... yeah

1620494923
andrewrk
don't tell me it didn't work, show me the error message :)

1620494993
kiedtl
andrewrk: sorry :) With `&array` where the array is const the message is "expected type '[]usize', found '*const [2]usize'"

1620495007
kiedtl
A compiler hint stating the a slice to a const array isn't valid would be useful

1620495026
kiedtl
Assuming everyone is as dense as I am

1620495099
dutchie
should i link that zig showtime about pointers again

1620495137
dutchie
it's really helpful to understand error messages like that one

1620495154
kiedtl
Sure, that'd be neat

1620495178
dutchie


1620495193
kiedtl
Nice, will take a look at that :)

1620495312
ifreund
kiedtl: error messages can definitely be improved, this is not a big priority with stage1 though

1620495364
kiedtl
Fair enough, makes sense

1620495432
kiedtl
btw, the compiler should at least warn when you try to return a slice to an array allocated in the stack frame of the current function

1620495450
kiedtl
just realized that the array would be overwritten later

1620495544
andrewrk
that's a big topic. there are several ideas to explore to address this problem

1620496002
kiedtl
Oh, /11

1620496005
kiedtl
oops

1620496610
andrewrk
one of the ideas is to try to define the language such that returning a stack pointer from a function is a compile error. but it's actually non-trivial to do that

1620497565
dutchie
i guess you can't really do that without ending up being Rust

1620497804
kiedtl
Is there any way to keep zig fmt from formatting a section? I can't stand it when it turns something like '{ foo(); true; }' to a multi-line statement

1620497825
kiedtl
especially when you have a bunch of those blocks, in, say, a switch statement

1620497839
xackus__
/ zig fmt: off

1620497852
g-w1
s/\/\/\/

1620497884
g-w1
that ended up looking cooler than i expected lol

1620497896
kiedtl
I think you meant s/\//\/\//?

1620497907
g-w1
yes

1620497959
kiedtl
strange.. it still formats

1620497973
kiedtl
does it need a matching // zig fmt: on or something?

1620498003
g-w1
yep

1620498014
g-w1
not like rustfmt that operates on the ast

1620499370
mikdusan
are there any linux distros that don't use elf?

1620500443
mikdusan
maybe we should dump the notion of `-lc` on the zig `build-{obj,lib,exe}` command line and infer from target triple

1620500453
mikdusan
and dump -gnu while we're at it

1620500505
mikdusan
we can have `-target x86_64-linux` be the same as `-target x86_64-linux-none` which means static and ELF

1620500530
mikdusan
and if someone sends any -dynamic related arguments they should error because static only

1620500545
mikdusan
specifically this `target x86_64-linux` means use syscall interface

1620500591
mikdusan
then as a step-up we can have `-glibc` and `-musl` abi which selects a zig-bundled-libc to use

1620500642
mikdusan
so naturally when -glibc or -musl is used, we infer -lc and search paths and crt0 stuff

1620500719
mikdusan
and these 2 default to dynamic with (currently) -musl supporting opt-in -static

1620500788
mikdusan
and for the hat trick we then introduce a `-system` abi which means build things compatible for that particular host;

1620500844
mikdusan
this would require some interesting probes to glean lib/include search paths, -fpic disposition, crt0 stuff under different compiler options, dynamic-libary path, etc.

1620500849
mikdusan
but hell we could CACHE that

1620500965
mikdusan
to clarify the above `-glibc` and `-musl` are part of the triplet, not stand-alone args

1620501072
mikdusan
with -gnu disappearing, on x86_64-windows-mingw takes it's place

1620501176
mikdusan
and on macos it is meaningless; but we introduce `-system` abi as well and `x86_64-macos-system` would mean use host stuff

1620501215
mikdusan
if the work on macos bundled includes pans out potentially we can have default `x86_64-macos-libc` or somesuch as the default

