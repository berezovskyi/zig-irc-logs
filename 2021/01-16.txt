1610756964
andrewrk
v0idify, you can always write lower level code that interacts more tightly with the event loop

1610757708
v0idify
andrewrk, how would i go about doing that?

1610758515
daafu
Hello, I'm poking at Zig for the first time, absolute noob, coming from C. I'm starting with the raylib example. It seems when raylib.h is imported "bool" is converted into: const enum_unnamed_1 = extern enum(c_int) { @"false", @"true", _, };    What is happening here? Its an enum of c_int type with string values?

1610758662
mikdusan
daafu: if an identifier is in conflict with language-builtin, like `true` and `false`,

1610758738
mikdusan
then zig let you say @"false"

1610758932
daafu
mikdusan so then something like this should work?: while(ray.WindowShouldClose() == @"false") { .. }

1610758937
FireFox317
andrewrk, do you have some time to answer a question regarding astgen in stage2?

1610758957
andrewrk
FireFox317, drop it here and I'll answer when I can

1610758979
FireFox317
sure!

1610759078
mikdusan
daafu: enum matching is done with enum literals. so if it wasn't a reserved word, you could do `== .false` but since reserved, you can do `== .@"false"` <-- not that we still use `.` in front because it was needed there anyways.

1610759110
mikdusan
s/not/note/

1610759180
daafu
mikdusan thank you the "." is what I was missing

1610759281
mikdusan
and that's use a very convenient enum_literal (just the dot with a name). you can always prefix it (though it's rare you have to), and in this case it would be `== enum_unnamed_1.@"false"`

1610759378
FireFox317
i tried to implement `var foo = blk: { <etc> }` in stage2 and i managed to implement this by not touching any of the `.block_ptr` result locations. Resolving the peer types of the break values happens with the same mechanism as the inferred allocs that andrewrk implemented. Now i was wondering if there is a usecase where the current inferred alloc strategy does not work with blocks.

1610759429
FireFox317
i can PR the stuff that i currently did to show what i mean if it is not logical.

1610759709
andrewrk
FireFox317, I don't have an answer to this, I think I just need to look at the code and try to make sense of it all

1610759774
FireFox317
andrewrk, yeah that makes sense :) I think this will be a good topic to discuss during a stage2-meeting

1610759813
andrewrk
agreed

1610760650
v0idify
"dumb" question: does the different stages of compilers mean that zig essentially has two implementations for it's compiler?

1610760949
andrewrk
yes

1610760999
andrewrk
stage1 in C++ that uses LLVM; stage2 in zig that has a handful of different backends including but not limited to LLVM

1610761536
v0idify
cool!

1610770648
v0idify
for some reason, with this code

1610770670
v0idify
0.8.0-dev.976+2b0e3ee22

1610770736
v0idify
it was working fine a few revisions ago

1610770820
v0idify
to reproduce: `socat stdio tcp-listen:<port>`; `zig run main.zig -- localhost <port> anything`; typing anything into either stdin will show with removed bytes on either side

1610770873
v0idify
even though when printing each string before sending it shows that it's fine

1610778922
kandinski
Could some zigger that also uses nix help me get out of a small hole? I was working on this last October, at 0.6, and could run `impls/zigzug$ zig test re.zig` and it would work, but now I upgraded my channels, got zig 0.7 and I see this error:

1610779287
kandinski
I mean, maybe someone has seen this issue and it has to do with cInclude lookups, or maybe I've messed up something else.

1610779437
sebonirc
kandinski: it says ur not linking with libc during compilation. try `zig test -lc re.zig`

1610779453
kandinski
sebonirc: ah, sure, thanks

1610779463
sebonirc
np

1610779517
kandinski
same error though, minus the note

1610779571
sebonirc
it says pcre2.h isn't found still?

1610779608
kandinski
yes, only the "note: libc headers not available" disappears, rest of the trace is the same

1610779699
sebonirc
i know this is a simple thing, but just to check, is pcre2 actually installed?

1610779749
kandinski
well, I did put it in shell.nix, but I don't know how to check :/

1610779844
sebonirc
i dont know what the include path in nix is, id assume its probably just /usr/include though. if that's the case, runnign `find /usr/include -name pcre2.h` should print something like "/usr/include/pcre2.h".

1610779875
sebonirc
unless nix handles includes differently

1610779901
kandinski
nixos doesn't follow the LFS/LFH

1610779904
kandinski
so no /usr/include

1610779968
sebonirc
do u know where other include files are? like standard stuff like stdio.h

1610780068
kandinski
everything is in /nix/store and then gets symlinked

1610780087
kandinski
I know some zig developers use nix/nixos, so I thought I'd ask

1610780095
sebonirc
does including pcre2.h work in c, or does that also fail to compile? try just making a test.c with `#include <pcre2.h>` and `int main() { return 0; }` and see if that compiles, that way we can figure out whether its a problem with zig or a problem with ur setup

1610780139
sebonirc
yeah, sorry, i dont have much experience with nix/nixos. thought i could still help but apparently not lol. good luck though

1610780152
kandinski
I've never programmed in C. I'm pretty sure this setup worked well in October, and I'm now picking it up again.

1610780161
kandinski
No worries, sebonirc; thanks for trying :)

1610780621
kandinski
Hi, I'm using lorri and I would like to know how to check that a library (pcre2 in this case) is actually available for include. This is my shell.nix, and zig can't find pcre2.h, algthough it's clear that entering the directory tree makes zig and python executables available:

1610780666
kandinski
(oops, that was for the lorri channel)

1610801276
jensln
I'm confused; I've a simple attempt at implementing a stack, but pop() returns garbage values and I don't see why

1610801282
jensln
Can anyone give a hint?:

1610801482
jensln
I'm (obviously, looking at my code, I think) very new to low-level programming, but I thought I might as well learn it through Zig rather than C

1610801718
Nypsie[m]
`new_node` is allocated on the stack. Meaning its lifetime is only as long as the scope it lives in (the push() function in this case). You could allocate it on the heap using an allocator or better: Have the user handle its lifetime and allow them to pass in the Node to the push() function instead.

1610801761
jensln
Aha, so that's why LinkedList does that as well (take Nodes instead of just the data)

1610801772
Nypsie[m]
Yes, correct

1610801772
jensln
Thank you very much, Nypsie[m]

1610801798
Nypsie[m]
You're welcome! Also, welcome to Zig :) It's my first time with manual memory management as well

1610804234
semarie
isn't possible for the compiler to warn about storing or returning stack's pointer ?

1610804498
zagz
Hi all

1610804602
zagz
In a video by Andrew, he did warn("{}\n", list.items.len); but that doesn't compile for me on 0.7. I have to do .{list.items.len}, which is a bit more verbose. Was this a language change, or am I missing something?

1610804922
Nypsie[m]
varargs were removed a pretty long time ago I believe. You can see the full discussion here:

1610804961
zagz
Thank you!

1610805220
zagz
That discussion makes sense. I noticed some discussions about adding lambdas, but not clear to me if that'll happen or not. I often miss that when going from a modern language back to C :)

1610805321
Nypsie[m]
There's currently a proposal for something similar to that:

1610805391
zagz
I see. clang style blocks (their C extension) would suffice for me. Will read through it, thanks!

1610805787
zagz
Is ZLS for VSCode

1610805798
zagz
what I need to install to get debug going in vscode?

1610806205
Nypsie[m]
ZLS works for most editors, as long as the editor has LSP support in some form

1610806269
Nypsie[m]
I have no experience with debugging in vscode, but there's a small example on how to do it here:

1610806289
zagz
Great!

1610806339
zagz
Anyone here using zig in production? Looks like the core is relatively stable/solid now right?

1610807268
zagz
Nypsie[m]: unfortunately the example no longer seems to work properly, it ends up launching a zig process that takes 100% cpu forever. Not easy to see why as no errors are reported.

1610807528
Nypsie[m]
I see. I tend to use gdb manually or use a simple debug.print() statement

1610808269
zagz
Yeah I'm simple, if I can't get debugging going in vscode, I move on :D I'll for a while.

1610808285
zagz
try* for a while

1610808444
zagz
ah, switching to lldb worked

1610808473
zagz
that's amazing, stack trace and pretty printing worked right off the bat

1610808485
Nypsie[m]
Great to hear!

1610808506
zagz
now I like zig again :D

1610808922
marijnfs
what happened to serialize.zig?

1610808945
Nypsie[m]
It was moved to orphonage

1610808950
marijnfs
I'm trying to make a local serialize function and wanted some inspiration

1610808974
Nypsie[m]
It lives in

1610809003
marijnfs
ah thanks

1610809879
marijnfs
i guess once we have package management this will be easier to use

1610810093
zagz
generics through comptime is mindboggingly clever

1610810431
ifreund
marijnfs: If you're using the stdlib orphanage code I recommend just copy pasting the code you want into your project

1610810464
ifreund
it isn't maintained, so you'll have to keep it up to date with future versions of zig yourself

1610810547
ifreund
zagz: yeah, the moment I realized what andrew had done there was the moment that I was convinced that I should try out zig :)

1610810865
zagz
:D

1610811639
zagz
what's the idiomatic zig-way of dealing with this situation?

1610811643
zagz
var out = [_]u8{0} ** 4096;

1610811644
zagz
const ignore = std.fs.realpath(".", &out);

1610811656
zagz
Compiling on mac, it wants 1024

1610811662
zagz
On linux, it wants 4096

1610811680
ifreund
do we not have a constant for that somewhere in the std?

1610811683
zagz
Do I check builtin.os.tag, or is there a better way?

1610811707
zagz
Oh, there's a constant? Nice

1610811726
ifreund
zagz: std.os.PATH_MAX?

1610811757
zagz
yes! thanks

1610811772
zagz
I should've looked for that....

1610811773
ifreund
but yeah if you had to implement this yourself it would just be an if/switch on builtin.os.tag

1610811791
zagz
I see, excellent

1610811814
zagz
zig build-exe a.zig -target aarch64-linux --library c

1610811820
zagz
boom, works :D Wow

1610811833
ifreund
you can even choose glibc or musl

1610811839
ifreund
and static or dynamic if using musl :D

1610811843
zagz
this will be... helpful

1610811873
fengb
glibc let’s you choose the version too

1610811895
fengb
linux-gnu.2.25

1610811899
zagz
Not sure I'll ever use C again once zig hits 1.0 stability

1610811909
zagz
I mean... what would be the point

1610811909
fengb
I believe it defaults to static musl

1610811917
zagz
Nice!

1610811949
ifreund
the musl default is static if cross compiling yeah, but dynamic if you are on a musl system building for the native target

1610814054
v0idify
how do i report an issue i have that i have no idea how to reproduce? related to evented io

1610814064
v0idify
i sent it here yesterday but nobody answered :#

1610819417
jaredmm
If I'm cross-compiling for x86_64-linux-gnu from Windows and getting linker errors for X11, what am I doing wrong in my build.zig?

1610819668
ikskuh
jaredmm, did you build libX11 and added it to your library path?

1610819952
jaredmm
I'm not building them on Windows, but I did copy them from my Linux distro to see if that would work. I'll double check the libPath as well.

1610819965
ikskuh
addLibPath

1610819970
ikskuh
and addIncludeDir

1610819971
ikskuh
i think

1610821038
jaredmm
Looks like I just need to copy more files. Got rid of some errors by adding a few more.

1610826917
v0idify
how can I make strace to act properly with evented I/O?

1610827115
andrewrk
what makes you think it is not acting properly?

1610828045
v0idify
andrewrk, it seems writing to a connection is writing junk, but i'm trying to get strace to work to see it properly

1610828246
sharpobject
hello, installing zig from brew currently fails in this nondescript way:

1610828467
v0idify
nvm `strace -f` works

1610829944
v0idify
okay i'm not sure if this is supposed to happen

1610830040
v0idify
essentially i'm calling a function in a loop that gets some data into it's own buffer and returns a slice of it, the caller is supposed to use it as an iterator so before the next call, however when using evented I/O i guess what's happening is that it's trying to use that slice after it already got replaced by undefined by the next call, but the way i'm writing my call it should first write it to the socket and then do the next call

1610830935
v0idify


1610831026
v0idify
notice how when using std.debug.print works fine but writing to stdout doesn't

1610831183
ugla
v0idify: isn't that returning a slice of stack memory? That's invalid once the function returns?

1610831232
ifreund1
^

1610831251
v0idify
this confuses me a bit but it makes sense

1610831265
v0idify
why does it work fine all the time in blocking i/o mode but not in evented tho?

1610831287
ifreund1
it just happens to work. It's UB, anything can happen

1610831296
v0idify
right

1610831298
ugla
Nothing managed to overwrite it maybe? Too low-level for me.

1610831309
v0idify
is there a list of undefined behaviour gotchas for zig yet?

1610831333
ifreund
v0idify:

1610831335
v0idify
i know this is pretty obvious for someone who has worked with manual managed memory, not for me though :)

1610831383
ifreund
Yeah this is pretty obvious once you have a good mental model of how the call stack works

1610831403
ifreund
it helps to have implemented a (shitty) one yourself at some point

1610831511
ugla
I've made similar mistakes. It just takes some practice, around "where does this memory live" in particular.

1610831568
v0idify
i mean i realized it can break if the function was called before the return value was used again because i thought the way this works is that the compiler knows how much memory untilChar will use, so it just stores it alongside whatever main uses

1610831579
v0idify
but now i see this is clearly not how the stack works :)

1610831607
v0idify
that part of the documentation only shows undefined behaviour that causes compile or runtime (only on safe modes ofc) errors, i'm precisely looking for the other side of the coin, the ones that are not detectable

1610831645
ifreund
yeah, we don't have a complete spec yet sadly

1610831833
v0idify
well, i want to return an array and a slice to that same array (the rest of the array will be `undefined`); is there a nice way to do that?

1610831890
ifreund
v0idify: you could use a static buffer (i.e. a global  not a local variable) or you could allocate

1610831947
ifreund
you could also return an array by value in a struct with the array and slice

1610831973
nkoz
there is something equivalent to Go channels in zig stdlib?

1610831974
v0idify
I think I'll do that

1610832067
v0idify
i just realized that i was doing it right before (making a struct with a buffer and a function to call it) and I broke it when "simplifying it" lol

1610832070
v0idify
i was so proud of it too

1610832325
ugla
You learned something though, so it wasn't a failure. :)

1610832408
v0idify
true

1610832429
v0idify
thanks for helping!! hopefully i don't blame it on zig next time

1610832545
v0idify
btw i'm trying to do as few allocations as possible, that's why I didn't go with that approach

1610832723
ugla
Letting the caller supply the buffer you could still have it on the stack and it wouldn't result in more allocations.

1610832733
ifreund
^

1610832761
ifreund
that may also avoid copying the buffer around in some cases

1610832773
ugla
In your paste you would declare the buffer above the while loop, and pass a pointer into untilChar

1610833025
v0idify
yes, i ended up doing a equivalent approach: wrapped the method into a `SplitIterator` (which is a better suited name anyway)

1610833061
v0idify
it is a bit weird to initalize (var iter = SplitIterator(4096, @TypeOf(reader), '\n'){ .reader = reader }) but it works well and is even simpler to understand imo

1610833314
ugla
You can also get one out of std.mem.split IIRC

1610833345
v0idify
ugla, ?

1610833355
v0idify
oh of cours

1610833412
v0idify
nvm i was about to rage quit thinking that it was already made; no, mine operates over readers instead of memory

1610834553
kbd
hey

1610835164
kbd
any recommendation for regexes in Zig?

1610837081
ugla
kbd:

1610837168
kbd
ooh thanks

