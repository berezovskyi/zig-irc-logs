1630213229
daurnimator!~daurnimat@vultr.daurnimator.com
andrewrk: hang on... why are true/false/null/undefined no longer keywords?

1630213253
daurnimator!~daurnimat@vultr.daurnimator.com
I thought we were going to go the other way (to make u8/u9/i... keywords)

1630213265
daurnimator!~daurnimat@vultr.daurnimator.com
so that @"i386" worked again

1630213574
daurnimator!~daurnimat@vultr.daurnimator.com
ACTION trying to figure out what https://github.com/ziglang/zig/commit/f30aa25cbf9c9a415963b4ea69d7efa09237a704 did

1630213630
daurnimator!~daurnimat@vultr.daurnimator.com
so the solution was that we allow shadowing of primitives as long as you use @"" syntax?

1630214824
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
I got a failing CI on this PR but I don't see why: https://github.com/ziglang/zig/pull/9641

1630214870
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Linux builds fails with `##[error]Bash exited with code '1'.` No error message before that (after some azure errors which should not be related)

1630214882
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
https://dev.azure.com/ziglang/0184afc2-b8d3-409b-8e4f-4032aaca4c96/_apis/build/builds/16501/logs/29

1630215102
semarie!~semarie@user/semarie
LukeSkwkr: if I correctly understand your PR, the error is the report of new formatting problems found by the `zig fmt` change you did in the PR

1630215132
semarie!~semarie@user/semarie
the list of files in the log are the faulty files with new `zig fmt` behaviour

1630216715
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
ic, it's not a test per se but the actual check performed by zig fmt for the CI.

1630227093
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Ok now it failing on `release/bin/zig test ../test/behavior.zig -fno-stage1 -fLLVM -I ../test`

1630227104
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
executing locally seems OK. I got no output and 0 return code

1630227136
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
But on the CI I end up with a bunch of  use of undeclared identifier on generics.zig and eval.zig

1630227140
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
https://dev.azure.com/ziglang/0184afc2-b8d3-409b-8e4f-4032aaca4c96/_apis/build/builds/16515/logs/25

1630227156
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
I don't see how adding a few commas to asm sources will do that...

1630227201
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
If at least I could reproduce it locally...

1630232057
ifreund!~ifreund@user/ifreund
LukeSkwkr: master branch is failing CI as well after a recent commit

1630232074
ifreund!~ifreund@user/ifreund
you probably can't reproduce locally because you haven't rebased on to master since that commit

1630232128
ifreund!~ifreund@user/ifreund
the CI merges your branch into the current master before running checks though

1630232218
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
I didn't know that. But I am on the latest commit though (remote update/rebase) and `git log --no-merges master ^` shows nothing. Anyway, I'll wait for master to be resolved, will see.

1630232226
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Thx ifreund.

1630232821
ifreund!~ifreund@user/ifreund
LukeSkwkr: just went ahead and merged it, the CI failure was clearly the same thing that's broken on master 

1630233063
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
ok thx.

1630256238
marler8997!~marler899@204.229.3.4
Flaminator, dang lpClassName is a weird parameter

1630256270
marler8997!~marler899@204.229.3.4
you many have opened up a can of worms for the metdata project

1630256863
marler8997!~marler899@204.229.3.4
I've created an issue in the metadata repo asking how the metadata should represent this odd parameter type: https://github.com/microsoft/win32metadata/issues/623

1630257455
marler8997!~marler899@204.229.3.4
In the meantime you could try copying the function definition and changing the type to ATOM and see if that fixes the ABI issue

1630259653
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Yeah it's a weird parameter, like almost everything in win32 haha.

1630259759
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Really loving zigwin32 so far, makes it really easy to do win32 stuff in Zig.

1630260639
marler8997!~marler899@204.229.3.4
thanks, I got tired of having to copy/maintain the bindings everywhere and I figured others would too :)

1630261222
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Changing it to use align(1) seems to work, but I have no idea if that will lead to any other problems down the road marler8997.

1630261373
marler8997!~marler899@204.229.3.4
align(1) on the lpClassName?

1630261395
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Yes.

1630261443
marler8997!~marler899@204.229.3.4
yeah that should be fine as a workaround. If you want it to be "type correct" you could use a union

1630261489
marler8997!~marler899@204.229.3.4
lpClassName: extern union { string: ?[*:0]const u8, atom: u16 }

1630261703
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
I will try playing around with that to see if it works in the other functions as well.

1630261825
marler8997!~marler899@204.229.3.4
depending on what the metadata project maintainers say, we could add special cases for these functions in zigwin32gen to generate them as unions

1630262909
companion_cube!~simon@user/companion-cube
So in terms of decentralized package management, Deno is pretty cool

1630262933
companion_cube!~simon@user/companion-cube
Just import from urls, possibly versioned. That's it. 

1630265267
andrewrk!~andrewrk@mail.ziglang.org
oops, apologies for breaking master

1630265301
andrewrk!~andrewrk@mail.ziglang.org
oh I see, it's the stage2 behavior tests that I forgot to run :D

1630265829
andrewrk!~andrewrk@mail.ziglang.org
daurnimator, yes

1630269385
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ahh, the garbage collection of unused string decls broke the plan9 linker

1630269425
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I think I need a got_index_free_list

1630269590
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah, thats what the elf linker does

1630270313
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
can allocateDeclIndexes be called on the same decl multiple times?

1630271187
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: does this look like the right step? https://github.com/g-w1/zig/commit/0dbc97624c3ca8ee7aa4c8f423e511fb4a8bd4df the tests+assertions pass

1630271670
andrewrk!~andrewrk@mail.ziglang.org
g-w1, soon I will remove allocateDeclIndexes entirely and the linker backends will have to do that when they see a *Decl for the first time

1630271691
andrewrk!~andrewrk@mail.ziglang.org
I suggest to ignore allocateDeclIndexes if you want to prepare the plan9 linker code for that

1630271715
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok cool, that works, I do that with the symbol table anyways, just not the got table

1630273426
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
where are the zig heerleaders at

