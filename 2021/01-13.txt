1610496390
ugla
Nice new website :)

1610496432
andrewrk
thanks ugla!

1610498615
daurnimator
TIL we have a new website

1610498840
kameliya
lol!

1610498890
kameliya
it looks awesome

1610499552
pixelherodev
We do?

1610499559
pixelherodev
We do!

1610500735
companion_cube
Nice website indeed!

1610500740
companion_cube
Looks good on mobile

1610501743
rowbee
much less of an eyesore

1610501745
rowbee
good work

1610502485
marler8997
saw "why Zig over C++/D/Rust" was moved

1610502499
marler8997
it mentions that Rust has operator overloading, but so does C++ and D

1610503441
andrewrk
it mentions that too

1610503510
andrewrk
oh I see the sentence you're talking about

1610503535
marler8997
yeah, another sentence in the same paragraph has as similar issue

1610503552
marler8997
Rust has operator overloading, so the + operator might call a function

1610503563
marler8997
CORRECTIOn: All 3 languages have operator overloading, so the + operator might call a function

1610503572
marler8997
D has throw/catch exceptions

1610503579
marler8997
CORRECTION: D and C++ have throw/catch exceptions

1610503588
andrewrk
the content was duplicated and then updated here:

1610503836
marler8997
having fun re-reading the linked articles

1610503862
marler8997
browsing the Way Cooler code that stopped using Rust...the C code looks so clean

1610503924
marler8997
wait a second "This repository has been archived by the owner. It is now read-only."

1610503930
marler8997
??

1610504001
marler8997
this looks relevant:

1610504372
marler8997
rebased my "require array format specifiers" PR...and looks like more bugs have been introduced that are missing the "{s}" specifier :)

1610504400
andrewrk
is that one ready to land?

1610504407
marler8997
not passing CI yet

1610504409
andrewrk
oh still a draft

1610504422
andrewrk
fwiw I basically never look at drafts

1610504432
marler8997
good to know

1610504445
marler8997
I actually didn't know it was still in draft...still getting use to dark mode

1610504447
andrewrk
I got plenty of ready-to-merge PRs to review

1610504535
daurnimator
andrewrk: did you see the discussion last night on comptime pointers to "stack"?

1610504595
andrewrk
no

1610504751
daurnimator
andrewrk: essentially,

1610504958
paulsmith
possibly dumb q: i see that macOS x86_64 is listed as a tier 1 target, which if i understand means the os interface is implemented in Zig ... but if i look in lib/std/os, only linux seems to have syscalls/ABI implemented. sorry if i'm missing something, i'm just trying to understand - also i want to write a program using termios on macOS and wondering whether to use libc or not.

1610504985
fengb
macOS syscalls are all through libc

1610505007
fengb
Whereas Linux is implemented as direct syscalls

1610505033
marler8997
so on Mac you bascially have to link libc?

1610505037
daurnimator
marler8997: yes

1610505039
fengb
In BSDs, the stable ABI is libc and not the kernel syscalls

1610505048
daurnimator
linux is the only OS with a "stable" syscall ABI

1610505053
paulsmith
ahhh ok

1610505069
marler8997
interesting

1610505078
daurnimator
(and I don't mean specific to zig: linux is the only OS "vendor" to promise syscall numbers don't change at random after updates etc)

1610505131
daurnimator
all other OSes say the only supported way to call their syscalls are through libc syscall interface; or for Windows, NTDll... but only for

1610505251
paulsmith
related question then: what about libc functions like tc{g,s}etattr() that are in the generic os.zig -- do they just need the structs and constants defined in the libc header for the os set up in a os/{os}.zig file?

1610505277
paulsmith
zig's tcgetattr() currently doesn't work on macOS

1610505299
daurnimator
paulsmith: you'll see os.tcsetattr is a wrapper around os.system.tcsetattr

1610505318
paulsmith
for darwin, it currently lacks the termios struct

1610505334
paulsmith
and some #define equivalents like the flags

1610505338
daurnimator
paulsmith: os.system.tcsetattr is then provided by std.c.tcsetattr

1610505359
paulsmith
hmmm ok

1610505365
daurnimator
paulsmith: sounds like we need to add the missing definition to bits.zig

1610505402
daurnimator
paulsmith:

1610505415
paulsmith
ok that's what i thought - i started copying over some from termios.h to to os/bits/darwin.zig

1610505462
paulsmith
ohhhhh - looks like it was just added in the past month. need to update my checkout. ok, thanks!

1610505647
paulsmith
does it makes sense maybe to update the text on

1610505670
daurnimator
Is that incorrect?

1610505679
paulsmith
just caveat it for linux only

1610505699
daurnimator
good point

1610505723
daurnimator
worth opening an issue for

1610505739
paulsmith
it's not a big deal - just about stable ABI and libc was helpful for me to understand - might help another user.

1610511601
mikdusan
would be cool if a PR can be marked as "squash before merge" or some such

1610511722
mikdusan
ie. so add commits to PR for requested changes. then when final merge, automatically knows to squash and use only first commit message

1610511855
mikdusan
or maybe simpler. 3 states: 1. work in progress. 2. review. 3. ready for commit

1610513249
daurnimator
mikdusan:  you mean like with `git commit --fixup`?

1610513290
adamkowalski
Have any of you all had issues getting zig lsp to work?

1610513302
adamkowalski
I am able to get autocompletion for things in the standard library

1610513322
adamkowalski
however, in my build.zig I have a test step, and I add a package containing my library and my path

1610513347
adamkowalski
and inside my test code I import the library and call it in my unit test, which works fine when running zig build test

1610513363
adamkowalski
however, no autocompletion goto definition works for my own code

1610513400
mikdusan
daurnimator: looks like that is my meaning. it's more to do with github workflow and team members, when WIP is marked as ready for review... then commits get added and I want to leave them so

1610513408
mikdusan
those who requested changes can see diff easier,

1610513450
mikdusan
but then when req changes are done, review passed, want to go in there and swash any of the noisy commits away

1610513495
mikdusan
before andy commits... but at same time, don't want him wasting his time figuring out which commits were only for sake or PR review

1610513507
daurnimator
mikdusan: FWIW I don't like that flow because it drops commit signatures. but that was never really a thing the zig repo cared about

1610513545
adamkowalski
Any ideas?

1610513562
mikdusan
but aren't those commit sigs only useful during the PR WIP/review? once it goes merge, not needed anymore

1610513635
daurnimator
mikdusan: no, I use them as proof of authorship (or at least commitship): if you see a commit ostensibly from me without a commit signature from my gpg key... it's likely to be someone pretending to be me

1610513653
mikdusan
for example, I had a macOS version commit. This particular change (imo) is best seen as 1 commit. but it got 2 in the master branch because not squashed

1610513688
mikdusan
hmmm wait how does squashing effect signatures? I can squash and my sig remains.

1610513718
daurnimator
when you sqaush it will also sign the new (squashed) commit. but obviously that only happens if

1610513736
mikdusan
right. the whole point is that

1610513783
mikdusan
put the work on PR maker to get one-last-crack at squashing

1610513786
daurnimator
mikdusan: in which case you can use `git commit --fixup` and then when review passes do `git rebase -i --autosquash` and it'll collapse them all down for you

1610513847
mikdusan
yeah I don't have any problems using rebase. it's the process flow of me getting a chance to do a rebase after all reviews are done, and accepted

1610513856
daurnimator
mikdusan: right.

1610513885
daurnimator
mikdusan: FWIW I always fixup locally and force-push to my PRs. github still gives you diff of what changed

1610513903
daurnimator
mikdusan: I recommend

1610513935
mikdusan
hmm maybe that is what I'm doing wrong. If say you request a change in my PR... ok to rebase + force-push ?

1610514005
daurnimator
yeah that's what I do

1610514026
mikdusan
heh ok. That solves my quirk :)

1610514102
daurnimator
mikdusan: just install that linked via as .local/bin/git-fixup and enjoy :)

1610514171
daurnimator
s/via/script/

1610514173
mikdusan
`git commit --amend --reset-author` to give most recent message a new timestamp; my fav.

1610514187
daurnimator
how did I even typo 'script' as 'via'

1610514197
daurnimator
sigh. lack of sleep I guess

1610514212
daurnimator
mikdusan: why do you want a new timestamp on your commit?

1610514238
daurnimator
mikdusan: commits have 2 timestamps: 1. when authored. 2. when committed.

1610514330
mikdusan
git log by default likes to show 1. and lots of times there is a large time span between the "merge" commit and actual commit. I've always found that confusing.

1610514467
mikdusan
merge e564d2ca3c7a7b2bdb18649e9bdd24f06478f2df refers to f2be1fb23edc272c0a310a9ceb9cdff45e011d98 which is about 12 commits back

1610514845
daurnimator
mikdusan: ps, try `tig`, its an ncurses UI for `git log`

1610514869
mikdusan
heh i get it. spelled backwards

1610515214
daurnimator
mikdusan: thoughts on tig?

1610515231
mikdusan
still running (port install tig)

1610515235
daurnimator
ah

1610515350
daurnimator
the last git experience advice I'll give for now is: `git config --global remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/refs/pull/*/head'`

1610515619
mikdusan
`tig` is pretty slick

1610515695
daurnimator
mikdusan: highlight a commit with up/down/j/k. press enter to see a diff of it. q to get back

1610515712
mikdusan
and left/right arrows even work if content is wide

1610515734
daurnimator
and page up/down work to scroll the most specific pane :)

1610516108
daurnimator
mikdusan: did you make that config change I suggested? if so, now run `git fetch` (or `git pull`)....

1610543346
xyproto
daurnimator: nice discovery, wish I knew where to start to try to fix this in the zig compiler :)

1610558782
paulsmith
just submitted my first PR to zig -- it's small but i'm excited to contribute. hope to add more. great project, great community

1610558901
remby
indeed

1610558996
Nypsie[m]
Welcome!:)

1610573581
andrewrk
welcome paulsmith!

1610573829
oats
congrats on the new website!

1610573835
oats
looks slick :)

1610575138
andrewrk
you can thank Loris for that, he did all the work

1610577150
daurnimator
xyproto: which thing was that in reply to?

