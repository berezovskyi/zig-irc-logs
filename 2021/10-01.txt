1633048348
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I just paired a bit with SpexGuy and we hit some problems in your new code (fixed in his branch) because some Type/Value objects were not copied into anon_decl.arena()

1633048394
andrewrk!~andrewrk@mail.ziglang.org
watch out for that :) the Type and Value objects for a new anon decl have to get copied into anon_decl.arena()

1633048434
andrewrk!~andrewrk@mail.ziglang.org
oh neat, are you going to try taking advantage of Value.Tag.repeated ?

1633050961
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
exactly

1633050977
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: thanks for the reminder

1633051308
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
then i think i'll implement runtime array mul + cat using memcpy

1633051311
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
shouldn't be that hard

1633053499
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
  %19 = constant([4]u8, (repeated) 97)

1633053501
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
:)

1633053752
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
https://github.com/ziglang/zig/pull/9875 :D

1633053763
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
not sure what to about that TODO

1633054369
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
should `**` at runtime work on a *[N]T or just a [N]T ?

1633055110
freshcoffee!~fresh@user/freshcoffee
g-w1: runtime? I thought that was a comptime-only operation

1633057071
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
implemeting https://github.com/ziglang/zig/issues/7147 right now

1633057083
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i'm pretty sure that it should work with *[N]T though not positive

1633057189
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i put a draft pr

1633062323
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Hey, has the command line interface for zig cc changed recently? I just tried "zig cc -o hello hello.c -target x86-linux-musl" but got back UnknownArchitecture

1633062333
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Same thing if I tried --target=x86-linux-gnu

1633062342
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
and --target=x86-linux-musl

1633062362
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
x86 does appear in --print-targets fwiw.

1633064459
andrewrk!~andrewrk@mail.ziglang.org
Tekk, it's i386. related: https://github.com/ziglang/zig/issues/4663

1633064846
Tekk!~tekk@cpe-76-182-45-53.nc.res.rr.com
Thanks andrewrk 

1633067162
andrewrk!~andrewrk@mail.ziglang.org
I just pushed to zig-bootstrap master branch. let's see if marler8997's fancy new CI job will successfully produce a windows dev kit

1633067175
andrewrk!~andrewrk@mail.ziglang.org
llvm 13 is tagged upstream btw

1633067404
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
woot

1633067713
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
my bet is within 48 HR

1633071929
andrewrk!~andrewrk@mail.ziglang.org
there's always some problem that comes up

1633094515
flyx[m]!~flyxflyxo@mail.flyx.org
why does FnDecl have arg_names, but no arg_types?

1633095841
xackus!~xackus@7-24.w.knc.pl
just use github copilot to infer the types from names

1633095865
xackus!~xackus@7-24.w.knc.pl
no need for redundant information

1633095970
marler8997!~marler899@204.229.3.4
andrewrk, looks like you need to update the libc++ files.  chrono::ceil added in c++17, are we that far along?

1633096447
flyx[m]!~flyxflyxo@mail.flyx.org
okay I figured out that I can do @typeInfo on the fn_type. now, how would I construct a @call if I have an FnDecl? does @call consume FnDecl or do I need to transform it back to a function somehow?

1633098402
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
Did std.testing.expect change to have an !void return type or am I going crazy? If so, does anyone know why?

1633099344
xackus!~xackus@7-24.w.knc.pl
it did change

1633099359
ibokuri!sid517924@user/ibokuri
tgschultz: yeah, instead of panicking they return an error now.

1633099372
ibokuri!sid517924@user/ibokuri
reasoning can be found here: https://github.com/ziglang/zig/issues/8629

1633099834
flyx[m]!~flyxflyxo@mail.flyx.org
> error: expected at least 140194250470200 argument(s), found 3

1633099839
flyx[m]!~flyxflyxo@mail.flyx.org
uuh that's a lot of arguments

1633099922
flyx[m]!~flyxflyxo@mail.flyx.org
so turns out @call does not consume FnDecl I guess

1633100645
companion_cube!~simon@user/companion-cube
were private/pub fields for structs ever discussed?

1633101405
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
ibokuri, thanks for that. It makes sense I guess, it just felt weird to add 'try' to testing.expect calls

1633109318
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
flyx[m] the declaration is different from the pointer

1633109363
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
!log

1633111014
marler8997!~marler899@204.229.3.4
how's stage2 dev going?  ready in 2 weeks? :)

1633111127
yeti!~username@user/yeti
before hurd!

1633111155
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
lol

1633113042
andrewrk!~andrewrk@mail.ziglang.org
marler8997, the goal is to merge llvm13 branch today, which has the updated c++ files as well as other stuff

1633113058
andrewrk!~andrewrk@mail.ziglang.org
I'm working on getting the CI green for that branch

1633113164
marler8997!~marler899@204.229.3.4
nice

1633113273
freshcoffee!~fresh@user/freshcoffee
andrewrk on llvm13 clang wants a cast here:

1633113275
freshcoffee!~fresh@user/freshcoffee
https://gist.github.com/mikdusan/4ddca8b6f9843c61eb8d7c9e34fa3e56

1633113289
andrewrk!~andrewrk@mail.ziglang.org
thanks

1633113324
andrewrk!~andrewrk@mail.ziglang.org
marler8997, ah I see what you're talking about, zig-bootstrap failed in the llvm13 branch. hm I thought those libc++ files were up to date

1633113517
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
speaking of new llvm, did we ever get that patch for >128bit ints in?

1633113739
andrewrk!~andrewrk@mail.ziglang.org
which one? arbitrary arithmetic?

1633113767
andrewrk!~andrewrk@mail.ziglang.org
marler8997, I think the chrono issue has to do with build flags passed; the files are up-to-date

1633113809
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
yeah, just being able to do division on a u256 as mentioned in 1485

1633113827
andrewrk!~andrewrk@mail.ziglang.org
I don't think there are any updates on that front

1633113863
andrewrk!~andrewrk@mail.ziglang.org
we don't need to wait on llvm to solve it though. we can lower those to calls to compiler-rt even for the llvm backend; and then we need an arbitrary size int division implementation in compiler-rt

1633113966
marler8997!~marler899@204.229.3.4
#if _LIBCPP_STD_VER > 14

1633114375
andrewrk!~andrewrk@mail.ziglang.org
where do you see this?

1633114387
andrewrk!~andrewrk@mail.ziglang.org
ah a few lines up

1633114445
marler8997!~marler899@204.229.3.4
I'm trying to reproduce on my local machine and I'll see if I can root cause it

1633114491
marler8997!~marler899@204.229.3.4
took CI 2 hours to get there, I bet I can get there in 30 mins

1633114536
andrewrk!~andrewrk@mail.ziglang.org
maybe we just need to pass -std=c++14 or higher when building libc++

1633114560
marler8997!~marler899@204.229.3.4
could be

1633114578
marler8997!~marler899@204.229.3.4
I would think llvm's cmake files would already pass the version they need

1633114607
andrewrk!~andrewrk@mail.ziglang.org
llvm cmake files are dead code

1633114614
andrewrk!~andrewrk@mail.ziglang.org
when using `zig c++`

1633114698
marler8997!~marler899@204.229.3.4
do you know which make is failing?

1633114736
andrewrk!~andrewrk@mail.ziglang.org
none of the makes are failing

1633114742
andrewrk!~andrewrk@mail.ziglang.org
it's zig building c++

1633114747
andrewrk!~andrewrk@mail.ziglang.org
libcxx.zig

1633114772
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, why only that one and not the rest of the file too?

1633114790
marler8997!~marler899@204.229.3.4
huh? are we both talking about this failure? https://github.com/ziglang/zig-bootstrap/runs/3764187831?check_suite_focus=true

1633114813
andrewrk!~andrewrk@mail.ziglang.org
yes

1633114834
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/blob/llvm13/src/libcxx.zig#L161 I'm changing this to c++20

1633114851
freshcoffee!~fresh@user/freshcoffee
andrewrk: that's the only one it complained about. I think there's some inconsistency in the *_detect_* functions; some use zig's enums in the cases and others use llvm's enums

1633114872
marler8997!~marler899@204.229.3.4
oh I see now

1633114883
freshcoffee!~fresh@user/freshcoffee
ideally detect should take llvm enum, and static_cast, and check against zig's enums for best error/warning reports, right?

1633114885
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, they're supposed to all use llvm's to detect when a new item is added

1633114901
andrewrk!~andrewrk@mail.ziglang.org
none of them should be switching on a zig enum

1633115056
freshcoffee!~fresh@user/freshcoffee
ok there are total 2 that swith on zig enum, the other one was already static_cast'ing

1633115057
andrewrk!~andrewrk@mail.ziglang.org
marler8997, yep looks like that was it, I'm cruising along now

1633115116
marler8997!~marler899@204.229.3.4
sweet, I just reproduced

1633115145
companion_cube!~simon@user/companion-cube
congrats on the baby!

1633115156
andrewrk!~andrewrk@mail.ziglang.org
marler8997, thanks for pointing out the #if > 14  - I didn't see that

1633115247
marler8997!~marler899@204.229.3.4
companion_cube lol!

1633115485
companion_cube!~simon@user/companion-cube
(sorry ^^)

1633115742
freshcoffee!~fresh@user/freshcoffee
whups you beat me to it (detect_enum)

1633115773
freshcoffee!~fresh@user/freshcoffee
I'm like where's the diff. whut?!

1633117761
marler8997!~marler899@204.229.3.4
andrewrk, with the cast fix and using c++20 for libcxx, I've not built a windows devkit locally

1633117766
marler8997!~marler899@204.229.3.4
*now built

1633120183
andrewrk!~andrewrk@mail.ziglang.org
nice

1633120224
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
is there an explanation somewhere for how comptime struct members work?

1633120611
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
what is a comptime struct member

1633120865
andrewrk!~andrewrk@mail.ziglang.org
it acts like a field but it always has the same value

1633120881
andrewrk!~andrewrk@mail.ziglang.org
read-only

1633120886
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
ok, so it can never be changed, even in comptime code?

1633120887
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
whats different from that and a constant

1633120941
andrewrk!~andrewrk@mail.ziglang.org
tgschultz, correct

1633120951
andrewrk!~andrewrk@mail.ziglang.org
it's part of the type

1633120984
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
it seems they are transparently unassignable. compiler lets you initialize them with `MyType{.comptime_field = x};` syntax, for instance, but then the value is never changed. Is that intended?

1633121048
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
andrewrk are they interned?

1633121071
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
which is fine it makes sense i just dont see its use aside from a constant in the struct/type's namespace

1633121095
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
it feels like it should be a compile error

1633122871
andrewrk!~andrewrk@mail.ziglang.org
tgschultz, yes it's intended

1633122883
andrewrk!~andrewrk@mail.ziglang.org
the primary motivation for them is formatted printing

1633123016
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
I'm not getting the usecase for transparent failing assignment, though. Is there a usecase for that specifically?

1633123163
andrewrk!~andrewrk@mail.ziglang.org
can you share an example?

1633123277
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
https://zig.godbolt.org/z/hYdaaj6Gr

1633123299
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
assigning outside of the initialization syntax does fail, so I think this is a bug.

1633123454
andrewrk!~andrewrk@mail.ziglang.org
yes this is a bug; it should only allow storing 0 to `a`

