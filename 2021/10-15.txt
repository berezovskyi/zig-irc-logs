1634273514
marler8997!~marler899@204.229.3.4
freshcoffee mystery solved, looks like clang has a special case for -Wp,-MD[,FILENAME]

1634273515
marler8997!~marler899@204.229.3.4
https://github.com/llvm/llvm-project/blob/12cbc8cbf071901686b36e192a6d4da19deb6ec6/clang/lib/Driver/Driver.cpp#L359

1634273530
marler8997!~marler899@204.229.3.4
it translates it to -Wp,-MD,-MF,FILENAME

1634274146
andrewrk!~andrewrk@mail.ziglang.org
zig self-hosted is now passing 188/1050 (18%) of the behavior test suite

1634277929
andrewrk!~andrewrk@mail.ziglang.org
found some more that pass. 211/1050 (20%)

1634281738
Tekk!~Tekk@89.45.224.61
Is there any doc somewhere which covers the build module aside from reading the source? I'm trying to link against a static C library and I *thought* addObjectFile would do it, but in my end result all the symbols from those files are unresolved.

1634282472
ikskuh!~xq@2a0d:5940:6:163::ad7e
Tekk: i can give you https://zig.news/xq/zig-build-explained-part-1-59lf

1634282501
Tekk!~Tekk@89.45.224.61
That's certainly worth bookmarking.

1634282518
ikskuh!~xq@2a0d:5940:6:163::ad7e
hopefully there is part 3 soon

1634282532
Tekk!~Tekk@89.45.224.61
At a glance through build.zig I'm not sure there *is* a way to say "link against a local .a file at this path". I'm pretty sure addObjectFile is for *creating* them.

1634282586
ikskuh!~xq@2a0d:5940:6:163::ad7e
addObjectFil is to create them

1634282593
ikskuh!~xq@2a0d:5940:6:163::ad7e
on Builder

1634282598
Tekk!~Tekk@89.45.224.61
Mhm

1634282616
ikskuh!~xq@2a0d:5940:6:163::ad7e
 exe.addObjectFile("vendor/libcurl/lib/libcurl.a");

1634282623
ikskuh!~xq@2a0d:5940:6:163::ad7e
LibExeObjStep.addObjectFile is the thing you want :)

1634282903
Tekk!~Tekk@89.45.224.61
That *is* what I'm calling, though. There's probably just something else weird going on.

1634282927
Tekk!~Tekk@89.45.224.61
Well there definitely is, considering that I'm trying to force zig to link against a static SDL which will *hopefully* leave me with a binary small enough to fit on a floppy :p

1634282939
Tekk!~Tekk@89.45.224.61
I think that addCSourceFiles may work for these purposes though

1634291932
flux_control!~flux@sourcemage/wizard/flux
andrewrk: w00t! 20%!

1634292059
flux_control!~flux@sourcemage/wizard/flux
Am I correct in understanding that there's currently no way to declare function parameters as specific types of anonymous lists/tuples? I.e., fn foo(bar: .{u32, u32}).

1634292136
ikskuh!~xq@2a0d:5940:6:163::ad7e
Tekk: https://github.com/MasterQ32/SDL.zig-Example/blob/master/build.zig here's a file has all relevant ways to link SDL2

1634292156
ikskuh!~xq@2a0d:5940:6:163::ad7e
flux_control: not yet. there is tuple{u32,u32} planned

1634292159
flux_control!~flux@sourcemage/wizard/flux
I know that you can do the introspection in the function body to explicitly check the param types from an anytype and @compilerError otherwise. I'm wondering if there's an option specifically for fn decls.

1634292170
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i just recommend a struct

1634292195
flux_control!~flux@sourcemage/wizard/flux
ikskuh: OK, thanks. That's what I thought from what I'd read, but there's a lot of different PRs covering that topic, so I kind of get lost in all the rabbit holes. :)

1634292689
ikskuh!~xq@2a0d:5940:6:163::ad7e
flux_control: what do you want to achieve exactly?

1634293113
flux_control!~flux@sourcemage/wizard/flux
ikskuh: I was just playing around with possible implementations of multiple dispatch.

1634293181
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1634293402
flux_control!~flux@sourcemage/wizard/flux
Once the language gets more stable, I'm thinking about trying to implement a basic compiler in C as an alternative means of bootstrapping the language. I'll probably never have enough free time to actually do it though. :(

1634293442
flux_control!~flux@sourcemage/wizard/flux
I'm hopeful I'll finally finish the Japanese translation of the website this weekend though.

1634293451
flux_control!~flux@sourcemage/wizard/flux
Too many RL things keep getting in my way.

1634293892
ikskuh!~xq@2a0d:5940:6:163::ad7e
flux_control: check out vexu/arocc

1634293902
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/Vexu/arocc/

1634293916
ikskuh!~xq@2a0d:5940:6:163::ad7e
jap translation? \o/

1634294082
flux_control!~flux@sourcemage/wizard/flux
ikskuh: Nice! Except that this would require a Zig compiler first.

1634294141
ikskuh!~xq@2a0d:5940:6:163::ad7e
true

1634294145
flux_control!~flux@sourcemage/wizard/flux
My idea is the other way around, when you don't (yet) have a Zig compiler, but you have a C compiler available.

1634294151
ikskuh!~xq@2a0d:5940:6:163::ad7e
until C backend is done :D

1634294157
flux_control!~flux@sourcemage/wizard/flux
Until we achieve world domination. :)

1634294162
ikskuh!~xq@2a0d:5940:6:163::ad7e
also: this

1634304336
devast8a!~devast8a@2001:470:69fc:105::3f46
<flux_control> "Once the language gets more..." <- If I understand things correctly, that is already the plan

1634304986
flux_control!~flux@sourcemage/wizard/flux
devast8a: If that's true, awesome. I hadn't found anything to indicate so though.

1634305230
ifreund!~ifreund@user/ifreund
flux_control: current bootstrapping plan: https://github.com/ziglang/zig/issues/6378

1634305272
ifreund!~ifreund@user/ifreund
if someone implements a simpler compiler in C before that plan is fully executed though that could change things

1634305324
ifreund!~ifreund@user/ifreund
noam's project tricarbon also aims to be a simpler zig compiler written in C: https://pixelhero.dev/c3/

1634305371
ifreund!~ifreund@user/ifreund
though that doesn't look to be anywhere near completion

1634305667
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
andrewrk good work on stage2 :D

1634305851
flux_control!~flux@sourcemage/wizard/flux
ifreund: Ah, right. Good to know. :)

1634305892
op_4!~op_4@user/op-4/x-9116473
does zig have `zero cost' abstractions? That might be the wrong term, but in particular is there a difference between fn foo() [2]T and fn foo() PairT where const PairT = struct { fst : T, snd : T}?

1634305925
ikskuh!~xq@2a0d:5940:6:163::ad7e
op_4: that depends very much on the ABI you use 

1634305941
ikskuh!~xq@2a0d:5940:6:163::ad7e
for a pure zig impl, it is probably equivalent in the release mode

1634305941
op_4!~op_4@user/op-4/x-9116473
ikskuh: i'm afraid i don't really know what that means, sorry :/

1634305952
ikskuh!~xq@2a0d:5940:6:163::ad7e
ABI => application binary interface

1634305970
ikskuh!~xq@2a0d:5940:6:163::ad7e
it defines how data is passed for functions in respect to calling convention and CPU

1634305989
devast8a!~devast8a@2001:470:69fc:105::3f46
ifreund: I imagine it comes down to whatever is practical, people aren't that invested in any particular outcome right? It just comes down to whatever is the easiest solution when self hosted is done.

1634305994
ikskuh!~xq@2a0d:5940:6:163::ad7e
op_4: this means it defines how registers and memory is to be handled when calling a function

1634306000
ifreund!~ifreund@user/ifreund
devast8a: yep pretty much

1634306029
ikskuh!~xq@2a0d:5940:6:163::ad7e
op_4: but basically, zig doesn't have "zero cost abstractions", especially as the term is very weakly defined

1634306033
ifreund!~ifreund@user/ifreund
the important part is that we have a bootstrap compiler in a highly portable language such as C89/99 before 1.0 

1634306048
op_4!~op_4@user/op-4/x-9116473
ikskuh: i see, makes sense. I vaguely understand that C has calling conventions and return conventions that involve registers on x86. Good to know this is part of what ABI means

1634306051
ifreund!~ifreund@user/ifreund
rust doesn't either

1634306058
ifreund!~ifreund@user/ifreund
they don't exist

1634306058
flux_control!~flux@sourcemage/wizard/flux
devast8a: I think it'd only make a real difference if a compiler in C got implemented before the self-hosting compiler was finished.

1634306068
op_4!~op_4@user/op-4/x-9116473
op_4: i see, so if i'm interested in speed i should do stuff like [2]T?

1634306079
op_4!~op_4@user/op-4/x-9116473
whoops, ikskuh * of course

1634306090
ifreund!~ifreund@user/ifreund
op_4: if you're interested in speed you should benchmark both and take the faster one

1634306108
op_4!~op_4@user/op-4/x-9116473
ifreund: haha, of course :) that's always the correct the answer

1634306121
ifreund!~ifreund@user/ifreund
I doubt you'll see any difference between those two though 

1634306130
flux_control!~flux@sourcemage/wizard/flux
ikskuh: Inasmuch as any language/implementation has zero cost abstractions, Zig has lots of them: comptime.

1634306148
devast8a!~devast8a@2001:470:69fc:105::3f46
Also make sure to benchmark your code in the environment that you intend to run it, executing the code a million times in a loop may not be indicative of its true performance.

1634306154
op_4!~op_4@user/op-4/x-9116473
ifreund: great, i was rather hoping for that

1634306167
op_4!~op_4@user/op-4/x-9116473
devast8a: right, thanks, good advice

1634306180
companion_cube!~simon@user/companion-cube
is there a hint of whether #6965  will be part of 1.0? or rejected?

1634306232
ifreund!~ifreund@user/ifreund
companion_cube: nope

1634306247
ifreund!~ifreund@user/ifreund
that likely won't be revisited until self hosting is complete

1634306253
companion_cube!~simon@user/companion-cube
cool cool

1634306262
companion_cube!~simon@user/companion-cube
I think it's important to have composable control flow, but well :)

1634306538
flux_control!~flux@sourcemage/wizard/flux
companion_cube: One step at a time. ;)

1634306555
companion_cube!~simon@user/companion-cube
oh sure

1634306567
companion_cube!~simon@user/companion-cube
I just mean before 1.0, not before the next release :)

1634306674
devast8a!~devast8a@2001:470:69fc:105::3f46
inline on a function is a directive to the compiler not just a hint right?

1634306964
op_4!~op_4@user/op-4/x-9116473
is there a preferred pastebin on this chan?

1634306999
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
https://zigbin.io

1634307016
op_4!~op_4@user/op-4/x-9116473
haze: excellent, thank you

1634307158
op_4!~op_4@user/op-4/x-9116473
if someone has the time and patience, i have a naive question about heap allocations (?) and slices, minimal-ish example: https://zigbin.io/920037

1634307186
op_4!~op_4@user/op-4/x-9116473
what happens to xs in foo after it returns?

1634307220
op_4!~op_4@user/op-4/x-9116473
in some sense, where did it go? how do i `reclaim' that space? or am i very confused?

1634307343
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
that isnt heap allocated

1634307344
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
thats on the stack

1634307365
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
so when foo returns it's stack frame is popped and the address you returned points to garbage memory

1634307370
ikskuh!~xq@2a0d:5940:6:163::ad7e
flux_control: true, if we count "comptime" as a zero-cost abstraction, then yes

1634307397
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
heap memory is usually done by the Allocator interface & family, where .create/alloc give you an address of memory and .destroy/free is how you "reclaim" it

1634307409
Tekk!~Tekk@89.45.224.61
Thanks ikskuh 

1634307441
op_4!~op_4@user/op-4/x-9116473
haze: i see, right, stack is the place then. Do i understand that you mean that this programme won't work because xs_slice points to garbage? or it will work, but for bad reasons (that garbage hasn't changed)?

1634307640
op_4!~op_4@user/op-4/x-9116473
because, at least on my machine, it does yield the expected result and i'm confused by this

1634308205
cursey!~cursey@user/cursey
haze: what's stage 2 mean?

1634308215
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
stage 2 is the self hosted zig compiler

1634308225
cursey!~cursey@user/cursey
is that the final stage

1634308229
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
op_4 thats because nothing else has taken its place on the stack. try doing something else that would overwrite the stack memory

1634308233
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
cursey yeah i think so

1634308238
cursey!~cursey@user/cursey
thanks

1634308537
op_4!~op_4@user/op-4/x-9116473
haze: ok, works for bad reasons, thanks!

1634308989
discipulus!~discipulu@user/discipulus
how do you pass a hashmap to a function?

1634309028
discipulus!~discipulu@user/discipulus
what is the function's signature?

1634309115
ikskuh!~xq@2a0d:5940:6:163::ad7e
how did you declare the hash map?

1634309134
flux_control!~flux@sourcemage/wizard/flux
discipulus: You can actually try compiling with an intentionally wrong type and the compiler will tell you what it needs to be.

1634309169
flux_control!~flux@sourcemage/wizard/flux
e.g. try passing your hashmap to a function that takes a u32 parameter

1634309252
flux_control!~flux@sourcemage/wizard/flux
discipulus: You could also pass it as an anytype or via the "comptime T: type, foo: T" pattern

1634309279
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
discipulus fn foo(map: *std.AutoHashMap([]const u8, u64))?

1634309325
flux_control!~flux@sourcemage/wizard/flux
haze: Depends on what he's putting in the hashmap.

1634309475
haze!~haze@2603-7000-a300-1741-4885-9c6e-246b-8efb.res6.spectrum.com
clearly

1634309814
discipulus!~discipulu@user/discipulus
std.AutoHashMap(u32, void).init(std.testing.allocator)

1634309997
discipulus!~discipulu@user/discipulus
haze suggestion works

1634310196
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
o7

1634310224
discipulus!~discipulu@user/discipulus
as does flux_control's 

1634310414
discipulus!~discipulu@user/discipulus
the error tripped me up a bit (the AutoContext parameter): found '*std.hash_map.HashMap(u32,void,std.hash_map.AutoContext(u32),80)'

1634310439
discipulus!~discipulu@user/discipulus
err, the last two parameters

1634310571
flux_control!~flux@sourcemage/wizard/flux
discipulus: That's because an AutoHashMap wraps a HashMap. Note the lack of "Auto" in the outer part of the error message. ;)

1634310607
discipulus!~discipulu@user/discipulus
Yes, I did notice

1634310631
flux_control!~flux@sourcemage/wizard/flux
Hmm.. I should say alias instead of wrap, in case that confuses anyone thinking of rust-type wrapping/unwrapping.

1634310731
discipulus!~discipulu@user/discipulus
I hadn't put the two together but it's clear now. 

1634310868
flux_control!~flux@sourcemage/wizard/flux
discipulus: The std lib sources make stuff like that more clear. There AutoHashMap is just a function that wraps a call to HashMap, and it's easy to spot there.

1634310886
discipulus!~discipulu@user/discipulus
I had read it

1634310911
flux_control!~flux@sourcemage/wizard/flux
Ah, sorry

1634310941
discipulus!~discipulu@user/discipulus
no worries, just wasn't putting the pieces together. thanks for the help.

1634310981
flux_control!~flux@sourcemage/wizard/flux
I originally tried to use hash maps before reading the std lib source and kept banging my head, then I read the source and everything clicked for me.

1634310988
flux_control!~flux@sourcemage/wizard/flux
np

1634311003
flux_control!~flux@sourcemage/wizard/flux
I probably went about banging my head far longer. ;)

1634311005
discipulus!~discipulu@user/discipulus
having the source is usually very helpful. it's nice.

1634311084
flux_control!~flux@sourcemage/wizard/flux
You know, I don't recall ever hearing anyone say they learned how to use std libc stuff by reading the source rather than reading the spec or some other document...

1634311100
flux_control!~flux@sourcemage/wizard/flux
So Zig is pretty awesome in that regard :)

1634311332
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
To be fair, libc is well documented.

1634311341
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
aint nobody reading glicb bera

1634311343
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
bra*

1634311350
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
glibc jfc

1634311389
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
There's that. It's not exactly readable. But man pages exist and are good. Zig's std documentation leaves a bit to be desired.

1634311397
companion_cube!~simon@user/companion-cube
rust's stdlib code is pretty nice, otoh

1634311402
companion_cube!~simon@user/companion-cube
you can actually read it

1634311472
discipulus!~discipulu@user/discipulus
I read Drew DeVault's blog post about glibc. It seems like a maze.

1634311528
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
There are also many libc implementations. It may be impractical to read glibc, but musl or newlib are not huge.

1634311566
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
musl is elite

1634311625
discipulus!~discipulu@user/discipulus
companion_cube yes, also easy to understand. I've found many answers there, too.

1634311625
flux_control!~flux@sourcemage/wizard/flux
leeward: My point was that the zig std lib source itself is rather readable.

1634311662
flux_control!~flux@sourcemage/wizard/flux
The documentation is definitely in need of love, but at least the source is directly legible.

1634311668
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: I know, and it's mostly true. I'm just griping about the state of its documentation.

1634311690
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
And that is much better than it used to be.

1634311695
discipulus!~discipulu@user/discipulus
The DeVault blog post compared glibc and musl

1634311698
companion_cube!~simon@user/companion-cube
discipulus: yeah, I especially liked sync.rs with Arc and stuff

1634311732
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Wait, people still use Arc?

1634311754
discipulus!~discipulu@user/discipulus
It's still taught in the book

1634311759
dutchie!~dutchie@user/dutchie
presumably Arc there is Rust's Atomic Reference Counted pointer, not the language

1634311781
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Ohh, I was thinking about the processor architecture.

1634311789
flux_control!~flux@sourcemage/wizard/flux
However readable musl's source might be, I've never heard of anyone learning C by reading its source. It's more if you know C then you can read the source.

1634311790
discipulus!~discipulu@user/discipulus
Oh, a different Arc

1634311797
discipulus!~discipulu@user/discipulus
haha

1634311800
flux_control!~flux@sourcemage/wizard/flux
glibc is a maze even if you know C. ;)

1634311874
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Well, K&R walks you through writing a bunch of functions that are in libc. That's not too different from learning the language by reading its standard library.

1634311875
companion_cube!~simon@user/companion-cube
yeah it's a multithread refcounted pointer

1634311884
companion_cube!~simon@user/companion-cube
and there's a lot of comments in there explaining all the unsafe bits

1634311892
flux_control!~flux@sourcemage/wizard/flux
Meanwhile for me it triggered arc as in arc4random(). :) So many arcs, so few Noahs.

1634311916
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
I wouldnt touch k&r with a 10 ft pole

1634311930
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I learned C from K&R. It worked out.

1634311935
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
im not 40

1634311937
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
jkjkjkjkjk

1634311943
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
im trying to find the book i used

1634311945
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I'm (barely) also not 40.

1634311974
flux_control!~flux@sourcemage/wizard/flux
leeward: Only for the functions they walk you through. For any other functions, rather than reading the libc sources you'd read the man pages, the spec, or some other tutorial/documentation.

1634311995
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
ant find it womp womp

1634312009
discipulus!~discipulu@user/discipulus
I look at k&r as a source of guidance for explaining a language

1634312040
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: Yeah, but that's a practical matter. I'd rather read documentation that talks about why a function might be used, along with examples and common uses, than that function's implementation.

1634312079
flux_control!~flux@sourcemage/wizard/flux
leeward: But then you read Zig's source, which includes the test cases to show you how it can be used.

1634312141
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
i wish the std lib inlined tests more

1634312142
flux_control!~flux@sourcemage/wizard/flux
Granted, it's not the same as clearly stating when it can and can't be used, but we can't have that while the language isn't stable yet. We'd need a spec for that, and we need stability to have a spec.

1634312147
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
its possible but usually theyre just at the bottom of the file

1634312195
flux_control!~flux@sourcemage/wizard/flux
haze: Be careful what you wish for, I actually came across some cases of test cases infixed between the bits of code they were testing.

1634312224
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: Test cases show you the syntax and some examples of what arguments give what values, but it's not as good as "The strnlen() function returns the number of bytes in the string pointed to by s, excluding the terminating null byte ('\0'), but at most maxlen."

1634312224
flux_control!~flux@sourcemage/wizard/flux
In meta.zig

1634312244
discipulus!~discipulu@user/discipulus
TODO: add test showing how to pass a hashmap to a function ;)

1634312256
flux_control!~flux@sourcemage/wizard/flux
leeward: Yes, I know. See my comment above regarding having a stability and a spec.

1634312272
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
flux_control: Yeah, I agree. I just took a long time to write that :P

1634312304
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
And it's not like we're not improving the docs in Zig. I do wish more people would include good doc comments with patches to std.

1634312319
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Oh, and Rust doesn't have a spec either. It's just better documented.

1634312331
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Not that Rust is better on most things.

1634312396
flux_control!~flux@sourcemage/wizard/flux
leeward: I hesitate to agree that rust is better documented. ;)

1634312409
flux_control!~flux@sourcemage/wizard/flux
It's certainly more documented. ;)

1634312442
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I won't argue that one. Good documentation does exist in Rust, but not all of it is good.

1634312449
flux_control!~flux@sourcemage/wizard/flux
Indeed

1634312477
discipulus!~discipulu@user/discipulus
zig's documentation will get better. For the langref at least, Andrew lowered its priority so people will get the impression the language is a work in progress.

1634312583
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
One of the things keeping me from using Zig at work is the lack of a spec. It also keeps us from using Rust.

1634312654
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I should look at how much progress sealed rust has made.

1634312711
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
Apparently it's called Ferrocene now?

1634312739
marler8997!~marler899@204.229.3.4
very nice side affect of porting my custom linux distro to Zig, I can now build the bootloader/rootfs and disk image on Windows :)

1634312835
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
That seems...perverse.

1634312844
discipulus!~discipulu@user/discipulus
is that allowed?

1634314101
discipulus!~discipulu@user/discipulus
my prediction: zig will be used to create code that will run on billions of devices

1634314539
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
I had better look into more manufacturable versions of that project I'm working on.

1634315116
discipulus!~discipulu@user/discipulus
zig is still a top contender in the primes drag race

1634315192
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
my prediction: zig will zig

1634315202
leeward!~Ashes@c-76-19-143-101.hsd1.ma.comcast.net
cool

1634315206
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
my prediction: andrew will take my 5bn ofer to become lead dictato

1634315275
discipulus!~discipulu@user/discipulus
I'm sure zig will at least zag

1634315435
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
zag is loris' development executable name for zig

1634315543
discipulus!~discipulu@user/discipulus
got it

1634315751
discipulus!~discipulu@user/discipulus
the prime drag race is using 0.8.0

1634317062
Nulo!~Nulo@user/nulo
marler8997, what do you mean "porting my custom Linux distro to Zig"? Surely you aren't compiling the kernel with Zig?

1634317097
marler8997!~marler899@204.229.3.4
Nulo, I've been working on compiling the kernel with zig cc but haven't quite done so yet

1634317122
Nulo!~Nulo@user/nulo
Then how is the kernel compiled in Windows? I'm curious

1634317141
marler8997!~marler899@204.229.3.4
haven't compiled the kernel in windows, just bootloader and rootfs atm

1634317152
Nulo!~Nulo@user/nulo
I have myself tried to run CC="zig cc" on an old device-specific kernel tree after getting frustrated with cross-compilers

1634317169
Nulo!~Nulo@user/nulo
Ah right, sorry I read that wrong

1634317180
Nulo!~Nulo@user/nulo
I thought that rootfs contained kernel images which doesn't make senswe

1634317189
marler8997!~marler899@204.229.3.4
gotcha

1634317208
marler8997!~marler899@204.229.3.4
I've found and addressed one issue with compiling kernel with zig cc (handling -Wp,-MD,FILENAME)

1634317254
marler8997!~marler899@204.229.3.4
I wrapped zig in a script named "clang" so the kernel knew it was clang based, but that seems to have messed up zig cc when it's looking for the system libc installation because it calls into the system clang, which is now zig cc because of my clang wrapper script

1634317289
marler8997!~marler899@204.229.3.4
I'm able to get about 10 seconds in and then it fails to find openssl (I believe because of this issue)

1634317315
marler8997!~marler899@204.229.3.4
I might be able to get cross compilation to work though, if I can compile all the dependencies as well

1634318549
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
andrewrk eta on next stream

1634321710
andrewrk!~andrewrk@mail.ziglang.org
thursday

1634333628
freshcoffee!~fresh@user/freshcoffee
semarie: congrats on 7.0

1634336920
flux_control!~flux@sourcemage/wizard/flux
marler8997: I wonder if it would be easier building freebsd (or another bsd) using zig cc? There clang is the default system compiler anyway, plus the linux kernel has all kinds of funky dependencies for its build (perl, etc.). A typical bsd kernel only requires a compiler and bsd make, afaik.

1634337636
freshcoffee!~fresh@user/freshcoffee
marler8997: which libc? I recall just seeing an article about someone working to build glibc w/ clang but glibc requires patches for any hope to do so

1634337761
marler8997!~marler899@204.229.3.4
flux_control thanks for the suggestion.  I haven't built bsd before but I might have a go at that

1634339222
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
ok so i have minimal experience with using c from zig right? The most i've done is cImport & cInclude, but what if I want to just have a symbol that I will link it against later, how would I do that?

1634339548
andrewrk!~andrewrk@mail.ziglang.org
extern

1634339590
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
dope ill look into it thanks

1634339605
haze!~haze@2603-7000-a300-1741-895b-7c7a-c464-2b4a.res6.spectrum.com
i just got some insider apple info and im going to abuse the hell out  of it

