1623977592
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks!

1623978212
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that simplified logic is really nice!

1623979365
freshcoffee!~fresh@user/freshcoffee
`Panicked during a panic. Aborting.` the bane of my last hour

1623981363
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
uhh, I found that functions, captures do not use blockExpr statements 

1623981370
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you know what this means /o\

1623981376
oats!~thomas@user/oats
lol

1623981377
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
more unused vars to fix! fun

1623983639
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the actual astgen code is pretty easy, but I'm very sick of fixing unused vars

1623983640
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
lol

1623984537
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice found a bug where T is not being referenced in comptime T: type, a: T, b: T

1623987878
freshcoffee!~fresh@user/freshcoffee
sunofagun rpath is null term in macho

1623987900
freshcoffee!~fresh@user/freshcoffee
another mega patch coming right up :)

1623987941
andrewrk!~andrewrk@mail.ziglang.org
:)

1623988666
ifreund!~ifreund@user/ifreund
well, I got void's xbps-src cross compiling zig code from x86_64 musl to armv6l musl https://github.com/void-linux/void-packages/pull/29288

1623988708
ifreund!~ifreund@user/ifreund
hit some errors with other combinations though, will have to return to this when I'm back to my desktop PC that can handle building zig stage1

1623988755
ifreund!~ifreund@user/ifreund
not too bad so far though, this is the meat of it: https://github.com/ifreund/void-packages/blob/rundird/common/build-style/zig-build.sh

1623989261
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, this latest stuff has found a lot of bugs in astgen, like treating _ as an identifier in some places

1623989468
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
:((((((((((((((((((((((((((((((((( https://clbin.com/skJTF

1623989481
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, its past midnight, but I will deal with that tommorow

1623989502
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks for your comments andrewrk, or I might not have realized that stuff doesn't use blockExprStmt

1623989916
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
slightly less, now that while with _ doesn't count as an identifier https://clbin.com/T41JR

1623990029
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
goodnight!

1623991051
andrewrk!~andrewrk@mail.ziglang.org
goodnight 

1624001156
motiejus!~motiejus@2001:470:69fc:105::38fb
Looks like "old logs" is link in https://github.com/ziglang/zig/wiki/Community is pointing to freenode. Is there an up-to-date link for logs of this channel?

1624001184
motiejus!~motiejus@2001:470:69fc:105::38fb
Specifically, I need yesterday's andrewrk instructions that have `gdb -p` and the gdb command to print the process' stack trace

1624001207
motiejus!~motiejus@2001:470:69fc:105::38fb
if someone knows a place where irc logs are stored, or can scroll up for me, I would be grateful

1624001238
motiejus!~motiejus@2001:470:69fc:105::38fb
thanks in advance :)

1624001649
torque!~tachyon@user/torque
motiejus, https://marler8997.github.io/zig-irc-webpage/?date=2021-06-17

1624001689
motiejus!~motiejus@2001:470:69fc:105::38fb
torque excellent!

1624001736
motiejus!~motiejus@2001:470:69fc:105::38fb
any good reason that page is not in https://marler8997.github.io/zig-irc-webpage/?date=2021-06-17 ?

1624001739
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. https://github.com/ziglang/zig/wiki/Community ?

1624001900
torque!~tachyon@user/torque
not sure, it's very new and may still be in dev

1624001952
motiejus!~motiejus@2001:470:69fc:105::38fb
I added it to the page and marked as "experimental"

1624001958
motiejus!~motiejus@2001:470:69fc:105::38fb
it's better than nothing.

1624007415
motiejus!~motiejus@2001:470:69fc:105::38fb
curious why this is (nightly): `file ./zig`

1624007417
motiejus!~motiejus@2001:470:69fc:105::38fb
./zig: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, not stripped

1624007429
motiejus!~motiejus@2001:470:69fc:105::38fb
and `ldd zig` says: "statically linked"

1624010200
ikskuh!~xq@2a0d:5940:6:163::ad7e
can i somehow expect a log in testing?

1624011879
freshcoffee!~fresh@user/freshcoffee
what kind of log?

1624011946
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.log.err

1624011959
ikskuh!~xq@2a0d:5940:6:163::ad7e
because i cannot test if i actually *log* something :D

1624012009
freshcoffee!~fresh@user/freshcoffee
so like spawn a process, capture stderr and review it?

1624012041
ikskuh!~xq@2a0d:5940:6:163::ad7e
nah, more like "i expect this function to output 3 lines of log"

1624012053
ikskuh!~xq@2a0d:5940:6:163::ad7e
test { std.log.err("no", .{}); }

1624012054
ikskuh!~xq@2a0d:5940:6:163::ad7e
this test fails

1624012291
freshcoffee!~fresh@user/freshcoffee
looks like std.log gives one the ability to override the logging function

1624012357
ikskuh!~xq@2a0d:5940:6:163::ad7e
not for tests

1624012386
freshcoffee!~fresh@user/freshcoffee
maybe there's a clever way to add your own, and redirect to a mem buffer at beginning of test, and restore to stderr after test completes

1624012439
ikskuh!~xq@2a0d:5940:6:163::ad7e
nope

1624012447
ikskuh!~xq@2a0d:5940:6:163::ad7e
sure, i can modify the std test_runner.zig

1624012453
ikskuh!~xq@2a0d:5940:6:163::ad7e
but i don't think that's the right solution

1624012459
ikskuh!~xq@2a0d:5940:6:163::ad7e
but after reading the test runner:

1624012465
ikskuh!~xq@2a0d:5940:6:163::ad7e
there doesn't seem to be a way to do this right now

1624015899
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
motiejus: it does not link any dynamic libs, including libc

1624016688
motiejus!~motiejus@2001:470:69fc:105::38fb
g-w1: yes, surely. But I am curious why `file` says |dynamic`

1624016711
motiejus!~motiejus@2001:470:69fc:105::38fb
I.e. `dynamically linked`

1624016867
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh i see

1624018203
bud!~bud@user/bud
hello. I don't like any filemanagers on linux. Last couple of weeks i have been hacking on pcmanfm, which i think is acceptable.

1624018268
bud!~bud@user/bud
but i find the project awkward to work with, and yesterday i thought, i should make my own GTK2 fm.

1624018337
bud!~bud@user/bud
I was also thinking maybe i should try to do it in zig.

1624018391
bud!~bud@user/bud
so, i am asking: are there any guides or good examples how to get started with zig and Gtk, or maybe you can talk me out of it.

1624018491
nerthus!~nerthus@85.149.146.5
well, why GTK2? first

1624018508
bud!~bud@user/bud
i think Gtk3 is aweful, especially for filemangers.

1624018520
bud!~bud@user/bud
specifically the autohiding scrollbars

1624018548
bud!~bud@user/bud
and with Gtk3 they removed the functionality to add keybindings to menu actions by just hovering them.,

1624018553
nerthus!~nerthus@85.149.146.5
gtk2 has no wayland backend tho

1624018561
nerthus!~nerthus@85.149.146.5
it's not future-proof like gtk3/4 are

1624018563
bud!~bud@user/bud
i don't use wayland

1624018569
bud!~bud@user/bud
i don't have a future

1624018576
nerthus!~nerthus@85.149.146.5
but you might have to, in the future

1624018636
bud!~bud@user/bud
this is also a good reason to make and maintain a Gtk2 only fm.

1624018644
nerthus!~nerthus@85.149.146.5
you can generally import GTK headers as-is and call them directly in Zig

1624018857
bud!~bud@user/bud
just found this https://github.com/Sobeston/gtk2-zig-hello-world 

1624018889
bud!~bud@user/bud
i also see the same guy hosts learnzig.org , i guess its a good starting point.

1624019248
bud!~bud@user/bud
hello world! https://0x0.st/-9cj.png

1624019952
oats!~thomas@user/oats
heh, nice theming

1624019958
oats!~thomas@user/oats
what DE/WM is that?

1624019972
bud!~bud@user/bud
xfce/i3wm

1624020283
bud!~bud@user/bud
(urxvt, sublime, pcmanfm, vivaldi)

1624020307
bud!~bud@user/bud
gnome icons. fixedsys/GO Mono fonts

1624020323
bud!~bud@user/bud
i haven't riced sublime since the update, but i will soon.

1624020354
bud!~bud@user/bud
oh, and Amiga Workbanch 2.1 mouse cursor.

1624020626
bud!~bud@user/bud
while (i <= 10) : (i += 1) {

1624020628
bud!~bud@user/bud
https://0x0.st/-9cf.png

1624020641
bud!~bud@user/bud
im not sure i get how that works.

1624020697
bud!~bud@user/bud
is the stuff inside the curly brackets the continue?

1624020709
bud!~bud@user/bud
or (i += 1) ?

1624020723
bud!~bud@user/bud
either way i don't get how it count like that.

1624020738
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
go mono looks so fancy and sophisitcated

1624020788
bud!~bud@user/bud
yeah, its by far the best thing to come from google.

1624020802
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the loop's counting from 1 to 10 with step 1, the part after the : is executed after every loop iteration

1624020858
oats!~thomas@user/oats
go mono looks.... old to me, idk lol

1624020870
oats!~thomas@user/oats
looks like something you'd see in an experimental operating system from the 90s

1624020884
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I've recently switched to JetBrain's mono as it's a bit narrower and taller than usual

1624020892
oats!~thomas@user/oats
ACTION <3 Iosevka

1624020895
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
that's part of the appeal

1624020924
kiedtl!~kiedtl@kisslinux/kiedtl
I'm trying to have a [_][]u8 (declared as [_][]u8{"foo","barbaz","foobarbaz"}), but the compiler keeps insisting that the strings are *const [<size>:0]u8... How do I force a coercion?

1624020926
bud!~bud@user/bud
so, 0 < 10; sum = 0; print 0; i = 1; 1 < 10; sum = 1; print 1; i = 2

1624020939
bud!~bud@user/bud
but why is not 2 (and 4 .. ) printed?

1624020952
kiedtl!~kiedtl@kisslinux/kiedtl
1-

1624020954
kiedtl!~kiedtl@kisslinux/kiedtl
oops

1624021051
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the sum is {0,1,1+2,1+2+3,1+2+3+4,...}

1624021062
bud!~bud@user/bud
ahh

1624021099
bud!~bud@user/bud
ACTION facepalm

1624021155
bud!~bud@user/bud
i think i got confused by the text "while with continue expression", is continue expression the official lingo?

1624021287
oats!~thomas@user/oats
yup

1624021301
bud!~bud@user/bud
aha, zig only uses for to itereate over elements. now : (), makes sense.

1624021372
bud!~bud@user/bud
i was thinking why not just add that stuff to the loop body, but you kind of want it on the same line. ok cool.

1624021435
bud!~bud@user/bud
would love to read/watch/hear reasoning for not doing the good ol' for (val;expr;act) thing.

1624021554
kiedtl!~kiedtl@kisslinux/kiedtl
it's a bit error prone

1624021557
oats!~thomas@user/oats
bud, it respects "continue", that's why it's kinda separate

1624021624
kiedtl!~kiedtl@kisslinux/kiedtl
I really do wish that there was a 'let' expressiong, i.e., let (<value>) |x| while (x < foobar) : (x += 1) { ... }

1624021716
oats!~thomas@user/oats
what would that do?

1624021737
oats!~thomas@user/oats
is that a lisp-style `letb?

1624021741
oats!~thomas@user/oats
*`let`?

1624021746
kiedtl!~kiedtl@kisslinux/kiedtl
yeah

1624021752
bud!~bud@user/bud
isn't that a beatles song?

1624021773
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
(let ((it 0xb)))

1624021777
bud!~bud@user/bud
`letb `letb, speaking words of wisdom: `letb

1624021782
oats!~thomas@user/oats
lol

1624021794
oats!~thomas@user/oats
lol

1624021801
oats!~thomas@user/oats
I don't see the need for `let` in imperative langs

1624021828
kiedtl!~kiedtl@kisslinux/kiedtl
Why not? It means that iterators and counters don't have to be declared in the outer scope of a while or for loop.

1624021830
oats!~thomas@user/oats
you can just introduce a new block and var

1624021837
kiedtl!~kiedtl@kisslinux/kiedtl
Yes, but its clunky.

1624021857
kiedtl!~kiedtl@kisslinux/kiedtl
I mean, we could rip out for() any day and go "but while() is good enough !"

1624021921
oats!~thomas@user/oats
I very rarely end up using c-style `for (;;;)` iteration in zig, I guess it's just not something that bothers me lol

1624021942
kiedtl!~kiedtl@kisslinux/kiedtl
Wait, Zig has C-style iteration?

1624021954
oats!~thomas@user/oats
no

1624021959
kiedtl!~kiedtl@kisslinux/kiedtl
oh, I see what you mean

1624021972
oats!~thomas@user/oats
I mean like the comparable, new variable, condition, increment

1624021979
kiedtl!~kiedtl@kisslinux/kiedtl
ye

1624021995
kiedtl!~kiedtl@kisslinux/kiedtl
oats: it does bother me a lot though -- my code uses iterators a lot :C

1624022003
oats!~thomas@user/oats
fair enough :/

1624022014
kiedtl!~kiedtl@kisslinux/kiedtl
Also, I tend to do a lot of iteration over multi-dimensional arrays, where it gets even more annoying :V

1624022033
oats!~thomas@user/oats
why can't you use slices and `for` there?

1624022079
kiedtl!~kiedtl@kisslinux/kiedtl
I do occasionally need to rewind and redo a row or so

1624022106
kiedtl!~kiedtl@kisslinux/kiedtl
But now that I think of it, you're right -- I could be using for() more than I am

1624022112
kiedtl!~kiedtl@kisslinux/kiedtl
dunno why I didn't think of that :v

1624022134
oats!~thomas@user/oats
hehe

1624022274
bud!~bud@user/bud
>"variables which are snake_case, functions are camelCase"

1624022300
bud!~bud@user/bud
i just tried a camelCase variable it worked. is this just like soft rules?

1624022326
kiedtl!~kiedtl@kisslinux/kiedtl
Thankfully yes

1624022341
bud!~bud@user/bud
nice

1624022375
kiedtl!~kiedtl@kisslinux/kiedtl
Hopefully the compiler won't start slathering you with warnings anytime soon 'waaaa theres no underscore in the variable name !!'

1624022401
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
the good thing is that the compiler has no warnings at all

1624022407
kiedtl!~kiedtl@kisslinux/kiedtl
Though we are going to get compile errors for unused functions/vars in the stage2 compiler

1624022412
kiedtl!~kiedtl@kisslinux/kiedtl
TheLemonMan: is that a good thing?

1624022414
bud!~bud@user/bud
nice, i am a heavy sPOngEBoBcASe user

1624022427
oats!~thomas@user/oats
inb4 underscores in function names become errors

1624022434
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
^

1624022441
oats!~thomas@user/oats
bud, hah

1624022511
bud!~bud@user/bud
hmm, seriously though, i somewhat recently started using snake case everywhere, i need to think about that.

1624022518
kiedtl!~kiedtl@kisslinux/kiedtl
oats: that'd be dumb -- I regularly mark "internal" utility functions specific to another public function with an underscore, i.e., '_frobnicateTheFooBars()'

1624022591
bud!~bud@user/bud
and function names getLongFunctionNameFromLazyProgrammer sometimes hard to read..

1624023403
bud!~bud@user/bud
god damnit, my system-ui hack doesn't work with latest version of vivaldi (chrome?) anymore.

1624023423
bud!~bud@user/bud
https://0x0.st/-9cd.png , and zig uses system-ui in official docs.

1624023460
bud!~bud@user/bud
you have no sympathy for those who uses a fixed size system ui font. none ;;

1624023578
bud!~bud@user/bud
maybe today, is the day, where i properly research who and how the system-ui trend started.

1624023614
bud!~bud@user/bud
and why im the only one who think its a terrible thing, sorry, kind of off topic. don't reply, i don't want to discuss this.

1624023722
bud!~bud@user/bud
also its chrome/vivaldi/whatever that doesn't respect fontconfig (firefox does), where i force the font in question to always be displayed at a certain size.

1624023758
bud!~bud@user/bud
god damnit, i kick my self

1624023929
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
that was weird

1624024251
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
how do I get a `[*]u8` value from a `[]u8` value? `&v[0]` gives a `*u8` while `&v` gives a `*[]u8`

1624024266
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
marler8997, the insert/swap/remove/reinsert dance is quite obscure IMO, the previous version was much clearer to reason about

1624024284
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
flyx[m], slice.ptr

1624024311
marler8997!~marler899@204.229.3.4
the previous version wasn't correct since it didn't cancel the IO events

1624024331
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
thx

1624024331
marler8997!~marler899@204.229.3.4
I'm open to suggestions

1624024355
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
on error? on exit?

1624024370
marler8997!~marler899@204.229.3.4
on error yes

1624024423
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
isn't the defer kicking in that case?

1624024456
marler8997!~marler899@204.229.3.4
yes, oh I suppose I don't know what you mean by "previous version"

1624024527
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
yeah, finding which one is the previous version is quite hard

1624024538
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
and github collapses all the force-pushed commits, ugh

1624024545
marler8997!~marler899@204.229.3.4
I've probably pushed 20 different versions of this function, I keep finding bugs or odd use cases, it's quite hard to get right

1624024629
marler8997!~marler899@204.229.3.4
in any case, a comment at the removal of the wait_object could help, but if you have a better solution I'd prefer that :)

1624024660
marler8997!~marler899@204.229.3.4
/ we remove the object here so the defer block has the correct list of handles to cancel

1624024714
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
hmm, let me go trough the code once again to make sure we're on the same page

1624024758
marler8997!~marler899@204.229.3.4
at one point I had decided the "cancel logic" was too complex and decided to make the overlapped data part of the struct instead.  but then I decided I didn't want to pin ChildProcess and you brought up a case where that might not actually work correctly as well

1624025034
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
hmm, I'm not really understanding what's not being canceled if the wait_object removal is put back into the BROKEN_PIPE case

1624025084
marler8997!~marler899@204.229.3.4
it's the opposite, we don't want to cancel the IO in lines 322 to 326

1624025225
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
does it matter? when GetOverlappedResult is called and it doesn't return an error we can safely say the i/o event is done, until the loop is kickstarted again with a ReadFile

1624025260
marler8997!~marler899@204.229.3.4
The IO event is dont as soon as the handle pops from WaitForMultipleObjects

1624025274
marler8997!~marler899@204.229.3.4
so that's when I remove it, which makes all code paths correct

1624025379
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
WaitForMultipleObjects tells you when the object was triggered, it's WaitForMultipleObjects that tells if the i/o are completed (according to MSDN)

1624025428
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I understand what you're doing tho, makes sense but requires a comment for the poor souls that are going to touch that code in future

1624025466
marler8997!~marler899@204.229.3.4
yes I was going to add a comment since if it's not clear to you then it's not going to be clear to others :)

1624025500
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I tried to keep the code structure similar to the poll-like code path where we progressively remove the dead fds from the poll set

1624025550
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
what about "// Remove the completed event from the wait list" ?

1624025562
marler8997!~marler899@204.229.3.4
sure works for me

1624025646
oats!~thomas@user/oats
lisp tought me to love long function names lol

1624025657
oats!~thomas@user/oats
if it describes *exactly* what it does, I love it

1624025665
oats!~thomas@user/oats
oh, I was scrolled way up

1624025695
oats!~thomas@user/oats
kebab-case-best-case

1624025898
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
a laptop case made of kebab? that's a nice idea

1624029201
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
apart from switch having nicer syntax, is there any difference between a switch expression and a long if statement? (apart from the expression/statement difference of course)

1624029221
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I'm thinking mainly in terms of performance characteristics. I'm aware that it's possible to use a switch outside of a function but not an if

1624029381
dutchie!~dutchie@user/dutchie
switches are checked for exhaustiveness

1624029406
dutchie!~dutchie@user/dutchie
not sure why you think ifs aren't expressions and can't be used outside of functions, you can do both

1624029416
dutchie!~dutchie@user/dutchie
in terms of performance i don't know if there's any differenect

1624029419
dutchie!~dutchie@user/dutchie
difference*

1624030780
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
dutchie: oh whoops you're right, ifs are expressions. I did know that but forgot. I didn't know that ifs can be used outside of cuntions

1624030782
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
functions

1624030909
dutchie!~dutchie@user/dutchie
https://github.com/ziglang/zig/blob/master/lib/std/zig/parser_test.zig#L3896 you can use it in all sorts of fun places

1624030929
dutchie!~dutchie@user/dutchie
(as long as the condition is comptime known)

1624031235
motiejus!~motiejus@2001:470:69fc:105::38fb
re. yesterday's `zig c++` hanging investigation: bingo, lslocks shows an obvious deadlock: https://github.com/ziglang/zig/issues/9139#issuecomment-864112916

1624033245
andrewrk!~andrewrk@mail.ziglang.org
motiejus, thanks! I think those stack traces will lead to the solution

1624036117
andrewrk!~andrewrk@mail.ziglang.org
one thing that is confusing to me about that cache deadlock is that all 4 of those file paths which are being called with flock() are unique

1624036297
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, I'm back, lets try to fix all the errors

1624036301
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
gotta catch 'em all

1624036351
andrewrk!~andrewrk@mail.ziglang.org
that's the spirit

1624036394
andrewrk!~andrewrk@mail.ziglang.org
g-w1, did my errdefer improvements solve the problem without the todo hack?

1624036461
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
haven't tried yet, found a bunch of bugs in control flow stuff that I fixed and am catching more errors right now

1624036466
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i'll rebase when I finish

1624036477
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
fn constCount(comptime cb: *const CountBy, comptime unused: u32) void {

1624036478
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice

1624036561
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also the plan9 abi thing seems like it should be trivial \o/ just add something new here https://github.com/ziglang/zig/blob/master/src/codegen.zig#L4244-L4280

1624036562
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
motiejus, can you run and upload the lsof output for every lock file?

1624036600
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
I suspect each process is cache-blocking the other by opening the same manifest before the other

1624036644
andrewrk!~andrewrk@mail.ziglang.org
in that case, one of them would win right?

1624036699
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
not if they follow a criss-cross pattern, eg. T1 acquires X, T2 acquires Y, T1 tries to acquire Y, T2 tries to acquire X

1624036718
andrewrk!~andrewrk@mail.ziglang.org
hm. perhaps having to do with sub-Compilation objects

1624037039
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
do function params named _ count as idents?

1624037060
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i assume no

1624037847
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
>400 errors, but I figured out how to use vim macros to automate a lot of it

1624038196
motiejus!~motiejus@2001:470:69fc:105::38fb
TheLemonMan added lsof output

1624038214
motiejus!~motiejus@2001:470:69fc:105::38fb
ah, for every lock file. I added pids

1624038240
motiejus!~motiejus@2001:470:69fc:105::38fb
which lock files are you referring to?

1624038253
motiejus!~motiejus@2001:470:69fc:105::38fb
TheLemonMan: the ones in `createFileZ`?

1624038271
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
no that's fine

1624040700
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, we should add --ast-check to the format command in zig.vim

1624040705
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
then it will be very nice

1624040713
freshcoffee!~fresh@user/freshcoffee
motiejus: do you have to run the build procedure many times before deadlock happens?

1624040747
freshcoffee!~fresh@user/freshcoffee
oh nvm I see "iterations" comments in issue

1624041013
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i assume this is meant to be x: u8? pub fn cap_valid(u8: x) bool {

1624041217
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
lol

1624043466
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, pushed the changes, trying errdefer rn

1624043650
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it fixes it andrewrk!

1624043658
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
pushed

1624043761
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
wtf

1624043763
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
unbased

1624043779
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
rebased

1624044332
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its kinda a lot to review, sorry

1624047575
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, the abi thing is not as simple because test.zig:3:8: error: TODO implement calling with parameters in memory

1624047610
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but it gives a nice hint:  // Here we need to emit instructions like this: // mov     qword ptr [rsp + stack_offset], x

1624054196
freshcoffee!~fresh@user/freshcoffee
it could be useful if we conveyed some llvm details to comptime zig; enum/flags indicating if debug/release, assert-enabled, and a version string, compelling case is:

1624054284
freshcoffee!~fresh@user/freshcoffee
under llvm-assert I'm seeing `zig build test` -> `tools/gen_spirv_spec.zig` fail with #8442 and would like to disable it just when using llvm-assert

