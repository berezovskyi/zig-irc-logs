1615334540
tdeo
there's writeByteNTimes in std.io.Writer

1615334554
tdeo
i think the indenting stream isn't in std anymore

1615340224
mikdusan
re: zig-bootstrap: macos 10.13 cannot build with `zig cc/c++`; silent bad-linking with lld makes first-exec fail; and tried with no -target/-mcpu and at least this time bad-linking isn't silent. but in the end, same result: no joy. I think this has regressed.

1615340357
andrewrk
bummer

1615340370
andrewrk
I'll look into reporting a release blocker for this

1615340501
mikdusan
I have one more thing to do before that if you don't mind

1615340563
mikdusan
i'll steal the zig-bootstrap HEAD build, and run it against llvm11 and zig master. if this succeeds, I'm more comfortable pointing at llvm12 as regression

1615352041
siraben
anyone aware of compiling LLVM to Z80?

1615353694
yeti
I tried long ago and it lacked a linker back then.   the same author has his LLVM in a different repo now but I don't know what might have improved and how it might relate to zig (if z80 is noe in LLVM's standard repo?)

1615353717
yeti


1615355648
mikdusan
llvmorg-12.0.0-rc3 tagged

1615355705
mikdusan
it has lemon's AArch64 f16 patch

1615387197
Raito_Bezarius
is there something I can do to make myself compatible with std.debug in my environment (preboot UEFI) ?

1615390049
superdump
i just watched a video about zig from 2018 and at the end, during the Q&A, someone asked what people you were looking for to get involved. one section mentioned game developers to perhaps implement something like GLFW/SDL that is nice to use in zig. did anyone show up and do that? what windowing / input libraries are available that you might recommend looking at? also, is there a good place to look for zig libraries?

1615390123
superdump
i've been writing a lot of rust in my spare time, and i really like having cargo and crates.io. i appreciate that that would / could be considered significant feature creep for zig and so you may not want to deal with it. still, perhaps someone else has done it already...?

1615390155
dutchie
package manager is next on the list after the self-hosted compiler has done, though there have been a lot of discussions about its design already

1615390241
dutchie
there are a few out there already, e.g.

1615390293
dutchie
i don't know about windowing/input/etc i'm afraid

1615391102
danyspin97
I am starting a new project in zig

1615391112
danyspin97
should I use master or 0.7.1 version?

1615391125
danyspin97
I haven't followed the development much lately :(

1615391167
ikskuh
i would use master

1615391177
ikskuh
as there is a release pretty soon(ish)

1615391317
danyspin97
nice, thaks!

1615391319
danyspin97
thanks*

1615392100
g-w1
will it be at the same time as llvm 12?

1615392583
Nypsie
Usually a little after (2-4 weeks depending on bugs)

1615392631
tnorth_
Hello, is there a way to prevent zig test to consume std.debug.print() messages? It would be nice for testing (during dev) to be able to print out some values

1615392670
g-w1
what do you mean with consume?

1615392690
tnorth_
they are not displayed on stdout/stderr

1615392717
g-w1
maybe try std.log.something?

1615392750
g-w1
I think it redirects it though

1615392778
semarie
\n at end of line ? it could depend how the buffering is done

1615392802
tnorth_
semarie: oh that works indeed

1615392808
tnorth_
thanks

1615392850
g-w1
you can use std.log.something also since it auto inserts \n

1615392950
tnorth_
g-w1: ok I didn't know that, thanks

1615394496
enedil
Hello, I searched a bit and I didn't find an answer. I get this error: `expected type '*c_void', found '?[]align(4096) u8'`. How can I cast it? I need to return a *c_void, as it is a function to be used from C

1615394506
enedil
I'm beginner to Zig, sorry if it's obvious

1615399300
danyspin97
can I compile a zig program from within a zig executable?

1615399331
danyspin97
i.e. have the build step inside a zig source file

1615399344
g-w1
you mean use the compiler as a library?

1615399352
danyspin97
yea

1615399358
g-w1
no

1615399369
g-w1
you could invoke zig on the cli

1615399418
danyspin97
i have to pass a lot of compile time switches

1615399427
danyspin97
so using it as libray would have been better

1615399520
ifreund
are you aware of the zig build system?

1615399563
danyspin97
ifreund: do you mean the internals or the build.zig?

1615399578
g-w1
what is your use case?

1615399616
ifreund
^^^^

1615399633
danyspin97
generating an initramfs

1615399656
danyspin97
there is a bootstrap.zig that gets compiled and a init.zig that remains as source

1615399699
danyspin97
the bootstrap program creates an init executable based on some options and generate an ad-hoc executable

1615399721
g-w1
is this at build-time?

1615399739
danyspin97
not at zig build time

1615399769
danyspin97
but later

1615399788
g-w1
maybe you could use the std.build still? not sure

1615399804
danyspin97
yea, that's what I hope

1615399868
danyspin97
the shared libraries to use depends on arguments to the bootstrap executable

1615399971
g-w1
what time is it built? at compile time or runtime?

1615399978
g-w1
because maybe you could make it a different step in build.zig?

1615400149
danyspin97
runtime then

1615400250
s-ol
if I allocate using const x = allocator.alloc(T, 5), can I shrink that slice and free it e.g. with allocator.free(x[0..3]) ?

1615400266
s-ol
or is the allocator allowed to actually use the length of the passed slice

1615400434
ifreund
s-ol: the allocator does use the length of the slice

1615401393
s-ol
ok, thanks

1615402048
txdv
Hi guys, how do I convert []u8 to [c*]const u8?

1615402380
txdv


1615402455
g-w1
maybe the slice.ptr?

1615402471
g-w1
if that does not work try @ptrCast([c*]const u8, slice.ptr)

1615402696
ifreund
slice.ptr works

1615402719
ifreund
if C expect the pointer to be null-terminated you may need to take extra steps though

1615402851
txdv
other languages support embedding null into the string "x: {} y: {} \0"

1615402865
g-w1
you want \x00 for null

1615402885
ifreund
txdv: also, string literals in zig are null terminated by default

1615402894
ifreund
they are of type *const [N:0]u8

1615402903
ifreund
where N is the length

1615402938
txdv
i'm using bufPrint on a predefined fixed sized buffer

1615402950
ifreund
txdv: bufPrintZ

1615402989
FrancescoAlem
Hallo!!

1615402996
ifreund
o7

1615403002
txdv
Hallo

1615403022
FrancescoAlem
First time in this chat, and also just learned about Zig yesterday

1615403038
g-w1
niice! hello

1615403094
FrancescoAlem
What brought you guys to Zig?

1615403112
txdv
Cross compilation to like everything

1615403159
g-w1
readability

1615403226
txdv


1615403284
FrancescoAlem
Both seem like excellent points :D, I already watched that talk, it was extremely fun and interesting

1615403382
FrancescoAlem
I'm having a tough time learning how to leverage the std-lib, are there guides focusing on using Arrays HashMaps and Data Structures, and maybe creating them?

1615403442
Gliptic
FrancescoAlem:

1615403579
FrancescoAlem
Thank you! Didnt know that website :)

1615403675
txdv
Also I like that you can just include C libs and access them without the need for writing this translation layer

1615403694
ifreund
I wanted to write a wayland compositor but didn't really want to maintain a large C codebase and rust wasn't an option because I wanted to use wlroots

1615403695
shadeops
I've just started learning as well (as part of club at work where everyone picks a different lang to solve a problem).  In addition to ziglearn.org, I've learned a lot just by reading the tests within the std-lib. For example:

1615403701
txdv
like in C# or Crystal where you to define the C interface with the language constructs provided by the language

1615403724
txdv
or worse, Java, which has this awkward jni or jna library

1615403740
ifreund
Zig is perfect as it's a huge step up in safety over C while having the best C interoperation I've had the pleasure to use

1615403756
g-w1
+1 for reading the stdlib tests

1615403763
FrancescoAlem
Recently I got interested again in low level languages, so I subscribed to exercism, and I did the rust track... And very soon I learned that Rust promise of safe low level code is a big lie ahahah, as soon as I read the Zig manifesto, and the comptime features I was hooked.

1615403772
ifreund
Good zig bindings are strictly better than the C APIs they wrap

1615403792
ifreund
assuming the api doesn't rely on stupid macro shit

1615403794
Gliptic
big lie?

1615403813
ifreund
low level code is inherently unsafe

1615403828
ifreund
rust is about building abstractions over that

1615403888
ifreund
which in my experience causes much more fricition than it's worth and causes tons of accidental complexity

1615403916
ifreund
also unsafe rust is waaay more unsafe than C in a lot of ways

1615403930
companion_cube
is it? :)

1615403939
companion_cube
(more limited, I'd say, tbh)

1615403990
ifreund
companion_cube: there's no spec, and most of the conversation I see about unsafe rust is debates about whether something is UB or not

1615404014
ifreund
it's also several orders of magnitude more complex than C

1615404040
companion_cube
just like C, but there's a spec-ish (the rustonomicon)

1615404045
FrancescoAlem
Exactly ifreund that is what I meant with 'big lie', at some point (in Rust) you start writing extremely involved code simply because the compiler will not accept safe solutions that do not adhere to the rust model of memory management

1615404052
companion_cube
doesn't seem to be more language lawyering than in C

1615404072
companion_cube
(the tricky part imho is that RAII becomes dangerous when you have pointers)

1615404094
ifreund
you always have pointers in low level code

1615404192
companion_cube
FrancescoAlem: sometimes you can use a tiny bit of unsafe and it works well

1615404204
companion_cube
(I have a rust codebase where there's one unsafe to keep 2 &mut inside the same array)

1615404217
companion_cube
the rest is safe 🤷

1615404221
Gliptic
2 &mut to the same thing?

1615404234
companion_cube
to different slots of the same array

1615404269
companion_cube
(with a `assert_ne!(i,j)` for the indexes, just to be sure :p)

1615404277
Gliptic
split_mut_at not good enough? :)

1615404287
Gliptic
*split_at_mut

1615404314
Gliptic
I guess it's a specialized version of that

1615404410
companion_cube
yeah

1615404419
companion_cube
simpler to do a bit of unsafe than to dance with split_mut_at :p

1615404475
ifreund
just wait till the cargo geiger crowds finds your project :P

1615404580
companion_cube
heh, yeah… let them come ⚔

1615404874
fengb
... I was trying to click that x

1615405199
txdv
How do I force a conversion from c_int to u8?

1615405219
g-w1
@truncate

1615405233
g-w1


1615405284
ifreund
or @intCast() depending on what behavior you want

1615405307
ifreund
is the c_int guarenteed to fit inside the u8?

1615405319
ifreund
the value of the c_int I mean

1615405362
txdv
@intCast to convert c_int to u32 and then @truncate

1615405385
txdv
This is actually nice that these separate and not like in C

1615405442
ifreund
why the two steps?

1615405548
ifreund
the difference is that if you do it that way, you won't get a panic in safe build modes if the c_int's value is positive but greater than 255

1615405584
txdv
I like it that these are two separate steps

1615405627
g-w1
I think it 1

1615405841
companion_cube
ifreund: I think rust is good for "systems" that is not that low level (i.e. not really touching hardware stuff, say)

1615405858
companion_cube
more like high performance database, networking, tools… but not necessarily a bootloader

1615406200
txdv
with C you have segfaults all the time, with zig it seems like it is not the case

1615406295
g-w1
you can, but you understand a lot more why you get them

1615406522
txdv
How is this construct called: struct { buffer: [1024]u8, pub fn func() u8 { ... } } ?

1615406541
g-w1
the struct or the function on it?

1615406563
txdv
the function on it

1615406605
g-w1
I like to call it a method but zig calls it a BoundFn formally

1615406685
txdv
Not much about BoundFn in the docs

1615406785
g-w1
its not that complicated. if you call it on an instance of a struct it does @TypeOf(s).funcname(s) iirc and if called on a type, well that is self explanitory you just dom96 StructType.funcname()

1615406790
g-w1
s/dom96/do

1615418246
vent
How can I coerce a []const u8 to a []u8, so that I can pass it as an argument that's expecting a []u8?

1615418469
ikskuh
you cannot

1615418478
ikskuh
"[]const u8" means that the memory is immutable

1615418487
ikskuh
(at least for you)

1615418491
ikskuh
and []u8 requires mutable memory

1615418507
ikskuh
so you either need to dupe the memory with something (local array, allocator, ...)

1615418634
vent
Ah, that makes sense. Maybe that's not my problem then. Basically, I want my function to take in a []u8, so that I can mutate the data in-place. However, when I try and pass in a string that I've declared with `var`, the compiler complains about recieving a `*const [5:0]u8` instead of a `[]u8`.

1615418684
ikskuh
yep

1615418688
ikskuh
var str = "foo";

1615418691
ikskuh
is only a pointer

1615418709
ikskuh
if you check the type of str with @compileLog(@TypeOf(str))

1615418712
ikskuh
you see that it is

1615418719
ikskuh
var str: *const [3:0]u8 = "foo";

1615418725
vent
Ah, and so it's the pointer that's var? Not the data it's pointing to?

1615418791
ikskuh
yep

1615418798
ikskuh
the string is still constant memor

1615418801
kameliya[m]
yep. you can change what the var points to, but not what it's pointing to (since its type is a const pointer)

1615418804
ikskuh
you can do this:

1615418815
ikskuh
var str_buf: [3]u8 = "foo".*; // dereference!

1615419280
vent
Okay, so I've initialized it using that ^. However, it seems that I'm still not able to mutate the string contents from inside of the function I'm passing the string to. Here's what I've got:

1615419319
ikskuh
you now don't have a pointer anymore (msg isn't a pointer but an array value)

1615419323
ikskuh
so you need to pass &msg

1615419428
vent
Oh woops, there was an error in there that I missed when simplifying my code, try refreshing that if you haven't already

1615419482
vent
Okay, so I'm passing in &msg, and I've changed the parameter to `*[5]u8`.

1615419492
ikskuh
nah, just keep []u8 as the parameter type :)

1615419499
ikskuh
pointer-to-array coerces to slice

1615419551
vent
Hmmm, still the same error message. "Cannot assign to constant"

1615419590
kameliya[m]
on which line? maybe a pointer needed in the for loop?

1615419606
kameliya[m]
like `for (msg) |*c| { c.* += 15; }`

1615419611
ikskuh
^

1615419615
vent
Oh the line where I'm incrementing `c` by 15

1615419631
vent
Yep, that did it!

1615419637
kameliya[m]
nice!

1615419674
vent
Fantastic stuff. Yeah, pointer in the for loop, and dereferencing `c` works. Thanks ikskuh and kameliya[m]!

1615419874
ikskuh
vent: what is your background and what brought you to zig?

1615419977
vent
I'm coming from mostly Rust and C++, bit of C, and some embedded Rust/C.

1615419995
ikskuh
ah, so Zig should be a quite enjoyable experience then :)

1615420035
vent
I decided to learn Zig only a day or so ago, I'm loving it so far. I liked using C a lot, and as far as I can tell Zig seems to have all of the benefits of C without any of the drawbacks.

1615420050
ikskuh
yep!

1615420058
ikskuh
zig is really well-designed :)

1615420153
vent
It's really great, the metaprogramming is so cool. I love how the refined it all is. What would be several different systems in other languages (core languge, generics, macros, the build system, etc...) are all just one system in Zig. It's great.

1615420186
ifreund
and it's not even 1.0 yet, things will get even better :)

1615420229
andrewrk
there has been an explosion of interest in the last week, it's been a wild ride

1615420235
ikskuh
what ifreund says

1615420256
vent
Only thing I'm kind of missing are ranges like you'd get in Rust, something like: (1..=100). Not sure if that's missing from the language or not.

1615420352
vent
Since with those, syntax like this would be pretty handy and readable:

1615420417
vent
Whereas as I currently understand it, you'd use a while loop. Which leaves the index on it's own line and in the same scope as the while loop. Correct me if I'm wrong though!

1615420474
kameliya[m]
indeed -- this kind of thing comes up fairly often in discussions (lots of issues, e.g.

1615420476
kameliya[m]
nothing settled yet

1615420489
kameliya[m]
and yes, you got that right.

1615420647
vent
Ah, yeah I actually read through those 2 issues when looking this up. Hopefully something will be added before 1.0. I think if the implementation of ranges is too tricky, memory-wise, I think a way to initialize your index in the same scope as a while loop would go a long way.

1615420708
kameliya[m]
yeah, agreed! it would clean up a lot of code, i think.

1615420740
vent
But besides that, I'm loving the language. Need to get back into the rhythm of doing things in a C-like way though, as you can probably tell! I've been too privileged by Rust recently, and I'm a bit rusty on my C skills.

1615420751
vent
That pun was not indended ^

