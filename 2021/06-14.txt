1623628869
lokathor!~lokathor@75-174-104-225.boid.qwest.net
see i knew it had to be something simpler because i was searching all over

1623628883
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
std.mem is pretty useful

1623628933
lokathor!~lokathor@75-174-104-225.boid.qwest.net
yeah, when you understand how to read it

1623628962
lokathor!~lokathor@75-174-104-225.boid.qwest.net
okay so... what's the type

1623628967
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
u8

1623629022
lokathor!~lokathor@75-174-104-225.boid.qwest.net
oh, right, so it means element type

1623629028
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes

1623629041
lokathor!~lokathor@75-174-104-225.boid.qwest.net
and then, how do i know if it didn't find anything?

1623629104
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what is the return type?

1623629122
lokathor!~lokathor@75-174-104-225.boid.qwest.net
fn indexOf(comptime T: type, haystack: anytype, needle: anytype) anytype

1623629126
lokathor!~lokathor@75-174-104-225.boid.qwest.net
according to the docs

1623629151
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
docs == terrible

1623629153
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
read the source

1623629166
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
pub fn indexOf(comptime T: type, haystack: []const T, needle: []const T) ?usize {

1623629184
lokathor!~lokathor@75-174-104-225.boid.qwest.net
i see

1623629190
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
use this if you want http://ratfactor.com/zig/stdlib/ or this https://g-w1.github.io/zigdoc/mem.zig

1623629205
lokathor!~lokathor@75-174-104-225.boid.qwest.net
are these better docs generators?

1623629218
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i made the latter, and ratfactor made the first based on mine

1623629220
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
imo they are better

1623629238
lokathor!~lokathor@75-174-104-225.boid.qwest.net
that's a lot of yellow :3

1623629272
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i have learned that I am not the best at ui design :P

1623629391
lokathor!~lokathor@75-174-104-225.boid.qwest.net
uh, crap, what's the way to unpack a ?usize in zig again

1623629393
lokathor!~lokathor@75-174-104-225.boid.qwest.net
i've only used orelse

1623629401
lokathor!~lokathor@75-174-104-225.boid.qwest.net
do ya switch on it

1623629412
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
orelse

1623629416
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or .?

1623629470
lokathor!~lokathor@75-174-104-225.boid.qwest.net
the language docs say it's `if (expr) |binding| {`

1623629570
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you can do that too

1623629701
lokathor!~lokathor@75-174-104-225.boid.qwest.net
does zig have any sort of closure sort of thing?

1623629714
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
not really

1623629719
lokathor!~lokathor@75-174-104-225.boid.qwest.net
dag

1623629722
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
see issue 1717

1623629729
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but i don't think you are allowed to capture vars

1623629758
lokathor!~lokathor@75-174-104-225.boid.qwest.net
that's deeply unfortunate

1623629761
lyhokia!~lyhokia@2001:da8:801d:f334:1965:d8a9:7e74:15ad
Zig is imperative, why you want closure

1623629767
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
well, right now, the stage1 compiler does let you for comptime vars, but the stage2 compiler does not

1623629775
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that is a bug in the stage1 compiler though

1623629829
lokathor!~lokathor@75-174-104-225.boid.qwest.net
lyhokia, being imperative and supporting closures aren't really related to each other?

1623629862
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what do you want closures for?

1623629881
lyhokia!~lyhokia@2001:da8:801d:f334:1965:d8a9:7e74:15ad
I thought closure mostly appears in those functional ones 

1623629903
lokathor!~lokathor@75-174-104-225.boid.qwest.net
what i want is to have a function that can load all the GL function pointers, but on windows you need to check one system function and then if that fails you're supposed to check in a dll you loaded at runtime as a fallback

1623630006
lokathor!~lokathor@75-174-104-225.boid.qwest.net
so if i were in Rust, i'd write a loading function that takes a general `gl_get_proc_address` function and then loads that way, and on linux you'd pass glxGetProcAddress and on win32 you'd pass a closure that calls wglGetProcAddress or GetProcAddress from opengl32.dll as a fallback

1623630138
lokathor!~lokathor@75-174-104-225.boid.qwest.net
but the "good" interface for this is like... "give me a fn from function names to function pointers, and i'll fill in a struct with all the GL function pointers for you"

1623630703
jcmoyer!~jcmoyer@user/jcmoyer
wouldn't a normal function pointer work just as well in that particular example?

1623630853
lokathor!~lokathor@75-174-104-225.boid.qwest.net
so wglGetProcAddress is an extern function that just takes the name, but GetProcAddress takes a name and also a module handle. so a plain function pointer wouldn't have the module handle

1623631042
jcmoyer!~jcmoyer@user/jcmoyer
oh I see, that does make things a bit trickier

1623631193
freshcoffee!~fresh@user/freshcoffee
g-w1: looks like the re-run of drone ci already passed "cmpxchg on a global variable"

1623631253
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
fun!

1623631258
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i guess it was just a weird fluke

1623631266
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also formatting check got merged!

1623631302
freshcoffee!~fresh@user/freshcoffee
is zig truncating the test lines? sucks if that's the case

1623631331
freshcoffee!~fresh@user/freshcoffee
the ellipsis

1623631353
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think its the ci

1623631366
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
still sucks tho

1623631368
freshcoffee!~fresh@user/freshcoffee
hmm I see it on azure too

1623631381
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm

1623631397
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, yea it does do it

1623631400
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
            if (need_ellipse) {

1623632590
freshcoffee!~fresh@user/freshcoffee
ah output_buffer is static [100]u8 so 100-11 = 89 max chars and ellipses are appended

1623632608
lokathor!~lokathor@75-174-104-225.boid.qwest.net
var win_data_p: *WindowData = try std.heap.c_allocator.create(WindowData); *win_data_p = WindowData{}; // with these two lines it says "invalid left hand side to assignment"

1623632614
lokathor!~lokathor@75-174-104-225.boid.qwest.net
so how do i set my pointer?

1623632632
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah freshcoffee 

1623632661
freshcoffee!~fresh@user/freshcoffee
me thinks if in batch mode (no tty) then progress shouldn't limit

1623632757
freshcoffee!~fresh@user/freshcoffee
lokathor: win_data_p.* = WindowData{};

1623632765
lokathor!~lokathor@75-174-104-225.boid.qwest.net
oh it's like a field

1623641417
lokathor!~lokathor@75-174-104-225.boid.qwest.net
how do i say "if this number is 0 or if this pointer is null"

1623641434
lokathor!~lokathor@75-174-104-225.boid.qwest.net
zig is apparently unhappy with my use of the || operator

1623641449
lokathor!~lokathor@75-174-104-225.boid.qwest.net
oh it's the word or!

1623641452
freshcoffee!~fresh@user/freshcoffee
yup

1623641699
haze_!~haze@cpe-68-174-134-17.nyc.res.rr.com
does anyone have examples of custom build steps in build.zig

1623641713
haze_!~haze@cpe-68-174-134-17.nyc.res.rr.com
what in the world happened to my nick

1623641905
freshcoffee!~fresh@user/freshcoffee
what is your step going to do?

1623641930
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
upload a file to some server

1623641932
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
https://github.com/markfirmware/zig-vector-table/blob/239aefc4032b5ffaf689b39ac94d7aabd5938e57/build.zig#L304-L309

1623641934
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
im following this

1623642074
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
-gw2 told me about addSystemCommand

1623642212
ifreund!~ifreund@user/ifreund
haze: https://github.com/ifreund/river/blob/1fd8d4d828eda4edb7843d1ce4bbec10e566b3dd/build.zig#L200

1623642262
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
mfw zbs namespace

1623642296
ifreund!~ifreund@user/ifreund
zig build system, build would conflict with the mandatory build() function and std.build is too long :P

1623642714
freshcoffee!~fresh@user/freshcoffee
this doesn't shorten things but I feel like `std.build` -> `std.builder` would be a good rename

1623642783
freshcoffee!~fresh@user/freshcoffee
especially since `build.zig` file name has a very special meaning

1623642860
doublex__!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
also building, a la testing

1623642879
doublex!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
though I guess the latter is because test is a keyword

1623643143
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
another question: why isn't it possible to have a HashMap where the key is a Union type?

1623643146
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
that is backed by an enum*

1623643275
ifreund!~ifreund@user/ifreund
haze: I don't think it's impossible, you probably just need to provide your own hash function

1623643303
ifreund!~ifreund@user/ifreund
it looks like the std auto hash function thing only supports tagged unions

1623643326
freshcoffee!~fresh@user/freshcoffee
isn't that what haze asked for?

1623643330
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
oooh new master dogs pretty

1623643355
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
lets see if it works ifreund i remember it not, thats why i asked

1623643484
companion_cube!~simon@user/companion-cube
if it's a raw union, how do you hash or compare it?

1623643508
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
raw meaning c union?

1623643514
companion_cube!~simon@user/companion-cube
yes, untagged

1623643522
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
don't think you can

1623643525
ifreund!~ifreund@user/ifreund
companion_cube: maybe you can't, maybe you store the tag separately. It depends on the details 

1623643534
companion_cube!~simon@user/companion-cube
ah, ok

1623643541
companion_cube!~simon@user/companion-cube
but then how do you make a hashmap keyed on it?

1623643548
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
magic

1623643590
ifreund!~ifreund@user/ifreund
companion_cube: you could make a hashmap keyed on a struct { tag: Enum, data: UntaggedUnion };

1623643608
ifreund!~ifreund@user/ifreund
which the auto hash function wouldn't know how to handle but a custom one could

1623643623
companion_cube!~simon@user/companion-cube
ah I missed that "backed by an enum" applied to the keys

1623643628
companion_cube!~simon@user/companion-cube
right right.

1623643636
companion_cube!~simon@user/companion-cube
is this useful for anything but C interop?

1623643668
ifreund!~ifreund@user/ifreund
well, the self hosted compiler uses such structs for the ast and zir instructions

1623643678
companion_cube!~simon@user/companion-cube
why not tagged unions?

1623643680
ifreund!~ifreund@user/ifreund
there hasn't been any need to hash those yet

1623643723
ifreund!~ifreund@user/ifreund
companion_cube: because the tag is stored separately in memory

1623643729
ifreund!~ifreund@user/ifreund
struct of arrays style

1623643736
companion_cube!~simon@user/companion-cube
right

1623643758
companion_cube!~simon@user/companion-cube
ok, that's cool

1623643765
ifreund!~ifreund@user/ifreund
indeed :D

1623643780
lokathor!~lokathor@75-174-104-225.boid.qwest.net
for some unknown reason, wglChoosePixelFormatARB won't pick a pixel format

1623643782
companion_cube!~simon@user/companion-cube
is the untagged union big?

1623643795
companion_cube!~simon@user/companion-cube
(as in sizeof(), not number of cases)

1623643886
ifreund!~ifreund@user/ifreund
companion_cube: 8 byets

1623643891
ifreund!~ifreund@user/ifreund
for ZIR

1623643905
companion_cube!~simon@user/companion-cube
that seems tiny

1623643924
companion_cube!~simon@user/companion-cube
I wonder if the SOA trick is worth it for that :)

1623643926
ifreund!~ifreund@user/ifreund
some variants require more than that though and point to extra data in a separate array

1623643933
companion_cube!~simon@user/companion-cube
ah I see.

1623643974
ifreund!~ifreund@user/ifreund
companion_cube: SOA is not just to save memory, it also makes iterating over just the tags quicker

1623643988
ifreund!~ifreund@user/ifreund
which happens quite often

1623643990
freshcoffee!~fresh@user/freshcoffee
cacheline savvy

1623643991
companion_cube!~simon@user/companion-cube
it does?

1623644000
ifreund!~ifreund@user/ifreund
the more tags you fit in the cache the better

1623644015
ifreund!~ifreund@user/ifreund
if you are cluttering up the cache with the payload data, that makes things slow

1623644015
lokathor!~lokathor@75-174-104-225.boid.qwest.net
anyone happen to know of a git repo with a very small gl example for zig on windows?

1623644020
companion_cube!~simon@user/companion-cube
in what I know about compilers, it;s a lot of random access

1623644025
companion_cube!~simon@user/companion-cube
but cool if it works for zig

1623644041
companion_cube!~simon@user/companion-cube
anyway good night

1623644061
ifreund!~ifreund@user/ifreund
o7

1623645293
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ifreund unable to hash type void

1623645297
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
rofl

1623645533
ifreund!~ifreund@user/ifreund
haze: https://github.com/ziglang/zig/blob/86ebd4b975d2f1e01f468e06daab6e28c06f9719/lib/std/zig/ast.zig#L2427

1623645540
ifreund!~ifreund@user/ifreund
oops, bad paste sorry

1623645546
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
np

1623645548
ifreund!~ifreund@user/ifreund
https://0x0.st/-Lxm.diff

1623645573
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i don't think thats uhh

1623645576
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the problem

1623645592
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
for whatver reason AutoHashMap(UnionWithEnumTag, ...) gave me could not hash void

1623645594
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but i didnt dig into it yet

1623645612
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
also, does usize have a unique representation? lol

1623645661
ifreund!~ifreund@user/ifreund
haze: I think your union has variants with no associated data (i.e. the type of the payload is void)

1623645671
ifreund!~ifreund@user/ifreund
in which case that patch should fix things

1623645680
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
damn you knew the problem even before i figured it out

1623645709
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
thanks

1623645717
ifreund!~ifreund@user/ifreund
no problem, I'll open a PR

1623646015
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig/pull/9111

1623646286
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
<3

1623646791
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
are error traces still broken? Sometimes i'll be left with a trace thats all calls into std lib but I can't tell what causes it

1623646849
doublex!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
is there a reason for the convention of const Self = @This() instead of, say, const This = @This() ?

1623646860
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
idts

1623647421
freshcoffee!~fresh@user/freshcoffee
`fn foo(self: *T)` is fairly idiomatic. If `fn foo(this: *T)` was used more, you'd probably see `const This = @This()` instead

1623647426
ifreund!~ifreund@user/ifreund
doublex: `const This = @This();` is preferable when you can

1623647462
ifreund!~ifreund@user/ifreund
const Self = @This() is useful in generic code where the type @This() returns doesn't have a name

1623647483
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
I use it because sometimes i want to rename a struct and dont care about updating the reference types

1623647493
ifreund!~ifreund@user/ifreund
oh, I totally mis understood what you were asking

1623647501
doublex!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
yeah I was asking about the convention for the name

1623647547
doublex!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
heck Self is so commonplace I might propose a shed repainting of @This() to @Self()

1623647549
ifreund!~ifreund@user/ifreund
I meant that e.g. `const Foo = @This()` is better than Self if @This() is concrete

1623647640
freshcoffee!~fresh@user/freshcoffee
yeah if we have a file which is struct, like `src/Cache.zig` you'll see `const Cache = @This();`

1623647940
doublex!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
I wonder the consequences if zig had chosen file = expression instead of file = struct

1623647965
doublex!~doublex@2601:542:c480:6ee0:184b:7083:f026:c689
with #1717 you could have a file be a generic type function directly

1623648277
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
how2 get native arch from zig ttargets again

1623648285
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nvm

1623668766
dch!sid1310@couchdb/committer/dch
when does langref.html get built?

1623668886
dch!sid1310@couchdb/committer/dch
aah I need to run docgen.zig then

1623681218
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i wish zig told me WHY frame type pointer blah child cannot cast

1623681395
ikskuh!~xq@2a0d:5940:6:163::ad7e
what are the types?

1623681418
ikskuh!~xq@2a0d:5940:6:163::ad7e
*@Frame(x) can only be cast into anyframe or anyframe->T

1623681592
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
https://gist.github.com/haze/aa9ddb00a99360f4a2d8cc4a94839c0f

1623681600
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
lines 41 and 51

1623681605
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if you remove the & from the async 

1623681607
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it looks different

1623681617
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
its honestly just a slipup on my end because i dont have my glasses on and im straining to see text

1623681771
ikskuh!~xq@2a0d:5940:6:163::ad7e
haze: this code is bad anyways

1623681775
ikskuh!~xq@2a0d:5940:6:163::ad7e
as you're storing a pointer-to-temporary

1623681786
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
yes i can just allocate

1623681792
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the frame

1623681801
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i got there after i made the gist

1623681803
ikskuh!~xq@2a0d:5940:6:163::ad7e
do that, then store a pointer to the allocated frame

1623681910
ikskuh!~xq@2a0d:5940:6:163::ad7e
also note that create() doesn't initialize the memory of queueNode

1623681922
ikskuh!~xq@2a0d:5940:6:163::ad7e
queueNode.* = .{ .data = frame_ptr };

1623681927
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it's fine if left undefined

1623681937
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
since the queue will arrange them, no?

1623681952
ikskuh!~xq@2a0d:5940:6:163::ad7e
no

1623681965
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think you should initialize both next/previous to null

1623681983
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
            prev: ?*Node = null,

1623681990
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ok

1623681992
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i see

1623682005
ikskuh!~xq@2a0d:5940:6:163::ad7e
i see another problem: your function is recursive

1623682019
ikskuh!~xq@2a0d:5940:6:163::ad7e
not sure if that works

1623682023
ikskuh!~xq@2a0d:5940:6:163::ad7e
it could, but i'm not sure

1623682024
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it compiles and works yes

1623682029
ikskuh!~xq@2a0d:5940:6:163::ad7e
okay :)

1623682042
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
deliberate recursion is disallowed because the frame size cannot be guranteed

1623682052
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but im allocating and storing the frames which have a fixed sizxe

1623682068
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, that was my thought as well

1623682739
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
hey, the compiler is telling me that I need to provide a format specifier for a slice such as "any" or "s" when I am already providing "any", any (heh) idea what might be going on?

1623682764
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
here's the source: https://0x0.st/-LE0.zig and the test output: https://0x0.st/-LED.txt

1623684245
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I figured it out, I wasn't doing anything with the error union...

1623684257
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
the error message wasn't very helpful though

1623685169
tane!~tane@dslb-002-201-234-072.002.201.pools.vodafone-ip.de
aha! here you are

1623685598
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
is there a way to cast an array of u4 to an array of u6 by re-reading the underlying bits, so that, for example, an array of [3]u4 would be reinterpreted as [2]u6?

1623685649
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
bitCast?

1623685656
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
idk some kinda cast

1623685670
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
haze: I just tried that but it's reinterpreting each individual u4 as a u6

1623685682
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ptrCast?

1623685703
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
haze: ooh that looks like it might work

1623685704
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
let me try

1623686247
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
no, that doesn't work. Casting the pointer does change the type, but it doesn't change the way in which the underlying array is interpreted.

1623686364
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
Either an error is raised, explaining that you are trying to read more bytes than are available in the array, or (iterating with a for-loop) you get the same integers and then a zero at the end

1623686372
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
the type of the integers is changed though

1623688195
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
cren isnt that what you want

1623688211
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
you want to reinterpret 3u4 as 2u6

1623688239
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
im not even sure what a valid conversion would look like to point you in the right direction, but ptrCast should be it

1623688278
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
haze: yeah, but using the first two bits of the middle u4 to form the final two bits of the first u6

1623689586
ugla!~ugla@2001:470:69fc:105::2b5
Just a guess, but there's a `PackedIntArray` that sounds like it could be useful. Guessing that you have some padding in the array right now. 

1623689944
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
ugla: yeah, I'm experimenting with that and StaticBitSet right now...

1623690017
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it's weird cren

1623690022
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
it should work but you're right

1623690653
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
haze: yeah it feels like it ought to work. Although I'm just starting to use Zig's casting mechanisms so I don't have a clear picture of how they were intended to work

1623690665
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
anits because

1623690667
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
arrays are padded

1623690670
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
to u8

1623690675
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
so in theory it works but you have padding bits

1623690682
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
protty suggests using a packed array of 3 u4s 

1623690689
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
and then bitcasting to 2 u6 packed struct? idk

1623690717
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
haze: I just tried using PackedIntArray and it does appear to give two u6s but they're not the numbers I was expecting

1623690739
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
I was casting from one PackedIntArray to another so maybe I should try to a struct

1623691313
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
apparently I can't cast from a packed int array to a packed struct either because a packed int array of [3]u4 has 16 bits but a packed struct with two u6 fields has 12 exactly

1623691592
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
okay casting into a packed struct gives weird numbers back again, no idea where they're coming from

1623691879
cren!~cren@2a00:23c5:4d10:5f01:d576:4068:8079:ad45
i'll resume this another time

1623693428
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
w

1623694105
kiedtl!~kiedtl@kisslinux/kiedtl
Suppose I have an anonymous union 'union(enum) { Foo: usize, Bar: usize }', how do I create an instance of variant Foo? '.{ .Foo = 0 }' ?

1623694185
ikskuh!~xq@2a0d:5940:6:163::ad7e
exactly

1623694196
ikskuh!~xq@2a0d:5940:6:163::ad7e
`T { .Foo = 0 }`

1623694640
andrewrk!~andrewrk@mail.ziglang.org
ifreund, are you around? I wanted to discuss #9020

1623694803
ifreund!~ifreund@user/ifreund
andrewrk: o7

1623694871
andrewrk!~andrewrk@mail.ziglang.org
ok so first of all I propose to rename --override-lib-dir to --zig-lib-dir 

1623694905
andrewrk!~andrewrk@mail.ziglang.org
in this case "zig" is not redundant because it differentiates between the lib dir of the thing being built, and the compiler itself

1623694925
ifreund!~ifreund@user/ifreund
I also proposed that rename to Jan on discord, should have mentioned it on the PR 

1623694959
andrewrk!~andrewrk@mail.ziglang.org
nice, that's a good sign we both independently thought of it

1623695013
andrewrk!~andrewrk@mail.ziglang.org
2 questions: 1. does the commit that landed into master look ok to you? 

1623695041
andrewrk!~andrewrk@mail.ziglang.org
2. I'd like to rename --lib-dir to --prefix-lib-dir, --exe-dir to --prefix-exe-dir, etc

1623695079
andrewrk!~andrewrk@mail.ziglang.org
idea here being --prefix is the "normal" flag to use and these are more advanced. the longer names and shared first part of the name indicate the connection between the flags

1623695117
ifreund!~ifreund@user/ifreund
functionality wise the commit that landed in master looks perfect to me. The implementation of resolveInstallPrefix() is a bit awkward and the names could probably use more iteration though

1623695181
ifreund!~ifreund@user/ifreund
Yeah, +1 from me on --prefix-lib-dir and the like

1623695235
ifreund!~ifreund@user/ifreund
technically the --prefix-lib-dir can be outside of the --prefix with this implementation if an absolute path is used, but I think the name is still fine

1623695267
andrewrk!~andrewrk@mail.ziglang.org
thanks. OK I will make all of those changes in master branch now

1623695308
ifreund!~ifreund@user/ifreund
cool! had a chance to take a look at this one yet? https://github.com/ziglang/zig/pull/9097

1623695334
ifreund!~ifreund@user/ifreund
that's the last thing blocking my attempts to make void linux's build system cross compile zig programs

1623695577
andrewrk!~andrewrk@mail.ziglang.org
not yet but I just opened a tab :)

1623695680
ifreund!~ifreund@user/ifreund
:)

1623697789
freshcoffee!~fresh@user/freshcoffee
dest_dir handling looks odd; in my experience it's a staging dir and is known to the build system as a separate concept. eg a build script embeds a prefix-based path into exe or config file but only uses dest_dir for staging

1623697840
freshcoffee!~fresh@user/freshcoffee
problem is getInstallPath() returns `.prefix` which (can be) is combined dest_dir and install_prefix

1623697952
freshcoffee!~fresh@user/freshcoffee
there seems to be _that_ difference in install_path vs. install_prefix so maybe the above function is technically correct

1623697964
freshcoffee!~fresh@user/freshcoffee
but it isn't very clear at all

1623698173
ifreund!~ifreund@user/ifreund
freshcoffee: no, $DESTDIR is basically the root where *everything* *must* be installed to

1623698231
ikskuh!~xq@2a0d:5940:6:163::ad7e
i found a cool new pattern with @src() :)

1623698246
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://gist.github.com/MasterQ32/4ef9cde440cc2c688c07b0e9e004d831#file-usage-zig-L3

1623698273
ikskuh!~xq@2a0d:5940:6:163::ad7e
it allows one to make build support packages that know their location in the project, which means you can compute all package paths instead of passing them to the build package :)

1623698281
ifreund!~ifreund@user/ifreund
freshcoffee: oh I think I misunderstood, you're saying the way we implement the dest_dir semantics in std.build is weird

1623698287
ifreund!~ifreund@user/ifreund
that I can agree with

1623698370
freshcoffee!~fresh@user/freshcoffee
$DESTDIR in the traditional sense is a staging area; ie: to create a package tarball

1623698424
ifreund!~ifreund@user/ifreund
Yeah I misunderstoood what you meant by staging area. Currently the zig build system does implement the semantics of $DESTDIR correctly

1623698480
freshcoffee!~fresh@user/freshcoffee
ok so if I look at build fields, there's { install_prefix, dest_dir, install_path }

1623698514
ifreund!~ifreund@user/ifreund
yeah, and install_prefix is $DESTDIR + --prefix

1623698554
freshcoffee!~fresh@user/freshcoffee
i thought install_path was DEST + PREFIX

1623698573
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
/ TODO look for local variables in scope matching `decl_name` and emit a compile // error. Only top-level declarations can be exported. Until this is done, the // compile error will end up being "use of undeclared identifier" in Sema. andrewrk you wrote this comment, but I think there are some edge cases. in compiler_rt.zig, this is used, inside a comptime { } block which is not top level             const zig_probe_stack =

1623698573
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
@import("compiler_rt/stack_probe.zig").zig_probe_stack; @export(zig_probe_stack, .{.name = "__zig_probe_stack", .linkage = linkage,});

1623698578
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what do you think we should do about it?

1623698585
ifreund!~ifreund@user/ifreund
freshcoffee: ... yeah that's what I meant. 

1623698614
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or rather, the identifier is not top level, but its a local constant

1623698658
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i was going to fix this because @export forms unused vars as it is not checked, but a lot of local consts are actually @exported, so not sure what to do

1623698737
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
imo we should just call identifier( ) on it, and then let sema take care of it

1623699203
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
after that, fingers crossed, my pr is ready to merge

1623699218
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i also corrected src, tools, doc

1623700196
freshcoffee!~fresh@user/freshcoffee
ifreund: imo we should clean this naming up to { install_dest_dir, install_prefix_dir, install_dir }

1623700389
freshcoffee!~fresh@user/freshcoffee
{ .dest_dir, .prefix_dir, .install_dir } where install_dir = dest_dir + prefix_dir

1623702160
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, 6 more errors left, all having to do with @export not calling identifier

1623703955
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I'll fix either stage2 or stage1 to agree with the other on that one

1623704006
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, thanks!

