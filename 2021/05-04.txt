1620086443
andrewrk
betawaffle, noted! let me get back to you after Release Month, if you don't mind. lots of stuff going on right now :)

1620087114
mikdusan
master on openbsd6.9 this passes: `zig build test -Dskip-non-native -Dskip-stage2-tests` with:

1620087124
mikdusan
1. llvm/lld cherr-picked patches from openbsd base

1620087138
mikdusan
2. disabling one stack-trace test

1620087158
mikdusan
3. fixes to src/link/Elf.zig to do crt linking

1620087159
mikdusan
.

1620089740
plumm
are error traces still broken :D

1620090270
andrewrk
you mean do they have extra irrelevant stack frames at the beginning?

1620090290
andrewrk
yeah. you gotta scroll down sometimes to find the starting point

1620090299
plumm
I had an "error.UnexpectedToken" from the json parse module, and after the error I got spammed with OutOfMemory's

1620091201
kiedtl
Has the feature to build C files along with a Zig project in build.zig not been fully fleshed out in 7.0.1? I've added a couple files and zig complains of not being able to find bits/*.h, stdio.h, etc

1620091222
g-w1
what os are you on?

1620091241
kiedtl
Linux, Ubuntu

1620091338
g-w1
use -lc or exe.linkLibC()

1620091400
kiedtl
Oh, I see. thanks.

1620102948
semarie
mikdusan: you were lucky with llvm12 because we (openbsd) upstreamed code in libc++{,abi} and llvm recently :)

1620102994
semarie
my zig-wip tree when starting to work on it (~0.7.1) had more patches in these areas

1620103008
andrewrk
semarie, congrats on that :)

1620103123
VFEXrt
Is it a KI that std.c.parser is broken? I thought it was maybe just a couple issues so I started fixing/replacing things but it looks like I just keep uncovering layers of more brokeness. i.e it references the std.zig.tokenizer instead of std.c.tokenizer and the are a bunch of mismatched struct keys (Guess this is the trade off of lazy

1620103124
VFEXrt
compilation?)

1620103124
VFEXrt
This simple snippet doesn't compile atm

1620103125
VFEXrt
const alloc = &gpalloc.allocator;

1620103126
VFEXrt
var p = std.c.parse(alloc, "#define HELLO 1", .{});

1620103274
mikdusan
semarie: any significant stuff? not to sound negative, but it looks like most llvm patches openbsd base applies are just to get it working for openbsd,

1620103324
mikdusan
of the 2 I cherry-picked, the .so.x.y one could result in false-positives unless in a conditional block for openbsd

1620103419
andrewrk
VFEXrt, it's about to get deleted. vexu was doing some experimental work but it bit rotted and he's been working on

1620103549
VFEXrt
Ah, so no std.c.*? The idea of the standard lib just handling that sounds amazing

1620103587
VFEXrt
Was spinning up a new project that requires me to walk the C ast at runtime and this looked like a godsend

1620103674
andrewrk
we'll see, but for now there is nothing available in std lib for C code

1620103679
semarie
mikdusan: outside additionnal support for some platforms (currently lot of work for riscv64), notable additions are documented here:

1620103702
andrewrk
VFEXrt, I'll delete the bit rotted files to clear up the confusion

1620103726
VFEXrt
Not opposed to implementing my own, but I was trying to find the 'ziggy' way of streaming bytes into my lexer (peek_stream seems promising) when I stumbled onto it. Seems like a really novel idea

1620103735
andrewrk
check out arocc (the link above)

1620103772
mikdusan
semarie: I like the first point already; it irks me to this day clang (and apple xcode) play games with putting /usr/local in your search path

1620103784
VFEXrt
Will do:)

1620103785
VFEXrt
aside: might be work having an experimental namespace ala C++? something like std.experimental.c.*

1620103808
VFEXrt
also, I guess before 1.0 everything is experimental :)

1620104166
mikdusan
semarie: really like that openbsd has clang-local manpage

1620104229
semarie
mikdusan: openbsd has very good documentation

1620118194
ifreund
VFEXrt: see std.x

1620132795
antaoiseach
hey folks, newbie to zig and systems prog in general... have a basic question about alignment. In the lang ref example, we have this - @intToPtr(*i32, 0xdeadbee0), which works fine. when I change the literal to 0xdeadbeef, it complains about alignment.

1620132831
antaoiseach
The alignment for *i32 is 8 bytes, right? So my confusion is - how exactly this alignment is being used here to determine that 0xdeadbeef is invalid?

1620132846
daurnimator
antaoiseach: an i32 has a default alignment of 4 ==> they can only exist on bytes that are a multiple of 4

1620132861
antaoiseach
Ah sorry, yes, 32 bits

1620132879
antaoiseach
daurnimator: so in this case, 0xdeadbee0 is amultiple of 4, but deadbeef is not, right?

1620132885
daurnimator
correct

1620132891
antaoiseach
Ah, okay. Got it. Thanks!

1620132900
daurnimator
if you want to relax that, write `*align(1) i32` instead

1620132930
antaoiseach
daurnimator: Interesting! Let me try that out

1620132962
antaoiseach
Yes, I was trying to experiment along those lines! :-)

1620132995
antaoiseach
daurnimator: yup, worked perfectly!

1620132995
antaoiseach
very nice.

1620135343
antaoiseach
I have another question about alignment - what does alignment in function types entail - is it the return value that is aligned or the function address?

1620135369
antaoiseach
(sorry, still just working through the lang ref, not sure if the answer would be further ahead)

1620135738
daurnimator
antaoiseach: "in function types" I'm not sure what you mean

1620135868
antaoiseach
I mean, suppose you have: fn foo() align(4) void {}

1620135900
TheLemonMan
it's the alignment in the final binary/in memory

1620135915
antaoiseach
of the function body or the function entrypoint?

1620135961
TheLemonMan
the former, the entry point is the first byte of the body

1620135984
daurnimator
huh. I didn't actually know that

1620135998
antaoiseach
right ... oh, right, that makes sense

1620136016
daurnimator
my first guess would have been that the result location had to be aligned to 4..... which of course doesn't make sense with `void`

1620136040
antaoiseach
daurnimator: yeah, that's what I thought too (assuming "result location" is sort of an lvalue?)

1620136075
antaoiseach
Thnaks for clearing that up, guys!

1620136125
daurnimator
antaoiseach: result location is where the result is

1620136173
daurnimator
i.e. `fn foo() i32` is really like `fn foo(result: *i32) void`

1620136250
TheLemonMan
not quite, i32 is not an aggregate

1620136279
daurnimator
TheLemonMan: semantically does that make a difference?

1620136333
TheLemonMan
from a high-level POV no, from the codegen POV yes

1620136366
companion_cube
what if you have a struct with 2 u16? does it have to be handled differently than a i32?

1620136439
TheLemonMan
the logic is in want_first_arg_sret and the answer is yes

1620136442
antaoiseach
Interesting!

1620136462
antaoiseach
Sort of like references? out params?

1620136495
mikdusan
TheLemonMan: did you need me to try anything on qemu-6.0.0 ?

1620136496
TheLemonMan
RVO

1620136603
TheLemonMan
mikdusan, nope, we're better off waiting for qemu 6.0.1 heh

1620136663
mq32
companion_cube: a bit, yes. "extern struct {a:u16,b:u16}" has natural alignment 2, whereas "extern struct { a: i32 }" has natural alignment 4

1620136709
companion_cube
ah, not saying they're exactly the same, but the struct could still be copied around instead of going through an out parameter

1620136724
companion_cube
anyway it's all good, I was just curious why "aggregates" is the line, and not size

1620136746
mq32
for C abi, there's a huge difference afaik

1620136761
mq32
so "u32" can be passed in a register, but "struct" must be passed in a copy on the stack

1620136778
companion_cube
ah well. makes sense.

1620136797
companion_cube
(to follow what C does, I mean)

1620136837
mq32
if you don't have a defined ABI like zig, you can go pretty crazy, like passing a struct as two registers and so on :)

1620136897
TheLemonMan
that's also done in the C land, small in/out aggregates are shoved into a single register

1620136916
mq32
oh, they are?

1620136923
mq32
i think it depends on the system though

1620136934
TheLemonMan
yeah, it depends on the architecture/abi

1620137265
TheLemonMan
yay, got most of the test suite to run when compiled for linux/thumb

1620137360
mikdusan
üëç

1620138187
antaoiseach
exit

1620140074
kiedtl
Is including a local C header file with @cInclude supported? I'm trying to include foo.h (#include "foo.h") but @cInclude does "#include <foo.h>", which of course leads to a header not found error

1620140175
dutchie
can you just do `-I.`?

1620140296
kiedtl
Hm, yes, I can. It'd be cleaner to have a @cLocalInclude or something similar IMO

1620141500
kiedtl
How do you add a built option to zig cc ('-I.')? Sorry for the repated questions, but I'm looking in lib/std/build.zig and don't seem to see anything of relevance

1620141554
TheLemonMan
addIncludeDir maybe?

1620141617
kiedtl
Ah, yes, that'd be what I was looking for. Thanks!

1620147003
kiedtl
Will there ever be support for adding a pre-panic hook? It would be useful in cases where, say, ncurses has the be shutdown before the panic message can be displayed in a legible fashion

1620147048
TheLemonMan
you can already override the panic handler, stuff your pre-panic code there and then call the default handler

1620147279
kiedtl
Oh, I see, by defining a panic() function in the project root. Sorry

1620151103
betawaffle
andrewrk: re: "... get back to you after Release Month, if you don't mind" i don't mind, sounds good!

1620160303
marler8997
I can't take it anymore I'm buying an overpriced graphics card today

1620160321
marler8997
Should I go $2,200 for the rx 6900 xt or $1600 for a rtx 3070?

1620160419
andrewrk
marler8997, what are your goals/plans for the hardware?

1620163245
marler8997
VR gaming

1620163892
waleee-cl
marler8997:  is that US-style prices with no VAT?

1620163905
marler8997
yes

1620163910
waleee-cl
yikes

1620163944
marler8997
yeah it's been bad for a while, no end in sight

1620166751
andrewrk
I just had an epiphany and now I understand Work Stealing and why it makes sense

1620169877
olabaz
hi are there websockets in zig?

1620169897
g-w1


1620170253
marler8997
andrewrk, what was your epiphany?

1620170286
andrewrk
I was confused because the whole idea is that you are trying to avoid accessing the same data structure as another CPU core, in order to avoid lock contention

1620170294
andrewrk
but if you have the capability to do work stealing at all, it requires locking on some shared state between cores!

1620170306
andrewrk
but what I have come to understand about mutexes and atomic data accessing is that, even lock-free stuff is still slow when the shared atomic state is contended, because the per-core CPU cache cannot be used, since the reads/writes must be shared by other cores. Additionally, uncontended mutexes are fast because they are just L1 CPU cache accesses at best.

1620170313
andrewrk
so the epiphany is that, yeah, each core just locks its own mutex in order to accept a job from its own queue. but since each core has its own work queue, it's super fast, because there is no contention. but when work stealing needs to happen, it works, because a CPU core grabs the mutex of another one. only then would there be the possibility of contention. and in this case it's OK because we need to steal the work

1620170333
andrewrk
the key insight is that it's contention that is slow, not mutexes

1620170399
marler8997
ah yes, that's what I've come to understand as well I think.  Keeping cache lines isolated between cores is number 1 priority

1620170499
marler8997
oh interesting, so instead of 1 shared queue, work stealing means 1 queue per core, and when you run out, you iterate through all the other queues?

1620170514
andrewrk
right. that's the basic idea, and you can imagine variants of it

1620170532
marler8997
and it's fast because you're not hammering on the shared queue from all processor cores all the time

1620170606
marler8997
I recal the compiler was using one shared queue for jobs, did we switch to a work stealing strategy?

1620170776
companion_cube
andrewrk: I think it's true mostly because modern mutexes start by spinning on atomics, right?

1620170790
andrewrk
the std lib event loop is currently using one shared queue. the compiler is not using the event loop because it is too experimental

1620170884
andrewrk
the compiler has a thread pool and dispatches jobs based on one shared queue. I would be surprised if the shared lock here was causing any noticeable expense

1620170934
andrewrk
all of semantic analysis is single threaded anyway. it's only some stuff that is getting dispatched to a thread pool

1620170952
companion_cube
does tracy support multithreads?

1620171113
g-w1
yes!

1620171130
companion_cube
that's nice.

1620171154
companion_cube
iirc the C stubs to start tracing are super basic, too?

1620172358
g-w1
yep, see tracy.zig in zig repo

