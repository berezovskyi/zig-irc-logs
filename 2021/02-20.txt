1613781500
mikdusan1
re building with 6GB of ram; comparing two 'zig0' ... one (and it's llvm deps) built with Release vs MinSizeRel. I didn't expect it to impact max-RSS but on macos:

1613781551
mikdusan1
7142372 KB vs 6167180 KB, respectively

1613781580
mikdusan1
and watching Activity Monitor.app, "memory" maxes out at 5.98 GiB vs 5.44 GiB, respectively

1613781618
mikdusan1
but big penalty in performance. 51 seconds vs over 3 minutes

1613781666
mikdusan1
is it enough to help? doubt it.

1613784853
v0idify
mikdusan1, did you send another message?

1613785038
mikdusan1
nope

1613785217
v0idify
why the : though

1613785225
v0idify
or maybe i didn't get something

1613785493
mikdusan1
ah 1 sec

1613785515
mikdusan1


1613785811
v0idify
mikdusan1, good to know, so -O ReleaseSmall or -Drelease-small ? i'll try it later

1613785821
v0idify
thanks!

1613785838
v0idify
honestly i just want to try it out so if I can get my hands on an x86_64 linux binary..

1613785908
mikdusan1
it's a cmake thing. so involves rebuilding llvm+clang+lld as `-DCMAKE_BUILD_TYPE=Release` vs `-DCMAKE_BUILD_TYPE=MinSizeRel`

1613785926
mikdusan1
but not clear it really will help

1613786152
v0idify
ok

1613796412
andrewrk
got all the stage2 test cases passing in ast-memory-layout branch :) now it's just finishing zig fmt

1613796550
v0idify
andrewrk, i haven't followed, what is this branch about? sounds cool

1613796578
andrewrk
v0idify,

1613796587
andrewrk
if you scroll through some of the comments there are a few benchmarks

1613796604
v0idify
ooh benchmarks

1613796623
andrewrk
I'm about to have some fun doing a silly benchmark of 1 million print() calls :)

1613796678
v0idify
fun fun fun

1613796779
andrewrk
20,390 lines added, âˆ’17,148 lines deleted, and it took all of 30 minutes to debug the 4 regressions in the stage2 test cases

1613796803
andrewrk
this is the magic of zig

1613796823
v0idify
the secret sauce

1613796900
v0idify
why does compiling stage2 have a -Denable-llvm flags? is it using llvm for some parts right now?

1613796920
v0idify
i actually got it to compile but only without the flag and it can't compile anything

1613796948
andrewrk
have a look in the test/stage2/ directory for some examples of test cases that are supported by stage2. it's not a large percent of language features

1613796995
v0idify
well I meant that it literally would fail instantly with "no entry point found"

1613797027
andrewrk
in answer to your other question, stage2 currently has the following backends, to varying degrees of completeness: aarch64, arm, x86_64, LLVM, C, riscv64, spirv, spu-mk2, wasm

1613797033
andrewrk
the LLVM one requires -Denable-llvm

1613797076
v0idify
how can i get it working with any backend? i assume it didn't work because it didn't have any backend?

1613797103
v0idify
any backend as in, i just want to see it compile, ideally something i can run on my machine, without llvm

1613797111
andrewrk
the behavior you are observing is it working properly, however it does not support start.zig yet, so you have to export your own _start function

1613797133
v0idify
ahh that makes sense. can I just manually import start.zig?

1613797151
v0idify
or i guess it uses language features it doesn't work with yet

1613797151
andrewrk
no because stage2 is not capable of handling it yet

1613797155
v0idify
got it

1613797166
andrewrk
you may be interested in playing with the C backend. try passing: -ofmt=c

1613797191
andrewrk
have a look at some of the supported test cases:

1613797360
v0idify
very interesting, thx

1613797995
v0idify
how can i make zig fmt put if statements with many and/or in multiple lines?

1613798036
marler8997
huh, Zig has nameless tests now?

1613798549
g-w1
yep, for module wide stuff

1613798985
marler8997
g-w1, I got ziget to work with schannel by the way

1613799015
marler8997
having troubles using it with zigup at the moment because "zig build" is trying to create a symlink for some reason

1613799207
andrewrk
marler8997, nameless tests are never filtered out with --test-filter, so they can be used to import other files and have --test-filter work when using zig test to discover the entire source tree

1613799241
andrewrk
v0idify, put a newline after the )

1613799271
andrewrk
v0idify, oh you mean there are `and` and `or` clauses? you can put a newline after any infix operator such as `and` and `or`

1613799317
marler8997
andrewrk, is it easy to update the windows Zig+llvm+clang binaries?  they don't build since the nameless tests were added

1613799347
andrewrk
yeah sure I'll take care of that tomorrow. in the meantime the wiki lists a workaround

1613799386
marler8997
I've been spoiled by this awesome all-in-one sdk, I never want to go back to msvc

1613799532
andrewrk
I'm doing everybody's favorite benchmark, printing hello world 1 million times xD

1613799575
v0idify
I mean it's what developers will first try! it has to be as fast as possible

1613799593
andrewrk
ha! this branch takes us from 1.2s to 0.9s

1613799611
v0idify
that's actually quicker than i thought

1613799736
v0idify
what std thing is a precise timer for benchmarking?

1613799932
mikdusan2
speaking of building the Windows Zig Compiler Dev Kit, here's a repo that apparently (haven't tried it yet) walks one through building on non-windows host against

1613799943
mikdusan2
copied windows SDK headers and Visual Studio headers:

1613799947
mikdusan2


1613799967
mikdusan2
i bet this could work with `zig cc` or `zig cl` someday

1613800014
marler8997
that's great, a whole bunch of cmake files

1613800020
mikdusan2
hahah

1613800053
marler8997
challenge, translate all these cmake files to build.zig

1613800120
mikdusan2
cmake has a motto that goes something like "resistence is futile" :P

1613800150
v0idify
well zig could copy it

1613800154
marler8997
has anyone tried to build LLVM/Clang with zig cc?

1613800166
mikdusan2
sure that's what zig-bootstrap does?

1613800175
marler8997
does it work?

1613800248
mikdusan2
I assume so. I really should try it out.

1613800311
marler8997
this gives me ideas of enhancing zig to be able to autobuild llvm/clang/lld when requested by the user

1613800346
marler8997
when buildin the zig compiler to be specific

1613800426
marler8997
zig build ... Error: unable to locate LLVM, add -Dbuild-llvm to build it here

1613800465
mikdusan2
if you look at `build` in zig-bootstrap, in theory can download bin-tarball from ziglang.org and jump to line 54

1613800574
andrewrk
flexing a little bit here :D

1613800575
mikdusan2
well if cross-compiling you'd have to run a nested llvm/cmake to build host (native) versions of llvm-tblgen and clang-tblgen

1613800586
andrewrk
Cadey, ^

1613800723
marler8997
Zig showtime about the techniques you used here, you're using data-oriented design techniques if I recall yes?

1613800851
vktec
Is there any way to return a tuple from a function?

1613800862
vktec
I can't figure out what return type to use

1613800894
andrewrk
I did a decent stream on it I think

1613800899
andrewrk
if you skip past the part where I had to reset my router

1613800914
marler8997
oh shoot, I will look that up then

1613800929
andrewrk


1613800940
andrewrk
don't be intimidated by the length, there is unrelated stuff here

1613800957
marler8997
shoot I didn't get notified about this stream

1613800963
mikdusan2
wait. whut. over 1 meeeelion lines per second. /me queues up doom3 port to .zig ... :P (sorry couldn't resist)

1613800967
v0idify
vktec, [2]type or make an anonymous struct

1613800994
marler8997


1613801032
vktec
v0idify: I can't pass either of those to a function expecting a tuple though

1613801039
v0idify
are we as fast as vlang yet? l0l

1613801054
v0idify
vktec, what is a tuple in this context? i'm confused

1613801119
vktec
There doesn't seem to be a whole lot of documentation on them, but they're mentioned in this section of zig learn:

1613801140
v0idify
ah well, .{item, item} doesn't work?

1613801157
v0idify
that's an anonymous structs! it's anonymous structs all the way down :P

1613801162
mikdusan2
marler8997: give it a few years (or less). we'll see doom and rtcw and enemy territory ports to zig and vulkan

1613801163
vktec
But what's the type of that?

1613801202
v0idify
it's anonymous, except you define it, there's no

1613801208
v0idify
you can use .{} for it though

1613801218
vktec
I want to return one, so I need a type for it

1613801221
v0idify
functionThatTakesTuple(.{my, items});

1613801246
marler8997
I think you can do something like this struct { @"0": u32, @"1": []const u8 }

1613801266
marler8997
or maybe @TypeOf(.{ 0, "hello"})

1613801272
v0idify
fn func() struct { value: u32, other_value: u32 } { return .{ 1, 2 }; }

1613801337
marler8997
Maybe we should add a Tuple function to std.meta that lets' you do this Tuple(.{u32, size_t, []const u8})

1613801382
marler8997
nicer than typing struct { @"0": u32, @"1": size_t, @"2": []const u8 }

1613801435
vktec
marler8997: First one gives "array access of non-array type", second gives "type does not support array initialization"

1613801461
marler8997
I'm pretty sure I did this once before, I'll give it a try

1613801514
andrewrk
zig translate-c is pretty far along, I wonder where it gets stuck on doom

1613801514
mikdusan2
marler8997: std.meta.Tuple takes a `[]const type` does that work?

1613801541
andrewrk
I don't think anyone has tried it lately and we've seen quite a few nice contributions

1613801543
vktec
Oh there already is a std.meta.Tuple, I'll try that

1613801560
marler8997
ah, I guess someone already had my idea :)

1613801574
mikdusan2
zig is known for that ^

1613801688
vktec
Unfortunately it still gives "type does not support array initialization"

1613801825
marler8997
looks like it works if you do this: .{ .@"0" = ..., .@"1" = ... }

1613801839
marler8997
obviously that's silly, but it seems Zig thinks it's an array rather than a tuple

1613801851
marler8997
maybe zig doesn't support returning tuples from functions?

1613801890
marler8997
I think the one time I tried to do this, I may have ended up using a real struct instead, with named fields

1613802079
vktec
That seems like the simpler option at this point

1613802087
vktec
I'll just return a struct and repack it into a tuple after

1613802141
marler8997
yeah sorry it feels like something you should be able to do: fn f() Tuple(&[_]type{u32, u32}) { return .{1, 2}; }

1613802159
marler8997
I think there's a proposal out there to rework tuple/array literals a bit, maybe it applies here

1613802195
vktec
It's still significantly easier than doing this kind of thing in C :)

1613802201
vktec
So I'll take it

1613802309
marler8997
it's like you got a shiny new car and it has a smudge on it, but then you realize your old car was basically just one big smudge :)

1613802370
vktec
I've been using Zig for a total of about 4 hours, but so far it's been great :)

1613802407
marler8997
welcome vktec, it's good to have new users

1613802431
vktec
Seems very well thought out and carefully designed, which is a nice change from a lot of other languages around nowadays haha

1613802472
marler8997
yes, simplicity is one of the primary goals, checkout "zig zen" as well for what's driving the direction.

1613802516
vktec
It feels a lot like Go in that regard, except it fixes some of my more significant issues with Go

1613802544
vktec
Namely error handling, generic programming (though Go should be getting that soon) and lack of low-level control

1613802554
marler8997
yeah Go was a non-starter for me, it sacrificed too much and it's metaprogramming was weak

1613802570
marler8997
and I think it requires a runtime?

1613802589
marler8997
One of the things I like most about Zig is the tooling

1613802593
vktec
And yeah zig zen is very nice. A really nice summary of the language, and all points I wholeheartedly agree with :)

1613802620
vktec
Yeah, Go needs a pretty hefty runtime, since it includes both a GC and a scheduler

1613802650
marler8997
yeah that kinda puts it in a different category than Zig, it's just much higher level

1613802655
vktec
Yep

1613802691
marler8997
and they put it at that high level for the sake of faster development, but with Zig that difference may no longer be measurable

1613803733
marler8997
andrewrk are you looking for a big project to test the compiler perf with?

1613803755
marler8997
If so, you should try zigwin32:

1613803760
marler8997
zig test src/win32.zig

1613803792
marler8997
it's 83 MB of zig source code

1613803828
marler8997
that's over 4 times bigger than the standard library!

1613803973
g-w1
marler8997 just looked at some of the files in api, you can replace test "" { with test {

1613803996
marler8997
sure I'll do that

1613804088
marler8997
done

1613807113
andrewrk
marler8997, not yet - this is stage2 so the next step before we can test that is to make stage2 support more language features

1613822864
Cadey
andrewrk: oh my god that's incredible

1613823873
ikskuh
marler8997: wow, that's one big chungus

1613823986
ifreund
that's the only person I have blocked on the zig discord so far...

1613824012
ikskuh
i am not allowed to block :D

1613827078
Thale20
Hello everyone,

1613827078
Thale20
I started writing some software with zig, but there are some pretty fundamental things I can't really figure out with the documentation of the std library.

1613827079
Thale20
Not sure if this is a good place to ask questions?

1613827147
ifreund
this is a fine place to ask questions

1613827185
ifreund
note that the autogenerated std docs are very incomplete, it's better to just read the source code

1613827273
Thale20
Yes, I had that feeling. I think most of these would be answered easily by seing some example code too. I know the tetris example, but it is very small,

1613827274
Thale20
so I was wondering if there is some bigger zig code base that you could recommend having a look at?

1613827325
ifreund
well, the standard library qualifies I think :P

1613827374
ifreund
there's also my project (

1613827387
ifreund
filter

1613827390
Thale20
Cool, I will hav a look at that!

1613827403
ifreund
ziglings might be a nice way to get started

1613834136
marler8997
ikskuh yeah the Win32 api is massive

1613834337
marler8997
andrewrk I was thinking to test tokenization/parsing perf

1613834387
marler8997
it is an odd use case because it's only declarations, no actual Zig code in there

1613834466
ikskuh
heh

1613834481
ikskuh
i wonder how well "zig fmt" will work

1613836357
marler8997
My build.zig file for zigup requires that the user select an ssl backend, but that makes "zig build -h" not work without a backend selected

1613836393
marler8997
I could check whether or not the "help" is being enabled, if that's available, does this sound correct?

1613836648
ikskuh
marler8997: why does "zig build" require ssl?

1613836673
marler8997
it requires the user to select an ssl backend they want to build with

1613836691
ikskuh
yeah, so?

1613836696
ikskuh
if none is selected, error out

1613836713
marler8997
I'm now adding a new target that doesn't require an ssl backend

1613836717
ikskuh
it will allow "zig build --help"

1613836770
marler8997
zig build --help doesn't work unless an ssl backend is selected now, which is not what I want

1613836779
marler8997
zig build -h should work whether or not they've specified a backend

1613836959
marler8997
is there a way to add a callback to a target just before it builds?

1613836963
marler8997
I could run the check in there

1613837069
marler8997
wait, maybe I can make these exe steps depend on a check step?

1613837073
marler8997
ooo I think I'm on to something

1613837220
ifreund
yeah custom steps are the only way to add lazy actions

1613837230
marler8997
yeah this is what I needed

1613839494
marler8997
I'm adding a step in my build.zig to build binaries for multiple platforms, I'm a bit confused in outputdir vs installdir

1613839520
marler8997
is output_dir supposed to be a relative dir to install prefix?

1613839689
marler8997
oh I see dest_dir, maybe that's what I want

1613839737
ifreund
what's your goal?

1613839750
marler8997
my build.zig file is building a bunch of variants of the same exe

1613839765
marler8997
for the purposes of uploadeing to github

1613839793
ifreund
ok, and you want to put them somewhere without overwriting each other?

1613839797
marler8997
yes

1613839877
ifreund
dest_dir only exists to handle the DEST_DIR environment variable often used for distro packaging

1613839904
ifreund
output dir is relative to the install prefix afaik, as you said

1613839938
marler8997
is output dir supposed to be for build or install?

1613839970
marler8997
I see .o files in it, so it seems like it's for build, but if it's relative to install prefix, then it's for install, hence the confusion

1613839971
marler8997
is it for both?

1613839995
ifreund
for build

1613840018
marler8997
ok great, that answers one question

1613840028
marler8997
in that case, it doesn't have anything to do with install prefix right?

1613840052
ifreund
yeah your're right, sorry this stuff is a bit of a mess

1613840087
ifreund
out_dir is set whatever cache directory in zig-cache the zig compiler invocation returns

1613840106
marler8997
ok that make sense with everything else

1613840175
ifreund
I don't think std/build.zig supports installing to multiple prefixes with a single invocation

1613840196
marler8997
that's fine

1613840209
marler8997
the goal is simple here, just build a bunch of exe variants

1613840309
ifreund
simplest way is probably to just give each a different name tbh

1613840375
ifreund
marler8997: oh, I think I actually implemented something that will do what you want, see LibExeObjStep.override_dest_dir

1613840387
ifreund
set that to something different for each of your binaries

1613840457
marler8997
I'm still confused about output_dir

1613840461
marler8997
it doesn't go into zig-cache

1613840468
marler8997
it looks like it goes into cwd?

1613840477
g-w1
marler8997, do you think it would be a good idea to setup a github actions to automatically compile the latest zigup and package it in github releases? I can do that if you want?

1613840500
ifreund
marler8997: output dir won't be set until the objects are built...

1613840503
marler8997
maybe but I still want to build the binaries with build.zig

1613840608
g-w1
yeah, once you have this, it would be easy to make a github action to package it i think

1613840709
marler8997
ok, so I've confirmed setOutputDir is relative to CWD

1613840742
marler8997
but I'm confused why it puts .o files in there? wouldn't those go into the cache, not the output dir?

1613840781
marler8997
I'm still unclear what Zig thinks the output dir is for, and/or the install prefix for that matter at this point

1613840928
marler8997
where does alexnask hang out? Is he here on irc or dicord?

1613841045
g-w1
sometimes here, sometimes discord, sometimes neither

1613841099
ifreund
marler8997: the output dir is where the output of zig compiler invocations go. The install dir is where these artifacts will be copied to when you do zig build install

1613841138
marler8997
I thought zig would put the output of compiler invocations in the cache

1613841152
ifreund
it does unless you tell it to do otherwise by setting out_dir

1613841165
marler8997
ah I see

1613841181
ifreund
and when it puts them in the cache it sets out_dir to whatever specific cache path was used

1613841216
marler8997
not the exe though, which is what is causing the problem

1613841229
marler8997
when using cache, .o files and exe files are handled different

1613841235
marler8997
when using outputdir, they are handled the same

1613841252
marler8997
might be unnecessary complexity, not sure

1613841301
marler8997
in any case, I think setOutputDir will work, thanks for the help

1613841312
ifreund
no problem

1613841346
ifreund
I think the zig build system could really use a teardown and rewrite once the language is more stable tbh

1613841353
ifreund
it's quite crufty

1613841377
marler8997
yeah, it's fundamental design and features are really good.  There are however some oddities that can be improved

1613841388
ifreund
agreed

1613841687
marler8997
enum value to string?

1613841721
marler8997
comptime string

1613841800
marler8997
ah @tagName

1613842210
marler8997
I think I'll have to wait to get iguana working before releasing static prebuilt binaries of zigup, depending on openssl and trying to make that work on all distributions is going to require some "reloader" magic that I don't feel like dealing with

1613842299
Thale20
What is the easiest way to read a given number of bytes from a file into a memory adress? Somehow I really struggle with the concept of slices here.

1613842301
ifreund
doesn't ikskuh have BearSSL bindings that you could use to build statically?

1613842326
Thale20
Like essentially I want to do sth like this:

1613842327
Thale20
pub fn readFloat(file: *const fs.File, result: *f32) !usize {

1613842328
Thale20
const read = try file.reader().read(result, 4);

1613842328
Thale20
return read;

1613842328
marler8997
ifreund...oooo, didn't know about that...will look

1613842329
Thale20
}

1613842329
Thale20
But I can't figure out how to do it in zig

1613842338
marler8997
Thale20, mmap?

1613842361
ifreund
Thale20: you can think of slices as a struct { ptr: [*]u8, len: usize }

1613842379
Thale20
can I create a slice like that? with a pointer and the length?

1613842382
ifreund
yes

1613842387
Thale20
ahh

1613842410
marler8997
so along with wolfssl, there is also bearssl

1613842421
ifreund
Thale20: my_ptr[0..my_len] will give you a slice

1613842439
marler8997
I like this convention, we should keep going, I wanna see lionssl, and walrusssl and so on

1613842443
Thale20
well except that will give me a [4]u8 and the function wants a []u8

1613842462
marler8997
Thal20, nope, my_ptr[0..my_len] give you []u8

1613842492
ifreund
well, if my_len is comptime know it will give you a *[my_len]u8 which coerces to []u8

1613842510
ifreund
*[4]u8 is a pointer to an array of 4 u8s

1613842517
marler8997
ah didn't know that

1613842556
ifreund
Thale20: you probably just need to take the address of what you're passing with & so that it will coerce

1613842575
ifreund
arrays are semantically values in Zig unlike C

1613842589
marler8997
ok going to add bearssl, my guess is it takes an hour

1613842611
ifreund
nice :)

1613842813
Thale20
ok, so this works:

1613842813
Thale20
const buffer: []u8 = @ptrCast(*[4]u8, result)[0..4];

1613842814
Thale20
but it seems a bit complicated, so not sure it is the best way to get from a *f32 to a []u8

1613842868
ifreund


1613842894
Thale20
well for now it is just one, the many case was probably the next step

1613842901
Thale20
but assume I jhust want to read a single float

1613842943
Thale20
in which case probably copying it after wouldnt be so bad

1613842952
Thale20
but still

1613843115
ifreund
with the function signature you pasted above, just do: return file.reader().readAll(@ptrCast(*[4]u8, result));

1613843117
Thale20
pub fn readFloats(file: *const fs.File, result: [*]f32) !usize {

1613843118
Thale20
const buffer: []u8 = @ptrCast(*[*]u8, result)[0..4*result.len];

1613843119
Thale20
const reader = file.reader();

1613843119
Thale20
const read = reader.read(buffer);

1613843119
Thale20
return try read;

1613843120
Thale20
}

1613843121
Thale20
This would be the multiple version, correct?

1613843226
ifreund
for multiple: fn readFloats(file: fs.File, result: []f32) !void { return file.reader.readAll(std.mem.sliceAsBytes(result)); }

1613843398
Thale20
cool, thanks!

1613846307
marler8997
anyone familair with bearssl online that can explain to me the lifetime of a couple things?

1613846315
marler8997
ikskuh you're not available are you?

1613846339
ikskuh
here

1613846345
ikskuh
i can try :D

1613846362
marler8997
so i've got a stream that references Client, I assume client needs to outlive stream

1613846376
marler8997
does the engine passed into Client.init need to outlive Client as well?

1613846387
ikskuh
yeah

1613846388
ikskuh
lifetimes are nested

1613846388
ikskuh
yes

1613846417
marler8997
ok thanks

1613846435
marler8997
this is the PR by the way if you're interested in taking a look:

1613846609
ikskuh
ah yeah

1613846913
marler8997
hmmm, ld.lld: error: undefined symbol: br_ec_p256_m64

1613848549
g-w1
what advantages does bearssl have over iguanatls?

1613848995
ifreund
it's a lot more mature for one

1613852853
andrewrk
maturity is extra important when using a library where security is a primary feature

1613853394
earnestly
openssl is that

1613853418
earnestly
Or is it so mature that it has gone moldy? :p

1613854403
marler8997
ikskuh I think there's a bug in your zig-bearssl, I think write cannot return 0, it creates an infinite loop in std.io.Writer.writeAll

1613854437
marler8997
it looks like bearssl might have a "br_sslio_write_all" function for this purpose

1613854628
marler8997
oh no that's not what supposed to be called, but returning 0 does cause an infinite loop

1613854644
marler8997
I think Writer is expecting write not to return 0 ever...not sure

1613856470
emptee_
Is there a way to bundle all tests under a single test suite? So that several "All N tests passed" are aggregated into a single line? Currently I am adding tests in a for loop to the "test" target.

1613856606
ikskuh
emptee_: not really, tests are just different executables run

1613856623
ikskuh
marler8997: happy to accept PRs

1613856715
emptee_
Ok, thanks. It is not really a big deal, it is just sightly annoying me for some reason.

1613858522
marler8997
stil not sure it's actually a bug though, was wondering if anyone knew more

1613858535
marler8997
like, maybe it's a bug in writeAll?

1613858747
ifreund
marler8997: write should never return 0 on posix conformant systems

1613858778
ifreund
if no bytes have been written before the write is interruped, EINTR should be set as errno and -1 returned

1613859074
marler8997
ifreund thanks for the clarification

1613863943
g-w1
anyone know why I am getting these build errors recently?

1613863994
ifreund
g-w1: did you update your compiler?

1613864515
g-w1
maybe? im using nix so idk

1613864533
g-w1
why would that matter?

1613864871
g-w1
it seems to be using gcc

1613864884
g-w1
9.3

1613865462
ifreund_
g-w1: compiler warnings arenâ€™t stable. Usually if new warnings seem to appear out of nowhere itâ€™s because you are using a newer, smarter compiler

