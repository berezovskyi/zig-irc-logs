1639017859
daurnimator!~daurnimat@vultr.daurnimator.com
ah k, I thought we did

1639038236
chgr!~ek@nat-91-137-16-17.net.encoline.de
Im trying to choose if I have to subtract or add during runtime using the following code:

1639038267
chgr!~ek@nat-91-137-16-17.net.encoline.de
`const addOp = switch (y > line.y2) {

1639038268
chgr!~ek@nat-91-137-16-17.net.encoline.de
    true => std.math.sub,

1639038270
chgr!~ek@nat-91-137-16-17.net.encoline.de
    false => std.math.add

1639038272
chgr!~ek@nat-91-137-16-17.net.encoline.de
};`

1639038331
chgr!~ek@nat-91-137-16-17.net.encoline.de
I saw this pattern in the std.fmt code. But when I try to use it, it does not compile: `error: cannot store runtime value in type 'fn(type,anytype,anytype) anytype'`. 

1639038356
Arnavion!arnavion@user/arnavion
It won't work for functions that take anytype

1639038373
Arnavion!arnavion@user/arnavion
You'll need to make your wrappers around add and sub that take the concrete type you're planning to add/sub

1639038388
Arnavion!arnavion@user/arnavion
(Of course, at that point the wrappers can just use + and - instead of add and sub)

1639038454
chgr!~ek@nat-91-137-16-17.net.encoline.de
Thanks! 

1639038670
Arnavion!arnavion@user/arnavion
And in case you didn't realize why, fn foo(x: anytype) is essentially equivalent to fn foo(comptime Type: type, x: Type) except that Type is automatically determined for you from x when foo is instantiated for that Type. So foo doesn't exist at runtime, only specific instantiations of it exist

1639039003
Arnavion!arnavion@user/arnavion
Oh, I'm wrong about the reason. `anytype` parameters do work. It's only `type` parameters that don't

1639041438
andrewrk!~andrewrk@mail.ziglang.org
whew, that was a big task for 1 day: https://github.com/ziglang/zig/pull/10304

1639042565
ikskuh!~xq@2a0d:5940:6:163::ad7e
noice!

1639044390
motiejus!~motiejus@2001:470:69fc:105::38fb
Nitpick: given the recent trends in computing, you may want to name the blacklist as denylist instead

1639044414
motiejus!~motiejus@2001:470:69fc:105::38fb
... could have commented on the pr

1639046417
andrewrk!~andrewrk@mail.ziglang.org
ok will do

1639046490
andrewrk!~andrewrk@mail.ziglang.org
"deny" is not quite what's happening here, perhaps "omit"

1639046671
Franciman!~Franciman@mx1.fracta.dev
good day or its leftovers. Just for an orientation, nothing more

1639046677
Franciman!~Franciman@mx1.fracta.dev
is there an eta for zig 0.9?

1639046691
Franciman!~Franciman@mx1.fracta.dev
I am pondering about moving to the new allocator interface

1639046760
luuk!~luuk@user/luuk
Franciman: 20th of December

1639046783
Franciman!~Franciman@mx1.fracta.dev
wo

1639046789
Franciman!~Franciman@mx1.fracta.dev
that's like my christmas gift then ahah

1639046792
Franciman!~Franciman@mx1.fracta.dev
thanks luuk 

1639046848
luuk!~luuk@user/luuk
You're welcome :)

1639073761
tgschultz!UserNick@047-034-058-084.res.spectrum.com
is there a better way than using a global to pass information in and out of an async frame? I suspect the answer is 'not really', but I rarely use async so I might be missing something.

1639073806
tgschultz!UserNick@047-034-058-084.res.spectrum.com
I'm only using async now because it is easier than writing a traditional state machine in this case.

1639073986
_javyre!~javyre@2001:470:69fc:105::2162
tgschultz:  I allocate a little structure right after the frame bytes and pass a pointer to it when calling the async function. I then keep a pointer to the allocated memory and that is at the same time the allocated frame and the allocated shared state

1639074108
tgschultz!UserNick@047-034-058-084.res.spectrum.com
yeah, but that's basically still a global. For instance if I'm creating and returning a struct instance in a `.init()`, I can't really do that because the pointer might not be valid after I return it. Unless I allocate in on the heap I guess, but I avoid heap allocation whenever possible and this program doesn't need it.

1639074177
_javyre!~javyre@2001:470:69fc:105::2162
You'd have to allocate your frame+shared state struct before calling init of course. It depends on your definition of a global variable I guess.

1639074183
tgschultz!UserNick@047-034-058-084.res.spectrum.com
...actually come to think of it it might be valid due to result location semantics...

1639074201
_javyre!~javyre@2001:470:69fc:105::2162
Could still be all allocated on the stack in a fixed buffer

1639074261
_javyre!~javyre@2001:470:69fc:105::2162
s/Could still be all allocated on the stack in a fixed buffer/Could still be all allocated on the stack/

1639074342
tgschultz!UserNick@047-034-058-084.res.spectrum.com
I'd like to hide this particualr implementation detail from the caller if at all possible.

1639074380
tgschultz!UserNick@047-034-058-084.res.spectrum.com
Come to think of it, result location semantics might mean I *can* pass a pointer to self...

1639074392
tgschultz!UserNick@047-034-058-084.res.spectrum.com
I wish it were more explicit though

1639074927
_javyre!~javyre@2001:470:69fc:105::2162
Obvious thought: You can hide it by allocating the frame+state as fields of your main structure, but then of course the user can't copy it around. Either way you'd have all the same issues with just a frame and no state struct since it needs to be allocated somewhere

1639075046
_javyre!~javyre@2001:470:69fc:105::2162
There's not much loss in requiring the struct to exist before calling init on it. I'd see the API as equally elegant to returning the struct in init. The stdlib mixes both styles

1639075619
tgschultz!UserNick@047-034-058-084.res.spectrum.com
this is true enough

1639075703
tgschultz!UserNick@047-034-058-084.res.spectrum.com
it would be possible if there were a space in the @frame that could be accessed for things like this though. I think I'll just set it up so the struct has to exist before init. Thanks for talking it over with me.

1639076309
_javyre!~javyre@2001:470:69fc:105::2162
Np. Here's a recentish version of my code btw: https://github.com/Javyre/wf-lua/blob/impl-ipc/src/IpcServer.zig

1639076350
_javyre!~javyre@2001:470:69fc:105::2162
The main loop state and frame are allocated on the stack but not the client connection handlers

1639089711
andrewrk!~andrewrk@mail.ziglang.org
tgschultz, if you use a local in an async function it has the same lifetime as the @Frame()

1639089741
andrewrk!~andrewrk@mail.ziglang.org
I'm sure I'm missing something but you said pass it in and out- that is a parameter and the return value, respectively, no?

1639090831
andrewrk!~andrewrk@mail.ziglang.org
ifreund, would you mind giving the new dynamic musl stubs a spin?

1639090844
andrewrk!~andrewrk@mail.ziglang.org
I expect them to be strictly better

1639092722
andrewrk!~andrewrk@mail.ziglang.org
also, how are we looking for river with zig 0.9.0? any zig issues I should look into?

