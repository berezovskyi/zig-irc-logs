1637007147
andrewrk!~andrewrk@mail.ziglang.org
there are some improvements to https://ziglang.org/perf/ 

1637007153
andrewrk!~andrewrk@mail.ziglang.org
* more accurate measurements

1637007161
andrewrk!~andrewrk@mail.ziglang.org
* I ran the backfill script again to correct the data

1637007166
andrewrk!~andrewrk@mail.ziglang.org
* integrated better with the website

1637007172
andrewrk!~andrewrk@mail.ziglang.org
* Y axes start from 0

1637007535
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
andrewrk: nice, one thing I would really like would be a small widget above each graph that allows for selecting a single trace (so that they are not mixed on the same graph/axis), is the idea sound to you? I could try to hack it up at the end of the week if so

1637007714
andrewrk!~andrewrk@mail.ziglang.org
yes that sounds useful

1637007765
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
alright, back to the c backend

1637008953
companion_cube!~simon@user/companion-cube
what does this page use for the plots?

1637008964
andrewrk!~andrewrk@mail.ziglang.org
D3

1637008970
companion_cube!~simon@user/companion-cube
oh directly? damn

1637008980
andrewrk!~andrewrk@mail.ziglang.org
what do you mean? that's already a layer of abstraction :)

1637009002
companion_cube!~simon@user/companion-cube
it just means you're already far on the learning curve is all :)

1637009007
companion_cube!~simon@user/companion-cube
I've been eyeballing a bit vega/vega-lite

1637009152
ikskuh!~xq@v43666.php-friends.de
andrewrk: which build mode do these graphs use?

1637009182
andrewrk!~andrewrk@mail.ziglang.org
-OReleaseFast

1637009204
andrewrk!~andrewrk@mail.ziglang.org
it can be configured per-benchmark, but all of these are using that one

1637009228
ikskuh!~xq@v43666.php-friends.de
okay, just curious

1637009231
andrewrk!~andrewrk@mail.ziglang.org
if you want to see some more graphs, submit more benchmarks to https://github.com/ziglang/gotta-go-fast/ :)

1637009232
ikskuh!~xq@v43666.php-friends.de
it's a important datapoint ^^

1637009245
andrewrk!~andrewrk@mail.ziglang.org
yes I should make it display that for each graph, good call

1637010047
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
 @divFloor(numerator: T, denominator: T) T

1637010074
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
the docs report this pseudo signature for divFloor, is T supposed to be the same for numerator and denominator?

1637010177
andrewrk!~andrewrk@mail.ziglang.org
lumo_e, as far as types are concerned, it works the same as the rules for `numerator / denominator` syntax

1637010230
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
I see, thanks

1637010252
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
I'm lowering it to C code, so I need to handle the case of different types 

1637010809
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
    extern fn LLVMBuildFDiv(*const Builder, LHS: *const Value, RHS: *const Value, Name: [*:0]const u8) *const Value;

1637010817
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
the llvm backend has an easy life with this one lol

1637011054
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
wait... shouldn't be that hard

1637011099
lumo_e!~enrico@2001:b07:5d38:4002:5ce7:bc71:fd1c:e3fa
the result of @divFloor should already be of the right type, I just have to cast the arguments to that type

