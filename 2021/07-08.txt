1625716250
andrewrk!~andrewrk@mail.ziglang.org
I'm going to be a bit unavailable in general over the next few months as I really focus on self hosted. I'm serious on shipping it with 0.9.0

1625716317
andrewrk!~andrewrk@mail.ziglang.org
speaking of, #9325 (inferred error sets) is ready now, and I'm going to start on air-memory-layout

1625716492
_wilsonk!~wilsonk@S0106001b11030a94.cg.shawcable.net
nvm, I see that I can just use '_ = unused_var_name;' to suppress

1625717755
discipulus!~discipulu@user/discipulus
I'm late to the braces {} conversation. In university, my partner forgot to add braces to an if block that I wrote without them when coding a linux kernel module. We ended up causing a triple-fault during boot. So after that, I tend to use curly braces even for single statment if blocks because someone else might forget to add it later. 

1625718311
andrewrk!~andrewrk@mail.ziglang.org
discipulus, it won't be possible to make that mistake in zig when https://github.com/ziglang/zig/issues/35 is implemented

1625718930
discipulus!~discipulu@user/discipulus
I'm afraid the very last example in the comments, where the second statement isn't indented, could be a programmer mistake like the one I mentioned. If my partner saw the curly braces, he would have known to put the statment inside them.

1625721092
andrewrk!~andrewrk@mail.ziglang.org
discipulus, I really don't see how someone would make that mistake - it's visibly outdented

1625721126
andrewrk!~andrewrk@mail.ziglang.org
2 independent channels are telling you about the control flow here: 1. the grammar, 2. the indentation

1625721150
andrewrk!~andrewrk@mail.ziglang.org
I would challenge you to dig up the actual example that you ran into in university

1625721221
discipulus!~discipulu@user/discipulus
Does #35 consider deeply nested scenarios?

1625724310
discipulus!~discipulu@user/discipulus
I see what you're saying now. My partner most likely indented his code which #35 would have helped.

1625743294
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
in build.zig, how do I set the cwd of a test? I tried `var t = b.addTest(â€¦); var t_cmd = t.run(); t_cmd.cwd = "â€¦";` but apparently, I can't `run()` a test

1625743388
ikskuh!~xq@2a0d:5940:6:163::ad7e
why does your test need a working directory? :D

1625743402
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
to load the test data

1625743451
ikskuh!~xq@2a0d:5940:6:163::ad7e
afaik tests will be run in the project root

1625743530
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
yes, that is what I try to change. otherwise, the relative paths in `test/foo.zig` will start with `test/` which is counter-intuitive

1625743546
ikskuh!~xq@2a0d:5940:6:163::ad7e
ah

1625743557
ikskuh!~xq@2a0d:5940:6:163::ad7e
right now, it's not supported by the build system, you have to change that a bit

1625743579
ikskuh!~xq@2a0d:5940:6:163::ad7e
i'll point you to the right bits

1625743605
ikskuh!~xq@2a0d:5940:6:163::ad7e
test invocation: https://github.com/ziglang/zig/blob/master/lib/std/build.zig#L2780

1625743631
ikskuh!~xq@2a0d:5940:6:163::ad7e
replace this with a call to https://github.com/ziglang/zig/blob/master/lib/std/build.zig#L909

1625743647
ikskuh!~xq@2a0d:5940:6:163::ad7e
and add something like a `test_cwd: ?[]const u8 = null,` field for that

1625743865
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
right now I am not on zig master and I'd like to avoid thatâ€¦ I guess I could `addSystemCommand(&[_][]const u8{b.zig_exe, "test", "foo.zig")` and set that step's cwd

1625743907
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
on second thought, I'd lose everything else I configure in build.zig with that

1625743941
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I'll just change the paths for now

1625747082
kiedtl!~kiedtl@kisslinux/kiedtl
any way to format a comptime_int into a @compileError? I'm trying to print the result of @sizeOf()

1625747093
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
std.fmt.comptimePrint

1625747099
kiedtl!~kiedtl@kisslinux/kiedtl
oh thanks

1625747292
kiedtl!~kiedtl@kisslinux/kiedtl
...oh my, this struct is 26kB

1625747309
kiedtl!~kiedtl@kisslinux/kiedtl
and I have hundreds of these which I access all the time

1625747309
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
use @compileLog for stuff like that

1625747316
kiedtl!~kiedtl@kisslinux/kiedtl
g-w1: still on 0.7.1

1625747319
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
@compileLog(@sizeOf(thing))

1625747327
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
kiedtl: and?

1625747336
kiedtl!~kiedtl@kisslinux/kiedtl
Wait, wasn't that added in 0.8.0?

1625747342
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no

1625747363
kiedtl!~kiedtl@kisslinux/kiedtl
...Oh. darn.

1625747368
kiedtl!~kiedtl@kisslinux/kiedtl
thanks for pointing that out

1625747388
kiedtl!~kiedtl@kisslinux/kiedtl
I think I recall reading something about @compileLog in the release notes for 0.8.0 and must've assumed it was just added for some reason

1625747455
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hm

1625770283
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I finally had a look at #9105 - if you rebase and fix the cosmetic stuff I mentioned just now, I'm happy to give it a merge

1625775345
andrewrk!~andrewrk@mail.ziglang.org
I'm going to do the changes and merge it because I'm about to start working on reworking the stage2 AIR memory layout which will cause conflicts

1625775962
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh cool, thanks

1625779355
andrewrk!~andrewrk@mail.ziglang.org
g-w1, ah you know what the plan9 stuff is missing? test coverage

1625779391
andrewrk!~andrewrk@mail.ziglang.org
I'll still merge it right now, but there's a chance that it'll regress due to lack of test coverage and then if regressions happen + no test coverage + no active maintainer, that's when I start to get trigger happy with the delete button

1625779411
andrewrk!~andrewrk@mail.ziglang.org
anyway just saying if you want the code to have a better chance of survival, add some test coverage :)

1625779439
andrewrk!~andrewrk@mail.ziglang.org
the test harness lets you cross compile stuff. the tests don't necessarily have to be able to execute the resulting binaries

1625779634
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, i'll do that

1625779647
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
rebasing now with changes, then i'll push

1625779652
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
then i'll figure out test stuff

1625779702
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I think the way to go for execution is to setup a plan9 cpu server that has an api that takes files and executes them (with auth of course), and then returns the result 

1625779711
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
until it gets self-hosted ofc

1625779722
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I already did the merge

1625779736
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
pushed?

1625779740
andrewrk!~andrewrk@mail.ziglang.org
if you tick the box to let contributors force push to your branch I'll do that and it will say "Merged" 

1625779749
andrewrk!~andrewrk@mail.ziglang.org
otherwise I'll close it and do it with git 

1625779755
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i ticked the box

1625779782
andrewrk!~andrewrk@mail.ziglang.org
https://clbin.com/gHF9H

1625779783
andrewrk!~andrewrk@mail.ziglang.org
huh

1625779798
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
plan9 not plan-9 :D

1625779811
andrewrk!~andrewrk@mail.ziglang.org
oops :)

1625779847
andrewrk!~andrewrk@mail.ziglang.org
sorry I would have waited but I just wanted to get started on stage2 air memory layout without conflicting with your work

1625779864
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no problem, gotta go fast

1625779867
andrewrk!~andrewrk@mail.ziglang.org
haha

1625779899
andrewrk!~andrewrk@mail.ziglang.org
I think I'll stream it

1625779902
andrewrk!~andrewrk@mail.ziglang.org
the beginning at least

1625779945
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i can watch for a little ðŸ˜ƒ

1625780304
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, this is a really good idea to add tests even if not running

1625780833
andrewrk!~andrewrk@mail.ziglang.org
in about 15 min

1625783282
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
wow, it was a piece of cake to add tests

1625785250
Nulo!~Nulo@user/nulo
There's no date formatting things in std, right?

1625786106
Nulo!~Nulo@user/nulo
Is there a way to match against error unions on a switch(error)?

1625786141
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if (errunion) |payload| { } else |err| { }

1625786654
Nulo!~Nulo@user/nulo
I'm confused on where that's supposed to go

1625786702
Nulo!~Nulo@user/nulo
switch (error) { std.os.WriteError => {} } // This is what I want

1625786915
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, then you meant match against error sets

1625786922
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
this is accepted, but not implemented yet

1625786928
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
just match against the indiv errors for now

1625787024
noam!~noam@104.232.42.247
g-w1: you can just have a server that runs CPU+auth+cwfs, and use the FUSE p9 thing to write binaries

1625787038
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what about run them?

1625787073
noam!~noam@104.232.42.247
`rcpu -h remote -c /tmp/foo`

1625787080
noam!~noam@104.232.42.247
or drawterm, I guess

1625787086
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, cool

1625787099
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
next step is setting up a cpu+auth+cwfs server then

1625787735
kurufu!~kurufu@user/kurufu
when trying to use zig as a preprocessor on an .rc file it seems it cannot find the windows headers? invoking `zig cc --target=x86_64-windows-gnu -E -xc-header ./rcfile.rc' results in failure to include #include <winver.h> even though this header is in zig/libc/include/any-windows-any/winver.h

1625787811
kurufu!~kurufu@user/kurufu
without -xc-header it appears to not throw any error, but I think the c-header as output is required when compared with gcc.

