1613611321
ed_t
in zig on linux are async calls using threads or cooperative multitasking (or both)?

1613611754
daurnimator
ed_t: async is only tangentially related to those

1613611773
daurnimator
ed_t: what you probably mean to ask about is `io_mode = .evented`

1613611860
ed_t
I was thinking about preallocation of structs that need complex (and slow) initialization using async/await

1613612303
geemili
ed_t: if you haven't you might want to check out the sectiopn on ziglearn:

1613612371
geemili
The short of it is that async doesn't automatically finish itself, you need to make sure that the async frames are saved somewhere and completed

1613612384
ed_t
so coroutines

1613612400
ed_t
not threads, at least for now

1613612456
geemili
Yes

1613612487
ed_t
thanks - it explains what I was seeing.

1613612620
ed_t
would you know if there are plans to change this before 1.0

1613612867
ed_t
I eventually had to put a preprocessor on the compiler to insert susends() in potenially long loops so as not to cause stalls....

1613612875
ed_t
suspends()

1613613259
geemili
I don't think there is? If you want to do some threading you can use `std.Thread`

1613613288
geemili
`std.Thread.spawn` to be specific

1613613390
ed_t
thanks

1613613541
geemili
The std library also provides a multithreaded event loop for async tasks if you enable it

1613613570
geemili
What daurnimator referred to earlier as `io_mode = .evented`

1613613721
daurnimator
ed_t: `async` in zig just means that a function should be

1613615571
ed_t
what I wanted for this case was Thread.spawn.  In my test program, just moving the xterm update to a thread run about 30% faster.

1613615620
ed_t
coroutines using zig's async, are great but not for what i was trying to do.

1613643984
johnLate
sometimes the solution/workaround is so simple... Xlib has function equivalents for (most of?) its macros -> I just needed to use the XDefaultRootWindow function instead of the DefaultRootWindow macro

1613645879
ifreund
... why does the macro exist then

1613645891
ifreund
probably some legacy reason

1613646811
johnLate
ifreund: "The following lists the C language macros, their corresponding function equivalents that are for other language bindings, and what data they both can return.

1613646818
johnLate


1613646819
shachaf
The macros are for C, and the other functions are meant for this situation.

1613646840
shachaf
"This file makes full definitions of routines for each macro. We do not expect C programs to use these, but other languages may need them."

1613646950
shachaf
inline wasn't part of C89, and this code is older than 1989 anyway.

1613646970
shachaf
So macros were presumably the reasonable way to do this.

1613647175
ifreund
so "some legacy reason" seems to be right :P

1613655472
forgot-password
Did any of you ever write macos-specific code in objective-c and added that to their Zig program? I'd rather not go through the hassle of calling Objective-C APIs from Zig

1613656180
talin
hello. i sometimes read that zig is more like c than rust. any thoughts on why that is? also, which of the problems inherit in c does zig solve?

1613656440
ifreund
talin: zig is far simpler than Rust which places it closer to C on the complexity scale

1613656472
ifreund
zig's type system is much more powerful than C's and makes writing correct code easier/bugs harder

1613656536
ifreund
zig also allows you to use types as first class values at compile time, which allows generic code without great complexity

1613656558
ifreund
and unlike C, zig has no preprocessor or macros nor any need for them

1613656965
ed_t
Unreachable at /tmp/makepkg/zig-git/src/zig/src/stage1/analyze.cpp:7263 in const_values_equal. This is a bug in the Zig compiler.thread 1521449 panic:

1613657000
ed_t
any ideas on what to clean up?

1613657259
ifreund
impossible to say without seeing code

1613657277
ed_t
I am using the git version, guess I will rebuild it

1613657734
ed_t
after building zig it complains:

1613657737
ed_t
Semantic Analysis [303/674] /home/ed/zig/zbox/src/prim.zig:304:1: error: invalid token: 'inline'

1613657737
ed_t
inline fn state() *TermState {

1613657753
ed_t
which is in a library I am using

1613657816
ed_t
after removing the inline from the library I get: Unreachable at /tmp/makepkg/zig-git/src/zig/src/stage1/analyze.cpp:7279 in const_values_equal. This is a bug in the Zig compiler.thread 1540976 panic:

1613657817
ed_t
Unable to dump stack trace: debug info stripped

1613658023
g-w1
run zig fmt on the code that has the inline

1613658034
g-w1
it recently changed to a type of calling convention

1613658584
ed_t
zig fmt prim.zig does not complain

1613658778
ed_t
after restoring the inline to prim.zig, building just panics and I do not see the problem in prim.zig

1613658811
g-w1
zig fmt should change the inline to the correct callingconv form

1613658845
ed_t
so just zig fmt prim.zig ?

1613658946
g-w1
with the inline in it

1613658952
ed_t
yes

1613658962
g-w1
so yes

1613659089
ed_t
would a trace back help?  If so, let me know what has to change in the build's make files.  I am on arch linux so it should not be too hard to do.

1613660150
talin
ifreund: thank you. does it help you avoid memory corruption errors like rust? does it have something similar to a borrow checker? and what about multithreading, does it aid you in enabling "fearless concurrency"? i am a bit disillusioned with rust, which is why i ask. wasted too many years obsessing over language rather than getting stuff done when i worked with C++ in the past

1613660369
ifreund
talin: zig has no borrow checker, its path to safety is largely based on runtime checks for illegal behavior in safe build modes and good tooling. The general purpose allocator from the standard library does double free and leak detection for example

1613660457
g-w1
ed_t a back trace would help although did zig fmt change the inline to callingconv(.Inline)?

1613660471
ifreund
when it comes to threads, zig currently doesn't have any massive advantage over C/C++. Zig's defer certainly makes relasing your locks regardless of control flow easier though

1613660515
ifreund
also "fearless concurrency" is a falsehood IMO, rust's borrow checker/type system only protects against data races

1613660563
ifreund
when it comes to productivity, I feel more productive in Zig than any other low level language I've tried

1613660581
ifreund
(I've written my fair share of C, C++ and Rust)

1613660626
ifreund
zig's also super fast to pick up if you already know C in my experience

1613660779
companion_cube
ifreund: real question: what other kind of races do you have?

1613660855
companion_cube
deadlocks I can see, but what other race conditions?

1613661069
ifreund
anything involving syscalls

1613661082
ifreund
e.g. modify a file

1613661093
ifreund
or send something over the network

1613661139
ifreund
though I do admit that eliminating data races statically is no small feat and one of the best reasons one may want to use rust

1613661173
companion_cube
I mean, yes, it's like types in general, it works within the program

1613661198
companion_cube
(tbh for concurrent modifications of files I'd directly reach for sqlite, posix is a nightmare)

1613661277
ifreund
my point is mostly that the "fearless concurrency" has a big caveat that often gets ignored. You mentioned deadlocks as well, which are very much within the logic of the program and independant from the OS

1613661351
companion_cube
yep

1613661363
companion_cube
I think it's still quite valid when contrasted with threads in C or C++

1613661383
companion_cube
deadlocks when you deal with

1613661418
companion_cube
like, you can have bugs, but just starting a few threads to do stuff is now pretty pedestrian, I'd say

1613661532
ifreund
I think the cases in which threads are really necessary are few and far between tbh. Usually they just cause unecessary complexity without significant benefit

1613662152
companion_cube
idk, for me it's still the simplest form of concurrency if you're not on erlang/beam

1613662536
fengb
Arguably, erlang processes are an implementation of the threading model

1613662553
fengb
With less explicit sharing and more message passing, but still

1613662561
fengb
Less implicit*

1613662597
companion_cube
yeah

1613662609
companion_cube
(the only implicit sharing is that of big immutable binary blobs iirc)

1613662631
companion_cube
in a way rust is the same, there's no implicit sharing, and that's why it's safer

1613669309
forgot-password
Since my question didn't get any answers earlier I figured that I'll just give it another shot: Did anyone here ever incorporate macos-specific objective-c code into their Zig application? And if yes, how did you do it?

1613670939
Swahili
Q: Multiline string literals in Zig is supported by \\, there's no other way right?

1613670949
ifreund
that's right

1613670981
ifreund
though you can of course do "foo" ++ "bar" ++ "zag" over multiple lines

1613671001
ifreund
but proper multiline strings are cleaner

1613671012
Swahili
Thanks!

1613671747
forgot-password
What's the best way to get a [:0]const u8 from a []const u8 at comptime?

1613671787
forgot-password
Doing `name ++ "\0"` gives me an error

1613672093
ifreund
forgot-password: are you sure name is comptime known?

1613672122
ifreund
oh, \0 isn't a thing, you want "\x00"

1613672792
forgot-password
ifreund: Ah yes, that fixed it. Thanks! :)

1613676060
ed_t
I have a fn with the sig: pub fn initRest(self:*Hash, pop:usize) !void {

1613676179
ed_t
I want to call it using: var tNewgrid = try std.Thread.spawn(alive.items.len, newgrid.initRest);

1613676193
ed_t
which fails (not unexpectedly)

1613676208
ed_t
how should I be calling this?

1613676270
ed_t
I want to call it using: var tNewgrid = try std.Thread.spawn(alive.items.len, Hash.initRest); also fails

1613676288
ed_t
opps

1613676313
ed_t
I want to call it using: var tNewgrid = try std.Thread.spawn(.{newgrid, alive.items.len}, Hash.initRest); also fails

1613676446
ed_t
this is related to the panic in the zig compiler mentioned here this morning

1613677909
ifreund
ed_t: see the doc comment of std.Thread

1613677921
ifreund
startFn must have type fn startFn(@TypeOf(context)) T

1613678306
ed_t
pub fn spawn(context: anytype, comptime startFn: anytype) from std.Thread

1613678371
ed_t
what I understand this to mean (I may be wrong), is that context should be the sig of the startFn

1613678391
ed_t
what am I missing/missunderstanding?

1613678927
ifreund
startFn() must take exactly 1 argument that is the same as the type of context

1613678969
ifreund
and the return type of startFn() must be as described in the doc comment as well

1613679189
ed_t
so the answer is I need a wrapper...

1613679302
ed_t
and using tNewgrid = try std.Thread.spawn(alive.items.len, newgrid.initRest); triggers a panic instead of an error

1613681186
fengb
Probably a boundFn bug

1613681194
fengb
Don't pass those around :P

1613683330
viashimo
I'm trying to have some code only execute for debug builds. I thought checking `std.builtin.mode == .Debug` would work, but when I compile with -Drelease-fast=true, the code is still executed. what's the correct way - if there is one - to do this?

1613683768
ifreund
that is the correct way

1613683832
ifreund
and it works fine for me

1613684257
viashimo
hmm, okay. I'm not sure what I've done wrong then. thanks ifreund

1613684295
ifreund
do a quick sanity test with hello world if you like

1613684321
ifreund
zig build should also print out the full command it used

1613684335
ifreund
see if it passes -OReleaseFast properly

1613684348
ifreund
if not then it's a bug in your build.zig

1613684700
viashimo
my build.zig was missing both setTarget and setBuildMode (c.f. helloworld init-exe)

1613684730
viashimo
ifreund: thanks again

1613684735
ifreund
no problem!

1613684974
zags
Tracy on macos is shit, any tried running it in docker?

1613686579
v0idify
will compiling memory usage be reduced on stage2? by ~what magnitude

1613686591
ikskuh
"a lot"

1613686597
v0idify
sounds good

1613686629
v0idify
Welcome to the ZLS configuration wizard! (insert mage emoji here)

1613686634
ikskuh
sweet

1613686652
ikskuh
andrew is currently reworking the parser to use way less memory and wants to replace other parts of the compiler with that technique as well

1613686663
ifreund
stage2 will be way faster and more resource efficient than stage1 yeah

1613686679
ikskuh
⚡️⚡️⚡️

1613686730
v0idify
(insert zap emoji here) (insert zap emoji here) (insert zap emoji here)

1613686788
v0idify
in all seriousness, that's awesome. probably will test the development experience in a netbook when stage2 is a bit more stable... it doesn't support i686 yet right?

1613686793
v0idify
will it support i686? :|

1613686823
ifreund
it will support everything

1613686833
v0idify
all the things

1613686845
v0idify
right now it's just amd64 and aarch64 right?

1613686848
ifreund
but stage2 is definitely not usable yet, still lots of work to do

1613687044
fengb
i686 = Pentium 4?

1613687144
ifreund
x86 not x86_64

1613687226
v0idify
^ that's what i mean, i read there

1613687237
v0idify
there's also i386 and honestly it just confuses me

1613687270
fengb
i386 will be renamed to x86. The default CPU is Pentium 4

1613687292
v0idify
okay

1613687738
v0idify
how should i use pkg-config on build.zig

1613687824
v0idify
linkSystemLibrary

1613687838
v0idify
oh, but that's just -l, it doesn't include -I

1613687870
ifreund
it should

1613687898
ifreund
if you're doing something weird you may need addIncludeDir though

1613688148
v0idify
yuup that works

1613688155
v0idify
that's awesome..

1613688175
v0idify
does it use a c lib or does it parse the files directly?

1613691037
forgot-password
Is it possible to get a path to the binary itself when my code is lodaded as a shared library?

1613691053
forgot-password
Like std.fs.selfExePath

1613691424
andrewrk
it becomes much less portable for that use case

1613691490
forgot-password
What exactly do you mean? It's only relevant for macOS in thise case

1613691553
andrewrk
ah, I meant if you were targeting more than only macOS you might have issues

1613691575
andrewrk
you want the path to the dylib? I don't think we have support for that in std lib and I have not looked into what implementing that looks like on macOS

1613691953
forgot-password
Alright, I'll look up how to do that on macOS. Thanks for your answer

1613692630
v0idify
this is outdated

1613692638
v0idify
a notable change would be the inline syntax change

1613692749
andrewrk
v0idify, that is a community-maintained wiki page; if it gets too old I'll delete it

