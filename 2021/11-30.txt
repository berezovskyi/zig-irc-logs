1638235227
travis_griggs!~travis_gr@remote.nelsonirrigation.com
when i run zig test <foo.zig>, I don't get the Test[1/1] ... lines that the documentation shows in the examples. Just the All N tests pass summary. Am I missing something? or that's a known issue?

1638235994
squeek502!~squeek502@user/squeek502
travis_griggs, https://github.com/ziglang/zig/issues/10203

1638236821
andrewrk!~andrewrk@mail.ziglang.org
there's no issue, it has a command line progress bar

1638238622
travis_griggs!~travis_gr@remote.nelsonirrigation.com
thanks @squ

1638238641
travis_griggs!~travis_gr@remote.nelsonirrigation.com
thanks squeek502

1638238678
squeek502!~squeek502@user/squeek502
to be specific, https://github.com/ziglang/zig/issues/10203#issuecomment-975209686 explains the current behavior

1638238695
travis_griggs!~travis_gr@remote.nelsonirrigation.com
wouldn't you like the experience one has following the fine documentation to match what's printed though andrewrk?

1638238717
andrewrk!~andrewrk@mail.ziglang.org
it does match, the docs are piping the output to a buffer

1638238772
andrewrk!~andrewrk@mail.ziglang.org
same thing happens locally if you pipe the output to a buffer

1638238839
travis_griggs!~travis_gr@remote.nelsonirrigation.com
o k

1638239703
travis_griggs!~travis_gr@remote.nelsonirrigation.com
but if you type what you see in the document in a regular terminal, you won't see what you see in the docs. i don't honestly care what the buffering details are or whether output is stderr or stdout. i'm just pointing out the naive first time user experience

1638241051
discipulus!~discipulu@user/discipulus
the documentation subtly mentions the behavior: "Note that, when the test runner program's standard error is output to the terminal, these lines are cleared when a test succeeds." https://ziglang.org/documentation/master/#Zig-Test where it describes the output. 

1638262231
Franciman!~Franciman@mx1.fracta.dev
can I have slices of length 0?

1638262236
Franciman!~Franciman@mx1.fracta.dev
if so, how to initialize them?

1638262475
freshcoffee!~fresh@user/freshcoffee
`var x: []u32 = &[_]u32{};`

1638262774
Franciman!~Franciman@mx1.fracta.dev
uh neat

1638262778
Franciman!~Franciman@mx1.fracta.dev
damn

1638262780
Franciman!~Franciman@mx1.fracta.dev
thanks

1638263278
Franciman!~Franciman@mx1.fracta.dev
one more question

1638263415
Franciman!~Franciman@mx1.fracta.dev
when I define const Ty = union(enum) { ... };

1638263435
Franciman!~Franciman@mx1.fracta.dev
is there a compact way of checking if var x: Ty is a particular variant?

1638263439
Franciman!~Franciman@mx1.fracta.dev
or do I need to switch?

1638263456
Franciman!~Franciman@mx1.fracta.dev
for example if I use an explicit enum tag, I can do the test: x == .tag_name

1638263465
Franciman!~Franciman@mx1.fracta.dev
but when using an implicit enum tag, I get error

1638263542
Franciman!~Franciman@mx1.fracta.dev
nvm, I am dumb as hell

1638268067
viric!~viric@static-253-33-60-95.ipcom.comunitel.net
can zig work on cygwin?

1638268078
viric!~viric@static-253-33-60-95.ipcom.comunitel.net
to build programs for cygwin I mean

1638273114
jcmoyer!~jcmoyer@user/jcmoyer
is there a way to tell the constness of an array from its type alone, in a comptime context? An array declared with 'const' is immutable, but an array declared with 'var' is not. If I have a `fn f(x: anytype) type` and x is an array, I would like to return a different type from f depending on whether or not x is mutable.

1638273151
jcmoyer!~jcmoyer@user/jcmoyer
as far as I can tell, var and const both produce e.g. [3]u32 and TypeInfo.Array doesn't have an is_const field anyways

1638273283
daurnimator!~daurnimat@vultr.daurnimator.com
jcmoyer: all function parameters are const

1638273466
jcmoyer!~jcmoyer@user/jcmoyer
ah yeah that detail slipped my mind, I guess I can just use a pointer in this context

1638273468
jcmoyer!~jcmoyer@user/jcmoyer
thanks

1638282397
Franciman!~Franciman@mx1.fracta.dev
doing good progress on my interpreter

1638282399
Franciman!~Franciman@mx1.fracta.dev
I am happy

1638282404
Franciman!~Franciman@mx1.fracta.dev
thanks zig community

1638286464
ikskuh!~xq@v43666.php-friends.de
https://twitter.com/andy_kelley/status/1367227835434237952/photo/1

1638286473
ikskuh!~xq@v43666.php-friends.de
i just found this and it's hillarious :)

1638286921
Franciman!~Franciman@mx1.fracta.dev
ahah

1638288399
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
>speaking of performance zig is faster than c

1638288399
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
why was this deleted?

1638288403
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
from the site

1638288451
dutchie!~dutchie@user/dutchie
reorganised onto https://ziglang.org/learn/overview/

1638288512
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
thanks

1638288553
Franciman!~Franciman@mx1.fracta.dev
how does it achieve faster speed?

1638288669
ikskuh!~xq@v43666.php-friends.de
Franciman: better compilation defaults

1638288675
ikskuh!~xq@v43666.php-friends.de
default compile is always for native cpu

1638288680
ikskuh!~xq@v43666.php-friends.de
and cross-compiles are explicitly stated

1638288693
Franciman!~Franciman@mx1.fracta.dev
uhm

1638288695
Franciman!~Franciman@mx1.fracta.dev
i see

1638288697
Franciman!~Franciman@mx1.fracta.dev
nice

1638288709
ikskuh!~xq@v43666.php-friends.de
also tiny differences in semantics

1638289167
ifreund!~ifreund@user/ifreund
the performance ceiling is the same for all languages without a runtime and direct access to the hardware

1638289188
ifreund!~ifreund@user/ifreund
zig makes it easier to get close to that ceiling by default

1638289201
ifreund!~ifreund@user/ifreund
and encourages more performant patterns

1638289231
ikskuh!~xq@v43666.php-friends.de
well said

1638293252
nolanderc!~nolanderc@c83-249-13-208.bredband.tele2.se
Where can I find the tool that was used to generate the std API docs? https://ziglang.org/documentation/master/std/

1638294402
luuk!~luuk@user/luuk
nolanderc: https://github.com/ziglang/zig/blob/master/doc/docgen.zig

1638294473
Franciman!~Franciman@mx1.fracta.dev
looool plenty of cache misses in my code

1638294475
Franciman!~Franciman@mx1.fracta.dev
ahahahah

1638294481
Franciman!~Franciman@mx1.fracta.dev
it is super slow

1638294494
travis_griggs!~travis_gr@remote.nelsonirrigation.com
discipulus, thanks for the note on the test behavior. i think that's pretty good. the first time linear reader doesn't see that, but it is well documented. so that's cool

1638294496
Franciman!~Franciman@mx1.fracta.dev
time to get andrewrk's talk at work!

1638295724
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
is andrew no longer on twitch? where can i watch him speak?

1638296172
ifreund!~ifreund@user/ifreund
treeshateorcs[m]: he's still on twitch afaik, the talk being referred to here was at handmade seattle though: https://media.handmade-seattle.com/practical-data-oriented-design/

1638296209
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
twitch.tv/superjoe30 404's

1638296300
luuk!~luuk@user/luuk
treeshateorcs[m]:https://www.twitch.tv/andrewrok

1638296326
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
oooh, thank you luuk

1638296351
luuk!~luuk@user/luuk
You can rewatch some older streams at: https://vimeo.com/andrewrk

1638296388
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
thanks

1638296406
luuk!~luuk@user/luuk
You're welcome :)

1638300787
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
I'm testing zig 0.7.1...

1638300800
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
std.build.Builder manual says fn addSharedLibrary(self: *Builder, name: []const u8, root_src: ?[]const u8, kind: build.SharedLibKind) 

1638300800
Franciman!~Franciman@mx1.fracta.dev
I crashed the haskell implementation of my interpreter

1638300802
Franciman!~Franciman@mx1.fracta.dev
it owns

1638300807
Franciman!~Franciman@mx1.fracta.dev
it destroys it

1638300817
Franciman!~Franciman@mx1.fracta.dev
the problem is that haskell's runtime is better than me at managing memory 

1638300821
Franciman!~Franciman@mx1.fracta.dev
when big amounts are needed

1638300822
Franciman!~Franciman@mx1.fracta.dev
T.T

1638300851
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
but src says kind: LibExeObjStep.SharedLibKind

1638300971
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
same on 0.8.1

1638300985
Franciman!~Franciman@mx1.fracta.dev
sorry viric I was hyped I didn't read your comment

1638300988
Franciman!~Franciman@mx1.fracta.dev
my apologies

1638300995
Franciman!~Franciman@mx1.fracta.dev
your message*

1638301052
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
https://0x0.st/-hKj.png

1638301080
treeshateorcs[m]!~treeshate@2001:470:69fc:105::1:41c4
i think the abundance of links in the docs somewhat contradicts the zig's promise of no hidden control flow ðŸ˜€

1638301081
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
Franciman: no problem. parallel conversations

1638301239
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
finally I built a versioned shared lib. unversioned I failed to choose.

1638301266
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
and the shared lib ends up exporting a lot more dynamic symbols than my public function alone...

1638301684
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
ah I see https://github.com/ziglang/zig/issues/9762

1638304536
Franciman!~Franciman@mx1.fracta.dev
how do you check where branch misses are happening in code?

1638304541
Franciman!~Franciman@mx1.fracta.dev
does zig have any super debugging?

1638304617
Franciman!~Franciman@mx1.fracta.dev
well nvm

1638304621
Franciman!~Franciman@mx1.fracta.dev
I should do something for the cache misses

1638304623
Franciman!~Franciman@mx1.fracta.dev
holy

1638305513
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
Franciman: cachegrind can tell I guess

1638305524
Franciman!~Franciman@mx1.fracta.dev
tusen takk

1638307848
travis_griggs!~travis_gr@remote.nelsonirrigation.com
I just got to the "this is how we do generics in Zig" part. This is actually kinda cool (I generally swear when I get to <generics in C++, Swift, Kotlin, et al). It reminds me of some thought experiments Gilad Bracha once wrote about for Dart/NewSpeak. Anyone know where the inspiration to do it this way came from?

1638308360
andrewrk!~andrewrk@mail.ziglang.org
travis_griggs, I shared my reasoning as part of this talk: https://www.youtube.com/watch?v=Gv2I7qTux7g

1638308991
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
One thing I wished zig had was some solution for the default pointer aliasing in C/C++

1638309019
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
I have no idea how though.

1638309144
Franciman!~Franciman@mx1.fracta.dev
ok I am unable to read cachegrid and makesense of its output

1638309148
Franciman!~Franciman@mx1.fracta.dev
lol

1638309161
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
Franciman: use kcachegrind

1638309166
Franciman!~Franciman@mx1.fracta.dev
yes

1638309170
Franciman!~Franciman@mx1.fracta.dev
i can't make sense of it

1638309176
Franciman!~Franciman@mx1.fracta.dev
ahah

1638309303
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
I think valgrind will be more detailed than what perf counters can give.

1638309460
Franciman!~Franciman@mx1.fracta.dev
ah wait I understand something

1638309463
Franciman!~Franciman@mx1.fracta.dev
thanks viric 

1638309555
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
good luck

1638309556
Franciman!~Franciman@mx1.fracta.dev
I am not getting advantage of the fact that my stack is only accessed at the end

1638309574
Franciman!~Franciman@mx1.fracta.dev
I need to tweak the array_list to cache pointers near the end

1638309703
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
aliasing is so complicated... https://accu.org/journals/overload/28/160/anonymous/

1638309712
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
very annoying

1638310068
ifreund!~ifreund@user/ifreund
indeed :/

1638310144
ifreund!~ifreund@user/ifreund
Zig doesn't have a spec yet though and has the benefit of hindsight here, I expect that what we land on long term will be a good bit simpler/less footgunny

1638310145
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
I don't know rust but I guess that's something they want to do well.

1638310172
ifreund!~ifreund@user/ifreund
rust doesn't have a spec either but they don't have the excuse of being a pre-1.0 language

1638310212
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
maybe they do less "pointer" things

1638310249
ifreund!~ifreund@user/ifreund
they still have the unsafe {} escape hatch

1638310370
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
well yes; but I mean that maybe they can do more code without pointers

1638310397
viric!~viric@static-57-97-230-77.ipcom.comunitel.net
no idea.

1638310478
devast8a!~devast8a@2001:470:69fc:105::3f46
They still have pointers, references really, but they explicitly avoid aliasing. You need to use specific reference types to be able to alias memory.

1638310526
devast8a!~devast8a@2001:470:69fc:105::3f46
I should clarify, they explicitly avoid aliasing memory that you can modify.

1638310563
devast8a!~devast8a@2001:470:69fc:105::3f46
They allow unlimited aliasing for immutable references.

1638311705
Ristovski!~Ristovski@hellomouse/perf/ristovski
Hmm, any idea why `zig c++` with std::filesystem fails when targetting windows? I get `std::__1::__fs::filesystem::__current_path` and `::__wide_to_char` as undefined symbols. But from what I can read, libc++ should have the support

1638311714
Ristovski!~Ristovski@hellomouse/perf/ristovski
also hi devast8a :)

1638312018
devast8a!~devast8a@2001:470:69fc:105::3f46
Hey o/

1638313100
_javyre!~javyre@2001:470:69fc:105::2162
Ristovski: I could be wrong but it sounds like you're running into the fact that zig c++ has a different abi than whatever you're linking to that has been compiled with some other c++ compiler.

1638313129
Ristovski!~Ristovski@hellomouse/perf/ristovski
_javyre: That's the thing, I am not linking to anything

1638313241
_javyre!~javyre@2001:470:69fc:105::2162
huh :/

1638313261
Ristovski!~Ristovski@hellomouse/perf/ristovski
https://0x0.st/-hPh.png

1638313502
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, what would be the way to install gdb in zinc/linux_base.sh? 

1638313540
andrewrk!~andrewrk@mail.ziglang.org
oh never mind as soon as I asked, I noticed the image is debian

1638313636
travis_griggs!~travis_gr@remote.nelsonirrigation.com
andrewrk thanks for the link. a bit late, but nice talk

1638313662
travis_griggs!~travis_gr@remote.nelsonirrigation.com
(as in, me telling you "nice talk", is a bit late)

1638313688
andrewrk!~andrewrk@mail.ziglang.org
I'm still here :)

1638313698
andrewrk!~andrewrk@mail.ziglang.org
thanks!

1638313707
Ristovski!~Ristovski@hellomouse/perf/ristovski
huh, works with 0.6.0 on godbolt >_>

1638313744
travis_griggs!~travis_gr@remote.nelsonirrigation.com
in that talk, you allude to some ideas about improved safety in certain build modes. did that pan out? or still a hope? maybe i stumble on it as i go farther through the docs?

1638313773
ifreund!~ifreund@user/ifreund
travis_griggs: zig has 4 build modes, debug and release-safe have improved safety

1638313775
andrewrk!~andrewrk@mail.ziglang.org
Ristovski, hmm I wonder how to solve that. might be worth poking around in the libc++ source files and looking at some of the #defines they use, and looking at the upstream cmakelists.txt file, and looking at zig's libcxx.zig 

1638313790
ifreund!~ifreund@user/ifreund
release-fast and release-small disable safety for better code generation

1638314235
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: also borked in 0.8.1 and 0.7.1

1638314330
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: huh? https://github.com/ziglang/zig/blob/master/src/libcxx.zig#L117-L121

1638314419
andrewrk!~andrewrk@mail.ziglang.org
Ristovski, try removing the windows branch

1638314519
Ristovski!~Ristovski@hellomouse/perf/ristovski
I don't have a local dev setup to compile Zig :/

1638314576
Ristovski!~Ristovski@hellomouse/perf/ristovski
ACTION will attempt to compile on his measly potato

1638314604
andrewrk!~andrewrk@mail.ziglang.org
not sure what was working in 0.6.0 because zig's ability to provide libc++ was only introduced as part of 0.7.0

1638314657
andrewrk!~andrewrk@mail.ziglang.org
or maybe I'm interpreting this wrong https://github.com/ziglang/zig/commit/877e4248fc1e8e28b1f43282411aa9868d6d1d9c

1638314717
Ristovski!~Ristovski@hellomouse/perf/ristovski
did I derp that hard? brb checking

1638314765
travis_griggs!~travis_gr@remote.nelsonirrigation.com
are there any more talks/posts where you talk about what you did in those modes to close the "safety" gap with Rust?

1638314815
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: you're right, 0.6.0 uses mingw and msvcrt-os

1638314831
andrewrk!~andrewrk@mail.ziglang.org
mingw and msvcrt-os do not provide libc++

1638314838
Ristovski!~Ristovski@hellomouse/perf/ristovski
oh right

1638314846
Ristovski!~Ristovski@hellomouse/perf/ristovski
yeah it does have libcxx

1638314929
andrewrk!~andrewrk@mail.ziglang.org
travis_griggs, we haven't really focused on safety as a talking point yet. but we'll probably start doing that in a couple release cycles from now since it's all people coming from rust ever talk about

1638315015
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: ok what the hell is happening here then: https://godbolt.org/z/rsxTaGv6W

1638315039
Ristovski!~Ristovski@hellomouse/perf/ristovski
oh the stdlib gets unused and I assume godbolt runs on windows

1638315039
travis_griggs!~travis_gr@remote.nelsonirrigation.com
i actually don't know rust at all. i've sort of avoided it. i suppose as I'm learning zig, to be objective, I need to douse myself in some rust as well, but the fanboi/pedantic nature of the community i see from a distance is off putting

1638315216
Ristovski!~Ristovski@hellomouse/perf/ristovski
andrewrk: Your commit was right, sorry for the bother - https://lists.llvm.org/pipermail/libcxx-dev/2020-July/000903.html, I blindly jumped to the conclusion it worked because I thought 0.6.0 on godbolt was linking with libcxx, my bad >_>

1638315806
andrewrk!~andrewrk@mail.ziglang.org
no worries

1638315990
freshcoffee!~fresh@user/freshcoffee
andrewrk: yeah fyi, right now that img is just what it takes for ci, including deps but no extras. I'm following a similar pattern for qemu images. "ci/*"

1638316019
freshcoffee!~fresh@user/freshcoffee
also debian was sort of an experiment. Which seems to work? But as always, if you feel a different distro is more suitable, let me know

1638316131
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, thanks - I got what I wanted which was just to temporarily install gdb to troubleshoot something, and I found the info I wanted

1638316156
Franciman!~Franciman@mx1.fracta.dev
wo trying to make things go in the cache is hard lol

1638316171
freshcoffee!~fresh@user/freshcoffee
gimme the cache :)

1638316177
Franciman!~Franciman@mx1.fracta.dev
probaly I should add to each call_frame a pointer to the end of the stack

1638316181
Franciman!~Franciman@mx1.fracta.dev
so that it's kept in the cache

1638316186
Franciman!~Franciman@mx1.fracta.dev
and I can do nifty nifty thangs

1638316216
Franciman!~Franciman@mx1.fracta.dev
freshcoffee: ahah cache is the new cake

1638316358
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, i see what you did there :)

1638316447
Franciman!~Franciman@mx1.fracta.dev
andrewrk: your talk on data driven design was cool

1638316451
Franciman!~Franciman@mx1.fracta.dev
but now I want part 2, and part 3!

1638316453
Franciman!~Franciman@mx1.fracta.dev
:P

1638316456
andrewrk!~andrewrk@mail.ziglang.org
thank you :)

1638316474
Franciman!~Franciman@mx1.fracta.dev
I absolutely need to beat the haskell interpreter of my friend

1638316479
Franciman!~Franciman@mx1.fracta.dev
:P

1638316486
freshcoffee!~fresh@user/freshcoffee
hahah healthy competition

1638316499
Franciman!~Franciman@mx1.fracta.dev
the cool thing of zig is that the interpreter is still almost comrephnsible

1638316505
Franciman!~Franciman@mx1.fracta.dev
I mean the haskell version is super nifty

1638316513
Franciman!~Franciman@mx1.fracta.dev
but zig version is not so bad! I can totally understand it

1638316516
Franciman!~Franciman@mx1.fracta.dev
in C++ i got lost many times

1638316558
Franciman!~Franciman@mx1.fracta.dev
now an important point will be implementing the garbage collector, if that is easy

1638316561
Franciman!~Franciman@mx1.fracta.dev
zig is the absolute winner

1638316711
Franciman!~Franciman@mx1.fracta.dev
the memory oddity is that with sum 100, I am 2x faster than even php

1638316721
Franciman!~Franciman@mx1.fracta.dev
but as soon as I scale to sum 10M

1638316725
Franciman!~Franciman@mx1.fracta.dev
it gets slow

1638316729
Franciman!~Franciman@mx1.fracta.dev
2x slowe

1638316731
Franciman!~Franciman@mx1.fracta.dev
slower

1638316743
Franciman!~Franciman@mx1.fracta.dev
well sorry. I stop doing OT

