1635467082
devast8a!~devast8a@2001:470:69fc:105::3f46
As in you have a pointer that could point to functions, what alignment should this pointer have? -or- You have a function, what alignment should you give it?

1635469189
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
I'm creating a function using @Type and the type info requires an alignment

1635469197
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
but im not sure what goes into determining that

1635476875
andrewrk!~andrewrk@mail.ziglang.org
self hosted compiler update: as of today the LLVM backend is 365/1057 (35%) passing, and the C backend is 42/1057 (4%) passing

1635478240
jrl!~jrl@46.23.89.141
Yeah! Can't wait to use the C backend!

1635478360
jrl!~jrl@46.23.89.141
andrewrk: the donation page mentions Benevity as an option but I'm not able to find it listed. Do you have a direct link I could use?

1635478376
andrewrk!~andrewrk@mail.ziglang.org
jrl, where do you see that?

1635478400
jrl!~jrl@46.23.89.141
https://ziglang.org/zsf/

1635478440
andrewrk!~andrewrk@mail.ziglang.org
ah yes, so benevity is what you would be using if you were doing it through your company, if they do donation matching

1635478457
andrewrk!~andrewrk@mail.ziglang.org
are you saying that you're looking at your company's donation system and ZSF is not listed?

1635478477
jrl!~jrl@46.23.89.141
yes, they just switched so I may be doing something wrong 

1635478574
andrewrk!~andrewrk@mail.ziglang.org
hmmm that's a shame, we don't want to miss out on the company doing donation matching

1635478637
andrewrk!~andrewrk@mail.ziglang.org
is this page helpful? https://causes.benevity.org/causes/840-845105214

1635479296
jrl!~jrl@46.23.89.141
Thank you! Still can't find it from my employer page but I used that link in a message to technical support *fingers crossed*

1635482525
discipulus!~discipulu@user/discipulus
Question regarding top-level... resolve/resolving/resolution means to assert identifiers are declared and used. And refer/reference means to use an identifier in an expression or statement. Right?

1635482726
andrewrk!~andrewrk@mail.ziglang.org
jrl, if you don't mind- let me know how it goes. it's good to know that ZSF wasn't listed. if you don't mind, what company is that?

1635482769
andrewrk!~andrewrk@mail.ziglang.org
discipulus, in what context? are you reading some source code or documentation?

1635482966
discipulus!~discipulu@user/discipulus
andrewrk I'm writing documentation for containers. I want to define those terms for readers to understand.

1635483003
andrewrk!~andrewrk@mail.ziglang.org
oh btw I'd like to rename "container" to "aggregate"

1635483022
discipulus!~discipulu@user/discipulus
Ah! I was wondering about that. 

1635483034
andrewrk!~andrewrk@mail.ziglang.org
because "container" is ambiguous with data structures

1635483054
discipulus!~discipulu@user/discipulus
I had a feeling that was going to be renamed based on an issue I read

1635483073
discipulus!~discipulu@user/discipulus
My old but still untouched draft is at https://paulespinosa.github.io/zig-langref/explain-zig-test-and-containers-02.html#Containers

1635483153
discipulus!~discipulu@user/discipulus
I thought containers would be a type of aggregate

1635483207
discipulus!~discipulu@user/discipulus
I was guessing that Aggregates are arrays, containers, and can't remember what else... While Containers are struct, union, enum, opaque.

1635483315
andrewrk!~andrewrk@mail.ziglang.org
the property that struct, union, enum, and opaque share is that they create a namespace

1635483336
andrewrk!~andrewrk@mail.ziglang.org
maybe they can be called "namespace declarations" ?

1635483374
discipulus!~discipulu@user/discipulus
containers have "top-level" features as well

1635483405
andrewrk!~andrewrk@mail.ziglang.org
that's just namespaces

1635483428
andrewrk!~andrewrk@mail.ziglang.org
there is no "top-level" - each file is a struct

1635483431
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
Nitpicking a bit, by the definition of aggregate, I would consider something like an array or tuple to be a container (they contain things) but not an aggregate. 

1635483449
tsmanner!~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net
From Merriam Webster: Aggregate: formed by the collection of units or particles into a body, mass, or amount

1635483532
discipulus!~discipulu@user/discipulus
That's why I created the section to document the meaning of "top-level". Because there's lots of comments about "top-level" in discussions and the lang ref.

1635483607
discipulus!~discipulu@user/discipulus
I wrote that a "top-level" thing is a direct child of a container

1635483928
andrewrk!~andrewrk@mail.ziglang.org
yeah thanks for that

1635483930
discipulus!~discipulu@user/discipulus
Anyways, I'll go with any definitions given. I haven't been able to stay on top of this lately because I've been searching for a job and spending time preparing for interviews.

1635483947
andrewrk!~andrewrk@mail.ziglang.org
note that when I wrote "top-level", it *was* different than namespaces

1635483955
andrewrk!~andrewrk@mail.ziglang.org
but then it changed to be the same as being inside a struct

1635483979
andrewrk!~andrewrk@mail.ziglang.org
ah that sounds like a lot of work. I hope you get some great offers

1635484089
discipulus!~discipulu@user/discipulus
thanks. I enjoy helping with the documentation efforts. 

1635484188
discipulus!~discipulu@user/discipulus
I can start to change container to aggregate. Is there already efforts to make the terminology change in other places?

1635484467
discipulus!~discipulu@user/discipulus
It was #9646 where I saw aggregate types defined. I wasn't sure if the definitions there were meant for users though. It seems they were useful definitions to make for the sake of the proposed behavior.

1635485009
discipulus!~discipulu@user/discipulus
tsmanner: makes sense. I looked at other sources for guidance too. K&R C book tells us aggregate types are are arrays and structures. But that's C not Zig.

1635485171
andrewrk!~andrewrk@mail.ziglang.org
I have not started such efforts but patches would be welcomed

1635508757
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: I think https://github.com/ziglang/zig/commit/11a60e87791c13d89d770c7925c744b5fe75e5c4 may have fixed the bitcast problem I was having with runtime ++

1635508772
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i'll look into implementing memset with non u8 vals

1635520118
ifreund!~ifreund@user/ifreund
andrewrk: I'm looking into reverting the std.os reorg that replaces e.g. os.MAP_SHARED with os.MAP.SHARED since you said you'd be ammenable to reverting that change before 0.9.0

1635520150
ifreund!~ifreund@user/ifreund
my current plan is to not actually `git revert` the commits but instead re implement the old API with the new file structure (which I think is better)

1635520201
ifreund!~ifreund@user/ifreund
are there any other parts in particular that you'd like to keep? I'm kind on the fence about the errno enum for example

1635522436
ifreund!~ifreund@user/ifreund
I think errno should go back to being either not an enum, or become an enum where the fields have the full E-prefixed names

1635522470
ifreund!~ifreund@user/ifreund
e.g. const Errno = enum { ENOMEM, EAGAIN, EISDIR, ... };

1635530741
andrewrk!~andrewrk@mail.ziglang.org
ifreund, hmmm, to answer that question, perhaps we can come up with some flowchart/policy that we can then apply to future additions as well, and point contributors towards

1635532373
ifreund!~ifreund@user/ifreund
andrewrk: yeah, that would be great long term. I'm still in the stage of considering what the ideal is though at this point

1635532428
andrewrk!~andrewrk@mail.ziglang.org
do I understand correctly that the main downside to status quo is the names are non-standard?

1635532452
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
unnecessary friction imo

1635532493
ifreund!~ifreund@user/ifreund
andrewrk: I really liked the property of the old organization that I could read a name in a manpage and expect to find it at std.os.FOO_BAR

1635532519
andrewrk!~andrewrk@mail.ziglang.org
agreed that was a nice property

1635532543
andrewrk!~andrewrk@mail.ziglang.org
that property means eschewing enums for things that are enums

1635532573
ifreund!~ifreund@user/ifreund
such as errno? What do you thing of my proposal above?

1635533049
andrewrk!~andrewrk@mail.ziglang.org
ifreund, hmm so in your proposal we have Errno but then what about std.os.ENOMEM? do we additionally create a `pub const ENOMEM = Errno.ENOMEM;` for each item in the enum?

1635533090
companion_cube!~simon@user/companion-cube
can't it be an enum, and you bring all the cases into scope?

1635533095
companion_cube!~simon@user/companion-cube
</naive>

1635533114
ifreund!~ifreund@user/ifreund
andrewrk: ah yeah good point

1635533154
companion_cube!~simon@user/companion-cube
does `usingnamespace Errno;` not work?

1635533177
ifreund!~ifreund@user/ifreund
companion_cube: you can write it, but it only brings decls in to the namespace, not fields

1635533191
andrewrk!~andrewrk@mail.ziglang.org
I think if we try to organize things into zig namespaces properly we should go all the way and chop off the E

1635533202
andrewrk!~andrewrk@mail.ziglang.org
or we should revert back to how it was, and translate these things as pub consts

1635533231
ifreund!~ifreund@user/ifreund
I think the everything is a pub const approach is much lower friction even if it does eschew a bit of type safety

1635533262
ifreund!~ifreund@user/ifreund
I think it's pretty much unambiguously better for the non-enum cases, so I'll focus on those for now and leave enums out of my current work

1635533298
andrewrk!~andrewrk@mail.ziglang.org
sounds good

1635533302
ifreund!~ifreund@user/ifreund
I'm not entirely sure how much benefit the enums provide in practice

1635533302
andrewrk!~andrewrk@mail.ziglang.org
sorry for the trouble

1635533316
ifreund!~ifreund@user/ifreund
no worries, I'm very happy with where the usingnamespace semantic landed :)

1635533334
andrewrk!~andrewrk@mail.ziglang.org
two steps forward, one step back, is still progress

1635533370
ifreund!~ifreund@user/ifreund
did you want to do the usingnamespace keyword rename before 0.9.0 by the way? If you pull the trigger and accept a new name I don't mind implementing it

1635533395
andrewrk!~andrewrk@mail.ziglang.org
mmm good question. I think that's something to aim for

1635540167
ifreund!~ifreund@user/ifreund
getting instant "use of undeclared identifier" errors while working on this is awesome

1635540179
andrewrk!~andrewrk@mail.ziglang.org
yep

1635543907
ikskuh!~xq@v43666.php-friends.de
small showcase: i'm hacking a boat game in zig!

1635543908
ikskuh!~xq@v43666.php-friends.de
https://mq32.de/public/0f3eb3c1b2747a8e87b3f302af27654fa1350290.mp4

1635544089
companion_cube!~simon@user/companion-cube
like Asteroids, but with icebergs? 🤔

1635544115
ikskuh!~xq@v43666.php-friends.de
nah, it will be a 3D game

1635544125
ikskuh!~xq@v43666.php-friends.de
but the boat physics are easier to develop in 2d

1635544192
ikskuh!~xq@v43666.php-friends.de
next up is the 3D rendering

1635544199
ikskuh!~xq@v43666.php-friends.de
(and island shape extraction from 3D models)

1635544436
companion_cube!~simon@user/companion-cube
are you going to make an actual full game? not a poc or demo?

1635544860
ikskuh!~xq@v43666.php-friends.de
i'm trying to, yes

1635544971
companion_cube!~simon@user/companion-cube
✔

1635545069
ikskuh!~xq@v43666.php-friends.de
a friend and i want to create a game where you play a boy that discovers a world full of hackable computers :D

1635545098
ikskuh!~xq@v43666.php-friends.de
and to make stuff easier, the world is split into several levels on islands

1635545114
ikskuh!~xq@v43666.php-friends.de
it has a nice aesthetic, but also makes implementation of pretty much everything easier

1635545126
ikskuh!~xq@v43666.php-friends.de
(how to get cheap open world 101)

