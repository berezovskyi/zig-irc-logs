1626307377
cr1901!~William@2601:8d:8600:911:6043:1c36:dc22:29cf
What is ssat?

1626307897
ifreund!~ifreund@user/ifreund
cr1901: static single assignment tree

1626307913
cr1901!~William@2601:8d:8600:911:6043:1c36:dc22:29cf
thanks

1626311977
andrewrk!~andrewrk@mail.ziglang.org
oops sorry I forgot that initialism is not widely known

1626313347
devast8a[m]!~devast8a@2001:470:69fc:105::3f46
How does this differ from the usual basic-block & phi-node representation of SSA? All instructions are arranged in the tree and their parents are instructions that they depend on?

1626314284
andrewrk!~andrewrk@mail.ziglang.org
devast8a[m], if you have a debug build of zig binary handy, run `zig ast-check -t foo.zig` and you can see a text form of the IR

1626314351
andrewrk!~andrewrk@mail.ziglang.org
devast8a[m], here's the output for std/mem.zig: https://clbin.com/bXl6e

1626314373
andrewrk!~andrewrk@mail.ziglang.org
look for some control flow and you can see how it is represented in tree form

1626314410
andrewrk!~andrewrk@mail.ziglang.org
specifically look for condbr

1626318317
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: does anything use the constant air field?

1626318340
andrewrk!~andrewrk@mail.ziglang.org
can you be more specific?

1626318354
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
        constant: struct {ty: Type, val: Value,}, :D

1626318364
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I can't find anything using it

1626318378
andrewrk!~andrewrk@mail.ziglang.org
look for callsites to addConstant

1626318378
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the constant tag uses the ty_pl field

1626318411
andrewrk!~andrewrk@mail.ziglang.org
I see 60 callsites :)

1626318414
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
        .tag = .constant, .data = .{ .ty_pl = .{.ty = ty_inst, .payload = @intCast(u32, sema.air_values.items.len - 1),} }, that uses the ty_pl field

1626318422
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
unless i'm reading wrong?

1626318435
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
not the .constant tag, but the field in Data

1626318469
andrewrk!~andrewrk@mail.ziglang.org
I'm not sure what you're asking

1626318495
andrewrk!~andrewrk@mail.ziglang.org
ohhh I see

1626318502
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I don't see anything using this field, and am confused what it is for? https://github.com/ziglang/zig/blob/stage2-air/src/Air.zig#L311-L314

1626318506
andrewrk!~andrewrk@mail.ziglang.org
I think I forgot to delete that field

1626318518
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
does it increase the union size to too big?

1626318527
andrewrk!~andrewrk@mail.ziglang.org
....yes

1626318536
andrewrk!~andrewrk@mail.ziglang.org
that's probably why I changed it lol

1626318537
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I was a big confused when I saw it lol

1626318567
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
bit*

1626318588
andrewrk!~andrewrk@mail.ziglang.org
would have been caught by that comptime block in a release build :D

1626318625
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I was thinking about that, could you do `const Data = blk: { @setRuntimeSafety(false); break :blk union { ... fields }; };`

1626318635
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I know you have a proposal for this, but would this not work?

1626318650
andrewrk!~andrewrk@mail.ziglang.org
I'll be back later, I gotta make it out the door before the gym closes

1626318671
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok :)

1626323958
andrewrk!~andrewrk@mail.ziglang.org
g-w1, so your idea here is to provide a way to use comptime information to set whether or not a union has safety features enabled?

1626324038
andrewrk!~andrewrk@mail.ziglang.org
check out the Motivation section of https://github.com/ziglang/zig/issues/8643 

1626326396
andrewrk!~andrewrk@mail.ziglang.org
hmm looks like the AIR memory layout changes are going to let us get rid of br_block_flat, simplifying codegen implementations for all backends

1626344355
ifreund!~ifreund@user/ifreund
:)

1626344394
ifreund!~ifreund@user/ifreund
Wish I had time to help out with that branch, I'm swampped with other things currently unfortuneately

1626350988
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: yes, the motivation is the same, but imo its simpler

1626353879
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
Wondering if anyone here knows how the std.event.RwLock works with all of its suspends and resumes

1626353886
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
and why you need to deinit() it to resume the frame they are working on

1626353899
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
more or less whats the point (they are different from how i normally use rwlocks)

1626372687
mattnite_!uid508577@id-508577.highgate.irccloud.com
Hey I'm trying to debug why something in the libc headers is undefined when I try to target musl, anyone willing to help?

1626374677
ifreund!~ifreund@user/ifreund
mattnite_: any bystanders who might have insight won't be of much use without more information... 

1626374710
mattnite_!uid508577@id-508577.highgate.irccloud.com
https://github.com/ziglang/zig/issues/9302

1626374723
mattnite_!uid508577@id-508577.highgate.irccloud.com
I'm going to bring it up in the meeting today

1626374873
ifreund!~ifreund@user/ifreund
ah cool, I always forget when those start

1626374931
mattnite_!uid508577@id-508577.highgate.irccloud.com
it's pretty spoopy and it's between me and a really cool zig usecase

1626382477
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
anyone else have opinions on this?

1626382502
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://github.com/ziglang/zig/pull/9377

1626382746
andrewrk!~andrewrk@mail.ziglang.org
I agree with vexu

1626382779
andrewrk!~andrewrk@mail.ziglang.org
we want to avoid redundant error messages

1626382806
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
should more be a note instead? or just nothing?

1626382843
andrewrk!~andrewrk@mail.ziglang.org
my preference would be to leave it for now and then re-evaluate once we have better IDE integration

1626382853
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1626382876
andrewrk!~andrewrk@mail.ziglang.org
I really want to focus on making progress to shipping self hosted for 0.9.0

1626382907
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, closing :)

1626385051
mountaingoat!~mountaing@user/mountaingoat
hi all, could someone help me understand why foo needs to be comptime for dump() in this example: https://godbolt.org/z/dM8rxeMvK ? does anything involving a `type` essentially need to be comptime since they're flattened at runtime?

1626385104
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what code would you expect to be generated?

1626385225
mountaingoat!~mountaing@user/mountaingoat
it looks like "data_type: type" takes space in that struct, so i'm expecting it's a concrete something, perhaps some kind of synthesized RTTI

1626385252
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
rtti?

1626385262
mountaingoat!~mountaing@user/mountaingoat
run-time type information

1626385267
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
zig does not have that

1626385290
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that would essentially make it python with static types

1626385290
mountaingoat!~mountaing@user/mountaingoat
oh ok, well that's what i would expect from writing that i guess

1626385368
mountaingoat!~mountaing@user/mountaingoat
C++ has RTTI and it's not python with static types

1626385383
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ACTION looks up RTTI

1626385444
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
seems just like casting classes to other classes

1626385684
mountaingoat!~mountaing@user/mountaingoat
i was thinking it would be something like std::type_info at runtime

1626385718
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
there is not.

1626385753
mountaingoat!~mountaing@user/mountaingoat
so is that "data_type" field essentially omitted entirely at compile time?

1626387868
andrewrk!~andrewrk@mail.ziglang.org
hmm this does not look correct: https://clbin.com/dE7WJ

1626388106
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
because no liveness?

1626388232
andrewrk!~andrewrk@mail.ziglang.org
here's master branch for comparison: https://clbin.com/HR2tK

1626388243
andrewrk!~andrewrk@mail.ziglang.org
should be dbg_stmt, call, dbg_stmt, call

1626388264
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
off by 1?

1626388330
andrewrk!~andrewrk@mail.ziglang.org
as a first step I'll have it print the constants

1626391017
andrewrk!~andrewrk@mail.ziglang.org
g-w1, ha you were dead on. off by 1

1626391030
andrewrk!~andrewrk@mail.ziglang.org
spot the fail: https://imgur.com/UMNaRUB.png

1626391236
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
body_len is wrong?

1626391294
andrewrk!~andrewrk@mail.ziglang.org
body_len is correct

1626391306
andrewrk!~andrewrk@mail.ziglang.org
but then it reads body_len as the first item in the body

1626391325
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ohh lol

1626391329
andrewrk!~andrewrk@mail.ziglang.org
this is fixed when using the type-safe APIs: https://clbin.com/XZdbI

1626391365
andrewrk!~andrewrk@mail.ziglang.org
this also will protect in case Block gets fields added

1626391530
andrewrk!~andrewrk@mail.ziglang.org
ok it's now realistic to contribute to this branch, I think, now that --verbose-air works

1626391552
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
I looked at it earlier, but got stuck on liveness, is that fixed?

1626391654
andrewrk!~andrewrk@mail.ziglang.org
I'm guessing you were hitting weirdness due to the getMainBody bug I just fixed

1626391699
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it was the panic in genBody to do liveness I think

1626391701
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
with getOperand

1626391726
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
                @panic("TODO rework AIR memory layout codegen for processing deaths"); still there, did you ont run into it?

1626391744
andrewrk!~andrewrk@mail.ziglang.org
ah in codegen

1626391754
andrewrk!~andrewrk@mail.ziglang.org
I'm about to address that

1626391777
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cool, what did you mean by contributor friendly, if not codegen?

1626391812
andrewrk!~andrewrk@mail.ziglang.org
mm good point. I think I just forgot about that panic

1626391822
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah

1626391824
andrewrk!~andrewrk@mail.ziglang.org
well, the other backends don't have it

1626391830
andrewrk!~andrewrk@mail.ziglang.org
wasm, C, spir-v

1626391833
andrewrk!~andrewrk@mail.ziglang.org
llvm

1626391892
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, I see

1626391894
andrewrk!~andrewrk@mail.ziglang.org
anyway I'm now focusing on codegen.zig

1626391979
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks, I will be going afk for 4 weeks starting monday, so I want to make sure that the plan9 linker works since I have not tested it yet, so I will focus on codegen.zig too I think :)  

