1631232047
ismael!~ismaell@sourcemage/ismael
well, or the header isn't compiled, those are unportable as well, so I guess that's right anyway

1631233953
noam!~noam@104.232.42.247
No, the header *is* compiled

1631233957
noam!~noam@104.232.42.247
That's how single-header libraries work

1631233960
noam!~noam@104.232.42.247
Header in, machine code out

1631233981
noam!~noam@104.232.42.247
If the binary is static, it doesn't matter what compiled it

1631234007
noam!~noam@104.232.42.247
As long as you only build from sources, and don't link against object files, it's irrelevant

1631236721
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
shimonaga: thats what I meant :)

1631236889
Alvo!~Alvo@157.245.85.133
Cool, thanks for info!

1631237153
ismael!~ismaell@sourcemage/ismael
noam: I meant pre-compiled headers

1631237188
noam!~noam@104.232.42.247
ismael: PCHs don't really exist with Zig, I think?

1631237203
noam!~noam@104.232.42.247
Well - in a sense, we have our own precompilation of them

1631237209
noam!~noam@104.232.42.247
the translated version is cached

1631238278
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Is there a way to stop 'zig build' from caching in the home directory? I don't have a vaild $HOME and I don't have permissons to create one

1631238318
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
XDG_CACHE_DIR

1631238332
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
on linux

1631238347
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
* XDG_CACHE_HOME

1631238357
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I don't want it to cache at all, if that's possible

1631238374
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its not, caching is integral to how the compiler works right now

1631238418
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
* I don't want it to cache in my ~, I'm fine with `zig-cache`

1631238449
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sure, so just change the env variable to point to whatever cache dir you want

1631238465
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
Yeah but I don't see the point...

1631238474
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
?

1631238481
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
The build completes and *then* it tries to mkdir `/home`

1631238551
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
I can always just set XDG_CACHE_HOME to '.' but I don't understand why that's required

1631238568
swl!~scott@c-73-136-178-185.hsd1.tx.comcast.net
If it can already compile it

1631238756
davidfetter!~davidfett@xvm-110-146.dc2.ghst.net
hello

1631238792
davidfetter!~davidfett@xvm-110-146.dc2.ghst.net
I'm trying to compile PostgreSQL with CC="zig cc" CXX="zig c++", and I seem to be running across an issue in linking in openssl.

1631238912
davidfetter!~davidfett@xvm-110-146.dc2.ghst.net
is there something special I need to do to use zig as the linker, or places I need to point it at? https://dpaste.org/XgSm

1631259330
motiejus!~motiejus@2001:470:69fc:105::38fb
davidfetter: are you specifying a target?

1631259340
motiejus!~motiejus@2001:470:69fc:105::38fb
i.e. `--target=<...>`

1631259381
motiejus!~motiejus@2001:470:69fc:105::38fb
if not, you may specify `--target=x86_64-linux-amd64.2.32` or so (a recent glibc), that's a bit better with zig cc (there are some known bugs when using an older glibc). Or try musl

1631259396
motiejus!~motiejus@2001:470:69fc:105::38fb
s/amd64/gnu/, s/musl/musle/

1631259398
davidfetter!~davidfett@xvm-110-146.dc2.ghst.net
ACTION tries it

1631259412
motiejus!~motiejus@2001:470:69fc:105::38fb
(assuming amd64 linux of coursE)

1631259423
motiejus!~motiejus@2001:470:69fc:105::38fb
I meant `-target=x86_64-linux-gnu.2.32`

1631259832
davidfetter!~davidfett@xvm-110-146.dc2.ghst.net
um, how do I find the correct one for the machine I'm on? (Linux Fedora 34 at the moment, AppleBSD arm64 pretty soon)

1631260793
motiejus!~motiejus@2001:470:69fc:105::38fb
`2.32` is the glibc version of the target

1631260803
motiejus!~motiejus@2001:470:69fc:105::38fb
F34 should have a pretty recent one

1631261033
davidfetter!~davidfett@xvm-110-146.dc2.ghst.net
2.33. That part worked, but it didn't find libreadline or zlib. is there some kind of path I need to add somewhere?

1631262338
motiejus!~motiejus@2001:470:69fc:105::38fb
you may need to add `-lreadline` and `-lz`

1631263603
motiejus!~motiejus@2001:470:69fc:105::38fb
not sure what memory requirements are, but if you have patience AND a reasonable disk attached (e.g. ssd via usb, it's quite good with rpi4), you may add swap

1631276223
h4ze!~haze@cpe-68-174-134-17.nyc.res.rr.com
omg

1631276226
h4ze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ugly ass nick

1631280112
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
I went to the first article on lobste.rs and the first comment starts out by talking to zig 

1631280115
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
about*

1631282642
discipulus!~discipulu@user/discipulus
yeah the comments about the article about F#

1631282907
discipulus!~discipulu@user/discipulus
andrewrk: 9614 is ready to go

1631291075
shimonaga!~shimonaga@user/shimonaga
is there any way to use std.hash.auto_hash.hashArray? it's not exposed though std or std.hash, and I can't import import it with @import("std/hash/auto_hash");

1631291094
shimonaga!~shimonaga@user/shimonaga
(in zig 0.8.0)

1631291421
shimonaga!~shimonaga@user/shimonaga
hmm, nvm it works to step back a bit and use std.hash.autoHashStrat with std.hash.Strategy

1631292148
marler8997!~marler899@204.229.3.4
any arm assembly people around?  We're hitting a "brk" instruction and it throws an illegal instruction exception on windows. Wondering what could cause that

1631293077
freshcoffee!~fresh@user/freshcoffee
marler8997: do you perhaps have > 2 active breakpoints ?

1631293142
marler8997!~marler899@204.229.3.4
I'll ask the guy who got it.  Does > 2 make a difference?

1631293168
freshcoffee!~fresh@user/freshcoffee
I'm swimming in the deep end here, but found this:

1631293174
freshcoffee!~fresh@user/freshcoffee
https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-arm64

1631293352
marler8997!~marler899@204.229.3.4
they had breakpoints in their managed code, this is a clr process

1631293416
freshcoffee!~fresh@user/freshcoffee
ok. was shot in the dark :)

1631293452
marler8997!~marler899@204.229.3.4
could still have been the debugger

1631295898
marler8997!~marler899@204.229.3.4
andrewrk, I'd be curious on if you have thoughts or input on this subject: https://github.com/microsoft/win32metadata/issues/623

1631295917
marler8997!~marler899@204.229.3.4
anyone else wanting to provide feedback is also welcome

1631295950
marler8997!~marler899@204.229.3.4
the issue at hand is that there are parameters in the win32 api that are declared as pointers, but can accept other kinds of values as well besides pointers.  This is a problem for zig because it enforces pointer alignment

1631299250
marler8997!~marler899@204.229.3.4
what does the c/c++ spec say about pointer alignment?

1631299262
marler8997!~marler899@204.229.3.4
is misaligned pointer access UB?

1631299966
andrewrk!~andrewrk@mail.ziglang.org
thank you discipulus!

1631299977
andrewrk!~andrewrk@mail.ziglang.org
marler8997, yes misaligned pointer access is UB

1631299988
freshcoffee!~fresh@user/freshcoffee
marler8997: A pointer to an object type may be converted to a pointer to a different object type. If the resulting pointer is not correctly aligned72) for the referenced type, the behavior is undefined.

1631299995
freshcoffee!~fresh@user/freshcoffee
6.3.2.3 in C spec

1631299996
marler8997!~marler899@204.229.3.4
ok thx

1631300002
marler8997!~marler899@204.229.3.4
crafting a response to the Microsoft guy

1631300003
andrewrk!~andrewrk@mail.ziglang.org
oh interesting, even converting the pointer 

1631300022
andrewrk!~andrewrk@mail.ziglang.org
in zig one would have to perform a load or store through it observe UB

1631300026
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Ah I see they finally responded to that issue you made marler8997.

1631300044
marler8997!~marler899@204.229.3.4
yeah now we're getting somewhere :)

1631300312
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
I should probably make an issue on that repo about things that normally use MAKEINTRESOURCE. They now made those constants PWSTR but that gives problems in ansi mode.

1631302557
marler8997!~marler899@204.229.3.4
Flaminator oh shoot I'm not sure what they're going to do about MAKEINTRESOURCE

1631302579
marler8997!~marler899@204.229.3.4
oh there's a MAKEINTRESOURCEA/W, they'll probably have to define those instead

1631302672
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Yeah stuff like IDI_APPLICATION and IDC_ARROW are defined as "public const PWSTR IDI_APPLICATION = 32512u;" in their metadata.

1631302824
marler8997!~marler899@204.229.3.4
yeah there are some constants that I had to remove because they assigned unaligned values to pointer types

1631302831
Flaminator!~Flaminato@ns323457.ip-5-39-76.eu
Yeah I saw.

1631302879
marler8997!~marler899@204.229.3.4
I think Zig's proper handling of pointer alignment is throwing some old fogies for a loop :)

1631303366
marler8997!~marler899@204.229.3.4
ok andrewrk, we might be in a bit of a pickle here

1631303395
marler8997!~marler899@204.229.3.4
it looks like changing the type of a parameter from a pointer to another type (say a union type) can change the ABI in some cases

1631303445
marler8997!~marler899@204.229.3.4
so we're in a situation where win32 declares some values as pointers, but can accept more than just pointers, which means passing unaligned values

1631303465
marler8997!~marler899@204.229.3.4
and changing those types to unions risks changing the ABI of the function

1631303555
marler8997!~marler899@204.229.3.4
I suppose in a case like that we could just add align(1) to the pointer?  Or find another type with the same ABI like size_t

1631303575
marler8997!~marler899@204.229.3.4
since size_t doesn't put any restrictions on alignment

1631304256
marler8997!~marler899@204.229.3.4
I think I have a solution, here it is for anyone following along: https://github.com/microsoft/win32metadata/issues/623#issuecomment-917160173

