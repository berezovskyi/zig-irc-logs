1624234190
andrewrk!~andrewrk@mail.ziglang.org
g-w1, what's the status on #9047 (catch unused vars) ?

1624234197
andrewrk!~andrewrk@mail.ziglang.org
want some help?

1624234539
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes!

1624234558
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
latest blocker for (l) |n| (l = n.next) {

1624234571
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
says n is unused because l = n.next is not astgened in that scope

1624234584
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also, the while stuff is really weird, looking at that now

1624234638
andrewrk!~andrewrk@mail.ziglang.org
that syntax doesn't look right to me. you mean while instead of for?

1624234657
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, sry

1624234667
andrewrk!~andrewrk@mail.ziglang.org
cool, I'll take a look

1624234667
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats what the ci failure is, I removed the capture, and then it broke

1624234676
andrewrk!~andrewrk@mail.ziglang.org
is the errdefer stuff solved?

1624234680
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yep!

1624234689
andrewrk!~andrewrk@mail.ziglang.org
nice. I wasn't sure if my patch would actually end up helping

1624234693
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also related: is     if (i) {} else |e| {} allowed?

1624234782
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
one of the bugs is that it should not be capturing error_token here https://github.com/ziglang/zig/blob/master/src/AstGen.zig#L5147, but seeing if it != null, then capturing payload_token, so I want to see if having an error_token w/o a payload_token is allowed

1624234810
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if my understanding of that ast structure is correct

1624234834
andrewrk!~andrewrk@mail.ziglang.org
yes only the error capture is required on if/while error union syntax

1624234871
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
is no payload capture but an error capture `if (i) { } else |e| { }` allowed/

1624234880
andrewrk!~andrewrk@mail.ziglang.org
yes

1624234892
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what does that do?

1624234911
andrewrk!~andrewrk@mail.ziglang.org
https://ziglang.org/documentation/master/#while-with-Error-Unions

1624234953
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, those all have a payload capture

1624234995
andrewrk!~andrewrk@mail.ziglang.org
it does the same thing, it just does not capture the payload

1624235003
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
gotcha, that makes sense :)

1624235035
andrewrk!~andrewrk@mail.ziglang.org
g-w1, is this the test case you want help with? https://clbin.com/GLLhL

1624235039
andrewrk!~andrewrk@mail.ziglang.org
(if not can you edit it)

1624235087
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, that is what the ci is failing on, because n is unused

1624235097
andrewrk!~andrewrk@mail.ziglang.org
it's used with n.next

1624235106
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
exactly, but its astgening in the wrong scope :)

1624235110
andrewrk!~andrewrk@mail.ziglang.org
ah gotcha

1624235115
andrewrk!~andrewrk@mail.ziglang.org
ok! I'll take a look

1624235131
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you might want to checkout my branch as I made a few astgen changes

1624235141
andrewrk!~andrewrk@mail.ziglang.org
will do

1624235151
andrewrk!~andrewrk@mail.ziglang.org
do you care if I push to it?

1624235164
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no

1624235186
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
if you could just wait a min, i'll push a few changes to astgen, so we don't have conflicts that would be great

1624235202
andrewrk!~andrewrk@mail.ziglang.org
cool. take your time, I'm headed to the gym, will look when I get back 

1624235226
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
üëç

1624236026
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, it is rebased :)

1624241707
espindola!~espindola@d108-172-118-79.bchsia.telus.net
Hi, I was expecting the program in https://paste.debian.net/plain/1201856 two print two identical lines. Did I misunderstand the documentation or there is a bug in fmtIntSizeDec?

1624242543
freshcoffee!~fresh@user/freshcoffee
fmtIntSizeDec doesn't (yet?) consider formatting options so things like width/alignment/fill do not have an effect. It probably should support it.

1624242664
andrewrk!~andrewrk@mail.ziglang.org
it should also be renamed to remove the redundant fmt

1624244062
andrewrk!~andrewrk@mail.ziglang.org
g-w1, alright I checked out your branch so if you force push after now it will mess me up

1624244122
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i'll let you work on that :)

1624244192
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
in build, you can run `../zig-out/bin/zig fmt --check --ast-check ..` to test out your changes, to make sure nothing broke

1624244249
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the error was in countChildren:66, it should be while (it) |n|, but that makes n unused, see the ci error for more

1624244468
andrewrk!~andrewrk@mail.ziglang.org
thanks

1624245883
espindola!~espindola@d108-172-118-79.bchsia.telus.net
thanks, I will open a bug report

1624245920
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think mikdusan already did :D https://github.com/ziglang/zig/issues/9184

1624287970
oats!~thomas@user/oats
heh that is gross

1624287975
oats!~thomas@user/oats
I think I just won't then lol

1624287994
ifreund!~ifreund@user/ifreund
why would you want to in the first place?

1624288119
marler8997!~marler899@204.229.3.4
ifreund, how would you pass something like that as a build option?  the only way I can think to do that is generate a module with the data in it and pass it as a package.  Is that what you would do?

1624288170
ifreund!~ifreund@user/ifreund
marler8997: I would make a syscall to get the current time from the system clock in the build.zig and pass that

1624288175
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
just do exe.addBuildOption, then @import("build-options")

1624288191
ifreund!~ifreund@user/ifreund
(build options are implemented as a package)

1624288195
marler8997!~marler899@204.229.3.4
oh the build-options module, forgot about that

1624288198
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ifreund: you would want it to say compiled on: {}

1624288230
ifreund!~ifreund@user/ifreund
I most certainly would not, it sounds like oats might though :P

1624288240
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah

1624288248
marler8997!~marler899@204.229.3.4
huh, no build-options in language ref, must be a feature of std with no language support?

1624288259
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it is, its not part of the language

1624288277
ifreund!~ifreund@user/ifreund
it's a feature of std.build

1624288311
ifreund!~ifreund@user/ifreund
the build system generates some zig source code and puts it in a package for you to import

1624288337
marler8997!~marler899@204.229.3.4
gotcha, works the same way as builtin and the buildpkgs module design

1624291792
gmacd!~gmacd3@cpc1-bmly10-2-0-cust207.2-3.cable.virginm.net
is there a way to get zig test to run all the tests in a folder?

1624291848
ifreund!~ifreund@user/ifreund
gmacd: the general pattern is a test block that does `_ = @import("foo.zig");` for all the files with tests you want to run

1624291864
ifreund!~ifreund@user/ifreund
then run zig test on that root file with the test block doing the importing

1624292300
gmacd!~gmacd3@cpc1-bmly10-2-0-cust207.2-3.cable.virginm.net
hmmm, that would work thanks.  would be good to get zig to find all the files for you, but I guess you could code it

1624293475
andrewrk!~andrewrk@mail.ziglang.org
g-w1, still working on it

1624293747
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
gotcha

1624293762
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
good news: just got hello world on plan9 working! (it prints then segfaults)

1624293840
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://i.imgur.com/UxTw0Yc.png

1624293861
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it was pretty trivial to add push

1624293983
gmacd!~gmacd3@cpc1-bmly10-2-0-cust207.2-3.cable.virginm.net
nice!

1624294330
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, I think I forgot to pop ü§¶

1624294373
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yea

1624294953
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
and with pop, we have a non-segfaulting hello world

1624294966
luuk!~luuk@user/luuk
Nice work, g-w1!

1624295337
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://i.imgur.com/PRiZHP0.png

1624295367
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i guess I will update my pull request now

1624295766
andrewrk!~andrewrk@mail.ziglang.org
congrats g-w1 

1624295809
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks

1624295835
andrewrk!~andrewrk@mail.ziglang.org
you've really leveled up quickly heh

1624295859
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
contributing to zig has helped me learn a lot

1624295880
andrewrk!~andrewrk@mail.ziglang.org
‚ù§Ô∏è

1624296020
andrewrk!~andrewrk@mail.ziglang.org
regarding unused vars, I'm taking a detour to solve https://github.com/ziglang/zig/issues/8825 

1624296183
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, the reduced does not trigger for me

1624296195
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh wait, i'm not using -t

1624296214
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ü§¶ yeah it does

1624298997
andrewrk!~andrewrk@mail.ziglang.org
g-w1, the fix for the while loop scope thing is just s/&loop_scope.base/then_sub_scope/

1624299009
andrewrk!~andrewrk@mail.ziglang.org
pushing a commit in a sec

1624299045
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, I thought there had to be a whole rework of whileExpr ü§¶

1624299074
andrewrk!~andrewrk@mail.ziglang.org
btw when I use `zig fmt --check --ast-check ..` it hangs, or at least takes longer than a minute with a debug build

1624299089
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you probably have lots of things in ../zig-cache or something

1624299102
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
instead, do ../lib ../src ../test

1624299118
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it takes ~5 secs for me

1624299241
andrewrk!~andrewrk@mail.ziglang.org
oh I have a windows_h.zig file in build/

1624299259
andrewrk!~andrewrk@mail.ziglang.org
ok they all pass now after this commit

1624299266
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also, i realized that config.zig.in has a toplevel try :P

1624299291
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
did you fix the thing in linked_list.zig though?

1624299309
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
wait, someone fixed the toplevel try, nice

1624299366
andrewrk!~andrewrk@mail.ziglang.org
I fixed the top level try a while back

1624299388
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah, I was reading the code on my kindle, and realized that I had not updated in a while

1624299402
andrewrk!~andrewrk@mail.ziglang.org
wow it took 1m14s in release mode to zig fmt --check --ast-check windows_h.zig (5.1MiB)

1624299442
andrewrk!~andrewrk@mail.ziglang.org
that seems too long

1624299556
andrewrk!~andrewrk@mail.ziglang.org
g-w1, anyway, I think you're unblocked now on 9047, yeah?

1624299573
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yea, i'll fix the thing in linked_list.zig and we'll see what the ci says ;)

1624299594
andrewrk!~andrewrk@mail.ziglang.org
what's the problem with linked_list.zig? I didn't get any error for it

1624299602
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
check the ci error

1624299624
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
basically, I just wrote a bunch of vim macros to remove unused captures, and then it removed that

1624299633
andrewrk!~andrewrk@mail.ziglang.org
hmm but why didn't I get that locally

1624299641
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it was in testing std

1624299655
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
not in astgen, because astgen passed

1624299679
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, it works :)

1624299680
andrewrk!~andrewrk@mail.ziglang.org
oh you put _ there 

1624299686
andrewrk!~andrewrk@mail.ziglang.org
yikes

1624299694
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
because it thought it was unused

1624299702
andrewrk!~andrewrk@mail.ziglang.org
yeah because you trusted the error :)

1624299715
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
exactly

1624299989
andrewrk!~andrewrk@mail.ziglang.org
I like what you did with the used enum

1624300009
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks

1624300309
ifreund!~ifreund@user/ifreund
hrm, when zig invokes ld.lld it doesn't seem to respect the --search-prefix

1624300343
marler8997!~marler899@204.229.3.4
creating a data structure to represent a midi message, seems like a use case that calls for a "packed tagged union"...is this a thing that's been explored?

1624300410
ifreund!~ifreund@user/ifreund
marler8997: a manual version using a separate enum value in your data structure and a bare union is the current way to do that

1624300473
ifreund!~ifreund@user/ifreund
I don't think I've seen a proposal for how tagged union with a defined memory layout would work though

1624300496
marler8997!~marler899@204.229.3.4
gotcha

1624300762
ifreund!~ifreund@user/ifreund
andrewrk: I think we need a --sysroot flag to make cross compilation with C libraries work, the current --search-prefix that std.build exposes isn't sufficient as it just add -L/-isystem/include while we need to give ld.lld the --sysroot flag so it can find the dynamic linker at the correct absolute path

1624300772
ifreund!~ifreund@user/ifreund
will work on an implementation

1624300796
andrewrk!~andrewrk@mail.ziglang.org
ok

1624301110
andrewrk!~andrewrk@mail.ziglang.org
g-w1, tests passed for me locally for 9047 :)

1624301141
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
\o/

1624301159
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://github.com/ziglang/zig/pull/9047/commits/a30b3e2ea55f49254aa79afb5d1504c35521441f probably needs a review

1624301181
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
for a lot of the functions, i just did _ = param, rather than _: T, becuase you said its better for documentation

1624301273
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but then, it seems merge-ready

1624301331
ifreund!~ifreund@user/ifreund
can't wait :)

1624301971
andrewrk!~andrewrk@mail.ziglang.org
_ = trash;

1624301976
andrewrk!~andrewrk@mail.ziglang.org
nice code lol

1624302025
andrewrk!~andrewrk@mail.ziglang.org
I think all the new _ = foo lines are quite nice in aiding readability

1624302099
ifreund!~ifreund@user/ifreund
one thing we won't catch is forgetting to delete _ = foo if you refactor and start using foo

1624302112
ifreund!~ifreund@user/ifreund
I don't think that's possible to catch though

1624302142
ifreund!~ifreund@user/ifreund
maybe third party linters could use a heuristic based approach in the future

1624302157
earnestly!~earnest@user/earnestly
g-w1: plan9 used to have an UNUSED(x) macro for that

1624302165
earnestly!~earnest@user/earnestly
Which is likely more readable still

1624302217
andrewrk!~andrewrk@mail.ziglang.org
I also like how `_ = self` is a clue that you should consider making the function not be a member

1624302306
ifreund!~ifreund@user/ifreund
or just not take self as an argument

1624302447
andrewrk!~andrewrk@mail.ziglang.org
yeah

1624302935
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I found a bunch of stuff but I'll commit directly to the branch to fix

1624305637
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks!

1624305857
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
earnestly: interesting, did the compilers complain on unused vars?

1624305905
earnestly!~earnest@user/earnestly
It's a good question, I'm not sure.  I recall that the 'father' of static analysis was at Bell Labs and where the spin model checker came from; so perhaps it was involved in this?  No idea

1624305923
earnestly!~earnest@user/earnestly
g-w1: Holtzmann (went on to NASA)

1624305977
earnestly!~earnest@user/earnestly
> https://en.wikipedia.org/wiki/Gerard_J._Holzmann

1624306013
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice

1624306108
ifreund!~ifreund@user/ifreund
I know him from https://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code

1624306126
companion_cube!~simon@user/companion-cube
rule 1: use Ada + Spark

1624306135
ifreund!~ifreund@user/ifreund
these rules are for C

1624306146
companion_cube!~simon@user/companion-cube
I'd say "don't", but well :)

1624306173
earnestly!~earnest@user/earnestly
ifreund: His book on protocols is lovely too

1624306212
earnestly!~earnest@user/earnestly
companion_cube: He was asked about that, his answer was "better the devil you know", and certainly NASA with C have left fewer craters in planets than ESA :p

1624306244
companion_cube!~simon@user/companion-cube
tbh I wonder why the JPL doesn't use ada, which was developed in the same country‚Ä¶ pretty strange

1624306297
earnestly!~earnest@user/earnestly
Probably Bell Labs

1624306321
earnestly!~earnest@user/earnestly
companion_cube: Idk, look into HAL/S

1624306376
earnestly!~earnest@user/earnestly
Could have also been the lack of available compilers at the time too

1624307616
andrewrk!~andrewrk@mail.ziglang.org
g-w1, there were dozens of bugs exposed in a30b3e2ea. I'm glad you mentioned it to me

1624308085
andrewrk!~andrewrk@mail.ziglang.org
I also see why you got tired of this, it's a lot to go through

1624310833
ifreund!~ifreund@user/ifreund
check it out, clean CI run for my PR adding zig support to xbps-src https://github.com/void-linux/void-packages/pull/29288 :)

1624310844
ifreund!~ifreund@user/ifreund
zig --sysroot patch incoming

1624311062
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: yeah, there were more unused fn params and captures than vars

1624311084
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
it took like 1 hr just to add the _ = , using vim macros :P

1624311171
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: for https://github.com/ziglang/zig/pull/9047#discussion_r655699346 , how did it break test coverage?

1624311290
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
whew, that exposed a lot of bugs, wow

1624311321
andrewrk!~andrewrk@mail.ziglang.org
ifreund, very cool

1624311424
andrewrk!~andrewrk@mail.ziglang.org
ifreund, one topic this brings to mind is b.setPreferredReleaseMode. this way the zig-build.sh could use --release and let the application choose its preferred release mode. for example a compiler or game would probably choose ReleaseFast. but it prompts the question, what would be the default if a preferred release mode was not set?

1624311464
andrewrk!~andrewrk@mail.ziglang.org
g-w1, the test was testing when there is an exported main symbol with different args than pub fn main()

1624311511
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no it wasn't, it was testing the raspi0 target

1624311521
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
remember, this is the test i created :)

1624311691
andrewrk!~andrewrk@mail.ziglang.org
ah I see. my mistake. what was the point of those parameters then?

1624311709
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i just copied from the osdev wiki

1624311720
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
they are set by the boot.S start code

1624311780
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
 see you didn't like my if (false) pattern

1624311814
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
s/^/i /

1624311830
ifreund!~ifreund@user/ifreund
andrewrk: hmm, I hadn't really looked at the preferred release mode thing yet. I'm not a huge fan of the current state tbqh. If I set a preferred release mode in my project to e.g. safe then users can no longer choose to use fast or small if they want without patching the build.zig

1624311867
ifreund!~ifreund@user/ifreund
and there are perfectly valid reasons for doing so, small might make much more sense if running river on a raspberry pi (idk if this works though tbh)

1624311885
andrewrk!~andrewrk@mail.ziglang.org
I agree, it should be preferred release mode, not mandatory release mode

1624312000
ifreund!~ifreund@user/ifreund
I think the default with no setPreferredReleaseMode() call should be -Drelease == -Drelease-safe and user can use setPreferredReleaseMode() to make -Drelease be fast or small instead

1624312036
ifreund!~ifreund@user/ifreund
and calling setPreferredReleaseMode shouldn't get rid of the other -Drelease-foo options

1624312083
ifreund!~ifreund@user/ifreund
then it's very simple for distros, just use -Drelease by default and you are using the project developer's preference if they have declared one

1624312102
ifreund!~ifreund@user/ifreund
otherwise you are using *my* preference of release-safe being a good default for most software

1624312121
ifreund!~ifreund@user/ifreund
if that all sounds good I'll make a PR

1624312144
earnestly!~earnest@user/earnestly
ifreund: It's nice that you're taking into account different ways of building/packaging software, making the tools more agnostic to their environments

1624312263
ifreund!~ifreund@user/ifreund
earnestly: thanks for the kind words, It's a goal of mine for distro packagers to not hate zig :D

1624312280
earnestly!~earnest@user/earnestly
It also makes zig more robust at the same time

1624312290
ifreund!~ifreund@user/ifreund
exactly

1624312382
earnestly!~earnest@user/earnestly
The trick is finding the idioms that have succeeded without dragging along the historical baggage

1624312552
ifreund!~ifreund@user/ifreund
yeah, I think having real-world use-cases for this stuff before implementing it helps a bit there

1624312572
ifreund!~ifreund@user/ifreund
but there is certainly a lot of historical baggage to be avoided if at all possible

1624312719
andrewrk!~andrewrk@mail.ziglang.org
ifreund, I want to make a slightly more complicated counter proposal, with the goal of not declaring a default release mode: https://clbin.com/bYRoc

1624312909
ifreund!~ifreund@user/ifreund
ok, and then the build script could just access builder.release_mode instead of using the return value of standardReleaseOptions()

1624312945
ifreund!~ifreund@user/ifreund
maybe instead of "with-default" --release-orelse Foo?

1624312973
andrewrk!~andrewrk@mail.ziglang.org
love it

1624313028
andrewrk!~andrewrk@mail.ziglang.org
I'm not 100% completely settled on saying "no" to safe being the default

1624313073
andrewrk!~andrewrk@mail.ziglang.org
having --release sometimes work is a bit wonky

1624313097
andrewrk!~andrewrk@mail.ziglang.org
let's let this question sit for a few days if you don't mind

1624313106
earnestly!~earnest@user/earnestly
ifreund: I have thing about 'embedded knowledge', the sort of thing that people aren't aware of until it's gone (and even then).  So it's doubly hard to know what is actually important sometimes.  As you note though, having real world requirements guide that refinement is necessary

1624313119
ifreund!~ifreund@user/ifreund
yeah I'm not a fan of --release maybe giving an error for reasons out of your control

1624313163
andrewrk!~andrewrk@mail.ziglang.org
I like that zig CLI -O flag forces you to choose, but the person running `zig build` does not know what the application author wants

1624313198
andrewrk!~andrewrk@mail.ziglang.org
maybe the build.zig functions for creating a build artifact would have a mandatory parameter of release mode?

1624313203
ifreund!~ifreund@user/ifreund
I don't mind letting this sit for a while while we ponder the pros/cons of a default, it's a breaking change so it won't make it into my xbps-src zig build style until 0.9.0

1624313224
ifreund!~ifreund@user/ifreund
andrewrk: I think requiring the build.zig user to choose a release mode is a great idea

1624313232
earnestly!~earnest@user/earnestly
(The old ways was to let the user provide "opinionated" flags while the build system only includes those that are needed)

1624313241
ifreund!~ifreund@user/ifreund
a default release mode I mean

1624313276
andrewrk!~andrewrk@mail.ziglang.org
nice, sounds like we found a more satisfactory path to go down

1624313333
andrewrk!~andrewrk@mail.ziglang.org
so then for zig build CLI we would just want --release and then flags to override. perhaps -O just like the CLI

1624313377
ifreund!~ifreund@user/ifreund
it kinda annoys me that -OReleaseSafe is TitleCase, it's an enum and those are supposed to be snake_case now :P

1624313398
ifreund!~ifreund@user/ifreund
Agree though that we should have --release and override flags handled in the build runner though

1624313456
ifreund!~ifreund@user/ifreund
(snake_case dosen't feel right for CLI flags though, so kebab I guess... -Orelease-safe makes me happier for whatever reason)

1624313532
andrewrk!~andrewrk@mail.ziglang.org
I share your cognitive dissonance but I don't have any ideas to resolve it

1624313589
ifreund!~ifreund@user/ifreund
not a fan of -Orelease-safe?

1624313617
andrewrk!~andrewrk@mail.ziglang.org
well I *am* a fan of having it be byte-identical to the enum names

1624313668
andrewrk!~andrewrk@mail.ziglang.org
we might want to think of this in tandem with cpu features and model names

1624313680
ifreund!~ifreund@user/ifreund
enum { .@"release-safe", ... } is an option

1624313686
andrewrk!~andrewrk@mail.ziglang.org
currently zig differs from LLVM naming conventions in that zig uses _ and llvm uses -

1624313706
andrewrk!~andrewrk@mail.ziglang.org
justification being that we want it to be more friendly to identifiers in zig code

1624313763
andrewrk!~andrewrk@mail.ziglang.org
mm also we use +foo-bar-baz to indicate added and removed features

1624313771
ifreund!~ifreund@user/ifreund
maybe we should do `-O release_safe` or -O=release_safe with the space/= snake_case doesn't feel so bad

1624313786
andrewrk!~andrewrk@mail.ziglang.org
I believe both syntaxes are already accepted

1624313840
andrewrk!~andrewrk@mail.ziglang.org
`-O release_safe` and `-O=release_safe` both look pretty nice to me

1624313864
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I started working on making zig always run astgen even for stage1

1624313895
andrewrk!~andrewrk@mail.ziglang.org
it was almost straightforward, but revealed a problem with stage2 package table hashing going into infinite recursion for (perfectly valid) circular package dependencies

1624313942
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
why are you making it follow imports?

1624313957
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
why not make stage1 @import just call astgen?

1624314075
ifreund!~ifreund@user/ifreund
looks like we currently accept `-OReleaseSafe` or `-O ReleaseSafe` but not `-O=ReleaseSafe`. I'd like to move to just `-O release_safe`, I don't really see the point of a variant with = or the point of having multiple variants

1624314204
ifreund!~ifreund@user/ifreund
anyhow, I've been sitting in front of a computer for far too long today, I'm off to bed and will send some PRs for --sysroot and the std.build release mode stuff tomorrow hopefully

1624315075
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
good night ifreund 

1624315468
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
could someone cherry pick this into the 0.8.1 branch? https://github.com/ziglang/zig/pull/9176 ? It was a regression from 0.7

1624317608
andrewrk!~andrewrk@mail.ziglang.org
done

1624317945
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I think it's time to merge 9047. any objections?

1624318472
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
tests pass?

1624318490
andrewrk!~andrewrk@mail.ziglang.org
locally yeah. I believe the CI failure is because it's testing what happens after merging master

1624318501
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah

1624318514
andrewrk!~andrewrk@mail.ziglang.org
or maybe not?? I can't explain those failures

1624318525
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
do you want to rebase it? I can too

1624318537
andrewrk!~andrewrk@mail.ziglang.org
I was thinking about starting a stream now

1624318546
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ooh nice

1624318555
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think it should be rebased b4 merge

1624318558
andrewrk!~andrewrk@mail.ziglang.org
agreed

1624318578
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
lemme guess stream topic: adding stage2 astgen to stage1

1624318582
andrewrk!~andrewrk@mail.ziglang.org
yep

1624318588
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hah

1624318599
andrewrk!~andrewrk@mail.ziglang.org
you're kinda the star of the show for this one - are you around for the next ~hour and would you be interested in being on voice chat for the beginning part of it?

1624318622
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sure, lemme rebase it quickly first

1624318631
andrewrk!~andrewrk@mail.ziglang.org
wait and do it live :D

1624318644
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i'll be on in 2 mins

1624319459
andrewrk!~andrewrk@mail.ziglang.org
streaming at twitch.tv/andrewrok in 3 minutes

