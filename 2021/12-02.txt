1638404089
freshcoffee!~fresh@user/freshcoffee
I think that looks super-clean and it's pretty easy to discern between `.` and `_` in things like `self.reset_quorum_messages(&self.start_view_change_from_other_replicas, .start_view_change);`

1638410120
discipulus!~discipulu@user/discipulus
looks good

1638443505
g0d0h932!~doe@184-75-138-166.resi.cgocable.ca
hi

1638443576
g0d0h932!~doe@184-75-138-166.resi.cgocable.ca
wow this guys bought a radio frequencies scanner and found bio tech in his body https://www.youtube.com/watch?v=E1ZqRhe4lZE

1638443586
g0d0h932!~doe@184-75-138-166.resi.cgocable.ca
oups sorry wrong chan

1638450176
Franciman!~Franciman@mx1.fracta.dev
does zig normalize the unicode codepoints

1638450182
Franciman!~Franciman@mx1.fracta.dev
of the source code?

1638450583
Franciman!~Franciman@mx1.fracta.dev
wait, zig supports unicode identifiers, right?

1638450606
ifreund!~ifreund@user/ifreund
Franciman: nope, unicode is only supported inside string literals

1638450617
Franciman!~Franciman@mx1.fracta.dev
:O

1638450621
Franciman!~Franciman@mx1.fracta.dev
this means a lot

1638450623
ifreund!~ifreund@user/ifreund
you can use @"my favorite emoji" as an identifer though

1638450646
Franciman!~Franciman@mx1.fracta.dev
I am considering wheterh to support unicode in identifiers

1638450648
Franciman!~Franciman@mx1.fracta.dev
or not

1638450700
Franciman!~Franciman@mx1.fracta.dev
the hard part is:

1638450708
Franciman!~Franciman@mx1.fracta.dev
1. what can I put in an identifier?

1638450712
Franciman!~Franciman@mx1.fracta.dev
2. normalisation

1638450761
ifreund!~ifreund@user/ifreund
and what do you gain for that work?

1638450851
Franciman!~Franciman@mx1.fracta.dev
I can write caffè

1638450855
Franciman!~Franciman@mx1.fracta.dev
as a variable name :P

1638450882
Franciman!~Franciman@mx1.fracta.dev
ifreund: you are right

1638450887
Franciman!~Franciman@mx1.fracta.dev
I don't need identifiers either

1638450891
Franciman!~Franciman@mx1.fracta.dev
I can just use de bruijn indices

1638450904
Franciman!~Franciman@mx1.fracta.dev
so I can be encoding blind

1638450911
Franciman!~Franciman@mx1.fracta.dev
Yes Yes

1638450914
Franciman!~Franciman@mx1.fracta.dev
that's the answer

1638450926
Franciman!~Franciman@mx1.fracta.dev
thanks for making me realise that names are dumb

1638451013
ifreund!~ifreund@user/ifreund
:)

1638451028
Franciman!~Franciman@mx1.fracta.dev
i still want string literals

1638451059
daex!~daex@user/daex
Re: 1: doesn't Unicode define XID_* codepoint classes or whatever they're called?

1638451068
Franciman!~Franciman@mx1.fracta.dev
yes

1638451086
Franciman!~Franciman@mx1.fracta.dev
but it's so huge I don't know if I want to narrow it :P

1638451097
daex!~daex@user/daex
Yeah fair.

1638451124
supakeen!~user@python/site-packages/supakeen
https://www.unicode.org/reports/tr15/tr15-21.html#Programming_Language_Identifiers

1638451128
supakeen!~user@python/site-packages/supakeen
Is likely relevant to your plans.

1638451157
Franciman!~Franciman@mx1.fracta.dev
many thanks

1638451209
Franciman!~Franciman@mx1.fracta.dev
unicode is so huge :(

1638451251
supakeen!~user@python/site-packages/supakeen
Luckily you're not going to maintain a whitelist but instead likely allow certain classes or planes of characters.

1638451890
ifreund!~ifreund@user/ifreund
then your compiler has to be aware of unicode there

1638451893
ifreund!~ifreund@user/ifreund
*though

1638451898
ifreund!~ifreund@user/ifreund
the zig compiler doesn't need to be

1638451916
supakeen!~user@python/site-packages/supakeen
And you get all the fun stuff like normalization changing between unicode standard versions :) :)

1638451975
ifreund!~ifreund@user/ifreund
yep, you gain a dependency on the unicode standard

1638451979
ifreund!~ifreund@user/ifreund
which is by no means lightweight

1638452045
Franciman!~Franciman@mx1.fracta.dev
I had better support only ascii

1638452047
Franciman!~Franciman@mx1.fracta.dev
damn

1638452049
Franciman!~Franciman@mx1.fracta.dev
lol

1638452051
Franciman!~Franciman@mx1.fracta.dev
you are right

1638452066
Franciman!~Franciman@mx1.fracta.dev
and unicode in strings

1638452202
Franciman!~Franciman@mx1.fracta.dev
I wonder if there is a saner default

1638452204
Franciman!~Franciman@mx1.fracta.dev
than ascii

1638452399
flux_control!~flux@sourcemage/wizard/flux
As a programming language you'd be hard pressed to find anything saner than using ascii. It's the one codeset that is supported *everywhere* (unless you're working with a system that can't handle 8 bits, 7 if you restrict it to classic ascii).

1638452411
ifreund!~ifreund@user/ifreund
Franciman: your compiler doesn't need to be unicode aware to support unicode in strings, UTF-8 is backwards compatible with ascii

1638452437
flux_control!~flux@sourcemage/wizard/flux
There are other encodings that can capture quite a lot, but all encodings have deficiencies.

1638457672
companion_cube!~simon@user/companion-cube
ifreund: you probably want to support \u{…} literals

1638457675
companion_cube!~simon@user/companion-cube
but that's not too hard

1638457694
Franciman!~Franciman@mx1.fracta.dev
:<

1638457787
ifreund!~ifreund@user/ifreund
companion_cube: you still don't need to depend on the unicode standard to do that

1638457793
ifreund!~ifreund@user/ifreund
just emit the raw bytes the user provides

1638457811
companion_cube!~simon@user/companion-cube
no, indeed

1638457820
companion_cube!~simon@user/companion-cube
you do need to be able to encode codepoints to utf8

1638457823
companion_cube!~simon@user/companion-cube
but that's quite easy

1638457862
Franciman!~Franciman@mx1.fracta.dev
why do we live in such a hard situation?

1638457875
Franciman!~Franciman@mx1.fracta.dev
I mean a chinese will not be able to comfortably use the language

1638457966
companion_cube!~simon@user/companion-cube
I can't write identifiers with "é" in them either, and that's fine

1638458440
Franciman!~Franciman@mx1.fracta.dev
companion_cube: what's your language?

1638458445
Franciman!~Franciman@mx1.fracta.dev
français?

1638458448
Franciman!~Franciman@mx1.fracta.dev
italiano?

1638458456
Franciman!~Franciman@mx1.fracta.dev
éspañol?

1638458478
Franciman!~Franciman@mx1.fracta.dev
inb4 i misspelled spanish in spanish

1638458800
companion_cube!~simon@user/companion-cube
français

1638458825
Franciman!~Franciman@mx1.fracta.dev
oais

1638458830
Franciman!~Franciman@mx1.fracta.dev
c'est fantastique

1638458834
Franciman!~Franciman@mx1.fracta.dev
ouais*

1638458862
Franciman!~Franciman@mx1.fracta.dev
je ne suis pas français, mais je m'appelle Francesco, ou François

1638458949
companion_cube!~simon@user/companion-cube
:)

1638458953
companion_cube!~simon@user/companion-cube
and yet I program in english

1638458975
Franciman!~Franciman@mx1.fracta.dev
i also do that

1638458987
Franciman!~Franciman@mx1.fracta.dev
but think about people from china

1638458989
Franciman!~Franciman@mx1.fracta.dev
or japan

1638458997
Franciman!~Franciman@mx1.fracta.dev
and now I realize that nobody cares about my language

1638459006
Franciman!~Franciman@mx1.fracta.dev
thanks ppl

1638460399
companion_cube!~simon@user/companion-cube
they can also learn english ;)

1638460407
companion_cube!~simon@user/companion-cube
most docs on programming are in english after all

1638460775
tgschultz!UserNick@047-034-058-084.res.spectrum.com
I personally don't think having to write identifiers in romaji or pinyin is too much to ask, but as I'm not a native speaker of Japanese or Chinese my perspective isn't worth much on the subject.

1638461027
bgiannan!giann@2a01:4f8:141:1272::2
https://github.com/tomaka/rouille :D

1638461038
bgiannan!giann@2a01:4f8:141:1272::2
huh wrong link

1638461045
bgiannan!giann@2a01:4f8:141:1272::2
there https://github.com/bnjbvr/rouille

1638461155
companion_cube!~simon@user/companion-cube
calisse!()

1638461159
companion_cube!~simon@user/companion-cube
losing my shit on that one :D

1638461230
_javyre!~javyre@2001:470:69fc:105::2162
ooh nice to be acknowledged as quebecois :)

1638461279
_javyre!~javyre@2001:470:69fc:105::2162
> tabarnak! lmao

1638461305
bgiannan!giann@2a01:4f8:141:1272::2
companion_cube, you canadian or french?

1638461330
companion_cube!~simon@user/companion-cube
french :)

1638461336
_javyre!~javyre@2001:470:69fc:105::2162
nomagno: in general or here?

1638461488
_javyre!~javyre@2001:470:69fc:105::2162
nah. I guess it depends where in canada. The montreal accent is very confused and unique so can't really say personally xD

1638461496
_javyre!~javyre@2001:470:69fc:105::2162
oh but in french yes

1638461830
_javyre!~javyre@2001:470:69fc:105::2162
btw, on the actual topic of zig: Is there a way to basically do: `functionthatmightfail() catch unreachable;` but without actually crashing? The goal  here is to print a return trace of the error but not crash.

1638461935
_javyre!~javyre@2001:470:69fc:105::2162
what I'm doing right now is just catching the error and printing it, but that gives no information about where the error came from. 

1638461936
dutchie!~dutchie@user/dutchie
`function() catch |e| { printInfoAbout(e); return }` or whatever you want to do to carry on

1638461974
_javyre!~javyre@2001:470:69fc:105::2162
that's what I'm doing right now but it's not very insightful. I can only print the name of the error

1638462000
dutchie!~dutchie@user/dutchie
oh there's @errorReturnTrace

1638462008
dutchie!~dutchie@user/dutchie
i've not used it myself but I think that's what you need

1638462011
_javyre!~javyre@2001:470:69fc:105::2162
oh that sounds promising

1638462076
_javyre!~javyre@2001:470:69fc:105::2162
ayt I'm about to try thanks. Can't believe I missed that in the langref

1638462110
dutchie!~dutchie@user/dutchie
it's easy to gloss over all those builtins

1638462455
_javyre!~javyre@2001:470:69fc:105::2162
worked like a charm :) https://i.imgur.com/h6ppxs4.png

1638464153
Franciman!~Franciman@mx1.fracta.dev
what does unreachable do?

1638464297
ifreund!~ifreund@user/ifreund
Franciman: it's an assertion that the given branch is never reached during execution

1638464318
ifreund!~ifreund@user/ifreund
if that branch is in fact reached, it's a panic in safe build modes and UB in release fast/small

1638464331
ifreund!~ifreund@user/ifreund
assert is implemented as `if (!ok) unreachable;` for example

1638464464
_javyre!~javyre@2001:470:69fc:105::2162
iiuc unreachable also implies @setCold(true) right?

1638464574
ifreund!~ifreund@user/ifreund
_javyre: it's far stronger than that in fast build modes

1638464582
ifreund!~ifreund@user/ifreund
s/fast/unsafe/

1638464600
ifreund!~ifreund@user/ifreund
maybe it should do that in release-safe though, I don't think it does currently

1638464771
_javyre!~javyre@2001:470:69fc:105::2162
oh damn. Yeah I don't see why not have it in debug. It's not like setCold() on an unrecoverable error path would make any difference to program logic..

1638464811
ifreund!~ifreund@user/ifreund
_javyre: setCold() in debug would be useless as there aren't any optimizations being done as its debug mode :P

1638464825
ifreund!~ifreund@user/ifreund
the only case where it would matter is release-safe

1638464837
_javyre!~javyre@2001:470:69fc:105::2162
oh true lol

1638465198
Franciman!~Franciman@mx1.fracta.dev
tanks

1638471597
pkap!~pkap@185.213.155.252
Is there something like strlen() in zig to get length of `[*:0]const u8`?

1638471971
luuk!~luuk@user/luuk
std.mem.sliceTo(some_slice, 0)

1638472042
luuk!~luuk@user/luuk
some_slice is actually a bad name for the example lol

1638472057
luuk!~luuk@user/luuk
Meant to say pointer

1638472213
ugla!~ugla@2001:470:69fc:105::2b5
`std.mem.len(...)` should work

1638472361
luuk!~luuk@user/luuk
Ah yeah, that's actually a better suggesting since you only needed the length. (I should've read more carefully)

1638472368
luuk!~luuk@user/luuk
s/suggesting/suggestion

1638472836
pkap!~pkap@185.213.155.252
Ah thanks luuk and ugla. I was only looking in the core docs not in the std docs-_-

1638478351
ifreund!~ifreund@user/ifreund
mem.sliceTo(foo, 0).len is actually a better translation of strlen()

1638478366
ifreund!~ifreund@user/ifreund
mem.len(foo) won't iterate foo if foo is an array

1638482656
Franciman!~Franciman@mx1.fracta.dev
I feel dumb to ask this

1638482668
Franciman!~Franciman@mx1.fracta.dev
but does the stack have particular properties

1638482673
Franciman!~Franciman@mx1.fracta.dev
as opposed to the heap memory

1638482679
Franciman!~Franciman@mx1.fracta.dev
or is it just a piece of memory like the heap

1638482684
Franciman!~Franciman@mx1.fracta.dev
just handled by the language runtime?

1638482718
andrewrk!~andrewrk@mail.ziglang.org
it's virtual memory, the same as the heap. but typically there is a special register called the "stack pointer" that the language manages for you, which points at the top of the stack

1638482758
Franciman!~Franciman@mx1.fracta.dev
thanks andrew

1638482777
devast8a!~devast8a@2001:470:69fc:105::3f46
Also generally the allocation for the stack has a special flag in the OS so it knows if you go beyond the allocation that it should automatically extend it for you.

1638482828
devast8a!~devast8a@2001:470:69fc:105::3f46
You can replicate it with `mmap` and the `MAP_GROWSDOWN` flag.

1638482906
andrewrk!~andrewrk@mail.ziglang.org
devast8a, what OS's do that? in my experience on linux, you just get segfault if you hit the guard page

1638482972
andrewrk!~andrewrk@mail.ziglang.org
huh the man pages for MAP_GROWSDOWN agrees with you though

1638482975
andrewrk!~andrewrk@mail.ziglang.org
I should experiment with this

1638483002
devast8a!~devast8a@2001:470:69fc:105::3f46
You might be right though, it's totally possible that people decided this was a terrible idea with large memory spaces and don't do it anymore.

1638483034
ifreund!~ifreund@user/ifreund
I'm pretty sure you just segfault with a stack overflow on linux if you go past the 8 MiB or whatever it is

1638483049
ifreund!~ifreund@user/ifreund
if it grew infinitely, runaway recursion would OOM you commonly

1638483087
devast8a!~devast8a@2001:470:69fc:105::3f46
Does the mapping reserve the whole 8 MiB region?

1638483246
devast8a!~devast8a@2001:470:69fc:105::3f46
I was under the impression that `MAP_GROWSDOWN` was still in use with a guard page wherever you want it to end. Thinking about it now though, there's no way it works this way. You might as well just reserve the whole 8 MiB region.

1638483280
Franciman!~Franciman@mx1.fracta.dev
basically I wanted to use a stack for my language

1638483282
Franciman!~Franciman@mx1.fracta.dev
to get things going faster

1638483291
Franciman!~Franciman@mx1.fracta.dev
but I wanted it to be as fast as a real stack

1638483317
andrewrk!~andrewrk@mail.ziglang.org
I think the simple answer to your question is "no there is no difference"

1638483336
andrewrk!~andrewrk@mail.ziglang.org
if you need a stack with a runtime known capacity, ArrayList is an excellent tool for the job

1638483336
ifreund!~ifreund@user/ifreund
I'm pretty sure the main stack for processes and threads doesn't come from mmap and doesn't use MAP_GROWSDOWN

1638483337
Franciman!~Franciman@mx1.fracta.dev
so I just allocate a huge array of u8

1638483348
Franciman!~Franciman@mx1.fracta.dev
and define my allocator

1638483361
Franciman!~Franciman@mx1.fracta.dev
yeah ok

1638483371
Franciman!~Franciman@mx1.fracta.dev
tomorrow will be dedicated to this experiment, thanks ^^

1638483378
Franciman!~Franciman@mx1.fracta.dev
well now the second problem is cache

1638483380
Franciman!~Franciman@mx1.fracta.dev
lol

1638483385
Franciman!~Franciman@mx1.fracta.dev
I am enemy with my cache

1638483857
Franciman!~Franciman@mx1.fracta.dev
second step is having a GC

1638483892
flux_control!~flux@sourcemage/wizard/flux
Franciman: FWIW, I speak several of the languages you mentioned. 1) They are already required to use English because the keywords of the programming languages (if, for, while, ...) are in English. 2) They aren't required to use English for identifiers, but ascii (and therefore transliterated versions of words from their language are fine).

1638483920
Franciman!~Franciman@mx1.fracta.dev
ty

1638483924
Franciman!~Franciman@mx1.fracta.dev
curious to know what languages you speak

1638483926
Franciman!~Franciman@mx1.fracta.dev
:P

1638484020
Franciman!~Franciman@mx1.fracta.dev
i will probably create my standard coding which forces people to only use japanese

1638484022
Franciman!~Franciman@mx1.fracta.dev
:P

1638484027
Franciman!~Franciman@mx1.fracta.dev
and define the keywords in japanese

1638484346
flux_control!~flux@sourcemage/wizard/flux
Franciman: Japanese is one of them. ;)

1638484598
Franciman!~Franciman@mx1.fracta.dev
i need to get an high quality implementation

1638484623
Franciman!~Franciman@mx1.fracta.dev
this is too important

1638484657
Arnavion!arnavion@user/arnavion
There was a lisp with Japanese keywords on the orange website a few months ago

1638484736
Arnavion!arnavion@user/arnavion
(   https://news.ycombinator.com/item?id=28624483   )

1638488156
fengshaun!~fengshaun@S010680615f0c2c0a.cg.shawcable.net
I'm using zls with emacs+lsp, every time I save the document lsp disconnects. I don't have that issue with any other language server. *lsp-log* doesn't show anything. How can I debug what's going on with zls

