1630500142
flyx[m]!~flyxflyxo@mail.flyx.org
correct me if I'm wrong, but the grammar seems to be ambiguous concerning dangling else

1630500215
ifreund!~ifreund@user/ifreund
flyx[m]: how so? a PEG grammar is by definition unambiguous 

1630500242
ifreund!~ifreund@user/ifreund
though the actual implementation may not match the formal grammar perfectly, and there have been inconsistencies in the past

1630500290
flyx[m]!~flyxflyxo@mail.flyx.org
`if (a) if (b) x else y;` can be constructed both with the else binding to the inner if as well as binding to the outer if

1630500343
ifreund!~ifreund@user/ifreund
flyx[m]: no, not if you follow the PEG grammar

1630500362
flyx[m]!~flyxflyxo@mail.flyx.org
well it does not say that it is a PEG grammar

1630500363
ifreund!~ifreund@user/ifreund
the variants in rules are ordered

1630500395
ifreund!~ifreund@user/ifreund
flyx[m]: >This folder contains the Parsing Expression Grammar for the Zig programming language.

1630500429
flyx[m]!~flyxflyxo@mail.flyx.org
well I'm looking at the documentation page that contains the grammar

1630500467
flyx[m]!~flyxflyxo@mail.flyx.org
where did you get that from

1630500475
ifreund!~ifreund@user/ifreund
https://github.com/ziglang/zig-spec/tree/master/grammar

1630500536
flyx[m]!~flyxflyxo@mail.flyx.org
okay so I'm sure people who are involved know that but for me it seems that information is well hidden, being in a whole different repository

1630500546
ifreund!~ifreund@user/ifreund
you're right that the language reference doesn't explicitly say that the grammar is a PEG grammar, but it doesn't explicitly say it is anything else either 

1630500565
ifreund!~ifreund@user/ifreund
it should probably just link to the zig-spec repo to be honest

1630500585
flyx[m]!~flyxflyxo@mail.flyx.org
yeah that seems a good solution

1630503134
companion_cube!~simon@user/companion-cube
ifreund: saying PEG is unambiguous is like saying "the spec is the implementation"

1630503199
ifreund!~ifreund@user/ifreund
companion_cube: it's impossible to express an ambiguous grammar in PEG, that's what I mean

1630503241
companion_cube!~simon@user/companion-cube
yes

1630503253
companion_cube!~simon@user/companion-cube
but it can still be ambiguous or hard to comprehend for people

1630503264
companion_cube!~simon@user/companion-cube
(or hard to parse with alternative techniques, like yacc)

1630503279
ifreund!~ifreund@user/ifreund
it is very possible to do so in, for example, EBNF 

1630503307
companion_cube!~simon@user/companion-cube
isn't EBNF just a notation?!

1630503314
ifreund!~ifreund@user/ifreund
companion_cube: that meaning of "ambiguous" is not what we were discussing here, unless I'm mistaken

1630503329
ifreund!~ifreund@user/ifreund
companion_cube: https://en.wikipedia.org/wiki/Ambiguous_grammar

1630503364
ifreund!~ifreund@user/ifreund
PEG is also "just a notation"

1630503373
companion_cube!~simon@user/companion-cube
alternatively: it's ambiguous, but PEG just makes a choice for you

1630503387
companion_cube!~simon@user/companion-cube
I should refrain from discussing syntax here, though.

1630503483
ifreund!~ifreund@user/ifreund
PEG doesn't make the choice for you, you make the choice when you write the PEG and decide on the order of choices

1630503585
companion_cube!~simon@user/companion-cube
yes

1630503636
companion_cube!~simon@user/companion-cube
imho a good grammar should fit in LR(1) or LALR(1)

1630503660
companion_cube!~simon@user/companion-cube
maybe zig does, idk

1630507862
noam!~noam@104.232.42.247
Can if-expressions even be used without an else?

1630507876
noam!~noam@104.232.42.247
... ah wait, statements, not expression

1630511679
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ACTION stuffs ifreund into my backpack

1630513340
ifreund!~ifreund@user/ifreund
haze: what have I done to deserve the honor? :P

1630513357
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
nothing we are just going on an adventure

1630513443
ifreund!~ifreund@user/ifreund
I'm going to a concert tonight, as long as we make it there I'm down :D

1630513516
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
don't worry that is our destination. the fun comes from the journey though

1630517143
andrewrk!~andrewrk@mail.ziglang.org
you two just described the entire plot of A Goofy Movie

1630520347
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
Hey

1630520359
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
Having this issue: https://github.com/ziglang/zig/issues/6793

1630520392
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
On first glance, it looks like it'd be relatively straightforward for me to contribute a fix

1630520456
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
But I don't have a ton of experience contributing to OSS compilers outside of my personal toy projects, so I wanted to see if people thought this would be a good first issue to try my hand with for Zig in particular

1630520569
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
If not, does anyone know of a way to get around this? I've been trying to tweak my AST definitions to coerce the compiler into producing the correct llvm, but haven't had much success thus far

1630520651
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
can u provide sample c0de

1630520688
andrewrk!~andrewrk@mail.ziglang.org
haze, https://github.com/ziglang/zig/issues/5197#issuecomment-623131963

1630520705
andrewrk!~andrewrk@mail.ziglang.org
it's a known issue with a reduction already

1630520732
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i kno i asked for sample code to see if there was a way we could work around it

1630520798
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
but ig not

1630521894
cot!~kiedtl@kisslinux/kiedtl
How does one get the maximum value allowed for an integer?

1630521907
cot!~kiedtl@kisslinux/kiedtl
s/integer/integer type/

1630521916
cot!~kiedtl@kisslinux/kiedtl
so 255 for u8, 65535 for u16, etc

1630522069
semarie!~semarie@user/semarie
cot: it should be something like std.math.maxInt(u8), std.math.maxInt(u16), etc

1630522729
cot!~kiedtl@kisslinux/kiedtl
Ah, thanks

1630523905
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
haze: my bad! The source is a big-ish AST, and I haven't been able to trim it down to a minimal example yet, since it looks like the issue comes from my expr nodes, which have a lot of recursive self-dependencies that makes it hard to look at them in isolation

1630523928
Achierius!~Guest80@2601:644:680:4540:a507:7d99:46a1:2510
I'll continue working on it to see if I can get something readable though

1630533067
cot!~kiedtl@kisslinux/kiedtl
Is it possible to access the variant of a union instance by a comptime-known variable, similar to how fields of structs can be accessed by a comptime-known string?

1630533180
cot!~kiedtl@kisslinux/kiedtl
So, suppose I have `const my_type = union(enum) { Foo: void, Bar: void }; const my_field = @TagType(my_type).Foo;`, can I do something along the lines of `@field(my_union_instance, my_field)`

1630533192
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
@field works, not sure what the question is?

1630533236
cot!~kiedtl@kisslinux/kiedtl
@field takes a []const u8, I want to access the union by the tag type

1630533261
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
you can do @tagName on the tagtype to get a []const u8 from an enum

1630533288
cot!~kiedtl@kisslinux/kiedtl
Ah, shoulda thought of that before. Thanks for the workaround :^)

1630533293
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
no problem!

1630536839
cot!~kiedtl@kisslinux/kiedtl
Um, why is the compiler telling me "comptime struct field missing initialization value" when I'm initializing all comptime fields of the struct?

1630536855
cot!~kiedtl@kisslinux/kiedtl
I mean, I'm just doing a normal `.{ .comptime_field = value }`

1630536906
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
maybe it means inside the struct declaration? not sure though?

1630536917
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
like comptime a: u32 = 0,

1630538087
cot!~kiedtl@kisslinux/kiedtl
oh... that makes sense, the error points to the struct declaration

1630538096
cot!~kiedtl@kisslinux/kiedtl
but why would it require a default value?

1630538135
cot!~kiedtl@kisslinux/kiedtl
ACTION assigned values

1630538146
cot!~kiedtl@kisslinux/kiedtl
>Segmentation fault (core dumped)

1630538152
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
:(

