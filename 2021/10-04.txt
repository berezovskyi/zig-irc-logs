1633307190
Tekk!~tekk@86.106.121.178
Hey, are you not supposed to use std.process.args directly?

1633307211
Tekk!~tekk@86.106.121.178
I ran into an error with it and looking on github I don't see a single use of it in the wild. Absolutely everyone uses argsAlloc

1633307448
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
args() won't work on windows

1633307618
Tekk!~tekk@86.106.121.178
I think you're confused? Or the docs are wrong.

1633307628
Tekk!~tekk@86.106.121.178
std.os.argv says "This doesn't work on Windows, go look at std.process.args"

1633307633
Tekk!~tekk@86.106.121.178
https://ziglang.org/documentation/master/std/#std;os.argv

1633307685
Tekk!~tekk@86.106.121.178
ofc std.process.args is *completely* undocumented, so that may also not work on windows; the advice on std.os.argv is a bit silly in that case though.

1633307688
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ahh

1633307698
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
args is an iterator, argsalloc returns an array

1633307703
Tekk!~tekk@86.106.121.178
Mhm

1633307712
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i reccomend you don't use the web docs; they are bad

1633307744
Tekk!~tekk@86.106.121.178
Yeah, I've also grabbed the source tree and I'm transitioning over to using that.

1633307749
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
cool

1633307771
Tekk!~tekk@86.106.121.178
https://dpaste.com/BWBAZGRXU That's the error I get btw.

1633307786
Tekk!~tekk@86.106.121.178
I'm guessing it's something to do with the fact that it's a ?Error!returnType rather than Error!?returnType?

1633307802
Tekk!~tekk@86.106.121.178
I don't know how if ? has priority over !

1633307841
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
for (try args.next(alloc)) |arg|

1633307878
Tekk!~tekk@86.106.121.178
Complains that args.next(alloc) isn't a union type. I think the problem is that I have to un-option it.

1633307892
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
hmm, weird

1633307933
Tekk!~tekk@86.106.121.178
Apparently ! binds more tightly than ?, so that's good to know

1633307960
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
the return type is     pub fn next(self: *ArgIterator, allocator: *Allocator) ?(NextError![:0]u8) {

1633307964
Tekk!~tekk@86.106.121.178
The | x | syntax *requires* the return type to be an option

1633307967
Tekk!~tekk@86.106.121.178
So I don't think that's it.

1633307970
Tekk!~tekk@86.106.121.178
Mhm

1633308035
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
this works for me https://paste.rs/oCv

1633308050
Tekk!~tekk@86.106.121.178
Hmm

1633308103
Tekk!~tekk@86.106.121.178
That does build for me

1633308113
Tekk!~tekk@86.106.121.178
https://dpaste.com/H6W8BC5XK This is what I have

1633308143
Tekk!~tekk@86.106.121.178
(oops, add in a "var argc: u32 = 0;" above the for loop. Accidentally took that out)

1633308181
Tekk!~tekk@86.106.121.178
Oh, hold on.

1633308186
Tekk!~tekk@86.106.121.178
switching from a for to a while fixed it

1633308199
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yoeah

1633308204
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
for is for arrays

1633308211
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
the error message could have been better though

1633308235
Tekk!~tekk@86.106.121.178
For some reason in my head it's arrays and iterators (with my brain going that the array syntax is just sugar for iterators). I'll get it straight eventually.

1633308247
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
zig doesn't have iterators

1633308927
Tekk!~tekk@86.106.121.178
Okay, I have another weird one.

1633308980
Tekk!~tekk@86.106.121.178
https://dpaste.com/595YMY7RN Gotten this far. If I run it, I get messages about memory leaks. That makes sense since .next() tells you that you have to free the return.

1633309045
Tekk!~tekk@86.106.121.178
but if I do alloc.destroy(arg) I get compiler errors. In the former case that arg isn't a pointer, it's a '[:0]u8'.

1633309054
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
alloc.free(arg)

1633309073
Tekk!~tekk@86.106.121.178
Free is arrays, destroy is pointers then?

1633309080
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yes

1633309089
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
create + destroy for singles. alloc + free for multiples

1633309191
Tekk!~tekk@86.106.121.178
Now it's running without any leaks. Thanks g-w1 

1633309196
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
you are welcome

1633309801
Tekk!~tekk@86.106.121.178
Also just out of curiosity with an unrelated project, there aren't any flags in build.zig or w/e to knock down on the output binary size, are there?

1633309811
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
-Drelease-small

1633309836
freshcoffee!~fresh@user/freshcoffee
and `--strip`

1633310531
Tekk!~tekk@86.106.121.178
Hm. 16k for echo.

1633310543
Tekk!~tekk@86.106.121.178
That might just save the quixotic "linux on a floppy" project :D

1633310571
Tekk!~tekk@86.106.121.178
Assuming I can write the necessary tools

1633311144
freshcoffee!~fresh@user/freshcoffee
hello world on linux: 5752 bytes: zig build-exe hello.zig -OReleaseSmall --strip

1633311193
Tekk!~tekk@86.106.121.178
Yeah, I'm trying to look at a comparison too. I already wrote echo in zig, just wrote it in C real quick

1633311207
Tekk!~tekk@86.106.121.178
But i386-linux-musl doesn't wanna boostrap on my openbsd box. Booting linux on the desktop :p

1633311300
Tekk!~tekk@86.106.121.178
Not bad

1633311352
Tekk!~tekk@86.106.121.178
Echo from zig build -Drelease-small and then hit with strip -s: 15.8k

1633311379
Tekk!~tekk@86.106.121.178
Echo with zig cc -target=i386-linux-musl echo.c -Os then hit with strip -s: 17k

1633311394
freshcoffee!~fresh@user/freshcoffee
musl is static libc

1633311405
Tekk!~tekk@86.106.121.178
I'd hope so

1633311433
Tekk!~tekk@86.106.121.178
Ah, the zig output isn't static.

1633311439
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
it should be

1633311467
Tekk!~tekk@86.106.121.178
Hmm

1633311468
freshcoffee!~fresh@user/freshcoffee
heh down to 2384 bytes using command-line strip

1633311479
Tekk!~tekk@86.106.121.178
Ohh

1633311483
Tekk!~tekk@86.106.121.178
I think that's openbsd :p

1633311509
Tekk!~tekk@86.106.121.178
Every binary on openbsd shows up as a dynamic object file because of their PIE stuff

1633311521
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
iirc every binary on openbsd has to link libc

1633311530
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
because syscall abi not stable

1633311538
Tekk!~tekk@86.106.121.178
Mhm

1633311607
Tekk!~tekk@86.106.121.178
Okay, apples to apples. zig echo build for i386-linux on linux and hit with strip -s

1633311624
Tekk!~tekk@86.106.121.178
...35k. That doesn't seem right.

1633311650
freshcoffee!~fresh@user/freshcoffee
source for .zig?

1633311693
Tekk!~tekk@86.106.121.178
Oh, that's better.

1633311700
freshcoffee!~fresh@user/freshcoffee
hmm looks like aarch64 has improved enough with llvm13 that lots of testsuite is going to be re-enabled again :)

1633311703
Tekk!~tekk@86.106.121.178
9.9k if I don't pass --target

1633311709
Tekk!~tekk@86.106.121.178
35k if I do --target=i386-linux

1633311710
Tekk!~tekk@86.106.121.178
Weird

1633311820
freshcoffee!~fresh@user/freshcoffee
variations to confuse with poor fonts: llvm13 llvml3 11vml3 11vm13

1633311879
freshcoffee!~fresh@user/freshcoffee
llvmI3

1633311963
Tekk!~tekk@86.106.121.178
https://git.sr.ht/~tekk/zebrafish/tree/trunk/item/src/echo.zig

1633311967
Tekk!~tekk@86.106.121.178
That's the source for echo.zig

1633311976
Tekk!~tekk@86.106.121.178
Was there something wrong with my --target?

1633311983
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
do you want this to run on windows?

1633311987
Tekk!~tekk@86.106.121.178
Never

1633311987
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
if not you can use std.os.argv

1633311994
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
no allocation

1633312026
Tekk!~tekk@86.106.121.178
True. I'm not too worried by the allocation though. Just the binary size is throwing me off.

1633312032
Tekk!~tekk@86.106.121.178
I wonder if -Drelease-small gets ignored if you specify a target

1633312037
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
allocation creates a bigger size

1633312056
Tekk!~tekk@86.106.121.178
The binary is <10k if I don't specify target though. That's plenty small.

1633312067
Tekk!~tekk@86.106.121.178
The confusing thing is that no target specified is <10k

1633312072
Tekk!~tekk@86.106.121.178
--target=i386-linux was 35k

1633312094
freshcoffee!~fresh@user/freshcoffee
funny that both `zig ... --strip` plus external `strip` command actually yields smaller binary than either of those by themselves.

1633312107
freshcoffee!~fresh@user/freshcoffee
not by much. but I get 8952 for `echo` -target i386-linux

1633312127
Tekk!~tekk@86.106.121.178
Are you running on stable or the master branch?

1633312141
freshcoffee!~fresh@user/freshcoffee
master. it's using llvm13.

1633312151
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
no target is -march=native

1633312162
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
so it probably has to generate more instructinos as the cpu is way less new

1633312173
yeti!~username@user/yeti
hw.c ... 3732 binary thru   ack -mlinux386

1633312315
Tekk!~tekk@86.106.121.178
Possibly. Is there a list-targets?

1633312516
freshcoffee!~fresh@user/freshcoffee
this gets me 8944 byes: zig build-exe echo.zig -target i386-linux -OReleaseSmall --strip; strip echo

1633312572
Tekk!~tekk@86.106.121.178
Hold on, trying to get std.mem.eql to calm down after converting this to have no allocations

1633312577
Tekk!~tekk@86.106.121.178
Then we'll see how small it gets.

1633312587
Tekk!~tekk@86.106.121.178
Also clearly I need to build zig and get onto master rather than 0.8.1

1633312598
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
master is on the website

1633312643
Tekk!~tekk@86.106.121.178
Same difference to me

1633312751
Tekk!~tekk@86.106.121.178
Ahh, because it's sentinel-terminated.

1633313245
Tekk!~tekk@86.106.121.178
3.9k

1633313247
Tekk!~tekk@86.106.121.178
That's not bad at all.

1633313256
Tekk!~tekk@86.106.121.178
Order of magnitude improvement over 0.8.1

1633316685
Tekk!~tekk@86.106.121.178
echo's 3.9k, cat's 5.1k. Looking good so far.

1633316691
Tekk!~tekk@86.106.121.178
:D

1633317511
daurnimator!~daurnimat@vultr.daurnimator.com
Tekk: panic function also probably takes up space?

1633317529
daurnimator!~daurnimat@vultr.daurnimator.com
and yeah: allocators will use space.

1633317601
Tekk!~tekk@86.106.121.178
I've got nothing using an allocator so far.

1633317607
Tekk!~tekk@86.106.121.178
Though I think I'll probably need one for ls

1633317613
Tekk!~tekk@86.106.121.178
and I'll almost certainly need one for sh

1633317662
freshcoffee!~fresh@user/freshcoffee
these are ReleaseSmall builds so panic() doesn't seem significant. in ReleaseSafe it can save 3K by overriding it to inf loop

1633317784
Tekk!~tekk@86.106.121.178
I think this ought to be plenty small. A minimal linux with module, floppy, and ext2/fat support is ~1M

1633317797
Tekk!~tekk@86.106.121.178
So I've got almost half a meg for applications. If the compiler keeps performing this well that's plenty

1633317880
freshcoffee!~fresh@user/freshcoffee
ACTION pretends he doesn't know what a floppy is

1633317934
Tekk!~tekk@86.106.121.178
That's thought. Most apps don't even use a floppy disk as a save icon anymore, do they?

1633323535
semarie!~semarie@user/semarie
Tekk: how do you get zig on openbsd ? you build it yourself ?

1633323764
Tekk!~tekk@86.106.121.178
 It's packaged actually!

1633323789
semarie!~semarie@user/semarie
yes I know, I am the maintainer :)

1633323799
Tekk!~tekk@86.106.121.178
Ah.

1633323821
semarie!~semarie@user/semarie
so beware that the llvm12 version used for zig isn't well polished for crosscompilation

1633323828
freshcoffee!~fresh@user/freshcoffee
semarie: was meaning to ask you, do you have diffs for openbsd and llvm13

1633323844
Tekk!~tekk@86.106.121.178
Thankfully I have a linux box for that particular cross compilation

1633323864
Tekk!~tekk@86.106.121.178
Laptop is openbsd, desktop is linux for projects like this and games c:

1633323894
semarie!~semarie@user/semarie
freshcoffee: yes. mortimer@ (another openbsd dev) is maintaining a llvm tree with openbsd changes

1633323903
semarie!~semarie@user/semarie
see https://github.com/mordak/llvm-project/tree/openbsd-release/13.x

1633323914
freshcoffee!~fresh@user/freshcoffee
thanks!

1633325288
Tekk!~tekk@86.106.121.178
Thanks for your work on it semarie 

1633326680
Tekk!~tekk@86.106.121.178
What's the best way to turn a [*:0] const u8 into a []const u8?

1633326698
Tekk!~tekk@86.106.121.178
I thought it might be std.mem.copy, but I don't think std.mem.copy works on sentinel-terminated arrays?

1633326705
Tekk!~tekk@86.106.121.178
Since it uses the .len field

1633326931
freshcoffee!~fresh@user/freshcoffee
std.mem.sliceTo()

1633327121
Tekk!~tekk@86.106.121.178
Oh, the docs threw me off on that one

1633327133
Tekk!~tekk@86.106.121.178
The "if you chose to search for the sentinel, it'll still be sentinel terminated"

1633327148
Tekk!~tekk@86.106.121.178
But I guess in that situation it's both, like strings?

1633327697
Tekk!~tekk@86.106.121.178
Is there any reason why unwrapping a pointer with if seems to give it constness?

1633327740
Tekk!~tekk@86.106.121.178
I'm doing openDir(...) catch null; Then if (maybe_fp) |fp| { defer fp.close(); ... and it's complaining that fp is const

1633328022
freshcoffee!~fresh@user/freshcoffee
|fp| is const, |*fp| is mutable, and fn is `std.fs.Dir.close(self: *Dir)` as opposed to `(self: *const Dir)`

1633328119
Tekk!~tekk@86.106.121.178
That might be worth a PR on the docs. I'll think on that when it's not 2 am

1633328133
Tekk!~tekk@86.106.121.178
Mentioning that |foo| will be const and you need |*foo| if you need mutability, I mean.

1633328167
freshcoffee!~fresh@user/freshcoffee
it's a little... inconsistent. if you have a file object, iirc, the close uses a value (copy) object so it's not required to be mutable

1633328179
Tekk!~tekk@86.106.121.178
It does, which is part of what threw me off.

1633328187
Tekk!~tekk@86.106.121.178
I'm working on (well, just about finished now) ls.

1633332743
tintin!~tinh@165.22.70.115.static.exetel.com.au
hi, is there any libraries to generate zig code (text)? I am not lucky with my Google fu. Thanks

1633332876
Tekk!~tekk@86.106.121.178
You mean like macros?

1633333223
tintin!~tinh@165.22.70.115.static.exetel.com.au
Tekk, not exactly. What I am trying to do is parsing an XML file and use that information to generate zig code.

1633334017
LostKobrakai_!~LostKobra@2001:16b8:2d70:b900:1111:c974:e837:3326
tintin this does something similar, but with json as the source: https://github.com/marlersoft/zigwin32gen

1633334210
tintin!~tinh@165.22.70.115.static.exetel.com.au
LostKobrakai_, thanks. This looks promising.

1633339909
ifreund!~ifreund@user/ifreund
tintin: there are some helpers for generating zig code in std.zig, for example

1633339920
ifreund!~ifreund@user/ifreund
std.zig.fmtId()

1633342906
tintin!~tinh@165.22.70.115.static.exetel.com.au
ifreund, thanks. I will take a look at this too

1633348403
ane!ane@nikita.tnnet.fi
identify ane %^jF6^Jb6Cxh@v8#V2rRA7mb

1633348406
ane!ane@nikita.tnnet.fi
well, shit

1633348479
ane!ane@nikita.tnnet.fi
... what I meant to say was, is there something like signal() from libc signal.h in zig stdlib?

1633348519
ane!ane@nikita.tnnet.fi
there's the lowlevel signalfd thing an example of which I found here https://gist.github.com/lithdew/79717cd161490bc1895a6df3f610a565

1633348599
ifreund!~ifreund@user/ifreund
ane: signal is kinda deprecated/not good practice. sigaction is what you probably should be using and is in the zig std

1633348779
ane!ane@nikita.tnnet.fi
oh right

1633349081
ane!ane@nikita.tnnet.fi
oh right

1633355575
bgiannan!~bgiannan@2a01:4f8:141:1272::2
is there a gist to build llvm13 on macos lying around?

1633355709
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ane lmfao

1633355731
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
bgiannan yes, use freshcoffee's https://gist.github.com/mikdusan/79005fe26a1f72b4aa7d246e1c1f43e1

1633355765
bgiannan!~bgiannan@2a01:4f8:141:1272::2
thanks

1633356438
bgiannan!~bgiannan@2a01:4f8:141:1272::2
and how can i point to where is llvm13 when building zig?

1633357286
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
bgiannan after those two commands run `ninja install`

1633357294
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
then do `-DCMAKE_INSTALL_PREFIX=/opt/llvm13...`

1633357305
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
when using cmake on zig

1633357307
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
then just ninja

1633357344
bgiannan!~bgiannan@2a01:4f8:141:1272::2
nice thank you

1633357374
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
you are welcome :)

1633365515
freshcoffee!~fresh@user/freshcoffee
andrewrk: I have #9883 ready, one thing I'm not 100% on though is these lines; #6830 has been closed a while ago, just not sure if you _still_ wanted zig1.o to be rebuilt?

1633365518
freshcoffee!~fresh@user/freshcoffee
https://github.com/ziglang/zig/blob/c41b989ab8c553bdba8e1aab606edbe27d730a3a/ci/drone/linux_script_build#L55-L59

1633365597
ifreund!~ifreund@user/ifreund
hmm, I feel like rebuilding it is good for consistency even if there's no longer a know issue fixed by it

1633365647
ifreund!~ifreund@user/ifreund
same reason self-hosting compilers compile themselves to produce a stage3 instead of just using stage2

1633371947
andrewrk!~andrewrk@mail.ziglang.org
agreed

1633372051
freshcoffee!~fresh@user/freshcoffee
ok I'll put that back in. thx

1633372085
andrewrk!~andrewrk@mail.ziglang.org
thank *you*

1633372097
freshcoffee!~fresh@user/freshcoffee
no no no . thank _you_

1633372194
andrewrk!~andrewrk@mail.ziglang.org
btw that apk line is effectively a TODO for next time we update the docker image to make sure that one goes in there

1633372450
freshcoffee!~fresh@user/freshcoffee
got it: TODO > NOTE

1633373852
andrewrk!~andrewrk@mail.ziglang.org
Snektron[m], nice, I think with #9885 the saturating int behavior tests can be moved to the "passing for stage2" section

1633384897
mla!~mla@162.253.176.229
@bitCast(u24, [3]u8{ 0x00, 0x00, 0x00 })

1633384919
mla!~mla@162.253.176.229
shouldnt that work?

1633384926
mla!~mla@162.253.176.229
i get: destination type u24 has size 4 but source type [3]u8 has size 3

1633384945
mla!~mla@162.253.176.229
u24 would be size 3 of 8 bits; thus 24

1633385568
andrewrk!~andrewrk@mail.ziglang.org
u24 is stored in 4 bytes for alignment purposes

1633385979
mla!~mla@162.253.176.229
hm so i guess i need to expand the alignment of [3]u8 somehow then

1633386295
andrewrk!~andrewrk@mail.ziglang.org
I suggest `x[0] | (x[1] << 8) | (x[2] << 16)`

1633386394
companion_cube!~simon@user/companion-cube
I wonder if there's a simd instruction for that?

1633386435
devast8a!~devast8a@2001:470:69fc:105::3f46
unaligned load followed by aligned store I guess

1633386918
mla!~mla@162.253.176.229
andrewrk: thx, that works

