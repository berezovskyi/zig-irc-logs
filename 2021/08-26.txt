1629938620
andrewrk!~andrewrk@mail.ziglang.org
hmm here's a conundrum: if AstGen.zig reports an error for "use of undeclared identifier" then how would an "Organize Imports" feature work? ðŸ¤”

1629947076
discipulus!~discipulu@user/discipulus
andrewrk: do you experience scrolling issues on this page? https://paulespinosa.github.io/zig-langref/test-fixed-nav-01.html

1629973549
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Is there a way to return an anonymous structure from a function? It seems that anytype is not a valid return type.

1629973678
dutchie!~dutchie@user/dutchie
fn foo() struct { x: usize, y: bool } { return .{ .x = 42, .y = true}; }

1629973725
dutchie!~dutchie@user/dutchie
although most of the time i've done that i have ended up giving it a name eventually

1629973951
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
I see but that means I have to define the type. The same way I can pass an anonymous function as parameter into an anytype, I'd like to do the same with return values.

1629974515
flyx[m]!~flyxflyxo@mail.flyx.org
fn foo() type { const val = .{.droggel = "jug"}; return struct { fn result() @TypeOf(val) { return val; } }; }

1629974522
flyx[m]!~flyxflyxo@mail.flyx.org
and then foo().result()

1629974880
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
But can it would simpler to just do: fn foo() anytype { return .{.droggel = "jug"}; }

1629974920
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
There is probably a fundamental reason not to allow anytype as return value but I can't seem to see why.

1629974970
dutchie!~dutchie@user/dutchie
my guess is to do with stack sizes

1629974986
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Wouldn't be also a problem with function parameters?

1629974998
dutchie!~dutchie@user/dutchie
it is a very uninformed guess

1629975024
ifreund!~ifreund@user/ifreund
there's no technical reason it'd be impossible, it's a language design decision

1629975025
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
I think the types are deduced at comptime in both cases

1629975030
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
ah ok

1629975154
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Do yo happen to know if there is an issue documenting the reason?

1629975254
flyx[m]!~flyxflyxo@mail.flyx.org
https://github.com/ziglang/zig/issues/447 probably

1629975288
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Yes just found it :)

1629975289
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Thx

1629975343
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
from andrewrk: "There is no current plan for return type inference. This is a simplification of the language for the person reading the code as well as the compiler implementation."

1629975347
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
Case closed thanks.

1629975587
LukeSkwkr!~LukeSkwkr@164.249.94.92.rev.sfr.net
What I find odd is that it's allowed for parameters not return type. It can be surprising for a zig newbie. What's even stranger is that the documentation mentions anytype being used as a return type: https://ziglang.org/documentation/master/#alignCast

1629983970
ldearquer!~user@cm-83-97-235-19.telecable.es
What would be the proper way to create a CrossTarget struct in build.zig? I have this code which is a bit old, and I am trying to rewrite it for zig master:

1629983994
ldearquer!~user@cm-83-97-235-19.telecable.es
const main_o = b.addObject("main", "main.zig");

1629983994
ldearquer!~user@cm-83-97-235-19.telecable.es
    main_o.setTarget(builtin.Arch{ .thumb = .v7m }, builtin.Os.freestanding, builtin.Abi.none);

1629983994
ldearquer!~user@cm-83-97-235-19.telecable.es
    exe.addObject(main_o);

1629984006
ldearquer!~user@cm-83-97-235-19.telecable.es
The error comes up on setTarget()

1629984061
ldearquer!~user@cm-83-97-235-19.telecable.es
I have seen in std docs that it requires a CrossTarget struct, but instead of creating it from scratch, I wondered if there would be a builtin instance I could use

1629984123
ikskuh!~xq@2a0d:5940:6:163::ad7e
i would just create it from scratch

1629984128
ikskuh!~xq@2a0d:5940:6:163::ad7e
especially if you have a fixed target

1629984802
ldearquer!~user@cm-83-97-235-19.telecable.es
ikskuh thanks, I will give it a try :)

1629986909
ldearquer!~user@cm-83-97-235-19.telecable.es
Is this a typical way of declaring a CrossTarget?

1629986911
ldearquer!~user@cm-83-97-235-19.telecable.es
const target = std.zig.CrossTarget{

1629986911
ldearquer!~user@cm-83-97-235-19.telecable.es
        .cpu_arch = std.Target.Cpu.Arch.thumb,

1629986911
ldearquer!~user@cm-83-97-235-19.telecable.es
        .cpu_model = std.build.Target.CpuModel{.determined_by_cpu_arch = {}},

1629986911
ldearquer!~user@cm-83-97-235-19.telecable.es
        .os_tag = std.Target.Os.Tag.freestanding,

1629986911
ldearquer!~user@cm-83-97-235-19.telecable.es
        .abi = std.Target.Abi.none,

1629986912
ldearquer!~user@cm-83-97-235-19.telecable.es
    };

1629986924
ikskuh!~xq@2a0d:5940:6:163::ad7e
yep

1629986930
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can remove most prefixes though

1629986932
ikskuh!~xq@2a0d:5940:6:163::ad7e
".abi = .none"

1629986933
ldearquer!~user@cm-83-97-235-19.telecable.es
It compiles fine, but I am looking for a way to specify arm architecture

1629986936
ikskuh!~xq@2a0d:5940:6:163::ad7e
.cpu_arch = .thumb

1629986947
ikskuh!~xq@2a0d:5940:6:163::ad7e
you can make a more concrete cpu model

1629986995
ldearquer!~user@cm-83-97-235-19.telecable.es
with cpu_features?

1629987005
ikskuh!~xq@2a0d:5940:6:163::ad7e
or just std.Target.arm.cpu.cortex_m3

1629987007
ldearquer!~user@cm-83-97-235-19.telecable.es
I want to specify v6m or v7m

1629987016
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, if you only want to specify this, use cpu_features :)

1629987064
ldearquer!~user@cm-83-97-235-19.telecable.es
could you point me to an example? cpu features are just a Set, and I am not sure how to specify them

1629987069
ldearquer!~user@cm-83-97-235-19.telecable.es
would it be just a string?

1629987135
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/MasterQ32/Ziguana-Game-System/blob/master/old-version/build.zig#L12-L28

1629987175
ldearquer!~user@cm-83-97-235-19.telecable.es
nice one!

1629987177
ldearquer!~user@cm-83-97-235-19.telecable.es
thx!

1629987203
flyx[m]!~flyxflyxo@mail.flyx.org
is there syntax like `foo().defer bar();` meaning â€žexecute foo immediately, defer call to barâ€œ?

1629987259
ikskuh!~xq@2a0d:5940:6:163::ad7e
const x = foo(); defer x.bar();

1629987273
flyx[m]!~flyxflyxo@mail.flyx.org
well that's exactly what I want to avoid

1629987277
ikskuh!~xq@2a0d:5940:6:163::ad7e
then: no

1629987286
ikskuh!~xq@2a0d:5940:6:163::ad7e
variables arent't bad!

1629987359
ldearquer!~user@cm-83-97-235-19.telecable.es
fn addFeature(*Set, arch_feature_index: u9) void

1629987366
ldearquer!~user@cm-83-97-235-19.telecable.es
what is u9?

1629987377
ldearquer!~user@cm-83-97-235-19.telecable.es
(this is from std doc)

1629987390
flyx[m]!~flyxflyxo@mail.flyx.org
it's just that this seems a pretty frequent pattern in places where you'd do RAII in C++, so I thought a little syntax sugar would be nice there for a more compact notation

1629987417
ikskuh!~xq@2a0d:5940:6:163::ad7e
ldearquer: u9 is just a 9 bit unsigned integer

1629987421
ikskuh!~xq@2a0d:5940:6:163::ad7e
like u8, but one bit more

1629987430
ldearquer!~user@cm-83-97-235-19.telecable.es
but it is not part of the language, is it?

1629987450
ikskuh!~xq@2a0d:5940:6:163::ad7e
flyx[m]: can you make a concrete example? haven't felt the need to do so yet

1629987458
ikskuh!~xq@2a0d:5940:6:163::ad7e
ldearquer: quoting the language docs:

1629987463
ikskuh!~xq@2a0d:5940:6:163::ad7e
(fetching...)

1629987475
ldearquer!~user@cm-83-97-235-19.telecable.es
oops

1629987476
ldearquer!~user@cm-83-97-235-19.telecable.es
yeah

1629987478
ldearquer!~user@cm-83-97-235-19.telecable.es
I see it

1629987479
ikskuh!~xq@2a0d:5940:6:163::ad7e
> In addition to the integer types above, arbitrary bit-width integers can be referenced by using an identifier of i or u followed by digits. For example, the identifier i7 refers to a signed 7-bit integer. The maximum allowed bit-width of an integer type is 65535.

1629987484
ldearquer!~user@cm-83-97-235-19.telecable.es
my bad

1629987492
ldearquer!~user@cm-83-97-235-19.telecable.es
sorry for wasting your time...

1629987501
ikskuh!~xq@2a0d:5940:6:163::ad7e
because u4096 is a good private key type :D

1629987513
ldearquer!~user@cm-83-97-235-19.telecable.es
:) yup

1629987578
flyx[m]!~flyxflyxo@mail.flyx.org
I emit an XML-like structure so let's have XML as example: I frequently do `const lvl = startElm("name"); defer lvl.end();` which will write `<name>`, increase indentation, and at the end decreases indentation and does `</name>`

1629987630
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah, i think this is okay for clarity :)

1629987773
devast8a!~devast8a@2001:470:69fc:105::3f46
Speaking of which. What does zig do with integer widths larger than 64? presumably it starts moving onto vectors of increasing size and then just emulates big integer operations on even larger ints?

1629987842
ikskuh!~xq@2a0d:5940:6:163::ad7e
right now, i think it just does integers up to 128 bit, everything else is kinda vaporware

1629987846
ikskuh!~xq@2a0d:5940:6:163::ad7e
and we do big-integers

1629987885
ikskuh!~xq@2a0d:5940:6:163::ad7e
devast8a: but basically what you can do is how you always to bigger ints: "ADD, ADC, ADC, ADC" for a 32 bit add on 6502

1629987887
ikskuh!~xq@2a0d:5940:6:163::ad7e
add with carry

1629987896
ikskuh!~xq@2a0d:5940:6:163::ad7e
you don't need allocations for big integers of known size :)

1629988175
devast8a!~devast8a@2001:470:69fc:105::3f46
Yeah, I assume it doesn't bother doing any of the more niche optimizations, dual chains with ADCX/ADOX or non-power-of-two limb sizes?

1629988217
ikskuh!~xq@2a0d:5940:6:163::ad7e
no idea

1629988224
ikskuh!~xq@2a0d:5940:6:163::ad7e
i hope we will resolve this properly in stage2

1629988229
ikskuh!~xq@2a0d:5940:6:163::ad7e
so the backends don't need to care for it

1629988729
flyx[m]!~flyxflyxo@mail.flyx.org
is there a common pattern how to do custom formatters? like I want to format a string so that certain characters are replaced with escape sequences and it would be nice to write `print("content: \"{se}\", .{content});` with se calling my custom string escaper

1629988746
flyx[m]!~flyxflyxo@mail.flyx.org
I dropped a " somewhere

1629988906
ikskuh!~xq@2a0d:5940:6:163::ad7e
print("content: {}", .{ flyxFmt(content) });

1629988922
ikskuh!~xq@2a0d:5940:6:163::ad7e
check out the implementation for std.zig.fmtEscapes for example :)

1629988944
flyx[m]!~flyxflyxo@mail.flyx.org
well that would leak memory

1629988953
ikskuh!~xq@2a0d:5940:6:163::ad7e
why?

1629988966
ikskuh!~xq@2a0d:5940:6:163::ad7e
recommendation: check out first, then comment

1629988973
ikskuh!~xq@2a0d:5940:6:163::ad7e
flyxFmt doesn't return a string

1629988979
ikskuh!~xq@2a0d:5940:6:163::ad7e
it returns a wrapper that can be formatted

1629989035
flyx[m]!~flyxflyxo@mail.flyx.org
ah

1629989121
flyx[m]!~flyxflyxo@mail.flyx.org
yeah fmt.Formatter is what I searched for, thx

1630003916
andrewrk!~andrewrk@mail.ziglang.org
discipulus, no issues for me on that page!

1630007188
ifreund!~ifreund@user/ifreund
> includenamespace

1630007198
ifreund!~ifreund@user/ifreund
the longest keyword just got one letter longer :D

1630007458
noam!~noam@104.232.42.247
haha, really?

1630007461
noam!~noam@104.232.42.247
Neat

1630007785
ifreund!~ifreund@user/ifreund
noam: semantics are also proposed to change a bit as well: https://github.com/ziglang/zig/pull/9618

1630007791
noam!~noam@104.232.42.247
Neat

1630014236
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
includeifreund 

1630014314
andrewrk!~andrewrk@mail.ziglang.org
@truncate(haze)

1630014368
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
> resulting in a smaller or same-sized integer type.

1630014376
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
did you just breed me?

1630014388
andrewrk!~andrewrk@mail.ziglang.org
gottem

1630014421
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ðŸ¥º

1630015031
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I have a question about memory. I know allocators can generate slices of a certain type. In my specific case, I want to get a *[32]u8 but I cannot convert my allocator generated slice to this specific type. How can I solve this issue?

1630015151
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
my gut says that allocators return slices because arrays are a compile time known thing? could be wrong tho

1630015184
ifreund!~ifreund@user/ifreund
Daimanta: you have two options, either slice the slice returned by the allocator with comptime-known bounds, or allocate the array as a value:

1630015213
ifreund!~ifreund@user/ifreund
1. const pointer_to_array: *[32]u8 = allocated_slice[0..32];

1630015243
ifreund!~ifreund@user/ifreund
2. const pointer_to_array: *[32]u8 = try allocator.create([32]u8);

1630015455
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Ah, that works. Thanks! Turns out, the code worked all along and I was looking at the wrong error :s. Nice to know that type coercion works in a logical manner.

1630016599
andrewrk!~andrewrk@mail.ziglang.org
I've been favoring the create() approach lately

1630016687
andrewrk!~andrewrk@mail.ziglang.org
it makes sense since generally having types be aware of more things is more useful

1630019418
ifreund!~ifreund@user/ifreund
the only issue with the create approach is that it doesn't let you allocate a `*align(4096) [32]u8` for example

1630019474
ifreund!~ifreund@user/ifreund
we can probably tweak std.mem.Allocator a bit though to support that better

1630019489
ifreund!~ifreund@user/ifreund
currently it's super verbose

1630019520
andrewrk!~andrewrk@mail.ziglang.org
ah good point

1630019529
noam!~noam@104.232.42.247
just have force-inlined convenience wrappers! /s

1630019553
ifreund!~ifreund@user/ifreund
https://github.com/coilhq/tigerbeetle/blob/892ff01485b892587be93b2202a54b08b9a7cba3/src/vr/journal.zig#L151-L157

1630019561
ifreund!~ifreund@user/ifreund
use case in real world code^

1630019585
ifreund!~ifreund@user/ifreund
I'll find time to PR something to the std at some point

1630020426
andrewrk!~andrewrk@mail.ziglang.org
I want to do another design pass on the Allocator interface 

1630020440
andrewrk!~andrewrk@mail.ziglang.org
a handful of design issues has piled up

1630020481
andrewrk!~andrewrk@mail.ziglang.org
* the @fieldParentPtr way of abstracting is fundamentally more difficult to optimize than a vtable strategy

1630020531
andrewrk!~andrewrk@mail.ziglang.org
* the mechanism to get more bytes than you asked for is dubious and might be at worst doing more harm than good and at best a bunch of complication for no benefit

1630020558
andrewrk!~andrewrk@mail.ziglang.org
* I want allocator implementations to have access to a comptime alignment. maybe even the type??

1630020586
andrewrk!~andrewrk@mail.ziglang.org
* @memset to undefined should happen in the Allocator implementations rather than the interface to avoid redundant memsets in safe modes

1630020661
andrewrk!~andrewrk@mail.ziglang.org
* the API is a bit of a mess

1630021071
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
andrewrk i always wondered why the T argument wasnt comptime known

1630021115
andrewrk!~andrewrk@mail.ziglang.org
the type? it is comptime known. but it gets changed into a runtime number of bytes before it gets passed down to the allocator implementation

1630021138
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
so why did you say "maybe even the type"

1630021140
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
what did you mean by that

1630021646
andrewrk!~andrewrk@mail.ziglang.org
I think you understood correctly, I meant the Allocator implementation would know the type in the case of create()

1630022330
noam!~noam@104.232.42.247
s/bu4

1630022332
noam!~noam@104.232.42.247
...oops

1630022359
noam!~noam@104.232.42.247
andrewrk: what makes fieldParentPtr more difficult to optimize?

