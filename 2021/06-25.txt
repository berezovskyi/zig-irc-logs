1624581256
ifreund!~ifreund@user/ifreund
ah, that is ugly

1624606130
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1624606138
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think we have a regression(?)

1624606148
ikskuh!~xq@2a0d:5940:6:163::ad7e
extern enum{} allowed using duplicate keys

1624606156
ikskuh!~xq@2a0d:5940:6:163::ad7e
enum(c_int) doesn't

1624609477
ifreund!~ifreund@user/ifreund
ikskuh: that's intentional

1624609486
ikskuh!~xq@2a0d:5940:6:163::ad7e
okay :)

1624609488
ifreund!~ifreund@user/ifreund
see the issue about removing extern enum

1624609488
ikskuh!~xq@2a0d:5940:6:163::ad7e
sad

1624609510
ikskuh!~xq@2a0d:5940:6:163::ad7e
solution are "const alias = foo.key;" ?

1624609541
ifreund!~ifreund@user/ifreund
it was a large complication purely for the sake of C interop, and translate-c is moving towards translating C enums as namespaced integer constants instead of actual enums iirc

1624609554
ifreund!~ifreund@user/ifreund
since that's really all enums are in C

1624609567
ikskuh!~xq@2a0d:5940:6:163::ad7e
yeah

1624609859
ikskuh!~xq@2a0d:5940:6:163::ad7e
also: autocrlf must die

1624619495
thing!~thing@user/thing
c

1624621686
marler8997!~marler899@204.229.3.4
damn, it takes 8 minutes to run "zig test" on my zigwin32 project now!

1624621840
ikskuh!~xq@2a0d:5940:6:163::ad7e
wow

1624622011
marler8997!~marler899@204.229.3.4
I'm guessing the ast check is not parallel yet

1624623157
marler8997!~marler899@204.229.3.4
looks like there are 1581 enum values conflicts in win32, meaning, enum values within the same enum that share the same value

1624623361
ifreund!~ifreund@user/ifreund
I assume you're aware that the proposed way to handle that is translating them as integer constants instead of an enum type?

1624623394
marler8997!~marler899@204.229.3.4
I still want the type safety though

1624623410
marler8997!~marler899@204.229.3.4
so I'm just removing the conflicts, but I still expose the constants as well

1624623421
marler8997!~marler899@204.229.3.4
I have kind of a hybrid approach which I think works very nice

1624623465
marler8997!~marler899@204.229.3.4
i.e. const Foo = enum {a, b, c};  pub const FOO_A = Foo.a; pub const FOO_B = Foo.b; ...

1624623767
marler8997!~marler899@204.229.3.4
one thing that's been really nice with Zig, is I do alot of my windows development on linux now :)

1624623791
marler8997!~marler899@204.229.3.4
pretty much all the development for zigwin32 is done on linux

1624623818
marler8997!~marler899@204.229.3.4
oh no, now when using zigwin32, it's taking forever!!

1624625369
ikskuh!~xq@2a0d:5940:6:163::ad7e
hm

1624625378
ikskuh!~xq@2a0d:5940:6:163::ad7e
i think it's a good benchmark for making astgen faster *grin*

1624625381
ikskuh!~xq@2a0d:5940:6:163::ad7e
how many LOC is that?

1624631030
ifreund!~ifreund@user/ifreund
it's measured in megabytes not lines afaik

1624631448
ifreund!~ifreund@user/ifreund
currently astgen is (intentionally) greedy and follows all @import()s in order to astgen all reachable source files 

1624631513
ifreund!~ifreund@user/ifreund
changing it to be non-greedy and only astgen files that are actually used would somewhat defeat the purpose though

1624631560
ifreund!~ifreund@user/ifreund
this should play well with the cache system though, so only the first run on zigwin32 should take 8 minutes, following runs should be near free I believe

1624631571
ifreund!~ifreund@user/ifreund
if that's not happening, then there's a bug with the caching

1624633449
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yeah, I think its because its eagerly importing stuff

1624633953
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
working on https://github.com/ziglang/zig/issues/9233

1624633964
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
anytype has become a footgun in astgen

1624635452
ifreund!~ifreund@user/ifreund
yeah, gotta check every TypeExpr in case its tag is anytype

1624635490
ifreund!~ifreund@user/ifreund
if you look at the grammar though there are only a few places it's allowed

1624635569
ifreund!~ifreund@user/ifreund
g-w1: I see your patch, I thought anytype union fields weren't allowed though. Shouldn't that be a compile error

1624635590
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ACTION checks the grammar

1624635602
ifreund!~ifreund@user/ifreund
the grammar allows it

1624635617
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
then what does not allow it?

1624635619
ifreund!~ifreund@user/ifreund
but the language shouldn't I don't think

1624635620
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
seems stage1 allows it

1624635627
ifreund!~ifreund@user/ifreund
really? that's ugly

1624635634
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
well, it was in iguana

1624635638
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
lemme check if its used

1624635666
ifreund!~ifreund@user/ifreund
as I understand it, anytype fields mostly exist due to their use in std.builtin.TypeInfo

1624635677
companion_cube!~simon@user/companion-cube
should "anytype" be named "comptime type" ? :)

1624635677
ifreund!~ifreund@user/ifreund
if they weren't required there, they wouldn't be in the language

1624635684
ifreund!~ifreund@user/ifreund
companion_cube: no

1624635710
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
iguana has this pub const CertificateVerifier = union(enum) {none, function: anytype, default,};

1624635735
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
seems to be used

1624635776
ifreund!~ifreund@user/ifreund
yeah, looks like stage1 accepts it

1624635816
ifreund!~ifreund@user/ifreund
We shouldn't make stage2 reject it without a proper proposal or word from above then

1624635827
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes

1624635870
companion_cube!~simon@user/companion-cube
ifreund: anytype sounds a lot like a dynamic type, is all :)

1624635873
ifreund!~ifreund@user/ifreund
I wish we could figure out a way to make @typeInfo() not require anytype

1624635920
ifreund!~ifreund@user/ifreund
companion_cube: `comptime type` was valid zig and the same just `type`. Now it is a compile error because the `comptime` is redundant

1624635928
companion_cube!~simon@user/companion-cube
heh

1624635952
ifreund!~ifreund@user/ifreund
there's no special casing there, `comptime i32` is invalid for the same reason

1624635967
ifreund!~ifreund@user/ifreund
anytype literally means that you can provide a value of any type

1624635984
companion_cube!~simon@user/companion-cube
nice

1624636092
companion_cube!~simon@user/companion-cube
I misunderstood anytype then, good to know

