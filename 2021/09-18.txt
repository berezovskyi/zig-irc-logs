1631923802
ibokuri!sid517924@user/ibokuri
Is the JSON parsing via `std.json.TokenStream` considered to be efficient? Like in a general sense, not looking for hard numbers or anything

1631924155
andrewrk!~andrewrk@mail.ziglang.org
ibokuri, I vaguely recall seeing a perf comparison in a github readme somewhere that included zig std.json and a few other language json impls

1631924177
andrewrk!~andrewrk@mail.ziglang.org
but I failed to find it in my browser history just now, sorry

1631924223
ibokuri!sid517924@user/ibokuri
oh, cool. I was trying to find something like that. I'll look around for it a bit

1631924503
ibokuri!sid517924@user/ibokuri
andrewrk: looks like https://github.com/kostya/benchmarks#json might be it?

1631924926
andrewrk!~andrewrk@mail.ziglang.org
nice, I think I haven't seen this before

1631924949
andrewrk!~andrewrk@mail.ziglang.org
lmao look at the primes section

1631924972
andrewrk!~andrewrk@mail.ziglang.org
I'm pretty sure that's because dnautics and SpexGuy have been working on the "primes drag race" for that one youtube guy's series

1631925020
ibokuri!sid517924@user/ibokuri
we got prime benchmarks on lockdown lol

1631934799
brocolis!~chatzilla@user/brocc
I tried `zig build-obj hello.zig` followed by `zig build-exe hello.obj` 

1631934801
brocolis!~chatzilla@user/brocc
lld-link: error: subsystem must be defined

1631934846
brocolis!~chatzilla@user/brocc
I'd like to compile and link in separate steps

1631934866
brocolis!~chatzilla@user/brocc
what's the correct command line?

1631935732
andrewrk!~andrewrk@mail.ziglang.org
brocolis, you can set the subsystem with --subsystem

1631935766
andrewrk!~andrewrk@mail.ziglang.org
if you pass an invalid value it will tell you the options

1631935806
andrewrk!~andrewrk@mail.ziglang.org
when you compile and link in separate steps, the subsystem cannot be inferred unfortunately

1631936056
brocolis!~chatzilla@user/brocc
ah thanks.. I tried `zig build-exe hello.obj --subsystem console` .. it says "lld-link: error: undefined symbol: ExitProcess"

1631936231
brocolis!~chatzilla@user/brocc
I will use `zig run hello.zig` for now

1631940774
discipulus!~discipulu@user/discipulus
luuk: what's the difference between container level and top-level?

1631941915
discipulus!~discipulu@user/discipulus
I'm working on a Containers section for the language reference (PR #9737). From my research so far, "container level" and "top-level" are synonymous.

1631942007
noam!~noam@104.232.42.247
discipulus: I believe that is correct

1631942034
discipulus!~discipulu@user/discipulus
noam: ok thank you

1631942052
noam!~noam@104.232.42.247
I don't think there's anything special about the root scope in a file; it's just a normal container scope

1631942075
discipulus!~discipulu@user/discipulus
That's my understanding too

1631944367
bgiannan!giann@2a01:4f8:141:1272::2
andrewrk, weird thing when doing pointer arithmetic with [*]T: `pointer -= some - 1` != `pointer = pointer - some - 1`, the first one just does -1 to pointer

1631944411
bgiannan!giann@2a01:4f8:141:1272::2
is there some weird precedence at play ? (but `pointer -= (some -1)` didn't work either)

1631944976
andrewrk!~andrewrk@mail.ziglang.org
brocolis, you need -lkernel32

1631944993
andrewrk!~andrewrk@mail.ziglang.org
when you compile and link in separate steps, the list of DLLs to link against cannot be inferred unfortunately

1631950774
flux_control!~flux@sourcemage/wizard/flux
I'm having problems building zig1 from zig0 on a machine with 4GB RAM and 4GB swap. I can't seem to find any combination of settings where it can build without getting OOM-killed. This is under Void linux with musl.

1631950785
flux_control!~flux@sourcemage/wizard/flux
Anyone have any suggestions?

1631950870
semarie!~semarie@user/semarie
flux_control: sadly, you will need more RAM or more swap. my last measurement was a pick to 9~10G of memory required

1631950908
flux_control!~flux@sourcemage/wizard/flux
:(

1631950924
flux_control!~flux@sourcemage/wizard/flux
I was hoping there might be an option I could tune. Alas, no.

1631951025
semarie!~semarie@user/semarie
I am not aware of such options...

1631951027
flux_control!~flux@sourcemage/wizard/flux
semarie: That's 9-10G total right? As in the combination of physical RAM + swap space?

1631951039
flux_control!~flux@sourcemage/wizard/flux
Or is 9-10GB of physical RAM required?

1631951040
semarie!~semarie@user/semarie
flux_control: yes, the total

1631951044
flux_control!~flux@sourcemage/wizard/flux
OK

1631951067
flux_control!~flux@sourcemage/wizard/flux
I'll see if I can add some temporary swap.

1631951092
semarie!~semarie@user/semarie
linux allows to create swap on a standard file

1631951125
semarie!~semarie@user/semarie
(not very good performance wise, but it could be a temporary hack)

1631951163
flux_control!~flux@sourcemage/wizard/flux
semarie: Yeah, the problem is that I don't have much disk space I can spare atm.

1631951290
flux_control!~flux@sourcemage/wizard/flux
I wonder if bootstrapping a from-source zig using a downloaded binary zig would require less RAM than doing it from absolute zero with cmake...

1631951398
flux_control!~flux@sourcemage/wizard/flux
Sadly, no, that doesn't make a difference either...

1631951485
semarie!~semarie@user/semarie
compiling d2b5105f5 : 9086556  maximum resident set size. so ~9Go of virtual memory

1631951512
semarie!~semarie@user/semarie
(on openbsd, but I assume it should be equiv on linux)

1631951640
noam!~noam@104.232.42.247
holy sheesh, it's that bad? :(

1631951661
flux_control!~flux@sourcemage/wizard/flux
Yeah

1631951679
noam!~noam@104.232.42.247
Unless you have to, I'd suggest not building from source

1631951686
noam!~noam@104.232.42.247
I'll note that this is the exact opposite of my normal advice

1631951713
noam!~noam@104.232.42.247
but zig's stage1 is a horrifying mess - the current development effort is explicitly "finish stage2 so we can pretend stage1 never existed" :P

1631951727
flux_control!~flux@sourcemage/wizard/flux
There were issues with compiling llvm itself before, but in some cases building it single-threaded (e.g. make -j1) or changing some options helped, so I was hoping that would be the case this time too.

1631951738
noam!~noam@104.232.42.247
(this isn't Zig's fault, to be clear; the first compiler for a language will basically always be awful)

1631951761
flux_control!~flux@sourcemage/wizard/flux
noam: Indeed. But isn't a stage1 needed in order to generate a stage2, build-wise?

1631951768
semarie!~semarie@user/semarie
it is a pinned issue :-)  "zig0 takes too much RAM to build zig1.o" #6485

1631951773
noam!~noam@104.232.42.247
Sorta, yeah

1631951781
noam!~noam@104.232.42.247
all you need is *an* existing compiler

1631951797
noam!~noam@104.232.42.247
There's a number of approaches being pursued

1631951806
flux_control!~flux@sourcemage/wizard/flux
Yes, the old chicken-and-egg problem of compilers

1631952275
flux_control!~flux@sourcemage/wizard/flux
Ah, according to #6378, IIUC, the stage1 c++ compiler would get replaced with a stage1 c compiler, thus drastically reducing the required VM to compile.

1631952293
flux_control!~flux@sourcemage/wizard/flux
Or maybe the generated C compiler would replace stage0?

1631952386
flux_control!~flux@sourcemage/wizard/flux
I'm getting confused on what the boundaries of the stages will become..

1631973637
daurnimator!~daurnimat@vultr.daurnimator.com
Tekk: zig care about the kernel version for e.g. assuming that the getrandom syscall exists

1631974847
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I´m on a long journey rebuilding the gnu coreutils in Zig. So far I´ve been making slow progress but I´m having fun and I am going forward. I´m running into some issues with C interop. As is known, C is built on 0 terminated ´strings´. I am having issues converting slices from and to null terminated strings. I have built my own functions for conversion purposes but I am wondering if there is a standardised Zig manner to do 

1631974847
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
this. Any pointer(:p)?

1631975008
rom1504!rom1504@rom1504.fr
hi, what are the current big projects for zig ? (just curious)

1631975086
acarrico!~acarrico@dhcp-68-142-39-249.greenmountainaccess.net
What do you mean by rebuilding? Are you creating a clone, like a busybox? Perhaps you should start by creating a syscall interface that minimizes the use of zero terminated strings first?

1631975237
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Providing CLI applications that behave in the same way as the CLI applications that now exist. Commands like ´whoami´ should return the calling user name etc. In order to do that I am (as of now) interfacing with glibc, which requires null-terminated strings for the interop.

1631975459
daurnimator!~daurnimat@vultr.daurnimator.com
Daimanta: std.mem.spanZ is your friend

1631975491
daurnimator!~daurnimat@vultr.daurnimator.com
uh, I guess `std.mem.sliceTo` now

1631975725
mercenary!~mercenary@user/mercenary
Daimanta: nice. Also nice that 'true' doesn't have --help and --version nonsense ;)

1631976797
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Thanks, I´ll look into that

1631994197
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
daurnimator i read the comment for spanTo but im still not sure what it does

1631995006
ifreund!~ifreund@user/ifreund
haze: it iterates until it finds the value you pass as the second argument, then returns the slice from the beginning to that position

1631995041
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ok maybe i was just missing where it would be useful

1631995042
ifreund!~ifreund@user/ifreund
if that value isn't found before the end of the provided memory is reached, it will return a slice containing the entire provided memory

1631995064
ifreund!~ifreund@user/ifreund
haze: say you have a 0 terminated string in a fixed size array

1631995081
ifreund!~ifreund@user/ifreund
(this is a fairly common pattern in C code to avoid allocation)

1631995124
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
oookie

1631995153
freshcoffee!~fresh@user/freshcoffee
also a common mistake in C is to assume such buffers are _always_ 0-terminated and then when it's full up, boom

1631995969
lumo_e!~enrico@2001:b07:5d38:4002:585f:d111:ec24:11ec
is the thingy that generates the experimental doc for the zig standard library available for other projects?

1631995995
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
ye i think its a emit option

1631995998
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
-emit docs or smthn

1631996667
ifreund!~ifreund@user/ifreund
(it's very incomplete)

1631997425
lumo_e!~enrico@2001:b07:5d38:4002:585f:d111:ec24:11ec
uhm, I'm looking for that option but nothing yet

1631997436
lumo_e!~enrico@2001:b07:5d38:4002:585f:d111:ec24:11ec
how is the doc/docgen.zig related?

1631997676
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
-femit-docs I think

1631997681
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
docgen generates the langref

1631997898
freshcoffee!~fresh@user/freshcoffee
lumo_e: here is how ci builds do it:

1631997901
freshcoffee!~fresh@user/freshcoffee
https://github.com/ziglang/zig/blob/d2b5105f54ac83fdd874df9408157773ae203798/ci/azure/linux_script#L82-L87

1631997991
lumo_e!~enrico@2001:b07:5d38:4002:585f:d111:ec24:11ec
oh thanks

1631998223
lumo_e!~enrico@2001:b07:5d38:4002:585f:d111:ec24:11ec
wonderful, thanks

1631998232
lumo_e!~enrico@2001:b07:5d38:4002:585f:d111:ec24:11ec
I know it's incomplete but I wanted to mess with it

