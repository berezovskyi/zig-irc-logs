1610593543
rocket_man
how do I read from stdin in Zig? I found

1610593602
rocket_man
./src/main.zig:2:32: error: no member named 'inStream' in struct 'std.fs.file.File'

1610593645
daurnimator
rocket_man: was renamed to .reader()

1610593668
rocket_man
that worked, thanks :)

1610593715
rocket_man
yay and you fixed the bug that made me switch from 0.6 xD

1610593734
rocket_man
it would abort if stdin was closed (with 0<

1610593745
rocket_man
* 0<&-

1610593805
rocket_man
trying to do advent of code in zig (a little late)

1610593820
daurnimator
I only got up to day 10 or so :(

1610593849
rocket_man
haha, well I originally tried in haskell and I only got to like day 5 there

1610593860
rocket_man
couldn't figure out how to use hashmaps

1610594073
rocket_man
hmm, how do I use an iterator of unknown length? I tried a `for` loop and got './src/main.zig:14:3: error: no member named 'len' in struct 'std.mem.SplitIterator''

1610594104
rocket_man
(or if this is an X Y problem and there's an easier way to say "for line in stdin" do let me know)

1610594217
daurnimator
rocket_man: you have to use a while loop

1610594239
rocket_man
thanks

1610594271
rocket_man
seems weird the for loop doesn't do that by default but  ¯\_(ツ)_/¯

1610594326
rocket_man
also it's slightly confusing that `const x = getStdOut().getOutStream()` will compile fine until you try to actually use it

1610594481
rocket_man
here's a feature I'd like - I got an error just now that 'expression value is ignored' for `try stdout.write(line);`. I was confused because I had `try`, but it turns out the issue is that I was ignoring the number of bytes written. In rust, there's `#[must_use = "write may not write all bytes"]`, it would be nice to have that in zig

1610594575
rocket_man
(the fix was to use writeAll instead)

1610595108
rocket_man


1610595272
kameliya
rocket_man: the "will compile fine until you actually use it" turns out to be a big part of how zig can do magic comptime stuff. it still trips me up sometimes despite knowing.

1610596074
rocket_man
hmm, the compiler seems to have gotten stuck - it's been compiling for like a solid minute

1610596083
rocket_man
I just have a trivial 16 line program

1610596128
rocket_man
oh wait the program it compiled was reading stdin, I'm dumb lol

1610596200
kameliya
haha

1610596308
rocket_man
wait, I can't even use for loops for lists? `./src/main.zig:20:3: error: no member named 'len' in struct 'std.array_list.ArrayListAligned(i64,null)'`

1610596328
kameliya
you want to iter over the `.items` member of the array list

1610596351
rocket_man
ah ok, thanks

1610596420
kameliya
np. `for' only iterates over arrays/slices, it won't do any method calls or anything.

1610596446
rocket_man
ok I see, ArrayList is a wrapper around a slice of unknown length

1610596448
rocket_man
makes sense

1610596485
kameliya
yep. it manages the `items' member and its backing storage for you, it'll always be a slice of the right length. (there may be more storage allocated behind it which arraylist keeps track of for you.)

1610596559
rocket_man
right, length vs capacity and all that

1610596603
kameliya
ya

1610596605
rocket_man
yay I finally got parsing and printing integers working xD only took me an hour

1610596620
kameliya
sweet! next time it'll take 5 minutes.

1610596668
rocket_man
I have to say it's super cool that `ArrayList.init` is just a function that takes a type

1610596678
rocket_man
no need to have generics if types are values haha

1610596695
kameliya
yeah, it ends up working super neatly in lots of ways

1610596734
kameliya
ime, comptime takes some time to get comfy with but you can express things traditional type-systems struggle to

1610596768
rocket_man
how does comptime work? is there like a compile time interpreter or something?

1610596788
kameliya
i think so, yeah. i haven't gone into the backend of it at all!

1610596859
rocket_man
hehe, well compilers are my passion so I'm always trying to figure out how they work

1610596873
rocket_man
hacked on the rust compiler for a while but I started to get tired of the awful compile times

1610596888
kameliya
there's a big rewrite in the works porting a lot of the compiler over from c++ to zig, good time to get involved!

1610596897
rocket_man
zig does a lot better there, it's awesome that it's so fast it doesn't even pre-compile the standard library

1610596939
rocket_man
haha, well I should probably learn zig first at all lol

1610596949
kameliya
ya hehe :)

1610597395
rocket_man
I see documentation for arrays in

1610597414
rocket_man
I want to know if an i64 is in an ArrayList

1610597481
rocket_man
std.mem.containsAtLeast looks about right

1610597518
rocket_man
little verbose though

1610597587
mikdusan
indexOfScalar(i64, &array_list, 4242)

1610597726
kameliya
rocket_man: thoroughly recommend you keep a tab with

1610597755
rocket_man
mikdusan: ./solution.zig:14:3: error: expected type '[]const i64', found '*std.array_list.ArrayListAligned(i64,null)'

1610597777
mikdusan
ah nuke the ampersand

1610597800
kameliya
you also want to use `.items' to get at the slice in the arraylist

1610597830
rocket_man
kameliya: well searching the stdlib requires me to know the name of what I'm searching for

1610597847
rocket_man
I was hoping the reference would have type signatures and such so I could look at those

1610597875
kameliya
rocket_man: indeed, so reading files like std/mem.zig and such tends to be fruitful.

1610597999
rocket_man
oh interesting primitive values can be null too

1610598107
rocket_man
what does this mean? './solution.zig:20:3: error: variable of type '(null)' must be const or comptime'

1610598115
kameliya
can you share the code that's causing it?

1610598121
rocket_man
`var found = null;`

1610598146
kameliya
ah. `null' itself has no type, so you need to declare what nullable type it might be

1610598148
rocket_man
I want to search an array for a number, assign it to `found` if so, and have `found` be null otherwise

1610598154
rocket_man
ok, thanks

1610598162
kameliya
e.g. `var found: ?usize = null;'

1610598183
rocket_man
I guess zig doesn't have type inferrence then?

1610598193
mikdusan
it does but there's nothing to infer in your statement

1610598194
rocket_man
since I did assign to it in the loop

1610598195
kameliya
it does, but it doesn't go backwards.

1610598201
rocket_man
ah ok, it's one-way

1610598218
rocket_man
rust has spoiled me for type inference lol

1610598229
kameliya
yep. if you have a `fn blah() ?usize { ... }' somewhere and then `var x = blah();', `x' will now be a `?usize'.

1610598277
rocket_man
is there a 'list.find()' function that does this? seems like a really common pattern

1610598292
kameliya
are you wanting the index of a matching member?

1610598303
rocket_man
I want the member if it matches and `null` otherwise

1610598311
daurnimator
mem.indexOf ?

1610598315
rocket_man
in rust this is `list.find(predicate)`

1610598349
rocket_man
no, indexOf doesn't allow a custom predicate

1610598354
daurnimator
zig discourages that functional type of approach

1610598356
daurnimator
use a loop

1610598358
kameliya
no predicates or lambdas, you will need to diy.

1610598362
rocket_man
hmm, ok

1610598394
kameliya
`var found: ?u32 = null; for (list) |e| { if (predicate) { found = e; break; } }'

1610598398
kameliya
something like that

1610598400
rocket_man
no lambdas? what's the `|x|` syntax for for loops then?

1610598406
daurnimator
rocket_man: that's a capture

1610598420
kameliya
you see them in switch, catch, if, while, etc. too

1610598475
daurnimator
yeah captures are essentially unexplained in the manual

1610598486
kameliya
yeah, they just come "for free" wherever they're used, lol

1610598529
daurnimator
`for (list) |x|` -> `x` is the value you're iterating over. you can also do `for (list) |x,i|` -> and you get the value and the index. you can also write `for (list) |*x|` to get a pointer to the item instead of a copy

1610598549
rocket_man
oh ok, compiler magic

1610598550
rocket_man
:P

1610598551
kameliya
rocket_man: wherever a block-ish expression introduces a new binding, captures |blah| tend to introduce the names for those bindings

1610598555
kameliya
more like syntax

1610598560
kameliya


1610598564
kameliya
i find this is a nice example

1610598573
kameliya
also because it shows how diy ergonomic iterators can work

1610598651
rocket_man
wait, so is the `break` there acting like `yield` in python?

1610598670
kameliya
no, that's .. a bit more magic too

1610598680
kameliya
you could write eventuallyNullSequence() like this:

1610598696
kameliya
if (numbers_left == 0) { return null; } else { numbers_left -= 1; return numbers_left; }

1610598728
rocket_man
ah ok, like labeled breaks in rust

1610598732
kameliya
ya --

1610598745
rocket_man
oh oh I'm being silly - eventuallyNull is called on every iteration of the loop

1610598751
rocket_man
there's nothing special about it, it's just a function

1610598752
kameliya
yep!

1610598761
kameliya
right, one that returns a nullable u32

1610598771
kameliya
when it returns null, the while loop breaks

1610598780
kameliya
when it isn't returning null, the non-null value is bound to the capture in the loop body

1610598785
rocket_man
nice, thanks :)

1610598790
kameliya
np

1610598869
rocket_man
hmm, zig seems to have forgotten that I just checked for null: `./solution.zig:29:43: error: invalid operands to binary expression: 'comptime_int' and '?i64'`

1610598874
rocket_man
for `std.debug.print("{} {}", .{found, 2020-found});`

1610598879
rocket_man
if I just print `found` it works fine

1610598893
daurnimator
you need to unwrap it

1610598913
daurnimator
you can use `.?` to assert its not-null. but that's rarely the best solution

1610598956
rocket_man
what's a better solution?

1610598967
rocket_man
I'm already checking for null, I just don't know the syntax

1610598980
daurnimator
`if (found) |value| { std.debug.print("{} {}", .{value, 2020-value}); }`

1610599002
rocket_man
ah interesting, `if` works with optionals too

1610599008
daurnimator
as does `while`

1610599031
rocket_man
booo the compiler doesn't like shadowing

1610599044
daurnimator
and btw, captures are for both optionals and errors

1610599131
rocket_man
yay I finished the first part of advent of code day one :)

1610599135
rocket_man
thanks for all the help!

1610599236
kameliya
yw! nicely done!

1610599378
rocket_man
why does zig use semicolons btw? it's not expression-oriented, if you leave it out it's just a syntax error

1610599390
daurnimator
rocket_man: redundancy

1610599446
rocket_man
it helps with error recovery in the parser or something?

1610599446
daurnimator
as in: you want some syntaxes to be invalid, so that 2 mistakes are required to write the wrong thing

1610599499
daurnimator
`foo() (someexpression)()` -> is this two expression or one?

1610599534
daurnimator
the answer

1610599549
daurnimator
for some languages the answer is "be greedy: it's one expression"

1610599550
rocket_man
well in rust it would be two :P and you have to disambiguate `(foo()(expression))()` if you want to call it twice

1610599572
daurnimator
rocket_man: no I was potentially calling the result of foo()

1610599649
rocket_man


1610599670
rocket_man
you can solve the ambiguity without always needing semicolons

1610599700
rocket_man
hmm I was wrong before though, it treats it as 3 function calls in row

1610599745
daurnimator
rocket_man: and now put it on two line: `foo()\n(someexpression)()`

1610599791
rocket_man
same behavior:

1610599851
rocket_man
oh  you meant it the other way - it will be the same still though

1610599868
rocket_man


1610599871
pjz
I wish zig would ignore extra semicolons, though; I tend to sprinkle them around a little if I'm uncertain of the exact grammar.  Sprinkling around {}; isn't quite as nice :)

1610599873
daurnimator
rocket_man:

1610599946
rocket_man
ok I take the point

1610600002
rocket_man
how do I say 'a slice of i64'?

1610600011
daurnimator
[]i64

1610600033
rocket_man
thanks

1610600048
daurnimator
btw, i64 is a pretty rare type to need

1610600083
rocket_man
as opposed to i32 you mean? probably yeah, but I figured better too big than too small

1610600103
daurnimator
rocket_man: I actually meant in terms of having it signed

1610600130
rocket_man
now that I'm surprised to hear xD

1610600207
daurnimator
use unsigned if negative numbers don't make sense (which is the majority of the time)

1610600210
rocket_man
although you're right, I could have made it unsigned in this case

1610600290
pjz
another popular choice is usize since you can index into slices with it

1610600331
daurnimator
you can index into slices with anything usize or smaller

1610600347
daurnimator
in general: pick the smallest integer type you can

1610600384
pjz
doing so lets zig optimize better, I think

1610600414
daurnimator
indeed. but it also helps you the developer by giving you errors if something is outside of the range you designed for

1610600415
rocket_man
well, I'm not worrying a ton about performance right now

1610600431
daurnimator
not to mention less memory usage

1610600434
pjz
true

1610600441
pjz
well, maybe less memory usage

1610600448
rocket_man
I don't know what you mean by 'designed for' in this context

1610600474
daurnimator
rocket_man: i.e. what's the biggest value you'll see? 5000? okay use a u13 then.

1610600483
rocket_man
well I don't know the largest value

1610600488
daurnimator
why not?

1610600502
rocket_man
it's just not part of the problem statement

1610600509
daurnimator
and if you truely don't know, then you better reach for the arbitrary precision bignum library

1610600520
rocket_man
heh

1610600520
pjz
rocket_man: you're doing aoc2020 ?

1610600524
rocket_man
pjz: yes

1610600536
pjz
rocket_man: download your input and you'll know :)

1610600541
rocket_man
daurnimator: I trust the authors not to give me

1610600560
rocket_man
pjz: well right, but it's not worth bothering with if i64 will be big enough

1610600573
daurnimator
IIRC AOC was fine with a u1

1610600575
daurnimator
u16

1610600593
pjz
I used usize mostly for all the AOC I did

1610600623
pjz
(which was...

1610600677
rocket_man
lol somehow I ended up with `-1318485525`

1610600681
rocket_man
I did

1610600733
rocket_man
oh I know what I did - how do I remove one element from a list at a time?

1610600746
rocket_man
I guess I could do `items[i..]` or something

1610600898
kameliya
is it an arraylist? do you want to actually mutate it or do you just want a new slice?

1610600913
kameliya
ArrayList has "orderedRemove(ix)"

1610600928
rocket_man
nah, [i..] was what I wanted

1610600930
kameliya
cool

1610600934
rocket_man
I just wanted to look at less of it

1610600950
rocket_man
still debugging why this behaves differently from my haskell solution though

1610601094
rocket_man
oh I forgot to multiply again lol

1610601096
rocket_man
doh

1610601104
rocket_man
and that's advent of code day 1 :)

1610601227
rocket_man
is there a way to tell `zig init-exe` to put the source file somewhere other than `src/main.zig`?

1610601232
rocket_man
bugs me when cargo does that too

1610601343
daurnimator
no

1610601360
daurnimator
and where do you want it instead?

1610601394
rocket_man
`solution.zig`

1610601422
rocket_man
in the rust world people have been tossing around the idea of 'templates' other than the default one

1610601502
rocket_man
anyway, just a paper cut, easy enough to edit build.zig

1610601646
rocket_man
is there something like `scanf` in zig? that takes a custom format string?

1610601662
andrewrk
not yet

1610601665
andrewrk
would be a nice addition

1610601699
andrewrk
so far our biggest use case for that is advent of code :)

1610601705
rocket_man
haha

1610601722
rocket_man
well, in fairness I expect a lot of uses in general come from advent of code xD

1610601747
rocket_man
andrewrk: if I wanted to add scanf how would I get started?

1610601794
rocket_man
(assuming I've read through

1610602032
rocket_man
kameliya: see, it only took me 3 hours to start working on the compiler xD

1610602148
daurnimator
rocket_man: recognise that `scanf` requires a peekable stream

1610602169
daurnimator
and therefore isn't suitable as a general stream method

1610602176
daurnimator
but instead should perhaps be on PeekableStream

1610602220
rocket_man
why does it need a peekable stream?

1610602278
rocket_man
I do see ungetc in

1610602280
daurnimator
because say you're reading a number: you read a byte: '1', you read a byte: '2', you read a byte: '@'... oops put that back; the number was 12

1610602300
rocket_man
ahh, makes

1610602303
rocket_man
*makes sense

1610602313
daurnimator
rocket_man: might be able to work from

1610602361
daurnimator
its not the best starting point; but it might give you ideas for the parser state machinery

1610602371
rocket_man
wow 700 lines seems like a lot of code right now haha

1610602381
daurnimator
though really... you might want to start again from the code in fmt.zig

1610602388
daurnimator
rocket_man: scanf isn't simple :P

1610602401
rocket_man
maybe I should come back to this in a few weeks lol

1610602408
daurnimator
probably a good idea

1610602678
rocket_man
good night everyone, thanks again for all the help :)

1610603200
kameliya
night!

1610603927
rocket_man
ok I'm back - I forgot to give a giant thank you to andrewrk for inspiring me to download LLVM for rust contributors the way zig does it :)

1610603932
rocket_man
@lokathor talked me into it

1610604369
andrewrk
nice :)

1610610132
kameliya
i’m 95% of the way from transferring control from my uefi bootloader (in zig) to a dummy os kernel (also zig), all on aarch64! much excite

1610610143
kameliya
just need to appease the mmu

1610623385
kameliya
hm.. i'm sure i know somewhere how @bitSizeOf(x) could equal 64 but @sizeOf(x) is 9

1610623421
kameliya
ah

1610623423
kameliya
packed structs

1610623424
kameliya
i see

1610623799
ifreund
kameliya: yeah, I recommend comptime asserts on the size/alignment of all of your packed structs with stage1

1610623868
ifreund
see:

1610628794
marler8997
someone one reddit is trying to compile a Zig library and call it from C, the docs say Zig will generate a C header file?  Is that true?

1610628832
marler8997
I tried the example in the docs that says a ".h" file will be generated, but it doesn't appear to work, no header file to be found?  Is it missing some command-line option/build config?

1610628871
marler8997
here's the doc reference:

1610628972
ifreund
marler8997: this functionality was temorarily removed shortly before 0.7.0 in #6250. It's recently been reimplemented though in this PR:

1610629007
ifreund
I haven't tested it though so I can't say how well it works in master but it should theoretically do something

1610629060
marler8997
thanks for the info

1610629226
mikdusan
I tried this: `zig build-lib z0.zig -femit-h` and:

1610629233
mikdusan
warning(compilation): -femit-h is not available in the stage1 backend; no .h file will be produced

1610629283
marler8997
yeah I got the same error, I'll let the reddit user know

1610629291
marler8997
would be nice to update the docs to indicate it's not supported

1610630496
ifreund
marler8997, mikdusan: you need to pass -fno-LLVM to use the self-hosted backend

1610646445
paulsmith
is it intended that std.io.Writer be an interface like std.mem.Allocator? i was surprised that this didn't work the way i expected:

1610646501
ifreund
paulsmith: no, std.io.Writer() is a function not a type. You probably just want to use anytype there

1610646748
paulsmith
ifreund: ok, that worked, thanks

1610647516
ifreund
no problem!

1610653246
ikskuh
andrewrk: do you happen to know where std.c.getpeername went? :D

1610653663
andrewrk
ikskuh, it didn't go anywhere; it never existed

1610653669
ikskuh
huh

1610653678
ikskuh
why the heck did that project

1610653785
ikskuh
i am confused :D

1610653906
ifreund
maybe you added the extern def for it and forgot to send a PR :P

1610653985
ikskuh
haha

1610653991
ikskuh
that's a possiblity

