1609632874
mikdusan
yeah it's about time I tried discord. I seem to be connect now

1609646944
marler8997
anyone know how "zig run" may have been broken recently?  It's adding the compiler as an extra argument to the running program

1609647237
g-w1
I just fixed it in a pr :P

1609647347
marler8997
thanks g-w1

1609656357
andrewrk
PSA: zig build now installs to $build_root/{debug,release}/ by default instead of $cwd/zig-cache/

1609656364
andrewrk
thanks g-w1 for that

1609657585
leeward
ooh, fancy

1609657756
marler8997
$build_root?

1609661388
Nilium
Very nice.

1609663841
marler8997
g-w1 doesn't look like your PR fixed the issue

1609664827
daurnimator
ooooo, idea for an alternate implementation of `EnumSet`: make a large packed struct at comptime

1609665078
marler8997
g-w1, nevermind, I was running the old zig.exe which has not moved because the install dir was changed :)

1609665255
daurnimator
damn, idea doesn't work nicely for non-exhaustive enums

1609672411
marler8997
darunimator I didn't understand your comment in the array format specifier proposal

1609672448
marler8997
woops spelled your username wrong, daurnimator

1609672466
daurnimator
marler8997: I thought I made an issue for it once but I forgot

1609672493
daurnimator
marler8997: if there was a distinct String type from just "array of u8", then there would be no debate over how slice of u8 is printed: it would always be as the numbers

1609672527
daurnimator
whereas this proposed String type would have a format() method that would render it as a string

1609672541
daurnimator
its useful for other reasons (e.g. to attach string methods to)

1609672552
marler8997
that would fix the issue around string literals/error messages yes

1609672575
marler8997
I see what you're saying now

1609672682
daurnimator
heh; almost exactly a year ago:

1609672869
daurnimator
and apparently 3 months before that:

1609681234
pixelherodev
What's the reasoning for the convention of one compilation unit per project?

1609681866
DarkUranium
pixelherodev, don't know about Zig's, but I can think of

1609681893
DarkUranium
It's a common practice in some projects (especially embedded, but also some audio-related stuff) to basically #include the whole source into one huge file, to allow the compiler to optimize better.

1609681913
DarkUranium
LTO's kind of slowly obsoleting that advantage, but LTO's still very buggy --- or was, last I've tried it.

1609681999
pixelherodev
DarkUranium: it

1609682035
DarkUranium
pixelherodev, I'd argue the opposite, that trying to merge object files manually is anachronistic. But yes, LTO as is done nowadays is a mess.

1609682100
pixelherodev
Great idea, not so great implementations :P

1609682120
pixelherodev
Also, I was using achronistic as a stupid alliterative way of saying "untimely" ;P

1609684553
daurnimator
pixelherodev: what do you even mean by saying untimely?

1609684636
pixelherodev
"takes a lot of time" :P

1609689835
fengb
I mean, none of those other words you used means takes a lot of time...

1609691376
pixelherodev
fengb: I know, I was blatantly trying to force a bad alliteration :P

1609695841
dch
I was expecting the compiler to slap me for using undefined;

1609696035
dch
instead `zig test main.zig` reports all tests passed.

1609696255
dch
even `zig test -O Debug main.zig` is happy. I'd thought this would assign 0xaa to the undefined variable, but evidently it ends up with 0

1609704390
leeward
dch: That is super weird.

1609704459
leeward
It looks like it's deciding that `undefined < 8` is always false.

1609704596
leeward
Yeah, in fact, `var i: u8 = undefined; std.testing.expect(i > 8)` passes

1609704672
dch
huh

1609704763
leeward
That seems like a bug to me.

1609704796
dch
ok I will add an issue for that

1609704812
leeward
Yeah, that's a good idea.

1609704831
dch
is there a way to get zig to print out the underlying llvm stuff?

1609704854
leeward
You want the IR?

1609704891
dch
i guess, yeah. first time delving into this, so pointers (sic) welcomed

1609704982
leeward
-femit-llvm-ir[=path] might be what you want. `zig build-exe --help` has lots of information.

1609704991
dch
tyvm

1609705560
g-w1
I think it is probably a weird llvm optimisation. llvm knows that 0xaa > 8, so it doesn't compile that branch. that is my guess

1609705785
FireFox317
andrewrk, in #7598 i added llvm backend testing to test-stage2, however i did not enable it on the ci yet. Should i do that?

1609706085
pixelherodev
FireFox317: I'd say yees, but I could be wrong

1609709095
leeward
g-w1: Confirmed. `expect(i == 0xaa)` passes.

1609709650
g-w1
yep, so we must tell llvm to not optimise that or just make stronger checks for using undefined. idk anything about llvm.

1609710121
g-w1
you should file a bug

1609711754
dch
I read the llvm-ir output. And then I ran away to a small dark corner and cried for my mommy.

1609711797
dch
I need to level up somewhat to deal with that. not today.

1609712224
marijnfs
did something change in build.zig? I don't get my binaries in zig-cache/bin anymore

1609712262
FireFox317
marijnfs, yep:

1609712331
marijnfs
ah I see, so it just add another dir?

1609712366
marijnfs
people better not have a dir named 'debug' ;)

1609713274
fengb
I think a `dist` folder would be more standardized

1609714788
marijnfs
i also wouldn't mine a zig-cache/debug or something

1609715284
sebonirc
does anyone know what the current status of [#1717](

1609715983
marijnfs
i would like that

1609716011
marijnfs
struct{fn bla() void {}}.bla is getting a bit much

1609716020
g-w1
it says on the issue milestone 0.8.0

1609716368
sebonirc
g-w1: but to my knowledge the way it will be implemented still hasnt been fully worked out. for a while there was a proposal to drop the `const` keyword in global scope and just have it be implicit, but that was scrapped. i also vaguely remember some other issues that hadnt been worked out that i cant think of rn

1609716471
sebonirc
discussion on the issue seems to have died down, so i was just wondering if there was any progress on it or if its being held off

1609716500
mikdusan
fwiw my pref would be 'zout/{cache,lib,bin}` adjacent to `build.zig`: 1. only one git ignore. 2: easy to nuke cache by itself. 3: easy to nuke install artifacts + cache. 4: 'zout' sorts close to or bottom of `ls -l` listing :)

1609716651
sebonirc
mikdusan: i like that, but i think something like zig-out would be better

1609717105
g-w1
my suggestion was keep $root/zig-cache and have $root/install/$mode

1609717489
mikdusan
tbh the biggest thing for me is, that it

