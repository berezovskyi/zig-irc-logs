1640400251
leon-p!1b22ab9492@2604:bf00:561:2000::18c
just wondering, are there any zig bindings (or pure implementations) of anything like libmagic? Basically I am interested in rough heuristics to decide whether a file is more likely to contain human readable text or binary data.

1640413049
mischief!~mischief@wopr.sciops.net
leon-p: should be straightforward to just use libmagic?

1640413121
leon-p!1b22ab9492@2604:bf00:561:2000::18c
mischief: that's what I ended up doing, but I though it may be a good idea to ask if there was anything more ziggy first :)

1640413210
mischief!~mischief@wopr.sciops.net
that is what i like about zig, binding to c is like using superglue instead of eating a bucket of wheat paste

1640414822
leon-p!1b22ab9492@2604:bf00:561:2000::18c
actually turns out that for my use case I can also just read the first few bytes and check if they are valid utf8. A bit hacky but works quite well.

1640431879
rubin55!sid175221@id-175221.hampstead.irccloud.com
merry christmas all, quick question. I'm playing around with Zig, specifically with trying to call into a c library. As an example, a cImport stdio.h and try to do c.printf("something\n").

1640431916
rubin55!sid175221@id-175221.hampstead.irccloud.com
Zig gives me a quite good error message, saying that "libc headers not available; compilation does not link against libc"

1640431936
rubin55!sid175221@id-175221.hampstead.irccloud.com
So: if i do zig build run, what do I need to pass additionally to have the run link against libc?

1640432146
rubin55!sid175221@id-175221.hampstead.irccloud.com
Experimenting with cImport, am I doing something  obviously wrong? https://www.irccloud.com/pastebin/Lv1Bumvz/hello.zig

1640432361
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
zig build-exe test.zig -lc

1640432415
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
compiles fine, you must change :   _ = printf ...

1640432433
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
because you need to handle the return of the printf function in zig

1640432531
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
https://pastebin.com/v36g3RZG

1640432591
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
better code : devs have to handle the error return of a function, and handle the possible bad encountered cases, .. it saves a lot of time

1640433313
rubin55!sid175221@id-175221.hampstead.irccloud.com
Alright, that seems to work!

1640433442
rubin55!sid175221@id-175221.hampstead.irccloud.com
So I'm experimenting a bit further, with libsodium, I'm getting a segmentation fault. I'm trying out this: https://www.nmichaels.org/zig/wrap-sodium.html

1640433489
rubin55!sid175221@id-175221.hampstead.irccloud.com
Getting segmentation fault on call to c.sodium_init() https://www.irccloud.com/pastebin/7dQnuRO7/sodium.zig

1640433539
rubin55!sid175221@id-175221.hampstead.irccloud.com
What I get after executing ./main https://www.irccloud.com/pastebin/Mzf5eQwV/stdout.log

1640433559
rubin55!sid175221@id-175221.hampstead.irccloud.com
(using   zig build-exe main.zig -lsodium   to compile)

1640433568
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
use: gdb main

1640433582
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
and batcktrace to see where the core dump occurs

1640433798
rubin55!sid175221@id-175221.hampstead.irccloud.com
Mm, even though the main executable has symbols, I don't seem to get very useful backtrace..

1640433838
rubin55!sid175221@id-175221.hampstead.irccloud.com
Am quite new to gdb, maybe doing something obviously stupid. https://www.irccloud.com/pastebin/obCSpfpj/gdb.out

1640433868
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
works fine, on my side

1640433869
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
[nix-shell:~/iotmonitor/dev]$ zig build-exe sodium.zig  -lc -I/nix/store/ky7awdidglv88q964bsjr96s8bjsy1wz-libsodium-1.0.18-dev/include/ -lsodium

1640433869
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
[nix-shell:~/iotmonitor/dev]$ ./sodium 

1640433869
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
info: All your codebase are belong to us.

1640433869
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
warning: Sodium init said: void

1640433869
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
[nix-shell:~/iotmonitor/dev]$ 

1640433888
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
i stripped the error.zig file (i don't have)

1640433943
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
https://pastebin.com/vSzWeUtF

1640433987
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
how did you compile the sodium.zig ?

1640434001
rubin55!sid175221@id-175221.hampstead.irccloud.com
zig build-exe main.zig -lsodium

1640434116
rubin55!sid175221@id-175221.hampstead.irccloud.com
I'm running zig from master, might that be a bit too bleeding edge? I noticed that zls (the lsp language server) did not compile with 0.9, hence master

1640434205
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
i'm using the 0.9.0, normally it should work.

1640434217
rubin55!sid175221@id-175221.hampstead.irccloud.com
Let me retry with 0.9.0

1640434245
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
seems that the entry point is adress 0, from gdb

1640434308
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
generated elf is not properly formed

1640434324
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
may be a configuration or linker issue

1640434440
rubin55!sid175221@id-175221.hampstead.irccloud.com
0.9.0 does the same, indeed. Mm. I'm running void linux, haven't had something like this before (I can compile stuff normally, both using clang and gcc)

1640434492
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
what arch ?

1640434501
rubin55!sid175221@id-175221.hampstead.irccloud.com
amd64

1640434579
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
what is the result of ldd main ?

1640434590
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
and objdump -x main

1640434676
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
on my side, i had to add the -lc argument, 

1640434684
rubin55!sid175221@id-175221.hampstead.irccloud.com
Output of objdump -x main https://usercontent.irccloud-cdn.com/file/wbIcS4hA/objdump.out

1640434685
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
otherwise it does not compile

1640434727
rubin55!sid175221@id-175221.hampstead.irccloud.com
I didn't (i.e., it compiles with zig build-exe src/main.zig -lsodium)

1640434743
rubin55!sid175221@id-175221.hampstead.irccloud.com
hah!

1640434760
rubin55!sid175221@id-175221.hampstead.irccloud.com
with -lc it works, however, I get no error without -lc

1640434785
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
hum ... may be the issue, libsodium needs c library

1640434807
rubin55!sid175221@id-175221.hampstead.irccloud.com
What kind of error do you get when you omit -lc?

1640434843
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
my compile error, when not giving the -lc

1640434844
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
https://pastebin.com/T80FUnKQ

1640434849
rubin55!sid175221@id-175221.hampstead.irccloud.com
off to eat for a bit.. do you think I should file a bug report?

1640434880
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
in your case, the needed C functions are not dynamically linked, so ... 0x00000 addresses when lib sodium call the libc

1640434939
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
rubin55: think, a bit analysis before, you level up your knowledges and give a more precise context

1640434965
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
i'm running on ubuntu, don't know void linux, 

1640435481
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
rubin55: if you change the zig version, takes care to clean the zig-cache folder (it may preserve some old precompiled versions)

1640435513
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
rubin55: that may cause the non error raise issue encountered

1640438048
rubin55!sid175221@id-175221.hampstead.irccloud.com
frett27: this I did, removed zig-* folders before recompile

1640438135
rubin55!sid175221@id-175221.hampstead.irccloud.com
frett27: What I also find strange is that ldd does show libc.so.6 linked in

1640438210
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
not in the objdump dynamic section :

1640438211
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
Dynamic Section:

1640438211
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  RUNPATH              /lib64:/lib:/usr/lib64:/usr/lib

1640438211
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  NEEDED               libsodium.so.23

1640438211
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  DEBUG                0x0000000000000000

1640438270
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
mine includes :

1640438271
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
Dynamic Section:

1640438271
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  RUNPATH              /nix/store/c9p3mci4zp74bgm9hv9n904sp5my46ym-nix-shell/lib64:/nix/store/c9p3mci4zp74bgm9hv9n904sp5my46ym-nix-shell/lib:/nix/store/9pzsl6w1cpb3cm1jxw90vfingidjw0ax-libsodium-1.0.18/lib

1640438271
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  NEEDED               libsodium.so.23

1640438271
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  NEEDED               libpthread.so.0

1640438273
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  NEEDED               libc.so.6

1640438277
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  NEEDED               ld-linux-x86-64.so.2

1640438279
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
  DEBUG                0x0000000000000000

1640438300
Franciman!~Franciman@mx1.fracta.dev
merry christmas

1640438306
Franciman!~Franciman@mx1.fracta.dev
and i got this compiler bug

1640438308
Franciman!~Franciman@mx1.fracta.dev
https://bpa.st/U7VA

1640438310
Franciman!~Franciman@mx1.fracta.dev
xd

1640438322
Franciman!~Franciman@mx1.fracta.dev
if you need to see the code

1640438416
Franciman!~Franciman@mx1.fracta.dev
https://github.com/Franciman/telescope/blob/main/src/compiler/compile.zig#L298 i think this is the problem

1640438478
rubin55!sid175221@id-175221.hampstead.irccloud.com
frett27: so, /usr/include/sodium/crypto_hash_sha512.h references stdlib.h (and stdint.h, stddef.h); is seems that zig in your case concludes from that that libc linkage is missing (i.e., the error message "note: libc headers not available; compilation does not link against libc"); I just don't get why zig is not warning me in the same way

1640438594
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
Franciman: can you add the debug symbols ?

1640438727
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
rubin55: yep, that's the question

1640438776
rubin55!sid175221@id-175221.hampstead.irccloud.com
I'm going to try and compile zig from source instead of binary distro

1640438800
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
rubin55: try nix

1640438963
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
rubin55: i use this shell.nix   https://pastebin.com/SwnGzQG9

1640438987
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
nix install is one liner : https://nixos.org/download.html

1640439007
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
then in the shell.nix folder, run : nix-shell

1640439023
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
it opens a shell with the 0.9.0 version compiled on your plateform

1640439036
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
after a bunch of LLVM13, .. install

1640439068
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
it saves me a lot of time when working with lots of source dependencies i wanted to dig in

1640440143
bw!sid2730@user/betawaffle
what's the canonical error (in zig) to return from a "reader" for the end of input? (e.g. a slice, a file, etc)

1640440180
bw!sid2730@user/betawaffle
is it `error.EndOfStream`?

1640440310
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
using the std.io buffered

1640440322
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
it returns 0 byte read for eof

1640440324
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
from : https://github.com/ziglang/zig/blob/master/lib/std/io/buffered_reader.zig

1640440330
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
no error

1640440386
bw!sid2730@user/betawaffle
i'm just implementing a `readByte` function (for input to `leb128` functions)

1640440438
rubin55!sid175221@id-175221.hampstead.irccloud.com
frett27: thanks a lot, will definitely give nix a try. In the meantime I created a bug report for it: https://github.com/ziglang/zig/issues/10410

1640440584
Dko1905!~Dko1905@185.156.175.180
Hello!

1640440590
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
bw: you're right, my bad, error.EndOfStream when trying to read more bytes that available : https://github.com/ziglang/zig/blob/master/lib/std/io/reader.zig

1640440606
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
bw: using streams 

1640440633
Dko1905!~Dko1905@185.156.175.180
Is there any way of getting autocompletion to work in vim or vscode?

1640440655
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
Dko1905: zls, 

1640440681
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
but afaik, not available yet for the new version 0.9.0

1640440709
Dko1905!~Dko1905@185.156.175.180
frett27: I've installed coc-zig, but it doesn't seem to do anything.

1640440764
Dko1905!~Dko1905@185.156.175.180
I also have zig.vim

1640440781
rubin55!sid175221@id-175221.hampstead.irccloud.com
Dko1905: I have it working

1640440795
rubin55!sid175221@id-175221.hampstead.irccloud.com
I needed to run zig 0.10.0-dev.62+5b171f446 to compile zls

1640440803
rubin55!sid175221@id-175221.hampstead.irccloud.com
(with vim)

1640440854
rubin55!sid175221@id-175221.hampstead.irccloud.com
I used zig.vim, vim-lsp, asyncomplete, asyncomplete-lsp and vim-lsp-settings

1640440867
rubin55!sid175221@id-175221.hampstead.irccloud.com
(plugins, through VimPlug)

1640440904
rubin55!sid175221@id-175221.hampstead.irccloud.com
After installing zig.vim, opening a .zig file prompts you to install a language server, through :LspInstallServer

1640440920
rubin55!sid175221@id-175221.hampstead.irccloud.com
This then automatically builds/sets-up zls

1640440942
Dko1905!~Dko1905@185.156.175.180
hmmm

1640440959
rubin55!sid175221@id-175221.hampstead.irccloud.com
(note: it specifically did not work with 0.9.0 - zls compile failed)

1640441042
Dko1905!~Dko1905@185.156.175.180
I have zig 0.8 installed

1640441045
rubin55!sid175221@id-175221.hampstead.irccloud.com
vim-lsp-settings is really nice! I succesfully set-up an LSP server for 12 of the 13 languages I play around with, seriously easy

1640441140
Dko1905!~Dko1905@185.156.175.180
I already use Coc, I'm not sure if switching away is a good idea.

1640441185
rubin55!sid175221@id-175221.hampstead.irccloud.com
Fair enough, at least the above should point you in the right direction + lets you know it's at least possible!

1640441232
Dko1905!~Dko1905@185.156.175.180
thanks

1640441909
Dko1905!~Dko1905@185.156.175.180
When will zig 0.10 be released?

1640441947
ikskuh!~xq@v43666.php-friends.de
in roughly 6 months

1640441987
ikskuh!~xq@v43666.php-friends.de
note that zig-0.10-dev… can be downloaded on the website as a nightly build

1640442024
Dko1905!~Dko1905@185.156.175.180
Will zig receive proper polymorphism?

1640442027
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
I hope 0.10 will include <https://github.com/ziglang/zig/issues/1268> so that the inefficient vtables can be replaced by comptime interfaces

1640442036
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
Dko1905: exact same question here.

1640442041
ikskuh!~xq@v43666.php-friends.de
Dko1905: do you mean classes and inheritance? no

1640442069
ikskuh!~xq@v43666.php-friends.de
terminalpusher: comptime interfaces and vtables are orthogonal things that cannot replace each other

1640442093
Dko1905!~Dko1905@185.156.175.180
interfaces

1640442098
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
ikskuh: you don't think the dynamic dispatch that the allocators rely on can be resolved?

1640442110
ikskuh!~xq@v43666.php-friends.de
not with comptime interfaces

1640442114
ikskuh!~xq@v43666.php-friends.de
what #1268 is proposing is a way to restrict `anytype` arguments to something

1640442137
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
yeah, it'd be a great way to solve the issue

1640442144
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
I really hope Zig gets something like comptime interfaces

1640442152
ikskuh!~xq@v43666.php-friends.de
this means that everything that uses comptime interfaces would still be duplicated in implementation for each different argument invoked

1640442181
ikskuh!~xq@v43666.php-friends.de
Dko1905: for vtable based interfaces, there's only a single thing missing in the language and that is declaration creation via @Type

1640442203
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
ikskuh: do you suspect code size increases?

1640442214
ikskuh!~xq@v43666.php-friends.de
terminalpusher: it will increase per type you pass in linearl

1640442222
ikskuh!~xq@v43666.php-friends.de
same as status quo

1640442229
ikskuh!~xq@v43666.php-friends.de
the only thing that will change will be better error messages

1640442230
ikskuh!~xq@v43666.php-friends.de
tha's all

1640442268
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
but the vtables could be avoided that way

1640442285
ikskuh!~xq@v43666.php-friends.de
no

1640442302
ikskuh!~xq@v43666.php-friends.de
vtables are runtime dispatch while #1268 proposes compile time dispatch

1640442347
ikskuh!~xq@v43666.php-friends.de
we have compile time dispatch already

1640442348
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
yeah, so with compile time dispatch it should be possible to remove the allocator's runtime dispatch vtables using compile time dispatch, no?

1640442355
ikskuh!~xq@v43666.php-friends.de
yes, but:

1640442357
ikskuh!~xq@v43666.php-friends.de
it will bloat the code

1640442363
ikskuh!~xq@v43666.php-friends.de
so you cannot pass around ArrayList(u8) anymore

1640442363
ikskuh!~xq@v43666.php-friends.de
but

1640442365
ikskuh!~xq@v43666.php-friends.de
you need

1640442377
ikskuh!~xq@v43666.php-friends.de
ArrayList(u8, ArenaAllocator) or ArrayList(u8, GeneralPurposeAllocator) or ArrayList(u8, PageAllocator)

1640442395
ikskuh!~xq@v43666.php-friends.de
this means that basically all of Zig will be a huge template library 

1640442401
ikskuh!~xq@v43666.php-friends.de
because this will make *everything* generic

1640442412
ikskuh!~xq@v43666.php-friends.de
that uses dynamic memory allocation

1640442424
ikskuh!~xq@v43666.php-friends.de
which means that if you have a struct that has an allocator, that struct is now generic

1640442433
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
so I suppose the trade off here is between big code size and speed

1640442434
ikskuh!~xq@v43666.php-friends.de
and incompatible to the same struct with a different allocator

1640442451
ikskuh!~xq@v43666.php-friends.de
there isn't much of a speedloss 

1640442457
ikskuh!~xq@v43666.php-friends.de
especially not for allocators 

1640442474
ikskuh!~xq@v43666.php-friends.de
the only allocator that would get substantially faster is the FixedBufferAllocator

1640442488
ikskuh!~xq@v43666.php-friends.de
everything else will only get a tiny fraction of speed 

1640442502
ikskuh!~xq@v43666.php-friends.de
assuming the compiler couldn't inline the allocator call anyways

1640442523
ikskuh!~xq@v43666.php-friends.de
and note that "bigger code" means "slower code"

1640442534
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
got it

1640442557
ikskuh!~xq@v43666.php-friends.de
but my main concern here is maintainability

1640442570
ikskuh!~xq@v43666.php-friends.de
i don't want to have more than one arraylist in my code base

1640442602
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
I hope there comes up a solution that maybe satisfies both sides somehow

1640442605
ikskuh!~xq@v43666.php-friends.de
i don't even like the comptime Reader/Writer dispatch

1640442611
ikskuh!~xq@v43666.php-friends.de
there won't be

1640442625
bfredl!~bfredl@2001:470:69fc:105::183
also with ArrayList you can avoid multiple allocations by pre-allocating a large capacity

1640442645
ikskuh!~xq@v43666.php-friends.de
as there only could be if both solutions would lead to the same machine code

1640442655
ikskuh!~xq@v43666.php-friends.de
but they lead to very different machine code

1640442682
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
well I'm looking forward to see how all this plays out in the end

1640442737
ikskuh!~xq@v43666.php-friends.de
i just want my decls in @Type

1640442748
ikskuh!~xq@v43666.php-friends.de
so i can implement stuff like std.mem.Allocator without all that boilerplate 

1640445277
Dko1905!~Dko1905@185.156.175.180
I'm quite new to zig, how would I convert `[20]u32` to `*u32`?

1640445520
ikskuh!~xq@v43666.php-friends.de
*u32 points to a single element, so you'd just do &val[3] to get the pointer to the 4th element

1640445550
Dko1905!~Dko1905@185.156.175.180
I have the function `pub fn getgroups(size: usize, list: *gid_t) usize`, which accepts a list (as a pointer)?

1640445571
ikskuh!~xq@v43666.php-friends.de
then "*gid_t" is wrong

1640445575
ikskuh!~xq@v43666.php-friends.de
it should be [*]gid_t

1640445583
ikskuh!~xq@v43666.php-friends.de
"[*]" points to multiple elements

1640445588
ikskuh!~xq@v43666.php-friends.de
while "*" points to exactly one :)

1640445615
Dko1905!~Dko1905@185.156.175.180
Well then I found an error in the std.

1640445651
ikskuh!~xq@v43666.php-friends.de
yep

1640445682
Dko1905!~Dko1905@185.156.175.180
What should I do then?

1640445689
Dko1905!~Dko1905@185.156.175.180
Call the syscall manually?

1640445721
ikskuh!~xq@v43666.php-friends.de
the correct thing is: fork zig, change the signature, make a PR

1640445732
ikskuh!~xq@v43666.php-friends.de
which is a cool first contribution to fix bugs

1640445806
Dko1905!~Dko1905@185.156.175.180
Is vim the only editor that has basic auto completion?

1640445823
ikskuh!~xq@v43666.php-friends.de
every editor that uses ZLS can do more than basic autocompletion

1640445825
ikskuh!~xq@v43666.php-friends.de
i use VSCode 

1640445904
Dko1905!~Dko1905@185.156.175.180
seems like i missed that VSCode also works.

1640445919
ikskuh!~xq@v43666.php-friends.de
you have to install both Zig and ZLS extension as well as install ZLS

1640445930
ikskuh!~xq@v43666.php-friends.de
it's not the easiest setup, but also not more than 5 minutes of work

1640446056
Dko1905!~Dko1905@185.156.175.180
I can finally enjoy proper syntax highlighting.

1640446078
ikskuh!~xq@v43666.php-friends.de
but to give you a "quick hack answer" to your question:

1640446084
ikskuh!~xq@v43666.php-friends.de
pass "&arr[0]" to groups

1640446090
ikskuh!~xq@v43666.php-friends.de
but still make the PR! *grin*

1640446537
Dko1905!~Dko1905@185.156.175.180
Why is it std.os.linux instead of std.os.nix|std.os.unix?

1640446778
Dko1905!~Dko1905@185.156.175.180
Oh no, what would -1 be when casted to usize?

1640446846
Dko1905!~Dko1905@185.156.175.180
Seems like the std.os.linux.getgroups function is completely useless.

1640447299
jcmoyer!~jcmoyer@user/jcmoyer
@bitCast(usize, @as(i64, -1))

1640447341
jcmoyer!~jcmoyer@user/jcmoyer
maybe better to use isize instead of i64 actually

1640447346
jcmoyer!~jcmoyer@user/jcmoyer
it does look like that function should return c_int though

1640447671
ikskuh!~xq@v43666.php-friends.de
terminalpusher: The Problem with intrusive comptime interfaces can be seen with std.io.Reader btw

1640447909
terminalpusher!~terminalp@2a01:586:12c7:1:a3f2:b21c:667f:2717
will take a look

1640450897
rubin55!sid175221@id-175221.hampstead.irccloud.com
:q

1640450901
rubin55!sid175221@id-175221.hampstead.irccloud.com
...

1640450903
rubin55!sid175221@id-175221.hampstead.irccloud.com
sorry

1640450909
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
:-)

1640450926
rubin55!sid175221@id-175221.hampstead.irccloud.com
Betrayed editor usage!

1640450959
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
also get some ":q" in markdown files :-)

1640450967
rubin55!sid175221@id-175221.hampstead.irccloud.com
hahah

1640451043
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
looks like having ^H^H in some messages, *nix legacy :-)

1640451058
rubin55!sid175221@id-175221.hampstead.irccloud.com
So true

1640452785
companion_cube!~simon@user/companion-cube
ikskuh: are your arguments also applicable to IO streams? :) 

1640452825
ikskuh!~xq@v43666.php-friends.de
wdym with io streams in that case?

1640452847
ikskuh!~xq@v43666.php-friends.de
you mean the performance penalty of i/o vs. virtual call?

1640452848
ikskuh!~xq@v43666.php-friends.de
yeah

1640453078
companion_cube!~simon@user/companion-cube
I mean IO streams being interfaces with virtual calls yeah

1640453088
companion_cube!~simon@user/companion-cube
More flexible this way

1640453162
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
ikskuh: what is the virtual call cost vs L1/L2 access ?

1640453195
ikskuh!~xq@v43666.php-friends.de
http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/

1640453206
ikskuh!~xq@v43666.php-friends.de
frett27: roughly 3 times longer

1640453235
ikskuh!~xq@v43666.php-friends.de
companion_cube: yeah, but Reader/Writer are comptime interfaces due to the error mapping

1640453295
companion_cube!~simon@user/companion-cube
That's a good reason, but it implies a lot of complexity for the user... 

1640453316
ikskuh!~xq@v43666.php-friends.de
yeah

1640453318
ikskuh!~xq@v43666.php-friends.de
i don't like it

1640453335
ikskuh!~xq@v43666.php-friends.de
i would be okay with "IoError"

1640453339
ikskuh!~xq@v43666.php-friends.de
and "PermissionError"

1640453396
Dko1905!~Dko1905@185.156.175.180
jcmoyer: I just called getgroups from `@cImport` and created my own wrapper around the C API.

1640453453
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
ikskuh: ok, you got it. so if the virtual call is in cache -> cost of a L1 acces ? right ? 

1640453549
ikskuh!~xq@v43666.php-friends.de
yep

1640453555
ikskuh!~xq@v43666.php-friends.de
kinda like that :)

1640453560
ikskuh!~xq@v43666.php-friends.de
you still have a indirect call

1640453568
ikskuh!~xq@v43666.php-friends.de
but that should be predictable

1640453575
ikskuh!~xq@v43666.php-friends.de
also compilers can devirtualize nowadays :)

1640453681
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
ikskuh: makes sense, so why is the virtual indirect call focus your attention in design ?

1640453771
ikskuh!~xq@v43666.php-friends.de
wdym?

1640453798
ikskuh!~xq@v43666.php-friends.de
we have two distinct techs (virtual calls vs. comptime reification of functions)

1640453815
ikskuh!~xq@v43666.php-friends.de
and for most stuff, virtual calls are cheaper overall 

1640453819
ikskuh!~xq@v43666.php-friends.de
in my experience

1640453831
ikskuh!~xq@v43666.php-friends.de
but it really depends on the target arch

1640453834
companion_cube!~simon@user/companion-cube
ikskuh: seems like it'd call for an error hierarchy

1640453840
companion_cube!~simon@user/companion-cube
just like with exceptions, except explicit

1640453880
companion_cube!~simon@user/companion-cube
I think it's interesting how C++ and rust both provide ways to choose between virtual and specialized

1640453903
ikskuh!~xq@v43666.php-friends.de
hm?

1640453907
companion_cube!~simon@user/companion-cube
(in rust: either <T: Interface> or (&mut dyn Interface), for example)

1640453916
companion_cube!~simon@user/companion-cube
well it's nice that the user has a choice

1640453918
ikskuh!~xq@v43666.php-friends.de
afaik that's not a thing in C++

1640453944
companion_cube!~simon@user/companion-cube
in C++ you can use a template specialization I think.

1640453954
companion_cube!~simon@user/companion-cube
for a type inheriting from your interface.

1640453964
ikskuh!~xq@v43666.php-friends.de
i mean we can do  that too :D

1640454005
companion_cube!~simon@user/companion-cube
manually, I guess

1640454028
ikskuh!~xq@v43666.php-friends.de
(which is the same "manually" as in C++)

1640454056
companion_cube!~simon@user/companion-cube
in C++ you have a tool to express the interface (an abstract class typically?), then you can specialize manually

1640454069
companion_cube!~simon@user/companion-cube
in zig you still have to manage the vtable yourself, right?

1640454078
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
ikskuh: i felt like the virtual call or interface definitions (even if it is reified on comptime), was a non target, so my question was what is the real cost of a virtual call or interface (vtable, COM like interface or C++ indirect table) cost

1640454533
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
there is a thought in that way provided by alex : https://github.com/alexnask/interface.zig

1640454544
Dko1905!~Dko1905@185.156.175.180
How would I cast a `c_int` to a `u_size` (knowing that a negative number is impossible)?

1640454588
frett27!~frett27@2a01:cb14:5fa:7e00:e8ca:9741:bd7f:84bd
@intCast ?

1640454637
Dko1905!~Dko1905@185.156.175.180
yes

1640455334
ikskuh!~xq@v43666.php-friends.de
companion_cube: yes

1640455356
ikskuh!~xq@v43666.php-friends.de
frett27: it's hard to answer

1640455362
ikskuh!~xq@v43666.php-friends.de
depends on the context and application

1640455378
ikskuh!~xq@v43666.php-friends.de
Dko1905: using @intCast()

1640455405
Dko1905!~Dko1905@185.156.175.180
Zig sure is an interesting language.

1640457642
xiamx!~xiamx@2001:470:69fc:105::1:5692
Has anyone used zig to write programs that sends http requests? I know there's a zig native library called ziget, and the alternative of just using libcurl, what's your folks' experience? Which one would you use? 

1640457815
ikskuh!~xq@v43666.php-friends.de
zfetch is superb

1640457817
ikskuh!~xq@v43666.php-friends.de
:)

1640457822
ikskuh!~xq@v43666.php-friends.de
by nameless/truemedian

1640458603
xiamx!~xiamx@2001:470:69fc:105::1:5692
thx ikskuh 

1640459276
Dko1905!~Dko1905@185.156.175.180
How should I store a C `char *` in an extern struct in zig?

1640459363
Dko1905!~Dko1905@185.156.175.180
I'm trying to port the passwd struct from https://pubs.opengroup.org/onlinepubs/009695399/basedefs/pwd.h.html

1640459467
Dko1905!~Dko1905@185.156.175.180
Would `pw_name: []u8` work?

1640459676
ikskuh!~xq@v43666.php-friends.de
it depends

1640459686
ikskuh!~xq@v43666.php-friends.de
but [:0]u8 is a good choice 

1640459697
ikskuh!~xq@v43666.php-friends.de
(which explicitly states that the slice is zero terminated

1640459816
Dko1905!~Dko1905@185.156.175.180
Oh no `extern structs cannot contain fields of type '[:0]u8'`

1640460005
Dko1905!~Dko1905@185.156.175.180
I need to use [*:0]

1640460087
Dko1905!~Dko1905@185.156.175.180
Is there a better way of getting string len then calling strlen from <string.h>?

1640460231
gpanders!~gpanders@user/gpanders
A [:0]u8 is just a type with two fields, ptr and len. So you can store [*:0]u8 in your extern struct (that’s ptr) and then create a separate len field. If you’re getting the string from C then you’ll have to use strlen, but you can store the result in your len field so that you don’t need to calculate it more than once

1640460257
ikskuh!~xq@v43666.php-friends.de
std.mem.sliceTo(ptr, 0)

1640460503
Dko1905!~Dko1905@185.156.175.180
It works.

1640460508
Dko1905!~Dko1905@185.156.175.180
No reason to change it.

1640460914
Dko1905!~Dko1905@185.156.175.180
There's a funny type that I can't seem to recreate in Zig: "Pointer to a null-terminated array of character pointers to member names." My first thought was `[*:0][*:0]u8`, but that doesn't compile.

1640461184
ikskuh!~xq@v43666.php-friends.de
[*:null]?[*:0]u8

1640461188
ikskuh!~xq@v43666.php-friends.de
would that be

1640461219
Dko1905!~Dko1905@185.156.175.180
Interesting, could you explain what the x part of [*:xxxx] is?

1640461240
ikskuh!~xq@v43666.php-friends.de
it is the sentinel

1640461254
ikskuh!~xq@v43666.php-friends.de
it means that the memory is always guarded by a sentinel value

1640461262
ikskuh!~xq@v43666.php-friends.de
for example, 0 for a NUL terminated string 

1640461311
ikskuh!~xq@v43666.php-friends.de
you can terminate arrays, slices and pointers with a sentinel

1640461324
ikskuh!~xq@v43666.php-friends.de
that sentinel must be a valid member of the element type

1640461485
Dko1905!~Dko1905@185.156.175.180
So the sentinel is just the stop sign? Will sentinel based slices only use the sentinel and not have a len?

1640461492
ikskuh!~xq@v43666.php-friends.de
yes, exactly

1640461498
ikskuh!~xq@v43666.php-friends.de
on the first part

1640461507
ikskuh!~xq@v43666.php-friends.de
on the second: no, they still have the len part

1640461517
ikskuh!~xq@v43666.php-friends.de
but will assert that the sentinel is present on slice[slice.len]

1640461575
Dko1905!~Dko1905@185.156.175.180
That's very nice

1640461762
Dko1905!~Dko1905@185.156.175.180
I have an [][]u8, how would I free it using defer?

1640461788
ikskuh!~xq@v43666.php-friends.de
depends on how you allocated it

1640461798
ikskuh!~xq@v43666.php-friends.de
but you can use a for loop

1640461809
Dko1905!~Dko1905@185.156.175.180
What's the difference between [*]u8 and []u8?

1640461815
ikskuh!~xq@v43666.php-friends.de
defer { for(slice) |item| { free(item); } free(slice); }

1640461828
ikskuh!~xq@v43666.php-friends.de
[*]u8 is a pointer to many while []u8 is a slice (ptr + len)

1640461844
Dko1905!~Dko1905@185.156.175.180
Thank you

1640461845
ikskuh!~xq@v43666.php-friends.de
"var slice: []u8" => slice.ptr has the type [*]u8

1640462510
Dko1905!~Dko1905@185.156.175.180
I'm getting SEGV, and I'm not sure why. Code: https://hastebin.skyra.pw/hawatocadu.csharp

1640462813
Dko1905!~Dko1905@185.156.175.180
Valgrind find an invalid read of size 8: "Address 0x485e000 is not stack'd, malloc'd or (recently) free'd"

1640464091
Dko1905!~Dko1905@185.156.175.180
Sorry, I freed the array before the elements.

