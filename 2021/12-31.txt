1640916259
Stalevar!~stalevar@user/stalevar
andrewrk, so would -O0 override -Og ?

1640916317
andrewrk!~andrewrk@mail.ziglang.org
yes the later arguments override previous arguments

1640917917
Ristovski!~Ristovski@hellomouse/perf/ristovski
How big is the total output of zig-bootstrap (ballpark)? (doing native-linux-gnu)

1640917949
Ristovski!~Ristovski@hellomouse/perf/ristovski
Seems like it can easily reach 10GB?

1640917981
ifreund!2940d10f8b@user/ifreund
Ristovski: hmm, that seems way too large, are you building llvm in debug mode somehow?

1640918031
Ristovski!~Ristovski@hellomouse/perf/ristovski
ifreund: I'm doing `./build -j2 native-linux-gnu native`, atm its up to 8GB (building StaticAnalyzer)

1640918112
Ristovski!~Ristovski@hellomouse/perf/ristovski
do note i'm measuring the size of the whole zig-bootstrap dir (i want to know what the size requirements are, at build time)

1640918254
ifreund!2940d10f8b@user/ifreund
don't have access to my destkop right now which has my zig-bootstrap output on it so I can't check how big mine is

1640918267
ifreund!2940d10f8b@user/ifreund
I feel like 10GB is larger than expected though, I would have guessed less than 1GB

1640918388
Ristovski!~Ristovski@hellomouse/perf/ristovski
ifreund: I took a look - none of the binaries in build-llvm-host are stripped

1640918441
ifreund!2940d10f8b@user/ifreund
hmm, the CMAKE_BUILD_TYPE is set to "Release" not "RelWithDebInfo" though afaik

1640918474
ifreund!2940d10f8b@user/ifreund
an llvm build with debug info will take up 10s of GB

1640918679
Ristovski!~Ristovski@hellomouse/perf/ristovski
indeed, build type is release

1640918818
freshcoffee!~fresh@user/freshcoffee
iirc the size will be (repo + checkout + llvm_A + zig_A + llvm_B + zig_B)

1640918855
freshcoffee!~fresh@user/freshcoffee
and tmp/staging for each of llvm_* and zig_*

1640919611
andrewrk!~andrewrk@mail.ziglang.org
mine is 36G but that's because I have built it for every target for the release

1640949385
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
Hello. Is it possible to have a local instance of PageAllocator? Or alternatively, is there some allocator which is guaranteed to unmap freed memory immediately?

1640949393
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
(for the purpose of reliably reproducing a use-after-free)

1640950148
bfredl!~bfredl@2001:470:69fc:105::183
isn't `page_allocator` already stateless?

1640950149
bfredl!~bfredl@2001:470:69fc:105::183
I e freeing a page just calls munmap directly

1640950216
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
yeah, just looked that up... I'll check with gdb what's actually mapped and what my code is accessing

1640954281
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
Is it allowed to use function-local variables inside a suspend block?

1640954312
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
If yes, then I think I found a bug in Zig's coroutines

1640954321
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
if not, then I think I found a bug in std.event.loop

1640954434
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
It's a race condition when doing async io inside runDetached, causing use-after-free in linuxWaitFd. I have a program that reproduces a similar UAF reliably, by using async functions in a similar pattern: https://gist.github.com/Wolf480pl/6a50a3b14c0443408c018f68c8596932

1640954475
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
basically, while a function is still in suspend block, it's resumed in another thread, finishes, and whoever called it frees its frame

1640954490
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
then the suspend block continues and tries to access a freed frame

1640954504
Wolf480pl!wolf480pl@2a01:4f8:c2c:e5b0::1
should I open an issue on github?

1640967439
viric!~viric@static-74-45-229-77.ipcom.comunitel.net
andrewrk:    gcc has -fsanitize=shift for the bitshift UB

1640969292
Nulo!~Nulo@user/nulo
I'm trying to cross-compile a C project but I get this: basename.c:2:10: fatal error: 'libgen.h' file not found

1640969307
Nulo!~Nulo@user/nulo
I thought Zig has musl headers built it? Am I missing something?

1640969371
Nulo!~Nulo@user/nulo
Ah, I think my target was wrong: arm-linux-musl (should be arm-linux-musleabi)

1640969553
Nulo!~Nulo@user/nulo
Yup, that works

1640977862
jafarlihi!~user@185.30.90.46
Zig being a new lang you'd expect there not being important libraries that other langs have. Could you please suggest a library that is missing from Zig ecosystem that I could take time to develop?

1640977885
jafarlihi!~user@185.30.90.46
I just want some OSS karma

1640977984
ikskuh!~xq@v43666.php-friends.de
jafarlihi: there's a lot of stuff missing still

1640978003
jafarlihi!~user@185.30.90.46
ikskuh: Can you name few?

1640978110
luuk!~luuk@user/luuk
jafarlihi: If you're going to be investing a lot of time into it, I'd suggest to write something you need and find interesting. Easy to get burned out on a project you don't enjoy. Right now, I don't think any library is considered *finished* so you can do pretty much anything you want.

1640978252
ikskuh!~xq@v43666.php-friends.de
yeah, this is a good advice in general

1640978268
ikskuh!~xq@v43666.php-friends.de
if your masochistic: make a sweet yaml library

1640978301
Nulo!~Nulo@user/nulo
Or just good bindings, I have yet to find any

1640979109
yrashk!sid1568@id-1568.lymington.irccloud.com
Wolf480pl: I am not an expert (my only significant exposure to async is https://github.com/yrashk/zig-generator) but I'd err on the side of saying that it is more likely to be a bug in std.event.Loop because you should be able to access function-local variables inside a suspend block.

1640979164
yrashk!sid1568@id-1568.lymington.irccloud.com
(At least I would think so! I'd find a lot of my code useless if I can't access these variables; and wouldn't that include function's own parameters? then how useful would those suspensions be?)

1640984072
andrewrk!~andrewrk@mail.ziglang.org
jafarlihi: https://github.com/ziglang/zig/issues?q=is%3Aissue+is%3Aopen+label%3A%22contributor+friendly%22+label%3A%22standard+library%22

1640984227
Seng!~nick@hurtig.ninja
hey, how do I zero a chunk of newly allocated memory (of type  u32)?

1640984249
Seng!~nick@hurtig.ninja
I assume there's some kind of smart way to do it instead of looping over my array.

1640984519
andrewrk!~andrewrk@mail.ziglang.org
Seng, you may be interested in `std.mem.zeroes` or the `**` operator

1640986029
Seng!~nick@hurtig.ninja
sorry, I can't seem to figure how std.mem.zeroes work. It takes a type, but how do I adapt that to my allocated []u32 ?

1640986160
andrewrk!~andrewrk@mail.ziglang.org
Seng, I'm sorry I misread your question. I suggest instead `std.mem.set(u32, allocated_slice, 0);`

1640986227
Seng!~nick@hurtig.ninja
oii.. I thought I had seen it somewhere, but I was looking for memset :)

1640986240
Seng!~nick@hurtig.ninja
thanks.

1640986288
Seng!~nick@hurtig.ninja
Also, now you are not swamped with questions and the like I would like to take the opportunity to send you a virtual high-five for the awesome work you and your team is doing :)

1640986795
andrewrk!~andrewrk@mail.ziglang.org
ACTION returns the high five

1640986811
andrewrk!~andrewrk@mail.ziglang.org
thanks for the compliment. what project are you working on?

1640987311
Seng!~nick@hurtig.ninja
Learning by doing. Coming from C#, doing Zig for fun, mostly just because, but I also enjoy the lower level languages because they force me to have a better understanding of how computers work :)

1640987338
Seng!~nick@hurtig.ninja
Currently just chewing my way throug AoC starting at 2015

1640988134
andrewrk!~andrewrk@mail.ziglang.org
that's quite a task

1640989185
Seng!~nick@hurtig.ninja
...said the man making his own programming language :)

1640989300
andrewrk!~andrewrk@mail.ziglang.org
heheh

1640989337
Franciman!~Franciman@mx1.fracta.dev
finally I have llvm and clang with debug symbols

1640989344
Franciman!~Franciman@mx1.fracta.dev
it costed me gentoo

1640989345
Franciman!~Franciman@mx1.fracta.dev
xd

1640989590
Seng!~nick@hurtig.ninja
Currently I'm sticking to writing to the log, but I really need debugging support with my windows installation :)

1640989624
andrewrk!~andrewrk@mail.ziglang.org
Seng, you can debug zig with normal windows debugging tools

1640990534
Franciman!~Franciman@mx1.fracta.dev
are you ready for a new year full of debugging?

1640990546
Franciman!~Franciman@mx1.fracta.dev
can't wait to get the stacktrace

