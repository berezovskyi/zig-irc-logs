1614824720
v0idify
what's the common way to replace interfaces in zig?

1614824817
v0idify
usecase: have an arraylist that can contain many types but i only need to expect certain functions in those types

1614824843
v0idify
the only way i can think of is having a switch statement for every time i want to use some of the functions

1614825009
g-w1
you can do an struct that has a fn field for a fn pointer like Allocator does.

1614825063
v0idify
g-w1, doesn't that waste memory though? it's almost nothing but it sucks

1614825070
v0idify
because fn pointers consume memory

1614825093
g-w1
I assumed the optimiser would optimise it out, but I agree it is not optimal

1614825143
v0idify
i should be able to do something like iterating a union(enum) and calling the function inside it but i'm not sure if that would work?

1614825169
g-w1
i mean union(enum) wastes space if the fields are all not the same size

1614825230
v0idify
struct { type: enum, thing: *union } this wouldn't waste space but i'm not sure how I need to implement it?

1614825271
g-w1
i still think it will waste space if all the union fields are not the same size

1614825303
v0idify
oh right

1614825315
v0idify
well it needs to somehow be a pointer to any of the types

1614825324
g-w1
so *void?

1614825333
v0idify
yes but that's not typesafe :P

1614825340
v0idify
and i would probably need to do the matching myself

1614825345
g-w1
yeah

1614825518
v0idify
well i'll stop bikeshedding this problem because this is probably too much of a microoptimization for my code that i haven't even written yet lol

1614826236
mipri
union(enum) over different pointer types, so they all take up the same space (a pointer) and it's still typechecked and convenient. I'd just worry that the indirection is more expensive than the saved memory

1614826287
v0idify
mipri, i thought about that approach but i would still need to iterate through each type. what is indirection though?

1614826433
mipri
pointer indirection. if you thought about it already, I must be missing something. I've only read a little bit of the backlog.

1614826557
v0idify
i have no clue what performance issues that might have, i'll look it up, thanks

1614826732
v0idify


1614831877
marler8997
fyi, I'm in the market for BASH/SHELL scripts I can port to my new stitch langauge for testing and guiding the feature design.  Let me know if you have anything you think would be useful

1614835088
andrewrk
marler8997, I don't have a working implementation, but I want one that notifies me when a long running command finishes

1614835112
braket
marler8997: shameless plug if ya want:

1614835193
marler8997
braket this looks like a perfect example I can port

1614835233
braket
woo!

1614835314
braket
it's a little long though lol. if you have any questions feel free to ask

1614835336
marler8997
600 lines is nothing

1614835374
braket
of bash? I start trembling around 100

1614835388
marler8997
lol, fair point

1614835399
marler8997
but you're put it into nice modular functions

1614835429
braket
i tried to put lots of comments too cause i always forget how to write bash after like a week lol

1614835490
marler8997
bash has so many features and so much syntax, it's like the opposite of Zig in alot of ways

1614835656
braket
im just waiting for colorless functions in bash

1614835665
braket
tired of echo and async-echo

1614841984
marler8997
will work on it here:

1614843764
TheLemonMan
andrewrk, you may be interested in

1614843790
TheLemonMan
(iirc you wanted something to warn you when a long-running command has finished)

1614843809
TheLemonMan
that's perfect for compiling stage1 heh

1614845451
andrewrk
neat!

1614874871
zags


1614875027
zags
I was kinda looking for the equivalent of

1614875061
dutchie
why bother checking isDigit? just call parseInt and return the string variant if it fails

1614875070
dutchie
parseFloat*

1614875095
zags
because Zig's parseFloat accepts "+" as a number

1614875109
zags
which is a symbol in what this is part of

1614875126
dutchie
ah

1614875128
zags
most languages I use fail if "+" is input by itself

1614875135
TheLemonMan
PR welcome

1614875150
zags
for succeed or parseFloat? :)

1614875152
dutchie
i remember parseInt had that wart, but it got fixed in master

1614875162
dutchie
not sure if parseFloat similarly got fixed

1614875163
zags
I see

1614875176
zags
i'm on master and + == 0.0

1614875198
TheLemonMan
fix parseFloat, write a test, get the fuzzy warm feeling of having contributed to OSS

1614875212
zags
sure, still my original question stands

1614875237
braket
i gotchu

1614875253
TheLemonMan
no questions, only answers

1614875257
braket


1614875262
braket
does this work?

1614875312
zags
huh, does if (std.fmt.parseFloat(f64, input)) |num| { work when parseFloat returns an error?

1614875322
ifreund
no

1614875326
g-w1
you need an else |e| block

1614875339
ifreund
no that doesn't work either

1614875347
zags
ok, that's the part I was missing, thanks guys

1614875352
braket
oh right it doesn't

1614875356
g-w1
ifreund: why?

1614875357
ifreund
(you'd need to ditch the optional capture)

1614875364
g-w1
ah

1614875479
ifreund
oh nevermind, there is no optional that should work

1614875485
zags
yes it works

1614875509
zags
when I combine errors and optionals, these things fall apart

1614875586
zags
braket: thanks for the code, do you think "if (succeed parseFloat(f64, input)) |num| {}" would be worthwhile sugar? Probably not, but that was kinda what I was looking for instead of try

1614875611
zags
that could unpack optionals as well I think?

1614875636
zags
nah, icky

1614875649
ifreund
yeah where do you handle the error?

1614875689
TheLemonMan
fix parseFloat and you'd have no duplicated code anymore

1614875691
zags
this is for when you're only interested in the success case, like with parseFloat I only care if it succeeds, else do something else

1614875706
zags
TheLemonMan: parseFloat is a red herring, I'm asking more generally

1614875713
g-w1
else |_| {}

1614875752
g-w1
is there something in the File api that allows me to chmod it?

1614875754
ifreund
I think adding a language feature to make ignoring errors easier would be a very hard sell

1614875776
zags
Yeah I think you're right haha

1614875781
TheLemonMan
the answer is no, the if expression has only one type so it's either !T or ?T

1614875781
v0idify
how do i `if (no error) { do thing }` ?

1614875787
v0idify
so the inverse of catch

1614875807
v0idify
oh.

1614875809
v0idify
nevermind

1614875813
TheLemonMan
v0idify, with an empty if body and an else?

1614875822
v0idify
langref.html#if

1614875823
zags
v0idify: that's what succeed was haha

1614875831
ifreund
g-w1: I don't see any chmod/fchmod bindings in the std yet

1614875840
v0idify
i didn't know that if handled error values

1614875842
ifreund
(you should totally add them)

1614875852
g-w1
ok

1614875919
zags
ifreund: though, would "if (succeed expr) |val|" really make it much easier to ignore errors than adding "else |_| {}" ? At least the code is clear about you ignoring errors :)

1614875953
zags
With else, you have to read on to realize the error is being ignored

1614875984
zags
With "if (std.fmt.parseFloat(f64, val)) |num| {" I can't tell if I'm ignoring error or dealing with an optional

1614876002
v0idify
how do i get values inside an anonymous union(enum)?

1614876028
ifreund
v0idify: i don't understand what you mean by "get values"

1614876051
ifreund
zags: Where does the control flow go if the expr evaluates to an error?

1614876066
g-w1
hmm, i wonder how stage2 chmods stuff

1614876067
zags
ifreund: you could have an else |err| ?

1614876076
g-w1
yes

1614876078
v0idify
ifreund, i don't know how to explain it but i don't need it rn so it's fine

1614876144
zags
ifreund: yeah I see your point, nvm

1614876150
TheLemonMan
by creating the files with the right mode, I guess

1614876162
g-w1
ah, I am creating a file, so Ill try that

1614876178
ifreund
g-w1: std.fs.File.Mode

1614876303
braket
zags, you were using `std.ascii.isDigit` to see if an input string had like a + in them right?

1614876307
g-w1
works thanks

1614876321
braket
cause i think it accepts + too

1614876406
TheLemonMan
that's not true?

1614876431
braket
oh wait wait zags was checking the first character

1614876433
zags
braket: parseFloat succeeds on "+" as input

1614876445
braket
nvm nvm lol

1614876454
zags
parseInt does the right thing

1614876470
zags
I'll make an issue

1614876484
zags
unless I can fix the code

1614876493
TheLemonMan
g-w1, wrt enabling zig fmt --check in the CI, have you thought of adding that as a pre-commit hook?

1614876560
g-w1
that would be only local right?

1614876585
g-w1
my reasoning is that if some unformatted code gets in the repo, then it makes the diffs dirty

1614876598
TheLemonMan
yep, you can either apply zig fmt on the changed file or have it abort the commit if --check fails

1614876611
TheLemonMan
I'm with you on that, I hate unformatted code

1614876627
g-w1
i mean its not bad if the diffs are dirty, just clutter since my editor auto-formats code

1614876653
TheLemonMan
it

1614876670
g-w1
yeah

1614876749
TheLemonMan
IIRC github can be coaxed into ignoring the whitespace changes, but I never remember how to do that

1614876781
zags
click the tool icon

1614876793
zags
the "Hide whitespace changes"

1614876812
zags
can be done on cmd line as well

1614876855
ifreund
andrewrk: well shit, looks like glibc 2.33 might be causing issues even though zig now properly falls back to 2.32

1614876879
ifreund
I got a bug report about linking failing from someone trying to build river on arch:

1614876883
zags
TheLemonMan: here's a beauty: git diff -U0 -w --no-color | git apply --cached --ignore-whitespace --unidiff-zero -

1614876961
TheLemonMan
I usually CBA to download the diffs locally

1614876980
TheLemonMan
but I'll stash that in my gitconfig, thanks

1614877032
zags
CBA?

1614877053
TheLemonMan
cannot be arsed

1614877068
zags
haha

1614877110
ifreund
yeah, I don't really either unless I need to build them, in which case I git fetch upstream pull/9999/head:9999

1614877161
zags
i take it I'm supposed to run zig fmt before making a stdlib PR?

1614877167
ifreund
yup

1614877171
zags
thx

1614877857
zags
i've built master, made a change in the std lib. How do I rebuild now? make zig doesn't do anything

1614877876
zags
pardon the noobiness, haven't made changes to the compiler/std yet

1614877914
zags
just zig build?

1614877923
ifreund
yup, --help to see all the options

1614877938
ifreund
zig build alone will just build self-hosted, you probably want to run tests though

1614877948
zags
yeah i do

1614877960
ifreund
I usually just run zig test /path/to/file/i/changed.zig to test simple things quickly

1614877970
zags
good tip

1614878387
zags
hm, so after zig build, the build/zig isn't updated, but I get a new one in zig-cache. Trying to run tests on that results in

1614878390
zags
error(module): TODO: analyze test decl

1614878393
zags
error: no entry point found

1614878528
ifreund
the one in zig-cache is the (incomplete) stage2 compiler, you should keep using the one in build/zig

1614878575
zags
hm, that one doesn't get updated when I rebuild

1614878582
zags
after changing the stdlib

1614878618
ifreund
if you change something the stage 1 compiler depends on on the std and run make it should rebuild

1614878622
ifreund
otherwise it doesn't need to

1614878647
zags
i change something in fmt, no rebuild occurs

1614878652
zags
i changed something in fmt, no rebuild occurs

1614878888
zags
ifreund: actually, I get "error(module): TODO: analyze test decl" even when using "build/zig" on a stdlib file, hmm

1614879026
g-w1
do `mkdir build; cd build; cmake .. {flags}; make; ./zig test ../lib/std/fmt.zig`

1614879035
zags
wait, wtf, I edited the wrong file haha. The file is in both lib/zig/std and lib/std

1614879048
zags
what gives

1614879093
ifreund
why do you havea lib/zig folder?

1614879099
zags
no idea

1614879108
zags
i just cloned and make'd

1614879110
g-w1
its where its installed

1614879135
g-w1
did you makedir build first?

1614879140
zags
yeah

1614879154
g-w1
hm

1614879178
ifreund
did you do make install . or something?

1614879184
zags
maybe i managed to screw something up anyway, i'll restart if this isn't supposed to happen

1614879187
ifreund
that seems likely

1614879187
zags
ifreund: nope

1614879240
zags
mkdir build, cd build, cmake, make according to shell history

1614879261
g-w1
you shouldn't even need the latest compiler. just do `zig test file` since you didn't change the compiler

1614879275
g-w1
s/latest/to build

1614879346
zags
zig test on my own file works, but zig test ../som/std/lib/file fails with the above errors

1614879365
g-w1
output of `which zig`?

1614879377
g-w1
it fails with TODO analyze test decl???

1614879391
g-w1
just download the latest zig off the website and use it.

1614879433
TheLemonMan
you are somehow using the stage2 compiler?

1614879434
zags
g-w1: D'OH i was using a slightly older master, ./zig test works

1614879450
zags
which zig indeed points to another checkout haha

1614879468
zags
amateur hour

1614879510
g-w1
ok, well good that it works now :D

1614879585
zags
anything else I need to consider beyond fmt before making a PR? branch naming standard or anything like that?

1614879597
TheLemonMan
write a test!

1614879602
TheLemonMan
or more than one

1614879612
zags
yeah, i've expanded the existing parseFloat test

1614879657
TheLemonMan
then you're good to go

1614879705
zags
thanks :)

1614885927
andrewrk
ifreund, damn! I'll take a look

1614886286
ifreund
appreciate it :)

1614886684
andrewrk
my plan is to use a distro with the newer glibc, check out zig 0.7.1 sources, and then see what patch on top of that would fix it, then apply that to master branch

1614886881
TheLemonMan
andrewrk, did you (or mikdusan) managed to find the problem with mips/riscv and LLVM12?

1614886908
andrewrk
not yet

1614886930
andrewrk
one of the problems is a missing math function which is no problem

1614886939
andrewrk
but I also observed a linker error. let me pull it up again...

1614886964
TheLemonMan
yeah, that's pretty tame

1614887089
andrewrk
ld.lld: error: test.o:(.rodata.str1.1): offset is outside the section

1614887100
andrewrk
on behavior tests, mips-linux-none, debug

1614887140
TheLemonMan
great, I'll give that a spin

1614887264
g-w1
is there any documentation on the c abi struct layout? it seems like there is no padding when everything is aligned by 2 bytes. (I am trying to understand elf and it seems std.elf uses extern)

1614887307
g-w1
or is that all I need to know?

1614887344
TheLemonMan
the padding depends on the type sizes and offsets

1614887454
g-w1
ok

1614887526
g-w1
i think ill try implementing bswapAllFields for the elf backend

1614887622
ifreund
andrewrk: opened #8144 to track the glibc thing

1614887628
andrewrk
thank you!

1614887678
TheLemonMan
speaking of elf.zig, #7763 is still in the PR queue

1614887781
g-w1
i like that

1614887793
andrewrk
merged

1614887856
TheLemonMan
easy peasy lemon squeezy

1614887924
g-w1
do you think I should put byteswap in std.math? or somewhere else?

1614887964
andrewrk
byteswap is a memory operation, not math

1614887970
g-w1
ah, std.mem?

1614887988
ifreund
g-w1: you can find links to read the ABI specs here:

1614888003
g-w1
oh wait @byteSwap exists

1614888012
TheLemonMan
g-w1, we already have littleToNative (and friends)

1614888033
g-w1
ifreund: thanks

1614894764
zags
is there a stringbuffer type of thing in zig std, or do I just use ArrayList(u8) ?

1614894781
ikskuh
use ArrayList(u8)

1614894787
ikskuh
it even has .reader() and .writer()

1614894793
zags
aye, will do

1614897284
v0idify
will zig have typescript/hare style unions? like: (Type | u32) and return 42; or return Type{...} instead of union(enum)

1614897302
v0idify
they could also essentially replace Error unions to some degree

1614897353
ikskuh
v0idify: i don't think so

1614897358
ikskuh
(u32|u32)

1614897360
ikskuh
what about this

1614897389
v0idify
oh yeah those use-cases wouldn

1614897393
v0idify
wouldn't work

1614897402
fengb
In Typescript, that's semantically identical to u32

1614897426
v0idify
(Type|struct{kind:enum{Thing,OtherThing},value:u32)

1614897434
v0idify
and closing bracket which i forgot

1614897452
v0idify
i can see how it's worse in some use cases but better for most imo

1614897488
v0idify
or, keep current unions and add "anonymous unions"

1614897504
v0idify
how are non-enum unions useful? i can't think of a use case

1614897547
ikskuh
non-enum unions?

1614897591
v0idify
normal, non-tagged unions

1614897610
fengb
If you know the tag ahead of time, there's no need for the program to keep track

1614897627
fengb
In release-fast, this is faster (but UB if you access the wrong one)

1614897656
v0idify
fair enough

1614897734
fengb
You can emulate it with extern union or packed union, except those don't have helpful safety checks in debug mode

1614897738
v0idify
still, i believe anonymous tagged unions could be useful

1614897776
fengb
(Also they're pretty strict about memory layout, whereas a plain union doesn't care)

1614899335
Kenaryn
Hello computalional people. Please where is the link to internationalization topic to add a new translation?

1614899369
Kenaryn
regarding to the zig web site I mean.

1614899674
ikskuh


1614901298
Kenaryn
Thanks buddy.

