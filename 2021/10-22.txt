1634863303
op_4!~op_4@user/op-4/x-9116473
is it possible to measure stack space usage in Zig?

1634869061
daurnimator!~daurnimat@vultr.daurnimator.com
not yet. but it's planned

1634870145
jrl!~jrl@46.23.89.141
nice push to get to 30%!

1634874058
freshcoffee!~fresh@user/freshcoffee
here is an azure/windows sample: 7,168 MB of RAM + 1791 MB pagefile = 8959 MB VRAM

1634874060
freshcoffee!~fresh@user/freshcoffee
https://dev.azure.com/ziglang/zig/_build/results?buildId=17388&view=logs&j=3e8797c7-5b0a-5f2c-07a4-1bc5e60a122e&t=40eab7ee-d9b0-52b1-2670-e883be480d52

1634892047
freshcoffee!~fresh@user/freshcoffee
re: drone.io infrequent (and unexplained failures), I wonder if it's not such a good idea to have multiple containers running with same GLOBAL and/or LOCAL zig-cache

1634892107
freshcoffee!~fresh@user/freshcoffee
some google fu says that container locking with bound host filesystems seem to work. It is the one-kernel providing these services anyways, so that shouldn't be the issue

1634896452
bgiannan!giann@2a01:4f8:141:1272::2
can you guys tell me what this assert failing means? https://github.com/ziglang/zig/blob/master/lib/std/hash_map.zig#L1002

1634896566
ikskuh!~xq@2a0d:5940:6:163::ad7e
it means that NoClobber-Functions assume that you *KNOW* that the key isn't already in the set

1634896796
bgiannan!giann@2a01:4f8:141:1272::2
right but i just did a `map.put(key, value)` i did not want to assume that

1634896934
ifreund!~ifreund@user/ifreund
bgiannan: map.put() doesn't call that function, I think you must be doing something else as well

1634896947
bgiannan!giann@2a01:4f8:141:1272::2
figuered it out, the key must have been freed

1634921499
marler8997!~marler899@204.229.3.4
Does zig have a way to tell if the host system is compatible with a target?

1634921528
marler8997!~marler899@204.229.3.4
in other words, if you compile an exe with a custom "target", can Zig tell you if the host system can run that exe?

1634922644
haze!~haze@cpe-68-174-143-88.nyc.res.rr.com
growl

1634923225
freshcoffee!~fresh@user/freshcoffee
marler8997: you mean cpu features? I don't think we have anything that elaborate. But there is some basic target/arch checks here:

1634923228
freshcoffee!~fresh@user/freshcoffee
https://github.com/ziglang/zig/blob/d0dceae736edb43d4c217306a2b0445277f184ce/lib/std/target.zig#L1671-L1690

1634923259
marler8997!~marler899@204.229.3.4
freshcoffee perfect

1634926372
Sawzall!~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net
On that note, I bootstrap zig for -target arm-linux-musleabi -mcpu=mpcorenovfp. The resulting compiler runs fine for my target, but it doesn't automatically generate usable binaries for that target. I still have to specify -target and -mcpu.

1634926452
andrewrk!~andrewrk@mail.ziglang.org
hmm that's interesting

1634926462
andrewrk!~andrewrk@mail.ziglang.org
sounds like a bug in native cpu feature detection

1634926815
Sawzall!~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net
It is a weird target I have. armv7 & no fpu, not common, but fpu is an optional feature under armv7. Actually is Netgear R7000 router.

1634926979
Sawzall!~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net
One quick question. I think I saw you now upgraded to Clang-13. I'm wondering if you ran into this issue I'm having cross-building llvm for different target arch than build machine. https://bugs.llvm.org/show_bug.cgi?id=52106

1634927025
Sawzall!~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net
I can't get anyone at LLVM to respond to anything. I have a patch submission that's been sitting there I can't get anyone to review.

1634927029
andrewrk!~andrewrk@mail.ziglang.org
Sawzall, I've been able to use zig-bootstrap https://github.com/ziglang/zig-bootstrap with llvm 13 which cross compiles clang, llvm, and lld for a bunch of targets (see the readme)

1634927042
andrewrk!~andrewrk@mail.ziglang.org
yeah it can be tricky to get attention. have you tried an email on the llvm-dev mailing list?

1634927056
andrewrk!~andrewrk@mail.ziglang.org
you can also try to politely ping the relevant parties on OFTC

1634927152
Sawzall!~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net
I'll give that a shot. Thanks!

1634935825
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
andrewrk: did you see this? I'm not sure what to do here? https://github.com/ziglang/zig/pull/9876#discussion_r734440028

1634935851
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
llvm's memset only works with setting a block of memory to an integer, not an array

1634936937
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
I could do that if the length is one, do a memset as an optimisation, but I don't really think its worth it

1634936977
andrewrk!~andrewrk@mail.ziglang.org
g-w1, can you try bitcasting to a large integer and see if llvm accepts that?

1634936996
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
bitcasting the whole array to a large integer?

1634937005
andrewrk!~andrewrk@mail.ziglang.org
the element that you want to set

1634937031
andrewrk!~andrewrk@mail.ziglang.org
so if it's `"ab" ** 10` then yes the whole "ab" array to a u32

1634937037
andrewrk!~andrewrk@mail.ziglang.org
u16 I mean

1634937040
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
yeah

1634937066
andrewrk!~andrewrk@mail.ziglang.org
also I disagree that the length 1 optimization is not worth it- that's the main use case for this feature and it absolutely should lower to 1 memset call

1634937082
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
will people use that at runtime though?

1634937148
op_4!~op_4@user/op-4/x-9116473
is there something like --flush-to-zero for zig to avoid (potentially costly) subnormal float computations?

1634937155
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ok, I can try bitcasting it to a large integer

1634937157
andrewrk!~andrewrk@mail.ziglang.org
memset(runtime_dest, runtime_element, comptime_size) is a reasonably common use case

1634937175
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
ok, i'll try it

1634939075
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
good news it works!

1634939085
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
(I made it fall back to memcpy if the array is too big)

1634940602
andrewrk!~andrewrk@mail.ziglang.org
what's the limit? i64?

1634940829
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
2 ** 16

1634940831
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
max int type

1634940876
andrewrk!~andrewrk@mail.ziglang.org
oh wow, alright cool. I expect that to cover all cases except edge cases

1634940893
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
haha

1634940901
g-w1!g-w1@2600:3c03::f03c:92ff:fe2f:c92f
i have it pushed :)

1634941347
andrewrk!~andrewrk@mail.ziglang.org
op_4, I know some people around here are qualified to participate in that discussion. I would need to spend a bit more time familiarizing myself with the floating point landscape before I can have a useful answer to that question

1634942707
op_4!~op_4@user/op-4/x-9116473
andrewrk: no worries, thanks for your attention :)

