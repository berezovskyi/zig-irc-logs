1628295873
fengshaun!~fengshaun@68.69.214.210
would this <https://mabez.dev/blog/posts/esp-rust-espressif/> potentially translate to better zig support on esp32? (given both rust and zig are llvm-based). Not talking about the std lib, just the language itself

1628295903
fengshaun!~fengshaun@68.69.214.210
oh wait, it's the RISC-V chip

1628295907
fengshaun!~fengshaun@68.69.214.210
nvm

1628347444
cot!~kiedtl@kisslinux/kiedtl
does @import "copy" over the text file (as with #include in C), or does it just signal the compiler that the file depends on the imported file?

1628347492
daurnimator!~daurnimat@vultr.daurnimator.com
cot: wut?

1628347513
cot!~kiedtl@kisslinux/kiedtl
In what way am I unclear?

1628347528
daurnimator!~daurnimat@vultr.daurnimator.com
cot: @import is as if you wrote `struct { CONTENTS_OF_FILE_HERE }`; but with file+line numbers working; and anti-shadowing rules not applying

1628347571
daurnimator!~daurnimat@vultr.daurnimator.com
it's neither "copying" the file (to where?); nor is it simply adding a dependency...

1628347572
cot!~kiedtl@kisslinux/kiedtl
I see, so it's kind of an advanced #include. Thanks.

1628347584
cot!~kiedtl@kisslinux/kiedtl
I meant "copying" to the source file

1628349899
dutchie!~dutchie@user/dutchie
someone else in that HN thread had some weird idea about @import "copying"

1628349910
dutchie!~dutchie@user/dutchie
https://news.ycombinator.com/item?id=28096463 "Compiled languages shouldn't be using text file imports as modules"

1628349958
dutchie!~dutchie@user/dutchie
i'm not sure what they want instead... there's already a package system, though it isn't well documented or very ergonomic yet

1628350968
ifreund!~ifreund@user/ifreund
they likely don't understand that @import() isn't text-based

1628351233
companion_cube!~simon@user/companion-cube
it's pjmlp, he's smart but he somehow has a boner for C++

1628351392
ifreund!~ifreund@user/ifreund
refusing to use a language for superficial reasons like it's usage of the @ character isn't what I'd normally call smart 

1628351443
companion_cube!~simon@user/companion-cube
well, you can be smart and have shitty taste

1628351449
companion_cube!~simon@user/companion-cube
or be too emotional

1628351457
companion_cube!~simon@user/companion-cube
(he's also very into java?)

1628351462
companion_cube!~simon@user/companion-cube
maybe s/smart/knowledgeable/

1628351584
freshcoffee!~fresh@user/freshcoffee
"@ everywhere, for that I would keep using Objective-C" is like saying "; everywhere, for that I would keep using C" because you know... just stick with the first language that uses that sigil

1628351832
dutchie!~dutchie@user/dutchie
"everywhere" is an exaggeration too but whatever

1628352057
companion_cube!~simon@user/companion-cube
it's pretty cool to have an immediate indication of what's builtin

1628352064
companion_cube!~simon@user/companion-cube
I don't know why one would criticize that

1628352103
jaredmm!~jaredmm@user/jaredmm
Looks like I'm writing Zig wrong, since I don't have "@"s everywhere!

1628353640
ifreund!~ifreund@user/ifreund
yeah, I'm very happy with Zig's design choice here

1628359754
hanna!~hanna@user/hanna
> well, you can be smart and have shitty taste

1628359759
hanna!~hanna@user/hanna
reminds me of a certain someone

1628359872
andrewrk!~andrewrk@mail.ziglang.org
let's stay on topic here

1628360633
jaredmm!~jaredmm@user/jaredmm
I have StructA that contains a pointer to a heap allocated StructB that contains an ArrayList of pointers to heap allocated StructBs. I'm currently assigning the ArrayList to StructB.children, which seems to work for my tests, but feels like it shouldn't work.

1628360715
jaredmm!~jaredmm@user/jaredmm
ArrayList(*StructB).init(allocator) would be stack allocated containing pointers to StructB allocated on the heap, so it would be expected to be an invalid pointer when StructB is returned?

1628370961
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
jaredmm i havent used a builtin in a really long time lol

