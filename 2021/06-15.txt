1623743025
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
freshcoffee, ping

1623751320
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
freenode shit the bed

1623752110
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
lol it's even worse than that

1623752169
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
rip the registered nickname I had for more than a decade

1623754937
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hah, its just down to these https://dev.azure.com/ziglang/zig/_build/results?buildId=15120&view=logs&j=9512b82f-d185-50ea-ee23-d010bc14782f&t=ca25486c-bdcc-50c6-de82-a9ccd6b64318&l=390

1623755029
ikskuh!~xq@2a0d:5940:6:163::ad7e
wow

1623755032
ikskuh!~xq@2a0d:5940:6:163::ad7e
g-w1: nice work

1623759089
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
in a switch, can I disable a branch based on a comptime value? like `comptime blk: { if (ct_val) break :blk 'a'; else ? } => {…}`

1623759708
luuk!~luuk@user/luuk
`unreachable` if you're certain it's never reached can be optimized away in release modes

1623759803
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
I am certain that it *can* be reached. I want the switch, when encountering `'a'`, to execute a specific block if `ct_val` is true, but execute the `else =>` branch if `ct_val` is false

1623760157
luuk!~luuk@user/luuk
Ah, nah you'll have to either do the entire `'a'` case within the 'else' branch, or in the 'a' branch itself.

1623760366
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
hmm I hoped there was a way since the docs mention `noreturn` values being able to mingle with other values in a switch, so I assumed I could plant a `noreturn` value as branch selector which would discard the branch

1623760437
ikskuh!~xq@2a0d:5940:6:163::ad7e
flyx[m]: stage1 will explode as soon as you use "noreturn"

1623763073
daurnimator!~daurnimat@vultr.daurnimator.com
ikskuh: huh?

1623763403
ikskuh!~xq@2a0d:5940:6:163::ad7e
daurnimator: there are officially valid use cases of noreturn that make zig stage1 just go OOM or similar :D

1623763415
ikskuh!~xq@2a0d:5940:6:163::ad7e
union(enum) { none: noreturn, int: u32, float: f32 };

1623763418
ikskuh!~xq@2a0d:5940:6:163::ad7e
for example

1623764197
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
`std.unicode` does not contain category lookup, which I need. before I implement this in my own code, would this have a good chance of being accepted if I'd do a PR to the stdlib?

1623764376
ikskuh!~xq@2a0d:5940:6:163::ad7e
i don't think this will be accepted to the stdlib, but there are several libraries out there that implement this already

1623764451
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
like?

1623764548
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/gernest/zunicode

1623764570
ikskuh!~xq@2a0d:5940:6:163::ad7e
https://github.com/search?q=zig+unicode

1623765034
daurnimator!~daurnimat@vultr.daurnimator.com
flyx[m]: category lookup depends on unicode tables which are A. non-static and B. large in size

1623765117
daurnimator!~daurnimat@vultr.daurnimator.com
and I might add: relatively useless

1623765182
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
phew zunicode seems to do it but could surely use some docs

1623765304
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
ACTION will just port his existing C-code which seems less work

1623765372
ikskuh!~xq@2a0d:5940:6:163::ad7e
zig translate-c

1623765375
ikskuh!~xq@2a0d:5940:6:163::ad7e
und abdafür :D

1623765409
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
it's just copying some array literals anyway

1623775480
freshcoffee!~fresh@user/freshcoffee
TheLemonMan: pong

1623775545
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
freshcoffee, got some news wrt the NetBSD .so thing

1623775557
freshcoffee!~fresh@user/freshcoffee
ok also see that blog I found very imformative

1623775623
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
hmm, I missed all your replies, there's something wrong with my mailbox

1623775842
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
whenever the PT_LOAD count is 2 everything's ok, right?

1623775873
freshcoffee!~fresh@user/freshcoffee
that's actually unknown. We could have more than 1 serial issue here.

1623775909
freshcoffee!~fresh@user/freshcoffee
but I have zero evidence to that

1623775993
freshcoffee!~fresh@user/freshcoffee
does a linker script have ability to control section -> segment mapping?

1623776046
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
if you're feeling brave you could revert this LLD patch https://reviews.llvm.org/D58892 and try again

1623777791
freshcoffee!~fresh@user/freshcoffee
near as I can tell that patch is effectively already present in 12.0.1-rc1

1623777878
freshcoffee!~fresh@user/freshcoffee
oh one sec. scratch that.

1623777957
freshcoffee!~fresh@user/freshcoffee
yeah that patch is already active

1623778022
andrewrk!~andrewrk@mail.ziglang.org
freshcoffee, I think the suggestion was to revert it

1623778038
freshcoffee!~fresh@user/freshcoffee
omg thanks

1623778051
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
freshcoffee needs some fresh coffee

1623778057
freshcoffee!~fresh@user/freshcoffee
bad coffee. bad coffee. bad!

1623778383
freshcoffee!~fresh@user/freshcoffee
TheLemonMan: ok I'll try to spin a build with a patch reverted a bit later. Unfortunately I have at least 2 hours of paperwork to do now. grrr.

1623778401
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
tax season?

1623778527
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I'll look into unblocking you on unused vars now

1623778576
andrewrk!~andrewrk@mail.ziglang.org
TheLemonMan, FYI I'm about to decide the lang spec rules about @export, whether the first parameter has to be an identifier, a field access, or if it could be any expression. suggestions welcome

1623778754
andrewrk!~andrewrk@mail.ziglang.org
ok I'm pretty sure the rules are going to be: it has to be an identifier that refers to a decl, or a field access expression that refers to a decl

1623778806
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
sounds good

1623780124
TheLemonMan!~lemonboy@irssi/staff/TheLemonMan
yeah, reverting the patch and passing --no-rosegment works

1623783407
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: thanks

1623791414
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I think you should be unblocked now

1623791483
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thanks, ill check it out

1623791493
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
don't you need to fix the stuff in compiler-rt that exports local variables?

1623791540
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also, does stage2 assembly have 'mov' support, or is the only thing syscall?

1623791573
andrewrk!~andrewrk@mail.ziglang.org
https://github.com/ziglang/zig/blob/90c73d8768bd51c84a5bf3d589d31abce6d93d37/src/codegen.zig#L3266

1623791602
andrewrk!~andrewrk@mail.ziglang.org
it's a ...'minimal'... implementation

1623791619
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, I may have to add that soon, but i put that on the stage2 agenda

1623791845
andrewrk!~andrewrk@mail.ziglang.org
g-w1, I looked at the compiler_rt stuff just now. ok looks like yes we'll need to implement that TODO in AstGen to unblock 9047

1623791876
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
well, it doesn't seem like valid zig ../lib/std/special/compiler_rt/atomics.zig:331:15: error: unused local constant

1623791877
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
        const fetch_nand_u64 = fetchFn(u64, .Nand);

1623791890
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its exporting a local const right?

1623791902
andrewrk!~andrewrk@mail.ziglang.org
it is because fetch_nand_u64 is comptime known

1623791949
andrewrk!~andrewrk@mail.ziglang.org
I think you can implement the fix in AstGen. it's related to the other changes you made recently

1623791970
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yea, its easy, if its a local var, then just var.used = true

1623791986
andrewrk!~andrewrk@mail.ziglang.org
also emit a compile error if it's definitely not comptime

1623791997
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so if !gz.in_comptime?

1623792131
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm, i think i found a zig fmt bug.

1623792135
andrewrk!~andrewrk@mail.ziglang.org
I think is_comptime is not the best name for that flag, but yes it looks like that is the correct semantics to me

1623792143
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok

1623792169
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://clbin.com/iiNmL on line 6671 in this file, zig fmt does not indent it, but I think it should

1623792199
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
sorry, 6771

1623792232
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: would you be opposed to rename it to force_comptime?

1623792282
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
this zig fmt thing is very weird

1623792293
andrewrk!~andrewrk@mail.ziglang.org
that doesn't sound right either. how would you describe the flag in one sentence?

1623792344
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, its already called force_comptime

1623792395
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
The current scope must be comptime.

1623792513
andrewrk!~andrewrk@mail.ziglang.org
not that one, the `is_comptime` field of LocalPtr

1623792549
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, The variable is a comptime variable, can only have comptime known values stored to it.

1623792560
andrewrk!~andrewrk@mail.ziglang.org
that's not true though

1623792571
andrewrk!~andrewrk@mail.ziglang.org
that's why it's a bad name

1623792610
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh, cool, what is wrong about it?

1623792658
andrewrk!~andrewrk@mail.ziglang.org
because it is set to true for const locals that may need a memory location 

1623792667
andrewrk!~andrewrk@mail.ziglang.org
const locals that *might* be comptime known

1623792686
andrewrk!~andrewrk@mail.ziglang.org
I think you wrote that code :)

1623792791
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
~2317 in AstGen.zig?

1623792907
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
hmm

1623792989
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i think I wrote the is_comptime, not sure about the varDecl code, but what do you propose it should be called?

1623793061
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
also, should gz.force_comptime make all vars auto "is_comptime"=true

1623793090
andrewrk!~andrewrk@mail.ziglang.org
yes it should

1623793111
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, i'll do that first, we can discuss the naming later

1623793116
andrewrk!~andrewrk@mail.ziglang.org
a good trick to naming things properly is to come up with a short sentence that describes it, and then reduce the sentence's meaning down until there is nothing redundant

1623793135
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the problem is, i'm not convinced I fully understand it

1623793148
andrewrk!~andrewrk@mail.ziglang.org
all the more important to name it properly then

1623793152
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes

1623793161
andrewrk!~andrewrk@mail.ziglang.org
didn't you introduce the flag?

1623793186
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
yes, but I don't think I fully understood that varDecl code, so I thought it must be comptime

1623793199
andrewrk!~andrewrk@mail.ziglang.org
I see

1623793211
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
is the flag wrong, or just the name?

1623793221
andrewrk!~andrewrk@mail.ziglang.org
I think the logic is ok, both vexu and I checked it

1623793226
andrewrk!~andrewrk@mail.ziglang.org
I suspect `maybe_comptime` would be correct

1623793244
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
what is your sentence :)?

1623793319
andrewrk!~andrewrk@mail.ziglang.org
 /// true means we find out during Sema whether the value is comptime. false means it is already known at AstGen the value is runtime-known.

1623793337
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that makes a lot more sense, thanks so much

1623793342
andrewrk!~andrewrk@mail.ziglang.org
np

1623793424
andrewrk!~andrewrk@mail.ziglang.org
g-w1, mm I'm not so sure on the force_comptime affecting mutables

1623793461
andrewrk!~andrewrk@mail.ziglang.org
for const locals I'm pretty sure force_comptime should set maybe_comptime=true

1623793479
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
but for vars not, since we want '{s}' not accessible from inner function

1623793488
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
thats your reasoning right?

1623793506
andrewrk!~andrewrk@mail.ziglang.org
looks like we already have the correct code in place for vars to me

1623793537
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, cool, less to change

1623793750
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so we do not allow exportng maybe_comptime variables, because they could be runtime?

1623793764
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
or we do?

1623794131
andrewrk!~andrewrk@mail.ziglang.org
Sema makes the decision

1623794235
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i see, thanks

1623794739
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
nice, ❯ ./zig fmt --check --ast-check .. returns nothing

1623794759
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
now I will incorpoate lemonboy's suggestions and then get a heapload of reviews :)

1623796857
waleee!~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd
A friend on efnet wonders if uart on qemu simulates LSR (for ARM)

1623798477
kiedtl!~kiedtl@kisslinux/kiedtl
nrr: ehlo

1623798524
nrr!sid20938@id-20938.tooting.irccloud.com
kiedtl: sup!

1623798612
kiedtl!~kiedtl@kisslinux/kiedtl
the ceiling, rn

1623798619
kiedtl!~kiedtl@kisslinux/kiedtl
though just came from a walk outside

1623798623
kiedtl!~kiedtl@kisslinux/kiedtl
lovely weather here <3

1623798638
nrr!sid20938@id-20938.tooting.irccloud.com
i should go take a walk at some point.

1623798680
nrr!sid20938@id-20938.tooting.irccloud.com
i was kinda hoping for something nerdy though, like, "up is a unit vector pointing anti-coreward" as a response.

