1627085378
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I have a question.

1627085444
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I would like to refer to the type ¨termios¨ in std/os/bits/linux.zig but I cannot get the import statement to work properly. The type in question is ¨pub¨ so that shouldn´t be an issue. Any ideas?

1627087648
andrewrk!~andrewrk@mail.ziglang.org
can you share your example code and the error message that you are getting?

1627087872
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I think I have figured it out, I get really confused due to namespacing issues. Right now I´m using the code ¨const bits = std.os; const my_termios = allocator.create(bits.termios);¨ which does not fail when using linux

1627087936
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
The difficulty I have is that knowing where a type or value is, is generally not enough to figure out how to import something.

1627087983
ifreund!~ifreund@user/ifreund
the problem really comes from the usingnamespace based approach used to organize std.os

1627088011
ifreund!~ifreund@user/ifreund
I hope we find a good way to remove it from the language

1627088025
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
e.g. knowing that ¨pub const termios¨ is in std/os/bits/linux.zig gives no indication how the import should be structured.

1627088123
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
But thanks for the input, I hope that I can use this to continue with my program, at the moment I am replacing imported C code with native Zig code which is sometimes easy, but sometimes also difficult.

1627136454
koakuma!~koakuma@user/koakuma
Hi, I have a question

1627136454
koakuma!~koakuma@user/koakuma
In std.Thread's freeAndExit function, I see that some arches do exit(0) and some others do exit(1), which one is the correct value?

1627136454
koakuma!~koakuma@user/koakuma
Its comment also say exit(1), btw

1627136564
ifreund!~ifreund@user/ifreund
sounds like exit(1) is correct to me then

1627136721
koakuma!~koakuma@user/koakuma
Okay, I'll do exit(1) then

1627145261
leon-p!~leon-p@ip1f113b71.dynamic.kabel-deutschland.de
does anyone know if there is some readline-esque zig library already?

1627145459
luuk!~luuk@user/luuk
There's https://github.com/joachimschmidt557/linenoize tho I'm not sure this what the state of it is, or if it fits your criteria.

1627145476
luuk!~luuk@user/luuk
s/this/

1627145486
leon-p!~leon-p@ip1f113b71.dynamic.kabel-deutschland.de
thanks, I'll check it out

1627145491
luuk!~luuk@user/luuk
np :)

1627145527
ifreund!~ifreund@user/ifreund
leon-p: here's another: https://github.com/justinbalexander/eazyinput

1627145539
leon-p!~leon-p@ip1f113b71.dynamic.kabel-deutschland.de
sweet!

1627145547
ifreund!~ifreund@user/ifreund
though abit out of date it looks

1627150772
ifreund!~ifreund@user/ifreund
I think using @import("root").log as the way to override the default logger was a mistake

1627150797
ifreund!~ifreund@user/ifreund
it makes it so you can't do `const log = std.log.scoped(.foo);` in the root source file

1627150928
ifreund!~ifreund@user/ifreund
I'm also starting to think syslog got it wrong and nobody actually needs 8 log levels

1627150946
ifreund!~ifreund@user/ifreund
they probably just came up with arbitrary stuff to fill a byte 

1627151508
torque!~tachyon@user/torque
tell that to python, which has 50 log levels for its logging utility

1627151574
ifreund!~ifreund@user/ifreund
torque: do they have separate names for all 50 levels? :D

1627151609
torque!~tachyon@user/torque
no, there are only 5 main names corresponding to each decade, but you can define your own name for any level

1627151627
torque!~tachyon@user/torque
i.e. critical = 50, error = 40, warning = 30 etc.

1627151639
ifreund!~ifreund@user/ifreund
ah

1627151648
ifreund!~ifreund@user/ifreund
so syslog still has more names than python

1627151758
torque!~tachyon@user/torque
to be fair, I have found having additional levels below debug is somewhat useful for really spamish logs such as dumps of every communication packet on a socket that impede the viewing of normal debug logs

1627151947
ifreund!~ifreund@user/ifreund
I feel like that kind of thing doesn't need to stay around beyond the debugging session most of the time

1627151969
ifreund!~ifreund@user/ifreund
or that it is better dealt with through scoped logging

1627151994
torque!~tachyon@user/torque
yeah, that's fair

1627152064
jaredmm!~jaredmm@user/jaredmm
I've seen 6 used fairly regularly for over a decade. Critical, Error, Warn, Info, Debug, Trace. Some teams have custom levels as well as the ability to turn logging on for specific namespaces/functions.

1627152151
ifreund!~ifreund@user/ifreund
syslog adds emerg, alert, and notice to that and drops trace

1627152178
ifreund!~ifreund@user/ifreund
I think all you really need is error, warn, info, and debug plus proper scoping

1627154058
andrewrk!~andrewrk@mail.ziglang.org
ifreund, oh good yeah let's cut those log levels down :)

1627154073
andrewrk!~andrewrk@mail.ziglang.org
I agree with those 4

1627154337
ifreund!~ifreund@user/ifreund
andrewrk: yeah, it took me a year of using them to reach the conclusion but I think you were right all along :D

1627154383
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Hi, I´m trying to replace some linked c code with native Zig code. The c stdlib class has a ¨system¨ function. What would be the equivalent of that in Zig?

1627154543
andrewrk!~andrewrk@mail.ziglang.org
Daimanta, that's a libc function that basically executes `sh` in a child process. In your project, are you linking libc? if so you can just call that function. however note that it's a smell. probably nobody should be using system()

1627154606
ifreund!~ifreund@user/ifreund
your zig std options are the std.os.execve variants or std.ChildProcess for a higher level cross platform API

1627154626
ifreund!~ifreund@user/ifreund
just pass /bin/sh and -c as the first to arguments, then the string you want to run

1627154677
andrewrk!~andrewrk@mail.ziglang.org
musl has some signal handling stuff in there

1627154714
ifreund!~ifreund@user/ifreund
sigh

1627154750
ifreund!~ifreund@user/ifreund
signals are by far the worst part of posix

1627154752
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
I am conditionally linking c, on Windows I no longer need it but on linux, I haven´t removed the linked just yet. As an intermediary solution, execve would probably work fine. Thanks for the input :)

1627154802
andrewrk!~andrewrk@mail.ziglang.org
I'm not sure what system() would do on windows

1627154813
ifreund!~ifreund@user/ifreund
looks like std.ChildProcess is the most direct equivalent

1627154836
ifreund!~ifreund@user/ifreund
system() is higher level than I thought, it waits for the child to exit and returns the status

1627154919
andrewrk!~andrewrk@mail.ziglang.org
we have std.ChildProcess.exec for that

1627154980
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
It´s the Google problem for me: If I google for a problem, nothing comes up for Zig, but there are solutions for c. The result is that linking the c solution is attractive but not very idiomatic

1627155004
andrewrk!~andrewrk@mail.ziglang.org
even for C, using system() is suspect 

1627155031
andrewrk!~andrewrk@mail.ziglang.org
part of the problem is that libc is lacking a lot of needed abstractions while zig std lib does provide them

1627155047
andrewrk!~andrewrk@mail.ziglang.org
so if you look at C solutions you'll get half baked hacks

1627155073
andrewrk!~andrewrk@mail.ziglang.org
most big C applications depend on some kind of framework, gtk, qt, the author's personal std lib that they made over the years, etc

1627155134
ifreund!~ifreund@user/ifreund
or glib *shudders*

1627159930
earnestly!~earnest@user/earnestly
I appreciate that ubuntu called their effort libnih

1627162262
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
testing something here: à

1627162294
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Test succesful

1627162460
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
By the way, I´m wondering how people actually program in Zig. Do any of you use an IDE or modded text editor? I´m wondering if I´m not programming sub-obtimally.

1627162557
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Oh, I probably also broke the IRC logger. Sorry, but had to test it.

1627162726
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
Nevermind, the IRC logger still works.

1627162811
rkallos!sid506578@id-506578.tooting.irccloud.com
I use emacs

1627163891
ifreund!~ifreund@user/ifreund
Daimanta: I use kakoune with zls. If you aren't using zls yet I'd definitely recommend it

1627163911
ifreund!~ifreund@user/ifreund
https://github.com/zigtools/zls

1627164088
Daimanta!~Daimanta@86-85-205-212.fixed.kpn.net
cool, I might look into that

1627168529
andrewrk!~andrewrk@mail.ziglang.org
ifreund, how's kakoune? did you use vim before?

1627168614
ifreund!~ifreund@user/ifreund
andrewrk: yep, I switched from vim and have been very happy with kakoune. It's much more intuitive and interactive than vim was in my experience

1627168625
andrewrk!~andrewrk@mail.ziglang.org
neat, I'll have to give it a shot

1627168638
ifreund!~ifreund@user/ifreund
less state that you need to keep in your head, especially when doing stuff you'd use macros for in vim

1627168722
ifreund!~ifreund@user/ifreund
wow va_list is full of footguns

1627168741
ifreund!~ifreund@user/ifreund
apparently I have to use va_copy if I want to use it more than once

1627168785
shachaf!~shachaf@user/shachaf
I switched from vim to kakoune and there are a lot of nice things about it.

1627168814
shachaf!~shachaf@user/shachaf
The scripting model is the main frustrating thing.

1627168834
ifreund!~ifreund@user/ifreund
eh, I think I still prefer it to vimscript

1627168838
ifreund!~ifreund@user/ifreund
but it is definitely weird

1627168844
shachaf!~shachaf@user/shachaf
I assume ifreund is the reason .zig files have highlighting and everything.

1627168881
ifreund!~ifreund@user/ifreund
yeah I'm the one who got that stuff merged into kakoune, though there were some less complete versions floating around before I did that :)

1627169121
ifreund!~ifreund@user/ifreund
So there's my workaround for zig not really supporting va_args yet: https://0x0.st/-WPT.c

1627169199
ifreund!~ifreund@user/ifreund
(ignore the debug fprintf()/fflush())

1627169519
shachaf!~shachaf@user/shachaf
Man, the wlroots API requires a va_list?

1627169545
ifreund!~ifreund@user/ifreund
for registering a custom loggin callback, yes

1627169549
shachaf!~shachaf@user/shachaf
I guess this isn't strictly Wayland itself, but still.

1627169575
ifreund!~ifreund@user/ifreund
no, this is just generic C library-ness :D

1627169780
ifreund!~ifreund@user/ifreund
hmm, does std.build not have a nice way to sync the optimization level of the C code that's part of my project with the zig build mode?

1627170112
companion_cube!~simon@user/companion-cube
Is kakoune scriptable at all? Is it snappy? 

1627170193
ifreund!~ifreund@user/ifreund
companion_cube: it's very scriptable, just in a rather unique way

1627170204
ifreund!~ifreund@user/ifreund
I've never had any performance issues

1627170224
companion_cube!~simon@user/companion-cube
So they didn't go the lua way? 

1627170234
ifreund!~ifreund@user/ifreund
no

1627170253
companion_cube!~simon@user/companion-cube
By performance I mean showing updates when you press keys :) 

1627170255
companion_cube!~simon@user/companion-cube
But cool

1627170261
companion_cube!~simon@user/companion-cube
Should try it 

