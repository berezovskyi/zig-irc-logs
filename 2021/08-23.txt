1629707437
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Out of curiousity, what is the bootstrapping plan once stage2 is finished? will stage1 stick around for the forseeable future or will boostrapping require a working stage2 compiler (on a possibly different platform)?

1629708026
ifreund!~ifreund@user/ifreund
Ayo: see this issue: https://github.com/ziglang/zig/issues/6378

1629708251
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Thanks

1629708330
Ayo!~Ayo@82-73-204-210.cable.dynamic.v4.ziggo.nl
Generating a boostrapping compiler and then manually maintaining it, interesting approach, but should indeed work fine if the language remains stable

1629708365
ifreund!~ifreund@user/ifreund
not set in stone yet of course, but that's the current plan

1629719742
ikskuh!~xq@2a0d:5940:6:163::ad7e
test

1629719904
ifreund!~ifreund@user/ifreund
ikskuh: ol

1629719914
ifreund!~ifreund@user/ifreund
s/l/7/   got it worked out then?

1629720038
ikskuh!~xq@2a0d:5940:6:163::ad7e
i ... reconnected and got another server

1629720262
ikskuh!~xq@2a0d:5940:6:163::ad7e
no idea what the problem was

1629722610
mikko!~mikko@2a02:7b40:d418:6a61::1
what's the reasoning behind std.os.getcwd vs std.fs.cwd ? why are these very similar functions under different namespaces

1629722626
mikko!~mikko@2a02:7b40:d418:6a61::1
reading a file in this language has turned out to be quite the rabbit hole :D

1629722762
ifreund!~ifreund@user/ifreund
mikko: std.os.getcwd() kinda maps to the libc getcwd() function and returns a path

1629722783
ifreund!~ifreund@user/ifreund
std.fs.cwd() returns the fd for the working directory

1629722796
ifreund!~ifreund@user/ifreund
which is known at compile time on posix systems

1629722819
ifreund!~ifreund@user/ifreund
anyhow in general std.fs is supposed to be the cross-platform filesystem abstraction

1629722858
cepheus!~cepheus@user/cepheus
And even on Windows the handle of the current working dir is available to the current process without needing to open it manually

1629722864
mikko!~mikko@2a02:7b40:d418:6a61::1
is getcwd not cross-platform then?

1629722877
cepheus!~cepheus@user/cepheus
(and consequently, without allocating or providing a scratch buffer for the path)

1629722878
ifreund!~ifreund@user/ifreund
mikko: no

1629722899
ifreund!~ifreund@user/ifreund
std.os is mess, it's mostly linux/posix syscall wrappers

1629722908
ifreund!~ifreund@user/ifreund
but with occasion shims for windows or wasm

1629722935
ifreund!~ifreund@user/ifreund
the std os abstraction needs some serious reorganization, but that isn't a priority until the language and compiler are stable

1629722979
cepheus!~cepheus@user/cepheus
per std.os getcwd is implemented for windows with a shim

1629723006
cepheus!~cepheus@user/cepheus
but it's worth pointing out that such abstractions are massively more expensive on windows

1629723006
mikko!~mikko@2a02:7b40:d418:6a61::1
so i'm probably best off not learning too much about os at this point in time

1629723031
mikko!~mikko@2a02:7b40:d418:6a61::1
i'm just trying to read some files so i can do some exercises at this point

1629723050
ifreund!~ifreund@user/ifreund
std.fs should have everything you need for that

1629723076
cepheus!~cepheus@user/cepheus
directory handles are almost always more useful than paths anyway

1629723083
cepheus!~cepheus@user/cepheus
for actual file operations, at least

1629723123
ifreund!~ifreund@user/ifreund
(fwiw, the current "cross platform" way to get the cwd path as a string is in std.process)

1629723140
ifreund!~ifreund@user/ifreund
not that it does anything other than call std.os.getcwd()...

1629723173
mikko!~mikko@2a02:7b40:d418:6a61::1
cepheus: yeah, until the file you expected to have doesn't exist and you don't know which directory you are in (which is what happened to me)

1629723219
cepheus!~cepheus@user/cepheus
that's why i left myself some wiggle room with "almost", heh

1629723383
cepheus!~cepheus@user/cepheus
i actually gotcha'd myself with the path ops penalties on windows, i alloc'd a small buffer to handle getting argv for a c lib and forgot that windows needs significant amounts of scratch space to do unicode conversion, the end result being it crashed immediately on windows

1629731822
mikko!~mikko@2a02:7b40:d418:6a61::1
is there a way to give simpler names to complicated types? for example i'm using [MAX_LINES][MAX_LINE_LENGTH]u8 many times in my code and that's quite a lot of typing every time i want to create a function that handles it

1629731901
ikskuh!~xq@2a0d:5940:6:163::ad7e
const Alias = [MAX_LINES][MAX_LINE_LENGTH]u8;

1629731944
mikko!~mikko@2a02:7b40:d418:6a61::1
oh it's that simple, thanks!

1629731966
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
mikko thoughts on zig so far?

1629732055
mikko!~mikko@2a02:7b40:d418:6a61::1
mixed feelings, i like parts of it but also it's really hard to get simple stuff working

1629732078
ikskuh!~xq@2a0d:5940:6:163::ad7e
what do you consider "simple stuff"?

1629732138
mikko!~mikko@2a02:7b40:d418:6a61::1
well i was trying to create an array of strings and i ended up having to write explicit loops to set each character for each string

1629732160
mikko!~mikko@2a02:7b40:d418:6a61::1
and having to keep track of where the strings end myself

1629732181
ikskuh!~xq@2a0d:5940:6:163::ad7e
huh

1629732190
ikskuh!~xq@2a0d:5940:6:163::ad7e
that sounds like you're missing out on some parts

1629732202
ikskuh!~xq@2a0d:5940:6:163::ad7e
std.mem.cpy(u8, dst, src) is real

1629732215
ikskuh!~xq@2a0d:5940:6:163::ad7e
if you have only constant strings:

1629732236
ikskuh!~xq@2a0d:5940:6:163::ad7e
const array = [_][]const { "hello", "mikki", "is", "this", "what", "you", "want?" };

1629732245
ikskuh!~xq@2a0d:5940:6:163::ad7e
*mikko, sorry

1629732284
mikko!~mikko@2a02:7b40:d418:6a61::1
is std.mem.cpy different than std.mem.copy? i think i was using std.mem.copy but i got like 10 different errors trying different way to use it and gave up eventually

1629732291
ikskuh!~xq@2a0d:5940:6:163::ad7e
oh, it's maybe also copy

1629732302
ikskuh!~xq@2a0d:5940:6:163::ad7e
can you share your code

1629732304
ikskuh!~xq@2a0d:5940:6:163::ad7e
?

1629732359
mikko!~mikko@2a02:7b40:d418:6a61::1
sure - it's not much yet though https://hastebin.com/ajicamoloq.zig

1629732435
ikskuh!~xq@2a0d:5940:6:163::ad7e
you might use an allocator there

1629732621
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
mikko https://hastebin.com/sozifusako.php ?

1629732665
mikko!~mikko@2a02:7b40:d418:6a61::1
haze: thanks, i think the & was what i was missing

1629732688
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
ah yeah, the copy function requires the use of slices

1629732707
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
even when you index into grid you get an array back. so you just need to & it (or arr[0..]) to get the slice

1629732795
ikskuh!~xq@2a0d:5940:6:163::ad7e
mikko: my variant: https://zigbin.io/6e0f75

1629732968
mikko!~mikko@2a02:7b40:d418:6a61::1
hmm i think i understand what it's doing but i have no chance of writing all that allocator stuff correct myself xD

1629733022
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
the pattern is pretty simple, create, alloc, delete, free

1629733028
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
destroy*

1629733059
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
use errdefer if theres a case in your code when an error can happen so you free even if something goes awry, and defer for when you want something t o eexecute at the end of scope always

1629733097
mikko!~mikko@2a02:7b40:d418:6a61::1
is there a downside to always writing errdefer?

1629733109
ikskuh!~xq@2a0d:5940:6:163::ad7e
nope

1629733110
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
if an error does not occur then the code wont be ran 

1629733114
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
* i lied

1629733129
ikskuh!~xq@2a0d:5940:6:163::ad7e
errdefer won't be run if no errors happens

1629733143
ikskuh!~xq@2a0d:5940:6:163::ad7e
so when you want to free resources always (because you need them only temporary), errdefer would be wrong

1629733150
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
i think there are two because errdefer is for errors and the end of a function w/ something like try, but defer is any scope

1629733152
mikko!~mikko@2a02:7b40:d418:6a61::1
oh so you need both

1629733363
ikskuh!~xq@2a0d:5940:6:163::ad7e
mikko: example for "defer"

1629733374
ikskuh!~xq@2a0d:5940:6:163::ad7e
{ var held = mutex.lock(); defer held.release(); .... }

1629733383
ikskuh!~xq@2a0d:5940:6:163::ad7e
errdefer would never unlock the mutex

1629734591
marler8997!~marler899@204.229.3.4
7> does the "Windows Zig Compiler Dev Kit" get tested in CI?  if not would it be possible to add it?

1629734741
marler8997!~marler899@204.229.3.4
one thing I've learned over the years, "if it's not tested, then it will break"

1629736783
mikko!~mikko@2a02:7b40:d418:6a61::1
how do i get around this error: expected type '[]const u8', found '[128]u8'

1629737445
marler8997!~marler899@204.229.3.4
you're probably missing and '&' before the array you're passing

1629737669
mikko!~mikko@2a02:7b40:d418:6a61::1
hmm maybe, but now i get even more errors :D

1629737673
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
post them

1629737845
mikko!~mikko@2a02:7b40:d418:6a61::1
i think i figured it out

1629739256
haze!~haze@cpe-68-174-134-17.nyc.res.rr.com
good job!

1629740298
andrewrk!~andrewrk@mail.ziglang.org
marler8997, that's a great idea

1629740422
marler8997!~marler899@204.229.3.4
I'd be willing to get it added but I might need a little guidance

1629740514
andrewrk!~andrewrk@mail.ziglang.org
I think the next step is automating the process of creating the dev kit. I had to do some tweaks last time by hand

1629753351
marler8997!~marler899@204.229.3.4
ok cool, should I just create a new repo that would create the devkit, or is there any existing too/script/repo where we would create it?

1629754214
andrewrk!~andrewrk@mail.ziglang.org
it's based on https://github.com/ziglang/zig-bootstrap and then the manual tweak is that I rename the .a files to .lib

1629754237
andrewrk!~andrewrk@mail.ziglang.org
oh and merge the two prefixes together (the one with zig, and the one with LLVM/clang/lld)

1629755236
andrewrk!~andrewrk@mail.ziglang.org
Language specs notification: I'm pushing a commit to master branch that changes `@intToEnum` to accept any integer type for the integer operand rather than coercing to the enum integer tag type. Effectively, this means that `@intToEnum` implicitly does an `@intCast` to the enum tag type. I expect this to be non-breaking, and many callsites could be cleaned up if they have an `@intCast` in the expression, possibly also with a comment cursing at the 

1629755236
andrewrk!~andrewrk@mail.ziglang.org
compiler for not doing this automatically (which it will now do).

1629757914
andrewrk!~andrewrk@mail.ziglang.org
marler8997, do you really have a zig program with 2 years of uptime?

1629761507
marler8997!~marler899@204.229.3.4
andrewrk, we've had a couple power outages over the last couple years, but that's been the only downtime

1629761517
andrewrk!~andrewrk@mail.ziglang.org
interesting

1629761528
marler8997!~marler899@204.229.3.4
I used some interesting techniques

1629761696
marler8997!~marler899@204.229.3.4
zig errors really helped

1629761893
andrewrk!~andrewrk@mail.ziglang.org
that's a pretty cool story

1629761907
andrewrk!~andrewrk@mail.ziglang.org
too bad about those power outages

1629761944
marler8997!~marler899@204.229.3.4
yeah would be cool to say it's actually been running for 2 years straight

