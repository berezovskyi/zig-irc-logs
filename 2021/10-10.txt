1633824002
noracodes!~quassel@2604:a880:2:d0::2299:a001
Neat!

1633824076
Tekk!~tekk@2607:9000:0:62::a03e
Could be a fun little project even.

1633824136
Tekk!~tekk@2607:9000:0:62::a03e
Ah, and to try and anticipate another thing, there's no official package manager. There are a few you can dig up if you're so inclined though.

1633825953
Tekk!~tekk@2607:9000:0:62::a03e
Ah, maybe not a fun little project. https clients are still a bit annoying to write.

1633827189
torque!~tachyon@user/torque
noracodes: https://github.com/marler8997/zigup

1633827197
torque!~tachyon@user/torque
I don't know what state it's currently in, though

1633828581
noracodes!~quassel@2604:a880:2:d0::2299:a001
neat, thank you torque!

1633829819
nemith!~bbennett@coachz.brbe.net
rustup is one of the parts about rust i lothe the most and the fact that tooling starts assuming it's existance

1633829835
nemith!~bbennett@coachz.brbe.net
tarball in /opt works great and is easy

1633871171
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
is there some special syntax for defining a struct as a C packed struct? I was thinking 'extern packed' or something like that but it doesn't work

1633871518
supakeen!~user@python/site-packages/supakeen
`struct __attribute__((__packed__))`

1633872057
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
this is Zig syntax?

1633872102
errantmind!~errantmin@45-31-114-119.lightspeed.hstntx.sbcglobal.net
i meant for compatibility with ABI

1633872234
supakeen!~user@python/site-packages/supakeen
errr, wrong channel :)

1633872924
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
Well, you could use the C definition and @cImport or translate-c. I'm curious though, what is different about the way C packs vs the way zig does? I have yet to run into a case where I needed to do anything special to interact with C regarding packed structs.

1633878242
Tekk!~tekk@2607:9000:0:62::a03e
tgschultz, fron the naming, I assume that the "extern" format is "Leave structs exactly as you declare them save any padding clang would do"

1633878254
Tekk!~tekk@2607:9000:0:62::a03e
Where packed format is, well, packed. No padding needed.

1633878274
Tekk!~tekk@2607:9000:0:62::a03e
But you have no control over the order, save that it's always consistent

1633878376
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
in zig packed is guaranteed order

1633878413
Tekk!~tekk@2607:9000:0:62::a03e
Yes. It's going to order your fields such that they're packed.

1633878423
Tekk!~tekk@2607:9000:0:62::a03e
and presumably some heuristic after that, alphabetized perhaps.

1633878448
Tekk!~tekk@2607:9000:0:62::a03e
Packing doesn't matter *as* much on x86, but it does help performance and memory usage.

1633878462
Tekk!~tekk@2607:9000:0:62::a03e
It's just not one of those arches which will throw a fault if you access a non-aligned address :p

1633879243
tgschultz!~UserNick@047-034-058-084.res.spectrum.com
I feel like I'm just not understanding what you're saying. Zig packed struct fields are exaclty in the order specified by definition.

1633879717
ifreund!~ifreund@user/ifreund
^^^

1633879996
Tekk!~tekk@2607:9000:0:62::a03e
Oh, I just had to read over packed structs like 3 more times for that to click.

1633880022
Tekk!~tekk@2607:9000:0:62::a03e
Packed structs are packed (in the not-padded sense) but not packed (in the C sense) :D

1633880027
Tekk!~tekk@2607:9000:0:62::a03e
Got it

1633880925
ifreund!~ifreund@user/ifreund
Tekk: regular structs in zig may have the fields reordered (i.e. sorted by alignment) to be "packed in the C sense"

1633880954
ifreund!~ifreund@user/ifreund
they still may have padding though depending on the size/alignment of the fields

1633904101
cursey!~cursey@user/cursey
are optional types pointers?

1633907071
jcmoyer!~jcmoyer@user/jcmoyer
cursey: they are pointers if the child type is a pointer, e.g. ?*T, otherwise they're more like tagged unions

1633907104
jcmoyer!~jcmoyer@user/jcmoyer
?i32 might be struct { value: i32, is_null: bool } for instance

1633907552
cursey!~cursey@user/cursey
k, makes sense. so is the type ?*?[*:0]u16 for instance (which prompted this question) equivalent to a unsigned short** in C?

