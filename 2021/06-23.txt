1624406538
andrewrk!~andrewrk@mail.ziglang.org
oof hitting unused local variables in run-translated-c tests

1624406620
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
now thats an interesting use case

1624406859
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
to fix that syntax test, should I add volatile, or add an output?

1624406866
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
im leaning towards adding volatile

1624407320
andrewrk!~andrewrk@mail.ziglang.org
that should be fine

1624407362
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
cool

1624407814
andrewrk!~andrewrk@mail.ziglang.org
damn now I know how you felt g-w1 :P

1624407821
andrewrk!~andrewrk@mail.ziglang.org
I didn't expect to have to work on translate-c 

1624407847
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
are you making it insert _ = ?

1624407858
andrewrk!~andrewrk@mail.ziglang.org
it should track used I think

1624407865
andrewrk!~andrewrk@mail.ziglang.org
I probably won't start that work today

1624407909
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
i see, will it be an error to include c code that has unused vars? or just make translate-c smartly insert _ =?

1624407913
andrewrk!~andrewrk@mail.ziglang.org
I meant, it should track which vars are used and only insert _ = foo if necessary

1624407932
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
that makes the most sense, as c allows unused vars

1624407936
andrewrk!~andrewrk@mail.ziglang.org
the design requirements of translate-c are that if it is valid C then it translates to valid zig

1624408054
andrewrk!~andrewrk@mail.ziglang.org
you can really get a sense of how much faster stage2 is than stage1 with the Perf section of https://github.com/ziglang/zig/pull/9191

1624408115
andrewrk!~andrewrk@mail.ziglang.org
adding the first 3 pipeline steps of stage2 (tokenize,parse,astgen) *on top of* stage1 results in nearly imperceptible changes in wall clock time and peak memory used

1624408129
andrewrk!~andrewrk@mail.ziglang.org
for the std lib tests, cold cache

1624412957
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ikskuh: I did more investigating about the unused fn param stuff in go, and people have asked about it, and the reasoning for it is basically what you said

1624412979
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
so theres probably not one right answer

1624414546
kprotty[m]!~kprotty@2001:470:69fc:105::834
anyone know if arm cpi is ok here? It feels like its been stuck on this task for a while https://cloud.drone.io/ziglang/zig/10745

1624415205
andrewrk!~andrewrk@mail.ziglang.org
it got stuck for a long time yesterday too but I guess it eventually completed the tasks

1624415846
noam!~noam@104.232.42.247
I think the bigger problem is the increase in peak RAM requirements, not the speed...

1624415873
noam!~noam@104.232.42.247
stage1 is already *brutal* in that respect, this just exacerbates it further (by a measly 1%, but still...)

1624415894
noam!~noam@104.232.42.247
but yeah, the speed of stage2 vs stage1 is quite nice

1624416555
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: working on https://github.com/ziglang/zig/issues/9206, do you know where anytype in         const field_type: Zir.Inst.Ref = if (node_tags[member.ast.type_expr] == .@"anytype") is defined

1624416622
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
oh wait ðŸ¤¦ nvm

1624416624
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its just a token

1624416659
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ok, should have a fix in a few mins

1624416960
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
https://github.com/ziglang/zig/pull/9207

1624417754
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
huh, this makes stage2 compile errors need to line up exactly with stage1's

1624417766
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
goodnight!

1624421959
noam!~noam@104.232.42.247
It's kinda weird to me that `const foo: fn()void = {};` isn't allowed, even though I know exactly why that's the case and agree with it...

1624421989
noam!~noam@104.232.42.247
well, that's a bad way to put it

1624422004
noam!~noam@104.232.42.247
It's weird to me that, with functions as expressions (that is, post-1717), the type is still required to annotate the value

1624422004
siraben!~siraben@user/siraben
noam: why is it not allowed?

1624422094
noam!~noam@104.232.42.247
siraben: because a fnexpr is defined to always start with a fnproto (function type, basically)

1624422102
noam!~noam@104.232.42.247
That is, {} isn't a function, but fn()void{} is

1624422118
noam!~noam@104.232.42.247
so, since {} isn't a function, const foo = {}; isn't allowed *syntactically*

1624422137
noam!~noam@104.232.42.247
Whereas const foo = fn()void {}; is, because fn()void{} is a valid expression

1624422168
noam!~noam@104.232.42.247
The part I find a bit weird is just that - a fnexpr MUST begin with an fnproto

1624422183
noam!~noam@104.232.42.247
This isn't consistent with anything that isn't a function, IMO

1624422198
noam!~noam@104.232.42.247
While 1717 is definitely a major improvement over status quo, it's not sufficient IMO

1624422205
noam!~noam@104.232.42.247
Not for full consistency, at leasst

1624422207
noam!~noam@104.232.42.247
least*

1624422226
noam!~noam@104.232.42.247
https://github.com/ziglang/zig/issues/1717

1624422229
noam!~noam@104.232.42.247
See the early examples with branching

1624422236
noam!~noam@104.232.42.247
const foo = if(x) fn()void{} else fn()void {};

1624422238
noam!~noam@104.232.42.247
That's valid

1624422249
siraben!~siraben@user/siraben
hm, then `const foo: fn()void = {}` being disallowed seems resonable, if {} is not a function

1624422251
noam!~noam@104.232.42.247
`const foo: fn()void = if(x) {} else {}` is not, but of course

1624422260
siraben!~siraben@user/siraben
reasonable*

1624422265
noam!~noam@104.232.42.247
siraben: what I find weird is that {} isn't a function

1624422280
siraben!~siraben@user/siraben
what kind of function would it be?

1624422281
noam!~noam@104.232.42.247
Or, rather, that blocks can't be implicitly used as functions

1624422286
noam!~noam@104.232.42.247
It would have no type

1624422288
noam!~noam@104.232.42.247
same as e.g. 3

1624422292
noam!~noam@104.232.42.247
it'd be a function literal, basically

1624422296
siraben!~siraben@user/siraben
3 has a type, no?

1624422296
noam!~noam@104.232.42.247
the type depends on context

1624422303
noam!~noam@104.232.42.247
Its type is comptime_int

1624422313
noam!~noam@104.232.42.247
a function literal's type would be a special fntype as well

1624422320
siraben!~siraben@user/siraben
fn()void {} is a reasonable function since it lists its formal parameters

1624422327
noam!~noam@104.232.42.247
I know

1624422328
siraben!~siraben@user/siraben
idk enough about Zig's grammar but {} seems ambigious

1624422332
noam!~noam@104.232.42.247
It is, 100%

1624422336
noam!~noam@104.232.42.247
`const foo: fn()void = if(x) {} else {}` is not, but of course

1624422338
noam!~noam@104.232.42.247
^ 

1624422341
siraben!~siraben@user/siraben
right

1624422351
noam!~noam@104.232.42.247
There's very clear, very good reasons for this to be the case

1624422358
noam!~noam@104.232.42.247
I'm not arguing that we *should* treat {} as functions

1624422384
noam!~noam@104.232.42.247
I just think that we require the full explicit type like that...

1624422390
noam!~noam@104.232.42.247
maybe e.g. fn{} ?

1624422412
noam!~noam@104.232.42.247
`fn` on its own becomes a special type, basically, which can decay to any single fn type

1624422422
noam!~noam@104.232.42.247
I just think it's weird that*

1624422437
noam!~noam@104.232.42.247
const foo = if(x) fn{} else fn{}; 

1624422439
noam!~noam@104.232.42.247
?

1624422449
noam!~noam@104.232.42.247
Basically, inferred function types

1624422461
siraben!~siraben@user/siraben
Hm.

1624422468
siraben!~siraben@user/siraben
This seems to be a syntactic tradeoff

1624422470
noam!~noam@104.232.42.247
Which is only really possible for zero-params, which is a different and *worse* inconsistency

1624422488
noam!~noam@104.232.42.247
because now the idiomatic way to define functions depends on the parameter count

1624422499
noam!~noam@104.232.42.247
making this change objectively worse

1624422518
noam!~noam@104.232.42.247
I'm not saying this is necessarily a problem which needs to be solved

1624422519
siraben!~siraben@user/siraben
function literals should be uniform in PLs

1624422528
noam!~noam@104.232.42.247
It's just a bit odd

1624422540
noam!~noam@104.232.42.247
It's the only kind of expression which requires a type prefix

1624422550
noam!~noam@104.232.42.247
I can't do e.g. `const foo = u8 3;

1624422565
noam!~noam@104.232.42.247
Not just the only one that requires, the only one that *allows*

1624422585
siraben!~siraben@user/siraben
what's the idiomatic way to create a closure in Zig?

1624422589
noam!~noam@104.232.42.247
Ah! I know how to explain it better

1624422604
noam!~noam@104.232.42.247
It's the only expression for which the type is treated as *part of the expression*

1624422617
noam!~noam@104.232.42.247
For e.g. a structure instance, the type is auxiliary

1624422621
siraben!~siraben@user/siraben
noam: I just realized that ML-style languages do not allow empty function params, rather the function would always take arguments (in the trivial case it would be the unit type ())

1624422621
noam!~noam@104.232.42.247
const foo: struct = .{}

1624422637
siraben!~siraben@user/siraben
e.g. const foo = fun () => 3;

1624422659
noam!~noam@104.232.42.247
A function *must* have a type and parameter info associated with it

1624422668
noam!~noam@104.232.42.247
But... maybe it doesn't have to be associated *at the value site*?

1624422683
noam!~noam@104.232.42.247
Problem is, that opens the door for some *really* awful practices

1624422706
noam!~noam@104.232.42.247
e.g. const foo: fn(bar: u8) void = if(x) @import("a").foo else @import("b").foo;

1624422746
noam!~noam@104.232.42.247
Unless it's constrained such that there can't be an intermediate value of type fn_lit?

1624422751
noam!~noam@104.232.42.247
But again, inconsistency

1624422848
siraben!~siraben@user/siraben
does Zig perform type inference?

1624423053
noam!~noam@104.232.42.247
Yes

1624423069
noam!~noam@104.232.42.247
It's why the type in a decl is optional

1624423096
noam!~noam@104.232.42.247
and why e.g. `const a: u8 = 4; const b = if(foo) a else 9;` works and results in b having a type of u8

1624423125
noam!~noam@104.232.42.247
4 is comptime_int, which implicitly casts to u8, so the first decl is valid. `if(condition)expr else expr` results in "peer type resolution"

1624423150
noam!~noam@104.232.42.247
Basically, since a there is u8, and 9 is comptime_int, the type of 9 is inferred to be u8, resulting in both sides of the branch having type u8

1624423167
noam!~noam@104.232.42.247
I'm... not 100% sure what happens if you do if(foo)a else 256 there

1624423170
noam!~noam@104.232.42.247
Nor what *should* happen

1624423199
noam!~noam@104.232.42.247
u8 can't be cast to comptime_int, so the only path that makes sense to me is that 256 would be treated as u8, which is illegal, and thus a compiler error

1624423311
noam!~noam@104.232.42.247
Been a while since I did anything major with Zig, so I'm blanking on if implicit upcasting is allowed (that is, casting from a lower precision to a higher precision with the same signedness); if so, both u8 and comptime_int would be able to implicitly cast to e.g. u9, so the type being u9 would make sense. For sanity's sake, though, I'd have to assume that peer type resolution wouldn't allow that,

1624423313
noam!~noam@104.232.42.247
because that would be awful :P

1624423426
noam!~noam@104.232.42.247
tl;dr: yes.

1624423453
noam!~noam@104.232.42.247
The problem is, while it's inconsistent now, every approach I can think of makes the situation *worse*

1624423473
siraben!~siraben@user/siraben
hmm, interesting, I wonder what a formal type system for Zig would look like

1624423488
noam!~noam@104.232.42.247
Hmm, though... lazy analysis could actually make this feasible

1624423498
siraben!~siraben@user/siraben
lazy analysis?

1624423527
noam!~noam@104.232.42.247
basically, if you have `const a = 3;` and nothing ever references it, it's as if that declaration doesn't exist

1624423530
noam!~noam@104.232.42.247
const a = fn{}; <- if you call a directly, that's illegal

1624423536
noam!~noam@104.232.42.247
because you can only call a function of complete type

1624423579
siraben!~siraben@user/siraben
regardless if nothing ever references it, shouldn't `a` have a type anyway?

1624423585
noam!~noam@104.232.42.247
If you then do `const b: fn(foo: u8)void = a;` and call b, then you're calling a valid function - assuming a uses a parameter foo, etc

1624423605
noam!~noam@104.232.42.247
siraben: it'll have the type "fn_literal" or some such, which isn't a valid function for the purposes of "can I call this?"

1624423612
siraben!~siraben@user/siraben
I see

1624423615
noam!~noam@104.232.42.247
whereas b in this example is a fully typed function

1624423623
siraben!~siraben@user/siraben
bah, I have to drop off for now and join a meeting, ttyl

1624423629
noam!~noam@104.232.42.247
Problem is, again, divorcing param names from declsite is Bad

1624423640
noam!~noam@104.232.42.247
I'm not sure consistency is worth that

1624423651
noam!~noam@104.232.42.247
cya

1624423825
noam!~noam@104.232.42.247
I think there are ways to accomplish it, but not within the scope of Zig ::(

1624423827
noam!~noam@104.232.42.247
s/::/:/

1624441750
gmacd!~gmacd3@82-132-227-8.dab.02.net
I'd like to create an object file from a binary object, and link it using zig.  Ordinarily, it would look like `ld -r -b binary -o font.o font.psf`.  What's currently the best way to do that in build.zig?

1624441826
gmacd!~gmacd3@82-132-227-8.dab.02.net
I suspect I could call ld from build.zig, then use addObjectFile, but interested in alternatives

1624454782
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
is it possible to generate test cases using inline for? I have a folder with text files describing test cases and I want to load it at compile time and generate a test case for each file

1624454851
ifreund!~ifreund@user/ifreund
flyx[m]: you can't interact with the filesystem or many any other syscalls at comptime, so no

1624454869
ifreund!~ifreund@user/ifreund
you could however add a step in your build.zig that implements something like that

1624454875
flyx[m]!~flyxflyxo@2a03:4000:27:3a6::1
ah, bummer. on to code generation then

1624454881
ifreund!~ifreund@user/ifreund
yep

1624455962
rwb!~augh@theguntretort.com
err https://en.wikipedia.org/wiki/List_of_computing_mascots#/media/File:Ziggy_the_Ziguana.svg

1624456219
ifreund!~ifreund@user/ifreund
rwb: I think wikipedia's svg rendering is borked

1624456227
ifreund!~ifreund@user/ifreund
open the file directly in your browser

1624456234
ifreund!~ifreund@user/ifreund
https://upload.wikimedia.org/wikipedia/commons/f/fc/Ziggy_the_Ziguana.svg

1624456286
rwb!~augh@theguntretort.com
rip

1624456292
rwb!~augh@theguntretort.com
thanks, however

1624456297
rwb!~augh@theguntretort.com
might be cool notifying them

1624459307
kiedtl!~kiedtl@kisslinux/kiedtl
Can you use the 'if (foo) |val|' pattern on an error union? If not, is such a feature planned/acceptable?

1624459325
kiedtl!~kiedtl@kisslinux/kiedtl
okay, apparently you can't use that pattern...

1624459380
ifreund!~ifreund@user/ifreund
kiedtl: you can

1624459413
ifreund!~ifreund@user/ifreund
you need to capture the error on the else branch though: if (error_union) |value| { ... } else |err| { ... }

1624459697
kiedtl!~kiedtl@kisslinux/kiedtl
Oh, oh, I see, thanks

1624467495
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
andrewrk: not sure if you saw as i had to change branches, but https://github.com/ziglang/zig/pull/9211 partly unblocks 9191 

1624467856
andrewrk!~andrewrk@mail.ziglang.org
thanks!

1624468186
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
could you close this https://github.com/ziglang/zig/issues/9206 ? Github was being really weird

1624468382
andrewrk!~andrewrk@mail.ziglang.org
not until it lands in master

1624468390
andrewrk!~andrewrk@mail.ziglang.org
issues are synced to master branch

1624468441
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
ah, that makes sense

1624471468
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
the return type of @setRuntimeSafety is void?

1624471524
andrewrk!~andrewrk@mail.ziglang.org
either that or it is considered a statement and cannot be used in an expression

1624471532
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
lemme check

1624471581
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
its void. i'll make a pr to update the docs

1624471610
g-w1!~g-w1@pool-96-232-174-225.nycmny.fios.verizon.net
(implementing it in stage2 rn)

1624486285
andrewrk!~andrewrk@mail.ziglang.org
Please be advised that #9191 was just merged which means **all Zig code is now subject to the ast-check compile errors of the self-hosted compiler**, including the new "unused variable" error.

1624486326
andrewrk!~andrewrk@mail.ziglang.org
In summary there is a lot of breakage that just happened, but the upshot is that it's a small step to preparing your code to work under the self-hosted compiler.

1624490937
jcmoyer!~jcmoyer@user/jcmoyer
hmmm, vscode doesn't want to immediately navigate to errors on alt+click anymore

1624490989
jcmoyer!~jcmoyer@user/jcmoyer
it opens a window like http_service.zig:75:17 and I have to press enter to actually go to the error, I guess error message format changed or something?

1624491733
andrewrk!~andrewrk@mail.ziglang.org
mmmm not sure what's going on there

1624491874
jcmoyer!~jcmoyer@user/jcmoyer
ah, it seems to be related to relative filenames

1624491957
jcmoyer!~jcmoyer@user/jcmoyer
if I alt+click d:\main.zig:30 it goes to the file immediately, if I do the same for main.zig:30 it looks for all main.zigs in my workspace and asks me which one I want

1624492289
andrewrk!~andrewrk@mail.ziglang.org
mmm that's interesting

1624492373
jcmoyer!~jcmoyer@user/jcmoyer
this also works correctly: .\src\main.zig:331:67

1624492406
jcmoyer!~jcmoyer@user/jcmoyer
I guess it's just the ast-check errors that have different path formatting

1624492459
jcmoyer!~jcmoyer@user/jcmoyer
once I eliminated all those I got old style paths back

