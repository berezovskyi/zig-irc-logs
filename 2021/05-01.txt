1619830739
theCow61
im pulling my hair out rn

1619830744
theCow61
im new

1619830752
theCow61
and for some reason i cant do this

1619830769
theCow61
enum([]const u8) doesnt work

1619830820
theCow61
i can use u8 and stuff to do characters like 'd' but i want my fields in my enum to default to strings not characters

1619830974
oats
theCow61: unfortunately enums don't work like that

1619831049
theCow61
wdym

1619831064
oats
You must use numeric types afaik

1619831085
theCow61
would i have to have it as u8 then do a if statement for each field to have it output a certain way

1619831095
oats
However, you might be interested in the built-in @tagName function

1619831096
andrewrk
theCow61, can I see some pseudocode of what you're trying to do?

1619831108
theCow61
yea

1619831117
oats
theCow61:

1619831117
theCow61
d

1619831132
andrewrk
oats, pro tip if you click the other link it links to the header itself rather than the toc

1619831140
oats
Oops, thanks

1619831168
theCow61
const Genders = enum([]const u8) { male = "male", female = "female };

1619831217
theCow61
when printing out the variable like print("I am a {}", .{Genders.male}); I want it to say male not 'm'

1619831578
oats
in this case, leave out the ([]const u8) and do print("I am a {}", .{@tagName(Genders.male)});

1619831593
oats
theCow61, I believe that will do what you want here

1619831612
oats
oh and ditch the strings in the enum

1619831655
oats
theCow61,

1619831657
theCow61
tagName?

1619831660
theCow61
that sounds handy

1619831666
oats
compiler built-in

1619831686
theCow61
im gonna go eat will brb

1619831688
theCow61
thanks for help

1619831691
oats
ye

1619831929
andrewrk
might want to make Gender a non-exhaustive enum ;)

1619832189
oats
Truuuuu

1619832268
fengb
Iâ€™ve had a cursed thought of making non-exhaustive enums where the value is a [*:0]const u8

1619833980
theCow61
whats a non-exhaustive enum

1619834019
theCow61
and why wud i make gender non exhaustive enum,

1619834136
plumm


1619834313
theCow61
why would i want this in my Gender enum

1619839817
oats
have fun counting genders bucko

1619866903
samtebbs
Hi all. Has anyone experienced a "mach-o/compact_unwind_encoding.h: No such file or directory" error when trying to build lld for zig?

1619866932
samtebbs
The file doesn#t even exist in the downloaded source or the llvm-project github repo

1619867347
mikdusan1
it exists in the monorepo

1619867850
mikdusan
I think what happened was lld introduced a header-only dep on libunwind and in monorepo this isn't a problem because that header exists and is found

1619868920
samtebbs
Hmm even when building the monorepo instead of the downloaded source I get the error...

1619869086
samtebbs
Ok, symlinking lld/MachO/mach-o to libunwind/include/mach-o did the trick

1619885299
oats
anybody know if justinbalexander/vegecode ever hangs out in here?

1619885314
hiljusti
Has anyone created daemons in Zig? Curious if I can find some example code for that. I have an idea for an experimental database implementation and have been considering Zig over some other compiled languages

1619885413
oats
hiljusti, "daemons" are a very broad category, do you just mean a long-running program?

1619885427
oats
or is there some specific feature you're looking for examples of

1619885436
Nypsie
oats, Not sure about IRC. But definitely seen him on Discord a few times. (He's pretty busy iirc, so isn't that active)

1619885450
oats
Nypsie, oh thanks for reminding me of the discord

1619885466
Nypsie
No problem

1619885469
hiljusti
Good point

1619885506
hiljusti
I guess I'm looking for something that can do LPC and some riff off of the fork/setid/fork song and dance.

1619885522
oats
lolol discord crashed my browser

1619885530
oats
excellent software

1619885544
Nypsie
oats: Just more proof of its quality /s

1619885618
hiljusti
LPC or a unix-style socket or server, or... whatever really (I can figure out that part, I think) just hoping to see an example of what it would look like in Zig

1619885665
hiljusti
I'm somewhere around hello-world level in my understanding of Zig (but also.... loving it!) so just kind of exploring my options

1619885859
Nypsie
I've written a small http server in Zig, I suppose that could fix that criteria

1619885869
Nypsie
s/fix/fit

1619885920
hiljusti
yeah i'd be interested in seeing that

1619885934
Nypsie


1619885972
Nypsie
Perhaps a more real project would be ifreund's Wayland compositor:

1619885996
hiljusti
Thanks! I'll take a look

1619889767
oats
is "pub inline fn" not a thing?

1619889786
oats
"error: expected function or variable declaration after pub"

1619889911
Nypsie
Its syntax was updated recently. It's now: `pub fn something() callconv(.Inline) void {}`

1619889927
Nypsie
You can also use the old syntax and then run `zig fmt` on the directory/file to auto-update it for you ;)

1619890127
oats
kewl!

1619890128
oats
thanks

1619890275
Nypsie
You're welcome :)

1619899479
kiedtl
Does Zig have tuples? There's only one mention of it in the docs

1619899515
noam
yes

1619899516
g-w1
a docs pr got merged very recently, check again :D

1619899564
kiedtl
Ah, I'm looking at the docs for 7.1, will check docs for master

1619903972
g-w1
is the only dependency on libclang for translate-c parsing stuff?

1619904039
andrewrk
g-w1, also for `zig cc` and `zig c++`

1619904232
g-w1
but if a self-hosted c parser was made (or std.c was fixed) could translate-c be fully self-hosted?

1619904443
andrewrk
yeah and vexu already did most of the work here:

1619904493
g-w1
oh nice

1619904505
g-w1
he is planning to integrate it?

1619904593
andrewrk
not sure what his plans are. I think he might be waiting for a bit more stability in stage2 backend first. I told him I'd support upstreaming it as an experimental C frontend if he wanted to

1619904627
g-w1
ahh, so it would also be a frontend, not just for translate-c. cool

1619904668
andrewrk
yeah it's a common pattern. for example gcc stands for gnu compiler collection, because it has a bunch of frontends and they all emit the same gcc IR code (GIMPLE) so they can share the backend

1619904735
andrewrk
same deal with llvm. C, C++, Objective-C all emit LLVM IR. Also I think there is a Fortran frontend now

1619904750
g-w1
would air have to have gotos? or would it be using some weird block stuff?

1619904773
andrewrk
AIR uses SSAT (Single Static Assignment Tree)

1619904785
andrewrk
it looks basically the same as ZIR but everything is typed

1619904812
g-w1
there are no gotos, which c has. to support c gotos would they have to be added to air, or would some block abuse be needed :)

1619904842
andrewrk
SSAT is capable of representing gotos just fine

1619904853
g-w1
what zir instruction would be needed?

1619904856
g-w1
*air

1619904890
andrewrk
no additional instructions are needed, they're all there already :)  either goto down or goto up. goto down is just breaking from a block. goto up is continuing a loop

1619904898
andrewrk
ez pz

1619904903
g-w1
thats what i thought :) thanks

1619904917
g-w1
that is also how translate-c will translate gotos right?

1619904935
andrewrk
there is one thing -c does support putting labels in an array and goto a label. that would require additional support I think.

1619904947
andrewrk
"computed goto"

1619904955
andrewrk
yeah it's the same problem.

1619904956
g-w1
could inline assembly do that?

1619904988
kiedtl
Are there basic high-order functions in the stdlib? (map, foldl, zip, &c)

1619905004
andrewrk
function pointers are generally discouraged

1619905021
kiedtl
Oh. Why is that?

1619905032
mq32
kiedtl: memory management

1619905034
mq32
usually

1619905056
andrewrk
makes your control flow confusing. plus if the function pointer is runtime known, then the compiler loses the ability to understand the complete call graph, which is useful for knowing how much stack space to allocate, which is especially important for async

1619905068
kiedtl
Hm. I see.

1619905103
andrewrk
that's not to say you can't do it. but if you're coming from rust or python, it's a bit of a different paradigm that zig encourages

1619905127
kiedtl
Yeah, FP has really grown on me.

1619905164
kiedtl
Oh noes, Zig has a rng stdlib module! Now I don't have a good reason to reinvent the wheel!

1619905183
andrewrk
oh yeah it's got a comfy API too

1619905249
mq32
kiedtl: zig is way more imperative than other languages, maybe except C

1619905255
mq32
even C++ nowadays is more functional

1619905259
kiedtl
Well, it doesn't have a `choose_weighted` function. Maybe I can reinvent the spokes of the wheel, then.

1619905286
kiedtl
mq32: Yeah, it's quite a disappointment for me, honestly :^)

1619905301
mq32
a good example is "map"

1619905332
mq32
mapping a string to "lower string" requires allocation which can fail, thus requires error handling, thus each single invocation of your map operation can fail

1619905345
mq32
so you need a recovery strategy for already mapped elements as these must now be freed

1619905372
kiedtl
Not if the user provides the destination buffer.

1619905387
mq32
for each element?

1619905433
kiedtl
Um, no?

1619905444
mq32
for all elements together?

1619905451
mq32
so i need to know the length of all strings beforehead?

1619905456
kiedtl
hmm well

1619905460
mq32
or where does this buffer come from?

1619905460
kiedtl
I see what you're saying

1619905471
kiedtl
mq32: anywhere, could be stack allocated

1619905489
mq32
no alloca ;)

1619905495
mq32
because stack overflow

1619905559
kiedtl
Oh dear, I don't think I explained what I was thinking very well

1619905573
kiedtl
I think I'll come up with a code snippet in a couple hours, gtg now

1619905580
mq32
o/

1619905598
kiedtl
cya

1619905894
g-w1
thinking about it more, arocc could just do some sort of "astgen" step and emit zir. it wouldn't even have to typecheck! then @cimport could be simplified by just emitting zir instead of zig. this way it wouldn't have to go c -> parse -> zig -> parse -> zir but instead c -> parse -> zir. ofc translate-c would still be needed in some cases.

1619905933
marler8997
is there a way to grep this irc channel?

1619905976
g-w1
theres a search feature here

1619906011
marler8997
I think it only works for one day?

1619906019
marler8997
I'm looking for something from months ago

1619906019
g-w1
my znc server captures logs so if you want them i can send them to you (been running since 2021-02-21.log)

1619906024
g-w1
it works for more than a day

1619906037
g-w1
not filter on top, but search on the left

1619906063
marler8997
feb not far back enough :(

1619906082
andrewrk
g-w1, I don't think either of those ideas would work. ZIR is coupled to zig syntax and semantic analysis of it follows zig rules. it would end up not correctly compiling the C code

1619906113
g-w1
can you give an example? so arocc would have to emit air?

1619906114
andrewrk
for translate-c, it is trying to output readable zig from typed C AST. the output of ZIR is AIR and converting AIR to ZIG would not result in readable zig

1619906159
g-w1
im saying also translate-c could go from c ast -> zig, but for efficiency, it could just use the zir (but its cached anyways so scratch that :P)

1619906276
andrewrk
my gut instinct is that a c frontend would want to perform semantic analysis directly on the C AST and emit AIR. Vexu can probably share some insight on this topic

1619906294
g-w1
ok cool

1619906327
g-w1
ah yea, all the casts would be really weird

1619906366
andrewrk
for an example, have a look at LazySrcLoc and the byteOffset function related to each tag

1619906428
g-w1
i remember :D, some are tied to builtins. it seems like air uses them too. src: Module.LazySrcLoc,

1619906454
marler8997
sorry to interrupt, but air?

1619906481
g-w1
also, can ir.zig be renamed to air.zig ? i instinctively tried to open air.zig :)

1619906486
g-w1
marler8997: analyzed ir

1619906495
marler8997
gotcha

1619906505
g-w1
an optimiser is an air conditioner

1619906514
marler8997
wow

1619906547
marler8997
the higher you turn on the air conditioner, the lower your cpu temps will be

1619906566
g-w1
maybe the other way around lol

1619906781
VFEXrt
qq: Using the std json parser is there a way to rekey the struct? i.e the struct has a field "some_key" but the json string has the key "somekey" From what I'm gathering, it looks like they have to be the exact same?

1619907072
mq32
no rekeying available i think

1619907123
VFEXrt
Dang, some people choose really gross formats for their json keys and I'd really like to not be stuck with them. Thanks!

1619907726
andrewrk
g-w1, yes I will do it shortly after merging the stage2-whole-file-astgen branch. I don't want to cause unnecessary conflicts with master branch PRs in the meantime

1619907741
g-w1
sounds good :)

1619907830
andrewrk
VFEXrt, you could have a struct that is for matching the json and another which has your preferred names and maybe some cleaned up data

1619907856
andrewrk
this would probably be a useful separation for trust reasons too; the json struct would be unvalidated but the other struct you could trust to have sound data

1619907893
VFEXrt
Yeah, makes sense. The allocation story there sounds a bit out of my (current and very new) understanding of zig

1619907967
VFEXrt
My initial guess would be to realloc all the []u8 types into the cleaned up struct?

1619907988
VFEXrt
Then parseFree the initial struct

1619908043
kiedtl
what's the function to add a source file to the build in build.zig?

1619908062
g-w1
what kind of source file ;)

1619908085
g-w1
in zig, you only need 1 source file, in c pub fn addCSourceFiles(self: *LibExeObjStep, files: []const []const u8, flags: []const []const u8) void {

1619908106
g-w1
or pub fn addCSourceFile(self: *LibExeObjStep, file: []const u8, flags: []const []const u8) void {

1619908184
kiedtl
Zig source :)

1619908200
kiedtl
I'm doing @import("foo") where foo is src/foo.zig, but it complains of not being able to find it

1619908212
g-w1
foo.zig

1619908241
g-w1
if you want to add a package in the build for some reason, use pub fn addPackage(self: *LibExeObjStep, package: Pkg) void {

1619908242
kiedtl
Oh, the file extension is necessary. thanks.

1619908255
g-w1
where Pkg is pub const Pkg = struct {name: []const u8, path: []const u8, dependencies: ?[]const Pkg = null,};

1619908272
g-w1
ok cool

1619908750
noam
If you're referencing a file, you need the extension; if you're referencing a package, the extension is verboten (unless the package's name includes it, which IMO shouldn't be allowed due to the ambiguity)

1619909024
VFEXrt
> json.zig:1473:24: error: evaluation exceeded 1000 backwards branches

1619909025
VFEXrt
Is there aÂ  max number of struct fields that the compiler can handle? Seems fine at 9 but I get this error at 10

1619909125
andrewrk
VFEXrt, look up @setEvalBranchQuota in the lang ref

1619909136
andrewrk
you can just bump that up to whatever you need

1619909138
VFEXrt
On it, thanks :)

1619909177
andrewrk
this is how zig solves the halting problem ;)

1619909212
mq32
cut the tape off!

1619909249
VFEXrt
Makes since, I suppose with all the comptime stuff its super easy to get the compiler to never exit

1619909341
VFEXrt
Swift's type checker has (had?) an issue where the type inference grew exponentially and certain matches would take years to resolve so they just timeout and say "hey could you help us out a bit by splitting this line up"

1619909513
kiedtl
Can you create a large zeroed matrix with the

1619909515
oats
hehe

1619909580
kiedtl
s/zeroed matrix/multi-dimensional matrix/

1619909701
andrewrk
kiedtl, yes you can

1619909790
kiedtl
Zig complains `[height][width]Foo literal, found [1][100]Foo literal'.

1619909818
kiedtl
Oh, wait, if I change the literal to '[_][width]Foo{...} ** height' it works.

