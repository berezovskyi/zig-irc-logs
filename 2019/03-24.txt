1553392371
gamester
This is what I get on my system (Ubuntu 18.10):

1553392848
andrewrk
gamester, what OS and what build mode?

1553392857
andrewrk
sorry, you just said ubuntu. but what build mode?

1553393110
gamester
andrewrk: build mode?

1553393139
andrewrk


1553393199
gamester
the pastebin is from me just running "zig test file.zig" so debug

1553393378
andrewrk
hmm that's interesting. I can't reproduce the problem. I just tried to do it on Ubuntu 18.04 from a clean install and I got a stack trace

1553393448
gamester
andrewrk: I'll try logging into some random Ubuntu 18.10 system and see if I can reproduce

1553393470
gamester
I mean from some host

1553394878
gamester
andrewrk: It works. I can't reproduce my problem.

1553395000
gamester
andrewrk: sorry, it also works for my with your pre-built binary

1553395019
andrewrk
gamester, no worries. I wonder what happened for you before

1553395022
gamester
It's only when I try to build from source myself that I get an issue

1553395027
andrewrk
hmmm

1553395046
andrewrk
that points to a possible difference in your system LLVM library

1553395069
andrewrk
and, in general, why we are going to have a zig package manager

1553403735
andrewrk
I just pushed an initial implementation of #683. I think this is going to be a popular change

1553430032
daurnimator
to give an opaque object methods, is wrapping the wrong approach?

1553438992
gamester
daurnimator: The @sizeOf opaque types is unknown. Everything would break down if the language supported storing opaque types. The 'self' parameter would have to be a pointer. You couldn't store the struct by value. Etc. To wrap you'll have to store a pointer to the Opaque.

1553443066
Barabas
Although I do like zig's build in test functionality I do find it hard to read the 'actual' code sometimes, because all the code used for testing is mixed in in the same file.

1553443181
daurnimator
Barabas: howso? the test blocks are quite well marked IMO...

1553443390
Barabas
Sometimes because the testing code is larger than the implementation and the implementation kinda drowns in the testing code.

1553443402
Barabas
Sometimes because there are helper functions for the tests.

1553443436
andrewrk
doc generation will help with this

1553443472
Barabas
Yes, definitely.

1553444712
daurnimator
andrewrk: saw your reply. is there a recommended solution for adding methods to an opaque struct?

1553444767
daurnimator
I guess wrap a pointer to it instead?

1553445010
andrewrk
There is no way to add methods to an opaque type

1553445024
andrewrk
What are you trying to do, big picture?

1553445125
daurnimator
andrewrk: thinking about writing "bindings" to existing C libraries

1553445158
daurnimator
andrewrk: they may only have an opaque struct, and I want to add methods to it in zig.

1553445212
andrewrk
Bindings aren't supposed to be necessary in Zig, and monkey patching is purposefully not allowed. You're fighting against the language in 2 ways

1553445266
daurnimator
andrewrk: why no bindings?

1553445367
andrewrk
Why bindings?

1553445368
daurnimator
when using e.g. lua from zig, I would be happy using bindings that allow: `myluastate.pushslice(myzigslice)` rather than the C equivalent: `lua_pushlstring(myluastate, myzigslice.ptr, myzigslice.len)`

1553445949
andrewrk
I recommend not trying to fight against the lua API

1553445954
andrewrk
Just use it

1553446029
andrewrk
Zig code that uses c libraries looks like C code that uses c libraries

1553446331
daurnimator
Other places it would be more required. e.g. if I want to create a zig allocator from lua_getallocf

1553446813
andrewrk
daurnimator, why would that require methods on opaque structs?

1553446968
daurnimator
andrewrk: that wouldn't; it was more pointing out that sometimes you

1553446986
daurnimator
(if you want to interoperate with the zig standard library.... which if you're using zig: you should :p)

1553448534
Barabas
If you want to add some convenience functions, just write those imo. Or if you realllly want to wrap it you can store a pointer to the lua state in you wrapper struct

1553448749
emekankurumeh[m]
you usually only have pointers to opaque structs like that anyway

