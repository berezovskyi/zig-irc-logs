1569197088
nrdmn
thanks!

1569197127
nrdmn
next project will be allocators. I can't really do anything after leaving uefi boot services behind without an allocator.

1569197153
Tetralux
You gonna be making a page allocator?

1569197221
nrdmn
I'm going to make *something*. I don't know anything about allocators, please don't expect too much

1569197263
andrewrk
fengb has been working on an allocator

1569197296
andrewrk
you could probably compile a c allocator and use that too

1569197299
andrewrk
e.g. jemalloc

1569197327
andrewrk
a general purpose allocator for zig would be neat though

1569197336
andrewrk
see also

1569198315
nrdmn
Hmm, jemalloc looks like it does what I need

1569198350
nrdmn
I've been looking for an allocator that can allocate from multiple slices

1569200492
keegans
was just testing out android as a cross compilation target but was wondering if it is possible to use the android libc since i'd like to dlopen

1569201183
V-X
What version of C++ is used when using @cInclude? I'm trying to import some headers from

1569201677
Tetralux
I believe you can pass --std=___ after --c-source, or....

1569201681
Tetralux
V-X:

1569203018
V-X
@Tetralux How would this work if I'm just trying to import `.h` files and not `.c` files?

1569203087
Tetralux
I believe "C source" means "anything C", including .s files IIRC.

1569203092
Tetralux
Like

1569203100
Tetralux
"Compiled with clang"

1569203106
Tetralux
If you take my meaning.

1569203136
Tetralux
If you would have otherwise passed it to clang to compile it, you can pass it to c-source.

1569203138
Tetralux
Something like that.

1569203143
keegans
is it possible to tell zig build-exe where my crtbegin crtend etc. are , it is linking against crt1.o which is nonexistent as this is a clang based toolchain that has crtbegin etc ?

1569203157
Tetralux
--c-source --std=c++11 file.c

1569203165
Tetralux
Something like that I tihnk.

1569203349
V-X
Tracking, now I'm getting `invalid argument '-std=c++11' not allowed with 'C'`

1569203376
V-X
Neither my `build.zig` or my other zig code contains any references

1569203403
fengb
Zig doesn’t support C++

1569203499
Tetralux
Huh... Interesting.

1569203508
Tetralux
That seems... unfortunate.

1569204074
V-X
Thanks @fengb I've swapped to the C compatibility header and now I'm getting `lld: error: undefined symbol: __gxx_personality_v0` Is this a Zig thing or on my library side?

1569204248
V-X
Well, some tinkinering and removing `linkSystemLibrary("c")` fixed it

1569204345
V-X
Well, that seems to have just hidden the error: `Segmentation fault at address 0x0???:?:?: 0x0 in ??? (c)/usr/bin/lib/zig/std/special/start.zig:129:22: 0x226abc in std.special.posixCallMainAndExit (ultalight)            root.main();                     ^/usr/bin/lib/zig/std/special/start.zig:56:5: 0x2269ce in std.special._start (ultalight)

1569204346
V-X
@noInlineCall(posixCallMainAndExit);    ^[1]    76185 abort (core dumped)  zig-cache/bin/ultalight`

1569204354
V-X
Well, that seems to have just hidden the error: ```Segmentation fault at address 0x0???:?:?: 0x0 in ??? (c)/usr/bin/lib/zig/std/special/start.zig:129:22: 0x226abc in std.special.posixCallMainAndExit (ultalight)            root.main();                     ^/usr/bin/lib/zig/std/special/start.zig:56:5: 0x2269ce in std.special._start (ultalight)

1569204354
V-X
@noInlineCall(posixCallMainAndExit);    ^[1]    76185 abort (core dumped)  zig-cache/bin/ultalight```

1569204469
andrewrk
fengb, clang-based compilation does support building c++ code. that's how it's planned to do

1569204496
andrewrk
well, to qualify that, it's not relaly supported yet in that I haven't added any test coverage for it

1569204941
Tetralux
Can you even get to clang++ from just zig?

1569204952
Tetralux
You can only get to clang with `zig cc` right?

1569204981
andrewrk
just name your file .cpp

1569205014
andrewrk
it's the same binary. clang++ just does -x c++

1569205038
Tetralux
clang doesn't accept --std though right?

1569205042
Tetralux
Or am I misremembering.

1569205050
andrewrk
actually it's just the same binary. there's not even a -x component to it

1569205064
andrewrk
andy@ark ~> readlink ~/local/llvm9-release/bin/clang++

1569205064
andrewrk
clang

1569205121
Tetralux
That's odd.

1569205132
Tetralux
I remember trying to compile C++ code with clang before and it refusing it.

1569205140
Tetralux
refusing to*

1569205191
Tetralux
Hmmmm.

1569205197
Tetralux
I just checked on my Ubuntu VM.

1569205221
Tetralux
clang compile cpp files okay

1569205226
Tetralux
That's so strange.

1569205228
Tetralux
Okay.

1569205230
Tetralux
Nevermind then xD

1569205463
andrewrk
there may be link errors with libstdc++ if you use inheritance or something like that

1569205486
Tetralux
Oh?

1569223449
_Vi
Shall std.mem.Allocator be used as example of how to make interfaces in Zig?

1569224085
_Vi
Are there re-exports in Zig? To expose a constant from inner file/struct as public item of API in root source file of a library?

1569224342
bgiannan
_Vi, not sure i get your question

1569225417
ceymard
@export ?

1569225452
ceymard
like `const something = @import(..)` and then later `@export("sdfsdf", something.something)` ?

1569225627
_Vi
ceymard, Looks like @export is for exposing things to C code, not to Zig code.

1569225688
_Vi
`const Namespace1 = struct { const Namespace2 = struct { pub fn qqq() void{}  }  };  pub const qqq = Namespace1.Namespace2.qqq;` - does something like this work?

1569225791
bgiannan
well yes

1569225818
bgiannan
for example you usually do something like: `const std = @import("std"); const Allocator = std.mem.Allocator;`

1569225867
_Vi
Does it work for functions? Will it be public for users of the library?

1569225899
_Vi
Can private function be turned public this way without specifying all arguments again?

1569228016
ceymard
how should I deal with errors of the like "cast discards const qualifier" ?

1569228034
ceymard
I'm trying to assign a function to a ?*c_void field

1569228048
ceymard
and it just won't let me unless I do the ptrToInt intToPtr magic

1569228210
mq32
ceymard, you're trying to cast away a const specifier which is a bug in 98% percent of the cases

1569228223
mq32
why do you need to cast to ?*c_void?

1569228229
ceymard
I suppose fn are typed as const

1569228236
ceymard
I'm giving a function pointer to c code

1569228243
ceymard
so that the c code calls me later

1569228256
ceymard
the c code expects ?*c_void for this

1569228272
ceymard
because it doesn't have to be a function

1569228275
ceymard
I'm just using it that way

1569228313
mq32
ah so it's the usual "context" pointer?

1569228318
ceymard
pretty much :)

1569228391
ceymard
so, ptrToInt and intToPtr ? no "more elegant" way ?

1569228430
mq32
you could just import the function manually

1569228499
ceymard
what do you mean ?

1569228505
mq32


1569228518
mq32
just import the function with a fitting pointer type instead of using c-void

1569228566
ceymard
why having the first extern statement then ?

1569228570
ceymard
have*

1569228584
mq32
just for reference :D

1569228586
ceymard
ok

1569228594
ceymard
is there a type that accepts anything ?

1569228598
mq32
if you never need to pass anything non-function

1569228608
ceymard
because I may have to use the same field to store something else

1569228612
mq32
probably "? * const c_void"

1569228620
ceymard
ah, const.

1569228625
ceymard
that way it accepts anything

1569228640
ceymard
that would work

1569228653
ceymard
the only sad thing is then @cInclude is no use to me anymore

1569228657
ceymard
I like the @cInclude :D

1569228713
ceymard
I'll stick to magic I guess, just for that field...

1569228727
ceymard
after all, when talking to c you can't avoid being somewhat messy.

1569228750
ceymard
I'm in fact building a library to interact with the C library

1569228761
ceymard
so I guess this library will be the rampart that exposes the safe bindings

1569247320
andrewrk
donpdonp, I'm having trouble getting all these cimports to resolve with zootdeck. currently stuck on lib-2.60.6-dev/include/glib-2.0/glib/gtypes.h:32:10: error: 'glibconfig.h' file not found

1569247371
andrewrk
where is that file supposed to be provided?

1569247728
andrewrk
I think this would be fixed by adding pkg-config support to linkSystemLibrary

1569247763
mq32
pkg-config support would be super-cool

1569247774
mq32
builder.addSystemPackage("sdl2");

1569248076
andrewrk
it'll just be foo.linkSystemLibrary("SDL2")

1569248159
mq32
also with correct setup of include paths for @cImport?

1569248162
andrewrk
yes

1569248165
mq32
♥

1569248325
andrewrk
we need a robust C compiler flag parser in the std lib. we already have 2 use cases for it

1569248702
FireFox317
Are we then gonna include pkg-config as part of zig? Because otherwise we rely on the fact that it is present on the system, or something like try it with pkg-config and if it fails use some other method?

1569248876
andrewrk
FireFox317, this is in the implementation of linkSystemLibrary

1569248891
andrewrk
so it makes sense to use the stuff already present on the system to find system libs

1569248909
FireFox317
pkg-config is available on every system?

1569248913
andrewrk
no

1569248930
andrewrk
also vcpkg isn't available on every system

1569248932
FireFox317
So we should have some fallback method when it is not available right?

1569248947
andrewrk
right, it's just something that linkSystemLibrary is capable of trying to utilize

1569249221
halosghost
andrewrk: apropos of nothing: so, i1s are a thing now, but you cannot have an array of i1s yet, is that right?

1569249231
halosghost
i.e., Zig doesn't yet allow for a true bit-array/bit-buffer?

1569249339
andrewrk
you can have arrays of i1 but @sizeOf(i1) == 1

1569249351
companion_cube
sounds like you want a bitvector anyway

1569249387
andrewrk
what's your use case halosghost?

1569249412
halosghost
andrewrk: in this case, bitboards for simple games (e.g., representing a game-of-life board)

1569249420
halosghost
companion_cube: well, yes

1569249444
andrewrk
halosghost, interesting. I wonder if @Vector / SIMD could be useful here

1569249446
companion_cube
it's reasonably easy to write your own with bit fiddling from a []u32

1569249473
halosghost
companion_cube: well, I threw together a “library” (read: header full of macros) for defining/operating on a bitarrays/bitbuffers in C

1569249480
companion_cube
:D

1569249487
companion_cube
doesn't everyone?

1569249499
halosghost
I was just wondering how it might go in Zig :)

1569249500
companion_cube
I remember hearing about packed arrays here

1569249517
halosghost
I like the eventual idea of being able to use Zig in place of C (though I don't think I'm personally ready for that yet)

1569249569
mq32
FireFox317, i think if done right, zig only needs the pkg-config workaround until the custom package manager works right

1569249615
fengb
Packed arrays currently exist in userland

1569249631
FireFox317
halosghost: maybe a packed struct with 8 i1's and then an array of these packed structs?

1569249634
fengb
Well... std:

1569249669
companion_cube
oh damn, you could actually generate such struct at comptime

1569249702
halosghost
FireFox317: that's kind of what the C header does

1569249704
halosghost
here, one sec

1569249706
halosghost
I'll just paste it

1569249716
halosghost


1569249761
halosghost
so, bitarray() is statically-allocated (or a VLA, I suppose), and bitbuffer() is dynamically-allocated

1569249788
fengb
halosghost:

1569249791
halosghost
it's a little gross :P

1569249823
halosghost
fengb: let me take a look

1569249913
halosghost
fengb: interesting

1569250079
fengb
Probably less gross :P

1569250619
andrewrk
I wonder why glib tries to sneak -Wl,--export-dynamic into your linker line

1569250625
andrewrk
that looks sketchy

1569250652
donpdonp


1569250678
andrewrk
donpdonp, never mind, I think I'll have this solved with some pkg-config integrations I'm adding to zig build, which should also simplify your build script

1569250696
donpdonp
+1

1569250856
donpdonp
i looked at different libs before going with gtk and some of the 'experiments' in src/gui are still there but unused.

1569250923
mq32
andrewrk, that is needed if a shared-object based plugin system can load symbols from the executable

1569250929
mq32
and i assume that gobject does something like that

1569251009
andrewrk
that's definitely sketchy

1569251106
mq32
so is GetOpenFileName on windows :D

1569251131
mq32
that function loads about 50 libraries on my system

1569251146
fengb


1569251154
fengb
Coroutines are evil! We should purge them!

1569251191
companion_cube
I mean, so new right?

1569251196
andrewrk
it's been planned since the beginning

1569251197
andrewrk


1569251275
mq32
^^

1569251279
fengb
We've had async for awhile. And anything that doesn't have it will reimplement it poorly in userland

1569251291
fengb
No offence to libuv >_>

1569251300
companion_cube
don't you love yourself some callbacks??

1569251304
mq32
i think your rework of async/await is quite well done, andrewrk

1569251315
mq32
allows a lot of user-space designs built on top of it

1569251322
andrewrk
it also solves safe recursion

1569251330
andrewrk
in a pretty elegant way, IMO

1569251340
andrewrk
I haven't enabled that yet, waiting for it to stabilize a bit

1569251369
fengb
I managed a pretty clean — albeit hard to reuse — pattern for generators

1569251372
companion_cube
how does it enable safe recursion?

1569251372
andrewrk
safe recursion was another thing planned since the beginning

1569251379
companion_cube
:o

1569251380
mq32
yeah that's true. just create a new frame on the heap and call that frame :)

1569251382
companion_cube
that'd be a killer feature

1569251392
companion_cube
ah, fragmented stacks?

1569251400
mq32
not stack, but stacklike :D

1569251412
companion_cube
segmented* I should say

1569251416
fengb
But it also makes recursion pretty gross :P

1569251420
andrewrk
true

1569251424
companion_cube
but yeah, pushing continuations into the heap… useful

1569251432
mq32
as zig knows the whole stack frame for function calls, you can allocate the deepest stack size in one go

1569251439
companion_cube
still less gross than derecursifying by hand

1569251441
andrewrk
companion_cube, so check this out, if you were to have recursion in async functions, it wouldn't work. because an async frame would be inside another async frame. you get a compile error that shows you all the recursive calls

1569251464
andrewrk
the epiphany I had, about how to do safe recursion for normal blocking functions

1569251488
fengb
I'm rather intrigued at how seamless the async is. Allowing the frame to go anywhere is amazing

1569251491
andrewrk
is to make it so that if zig detects a call graph cycle, it

1569251523
andrewrk
this causes the aforementioned compile error, as well as making it so that heap allocating the frame solves the recursion problem

1569251527
fengb
Will tail call optimization be part of the language spec?

1569251531
andrewrk
yes

1569251536
companion_cube
so it forces you to do the heap stuff, I see

1569251538
andrewrk
it's necessary for this safe recursion thing to work

1569251551
companion_cube
I mean, there should definitely be convenient allocators for that

1569251684
andrewrk
so then the only thing left is external functions and function pointers. simple solution - annotate stack size for both. debug runtime safety for function calls, when the actual function's required stack size is > the annotation on the pointer

1569251700
andrewrk
function pointers are horrible in zig, nobody will ever want to use them

1569251708
companion_cube
hum :D

1569251715
companion_cube
horribleness never stopped people

1569251721
companion_cube
I mean, look at what they write in C

1569251727
andrewrk
ha

1569251744
Tetralux
I'm not sure I entirely understand the function ptr thing.

1569251748
Tetralux
I mean,  we them in interfaces right

1569251782
andrewrk
yeah and that's where our error sets issue comes from, and this piece of work:

1569251822
companion_cube
hello higher-order effects

1569251878
mq32
// End of stream is not an error condition.

1569251879
mq32
thanks :)

1569251904
andrewrk
mq32, if you want that you can use readNoEof

1569251907
mq32
this is sometimes so messy to do proper read-data-code

1569251938
mq32
yeah, seen that function right now

1569251958
mq32
for a generic "read" function it's stupid to throw errors around when "end of stream" is a totally normal usecase

1569251987
mq32
but for a function like "read_exactly_4_bytes" preliminary end-of-stream is definitly an error

1569254318
andrewrk
ugh, the pkg-config names are not consistent with the library names

1569254346
andrewrk
-lSDL2 -> pkg-config sdl2; -lgdk-3 -> pkg-config gdk-3.0

1569257467
donaldallen
I'd like to offer the suggestion that better documentation for pointers be a priority.

1569257565
donaldallen
Having said that, it appears that [*]const u8 and [*u8 are different types. A function defined fn foo(bar:[*]u8) void and called as foo("hello") will result in an error, because "hello" is of type [*]const u8.

1569257592
companion_cube
which makes sense, foo might modify its argument, right?

1569257618
donaldallen
Is there some way to define the type of the parameter so that it is a superset of these two types? I really don't care if the string is a literal or constructed.

1569257650
companion_cube
I'm not sure, but if you ask for a [*]const u8, you should be able to pass a []u8

1569257691
andrewrk
why doesn't the function care about the length?

1569257729
donaldallen
@companion_cube I'm not positive either, but []u8 is defined as a pointer to something whose length is known at runtime. [*].... pointers point to something of unknown length, so are different.

1569257776
donaldallen
@andrewrk Because the argument is being passed into C-land (calling sqlite functions).

1569257785
mq32
donaldallen, slices have runtime-known length, not comptime known length

1569257793
mq32
so you can pass any length to []const u8

1569257853
andrewrk
you can get from []T to [*]T with `.ptr`

1569257901
donaldallen
@andrewrk What about getting from [*]const u8 to [*]u8?

1569257959
andrewrk
you can't write to a const ptr

1569257989
andrewrk
if the pointer is mutable then it should be [*]u8 in the first place

1569258038
andrewrk
where did the [*]const u8 come from?

1569258220
donaldallen
The [*]const u8 is a C literal string, e.g., a sql query. I need to go back and review my own code to recall why I defined the parameter that gave me trouble as [*]u8. This little discussion has actually made things clearer to me, so may be enough for me to fix the code. If not, I'll re-appear.

1569258343
andrewrk
ok, yeah that's going to be in the .cdata section and will segfault if you try to write to it

1569259227
zyzzy
Hey! I've got a `s: []const u8` and want to pass it to some function in C (`char *`). If it's not const I can cast it via `&s[0]` and everything works fine. But with const, the compiler ofc errors. Any way to cheat the compiler?

1569259269
andrewrk
zyzzy, why is it const? where did that come from?

1569259294
andrewrk
also are you sure the c code doesn't want it null terminated?

1569259324
Tetralux
Also does the C function modify data in the slice?

1569259367
zyzzy
Ah, forgot to mention; it's just a printing function in curses. Uses the len-variant instead of \0-strings, doesn't modify it.

1569259369
tgschultz
andrewrk: a bit off topic, but I just want to confirm that the consensus was that one simply cannot write a wayland client without linking to a host system library and therefore probably glibc, right?

1569259388
zyzzy
Trying to use it with the fmt.Format interface, which gives []const u8.

1569259420
fengb
I think we’ll be encountering a lot of C libraries that don’t mark `*const char` correctly

1569259519
andrewrk
zyzzy, it sounds like in this case the .h file is incorrect. one option would be to provide your own external function prototype with the correct type signature, and call that. the nuclear option is @ptrToInt / @intToPtr

1569259562
andrewrk
tgschultz, that's something I'm interested in investigating. it's not 100% clear to me what the answer is yet, but it seems that could be a likely possibility

1569259577
zyzzy
Alright, cheers!

1569259644
andrewrk
tgschultz, if it comes down to glibc, at least we now have the ability to cross compile targeting any version of it

1569259715
andrewrk
in theory we could also write a driver loader that sets up whatever the dynamically linked libc on the target system requires in order to function correctly

1569259733
andrewrk
given that most libcs are pretty stable, I think that would be a reasonable thing to try

1569259794
tgschultz
sure, maybe. it's just annoying that something described as a protocol requires this

1569259801
andrewrk
agreed

1569259811
andrewrk
"protocol" is a very generous word in this case

1569259893
andrewrk
donpdonp, alright I'm reproducing your zootdeck zig crash with master branch

1569259949
andrewrk
side note, that is a monster CLI invocation:

1569260033
alexander92
iirc

1569260038
alexander92
there was some limitation on windows

1569260044
alexander92
on the length of cli commands

1569260160
andrewrk
yes there is

1569260181
andrewrk
we'll probably need a way to specify the equivalent of CLI args with a file or something

1569260300
alexander92
yes, that's what people decided to do as a workaround

1569260305
alexander92
in the project i remember

1569263069
donpdonp
andrewrk: great! sounds like progress. note the qt lib can be eliminated with problem. shouldnt have been in there anyways since its a C++ project.

1569264184
FireFox317
andrewrk: In the big CLI command you generated there are multiple lines which have `--library glib-2.0` for example. Did you see this?

1569264228
andrewrk
FireFox317, I didn't, but it's harmless

1569264249
andrewrk
and may actually be intentional by pkg-config

1569264283
andrewrk
Sahnvour, you were asking about vcpkg integration - here's a nice example of pkg-config integration:

1569264322
FireFox317
Yeah i see it is harmless, but it shouldn't be necessary to include the same file or library more then once right?

1569264328
FireFox317
than :)

1569264582
Di0genes
Can anyone decipher a compiler message for me?

1569264591
Tetralux
Shoot

1569264608
Di0genes
compilation does not link against libc

1569264608
Di0genes
const c = @cImport(@cInclude("lmdb.h"));

1569264642
andrewrk
Di0genes, -lc on the CLI or linkSystemLibrary("c") in build.zig

1569264657
Di0genes
Aha!

1569264673
andrewrk
zig has to know up front that it's planned to link libc

1569264685
andrewrk
so that comptime code can inspect the value @import("builtin").link_libc

1569264696
Di0genes
Gotcha.

1569264718
Tetralux
Does linkSystemLibrary link the system's libc or the zig-distributed libc?

1569264730
Tetralux
I'm guessing the latter - in which case, isn't that slightly confusing?

1569264818
Di0genes
Hrmmmm...invalid argument. I'll figure it out.

1569264835
andrewrk
Di0genes, older versions of zig need this syntax: `--library c`

1569264858
andrewrk
Tetralux, zig's libc is preferred if available, but can be overridden with --libc arg

1569264882
Di0genes
Gotcha. Using zig-linux-x86_64-0.4.0+6ab8b2aa

1569264967
Di0genes
And should it look in the standard /usr/include directory for header files...or do I have to add that to the include path?

1569265005
andrewrk
for the CLI, see

1569265019
Di0genes
Using Devuan linux here.

1569265105
Tetralux
Hmmm. What do you have to pass to zig to build with libc on windows?

1569265109
Tetralux


1569265128
Tetralux
Only I'm getting a bunch of lld errors with just hello world.

1569265142
Tetralux
(undefined symbol)

1569265173
andrewrk
hmm. I wonder if this is relevant to zig:

1569265185
andrewrk
will homebrew still work?

1569265266
Di0genes
Unfortunately Devuan only has llvm-7 in it's repo, so I can't compile zig-0.4.0

1569265309
andrewrk
Di0genes, if you're trying to use zig you can use a pre-built binary:

1569265330
andrewrk
if you're looking to contribute,

1569265364
Di0genes
I'll check it out.

1569265391
Di0genes
andrewrk: Any plans on doing Shared Generics in the future?

1569265427
andrewrk
I've never heard of Shared Generics before

1569265431
Tetralux
^

1569265535
Di0genes
andrewrk: It allows the compiler to emit the object for all objects of a particular type once instead of each time the object is used(as in Macro Expansion which is what is being used right now).

1569265574
Di0genes
errr...object code.

1569265693
andrewrk
oh I actually was planning on looking into something like that

1569265710
Di0genes
If you want to get the bloat out of your software, Shared Generics is great way to do it.

1569265713
andrewrk
idea is to reduce code bloat when the only thing different about the generic type is something that doesn't matter to the machine code

1569265726
andrewrk
for example error sets

1569265733
Di0genes
andrewrk: Precisely.

1569265736
Tetralux
Wait - I'm confused - emitting a specialization for each instantiation of a generic type exactly once is a basic principle of how generics work.

1569265771
Di0genes
Teralux: The problem is that most compilers don't do it that way.

1569265781
Tetralux
That is insanely ridiculous.

1569265793
Di0genes
Tetralux: They use Macro Expansion.

1569265800
Tetralux
That shouldn't matter.

1569265813
Tetralux
It ends up as C code anyway.

1569265815
Di0genes
Tetralux: Agreed.

1569265860
Tetralux
I find it really difficult to believe that anyone who cares about any kind of performance would not perform that basic optimization.

1569265870
Tetralux
Like really - wtf are they smoking.

1569265876
Di0genes
Tetralux: I've used the Green Hills Ada compiler and the GNAT compiler, and neither turns into C. But they do use Shared vs Macro Generics.

1569265896
companion_cube
if you memoize comptime computations, you get shared generics

1569265917
Tetralux
This is an optimization that should not require any kind of user intervention.

1569265991
Tetralux
"You want a version of this generic template that has this set of values for the parameters? Okay fine. Did we make that specialization already? Yes? I'll just give you the same instance of it then."

1569265993
Tetralux
Like, really.

1569266006
Di0genes
Tetralux: Well...the drawback is that it's harder to use a debugger on the object code.

1569266017
companion_cube
it's also hard to do it when you have separate compilation

1569266032
Tetralux
Di0genes: How are those two things connected?

1569266047
Tetralux
Mangling?

1569266080
Tetralux
And by debugging the object code, do you mean debugging the final program or ensuring that the correct object code was generated?

1569266092
akhetopnu
hi. i'm looking at the tutorial on

1569266145
Di0genes


1569266168
Di0genes
Tetralux: Both.

1569266197
Tetralux
I mean, runtime program debugging is fine because you just put in debug info with the specialized names, surely.

1569266205
Tetralux
That's how everything else does it.

1569266209
Tetralux
Or so it appears.

1569266247
Tetralux
As for object code generation, surely it's not that difficult to read it and figure out if it's right or not?

1569266253
Tetralux
At least for small examples.

1569266259
Di0genes
Tetralux: Yeah, but I don't have that luxury. Using Frama-C and the Ada Spark Toolkit for High Assurance programming.

1569266261
Tetralux
But even so

1569266275
Tetralux
How does that have anything to do with whether or not you perform that basic optimization?

1569266299
Tetralux
I have no idea what either of those are, but I'm guessing they're a little jank xD

1569266408
gonz_
Are you saying you don't know what Ada is or specifically SPARK?

1569266431
halosghost
Di0genes: !

1569266433
Tetralux
I know of Ada, and know it's still used for some areas, but :)

1569266435
halosghost
Di0genes: frama-c is excellent

1569266444
halosghost
Di0genes: I'm excited to hear of someone using it live :)

1569266450
FireFox317
akhetopnu: What version of zig are you using?

1569266521
akhetopnu
FireFox317 0.4.0

1569266546
akhetopnu
just downloaded through pacman from arch linux community repo

1569266567
FireFox317
akhetopnu: The code on the homepage of Zig is based on the master branch of Zig, so you would have to download the master version from

1569266573
gonz_
akhetopnu: Download a master release from the website instead:

1569266574
Di0genes
Tetralux: Well...they use it for stuff like this....

1569266691
Di0genes
Thinking about using Zig for some Blockchain apps.

1569266723
Tetralux
> supports the hardware-accelerated virtualization of Microsoft Windows through the use of a fully de-privileged variant of VirtualBox [vbox] running inside a strongly isolated VM subject on top of Genode’s base-hw kernel.

1569266727
Tetralux
That's quite a mouthful.

1569266786
Di0genes
Tetralux: Basically, it can run as it's own OS or as a Hypervisor.

1569266937
Di0genes
Liking Zig because there's alot less bootstrapping involved.

1569267002
Di0genes
halosghost: Actually lots of people use Frama-C, but it's usually in commercial products.

1569267019
halosghost
Di0genes: indeed; that is my understanding as well

1569267114
companion_cube
eg. trust-in-soft

1569267367
Di0genes
Surprised at how fast the Zig compiler is.

1569267398
scientes
Di0genes, really?

1569267430
FireFox317
caching ^^

1569267456
gonz_
It

1569267460
Di0genes
scientes: Usually C type compilers are notoriously inefficient.

1569267460
andrewrk
donpdonp,

1569267500
Tetralux
Di0genes: It's actually relatively slow. xD

1569267513
companion_cube
Di0genes: gcc is pretty fast when it comes to compiling C?

1569267533
Di0genes
Tetralux: Well, yeah...but considering it's still relatively new.

1569267559
scientes
C was designed for low memory compilation

1569267561
scientes
not for speed

1569267576
Di0genes
Looks like andrewrk is going for Forth or Oberon speed...later on.

1569267617
scientes
not important yet

1569267619
Di0genes
I expect it to get faster as the development cycle continues.

1569267635
andrewrk
the self hosted compiler is planned to be full speed

1569267663
andrewrk
breadth first development. it will be a while before it supports all the language

1569267682
andrewrk
I mean there will not be a "it's not time to optimize yet" phase of self-hosted

1569267714
andrewrk
perf is one of the main features

1569267720
donpdonp
andrewrk: awesome! thx for the fixes.

1569267727
donpdonp
i'll try it out shortly

1569267733
andrewrk
donpdonp, no problem, let me know if those build.zig changes work for you

1569267767
andrewrk
donpdonp, note that the last commit of zig is still in CI, it will be about an hour before they are on the download page

1569267806
Di0genes
andrewrk: If your looking for research into what makes a compiler fast...check out

1569267814
andrewrk
I think that's everybody. Anyone else's actively maintained zig project not working in master branch?

1569267884
fengb
Could the nightly build have the date in addition to the sha?

1569267901
scientes
why am i only seeing the freebsd CI, and not sourcehut?

1569267905
andrewrk
fengb, in the filename/version?

1569267906
scientes
oh nvm

1569267921
andrewrk
scientes, did you see that we have arm64 and arm32 testing in CI now?

1569267926
scientes
yes I did

1569267928
andrewrk
:)

1569267931
andrewrk
it's fast too

1569267940
scientes
cause its just for running the tests

1569267942
andrewrk
yeah

1569267951
fengb
Yeah, I just realize I'm staring at a bunch of characters I'm trying to decipher :P

1569267955
fengb
And doing adhoc naming to work around it

1569267964
andrewrk
locally I'm even able to test dynamically linked glibc on foreign architectures

1569267966
Di0genes
Working on my own implementation of

1569267982
andrewrk
I could try to create a tarball for the linux CI to do that as well, it might be not too many bytes

1569268003
scientes
its not a big deal

1569268025
scientes
well, its great what we have :)

1569268104
andrewrk
fengb, I'd strongly prefer to keep it simple

1569268171
fengb
Sure, I'll probably just alias them locally to keep myself sane

1569268350
fengb
Huh, zig master shave 4 KB off fundude somehow

1569268365
fengb
Not complaining. Just happily surprised :)

1569268369
andrewrk
fengb, llvm 9.0.0 perhaps?

1569268394
andrewrk
the merge commit for llvm9 branch is e81156b87364a31bee892aee2e6145f65c02fa35

1569268400
andrewrk
Sep 19

1569268419
andrewrk
maybe they improved -Os for wasm32

1569268420
fengb
Weirdly, release-fast adds back 4 KB

1569268432
fengb
And release-small

1569268459
andrewrk
so, debug is 4 KB smaller, release-fast same size, release-small same size?

1569268481
fengb
It's only release-safe that got smaller. I'm a little confused but I need the safe mode as-is

1569268513
andrewrk
it could be that the optimizer was able to prove that some safety checks were unnecessary

1569268551
fengb
safe is 4 KB smaller than old safe. fast and small are both bigger than safe now :/

1569268556
andrewrk
woah

1569268563
andrewrk
that... does not make sense

1569268584
scientes
--release-safe is great

1569268590
scientes
as the vast majority of code does not need to be fast

1569268596
fengb
Not a big deal since I really need safe here

1569268602
fengb
But it's a little confusing

1569268812
andrewrk
if (@import("builtin").mode == .ReleaseSmall) { var @"( ͡° ͜ʖ ͡°)": [9999]u8 = undefined; }

1569268971
FireFox317
XD

1569269204
akhetopnu
I'm trying to build the build.zig file from tutorial about integration with C libraries without FFI bindings and I'm getting this error: "error: expected array type or [_], found slice"

1569269221
akhetopnu
and it's pointing at line "exe.addCSourceFile("test.c", [][]const u8{"-std=c99"});"

1569269231
akhetopnu
I downloaded the latest zig binary (master)

1569269263
akhetopnu
I'm copy-pasting the example code so it's the same as in the tutorial

1569269292
andrewrk
akhetopnu, you found the one code snippet from the home page that isn't automatically tested. I'll fix it

1569269306
andrewrk
update [][]const u8 to [_][]const u8

1569269326
akhetopnu
that worked :P

1569269998
FireFox317
andrewrk: I'm trying to solve the _DllMainCRTStartup issue (#3237). Apparently when we are doing --c-source <anyfile> we are not including the start.zig file, which is probably what we want. But then I can't solve the issue by putting the logic into start.zig.

1569270010
FireFox317
I checked Zig 0.4.0 and that had the same exact issue

1569270138
_Vi
Is there something like `zig check` to check source code for compile errors without calling LLVM?

1569270173
andrewrk
FireFox317, hmm. I'm considering unconditionally adding start.zig and then having it do comptime logic to detect if we're building a library

1569270211
andrewrk
FireFox317, part of the problem is we don't know if the C file has supplied _DllMainCRTStartup or not

1569270239
andrewrk
_Vi,

1569270288
FireFox317
But that would mean that if we do zig build-exe|lib|obj --c-source <cfile> we always include start.zig?

1569270317
fengb
Wow,

1569270328
andrewrk
oh wow, congrats dom96

1569270344
dom96
thanks :)

1569270732
akhetopnu
how can I specify a path for the output binary? I'm running zig build --prefix ./ but it still puts the binary in zig-cache/o/<some-long-hash>/test

1569270789
andrewrk
akhetopnu, the default step is "install". so if you put `exe.install();` on there, the binary will get "installed". The default install prefix is zig-cache. so if you do this it will be zig-cache/bin/yourbinary

1569270808
andrewrk
the reason install isn't on by default is you can build tools and execute them without having to put them anywhere

1569270827
andrewrk
I know, it's completely impossible to find this stuff out from docs

1569270837
andrewrk
soon.

1569270926
fengb
"I'm not a fan of Nim because types go after the variable."

1569270939
fengb
This is such a big deal to people :/

1569270955
companion_cube
oh no, the syntax is better!

1569270975
akhetopnu
ah, i see, I added 'exe.install();' to ./build.zig, executed 'zig build --prefix $(pwd)' and zig created ./bin folder with my 'test' binary in it

1569270990
fengb
Sometimes I think C has stunted the community

1569271037
andrewrk
it's a loud minority. people with these strong misguided opinions tend to file a lot of issues and not write very much code

1569271053
companion_cube
I could say the same about zig's if/while syntax though ;)

1569271063
companion_cube
it's C like, and it could be rust-like, ie. strictly better

1569271114
fengb
Specifically in this case, they must have never worked with function pointers.

1569271128
fengb
Or parsing code... but that's probably a given :P

1569271145
scientes
We could verify function poiin

1569271150
scientes
functionn pointers on ARM

1569271159
scientes
with the pointer authentication features

1569271171
andrewrk
scientes, memory tagging? yes there are some cool things to explore here

1569271183
andrewrk
we can verify function pointers without those features too, and that's planned

1569271212
andrewrk
zig functions can have small prefix data before them, runtime safety can make sure the type signature is valid and stack size is ok

1569271312
akhetopnu
andrewrk what text editor do you use to jump to zig's std library function definitions? (something like ctags)

1569271327
akhetopnu
is there anything you recommend for checking zig out

1569271339
scientes
there is also providing guarantees about control flow

1569271463
akhetopnu
it's probably too much to ask but maybe there is a better 'beginner friendly' way than using vim-zig plugin

1569271522
fengb
The VSCode plugin works decently

1569271554
andrewrk
akhetopnu, I might not be the best person to ask. I have every file and function memorized and I use fuzzy file finder to jump directly to the file that I want, and then regex search for the name

1569271775
akhetopnu
I only learned about zig's existence today btw, been looking for something like C but without the header file nonsense, some syntax niceties etc and zig looks more or less like the choice, despite its early stage of development

1569271818
andrewrk
the early stage of development is a serious downside but if you can get past that I think it's really good :)

1569271934
akhetopnu
I'm a web developer by trade (javascript/html/css and all that), but I want to get into low-level stuff and C seems like the simplest/go-to/default language of choice but I've been spoiled by high-level features, I think I'm liking the rust/golang twist to C in the form of zig

1569271995
andrewrk
akhetopnu, I think you'll find stack traces / error return traces / debug info to be especially helpful. Although without much C experience, you won't realize how bad debugging can be :)

1569272138
alexander92
debugging async code is always an interesting

1569272154
alexander92
area as well: especially with classic step-level debugging

1569272161
andrewrk
ah. yes, that is an unsolved problem currently, but zig is well-poised to improve on it

1569272181
alexander92
i believe it's a tooling problem more than a lang one

1569272192
alexander92
but languages surely can make it easier

1569272195
alexander92
for tools

1569272559
akhetopnu
one of zig'z elevator pitch features is 'fast compiler', I'm guessing the time was comparing with gcc/clang (?) but there is also tcc (tiny c compiler) which is truly blazing fast and running c programs feels like running bash scripts

1569272608
akhetopnu
i know it's not a priority right now but is it at least being considered for the future of zig?

1569272636
andrewrk
akhetopnu, yeah, did you see my comments regarding the self hosted compiler about an hour ago?

1569272638
scientes
well LLVM will slow zig down

1569272649
alexander92
tcc is nice

1569272669
alexander92
but i really want to add more debug info capability

1569272670
alexander92
to it

1569272671
andrewrk
akhetopnu,

1569272684
andrewrk
scientes, the more I think about it, the more confident I am that zig will support more backends besides LLVM

1569272724
andrewrk
in particular, it will be interesting to look into a fully self hosted implementation (probably first for x86_64) that is not limited by any third party code, so we have no perf excuses

1569272750
scientes
well, to me the program's speed is far more important

1569272755
andrewrk
I'm still planning on trying to make llvm faster by parallelizing it though

1569272763
scientes
and gcc and llvm are unmatchable ATM

1569272769
andrewrk
right. this would be for debug builds, where compilation speed is the priority

1569272784
andrewrk
e.g. hot code swapping during game development

1569272819
companion_cube
dmd is pretty good at that, I think

1569272836
companion_cube
andrewrk: it would buy you a

1569272863
scientes
that isn't very important however

1569272895
alexander92
what about cranelift ? is it something that would be usable from static languages, or is it only jit-related

1569272897
companion_cube
or: target wasm directly, without llvm

1569272905
alexander92
(as a maybe lighter llvm)

1569272905
companion_cube
then you get to use wasi ;)

1569272932
andrewrk
scientes, I agree that a zig with LLVM or GCC backend will remain a primary use case

1569272954
andrewrk
companion_cube, then I can do my sandbox thing where it's a static site, all client side :)

1569272965
andrewrk
"try it online" but it's just your own computer, mwa haha

1569272996
donpdonp
expected LLVM 9.x but found 8... /me goes looking for newer llvm bits

1569272997
companion_cube
yeah…

1569273015
companion_cube
(also can be useful for bootstrapping, you start from wasm, not from an ELF binary)

1569273027
andrewrk
donpdonp, what distro?

1569273044
donpdonp
ubuntu 18.04

1569273051
andrewrk
apt.llvm.org

1569273077
donpdonp
thx.

1569273380
donpdonp
after apt install clang-9, cmake says -- Found LLVM: -lLLVM-9  -- Could NOT find CLANG (missing: CLANG_LIBRARIES CLANG_INCLUDE_DIRS)

1569273388
donpdonp
anyone know what pkg covers those?

1569273437
donpdonp
ah its libclang-9-dev.

1569274586
akhetopnu
when i declare some methods on a struct - are these methods actually assigned to the struct's fields (as function pointers) or are these 'global' function that are converted into calls with the first argument being the struct?

1569274618
andrewrk
akhetopnu, the latter

1569274632
andrewrk
you can call them with TheType.method(instance), there is no difference

1569274680
andrewrk
donpdonp, how's it going? is it working for you?

1569274741
donpdonp
oh i got distracted by random github repors and a pint of porter. i got as far as building and installing zig head.

1569274768
andrewrk
haha no rush, I just want to feel the relief of knowing it's working

1569275728
donpdonp
andrewrk: newest zig and newest zootdeck seem to be working great. thx

1569275742
andrewrk
happy to hear it

1569275756
andrewrk
the new build script is ok for you?

1569275778
andrewrk
I think the caching will work better with it this way

1569275785
andrewrk
(without setOutputDir)

1569275807
donpdonp
yes, once i found zootdeck in zig-cache/bin/ :)

1569275830
donpdonp
by the way do you have a mastodon account somewhere?

1569275898
andrewrk
@andrewrk@mastodon.social

1569275904
andrewrk
but I have never tooted

1569275953
_Vi
Is there already an issue for third visibility mode (non-private and non-`pub`)?

1569276062
andrewrk
_Vi, there is not

1569276134
_Vi
Is there some concept of projects/libraries that consist of multiple source files and have some stable API (so that care should be taken not to expose wrong thing)?

1569276291
_Vi
Or are zig projects supposed to talk to zig libraries using C ABI?

1569276358
andrewrk
_Vi, this will become more clear during the next release cycle, when we gain a package manager

1569276379
andrewrk
zig expects all zig packages to be in source form, although of course you can use C library interfaces if you choose

1569276423
_Vi
I tried `zig init-lib` and it created project template for C ABI-exposing library.

1569276462
_Vi
"when we gain a package manager" -> Will the new visibility mode (function accessible within package) be a part of it?

1569276902
andrewrk
fengb, I love fundude's startup screen

1569276972
andrewrk
_Vi, what new visibility mode?

1569278506
fengb
😁

1569278514
fengb
I spent too much time on trivialness

1569279496
via
i've been eyeing the async and event loop stuff for a while, and looking through code/watching the livestream, i'm wondering how might the loop stuff might be usable on baremetal

1569279539
via
right now the loop code itself looks to be specific about what os its targetting

1569279594
via
but i'm imagining baremetal code that might have some interrupts, say notifying when a tx buffer for a uart is empty/ready to write, or some adc value is ready interrupt, and being able to make a project-specific loop to handle this

1569279604
via
so that you could use write/read and such in an async fashion

1569279652
via
right now from what i've glanced at it looks like i'd more or less need to make my own event loop logic where i await on very specific frames

1569279764
_Vi
andrewrk, "what new visibility mode?" -> Visible outside current namespace, but not in other packages. Or maybe even better make `pub` to grant only intra-package access and make new keyword or attribute for items that consist package's official API.

1569279808
via
which i'm willing to do -- its way better than what i'm doing now, but i'm wondering if there's any hope for making the event loop a bit more of an interface rather than the specific

1569280786
andrewrk
via, async functions in freestanding is a use case I explicitly had in mind

1569280810
andrewrk
From what you've described it seems to me this should work for you no problem with no dependency on std.event.Loop

1569280855
via
maybe i misread, but it looks like Loop has comptime errors all over the place for unsupported os, including ones in the direct path of read/write?

1569280884
via
and yeah, i think it is absolutely awesome that await/async works on freestanding

1569281103
andrewrk
But I don't think you need to depend on std.event.Loop. So you won't hit those errors

1569281112
andrewrk
There's no implicit dependency on it

1569281252
andrewrk
_Vi, you should be able to do what you want with status quo features and usingnamespace

1569281297
andrewrk
You have full control over what gets exposed from a given file. For a package there is a root file

1569281345
via
andrewrk: okay, i'll have to look again, but it looked to me like i couldn't do what i'm describing, i'll have to get back to you

1569281400
andrewrk
via, std.os.write will give you a compile error on freestanding

1569281447
andrewrk
But I've been considering making such functions overridable in the root source file. Doing this would enable zig packages that use such functions to work in freestanding if you provide implementations

1569281462
via
yeah, i guess thats what i mean

1569281464
andrewrk
So you would hook up such implementations into your own event loop if you wanted that

1569281477
andrewrk
Yes,this is a more general problem than async await :-)

1569281503
via
okay, no worries, the current work is spectacular, i just wanted to know if you'd thought of the use case, and you have, thank you

