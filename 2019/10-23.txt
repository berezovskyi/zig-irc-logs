1571788953
emekankurumeh[m]
who's in charge of zig-spec?

1571791628
andrewrk
emekankurumeh[m], Jimmi started it but hasn't been active lately. so... me

1571792300
emekankurumeh[m]
is we updated the parser to remove pub from fields we need to update the spec too right?

1571792309
andrewrk
right

1571792351
andrewrk
after #75 is closed, it will be the other way around; spec must be updated first, then implementation follows

1571792619
emekankurumeh[m]
if you don't mind me asking what happened to kristate?

1571792655
andrewrk
send me an email

1571792690
andrewrk
thanks for the spec PR

1571792714
emekankurumeh[m]
np

1571795525
emekankurumeh[m]
in this example

1571795538
emekankurumeh[m]
foo suspends and calls bar

1571795591
emekankurumeh[m]
and when bar resumes foo, the rest of foo's code is run before control is returned to bar where is resumed foo?

1571796231
andrewrk
emekankurumeh[m], does this help?

1571796244
andrewrk
that looks consistent with what you said in your question

1571796315
pixelherodev
I'm going to guess that removing an element from an array list while iterating over the list is a no-no, correct?

1571796454
andrewrk
pixelherodev, generally, in computer science, if you iterate over an array list with an index, this can work fine if you manage the index correctly

1571796481
pixelherodev
I know that much :P I meant using the `.iterator()`

1571796488
pixelherodev
I'm guessing it's not designed to handle that?

1571796507
pixelherodev
Oh wait, I literally have the entire stdlib code right in front of me

1571796601
pixelherodev
... I think it would actually work.

1571796628
pixelherodev
The iterator internally just keeps an index, so as long as the list's length changes properly, it shouldn't care if the list changes

1571796633
andrewrk
my suggestion is to avoid iterator() on ArrayList and use your own index variable

1571796647
pixelherodev
What for?

1571796660
andrewrk
I just don't see the value in ArrayList.iterator()

1571796683
pixelherodev
Why's it exist, then?

1571796813
pixelherodev
Though now that I'm using an index variable manually, I see your point

1571796818
pixelherodev
The iterator seems kind of pointless

1571796849
andrewrk
because the std lib is a community effort, and it's important for me to keep an open mind and not block neutral or possibly good ideas just because I have a preference

1571796889
pixelherodev
... right. Yeah that makes sense :P

1571796906
andrewrk
but, yeah, I'll be eyeing some of the std lib functions skeptically during the planned audit (

1571796942
pixelherodev
So what, going to have the community vote?

1571797158
andrewrk
I'm planning to personally audit every function before calling it stable

1571797504
pixelherodev
If stack tracing fails whenever a `catch` statement is present in the main function, that's a bug with Zig which I should probably file on GitHub, right?

1571797602
andrewrk
yes

1571798630
mikdusan
andrewrk: in line 1131 of

1571798755
mikdusan
i have a hash_eql function and I have to disable line 1311 and avoid interning const_bigint otherwise compiler_rt.zig test fails pretty badly

1571798854
andrewrk
mikdusan, semi-related but are you aware of hash_const_val and const_values_equal in analyze.cpp?

1571798864
mikdusan
hmm no

1571798988
mikdusan
thanks i'm looking at it now

1571798996
andrewrk
apologies for the inconsistent naming

1571799263
andrewrk
what strategy are you using to store the interned data? I considered it for a moment and realized that it could be done with a "set" data structure (only a key, no value) and the keys could all be pointers. so that would be 8 bytes overhead per interned value. e.g. if you interned the integers 0-99, it would be 800 bytes total overhead, no matter how many copies of any of these integers you had

1571799327
mikdusan
i am using hash_map with key/`ZigValue*` and value/bool (no value)

1571799370
andrewrk
yeah that sounds right. unfortunately c++ does not let you pass void for the value like zig does

1571799381
mikdusan
heh yup

1571799464
andrewrk
oh wow, there's an easy gain here by re-arranging hash map Entry struct

1571799465
mikdusan
and for the map check, i use a stack tmp ZigValue to avoid heap traffic, and if not found, then heap create, copying what is needed from tmp, and finishing off construction. then map put

1571799522
andrewrk
oh neat

1571799587
mikdusan
oh so re-order `struct Entry` can save a few bytes?

1571799730
andrewrk
mikdusan,

1571799744
andrewrk
if K and V are both pointer aligned it does not matter

1571799774
andrewrk
but if V is bool then this re-arranging puts the bool in what would already be padding

1571799783
mikdusan
ah

1571800348
andrewrk
hm turns out it doesn't matter because V is often a pointer, in which case it will be better to have the bool after the int

1571800377
andrewrk
in zig the compiler is allowed to choose the best layout automatically

1571800386
andrewrk
it would be too annoying to express this with c++ templates

1571800449
daurnimator
andrewrk: I'm not sure I follow on the doc-sidebar issue: why would you ever want the side nav to scroll with main area. I'd find that weird/disorientating

1571800495
andrewrk
you need some way to jump back to the nav from the contents. status quo has that when you click a header

1571800575
andrewrk
"where am I in the toc?" status quo can answer this question with no javascript

1571800599
daurnimator
usually in other docs I expect clicking the header of a section to A. do nothing B. set my fragment to that section so I can get a link to it to share

1571800655
daurnimator
To get back to TOC I would just press "home" on my keyboard. I've also seen "Back to top" links in other documentation

1571800803
daurnimator
You could hide the "back to top" links based on a media query too.

1571800888
andrewrk
the toc is longer than 1 screen

1571800905
daurnimator
so?

1571800930
andrewrk
going to the top does not take you to where you are in the toc

1571800933
daurnimator
though also, did you see in the lua-http docs how the TOC sections are expandable with just CSS?

1571808530
marler8997_
for some reason getenv("TERM") is returning null...hmmm

1571808538
pixelherodev
Managed a massive performance boost to the heap in my kernel :)

1571808838
marler8997_
andrewrk: any idea why os.environ would be empty?

1571808980
andrewrk
marler8997, yes:

1571809015
andrewrk
marler8997, if you have the time to file an issue for that TODO I would appreciate it

1571809324
marler8997_
yeah no problem

1571810127
andrewrk
marler8997, did you see that I gave you a workaround?

1571815578
traviss
does zig have array/slice designated initializers? ie int a[10] = { [1] = 1, [9] = 9 };

1571818726
marler8997_
andrewrk: yeah thanks, I've updated my TERM=dumb PR to use the workaround getenvC

1571825684
Snektron
traviss: no

1571825728
traviss
ok thanks

1571826272
traviss
turns out i didn't need them because of @tagType(enumVar)

1571828988
traviss
s/tagType/tagName

1571831482
jokoon
can I compile zig from c++, and call zig function from c++ and vice versa?

1571832086
mq32
jokoon: you can compile C++ with zig and then use external functions to communicate between

1571832094
mq32
or you can compile object files with your c++ compiler and link them

1571832162
jokoon
I want to use a language to write scripts, for a video game

1571832178
jokoon
also I don't really know if zig is fast to compiel

1571832180
jokoon
compile

1571860953
traviss
is it possible to pass flags to the zig compiler to which set global consts in a .zig file similar to -D[macro]=[value] for r c code?

1571861157
andrewrk
traviss, yes but the API is a bit experimental. look at std.build.LibExeObjStep.addBuildOption

1571861184
andrewrk
after this, you can @import("build_options") in the respective application/library

1571861205
traviss
ah, ok will try that out

1571861360
riba
do i use std.cstr.cmp for comparing c strings or is there something better?

1571861379
riba
and how do i compare regular strings

1571861416
riba
also is 0 false?

1571861422
traviss
regular strings i believe with std.mem.cmp(u8, s1, s2)

1571861728
traviss
sorry, std.mem.eql(u8, s1, s2)

1571861770
riba
are there any string convenience functions?

1571861772
riba
split, etc

1571861872
riba
and are pointers to pointers even a thing

1571861880
riba
i think i am too retarded to use this language

1571861907
riba
i need to provide a callback to C code that takes a ** argument

1571861934
riba
i tried it like this: [*c][*c]

1571861964
riba
now i want to check both pointers to null

1571861982
riba
and "if (stanza == null || stanza.* == null)" does not work

1571861996
andrewrk
riba, have a look at std.mem.tokenize and std.mem.separate

1571861997
traviss
there is std.mem.splitIterator

1571862030
riba
i assume this is because c pointers are always optional or something?

1571862046
riba
and i cannot dereference it even though i just checked it?

1571862055
riba
andrewrk: cool, thanks

1571862067
andrewrk
riba, please, understand that you're using beta software, and make sure that if you're asking for help, it's actually asking for help and not complaining. don't appreciate this "retarded" comment

1571862132
riba
andrewrk: i did not think that talking about myself is complaining about this software

1571862133
andrewrk
what you're referring to is called context-aware types, I think, recently made famous by kotlin. zig does not do this everywhere

1571862184
riba
i'll try to watch the words i use though? really didn't mean to criticize anyone but me

1571862210
andrewrk
just try to keep the negative energy down, it's all good

1571862227
traviss
check here for comparing against nulls maybe:

1571862229
andrewrk
so it looks like you're trying to use translated C code yeah?

1571862299
riba
andrewrk: i am trying to translate my own C code, yes

1571862313
andrewrk
you never need to type [*c] into your keyboard

1571862313
traviss
and an example of using mem.separate:

1571862392
riba
traviss: i'm trying to use "guard clauses", and i think the if-construct for unpacking optionals does not help me so i actually have to compare with null

1571862412
riba
andrewrk: i'm trying to write a function that i will pass to the C code as a callback

1571862432
andrewrk
riba, yes you will choose the correct pointer type and the answer is never [*c]

1571862486
andrewrk


1571862524
riba
so even if i get this pointer from C code it will not be a [*c]?

1571862547
andrewrk
the answer to this question is in

1571862564
traviss
andrewk: could he use translate-c with his c code to see how zig would translate it?

1571862582
riba
The only valid reason for using a C pointer is in auto-generated code from translating C code.

1571862585
andrewrk
traviss, yes, if it is simple enough. translate-c is not yet complete

1571862585
riba
all right

1571862620
riba
i already got a part running where i use a [*c], i'll just see what it does without it

1571862663
andrewrk
I think you should read the documentation and understand how it works instead of guessing

1571862864
riba
i think my problem is that i only can invest half an hour at a time and forget half of what i read

1571862879
traviss
riba i have almost zero experience with this, but you might try `zig translate-c file.c --library c` and see if it works

1571862882
riba
in any case, i found why i had to type [*c] in the first place, which is probably where i got it from

1571862928
riba
a struct has a function member which expects a [*c] argument

1571862950
riba
when writing this function i did have to manually type [*c]

1571862979
andrewrk
that will be a compile error after

1571863023
andrewrk
as I said, you never need to type [*c] into your keyboard

1571863059
riba
but i get a compile error now from using this autoimported struct

1571863063
companion_cube
yep, you should have a snippet for it

1571863089
riba
i'll check again that i didn't add the [*c] myself when copying the autogenerated definition to overwrite some other part

1571863183
riba
here, this line was autogenerated during cimport:

1571863184
riba
load: ?extern fn ([*c]PurplePlugin) gboolean

1571863221
riba
now i changed the signature to [*] instead of [*c]

1571863228
riba
and it won't compile

1571863239
riba
did i get you wrong and i'm supposed to use something else entirely?

1571863255
mq32
is it an array of PurplePlugin or a single PurplePlugin?

1571863258
riba
i mean the signature of my implemented load function

1571863276
andrewrk
riba, what is the compile error you get when you change to [*] ?

1571863281
riba
it is a pointer to a single PurplePlugin struct

1571863292
mq32
then [*]PurplePlugin is correct

1571863298
andrewrk
riba, please at least read

1571863312
andrewrk
*PurposePlugin is single item

1571863312
riba
andrewrk: why do you assume i didn't?

1571863318
riba
error: expected type 'extern fn([*c].cimport:3:11.struct__PurplePlugin) c_int',

1571863321
riba
found 'extern fn([*].cimport:3:11.struct__PurplePlugin) c_int

1571863329
andrewrk
riba, because you chose [*] instead of *

1571863344
mq32
<mq32> then [*]PurplePlugin is correct

1571863345
riba
andrewrk: that is because i am tired :D

1571863353
mq32
i am stupid. it should be *PurplePlugin instead.... andrewrk is right

1571863402
riba
but i'm not the only one confused apparently

1571863413
riba
maybe there is some better syntax

1571863423
riba
but it does make sense

1571863476
riba
well, it still does not compile

1571863477
andrewrk
riba, please can I see the whole error message

1571863482
riba
andrewrk: ok

1571863512
riba
you mean the whole trace?

1571863596
traviss
try using

1571863836
riba


1571863959
andrewrk
riba, do you see the clues?

1571864067
riba
andrewrk: i do not understand them

1571864118
traviss
what happens if you use ?*PurplePlugin

1571864218
riba
traviss: i get more errors that seem even more intimidating

1571864236
riba
believe it or not i tried it but that's why i decided it's wrong

1571864269
andrewrk
riba, if you want to ask for help in this channel you need to put more effort in. we are happy to help but you cannot say these things, you need to ask questions instead of complaining. this is the last warning

1571864291
riba
andrewrk: i really don't understand why you think i'm complaining

1571864300
riba
where did i say anything negative

1571864325
traviss
riba try again. maybe use this tool <zig command> | curl -F 'clbin=<-'

1571864330
riba
maybe i don't get it because english is not my first language

1571864420
donpdonp
ouch. it might help to have another channel #zig-beginners or #zignewbs or some such.

1571864425
edr
wow

1571864457
andrewrk
this is the zig beginners channel

1571864469
edr
that is disheartening

1571864476
donpdonp
i think others were still willing to help out riba, it just got distracting/help-vampire for those way beyond his/her level

1571864555
andrewrk
please trust my decision making here. this individual has caused problems in the past and been temporarily banned before. there is no room in the community for bad attitudes

1571864659
andrewrk
newbies are more than welcome, but low-effort, high-demand communication is not welcome here.

1571865625
traviss
+1 for the #zig-beginners channel idea

1571865911
andrewrk
there is a difference between being a beginner and being willfully ignorant

1571866554
traviss
sure. just seems like it might serve to keep the signal to noise ratio higher here if there was a channel like that.  and give people like me a place to learn by helping others.

1571866605
andrewrk
I don't think that beginner questions are noise, I think they are very on topic

1571866648
andrewrk
I appreciate the sense of helpfulness and caring that you're showing

1571866712
traviss
true. maybe something like #zig-discuss would be a better name

1571866767
andrewrk
you are welcome to advertise unofficial communities on

1571868225
traviss
thank you. i didn't realize there is an unofficial discord for zig users posted there with a beginners channel. nice.

1571868244
donpdonp
i didnt either o&O

1571873049
emekankurumeh[m]
andrewrk: i found this gist that has details on how to get the windows PEB on platforms other than x86_64 and i386:

1571873064
emekankurumeh[m]
i'm not sure how trustworthy it is though

1571873215
emekankurumeh[m]
and it's in msvc intrinsics

1571873287
daurnimator
emekankurumeh[m]: is this an open question we have? I can probably do some research if we need it

1571873429
emekankurumeh[m]
not exactly, but andrew wanted to to try using the PEB to access a processes's information rather than using apis with a possibility of failure

1571873482
emekankurumeh[m]
he ported some code for getting the PEB from midipix, but they don't have code for windows on more exotic architectures

1571873483
daurnimator
emekankurumeh[m]: you can...... though it's not super stable: has changed between service packs before....

1571873522
daurnimator
emekankurumeh[m]: does anyone run windows on other than x86/i686/arm?

1571873568
emekankurumeh[m]
midipix didn't have code for arm, the other platforms were just included in the gist

1571873607
daurnimator
as if anyone still uses windows on alpha :P

1571873659
daurnimator
(discontinued before windows 2000 was released)

1571873663
Snektron
theres always that one person

1571873717
emekankurumeh[m]
windows embedded?

1571873848
ky0ko
from my understanding modern windows embedded basically doesn't run on anything that isn't x86/arm, even though it technically still supports mips and superh

1571873863
ky0ko
it's also a different platform than windows

1571873907
emekankurumeh[m]
windows embedded was also discontinued in favor of windows iot

1571873915
ky0ko
less discontinued, more renamed

1571874012
ky0ko
actually, no, i should be clearer than that: windows embedded compact supports mips and superh, technically. windows embedded proper is just slimmed down windows, and was renamed to windows iot

1571874050
ky0ko
except for the things named windows 10 iot that are actually windows embedded compact

1571874066
emekankurumeh[m]
if we could have a way to access the result location, could we technically stack allocate in the stack of the calling from the function that called?

1571874208
Snektron
Isn't that what it does?

1571874294
emekankurumeh[m]
i mean do so directly, so we can for example have a unicode decoder allocate it's result in the frame of the function that called it, but treat is as a normal array

1571874317
emekankurumeh[m]
so you can "return" the array, but not worry about a dangling pointer

1571874359
emekankurumeh[m]
\ pointer to a stack var

1571874363
Snektron
Sounds dangerously close to VLA

1571874409
Snektron
VLA's are not bretty bad for performance

1571874418
Snektron
i mean, not bretty good

1571874448
Snektron
You can allocate a fixed buffer and assign to that, but at that point you can also just return the array i suppose

1571874472
Snektron
actually, you have to return the array then

1571874495
Snektron
but i think its more efficient to just return an int in the specific case of unicode

