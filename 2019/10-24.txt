1571879117
andrewrk
Snektron, I don't think you are thinking of the thing  emekankurumeh[m] is

1571879169
andrewrk
There is an issue open for this:

1571879218
andrewrk
Result location was the hard part. This issue is not nearly as difficult.

1571879249
andrewrk
This issue is hard, however:

1571899190
mq32
<andrewrk> I don't think that beginner questions are noise, I think they are very on topic

1571899247
mq32
+1, even if some beginners get on your nerves

1571899383
mq32
ky0ko: i have some windows ce 6.0 devices at my hands, so: people still manufactor devices with windows embedded

1571899632
mq32
as i just recognized, one could understand my second-previous message wrong: welcome beginners even if the get on your nerves

1571907897
Snektron
andrewrk: You'd think if you eliminate all basic assignments in the example of the first issue, it'd be fixed automatically

1571907913
Snektron
I think my compiler for some compiler construction class did that

1571908070
Snektron
Although that was on register-level

1571936324
ky0ko
mq32, yes, i work with those devices - i'm an embedded systems software engineer by trade. the company i work for helps others port their old software to newer operating systems, whether that's newer versions of wince, windows proper, linux, or something else

1571937201
mq32
oh, another embedded coder :)

1571937337
ky0ko
yeah, i started out that way, and then the small embedded systems manufacturer i was working for learned that i knew linux and c, and moved me from being a field technician to being an embedded linux engineer, which worked out great

1571937354
ky0ko
until they lost a big client for reasons i'd warned them about years in advance, and had to lay people off

1571937362
mq32
oh damn

1571937376
mq32
i'm quite happy with my position here. i'm doing inhouse-tech

1571937379
ky0ko
i eventually settled down in a better position across the country though so it's all good

1571937642
ky0ko
also i just want to say, to andrewrk and everyone else working on the language, i have really been appreciating zig the more of it i learn and write. i've had much less trouble with it than some other languages like rust and go, and it often really just 'makes sense' to me how it does things

1571937677
ky0ko
i've been porting a fairly old, bitrotted, >100,000 sloc project from c to zig as a learning project, and having a pretty enjoyable time of it

1571937763
andrewrk
happy to hear that

1571941637
andrewrk
I've been spending the last hour trying to launch a scaleway arm vps instance. they advertise ARM servers but only show x86 servers in the list

1571942053
andrewrk
also tried an AWS EC2 server and that didn't boot up

1571945976
andrewrk
ah, scaleway requires phone number verification and customer support request before allowing arm hardware access

1571947658
ky0ko
so, i've hit a compiler error trying to port some c code to zig, trying to put together a data structure that other c code in the project works with, and i'm trying to find a workaround

1571947659
ky0ko


1571947871
andrewrk
ky0ko, ah, you've hit a compiler bug. that one looks like it might be easy to solve, if you wouldn't mind filing a bug I think it could be taken care of relatively quickly

1571947898
andrewrk
as for your code, I think it will be fixed with 1 modification: change the type to [*]?[*]const u8

1571947913
andrewrk
because your inner type can be null, you need the ?

1571947981
ky0ko
ah yes of course, thanks. that compiler error still occurs, i'll file the bug report!

1571948101
andrewrk
ky0ko, oh, your outer type should be an array too. [_]?[*]const u8

1571948154
ky0ko
when i do that, i get "error: expected type '[*c][*c]const u8', found '[11]?[*]const u8'"

1571948175
andrewrk
that's good, you just need to take the address then

1571948196
ky0ko
oh hey it built

1571948214
andrewrk
one of the general rules of the type system is that zig won't make a reference without your consent

1571948239
andrewrk
which is probably an argument for making |x| capture values go back to copying unless |*x| is specified

1571948301
andrewrk
your bug is still valid. some parts of the compiler incorrectly assert() instead of making a compile error

1571948345
andrewrk
ah this is yet another regression from result location semantics

1571948522
ky0ko
submitted as #3524

1571948629
kllr_sbstn
Hey Andrew, will there be a stream today?

1571948668
andrewrk
ky0ko, fixed. thanks

1571948684
andrewrk
kllr_sbstn, yeah I'll do one later in the evening

1571948701
kllr_sbstn
andrewrk, nice! looking forward to it

1571951300
Snektron
So i've been thinking

1571951340
Snektron
I need to make an xml parser for something, and it turns out to be quite nasty since im a perfectionist

1571951347
Snektron
But i wonder if it can work with async functiojs

1571951365
Snektron
At least the lexing part

1571951541
andrewrk
I don't think async functions is the right solution to text processing. you're thinking of generators

1571951549
andrewrk
which are being considered

1571951573
Snektron
Aren't those functionally pretty equivalent though?

1571951588
Snektron
The only difference is you write your result to a buffer before you suspend

1571951614
Snektron
I'm trying to think of a way to do it without too many allocations, and the best way even would be to act directly upon a stream

1571951641
Snektron
my current idea was having a Lexer struct with a ?State member, then a member function next() !?u32

1571951808
Snektron


1571951832
Snektron
(after .next() returns null, lexer.state would contain the new state)

1571952111
andrewrk
it would make more sense to me to have it be while (try lexer.next()) |token| {}

1571952119
andrewrk
where token is a tagged union

1571952140
Snektron
Yes, but then you need to allocate the space for the token somewhere

1571952178
Snektron
std.json takes a similar approach i believe, though its a bit different there

1571952226
andrewrk
I suggest to accept a buffer on init, and return error.TokenTooBig if it doesn't fit

1571952240
andrewrk
and document that the strings become invalid after every call to next()

1571952278
andrewrk
this will be very reasonable API for most use cases: they will support a maximum <tag> size and return an error if one is too long

1571952327
Snektron
hmm

1571952349
Snektron
maybe another option is to supply a function in the next function to which the token data is written

1571952394
Snektron
The idea would be that you can pass different functions depending on the token, but then you'd need to know the token beforehand, which is the same as my initial idea

1571952433
Snektron
Probably better to just accept an allocator instead of a buffer

1571952451
Snektron
that way the allocated space for a token can grow dynamically, or be allocated statically in the case of a fixed buffer

1571952476
andrewrk
a low level parser would allow streaming the long content, and have a fixed upper bound for small content

1571952533
andrewrk
small content being tag names and attribute names. long content being data between tags. attr values would probably be "long content"

1571952543
Snektron
but thats pretty much the same as the snippet

1571952547
Snektron
except instead of a single char it would return a buffer

1571952647
Snektron
and handle long content EAGAIN style i suppose

1571952885
andrewrk
tgschultz, I have an idea which partially addresses the annoyances of error sets and streams

1571952994
andrewrk
the idea is that the buffering output stream also buffer errors. so writing to this stream cannot fail directly. but flush() can fail. and then make it always be anyerror. one is expected to do an @errSetCast with flush.

1571953011
andrewrk
this makes buffered output stream not generic

1571953051
andrewrk
it also models how people want to use output streams. write a bunch of stuff, check for error later. this is what C FILE* does

1571953149
Snektron
At what point can writing to a buffer fail?

1571953162
Snektron
except when its out of bounds of course

1571953262
andrewrk
not a fixed buffer - buffered. there is an underlying output stream which could have any error set

1571953297
andrewrk
buffered just means that you can write 1 byte, 4 bytes, 3 bytes, 10 bytes, 100 bytes, and then flush all 118 bytes with a single write()

1571953302
Snektron
Yes, but that can only happen on a flush

1571953321
andrewrk
if you fill the buffer, then it flushes to empty the buffer and make room for more data

1571953352
Snektron
So the actual error can only happen on a flush, but i suppose you need to be able to flush in write() so you still need to make that return an error

1571953393
andrewrk
yes, but I'm also suggesting that this error itself would be buffered, e.g. since zig errors are values, just save the first error that occurs, and then return that on flush()

1571953409
andrewrk
on the public flush function

1571953472
Snektron
What would that help to deal with error set annoyances?

1571953483
Snektron
Wont that imply that the user has to call flush manually?

1571953491
andrewrk
because it would not be generic

1571953520
andrewrk
calling flush manually is already a requirement of std.io.BufferedOutStream

1571953558
Snektron
Oh

1571953582
jjido
ah, I missed the start - what wouldn't be generic you are talking about?

1571953613
andrewrk
scroll up to "I have an idea..."

1571953685
andrewrk
so if this turns out being nice, then most APIs which want to accept output streams would accept a *std.io.BufferedOutStream, and that would not require making your API generic

1571953770
jjido
I like the idea of "error on flush" but yeah, calling flush manually... Let me check the API

1571953816
Snektron
The generic streams are annoying yes

1571954609
jjido
Where can I find the source for std.io.BufferedOutStream?

1571954714
emekankurumeh[m]
it has the same methods as Stream

1571954764
emekankurumeh[m]
i just had the weirdest error, i was hitting a compiler assertion when trying usingnamespace a file with just comments

1571954786
emekankurumeh[m]
then i cut and pasted the comments and i can't reproduce the error anymore

1571955229
andrewrk
jjido, use a tool to search the std lib directory for BufferedOutStream

1571955460
jjido
ah I was looking inside the io directory. Thanks

1571955756
jjido
manual flush is only required if the buffer is not full. If you write more than a buffer's fill there is automatic flush which can throw an error

1571955915
jjido
so are you going to defer that error until there is a manual flush?

1571956171
jjido
maybe you should refrain from flushing the stream automatically when the written bytes fill the buffer exactly in that case - someone may be tempted to use a buffer exactly the right size and bypass manual flushing, thus losing error information

1571958824
daurnimator
Snektron: xml parsers... just use libexpat. making your own is a 2 year excersise in pain. I know from experience

1571958855
emekankurumeh[m]
just rewrite in zig: jwiz

1571959549
daurnimator
andrewrk: you didn't have to rent on scaleway; as we've done before, I can spin up servers for us. Let me see if I can give you permissions on the account somehow...

1571959577
andrewrk
daurnimator, oh, forgot about that. can I have a 32 bit one for a couple hours?

1571959593
andrewrk
also, wtf, clang just gave me error: the clang compiler does not support '-march=native' on aarch64

1571959733
andrewrk
you know what this means... time to implement -march=native in zig and pass the specific target flags to clang

1571960052
ky0ko
-march, -mtune, and -mcpu all have different semantics on different architectures in gcc (they're specified by the backend), and clang tries to emulate that

1571960067
daurnimator
andrewrk: looks like I can't give you permissions to create servers. will ping organisers to see if I can gain that permission to delegate to you

1571960073
ky0ko
you're certain to see the same problem on mips and powerpc, which iirc both expect -mcpu and don't have a "native" equivalent

1571960197
daurnimator
andrewrk: the CPU we get is an Ampere EMAG. I think it's capable of both 32bit and 64bit modes.

1571960334
daurnimator
andrewrk: let me know if you want me to boot one for you (and what OS; centos 7 and ubuntu 16.04 are quick to boot. others take like 20 mins)

1571960341
andrewrk
we can implement CPU detection logic in zig itself, and call that code from stage1

1571960392
daurnimator
andrewrk: also tell me which ssh key... you have 5 active on your github

1571960434
andrewrk
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0fL6z+FD6aKI43RGCAyr7TUuwYDkyAftsQMWqBrQoYci/Ru0hdhUwMXopqcwcaOpTxzB06F+YZ6cYWYtKOTh+mTgac1x9o4F6cOe1zEAN7fYFUWsm1e4lFBpjG7uGx8fZSzUDRa52G+2fgubPDz7lsCJBCSPN58yjSjg2zF6UP/COOY3bdQwuU62bUR6y8KT6Vx69PCcU0ayPvN3GOoLsw5S8MpjgxN0zG7eP/bNgs0FFWj+e7QSWXh2Bp+aVLhxnGGbka8OPg4Ndr+DejAegfVzyuYlCiH6HXitN0f+MpNBUVA4PTj21R57bjq5xNlcm85XY/yYSG5QRenNrMlwPw== andy@laptop

1571960567
daurnimator
andrewrk: k. os choice?

1571960602
andrewrk
debian buster

1571960629
daurnimator
latest debian available is 9 (stretch I thihnk?)

1571960754
andrewrk
that is fine if it has docker

1571960763
daurnimator
can do nixos 19.03 if you want?

1571960834
andrewrk
that's fine

1571960884
daurnimator
k. booting now. give it 20 mins to be ready. pming you ip

1571960954
andrewrk
wow, drone cloud gives you a beefy machine. + make -j96 install

1571960981
andrewrk
I should look into parallelizing these tests

1571961019
daurnimator
sadly the clock speeds on the huge-core-count arm boxes isn't great

1571961135
andrewrk
hm I think it might be time to fix C ABI detection on non-glibc linuxes when zig is statically built

1571961230
andrewrk
we need zig code that can read an elf file and read the list of dynamically linked libraries

1571961242
andrewrk
basically implement ldd in zig. any takers?

1571961290
andrewrk
here's the ARM CI running behavior tests:

1571961389
daurnimator
andrewrk: I still have a PR open refactoring the elf/dwarf code; you once commented you had issues with the code. but I had no problems. could you try again?

1571961399
andrewrk
yes

1571961597
andrewrk
daurnimator, what PR is that?

