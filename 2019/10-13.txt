1570932861
halbeno
wouldn't "" and c"" work better for multi-line strings? (or literally anything other than // )

1570932879
halbeno
"There are no multiline comments in Zig (e.g. like /* */ comments in C). This helps allow Zig to have the property that each line of code can be tokenized out of context."

1570932930
halbeno
it seems inconsistent, like the string syntax was made to spite the comment syntax

1570932974
halbeno
I'm only 10% of the way through reading the documentation, that's just a first impression

1570933099
scientes
halbeno, you can't put newlines in a string

1570933103
scientes
without doing \n

1570933493
halbeno
scientes,

1570933508
scientes
yes, this is better than in C

1570933522
scientes
if you really want, you can just use insanely long lines

1570933527
scientes
or use @includeFile

1570933532
scientes
or whatever itscalled

1570933667
halbeno
it seems ambiguous with comments

1570933730
halbeno
I was just suggesting that this would make more sense:

1570933733
halbeno
""int main(int argc, char **argv) {

1570933789
halbeno
I haven't read the entire documentation yet though, so I don't know if "" is would be ambiguous with something else

1570933844
halbeno
just my first impression

1570937005
telemach
I think it's not ambiguous as multiline comments are about multiple logical lines, while \\ is about forcing few physical lines into a single  logical line

1570937825
halbeno


1570937851
halbeno
and then the comment syntax is reused to break that property

1570937878
halbeno
it's funny at the very least

1570940963
pixelherodev
I've been going over the docs, and I can't find where "anyerror!type" is explained - can someone point me in the right direction?

1570941011
pixelherodev
Oh wait never mind found it :P

1570950623
pixelherodev
Wait, can integers have any size? e.g. u3, i293, etc?

1570950683
emekankurumeh[m]
yes, but llvm craps out at 2^16 bit sized integers

1570950730
pixelherodev
I was just confused because there's specific sizes listed under primitives but in other places in the docs it uses e.g. u2

1570950731
pixelherodev
Thanks!

1570950816
emekankurumeh[m]
happy to help!

1570951077
daurnimator
halbeno: // is different to \\

1570951129
halbeno
daurnimator, apparently I can't read, thanks

1570951440
pixelherodev
The self parameter is passed implicitly with dot syntax, but must be specified explicitly, right?

1570951500
daurnimator
pixelherodev: correct. though there is an issue that might change that.

1570951546
pixelherodev
Alright, thanks

1570951758
pixelherodev
Is there a printf equivalent?

1570951778
pixelherodev
Never mind, quick search found it in the docs

1570951786
pixelherodev
Really need to learn to ask

1570951829
emekankurumeh[m]
"found it in the docs" now that's what i like to hear...

1570953411
pixelherodev
Is there a compiler option to only build an object file instead of build-exe? Can't find anything useful in the output of `zig --help`

1570953426
emekankurumeh[m]
build-obj

1570953427
pixelherodev
... because I was glancing right over it. Sorry!

1570953437
pixelherodev
Thanks

1570953454
pixelherodev
I was looking under compiler options instead of commands :P

1570953822
pixelherodev
What's the correct way to build multiple object files into one binary?

1570953846
pixelherodev
The --help output says "source or output *files*", not file, but with  multiple files it errors out

1570954010
pixelherodev
... eh, think I found a hacky way to do it

1570954989
daurnimator
pixelherodev: build-exe and build-lib should take in object files

1570955034
pixelherodev
One file yes; if two are passed it says "extra option received blah blah"

1570955049
pixelherodev
So in the Makefile, I set `zig build-exe $(OBJ:%=--object %) --linker-script src/linker.ld -target i386-freestanding --output-dir bin --name $(@:bin/%=%)` as the full command line

1570955067
pixelherodev
Relevant portion: `$(OBJ:%=--object %)`. For each object file, passed `--object FILE`

1570955072
daurnimator
pixelherodev: o.o makefile :P

1570955085
daurnimator
pixelherodev: here in zig land we use build.zig ;)

1570955096
pixelherodev
Well yeah, it's currently easier than trying to figure out build.zig for a freestanding target from the relatively poor docs

1570955110
pixelherodev
A lot of things are well-documented in zig, the build system isn't one of them at the moment AFAICT

1570955127
pixelherodev
It's also noticeably faster ATM

1570955130
daurnimator
pixelherodev: I think you just call setTarget with freestanding

1570955141
pixelherodev
Except setTarget is deprecated ;)

1570955144
daurnimator
pixelherodev: heh. docs for the whole standard library only came into existence last week

1570956224
pixelherodev
Does the standard library have anything like sprintf?

1570956308
pixelherodev
Wait, better question: where are the new standard library docs?

1570956317
pixelherodev
They're still not linked from the rest of the documentation

1570956837
daurnimator
pixelherodev:

1570956884
daurnimator
pixelherodev: std.fmt.bufPrint I think

1570957032
daurnimator
pixelherodev: there's also std.fmt.allocPrint if you want it to allocate memory for you

1570957139
pixelherodev
Yeah, allocPrint isn't an option yet - I haven't implemented the heap yet :P

1570957144
pixelherodev
Thanks for the links!

1570957328
pixelherodev
What's the context and Errors args for std.fmt.format?

1570957333
pixelherodev
s/'s/ are/

1570957391
daurnimator
pixelherodev: your `output` callback is called with `context`. your callback is only allowed to throw the errors you pass as allowed.

1570957425
pixelherodev
Ahh thanks!

1570957470
daurnimator
pixelherodev: you don't need to implement a heap btw.... you can pass a stack allocator...

1570957490
daurnimator
pixelherodev: e.g. see std.heap.FixedBufferAllocator

1570957506
daurnimator
though at that point you might as well use bufPrint

1570957532
pixelherodev
Which is why I didn't want to do it :)

1570957555
pixelherodev
I think it'd be better to just implement a print function over std.fmt.format using an output function that dumps to the terminal

1570957587
pixelherodev
If I want to leave context and errors blank, what's the best option? 0 for context and anyerror as error set?

1570957592
daurnimator
pixelherodev: that's essentially what std.debug.warn does

1570957627
daurnimator
pixelherodev: note that outStream objects have a print() method that uses std.fmt

1570957651
daurnimator
pixelherodev: void for context and the empty error set `error{}` for the error.

1570957651
nrdmn
pixelherodev: i386-freestanding? what are you working on?

1570957667
pixelherodev
An emulator-as-a-kernel :)

1570957783
nrdmn
what are you emulating?

1570957824
pixelherodev
It's a completely custom system - custom ISA, custom bus, etc

1570957977
nrdmn
sounds interesting

1570958112
pixelherodev
daurnimator, with "void" as context I get the error "parameter of type 'type' requires comptime"

1570958212
daurnimator
pixelherodev: void is the type. you need a value of type void. I think you get one with: `void{}`

1570958220
pixelherodev
Ahhh, thanks :P

1570958232
pixelherodev
Yeah that works

1570958341
nrdmn
daurnimator: is `void{}` special void syntax? or does this work with all 0-sized types?

1570958402
daurnimator
nrdmn: imagine that void is `struct{}`. `struct {}{}` is valid.

1570958612
nrdmn
hmm, so void{} and struct{}{} seem to work, but not i0{}, type{}, or @OpaqueType(){}

1570958656
nrdmn
also no c_void{}

1570958830
daurnimator
nrdmn: well you can't instantiate an opaque type, so that one makes sense

1570958855
daurnimator
nrdmn: then for some reason the syntax for integers is parenthesis instead: `i0(0)` should work I think?

1570958863
pixelherodev
Thanks for the help, I've got a working printf now!

1570959162
daurnimator
nrdmn: likewise you can't instantiate a type, so that one makes sense

1570959199
daurnimator
c_void{} makes less sense...

1570959559
pixelherodev
If I have an arbitrary `[*]const u8`, how can I force it to be treated as a string for the purposes of printing it? Format is automatically converting it to `u8@ADDRESS` instead of printing the string at that address...

1570959574
pixelherodev
Does it need to be a slice?

1570959854
pixelherodev
Yeah, got it

1570959865
pixelherodev
Just had to implement a simple strlen(), and do str[0..strlen(str)]

1570959884
nrdmn
daurnimator: yes you can instantiate a type

1570959893
nrdmn
"type" is an instance of the type type

1570959982
mq32
pixelherodev, the function should already exist in std.mem

1570960011
nrdmn
pixelherodev: use {s} instead of {} to print c strings

1570960013
mq32


1570960027
nrdmn
then you won't need to iterate over the string once to determine the length and once to print it

1570960047
pixelherodev
huh. Thanks!

1570960098
nrdmn
daurnimator: and all other types are also instances of type

1570960197
daurnimator
pixelherodev: also strlen is pronounced `std.mem.len(u8, ptr)` in zig

1570960219
nrdmn
you can even have pointers of type :D

1570960240
pixelherodev
Good to know

1570960281
daurnimator
pixelherodev: also see std.mem.toSliceConst

1570960379
pixelherodev
What's the difference between toSliceConst and toSlice with a const type?

1570960391
daurnimator
pixelherodev: arguments are

1570960422
daurnimator
pixelherodev: `const sometype` is not a type.

1570960434
daurnimator
pixelherodev: `[]const sometype` is

1570960443
pixelherodev
That's what I meant

1570960458
pixelherodev
Ahhh, I get it now I think

1570960474
daurnimator
pixelherodev: you can't do: `toSlice(const sometype, myptr)`

1570960498
pixelherodev
Okay then, why is toSliceConst needed if you can just do `varname : []const u8 = toSlice`?

1570960538
daurnimator
pixelherodev: because you can't pass a slice of consts to toSlice: it'll error

1570960554
daurnimator
though.... now you've got me thinking. why

1570960583
pixelherodev
Ohh right, that's obvious in retrospect

1570960605
daurnimator
Did we just stumble upon a solution to

1570962725
bgiannan
So say i'd like to know exactly which error can occur here, how can i get the compiler to list them ?

1570962815
Snektron
yeah ive noticed error messages about error sets are less than ideal

1570962855
Snektron
ideally they should be listed out until the first error alias

1570964079
Snektron
daurnimator: Wouldn't that get confusing with const variables?

1570964111
Snektron
i thing `const i: const u32 = 10` is kind weird

1570964142
Snektron
what would it even mean to write `var i: const u32 = 10;`

1570964258
Snektron
and what about internal mutability or other moments when you want to have one field const but not another

1570969752
pixelherodev
... well this is odd. `const begin1 = mmap.addr;` is causing a boot loop :(

1570969807
pixelherodev
mmap is a

1570969850
pixelherodev
If I cast it to u32, everything's fine.

1570969892
nrdmn
you mean the assignment causes a boot loop?

1570969937
pixelherodev
Apparently.

1570969957
pixelherodev
Commenting it out, everything's fine; uncommenting it puts it right back to boot looping

1570969975
pixelherodev
Not just that one line - basically anything involving u64s seems to cause problems for some reason

1570970007
pixelherodev
I sincerely hope this is something stupid I did and not e.g. a compiler bug, but I'm blanking on what I could possibly have done to cause

1570970039
pixelherodev
`const begin1 = @intCast(u32, mmap.addr);` is fine, `const begin1 = @intCast(u64, mmap.addr);` boot loops.

1570970052
nrdmn
did you try explicitly specifying the alignment?

1570970064
pixelherodev
Nope

1570970067
nrdmn
this should not be necessary but I think I've had a similar issue

1570970078
nrdmn
`const begin1 align(8) = mmap.addr;`

1570970096
mq32
pixelherodev you're writing bare metal code for x86_64?

1570970104
pixelherodev
x86, not x64

1570970109
pixelherodev
nrdmn, doesn't help

1570970111
mq32
so target i386?

1570970117
pixelherodev
i386-freestanding, yes

1570970128
mq32
probably it's a codegen bug that tries to use an x86_64 instruction without having long-mode activated?

1570970164
pixelherodev
If I'd already set up the IDT and set up fault handlers, it'd be easy to test that :P

1570970176
pixelherodev
Fortunately, I can just inspect the assembly

1570970388
pixelherodev
Or not

1570970461
pixelherodev
On a whim, I tried casting to u128, and that worked fine

1570970462
nrdmn
why don't you try x86_64-uefi-msvc? ;) Your firmware'll drop you off right into long mode

1570970471
pixelherodev
Because that's not my target.

1570970487
mq32
what do you want to achieve?

1570970517
pixelherodev
Literally it's just meant to be an alias

1570970554
pixelherodev
I noticed some broken firmwares report the same region of memory multiple times, so I'm basically doing an AABB box check to see if the two regions overlap

1570970578
pixelherodev
Even more interestingly, if cast to u63 or u65, it's fine

1570970587
pixelherodev
It's only when it's

1570970663
pixelherodev
Given I don't plan on using PAE, I can probably just force everything to 32-bit and ignore the problem

1570970667
nrdmn
have you tried debugging it with gdb?

1570970712
pixelherodev
I didn't exactly hook up a GDB stub yet

1570970735
nrdmn
qemu has gdb support

1570970758
pixelherodev
... yes, but that doesn't help if the kernel doesn't support it...

1570970886
mq32
pixelherodev: it does

1570970897
mq32
you can hook GDB to your VM CPU, not to the program running in the VM

1570970907
mq32
so you get every crash, you can do breakpoints on any point in the kernel

1570970991
nrdmn
start qemu with `-s -S` and attach gdb with `target remote localhost:1234`

1570971126
pixelherodev
Whelp, not important right now anyways - the block it was checking was reserved anyways; if only available blocks are tested, the issue never comes up :P

1570971157
pixelherodev
This is definitely the best way to deal with issues. Definitely.

1570971558
mq32
is someone firm with socket programming in linux?

1570971572
mq32
i want multiple "listeners" on the same computer that can receive broadcasts

1570971646
mq32
ah, just ignore me, i should send to the broadcast address if i want to receive broadcasts :D

1570977916
daurnimator
mq32: SO_BROADCAST

1570977970
mq32
daurnimator, yeah i got that already

1570977988
mq32
but interestingly if i don't send to broadcast, a single socket will receive the message, not all

1570978039
daurnimator
mq32: how did you set up the listening sockets?

1570978046
daurnimator
mq32: did you use REUSEADDR/REUSEPORT?

1570978059
mq32
SO_REUSEADDR, SO_BROADCAST = 1

1570978064
mq32
bind to 0.0.0.0

1570978164
daurnimator
mq32: have you come across

1570978278
mq32
daurnimator: nc -ub 255.255.255.255 portnum and go for it :D

1570978721
mouseghost
hi, so 1. are there usable sockets already? ive seen something in std.net; 2. if not, then can i use C interop through mingw on windows?

1570978971
mq32
mouseghost, you can use posix sockets via std.os.socket

1570978986
mq32
and yes, you should be able to use winsock2 via mingw

1570978990
mq32
and libc linking

1570979016
mouseghost
mq32, i mean, i'd rather use socket.h than winsock2

1570979040
mq32
you will use winsock on windows anyways

1570979059
daurnimator
mq32: huh?

1570979071
mouseghost
mq32, idk how to read that docs

1570979097
daurnimator
mq32: my intention (one day... expect a year from now...) is to avoid winsock on windows and use raw AFD instead

1570979097
mq32
daurnimator, afaik there's no way around winsock as it's the official socket API

1570979108
mq32
oh yeah, there was AFD

1570979139
daurnimator
mq32: winsock is essentially microsoft's userland wrapper around AFD. but they made some bad API decisions 20 years ago that we'd love to avoid having to deal with

1570979163
mq32
is there documentation on AFD?

1570979193
mq32
hm

1570979197
mq32
this is gonna be crazy :D

1570979208
mouseghost
i dont know why but theres pub fn socket but it doesnt exist in the docs?

1570979208
mq32
i'm writing a udp protocol that has no "receiver" :D

1570979220
mq32
mouseghost, don't rely on docs yet

1570979224
mouseghost
:(

1570979234
mq32
any function that is not tested (or referenced) isn't in the docs

1570979278
daurnimator
mq32: no. AFD is knowledge is mostly passed around in whispiers

1570979284
mq32
oh, sad

1570979304
mouseghost
mq32, i would take winsock but i dont know how to use it

1570979329
mq32
there's plenty of documentation

1570979337
mq32
also it resembles posix sockets a bit

1570979343
mouseghost
im scared of it

1570979350
mq32
of what? documentation?

1570979356
mq32
MSDN is quite good :)

1570979364
mouseghost
especially of msdn

1570979367
mq32
why?

1570979420
mouseghost
i mean, i dont know how to read it really and it just seems a little bit weird to me

1570979446
mq32
start here

1570979446
mq32


1570979451
mq32
there's even a full socket example

1570979601
mouseghost
but theres WSA added on the front of everything

1570979611
daurnimator
mouseghost: std.os should have most of the socket functions you need

1570979616
daurnimator
mouseghost: however there is not much documentation.

1570979623
mouseghost
i think i can manage

1570979636
mouseghost
somehow

1570979669
mouseghost
tho idk where do i find the things like AF_INET and all

1570979687
mq32
should be in std.os

1570979912
mouseghost
well, regardless, can i somehow interop with headers from mingw on windows to compile on windows?

1570979982
mq32
i don't think you need mingw at all, if you use musl

1570980004
mq32
but: i'm not a windows expert when it comes to zig

1570980014
mouseghost
im not sure if musl compiles to windows

1570980017
daurnimator
mq32: musl shouldn't work on windows...

1570980029
mq32
huh okay?

1570980063
mq32
ah, zig provides only glibc x86_64-windows-gnu

1570980192
mouseghost
then i mean, i dont know how to i get to this sys/socket.h really, cause i suppose i would have to add -isystem <dir where i keep my headers from mingw> buuut then types break

1570981132
TheLemonMan
daurnimator, how's #3080 going?

1570984003
donaldallen
I would like to build an application with multiple source files, with some calling among them. Vanilla stuff. I can @import callees into callers, but that involves compiling every callee each time I compile a caller. So I tried doing this C-style, where each of the files is compiled independently.

1570984076
donaldallen
I'm running into an issue that makes me wonder whether zig objects can be passed among such functions. Specifically, I got this error: /home/dca/Software/newcash_zig/composite_register/composite_register.zig:13:64: error: return type '[]u8' not allowed in function with calling convention 'ccc'extern fn guid_to_path(db: *c_void, account_guid:

1570984076
donaldallen
[*]const u8) []u8;                                                               ^/home/dca/Software/newcash_zig/composite_register/composite_register.zig:94:45: note: referenced here            const split_account_full_path = guid_to_path(db, split_guid);

1570984100
donaldallen
Sorry about the formatting.

1570984188
donaldallen
Can anyone enlighten me about this? Does calling out to an extern-ed function presume that the callee is written in C?

1570984218
pixelherodev
C functions can't use slices IIUC

1570984231
pixelherodev
So a C function can't return a value of type `[]u8`

1570984237
pixelherodev
What you want is probably `[*]u8`

1570984244
pixelherodev
A pointer to an unknown number of u8s

1570984271
donaldallen
But the called function is not written in C. It's written in zig. The two modules are compiled independently to produce .o files and I want to call from one to the other.

1570984290
fengb
extern adheres to C ABI

1570984347
fengb
Zig standard is just import everything by source, and the build system caches individual object files

1570984377
donaldallen
@fengb So my supposition that calling an extern-ed function is assumed to be C-like is correct.

1570984410
fengb
Yep

1570984488
donaldallen
Using the build system is a bit dicey at the moment, given the state of the documentation last time I looked. But knowing that it eliminates unnecessary recompilation is very helpful. I'll revert to using @import for this. Thanks for the help.

1570984567
fengb
zig build is in flux but the cli commands have been pretty stable (zig build-exe or zig build-lib)

1570984579
pixelherodev
Which is why I went with Makefile using those :)

1570984898
Snektron
donalddallen: @import is different from build.zig, and i don't think theres really anything wrong with it

1570984941
Snektron
build.zig can be a bit slow, but i usually just copy one from another project

1570984960
mq32
Snektron, donaldallen: @import and build.zig don't compete for the same job.

1570984970
Snektron
The system is not that complicated

1570984983
mq32
you don't need a build.zig for simple projects (most projects could probably live with a zig build-exe all the way)

1570985010
mq32
but build.zig allows to specify more complicated cased of the build (like packaging, installation, pre- and post-pocessing and such stuff)

1570985062
Snektron
There was talk of a custom compilation backend a while back which doesn't depend on llvm, i suppose that could be useful for build.zig

1570985227
donaldallen
Snektron -- you are missing my point. I am trying to eliminate unnecessary recompilation. I tried to do it C-style with a makefile and separate compilations to produce a bunch of .o-s to be linked. That doesn't work because cross-module calls are restricted to C objects. But fengb mentioned that the build system does what I want -- caches object

1570985227
donaldallen
files to avoid recompiling unchanged files (I presume). This allows me to revert to using @import, because I  can assume the build system will take care of this problem.

1570985255
pixelherodev
"cross-module calls are restricted to C objects." - actually, I have multiple .o files calling into each other

1570985269
pixelherodev
If you have a function declared `pub fn` and it's imported from the other module, you can use it normally

1570985304
donaldallen
pixelherodev -- that's certainly possible. What appears not to be possible is passing zig objects, e.g., slices, among them.

1570985313
pixelherodev
It is - i'm doing it

1570985331
pixelherodev
I have a `pub fn printf(comptime fmt: []const u8, args: ...) void` function in one module

1570985360
pixelherodev
Then in the other, it's just `@import("terminal.zig").printf("Example number: {d}", u8(3));`

1570985377
pixelherodev
(though I don't actually do one-liners; those are to not clog the IRC chat)

1570985378
donaldallen
Ah, so maybe my error was externing the target function, rather than just making it pub in target module.

1570985414
donaldallen
Thanks -- I'll give that a try.

1570985418
pixelherodev
No problem

1570985454
pixelherodev
On a different note, I ported the stack trace dumping from ClashOS to mine, but apparently `std.debug.openDwarfDebugInfo(&S.self_debug_info, kernel_panic_allocator);` causes a boot loop

1570985464
pixelherodev
Anyone here have more experience with freestanding zig able to lend a hand?

1570985533
TheLemonMan
maybe, can you trace exactly where it hangs?

1570985600
pixelherodev
Maybe. My next idea was to insert `while(true){}` in the std.debug function and track it down more precisely, but I figured I'd ask first and see if anyone else had run into this

1570985643
pixelherodev
Given that it's running from an ELF file, it'd be neat if I could just use *that*, but the ELF file itself isn't actually in memory

1570985678
TheLemonMan
my crystal ball is out of order at the moment heh

1570985700
TheLemonMan
yeah you just need the few debug_* sections, not the whole image

1570985753
pixelherodev
True, but it would still be easier - I could just pass in the address of the file and let the library handle the rest

1570985767
pixelherodev
Okay, so the problem is somewhere in scanAllFunctions...

1570985783
pixelherodev
I'm going to guess right now that something's wrong and the sections aren't being included properly or something like that :(

1570985817
TheLemonMan
another possibility is that I introduced some bug when I wrote than function :)

1570985876
pixelherodev
Any suggestions how to at least confirm the integrity of the data sections?

1570985924
TheLemonMan
eyeball them with readelf + objdump --dwarf

1570985926
pixelherodev
hmm, `objdump -dwarf` sure makes it look like there's valid stuff there

1570985984
TheLemonMan
is it stuck in the outer loop or the inner one?

1570985990
pixelherodev
`readelf: Warning: Unable to load/parse the .debug_info section, so cannot interpret the .debug_loc section.` Hmm.

1570986012
pixelherodev
But in the linker script there's definitely `KEEP(*(.debug_info))`

1570986053
TheLemonMan
does it appear in readelf -S ?

1570986085
pixelherodev
No!

1570986100
donaldallen
pixelherodev Works great. Thanks again.

1570986118
pixelherodev
donaldallen, no problem!

1570986134
TheLemonMan
oh well, no debug_info no party

1570986146
pixelherodev
Yeah - hey wait,

1570986151
pixelherodev
Oh wait

1570986161
pixelherodev
I don't know that they should be

1570986168
pixelherodev
I think they're all merged into .rodata

1570986229
TheLemonMan
that's fine (a bit weird but fine) as long as you export the start/end markers

1570986244
pixelherodev
Yep

1570986256
pixelherodev
".debug_info = dwarfSectionFromSymbol(&__debug_info_start, &__debug_info_end),"

1570986269
pixelherodev
Then in the linker script there's e.g. ` __debug_info_start = .;`

1570986303
pixelherodev
I don't know the DWARF format, is there a convenient string I can read to test that it's there?

1570986309
TheLemonMan
cool, then forget about dwarfdump

1570986329
pixelherodev
?

1570986359
TheLemonMan
you should see a few strings from the debug_str section

1570986456
pixelherodev
Yeah, I think I see them in `readelf -p .rodata`

1570986462
TheLemonMan
also, make sure your __debug_info_start,__debug_info_end are correctly pointing to the beginning/end of the data

1570986487
TheLemonMan
if you have a small reproducer I can have a look for you

1570986592
pixelherodev


1570986602
pixelherodev
Specifically,

1570986656
pixelherodev


1570986769
donaldallen
pixelherodev I can see you are in the middle of something else, but thought I'd mention this: you said you @import your target .zig file (terminal.zig). How do you know that file is not being recompiled when the calling file is compiled? I just tried renaming the target src file, leaving only the previously compiled .o and now the calling module

1570986769
donaldallen
won't compile, because it can't find the src file. @import-ing the .o also doesn't work. So while using your approach produces an executable without error, I am now realizing that I don't know that the imported file wasn't recompiled.

1570986842
pixelherodev
Not 100% certain? I'm largely recompiling everything anyways because it's fast enough and I've had files not get updated properly with changes

1570986861
pixelherodev
TheLemonMan, I think this is actually related to the bug I reported earlier (with u64s causing crashes)

1570986868
pixelherodev
The exact line causing the problem is `    var this_unit_offset = di.debug_info.offset;`

1570986907
pixelherodev
Line 2074 of std/debug.zig if my copy of the standard library is up to date

1570986963
pixelherodev
Now that I think about it, why do these functions use u64 instead of usize for pointers?

1570987105
TheLemonMan
because then you couldn't parse an ELF64 on a 32 bit system

1570987128
pixelherodev
Ah

1570987141
pixelherodev
The real question is why does using u64s cause a boot loop?

1570987151
pixelherodev
It's not calling panic, it's

1570987177
TheLemonMan
hm? I get an OutOfMemory error

1570987209
pixelherodev
Running the repo I linked?

1570987233
TheLemonMan
yep

1570987243
pixelherodev
That's...

1570987253
pixelherodev
What Zig version (commit)?

1570987258
pixelherodev
Maybe mine is out of date?

1570987261
TheLemonMan
head

1570987281
pixelherodev
Alrighty, I'll try that

1570987291
pixelherodev
If you up the memory on the panic_allocator, does it work?

1570987360
TheLemonMan
maybe, it didn't crash yet

1570987394
pixelherodev
Oh wait - there might be a while(true){} still in there ;P

1570987405
pixelherodev
Yep

1570987408
pixelherodev
That means it's probably working

1570987445
TheLemonMan
where's the while?

1570987471
pixelherodev
Give me one sec to push a change; I never finished implementing panic() because I was trying to diagnose the issue

1570987518
TheLemonMan
oh cool, I was trying to figure out where the rest of the code went

1570987623
nrdmn
TheLemonMan: in #3445 you said zig is now buildable with llvm 10. What do you mean by that, what's the current status? Because I'm still getting complaints from my compiler

1570987669
TheLemonMan
nrdmn, everything's working as intended, I'm using it as daily driver

1570987723
TheLemonMan
I'm syncing my changes with the LLVM's APT repo updates to the toolchain snapshots tho

1570987734
scientes
but why?

1570987741
scientes
what does llvm 10 offer

1570987760
pixelherodev
Hmm... even with zig at HEAD, it still doesn't work

1570987779
scientes
just use llvm 9 for another few months

1570987796
TheLemonMan
pixelherodev, yeah it's LLVM10 that fixed the bug you're experiencing :)

1570987815
pixelherodev
....dammit

1570987823
pixelherodev
It already took like eight hours to build LLVM 9 :(

1570987825
pixelherodev
Oh well

1570987825
TheLemonMan
scientes, see ;)

1570987827
pixelherodev
Thanks for the tip

1570987846
scientes
oh yeah, and we have that unified build think in cmake now

1570987851
scientes
so it builds just like clang does

1570987888
scientes
pixelherodev, but why build llvm 9, just download a binary

1570987902
TheLemonMan
if you manage to find the commit that fixed that problem you can ask the devs to backport it into 9.0.1

1570987908
pixelherodev
scientes, I'm running Gentoo ;)

1570987912
scientes
yes, please do a git bisect

1570987919
TheLemonMan
but good luck bisecting LLVM

1570987932
scientes
its not hard

1570987973
TheLemonMan
the only hard thing is watching the RAM usage raise way above the 12GB mark

1570987974
scientes
gentoo is a circle, you use gentoo to try to make your computer faster (doesn't work), then you need a faster computer to build gentoo

1570987987
nrdmn
>you use gentoo to try to make your computer faster

1570987988
nrdmn
wrong

1570987995
scientes
nah, you only need 4GB if you use the right configuration

1570987999
pixelherodev
I don't use it to make my computer faster

1570988002
pixelherodev
I use it because I like it

1570988025
TheLemonMan
even with tblgen + shared libs + ld.gold as linker it takes too much RAM

1570988036
scientes
TheLemonMan,  you have to turn off parallel links

1570988039
scientes
then you only need 4GB

1570988058
pixelherodev
TheLemonMan, shared libs often take MORE RAM, not less

1570988084
TheLemonMan
pixelherodev, you don't have to link the whole llvm amalgamation

1570988101
TheLemonMan
even with a single link job it uses more than 4GB

1570988115
pixelherodev
Fortunately, I have 8GB :)

1570988121
scientes
TheLemonMan, oh your are using gold

1570988123
scientes
lld is better

1570988130
scientes
gold is also largely abandoned

1570988145
scientes
pixelherodev, ^

1570988223
pixelherodev
Well, I'm going to just fire up something to do while this compiles

1570988237
pixelherodev
XKCD 303, always relevant

1570988318
scientes
pixelherodev, but it isn't your code

1570988339
pixelherodev
Still counts :)

1570989276
TheLemonMan
pixelherodev, sorry about that, the real problem is a change I've recently committed

1570989293
TheLemonMan
using LLVM10 somehow didn't trigger it, nice

1570989424
nrdmn
building zig with llvm 10 still breaks in various places for me

1570989438
nrdmn
there are still many references to llvm::make_unique in deps/

1570989465
TheLemonMan
pixelherodev, the workaround is sticking "-sse" here

1570989496
nrdmn
deps/lld/COFF/PDB.cpp includes llvm/Support/JamCRC.h, which doesn't exist in my build of llvm 10

1570989497
TheLemonMan
nrdmn, yeah I'm using -DZIG_FORCE_EXTERNAL_LLD=ON, don't care about the local lld copy

1570989543
TheLemonMan
afair all the patches have been upstreamed and a vanilla copy should be fine

1570989547
nrdmn
ah, okay

1570989625
nrdmn
so we won't need deps/lld in the future?

1570989664
TheLemonMan
gotta ask andrewrk when he's back for an offical answer

1570989809
pixelherodev
Wait, it was geenerating SSE instructions? Huh

1570989855
TheLemonMan
yep

1570990121
TheLemonMan
ideally i386 -> no SSE but good luck running the test suite, i686 -> use SSE and avoid all the x87 madness

1570990199
TheLemonMan
it's not even just x87 doing x87 things, sometimes LLVM also legalizes some ops on f16 by extending them to f32 and then forgetting to turn them back to f16

1570990262
scientes
heh

1570990352
pixelherodev
So... mostly fine then? :P

1570990355
pixelherodev
Yeah, OOM now

1570990624
pixelherodev
If I up the available RAM to 4MB, it instead panics

1570990647
pixelherodev
"reached unreachable code"

1570990730
TheLemonMan
I don't even get the OOM with the latest code you've uploaded

1570990786
pixelherodev
At least now it's able to open the Dwarf w/o issue

1570990799
pixelherodev
It panicks

1570990808
pixelherodev
Can't get a backtrace if the backtracer is panicking :P

1570990829
nrdmn
hmm, so gentoo's lld ebuild doesn't install header files :/

1570991052
pixelherodev
Now it's making it all the way to std.debug.printSourceAtAddressDwarf! Yay!

1570991652
pixelherodev
Assert failing, yay. 'assert(line_info_offset < di.debug_line.size);' which means data is probably wrong.

1570991655
pixelherodev
Probably.

1570993909
gruebite
where can i find the .h file from exporting functions?

1570993976
mq32
gruebite, there is none. you have to write it yourself

1570993988
mq32
but afaik there were plans on auto-creating headers

1570994030
gruebite
ahh, but this example has "include "mathtest.h""

1570994054
gruebite
so i assume it's just on the fly .h? no real file

1570994088
nrdmn
I think I've seen autogenerated .h files?

1570994100
nrdmn
gruebite: have you searched the zig-cache directory?

1570994122
gruebite
i have, the h/ dir has a bunch of .txt files

1570994356
pixelherodev
Autocreated headers already exist I think

1570994394
gruebite
i do not think they appear in zig-cache though

1570998450
pixelherodev
In spite of all the trouble I've been having today, Zig has managed to do what I thought was impossible and knock C down from its position as my #1 favorite language

1570998514
mouseghost
tell more :e

1570999330
diltsman
Probably a stupid question.  Why doesn't the standard library @cImport Windows.h?  I assume it has something to do with vendor specific extensions.

1570999531
pixelherodev
Well, for starters, 99% of use cases aren't going to be Windows.

1570999565
pixelherodev
That's like asking Why not @cImport pulse/pulseaudio.h

1570999590
diltsman
That is fair.  Does conditional compilation cover the @cImport statements?

1570999595
pixelherodev
Or openGL, or any other library

1570999615
pixelherodev
I think so

1570999689
diltsman
The particular case in the standard library is the allocator.  They explicitly declare the Win32 functions instead of using a @cImport.  Of course, Windows.h includes everything but the kitchen sink.

1570999715
pixelherodev
Yeah, even with WIN32_LEAN_AND_MEAN or whatever it's still bloated as hell

1570999782
pixelherodev
What I started to mention earlier: in less than a day, I feel like I've gotten a thorough understanding of at least 60% of the language, possibly a bit more. I've been using C for years and I only learned yesterday that there are intfast_t types

1570999853
pixelherodev
Zig is just plain awesome

1570999861
diltsman
intfast_t is nice.  I generally use uint_t, as memory usage is much more important in my field than the possible speed.

1571000055
pixelherodev
... anyone know if LLVM supports the XTensa ISA? I'm suddenly tempted to use Zig for work on a project that's currently C with a dash of evil (aka C++)

1571000113
mq32
pixelherodev, not officially, but there is an xtensa llvm port by espressif

1571000201
pixelherodev
Does it actually work?

1571000207
mq32
i never tried it

1571000225
mq32
but afaik they are in the process of including it into mainline LLVM

1571000264
pixelherodev
Is it possible to build Zig against that? If I do, would I have to manually extend Zig to support that target?

1571000512
mq32
i don't know, that's a question a zig dev should answer

1571001049
nrdmn
you'd probably be the first one to use zig on xtensa

1571001115
gruebite
yep, i thoroughly enjoy zig

1571001453
scientes
<TheLemonMan> nrdmn, yeah I'm using -DZIG_FORCE_EXTERNAL_LLD=ON, don't care

1571001458
scientes
that would also speed up my builds

1571001584
nrdmn
unfortunately gentoo's lld doesn't come with header files. Not sure what to do about that.

1571001596
scientes
ahh, same problem with debian

1571001602
scientes
you can check out llvm-project git

1571001949
mq32
can someone help mit with this error:

1571001950
mq32
usingnamespace @cImport({

1571001960
mq32
/tmp/hacks/src/c.zig:1:16: error: C import failed

1571001969
mq32
(welp, i should prefix paths with /say)

1571002002
scientes
mq32, why are you working in /tmp ?

1571002005
scientes
that isn't really kosher

1571002086
mq32
"i just wanted to try something"

1571002094
mq32
if it works, it will be moved to ~/projects

1571002099
scientes
oh ok

1571002102
scientes
fair enough

1571002105
mq32
if not, it will be gone after the next reboot and will not clobber my disk

1571002111
scientes
my projects folder is full of random stuff

1571002121
scientes
so much that i hvae to use two letters for tests now

1571002143
mq32
[felix@denkplatte ~]$ ls projects/ | wc -l

1571002143
mq32
297

1571002151
mq32
should i feel ashamed? :D

1571002206
nrdmn
impressive :D

1571002230
mq32
nrdmn, yeah. i can now say: i started 300 projects and finished 3!

1571002430
torque
I've been interested in using zig on xtensa as well (doing a lot of work with esp32) but last I looked, the xtensa llvm port seemed to be very immature

1571002544
torque
I ended up writing a pile of nasty c macros that sort of emulate zig's error mechanism which has actually been quite helpful

1571002790
mq32
can i somehow prevent zig from providing a windows.h?

1571002864
mq32
the one coming with glibc seems to create a broken cimport.zig

1571003529
diltsman
On a @cImport, how do you find the set of symbols that it found?

1571003649
mq32
there's a cimport.zig in zig-cache

1571003754
diltsman
I don't see that.  Do I need anything other than this:  const c = @cImport({@cInclude("Windows.h");});

1571003935
mq32
yeah, you need to link libc

1571003942
mq32
otherwise @cImport will not work

1571003952
mq32
which is a kinda weird requirement

1571003954
diltsman
Is that in build.zig?

1571003964
mq32
if you use build.zig, then yes

1571003982
mq32
exe.linkSystemLibrary("c");

1571003998
mq32
does anyone know how to add custom def files?

1571004116
mq32
ah damn. i should go to sleep

1571004286
diltsman
mg32, still not seeing it.

1571004418
diltsman
mq32 still not seeing it.

1571004441
Snektron
<pixelherodev> ... I've been using C for years and I only learned yesterday that there are intfast_t types

1571004482
Snektron
i learned today that `int python(int a[*]);` is valid syntax

1571004497
Snektron
and `int python(int n, int a[n]) {}`

1571004783
nrdmn
what, C has dependent types?

1571004894
Snektron
No in the last example a is a VLA

1571004918
Snektron
but since its a parameter its basically just an unknown length array

1571004949
Snektron
the first one presumably is for people who like to write their function declarations without parameter names

1571004961
Snektron
I know someone who does that, but i dont know why

1571005022
Snektron
`int python(int a[static 10]);` is also valid, it means a needs to have at least 10 elements

1571008408
gruebite
can i resize an array dynamically? i see a lot of code passing static arrays with some arbitrary buffer size. what's the standard library's strategy for avoiding buffer overflow?

1571009908
protty
Hey, does anyone know how to run system commands for a build step? Trying to generate docs in zig-cache and move them to the root directory and using "mv" via `b.addSystemCommand` doesnt seem to work.

1571009971
Snektron
did you add the step after?

1571010017
protty
yea, added it to default_step to make sure it was being executed. Getting a "InvalidName" error

1571010063
Snektron
I like Zig but man

1571010083
Snektron
"broken LLVM module found" when trying to return a !u32 from a function returning !?32 is less than ideal

1571010665
gruebite
Snektron: code?

1571011006
diltsman
Windows SDK header files are in one of the subdirectories in C:\Program Files (x86)\Windows Kits\10\Include.  Is there a way to determine how many there are and start parsing the directory names?

